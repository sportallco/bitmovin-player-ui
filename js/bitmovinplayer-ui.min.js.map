{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/custom/ts/components/playbackjumpbutton.ts","src/custom/ts/components/playbackjumpoverlay.ts","src/ts/arrayutils.ts","src/ts/audiotrackutils.ts","src/ts/browserutils.ts","src/ts/components/adclickoverlay.ts","src/ts/components/admessagelabel.ts","src/ts/components/adskipbutton.ts","src/ts/components/airplaytogglebutton.ts","src/ts/components/audioqualityselectbox.ts","src/ts/components/audiotracklistbox.ts","src/ts/components/audiotrackselectbox.ts","src/ts/components/bufferingoverlay.ts","src/ts/components/button.ts","src/ts/components/caststatusoverlay.ts","src/ts/components/casttogglebutton.ts","src/ts/components/castuicontainer.ts","src/ts/components/clickoverlay.ts","src/ts/components/closebutton.ts","src/ts/components/component.ts","src/ts/components/container.ts","src/ts/components/controlbar.ts","src/ts/components/errormessageoverlay.ts","src/ts/components/fullscreentogglebutton.ts","src/ts/components/hugeplaybacktogglebutton.ts","src/ts/components/hugereplaybutton.ts","src/ts/components/itemselectionlist.ts","src/ts/components/label.ts","src/ts/components/listbox.ts","src/ts/components/listselector.ts","src/ts/components/metadatalabel.ts","src/ts/components/pictureinpicturetogglebutton.ts","src/ts/components/playbackspeedselectbox.ts","src/ts/components/playbacktimelabel.ts","src/ts/components/playbacktogglebutton.ts","src/ts/components/playbacktoggleoverlay.ts","src/ts/components/recommendationoverlay.ts","src/ts/components/replaybutton.ts","src/ts/components/seekbar.ts","src/ts/components/seekbarbufferlevel.ts","src/ts/components/seekbarcontroller.ts","src/ts/components/seekbarlabel.ts","src/ts/components/selectbox.ts","src/ts/components/settingspanel.ts","src/ts/components/settingspanelitem.ts","src/ts/components/settingspanelpage.ts","src/ts/components/settingspanelpagebackbutton.ts","src/ts/components/settingspanelpagenavigatorbutton.ts","src/ts/components/settingspanelpageopenbutton.ts","src/ts/components/settingstogglebutton.ts","src/ts/components/spacer.ts","src/ts/components/subtitlelistbox.ts","src/ts/components/subtitleoverlay.ts","src/ts/components/subtitleselectbox.ts","src/ts/components/subtitlesettings/backgroundcolorselectbox.ts","src/ts/components/subtitlesettings/backgroundopacityselectbox.ts","src/ts/components/subtitlesettings/characteredgeselectbox.ts","src/ts/components/subtitlesettings/fontcolorselectbox.ts","src/ts/components/subtitlesettings/fontfamilyselectbox.ts","src/ts/components/subtitlesettings/fontopacityselectbox.ts","src/ts/components/subtitlesettings/fontsizeselectbox.ts","src/ts/components/subtitlesettings/subtitlesettingselectbox.ts","src/ts/components/subtitlesettings/subtitlesettingslabel.ts","src/ts/components/subtitlesettings/subtitlesettingsmanager.ts","src/ts/components/subtitlesettings/subtitlesettingspanelpage.ts","src/ts/components/subtitlesettings/subtitlesettingsresetbutton.ts","src/ts/components/subtitlesettings/windowcolorselectbox.ts","src/ts/components/subtitlesettings/windowopacityselectbox.ts","src/ts/components/timelinemarkershandler.ts","src/ts/components/titlebar.ts","src/ts/components/togglebutton.ts","src/ts/components/tvnoisecanvas.ts","src/ts/components/uicontainer.ts","src/ts/components/videoqualityselectbox.ts","src/ts/components/volumecontrolbutton.ts","src/ts/components/volumeslider.ts","src/ts/components/volumetogglebutton.ts","src/ts/components/vrtogglebutton.ts","src/ts/components/watermark.ts","src/ts/demofactory.ts","src/ts/dom.ts","src/ts/errorutils.ts","src/ts/eventdispatcher.ts","src/ts/focusvisibilitytracker.ts","src/ts/groupplaybackapi.ts","src/ts/guid.ts","src/ts/imageloader.ts","src/ts/localization/i18n.ts","src/ts/localization/languages/de.json","src/ts/localization/languages/en.json","src/ts/localization/languages/es.json","src/ts/main.ts","src/ts/mobilev3playerapi.ts","src/ts/playerutils.ts","src/ts/spatialnavigation/ListNavigationGroup.ts","src/ts/spatialnavigation/gethtmlelementsfromcomponents.ts","src/ts/spatialnavigation/keymap.ts","src/ts/spatialnavigation/navigationalgorithm.ts","src/ts/spatialnavigation/navigationgroup.ts","src/ts/spatialnavigation/nodeeventsubscriber.ts","src/ts/spatialnavigation/rootnavigationgroup.ts","src/ts/spatialnavigation/seekbarhandler.ts","src/ts/spatialnavigation/spatialnavigation.ts","src/ts/spatialnavigation/typeguards.ts","src/ts/spatialnavigation/types.ts","src/ts/storageutils.ts","src/ts/stringutils.ts","src/ts/subtitleutils.ts","src/ts/timeout.ts","src/ts/uifactory.ts","src/ts/uimanager.ts","src/ts/uiutils.ts","src/ts/volumecontroller.ts","src/ts/vttutils.ts"],"names":["f","g","exports","module","define","amd","window","global","self","this","bitmovin","playerui","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_super","button_1","i18n_1","PlaybackJumpButtons","Button","__extends","prototype","configure","player","uimanager","_this","onClick","subscribe","currentTime","getCurrentTime","duration","getDuration","isLive","newTime","config","skipTime","Math","max","min","seek","mergeConfig","cssClass","text","ariaLabel","PlaybackForwardButton","__assign","i18n","getLocalizer","PlaybackRewindButton","container_1","playbackjumpbutton_1","PlaybackJumpControlsOverlay","Container","forwardButton","rewindButton","components","ArrayUtils","remove","array","item","index","indexOf","splice","AudioTrackSwitchHandler","element","addAudioTrack","event","audioTrack","track","listElement","hasItem","id","addItem","label","removeAudioTrack","removeItem","selectCurrentAudioTrack","currentAudioTrack","getAudio","selectItem","refreshAudioTracks","audioTracks","getAvailableAudio","synchronizeItems","map","key","bindSelectionEvent","bindPlayerEvents","onItemSelected","_","value","setAudio","on","PlayerEvent","AudioChanged","SourceUnloaded","PeriodSwitched","AudioAdded","AudioRemoved","getConfig","events","onUpdated","BrowserUtils","Object","defineProperty","windowExists","navigator","userAgent","test","isHisense","platform","includes","maxTouchPoints","msMaxTouchPoints","clickoverlay_1","AdClickOverlay","ClickOverlay","adFinishedHandler","setUrl","clickThroughCallback","AdStarted","ad","clickThroughUrl","clickThroughUrlOpened","AdFinished","AdSkipped","AdError","pause","label_1","stringutils_1","AdMessageLabel","Label","adEndHandler","off","TimeChanged","updateMessageHandler","setText","StringUtils","replaceAdMessagePlaceholders","performLocalization","uiConfig","message","AdSkipButton","updateSkipMessageHandler","untilSkippableMessage","skippableMessage","skipOffset","show","disable","enable","skippableAfter","hide","ads","skip","togglebutton_1","AirPlayToggleButton","ToggleButton","airPlayAvailableHandler","isAirplayAvailable","showAirplayTargetPicker","console","log","airPlayChangedHandler","isAirplayActive","AirplayAvailable","AirplayChanged","selectbox_1","AudioQualitySelectBox","SelectBox","updateAudioQualities","audioQualities","getAvailableAudioQualities","clearItems","_i","audioQualities_1","audioQuality","selectCurrentAudioQuality","getAudioQuality","sender","setAudioQuality","AudioQualityChanged","AudioQualityAdded","AudioQualityRemoved","cssClasses","listbox_1","audiotrackutils_1","AudioTrackListBox","ListBox","AudioTrackSelectBox","component_1","timeout_1","BufferingOverlay","showOverlay","overlayShowTimeout","start","hideOverlay","clear","Timeout","showDelayMs","StallStarted","StallEnded","Play","Playing","Paused","Seek","Seeked","TimeShift","TimeShifted","isStalled","indicators","Component","tag","role","hidden","dom_1","eventdispatcher_1","toDomElement","buttonElementAttributes","aria-label","class","getCssClasses","type","aria-pressed","tabindex","tabIndex","toString","buttonElement","DOM","append","prefixCss","html","onClickEvent","getDomElement","find","buttonEvents","dispatch","getEvent","EventDispatcher","CastStatusOverlay","CastWaitingForDevice","castDeviceName","castPayload","deviceName","statusLabel","CastStarted","CastStopped","CastToggleButton","castAvailableHander","isCastAvailable","isCasting","castStop","castVideo","CastAvailable","uicontainer_1","CastUIContainer","UIContainer","isUiShown","showUi","castUiHideTimeout","hideDelay","onControlsHide","onControlsShow","showUiPermanently","showUiWithTimeout","isPlaying","release","initialize","url","data","open","getUrl","undefined","CloseButton","target","guid_1","disabled","isHidden","isDisabled","onShow","onComponentShow","onHide","onComponentHide","onHoverChangedEvent","hasDomElement","Boolean","setAriaLabel","setAriaAttr","name","attr","concat","defaults","base","assign","css","join","trim","cssClassOrId","cssPrefix","addClass","CLASS_HIDDEN","onHideEvent","removeClass","onShowEvent","isShown","toggleHidden","CLASS_DISABLED","onDisabledEvent","onEnabledEvent","isEnabled","isHovered","hovered","componentEvents","onEnabled","onDisabled","onHoverChanged","Guid","next","arrayutils_1","addComponent","component","push","componentsToAdd","removeComponent","componentsToRemove","getComponents","removeComponents","_a","slice","updateComponents","shift","innerContainerElement","containerElement","innerContainer","initialComponent","uiutils_1","spacer_1","browserutils_1","settingspanel_1","ControlBar","hoverStackCount","isSettingsPanelShown","disableAutoHideWhenHovered","isMobile","UIUtils","traverseTree","Spacer","args","SettingsPanel","onPreviewControlsHide","cancel","tvnoisecanvas_1","errorutils_1","mobilev3playerapi_1","ErrorMessageOverlay","errorEventHandler","handleErrorMessage","customizedMessage","errorMessages","customMessage","messages","display","isMobileV3PlayerAPI","MobileV3PlayerEvent","PlayerError","ErrorUtils","defaultMobileV3ErrorMessageTranslator","SourceError","defaultWebErrorMessageTranslator","SourceLoaded","tvNoiseBackground","stop","errorMessage","errorLabel","TvNoiseCanvas","FullscreenToggleButton","fullscreenStateHandler","getViewMode","ViewMode","Fullscreen","fullscreenAvailabilityChangedHandler","isFullScreenAvailable","isViewModeAvailable","ViewModeChanged","ViewModeAvailabilityChanged","targetViewMode","Inline","setViewMode","playbacktogglebutton_1","HugePlaybackToggleButton","PlaybackToggleButton","togglePlayback","isPlayInitiated","play","toggleFullscreen","suppressPlayButtonTransitionAnimation","setTransitionAnimationsEnabled","onToggle","subscribeOnce","firstPlay","enterFullscreenOnInitialPlayback","clickTime","doubleClickTime","isAutoplayEnabled","now","Date","setTimeout","Warning","WarningCode","PLAYBACK_COULD_NOT_BE_STARTED","playback","autoplay","isAutoplayUpcoming","getSource","enabled","noTransitionAnimationsClass","hasClass","HugeReplayButton","listselector_1","ItemSelectionList","ListSelector","isActive","items","updateDomItems","selectedValue","selectedListItem","empty","listItem","CLASS_SELECTED","deselectItem","this_1","String","onItemSelectedEvent","onItemAddedEvent","selectedItem","onItemRemovedEvent","tagName","for","labelElement","localizedText","onTextChangedEvent","getText","clearText","isEmpty","labelEvents","onTextChanged","onItemAdded","addListBoxDomItem","onItemRemoved","removeListBoxDomItem","refreshSelectedItem","listBoxElement","createListBoxDomItems","buildListBoxItemButton","ListBoxItemButton","getComponentForKey","c","listBoxItemButton_1","newItem","getItemForKey","handleSelectionChange","onClass","offClass","getItemIndex","parseInt","getItems","sortedInsert","filter","translator","findIndex","entry","getSelectedItem","newItems","forEach","items_1","itemCount","keys","listSelectorEvents","MetadataLabelContent","MetadataLabel","init","content","Title","uiconfig","metadata","title","Description","description","toLowerCase","PictureInPictureToggleButton","pictureInPictureStateHandler","PictureInPicture","pictureInPictureAvailabilityChangedHandler","isPictureInPictureAvailable","PlaybackSpeedSelectBox","setDefaultValue","playbackSpeed","getPlaybackSpeed","setSpeed","addDefaultItems","setPlaybackSpeed","parseFloat","PlaybackSpeedChanged","speed","customItems","defaultPlaybackSpeeds","sort","PlaybackTimeLabelMode","playerutils_1","PlaybackTimeLabel","minWidth","min-width","updateTimeFormatBasedOnDuration","live","liveCssClass","liveEdgeCssClass","liveClickHandler","timeShift","updateLiveTimeshiftState","isTimeshifted","isTimeshiftAvailable","getTimeShift","getMaxTimeShift","isPaused","liveStreamDetector","PlayerUtils","LiveStreamDetector","playbackTimeHandler","onLiveChanged","hideInLivePlayback","unsubscribe","detect","Infinity","setTime","getCurrentTimeRelativeToSeekableRange","width","timeFormat","abs","FORMAT_HHMMSS","FORMAT_MMSS","Ready","playbackSeconds","durationSeconds","secondsToTime","totalTime","timeLabelMode","CurrentTime","TotalTime","CurrentAndTotalTime","RemainingTime","remainingTime","setTimeFormat","handleClickEvent","playbackStateHandler","isSeeking","updateLiveState","isTimeShiftAvailable","CLASS_STOPTOGGLE","timeShiftDetector","PlaybackFinished","TimeShiftAvailabilityDetector","onTimeShiftAvailabilityChanged","onSeek","onSeeked","onAriaLabel","offAriaLabel","hugeplaybacktogglebutton_1","PlaybackToggleOverlay","playbackToggleButton","hugereplaybutton_1","RecommendationOverlay","setupRecommendations","clearRecommendations","recommendations","recommendations_1","RecommendationItem","itemConfig","replayButton","itemElement","href","background-image","thumbnail","bgElement","titleElement","timeElement","ReplayButton","hasEnded","groupplaybackapi_1","seekbarcontroller_1","timelinemarkershandler_1","seekbarbufferlevel_1","SeekBar","hasLabel","getLabel","setAriaSliderMinMax","setAriaSliderValues","ariaValueText","seekBarType","SeekBarType","Live","timeshiftValue","ceil","Vod","secondsToText","floor","getPlaybackPositionPercentage","getRelativeCurrentTime","updateBufferLevel","playbackPositionPercentage","bufferLoadedPercentageLevel","getMinBufferLevel","setBufferPosition","configureSeek","scrubbing","isPlayerSeeking","suspension","playbackPositionHandler","isGroupPlaybackAPIAvailable","hasTimeShift","switchVisibility","setPosition","seekBarBackdrop","SeekBarController","keyStepIncrements","volumeController","setSeekBarControls","forceUpdate","isUserSeeking","SegmentRequestFinished","setPlaybackPosition","isInInitialStartupState","smoothPlaybackPositionUpdateIntervalMs","SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED","isNeitherPausedNorPlaying","configureLivePausedTimeshiftUpdater","onPlayerSeek","setSeeking","onPlayerSeeked","groupPlayback","hasJoined","beginSuspension","GroupPlaybackSuspensionReason","UserIsScrubbing","onSeekPreview","enableSeekPreview","subscribeRateLimited","seekWhileScrubbing","percentage","proposedPlaybackTime","getTargetSeekPosition","endSuspension","refreshPlaybackPosition","smoothPlaybackPositionUpdater","timeShiftAvailable","PlayerResized","onConfigured","seekbarSnappingRange","snappingRange","setSeekPosition","configureSmoothPlaybackPositionUpdater","initializeTimelineMarkers","Volume","timelineMarkerConfig","timelineMarkersHandler","TimelineMarkersHandler","seekBar","seekBarMarkersContainer","pausedTimeshiftUpdater","startSmoothPlaybackPositionUpdater","currentTimeSeekBar","stopSmoothPlaybackPositionUpdater","currentTimePlayer","updateIntervalMs","error","PlayerAPINotAvailableError","currentTimeDelta","seekBarContainer","vertical","seekBarBufferLevel","seekBarPlaybackPosition","seekBarBufferPosition","seekBarPlaybackPositionMarker","seekBarSeekPosition","seekBarChapterMarkersContainer","seeking","mouseTouchMoveHandler","preventDefault","vr","stopPropagation","targetPercentage","getOffset","onSeekPreviewEvent","mouseTouchUpHandler","document","snappedChapter","getMarkerAtPosition","onSeekedEvent","position","isTouchEvent","isTouchSupported","onSeekEvent","getHorizontalOffset","eventPageX","elementOffsetPx","offset","left","widthPx","sanitizeOffset","getVerticalOffset","eventPageY","top","height","changedTouches","touches","pageY","pageX","MouseEvent","warn","percent","px","style","transform","-ms-transform","-webkit-transform","scale","CLASS_SEEKING","seekBarEvents","snappedMarker","seekPositionPercentage","marker","TouchEvent","seekableRangeStart","maxTimeShift","getSeekableRangeStart","targetPlaybackPosition","leftRight","upDown","playerDuration","videoBufferLength","getVideoBufferLength","audioBufferLength","getAudioBufferLength","bufferLength","Number","MAX_VALUE","coerceValueIntoRange","range","cb","arrowKeyControls","currentValue","valueUpdate","controlValue","right","up","down","home","end","seekBarControls","volumeTransition","startTransition","getVolume","finish","bind","domElement","controls","keyCode","KeyCode","LeftArrow","RightArrow","UpArrow","DownArrow","Home","End","Space","imageloader_1","SeekBarLabel","setTitleText","setThumbnail","uiManager","handleSeekPreview","timeLabel","seconds","titleLabel","thumbnailElement","thumbnailImageLoader","load","x","thumbnailCssSprite","thumbnailCssSingleImage","sizeX","sizeY","offsetX","offsetY","y","aspectRatio","padding-bottom","background-size","background-position","appliedMarkerCssClasses","targetTimeShift","currentTimeShift","timeShiftPreview","wallClockTime","getThumbnail","time","ImageLoader","selectElement","val","optionElement","NavigationDirection","settingspanelpage_1","hideHoveredSelectBoxes","hideTimeout","reset","activePage","onInactiveEvent","resetNavigation","onActiveEvent","getRootPage","onSettingsStateChanged","onSettingsStateChangedEvent","updateActivePageClass","getActivePage","setActivePageIndex","setActivePage","getPages","targetPage","navigateToPage","Forwards","pageTransitionAnimation","popToRootSettingsPanelPage","popSettingsPanelPage","navigationStack","Backwards","rootPageHasActiveSettings","hasActiveSettings","SettingsPanelPage","settingsPanelEvents","page","CLASS_ACTIVE_PAGE","resetNavigationOnShow","sourcePage","rootPage","animateNavigation","direction","skipAnimation","pop","settingsPanelDomElement","settingsPanelWidth","settingsPanelHeight","clone","targetSettingsPanelHeight","settingsPanelHTMLElement","get","scrollWidth","scrollHeight","targetPageHtmlElement","cloneNode","parentNode","appendChild","targetSettingsPanelWidth","parentElement","removeChild","forceBrowserReflow","offsetLeft","getComputedItems","selectBox_1","oldDisplay_1","setting","requestAnimationFrame","allItems","apply","videoqualityselectbox_1","audioqualityselectbox_1","playbackspeedselectbox_1","SettingsPanelItem","handleConfigItemChanged","minItemsToDisplay","VideoQualitySelectBox","hasAutoItem","playbackSpeedSelectionEnabled","onActiveChangedEvent","settingsPanelItemEvents","onActiveChanged","settingspanelitem_1","settingsStateChangedHandler","lastShownItem","CLASS_LAST","settingsPanelPageEvents","activeItems","onActive","isIOS","isMacIntel","focusToFirstInput","onInactive","settingspanelpagenavigatorbutton_1","SettingsPanelPageBackButton","SettingsPanelPageNavigatorButton","popPage","container","pushTargetPage","SettingsPanelPageOpenButton","SettingsToggleButton","settingsPanel","visibleSettingsPanels","autoHideWhenNoActiveSettings","settingsPanelItemsChangedHandler","subtitleutils_1","SubtitleListBox","SubtitleSwitchHandler","controlbar_1","vttutils_1","SubtitleOverlay","subtitleClearHandler","subtitleContainerManager","subtitleManager","clearInactiveCues","toRemove","removeLabel","ActiveSubtitleManager","SubtitleRegionContainerManager","CueEnter","generateLabel","cueEnter","preprocessLabelEventCallback","previewSubtitleActive","previewSubtitle","addLabel","size","forceSubtitlesIntoViewContainer","handleSubtitleCropping","CueUpdate","labelToReplace","cueUpdate","replaceLabel","CueExit","labelToRemove","cueExit","hasCues","SubtitleEnabled","SubtitleDisabled","CLASS_CONTROLBAR_VISIBLE","configureCea608Captions","detectCroppedSubtitleLabel","parent","childRect","getBoundingClientRect","parentRect","bottom","labelDomElement","cropDetection","removeCss","row","column","SubtitleLabel","generateImageTagText","image","vtt","region","regionStyle","updateCEA608FontSize","dummyLabel","font-size","line-height","visibility","dummyLabelCharWidth","dummyLabelCharHeight","fontSizeRatio","subtitleOverlayWidth","subtitleOverlayHeight","fontLetterSpacing","CEA608_NUM_COLUMNS","CEA608_NUM_ROWS","fontSize","letter-spacing","CLASS_CEA_608","fontSizeCalculationRequired","CEA608_COLUMN_OFFSET","CEA608_ROW_OFFSET","enablePreviewSubtitleLabel","removePreviewSubtitleLabel","calculateId","addCueToMap","popCueFromMap","activeSubtitleCueMap","activeSubtitleCueCount","activeSubtitleCues","activeSubtitleCue","removedCues","cue","imageData","imgTag","src","outerHTML","getCues","cueCount","getRegion","regionContainerId","regionName","overlaySize","subtitleRegionContainers","regionContainerId_1","regionContainer","SubtitleRegionContainer","subtitleOverlay","previousLabel","newLabel","labelToAdd","labelCount","VttUtils","setVttRegionStyles","setVttCueBoxStyles","SubtitleSelectBox","subtitlesettingselectbox_1","BackgroundColorSelectBox","SubtitleSettingSelectBox","setColorAndOpacity","settingsManager","backgroundColor","isSet","backgroundOpacity","toggleOverlayClass","onChanged","property","BackgroundOpacitySelectBox","CharacterEdgeSelectBox","characterEdge","FontColorSelectBox","fontColor","fontOpacity","FontFamilySelectBox","fontFamily","FontOpacitySelectBox","FontSizeSelectBox","currentCssClass","overlay","SubtitleSettingsLabel","opener","storageutils_1","SubtitleSettingsManager","propertyName","_properties","SubtitleSettingsProperty","windowColor","windowOpacity","userSettings","localStorageKey","DummyComponent","instance","save","StorageUtils","setObject","getObject","_instance","_value","onChangedEvent","_onChanged","_manager","manager","subtitlesettingsmanager_1","fontsizeselectbox_1","fontfamilyselectbox_1","fontcolorselectbox_1","fontopacityselectbox_1","characteredgeselectbox_1","backgroundcolorselectbox_1","backgroundopacityselectbox_1","windowcolorselectbox_1","windowopacityselectbox_1","subtitlesettingsresetbutton_1","settingspanelpagebackbutton_1","SubtitleSettingsPanelPage","WindowColorSelectBox","WindowOpacitySelectBox","SubtitleSettingsResetButton","getSeekBarWidth","markersContainer","timelineMarkers","configureMarkers","clearMarkers","AdBreakStarted","AdBreakFinished","updateMarkers","updateMarkersDOM","onRelease","intervalMarkerMatch","positionMarkerMatch","removeMarkerFromConfig","markers","_marker","filterRemovedMarkers","seekbarMarker","matchingMarker","removeMarkerFromDOM","shouldProcessMarkers","validToProcess","hasMarkers","markerPosition","markerDuration","getSeekableRangeRespectingLive","isNaN","updateMarkerDOM","newMarker","createMarkerDOM","getMarkerCssProperties","seekBarWidthPx","positionInPx","cssProperties","markerWidthPx","round","imageElement_1","markerClasses","markerElement","data-marker-time","data-marker-title","imageUrl","handler","Destroy","metadatalabel_1","TitleBar","shouldBeShown","hasMetadataText","checkMetadataTextAndUpdateVisibility","keepHiddenWithoutMetadata","isOff","onState","onToggleEvent","onToggleOnEvent","isOn","onToggleOffEvent","toggle","toggleButtonEvents","onToggleOn","onToggleOff","canvas","canvasElement","canvasContext","getContext","noiseAnimationWindowPos","canvasHeight","lastFrameUpdate","canvasWidth","renderFrame","useAnimationFrame","cancelAnimationFrame","clearTimeout","frameUpdateHandlerId","frameInterval","getTime","currentPixelOffset","noiseImage","createImageData","random","interferenceHeight","putImageData","scheduleNextRender","userInteractionEventSource","configureUIShowHide","configurePlayerStates","isFirstTouch","playerState","hidingPrevented","hidePlayerStateExceptions","uiHideTimeout","hideUi","previewHideEventArgs","userInteractionEvents","playerStateChange","state","enumName","stateClassNames","PlayerState","STATE_PREFIX","updateState","removeStates","updateLayoutSizeClasses","Idle","Prepared","Finished","getState","FULLSCREEN","BUFFERING","REMOTE_CONTROL","CONTROLS_HIDDEN","CONTROLS_SHOWN","substring","getContainer","createElement","flex","updateVideoQualities","videoQualities","getAvailableVideoQualities","hasAuto","getStreamType","videoQualities_1","videoQuality","selectCurrentVideoQuality","getVideoQuality","setVideoQuality","VideoQualityChanged","VideoQualityAdded","VideoQualityRemoved","volumeslider_1","volumetogglebutton_1","VolumeControlButton","volumeToggleButton","getVolumeToggleButton","volumeSlider","getVolumeSlider","volumeSliderHovered","volumeSliderHideTimeout","VolumeToggleButton","VolumeSlider","seekbar_1","setVolumeAriaSliderValues","hideIfVolumeControlProhibited","detectVolumeControlAvailability","muted","volume","updateVolumeWhileScrubbing","dummyVideoElement","update","volumeLevelTens","toggleMuted","defaultConfig","VRToggleButton","vrStateHandler","ev","VR_RENDERING_ERROR","isVRConfigured","isVRStereoAvailable","getStereo","vrButtonVisibilityHandler","source","VRStereoChanged","setStereo","Watermark","vrtogglebutton_1","settingstogglebutton_1","playbacktimelabel_1","airplaytogglebutton_1","errormessageoverlay_1","casttogglebutton_1","fullscreentogglebutton_1","recommendationoverlay_1","caststatusoverlay_1","watermark_1","subtitleoverlay_1","seekbarlabel_1","playbacktoggleoverlay_1","pictureinpicturetogglebutton_1","uimanager_1","titlebar_1","bufferingoverlay_1","subtitlelistbox_1","audiotracklistbox_1","uifactory_1","DemoFactory","buildDemoWithSeparateAudioSubtitlesButtons","subtitleListBox","audioTrackListBox","UIManager","ui","UIFactory","modernSmallScreenAdsUI","condition","context","documentWidth","isAd","adRequiresUi","modernAdsUI","modernSmallScreenUI","subtitleSettingsPanel","audioTrackSettingsPanel","controlBar","something","attributes","Array","HTMLElement","elements","Document","attributeName","attributeValue","setAttribute","findChildElements","findChildElementsOfElement","selector","childElements","querySelectorAll","allChildElements","inputElements","focus","scrollTo","arguments","setHtml","getHtml","innerHTML","HTMLSelectElement","HTMLInputElement","attribute","setAttr","getAttr","removeAttr","removeAttribute","getAttribute","dataAttribute","setData","getData","childElement","elementRect","htmlRect","body","offsetWidth","offsetHeight","eventName","eventHandler","split","addEventListener","removeEventListener","className","classNames","classList","add","replace","RegExp","contains","propertyNameOrCollection","setCss","getCss","setCssCollection","elementIndex","removeProperty","getComputedStyle","ruleValueCollection","defaultErrorMessages","1000","1001","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1200","1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1300","1301","1302","1303","1304","1400","1401","1402","1403","1404","2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014","2100","2101","3000","3001","3002","3003","3004","3100","listeners","listener","EventListenerWrapper","rateMs","RateLimitedEventListenerWrapper","subscribedListener","unsubscribeAll","listenersToRemove","listeners_1","fire","isOnce","listenersToRemove_1","eventListener","once","shouldFireEvent","rateLimitTimout","fireSuper","rateLimitingEventListener","startRateLimiting","lastSeenEvent","FocusVisibleCssClassName","FocusVisibilityTracker","bitmovinUiPrefix","lastInteractionWasKeyboard","onKeyDown","metaKey","altKey","ctrlKey","onMouseOrPointerOrTouch","onFocus","isHtmlElement","onBlur","eventHandlerMap","mousedown","pointerdown","touchstart","keydown","blur","registerEventListeners","DOMTokenList","event_1","unregisterEventListeners","event_2","guid","loadedCallback","state_1","loaded","callLoadedCallback","de_json_1","__importDefault","en_json_1","es_json_1","defaultLocalizationConfig","defaultVocabularies","en","default","de","es","language","vocabularies","I18n","setConfig","mergedConfig","detectBrowserLanguage","mergeVocabulariesWithDefaultVocabularies","initializeLanguage","initializeVocabulary","containsLanguage","hasOwnProperty","rawVocabularies","reduce","mergedVocabularies","vocabulary","browserLanguageDetectionEnabled","userLanguage","shortenedUserLanguage","vocab","lang","replaceVariableWithPlaceholderIfExists","matches","match","m","str","vocabularyString","settings.video.quality","settings.audio.quality","settings.audio.track","playPause","close","settings.audio.mute","settings.audio.volume","pictureInPicture","appleAirplay","googleCast","settings","fullscreen","settings.subtitles","settings.subtitles.font.size","settings.subtitles.font.family","settings.subtitles.font.color","settings.subtitles.font.opacity","settings.subtitles.characterEdge","settings.subtitles.background.color","settings.subtitles.background.opacity","settings.subtitles.window.color","settings.subtitles.window.opacity","settings.time.hours","settings.time.minutes","settings.time.seconds","back","replay","ads.remainingTime","colors.white","colors.black","colors.red","colors.green","colors.blue","colors.yellow","subtitle.example","subtitle.select","playingOn","connectingTo","watermarkLink","seekBar.value","seekBar.timeshift","seekBar.durationText","colors.cyan","colors.magenta","settings.subtitles.characterEdge.raised","settings.subtitles.characterEdge.depressed","settings.subtitles.characterEdge.uniform","settings.subtitles.characterEdge.dropshadowed","settings.subtitles.font.family.monospacedserif","settings.subtitles.font.family.proportionalserif","settings.subtitles.font.family.monospacedsansserif","settings.subtitles.font.family.proportionalsansserif","settings.subtitles.font.family.casual","settings.subtitles.font.family.cursive","settings.subtitles.font.family.smallcapital","auto","normal","version","enumerable","UIInstanceManager","demofactory_1","spatialnavigation_1","navigationgroup_1","SpatialNavigation","rootnavigationgroup_1","NavigationGroup","ListNavigationGroup_1","RootNavigationGroup","ListNavigationGroup","ListOrientation","itemselectionlist_1","audiotrackselectbox_1","subtitleselectbox_1","volumecontrolbutton_1","adskipbutton_1","admessagelabel_1","adclickoverlay_1","castuicontainer_1","closebutton_1","subtitlesettingslabel_1","settingspanelpageopenbutton_1","subtitlesettingspanelpage_1","replaybutton_1","TypeError","timeShiftAvailabilityChangedEvent","liveDetector","liveChangedEvent","isAndroid","isChrome","DurationChanged","defaultValue","getSeekableRange","currentTimeshift","maxTimeshift","timeShiftAvailableNow","liveNow","types_1","handleAction","action","Action","SELECT","BACK","handleNavigation","listNavigationDirections","orientation","__spreadArray","Vertical","Direction","UP","DOWN","Horizontal","LEFT","RIGHT","typeguards_1","getHtmlElementsFromComponents","htmlElements","resolveAllComponents","childComponents","containerOrComponent","isContainer","isComponent","isListBox","children","TizenKeyMap","isApplicable","isTizen","keyCodes","38","40","37","39","13","10009","WebOsKeyMap","isWebOs","461","PlayStationKeyMap","isPlayStation","27","AndroidKeyMap","19","20","21","22","23","66","4","HisenseKeyMap","8","DefaultKeyMap","getKeyMapForPlatform","applicableKeyMap","keyMap","vector","sqrt","pow","getElementVector","boundingRect","getBoundingRectFromElement","calculateAngle","b","directionVector","len","elementVector","angleCos","acos","PI","getElementInDirection","activeElement","activeElemVector","elem","dist","angle","_b","angleA","distA","navigationalgorithm_1","gethtmlelementsfromcomponents_1","nodeeventsubscriber_1","removeElementHoverEventListeners","eventSubscriber","NodeEventSubscriber","getActiveElement","focusElement","blurActiveElement","focusFirstElement","defaultNavigationHandler","targetElement","defaultActionHandler","click","handleInput","defaultHandler","userHandler","handleDefault","onNavigation","activeElementBeforeDisable","onAction","isSettingsPanel","trackElementHover","removeEventListenerFunctions","htmlElem","exitListener","enterListener","fn","attachedListeners","Map","getEventListenersOfType","has","set","node","options","listenersOfType","listenerIndex","otherNode","otherListener","otherOptions","SeekBarHandler","rootNavigationGroup","cursorPosition","isScrubbing","scrubSpeedPercentage","isSeekBarWrapper","stopSeeking","getSeekBar","initializeOrUpdateCursorPosition","dispatchMouseMoveEvent","dispatchMouseClickEvent","from","seekBarWrapper","updateScrubSpeedPercentage","scrubSpeedResetTimeout","getIncrement","increment","resetCursorPosition","updateCursorPosition","initializeCursorPosition","playbackPositionMarker","querySelector","rect","startX","startY","getCursorPositionMouseEventInit","clientX","clientY","dispatchEvent","mouseDownHandler","mouseEventInit","dispatchMouseLeaveEvent","seekbarhandler_1","keymap_1","navigationGroups","group","activeNavigationGroups","updateEnabledNavigationGroup","groupIndex","other","handleKeyEvent","active","getActiveNavigationGroup","isDirection","isAction","seekBarHandler","unsubscribeVisibilityChangesFns","subscribeToNavigationGroupVisibilityChanges","attachKeyEventHandler","enableDefaultNavigationGroup","onShowHandler","onHideHandler","unsubscribeFromNavigationGroupVisibilityChanges","unsub","groupToEnable","idx","obj","values","hasLocalStorageCache","setItem","hasLocalStorage","localStorage","getItem","storage","DOMException","JSON","stringify","json","parse","totalSeconds","format","isNegative","hours","minutes","leftPadWithZeros","num","substr","adMessage","adMessagePlaceholderRegex","formatString","leadingZeroes","numDecimalPlaces","leadingZeroesMatches","decimalPlacesMatches","timeString","toFixed","currentSubtitle","SUBTITLES_OFF_KEY","subtitles","list","subtitle","SubtitleAdded","addSubtitle","selectCurrentSubtitle","SubtitleRemoved","removeSubtitle","clearSubtitles","refreshSubtitles","offListItem","delay","callback","repeat","timeoutOrIntervalId","clearInternal","setInterval","clearInterval","playbackjumpoverlay_1","modernUI","mainSettingsPanelPage","subtitleSettingsPanelPage","subtitleSelectBox","subtitleSettingsOpenButton","modernCastReceiverUI","modernTvUI","subtitleListPanel","audioTrackListPanel","playbackToggleOverlay","subtitleToggleButton","audioToggleButton","uiContainer","spatialNavigation","buildDefaultUI","buildModernUI","buildDefaultSmallScreenUI","buildModernSmallScreenUI","buildDefaultCastReceiverUI","buildModernCastReceiverUI","buildDefaultTvUI","buildModernTvUI","volumecontroller_1","focusvisibilitytracker_1","playerUiOrUiVariants","updateConfig","onUiVariantResolve","onActiveUiChanged","uiVariants","managerPlayerWrapper","PlayerWrapper","autoUiVariantResolve","VolumeController","getPlayer","playerSourceConfig","playerSourceUiConfig","updateSource","wrappedPlayer","uiVariantsWithoutCondition","PlaylistTransition","uiContainerElement","uiInstanceManagers","uiVariant","InternalUIInstanceManager","resolveUiVariant","adStartedEvent","isLinear","requestsUi","currentUi","getWrappedPlayer","fireEventInUI","focusVisibilityTracker","localize","setLocalizationConfig","localizationConfig","getUiVariants","switchToUiVariant","uiVariantIndex","previousUi","nextUi","getUI","isConfigured","addUi","defaultContext","isFullscreen","clientWidth","switchingContext","nextUiVariant","matchesCondition","dom","configureControls","releaseUi","releaseControls","clearEventHandlers","uiInstanceManager","getTimelineMarkers","addTimelineMarker","timelineMarker","removeTimelineMarker","playerWrapper","configureControlsTree","configured","configuredComponents","configuredComponents_1","constructor","releaseControlsTree","released","isReleased","childComponent","wrapper","eventHandlers","eventType","objectProtoPropertyNames","getOwnPropertyNames","getPrototypeOf","namesToIgnore","methods","properties","members_1","names","newNames","member","methods_1","method","properties_1","propertyDescriptor","propertyDescriptor_1","getOwnPropertyDescriptor","playerEventData","timestamp","uiSourced","visit","recursiveTreeWalker","setVolume","issuerName","setMuted","mute","unmute","isMuted","recallVolume","storeVolume","storedVolume","VolumeTransition","playerMuted","playerVolume","uiMuted","uiVolume","VolumeChanged","Muted","Unmuted","controller","setCueBoxPositionForVerticalWriting","cueContainerDom","subtitleOverlaySize","writingMode","Right","Top","setVttLine","setVttPositionAlign","positionAlign","DirectionPair","VttVerticalWriting","defaultLineNumber","Bottom","Left","setVttLineAlign","relativeCueBoxPosition","lineAlign","setCssForCenterLineAlign","subtitleOverLaySize","targetLine","relativeLinePosition","overlayReferenceEdge","line","snapToLines","cueContainer","GrowingRight","GrowingLeft","textAlign","align","containerSize","regionContainerDom","regionPositionX","viewportAnchorX","regionAnchorX","regionPositionY","viewportAnchorY","lines","regionAnchorY"],"mappings":"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","file":"bitmovinplayer-ui.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { Button, ButtonConfig } from '../../../ts/components/button';\nimport { UIInstanceManager } from '../../../ts/uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../../ts/localization/i18n';\n\nexport interface PlaybackJumpButtonsConfig extends ButtonConfig {\n  skipTime: number; // in seconds\n}\n\nexport class PlaybackJumpButtons extends Button<PlaybackJumpButtonsConfig> {\n\n  constructor(config: PlaybackJumpButtonsConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbackjumpbuttons',\n      text: config.text,\n      ariaLabel: config.ariaLabel,\n      skipTime: 0,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      const currentTime = player.getCurrentTime();\n      const duration = player.getDuration();\n\n      if (!player.isLive()) {\n        let newTime = currentTime + this.config.skipTime;\n        newTime = Math.max(0, Math.min(newTime, duration));\n        player.seek(newTime, 'ui');\n      }\n    });\n  }\n}\n\nexport class PlaybackForwardButton extends PlaybackJumpButtons {\n  constructor(config: PlaybackJumpButtonsConfig) {\n    super({\n      ...config,\n      cssClass: 'ui-playbackforwardbutton',\n      text: i18n.getLocalizer('forward'),\n      ariaLabel: i18n.getLocalizer('forward'),\n    });\n  }\n}\n\nexport class PlaybackRewindButton extends PlaybackJumpButtons {\n  constructor(config: PlaybackJumpButtonsConfig) {\n    super({\n      ...config,\n      cssClass: 'ui-playbackrewindbutton',\n      text: i18n.getLocalizer('rewind'),\n      ariaLabel: i18n.getLocalizer('rewind'),\n    });\n  }\n}\n","import {Container, ContainerConfig} from '../../../ts/components/container';\nimport {PlaybackForwardButton, PlaybackRewindButton} from './playbackjumpbutton';\n\nexport interface PlaybackJumpControlsOverlayConfig extends ContainerConfig {}\n\n/**\n * Overlay containing the playback forward and rewind buttons.\n */\nexport class PlaybackJumpControlsOverlay extends Container<PlaybackJumpControlsOverlayConfig> {\n\n  private forwardButton: PlaybackForwardButton;\n  private rewindButton: PlaybackRewindButton;\n\n  constructor(config: PlaybackJumpControlsOverlayConfig = {}) {\n    super(config);\n\n    this.forwardButton = new PlaybackForwardButton({ skipTime: 10 });\n    this.rewindButton = new PlaybackRewindButton({ skipTime: -10 });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbackforward-overlay',\n      components: [this.forwardButton, this.rewindButton],\n    }, this.config);\n  }\n}\n","export namespace ArrayUtils {\n  /**\n   * Removes an item from an array.\n   * @param array the array that may contain the item to remove\n   * @param item the item to remove from the array\n   * @returns {any} the removed item or null if it wasn't part of the array\n   */\n  export function remove<T>(array: T[], item: T): T | null {\n    let index = array.indexOf(item);\n\n    if (index > -1) {\n      return array.splice(index, 1)[0];\n    } else {\n      return null;\n    }\n  }\n}\n","import { ListItem, ListSelector, ListSelectorConfig } from './components/listselector';\nimport { UIInstanceManager } from './uimanager';\nimport { AudioTrackEvent, PlayerAPI, AudioTrack } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\n/**\n * Helper class to handle all audio tracks related events\n *\n * This class listens to player events as well as the `ListSelector` event if selection changed\n */\nexport class AudioTrackSwitchHandler {\n\n  private player: PlayerAPI;\n  private listElement: ListSelector<ListSelectorConfig>;\n  private uimanager: UIInstanceManager;\n\n  constructor(player: PlayerAPI, element: ListSelector<ListSelectorConfig>, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.listElement = element;\n    this.uimanager = uimanager;\n\n    this.bindSelectionEvent();\n    this.bindPlayerEvents();\n    this.refreshAudioTracks();\n  }\n\n  private bindSelectionEvent(): void {\n    this.listElement.onItemSelected.subscribe((_, value: string) => {\n      this.player.setAudio(value);\n    });\n  }\n\n  private bindPlayerEvents(): void {\n    // Update selection when selected track has changed\n    this.player.on(this.player.exports.PlayerEvent.AudioChanged, this.selectCurrentAudioTrack);\n    // Update tracks when source goes away\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.refreshAudioTracks);\n    // Update tracks when the period within a source changes\n    this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshAudioTracks);\n    // Update tracks when a track is added or removed\n    this.player.on(this.player.exports.PlayerEvent.AudioAdded, this.addAudioTrack);\n    this.player.on(this.player.exports.PlayerEvent.AudioRemoved, this.removeAudioTrack);\n    this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshAudioTracks);\n  }\n\n  private addAudioTrack = (event: AudioTrackEvent) => {\n    const audioTrack = event.track;\n    if (!this.listElement.hasItem(audioTrack.id)) {\n      this.listElement.addItem(audioTrack.id, i18n.getLocalizer(audioTrack.label), true);\n    }\n  };\n\n  private removeAudioTrack = (event: AudioTrackEvent) => {\n    const audioTrack = event.track;\n    if (this.listElement.hasItem(audioTrack.id)) {\n      this.listElement.removeItem(audioTrack.id);\n    }\n  };\n\n  private selectCurrentAudioTrack = () => {\n    let currentAudioTrack = this.player.getAudio();\n\n    // HLS streams don't always provide this, so we have to check\n    if (currentAudioTrack) {\n      this.listElement.selectItem(currentAudioTrack.id);\n    }\n  };\n\n  private refreshAudioTracks = () => {\n    const audioTracks = this.player.getAvailableAudio();\n    const audioTrackToListItem = (audioTrack: AudioTrack): ListItem => {\n      return { key: audioTrack.id, label: audioTrack.label };\n    };\n\n    this.listElement.synchronizeItems(audioTracks.map(audioTrackToListItem));\n    this.selectCurrentAudioTrack();\n  };\n}\n","declare global {\n  interface Navigator {\n    msMaxTouchPoints?: number;\n  }\n}\n\nexport class BrowserUtils {\n  // isMobile only needs to be evaluated once (it cannot change during a browser session)\n  // Mobile detection according to Mozilla recommendation: \"In summary, we recommend looking for the string “Mobi”\n  // anywhere in the User Agent to detect a mobile device.\"\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n  static get isMobile(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Mobi/.test(navigator.userAgent);\n  }\n\n  static get isChrome(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Chrome/.test(navigator.userAgent);\n  }\n\n  static get isAndroid(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Android/.test(navigator.userAgent) && !this.isHisense;\n  }\n\n  static get isIOS(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /iPad|iPhone|iPod/.test(navigator.userAgent);\n  }\n\n  static get isMacIntel(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && navigator.platform === 'MacIntel';\n  }\n\n  static get isHisense(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Hisense/.test(navigator.userAgent);\n  }\n\n  static get isPlayStation(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /PlayStation/i.test(navigator.userAgent);\n  }\n\n  static get isWebOs(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return (\n      navigator &&\n      navigator.userAgent &&\n      (navigator.userAgent.includes('Web0S') || navigator.userAgent.includes('NetCast'))\n    );\n  }\n\n  static get isTizen(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Tizen/.test(navigator.userAgent);\n  }\n\n  // https://hacks.mozilla.org/2013/04/detecting-touch-its-the-why-not-the-how/\n  static get isTouchSupported() {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return 'ontouchstart' in window || navigator && navigator.userAgent && (navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0);\n  }\n\n  private static windowExists(): boolean {\n    return typeof window !== 'undefined';\n  }\n}\n","import { ClickOverlay } from './clickoverlay';\nimport { UIInstanceManager } from '../uimanager';\nimport { Ad, AdEvent, PlayerAPI } from 'bitmovin-player';\n\n/**\n * A simple click capture overlay for clickThroughUrls of ads.\n */\nexport class AdClickOverlay extends ClickOverlay {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let clickThroughCallback: () => void = null;\n\n    player.on(player.exports.PlayerEvent.AdStarted, (event: AdEvent) => {\n      let ad = event.ad;\n      this.setUrl(ad.clickThroughUrl);\n      clickThroughCallback = ad.clickThroughUrlOpened;\n    });\n\n    // Clear click-through URL when ad has finished\n    let adFinishedHandler = () => {\n      this.setUrl(null);\n    };\n\n    player.on(player.exports.PlayerEvent.AdFinished, adFinishedHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adFinishedHandler);\n    player.on(player.exports.PlayerEvent.AdError, adFinishedHandler);\n\n    this.onClick.subscribe(() => {\n      // Pause the ad when overlay is clicked\n      player.pause('ui-ad-click-overlay');\n\n      if (clickThroughCallback) {\n        clickThroughCallback();\n      }\n    });\n  }\n}\n","import {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport { AdEvent, LinearAd, PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A label that displays a message about a running ad, optionally with a countdown.\n */\nexport class AdMessageLabel extends Label<LabelConfig> {\n\n  constructor(config: LabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-label-ad-message',\n      text: i18n.getLocalizer('ads.remainingTime') ,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let text = config.text;\n\n    let updateMessageHandler = () => {\n      this.setText(StringUtils.replaceAdMessagePlaceholders(i18n.performLocalization(text), null, player));\n    };\n\n    let adStartHandler = (event: AdEvent) => {\n      let uiConfig = (event.ad as LinearAd).uiConfig;\n      text = uiConfig && uiConfig.message || config.text;\n\n      updateMessageHandler();\n\n      player.on(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);\n    };\n\n    let adEndHandler = () => {\n      player.off(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);\n    };\n\n    player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdError, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);\n  }\n}","import { ButtonConfig, Button } from './button';\nimport { UIInstanceManager } from '../uimanager';\nimport { StringUtils } from '../stringutils';\nimport { AdEvent, LinearAd, PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for the {@link AdSkipButton}.\n */\nexport interface AdSkipButtonConfig extends ButtonConfig {\n  /**\n   * Message which gets displayed during the countdown is active.\n   * Supported placeholders: look at {@link StringUtils.replaceAdMessagePlaceholders}\n   */\n  untilSkippableMessage?: string;\n  /**\n   * Message displayed when the ad is skippable.\n   * Supported placeholders: look at {@link StringUtils.replaceAdMessagePlaceholders}\n   */\n  skippableMessage?: string;\n}\n\n/**\n * A button that is displayed during ads and can be used to skip the ad.\n */\nexport class AdSkipButton extends Button<AdSkipButtonConfig> {\n\n  constructor(config: AdSkipButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <AdSkipButtonConfig>{\n      cssClass: 'ui-button-ad-skip',\n      untilSkippableMessage: 'Skip ad in {remainingTime}',\n      skippableMessage: 'Skip ad',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let untilSkippableMessage = config.untilSkippableMessage;\n    let skippableMessage = config.skippableMessage;\n    let skipOffset = -1;\n\n    let updateSkipMessageHandler = () => {\n      this.show();\n\n      // Update the skip message on the button\n      if (player.getCurrentTime() < skipOffset) {\n        this.setText(StringUtils.replaceAdMessagePlaceholders(untilSkippableMessage, skipOffset, player));\n        this.disable();\n      } else {\n        this.setText(skippableMessage);\n        this.enable();\n      }\n    };\n\n    let adStartHandler = (event: AdEvent) => {\n      let ad = event.ad as LinearAd;\n      skipOffset = ad.skippableAfter;\n      untilSkippableMessage = ad.uiConfig && ad.uiConfig.untilSkippableMessage || config.untilSkippableMessage;\n      skippableMessage = ad.uiConfig && ad.uiConfig.skippableMessage || config.skippableMessage;\n\n      // Display this button only if ad is skippable.\n      // Non-skippable ads will return -1 for skippableAfter for player version < v8.3.0.\n      if (typeof skipOffset === 'number' && skipOffset >= 0) {\n        updateSkipMessageHandler();\n        player.on(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);\n      } else {\n        this.hide();\n      }\n    };\n\n    let adEndHandler = () => {\n      player.off(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);\n    };\n\n    player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdError, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);\n\n    this.onClick.subscribe(() => {\n      // Try to skip the ad (this only works if it is skippable so we don't need to take extra care of that here)\n      player.ads.skip();\n    });\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles Apple AirPlay.\n */\nexport class AirPlayToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-airplaytogglebutton',\n      text: i18n.getLocalizer('appleAirplay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    if (!player.isAirplayAvailable) {\n      // If the player does not support Airplay (player 7.0), we just hide this component and skip configuration\n      this.hide();\n      return;\n    }\n\n    this.onClick.subscribe(() => {\n      if (player.isAirplayAvailable()) {\n        player.showAirplayTargetPicker();\n      } else {\n        if (console) {\n          console.log('AirPlay unavailable');\n        }\n      }\n    });\n\n    const airPlayAvailableHandler = () => {\n      if (player.isAirplayAvailable()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    const airPlayChangedHandler = () => {\n      if (player.isAirplayActive()) {\n        this.on();\n      } else {\n        this.off();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.AirplayAvailable, airPlayAvailableHandler);\n    player.on(player.exports.PlayerEvent.AirplayChanged, airPlayChangedHandler);\n\n    // Startup init\n    airPlayAvailableHandler(); // Hide button if AirPlay is not available\n    airPlayChangedHandler();\n  }\n}","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between 'auto' and the available audio qualities.\n */\nexport class AudioQualitySelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-audioqualityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let selectCurrentAudioQuality = () => {\n      this.selectItem(player.getAudioQuality().id);\n    };\n\n    let updateAudioQualities = () => {\n      let audioQualities = player.getAvailableAudioQualities();\n\n      this.clearItems();\n\n      // Add entry for automatic quality switching (default setting)\n      this.addItem('auto', i18n.getLocalizer('auto'));\n\n      // Add audio qualities\n      for (let audioQuality of audioQualities) {\n        this.addItem(audioQuality.id, audioQuality.label);\n      }\n\n      // Select initial quality\n      selectCurrentAudioQuality();\n    };\n\n    this.onItemSelected.subscribe((sender: AudioQualitySelectBox, value: string) => {\n      player.setAudioQuality(value);\n    });\n\n    // Update qualities when audio track has changed\n    player.on(player.exports.PlayerEvent.AudioChanged, updateAudioQualities);\n    // Update qualities when source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, updateAudioQualities);\n    // Update qualities when the period within a source changes\n    player.on(player.exports.PlayerEvent.PeriodSwitched, updateAudioQualities);\n    // Update quality selection when quality is changed (from outside)\n    player.on(player.exports.PlayerEvent.AudioQualityChanged, selectCurrentAudioQuality);\n    if ((player.exports.PlayerEvent as any).AudioQualityAdded) {\n      // Update qualities when their availability changed\n      // TODO: remove any cast after next player release\n      player.on((player.exports.PlayerEvent as any).AudioQualityAdded, updateAudioQualities);\n      player.on((player.exports.PlayerEvent as any).AudioQualityRemoved, updateAudioQualities);\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(updateAudioQualities);\n  }\n}","import {ListBox} from './listbox';\nimport {UIInstanceManager} from '../uimanager';\nimport {AudioTrackSwitchHandler} from '../audiotrackutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A element that is similar to a select box where the user can select a subtitle\n */\nexport class AudioTrackListBox extends ListBox {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n    new AudioTrackSwitchHandler(player, this, uimanager);\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport {AudioTrackSwitchHandler} from '../audiotrackutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A select box providing a selection between available audio tracks (e.g. different languages).\n */\nexport class AudioTrackSelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-audiotrackselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new AudioTrackSwitchHandler(player, this, uimanager);\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {Component, ComponentConfig} from './component';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for the {@link BufferingOverlay} component.\n */\nexport interface BufferingOverlayConfig extends ContainerConfig {\n  /**\n   * Delay in milliseconds after which the buffering overlay will be displayed. Useful to bypass short stalls without\n   * displaying the overlay. Set to 0 to display the overlay instantly.\n   * Default: 1000ms (1 second)\n   */\n  showDelayMs?: number;\n}\n\n/**\n * Overlays the player and displays a buffering indicator.\n */\nexport class BufferingOverlay extends Container<BufferingOverlayConfig> {\n\n  private indicators: Component<ComponentConfig>[];\n\n  constructor(config: BufferingOverlayConfig = {}) {\n    super(config);\n\n    this.indicators = [\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),\n    ];\n\n    this.config = this.mergeConfig(config, <BufferingOverlayConfig>{\n      cssClass: 'ui-buffering-overlay',\n      hidden: true,\n      components: this.indicators,\n      showDelayMs: 1000,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    let overlayShowTimeout = new Timeout(config.showDelayMs, () => {\n      this.show();\n    });\n\n    let showOverlay = () => {\n      overlayShowTimeout.start();\n    };\n\n    let hideOverlay = () => {\n      overlayShowTimeout.clear();\n      this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.StallStarted, showOverlay);\n    player.on(player.exports.PlayerEvent.StallEnded, hideOverlay);\n    player.on(player.exports.PlayerEvent.Play, showOverlay);\n    player.on(player.exports.PlayerEvent.Playing, hideOverlay);\n    player.on(player.exports.PlayerEvent.Paused, hideOverlay);\n    player.on(player.exports.PlayerEvent.Seek, showOverlay);\n    player.on(player.exports.PlayerEvent.Seeked, hideOverlay);\n    player.on(player.exports.PlayerEvent.TimeShift, showOverlay);\n    player.on(player.exports.PlayerEvent.TimeShifted, hideOverlay);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, hideOverlay);\n\n    // Show overlay if player is already stalled at init\n    if (player.isStalled()) {\n      this.show();\n    }\n  }\n}\n","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {EventDispatcher, NoArgs, Event} from '../eventdispatcher';\nimport { LocalizableText , i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Button} component.\n */\nexport interface ButtonConfig extends ComponentConfig {\n  /**\n   * The text as string or localize callback on the button.\n   */\n  text?: LocalizableText;\n}\n\n/**\n * A simple clickable button.\n */\nexport class Button<Config extends ButtonConfig> extends Component<Config> {\n\n  private buttonEvents = {\n    onClick: new EventDispatcher<Button<Config>, NoArgs>(),\n  };\n\n  constructor(config: Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-button',\n      role: 'button',\n      tabIndex: 0,\n    } as Config, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    const buttonElementAttributes: { [name: string]: string } = {\n      'id': this.config.id,\n      'aria-label': i18n.performLocalization(this.config.ariaLabel || this.config.text),\n      'class': this.getCssClasses(),\n      'type' : 'button',\n      /**\n      * WCAG20 standard to display if a button is pressed or not\n      */\n      'aria-pressed': 'false',\n      'tabindex': this.config.tabIndex.toString(),\n    };\n\n    if (this.config.role != null) {\n      buttonElementAttributes['role'] = this.config.role;\n    }\n\n    // Create the button element with the text label\n    let buttonElement = new DOM('button', buttonElementAttributes).append(new DOM('span', {\n      'class': this.prefixCss('label'),\n    }).html(i18n.performLocalization(this.config.text)));\n\n    // Listen for the click event on the button element and trigger the corresponding event on the button component\n    buttonElement.on('click', () => {\n      this.onClickEvent();\n    });\n\n    return buttonElement;\n  }\n\n  /**\n   * Sets text on the label of the button.\n   * @param text the text to put into the label of the button\n   */\n  setText(text: LocalizableText): void {\n    this.getDomElement().find('.' + this.prefixCss('label')).html(i18n.performLocalization(text));\n  }\n\n  protected onClickEvent() {\n    this.buttonEvents.onClick.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the button is clicked.\n   * @returns {Event<Button<Config>, NoArgs>}\n   */\n  get onClick(): Event<Button<Config>, NoArgs> {\n    return this.buttonEvents.onClick.getEvent();\n  }\n}\n","import {ContainerConfig, Container} from './container';\nimport {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport { CastStartedEvent, CastWaitingForDeviceEvent, PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Overlays the player and displays the status of a Cast session.\n */\nexport class CastStatusOverlay extends Container<ContainerConfig> {\n\n  private statusLabel: Label<LabelConfig>;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.statusLabel = new Label<LabelConfig>({ cssClass: 'ui-cast-status-label' });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-cast-status-overlay',\n      components: [this.statusLabel],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    player.on(player.exports.PlayerEvent.CastWaitingForDevice,\n      (event: CastWaitingForDeviceEvent) => {\n        this.show();\n        // Get device name and update status text while connecting\n        let castDeviceName = event.castPayload.deviceName;\n        this.statusLabel.setText(i18n.getLocalizer('connectingTo', { castDeviceName }));\n      });\n    player.on(player.exports.PlayerEvent.CastStarted, (event: CastStartedEvent) => {\n      // Session is started or resumed\n      // For cases when a session is resumed, we do not receive the previous events and therefore show the status panel\n      // here too\n      this.show();\n      let castDeviceName = event.deviceName;\n      this.statusLabel.setText(i18n.getLocalizer('playingOn', { castDeviceName }));\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, (event) => {\n      // Cast session gone, hide the status panel\n      this.hide();\n    });\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles casting to a Cast receiver.\n */\nexport class CastToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-casttogglebutton',\n      text: i18n.getLocalizer('googleCast'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      if (player.isCastAvailable()) {\n        if (player.isCasting()) {\n          player.castStop();\n        } else {\n          player.castVideo();\n        }\n      } else {\n        if (console) {\n          console.log('Cast unavailable');\n        }\n      }\n    });\n\n    let castAvailableHander = () => {\n      if (player.isCastAvailable()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.CastAvailable, castAvailableHander);\n\n    // Toggle button 'on' state\n    player.on(player.exports.PlayerEvent.CastWaitingForDevice, () => {\n      this.on();\n    });\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      // When a session is resumed, there is no CastStart event, so we also need to toggle here for such cases\n      this.on();\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, () => {\n      this.off();\n    });\n\n    // Startup init\n    castAvailableHander(); // Hide button if Cast not available\n    if (player.isCasting()) {\n      this.on();\n    }\n  }\n}","import {UIContainer, UIContainerConfig} from './uicontainer';\nimport {UIInstanceManager} from '../uimanager';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * The base container for Cast receivers that contains all of the UI and takes care that the UI is shown on\n * certain playback events.\n */\nexport class CastUIContainer extends UIContainer {\n\n  private castUiHideTimeout: Timeout;\n\n  constructor(config: UIContainerConfig) {\n    super(config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    /*\n     * Show UI on Cast devices at certain playback events\n     *\n     * Since a Cast receiver does not have a direct HCI, we show the UI on certain playback events to give the user\n     * a chance to see on the screen what's going on, e.g. on play/pause or a seek the UI is shown and the user can\n     * see the current time and position on the seek bar.\n     * The UI is shown permanently while playback is paused, otherwise hides automatically after the configured\n     * hide delay time.\n     */\n\n    let isUiShown = false;\n\n    let hideUi = () => {\n      uimanager.onControlsHide.dispatch(this);\n      isUiShown = false;\n    };\n\n    this.castUiHideTimeout = new Timeout(config.hideDelay, hideUi);\n\n    let showUi = () => {\n      if (!isUiShown) {\n        uimanager.onControlsShow.dispatch(this);\n        isUiShown = true;\n      }\n    };\n\n    let showUiPermanently = () => {\n      showUi();\n      this.castUiHideTimeout.clear();\n    };\n\n    let showUiWithTimeout = () => {\n      showUi();\n      this.castUiHideTimeout.start();\n    };\n\n    let showUiAfterSeek = () => {\n      if (player.isPlaying()) {\n        showUiWithTimeout();\n      } else {\n        showUiPermanently();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.Play, showUiWithTimeout);\n    player.on(player.exports.PlayerEvent.Paused, showUiPermanently);\n    player.on(player.exports.PlayerEvent.Seek, showUiPermanently);\n    player.on(player.exports.PlayerEvent.Seeked, showUiAfterSeek);\n\n    uimanager.getConfig().events.onUpdated.subscribe(showUiWithTimeout);\n  }\n\n  release(): void {\n    super.release();\n    this.castUiHideTimeout.clear();\n  }\n}","import {Button, ButtonConfig} from './button';\n\n/**\n * Configuration interface for a {@link ClickOverlay}.\n */\nexport interface ClickOverlayConfig extends ButtonConfig {\n  /**\n   * The url to open when the overlay is clicked. Set to null to disable the click handler.\n   */\n  url?: string;\n}\n\n/**\n * A click overlay that opens an url in a new tab if clicked.\n */\nexport class ClickOverlay extends Button<ClickOverlayConfig> {\n\n  constructor(config: ClickOverlayConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-clickoverlay',\n      role: this.config.role,\n    }, <ClickOverlayConfig>this.config);\n  }\n\n  initialize(): void {\n    super.initialize();\n\n    this.setUrl((<ClickOverlayConfig>this.config).url);\n    let element = this.getDomElement();\n    element.on('click', () => {\n      if (element.data('url')) {\n        window.open(element.data('url'), '_blank');\n      }\n    });\n  }\n\n  /**\n   * Gets the URL that should be followed when the watermark is clicked.\n   * @returns {string} the watermark URL\n   */\n  getUrl(): string {\n    return this.getDomElement().data('url');\n  }\n\n  setUrl(url: string): void {\n    if (url === undefined || url == null) {\n      url = '';\n    }\n    this.getDomElement().data('url', url);\n  }\n}","import {ButtonConfig, Button} from './button';\nimport {UIInstanceManager} from '../uimanager';\nimport {Component, ComponentConfig} from './component';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link CloseButton}.\n */\nexport interface CloseButtonConfig extends ButtonConfig {\n  /**\n   * The component that should be closed when the button is clicked.\n   */\n  target: Component<ComponentConfig>;\n}\n\n/**\n * A button that closes (hides) a configured component.\n */\nexport class CloseButton extends Button<CloseButtonConfig> {\n\n  constructor(config: CloseButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-closebutton',\n      text: i18n.getLocalizer('close'),\n    } as CloseButtonConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    this.onClick.subscribe(() => {\n      config.target.hide();\n    });\n  }\n}","import {Guid} from '../guid';\nimport {DOM} from '../dom';\nimport {EventDispatcher, NoArgs, Event} from '../eventdispatcher';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n, LocalizableText } from '../localization/i18n';\n\n/**\n * Base configuration interface for a component.\n * Should be extended by components that want to add additional configuration options.\n */\nexport interface ComponentConfig {\n  /**\n   * The HTML tag name of the component.\n   * Default: 'div'\n   */\n  tag?: string;\n  /**\n   * The HTML ID of the component.\n   * Default: automatically generated with pattern 'ui-id-{guid}'.\n   */\n  id?: string;\n\n  /**\n   * A prefix to prepend all CSS classes with.\n   */\n  cssPrefix?: string;\n\n  /**\n   * The CSS classes of the component. This is usually the class from where the component takes its styling.\n   */\n  cssClass?: string; // 'class' is a reserved keyword, so we need to make the name more complicated\n\n  /**\n   * Additional CSS classes of the component.\n   */\n  cssClasses?: string[];\n\n  /**\n   * Specifies if the component should be hidden at startup.\n   * Default: false\n   */\n  hidden?: boolean;\n\n  /**\n   * Specifies if the component is enabled (interactive) or not.\n   * Default: false\n   */\n  disabled?: boolean;\n\n  /**\n   * Specifies the component role for WCAG20 standard\n   */\n  role?: string;\n\n  /**\n   * WCAG20 requirement for screen reader navigation\n   */\n  tabIndex?: number;\n\n  /**\n   * WCAG20 standard for defining info about the component (usually the name)\n   */\n  ariaLabel?: LocalizableText;\n}\n\nexport interface ComponentHoverChangedEventArgs extends NoArgs {\n  /**\n   * True is the component is hovered, else false.\n   */\n  hovered: boolean;\n}\n\n/**\n * The base class of the UI framework.\n * Each component must extend this class and optionally the config interface.\n */\nexport class Component<Config extends ComponentConfig> {\n\n  /**\n   * The classname that is attached to the element when it is in the hidden state.\n   * @type {string}\n   */\n  private static readonly CLASS_HIDDEN = 'hidden';\n\n  /**\n   * The classname that is attached to the element when it is in the disabled state.\n   * @type {string}\n   */\n  private static readonly CLASS_DISABLED = 'disabled';\n\n  /**\n   * Configuration object of this component.\n   */\n  protected config: Config;\n\n  /**\n   * The component's DOM element.\n   */\n  private element: DOM;\n\n  /**\n   * Flag that keeps track of the hidden state.\n   */\n  private hidden: boolean;\n\n  /**\n   * Flat that keeps track of the disabled state.\n   */\n  private disabled: boolean;\n\n  /**\n   * Flag that keeps track of the hover state.\n   */\n  private hovered: boolean;\n\n  /**\n   * The list of events that this component offers. These events should always be private and only directly\n   * accessed from within the implementing component.\n   *\n   * Because TypeScript does not support private properties with the same name on different class hierarchy levels\n   * (i.e. superclass and subclass cannot contain a private property with the same name), the default naming\n   * convention for the event list of a component that should be followed by subclasses is the concatenation of the\n   * camel-cased class name + 'Events' (e.g. SubClass extends Component => subClassEvents).\n   * See {@link #componentEvents} for an example.\n   *\n   * Event properties should be named in camel case with an 'on' prefix and in the present tense. Async events may\n   * have a start event (when the operation starts) in the present tense, and must have an end event (when the\n   * operation ends) in the past tense (or present tense in special cases (e.g. onStart/onStarted or onPlay/onPlaying).\n   * See {@link #componentEvents#onShow} for an example.\n   *\n   * Each event should be accompanied with a protected method named by the convention eventName + 'Event'\n   * (e.g. onStartEvent), that actually triggers the event by calling {@link EventDispatcher#dispatch dispatch} and\n   * passing a reference to the component as first parameter. Components should always trigger their events with these\n   * methods. Implementing this pattern gives subclasses means to directly listen to the events by overriding the\n   * method (and saving the overhead of passing a handler to the event dispatcher) and more importantly to trigger\n   * these events without having access to the private event list.\n   * See {@link #onShow} for an example.\n   *\n   * To provide external code the possibility to listen to this component's events (subscribe, unsubscribe, etc.),\n   * each event should also be accompanied by a public getter function with the same name as the event's property,\n   * that returns the {@link Event} obtained from the event dispatcher by calling {@link EventDispatcher#getEvent}.\n   * See {@link #onShow} for an example.\n   *\n   * Full example for an event representing an example action in a example component:\n   *\n   * <code>\n   * // Define an example component class with an example event\n   * class ExampleComponent extends Component<ComponentConfig> {\n     *\n     *     private exampleComponentEvents = {\n     *         onExampleAction: new EventDispatcher<ExampleComponent, NoArgs>()\n     *     }\n     *\n     *     // constructor and other stuff...\n     *\n     *     protected onExampleActionEvent() {\n     *        this.exampleComponentEvents.onExampleAction.dispatch(this);\n     *    }\n     *\n     *    get onExampleAction(): Event<ExampleComponent, NoArgs> {\n     *        return this.exampleComponentEvents.onExampleAction.getEvent();\n     *    }\n     * }\n   *\n   * // Create an instance of the component somewhere\n   * var exampleComponentInstance = new ExampleComponent();\n   *\n   * // Subscribe to the example event on the component\n   * exampleComponentInstance.onExampleAction.subscribe(function (sender: ExampleComponent) {\n     *     console.log('onExampleAction of ' + sender + ' has fired!');\n     * });\n   * </code>\n   */\n  private componentEvents = {\n    onShow: new EventDispatcher<Component<Config>, NoArgs>(),\n    onHide: new EventDispatcher<Component<Config>, NoArgs>(),\n    onHoverChanged: new EventDispatcher<Component<Config>, ComponentHoverChangedEventArgs>(),\n    onEnabled: new EventDispatcher<Component<Config>, NoArgs>(),\n    onDisabled: new EventDispatcher<Component<Config>, NoArgs>(),\n  };\n\n  /**\n   * Constructs a component with an optionally supplied config. All subclasses must call the constructor of their\n   * superclass and then merge their configuration into the component's configuration.\n   * @param config the configuration for the component\n   */\n  constructor(config: ComponentConfig = {}) {\n    // Create the configuration for this component\n    this.config = <Config>this.mergeConfig(config, {\n      tag: 'div',\n      id: '{{PREFIX}}-id-' + Guid.next(),\n      cssPrefix: '{{PREFIX}}',\n      cssClass: 'ui-component',\n      cssClasses: [],\n      hidden: false,\n      disabled: false,\n    }, {});\n  }\n\n  /**\n   * Initializes the component, e.g. by applying config settings.\n   * This method must not be called from outside the UI framework.\n   *\n   * This method is automatically called by the {@link UIInstanceManager}. If the component is an inner component of\n   * some component, and thus encapsulated abd managed internally and never directly exposed to the UIManager,\n   * this method must be called from the managing component's {@link #initialize} method.\n   */\n  initialize(): void {\n    this.hidden = this.config.hidden;\n    this.disabled = this.config.disabled;\n\n    // Hide the component at initialization if it is configured to be hidden\n    if (this.isHidden()) {\n      this.hidden = false; // Set flag to false for the following hide() call to work (hide() checks the flag)\n      this.hide();\n    }\n\n    // Disable the component at initialization if it is configured to be disabled\n    if (this.isDisabled()) {\n      this.disabled = false; // Set flag to false for the following disable() call to work (disable() checks the flag)\n      this.disable();\n    }\n  }\n\n  /**\n   * Configures the component for the supplied Player and UIInstanceManager. This is the place where all the magic\n   * happens, where components typically subscribe and react to events (on their DOM element, the Player, or the\n   * UIInstanceManager), and basically everything that makes them interactive.\n   * This method is called only once, when the UIManager initializes the UI.\n   *\n   * Subclasses usually overwrite this method to add their own functionality.\n   *\n   * @param player the player which this component controls\n   * @param uimanager the UIInstanceManager that manages this component\n   */\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    this.onShow.subscribe(() => {\n      uimanager.onComponentShow.dispatch(this);\n    });\n    this.onHide.subscribe(() => {\n      uimanager.onComponentHide.dispatch(this);\n    });\n\n    // Track the hovered state of the element\n    this.getDomElement().on('mouseenter', () => {\n      this.onHoverChangedEvent(true);\n    });\n    this.getDomElement().on('mouseleave', () => {\n      this.onHoverChangedEvent(false);\n    });\n  }\n\n  /**\n   * Releases all resources and dependencies that the component holds. Player, DOM, and UIManager events are\n   * automatically removed during release and do not explicitly need to be removed here.\n   * This method is called by the UIManager when it releases the UI.\n   *\n   * Subclasses that need to release resources should override this method and call super.release().\n   */\n  release(): void {\n    // Nothing to do here, override where necessary\n  }\n\n  /**\n   * Generate the DOM element for this component.\n   *\n   * Subclasses usually overwrite this method to extend or replace the DOM element with their own design.\n   */\n  protected toDomElement(): DOM {\n    let element = new DOM(this.config.tag, {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'role': this.config.role,\n    });\n\n    return element;\n  }\n\n  /**\n   * Returns the DOM element of this component. Creates the DOM element if it does not yet exist.\n   *\n   * Should not be overwritten by subclasses.\n   *\n   * @returns {DOM}\n   */\n  getDomElement(): DOM {\n    if (!this.element) {\n      this.element = this.toDomElement();\n    }\n\n    return this.element;\n  }\n\n  /**\n   * Checks if this component has a DOM element.\n   */\n  hasDomElement(): boolean {\n    return Boolean(this.element);\n  }\n\n  setAriaLabel(label: LocalizableText): void {\n    this.setAriaAttr('label', i18n.performLocalization(label));\n  }\n\n  setAriaAttr(name: string, value: string) {\n    this.getDomElement().attr(`aria-${name}`, value);\n  }\n\n  /**\n   * Merges a configuration with a default configuration and a base configuration from the superclass.\n   *\n   * @param config the configuration settings for the components, as usually passed to the constructor\n   * @param defaults a default configuration for settings that are not passed with the configuration\n   * @param base configuration inherited from a superclass\n   * @returns {Config}\n   */\n  protected mergeConfig<Config>(config: Config, defaults: Config, base: Config): Config {\n    // Extend default config with supplied config\n    let merged = Object.assign({}, base, defaults, config);\n\n    // Return the extended config\n    return merged;\n  }\n\n  /**\n   * Helper method that returns a string of all CSS classes of the component.\n   *\n   * @returns {string}\n   */\n  protected getCssClasses(): string {\n    // Merge all CSS classes into single array\n    let flattenedArray = [this.config.cssClass].concat(this.config.cssClasses);\n    // Prefix classes\n    flattenedArray = flattenedArray.map((css) => {\n      return this.prefixCss(css);\n    });\n    // Join array values into a string\n    let flattenedString = flattenedArray.join(' ');\n    // Return trimmed string to prevent whitespace at the end from the join operation\n    return flattenedString.trim();\n  }\n\n  protected prefixCss(cssClassOrId: string): string {\n    return this.config.cssPrefix + '-' + cssClassOrId;\n  }\n\n  /**\n   * Returns the configuration object of the component.\n   * @returns {Config}\n   */\n  public getConfig(): Config {\n    return this.config;\n  }\n\n  /**\n   * Hides the component if shown.\n   * This method basically transfers the component into the hidden state. Actual hiding is done via CSS.\n   */\n  hide() {\n    if (!this.hidden) {\n      this.hidden = true;\n      this.getDomElement().addClass(this.prefixCss(Component.CLASS_HIDDEN));\n      this.onHideEvent();\n    }\n  }\n\n  /**\n   * Shows the component if hidden.\n   */\n  show() {\n    if (this.hidden) {\n      this.getDomElement().removeClass(this.prefixCss(Component.CLASS_HIDDEN));\n      this.hidden = false;\n      this.onShowEvent();\n    }\n  }\n\n  /**\n   * Determines if the component is hidden.\n   * @returns {boolean} true if the component is hidden, else false\n   */\n  isHidden(): boolean {\n    return this.hidden;\n  }\n\n  /**\n   * Determines if the component is shown.\n   * @returns {boolean} true if the component is visible, else false\n   */\n  isShown(): boolean {\n    return !this.isHidden();\n  }\n\n  /**\n   * Toggles the hidden state by hiding the component if it is shown, or showing it if hidden.\n   */\n  toggleHidden() {\n    if (this.isHidden()) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Disables the component.\n   * This method basically transfers the component into the disabled state. Actual disabling is done via CSS or child\n   * components. (e.g. Button needs to unsubscribe click listeners)\n   */\n  disable(): void {\n    if (!this.disabled) {\n      this.disabled = true;\n      this.getDomElement().addClass(this.prefixCss(Component.CLASS_DISABLED));\n      this.onDisabledEvent();\n    }\n  }\n\n  /**\n   * Enables the component.\n   * This method basically transfers the component into the enabled state. Actual enabling is done via CSS or child\n   * components. (e.g. Button needs to subscribe click listeners)\n   */\n  enable(): void {\n    if (this.disabled) {\n      this.getDomElement().removeClass(this.prefixCss(Component.CLASS_DISABLED));\n      this.disabled = false;\n      this.onEnabledEvent();\n    }\n  }\n\n  /**\n   * Determines if the component is disabled.\n   * @returns {boolean} true if the component is disabled, else false\n   */\n  isDisabled(): boolean {\n    return this.disabled;\n  }\n\n  /**\n   * Determines if the component is enabled.\n   * @returns {boolean} true if the component is enabled, else false\n   */\n  isEnabled(): boolean {\n    return !this.isDisabled();\n  }\n\n  /**\n   * Determines if the component is currently hovered.\n   * @returns {boolean} true if the component is hovered, else false\n   */\n  isHovered(): boolean {\n    return this.hovered;\n  }\n\n  /**\n   * Fires the onShow event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onShowEvent(): void {\n    this.componentEvents.onShow.dispatch(this);\n  }\n\n  /**\n   * Fires the onHide event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onHideEvent(): void {\n    this.componentEvents.onHide.dispatch(this);\n  }\n\n  /**\n   * Fires the onEnabled event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onEnabledEvent(): void {\n    this.componentEvents.onEnabled.dispatch(this);\n  }\n\n  /**\n   * Fires the onDisabled event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onDisabledEvent(): void {\n    this.componentEvents.onDisabled.dispatch(this);\n  }\n\n  /**\n   * Fires the onHoverChanged event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onHoverChangedEvent(hovered: boolean): void {\n    this.hovered = hovered;\n    this.componentEvents.onHoverChanged.dispatch(this, { hovered: hovered });\n  }\n\n  /**\n   * Gets the event that is fired when the component is showing.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onShow(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onShow.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is hiding.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onHide(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onHide.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is enabling.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onEnabled(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onEnabled.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is disabling.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onDisabled(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onDisabled.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component's hover-state is changing.\n   * @returns {Event<Component<Config>, ComponentHoverChangedEventArgs>}\n   */\n  get onHoverChanged(): Event<Component<Config>, ComponentHoverChangedEventArgs> {\n    return this.componentEvents.onHoverChanged.getEvent();\n  }\n}","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {ArrayUtils} from '../arrayutils';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Container}.\n */\nexport interface ContainerConfig extends ComponentConfig {\n  /**\n   * Child components of the container.\n   */\n  components?: Component<ComponentConfig>[];\n}\n\n/**\n * A container component that can contain a collection of child components.\n * Components can be added at construction time through the {@link ContainerConfig#components} setting, or later\n * through the {@link Container#addComponent} method. The UIManager automatically takes care of all components, i.e. it\n * initializes and configures them automatically.\n *\n * In the DOM, the container consists of an outer <div> (that can be configured by the config) and an inner wrapper\n * <div> that contains the components. This double-<div>-structure is often required to achieve many advanced effects\n * in CSS and/or JS, e.g. animations and certain formatting with absolute positioning.\n *\n * DOM example:\n * <code>\n *     <div class='ui-container'>\n *         <div class='container-wrapper'>\n *             ... child components ...\n *         </div>\n *     </div>\n * </code>\n */\nexport class Container<Config extends ContainerConfig> extends Component<Config> {\n\n  /**\n   * A reference to the inner element that contains the components of the container.\n   */\n  private innerContainerElement: DOM;\n  private componentsToAdd: Component<ComponentConfig>[];\n  private componentsToRemove: Component<ComponentConfig>[];\n\n  constructor(config: Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-container',\n      components: [],\n    } as Config, this.config);\n\n    this.componentsToAdd = [];\n    this.componentsToRemove = [];\n  }\n\n  /**\n   * Adds a child component to the container.\n   * @param component the component to add\n   */\n  addComponent(component: Component<ComponentConfig>) {\n    this.config.components.push(component);\n    this.componentsToAdd.push(component);\n  }\n\n  /**\n   * Removes a child component from the container.\n   * @param component the component to remove\n   * @returns {boolean} true if the component has been removed, false if it is not contained in this container\n   */\n  removeComponent(component: Component<ComponentConfig>): boolean {\n    if (ArrayUtils.remove(this.config.components, component) != null) {\n      this.componentsToRemove.push(component);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Gets an array of all child components in this container.\n   * @returns {Component<ComponentConfig>[]}\n   */\n  getComponents(): Component<ComponentConfig>[] {\n    return this.config.components;\n  }\n\n  /**\n   * Removes all child components from the container.\n   */\n  removeComponents(): void {\n    for (let component of this.getComponents().slice()) {\n      this.removeComponent(component);\n    }\n  }\n\n  /**\n   * Updates the DOM of the container with the current components.\n   */\n  protected updateComponents(): void {\n    /* We cannot just clear the container to remove all elements and then re-add those that should stay, because\n     * IE looses the innerHTML of unattached elements, leading to empty elements within the container (e.g. missing\n     * subtitle text in SubtitleLabel).\n     * Instead, we keep a list of elements to add and remove, leaving remaining elements alone. By keeping them in\n     * the DOM, their content gets preserved in all browsers.\n     */\n    let component;\n\n    while (component = this.componentsToRemove.shift()) {\n      component.getDomElement().remove();\n    }\n\n    while (component = this.componentsToAdd.shift()) {\n      this.innerContainerElement.append(component.getDomElement());\n    }\n  }\n\n  protected toDomElement(): DOM {\n    // Create the container element (the outer <div>)\n    let containerElement = new DOM(this.config.tag, {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'role': this.config.role,\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\n    });\n\n    // Create the inner container element (the inner <div>) that will contain the components\n    let innerContainer = new DOM(this.config.tag, {\n      'class': this.prefixCss('container-wrapper'),\n    });\n    this.innerContainerElement = innerContainer;\n\n    for (let initialComponent of this.config.components) {\n      this.componentsToAdd.push(initialComponent);\n    }\n    this.updateComponents();\n\n    containerElement.append(innerContainer);\n\n    return containerElement;\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {UIUtils} from '../uiutils';\nimport {Spacer} from './spacer';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\nimport { BrowserUtils } from '../browserutils';\nimport {Component, ComponentConfig} from './component';\nimport {SettingsPanel} from './settingspanel';\n\n/**\n * Configuration interface for the {@link ControlBar}.\n */\nexport interface ControlBarConfig extends ContainerConfig {\n  // nothing yet\n}\n\n/**\n * A container for main player control components, e.g. play toggle button, seek bar, volume control, fullscreen toggle\n * button.\n */\nexport class ControlBar extends Container<ControlBarConfig> {\n\n  constructor(config: ControlBarConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-controlbar',\n      hidden: true,\n      role: 'region',\n      ariaLabel: i18n.getLocalizer('controlBar'),\n    }, <ControlBarConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    // Counts how many components are hovered and block hiding of the control bar\n    let hoverStackCount = 0;\n    let isSettingsPanelShown = false;\n\n    // only enabling this for non-mobile platforms without touch input. enabling this\n    // for touch devices causes the UI to not disappear after hideDelay seconds.\n    // Instead, it will stay visible until another manual interaction is performed.\n    if (uimanager.getConfig().disableAutoHideWhenHovered && !BrowserUtils.isMobile) {\n      // Track hover status of child components\n      UIUtils.traverseTree(this, (component) => {\n        // Do not track hover status of child containers or spacers, only of 'real' controls\n        if (component instanceof Container || component instanceof Spacer) {\n          return;\n        }\n\n        // Subscribe hover event and keep a count of the number of hovered children\n        component.onHoverChanged.subscribe((_, args) => {\n          if (args.hovered) {\n            hoverStackCount++;\n          } else {\n            hoverStackCount--;\n          }\n        });\n      });\n    }\n\n    if (BrowserUtils.isMobile) {\n      uimanager.onComponentShow.subscribe((component: Component<ComponentConfig>) => {\n        if (component instanceof SettingsPanel) {\n          isSettingsPanelShown = true;\n        }\n      });\n\n      uimanager.onComponentHide.subscribe((component: Component<ComponentConfig>) => {\n        if (component instanceof SettingsPanel) {\n          isSettingsPanelShown = false;\n        }\n      });\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      this.show();\n    });\n\n    uimanager.onPreviewControlsHide.subscribe((sender, args) => {\n      // Cancel the hide event if hovered child components block hiding or if the settings panel is active on mobile.\n      args.cancel = args.cancel || (hoverStackCount > 0 || isSettingsPanelShown);\n    });\n\n    uimanager.onControlsHide.subscribe(() => {\n      this.hide();\n    });\n  }\n}\n","import {ContainerConfig, Container} from './container';\nimport {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {TvNoiseCanvas} from './tvnoisecanvas';\nimport { ErrorUtils } from '../errorutils';\nimport { ErrorEvent, PlayerAPI, PlayerEventBase } from 'bitmovin-player';\nimport {\n  isMobileV3PlayerAPI,\n  MobileV3PlayerAPI, MobileV3PlayerErrorEvent, MobileV3PlayerEvent, MobileV3SourceErrorEvent,\n} from '../mobilev3playerapi';\n\nexport interface ErrorMessageTranslator {\n  (error: ErrorEvent | MobileV3PlayerErrorEvent): string;\n}\n\nexport interface ErrorMessageMap {\n  [code: number]: string | ErrorMessageTranslator;\n}\n\n/**\n * Configuration interface for the {@link ErrorMessageOverlay}.\n */\nexport interface ErrorMessageOverlayConfig extends ContainerConfig {\n  /**\n   * Allows overwriting of the error messages displayed in the overlay for customization and localization.\n   * This is either a function that receives any {@link ErrorEvent} as parameter and translates error messages,\n   * or a map of error codes that overwrites specific error messages with a plain string or a function that\n   * receives the {@link ErrorEvent} as parameter and returns a customized string.\n   * The translation functions can be used to extract data (e.g. parameters) from the original error message.\n   *\n   * Example 1 (catch-all translation function):\n   * <code>\n   * errorMessageOverlayConfig = {\n   *   messages: function(error) {\n   *     switch (error.code) {\n   *       // Overwrite error 1000 'Unknown error'\n   *       case 1000:\n   *         return 'Houston, we have a problem'\n   *\n   *       // Transform error 1201 'The downloaded manifest is invalid' to uppercase\n   *       case 1201:\n   *         var description = ErrorUtils.defaultErrorMessages[error.code];\n   *         return description.toUpperCase();\n   *\n   *       // Customize error 1207 'The manifest could not be loaded'\n   *       case 1207:\n   *         var statusCode = error.data.statusCode;\n   *         return 'Manifest loading failed with HTTP error ' + statusCode;\n   *     }\n   *     // Return unmodified error message for all other errors\n   *     return error.message;\n   *   }\n   * };\n   * </code>\n   *\n   * Example 2 (translating specific errors):\n   * <code>\n   * errorMessageOverlayConfig = {\n   *   messages: {\n   *     // Overwrite error 1000 'Unknown error'\n   *     1000: 'Houston, we have a problem',\n   *\n   *     // Transform error 1201 'Unsupported manifest format' to uppercase\n   *     1201: function(error) {\n   *       var description = ErrorUtils.defaultErrorMessages[error.code];\n   *       return description.toUpperCase();\n   *     },\n   *\n   *     // Customize error 1207 'The manifest could not be loaded'\n   *     1207: function(error) {\n   *       var statusCode = error.data.statusCode;\n   *       return 'Manifest loading failed with HTTP error ' + statusCode;\n   *     }\n   *   }\n   * };\n   * </code>\n   */\n  messages?: ErrorMessageMap | ErrorMessageTranslator;\n}\n\n/**\n * Overlays the player and displays error messages.\n */\nexport class ErrorMessageOverlay extends Container<ErrorMessageOverlayConfig> {\n\n  private errorLabel: Label<LabelConfig>;\n  private tvNoiseBackground: TvNoiseCanvas;\n\n  constructor(config: ErrorMessageOverlayConfig = {}) {\n    super(config);\n\n    this.errorLabel = new Label<LabelConfig>({ cssClass: 'ui-errormessage-label' });\n    this.tvNoiseBackground = new TvNoiseCanvas();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-errormessage-overlay',\n      components: [this.tvNoiseBackground, this.errorLabel],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI | MobileV3PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    const handleErrorMessage = (\n      event: ErrorEvent | MobileV3SourceErrorEvent | MobileV3PlayerErrorEvent,\n      message: string,\n    ) => {\n      const customizedMessage = customizeErrorMessage(uimanager.getConfig().errorMessages || config.messages, event);\n      if (customizedMessage) {\n        message = customizedMessage;\n      }\n\n      this.display(message);\n    };\n\n    if (isMobileV3PlayerAPI(player)) {\n      const errorEventHandler = (event: MobileV3SourceErrorEvent | MobileV3PlayerErrorEvent) => {\n        const message = ErrorUtils.defaultMobileV3ErrorMessageTranslator(event);\n        handleErrorMessage(event, message);\n      };\n\n      player.on(MobileV3PlayerEvent.PlayerError, errorEventHandler);\n      player.on(MobileV3PlayerEvent.SourceError, errorEventHandler);\n    } else {\n      player.on(player.exports.PlayerEvent.Error, (event: ErrorEvent) => {\n        let message = ErrorUtils.defaultWebErrorMessageTranslator(event);\n        handleErrorMessage(event, message);\n      });\n    }\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, (event: PlayerEventBase) => {\n      if (this.isShown()) {\n        this.tvNoiseBackground.stop();\n        this.hide();\n      }\n    });\n  }\n\n  display(errorMessage: string): void {\n    this.errorLabel.setText(errorMessage);\n    this.tvNoiseBackground.start();\n    this.show();\n  }\n\n  release(): void {\n    super.release();\n\n    // Canvas rendering must be explicitly stopped, else it just continues forever and hogs resources\n    this.tvNoiseBackground.stop();\n  }\n}\n\nfunction customizeErrorMessage(\n  errorMessages: ErrorMessageTranslator | ErrorMessageMap,\n  event: ErrorEvent | MobileV3PlayerErrorEvent | MobileV3SourceErrorEvent,\n): string | undefined {\n  if (!errorMessages) {\n    return undefined;\n  }\n\n  // Process message vocabularies\n  if (typeof errorMessages === 'function') {\n    // Translation function for all errors\n    return errorMessages(event);\n  }\n  if (errorMessages[event.code]) {\n    // It's not a translation function, so it must be a map of strings or translation functions\n    const customMessage = errorMessages[event.code];\n\n    return typeof customMessage === 'string' ? customMessage : customMessage(event);\n  }\n}\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles the player between windowed and fullscreen view.\n */\nexport class FullscreenToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-fullscreentogglebutton',\n      text: i18n.getLocalizer('fullscreen'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const isFullScreenAvailable = () => {\n      return player.isViewModeAvailable(player.exports.ViewMode.Fullscreen);\n    };\n\n    const fullscreenStateHandler = () => {\n      player.getViewMode() === player.exports.ViewMode.Fullscreen ? this.on() : this.off();\n    };\n\n    const fullscreenAvailabilityChangedHandler = () => {\n      isFullScreenAvailable() ? this.show() : this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.ViewModeChanged, fullscreenStateHandler);\n\n    // Available only in our native SDKs for now\n    if ((player.exports.PlayerEvent as any).ViewModeAvailabilityChanged) {\n      player.on(\n        (player.exports.PlayerEvent as any).ViewModeAvailabilityChanged,\n        fullscreenAvailabilityChangedHandler,\n      );\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(fullscreenAvailabilityChangedHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isFullScreenAvailable()) {\n        if (console) {\n          console.log('Fullscreen unavailable');\n        }\n        return;\n      }\n\n      const targetViewMode =\n        player.getViewMode() === player.exports.ViewMode.Fullscreen\n          ? player.exports.ViewMode.Inline\n          : player.exports.ViewMode.Fullscreen;\n\n      player.setViewMode(targetViewMode);\n    });\n\n    // Startup init\n    fullscreenAvailabilityChangedHandler();\n    fullscreenStateHandler();\n  }\n}\n","import {PlaybackToggleButton, PlaybackToggleButtonConfig} from './playbacktogglebutton';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI, PlayerEventBase, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that overlays the video and toggles between playback and pause.\n */\nexport class HugePlaybackToggleButton extends PlaybackToggleButton {\n\n  constructor(config: PlaybackToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-hugeplaybacktogglebutton',\n      text: i18n.getLocalizer('playPause'),\n      role: 'button',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // Update button state through API events\n    super.configure(player, uimanager, false);\n\n    // Set enterFullscreenOnInitialPlayback if set in the uimanager config\n    if (typeof uimanager.getConfig().enterFullscreenOnInitialPlayback === 'boolean') {\n      this.config.enterFullscreenOnInitialPlayback = uimanager.getConfig().enterFullscreenOnInitialPlayback;\n    }\n\n    let togglePlayback = () => {\n      if (player.isPlaying() || this.isPlayInitiated) {\n        player.pause('ui');\n      } else {\n        player.play('ui');\n      }\n    };\n\n    let toggleFullscreen = () => {\n      if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n        player.setViewMode(player.exports.ViewMode.Inline);\n      } else {\n        player.setViewMode(player.exports.ViewMode.Fullscreen);\n      }\n    };\n\n    let firstPlay = true;\n    let clickTime = 0;\n    let doubleClickTime = 0;\n\n    /*\n     * YouTube-style toggle button handling\n     *\n     * The goal is to prevent a short pause or playback interval between a click, that toggles playback, and a\n     * double click, that toggles fullscreen. In this naive approach, the first click would e.g. start playback,\n     * the second click would be detected as double click and toggle to fullscreen, and as second normal click stop\n     * playback, which results is a short playback interval with max length of the double click detection\n     * period (usually 500ms).\n     *\n     * To solve this issue, we defer handling of the first click for 200ms, which is almost unnoticeable to the user,\n     * and just toggle playback if no second click (double click) has been registered during this period. If a double\n     * click is registered, we just toggle the fullscreen. In the first 200ms, undesired playback changes thus cannot\n     * happen. If a double click is registered within 500ms, we undo the playback change and switch fullscreen mode.\n     * In the end, this method basically introduces a 200ms observing interval in which playback changes are prevented\n     * if a double click happens.\n     */\n    this.onClick.subscribe(() => {\n      // Directly start playback on first click of the button.\n      // This is a required workaround for mobile browsers where video playback needs to be triggered directly\n      // by the user. A deferred playback start through the timeout below is not considered as user action and\n      // therefore ignored by mobile browsers.\n      if (firstPlay) {\n        // Try to start playback. Then we wait for Play and only when it arrives, we disable the firstPlay flag.\n        // If we disable the flag here, onClick was triggered programmatically instead of by a user interaction, and\n        // playback is blocked (e.g. on mobile devices due to the programmatic play() call), we loose the chance to\n        // ever start playback through a user interaction again with this button.\n        togglePlayback();\n\n        if (this.config.enterFullscreenOnInitialPlayback) {\n          player.setViewMode(player.exports.ViewMode.Fullscreen);\n        }\n\n        return;\n      }\n\n      let now = Date.now();\n\n      if (now - clickTime < 200) {\n        // We have a double click inside the 200ms interval, just toggle fullscreen mode\n        toggleFullscreen();\n        doubleClickTime = now;\n        return;\n      } else if (now - clickTime < 500) {\n        // We have a double click inside the 500ms interval, undo playback toggle and toggle fullscreen mode\n        toggleFullscreen();\n        togglePlayback();\n        doubleClickTime = now;\n        return;\n      }\n\n      clickTime = now;\n\n      setTimeout(() => {\n        if (Date.now() - doubleClickTime > 200) {\n          // No double click detected, so we toggle playback and wait what happens next\n          togglePlayback();\n        }\n      }, 200);\n    });\n\n    player.on(player.exports.PlayerEvent.Play, () => {\n      // Playback has really started, we can disable the flag to switch to normal toggle button handling\n      firstPlay = false;\n    });\n\n    player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n      if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n        // if playback could not be started, reset the first play flag as we need the user interaction to start\n        firstPlay = true;\n      }\n    });\n\n    const suppressPlayButtonTransitionAnimation = () => {\n      // Disable the current animation\n      this.setTransitionAnimationsEnabled(false);\n\n      // Enable the transition animations for the next state change\n      this.onToggle.subscribeOnce(() => {\n        this.setTransitionAnimationsEnabled(true);\n      });\n    };\n\n    // Hide the play button animation when the UI is loaded (it should only be animated on state changes)\n    suppressPlayButtonTransitionAnimation();\n\n    const isAutoplayEnabled = player.getConfig().playback && Boolean(player.getConfig().playback.autoplay);\n    // We only know if an autoplay attempt is upcoming if the player is not yet ready. It the player is already ready,\n    // the attempt might be upcoming or might have already happened, but we don't have to handle that because we can\n    // simply rely on isPlaying and the play state events.\n    const isAutoplayUpcoming = !player.getSource() && isAutoplayEnabled;\n\n    // Hide the play button when the player is already playing or autoplay is upcoming\n    if (player.isPlaying() || isAutoplayUpcoming) {\n      // Hide the play button (switch to playing state)\n      this.on();\n      // Disable the animation of the playing state switch\n      suppressPlayButtonTransitionAnimation();\n\n      // Show the play button without an animation if a play attempt is blocked\n      player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n        if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n          suppressPlayButtonTransitionAnimation();\n        }\n      });\n    }\n  }\n\n  protected toDomElement(): DOM {\n    let buttonElement = super.toDomElement();\n\n    // Add child that contains the play button image\n    // Setting the image directly on the button does not work together with scaling animations, because the button\n    // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined\n    // to the size if the image, it can scale inside the player without overshooting.\n    buttonElement.append(new DOM('div', {\n      'class': this.prefixCss('image'),\n    }));\n\n    return buttonElement;\n  }\n\n  /**\n   * Enables or disables the play state transition animations of the play button image. Can be used to suppress\n   * animations.\n   * @param {boolean} enabled true to enable the animations (default), false to disable them\n   */\n  protected setTransitionAnimationsEnabled(enabled: boolean): void {\n    const noTransitionAnimationsClass = this.prefixCss('no-transition-animations');\n\n    if (enabled) {\n      this.getDomElement().removeClass(noTransitionAnimationsClass);\n    } else if (!this.getDomElement().hasClass(noTransitionAnimationsClass)) {\n      this.getDomElement().addClass(noTransitionAnimationsClass);\n    }\n  }\n}\n","import {ButtonConfig, Button} from './button';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button to play/replay a video.\n */\nexport class HugeReplayButton extends Button<ButtonConfig> {\n\n  constructor(config: ButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-hugereplaybutton',\n      text: i18n.getLocalizer('replay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      player.play('ui');\n    });\n  }\n\n  protected toDomElement(): DOM {\n    let buttonElement = super.toDomElement();\n\n    // Add child that contains the play button image\n    // Setting the image directly on the button does not work together with scaling animations, because the button\n    // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined\n    // to the size if the image, it can scale inside the player without overshooting.\n    buttonElement.append(new DOM('div', {\n      'class': this.prefixCss('image'),\n    }));\n\n    return buttonElement;\n  }\n}","import {ListSelector, ListSelectorConfig} from './listselector';\nimport {DOM} from '../dom';\nimport { i18n } from '../localization/i18n';\n\nexport class ItemSelectionList extends ListSelector<ListSelectorConfig> {\n\n  private static readonly CLASS_SELECTED = 'selected';\n\n  private listElement: DOM;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      tag: 'ul',\n      cssClass: 'ui-itemselectionlist',\n    }, this.config);\n  }\n\n  protected isActive(): boolean {\n    return this.items.length > 1;\n  }\n\n  protected toDomElement(): DOM {\n    let listElement = new DOM('ul', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    });\n\n    this.listElement = listElement;\n    this.updateDomItems();\n\n    return listElement;\n  }\n\n  protected updateDomItems(selectedValue: string = null) {\n    // Delete all children\n    this.listElement.empty();\n\n    let selectedListItem: DOM = null;\n\n    const selectItem = (listItem: DOM) => {\n      listItem.addClass(this.prefixCss(ItemSelectionList.CLASS_SELECTED));\n    };\n\n    const deselectItem = (listItem: DOM) => {\n      listItem.removeClass(this.prefixCss(ItemSelectionList.CLASS_SELECTED));\n    };\n\n    for (let item of this.items) {\n      let listItem = new DOM('li', {\n        'type': 'li',\n        'class': this.prefixCss('ui-selectionlistitem'),\n      }).append(new DOM('a', {\n      }).html(i18n.performLocalization(item.label)));\n\n      if (!selectedListItem) {\n        if (selectedValue == null) { // If there is no pre-selected value, select the first one\n          selectedListItem = listItem;\n        } else if (String(selectedValue) === item.key) { // convert selectedValue to string to catch 'null'/null case\n          selectedListItem = listItem;\n        }\n      }\n\n      // Handle list item selections\n      listItem.on('click', () => {\n        // Deselect the previous item (if there was a selected item)\n        if (selectedListItem) {\n          deselectItem(selectedListItem);\n        }\n\n        // Select the clicked item\n        selectedListItem = listItem;\n        selectItem(listItem);\n\n        // Fire the event\n        this.onItemSelectedEvent(item.key, false);\n      });\n\n      // Select default item\n      if (selectedListItem) {\n        selectItem(selectedListItem);\n      }\n\n      this.listElement.append(listItem);\n    }\n  }\n\n  protected onItemAddedEvent(value: string) {\n    super.onItemAddedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemRemovedEvent(value: string) {\n    super.onItemRemovedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemSelectedEvent(value: string, updateDomItems: boolean = true) {\n    super.onItemSelectedEvent(value);\n    if (updateDomItems) {\n      this.updateDomItems(value);\n    }\n  }\n}\n","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {EventDispatcher, Event, NoArgs} from '../eventdispatcher';\nimport { LocalizableText, i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Label} component.\n */\nexport interface LabelConfig extends ComponentConfig {\n  /**\n   * The text as string or localize callback on the label.\n   */\n  text?: LocalizableText;\n\n  /**\n   * WCAG20 standard: Associate label to form control.\n   */\n  for?: string;\n}\n\n/**\n * A simple text label.\n *\n * DOM example:\n * <code>\n *     <span class='ui-label'>...some text...</span>\n * </code>\n */\nexport class Label<Config extends LabelConfig> extends Component<Config> {\n\n  private text: LocalizableText;\n\n  private labelEvents = {\n    onClick: new EventDispatcher<Label<Config>, NoArgs>(),\n    onTextChanged: new EventDispatcher<Label<Config>, string>(),\n  };\n\n  constructor(config: Config = {} as Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-label',\n    } as Config, this.config);\n    this.text = this.config.text;\n  }\n\n  protected toDomElement(): DOM {\n    const tagName = this.config.for != null ? 'label' : 'span';\n\n    let labelElement = new DOM(tagName, {\n      'id': this.config.id,\n      'for': this.config.for,\n      'class': this.getCssClasses(),\n    }).html(i18n.performLocalization(this.text));\n\n    labelElement.on('click', () => {\n      this.onClickEvent();\n    });\n\n    return labelElement;\n  }\n\n  /**\n   * Set the text on this label.\n   * @param text\n   */\n  setText(text: LocalizableText) {\n    if (text === this.text) {\n      return;\n    }\n\n    this.text = text;\n    const localizedText = i18n.performLocalization(text);\n    this.getDomElement().html(localizedText);\n    this.onTextChangedEvent(localizedText);\n  }\n\n  /**\n   * Gets the text on this label.\n   * @return {string} The text on the label\n   */\n  getText(): string {\n    return i18n.performLocalization(this.text);\n  }\n\n  /**\n   * Clears the text on this label.\n   */\n  clearText() {\n    this.getDomElement().html('');\n    this.onTextChangedEvent(null);\n  }\n\n  /**\n   * Tests if the label is empty and does not contain any text.\n   * @return {boolean} True if the label is empty, else false\n   */\n  isEmpty(): boolean {\n    return !this.text;\n  }\n\n  /**\n   * Fires the {@link #onClick} event.\n   * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method\n   * and calling the super method.\n   */\n  protected onClickEvent() {\n    this.labelEvents.onClick.dispatch(this);\n  }\n\n  /**\n   * Fires the {@link #onClick} event.\n   * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method\n   * and calling the super method.\n   */\n  protected onTextChangedEvent(text: string) {\n    this.labelEvents.onTextChanged.dispatch(this, text);\n  }\n\n  /**\n   * Gets the event that is fired when the label is clicked.\n   * @returns {Event<Label<LabelConfig>, NoArgs>}\n   */\n  get onClick(): Event<Label<LabelConfig>, NoArgs> {\n    return this.labelEvents.onClick.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the text on the label is changed.\n   * @returns {Event<Label<LabelConfig>, string>}\n   */\n  get onTextChanged(): Event<Label<LabelConfig>, string> {\n    return this.labelEvents.onTextChanged.getEvent();\n  }\n}\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\nimport { ListItem, ListSelector, ListSelectorConfig } from './listselector';\nimport {DOM} from '../dom';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\nimport { ArrayUtils } from '../arrayutils';\n\n/**\n * A element to select a single item out of a list of available items.\n *\n * DOM example:\n * <code>\n *   <div class='ui-listbox'>\n *     <button class='ui-listbox-button'>label</button>\n *     ...\n *   </div\n * </code>\n */\n// TODO: change ListSelector to extends container in v4 to improve usage of ListBox.\n//       Currently we are creating the dom element of the list box with child elements manually here.\n//       But this functionality is already covered within the Container component.\nexport class ListBox extends ListSelector<ListSelectorConfig> {\n  private listBoxElement: DOM;\n  private components: ListBoxItemButton[] = [];\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-listbox',\n    } as ListSelectorConfig, this.config);\n  }\n\n  public configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // Subscribe before super call to receive initial events\n    this.onItemAdded.subscribe(this.addListBoxDomItem);\n    this.onItemRemoved.subscribe(this.removeListBoxDomItem);\n    this.onItemSelected.subscribe(this.refreshSelectedItem);\n\n    super.configure(player, uimanager);\n  }\n\n  protected toDomElement(): DOM {\n    let listBoxElement = new DOM('div', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    });\n\n    this.listBoxElement = listBoxElement;\n    this.createListBoxDomItems();\n    this.refreshSelectedItem();\n\n    return listBoxElement;\n  }\n\n  private createListBoxDomItems() {\n    // Delete all children\n    this.listBoxElement.empty();\n    this.components = [];\n\n    // Add updated children\n    for (let item of this.items) {\n      this.addListBoxDomItem(this, item.key);\n    }\n  }\n\n  private removeListBoxDomItem = (_: ListBox, key: string) => {\n    const component = this.getComponentForKey(key);\n    if (component) {\n      component.getDomElement().remove();\n      ArrayUtils.remove(this.components, component);\n    }\n  };\n\n  private addListBoxDomItem = (_: ListBox, key: string) => {\n    const component = this.getComponentForKey(key);\n    const newItem = this.getItemForKey(key);\n    if (component) {\n      // Update existing component\n      component.setText(newItem.label);\n    } else {\n      const listBoxItemButton = this.buildListBoxItemButton(newItem);\n\n      listBoxItemButton.onClick.subscribe(() => {\n        this.handleSelectionChange(listBoxItemButton);\n      });\n\n      this.components.push(listBoxItemButton);\n      this.listBoxElement.append(listBoxItemButton.getDomElement());\n    }\n  };\n\n  private refreshSelectedItem = () => {\n    // This gets called twice because the first time is triggered when the user clicks on the ListBoxItemButton. And the\n    // second call comes from the player event when the actual item is selected (Subtitle / AudioTrack in this case).\n    // As this is a generic component we can't prohibit this behaviour. We need to treat this component as it acts\n    // independent from PlayerEvents and on the other hand we need to react to PlayerEvents as it could be triggered\n    // from outside.\n\n    for (let item of this.items) {\n      const component = this.getComponentForKey(item.key);\n      if (component) {\n        String(component.key) === String(this.selectedItem) ? component.on() : component.off();\n      }\n    }\n  };\n\n  private buildListBoxItemButton(listItem: ListItem): ListBoxItemButton {\n    return new ListBoxItemButton({\n      key: listItem.key,\n      text: listItem.label,\n      ariaLabel: listItem.ariaLabel,\n    });\n  }\n\n  private getComponentForKey(key: string): ListBoxItemButton {\n    return this.components.find((c) => key === c.key);\n  }\n\n  private handleSelectionChange = (sender: ListBoxItemButton) => {\n    this.onItemSelectedEvent(sender.key);\n  };\n}\n\ninterface ListBoxItemButtonConfig extends ToggleButtonConfig {\n  /**\n   * key to identify selected item. Similar to the value attribute of an select option.\n   */\n  key: string;\n}\n\nclass ListBoxItemButton extends ToggleButton<ListBoxItemButtonConfig> {\n\n  constructor(config: ListBoxItemButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-listbox-button',\n      onClass: 'selected',\n      offClass: '',\n    } as ListBoxItemButtonConfig, this.config);\n  }\n\n  get key(): string {\n    return (this.config as ListBoxItemButtonConfig).key;\n  }\n}\n","import {Component, ComponentConfig} from './component';\nimport {EventDispatcher, Event} from '../eventdispatcher';\nimport {ArrayUtils} from '../arrayutils';\nimport { LocalizableText, i18n } from '../localization/i18n';\n\n/**\n * A map of items (key/value -> label} for a {@link ListSelector} in a {@link ListSelectorConfig}.\n */\nexport interface ListItem {\n  key: string;\n  label: LocalizableText;\n  sortedInsert?: boolean;\n  ariaLabel?: string;\n}\n\n/**\n * Filter function that can be used to filter out list items added through {@link ListSelector.addItem}.\n *\n * This is intended to be used in conjunction with subclasses that populate themselves automatically\n * via the player API, e.g. {@link SubtitleSelectBox}.\n */\nexport interface ListItemFilter {\n  /**\n   * Takes a list item and decides whether it should pass or be discarded.\n   * @param {ListItem} listItem the item to apply the filter to\n   * @returns {boolean} true to let the item pass through the filter, false to discard the item\n   */\n  (listItem: ListItem): boolean;\n}\n\n/**\n * Translator function to translate labels of list items added through {@link ListSelector.addItem}.\n *\n * This is intended to be used in conjunction with subclasses that populate themselves automatically\n * via the player API, e.g. {@link SubtitleSelectBox}.\n */\nexport interface ListItemLabelTranslator {\n  /**\n   * Takes a list item, optionally changes the label, and returns the new label.\n   * @param {ListItem} listItem the item to translate\n   * @returns {string} the translated or original label\n   */\n  (listItem: ListItem): string;\n}\n\n/**\n * Configuration interface for a {@link ListSelector}.\n */\nexport interface ListSelectorConfig extends ComponentConfig {\n  items?: ListItem[];\n  filter?: ListItemFilter;\n  translator?: ListItemLabelTranslator;\n}\n\nexport abstract class ListSelector<Config extends ListSelectorConfig> extends Component<ListSelectorConfig> {\n\n  protected items: ListItem[];\n  protected selectedItem: string;\n\n  private listSelectorEvents = {\n    onItemAdded: new EventDispatcher<ListSelector<Config>, string>(),\n    onItemRemoved: new EventDispatcher<ListSelector<Config>, string>(),\n    onItemSelected: new EventDispatcher<ListSelector<Config>, string>(),\n  };\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      items: [],\n      cssClass: 'ui-listselector',\n    }, this.config);\n\n    this.items = this.config.items;\n  }\n\n  private getItemIndex(key: string): number {\n    for (let index in this.items) {\n      if (key === this.items[index].key) {\n        return parseInt(index);\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Returns all current items of this selector.\n   * * @returns {ListItem[]}\n   */\n  getItems(): ListItem[] {\n    return this.items;\n  }\n\n  /**\n   * Checks if the specified item is part of this selector.\n   * @param key the key of the item to check\n   * @returns {boolean} true if the item is part of this selector, else false\n   */\n  hasItem(key: string): boolean {\n    return this.getItemIndex(key) > -1;\n  }\n\n  /**\n   * Adds an item to this selector by doing a sorted insert or by appending the element to the end of the list of items.\n   * If an item with the specified key already exists, it is replaced.\n   * @param key the key of the item to add\n   * @param label the (human-readable) label of the item to add\n   * @param sortedInsert whether the item should be added respecting the order of keys\n   * @param ariaLabel custom aria label for the listItem\n   */\n  addItem(key: string, label: LocalizableText, sortedInsert = false, ariaLabel = '') {\n    const listItem = { key: key, label: i18n.performLocalization(label), ...(ariaLabel && { ariaLabel })};\n\n    // Apply filter function\n    if (this.config.filter && !this.config.filter(listItem)) {\n      return;\n    }\n\n    // Apply translator function\n    if (this.config.translator) {\n      listItem.label = this.config.translator(listItem);\n    }\n\n    // Try to remove key first to get overwrite behavior and avoid duplicate keys\n    this.removeItem(key); // This will trigger an ItemRemoved and an ItemAdded event\n\n    // Add the item to the list\n    if (sortedInsert) {\n      const index = this.items.findIndex(entry => entry.key > key);\n      if (index < 0) {\n        this.items.push(listItem);\n      } else {\n        this.items.splice(index, 0, listItem);\n      }\n    } else {\n      this.items.push(listItem);\n    }\n    this.onItemAddedEvent(key);\n  }\n\n  /**\n   * Removes an item from this selector.\n   * @param key the key of the item to remove\n   * @returns {boolean} true if removal was successful, false if the item is not part of this selector\n   */\n  removeItem(key: string): boolean {\n    let index = this.getItemIndex(key);\n    if (index > -1) {\n      ArrayUtils.remove(this.items, this.items[index]);\n      this.onItemRemovedEvent(key);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Selects an item from the items in this selector.\n   * @param key the key of the item to select\n   * @returns {boolean} true is the selection was successful, false if the selected item is not part of the selector\n   */\n  selectItem(key: string): boolean {\n    if (key === this.selectedItem) {\n      // itemConfig is already selected, suppress any further action\n      return true;\n    }\n\n    let index = this.getItemIndex(key);\n\n    if (index > -1) {\n      this.selectedItem = key;\n      this.onItemSelectedEvent(key);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns the key of the selected item.\n   * @returns {string} the key of the selected item or null if no item is selected\n   */\n  getSelectedItem(): string | null {\n    return this.selectedItem;\n  }\n\n  /**\n   * Returns the items for the given key or undefined if no item with the given key exists.\n   * @param key the key of the item to return\n   * @returns {ListItem} the item with the requested key. Undefined if no item with the given key exists.\n   */\n  getItemForKey(key: string): ListItem {\n    return this.items.find((item) => item.key === key);\n  }\n\n  /**\n   * Synchronize the current items of this selector with the given ones. This will remove and add items selectively.\n   * For each removed item the ItemRemovedEvent and for each added item the ItemAddedEvent will be triggered. Favour\n   * this method over using clearItems and adding all items again afterwards.\n   * @param newItems\n   */\n  synchronizeItems(newItems: ListItem[]): void {\n    newItems\n      .filter((item) => !this.hasItem(item.key))\n      .forEach((item) => this.addItem(item.key, item.label, item.sortedInsert, item.ariaLabel));\n\n    this.items\n      .filter((item) => newItems.filter((i) => i.key === item.key).length === 0)\n      .forEach((item) => this.removeItem(item.key));\n  }\n\n  /**\n   * Removes all items from this selector.\n   */\n  clearItems() {\n    // local copy for iteration after clear\n    let items = this.items;\n    // clear items\n    this.items = [];\n\n    // clear the selection as the selected item is also removed\n    this.selectedItem = null;\n\n    // fire events\n    for (let item of items) {\n      this.onItemRemovedEvent(item.key);\n    }\n  }\n\n  /**\n   * Returns the number of items in this selector.\n   * @returns {number}\n   */\n  itemCount(): number {\n    return Object.keys(this.items).length;\n  }\n\n  protected onItemAddedEvent(key: string) {\n    this.listSelectorEvents.onItemAdded.dispatch(this, key);\n  }\n\n  protected onItemRemovedEvent(key: string) {\n    this.listSelectorEvents.onItemRemoved.dispatch(this, key);\n  }\n\n  protected onItemSelectedEvent(key: string) {\n    this.listSelectorEvents.onItemSelected.dispatch(this, key);\n  }\n\n  /**\n   * Gets the event that is fired when an item is added to the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemAdded(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemAdded.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when an item is removed from the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemRemoved(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemRemoved.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when an item is selected from the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemSelected(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemSelected.getEvent();\n  }\n}","import {LabelConfig, Label} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Enumerates the types of content that the {@link MetadataLabel} can display.\n */\nexport enum MetadataLabelContent {\n  /**\n   * Title of the data source.\n   */\n  Title,\n  /**\n   * Description fo the data source.\n   */\n  Description,\n}\n\n/**\n * Configuration interface for {@link MetadataLabel}.\n */\nexport interface MetadataLabelConfig extends LabelConfig {\n  /**\n   * The type of content that should be displayed in the label.\n   */\n  content: MetadataLabelContent;\n}\n\n/**\n * A label that can be configured to display certain metadata.\n */\nexport class MetadataLabel extends Label<MetadataLabelConfig> {\n\n  constructor(config: MetadataLabelConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['label-metadata', 'label-metadata-' + MetadataLabelContent[config.content].toLowerCase()],\n    } as MetadataLabelConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let uiconfig = uimanager.getConfig();\n\n    let init = () => {\n      switch (config.content) {\n        case MetadataLabelContent.Title:\n          this.setText(uiconfig.metadata.title);\n          break;\n        case MetadataLabelContent.Description:\n          this.setText(uiconfig.metadata.description);\n          break;\n      }\n    };\n\n    let unload = () => {\n      this.setText(null);\n    };\n\n    // Init label\n    init();\n    // Clear labels when source is unloaded\n    player.on(player.exports.PlayerEvent.SourceUnloaded, unload);\n\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles Apple macOS picture-in-picture mode.\n */\nexport class PictureInPictureToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-piptogglebutton',\n      text: i18n.getLocalizer('pictureInPicture'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const isPictureInPictureAvailable = () => {\n      return player.isViewModeAvailable(player.exports.ViewMode.PictureInPicture);\n    };\n\n    const pictureInPictureStateHandler = () => {\n      player.getViewMode() === player.exports.ViewMode.PictureInPicture ? this.on() : this.off();\n    };\n\n    const pictureInPictureAvailabilityChangedHandler = () => {\n      isPictureInPictureAvailable() ? this.show() : this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.ViewModeChanged, pictureInPictureStateHandler);\n\n    // Available only in our native SDKs for now\n    if ((player.exports.PlayerEvent as any).ViewModeAvailabilityChanged) {\n      player.on(\n        (player.exports.PlayerEvent as any).ViewModeAvailabilityChanged,\n        pictureInPictureAvailabilityChangedHandler,\n      );\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(pictureInPictureAvailabilityChangedHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isPictureInPictureAvailable()) {\n        if (console) {\n          console.log('PIP unavailable');\n        }\n        return;\n      }\n\n      const targetViewMode =\n        player.getViewMode() === player.exports.ViewMode.PictureInPicture\n          ? player.exports.ViewMode.Inline\n          : player.exports.ViewMode.PictureInPicture;\n\n      player.setViewMode(targetViewMode);\n    });\n\n    // Startup init\n    pictureInPictureAvailabilityChangedHandler(); // Hide button if PIP not available\n    pictureInPictureStateHandler();\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection of different playback speeds.\n */\nexport class PlaybackSpeedSelectBox extends SelectBox {\n  protected defaultPlaybackSpeeds: number[];\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n    this.defaultPlaybackSpeeds = [0.25, 0.5, 1, 1.5, 2];\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-playbackspeedselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addDefaultItems();\n\n    this.onItemSelected.subscribe((sender: PlaybackSpeedSelectBox, value: string) => {\n      player.setPlaybackSpeed(parseFloat(value));\n      this.selectItem(value);\n    });\n\n    const setDefaultValue = (): void => {\n      const playbackSpeed = player.getPlaybackSpeed();\n      this.setSpeed(playbackSpeed);\n    };\n\n    player.on(player.exports.PlayerEvent.PlaybackSpeedChanged, setDefaultValue);\n    uimanager.getConfig().events.onUpdated.subscribe(setDefaultValue);\n  }\n\n  setSpeed(speed: number): void {\n    if (!this.selectItem(String(speed))) {\n      // a playback speed was set which is not in the list, add it to the list to show it to the user\n      this.clearItems();\n      this.addDefaultItems([speed]);\n      this.selectItem(String(speed));\n    }\n  }\n\n  addDefaultItems(customItems: number[] = []): void {\n    const sortedSpeeds = this.defaultPlaybackSpeeds.concat(customItems).sort();\n\n    sortedSpeeds.forEach(element => {\n      if (element !== 1) {\n        this.addItem(String(element), `${element}x`);\n      } else {\n        this.addItem(String(element), i18n.getLocalizer('normal'));\n      }\n    });\n  }\n\n  clearItems(): void {\n    this.items = [];\n    this.selectedItem = null;\n  }\n}","import {LabelConfig, Label} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\nimport {PlayerUtils} from '../playerutils';\nimport {StringUtils} from '../stringutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\nexport enum PlaybackTimeLabelMode {\n  /**\n   * Displays the current time\n   */\n  CurrentTime,\n  /**\n   * Displays the duration of the content\n   */\n  TotalTime,\n  /**\n   * Displays the current time and the duration of the content\n   * Format: ${currentTime} / ${totalTime}\n   */\n  CurrentAndTotalTime,\n  /**\n   * Displays the remaining time of the content\n   */\n  RemainingTime,\n}\n\nexport interface PlaybackTimeLabelConfig extends LabelConfig {\n  /**\n   * The type of which time should be displayed in the label.\n   * Default: PlaybackTimeLabelMode.CurrentAndTotalTime\n   */\n  timeLabelMode?: PlaybackTimeLabelMode;\n  /**\n   * Boolean if the label should be hidden in live playback\n   */\n  hideInLivePlayback?: boolean;\n}\n\n/**\n * A label that display the current playback time and the total time through {@link PlaybackTimeLabel#setTime setTime}\n * or any string through {@link PlaybackTimeLabel#setText setText}.\n */\nexport class PlaybackTimeLabel extends Label<PlaybackTimeLabelConfig> {\n\n  private timeFormat: string;\n\n  constructor(config: PlaybackTimeLabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <PlaybackTimeLabelConfig>{\n      cssClass: 'ui-playbacktimelabel',\n      timeLabelMode: PlaybackTimeLabelMode.CurrentAndTotalTime,\n      hideInLivePlayback: false,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let live = false;\n    let liveCssClass = this.prefixCss('ui-playbacktimelabel-live');\n    let liveEdgeCssClass = this.prefixCss('ui-playbacktimelabel-live-edge');\n    let minWidth = 0;\n\n    let liveClickHandler = () => {\n      player.timeShift(0);\n    };\n\n    let updateLiveState = () => {\n      // Player is playing a live stream when the duration is infinite\n      live = player.isLive();\n\n      // Attach/detach live marker class\n      if (live) {\n        this.getDomElement().addClass(liveCssClass);\n        this.setText(i18n.getLocalizer('live'));\n        if (config.hideInLivePlayback) {\n          this.hide();\n        }\n        this.onClick.subscribe(liveClickHandler);\n        updateLiveTimeshiftState();\n      } else {\n        this.getDomElement().removeClass(liveCssClass);\n        this.getDomElement().removeClass(liveEdgeCssClass);\n        this.show();\n        this.onClick.unsubscribe(liveClickHandler);\n      }\n    };\n\n    let updateLiveTimeshiftState = () => {\n      if (!live) {\n        return;\n      }\n\n      // The player is only at the live edge iff the stream is not shifted and it is actually playing or playback has\n      // never been started (meaning it isn't paused). A player that is paused is always behind the live edge.\n      // An exception is made for live streams without a timeshift window, because here we \"stop\" playback instead\n      // of pausing it (from a UI perspective), so we keep the live edge indicator on because a play would always\n      // resume at the live edge.\n      const isTimeshifted = player.getTimeShift() < 0;\n      const isTimeshiftAvailable = player.getMaxTimeShift() < 0;\n      if (!isTimeshifted && (!player.isPaused() || !isTimeshiftAvailable)) {\n        this.getDomElement().addClass(liveEdgeCssClass);\n      } else {\n        this.getDomElement().removeClass(liveEdgeCssClass);\n      }\n    };\n\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      live = args.live;\n      updateLiveState();\n    });\n    liveStreamDetector.detect(); // Initial detection\n\n    let playbackTimeHandler = () => {\n      if (!live && player.getDuration() !== Infinity) {\n        this.setTime(\n          PlayerUtils.getCurrentTimeRelativeToSeekableRange(player),\n          player.getDuration());\n      }\n\n      // To avoid 'jumping' in the UI by varying label sizes due to non-monospaced fonts,\n      // we gradually increase the min-width with the content to reach a stable size.\n      let width = this.getDomElement().width();\n      if (width > minWidth) {\n        minWidth = width;\n        this.getDomElement().css({\n          'min-width': minWidth + 'px',\n        });\n      }\n    };\n\n    let updateTimeFormatBasedOnDuration = () => {\n      // Set time format depending on source duration\n      this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?\n      StringUtils.FORMAT_HHMMSS : StringUtils.FORMAT_MMSS;\n      playbackTimeHandler();\n    };\n\n    player.on(player.exports.PlayerEvent.TimeChanged, playbackTimeHandler);\n    player.on(player.exports.PlayerEvent.Ready, updateTimeFormatBasedOnDuration);\n    player.on(player.exports.PlayerEvent.Seeked, playbackTimeHandler);\n\n    player.on(player.exports.PlayerEvent.TimeShift, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.TimeShifted, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.Playing, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.Paused, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.StallStarted, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.StallEnded, updateLiveTimeshiftState);\n\n    let init = () => {\n      // Reset min-width when a new source is ready (especially for switching VOD/Live modes where the label content\n      // changes)\n      minWidth = 0;\n      this.getDomElement().css({\n        'min-width': null,\n      });\n\n      updateTimeFormatBasedOnDuration();\n    };\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n\n    init();\n  }\n\n  /**\n   * Sets the current playback time and total duration.\n   * @param playbackSeconds the current playback time in seconds\n   * @param durationSeconds the total duration in seconds\n   */\n  setTime(playbackSeconds: number, durationSeconds: number) {\n    let currentTime = StringUtils.secondsToTime(playbackSeconds, this.timeFormat);\n    let totalTime = StringUtils.secondsToTime(durationSeconds, this.timeFormat);\n\n    switch ((<PlaybackTimeLabelConfig>this.config).timeLabelMode) {\n      case PlaybackTimeLabelMode.CurrentTime:\n        this.setText(`${currentTime}`);\n        break;\n      case PlaybackTimeLabelMode.TotalTime:\n        this.setText(`${totalTime}`);\n        break;\n      case PlaybackTimeLabelMode.CurrentAndTotalTime:\n        this.setText(`${currentTime} / ${totalTime}`);\n        break;\n      case PlaybackTimeLabelMode.RemainingTime:\n        let remainingTime = StringUtils.secondsToTime(durationSeconds - playbackSeconds, this.timeFormat);\n        this.setText(`${remainingTime}`);\n        break;\n    }\n  }\n\n  /**\n   * Sets the current time format\n   * @param timeFormat the time format\n   */\n  protected setTimeFormat(timeFormat: string): void {\n    this.timeFormat = timeFormat;\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport {PlayerUtils} from '../playerutils';\nimport { PlayerAPI, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\nexport interface PlaybackToggleButtonConfig extends ToggleButtonConfig {\n  /**\n   * Specify whether the player should be set to enter fullscreen by clicking on the playback toggle button\n   * when initiating the initial playback.\n   * Default is false.\n   */\n  enterFullscreenOnInitialPlayback?: boolean;\n}\n\n/**\n * A button that toggles between playback and pause.\n */\nexport class PlaybackToggleButton extends ToggleButton<PlaybackToggleButtonConfig> {\n\n  private static readonly CLASS_STOPTOGGLE = 'stoptoggle';\n  protected isPlayInitiated: boolean;\n\n  constructor(config: PlaybackToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbacktogglebutton',\n      text: i18n.getLocalizer('play'),\n      onAriaLabel: i18n.getLocalizer('pause'),\n      offAriaLabel: i18n.getLocalizer('play'),\n    }, this.config);\n\n    this.isPlayInitiated = false;\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager, handleClickEvent: boolean = true): void {\n    super.configure(player, uimanager);\n\n    // Set enterFullscreenOnInitialPlayback if set in the uimanager config\n    if (typeof uimanager.getConfig().enterFullscreenOnInitialPlayback === 'boolean') {\n      this.config.enterFullscreenOnInitialPlayback = uimanager.getConfig().enterFullscreenOnInitialPlayback;\n    }\n\n    let isSeeking = false;\n    let firstPlay = true;\n\n    // Handler to update button state based on player state\n    let playbackStateHandler = () => {\n      // If the UI is currently seeking, playback is temporarily stopped but the buttons should\n      // not reflect that and stay as-is (e.g indicate playback while seeking).\n      if (isSeeking) {\n        return;\n      }\n\n      if (player.isPlaying() || this.isPlayInitiated) {\n        this.on();\n      } else {\n        this.off();\n      }\n    };\n\n    // Call handler upon these events\n    player.on(player.exports.PlayerEvent.Play, (e) => {\n      this.isPlayInitiated = true;\n      firstPlay = false;\n      playbackStateHandler();\n    });\n\n    player.on(player.exports.PlayerEvent.Paused, (e) => {\n      this.isPlayInitiated = false;\n      playbackStateHandler();\n    });\n\n    player.on(player.exports.PlayerEvent.Playing, (e) => {\n      this.isPlayInitiated = false;\n      playbackStateHandler();\n    });\n    // after unloading + loading a new source, the player might be in a different playing state (from playing into stopped)\n    player.on(player.exports.PlayerEvent.SourceLoaded, playbackStateHandler);\n    uimanager.getConfig().events.onUpdated.subscribe(playbackStateHandler);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, playbackStateHandler);\n    // when playback finishes, player turns to paused mode\n    player.on(player.exports.PlayerEvent.PlaybackFinished, playbackStateHandler);\n    player.on(player.exports.PlayerEvent.CastStarted, playbackStateHandler);\n\n    // When a playback attempt is rejected with warning 5008, we switch the button state back to off\n    // This is required for blocked autoplay, because there is no Paused event in such case\n    player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n      if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n        this.isPlayInitiated = false;\n        firstPlay = true;\n        this.off();\n      }\n    });\n\n    const updateLiveState = () => {\n      const showStopToggle = player.isLive() && !PlayerUtils.isTimeShiftAvailable(player);\n\n      if (showStopToggle) {\n        this.getDomElement().addClass(this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));\n      } else {\n        this.getDomElement().removeClass(this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));\n      }\n    };\n\n    // Detect absence of timeshifting on live streams and add tagging class to convert button icons to play/stop\n    let timeShiftDetector = new PlayerUtils.TimeShiftAvailabilityDetector(player);\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n\n    timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe(() => updateLiveState());\n    liveStreamDetector.onLiveChanged.subscribe(() => updateLiveState());\n\n    timeShiftDetector.detect(); // Initial detection\n    liveStreamDetector.detect();\n\n    if (handleClickEvent) {\n      // Control player by button events\n      // When a button event triggers a player API call, events are fired which in turn call the event handler\n      // above that updated the button state.\n      this.onClick.subscribe(() => {\n        if (player.isPlaying() || this.isPlayInitiated) {\n          player.pause('ui');\n        } else {\n          player.play('ui');\n\n          if (firstPlay && this.config.enterFullscreenOnInitialPlayback) {\n            player.setViewMode(player.exports.ViewMode.Fullscreen);\n          }\n        }\n      });\n    }\n\n    // Track UI seeking status\n    uimanager.onSeek.subscribe(() => {\n      isSeeking = true;\n    });\n    uimanager.onSeeked.subscribe(() => {\n      isSeeking = false;\n    });\n\n    // Startup init\n    playbackStateHandler();\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {HugePlaybackToggleButton} from './hugeplaybacktogglebutton';\n\nexport interface PlaybackToggleOverlayConfig extends ContainerConfig {\n  /**\n   * Specify whether the player should be set to enter fullscreen by clicking on the playback toggle button\n   * when initiating the initial playback.\n   * Default is false.\n   */\n  enterFullscreenOnInitialPlayback?: boolean;\n}\n\n/**\n * Overlays the player and displays error messages.\n */\nexport class PlaybackToggleOverlay extends Container<PlaybackToggleOverlayConfig> {\n\n  private playbackToggleButton: HugePlaybackToggleButton;\n\n  constructor(config: PlaybackToggleOverlayConfig = {}) {\n    super(config);\n\n    this.playbackToggleButton = new HugePlaybackToggleButton({\n      enterFullscreenOnInitialPlayback: Boolean(config.enterFullscreenOnInitialPlayback),\n    });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbacktoggle-overlay',\n      components: [this.playbackToggleButton],\n    }, this.config);\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {Component, ComponentConfig} from './component';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport {HugeReplayButton} from './hugereplaybutton';\nimport { UIRecommendationConfig } from '../uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Overlays the player and displays recommended videos.\n */\nexport class RecommendationOverlay extends Container<ContainerConfig> {\n\n  private replayButton: HugeReplayButton;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.replayButton = new HugeReplayButton();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-recommendation-overlay',\n      hidden: true,\n      components: [this.replayButton],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let clearRecommendations = () => {\n      for (let component of this.getComponents().slice()) {\n        if (component instanceof RecommendationItem) {\n          this.removeComponent(component);\n        }\n      }\n      this.updateComponents();\n      this.getDomElement().removeClass(this.prefixCss('recommendations'));\n    };\n\n    let setupRecommendations = () => {\n      clearRecommendations();\n\n      const recommendations = uimanager.getConfig().recommendations;\n\n      if (recommendations.length > 0) {\n        let index = 1;\n        for (let item of recommendations) {\n          this.addComponent(new RecommendationItem({\n            itemConfig: item,\n            cssClasses: ['recommendation-item-' + (index++)],\n          }));\n        }\n        this.updateComponents(); // create container DOM elements\n\n        this.getDomElement().addClass(this.prefixCss('recommendations'));\n      }\n    };\n\n    uimanager.getConfig().events.onUpdated.subscribe(setupRecommendations);\n    // Remove recommendations and hide overlay when source is unloaded\n    player.on(player.exports.PlayerEvent.SourceUnloaded, () => {\n      clearRecommendations();\n      this.hide();\n    });\n    // Display recommendations when playback has finished\n    player.on(player.exports.PlayerEvent.PlaybackFinished, () => {\n      this.show();\n    });\n    // Hide recommendations when playback starts, e.g. a restart\n    player.on(player.exports.PlayerEvent.Play, () => {\n      this.hide();\n    });\n\n    // Init on startup\n    setupRecommendations();\n  }\n}\n\n/**\n * Configuration interface for the {@link RecommendationItem}\n */\ninterface RecommendationItemConfig extends ComponentConfig {\n  itemConfig: UIRecommendationConfig;\n}\n\n/**\n * An item of the {@link RecommendationOverlay}. Used only internally in {@link RecommendationOverlay}.\n */\nclass RecommendationItem extends Component<RecommendationItemConfig> {\n\n  constructor(config: RecommendationItemConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-recommendation-item',\n      itemConfig: null, // this must be passed in from outside\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let config = this.config.itemConfig;\n\n    let itemElement = new DOM('a', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'href': config.url,\n    }).css({ 'background-image': `url(${config.thumbnail})` });\n\n    let bgElement = new DOM('div', {\n      'class': this.prefixCss('background'),\n    });\n    itemElement.append(bgElement);\n\n    let titleElement = new DOM('span', {\n      'class': this.prefixCss('title'),\n    }).append(new DOM('span', {\n      'class': this.prefixCss('innertitle'),\n    }).html(config.title));\n    itemElement.append(titleElement);\n\n    let timeElement = new DOM('span', {\n      'class': this.prefixCss('duration'),\n    }).append(new DOM('span', {\n      'class': this.prefixCss('innerduration'),\n    }).html(config.duration ? StringUtils.secondsToTime(config.duration) : ''));\n    itemElement.append(timeElement);\n\n    return itemElement;\n  }\n}","import { ButtonConfig, Button } from './button';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\nimport { PlayerUtils } from '../playerutils';\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\n\n/**\n * A button to play/replay a video.\n */\nexport class ReplayButton extends Button<ButtonConfig> {\n\n  constructor(config: ButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-replaybutton',\n      text: i18n.getLocalizer('replay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    if (player.isLive()) {\n      this.hide();\n    }\n\n    const liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      if (args.live) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    });\n\n    this.onClick.subscribe(() => {\n      if (!player.hasEnded()) {\n        player.seek(0);\n        // Not calling `play` will keep the play/pause state as is\n      } else {\n        // If playback has already ended, calling `play` will automatically restart from the beginning\n        player.play('ui');\n      }\n    });\n  }\n}\n","import { ExtendedPlayerAPI, GroupPlaybackSuspension, GroupPlaybackSuspensionReason } from './../groupplaybackapi';\nimport { Component, ComponentConfig } from './component';\nimport { DOM } from '../dom';\nimport { Event, EventDispatcher, NoArgs } from '../eventdispatcher';\nimport { SeekBarLabel } from './seekbarlabel';\nimport { UIInstanceManager, SeekPreviewArgs } from '../uimanager';\nimport { Timeout } from '../timeout';\nimport { PlayerUtils } from '../playerutils';\nimport TimeShiftAvailabilityChangedArgs = PlayerUtils.TimeShiftAvailabilityChangedArgs;\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\nimport { TimelineMarker } from '../uiconfig';\nimport { PlayerAPI, PlayerEventBase } from 'bitmovin-player';\nimport { StringUtils } from '../stringutils';\nimport { SeekBarType, SeekBarController } from './seekbarcontroller';\nimport { i18n } from '../localization/i18n';\nimport { BrowserUtils } from '../browserutils';\nimport { TimelineMarkersHandler } from './timelinemarkershandler';\nimport { getMinBufferLevel } from './seekbarbufferlevel';\n\n/**\n * Configuration interface for the {@link SeekBar} component.\n */\nexport interface SeekBarConfig extends ComponentConfig {\n  /**\n   * The label above the seek position.\n   */\n  label?: SeekBarLabel;\n  /**\n   * Bar will be vertical instead of horizontal if set to true.\n   */\n  vertical?: boolean;\n  /**\n   * The interval in milliseconds in which the playback position on the seek bar will be updated. The shorter the\n   * interval, the smoother it looks and the more resource intense it is. The update interval will be kept as steady\n   * as possible to avoid jitter.\n   * Set to -1 to disable smooth updating and update it on player TimeChanged events instead.\n   * Default: 50 (50ms = 20fps).\n   */\n  smoothPlaybackPositionUpdateIntervalMs?: number;\n\n  /**\n   * Used for seekBar control increments and decrements\n   */\n  keyStepIncrements?: { leftRight: number, upDown: number };\n\n  /**\n   * Used for seekBar marker snapping range percentage\n   */\n  snappingRange?: number;\n\n  /**\n   * Used to enable/disable seek preview\n   */\n  enableSeekPreview?: boolean;\n}\n\n/**\n * Event argument interface for a seek preview event.\n */\nexport interface SeekPreviewEventArgs extends SeekPreviewArgs {\n  /**\n   * Tells if the seek preview event comes from a scrubbing.\n   */\n  scrubbing: boolean;\n}\n\nexport interface SeekBarMarker {\n  marker: TimelineMarker;\n  position: number;\n  duration?: number;\n  element?: DOM;\n}\n\n/**\n * A seek bar to seek within the player's media. It displays the current playback position, amount of buffed data, seek\n * target, and keeps status about an ongoing seek.\n *\n * The seek bar displays different 'bars':\n *  - the playback position, i.e. the position in the media at which the player current playback pointer is positioned\n *  - the buffer position, which usually is the playback position plus the time span that is already buffered ahead\n *  - the seek position, used to preview to where in the timeline a seek will jump to\n */\nexport class SeekBar extends Component<SeekBarConfig> {\n\n  public static readonly SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED = -1;\n\n  /**\n   * The CSS class that is added to the DOM element while the seek bar is in 'seeking' state.\n   */\n  private static readonly CLASS_SEEKING = 'seeking';\n\n  private seekBar: DOM;\n  private seekBarPlaybackPosition: DOM;\n  private seekBarPlaybackPositionMarker: DOM;\n  private seekBarBufferPosition: DOM;\n  private seekBarSeekPosition: DOM;\n  private seekBarBackdrop: DOM;\n\n  private label: SeekBarLabel;\n\n  private seekBarMarkersContainer: DOM;\n  private timelineMarkersHandler: TimelineMarkersHandler;\n\n  private player: PlayerAPI;\n\n  protected seekBarType: SeekBarType;\n\n  protected isUiShown: boolean;\n\n  /**\n   * Buffer of the the current playback position. The position must be buffered in case the element\n   * needs to be refreshed with {@link #refreshPlaybackPosition}.\n   * @type {number}\n   */\n  private playbackPositionPercentage = 0;\n\n  private smoothPlaybackPositionUpdater: Timeout;\n  private pausedTimeshiftUpdater: Timeout;\n\n  private isUserSeeking = false;\n\n  private seekBarEvents = {\n    /**\n     * Fired when a scrubbing seek operation is started.\n     */\n    onSeek: new EventDispatcher<SeekBar, NoArgs>(),\n    /**\n     * Fired during a scrubbing seek to indicate that the seek preview (i.e. the video frame) should be updated.\n     */\n    onSeekPreview: new EventDispatcher<SeekBar, SeekPreviewEventArgs>(),\n    /**\n     * Fired when a scrubbing seek has finished or when a direct seek is issued.\n     */\n    onSeeked: new EventDispatcher<SeekBar, number>(),\n  };\n\n  constructor(config: SeekBarConfig = {}) {\n    super(config);\n\n    const keyStepIncrements = this.config.keyStepIncrements || {\n      leftRight: 1,\n      upDown: 5,\n    };\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-seekbar',\n      vertical: false,\n      smoothPlaybackPositionUpdateIntervalMs: 50,\n      keyStepIncrements,\n      ariaLabel: i18n.getLocalizer('seekBar'),\n      tabIndex: 0,\n      snappingRange: 1,\n      enableSeekPreview: true,\n    }, this.config);\n\n    this.label = this.config.label;\n  }\n\n  initialize(): void {\n    super.initialize();\n\n    if (this.hasLabel()) {\n      this.getLabel().initialize();\n    }\n  }\n\n  protected setAriaSliderMinMax(min: string, max: string) {\n    this.getDomElement().attr('aria-valuemin', min);\n    this.getDomElement().attr('aria-valuemax', max);\n  }\n\n  private setAriaSliderValues() {\n    if (this.seekBarType === SeekBarType.Live) {\n      const timeshiftValue = Math.ceil(this.player.getTimeShift()).toString();\n      this.getDomElement().attr('aria-valuenow', timeshiftValue);\n      this.getDomElement().attr('aria-valuetext', `${i18n.performLocalization(i18n.getLocalizer('seekBar.timeshift'))} ${i18n.performLocalization(i18n.getLocalizer('seekBar.value'))}: ${timeshiftValue}`);\n    } else if (this.seekBarType === SeekBarType.Vod) {\n      const ariaValueText = `${StringUtils.secondsToText(this.player.getCurrentTime())} ${i18n.performLocalization(i18n.getLocalizer('seekBar.durationText'))} ${StringUtils.secondsToText(this.player.getDuration())}`;\n      this.getDomElement().attr('aria-valuenow', Math.floor(this.player.getCurrentTime()).toString());\n      this.getDomElement().attr('aria-valuetext', ariaValueText);\n    }\n  }\n\n  private getPlaybackPositionPercentage(): number {\n    if (this.player.isLive()) {\n      return 100 - (100 / this.player.getMaxTimeShift() * this.player.getTimeShift());\n    }\n\n    return 100 / this.player.getDuration() * this.getRelativeCurrentTime();\n  }\n\n  private updateBufferLevel(playbackPositionPercentage: number): void {\n\n    let bufferLoadedPercentageLevel: number;\n    if (this.player.isLive()) {\n      // Always show full buffer for live streams\n      bufferLoadedPercentageLevel = 100;\n    } else {\n      bufferLoadedPercentageLevel = playbackPositionPercentage + getMinBufferLevel(this.player);\n    }\n\n    this.setBufferPosition(bufferLoadedPercentageLevel);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager, configureSeek: boolean = true): void {\n    super.configure(player, uimanager);\n\n    this.player = player;\n\n    // Apply scaling transform to the backdrop bar to have all bars rendered similarly\n    // (the call must be up here to be executed for the volume slider as well)\n    this.setPosition(this.seekBarBackdrop, 100);\n\n    // Add seekbar controls to the seekbar\n    const seekBarController = new SeekBarController(this.config.keyStepIncrements, player, uimanager.getConfig().volumeController);\n\n    seekBarController.setSeekBarControls(this.getDomElement(), () => this.seekBarType);\n\n    // The configureSeek flag can be used by subclasses to disable configuration as seek bar. E.g. the volume\n    // slider is reusing this component but adds its own functionality, and does not need the seek functionality.\n    // This is actually a hack, the proper solution would be for both seek bar and volume sliders to extend\n    // a common base slider component and implement their functionality there.\n    if (!configureSeek) {\n      this.seekBarType = SeekBarType.Volume;\n\n      return;\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      this.isUiShown = true;\n    });\n\n    uimanager.onControlsHide.subscribe(() => {\n      this.isUiShown = false;\n    });\n\n    let isPlaying = false;\n    let scrubbing = false;\n    let isPlayerSeeking = false;\n    let suspension: GroupPlaybackSuspension | undefined;\n\n    // Update playback and buffer positions\n    let playbackPositionHandler = (event: PlayerEventBase = null, forceUpdate: boolean = false) => {\n      if (this.isUserSeeking) {\n        // We caught a seek preview seek, do not update the seekbar\n        return;\n      }\n\n      let playbackPositionPercentage = this.getPlaybackPositionPercentage();\n\n      this.updateBufferLevel(playbackPositionPercentage);\n\n      // The segment request finished is used to help the playback position move, when the smooth playback position is not enabled.\n      // At the same time when the user is scrubbing, we also move the position of the seekbar to display a preview during scrubbing.\n      // When the user is scrubbing we do not record this as a user seek operation, as the user has yet to finish their seek,\n      // but we should not move the playback position to not create a jumping behaviour.\n      if (scrubbing && event && event.type === player.exports.PlayerEvent.SegmentRequestFinished && playbackPositionPercentage !== this.playbackPositionPercentage) {\n        playbackPositionPercentage = this.playbackPositionPercentage;\n      }\n\n      if (player.isLive()) {\n        if (player.getMaxTimeShift() === 0) {\n          // This case must be explicitly handled to avoid division by zero\n          this.setPlaybackPosition(100);\n        } else {\n          if (!this.isSeeking()) {\n            this.setPlaybackPosition(playbackPositionPercentage);\n          }\n\n          this.setAriaSliderMinMax(player.getMaxTimeShift().toString(), '0');\n        }\n      } else {\n        // Update playback position only in paused state or in the initial startup state where player is neither\n        // paused nor playing. Playback updates are handled in the Timeout below.\n        const isInInitialStartupState = this.config.smoothPlaybackPositionUpdateIntervalMs === SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED\n            || forceUpdate || player.isPaused();\n        const isNeitherPausedNorPlaying = player.isPaused() === player.isPlaying();\n\n        if ((isInInitialStartupState || isNeitherPausedNorPlaying) && !this.isSeeking()) {\n          this.setPlaybackPosition(playbackPositionPercentage);\n        }\n\n        this.setAriaSliderMinMax('0', player.getDuration().toString());\n      }\n\n      if (this.isUiShown) {\n        this.setAriaSliderValues();\n      }\n    };\n\n    // Update seekbar upon these events\n    // init playback position when the player is ready\n    player.on(player.exports.PlayerEvent.Ready, playbackPositionHandler);\n    // update playback position when it changes\n    player.on(player.exports.PlayerEvent.TimeChanged, playbackPositionHandler);\n    // update bufferlevel when buffering is complete\n    player.on(player.exports.PlayerEvent.StallEnded, playbackPositionHandler);\n    // update playback position when a timeshift has finished\n    player.on(player.exports.PlayerEvent.TimeShifted, playbackPositionHandler);\n    // update bufferlevel when a segment has been downloaded\n    player.on(player.exports.PlayerEvent.SegmentRequestFinished, playbackPositionHandler);\n\n    this.configureLivePausedTimeshiftUpdater(player, uimanager, playbackPositionHandler);\n\n    // Seek handling\n    let onPlayerSeek = () => {\n      isPlayerSeeking = true;\n      this.setSeeking(true);\n      scrubbing = false;\n    };\n\n    let onPlayerSeeked = (event: PlayerEventBase = null, forceUpdate: boolean = false ) => {\n      isPlayerSeeking = false;\n      this.setSeeking(false);\n\n      // update playback position when a seek has finished\n      playbackPositionHandler(event, forceUpdate);\n    };\n\n    let restorePlayingState = function () {\n      // Continue playback after seek if player was playing when seek started\n      if (isPlaying) {\n        // use the same issuer here as in the pause on seek\n        player.play('ui-seek');\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.Seek, onPlayerSeek);\n    player.on(player.exports.PlayerEvent.Seeked, onPlayerSeeked);\n    player.on(player.exports.PlayerEvent.TimeShift, onPlayerSeek);\n    player.on(player.exports.PlayerEvent.TimeShifted, onPlayerSeeked);\n\n    let isGroupPlaybackAPIAvailable = (player: PlayerAPI): player is ExtendedPlayerAPI => {\n      return !!(player as ExtendedPlayerAPI).groupPlayback;\n    };\n\n    this.onSeek.subscribe((sender) => {\n      // track seeking status so we can catch events from seek preview seeks\n      this.isUserSeeking = true;\n      // Notify UI manager of started seek\n      uimanager.onSeek.dispatch(sender);\n\n      if (isGroupPlaybackAPIAvailable(player) && player.groupPlayback.hasJoined() && !suspension) {\n        suspension = player.groupPlayback.beginSuspension(GroupPlaybackSuspensionReason.UserIsScrubbing);\n      }\n\n      // Save current playback state before performing the seek\n      if (!isPlayerSeeking) {\n        isPlaying = player.isPlaying();\n\n        // Pause playback while seeking\n        if (isPlaying) {\n          // use a different issuer here, as play/pause on seek is not \"really\" triggerd by the user\n          player.pause('ui-seek');\n        }\n      }\n    });\n\n    this.onSeekPreview.subscribe((sender: SeekBar, args: SeekPreviewEventArgs) => {\n      // Notify UI manager of seek preview\n      uimanager.onSeekPreview.dispatch(sender, args);\n      scrubbing = args.scrubbing;\n    });\n\n    // Set enableSeekPreview if set in the uimanager config\n    if (typeof uimanager.getConfig().enableSeekPreview === 'boolean') {\n      this.config.enableSeekPreview = uimanager.getConfig().enableSeekPreview;\n    }\n\n    // Rate-limited scrubbing seek\n    if (this.config.enableSeekPreview) {\n      this.onSeekPreview.subscribeRateLimited(this.seekWhileScrubbing, 200);\n    }\n\n    this.onSeeked.subscribe((sender, percentage) => {\n      this.isUserSeeking = false;\n\n      // Do the seek\n      this.seek(percentage);\n\n      // Notify UI manager of finished seek\n      uimanager.onSeeked.dispatch(sender);\n\n      // Continue playback after seek if player was playing when seek started\n      restorePlayingState();\n\n      if (isGroupPlaybackAPIAvailable(player) && player.groupPlayback.hasJoined() && suspension) {\n        const proposedPlaybackTime = this.getTargetSeekPosition(percentage);\n        player.groupPlayback.endSuspension(suspension, { proposedPlaybackTime });\n        suspension = undefined;\n      }\n    });\n\n    if (this.hasLabel()) {\n      // Configure a seekbar label that is internal to the seekbar)\n      this.getLabel().configure(player, uimanager);\n    }\n\n    // Hide seekbar for live sources without timeshift\n    let isLive = false;\n    let hasTimeShift = false;\n    let switchVisibility = (isLive: boolean, hasTimeShift: boolean) => {\n      if (isLive && !hasTimeShift) {\n        this.hide();\n      } else {\n        this.show();\n      }\n      playbackPositionHandler(null, true);\n      this.refreshPlaybackPosition();\n    };\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      isLive = args.live;\n      if (isLive && this.smoothPlaybackPositionUpdater != null) {\n        this.smoothPlaybackPositionUpdater.clear();\n        this.seekBarType = SeekBarType.Live;\n      } else {\n        this.seekBarType = SeekBarType.Vod;\n      }\n      switchVisibility(isLive, hasTimeShift);\n    });\n    let timeShiftDetector = new PlayerUtils.TimeShiftAvailabilityDetector(player);\n    timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe((sender, args: TimeShiftAvailabilityChangedArgs) => {\n      hasTimeShift = args.timeShiftAvailable;\n      switchVisibility(isLive, hasTimeShift);\n    });\n    // Initial detection\n    liveStreamDetector.detect();\n    timeShiftDetector.detect();\n\n    // Refresh the playback position when the player resized or the UI is configured. The playback position marker\n    // is positioned absolutely and must therefore be updated when the size of the seekbar changes.\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      this.refreshPlaybackPosition();\n    });\n    // Additionally, when this code is called, the seekbar is not part of the UI yet and therefore does not have a size,\n    // resulting in a wrong initial position of the marker. Refreshing it once the UI is configured solved this issue.\n    uimanager.onConfigured.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n    // It can also happen when a new source is loaded\n    player.on(player.exports.PlayerEvent.SourceLoaded, () => {\n      this.refreshPlaybackPosition();\n    });\n    // Add markers when a source is loaded or update when a marker is added or removed\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      playbackPositionHandler();\n    });\n\n    // Set the snappingRange if set in the uimanager config\n    if (typeof uimanager.getConfig().seekbarSnappingRange === 'number') {\n      this.config.snappingRange = uimanager.getConfig().seekbarSnappingRange;\n    }\n\n    // Initialize seekbar\n    playbackPositionHandler(); // Set the playback position\n    this.setBufferPosition(0);\n    this.setSeekPosition(0);\n    if (this.config.smoothPlaybackPositionUpdateIntervalMs !== SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED) {\n      this.configureSmoothPlaybackPositionUpdater(player, uimanager);\n    }\n\n    // Initialize markers\n    this.initializeTimelineMarkers(player, uimanager);\n  }\n\n  private initializeTimelineMarkers(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    const timelineMarkerConfig = {\n      cssPrefix: this.config.cssPrefix,\n      snappingRange: this.config.snappingRange,\n    };\n    this.timelineMarkersHandler = new TimelineMarkersHandler(timelineMarkerConfig, () => this.seekBar.width(), this.seekBarMarkersContainer);\n    this.timelineMarkersHandler.initialize(player, uimanager);\n  }\n\n  private seekWhileScrubbing = (sender: SeekBar, args: SeekPreviewEventArgs) => {\n    if (args.scrubbing) {\n      this.seek(args.position);\n    }\n  };\n\n  private getTargetSeekPosition = (percentage: number) => {\n    let target: number;\n    if (this.player.isLive()) {\n      const maxTimeShift = this.player.getMaxTimeShift();\n      target = maxTimeShift - (maxTimeShift * (percentage / 100));\n    } else {\n      const seekableRangeStart = PlayerUtils.getSeekableRangeStart(this.player, 0);\n      const relativeSeekTarget = this.player.getDuration() * (percentage / 100);\n      target = relativeSeekTarget + seekableRangeStart;\n    }\n\n    return target;\n  }\n\n  private seek = (percentage: number) => {\n    const targetPlaybackPosition = this.getTargetSeekPosition(percentage);\n    if (this.player.isLive()) {\n      this.player.timeShift(targetPlaybackPosition, 'ui');\n    } else {\n      this.player.seek(targetPlaybackPosition, 'ui');\n    }\n  };\n\n  /**\n   * Update seekbar while a live stream with DVR window is paused.\n   * The playback position stays still and the position indicator visually moves towards the back.\n   */\n  private configureLivePausedTimeshiftUpdater(\n    player: PlayerAPI,\n    uimanager: UIInstanceManager,\n    playbackPositionHandler: () => void,\n  ): void {\n    // Regularly update the playback position while the timeout is active\n    this.pausedTimeshiftUpdater = new Timeout(1000, playbackPositionHandler, true);\n\n    // Start updater when a live stream with timeshift window is paused\n    player.on(player.exports.PlayerEvent.Paused, () => {\n      if (player.isLive() && player.getMaxTimeShift() < 0) {\n        this.pausedTimeshiftUpdater.start();\n      }\n    });\n\n    // Stop updater when playback continues (no matter if the updater was started before)\n    player.on(player.exports.PlayerEvent.Play, () => this.pausedTimeshiftUpdater.clear());\n  }\n\n  private configureSmoothPlaybackPositionUpdater(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    /*\n     * Playback position update\n     *\n     * We do not update the position directly from the TimeChanged event, because it arrives very jittery and\n     * results in a jittery position indicator since the CSS transition time is statically set.\n     * To work around this issue, we maintain a local playback position that is updated in a stable regular interval\n     * and kept in sync with the player.\n     */\n    let currentTimeSeekBar = 0;\n    let currentTimePlayer = 0;\n    let updateIntervalMs = 50;\n    let currentTimeUpdateDeltaSecs = updateIntervalMs / 1000;\n\n    this.smoothPlaybackPositionUpdater = new Timeout(updateIntervalMs, () => {\n      if (this.isSeeking()) {\n        return;\n      }\n\n      currentTimeSeekBar += currentTimeUpdateDeltaSecs;\n\n      try {\n        currentTimePlayer = this.getRelativeCurrentTime();\n      } catch (error) {\n        // Detect if the player has been destroyed and stop updating if so\n        if (error instanceof player.exports.PlayerAPINotAvailableError) {\n          this.smoothPlaybackPositionUpdater.clear();\n        }\n\n        // If the current time cannot be read it makes no sense to continue\n        return;\n      }\n\n      // Sync currentTime of seekbar to player\n      let currentTimeDelta = currentTimeSeekBar - currentTimePlayer;\n      // If the delta is larger that 2 secs, directly jump the seekbar to the\n      // player time instead of smoothly fast forwarding/rewinding.\n      if (Math.abs(currentTimeDelta) > 2) {\n        currentTimeSeekBar = currentTimePlayer;\n      }\n      // If currentTimeDelta is negative and below the adjustment threshold,\n      // the player is ahead of the seekbar and we 'fast forward' the seekbar\n      else if (currentTimeDelta <= -currentTimeUpdateDeltaSecs) {\n        currentTimeSeekBar += currentTimeUpdateDeltaSecs;\n      }\n      // If currentTimeDelta is positive and above the adjustment threshold,\n      // the player is behind the seekbar and we 'rewind' the seekbar\n      else if (currentTimeDelta >= currentTimeUpdateDeltaSecs) {\n        currentTimeSeekBar -= currentTimeUpdateDeltaSecs;\n      }\n\n      let playbackPositionPercentage = 100 / player.getDuration() * currentTimeSeekBar;\n      this.setPlaybackPosition(playbackPositionPercentage);\n    }, true);\n\n    let startSmoothPlaybackPositionUpdater = () => {\n      if (!player.isLive()) {\n        currentTimeSeekBar = this.getRelativeCurrentTime();\n        this.smoothPlaybackPositionUpdater.start();\n      }\n    };\n\n    let stopSmoothPlaybackPositionUpdater = () => {\n      this.smoothPlaybackPositionUpdater.clear();\n    };\n\n    player.on(player.exports.PlayerEvent.Play, startSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Playing, startSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Paused, stopSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.PlaybackFinished, stopSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Seeked, () => {\n      currentTimeSeekBar = this.getRelativeCurrentTime();\n    });\n    player.on(player.exports.PlayerEvent.SourceUnloaded, stopSmoothPlaybackPositionUpdater);\n\n    if (player.isPlaying()) {\n      startSmoothPlaybackPositionUpdater();\n    }\n  }\n\n  private getRelativeCurrentTime(): number {\n    return PlayerUtils.getCurrentTimeRelativeToSeekableRange(this.player);\n  }\n\n  release(): void {\n    super.release();\n\n    if (this.smoothPlaybackPositionUpdater) { // object must not necessarily exist, e.g. in volume slider subclass\n      this.smoothPlaybackPositionUpdater.clear();\n    }\n\n    if (this.pausedTimeshiftUpdater) {\n      this.pausedTimeshiftUpdater.clear();\n    }\n\n    if (this.config.enableSeekPreview) {\n      this.onSeekPreview.unsubscribe(this.seekWhileScrubbing);\n    }\n  }\n\n  protected toDomElement(): DOM {\n    if (this.config.vertical) {\n      this.config.cssClasses.push('vertical');\n    }\n\n    let seekBarContainer = new DOM('div', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'role': 'slider',\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\n      'tabindex': this.config.tabIndex.toString(),\n    });\n\n    let seekBar = new DOM('div', {\n      'class': this.prefixCss('seekbar'),\n    });\n    this.seekBar = seekBar;\n\n    // Indicator that shows the buffer fill level\n    let seekBarBufferLevel = new DOM('div', {\n      'class': this.prefixCss('seekbar-bufferlevel'),\n    });\n    this.seekBarBufferPosition = seekBarBufferLevel;\n\n    // Indicator that shows the current playback position\n    let seekBarPlaybackPosition = new DOM('div', {\n      'class': this.prefixCss('seekbar-playbackposition'),\n    });\n    this.seekBarPlaybackPosition = seekBarPlaybackPosition;\n\n    // A marker of the current playback position, e.g. a dot or line\n    let seekBarPlaybackPositionMarker = new DOM('div', {\n      'class': this.prefixCss('seekbar-playbackposition-marker'),\n    });\n    this.seekBarPlaybackPositionMarker = seekBarPlaybackPositionMarker;\n\n    // Indicator that show where a seek will go to\n    let seekBarSeekPosition = new DOM('div', {\n      'class': this.prefixCss('seekbar-seekposition'),\n    });\n    this.seekBarSeekPosition = seekBarSeekPosition;\n\n    // Indicator that shows the full seekbar\n    let seekBarBackdrop = new DOM('div', {\n      'class': this.prefixCss('seekbar-backdrop'),\n    });\n    this.seekBarBackdrop = seekBarBackdrop;\n\n    let seekBarChapterMarkersContainer = new DOM('div', {\n      'class': this.prefixCss('seekbar-markers'),\n    });\n    this.seekBarMarkersContainer = seekBarChapterMarkersContainer;\n\n    seekBar.append(this.seekBarBackdrop, this.seekBarBufferPosition, this.seekBarSeekPosition,\n      this.seekBarPlaybackPosition, this.seekBarMarkersContainer, this.seekBarPlaybackPositionMarker);\n\n    let seeking = false;\n\n    // Define handler functions so we can attach/remove them later\n    let mouseTouchMoveHandler = (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n      // Avoid propagation to VR handler\n      if (this.player.vr != null) {\n        e.stopPropagation();\n      }\n\n      let targetPercentage = 100 * this.getOffset(e);\n      this.setSeekPosition(targetPercentage);\n      this.setPlaybackPosition(targetPercentage);\n      this.onSeekPreviewEvent(targetPercentage, true);\n    };\n\n    let mouseTouchUpHandler = (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      // Remove handlers, seek operation is finished\n      new DOM(document).off('touchmove mousemove', mouseTouchMoveHandler);\n      new DOM(document).off('touchend mouseup', mouseTouchUpHandler);\n\n      let targetPercentage = 100 * this.getOffset(e);\n      let snappedChapter = this.timelineMarkersHandler && this.timelineMarkersHandler.getMarkerAtPosition(targetPercentage);\n\n      this.setSeeking(false);\n      seeking = false;\n\n      // Fire seeked event\n      this.onSeekedEvent(snappedChapter ? snappedChapter.position : targetPercentage);\n    };\n\n    // A seek always start with a touchstart or mousedown directly on the seekbar.\n    // To track a mouse seek also outside the seekbar (for touch events this works automatically),\n    // so the user does not need to take care that the mouse always stays on the seekbar, we attach the mousemove\n    // and mouseup handlers to the whole document. A seek is triggered when the user lifts the mouse key.\n    // A seek mouse gesture is thus basically a click with a long time frame between down and up events.\n    seekBar.on('touchstart mousedown', (e: MouseEvent | TouchEvent) => {\n      let isTouchEvent = BrowserUtils.isTouchSupported && this.isTouchEvent(e);\n\n      // Prevent selection of DOM elements (also prevents mousedown if current event is touchstart)\n      e.preventDefault();\n      // Avoid propagation to VR handler\n      if (this.player.vr != null) {\n        e.stopPropagation();\n      }\n\n      this.setSeeking(true); // Set seeking class on DOM element\n      seeking = true; // Set seek tracking flag\n\n      // Fire seeked event\n      this.onSeekEvent();\n\n      // Add handler to track the seek operation over the whole document\n      new DOM(document).on(isTouchEvent ? 'touchmove' : 'mousemove', mouseTouchMoveHandler);\n      new DOM(document).on(isTouchEvent ? 'touchend' : 'mouseup', mouseTouchUpHandler);\n    });\n\n    // Display seek target indicator when mouse hovers or finger slides over seekbar\n    seekBar.on('touchmove mousemove', (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      if (seeking) {\n        mouseTouchMoveHandler(e);\n      }\n\n      let position = 100 * this.getOffset(e);\n      this.setSeekPosition(position);\n\n      this.onSeekPreviewEvent(position, false);\n\n      if (this.hasLabel() && this.getLabel().isHidden()) {\n        this.getLabel().show();\n      }\n    });\n\n    // Hide seek target indicator when mouse or finger leaves seekbar\n    seekBar.on('touchend mouseleave', (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      this.setSeekPosition(0);\n\n      if (this.hasLabel()) {\n        this.getLabel().hide();\n      }\n    });\n\n    seekBarContainer.append(seekBar);\n\n    if (this.label) {\n      seekBarContainer.append(this.label.getDomElement());\n    }\n\n    return seekBarContainer;\n  }\n\n  /**\n   * Gets the horizontal offset of a mouse/touch event point from the left edge of the seek bar.\n   * @param eventPageX the pageX coordinate of an event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1], where 0 is the left edge and 1 is the right edge\n   */\n  private getHorizontalOffset(eventPageX: number): number {\n    let elementOffsetPx = this.seekBar.offset().left;\n    let widthPx = this.seekBar.width();\n    let offsetPx = eventPageX - elementOffsetPx;\n    let offset = 1 / widthPx * offsetPx;\n\n    return this.sanitizeOffset(offset);\n  }\n\n  /**\n   * Gets the vertical offset of a mouse/touch event point from the bottom edge of the seek bar.\n   * @param eventPageY the pageX coordinate of an event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1], where 0 is the bottom edge and 1 is the top edge\n   */\n  private getVerticalOffset(eventPageY: number): number {\n    let elementOffsetPx = this.seekBar.offset().top;\n    let widthPx = this.seekBar.height();\n    let offsetPx = eventPageY - elementOffsetPx;\n    let offset = 1 / widthPx * offsetPx;\n\n    return 1 - this.sanitizeOffset(offset);\n  }\n\n  /**\n   * Gets the mouse or touch event offset for the current configuration (horizontal or vertical).\n   * @param e the event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1]\n   * @see #getHorizontalOffset\n   * @see #getVerticalOffset\n   */\n  private getOffset(e: MouseEvent | TouchEvent): number {\n    if (BrowserUtils.isTouchSupported && this.isTouchEvent(e)) {\n      if (this.config.vertical) {\n        return this.getVerticalOffset(e.type === 'touchend' ? e.changedTouches[0].pageY : e.touches[0].pageY);\n      } else {\n        return this.getHorizontalOffset(e.type === 'touchend' ? e.changedTouches[0].pageX : e.touches[0].pageX);\n      }\n    }\n    else if (e instanceof MouseEvent) {\n      if (this.config.vertical) {\n        return this.getVerticalOffset(e.pageY);\n      } else {\n        return this.getHorizontalOffset(e.pageX);\n      }\n    }\n    else {\n      if (console) {\n        console.warn('invalid event');\n      }\n      return 0;\n    }\n  }\n\n  /**\n   * Sanitizes the mouse offset to the range of [0, 1].\n   *\n   * When tracking the mouse outside the seek bar, the offset can be outside the desired range and this method\n   * limits it to the desired range. E.g. a mouse event left of the left edge of a seek bar yields an offset below\n   * zero, but to display the seek target on the seek bar, we need to limit it to zero.\n   *\n   * @param offset the offset to sanitize\n   * @returns {number} the sanitized offset.\n   */\n  private sanitizeOffset(offset: number) {\n    // Since we track mouse moves over the whole document, the target can be outside the seek range,\n    // and we need to limit it to the [0, 1] range.\n    if (offset < 0) {\n      offset = 0;\n    } else if (offset > 1) {\n      offset = 1;\n    }\n\n    return offset;\n  }\n\n  /**\n   * Sets the position of the playback position indicator.\n   * @param percent a number between 0 and 100 as returned by the player\n   */\n  setPlaybackPosition(percent: number) {\n    this.playbackPositionPercentage = percent;\n\n    // Set position of the bar\n    this.setPosition(this.seekBarPlaybackPosition, percent);\n\n    // Set position of the marker\n    let totalSize = (this.config.vertical ? (this.seekBar.height() - this.seekBarPlaybackPositionMarker.height()) : this.seekBar.width());\n    let px = (totalSize) / 100 * percent;\n    if (this.config.vertical) {\n      px = this.seekBar.height() - px - this.seekBarPlaybackPositionMarker.height();\n    }\n\n    let style = this.config.vertical ?\n      // -ms-transform required for IE9\n      // -webkit-transform required for Android 4.4 WebView\n      {\n        'transform': 'translateY(' + px + 'px)',\n        '-ms-transform': 'translateY(' + px + 'px)',\n        '-webkit-transform': 'translateY(' + px + 'px)',\n      } :\n      {\n        'transform': 'translateX(' + px + 'px)',\n        '-ms-transform': 'translateX(' + px + 'px)',\n        '-webkit-transform': 'translateX(' + px + 'px)',\n      };\n    this.seekBarPlaybackPositionMarker.css(style);\n  }\n\n  /**\n   * Refreshes the playback position. Can be used by subclasses to refresh the position when\n   * the size of the component changes.\n   */\n  protected refreshPlaybackPosition() {\n    this.setPlaybackPosition(this.playbackPositionPercentage);\n  }\n\n  /**\n   * Sets the position until which media is buffered.\n   * @param percent a number between 0 and 100\n   */\n  setBufferPosition(percent: number) {\n    this.setPosition(this.seekBarBufferPosition, percent);\n  }\n\n  /**\n   * Sets the position where a seek, if executed, would jump to.\n   * @param percent a number between 0 and 100\n   */\n  setSeekPosition(percent: number) {\n    this.setPosition(this.seekBarSeekPosition, percent);\n  }\n\n  /**\n   * Set the actual position (width or height) of a DOM element that represent a bar in the seek bar.\n   * @param element the element to set the position for\n   * @param percent a number between 0 and 100\n   */\n  private setPosition(element: DOM, percent: number) {\n    let scale = percent / 100;\n\n    // When the scale is exactly 1 or very near 1 (and the browser internally rounds it to 1), browsers seem to render\n    // the elements differently and the height gets slightly off, leading to mismatching heights when e.g. the buffer\n    // level bar has a width of 1 and the playback position bar has a width < 1. A jittering buffer level around 1\n    // leads to an even worse flickering effect.\n    // Various changes in CSS styling and DOM hierarchy did not solve the issue so the workaround is to avoid a scale\n    // of exactly 1.\n    if (scale >= 0.99999 && scale <= 1.00001) {\n      scale = 0.99999;\n    }\n\n    let style = this.config.vertical ?\n      // -ms-transform required for IE9\n      // -webkit-transform required for Android 4.4 WebView\n      {\n        'transform': 'scaleY(' + scale + ')',\n        '-ms-transform': 'scaleY(' + scale + ')',\n        '-webkit-transform': 'scaleY(' + scale + ')',\n      } :\n      {\n        'transform': 'scaleX(' + scale + ')',\n        '-ms-transform': 'scaleX(' + scale + ')',\n        '-webkit-transform': 'scaleX(' + scale + ')',\n      };\n    element.css(style);\n  }\n\n  /**\n   * Puts the seek bar into or out of seeking state by adding/removing a class to the DOM element. This can be used\n   * to adjust the styling while seeking.\n   *\n   * @param seeking should be true when entering seek state, false when exiting the seek state\n   */\n  setSeeking(seeking: boolean) {\n    if (seeking) {\n      this.getDomElement().addClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n    } else {\n      this.getDomElement().removeClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n    }\n  }\n\n  /**\n   * Checks if the seek bar is currently in the seek state.\n   * @returns {boolean} true if in seek state, else false\n   */\n  isSeeking(): boolean {\n    return this.getDomElement().hasClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n  }\n\n  /**\n   * Checks if the seek bar has a {@link SeekBarLabel}.\n   * @returns {boolean} true if the seek bar has a label, else false\n   */\n  hasLabel(): boolean {\n    return this.label != null;\n  }\n\n  /**\n   * Gets the label of this seek bar.\n   * @returns {SeekBarLabel} the label if this seek bar has a label, else null\n   */\n  getLabel(): SeekBarLabel | null {\n    return this.label;\n  }\n\n  protected onSeekEvent() {\n    this.seekBarEvents.onSeek.dispatch(this);\n  }\n\n  protected onSeekPreviewEvent(percentage: number, scrubbing: boolean) {\n    let snappedMarker = this.timelineMarkersHandler && this.timelineMarkersHandler.getMarkerAtPosition(percentage);\n\n    let seekPositionPercentage = percentage;\n\n    if (snappedMarker) {\n      if (snappedMarker.duration > 0) {\n        if (percentage < snappedMarker.position) {\n          // Snap the position to the start of the interval if the seek is within the left snap margin\n          // We know that we are within a snap margin when we are outside the marker interval but still\n          // have a snappedMarker\n          seekPositionPercentage = snappedMarker.position;\n        } else if (percentage > snappedMarker.position + snappedMarker.duration) {\n          // Snap the position to the end of the interval if the seek is within the right snap margin\n          seekPositionPercentage = snappedMarker.position + snappedMarker.duration;\n        }\n      } else {\n        // Position markers always snap to their marker position\n        seekPositionPercentage = snappedMarker.position;\n      }\n    }\n\n    if (this.label) {\n      this.label.getDomElement().css({\n        'left': seekPositionPercentage + '%',\n      });\n    }\n\n    this.seekBarEvents.onSeekPreview.dispatch(this, {\n      scrubbing: scrubbing,\n      position: seekPositionPercentage,\n      marker: snappedMarker,\n    });\n  }\n\n  protected onSeekedEvent(percentage: number) {\n    this.seekBarEvents.onSeeked.dispatch(this, percentage);\n  }\n\n  /**\n   * Gets the event that is fired when a scrubbing seek operation is started.\n   * @returns {Event<SeekBar, NoArgs>}\n   */\n  get onSeek(): Event<SeekBar, NoArgs> {\n    return this.seekBarEvents.onSeek.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired during a scrubbing seek (to indicate that the seek preview, i.e. the video frame,\n   * should be updated), or during a normal seek preview when the seek bar is hovered (and the seek target,\n   * i.e. the seek bar label, should be updated).\n   * @returns {Event<SeekBar, SeekPreviewEventArgs>}\n   */\n  get onSeekPreview(): Event<SeekBar, SeekPreviewEventArgs> {\n    return this.seekBarEvents.onSeekPreview.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when a scrubbing seek has finished or when a direct seek is issued.\n   * @returns {Event<SeekBar, number>}\n   */\n  get onSeeked(): Event<SeekBar, number> {\n    return this.seekBarEvents.onSeeked.getEvent();\n  }\n\n\n  protected onShowEvent(): void {\n    super.onShowEvent();\n\n    // Refresh the position of the playback position when the seek bar becomes visible. To correctly set the position,\n    // the DOM element must be fully initialized an have its size calculated, because the position is set as an absolute\n    // value calculated from the size. This required size is not known when it is hidden.\n    // For such cases, we refresh the position here in onShow because here it is guaranteed that the component knows\n    // its size and can set the position correctly.\n    this.refreshPlaybackPosition();\n  }\n\n /**\n   * Checks if TouchEvent is supported.\n   * @returns {boolean} true if TouchEvent not undefined, else false\n   */\n  isTouchEvent(e: UIEvent): e is TouchEvent {\n    return window.TouchEvent && e instanceof TouchEvent;\n  }\n}\n","import {PlayerAPI} from 'bitmovin-player';\n\nexport function getMinBufferLevel(player: PlayerAPI): number {\n\n    const playerDuration = player.getDuration();\n\n    const videoBufferLength = player.getVideoBufferLength();\n    const audioBufferLength = player.getAudioBufferLength();\n    // Calculate the buffer length which is the smaller length of the audio and video buffers. If one of these\n    // buffers is not available, we set it's value to MAX_VALUE to make sure that the other real value is taken\n    // as the buffer length.\n    let bufferLength = Math.min(\n        videoBufferLength != null ? videoBufferLength : Number.MAX_VALUE,\n        audioBufferLength != null ? audioBufferLength : Number.MAX_VALUE);\n    // If both buffer lengths are missing, we set the buffer length to zero\n    if (bufferLength === Number.MAX_VALUE) {\n        bufferLength = 0;\n    }\n\n    return 100 / playerDuration * bufferLength;\n}\n","import { UIUtils } from '../uiutils';\nimport { DOM } from '../dom';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { VolumeController } from '../volumecontroller';\n\nexport enum SeekBarType {\n  Vod,\n  Live,\n  Volume,\n}\n\ninterface Range {\n  min: number;\n  max: number;\n}\n\ninterface KeyStepIncrementsConfig {\n  leftRight: number;\n  upDown: number;\n}\n\nconst coerceValueIntoRange = (\n  value: number,\n  range: Range,\n  cb: (value: number) => void,\n) => {\n  if (value < range.min) {\n    cb(range.min);\n  } else if (value > range.max) {\n    cb(range.max);\n  } else {\n    cb(value);\n  }\n};\n\nexport class SeekBarController {\n  protected keyStepIncrements: KeyStepIncrementsConfig;\n  protected player: PlayerAPI;\n  protected volumeController: VolumeController;\n\n  constructor(\n    keyStepIncrements: KeyStepIncrementsConfig,\n    player: PlayerAPI,\n    volumeController: VolumeController,\n  ) {\n    this.keyStepIncrements = keyStepIncrements;\n    this.player = player;\n    this.volumeController = volumeController;\n  }\n\n  protected arrowKeyControls(\n    currentValue: number,\n    range: Range,\n    valueUpdate: (value: number) => void,\n  ) {\n    const controlValue = Math.floor(currentValue);\n\n    return {\n      left: () => coerceValueIntoRange(controlValue - this.keyStepIncrements.leftRight, range, valueUpdate),\n      right: () => coerceValueIntoRange(controlValue + this.keyStepIncrements.leftRight, range, valueUpdate),\n      up: () => coerceValueIntoRange(controlValue + this.keyStepIncrements.upDown, range, valueUpdate),\n      down: () => coerceValueIntoRange(controlValue - this.keyStepIncrements.upDown, range, valueUpdate),\n      home: () => coerceValueIntoRange(range.min, range, valueUpdate),\n      end: () => coerceValueIntoRange(range.max, range, valueUpdate),\n    };\n  }\n\n  protected seekBarControls(type: SeekBarType) {\n    if (type === SeekBarType.Live) {\n      return this.arrowKeyControls(this.player.getTimeShift(), { min: this.player.getMaxTimeShift(), max: 0 }, this.player.timeShift);\n    } else if (type === SeekBarType.Vod) {\n      return this.arrowKeyControls(this.player.getCurrentTime(), { min: 0, max: this.player.getDuration() }, this.player.seek);\n    } else if (type === SeekBarType.Volume && this.volumeController != null) {\n      const volumeTransition = this.volumeController.startTransition();\n      return this.arrowKeyControls(this.player.getVolume(), { min: 0, max: 100 }, volumeTransition.finish.bind(volumeTransition));\n    }\n  }\n\n  public setSeekBarControls(domElement: DOM, type: () => SeekBarType) {\n    domElement.on('keydown', (e: KeyboardEvent) => {\n      const controls = this.seekBarControls(type());\n      switch (e.keyCode) {\n        case UIUtils.KeyCode.LeftArrow: {\n          controls.left();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.RightArrow: {\n          controls.right();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.UpArrow: {\n          controls.up();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.DownArrow: {\n          controls.down();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.Home: {\n          controls.home();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.End: {\n          controls.end();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.Space: {\n          this.player.isPlaying() ? this.player.pause() : this.player.play();\n          e.preventDefault();\n          break;\n        }\n      }\n    });\n  }\n}","import {Container, ContainerConfig} from './container';\nimport {Label, LabelConfig} from './label';\nimport {Component, ComponentConfig} from './component';\nimport { UIInstanceManager } from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport {ImageLoader} from '../imageloader';\nimport {CssProperties} from '../dom';\nimport { PlayerAPI, Thumbnail } from 'bitmovin-player';\nimport { SeekBar, SeekPreviewEventArgs } from './seekbar';\nimport { PlayerUtils } from '../playerutils';\n\n/**\n * Configuration interface for a {@link SeekBarLabel}.\n */\nexport interface SeekBarLabelConfig extends ContainerConfig {\n  // nothing yet\n}\n\n/**\n * A label for a {@link SeekBar} that can display the seek target time, a thumbnail, and title (e.g. chapter title).\n */\nexport class SeekBarLabel extends Container<SeekBarLabelConfig> {\n\n  private timeLabel: Label<LabelConfig>;\n  private titleLabel: Label<LabelConfig>;\n  private thumbnail: Component<ComponentConfig>;\n\n  private thumbnailImageLoader: ImageLoader;\n\n  private timeFormat: string;\n\n  private appliedMarkerCssClasses: string[] = [];\n  private player: PlayerAPI;\n  private uiManager: UIInstanceManager;\n\n  constructor(config: SeekBarLabelConfig = {}) {\n    super(config);\n\n    this.timeLabel = new Label({ cssClasses: ['seekbar-label-time'] });\n    this.titleLabel = new Label({ cssClasses: ['seekbar-label-title'] });\n    this.thumbnail = new Component({ cssClasses: ['seekbar-thumbnail'], role: 'img' });\n    this.thumbnailImageLoader = new ImageLoader();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-seekbar-label',\n      components: [new Container({\n        components: [\n          this.thumbnail,\n          new Container({\n            components: [this.titleLabel, this.timeLabel],\n            cssClass: 'seekbar-label-metadata',\n          })],\n        cssClass: 'seekbar-label-inner',\n      })],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.player = player;\n    this.uiManager = uimanager;\n    uimanager.onSeekPreview.subscribeRateLimited(this.handleSeekPreview, 100);\n\n    let init = () => {\n      // Set time format depending on source duration\n      this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?\n        StringUtils.FORMAT_HHMMSS : StringUtils.FORMAT_MMSS;\n      // Set initial state of title and thumbnail to handle sourceLoaded when switching to a live-stream\n      this.setTitleText(null);\n      this.setThumbnail(null);\n    };\n\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n    init();\n  }\n\n  private handleSeekPreview = (sender: SeekBar, args: SeekPreviewEventArgs) => {\n    if (this.player.isLive()) {\n      let maxTimeShift = this.player.getMaxTimeShift();\n      let timeShiftPreview = maxTimeShift - maxTimeShift * (args.position / 100);\n\n      this.setTime(timeShiftPreview);\n\n      // In case of a live stream the player expects the time passed into the getThumbnail as a wallClockTime and not\n      // as a relative timeShift value.\n      const convertTimeShiftPreviewToWallClockTime = (targetTimeShift: number): number => {\n        const currentTimeShift = this.player.getTimeShift();\n        const currentTime = this.player.getCurrentTime();\n\n        const wallClockTimeOfLiveEdge = currentTime - currentTimeShift;\n        return wallClockTimeOfLiveEdge + targetTimeShift;\n      };\n\n      const wallClockTime = convertTimeShiftPreviewToWallClockTime(timeShiftPreview);\n      this.setThumbnail(this.player.getThumbnail(wallClockTime));\n\n    } else {\n      let time = this.player.getDuration() * (args.position / 100);\n      this.setTime(time);\n\n      const seekableRangeStart = PlayerUtils.getSeekableRangeStart(this.player, 0);\n      const absoluteSeekTarget = time + seekableRangeStart;\n      this.setThumbnail(this.player.getThumbnail(absoluteSeekTarget));\n    }\n\n    if (args.marker) {\n      this.setTitleText(args.marker.marker.title);\n    } else {\n      this.setTitleText(null);\n    }\n\n    // Remove CSS classes from previous marker\n    if (this.appliedMarkerCssClasses.length > 0) {\n      this.getDomElement().removeClass(this.appliedMarkerCssClasses.join(' '));\n      this.appliedMarkerCssClasses = [];\n    }\n\n    // Add CSS classes of current marker\n    if (args.marker) {\n      const cssClasses = (args.marker.marker.cssClasses || []).map(cssClass => this.prefixCss(cssClass));\n      this.getDomElement().addClass(cssClasses.join(' '));\n      this.appliedMarkerCssClasses = cssClasses;\n    }\n  };\n\n  /**\n   * Sets arbitrary text on the label.\n   * @param text the text to show on the label\n   */\n  setText(text: string) {\n    this.timeLabel.setText(text);\n  }\n\n  /**\n   * Sets a time to be displayed on the label.\n   * @param seconds the time in seconds to display on the label\n   */\n  setTime(seconds: number) {\n    this.setText(StringUtils.secondsToTime(seconds, this.timeFormat));\n  }\n\n  /**\n   * Sets the text on the title label.\n   * @param text the text to show on the label\n   */\n  setTitleText(text = '') {\n    this.titleLabel.setText(text);\n  }\n\n  /**\n   * Sets or removes a thumbnail on the label.\n   * @param thumbnail the thumbnail to display on the label or null to remove a displayed thumbnail\n   */\n  setThumbnail(thumbnail: Thumbnail = null) {\n    let thumbnailElement = this.thumbnail.getDomElement();\n\n    if (thumbnail == null) {\n      thumbnailElement.css({\n        'background-image': null,\n        'display': null,\n        'width': null,\n        'height': null,\n      });\n    }\n    else {\n      // We use the thumbnail image loader to make sure the thumbnail is loaded and it's size is known before be can\n      // calculate the CSS properties and set them on the element.\n      this.thumbnailImageLoader.load(thumbnail.url, (url, width, height) => {\n        // can be checked like that because x/y/w/h are either all present or none\n        // https://www.w3.org/TR/media-frags/#naming-space\n        if (thumbnail.x !== undefined) {\n          thumbnailElement.css(this.thumbnailCssSprite(thumbnail, width, height));\n        } else {\n          thumbnailElement.css(this.thumbnailCssSingleImage(thumbnail, width, height));\n        }\n      });\n    }\n  }\n\n  private thumbnailCssSprite(thumbnail: Thumbnail, width: number, height: number): CssProperties {\n    let thumbnailCountX = width / thumbnail.width;\n    let thumbnailCountY = height / thumbnail.height;\n\n    let thumbnailIndexX = thumbnail.x / thumbnail.width;\n    let thumbnailIndexY = thumbnail.y / thumbnail.height;\n\n    let sizeX = 100 * thumbnailCountX;\n    let sizeY = 100 * thumbnailCountY;\n\n    let offsetX = 100 * thumbnailIndexX;\n    let offsetY = 100 * thumbnailIndexY;\n\n    let aspectRatio = 1 / thumbnail.width * thumbnail.height;\n\n    // The thumbnail size is set by setting the CSS 'width' and 'padding-bottom' properties. 'padding-bottom' is\n    // used because it is relative to the width and can be used to set the aspect ratio of the thumbnail.\n    // A default value for width is set in the stylesheet and can be overwritten from there or anywhere else.\n    return {\n      'display': 'inherit',\n      'background-image': `url(${thumbnail.url})`,\n      'padding-bottom': `${100 * aspectRatio}%`,\n      'background-size': `${sizeX}% ${sizeY}%`,\n      'background-position': `-${offsetX}% -${offsetY}%`,\n    };\n  }\n\n  private thumbnailCssSingleImage(thumbnail: Thumbnail, width: number, height: number): CssProperties {\n    let aspectRatio = 1 / width * height;\n\n    return {\n      'display': 'inherit',\n      'background-image': `url(${thumbnail.url})`,\n      'padding-bottom': `${100 * aspectRatio}%`,\n      'background-size': `100% 100%`,\n      'background-position': `0 0`,\n    };\n  }\n\n  release(): void {\n    super.release();\n\n    this.uiManager.onSeekPreview.unsubscribe(this.handleSeekPreview);\n  }\n}\n","import {ListSelector, ListSelectorConfig} from './listselector';\nimport {DOM} from '../dom';\nimport { i18n, LocalizableText } from '../localization/i18n';\n\n/**\n * A simple select box providing the possibility to select a single item out of a list of available items.\n *\n * DOM example:\n * <code>\n *     <select class='ui-selectbox'>\n *         <option value='key'>label</option>\n *         ...\n *     </select>\n * </code>\n */\n\nexport class SelectBox extends ListSelector<ListSelectorConfig> {\n\n  private selectElement: DOM;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-selectbox',\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let selectElement = new DOM('select', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\n    });\n\n    this.selectElement = selectElement;\n    this.updateDomItems();\n\n    selectElement.on('change', () => {\n      let value = selectElement.val();\n      this.onItemSelectedEvent(value, false);\n    });\n\n    return selectElement;\n  }\n\n  protected updateDomItems(selectedValue: string = null) {\n    // Delete all children\n    this.selectElement.empty();\n\n    // Add updated children\n    for (let item of this.items) {\n      let optionElement = new DOM('option', {\n        'value': String(item.key),\n      }).html(i18n.performLocalization(item.label));\n\n      if (item.key === String(selectedValue)) { // convert selectedValue to string to catch 'null'/null case\n        optionElement.attr('selected', 'selected');\n      }\n\n      this.selectElement.append(optionElement);\n    }\n  }\n\n  protected onItemAddedEvent(value: string) {\n    super.onItemAddedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemRemovedEvent(value: string) {\n    super.onItemRemovedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemSelectedEvent(value: string, updateDomItems: boolean = true) {\n    super.onItemSelectedEvent(value);\n    if (updateDomItems) {\n      this.updateDomItems(value);\n    }\n  }\n}\n","import { Container, ContainerConfig } from './container';\nimport { SelectBox } from './selectbox';\nimport { UIInstanceManager } from '../uimanager';\nimport { Timeout } from '../timeout';\nimport { Event, EventDispatcher, NoArgs } from '../eventdispatcher';\nimport { SettingsPanelPage } from './settingspanelpage';\nimport { SettingsPanelItem } from './settingspanelitem';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { Component, ComponentConfig } from './component';\n\n/**\n * Configuration interface for a {@link SettingsPanel}.\n */\nexport interface SettingsPanelConfig extends ContainerConfig {\n  /**\n   * The delay in milliseconds after which the settings panel will be hidden when there is no user interaction.\n   * Set to -1 to disable automatic hiding.\n   * Default: 3 seconds (3000)\n   */\n  hideDelay?: number;\n\n  /**\n   * Flag to specify if there should be an animation when switching SettingsPanelPages.\n   * Default: true\n   */\n  pageTransitionAnimation?: boolean;\n}\n\nenum NavigationDirection {\n  Forwards,\n  Backwards,\n}\n\n/**\n * A panel containing a list of {@link SettingsPanelPage items}.\n *\n * To configure pages just pass them in the components array.\n *\n * Example:\n *  let settingsPanel = new SettingsPanel({\n *    hidden: true,\n *  });\n *\n *  let settingsPanelPage = new SettingsPanelPage({\n *    components: […]\n *  });\n *\n *  let secondSettingsPanelPage = new SettingsPanelPage({\n *    components: […]\n *  });\n *\n *  settingsPanel.addComponent(settingsPanelPage);\n *  settingsPanel.addComponent(secondSettingsPanelPage);\n *\n * For an example how to navigate between pages @see SettingsPanelPageNavigatorButton\n */\nexport class SettingsPanel extends Container<SettingsPanelConfig> {\n\n  private static readonly CLASS_ACTIVE_PAGE = 'active';\n\n  // navigation handling\n  private activePage: SettingsPanelPage;\n  private navigationStack: SettingsPanelPage[] = [];\n\n  private settingsPanelEvents = {\n    onSettingsStateChanged: new EventDispatcher<SettingsPanel, NoArgs>(),\n  };\n\n  private hideTimeout: Timeout;\n\n  constructor(config: SettingsPanelConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settings-panel',\n      hideDelay: 3000,\n      pageTransitionAnimation: true,\n    } as SettingsPanelConfig, this.config);\n\n    this.activePage = this.getRootPage();\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    uimanager.onControlsHide.subscribe(() => this.hideHoveredSelectBoxes());\n\n    if (config.hideDelay > -1) {\n      this.hideTimeout = new Timeout(config.hideDelay, () => {\n        this.hide();\n        this.hideHoveredSelectBoxes();\n      });\n      this.getDomElement().on('mouseenter', () => {\n        // On mouse enter clear the timeout\n        this.hideTimeout.clear();\n      });\n      this.getDomElement().on('mouseleave', () => {\n        // On mouse leave activate the timeout\n        this.hideTimeout.reset();\n      });\n      this.getDomElement().on('focusin', () => {\n        this.hideTimeout.clear();\n      });\n      this.getDomElement().on('focusout', () => {\n        this.hideTimeout.reset();\n      });\n    }\n\n    this.onHide.subscribe(() => {\n      if (config.hideDelay > -1) {\n        // Clear timeout when hidden from outside\n        this.hideTimeout.clear();\n      }\n\n      // Since we don't reset the actual navigation here we need to simulate a onInactive event in case some panel\n      // needs to do something when they become invisible / inactive.\n      this.activePage.onInactiveEvent();\n    });\n\n    this.onShow.subscribe(() => {\n      // Reset navigation when te panel gets visible to avoid a weird animation when hiding\n      this.resetNavigation(true);\n      // Since we don't need to navigate to the root page again we need to fire the onActive event when the settings\n      // panel gets visible.\n      this.activePage.onActiveEvent();\n\n      if (config.hideDelay > -1) {\n        // Activate timeout when shown\n        this.hideTimeout.start();\n      }\n    });\n\n    // pass event from root page through\n    this.getRootPage().onSettingsStateChanged.subscribe(() => {\n      this.onSettingsStateChangedEvent();\n    });\n\n    this.updateActivePageClass();\n  }\n\n  /**\n   * Returns the current active / visible page\n   * @return {SettingsPanelPage}\n   */\n  getActivePage(): SettingsPanelPage {\n    return this.activePage;\n  }\n\n  /**\n   * Sets the\n   * @deprecated Use {@link setActivePage} instead\n   * @param index\n   */\n  setActivePageIndex(index: number): void {\n    this.setActivePage(this.getPages()[index]);\n  }\n\n  /**\n   * Adds the passed page to the navigation stack and makes it visible.\n   * Use {@link popSettingsPanelPage} to navigate backwards.\n   *\n   * Results in no-op if the target page is the current page.\n   * @params page\n   */\n  setActivePage(targetPage: SettingsPanelPage): void {\n    if (targetPage === this.getActivePage()) {\n      console.warn('Page is already the current one ... skipping navigation');\n      return;\n    }\n\n    this.navigateToPage(\n      targetPage,\n      this.getActivePage(),\n      NavigationDirection.Forwards,\n      !(this.config as SettingsPanelConfig).pageTransitionAnimation,\n    );\n  }\n\n  /**\n   * Resets the navigation stack by navigating back to the root page and displaying it.\n   */\n  popToRootSettingsPanelPage(): void {\n    this.resetNavigation((this.config as SettingsPanelConfig).pageTransitionAnimation);\n  }\n\n  /**\n   * Removes the current page from the navigation stack and makes the previous one visible.\n   * Results in a no-op if we are already on the root page.\n   */\n  popSettingsPanelPage() {\n    if (this.navigationStack.length === 0) {\n      console.warn('Already on the root page ... skipping navigation');\n      return;\n    }\n\n    let targetPage = this.navigationStack[this.navigationStack.length - 2];\n    // The root part isn't part of the navigation stack so handle it explicitly here\n    if (!targetPage) {\n      targetPage = this.getRootPage();\n    }\n\n    this.navigateToPage(\n      targetPage,\n      this.activePage,\n      NavigationDirection.Backwards,\n      !(this.config as SettingsPanelConfig).pageTransitionAnimation,\n    );\n  }\n\n  /**\n   * Checks if there are active settings within the root page of the settings panel.\n   * An active setting is a setting that is visible and enabled, which the user can interact with.\n   * @returns {boolean} true if there are active settings, false if the panel is functionally empty to a user\n   */\n  rootPageHasActiveSettings(): boolean {\n    return this.getRootPage().hasActiveSettings();\n  }\n\n  /**\n   * Return all configured pages\n   * @returns {SettingsPanelPage[]}\n   */\n  getPages(): SettingsPanelPage[] {\n    return <SettingsPanelPage[]>this.config.components.filter(component => component instanceof SettingsPanelPage);\n  }\n\n  get onSettingsStateChanged(): Event<SettingsPanel, NoArgs> {\n    return this.settingsPanelEvents.onSettingsStateChanged.getEvent();\n  }\n\n  release(): void {\n    super.release();\n    if (this.hideTimeout) {\n      this.hideTimeout.clear();\n    }\n  }\n\n  // Support adding settingsPanelPages after initialization\n  addComponent(component: Component<ComponentConfig>) {\n    if (this.getPages().length === 0 && component instanceof SettingsPanelPage) {\n      this.activePage = component;\n    }\n    super.addComponent(component);\n  }\n\n  private updateActivePageClass(): void {\n    this.getPages().forEach((page: SettingsPanelPage) => {\n      if (page === this.activePage) {\n        page.getDomElement().addClass(this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));\n      } else {\n        page.getDomElement().removeClass(this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));\n      }\n    });\n  }\n\n  private resetNavigation(resetNavigationOnShow: boolean): void {\n    const sourcePage = this.getActivePage();\n    const rootPage = this.getRootPage();\n    if (sourcePage) {\n      // Since the onInactiveEvent was already fired in the onHide we need to suppress it here\n      if (!resetNavigationOnShow) {\n        sourcePage.onInactiveEvent();\n      }\n    }\n    this.navigationStack = [];\n    this.animateNavigation(rootPage, sourcePage, resetNavigationOnShow);\n    this.activePage = rootPage;\n    this.updateActivePageClass();\n  }\n\n  private navigateToPage(\n    targetPage: SettingsPanelPage,\n    sourcePage: SettingsPanelPage,\n    direction: NavigationDirection,\n    skipAnimation: boolean,\n  ): void {\n    this.activePage = targetPage;\n\n    if (direction === NavigationDirection.Forwards) {\n      this.navigationStack.push(targetPage);\n    } else {\n      this.navigationStack.pop();\n    }\n\n    this.animateNavigation(targetPage, sourcePage, skipAnimation);\n\n    this.updateActivePageClass();\n    targetPage.onActiveEvent();\n    sourcePage.onInactiveEvent();\n  }\n\n  /**\n   * @param targetPage\n   * @param sourcePage\n   * @param skipAnimation This is just an internal flag if we want to have an animation. It is set true when we reset\n   * the navigation within the onShow callback of the settingsPanel. In this case we don't want an actual animation but\n   * the recalculation of the dimension of the settingsPanel.\n   * This is independent of the pageTransitionAnimation flag.\n   */\n  private animateNavigation(targetPage: SettingsPanelPage, sourcePage: SettingsPanelPage, skipAnimation: boolean) {\n    if (!(this.config as SettingsPanelConfig).pageTransitionAnimation) {\n      return;\n    }\n\n    const settingsPanelDomElement = this.getDomElement();\n    const settingsPanelHTMLElement = this.getDomElement().get(0);\n\n    // get current dimension\n    const settingsPanelWidth = settingsPanelHTMLElement.scrollWidth;\n    const settingsPanelHeight = settingsPanelHTMLElement.scrollHeight;\n\n    // calculate target size of the settings panel\n    sourcePage.getDomElement().css('display', 'none');\n    this.getDomElement().css({ width: '', height: '' }); // let css auto settings kick in again\n\n    const targetPageHtmlElement = targetPage.getDomElement().get(0);\n    // clone the targetPage DOM element so that we can calculate the width / height how they will be after\n    // switching the page. We are using a clone to prevent (mostly styling) side-effects on the real DOM element\n    const clone = targetPageHtmlElement.cloneNode(true) as HTMLElement;\n    // append to parent so we get the 'real' size\n    const containerWrapper = targetPageHtmlElement.parentNode;\n    containerWrapper.appendChild(clone);\n    // set clone visible\n    clone.style.display = 'block';\n\n    // collect target dimension\n    const targetSettingsPanelWidth = settingsPanelHTMLElement.scrollWidth;\n    const targetSettingsPanelHeight = settingsPanelHTMLElement.scrollHeight;\n\n    // remove clone from the DOM\n    clone.parentElement.removeChild(clone); // .remove() is not working in IE\n    sourcePage.getDomElement().css('display', '');\n\n    // set the values back to the current ones that the browser animates it (browsers don't animate 'auto' values)\n    settingsPanelDomElement.css({\n      width: settingsPanelWidth + 'px',\n      height: settingsPanelHeight + 'px',\n    });\n\n    if (!skipAnimation) {\n      // We need to force the browser to reflow between setting the width and height that we actually get a animation\n      this.forceBrowserReflow();\n    }\n\n    // set the values to the target dimension\n    settingsPanelDomElement.css({\n      width: targetSettingsPanelWidth + 'px',\n      height: targetSettingsPanelHeight + 'px',\n    });\n  }\n\n  private forceBrowserReflow(): void {\n    // Force the browser to reflow the layout\n    // https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    this.getDomElement().get(0).offsetLeft;\n  }\n\n  /**\n   * Hack for IE + Firefox\n   * when the settings panel fades out while an item of a select box is still hovered, the select box will not fade out\n   * while the settings panel does. This would leave a floating select box, which is just weird\n   */\n  private hideHoveredSelectBoxes(): void {\n    this.getComputedItems().forEach((item: SettingsPanelItem) => {\n      if (item.isActive() && (item as any).setting instanceof SelectBox) {\n        const selectBox = (item as any).setting as SelectBox;\n        const oldDisplay = selectBox.getDomElement().css('display');\n        if (oldDisplay === 'none') {\n          // if oldDisplay is already 'none', no need to set to 'none' again. It could lead to race condition\n          // wherein the display is irreversibly set to 'none' when browser tab/window is not active because\n          // requestAnimationFrame is either delayed or paused in some browsers in inactive state\n          return;\n        }\n\n        // updating the display to none marks the select-box as inactive, so it will be hidden with the rest\n        // we just have to make sure to reset this as soon as possible\n        selectBox.getDomElement().css('display', 'none');\n        if (window.requestAnimationFrame) {\n          requestAnimationFrame(() => {\n            selectBox.getDomElement().css('display', oldDisplay);\n          });\n        } else {\n          // IE9 has no requestAnimationFrame, set the value directly. It has no optimization about ignoring DOM-changes\n          // between animationFrames\n          selectBox.getDomElement().css('display', oldDisplay);\n        }\n      }\n    });\n  }\n\n  // collect all items from all pages (see hideHoveredSelectBoxes)\n  private getComputedItems(): SettingsPanelItem[] {\n    const allItems: SettingsPanelItem[] = [];\n    for (let page of this.getPages()) {\n      allItems.push(...page.getItems());\n    }\n    return allItems;\n  }\n\n  private getRootPage(): SettingsPanelPage {\n    return this.getPages()[0];\n  }\n\n  protected onSettingsStateChangedEvent() {\n    this.settingsPanelEvents.onSettingsStateChanged.dispatch(this);\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {Component, ComponentConfig} from './component';\nimport {Event, EventDispatcher, NoArgs} from '../eventdispatcher';\nimport { Label, LabelConfig } from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {SelectBox} from './selectbox';\nimport {ListBox} from './listbox';\nimport {VideoQualitySelectBox} from './videoqualityselectbox';\nimport {AudioQualitySelectBox} from './audioqualityselectbox';\nimport {PlaybackSpeedSelectBox} from './playbackspeedselectbox';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { LocalizableText } from '../localization/i18n';\n\n/**\n * An item for a {@link SettingsPanelPage},\n * Containing an optional {@link Label} and a component that configures a setting.\n * If the components is a {@link SelectBox} it will handle the logic of displaying it or not\n */\nexport class SettingsPanelItem extends Container<ContainerConfig> {\n\n  private label: Component<ComponentConfig>;\n  private setting: Component<ComponentConfig>;\n\n  private settingsPanelItemEvents = {\n    onActiveChanged: new EventDispatcher<SettingsPanelItem, NoArgs>(),\n  };\n\n  constructor(label: LocalizableText | Component<ComponentConfig>, setting: Component<ComponentConfig>, config: ContainerConfig = {}) {\n    super(config);\n\n    this.setting = setting;\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settings-panel-item',\n      role: 'menuitem',\n    }, this.config);\n\n    if (label !== null) {\n      if (label instanceof Component) {\n        this.label = label;\n      } else {\n        this.label = new Label({ text: label, for: this.setting.getConfig().id } as LabelConfig);\n      }\n      this.addComponent(this.label);\n    }\n\n    this.addComponent(this.setting);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    if (this.setting instanceof SelectBox || this.setting instanceof ListBox) {\n      let handleConfigItemChanged = () => {\n        if (!(this.setting instanceof SelectBox) && !(this.setting instanceof ListBox)) {\n          return;\n        }\n        // The minimum number of items that must be available for the setting to be displayed\n        // By default, at least two items must be available, else a selection is not possible\n        let minItemsToDisplay = 2;\n        // Audio/video quality select boxes contain an additional 'auto' mode, which in combination with a single\n        // available quality also does not make sense\n        if ((this.setting instanceof VideoQualitySelectBox && this.setting.hasAutoItem())\n          || this.setting instanceof AudioQualitySelectBox) {\n          minItemsToDisplay = 3;\n        }\n\n        if (this.setting.itemCount() < minItemsToDisplay) {\n          // Hide the setting if no meaningful choice is available\n          this.hide();\n        } else if (this.setting instanceof PlaybackSpeedSelectBox\n          && !uimanager.getConfig().playbackSpeedSelectionEnabled) {\n          // Hide the PlaybackSpeedSelectBox if disabled in config\n          this.hide();\n        } else {\n          this.show();\n        }\n\n        // Visibility might have changed and therefore the active state might have changed so we fire the event\n        // TODO fire only when state has really changed (e.g. check if visibility has really changed)\n        this.onActiveChangedEvent();\n\n        this.getDomElement().attr('aria-haspopup', 'true');\n      };\n\n      this.setting.onItemAdded.subscribe(handleConfigItemChanged);\n      this.setting.onItemRemoved.subscribe(handleConfigItemChanged);\n\n      // Initialize hidden state\n      handleConfigItemChanged();\n    }\n  }\n\n  /**\n   * Checks if this settings panel item is active, i.e. visible and enabled and a user can interact with it.\n   * @returns {boolean} true if the panel is active, else false\n   */\n  isActive(): boolean {\n    return this.isShown();\n  }\n\n  protected onActiveChangedEvent() {\n    this.settingsPanelItemEvents.onActiveChanged.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the 'active' state of this item changes.\n   * @see #isActive\n   * @returns {Event<SettingsPanelItem, NoArgs>}\n   */\n  get onActiveChanged(): Event<SettingsPanelItem, NoArgs> {\n    return this.settingsPanelItemEvents.onActiveChanged.getEvent();\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {SettingsPanelItem} from './settingspanelitem';\nimport {UIInstanceManager} from '../uimanager';\nimport {Event, EventDispatcher, NoArgs} from '../eventdispatcher';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { BrowserUtils } from '../browserutils';\n\n/**\n * A panel containing a list of {@link SettingsPanelItem items} that represent labelled settings.\n */\nexport class SettingsPanelPage extends Container<ContainerConfig> {\n\n  private static readonly CLASS_LAST = 'last';\n\n  private settingsPanelPageEvents = {\n    onSettingsStateChanged: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n    onActive: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n    onInactive: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n  };\n\n  constructor(config: ContainerConfig) {\n    super(config);\n\n    this.config = this.mergeConfig<ContainerConfig>(config, {\n      cssClass: 'ui-settings-panel-page',\n      role: 'menu',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    // Fire event when the state of a settings-item has changed\n    let settingsStateChangedHandler = () => {\n      this.onSettingsStateChangedEvent();\n\n      // Attach marker class to last visible item\n      let lastShownItem = null;\n      for (let component of this.getItems()) {\n        component.getDomElement().removeClass(this.prefixCss(SettingsPanelPage.CLASS_LAST));\n        if (component.isShown()) {\n          lastShownItem = component;\n        }\n      }\n      if (lastShownItem) {\n        lastShownItem.getDomElement().addClass(this.prefixCss(SettingsPanelPage.CLASS_LAST));\n      }\n    };\n    for (let component of this.getItems()) {\n      component.onActiveChanged.subscribe(settingsStateChangedHandler);\n    }\n  }\n\n  hasActiveSettings(): boolean {\n    for (let component of this.getItems()) {\n      if (component.isActive()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getItems(): SettingsPanelItem[] {\n    return <SettingsPanelItem[]>this.config.components.filter(component => component instanceof SettingsPanelItem);\n  }\n\n  onSettingsStateChangedEvent() {\n    this.settingsPanelPageEvents.onSettingsStateChanged.dispatch(this);\n  }\n\n  get onSettingsStateChanged(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onSettingsStateChanged.getEvent();\n  }\n\n  onActiveEvent() {\n    const activeItems = this.getItems().filter((item) => item.isActive());\n\n    this.settingsPanelPageEvents.onActive.dispatch(this);\n    // Disable focus for iOS and iPadOS 13. They open select boxes automatically on focus and we want to avoid that.\n    if (activeItems.length > 0 && !BrowserUtils.isIOS && !(BrowserUtils.isMacIntel && BrowserUtils.isTouchSupported)) {\n      activeItems[0].getDomElement().focusToFirstInput();\n    }\n  }\n\n  get onActive(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onActive.getEvent();\n  }\n\n  onInactiveEvent() {\n    this.settingsPanelPageEvents.onInactive.dispatch(this);\n  }\n\n  get onInactive(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onInactive.getEvent();\n  }\n}\n","import {UIInstanceManager} from '../uimanager';\nimport {SettingsPanelPageNavigatorButton, SettingsPanelPageNavigatorConfig} from './settingspanelpagenavigatorbutton';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport class SettingsPanelPageBackButton extends SettingsPanelPageNavigatorButton {\n\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingspanelpagebackbutton',\n      text: 'back',\n    } as SettingsPanelPageNavigatorConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      this.popPage();\n    });\n  }\n}\n","import {Button, ButtonConfig} from './button';\nimport {SettingsPanel} from './settingspanel';\nimport {SettingsPanelPage} from './settingspanelpage';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\n\n/**\n * Configuration interface for a {@link SettingsPanelPageNavigatorButton}\n */\nexport interface SettingsPanelPageNavigatorConfig extends ButtonConfig {\n  /**\n   * Container `SettingsPanel` where the navigation takes place\n   */\n  container: SettingsPanel;\n  /**\n   * Page where the button should navigate to\n   * If empty it will navigate to the root page (not intended to use as navigate back behavior)\n   */\n  targetPage?: SettingsPanelPage;\n\n  /**\n   * WCAG20 standard: Establishes relationships between objects and their label(s)\n   */\n  ariaLabelledBy?: string;\n}\n\n/**\n * Can be used to navigate between SettingsPanelPages\n *\n * Example:\n *  let settingPanelNavigationButton = new SettingsPanelPageNavigatorButton({\n *    container: settingsPanel,\n *    targetPage: settingsPanelPage,\n *  });\n *\n *  settingsPanelPage.addComponent(settingPanelNavigationButton);\n *\n * Don't forget to add the settingPanelNavigationButton to the settingsPanelPage.\n */\nexport class SettingsPanelPageNavigatorButton extends Button<SettingsPanelPageNavigatorConfig> {\n  private readonly container: SettingsPanel;\n  private readonly targetPage?: SettingsPanelPage;\n\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n    this.config = this.mergeConfig(config, {} as SettingsPanelPageNavigatorConfig, this.config);\n\n    this.container = (this.config as SettingsPanelPageNavigatorConfig).container;\n    this.targetPage = (this.config as SettingsPanelPageNavigatorConfig).targetPage;\n  }\n\n  /**\n   * navigate one level back\n   */\n  popPage() {\n    this.container.popSettingsPanelPage();\n  }\n\n  /**\n   * navigate to the target page\n   */\n  pushTargetPage() {\n    this.container.setActivePage(this.targetPage);\n  }\n}\n","import {UIInstanceManager} from '../uimanager';\nimport {SettingsPanelPageNavigatorButton, SettingsPanelPageNavigatorConfig} from './settingspanelpagenavigatorbutton';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\nexport class SettingsPanelPageOpenButton extends SettingsPanelPageNavigatorButton {\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingspanelpageopenbutton',\n      text: i18n.getLocalizer('open'),\n      role: 'menuitem',\n    } as SettingsPanelPageNavigatorConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.getDomElement().attr('aria-haspopup', 'true');\n    this.getDomElement().attr('aria-owns', this.config.targetPage.getConfig().id);\n\n    this.onClick.subscribe(() => {\n      this.pushTargetPage();\n    });\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {SettingsPanel} from './settingspanel';\nimport {UIInstanceManager} from '../uimanager';\nimport {Component, ComponentConfig} from './component';\nimport {ArrayUtils} from '../arrayutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link SettingsToggleButton}.\n */\nexport interface SettingsToggleButtonConfig extends ToggleButtonConfig {\n  /**\n   * The settings panel whose visibility the button should toggle.\n   */\n  settingsPanel: SettingsPanel;\n\n  /**\n   * Decides if the button should be automatically hidden when the settings panel does not contain any active settings.\n   * Default: true\n   */\n  autoHideWhenNoActiveSettings?: boolean;\n}\n\n/**\n * A button that toggles visibility of a settings panel.\n */\nexport class SettingsToggleButton extends ToggleButton<SettingsToggleButtonConfig> {\n\n  private visibleSettingsPanels: SettingsPanel[] = [];\n\n  constructor(config: SettingsToggleButtonConfig) {\n    super(config);\n\n    if (!config.settingsPanel) {\n      throw new Error('Required SettingsPanel is missing');\n    }\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingstogglebutton',\n      text: i18n.getLocalizer('settings'),\n      settingsPanel: null,\n      autoHideWhenNoActiveSettings: true,\n      role: 'pop-up button',\n    }, <SettingsToggleButtonConfig>this.config);\n\n    /**\n     * WCAG20 standard defines which popup menu (element id) is owned by the button\n     */\n    this.getDomElement().attr('aria-owns', config.settingsPanel.getActivePage().getConfig().id);\n\n    /**\n     * WCAG20 standard defines that a button has a popup menu bound to it\n     */\n    this.getDomElement().attr('aria-haspopup', 'true');\n\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let settingsPanel = config.settingsPanel;\n\n    this.onClick.subscribe(() => {\n      // only hide other `SettingsPanel`s if a new one will be opened\n      if (!settingsPanel.isShown()) {\n        // Hide all open SettingsPanels before opening this button's panel\n        // (We need to iterate a copy because hiding them will automatically remove themselves from the array\n        // due to the subscribeOnce above)\n        this.visibleSettingsPanels.slice().forEach(settingsPanel => settingsPanel.hide());\n      }\n      settingsPanel.toggleHidden();\n    });\n    settingsPanel.onShow.subscribe(() => {\n      // Set toggle status to on when the settings panel shows\n      this.on();\n    });\n    settingsPanel.onHide.subscribe(() => {\n      // Set toggle status to off when the settings panel hides\n      this.off();\n    });\n\n    // Ensure that only one `SettingPanel` is visible at once\n    // Keep track of shown SettingsPanels\n    uimanager.onComponentShow.subscribe((sender: Component<ComponentConfig>) => {\n      if (sender instanceof SettingsPanel) {\n        this.visibleSettingsPanels.push(sender);\n        sender.onHide.subscribeOnce(() => ArrayUtils.remove(this.visibleSettingsPanels, sender));\n      }\n    });\n\n    // Handle automatic hiding of the button if there are no settings for the user to interact with\n    if (config.autoHideWhenNoActiveSettings) {\n      // Setup handler to show/hide button when the settings change\n      let settingsPanelItemsChangedHandler = () => {\n        if (settingsPanel.rootPageHasActiveSettings()) {\n          if (this.isHidden()) {\n            this.show();\n          }\n        } else {\n          if (this.isShown()) {\n            this.hide();\n          }\n        }\n      };\n      // Wire the handler to the event\n      settingsPanel.onSettingsStateChanged.subscribe(settingsPanelItemsChangedHandler);\n      // Call handler for first init at startup\n      settingsPanelItemsChangedHandler();\n    }\n  }\n}\n","import {Component, ComponentConfig} from './component';\n\n/**\n * A dummy component that just reserves some space and does nothing else.\n */\nexport class Spacer extends Component<ComponentConfig> {\n\n  constructor(config: ComponentConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-spacer',\n    }, this.config);\n  }\n\n\n  protected onShowEvent(): void {\n    // disable event firing by overwriting and not calling super\n  }\n\n  protected onHideEvent(): void {\n    // disable event firing by overwriting and not calling super\n  }\n\n  protected onHoverChangedEvent(hovered: boolean): void {\n    // disable event firing by overwriting and not calling super\n  }\n}","import {ListBox} from './listbox';\nimport {UIInstanceManager} from '../uimanager';\nimport {SubtitleSwitchHandler} from '../subtitleutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A element that is similar to a select box where the user can select a subtitle\n */\nexport class SubtitleListBox extends ListBox {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new SubtitleSwitchHandler(player, this, uimanager);\n  }\n}\n","import { Container, ContainerConfig } from './container';\nimport { UIInstanceManager } from '../uimanager';\nimport { Label, LabelConfig } from './label';\nimport { ComponentConfig, Component } from './component';\nimport { ControlBar } from './controlbar';\nimport { EventDispatcher } from '../eventdispatcher';\nimport { DOM, Size } from '../dom';\nimport { PlayerAPI, SubtitleCueEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\nimport { VttUtils } from '../vttutils';\nimport { VTTProperties } from 'bitmovin-player/types/subtitles/vtt/API';\n\ninterface SubtitleCropDetectionResult {\n  top: boolean;\n  right: boolean;\n  bottom: boolean;\n  left: boolean;\n}\n\n/**\n * Overlays the player to display subtitles.\n */\nexport class SubtitleOverlay extends Container<ContainerConfig> {\n\n  private subtitleManager: ActiveSubtitleManager;\n  private previewSubtitleActive: boolean;\n  private previewSubtitle: SubtitleLabel;\n\n  private preprocessLabelEventCallback = new EventDispatcher<SubtitleCueEvent, SubtitleLabel>();\n  private subtitleContainerManager: SubtitleRegionContainerManager;\n\n  private static readonly CLASS_CONTROLBAR_VISIBLE = 'controlbar-visible';\n  private static readonly CLASS_CEA_608 = 'cea608';\n\n  // The number of rows in a cea608 grid\n  private static readonly CEA608_NUM_ROWS = 15;\n  // The number of columns in a cea608 grid\n  private static readonly CEA608_NUM_COLUMNS = 32;\n  // The offset in percent for one row (which is also the height of a row)\n  private static readonly CEA608_ROW_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_ROWS;\n  // The offset in percent for one column (which is also the width of a column)\n  private static readonly CEA608_COLUMN_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_COLUMNS;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.previewSubtitleActive = false;\n    this.previewSubtitle = new SubtitleLabel({ text: i18n.getLocalizer('subtitle.example') });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitle-overlay',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let subtitleManager = new ActiveSubtitleManager();\n    this.subtitleManager = subtitleManager;\n\n    this.subtitleContainerManager = new SubtitleRegionContainerManager(this);\n\n    player.on(player.exports.PlayerEvent.CueEnter, (event: SubtitleCueEvent) => {\n      const label = this.generateLabel(event);\n      subtitleManager.cueEnter(event, label);\n\n      this.preprocessLabelEventCallback.dispatch(event, label);\n\n      if (this.previewSubtitleActive) {\n        this.subtitleContainerManager.removeLabel(this.previewSubtitle);\n      }\n\n      this.show();\n\n      this.subtitleContainerManager.addLabel(label, this.getDomElement().size());\n      this.updateComponents();\n\n      if (uimanager.getConfig().forceSubtitlesIntoViewContainer) {\n        this.handleSubtitleCropping(label);\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.CueUpdate, (event: SubtitleCueEvent) => {\n      const label = this.generateLabel(event);\n      const labelToReplace = subtitleManager.cueUpdate(event, label);\n\n      this.preprocessLabelEventCallback.dispatch(event, label);\n\n      if (labelToReplace) {\n        this.subtitleContainerManager.replaceLabel(labelToReplace, label);\n      }\n\n      if (uimanager.getConfig().forceSubtitlesIntoViewContainer) {\n        this.handleSubtitleCropping(label);\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.CueExit, (event: SubtitleCueEvent) => {\n      let labelToRemove = subtitleManager.cueExit(event);\n\n      if (labelToRemove) {\n        this.subtitleContainerManager.removeLabel(labelToRemove);\n        this.updateComponents();\n      }\n\n      if (!subtitleManager.hasCues) {\n        if (!this.previewSubtitleActive) {\n          this.hide();\n        } else {\n          this.subtitleContainerManager.addLabel(this.previewSubtitle);\n          this.updateComponents();\n        }\n      }\n    });\n\n    let subtitleClearHandler = () => {\n      this.hide();\n      this.subtitleContainerManager.clear();\n      subtitleManager.clear();\n      this.removeComponents();\n      this.updateComponents();\n    };\n\n    const clearInactiveCues = () => {\n      const removedActiveCues = subtitleManager.clearInactiveCues(player.getCurrentTime());\n      removedActiveCues.forEach(toRemove => {\n        this.subtitleContainerManager.removeLabel(toRemove.label);\n      });\n    };\n\n    player.on(player.exports.PlayerEvent.AudioChanged, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SubtitleEnabled, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SubtitleDisabled, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.Seeked, clearInactiveCues);\n    player.on(player.exports.PlayerEvent.TimeShifted, clearInactiveCues);\n    player.on(player.exports.PlayerEvent.PlaybackFinished, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, subtitleClearHandler);\n\n    uimanager.onComponentShow.subscribe((component: Component<ComponentConfig>) => {\n      if (component instanceof ControlBar) {\n        this.getDomElement().addClass(this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));\n      }\n    });\n    uimanager.onComponentHide.subscribe((component: Component<ComponentConfig>) => {\n      if (component instanceof ControlBar) {\n        this.getDomElement().removeClass(this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));\n      }\n    });\n\n    this.configureCea608Captions(player, uimanager);\n    // Init\n    subtitleClearHandler();\n  }\n\n  detectCroppedSubtitleLabel(\n    labelElement: HTMLElement,\n  ): SubtitleCropDetectionResult {\n    const parent = this.getDomElement().get(0);\n\n    const childRect = labelElement.getBoundingClientRect();\n    const parentRect = parent.getBoundingClientRect();\n\n    return {\n      top: childRect.top < parentRect.top,\n      right: childRect.right > parentRect.right,\n      bottom: childRect.bottom > parentRect.bottom,\n      left: childRect.left < parentRect.left,\n    };\n  }\n\n  handleSubtitleCropping(label: SubtitleLabel) {\n    const labelDomElement = label.getDomElement();\n    const cropDetection = this.detectCroppedSubtitleLabel(\n      labelDomElement.get(0),\n    );\n\n    if (cropDetection.top) {\n      labelDomElement.css('top', '0');\n      labelDomElement.removeCss('bottom');\n    }\n\n    if (cropDetection.right) {\n      labelDomElement.css('right', '0');\n      labelDomElement.removeCss('left');\n    }\n\n    if (cropDetection.bottom) {\n      labelDomElement.css('bottom', '0');\n      labelDomElement.removeCss('top');\n    }\n\n    if (cropDetection.left) {\n      labelDomElement.css('left', '0');\n      labelDomElement.removeCss('right');\n    }\n  }\n\n  generateLabel(event: SubtitleCueEvent): SubtitleLabel {\n    // Sanitize cue data (must be done before the cue ID is generated in subtitleManager.cueEnter / update)\n    if (event.position) {\n      // Sometimes the positions are undefined, we assume them to be zero\n      event.position.row = event.position.row || 0;\n      event.position.column = event.position.column || 0;\n    }\n\n    const label = new SubtitleLabel({\n      // Prefer the HTML subtitle text if set, else try generating a image tag as string from the image attribute,\n      // else use the plain text\n      text: event.html || ActiveSubtitleManager.generateImageTagText(event.image) || event.text,\n      vtt: event.vtt,\n      region: event.region,\n      regionStyle: event.regionStyle,\n    });\n\n    return label;\n  }\n\n  configureCea608Captions(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // The calculated font size\n    let fontSize = 0;\n    // The required letter spacing spread the text characters evenly across the grid\n    let fontLetterSpacing = 0;\n    // Flag telling if a font size calculation is required of if the current values are valid\n    let fontSizeCalculationRequired = true;\n    // Flag telling if the CEA-608 mode is enabled\n    let enabled = false;\n\n    const updateCEA608FontSize = () => {\n      const dummyLabel = new SubtitleLabel({ text: 'X' });\n      dummyLabel.getDomElement().css({\n        // By using a large font size we do not need to use multiple letters and can get still an\n        // accurate measurement even though the returned size is an integer value\n        'font-size': '200px',\n        'line-height': '200px',\n        'visibility': 'hidden',\n      });\n      this.addComponent(dummyLabel);\n      this.updateComponents();\n      this.show();\n\n      const dummyLabelCharWidth = dummyLabel.getDomElement().width();\n      const dummyLabelCharHeight = dummyLabel.getDomElement().height();\n      const fontSizeRatio = dummyLabelCharWidth / dummyLabelCharHeight;\n\n      this.removeComponent(dummyLabel);\n      this.updateComponents();\n      if (!this.subtitleManager.hasCues) {\n        this.hide();\n      }\n\n      // We subtract 1px here to avoid line breaks at the right border of the subtitle overlay that can happen\n      // when texts contain whitespaces. It's probably some kind of pixel rounding issue in the browser's\n      // layouting, but the actual reason could not be determined. Aiming for a target width - 1px would work in\n      // most browsers, but Safari has a \"quantized\" font size rendering with huge steps in between so we need\n      // to subtract some more pixels to avoid line breaks there as well.\n      const subtitleOverlayWidth = this.getDomElement().width() - 10;\n      const subtitleOverlayHeight = this.getDomElement().height();\n\n      // The size ratio of the letter grid\n      const fontGridSizeRatio = (dummyLabelCharWidth * SubtitleOverlay.CEA608_NUM_COLUMNS) /\n        (dummyLabelCharHeight * SubtitleOverlay.CEA608_NUM_ROWS);\n      // The size ratio of the available space for the grid\n      const subtitleOverlaySizeRatio = subtitleOverlayWidth / subtitleOverlayHeight;\n\n      if (subtitleOverlaySizeRatio > fontGridSizeRatio) {\n        // When the available space is wider than the text grid, the font size is simply\n        // determined by the height of the available space.\n        fontSize = subtitleOverlayHeight / SubtitleOverlay.CEA608_NUM_ROWS;\n\n        // Calculate the additional letter spacing required to evenly spread the text across the grid's width\n        const gridSlotWidth = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS;\n        const fontCharWidth = fontSize * fontSizeRatio;\n        fontLetterSpacing = gridSlotWidth - fontCharWidth;\n      } else {\n        // When the available space is not wide enough, texts would vertically overlap if we take\n        // the height as a base for the font size, so we need to limit the height. We do that\n        // by determining the font size by the width of the available space.\n        fontSize = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS / fontSizeRatio;\n        fontLetterSpacing = 0;\n      }\n\n      // Update font-size of all active subtitle labels\n      for (let label of this.getComponents()) {\n        if (label instanceof SubtitleLabel) {\n          label.getDomElement().css({\n            'font-size': `${fontSize}px`,\n            'letter-spacing': `${fontLetterSpacing}px`,\n          });\n        }\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      if (enabled) {\n        updateCEA608FontSize();\n      } else {\n        fontSizeCalculationRequired = true;\n      }\n    });\n\n    this.preprocessLabelEventCallback.subscribe((event: SubtitleCueEvent, label: SubtitleLabel) => {\n      const isCEA608 = event.position != null;\n      if (!isCEA608) {\n        // Skip all non-CEA608 cues\n        return;\n      }\n\n      if (!enabled) {\n        enabled = true;\n        this.getDomElement().addClass(this.prefixCss(SubtitleOverlay.CLASS_CEA_608));\n\n        // We conditionally update the font size by this flag here to avoid updating every time a subtitle\n        // is added into an empty overlay. Because we reset the overlay when all subtitles are gone, this\n        // would trigger an unnecessary update every time, but it's only required under certain conditions,\n        // e.g. after the player size has changed.\n        if (fontSizeCalculationRequired) {\n          updateCEA608FontSize();\n          fontSizeCalculationRequired = false;\n        }\n      }\n\n      label.getDomElement().css({\n        'left': `${event.position.column * SubtitleOverlay.CEA608_COLUMN_OFFSET}%`,\n        'top': `${event.position.row * SubtitleOverlay.CEA608_ROW_OFFSET}%`,\n        'font-size': `${fontSize}px`,\n        'letter-spacing': `${fontLetterSpacing}px`,\n      });\n    });\n\n    const reset = () => {\n      this.getDomElement().removeClass(this.prefixCss(SubtitleOverlay.CLASS_CEA_608));\n      enabled = false;\n    };\n\n    player.on(player.exports.PlayerEvent.CueExit, () => {\n      if (!this.subtitleManager.hasCues) {\n        // Disable CEA-608 mode when all subtitles are gone (to allow correct formatting and\n        // display of other types of subtitles, e.g. the formatting preview subtitle)\n        reset();\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.SourceUnloaded, reset);\n    player.on(player.exports.PlayerEvent.SubtitleEnabled, reset);\n    player.on(player.exports.PlayerEvent.SubtitleDisabled, reset);\n  }\n\n  enablePreviewSubtitleLabel(): void {\n    if (!this.subtitleManager.hasCues) {\n      this.previewSubtitleActive = true;\n      this.subtitleContainerManager.addLabel(this.previewSubtitle);\n      this.updateComponents();\n      this.show();\n    }\n  }\n\n  removePreviewSubtitleLabel(): void {\n    if (this.previewSubtitleActive) {\n      this.previewSubtitleActive = false;\n      this.subtitleContainerManager.removeLabel(this.previewSubtitle);\n      this.updateComponents();\n    }\n  }\n}\n\ninterface ActiveSubtitleCue {\n  event: SubtitleCueEvent;\n  label: SubtitleLabel;\n}\n\ninterface ActiveSubtitleCueMap {\n  [id: string]: ActiveSubtitleCue[];\n}\n\ninterface SubtitleLabelConfig extends LabelConfig {\n  vtt?: VTTProperties;\n  region?: string;\n  regionStyle?: string;\n}\n\nexport class SubtitleLabel extends Label<SubtitleLabelConfig> {\n\n  constructor(config: SubtitleLabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitle-label',\n    }, this.config);\n  }\n\n  get vtt(): VTTProperties {\n    return this.config.vtt;\n  }\n\n  get region(): string {\n    return this.config.region;\n  }\n\n  get regionStyle(): string {\n    return this.config.regionStyle;\n  }\n}\n\nclass ActiveSubtitleManager {\n\n  private activeSubtitleCueMap: ActiveSubtitleCueMap;\n  private activeSubtitleCueCount: number;\n\n  constructor() {\n    this.activeSubtitleCueMap = {};\n    this.activeSubtitleCueCount = 0;\n  }\n\n  /**\n   * Calculates a unique ID for a subtitle cue, which is needed to associate an CueEnter with its CueExit\n   * event so we can remove the correct subtitle in CueExit when multiple subtitles are active at the same time.\n   * The start time plus the text should make a unique identifier, and in the only case where a collision\n   * can happen, two similar texts will be displayed at a similar time and a similar position (or without position).\n   * The start time should always be known, because it is required to schedule the CueEnter event. The end time\n   * must not necessarily be known and therefore cannot be used for the ID.\n   * @param event\n   * @return {string}\n   */\n  private static calculateId(event: SubtitleCueEvent): string {\n    let id = event.start + '-' + event.text;\n\n    if (event.position) {\n      id += '-' + event.position.row + '-' + event.position.column;\n    }\n\n    return id;\n  }\n\n  cueEnter(event: SubtitleCueEvent, label: SubtitleLabel): void {\n    this.addCueToMap(event, label);\n  }\n\n  cueUpdate(event: SubtitleCueEvent, label: SubtitleLabel): SubtitleLabel | undefined {\n    const labelToReplace = this.popCueFromMap(event);\n\n    if (labelToReplace) {\n      this.addCueToMap(event, label);\n      return labelToReplace;\n    }\n\n    return undefined;\n  }\n\n  private addCueToMap(event: SubtitleCueEvent, label: SubtitleLabel): void {\n    let id = ActiveSubtitleManager.calculateId(event);\n\n    // Create array for id if it does not exist\n    this.activeSubtitleCueMap[id] = this.activeSubtitleCueMap[id] || [];\n\n    // Add cue\n    this.activeSubtitleCueMap[id].push({ event, label });\n    this.activeSubtitleCueCount++;\n  }\n\n  private popCueFromMap(event: SubtitleCueEvent): SubtitleLabel | undefined {\n    let id = ActiveSubtitleManager.calculateId(event);\n    let activeSubtitleCues = this.activeSubtitleCueMap[id];\n\n    if (activeSubtitleCues && activeSubtitleCues.length > 0) {\n      // Remove cue\n      /* We apply the FIFO approach here and remove the oldest cue from the associated id. When there are multiple cues\n       * with the same id, there is no way to know which one of the cues is to be deleted, so we just hope that FIFO\n       * works fine. Theoretically it can happen that two cues with colliding ids are removed at different times, in\n       * the wrong order. This rare case has yet to be observed. If it ever gets an issue, we can take the unstable\n       * cue end time (which can change between CueEnter and CueExit IN CueUpdate) and use it as an\n       * additional hint to try and remove the correct one of the colliding cues.\n       */\n      let activeSubtitleCue = activeSubtitleCues.shift();\n      this.activeSubtitleCueCount--;\n\n      return activeSubtitleCue.label;\n    }\n  }\n\n  /**\n   * Removes all active cues which don't enclose the given time\n   * @param time the time for which subtitles should remain\n   */\n  public clearInactiveCues(time: number): ActiveSubtitleCue[] {\n    const removedCues: ActiveSubtitleCue[] = [];\n    Object.keys(this.activeSubtitleCueMap).forEach(key => {\n      const activeCues = this.activeSubtitleCueMap[key];\n      activeCues.forEach(cue => {\n        if (time < cue.event.start || time > cue.event.end) {\n          this.popCueFromMap(cue.event);\n          removedCues.push(cue);\n        }\n      });\n    });\n    return removedCues;\n  }\n\n  static generateImageTagText(imageData: string): string | undefined {\n    if (!imageData) {\n      return;\n    }\n\n    const imgTag = new DOM('img', {\n      src: imageData,\n    });\n    imgTag.css('width', '100%');\n    return imgTag.get(0).outerHTML; // return the html as string\n  }\n\n  /**\n   * Returns the label associated with an already added cue.\n   * @param event\n   * @return {SubtitleLabel}\n   */\n  getCues(event: SubtitleCueEvent): SubtitleLabel[] | undefined {\n    let id = ActiveSubtitleManager.calculateId(event);\n    let activeSubtitleCues = this.activeSubtitleCueMap[id];\n    if (activeSubtitleCues && activeSubtitleCues.length > 0) {\n      return activeSubtitleCues.map((cue) => cue.label);\n    }\n  }\n\n  /**\n   * Removes the subtitle cue from the manager and returns the label that should be removed from the subtitle overlay,\n   * or null if there is no associated label existing (e.g. because all labels have been {@link #clear cleared}.\n   * @param event\n   * @return {SubtitleLabel|null}\n   */\n  cueExit(event: SubtitleCueEvent): SubtitleLabel {\n    return this.popCueFromMap(event);\n  }\n\n  /**\n   * Returns the number of active subtitle cues.\n   * @return {number}\n   */\n  get cueCount(): number {\n    // We explicitly count the cues to save an Array.reduce on every cueCount call (which can happen frequently)\n    return this.activeSubtitleCueCount;\n  }\n\n  /**\n   * Returns true if there are active subtitle cues, else false.\n   * @return {boolean}\n   */\n  get hasCues(): boolean {\n    return this.cueCount > 0;\n  }\n\n  /**\n   * Removes all subtitle cues from the manager.\n   */\n  clear(): void {\n    this.activeSubtitleCueMap = {};\n    this.activeSubtitleCueCount = 0;\n  }\n}\n\nexport class SubtitleRegionContainerManager {\n  private subtitleRegionContainers: { [regionName: string]: SubtitleRegionContainer } = {};\n\n  /**\n   * @param subtitleOverlay Reference to the subtitle overlay for adding and removing the containers.\n   */\n  constructor(private subtitleOverlay: SubtitleOverlay) {\n    this.subtitleOverlay = subtitleOverlay;\n  }\n\n  private getRegion(label: SubtitleLabel): { regionContainerId: string, regionName: string } {\n    if (label.vtt) {\n      return {\n        regionContainerId: label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt',\n        regionName: 'vtt',\n      };\n    }\n\n    return {\n      regionContainerId: label.region || 'default',\n      regionName: label.region || 'default',\n    };\n  }\n\n  /**\n   * Creates and wraps a subtitle label into a container div based on the subtitle region.\n   * If the subtitle has positioning information it is added to the container.\n   * @param label The subtitle label to wrap\n   */\n  addLabel(label: SubtitleLabel, overlaySize?: Size): void {\n    const { regionContainerId, regionName } = this.getRegion(label);\n    const cssClasses = [`subtitle-position-${regionName}`];\n\n    if (label.vtt && label.vtt.region) {\n      cssClasses.push(`vtt-region-${label.vtt.region.id}`);\n    }\n\n    if (!this.subtitleRegionContainers[regionContainerId]) {\n      const regionContainer = new SubtitleRegionContainer({\n        cssClasses,\n      });\n\n      this.subtitleRegionContainers[regionContainerId] = regionContainer;\n\n      if (label.regionStyle) {\n        regionContainer.getDomElement().attr('style', label.regionStyle);\n      } else if (label.vtt && !label.vtt.region) {\n        /**\n         * If there is no region present to wrap the Cue Box, the Cue box becomes the\n         * region itself. Therefore the positioning values have to come from the box.\n         */\n        regionContainer.getDomElement().css('position', 'static');\n      } else {\n        // getDomElement needs to be called at least once to ensure the component exists\n        regionContainer.getDomElement();\n      }\n\n      for (const regionContainerId in this.subtitleRegionContainers) {\n        this.subtitleOverlay.addComponent(this.subtitleRegionContainers[regionContainerId]);\n      }\n    }\n\n    this.subtitleRegionContainers[regionContainerId].addLabel(label, overlaySize);\n  }\n\n  replaceLabel(previousLabel: SubtitleLabel, newLabel: SubtitleLabel): void {\n    const { regionContainerId } = this.getRegion(previousLabel);\n\n    this.subtitleRegionContainers[regionContainerId].removeLabel(previousLabel);\n    this.subtitleRegionContainers[regionContainerId].addLabel(newLabel);\n  }\n\n  /**\n   * Removes a subtitle label from a container.\n   */\n  removeLabel(label: SubtitleLabel): void {\n    let regionContainerId;\n\n    if (label.vtt) {\n      regionContainerId = label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt';\n    } else {\n      regionContainerId = label.region || 'default';\n    }\n\n    this.subtitleRegionContainers[regionContainerId].removeLabel(label);\n\n    // Remove container if no more labels are displayed\n    if (this.subtitleRegionContainers[regionContainerId].isEmpty()) {\n      this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionContainerId]);\n      delete this.subtitleRegionContainers[regionContainerId];\n    }\n  }\n\n  /**\n   * Removes all subtitle containers.\n   */\n  clear(): void {\n    for (const regionName in this.subtitleRegionContainers) {\n      this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionName]);\n    }\n\n    this.subtitleRegionContainers = {};\n  }\n}\n\nexport class SubtitleRegionContainer extends Container<ContainerConfig> {\n  private labelCount = 0;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'subtitle-region-container',\n    }, this.config);\n  }\n\n  addLabel(labelToAdd: SubtitleLabel, overlaySize?: Size) {\n    this.labelCount++;\n\n    if (labelToAdd.vtt) {\n      if (labelToAdd.vtt.region && overlaySize) {\n        VttUtils.setVttRegionStyles(this, labelToAdd.vtt.region, overlaySize);\n      }\n\n      VttUtils.setVttCueBoxStyles(labelToAdd, overlaySize);\n    }\n\n    this.addComponent(labelToAdd);\n    this.updateComponents();\n  }\n\n  removeLabel(labelToRemove: SubtitleLabel): void {\n    this.labelCount--;\n    this.removeComponent(labelToRemove);\n    this.updateComponents();\n  }\n\n  public isEmpty(): boolean {\n    return this.labelCount === 0;\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport {SubtitleSwitchHandler} from '../subtitleutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between available subtitle and caption tracks.\n */\nexport class SubtitleSelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitleselectbox'],\n      ariaLabel: i18n.getLocalizer('subtitle.select'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new SubtitleSwitchHandler(player, this, uimanager);\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background colors.\n */\nexport class BackgroundColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsbackgroundcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.backgroundColor.isSet() && this.settingsManager.backgroundOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'bgcolor-' + this.settingsManager.backgroundColor.value + this.settingsManager.backgroundOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.backgroundColor.value = key;\n    });\n\n    this.settingsManager.backgroundColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.backgroundColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.backgroundOpacity.clear();\n      } else if (!this.settingsManager.backgroundOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.backgroundOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.backgroundOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.backgroundColor.isSet()) {\n      this.selectItem(this.settingsManager.backgroundColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background opacity.\n */\nexport class BackgroundOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsbackgroundopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n    this.addItem('0', i18n.getLocalizer('percent', { value: 0 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.backgroundOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.backgroundOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.backgroundColor.clear();\n      } else if (!this.settingsManager.backgroundColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.backgroundColor.value = 'black';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.backgroundOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.backgroundOpacity.isSet()) {\n      this.selectItem(this.settingsManager.backgroundOpacity.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different character edge.\n */\nexport class CharacterEdgeSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingscharacteredgeselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('raised', i18n.getLocalizer('settings.subtitles.characterEdge.raised'));\n    this.addItem('depressed', i18n.getLocalizer('settings.subtitles.characterEdge.depressed'));\n    this.addItem('uniform', i18n.getLocalizer('settings.subtitles.characterEdge.uniform'));\n    this.addItem('dropshadowed', i18n.getLocalizer('settings.subtitles.characterEdge.dropshadowed'));\n\n    this.settingsManager.characterEdge.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('characteredge-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.characterEdge.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.characterEdge.isSet()) {\n      this.selectItem(this.settingsManager.characterEdge.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.fontColor.isSet() && this.settingsManager.fontOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'fontcolor-' + this.settingsManager.fontColor.value + this.settingsManager.fontOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontColor.value = key;\n    });\n\n    this.settingsManager.fontColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.fontColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.fontOpacity.clear();\n      } else if (!this.settingsManager.fontOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.fontOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.fontOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontColor.isSet()) {\n      this.selectItem(this.settingsManager.fontColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font family.\n */\nexport class FontFamilySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontfamilyselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('monospacedserif', i18n.getLocalizer('settings.subtitles.font.family.monospacedserif'));\n    this.addItem('proportionalserif', i18n.getLocalizer('settings.subtitles.font.family.proportionalserif'));\n    this.addItem('monospacedsansserif', i18n.getLocalizer('settings.subtitles.font.family.monospacedsansserif'));\n    this.addItem('proportionalsansserif', i18n.getLocalizer('settings.subtitles.font.family.proportionalserif'));\n    this.addItem('casual', i18n.getLocalizer('settings.subtitles.font.family.casual'));\n    this.addItem('cursive', i18n.getLocalizer('settings.subtitles.font.family.cursive'));\n    this.addItem('smallcapital', i18n.getLocalizer('settings.subtitles.font.family.smallcapital'));\n\n    this.settingsManager.fontFamily.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('fontfamily-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontFamily.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontFamily.isSet()) {\n      this.selectItem(this.settingsManager.fontFamily.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.fontOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.fontColor.clear();\n      } else if (!this.settingsManager.fontColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.fontColor.value = 'white';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.fontOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontOpacity.isSet()) {\n      this.selectItem(this.settingsManager.fontOpacity.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontSizeSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontsizeselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('150', i18n.getLocalizer('percent', { value: 150 }));\n    this.addItem('200', i18n.getLocalizer('percent', { value: 200 }));\n    this.addItem('300', i18n.getLocalizer('percent', { value: 300 }));\n    this.addItem('400', i18n.getLocalizer('percent', { value: 400 }));\n\n    this.settingsManager.fontSize.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('fontsize-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontSize.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontSize.isSet()) {\n      this.selectItem(this.settingsManager.fontSize.value);\n    }\n  }\n}\n","import {SubtitleOverlay} from '../subtitleoverlay';\nimport {ListSelectorConfig} from '../listselector';\nimport {SelectBox} from '../selectbox';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\n\nexport interface SubtitleSettingSelectBoxConfig extends ListSelectorConfig {\n  overlay: SubtitleOverlay;\n  settingsManager: SubtitleSettingsManager;\n}\n\n/**\n * Base class for all subtitles settings select box\n **/\nexport class SubtitleSettingSelectBox extends SelectBox {\n\n  protected settingsManager: SubtitleSettingsManager;\n  protected overlay: SubtitleOverlay;\n  private currentCssClass: string;\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.settingsManager = config.settingsManager;\n    this.overlay = config.overlay;\n  }\n\n  /**\n   * Removes a previously set class and adds the passed in class.\n   * @param cssClass The new class to replace the previous class with or null to just remove the previous class\n   */\n  protected toggleOverlayClass(cssClass: string): void {\n    // Remove previous class if existing\n    if (this.currentCssClass) {\n      this.overlay.getDomElement().removeClass(this.currentCssClass);\n      this.currentCssClass = null;\n    }\n\n    // Add new class if specified. If the new class is null, we don't add anything.\n    if (cssClass) {\n      this.currentCssClass = this.prefixCss(cssClass);\n      this.overlay.getDomElement().addClass(this.currentCssClass);\n    }\n  }\n}\n","import {LabelConfig} from '../label';\nimport {Container, ContainerConfig} from '../container';\nimport {DOM} from '../../dom';\nimport {SettingsPanelPageOpenButton} from '../settingspanelpageopenbutton';\nimport { LocalizableText, i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsLabelConfig extends LabelConfig {\n  opener: SettingsPanelPageOpenButton;\n}\n\nexport class SubtitleSettingsLabel extends Container<ContainerConfig> {\n\n  private opener: SettingsPanelPageOpenButton;\n\n  private text: LocalizableText;\n\n  private for: string;\n\n  constructor(config: SubtitleSettingsLabelConfig) {\n    super(config);\n\n    this.opener = config.opener;\n    this.text = config.text;\n    this.for = config.for;\n\n    this.config = this.mergeConfig(<ContainerConfig>config, {\n      cssClass: 'ui-label',\n      components: [\n        this.opener,\n      ],\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let labelElement = new DOM('label', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'for': this.for,\n    }).append(\n      new DOM('span', {}).html(i18n.performLocalization(this.text)),\n      this.opener.getDomElement(),\n    );\n\n    return labelElement;\n  }\n}\n","import {StorageUtils} from '../../storageutils';\nimport {Component, ComponentConfig} from '../component';\nimport {EventDispatcher, Event} from '../../eventdispatcher';\n\ninterface SubtitleSettings {\n  fontColor?: string;\n  fontOpacity?: string;\n  fontFamily?: string;\n  fontSize?: string;\n  characterEdge?: string;\n  backgroundColor?: string;\n  backgroundOpacity?: string;\n  windowColor?: string;\n  windowOpacity?: string;\n}\n\ninterface Properties {\n  [name: string]: SubtitleSettingsProperty<string>;\n}\n\nexport class SubtitleSettingsManager {\n\n  private userSettings: SubtitleSettings;\n  private localStorageKey: string;\n\n  private _properties: Properties = {\n    fontColor: new SubtitleSettingsProperty<string>(this),\n    fontOpacity: new SubtitleSettingsProperty<string>(this),\n    fontFamily: new SubtitleSettingsProperty<string>(this),\n    fontSize: new SubtitleSettingsProperty<string>(this),\n    characterEdge: new SubtitleSettingsProperty<string>(this),\n    backgroundColor: new SubtitleSettingsProperty<string>(this),\n    backgroundOpacity: new SubtitleSettingsProperty<string>(this),\n    windowColor: new SubtitleSettingsProperty<string>(this),\n    windowOpacity: new SubtitleSettingsProperty<string>(this),\n  };\n\n  constructor() {\n    this.userSettings = {};\n    this.localStorageKey = DummyComponent.instance().prefixCss('subtitlesettings');\n\n    for (let propertyName in this._properties) {\n      this._properties[propertyName].onChanged.subscribe((sender, property) => {\n        if (property.isSet()) {\n          (<any>this.userSettings)[propertyName] = property.value;\n        } else {\n          // Delete the property from the settings object if unset to avoid serialization of null values\n          delete (<any>this.userSettings)[propertyName];\n        }\n\n        // Save the settings object when a property has changed\n        this.save();\n      });\n    }\n\n    this.load();\n  }\n\n  public reset(): void {\n    for (let propertyName in this._properties) {\n      this._properties[propertyName].clear();\n    }\n  }\n\n  public get fontColor(): SubtitleSettingsProperty<string> {\n    return this._properties.fontColor;\n  }\n\n  public get fontOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.fontOpacity;\n  }\n\n  public get fontFamily(): SubtitleSettingsProperty<string> {\n    return this._properties.fontFamily;\n  }\n\n  public get fontSize(): SubtitleSettingsProperty<string> {\n    return this._properties.fontSize;\n  }\n\n  public get characterEdge(): SubtitleSettingsProperty<string> {\n    return this._properties.characterEdge;\n  }\n\n  public get backgroundColor(): SubtitleSettingsProperty<string> {\n    return this._properties.backgroundColor;\n  }\n\n  public get backgroundOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.backgroundOpacity;\n  }\n\n  public get windowColor(): SubtitleSettingsProperty<string> {\n    return this._properties.windowColor;\n  }\n\n  public get windowOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.windowOpacity;\n  }\n\n  /**\n   * Saves the settings to local storage.\n   */\n  public save(): void {\n    StorageUtils.setObject(this.localStorageKey, this.userSettings);\n  }\n\n  /**\n   * Loads the settings from local storage\n   */\n  public load(): void {\n    this.userSettings = StorageUtils.getObject<SubtitleSettings>(this.localStorageKey) || {};\n\n    // Apply the loaded settings\n    for (let property in this.userSettings) {\n      this._properties[property].value = (<any>this.userSettings)[property];\n    }\n  }\n}\n\n/**\n * A dummy component whose sole purpose is to expose the {@link #prefixCss} method to the\n * {@link SubtitleSettingsManager}.\n */\nclass DummyComponent extends Component<ComponentConfig> {\n\n  private static _instance: DummyComponent;\n\n  public static instance(): DummyComponent {\n    if (!DummyComponent._instance) {\n      DummyComponent._instance = new DummyComponent();\n    }\n\n    return DummyComponent._instance;\n  }\n\n  public prefixCss(cssClassOrId: string): string {\n    return super.prefixCss(cssClassOrId);\n  }\n}\n\nexport class SubtitleSettingsProperty<T> {\n\n  private _manager: SubtitleSettingsManager;\n  private _onChanged: EventDispatcher<SubtitleSettingsManager, SubtitleSettingsProperty<T>>;\n  private _value: T;\n\n  constructor(manager: SubtitleSettingsManager) {\n    this._manager = manager;\n    this._onChanged = new EventDispatcher<SubtitleSettingsManager, SubtitleSettingsProperty<T>>();\n  }\n\n  public isSet(): boolean {\n    return this._value != null;\n  }\n\n  public clear(): void {\n    this._value = null;\n    this.onChangedEvent(null);\n  }\n\n  public get value(): T {\n    return this._value;\n  }\n\n  public set value(value: T) {\n    if (typeof value === 'string' && value === 'null') {\n      value = null;\n    }\n\n    this._value = value;\n    this.onChangedEvent(value);\n  }\n\n  protected onChangedEvent(value: T) {\n    this._onChanged.dispatch(this._manager, this);\n  }\n\n  public get onChanged(): Event<SubtitleSettingsManager, SubtitleSettingsProperty<T>> {\n    return this._onChanged.getEvent();\n  }\n}","import {SettingsPanelPage} from '../settingspanelpage';\nimport {SettingsPanel} from '../settingspanel';\nimport {SubtitleOverlay} from '../subtitleoverlay';\nimport {ContainerConfig} from '../container';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\nimport {Component, ComponentConfig} from '../component';\nimport {FontSizeSelectBox} from './fontsizeselectbox';\nimport {FontFamilySelectBox} from './fontfamilyselectbox';\nimport {FontColorSelectBox} from './fontcolorselectbox';\nimport {FontOpacitySelectBox} from './fontopacityselectbox';\nimport {CharacterEdgeSelectBox} from './characteredgeselectbox';\nimport {BackgroundColorSelectBox} from './backgroundcolorselectbox';\nimport {BackgroundOpacitySelectBox} from './backgroundopacityselectbox';\nimport {WindowColorSelectBox} from './windowcolorselectbox';\nimport {WindowOpacitySelectBox} from './windowopacityselectbox';\nimport {SubtitleSettingsResetButton} from './subtitlesettingsresetbutton';\nimport {UIInstanceManager} from '../../uimanager';\nimport {SettingsPanelPageBackButton} from '../settingspanelpagebackbutton';\nimport {SettingsPanelItem} from '../settingspanelitem';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsPanelPageConfig extends ContainerConfig {\n  settingsPanel: SettingsPanel;\n  overlay: SubtitleOverlay;\n}\n\nexport class SubtitleSettingsPanelPage extends SettingsPanelPage {\n\n  private readonly overlay: SubtitleOverlay;\n  private readonly settingsPanel: SettingsPanel;\n\n  constructor(config: SubtitleSettingsPanelPageConfig) {\n    super(config);\n\n    this.overlay = config.overlay;\n    this.settingsPanel = config.settingsPanel;\n\n    let manager = new SubtitleSettingsManager();\n\n    this.config = this.mergeConfig(config, {\n      components: <Component<ComponentConfig>[]>[\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.size'), new FontSizeSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.family'), new FontFamilySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.color'), new FontColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.opacity'), new FontOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.characterEdge'), new CharacterEdgeSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.background.color'), new BackgroundColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.background.opacity'), new BackgroundOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.window.color'), new WindowColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.window.opacity'), new WindowOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(new SettingsPanelPageBackButton({\n          container: this.settingsPanel,\n          text: i18n.getLocalizer('back'),\n        }), new SubtitleSettingsResetButton({\n          settingsManager: manager,\n        }), {\n          role: 'menubar',\n        }),\n      ],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onActive.subscribe(() => {\n      this.overlay.enablePreviewSubtitleLabel();\n    });\n\n    this.onInactive.subscribe(() => {\n      this.overlay.removePreviewSubtitleLabel();\n    });\n  }\n}","import {UIInstanceManager} from '../../uimanager';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\nimport {Button, ButtonConfig} from '../button';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsResetButtonConfig extends ButtonConfig {\n  settingsManager: SubtitleSettingsManager;\n}\n\n/**\n * A button that resets all subtitle settings to their defaults.\n */\nexport class SubtitleSettingsResetButton extends Button<ButtonConfig> {\n\n  constructor(config: SubtitleSettingsResetButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitlesettingsresetbutton',\n      text: i18n.getLocalizer('reset'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      (<SubtitleSettingsResetButtonConfig>this.config).settingsManager.reset();\n    });\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background colors.\n */\nexport class WindowColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingswindowcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.windowColor.isSet() && this.settingsManager.windowOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'windowcolor-' + this.settingsManager.windowColor.value + this.settingsManager.windowOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.windowColor.value = key;\n    });\n\n    this.settingsManager.windowColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.windowColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.windowOpacity.clear();\n      } else if (!this.settingsManager.windowOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.windowOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.windowOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.windowColor.isSet()) {\n      this.selectItem(this.settingsManager.windowColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background opacity.\n */\nexport class WindowOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingswindowopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n    this.addItem('0', i18n.getLocalizer('percent', { value: 0 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.windowOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.windowOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.windowColor.clear();\n      } else if (!this.settingsManager.windowColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.windowColor.value = 'black';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.windowOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.windowOpacity.isSet()) {\n      this.selectItem(this.settingsManager.windowOpacity.value);\n    }\n  }\n}\n","import { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\nimport { DOM } from '../dom';\nimport { ComponentConfig } from './component';\nimport { TimelineMarker } from '../uiconfig';\nimport { SeekBarMarker } from './seekbar';\nimport { PlayerUtils } from '../playerutils';\nimport { Timeout } from '../timeout';\n\nexport interface MarkersConfig extends ComponentConfig {\n  /**\n   * Used for seekBar marker snapping range percentage\n   */\n  snappingRange?: number;\n}\n\nexport class TimelineMarkersHandler {\n  private markersContainer: DOM;\n  private timelineMarkers: SeekBarMarker[];\n  private player: PlayerAPI;\n  private uimanager: UIInstanceManager;\n  private pausedTimeshiftUpdater: Timeout;\n  private getSeekBarWidth: () => number;\n  protected config: MarkersConfig;\n\n  constructor(config: MarkersConfig, getSeekBarWidth: () => number, markersContainer: DOM) {\n    this.config = config;\n    this.getSeekBarWidth = getSeekBarWidth;\n    this.markersContainer = markersContainer;\n    this.timelineMarkers = [];\n  }\n\n  public initialize(player: PlayerAPI, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.uimanager = uimanager;\n    this.configureMarkers();\n  }\n\n  private configureMarkers(): void {\n    // Remove markers when unloaded\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, () => this.clearMarkers());\n    this.player.on(this.player.exports.PlayerEvent.AdBreakStarted, () => this.clearMarkers());\n    this.player.on(this.player.exports.PlayerEvent.AdBreakFinished, () => this.updateMarkers());\n    // Update markers when the size of the seekbar changes\n    this.player.on(this.player.exports.PlayerEvent.PlayerResized, () => this.updateMarkersDOM());\n\n    this.player.on(this.player.exports.PlayerEvent.SourceLoaded, () => {\n      if (this.player.isLive()) {\n        // Update marker position as timeshift range changes\n        this.player.on(this.player.exports.PlayerEvent.TimeChanged, () => this.updateMarkers());\n        // Update marker postion when paused as timeshift range changes\n        this.configureLivePausedTimeshiftUpdater(() => this.updateMarkers());\n      }\n    });\n    this.uimanager.getConfig().events.onUpdated.subscribe(() => this.updateMarkers());\n    this.uimanager.onRelease.subscribe(() => this.uimanager.getConfig().events.onUpdated.unsubscribe(() => this.updateMarkers()));\n\n    // Init markers at startup\n    this.updateMarkers();\n  }\n\n  public getMarkerAtPosition(percentage: number): SeekBarMarker | null {\n    const snappingRange = this.config.snappingRange;\n\n    const matchingMarker = this.timelineMarkers.find(marker => {\n      const hasDuration = marker.duration > 0;\n      // Handle interval markers\n      const intervalMarkerMatch =\n        hasDuration &&\n        percentage >= marker.position - snappingRange &&\n        percentage <= marker.position + marker.duration + snappingRange;\n\n      // Handle position markers\n      const positionMarkerMatch =\n        percentage >= marker.position - snappingRange &&\n        percentage <= marker.position + snappingRange;\n\n      return intervalMarkerMatch || positionMarkerMatch;\n    });\n\n    return matchingMarker || null;\n  }\n\n  private clearMarkers(): void {\n    this.timelineMarkers = [];\n    this.markersContainer.empty();\n  }\n\n  private removeMarkerFromConfig(marker: TimelineMarker): void {\n    this.uimanager.getConfig().metadata.markers = this.uimanager.getConfig().metadata.markers.filter(_marker => marker !== _marker);\n  }\n\n  private filterRemovedMarkers(): void {\n    this.timelineMarkers = this.timelineMarkers.filter(seekbarMarker => {\n      const matchingMarker = this.uimanager.getConfig().metadata.markers.find(_marker => seekbarMarker.marker === _marker);\n      if (!matchingMarker) {\n        this.removeMarkerFromDOM(seekbarMarker);\n      }\n      return matchingMarker;\n    });\n  }\n\n  private removeMarkerFromDOM(marker: SeekBarMarker): void {\n    if (marker.element) {\n      marker.element.remove();\n    }\n  }\n\n  private updateMarkers(): void {\n    if (!shouldProcessMarkers(this.player, this.uimanager)) {\n      this.clearMarkers();\n      return;\n    }\n\n    this.filterRemovedMarkers();\n\n    this.uimanager.getConfig().metadata.markers.forEach(marker => {\n      const { markerPosition, markerDuration } = getMarkerPositions(this.player, marker);\n\n      if (shouldRemoveMarker(markerPosition, markerDuration)) {\n        this.removeMarkerFromConfig(marker);\n      } else if (markerPosition <= 100) {\n        const matchingMarker = this.timelineMarkers.find(seekbarMarker => seekbarMarker.marker === marker);\n\n        if (matchingMarker) {\n          matchingMarker.position = markerPosition;\n          matchingMarker.duration = markerDuration;\n\n          this.updateMarkerDOM(matchingMarker);\n        } else {\n          const newMarker: SeekBarMarker = { marker, position: markerPosition, duration: markerDuration };\n          this.timelineMarkers.push(newMarker);\n\n          this.createMarkerDOM(newMarker);\n        }\n      }\n    });\n  }\n\n  private getMarkerCssProperties(marker: SeekBarMarker): { [propertyName: string]: string } {\n    const seekBarWidthPx = this.getSeekBarWidth();\n\n    const positionInPx = (seekBarWidthPx / 100) * (marker.position < 0 ? 0 : marker.position);\n    const cssProperties: { [propertyName: string]: string } = {\n      'transform': `translateX(${positionInPx}px)`,\n    };\n\n    if (marker.duration > 0) {\n      const markerWidthPx = Math.round(seekBarWidthPx / 100 * marker.duration);\n      cssProperties['width'] = `${markerWidthPx}px`;\n    }\n\n    return cssProperties;\n  }\n\n  private updateMarkerDOM(marker: SeekBarMarker): void {\n    marker.element.css(this.getMarkerCssProperties(marker));\n  }\n\n  private createMarkerDOM(marker: SeekBarMarker): void {\n    const markerClasses = ['seekbar-marker'].concat(marker.marker.cssClasses || [])\n      .map(cssClass => this.prefixCss(cssClass));\n\n    const markerElement = new DOM('div', {\n      'class': markerClasses.join(' '),\n      'data-marker-time': String(marker.marker.time),\n      'data-marker-title': String(marker.marker.title),\n    }).css(this.getMarkerCssProperties(marker));\n\n    if (marker.marker.imageUrl) {\n      const removeImage = () => {\n        imageElement.remove();\n      };\n\n      const imageElement = new DOM('img', {\n        'class': this.prefixCss('seekbar-marker-image'),\n        'src': marker.marker.imageUrl,\n      }).on('error', removeImage);\n\n      markerElement.append(imageElement);\n    }\n\n    marker.element = markerElement;\n    this.markersContainer.append(markerElement);\n  }\n\n  private updateMarkersDOM(): void {\n    this.timelineMarkers.forEach(marker => {\n      if (marker.element) {\n        this.updateMarkerDOM(marker);\n      } else {\n        this.createMarkerDOM(marker);\n      }\n    });\n  }\n\n  private configureLivePausedTimeshiftUpdater(\n    handler: () => void,\n  ): void {\n    // Regularly update the marker position while the timeout is active\n    this.pausedTimeshiftUpdater = new Timeout(1000, handler, true);\n\n    this.player.on(this.player.exports.PlayerEvent.Paused, () => {\n      if (this.player.isLive() && this.player.getMaxTimeShift() < 0) {\n        this.pausedTimeshiftUpdater.start();\n      }\n    });\n\n    // Stop updater when playback continues (no matter if the updater was started before)\n    this.player.on(this.player.exports.PlayerEvent.Play, () => this.pausedTimeshiftUpdater.clear());\n    this.player.on(this.player.exports.PlayerEvent.Destroy, () => this.pausedTimeshiftUpdater.clear());\n  }\n\n  protected prefixCss(cssClassOrId: string): string {\n    return this.config.cssPrefix + '-' + cssClassOrId;\n  }\n}\n\nfunction getMarkerPositions(player: PlayerAPI, marker: TimelineMarker) {\n  const duration = getDuration(player);\n\n  const markerPosition = 100 / duration * getMarkerTime(marker, player, duration); // convert absolute time to percentage\n  let markerDuration = 100 / duration * marker.duration;\n\n  if (markerPosition < 0 && !isNaN(markerDuration)) {\n    // Shrink marker duration for on live streams as they reach end\n    markerDuration = markerDuration + markerPosition;\n  }\n\n  if (100 - markerPosition < markerDuration) {\n    // Shrink marker if it overflows timeline\n    markerDuration = 100 - markerPosition;\n  }\n\n  return { markerDuration, markerPosition };\n}\n\nfunction getMarkerTime(marker: TimelineMarker, player: PlayerAPI, duration: number): number {\n  if (!player.isLive()) {\n    return marker.time;\n  }\n\n  return duration - (PlayerUtils.getSeekableRangeRespectingLive(player).end - marker.time);\n}\n\nfunction getDuration(player: PlayerAPI): number {\n  if (!player.isLive()) {\n    return player.getDuration();\n  }\n  const { start, end } = PlayerUtils.getSeekableRangeRespectingLive(player);\n\n  return end - start;\n}\n\nfunction shouldRemoveMarker(markerPosition: number, markerDuration: number): boolean {\n  return (markerDuration < 0 || isNaN(markerDuration)) && markerPosition < 0;\n}\n\nfunction shouldProcessMarkers(player: PlayerAPI, uimanager: UIInstanceManager): boolean {\n  // Don't generate timeline markers if we don't yet have a duration\n  // The duration check is for buggy platforms where the duration is not available instantly (Chrome on Android 4.3)\n  const validToProcess = player.getDuration() !== Infinity || player.isLive();\n  const hasMarkers = uimanager.getConfig().metadata.markers.length > 0;\n\n  return validToProcess && hasMarkers;\n}\n","import {Container, ContainerConfig} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {MetadataLabel, MetadataLabelContent} from './metadatalabel';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for a {@link TitleBar}.\n */\nexport interface TitleBarConfig extends ContainerConfig {\n  /**\n   * Specifies if the title bar should stay hidden when no metadata label contains any text. Does not make a lot\n   * of sense if the title bar contains other components than just MetadataLabels (like in the default configuration).\n   * Default: false\n   */\n  keepHiddenWithoutMetadata?: boolean;\n}\n\n/**\n * Displays a title bar containing a label with the title of the video.\n */\nexport class TitleBar extends Container<TitleBarConfig> {\n\n  constructor(config: TitleBarConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-titlebar',\n      hidden: true,\n      components: [\n        new MetadataLabel({ content: MetadataLabelContent.Title }),\n        new MetadataLabel({ content: MetadataLabelContent.Description }),\n      ],\n      keepHiddenWithoutMetadata: false,\n    }, <TitleBarConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let shouldBeShown = !this.isHidden();\n    let hasMetadataText = true; // Flag to track if any metadata label contains text\n\n    let checkMetadataTextAndUpdateVisibility = () => {\n      hasMetadataText = false;\n\n      // Iterate through metadata labels and check if at least one of them contains text\n      for (let component of this.getComponents()) {\n        if (component instanceof MetadataLabel) {\n          if (!component.isEmpty()) {\n            hasMetadataText = true;\n            break;\n          }\n        }\n      }\n\n      if (this.isShown()) {\n        // Hide a visible titlebar if it does not contain any text and the hidden flag is set\n        if (config.keepHiddenWithoutMetadata && !hasMetadataText) {\n          this.hide();\n        }\n      } else if (shouldBeShown) {\n        // Show a hidden titlebar if it should actually be shown\n        this.show();\n      }\n    };\n\n    // Listen to text change events to update the hasMetadataText flag when the metadata dynamically changes\n    for (let component of this.getComponents()) {\n      if (component instanceof MetadataLabel) {\n        component.onTextChanged.subscribe(checkMetadataTextAndUpdateVisibility);\n      }\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      shouldBeShown = true;\n      if (!(config.keepHiddenWithoutMetadata && !hasMetadataText)) {\n        this.show();\n      }\n    });\n    uimanager.onControlsHide.subscribe(() => {\n      shouldBeShown = false;\n      this.hide();\n    });\n\n    // init\n    checkMetadataTextAndUpdateVisibility();\n  }\n}","import {Button, ButtonConfig} from './button';\nimport {NoArgs, EventDispatcher, Event} from '../eventdispatcher';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { LocalizableText } from '../localization/i18n';\n\n/**\n * Configuration interface for a toggle button component.\n */\nexport interface ToggleButtonConfig extends ButtonConfig {\n  /**\n   * The CSS class that marks the on-state of the button.\n   */\n  onClass?: string;\n  /**\n   * The CSS class that marks the off-state of the button.\n   */\n  offClass?: string;\n  /**\n   * WCAG20 standard for defining info about the component (usually the name)\n   *\n   * It is recommended to use `onAriaLabel` and `offAriaLabel` for toggle buttons\n   * as the component can then update them as the button is used.\n   *\n   * If both `ariaLabel` and `onAriaLabel` are set, `onAriaLabel` is used.\n   */\n  ariaLabel?: LocalizableText;\n  /**\n   * The aria label that marks the on-state of the button.\n   */\n  onAriaLabel?: LocalizableText;\n  /**\n   * The aria label that marks the off-state of the button.\n   */\n  offAriaLabel?: LocalizableText;\n  /**\n   * The text as string or as localize callback on the button.\n   */\n  text?: LocalizableText;\n}\n\n/**\n * A button that can be toggled between 'on' and 'off' states.\n */\nexport class ToggleButton<Config extends ToggleButtonConfig> extends Button<Config> {\n\n  private onState: boolean;\n\n  private toggleButtonEvents = {\n    onToggle: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n    onToggleOn: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n    onToggleOff: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n  };\n\n  constructor(config: Config) {\n    super(config);\n\n    const defaultConfig: ToggleButtonConfig = {\n      cssClass: 'ui-togglebutton',\n      onClass: 'on',\n      offClass: 'off',\n    };\n\n    if (config.onAriaLabel) {\n      config.ariaLabel = config.onAriaLabel;\n    }\n\n    this.config = this.mergeConfig(config, defaultConfig as Config, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n    const config = this.getConfig();\n    this.getDomElement().addClass(this.prefixCss(config.offClass));\n  }\n\n  /**\n   * Toggles the button to the 'on' state.\n   */\n  on() {\n    if (this.isOff()) {\n      const config = this.getConfig();\n\n      this.onState = true;\n      this.getDomElement().removeClass(this.prefixCss(config.offClass));\n      this.getDomElement().addClass(this.prefixCss(config.onClass));\n\n      this.onToggleEvent();\n      this.onToggleOnEvent();\n\n      this.setAriaAttr('pressed', 'true');\n\n      if (this.config.onAriaLabel) {\n        this.setAriaLabel(this.config.onAriaLabel);\n      }\n    }\n  }\n\n  /**\n   * Toggles the button to the 'off' state.\n   */\n  off() {\n    if (this.isOn()) {\n      const config = this.getConfig();\n\n      this.onState = false;\n      this.getDomElement().removeClass(this.prefixCss(config.onClass));\n      this.getDomElement().addClass(this.prefixCss(config.offClass));\n\n      this.onToggleEvent();\n      this.onToggleOffEvent();\n\n      this.setAriaAttr('pressed', 'false');\n\n      if (this.config.offAriaLabel) {\n        this.setAriaLabel(this.config.offAriaLabel);\n      }\n    }\n  }\n\n  /**\n   * Toggle the button 'on' if it is 'off', or 'off' if it is 'on'.\n   */\n  toggle() {\n    if (this.isOn()) {\n      this.off();\n    } else {\n      this.on();\n    }\n  }\n\n  /**\n   * Checks if the toggle button is in the 'on' state.\n   * @returns {boolean} true if button is 'on', false if 'off'\n   */\n  isOn(): boolean {\n    return this.onState;\n  }\n\n  /**\n   * Checks if the toggle button is in the 'off' state.\n   * @returns {boolean} true if button is 'off', false if 'on'\n   */\n  isOff(): boolean {\n    return !this.isOn();\n  }\n\n  protected onClickEvent() {\n    super.onClickEvent();\n\n    // Fire the toggle event together with the click event\n    // (they are technically the same, only the semantics are different)\n    this.onToggleEvent();\n  }\n\n  protected onToggleEvent() {\n    this.toggleButtonEvents.onToggle.dispatch(this);\n  }\n\n  protected onToggleOnEvent() {\n    this.toggleButtonEvents.onToggleOn.dispatch(this);\n  }\n\n  protected onToggleOffEvent() {\n    this.toggleButtonEvents.onToggleOff.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggle(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggle.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled 'on'.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggleOn(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggleOn.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled 'off'.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggleOff(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggleOff.getEvent();\n  }\n}","import {Component, ComponentConfig} from './component';\nimport {DOM} from '../dom';\n\n/**\n * Animated analog TV static noise.\n */\nexport class TvNoiseCanvas extends Component<ComponentConfig> {\n\n  private canvas: DOM;\n\n  private canvasElement: HTMLCanvasElement;\n  private canvasContext: CanvasRenderingContext2D;\n  private canvasWidth = 160;\n  private canvasHeight = 90;\n  private interferenceHeight = 50;\n  private lastFrameUpdate: number = 0;\n  private frameInterval: number = 60;\n  private useAnimationFrame: boolean = !!window.requestAnimationFrame;\n  private noiseAnimationWindowPos: number;\n  private frameUpdateHandlerId: number;\n\n  constructor(config: ComponentConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-tvnoisecanvas',\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    return this.canvas = new DOM('canvas', { 'class': this.getCssClasses() });\n  }\n\n  start(): void {\n    this.canvasElement = <HTMLCanvasElement>this.canvas.get(0);\n    this.canvasContext = this.canvasElement.getContext('2d');\n    this.noiseAnimationWindowPos = -this.canvasHeight;\n    this.lastFrameUpdate = 0;\n\n    this.canvasElement.width = this.canvasWidth;\n    this.canvasElement.height = this.canvasHeight;\n\n    this.renderFrame();\n  }\n\n  stop(): void {\n    if (this.useAnimationFrame) {\n      cancelAnimationFrame(this.frameUpdateHandlerId);\n    } else {\n      clearTimeout(this.frameUpdateHandlerId);\n    }\n  }\n\n  private renderFrame(): void {\n    // This code has been copied from the player controls.js and simplified\n\n    if (this.lastFrameUpdate + this.frameInterval > new Date().getTime()) {\n      // It's too early to render the next frame\n      this.scheduleNextRender();\n      return;\n    }\n\n    let currentPixelOffset;\n    let canvasWidth = this.canvasWidth;\n    let canvasHeight = this.canvasHeight;\n\n    // Create texture\n    let noiseImage = this.canvasContext.createImageData(canvasWidth, canvasHeight);\n\n    // Fill texture with noise\n    for (let y = 0; y < canvasHeight; y++) {\n      for (let x = 0; x < canvasWidth; x++) {\n        currentPixelOffset = (canvasWidth * y * 4) + x * 4;\n        noiseImage.data[currentPixelOffset] = Math.random() * 255;\n        if (y < this.noiseAnimationWindowPos || y > this.noiseAnimationWindowPos + this.interferenceHeight) {\n          noiseImage.data[currentPixelOffset] *= 0.85;\n        }\n        noiseImage.data[currentPixelOffset + 1] = noiseImage.data[currentPixelOffset];\n        noiseImage.data[currentPixelOffset + 2] = noiseImage.data[currentPixelOffset];\n        noiseImage.data[currentPixelOffset + 3] = 50;\n      }\n    }\n\n    // Put texture onto canvas\n    this.canvasContext.putImageData(noiseImage, 0, 0);\n\n    this.lastFrameUpdate = new Date().getTime();\n    this.noiseAnimationWindowPos += 7;\n    if (this.noiseAnimationWindowPos > canvasHeight) {\n      this.noiseAnimationWindowPos = -canvasHeight;\n    }\n\n    this.scheduleNextRender();\n  }\n\n  private scheduleNextRender(): void {\n    if (this.useAnimationFrame) {\n      this.frameUpdateHandlerId = window.requestAnimationFrame(this.renderFrame.bind(this));\n    } else {\n      this.frameUpdateHandlerId = window.setTimeout(this.renderFrame.bind(this), this.frameInterval);\n    }\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {DOM} from '../dom';\nimport {Timeout} from '../timeout';\nimport {PlayerUtils} from '../playerutils';\nimport { CancelEventArgs, EventDispatcher } from '../eventdispatcher';\nimport { PlayerAPI, PlayerResizedEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link UIContainer}.\n */\nexport interface UIContainerConfig extends ContainerConfig {\n  /**\n   * The delay in milliseconds after which the control bar will be hidden when there is no user interaction.\n   * Set to -1 for the UI to be always shown.\n   * Default: 5 seconds (5000)\n   */\n  hideDelay?: number;\n  /**\n   * An array of player states in which the UI will not be hidden, no matter what the {@link hideDelay} is.\n   */\n  hidePlayerStateExceptions?: PlayerUtils.PlayerState[];\n  /**\n   * The HTML element on which user interaction events (e.g. mouse and touch events) will be tracked to detect\n   * interaction with the UI. These basically trigger showing and hiding of the UI.\n   * Default: the UI container itself\n   */\n  userInteractionEventSource?: HTMLElement;\n}\n\n/**\n * The base container that contains all of the UI. The UIContainer is passed to the {@link UIManager} to build and\n * setup the UI.\n */\nexport class UIContainer extends Container<UIContainerConfig> {\n\n  private static readonly STATE_PREFIX = 'player-state-';\n\n  private static readonly FULLSCREEN = 'fullscreen';\n  private static readonly BUFFERING = 'buffering';\n  private static readonly REMOTE_CONTROL = 'remote-control';\n  private static readonly CONTROLS_SHOWN = 'controls-shown';\n  private static readonly CONTROLS_HIDDEN = 'controls-hidden';\n\n  private uiHideTimeout: Timeout;\n  private playerStateChange: EventDispatcher<UIContainer, PlayerUtils.PlayerState>;\n\n  private userInteractionEventSource: DOM;\n  private userInteractionEvents: { name: string, handler: EventListenerOrEventListenerObject }[];\n\n  public hideUi: () => void = () => {};\n  public showUi: () => void = () => {};\n\n  constructor(config: UIContainerConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <UIContainerConfig>{\n      cssClass: 'ui-uicontainer',\n      role: 'region',\n      ariaLabel: i18n.getLocalizer('player'),\n      hideDelay: 5000,\n    }, this.config);\n\n    this.playerStateChange = new EventDispatcher<UIContainer, PlayerUtils.PlayerState>();\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    const config = this.getConfig();\n\n    if (config.userInteractionEventSource) {\n      this.userInteractionEventSource = new DOM(config.userInteractionEventSource);\n    } else {\n      this.userInteractionEventSource = this.getDomElement();\n    }\n\n    super.configure(player, uimanager);\n\n    this.configureUIShowHide(player, uimanager);\n    this.configurePlayerStates(player, uimanager);\n  }\n\n  private configureUIShowHide(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    let config = this.getConfig();\n\n    if (config.hideDelay === -1) {\n      uimanager.onConfigured.subscribe(() => uimanager.onControlsShow.dispatch(this));\n      return;\n    }\n\n    let isUiShown = false;\n    let isSeeking = false;\n    let isFirstTouch = true;\n    let playerState: PlayerUtils.PlayerState;\n\n    const hidingPrevented = (): boolean => {\n      return config.hidePlayerStateExceptions && config.hidePlayerStateExceptions.indexOf(playerState) > -1;\n    };\n\n    this.showUi = () => {\n      if (!isUiShown) {\n        // Let subscribers know that they should reveal themselves\n        uimanager.onControlsShow.dispatch(this);\n        isUiShown = true;\n      }\n      // Don't trigger timeout while seeking (it will be triggered once the seek is finished) or casting\n      if (!isSeeking && !player.isCasting() && !hidingPrevented()) {\n        this.uiHideTimeout.start();\n      }\n    };\n\n    this.hideUi = () => {\n      // Hide the UI only if it is shown, and if not casting\n      if (isUiShown && !player.isCasting()) {\n        // Issue a preview event to check if we are good to hide the controls\n        let previewHideEventArgs = <CancelEventArgs>{};\n        uimanager.onPreviewControlsHide.dispatch(this, previewHideEventArgs);\n\n        if (!previewHideEventArgs.cancel) {\n          // If the preview wasn't canceled, let subscribers know that they should now hide themselves\n          uimanager.onControlsHide.dispatch(this);\n          isUiShown = false;\n        } else {\n          // If the hide preview was canceled, continue to show UI\n          this.showUi();\n        }\n      }\n    };\n\n    // Timeout to defer UI hiding by the configured delay time\n    this.uiHideTimeout = new Timeout(config.hideDelay, this.hideUi);\n\n    this.userInteractionEvents = [{\n      // On touch displays, the first touch reveals the UI\n      name: 'touchend',\n      handler: (e) => {\n        if (!isUiShown) {\n          // Only if the UI is hidden, we prevent other actions (except for the first touch) and reveal the UI\n          // instead. The first touch is not prevented to let other listeners receive the event and trigger an\n          // initial action, e.g. the huge playback button can directly start playback instead of requiring a double\n          // tap which 1. reveals the UI and 2. starts playback.\n          if (isFirstTouch && !player.isPlaying()) {\n            isFirstTouch = false;\n          } else {\n            e.preventDefault();\n          }\n          this.showUi();\n        }\n      },\n    }, {\n      // When the mouse enters, we show the UI\n      name: 'mouseenter',\n      handler: () => {\n        this.showUi();\n      },\n    }, {\n      // When the mouse moves within, we show the UI\n      name: 'mousemove',\n      handler: () => {\n        this.showUi();\n      },\n    }, {\n      name: 'focusin',\n      handler: () => {\n        this.showUi();\n      },\n    }, {\n      name: 'keydown',\n      handler: () => {\n        this.showUi();\n      },\n    }, {\n      // When the mouse leaves, we can prepare to hide the UI, except a seek is going on\n      name: 'mouseleave',\n      handler: () => {\n        // When a seek is going on, the seek scrub pointer may exit the UI area while still seeking, and we do not\n        // hide the UI in such cases\n        if (!isSeeking && !hidingPrevented()) {\n          this.uiHideTimeout.start();\n        }\n      },\n    }];\n\n    this.userInteractionEvents.forEach((event) => this.userInteractionEventSource.on(event.name, event.handler));\n\n    uimanager.onSeek.subscribe(() => {\n      this.uiHideTimeout.clear(); // Don't hide UI while a seek is in progress\n      isSeeking = true;\n    });\n    uimanager.onSeeked.subscribe(() => {\n      isSeeking = false;\n      if (!hidingPrevented()) {\n        this.uiHideTimeout.start(); // Re-enable UI hide timeout after a seek\n      }\n    });\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      this.showUi(); // Show UI when a Cast session has started (UI will then stay permanently on during the session)\n    });\n    this.playerStateChange.subscribe((_, state) => {\n      playerState = state;\n      if (hidingPrevented()) {\n        // Entering a player state that prevents hiding and forces the controls to be shown\n        this.uiHideTimeout.clear();\n        this.showUi();\n      } else {\n        // Entering a player state that allows hiding\n        this.uiHideTimeout.start();\n      }\n    });\n  }\n\n  private configurePlayerStates(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    let container = this.getDomElement();\n\n    // Convert player states into CSS class names\n    let stateClassNames = <any>[];\n    for (let state in PlayerUtils.PlayerState) {\n      if (isNaN(Number(state))) {\n        let enumName = PlayerUtils.PlayerState[<any>PlayerUtils.PlayerState[state]];\n        stateClassNames[PlayerUtils.PlayerState[state]] =\n          this.prefixCss(UIContainer.STATE_PREFIX + enumName.toLowerCase());\n      }\n    }\n\n    let removeStates = () => {\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Idle]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Prepared]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Playing]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Paused]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Finished]);\n    };\n\n    const updateState = (state: PlayerUtils.PlayerState) => {\n      removeStates();\n      container.addClass(stateClassNames[state]);\n      this.playerStateChange.dispatch(this, state);\n    };\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, () => {\n      updateState(PlayerUtils.PlayerState.Prepared);\n    });\n    player.on(player.exports.PlayerEvent.Play, () => {\n      updateState(PlayerUtils.PlayerState.Playing);\n    });\n    player.on(player.exports.PlayerEvent.Playing, () => {\n      updateState(PlayerUtils.PlayerState.Playing);\n    });\n    player.on(player.exports.PlayerEvent.Paused, () => {\n      updateState(PlayerUtils.PlayerState.Paused);\n    });\n    player.on(player.exports.PlayerEvent.PlaybackFinished, () => {\n      updateState(PlayerUtils.PlayerState.Finished);\n    });\n    player.on(player.exports.PlayerEvent.SourceUnloaded, () => {\n      updateState(PlayerUtils.PlayerState.Idle);\n    });\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      updateState(PlayerUtils.getState(player));\n    });\n\n    // Fullscreen marker class\n    player.on(player.exports.PlayerEvent.ViewModeChanged, () => {\n      if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n        container.addClass(this.prefixCss(UIContainer.FULLSCREEN));\n      } else {\n        container.removeClass(this.prefixCss(UIContainer.FULLSCREEN));\n      }\n    });\n    // Init fullscreen state\n    if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n      container.addClass(this.prefixCss(UIContainer.FULLSCREEN));\n    }\n\n    // Buffering marker class\n    player.on(player.exports.PlayerEvent.StallStarted, () => {\n      container.addClass(this.prefixCss(UIContainer.BUFFERING));\n    });\n    player.on(player.exports.PlayerEvent.StallEnded, () => {\n      container.removeClass(this.prefixCss(UIContainer.BUFFERING));\n    });\n    // Init buffering state\n    if (player.isStalled()) {\n      container.addClass(this.prefixCss(UIContainer.BUFFERING));\n    }\n\n    // RemoteControl marker class\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      container.addClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, () => {\n      container.removeClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    });\n    // Init RemoteControl state\n    if (player.isCasting()) {\n      container.addClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    }\n\n    // Controls visibility marker class\n    uimanager.onControlsShow.subscribe(() => {\n      container.removeClass(this.prefixCss(UIContainer.CONTROLS_HIDDEN));\n      container.addClass(this.prefixCss(UIContainer.CONTROLS_SHOWN));\n    });\n    uimanager.onControlsHide.subscribe(() => {\n      container.removeClass(this.prefixCss(UIContainer.CONTROLS_SHOWN));\n      container.addClass(this.prefixCss(UIContainer.CONTROLS_HIDDEN));\n    });\n\n    // Layout size classes\n    let updateLayoutSizeClasses = (width: number, height: number) => {\n      container.removeClass(this.prefixCss('layout-max-width-400'));\n      container.removeClass(this.prefixCss('layout-max-width-600'));\n      container.removeClass(this.prefixCss('layout-max-width-800'));\n      container.removeClass(this.prefixCss('layout-max-width-1200'));\n\n      if (width <= 400) {\n        container.addClass(this.prefixCss('layout-max-width-400'));\n      } else if (width <= 600) {\n        container.addClass(this.prefixCss('layout-max-width-600'));\n      } else if (width <= 800) {\n        container.addClass(this.prefixCss('layout-max-width-800'));\n      } else if (width <= 1200) {\n        container.addClass(this.prefixCss('layout-max-width-1200'));\n      }\n    };\n    player.on(player.exports.PlayerEvent.PlayerResized, (e: PlayerResizedEvent) => {\n      // Convert strings (with \"px\" suffix) to ints\n      let width = Math.round(Number(e.width.substring(0, e.width.length - 2)));\n      let height = Math.round(Number(e.height.substring(0, e.height.length - 2)));\n\n      updateLayoutSizeClasses(width, height);\n    });\n    // Init layout state\n    updateLayoutSizeClasses(new DOM(player.getContainer()).width(), new DOM(player.getContainer()).height());\n  }\n\n  release(): void {\n    // Explicitly unsubscribe user interaction event handlers because they could be attached to an external element\n    // that isn't owned by the UI and therefore not removed on release.\n    if (this.userInteractionEvents) {\n      this.userInteractionEvents.forEach((event) => this.userInteractionEventSource.off(event.name, event.handler));\n    }\n\n    super.release();\n\n    if (this.uiHideTimeout) {\n      this.uiHideTimeout.clear();\n    }\n  }\n\n  protected toDomElement(): DOM {\n    let container = super.toDomElement();\n\n    // Detect flexbox support (not supported in IE9)\n    if (document && typeof document.createElement('p').style.flex !== 'undefined') {\n      container.addClass(this.prefixCss('flexbox'));\n    } else {\n      container.addClass(this.prefixCss('no-flexbox'));\n    }\n\n    return container;\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between 'auto' and the available video qualities.\n */\nexport class VideoQualitySelectBox extends SelectBox {\n\n  private hasAuto: boolean;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-videoqualityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let selectCurrentVideoQuality = () => {\n      this.selectItem(player.getVideoQuality().id);\n    };\n\n    let updateVideoQualities = () => {\n      let videoQualities = player.getAvailableVideoQualities();\n\n      this.clearItems();\n\n      // Progressive streams do not support automatic quality selection\n      this.hasAuto = player.getStreamType() !== 'progressive';\n\n      if (this.hasAuto) {\n        // Add entry for automatic quality switching (default setting)\n        this.addItem('auto', i18n.getLocalizer('auto'));\n      }\n\n      // Add video qualities\n      for (let videoQuality of videoQualities) {\n        this.addItem(videoQuality.id, videoQuality.label);\n      }\n\n      // Select initial quality\n      selectCurrentVideoQuality();\n    };\n\n    this.onItemSelected.subscribe((sender: VideoQualitySelectBox, value: string) => {\n      player.setVideoQuality(value);\n    });\n\n    // Update qualities when source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, updateVideoQualities);\n    // Update qualities when the period within a source changes\n    player.on(player.exports.PlayerEvent.PeriodSwitched, updateVideoQualities);\n    // Update quality selection when quality is changed (from outside)\n    player.on(player.exports.PlayerEvent.VideoQualityChanged, selectCurrentVideoQuality);\n\n    if ((player.exports.PlayerEvent as any).VideoQualityAdded) {\n      // Update qualities when their availability changed\n      // TODO: remove any cast after next player release\n      player.on((player.exports.PlayerEvent as any).VideoQualityAdded, updateVideoQualities);\n      player.on((player.exports.PlayerEvent as any).VideoQualityRemoved, updateVideoQualities);\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(updateVideoQualities);\n  }\n\n  /**\n   * Returns true if the select box contains an 'auto' item for automatic quality selection mode.\n   * @return {boolean}\n   */\n  hasAutoItem(): boolean {\n    return this.hasAuto;\n  }\n}","import {Container, ContainerConfig} from './container';\nimport {VolumeSlider} from './volumeslider';\nimport {VolumeToggleButton} from './volumetogglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for a {@link VolumeControlButton}.\n */\nexport interface VolumeControlButtonConfig extends ContainerConfig {\n  /**\n   * The delay after which the volume slider will be hidden when there is no user interaction.\n   * Care must be taken that the delay is long enough so users can reach the slider from the toggle button, e.g. by\n   * mouse movement. If the delay is too short, the sliders disappears before the mouse pointer has reached it and\n   * the user is not able to use it.\n   * Default: 500ms\n   */\n  hideDelay?: number;\n  /**\n   * Specifies if the volume slider should be vertically or horizontally aligned.\n   * Default: true\n   */\n  vertical?: boolean;\n}\n\n/**\n * A composite volume control that consists of and internally manages a volume control button that can be used\n * for muting, and a (depending on the CSS style, e.g. slide-out) volume control bar.\n */\nexport class VolumeControlButton extends Container<VolumeControlButtonConfig> {\n\n  private volumeToggleButton: VolumeToggleButton;\n  private volumeSlider: VolumeSlider;\n\n  private volumeSliderHideTimeout: Timeout;\n\n  constructor(config: VolumeControlButtonConfig = {}) {\n    super(config);\n\n    this.volumeToggleButton = new VolumeToggleButton();\n    this.volumeSlider = new VolumeSlider({\n      vertical: config.vertical != null ? config.vertical : true,\n      hidden: true,\n    });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-volumecontrolbutton',\n      components: [this.volumeToggleButton, this.volumeSlider],\n      hideDelay: 500,\n    }, <VolumeControlButtonConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let volumeToggleButton = this.getVolumeToggleButton();\n    let volumeSlider = this.getVolumeSlider();\n\n    this.volumeSliderHideTimeout = new Timeout(this.getConfig().hideDelay, () => {\n      volumeSlider.hide();\n    });\n\n    /*\n     * Volume Slider visibility handling\n     *\n     * The volume slider shall be visible while the user hovers the mute toggle button, while the user hovers the\n     * volume slider, and while the user slides the volume slider. If none of these situations are true, the slider\n     * shall disappear.\n     */\n    let volumeSliderHovered = false;\n    volumeToggleButton.getDomElement().on('mouseenter', () => {\n      // Show volume slider when mouse enters the button area\n      if (volumeSlider.isHidden()) {\n        volumeSlider.show();\n      }\n      // Avoid hiding of the slider when button is hovered\n      this.volumeSliderHideTimeout.clear();\n    });\n    volumeToggleButton.getDomElement().on('mouseleave', () => {\n      // Hide slider delayed when button is left\n      this.volumeSliderHideTimeout.reset();\n    });\n    volumeSlider.getDomElement().on('mouseenter', () => {\n      // When the slider is entered, cancel the hide timeout activated by leaving the button\n      this.volumeSliderHideTimeout.clear();\n      volumeSliderHovered = true;\n    });\n    volumeSlider.getDomElement().on('mouseleave', () => {\n      // When mouse leaves the slider, only hide it if there is no slide operation in progress\n      if (volumeSlider.isSeeking()) {\n        this.volumeSliderHideTimeout.clear();\n      } else {\n        this.volumeSliderHideTimeout.reset();\n      }\n      volumeSliderHovered = false;\n    });\n    volumeSlider.onSeeked.subscribe(() => {\n      // When a slide operation is done and the slider not hovered (mouse outside slider), hide slider delayed\n      if (!volumeSliderHovered) {\n        this.volumeSliderHideTimeout.reset();\n      }\n    });\n  }\n\n  release(): void {\n    super.release();\n    this.volumeSliderHideTimeout.clear();\n  }\n\n  /**\n   * Provides access to the internally managed volume toggle button.\n   * @returns {VolumeToggleButton}\n   */\n  getVolumeToggleButton(): VolumeToggleButton {\n    return this.volumeToggleButton;\n  }\n\n  /**\n   * Provides access to the internally managed volume silder.\n   * @returns {VolumeSlider}\n   */\n  getVolumeSlider(): VolumeSlider {\n    return this.volumeSlider;\n  }\n}","import { SeekBar, SeekBarConfig, SeekPreviewEventArgs } from './seekbar';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { VolumeTransition } from '../volumecontroller';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link VolumeSlider} component.\n */\nexport interface VolumeSliderConfig extends SeekBarConfig {\n  /**\n   * Specifies if the volume slider should be automatically hidden when volume control is prohibited by the\n   * browser or platform. This currently only applies to iOS.\n   * Default: true\n   */\n  hideIfVolumeControlProhibited?: boolean;\n}\n\n/**\n * A simple volume slider component to adjust the player's volume setting.\n */\nexport class VolumeSlider extends SeekBar {\n  private volumeTransition: VolumeTransition;\n\n  constructor(config: VolumeSliderConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <VolumeSliderConfig>{\n      cssClass: 'ui-volumeslider',\n      hideIfVolumeControlProhibited: true,\n      ariaLabel: i18n.getLocalizer('settings.audio.volume'),\n      tabIndex: 0,\n    }, this.config);\n  }\n\n  private setVolumeAriaSliderValues(value: number) {\n    this.getDomElement().attr('aria-valuenow', Math.ceil(value).toString());\n    this.getDomElement().attr('aria-valuetext', `${i18n.performLocalization(i18n.getLocalizer('seekBar.value'))}: ${Math.ceil(value)}`);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager, false);\n\n    this.setAriaSliderMinMax('0', '100');\n\n    let config = <VolumeSliderConfig>this.getConfig();\n\n    const volumeController = uimanager.getConfig().volumeController;\n\n    if (config.hideIfVolumeControlProhibited && !this.detectVolumeControlAvailability()) {\n      this.hide();\n\n      // We can just return from here, because the user will never interact with the control and any configured\n      // functionality would only eat resources for no reason.\n      return;\n    }\n\n    volumeController.onChanged.subscribe((_, args) => {\n      if (args.muted) {\n        this.setVolumeAriaSliderValues(0);\n        this.setPlaybackPosition(0);\n      } else {\n        this.setPlaybackPosition(args.volume);\n        this.setVolumeAriaSliderValues(args.volume);\n      }\n    });\n\n    this.onSeek.subscribe(() => {\n      this.volumeTransition = volumeController.startTransition();\n    });\n\n    this.onSeekPreview.subscribeRateLimited(this.updateVolumeWhileScrubbing, 50);\n    this.onSeeked.subscribe((sender, percentage) => {\n      if (this.volumeTransition) {\n        this.volumeTransition.finish(percentage);\n      }\n    });\n\n    // Update the volume slider marker when the player resized, a source is loaded,\n    // or the UI is configured. Check the seekbar for a detailed description.\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      this.refreshPlaybackPosition();\n    });\n    uimanager.onConfigured.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    uimanager.onComponentShow.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n    uimanager.onComponentHide.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    // Init volume bar\n    volumeController.onChangedEvent();\n  }\n\n  private updateVolumeWhileScrubbing = (sender: VolumeSlider, args: SeekPreviewEventArgs) => {\n    if (args.scrubbing && this.volumeTransition) {\n      this.volumeTransition.update(args.position);\n    }\n  };\n\n  private detectVolumeControlAvailability(): boolean {\n    /*\n     * \"On iOS devices, the audio level is always under the user’s physical control. The volume property is not\n     * settable in JavaScript. Reading the volume property always returns 1.\"\n     * https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html\n     */\n    // as muted autoplay gets paused as soon as we unmute it, we may not touch the volume of the actual player so we\n    // probe a dummy audio element\n    const dummyVideoElement = document.createElement('video');\n    // try setting the volume to 0.7 and if it's still 1 we are on a volume control restricted device\n    dummyVideoElement.volume = 0.7;\n    return dummyVideoElement.volume !== 1;\n  }\n\n  release(): void {\n    super.release();\n\n    this.onSeekPreview.unsubscribe(this.updateVolumeWhileScrubbing);\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles audio muting.\n */\nexport class VolumeToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    const defaultConfig: ToggleButtonConfig = {\n      cssClass: 'ui-volumetogglebutton',\n      text: i18n.getLocalizer('settings.audio.mute'),\n      onClass: 'muted',\n      offClass: 'unmuted',\n      ariaLabel: i18n.getLocalizer('settings.audio.mute'),\n    };\n\n    this.config = this.mergeConfig(config, defaultConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const volumeController = uimanager.getConfig().volumeController;\n\n    volumeController.onChanged.subscribe((_, args) => {\n      if (args.muted) {\n        this.on();\n      } else {\n        this.off();\n      }\n\n      const volumeLevelTens = Math.ceil(args.volume / 10);\n      this.getDomElement().data(this.prefixCss('volume-level-tens'), String(volumeLevelTens));\n    });\n\n    this.onClick.subscribe(() => {\n      volumeController.toggleMuted();\n    });\n\n    // Startup init\n    volumeController.onChangedEvent();\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI, PlayerEventBase, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles the video view between normal/mono and VR/stereo.\n */\nexport class VRToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-vrtogglebutton',\n      text: i18n.getLocalizer('vr'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let isVRConfigured = () => {\n      // VR availability cannot be checked through getVRStatus() because it is asynchronously populated and not\n      // available at UI initialization. As an alternative, we check the VR settings in the config.\n      // TODO use getVRStatus() through isVRStereoAvailable() once the player has been rewritten and the status is\n      // available in Ready\n      const source = player.getSource();\n      return source && Boolean(source.vr);\n    };\n\n    let isVRStereoAvailable = () => {\n      const source = player.getSource();\n      return player.vr && Boolean(source.vr);\n    };\n\n    let vrStateHandler = (ev: PlayerEventBase) => {\n      if (ev.type === player.exports.PlayerEvent.Warning\n        && (ev as WarningEvent).code !== player.exports.WarningCode.VR_RENDERING_ERROR) {\n        return;\n      }\n\n      if (isVRConfigured() && isVRStereoAvailable()) {\n        this.show(); // show button in case it is hidden\n\n        if (player.vr && player.vr.getStereo()) {\n          this.on();\n        } else {\n          this.off();\n        }\n      } else {\n        this.hide(); // hide button if no stereo mode available\n      }\n    };\n\n    let vrButtonVisibilityHandler = () => {\n      if (isVRConfigured()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.VRStereoChanged, vrStateHandler);\n    player.on(player.exports.PlayerEvent.Warning, vrStateHandler);\n    // Hide button when VR source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, vrButtonVisibilityHandler);\n    uimanager.getConfig().events.onUpdated.subscribe(vrButtonVisibilityHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isVRStereoAvailable()) {\n        if (console) {\n          console.log('No VR content');\n        }\n      } else {\n        if (player.vr && player.vr.getStereo()) {\n          player.vr.setStereo(false);\n        } else {\n          player.vr.setStereo(true);\n        }\n      }\n    });\n\n    // Set startup visibility\n    vrButtonVisibilityHandler();\n  }\n}","import {ClickOverlay, ClickOverlayConfig} from './clickoverlay';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link ClickOverlay}.\n */\nexport interface WatermarkConfig extends ClickOverlayConfig {\n  // nothing yet\n}\n\n/**\n * A watermark overlay with a clickable logo.\n */\nexport class Watermark extends ClickOverlay {\n\n  constructor(config: WatermarkConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-watermark',\n      url: 'http://bitmovin.com',\n      role: 'link',\n      text: 'logo',\n      ariaLabel: i18n.getLocalizer('watermarkLink'),\n    }, <WatermarkConfig>this.config);\n  }\n}","import {VRToggleButton} from './components/vrtogglebutton';\nimport {SettingsToggleButton} from './components/settingstogglebutton';\nimport {VolumeSlider} from './components/volumeslider';\nimport {PlaybackTimeLabel, PlaybackTimeLabelMode} from './components/playbacktimelabel';\nimport {AirPlayToggleButton} from './components/airplaytogglebutton';\nimport {ErrorMessageOverlay} from './components/errormessageoverlay';\nimport {ControlBar} from './components/controlbar';\nimport {CastToggleButton} from './components/casttogglebutton';\nimport {FullscreenToggleButton} from './components/fullscreentogglebutton';\nimport {RecommendationOverlay} from './components/recommendationoverlay';\nimport {PlaybackSpeedSelectBox} from './components/playbackspeedselectbox';\nimport {AudioQualitySelectBox} from './components/audioqualityselectbox';\nimport {CastStatusOverlay} from './components/caststatusoverlay';\nimport {UIContainer} from './components/uicontainer';\nimport {Watermark} from './components/watermark';\nimport {SubtitleOverlay} from './components/subtitleoverlay';\nimport {SettingsPanel} from './components/settingspanel';\nimport {SeekBarLabel} from './components/seekbarlabel';\nimport {PlaybackToggleOverlay} from './components/playbacktoggleoverlay';\nimport {PictureInPictureToggleButton} from './components/pictureinpicturetogglebutton';\nimport {Spacer} from './components/spacer';\nimport {Container} from './components/container';\nimport {VolumeToggleButton} from './components/volumetogglebutton';\nimport {PlaybackToggleButton} from './components/playbacktogglebutton';\nimport {SeekBar} from './components/seekbar';\nimport {VideoQualitySelectBox} from './components/videoqualityselectbox';\nimport {UIConditionContext, UIManager} from './uimanager';\nimport {TitleBar} from './components/titlebar';\nimport {BufferingOverlay} from './components/bufferingoverlay';\nimport {SubtitleListBox} from './components/subtitlelistbox';\nimport {AudioTrackListBox} from './components/audiotracklistbox';\nimport {SettingsPanelItem} from './components/settingspanelitem';\nimport {SettingsPanelPage} from './components/settingspanelpage';\nimport { UIFactory } from './uifactory';\nimport { UIConfig } from './uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport namespace DemoFactory {\n\n  export function buildDemoWithSeparateAudioSubtitlesButtons(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    // show smallScreen UI only on mobile/handheld devices\n    let smallScreenSwitchWidth = 600;\n\n    return new UIManager(player, [{\n      ui: UIFactory.modernSmallScreenAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth\n          && context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: UIFactory.modernAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: UIFactory.modernSmallScreenUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth;\n      },\n    }, {\n      ui: modernUIWithSeparateAudioSubtitlesButtons(),\n    }], config);\n  }\n\n  function modernUIWithSeparateAudioSubtitlesButtons() {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let settingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem('Video Quality', new VideoQualitySelectBox()),\n            new SettingsPanelItem('Speed', new PlaybackSpeedSelectBox()),\n            new SettingsPanelItem('Audio Quality', new AudioQualitySelectBox()),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let subtitleListBox = new SubtitleListBox();\n    let subtitleSettingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem(null, subtitleListBox),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let audioTrackListBox = new AudioTrackListBox();\n    let audioTrackSettingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem(null, audioTrackListBox),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let controlBar = new ControlBar({\n      components: [\n        audioTrackSettingsPanel,\n        subtitleSettingsPanel,\n        settingsPanel,\n        new Container({\n          components: [\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n        new Container({\n          components: [\n            new PlaybackToggleButton(),\n            new VolumeToggleButton(),\n            new VolumeSlider(),\n            new Spacer(),\n            new PictureInPictureToggleButton(),\n            new AirPlayToggleButton(),\n            new CastToggleButton(),\n            new VRToggleButton(),\n            new SettingsToggleButton({\n              settingsPanel: audioTrackSettingsPanel,\n              cssClass: 'ui-audiotracksettingstogglebutton',\n            }),\n            new SettingsToggleButton({\n              settingsPanel: subtitleSettingsPanel,\n              cssClass: 'ui-subtitlesettingstogglebutton',\n            }),\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\n            new FullscreenToggleButton(),\n          ],\n          cssClasses: ['controlbar-bottom'],\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new CastStatusOverlay(),\n        controlBar,\n        new TitleBar(),\n        new RecommendationOverlay(),\n        new Watermark(),\n        new ErrorMessageOverlay(),\n      ],\n    });\n  }\n}","export interface Offset {\n  left: number;\n  top: number;\n}\n\nexport interface Size {\n  width: number;\n  height: number;\n}\n\nexport interface CssProperties {\n  [propertyName: string]: string;\n}\n\n/**\n * Simple DOM manipulation and DOM element event handling modeled after jQuery (as replacement for jQuery).\n *\n * Like jQuery, DOM operates on single elements and lists of elements. For example: creating an element returns a DOM\n * instance with a single element, selecting elements returns a DOM instance with zero, one, or many elements. Similar\n * to jQuery, setters usually affect all elements, while getters operate on only the first element.\n * Also similar to jQuery, most methods (except getters) return the DOM instance facilitating easy chaining of method\n * calls.\n *\n * Built with the help of: http://youmightnotneedjquery.com/\n */\nexport class DOM {\n\n  private document: Document;\n\n  /**\n   * The list of elements that the instance wraps. Take care that not all methods can operate on the whole list,\n   * getters usually just work on the first element.\n   */\n  private elements: HTMLElement[];\n\n  /**\n   * Creates a DOM element.\n   * @param tagName the tag name of the DOM element\n   * @param attributes a list of attributes of the element\n   */\n  constructor(tagName: string, attributes: {[name: string]: string});\n  /**\n   * Selects all elements from the DOM that match the specified selector.\n   * @param selector the selector to match DOM elements with\n   */\n  constructor(selector: string);\n  /**\n   * Wraps a plain HTMLElement with a DOM instance.\n   * @param element the HTMLElement to wrap with DOM\n   */\n  constructor(element: HTMLElement);\n  /**\n   * Wraps a list of plain HTMLElements with a DOM instance.\n   * @param elements the HTMLElements to wrap with DOM\n   */\n  constructor(elements: HTMLElement[]);\n  /**\n   * Wraps the document with a DOM instance. Useful to attach event listeners to the document.\n   * @param document the document to wrap\n   */\n  constructor(document: Document);\n  constructor(something: string | HTMLElement | HTMLElement[] | Document, attributes?: {[name: string]: string}) {\n    this.document = document; // Set the global document to the local document field\n\n    if (something instanceof Array) {\n      if (something.length > 0 && something[0] instanceof HTMLElement) {\n        let elements = something;\n        this.elements = elements;\n      }\n    }\n    else if (something instanceof HTMLElement) {\n      let element = something;\n      this.elements = [element];\n    }\n    else if (something instanceof Document) {\n      // When a document is passed in, we do not do anything with it, but by setting this.elements to null\n      // we give the event handling method a means to detect if the events should be registered on the document\n      // instead of elements.\n      this.elements = null;\n    }\n    else if (attributes) {\n      let tagName = something;\n      let element = document.createElement(tagName);\n\n      for (let attributeName in attributes) {\n        let attributeValue = attributes[attributeName];\n        if (attributeValue != null) {\n          element.setAttribute(attributeName, attributeValue);\n        }\n      }\n\n      this.elements = [element];\n    }\n    else {\n      let selector = something;\n      this.elements = this.findChildElements(selector);\n    }\n  }\n\n  /**\n   * Gets the number of elements that this DOM instance currently holds.\n   * @returns {number} the number of elements\n   */\n  get length(): number {\n    return this.elements ? this.elements.length : 0;\n  }\n\n  /**\n   * Gets the HTML elements that this DOM instance currently holds.\n   * @returns {HTMLElement[]} the raw HTML elements\n   */\n  get(): HTMLElement[];\n  /**\n   * Gets an HTML element from the list elements that this DOM instance currently holds.\n   * @param index The zero-based index into the element list. Can be negative to return an element from the end,\n   *    e.g. -1 returns the last element.\n   */\n  get(index: number): HTMLElement;\n  get(index?: number): HTMLElement | HTMLElement[] {\n    if (index === undefined) {\n      return this.elements;\n    } else if (!this.elements || index >= this.elements.length || index < -this.elements.length) {\n      return undefined;\n    } else if (index < 0) {\n      return this.elements[this.elements.length - index];\n    } else {\n      return this.elements[index];\n    }\n  }\n\n  /**\n   * A shortcut method for iterating all elements. Shorts this.elements.forEach(...) to this.forEach(...).\n   * @param handler the handler to execute an operation on an element\n   */\n  private forEach(handler: (element: HTMLElement) => void): void {\n    if (!this.elements) {\n      return;\n    }\n    this.elements.forEach((element) => {\n      handler(element);\n    });\n  }\n\n  private findChildElementsOfElement(element: HTMLElement | Document, selector: string): HTMLElement[] {\n    let childElements = element.querySelectorAll(selector);\n\n    // Convert NodeList to Array\n    // https://toddmotto.com/a-comprehensive-dive-into-nodelists-arrays-converting-nodelists-and-understanding-the-dom/\n    return [].slice.call(childElements);\n  }\n\n  private findChildElements(selector: string): HTMLElement[] {\n    let allChildElements = <HTMLElement[]>[];\n\n    if (this.elements) {\n      this.forEach((element) => {\n        allChildElements = allChildElements.concat(this.findChildElementsOfElement(element, selector));\n      });\n    }\n    else {\n      return this.findChildElementsOfElement(document, selector);\n    }\n\n    return allChildElements;\n  }\n\n  /**\n   * Finds all child elements of all elements matching the supplied selector.\n   * @param selector the selector to match with child elements\n   * @returns {DOM} a new DOM instance representing all matched children\n   */\n  find(selector: string): DOM {\n    let allChildElements = this.findChildElements(selector);\n    return new DOM(allChildElements);\n  }\n\n  /**\n   * Focuses to the first input element\n   */\n  focusToFirstInput() {\n    const inputElements = this.findChildElements('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n\n    if (inputElements.length > 0) {\n      inputElements[0].focus();\n    }\n  }\n\n  /**\n   * Focuses to the first input element\n   */\n  scrollTo(x: number, y: number) {\n    this.elements[0].scrollTo(x, y);\n  }\n\n  /**\n   * Returns a string of the inner HTML content of the first element.\n   */\n  html(): string;\n  /**\n   * Sets the inner HTML content of all elements.\n   * @param content a string of plain text or HTML markup\n   */\n  html(content: string): DOM;\n  html(content?: string): string | DOM {\n    if (arguments.length > 0) {\n      return this.setHtml(content);\n    }\n    else {\n      return this.getHtml();\n    }\n  }\n\n  private getHtml(): string | null {\n    return this.elements[0].innerHTML;\n  }\n\n  private setHtml(content: string): DOM {\n    if (content === undefined || content == null) {\n      // Set to empty string to avoid innerHTML getting set to 'undefined' (all browsers) or 'null' (IE9)\n      content = '';\n    }\n\n    this.forEach((element) => {\n      element.innerHTML = content;\n    });\n\n    return this;\n  }\n\n  /**\n   * Clears the inner HTML of all elements (deletes all children).\n   * @returns {DOM}\n   */\n  empty(): DOM {\n    this.forEach((element) => {\n      element.innerHTML = '';\n    });\n    return this;\n  }\n\n  /**\n   * Returns the current value of the first form element, e.g. the selected value of a select box or the text if an\n   * input field.\n   * @returns {string} the value of a form element\n   */\n  val(): string {\n    let element = this.elements[0];\n\n    if (element instanceof HTMLSelectElement || element instanceof HTMLInputElement) {\n      return element.value;\n    }\n    else {\n      // TODO add support for missing form elements\n      throw new Error(`val() not supported for ${typeof element}`);\n    }\n  }\n\n  /**\n   * Returns the value of an attribute on the first element.\n   * @param attribute\n   */\n  attr(attribute: string): string | null;\n  /**\n   * Sets an attribute on all elements.\n   * @param attribute the name of the attribute\n   * @param value the value of the attribute\n   */\n  attr(attribute: string, value: string): DOM;\n  attr(attribute: string, value?: string): string | null | DOM {\n    if (arguments.length > 1) {\n      return this.setAttr(attribute, value);\n    }\n    else {\n      return this.getAttr(attribute);\n    }\n  }\n\n  /**\n   * Removes the attribute of the element.\n   * @param attribute\n   */\n  removeAttr(attribute: string) {\n    this.forEach((element) => {\n      element.removeAttribute(attribute);\n    });\n  }\n\n  private getAttr(attribute: string): string | null {\n    return this.elements[0].getAttribute(attribute);\n  }\n\n  private setAttr(attribute: string, value: string): DOM {\n    this.forEach((element) => {\n      element.setAttribute(attribute, value);\n    });\n    return this;\n  }\n\n  /**\n   * Returns the value of a data element on the first element.\n   * @param dataAttribute the name of the data attribute without the 'data-' prefix\n   */\n  data(dataAttribute: string): string | null;\n  /**\n   * Sets a data attribute on all elements.\n   * @param dataAttribute the name of the data attribute without the 'data-' prefix\n   * @param value the value of the data attribute\n   */\n  data(dataAttribute: string, value: string): DOM;\n  data(dataAttribute: string, value?: string): string | null | DOM {\n    if (arguments.length > 1) {\n      return this.setData(dataAttribute, value);\n    }\n    else {\n      return this.getData(dataAttribute);\n    }\n  }\n\n  private getData(dataAttribute: string): string | null {\n    return this.elements[0].getAttribute('data-' + dataAttribute);\n  }\n\n  private setData(dataAttribute: string, value: string): DOM {\n    this.forEach((element) => {\n      element.setAttribute('data-' + dataAttribute, value);\n    });\n    return this;\n  }\n\n  /**\n   * Appends one or more DOM elements as children to all elements.\n   * @param childElements the chrild elements to append\n   * @returns {DOM}\n   */\n  append(...childElements: DOM[]): DOM {\n    this.forEach((element) => {\n      childElements.forEach((childElement) => {\n        childElement.elements.forEach((_, index) => {\n          element.appendChild(childElement.elements[index]);\n        });\n      });\n    });\n    return this;\n  }\n\n  /**\n   * Removes all elements from the DOM.\n   */\n  remove(): void {\n    this.forEach((element) => {\n      let parent = element.parentNode;\n      if (parent) {\n        parent.removeChild(element);\n      }\n    });\n  }\n\n  /**\n   * Returns the offset of the first element from the document's top left corner.\n   * @returns {Offset}\n   */\n  offset(): Offset {\n    let element = this.elements[0];\n    let elementRect = element.getBoundingClientRect();\n    let htmlRect = document.body.parentElement.getBoundingClientRect();\n\n    // Virtual viewport scroll handling (e.g. pinch zoomed viewports in mobile browsers or desktop Chrome/Edge)\n    // 'normal' zooms and virtual viewport zooms (aka layout viewport) result in different\n    // element.getBoundingClientRect() results:\n    //  - with normal scrolls, the clientRect decreases with an increase in scroll(Top|Left)/page(X|Y)Offset\n    //  - with pinch zoom scrolls, the clientRect stays the same while scroll/pageOffset changes\n    // This means, that the combination of clientRect + scroll/pageOffset does not work to calculate the offset\n    // from the document's upper left origin when pinch zoom is used.\n    // To work around this issue, we do not use scroll/pageOffset but get the clientRect of the html element and\n    // subtract it from the element's rect, which always results in the offset from the document origin.\n    // NOTE: the current way of offset calculation was implemented specifically to track event positions on the\n    // seek bar, and it might break compatibility with jQuery's offset() method. If this ever turns out to be a\n    // problem, this method should be reverted to the old version and the offset calculation moved to the seek bar.\n\n    return {\n      top: elementRect.top - htmlRect.top,\n      left: elementRect.left - htmlRect.left,\n    };\n  }\n\n  /**\n   * Returns the width of the first element.\n   * @returns {number} the width of the first element\n   */\n  width(): number {\n    // TODO check if this is the same as jQuery's width() (probably not)\n    return this.elements[0].offsetWidth;\n  }\n\n  /**\n   * Returns the height of the first element.\n   * @returns {number} the height of the first element\n   */\n  height(): number {\n    // TODO check if this is the same as jQuery's height() (probably not)\n    return this.elements[0].offsetHeight;\n  }\n\n  /**\n   * Returns the size of the first element.\n   * @return {Size} the size of the first element\n   */\n  size(): Size {\n    return { width: this.width(), height: this.height() };\n  }\n\n  /**\n   * Attaches an event handler to one or more events on all elements.\n   * @param eventName the event name (or multiple names separated by space) to listen to\n   * @param eventHandler the event handler to call when the event fires\n   * @returns {DOM}\n   */\n  on(eventName: string, eventHandler: EventListenerOrEventListenerObject): DOM {\n    let events = eventName.split(' ');\n\n    events.forEach((event) => {\n      if (this.elements == null) {\n        this.document.addEventListener(event, eventHandler);\n      }\n      else {\n        this.forEach((element) => {\n          element.addEventListener(event, eventHandler);\n        });\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Removes an event handler from one or more events on all elements.\n   * @param eventName the event name (or multiple names separated by space) to remove the handler from\n   * @param eventHandler the event handler to remove\n   * @returns {DOM}\n   */\n  off(eventName: string, eventHandler: EventListenerOrEventListenerObject): DOM {\n    let events = eventName.split(' ');\n\n    events.forEach((event) => {\n      if (this.elements == null) {\n        this.document.removeEventListener(event, eventHandler);\n      }\n      else {\n        this.forEach((element) => {\n          element.removeEventListener(event, eventHandler);\n        });\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Adds the specified class(es) to all elements.\n   * @param className the class(es) to add, multiple classes separated by space\n   * @returns {DOM}\n   */\n  addClass(className: string): DOM {\n    this.forEach((element) => {\n      if (element.classList) {\n        const classNames = className.split(' ')\n          .filter(className => className.length > 0);\n\n        if (classNames.length > 0) {\n          element.classList.add(...classNames);\n        }\n      }\n      else {\n        element.className += ' ' + className;\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Removed the specified class(es) from all elements.\n   * @param className the class(es) to remove, multiple classes separated by space\n   * @returns {DOM}\n   */\n  removeClass(className: string): DOM {\n    this.forEach((element) => {\n      if (element.classList) {\n        const classNames = className.split(' ')\n          .filter(className => className.length > 0);\n\n        if (classNames.length > 0) {\n          element.classList.remove(...classNames);\n        }\n      }\n      else {\n        element.className = element.className.replace(\n          new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Checks if any of the elements has the specified class.\n   * @param className the class name to check\n   * @returns {boolean} true if one of the elements has the class attached, else if no element has it attached\n   */\n  hasClass(className: string): boolean {\n    let hasClass = false;\n\n    this.forEach((element) => {\n      if (element.classList) {\n        if (element.classList.contains(className)) {\n          // Since we are inside a handler, we can't just 'return true'. Instead, we save it to a variable\n          // and return it at the end of the function body.\n          hasClass = true;\n        }\n      }\n      else {\n        if (new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className)) {\n          // See comment above\n          hasClass = true;\n        }\n      }\n    });\n\n    return hasClass;\n  }\n\n  /**\n   * Returns the value of a CSS property of the first element.\n   * @param propertyName the name of the CSS property to retrieve the value of\n   */\n  css(propertyName: string): string | null;\n  /**\n   * Sets the value of a CSS property on all elements.\n   * @param propertyName the name of the CSS property to set the value for\n   * @param value the value to set for the given CSS property\n   */\n  css(propertyName: string, value: string): DOM;\n  /**\n   * Sets a collection of CSS properties and their values on all elements.\n   * @param propertyValueCollection an object containing pairs of property names and their values\n   */\n  css(propertyValueCollection: CssProperties): DOM;\n  css(propertyNameOrCollection: string | CssProperties, value?: string): string | null | DOM {\n    if (typeof propertyNameOrCollection === 'string') {\n      let propertyName = propertyNameOrCollection;\n\n      if (arguments.length === 2) {\n        return this.setCss(propertyName, value);\n      }\n      else {\n        return this.getCss(propertyName);\n      }\n    }\n    else {\n      let propertyValueCollection = propertyNameOrCollection;\n      return this.setCssCollection(propertyValueCollection);\n    }\n  }\n\n  /**\n   * Removes an inline CSS property if it exists\n   * @param propertyName name of the property to remove\n   * @param elementIndex index of the element whose CSS property should get removed\n   */\n  removeCss(propertyName: string, elementIndex = 0): string {\n    return this.elements[elementIndex].style.removeProperty(propertyName);\n  }\n\n  private getCss(propertyName: string): string | null {\n    return getComputedStyle(this.elements[0])[<any>propertyName];\n  }\n\n  private setCss(propertyName: string, value: string): DOM {\n    this.forEach((element) => {\n      // <any> cast to resolve TS7015: http://stackoverflow.com/a/36627114/370252\n      element.style[<any>propertyName] = value;\n    });\n    return this;\n  }\n\n  private setCssCollection(ruleValueCollection: {[ruleName: string]: string}): DOM {\n    this.forEach((element) => {\n      // http://stackoverflow.com/a/34490573/370252\n      Object.assign(element.style, ruleValueCollection);\n    });\n\n    return this;\n  }\n}\n","import {ErrorMessageMap, ErrorMessageTranslator} from './components/errormessageoverlay';\nimport { ErrorEvent } from 'bitmovin-player';\nimport { MobileV3PlayerErrorEvent, MobileV3SourceErrorEvent } from './mobilev3playerapi';\n\nexport namespace ErrorUtils {\n\n  export const defaultErrorMessages: ErrorMessageMap = {\n    1000: 'Error is unknown',\n    1001: 'The player API is not available after a call to PlayerAPI.destroy.',\n    1100: 'General setup error',\n    1101: 'There was an error when inserting the HTML video element',\n    1102: 'No configuration was provided',\n    1103: 'The license is not valid',\n    1104: 'The the domain-locked player is not authorized to playback on this domain',\n    1105: 'The domain is not allowlisted',\n    1106: 'The license server URL is invalid',\n    1107: 'The impression server URL is invalid',\n    1108: 'Could not initialize a rendering engine',\n    1109: 'The used flash version does not support playback',\n    1110: 'Native Flash is not authorized by a valid Adobe token',\n    1111: 'Flash doesn\\'t have sufficient resources',\n    1112: 'Flash container API not available',\n    1113: 'Protocol not supported. This site has been loaded using \"file\" protocol, but unfortunately this is not supported. Please load the page using a web server (using http or https)',\n    1200: 'General source error',\n    1201: 'No valid source was provided',\n    1202: 'The downloaded manifest is invalid',\n    1203: 'There was no technology detected to playback the provided source',\n    1204: 'The stream type is not supported',\n    1205: 'The forced technology is not supported',\n    1206: 'No stream found for supported technologies.',\n    1207: 'The downloaded segment is empty',\n    1208: 'The manifest could not be loaded',\n    1209: 'Progressive stream type not supported or the stream has an error',\n    1210: 'HLS stream has an error',\n    1211: 'The encryption method is not supported',\n    1300: 'General playback error',\n    1301: 'Video decoder or demuxer had an error with the content',\n    1302: 'General error if Flash renderer has an error',\n    1303: 'Flash doesn\\'t have sufficient resources',\n    1304: 'The transmuxer could not be initialized',\n    1400: 'Network error while downloading',\n    1401: 'The manifest download timed out',\n    1402: 'The segment download timed out',\n    1403: 'The progressive stream download timed out',\n    1404: 'The Certificate could not be loaded',\n    2000: 'General DRM error',\n    2001: 'Required DRM configuration is missing',\n    2002: 'The licensing server URL is missing',\n    2003: 'License request failed',\n    2004: 'Key or KeyId is missing',\n    2005: 'Key size is not supported',\n    2006: 'Unable to instantiate a key system supporting the required combinations',\n    2007: 'Unable to create or initialize key session',\n    2008: 'The MediaKey object could not be created/initialized',\n    2009: 'Key error',\n    2010: 'The key system is not supported',\n    2011: 'The certificate is not valid',\n    2012: 'Invalid header key/value pair for PlayReady license request',\n    2013: 'Content cannot be played back because the output is restricted on this machine',\n    2014: 'DRM error for the Flash renderer',\n    2100: 'General VR error',\n    2101: 'Player technology not compatible with VR playback',\n    3000: 'General module error',\n    3001: 'The definition of the module is invalid (e.g. incomplete).',\n    3002: 'The module definition specifies dependencies but the module is not provided via a function for deferred loading.',\n    3003: 'A module cannot be loaded because it has not been added to the player core.',\n    3004: 'A module cannot be loaded because one or more dependencies are missing.',\n    3100: 'An Advertising module error has occurred. Refer to the attached AdvertisingError.',\n  };\n\n  export const defaultMobileV3ErrorMessageTranslator = (error: MobileV3PlayerErrorEvent | MobileV3SourceErrorEvent) => {\n    return error.message;\n  };\n\n  export const defaultWebErrorMessageTranslator: ErrorMessageTranslator = (error: ErrorEvent) => {\n    const errorMessage = ErrorUtils.defaultErrorMessages[error.code];\n\n    if (errorMessage) {\n      // Use the error message text if there is one\n      return `${errorMessage}\\n(${error.name})`; // default error message style\n    } else {\n      // Fallback to error code/name if no message is defined\n      return `${error.code} ${error.name}`;\n    }\n  };\n}\n","import {ArrayUtils} from './arrayutils';\nimport { Timeout } from './timeout';\n/**\n * Function interface for event listeners on the {@link EventDispatcher}.\n */\nexport interface EventListener<Sender, Args> {\n  (sender: Sender, args: Args): void;\n}\n\n/**\n * Empty type for creating {@link EventDispatcher event dispatchers} that do not carry any arguments.\n */\nexport interface NoArgs {\n}\n\n/**\n * Event args for an event that can be canceled.\n */\nexport interface CancelEventArgs extends NoArgs {\n  /**\n   * Gets or sets a flag whether the event should be canceled.\n   */\n  cancel?: boolean;\n}\n\n/**\n * Public interface that represents an event. Can be used to subscribe to and unsubscribe from events.\n */\nexport interface Event<Sender, Args> {\n  /**\n   * Subscribes an event listener to this event dispatcher.\n   * @param listener the listener to add\n   */\n  subscribe(listener: EventListener<Sender, Args>): void;\n\n  /**\n   * Subscribes an event listener to this event dispatcher that is only called once.\n   * @param listener the listener to add\n   */\n  subscribeOnce(listener: EventListener<Sender, Args>): void;\n\n  /**\n   * Subscribes an event listener to this event dispatcher that will be called at a limited rate with a minimum\n   * interval of the specified milliseconds.\n   * @param listener the listener to add\n   * @param rateMs the rate in milliseconds to which calling of the listeners should be limited\n   */\n  subscribeRateLimited(listener: EventListener<Sender, Args>, rateMs: number): void;\n\n  /**\n   * Unsubscribes a subscribed event listener from this dispatcher.\n   * @param listener the listener to remove\n   * @returns {boolean} true if the listener was successfully unsubscribed, false if it isn't subscribed on this\n   *   dispatcher\n   */\n  unsubscribe(listener: EventListener<Sender, Args>): boolean;\n}\n\n/**\n * Event dispatcher to subscribe and trigger events. Each event should have its own dispatcher.\n */\nexport class EventDispatcher<Sender, Args> implements Event<Sender, Args> {\n\n  private listeners: EventListenerWrapper<Sender, Args>[] = [];\n\n  constructor() {\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribe(listener: EventListener<Sender, Args>) {\n    this.listeners.push(new EventListenerWrapper(listener));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribeOnce(listener: EventListener<Sender, Args>) {\n    this.listeners.push(new EventListenerWrapper(listener, true));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribeRateLimited(listener: EventListener<Sender, Args>, rateMs: number) {\n    this.listeners.push(new RateLimitedEventListenerWrapper(listener, rateMs));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  unsubscribe(listener: EventListener<Sender, Args>): boolean {\n    // Iterate through listeners, compare with parameter, and remove if found\n    // NOTE: In case we ever remove all matching listeners instead of just the first, we need to reverse-iterate here\n    for (let i = 0; i < this.listeners.length; i++) {\n      let subscribedListener = this.listeners[i];\n      if (subscribedListener.listener === listener) {\n        subscribedListener.clear();\n        ArrayUtils.remove(this.listeners, subscribedListener);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Removes all listeners from this dispatcher.\n   */\n  unsubscribeAll(): void {\n    // In case of RateLimitedEventListenerWrapper we need to make sure that the timeout callback won't be called\n    for (let listener of this.listeners) {\n      listener.clear();\n    }\n\n    this.listeners = [];\n  }\n\n  /**\n   * Dispatches an event to all subscribed listeners.\n   * @param sender the source of the event\n   * @param args the arguments for the event\n   */\n  dispatch(sender: Sender, args: Args = null) {\n    let listenersToRemove = [];\n\n    // Call every listener\n    // We iterate over a copy of the array of listeners to avoid the case where events are not fired on listeners when\n    // listeners are unsubscribed from within the event handlers during a dispatch (because the indices change and\n    // listeners are shifted within the array).\n    // This means that listener x+1 will still be called if unsubscribed from within the handler of listener x, as well\n    // as listener y+1 will not be called when subscribed from within the handler of listener y.\n    // Array.slice(0) is the fastest array copy method according to: https://stackoverflow.com/a/21514254/370252\n    const listeners = this.listeners.slice(0);\n    for (let listener of listeners) {\n      listener.fire(sender, args);\n\n      if (listener.isOnce()) {\n        listenersToRemove.push(listener);\n      }\n    }\n\n    // Remove one-time listener\n    for (let listenerToRemove of listenersToRemove) {\n      ArrayUtils.remove(this.listeners, listenerToRemove);\n    }\n  }\n\n  /**\n   * Returns the event that this dispatcher manages and on which listeners can subscribe and unsubscribe event handlers.\n   * @returns {Event}\n   */\n  getEvent(): Event<Sender, Args> {\n    // For now, just cast the event dispatcher to the event interface. At some point in the future when the\n    // codebase grows, it might make sense to split the dispatcher into separate dispatcher and event classes.\n    return <Event<Sender, Args>>this;\n  }\n}\n\n/**\n * A basic event listener wrapper to manage listeners within the {@link EventDispatcher}. This is a 'private' class\n * for internal dispatcher use and it is therefore not exported.\n */\nclass EventListenerWrapper<Sender, Args> {\n\n  private eventListener: EventListener<Sender, Args>;\n  private once: boolean;\n\n  constructor(listener: EventListener<Sender, Args>, once: boolean = false) {\n    this.eventListener = listener;\n    this.once = once;\n  }\n\n  /**\n   * Returns the wrapped event listener.\n   * @returns {EventListener<Sender, Args>}\n   */\n  get listener(): EventListener<Sender, Args> {\n    return this.eventListener;\n  }\n\n  /**\n   * Fires the wrapped event listener with the given arguments.\n   * @param sender\n   * @param args\n   */\n  fire(sender: Sender, args: Args) {\n    this.eventListener(sender, args);\n  }\n\n  /**\n   * Checks if this listener is scheduled to be called only once.\n   * @returns {boolean} once if true\n   */\n  isOnce(): boolean {\n    return this.once;\n  }\n\n  clear(): void {\n  }\n}\n\ninterface EventAttributes<Sender, Args> {\n  sender: Sender;\n  args: Args;\n}\n\n/**\n * Extends the basic {@link EventListenerWrapper} with rate-limiting functionality.\n */\nclass RateLimitedEventListenerWrapper<Sender, Args> extends EventListenerWrapper<Sender, Args> {\n\n  private readonly rateMs: number;\n  private readonly rateLimitingEventListener: EventListener<Sender, Args>;\n\n  // save last seen event attributes\n  private lastSeenEvent: EventAttributes<Sender, Args>;\n\n  private rateLimitTimout: Timeout;\n\n  constructor(listener: EventListener<Sender, Args>, rateMs: number) {\n    super(listener); // sets the event listener sink\n\n    this.rateMs = rateMs;\n\n    // starting limiting the events to the given value\n    const startRateLimiting = () => {\n      this.rateLimitTimout.start();\n    };\n\n    // timout for limiting the events\n    this.rateLimitTimout = new Timeout(this.rateMs, () => {\n      if (this.lastSeenEvent) {\n        this.fireSuper(this.lastSeenEvent.sender, this.lastSeenEvent.args);\n        startRateLimiting(); // start rateLimiting again to keep rate limit active even after firing the last seen event\n        this.lastSeenEvent = null;\n      }\n    });\n\n    // In case the events stopping during the rateLimiting we need to track the last seen one and delegate after the\n    // rate limiting is finished. This prevents missing the last update due to the rate limit.\n    this.rateLimitingEventListener = (sender: Sender, args: Args) => {\n      // only fire events if the rateLimiting is not running\n      if (this.shouldFireEvent()) {\n        this.fireSuper(sender, args);\n        startRateLimiting();\n        return;\n      }\n\n      this.lastSeenEvent = {\n        sender: sender,\n        args: args,\n      };\n    };\n  }\n\n  private shouldFireEvent(): boolean {\n    return !this.rateLimitTimout.isActive();\n  }\n\n  private fireSuper(sender: Sender, args: Args) {\n    // Fire the actual external event listener\n    super.fire(sender, args);\n  }\n\n  fire(sender: Sender, args: Args) {\n    // Fire the internal rate-limiting listener instead of the external event listener\n    this.rateLimitingEventListener(sender, args);\n  }\n\n  clear(): void {\n    super.clear();\n    this.rateLimitTimout.clear();\n  }\n}\n","const FocusVisibleCssClassName = '{{PREFIX}}-focus-visible';\n\nexport class FocusVisibilityTracker {\n  private readonly eventHandlerMap: { [eventName: string]: EventListenerOrEventListenerObject };\n  private lastInteractionWasKeyboard: boolean = true;\n\n  constructor(private bitmovinUiPrefix: string) {\n    this.eventHandlerMap = {\n      mousedown: this.onMouseOrPointerOrTouch,\n      pointerdown: this.onMouseOrPointerOrTouch,\n      touchstart: this.onMouseOrPointerOrTouch,\n      keydown: this.onKeyDown,\n      focus: this.onFocus,\n      blur: this.onBlur,\n    };\n    this.registerEventListeners();\n  }\n\n  private onKeyDown = (e: KeyboardEvent) => {\n    if (e.metaKey || e.altKey || e.ctrlKey) {\n      return;\n    }\n\n    this.lastInteractionWasKeyboard = true;\n  };\n\n  private onMouseOrPointerOrTouch = () => (this.lastInteractionWasKeyboard = false);\n\n  private onFocus = ({ target: element }: FocusEvent) => {\n    if (\n      this.lastInteractionWasKeyboard &&\n      isHtmlElement(element) &&\n      isBitmovinUi(element, this.bitmovinUiPrefix) &&\n      !element.classList.contains(FocusVisibleCssClassName)\n    ) {\n      element.classList.add(FocusVisibleCssClassName);\n    }\n  };\n\n  private onBlur = ({ target: element }: FocusEvent) => {\n    if (isHtmlElement(element)) {\n      element.classList.remove(FocusVisibleCssClassName);\n    }\n  };\n\n  private registerEventListeners(): void {\n    for (const event in this.eventHandlerMap) {\n      document.addEventListener(event, this.eventHandlerMap[event], true);\n    }\n  }\n\n  private unregisterEventListeners(): void {\n    for (const event in this.eventHandlerMap) {\n      document.removeEventListener(event, this.eventHandlerMap[event], true);\n    }\n  }\n\n  public release(): void {\n    this.unregisterEventListeners();\n  }\n}\n\nfunction isBitmovinUi(element: Element, bitmovinUiPrefix: string): boolean {\n  return element.id.indexOf(bitmovinUiPrefix) === 0;\n}\n\nfunction isHtmlElement(element: unknown): element is HTMLElement & { classList: DOMTokenList } {\n  return (\n    element instanceof HTMLElement && element.classList instanceof DOMTokenList\n  );\n}\n","import { PlayerAPI } from 'bitmovin-player';\n/**\n * The Group Playback API offers control over synchronized playback of a group of clients, e.g. for Apple SharePlay\n * sessions.\n\n * Note: The API currently only covers the immediate needs of the iOS SDK in combination with our UI which is regarding\n * temporarily suspending synchronization of the player from the group. But it is open to be extended as needed in the\n * future.\n */\n\n/**\n * Reason for suspending the synchronization with the group.\n */\nexport enum GroupPlaybackSuspensionReason {\n  UserIsScrubbing = 'userIsScrubbing',\n}\n\n/**\n * A representation of a temporary break in participation.\n */\nexport interface GroupPlaybackSuspension {\n  /**\n   * The reason for the suspension.\n   */\n  reason: GroupPlaybackSuspensionReason;\n\n  /**\n   * A unique identifier.\n   */\n  id: string;\n}\n\n/**\n * Options to be considered upon ending a suspension.\n */\ninterface EndGroupPlaybackSuspensionOptions {\n  /**\n   * A proposed time for the group to seek to.\n   */\n  proposedPlaybackTime?: number;\n}\n\n/**\n * Group Playback API offering control over the player's participation in synchronized playback of a group of clients.\n * For example, an Apple SharePlay session.\n */\ninterface GroupPlaybackAPI {\n  /**\n   * Begins a new suspension.\n   *\n   * Temporarily suspends the local player's synchronization with the group. While suspended, any local playback control\n   * action (e.g. play, pause, seek) will not be forwarded to the group and any action originating from another group\n   * participant will not be performed on the local player.\n   *\n   * @remarks\n   * It is possible for multiple suspensions to exist exist simultaneously with different suspension reasons. The player\n   * will re-synchronize with the group once all existing suspensions have ended.\n   *\n   * @param reason - The reason for the suspension.\n   * @returns A suspension object.\n   */\n  beginSuspension(reason: GroupPlaybackSuspensionReason): GroupPlaybackSuspension;\n\n  /**\n   * Ends the given suspension.\n   *\n   * @param suspension - The suspension to be ended.\n   * @param options - Optional. Options to be considered when ending the suspension, e.g. a proposed seek time for the group.\n   */\n  endSuspension(suspension: GroupPlaybackSuspension, options?: EndGroupPlaybackSuspensionOptions): void;\n\n  /**\n   * Whether the player is currently participating in a group playback session.\n   */\n  hasJoined(): boolean;\n\n  /**\n   * Whether the player is currently suspending synchronization with the group.\n   * Can only return true if `hasJoined()` also is true.\n   */\n  isSuspended(): boolean;\n}\n\n\nexport interface ExtendedPlayerAPI extends PlayerAPI {\n  /**\n   * Group Playback API\n   *\n   * @remarks\n   * This API is optional as not every platform supports group playback.\n   */\n  groupPlayback?: GroupPlaybackAPI;\n}\n","export namespace Guid {\n\n  let guid = 1;\n\n  export function next() {\n    return guid++;\n  }\n}\n","import {DOM} from './dom';\n\nexport interface ImageLoadedCallback {\n  (url: string, width: number, height: number): void;\n}\n\ninterface ImageLoaderState {\n  url: string;\n  image: DOM;\n  loadedCallback: ImageLoadedCallback;\n  loaded: boolean;\n  width: number;\n  height: number;\n}\n\n/**\n * Tracks the loading state of images.\n */\nexport class ImageLoader {\n\n  private state: { [url: string]: ImageLoaderState; } = {};\n\n  /**\n   * Loads an image and call the callback once the image is loaded. If the image is already loaded, the callback\n   * is called immediately, else it is called once loading has finished. Calling this method multiple times for the\n   * same image while it is loading calls only let callback passed into the last call.\n   * @param url The url to the image to load\n   * @param loadedCallback The callback that is called when the image is loaded\n   */\n  load(url: string, loadedCallback: ImageLoadedCallback): void {\n    if (!this.state[url]) {\n      // When the image was never attempted to be loaded before, we create a state and store it in the state map\n      // for later use when the same image is requested to be loaded again.\n      let state: ImageLoaderState = {\n        url: url,\n        image: new DOM('img', {}),\n        loadedCallback: loadedCallback,\n        loaded: false,\n        width: 0,\n        height: 0,\n      };\n      this.state[url] = state;\n\n      // Listen to the load event, update the state and call the callback once the image is loaded\n      state.image.on('load', (e) => {\n        state.loaded = true;\n        state.width = (<HTMLImageElement>state.image.get(0)).width;\n        state.height = (<HTMLImageElement>state.image.get(0)).height;\n\n        this.callLoadedCallback(state);\n      });\n\n      // Set the image URL to start the loading\n      state.image.attr('src', state.url);\n    } else {\n      // We have a state for the requested image, so it is either already loaded or currently loading\n      let state = this.state[url];\n\n      // We overwrite the callback to make sure that only the callback of the latest call gets executed.\n      // Earlier callbacks become invalid once a new load call arrives, and they are not called as long as the image\n      // is not loaded.\n      state.loadedCallback = loadedCallback;\n\n      // When the image is already loaded, we directly execute the callback instead of waiting for the load event\n      if (state.loaded) {\n        this.callLoadedCallback(state);\n      }\n    }\n  }\n\n  private callLoadedCallback(state: ImageLoaderState): void {\n    state.loadedCallback(state.url, state.width, state.height);\n  }\n}\n","import vocabularyDe from './languages/de.json';\nimport vocabularyEn from './languages/en.json';\nimport vocabularyEs from './languages/es.json';\nimport { LocalizationConfig } from '../uimanager.js';\n\nexport const defaultVocabularies: Vocabularies = {\n  'en': vocabularyEn,\n  'de': vocabularyDe,\n  'es': vocabularyEs,\n};\n\nconst defaultLocalizationConfig: LocalizationConfig = {\n  language: 'en',\n  vocabularies: defaultVocabularies,\n};\n\ntype Localizer = () => string;\nexport type LocalizableText = string | Localizer;\n\ninterface Vocabulary {\n  'settings.video.quality': string;\n  'settings.audio.quality': string;\n  'settings.audio.track': string;\n  'settings.audio.mute': string;\n  'settings.audio.volume': string;\n  'settings.subtitles': string;\n  'settings.subtitles.font.color': string;\n  'settings.subtitles.font.opacity': string;\n  'settings.subtitles.background.color': string;\n  'settings.subtitles.background.opacity': string;\n  'settings.subtitles.font.size': string;\n  'settings.subtitles.characterEdge': string;\n  'settings.subtitles.characterEdge.raised': string;\n  'settings.subtitles.characterEdge.depressed': string;\n  'settings.subtitles.characterEdge.uniform': string;\n  'settings.subtitles.characterEdge.dropshadowed': string;\n  'settings.subtitles.font.family': string;\n  'settings.subtitles.font.family.monospacedserif': string;\n  'settings.subtitles.font.family.proportionalserif': string;\n  'settings.subtitles.font.family.monospacedsansserif': string;\n  'settings.subtitles.font.family.proportionalsansserif': string;\n  'settings.subtitles.font.family.casual': string;\n  'settings.subtitles.font.family.cursive': string;\n  'settings.subtitles.font.family.smallcapital': string;\n  'settings.subtitles.window.color': string;\n  'settings.subtitles.window.opacity': string;\n  'play': string;\n  'settings.time.hours': string;\n  'settings.time.minutes': string;\n  'settings.time.seconds': string;\n  'colors.white': string;\n  'colors.black': string;\n  'colors.red': string;\n  'colors.green': string;\n  'colors.blue': string;\n  'colors.cyan': string;\n  'colors.yellow': string;\n  'colors.magenta': string;\n  'percent': string;\n  'settings': string;\n  'ads.remainingTime': string;\n  'pictureInPicture': string;\n  'appleAirplay': string;\n  'googleCast': string;\n  'vr': string;\n  'off': string;\n  'auto': string;\n  'back': string;\n  'reset': string;\n  'replay': string;\n  'normal': string;\n  'default': string;\n  'open': string;\n  'close': string;\n  'fullscreen': string;\n  'speed': string;\n  'playPause': string;\n  'live': string;\n  'subtitle.example': string;\n  'subtitle.select': string;\n  'playingOn': string;\n  'connectingTo': string;\n  'watermarkLink': string;\n  'controlBar': string;\n  'player': string;\n  'seekBar': string;\n  'seekBar.value': string;\n  'seekBar.timeshift': string;\n  'seekBar.durationText': string;\n}\n\nexport type CustomVocabulary<V> = V & Partial<Vocabulary>;\n\nexport interface Vocabularies {\n  [key: string]: CustomVocabulary<Record<string, string>>;\n}\n\nclass I18n {\n  private language: string;\n  private vocabulary: CustomVocabulary<Record<string, string>>;\n\n  constructor(config: LocalizationConfig) {\n    this.setConfig(config);\n  }\n\n  public setConfig(config: LocalizationConfig) {\n    const mergedConfig = { ...defaultLocalizationConfig, ...config };\n    const detectBrowserLanguage = mergedConfig.language === 'auto';\n    const vocabularies = this.mergeVocabulariesWithDefaultVocabularies(mergedConfig.vocabularies);\n    this.initializeLanguage(mergedConfig.language, detectBrowserLanguage, vocabularies);\n    this.initializeVocabulary(vocabularies);\n  }\n\n  private static containsLanguage(vocabularies: Vocabularies, language: string) {\n    return vocabularies.hasOwnProperty(language);\n  }\n\n  private mergeVocabulariesWithDefaultVocabularies(vocabularies: Vocabularies = {}) {\n    const rawVocabularies: Vocabularies = { ...defaultVocabularies, ...vocabularies };\n    return Object.keys(rawVocabularies).reduce((mergedVocabularies, language) => {\n      let vocabulary = rawVocabularies[language];\n      if (I18n.containsLanguage(defaultVocabularies, language) && I18n.containsLanguage(vocabularies, language)) {\n        vocabulary = { ...defaultVocabularies[language], ...vocabularies[language] };\n      }\n      return { ...mergedVocabularies, [language]: vocabulary };\n    }, {});\n  }\n\n  private initializeLanguage(\n    language: string,\n    browserLanguageDetectionEnabled: boolean,\n    vocabularies: Vocabularies,\n  ) {\n    if (browserLanguageDetectionEnabled) {\n      const userLanguage = window.navigator.language;\n\n      if (I18n.containsLanguage(vocabularies, userLanguage)) {\n        this.language = userLanguage;\n        return;\n      }\n      const shortenedUserLanguage = userLanguage.slice(0, 2);\n      if (I18n.containsLanguage(vocabularies, shortenedUserLanguage)) {\n        this.language = shortenedUserLanguage;\n        return;\n      }\n    }\n\n    this.language = language;\n  }\n\n  private initializeVocabulary(vocabularies: Vocabularies) {\n    this.vocabulary = ['en', this.language]\n      .reduce((vocab, lang) => ({ ...vocab, ...(vocabularies[lang] || {}) }), {});\n  }\n\n  private replaceVariableWithPlaceholderIfExists(text: string, config: any) {\n    const matches = text.match(new RegExp('{[a-zA-Z0-9]+}', 'g'));\n    if (matches.length === 0) {\n      return text;\n    }\n\n    return matches\n      .map((m: string) => ({ match: m, key: m.slice(1, -1) }))\n      .reduce((str, { key, match }) => config.hasOwnProperty(key) ? str.replace(match, config[key]) : str, text);\n  }\n\n  public getLocalizer<V extends CustomVocabulary<Record<string, string>> = CustomVocabulary<Record<string, string>>>(\n    key: keyof V,\n    config?: Record<string, string | number>,\n  ): Localizer {\n    return () => {\n      if (key == null) { // because sometimes we call toDomElement() without configuring the component or setting text...\n        return undefined;\n      }\n      let vocabularyString = this.vocabulary[key as string];\n\n      if (vocabularyString == null) {\n        vocabularyString = key as string;\n      }\n\n      if (config != null) {\n        vocabularyString = this.replaceVariableWithPlaceholderIfExists(vocabularyString, config);\n      }\n\n      return vocabularyString;\n    };\n  }\n\n  public performLocalization(text: LocalizableText) {\n    return typeof text === 'function' ? text() : text;\n  }\n}\n\nexport const i18n = new I18n(defaultLocalizationConfig);\n","module.exports={\n  \"settings.video.quality\": \"Videoqualität\",\n  \"settings.audio.quality\": \"Audioqualität\",\n  \"settings.audio.track\": \"Audiospur\",\n  \"speed\": \"Geschwindigkeit\",\n  \"play\": \"Abspielen\",\n  \"pause\": \"Pause\",\n  \"playPause\": \"Abspielen/Pause\",\n  \"open\": \"öffnen\",\n  \"close\": \"Schließen\",\n  \"settings.audio.mute\": \"Stummschaltung\",\n  \"settings.audio.volume\": \"Lautstärke\",\n  \"pictureInPicture\": \"Bild im Bild\",\n  \"appleAirplay\": \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\": \"VR\",\n  \"settings\": \"Einstellungen\",\n  \"fullscreen\": \"Vollbild\",\n  \"off\": \"aus\",\n  \"settings.subtitles\": \"Untertitel\",\n  \"settings.subtitles.font.size\": \"Größe\",\n  \"settings.subtitles.font.family\": \"Schriftart\",\n  \"settings.subtitles.font.color\": \"Farbe\",\n  \"settings.subtitles.font.opacity\": \"Deckkraft\",\n  \"settings.subtitles.characterEdge\": \"Ränder\",\n  \"settings.subtitles.background.color\": \"Hintergrundfarbe\",\n  \"settings.subtitles.background.opacity\": \"Hintergrunddeckkraft\",\n  \"settings.subtitles.window.color\": \"Hintergrundfarbe\",\n  \"settings.subtitles.window.opacity\": \"Hintergrunddeckkraft\",\n  \"settings.time.hours\": \"Stunden\",\n  \"settings.time.minutes\": \"Minuten\",\n  \"settings.time.seconds\": \"Sekunden\",\n  \"back\": \"Zurück\",\n  \"reset\": \"Zurücksetzen\",\n  \"replay\": \"Wiederholen\",\n  \"ads.remainingTime\": \"Diese Anzeige endet in {remainingTime} Sekunden\",\n  \"default\": \"standard\",\n  \"colors.white\": \"weiß\",\n  \"colors.black\": \"schwarz\",\n  \"colors.red\": \"rot\",\n  \"colors.green\": \"grün\",\n  \"colors.blue\": \"blau\",\n  \"colors.yellow\": \"gelb\",\n  \"subtitle.example\": \"Beispiel Untertitel\",\n  \"subtitle.select\": \"Untertitel auswählen\",\n  \"playingOn\": \"Spielt auf <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Verbindung mit <strong>{castDeviceName}</strong> wird hergestellt...\",\n  \"watermarkLink\": \"Link zum Homepage\",\n  \"controlBar\": \"Videoplayer Kontrollen\",\n  \"player\": \"Video player\",\n  \"seekBar\": \"Video-Timeline\",\n  \"seekBar.value\": \"Wert\",\n  \"seekBar.timeshift\": \"Timeshift\",\n  \"seekBar.durationText\": \"aus\"\n}\n","module.exports={\n  \"settings.video.quality\": \"Video Quality\",\n  \"settings.audio.quality\": \"Audio Quality\",\n  \"settings.audio.track\": \"Audio Track\",\n  \"settings.audio.mute\" : \"Mute\",\n  \"settings.audio.volume\" : \"Volume\",\n  \"settings.subtitles.window.color\" : \"Window color\",\n  \"settings.subtitles.window.opacity\" : \"Window opacity\",\n  \"settings.subtitles\" : \"Subtitles\",\n  \"settings.subtitles.font.color\" : \"Font color\",\n  \"settings.subtitles.font.opacity\" : \"Font opacity\",\n  \"settings.subtitles.background.color\" : \"Background color\",\n  \"settings.subtitles.background.opacity\": \"Background opacity\",\n  \"colors.white\": \"white\",\n  \"colors.black\": \"black\",\n  \"colors.red\": \"red\",\n  \"colors.green\": \"green\",\n  \"colors.blue\": \"blue\",\n  \"colors.cyan\": \"cyan\",\n  \"colors.yellow\": \"yellow\",\n  \"colors.magenta\": \"magenta\",\n  \"percent\": \"{value}%\",\n  \"settings.subtitles.font.size\": \"Font size\",\n  \"settings.subtitles.characterEdge\": \"Character edge\",\n  \"settings.subtitles.characterEdge.raised\": \"raised\",\n  \"settings.subtitles.characterEdge.depressed\": \"depressed\",\n  \"settings.subtitles.characterEdge.uniform\": \"uniform\",\n  \"settings.subtitles.characterEdge.dropshadowed\": \"drop shadowed\",\n  \"settings.subtitles.font.family\": \"Font family\",\n  \"settings.subtitles.font.family.monospacedserif\": \"monospaced serif\",\n  \"settings.subtitles.font.family.proportionalserif\": \"proportional serif\",\n  \"settings.subtitles.font.family.monospacedsansserif\": \"monospaced sans serif\",\n  \"settings.subtitles.font.family.proportionalsansserif\": \"proportional sans serif\",\n  \"settings.subtitles.font.family.casual\": \"casual\",\n  \"settings.subtitles.font.family.cursive\": \"cursive\",\n  \"settings.subtitles.font.family.smallcapital\": \"small capital\",\n  \"settings.time.hours\": \"Hours\",\n  \"settings.time.minutes\": \"Minutes\",\n  \"settings.time.seconds\": \"Seconds\",\n  \"ads.remainingTime\": \"This ad will end in {remainingTime} seconds.\",\n  \"settings\": \"Settings\",\n  \"fullscreen\" : \"Fullscreen\",\n  \"speed\": \"Speed\",\n  \"playPause\" : \"Play/Pause\",\n  \"play\": \"Play\",\n  \"pause\": \"Pause\",\n  \"open\": \"open\",\n  \"close\": \"Close\",\n  \"pictureInPicture\": \"Picture-in-Picture\",\n  \"appleAirplay\" : \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\" : \"VR\",\n  \"off\": \"off\",\n  \"auto\": \"auto\",\n  \"back\" : \"Back\",\n  \"reset\": \"Reset\",\n  \"replay\": \"Replay\",\n  \"normal\": \"normal\",\n  \"default\": \"default\",\n  \"live\": \"Live\",\n  \"subtitle.example\": \"example subtitle\",\n  \"subtitle.select\": \"Select subtitle\",\n  \"playingOn\": \"Playing on <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Connecting to <strong>{castDeviceName}</strong>...\",\n  \"watermarkLink\": \"Link to Homepage\",\n  \"controlBar\": \"Video player controls\",\n  \"player\": \"Video player\",\n  \"seekBar\": \"Video timeline\",\n  \"seekBar.value\": \"Value\",\n  \"seekBar.timeshift\": \"Timeshift\",\n  \"seekBar.durationText\": \"out of\"\n}\n","module.exports={\n  \"settings.video.quality\": \"Calidad de Video\",\n  \"settings.audio.quality\": \"Calidad de Audio\",\n  \"settings.audio.track\": \"Pista de Audio\",\n  \"settings.audio.mute\" : \"Silencio\",\n  \"settings.audio.volume\" : \"Volumen\",\n  \"settings.subtitles.window.color\" : \"color de Ventana\",\n  \"settings.subtitles.window.opacity\" : \"opacidad de Ventana\",\n  \"settings.subtitles\" : \"Subtítulos\",\n  \"settings.subtitles.font.color\" : \"color de Fuente\",\n  \"settings.subtitles.font.opacity\" : \"opacidad de Fuente\",\n  \"settings.subtitles.background.color\" : \"color de Fondo\",\n  \"settings.subtitles.background.opacity\": \"opacidad de Fondo\",\n  \"colors.white\": \"blanco\",\n  \"colors.black\": \"negro\",\n  \"colors.red\": \"rojo\",\n  \"colors.green\": \"verde\",\n  \"colors.blue\": \"azul\",\n  \"colors.cyan\": \"cian\",\n  \"colors.yellow\": \"amarillo\",\n  \"colors.magenta\": \"magenta\",\n  \"percent\": \"{value}%\",\n  \"settings.subtitles.font.size\": \"tamaño de Fuente\",\n  \"settings.subtitles.characterEdge\": \"borde del Caracter\",\n  \"settings.subtitles.characterEdge.raised\": \"alzado\",\n  \"settings.subtitles.characterEdge.depressed\": \"discreto\",\n  \"settings.subtitles.characterEdge.uniform\": \"uniforme\",\n  \"settings.subtitles.characterEdge.dropshadowed\": \"sombreado\",\n  \"settings.subtitles.font.family\": \"tipo de Fuente\",\n  \"settings.subtitles.font.family.monospacedserif\": \"monospaced serif\",\n  \"settings.subtitles.font.family.proportionalserif\": \"proportional serif\",\n  \"settings.subtitles.font.family.monospacedsansserif\": \"monospaced sans serif\",\n  \"settings.subtitles.font.family.proportionalsansserif\": \"proportional sans serif\",\n  \"settings.subtitles.font.family.casual\": \"casual\",\n  \"settings.subtitles.font.family.cursive\": \"cursiva\",\n  \"settings.subtitles.font.family.smallcapital\": \"small capital\",\n  \"settings.time.hours\": \"Horas\",\n  \"settings.time.minutes\": \"Minutos\",\n  \"settings.time.seconds\": \"Segundos\",\n  \"ads.remainingTime\": \"Este anuncio acabará en {remainingTime} segundos.\",\n  \"settings\": \"Configuración\",\n  \"fullscreen\" : \"Pantalla Completa\",\n  \"speed\": \"Velocidad\",\n  \"playPause\" : \"Reproducir/Pausa\",\n  \"play\": \"Reproducir\",\n  \"pause\": \"Pausa\",\n  \"open\": \"Abrir\",\n  \"close\": \"Cerrar\",\n  \"pictureInPicture\": \"Imagen en Imagen\",\n  \"appleAirplay\" : \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\" : \"VR\",\n  \"off\": \"off\",\n  \"auto\": \"auto\",\n  \"back\" : \"Atrás\",\n  \"reset\": \"Reiniciar\",\n  \"replay\": \"Rebobinar\",\n  \"normal\": \"normal\",\n  \"default\": \"predeterminado\",\n  \"live\": \"Directo\",\n  \"subtitle.example\": \"Ejemplo de Subtítulo\",\n  \"subtitle.select\": \"Seleccionar subtítulo\",\n  \"playingOn\": \"Reproduciendo en <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Conectando a <strong>{castDeviceName}</strong>...\",\n  \"watermarkLink\": \"Enlace al inicio\",\n  \"controlBar\": \"Controles del Reproductor\",\n  \"player\": \"Reproductor de Video\",\n  \"seekBar\": \"Línea de Tiempo\",\n  \"seekBar.value\": \"posición\",\n  \"seekBar.timeshift\": \"cambio de posición\",\n  \"seekBar.durationText\": \"de\"\n}","export const version: string = '{{VERSION}}';\n// Management\nexport { UIManager, UIInstanceManager } from './uimanager';\n// Factories\nexport { UIFactory } from './uifactory';\nexport { DemoFactory } from './demofactory';\n// Utils\nexport { ArrayUtils } from './arrayutils';\nexport { StringUtils } from './stringutils';\nexport { PlayerUtils } from './playerutils';\nexport { UIUtils } from './uiutils';\nexport { BrowserUtils } from './browserutils';\nexport { StorageUtils } from './storageutils';\nexport { ErrorUtils } from './errorutils';\n// Localization\nexport { i18n } from './localization/i18n';\n// Spatial Navigation\nexport { SpatialNavigation } from './spatialnavigation/spatialnavigation';\nexport { NavigationGroup } from './spatialnavigation/navigationgroup';\nexport { RootNavigationGroup } from './spatialnavigation/rootnavigationgroup';\nexport { ListNavigationGroup, ListOrientation } from './spatialnavigation/ListNavigationGroup';\n// Components\nexport { Button } from './components/button';\nexport { ControlBar } from './components/controlbar';\nexport { FullscreenToggleButton } from './components/fullscreentogglebutton';\nexport { HugePlaybackToggleButton } from './components/hugeplaybacktogglebutton';\nexport { PlaybackTimeLabel, PlaybackTimeLabelMode } from './components/playbacktimelabel';\nexport { PlaybackToggleButton } from './components/playbacktogglebutton';\nexport { SeekBar } from './components/seekbar';\nexport { SelectBox } from './components/selectbox';\nexport { ItemSelectionList } from './components/itemselectionlist';\nexport { SettingsPanel } from './components/settingspanel';\nexport { SettingsToggleButton } from './components/settingstogglebutton';\nexport { ToggleButton } from './components/togglebutton';\nexport { VideoQualitySelectBox } from './components/videoqualityselectbox';\nexport { VolumeToggleButton } from './components/volumetogglebutton';\nexport { VRToggleButton } from './components/vrtogglebutton';\nexport { Watermark } from './components/watermark';\nexport { UIContainer } from './components/uicontainer';\nexport { Container } from './components/container';\nexport { Label } from './components/label';\nexport { AudioQualitySelectBox } from './components/audioqualityselectbox';\nexport { AudioTrackSelectBox } from './components/audiotrackselectbox';\nexport { CastStatusOverlay } from './components/caststatusoverlay';\nexport { CastToggleButton } from './components/casttogglebutton';\nexport { Component } from './components/component';\nexport { ErrorMessageOverlay } from './components/errormessageoverlay';\nexport { RecommendationOverlay } from './components/recommendationoverlay';\nexport { SeekBarLabel } from './components/seekbarlabel';\nexport { SubtitleOverlay } from './components/subtitleoverlay';\nexport { SubtitleSelectBox } from './components/subtitleselectbox';\nexport { TitleBar } from './components/titlebar';\nexport { VolumeControlButton } from './components/volumecontrolbutton';\nexport { ClickOverlay } from './components/clickoverlay';\nexport { AdSkipButton } from './components/adskipbutton';\nexport { AdMessageLabel } from './components/admessagelabel';\nexport { AdClickOverlay } from './components/adclickoverlay';\nexport { PlaybackSpeedSelectBox } from './components/playbackspeedselectbox';\nexport { HugeReplayButton } from './components/hugereplaybutton';\nexport { BufferingOverlay } from './components/bufferingoverlay';\nexport { CastUIContainer } from './components/castuicontainer';\nexport { PlaybackToggleOverlay } from './components/playbacktoggleoverlay';\nexport { CloseButton } from './components/closebutton';\nexport { MetadataLabel, MetadataLabelContent } from './components/metadatalabel';\nexport { AirPlayToggleButton } from './components/airplaytogglebutton';\nexport { VolumeSlider } from './components/volumeslider';\nexport { PictureInPictureToggleButton } from './components/pictureinpicturetogglebutton';\nexport { Spacer } from './components/spacer';\nexport { BackgroundColorSelectBox } from './components/subtitlesettings/backgroundcolorselectbox';\nexport { BackgroundOpacitySelectBox } from './components/subtitlesettings/backgroundopacityselectbox';\nexport { CharacterEdgeSelectBox } from './components/subtitlesettings/characteredgeselectbox';\nexport { FontColorSelectBox } from './components/subtitlesettings/fontcolorselectbox';\nexport { FontFamilySelectBox } from './components/subtitlesettings/fontfamilyselectbox';\nexport { FontOpacitySelectBox } from './components/subtitlesettings/fontopacityselectbox';\nexport { FontSizeSelectBox } from './components/subtitlesettings/fontsizeselectbox';\nexport { SubtitleSettingSelectBox } from './components/subtitlesettings/subtitlesettingselectbox';\nexport { SubtitleSettingsLabel } from './components/subtitlesettings/subtitlesettingslabel';\nexport { WindowColorSelectBox } from './components/subtitlesettings/windowcolorselectbox';\nexport { WindowOpacitySelectBox } from './components/subtitlesettings/windowopacityselectbox';\nexport { SubtitleSettingsResetButton } from './components/subtitlesettings/subtitlesettingsresetbutton';\nexport { ListBox } from './components/listbox';\nexport { SubtitleListBox } from './components/subtitlelistbox';\nexport { AudioTrackListBox } from './components/audiotracklistbox';\nexport { SettingsPanelPage } from './components/settingspanelpage';\nexport { SettingsPanelPageBackButton } from './components/settingspanelpagebackbutton';\nexport { SettingsPanelPageOpenButton } from './components/settingspanelpageopenbutton';\nexport { SubtitleSettingsPanelPage } from './components/subtitlesettings/subtitlesettingspanelpage';\nexport { SettingsPanelItem } from './components/settingspanelitem';\nexport { ReplayButton } from './components/replaybutton';\n\n// Object.assign polyfill for ES5/IE9\n// https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nif (typeof Object.assign !== 'function') {\n  Object.assign = function(target: any) {\n    'use strict';\n    if (target == null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    target = Object(target);\n    for (let index = 1; index < arguments.length; index++) {\n      let source = arguments[index];\n      if (source != null) {\n        for (let key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n}","import { PlayerAPI, PlayerEvent, PlayerEventBase, PlayerEventCallback } from 'bitmovin-player';\nimport { WrappedPlayer } from './uimanager';\n\nexport enum MobileV3PlayerEvent {\n  SourceError = 'sourceerror',\n  PlayerError = 'playererror',\n  PlaylistTransition = 'playlisttransition',\n}\n\nexport interface MobileV3PlayerErrorEvent extends PlayerEventBase {\n  code: number;\n  message: string;\n}\n\nexport interface MobileV3SourceErrorEvent extends PlayerEventBase {\n  code: number;\n  message: string;\n}\n\nexport type MobileV3PlayerEventType = PlayerEvent | MobileV3PlayerEvent;\n\nexport interface MobileV3PlayerAPI extends PlayerAPI {\n  on(eventType: MobileV3PlayerEventType, callback: PlayerEventCallback): void;\n  exports: PlayerAPI['exports'] & { PlayerEvent: MobileV3PlayerEventType };\n}\n\nexport function isMobileV3PlayerAPI(player: WrappedPlayer | PlayerAPI | MobileV3PlayerAPI): player is MobileV3PlayerAPI {\n  for (const key in MobileV3PlayerEvent) {\n    if (MobileV3PlayerEvent.hasOwnProperty(key) && !player.exports.PlayerEvent.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import {Event, EventDispatcher, NoArgs} from './eventdispatcher';\nimport {BrowserUtils} from './browserutils';\nimport { UIInstanceManager } from './uimanager';\nimport { PlayerAPI, TimeRange } from 'bitmovin-player';\n\nexport namespace PlayerUtils {\n\n  export enum PlayerState {\n    Idle,\n    Prepared,\n    Playing,\n    Paused,\n    Finished,\n  }\n\n  export function isTimeShiftAvailable(player: PlayerAPI): boolean {\n    return player.isLive() && player.getMaxTimeShift() !== 0;\n  }\n\n  export function getState(player: PlayerAPI): PlayerState {\n    if (player.hasEnded()) {\n      return PlayerState.Finished;\n    } else if (player.isPlaying()) {\n      return PlayerState.Playing;\n    } else if (player.isPaused()) {\n      return PlayerState.Paused;\n    } else if (player.getSource() != null) {\n      return PlayerState.Prepared;\n    } else {\n      return PlayerState.Idle;\n    }\n  }\n\n  /**\n   * Returns the currentTime - seekableRange.start. This ensures a user-friendly currentTime after a live stream\n   * transitioned to VoD.\n   * @param player\n   */\n  export function getCurrentTimeRelativeToSeekableRange(player: PlayerAPI): number {\n    const currentTime = player.getCurrentTime();\n    if (player.isLive()) {\n      return currentTime;\n    }\n\n    const seekableRangeStart = PlayerUtils.getSeekableRangeStart(player, 0);\n    return currentTime - seekableRangeStart;\n  }\n\n  /**\n   * Returns the start value of the seekable range or the defaultValue if no seekableRange is present.\n   * For now this happens only in combination with Mobile SDKs.\n   *\n   * TODO: remove this function in next major release\n   *\n   * @param player\n   * @param defaultValue\n   */\n  export function getSeekableRangeStart(player: PlayerAPI, defaultValue: number = 0) {\n    return player.getSeekableRange() && player.getSeekableRange().start || defaultValue;\n  }\n\n  /**\n   * Calculates player seekable time range for live.\n   * As the player returns `{ start: -1, end: -1 }` for live streams we need to calculate the `seekableRange` based on `maxTimeshift`.\n   *\n   * @param player\n   */\n  export function getSeekableRangeRespectingLive(player: PlayerAPI): TimeRange {\n    if (!player.isLive()) {\n      return player.getSeekableRange();\n    }\n\n    const currentTimeshift = -player.getTimeShift();\n    const maxTimeshift = -player.getMaxTimeShift();\n    const currentTime = player.getCurrentTime();\n\n    const end = currentTime + (currentTimeshift);\n    const start = currentTime - (maxTimeshift - currentTimeshift);\n\n    return { start, end };\n  }\n\n  export interface TimeShiftAvailabilityChangedArgs extends NoArgs {\n    timeShiftAvailable: boolean;\n  }\n\n  export class TimeShiftAvailabilityDetector {\n\n    private player: PlayerAPI;\n    private timeShiftAvailable: boolean;\n    private timeShiftAvailabilityChangedEvent = new EventDispatcher<PlayerAPI, TimeShiftAvailabilityChangedArgs>();\n\n    constructor(player: PlayerAPI) {\n      this.player = player;\n      this.timeShiftAvailable = undefined;\n\n      let timeShiftDetector = () => {\n        this.detect();\n      };\n      // Try to detect timeshift availability when source is loaded, which works for DASH streams\n      player.on(player.exports.PlayerEvent.SourceLoaded, timeShiftDetector);\n      // With HLS/NativePlayer streams, getMaxTimeShift can be 0 before the buffer fills, so we need to additionally\n      // check timeshift availability in TimeChanged\n      player.on(player.exports.PlayerEvent.TimeChanged, timeShiftDetector);\n    }\n\n    detect(): void {\n      if (this.player.isLive()) {\n        let timeShiftAvailableNow = PlayerUtils.isTimeShiftAvailable(this.player);\n\n        // When the availability changes, we fire the event\n        if (timeShiftAvailableNow !== this.timeShiftAvailable) {\n          this.timeShiftAvailabilityChangedEvent.dispatch(this.player, { timeShiftAvailable: timeShiftAvailableNow });\n          this.timeShiftAvailable = timeShiftAvailableNow;\n        }\n      }\n    }\n\n    get onTimeShiftAvailabilityChanged(): Event<PlayerAPI, TimeShiftAvailabilityChangedArgs> {\n      return this.timeShiftAvailabilityChangedEvent.getEvent();\n    }\n  }\n\n  export interface LiveStreamDetectorEventArgs extends NoArgs {\n    live: boolean;\n  }\n\n  /**\n   * Detects changes of the stream type, i.e. changes of the return value of the player#isLive method.\n   * Normally, a stream cannot change its type during playback, it's either VOD or live. Due to bugs on some\n   * platforms or browsers, it can still change. It is therefore unreliable to just check #isLive and this detector\n   * should be used as a workaround instead.\n   *\n   * Additionally starting with player v8.19.0 we have the use-case that a live stream changes into a vod.\n   * The DurationChanged event indicates this switch.\n   *\n   * Known cases:\n   *\n   * - HLS VOD on Android 4.3\n   * Video duration is initially 'Infinity' and only gets available after playback starts, so streams are wrongly\n   * reported as 'live' before playback (the live-check in the player checks for infinite duration).\n   *\n   * @deprecated since UI v3.9.0 in combination with player v8.19.0 use PlayerEvent.DurationChanged instead\n   *\n   * TODO: remove this class in next major release\n   */\n  export class LiveStreamDetector {\n\n    private player: PlayerAPI;\n    private live: boolean;\n    private liveChangedEvent = new EventDispatcher<PlayerAPI, LiveStreamDetectorEventArgs>();\n    private uimanager: UIInstanceManager;\n\n    constructor(player: PlayerAPI, uimanager: UIInstanceManager) {\n      this.player = player;\n      this.uimanager = uimanager;\n      this.live = undefined;\n\n      let liveDetector = () => {\n        this.detect();\n      };\n      this.uimanager.getConfig().events.onUpdated.subscribe(liveDetector);\n      // Re-evaluate when playback starts\n      player.on(player.exports.PlayerEvent.Play, liveDetector);\n\n      // HLS live detection workaround for Android:\n      // Also re-evaluate during playback, because that is when the live flag might change.\n      // (Doing it only in Android Chrome saves unnecessary overhead on other platforms)\n      if (BrowserUtils.isAndroid && BrowserUtils.isChrome) {\n        player.on(player.exports.PlayerEvent.TimeChanged, liveDetector);\n      }\n\n      // DurationChanged event was introduced with player v8.19.0\n      if (player.exports.PlayerEvent.DurationChanged) {\n        player.on(player.exports.PlayerEvent.DurationChanged, liveDetector);\n      }\n\n      // Ad video's isLive() might be different than the actual video's isLive().\n      player.on(player.exports.PlayerEvent.AdBreakStarted, liveDetector);\n      player.on(player.exports.PlayerEvent.AdBreakFinished, liveDetector);\n    }\n\n    detect(): void {\n      let liveNow = this.player.isLive();\n\n      // Compare current to previous live state flag and fire event when it changes. Since we initialize the flag\n      // with undefined, there is always at least an initial event fired that tells listeners the live state.\n      if (liveNow !== this.live) {\n        this.liveChangedEvent.dispatch(this.player, { live: liveNow });\n        this.live = liveNow;\n      }\n    }\n\n    get onLiveChanged(): Event<PlayerAPI, LiveStreamDetectorEventArgs> {\n      return this.liveChangedEvent.getEvent();\n    }\n  }\n}\n","import { NavigationGroup } from './navigationgroup';\nimport { Action, Direction } from './types';\nimport { Container } from '../components/container';\nimport { Component } from '../components/component';\n\nexport enum ListOrientation {\n  Horizontal = 'horizontal',\n  Vertical = 'vertical',\n}\n\nexport class ListNavigationGroup extends NavigationGroup {\n  private readonly listNavigationDirections: Direction[];\n\n  constructor(orientation: ListOrientation, container: Container<unknown>, ...components: Component<unknown>[]) {\n    super(container, ...components);\n\n    switch (orientation) {\n      case ListOrientation.Vertical:\n        this.listNavigationDirections = [Direction.UP, Direction.DOWN];\n        break;\n\n      case ListOrientation.Horizontal:\n        this.listNavigationDirections = [Direction.LEFT, Direction.RIGHT];\n        break;\n    }\n  }\n\n  public handleAction(action: Action): void {\n    super.handleAction(action);\n\n    if (action === Action.SELECT) {\n      // close the container when a list entry is selected\n      this.handleAction(Action.BACK);\n    }\n  }\n\n  public handleNavigation(direction: Direction): void {\n    super.handleNavigation(direction);\n\n    if (!this.listNavigationDirections.includes(direction)) {\n      // close the container on navigation inputs that don't align\n      // with the orientation of the list\n      this.handleAction(Action.BACK);\n    }\n  }\n}\n","import { Component } from '../components/component';\nimport { Container } from '../components/container';\nimport { isComponent, isContainer, isListBox } from './typeguards';\n\n/**\n * Recursively resolves a container and the components contained within them, building a flat list of components.\n *\n * @param container The container to get the contained components from\n */\nfunction resolveAllComponents(container: Container<unknown>): Component<unknown>[] {\n  const childComponents: Component<unknown>[] = [];\n\n  container.getComponents().forEach(containerOrComponent => {\n    if (isContainer(containerOrComponent)) {\n      childComponents.push(...resolveAllComponents(containerOrComponent));\n    } else if (isComponent(containerOrComponent)) {\n      childComponents.push(containerOrComponent);\n    }\n  });\n\n  return childComponents;\n}\n\n/**\n * Returns the HTML elements associated to the provided component.\n *\n * @param component The component to get the HTML elements from\n */\nfunction toHtmlElement(component: Component<unknown>): HTMLElement[] {\n  if (isListBox(component)) {\n    return [].slice.call(component.getDomElement().get()[0].children);\n  } else {\n    return component.getDomElement().get().slice(0, 1);\n  }\n}\n\n/**\n * Takes the provided list of components and flat-maps them to a list of their respective HTML elements. In case a\n * provided component is a container, the children of that container will be resolved recursively. Ignores components\n * that are hidden.\n *\n * @param components The components to map to HTML elements\n */\nexport function getHtmlElementsFromComponents(components: Component<unknown>[]): HTMLElement[] {\n  const htmlElements: HTMLElement[] = [];\n\n  components\n    .filter(component => !component.isHidden())\n    .forEach(component => {\n      const elementsToConsider = component instanceof Container ? resolveAllComponents(component) : [component];\n\n      elementsToConsider.forEach(component => {\n        htmlElements.push(...toHtmlElement(component));\n      });\n    });\n\n  return htmlElements;\n}\n","import { Action, Direction, KeyMap } from './types';\nimport { BrowserUtils } from '../browserutils';\n\nconst TizenKeyMap = {\n  isApplicable: () => BrowserUtils.isTizen,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // D-pad OK\n    13: Action.SELECT,\n    // Back\n    10009: Action.BACK,\n  },\n};\n\nconst WebOsKeyMap = {\n  isApplicable: () => BrowserUtils.isWebOs,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // D-pad OK\n    13: Action.SELECT,\n    // Back\n    461: Action.BACK,\n  },\n};\n\nconst PlayStationKeyMap = {\n  isApplicable: () => BrowserUtils.isPlayStation,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // Cross\n    13: Action.SELECT,\n    // Circle\n    27: Action.BACK,\n  },\n};\n\nconst AndroidKeyMap = {\n  isApplicable: () => BrowserUtils.isAndroid,\n  keyCodes: {\n    // D-pad Up\n    19: Direction.UP,\n    // D-pad Down\n    20: Direction.DOWN,\n    // D-pad Left\n    21: Direction.LEFT,\n    // D-pad Right\n    22: Direction.RIGHT,\n    // D-pad Center\n    23: Action.SELECT,\n    // Enter\n    66: Action.SELECT,\n    // Back\n    4: Action.BACK,\n  },\n};\n\nconst HisenseKeyMap = {\n  isApplicable: () => BrowserUtils.isHisense,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // OK\n    13: Action.SELECT,\n    // Back\n    8: Action.BACK,\n  },\n};\n\n// Default key map used on desktops\nconst DefaultKeyMap = {\n  // Arrow Up\n  38: Direction.UP,\n  // Arrow Down\n  40: Direction.DOWN,\n  // Arrow Left\n  37: Direction.LEFT,\n  // Arrow Right\n  39: Direction.RIGHT,\n  // Enter\n  13: Action.SELECT,\n  // Escape\n  27: Action.BACK,\n};\n\n/**\n * Returns the matching key map for the current platform.\n */\nexport function getKeyMapForPlatform(): KeyMap {\n  const applicableKeyMap = [\n    WebOsKeyMap,\n    TizenKeyMap,\n    PlayStationKeyMap,\n    HisenseKeyMap,\n    AndroidKeyMap,\n  ].find(keyMap => keyMap.isApplicable());\n\n  if (applicableKeyMap) {\n    return applicableKeyMap.keyCodes;\n  } else {\n    return DefaultKeyMap;\n  }\n}\n","import { Direction } from './types';\n\ninterface Vector {\n  x: number;\n  y: number;\n}\n\n/**\n * Calculates the length of a vector.\n *\n * @param vector The vector to calculate the length of\n */\nfunction length(vector: Vector): number {\n  return Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));\n}\n\n/**\n * Normalizes the given vector.\n *\n * @param vector The vector to normalize\n */\nfunction normalize(vector: Vector): Vector {\n  const len = length(vector);\n\n  return {\n    x: vector.x / len,\n    y: vector.y / len,\n  };\n}\n\n/**\n * Calculates the dot product between 2 vectors.\n *\n * @param a The first vector\n * @param b The second vector\n */\nfunction dotProduct(a: Vector, b: Vector): number {\n  return a.x * b.x + a.y * b.y;\n}\n\n/**\n * Calculates the distance between the 2 points pointed to by the provided vectors.\n *\n * @param a The first vector\n * @param b The second vector\n */\nfunction distance(a: Vector, b: Vector): number {\n  return length({\n    x: b.x - a.x,\n    y: b.y - a.y,\n  });\n}\n\n/**\n * Returns a vector that corresponds to the center of the provided element.\n *\n * @param element The element to get the center of\n */\nfunction getElementVector(element: HTMLElement): Vector {\n  const boundingRect = getBoundingRectFromElement(element);\n\n  return {\n    x: boundingRect.x + boundingRect.width / 2,\n    y: boundingRect.y + boundingRect.height / 2,\n  };\n}\n\n/**\n * Returns the angle in degrees between the unit vector pointing in the given {Direction} and the unit vector that\n * points from the current element to another element.\n *\n * @param a The vector of the current element\n * @param b The vector of the other element\n * @param direction The direction to move along\n */\nfunction calculateAngle(a: Vector, b: Vector, direction: Direction): number {\n  const directionVector = {\n    x: (direction === Direction.LEFT ? -1 : direction === Direction.RIGHT ? 1 : 0),\n    y: (direction === Direction.UP ? -1 : direction === Direction.DOWN ? 1 : 0),\n  };\n\n  const elementVector = normalize({\n    x: b.x - a.x,\n    y: b.y - a.y,\n  });\n\n  const angleCos = dotProduct(directionVector, elementVector) / (length(directionVector) * length(elementVector));\n\n  return Math.acos(angleCos) * 180 / Math.PI;\n}\n\n/**\n * Returns the closest element to the current element when trying to navigate in the provided direction. Returns\n * undefined, if there is not element in the given direction.\n *\n * @param activeElement The currently selected element\n * @param elements The list of all elements that can be navigated to\n * @param direction The direction in which to navigate\n */\nexport function getElementInDirection(\n  activeElement: HTMLElement,\n  elements: HTMLElement[],\n  direction: Direction,\n): HTMLElement | undefined {\n  if (!activeElement) return undefined;\n\n  const cutoffAngle = 45;\n  const activeElemVector = getElementVector(activeElement);\n\n  return elements\n    // don't take the current element into account\n    .filter(elem => elem !== activeElement)\n    // get the angle between, and distance to any other element from the current element\n    .map(element => {\n      const elementVector = getElementVector(element);\n      const dist = distance(activeElemVector, elementVector);\n      const angle = calculateAngle(activeElemVector, elementVector, direction);\n\n      return { angle, dist, element };\n    })\n    // filter out any elements that don't align with the direction we're trying to move in\n    .filter(({ angle }) => angle <= cutoffAngle)\n    // sort the resulting elements based on their distance to the current element in ascending order\n    .sort(({ angle: angleA, dist: distA }, { angle: angleB, dist: distB }) => (angleA - angleB) + (distA - distB))\n    // return the element closest to the current element\n    .shift()?.element;\n}\n\n/**\n * Returns DOMRect like object containing horizontal X and vertical Y coordinates from and HTMLElement.\n * Handles use-cases for getBoundingClientRect when the return type can be either\n * a ClientRect or DOMRect object type.\n *\n * @param element The currently selected element\n */\nexport function getBoundingRectFromElement(element: HTMLElement) {\n  const boundingRect = element.getBoundingClientRect();\n\n  if (typeof boundingRect.x !== 'number' && typeof boundingRect.y !== 'number') {\n    boundingRect.x = boundingRect.left;\n    boundingRect.y = boundingRect.top;\n  }\n\n  return boundingRect;\n}\n\n","import { Container } from '../components/container';\nimport { Component } from '../components/component';\nimport { getElementInDirection } from './navigationalgorithm';\nimport { getHtmlElementsFromComponents } from './gethtmlelementsfromcomponents';\nimport { NodeEventSubscriber } from './nodeeventsubscriber';\nimport { isSettingsPanel } from './typeguards';\nimport { Action, ActionCallback, Callback, Direction, NavigationCallback } from './types';\n\n/**\n * Used as part of spatial navigation. Groups together different components to which you can navigate to, in a single\n * navigation group.\n *\n * Responsible for finding elements in direction on navigation and for tracking active element inside the group.\n * Triggers blur and focus on element when active element is changed, as well as click on element on `Action.SELECT`.\n * Will call `hideUi()` on passed in container if `Action.BACK` is called.\n */\nexport class NavigationGroup {\n  private activeElement?: HTMLElement;\n  private activeElementBeforeDisable?: HTMLElement;\n  private readonly components: Component<unknown>[];\n  private removeElementHoverEventListeners = () => {};\n  private readonly eventSubscriber: NodeEventSubscriber;\n\n  constructor(public readonly container: Container<unknown>, ...components: Component<unknown>[]) {\n    this.components = components;\n    this.eventSubscriber = new NodeEventSubscriber();\n  }\n\n  /**\n   * If overwritten, allows to implement custom navigation behavior. Per default, the internal handler will still be\n   * executed. To prevent execution of the default navigation handler, call `preventDefault()`;\n   *\n   * @param direction {Direction} The direction to move along\n   * @param target {HTMLElement} The target element for the event\n   * @param preventDefault {() => void} A function that, when called, will prevent the execution of the default handler\n   */\n  public onNavigation?: NavigationCallback;\n\n  /**\n   * If overwritten, allows to implement custom action behavior. Per default, the internal handler will still be\n   * executed. To prevent execution of the default action handler, call `preventDefault()`;\n   *\n   * @param action {Action} The action that was called\n   * @param target {HTMLElement} The target element that action was called on\n   * @param preventDefault {() => void} A function that, when called, will prevent the execution of the default handler\n   */\n  public onAction?: ActionCallback;\n\n  /**\n   * Returns the active HTMLElement.\n   */\n  public getActiveElement(): HTMLElement | undefined {\n    return this.activeElement;\n  }\n\n  private focusElement(element: HTMLElement): void {\n    this.blurActiveElement();\n    this.activeElement = element;\n    this.activeElement.focus();\n  }\n\n  private blurActiveElement(): void {\n    this.activeElement?.blur();\n  }\n\n  private focusFirstElement(): void {\n    const element = getHtmlElementsFromComponents(this.components)[0];\n    if (element) {\n      this.focusElement(element);\n    }\n  }\n\n  protected defaultNavigationHandler(direction: Direction): void {\n    const targetElement = getElementInDirection(\n      this.activeElement,\n      getHtmlElementsFromComponents(this.components),\n      direction,\n    );\n\n    if (targetElement) {\n      this.focusElement(targetElement);\n    }\n  }\n\n  protected defaultActionHandler(action: Action): void {\n    switch (action) {\n      case(Action.SELECT):\n        this.activeElement.click();\n        break;\n      case(Action.BACK):\n        this.container.hide();\n        break;\n    }\n  }\n\n  private handleInput<T>(data: T, defaultHandler: (data: T) => void, userHandler?: Callback<T>): void {\n    let handleDefault = true;\n    const preventDefault = () => (handleDefault = false);\n\n    userHandler?.(data, this.activeElement, preventDefault);\n\n    if (handleDefault) {\n      defaultHandler.call(this, data);\n    }\n  }\n\n  /**\n   * Handles a navigation event.\n   *\n   * @param direction The direction of the navigation event\n   */\n  public handleNavigation(direction: Direction): void {\n    if (!this.activeElement) {\n      // If we do not have an active element, the active element has been disabled by a mouseleave\n      // event. We should continue the navigation at the exact place where we left off.\n      if (this.activeElementBeforeDisable) {\n        this.focusElement(this.activeElementBeforeDisable);\n      } else {\n        this.focusFirstElement();\n      }\n      return;\n    }\n    this.handleInput(direction, this.defaultNavigationHandler, this.onNavigation);\n  }\n\n  /**\n   * Handles an action event.\n   *\n   * @param action The action of the event\n   */\n  public handleAction(action: Action): void {\n    this.handleInput(action, this.defaultActionHandler, this.onAction);\n  }\n\n  /**\n   * Disable navigation group\n   *\n   * Call blur on active element, set as undefined, and track it as element before disable.\n   */\n  public disable(): void {\n    if (this.activeElement) {\n      this.activeElementBeforeDisable = this.activeElement;\n      this.blurActiveElement();\n      this.activeElement = undefined;\n    }\n  }\n\n  /**\n   * Enable navigation group\n   *\n   * Sets active element to either element that was active before disable, or first element of tracked elements.\n   * If it is settings panel, it will always focus first element in the list.\n   */\n  public enable(): void {\n    if (this.activeElementBeforeDisable && !isSettingsPanel(this.container)) {\n      this.focusElement(this.activeElementBeforeDisable);\n      this.activeElementBeforeDisable = undefined;\n    } else {\n      this.focusFirstElement();\n    }\n\n    this.trackElementHover();\n  }\n\n  /**\n   * Adds event listener for `mouseenter` on tracked elements to ensure tracking of active element will work together\n   * in combination of using mouse and key events.\n   */\n  private trackElementHover(): void {\n    this.removeElementHoverEventListeners();\n\n    const removeEventListenerFunctions = getHtmlElementsFromComponents(this.components).map(htmlElem => {\n      const enterListener = this.focusElement.bind(this, htmlElem);\n      const exitListener = () => this.disable();\n\n      this.eventSubscriber.on(htmlElem, 'mouseenter', enterListener);\n      this.eventSubscriber.on(htmlElem, 'mouseleave', exitListener);\n\n      return () => {\n        this.eventSubscriber.off(htmlElem, 'mouseenter', enterListener);\n        this.eventSubscriber.off(htmlElem, 'mouseleave', exitListener);\n      };\n    });\n\n    this.removeElementHoverEventListeners = () => removeEventListenerFunctions.forEach(fn => fn());\n  }\n\n  /**\n   * Dispose of navigation group\n   */\n  public release(): void {\n    this.eventSubscriber.release();\n    this.activeElement = undefined;\n    this.components.splice(0, this.components.length);\n    this.removeElementHoverEventListeners();\n  }\n}\n","type Listeners = ([Node, EventListenerOrEventListenerObject, boolean | AddEventListenerOptions])[];\n\n/**\n * Allows to subscribe to Node events.\n */\nexport class NodeEventSubscriber {\n  private readonly attachedListeners: Map<keyof HTMLElementEventMap, Listeners>;\n\n  constructor() {\n    this.attachedListeners = new Map();\n  }\n\n  private getEventListenersOfType(type: keyof HTMLElementEventMap): Listeners {\n    if (!this.attachedListeners.has(type)) {\n      this.attachedListeners.set(type, []);\n    }\n\n    return this.attachedListeners.get(type);\n  }\n\n  /**\n   * Adds the given event listener to the node.\n   *\n   * @param node The node to remove the event listener from\n   * @param type The event to listen to\n   * @param listener The listener to remove\n   * @param options The event listener options\n   */\n  public on(\n    node: Node,\n    type: keyof HTMLElementEventMap,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void {\n    node.addEventListener(type, listener, options);\n    this.getEventListenersOfType(type).push([node, listener, options]);\n  }\n\n  /**\n   * Removes the given event listener from the node.\n   *\n   * @param node The node to attach the event listener to\n   * @param type The event to listen to\n   * @param listener The listener to add\n   * @param options The event listener options\n   */\n  public off(\n    node: Node,\n    type: keyof HTMLElementEventMap,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void {\n    const listenersOfType = this.getEventListenersOfType(type);\n    const listenerIndex = listenersOfType.findIndex(([otherNode, otherListener, otherOptions]) => {\n      return otherNode === node && otherListener === listener && otherOptions === options;\n    });\n\n    node.removeEventListener(type, listener, options);\n\n    if (listenerIndex > -1) {\n      listenersOfType.splice(listenerIndex, 1);\n    }\n  }\n\n  /**\n   * Removes all attached event listeners.\n   */\n  public release(): void {\n    this.attachedListeners.forEach((listenersOfType, type) => {\n      listenersOfType.forEach(([element, listener, options]) => {\n        this.off(element, type, listener, options);\n      });\n    });\n    this.attachedListeners.clear();\n  }\n}\n","import { NavigationGroup } from './navigationgroup';\nimport { Component } from '../components/component';\nimport { UIContainer } from '../components/uicontainer';\nimport { Action, Direction } from './types';\n\n/**\n * Extends NavigationGroup and provides additional logic for hiding and showing the UI on the root container.\n */\nexport class RootNavigationGroup extends NavigationGroup {\n  constructor(public readonly container: UIContainer, ...elements: Component<unknown>[]) {\n    super(container, ...elements);\n  }\n\n  public handleAction(action: Action) {\n    this.container.showUi();\n\n    super.handleAction(action);\n  }\n\n  public handleNavigation(direction: Direction) {\n    this.container.showUi();\n\n    super.handleNavigation(direction);\n  }\n\n  protected defaultActionHandler(action: Action): void {\n    if (action === Action.BACK) {\n      this.container.hideUi();\n    } else {\n      super.defaultActionHandler(action);\n    }\n  }\n\n  public release(): void {\n    super.release();\n  }\n}\n","import { RootNavigationGroup } from './rootnavigationgroup';\nimport { NodeEventSubscriber } from './nodeeventsubscriber';\nimport { Action, Direction } from './types';\nimport {getBoundingRectFromElement} from './navigationalgorithm';\n\nconst DefaultScrubSpeedPercentage = 0.005;\nconst ScrubSpeedClearInterval = 100;\nconst ScrubSpeedMultiplier = 1.1;\n\n/**\n * Handles Spatial Navigation interaction with the seek bar. Ensures, that seek operations can be executed and that the\n * scrubbing tooltip is shown as if the user scrubbed using the mouse/touchscreen.\n */\nexport class SeekBarHandler {\n  private readonly cursorPosition = { x: 0, y: 0};\n  private readonly eventSubscriber: NodeEventSubscriber;\n  private isScrubbing = false;\n  private scrubSpeedResetTimeout: number;\n  private scrubSpeedPercentage = DefaultScrubSpeedPercentage;\n\n  constructor(private readonly rootNavigationGroup: RootNavigationGroup) {\n    this.rootNavigationGroup.onAction = this.onAction;\n    this.eventSubscriber = new NodeEventSubscriber();\n    this.rootNavigationGroup.onNavigation = this.onNavigation;\n  }\n\n  private updateScrubSpeedPercentage(): void {\n    clearTimeout(this.scrubSpeedResetTimeout);\n    this.scrubSpeedPercentage *= ScrubSpeedMultiplier;\n    this.scrubSpeedResetTimeout = window.setTimeout(\n      () => this.scrubSpeedPercentage = DefaultScrubSpeedPercentage, ScrubSpeedClearInterval,\n    );\n  }\n\n  private getIncrement(direction: Direction, seekBarWrapper: HTMLElement): number {\n    this.updateScrubSpeedPercentage();\n\n    const seekBarWidth = seekBarWrapper.getBoundingClientRect().width;\n    const increment = seekBarWidth * this.scrubSpeedPercentage;\n\n    return direction === Direction.RIGHT ? increment : -increment;\n  }\n\n  private resetCursorPosition(): void {\n    this.cursorPosition.x = 0;\n    this.cursorPosition.y = 0;\n  }\n\n  private updateCursorPosition(direction: Direction, seekBarWrapper: HTMLElement): void {\n    this.cursorPosition.x += this.getIncrement(direction, seekBarWrapper);\n  }\n\n  private initializeCursorPosition(seekBarWrapper: HTMLElement): void {\n    const playbackPositionMarker = getPlaybackPositionMarker(seekBarWrapper);\n    const rect = getBoundingRectFromElement(playbackPositionMarker);\n\n\n    const startX = rect.x + (rect.width / 2);\n    const startY = rect.y;\n\n    this.cursorPosition.x = startX;\n    this.cursorPosition.y = startY;\n  }\n\n  private initializeOrUpdateCursorPosition(seekBarWrapper: HTMLElement, direction: Direction): void {\n    if (this.isScrubbing) {\n      this.updateCursorPosition(direction, seekBarWrapper);\n    } else {\n      this.initializeCursorPosition(seekBarWrapper);\n    }\n\n    this.isScrubbing = true;\n  }\n\n  private getCursorPositionMouseEventInit(): MouseEventInit {\n    return {\n      clientX: this.cursorPosition.x,\n      clientY: this.cursorPosition.y,\n    };\n  }\n\n  private dispatchMouseMoveEvent(seekBar: Element): void {\n    seekBar.dispatchEvent(new MouseEvent('mousemove', this.getCursorPositionMouseEventInit()));\n  }\n\n  private readonly onNavigation = (direction: Direction, target: HTMLElement, preventDefault: () => void): void => {\n    if (!isSeekBarWrapper(target)) {\n      return;\n    }\n\n    if (direction === Direction.UP || direction === Direction.DOWN) {\n      this.stopSeeking(getSeekBar(target));\n\n      return;\n    }\n\n    this.initializeOrUpdateCursorPosition(target, direction);\n    this.dispatchMouseMoveEvent(getSeekBar(target));\n\n    preventDefault();\n  };\n\n  private dispatchMouseClickEvent(seekBar: Element): void {\n    const mouseDownHandler = () => {\n      const mouseEventInit = this.getCursorPositionMouseEventInit();\n\n      document.dispatchEvent(new MouseEvent('mouseup', mouseEventInit));\n      this.eventSubscriber.off(seekBar, 'mousedown', mouseDownHandler);\n      this.stopSeeking(seekBar);\n    };\n\n    this.eventSubscriber.on(seekBar, 'mousedown', mouseDownHandler);\n    seekBar.dispatchEvent(new MouseEvent('mousedown'));\n  }\n\n  private stopSeeking(seekBar: Element): void {\n    this.resetCursorPosition();\n    this.isScrubbing = false;\n    this.dispatchMouseLeaveEvent(seekBar);\n  }\n\n  private dispatchMouseLeaveEvent(seekBar: Element): void {\n    seekBar.dispatchEvent(new MouseEvent('mouseleave'));\n  }\n\n  private readonly onAction = (action: Action, target: HTMLElement, preventDefault: () => void): void => {\n    if (!isSeekBarWrapper(target)) {\n      return;\n    }\n\n    const seekBar = getSeekBar(target);\n\n    if (action === Action.SELECT && this.isScrubbing) {\n      this.dispatchMouseClickEvent(seekBar);\n      preventDefault();\n    } else if (action === Action.BACK) {\n      this.stopSeeking(seekBar);\n      preventDefault();\n    }\n  };\n\n  /**\n   * Releases the SeekBraHandler, making sure all event subscribers are removed.\n   */\n  public release(): void {\n    this.eventSubscriber.release();\n    this.rootNavigationGroup.onAction = undefined;\n    this.rootNavigationGroup.onNavigation = undefined;\n  }\n}\n\nfunction isSeekBarWrapper(element: HTMLElement): boolean {\n  return Array.from(element.classList).findIndex(className => /-ui-seekbar$/.test(className)) > -1;\n}\n\nfunction getSeekBar(seekBarWrapper: HTMLElement): Element {\n  return seekBarWrapper.children.item(0);\n}\n\nfunction getPlaybackPositionMarker(seekBarWrapper: HTMLElement): HTMLElement {\n  return seekBarWrapper.querySelector('[class*=\"seekbar-playbackposition-marker\"]');\n}\n","import { NavigationGroup } from './navigationgroup';\nimport { RootNavigationGroup } from './rootnavigationgroup';\nimport { NodeEventSubscriber } from './nodeeventsubscriber';\nimport { SeekBarHandler } from './seekbarhandler';\nimport { getKeyMapForPlatform } from './keymap';\nimport { Action, Direction, KeyMap } from './types';\nimport { isAction, isDirection } from './typeguards';\n\n/**\n * SpatialNavigation keeps track of all navigation groups, and updates the active navigation group when visibility\n * changes on group container.\n *\n * It listens to key events, and triggers either handleNavigation or handleAction on the active group.\n * SeekBarHandler will get instantiated with root navigation group and disposed on release of the spatial navigation.\n */\nexport class SpatialNavigation {\n  private unsubscribeVisibilityChangesFns: (() => void)[];\n  private readonly navigationGroups: NavigationGroup[] = [];\n  private readonly activeNavigationGroups: NavigationGroup[];\n  private readonly eventSubscriber: NodeEventSubscriber;\n  private readonly seekBarHandler: SeekBarHandler;\n  private readonly keyMap: KeyMap;\n\n  constructor(rootNavigationGroup: RootNavigationGroup, ...navigationGroups: NavigationGroup[]) {\n    this.seekBarHandler = new SeekBarHandler(rootNavigationGroup);\n\n    this.activeNavigationGroups = [];\n    this.unsubscribeVisibilityChangesFns = [];\n    this.eventSubscriber = new NodeEventSubscriber();\n    this.navigationGroups = [rootNavigationGroup, ...navigationGroups];\n    this.keyMap = getKeyMapForPlatform();\n\n    this.subscribeToNavigationGroupVisibilityChanges();\n    this.attachKeyEventHandler();\n    this.enableDefaultNavigationGroup();\n  }\n\n  private attachKeyEventHandler(): void {\n    this.eventSubscriber.on(document, 'keydown', this.handleKeyEvent, true);\n  }\n\n  private onShow = (group: NavigationGroup): void => {\n    this.activeNavigationGroups.push(group);\n    this.updateEnabledNavigationGroup();\n  };\n\n  private onHide = (group: NavigationGroup): void => {\n    const groupIndex = this.activeNavigationGroups.findIndex(other => other === group);\n\n    if (groupIndex > -1) {\n      group.disable();\n      this.activeNavigationGroups.splice(groupIndex, 1);\n      this.updateEnabledNavigationGroup();\n    }\n  };\n\n  /**\n   * Subscribes to onHide and onShow on all navigation groups containers as Spatial navigation tracks active navigation\n   * group based on their container visibility.\n   */\n  private subscribeToNavigationGroupVisibilityChanges(): void {\n    this.navigationGroups.forEach(group => {\n      const onShowHandler = () => this.onShow(group);\n      const onHideHandler = () => this.onHide(group);\n\n      group.container.onShow.subscribe(onShowHandler);\n      group.container.onHide.subscribe(onHideHandler);\n\n      this.unsubscribeVisibilityChangesFns.push(\n        () => group.container.onShow.unsubscribe(onShowHandler),\n        () => group.container.onHide.unsubscribe(onHideHandler),\n      );\n    });\n  }\n\n  private unsubscribeFromNavigationGroupVisibilityChanges(): void {\n    this.unsubscribeVisibilityChangesFns.forEach(unsub => unsub());\n    this.unsubscribeVisibilityChangesFns = [];\n  }\n\n  /**\n   * It will enable group of which container is currently shown\n   * If there are no groups with containers that are currently visible, it will enable root navigation group\n   */\n  private enableDefaultNavigationGroup(): void {\n    const isShown = (group: NavigationGroup) => group.container.isShown();\n    const groupToEnable = this.navigationGroups.find(isShown) ?? this.navigationGroups[0];\n\n    if (groupToEnable) {\n      this.activeNavigationGroups.push(groupToEnable);\n      this.updateEnabledNavigationGroup();\n    }\n  }\n\n  /**\n   * Disables navigation groups that are no longer active and calls enable on last pushed navigation group\n   */\n  private updateEnabledNavigationGroup(): void {\n    this.activeNavigationGroups.forEach((group, idx) => {\n      if (idx < this.activeNavigationGroups.length - 1) {\n        group.disable();\n      } else {\n        group.enable();\n      }\n    });\n  }\n\n  /**\n   * Returns currently active navigation group\n   */\n  public getActiveNavigationGroup(): NavigationGroup | undefined {\n    return this.activeNavigationGroups[this.activeNavigationGroups.length - 1];\n  }\n\n  /**\n   * Checks if keyboard event keycode is tracked either as Direction or Action and calls appropriate handler on active\n   * navigation group\n   *\n   * @param e {KeyboardEvent}\n   */\n  private handleKeyEvent = (e: KeyboardEvent): void => {\n    const event: Direction | Action | undefined = this.keyMap[getKeyCode(e)];\n\n    const active = this.getActiveNavigationGroup();\n    if (!active || !active.container || active.container.isHidden() || active.container.isDisabled()) {\n      return;\n    }\n\n    if (isDirection(event)) {\n      active.handleNavigation(event);\n\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    if (isAction(event)) {\n      active.handleAction(event);\n\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  };\n\n  /**\n   * Dispose of SpatialNavigation\n   *\n   * Remove all event handlers, release seekbar handler and release all navigation groups.\n   */\n  public release(): void {\n    this.unsubscribeFromNavigationGroupVisibilityChanges();\n    this.eventSubscriber.release();\n    this.navigationGroups.forEach(group => group.release());\n    this.seekBarHandler.release();\n  }\n}\n\nfunction getKeyCode(event: KeyboardEvent): number {\n  return event.keyCode;\n}\n","import { Component } from '../components/component';\nimport { SettingsPanel } from '../components/settingspanel';\nimport { Container } from '../components/container';\nimport { ListBox } from '../components/listbox';\nimport { Action, Direction } from './types';\n\nexport function isSettingsPanel(component: Component<unknown>): component is SettingsPanel {\n  return component instanceof SettingsPanel;\n}\n\nexport function isComponent(obj: unknown): obj is Component<unknown> {\n  return obj !== null && obj !== undefined && obj instanceof Component;\n}\n\nexport function isContainer(obj: unknown): obj is Container<unknown> {\n  return obj !== null && obj !== undefined && obj instanceof Container;\n}\n\nexport function isListBox(obj: unknown): obj is ListBox {\n  return obj instanceof ListBox;\n}\n\nexport function isDirection(direction: unknown): direction is Direction {\n  return typeof direction === 'string' && Object.values<string>(Direction).includes(direction);\n}\n\nexport function isAction(action: unknown): action is Action {\n  return typeof action === 'string' && Object.values<string>(Action).includes(action);\n}\n","export type Callback<T> = (data: T, target: HTMLElement, preventDefault: () => void) => void;\nexport type NavigationCallback = Callback<Direction>;\nexport type ActionCallback = Callback<Action>;\nexport type KeyMap = {\n  [keyCode: number]: Action | Direction;\n};\n\nexport enum Direction {\n  UP = 'up',\n  DOWN = 'down',\n  LEFT = 'left',\n  RIGHT = 'right',\n}\n\nexport enum Action {\n  SELECT = 'select',\n  BACK = 'back',\n}\n","export namespace StorageUtils {\n  let hasLocalStorageCache: boolean;\n\n  export function hasLocalStorage(): boolean {\n    if (hasLocalStorageCache) {\n      return hasLocalStorageCache;\n    }\n\n    // hasLocalStorage is used to safely ensure we can use localStorage\n    // taken from https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage\n    let storage: any = { length: 0 };\n    try {\n      storage = window['localStorage'];\n      let x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      hasLocalStorageCache = true;\n    }\n    catch (e) {\n      hasLocalStorageCache = e instanceof DOMException && (\n          // everything except Firefox\n        e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === 'QuotaExceededError' ||\n        // Firefox\n        e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n        // acknowledge QuotaExceededError only if there's something already stored\n        storage.length !== 0;\n    }\n    return hasLocalStorageCache;\n  }\n\n  /**\n   * Stores a string item into localStorage.\n   * @param key the item's key\n   * @param data the item's data\n   */\n  export function setItem(key: string, data: string): void {\n    if (StorageUtils.hasLocalStorage()) {\n      window.localStorage.setItem(key, data);\n    }\n  }\n\n  /**\n   * Gets an item's string value from the localStorage.\n   * @param key the key to look up its associated value\n   * @return {string | null} Returns the string if found, null if there is no data stored for the key\n   */\n  export function getItem(key: string): string | null {\n    if (StorageUtils.hasLocalStorage()) {\n      return window.localStorage.getItem(key);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Stores an object into localStorage. The object will be serialized to JSON. The following types are supported\n   * in addition to the default types:\n   *  - ColorUtils.Color\n   *\n   * @param key the key to store the data to\n   * @param data the object to store\n   */\n  export function setObject<T>(key: string, data: T): void {\n    if (StorageUtils.hasLocalStorage()) {\n      let json = JSON.stringify(data);\n      setItem(key, json);\n    }\n  }\n\n  /**\n   * Gets an object for the given key from localStorage. The object will be deserialized from JSON. Beside the\n   * default types, the following types are supported:\n   *  - ColorUtils.Color\n   *\n   * @param key the key to look up its associated object\n   * @return {any} Returns the object if found, null otherwise\n   */\n  export function getObject<T>(key: string): T {\n    if (StorageUtils.hasLocalStorage()) {\n      let json = getItem(key);\n\n      if (key) {\n        let object = JSON.parse(json);\n        return <T>object;\n      }\n    }\n    return null;\n  }\n}\n","import { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\nexport namespace StringUtils {\n\n  export let FORMAT_HHMMSS: string = 'hh:mm:ss';\n  export let FORMAT_MMSS: string = 'mm:ss';\n\n  /**\n   * Formats a number of seconds into a time string with the pattern hh:mm:ss.\n   *\n   * @param totalSeconds the total number of seconds to format to string\n   * @param format the time format to output (default: hh:mm:ss)\n   * @returns {string} the formatted time string\n   */\n  export function secondsToTime(totalSeconds: number, format: string = FORMAT_HHMMSS): string {\n    let isNegative = totalSeconds < 0;\n\n    if (isNegative) {\n      // If the time is negative, we make it positive for the calculation below\n      // (else we'd get all negative numbers) and reattach the negative sign later.\n      totalSeconds = -totalSeconds;\n    }\n\n    // Split into separate time parts\n    let hours = Math.floor(totalSeconds / 3600);\n    let minutes = Math.floor(totalSeconds / 60) - hours * 60;\n    let seconds = Math.floor(totalSeconds) % 60;\n\n    return (isNegative ? '-' : '') + format\n        .replace('hh', leftPadWithZeros(hours, 2))\n        .replace('mm', leftPadWithZeros(minutes, 2))\n        .replace('ss', leftPadWithZeros(seconds, 2));\n  }\n\n  export function secondsToText(totalSeconds: number): string {\n    const isNegative = totalSeconds < 0;\n\n    if (isNegative) {\n      // If the time is negative, we make it positive for the calculation below\n      // (else we'd get all negative numbers) and reattach the negative sign later.\n      totalSeconds = -totalSeconds;\n    }\n\n    // Split into separate time parts\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor(totalSeconds / 60) - hours * 60;\n    const seconds = Math.floor(totalSeconds) % 60;\n\n    return (isNegative ? '-' : '') +\n    (hours !== 0 ? `${leftPadWithZeros(hours, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.hours'))} ` : '') +\n    (minutes !== 0 ? `${leftPadWithZeros(minutes, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.minutes'))} ` : '') +\n    `${leftPadWithZeros(seconds, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.seconds'))}`;\n  }\n\n  /**\n   * Converts a number to a string and left-pads it with zeros to the specified length.\n   * Example: leftPadWithZeros(123, 5) => '00123'\n   *\n   * @param num the number to convert to string and pad with zeros\n   * @param length the desired length of the padded string\n   * @returns {string} the padded number as string\n   */\n  function leftPadWithZeros(num: number | string, length: number): string {\n    let text = num + '';\n    let padding = '0000000000'.substr(0, length - text.length);\n    return padding + text;\n  }\n\n  /**\n   * Fills out placeholders in an ad message.\n   *\n   * Has the placeholders '{remainingTime[formatString]}', '{playedTime[formatString]}' and\n   * '{adDuration[formatString]}', which are replaced by the remaining time until the ad can be skipped, the current\n   * time or the ad duration. The format string is optional. If not specified, the placeholder is replaced by the time\n   * in seconds. If specified, it must be of the following format:\n   * - %d - Inserts the time as an integer.\n   * - %0Nd - Inserts the time as an integer with leading zeroes, if the length of the time string is smaller than N.\n   * - %f - Inserts the time as a float.\n   * - %0Nf - Inserts the time as a float with leading zeroes.\n   * - %.Mf - Inserts the time as a float with M decimal places. Can be combined with %0Nf, e.g. %04.2f (the time\n   * 10.123 would be printed as 0010.12).\n   * - %hh:mm:ss\n   * - %mm:ss\n   *\n   * Examples:\n   * - { text: 'Ad: {remainingTime%mm:ss} secs' }\n   * An input value of 100 would be displayed as: 'Ad: 01:40 secs'\n   * - { text: 'Ad: {remainingTime%f} secs' }\n   * An input value of 100 would be displayed as: 'Ad: 100.0 secs'\n   *\n   * @param adMessage an ad message with optional placeholders to fill\n   * @param skipOffset if specified, {remainingTime} will be filled with the remaining time until the ad can be skipped\n   * @param player the player to get the time data from\n   * @returns {string} the ad message with filled placeholders\n   */\n  export function replaceAdMessagePlaceholders(adMessage: string, skipOffset: number, player: PlayerAPI) {\n    let adMessagePlaceholderRegex = new RegExp(\n      '\\\\{(remainingTime|playedTime|adDuration)(}|%((0[1-9]\\\\d*(\\\\.\\\\d+(d|f)|d|f)|\\\\.\\\\d+f|d|f)|hh:mm:ss|mm:ss)})',\n      'g',\n    );\n\n    return adMessage.replace(adMessagePlaceholderRegex, (formatString) => {\n      let time = 0;\n      if (formatString.indexOf('remainingTime') > -1) {\n        if (skipOffset) {\n          time = Math.ceil(skipOffset - player.getCurrentTime());\n        } else {\n          time = player.getDuration() - player.getCurrentTime();\n        }\n      } else if (formatString.indexOf('playedTime') > -1) {\n        time = player.getCurrentTime();\n      } else if (formatString.indexOf('adDuration') > -1) {\n        time = player.getDuration();\n      }\n      return formatNumber(Math.round(time), formatString);\n    });\n  }\n\n  function formatNumber(time: number, format: string) {\n    let formatStringValidationRegex = /%((0[1-9]\\d*(\\.\\d+(d|f)|d|f)|\\.\\d+f|d|f)|hh:mm:ss|mm:ss)/;\n    let leadingZeroesRegex = /(%0[1-9]\\d*)(?=(\\.\\d+f|f|d))/;\n    let decimalPlacesRegex = /\\.\\d*(?=f)/;\n\n    if (!formatStringValidationRegex.test(format)) {\n      // If the format is invalid, we set a default fallback format\n      format = '%d';\n    }\n\n    // Determine the number of leading zeros\n    let leadingZeroes = 0;\n    let leadingZeroesMatches = format.match(leadingZeroesRegex);\n    if (leadingZeroesMatches) {\n      leadingZeroes = parseInt(leadingZeroesMatches[0].substring(2));\n    }\n\n    // Determine the number of decimal places\n    let numDecimalPlaces = null;\n    let decimalPlacesMatches = format.match(decimalPlacesRegex);\n    if (decimalPlacesMatches && !isNaN(parseInt(decimalPlacesMatches[0].substring(1)))) {\n      numDecimalPlaces = parseInt(decimalPlacesMatches[0].substring(1));\n      if (numDecimalPlaces > 20) {\n        numDecimalPlaces = 20;\n      }\n    }\n\n    // Float format\n    if (format.indexOf('f') > -1) {\n      let timeString = '';\n\n      if (numDecimalPlaces !== null) {\n        // Apply fixed number of decimal places\n        timeString = time.toFixed(numDecimalPlaces);\n      } else {\n        timeString = '' + time;\n      }\n\n      // Apply leading zeros\n      if (timeString.indexOf('.') > -1) {\n        return leftPadWithZeros(timeString, timeString.length + (leadingZeroes - timeString.indexOf('.')));\n      } else {\n        return leftPadWithZeros(timeString, leadingZeroes);\n      }\n\n    }\n    // Time format\n    else if (format.indexOf(':') > -1) {\n      let totalSeconds = Math.ceil(time);\n\n      // hh:mm:ss format\n      if (format.indexOf('hh') > -1) {\n        return secondsToTime(totalSeconds);\n      }\n      // mm:ss format\n      else {\n        let minutes = Math.floor(totalSeconds / 60);\n        let seconds = totalSeconds % 60;\n\n        return leftPadWithZeros(minutes, 2) + ':' + leftPadWithZeros(seconds, 2);\n      }\n    }\n    // Integer format\n    else {\n      return leftPadWithZeros(Math.ceil(time), leadingZeroes);\n    }\n  }\n}\n","import { ListItem, ListSelector, ListSelectorConfig } from './components/listselector';\nimport { UIInstanceManager } from './uimanager';\nimport { PlayerAPI, SubtitleEvent, SubtitleTrack } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\n/**\n * Helper class to handle all subtitle related events\n *\n * This class listens to player events as well as the `ListSelector` event if selection changed\n */\nexport class SubtitleSwitchHandler {\n\n  private static SUBTITLES_OFF_KEY: string = 'null';\n\n  private player: PlayerAPI;\n  private listElement: ListSelector<ListSelectorConfig>;\n  private uimanager: UIInstanceManager;\n\n  constructor(player: PlayerAPI, element: ListSelector<ListSelectorConfig>, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.listElement = element;\n    this.uimanager = uimanager;\n\n    this.bindSelectionEvent();\n    this.bindPlayerEvents();\n    this.refreshSubtitles();\n  }\n\n  private bindSelectionEvent(): void {\n    this.listElement.onItemSelected.subscribe((_, value: string) => {\n      // TODO add support for multiple concurrent subtitle selections\n      if (value === SubtitleSwitchHandler.SUBTITLES_OFF_KEY) {\n        const currentSubtitle = this.player.subtitles.list().filter((subtitle) => subtitle.enabled).pop();\n        if (currentSubtitle) {\n          this.player.subtitles.disable(currentSubtitle.id);\n        }\n      } else {\n        this.player.subtitles.enable(value, true);\n      }\n    });\n  }\n\n  private bindPlayerEvents(): void {\n    this.player.on(this.player.exports.PlayerEvent.SubtitleAdded, this.addSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleEnabled, this.selectCurrentSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleDisabled, this.selectCurrentSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleRemoved, this.removeSubtitle);\n    // Update subtitles when source goes away\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.clearSubtitles);\n    // Update subtitles when the period within a source changes\n    this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshSubtitles);\n    this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshSubtitles);\n  }\n\n  private addSubtitle = (event: SubtitleEvent) => {\n    const subtitle = event.subtitle;\n    if (!this.listElement.hasItem(subtitle.id)) {\n      this.listElement.addItem(subtitle.id, subtitle.label);\n    }\n  };\n\n  private removeSubtitle = (event: SubtitleEvent) => {\n    const subtitle = event.subtitle;\n    if (this.listElement.hasItem(subtitle.id)) {\n      this.listElement.removeItem(subtitle.id);\n    }\n  };\n\n  private selectCurrentSubtitle = () => {\n    if (!this.player.subtitles) {\n      // Subtitles API not available (yet)\n      return;\n    }\n\n    let currentSubtitle = this.player.subtitles.list().filter((subtitle) => subtitle.enabled).pop();\n    this.listElement.selectItem(currentSubtitle ? currentSubtitle.id : SubtitleSwitchHandler.SUBTITLES_OFF_KEY);\n  };\n\n  private clearSubtitles = () => {\n    this.listElement.clearItems();\n  }\n\n  private refreshSubtitles = () => {\n    if (!this.player.subtitles) {\n      // Subtitles API not available (yet)\n      return;\n    }\n\n    const offListItem: ListItem = {\n      key: SubtitleSwitchHandler.SUBTITLES_OFF_KEY,\n      label: i18n.getLocalizer('off'),\n    };\n\n    const subtitles = this.player.subtitles.list();\n    const subtitleToListItem = (subtitle: SubtitleTrack): ListItem => {\n      return { key: subtitle.id, label: subtitle.label };\n    };\n\n    this.listElement.synchronizeItems([\n      offListItem, ...subtitles.map(subtitleToListItem),\n    ]);\n    this.selectCurrentSubtitle();\n  };\n}\n","// TODO change to internal (not exported) class, how to use in other files?\n/**\n * Executes a callback after a specified amount of time, optionally repeatedly until stopped.\n */\nexport class Timeout {\n\n  private readonly delay: number;\n  private readonly callback: () => void;\n  private readonly repeat: boolean;\n  // There's two setTimeout declarations, one on Window which returns type \"number\" and one in NodeJS which returns\n  // type \"Timer\". For unknown reasons builds on Jenkins fail due to a type mismatch when we use type \"number\" here,\n  // although it works on other platforms (e.g. Windows, Codeship).\n  // To work around the issue we use type \"any\". The type does not matter anyway because we're not working with\n  // this value except providing it to clearTimeout.\n  private timeoutOrIntervalId: any;\n  private active: boolean;\n\n  /**\n   * Creates a new timeout callback handler.\n   * @param delay the delay in milliseconds after which the callback should be executed\n   * @param callback the callback to execute after the delay time\n   * @param repeat if true, call the callback repeatedly in delay intervals\n   */\n  constructor(delay: number, callback: () => void, repeat: boolean = false) {\n    this.delay = delay;\n    this.callback = callback;\n    this.repeat = repeat;\n    this.timeoutOrIntervalId = 0;\n    this.active = false;\n  }\n\n  /**\n   * Starts the timeout and calls the callback when the timeout delay has passed.\n   * @returns {Timeout} the current timeout (so the start call can be chained to the constructor)\n   */\n  start(): this {\n    this.reset();\n    return this;\n  }\n\n  /**\n   * Clears the timeout. The callback will not be called if clear is called during the timeout.\n   */\n  clear(): void {\n    this.clearInternal();\n  }\n\n  /**\n   * Resets the passed timeout delay to zero. Can be used to defer the calling of the callback.\n   */\n  reset(): void {\n    this.clearInternal();\n\n    if (this.repeat) {\n      this.timeoutOrIntervalId = setInterval(this.callback, this.delay);\n    } else {\n      this.timeoutOrIntervalId = setTimeout(() => {\n        this.active = false;\n        this.callback();\n      }, this.delay);\n    }\n    this.active = true;\n  }\n\n  isActive(): boolean {\n    return this.active;\n  }\n\n  private clearInternal(): void {\n    if (this.repeat) {\n      clearInterval(this.timeoutOrIntervalId);\n    } else {\n      clearTimeout(this.timeoutOrIntervalId);\n    }\n    this.active = false;\n  }\n}","import { PlaybackJumpControlsOverlay } from '../custom/ts/components/playbackjumpoverlay';\nimport { SubtitleOverlay } from './components/subtitleoverlay';\nimport { SettingsPanelPage } from './components/settingspanelpage';\nimport { SettingsPanelItem } from './components/settingspanelitem';\nimport { VideoQualitySelectBox } from './components/videoqualityselectbox';\nimport { PlaybackSpeedSelectBox } from './components/playbackspeedselectbox';\nimport { AudioTrackSelectBox } from './components/audiotrackselectbox';\nimport { AudioQualitySelectBox } from './components/audioqualityselectbox';\nimport { SettingsPanel } from './components/settingspanel';\nimport { SubtitleSettingsPanelPage } from './components/subtitlesettings/subtitlesettingspanelpage';\nimport { SettingsPanelPageOpenButton } from './components/settingspanelpageopenbutton';\nimport { SubtitleSettingsLabel } from './components/subtitlesettings/subtitlesettingslabel';\nimport { SubtitleSelectBox } from './components/subtitleselectbox';\nimport { ControlBar } from './components/controlbar';\nimport { Container } from './components/container';\nimport { PlaybackTimeLabel, PlaybackTimeLabelMode } from './components/playbacktimelabel';\nimport { SeekBar } from './components/seekbar';\nimport { SeekBarLabel } from './components/seekbarlabel';\nimport { PlaybackToggleButton } from './components/playbacktogglebutton';\nimport { VolumeToggleButton } from './components/volumetogglebutton';\nimport { VolumeSlider } from './components/volumeslider';\nimport { Spacer } from './components/spacer';\nimport { PictureInPictureToggleButton } from './components/pictureinpicturetogglebutton';\nimport { AirPlayToggleButton } from './components/airplaytogglebutton';\nimport { CastToggleButton } from './components/casttogglebutton';\nimport { VRToggleButton } from './components/vrtogglebutton';\nimport { SettingsToggleButton } from './components/settingstogglebutton';\nimport { FullscreenToggleButton } from './components/fullscreentogglebutton';\nimport { UIContainer } from './components/uicontainer';\nimport { BufferingOverlay } from './components/bufferingoverlay';\nimport { PlaybackToggleOverlay } from './components/playbacktoggleoverlay';\nimport { CastStatusOverlay } from './components/caststatusoverlay';\nimport { TitleBar } from './components/titlebar';\nimport { RecommendationOverlay } from './components/recommendationoverlay';\nimport { Watermark } from './components/watermark';\nimport { ErrorMessageOverlay } from './components/errormessageoverlay';\nimport { AdClickOverlay } from './components/adclickoverlay';\nimport { AdMessageLabel } from './components/admessagelabel';\nimport { AdSkipButton } from './components/adskipbutton';\nimport { CloseButton } from './components/closebutton';\nimport { MetadataLabel, MetadataLabelContent } from './components/metadatalabel';\nimport { PlayerUtils } from './playerutils';\nimport { Label } from './components/label';\nimport { CastUIContainer } from './components/castuicontainer';\nimport { UIConditionContext, UIManager } from './uimanager';\nimport { UIConfig } from './uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\nimport { SubtitleListBox } from './components/subtitlelistbox';\nimport { AudioTrackListBox } from './components/audiotracklistbox';\nimport { SpatialNavigation } from './spatialnavigation/spatialnavigation';\nimport { RootNavigationGroup } from './spatialnavigation/rootnavigationgroup';\nimport { ListNavigationGroup, ListOrientation } from './spatialnavigation/ListNavigationGroup';\n\nexport namespace UIFactory {\n\n  export function buildDefaultUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return UIFactory.buildModernUI(player, config);\n  }\n\n  export function buildDefaultSmallScreenUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return UIFactory.buildModernSmallScreenUI(player, config);\n  }\n\n  export function buildDefaultCastReceiverUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return UIFactory.buildModernCastReceiverUI(player, config);\n  }\n\n  export function buildDefaultTvUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return UIFactory.buildModernTvUI(player, config);\n  }\n\n  export function modernUI() {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let mainSettingsPanelPage = new SettingsPanelPage({\n      components: [\n        new SettingsPanelItem(i18n.getLocalizer('settings.video.quality'), new VideoQualitySelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('speed'), new PlaybackSpeedSelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('settings.audio.track'), new AudioTrackSelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('settings.audio.quality'), new AudioQualitySelectBox()),\n      ],\n    });\n\n    let settingsPanel = new SettingsPanel({\n      components: [\n        mainSettingsPanelPage,\n      ],\n      hidden: true,\n    });\n\n    let subtitleSettingsPanelPage = new SubtitleSettingsPanelPage({\n      settingsPanel: settingsPanel,\n      overlay: subtitleOverlay,\n    });\n\n    const subtitleSelectBox = new SubtitleSelectBox();\n\n    let subtitleSettingsOpenButton = new SettingsPanelPageOpenButton({\n      targetPage: subtitleSettingsPanelPage,\n      container: settingsPanel,\n      ariaLabel: i18n.getLocalizer('settings.subtitles'),\n      text: i18n.getLocalizer('open'),\n    });\n\n    mainSettingsPanelPage.addComponent(\n      new SettingsPanelItem(\n        new SubtitleSettingsLabel({\n          text: i18n.getLocalizer('settings.subtitles'),\n          opener: subtitleSettingsOpenButton,\n        }),\n        subtitleSelectBox,\n        {\n          role: 'menubar',\n        },\n      ));\n\n    settingsPanel.addComponent(subtitleSettingsPanelPage);\n\n    let controlBar = new ControlBar({\n      components: [\n        settingsPanel,\n        new Container({\n          components: [\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n        new Container({\n          components: [\n            new PlaybackToggleButton(),\n            new VolumeToggleButton(),\n            new VolumeSlider(),\n            new Spacer(),\n            new PictureInPictureToggleButton(),\n            new AirPlayToggleButton(),\n            new CastToggleButton(),\n            new VRToggleButton(),\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\n            new FullscreenToggleButton(),\n          ],\n          cssClasses: ['controlbar-bottom'],\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new PlaybackJumpControlsOverlay(),\n        new CastStatusOverlay(),\n        controlBar,\n        new TitleBar(),\n        new RecommendationOverlay(),\n        new Watermark(),\n        new ErrorMessageOverlay(),\n      ],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernAdsUI() {\n    return new UIContainer({\n      components: [\n        new BufferingOverlay(),\n        new AdClickOverlay(),\n        new PlaybackToggleOverlay(),\n        new Container({\n          components: [\n            new AdMessageLabel({ text: i18n.getLocalizer('ads.remainingTime')}),\n            new AdSkipButton(),\n          ],\n          cssClass: 'ui-ads-status',\n        }),\n        new ControlBar({\n          components: [\n            new Container({\n              components: [\n                new PlaybackToggleButton(),\n                new VolumeToggleButton(),\n                new VolumeSlider(),\n                new Spacer(),\n                new FullscreenToggleButton(),\n              ],\n              cssClasses: ['controlbar-bottom'],\n            }),\n          ],\n        }),\n      ],\n      cssClasses: ['ui-skin-ads'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernSmallScreenUI() {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let mainSettingsPanelPage = new SettingsPanelPage({\n      components: [\n        new SettingsPanelItem(i18n.getLocalizer('settings.video.quality'), new VideoQualitySelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('speed'), new PlaybackSpeedSelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('settings.audio.track'), new AudioTrackSelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('settings.audio.quality'), new AudioQualitySelectBox()),\n      ],\n    });\n\n    let settingsPanel = new SettingsPanel({\n      components: [\n        mainSettingsPanelPage,\n      ],\n      hidden: true,\n      pageTransitionAnimation: false,\n      hideDelay: -1,\n    });\n\n    let subtitleSettingsPanelPage = new SubtitleSettingsPanelPage({\n      settingsPanel: settingsPanel,\n      overlay: subtitleOverlay,\n    });\n\n    let subtitleSettingsOpenButton = new SettingsPanelPageOpenButton({\n      targetPage: subtitleSettingsPanelPage,\n      container: settingsPanel,\n      ariaLabel: i18n.getLocalizer('settings.subtitles'),\n      text: i18n.getLocalizer('open'),\n    });\n\n    const subtitleSelectBox = new SubtitleSelectBox();\n\n    mainSettingsPanelPage.addComponent(\n      new SettingsPanelItem(\n        new SubtitleSettingsLabel({\n          text: i18n.getLocalizer('settings.subtitles'),\n          opener: subtitleSettingsOpenButton,\n        }),\n        subtitleSelectBox,\n        {\n          role: 'menubar',\n        },\n      ));\n\n    settingsPanel.addComponent(subtitleSettingsPanelPage);\n\n    settingsPanel.addComponent(new CloseButton({ target: settingsPanel }));\n    subtitleSettingsPanelPage.addComponent(new CloseButton({ target: settingsPanel }));\n\n    let controlBar = new ControlBar({\n      components: [\n        new Container({\n          components: [\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new CastStatusOverlay(),\n        new PlaybackToggleOverlay(),\n        new RecommendationOverlay(),\n        controlBar,\n        new TitleBar({\n          components: [\n            new MetadataLabel({ content: MetadataLabelContent.Title }),\n            new CastToggleButton(),\n            new VRToggleButton(),\n            new PictureInPictureToggleButton(),\n            new AirPlayToggleButton(),\n            new VolumeToggleButton(),\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\n            new FullscreenToggleButton(),\n          ],\n        }),\n        settingsPanel,\n        new Watermark(),\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: ['ui-skin-smallscreen'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernSmallScreenAdsUI() {\n    return new UIContainer({\n      components: [\n        new BufferingOverlay(),\n        new AdClickOverlay(),\n        new PlaybackToggleOverlay(),\n        new TitleBar({\n          components: [\n            // dummy label with no content to move buttons to the right\n            new Label({ cssClass: 'label-metadata-title' }),\n            new FullscreenToggleButton(),\n          ],\n        }),\n        new Container({\n          components: [\n            new AdMessageLabel({ text: 'Ad: {remainingTime} secs' }),\n            new AdSkipButton(),\n          ],\n          cssClass: 'ui-ads-status',\n        }),\n      ],\n      cssClasses: ['ui-skin-ads', 'ui-skin-smallscreen'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernCastReceiverUI() {\n    let controlBar = new ControlBar({\n      components: [\n        new Container({\n          components: [\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\n            new SeekBar({ smoothPlaybackPositionUpdateIntervalMs: -1 }),\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n      ],\n    });\n\n    return new CastUIContainer({\n      components: [\n        new SubtitleOverlay(),\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new Watermark(),\n        controlBar,\n        new TitleBar({ keepHiddenWithoutMetadata: true }),\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: ['ui-skin-cast-receiver'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function buildModernUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    // show smallScreen UI only on mobile/handheld devices\n    let smallScreenSwitchWidth = 600;\n\n    return new UIManager(player, [{\n      ui: modernSmallScreenAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth && context.isAd\n          && context.adRequiresUi;\n      },\n    }, {\n      ui: modernAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: modernSmallScreenUI(),\n      condition: (context: UIConditionContext) => {\n        return !context.isAd && !context.adRequiresUi && context.isMobile\n          && context.documentWidth < smallScreenSwitchWidth;\n      },\n    }, {\n      ui: modernUI(),\n      condition: (context: UIConditionContext) => {\n        return !context.isAd && !context.adRequiresUi;\n      },\n    }], config);\n  }\n\n  export function buildModernSmallScreenUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return new UIManager(player, [{\n      ui: modernSmallScreenAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: modernSmallScreenUI(),\n      condition: (context: UIConditionContext) => {\n        return !context.isAd && !context.adRequiresUi;\n      },\n    }], config);\n  }\n\n  export function buildModernCastReceiverUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return new UIManager(player, modernCastReceiverUI(), config);\n  }\n\n  export function buildModernTvUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n        return new UIManager(player, [{\n          ...modernTvUI(),\n        }], config);\n  }\n\n  export function modernTvUI() {\n    const subtitleListBox = new SubtitleListBox();\n    const subtitleListPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem(null, subtitleListBox),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    const audioTrackListBox = new AudioTrackListBox();\n    const audioTrackListPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem(null, audioTrackListBox),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    const seekBar = new SeekBar({ label: new SeekBarLabel() });\n    const playbackToggleOverlay = new PlaybackToggleOverlay();\n    const subtitleToggleButton = new SettingsToggleButton({\n      settingsPanel: subtitleListPanel,\n      autoHideWhenNoActiveSettings: true,\n      cssClass: 'ui-subtitlesettingstogglebutton',\n      text: i18n.getLocalizer('settings.subtitles'),\n    });\n    const audioToggleButton = new SettingsToggleButton({\n      settingsPanel: audioTrackListPanel,\n      autoHideWhenNoActiveSettings: true,\n      cssClass: 'ui-audiotracksettingstogglebutton',\n      ariaLabel: i18n.getLocalizer('settings.audio.track'),\n      text: i18n.getLocalizer('settings.audio.track'),\n    });\n    const uiContainer = new UIContainer({\n      components: [\n        new SubtitleOverlay(),\n        new BufferingOverlay(),\n        playbackToggleOverlay,\n        new ControlBar({\n          components: [\n            new Container({\n              components: [\n                new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\n                seekBar,\n                new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.RemainingTime, cssClasses: ['text-right'] }),\n              ],\n              cssClasses: ['controlbar-top'],\n            }),\n          ],\n        }),\n        new TitleBar({\n          components: [\n            new Container({\n              components: [\n                new MetadataLabel({ content: MetadataLabelContent.Title }),\n                subtitleToggleButton,\n                audioToggleButton,\n              ],\n              cssClasses: ['ui-titlebar-top'],\n            }),\n            new Container({\n              components: [\n                new MetadataLabel({ content: MetadataLabelContent.Description }),\n                subtitleListPanel,\n                audioTrackListPanel,\n              ],\n              cssClasses: ['ui-titlebar-bottom'],\n            }),\n          ],\n        }),\n        new RecommendationOverlay(),\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: ['ui-skin-tv'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n\n    const spatialNavigation = new SpatialNavigation(\n      new RootNavigationGroup(uiContainer, playbackToggleOverlay, seekBar, audioToggleButton, subtitleToggleButton),\n      new ListNavigationGroup(ListOrientation.Vertical, subtitleListPanel, subtitleListBox),\n      new ListNavigationGroup(ListOrientation.Vertical, audioTrackListPanel, audioTrackListBox),\n    );\n\n    return {\n      ui: uiContainer,\n      spatialNavigation: spatialNavigation,\n    };\n  }\n}\n","import {UIContainer} from './components/uicontainer';\nimport {DOM} from './dom';\nimport {Component, ComponentConfig} from './components/component';\nimport {Container} from './components/container';\nimport { SeekBar, SeekBarMarker } from './components/seekbar';\nimport {NoArgs, EventDispatcher, CancelEventArgs} from './eventdispatcher';\nimport {UIUtils} from './uiutils';\nimport {ArrayUtils} from './arrayutils';\nimport {BrowserUtils} from './browserutils';\nimport { TimelineMarker, UIConfig } from './uiconfig';\nimport { PlayerAPI, PlayerEventCallback, PlayerEventBase, PlayerEvent, AdEvent, LinearAd } from 'bitmovin-player';\nimport { VolumeController } from './volumecontroller';\nimport { i18n, CustomVocabulary, Vocabularies } from './localization/i18n';\nimport { FocusVisibilityTracker } from './focusvisibilitytracker';\nimport { isMobileV3PlayerAPI, MobileV3PlayerAPI, MobileV3PlayerEvent } from './mobilev3playerapi';\nimport { SpatialNavigation } from './spatialnavigation/spatialnavigation';\n\nexport interface LocalizationConfig {\n  /**\n   * Sets the desired language, and falls back to 'en' if there is no vocabulary for the desired language. Setting it\n   * to \"auto\" will enable language detection from the browser's locale.\n   */\n  language?: 'auto' | 'en' | 'de' | string;\n  /**\n   * A map of `language` to {@link CustomVocabulary} definitions. Can be used to overwrite default translations and add\n   * custom strings or additional languages.\n   */\n  vocabularies?: Vocabularies;\n}\n\nexport interface InternalUIConfig extends UIConfig {\n  events: {\n    /**\n     * Fires when the configuration has been updated/changed.\n     */\n    onUpdated: EventDispatcher<UIManager, void>;\n  };\n  volumeController: VolumeController;\n}\n\n/**\n * The context that will be passed to a {@link UIConditionResolver} to determine if it's conditions fulfil the context.\n */\nexport interface UIConditionContext {\n  /**\n   * Tells if the player is loading or playing an ad.\n   */\n  isAd: boolean;\n  /**\n   * Tells if the current ad requires an external UI, if {@link #isAd} is true.\n   */\n  adRequiresUi: boolean;\n  /**\n   * Tells if the player is currently in fullscreen mode.\n   */\n  isFullscreen: boolean;\n  /**\n   * Tells if the UI is running in a mobile browser.\n   */\n  isMobile: boolean;\n  /**\n   * Tells if the player is in playing or paused state.\n   */\n  isPlaying: boolean;\n  /**\n   * The width of the player/UI element.\n   */\n  width: number;\n  /**\n   * The width of the document where the player/UI is embedded in.\n   */\n  documentWidth: number;\n}\n\n/**\n * Resolves the conditions of its associated UI in a {@link UIVariant} upon a {@link UIConditionContext} and decides\n * if the UI should be displayed. If it returns true, the UI is a candidate for display; if it returns false, it will\n * not be displayed in the given context.\n */\nexport interface UIConditionResolver {\n  (context: UIConditionContext): boolean;\n}\n\n/**\n * Associates a UI instance with an optional {@link UIConditionResolver} that determines if the UI should be displayed.\n */\nexport interface UIVariant {\n  ui: UIContainer;\n  condition?: UIConditionResolver;\n  spatialNavigation?: SpatialNavigation;\n}\n\nexport interface ActiveUiChangedArgs extends NoArgs {\n  /**\n   * The previously active {@link UIInstanceManager} prior to the {@link UIManager} switching to a different UI variant.\n   */\n  previousUi: UIInstanceManager;\n  /**\n   * The currently active {@link UIInstanceManager}.\n   */\n  currentUi: UIInstanceManager;\n}\n\nexport class UIManager {\n\n  private player: PlayerAPI;\n  private uiContainerElement: DOM;\n  private uiVariants: UIVariant[];\n  private uiInstanceManagers: InternalUIInstanceManager[];\n  private currentUi: InternalUIInstanceManager;\n  private config: InternalUIConfig; // Conjunction of provided uiConfig and sourceConfig from the player\n  private managerPlayerWrapper: PlayerWrapper;\n  private focusVisibilityTracker: FocusVisibilityTracker;\n\n  private events = {\n    onUiVariantResolve: new EventDispatcher<UIManager, UIConditionContext>(),\n    onActiveUiChanged: new EventDispatcher<UIManager, ActiveUiChangedArgs>(),\n  };\n\n  /**\n   * Creates a UI manager with a single UI variant that will be permanently shown.\n   * @param player the associated player of this UI\n   * @param ui the UI to add to the player\n   * @param uiconfig optional UI configuration\n   */\n  constructor(player: PlayerAPI, ui: UIContainer, uiconfig?: UIConfig);\n  /**\n   * Creates a UI manager with a list of UI variants that will be dynamically selected and switched according to\n   * the context of the UI.\n   *\n   * Every time the UI context changes, the conditions of the UI variants will be sequentially resolved and the first\n   * UI, whose condition evaluates to true, will be selected and displayed. The last variant in the list might omit the\n   * condition resolver and will be selected as default/fallback UI when all other conditions fail. If there is no\n   * fallback UI and all conditions fail, no UI will be displayed.\n   *\n   * @param player the associated player of this UI\n   * @param uiVariants a list of UI variants that will be dynamically switched\n   * @param uiconfig optional UI configuration\n   */\n  constructor(player: PlayerAPI, uiVariants: UIVariant[], uiconfig?: UIConfig);\n  constructor(player: PlayerAPI, playerUiOrUiVariants: UIContainer | UIVariant[], uiconfig: UIConfig = {}) {\n    if (playerUiOrUiVariants instanceof UIContainer) {\n      // Single-UI constructor has been called, transform arguments to UIVariant[] signature\n      let playerUi = <UIContainer>playerUiOrUiVariants;\n      let uiVariants = [];\n\n      // Add the default player UI\n      uiVariants.push({ ui: playerUi });\n\n      this.uiVariants = uiVariants;\n    }\n    else {\n      // Default constructor (UIVariant[]) has been called\n      this.uiVariants = <UIVariant[]>playerUiOrUiVariants;\n    }\n\n    this.player = player;\n    this.managerPlayerWrapper = new PlayerWrapper(player);\n\n    // ensure that at least the metadata object does exist in the uiconfig\n    uiconfig.metadata = uiconfig.metadata ? uiconfig.metadata : {};\n\n    this.config = {\n      playbackSpeedSelectionEnabled: true, // Switch on speed selector by default\n      autoUiVariantResolve: true, // Switch on auto UI resolving by default\n      disableAutoHideWhenHovered: false, // Disable auto hide when UI is hovered\n      enableSeekPreview: true,\n      ...uiconfig,\n      events: {\n        onUpdated: new EventDispatcher<UIManager, void>(),\n      },\n      volumeController: new VolumeController(this.managerPlayerWrapper.getPlayer()),\n    };\n\n    /**\n     * Gathers configuration data from the UI config and player source config and creates a merged UI config\n     * that is used throughout the UI instance.\n     */\n    const updateConfig = () => {\n      const playerSourceConfig = player.getSource() || {};\n      this.config.metadata = JSON.parse(JSON.stringify(uiconfig.metadata || {}));\n\n      // Extract the UI-related config properties from the source config\n      const playerSourceUiConfig: UIConfig = {\n        metadata: {\n          // TODO move metadata into source.metadata namespace in player v8\n          title: playerSourceConfig.title,\n          description: playerSourceConfig.description,\n          markers: (playerSourceConfig as any).markers,\n        },\n        recommendations: (playerSourceConfig as any).recommendations,\n      };\n\n      // Player source config takes precedence over the UI config, because the config in the source is attached\n      // to a source which changes with every player.load, whereas the UI config stays the same for the whole\n      // lifetime of the player instance.\n      this.config.metadata.title = playerSourceUiConfig.metadata.title || uiconfig.metadata.title;\n      this.config.metadata.description = playerSourceUiConfig.metadata.description || uiconfig.metadata.description;\n      this.config.metadata.markers = playerSourceUiConfig.metadata.markers || uiconfig.metadata.markers || [];\n      this.config.recommendations = playerSourceUiConfig.recommendations || uiconfig.recommendations || [];\n    };\n\n    updateConfig();\n\n    // Update the source configuration when a new source is loaded and dispatch onUpdated\n    const updateSource = () => {\n      updateConfig();\n      this.config.events.onUpdated.dispatch(this);\n    };\n\n    const wrappedPlayer = this.managerPlayerWrapper.getPlayer();\n\n    wrappedPlayer.on(this.player.exports.PlayerEvent.SourceLoaded, updateSource);\n\n    // The PlaylistTransition event is only available on Mobile v3 for now.\n    // This event is fired when a new source becomes active in the player.\n    if (isMobileV3PlayerAPI(wrappedPlayer)) {\n      wrappedPlayer.on(MobileV3PlayerEvent.PlaylistTransition, updateSource);\n    }\n\n    if (uiconfig.container) {\n      // Unfortunately \"uiContainerElement = new DOM(config.container)\" will not accept the container with\n      // string|HTMLElement type directly, although it accepts both types, so we need to spit these two cases up here.\n      // TODO check in upcoming TS versions if the container can be passed in directly, or fix the constructor\n      this.uiContainerElement = uiconfig.container instanceof HTMLElement ?\n        new DOM(uiconfig.container) : new DOM(uiconfig.container);\n    } else {\n      this.uiContainerElement = new DOM(player.getContainer());\n    }\n\n    // Create UI instance managers for the UI variants\n    // The instance managers map to the corresponding UI variants by their array index\n    this.uiInstanceManagers = [];\n    let uiVariantsWithoutCondition = [];\n    for (let uiVariant of this.uiVariants) {\n      if (uiVariant.condition == null) {\n        // Collect variants without conditions for error checking\n        uiVariantsWithoutCondition.push(uiVariant);\n      }\n      // Create the instance manager for a UI variant\n      this.uiInstanceManagers.push(new InternalUIInstanceManager(\n        player,\n        uiVariant.ui,\n        this.config,\n        uiVariant.spatialNavigation,\n      ));\n    }\n    // Make sure that there is only one UI variant without a condition\n    // It does not make sense to have multiple variants without condition, because only the first one in the list\n    // (the one with the lowest index) will ever be selected.\n    if (uiVariantsWithoutCondition.length > 1) {\n      throw Error('Too many UIs without a condition: You cannot have more than one default UI');\n    }\n    // Make sure that the default UI variant, if defined, is at the end of the list (last index)\n    // If it comes earlier, the variants with conditions that come afterwards will never be selected because the\n    // default variant without a condition always evaluates to 'true'\n    if (uiVariantsWithoutCondition.length > 0\n      && uiVariantsWithoutCondition[0] !== this.uiVariants[this.uiVariants.length - 1]) {\n      throw Error('Invalid UI variant order: the default UI (without condition) must be at the end of the list');\n    }\n\n    let adStartedEvent: AdEvent = null; // keep the event stored here during ad playback\n\n    // Dynamically select a UI variant that matches the current UI condition.\n    let resolveUiVariant = (event: PlayerEventBase) => {\n      // Make sure that the AdStarted event data is persisted through ad playback in case other events happen\n      // in the meantime, e.g. player resize. We need to store this data because there is no other way to find out\n      // ad details while an ad is playing (in v8.0 at least; from v8.1 there will be ads.getActiveAd()).\n      // Existing event data signals that an ad is currently active (instead of ads.isLinearAdActive()).\n      if (event != null) {\n        switch (event.type) {\n          // The ads UI is shown upon the first AdStarted event. Subsequent AdStarted events within an ad break\n          // will not change the condition context and thus not lead to undesired UI variant resolving.\n          // The ads UI is shown upon AdStarted instead of AdBreakStarted because there can be a loading delay\n          // between these two events in the player, and the AdBreakStarted event does not carry any metadata to\n          // initialize the ads UI, so it would be rendered in an uninitialized state for a certain amount of time.\n          // TODO show ads UI upon AdBreakStarted and display loading overlay between AdBreakStarted and first AdStarted\n          // TODO display loading overlay between AdFinished and next AdStarted\n          case player.exports.PlayerEvent.AdStarted:\n            adStartedEvent = event as AdEvent;\n            break;\n          // The ads UI is hidden only when the ad break is finished, i.e. not on AdFinished events. This way we keep\n          // the ads UI variant active throughout an ad break, as reacting to AdFinished would lead to undesired UI\n          // variant switching between two ads in an ad break, e.g. ads UI -> AdFinished -> content UI ->\n          // AdStarted -> ads UI.\n          case player.exports.PlayerEvent.AdBreakFinished:\n            adStartedEvent = null;\n            // When switching to a variant for the first time, a config.events.onUpdated event is fired to trigger a UI\n            // update of the new variant, because most components subscribe to this event to update themselves. When\n            // switching to the ads UI on the first AdStarted, all UI variants update themselves with the ad data, so\n            // when switching back to the \"normal\" UI it will carry properties of the ad instead of the main content.\n            // We thus fire this event here to force an UI update with the properties of the main content. This is\n            // basically a hack because the config.events.onUpdated event is abused in many places and not just used\n            // for config updates (e.g. adding a marker to the seekbar).\n            // TODO introduce an event that is fired when the playback content is updated, a switch to/from ads\n            this.config.events.onUpdated.dispatch(this);\n            break;\n          // When a new source is loaded during ad playback, there will be no Ad(Break)Finished event\n          case player.exports.PlayerEvent.SourceLoaded:\n          case player.exports.PlayerEvent.SourceUnloaded:\n            adStartedEvent = null;\n            break;\n        }\n      }\n\n      // Detect if an ad has started\n      let isAd = adStartedEvent != null;\n      let adRequiresUi = false;\n      if (isAd) {\n        let ad = adStartedEvent.ad;\n        // for now only linear ads can request a UI\n        if (ad.isLinear) {\n          let linearAd = ad as LinearAd;\n          adRequiresUi = linearAd.uiConfig && linearAd.uiConfig.requestsUi || false;\n        }\n      }\n\n      if (adRequiresUi) {\n        // we dispatch onUpdated event because if there are multiple adBreaks for same position\n        // `Play` and `Playing` events will not be dispatched which will cause `PlaybackButton` state\n        // to be out of sync\n        this.config.events.onUpdated.dispatch(this);\n      }\n\n      this.resolveUiVariant({\n        isAd: isAd,\n        adRequiresUi: adRequiresUi,\n      }, (context) => {\n        // If this is an ad UI, we need to relay the saved ON_AD_STARTED event data so ad components can configure\n        // themselves for the current ad.\n        if (context.isAd) {\n          /* Relay the ON_AD_STARTED event to the ads UI\n           *\n           * Because the ads UI is initialized in the ON_AD_STARTED handler, i.e. when the ON_AD_STARTED event has\n           * already been fired, components in the ads UI that listen for the ON_AD_STARTED event never receive it.\n           * Since this can break functionality of components that rely on this event, we relay the event to the\n           * ads UI components with the following call.\n           */\n          this.currentUi.getWrappedPlayer().fireEventInUI(this.player.exports.PlayerEvent.AdStarted, adStartedEvent);\n        }\n      });\n    };\n\n    // Listen to the following events to trigger UI variant resolution\n    if (this.config.autoUiVariantResolve) {\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.SourceLoaded, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.SourceUnloaded, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.Play, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.Paused, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.AdStarted, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.AdBreakFinished, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.PlayerResized, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.ViewModeChanged, resolveUiVariant);\n    }\n\n    this.focusVisibilityTracker = new FocusVisibilityTracker('{{PREFIX}}');\n\n    // Initialize the UI\n    resolveUiVariant(null);\n  }\n\n  /**\n   * Exposes i18n.getLocalizer() function\n   * @returns {I18nApi.getLocalizer()}\n   */\n  static localize<V extends CustomVocabulary<Record<string, string>>>(key: keyof V) {\n    return i18n.getLocalizer(key);\n  }\n\n  /**\n   * Provide configuration to support Custom UI languages\n   * default language: 'en'\n   */\n  static setLocalizationConfig(localizationConfig: LocalizationConfig) {\n    i18n.setConfig(localizationConfig);\n  }\n\n  getConfig(): UIConfig {\n    return this.config;\n  }\n\n  /**\n   * Returns the list of UI variants as passed into the constructor of {@link UIManager}.\n   * @returns {UIVariant[]} the list of available UI variants\n   */\n  getUiVariants(): UIVariant[] {\n    return this.uiVariants;\n  }\n\n  /**\n   * Switches to a UI variant from the list returned by {@link getUiVariants}.\n   * @param {UIVariant} uiVariant the UI variant to switch to\n   * @param {() => void} onShow a callback that is executed just before the new UI variant is shown\n   */\n  switchToUiVariant(uiVariant: UIVariant, onShow?: () => void): void {\n    let uiVariantIndex = this.uiVariants.indexOf(uiVariant);\n\n    const previousUi = this.currentUi;\n    const nextUi: InternalUIInstanceManager = this.uiInstanceManagers[uiVariantIndex];\n    // Determine if the UI variant is changing\n    // Only if the UI variant is changing, we need to do some stuff. Else we just leave everything as-is.\n    if (nextUi === this.currentUi) {\n      return;\n      // console.log('switched from ', this.currentUi ? this.currentUi.getUI() : 'none',\n      //   ' to ', nextUi ? nextUi.getUI() : 'none');\n    }\n\n    // Hide the currently active UI variant\n    if (this.currentUi) {\n      this.currentUi.getUI().hide();\n    }\n\n    // Assign the new UI variant as current UI\n    this.currentUi = nextUi;\n\n    // When we switch to a different UI instance, there's some additional stuff to manage. If we do not switch\n    // to an instance, we're done here.\n    if (this.currentUi == null) {\n      return;\n    }\n    // Add the UI to the DOM (and configure it) the first time it is selected\n    if (!this.currentUi.isConfigured()) {\n      this.addUi(this.currentUi);\n      // ensure that the internal state is ready for the upcoming show call\n      if (!this.currentUi.getUI().isHidden()) {\n        this.currentUi.getUI().hide();\n      }\n    }\n    if (onShow) {\n      onShow();\n    }\n    this.currentUi.getUI().show();\n    this.events.onActiveUiChanged.dispatch(this, { previousUi, currentUi: nextUi });\n  }\n\n  /**\n   * Triggers a UI variant switch as triggered by events when automatic switching is enabled. It allows to overwrite\n   * properties of the {@link UIConditionContext}.\n   * @param {Partial<UIConditionContext>} context an optional set of properties that overwrite properties of the\n   *   automatically determined context\n   * @param {(context: UIConditionContext) => void} onShow a callback that is executed just before the new UI variant\n   *   is shown (if a switch is happening)\n   */\n  resolveUiVariant(context: Partial<UIConditionContext> = {}, onShow?: (context: UIConditionContext) => void): void {\n    // Determine the current context for which the UI variant will be resolved\n    const defaultContext: UIConditionContext = {\n      isAd: false,\n      adRequiresUi: false,\n      isFullscreen: this.player.getViewMode() === this.player.exports.ViewMode.Fullscreen,\n      isMobile: BrowserUtils.isMobile,\n      isPlaying: this.player.isPlaying(),\n      width: this.uiContainerElement.width(),\n      documentWidth: document.body.clientWidth,\n    };\n\n    // Overwrite properties of the default context with passed in context properties\n    const switchingContext = { ...defaultContext, ...context };\n\n    // Fire the event and allow modification of the context before it is used to resolve the UI variant\n    this.events.onUiVariantResolve.dispatch(this, switchingContext);\n\n    let nextUiVariant: UIVariant = null;\n\n    // Select new UI variant\n    // If no variant condition is fulfilled, we switch to *no* UI\n    for (let uiVariant of this.uiVariants) {\n      const matchesCondition = uiVariant.condition == null || uiVariant.condition(switchingContext) === true;\n      if (nextUiVariant == null && matchesCondition) {\n        nextUiVariant = uiVariant;\n      } else {\n        // hide all UIs besides the one which should be active\n        uiVariant.ui.hide();\n      }\n    }\n\n    this.switchToUiVariant(nextUiVariant, () => {\n      if (onShow) {\n        onShow(switchingContext);\n      }\n    });\n  }\n\n  private addUi(ui: InternalUIInstanceManager): void {\n    let dom = ui.getUI().getDomElement();\n    let player = ui.getWrappedPlayer();\n\n    ui.configureControls();\n    /* Append the UI DOM after configuration to avoid CSS transitions at initialization\n     * Example: Components are hidden during configuration and these hides may trigger CSS transitions that are\n     * undesirable at this time. */\n    this.uiContainerElement.append(dom);\n\n    // When the UI is loaded after a source was loaded, we need to tell the components to initialize themselves\n    if (player.getSource()) {\n      this.config.events.onUpdated.dispatch(this);\n    }\n\n    // Fire onConfigured after UI DOM elements are successfully added. When fired immediately, the DOM elements\n    // might not be fully configured and e.g. do not have a size.\n    // https://swizec.com/blog/how-to-properly-wait-for-dom-elements-to-show-up-in-modern-browsers/swizec/6663\n    if (window.requestAnimationFrame) {\n      requestAnimationFrame(() => { ui.onConfigured.dispatch(ui.getUI()); });\n    } else {\n      // IE9 fallback\n      setTimeout(() => { ui.onConfigured.dispatch(ui.getUI()); }, 0);\n    }\n  }\n\n  private releaseUi(ui: InternalUIInstanceManager): void {\n    ui.releaseControls();\n\n    const uiContainer = ui.getUI();\n    if (uiContainer.hasDomElement()) {\n      uiContainer.getDomElement().remove();\n    }\n\n    ui.clearEventHandlers();\n  }\n\n  release(): void {\n    for (let uiInstanceManager of this.uiInstanceManagers) {\n      this.releaseUi(uiInstanceManager);\n    }\n    this.managerPlayerWrapper.clearEventHandlers();\n    this.focusVisibilityTracker.release();\n  }\n\n  /**\n   * Fires just before UI variants are about to be resolved and the UI variant is possibly switched. It is fired when\n   * the switch is triggered from an automatic switch and when calling {@link resolveUiVariant}.\n   * Can be used to modify the {@link UIConditionContext} before resolving is done.\n   * @returns {EventDispatcher<UIManager, UIConditionContext>}\n   */\n  get onUiVariantResolve(): EventDispatcher<UIManager, UIConditionContext> {\n    return this.events.onUiVariantResolve;\n  }\n\n  /**\n   * Fires after the UIManager has switched to a different UI variant.\n   * @returns {EventDispatcher<UIManager, ActiveUiChangedArgs>}\n   */\n  get onActiveUiChanged(): EventDispatcher<UIManager, ActiveUiChangedArgs> {\n    return this.events.onActiveUiChanged;\n  }\n\n  /**\n   * The current active {@link UIInstanceManager}.\n   */\n  get activeUi(): UIInstanceManager {\n    return this.currentUi;\n  }\n\n  /**\n   * Returns the list of all added markers in undefined order.\n   */\n  getTimelineMarkers(): TimelineMarker[] {\n    return this.config.metadata.markers;\n  }\n\n  /**\n   * Adds a marker to the timeline. Does not check for duplicates/overlaps at the `time`.\n   */\n  addTimelineMarker(timelineMarker: TimelineMarker): void {\n    this.config.metadata.markers.push(timelineMarker);\n    this.config.events.onUpdated.dispatch(this);\n  }\n\n  /**\n   * Removes a marker from the timeline (by reference) and returns `true` if the marker has\n   * been part of the timeline and successfully removed, or `false` if the marker could not\n   * be found and thus not removed.\n   */\n  removeTimelineMarker(timelineMarker: TimelineMarker): boolean {\n    if (ArrayUtils.remove(this.config.metadata.markers, timelineMarker) === timelineMarker) {\n      this.config.events.onUpdated.dispatch(this);\n      return true;\n    }\n\n    return false;\n  }\n}\n\nexport interface SeekPreviewArgs extends NoArgs {\n  /**\n   * The timeline position in percent where the event originates from.\n   */\n  position: number;\n  /**\n   * The timeline marker associated with the current position, if existing.\n   */\n  marker?: SeekBarMarker;\n}\n\n/**\n * Encapsulates functionality to manage a UI instance. Used by the {@link UIManager} to manage multiple UI instances.\n */\nexport class UIInstanceManager {\n  private playerWrapper: PlayerWrapper;\n  private ui: UIContainer;\n  private config: InternalUIConfig;\n  protected spatialNavigation?: SpatialNavigation;\n\n  private events = {\n    onConfigured: new EventDispatcher<UIContainer, NoArgs>(),\n    onSeek: new EventDispatcher<SeekBar, NoArgs>(),\n    onSeekPreview: new EventDispatcher<SeekBar, SeekPreviewArgs>(),\n    onSeeked: new EventDispatcher<SeekBar, NoArgs>(),\n    onComponentShow: new EventDispatcher<Component<ComponentConfig>, NoArgs>(),\n    onComponentHide: new EventDispatcher<Component<ComponentConfig>, NoArgs>(),\n    onControlsShow: new EventDispatcher<UIContainer, NoArgs>(),\n    onPreviewControlsHide: new EventDispatcher<UIContainer, CancelEventArgs>(),\n    onControlsHide: new EventDispatcher<UIContainer, NoArgs>(),\n    onRelease: new EventDispatcher<UIContainer, NoArgs>(),\n  };\n\n  constructor(player: PlayerAPI, ui: UIContainer, config: InternalUIConfig, spatialNavigation?: SpatialNavigation) {\n    this.playerWrapper = new PlayerWrapper(player);\n    this.ui = ui;\n    this.config = config;\n    this.spatialNavigation = spatialNavigation;\n  }\n\n  getConfig(): InternalUIConfig {\n    return this.config;\n  }\n\n  getUI(): UIContainer {\n    return this.ui;\n  }\n\n  getPlayer(): PlayerAPI {\n    return this.playerWrapper.getPlayer();\n  }\n\n  /**\n   * Fires when the UI is fully configured and added to the DOM.\n   * @returns {EventDispatcher}\n   */\n  get onConfigured(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onConfigured;\n  }\n\n  /**\n   * Fires when a seek starts.\n   * @returns {EventDispatcher}\n   */\n  get onSeek(): EventDispatcher<SeekBar, NoArgs> {\n    return this.events.onSeek;\n  }\n\n  /**\n   * Fires when the seek timeline is scrubbed.\n   * @returns {EventDispatcher}\n   */\n  get onSeekPreview(): EventDispatcher<SeekBar, SeekPreviewArgs> {\n    return this.events.onSeekPreview;\n  }\n\n  /**\n   * Fires when a seek is finished.\n   * @returns {EventDispatcher}\n   */\n  get onSeeked(): EventDispatcher<SeekBar, NoArgs> {\n    return this.events.onSeeked;\n  }\n\n  /**\n   * Fires when a component is showing.\n   * @returns {EventDispatcher}\n   */\n  get onComponentShow(): EventDispatcher<Component<ComponentConfig>, NoArgs> {\n    return this.events.onComponentShow;\n  }\n\n  /**\n   * Fires when a component is hiding.\n   * @returns {EventDispatcher}\n   */\n  get onComponentHide(): EventDispatcher<Component<ComponentConfig>, NoArgs> {\n    return this.events.onComponentHide;\n  }\n\n  /**\n   * Fires when the UI controls are showing.\n   * @returns {EventDispatcher}\n   */\n  get onControlsShow(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onControlsShow;\n  }\n\n  /**\n   * Fires before the UI controls are hiding to check if they are allowed to hide.\n   * @returns {EventDispatcher}\n   */\n  get onPreviewControlsHide(): EventDispatcher<UIContainer, CancelEventArgs> {\n    return this.events.onPreviewControlsHide;\n  }\n\n  /**\n   * Fires when the UI controls are hiding.\n   * @returns {EventDispatcher}\n   */\n  get onControlsHide(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onControlsHide;\n  }\n\n  /**\n   * Fires when the UI controls are released.\n   * @returns {EventDispatcher}\n   */\n  get onRelease(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onRelease;\n  }\n\n  protected clearEventHandlers(): void {\n    this.playerWrapper.clearEventHandlers();\n\n    let events = <any>this.events; // avoid TS7017\n    for (let event in events) {\n      let dispatcher = <EventDispatcher<Object, Object>>events[event];\n      dispatcher.unsubscribeAll();\n    }\n  }\n}\n\n/**\n * Extends the {@link UIInstanceManager} for internal use in the {@link UIManager} and provides access to functionality\n * that components receiving a reference to the {@link UIInstanceManager} should not have access to.\n */\nclass InternalUIInstanceManager extends UIInstanceManager {\n\n  private configured: boolean;\n  private released: boolean;\n\n  getWrappedPlayer(): WrappedPlayer {\n    // TODO find a non-hacky way to provide the WrappedPlayer to the UIManager without exporting it\n    // getPlayer() actually returns the WrappedPlayer but its return type is set to Player so the WrappedPlayer does\n    // not need to be exported\n    return <WrappedPlayer>this.getPlayer();\n  }\n\n  configureControls(): void {\n    this.configureControlsTree(this.getUI());\n    this.configured = true;\n  }\n\n  isConfigured(): boolean {\n    return this.configured;\n  }\n\n  private configureControlsTree(component: Component<ComponentConfig>) {\n    let configuredComponents: Component<ComponentConfig>[] = [];\n\n    UIUtils.traverseTree(component, (component) => {\n      // First, check if we have already configured a component, and throw an error if we did. Multiple configuration\n      // of the same component leads to unexpected UI behavior. Also, a component that is in the UI tree multiple\n      // times hints at a wrong UI structure.\n      // We could just skip configuration in such a case and not throw an exception, but enforcing a clean UI tree\n      // seems like the better choice.\n      for (let configuredComponent of configuredComponents) {\n        if (configuredComponent === component) {\n          // Write the component to the console to simplify identification of the culprit\n          // (e.g. by inspecting the config)\n          if (console) {\n            console.error('Circular reference in UI tree', component);\n          }\n\n          // Additionally throw an error, because this case must not happen and leads to unexpected UI behavior.\n          throw Error('Circular reference in UI tree: ' + component.constructor.name);\n        }\n      }\n\n      component.initialize();\n      component.configure(this.getPlayer(), this);\n      configuredComponents.push(component);\n    });\n  }\n\n  releaseControls(): void {\n    // Do not call release methods if the components have never been configured; this can result in exceptions\n    if (this.configured) {\n      this.onRelease.dispatch(this.getUI());\n      this.releaseControlsTree(this.getUI());\n      this.configured = false;\n    }\n    this.spatialNavigation?.release();\n    this.released = true;\n  }\n\n  isReleased(): boolean {\n    return this.released;\n  }\n\n  private releaseControlsTree(component: Component<ComponentConfig>) {\n    component.release();\n\n    if (component instanceof Container) {\n      for (let childComponent of component.getComponents()) {\n        this.releaseControlsTree(childComponent);\n      }\n    }\n  }\n\n  clearEventHandlers(): void {\n    super.clearEventHandlers();\n  }\n}\n\n/**\n * Extended interface of the {@link Player} for use in the UI.\n */\nexport interface WrappedPlayer extends PlayerAPI {\n  /**\n   * Fires an event on the player that targets all handlers in the UI but never enters the real player.\n   * @param event the event to fire\n   * @param data data to send with the event\n   */\n  fireEventInUI(event: PlayerEvent, data: {}): void;\n}\n\n/**\n * Wraps the player to track event handlers and provide a simple method to remove all registered event\n * handlers from the player.\n */\nexport class PlayerWrapper {\n\n  private player: PlayerAPI;\n  private wrapper: WrappedPlayer;\n\n  private eventHandlers: { [eventType: string]: PlayerEventCallback[]; } = {};\n\n  constructor(player: PlayerAPI) {\n    this.player = player;\n\n    // Collect all members of the player (public API methods and properties of the player)\n    const objectProtoPropertyNames = Object.getOwnPropertyNames(Object.getPrototypeOf({}));\n    const namesToIgnore = ['constructor', ...objectProtoPropertyNames];\n    const members = getAllPropertyNames(player).filter(name => namesToIgnore.indexOf(name) === -1);\n    // Split the members into methods and properties\n    let methods = <any[]>[];\n    let properties = <any[]>[];\n\n    for (let member of members) {\n      if (typeof (<any>player)[member] === 'function') {\n        methods.push(member);\n      } else {\n        properties.push(member);\n      }\n    }\n\n    // Create wrapper object\n    let wrapper = <any>{};\n\n    // Add function wrappers for all API methods that do nothing but calling the base method on the player\n    for (let method of methods) {\n      wrapper[method] = function() {\n        // console.log('called ' + member); // track method calls on the player\n        return (<any>player)[method].apply(player, arguments);\n      };\n    }\n\n    // Add all public properties of the player to the wrapper\n    for (let property of properties) {\n      // Get an eventually existing property descriptor to differentiate between plain properties and properties with\n      // getters/setters.\n      const propertyDescriptor = ((target: PlayerAPI) => {\n        while (target) {\n          const propertyDescriptor = Object.getOwnPropertyDescriptor(target, property);\n          if (propertyDescriptor) {\n            return propertyDescriptor;\n          }\n          // Check if the PropertyDescriptor exists on a child prototype in case we have an inheritance of the player\n          target = Object.getPrototypeOf(target);\n        }\n      })(player);\n\n      // If the property has getters/setters, wrap them accordingly...\n      if (propertyDescriptor && (propertyDescriptor.get || propertyDescriptor.set)) {\n        Object.defineProperty(wrapper, property, {\n          get: () => propertyDescriptor.get.call(player),\n          set: (value: any) => propertyDescriptor.set.call(player, value),\n        });\n      }\n      // ... else just transfer the property to the wrapper\n      else {\n        wrapper[property] = (<any>player)[property];\n      }\n    }\n\n    // Explicitly add a wrapper method for 'on' that adds added event handlers to the event list\n    wrapper.on = (eventType: PlayerEvent, callback: PlayerEventCallback) => {\n      player.on(eventType, callback);\n\n      if (!this.eventHandlers[eventType]) {\n        this.eventHandlers[eventType] = [];\n      }\n\n      this.eventHandlers[eventType].push(callback);\n\n      return wrapper;\n    };\n\n    // Explicitly add a wrapper method for 'off' that removes removed event handlers from the event list\n    wrapper.off = (eventType: PlayerEvent, callback: PlayerEventCallback) => {\n      player.off(eventType, callback);\n\n      if (this.eventHandlers[eventType]) {\n        ArrayUtils.remove(this.eventHandlers[eventType], callback);\n      }\n\n      return wrapper;\n    };\n\n    wrapper.fireEventInUI = (event: PlayerEvent, data: {}) => {\n      if (this.eventHandlers[event]) { // check if there are handlers for this event registered\n        // Extend the data object with default values to convert it to a {@link PlayerEventBase} object.\n        let playerEventData = <PlayerEventBase>Object.assign({}, {\n          timestamp: Date.now(),\n          type: event,\n          // Add a marker property so the UI can detect UI-internal player events\n          uiSourced: true,\n        }, data);\n\n        // Execute the registered callbacks\n        for (let callback of this.eventHandlers[event]) {\n          callback(playerEventData);\n        }\n      }\n    };\n\n    this.wrapper = <WrappedPlayer>wrapper;\n  }\n\n  /**\n   * Returns a wrapped player object that can be used on place of the normal player object.\n   * @returns {WrappedPlayer} a wrapped player\n   */\n  getPlayer(): WrappedPlayer {\n    return this.wrapper;\n  }\n\n  /**\n   * Clears all registered event handlers from the player that were added through the wrapped player.\n   */\n  clearEventHandlers(): void {\n    try {\n      // Call the player API to check if the instance is still valid or already destroyed.\n      // This can be any call throwing the PlayerAPINotAvailableError when the player instance is destroyed.\n      this.player.getSource();\n    } catch (error) {\n      if (error instanceof this.player.exports.PlayerAPINotAvailableError) {\n        // We have detected that the player instance is already destroyed, so we clear the event handlers to avoid\n        // event handler unsubscription attempts (which would result in PlayerAPINotAvailableError errors).\n        this.eventHandlers = {};\n      }\n    }\n\n    for (let eventType in this.eventHandlers) {\n      for (let callback of this.eventHandlers[eventType]) {\n        this.player.off(eventType as PlayerEvent, callback);\n      }\n    }\n  }\n}\n\nfunction getAllPropertyNames(target: Object): string[] {\n  let names: string[] = [];\n\n  while (target) {\n    const newNames = Object.getOwnPropertyNames(target).filter(name => names.indexOf(name) === -1);\n    names = names.concat(newNames);\n    // go up prototype chain\n    target = Object.getPrototypeOf(target);\n  }\n\n  return names;\n}\n","import {Component, ComponentConfig} from './components/component';\nimport {Container} from './components/container';\n\nexport namespace UIUtils {\n  export interface TreeTraversalCallback {\n    (component: Component<ComponentConfig>, parent?: Component<ComponentConfig>): void;\n  }\n\n  export function traverseTree(component: Component<ComponentConfig>, visit: TreeTraversalCallback): void {\n    let recursiveTreeWalker = (component: Component<ComponentConfig>, parent?: Component<ComponentConfig>) => {\n      visit(component, parent);\n\n      // If the current component is a container, visit it's children\n      if (component instanceof Container) {\n        for (let childComponent of component.getComponents()) {\n          recursiveTreeWalker(childComponent, component);\n        }\n      }\n    };\n\n    // Walk and configure the component tree\n    recursiveTreeWalker(component);\n  }\n\n  // From: https://github.com/nfriend/ts-keycode-enum/blob/master/Key.enum.ts\n  export enum KeyCode {\n    LeftArrow = 37,\n    UpArrow = 38,\n    RightArrow = 39,\n    DownArrow = 40,\n    Space = 32,\n    End = 35,\n    Home = 36,\n  }\n}\n","import { Event, EventDispatcher } from './eventdispatcher';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport interface VolumeSettingChangedArgs {\n  volume: number;\n  muted: boolean;\n}\n\n/**\n * Can be used to centrally manage and control the volume and mute state of the player from multiple components.\n */\nexport class VolumeController {\n\n  private static readonly issuerName = 'ui-volumecontroller';\n\n  private readonly events = {\n    onChanged: new EventDispatcher<VolumeController, VolumeSettingChangedArgs>(),\n  };\n\n  private storedVolume: number;\n\n  constructor(private readonly player: PlayerAPI) {\n    this.storeVolume();\n\n    const handler = () => {\n      this.onChangedEvent();\n    };\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, handler);\n    player.on(player.exports.PlayerEvent.VolumeChanged, handler);\n    player.on(player.exports.PlayerEvent.Muted, handler);\n    player.on(player.exports.PlayerEvent.Unmuted, handler);\n  }\n\n  setVolume(volume: number): void {\n    this.player.setVolume(volume, VolumeController.issuerName);\n  }\n\n  getVolume(): number {\n    return this.player.getVolume();\n  }\n\n  setMuted(muted: boolean): void {\n    if (muted) {\n      this.player.mute(VolumeController.issuerName);\n    } else {\n      this.player.unmute(VolumeController.issuerName);\n    }\n  }\n\n  toggleMuted(): void {\n    if (this.isMuted() || this.getVolume() === 0) {\n      // Unmuting from the mute or zero-volume state recalls the previously saved volume setting. Setting the\n      // volume automatically unmutes the player in v7.\n      this.recallVolume();\n    } else {\n      this.setMuted(true);\n    }\n  }\n\n  isMuted(): boolean {\n    return this.player.isMuted();\n  }\n\n  /**\n   * Stores (saves) the current volume so it can later be restored with {@link recallVolume}.\n   */\n  storeVolume(): void {\n    this.storedVolume = this.getVolume();\n  }\n\n  /**\n   * Recalls (sets) the volume previously stored with {@link storeVolume}.\n   */\n  recallVolume(): void {\n    this.setMuted(this.storedVolume === 0);\n    this.setVolume(this.storedVolume);\n  }\n\n  startTransition(): VolumeTransition {\n    return new VolumeTransition(this);\n  }\n\n  onChangedEvent() {\n    const playerMuted = this.isMuted();\n    const playerVolume = this.getVolume();\n\n    const uiMuted = playerMuted || playerVolume === 0;\n    const uiVolume = playerMuted ? 0 : playerVolume;\n\n    this.storeVolume();\n\n    this.events.onChanged.dispatch(this, { volume: uiVolume, muted: uiMuted });\n  }\n\n  /**\n   * Gets the event that is fired when the volume settings have changed.\n   */\n  get onChanged(): Event<VolumeController, VolumeSettingChangedArgs> {\n    return this.events.onChanged.getEvent();\n  }\n}\n\nexport class VolumeTransition {\n\n  constructor(private controller: VolumeController) {\n    // Store the volume at the beginning of a volume change so we can recall it later in case we set the volume to\n    // zero and actually mute the player.\n    controller.storeVolume();\n  }\n\n  update(volume: number): void {\n    // Update the volume while transitioning so the user has a \"live preview\" of the desired target volume\n    this.controller.setMuted(false);\n    this.controller.setVolume(volume);\n  }\n\n  finish(volume: number): void {\n    if (volume === 0) {\n      // When the volume is zero we essentially mute the volume so we recall the volume from the beginning of the\n      // transition and mute the player instead. Recalling is necessary to return to the actual audio volume\n      // when unmuting.\n      // We must first recall the volume and then mute, because recalling sets the volume on the player\n      // and setting a player volume > 0 unmutes the player in v7.\n      this.controller.recallVolume();\n      this.controller.setMuted(true);\n    } else {\n      this.controller.setMuted(false);\n      this.controller.setVolume(volume);\n      this.controller.storeVolume();\n    }\n  }\n}","import { SubtitleRegionContainer, SubtitleLabel } from './components/subtitleoverlay';\nimport { VTTProperties, VTTRegionProperties } from 'bitmovin-player/types/subtitles/vtt/API';\nimport { DOM, Size } from './dom';\n\n// Our default height of a line\nconst lineHeight = 28;\n\n// Default relative line height\nconst lineHeightPercent = 5;\nlet lineCount: number = 1;\n\nconst defaultLineNumber = 21; // Our default amount of lines\n\nenum Direction {\n  Top = 'top',\n  Bottom = 'bottom',\n  Left = 'left',\n  Right = 'right',\n}\n\nenum VttVerticalWriting {\n  GrowingRight = 'lr',\n  GrowingLeft = 'rl',\n}\n\ntype VerticalWritingDirection = Direction.Left | Direction.Right;\n\nconst DirectionPair = new Map<Direction, Direction>([\n  [Direction.Top, Direction.Bottom],\n  [Direction.Bottom, Direction.Top],\n  [Direction.Left, Direction.Right],\n  [Direction.Right, Direction.Left],\n]);\n\n/**\n * Sets the default standardized styles for the Cue Box\n * https://w3.org/TR/webvtt1/#applying-css-properties\n */\nconst setDefaultVttStyles = (cueContainerDom: DOM, vtt: VTTProperties) => {\n  if (vtt.region) {\n    cueContainerDom.css('position', 'relative');\n    cueContainerDom.css('unicode-bidi', 'plaintext');\n  } else {\n    cueContainerDom.css('position', 'absolute');\n    cueContainerDom.css('overflow-wrap', 'break-word');\n    cueContainerDom.css('overflow', 'hidden');\n    cueContainerDom.css('flex-flow', 'column');\n  }\n  cueContainerDom.css('display', 'inline-flex');\n};\n\n/**\n * Align the Cue Box's line\n * https://w3.org/TR/webvtt1/#webvtt-cue-line-alignment\n */\nconst setVttLineAlign = (\n  cueContainerDom: DOM,\n  { lineAlign }: VTTProperties,\n  direction: Direction,\n  relativeCueBoxPosition: number) => {\n  switch (lineAlign) {\n    case 'center':\n      setCssForCenterLineAlign(\n        cueContainerDom, direction, relativeCueBoxPosition);\n      break;\n    case 'end':\n      setCssForEndLineAlign(\n        cueContainerDom, direction, relativeCueBoxPosition);\n  }\n};\n\n/**\n * Defines the line positioning of the Cue Box\n * https://w3.org/TR/webvtt1/#webvtt-cue-line\n */\nconst setVttLine = (\n  cueContainerDom: DOM,\n  vtt: VTTProperties,\n  direction: Direction,\n  subtitleOverLaySize: Size,\n) => {\n  const overlayReferenceEdge = DirectionPair.get(direction);\n  if (vtt.line === 'auto' && vtt.vertical) {\n    cueContainerDom.css(overlayReferenceEdge, '0');\n    return;\n  }\n  if (vtt.line === 'auto' && !vtt.vertical) {\n    return;\n  }\n\n  let relativeLinePosition = parseFloat(vtt.line as string);\n\n  if (vtt.snapToLines) {\n    let targetLine = Number(vtt.line);\n    if (targetLine < 0) {\n      targetLine = defaultLineNumber + targetLine;\n    }\n\n    const lineHeight = subtitleOverLaySize.height / defaultLineNumber;\n    const absoluteLinePosition = lineHeight * targetLine;\n    relativeLinePosition = (100 * absoluteLinePosition) / subtitleOverLaySize.height;\n  }\n\n  if (vtt.lineAlign !== 'end')\n    cueContainerDom.css(\n      overlayReferenceEdge, `${relativeLinePosition}%`);\n  setVttLineAlign(cueContainerDom, vtt, direction, relativeLinePosition);\n};\n\n/**\n * Defines the writing direction of the Cue Box\n * https://w3.org/TR/webvtt1/#webvtt-cue-writing-direction\n */\nconst setVttWritingDirectionAndCueBoxPositioning = (\n  cueContainerDom: DOM, vtt: VTTProperties,\n  subtitleOverlaySize: Size,\n) => {\n  switch (vtt.vertical) {\n  case '':\n    cueContainerDom.css('writing-mode', 'horizontal-tb');\n    cueContainerDom.css(Direction.Bottom, '0');\n    setVttLine(cueContainerDom, vtt, Direction.Bottom, subtitleOverlaySize);\n    break;\n  case VttVerticalWriting.GrowingRight:\n    setCueBoxPositionForVerticalWriting(\n      cueContainerDom, Direction.Right, vtt, subtitleOverlaySize);\n    break;\n  case VttVerticalWriting.GrowingLeft:\n    setCueBoxPositionForVerticalWriting(\n      cueContainerDom, Direction.Left, vtt, subtitleOverlaySize);\n    break;\n  }\n};\n\nconst setCueBoxPositionForVerticalWriting = (\n  cueContainerDom: DOM,\n  direction: VerticalWritingDirection,\n  vtt: VTTProperties,\n  subtitleOverlaySize: Size,\n) => {\n    const writingMode = direction === Direction.Right ?\n      'vertical-lr' : 'vertical-rl';\n\n    cueContainerDom.css('writing-mode', writingMode);\n    cueContainerDom.css(Direction.Top, '0');\n    setVttLine(cueContainerDom, vtt, direction, subtitleOverlaySize);\n};\n\n/**\n * Defines the Cue position alignment\n * https://w3.org/TR/webvtt1/#webvtt-cue-position-alignment\n */\nconst setVttPositionAlign = (cueContainerDom: DOM, vtt: VTTProperties, direction: Direction) => {\n  // https://www.w3.org/TR/webvtt1/#webvtt-cue-position\n  if (vtt.position === 'auto') {\n    cueContainerDom.css(direction, '0');\n  } else {\n    switch (vtt.positionAlign) {\n      case 'line-left':\n        cueContainerDom.css(direction, `${vtt.position}%`);\n        cueContainerDom.css(DirectionPair.get(direction), 'auto');\n        cueContainerDom.css('justify-content', 'flex-start');\n        break;\n      case 'center':\n        cueContainerDom.css(direction, `${vtt.position - vtt.size / 2}%`);\n        cueContainerDom.css(DirectionPair.get(direction), 'auto');\n        cueContainerDom.css('justify-content', 'center');\n        break;\n      case 'line-right':\n        cueContainerDom.css(direction, 'auto');\n        cueContainerDom.css(DirectionPair.get(direction), `${100 - vtt.position}%`);\n        cueContainerDom.css('justify-content', 'flex-end');\n        break;\n      default:\n        cueContainerDom.css(direction, `${vtt.position}%`);\n        cueContainerDom.css('justify-content', 'flex-start');\n    }\n  }\n};\n\nconst countLines = (innerHtml: string) =>\n  innerHtml.split('<br />').length;\n\nconst setCssForCenterLineAlign = (\n  cueContainerDom: DOM,\n  direction: Direction,\n  relativeCueBoxPosition: number) => {\n  switch (direction) {\n    case Direction.Bottom:\n      cueContainerDom.css('transform', 'translateY(-50%)');\n      break;\n    case Direction.Left:\n      cueContainerDom.css('transform', 'translateX(50%)');\n      break;\n    case Direction.Right:\n      cueContainerDom.css('transform', 'translateX(-50%)');\n      break;\n  }\n};\n\nconst setCssForEndLineAlign = (\n  cueContainerDom: DOM,\n  direction: Direction,\n  offset: number) => {\n      const opositeToOverlayReferenceEdge = direction;\n      cueContainerDom.css(opositeToOverlayReferenceEdge, `${100 - offset}%`);\n};\n\nexport namespace VttUtils {\n  export const setVttCueBoxStyles = (\n    cueContainer: SubtitleLabel,\n    subtitleOverlaySize: Size,\n  ) => {\n    const vtt = cueContainer.vtt;\n    const cueContainerDom = cueContainer.getDomElement();\n\n\n    setDefaultVttStyles(cueContainerDom, vtt);\n\n    lineCount = countLines(cueContainer.getText());\n    setVttWritingDirectionAndCueBoxPositioning(cueContainerDom, vtt, subtitleOverlaySize);\n\n    // https://w3.org/TR/webvtt1/#webvtt-cue-text-alignment\n    const textAlign = vtt.align === 'middle' ? 'center' : vtt.align;\n    cueContainerDom.css('text-align', textAlign);\n\n    // https://w3.org/TR/webvtt1/#webvtt-cue-size\n    const containerSize = vtt.size;\n    if (vtt.vertical === '') {\n      cueContainerDom.css('width', `${containerSize}%`);\n      setVttPositionAlign(cueContainerDom, vtt, Direction.Left);\n    } else {\n      cueContainerDom.css('height', `${containerSize}%`);\n      setVttPositionAlign(cueContainerDom, vtt, Direction.Top);\n    }\n  };\n\n  /** https://www.w3.org/TR/webvtt1/#regions\n   *  https://www.speechpad.com/captions/webvtt#toc_16\n   */\n  export const setVttRegionStyles = (\n    regionContainer: SubtitleRegionContainer,\n    region: VTTRegionProperties,\n    overlaySize: Size,\n  ) => {\n    const regionContainerDom = regionContainer.getDomElement();\n    const regionPositionX = overlaySize.width * region.viewportAnchorX / 100 - ((overlaySize.width * region.width / 100) * region.regionAnchorX / 100);\n    const regionPositionY = overlaySize.height * region.viewportAnchorY / 100 - ((region.lines * lineHeight) * region.regionAnchorY / 100);\n    regionContainerDom.css('position', 'absolute');\n    regionContainerDom.css('overflow', 'hidden');\n    regionContainerDom.css('width', `${region.width}%`);\n    regionContainerDom.css(Direction.Left, `${regionPositionX}px`);\n    regionContainerDom.css(Direction.Right, 'unset');\n    regionContainerDom.css(Direction.Top, `${regionPositionY}px`);\n    regionContainerDom.css(Direction.Bottom, 'unset');\n    regionContainerDom.css('height', `${region.lines * lineHeight}px`);\n  };\n}\n"]}