{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/custom/ts/components/gobackbutton.ts","src/custom/ts/components/playbackjumpbutton.ts","src/custom/ts/components/playbackjumpoverlay.ts","src/custom/ts/components/radiomode/radiomodecontroller.ts","src/custom/ts/components/radiomode/radiomodetogglebutton.ts","src/ts/arrayutils.ts","src/ts/audiotrackutils.ts","src/ts/browserutils.ts","src/ts/components/adclickoverlay.ts","src/ts/components/admessagelabel.ts","src/ts/components/adskipbutton.ts","src/ts/components/airplaytogglebutton.ts","src/ts/components/audioqualityselectbox.ts","src/ts/components/audiotracklistbox.ts","src/ts/components/audiotrackselectbox.ts","src/ts/components/bufferingoverlay.ts","src/ts/components/button.ts","src/ts/components/caststatusoverlay.ts","src/ts/components/casttogglebutton.ts","src/ts/components/castuicontainer.ts","src/ts/components/clickoverlay.ts","src/ts/components/closebutton.ts","src/ts/components/component.ts","src/ts/components/container.ts","src/ts/components/controlbar.ts","src/ts/components/errormessageoverlay.ts","src/ts/components/fullscreentogglebutton.ts","src/ts/components/hugeplaybacktogglebutton.ts","src/ts/components/hugereplaybutton.ts","src/ts/components/itemselectionlist.ts","src/ts/components/label.ts","src/ts/components/listbox.ts","src/ts/components/listselector.ts","src/ts/components/metadatalabel.ts","src/ts/components/pictureinpicturetogglebutton.ts","src/ts/components/playbackspeedselectbox.ts","src/ts/components/playbacktimelabel.ts","src/ts/components/playbacktogglebutton.ts","src/ts/components/playbacktoggleoverlay.ts","src/ts/components/recommendationoverlay.ts","src/ts/components/replaybutton.ts","src/ts/components/seekbar.ts","src/ts/components/seekbarbufferlevel.ts","src/ts/components/seekbarcontroller.ts","src/ts/components/seekbarlabel.ts","src/ts/components/selectbox.ts","src/ts/components/settingspanel.ts","src/ts/components/settingspanelitem.ts","src/ts/components/settingspanelpage.ts","src/ts/components/settingspanelpagebackbutton.ts","src/ts/components/settingspanelpagenavigatorbutton.ts","src/ts/components/settingspanelpageopenbutton.ts","src/ts/components/settingstogglebutton.ts","src/ts/components/spacer.ts","src/ts/components/subtitlelistbox.ts","src/ts/components/subtitleoverlay.ts","src/ts/components/subtitleselectbox.ts","src/ts/components/subtitlesettings/backgroundcolorselectbox.ts","src/ts/components/subtitlesettings/backgroundopacityselectbox.ts","src/ts/components/subtitlesettings/characteredgeselectbox.ts","src/ts/components/subtitlesettings/fontcolorselectbox.ts","src/ts/components/subtitlesettings/fontfamilyselectbox.ts","src/ts/components/subtitlesettings/fontopacityselectbox.ts","src/ts/components/subtitlesettings/fontsizeselectbox.ts","src/ts/components/subtitlesettings/subtitlesettingselectbox.ts","src/ts/components/subtitlesettings/subtitlesettingslabel.ts","src/ts/components/subtitlesettings/subtitlesettingsmanager.ts","src/ts/components/subtitlesettings/subtitlesettingspanelpage.ts","src/ts/components/subtitlesettings/subtitlesettingsresetbutton.ts","src/ts/components/subtitlesettings/windowcolorselectbox.ts","src/ts/components/subtitlesettings/windowopacityselectbox.ts","src/ts/components/timelinemarkershandler.ts","src/ts/components/titlebar.ts","src/ts/components/togglebutton.ts","src/ts/components/tvnoisecanvas.ts","src/ts/components/uicontainer.ts","src/ts/components/videoqualityselectbox.ts","src/ts/components/volumecontrolbutton.ts","src/ts/components/volumeslider.ts","src/ts/components/volumetogglebutton.ts","src/ts/components/vrtogglebutton.ts","src/ts/components/watermark.ts","src/ts/demofactory.ts","src/ts/dom.ts","src/ts/errorutils.ts","src/ts/eventdispatcher.ts","src/ts/focusvisibilitytracker.ts","src/ts/groupplaybackapi.ts","src/ts/guid.ts","src/ts/imageloader.ts","src/ts/localization/i18n.ts","src/ts/localization/languages/de.json","src/ts/localization/languages/en.json","src/ts/localization/languages/es.json","src/ts/main.ts","src/ts/mobilev3playerapi.ts","src/ts/playerutils.ts","src/ts/spatialnavigation/ListNavigationGroup.ts","src/ts/spatialnavigation/gethtmlelementsfromcomponents.ts","src/ts/spatialnavigation/keymap.ts","src/ts/spatialnavigation/navigationalgorithm.ts","src/ts/spatialnavigation/navigationgroup.ts","src/ts/spatialnavigation/nodeeventsubscriber.ts","src/ts/spatialnavigation/rootnavigationgroup.ts","src/ts/spatialnavigation/seekbarhandler.ts","src/ts/spatialnavigation/spatialnavigation.ts","src/ts/spatialnavigation/typeguards.ts","src/ts/spatialnavigation/types.ts","src/ts/storageutils.ts","src/ts/stringutils.ts","src/ts/subtitleutils.ts","src/ts/timeout.ts","src/ts/uifactory.ts","src/ts/uimanager.ts","src/ts/uiutils.ts","src/ts/volumecontroller.ts","src/ts/vttutils.ts"],"names":["f","g","exports","module","define","amd","window","global","self","this","bitmovin","playerui","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_super","button_1","GoBackButton","Button","__extends","prototype","configure","player","uimanager","_this","onClick","subscribe","console","log","customMessageHandler","sendAsynchronous","on","PlayerEvent","ViewModeChanged","getViewMode","hide","show","config","mergeConfig","cssClass","text","ariaLabel","i18n_1","PlaybackJumpButtons","currentTime","getCurrentTime","duration","getDuration","isLive","newTime","skipTime","Math","max","min","seek","PlaybackForwardButton","__assign","i18n","getLocalizer","PlaybackRewindButton","container_1","playbackjumpbutton_1","PlaybackJumpControlsOverlay","Container","forwardButton","rewindButton","components","eventdispatcher_1","RadioModeController","events","onChanged","EventDispatcher","activated","setRadioMode","onChangedEvent","toggleRadioMode","isRadioModeActivated","dispatch","Object","defineProperty","getEvent","radiomodecontroller_1","togglebutton_1","RadioModeToggleButton","ToggleButton","radioModeController","_","args","concat","off","JSON","stringify","result","sendSynchronous","data","ArrayUtils","remove","array","item","index","indexOf","splice","AudioTrackSwitchHandler","element","addAudioTrack","event","audioTrack","track","listElement","hasItem","id","addItem","label","removeAudioTrack","removeItem","selectCurrentAudioTrack","currentAudioTrack","getAudio","selectItem","refreshAudioTracks","audioTracks","getAvailableAudio","synchronizeItems","map","key","bindSelectionEvent","bindPlayerEvents","onItemSelected","value","setAudio","AudioChanged","SourceUnloaded","PeriodSwitched","AudioAdded","AudioRemoved","getConfig","onUpdated","BrowserUtils","windowExists","navigator","userAgent","test","isHisense","platform","includes","maxTouchPoints","msMaxTouchPoints","clickoverlay_1","AdClickOverlay","ClickOverlay","adFinishedHandler","setUrl","clickThroughCallback","AdStarted","ad","clickThroughUrl","clickThroughUrlOpened","AdFinished","AdSkipped","AdError","pause","label_1","stringutils_1","AdMessageLabel","Label","adEndHandler","TimeChanged","updateMessageHandler","setText","StringUtils","replaceAdMessagePlaceholders","performLocalization","uiConfig","message","AdSkipButton","updateSkipMessageHandler","untilSkippableMessage","skippableMessage","skipOffset","disable","enable","skippableAfter","ads","skip","AirPlayToggleButton","airPlayAvailableHandler","isAirplayAvailable","showAirplayTargetPicker","airPlayChangedHandler","isAirplayActive","AirplayAvailable","AirplayChanged","selectbox_1","AudioQualitySelectBox","SelectBox","updateAudioQualities","audioQualities","getAvailableAudioQualities","clearItems","_i","audioQualities_1","audioQuality","selectCurrentAudioQuality","getAudioQuality","sender","setAudioQuality","AudioQualityChanged","AudioQualityAdded","AudioQualityRemoved","cssClasses","listbox_1","audiotrackutils_1","AudioTrackListBox","ListBox","AudioTrackSelectBox","component_1","timeout_1","BufferingOverlay","showOverlay","overlayShowTimeout","start","hideOverlay","clear","Timeout","showDelayMs","StallStarted","StallEnded","Play","Playing","Paused","Seek","Seeked","TimeShift","TimeShifted","isStalled","indicators","Component","tag","role","hidden","dom_1","toDomElement","buttonElementAttributes","aria-label","class","getCssClasses","type","aria-pressed","tabindex","tabIndex","toString","buttonElement","DOM","append","prefixCss","html","onClickEvent","getDomElement","find","buttonEvents","CastStatusOverlay","CastWaitingForDevice","castDeviceName","castPayload","deviceName","statusLabel","CastStarted","CastStopped","CastToggleButton","castAvailableHander","isCastAvailable","isCasting","castStop","castVideo","CastAvailable","uicontainer_1","CastUIContainer","UIContainer","isUiShown","showUi","castUiHideTimeout","hideDelay","onControlsHide","onControlsShow","showUiPermanently","showUiWithTimeout","isPlaying","release","initialize","url","open","getUrl","undefined","CloseButton","target","guid_1","disabled","isHidden","isDisabled","onShow","onComponentShow","onHide","onComponentHide","onHoverChangedEvent","hasDomElement","Boolean","setAriaLabel","setAriaAttr","name","attr","defaults","base","assign","css","join","trim","cssClassOrId","cssPrefix","addClass","CLASS_HIDDEN","onHideEvent","removeClass","onShowEvent","isShown","toggleHidden","CLASS_DISABLED","onDisabledEvent","onEnabledEvent","isEnabled","isHovered","hovered","componentEvents","onEnabled","onDisabled","onHoverChanged","Guid","next","arrayutils_1","addComponent","component","push","componentsToAdd","removeComponent","componentsToRemove","getComponents","removeComponents","_a","slice","updateComponents","shift","innerContainerElement","containerElement","innerContainer","initialComponent","uiutils_1","spacer_1","browserutils_1","settingspanel_1","ControlBar","hoverStackCount","isSettingsPanelShown","disableAutoHideWhenHovered","isMobile","UIUtils","traverseTree","Spacer","SettingsPanel","onPreviewControlsHide","cancel","tvnoisecanvas_1","errorutils_1","mobilev3playerapi_1","ErrorMessageOverlay","errorEventHandler","handleErrorMessage","customizedMessage","errorMessages","customMessage","messages","display","isMobileV3PlayerAPI","MobileV3PlayerEvent","PlayerError","ErrorUtils","defaultMobileV3ErrorMessageTranslator","SourceError","defaultWebErrorMessageTranslator","SourceLoaded","tvNoiseBackground","stop","errorMessage","errorLabel","TvNoiseCanvas","FullscreenToggleButton","fullscreenStateHandler","ViewMode","Fullscreen","fullscreenAvailabilityChangedHandler","isFullScreenAvailable","isViewModeAvailable","ViewModeAvailabilityChanged","targetViewMode","Inline","setViewMode","playbacktogglebutton_1","HugePlaybackToggleButton","PlaybackToggleButton","togglePlayback","isPlayInitiated","play","toggleFullscreen","suppressPlayButtonTransitionAnimation","setTransitionAnimationsEnabled","onToggle","subscribeOnce","firstPlay","enterFullscreenOnInitialPlayback","clickTime","doubleClickTime","isAutoplayEnabled","now","Date","setTimeout","Warning","WarningCode","PLAYBACK_COULD_NOT_BE_STARTED","playback","autoplay","isAutoplayUpcoming","getSource","enabled","noTransitionAnimationsClass","hasClass","HugeReplayButton","listselector_1","ItemSelectionList","ListSelector","isActive","items","updateDomItems","selectedValue","selectedListItem","empty","listItem","CLASS_SELECTED","deselectItem","this_1","String","onItemSelectedEvent","onItemAddedEvent","selectedItem","onItemRemovedEvent","tagName","for","labelElement","localizedText","onTextChangedEvent","getText","clearText","isEmpty","labelEvents","onTextChanged","onItemAdded","addListBoxDomItem","onItemRemoved","removeListBoxDomItem","refreshSelectedItem","listBoxElement","createListBoxDomItems","buildListBoxItemButton","ListBoxItemButton","getComponentForKey","c","listBoxItemButton_1","newItem","getItemForKey","handleSelectionChange","onClass","offClass","getItemIndex","parseInt","getItems","sortedInsert","filter","translator","findIndex","entry","getSelectedItem","newItems","forEach","items_1","itemCount","keys","listSelectorEvents","MetadataLabelContent","MetadataLabel","init","content","Title","uiconfig","metadata","title","Description","description","toLowerCase","PictureInPictureToggleButton","pictureInPictureStateHandler","PictureInPicture","pictureInPictureAvailabilityChangedHandler","isPictureInPictureAvailable","PlaybackSpeedSelectBox","setDefaultValue","playbackSpeed","getPlaybackSpeed","setSpeed","addDefaultItems","setPlaybackSpeed","parseFloat","PlaybackSpeedChanged","speed","customItems","defaultPlaybackSpeeds","sort","PlaybackTimeLabelMode","playerutils_1","PlaybackTimeLabel","minWidth","min-width","updateTimeFormatBasedOnDuration","live","liveCssClass","liveEdgeCssClass","liveClickHandler","timeShift","updateLiveTimeshiftState","isTimeshifted","isTimeshiftAvailable","getTimeShift","getMaxTimeShift","isPaused","liveStreamDetector","PlayerUtils","LiveStreamDetector","playbackTimeHandler","onLiveChanged","hideInLivePlayback","unsubscribe","detect","Infinity","setTime","getCurrentTimeRelativeToSeekableRange","width","timeFormat","abs","FORMAT_HHMMSS","FORMAT_MMSS","Ready","playbackSeconds","durationSeconds","secondsToTime","totalTime","timeLabelMode","CurrentTime","TotalTime","CurrentAndTotalTime","RemainingTime","remainingTime","setTimeFormat","handleClickEvent","playbackStateHandler","isSeeking","updateLiveState","isTimeShiftAvailable","CLASS_STOPTOGGLE","timeShiftDetector","PlaybackFinished","TimeShiftAvailabilityDetector","onTimeShiftAvailabilityChanged","onSeek","onSeeked","onAriaLabel","offAriaLabel","hugeplaybacktogglebutton_1","PlaybackToggleOverlay","playbackToggleButton","hugereplaybutton_1","RecommendationOverlay","setupRecommendations","clearRecommendations","recommendations","recommendations_1","RecommendationItem","itemConfig","replayButton","itemElement","href","background-image","thumbnail","bgElement","titleElement","timeElement","ReplayButton","hasEnded","groupplaybackapi_1","seekbarcontroller_1","timelinemarkershandler_1","seekbarbufferlevel_1","SeekBar","hasLabel","getLabel","setAriaSliderMinMax","setAriaSliderValues","ariaValueText","seekBarType","SeekBarType","Live","timeshiftValue","ceil","Vod","secondsToText","floor","getPlaybackPositionPercentage","getRelativeCurrentTime","updateBufferLevel","playbackPositionPercentage","bufferLoadedPercentageLevel","getMinBufferLevel","setBufferPosition","configureSeek","scrubbing","isPlayerSeeking","suspension","playbackPositionHandler","isGroupPlaybackAPIAvailable","hasTimeShift","switchVisibility","setPosition","seekBarBackdrop","SeekBarController","keyStepIncrements","volumeController","setSeekBarControls","forceUpdate","isUserSeeking","SegmentRequestFinished","setPlaybackPosition","isInInitialStartupState","smoothPlaybackPositionUpdateIntervalMs","SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED","isNeitherPausedNorPlaying","configureLivePausedTimeshiftUpdater","onPlayerSeek","setSeeking","onPlayerSeeked","groupPlayback","hasJoined","beginSuspension","GroupPlaybackSuspensionReason","UserIsScrubbing","onSeekPreview","enableSeekPreview","subscribeRateLimited","seekWhileScrubbing","percentage","proposedPlaybackTime","getTargetSeekPosition","endSuspension","refreshPlaybackPosition","smoothPlaybackPositionUpdater","timeShiftAvailable","PlayerResized","onConfigured","seekbarSnappingRange","snappingRange","setSeekPosition","configureSmoothPlaybackPositionUpdater","initializeTimelineMarkers","Volume","timelineMarkerConfig","timelineMarkersHandler","TimelineMarkersHandler","seekBar","seekBarMarkersContainer","pausedTimeshiftUpdater","startSmoothPlaybackPositionUpdater","currentTimeSeekBar","stopSmoothPlaybackPositionUpdater","currentTimePlayer","updateIntervalMs","error","PlayerAPINotAvailableError","currentTimeDelta","seekBarContainer","vertical","seekBarBufferLevel","seekBarPlaybackPosition","seekBarBufferPosition","seekBarPlaybackPositionMarker","seekBarSeekPosition","seekBarChapterMarkersContainer","seeking","mouseTouchMoveHandler","preventDefault","vr","stopPropagation","targetPercentage","getOffset","onSeekPreviewEvent","mouseTouchUpHandler","document","snappedChapter","getMarkerAtPosition","onSeekedEvent","position","isTouchEvent","isTouchSupported","onSeekEvent","getHorizontalOffset","eventPageX","elementOffsetPx","offset","left","widthPx","sanitizeOffset","getVerticalOffset","eventPageY","top","height","changedTouches","touches","pageY","pageX","MouseEvent","warn","percent","px","style","transform","-ms-transform","-webkit-transform","scale","CLASS_SEEKING","seekBarEvents","snappedMarker","seekPositionPercentage","marker","TouchEvent","seekableRangeStart","maxTimeShift","getSeekableRangeStart","targetPlaybackPosition","leftRight","upDown","playerDuration","videoBufferLength","getVideoBufferLength","audioBufferLength","getAudioBufferLength","bufferLength","Number","MAX_VALUE","coerceValueIntoRange","range","cb","arrowKeyControls","currentValue","valueUpdate","controlValue","right","up","down","home","end","seekBarControls","volumeTransition","startTransition","getVolume","finish","bind","domElement","controls","keyCode","KeyCode","LeftArrow","RightArrow","UpArrow","DownArrow","Home","End","Space","imageloader_1","SeekBarLabel","setTitleText","setThumbnail","uiManager","handleSeekPreview","timeLabel","seconds","titleLabel","thumbnailElement","thumbnailImageLoader","load","x","thumbnailCssSprite","thumbnailCssSingleImage","sizeX","sizeY","offsetX","offsetY","y","aspectRatio","padding-bottom","background-size","background-position","appliedMarkerCssClasses","targetTimeShift","currentTimeShift","timeShiftPreview","wallClockTime","getThumbnail","time","ImageLoader","selectElement","val","optionElement","NavigationDirection","settingspanelpage_1","hideHoveredSelectBoxes","hideTimeout","reset","activePage","onInactiveEvent","resetNavigation","onActiveEvent","getRootPage","onSettingsStateChanged","onSettingsStateChangedEvent","updateActivePageClass","getActivePage","setActivePageIndex","setActivePage","getPages","targetPage","navigateToPage","Forwards","pageTransitionAnimation","popToRootSettingsPanelPage","popSettingsPanelPage","navigationStack","Backwards","rootPageHasActiveSettings","hasActiveSettings","SettingsPanelPage","settingsPanelEvents","page","CLASS_ACTIVE_PAGE","resetNavigationOnShow","sourcePage","rootPage","animateNavigation","direction","skipAnimation","pop","settingsPanelDomElement","settingsPanelWidth","settingsPanelHeight","clone","targetSettingsPanelHeight","settingsPanelHTMLElement","get","scrollWidth","scrollHeight","targetPageHtmlElement","cloneNode","parentNode","appendChild","targetSettingsPanelWidth","parentElement","removeChild","forceBrowserReflow","offsetLeft","getComputedItems","selectBox_1","oldDisplay_1","setting","requestAnimationFrame","allItems","apply","videoqualityselectbox_1","audioqualityselectbox_1","playbackspeedselectbox_1","SettingsPanelItem","handleConfigItemChanged","minItemsToDisplay","VideoQualitySelectBox","hasAutoItem","playbackSpeedSelectionEnabled","onActiveChangedEvent","settingsPanelItemEvents","onActiveChanged","settingspanelitem_1","settingsStateChangedHandler","lastShownItem","CLASS_LAST","settingsPanelPageEvents","activeItems","onActive","isIOS","isMacIntel","focusToFirstInput","onInactive","settingspanelpagenavigatorbutton_1","SettingsPanelPageBackButton","SettingsPanelPageNavigatorButton","popPage","container","pushTargetPage","SettingsPanelPageOpenButton","SettingsToggleButton","settingsPanel","visibleSettingsPanels","autoHideWhenNoActiveSettings","settingsPanelItemsChangedHandler","subtitleutils_1","SubtitleListBox","SubtitleSwitchHandler","controlbar_1","vttutils_1","SubtitleOverlay","subtitleClearHandler","subtitleContainerManager","subtitleManager","clearInactiveCues","toRemove","removeLabel","ActiveSubtitleManager","SubtitleRegionContainerManager","CueEnter","generateLabel","cueEnter","preprocessLabelEventCallback","previewSubtitleActive","previewSubtitle","addLabel","size","forceSubtitlesIntoViewContainer","handleSubtitleCropping","CueUpdate","labelToReplace","cueUpdate","replaceLabel","CueExit","labelToRemove","cueExit","hasCues","SubtitleEnabled","SubtitleDisabled","CLASS_CONTROLBAR_VISIBLE","configureCea608Captions","detectCroppedSubtitleLabel","parent","childRect","getBoundingClientRect","parentRect","bottom","labelDomElement","cropDetection","removeCss","row","column","SubtitleLabel","generateImageTagText","image","vtt","region","regionStyle","updateCEA608FontSize","dummyLabel","font-size","line-height","visibility","dummyLabelCharWidth","dummyLabelCharHeight","fontSizeRatio","subtitleOverlayWidth","subtitleOverlayHeight","fontLetterSpacing","CEA608_NUM_COLUMNS","CEA608_NUM_ROWS","fontSize","letter-spacing","CLASS_CEA_608","fontSizeCalculationRequired","CEA608_COLUMN_OFFSET","CEA608_ROW_OFFSET","enablePreviewSubtitleLabel","removePreviewSubtitleLabel","calculateId","addCueToMap","popCueFromMap","activeSubtitleCueMap","activeSubtitleCueCount","activeSubtitleCues","activeSubtitleCue","removedCues","cue","imageData","imgTag","src","outerHTML","getCues","cueCount","getRegion","regionContainerId","regionName","overlaySize","subtitleRegionContainers","regionContainerId_1","regionContainer","SubtitleRegionContainer","subtitleOverlay","previousLabel","newLabel","labelToAdd","labelCount","VttUtils","setVttRegionStyles","setVttCueBoxStyles","SubtitleSelectBox","subtitlesettingselectbox_1","BackgroundColorSelectBox","SubtitleSettingSelectBox","setColorAndOpacity","settingsManager","backgroundColor","isSet","backgroundOpacity","toggleOverlayClass","property","BackgroundOpacitySelectBox","CharacterEdgeSelectBox","characterEdge","FontColorSelectBox","fontColor","fontOpacity","FontFamilySelectBox","fontFamily","FontOpacitySelectBox","FontSizeSelectBox","currentCssClass","overlay","SubtitleSettingsLabel","opener","storageutils_1","SubtitleSettingsManager","propertyName","_properties","SubtitleSettingsProperty","windowColor","windowOpacity","userSettings","localStorageKey","DummyComponent","instance","save","StorageUtils","setObject","getObject","_instance","_value","_onChanged","_manager","manager","subtitlesettingsmanager_1","fontsizeselectbox_1","fontfamilyselectbox_1","fontcolorselectbox_1","fontopacityselectbox_1","characteredgeselectbox_1","backgroundcolorselectbox_1","backgroundopacityselectbox_1","windowcolorselectbox_1","windowopacityselectbox_1","subtitlesettingsresetbutton_1","settingspanelpagebackbutton_1","SubtitleSettingsPanelPage","WindowColorSelectBox","WindowOpacitySelectBox","SubtitleSettingsResetButton","getSeekBarWidth","markersContainer","timelineMarkers","configureMarkers","clearMarkers","AdBreakStarted","AdBreakFinished","updateMarkers","updateMarkersDOM","onRelease","intervalMarkerMatch","positionMarkerMatch","removeMarkerFromConfig","markers","_marker","filterRemovedMarkers","seekbarMarker","matchingMarker","removeMarkerFromDOM","shouldProcessMarkers","validToProcess","hasMarkers","markerPosition","markerDuration","getSeekableRangeRespectingLive","isNaN","updateMarkerDOM","newMarker","createMarkerDOM","getMarkerCssProperties","seekBarWidthPx","positionInPx","cssProperties","markerWidthPx","round","imageElement_1","markerClasses","markerElement","data-marker-time","data-marker-title","imageUrl","handler","Destroy","metadatalabel_1","TitleBar","shouldBeShown","hasMetadataText","checkMetadataTextAndUpdateVisibility","keepHiddenWithoutMetadata","isOff","onState","onToggleEvent","onToggleOnEvent","isOn","onToggleOffEvent","toggle","toggleButtonEvents","onToggleOn","onToggleOff","canvas","canvasElement","canvasContext","getContext","noiseAnimationWindowPos","canvasHeight","lastFrameUpdate","canvasWidth","renderFrame","useAnimationFrame","cancelAnimationFrame","clearTimeout","frameUpdateHandlerId","frameInterval","getTime","currentPixelOffset","noiseImage","createImageData","random","interferenceHeight","putImageData","scheduleNextRender","userInteractionEventSource","configureUIShowHide","configurePlayerStates","isFirstTouch","playerState","hidingPrevented","hidePlayerStateExceptions","uiHideTimeout","hideUi","previewHideEventArgs","userInteractionEvents","playerStateChange","state","enumName","stateClassNames","PlayerState","STATE_PREFIX","updateState","removeStates","updateLayoutSizeClasses","Idle","Prepared","Finished","getState","FULLSCREEN","BUFFERING","REMOTE_CONTROL","CONTROLS_HIDDEN","CONTROLS_SHOWN","substring","getContainer","createElement","flex","updateVideoQualities","videoQualities","getAvailableVideoQualities","hasAuto","getStreamType","videoQualities_1","videoQuality","selectCurrentVideoQuality","getVideoQuality","setVideoQuality","VideoQualityChanged","VideoQualityAdded","VideoQualityRemoved","volumeslider_1","volumetogglebutton_1","VolumeControlButton","volumeToggleButton","getVolumeToggleButton","volumeSlider","getVolumeSlider","volumeSliderHovered","volumeSliderHideTimeout","VolumeToggleButton","VolumeSlider","seekbar_1","setVolumeAriaSliderValues","hideIfVolumeControlProhibited","detectVolumeControlAvailability","muted","volume","updateVolumeWhileScrubbing","dummyVideoElement","update","volumeLevelTens","toggleMuted","defaultConfig","VRToggleButton","vrStateHandler","ev","VR_RENDERING_ERROR","isVRConfigured","isVRStereoAvailable","getStereo","vrButtonVisibilityHandler","source","VRStereoChanged","setStereo","Watermark","vrtogglebutton_1","settingstogglebutton_1","playbacktimelabel_1","airplaytogglebutton_1","errormessageoverlay_1","casttogglebutton_1","fullscreentogglebutton_1","recommendationoverlay_1","caststatusoverlay_1","watermark_1","subtitleoverlay_1","seekbarlabel_1","playbacktoggleoverlay_1","pictureinpicturetogglebutton_1","uimanager_1","titlebar_1","bufferingoverlay_1","subtitlelistbox_1","audiotracklistbox_1","uifactory_1","DemoFactory","buildDemoWithSeparateAudioSubtitlesButtons","subtitleListBox","audioTrackListBox","UIManager","ui","UIFactory","modernSmallScreenAdsUI","condition","context","documentWidth","isAd","adRequiresUi","modernAdsUI","modernSmallScreenUI","subtitleSettingsPanel","audioTrackSettingsPanel","controlBar","something","attributes","Array","HTMLElement","elements","Document","attributeName","attributeValue","setAttribute","findChildElements","findChildElementsOfElement","selector","childElements","querySelectorAll","allChildElements","inputElements","focus","scrollTo","arguments","setHtml","getHtml","innerHTML","HTMLSelectElement","HTMLInputElement","attribute","setAttr","getAttr","removeAttr","removeAttribute","getAttribute","dataAttribute","setData","getData","childElement","elementRect","htmlRect","body","offsetWidth","offsetHeight","eventName","eventHandler","split","addEventListener","removeEventListener","className","classNames","classList","add","replace","RegExp","contains","propertyNameOrCollection","setCss","getCss","setCssCollection","elementIndex","removeProperty","getComputedStyle","ruleValueCollection","defaultErrorMessages","1000","1001","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1200","1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1300","1301","1302","1303","1304","1400","1401","1402","1403","1404","2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014","2100","2101","3000","3001","3002","3003","3004","3100","listeners","listener","EventListenerWrapper","rateMs","RateLimitedEventListenerWrapper","subscribedListener","unsubscribeAll","listenersToRemove","listeners_1","fire","isOnce","listenersToRemove_1","eventListener","once","shouldFireEvent","rateLimitTimout","fireSuper","rateLimitingEventListener","startRateLimiting","lastSeenEvent","FocusVisibleCssClassName","FocusVisibilityTracker","bitmovinUiPrefix","lastInteractionWasKeyboard","onKeyDown","metaKey","altKey","ctrlKey","onMouseOrPointerOrTouch","onFocus","isHtmlElement","onBlur","eventHandlerMap","mousedown","pointerdown","touchstart","keydown","blur","registerEventListeners","DOMTokenList","event_1","unregisterEventListeners","event_2","guid","loadedCallback","state_1","loaded","callLoadedCallback","de_json_1","__importDefault","en_json_1","es_json_1","defaultLocalizationConfig","defaultVocabularies","en","default","de","es","language","vocabularies","I18n","setConfig","mergedConfig","detectBrowserLanguage","mergeVocabulariesWithDefaultVocabularies","initializeLanguage","initializeVocabulary","containsLanguage","hasOwnProperty","rawVocabularies","reduce","mergedVocabularies","vocabulary","browserLanguageDetectionEnabled","userLanguage","shortenedUserLanguage","vocab","lang","replaceVariableWithPlaceholderIfExists","matches","match","m","str","vocabularyString","settings.video.quality","settings.audio.quality","settings.audio.track","playPause","close","settings.audio.mute","settings.audio.volume","pictureInPicture","appleAirplay","googleCast","settings","fullscreen","settings.subtitles","settings.subtitles.font.size","settings.subtitles.font.family","settings.subtitles.font.color","settings.subtitles.font.opacity","settings.subtitles.characterEdge","settings.subtitles.background.color","settings.subtitles.background.opacity","settings.subtitles.window.color","settings.subtitles.window.opacity","settings.time.hours","settings.time.minutes","settings.time.seconds","back","replay","ads.remainingTime","colors.white","colors.black","colors.red","colors.green","colors.blue","colors.yellow","subtitle.example","subtitle.select","playingOn","connectingTo","watermarkLink","seekBar.value","seekBar.timeshift","seekBar.durationText","colors.cyan","colors.magenta","settings.subtitles.characterEdge.raised","settings.subtitles.characterEdge.depressed","settings.subtitles.characterEdge.uniform","settings.subtitles.characterEdge.dropshadowed","settings.subtitles.font.family.monospacedserif","settings.subtitles.font.family.proportionalserif","settings.subtitles.font.family.monospacedsansserif","settings.subtitles.font.family.proportionalsansserif","settings.subtitles.font.family.casual","settings.subtitles.font.family.cursive","settings.subtitles.font.family.smallcapital","auto","normal","version","enumerable","UIInstanceManager","demofactory_1","spatialnavigation_1","navigationgroup_1","SpatialNavigation","rootnavigationgroup_1","NavigationGroup","ListNavigationGroup_1","RootNavigationGroup","ListNavigationGroup","ListOrientation","itemselectionlist_1","audiotrackselectbox_1","subtitleselectbox_1","volumecontrolbutton_1","adskipbutton_1","admessagelabel_1","adclickoverlay_1","castuicontainer_1","closebutton_1","subtitlesettingslabel_1","settingspanelpageopenbutton_1","subtitlesettingspanelpage_1","replaybutton_1","TypeError","timeShiftAvailabilityChangedEvent","liveDetector","liveChangedEvent","isAndroid","isChrome","DurationChanged","defaultValue","getSeekableRange","currentTimeshift","maxTimeshift","timeShiftAvailableNow","liveNow","types_1","handleAction","action","Action","SELECT","BACK","handleNavigation","listNavigationDirections","orientation","__spreadArray","Vertical","Direction","UP","DOWN","Horizontal","LEFT","RIGHT","typeguards_1","getHtmlElementsFromComponents","htmlElements","resolveAllComponents","childComponents","containerOrComponent","isContainer","isComponent","isListBox","children","TizenKeyMap","isApplicable","isTizen","keyCodes","38","40","37","39","13","10009","WebOsKeyMap","isWebOs","461","PlayStationKeyMap","isPlayStation","27","AndroidKeyMap","19","20","21","22","23","66","4","HisenseKeyMap","8","DefaultKeyMap","getKeyMapForPlatform","applicableKeyMap","keyMap","vector","sqrt","pow","getElementVector","boundingRect","getBoundingRectFromElement","calculateAngle","b","directionVector","len","elementVector","angleCos","acos","PI","getElementInDirection","activeElement","activeElemVector","elem","dist","angle","_b","angleA","distA","navigationalgorithm_1","gethtmlelementsfromcomponents_1","nodeeventsubscriber_1","removeElementHoverEventListeners","eventSubscriber","NodeEventSubscriber","getActiveElement","focusElement","blurActiveElement","focusFirstElement","defaultNavigationHandler","targetElement","defaultActionHandler","click","handleInput","defaultHandler","userHandler","handleDefault","onNavigation","activeElementBeforeDisable","onAction","isSettingsPanel","trackElementHover","removeEventListenerFunctions","htmlElem","exitListener","enterListener","fn","attachedListeners","Map","getEventListenersOfType","has","set","node","options","listenersOfType","listenerIndex","otherNode","otherListener","otherOptions","SeekBarHandler","rootNavigationGroup","cursorPosition","isScrubbing","scrubSpeedPercentage","isSeekBarWrapper","stopSeeking","getSeekBar","initializeOrUpdateCursorPosition","dispatchMouseMoveEvent","dispatchMouseClickEvent","from","seekBarWrapper","updateScrubSpeedPercentage","scrubSpeedResetTimeout","getIncrement","increment","resetCursorPosition","updateCursorPosition","initializeCursorPosition","playbackPositionMarker","querySelector","rect","startX","startY","getCursorPositionMouseEventInit","clientX","clientY","dispatchEvent","mouseDownHandler","mouseEventInit","dispatchMouseLeaveEvent","seekbarhandler_1","keymap_1","navigationGroups","group","activeNavigationGroups","updateEnabledNavigationGroup","groupIndex","other","handleKeyEvent","active","getActiveNavigationGroup","isDirection","isAction","seekBarHandler","unsubscribeVisibilityChangesFns","subscribeToNavigationGroupVisibilityChanges","attachKeyEventHandler","enableDefaultNavigationGroup","onShowHandler","onHideHandler","unsubscribeFromNavigationGroupVisibilityChanges","unsub","groupToEnable","idx","obj","values","hasLocalStorageCache","setItem","hasLocalStorage","localStorage","getItem","storage","DOMException","json","parse","totalSeconds","format","isNegative","hours","minutes","leftPadWithZeros","num","substr","adMessage","adMessagePlaceholderRegex","formatString","leadingZeroes","numDecimalPlaces","leadingZeroesMatches","decimalPlacesMatches","timeString","toFixed","currentSubtitle","SUBTITLES_OFF_KEY","subtitles","list","subtitle","SubtitleAdded","addSubtitle","selectCurrentSubtitle","SubtitleRemoved","removeSubtitle","clearSubtitles","refreshSubtitles","offListItem","delay","callback","repeat","timeoutOrIntervalId","clearInternal","setInterval","clearInterval","gobackbutton_1","radiomodetogglebutton_1","playbackjumpoverlay_1","modernUI","mainSettingsPanelPage","subtitleSettingsPanelPage","subtitleSelectBox","subtitleSettingsOpenButton","modernCastReceiverUI","modernTvUI","subtitleListPanel","audioTrackListPanel","playbackToggleOverlay","subtitleToggleButton","audioToggleButton","uiContainer","spatialNavigation","buildDefaultUI","buildModernUI","buildDefaultSmallScreenUI","buildModernSmallScreenUI","buildDefaultCastReceiverUI","buildModernCastReceiverUI","buildDefaultTvUI","buildModernTvUI","volumecontroller_1","focusvisibilitytracker_1","playerUiOrUiVariants","updateConfig","onUiVariantResolve","onActiveUiChanged","uiVariants","managerPlayerWrapper","PlayerWrapper","autoUiVariantResolve","VolumeController","getPlayer","playerSourceConfig","playerSourceUiConfig","updateSource","wrappedPlayer","uiVariantsWithoutCondition","PlaylistTransition","uiContainerElement","uiInstanceManagers","uiVariant","InternalUIInstanceManager","resolveUiVariant","adStartedEvent","isLinear","requestsUi","currentUi","getWrappedPlayer","fireEventInUI","focusVisibilityTracker","localize","setLocalizationConfig","localizationConfig","getUiVariants","switchToUiVariant","uiVariantIndex","previousUi","nextUi","getUI","isConfigured","addUi","defaultContext","isFullscreen","clientWidth","switchingContext","nextUiVariant","matchesCondition","dom","configureControls","releaseUi","releaseControls","clearEventHandlers","uiInstanceManager","getTimelineMarkers","addTimelineMarker","timelineMarker","removeTimelineMarker","playerWrapper","configureControlsTree","configured","configuredComponents","configuredComponents_1","constructor","releaseControlsTree","released","isReleased","childComponent","wrapper","eventHandlers","eventType","objectProtoPropertyNames","getOwnPropertyNames","getPrototypeOf","namesToIgnore","methods","properties","members_1","names","newNames","member","methods_1","method","properties_1","propertyDescriptor","propertyDescriptor_1","getOwnPropertyDescriptor","playerEventData","timestamp","uiSourced","visit","recursiveTreeWalker","setVolume","issuerName","setMuted","mute","unmute","isMuted","recallVolume","storeVolume","storedVolume","VolumeTransition","playerMuted","playerVolume","uiMuted","uiVolume","VolumeChanged","Muted","Unmuted","controller","setCueBoxPositionForVerticalWriting","cueContainerDom","subtitleOverlaySize","writingMode","Right","Top","setVttLine","setVttPositionAlign","positionAlign","DirectionPair","VttVerticalWriting","defaultLineNumber","Bottom","Left","setVttLineAlign","relativeCueBoxPosition","lineAlign","setCssForCenterLineAlign","subtitleOverLaySize","targetLine","relativeLinePosition","overlayReferenceEdge","line","snapToLines","cueContainer","GrowingRight","GrowingLeft","textAlign","align","containerSize","regionContainerDom","regionPositionX","viewportAnchorX","regionAnchorX","regionPositionY","viewportAnchorY","lines","regionAnchorY"],"mappings":"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","file":"bitmovinplayer-ui.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { PlayerAPI, PlayerEvent } from 'bitmovin-player';\nimport { Button, ButtonConfig } from '../../../ts/components/button';\nimport { UIInstanceManager } from '../../../ts/uimanager';\n\ndeclare const window: any;\n\nexport class GoBackButton extends Button<ButtonConfig> {\n  constructor(config: ButtonConfig = {}) {\n    super(config);\n\n    const defaultConfig: ButtonConfig = {\n      cssClass: 'ui-gobackbutton',\n      text: 'Go Back',\n      ariaLabel: 'Go Back',\n    };\n\n    this.config = this.mergeConfig(config, defaultConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      console.log('[GoBack] Button clicked');\n\n      window.bitmovin.customMessageHandler.sendAsynchronous('goBack');\n    });\n\n    player.on(player.exports.PlayerEvent.ViewModeChanged, () => {\n      player.getViewMode() === 'fullscreen' ? this.hide() : this.show();\n    });\n  }\n}\n","import { Button, ButtonConfig } from '../../../ts/components/button';\nimport { UIInstanceManager } from '../../../ts/uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../../ts/localization/i18n';\n\nexport interface PlaybackJumpButtonsConfig extends ButtonConfig {\n  skipTime: number; // in seconds\n}\n\nexport class PlaybackJumpButtons extends Button<PlaybackJumpButtonsConfig> {\n\n  constructor(config: PlaybackJumpButtonsConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbackjumpbuttons',\n      text: config.text,\n      ariaLabel: config.ariaLabel,\n      skipTime: 0,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      const currentTime = player.getCurrentTime();\n      const duration = player.getDuration();\n\n      if (!player.isLive()) {\n        let newTime = currentTime + this.config.skipTime;\n        newTime = Math.max(0, Math.min(newTime, duration));\n        player.seek(newTime, 'ui');\n      }\n    });\n  }\n}\n\nexport class PlaybackForwardButton extends PlaybackJumpButtons {\n  constructor(config: PlaybackJumpButtonsConfig) {\n    super({\n      ...config,\n      cssClass: 'ui-playbackforwardbutton',\n      text: i18n.getLocalizer('forward'),\n      ariaLabel: i18n.getLocalizer('forward'),\n    });\n  }\n}\n\nexport class PlaybackRewindButton extends PlaybackJumpButtons {\n  constructor(config: PlaybackJumpButtonsConfig) {\n    super({\n      ...config,\n      cssClass: 'ui-playbackrewindbutton',\n      text: i18n.getLocalizer('rewind'),\n      ariaLabel: i18n.getLocalizer('rewind'),\n    });\n  }\n}\n","import {Container, ContainerConfig} from '../../../ts/components/container';\nimport {PlaybackForwardButton, PlaybackRewindButton} from './playbackjumpbutton';\n\nexport interface PlaybackJumpControlsOverlayConfig extends ContainerConfig {}\n\n/**\n * Overlay containing the playback forward and rewind buttons.\n */\nexport class PlaybackJumpControlsOverlay extends Container<PlaybackJumpControlsOverlayConfig> {\n\n  private forwardButton: PlaybackForwardButton;\n  private rewindButton: PlaybackRewindButton;\n\n  constructor(config: PlaybackJumpControlsOverlayConfig = {}) {\n    super(config);\n\n    this.forwardButton = new PlaybackForwardButton({ skipTime: 10 });\n    this.rewindButton = new PlaybackRewindButton({ skipTime: -10 });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbackforward-overlay',\n      components: [this.forwardButton, this.rewindButton],\n    }, this.config);\n  }\n}\n","import { EventDispatcher } from '../../../../ts/eventdispatcher';\n\nexport interface RadioModeChangedArgs {\n  activated: boolean;\n}\n\n/**\n * Handles the radio mode state.\n */\nexport class RadioModeController {\n  private activated: boolean;\n  private readonly events = {\n    onChanged: new EventDispatcher<RadioModeController, RadioModeChangedArgs>(),\n  };\n\n  constructor() {\n    this.activated = false;\n  }\n\n  /**\n   * @param activated - Boolean state of the radio mode.\n   */\n  setRadioMode(activated: boolean): void {\n    this.activated = activated;\n    this.onChangedEvent();\n  }\n\n  toggleRadioMode(): void {\n    this.setRadioMode(!this.activated);\n  }\n\n  /**\n   * @returns Boolean state of the radio mode.\n   */\n  isRadioModeActivated(): boolean {\n    return this.activated;\n  }\n\n  /**\n   * Trigger the onChanged event.\n   */\n  private onChangedEvent(): void {\n    this.events.onChanged.dispatch(this, { activated: this.activated });\n  }\n\n  /**\n   * Get the onChanged event.\n   */\n  get onChanged() {\n    return this.events.onChanged.getEvent();\n  }\n}","import { RadioModeController } from './radiomodecontroller';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { ToggleButton, ToggleButtonConfig } from '../../../../ts/components/togglebutton';\nimport { UIInstanceManager } from '../../../../ts/uimanager';\n\ndeclare const window: any;\n\nexport class RadioModeToggleButton extends ToggleButton<ToggleButtonConfig> {\n  private radioModeController: RadioModeController;\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    const defaultConfig: ToggleButtonConfig = {\n      cssClass: 'ui-radiomodetogglebutton',\n      text: 'Radio Mode',\n      ariaLabel: 'Radio Mode',\n    };\n\n    this.config = this.mergeConfig(config, defaultConfig, this.config);\n    this.radioModeController = new RadioModeController();\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    // Écoutez les changements d'état du mode radio\n    this.radioModeController.onChanged.subscribe((_, args) => {\n      console.log(`[RadioModeToggleButton] Radio mode state changed: ${args.activated}`);\n      if (args.activated) {\n        this.on();\n      } else {\n        this.off();\n      }\n\n      // Send the current state to the outside (e.g. to the React Native app)\n      window.bitmovin.customMessageHandler.sendAsynchronous('radioModeChanged', JSON.stringify({ activated: args.activated }));\n    });\n\n    // Handle clicks on the button\n    this.onClick.subscribe(() => {\n      console.log('[RadioModeToggleButton] Button clicked');\n      this.radioModeController.toggleRadioMode();\n\n      // Send synchronous or asynchronous messages to the outside (e.g. to the React Native app)\n      const result = window.bitmovin.customMessageHandler.sendSynchronous('toggleRadioMode');\n      console.log('Return value from native:', result);\n    });\n\n    if (window.bitmovin && window.bitmovin.customMessageHandler) {\n      window.bitmovin.customMessageHandler.on('toggleRadioMode', (data?: string) => {\n        this.radioModeController.toggleRadioMode();\n      });\n    }\n\n    // Initialise l'état du bouton au démarrage\n    if (this.radioModeController.isRadioModeActivated()) {\n      this.on();\n    } else {\n      this.off();\n    }\n  }\n}\n","export namespace ArrayUtils {\n  /**\n   * Removes an item from an array.\n   * @param array the array that may contain the item to remove\n   * @param item the item to remove from the array\n   * @returns {any} the removed item or null if it wasn't part of the array\n   */\n  export function remove<T>(array: T[], item: T): T | null {\n    let index = array.indexOf(item);\n\n    if (index > -1) {\n      return array.splice(index, 1)[0];\n    } else {\n      return null;\n    }\n  }\n}\n","import { ListItem, ListSelector, ListSelectorConfig } from './components/listselector';\nimport { UIInstanceManager } from './uimanager';\nimport { AudioTrackEvent, PlayerAPI, AudioTrack } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\n/**\n * Helper class to handle all audio tracks related events\n *\n * This class listens to player events as well as the `ListSelector` event if selection changed\n */\nexport class AudioTrackSwitchHandler {\n\n  private player: PlayerAPI;\n  private listElement: ListSelector<ListSelectorConfig>;\n  private uimanager: UIInstanceManager;\n\n  constructor(player: PlayerAPI, element: ListSelector<ListSelectorConfig>, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.listElement = element;\n    this.uimanager = uimanager;\n\n    this.bindSelectionEvent();\n    this.bindPlayerEvents();\n    this.refreshAudioTracks();\n  }\n\n  private bindSelectionEvent(): void {\n    this.listElement.onItemSelected.subscribe((_, value: string) => {\n      this.player.setAudio(value);\n    });\n  }\n\n  private bindPlayerEvents(): void {\n    // Update selection when selected track has changed\n    this.player.on(this.player.exports.PlayerEvent.AudioChanged, this.selectCurrentAudioTrack);\n    // Update tracks when source goes away\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.refreshAudioTracks);\n    // Update tracks when the period within a source changes\n    this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshAudioTracks);\n    // Update tracks when a track is added or removed\n    this.player.on(this.player.exports.PlayerEvent.AudioAdded, this.addAudioTrack);\n    this.player.on(this.player.exports.PlayerEvent.AudioRemoved, this.removeAudioTrack);\n    this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshAudioTracks);\n  }\n\n  private addAudioTrack = (event: AudioTrackEvent) => {\n    const audioTrack = event.track;\n    if (!this.listElement.hasItem(audioTrack.id)) {\n      this.listElement.addItem(audioTrack.id, i18n.getLocalizer(audioTrack.label), true);\n    }\n  };\n\n  private removeAudioTrack = (event: AudioTrackEvent) => {\n    const audioTrack = event.track;\n    if (this.listElement.hasItem(audioTrack.id)) {\n      this.listElement.removeItem(audioTrack.id);\n    }\n  };\n\n  private selectCurrentAudioTrack = () => {\n    let currentAudioTrack = this.player.getAudio();\n\n    // HLS streams don't always provide this, so we have to check\n    if (currentAudioTrack) {\n      this.listElement.selectItem(currentAudioTrack.id);\n    }\n  };\n\n  private refreshAudioTracks = () => {\n    const audioTracks = this.player.getAvailableAudio();\n    const audioTrackToListItem = (audioTrack: AudioTrack): ListItem => {\n      return { key: audioTrack.id, label: audioTrack.label };\n    };\n\n    this.listElement.synchronizeItems(audioTracks.map(audioTrackToListItem));\n    this.selectCurrentAudioTrack();\n  };\n}\n","declare global {\n  interface Navigator {\n    msMaxTouchPoints?: number;\n  }\n}\n\nexport class BrowserUtils {\n  // isMobile only needs to be evaluated once (it cannot change during a browser session)\n  // Mobile detection according to Mozilla recommendation: \"In summary, we recommend looking for the string “Mobi”\n  // anywhere in the User Agent to detect a mobile device.\"\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n  static get isMobile(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Mobi/.test(navigator.userAgent);\n  }\n\n  static get isChrome(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Chrome/.test(navigator.userAgent);\n  }\n\n  static get isAndroid(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Android/.test(navigator.userAgent) && !this.isHisense;\n  }\n\n  static get isIOS(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /iPad|iPhone|iPod/.test(navigator.userAgent);\n  }\n\n  static get isMacIntel(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && navigator.platform === 'MacIntel';\n  }\n\n  static get isHisense(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Hisense/.test(navigator.userAgent);\n  }\n\n  static get isPlayStation(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /PlayStation/i.test(navigator.userAgent);\n  }\n\n  static get isWebOs(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return (\n      navigator &&\n      navigator.userAgent &&\n      (navigator.userAgent.includes('Web0S') || navigator.userAgent.includes('NetCast'))\n    );\n  }\n\n  static get isTizen(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Tizen/.test(navigator.userAgent);\n  }\n\n  // https://hacks.mozilla.org/2013/04/detecting-touch-its-the-why-not-the-how/\n  static get isTouchSupported() {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return 'ontouchstart' in window || navigator && navigator.userAgent && (navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0);\n  }\n\n  private static windowExists(): boolean {\n    return typeof window !== 'undefined';\n  }\n}\n","import { ClickOverlay } from './clickoverlay';\nimport { UIInstanceManager } from '../uimanager';\nimport { Ad, AdEvent, PlayerAPI } from 'bitmovin-player';\n\n/**\n * A simple click capture overlay for clickThroughUrls of ads.\n */\nexport class AdClickOverlay extends ClickOverlay {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let clickThroughCallback: () => void = null;\n\n    player.on(player.exports.PlayerEvent.AdStarted, (event: AdEvent) => {\n      let ad = event.ad;\n      this.setUrl(ad.clickThroughUrl);\n      clickThroughCallback = ad.clickThroughUrlOpened;\n    });\n\n    // Clear click-through URL when ad has finished\n    let adFinishedHandler = () => {\n      this.setUrl(null);\n    };\n\n    player.on(player.exports.PlayerEvent.AdFinished, adFinishedHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adFinishedHandler);\n    player.on(player.exports.PlayerEvent.AdError, adFinishedHandler);\n\n    this.onClick.subscribe(() => {\n      // Pause the ad when overlay is clicked\n      player.pause('ui-ad-click-overlay');\n\n      if (clickThroughCallback) {\n        clickThroughCallback();\n      }\n    });\n  }\n}\n","import {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport { AdEvent, LinearAd, PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A label that displays a message about a running ad, optionally with a countdown.\n */\nexport class AdMessageLabel extends Label<LabelConfig> {\n\n  constructor(config: LabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-label-ad-message',\n      text: i18n.getLocalizer('ads.remainingTime') ,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let text = config.text;\n\n    let updateMessageHandler = () => {\n      this.setText(StringUtils.replaceAdMessagePlaceholders(i18n.performLocalization(text), null, player));\n    };\n\n    let adStartHandler = (event: AdEvent) => {\n      let uiConfig = (event.ad as LinearAd).uiConfig;\n      text = uiConfig && uiConfig.message || config.text;\n\n      updateMessageHandler();\n\n      player.on(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);\n    };\n\n    let adEndHandler = () => {\n      player.off(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);\n    };\n\n    player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdError, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);\n  }\n}","import { ButtonConfig, Button } from './button';\nimport { UIInstanceManager } from '../uimanager';\nimport { StringUtils } from '../stringutils';\nimport { AdEvent, LinearAd, PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for the {@link AdSkipButton}.\n */\nexport interface AdSkipButtonConfig extends ButtonConfig {\n  /**\n   * Message which gets displayed during the countdown is active.\n   * Supported placeholders: look at {@link StringUtils.replaceAdMessagePlaceholders}\n   */\n  untilSkippableMessage?: string;\n  /**\n   * Message displayed when the ad is skippable.\n   * Supported placeholders: look at {@link StringUtils.replaceAdMessagePlaceholders}\n   */\n  skippableMessage?: string;\n}\n\n/**\n * A button that is displayed during ads and can be used to skip the ad.\n */\nexport class AdSkipButton extends Button<AdSkipButtonConfig> {\n\n  constructor(config: AdSkipButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <AdSkipButtonConfig>{\n      cssClass: 'ui-button-ad-skip',\n      untilSkippableMessage: 'Skip ad in {remainingTime}',\n      skippableMessage: 'Skip ad',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let untilSkippableMessage = config.untilSkippableMessage;\n    let skippableMessage = config.skippableMessage;\n    let skipOffset = -1;\n\n    let updateSkipMessageHandler = () => {\n      this.show();\n\n      // Update the skip message on the button\n      if (player.getCurrentTime() < skipOffset) {\n        this.setText(StringUtils.replaceAdMessagePlaceholders(untilSkippableMessage, skipOffset, player));\n        this.disable();\n      } else {\n        this.setText(skippableMessage);\n        this.enable();\n      }\n    };\n\n    let adStartHandler = (event: AdEvent) => {\n      let ad = event.ad as LinearAd;\n      skipOffset = ad.skippableAfter;\n      untilSkippableMessage = ad.uiConfig && ad.uiConfig.untilSkippableMessage || config.untilSkippableMessage;\n      skippableMessage = ad.uiConfig && ad.uiConfig.skippableMessage || config.skippableMessage;\n\n      // Display this button only if ad is skippable.\n      // Non-skippable ads will return -1 for skippableAfter for player version < v8.3.0.\n      if (typeof skipOffset === 'number' && skipOffset >= 0) {\n        updateSkipMessageHandler();\n        player.on(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);\n      } else {\n        this.hide();\n      }\n    };\n\n    let adEndHandler = () => {\n      player.off(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);\n    };\n\n    player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdError, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);\n\n    this.onClick.subscribe(() => {\n      // Try to skip the ad (this only works if it is skippable so we don't need to take extra care of that here)\n      player.ads.skip();\n    });\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles Apple AirPlay.\n */\nexport class AirPlayToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-airplaytogglebutton',\n      text: i18n.getLocalizer('appleAirplay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    if (!player.isAirplayAvailable) {\n      // If the player does not support Airplay (player 7.0), we just hide this component and skip configuration\n      this.hide();\n      return;\n    }\n\n    this.onClick.subscribe(() => {\n      if (player.isAirplayAvailable()) {\n        player.showAirplayTargetPicker();\n      } else {\n        if (console) {\n          console.log('AirPlay unavailable');\n        }\n      }\n    });\n\n    const airPlayAvailableHandler = () => {\n      if (player.isAirplayAvailable()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    const airPlayChangedHandler = () => {\n      if (player.isAirplayActive()) {\n        this.on();\n      } else {\n        this.off();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.AirplayAvailable, airPlayAvailableHandler);\n    player.on(player.exports.PlayerEvent.AirplayChanged, airPlayChangedHandler);\n\n    // Startup init\n    airPlayAvailableHandler(); // Hide button if AirPlay is not available\n    airPlayChangedHandler();\n  }\n}","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between 'auto' and the available audio qualities.\n */\nexport class AudioQualitySelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-audioqualityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let selectCurrentAudioQuality = () => {\n      this.selectItem(player.getAudioQuality().id);\n    };\n\n    let updateAudioQualities = () => {\n      let audioQualities = player.getAvailableAudioQualities();\n\n      this.clearItems();\n\n      // Add entry for automatic quality switching (default setting)\n      this.addItem('auto', i18n.getLocalizer('auto'));\n\n      // Add audio qualities\n      for (let audioQuality of audioQualities) {\n        this.addItem(audioQuality.id, audioQuality.label);\n      }\n\n      // Select initial quality\n      selectCurrentAudioQuality();\n    };\n\n    this.onItemSelected.subscribe((sender: AudioQualitySelectBox, value: string) => {\n      player.setAudioQuality(value);\n    });\n\n    // Update qualities when audio track has changed\n    player.on(player.exports.PlayerEvent.AudioChanged, updateAudioQualities);\n    // Update qualities when source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, updateAudioQualities);\n    // Update qualities when the period within a source changes\n    player.on(player.exports.PlayerEvent.PeriodSwitched, updateAudioQualities);\n    // Update quality selection when quality is changed (from outside)\n    player.on(player.exports.PlayerEvent.AudioQualityChanged, selectCurrentAudioQuality);\n    if ((player.exports.PlayerEvent as any).AudioQualityAdded) {\n      // Update qualities when their availability changed\n      // TODO: remove any cast after next player release\n      player.on((player.exports.PlayerEvent as any).AudioQualityAdded, updateAudioQualities);\n      player.on((player.exports.PlayerEvent as any).AudioQualityRemoved, updateAudioQualities);\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(updateAudioQualities);\n  }\n}","import {ListBox} from './listbox';\nimport {UIInstanceManager} from '../uimanager';\nimport {AudioTrackSwitchHandler} from '../audiotrackutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A element that is similar to a select box where the user can select a subtitle\n */\nexport class AudioTrackListBox extends ListBox {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n    new AudioTrackSwitchHandler(player, this, uimanager);\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport {AudioTrackSwitchHandler} from '../audiotrackutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A select box providing a selection between available audio tracks (e.g. different languages).\n */\nexport class AudioTrackSelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-audiotrackselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new AudioTrackSwitchHandler(player, this, uimanager);\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {Component, ComponentConfig} from './component';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for the {@link BufferingOverlay} component.\n */\nexport interface BufferingOverlayConfig extends ContainerConfig {\n  /**\n   * Delay in milliseconds after which the buffering overlay will be displayed. Useful to bypass short stalls without\n   * displaying the overlay. Set to 0 to display the overlay instantly.\n   * Default: 1000ms (1 second)\n   */\n  showDelayMs?: number;\n}\n\n/**\n * Overlays the player and displays a buffering indicator.\n */\nexport class BufferingOverlay extends Container<BufferingOverlayConfig> {\n\n  private indicators: Component<ComponentConfig>[];\n\n  constructor(config: BufferingOverlayConfig = {}) {\n    super(config);\n\n    this.indicators = [\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),\n    ];\n\n    this.config = this.mergeConfig(config, <BufferingOverlayConfig>{\n      cssClass: 'ui-buffering-overlay',\n      hidden: true,\n      components: this.indicators,\n      showDelayMs: 1000,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    let overlayShowTimeout = new Timeout(config.showDelayMs, () => {\n      this.show();\n    });\n\n    let showOverlay = () => {\n      overlayShowTimeout.start();\n    };\n\n    let hideOverlay = () => {\n      overlayShowTimeout.clear();\n      this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.StallStarted, showOverlay);\n    player.on(player.exports.PlayerEvent.StallEnded, hideOverlay);\n    player.on(player.exports.PlayerEvent.Play, showOverlay);\n    player.on(player.exports.PlayerEvent.Playing, hideOverlay);\n    player.on(player.exports.PlayerEvent.Paused, hideOverlay);\n    player.on(player.exports.PlayerEvent.Seek, showOverlay);\n    player.on(player.exports.PlayerEvent.Seeked, hideOverlay);\n    player.on(player.exports.PlayerEvent.TimeShift, showOverlay);\n    player.on(player.exports.PlayerEvent.TimeShifted, hideOverlay);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, hideOverlay);\n\n    // Show overlay if player is already stalled at init\n    if (player.isStalled()) {\n      this.show();\n    }\n  }\n}\n","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {EventDispatcher, NoArgs, Event} from '../eventdispatcher';\nimport { LocalizableText , i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Button} component.\n */\nexport interface ButtonConfig extends ComponentConfig {\n  /**\n   * The text as string or localize callback on the button.\n   */\n  text?: LocalizableText;\n}\n\n/**\n * A simple clickable button.\n */\nexport class Button<Config extends ButtonConfig> extends Component<Config> {\n\n  private buttonEvents = {\n    onClick: new EventDispatcher<Button<Config>, NoArgs>(),\n  };\n\n  constructor(config: Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-button',\n      role: 'button',\n      tabIndex: 0,\n    } as Config, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    const buttonElementAttributes: { [name: string]: string } = {\n      'id': this.config.id,\n      'aria-label': i18n.performLocalization(this.config.ariaLabel || this.config.text),\n      'class': this.getCssClasses(),\n      'type' : 'button',\n      /**\n      * WCAG20 standard to display if a button is pressed or not\n      */\n      'aria-pressed': 'false',\n      'tabindex': this.config.tabIndex.toString(),\n    };\n\n    if (this.config.role != null) {\n      buttonElementAttributes['role'] = this.config.role;\n    }\n\n    // Create the button element with the text label\n    let buttonElement = new DOM('button', buttonElementAttributes).append(new DOM('span', {\n      'class': this.prefixCss('label'),\n    }).html(i18n.performLocalization(this.config.text)));\n\n    // Listen for the click event on the button element and trigger the corresponding event on the button component\n    buttonElement.on('click', () => {\n      this.onClickEvent();\n    });\n\n    return buttonElement;\n  }\n\n  /**\n   * Sets text on the label of the button.\n   * @param text the text to put into the label of the button\n   */\n  setText(text: LocalizableText): void {\n    this.getDomElement().find('.' + this.prefixCss('label')).html(i18n.performLocalization(text));\n  }\n\n  protected onClickEvent() {\n    this.buttonEvents.onClick.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the button is clicked.\n   * @returns {Event<Button<Config>, NoArgs>}\n   */\n  get onClick(): Event<Button<Config>, NoArgs> {\n    return this.buttonEvents.onClick.getEvent();\n  }\n}\n","import {ContainerConfig, Container} from './container';\nimport {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport { CastStartedEvent, CastWaitingForDeviceEvent, PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Overlays the player and displays the status of a Cast session.\n */\nexport class CastStatusOverlay extends Container<ContainerConfig> {\n\n  private statusLabel: Label<LabelConfig>;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.statusLabel = new Label<LabelConfig>({ cssClass: 'ui-cast-status-label' });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-cast-status-overlay',\n      components: [this.statusLabel],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    player.on(player.exports.PlayerEvent.CastWaitingForDevice,\n      (event: CastWaitingForDeviceEvent) => {\n        this.show();\n        // Get device name and update status text while connecting\n        let castDeviceName = event.castPayload.deviceName;\n        this.statusLabel.setText(i18n.getLocalizer('connectingTo', { castDeviceName }));\n      });\n    player.on(player.exports.PlayerEvent.CastStarted, (event: CastStartedEvent) => {\n      // Session is started or resumed\n      // For cases when a session is resumed, we do not receive the previous events and therefore show the status panel\n      // here too\n      this.show();\n      let castDeviceName = event.deviceName;\n      this.statusLabel.setText(i18n.getLocalizer('playingOn', { castDeviceName }));\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, (event) => {\n      // Cast session gone, hide the status panel\n      this.hide();\n    });\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles casting to a Cast receiver.\n */\nexport class CastToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-casttogglebutton',\n      text: i18n.getLocalizer('googleCast'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      if (player.isCastAvailable()) {\n        if (player.isCasting()) {\n          player.castStop();\n        } else {\n          player.castVideo();\n        }\n      } else {\n        if (console) {\n          console.log('Cast unavailable');\n        }\n      }\n    });\n\n    let castAvailableHander = () => {\n      if (player.isCastAvailable()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.CastAvailable, castAvailableHander);\n\n    // Toggle button 'on' state\n    player.on(player.exports.PlayerEvent.CastWaitingForDevice, () => {\n      this.on();\n    });\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      // When a session is resumed, there is no CastStart event, so we also need to toggle here for such cases\n      this.on();\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, () => {\n      this.off();\n    });\n\n    // Startup init\n    castAvailableHander(); // Hide button if Cast not available\n    if (player.isCasting()) {\n      this.on();\n    }\n  }\n}","import {UIContainer, UIContainerConfig} from './uicontainer';\nimport {UIInstanceManager} from '../uimanager';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * The base container for Cast receivers that contains all of the UI and takes care that the UI is shown on\n * certain playback events.\n */\nexport class CastUIContainer extends UIContainer {\n\n  private castUiHideTimeout: Timeout;\n\n  constructor(config: UIContainerConfig) {\n    super(config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    /*\n     * Show UI on Cast devices at certain playback events\n     *\n     * Since a Cast receiver does not have a direct HCI, we show the UI on certain playback events to give the user\n     * a chance to see on the screen what's going on, e.g. on play/pause or a seek the UI is shown and the user can\n     * see the current time and position on the seek bar.\n     * The UI is shown permanently while playback is paused, otherwise hides automatically after the configured\n     * hide delay time.\n     */\n\n    let isUiShown = false;\n\n    let hideUi = () => {\n      uimanager.onControlsHide.dispatch(this);\n      isUiShown = false;\n    };\n\n    this.castUiHideTimeout = new Timeout(config.hideDelay, hideUi);\n\n    let showUi = () => {\n      if (!isUiShown) {\n        uimanager.onControlsShow.dispatch(this);\n        isUiShown = true;\n      }\n    };\n\n    let showUiPermanently = () => {\n      showUi();\n      this.castUiHideTimeout.clear();\n    };\n\n    let showUiWithTimeout = () => {\n      showUi();\n      this.castUiHideTimeout.start();\n    };\n\n    let showUiAfterSeek = () => {\n      if (player.isPlaying()) {\n        showUiWithTimeout();\n      } else {\n        showUiPermanently();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.Play, showUiWithTimeout);\n    player.on(player.exports.PlayerEvent.Paused, showUiPermanently);\n    player.on(player.exports.PlayerEvent.Seek, showUiPermanently);\n    player.on(player.exports.PlayerEvent.Seeked, showUiAfterSeek);\n\n    uimanager.getConfig().events.onUpdated.subscribe(showUiWithTimeout);\n  }\n\n  release(): void {\n    super.release();\n    this.castUiHideTimeout.clear();\n  }\n}","import {Button, ButtonConfig} from './button';\n\n/**\n * Configuration interface for a {@link ClickOverlay}.\n */\nexport interface ClickOverlayConfig extends ButtonConfig {\n  /**\n   * The url to open when the overlay is clicked. Set to null to disable the click handler.\n   */\n  url?: string;\n}\n\n/**\n * A click overlay that opens an url in a new tab if clicked.\n */\nexport class ClickOverlay extends Button<ClickOverlayConfig> {\n\n  constructor(config: ClickOverlayConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-clickoverlay',\n      role: this.config.role,\n    }, <ClickOverlayConfig>this.config);\n  }\n\n  initialize(): void {\n    super.initialize();\n\n    this.setUrl((<ClickOverlayConfig>this.config).url);\n    let element = this.getDomElement();\n    element.on('click', () => {\n      if (element.data('url')) {\n        window.open(element.data('url'), '_blank');\n      }\n    });\n  }\n\n  /**\n   * Gets the URL that should be followed when the watermark is clicked.\n   * @returns {string} the watermark URL\n   */\n  getUrl(): string {\n    return this.getDomElement().data('url');\n  }\n\n  setUrl(url: string): void {\n    if (url === undefined || url == null) {\n      url = '';\n    }\n    this.getDomElement().data('url', url);\n  }\n}","import {ButtonConfig, Button} from './button';\nimport {UIInstanceManager} from '../uimanager';\nimport {Component, ComponentConfig} from './component';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link CloseButton}.\n */\nexport interface CloseButtonConfig extends ButtonConfig {\n  /**\n   * The component that should be closed when the button is clicked.\n   */\n  target: Component<ComponentConfig>;\n}\n\n/**\n * A button that closes (hides) a configured component.\n */\nexport class CloseButton extends Button<CloseButtonConfig> {\n\n  constructor(config: CloseButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-closebutton',\n      text: i18n.getLocalizer('close'),\n    } as CloseButtonConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    this.onClick.subscribe(() => {\n      config.target.hide();\n    });\n  }\n}","import {Guid} from '../guid';\nimport {DOM} from '../dom';\nimport {EventDispatcher, NoArgs, Event} from '../eventdispatcher';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n, LocalizableText } from '../localization/i18n';\n\n/**\n * Base configuration interface for a component.\n * Should be extended by components that want to add additional configuration options.\n */\nexport interface ComponentConfig {\n  /**\n   * The HTML tag name of the component.\n   * Default: 'div'\n   */\n  tag?: string;\n  /**\n   * The HTML ID of the component.\n   * Default: automatically generated with pattern 'ui-id-{guid}'.\n   */\n  id?: string;\n\n  /**\n   * A prefix to prepend all CSS classes with.\n   */\n  cssPrefix?: string;\n\n  /**\n   * The CSS classes of the component. This is usually the class from where the component takes its styling.\n   */\n  cssClass?: string; // 'class' is a reserved keyword, so we need to make the name more complicated\n\n  /**\n   * Additional CSS classes of the component.\n   */\n  cssClasses?: string[];\n\n  /**\n   * Specifies if the component should be hidden at startup.\n   * Default: false\n   */\n  hidden?: boolean;\n\n  /**\n   * Specifies if the component is enabled (interactive) or not.\n   * Default: false\n   */\n  disabled?: boolean;\n\n  /**\n   * Specifies the component role for WCAG20 standard\n   */\n  role?: string;\n\n  /**\n   * WCAG20 requirement for screen reader navigation\n   */\n  tabIndex?: number;\n\n  /**\n   * WCAG20 standard for defining info about the component (usually the name)\n   */\n  ariaLabel?: LocalizableText;\n}\n\nexport interface ComponentHoverChangedEventArgs extends NoArgs {\n  /**\n   * True is the component is hovered, else false.\n   */\n  hovered: boolean;\n}\n\n/**\n * The base class of the UI framework.\n * Each component must extend this class and optionally the config interface.\n */\nexport class Component<Config extends ComponentConfig> {\n\n  /**\n   * The classname that is attached to the element when it is in the hidden state.\n   * @type {string}\n   */\n  private static readonly CLASS_HIDDEN = 'hidden';\n\n  /**\n   * The classname that is attached to the element when it is in the disabled state.\n   * @type {string}\n   */\n  private static readonly CLASS_DISABLED = 'disabled';\n\n  /**\n   * Configuration object of this component.\n   */\n  protected config: Config;\n\n  /**\n   * The component's DOM element.\n   */\n  private element: DOM;\n\n  /**\n   * Flag that keeps track of the hidden state.\n   */\n  private hidden: boolean;\n\n  /**\n   * Flat that keeps track of the disabled state.\n   */\n  private disabled: boolean;\n\n  /**\n   * Flag that keeps track of the hover state.\n   */\n  private hovered: boolean;\n\n  /**\n   * The list of events that this component offers. These events should always be private and only directly\n   * accessed from within the implementing component.\n   *\n   * Because TypeScript does not support private properties with the same name on different class hierarchy levels\n   * (i.e. superclass and subclass cannot contain a private property with the same name), the default naming\n   * convention for the event list of a component that should be followed by subclasses is the concatenation of the\n   * camel-cased class name + 'Events' (e.g. SubClass extends Component => subClassEvents).\n   * See {@link #componentEvents} for an example.\n   *\n   * Event properties should be named in camel case with an 'on' prefix and in the present tense. Async events may\n   * have a start event (when the operation starts) in the present tense, and must have an end event (when the\n   * operation ends) in the past tense (or present tense in special cases (e.g. onStart/onStarted or onPlay/onPlaying).\n   * See {@link #componentEvents#onShow} for an example.\n   *\n   * Each event should be accompanied with a protected method named by the convention eventName + 'Event'\n   * (e.g. onStartEvent), that actually triggers the event by calling {@link EventDispatcher#dispatch dispatch} and\n   * passing a reference to the component as first parameter. Components should always trigger their events with these\n   * methods. Implementing this pattern gives subclasses means to directly listen to the events by overriding the\n   * method (and saving the overhead of passing a handler to the event dispatcher) and more importantly to trigger\n   * these events without having access to the private event list.\n   * See {@link #onShow} for an example.\n   *\n   * To provide external code the possibility to listen to this component's events (subscribe, unsubscribe, etc.),\n   * each event should also be accompanied by a public getter function with the same name as the event's property,\n   * that returns the {@link Event} obtained from the event dispatcher by calling {@link EventDispatcher#getEvent}.\n   * See {@link #onShow} for an example.\n   *\n   * Full example for an event representing an example action in a example component:\n   *\n   * <code>\n   * // Define an example component class with an example event\n   * class ExampleComponent extends Component<ComponentConfig> {\n     *\n     *     private exampleComponentEvents = {\n     *         onExampleAction: new EventDispatcher<ExampleComponent, NoArgs>()\n     *     }\n     *\n     *     // constructor and other stuff...\n     *\n     *     protected onExampleActionEvent() {\n     *        this.exampleComponentEvents.onExampleAction.dispatch(this);\n     *    }\n     *\n     *    get onExampleAction(): Event<ExampleComponent, NoArgs> {\n     *        return this.exampleComponentEvents.onExampleAction.getEvent();\n     *    }\n     * }\n   *\n   * // Create an instance of the component somewhere\n   * var exampleComponentInstance = new ExampleComponent();\n   *\n   * // Subscribe to the example event on the component\n   * exampleComponentInstance.onExampleAction.subscribe(function (sender: ExampleComponent) {\n     *     console.log('onExampleAction of ' + sender + ' has fired!');\n     * });\n   * </code>\n   */\n  private componentEvents = {\n    onShow: new EventDispatcher<Component<Config>, NoArgs>(),\n    onHide: new EventDispatcher<Component<Config>, NoArgs>(),\n    onHoverChanged: new EventDispatcher<Component<Config>, ComponentHoverChangedEventArgs>(),\n    onEnabled: new EventDispatcher<Component<Config>, NoArgs>(),\n    onDisabled: new EventDispatcher<Component<Config>, NoArgs>(),\n  };\n\n  /**\n   * Constructs a component with an optionally supplied config. All subclasses must call the constructor of their\n   * superclass and then merge their configuration into the component's configuration.\n   * @param config the configuration for the component\n   */\n  constructor(config: ComponentConfig = {}) {\n    // Create the configuration for this component\n    this.config = <Config>this.mergeConfig(config, {\n      tag: 'div',\n      id: '{{PREFIX}}-id-' + Guid.next(),\n      cssPrefix: '{{PREFIX}}',\n      cssClass: 'ui-component',\n      cssClasses: [],\n      hidden: false,\n      disabled: false,\n    }, {});\n  }\n\n  /**\n   * Initializes the component, e.g. by applying config settings.\n   * This method must not be called from outside the UI framework.\n   *\n   * This method is automatically called by the {@link UIInstanceManager}. If the component is an inner component of\n   * some component, and thus encapsulated abd managed internally and never directly exposed to the UIManager,\n   * this method must be called from the managing component's {@link #initialize} method.\n   */\n  initialize(): void {\n    this.hidden = this.config.hidden;\n    this.disabled = this.config.disabled;\n\n    // Hide the component at initialization if it is configured to be hidden\n    if (this.isHidden()) {\n      this.hidden = false; // Set flag to false for the following hide() call to work (hide() checks the flag)\n      this.hide();\n    }\n\n    // Disable the component at initialization if it is configured to be disabled\n    if (this.isDisabled()) {\n      this.disabled = false; // Set flag to false for the following disable() call to work (disable() checks the flag)\n      this.disable();\n    }\n  }\n\n  /**\n   * Configures the component for the supplied Player and UIInstanceManager. This is the place where all the magic\n   * happens, where components typically subscribe and react to events (on their DOM element, the Player, or the\n   * UIInstanceManager), and basically everything that makes them interactive.\n   * This method is called only once, when the UIManager initializes the UI.\n   *\n   * Subclasses usually overwrite this method to add their own functionality.\n   *\n   * @param player the player which this component controls\n   * @param uimanager the UIInstanceManager that manages this component\n   */\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    this.onShow.subscribe(() => {\n      uimanager.onComponentShow.dispatch(this);\n    });\n    this.onHide.subscribe(() => {\n      uimanager.onComponentHide.dispatch(this);\n    });\n\n    // Track the hovered state of the element\n    this.getDomElement().on('mouseenter', () => {\n      this.onHoverChangedEvent(true);\n    });\n    this.getDomElement().on('mouseleave', () => {\n      this.onHoverChangedEvent(false);\n    });\n  }\n\n  /**\n   * Releases all resources and dependencies that the component holds. Player, DOM, and UIManager events are\n   * automatically removed during release and do not explicitly need to be removed here.\n   * This method is called by the UIManager when it releases the UI.\n   *\n   * Subclasses that need to release resources should override this method and call super.release().\n   */\n  release(): void {\n    // Nothing to do here, override where necessary\n  }\n\n  /**\n   * Generate the DOM element for this component.\n   *\n   * Subclasses usually overwrite this method to extend or replace the DOM element with their own design.\n   */\n  protected toDomElement(): DOM {\n    let element = new DOM(this.config.tag, {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'role': this.config.role,\n    });\n\n    return element;\n  }\n\n  /**\n   * Returns the DOM element of this component. Creates the DOM element if it does not yet exist.\n   *\n   * Should not be overwritten by subclasses.\n   *\n   * @returns {DOM}\n   */\n  getDomElement(): DOM {\n    if (!this.element) {\n      this.element = this.toDomElement();\n    }\n\n    return this.element;\n  }\n\n  /**\n   * Checks if this component has a DOM element.\n   */\n  hasDomElement(): boolean {\n    return Boolean(this.element);\n  }\n\n  setAriaLabel(label: LocalizableText): void {\n    this.setAriaAttr('label', i18n.performLocalization(label));\n  }\n\n  setAriaAttr(name: string, value: string) {\n    this.getDomElement().attr(`aria-${name}`, value);\n  }\n\n  /**\n   * Merges a configuration with a default configuration and a base configuration from the superclass.\n   *\n   * @param config the configuration settings for the components, as usually passed to the constructor\n   * @param defaults a default configuration for settings that are not passed with the configuration\n   * @param base configuration inherited from a superclass\n   * @returns {Config}\n   */\n  protected mergeConfig<Config>(config: Config, defaults: Config, base: Config): Config {\n    // Extend default config with supplied config\n    let merged = Object.assign({}, base, defaults, config);\n\n    // Return the extended config\n    return merged;\n  }\n\n  /**\n   * Helper method that returns a string of all CSS classes of the component.\n   *\n   * @returns {string}\n   */\n  protected getCssClasses(): string {\n    // Merge all CSS classes into single array\n    let flattenedArray = [this.config.cssClass].concat(this.config.cssClasses);\n    // Prefix classes\n    flattenedArray = flattenedArray.map((css) => {\n      return this.prefixCss(css);\n    });\n    // Join array values into a string\n    let flattenedString = flattenedArray.join(' ');\n    // Return trimmed string to prevent whitespace at the end from the join operation\n    return flattenedString.trim();\n  }\n\n  protected prefixCss(cssClassOrId: string): string {\n    return this.config.cssPrefix + '-' + cssClassOrId;\n  }\n\n  /**\n   * Returns the configuration object of the component.\n   * @returns {Config}\n   */\n  public getConfig(): Config {\n    return this.config;\n  }\n\n  /**\n   * Hides the component if shown.\n   * This method basically transfers the component into the hidden state. Actual hiding is done via CSS.\n   */\n  hide() {\n    if (!this.hidden) {\n      this.hidden = true;\n      this.getDomElement().addClass(this.prefixCss(Component.CLASS_HIDDEN));\n      this.onHideEvent();\n    }\n  }\n\n  /**\n   * Shows the component if hidden.\n   */\n  show() {\n    if (this.hidden) {\n      this.getDomElement().removeClass(this.prefixCss(Component.CLASS_HIDDEN));\n      this.hidden = false;\n      this.onShowEvent();\n    }\n  }\n\n  /**\n   * Determines if the component is hidden.\n   * @returns {boolean} true if the component is hidden, else false\n   */\n  isHidden(): boolean {\n    return this.hidden;\n  }\n\n  /**\n   * Determines if the component is shown.\n   * @returns {boolean} true if the component is visible, else false\n   */\n  isShown(): boolean {\n    return !this.isHidden();\n  }\n\n  /**\n   * Toggles the hidden state by hiding the component if it is shown, or showing it if hidden.\n   */\n  toggleHidden() {\n    if (this.isHidden()) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Disables the component.\n   * This method basically transfers the component into the disabled state. Actual disabling is done via CSS or child\n   * components. (e.g. Button needs to unsubscribe click listeners)\n   */\n  disable(): void {\n    if (!this.disabled) {\n      this.disabled = true;\n      this.getDomElement().addClass(this.prefixCss(Component.CLASS_DISABLED));\n      this.onDisabledEvent();\n    }\n  }\n\n  /**\n   * Enables the component.\n   * This method basically transfers the component into the enabled state. Actual enabling is done via CSS or child\n   * components. (e.g. Button needs to subscribe click listeners)\n   */\n  enable(): void {\n    if (this.disabled) {\n      this.getDomElement().removeClass(this.prefixCss(Component.CLASS_DISABLED));\n      this.disabled = false;\n      this.onEnabledEvent();\n    }\n  }\n\n  /**\n   * Determines if the component is disabled.\n   * @returns {boolean} true if the component is disabled, else false\n   */\n  isDisabled(): boolean {\n    return this.disabled;\n  }\n\n  /**\n   * Determines if the component is enabled.\n   * @returns {boolean} true if the component is enabled, else false\n   */\n  isEnabled(): boolean {\n    return !this.isDisabled();\n  }\n\n  /**\n   * Determines if the component is currently hovered.\n   * @returns {boolean} true if the component is hovered, else false\n   */\n  isHovered(): boolean {\n    return this.hovered;\n  }\n\n  /**\n   * Fires the onShow event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onShowEvent(): void {\n    this.componentEvents.onShow.dispatch(this);\n  }\n\n  /**\n   * Fires the onHide event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onHideEvent(): void {\n    this.componentEvents.onHide.dispatch(this);\n  }\n\n  /**\n   * Fires the onEnabled event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onEnabledEvent(): void {\n    this.componentEvents.onEnabled.dispatch(this);\n  }\n\n  /**\n   * Fires the onDisabled event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onDisabledEvent(): void {\n    this.componentEvents.onDisabled.dispatch(this);\n  }\n\n  /**\n   * Fires the onHoverChanged event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onHoverChangedEvent(hovered: boolean): void {\n    this.hovered = hovered;\n    this.componentEvents.onHoverChanged.dispatch(this, { hovered: hovered });\n  }\n\n  /**\n   * Gets the event that is fired when the component is showing.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onShow(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onShow.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is hiding.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onHide(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onHide.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is enabling.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onEnabled(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onEnabled.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is disabling.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onDisabled(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onDisabled.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component's hover-state is changing.\n   * @returns {Event<Component<Config>, ComponentHoverChangedEventArgs>}\n   */\n  get onHoverChanged(): Event<Component<Config>, ComponentHoverChangedEventArgs> {\n    return this.componentEvents.onHoverChanged.getEvent();\n  }\n}","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {ArrayUtils} from '../arrayutils';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Container}.\n */\nexport interface ContainerConfig extends ComponentConfig {\n  /**\n   * Child components of the container.\n   */\n  components?: Component<ComponentConfig>[];\n}\n\n/**\n * A container component that can contain a collection of child components.\n * Components can be added at construction time through the {@link ContainerConfig#components} setting, or later\n * through the {@link Container#addComponent} method. The UIManager automatically takes care of all components, i.e. it\n * initializes and configures them automatically.\n *\n * In the DOM, the container consists of an outer <div> (that can be configured by the config) and an inner wrapper\n * <div> that contains the components. This double-<div>-structure is often required to achieve many advanced effects\n * in CSS and/or JS, e.g. animations and certain formatting with absolute positioning.\n *\n * DOM example:\n * <code>\n *     <div class='ui-container'>\n *         <div class='container-wrapper'>\n *             ... child components ...\n *         </div>\n *     </div>\n * </code>\n */\nexport class Container<Config extends ContainerConfig> extends Component<Config> {\n\n  /**\n   * A reference to the inner element that contains the components of the container.\n   */\n  private innerContainerElement: DOM;\n  private componentsToAdd: Component<ComponentConfig>[];\n  private componentsToRemove: Component<ComponentConfig>[];\n\n  constructor(config: Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-container',\n      components: [],\n    } as Config, this.config);\n\n    this.componentsToAdd = [];\n    this.componentsToRemove = [];\n  }\n\n  /**\n   * Adds a child component to the container.\n   * @param component the component to add\n   */\n  addComponent(component: Component<ComponentConfig>) {\n    this.config.components.push(component);\n    this.componentsToAdd.push(component);\n  }\n\n  /**\n   * Removes a child component from the container.\n   * @param component the component to remove\n   * @returns {boolean} true if the component has been removed, false if it is not contained in this container\n   */\n  removeComponent(component: Component<ComponentConfig>): boolean {\n    if (ArrayUtils.remove(this.config.components, component) != null) {\n      this.componentsToRemove.push(component);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Gets an array of all child components in this container.\n   * @returns {Component<ComponentConfig>[]}\n   */\n  getComponents(): Component<ComponentConfig>[] {\n    return this.config.components;\n  }\n\n  /**\n   * Removes all child components from the container.\n   */\n  removeComponents(): void {\n    for (let component of this.getComponents().slice()) {\n      this.removeComponent(component);\n    }\n  }\n\n  /**\n   * Updates the DOM of the container with the current components.\n   */\n  protected updateComponents(): void {\n    /* We cannot just clear the container to remove all elements and then re-add those that should stay, because\n     * IE looses the innerHTML of unattached elements, leading to empty elements within the container (e.g. missing\n     * subtitle text in SubtitleLabel).\n     * Instead, we keep a list of elements to add and remove, leaving remaining elements alone. By keeping them in\n     * the DOM, their content gets preserved in all browsers.\n     */\n    let component;\n\n    while (component = this.componentsToRemove.shift()) {\n      component.getDomElement().remove();\n    }\n\n    while (component = this.componentsToAdd.shift()) {\n      this.innerContainerElement.append(component.getDomElement());\n    }\n  }\n\n  protected toDomElement(): DOM {\n    // Create the container element (the outer <div>)\n    let containerElement = new DOM(this.config.tag, {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'role': this.config.role,\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\n    });\n\n    // Create the inner container element (the inner <div>) that will contain the components\n    let innerContainer = new DOM(this.config.tag, {\n      'class': this.prefixCss('container-wrapper'),\n    });\n    this.innerContainerElement = innerContainer;\n\n    for (let initialComponent of this.config.components) {\n      this.componentsToAdd.push(initialComponent);\n    }\n    this.updateComponents();\n\n    containerElement.append(innerContainer);\n\n    return containerElement;\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {UIUtils} from '../uiutils';\nimport {Spacer} from './spacer';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\nimport { BrowserUtils } from '../browserutils';\nimport {Component, ComponentConfig} from './component';\nimport {SettingsPanel} from './settingspanel';\n\n/**\n * Configuration interface for the {@link ControlBar}.\n */\nexport interface ControlBarConfig extends ContainerConfig {\n  // nothing yet\n}\n\n/**\n * A container for main player control components, e.g. play toggle button, seek bar, volume control, fullscreen toggle\n * button.\n */\nexport class ControlBar extends Container<ControlBarConfig> {\n\n  constructor(config: ControlBarConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-controlbar',\n      hidden: true,\n      role: 'region',\n      ariaLabel: i18n.getLocalizer('controlBar'),\n    }, <ControlBarConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    // Counts how many components are hovered and block hiding of the control bar\n    let hoverStackCount = 0;\n    let isSettingsPanelShown = false;\n\n    // only enabling this for non-mobile platforms without touch input. enabling this\n    // for touch devices causes the UI to not disappear after hideDelay seconds.\n    // Instead, it will stay visible until another manual interaction is performed.\n    if (uimanager.getConfig().disableAutoHideWhenHovered && !BrowserUtils.isMobile) {\n      // Track hover status of child components\n      UIUtils.traverseTree(this, (component) => {\n        // Do not track hover status of child containers or spacers, only of 'real' controls\n        if (component instanceof Container || component instanceof Spacer) {\n          return;\n        }\n\n        // Subscribe hover event and keep a count of the number of hovered children\n        component.onHoverChanged.subscribe((_, args) => {\n          if (args.hovered) {\n            hoverStackCount++;\n          } else {\n            hoverStackCount--;\n          }\n        });\n      });\n    }\n\n    if (BrowserUtils.isMobile) {\n      uimanager.onComponentShow.subscribe((component: Component<ComponentConfig>) => {\n        if (component instanceof SettingsPanel) {\n          isSettingsPanelShown = true;\n        }\n      });\n\n      uimanager.onComponentHide.subscribe((component: Component<ComponentConfig>) => {\n        if (component instanceof SettingsPanel) {\n          isSettingsPanelShown = false;\n        }\n      });\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      this.show();\n    });\n\n    uimanager.onPreviewControlsHide.subscribe((sender, args) => {\n      // Cancel the hide event if hovered child components block hiding or if the settings panel is active on mobile.\n      args.cancel = args.cancel || (hoverStackCount > 0 || isSettingsPanelShown);\n    });\n\n    uimanager.onControlsHide.subscribe(() => {\n      this.hide();\n    });\n  }\n}\n","import {ContainerConfig, Container} from './container';\nimport {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {TvNoiseCanvas} from './tvnoisecanvas';\nimport { ErrorUtils } from '../errorutils';\nimport { ErrorEvent, PlayerAPI, PlayerEventBase } from 'bitmovin-player';\nimport {\n  isMobileV3PlayerAPI,\n  MobileV3PlayerAPI, MobileV3PlayerErrorEvent, MobileV3PlayerEvent, MobileV3SourceErrorEvent,\n} from '../mobilev3playerapi';\n\nexport interface ErrorMessageTranslator {\n  (error: ErrorEvent | MobileV3PlayerErrorEvent): string;\n}\n\nexport interface ErrorMessageMap {\n  [code: number]: string | ErrorMessageTranslator;\n}\n\n/**\n * Configuration interface for the {@link ErrorMessageOverlay}.\n */\nexport interface ErrorMessageOverlayConfig extends ContainerConfig {\n  /**\n   * Allows overwriting of the error messages displayed in the overlay for customization and localization.\n   * This is either a function that receives any {@link ErrorEvent} as parameter and translates error messages,\n   * or a map of error codes that overwrites specific error messages with a plain string or a function that\n   * receives the {@link ErrorEvent} as parameter and returns a customized string.\n   * The translation functions can be used to extract data (e.g. parameters) from the original error message.\n   *\n   * Example 1 (catch-all translation function):\n   * <code>\n   * errorMessageOverlayConfig = {\n   *   messages: function(error) {\n   *     switch (error.code) {\n   *       // Overwrite error 1000 'Unknown error'\n   *       case 1000:\n   *         return 'Houston, we have a problem'\n   *\n   *       // Transform error 1201 'The downloaded manifest is invalid' to uppercase\n   *       case 1201:\n   *         var description = ErrorUtils.defaultErrorMessages[error.code];\n   *         return description.toUpperCase();\n   *\n   *       // Customize error 1207 'The manifest could not be loaded'\n   *       case 1207:\n   *         var statusCode = error.data.statusCode;\n   *         return 'Manifest loading failed with HTTP error ' + statusCode;\n   *     }\n   *     // Return unmodified error message for all other errors\n   *     return error.message;\n   *   }\n   * };\n   * </code>\n   *\n   * Example 2 (translating specific errors):\n   * <code>\n   * errorMessageOverlayConfig = {\n   *   messages: {\n   *     // Overwrite error 1000 'Unknown error'\n   *     1000: 'Houston, we have a problem',\n   *\n   *     // Transform error 1201 'Unsupported manifest format' to uppercase\n   *     1201: function(error) {\n   *       var description = ErrorUtils.defaultErrorMessages[error.code];\n   *       return description.toUpperCase();\n   *     },\n   *\n   *     // Customize error 1207 'The manifest could not be loaded'\n   *     1207: function(error) {\n   *       var statusCode = error.data.statusCode;\n   *       return 'Manifest loading failed with HTTP error ' + statusCode;\n   *     }\n   *   }\n   * };\n   * </code>\n   */\n  messages?: ErrorMessageMap | ErrorMessageTranslator;\n}\n\n/**\n * Overlays the player and displays error messages.\n */\nexport class ErrorMessageOverlay extends Container<ErrorMessageOverlayConfig> {\n\n  private errorLabel: Label<LabelConfig>;\n  private tvNoiseBackground: TvNoiseCanvas;\n\n  constructor(config: ErrorMessageOverlayConfig = {}) {\n    super(config);\n\n    this.errorLabel = new Label<LabelConfig>({ cssClass: 'ui-errormessage-label' });\n    this.tvNoiseBackground = new TvNoiseCanvas();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-errormessage-overlay',\n      components: [this.tvNoiseBackground, this.errorLabel],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI | MobileV3PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    const handleErrorMessage = (\n      event: ErrorEvent | MobileV3SourceErrorEvent | MobileV3PlayerErrorEvent,\n      message: string,\n    ) => {\n      const customizedMessage = customizeErrorMessage(uimanager.getConfig().errorMessages || config.messages, event);\n      if (customizedMessage) {\n        message = customizedMessage;\n      }\n\n      this.display(message);\n    };\n\n    if (isMobileV3PlayerAPI(player)) {\n      const errorEventHandler = (event: MobileV3SourceErrorEvent | MobileV3PlayerErrorEvent) => {\n        const message = ErrorUtils.defaultMobileV3ErrorMessageTranslator(event);\n        handleErrorMessage(event, message);\n      };\n\n      player.on(MobileV3PlayerEvent.PlayerError, errorEventHandler);\n      player.on(MobileV3PlayerEvent.SourceError, errorEventHandler);\n    } else {\n      player.on(player.exports.PlayerEvent.Error, (event: ErrorEvent) => {\n        let message = ErrorUtils.defaultWebErrorMessageTranslator(event);\n        handleErrorMessage(event, message);\n      });\n    }\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, (event: PlayerEventBase) => {\n      if (this.isShown()) {\n        this.tvNoiseBackground.stop();\n        this.hide();\n      }\n    });\n  }\n\n  display(errorMessage: string): void {\n    this.errorLabel.setText(errorMessage);\n    this.tvNoiseBackground.start();\n    this.show();\n  }\n\n  release(): void {\n    super.release();\n\n    // Canvas rendering must be explicitly stopped, else it just continues forever and hogs resources\n    this.tvNoiseBackground.stop();\n  }\n}\n\nfunction customizeErrorMessage(\n  errorMessages: ErrorMessageTranslator | ErrorMessageMap,\n  event: ErrorEvent | MobileV3PlayerErrorEvent | MobileV3SourceErrorEvent,\n): string | undefined {\n  if (!errorMessages) {\n    return undefined;\n  }\n\n  // Process message vocabularies\n  if (typeof errorMessages === 'function') {\n    // Translation function for all errors\n    return errorMessages(event);\n  }\n  if (errorMessages[event.code]) {\n    // It's not a translation function, so it must be a map of strings or translation functions\n    const customMessage = errorMessages[event.code];\n\n    return typeof customMessage === 'string' ? customMessage : customMessage(event);\n  }\n}\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles the player between windowed and fullscreen view.\n */\nexport class FullscreenToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-fullscreentogglebutton',\n      text: i18n.getLocalizer('fullscreen'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const isFullScreenAvailable = () => {\n      return player.isViewModeAvailable(player.exports.ViewMode.Fullscreen);\n    };\n\n    const fullscreenStateHandler = () => {\n      player.getViewMode() === player.exports.ViewMode.Fullscreen ? this.on() : this.off();\n    };\n\n    const fullscreenAvailabilityChangedHandler = () => {\n      isFullScreenAvailable() ? this.show() : this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.ViewModeChanged, fullscreenStateHandler);\n\n    // Available only in our native SDKs for now\n    if ((player.exports.PlayerEvent as any).ViewModeAvailabilityChanged) {\n      player.on(\n        (player.exports.PlayerEvent as any).ViewModeAvailabilityChanged,\n        fullscreenAvailabilityChangedHandler,\n      );\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(fullscreenAvailabilityChangedHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isFullScreenAvailable()) {\n        if (console) {\n          console.log('Fullscreen unavailable');\n        }\n        return;\n      }\n\n      const targetViewMode =\n        player.getViewMode() === player.exports.ViewMode.Fullscreen\n          ? player.exports.ViewMode.Inline\n          : player.exports.ViewMode.Fullscreen;\n\n      player.setViewMode(targetViewMode);\n    });\n\n    // Startup init\n    fullscreenAvailabilityChangedHandler();\n    fullscreenStateHandler();\n  }\n}\n","import {PlaybackToggleButton, PlaybackToggleButtonConfig} from './playbacktogglebutton';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI, PlayerEventBase, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that overlays the video and toggles between playback and pause.\n */\nexport class HugePlaybackToggleButton extends PlaybackToggleButton {\n\n  constructor(config: PlaybackToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-hugeplaybacktogglebutton',\n      text: i18n.getLocalizer('playPause'),\n      role: 'button',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // Update button state through API events\n    super.configure(player, uimanager, false);\n\n    // Set enterFullscreenOnInitialPlayback if set in the uimanager config\n    if (typeof uimanager.getConfig().enterFullscreenOnInitialPlayback === 'boolean') {\n      this.config.enterFullscreenOnInitialPlayback = uimanager.getConfig().enterFullscreenOnInitialPlayback;\n    }\n\n    let togglePlayback = () => {\n      if (player.isPlaying() || this.isPlayInitiated) {\n        player.pause('ui');\n      } else {\n        player.play('ui');\n      }\n    };\n\n    let toggleFullscreen = () => {\n      if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n        player.setViewMode(player.exports.ViewMode.Inline);\n      } else {\n        player.setViewMode(player.exports.ViewMode.Fullscreen);\n      }\n    };\n\n    let firstPlay = true;\n    let clickTime = 0;\n    let doubleClickTime = 0;\n\n    /*\n     * YouTube-style toggle button handling\n     *\n     * The goal is to prevent a short pause or playback interval between a click, that toggles playback, and a\n     * double click, that toggles fullscreen. In this naive approach, the first click would e.g. start playback,\n     * the second click would be detected as double click and toggle to fullscreen, and as second normal click stop\n     * playback, which results is a short playback interval with max length of the double click detection\n     * period (usually 500ms).\n     *\n     * To solve this issue, we defer handling of the first click for 200ms, which is almost unnoticeable to the user,\n     * and just toggle playback if no second click (double click) has been registered during this period. If a double\n     * click is registered, we just toggle the fullscreen. In the first 200ms, undesired playback changes thus cannot\n     * happen. If a double click is registered within 500ms, we undo the playback change and switch fullscreen mode.\n     * In the end, this method basically introduces a 200ms observing interval in which playback changes are prevented\n     * if a double click happens.\n     */\n    this.onClick.subscribe(() => {\n      // Directly start playback on first click of the button.\n      // This is a required workaround for mobile browsers where video playback needs to be triggered directly\n      // by the user. A deferred playback start through the timeout below is not considered as user action and\n      // therefore ignored by mobile browsers.\n      if (firstPlay) {\n        // Try to start playback. Then we wait for Play and only when it arrives, we disable the firstPlay flag.\n        // If we disable the flag here, onClick was triggered programmatically instead of by a user interaction, and\n        // playback is blocked (e.g. on mobile devices due to the programmatic play() call), we loose the chance to\n        // ever start playback through a user interaction again with this button.\n        togglePlayback();\n\n        if (this.config.enterFullscreenOnInitialPlayback) {\n          player.setViewMode(player.exports.ViewMode.Fullscreen);\n        }\n\n        return;\n      }\n\n      let now = Date.now();\n\n      if (now - clickTime < 200) {\n        // We have a double click inside the 200ms interval, just toggle fullscreen mode\n        toggleFullscreen();\n        doubleClickTime = now;\n        return;\n      } else if (now - clickTime < 500) {\n        // We have a double click inside the 500ms interval, undo playback toggle and toggle fullscreen mode\n        toggleFullscreen();\n        togglePlayback();\n        doubleClickTime = now;\n        return;\n      }\n\n      clickTime = now;\n\n      setTimeout(() => {\n        if (Date.now() - doubleClickTime > 200) {\n          // No double click detected, so we toggle playback and wait what happens next\n          togglePlayback();\n        }\n      }, 200);\n    });\n\n    player.on(player.exports.PlayerEvent.Play, () => {\n      // Playback has really started, we can disable the flag to switch to normal toggle button handling\n      firstPlay = false;\n    });\n\n    player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n      if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n        // if playback could not be started, reset the first play flag as we need the user interaction to start\n        firstPlay = true;\n      }\n    });\n\n    const suppressPlayButtonTransitionAnimation = () => {\n      // Disable the current animation\n      this.setTransitionAnimationsEnabled(false);\n\n      // Enable the transition animations for the next state change\n      this.onToggle.subscribeOnce(() => {\n        this.setTransitionAnimationsEnabled(true);\n      });\n    };\n\n    // Hide the play button animation when the UI is loaded (it should only be animated on state changes)\n    suppressPlayButtonTransitionAnimation();\n\n    const isAutoplayEnabled = player.getConfig().playback && Boolean(player.getConfig().playback.autoplay);\n    // We only know if an autoplay attempt is upcoming if the player is not yet ready. It the player is already ready,\n    // the attempt might be upcoming or might have already happened, but we don't have to handle that because we can\n    // simply rely on isPlaying and the play state events.\n    const isAutoplayUpcoming = !player.getSource() && isAutoplayEnabled;\n\n    // Hide the play button when the player is already playing or autoplay is upcoming\n    if (player.isPlaying() || isAutoplayUpcoming) {\n      // Hide the play button (switch to playing state)\n      this.on();\n      // Disable the animation of the playing state switch\n      suppressPlayButtonTransitionAnimation();\n\n      // Show the play button without an animation if a play attempt is blocked\n      player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n        if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n          suppressPlayButtonTransitionAnimation();\n        }\n      });\n    }\n  }\n\n  protected toDomElement(): DOM {\n    let buttonElement = super.toDomElement();\n\n    // Add child that contains the play button image\n    // Setting the image directly on the button does not work together with scaling animations, because the button\n    // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined\n    // to the size if the image, it can scale inside the player without overshooting.\n    buttonElement.append(new DOM('div', {\n      'class': this.prefixCss('image'),\n    }));\n\n    return buttonElement;\n  }\n\n  /**\n   * Enables or disables the play state transition animations of the play button image. Can be used to suppress\n   * animations.\n   * @param {boolean} enabled true to enable the animations (default), false to disable them\n   */\n  protected setTransitionAnimationsEnabled(enabled: boolean): void {\n    const noTransitionAnimationsClass = this.prefixCss('no-transition-animations');\n\n    if (enabled) {\n      this.getDomElement().removeClass(noTransitionAnimationsClass);\n    } else if (!this.getDomElement().hasClass(noTransitionAnimationsClass)) {\n      this.getDomElement().addClass(noTransitionAnimationsClass);\n    }\n  }\n}\n","import {ButtonConfig, Button} from './button';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button to play/replay a video.\n */\nexport class HugeReplayButton extends Button<ButtonConfig> {\n\n  constructor(config: ButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-hugereplaybutton',\n      text: i18n.getLocalizer('replay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      player.play('ui');\n    });\n  }\n\n  protected toDomElement(): DOM {\n    let buttonElement = super.toDomElement();\n\n    // Add child that contains the play button image\n    // Setting the image directly on the button does not work together with scaling animations, because the button\n    // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined\n    // to the size if the image, it can scale inside the player without overshooting.\n    buttonElement.append(new DOM('div', {\n      'class': this.prefixCss('image'),\n    }));\n\n    return buttonElement;\n  }\n}","import {ListSelector, ListSelectorConfig} from './listselector';\nimport {DOM} from '../dom';\nimport { i18n } from '../localization/i18n';\n\nexport class ItemSelectionList extends ListSelector<ListSelectorConfig> {\n\n  private static readonly CLASS_SELECTED = 'selected';\n\n  private listElement: DOM;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      tag: 'ul',\n      cssClass: 'ui-itemselectionlist',\n    }, this.config);\n  }\n\n  protected isActive(): boolean {\n    return this.items.length > 1;\n  }\n\n  protected toDomElement(): DOM {\n    let listElement = new DOM('ul', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    });\n\n    this.listElement = listElement;\n    this.updateDomItems();\n\n    return listElement;\n  }\n\n  protected updateDomItems(selectedValue: string = null) {\n    // Delete all children\n    this.listElement.empty();\n\n    let selectedListItem: DOM = null;\n\n    const selectItem = (listItem: DOM) => {\n      listItem.addClass(this.prefixCss(ItemSelectionList.CLASS_SELECTED));\n    };\n\n    const deselectItem = (listItem: DOM) => {\n      listItem.removeClass(this.prefixCss(ItemSelectionList.CLASS_SELECTED));\n    };\n\n    for (let item of this.items) {\n      let listItem = new DOM('li', {\n        'type': 'li',\n        'class': this.prefixCss('ui-selectionlistitem'),\n      }).append(new DOM('a', {\n      }).html(i18n.performLocalization(item.label)));\n\n      if (!selectedListItem) {\n        if (selectedValue == null) { // If there is no pre-selected value, select the first one\n          selectedListItem = listItem;\n        } else if (String(selectedValue) === item.key) { // convert selectedValue to string to catch 'null'/null case\n          selectedListItem = listItem;\n        }\n      }\n\n      // Handle list item selections\n      listItem.on('click', () => {\n        // Deselect the previous item (if there was a selected item)\n        if (selectedListItem) {\n          deselectItem(selectedListItem);\n        }\n\n        // Select the clicked item\n        selectedListItem = listItem;\n        selectItem(listItem);\n\n        // Fire the event\n        this.onItemSelectedEvent(item.key, false);\n      });\n\n      // Select default item\n      if (selectedListItem) {\n        selectItem(selectedListItem);\n      }\n\n      this.listElement.append(listItem);\n    }\n  }\n\n  protected onItemAddedEvent(value: string) {\n    super.onItemAddedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemRemovedEvent(value: string) {\n    super.onItemRemovedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemSelectedEvent(value: string, updateDomItems: boolean = true) {\n    super.onItemSelectedEvent(value);\n    if (updateDomItems) {\n      this.updateDomItems(value);\n    }\n  }\n}\n","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {EventDispatcher, Event, NoArgs} from '../eventdispatcher';\nimport { LocalizableText, i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Label} component.\n */\nexport interface LabelConfig extends ComponentConfig {\n  /**\n   * The text as string or localize callback on the label.\n   */\n  text?: LocalizableText;\n\n  /**\n   * WCAG20 standard: Associate label to form control.\n   */\n  for?: string;\n}\n\n/**\n * A simple text label.\n *\n * DOM example:\n * <code>\n *     <span class='ui-label'>...some text...</span>\n * </code>\n */\nexport class Label<Config extends LabelConfig> extends Component<Config> {\n\n  private text: LocalizableText;\n\n  private labelEvents = {\n    onClick: new EventDispatcher<Label<Config>, NoArgs>(),\n    onTextChanged: new EventDispatcher<Label<Config>, string>(),\n  };\n\n  constructor(config: Config = {} as Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-label',\n    } as Config, this.config);\n    this.text = this.config.text;\n  }\n\n  protected toDomElement(): DOM {\n    const tagName = this.config.for != null ? 'label' : 'span';\n\n    let labelElement = new DOM(tagName, {\n      'id': this.config.id,\n      'for': this.config.for,\n      'class': this.getCssClasses(),\n    }).html(i18n.performLocalization(this.text));\n\n    labelElement.on('click', () => {\n      this.onClickEvent();\n    });\n\n    return labelElement;\n  }\n\n  /**\n   * Set the text on this label.\n   * @param text\n   */\n  setText(text: LocalizableText) {\n    if (text === this.text) {\n      return;\n    }\n\n    this.text = text;\n    const localizedText = i18n.performLocalization(text);\n    this.getDomElement().html(localizedText);\n    this.onTextChangedEvent(localizedText);\n  }\n\n  /**\n   * Gets the text on this label.\n   * @return {string} The text on the label\n   */\n  getText(): string {\n    return i18n.performLocalization(this.text);\n  }\n\n  /**\n   * Clears the text on this label.\n   */\n  clearText() {\n    this.getDomElement().html('');\n    this.onTextChangedEvent(null);\n  }\n\n  /**\n   * Tests if the label is empty and does not contain any text.\n   * @return {boolean} True if the label is empty, else false\n   */\n  isEmpty(): boolean {\n    return !this.text;\n  }\n\n  /**\n   * Fires the {@link #onClick} event.\n   * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method\n   * and calling the super method.\n   */\n  protected onClickEvent() {\n    this.labelEvents.onClick.dispatch(this);\n  }\n\n  /**\n   * Fires the {@link #onClick} event.\n   * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method\n   * and calling the super method.\n   */\n  protected onTextChangedEvent(text: string) {\n    this.labelEvents.onTextChanged.dispatch(this, text);\n  }\n\n  /**\n   * Gets the event that is fired when the label is clicked.\n   * @returns {Event<Label<LabelConfig>, NoArgs>}\n   */\n  get onClick(): Event<Label<LabelConfig>, NoArgs> {\n    return this.labelEvents.onClick.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the text on the label is changed.\n   * @returns {Event<Label<LabelConfig>, string>}\n   */\n  get onTextChanged(): Event<Label<LabelConfig>, string> {\n    return this.labelEvents.onTextChanged.getEvent();\n  }\n}\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\nimport { ListItem, ListSelector, ListSelectorConfig } from './listselector';\nimport {DOM} from '../dom';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\nimport { ArrayUtils } from '../arrayutils';\n\n/**\n * A element to select a single item out of a list of available items.\n *\n * DOM example:\n * <code>\n *   <div class='ui-listbox'>\n *     <button class='ui-listbox-button'>label</button>\n *     ...\n *   </div\n * </code>\n */\n// TODO: change ListSelector to extends container in v4 to improve usage of ListBox.\n//       Currently we are creating the dom element of the list box with child elements manually here.\n//       But this functionality is already covered within the Container component.\nexport class ListBox extends ListSelector<ListSelectorConfig> {\n  private listBoxElement: DOM;\n  private components: ListBoxItemButton[] = [];\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-listbox',\n    } as ListSelectorConfig, this.config);\n  }\n\n  public configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // Subscribe before super call to receive initial events\n    this.onItemAdded.subscribe(this.addListBoxDomItem);\n    this.onItemRemoved.subscribe(this.removeListBoxDomItem);\n    this.onItemSelected.subscribe(this.refreshSelectedItem);\n\n    super.configure(player, uimanager);\n  }\n\n  protected toDomElement(): DOM {\n    let listBoxElement = new DOM('div', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    });\n\n    this.listBoxElement = listBoxElement;\n    this.createListBoxDomItems();\n    this.refreshSelectedItem();\n\n    return listBoxElement;\n  }\n\n  private createListBoxDomItems() {\n    // Delete all children\n    this.listBoxElement.empty();\n    this.components = [];\n\n    // Add updated children\n    for (let item of this.items) {\n      this.addListBoxDomItem(this, item.key);\n    }\n  }\n\n  private removeListBoxDomItem = (_: ListBox, key: string) => {\n    const component = this.getComponentForKey(key);\n    if (component) {\n      component.getDomElement().remove();\n      ArrayUtils.remove(this.components, component);\n    }\n  };\n\n  private addListBoxDomItem = (_: ListBox, key: string) => {\n    const component = this.getComponentForKey(key);\n    const newItem = this.getItemForKey(key);\n    if (component) {\n      // Update existing component\n      component.setText(newItem.label);\n    } else {\n      const listBoxItemButton = this.buildListBoxItemButton(newItem);\n\n      listBoxItemButton.onClick.subscribe(() => {\n        this.handleSelectionChange(listBoxItemButton);\n      });\n\n      this.components.push(listBoxItemButton);\n      this.listBoxElement.append(listBoxItemButton.getDomElement());\n    }\n  };\n\n  private refreshSelectedItem = () => {\n    // This gets called twice because the first time is triggered when the user clicks on the ListBoxItemButton. And the\n    // second call comes from the player event when the actual item is selected (Subtitle / AudioTrack in this case).\n    // As this is a generic component we can't prohibit this behaviour. We need to treat this component as it acts\n    // independent from PlayerEvents and on the other hand we need to react to PlayerEvents as it could be triggered\n    // from outside.\n\n    for (let item of this.items) {\n      const component = this.getComponentForKey(item.key);\n      if (component) {\n        String(component.key) === String(this.selectedItem) ? component.on() : component.off();\n      }\n    }\n  };\n\n  private buildListBoxItemButton(listItem: ListItem): ListBoxItemButton {\n    return new ListBoxItemButton({\n      key: listItem.key,\n      text: listItem.label,\n      ariaLabel: listItem.ariaLabel,\n    });\n  }\n\n  private getComponentForKey(key: string): ListBoxItemButton {\n    return this.components.find((c) => key === c.key);\n  }\n\n  private handleSelectionChange = (sender: ListBoxItemButton) => {\n    this.onItemSelectedEvent(sender.key);\n  };\n}\n\ninterface ListBoxItemButtonConfig extends ToggleButtonConfig {\n  /**\n   * key to identify selected item. Similar to the value attribute of an select option.\n   */\n  key: string;\n}\n\nclass ListBoxItemButton extends ToggleButton<ListBoxItemButtonConfig> {\n\n  constructor(config: ListBoxItemButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-listbox-button',\n      onClass: 'selected',\n      offClass: '',\n    } as ListBoxItemButtonConfig, this.config);\n  }\n\n  get key(): string {\n    return (this.config as ListBoxItemButtonConfig).key;\n  }\n}\n","import {Component, ComponentConfig} from './component';\nimport {EventDispatcher, Event} from '../eventdispatcher';\nimport {ArrayUtils} from '../arrayutils';\nimport { LocalizableText, i18n } from '../localization/i18n';\n\n/**\n * A map of items (key/value -> label} for a {@link ListSelector} in a {@link ListSelectorConfig}.\n */\nexport interface ListItem {\n  key: string;\n  label: LocalizableText;\n  sortedInsert?: boolean;\n  ariaLabel?: string;\n}\n\n/**\n * Filter function that can be used to filter out list items added through {@link ListSelector.addItem}.\n *\n * This is intended to be used in conjunction with subclasses that populate themselves automatically\n * via the player API, e.g. {@link SubtitleSelectBox}.\n */\nexport interface ListItemFilter {\n  /**\n   * Takes a list item and decides whether it should pass or be discarded.\n   * @param {ListItem} listItem the item to apply the filter to\n   * @returns {boolean} true to let the item pass through the filter, false to discard the item\n   */\n  (listItem: ListItem): boolean;\n}\n\n/**\n * Translator function to translate labels of list items added through {@link ListSelector.addItem}.\n *\n * This is intended to be used in conjunction with subclasses that populate themselves automatically\n * via the player API, e.g. {@link SubtitleSelectBox}.\n */\nexport interface ListItemLabelTranslator {\n  /**\n   * Takes a list item, optionally changes the label, and returns the new label.\n   * @param {ListItem} listItem the item to translate\n   * @returns {string} the translated or original label\n   */\n  (listItem: ListItem): string;\n}\n\n/**\n * Configuration interface for a {@link ListSelector}.\n */\nexport interface ListSelectorConfig extends ComponentConfig {\n  items?: ListItem[];\n  filter?: ListItemFilter;\n  translator?: ListItemLabelTranslator;\n}\n\nexport abstract class ListSelector<Config extends ListSelectorConfig> extends Component<ListSelectorConfig> {\n\n  protected items: ListItem[];\n  protected selectedItem: string;\n\n  private listSelectorEvents = {\n    onItemAdded: new EventDispatcher<ListSelector<Config>, string>(),\n    onItemRemoved: new EventDispatcher<ListSelector<Config>, string>(),\n    onItemSelected: new EventDispatcher<ListSelector<Config>, string>(),\n  };\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      items: [],\n      cssClass: 'ui-listselector',\n    }, this.config);\n\n    this.items = this.config.items;\n  }\n\n  private getItemIndex(key: string): number {\n    for (let index in this.items) {\n      if (key === this.items[index].key) {\n        return parseInt(index);\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Returns all current items of this selector.\n   * * @returns {ListItem[]}\n   */\n  getItems(): ListItem[] {\n    return this.items;\n  }\n\n  /**\n   * Checks if the specified item is part of this selector.\n   * @param key the key of the item to check\n   * @returns {boolean} true if the item is part of this selector, else false\n   */\n  hasItem(key: string): boolean {\n    return this.getItemIndex(key) > -1;\n  }\n\n  /**\n   * Adds an item to this selector by doing a sorted insert or by appending the element to the end of the list of items.\n   * If an item with the specified key already exists, it is replaced.\n   * @param key the key of the item to add\n   * @param label the (human-readable) label of the item to add\n   * @param sortedInsert whether the item should be added respecting the order of keys\n   * @param ariaLabel custom aria label for the listItem\n   */\n  addItem(key: string, label: LocalizableText, sortedInsert = false, ariaLabel = '') {\n    const listItem = { key: key, label: i18n.performLocalization(label), ...(ariaLabel && { ariaLabel })};\n\n    // Apply filter function\n    if (this.config.filter && !this.config.filter(listItem)) {\n      return;\n    }\n\n    // Apply translator function\n    if (this.config.translator) {\n      listItem.label = this.config.translator(listItem);\n    }\n\n    // Try to remove key first to get overwrite behavior and avoid duplicate keys\n    this.removeItem(key); // This will trigger an ItemRemoved and an ItemAdded event\n\n    // Add the item to the list\n    if (sortedInsert) {\n      const index = this.items.findIndex(entry => entry.key > key);\n      if (index < 0) {\n        this.items.push(listItem);\n      } else {\n        this.items.splice(index, 0, listItem);\n      }\n    } else {\n      this.items.push(listItem);\n    }\n    this.onItemAddedEvent(key);\n  }\n\n  /**\n   * Removes an item from this selector.\n   * @param key the key of the item to remove\n   * @returns {boolean} true if removal was successful, false if the item is not part of this selector\n   */\n  removeItem(key: string): boolean {\n    let index = this.getItemIndex(key);\n    if (index > -1) {\n      ArrayUtils.remove(this.items, this.items[index]);\n      this.onItemRemovedEvent(key);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Selects an item from the items in this selector.\n   * @param key the key of the item to select\n   * @returns {boolean} true is the selection was successful, false if the selected item is not part of the selector\n   */\n  selectItem(key: string): boolean {\n    if (key === this.selectedItem) {\n      // itemConfig is already selected, suppress any further action\n      return true;\n    }\n\n    let index = this.getItemIndex(key);\n\n    if (index > -1) {\n      this.selectedItem = key;\n      this.onItemSelectedEvent(key);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns the key of the selected item.\n   * @returns {string} the key of the selected item or null if no item is selected\n   */\n  getSelectedItem(): string | null {\n    return this.selectedItem;\n  }\n\n  /**\n   * Returns the items for the given key or undefined if no item with the given key exists.\n   * @param key the key of the item to return\n   * @returns {ListItem} the item with the requested key. Undefined if no item with the given key exists.\n   */\n  getItemForKey(key: string): ListItem {\n    return this.items.find((item) => item.key === key);\n  }\n\n  /**\n   * Synchronize the current items of this selector with the given ones. This will remove and add items selectively.\n   * For each removed item the ItemRemovedEvent and for each added item the ItemAddedEvent will be triggered. Favour\n   * this method over using clearItems and adding all items again afterwards.\n   * @param newItems\n   */\n  synchronizeItems(newItems: ListItem[]): void {\n    newItems\n      .filter((item) => !this.hasItem(item.key))\n      .forEach((item) => this.addItem(item.key, item.label, item.sortedInsert, item.ariaLabel));\n\n    this.items\n      .filter((item) => newItems.filter((i) => i.key === item.key).length === 0)\n      .forEach((item) => this.removeItem(item.key));\n  }\n\n  /**\n   * Removes all items from this selector.\n   */\n  clearItems() {\n    // local copy for iteration after clear\n    let items = this.items;\n    // clear items\n    this.items = [];\n\n    // clear the selection as the selected item is also removed\n    this.selectedItem = null;\n\n    // fire events\n    for (let item of items) {\n      this.onItemRemovedEvent(item.key);\n    }\n  }\n\n  /**\n   * Returns the number of items in this selector.\n   * @returns {number}\n   */\n  itemCount(): number {\n    return Object.keys(this.items).length;\n  }\n\n  protected onItemAddedEvent(key: string) {\n    this.listSelectorEvents.onItemAdded.dispatch(this, key);\n  }\n\n  protected onItemRemovedEvent(key: string) {\n    this.listSelectorEvents.onItemRemoved.dispatch(this, key);\n  }\n\n  protected onItemSelectedEvent(key: string) {\n    this.listSelectorEvents.onItemSelected.dispatch(this, key);\n  }\n\n  /**\n   * Gets the event that is fired when an item is added to the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemAdded(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemAdded.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when an item is removed from the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemRemoved(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemRemoved.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when an item is selected from the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemSelected(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemSelected.getEvent();\n  }\n}","import {LabelConfig, Label} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Enumerates the types of content that the {@link MetadataLabel} can display.\n */\nexport enum MetadataLabelContent {\n  /**\n   * Title of the data source.\n   */\n  Title,\n  /**\n   * Description fo the data source.\n   */\n  Description,\n}\n\n/**\n * Configuration interface for {@link MetadataLabel}.\n */\nexport interface MetadataLabelConfig extends LabelConfig {\n  /**\n   * The type of content that should be displayed in the label.\n   */\n  content: MetadataLabelContent;\n}\n\n/**\n * A label that can be configured to display certain metadata.\n */\nexport class MetadataLabel extends Label<MetadataLabelConfig> {\n\n  constructor(config: MetadataLabelConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['label-metadata', 'label-metadata-' + MetadataLabelContent[config.content].toLowerCase()],\n    } as MetadataLabelConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let uiconfig = uimanager.getConfig();\n\n    let init = () => {\n      switch (config.content) {\n        case MetadataLabelContent.Title:\n          this.setText(uiconfig.metadata.title);\n          break;\n        case MetadataLabelContent.Description:\n          this.setText(uiconfig.metadata.description);\n          break;\n      }\n    };\n\n    let unload = () => {\n      this.setText(null);\n    };\n\n    // Init label\n    init();\n    // Clear labels when source is unloaded\n    player.on(player.exports.PlayerEvent.SourceUnloaded, unload);\n\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles Apple macOS picture-in-picture mode.\n */\nexport class PictureInPictureToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-piptogglebutton',\n      text: i18n.getLocalizer('pictureInPicture'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const isPictureInPictureAvailable = () => {\n      return player.isViewModeAvailable(player.exports.ViewMode.PictureInPicture);\n    };\n\n    const pictureInPictureStateHandler = () => {\n      player.getViewMode() === player.exports.ViewMode.PictureInPicture ? this.on() : this.off();\n    };\n\n    const pictureInPictureAvailabilityChangedHandler = () => {\n      isPictureInPictureAvailable() ? this.show() : this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.ViewModeChanged, pictureInPictureStateHandler);\n\n    // Available only in our native SDKs for now\n    if ((player.exports.PlayerEvent as any).ViewModeAvailabilityChanged) {\n      player.on(\n        (player.exports.PlayerEvent as any).ViewModeAvailabilityChanged,\n        pictureInPictureAvailabilityChangedHandler,\n      );\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(pictureInPictureAvailabilityChangedHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isPictureInPictureAvailable()) {\n        if (console) {\n          console.log('PIP unavailable');\n        }\n        return;\n      }\n\n      const targetViewMode =\n        player.getViewMode() === player.exports.ViewMode.PictureInPicture\n          ? player.exports.ViewMode.Inline\n          : player.exports.ViewMode.PictureInPicture;\n\n      player.setViewMode(targetViewMode);\n    });\n\n    // Startup init\n    pictureInPictureAvailabilityChangedHandler(); // Hide button if PIP not available\n    pictureInPictureStateHandler();\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection of different playback speeds.\n */\nexport class PlaybackSpeedSelectBox extends SelectBox {\n  protected defaultPlaybackSpeeds: number[];\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n    this.defaultPlaybackSpeeds = [0.25, 0.5, 1, 1.5, 2];\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-playbackspeedselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addDefaultItems();\n\n    this.onItemSelected.subscribe((sender: PlaybackSpeedSelectBox, value: string) => {\n      player.setPlaybackSpeed(parseFloat(value));\n      this.selectItem(value);\n    });\n\n    const setDefaultValue = (): void => {\n      const playbackSpeed = player.getPlaybackSpeed();\n      this.setSpeed(playbackSpeed);\n    };\n\n    player.on(player.exports.PlayerEvent.PlaybackSpeedChanged, setDefaultValue);\n    uimanager.getConfig().events.onUpdated.subscribe(setDefaultValue);\n  }\n\n  setSpeed(speed: number): void {\n    if (!this.selectItem(String(speed))) {\n      // a playback speed was set which is not in the list, add it to the list to show it to the user\n      this.clearItems();\n      this.addDefaultItems([speed]);\n      this.selectItem(String(speed));\n    }\n  }\n\n  addDefaultItems(customItems: number[] = []): void {\n    const sortedSpeeds = this.defaultPlaybackSpeeds.concat(customItems).sort();\n\n    sortedSpeeds.forEach(element => {\n      if (element !== 1) {\n        this.addItem(String(element), `${element}x`);\n      } else {\n        this.addItem(String(element), i18n.getLocalizer('normal'));\n      }\n    });\n  }\n\n  clearItems(): void {\n    this.items = [];\n    this.selectedItem = null;\n  }\n}","import {LabelConfig, Label} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\nimport {PlayerUtils} from '../playerutils';\nimport {StringUtils} from '../stringutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\nexport enum PlaybackTimeLabelMode {\n  /**\n   * Displays the current time\n   */\n  CurrentTime,\n  /**\n   * Displays the duration of the content\n   */\n  TotalTime,\n  /**\n   * Displays the current time and the duration of the content\n   * Format: ${currentTime} / ${totalTime}\n   */\n  CurrentAndTotalTime,\n  /**\n   * Displays the remaining time of the content\n   */\n  RemainingTime,\n}\n\nexport interface PlaybackTimeLabelConfig extends LabelConfig {\n  /**\n   * The type of which time should be displayed in the label.\n   * Default: PlaybackTimeLabelMode.CurrentAndTotalTime\n   */\n  timeLabelMode?: PlaybackTimeLabelMode;\n  /**\n   * Boolean if the label should be hidden in live playback\n   */\n  hideInLivePlayback?: boolean;\n}\n\n/**\n * A label that display the current playback time and the total time through {@link PlaybackTimeLabel#setTime setTime}\n * or any string through {@link PlaybackTimeLabel#setText setText}.\n */\nexport class PlaybackTimeLabel extends Label<PlaybackTimeLabelConfig> {\n\n  private timeFormat: string;\n\n  constructor(config: PlaybackTimeLabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <PlaybackTimeLabelConfig>{\n      cssClass: 'ui-playbacktimelabel',\n      timeLabelMode: PlaybackTimeLabelMode.CurrentAndTotalTime,\n      hideInLivePlayback: false,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let live = false;\n    let liveCssClass = this.prefixCss('ui-playbacktimelabel-live');\n    let liveEdgeCssClass = this.prefixCss('ui-playbacktimelabel-live-edge');\n    let minWidth = 0;\n\n    let liveClickHandler = () => {\n      player.timeShift(0);\n    };\n\n    let updateLiveState = () => {\n      // Player is playing a live stream when the duration is infinite\n      live = player.isLive();\n\n      // Attach/detach live marker class\n      if (live) {\n        this.getDomElement().addClass(liveCssClass);\n        this.setText(i18n.getLocalizer('live'));\n        if (config.hideInLivePlayback) {\n          this.hide();\n        }\n        this.onClick.subscribe(liveClickHandler);\n        updateLiveTimeshiftState();\n      } else {\n        this.getDomElement().removeClass(liveCssClass);\n        this.getDomElement().removeClass(liveEdgeCssClass);\n        this.show();\n        this.onClick.unsubscribe(liveClickHandler);\n      }\n    };\n\n    let updateLiveTimeshiftState = () => {\n      if (!live) {\n        return;\n      }\n\n      // The player is only at the live edge iff the stream is not shifted and it is actually playing or playback has\n      // never been started (meaning it isn't paused). A player that is paused is always behind the live edge.\n      // An exception is made for live streams without a timeshift window, because here we \"stop\" playback instead\n      // of pausing it (from a UI perspective), so we keep the live edge indicator on because a play would always\n      // resume at the live edge.\n      const isTimeshifted = player.getTimeShift() < 0;\n      const isTimeshiftAvailable = player.getMaxTimeShift() < 0;\n      if (!isTimeshifted && (!player.isPaused() || !isTimeshiftAvailable)) {\n        this.getDomElement().addClass(liveEdgeCssClass);\n      } else {\n        this.getDomElement().removeClass(liveEdgeCssClass);\n      }\n    };\n\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      live = args.live;\n      updateLiveState();\n    });\n    liveStreamDetector.detect(); // Initial detection\n\n    let playbackTimeHandler = () => {\n      if (!live && player.getDuration() !== Infinity) {\n        this.setTime(\n          PlayerUtils.getCurrentTimeRelativeToSeekableRange(player),\n          player.getDuration());\n      }\n\n      // To avoid 'jumping' in the UI by varying label sizes due to non-monospaced fonts,\n      // we gradually increase the min-width with the content to reach a stable size.\n      let width = this.getDomElement().width();\n      if (width > minWidth) {\n        minWidth = width;\n        this.getDomElement().css({\n          'min-width': minWidth + 'px',\n        });\n      }\n    };\n\n    let updateTimeFormatBasedOnDuration = () => {\n      // Set time format depending on source duration\n      this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?\n      StringUtils.FORMAT_HHMMSS : StringUtils.FORMAT_MMSS;\n      playbackTimeHandler();\n    };\n\n    player.on(player.exports.PlayerEvent.TimeChanged, playbackTimeHandler);\n    player.on(player.exports.PlayerEvent.Ready, updateTimeFormatBasedOnDuration);\n    player.on(player.exports.PlayerEvent.Seeked, playbackTimeHandler);\n\n    player.on(player.exports.PlayerEvent.TimeShift, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.TimeShifted, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.Playing, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.Paused, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.StallStarted, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.StallEnded, updateLiveTimeshiftState);\n\n    let init = () => {\n      // Reset min-width when a new source is ready (especially for switching VOD/Live modes where the label content\n      // changes)\n      minWidth = 0;\n      this.getDomElement().css({\n        'min-width': null,\n      });\n\n      updateTimeFormatBasedOnDuration();\n    };\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n\n    init();\n  }\n\n  /**\n   * Sets the current playback time and total duration.\n   * @param playbackSeconds the current playback time in seconds\n   * @param durationSeconds the total duration in seconds\n   */\n  setTime(playbackSeconds: number, durationSeconds: number) {\n    let currentTime = StringUtils.secondsToTime(playbackSeconds, this.timeFormat);\n    let totalTime = StringUtils.secondsToTime(durationSeconds, this.timeFormat);\n\n    switch ((<PlaybackTimeLabelConfig>this.config).timeLabelMode) {\n      case PlaybackTimeLabelMode.CurrentTime:\n        this.setText(`${currentTime}`);\n        break;\n      case PlaybackTimeLabelMode.TotalTime:\n        this.setText(`${totalTime}`);\n        break;\n      case PlaybackTimeLabelMode.CurrentAndTotalTime:\n        this.setText(`${currentTime} / ${totalTime}`);\n        break;\n      case PlaybackTimeLabelMode.RemainingTime:\n        let remainingTime = StringUtils.secondsToTime(durationSeconds - playbackSeconds, this.timeFormat);\n        this.setText(`${remainingTime}`);\n        break;\n    }\n  }\n\n  /**\n   * Sets the current time format\n   * @param timeFormat the time format\n   */\n  protected setTimeFormat(timeFormat: string): void {\n    this.timeFormat = timeFormat;\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport {PlayerUtils} from '../playerutils';\nimport { PlayerAPI, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\nexport interface PlaybackToggleButtonConfig extends ToggleButtonConfig {\n  /**\n   * Specify whether the player should be set to enter fullscreen by clicking on the playback toggle button\n   * when initiating the initial playback.\n   * Default is false.\n   */\n  enterFullscreenOnInitialPlayback?: boolean;\n}\n\n/**\n * A button that toggles between playback and pause.\n */\nexport class PlaybackToggleButton extends ToggleButton<PlaybackToggleButtonConfig> {\n\n  private static readonly CLASS_STOPTOGGLE = 'stoptoggle';\n  protected isPlayInitiated: boolean;\n\n  constructor(config: PlaybackToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbacktogglebutton',\n      text: i18n.getLocalizer('play'),\n      onAriaLabel: i18n.getLocalizer('pause'),\n      offAriaLabel: i18n.getLocalizer('play'),\n    }, this.config);\n\n    this.isPlayInitiated = false;\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager, handleClickEvent: boolean = true): void {\n    super.configure(player, uimanager);\n\n    // Set enterFullscreenOnInitialPlayback if set in the uimanager config\n    if (typeof uimanager.getConfig().enterFullscreenOnInitialPlayback === 'boolean') {\n      this.config.enterFullscreenOnInitialPlayback = uimanager.getConfig().enterFullscreenOnInitialPlayback;\n    }\n\n    let isSeeking = false;\n    let firstPlay = true;\n\n    // Handler to update button state based on player state\n    let playbackStateHandler = () => {\n      // If the UI is currently seeking, playback is temporarily stopped but the buttons should\n      // not reflect that and stay as-is (e.g indicate playback while seeking).\n      if (isSeeking) {\n        return;\n      }\n\n      if (player.isPlaying() || this.isPlayInitiated) {\n        this.on();\n      } else {\n        this.off();\n      }\n    };\n\n    // Call handler upon these events\n    player.on(player.exports.PlayerEvent.Play, (e) => {\n      this.isPlayInitiated = true;\n      firstPlay = false;\n      playbackStateHandler();\n    });\n\n    player.on(player.exports.PlayerEvent.Paused, (e) => {\n      this.isPlayInitiated = false;\n      playbackStateHandler();\n    });\n\n    player.on(player.exports.PlayerEvent.Playing, (e) => {\n      this.isPlayInitiated = false;\n      playbackStateHandler();\n    });\n    // after unloading + loading a new source, the player might be in a different playing state (from playing into stopped)\n    player.on(player.exports.PlayerEvent.SourceLoaded, playbackStateHandler);\n    uimanager.getConfig().events.onUpdated.subscribe(playbackStateHandler);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, playbackStateHandler);\n    // when playback finishes, player turns to paused mode\n    player.on(player.exports.PlayerEvent.PlaybackFinished, playbackStateHandler);\n    player.on(player.exports.PlayerEvent.CastStarted, playbackStateHandler);\n\n    // When a playback attempt is rejected with warning 5008, we switch the button state back to off\n    // This is required for blocked autoplay, because there is no Paused event in such case\n    player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n      if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n        this.isPlayInitiated = false;\n        firstPlay = true;\n        this.off();\n      }\n    });\n\n    const updateLiveState = () => {\n      const showStopToggle = player.isLive() && !PlayerUtils.isTimeShiftAvailable(player);\n\n      if (showStopToggle) {\n        this.getDomElement().addClass(this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));\n      } else {\n        this.getDomElement().removeClass(this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));\n      }\n    };\n\n    // Detect absence of timeshifting on live streams and add tagging class to convert button icons to play/stop\n    let timeShiftDetector = new PlayerUtils.TimeShiftAvailabilityDetector(player);\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n\n    timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe(() => updateLiveState());\n    liveStreamDetector.onLiveChanged.subscribe(() => updateLiveState());\n\n    timeShiftDetector.detect(); // Initial detection\n    liveStreamDetector.detect();\n\n    if (handleClickEvent) {\n      // Control player by button events\n      // When a button event triggers a player API call, events are fired which in turn call the event handler\n      // above that updated the button state.\n      this.onClick.subscribe(() => {\n        if (player.isPlaying() || this.isPlayInitiated) {\n          player.pause('ui');\n        } else {\n          player.play('ui');\n\n          if (firstPlay && this.config.enterFullscreenOnInitialPlayback) {\n            player.setViewMode(player.exports.ViewMode.Fullscreen);\n          }\n        }\n      });\n    }\n\n    // Track UI seeking status\n    uimanager.onSeek.subscribe(() => {\n      isSeeking = true;\n    });\n    uimanager.onSeeked.subscribe(() => {\n      isSeeking = false;\n    });\n\n    // Startup init\n    playbackStateHandler();\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {HugePlaybackToggleButton} from './hugeplaybacktogglebutton';\n\nexport interface PlaybackToggleOverlayConfig extends ContainerConfig {\n  /**\n   * Specify whether the player should be set to enter fullscreen by clicking on the playback toggle button\n   * when initiating the initial playback.\n   * Default is false.\n   */\n  enterFullscreenOnInitialPlayback?: boolean;\n}\n\n/**\n * Overlays the player and displays error messages.\n */\nexport class PlaybackToggleOverlay extends Container<PlaybackToggleOverlayConfig> {\n\n  private playbackToggleButton: HugePlaybackToggleButton;\n\n  constructor(config: PlaybackToggleOverlayConfig = {}) {\n    super(config);\n\n    this.playbackToggleButton = new HugePlaybackToggleButton({\n      enterFullscreenOnInitialPlayback: Boolean(config.enterFullscreenOnInitialPlayback),\n    });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbacktoggle-overlay',\n      components: [this.playbackToggleButton],\n    }, this.config);\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {Component, ComponentConfig} from './component';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport {HugeReplayButton} from './hugereplaybutton';\nimport { UIRecommendationConfig } from '../uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Overlays the player and displays recommended videos.\n */\nexport class RecommendationOverlay extends Container<ContainerConfig> {\n\n  private replayButton: HugeReplayButton;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.replayButton = new HugeReplayButton();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-recommendation-overlay',\n      hidden: true,\n      components: [this.replayButton],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let clearRecommendations = () => {\n      for (let component of this.getComponents().slice()) {\n        if (component instanceof RecommendationItem) {\n          this.removeComponent(component);\n        }\n      }\n      this.updateComponents();\n      this.getDomElement().removeClass(this.prefixCss('recommendations'));\n    };\n\n    let setupRecommendations = () => {\n      clearRecommendations();\n\n      const recommendations = uimanager.getConfig().recommendations;\n\n      if (recommendations.length > 0) {\n        let index = 1;\n        for (let item of recommendations) {\n          this.addComponent(new RecommendationItem({\n            itemConfig: item,\n            cssClasses: ['recommendation-item-' + (index++)],\n          }));\n        }\n        this.updateComponents(); // create container DOM elements\n\n        this.getDomElement().addClass(this.prefixCss('recommendations'));\n      }\n    };\n\n    uimanager.getConfig().events.onUpdated.subscribe(setupRecommendations);\n    // Remove recommendations and hide overlay when source is unloaded\n    player.on(player.exports.PlayerEvent.SourceUnloaded, () => {\n      clearRecommendations();\n      this.hide();\n    });\n    // Display recommendations when playback has finished\n    player.on(player.exports.PlayerEvent.PlaybackFinished, () => {\n      this.show();\n    });\n    // Hide recommendations when playback starts, e.g. a restart\n    player.on(player.exports.PlayerEvent.Play, () => {\n      this.hide();\n    });\n\n    // Init on startup\n    setupRecommendations();\n  }\n}\n\n/**\n * Configuration interface for the {@link RecommendationItem}\n */\ninterface RecommendationItemConfig extends ComponentConfig {\n  itemConfig: UIRecommendationConfig;\n}\n\n/**\n * An item of the {@link RecommendationOverlay}. Used only internally in {@link RecommendationOverlay}.\n */\nclass RecommendationItem extends Component<RecommendationItemConfig> {\n\n  constructor(config: RecommendationItemConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-recommendation-item',\n      itemConfig: null, // this must be passed in from outside\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let config = this.config.itemConfig;\n\n    let itemElement = new DOM('a', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'href': config.url,\n    }).css({ 'background-image': `url(${config.thumbnail})` });\n\n    let bgElement = new DOM('div', {\n      'class': this.prefixCss('background'),\n    });\n    itemElement.append(bgElement);\n\n    let titleElement = new DOM('span', {\n      'class': this.prefixCss('title'),\n    }).append(new DOM('span', {\n      'class': this.prefixCss('innertitle'),\n    }).html(config.title));\n    itemElement.append(titleElement);\n\n    let timeElement = new DOM('span', {\n      'class': this.prefixCss('duration'),\n    }).append(new DOM('span', {\n      'class': this.prefixCss('innerduration'),\n    }).html(config.duration ? StringUtils.secondsToTime(config.duration) : ''));\n    itemElement.append(timeElement);\n\n    return itemElement;\n  }\n}","import { ButtonConfig, Button } from './button';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\nimport { PlayerUtils } from '../playerutils';\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\n\n/**\n * A button to play/replay a video.\n */\nexport class ReplayButton extends Button<ButtonConfig> {\n\n  constructor(config: ButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-replaybutton',\n      text: i18n.getLocalizer('replay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    if (player.isLive()) {\n      this.hide();\n    }\n\n    const liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      if (args.live) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    });\n\n    this.onClick.subscribe(() => {\n      if (!player.hasEnded()) {\n        player.seek(0);\n        // Not calling `play` will keep the play/pause state as is\n      } else {\n        // If playback has already ended, calling `play` will automatically restart from the beginning\n        player.play('ui');\n      }\n    });\n  }\n}\n","import { ExtendedPlayerAPI, GroupPlaybackSuspension, GroupPlaybackSuspensionReason } from './../groupplaybackapi';\nimport { Component, ComponentConfig } from './component';\nimport { DOM } from '../dom';\nimport { Event, EventDispatcher, NoArgs } from '../eventdispatcher';\nimport { SeekBarLabel } from './seekbarlabel';\nimport { UIInstanceManager, SeekPreviewArgs } from '../uimanager';\nimport { Timeout } from '../timeout';\nimport { PlayerUtils } from '../playerutils';\nimport TimeShiftAvailabilityChangedArgs = PlayerUtils.TimeShiftAvailabilityChangedArgs;\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\nimport { TimelineMarker } from '../uiconfig';\nimport { PlayerAPI, PlayerEventBase } from 'bitmovin-player';\nimport { StringUtils } from '../stringutils';\nimport { SeekBarType, SeekBarController } from './seekbarcontroller';\nimport { i18n } from '../localization/i18n';\nimport { BrowserUtils } from '../browserutils';\nimport { TimelineMarkersHandler } from './timelinemarkershandler';\nimport { getMinBufferLevel } from './seekbarbufferlevel';\n\n/**\n * Configuration interface for the {@link SeekBar} component.\n */\nexport interface SeekBarConfig extends ComponentConfig {\n  /**\n   * The label above the seek position.\n   */\n  label?: SeekBarLabel;\n  /**\n   * Bar will be vertical instead of horizontal if set to true.\n   */\n  vertical?: boolean;\n  /**\n   * The interval in milliseconds in which the playback position on the seek bar will be updated. The shorter the\n   * interval, the smoother it looks and the more resource intense it is. The update interval will be kept as steady\n   * as possible to avoid jitter.\n   * Set to -1 to disable smooth updating and update it on player TimeChanged events instead.\n   * Default: 50 (50ms = 20fps).\n   */\n  smoothPlaybackPositionUpdateIntervalMs?: number;\n\n  /**\n   * Used for seekBar control increments and decrements\n   */\n  keyStepIncrements?: { leftRight: number, upDown: number };\n\n  /**\n   * Used for seekBar marker snapping range percentage\n   */\n  snappingRange?: number;\n\n  /**\n   * Used to enable/disable seek preview\n   */\n  enableSeekPreview?: boolean;\n}\n\n/**\n * Event argument interface for a seek preview event.\n */\nexport interface SeekPreviewEventArgs extends SeekPreviewArgs {\n  /**\n   * Tells if the seek preview event comes from a scrubbing.\n   */\n  scrubbing: boolean;\n}\n\nexport interface SeekBarMarker {\n  marker: TimelineMarker;\n  position: number;\n  duration?: number;\n  element?: DOM;\n}\n\n/**\n * A seek bar to seek within the player's media. It displays the current playback position, amount of buffed data, seek\n * target, and keeps status about an ongoing seek.\n *\n * The seek bar displays different 'bars':\n *  - the playback position, i.e. the position in the media at which the player current playback pointer is positioned\n *  - the buffer position, which usually is the playback position plus the time span that is already buffered ahead\n *  - the seek position, used to preview to where in the timeline a seek will jump to\n */\nexport class SeekBar extends Component<SeekBarConfig> {\n\n  public static readonly SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED = -1;\n\n  /**\n   * The CSS class that is added to the DOM element while the seek bar is in 'seeking' state.\n   */\n  private static readonly CLASS_SEEKING = 'seeking';\n\n  private seekBar: DOM;\n  private seekBarPlaybackPosition: DOM;\n  private seekBarPlaybackPositionMarker: DOM;\n  private seekBarBufferPosition: DOM;\n  private seekBarSeekPosition: DOM;\n  private seekBarBackdrop: DOM;\n\n  private label: SeekBarLabel;\n\n  private seekBarMarkersContainer: DOM;\n  private timelineMarkersHandler: TimelineMarkersHandler;\n\n  private player: PlayerAPI;\n\n  protected seekBarType: SeekBarType;\n\n  protected isUiShown: boolean;\n\n  /**\n   * Buffer of the the current playback position. The position must be buffered in case the element\n   * needs to be refreshed with {@link #refreshPlaybackPosition}.\n   * @type {number}\n   */\n  private playbackPositionPercentage = 0;\n\n  private smoothPlaybackPositionUpdater: Timeout;\n  private pausedTimeshiftUpdater: Timeout;\n\n  private isUserSeeking = false;\n\n  private seekBarEvents = {\n    /**\n     * Fired when a scrubbing seek operation is started.\n     */\n    onSeek: new EventDispatcher<SeekBar, NoArgs>(),\n    /**\n     * Fired during a scrubbing seek to indicate that the seek preview (i.e. the video frame) should be updated.\n     */\n    onSeekPreview: new EventDispatcher<SeekBar, SeekPreviewEventArgs>(),\n    /**\n     * Fired when a scrubbing seek has finished or when a direct seek is issued.\n     */\n    onSeeked: new EventDispatcher<SeekBar, number>(),\n  };\n\n  constructor(config: SeekBarConfig = {}) {\n    super(config);\n\n    const keyStepIncrements = this.config.keyStepIncrements || {\n      leftRight: 1,\n      upDown: 5,\n    };\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-seekbar',\n      vertical: false,\n      smoothPlaybackPositionUpdateIntervalMs: 50,\n      keyStepIncrements,\n      ariaLabel: i18n.getLocalizer('seekBar'),\n      tabIndex: 0,\n      snappingRange: 1,\n      enableSeekPreview: true,\n    }, this.config);\n\n    this.label = this.config.label;\n  }\n\n  initialize(): void {\n    super.initialize();\n\n    if (this.hasLabel()) {\n      this.getLabel().initialize();\n    }\n  }\n\n  protected setAriaSliderMinMax(min: string, max: string) {\n    this.getDomElement().attr('aria-valuemin', min);\n    this.getDomElement().attr('aria-valuemax', max);\n  }\n\n  private setAriaSliderValues() {\n    if (this.seekBarType === SeekBarType.Live) {\n      const timeshiftValue = Math.ceil(this.player.getTimeShift()).toString();\n      this.getDomElement().attr('aria-valuenow', timeshiftValue);\n      this.getDomElement().attr('aria-valuetext', `${i18n.performLocalization(i18n.getLocalizer('seekBar.timeshift'))} ${i18n.performLocalization(i18n.getLocalizer('seekBar.value'))}: ${timeshiftValue}`);\n    } else if (this.seekBarType === SeekBarType.Vod) {\n      const ariaValueText = `${StringUtils.secondsToText(this.player.getCurrentTime())} ${i18n.performLocalization(i18n.getLocalizer('seekBar.durationText'))} ${StringUtils.secondsToText(this.player.getDuration())}`;\n      this.getDomElement().attr('aria-valuenow', Math.floor(this.player.getCurrentTime()).toString());\n      this.getDomElement().attr('aria-valuetext', ariaValueText);\n    }\n  }\n\n  private getPlaybackPositionPercentage(): number {\n    if (this.player.isLive()) {\n      return 100 - (100 / this.player.getMaxTimeShift() * this.player.getTimeShift());\n    }\n\n    return 100 / this.player.getDuration() * this.getRelativeCurrentTime();\n  }\n\n  private updateBufferLevel(playbackPositionPercentage: number): void {\n\n    let bufferLoadedPercentageLevel: number;\n    if (this.player.isLive()) {\n      // Always show full buffer for live streams\n      bufferLoadedPercentageLevel = 100;\n    } else {\n      bufferLoadedPercentageLevel = playbackPositionPercentage + getMinBufferLevel(this.player);\n    }\n\n    this.setBufferPosition(bufferLoadedPercentageLevel);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager, configureSeek: boolean = true): void {\n    super.configure(player, uimanager);\n\n    this.player = player;\n\n    // Apply scaling transform to the backdrop bar to have all bars rendered similarly\n    // (the call must be up here to be executed for the volume slider as well)\n    this.setPosition(this.seekBarBackdrop, 100);\n\n    // Add seekbar controls to the seekbar\n    const seekBarController = new SeekBarController(this.config.keyStepIncrements, player, uimanager.getConfig().volumeController);\n\n    seekBarController.setSeekBarControls(this.getDomElement(), () => this.seekBarType);\n\n    // The configureSeek flag can be used by subclasses to disable configuration as seek bar. E.g. the volume\n    // slider is reusing this component but adds its own functionality, and does not need the seek functionality.\n    // This is actually a hack, the proper solution would be for both seek bar and volume sliders to extend\n    // a common base slider component and implement their functionality there.\n    if (!configureSeek) {\n      this.seekBarType = SeekBarType.Volume;\n\n      return;\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      this.isUiShown = true;\n    });\n\n    uimanager.onControlsHide.subscribe(() => {\n      this.isUiShown = false;\n    });\n\n    let isPlaying = false;\n    let scrubbing = false;\n    let isPlayerSeeking = false;\n    let suspension: GroupPlaybackSuspension | undefined;\n\n    // Update playback and buffer positions\n    let playbackPositionHandler = (event: PlayerEventBase = null, forceUpdate: boolean = false) => {\n      if (this.isUserSeeking) {\n        // We caught a seek preview seek, do not update the seekbar\n        return;\n      }\n\n      let playbackPositionPercentage = this.getPlaybackPositionPercentage();\n\n      this.updateBufferLevel(playbackPositionPercentage);\n\n      // The segment request finished is used to help the playback position move, when the smooth playback position is not enabled.\n      // At the same time when the user is scrubbing, we also move the position of the seekbar to display a preview during scrubbing.\n      // When the user is scrubbing we do not record this as a user seek operation, as the user has yet to finish their seek,\n      // but we should not move the playback position to not create a jumping behaviour.\n      if (scrubbing && event && event.type === player.exports.PlayerEvent.SegmentRequestFinished && playbackPositionPercentage !== this.playbackPositionPercentage) {\n        playbackPositionPercentage = this.playbackPositionPercentage;\n      }\n\n      if (player.isLive()) {\n        if (player.getMaxTimeShift() === 0) {\n          // This case must be explicitly handled to avoid division by zero\n          this.setPlaybackPosition(100);\n        } else {\n          if (!this.isSeeking()) {\n            this.setPlaybackPosition(playbackPositionPercentage);\n          }\n\n          this.setAriaSliderMinMax(player.getMaxTimeShift().toString(), '0');\n        }\n      } else {\n        // Update playback position only in paused state or in the initial startup state where player is neither\n        // paused nor playing. Playback updates are handled in the Timeout below.\n        const isInInitialStartupState = this.config.smoothPlaybackPositionUpdateIntervalMs === SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED\n            || forceUpdate || player.isPaused();\n        const isNeitherPausedNorPlaying = player.isPaused() === player.isPlaying();\n\n        if ((isInInitialStartupState || isNeitherPausedNorPlaying) && !this.isSeeking()) {\n          this.setPlaybackPosition(playbackPositionPercentage);\n        }\n\n        this.setAriaSliderMinMax('0', player.getDuration().toString());\n      }\n\n      if (this.isUiShown) {\n        this.setAriaSliderValues();\n      }\n    };\n\n    // Update seekbar upon these events\n    // init playback position when the player is ready\n    player.on(player.exports.PlayerEvent.Ready, playbackPositionHandler);\n    // update playback position when it changes\n    player.on(player.exports.PlayerEvent.TimeChanged, playbackPositionHandler);\n    // update bufferlevel when buffering is complete\n    player.on(player.exports.PlayerEvent.StallEnded, playbackPositionHandler);\n    // update playback position when a timeshift has finished\n    player.on(player.exports.PlayerEvent.TimeShifted, playbackPositionHandler);\n    // update bufferlevel when a segment has been downloaded\n    player.on(player.exports.PlayerEvent.SegmentRequestFinished, playbackPositionHandler);\n\n    this.configureLivePausedTimeshiftUpdater(player, uimanager, playbackPositionHandler);\n\n    // Seek handling\n    let onPlayerSeek = () => {\n      isPlayerSeeking = true;\n      this.setSeeking(true);\n      scrubbing = false;\n    };\n\n    let onPlayerSeeked = (event: PlayerEventBase = null, forceUpdate: boolean = false ) => {\n      isPlayerSeeking = false;\n      this.setSeeking(false);\n\n      // update playback position when a seek has finished\n      playbackPositionHandler(event, forceUpdate);\n    };\n\n    let restorePlayingState = function () {\n      // Continue playback after seek if player was playing when seek started\n      if (isPlaying) {\n        // use the same issuer here as in the pause on seek\n        player.play('ui-seek');\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.Seek, onPlayerSeek);\n    player.on(player.exports.PlayerEvent.Seeked, onPlayerSeeked);\n    player.on(player.exports.PlayerEvent.TimeShift, onPlayerSeek);\n    player.on(player.exports.PlayerEvent.TimeShifted, onPlayerSeeked);\n\n    let isGroupPlaybackAPIAvailable = (player: PlayerAPI): player is ExtendedPlayerAPI => {\n      return !!(player as ExtendedPlayerAPI).groupPlayback;\n    };\n\n    this.onSeek.subscribe((sender) => {\n      // track seeking status so we can catch events from seek preview seeks\n      this.isUserSeeking = true;\n      // Notify UI manager of started seek\n      uimanager.onSeek.dispatch(sender);\n\n      if (isGroupPlaybackAPIAvailable(player) && player.groupPlayback.hasJoined() && !suspension) {\n        suspension = player.groupPlayback.beginSuspension(GroupPlaybackSuspensionReason.UserIsScrubbing);\n      }\n\n      // Save current playback state before performing the seek\n      if (!isPlayerSeeking) {\n        isPlaying = player.isPlaying();\n\n        // Pause playback while seeking\n        if (isPlaying) {\n          // use a different issuer here, as play/pause on seek is not \"really\" triggerd by the user\n          player.pause('ui-seek');\n        }\n      }\n    });\n\n    this.onSeekPreview.subscribe((sender: SeekBar, args: SeekPreviewEventArgs) => {\n      // Notify UI manager of seek preview\n      uimanager.onSeekPreview.dispatch(sender, args);\n      scrubbing = args.scrubbing;\n    });\n\n    // Set enableSeekPreview if set in the uimanager config\n    if (typeof uimanager.getConfig().enableSeekPreview === 'boolean') {\n      this.config.enableSeekPreview = uimanager.getConfig().enableSeekPreview;\n    }\n\n    // Rate-limited scrubbing seek\n    if (this.config.enableSeekPreview) {\n      this.onSeekPreview.subscribeRateLimited(this.seekWhileScrubbing, 200);\n    }\n\n    this.onSeeked.subscribe((sender, percentage) => {\n      this.isUserSeeking = false;\n\n      // Do the seek\n      this.seek(percentage);\n\n      // Notify UI manager of finished seek\n      uimanager.onSeeked.dispatch(sender);\n\n      // Continue playback after seek if player was playing when seek started\n      restorePlayingState();\n\n      if (isGroupPlaybackAPIAvailable(player) && player.groupPlayback.hasJoined() && suspension) {\n        const proposedPlaybackTime = this.getTargetSeekPosition(percentage);\n        player.groupPlayback.endSuspension(suspension, { proposedPlaybackTime });\n        suspension = undefined;\n      }\n    });\n\n    if (this.hasLabel()) {\n      // Configure a seekbar label that is internal to the seekbar)\n      this.getLabel().configure(player, uimanager);\n    }\n\n    // Hide seekbar for live sources without timeshift\n    let isLive = false;\n    let hasTimeShift = false;\n    let switchVisibility = (isLive: boolean, hasTimeShift: boolean) => {\n      if (isLive && !hasTimeShift) {\n        this.hide();\n      } else {\n        this.show();\n      }\n      playbackPositionHandler(null, true);\n      this.refreshPlaybackPosition();\n    };\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      isLive = args.live;\n      if (isLive && this.smoothPlaybackPositionUpdater != null) {\n        this.smoothPlaybackPositionUpdater.clear();\n        this.seekBarType = SeekBarType.Live;\n      } else {\n        this.seekBarType = SeekBarType.Vod;\n      }\n      switchVisibility(isLive, hasTimeShift);\n    });\n    let timeShiftDetector = new PlayerUtils.TimeShiftAvailabilityDetector(player);\n    timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe((sender, args: TimeShiftAvailabilityChangedArgs) => {\n      hasTimeShift = args.timeShiftAvailable;\n      switchVisibility(isLive, hasTimeShift);\n    });\n    // Initial detection\n    liveStreamDetector.detect();\n    timeShiftDetector.detect();\n\n    // Refresh the playback position when the player resized or the UI is configured. The playback position marker\n    // is positioned absolutely and must therefore be updated when the size of the seekbar changes.\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      this.refreshPlaybackPosition();\n    });\n    // Additionally, when this code is called, the seekbar is not part of the UI yet and therefore does not have a size,\n    // resulting in a wrong initial position of the marker. Refreshing it once the UI is configured solved this issue.\n    uimanager.onConfigured.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n    // It can also happen when a new source is loaded\n    player.on(player.exports.PlayerEvent.SourceLoaded, () => {\n      this.refreshPlaybackPosition();\n    });\n    // Add markers when a source is loaded or update when a marker is added or removed\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      playbackPositionHandler();\n    });\n\n    // Set the snappingRange if set in the uimanager config\n    if (typeof uimanager.getConfig().seekbarSnappingRange === 'number') {\n      this.config.snappingRange = uimanager.getConfig().seekbarSnappingRange;\n    }\n\n    // Initialize seekbar\n    playbackPositionHandler(); // Set the playback position\n    this.setBufferPosition(0);\n    this.setSeekPosition(0);\n    if (this.config.smoothPlaybackPositionUpdateIntervalMs !== SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED) {\n      this.configureSmoothPlaybackPositionUpdater(player, uimanager);\n    }\n\n    // Initialize markers\n    this.initializeTimelineMarkers(player, uimanager);\n  }\n\n  private initializeTimelineMarkers(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    const timelineMarkerConfig = {\n      cssPrefix: this.config.cssPrefix,\n      snappingRange: this.config.snappingRange,\n    };\n    this.timelineMarkersHandler = new TimelineMarkersHandler(timelineMarkerConfig, () => this.seekBar.width(), this.seekBarMarkersContainer);\n    this.timelineMarkersHandler.initialize(player, uimanager);\n  }\n\n  private seekWhileScrubbing = (sender: SeekBar, args: SeekPreviewEventArgs) => {\n    if (args.scrubbing) {\n      this.seek(args.position);\n    }\n  };\n\n  private getTargetSeekPosition = (percentage: number) => {\n    let target: number;\n    if (this.player.isLive()) {\n      const maxTimeShift = this.player.getMaxTimeShift();\n      target = maxTimeShift - (maxTimeShift * (percentage / 100));\n    } else {\n      const seekableRangeStart = PlayerUtils.getSeekableRangeStart(this.player, 0);\n      const relativeSeekTarget = this.player.getDuration() * (percentage / 100);\n      target = relativeSeekTarget + seekableRangeStart;\n    }\n\n    return target;\n  }\n\n  private seek = (percentage: number) => {\n    const targetPlaybackPosition = this.getTargetSeekPosition(percentage);\n    if (this.player.isLive()) {\n      this.player.timeShift(targetPlaybackPosition, 'ui');\n    } else {\n      this.player.seek(targetPlaybackPosition, 'ui');\n    }\n  };\n\n  /**\n   * Update seekbar while a live stream with DVR window is paused.\n   * The playback position stays still and the position indicator visually moves towards the back.\n   */\n  private configureLivePausedTimeshiftUpdater(\n    player: PlayerAPI,\n    uimanager: UIInstanceManager,\n    playbackPositionHandler: () => void,\n  ): void {\n    // Regularly update the playback position while the timeout is active\n    this.pausedTimeshiftUpdater = new Timeout(1000, playbackPositionHandler, true);\n\n    // Start updater when a live stream with timeshift window is paused\n    player.on(player.exports.PlayerEvent.Paused, () => {\n      if (player.isLive() && player.getMaxTimeShift() < 0) {\n        this.pausedTimeshiftUpdater.start();\n      }\n    });\n\n    // Stop updater when playback continues (no matter if the updater was started before)\n    player.on(player.exports.PlayerEvent.Play, () => this.pausedTimeshiftUpdater.clear());\n  }\n\n  private configureSmoothPlaybackPositionUpdater(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    /*\n     * Playback position update\n     *\n     * We do not update the position directly from the TimeChanged event, because it arrives very jittery and\n     * results in a jittery position indicator since the CSS transition time is statically set.\n     * To work around this issue, we maintain a local playback position that is updated in a stable regular interval\n     * and kept in sync with the player.\n     */\n    let currentTimeSeekBar = 0;\n    let currentTimePlayer = 0;\n    let updateIntervalMs = 50;\n    let currentTimeUpdateDeltaSecs = updateIntervalMs / 1000;\n\n    this.smoothPlaybackPositionUpdater = new Timeout(updateIntervalMs, () => {\n      if (this.isSeeking()) {\n        return;\n      }\n\n      currentTimeSeekBar += currentTimeUpdateDeltaSecs;\n\n      try {\n        currentTimePlayer = this.getRelativeCurrentTime();\n      } catch (error) {\n        // Detect if the player has been destroyed and stop updating if so\n        if (error instanceof player.exports.PlayerAPINotAvailableError) {\n          this.smoothPlaybackPositionUpdater.clear();\n        }\n\n        // If the current time cannot be read it makes no sense to continue\n        return;\n      }\n\n      // Sync currentTime of seekbar to player\n      let currentTimeDelta = currentTimeSeekBar - currentTimePlayer;\n      // If the delta is larger that 2 secs, directly jump the seekbar to the\n      // player time instead of smoothly fast forwarding/rewinding.\n      if (Math.abs(currentTimeDelta) > 2) {\n        currentTimeSeekBar = currentTimePlayer;\n      }\n      // If currentTimeDelta is negative and below the adjustment threshold,\n      // the player is ahead of the seekbar and we 'fast forward' the seekbar\n      else if (currentTimeDelta <= -currentTimeUpdateDeltaSecs) {\n        currentTimeSeekBar += currentTimeUpdateDeltaSecs;\n      }\n      // If currentTimeDelta is positive and above the adjustment threshold,\n      // the player is behind the seekbar and we 'rewind' the seekbar\n      else if (currentTimeDelta >= currentTimeUpdateDeltaSecs) {\n        currentTimeSeekBar -= currentTimeUpdateDeltaSecs;\n      }\n\n      let playbackPositionPercentage = 100 / player.getDuration() * currentTimeSeekBar;\n      this.setPlaybackPosition(playbackPositionPercentage);\n    }, true);\n\n    let startSmoothPlaybackPositionUpdater = () => {\n      if (!player.isLive()) {\n        currentTimeSeekBar = this.getRelativeCurrentTime();\n        this.smoothPlaybackPositionUpdater.start();\n      }\n    };\n\n    let stopSmoothPlaybackPositionUpdater = () => {\n      this.smoothPlaybackPositionUpdater.clear();\n    };\n\n    player.on(player.exports.PlayerEvent.Play, startSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Playing, startSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Paused, stopSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.PlaybackFinished, stopSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Seeked, () => {\n      currentTimeSeekBar = this.getRelativeCurrentTime();\n    });\n    player.on(player.exports.PlayerEvent.SourceUnloaded, stopSmoothPlaybackPositionUpdater);\n\n    if (player.isPlaying()) {\n      startSmoothPlaybackPositionUpdater();\n    }\n  }\n\n  private getRelativeCurrentTime(): number {\n    return PlayerUtils.getCurrentTimeRelativeToSeekableRange(this.player);\n  }\n\n  release(): void {\n    super.release();\n\n    if (this.smoothPlaybackPositionUpdater) { // object must not necessarily exist, e.g. in volume slider subclass\n      this.smoothPlaybackPositionUpdater.clear();\n    }\n\n    if (this.pausedTimeshiftUpdater) {\n      this.pausedTimeshiftUpdater.clear();\n    }\n\n    if (this.config.enableSeekPreview) {\n      this.onSeekPreview.unsubscribe(this.seekWhileScrubbing);\n    }\n  }\n\n  protected toDomElement(): DOM {\n    if (this.config.vertical) {\n      this.config.cssClasses.push('vertical');\n    }\n\n    let seekBarContainer = new DOM('div', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'role': 'slider',\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\n      'tabindex': this.config.tabIndex.toString(),\n    });\n\n    let seekBar = new DOM('div', {\n      'class': this.prefixCss('seekbar'),\n    });\n    this.seekBar = seekBar;\n\n    // Indicator that shows the buffer fill level\n    let seekBarBufferLevel = new DOM('div', {\n      'class': this.prefixCss('seekbar-bufferlevel'),\n    });\n    this.seekBarBufferPosition = seekBarBufferLevel;\n\n    // Indicator that shows the current playback position\n    let seekBarPlaybackPosition = new DOM('div', {\n      'class': this.prefixCss('seekbar-playbackposition'),\n    });\n    this.seekBarPlaybackPosition = seekBarPlaybackPosition;\n\n    // A marker of the current playback position, e.g. a dot or line\n    let seekBarPlaybackPositionMarker = new DOM('div', {\n      'class': this.prefixCss('seekbar-playbackposition-marker'),\n    });\n    this.seekBarPlaybackPositionMarker = seekBarPlaybackPositionMarker;\n\n    // Indicator that show where a seek will go to\n    let seekBarSeekPosition = new DOM('div', {\n      'class': this.prefixCss('seekbar-seekposition'),\n    });\n    this.seekBarSeekPosition = seekBarSeekPosition;\n\n    // Indicator that shows the full seekbar\n    let seekBarBackdrop = new DOM('div', {\n      'class': this.prefixCss('seekbar-backdrop'),\n    });\n    this.seekBarBackdrop = seekBarBackdrop;\n\n    let seekBarChapterMarkersContainer = new DOM('div', {\n      'class': this.prefixCss('seekbar-markers'),\n    });\n    this.seekBarMarkersContainer = seekBarChapterMarkersContainer;\n\n    seekBar.append(this.seekBarBackdrop, this.seekBarBufferPosition, this.seekBarSeekPosition,\n      this.seekBarPlaybackPosition, this.seekBarMarkersContainer, this.seekBarPlaybackPositionMarker);\n\n    let seeking = false;\n\n    // Define handler functions so we can attach/remove them later\n    let mouseTouchMoveHandler = (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n      // Avoid propagation to VR handler\n      if (this.player.vr != null) {\n        e.stopPropagation();\n      }\n\n      let targetPercentage = 100 * this.getOffset(e);\n      this.setSeekPosition(targetPercentage);\n      this.setPlaybackPosition(targetPercentage);\n      this.onSeekPreviewEvent(targetPercentage, true);\n    };\n\n    let mouseTouchUpHandler = (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      // Remove handlers, seek operation is finished\n      new DOM(document).off('touchmove mousemove', mouseTouchMoveHandler);\n      new DOM(document).off('touchend mouseup', mouseTouchUpHandler);\n\n      let targetPercentage = 100 * this.getOffset(e);\n      let snappedChapter = this.timelineMarkersHandler && this.timelineMarkersHandler.getMarkerAtPosition(targetPercentage);\n\n      this.setSeeking(false);\n      seeking = false;\n\n      // Fire seeked event\n      this.onSeekedEvent(snappedChapter ? snappedChapter.position : targetPercentage);\n    };\n\n    // A seek always start with a touchstart or mousedown directly on the seekbar.\n    // To track a mouse seek also outside the seekbar (for touch events this works automatically),\n    // so the user does not need to take care that the mouse always stays on the seekbar, we attach the mousemove\n    // and mouseup handlers to the whole document. A seek is triggered when the user lifts the mouse key.\n    // A seek mouse gesture is thus basically a click with a long time frame between down and up events.\n    seekBar.on('touchstart mousedown', (e: MouseEvent | TouchEvent) => {\n      let isTouchEvent = BrowserUtils.isTouchSupported && this.isTouchEvent(e);\n\n      // Prevent selection of DOM elements (also prevents mousedown if current event is touchstart)\n      e.preventDefault();\n      // Avoid propagation to VR handler\n      if (this.player.vr != null) {\n        e.stopPropagation();\n      }\n\n      this.setSeeking(true); // Set seeking class on DOM element\n      seeking = true; // Set seek tracking flag\n\n      // Fire seeked event\n      this.onSeekEvent();\n\n      // Add handler to track the seek operation over the whole document\n      new DOM(document).on(isTouchEvent ? 'touchmove' : 'mousemove', mouseTouchMoveHandler);\n      new DOM(document).on(isTouchEvent ? 'touchend' : 'mouseup', mouseTouchUpHandler);\n    });\n\n    // Display seek target indicator when mouse hovers or finger slides over seekbar\n    seekBar.on('touchmove mousemove', (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      if (seeking) {\n        mouseTouchMoveHandler(e);\n      }\n\n      let position = 100 * this.getOffset(e);\n      this.setSeekPosition(position);\n\n      this.onSeekPreviewEvent(position, false);\n\n      if (this.hasLabel() && this.getLabel().isHidden()) {\n        this.getLabel().show();\n      }\n    });\n\n    // Hide seek target indicator when mouse or finger leaves seekbar\n    seekBar.on('touchend mouseleave', (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      this.setSeekPosition(0);\n\n      if (this.hasLabel()) {\n        this.getLabel().hide();\n      }\n    });\n\n    seekBarContainer.append(seekBar);\n\n    if (this.label) {\n      seekBarContainer.append(this.label.getDomElement());\n    }\n\n    return seekBarContainer;\n  }\n\n  /**\n   * Gets the horizontal offset of a mouse/touch event point from the left edge of the seek bar.\n   * @param eventPageX the pageX coordinate of an event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1], where 0 is the left edge and 1 is the right edge\n   */\n  private getHorizontalOffset(eventPageX: number): number {\n    let elementOffsetPx = this.seekBar.offset().left;\n    let widthPx = this.seekBar.width();\n    let offsetPx = eventPageX - elementOffsetPx;\n    let offset = 1 / widthPx * offsetPx;\n\n    return this.sanitizeOffset(offset);\n  }\n\n  /**\n   * Gets the vertical offset of a mouse/touch event point from the bottom edge of the seek bar.\n   * @param eventPageY the pageX coordinate of an event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1], where 0 is the bottom edge and 1 is the top edge\n   */\n  private getVerticalOffset(eventPageY: number): number {\n    let elementOffsetPx = this.seekBar.offset().top;\n    let widthPx = this.seekBar.height();\n    let offsetPx = eventPageY - elementOffsetPx;\n    let offset = 1 / widthPx * offsetPx;\n\n    return 1 - this.sanitizeOffset(offset);\n  }\n\n  /**\n   * Gets the mouse or touch event offset for the current configuration (horizontal or vertical).\n   * @param e the event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1]\n   * @see #getHorizontalOffset\n   * @see #getVerticalOffset\n   */\n  private getOffset(e: MouseEvent | TouchEvent): number {\n    if (BrowserUtils.isTouchSupported && this.isTouchEvent(e)) {\n      if (this.config.vertical) {\n        return this.getVerticalOffset(e.type === 'touchend' ? e.changedTouches[0].pageY : e.touches[0].pageY);\n      } else {\n        return this.getHorizontalOffset(e.type === 'touchend' ? e.changedTouches[0].pageX : e.touches[0].pageX);\n      }\n    }\n    else if (e instanceof MouseEvent) {\n      if (this.config.vertical) {\n        return this.getVerticalOffset(e.pageY);\n      } else {\n        return this.getHorizontalOffset(e.pageX);\n      }\n    }\n    else {\n      if (console) {\n        console.warn('invalid event');\n      }\n      return 0;\n    }\n  }\n\n  /**\n   * Sanitizes the mouse offset to the range of [0, 1].\n   *\n   * When tracking the mouse outside the seek bar, the offset can be outside the desired range and this method\n   * limits it to the desired range. E.g. a mouse event left of the left edge of a seek bar yields an offset below\n   * zero, but to display the seek target on the seek bar, we need to limit it to zero.\n   *\n   * @param offset the offset to sanitize\n   * @returns {number} the sanitized offset.\n   */\n  private sanitizeOffset(offset: number) {\n    // Since we track mouse moves over the whole document, the target can be outside the seek range,\n    // and we need to limit it to the [0, 1] range.\n    if (offset < 0) {\n      offset = 0;\n    } else if (offset > 1) {\n      offset = 1;\n    }\n\n    return offset;\n  }\n\n  /**\n   * Sets the position of the playback position indicator.\n   * @param percent a number between 0 and 100 as returned by the player\n   */\n  setPlaybackPosition(percent: number) {\n    this.playbackPositionPercentage = percent;\n\n    // Set position of the bar\n    this.setPosition(this.seekBarPlaybackPosition, percent);\n\n    // Set position of the marker\n    let totalSize = (this.config.vertical ? (this.seekBar.height() - this.seekBarPlaybackPositionMarker.height()) : this.seekBar.width());\n    let px = (totalSize) / 100 * percent;\n    if (this.config.vertical) {\n      px = this.seekBar.height() - px - this.seekBarPlaybackPositionMarker.height();\n    }\n\n    let style = this.config.vertical ?\n      // -ms-transform required for IE9\n      // -webkit-transform required for Android 4.4 WebView\n      {\n        'transform': 'translateY(' + px + 'px)',\n        '-ms-transform': 'translateY(' + px + 'px)',\n        '-webkit-transform': 'translateY(' + px + 'px)',\n      } :\n      {\n        'transform': 'translateX(' + px + 'px)',\n        '-ms-transform': 'translateX(' + px + 'px)',\n        '-webkit-transform': 'translateX(' + px + 'px)',\n      };\n    this.seekBarPlaybackPositionMarker.css(style);\n  }\n\n  /**\n   * Refreshes the playback position. Can be used by subclasses to refresh the position when\n   * the size of the component changes.\n   */\n  protected refreshPlaybackPosition() {\n    this.setPlaybackPosition(this.playbackPositionPercentage);\n  }\n\n  /**\n   * Sets the position until which media is buffered.\n   * @param percent a number between 0 and 100\n   */\n  setBufferPosition(percent: number) {\n    this.setPosition(this.seekBarBufferPosition, percent);\n  }\n\n  /**\n   * Sets the position where a seek, if executed, would jump to.\n   * @param percent a number between 0 and 100\n   */\n  setSeekPosition(percent: number) {\n    this.setPosition(this.seekBarSeekPosition, percent);\n  }\n\n  /**\n   * Set the actual position (width or height) of a DOM element that represent a bar in the seek bar.\n   * @param element the element to set the position for\n   * @param percent a number between 0 and 100\n   */\n  private setPosition(element: DOM, percent: number) {\n    let scale = percent / 100;\n\n    // When the scale is exactly 1 or very near 1 (and the browser internally rounds it to 1), browsers seem to render\n    // the elements differently and the height gets slightly off, leading to mismatching heights when e.g. the buffer\n    // level bar has a width of 1 and the playback position bar has a width < 1. A jittering buffer level around 1\n    // leads to an even worse flickering effect.\n    // Various changes in CSS styling and DOM hierarchy did not solve the issue so the workaround is to avoid a scale\n    // of exactly 1.\n    if (scale >= 0.99999 && scale <= 1.00001) {\n      scale = 0.99999;\n    }\n\n    let style = this.config.vertical ?\n      // -ms-transform required for IE9\n      // -webkit-transform required for Android 4.4 WebView\n      {\n        'transform': 'scaleY(' + scale + ')',\n        '-ms-transform': 'scaleY(' + scale + ')',\n        '-webkit-transform': 'scaleY(' + scale + ')',\n      } :\n      {\n        'transform': 'scaleX(' + scale + ')',\n        '-ms-transform': 'scaleX(' + scale + ')',\n        '-webkit-transform': 'scaleX(' + scale + ')',\n      };\n    element.css(style);\n  }\n\n  /**\n   * Puts the seek bar into or out of seeking state by adding/removing a class to the DOM element. This can be used\n   * to adjust the styling while seeking.\n   *\n   * @param seeking should be true when entering seek state, false when exiting the seek state\n   */\n  setSeeking(seeking: boolean) {\n    if (seeking) {\n      this.getDomElement().addClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n    } else {\n      this.getDomElement().removeClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n    }\n  }\n\n  /**\n   * Checks if the seek bar is currently in the seek state.\n   * @returns {boolean} true if in seek state, else false\n   */\n  isSeeking(): boolean {\n    return this.getDomElement().hasClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n  }\n\n  /**\n   * Checks if the seek bar has a {@link SeekBarLabel}.\n   * @returns {boolean} true if the seek bar has a label, else false\n   */\n  hasLabel(): boolean {\n    return this.label != null;\n  }\n\n  /**\n   * Gets the label of this seek bar.\n   * @returns {SeekBarLabel} the label if this seek bar has a label, else null\n   */\n  getLabel(): SeekBarLabel | null {\n    return this.label;\n  }\n\n  protected onSeekEvent() {\n    this.seekBarEvents.onSeek.dispatch(this);\n  }\n\n  protected onSeekPreviewEvent(percentage: number, scrubbing: boolean) {\n    let snappedMarker = this.timelineMarkersHandler && this.timelineMarkersHandler.getMarkerAtPosition(percentage);\n\n    let seekPositionPercentage = percentage;\n\n    if (snappedMarker) {\n      if (snappedMarker.duration > 0) {\n        if (percentage < snappedMarker.position) {\n          // Snap the position to the start of the interval if the seek is within the left snap margin\n          // We know that we are within a snap margin when we are outside the marker interval but still\n          // have a snappedMarker\n          seekPositionPercentage = snappedMarker.position;\n        } else if (percentage > snappedMarker.position + snappedMarker.duration) {\n          // Snap the position to the end of the interval if the seek is within the right snap margin\n          seekPositionPercentage = snappedMarker.position + snappedMarker.duration;\n        }\n      } else {\n        // Position markers always snap to their marker position\n        seekPositionPercentage = snappedMarker.position;\n      }\n    }\n\n    if (this.label) {\n      this.label.getDomElement().css({\n        'left': seekPositionPercentage + '%',\n      });\n    }\n\n    this.seekBarEvents.onSeekPreview.dispatch(this, {\n      scrubbing: scrubbing,\n      position: seekPositionPercentage,\n      marker: snappedMarker,\n    });\n  }\n\n  protected onSeekedEvent(percentage: number) {\n    this.seekBarEvents.onSeeked.dispatch(this, percentage);\n  }\n\n  /**\n   * Gets the event that is fired when a scrubbing seek operation is started.\n   * @returns {Event<SeekBar, NoArgs>}\n   */\n  get onSeek(): Event<SeekBar, NoArgs> {\n    return this.seekBarEvents.onSeek.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired during a scrubbing seek (to indicate that the seek preview, i.e. the video frame,\n   * should be updated), or during a normal seek preview when the seek bar is hovered (and the seek target,\n   * i.e. the seek bar label, should be updated).\n   * @returns {Event<SeekBar, SeekPreviewEventArgs>}\n   */\n  get onSeekPreview(): Event<SeekBar, SeekPreviewEventArgs> {\n    return this.seekBarEvents.onSeekPreview.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when a scrubbing seek has finished or when a direct seek is issued.\n   * @returns {Event<SeekBar, number>}\n   */\n  get onSeeked(): Event<SeekBar, number> {\n    return this.seekBarEvents.onSeeked.getEvent();\n  }\n\n\n  protected onShowEvent(): void {\n    super.onShowEvent();\n\n    // Refresh the position of the playback position when the seek bar becomes visible. To correctly set the position,\n    // the DOM element must be fully initialized an have its size calculated, because the position is set as an absolute\n    // value calculated from the size. This required size is not known when it is hidden.\n    // For such cases, we refresh the position here in onShow because here it is guaranteed that the component knows\n    // its size and can set the position correctly.\n    this.refreshPlaybackPosition();\n  }\n\n /**\n   * Checks if TouchEvent is supported.\n   * @returns {boolean} true if TouchEvent not undefined, else false\n   */\n  isTouchEvent(e: UIEvent): e is TouchEvent {\n    return window.TouchEvent && e instanceof TouchEvent;\n  }\n}\n","import {PlayerAPI} from 'bitmovin-player';\n\nexport function getMinBufferLevel(player: PlayerAPI): number {\n\n    const playerDuration = player.getDuration();\n\n    const videoBufferLength = player.getVideoBufferLength();\n    const audioBufferLength = player.getAudioBufferLength();\n    // Calculate the buffer length which is the smaller length of the audio and video buffers. If one of these\n    // buffers is not available, we set it's value to MAX_VALUE to make sure that the other real value is taken\n    // as the buffer length.\n    let bufferLength = Math.min(\n        videoBufferLength != null ? videoBufferLength : Number.MAX_VALUE,\n        audioBufferLength != null ? audioBufferLength : Number.MAX_VALUE);\n    // If both buffer lengths are missing, we set the buffer length to zero\n    if (bufferLength === Number.MAX_VALUE) {\n        bufferLength = 0;\n    }\n\n    return 100 / playerDuration * bufferLength;\n}\n","import { UIUtils } from '../uiutils';\nimport { DOM } from '../dom';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { VolumeController } from '../volumecontroller';\n\nexport enum SeekBarType {\n  Vod,\n  Live,\n  Volume,\n}\n\ninterface Range {\n  min: number;\n  max: number;\n}\n\ninterface KeyStepIncrementsConfig {\n  leftRight: number;\n  upDown: number;\n}\n\nconst coerceValueIntoRange = (\n  value: number,\n  range: Range,\n  cb: (value: number) => void,\n) => {\n  if (value < range.min) {\n    cb(range.min);\n  } else if (value > range.max) {\n    cb(range.max);\n  } else {\n    cb(value);\n  }\n};\n\nexport class SeekBarController {\n  protected keyStepIncrements: KeyStepIncrementsConfig;\n  protected player: PlayerAPI;\n  protected volumeController: VolumeController;\n\n  constructor(\n    keyStepIncrements: KeyStepIncrementsConfig,\n    player: PlayerAPI,\n    volumeController: VolumeController,\n  ) {\n    this.keyStepIncrements = keyStepIncrements;\n    this.player = player;\n    this.volumeController = volumeController;\n  }\n\n  protected arrowKeyControls(\n    currentValue: number,\n    range: Range,\n    valueUpdate: (value: number) => void,\n  ) {\n    const controlValue = Math.floor(currentValue);\n\n    return {\n      left: () => coerceValueIntoRange(controlValue - this.keyStepIncrements.leftRight, range, valueUpdate),\n      right: () => coerceValueIntoRange(controlValue + this.keyStepIncrements.leftRight, range, valueUpdate),\n      up: () => coerceValueIntoRange(controlValue + this.keyStepIncrements.upDown, range, valueUpdate),\n      down: () => coerceValueIntoRange(controlValue - this.keyStepIncrements.upDown, range, valueUpdate),\n      home: () => coerceValueIntoRange(range.min, range, valueUpdate),\n      end: () => coerceValueIntoRange(range.max, range, valueUpdate),\n    };\n  }\n\n  protected seekBarControls(type: SeekBarType) {\n    if (type === SeekBarType.Live) {\n      return this.arrowKeyControls(this.player.getTimeShift(), { min: this.player.getMaxTimeShift(), max: 0 }, this.player.timeShift);\n    } else if (type === SeekBarType.Vod) {\n      return this.arrowKeyControls(this.player.getCurrentTime(), { min: 0, max: this.player.getDuration() }, this.player.seek);\n    } else if (type === SeekBarType.Volume && this.volumeController != null) {\n      const volumeTransition = this.volumeController.startTransition();\n      return this.arrowKeyControls(this.player.getVolume(), { min: 0, max: 100 }, volumeTransition.finish.bind(volumeTransition));\n    }\n  }\n\n  public setSeekBarControls(domElement: DOM, type: () => SeekBarType) {\n    domElement.on('keydown', (e: KeyboardEvent) => {\n      const controls = this.seekBarControls(type());\n      switch (e.keyCode) {\n        case UIUtils.KeyCode.LeftArrow: {\n          controls.left();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.RightArrow: {\n          controls.right();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.UpArrow: {\n          controls.up();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.DownArrow: {\n          controls.down();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.Home: {\n          controls.home();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.End: {\n          controls.end();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.Space: {\n          this.player.isPlaying() ? this.player.pause() : this.player.play();\n          e.preventDefault();\n          break;\n        }\n      }\n    });\n  }\n}","import {Container, ContainerConfig} from './container';\nimport {Label, LabelConfig} from './label';\nimport {Component, ComponentConfig} from './component';\nimport { UIInstanceManager } from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport {ImageLoader} from '../imageloader';\nimport {CssProperties} from '../dom';\nimport { PlayerAPI, Thumbnail } from 'bitmovin-player';\nimport { SeekBar, SeekPreviewEventArgs } from './seekbar';\nimport { PlayerUtils } from '../playerutils';\n\n/**\n * Configuration interface for a {@link SeekBarLabel}.\n */\nexport interface SeekBarLabelConfig extends ContainerConfig {\n  // nothing yet\n}\n\n/**\n * A label for a {@link SeekBar} that can display the seek target time, a thumbnail, and title (e.g. chapter title).\n */\nexport class SeekBarLabel extends Container<SeekBarLabelConfig> {\n\n  private timeLabel: Label<LabelConfig>;\n  private titleLabel: Label<LabelConfig>;\n  private thumbnail: Component<ComponentConfig>;\n\n  private thumbnailImageLoader: ImageLoader;\n\n  private timeFormat: string;\n\n  private appliedMarkerCssClasses: string[] = [];\n  private player: PlayerAPI;\n  private uiManager: UIInstanceManager;\n\n  constructor(config: SeekBarLabelConfig = {}) {\n    super(config);\n\n    this.timeLabel = new Label({ cssClasses: ['seekbar-label-time'] });\n    this.titleLabel = new Label({ cssClasses: ['seekbar-label-title'] });\n    this.thumbnail = new Component({ cssClasses: ['seekbar-thumbnail'], role: 'img' });\n    this.thumbnailImageLoader = new ImageLoader();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-seekbar-label',\n      components: [new Container({\n        components: [\n          this.thumbnail,\n          new Container({\n            components: [this.titleLabel, this.timeLabel],\n            cssClass: 'seekbar-label-metadata',\n          })],\n        cssClass: 'seekbar-label-inner',\n      })],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.player = player;\n    this.uiManager = uimanager;\n    uimanager.onSeekPreview.subscribeRateLimited(this.handleSeekPreview, 100);\n\n    let init = () => {\n      // Set time format depending on source duration\n      this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?\n        StringUtils.FORMAT_HHMMSS : StringUtils.FORMAT_MMSS;\n      // Set initial state of title and thumbnail to handle sourceLoaded when switching to a live-stream\n      this.setTitleText(null);\n      this.setThumbnail(null);\n    };\n\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n    init();\n  }\n\n  private handleSeekPreview = (sender: SeekBar, args: SeekPreviewEventArgs) => {\n    if (this.player.isLive()) {\n      let maxTimeShift = this.player.getMaxTimeShift();\n      let timeShiftPreview = maxTimeShift - maxTimeShift * (args.position / 100);\n\n      this.setTime(timeShiftPreview);\n\n      // In case of a live stream the player expects the time passed into the getThumbnail as a wallClockTime and not\n      // as a relative timeShift value.\n      const convertTimeShiftPreviewToWallClockTime = (targetTimeShift: number): number => {\n        const currentTimeShift = this.player.getTimeShift();\n        const currentTime = this.player.getCurrentTime();\n\n        const wallClockTimeOfLiveEdge = currentTime - currentTimeShift;\n        return wallClockTimeOfLiveEdge + targetTimeShift;\n      };\n\n      const wallClockTime = convertTimeShiftPreviewToWallClockTime(timeShiftPreview);\n      this.setThumbnail(this.player.getThumbnail(wallClockTime));\n\n    } else {\n      let time = this.player.getDuration() * (args.position / 100);\n      this.setTime(time);\n\n      const seekableRangeStart = PlayerUtils.getSeekableRangeStart(this.player, 0);\n      const absoluteSeekTarget = time + seekableRangeStart;\n      this.setThumbnail(this.player.getThumbnail(absoluteSeekTarget));\n    }\n\n    if (args.marker) {\n      this.setTitleText(args.marker.marker.title);\n    } else {\n      this.setTitleText(null);\n    }\n\n    // Remove CSS classes from previous marker\n    if (this.appliedMarkerCssClasses.length > 0) {\n      this.getDomElement().removeClass(this.appliedMarkerCssClasses.join(' '));\n      this.appliedMarkerCssClasses = [];\n    }\n\n    // Add CSS classes of current marker\n    if (args.marker) {\n      const cssClasses = (args.marker.marker.cssClasses || []).map(cssClass => this.prefixCss(cssClass));\n      this.getDomElement().addClass(cssClasses.join(' '));\n      this.appliedMarkerCssClasses = cssClasses;\n    }\n  };\n\n  /**\n   * Sets arbitrary text on the label.\n   * @param text the text to show on the label\n   */\n  setText(text: string) {\n    this.timeLabel.setText(text);\n  }\n\n  /**\n   * Sets a time to be displayed on the label.\n   * @param seconds the time in seconds to display on the label\n   */\n  setTime(seconds: number) {\n    this.setText(StringUtils.secondsToTime(seconds, this.timeFormat));\n  }\n\n  /**\n   * Sets the text on the title label.\n   * @param text the text to show on the label\n   */\n  setTitleText(text = '') {\n    this.titleLabel.setText(text);\n  }\n\n  /**\n   * Sets or removes a thumbnail on the label.\n   * @param thumbnail the thumbnail to display on the label or null to remove a displayed thumbnail\n   */\n  setThumbnail(thumbnail: Thumbnail = null) {\n    let thumbnailElement = this.thumbnail.getDomElement();\n\n    if (thumbnail == null) {\n      thumbnailElement.css({\n        'background-image': null,\n        'display': null,\n        'width': null,\n        'height': null,\n      });\n    }\n    else {\n      // We use the thumbnail image loader to make sure the thumbnail is loaded and it's size is known before be can\n      // calculate the CSS properties and set them on the element.\n      this.thumbnailImageLoader.load(thumbnail.url, (url, width, height) => {\n        // can be checked like that because x/y/w/h are either all present or none\n        // https://www.w3.org/TR/media-frags/#naming-space\n        if (thumbnail.x !== undefined) {\n          thumbnailElement.css(this.thumbnailCssSprite(thumbnail, width, height));\n        } else {\n          thumbnailElement.css(this.thumbnailCssSingleImage(thumbnail, width, height));\n        }\n      });\n    }\n  }\n\n  private thumbnailCssSprite(thumbnail: Thumbnail, width: number, height: number): CssProperties {\n    let thumbnailCountX = width / thumbnail.width;\n    let thumbnailCountY = height / thumbnail.height;\n\n    let thumbnailIndexX = thumbnail.x / thumbnail.width;\n    let thumbnailIndexY = thumbnail.y / thumbnail.height;\n\n    let sizeX = 100 * thumbnailCountX;\n    let sizeY = 100 * thumbnailCountY;\n\n    let offsetX = 100 * thumbnailIndexX;\n    let offsetY = 100 * thumbnailIndexY;\n\n    let aspectRatio = 1 / thumbnail.width * thumbnail.height;\n\n    // The thumbnail size is set by setting the CSS 'width' and 'padding-bottom' properties. 'padding-bottom' is\n    // used because it is relative to the width and can be used to set the aspect ratio of the thumbnail.\n    // A default value for width is set in the stylesheet and can be overwritten from there or anywhere else.\n    return {\n      'display': 'inherit',\n      'background-image': `url(${thumbnail.url})`,\n      'padding-bottom': `${100 * aspectRatio}%`,\n      'background-size': `${sizeX}% ${sizeY}%`,\n      'background-position': `-${offsetX}% -${offsetY}%`,\n    };\n  }\n\n  private thumbnailCssSingleImage(thumbnail: Thumbnail, width: number, height: number): CssProperties {\n    let aspectRatio = 1 / width * height;\n\n    return {\n      'display': 'inherit',\n      'background-image': `url(${thumbnail.url})`,\n      'padding-bottom': `${100 * aspectRatio}%`,\n      'background-size': `100% 100%`,\n      'background-position': `0 0`,\n    };\n  }\n\n  release(): void {\n    super.release();\n\n    this.uiManager.onSeekPreview.unsubscribe(this.handleSeekPreview);\n  }\n}\n","import {ListSelector, ListSelectorConfig} from './listselector';\nimport {DOM} from '../dom';\nimport { i18n, LocalizableText } from '../localization/i18n';\n\n/**\n * A simple select box providing the possibility to select a single item out of a list of available items.\n *\n * DOM example:\n * <code>\n *     <select class='ui-selectbox'>\n *         <option value='key'>label</option>\n *         ...\n *     </select>\n * </code>\n */\n\nexport class SelectBox extends ListSelector<ListSelectorConfig> {\n\n  private selectElement: DOM;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-selectbox',\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let selectElement = new DOM('select', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\n    });\n\n    this.selectElement = selectElement;\n    this.updateDomItems();\n\n    selectElement.on('change', () => {\n      let value = selectElement.val();\n      this.onItemSelectedEvent(value, false);\n    });\n\n    return selectElement;\n  }\n\n  protected updateDomItems(selectedValue: string = null) {\n    // Delete all children\n    this.selectElement.empty();\n\n    // Add updated children\n    for (let item of this.items) {\n      let optionElement = new DOM('option', {\n        'value': String(item.key),\n      }).html(i18n.performLocalization(item.label));\n\n      if (item.key === String(selectedValue)) { // convert selectedValue to string to catch 'null'/null case\n        optionElement.attr('selected', 'selected');\n      }\n\n      this.selectElement.append(optionElement);\n    }\n  }\n\n  protected onItemAddedEvent(value: string) {\n    super.onItemAddedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemRemovedEvent(value: string) {\n    super.onItemRemovedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemSelectedEvent(value: string, updateDomItems: boolean = true) {\n    super.onItemSelectedEvent(value);\n    if (updateDomItems) {\n      this.updateDomItems(value);\n    }\n  }\n}\n","import { Container, ContainerConfig } from './container';\nimport { SelectBox } from './selectbox';\nimport { UIInstanceManager } from '../uimanager';\nimport { Timeout } from '../timeout';\nimport { Event, EventDispatcher, NoArgs } from '../eventdispatcher';\nimport { SettingsPanelPage } from './settingspanelpage';\nimport { SettingsPanelItem } from './settingspanelitem';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { Component, ComponentConfig } from './component';\n\n/**\n * Configuration interface for a {@link SettingsPanel}.\n */\nexport interface SettingsPanelConfig extends ContainerConfig {\n  /**\n   * The delay in milliseconds after which the settings panel will be hidden when there is no user interaction.\n   * Set to -1 to disable automatic hiding.\n   * Default: 3 seconds (3000)\n   */\n  hideDelay?: number;\n\n  /**\n   * Flag to specify if there should be an animation when switching SettingsPanelPages.\n   * Default: true\n   */\n  pageTransitionAnimation?: boolean;\n}\n\nenum NavigationDirection {\n  Forwards,\n  Backwards,\n}\n\n/**\n * A panel containing a list of {@link SettingsPanelPage items}.\n *\n * To configure pages just pass them in the components array.\n *\n * Example:\n *  let settingsPanel = new SettingsPanel({\n *    hidden: true,\n *  });\n *\n *  let settingsPanelPage = new SettingsPanelPage({\n *    components: […]\n *  });\n *\n *  let secondSettingsPanelPage = new SettingsPanelPage({\n *    components: […]\n *  });\n *\n *  settingsPanel.addComponent(settingsPanelPage);\n *  settingsPanel.addComponent(secondSettingsPanelPage);\n *\n * For an example how to navigate between pages @see SettingsPanelPageNavigatorButton\n */\nexport class SettingsPanel extends Container<SettingsPanelConfig> {\n\n  private static readonly CLASS_ACTIVE_PAGE = 'active';\n\n  // navigation handling\n  private activePage: SettingsPanelPage;\n  private navigationStack: SettingsPanelPage[] = [];\n\n  private settingsPanelEvents = {\n    onSettingsStateChanged: new EventDispatcher<SettingsPanel, NoArgs>(),\n  };\n\n  private hideTimeout: Timeout;\n\n  constructor(config: SettingsPanelConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settings-panel',\n      hideDelay: 3000,\n      pageTransitionAnimation: true,\n    } as SettingsPanelConfig, this.config);\n\n    this.activePage = this.getRootPage();\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    uimanager.onControlsHide.subscribe(() => this.hideHoveredSelectBoxes());\n\n    if (config.hideDelay > -1) {\n      this.hideTimeout = new Timeout(config.hideDelay, () => {\n        this.hide();\n        this.hideHoveredSelectBoxes();\n      });\n      this.getDomElement().on('mouseenter', () => {\n        // On mouse enter clear the timeout\n        this.hideTimeout.clear();\n      });\n      this.getDomElement().on('mouseleave', () => {\n        // On mouse leave activate the timeout\n        this.hideTimeout.reset();\n      });\n      this.getDomElement().on('focusin', () => {\n        this.hideTimeout.clear();\n      });\n      this.getDomElement().on('focusout', () => {\n        this.hideTimeout.reset();\n      });\n    }\n\n    this.onHide.subscribe(() => {\n      if (config.hideDelay > -1) {\n        // Clear timeout when hidden from outside\n        this.hideTimeout.clear();\n      }\n\n      // Since we don't reset the actual navigation here we need to simulate a onInactive event in case some panel\n      // needs to do something when they become invisible / inactive.\n      this.activePage.onInactiveEvent();\n    });\n\n    this.onShow.subscribe(() => {\n      // Reset navigation when te panel gets visible to avoid a weird animation when hiding\n      this.resetNavigation(true);\n      // Since we don't need to navigate to the root page again we need to fire the onActive event when the settings\n      // panel gets visible.\n      this.activePage.onActiveEvent();\n\n      if (config.hideDelay > -1) {\n        // Activate timeout when shown\n        this.hideTimeout.start();\n      }\n    });\n\n    // pass event from root page through\n    this.getRootPage().onSettingsStateChanged.subscribe(() => {\n      this.onSettingsStateChangedEvent();\n    });\n\n    this.updateActivePageClass();\n  }\n\n  /**\n   * Returns the current active / visible page\n   * @return {SettingsPanelPage}\n   */\n  getActivePage(): SettingsPanelPage {\n    return this.activePage;\n  }\n\n  /**\n   * Sets the\n   * @deprecated Use {@link setActivePage} instead\n   * @param index\n   */\n  setActivePageIndex(index: number): void {\n    this.setActivePage(this.getPages()[index]);\n  }\n\n  /**\n   * Adds the passed page to the navigation stack and makes it visible.\n   * Use {@link popSettingsPanelPage} to navigate backwards.\n   *\n   * Results in no-op if the target page is the current page.\n   * @params page\n   */\n  setActivePage(targetPage: SettingsPanelPage): void {\n    if (targetPage === this.getActivePage()) {\n      console.warn('Page is already the current one ... skipping navigation');\n      return;\n    }\n\n    this.navigateToPage(\n      targetPage,\n      this.getActivePage(),\n      NavigationDirection.Forwards,\n      !(this.config as SettingsPanelConfig).pageTransitionAnimation,\n    );\n  }\n\n  /**\n   * Resets the navigation stack by navigating back to the root page and displaying it.\n   */\n  popToRootSettingsPanelPage(): void {\n    this.resetNavigation((this.config as SettingsPanelConfig).pageTransitionAnimation);\n  }\n\n  /**\n   * Removes the current page from the navigation stack and makes the previous one visible.\n   * Results in a no-op if we are already on the root page.\n   */\n  popSettingsPanelPage() {\n    if (this.navigationStack.length === 0) {\n      console.warn('Already on the root page ... skipping navigation');\n      return;\n    }\n\n    let targetPage = this.navigationStack[this.navigationStack.length - 2];\n    // The root part isn't part of the navigation stack so handle it explicitly here\n    if (!targetPage) {\n      targetPage = this.getRootPage();\n    }\n\n    this.navigateToPage(\n      targetPage,\n      this.activePage,\n      NavigationDirection.Backwards,\n      !(this.config as SettingsPanelConfig).pageTransitionAnimation,\n    );\n  }\n\n  /**\n   * Checks if there are active settings within the root page of the settings panel.\n   * An active setting is a setting that is visible and enabled, which the user can interact with.\n   * @returns {boolean} true if there are active settings, false if the panel is functionally empty to a user\n   */\n  rootPageHasActiveSettings(): boolean {\n    return this.getRootPage().hasActiveSettings();\n  }\n\n  /**\n   * Return all configured pages\n   * @returns {SettingsPanelPage[]}\n   */\n  getPages(): SettingsPanelPage[] {\n    return <SettingsPanelPage[]>this.config.components.filter(component => component instanceof SettingsPanelPage);\n  }\n\n  get onSettingsStateChanged(): Event<SettingsPanel, NoArgs> {\n    return this.settingsPanelEvents.onSettingsStateChanged.getEvent();\n  }\n\n  release(): void {\n    super.release();\n    if (this.hideTimeout) {\n      this.hideTimeout.clear();\n    }\n  }\n\n  // Support adding settingsPanelPages after initialization\n  addComponent(component: Component<ComponentConfig>) {\n    if (this.getPages().length === 0 && component instanceof SettingsPanelPage) {\n      this.activePage = component;\n    }\n    super.addComponent(component);\n  }\n\n  private updateActivePageClass(): void {\n    this.getPages().forEach((page: SettingsPanelPage) => {\n      if (page === this.activePage) {\n        page.getDomElement().addClass(this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));\n      } else {\n        page.getDomElement().removeClass(this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));\n      }\n    });\n  }\n\n  private resetNavigation(resetNavigationOnShow: boolean): void {\n    const sourcePage = this.getActivePage();\n    const rootPage = this.getRootPage();\n    if (sourcePage) {\n      // Since the onInactiveEvent was already fired in the onHide we need to suppress it here\n      if (!resetNavigationOnShow) {\n        sourcePage.onInactiveEvent();\n      }\n    }\n    this.navigationStack = [];\n    this.animateNavigation(rootPage, sourcePage, resetNavigationOnShow);\n    this.activePage = rootPage;\n    this.updateActivePageClass();\n  }\n\n  private navigateToPage(\n    targetPage: SettingsPanelPage,\n    sourcePage: SettingsPanelPage,\n    direction: NavigationDirection,\n    skipAnimation: boolean,\n  ): void {\n    this.activePage = targetPage;\n\n    if (direction === NavigationDirection.Forwards) {\n      this.navigationStack.push(targetPage);\n    } else {\n      this.navigationStack.pop();\n    }\n\n    this.animateNavigation(targetPage, sourcePage, skipAnimation);\n\n    this.updateActivePageClass();\n    targetPage.onActiveEvent();\n    sourcePage.onInactiveEvent();\n  }\n\n  /**\n   * @param targetPage\n   * @param sourcePage\n   * @param skipAnimation This is just an internal flag if we want to have an animation. It is set true when we reset\n   * the navigation within the onShow callback of the settingsPanel. In this case we don't want an actual animation but\n   * the recalculation of the dimension of the settingsPanel.\n   * This is independent of the pageTransitionAnimation flag.\n   */\n  private animateNavigation(targetPage: SettingsPanelPage, sourcePage: SettingsPanelPage, skipAnimation: boolean) {\n    if (!(this.config as SettingsPanelConfig).pageTransitionAnimation) {\n      return;\n    }\n\n    const settingsPanelDomElement = this.getDomElement();\n    const settingsPanelHTMLElement = this.getDomElement().get(0);\n\n    // get current dimension\n    const settingsPanelWidth = settingsPanelHTMLElement.scrollWidth;\n    const settingsPanelHeight = settingsPanelHTMLElement.scrollHeight;\n\n    // calculate target size of the settings panel\n    sourcePage.getDomElement().css('display', 'none');\n    this.getDomElement().css({ width: '', height: '' }); // let css auto settings kick in again\n\n    const targetPageHtmlElement = targetPage.getDomElement().get(0);\n    // clone the targetPage DOM element so that we can calculate the width / height how they will be after\n    // switching the page. We are using a clone to prevent (mostly styling) side-effects on the real DOM element\n    const clone = targetPageHtmlElement.cloneNode(true) as HTMLElement;\n    // append to parent so we get the 'real' size\n    const containerWrapper = targetPageHtmlElement.parentNode;\n    containerWrapper.appendChild(clone);\n    // set clone visible\n    clone.style.display = 'block';\n\n    // collect target dimension\n    const targetSettingsPanelWidth = settingsPanelHTMLElement.scrollWidth;\n    const targetSettingsPanelHeight = settingsPanelHTMLElement.scrollHeight;\n\n    // remove clone from the DOM\n    clone.parentElement.removeChild(clone); // .remove() is not working in IE\n    sourcePage.getDomElement().css('display', '');\n\n    // set the values back to the current ones that the browser animates it (browsers don't animate 'auto' values)\n    settingsPanelDomElement.css({\n      width: settingsPanelWidth + 'px',\n      height: settingsPanelHeight + 'px',\n    });\n\n    if (!skipAnimation) {\n      // We need to force the browser to reflow between setting the width and height that we actually get a animation\n      this.forceBrowserReflow();\n    }\n\n    // set the values to the target dimension\n    settingsPanelDomElement.css({\n      width: targetSettingsPanelWidth + 'px',\n      height: targetSettingsPanelHeight + 'px',\n    });\n  }\n\n  private forceBrowserReflow(): void {\n    // Force the browser to reflow the layout\n    // https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    this.getDomElement().get(0).offsetLeft;\n  }\n\n  /**\n   * Hack for IE + Firefox\n   * when the settings panel fades out while an item of a select box is still hovered, the select box will not fade out\n   * while the settings panel does. This would leave a floating select box, which is just weird\n   */\n  private hideHoveredSelectBoxes(): void {\n    this.getComputedItems().forEach((item: SettingsPanelItem) => {\n      if (item.isActive() && (item as any).setting instanceof SelectBox) {\n        const selectBox = (item as any).setting as SelectBox;\n        const oldDisplay = selectBox.getDomElement().css('display');\n        if (oldDisplay === 'none') {\n          // if oldDisplay is already 'none', no need to set to 'none' again. It could lead to race condition\n          // wherein the display is irreversibly set to 'none' when browser tab/window is not active because\n          // requestAnimationFrame is either delayed or paused in some browsers in inactive state\n          return;\n        }\n\n        // updating the display to none marks the select-box as inactive, so it will be hidden with the rest\n        // we just have to make sure to reset this as soon as possible\n        selectBox.getDomElement().css('display', 'none');\n        if (window.requestAnimationFrame) {\n          requestAnimationFrame(() => {\n            selectBox.getDomElement().css('display', oldDisplay);\n          });\n        } else {\n          // IE9 has no requestAnimationFrame, set the value directly. It has no optimization about ignoring DOM-changes\n          // between animationFrames\n          selectBox.getDomElement().css('display', oldDisplay);\n        }\n      }\n    });\n  }\n\n  // collect all items from all pages (see hideHoveredSelectBoxes)\n  private getComputedItems(): SettingsPanelItem[] {\n    const allItems: SettingsPanelItem[] = [];\n    for (let page of this.getPages()) {\n      allItems.push(...page.getItems());\n    }\n    return allItems;\n  }\n\n  private getRootPage(): SettingsPanelPage {\n    return this.getPages()[0];\n  }\n\n  protected onSettingsStateChangedEvent() {\n    this.settingsPanelEvents.onSettingsStateChanged.dispatch(this);\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {Component, ComponentConfig} from './component';\nimport {Event, EventDispatcher, NoArgs} from '../eventdispatcher';\nimport { Label, LabelConfig } from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {SelectBox} from './selectbox';\nimport {ListBox} from './listbox';\nimport {VideoQualitySelectBox} from './videoqualityselectbox';\nimport {AudioQualitySelectBox} from './audioqualityselectbox';\nimport {PlaybackSpeedSelectBox} from './playbackspeedselectbox';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { LocalizableText } from '../localization/i18n';\n\n/**\n * An item for a {@link SettingsPanelPage},\n * Containing an optional {@link Label} and a component that configures a setting.\n * If the components is a {@link SelectBox} it will handle the logic of displaying it or not\n */\nexport class SettingsPanelItem extends Container<ContainerConfig> {\n\n  private label: Component<ComponentConfig>;\n  private setting: Component<ComponentConfig>;\n\n  private settingsPanelItemEvents = {\n    onActiveChanged: new EventDispatcher<SettingsPanelItem, NoArgs>(),\n  };\n\n  constructor(label: LocalizableText | Component<ComponentConfig>, setting: Component<ComponentConfig>, config: ContainerConfig = {}) {\n    super(config);\n\n    this.setting = setting;\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settings-panel-item',\n      role: 'menuitem',\n    }, this.config);\n\n    if (label !== null) {\n      if (label instanceof Component) {\n        this.label = label;\n      } else {\n        this.label = new Label({ text: label, for: this.setting.getConfig().id } as LabelConfig);\n      }\n      this.addComponent(this.label);\n    }\n\n    this.addComponent(this.setting);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    if (this.setting instanceof SelectBox || this.setting instanceof ListBox) {\n      let handleConfigItemChanged = () => {\n        if (!(this.setting instanceof SelectBox) && !(this.setting instanceof ListBox)) {\n          return;\n        }\n        // The minimum number of items that must be available for the setting to be displayed\n        // By default, at least two items must be available, else a selection is not possible\n        let minItemsToDisplay = 2;\n        // Audio/video quality select boxes contain an additional 'auto' mode, which in combination with a single\n        // available quality also does not make sense\n        if ((this.setting instanceof VideoQualitySelectBox && this.setting.hasAutoItem())\n          || this.setting instanceof AudioQualitySelectBox) {\n          minItemsToDisplay = 3;\n        }\n\n        if (this.setting.itemCount() < minItemsToDisplay) {\n          // Hide the setting if no meaningful choice is available\n          this.hide();\n        } else if (this.setting instanceof PlaybackSpeedSelectBox\n          && !uimanager.getConfig().playbackSpeedSelectionEnabled) {\n          // Hide the PlaybackSpeedSelectBox if disabled in config\n          this.hide();\n        } else {\n          this.show();\n        }\n\n        // Visibility might have changed and therefore the active state might have changed so we fire the event\n        // TODO fire only when state has really changed (e.g. check if visibility has really changed)\n        this.onActiveChangedEvent();\n\n        this.getDomElement().attr('aria-haspopup', 'true');\n      };\n\n      this.setting.onItemAdded.subscribe(handleConfigItemChanged);\n      this.setting.onItemRemoved.subscribe(handleConfigItemChanged);\n\n      // Initialize hidden state\n      handleConfigItemChanged();\n    }\n  }\n\n  /**\n   * Checks if this settings panel item is active, i.e. visible and enabled and a user can interact with it.\n   * @returns {boolean} true if the panel is active, else false\n   */\n  isActive(): boolean {\n    return this.isShown();\n  }\n\n  protected onActiveChangedEvent() {\n    this.settingsPanelItemEvents.onActiveChanged.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the 'active' state of this item changes.\n   * @see #isActive\n   * @returns {Event<SettingsPanelItem, NoArgs>}\n   */\n  get onActiveChanged(): Event<SettingsPanelItem, NoArgs> {\n    return this.settingsPanelItemEvents.onActiveChanged.getEvent();\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {SettingsPanelItem} from './settingspanelitem';\nimport {UIInstanceManager} from '../uimanager';\nimport {Event, EventDispatcher, NoArgs} from '../eventdispatcher';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { BrowserUtils } from '../browserutils';\n\n/**\n * A panel containing a list of {@link SettingsPanelItem items} that represent labelled settings.\n */\nexport class SettingsPanelPage extends Container<ContainerConfig> {\n\n  private static readonly CLASS_LAST = 'last';\n\n  private settingsPanelPageEvents = {\n    onSettingsStateChanged: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n    onActive: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n    onInactive: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n  };\n\n  constructor(config: ContainerConfig) {\n    super(config);\n\n    this.config = this.mergeConfig<ContainerConfig>(config, {\n      cssClass: 'ui-settings-panel-page',\n      role: 'menu',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    // Fire event when the state of a settings-item has changed\n    let settingsStateChangedHandler = () => {\n      this.onSettingsStateChangedEvent();\n\n      // Attach marker class to last visible item\n      let lastShownItem = null;\n      for (let component of this.getItems()) {\n        component.getDomElement().removeClass(this.prefixCss(SettingsPanelPage.CLASS_LAST));\n        if (component.isShown()) {\n          lastShownItem = component;\n        }\n      }\n      if (lastShownItem) {\n        lastShownItem.getDomElement().addClass(this.prefixCss(SettingsPanelPage.CLASS_LAST));\n      }\n    };\n    for (let component of this.getItems()) {\n      component.onActiveChanged.subscribe(settingsStateChangedHandler);\n    }\n  }\n\n  hasActiveSettings(): boolean {\n    for (let component of this.getItems()) {\n      if (component.isActive()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getItems(): SettingsPanelItem[] {\n    return <SettingsPanelItem[]>this.config.components.filter(component => component instanceof SettingsPanelItem);\n  }\n\n  onSettingsStateChangedEvent() {\n    this.settingsPanelPageEvents.onSettingsStateChanged.dispatch(this);\n  }\n\n  get onSettingsStateChanged(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onSettingsStateChanged.getEvent();\n  }\n\n  onActiveEvent() {\n    const activeItems = this.getItems().filter((item) => item.isActive());\n\n    this.settingsPanelPageEvents.onActive.dispatch(this);\n    // Disable focus for iOS and iPadOS 13. They open select boxes automatically on focus and we want to avoid that.\n    if (activeItems.length > 0 && !BrowserUtils.isIOS && !(BrowserUtils.isMacIntel && BrowserUtils.isTouchSupported)) {\n      activeItems[0].getDomElement().focusToFirstInput();\n    }\n  }\n\n  get onActive(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onActive.getEvent();\n  }\n\n  onInactiveEvent() {\n    this.settingsPanelPageEvents.onInactive.dispatch(this);\n  }\n\n  get onInactive(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onInactive.getEvent();\n  }\n}\n","import {UIInstanceManager} from '../uimanager';\nimport {SettingsPanelPageNavigatorButton, SettingsPanelPageNavigatorConfig} from './settingspanelpagenavigatorbutton';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport class SettingsPanelPageBackButton extends SettingsPanelPageNavigatorButton {\n\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingspanelpagebackbutton',\n      text: 'back',\n    } as SettingsPanelPageNavigatorConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      this.popPage();\n    });\n  }\n}\n","import {Button, ButtonConfig} from './button';\nimport {SettingsPanel} from './settingspanel';\nimport {SettingsPanelPage} from './settingspanelpage';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\n\n/**\n * Configuration interface for a {@link SettingsPanelPageNavigatorButton}\n */\nexport interface SettingsPanelPageNavigatorConfig extends ButtonConfig {\n  /**\n   * Container `SettingsPanel` where the navigation takes place\n   */\n  container: SettingsPanel;\n  /**\n   * Page where the button should navigate to\n   * If empty it will navigate to the root page (not intended to use as navigate back behavior)\n   */\n  targetPage?: SettingsPanelPage;\n\n  /**\n   * WCAG20 standard: Establishes relationships between objects and their label(s)\n   */\n  ariaLabelledBy?: string;\n}\n\n/**\n * Can be used to navigate between SettingsPanelPages\n *\n * Example:\n *  let settingPanelNavigationButton = new SettingsPanelPageNavigatorButton({\n *    container: settingsPanel,\n *    targetPage: settingsPanelPage,\n *  });\n *\n *  settingsPanelPage.addComponent(settingPanelNavigationButton);\n *\n * Don't forget to add the settingPanelNavigationButton to the settingsPanelPage.\n */\nexport class SettingsPanelPageNavigatorButton extends Button<SettingsPanelPageNavigatorConfig> {\n  private readonly container: SettingsPanel;\n  private readonly targetPage?: SettingsPanelPage;\n\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n    this.config = this.mergeConfig(config, {} as SettingsPanelPageNavigatorConfig, this.config);\n\n    this.container = (this.config as SettingsPanelPageNavigatorConfig).container;\n    this.targetPage = (this.config as SettingsPanelPageNavigatorConfig).targetPage;\n  }\n\n  /**\n   * navigate one level back\n   */\n  popPage() {\n    this.container.popSettingsPanelPage();\n  }\n\n  /**\n   * navigate to the target page\n   */\n  pushTargetPage() {\n    this.container.setActivePage(this.targetPage);\n  }\n}\n","import {UIInstanceManager} from '../uimanager';\nimport {SettingsPanelPageNavigatorButton, SettingsPanelPageNavigatorConfig} from './settingspanelpagenavigatorbutton';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\nexport class SettingsPanelPageOpenButton extends SettingsPanelPageNavigatorButton {\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingspanelpageopenbutton',\n      text: i18n.getLocalizer('open'),\n      role: 'menuitem',\n    } as SettingsPanelPageNavigatorConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.getDomElement().attr('aria-haspopup', 'true');\n    this.getDomElement().attr('aria-owns', this.config.targetPage.getConfig().id);\n\n    this.onClick.subscribe(() => {\n      this.pushTargetPage();\n    });\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {SettingsPanel} from './settingspanel';\nimport {UIInstanceManager} from '../uimanager';\nimport {Component, ComponentConfig} from './component';\nimport {ArrayUtils} from '../arrayutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link SettingsToggleButton}.\n */\nexport interface SettingsToggleButtonConfig extends ToggleButtonConfig {\n  /**\n   * The settings panel whose visibility the button should toggle.\n   */\n  settingsPanel: SettingsPanel;\n\n  /**\n   * Decides if the button should be automatically hidden when the settings panel does not contain any active settings.\n   * Default: true\n   */\n  autoHideWhenNoActiveSettings?: boolean;\n}\n\n/**\n * A button that toggles visibility of a settings panel.\n */\nexport class SettingsToggleButton extends ToggleButton<SettingsToggleButtonConfig> {\n\n  private visibleSettingsPanels: SettingsPanel[] = [];\n\n  constructor(config: SettingsToggleButtonConfig) {\n    super(config);\n\n    if (!config.settingsPanel) {\n      throw new Error('Required SettingsPanel is missing');\n    }\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingstogglebutton',\n      text: i18n.getLocalizer('settings'),\n      settingsPanel: null,\n      autoHideWhenNoActiveSettings: true,\n      role: 'pop-up button',\n    }, <SettingsToggleButtonConfig>this.config);\n\n    /**\n     * WCAG20 standard defines which popup menu (element id) is owned by the button\n     */\n    this.getDomElement().attr('aria-owns', config.settingsPanel.getActivePage().getConfig().id);\n\n    /**\n     * WCAG20 standard defines that a button has a popup menu bound to it\n     */\n    this.getDomElement().attr('aria-haspopup', 'true');\n\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let settingsPanel = config.settingsPanel;\n\n    this.onClick.subscribe(() => {\n      // only hide other `SettingsPanel`s if a new one will be opened\n      if (!settingsPanel.isShown()) {\n        // Hide all open SettingsPanels before opening this button's panel\n        // (We need to iterate a copy because hiding them will automatically remove themselves from the array\n        // due to the subscribeOnce above)\n        this.visibleSettingsPanels.slice().forEach(settingsPanel => settingsPanel.hide());\n      }\n      settingsPanel.toggleHidden();\n    });\n    settingsPanel.onShow.subscribe(() => {\n      // Set toggle status to on when the settings panel shows\n      this.on();\n    });\n    settingsPanel.onHide.subscribe(() => {\n      // Set toggle status to off when the settings panel hides\n      this.off();\n    });\n\n    // Ensure that only one `SettingPanel` is visible at once\n    // Keep track of shown SettingsPanels\n    uimanager.onComponentShow.subscribe((sender: Component<ComponentConfig>) => {\n      if (sender instanceof SettingsPanel) {\n        this.visibleSettingsPanels.push(sender);\n        sender.onHide.subscribeOnce(() => ArrayUtils.remove(this.visibleSettingsPanels, sender));\n      }\n    });\n\n    // Handle automatic hiding of the button if there are no settings for the user to interact with\n    if (config.autoHideWhenNoActiveSettings) {\n      // Setup handler to show/hide button when the settings change\n      let settingsPanelItemsChangedHandler = () => {\n        if (settingsPanel.rootPageHasActiveSettings()) {\n          if (this.isHidden()) {\n            this.show();\n          }\n        } else {\n          if (this.isShown()) {\n            this.hide();\n          }\n        }\n      };\n      // Wire the handler to the event\n      settingsPanel.onSettingsStateChanged.subscribe(settingsPanelItemsChangedHandler);\n      // Call handler for first init at startup\n      settingsPanelItemsChangedHandler();\n    }\n  }\n}\n","import {Component, ComponentConfig} from './component';\n\n/**\n * A dummy component that just reserves some space and does nothing else.\n */\nexport class Spacer extends Component<ComponentConfig> {\n\n  constructor(config: ComponentConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-spacer',\n    }, this.config);\n  }\n\n\n  protected onShowEvent(): void {\n    // disable event firing by overwriting and not calling super\n  }\n\n  protected onHideEvent(): void {\n    // disable event firing by overwriting and not calling super\n  }\n\n  protected onHoverChangedEvent(hovered: boolean): void {\n    // disable event firing by overwriting and not calling super\n  }\n}","import {ListBox} from './listbox';\nimport {UIInstanceManager} from '../uimanager';\nimport {SubtitleSwitchHandler} from '../subtitleutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A element that is similar to a select box where the user can select a subtitle\n */\nexport class SubtitleListBox extends ListBox {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new SubtitleSwitchHandler(player, this, uimanager);\n  }\n}\n","import { Container, ContainerConfig } from './container';\nimport { UIInstanceManager } from '../uimanager';\nimport { Label, LabelConfig } from './label';\nimport { ComponentConfig, Component } from './component';\nimport { ControlBar } from './controlbar';\nimport { EventDispatcher } from '../eventdispatcher';\nimport { DOM, Size } from '../dom';\nimport { PlayerAPI, SubtitleCueEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\nimport { VttUtils } from '../vttutils';\nimport { VTTProperties } from 'bitmovin-player/types/subtitles/vtt/API';\n\ninterface SubtitleCropDetectionResult {\n  top: boolean;\n  right: boolean;\n  bottom: boolean;\n  left: boolean;\n}\n\n/**\n * Overlays the player to display subtitles.\n */\nexport class SubtitleOverlay extends Container<ContainerConfig> {\n\n  private subtitleManager: ActiveSubtitleManager;\n  private previewSubtitleActive: boolean;\n  private previewSubtitle: SubtitleLabel;\n\n  private preprocessLabelEventCallback = new EventDispatcher<SubtitleCueEvent, SubtitleLabel>();\n  private subtitleContainerManager: SubtitleRegionContainerManager;\n\n  private static readonly CLASS_CONTROLBAR_VISIBLE = 'controlbar-visible';\n  private static readonly CLASS_CEA_608 = 'cea608';\n\n  // The number of rows in a cea608 grid\n  private static readonly CEA608_NUM_ROWS = 15;\n  // The number of columns in a cea608 grid\n  private static readonly CEA608_NUM_COLUMNS = 32;\n  // The offset in percent for one row (which is also the height of a row)\n  private static readonly CEA608_ROW_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_ROWS;\n  // The offset in percent for one column (which is also the width of a column)\n  private static readonly CEA608_COLUMN_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_COLUMNS;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.previewSubtitleActive = false;\n    this.previewSubtitle = new SubtitleLabel({ text: i18n.getLocalizer('subtitle.example') });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitle-overlay',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let subtitleManager = new ActiveSubtitleManager();\n    this.subtitleManager = subtitleManager;\n\n    this.subtitleContainerManager = new SubtitleRegionContainerManager(this);\n\n    player.on(player.exports.PlayerEvent.CueEnter, (event: SubtitleCueEvent) => {\n      const label = this.generateLabel(event);\n      subtitleManager.cueEnter(event, label);\n\n      this.preprocessLabelEventCallback.dispatch(event, label);\n\n      if (this.previewSubtitleActive) {\n        this.subtitleContainerManager.removeLabel(this.previewSubtitle);\n      }\n\n      this.show();\n\n      this.subtitleContainerManager.addLabel(label, this.getDomElement().size());\n      this.updateComponents();\n\n      if (uimanager.getConfig().forceSubtitlesIntoViewContainer) {\n        this.handleSubtitleCropping(label);\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.CueUpdate, (event: SubtitleCueEvent) => {\n      const label = this.generateLabel(event);\n      const labelToReplace = subtitleManager.cueUpdate(event, label);\n\n      this.preprocessLabelEventCallback.dispatch(event, label);\n\n      if (labelToReplace) {\n        this.subtitleContainerManager.replaceLabel(labelToReplace, label);\n      }\n\n      if (uimanager.getConfig().forceSubtitlesIntoViewContainer) {\n        this.handleSubtitleCropping(label);\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.CueExit, (event: SubtitleCueEvent) => {\n      let labelToRemove = subtitleManager.cueExit(event);\n\n      if (labelToRemove) {\n        this.subtitleContainerManager.removeLabel(labelToRemove);\n        this.updateComponents();\n      }\n\n      if (!subtitleManager.hasCues) {\n        if (!this.previewSubtitleActive) {\n          this.hide();\n        } else {\n          this.subtitleContainerManager.addLabel(this.previewSubtitle);\n          this.updateComponents();\n        }\n      }\n    });\n\n    let subtitleClearHandler = () => {\n      this.hide();\n      this.subtitleContainerManager.clear();\n      subtitleManager.clear();\n      this.removeComponents();\n      this.updateComponents();\n    };\n\n    const clearInactiveCues = () => {\n      const removedActiveCues = subtitleManager.clearInactiveCues(player.getCurrentTime());\n      removedActiveCues.forEach(toRemove => {\n        this.subtitleContainerManager.removeLabel(toRemove.label);\n      });\n    };\n\n    player.on(player.exports.PlayerEvent.AudioChanged, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SubtitleEnabled, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SubtitleDisabled, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.Seeked, clearInactiveCues);\n    player.on(player.exports.PlayerEvent.TimeShifted, clearInactiveCues);\n    player.on(player.exports.PlayerEvent.PlaybackFinished, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, subtitleClearHandler);\n\n    uimanager.onComponentShow.subscribe((component: Component<ComponentConfig>) => {\n      if (component instanceof ControlBar) {\n        this.getDomElement().addClass(this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));\n      }\n    });\n    uimanager.onComponentHide.subscribe((component: Component<ComponentConfig>) => {\n      if (component instanceof ControlBar) {\n        this.getDomElement().removeClass(this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));\n      }\n    });\n\n    this.configureCea608Captions(player, uimanager);\n    // Init\n    subtitleClearHandler();\n  }\n\n  detectCroppedSubtitleLabel(\n    labelElement: HTMLElement,\n  ): SubtitleCropDetectionResult {\n    const parent = this.getDomElement().get(0);\n\n    const childRect = labelElement.getBoundingClientRect();\n    const parentRect = parent.getBoundingClientRect();\n\n    return {\n      top: childRect.top < parentRect.top,\n      right: childRect.right > parentRect.right,\n      bottom: childRect.bottom > parentRect.bottom,\n      left: childRect.left < parentRect.left,\n    };\n  }\n\n  handleSubtitleCropping(label: SubtitleLabel) {\n    const labelDomElement = label.getDomElement();\n    const cropDetection = this.detectCroppedSubtitleLabel(\n      labelDomElement.get(0),\n    );\n\n    if (cropDetection.top) {\n      labelDomElement.css('top', '0');\n      labelDomElement.removeCss('bottom');\n    }\n\n    if (cropDetection.right) {\n      labelDomElement.css('right', '0');\n      labelDomElement.removeCss('left');\n    }\n\n    if (cropDetection.bottom) {\n      labelDomElement.css('bottom', '0');\n      labelDomElement.removeCss('top');\n    }\n\n    if (cropDetection.left) {\n      labelDomElement.css('left', '0');\n      labelDomElement.removeCss('right');\n    }\n  }\n\n  generateLabel(event: SubtitleCueEvent): SubtitleLabel {\n    // Sanitize cue data (must be done before the cue ID is generated in subtitleManager.cueEnter / update)\n    if (event.position) {\n      // Sometimes the positions are undefined, we assume them to be zero\n      event.position.row = event.position.row || 0;\n      event.position.column = event.position.column || 0;\n    }\n\n    const label = new SubtitleLabel({\n      // Prefer the HTML subtitle text if set, else try generating a image tag as string from the image attribute,\n      // else use the plain text\n      text: event.html || ActiveSubtitleManager.generateImageTagText(event.image) || event.text,\n      vtt: event.vtt,\n      region: event.region,\n      regionStyle: event.regionStyle,\n    });\n\n    return label;\n  }\n\n  configureCea608Captions(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // The calculated font size\n    let fontSize = 0;\n    // The required letter spacing spread the text characters evenly across the grid\n    let fontLetterSpacing = 0;\n    // Flag telling if a font size calculation is required of if the current values are valid\n    let fontSizeCalculationRequired = true;\n    // Flag telling if the CEA-608 mode is enabled\n    let enabled = false;\n\n    const updateCEA608FontSize = () => {\n      const dummyLabel = new SubtitleLabel({ text: 'X' });\n      dummyLabel.getDomElement().css({\n        // By using a large font size we do not need to use multiple letters and can get still an\n        // accurate measurement even though the returned size is an integer value\n        'font-size': '200px',\n        'line-height': '200px',\n        'visibility': 'hidden',\n      });\n      this.addComponent(dummyLabel);\n      this.updateComponents();\n      this.show();\n\n      const dummyLabelCharWidth = dummyLabel.getDomElement().width();\n      const dummyLabelCharHeight = dummyLabel.getDomElement().height();\n      const fontSizeRatio = dummyLabelCharWidth / dummyLabelCharHeight;\n\n      this.removeComponent(dummyLabel);\n      this.updateComponents();\n      if (!this.subtitleManager.hasCues) {\n        this.hide();\n      }\n\n      // We subtract 1px here to avoid line breaks at the right border of the subtitle overlay that can happen\n      // when texts contain whitespaces. It's probably some kind of pixel rounding issue in the browser's\n      // layouting, but the actual reason could not be determined. Aiming for a target width - 1px would work in\n      // most browsers, but Safari has a \"quantized\" font size rendering with huge steps in between so we need\n      // to subtract some more pixels to avoid line breaks there as well.\n      const subtitleOverlayWidth = this.getDomElement().width() - 10;\n      const subtitleOverlayHeight = this.getDomElement().height();\n\n      // The size ratio of the letter grid\n      const fontGridSizeRatio = (dummyLabelCharWidth * SubtitleOverlay.CEA608_NUM_COLUMNS) /\n        (dummyLabelCharHeight * SubtitleOverlay.CEA608_NUM_ROWS);\n      // The size ratio of the available space for the grid\n      const subtitleOverlaySizeRatio = subtitleOverlayWidth / subtitleOverlayHeight;\n\n      if (subtitleOverlaySizeRatio > fontGridSizeRatio) {\n        // When the available space is wider than the text grid, the font size is simply\n        // determined by the height of the available space.\n        fontSize = subtitleOverlayHeight / SubtitleOverlay.CEA608_NUM_ROWS;\n\n        // Calculate the additional letter spacing required to evenly spread the text across the grid's width\n        const gridSlotWidth = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS;\n        const fontCharWidth = fontSize * fontSizeRatio;\n        fontLetterSpacing = gridSlotWidth - fontCharWidth;\n      } else {\n        // When the available space is not wide enough, texts would vertically overlap if we take\n        // the height as a base for the font size, so we need to limit the height. We do that\n        // by determining the font size by the width of the available space.\n        fontSize = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS / fontSizeRatio;\n        fontLetterSpacing = 0;\n      }\n\n      // Update font-size of all active subtitle labels\n      for (let label of this.getComponents()) {\n        if (label instanceof SubtitleLabel) {\n          label.getDomElement().css({\n            'font-size': `${fontSize}px`,\n            'letter-spacing': `${fontLetterSpacing}px`,\n          });\n        }\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      if (enabled) {\n        updateCEA608FontSize();\n      } else {\n        fontSizeCalculationRequired = true;\n      }\n    });\n\n    this.preprocessLabelEventCallback.subscribe((event: SubtitleCueEvent, label: SubtitleLabel) => {\n      const isCEA608 = event.position != null;\n      if (!isCEA608) {\n        // Skip all non-CEA608 cues\n        return;\n      }\n\n      if (!enabled) {\n        enabled = true;\n        this.getDomElement().addClass(this.prefixCss(SubtitleOverlay.CLASS_CEA_608));\n\n        // We conditionally update the font size by this flag here to avoid updating every time a subtitle\n        // is added into an empty overlay. Because we reset the overlay when all subtitles are gone, this\n        // would trigger an unnecessary update every time, but it's only required under certain conditions,\n        // e.g. after the player size has changed.\n        if (fontSizeCalculationRequired) {\n          updateCEA608FontSize();\n          fontSizeCalculationRequired = false;\n        }\n      }\n\n      label.getDomElement().css({\n        'left': `${event.position.column * SubtitleOverlay.CEA608_COLUMN_OFFSET}%`,\n        'top': `${event.position.row * SubtitleOverlay.CEA608_ROW_OFFSET}%`,\n        'font-size': `${fontSize}px`,\n        'letter-spacing': `${fontLetterSpacing}px`,\n      });\n    });\n\n    const reset = () => {\n      this.getDomElement().removeClass(this.prefixCss(SubtitleOverlay.CLASS_CEA_608));\n      enabled = false;\n    };\n\n    player.on(player.exports.PlayerEvent.CueExit, () => {\n      if (!this.subtitleManager.hasCues) {\n        // Disable CEA-608 mode when all subtitles are gone (to allow correct formatting and\n        // display of other types of subtitles, e.g. the formatting preview subtitle)\n        reset();\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.SourceUnloaded, reset);\n    player.on(player.exports.PlayerEvent.SubtitleEnabled, reset);\n    player.on(player.exports.PlayerEvent.SubtitleDisabled, reset);\n  }\n\n  enablePreviewSubtitleLabel(): void {\n    if (!this.subtitleManager.hasCues) {\n      this.previewSubtitleActive = true;\n      this.subtitleContainerManager.addLabel(this.previewSubtitle);\n      this.updateComponents();\n      this.show();\n    }\n  }\n\n  removePreviewSubtitleLabel(): void {\n    if (this.previewSubtitleActive) {\n      this.previewSubtitleActive = false;\n      this.subtitleContainerManager.removeLabel(this.previewSubtitle);\n      this.updateComponents();\n    }\n  }\n}\n\ninterface ActiveSubtitleCue {\n  event: SubtitleCueEvent;\n  label: SubtitleLabel;\n}\n\ninterface ActiveSubtitleCueMap {\n  [id: string]: ActiveSubtitleCue[];\n}\n\ninterface SubtitleLabelConfig extends LabelConfig {\n  vtt?: VTTProperties;\n  region?: string;\n  regionStyle?: string;\n}\n\nexport class SubtitleLabel extends Label<SubtitleLabelConfig> {\n\n  constructor(config: SubtitleLabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitle-label',\n    }, this.config);\n  }\n\n  get vtt(): VTTProperties {\n    return this.config.vtt;\n  }\n\n  get region(): string {\n    return this.config.region;\n  }\n\n  get regionStyle(): string {\n    return this.config.regionStyle;\n  }\n}\n\nclass ActiveSubtitleManager {\n\n  private activeSubtitleCueMap: ActiveSubtitleCueMap;\n  private activeSubtitleCueCount: number;\n\n  constructor() {\n    this.activeSubtitleCueMap = {};\n    this.activeSubtitleCueCount = 0;\n  }\n\n  /**\n   * Calculates a unique ID for a subtitle cue, which is needed to associate an CueEnter with its CueExit\n   * event so we can remove the correct subtitle in CueExit when multiple subtitles are active at the same time.\n   * The start time plus the text should make a unique identifier, and in the only case where a collision\n   * can happen, two similar texts will be displayed at a similar time and a similar position (or without position).\n   * The start time should always be known, because it is required to schedule the CueEnter event. The end time\n   * must not necessarily be known and therefore cannot be used for the ID.\n   * @param event\n   * @return {string}\n   */\n  private static calculateId(event: SubtitleCueEvent): string {\n    let id = event.start + '-' + event.text;\n\n    if (event.position) {\n      id += '-' + event.position.row + '-' + event.position.column;\n    }\n\n    return id;\n  }\n\n  cueEnter(event: SubtitleCueEvent, label: SubtitleLabel): void {\n    this.addCueToMap(event, label);\n  }\n\n  cueUpdate(event: SubtitleCueEvent, label: SubtitleLabel): SubtitleLabel | undefined {\n    const labelToReplace = this.popCueFromMap(event);\n\n    if (labelToReplace) {\n      this.addCueToMap(event, label);\n      return labelToReplace;\n    }\n\n    return undefined;\n  }\n\n  private addCueToMap(event: SubtitleCueEvent, label: SubtitleLabel): void {\n    let id = ActiveSubtitleManager.calculateId(event);\n\n    // Create array for id if it does not exist\n    this.activeSubtitleCueMap[id] = this.activeSubtitleCueMap[id] || [];\n\n    // Add cue\n    this.activeSubtitleCueMap[id].push({ event, label });\n    this.activeSubtitleCueCount++;\n  }\n\n  private popCueFromMap(event: SubtitleCueEvent): SubtitleLabel | undefined {\n    let id = ActiveSubtitleManager.calculateId(event);\n    let activeSubtitleCues = this.activeSubtitleCueMap[id];\n\n    if (activeSubtitleCues && activeSubtitleCues.length > 0) {\n      // Remove cue\n      /* We apply the FIFO approach here and remove the oldest cue from the associated id. When there are multiple cues\n       * with the same id, there is no way to know which one of the cues is to be deleted, so we just hope that FIFO\n       * works fine. Theoretically it can happen that two cues with colliding ids are removed at different times, in\n       * the wrong order. This rare case has yet to be observed. If it ever gets an issue, we can take the unstable\n       * cue end time (which can change between CueEnter and CueExit IN CueUpdate) and use it as an\n       * additional hint to try and remove the correct one of the colliding cues.\n       */\n      let activeSubtitleCue = activeSubtitleCues.shift();\n      this.activeSubtitleCueCount--;\n\n      return activeSubtitleCue.label;\n    }\n  }\n\n  /**\n   * Removes all active cues which don't enclose the given time\n   * @param time the time for which subtitles should remain\n   */\n  public clearInactiveCues(time: number): ActiveSubtitleCue[] {\n    const removedCues: ActiveSubtitleCue[] = [];\n    Object.keys(this.activeSubtitleCueMap).forEach(key => {\n      const activeCues = this.activeSubtitleCueMap[key];\n      activeCues.forEach(cue => {\n        if (time < cue.event.start || time > cue.event.end) {\n          this.popCueFromMap(cue.event);\n          removedCues.push(cue);\n        }\n      });\n    });\n    return removedCues;\n  }\n\n  static generateImageTagText(imageData: string): string | undefined {\n    if (!imageData) {\n      return;\n    }\n\n    const imgTag = new DOM('img', {\n      src: imageData,\n    });\n    imgTag.css('width', '100%');\n    return imgTag.get(0).outerHTML; // return the html as string\n  }\n\n  /**\n   * Returns the label associated with an already added cue.\n   * @param event\n   * @return {SubtitleLabel}\n   */\n  getCues(event: SubtitleCueEvent): SubtitleLabel[] | undefined {\n    let id = ActiveSubtitleManager.calculateId(event);\n    let activeSubtitleCues = this.activeSubtitleCueMap[id];\n    if (activeSubtitleCues && activeSubtitleCues.length > 0) {\n      return activeSubtitleCues.map((cue) => cue.label);\n    }\n  }\n\n  /**\n   * Removes the subtitle cue from the manager and returns the label that should be removed from the subtitle overlay,\n   * or null if there is no associated label existing (e.g. because all labels have been {@link #clear cleared}.\n   * @param event\n   * @return {SubtitleLabel|null}\n   */\n  cueExit(event: SubtitleCueEvent): SubtitleLabel {\n    return this.popCueFromMap(event);\n  }\n\n  /**\n   * Returns the number of active subtitle cues.\n   * @return {number}\n   */\n  get cueCount(): number {\n    // We explicitly count the cues to save an Array.reduce on every cueCount call (which can happen frequently)\n    return this.activeSubtitleCueCount;\n  }\n\n  /**\n   * Returns true if there are active subtitle cues, else false.\n   * @return {boolean}\n   */\n  get hasCues(): boolean {\n    return this.cueCount > 0;\n  }\n\n  /**\n   * Removes all subtitle cues from the manager.\n   */\n  clear(): void {\n    this.activeSubtitleCueMap = {};\n    this.activeSubtitleCueCount = 0;\n  }\n}\n\nexport class SubtitleRegionContainerManager {\n  private subtitleRegionContainers: { [regionName: string]: SubtitleRegionContainer } = {};\n\n  /**\n   * @param subtitleOverlay Reference to the subtitle overlay for adding and removing the containers.\n   */\n  constructor(private subtitleOverlay: SubtitleOverlay) {\n    this.subtitleOverlay = subtitleOverlay;\n  }\n\n  private getRegion(label: SubtitleLabel): { regionContainerId: string, regionName: string } {\n    if (label.vtt) {\n      return {\n        regionContainerId: label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt',\n        regionName: 'vtt',\n      };\n    }\n\n    return {\n      regionContainerId: label.region || 'default',\n      regionName: label.region || 'default',\n    };\n  }\n\n  /**\n   * Creates and wraps a subtitle label into a container div based on the subtitle region.\n   * If the subtitle has positioning information it is added to the container.\n   * @param label The subtitle label to wrap\n   */\n  addLabel(label: SubtitleLabel, overlaySize?: Size): void {\n    const { regionContainerId, regionName } = this.getRegion(label);\n    const cssClasses = [`subtitle-position-${regionName}`];\n\n    if (label.vtt && label.vtt.region) {\n      cssClasses.push(`vtt-region-${label.vtt.region.id}`);\n    }\n\n    if (!this.subtitleRegionContainers[regionContainerId]) {\n      const regionContainer = new SubtitleRegionContainer({\n        cssClasses,\n      });\n\n      this.subtitleRegionContainers[regionContainerId] = regionContainer;\n\n      if (label.regionStyle) {\n        regionContainer.getDomElement().attr('style', label.regionStyle);\n      } else if (label.vtt && !label.vtt.region) {\n        /**\n         * If there is no region present to wrap the Cue Box, the Cue box becomes the\n         * region itself. Therefore the positioning values have to come from the box.\n         */\n        regionContainer.getDomElement().css('position', 'static');\n      } else {\n        // getDomElement needs to be called at least once to ensure the component exists\n        regionContainer.getDomElement();\n      }\n\n      for (const regionContainerId in this.subtitleRegionContainers) {\n        this.subtitleOverlay.addComponent(this.subtitleRegionContainers[regionContainerId]);\n      }\n    }\n\n    this.subtitleRegionContainers[regionContainerId].addLabel(label, overlaySize);\n  }\n\n  replaceLabel(previousLabel: SubtitleLabel, newLabel: SubtitleLabel): void {\n    const { regionContainerId } = this.getRegion(previousLabel);\n\n    this.subtitleRegionContainers[regionContainerId].removeLabel(previousLabel);\n    this.subtitleRegionContainers[regionContainerId].addLabel(newLabel);\n  }\n\n  /**\n   * Removes a subtitle label from a container.\n   */\n  removeLabel(label: SubtitleLabel): void {\n    let regionContainerId;\n\n    if (label.vtt) {\n      regionContainerId = label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt';\n    } else {\n      regionContainerId = label.region || 'default';\n    }\n\n    this.subtitleRegionContainers[regionContainerId].removeLabel(label);\n\n    // Remove container if no more labels are displayed\n    if (this.subtitleRegionContainers[regionContainerId].isEmpty()) {\n      this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionContainerId]);\n      delete this.subtitleRegionContainers[regionContainerId];\n    }\n  }\n\n  /**\n   * Removes all subtitle containers.\n   */\n  clear(): void {\n    for (const regionName in this.subtitleRegionContainers) {\n      this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionName]);\n    }\n\n    this.subtitleRegionContainers = {};\n  }\n}\n\nexport class SubtitleRegionContainer extends Container<ContainerConfig> {\n  private labelCount = 0;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'subtitle-region-container',\n    }, this.config);\n  }\n\n  addLabel(labelToAdd: SubtitleLabel, overlaySize?: Size) {\n    this.labelCount++;\n\n    if (labelToAdd.vtt) {\n      if (labelToAdd.vtt.region && overlaySize) {\n        VttUtils.setVttRegionStyles(this, labelToAdd.vtt.region, overlaySize);\n      }\n\n      VttUtils.setVttCueBoxStyles(labelToAdd, overlaySize);\n    }\n\n    this.addComponent(labelToAdd);\n    this.updateComponents();\n  }\n\n  removeLabel(labelToRemove: SubtitleLabel): void {\n    this.labelCount--;\n    this.removeComponent(labelToRemove);\n    this.updateComponents();\n  }\n\n  public isEmpty(): boolean {\n    return this.labelCount === 0;\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport {SubtitleSwitchHandler} from '../subtitleutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between available subtitle and caption tracks.\n */\nexport class SubtitleSelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitleselectbox'],\n      ariaLabel: i18n.getLocalizer('subtitle.select'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new SubtitleSwitchHandler(player, this, uimanager);\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background colors.\n */\nexport class BackgroundColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsbackgroundcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.backgroundColor.isSet() && this.settingsManager.backgroundOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'bgcolor-' + this.settingsManager.backgroundColor.value + this.settingsManager.backgroundOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.backgroundColor.value = key;\n    });\n\n    this.settingsManager.backgroundColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.backgroundColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.backgroundOpacity.clear();\n      } else if (!this.settingsManager.backgroundOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.backgroundOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.backgroundOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.backgroundColor.isSet()) {\n      this.selectItem(this.settingsManager.backgroundColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background opacity.\n */\nexport class BackgroundOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsbackgroundopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n    this.addItem('0', i18n.getLocalizer('percent', { value: 0 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.backgroundOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.backgroundOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.backgroundColor.clear();\n      } else if (!this.settingsManager.backgroundColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.backgroundColor.value = 'black';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.backgroundOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.backgroundOpacity.isSet()) {\n      this.selectItem(this.settingsManager.backgroundOpacity.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different character edge.\n */\nexport class CharacterEdgeSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingscharacteredgeselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('raised', i18n.getLocalizer('settings.subtitles.characterEdge.raised'));\n    this.addItem('depressed', i18n.getLocalizer('settings.subtitles.characterEdge.depressed'));\n    this.addItem('uniform', i18n.getLocalizer('settings.subtitles.characterEdge.uniform'));\n    this.addItem('dropshadowed', i18n.getLocalizer('settings.subtitles.characterEdge.dropshadowed'));\n\n    this.settingsManager.characterEdge.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('characteredge-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.characterEdge.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.characterEdge.isSet()) {\n      this.selectItem(this.settingsManager.characterEdge.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.fontColor.isSet() && this.settingsManager.fontOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'fontcolor-' + this.settingsManager.fontColor.value + this.settingsManager.fontOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontColor.value = key;\n    });\n\n    this.settingsManager.fontColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.fontColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.fontOpacity.clear();\n      } else if (!this.settingsManager.fontOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.fontOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.fontOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontColor.isSet()) {\n      this.selectItem(this.settingsManager.fontColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font family.\n */\nexport class FontFamilySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontfamilyselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('monospacedserif', i18n.getLocalizer('settings.subtitles.font.family.monospacedserif'));\n    this.addItem('proportionalserif', i18n.getLocalizer('settings.subtitles.font.family.proportionalserif'));\n    this.addItem('monospacedsansserif', i18n.getLocalizer('settings.subtitles.font.family.monospacedsansserif'));\n    this.addItem('proportionalsansserif', i18n.getLocalizer('settings.subtitles.font.family.proportionalserif'));\n    this.addItem('casual', i18n.getLocalizer('settings.subtitles.font.family.casual'));\n    this.addItem('cursive', i18n.getLocalizer('settings.subtitles.font.family.cursive'));\n    this.addItem('smallcapital', i18n.getLocalizer('settings.subtitles.font.family.smallcapital'));\n\n    this.settingsManager.fontFamily.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('fontfamily-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontFamily.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontFamily.isSet()) {\n      this.selectItem(this.settingsManager.fontFamily.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.fontOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.fontColor.clear();\n      } else if (!this.settingsManager.fontColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.fontColor.value = 'white';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.fontOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontOpacity.isSet()) {\n      this.selectItem(this.settingsManager.fontOpacity.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontSizeSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontsizeselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('150', i18n.getLocalizer('percent', { value: 150 }));\n    this.addItem('200', i18n.getLocalizer('percent', { value: 200 }));\n    this.addItem('300', i18n.getLocalizer('percent', { value: 300 }));\n    this.addItem('400', i18n.getLocalizer('percent', { value: 400 }));\n\n    this.settingsManager.fontSize.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('fontsize-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontSize.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontSize.isSet()) {\n      this.selectItem(this.settingsManager.fontSize.value);\n    }\n  }\n}\n","import {SubtitleOverlay} from '../subtitleoverlay';\nimport {ListSelectorConfig} from '../listselector';\nimport {SelectBox} from '../selectbox';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\n\nexport interface SubtitleSettingSelectBoxConfig extends ListSelectorConfig {\n  overlay: SubtitleOverlay;\n  settingsManager: SubtitleSettingsManager;\n}\n\n/**\n * Base class for all subtitles settings select box\n **/\nexport class SubtitleSettingSelectBox extends SelectBox {\n\n  protected settingsManager: SubtitleSettingsManager;\n  protected overlay: SubtitleOverlay;\n  private currentCssClass: string;\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.settingsManager = config.settingsManager;\n    this.overlay = config.overlay;\n  }\n\n  /**\n   * Removes a previously set class and adds the passed in class.\n   * @param cssClass The new class to replace the previous class with or null to just remove the previous class\n   */\n  protected toggleOverlayClass(cssClass: string): void {\n    // Remove previous class if existing\n    if (this.currentCssClass) {\n      this.overlay.getDomElement().removeClass(this.currentCssClass);\n      this.currentCssClass = null;\n    }\n\n    // Add new class if specified. If the new class is null, we don't add anything.\n    if (cssClass) {\n      this.currentCssClass = this.prefixCss(cssClass);\n      this.overlay.getDomElement().addClass(this.currentCssClass);\n    }\n  }\n}\n","import {LabelConfig} from '../label';\nimport {Container, ContainerConfig} from '../container';\nimport {DOM} from '../../dom';\nimport {SettingsPanelPageOpenButton} from '../settingspanelpageopenbutton';\nimport { LocalizableText, i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsLabelConfig extends LabelConfig {\n  opener: SettingsPanelPageOpenButton;\n}\n\nexport class SubtitleSettingsLabel extends Container<ContainerConfig> {\n\n  private opener: SettingsPanelPageOpenButton;\n\n  private text: LocalizableText;\n\n  private for: string;\n\n  constructor(config: SubtitleSettingsLabelConfig) {\n    super(config);\n\n    this.opener = config.opener;\n    this.text = config.text;\n    this.for = config.for;\n\n    this.config = this.mergeConfig(<ContainerConfig>config, {\n      cssClass: 'ui-label',\n      components: [\n        this.opener,\n      ],\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let labelElement = new DOM('label', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'for': this.for,\n    }).append(\n      new DOM('span', {}).html(i18n.performLocalization(this.text)),\n      this.opener.getDomElement(),\n    );\n\n    return labelElement;\n  }\n}\n","import {StorageUtils} from '../../storageutils';\nimport {Component, ComponentConfig} from '../component';\nimport {EventDispatcher, Event} from '../../eventdispatcher';\n\ninterface SubtitleSettings {\n  fontColor?: string;\n  fontOpacity?: string;\n  fontFamily?: string;\n  fontSize?: string;\n  characterEdge?: string;\n  backgroundColor?: string;\n  backgroundOpacity?: string;\n  windowColor?: string;\n  windowOpacity?: string;\n}\n\ninterface Properties {\n  [name: string]: SubtitleSettingsProperty<string>;\n}\n\nexport class SubtitleSettingsManager {\n\n  private userSettings: SubtitleSettings;\n  private localStorageKey: string;\n\n  private _properties: Properties = {\n    fontColor: new SubtitleSettingsProperty<string>(this),\n    fontOpacity: new SubtitleSettingsProperty<string>(this),\n    fontFamily: new SubtitleSettingsProperty<string>(this),\n    fontSize: new SubtitleSettingsProperty<string>(this),\n    characterEdge: new SubtitleSettingsProperty<string>(this),\n    backgroundColor: new SubtitleSettingsProperty<string>(this),\n    backgroundOpacity: new SubtitleSettingsProperty<string>(this),\n    windowColor: new SubtitleSettingsProperty<string>(this),\n    windowOpacity: new SubtitleSettingsProperty<string>(this),\n  };\n\n  constructor() {\n    this.userSettings = {};\n    this.localStorageKey = DummyComponent.instance().prefixCss('subtitlesettings');\n\n    for (let propertyName in this._properties) {\n      this._properties[propertyName].onChanged.subscribe((sender, property) => {\n        if (property.isSet()) {\n          (<any>this.userSettings)[propertyName] = property.value;\n        } else {\n          // Delete the property from the settings object if unset to avoid serialization of null values\n          delete (<any>this.userSettings)[propertyName];\n        }\n\n        // Save the settings object when a property has changed\n        this.save();\n      });\n    }\n\n    this.load();\n  }\n\n  public reset(): void {\n    for (let propertyName in this._properties) {\n      this._properties[propertyName].clear();\n    }\n  }\n\n  public get fontColor(): SubtitleSettingsProperty<string> {\n    return this._properties.fontColor;\n  }\n\n  public get fontOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.fontOpacity;\n  }\n\n  public get fontFamily(): SubtitleSettingsProperty<string> {\n    return this._properties.fontFamily;\n  }\n\n  public get fontSize(): SubtitleSettingsProperty<string> {\n    return this._properties.fontSize;\n  }\n\n  public get characterEdge(): SubtitleSettingsProperty<string> {\n    return this._properties.characterEdge;\n  }\n\n  public get backgroundColor(): SubtitleSettingsProperty<string> {\n    return this._properties.backgroundColor;\n  }\n\n  public get backgroundOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.backgroundOpacity;\n  }\n\n  public get windowColor(): SubtitleSettingsProperty<string> {\n    return this._properties.windowColor;\n  }\n\n  public get windowOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.windowOpacity;\n  }\n\n  /**\n   * Saves the settings to local storage.\n   */\n  public save(): void {\n    StorageUtils.setObject(this.localStorageKey, this.userSettings);\n  }\n\n  /**\n   * Loads the settings from local storage\n   */\n  public load(): void {\n    this.userSettings = StorageUtils.getObject<SubtitleSettings>(this.localStorageKey) || {};\n\n    // Apply the loaded settings\n    for (let property in this.userSettings) {\n      this._properties[property].value = (<any>this.userSettings)[property];\n    }\n  }\n}\n\n/**\n * A dummy component whose sole purpose is to expose the {@link #prefixCss} method to the\n * {@link SubtitleSettingsManager}.\n */\nclass DummyComponent extends Component<ComponentConfig> {\n\n  private static _instance: DummyComponent;\n\n  public static instance(): DummyComponent {\n    if (!DummyComponent._instance) {\n      DummyComponent._instance = new DummyComponent();\n    }\n\n    return DummyComponent._instance;\n  }\n\n  public prefixCss(cssClassOrId: string): string {\n    return super.prefixCss(cssClassOrId);\n  }\n}\n\nexport class SubtitleSettingsProperty<T> {\n\n  private _manager: SubtitleSettingsManager;\n  private _onChanged: EventDispatcher<SubtitleSettingsManager, SubtitleSettingsProperty<T>>;\n  private _value: T;\n\n  constructor(manager: SubtitleSettingsManager) {\n    this._manager = manager;\n    this._onChanged = new EventDispatcher<SubtitleSettingsManager, SubtitleSettingsProperty<T>>();\n  }\n\n  public isSet(): boolean {\n    return this._value != null;\n  }\n\n  public clear(): void {\n    this._value = null;\n    this.onChangedEvent(null);\n  }\n\n  public get value(): T {\n    return this._value;\n  }\n\n  public set value(value: T) {\n    if (typeof value === 'string' && value === 'null') {\n      value = null;\n    }\n\n    this._value = value;\n    this.onChangedEvent(value);\n  }\n\n  protected onChangedEvent(value: T) {\n    this._onChanged.dispatch(this._manager, this);\n  }\n\n  public get onChanged(): Event<SubtitleSettingsManager, SubtitleSettingsProperty<T>> {\n    return this._onChanged.getEvent();\n  }\n}","import {SettingsPanelPage} from '../settingspanelpage';\nimport {SettingsPanel} from '../settingspanel';\nimport {SubtitleOverlay} from '../subtitleoverlay';\nimport {ContainerConfig} from '../container';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\nimport {Component, ComponentConfig} from '../component';\nimport {FontSizeSelectBox} from './fontsizeselectbox';\nimport {FontFamilySelectBox} from './fontfamilyselectbox';\nimport {FontColorSelectBox} from './fontcolorselectbox';\nimport {FontOpacitySelectBox} from './fontopacityselectbox';\nimport {CharacterEdgeSelectBox} from './characteredgeselectbox';\nimport {BackgroundColorSelectBox} from './backgroundcolorselectbox';\nimport {BackgroundOpacitySelectBox} from './backgroundopacityselectbox';\nimport {WindowColorSelectBox} from './windowcolorselectbox';\nimport {WindowOpacitySelectBox} from './windowopacityselectbox';\nimport {SubtitleSettingsResetButton} from './subtitlesettingsresetbutton';\nimport {UIInstanceManager} from '../../uimanager';\nimport {SettingsPanelPageBackButton} from '../settingspanelpagebackbutton';\nimport {SettingsPanelItem} from '../settingspanelitem';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsPanelPageConfig extends ContainerConfig {\n  settingsPanel: SettingsPanel;\n  overlay: SubtitleOverlay;\n}\n\nexport class SubtitleSettingsPanelPage extends SettingsPanelPage {\n\n  private readonly overlay: SubtitleOverlay;\n  private readonly settingsPanel: SettingsPanel;\n\n  constructor(config: SubtitleSettingsPanelPageConfig) {\n    super(config);\n\n    this.overlay = config.overlay;\n    this.settingsPanel = config.settingsPanel;\n\n    let manager = new SubtitleSettingsManager();\n\n    this.config = this.mergeConfig(config, {\n      components: <Component<ComponentConfig>[]>[\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.size'), new FontSizeSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.family'), new FontFamilySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.color'), new FontColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.opacity'), new FontOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.characterEdge'), new CharacterEdgeSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.background.color'), new BackgroundColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.background.opacity'), new BackgroundOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.window.color'), new WindowColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.window.opacity'), new WindowOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(new SettingsPanelPageBackButton({\n          container: this.settingsPanel,\n          text: i18n.getLocalizer('back'),\n        }), new SubtitleSettingsResetButton({\n          settingsManager: manager,\n        }), {\n          role: 'menubar',\n        }),\n      ],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onActive.subscribe(() => {\n      this.overlay.enablePreviewSubtitleLabel();\n    });\n\n    this.onInactive.subscribe(() => {\n      this.overlay.removePreviewSubtitleLabel();\n    });\n  }\n}","import {UIInstanceManager} from '../../uimanager';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\nimport {Button, ButtonConfig} from '../button';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsResetButtonConfig extends ButtonConfig {\n  settingsManager: SubtitleSettingsManager;\n}\n\n/**\n * A button that resets all subtitle settings to their defaults.\n */\nexport class SubtitleSettingsResetButton extends Button<ButtonConfig> {\n\n  constructor(config: SubtitleSettingsResetButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitlesettingsresetbutton',\n      text: i18n.getLocalizer('reset'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      (<SubtitleSettingsResetButtonConfig>this.config).settingsManager.reset();\n    });\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background colors.\n */\nexport class WindowColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingswindowcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.windowColor.isSet() && this.settingsManager.windowOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'windowcolor-' + this.settingsManager.windowColor.value + this.settingsManager.windowOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.windowColor.value = key;\n    });\n\n    this.settingsManager.windowColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.windowColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.windowOpacity.clear();\n      } else if (!this.settingsManager.windowOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.windowOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.windowOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.windowColor.isSet()) {\n      this.selectItem(this.settingsManager.windowColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background opacity.\n */\nexport class WindowOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingswindowopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n    this.addItem('0', i18n.getLocalizer('percent', { value: 0 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.windowOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.windowOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.windowColor.clear();\n      } else if (!this.settingsManager.windowColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.windowColor.value = 'black';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.windowOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.windowOpacity.isSet()) {\n      this.selectItem(this.settingsManager.windowOpacity.value);\n    }\n  }\n}\n","import { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\nimport { DOM } from '../dom';\nimport { ComponentConfig } from './component';\nimport { TimelineMarker } from '../uiconfig';\nimport { SeekBarMarker } from './seekbar';\nimport { PlayerUtils } from '../playerutils';\nimport { Timeout } from '../timeout';\n\nexport interface MarkersConfig extends ComponentConfig {\n  /**\n   * Used for seekBar marker snapping range percentage\n   */\n  snappingRange?: number;\n}\n\nexport class TimelineMarkersHandler {\n  private markersContainer: DOM;\n  private timelineMarkers: SeekBarMarker[];\n  private player: PlayerAPI;\n  private uimanager: UIInstanceManager;\n  private pausedTimeshiftUpdater: Timeout;\n  private getSeekBarWidth: () => number;\n  protected config: MarkersConfig;\n\n  constructor(config: MarkersConfig, getSeekBarWidth: () => number, markersContainer: DOM) {\n    this.config = config;\n    this.getSeekBarWidth = getSeekBarWidth;\n    this.markersContainer = markersContainer;\n    this.timelineMarkers = [];\n  }\n\n  public initialize(player: PlayerAPI, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.uimanager = uimanager;\n    this.configureMarkers();\n  }\n\n  private configureMarkers(): void {\n    // Remove markers when unloaded\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, () => this.clearMarkers());\n    this.player.on(this.player.exports.PlayerEvent.AdBreakStarted, () => this.clearMarkers());\n    this.player.on(this.player.exports.PlayerEvent.AdBreakFinished, () => this.updateMarkers());\n    // Update markers when the size of the seekbar changes\n    this.player.on(this.player.exports.PlayerEvent.PlayerResized, () => this.updateMarkersDOM());\n\n    this.player.on(this.player.exports.PlayerEvent.SourceLoaded, () => {\n      if (this.player.isLive()) {\n        // Update marker position as timeshift range changes\n        this.player.on(this.player.exports.PlayerEvent.TimeChanged, () => this.updateMarkers());\n        // Update marker postion when paused as timeshift range changes\n        this.configureLivePausedTimeshiftUpdater(() => this.updateMarkers());\n      }\n    });\n    this.uimanager.getConfig().events.onUpdated.subscribe(() => this.updateMarkers());\n    this.uimanager.onRelease.subscribe(() => this.uimanager.getConfig().events.onUpdated.unsubscribe(() => this.updateMarkers()));\n\n    // Init markers at startup\n    this.updateMarkers();\n  }\n\n  public getMarkerAtPosition(percentage: number): SeekBarMarker | null {\n    const snappingRange = this.config.snappingRange;\n\n    const matchingMarker = this.timelineMarkers.find(marker => {\n      const hasDuration = marker.duration > 0;\n      // Handle interval markers\n      const intervalMarkerMatch =\n        hasDuration &&\n        percentage >= marker.position - snappingRange &&\n        percentage <= marker.position + marker.duration + snappingRange;\n\n      // Handle position markers\n      const positionMarkerMatch =\n        percentage >= marker.position - snappingRange &&\n        percentage <= marker.position + snappingRange;\n\n      return intervalMarkerMatch || positionMarkerMatch;\n    });\n\n    return matchingMarker || null;\n  }\n\n  private clearMarkers(): void {\n    this.timelineMarkers = [];\n    this.markersContainer.empty();\n  }\n\n  private removeMarkerFromConfig(marker: TimelineMarker): void {\n    this.uimanager.getConfig().metadata.markers = this.uimanager.getConfig().metadata.markers.filter(_marker => marker !== _marker);\n  }\n\n  private filterRemovedMarkers(): void {\n    this.timelineMarkers = this.timelineMarkers.filter(seekbarMarker => {\n      const matchingMarker = this.uimanager.getConfig().metadata.markers.find(_marker => seekbarMarker.marker === _marker);\n      if (!matchingMarker) {\n        this.removeMarkerFromDOM(seekbarMarker);\n      }\n      return matchingMarker;\n    });\n  }\n\n  private removeMarkerFromDOM(marker: SeekBarMarker): void {\n    if (marker.element) {\n      marker.element.remove();\n    }\n  }\n\n  private updateMarkers(): void {\n    if (!shouldProcessMarkers(this.player, this.uimanager)) {\n      this.clearMarkers();\n      return;\n    }\n\n    this.filterRemovedMarkers();\n\n    this.uimanager.getConfig().metadata.markers.forEach(marker => {\n      const { markerPosition, markerDuration } = getMarkerPositions(this.player, marker);\n\n      if (shouldRemoveMarker(markerPosition, markerDuration)) {\n        this.removeMarkerFromConfig(marker);\n      } else if (markerPosition <= 100) {\n        const matchingMarker = this.timelineMarkers.find(seekbarMarker => seekbarMarker.marker === marker);\n\n        if (matchingMarker) {\n          matchingMarker.position = markerPosition;\n          matchingMarker.duration = markerDuration;\n\n          this.updateMarkerDOM(matchingMarker);\n        } else {\n          const newMarker: SeekBarMarker = { marker, position: markerPosition, duration: markerDuration };\n          this.timelineMarkers.push(newMarker);\n\n          this.createMarkerDOM(newMarker);\n        }\n      }\n    });\n  }\n\n  private getMarkerCssProperties(marker: SeekBarMarker): { [propertyName: string]: string } {\n    const seekBarWidthPx = this.getSeekBarWidth();\n\n    const positionInPx = (seekBarWidthPx / 100) * (marker.position < 0 ? 0 : marker.position);\n    const cssProperties: { [propertyName: string]: string } = {\n      'transform': `translateX(${positionInPx}px)`,\n    };\n\n    if (marker.duration > 0) {\n      const markerWidthPx = Math.round(seekBarWidthPx / 100 * marker.duration);\n      cssProperties['width'] = `${markerWidthPx}px`;\n    }\n\n    return cssProperties;\n  }\n\n  private updateMarkerDOM(marker: SeekBarMarker): void {\n    marker.element.css(this.getMarkerCssProperties(marker));\n  }\n\n  private createMarkerDOM(marker: SeekBarMarker): void {\n    const markerClasses = ['seekbar-marker'].concat(marker.marker.cssClasses || [])\n      .map(cssClass => this.prefixCss(cssClass));\n\n    const markerElement = new DOM('div', {\n      'class': markerClasses.join(' '),\n      'data-marker-time': String(marker.marker.time),\n      'data-marker-title': String(marker.marker.title),\n    }).css(this.getMarkerCssProperties(marker));\n\n    if (marker.marker.imageUrl) {\n      const removeImage = () => {\n        imageElement.remove();\n      };\n\n      const imageElement = new DOM('img', {\n        'class': this.prefixCss('seekbar-marker-image'),\n        'src': marker.marker.imageUrl,\n      }).on('error', removeImage);\n\n      markerElement.append(imageElement);\n    }\n\n    marker.element = markerElement;\n    this.markersContainer.append(markerElement);\n  }\n\n  private updateMarkersDOM(): void {\n    this.timelineMarkers.forEach(marker => {\n      if (marker.element) {\n        this.updateMarkerDOM(marker);\n      } else {\n        this.createMarkerDOM(marker);\n      }\n    });\n  }\n\n  private configureLivePausedTimeshiftUpdater(\n    handler: () => void,\n  ): void {\n    // Regularly update the marker position while the timeout is active\n    this.pausedTimeshiftUpdater = new Timeout(1000, handler, true);\n\n    this.player.on(this.player.exports.PlayerEvent.Paused, () => {\n      if (this.player.isLive() && this.player.getMaxTimeShift() < 0) {\n        this.pausedTimeshiftUpdater.start();\n      }\n    });\n\n    // Stop updater when playback continues (no matter if the updater was started before)\n    this.player.on(this.player.exports.PlayerEvent.Play, () => this.pausedTimeshiftUpdater.clear());\n    this.player.on(this.player.exports.PlayerEvent.Destroy, () => this.pausedTimeshiftUpdater.clear());\n  }\n\n  protected prefixCss(cssClassOrId: string): string {\n    return this.config.cssPrefix + '-' + cssClassOrId;\n  }\n}\n\nfunction getMarkerPositions(player: PlayerAPI, marker: TimelineMarker) {\n  const duration = getDuration(player);\n\n  const markerPosition = 100 / duration * getMarkerTime(marker, player, duration); // convert absolute time to percentage\n  let markerDuration = 100 / duration * marker.duration;\n\n  if (markerPosition < 0 && !isNaN(markerDuration)) {\n    // Shrink marker duration for on live streams as they reach end\n    markerDuration = markerDuration + markerPosition;\n  }\n\n  if (100 - markerPosition < markerDuration) {\n    // Shrink marker if it overflows timeline\n    markerDuration = 100 - markerPosition;\n  }\n\n  return { markerDuration, markerPosition };\n}\n\nfunction getMarkerTime(marker: TimelineMarker, player: PlayerAPI, duration: number): number {\n  if (!player.isLive()) {\n    return marker.time;\n  }\n\n  return duration - (PlayerUtils.getSeekableRangeRespectingLive(player).end - marker.time);\n}\n\nfunction getDuration(player: PlayerAPI): number {\n  if (!player.isLive()) {\n    return player.getDuration();\n  }\n  const { start, end } = PlayerUtils.getSeekableRangeRespectingLive(player);\n\n  return end - start;\n}\n\nfunction shouldRemoveMarker(markerPosition: number, markerDuration: number): boolean {\n  return (markerDuration < 0 || isNaN(markerDuration)) && markerPosition < 0;\n}\n\nfunction shouldProcessMarkers(player: PlayerAPI, uimanager: UIInstanceManager): boolean {\n  // Don't generate timeline markers if we don't yet have a duration\n  // The duration check is for buggy platforms where the duration is not available instantly (Chrome on Android 4.3)\n  const validToProcess = player.getDuration() !== Infinity || player.isLive();\n  const hasMarkers = uimanager.getConfig().metadata.markers.length > 0;\n\n  return validToProcess && hasMarkers;\n}\n","import {Container, ContainerConfig} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {MetadataLabel, MetadataLabelContent} from './metadatalabel';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for a {@link TitleBar}.\n */\nexport interface TitleBarConfig extends ContainerConfig {\n  /**\n   * Specifies if the title bar should stay hidden when no metadata label contains any text. Does not make a lot\n   * of sense if the title bar contains other components than just MetadataLabels (like in the default configuration).\n   * Default: false\n   */\n  keepHiddenWithoutMetadata?: boolean;\n}\n\n/**\n * Displays a title bar containing a label with the title of the video.\n */\nexport class TitleBar extends Container<TitleBarConfig> {\n\n  constructor(config: TitleBarConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-titlebar',\n      hidden: true,\n      components: [\n        new MetadataLabel({ content: MetadataLabelContent.Title }),\n        new MetadataLabel({ content: MetadataLabelContent.Description }),\n      ],\n      keepHiddenWithoutMetadata: false,\n    }, <TitleBarConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let shouldBeShown = !this.isHidden();\n    let hasMetadataText = true; // Flag to track if any metadata label contains text\n\n    let checkMetadataTextAndUpdateVisibility = () => {\n      hasMetadataText = false;\n\n      // Iterate through metadata labels and check if at least one of them contains text\n      for (let component of this.getComponents()) {\n        if (component instanceof MetadataLabel) {\n          if (!component.isEmpty()) {\n            hasMetadataText = true;\n            break;\n          }\n        }\n      }\n\n      if (this.isShown()) {\n        // Hide a visible titlebar if it does not contain any text and the hidden flag is set\n        if (config.keepHiddenWithoutMetadata && !hasMetadataText) {\n          this.hide();\n        }\n      } else if (shouldBeShown) {\n        // Show a hidden titlebar if it should actually be shown\n        this.show();\n      }\n    };\n\n    // Listen to text change events to update the hasMetadataText flag when the metadata dynamically changes\n    for (let component of this.getComponents()) {\n      if (component instanceof MetadataLabel) {\n        component.onTextChanged.subscribe(checkMetadataTextAndUpdateVisibility);\n      }\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      shouldBeShown = true;\n      if (!(config.keepHiddenWithoutMetadata && !hasMetadataText)) {\n        this.show();\n      }\n    });\n    uimanager.onControlsHide.subscribe(() => {\n      shouldBeShown = false;\n      this.hide();\n    });\n\n    // init\n    checkMetadataTextAndUpdateVisibility();\n  }\n}","import {Button, ButtonConfig} from './button';\nimport {NoArgs, EventDispatcher, Event} from '../eventdispatcher';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { LocalizableText } from '../localization/i18n';\n\n/**\n * Configuration interface for a toggle button component.\n */\nexport interface ToggleButtonConfig extends ButtonConfig {\n  /**\n   * The CSS class that marks the on-state of the button.\n   */\n  onClass?: string;\n  /**\n   * The CSS class that marks the off-state of the button.\n   */\n  offClass?: string;\n  /**\n   * WCAG20 standard for defining info about the component (usually the name)\n   *\n   * It is recommended to use `onAriaLabel` and `offAriaLabel` for toggle buttons\n   * as the component can then update them as the button is used.\n   *\n   * If both `ariaLabel` and `onAriaLabel` are set, `onAriaLabel` is used.\n   */\n  ariaLabel?: LocalizableText;\n  /**\n   * The aria label that marks the on-state of the button.\n   */\n  onAriaLabel?: LocalizableText;\n  /**\n   * The aria label that marks the off-state of the button.\n   */\n  offAriaLabel?: LocalizableText;\n  /**\n   * The text as string or as localize callback on the button.\n   */\n  text?: LocalizableText;\n}\n\n/**\n * A button that can be toggled between 'on' and 'off' states.\n */\nexport class ToggleButton<Config extends ToggleButtonConfig> extends Button<Config> {\n\n  private onState: boolean;\n\n  private toggleButtonEvents = {\n    onToggle: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n    onToggleOn: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n    onToggleOff: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n  };\n\n  constructor(config: Config) {\n    super(config);\n\n    const defaultConfig: ToggleButtonConfig = {\n      cssClass: 'ui-togglebutton',\n      onClass: 'on',\n      offClass: 'off',\n    };\n\n    if (config.onAriaLabel) {\n      config.ariaLabel = config.onAriaLabel;\n    }\n\n    this.config = this.mergeConfig(config, defaultConfig as Config, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n    const config = this.getConfig();\n    this.getDomElement().addClass(this.prefixCss(config.offClass));\n  }\n\n  /**\n   * Toggles the button to the 'on' state.\n   */\n  on() {\n    if (this.isOff()) {\n      const config = this.getConfig();\n\n      this.onState = true;\n      this.getDomElement().removeClass(this.prefixCss(config.offClass));\n      this.getDomElement().addClass(this.prefixCss(config.onClass));\n\n      this.onToggleEvent();\n      this.onToggleOnEvent();\n\n      this.setAriaAttr('pressed', 'true');\n\n      if (this.config.onAriaLabel) {\n        this.setAriaLabel(this.config.onAriaLabel);\n      }\n    }\n  }\n\n  /**\n   * Toggles the button to the 'off' state.\n   */\n  off() {\n    if (this.isOn()) {\n      const config = this.getConfig();\n\n      this.onState = false;\n      this.getDomElement().removeClass(this.prefixCss(config.onClass));\n      this.getDomElement().addClass(this.prefixCss(config.offClass));\n\n      this.onToggleEvent();\n      this.onToggleOffEvent();\n\n      this.setAriaAttr('pressed', 'false');\n\n      if (this.config.offAriaLabel) {\n        this.setAriaLabel(this.config.offAriaLabel);\n      }\n    }\n  }\n\n  /**\n   * Toggle the button 'on' if it is 'off', or 'off' if it is 'on'.\n   */\n  toggle() {\n    if (this.isOn()) {\n      this.off();\n    } else {\n      this.on();\n    }\n  }\n\n  /**\n   * Checks if the toggle button is in the 'on' state.\n   * @returns {boolean} true if button is 'on', false if 'off'\n   */\n  isOn(): boolean {\n    return this.onState;\n  }\n\n  /**\n   * Checks if the toggle button is in the 'off' state.\n   * @returns {boolean} true if button is 'off', false if 'on'\n   */\n  isOff(): boolean {\n    return !this.isOn();\n  }\n\n  protected onClickEvent() {\n    super.onClickEvent();\n\n    // Fire the toggle event together with the click event\n    // (they are technically the same, only the semantics are different)\n    this.onToggleEvent();\n  }\n\n  protected onToggleEvent() {\n    this.toggleButtonEvents.onToggle.dispatch(this);\n  }\n\n  protected onToggleOnEvent() {\n    this.toggleButtonEvents.onToggleOn.dispatch(this);\n  }\n\n  protected onToggleOffEvent() {\n    this.toggleButtonEvents.onToggleOff.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggle(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggle.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled 'on'.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggleOn(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggleOn.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled 'off'.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggleOff(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggleOff.getEvent();\n  }\n}","import {Component, ComponentConfig} from './component';\nimport {DOM} from '../dom';\n\n/**\n * Animated analog TV static noise.\n */\nexport class TvNoiseCanvas extends Component<ComponentConfig> {\n\n  private canvas: DOM;\n\n  private canvasElement: HTMLCanvasElement;\n  private canvasContext: CanvasRenderingContext2D;\n  private canvasWidth = 160;\n  private canvasHeight = 90;\n  private interferenceHeight = 50;\n  private lastFrameUpdate: number = 0;\n  private frameInterval: number = 60;\n  private useAnimationFrame: boolean = !!window.requestAnimationFrame;\n  private noiseAnimationWindowPos: number;\n  private frameUpdateHandlerId: number;\n\n  constructor(config: ComponentConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-tvnoisecanvas',\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    return this.canvas = new DOM('canvas', { 'class': this.getCssClasses() });\n  }\n\n  start(): void {\n    this.canvasElement = <HTMLCanvasElement>this.canvas.get(0);\n    this.canvasContext = this.canvasElement.getContext('2d');\n    this.noiseAnimationWindowPos = -this.canvasHeight;\n    this.lastFrameUpdate = 0;\n\n    this.canvasElement.width = this.canvasWidth;\n    this.canvasElement.height = this.canvasHeight;\n\n    this.renderFrame();\n  }\n\n  stop(): void {\n    if (this.useAnimationFrame) {\n      cancelAnimationFrame(this.frameUpdateHandlerId);\n    } else {\n      clearTimeout(this.frameUpdateHandlerId);\n    }\n  }\n\n  private renderFrame(): void {\n    // This code has been copied from the player controls.js and simplified\n\n    if (this.lastFrameUpdate + this.frameInterval > new Date().getTime()) {\n      // It's too early to render the next frame\n      this.scheduleNextRender();\n      return;\n    }\n\n    let currentPixelOffset;\n    let canvasWidth = this.canvasWidth;\n    let canvasHeight = this.canvasHeight;\n\n    // Create texture\n    let noiseImage = this.canvasContext.createImageData(canvasWidth, canvasHeight);\n\n    // Fill texture with noise\n    for (let y = 0; y < canvasHeight; y++) {\n      for (let x = 0; x < canvasWidth; x++) {\n        currentPixelOffset = (canvasWidth * y * 4) + x * 4;\n        noiseImage.data[currentPixelOffset] = Math.random() * 255;\n        if (y < this.noiseAnimationWindowPos || y > this.noiseAnimationWindowPos + this.interferenceHeight) {\n          noiseImage.data[currentPixelOffset] *= 0.85;\n        }\n        noiseImage.data[currentPixelOffset + 1] = noiseImage.data[currentPixelOffset];\n        noiseImage.data[currentPixelOffset + 2] = noiseImage.data[currentPixelOffset];\n        noiseImage.data[currentPixelOffset + 3] = 50;\n      }\n    }\n\n    // Put texture onto canvas\n    this.canvasContext.putImageData(noiseImage, 0, 0);\n\n    this.lastFrameUpdate = new Date().getTime();\n    this.noiseAnimationWindowPos += 7;\n    if (this.noiseAnimationWindowPos > canvasHeight) {\n      this.noiseAnimationWindowPos = -canvasHeight;\n    }\n\n    this.scheduleNextRender();\n  }\n\n  private scheduleNextRender(): void {\n    if (this.useAnimationFrame) {\n      this.frameUpdateHandlerId = window.requestAnimationFrame(this.renderFrame.bind(this));\n    } else {\n      this.frameUpdateHandlerId = window.setTimeout(this.renderFrame.bind(this), this.frameInterval);\n    }\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {DOM} from '../dom';\nimport {Timeout} from '../timeout';\nimport {PlayerUtils} from '../playerutils';\nimport { CancelEventArgs, EventDispatcher } from '../eventdispatcher';\nimport { PlayerAPI, PlayerResizedEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link UIContainer}.\n */\nexport interface UIContainerConfig extends ContainerConfig {\n  /**\n   * The delay in milliseconds after which the control bar will be hidden when there is no user interaction.\n   * Set to -1 for the UI to be always shown.\n   * Default: 5 seconds (5000)\n   */\n  hideDelay?: number;\n  /**\n   * An array of player states in which the UI will not be hidden, no matter what the {@link hideDelay} is.\n   */\n  hidePlayerStateExceptions?: PlayerUtils.PlayerState[];\n  /**\n   * The HTML element on which user interaction events (e.g. mouse and touch events) will be tracked to detect\n   * interaction with the UI. These basically trigger showing and hiding of the UI.\n   * Default: the UI container itself\n   */\n  userInteractionEventSource?: HTMLElement;\n}\n\n/**\n * The base container that contains all of the UI. The UIContainer is passed to the {@link UIManager} to build and\n * setup the UI.\n */\nexport class UIContainer extends Container<UIContainerConfig> {\n\n  private static readonly STATE_PREFIX = 'player-state-';\n\n  private static readonly FULLSCREEN = 'fullscreen';\n  private static readonly BUFFERING = 'buffering';\n  private static readonly REMOTE_CONTROL = 'remote-control';\n  private static readonly CONTROLS_SHOWN = 'controls-shown';\n  private static readonly CONTROLS_HIDDEN = 'controls-hidden';\n\n  private uiHideTimeout: Timeout;\n  private playerStateChange: EventDispatcher<UIContainer, PlayerUtils.PlayerState>;\n\n  private userInteractionEventSource: DOM;\n  private userInteractionEvents: { name: string, handler: EventListenerOrEventListenerObject }[];\n\n  public hideUi: () => void = () => {};\n  public showUi: () => void = () => {};\n\n  constructor(config: UIContainerConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <UIContainerConfig>{\n      cssClass: 'ui-uicontainer',\n      role: 'region',\n      ariaLabel: i18n.getLocalizer('player'),\n      hideDelay: 5000,\n    }, this.config);\n\n    this.playerStateChange = new EventDispatcher<UIContainer, PlayerUtils.PlayerState>();\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    const config = this.getConfig();\n\n    if (config.userInteractionEventSource) {\n      this.userInteractionEventSource = new DOM(config.userInteractionEventSource);\n    } else {\n      this.userInteractionEventSource = this.getDomElement();\n    }\n\n    super.configure(player, uimanager);\n\n    this.configureUIShowHide(player, uimanager);\n    this.configurePlayerStates(player, uimanager);\n  }\n\n  private configureUIShowHide(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    let config = this.getConfig();\n\n    if (config.hideDelay === -1) {\n      uimanager.onConfigured.subscribe(() => uimanager.onControlsShow.dispatch(this));\n      return;\n    }\n\n    let isUiShown = false;\n    let isSeeking = false;\n    let isFirstTouch = true;\n    let playerState: PlayerUtils.PlayerState;\n\n    const hidingPrevented = (): boolean => {\n      return config.hidePlayerStateExceptions && config.hidePlayerStateExceptions.indexOf(playerState) > -1;\n    };\n\n    this.showUi = () => {\n      if (!isUiShown) {\n        // Let subscribers know that they should reveal themselves\n        uimanager.onControlsShow.dispatch(this);\n        isUiShown = true;\n      }\n      // Don't trigger timeout while seeking (it will be triggered once the seek is finished) or casting\n      if (!isSeeking && !player.isCasting() && !hidingPrevented()) {\n        this.uiHideTimeout.start();\n      }\n    };\n\n    this.hideUi = () => {\n      // Hide the UI only if it is shown, and if not casting\n      if (isUiShown && !player.isCasting()) {\n        // Issue a preview event to check if we are good to hide the controls\n        let previewHideEventArgs = <CancelEventArgs>{};\n        uimanager.onPreviewControlsHide.dispatch(this, previewHideEventArgs);\n\n        if (!previewHideEventArgs.cancel) {\n          // If the preview wasn't canceled, let subscribers know that they should now hide themselves\n          uimanager.onControlsHide.dispatch(this);\n          isUiShown = false;\n        } else {\n          // If the hide preview was canceled, continue to show UI\n          this.showUi();\n        }\n      }\n    };\n\n    // Timeout to defer UI hiding by the configured delay time\n    this.uiHideTimeout = new Timeout(config.hideDelay, this.hideUi);\n\n    this.userInteractionEvents = [{\n      // On touch displays, the first touch reveals the UI\n      name: 'touchend',\n      handler: (e) => {\n        if (!isUiShown) {\n          // Only if the UI is hidden, we prevent other actions (except for the first touch) and reveal the UI\n          // instead. The first touch is not prevented to let other listeners receive the event and trigger an\n          // initial action, e.g. the huge playback button can directly start playback instead of requiring a double\n          // tap which 1. reveals the UI and 2. starts playback.\n          if (isFirstTouch && !player.isPlaying()) {\n            isFirstTouch = false;\n          } else {\n            e.preventDefault();\n          }\n          this.showUi();\n        }\n      },\n    }, {\n      // When the mouse enters, we show the UI\n      name: 'mouseenter',\n      handler: () => {\n        this.showUi();\n      },\n    }, {\n      // When the mouse moves within, we show the UI\n      name: 'mousemove',\n      handler: () => {\n        this.showUi();\n      },\n    }, {\n      name: 'focusin',\n      handler: () => {\n        this.showUi();\n      },\n    }, {\n      name: 'keydown',\n      handler: () => {\n        this.showUi();\n      },\n    }, {\n      // When the mouse leaves, we can prepare to hide the UI, except a seek is going on\n      name: 'mouseleave',\n      handler: () => {\n        // When a seek is going on, the seek scrub pointer may exit the UI area while still seeking, and we do not\n        // hide the UI in such cases\n        if (!isSeeking && !hidingPrevented()) {\n          this.uiHideTimeout.start();\n        }\n      },\n    }];\n\n    this.userInteractionEvents.forEach((event) => this.userInteractionEventSource.on(event.name, event.handler));\n\n    uimanager.onSeek.subscribe(() => {\n      this.uiHideTimeout.clear(); // Don't hide UI while a seek is in progress\n      isSeeking = true;\n    });\n    uimanager.onSeeked.subscribe(() => {\n      isSeeking = false;\n      if (!hidingPrevented()) {\n        this.uiHideTimeout.start(); // Re-enable UI hide timeout after a seek\n      }\n    });\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      this.showUi(); // Show UI when a Cast session has started (UI will then stay permanently on during the session)\n    });\n    this.playerStateChange.subscribe((_, state) => {\n      playerState = state;\n      if (hidingPrevented()) {\n        // Entering a player state that prevents hiding and forces the controls to be shown\n        this.uiHideTimeout.clear();\n        this.showUi();\n      } else {\n        // Entering a player state that allows hiding\n        this.uiHideTimeout.start();\n      }\n    });\n  }\n\n  private configurePlayerStates(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    let container = this.getDomElement();\n\n    // Convert player states into CSS class names\n    let stateClassNames = <any>[];\n    for (let state in PlayerUtils.PlayerState) {\n      if (isNaN(Number(state))) {\n        let enumName = PlayerUtils.PlayerState[<any>PlayerUtils.PlayerState[state]];\n        stateClassNames[PlayerUtils.PlayerState[state]] =\n          this.prefixCss(UIContainer.STATE_PREFIX + enumName.toLowerCase());\n      }\n    }\n\n    let removeStates = () => {\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Idle]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Prepared]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Playing]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Paused]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Finished]);\n    };\n\n    const updateState = (state: PlayerUtils.PlayerState) => {\n      removeStates();\n      container.addClass(stateClassNames[state]);\n      this.playerStateChange.dispatch(this, state);\n    };\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, () => {\n      updateState(PlayerUtils.PlayerState.Prepared);\n    });\n    player.on(player.exports.PlayerEvent.Play, () => {\n      updateState(PlayerUtils.PlayerState.Playing);\n    });\n    player.on(player.exports.PlayerEvent.Playing, () => {\n      updateState(PlayerUtils.PlayerState.Playing);\n    });\n    player.on(player.exports.PlayerEvent.Paused, () => {\n      updateState(PlayerUtils.PlayerState.Paused);\n    });\n    player.on(player.exports.PlayerEvent.PlaybackFinished, () => {\n      updateState(PlayerUtils.PlayerState.Finished);\n    });\n    player.on(player.exports.PlayerEvent.SourceUnloaded, () => {\n      updateState(PlayerUtils.PlayerState.Idle);\n    });\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      updateState(PlayerUtils.getState(player));\n    });\n\n    // Fullscreen marker class\n    player.on(player.exports.PlayerEvent.ViewModeChanged, () => {\n      if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n        container.addClass(this.prefixCss(UIContainer.FULLSCREEN));\n      } else {\n        container.removeClass(this.prefixCss(UIContainer.FULLSCREEN));\n      }\n    });\n    // Init fullscreen state\n    if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n      container.addClass(this.prefixCss(UIContainer.FULLSCREEN));\n    }\n\n    // Buffering marker class\n    player.on(player.exports.PlayerEvent.StallStarted, () => {\n      container.addClass(this.prefixCss(UIContainer.BUFFERING));\n    });\n    player.on(player.exports.PlayerEvent.StallEnded, () => {\n      container.removeClass(this.prefixCss(UIContainer.BUFFERING));\n    });\n    // Init buffering state\n    if (player.isStalled()) {\n      container.addClass(this.prefixCss(UIContainer.BUFFERING));\n    }\n\n    // RemoteControl marker class\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      container.addClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, () => {\n      container.removeClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    });\n    // Init RemoteControl state\n    if (player.isCasting()) {\n      container.addClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    }\n\n    // Controls visibility marker class\n    uimanager.onControlsShow.subscribe(() => {\n      container.removeClass(this.prefixCss(UIContainer.CONTROLS_HIDDEN));\n      container.addClass(this.prefixCss(UIContainer.CONTROLS_SHOWN));\n    });\n    uimanager.onControlsHide.subscribe(() => {\n      container.removeClass(this.prefixCss(UIContainer.CONTROLS_SHOWN));\n      container.addClass(this.prefixCss(UIContainer.CONTROLS_HIDDEN));\n    });\n\n    // Layout size classes\n    let updateLayoutSizeClasses = (width: number, height: number) => {\n      container.removeClass(this.prefixCss('layout-max-width-400'));\n      container.removeClass(this.prefixCss('layout-max-width-600'));\n      container.removeClass(this.prefixCss('layout-max-width-800'));\n      container.removeClass(this.prefixCss('layout-max-width-1200'));\n\n      if (width <= 400) {\n        container.addClass(this.prefixCss('layout-max-width-400'));\n      } else if (width <= 600) {\n        container.addClass(this.prefixCss('layout-max-width-600'));\n      } else if (width <= 800) {\n        container.addClass(this.prefixCss('layout-max-width-800'));\n      } else if (width <= 1200) {\n        container.addClass(this.prefixCss('layout-max-width-1200'));\n      }\n    };\n    player.on(player.exports.PlayerEvent.PlayerResized, (e: PlayerResizedEvent) => {\n      // Convert strings (with \"px\" suffix) to ints\n      let width = Math.round(Number(e.width.substring(0, e.width.length - 2)));\n      let height = Math.round(Number(e.height.substring(0, e.height.length - 2)));\n\n      updateLayoutSizeClasses(width, height);\n    });\n    // Init layout state\n    updateLayoutSizeClasses(new DOM(player.getContainer()).width(), new DOM(player.getContainer()).height());\n  }\n\n  release(): void {\n    // Explicitly unsubscribe user interaction event handlers because they could be attached to an external element\n    // that isn't owned by the UI and therefore not removed on release.\n    if (this.userInteractionEvents) {\n      this.userInteractionEvents.forEach((event) => this.userInteractionEventSource.off(event.name, event.handler));\n    }\n\n    super.release();\n\n    if (this.uiHideTimeout) {\n      this.uiHideTimeout.clear();\n    }\n  }\n\n  protected toDomElement(): DOM {\n    let container = super.toDomElement();\n\n    // Detect flexbox support (not supported in IE9)\n    if (document && typeof document.createElement('p').style.flex !== 'undefined') {\n      container.addClass(this.prefixCss('flexbox'));\n    } else {\n      container.addClass(this.prefixCss('no-flexbox'));\n    }\n\n    return container;\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between 'auto' and the available video qualities.\n */\nexport class VideoQualitySelectBox extends SelectBox {\n\n  private hasAuto: boolean;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-videoqualityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let selectCurrentVideoQuality = () => {\n      this.selectItem(player.getVideoQuality().id);\n    };\n\n    let updateVideoQualities = () => {\n      let videoQualities = player.getAvailableVideoQualities();\n\n      this.clearItems();\n\n      // Progressive streams do not support automatic quality selection\n      this.hasAuto = player.getStreamType() !== 'progressive';\n\n      if (this.hasAuto) {\n        // Add entry for automatic quality switching (default setting)\n        this.addItem('auto', i18n.getLocalizer('auto'));\n      }\n\n      // Add video qualities\n      for (let videoQuality of videoQualities) {\n        this.addItem(videoQuality.id, videoQuality.label);\n      }\n\n      // Select initial quality\n      selectCurrentVideoQuality();\n    };\n\n    this.onItemSelected.subscribe((sender: VideoQualitySelectBox, value: string) => {\n      player.setVideoQuality(value);\n    });\n\n    // Update qualities when source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, updateVideoQualities);\n    // Update qualities when the period within a source changes\n    player.on(player.exports.PlayerEvent.PeriodSwitched, updateVideoQualities);\n    // Update quality selection when quality is changed (from outside)\n    player.on(player.exports.PlayerEvent.VideoQualityChanged, selectCurrentVideoQuality);\n\n    if ((player.exports.PlayerEvent as any).VideoQualityAdded) {\n      // Update qualities when their availability changed\n      // TODO: remove any cast after next player release\n      player.on((player.exports.PlayerEvent as any).VideoQualityAdded, updateVideoQualities);\n      player.on((player.exports.PlayerEvent as any).VideoQualityRemoved, updateVideoQualities);\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(updateVideoQualities);\n  }\n\n  /**\n   * Returns true if the select box contains an 'auto' item for automatic quality selection mode.\n   * @return {boolean}\n   */\n  hasAutoItem(): boolean {\n    return this.hasAuto;\n  }\n}","import {Container, ContainerConfig} from './container';\nimport {VolumeSlider} from './volumeslider';\nimport {VolumeToggleButton} from './volumetogglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for a {@link VolumeControlButton}.\n */\nexport interface VolumeControlButtonConfig extends ContainerConfig {\n  /**\n   * The delay after which the volume slider will be hidden when there is no user interaction.\n   * Care must be taken that the delay is long enough so users can reach the slider from the toggle button, e.g. by\n   * mouse movement. If the delay is too short, the sliders disappears before the mouse pointer has reached it and\n   * the user is not able to use it.\n   * Default: 500ms\n   */\n  hideDelay?: number;\n  /**\n   * Specifies if the volume slider should be vertically or horizontally aligned.\n   * Default: true\n   */\n  vertical?: boolean;\n}\n\n/**\n * A composite volume control that consists of and internally manages a volume control button that can be used\n * for muting, and a (depending on the CSS style, e.g. slide-out) volume control bar.\n */\nexport class VolumeControlButton extends Container<VolumeControlButtonConfig> {\n\n  private volumeToggleButton: VolumeToggleButton;\n  private volumeSlider: VolumeSlider;\n\n  private volumeSliderHideTimeout: Timeout;\n\n  constructor(config: VolumeControlButtonConfig = {}) {\n    super(config);\n\n    this.volumeToggleButton = new VolumeToggleButton();\n    this.volumeSlider = new VolumeSlider({\n      vertical: config.vertical != null ? config.vertical : true,\n      hidden: true,\n    });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-volumecontrolbutton',\n      components: [this.volumeToggleButton, this.volumeSlider],\n      hideDelay: 500,\n    }, <VolumeControlButtonConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let volumeToggleButton = this.getVolumeToggleButton();\n    let volumeSlider = this.getVolumeSlider();\n\n    this.volumeSliderHideTimeout = new Timeout(this.getConfig().hideDelay, () => {\n      volumeSlider.hide();\n    });\n\n    /*\n     * Volume Slider visibility handling\n     *\n     * The volume slider shall be visible while the user hovers the mute toggle button, while the user hovers the\n     * volume slider, and while the user slides the volume slider. If none of these situations are true, the slider\n     * shall disappear.\n     */\n    let volumeSliderHovered = false;\n    volumeToggleButton.getDomElement().on('mouseenter', () => {\n      // Show volume slider when mouse enters the button area\n      if (volumeSlider.isHidden()) {\n        volumeSlider.show();\n      }\n      // Avoid hiding of the slider when button is hovered\n      this.volumeSliderHideTimeout.clear();\n    });\n    volumeToggleButton.getDomElement().on('mouseleave', () => {\n      // Hide slider delayed when button is left\n      this.volumeSliderHideTimeout.reset();\n    });\n    volumeSlider.getDomElement().on('mouseenter', () => {\n      // When the slider is entered, cancel the hide timeout activated by leaving the button\n      this.volumeSliderHideTimeout.clear();\n      volumeSliderHovered = true;\n    });\n    volumeSlider.getDomElement().on('mouseleave', () => {\n      // When mouse leaves the slider, only hide it if there is no slide operation in progress\n      if (volumeSlider.isSeeking()) {\n        this.volumeSliderHideTimeout.clear();\n      } else {\n        this.volumeSliderHideTimeout.reset();\n      }\n      volumeSliderHovered = false;\n    });\n    volumeSlider.onSeeked.subscribe(() => {\n      // When a slide operation is done and the slider not hovered (mouse outside slider), hide slider delayed\n      if (!volumeSliderHovered) {\n        this.volumeSliderHideTimeout.reset();\n      }\n    });\n  }\n\n  release(): void {\n    super.release();\n    this.volumeSliderHideTimeout.clear();\n  }\n\n  /**\n   * Provides access to the internally managed volume toggle button.\n   * @returns {VolumeToggleButton}\n   */\n  getVolumeToggleButton(): VolumeToggleButton {\n    return this.volumeToggleButton;\n  }\n\n  /**\n   * Provides access to the internally managed volume silder.\n   * @returns {VolumeSlider}\n   */\n  getVolumeSlider(): VolumeSlider {\n    return this.volumeSlider;\n  }\n}","import { SeekBar, SeekBarConfig, SeekPreviewEventArgs } from './seekbar';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { VolumeTransition } from '../volumecontroller';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link VolumeSlider} component.\n */\nexport interface VolumeSliderConfig extends SeekBarConfig {\n  /**\n   * Specifies if the volume slider should be automatically hidden when volume control is prohibited by the\n   * browser or platform. This currently only applies to iOS.\n   * Default: true\n   */\n  hideIfVolumeControlProhibited?: boolean;\n}\n\n/**\n * A simple volume slider component to adjust the player's volume setting.\n */\nexport class VolumeSlider extends SeekBar {\n  private volumeTransition: VolumeTransition;\n\n  constructor(config: VolumeSliderConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <VolumeSliderConfig>{\n      cssClass: 'ui-volumeslider',\n      hideIfVolumeControlProhibited: true,\n      ariaLabel: i18n.getLocalizer('settings.audio.volume'),\n      tabIndex: 0,\n    }, this.config);\n  }\n\n  private setVolumeAriaSliderValues(value: number) {\n    this.getDomElement().attr('aria-valuenow', Math.ceil(value).toString());\n    this.getDomElement().attr('aria-valuetext', `${i18n.performLocalization(i18n.getLocalizer('seekBar.value'))}: ${Math.ceil(value)}`);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager, false);\n\n    this.setAriaSliderMinMax('0', '100');\n\n    let config = <VolumeSliderConfig>this.getConfig();\n\n    const volumeController = uimanager.getConfig().volumeController;\n\n    if (config.hideIfVolumeControlProhibited && !this.detectVolumeControlAvailability()) {\n      this.hide();\n\n      // We can just return from here, because the user will never interact with the control and any configured\n      // functionality would only eat resources for no reason.\n      return;\n    }\n\n    volumeController.onChanged.subscribe((_, args) => {\n      if (args.muted) {\n        this.setVolumeAriaSliderValues(0);\n        this.setPlaybackPosition(0);\n      } else {\n        this.setPlaybackPosition(args.volume);\n        this.setVolumeAriaSliderValues(args.volume);\n      }\n    });\n\n    this.onSeek.subscribe(() => {\n      this.volumeTransition = volumeController.startTransition();\n    });\n\n    this.onSeekPreview.subscribeRateLimited(this.updateVolumeWhileScrubbing, 50);\n    this.onSeeked.subscribe((sender, percentage) => {\n      if (this.volumeTransition) {\n        this.volumeTransition.finish(percentage);\n      }\n    });\n\n    // Update the volume slider marker when the player resized, a source is loaded,\n    // or the UI is configured. Check the seekbar for a detailed description.\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      this.refreshPlaybackPosition();\n    });\n    uimanager.onConfigured.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    uimanager.onComponentShow.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n    uimanager.onComponentHide.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    // Init volume bar\n    volumeController.onChangedEvent();\n  }\n\n  private updateVolumeWhileScrubbing = (sender: VolumeSlider, args: SeekPreviewEventArgs) => {\n    if (args.scrubbing && this.volumeTransition) {\n      this.volumeTransition.update(args.position);\n    }\n  };\n\n  private detectVolumeControlAvailability(): boolean {\n    /*\n     * \"On iOS devices, the audio level is always under the user’s physical control. The volume property is not\n     * settable in JavaScript. Reading the volume property always returns 1.\"\n     * https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html\n     */\n    // as muted autoplay gets paused as soon as we unmute it, we may not touch the volume of the actual player so we\n    // probe a dummy audio element\n    const dummyVideoElement = document.createElement('video');\n    // try setting the volume to 0.7 and if it's still 1 we are on a volume control restricted device\n    dummyVideoElement.volume = 0.7;\n    return dummyVideoElement.volume !== 1;\n  }\n\n  release(): void {\n    super.release();\n\n    this.onSeekPreview.unsubscribe(this.updateVolumeWhileScrubbing);\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles audio muting.\n */\nexport class VolumeToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    const defaultConfig: ToggleButtonConfig = {\n      cssClass: 'ui-volumetogglebutton',\n      text: i18n.getLocalizer('settings.audio.mute'),\n      onClass: 'muted',\n      offClass: 'unmuted',\n      ariaLabel: i18n.getLocalizer('settings.audio.mute'),\n    };\n\n    this.config = this.mergeConfig(config, defaultConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const volumeController = uimanager.getConfig().volumeController;\n\n    volumeController.onChanged.subscribe((_, args) => {\n      if (args.muted) {\n        this.on();\n      } else {\n        this.off();\n      }\n\n      const volumeLevelTens = Math.ceil(args.volume / 10);\n      this.getDomElement().data(this.prefixCss('volume-level-tens'), String(volumeLevelTens));\n    });\n\n    this.onClick.subscribe(() => {\n      volumeController.toggleMuted();\n    });\n\n    // Startup init\n    volumeController.onChangedEvent();\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI, PlayerEventBase, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles the video view between normal/mono and VR/stereo.\n */\nexport class VRToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-vrtogglebutton',\n      text: i18n.getLocalizer('vr'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let isVRConfigured = () => {\n      // VR availability cannot be checked through getVRStatus() because it is asynchronously populated and not\n      // available at UI initialization. As an alternative, we check the VR settings in the config.\n      // TODO use getVRStatus() through isVRStereoAvailable() once the player has been rewritten and the status is\n      // available in Ready\n      const source = player.getSource();\n      return source && Boolean(source.vr);\n    };\n\n    let isVRStereoAvailable = () => {\n      const source = player.getSource();\n      return player.vr && Boolean(source.vr);\n    };\n\n    let vrStateHandler = (ev: PlayerEventBase) => {\n      if (ev.type === player.exports.PlayerEvent.Warning\n        && (ev as WarningEvent).code !== player.exports.WarningCode.VR_RENDERING_ERROR) {\n        return;\n      }\n\n      if (isVRConfigured() && isVRStereoAvailable()) {\n        this.show(); // show button in case it is hidden\n\n        if (player.vr && player.vr.getStereo()) {\n          this.on();\n        } else {\n          this.off();\n        }\n      } else {\n        this.hide(); // hide button if no stereo mode available\n      }\n    };\n\n    let vrButtonVisibilityHandler = () => {\n      if (isVRConfigured()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.VRStereoChanged, vrStateHandler);\n    player.on(player.exports.PlayerEvent.Warning, vrStateHandler);\n    // Hide button when VR source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, vrButtonVisibilityHandler);\n    uimanager.getConfig().events.onUpdated.subscribe(vrButtonVisibilityHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isVRStereoAvailable()) {\n        if (console) {\n          console.log('No VR content');\n        }\n      } else {\n        if (player.vr && player.vr.getStereo()) {\n          player.vr.setStereo(false);\n        } else {\n          player.vr.setStereo(true);\n        }\n      }\n    });\n\n    // Set startup visibility\n    vrButtonVisibilityHandler();\n  }\n}","import {ClickOverlay, ClickOverlayConfig} from './clickoverlay';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link ClickOverlay}.\n */\nexport interface WatermarkConfig extends ClickOverlayConfig {\n  // nothing yet\n}\n\n/**\n * A watermark overlay with a clickable logo.\n */\nexport class Watermark extends ClickOverlay {\n\n  constructor(config: WatermarkConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-watermark',\n      url: 'http://bitmovin.com',\n      role: 'link',\n      text: 'logo',\n      ariaLabel: i18n.getLocalizer('watermarkLink'),\n    }, <WatermarkConfig>this.config);\n  }\n}","import {VRToggleButton} from './components/vrtogglebutton';\nimport {SettingsToggleButton} from './components/settingstogglebutton';\nimport {VolumeSlider} from './components/volumeslider';\nimport {PlaybackTimeLabel, PlaybackTimeLabelMode} from './components/playbacktimelabel';\nimport {AirPlayToggleButton} from './components/airplaytogglebutton';\nimport {ErrorMessageOverlay} from './components/errormessageoverlay';\nimport {ControlBar} from './components/controlbar';\nimport {CastToggleButton} from './components/casttogglebutton';\nimport {FullscreenToggleButton} from './components/fullscreentogglebutton';\nimport {RecommendationOverlay} from './components/recommendationoverlay';\nimport {PlaybackSpeedSelectBox} from './components/playbackspeedselectbox';\nimport {AudioQualitySelectBox} from './components/audioqualityselectbox';\nimport {CastStatusOverlay} from './components/caststatusoverlay';\nimport {UIContainer} from './components/uicontainer';\nimport {Watermark} from './components/watermark';\nimport {SubtitleOverlay} from './components/subtitleoverlay';\nimport {SettingsPanel} from './components/settingspanel';\nimport {SeekBarLabel} from './components/seekbarlabel';\nimport {PlaybackToggleOverlay} from './components/playbacktoggleoverlay';\nimport {PictureInPictureToggleButton} from './components/pictureinpicturetogglebutton';\nimport {Spacer} from './components/spacer';\nimport {Container} from './components/container';\nimport {VolumeToggleButton} from './components/volumetogglebutton';\nimport {PlaybackToggleButton} from './components/playbacktogglebutton';\nimport {SeekBar} from './components/seekbar';\nimport {VideoQualitySelectBox} from './components/videoqualityselectbox';\nimport {UIConditionContext, UIManager} from './uimanager';\nimport {TitleBar} from './components/titlebar';\nimport {BufferingOverlay} from './components/bufferingoverlay';\nimport {SubtitleListBox} from './components/subtitlelistbox';\nimport {AudioTrackListBox} from './components/audiotracklistbox';\nimport {SettingsPanelItem} from './components/settingspanelitem';\nimport {SettingsPanelPage} from './components/settingspanelpage';\nimport { UIFactory } from './uifactory';\nimport { UIConfig } from './uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport namespace DemoFactory {\n\n  export function buildDemoWithSeparateAudioSubtitlesButtons(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    // show smallScreen UI only on mobile/handheld devices\n    let smallScreenSwitchWidth = 600;\n\n    return new UIManager(player, [{\n      ui: UIFactory.modernSmallScreenAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth\n          && context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: UIFactory.modernAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: UIFactory.modernSmallScreenUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth;\n      },\n    }, {\n      ui: modernUIWithSeparateAudioSubtitlesButtons(),\n    }], config);\n  }\n\n  function modernUIWithSeparateAudioSubtitlesButtons() {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let settingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem('Video Quality', new VideoQualitySelectBox()),\n            new SettingsPanelItem('Speed', new PlaybackSpeedSelectBox()),\n            new SettingsPanelItem('Audio Quality', new AudioQualitySelectBox()),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let subtitleListBox = new SubtitleListBox();\n    let subtitleSettingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem(null, subtitleListBox),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let audioTrackListBox = new AudioTrackListBox();\n    let audioTrackSettingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem(null, audioTrackListBox),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let controlBar = new ControlBar({\n      components: [\n        audioTrackSettingsPanel,\n        subtitleSettingsPanel,\n        settingsPanel,\n        new Container({\n          components: [\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n        new Container({\n          components: [\n            new PlaybackToggleButton(),\n            new VolumeToggleButton(),\n            new VolumeSlider(),\n            new Spacer(),\n            new PictureInPictureToggleButton(),\n            new AirPlayToggleButton(),\n            new CastToggleButton(),\n            new VRToggleButton(),\n            new SettingsToggleButton({\n              settingsPanel: audioTrackSettingsPanel,\n              cssClass: 'ui-audiotracksettingstogglebutton',\n            }),\n            new SettingsToggleButton({\n              settingsPanel: subtitleSettingsPanel,\n              cssClass: 'ui-subtitlesettingstogglebutton',\n            }),\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\n            new FullscreenToggleButton(),\n          ],\n          cssClasses: ['controlbar-bottom'],\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new CastStatusOverlay(),\n        controlBar,\n        new TitleBar(),\n        new RecommendationOverlay(),\n        new Watermark(),\n        new ErrorMessageOverlay(),\n      ],\n    });\n  }\n}","export interface Offset {\n  left: number;\n  top: number;\n}\n\nexport interface Size {\n  width: number;\n  height: number;\n}\n\nexport interface CssProperties {\n  [propertyName: string]: string;\n}\n\n/**\n * Simple DOM manipulation and DOM element event handling modeled after jQuery (as replacement for jQuery).\n *\n * Like jQuery, DOM operates on single elements and lists of elements. For example: creating an element returns a DOM\n * instance with a single element, selecting elements returns a DOM instance with zero, one, or many elements. Similar\n * to jQuery, setters usually affect all elements, while getters operate on only the first element.\n * Also similar to jQuery, most methods (except getters) return the DOM instance facilitating easy chaining of method\n * calls.\n *\n * Built with the help of: http://youmightnotneedjquery.com/\n */\nexport class DOM {\n\n  private document: Document;\n\n  /**\n   * The list of elements that the instance wraps. Take care that not all methods can operate on the whole list,\n   * getters usually just work on the first element.\n   */\n  private elements: HTMLElement[];\n\n  /**\n   * Creates a DOM element.\n   * @param tagName the tag name of the DOM element\n   * @param attributes a list of attributes of the element\n   */\n  constructor(tagName: string, attributes: {[name: string]: string});\n  /**\n   * Selects all elements from the DOM that match the specified selector.\n   * @param selector the selector to match DOM elements with\n   */\n  constructor(selector: string);\n  /**\n   * Wraps a plain HTMLElement with a DOM instance.\n   * @param element the HTMLElement to wrap with DOM\n   */\n  constructor(element: HTMLElement);\n  /**\n   * Wraps a list of plain HTMLElements with a DOM instance.\n   * @param elements the HTMLElements to wrap with DOM\n   */\n  constructor(elements: HTMLElement[]);\n  /**\n   * Wraps the document with a DOM instance. Useful to attach event listeners to the document.\n   * @param document the document to wrap\n   */\n  constructor(document: Document);\n  constructor(something: string | HTMLElement | HTMLElement[] | Document, attributes?: {[name: string]: string}) {\n    this.document = document; // Set the global document to the local document field\n\n    if (something instanceof Array) {\n      if (something.length > 0 && something[0] instanceof HTMLElement) {\n        let elements = something;\n        this.elements = elements;\n      }\n    }\n    else if (something instanceof HTMLElement) {\n      let element = something;\n      this.elements = [element];\n    }\n    else if (something instanceof Document) {\n      // When a document is passed in, we do not do anything with it, but by setting this.elements to null\n      // we give the event handling method a means to detect if the events should be registered on the document\n      // instead of elements.\n      this.elements = null;\n    }\n    else if (attributes) {\n      let tagName = something;\n      let element = document.createElement(tagName);\n\n      for (let attributeName in attributes) {\n        let attributeValue = attributes[attributeName];\n        if (attributeValue != null) {\n          element.setAttribute(attributeName, attributeValue);\n        }\n      }\n\n      this.elements = [element];\n    }\n    else {\n      let selector = something;\n      this.elements = this.findChildElements(selector);\n    }\n  }\n\n  /**\n   * Gets the number of elements that this DOM instance currently holds.\n   * @returns {number} the number of elements\n   */\n  get length(): number {\n    return this.elements ? this.elements.length : 0;\n  }\n\n  /**\n   * Gets the HTML elements that this DOM instance currently holds.\n   * @returns {HTMLElement[]} the raw HTML elements\n   */\n  get(): HTMLElement[];\n  /**\n   * Gets an HTML element from the list elements that this DOM instance currently holds.\n   * @param index The zero-based index into the element list. Can be negative to return an element from the end,\n   *    e.g. -1 returns the last element.\n   */\n  get(index: number): HTMLElement;\n  get(index?: number): HTMLElement | HTMLElement[] {\n    if (index === undefined) {\n      return this.elements;\n    } else if (!this.elements || index >= this.elements.length || index < -this.elements.length) {\n      return undefined;\n    } else if (index < 0) {\n      return this.elements[this.elements.length - index];\n    } else {\n      return this.elements[index];\n    }\n  }\n\n  /**\n   * A shortcut method for iterating all elements. Shorts this.elements.forEach(...) to this.forEach(...).\n   * @param handler the handler to execute an operation on an element\n   */\n  private forEach(handler: (element: HTMLElement) => void): void {\n    if (!this.elements) {\n      return;\n    }\n    this.elements.forEach((element) => {\n      handler(element);\n    });\n  }\n\n  private findChildElementsOfElement(element: HTMLElement | Document, selector: string): HTMLElement[] {\n    let childElements = element.querySelectorAll(selector);\n\n    // Convert NodeList to Array\n    // https://toddmotto.com/a-comprehensive-dive-into-nodelists-arrays-converting-nodelists-and-understanding-the-dom/\n    return [].slice.call(childElements);\n  }\n\n  private findChildElements(selector: string): HTMLElement[] {\n    let allChildElements = <HTMLElement[]>[];\n\n    if (this.elements) {\n      this.forEach((element) => {\n        allChildElements = allChildElements.concat(this.findChildElementsOfElement(element, selector));\n      });\n    }\n    else {\n      return this.findChildElementsOfElement(document, selector);\n    }\n\n    return allChildElements;\n  }\n\n  /**\n   * Finds all child elements of all elements matching the supplied selector.\n   * @param selector the selector to match with child elements\n   * @returns {DOM} a new DOM instance representing all matched children\n   */\n  find(selector: string): DOM {\n    let allChildElements = this.findChildElements(selector);\n    return new DOM(allChildElements);\n  }\n\n  /**\n   * Focuses to the first input element\n   */\n  focusToFirstInput() {\n    const inputElements = this.findChildElements('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n\n    if (inputElements.length > 0) {\n      inputElements[0].focus();\n    }\n  }\n\n  /**\n   * Focuses to the first input element\n   */\n  scrollTo(x: number, y: number) {\n    this.elements[0].scrollTo(x, y);\n  }\n\n  /**\n   * Returns a string of the inner HTML content of the first element.\n   */\n  html(): string;\n  /**\n   * Sets the inner HTML content of all elements.\n   * @param content a string of plain text or HTML markup\n   */\n  html(content: string): DOM;\n  html(content?: string): string | DOM {\n    if (arguments.length > 0) {\n      return this.setHtml(content);\n    }\n    else {\n      return this.getHtml();\n    }\n  }\n\n  private getHtml(): string | null {\n    return this.elements[0].innerHTML;\n  }\n\n  private setHtml(content: string): DOM {\n    if (content === undefined || content == null) {\n      // Set to empty string to avoid innerHTML getting set to 'undefined' (all browsers) or 'null' (IE9)\n      content = '';\n    }\n\n    this.forEach((element) => {\n      element.innerHTML = content;\n    });\n\n    return this;\n  }\n\n  /**\n   * Clears the inner HTML of all elements (deletes all children).\n   * @returns {DOM}\n   */\n  empty(): DOM {\n    this.forEach((element) => {\n      element.innerHTML = '';\n    });\n    return this;\n  }\n\n  /**\n   * Returns the current value of the first form element, e.g. the selected value of a select box or the text if an\n   * input field.\n   * @returns {string} the value of a form element\n   */\n  val(): string {\n    let element = this.elements[0];\n\n    if (element instanceof HTMLSelectElement || element instanceof HTMLInputElement) {\n      return element.value;\n    }\n    else {\n      // TODO add support for missing form elements\n      throw new Error(`val() not supported for ${typeof element}`);\n    }\n  }\n\n  /**\n   * Returns the value of an attribute on the first element.\n   * @param attribute\n   */\n  attr(attribute: string): string | null;\n  /**\n   * Sets an attribute on all elements.\n   * @param attribute the name of the attribute\n   * @param value the value of the attribute\n   */\n  attr(attribute: string, value: string): DOM;\n  attr(attribute: string, value?: string): string | null | DOM {\n    if (arguments.length > 1) {\n      return this.setAttr(attribute, value);\n    }\n    else {\n      return this.getAttr(attribute);\n    }\n  }\n\n  /**\n   * Removes the attribute of the element.\n   * @param attribute\n   */\n  removeAttr(attribute: string) {\n    this.forEach((element) => {\n      element.removeAttribute(attribute);\n    });\n  }\n\n  private getAttr(attribute: string): string | null {\n    return this.elements[0].getAttribute(attribute);\n  }\n\n  private setAttr(attribute: string, value: string): DOM {\n    this.forEach((element) => {\n      element.setAttribute(attribute, value);\n    });\n    return this;\n  }\n\n  /**\n   * Returns the value of a data element on the first element.\n   * @param dataAttribute the name of the data attribute without the 'data-' prefix\n   */\n  data(dataAttribute: string): string | null;\n  /**\n   * Sets a data attribute on all elements.\n   * @param dataAttribute the name of the data attribute without the 'data-' prefix\n   * @param value the value of the data attribute\n   */\n  data(dataAttribute: string, value: string): DOM;\n  data(dataAttribute: string, value?: string): string | null | DOM {\n    if (arguments.length > 1) {\n      return this.setData(dataAttribute, value);\n    }\n    else {\n      return this.getData(dataAttribute);\n    }\n  }\n\n  private getData(dataAttribute: string): string | null {\n    return this.elements[0].getAttribute('data-' + dataAttribute);\n  }\n\n  private setData(dataAttribute: string, value: string): DOM {\n    this.forEach((element) => {\n      element.setAttribute('data-' + dataAttribute, value);\n    });\n    return this;\n  }\n\n  /**\n   * Appends one or more DOM elements as children to all elements.\n   * @param childElements the chrild elements to append\n   * @returns {DOM}\n   */\n  append(...childElements: DOM[]): DOM {\n    this.forEach((element) => {\n      childElements.forEach((childElement) => {\n        childElement.elements.forEach((_, index) => {\n          element.appendChild(childElement.elements[index]);\n        });\n      });\n    });\n    return this;\n  }\n\n  /**\n   * Removes all elements from the DOM.\n   */\n  remove(): void {\n    this.forEach((element) => {\n      let parent = element.parentNode;\n      if (parent) {\n        parent.removeChild(element);\n      }\n    });\n  }\n\n  /**\n   * Returns the offset of the first element from the document's top left corner.\n   * @returns {Offset}\n   */\n  offset(): Offset {\n    let element = this.elements[0];\n    let elementRect = element.getBoundingClientRect();\n    let htmlRect = document.body.parentElement.getBoundingClientRect();\n\n    // Virtual viewport scroll handling (e.g. pinch zoomed viewports in mobile browsers or desktop Chrome/Edge)\n    // 'normal' zooms and virtual viewport zooms (aka layout viewport) result in different\n    // element.getBoundingClientRect() results:\n    //  - with normal scrolls, the clientRect decreases with an increase in scroll(Top|Left)/page(X|Y)Offset\n    //  - with pinch zoom scrolls, the clientRect stays the same while scroll/pageOffset changes\n    // This means, that the combination of clientRect + scroll/pageOffset does not work to calculate the offset\n    // from the document's upper left origin when pinch zoom is used.\n    // To work around this issue, we do not use scroll/pageOffset but get the clientRect of the html element and\n    // subtract it from the element's rect, which always results in the offset from the document origin.\n    // NOTE: the current way of offset calculation was implemented specifically to track event positions on the\n    // seek bar, and it might break compatibility with jQuery's offset() method. If this ever turns out to be a\n    // problem, this method should be reverted to the old version and the offset calculation moved to the seek bar.\n\n    return {\n      top: elementRect.top - htmlRect.top,\n      left: elementRect.left - htmlRect.left,\n    };\n  }\n\n  /**\n   * Returns the width of the first element.\n   * @returns {number} the width of the first element\n   */\n  width(): number {\n    // TODO check if this is the same as jQuery's width() (probably not)\n    return this.elements[0].offsetWidth;\n  }\n\n  /**\n   * Returns the height of the first element.\n   * @returns {number} the height of the first element\n   */\n  height(): number {\n    // TODO check if this is the same as jQuery's height() (probably not)\n    return this.elements[0].offsetHeight;\n  }\n\n  /**\n   * Returns the size of the first element.\n   * @return {Size} the size of the first element\n   */\n  size(): Size {\n    return { width: this.width(), height: this.height() };\n  }\n\n  /**\n   * Attaches an event handler to one or more events on all elements.\n   * @param eventName the event name (or multiple names separated by space) to listen to\n   * @param eventHandler the event handler to call when the event fires\n   * @returns {DOM}\n   */\n  on(eventName: string, eventHandler: EventListenerOrEventListenerObject): DOM {\n    let events = eventName.split(' ');\n\n    events.forEach((event) => {\n      if (this.elements == null) {\n        this.document.addEventListener(event, eventHandler);\n      }\n      else {\n        this.forEach((element) => {\n          element.addEventListener(event, eventHandler);\n        });\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Removes an event handler from one or more events on all elements.\n   * @param eventName the event name (or multiple names separated by space) to remove the handler from\n   * @param eventHandler the event handler to remove\n   * @returns {DOM}\n   */\n  off(eventName: string, eventHandler: EventListenerOrEventListenerObject): DOM {\n    let events = eventName.split(' ');\n\n    events.forEach((event) => {\n      if (this.elements == null) {\n        this.document.removeEventListener(event, eventHandler);\n      }\n      else {\n        this.forEach((element) => {\n          element.removeEventListener(event, eventHandler);\n        });\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Adds the specified class(es) to all elements.\n   * @param className the class(es) to add, multiple classes separated by space\n   * @returns {DOM}\n   */\n  addClass(className: string): DOM {\n    this.forEach((element) => {\n      if (element.classList) {\n        const classNames = className.split(' ')\n          .filter(className => className.length > 0);\n\n        if (classNames.length > 0) {\n          element.classList.add(...classNames);\n        }\n      }\n      else {\n        element.className += ' ' + className;\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Removed the specified class(es) from all elements.\n   * @param className the class(es) to remove, multiple classes separated by space\n   * @returns {DOM}\n   */\n  removeClass(className: string): DOM {\n    this.forEach((element) => {\n      if (element.classList) {\n        const classNames = className.split(' ')\n          .filter(className => className.length > 0);\n\n        if (classNames.length > 0) {\n          element.classList.remove(...classNames);\n        }\n      }\n      else {\n        element.className = element.className.replace(\n          new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Checks if any of the elements has the specified class.\n   * @param className the class name to check\n   * @returns {boolean} true if one of the elements has the class attached, else if no element has it attached\n   */\n  hasClass(className: string): boolean {\n    let hasClass = false;\n\n    this.forEach((element) => {\n      if (element.classList) {\n        if (element.classList.contains(className)) {\n          // Since we are inside a handler, we can't just 'return true'. Instead, we save it to a variable\n          // and return it at the end of the function body.\n          hasClass = true;\n        }\n      }\n      else {\n        if (new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className)) {\n          // See comment above\n          hasClass = true;\n        }\n      }\n    });\n\n    return hasClass;\n  }\n\n  /**\n   * Returns the value of a CSS property of the first element.\n   * @param propertyName the name of the CSS property to retrieve the value of\n   */\n  css(propertyName: string): string | null;\n  /**\n   * Sets the value of a CSS property on all elements.\n   * @param propertyName the name of the CSS property to set the value for\n   * @param value the value to set for the given CSS property\n   */\n  css(propertyName: string, value: string): DOM;\n  /**\n   * Sets a collection of CSS properties and their values on all elements.\n   * @param propertyValueCollection an object containing pairs of property names and their values\n   */\n  css(propertyValueCollection: CssProperties): DOM;\n  css(propertyNameOrCollection: string | CssProperties, value?: string): string | null | DOM {\n    if (typeof propertyNameOrCollection === 'string') {\n      let propertyName = propertyNameOrCollection;\n\n      if (arguments.length === 2) {\n        return this.setCss(propertyName, value);\n      }\n      else {\n        return this.getCss(propertyName);\n      }\n    }\n    else {\n      let propertyValueCollection = propertyNameOrCollection;\n      return this.setCssCollection(propertyValueCollection);\n    }\n  }\n\n  /**\n   * Removes an inline CSS property if it exists\n   * @param propertyName name of the property to remove\n   * @param elementIndex index of the element whose CSS property should get removed\n   */\n  removeCss(propertyName: string, elementIndex = 0): string {\n    return this.elements[elementIndex].style.removeProperty(propertyName);\n  }\n\n  private getCss(propertyName: string): string | null {\n    return getComputedStyle(this.elements[0])[<any>propertyName];\n  }\n\n  private setCss(propertyName: string, value: string): DOM {\n    this.forEach((element) => {\n      // <any> cast to resolve TS7015: http://stackoverflow.com/a/36627114/370252\n      element.style[<any>propertyName] = value;\n    });\n    return this;\n  }\n\n  private setCssCollection(ruleValueCollection: {[ruleName: string]: string}): DOM {\n    this.forEach((element) => {\n      // http://stackoverflow.com/a/34490573/370252\n      Object.assign(element.style, ruleValueCollection);\n    });\n\n    return this;\n  }\n}\n","import {ErrorMessageMap, ErrorMessageTranslator} from './components/errormessageoverlay';\nimport { ErrorEvent } from 'bitmovin-player';\nimport { MobileV3PlayerErrorEvent, MobileV3SourceErrorEvent } from './mobilev3playerapi';\n\nexport namespace ErrorUtils {\n\n  export const defaultErrorMessages: ErrorMessageMap = {\n    1000: 'Error is unknown',\n    1001: 'The player API is not available after a call to PlayerAPI.destroy.',\n    1100: 'General setup error',\n    1101: 'There was an error when inserting the HTML video element',\n    1102: 'No configuration was provided',\n    1103: 'The license is not valid',\n    1104: 'The the domain-locked player is not authorized to playback on this domain',\n    1105: 'The domain is not allowlisted',\n    1106: 'The license server URL is invalid',\n    1107: 'The impression server URL is invalid',\n    1108: 'Could not initialize a rendering engine',\n    1109: 'The used flash version does not support playback',\n    1110: 'Native Flash is not authorized by a valid Adobe token',\n    1111: 'Flash doesn\\'t have sufficient resources',\n    1112: 'Flash container API not available',\n    1113: 'Protocol not supported. This site has been loaded using \"file\" protocol, but unfortunately this is not supported. Please load the page using a web server (using http or https)',\n    1200: 'General source error',\n    1201: 'No valid source was provided',\n    1202: 'The downloaded manifest is invalid',\n    1203: 'There was no technology detected to playback the provided source',\n    1204: 'The stream type is not supported',\n    1205: 'The forced technology is not supported',\n    1206: 'No stream found for supported technologies.',\n    1207: 'The downloaded segment is empty',\n    1208: 'The manifest could not be loaded',\n    1209: 'Progressive stream type not supported or the stream has an error',\n    1210: 'HLS stream has an error',\n    1211: 'The encryption method is not supported',\n    1300: 'General playback error',\n    1301: 'Video decoder or demuxer had an error with the content',\n    1302: 'General error if Flash renderer has an error',\n    1303: 'Flash doesn\\'t have sufficient resources',\n    1304: 'The transmuxer could not be initialized',\n    1400: 'Network error while downloading',\n    1401: 'The manifest download timed out',\n    1402: 'The segment download timed out',\n    1403: 'The progressive stream download timed out',\n    1404: 'The Certificate could not be loaded',\n    2000: 'General DRM error',\n    2001: 'Required DRM configuration is missing',\n    2002: 'The licensing server URL is missing',\n    2003: 'License request failed',\n    2004: 'Key or KeyId is missing',\n    2005: 'Key size is not supported',\n    2006: 'Unable to instantiate a key system supporting the required combinations',\n    2007: 'Unable to create or initialize key session',\n    2008: 'The MediaKey object could not be created/initialized',\n    2009: 'Key error',\n    2010: 'The key system is not supported',\n    2011: 'The certificate is not valid',\n    2012: 'Invalid header key/value pair for PlayReady license request',\n    2013: 'Content cannot be played back because the output is restricted on this machine',\n    2014: 'DRM error for the Flash renderer',\n    2100: 'General VR error',\n    2101: 'Player technology not compatible with VR playback',\n    3000: 'General module error',\n    3001: 'The definition of the module is invalid (e.g. incomplete).',\n    3002: 'The module definition specifies dependencies but the module is not provided via a function for deferred loading.',\n    3003: 'A module cannot be loaded because it has not been added to the player core.',\n    3004: 'A module cannot be loaded because one or more dependencies are missing.',\n    3100: 'An Advertising module error has occurred. Refer to the attached AdvertisingError.',\n  };\n\n  export const defaultMobileV3ErrorMessageTranslator = (error: MobileV3PlayerErrorEvent | MobileV3SourceErrorEvent) => {\n    return error.message;\n  };\n\n  export const defaultWebErrorMessageTranslator: ErrorMessageTranslator = (error: ErrorEvent) => {\n    const errorMessage = ErrorUtils.defaultErrorMessages[error.code];\n\n    if (errorMessage) {\n      // Use the error message text if there is one\n      return `${errorMessage}\\n(${error.name})`; // default error message style\n    } else {\n      // Fallback to error code/name if no message is defined\n      return `${error.code} ${error.name}`;\n    }\n  };\n}\n","import {ArrayUtils} from './arrayutils';\nimport { Timeout } from './timeout';\n/**\n * Function interface for event listeners on the {@link EventDispatcher}.\n */\nexport interface EventListener<Sender, Args> {\n  (sender: Sender, args: Args): void;\n}\n\n/**\n * Empty type for creating {@link EventDispatcher event dispatchers} that do not carry any arguments.\n */\nexport interface NoArgs {\n}\n\n/**\n * Event args for an event that can be canceled.\n */\nexport interface CancelEventArgs extends NoArgs {\n  /**\n   * Gets or sets a flag whether the event should be canceled.\n   */\n  cancel?: boolean;\n}\n\n/**\n * Public interface that represents an event. Can be used to subscribe to and unsubscribe from events.\n */\nexport interface Event<Sender, Args> {\n  /**\n   * Subscribes an event listener to this event dispatcher.\n   * @param listener the listener to add\n   */\n  subscribe(listener: EventListener<Sender, Args>): void;\n\n  /**\n   * Subscribes an event listener to this event dispatcher that is only called once.\n   * @param listener the listener to add\n   */\n  subscribeOnce(listener: EventListener<Sender, Args>): void;\n\n  /**\n   * Subscribes an event listener to this event dispatcher that will be called at a limited rate with a minimum\n   * interval of the specified milliseconds.\n   * @param listener the listener to add\n   * @param rateMs the rate in milliseconds to which calling of the listeners should be limited\n   */\n  subscribeRateLimited(listener: EventListener<Sender, Args>, rateMs: number): void;\n\n  /**\n   * Unsubscribes a subscribed event listener from this dispatcher.\n   * @param listener the listener to remove\n   * @returns {boolean} true if the listener was successfully unsubscribed, false if it isn't subscribed on this\n   *   dispatcher\n   */\n  unsubscribe(listener: EventListener<Sender, Args>): boolean;\n}\n\n/**\n * Event dispatcher to subscribe and trigger events. Each event should have its own dispatcher.\n */\nexport class EventDispatcher<Sender, Args> implements Event<Sender, Args> {\n\n  private listeners: EventListenerWrapper<Sender, Args>[] = [];\n\n  constructor() {\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribe(listener: EventListener<Sender, Args>) {\n    this.listeners.push(new EventListenerWrapper(listener));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribeOnce(listener: EventListener<Sender, Args>) {\n    this.listeners.push(new EventListenerWrapper(listener, true));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribeRateLimited(listener: EventListener<Sender, Args>, rateMs: number) {\n    this.listeners.push(new RateLimitedEventListenerWrapper(listener, rateMs));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  unsubscribe(listener: EventListener<Sender, Args>): boolean {\n    // Iterate through listeners, compare with parameter, and remove if found\n    // NOTE: In case we ever remove all matching listeners instead of just the first, we need to reverse-iterate here\n    for (let i = 0; i < this.listeners.length; i++) {\n      let subscribedListener = this.listeners[i];\n      if (subscribedListener.listener === listener) {\n        subscribedListener.clear();\n        ArrayUtils.remove(this.listeners, subscribedListener);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Removes all listeners from this dispatcher.\n   */\n  unsubscribeAll(): void {\n    // In case of RateLimitedEventListenerWrapper we need to make sure that the timeout callback won't be called\n    for (let listener of this.listeners) {\n      listener.clear();\n    }\n\n    this.listeners = [];\n  }\n\n  /**\n   * Dispatches an event to all subscribed listeners.\n   * @param sender the source of the event\n   * @param args the arguments for the event\n   */\n  dispatch(sender: Sender, args: Args = null) {\n    let listenersToRemove = [];\n\n    // Call every listener\n    // We iterate over a copy of the array of listeners to avoid the case where events are not fired on listeners when\n    // listeners are unsubscribed from within the event handlers during a dispatch (because the indices change and\n    // listeners are shifted within the array).\n    // This means that listener x+1 will still be called if unsubscribed from within the handler of listener x, as well\n    // as listener y+1 will not be called when subscribed from within the handler of listener y.\n    // Array.slice(0) is the fastest array copy method according to: https://stackoverflow.com/a/21514254/370252\n    const listeners = this.listeners.slice(0);\n    for (let listener of listeners) {\n      listener.fire(sender, args);\n\n      if (listener.isOnce()) {\n        listenersToRemove.push(listener);\n      }\n    }\n\n    // Remove one-time listener\n    for (let listenerToRemove of listenersToRemove) {\n      ArrayUtils.remove(this.listeners, listenerToRemove);\n    }\n  }\n\n  /**\n   * Returns the event that this dispatcher manages and on which listeners can subscribe and unsubscribe event handlers.\n   * @returns {Event}\n   */\n  getEvent(): Event<Sender, Args> {\n    // For now, just cast the event dispatcher to the event interface. At some point in the future when the\n    // codebase grows, it might make sense to split the dispatcher into separate dispatcher and event classes.\n    return <Event<Sender, Args>>this;\n  }\n}\n\n/**\n * A basic event listener wrapper to manage listeners within the {@link EventDispatcher}. This is a 'private' class\n * for internal dispatcher use and it is therefore not exported.\n */\nclass EventListenerWrapper<Sender, Args> {\n\n  private eventListener: EventListener<Sender, Args>;\n  private once: boolean;\n\n  constructor(listener: EventListener<Sender, Args>, once: boolean = false) {\n    this.eventListener = listener;\n    this.once = once;\n  }\n\n  /**\n   * Returns the wrapped event listener.\n   * @returns {EventListener<Sender, Args>}\n   */\n  get listener(): EventListener<Sender, Args> {\n    return this.eventListener;\n  }\n\n  /**\n   * Fires the wrapped event listener with the given arguments.\n   * @param sender\n   * @param args\n   */\n  fire(sender: Sender, args: Args) {\n    this.eventListener(sender, args);\n  }\n\n  /**\n   * Checks if this listener is scheduled to be called only once.\n   * @returns {boolean} once if true\n   */\n  isOnce(): boolean {\n    return this.once;\n  }\n\n  clear(): void {\n  }\n}\n\ninterface EventAttributes<Sender, Args> {\n  sender: Sender;\n  args: Args;\n}\n\n/**\n * Extends the basic {@link EventListenerWrapper} with rate-limiting functionality.\n */\nclass RateLimitedEventListenerWrapper<Sender, Args> extends EventListenerWrapper<Sender, Args> {\n\n  private readonly rateMs: number;\n  private readonly rateLimitingEventListener: EventListener<Sender, Args>;\n\n  // save last seen event attributes\n  private lastSeenEvent: EventAttributes<Sender, Args>;\n\n  private rateLimitTimout: Timeout;\n\n  constructor(listener: EventListener<Sender, Args>, rateMs: number) {\n    super(listener); // sets the event listener sink\n\n    this.rateMs = rateMs;\n\n    // starting limiting the events to the given value\n    const startRateLimiting = () => {\n      this.rateLimitTimout.start();\n    };\n\n    // timout for limiting the events\n    this.rateLimitTimout = new Timeout(this.rateMs, () => {\n      if (this.lastSeenEvent) {\n        this.fireSuper(this.lastSeenEvent.sender, this.lastSeenEvent.args);\n        startRateLimiting(); // start rateLimiting again to keep rate limit active even after firing the last seen event\n        this.lastSeenEvent = null;\n      }\n    });\n\n    // In case the events stopping during the rateLimiting we need to track the last seen one and delegate after the\n    // rate limiting is finished. This prevents missing the last update due to the rate limit.\n    this.rateLimitingEventListener = (sender: Sender, args: Args) => {\n      // only fire events if the rateLimiting is not running\n      if (this.shouldFireEvent()) {\n        this.fireSuper(sender, args);\n        startRateLimiting();\n        return;\n      }\n\n      this.lastSeenEvent = {\n        sender: sender,\n        args: args,\n      };\n    };\n  }\n\n  private shouldFireEvent(): boolean {\n    return !this.rateLimitTimout.isActive();\n  }\n\n  private fireSuper(sender: Sender, args: Args) {\n    // Fire the actual external event listener\n    super.fire(sender, args);\n  }\n\n  fire(sender: Sender, args: Args) {\n    // Fire the internal rate-limiting listener instead of the external event listener\n    this.rateLimitingEventListener(sender, args);\n  }\n\n  clear(): void {\n    super.clear();\n    this.rateLimitTimout.clear();\n  }\n}\n","const FocusVisibleCssClassName = '{{PREFIX}}-focus-visible';\n\nexport class FocusVisibilityTracker {\n  private readonly eventHandlerMap: { [eventName: string]: EventListenerOrEventListenerObject };\n  private lastInteractionWasKeyboard: boolean = true;\n\n  constructor(private bitmovinUiPrefix: string) {\n    this.eventHandlerMap = {\n      mousedown: this.onMouseOrPointerOrTouch,\n      pointerdown: this.onMouseOrPointerOrTouch,\n      touchstart: this.onMouseOrPointerOrTouch,\n      keydown: this.onKeyDown,\n      focus: this.onFocus,\n      blur: this.onBlur,\n    };\n    this.registerEventListeners();\n  }\n\n  private onKeyDown = (e: KeyboardEvent) => {\n    if (e.metaKey || e.altKey || e.ctrlKey) {\n      return;\n    }\n\n    this.lastInteractionWasKeyboard = true;\n  };\n\n  private onMouseOrPointerOrTouch = () => (this.lastInteractionWasKeyboard = false);\n\n  private onFocus = ({ target: element }: FocusEvent) => {\n    if (\n      this.lastInteractionWasKeyboard &&\n      isHtmlElement(element) &&\n      isBitmovinUi(element, this.bitmovinUiPrefix) &&\n      !element.classList.contains(FocusVisibleCssClassName)\n    ) {\n      element.classList.add(FocusVisibleCssClassName);\n    }\n  };\n\n  private onBlur = ({ target: element }: FocusEvent) => {\n    if (isHtmlElement(element)) {\n      element.classList.remove(FocusVisibleCssClassName);\n    }\n  };\n\n  private registerEventListeners(): void {\n    for (const event in this.eventHandlerMap) {\n      document.addEventListener(event, this.eventHandlerMap[event], true);\n    }\n  }\n\n  private unregisterEventListeners(): void {\n    for (const event in this.eventHandlerMap) {\n      document.removeEventListener(event, this.eventHandlerMap[event], true);\n    }\n  }\n\n  public release(): void {\n    this.unregisterEventListeners();\n  }\n}\n\nfunction isBitmovinUi(element: Element, bitmovinUiPrefix: string): boolean {\n  return element.id.indexOf(bitmovinUiPrefix) === 0;\n}\n\nfunction isHtmlElement(element: unknown): element is HTMLElement & { classList: DOMTokenList } {\n  return (\n    element instanceof HTMLElement && element.classList instanceof DOMTokenList\n  );\n}\n","import { PlayerAPI } from 'bitmovin-player';\n/**\n * The Group Playback API offers control over synchronized playback of a group of clients, e.g. for Apple SharePlay\n * sessions.\n\n * Note: The API currently only covers the immediate needs of the iOS SDK in combination with our UI which is regarding\n * temporarily suspending synchronization of the player from the group. But it is open to be extended as needed in the\n * future.\n */\n\n/**\n * Reason for suspending the synchronization with the group.\n */\nexport enum GroupPlaybackSuspensionReason {\n  UserIsScrubbing = 'userIsScrubbing',\n}\n\n/**\n * A representation of a temporary break in participation.\n */\nexport interface GroupPlaybackSuspension {\n  /**\n   * The reason for the suspension.\n   */\n  reason: GroupPlaybackSuspensionReason;\n\n  /**\n   * A unique identifier.\n   */\n  id: string;\n}\n\n/**\n * Options to be considered upon ending a suspension.\n */\ninterface EndGroupPlaybackSuspensionOptions {\n  /**\n   * A proposed time for the group to seek to.\n   */\n  proposedPlaybackTime?: number;\n}\n\n/**\n * Group Playback API offering control over the player's participation in synchronized playback of a group of clients.\n * For example, an Apple SharePlay session.\n */\ninterface GroupPlaybackAPI {\n  /**\n   * Begins a new suspension.\n   *\n   * Temporarily suspends the local player's synchronization with the group. While suspended, any local playback control\n   * action (e.g. play, pause, seek) will not be forwarded to the group and any action originating from another group\n   * participant will not be performed on the local player.\n   *\n   * @remarks\n   * It is possible for multiple suspensions to exist exist simultaneously with different suspension reasons. The player\n   * will re-synchronize with the group once all existing suspensions have ended.\n   *\n   * @param reason - The reason for the suspension.\n   * @returns A suspension object.\n   */\n  beginSuspension(reason: GroupPlaybackSuspensionReason): GroupPlaybackSuspension;\n\n  /**\n   * Ends the given suspension.\n   *\n   * @param suspension - The suspension to be ended.\n   * @param options - Optional. Options to be considered when ending the suspension, e.g. a proposed seek time for the group.\n   */\n  endSuspension(suspension: GroupPlaybackSuspension, options?: EndGroupPlaybackSuspensionOptions): void;\n\n  /**\n   * Whether the player is currently participating in a group playback session.\n   */\n  hasJoined(): boolean;\n\n  /**\n   * Whether the player is currently suspending synchronization with the group.\n   * Can only return true if `hasJoined()` also is true.\n   */\n  isSuspended(): boolean;\n}\n\n\nexport interface ExtendedPlayerAPI extends PlayerAPI {\n  /**\n   * Group Playback API\n   *\n   * @remarks\n   * This API is optional as not every platform supports group playback.\n   */\n  groupPlayback?: GroupPlaybackAPI;\n}\n","export namespace Guid {\n\n  let guid = 1;\n\n  export function next() {\n    return guid++;\n  }\n}\n","import {DOM} from './dom';\n\nexport interface ImageLoadedCallback {\n  (url: string, width: number, height: number): void;\n}\n\ninterface ImageLoaderState {\n  url: string;\n  image: DOM;\n  loadedCallback: ImageLoadedCallback;\n  loaded: boolean;\n  width: number;\n  height: number;\n}\n\n/**\n * Tracks the loading state of images.\n */\nexport class ImageLoader {\n\n  private state: { [url: string]: ImageLoaderState; } = {};\n\n  /**\n   * Loads an image and call the callback once the image is loaded. If the image is already loaded, the callback\n   * is called immediately, else it is called once loading has finished. Calling this method multiple times for the\n   * same image while it is loading calls only let callback passed into the last call.\n   * @param url The url to the image to load\n   * @param loadedCallback The callback that is called when the image is loaded\n   */\n  load(url: string, loadedCallback: ImageLoadedCallback): void {\n    if (!this.state[url]) {\n      // When the image was never attempted to be loaded before, we create a state and store it in the state map\n      // for later use when the same image is requested to be loaded again.\n      let state: ImageLoaderState = {\n        url: url,\n        image: new DOM('img', {}),\n        loadedCallback: loadedCallback,\n        loaded: false,\n        width: 0,\n        height: 0,\n      };\n      this.state[url] = state;\n\n      // Listen to the load event, update the state and call the callback once the image is loaded\n      state.image.on('load', (e) => {\n        state.loaded = true;\n        state.width = (<HTMLImageElement>state.image.get(0)).width;\n        state.height = (<HTMLImageElement>state.image.get(0)).height;\n\n        this.callLoadedCallback(state);\n      });\n\n      // Set the image URL to start the loading\n      state.image.attr('src', state.url);\n    } else {\n      // We have a state for the requested image, so it is either already loaded or currently loading\n      let state = this.state[url];\n\n      // We overwrite the callback to make sure that only the callback of the latest call gets executed.\n      // Earlier callbacks become invalid once a new load call arrives, and they are not called as long as the image\n      // is not loaded.\n      state.loadedCallback = loadedCallback;\n\n      // When the image is already loaded, we directly execute the callback instead of waiting for the load event\n      if (state.loaded) {\n        this.callLoadedCallback(state);\n      }\n    }\n  }\n\n  private callLoadedCallback(state: ImageLoaderState): void {\n    state.loadedCallback(state.url, state.width, state.height);\n  }\n}\n","import vocabularyDe from './languages/de.json';\nimport vocabularyEn from './languages/en.json';\nimport vocabularyEs from './languages/es.json';\nimport { LocalizationConfig } from '../uimanager.js';\n\nexport const defaultVocabularies: Vocabularies = {\n  'en': vocabularyEn,\n  'de': vocabularyDe,\n  'es': vocabularyEs,\n};\n\nconst defaultLocalizationConfig: LocalizationConfig = {\n  language: 'en',\n  vocabularies: defaultVocabularies,\n};\n\ntype Localizer = () => string;\nexport type LocalizableText = string | Localizer;\n\ninterface Vocabulary {\n  'settings.video.quality': string;\n  'settings.audio.quality': string;\n  'settings.audio.track': string;\n  'settings.audio.mute': string;\n  'settings.audio.volume': string;\n  'settings.subtitles': string;\n  'settings.subtitles.font.color': string;\n  'settings.subtitles.font.opacity': string;\n  'settings.subtitles.background.color': string;\n  'settings.subtitles.background.opacity': string;\n  'settings.subtitles.font.size': string;\n  'settings.subtitles.characterEdge': string;\n  'settings.subtitles.characterEdge.raised': string;\n  'settings.subtitles.characterEdge.depressed': string;\n  'settings.subtitles.characterEdge.uniform': string;\n  'settings.subtitles.characterEdge.dropshadowed': string;\n  'settings.subtitles.font.family': string;\n  'settings.subtitles.font.family.monospacedserif': string;\n  'settings.subtitles.font.family.proportionalserif': string;\n  'settings.subtitles.font.family.monospacedsansserif': string;\n  'settings.subtitles.font.family.proportionalsansserif': string;\n  'settings.subtitles.font.family.casual': string;\n  'settings.subtitles.font.family.cursive': string;\n  'settings.subtitles.font.family.smallcapital': string;\n  'settings.subtitles.window.color': string;\n  'settings.subtitles.window.opacity': string;\n  'play': string;\n  'settings.time.hours': string;\n  'settings.time.minutes': string;\n  'settings.time.seconds': string;\n  'colors.white': string;\n  'colors.black': string;\n  'colors.red': string;\n  'colors.green': string;\n  'colors.blue': string;\n  'colors.cyan': string;\n  'colors.yellow': string;\n  'colors.magenta': string;\n  'percent': string;\n  'settings': string;\n  'ads.remainingTime': string;\n  'pictureInPicture': string;\n  'appleAirplay': string;\n  'googleCast': string;\n  'vr': string;\n  'off': string;\n  'auto': string;\n  'back': string;\n  'reset': string;\n  'replay': string;\n  'normal': string;\n  'default': string;\n  'open': string;\n  'close': string;\n  'fullscreen': string;\n  'speed': string;\n  'playPause': string;\n  'live': string;\n  'subtitle.example': string;\n  'subtitle.select': string;\n  'playingOn': string;\n  'connectingTo': string;\n  'watermarkLink': string;\n  'controlBar': string;\n  'player': string;\n  'seekBar': string;\n  'seekBar.value': string;\n  'seekBar.timeshift': string;\n  'seekBar.durationText': string;\n}\n\nexport type CustomVocabulary<V> = V & Partial<Vocabulary>;\n\nexport interface Vocabularies {\n  [key: string]: CustomVocabulary<Record<string, string>>;\n}\n\nclass I18n {\n  private language: string;\n  private vocabulary: CustomVocabulary<Record<string, string>>;\n\n  constructor(config: LocalizationConfig) {\n    this.setConfig(config);\n  }\n\n  public setConfig(config: LocalizationConfig) {\n    const mergedConfig = { ...defaultLocalizationConfig, ...config };\n    const detectBrowserLanguage = mergedConfig.language === 'auto';\n    const vocabularies = this.mergeVocabulariesWithDefaultVocabularies(mergedConfig.vocabularies);\n    this.initializeLanguage(mergedConfig.language, detectBrowserLanguage, vocabularies);\n    this.initializeVocabulary(vocabularies);\n  }\n\n  private static containsLanguage(vocabularies: Vocabularies, language: string) {\n    return vocabularies.hasOwnProperty(language);\n  }\n\n  private mergeVocabulariesWithDefaultVocabularies(vocabularies: Vocabularies = {}) {\n    const rawVocabularies: Vocabularies = { ...defaultVocabularies, ...vocabularies };\n    return Object.keys(rawVocabularies).reduce((mergedVocabularies, language) => {\n      let vocabulary = rawVocabularies[language];\n      if (I18n.containsLanguage(defaultVocabularies, language) && I18n.containsLanguage(vocabularies, language)) {\n        vocabulary = { ...defaultVocabularies[language], ...vocabularies[language] };\n      }\n      return { ...mergedVocabularies, [language]: vocabulary };\n    }, {});\n  }\n\n  private initializeLanguage(\n    language: string,\n    browserLanguageDetectionEnabled: boolean,\n    vocabularies: Vocabularies,\n  ) {\n    if (browserLanguageDetectionEnabled) {\n      const userLanguage = window.navigator.language;\n\n      if (I18n.containsLanguage(vocabularies, userLanguage)) {\n        this.language = userLanguage;\n        return;\n      }\n      const shortenedUserLanguage = userLanguage.slice(0, 2);\n      if (I18n.containsLanguage(vocabularies, shortenedUserLanguage)) {\n        this.language = shortenedUserLanguage;\n        return;\n      }\n    }\n\n    this.language = language;\n  }\n\n  private initializeVocabulary(vocabularies: Vocabularies) {\n    this.vocabulary = ['en', this.language]\n      .reduce((vocab, lang) => ({ ...vocab, ...(vocabularies[lang] || {}) }), {});\n  }\n\n  private replaceVariableWithPlaceholderIfExists(text: string, config: any) {\n    const matches = text.match(new RegExp('{[a-zA-Z0-9]+}', 'g'));\n    if (matches.length === 0) {\n      return text;\n    }\n\n    return matches\n      .map((m: string) => ({ match: m, key: m.slice(1, -1) }))\n      .reduce((str, { key, match }) => config.hasOwnProperty(key) ? str.replace(match, config[key]) : str, text);\n  }\n\n  public getLocalizer<V extends CustomVocabulary<Record<string, string>> = CustomVocabulary<Record<string, string>>>(\n    key: keyof V,\n    config?: Record<string, string | number>,\n  ): Localizer {\n    return () => {\n      if (key == null) { // because sometimes we call toDomElement() without configuring the component or setting text...\n        return undefined;\n      }\n      let vocabularyString = this.vocabulary[key as string];\n\n      if (vocabularyString == null) {\n        vocabularyString = key as string;\n      }\n\n      if (config != null) {\n        vocabularyString = this.replaceVariableWithPlaceholderIfExists(vocabularyString, config);\n      }\n\n      return vocabularyString;\n    };\n  }\n\n  public performLocalization(text: LocalizableText) {\n    return typeof text === 'function' ? text() : text;\n  }\n}\n\nexport const i18n = new I18n(defaultLocalizationConfig);\n","module.exports={\n  \"settings.video.quality\": \"Videoqualität\",\n  \"settings.audio.quality\": \"Audioqualität\",\n  \"settings.audio.track\": \"Audiospur\",\n  \"speed\": \"Geschwindigkeit\",\n  \"play\": \"Abspielen\",\n  \"pause\": \"Pause\",\n  \"playPause\": \"Abspielen/Pause\",\n  \"open\": \"öffnen\",\n  \"close\": \"Schließen\",\n  \"settings.audio.mute\": \"Stummschaltung\",\n  \"settings.audio.volume\": \"Lautstärke\",\n  \"pictureInPicture\": \"Bild im Bild\",\n  \"appleAirplay\": \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\": \"VR\",\n  \"settings\": \"Einstellungen\",\n  \"fullscreen\": \"Vollbild\",\n  \"off\": \"aus\",\n  \"settings.subtitles\": \"Untertitel\",\n  \"settings.subtitles.font.size\": \"Größe\",\n  \"settings.subtitles.font.family\": \"Schriftart\",\n  \"settings.subtitles.font.color\": \"Farbe\",\n  \"settings.subtitles.font.opacity\": \"Deckkraft\",\n  \"settings.subtitles.characterEdge\": \"Ränder\",\n  \"settings.subtitles.background.color\": \"Hintergrundfarbe\",\n  \"settings.subtitles.background.opacity\": \"Hintergrunddeckkraft\",\n  \"settings.subtitles.window.color\": \"Hintergrundfarbe\",\n  \"settings.subtitles.window.opacity\": \"Hintergrunddeckkraft\",\n  \"settings.time.hours\": \"Stunden\",\n  \"settings.time.minutes\": \"Minuten\",\n  \"settings.time.seconds\": \"Sekunden\",\n  \"back\": \"Zurück\",\n  \"reset\": \"Zurücksetzen\",\n  \"replay\": \"Wiederholen\",\n  \"ads.remainingTime\": \"Diese Anzeige endet in {remainingTime} Sekunden\",\n  \"default\": \"standard\",\n  \"colors.white\": \"weiß\",\n  \"colors.black\": \"schwarz\",\n  \"colors.red\": \"rot\",\n  \"colors.green\": \"grün\",\n  \"colors.blue\": \"blau\",\n  \"colors.yellow\": \"gelb\",\n  \"subtitle.example\": \"Beispiel Untertitel\",\n  \"subtitle.select\": \"Untertitel auswählen\",\n  \"playingOn\": \"Spielt auf <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Verbindung mit <strong>{castDeviceName}</strong> wird hergestellt...\",\n  \"watermarkLink\": \"Link zum Homepage\",\n  \"controlBar\": \"Videoplayer Kontrollen\",\n  \"player\": \"Video player\",\n  \"seekBar\": \"Video-Timeline\",\n  \"seekBar.value\": \"Wert\",\n  \"seekBar.timeshift\": \"Timeshift\",\n  \"seekBar.durationText\": \"aus\"\n}\n","module.exports={\n  \"settings.video.quality\": \"Video Quality\",\n  \"settings.audio.quality\": \"Audio Quality\",\n  \"settings.audio.track\": \"Audio Track\",\n  \"settings.audio.mute\" : \"Mute\",\n  \"settings.audio.volume\" : \"Volume\",\n  \"settings.subtitles.window.color\" : \"Window color\",\n  \"settings.subtitles.window.opacity\" : \"Window opacity\",\n  \"settings.subtitles\" : \"Subtitles\",\n  \"settings.subtitles.font.color\" : \"Font color\",\n  \"settings.subtitles.font.opacity\" : \"Font opacity\",\n  \"settings.subtitles.background.color\" : \"Background color\",\n  \"settings.subtitles.background.opacity\": \"Background opacity\",\n  \"colors.white\": \"white\",\n  \"colors.black\": \"black\",\n  \"colors.red\": \"red\",\n  \"colors.green\": \"green\",\n  \"colors.blue\": \"blue\",\n  \"colors.cyan\": \"cyan\",\n  \"colors.yellow\": \"yellow\",\n  \"colors.magenta\": \"magenta\",\n  \"percent\": \"{value}%\",\n  \"settings.subtitles.font.size\": \"Font size\",\n  \"settings.subtitles.characterEdge\": \"Character edge\",\n  \"settings.subtitles.characterEdge.raised\": \"raised\",\n  \"settings.subtitles.characterEdge.depressed\": \"depressed\",\n  \"settings.subtitles.characterEdge.uniform\": \"uniform\",\n  \"settings.subtitles.characterEdge.dropshadowed\": \"drop shadowed\",\n  \"settings.subtitles.font.family\": \"Font family\",\n  \"settings.subtitles.font.family.monospacedserif\": \"monospaced serif\",\n  \"settings.subtitles.font.family.proportionalserif\": \"proportional serif\",\n  \"settings.subtitles.font.family.monospacedsansserif\": \"monospaced sans serif\",\n  \"settings.subtitles.font.family.proportionalsansserif\": \"proportional sans serif\",\n  \"settings.subtitles.font.family.casual\": \"casual\",\n  \"settings.subtitles.font.family.cursive\": \"cursive\",\n  \"settings.subtitles.font.family.smallcapital\": \"small capital\",\n  \"settings.time.hours\": \"Hours\",\n  \"settings.time.minutes\": \"Minutes\",\n  \"settings.time.seconds\": \"Seconds\",\n  \"ads.remainingTime\": \"This ad will end in {remainingTime} seconds.\",\n  \"settings\": \"Settings\",\n  \"fullscreen\" : \"Fullscreen\",\n  \"speed\": \"Speed\",\n  \"playPause\" : \"Play/Pause\",\n  \"play\": \"Play\",\n  \"pause\": \"Pause\",\n  \"open\": \"open\",\n  \"close\": \"Close\",\n  \"pictureInPicture\": \"Picture-in-Picture\",\n  \"appleAirplay\" : \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\" : \"VR\",\n  \"off\": \"off\",\n  \"auto\": \"auto\",\n  \"back\" : \"Back\",\n  \"reset\": \"Reset\",\n  \"replay\": \"Replay\",\n  \"normal\": \"normal\",\n  \"default\": \"default\",\n  \"live\": \"Live\",\n  \"subtitle.example\": \"example subtitle\",\n  \"subtitle.select\": \"Select subtitle\",\n  \"playingOn\": \"Playing on <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Connecting to <strong>{castDeviceName}</strong>...\",\n  \"watermarkLink\": \"Link to Homepage\",\n  \"controlBar\": \"Video player controls\",\n  \"player\": \"Video player\",\n  \"seekBar\": \"Video timeline\",\n  \"seekBar.value\": \"Value\",\n  \"seekBar.timeshift\": \"Timeshift\",\n  \"seekBar.durationText\": \"out of\"\n}\n","module.exports={\n  \"settings.video.quality\": \"Calidad de Video\",\n  \"settings.audio.quality\": \"Calidad de Audio\",\n  \"settings.audio.track\": \"Pista de Audio\",\n  \"settings.audio.mute\" : \"Silencio\",\n  \"settings.audio.volume\" : \"Volumen\",\n  \"settings.subtitles.window.color\" : \"color de Ventana\",\n  \"settings.subtitles.window.opacity\" : \"opacidad de Ventana\",\n  \"settings.subtitles\" : \"Subtítulos\",\n  \"settings.subtitles.font.color\" : \"color de Fuente\",\n  \"settings.subtitles.font.opacity\" : \"opacidad de Fuente\",\n  \"settings.subtitles.background.color\" : \"color de Fondo\",\n  \"settings.subtitles.background.opacity\": \"opacidad de Fondo\",\n  \"colors.white\": \"blanco\",\n  \"colors.black\": \"negro\",\n  \"colors.red\": \"rojo\",\n  \"colors.green\": \"verde\",\n  \"colors.blue\": \"azul\",\n  \"colors.cyan\": \"cian\",\n  \"colors.yellow\": \"amarillo\",\n  \"colors.magenta\": \"magenta\",\n  \"percent\": \"{value}%\",\n  \"settings.subtitles.font.size\": \"tamaño de Fuente\",\n  \"settings.subtitles.characterEdge\": \"borde del Caracter\",\n  \"settings.subtitles.characterEdge.raised\": \"alzado\",\n  \"settings.subtitles.characterEdge.depressed\": \"discreto\",\n  \"settings.subtitles.characterEdge.uniform\": \"uniforme\",\n  \"settings.subtitles.characterEdge.dropshadowed\": \"sombreado\",\n  \"settings.subtitles.font.family\": \"tipo de Fuente\",\n  \"settings.subtitles.font.family.monospacedserif\": \"monospaced serif\",\n  \"settings.subtitles.font.family.proportionalserif\": \"proportional serif\",\n  \"settings.subtitles.font.family.monospacedsansserif\": \"monospaced sans serif\",\n  \"settings.subtitles.font.family.proportionalsansserif\": \"proportional sans serif\",\n  \"settings.subtitles.font.family.casual\": \"casual\",\n  \"settings.subtitles.font.family.cursive\": \"cursiva\",\n  \"settings.subtitles.font.family.smallcapital\": \"small capital\",\n  \"settings.time.hours\": \"Horas\",\n  \"settings.time.minutes\": \"Minutos\",\n  \"settings.time.seconds\": \"Segundos\",\n  \"ads.remainingTime\": \"Este anuncio acabará en {remainingTime} segundos.\",\n  \"settings\": \"Configuración\",\n  \"fullscreen\" : \"Pantalla Completa\",\n  \"speed\": \"Velocidad\",\n  \"playPause\" : \"Reproducir/Pausa\",\n  \"play\": \"Reproducir\",\n  \"pause\": \"Pausa\",\n  \"open\": \"Abrir\",\n  \"close\": \"Cerrar\",\n  \"pictureInPicture\": \"Imagen en Imagen\",\n  \"appleAirplay\" : \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\" : \"VR\",\n  \"off\": \"off\",\n  \"auto\": \"auto\",\n  \"back\" : \"Atrás\",\n  \"reset\": \"Reiniciar\",\n  \"replay\": \"Rebobinar\",\n  \"normal\": \"normal\",\n  \"default\": \"predeterminado\",\n  \"live\": \"Directo\",\n  \"subtitle.example\": \"Ejemplo de Subtítulo\",\n  \"subtitle.select\": \"Seleccionar subtítulo\",\n  \"playingOn\": \"Reproduciendo en <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Conectando a <strong>{castDeviceName}</strong>...\",\n  \"watermarkLink\": \"Enlace al inicio\",\n  \"controlBar\": \"Controles del Reproductor\",\n  \"player\": \"Reproductor de Video\",\n  \"seekBar\": \"Línea de Tiempo\",\n  \"seekBar.value\": \"posición\",\n  \"seekBar.timeshift\": \"cambio de posición\",\n  \"seekBar.durationText\": \"de\"\n}","export const version: string = '{{VERSION}}';\n// Management\nexport { UIManager, UIInstanceManager } from './uimanager';\n// Factories\nexport { UIFactory } from './uifactory';\nexport { DemoFactory } from './demofactory';\n// Utils\nexport { ArrayUtils } from './arrayutils';\nexport { StringUtils } from './stringutils';\nexport { PlayerUtils } from './playerutils';\nexport { UIUtils } from './uiutils';\nexport { BrowserUtils } from './browserutils';\nexport { StorageUtils } from './storageutils';\nexport { ErrorUtils } from './errorutils';\n// Localization\nexport { i18n } from './localization/i18n';\n// Spatial Navigation\nexport { SpatialNavigation } from './spatialnavigation/spatialnavigation';\nexport { NavigationGroup } from './spatialnavigation/navigationgroup';\nexport { RootNavigationGroup } from './spatialnavigation/rootnavigationgroup';\nexport { ListNavigationGroup, ListOrientation } from './spatialnavigation/ListNavigationGroup';\n// Components\nexport { Button } from './components/button';\nexport { ControlBar } from './components/controlbar';\nexport { FullscreenToggleButton } from './components/fullscreentogglebutton';\nexport { HugePlaybackToggleButton } from './components/hugeplaybacktogglebutton';\nexport { PlaybackTimeLabel, PlaybackTimeLabelMode } from './components/playbacktimelabel';\nexport { PlaybackToggleButton } from './components/playbacktogglebutton';\nexport { SeekBar } from './components/seekbar';\nexport { SelectBox } from './components/selectbox';\nexport { ItemSelectionList } from './components/itemselectionlist';\nexport { SettingsPanel } from './components/settingspanel';\nexport { SettingsToggleButton } from './components/settingstogglebutton';\nexport { ToggleButton } from './components/togglebutton';\nexport { VideoQualitySelectBox } from './components/videoqualityselectbox';\nexport { VolumeToggleButton } from './components/volumetogglebutton';\nexport { VRToggleButton } from './components/vrtogglebutton';\nexport { Watermark } from './components/watermark';\nexport { UIContainer } from './components/uicontainer';\nexport { Container } from './components/container';\nexport { Label } from './components/label';\nexport { AudioQualitySelectBox } from './components/audioqualityselectbox';\nexport { AudioTrackSelectBox } from './components/audiotrackselectbox';\nexport { CastStatusOverlay } from './components/caststatusoverlay';\nexport { CastToggleButton } from './components/casttogglebutton';\nexport { Component } from './components/component';\nexport { ErrorMessageOverlay } from './components/errormessageoverlay';\nexport { RecommendationOverlay } from './components/recommendationoverlay';\nexport { SeekBarLabel } from './components/seekbarlabel';\nexport { SubtitleOverlay } from './components/subtitleoverlay';\nexport { SubtitleSelectBox } from './components/subtitleselectbox';\nexport { TitleBar } from './components/titlebar';\nexport { VolumeControlButton } from './components/volumecontrolbutton';\nexport { ClickOverlay } from './components/clickoverlay';\nexport { AdSkipButton } from './components/adskipbutton';\nexport { AdMessageLabel } from './components/admessagelabel';\nexport { AdClickOverlay } from './components/adclickoverlay';\nexport { PlaybackSpeedSelectBox } from './components/playbackspeedselectbox';\nexport { HugeReplayButton } from './components/hugereplaybutton';\nexport { BufferingOverlay } from './components/bufferingoverlay';\nexport { CastUIContainer } from './components/castuicontainer';\nexport { PlaybackToggleOverlay } from './components/playbacktoggleoverlay';\nexport { CloseButton } from './components/closebutton';\nexport { MetadataLabel, MetadataLabelContent } from './components/metadatalabel';\nexport { AirPlayToggleButton } from './components/airplaytogglebutton';\nexport { VolumeSlider } from './components/volumeslider';\nexport { PictureInPictureToggleButton } from './components/pictureinpicturetogglebutton';\nexport { Spacer } from './components/spacer';\nexport { BackgroundColorSelectBox } from './components/subtitlesettings/backgroundcolorselectbox';\nexport { BackgroundOpacitySelectBox } from './components/subtitlesettings/backgroundopacityselectbox';\nexport { CharacterEdgeSelectBox } from './components/subtitlesettings/characteredgeselectbox';\nexport { FontColorSelectBox } from './components/subtitlesettings/fontcolorselectbox';\nexport { FontFamilySelectBox } from './components/subtitlesettings/fontfamilyselectbox';\nexport { FontOpacitySelectBox } from './components/subtitlesettings/fontopacityselectbox';\nexport { FontSizeSelectBox } from './components/subtitlesettings/fontsizeselectbox';\nexport { SubtitleSettingSelectBox } from './components/subtitlesettings/subtitlesettingselectbox';\nexport { SubtitleSettingsLabel } from './components/subtitlesettings/subtitlesettingslabel';\nexport { WindowColorSelectBox } from './components/subtitlesettings/windowcolorselectbox';\nexport { WindowOpacitySelectBox } from './components/subtitlesettings/windowopacityselectbox';\nexport { SubtitleSettingsResetButton } from './components/subtitlesettings/subtitlesettingsresetbutton';\nexport { ListBox } from './components/listbox';\nexport { SubtitleListBox } from './components/subtitlelistbox';\nexport { AudioTrackListBox } from './components/audiotracklistbox';\nexport { SettingsPanelPage } from './components/settingspanelpage';\nexport { SettingsPanelPageBackButton } from './components/settingspanelpagebackbutton';\nexport { SettingsPanelPageOpenButton } from './components/settingspanelpageopenbutton';\nexport { SubtitleSettingsPanelPage } from './components/subtitlesettings/subtitlesettingspanelpage';\nexport { SettingsPanelItem } from './components/settingspanelitem';\nexport { ReplayButton } from './components/replaybutton';\n\n// Object.assign polyfill for ES5/IE9\n// https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nif (typeof Object.assign !== 'function') {\n  Object.assign = function(target: any) {\n    'use strict';\n    if (target == null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    target = Object(target);\n    for (let index = 1; index < arguments.length; index++) {\n      let source = arguments[index];\n      if (source != null) {\n        for (let key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n}","import { PlayerAPI, PlayerEvent, PlayerEventBase, PlayerEventCallback } from 'bitmovin-player';\nimport { WrappedPlayer } from './uimanager';\n\nexport enum MobileV3PlayerEvent {\n  SourceError = 'sourceerror',\n  PlayerError = 'playererror',\n  PlaylistTransition = 'playlisttransition',\n}\n\nexport interface MobileV3PlayerErrorEvent extends PlayerEventBase {\n  code: number;\n  message: string;\n}\n\nexport interface MobileV3SourceErrorEvent extends PlayerEventBase {\n  code: number;\n  message: string;\n}\n\nexport type MobileV3PlayerEventType = PlayerEvent | MobileV3PlayerEvent;\n\nexport interface MobileV3PlayerAPI extends PlayerAPI {\n  on(eventType: MobileV3PlayerEventType, callback: PlayerEventCallback): void;\n  exports: PlayerAPI['exports'] & { PlayerEvent: MobileV3PlayerEventType };\n}\n\nexport function isMobileV3PlayerAPI(player: WrappedPlayer | PlayerAPI | MobileV3PlayerAPI): player is MobileV3PlayerAPI {\n  for (const key in MobileV3PlayerEvent) {\n    if (MobileV3PlayerEvent.hasOwnProperty(key) && !player.exports.PlayerEvent.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import {Event, EventDispatcher, NoArgs} from './eventdispatcher';\nimport {BrowserUtils} from './browserutils';\nimport { UIInstanceManager } from './uimanager';\nimport { PlayerAPI, TimeRange } from 'bitmovin-player';\n\nexport namespace PlayerUtils {\n\n  export enum PlayerState {\n    Idle,\n    Prepared,\n    Playing,\n    Paused,\n    Finished,\n  }\n\n  export function isTimeShiftAvailable(player: PlayerAPI): boolean {\n    return player.isLive() && player.getMaxTimeShift() !== 0;\n  }\n\n  export function getState(player: PlayerAPI): PlayerState {\n    if (player.hasEnded()) {\n      return PlayerState.Finished;\n    } else if (player.isPlaying()) {\n      return PlayerState.Playing;\n    } else if (player.isPaused()) {\n      return PlayerState.Paused;\n    } else if (player.getSource() != null) {\n      return PlayerState.Prepared;\n    } else {\n      return PlayerState.Idle;\n    }\n  }\n\n  /**\n   * Returns the currentTime - seekableRange.start. This ensures a user-friendly currentTime after a live stream\n   * transitioned to VoD.\n   * @param player\n   */\n  export function getCurrentTimeRelativeToSeekableRange(player: PlayerAPI): number {\n    const currentTime = player.getCurrentTime();\n    if (player.isLive()) {\n      return currentTime;\n    }\n\n    const seekableRangeStart = PlayerUtils.getSeekableRangeStart(player, 0);\n    return currentTime - seekableRangeStart;\n  }\n\n  /**\n   * Returns the start value of the seekable range or the defaultValue if no seekableRange is present.\n   * For now this happens only in combination with Mobile SDKs.\n   *\n   * TODO: remove this function in next major release\n   *\n   * @param player\n   * @param defaultValue\n   */\n  export function getSeekableRangeStart(player: PlayerAPI, defaultValue: number = 0) {\n    return player.getSeekableRange() && player.getSeekableRange().start || defaultValue;\n  }\n\n  /**\n   * Calculates player seekable time range for live.\n   * As the player returns `{ start: -1, end: -1 }` for live streams we need to calculate the `seekableRange` based on `maxTimeshift`.\n   *\n   * @param player\n   */\n  export function getSeekableRangeRespectingLive(player: PlayerAPI): TimeRange {\n    if (!player.isLive()) {\n      return player.getSeekableRange();\n    }\n\n    const currentTimeshift = -player.getTimeShift();\n    const maxTimeshift = -player.getMaxTimeShift();\n    const currentTime = player.getCurrentTime();\n\n    const end = currentTime + (currentTimeshift);\n    const start = currentTime - (maxTimeshift - currentTimeshift);\n\n    return { start, end };\n  }\n\n  export interface TimeShiftAvailabilityChangedArgs extends NoArgs {\n    timeShiftAvailable: boolean;\n  }\n\n  export class TimeShiftAvailabilityDetector {\n\n    private player: PlayerAPI;\n    private timeShiftAvailable: boolean;\n    private timeShiftAvailabilityChangedEvent = new EventDispatcher<PlayerAPI, TimeShiftAvailabilityChangedArgs>();\n\n    constructor(player: PlayerAPI) {\n      this.player = player;\n      this.timeShiftAvailable = undefined;\n\n      let timeShiftDetector = () => {\n        this.detect();\n      };\n      // Try to detect timeshift availability when source is loaded, which works for DASH streams\n      player.on(player.exports.PlayerEvent.SourceLoaded, timeShiftDetector);\n      // With HLS/NativePlayer streams, getMaxTimeShift can be 0 before the buffer fills, so we need to additionally\n      // check timeshift availability in TimeChanged\n      player.on(player.exports.PlayerEvent.TimeChanged, timeShiftDetector);\n    }\n\n    detect(): void {\n      if (this.player.isLive()) {\n        let timeShiftAvailableNow = PlayerUtils.isTimeShiftAvailable(this.player);\n\n        // When the availability changes, we fire the event\n        if (timeShiftAvailableNow !== this.timeShiftAvailable) {\n          this.timeShiftAvailabilityChangedEvent.dispatch(this.player, { timeShiftAvailable: timeShiftAvailableNow });\n          this.timeShiftAvailable = timeShiftAvailableNow;\n        }\n      }\n    }\n\n    get onTimeShiftAvailabilityChanged(): Event<PlayerAPI, TimeShiftAvailabilityChangedArgs> {\n      return this.timeShiftAvailabilityChangedEvent.getEvent();\n    }\n  }\n\n  export interface LiveStreamDetectorEventArgs extends NoArgs {\n    live: boolean;\n  }\n\n  /**\n   * Detects changes of the stream type, i.e. changes of the return value of the player#isLive method.\n   * Normally, a stream cannot change its type during playback, it's either VOD or live. Due to bugs on some\n   * platforms or browsers, it can still change. It is therefore unreliable to just check #isLive and this detector\n   * should be used as a workaround instead.\n   *\n   * Additionally starting with player v8.19.0 we have the use-case that a live stream changes into a vod.\n   * The DurationChanged event indicates this switch.\n   *\n   * Known cases:\n   *\n   * - HLS VOD on Android 4.3\n   * Video duration is initially 'Infinity' and only gets available after playback starts, so streams are wrongly\n   * reported as 'live' before playback (the live-check in the player checks for infinite duration).\n   *\n   * @deprecated since UI v3.9.0 in combination with player v8.19.0 use PlayerEvent.DurationChanged instead\n   *\n   * TODO: remove this class in next major release\n   */\n  export class LiveStreamDetector {\n\n    private player: PlayerAPI;\n    private live: boolean;\n    private liveChangedEvent = new EventDispatcher<PlayerAPI, LiveStreamDetectorEventArgs>();\n    private uimanager: UIInstanceManager;\n\n    constructor(player: PlayerAPI, uimanager: UIInstanceManager) {\n      this.player = player;\n      this.uimanager = uimanager;\n      this.live = undefined;\n\n      let liveDetector = () => {\n        this.detect();\n      };\n      this.uimanager.getConfig().events.onUpdated.subscribe(liveDetector);\n      // Re-evaluate when playback starts\n      player.on(player.exports.PlayerEvent.Play, liveDetector);\n\n      // HLS live detection workaround for Android:\n      // Also re-evaluate during playback, because that is when the live flag might change.\n      // (Doing it only in Android Chrome saves unnecessary overhead on other platforms)\n      if (BrowserUtils.isAndroid && BrowserUtils.isChrome) {\n        player.on(player.exports.PlayerEvent.TimeChanged, liveDetector);\n      }\n\n      // DurationChanged event was introduced with player v8.19.0\n      if (player.exports.PlayerEvent.DurationChanged) {\n        player.on(player.exports.PlayerEvent.DurationChanged, liveDetector);\n      }\n\n      // Ad video's isLive() might be different than the actual video's isLive().\n      player.on(player.exports.PlayerEvent.AdBreakStarted, liveDetector);\n      player.on(player.exports.PlayerEvent.AdBreakFinished, liveDetector);\n    }\n\n    detect(): void {\n      let liveNow = this.player.isLive();\n\n      // Compare current to previous live state flag and fire event when it changes. Since we initialize the flag\n      // with undefined, there is always at least an initial event fired that tells listeners the live state.\n      if (liveNow !== this.live) {\n        this.liveChangedEvent.dispatch(this.player, { live: liveNow });\n        this.live = liveNow;\n      }\n    }\n\n    get onLiveChanged(): Event<PlayerAPI, LiveStreamDetectorEventArgs> {\n      return this.liveChangedEvent.getEvent();\n    }\n  }\n}\n","import { NavigationGroup } from './navigationgroup';\nimport { Action, Direction } from './types';\nimport { Container } from '../components/container';\nimport { Component } from '../components/component';\n\nexport enum ListOrientation {\n  Horizontal = 'horizontal',\n  Vertical = 'vertical',\n}\n\nexport class ListNavigationGroup extends NavigationGroup {\n  private readonly listNavigationDirections: Direction[];\n\n  constructor(orientation: ListOrientation, container: Container<unknown>, ...components: Component<unknown>[]) {\n    super(container, ...components);\n\n    switch (orientation) {\n      case ListOrientation.Vertical:\n        this.listNavigationDirections = [Direction.UP, Direction.DOWN];\n        break;\n\n      case ListOrientation.Horizontal:\n        this.listNavigationDirections = [Direction.LEFT, Direction.RIGHT];\n        break;\n    }\n  }\n\n  public handleAction(action: Action): void {\n    super.handleAction(action);\n\n    if (action === Action.SELECT) {\n      // close the container when a list entry is selected\n      this.handleAction(Action.BACK);\n    }\n  }\n\n  public handleNavigation(direction: Direction): void {\n    super.handleNavigation(direction);\n\n    if (!this.listNavigationDirections.includes(direction)) {\n      // close the container on navigation inputs that don't align\n      // with the orientation of the list\n      this.handleAction(Action.BACK);\n    }\n  }\n}\n","import { Component } from '../components/component';\nimport { Container } from '../components/container';\nimport { isComponent, isContainer, isListBox } from './typeguards';\n\n/**\n * Recursively resolves a container and the components contained within them, building a flat list of components.\n *\n * @param container The container to get the contained components from\n */\nfunction resolveAllComponents(container: Container<unknown>): Component<unknown>[] {\n  const childComponents: Component<unknown>[] = [];\n\n  container.getComponents().forEach(containerOrComponent => {\n    if (isContainer(containerOrComponent)) {\n      childComponents.push(...resolveAllComponents(containerOrComponent));\n    } else if (isComponent(containerOrComponent)) {\n      childComponents.push(containerOrComponent);\n    }\n  });\n\n  return childComponents;\n}\n\n/**\n * Returns the HTML elements associated to the provided component.\n *\n * @param component The component to get the HTML elements from\n */\nfunction toHtmlElement(component: Component<unknown>): HTMLElement[] {\n  if (isListBox(component)) {\n    return [].slice.call(component.getDomElement().get()[0].children);\n  } else {\n    return component.getDomElement().get().slice(0, 1);\n  }\n}\n\n/**\n * Takes the provided list of components and flat-maps them to a list of their respective HTML elements. In case a\n * provided component is a container, the children of that container will be resolved recursively. Ignores components\n * that are hidden.\n *\n * @param components The components to map to HTML elements\n */\nexport function getHtmlElementsFromComponents(components: Component<unknown>[]): HTMLElement[] {\n  const htmlElements: HTMLElement[] = [];\n\n  components\n    .filter(component => !component.isHidden())\n    .forEach(component => {\n      const elementsToConsider = component instanceof Container ? resolveAllComponents(component) : [component];\n\n      elementsToConsider.forEach(component => {\n        htmlElements.push(...toHtmlElement(component));\n      });\n    });\n\n  return htmlElements;\n}\n","import { Action, Direction, KeyMap } from './types';\nimport { BrowserUtils } from '../browserutils';\n\nconst TizenKeyMap = {\n  isApplicable: () => BrowserUtils.isTizen,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // D-pad OK\n    13: Action.SELECT,\n    // Back\n    10009: Action.BACK,\n  },\n};\n\nconst WebOsKeyMap = {\n  isApplicable: () => BrowserUtils.isWebOs,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // D-pad OK\n    13: Action.SELECT,\n    // Back\n    461: Action.BACK,\n  },\n};\n\nconst PlayStationKeyMap = {\n  isApplicable: () => BrowserUtils.isPlayStation,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // Cross\n    13: Action.SELECT,\n    // Circle\n    27: Action.BACK,\n  },\n};\n\nconst AndroidKeyMap = {\n  isApplicable: () => BrowserUtils.isAndroid,\n  keyCodes: {\n    // D-pad Up\n    19: Direction.UP,\n    // D-pad Down\n    20: Direction.DOWN,\n    // D-pad Left\n    21: Direction.LEFT,\n    // D-pad Right\n    22: Direction.RIGHT,\n    // D-pad Center\n    23: Action.SELECT,\n    // Enter\n    66: Action.SELECT,\n    // Back\n    4: Action.BACK,\n  },\n};\n\nconst HisenseKeyMap = {\n  isApplicable: () => BrowserUtils.isHisense,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // OK\n    13: Action.SELECT,\n    // Back\n    8: Action.BACK,\n  },\n};\n\n// Default key map used on desktops\nconst DefaultKeyMap = {\n  // Arrow Up\n  38: Direction.UP,\n  // Arrow Down\n  40: Direction.DOWN,\n  // Arrow Left\n  37: Direction.LEFT,\n  // Arrow Right\n  39: Direction.RIGHT,\n  // Enter\n  13: Action.SELECT,\n  // Escape\n  27: Action.BACK,\n};\n\n/**\n * Returns the matching key map for the current platform.\n */\nexport function getKeyMapForPlatform(): KeyMap {\n  const applicableKeyMap = [\n    WebOsKeyMap,\n    TizenKeyMap,\n    PlayStationKeyMap,\n    HisenseKeyMap,\n    AndroidKeyMap,\n  ].find(keyMap => keyMap.isApplicable());\n\n  if (applicableKeyMap) {\n    return applicableKeyMap.keyCodes;\n  } else {\n    return DefaultKeyMap;\n  }\n}\n","import { Direction } from './types';\n\ninterface Vector {\n  x: number;\n  y: number;\n}\n\n/**\n * Calculates the length of a vector.\n *\n * @param vector The vector to calculate the length of\n */\nfunction length(vector: Vector): number {\n  return Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));\n}\n\n/**\n * Normalizes the given vector.\n *\n * @param vector The vector to normalize\n */\nfunction normalize(vector: Vector): Vector {\n  const len = length(vector);\n\n  return {\n    x: vector.x / len,\n    y: vector.y / len,\n  };\n}\n\n/**\n * Calculates the dot product between 2 vectors.\n *\n * @param a The first vector\n * @param b The second vector\n */\nfunction dotProduct(a: Vector, b: Vector): number {\n  return a.x * b.x + a.y * b.y;\n}\n\n/**\n * Calculates the distance between the 2 points pointed to by the provided vectors.\n *\n * @param a The first vector\n * @param b The second vector\n */\nfunction distance(a: Vector, b: Vector): number {\n  return length({\n    x: b.x - a.x,\n    y: b.y - a.y,\n  });\n}\n\n/**\n * Returns a vector that corresponds to the center of the provided element.\n *\n * @param element The element to get the center of\n */\nfunction getElementVector(element: HTMLElement): Vector {\n  const boundingRect = getBoundingRectFromElement(element);\n\n  return {\n    x: boundingRect.x + boundingRect.width / 2,\n    y: boundingRect.y + boundingRect.height / 2,\n  };\n}\n\n/**\n * Returns the angle in degrees between the unit vector pointing in the given {Direction} and the unit vector that\n * points from the current element to another element.\n *\n * @param a The vector of the current element\n * @param b The vector of the other element\n * @param direction The direction to move along\n */\nfunction calculateAngle(a: Vector, b: Vector, direction: Direction): number {\n  const directionVector = {\n    x: (direction === Direction.LEFT ? -1 : direction === Direction.RIGHT ? 1 : 0),\n    y: (direction === Direction.UP ? -1 : direction === Direction.DOWN ? 1 : 0),\n  };\n\n  const elementVector = normalize({\n    x: b.x - a.x,\n    y: b.y - a.y,\n  });\n\n  const angleCos = dotProduct(directionVector, elementVector) / (length(directionVector) * length(elementVector));\n\n  return Math.acos(angleCos) * 180 / Math.PI;\n}\n\n/**\n * Returns the closest element to the current element when trying to navigate in the provided direction. Returns\n * undefined, if there is not element in the given direction.\n *\n * @param activeElement The currently selected element\n * @param elements The list of all elements that can be navigated to\n * @param direction The direction in which to navigate\n */\nexport function getElementInDirection(\n  activeElement: HTMLElement,\n  elements: HTMLElement[],\n  direction: Direction,\n): HTMLElement | undefined {\n  if (!activeElement) return undefined;\n\n  const cutoffAngle = 45;\n  const activeElemVector = getElementVector(activeElement);\n\n  return elements\n    // don't take the current element into account\n    .filter(elem => elem !== activeElement)\n    // get the angle between, and distance to any other element from the current element\n    .map(element => {\n      const elementVector = getElementVector(element);\n      const dist = distance(activeElemVector, elementVector);\n      const angle = calculateAngle(activeElemVector, elementVector, direction);\n\n      return { angle, dist, element };\n    })\n    // filter out any elements that don't align with the direction we're trying to move in\n    .filter(({ angle }) => angle <= cutoffAngle)\n    // sort the resulting elements based on their distance to the current element in ascending order\n    .sort(({ angle: angleA, dist: distA }, { angle: angleB, dist: distB }) => (angleA - angleB) + (distA - distB))\n    // return the element closest to the current element\n    .shift()?.element;\n}\n\n/**\n * Returns DOMRect like object containing horizontal X and vertical Y coordinates from and HTMLElement.\n * Handles use-cases for getBoundingClientRect when the return type can be either\n * a ClientRect or DOMRect object type.\n *\n * @param element The currently selected element\n */\nexport function getBoundingRectFromElement(element: HTMLElement) {\n  const boundingRect = element.getBoundingClientRect();\n\n  if (typeof boundingRect.x !== 'number' && typeof boundingRect.y !== 'number') {\n    boundingRect.x = boundingRect.left;\n    boundingRect.y = boundingRect.top;\n  }\n\n  return boundingRect;\n}\n\n","import { Container } from '../components/container';\nimport { Component } from '../components/component';\nimport { getElementInDirection } from './navigationalgorithm';\nimport { getHtmlElementsFromComponents } from './gethtmlelementsfromcomponents';\nimport { NodeEventSubscriber } from './nodeeventsubscriber';\nimport { isSettingsPanel } from './typeguards';\nimport { Action, ActionCallback, Callback, Direction, NavigationCallback } from './types';\n\n/**\n * Used as part of spatial navigation. Groups together different components to which you can navigate to, in a single\n * navigation group.\n *\n * Responsible for finding elements in direction on navigation and for tracking active element inside the group.\n * Triggers blur and focus on element when active element is changed, as well as click on element on `Action.SELECT`.\n * Will call `hideUi()` on passed in container if `Action.BACK` is called.\n */\nexport class NavigationGroup {\n  private activeElement?: HTMLElement;\n  private activeElementBeforeDisable?: HTMLElement;\n  private readonly components: Component<unknown>[];\n  private removeElementHoverEventListeners = () => {};\n  private readonly eventSubscriber: NodeEventSubscriber;\n\n  constructor(public readonly container: Container<unknown>, ...components: Component<unknown>[]) {\n    this.components = components;\n    this.eventSubscriber = new NodeEventSubscriber();\n  }\n\n  /**\n   * If overwritten, allows to implement custom navigation behavior. Per default, the internal handler will still be\n   * executed. To prevent execution of the default navigation handler, call `preventDefault()`;\n   *\n   * @param direction {Direction} The direction to move along\n   * @param target {HTMLElement} The target element for the event\n   * @param preventDefault {() => void} A function that, when called, will prevent the execution of the default handler\n   */\n  public onNavigation?: NavigationCallback;\n\n  /**\n   * If overwritten, allows to implement custom action behavior. Per default, the internal handler will still be\n   * executed. To prevent execution of the default action handler, call `preventDefault()`;\n   *\n   * @param action {Action} The action that was called\n   * @param target {HTMLElement} The target element that action was called on\n   * @param preventDefault {() => void} A function that, when called, will prevent the execution of the default handler\n   */\n  public onAction?: ActionCallback;\n\n  /**\n   * Returns the active HTMLElement.\n   */\n  public getActiveElement(): HTMLElement | undefined {\n    return this.activeElement;\n  }\n\n  private focusElement(element: HTMLElement): void {\n    this.blurActiveElement();\n    this.activeElement = element;\n    this.activeElement.focus();\n  }\n\n  private blurActiveElement(): void {\n    this.activeElement?.blur();\n  }\n\n  private focusFirstElement(): void {\n    const element = getHtmlElementsFromComponents(this.components)[0];\n    if (element) {\n      this.focusElement(element);\n    }\n  }\n\n  protected defaultNavigationHandler(direction: Direction): void {\n    const targetElement = getElementInDirection(\n      this.activeElement,\n      getHtmlElementsFromComponents(this.components),\n      direction,\n    );\n\n    if (targetElement) {\n      this.focusElement(targetElement);\n    }\n  }\n\n  protected defaultActionHandler(action: Action): void {\n    switch (action) {\n      case(Action.SELECT):\n        this.activeElement.click();\n        break;\n      case(Action.BACK):\n        this.container.hide();\n        break;\n    }\n  }\n\n  private handleInput<T>(data: T, defaultHandler: (data: T) => void, userHandler?: Callback<T>): void {\n    let handleDefault = true;\n    const preventDefault = () => (handleDefault = false);\n\n    userHandler?.(data, this.activeElement, preventDefault);\n\n    if (handleDefault) {\n      defaultHandler.call(this, data);\n    }\n  }\n\n  /**\n   * Handles a navigation event.\n   *\n   * @param direction The direction of the navigation event\n   */\n  public handleNavigation(direction: Direction): void {\n    if (!this.activeElement) {\n      // If we do not have an active element, the active element has been disabled by a mouseleave\n      // event. We should continue the navigation at the exact place where we left off.\n      if (this.activeElementBeforeDisable) {\n        this.focusElement(this.activeElementBeforeDisable);\n      } else {\n        this.focusFirstElement();\n      }\n      return;\n    }\n    this.handleInput(direction, this.defaultNavigationHandler, this.onNavigation);\n  }\n\n  /**\n   * Handles an action event.\n   *\n   * @param action The action of the event\n   */\n  public handleAction(action: Action): void {\n    this.handleInput(action, this.defaultActionHandler, this.onAction);\n  }\n\n  /**\n   * Disable navigation group\n   *\n   * Call blur on active element, set as undefined, and track it as element before disable.\n   */\n  public disable(): void {\n    if (this.activeElement) {\n      this.activeElementBeforeDisable = this.activeElement;\n      this.blurActiveElement();\n      this.activeElement = undefined;\n    }\n  }\n\n  /**\n   * Enable navigation group\n   *\n   * Sets active element to either element that was active before disable, or first element of tracked elements.\n   * If it is settings panel, it will always focus first element in the list.\n   */\n  public enable(): void {\n    if (this.activeElementBeforeDisable && !isSettingsPanel(this.container)) {\n      this.focusElement(this.activeElementBeforeDisable);\n      this.activeElementBeforeDisable = undefined;\n    } else {\n      this.focusFirstElement();\n    }\n\n    this.trackElementHover();\n  }\n\n  /**\n   * Adds event listener for `mouseenter` on tracked elements to ensure tracking of active element will work together\n   * in combination of using mouse and key events.\n   */\n  private trackElementHover(): void {\n    this.removeElementHoverEventListeners();\n\n    const removeEventListenerFunctions = getHtmlElementsFromComponents(this.components).map(htmlElem => {\n      const enterListener = this.focusElement.bind(this, htmlElem);\n      const exitListener = () => this.disable();\n\n      this.eventSubscriber.on(htmlElem, 'mouseenter', enterListener);\n      this.eventSubscriber.on(htmlElem, 'mouseleave', exitListener);\n\n      return () => {\n        this.eventSubscriber.off(htmlElem, 'mouseenter', enterListener);\n        this.eventSubscriber.off(htmlElem, 'mouseleave', exitListener);\n      };\n    });\n\n    this.removeElementHoverEventListeners = () => removeEventListenerFunctions.forEach(fn => fn());\n  }\n\n  /**\n   * Dispose of navigation group\n   */\n  public release(): void {\n    this.eventSubscriber.release();\n    this.activeElement = undefined;\n    this.components.splice(0, this.components.length);\n    this.removeElementHoverEventListeners();\n  }\n}\n","type Listeners = ([Node, EventListenerOrEventListenerObject, boolean | AddEventListenerOptions])[];\n\n/**\n * Allows to subscribe to Node events.\n */\nexport class NodeEventSubscriber {\n  private readonly attachedListeners: Map<keyof HTMLElementEventMap, Listeners>;\n\n  constructor() {\n    this.attachedListeners = new Map();\n  }\n\n  private getEventListenersOfType(type: keyof HTMLElementEventMap): Listeners {\n    if (!this.attachedListeners.has(type)) {\n      this.attachedListeners.set(type, []);\n    }\n\n    return this.attachedListeners.get(type);\n  }\n\n  /**\n   * Adds the given event listener to the node.\n   *\n   * @param node The node to remove the event listener from\n   * @param type The event to listen to\n   * @param listener The listener to remove\n   * @param options The event listener options\n   */\n  public on(\n    node: Node,\n    type: keyof HTMLElementEventMap,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void {\n    node.addEventListener(type, listener, options);\n    this.getEventListenersOfType(type).push([node, listener, options]);\n  }\n\n  /**\n   * Removes the given event listener from the node.\n   *\n   * @param node The node to attach the event listener to\n   * @param type The event to listen to\n   * @param listener The listener to add\n   * @param options The event listener options\n   */\n  public off(\n    node: Node,\n    type: keyof HTMLElementEventMap,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void {\n    const listenersOfType = this.getEventListenersOfType(type);\n    const listenerIndex = listenersOfType.findIndex(([otherNode, otherListener, otherOptions]) => {\n      return otherNode === node && otherListener === listener && otherOptions === options;\n    });\n\n    node.removeEventListener(type, listener, options);\n\n    if (listenerIndex > -1) {\n      listenersOfType.splice(listenerIndex, 1);\n    }\n  }\n\n  /**\n   * Removes all attached event listeners.\n   */\n  public release(): void {\n    this.attachedListeners.forEach((listenersOfType, type) => {\n      listenersOfType.forEach(([element, listener, options]) => {\n        this.off(element, type, listener, options);\n      });\n    });\n    this.attachedListeners.clear();\n  }\n}\n","import { NavigationGroup } from './navigationgroup';\nimport { Component } from '../components/component';\nimport { UIContainer } from '../components/uicontainer';\nimport { Action, Direction } from './types';\n\n/**\n * Extends NavigationGroup and provides additional logic for hiding and showing the UI on the root container.\n */\nexport class RootNavigationGroup extends NavigationGroup {\n  constructor(public readonly container: UIContainer, ...elements: Component<unknown>[]) {\n    super(container, ...elements);\n  }\n\n  public handleAction(action: Action) {\n    this.container.showUi();\n\n    super.handleAction(action);\n  }\n\n  public handleNavigation(direction: Direction) {\n    this.container.showUi();\n\n    super.handleNavigation(direction);\n  }\n\n  protected defaultActionHandler(action: Action): void {\n    if (action === Action.BACK) {\n      this.container.hideUi();\n    } else {\n      super.defaultActionHandler(action);\n    }\n  }\n\n  public release(): void {\n    super.release();\n  }\n}\n","import { RootNavigationGroup } from './rootnavigationgroup';\nimport { NodeEventSubscriber } from './nodeeventsubscriber';\nimport { Action, Direction } from './types';\nimport {getBoundingRectFromElement} from './navigationalgorithm';\n\nconst DefaultScrubSpeedPercentage = 0.005;\nconst ScrubSpeedClearInterval = 100;\nconst ScrubSpeedMultiplier = 1.1;\n\n/**\n * Handles Spatial Navigation interaction with the seek bar. Ensures, that seek operations can be executed and that the\n * scrubbing tooltip is shown as if the user scrubbed using the mouse/touchscreen.\n */\nexport class SeekBarHandler {\n  private readonly cursorPosition = { x: 0, y: 0};\n  private readonly eventSubscriber: NodeEventSubscriber;\n  private isScrubbing = false;\n  private scrubSpeedResetTimeout: number;\n  private scrubSpeedPercentage = DefaultScrubSpeedPercentage;\n\n  constructor(private readonly rootNavigationGroup: RootNavigationGroup) {\n    this.rootNavigationGroup.onAction = this.onAction;\n    this.eventSubscriber = new NodeEventSubscriber();\n    this.rootNavigationGroup.onNavigation = this.onNavigation;\n  }\n\n  private updateScrubSpeedPercentage(): void {\n    clearTimeout(this.scrubSpeedResetTimeout);\n    this.scrubSpeedPercentage *= ScrubSpeedMultiplier;\n    this.scrubSpeedResetTimeout = window.setTimeout(\n      () => this.scrubSpeedPercentage = DefaultScrubSpeedPercentage, ScrubSpeedClearInterval,\n    );\n  }\n\n  private getIncrement(direction: Direction, seekBarWrapper: HTMLElement): number {\n    this.updateScrubSpeedPercentage();\n\n    const seekBarWidth = seekBarWrapper.getBoundingClientRect().width;\n    const increment = seekBarWidth * this.scrubSpeedPercentage;\n\n    return direction === Direction.RIGHT ? increment : -increment;\n  }\n\n  private resetCursorPosition(): void {\n    this.cursorPosition.x = 0;\n    this.cursorPosition.y = 0;\n  }\n\n  private updateCursorPosition(direction: Direction, seekBarWrapper: HTMLElement): void {\n    this.cursorPosition.x += this.getIncrement(direction, seekBarWrapper);\n  }\n\n  private initializeCursorPosition(seekBarWrapper: HTMLElement): void {\n    const playbackPositionMarker = getPlaybackPositionMarker(seekBarWrapper);\n    const rect = getBoundingRectFromElement(playbackPositionMarker);\n\n\n    const startX = rect.x + (rect.width / 2);\n    const startY = rect.y;\n\n    this.cursorPosition.x = startX;\n    this.cursorPosition.y = startY;\n  }\n\n  private initializeOrUpdateCursorPosition(seekBarWrapper: HTMLElement, direction: Direction): void {\n    if (this.isScrubbing) {\n      this.updateCursorPosition(direction, seekBarWrapper);\n    } else {\n      this.initializeCursorPosition(seekBarWrapper);\n    }\n\n    this.isScrubbing = true;\n  }\n\n  private getCursorPositionMouseEventInit(): MouseEventInit {\n    return {\n      clientX: this.cursorPosition.x,\n      clientY: this.cursorPosition.y,\n    };\n  }\n\n  private dispatchMouseMoveEvent(seekBar: Element): void {\n    seekBar.dispatchEvent(new MouseEvent('mousemove', this.getCursorPositionMouseEventInit()));\n  }\n\n  private readonly onNavigation = (direction: Direction, target: HTMLElement, preventDefault: () => void): void => {\n    if (!isSeekBarWrapper(target)) {\n      return;\n    }\n\n    if (direction === Direction.UP || direction === Direction.DOWN) {\n      this.stopSeeking(getSeekBar(target));\n\n      return;\n    }\n\n    this.initializeOrUpdateCursorPosition(target, direction);\n    this.dispatchMouseMoveEvent(getSeekBar(target));\n\n    preventDefault();\n  };\n\n  private dispatchMouseClickEvent(seekBar: Element): void {\n    const mouseDownHandler = () => {\n      const mouseEventInit = this.getCursorPositionMouseEventInit();\n\n      document.dispatchEvent(new MouseEvent('mouseup', mouseEventInit));\n      this.eventSubscriber.off(seekBar, 'mousedown', mouseDownHandler);\n      this.stopSeeking(seekBar);\n    };\n\n    this.eventSubscriber.on(seekBar, 'mousedown', mouseDownHandler);\n    seekBar.dispatchEvent(new MouseEvent('mousedown'));\n  }\n\n  private stopSeeking(seekBar: Element): void {\n    this.resetCursorPosition();\n    this.isScrubbing = false;\n    this.dispatchMouseLeaveEvent(seekBar);\n  }\n\n  private dispatchMouseLeaveEvent(seekBar: Element): void {\n    seekBar.dispatchEvent(new MouseEvent('mouseleave'));\n  }\n\n  private readonly onAction = (action: Action, target: HTMLElement, preventDefault: () => void): void => {\n    if (!isSeekBarWrapper(target)) {\n      return;\n    }\n\n    const seekBar = getSeekBar(target);\n\n    if (action === Action.SELECT && this.isScrubbing) {\n      this.dispatchMouseClickEvent(seekBar);\n      preventDefault();\n    } else if (action === Action.BACK) {\n      this.stopSeeking(seekBar);\n      preventDefault();\n    }\n  };\n\n  /**\n   * Releases the SeekBraHandler, making sure all event subscribers are removed.\n   */\n  public release(): void {\n    this.eventSubscriber.release();\n    this.rootNavigationGroup.onAction = undefined;\n    this.rootNavigationGroup.onNavigation = undefined;\n  }\n}\n\nfunction isSeekBarWrapper(element: HTMLElement): boolean {\n  return Array.from(element.classList).findIndex(className => /-ui-seekbar$/.test(className)) > -1;\n}\n\nfunction getSeekBar(seekBarWrapper: HTMLElement): Element {\n  return seekBarWrapper.children.item(0);\n}\n\nfunction getPlaybackPositionMarker(seekBarWrapper: HTMLElement): HTMLElement {\n  return seekBarWrapper.querySelector('[class*=\"seekbar-playbackposition-marker\"]');\n}\n","import { NavigationGroup } from './navigationgroup';\nimport { RootNavigationGroup } from './rootnavigationgroup';\nimport { NodeEventSubscriber } from './nodeeventsubscriber';\nimport { SeekBarHandler } from './seekbarhandler';\nimport { getKeyMapForPlatform } from './keymap';\nimport { Action, Direction, KeyMap } from './types';\nimport { isAction, isDirection } from './typeguards';\n\n/**\n * SpatialNavigation keeps track of all navigation groups, and updates the active navigation group when visibility\n * changes on group container.\n *\n * It listens to key events, and triggers either handleNavigation or handleAction on the active group.\n * SeekBarHandler will get instantiated with root navigation group and disposed on release of the spatial navigation.\n */\nexport class SpatialNavigation {\n  private unsubscribeVisibilityChangesFns: (() => void)[];\n  private readonly navigationGroups: NavigationGroup[] = [];\n  private readonly activeNavigationGroups: NavigationGroup[];\n  private readonly eventSubscriber: NodeEventSubscriber;\n  private readonly seekBarHandler: SeekBarHandler;\n  private readonly keyMap: KeyMap;\n\n  constructor(rootNavigationGroup: RootNavigationGroup, ...navigationGroups: NavigationGroup[]) {\n    this.seekBarHandler = new SeekBarHandler(rootNavigationGroup);\n\n    this.activeNavigationGroups = [];\n    this.unsubscribeVisibilityChangesFns = [];\n    this.eventSubscriber = new NodeEventSubscriber();\n    this.navigationGroups = [rootNavigationGroup, ...navigationGroups];\n    this.keyMap = getKeyMapForPlatform();\n\n    this.subscribeToNavigationGroupVisibilityChanges();\n    this.attachKeyEventHandler();\n    this.enableDefaultNavigationGroup();\n  }\n\n  private attachKeyEventHandler(): void {\n    this.eventSubscriber.on(document, 'keydown', this.handleKeyEvent, true);\n  }\n\n  private onShow = (group: NavigationGroup): void => {\n    this.activeNavigationGroups.push(group);\n    this.updateEnabledNavigationGroup();\n  };\n\n  private onHide = (group: NavigationGroup): void => {\n    const groupIndex = this.activeNavigationGroups.findIndex(other => other === group);\n\n    if (groupIndex > -1) {\n      group.disable();\n      this.activeNavigationGroups.splice(groupIndex, 1);\n      this.updateEnabledNavigationGroup();\n    }\n  };\n\n  /**\n   * Subscribes to onHide and onShow on all navigation groups containers as Spatial navigation tracks active navigation\n   * group based on their container visibility.\n   */\n  private subscribeToNavigationGroupVisibilityChanges(): void {\n    this.navigationGroups.forEach(group => {\n      const onShowHandler = () => this.onShow(group);\n      const onHideHandler = () => this.onHide(group);\n\n      group.container.onShow.subscribe(onShowHandler);\n      group.container.onHide.subscribe(onHideHandler);\n\n      this.unsubscribeVisibilityChangesFns.push(\n        () => group.container.onShow.unsubscribe(onShowHandler),\n        () => group.container.onHide.unsubscribe(onHideHandler),\n      );\n    });\n  }\n\n  private unsubscribeFromNavigationGroupVisibilityChanges(): void {\n    this.unsubscribeVisibilityChangesFns.forEach(unsub => unsub());\n    this.unsubscribeVisibilityChangesFns = [];\n  }\n\n  /**\n   * It will enable group of which container is currently shown\n   * If there are no groups with containers that are currently visible, it will enable root navigation group\n   */\n  private enableDefaultNavigationGroup(): void {\n    const isShown = (group: NavigationGroup) => group.container.isShown();\n    const groupToEnable = this.navigationGroups.find(isShown) ?? this.navigationGroups[0];\n\n    if (groupToEnable) {\n      this.activeNavigationGroups.push(groupToEnable);\n      this.updateEnabledNavigationGroup();\n    }\n  }\n\n  /**\n   * Disables navigation groups that are no longer active and calls enable on last pushed navigation group\n   */\n  private updateEnabledNavigationGroup(): void {\n    this.activeNavigationGroups.forEach((group, idx) => {\n      if (idx < this.activeNavigationGroups.length - 1) {\n        group.disable();\n      } else {\n        group.enable();\n      }\n    });\n  }\n\n  /**\n   * Returns currently active navigation group\n   */\n  public getActiveNavigationGroup(): NavigationGroup | undefined {\n    return this.activeNavigationGroups[this.activeNavigationGroups.length - 1];\n  }\n\n  /**\n   * Checks if keyboard event keycode is tracked either as Direction or Action and calls appropriate handler on active\n   * navigation group\n   *\n   * @param e {KeyboardEvent}\n   */\n  private handleKeyEvent = (e: KeyboardEvent): void => {\n    const event: Direction | Action | undefined = this.keyMap[getKeyCode(e)];\n\n    const active = this.getActiveNavigationGroup();\n    if (!active || !active.container || active.container.isHidden() || active.container.isDisabled()) {\n      return;\n    }\n\n    if (isDirection(event)) {\n      active.handleNavigation(event);\n\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    if (isAction(event)) {\n      active.handleAction(event);\n\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  };\n\n  /**\n   * Dispose of SpatialNavigation\n   *\n   * Remove all event handlers, release seekbar handler and release all navigation groups.\n   */\n  public release(): void {\n    this.unsubscribeFromNavigationGroupVisibilityChanges();\n    this.eventSubscriber.release();\n    this.navigationGroups.forEach(group => group.release());\n    this.seekBarHandler.release();\n  }\n}\n\nfunction getKeyCode(event: KeyboardEvent): number {\n  return event.keyCode;\n}\n","import { Component } from '../components/component';\nimport { SettingsPanel } from '../components/settingspanel';\nimport { Container } from '../components/container';\nimport { ListBox } from '../components/listbox';\nimport { Action, Direction } from './types';\n\nexport function isSettingsPanel(component: Component<unknown>): component is SettingsPanel {\n  return component instanceof SettingsPanel;\n}\n\nexport function isComponent(obj: unknown): obj is Component<unknown> {\n  return obj !== null && obj !== undefined && obj instanceof Component;\n}\n\nexport function isContainer(obj: unknown): obj is Container<unknown> {\n  return obj !== null && obj !== undefined && obj instanceof Container;\n}\n\nexport function isListBox(obj: unknown): obj is ListBox {\n  return obj instanceof ListBox;\n}\n\nexport function isDirection(direction: unknown): direction is Direction {\n  return typeof direction === 'string' && Object.values<string>(Direction).includes(direction);\n}\n\nexport function isAction(action: unknown): action is Action {\n  return typeof action === 'string' && Object.values<string>(Action).includes(action);\n}\n","export type Callback<T> = (data: T, target: HTMLElement, preventDefault: () => void) => void;\nexport type NavigationCallback = Callback<Direction>;\nexport type ActionCallback = Callback<Action>;\nexport type KeyMap = {\n  [keyCode: number]: Action | Direction;\n};\n\nexport enum Direction {\n  UP = 'up',\n  DOWN = 'down',\n  LEFT = 'left',\n  RIGHT = 'right',\n}\n\nexport enum Action {\n  SELECT = 'select',\n  BACK = 'back',\n}\n","export namespace StorageUtils {\n  let hasLocalStorageCache: boolean;\n\n  export function hasLocalStorage(): boolean {\n    if (hasLocalStorageCache) {\n      return hasLocalStorageCache;\n    }\n\n    // hasLocalStorage is used to safely ensure we can use localStorage\n    // taken from https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage\n    let storage: any = { length: 0 };\n    try {\n      storage = window['localStorage'];\n      let x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      hasLocalStorageCache = true;\n    }\n    catch (e) {\n      hasLocalStorageCache = e instanceof DOMException && (\n          // everything except Firefox\n        e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === 'QuotaExceededError' ||\n        // Firefox\n        e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n        // acknowledge QuotaExceededError only if there's something already stored\n        storage.length !== 0;\n    }\n    return hasLocalStorageCache;\n  }\n\n  /**\n   * Stores a string item into localStorage.\n   * @param key the item's key\n   * @param data the item's data\n   */\n  export function setItem(key: string, data: string): void {\n    if (StorageUtils.hasLocalStorage()) {\n      window.localStorage.setItem(key, data);\n    }\n  }\n\n  /**\n   * Gets an item's string value from the localStorage.\n   * @param key the key to look up its associated value\n   * @return {string | null} Returns the string if found, null if there is no data stored for the key\n   */\n  export function getItem(key: string): string | null {\n    if (StorageUtils.hasLocalStorage()) {\n      return window.localStorage.getItem(key);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Stores an object into localStorage. The object will be serialized to JSON. The following types are supported\n   * in addition to the default types:\n   *  - ColorUtils.Color\n   *\n   * @param key the key to store the data to\n   * @param data the object to store\n   */\n  export function setObject<T>(key: string, data: T): void {\n    if (StorageUtils.hasLocalStorage()) {\n      let json = JSON.stringify(data);\n      setItem(key, json);\n    }\n  }\n\n  /**\n   * Gets an object for the given key from localStorage. The object will be deserialized from JSON. Beside the\n   * default types, the following types are supported:\n   *  - ColorUtils.Color\n   *\n   * @param key the key to look up its associated object\n   * @return {any} Returns the object if found, null otherwise\n   */\n  export function getObject<T>(key: string): T {\n    if (StorageUtils.hasLocalStorage()) {\n      let json = getItem(key);\n\n      if (key) {\n        let object = JSON.parse(json);\n        return <T>object;\n      }\n    }\n    return null;\n  }\n}\n","import { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\nexport namespace StringUtils {\n\n  export let FORMAT_HHMMSS: string = 'hh:mm:ss';\n  export let FORMAT_MMSS: string = 'mm:ss';\n\n  /**\n   * Formats a number of seconds into a time string with the pattern hh:mm:ss.\n   *\n   * @param totalSeconds the total number of seconds to format to string\n   * @param format the time format to output (default: hh:mm:ss)\n   * @returns {string} the formatted time string\n   */\n  export function secondsToTime(totalSeconds: number, format: string = FORMAT_HHMMSS): string {\n    let isNegative = totalSeconds < 0;\n\n    if (isNegative) {\n      // If the time is negative, we make it positive for the calculation below\n      // (else we'd get all negative numbers) and reattach the negative sign later.\n      totalSeconds = -totalSeconds;\n    }\n\n    // Split into separate time parts\n    let hours = Math.floor(totalSeconds / 3600);\n    let minutes = Math.floor(totalSeconds / 60) - hours * 60;\n    let seconds = Math.floor(totalSeconds) % 60;\n\n    return (isNegative ? '-' : '') + format\n        .replace('hh', leftPadWithZeros(hours, 2))\n        .replace('mm', leftPadWithZeros(minutes, 2))\n        .replace('ss', leftPadWithZeros(seconds, 2));\n  }\n\n  export function secondsToText(totalSeconds: number): string {\n    const isNegative = totalSeconds < 0;\n\n    if (isNegative) {\n      // If the time is negative, we make it positive for the calculation below\n      // (else we'd get all negative numbers) and reattach the negative sign later.\n      totalSeconds = -totalSeconds;\n    }\n\n    // Split into separate time parts\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor(totalSeconds / 60) - hours * 60;\n    const seconds = Math.floor(totalSeconds) % 60;\n\n    return (isNegative ? '-' : '') +\n    (hours !== 0 ? `${leftPadWithZeros(hours, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.hours'))} ` : '') +\n    (minutes !== 0 ? `${leftPadWithZeros(minutes, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.minutes'))} ` : '') +\n    `${leftPadWithZeros(seconds, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.seconds'))}`;\n  }\n\n  /**\n   * Converts a number to a string and left-pads it with zeros to the specified length.\n   * Example: leftPadWithZeros(123, 5) => '00123'\n   *\n   * @param num the number to convert to string and pad with zeros\n   * @param length the desired length of the padded string\n   * @returns {string} the padded number as string\n   */\n  function leftPadWithZeros(num: number | string, length: number): string {\n    let text = num + '';\n    let padding = '0000000000'.substr(0, length - text.length);\n    return padding + text;\n  }\n\n  /**\n   * Fills out placeholders in an ad message.\n   *\n   * Has the placeholders '{remainingTime[formatString]}', '{playedTime[formatString]}' and\n   * '{adDuration[formatString]}', which are replaced by the remaining time until the ad can be skipped, the current\n   * time or the ad duration. The format string is optional. If not specified, the placeholder is replaced by the time\n   * in seconds. If specified, it must be of the following format:\n   * - %d - Inserts the time as an integer.\n   * - %0Nd - Inserts the time as an integer with leading zeroes, if the length of the time string is smaller than N.\n   * - %f - Inserts the time as a float.\n   * - %0Nf - Inserts the time as a float with leading zeroes.\n   * - %.Mf - Inserts the time as a float with M decimal places. Can be combined with %0Nf, e.g. %04.2f (the time\n   * 10.123 would be printed as 0010.12).\n   * - %hh:mm:ss\n   * - %mm:ss\n   *\n   * Examples:\n   * - { text: 'Ad: {remainingTime%mm:ss} secs' }\n   * An input value of 100 would be displayed as: 'Ad: 01:40 secs'\n   * - { text: 'Ad: {remainingTime%f} secs' }\n   * An input value of 100 would be displayed as: 'Ad: 100.0 secs'\n   *\n   * @param adMessage an ad message with optional placeholders to fill\n   * @param skipOffset if specified, {remainingTime} will be filled with the remaining time until the ad can be skipped\n   * @param player the player to get the time data from\n   * @returns {string} the ad message with filled placeholders\n   */\n  export function replaceAdMessagePlaceholders(adMessage: string, skipOffset: number, player: PlayerAPI) {\n    let adMessagePlaceholderRegex = new RegExp(\n      '\\\\{(remainingTime|playedTime|adDuration)(}|%((0[1-9]\\\\d*(\\\\.\\\\d+(d|f)|d|f)|\\\\.\\\\d+f|d|f)|hh:mm:ss|mm:ss)})',\n      'g',\n    );\n\n    return adMessage.replace(adMessagePlaceholderRegex, (formatString) => {\n      let time = 0;\n      if (formatString.indexOf('remainingTime') > -1) {\n        if (skipOffset) {\n          time = Math.ceil(skipOffset - player.getCurrentTime());\n        } else {\n          time = player.getDuration() - player.getCurrentTime();\n        }\n      } else if (formatString.indexOf('playedTime') > -1) {\n        time = player.getCurrentTime();\n      } else if (formatString.indexOf('adDuration') > -1) {\n        time = player.getDuration();\n      }\n      return formatNumber(Math.round(time), formatString);\n    });\n  }\n\n  function formatNumber(time: number, format: string) {\n    let formatStringValidationRegex = /%((0[1-9]\\d*(\\.\\d+(d|f)|d|f)|\\.\\d+f|d|f)|hh:mm:ss|mm:ss)/;\n    let leadingZeroesRegex = /(%0[1-9]\\d*)(?=(\\.\\d+f|f|d))/;\n    let decimalPlacesRegex = /\\.\\d*(?=f)/;\n\n    if (!formatStringValidationRegex.test(format)) {\n      // If the format is invalid, we set a default fallback format\n      format = '%d';\n    }\n\n    // Determine the number of leading zeros\n    let leadingZeroes = 0;\n    let leadingZeroesMatches = format.match(leadingZeroesRegex);\n    if (leadingZeroesMatches) {\n      leadingZeroes = parseInt(leadingZeroesMatches[0].substring(2));\n    }\n\n    // Determine the number of decimal places\n    let numDecimalPlaces = null;\n    let decimalPlacesMatches = format.match(decimalPlacesRegex);\n    if (decimalPlacesMatches && !isNaN(parseInt(decimalPlacesMatches[0].substring(1)))) {\n      numDecimalPlaces = parseInt(decimalPlacesMatches[0].substring(1));\n      if (numDecimalPlaces > 20) {\n        numDecimalPlaces = 20;\n      }\n    }\n\n    // Float format\n    if (format.indexOf('f') > -1) {\n      let timeString = '';\n\n      if (numDecimalPlaces !== null) {\n        // Apply fixed number of decimal places\n        timeString = time.toFixed(numDecimalPlaces);\n      } else {\n        timeString = '' + time;\n      }\n\n      // Apply leading zeros\n      if (timeString.indexOf('.') > -1) {\n        return leftPadWithZeros(timeString, timeString.length + (leadingZeroes - timeString.indexOf('.')));\n      } else {\n        return leftPadWithZeros(timeString, leadingZeroes);\n      }\n\n    }\n    // Time format\n    else if (format.indexOf(':') > -1) {\n      let totalSeconds = Math.ceil(time);\n\n      // hh:mm:ss format\n      if (format.indexOf('hh') > -1) {\n        return secondsToTime(totalSeconds);\n      }\n      // mm:ss format\n      else {\n        let minutes = Math.floor(totalSeconds / 60);\n        let seconds = totalSeconds % 60;\n\n        return leftPadWithZeros(minutes, 2) + ':' + leftPadWithZeros(seconds, 2);\n      }\n    }\n    // Integer format\n    else {\n      return leftPadWithZeros(Math.ceil(time), leadingZeroes);\n    }\n  }\n}\n","import { ListItem, ListSelector, ListSelectorConfig } from './components/listselector';\nimport { UIInstanceManager } from './uimanager';\nimport { PlayerAPI, SubtitleEvent, SubtitleTrack } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\n/**\n * Helper class to handle all subtitle related events\n *\n * This class listens to player events as well as the `ListSelector` event if selection changed\n */\nexport class SubtitleSwitchHandler {\n\n  private static SUBTITLES_OFF_KEY: string = 'null';\n\n  private player: PlayerAPI;\n  private listElement: ListSelector<ListSelectorConfig>;\n  private uimanager: UIInstanceManager;\n\n  constructor(player: PlayerAPI, element: ListSelector<ListSelectorConfig>, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.listElement = element;\n    this.uimanager = uimanager;\n\n    this.bindSelectionEvent();\n    this.bindPlayerEvents();\n    this.refreshSubtitles();\n  }\n\n  private bindSelectionEvent(): void {\n    this.listElement.onItemSelected.subscribe((_, value: string) => {\n      // TODO add support for multiple concurrent subtitle selections\n      if (value === SubtitleSwitchHandler.SUBTITLES_OFF_KEY) {\n        const currentSubtitle = this.player.subtitles.list().filter((subtitle) => subtitle.enabled).pop();\n        if (currentSubtitle) {\n          this.player.subtitles.disable(currentSubtitle.id);\n        }\n      } else {\n        this.player.subtitles.enable(value, true);\n      }\n    });\n  }\n\n  private bindPlayerEvents(): void {\n    this.player.on(this.player.exports.PlayerEvent.SubtitleAdded, this.addSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleEnabled, this.selectCurrentSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleDisabled, this.selectCurrentSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleRemoved, this.removeSubtitle);\n    // Update subtitles when source goes away\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.clearSubtitles);\n    // Update subtitles when the period within a source changes\n    this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshSubtitles);\n    this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshSubtitles);\n  }\n\n  private addSubtitle = (event: SubtitleEvent) => {\n    const subtitle = event.subtitle;\n    if (!this.listElement.hasItem(subtitle.id)) {\n      this.listElement.addItem(subtitle.id, subtitle.label);\n    }\n  };\n\n  private removeSubtitle = (event: SubtitleEvent) => {\n    const subtitle = event.subtitle;\n    if (this.listElement.hasItem(subtitle.id)) {\n      this.listElement.removeItem(subtitle.id);\n    }\n  };\n\n  private selectCurrentSubtitle = () => {\n    if (!this.player.subtitles) {\n      // Subtitles API not available (yet)\n      return;\n    }\n\n    let currentSubtitle = this.player.subtitles.list().filter((subtitle) => subtitle.enabled).pop();\n    this.listElement.selectItem(currentSubtitle ? currentSubtitle.id : SubtitleSwitchHandler.SUBTITLES_OFF_KEY);\n  };\n\n  private clearSubtitles = () => {\n    this.listElement.clearItems();\n  }\n\n  private refreshSubtitles = () => {\n    if (!this.player.subtitles) {\n      // Subtitles API not available (yet)\n      return;\n    }\n\n    const offListItem: ListItem = {\n      key: SubtitleSwitchHandler.SUBTITLES_OFF_KEY,\n      label: i18n.getLocalizer('off'),\n    };\n\n    const subtitles = this.player.subtitles.list();\n    const subtitleToListItem = (subtitle: SubtitleTrack): ListItem => {\n      return { key: subtitle.id, label: subtitle.label };\n    };\n\n    this.listElement.synchronizeItems([\n      offListItem, ...subtitles.map(subtitleToListItem),\n    ]);\n    this.selectCurrentSubtitle();\n  };\n}\n","// TODO change to internal (not exported) class, how to use in other files?\n/**\n * Executes a callback after a specified amount of time, optionally repeatedly until stopped.\n */\nexport class Timeout {\n\n  private readonly delay: number;\n  private readonly callback: () => void;\n  private readonly repeat: boolean;\n  // There's two setTimeout declarations, one on Window which returns type \"number\" and one in NodeJS which returns\n  // type \"Timer\". For unknown reasons builds on Jenkins fail due to a type mismatch when we use type \"number\" here,\n  // although it works on other platforms (e.g. Windows, Codeship).\n  // To work around the issue we use type \"any\". The type does not matter anyway because we're not working with\n  // this value except providing it to clearTimeout.\n  private timeoutOrIntervalId: any;\n  private active: boolean;\n\n  /**\n   * Creates a new timeout callback handler.\n   * @param delay the delay in milliseconds after which the callback should be executed\n   * @param callback the callback to execute after the delay time\n   * @param repeat if true, call the callback repeatedly in delay intervals\n   */\n  constructor(delay: number, callback: () => void, repeat: boolean = false) {\n    this.delay = delay;\n    this.callback = callback;\n    this.repeat = repeat;\n    this.timeoutOrIntervalId = 0;\n    this.active = false;\n  }\n\n  /**\n   * Starts the timeout and calls the callback when the timeout delay has passed.\n   * @returns {Timeout} the current timeout (so the start call can be chained to the constructor)\n   */\n  start(): this {\n    this.reset();\n    return this;\n  }\n\n  /**\n   * Clears the timeout. The callback will not be called if clear is called during the timeout.\n   */\n  clear(): void {\n    this.clearInternal();\n  }\n\n  /**\n   * Resets the passed timeout delay to zero. Can be used to defer the calling of the callback.\n   */\n  reset(): void {\n    this.clearInternal();\n\n    if (this.repeat) {\n      this.timeoutOrIntervalId = setInterval(this.callback, this.delay);\n    } else {\n      this.timeoutOrIntervalId = setTimeout(() => {\n        this.active = false;\n        this.callback();\n      }, this.delay);\n    }\n    this.active = true;\n  }\n\n  isActive(): boolean {\n    return this.active;\n  }\n\n  private clearInternal(): void {\n    if (this.repeat) {\n      clearInterval(this.timeoutOrIntervalId);\n    } else {\n      clearTimeout(this.timeoutOrIntervalId);\n    }\n    this.active = false;\n  }\n}","import { GoBackButton } from './../custom/ts/components/gobackbutton';\nimport { RadioModeToggleButton } from './../custom/ts/components/radiomode/radiomodetogglebutton';\nimport { PlaybackJumpControlsOverlay } from '../custom/ts/components/playbackjumpoverlay';\nimport { SubtitleOverlay } from './components/subtitleoverlay';\nimport { SettingsPanelPage } from './components/settingspanelpage';\nimport { SettingsPanelItem } from './components/settingspanelitem';\nimport { VideoQualitySelectBox } from './components/videoqualityselectbox';\nimport { PlaybackSpeedSelectBox } from './components/playbackspeedselectbox';\nimport { AudioTrackSelectBox } from './components/audiotrackselectbox';\nimport { AudioQualitySelectBox } from './components/audioqualityselectbox';\nimport { SettingsPanel } from './components/settingspanel';\nimport { SubtitleSettingsPanelPage } from './components/subtitlesettings/subtitlesettingspanelpage';\nimport { SettingsPanelPageOpenButton } from './components/settingspanelpageopenbutton';\nimport { SubtitleSettingsLabel } from './components/subtitlesettings/subtitlesettingslabel';\nimport { SubtitleSelectBox } from './components/subtitleselectbox';\nimport { ControlBar } from './components/controlbar';\nimport { Container } from './components/container';\nimport { PlaybackTimeLabel, PlaybackTimeLabelMode } from './components/playbacktimelabel';\nimport { SeekBar } from './components/seekbar';\nimport { SeekBarLabel } from './components/seekbarlabel';\nimport { PlaybackToggleButton } from './components/playbacktogglebutton';\nimport { VolumeToggleButton } from './components/volumetogglebutton';\nimport { VolumeSlider } from './components/volumeslider';\nimport { Spacer } from './components/spacer';\nimport { PictureInPictureToggleButton } from './components/pictureinpicturetogglebutton';\nimport { AirPlayToggleButton } from './components/airplaytogglebutton';\nimport { CastToggleButton } from './components/casttogglebutton';\nimport { VRToggleButton } from './components/vrtogglebutton';\nimport { SettingsToggleButton } from './components/settingstogglebutton';\nimport { FullscreenToggleButton } from './components/fullscreentogglebutton';\nimport { UIContainer } from './components/uicontainer';\nimport { BufferingOverlay } from './components/bufferingoverlay';\nimport { PlaybackToggleOverlay } from './components/playbacktoggleoverlay';\nimport { CastStatusOverlay } from './components/caststatusoverlay';\nimport { TitleBar } from './components/titlebar';\nimport { RecommendationOverlay } from './components/recommendationoverlay';\nimport { Watermark } from './components/watermark';\nimport { ErrorMessageOverlay } from './components/errormessageoverlay';\nimport { AdClickOverlay } from './components/adclickoverlay';\nimport { AdMessageLabel } from './components/admessagelabel';\nimport { AdSkipButton } from './components/adskipbutton';\nimport { CloseButton } from './components/closebutton';\nimport { MetadataLabel, MetadataLabelContent } from './components/metadatalabel';\nimport { PlayerUtils } from './playerutils';\nimport { Label } from './components/label';\nimport { CastUIContainer } from './components/castuicontainer';\nimport { UIConditionContext, UIManager } from './uimanager';\nimport { UIConfig } from './uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\nimport { SubtitleListBox } from './components/subtitlelistbox';\nimport { AudioTrackListBox } from './components/audiotracklistbox';\nimport { SpatialNavigation } from './spatialnavigation/spatialnavigation';\nimport { RootNavigationGroup } from './spatialnavigation/rootnavigationgroup';\nimport { ListNavigationGroup, ListOrientation } from './spatialnavigation/ListNavigationGroup';\n\nexport namespace UIFactory {\n\n  export function buildDefaultUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return UIFactory.buildModernUI(player, config);\n  }\n\n  export function buildDefaultSmallScreenUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return UIFactory.buildModernSmallScreenUI(player, config);\n  }\n\n  export function buildDefaultCastReceiverUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return UIFactory.buildModernCastReceiverUI(player, config);\n  }\n\n  export function buildDefaultTvUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return UIFactory.buildModernTvUI(player, config);\n  }\n\n  export function modernUI() {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let mainSettingsPanelPage = new SettingsPanelPage({\n      components: [\n        new SettingsPanelItem(i18n.getLocalizer('settings.video.quality'), new VideoQualitySelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('speed'), new PlaybackSpeedSelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('settings.audio.track'), new AudioTrackSelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('settings.audio.quality'), new AudioQualitySelectBox()),\n      ],\n    });\n\n    let settingsPanel = new SettingsPanel({\n      components: [\n        mainSettingsPanelPage,\n      ],\n      hidden: true,\n    });\n\n    let subtitleSettingsPanelPage = new SubtitleSettingsPanelPage({\n      settingsPanel: settingsPanel,\n      overlay: subtitleOverlay,\n    });\n\n    const subtitleSelectBox = new SubtitleSelectBox();\n\n    let subtitleSettingsOpenButton = new SettingsPanelPageOpenButton({\n      targetPage: subtitleSettingsPanelPage,\n      container: settingsPanel,\n      ariaLabel: i18n.getLocalizer('settings.subtitles'),\n      text: i18n.getLocalizer('open'),\n    });\n\n    mainSettingsPanelPage.addComponent(\n      new SettingsPanelItem(\n        new SubtitleSettingsLabel({\n          text: i18n.getLocalizer('settings.subtitles'),\n          opener: subtitleSettingsOpenButton,\n        }),\n        subtitleSelectBox,\n        {\n          role: 'menubar',\n        },\n      ));\n\n    settingsPanel.addComponent(subtitleSettingsPanelPage);\n\n    let controlBar = new ControlBar({\n      components: [\n        settingsPanel,\n        new Container({\n          components: [\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n        new Container({\n          components: [\n            new PlaybackToggleButton(),\n            new VolumeToggleButton(),\n            new VolumeSlider(),\n            new Spacer(),\n            new PictureInPictureToggleButton(),\n            new AirPlayToggleButton(),\n            new CastToggleButton(),\n            new RadioModeToggleButton(),\n            new VRToggleButton(),\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\n            new FullscreenToggleButton(),\n          ],\n          cssClasses: ['controlbar-bottom'],\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new PlaybackJumpControlsOverlay(),\n        new CastStatusOverlay(),\n        controlBar,\n        new TitleBar(),\n        new RecommendationOverlay(),\n        new Watermark(),\n        new ErrorMessageOverlay(),\n      ],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernAdsUI() {\n    return new UIContainer({\n      components: [\n        new BufferingOverlay(),\n        new AdClickOverlay(),\n        new PlaybackToggleOverlay(),\n        new Container({\n          components: [\n            new AdMessageLabel({ text: i18n.getLocalizer('ads.remainingTime')}),\n            new AdSkipButton(),\n          ],\n          cssClass: 'ui-ads-status',\n        }),\n        new ControlBar({\n          components: [\n            new Container({\n              components: [\n                new PlaybackToggleButton(),\n                new VolumeToggleButton(),\n                new VolumeSlider(),\n                new Spacer(),\n                new FullscreenToggleButton(),\n              ],\n              cssClasses: ['controlbar-bottom'],\n            }),\n          ],\n        }),\n      ],\n      cssClasses: ['ui-skin-ads'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernSmallScreenUI() {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let mainSettingsPanelPage = new SettingsPanelPage({\n      components: [\n        new SettingsPanelItem(i18n.getLocalizer('settings.video.quality'), new VideoQualitySelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('speed'), new PlaybackSpeedSelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('settings.audio.track'), new AudioTrackSelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('settings.audio.quality'), new AudioQualitySelectBox()),\n      ],\n    });\n\n    let settingsPanel = new SettingsPanel({\n      components: [\n        mainSettingsPanelPage,\n      ],\n      hidden: true,\n      pageTransitionAnimation: false,\n      hideDelay: -1,\n    });\n\n    let subtitleSettingsPanelPage = new SubtitleSettingsPanelPage({\n      settingsPanel: settingsPanel,\n      overlay: subtitleOverlay,\n    });\n\n    let subtitleSettingsOpenButton = new SettingsPanelPageOpenButton({\n      targetPage: subtitleSettingsPanelPage,\n      container: settingsPanel,\n      ariaLabel: i18n.getLocalizer('settings.subtitles'),\n      text: i18n.getLocalizer('open'),\n    });\n\n    const subtitleSelectBox = new SubtitleSelectBox();\n\n    mainSettingsPanelPage.addComponent(\n      new SettingsPanelItem(\n        new SubtitleSettingsLabel({\n          text: i18n.getLocalizer('settings.subtitles'),\n          opener: subtitleSettingsOpenButton,\n        }),\n        subtitleSelectBox,\n        {\n          role: 'menubar',\n        },\n      ));\n\n    settingsPanel.addComponent(subtitleSettingsPanelPage);\n\n    settingsPanel.addComponent(new CloseButton({ target: settingsPanel }));\n    subtitleSettingsPanelPage.addComponent(new CloseButton({ target: settingsPanel }));\n\n    let controlBar = new ControlBar({\n      components: [\n        new Container({\n          components: [\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\n            new FullscreenToggleButton({ cssClasses: ['controlbar-fullscreen-toggle-button']}),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new CastStatusOverlay(),\n        new PlaybackToggleOverlay(),\n        new PlaybackJumpControlsOverlay(),\n        new RecommendationOverlay(),\n        controlBar,\n        new TitleBar({\n          components: [\n            new GoBackButton(),\n            new MetadataLabel({ content: MetadataLabelContent.Title }),\n            new CastToggleButton(),\n            new VRToggleButton(),\n            new PictureInPictureToggleButton(),\n            new AirPlayToggleButton(),\n            new RadioModeToggleButton(),\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\n          ],\n        }),\n        settingsPanel,\n        new Watermark(),\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: ['ui-skin-smallscreen'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernSmallScreenAdsUI() {\n    return new UIContainer({\n      components: [\n        new BufferingOverlay(),\n        new AdClickOverlay(),\n        new PlaybackToggleOverlay(),\n        new TitleBar({\n          components: [\n            // dummy label with no content to move buttons to the right\n            new Label({ cssClass: 'label-metadata-title' }),\n            new FullscreenToggleButton(),\n          ],\n        }),\n        new Container({\n          components: [\n            new AdMessageLabel({ text: 'Ad: {remainingTime} secs' }),\n            new AdSkipButton(),\n          ],\n          cssClass: 'ui-ads-status',\n        }),\n      ],\n      cssClasses: ['ui-skin-ads', 'ui-skin-smallscreen'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernCastReceiverUI() {\n    let controlBar = new ControlBar({\n      components: [\n        new Container({\n          components: [\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\n            new SeekBar({ smoothPlaybackPositionUpdateIntervalMs: -1 }),\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n      ],\n    });\n\n    return new CastUIContainer({\n      components: [\n        new SubtitleOverlay(),\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new Watermark(),\n        controlBar,\n        new TitleBar({ keepHiddenWithoutMetadata: true }),\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: ['ui-skin-cast-receiver'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function buildModernUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    // show smallScreen UI only on mobile/handheld devices\n    let smallScreenSwitchWidth = 600;\n\n    return new UIManager(player, [{\n      ui: modernSmallScreenAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth && context.isAd\n          && context.adRequiresUi;\n      },\n    }, {\n      ui: modernAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: modernSmallScreenUI(),\n      condition: (context: UIConditionContext) => {\n        return !context.isAd && !context.adRequiresUi && context.isMobile\n          && context.documentWidth < smallScreenSwitchWidth;\n      },\n    }, {\n      ui: modernUI(),\n      condition: (context: UIConditionContext) => {\n        return !context.isAd && !context.adRequiresUi;\n      },\n    }], config);\n  }\n\n  export function buildModernSmallScreenUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return new UIManager(player, [{\n      ui: modernSmallScreenAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: modernSmallScreenUI(),\n      condition: (context: UIConditionContext) => {\n        return !context.isAd && !context.adRequiresUi;\n      },\n    }], config);\n  }\n\n  export function buildModernCastReceiverUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return new UIManager(player, modernCastReceiverUI(), config);\n  }\n\n  export function buildModernTvUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n        return new UIManager(player, [{\n          ...modernTvUI(),\n        }], config);\n  }\n\n  export function modernTvUI() {\n    const subtitleListBox = new SubtitleListBox();\n    const subtitleListPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem(null, subtitleListBox),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    const audioTrackListBox = new AudioTrackListBox();\n    const audioTrackListPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem(null, audioTrackListBox),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    const seekBar = new SeekBar({ label: new SeekBarLabel() });\n    const playbackToggleOverlay = new PlaybackToggleOverlay();\n    const subtitleToggleButton = new SettingsToggleButton({\n      settingsPanel: subtitleListPanel,\n      autoHideWhenNoActiveSettings: true,\n      cssClass: 'ui-subtitlesettingstogglebutton',\n      text: i18n.getLocalizer('settings.subtitles'),\n    });\n    const audioToggleButton = new SettingsToggleButton({\n      settingsPanel: audioTrackListPanel,\n      autoHideWhenNoActiveSettings: true,\n      cssClass: 'ui-audiotracksettingstogglebutton',\n      ariaLabel: i18n.getLocalizer('settings.audio.track'),\n      text: i18n.getLocalizer('settings.audio.track'),\n    });\n    const uiContainer = new UIContainer({\n      components: [\n        new SubtitleOverlay(),\n        new BufferingOverlay(),\n        playbackToggleOverlay,\n        new ControlBar({\n          components: [\n            new Container({\n              components: [\n                new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\n                seekBar,\n                new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.RemainingTime, cssClasses: ['text-right'] }),\n              ],\n              cssClasses: ['controlbar-top'],\n            }),\n          ],\n        }),\n        new TitleBar({\n          components: [\n            new Container({\n              components: [\n                new MetadataLabel({ content: MetadataLabelContent.Title }),\n                subtitleToggleButton,\n                audioToggleButton,\n              ],\n              cssClasses: ['ui-titlebar-top'],\n            }),\n            new Container({\n              components: [\n                new MetadataLabel({ content: MetadataLabelContent.Description }),\n                subtitleListPanel,\n                audioTrackListPanel,\n              ],\n              cssClasses: ['ui-titlebar-bottom'],\n            }),\n          ],\n        }),\n        new RecommendationOverlay(),\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: ['ui-skin-tv'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n\n    const spatialNavigation = new SpatialNavigation(\n      new RootNavigationGroup(uiContainer, playbackToggleOverlay, seekBar, audioToggleButton, subtitleToggleButton),\n      new ListNavigationGroup(ListOrientation.Vertical, subtitleListPanel, subtitleListBox),\n      new ListNavigationGroup(ListOrientation.Vertical, audioTrackListPanel, audioTrackListBox),\n    );\n\n    return {\n      ui: uiContainer,\n      spatialNavigation: spatialNavigation,\n    };\n  }\n}\n","import {UIContainer} from './components/uicontainer';\nimport {DOM} from './dom';\nimport {Component, ComponentConfig} from './components/component';\nimport {Container} from './components/container';\nimport { SeekBar, SeekBarMarker } from './components/seekbar';\nimport {NoArgs, EventDispatcher, CancelEventArgs} from './eventdispatcher';\nimport {UIUtils} from './uiutils';\nimport {ArrayUtils} from './arrayutils';\nimport {BrowserUtils} from './browserutils';\nimport { TimelineMarker, UIConfig } from './uiconfig';\nimport { PlayerAPI, PlayerEventCallback, PlayerEventBase, PlayerEvent, AdEvent, LinearAd } from 'bitmovin-player';\nimport { VolumeController } from './volumecontroller';\nimport { i18n, CustomVocabulary, Vocabularies } from './localization/i18n';\nimport { FocusVisibilityTracker } from './focusvisibilitytracker';\nimport { isMobileV3PlayerAPI, MobileV3PlayerAPI, MobileV3PlayerEvent } from './mobilev3playerapi';\nimport { SpatialNavigation } from './spatialnavigation/spatialnavigation';\n\nexport interface LocalizationConfig {\n  /**\n   * Sets the desired language, and falls back to 'en' if there is no vocabulary for the desired language. Setting it\n   * to \"auto\" will enable language detection from the browser's locale.\n   */\n  language?: 'auto' | 'en' | 'de' | string;\n  /**\n   * A map of `language` to {@link CustomVocabulary} definitions. Can be used to overwrite default translations and add\n   * custom strings or additional languages.\n   */\n  vocabularies?: Vocabularies;\n}\n\nexport interface InternalUIConfig extends UIConfig {\n  events: {\n    /**\n     * Fires when the configuration has been updated/changed.\n     */\n    onUpdated: EventDispatcher<UIManager, void>;\n  };\n  volumeController: VolumeController;\n}\n\n/**\n * The context that will be passed to a {@link UIConditionResolver} to determine if it's conditions fulfil the context.\n */\nexport interface UIConditionContext {\n  /**\n   * Tells if the player is loading or playing an ad.\n   */\n  isAd: boolean;\n  /**\n   * Tells if the current ad requires an external UI, if {@link #isAd} is true.\n   */\n  adRequiresUi: boolean;\n  /**\n   * Tells if the player is currently in fullscreen mode.\n   */\n  isFullscreen: boolean;\n  /**\n   * Tells if the UI is running in a mobile browser.\n   */\n  isMobile: boolean;\n  /**\n   * Tells if the player is in playing or paused state.\n   */\n  isPlaying: boolean;\n  /**\n   * The width of the player/UI element.\n   */\n  width: number;\n  /**\n   * The width of the document where the player/UI is embedded in.\n   */\n  documentWidth: number;\n}\n\n/**\n * Resolves the conditions of its associated UI in a {@link UIVariant} upon a {@link UIConditionContext} and decides\n * if the UI should be displayed. If it returns true, the UI is a candidate for display; if it returns false, it will\n * not be displayed in the given context.\n */\nexport interface UIConditionResolver {\n  (context: UIConditionContext): boolean;\n}\n\n/**\n * Associates a UI instance with an optional {@link UIConditionResolver} that determines if the UI should be displayed.\n */\nexport interface UIVariant {\n  ui: UIContainer;\n  condition?: UIConditionResolver;\n  spatialNavigation?: SpatialNavigation;\n}\n\nexport interface ActiveUiChangedArgs extends NoArgs {\n  /**\n   * The previously active {@link UIInstanceManager} prior to the {@link UIManager} switching to a different UI variant.\n   */\n  previousUi: UIInstanceManager;\n  /**\n   * The currently active {@link UIInstanceManager}.\n   */\n  currentUi: UIInstanceManager;\n}\n\nexport class UIManager {\n\n  private player: PlayerAPI;\n  private uiContainerElement: DOM;\n  private uiVariants: UIVariant[];\n  private uiInstanceManagers: InternalUIInstanceManager[];\n  private currentUi: InternalUIInstanceManager;\n  private config: InternalUIConfig; // Conjunction of provided uiConfig and sourceConfig from the player\n  private managerPlayerWrapper: PlayerWrapper;\n  private focusVisibilityTracker: FocusVisibilityTracker;\n\n  private events = {\n    onUiVariantResolve: new EventDispatcher<UIManager, UIConditionContext>(),\n    onActiveUiChanged: new EventDispatcher<UIManager, ActiveUiChangedArgs>(),\n  };\n\n  /**\n   * Creates a UI manager with a single UI variant that will be permanently shown.\n   * @param player the associated player of this UI\n   * @param ui the UI to add to the player\n   * @param uiconfig optional UI configuration\n   */\n  constructor(player: PlayerAPI, ui: UIContainer, uiconfig?: UIConfig);\n  /**\n   * Creates a UI manager with a list of UI variants that will be dynamically selected and switched according to\n   * the context of the UI.\n   *\n   * Every time the UI context changes, the conditions of the UI variants will be sequentially resolved and the first\n   * UI, whose condition evaluates to true, will be selected and displayed. The last variant in the list might omit the\n   * condition resolver and will be selected as default/fallback UI when all other conditions fail. If there is no\n   * fallback UI and all conditions fail, no UI will be displayed.\n   *\n   * @param player the associated player of this UI\n   * @param uiVariants a list of UI variants that will be dynamically switched\n   * @param uiconfig optional UI configuration\n   */\n  constructor(player: PlayerAPI, uiVariants: UIVariant[], uiconfig?: UIConfig);\n  constructor(player: PlayerAPI, playerUiOrUiVariants: UIContainer | UIVariant[], uiconfig: UIConfig = {}) {\n    if (playerUiOrUiVariants instanceof UIContainer) {\n      // Single-UI constructor has been called, transform arguments to UIVariant[] signature\n      let playerUi = <UIContainer>playerUiOrUiVariants;\n      let uiVariants = [];\n\n      // Add the default player UI\n      uiVariants.push({ ui: playerUi });\n\n      this.uiVariants = uiVariants;\n    }\n    else {\n      // Default constructor (UIVariant[]) has been called\n      this.uiVariants = <UIVariant[]>playerUiOrUiVariants;\n    }\n\n    this.player = player;\n    this.managerPlayerWrapper = new PlayerWrapper(player);\n\n    // ensure that at least the metadata object does exist in the uiconfig\n    uiconfig.metadata = uiconfig.metadata ? uiconfig.metadata : {};\n\n    this.config = {\n      playbackSpeedSelectionEnabled: true, // Switch on speed selector by default\n      autoUiVariantResolve: true, // Switch on auto UI resolving by default\n      disableAutoHideWhenHovered: false, // Disable auto hide when UI is hovered\n      enableSeekPreview: true,\n      ...uiconfig,\n      events: {\n        onUpdated: new EventDispatcher<UIManager, void>(),\n      },\n      volumeController: new VolumeController(this.managerPlayerWrapper.getPlayer()),\n    };\n\n    /**\n     * Gathers configuration data from the UI config and player source config and creates a merged UI config\n     * that is used throughout the UI instance.\n     */\n    const updateConfig = () => {\n      const playerSourceConfig = player.getSource() || {};\n      this.config.metadata = JSON.parse(JSON.stringify(uiconfig.metadata || {}));\n\n      // Extract the UI-related config properties from the source config\n      const playerSourceUiConfig: UIConfig = {\n        metadata: {\n          // TODO move metadata into source.metadata namespace in player v8\n          title: playerSourceConfig.title,\n          description: playerSourceConfig.description,\n          markers: (playerSourceConfig as any).markers,\n        },\n        recommendations: (playerSourceConfig as any).recommendations,\n      };\n\n      // Player source config takes precedence over the UI config, because the config in the source is attached\n      // to a source which changes with every player.load, whereas the UI config stays the same for the whole\n      // lifetime of the player instance.\n      this.config.metadata.title = playerSourceUiConfig.metadata.title || uiconfig.metadata.title;\n      this.config.metadata.description = playerSourceUiConfig.metadata.description || uiconfig.metadata.description;\n      this.config.metadata.markers = playerSourceUiConfig.metadata.markers || uiconfig.metadata.markers || [];\n      this.config.recommendations = playerSourceUiConfig.recommendations || uiconfig.recommendations || [];\n    };\n\n    updateConfig();\n\n    // Update the source configuration when a new source is loaded and dispatch onUpdated\n    const updateSource = () => {\n      updateConfig();\n      this.config.events.onUpdated.dispatch(this);\n    };\n\n    const wrappedPlayer = this.managerPlayerWrapper.getPlayer();\n\n    wrappedPlayer.on(this.player.exports.PlayerEvent.SourceLoaded, updateSource);\n\n    // The PlaylistTransition event is only available on Mobile v3 for now.\n    // This event is fired when a new source becomes active in the player.\n    if (isMobileV3PlayerAPI(wrappedPlayer)) {\n      wrappedPlayer.on(MobileV3PlayerEvent.PlaylistTransition, updateSource);\n    }\n\n    if (uiconfig.container) {\n      // Unfortunately \"uiContainerElement = new DOM(config.container)\" will not accept the container with\n      // string|HTMLElement type directly, although it accepts both types, so we need to spit these two cases up here.\n      // TODO check in upcoming TS versions if the container can be passed in directly, or fix the constructor\n      this.uiContainerElement = uiconfig.container instanceof HTMLElement ?\n        new DOM(uiconfig.container) : new DOM(uiconfig.container);\n    } else {\n      this.uiContainerElement = new DOM(player.getContainer());\n    }\n\n    // Create UI instance managers for the UI variants\n    // The instance managers map to the corresponding UI variants by their array index\n    this.uiInstanceManagers = [];\n    let uiVariantsWithoutCondition = [];\n    for (let uiVariant of this.uiVariants) {\n      if (uiVariant.condition == null) {\n        // Collect variants without conditions for error checking\n        uiVariantsWithoutCondition.push(uiVariant);\n      }\n      // Create the instance manager for a UI variant\n      this.uiInstanceManagers.push(new InternalUIInstanceManager(\n        player,\n        uiVariant.ui,\n        this.config,\n        uiVariant.spatialNavigation,\n      ));\n    }\n    // Make sure that there is only one UI variant without a condition\n    // It does not make sense to have multiple variants without condition, because only the first one in the list\n    // (the one with the lowest index) will ever be selected.\n    if (uiVariantsWithoutCondition.length > 1) {\n      throw Error('Too many UIs without a condition: You cannot have more than one default UI');\n    }\n    // Make sure that the default UI variant, if defined, is at the end of the list (last index)\n    // If it comes earlier, the variants with conditions that come afterwards will never be selected because the\n    // default variant without a condition always evaluates to 'true'\n    if (uiVariantsWithoutCondition.length > 0\n      && uiVariantsWithoutCondition[0] !== this.uiVariants[this.uiVariants.length - 1]) {\n      throw Error('Invalid UI variant order: the default UI (without condition) must be at the end of the list');\n    }\n\n    let adStartedEvent: AdEvent = null; // keep the event stored here during ad playback\n\n    // Dynamically select a UI variant that matches the current UI condition.\n    let resolveUiVariant = (event: PlayerEventBase) => {\n      // Make sure that the AdStarted event data is persisted through ad playback in case other events happen\n      // in the meantime, e.g. player resize. We need to store this data because there is no other way to find out\n      // ad details while an ad is playing (in v8.0 at least; from v8.1 there will be ads.getActiveAd()).\n      // Existing event data signals that an ad is currently active (instead of ads.isLinearAdActive()).\n      if (event != null) {\n        switch (event.type) {\n          // The ads UI is shown upon the first AdStarted event. Subsequent AdStarted events within an ad break\n          // will not change the condition context and thus not lead to undesired UI variant resolving.\n          // The ads UI is shown upon AdStarted instead of AdBreakStarted because there can be a loading delay\n          // between these two events in the player, and the AdBreakStarted event does not carry any metadata to\n          // initialize the ads UI, so it would be rendered in an uninitialized state for a certain amount of time.\n          // TODO show ads UI upon AdBreakStarted and display loading overlay between AdBreakStarted and first AdStarted\n          // TODO display loading overlay between AdFinished and next AdStarted\n          case player.exports.PlayerEvent.AdStarted:\n            adStartedEvent = event as AdEvent;\n            break;\n          // The ads UI is hidden only when the ad break is finished, i.e. not on AdFinished events. This way we keep\n          // the ads UI variant active throughout an ad break, as reacting to AdFinished would lead to undesired UI\n          // variant switching between two ads in an ad break, e.g. ads UI -> AdFinished -> content UI ->\n          // AdStarted -> ads UI.\n          case player.exports.PlayerEvent.AdBreakFinished:\n            adStartedEvent = null;\n            // When switching to a variant for the first time, a config.events.onUpdated event is fired to trigger a UI\n            // update of the new variant, because most components subscribe to this event to update themselves. When\n            // switching to the ads UI on the first AdStarted, all UI variants update themselves with the ad data, so\n            // when switching back to the \"normal\" UI it will carry properties of the ad instead of the main content.\n            // We thus fire this event here to force an UI update with the properties of the main content. This is\n            // basically a hack because the config.events.onUpdated event is abused in many places and not just used\n            // for config updates (e.g. adding a marker to the seekbar).\n            // TODO introduce an event that is fired when the playback content is updated, a switch to/from ads\n            this.config.events.onUpdated.dispatch(this);\n            break;\n          // When a new source is loaded during ad playback, there will be no Ad(Break)Finished event\n          case player.exports.PlayerEvent.SourceLoaded:\n          case player.exports.PlayerEvent.SourceUnloaded:\n            adStartedEvent = null;\n            break;\n        }\n      }\n\n      // Detect if an ad has started\n      let isAd = adStartedEvent != null;\n      let adRequiresUi = false;\n      if (isAd) {\n        let ad = adStartedEvent.ad;\n        // for now only linear ads can request a UI\n        if (ad.isLinear) {\n          let linearAd = ad as LinearAd;\n          adRequiresUi = linearAd.uiConfig && linearAd.uiConfig.requestsUi || false;\n        }\n      }\n\n      if (adRequiresUi) {\n        // we dispatch onUpdated event because if there are multiple adBreaks for same position\n        // `Play` and `Playing` events will not be dispatched which will cause `PlaybackButton` state\n        // to be out of sync\n        this.config.events.onUpdated.dispatch(this);\n      }\n\n      this.resolveUiVariant({\n        isAd: isAd,\n        adRequiresUi: adRequiresUi,\n      }, (context) => {\n        // If this is an ad UI, we need to relay the saved ON_AD_STARTED event data so ad components can configure\n        // themselves for the current ad.\n        if (context.isAd) {\n          /* Relay the ON_AD_STARTED event to the ads UI\n           *\n           * Because the ads UI is initialized in the ON_AD_STARTED handler, i.e. when the ON_AD_STARTED event has\n           * already been fired, components in the ads UI that listen for the ON_AD_STARTED event never receive it.\n           * Since this can break functionality of components that rely on this event, we relay the event to the\n           * ads UI components with the following call.\n           */\n          this.currentUi.getWrappedPlayer().fireEventInUI(this.player.exports.PlayerEvent.AdStarted, adStartedEvent);\n        }\n      });\n    };\n\n    // Listen to the following events to trigger UI variant resolution\n    if (this.config.autoUiVariantResolve) {\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.SourceLoaded, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.SourceUnloaded, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.Play, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.Paused, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.AdStarted, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.AdBreakFinished, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.PlayerResized, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.ViewModeChanged, resolveUiVariant);\n    }\n\n    this.focusVisibilityTracker = new FocusVisibilityTracker('{{PREFIX}}');\n\n    // Initialize the UI\n    resolveUiVariant(null);\n  }\n\n  /**\n   * Exposes i18n.getLocalizer() function\n   * @returns {I18nApi.getLocalizer()}\n   */\n  static localize<V extends CustomVocabulary<Record<string, string>>>(key: keyof V) {\n    return i18n.getLocalizer(key);\n  }\n\n  /**\n   * Provide configuration to support Custom UI languages\n   * default language: 'en'\n   */\n  static setLocalizationConfig(localizationConfig: LocalizationConfig) {\n    i18n.setConfig(localizationConfig);\n  }\n\n  getConfig(): UIConfig {\n    return this.config;\n  }\n\n  /**\n   * Returns the list of UI variants as passed into the constructor of {@link UIManager}.\n   * @returns {UIVariant[]} the list of available UI variants\n   */\n  getUiVariants(): UIVariant[] {\n    return this.uiVariants;\n  }\n\n  /**\n   * Switches to a UI variant from the list returned by {@link getUiVariants}.\n   * @param {UIVariant} uiVariant the UI variant to switch to\n   * @param {() => void} onShow a callback that is executed just before the new UI variant is shown\n   */\n  switchToUiVariant(uiVariant: UIVariant, onShow?: () => void): void {\n    let uiVariantIndex = this.uiVariants.indexOf(uiVariant);\n\n    const previousUi = this.currentUi;\n    const nextUi: InternalUIInstanceManager = this.uiInstanceManagers[uiVariantIndex];\n    // Determine if the UI variant is changing\n    // Only if the UI variant is changing, we need to do some stuff. Else we just leave everything as-is.\n    if (nextUi === this.currentUi) {\n      return;\n      // console.log('switched from ', this.currentUi ? this.currentUi.getUI() : 'none',\n      //   ' to ', nextUi ? nextUi.getUI() : 'none');\n    }\n\n    // Hide the currently active UI variant\n    if (this.currentUi) {\n      this.currentUi.getUI().hide();\n    }\n\n    // Assign the new UI variant as current UI\n    this.currentUi = nextUi;\n\n    // When we switch to a different UI instance, there's some additional stuff to manage. If we do not switch\n    // to an instance, we're done here.\n    if (this.currentUi == null) {\n      return;\n    }\n    // Add the UI to the DOM (and configure it) the first time it is selected\n    if (!this.currentUi.isConfigured()) {\n      this.addUi(this.currentUi);\n      // ensure that the internal state is ready for the upcoming show call\n      if (!this.currentUi.getUI().isHidden()) {\n        this.currentUi.getUI().hide();\n      }\n    }\n    if (onShow) {\n      onShow();\n    }\n    this.currentUi.getUI().show();\n    this.events.onActiveUiChanged.dispatch(this, { previousUi, currentUi: nextUi });\n  }\n\n  /**\n   * Triggers a UI variant switch as triggered by events when automatic switching is enabled. It allows to overwrite\n   * properties of the {@link UIConditionContext}.\n   * @param {Partial<UIConditionContext>} context an optional set of properties that overwrite properties of the\n   *   automatically determined context\n   * @param {(context: UIConditionContext) => void} onShow a callback that is executed just before the new UI variant\n   *   is shown (if a switch is happening)\n   */\n  resolveUiVariant(context: Partial<UIConditionContext> = {}, onShow?: (context: UIConditionContext) => void): void {\n    // Determine the current context for which the UI variant will be resolved\n    const defaultContext: UIConditionContext = {\n      isAd: false,\n      adRequiresUi: false,\n      isFullscreen: this.player.getViewMode() === this.player.exports.ViewMode.Fullscreen,\n      isMobile: BrowserUtils.isMobile,\n      isPlaying: this.player.isPlaying(),\n      width: this.uiContainerElement.width(),\n      documentWidth: document.body.clientWidth,\n    };\n\n    // Overwrite properties of the default context with passed in context properties\n    const switchingContext = { ...defaultContext, ...context };\n\n    // Fire the event and allow modification of the context before it is used to resolve the UI variant\n    this.events.onUiVariantResolve.dispatch(this, switchingContext);\n\n    let nextUiVariant: UIVariant = null;\n\n    // Select new UI variant\n    // If no variant condition is fulfilled, we switch to *no* UI\n    for (let uiVariant of this.uiVariants) {\n      const matchesCondition = uiVariant.condition == null || uiVariant.condition(switchingContext) === true;\n      if (nextUiVariant == null && matchesCondition) {\n        nextUiVariant = uiVariant;\n      } else {\n        // hide all UIs besides the one which should be active\n        uiVariant.ui.hide();\n      }\n    }\n\n    this.switchToUiVariant(nextUiVariant, () => {\n      if (onShow) {\n        onShow(switchingContext);\n      }\n    });\n  }\n\n  private addUi(ui: InternalUIInstanceManager): void {\n    let dom = ui.getUI().getDomElement();\n    let player = ui.getWrappedPlayer();\n\n    ui.configureControls();\n    /* Append the UI DOM after configuration to avoid CSS transitions at initialization\n     * Example: Components are hidden during configuration and these hides may trigger CSS transitions that are\n     * undesirable at this time. */\n    this.uiContainerElement.append(dom);\n\n    // When the UI is loaded after a source was loaded, we need to tell the components to initialize themselves\n    if (player.getSource()) {\n      this.config.events.onUpdated.dispatch(this);\n    }\n\n    // Fire onConfigured after UI DOM elements are successfully added. When fired immediately, the DOM elements\n    // might not be fully configured and e.g. do not have a size.\n    // https://swizec.com/blog/how-to-properly-wait-for-dom-elements-to-show-up-in-modern-browsers/swizec/6663\n    if (window.requestAnimationFrame) {\n      requestAnimationFrame(() => { ui.onConfigured.dispatch(ui.getUI()); });\n    } else {\n      // IE9 fallback\n      setTimeout(() => { ui.onConfigured.dispatch(ui.getUI()); }, 0);\n    }\n  }\n\n  private releaseUi(ui: InternalUIInstanceManager): void {\n    ui.releaseControls();\n\n    const uiContainer = ui.getUI();\n    if (uiContainer.hasDomElement()) {\n      uiContainer.getDomElement().remove();\n    }\n\n    ui.clearEventHandlers();\n  }\n\n  release(): void {\n    for (let uiInstanceManager of this.uiInstanceManagers) {\n      this.releaseUi(uiInstanceManager);\n    }\n    this.managerPlayerWrapper.clearEventHandlers();\n    this.focusVisibilityTracker.release();\n  }\n\n  /**\n   * Fires just before UI variants are about to be resolved and the UI variant is possibly switched. It is fired when\n   * the switch is triggered from an automatic switch and when calling {@link resolveUiVariant}.\n   * Can be used to modify the {@link UIConditionContext} before resolving is done.\n   * @returns {EventDispatcher<UIManager, UIConditionContext>}\n   */\n  get onUiVariantResolve(): EventDispatcher<UIManager, UIConditionContext> {\n    return this.events.onUiVariantResolve;\n  }\n\n  /**\n   * Fires after the UIManager has switched to a different UI variant.\n   * @returns {EventDispatcher<UIManager, ActiveUiChangedArgs>}\n   */\n  get onActiveUiChanged(): EventDispatcher<UIManager, ActiveUiChangedArgs> {\n    return this.events.onActiveUiChanged;\n  }\n\n  /**\n   * The current active {@link UIInstanceManager}.\n   */\n  get activeUi(): UIInstanceManager {\n    return this.currentUi;\n  }\n\n  /**\n   * Returns the list of all added markers in undefined order.\n   */\n  getTimelineMarkers(): TimelineMarker[] {\n    return this.config.metadata.markers;\n  }\n\n  /**\n   * Adds a marker to the timeline. Does not check for duplicates/overlaps at the `time`.\n   */\n  addTimelineMarker(timelineMarker: TimelineMarker): void {\n    this.config.metadata.markers.push(timelineMarker);\n    this.config.events.onUpdated.dispatch(this);\n  }\n\n  /**\n   * Removes a marker from the timeline (by reference) and returns `true` if the marker has\n   * been part of the timeline and successfully removed, or `false` if the marker could not\n   * be found and thus not removed.\n   */\n  removeTimelineMarker(timelineMarker: TimelineMarker): boolean {\n    if (ArrayUtils.remove(this.config.metadata.markers, timelineMarker) === timelineMarker) {\n      this.config.events.onUpdated.dispatch(this);\n      return true;\n    }\n\n    return false;\n  }\n}\n\nexport interface SeekPreviewArgs extends NoArgs {\n  /**\n   * The timeline position in percent where the event originates from.\n   */\n  position: number;\n  /**\n   * The timeline marker associated with the current position, if existing.\n   */\n  marker?: SeekBarMarker;\n}\n\n/**\n * Encapsulates functionality to manage a UI instance. Used by the {@link UIManager} to manage multiple UI instances.\n */\nexport class UIInstanceManager {\n  private playerWrapper: PlayerWrapper;\n  private ui: UIContainer;\n  private config: InternalUIConfig;\n  protected spatialNavigation?: SpatialNavigation;\n\n  private events = {\n    onConfigured: new EventDispatcher<UIContainer, NoArgs>(),\n    onSeek: new EventDispatcher<SeekBar, NoArgs>(),\n    onSeekPreview: new EventDispatcher<SeekBar, SeekPreviewArgs>(),\n    onSeeked: new EventDispatcher<SeekBar, NoArgs>(),\n    onComponentShow: new EventDispatcher<Component<ComponentConfig>, NoArgs>(),\n    onComponentHide: new EventDispatcher<Component<ComponentConfig>, NoArgs>(),\n    onControlsShow: new EventDispatcher<UIContainer, NoArgs>(),\n    onPreviewControlsHide: new EventDispatcher<UIContainer, CancelEventArgs>(),\n    onControlsHide: new EventDispatcher<UIContainer, NoArgs>(),\n    onRelease: new EventDispatcher<UIContainer, NoArgs>(),\n  };\n\n  constructor(player: PlayerAPI, ui: UIContainer, config: InternalUIConfig, spatialNavigation?: SpatialNavigation) {\n    this.playerWrapper = new PlayerWrapper(player);\n    this.ui = ui;\n    this.config = config;\n    this.spatialNavigation = spatialNavigation;\n  }\n\n  getConfig(): InternalUIConfig {\n    return this.config;\n  }\n\n  getUI(): UIContainer {\n    return this.ui;\n  }\n\n  getPlayer(): PlayerAPI {\n    return this.playerWrapper.getPlayer();\n  }\n\n  /**\n   * Fires when the UI is fully configured and added to the DOM.\n   * @returns {EventDispatcher}\n   */\n  get onConfigured(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onConfigured;\n  }\n\n  /**\n   * Fires when a seek starts.\n   * @returns {EventDispatcher}\n   */\n  get onSeek(): EventDispatcher<SeekBar, NoArgs> {\n    return this.events.onSeek;\n  }\n\n  /**\n   * Fires when the seek timeline is scrubbed.\n   * @returns {EventDispatcher}\n   */\n  get onSeekPreview(): EventDispatcher<SeekBar, SeekPreviewArgs> {\n    return this.events.onSeekPreview;\n  }\n\n  /**\n   * Fires when a seek is finished.\n   * @returns {EventDispatcher}\n   */\n  get onSeeked(): EventDispatcher<SeekBar, NoArgs> {\n    return this.events.onSeeked;\n  }\n\n  /**\n   * Fires when a component is showing.\n   * @returns {EventDispatcher}\n   */\n  get onComponentShow(): EventDispatcher<Component<ComponentConfig>, NoArgs> {\n    return this.events.onComponentShow;\n  }\n\n  /**\n   * Fires when a component is hiding.\n   * @returns {EventDispatcher}\n   */\n  get onComponentHide(): EventDispatcher<Component<ComponentConfig>, NoArgs> {\n    return this.events.onComponentHide;\n  }\n\n  /**\n   * Fires when the UI controls are showing.\n   * @returns {EventDispatcher}\n   */\n  get onControlsShow(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onControlsShow;\n  }\n\n  /**\n   * Fires before the UI controls are hiding to check if they are allowed to hide.\n   * @returns {EventDispatcher}\n   */\n  get onPreviewControlsHide(): EventDispatcher<UIContainer, CancelEventArgs> {\n    return this.events.onPreviewControlsHide;\n  }\n\n  /**\n   * Fires when the UI controls are hiding.\n   * @returns {EventDispatcher}\n   */\n  get onControlsHide(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onControlsHide;\n  }\n\n  /**\n   * Fires when the UI controls are released.\n   * @returns {EventDispatcher}\n   */\n  get onRelease(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onRelease;\n  }\n\n  protected clearEventHandlers(): void {\n    this.playerWrapper.clearEventHandlers();\n\n    let events = <any>this.events; // avoid TS7017\n    for (let event in events) {\n      let dispatcher = <EventDispatcher<Object, Object>>events[event];\n      dispatcher.unsubscribeAll();\n    }\n  }\n}\n\n/**\n * Extends the {@link UIInstanceManager} for internal use in the {@link UIManager} and provides access to functionality\n * that components receiving a reference to the {@link UIInstanceManager} should not have access to.\n */\nclass InternalUIInstanceManager extends UIInstanceManager {\n\n  private configured: boolean;\n  private released: boolean;\n\n  getWrappedPlayer(): WrappedPlayer {\n    // TODO find a non-hacky way to provide the WrappedPlayer to the UIManager without exporting it\n    // getPlayer() actually returns the WrappedPlayer but its return type is set to Player so the WrappedPlayer does\n    // not need to be exported\n    return <WrappedPlayer>this.getPlayer();\n  }\n\n  configureControls(): void {\n    this.configureControlsTree(this.getUI());\n    this.configured = true;\n  }\n\n  isConfigured(): boolean {\n    return this.configured;\n  }\n\n  private configureControlsTree(component: Component<ComponentConfig>) {\n    let configuredComponents: Component<ComponentConfig>[] = [];\n\n    UIUtils.traverseTree(component, (component) => {\n      // First, check if we have already configured a component, and throw an error if we did. Multiple configuration\n      // of the same component leads to unexpected UI behavior. Also, a component that is in the UI tree multiple\n      // times hints at a wrong UI structure.\n      // We could just skip configuration in such a case and not throw an exception, but enforcing a clean UI tree\n      // seems like the better choice.\n      for (let configuredComponent of configuredComponents) {\n        if (configuredComponent === component) {\n          // Write the component to the console to simplify identification of the culprit\n          // (e.g. by inspecting the config)\n          if (console) {\n            console.error('Circular reference in UI tree', component);\n          }\n\n          // Additionally throw an error, because this case must not happen and leads to unexpected UI behavior.\n          throw Error('Circular reference in UI tree: ' + component.constructor.name);\n        }\n      }\n\n      component.initialize();\n      component.configure(this.getPlayer(), this);\n      configuredComponents.push(component);\n    });\n  }\n\n  releaseControls(): void {\n    // Do not call release methods if the components have never been configured; this can result in exceptions\n    if (this.configured) {\n      this.onRelease.dispatch(this.getUI());\n      this.releaseControlsTree(this.getUI());\n      this.configured = false;\n    }\n    this.spatialNavigation?.release();\n    this.released = true;\n  }\n\n  isReleased(): boolean {\n    return this.released;\n  }\n\n  private releaseControlsTree(component: Component<ComponentConfig>) {\n    component.release();\n\n    if (component instanceof Container) {\n      for (let childComponent of component.getComponents()) {\n        this.releaseControlsTree(childComponent);\n      }\n    }\n  }\n\n  clearEventHandlers(): void {\n    super.clearEventHandlers();\n  }\n}\n\n/**\n * Extended interface of the {@link Player} for use in the UI.\n */\nexport interface WrappedPlayer extends PlayerAPI {\n  /**\n   * Fires an event on the player that targets all handlers in the UI but never enters the real player.\n   * @param event the event to fire\n   * @param data data to send with the event\n   */\n  fireEventInUI(event: PlayerEvent, data: {}): void;\n}\n\n/**\n * Wraps the player to track event handlers and provide a simple method to remove all registered event\n * handlers from the player.\n */\nexport class PlayerWrapper {\n\n  private player: PlayerAPI;\n  private wrapper: WrappedPlayer;\n\n  private eventHandlers: { [eventType: string]: PlayerEventCallback[]; } = {};\n\n  constructor(player: PlayerAPI) {\n    this.player = player;\n\n    // Collect all members of the player (public API methods and properties of the player)\n    const objectProtoPropertyNames = Object.getOwnPropertyNames(Object.getPrototypeOf({}));\n    const namesToIgnore = ['constructor', ...objectProtoPropertyNames];\n    const members = getAllPropertyNames(player).filter(name => namesToIgnore.indexOf(name) === -1);\n    // Split the members into methods and properties\n    let methods = <any[]>[];\n    let properties = <any[]>[];\n\n    for (let member of members) {\n      if (typeof (<any>player)[member] === 'function') {\n        methods.push(member);\n      } else {\n        properties.push(member);\n      }\n    }\n\n    // Create wrapper object\n    let wrapper = <any>{};\n\n    // Add function wrappers for all API methods that do nothing but calling the base method on the player\n    for (let method of methods) {\n      wrapper[method] = function() {\n        // console.log('called ' + member); // track method calls on the player\n        return (<any>player)[method].apply(player, arguments);\n      };\n    }\n\n    // Add all public properties of the player to the wrapper\n    for (let property of properties) {\n      // Get an eventually existing property descriptor to differentiate between plain properties and properties with\n      // getters/setters.\n      const propertyDescriptor = ((target: PlayerAPI) => {\n        while (target) {\n          const propertyDescriptor = Object.getOwnPropertyDescriptor(target, property);\n          if (propertyDescriptor) {\n            return propertyDescriptor;\n          }\n          // Check if the PropertyDescriptor exists on a child prototype in case we have an inheritance of the player\n          target = Object.getPrototypeOf(target);\n        }\n      })(player);\n\n      // If the property has getters/setters, wrap them accordingly...\n      if (propertyDescriptor && (propertyDescriptor.get || propertyDescriptor.set)) {\n        Object.defineProperty(wrapper, property, {\n          get: () => propertyDescriptor.get.call(player),\n          set: (value: any) => propertyDescriptor.set.call(player, value),\n        });\n      }\n      // ... else just transfer the property to the wrapper\n      else {\n        wrapper[property] = (<any>player)[property];\n      }\n    }\n\n    // Explicitly add a wrapper method for 'on' that adds added event handlers to the event list\n    wrapper.on = (eventType: PlayerEvent, callback: PlayerEventCallback) => {\n      player.on(eventType, callback);\n\n      if (!this.eventHandlers[eventType]) {\n        this.eventHandlers[eventType] = [];\n      }\n\n      this.eventHandlers[eventType].push(callback);\n\n      return wrapper;\n    };\n\n    // Explicitly add a wrapper method for 'off' that removes removed event handlers from the event list\n    wrapper.off = (eventType: PlayerEvent, callback: PlayerEventCallback) => {\n      player.off(eventType, callback);\n\n      if (this.eventHandlers[eventType]) {\n        ArrayUtils.remove(this.eventHandlers[eventType], callback);\n      }\n\n      return wrapper;\n    };\n\n    wrapper.fireEventInUI = (event: PlayerEvent, data: {}) => {\n      if (this.eventHandlers[event]) { // check if there are handlers for this event registered\n        // Extend the data object with default values to convert it to a {@link PlayerEventBase} object.\n        let playerEventData = <PlayerEventBase>Object.assign({}, {\n          timestamp: Date.now(),\n          type: event,\n          // Add a marker property so the UI can detect UI-internal player events\n          uiSourced: true,\n        }, data);\n\n        // Execute the registered callbacks\n        for (let callback of this.eventHandlers[event]) {\n          callback(playerEventData);\n        }\n      }\n    };\n\n    this.wrapper = <WrappedPlayer>wrapper;\n  }\n\n  /**\n   * Returns a wrapped player object that can be used on place of the normal player object.\n   * @returns {WrappedPlayer} a wrapped player\n   */\n  getPlayer(): WrappedPlayer {\n    return this.wrapper;\n  }\n\n  /**\n   * Clears all registered event handlers from the player that were added through the wrapped player.\n   */\n  clearEventHandlers(): void {\n    try {\n      // Call the player API to check if the instance is still valid or already destroyed.\n      // This can be any call throwing the PlayerAPINotAvailableError when the player instance is destroyed.\n      this.player.getSource();\n    } catch (error) {\n      if (error instanceof this.player.exports.PlayerAPINotAvailableError) {\n        // We have detected that the player instance is already destroyed, so we clear the event handlers to avoid\n        // event handler unsubscription attempts (which would result in PlayerAPINotAvailableError errors).\n        this.eventHandlers = {};\n      }\n    }\n\n    for (let eventType in this.eventHandlers) {\n      for (let callback of this.eventHandlers[eventType]) {\n        this.player.off(eventType as PlayerEvent, callback);\n      }\n    }\n  }\n}\n\nfunction getAllPropertyNames(target: Object): string[] {\n  let names: string[] = [];\n\n  while (target) {\n    const newNames = Object.getOwnPropertyNames(target).filter(name => names.indexOf(name) === -1);\n    names = names.concat(newNames);\n    // go up prototype chain\n    target = Object.getPrototypeOf(target);\n  }\n\n  return names;\n}\n","import {Component, ComponentConfig} from './components/component';\nimport {Container} from './components/container';\n\nexport namespace UIUtils {\n  export interface TreeTraversalCallback {\n    (component: Component<ComponentConfig>, parent?: Component<ComponentConfig>): void;\n  }\n\n  export function traverseTree(component: Component<ComponentConfig>, visit: TreeTraversalCallback): void {\n    let recursiveTreeWalker = (component: Component<ComponentConfig>, parent?: Component<ComponentConfig>) => {\n      visit(component, parent);\n\n      // If the current component is a container, visit it's children\n      if (component instanceof Container) {\n        for (let childComponent of component.getComponents()) {\n          recursiveTreeWalker(childComponent, component);\n        }\n      }\n    };\n\n    // Walk and configure the component tree\n    recursiveTreeWalker(component);\n  }\n\n  // From: https://github.com/nfriend/ts-keycode-enum/blob/master/Key.enum.ts\n  export enum KeyCode {\n    LeftArrow = 37,\n    UpArrow = 38,\n    RightArrow = 39,\n    DownArrow = 40,\n    Space = 32,\n    End = 35,\n    Home = 36,\n  }\n}\n","import { Event, EventDispatcher } from './eventdispatcher';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport interface VolumeSettingChangedArgs {\n  volume: number;\n  muted: boolean;\n}\n\n/**\n * Can be used to centrally manage and control the volume and mute state of the player from multiple components.\n */\nexport class VolumeController {\n\n  private static readonly issuerName = 'ui-volumecontroller';\n\n  private readonly events = {\n    onChanged: new EventDispatcher<VolumeController, VolumeSettingChangedArgs>(),\n  };\n\n  private storedVolume: number;\n\n  constructor(private readonly player: PlayerAPI) {\n    this.storeVolume();\n\n    const handler = () => {\n      this.onChangedEvent();\n    };\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, handler);\n    player.on(player.exports.PlayerEvent.VolumeChanged, handler);\n    player.on(player.exports.PlayerEvent.Muted, handler);\n    player.on(player.exports.PlayerEvent.Unmuted, handler);\n  }\n\n  setVolume(volume: number): void {\n    this.player.setVolume(volume, VolumeController.issuerName);\n  }\n\n  getVolume(): number {\n    return this.player.getVolume();\n  }\n\n  setMuted(muted: boolean): void {\n    if (muted) {\n      this.player.mute(VolumeController.issuerName);\n    } else {\n      this.player.unmute(VolumeController.issuerName);\n    }\n  }\n\n  toggleMuted(): void {\n    if (this.isMuted() || this.getVolume() === 0) {\n      // Unmuting from the mute or zero-volume state recalls the previously saved volume setting. Setting the\n      // volume automatically unmutes the player in v7.\n      this.recallVolume();\n    } else {\n      this.setMuted(true);\n    }\n  }\n\n  isMuted(): boolean {\n    return this.player.isMuted();\n  }\n\n  /**\n   * Stores (saves) the current volume so it can later be restored with {@link recallVolume}.\n   */\n  storeVolume(): void {\n    this.storedVolume = this.getVolume();\n  }\n\n  /**\n   * Recalls (sets) the volume previously stored with {@link storeVolume}.\n   */\n  recallVolume(): void {\n    this.setMuted(this.storedVolume === 0);\n    this.setVolume(this.storedVolume);\n  }\n\n  startTransition(): VolumeTransition {\n    return new VolumeTransition(this);\n  }\n\n  onChangedEvent() {\n    const playerMuted = this.isMuted();\n    const playerVolume = this.getVolume();\n\n    const uiMuted = playerMuted || playerVolume === 0;\n    const uiVolume = playerMuted ? 0 : playerVolume;\n\n    this.storeVolume();\n\n    this.events.onChanged.dispatch(this, { volume: uiVolume, muted: uiMuted });\n  }\n\n  /**\n   * Gets the event that is fired when the volume settings have changed.\n   */\n  get onChanged(): Event<VolumeController, VolumeSettingChangedArgs> {\n    return this.events.onChanged.getEvent();\n  }\n}\n\nexport class VolumeTransition {\n\n  constructor(private controller: VolumeController) {\n    // Store the volume at the beginning of a volume change so we can recall it later in case we set the volume to\n    // zero and actually mute the player.\n    controller.storeVolume();\n  }\n\n  update(volume: number): void {\n    // Update the volume while transitioning so the user has a \"live preview\" of the desired target volume\n    this.controller.setMuted(false);\n    this.controller.setVolume(volume);\n  }\n\n  finish(volume: number): void {\n    if (volume === 0) {\n      // When the volume is zero we essentially mute the volume so we recall the volume from the beginning of the\n      // transition and mute the player instead. Recalling is necessary to return to the actual audio volume\n      // when unmuting.\n      // We must first recall the volume and then mute, because recalling sets the volume on the player\n      // and setting a player volume > 0 unmutes the player in v7.\n      this.controller.recallVolume();\n      this.controller.setMuted(true);\n    } else {\n      this.controller.setMuted(false);\n      this.controller.setVolume(volume);\n      this.controller.storeVolume();\n    }\n  }\n}","import { SubtitleRegionContainer, SubtitleLabel } from './components/subtitleoverlay';\nimport { VTTProperties, VTTRegionProperties } from 'bitmovin-player/types/subtitles/vtt/API';\nimport { DOM, Size } from './dom';\n\n// Our default height of a line\nconst lineHeight = 28;\n\n// Default relative line height\nconst lineHeightPercent = 5;\nlet lineCount: number = 1;\n\nconst defaultLineNumber = 21; // Our default amount of lines\n\nenum Direction {\n  Top = 'top',\n  Bottom = 'bottom',\n  Left = 'left',\n  Right = 'right',\n}\n\nenum VttVerticalWriting {\n  GrowingRight = 'lr',\n  GrowingLeft = 'rl',\n}\n\ntype VerticalWritingDirection = Direction.Left | Direction.Right;\n\nconst DirectionPair = new Map<Direction, Direction>([\n  [Direction.Top, Direction.Bottom],\n  [Direction.Bottom, Direction.Top],\n  [Direction.Left, Direction.Right],\n  [Direction.Right, Direction.Left],\n]);\n\n/**\n * Sets the default standardized styles for the Cue Box\n * https://w3.org/TR/webvtt1/#applying-css-properties\n */\nconst setDefaultVttStyles = (cueContainerDom: DOM, vtt: VTTProperties) => {\n  if (vtt.region) {\n    cueContainerDom.css('position', 'relative');\n    cueContainerDom.css('unicode-bidi', 'plaintext');\n  } else {\n    cueContainerDom.css('position', 'absolute');\n    cueContainerDom.css('overflow-wrap', 'break-word');\n    cueContainerDom.css('overflow', 'hidden');\n    cueContainerDom.css('flex-flow', 'column');\n  }\n  cueContainerDom.css('display', 'inline-flex');\n};\n\n/**\n * Align the Cue Box's line\n * https://w3.org/TR/webvtt1/#webvtt-cue-line-alignment\n */\nconst setVttLineAlign = (\n  cueContainerDom: DOM,\n  { lineAlign }: VTTProperties,\n  direction: Direction,\n  relativeCueBoxPosition: number) => {\n  switch (lineAlign) {\n    case 'center':\n      setCssForCenterLineAlign(\n        cueContainerDom, direction, relativeCueBoxPosition);\n      break;\n    case 'end':\n      setCssForEndLineAlign(\n        cueContainerDom, direction, relativeCueBoxPosition);\n  }\n};\n\n/**\n * Defines the line positioning of the Cue Box\n * https://w3.org/TR/webvtt1/#webvtt-cue-line\n */\nconst setVttLine = (\n  cueContainerDom: DOM,\n  vtt: VTTProperties,\n  direction: Direction,\n  subtitleOverLaySize: Size,\n) => {\n  const overlayReferenceEdge = DirectionPair.get(direction);\n  if (vtt.line === 'auto' && vtt.vertical) {\n    cueContainerDom.css(overlayReferenceEdge, '0');\n    return;\n  }\n  if (vtt.line === 'auto' && !vtt.vertical) {\n    return;\n  }\n\n  let relativeLinePosition = parseFloat(vtt.line as string);\n\n  if (vtt.snapToLines) {\n    let targetLine = Number(vtt.line);\n    if (targetLine < 0) {\n      targetLine = defaultLineNumber + targetLine;\n    }\n\n    const lineHeight = subtitleOverLaySize.height / defaultLineNumber;\n    const absoluteLinePosition = lineHeight * targetLine;\n    relativeLinePosition = (100 * absoluteLinePosition) / subtitleOverLaySize.height;\n  }\n\n  if (vtt.lineAlign !== 'end')\n    cueContainerDom.css(\n      overlayReferenceEdge, `${relativeLinePosition}%`);\n  setVttLineAlign(cueContainerDom, vtt, direction, relativeLinePosition);\n};\n\n/**\n * Defines the writing direction of the Cue Box\n * https://w3.org/TR/webvtt1/#webvtt-cue-writing-direction\n */\nconst setVttWritingDirectionAndCueBoxPositioning = (\n  cueContainerDom: DOM, vtt: VTTProperties,\n  subtitleOverlaySize: Size,\n) => {\n  switch (vtt.vertical) {\n  case '':\n    cueContainerDom.css('writing-mode', 'horizontal-tb');\n    cueContainerDom.css(Direction.Bottom, '0');\n    setVttLine(cueContainerDom, vtt, Direction.Bottom, subtitleOverlaySize);\n    break;\n  case VttVerticalWriting.GrowingRight:\n    setCueBoxPositionForVerticalWriting(\n      cueContainerDom, Direction.Right, vtt, subtitleOverlaySize);\n    break;\n  case VttVerticalWriting.GrowingLeft:\n    setCueBoxPositionForVerticalWriting(\n      cueContainerDom, Direction.Left, vtt, subtitleOverlaySize);\n    break;\n  }\n};\n\nconst setCueBoxPositionForVerticalWriting = (\n  cueContainerDom: DOM,\n  direction: VerticalWritingDirection,\n  vtt: VTTProperties,\n  subtitleOverlaySize: Size,\n) => {\n    const writingMode = direction === Direction.Right ?\n      'vertical-lr' : 'vertical-rl';\n\n    cueContainerDom.css('writing-mode', writingMode);\n    cueContainerDom.css(Direction.Top, '0');\n    setVttLine(cueContainerDom, vtt, direction, subtitleOverlaySize);\n};\n\n/**\n * Defines the Cue position alignment\n * https://w3.org/TR/webvtt1/#webvtt-cue-position-alignment\n */\nconst setVttPositionAlign = (cueContainerDom: DOM, vtt: VTTProperties, direction: Direction) => {\n  // https://www.w3.org/TR/webvtt1/#webvtt-cue-position\n  if (vtt.position === 'auto') {\n    cueContainerDom.css(direction, '0');\n  } else {\n    switch (vtt.positionAlign) {\n      case 'line-left':\n        cueContainerDom.css(direction, `${vtt.position}%`);\n        cueContainerDom.css(DirectionPair.get(direction), 'auto');\n        cueContainerDom.css('justify-content', 'flex-start');\n        break;\n      case 'center':\n        cueContainerDom.css(direction, `${vtt.position - vtt.size / 2}%`);\n        cueContainerDom.css(DirectionPair.get(direction), 'auto');\n        cueContainerDom.css('justify-content', 'center');\n        break;\n      case 'line-right':\n        cueContainerDom.css(direction, 'auto');\n        cueContainerDom.css(DirectionPair.get(direction), `${100 - vtt.position}%`);\n        cueContainerDom.css('justify-content', 'flex-end');\n        break;\n      default:\n        cueContainerDom.css(direction, `${vtt.position}%`);\n        cueContainerDom.css('justify-content', 'flex-start');\n    }\n  }\n};\n\nconst countLines = (innerHtml: string) =>\n  innerHtml.split('<br />').length;\n\nconst setCssForCenterLineAlign = (\n  cueContainerDom: DOM,\n  direction: Direction,\n  relativeCueBoxPosition: number) => {\n  switch (direction) {\n    case Direction.Bottom:\n      cueContainerDom.css('transform', 'translateY(-50%)');\n      break;\n    case Direction.Left:\n      cueContainerDom.css('transform', 'translateX(50%)');\n      break;\n    case Direction.Right:\n      cueContainerDom.css('transform', 'translateX(-50%)');\n      break;\n  }\n};\n\nconst setCssForEndLineAlign = (\n  cueContainerDom: DOM,\n  direction: Direction,\n  offset: number) => {\n      const opositeToOverlayReferenceEdge = direction;\n      cueContainerDom.css(opositeToOverlayReferenceEdge, `${100 - offset}%`);\n};\n\nexport namespace VttUtils {\n  export const setVttCueBoxStyles = (\n    cueContainer: SubtitleLabel,\n    subtitleOverlaySize: Size,\n  ) => {\n    const vtt = cueContainer.vtt;\n    const cueContainerDom = cueContainer.getDomElement();\n\n\n    setDefaultVttStyles(cueContainerDom, vtt);\n\n    lineCount = countLines(cueContainer.getText());\n    setVttWritingDirectionAndCueBoxPositioning(cueContainerDom, vtt, subtitleOverlaySize);\n\n    // https://w3.org/TR/webvtt1/#webvtt-cue-text-alignment\n    const textAlign = vtt.align === 'middle' ? 'center' : vtt.align;\n    cueContainerDom.css('text-align', textAlign);\n\n    // https://w3.org/TR/webvtt1/#webvtt-cue-size\n    const containerSize = vtt.size;\n    if (vtt.vertical === '') {\n      cueContainerDom.css('width', `${containerSize}%`);\n      setVttPositionAlign(cueContainerDom, vtt, Direction.Left);\n    } else {\n      cueContainerDom.css('height', `${containerSize}%`);\n      setVttPositionAlign(cueContainerDom, vtt, Direction.Top);\n    }\n  };\n\n  /** https://www.w3.org/TR/webvtt1/#regions\n   *  https://www.speechpad.com/captions/webvtt#toc_16\n   */\n  export const setVttRegionStyles = (\n    regionContainer: SubtitleRegionContainer,\n    region: VTTRegionProperties,\n    overlaySize: Size,\n  ) => {\n    const regionContainerDom = regionContainer.getDomElement();\n    const regionPositionX = overlaySize.width * region.viewportAnchorX / 100 - ((overlaySize.width * region.width / 100) * region.regionAnchorX / 100);\n    const regionPositionY = overlaySize.height * region.viewportAnchorY / 100 - ((region.lines * lineHeight) * region.regionAnchorY / 100);\n    regionContainerDom.css('position', 'absolute');\n    regionContainerDom.css('overflow', 'hidden');\n    regionContainerDom.css('width', `${region.width}%`);\n    regionContainerDom.css(Direction.Left, `${regionPositionX}px`);\n    regionContainerDom.css(Direction.Right, 'unset');\n    regionContainerDom.css(Direction.Top, `${regionPositionY}px`);\n    regionContainerDom.css(Direction.Bottom, 'unset');\n    regionContainerDom.css('height', `${region.lines * lineHeight}px`);\n  };\n}\n"]}