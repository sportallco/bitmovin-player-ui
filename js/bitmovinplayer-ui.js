(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}(g.bitmovin || (g.bitmovin = {})).playerui = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoBackButton = void 0;
var button_1 = require("../../../ts/components/button");
var GoBackButton = /** @class */ (function (_super) {
    __extends(GoBackButton, _super);
    function GoBackButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        var defaultConfig = {
            cssClass: 'ui-gobackbutton',
            text: 'Go Back',
            ariaLabel: 'Go Back',
        };
        _this.config = _this.mergeConfig(config, defaultConfig, _this.config);
        return _this;
    }
    GoBackButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.onClick.subscribe(function () {
            console.log('[GoBack] Button clicked');
            window.bitmovin.customMessageHandler.sendAsynchronous('goBack');
        });
        player.on(player.exports.PlayerEvent.ViewModeChanged, function () {
            player.getViewMode() === 'fullscreen' ? _this.hide() : _this.show();
        });
    };
    return GoBackButton;
}(button_1.Button));
exports.GoBackButton = GoBackButton;

},{"../../../ts/components/button":17}],2:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackRewindButton = exports.PlaybackForwardButton = exports.PlaybackJumpButtons = void 0;
var button_1 = require("../../../ts/components/button");
var i18n_1 = require("../../../ts/localization/i18n");
var PlaybackJumpButtons = /** @class */ (function (_super) {
    __extends(PlaybackJumpButtons, _super);
    function PlaybackJumpButtons(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-playbackjumpbuttons',
            text: config.text,
            ariaLabel: config.ariaLabel,
            skipTime: 0,
        }, _this.config);
        return _this;
    }
    PlaybackJumpButtons.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.onClick.subscribe(function () {
            var currentTime = player.getCurrentTime();
            var duration = player.getDuration();
            if (!player.isLive()) {
                var newTime = currentTime + _this.config.skipTime;
                newTime = Math.max(0, Math.min(newTime, duration));
                player.seek(newTime, 'ui');
            }
        });
    };
    return PlaybackJumpButtons;
}(button_1.Button));
exports.PlaybackJumpButtons = PlaybackJumpButtons;
var PlaybackForwardButton = /** @class */ (function (_super) {
    __extends(PlaybackForwardButton, _super);
    function PlaybackForwardButton(config) {
        return _super.call(this, __assign(__assign({}, config), { cssClass: 'ui-playbackforwardbutton', text: i18n_1.i18n.getLocalizer('forward'), ariaLabel: i18n_1.i18n.getLocalizer('forward') })) || this;
    }
    return PlaybackForwardButton;
}(PlaybackJumpButtons));
exports.PlaybackForwardButton = PlaybackForwardButton;
var PlaybackRewindButton = /** @class */ (function (_super) {
    __extends(PlaybackRewindButton, _super);
    function PlaybackRewindButton(config) {
        return _super.call(this, __assign(__assign({}, config), { cssClass: 'ui-playbackrewindbutton', text: i18n_1.i18n.getLocalizer('rewind'), ariaLabel: i18n_1.i18n.getLocalizer('rewind') })) || this;
    }
    return PlaybackRewindButton;
}(PlaybackJumpButtons));
exports.PlaybackRewindButton = PlaybackRewindButton;

},{"../../../ts/components/button":17,"../../../ts/localization/i18n":91}],3:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackJumpControlsOverlay = void 0;
var container_1 = require("../../../ts/components/container");
var playbackjumpbutton_1 = require("./playbackjumpbutton");
/**
 * Overlay containing the playback forward and rewind buttons.
 */
var PlaybackJumpControlsOverlay = /** @class */ (function (_super) {
    __extends(PlaybackJumpControlsOverlay, _super);
    function PlaybackJumpControlsOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.forwardButton = new playbackjumpbutton_1.PlaybackForwardButton({ skipTime: 10 });
        _this.rewindButton = new playbackjumpbutton_1.PlaybackRewindButton({ skipTime: -10 });
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-playbackforward-overlay',
            components: [_this.forwardButton, _this.rewindButton],
        }, _this.config);
        return _this;
    }
    return PlaybackJumpControlsOverlay;
}(container_1.Container));
exports.PlaybackJumpControlsOverlay = PlaybackJumpControlsOverlay;

},{"../../../ts/components/container":24,"./playbackjumpbutton":2}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RadioModeController = void 0;
var eventdispatcher_1 = require("../../../../ts/eventdispatcher");
/**
 * Handles the radio mode state.
 */
var RadioModeController = /** @class */ (function () {
    function RadioModeController() {
        this.events = {
            onChanged: new eventdispatcher_1.EventDispatcher(),
        };
        this.activated = false;
    }
    /**
     * @param activated - Boolean state of the radio mode.
     */
    RadioModeController.prototype.setRadioMode = function (activated) {
        this.activated = activated;
        this.onChangedEvent();
    };
    RadioModeController.prototype.toggleRadioMode = function () {
        this.setRadioMode(!this.activated);
    };
    /**
     * @returns Boolean state of the radio mode.
     */
    RadioModeController.prototype.isRadioModeActivated = function () {
        return this.activated;
    };
    /**
     * Trigger the onChanged event.
     */
    RadioModeController.prototype.onChangedEvent = function () {
        this.events.onChanged.dispatch(this, { activated: this.activated });
    };
    Object.defineProperty(RadioModeController.prototype, "onChanged", {
        /**
         * Get the onChanged event.
         */
        get: function () {
            return this.events.onChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    return RadioModeController;
}());
exports.RadioModeController = RadioModeController;

},{"../../../../ts/eventdispatcher":86}],5:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RadioModeToggleButton = void 0;
var radiomodecontroller_1 = require("./radiomodecontroller");
var togglebutton_1 = require("../../../../ts/components/togglebutton");
var RadioModeToggleButton = /** @class */ (function (_super) {
    __extends(RadioModeToggleButton, _super);
    function RadioModeToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        var defaultConfig = {
            cssClass: 'ui-radiomodetogglebutton',
            text: 'Radio Mode',
            ariaLabel: 'Radio Mode',
        };
        _this.config = _this.mergeConfig(config, defaultConfig, _this.config);
        _this.radioModeController = new radiomodecontroller_1.RadioModeController();
        return _this;
    }
    RadioModeToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        // Écoutez les changements d'état du mode radio
        this.radioModeController.onChanged.subscribe(function (_, args) {
            console.log("[RadioModeToggleButton] Radio mode state changed: ".concat(args.activated));
            if (args.activated) {
                _this.on();
            }
            else {
                _this.off();
            }
            // Send the current state to the outside (e.g. to the React Native app)
            window.bitmovin.customMessageHandler.sendAsynchronous('radioModeChanged', JSON.stringify({ activated: args.activated }));
        });
        // Handle clicks on the button
        this.onClick.subscribe(function () {
            console.log('[RadioModeToggleButton] Button clicked');
            _this.radioModeController.toggleRadioMode();
            // Send synchronous or asynchronous messages to the outside (e.g. to the React Native app)
            var result = window.bitmovin.customMessageHandler.sendSynchronous('toggleRadioMode');
            console.log('Return value from native:', result);
        });
        if (window.bitmovin && window.bitmovin.customMessageHandler) {
            window.bitmovin.customMessageHandler.on('toggleRadioMode', function (data) {
                _this.radioModeController.toggleRadioMode();
            });
        }
        // Initialise l'état du bouton au démarrage
        if (this.radioModeController.isRadioModeActivated()) {
            this.on();
        }
        else {
            this.off();
        }
    };
    return RadioModeToggleButton;
}(togglebutton_1.ToggleButton));
exports.RadioModeToggleButton = RadioModeToggleButton;

},{"../../../../ts/components/togglebutton":74,"./radiomodecontroller":4}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayUtils = void 0;
var ArrayUtils;
(function (ArrayUtils) {
    /**
     * Removes an item from an array.
     * @param array the array that may contain the item to remove
     * @param item the item to remove from the array
     * @returns {any} the removed item or null if it wasn't part of the array
     */
    function remove(array, item) {
        var index = array.indexOf(item);
        if (index > -1) {
            return array.splice(index, 1)[0];
        }
        else {
            return null;
        }
    }
    ArrayUtils.remove = remove;
})(ArrayUtils = exports.ArrayUtils || (exports.ArrayUtils = {}));

},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioTrackSwitchHandler = void 0;
var i18n_1 = require("./localization/i18n");
/**
 * Helper class to handle all audio tracks related events
 *
 * This class listens to player events as well as the `ListSelector` event if selection changed
 */
var AudioTrackSwitchHandler = /** @class */ (function () {
    function AudioTrackSwitchHandler(player, element, uimanager) {
        var _this = this;
        this.addAudioTrack = function (event) {
            var audioTrack = event.track;
            if (!_this.listElement.hasItem(audioTrack.id)) {
                _this.listElement.addItem(audioTrack.id, i18n_1.i18n.getLocalizer(audioTrack.label), true);
            }
        };
        this.removeAudioTrack = function (event) {
            var audioTrack = event.track;
            if (_this.listElement.hasItem(audioTrack.id)) {
                _this.listElement.removeItem(audioTrack.id);
            }
        };
        this.selectCurrentAudioTrack = function () {
            var currentAudioTrack = _this.player.getAudio();
            // HLS streams don't always provide this, so we have to check
            if (currentAudioTrack) {
                _this.listElement.selectItem(currentAudioTrack.id);
            }
        };
        this.refreshAudioTracks = function () {
            var audioTracks = _this.player.getAvailableAudio();
            var audioTrackToListItem = function (audioTrack) {
                return { key: audioTrack.id, label: audioTrack.label };
            };
            _this.listElement.synchronizeItems(audioTracks.map(audioTrackToListItem));
            _this.selectCurrentAudioTrack();
        };
        this.player = player;
        this.listElement = element;
        this.uimanager = uimanager;
        this.bindSelectionEvent();
        this.bindPlayerEvents();
        this.refreshAudioTracks();
    }
    AudioTrackSwitchHandler.prototype.bindSelectionEvent = function () {
        var _this = this;
        this.listElement.onItemSelected.subscribe(function (_, value) {
            _this.player.setAudio(value);
        });
    };
    AudioTrackSwitchHandler.prototype.bindPlayerEvents = function () {
        // Update selection when selected track has changed
        this.player.on(this.player.exports.PlayerEvent.AudioChanged, this.selectCurrentAudioTrack);
        // Update tracks when source goes away
        this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.refreshAudioTracks);
        // Update tracks when the period within a source changes
        this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshAudioTracks);
        // Update tracks when a track is added or removed
        this.player.on(this.player.exports.PlayerEvent.AudioAdded, this.addAudioTrack);
        this.player.on(this.player.exports.PlayerEvent.AudioRemoved, this.removeAudioTrack);
        this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshAudioTracks);
    };
    return AudioTrackSwitchHandler;
}());
exports.AudioTrackSwitchHandler = AudioTrackSwitchHandler;

},{"./localization/i18n":91}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserUtils = void 0;
var BrowserUtils = /** @class */ (function () {
    function BrowserUtils() {
    }
    Object.defineProperty(BrowserUtils, "isMobile", {
        // isMobile only needs to be evaluated once (it cannot change during a browser session)
        // Mobile detection according to Mozilla recommendation: "In summary, we recommend looking for the string “Mobi”
        // anywhere in the User Agent to detect a mobile device."
        // https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && /Mobi/.test(navigator.userAgent);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isChrome", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && /Chrome/.test(navigator.userAgent);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isAndroid", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && /Android/.test(navigator.userAgent) && !this.isHisense;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isIOS", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && /iPad|iPhone|iPod/.test(navigator.userAgent);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isMacIntel", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && navigator.platform === 'MacIntel';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isHisense", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && /Hisense/.test(navigator.userAgent);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isPlayStation", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && /PlayStation/i.test(navigator.userAgent);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isWebOs", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return (navigator &&
                navigator.userAgent &&
                (navigator.userAgent.includes('Web0S') || navigator.userAgent.includes('NetCast')));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isTizen", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && /Tizen/.test(navigator.userAgent);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isTouchSupported", {
        // https://hacks.mozilla.org/2013/04/detecting-touch-its-the-why-not-the-how/
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return 'ontouchstart' in window || navigator && navigator.userAgent && (navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0);
        },
        enumerable: false,
        configurable: true
    });
    BrowserUtils.windowExists = function () {
        return typeof window !== 'undefined';
    };
    return BrowserUtils;
}());
exports.BrowserUtils = BrowserUtils;

},{}],9:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdClickOverlay = void 0;
var clickoverlay_1 = require("./clickoverlay");
/**
 * A simple click capture overlay for clickThroughUrls of ads.
 */
var AdClickOverlay = /** @class */ (function (_super) {
    __extends(AdClickOverlay, _super);
    function AdClickOverlay() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AdClickOverlay.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var clickThroughCallback = null;
        player.on(player.exports.PlayerEvent.AdStarted, function (event) {
            var ad = event.ad;
            _this.setUrl(ad.clickThroughUrl);
            clickThroughCallback = ad.clickThroughUrlOpened;
        });
        // Clear click-through URL when ad has finished
        var adFinishedHandler = function () {
            _this.setUrl(null);
        };
        player.on(player.exports.PlayerEvent.AdFinished, adFinishedHandler);
        player.on(player.exports.PlayerEvent.AdSkipped, adFinishedHandler);
        player.on(player.exports.PlayerEvent.AdError, adFinishedHandler);
        this.onClick.subscribe(function () {
            // Pause the ad when overlay is clicked
            player.pause('ui-ad-click-overlay');
            if (clickThroughCallback) {
                clickThroughCallback();
            }
        });
    };
    return AdClickOverlay;
}(clickoverlay_1.ClickOverlay));
exports.AdClickOverlay = AdClickOverlay;

},{"./clickoverlay":21}],10:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdMessageLabel = void 0;
var label_1 = require("./label");
var stringutils_1 = require("../stringutils");
var i18n_1 = require("../localization/i18n");
/**
 * A label that displays a message about a running ad, optionally with a countdown.
 */
var AdMessageLabel = /** @class */ (function (_super) {
    __extends(AdMessageLabel, _super);
    function AdMessageLabel(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-label-ad-message',
            text: i18n_1.i18n.getLocalizer('ads.remainingTime'),
        }, _this.config);
        return _this;
    }
    AdMessageLabel.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var text = config.text;
        var updateMessageHandler = function () {
            _this.setText(stringutils_1.StringUtils.replaceAdMessagePlaceholders(i18n_1.i18n.performLocalization(text), null, player));
        };
        var adStartHandler = function (event) {
            var uiConfig = event.ad.uiConfig;
            text = uiConfig && uiConfig.message || config.text;
            updateMessageHandler();
            player.on(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);
        };
        var adEndHandler = function () {
            player.off(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);
        };
        player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);
        player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);
        player.on(player.exports.PlayerEvent.AdError, adEndHandler);
        player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);
    };
    return AdMessageLabel;
}(label_1.Label));
exports.AdMessageLabel = AdMessageLabel;

},{"../localization/i18n":91,"../stringutils":110,"./label":31}],11:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdSkipButton = void 0;
var button_1 = require("./button");
var stringutils_1 = require("../stringutils");
/**
 * A button that is displayed during ads and can be used to skip the ad.
 */
var AdSkipButton = /** @class */ (function (_super) {
    __extends(AdSkipButton, _super);
    function AdSkipButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-button-ad-skip',
            untilSkippableMessage: 'Skip ad in {remainingTime}',
            skippableMessage: 'Skip ad',
        }, _this.config);
        return _this;
    }
    AdSkipButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var untilSkippableMessage = config.untilSkippableMessage;
        var skippableMessage = config.skippableMessage;
        var skipOffset = -1;
        var updateSkipMessageHandler = function () {
            _this.show();
            // Update the skip message on the button
            if (player.getCurrentTime() < skipOffset) {
                _this.setText(stringutils_1.StringUtils.replaceAdMessagePlaceholders(untilSkippableMessage, skipOffset, player));
                _this.disable();
            }
            else {
                _this.setText(skippableMessage);
                _this.enable();
            }
        };
        var adStartHandler = function (event) {
            var ad = event.ad;
            skipOffset = ad.skippableAfter;
            untilSkippableMessage = ad.uiConfig && ad.uiConfig.untilSkippableMessage || config.untilSkippableMessage;
            skippableMessage = ad.uiConfig && ad.uiConfig.skippableMessage || config.skippableMessage;
            // Display this button only if ad is skippable.
            // Non-skippable ads will return -1 for skippableAfter for player version < v8.3.0.
            if (typeof skipOffset === 'number' && skipOffset >= 0) {
                updateSkipMessageHandler();
                player.on(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);
            }
            else {
                _this.hide();
            }
        };
        var adEndHandler = function () {
            player.off(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);
        };
        player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);
        player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);
        player.on(player.exports.PlayerEvent.AdError, adEndHandler);
        player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);
        this.onClick.subscribe(function () {
            // Try to skip the ad (this only works if it is skippable so we don't need to take extra care of that here)
            player.ads.skip();
        });
    };
    return AdSkipButton;
}(button_1.Button));
exports.AdSkipButton = AdSkipButton;

},{"../stringutils":110,"./button":17}],12:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AirPlayToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles Apple AirPlay.
 */
var AirPlayToggleButton = /** @class */ (function (_super) {
    __extends(AirPlayToggleButton, _super);
    function AirPlayToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-airplaytogglebutton',
            text: i18n_1.i18n.getLocalizer('appleAirplay'),
        }, _this.config);
        return _this;
    }
    AirPlayToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        if (!player.isAirplayAvailable) {
            // If the player does not support Airplay (player 7.0), we just hide this component and skip configuration
            this.hide();
            return;
        }
        this.onClick.subscribe(function () {
            if (player.isAirplayAvailable()) {
                player.showAirplayTargetPicker();
            }
            else {
                if (console) {
                    console.log('AirPlay unavailable');
                }
            }
        });
        var airPlayAvailableHandler = function () {
            if (player.isAirplayAvailable()) {
                _this.show();
            }
            else {
                _this.hide();
            }
        };
        var airPlayChangedHandler = function () {
            if (player.isAirplayActive()) {
                _this.on();
            }
            else {
                _this.off();
            }
        };
        player.on(player.exports.PlayerEvent.AirplayAvailable, airPlayAvailableHandler);
        player.on(player.exports.PlayerEvent.AirplayChanged, airPlayChangedHandler);
        // Startup init
        airPlayAvailableHandler(); // Hide button if AirPlay is not available
        airPlayChangedHandler();
    };
    return AirPlayToggleButton;
}(togglebutton_1.ToggleButton));
exports.AirPlayToggleButton = AirPlayToggleButton;

},{"../localization/i18n":91,"./togglebutton":74}],13:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioQualitySelectBox = void 0;
var selectbox_1 = require("./selectbox");
var i18n_1 = require("../localization/i18n");
/**
 * A select box providing a selection between 'auto' and the available audio qualities.
 */
var AudioQualitySelectBox = /** @class */ (function (_super) {
    __extends(AudioQualitySelectBox, _super);
    function AudioQualitySelectBox(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-audioqualityselectbox'],
        }, _this.config);
        return _this;
    }
    AudioQualitySelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var selectCurrentAudioQuality = function () {
            _this.selectItem(player.getAudioQuality().id);
        };
        var updateAudioQualities = function () {
            var audioQualities = player.getAvailableAudioQualities();
            _this.clearItems();
            // Add entry for automatic quality switching (default setting)
            _this.addItem('auto', i18n_1.i18n.getLocalizer('auto'));
            // Add audio qualities
            for (var _i = 0, audioQualities_1 = audioQualities; _i < audioQualities_1.length; _i++) {
                var audioQuality = audioQualities_1[_i];
                _this.addItem(audioQuality.id, audioQuality.label);
            }
            // Select initial quality
            selectCurrentAudioQuality();
        };
        this.onItemSelected.subscribe(function (sender, value) {
            player.setAudioQuality(value);
        });
        // Update qualities when audio track has changed
        player.on(player.exports.PlayerEvent.AudioChanged, updateAudioQualities);
        // Update qualities when source goes away
        player.on(player.exports.PlayerEvent.SourceUnloaded, updateAudioQualities);
        // Update qualities when the period within a source changes
        player.on(player.exports.PlayerEvent.PeriodSwitched, updateAudioQualities);
        // Update quality selection when quality is changed (from outside)
        player.on(player.exports.PlayerEvent.AudioQualityChanged, selectCurrentAudioQuality);
        if (player.exports.PlayerEvent.AudioQualityAdded) {
            // Update qualities when their availability changed
            // TODO: remove any cast after next player release
            player.on(player.exports.PlayerEvent.AudioQualityAdded, updateAudioQualities);
            player.on(player.exports.PlayerEvent.AudioQualityRemoved, updateAudioQualities);
        }
        uimanager.getConfig().events.onUpdated.subscribe(updateAudioQualities);
    };
    return AudioQualitySelectBox;
}(selectbox_1.SelectBox));
exports.AudioQualitySelectBox = AudioQualitySelectBox;

},{"../localization/i18n":91,"./selectbox":46}],14:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioTrackListBox = void 0;
var listbox_1 = require("./listbox");
var audiotrackutils_1 = require("../audiotrackutils");
/**
 * A element that is similar to a select box where the user can select a subtitle
 */
var AudioTrackListBox = /** @class */ (function (_super) {
    __extends(AudioTrackListBox, _super);
    function AudioTrackListBox() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AudioTrackListBox.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        new audiotrackutils_1.AudioTrackSwitchHandler(player, this, uimanager);
    };
    return AudioTrackListBox;
}(listbox_1.ListBox));
exports.AudioTrackListBox = AudioTrackListBox;

},{"../audiotrackutils":7,"./listbox":32}],15:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioTrackSelectBox = void 0;
var selectbox_1 = require("./selectbox");
var audiotrackutils_1 = require("../audiotrackutils");
/**
 * A select box providing a selection between available audio tracks (e.g. different languages).
 */
var AudioTrackSelectBox = /** @class */ (function (_super) {
    __extends(AudioTrackSelectBox, _super);
    function AudioTrackSelectBox(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-audiotrackselectbox'],
        }, _this.config);
        return _this;
    }
    AudioTrackSelectBox.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        new audiotrackutils_1.AudioTrackSwitchHandler(player, this, uimanager);
    };
    return AudioTrackSelectBox;
}(selectbox_1.SelectBox));
exports.AudioTrackSelectBox = AudioTrackSelectBox;

},{"../audiotrackutils":7,"./selectbox":46}],16:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BufferingOverlay = void 0;
var container_1 = require("./container");
var component_1 = require("./component");
var timeout_1 = require("../timeout");
/**
 * Overlays the player and displays a buffering indicator.
 */
var BufferingOverlay = /** @class */ (function (_super) {
    __extends(BufferingOverlay, _super);
    function BufferingOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.indicators = [
            new component_1.Component({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),
            new component_1.Component({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),
            new component_1.Component({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),
        ];
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-buffering-overlay',
            hidden: true,
            components: _this.indicators,
            showDelayMs: 1000,
        }, _this.config);
        return _this;
    }
    BufferingOverlay.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var overlayShowTimeout = new timeout_1.Timeout(config.showDelayMs, function () {
            _this.show();
        });
        var showOverlay = function () {
            overlayShowTimeout.start();
        };
        var hideOverlay = function () {
            overlayShowTimeout.clear();
            _this.hide();
        };
        player.on(player.exports.PlayerEvent.StallStarted, showOverlay);
        player.on(player.exports.PlayerEvent.StallEnded, hideOverlay);
        player.on(player.exports.PlayerEvent.Play, showOverlay);
        player.on(player.exports.PlayerEvent.Playing, hideOverlay);
        player.on(player.exports.PlayerEvent.Paused, hideOverlay);
        player.on(player.exports.PlayerEvent.Seek, showOverlay);
        player.on(player.exports.PlayerEvent.Seeked, hideOverlay);
        player.on(player.exports.PlayerEvent.TimeShift, showOverlay);
        player.on(player.exports.PlayerEvent.TimeShifted, hideOverlay);
        player.on(player.exports.PlayerEvent.SourceUnloaded, hideOverlay);
        // Show overlay if player is already stalled at init
        if (player.isStalled()) {
            this.show();
        }
    };
    return BufferingOverlay;
}(container_1.Container));
exports.BufferingOverlay = BufferingOverlay;

},{"../timeout":112,"./component":23,"./container":24}],17:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Button = void 0;
var component_1 = require("./component");
var dom_1 = require("../dom");
var eventdispatcher_1 = require("../eventdispatcher");
var i18n_1 = require("../localization/i18n");
/**
 * A simple clickable button.
 */
var Button = /** @class */ (function (_super) {
    __extends(Button, _super);
    function Button(config) {
        var _this = _super.call(this, config) || this;
        _this.buttonEvents = {
            onClick: new eventdispatcher_1.EventDispatcher(),
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-button',
            role: 'button',
            tabIndex: 0,
        }, _this.config);
        return _this;
    }
    Button.prototype.toDomElement = function () {
        var _this = this;
        var buttonElementAttributes = {
            'id': this.config.id,
            'aria-label': i18n_1.i18n.performLocalization(this.config.ariaLabel || this.config.text),
            'class': this.getCssClasses(),
            'type': 'button',
            /**
            * WCAG20 standard to display if a button is pressed or not
            */
            'aria-pressed': 'false',
            'tabindex': this.config.tabIndex.toString(),
        };
        if (this.config.role != null) {
            buttonElementAttributes['role'] = this.config.role;
        }
        // Create the button element with the text label
        var buttonElement = new dom_1.DOM('button', buttonElementAttributes).append(new dom_1.DOM('span', {
            'class': this.prefixCss('label'),
        }).html(i18n_1.i18n.performLocalization(this.config.text)));
        // Listen for the click event on the button element and trigger the corresponding event on the button component
        buttonElement.on('click', function () {
            _this.onClickEvent();
        });
        return buttonElement;
    };
    /**
     * Sets text on the label of the button.
     * @param text the text to put into the label of the button
     */
    Button.prototype.setText = function (text) {
        this.getDomElement().find('.' + this.prefixCss('label')).html(i18n_1.i18n.performLocalization(text));
    };
    Button.prototype.onClickEvent = function () {
        this.buttonEvents.onClick.dispatch(this);
    };
    Object.defineProperty(Button.prototype, "onClick", {
        /**
         * Gets the event that is fired when the button is clicked.
         * @returns {Event<Button<Config>, NoArgs>}
         */
        get: function () {
            return this.buttonEvents.onClick.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    return Button;
}(component_1.Component));
exports.Button = Button;

},{"../dom":84,"../eventdispatcher":86,"../localization/i18n":91,"./component":23}],18:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CastStatusOverlay = void 0;
var container_1 = require("./container");
var label_1 = require("./label");
var i18n_1 = require("../localization/i18n");
/**
 * Overlays the player and displays the status of a Cast session.
 */
var CastStatusOverlay = /** @class */ (function (_super) {
    __extends(CastStatusOverlay, _super);
    function CastStatusOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.statusLabel = new label_1.Label({ cssClass: 'ui-cast-status-label' });
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-cast-status-overlay',
            components: [_this.statusLabel],
            hidden: true,
        }, _this.config);
        return _this;
    }
    CastStatusOverlay.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        player.on(player.exports.PlayerEvent.CastWaitingForDevice, function (event) {
            _this.show();
            // Get device name and update status text while connecting
            var castDeviceName = event.castPayload.deviceName;
            _this.statusLabel.setText(i18n_1.i18n.getLocalizer('connectingTo', { castDeviceName: castDeviceName }));
        });
        player.on(player.exports.PlayerEvent.CastStarted, function (event) {
            // Session is started or resumed
            // For cases when a session is resumed, we do not receive the previous events and therefore show the status panel
            // here too
            _this.show();
            var castDeviceName = event.deviceName;
            _this.statusLabel.setText(i18n_1.i18n.getLocalizer('playingOn', { castDeviceName: castDeviceName }));
        });
        player.on(player.exports.PlayerEvent.CastStopped, function (event) {
            // Cast session gone, hide the status panel
            _this.hide();
        });
    };
    return CastStatusOverlay;
}(container_1.Container));
exports.CastStatusOverlay = CastStatusOverlay;

},{"../localization/i18n":91,"./container":24,"./label":31}],19:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CastToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles casting to a Cast receiver.
 */
var CastToggleButton = /** @class */ (function (_super) {
    __extends(CastToggleButton, _super);
    function CastToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-casttogglebutton',
            text: i18n_1.i18n.getLocalizer('googleCast'),
        }, _this.config);
        return _this;
    }
    CastToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.onClick.subscribe(function () {
            if (player.isCastAvailable()) {
                if (player.isCasting()) {
                    player.castStop();
                }
                else {
                    player.castVideo();
                }
            }
            else {
                if (console) {
                    console.log('Cast unavailable');
                }
            }
        });
        var castAvailableHander = function () {
            if (player.isCastAvailable()) {
                _this.show();
            }
            else {
                _this.hide();
            }
        };
        player.on(player.exports.PlayerEvent.CastAvailable, castAvailableHander);
        // Toggle button 'on' state
        player.on(player.exports.PlayerEvent.CastWaitingForDevice, function () {
            _this.on();
        });
        player.on(player.exports.PlayerEvent.CastStarted, function () {
            // When a session is resumed, there is no CastStart event, so we also need to toggle here for such cases
            _this.on();
        });
        player.on(player.exports.PlayerEvent.CastStopped, function () {
            _this.off();
        });
        // Startup init
        castAvailableHander(); // Hide button if Cast not available
        if (player.isCasting()) {
            this.on();
        }
    };
    return CastToggleButton;
}(togglebutton_1.ToggleButton));
exports.CastToggleButton = CastToggleButton;

},{"../localization/i18n":91,"./togglebutton":74}],20:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CastUIContainer = void 0;
var uicontainer_1 = require("./uicontainer");
var timeout_1 = require("../timeout");
/**
 * The base container for Cast receivers that contains all of the UI and takes care that the UI is shown on
 * certain playback events.
 */
var CastUIContainer = /** @class */ (function (_super) {
    __extends(CastUIContainer, _super);
    function CastUIContainer(config) {
        return _super.call(this, config) || this;
    }
    CastUIContainer.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        /*
         * Show UI on Cast devices at certain playback events
         *
         * Since a Cast receiver does not have a direct HCI, we show the UI on certain playback events to give the user
         * a chance to see on the screen what's going on, e.g. on play/pause or a seek the UI is shown and the user can
         * see the current time and position on the seek bar.
         * The UI is shown permanently while playback is paused, otherwise hides automatically after the configured
         * hide delay time.
         */
        var isUiShown = false;
        var hideUi = function () {
            uimanager.onControlsHide.dispatch(_this);
            isUiShown = false;
        };
        this.castUiHideTimeout = new timeout_1.Timeout(config.hideDelay, hideUi);
        var showUi = function () {
            if (!isUiShown) {
                uimanager.onControlsShow.dispatch(_this);
                isUiShown = true;
            }
        };
        var showUiPermanently = function () {
            showUi();
            _this.castUiHideTimeout.clear();
        };
        var showUiWithTimeout = function () {
            showUi();
            _this.castUiHideTimeout.start();
        };
        var showUiAfterSeek = function () {
            if (player.isPlaying()) {
                showUiWithTimeout();
            }
            else {
                showUiPermanently();
            }
        };
        player.on(player.exports.PlayerEvent.Play, showUiWithTimeout);
        player.on(player.exports.PlayerEvent.Paused, showUiPermanently);
        player.on(player.exports.PlayerEvent.Seek, showUiPermanently);
        player.on(player.exports.PlayerEvent.Seeked, showUiAfterSeek);
        uimanager.getConfig().events.onUpdated.subscribe(showUiWithTimeout);
    };
    CastUIContainer.prototype.release = function () {
        _super.prototype.release.call(this);
        this.castUiHideTimeout.clear();
    };
    return CastUIContainer;
}(uicontainer_1.UIContainer));
exports.CastUIContainer = CastUIContainer;

},{"../timeout":112,"./uicontainer":76}],21:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClickOverlay = void 0;
var button_1 = require("./button");
/**
 * A click overlay that opens an url in a new tab if clicked.
 */
var ClickOverlay = /** @class */ (function (_super) {
    __extends(ClickOverlay, _super);
    function ClickOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-clickoverlay',
            role: _this.config.role,
        }, _this.config);
        return _this;
    }
    ClickOverlay.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.setUrl(this.config.url);
        var element = this.getDomElement();
        element.on('click', function () {
            if (element.data('url')) {
                window.open(element.data('url'), '_blank');
            }
        });
    };
    /**
     * Gets the URL that should be followed when the watermark is clicked.
     * @returns {string} the watermark URL
     */
    ClickOverlay.prototype.getUrl = function () {
        return this.getDomElement().data('url');
    };
    ClickOverlay.prototype.setUrl = function (url) {
        if (url === undefined || url == null) {
            url = '';
        }
        this.getDomElement().data('url', url);
    };
    return ClickOverlay;
}(button_1.Button));
exports.ClickOverlay = ClickOverlay;

},{"./button":17}],22:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloseButton = void 0;
var button_1 = require("./button");
var i18n_1 = require("../localization/i18n");
/**
 * A button that closes (hides) a configured component.
 */
var CloseButton = /** @class */ (function (_super) {
    __extends(CloseButton, _super);
    function CloseButton(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-closebutton',
            text: i18n_1.i18n.getLocalizer('close'),
        }, _this.config);
        return _this;
    }
    CloseButton.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        this.onClick.subscribe(function () {
            config.target.hide();
        });
    };
    return CloseButton;
}(button_1.Button));
exports.CloseButton = CloseButton;

},{"../localization/i18n":91,"./button":17}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Component = void 0;
var guid_1 = require("../guid");
var dom_1 = require("../dom");
var eventdispatcher_1 = require("../eventdispatcher");
var i18n_1 = require("../localization/i18n");
/**
 * The base class of the UI framework.
 * Each component must extend this class and optionally the config interface.
 */
var Component = exports.Component = /** @class */ (function () {
    /**
     * Constructs a component with an optionally supplied config. All subclasses must call the constructor of their
     * superclass and then merge their configuration into the component's configuration.
     * @param config the configuration for the component
     */
    function Component(config) {
        if (config === void 0) { config = {}; }
        /**
         * The list of events that this component offers. These events should always be private and only directly
         * accessed from within the implementing component.
         *
         * Because TypeScript does not support private properties with the same name on different class hierarchy levels
         * (i.e. superclass and subclass cannot contain a private property with the same name), the default naming
         * convention for the event list of a component that should be followed by subclasses is the concatenation of the
         * camel-cased class name + 'Events' (e.g. SubClass extends Component => subClassEvents).
         * See {@link #componentEvents} for an example.
         *
         * Event properties should be named in camel case with an 'on' prefix and in the present tense. Async events may
         * have a start event (when the operation starts) in the present tense, and must have an end event (when the
         * operation ends) in the past tense (or present tense in special cases (e.g. onStart/onStarted or onPlay/onPlaying).
         * See {@link #componentEvents#onShow} for an example.
         *
         * Each event should be accompanied with a protected method named by the convention eventName + 'Event'
         * (e.g. onStartEvent), that actually triggers the event by calling {@link EventDispatcher#dispatch dispatch} and
         * passing a reference to the component as first parameter. Components should always trigger their events with these
         * methods. Implementing this pattern gives subclasses means to directly listen to the events by overriding the
         * method (and saving the overhead of passing a handler to the event dispatcher) and more importantly to trigger
         * these events without having access to the private event list.
         * See {@link #onShow} for an example.
         *
         * To provide external code the possibility to listen to this component's events (subscribe, unsubscribe, etc.),
         * each event should also be accompanied by a public getter function with the same name as the event's property,
         * that returns the {@link Event} obtained from the event dispatcher by calling {@link EventDispatcher#getEvent}.
         * See {@link #onShow} for an example.
         *
         * Full example for an event representing an example action in a example component:
         *
         * <code>
         * // Define an example component class with an example event
         * class ExampleComponent extends Component<ComponentConfig> {
           *
           *     private exampleComponentEvents = {
           *         onExampleAction: new EventDispatcher<ExampleComponent, NoArgs>()
           *     }
           *
           *     // constructor and other stuff...
           *
           *     protected onExampleActionEvent() {
           *        this.exampleComponentEvents.onExampleAction.dispatch(this);
           *    }
           *
           *    get onExampleAction(): Event<ExampleComponent, NoArgs> {
           *        return this.exampleComponentEvents.onExampleAction.getEvent();
           *    }
           * }
         *
         * // Create an instance of the component somewhere
         * var exampleComponentInstance = new ExampleComponent();
         *
         * // Subscribe to the example event on the component
         * exampleComponentInstance.onExampleAction.subscribe(function (sender: ExampleComponent) {
           *     console.log('onExampleAction of ' + sender + ' has fired!');
           * });
         * </code>
         */
        this.componentEvents = {
            onShow: new eventdispatcher_1.EventDispatcher(),
            onHide: new eventdispatcher_1.EventDispatcher(),
            onHoverChanged: new eventdispatcher_1.EventDispatcher(),
            onEnabled: new eventdispatcher_1.EventDispatcher(),
            onDisabled: new eventdispatcher_1.EventDispatcher(),
        };
        // Create the configuration for this component
        this.config = this.mergeConfig(config, {
            tag: 'div',
            id: 'bmpui-id-' + guid_1.Guid.next(),
            cssPrefix: 'bmpui',
            cssClass: 'ui-component',
            cssClasses: [],
            hidden: false,
            disabled: false,
        }, {});
    }
    /**
     * Initializes the component, e.g. by applying config settings.
     * This method must not be called from outside the UI framework.
     *
     * This method is automatically called by the {@link UIInstanceManager}. If the component is an inner component of
     * some component, and thus encapsulated abd managed internally and never directly exposed to the UIManager,
     * this method must be called from the managing component's {@link #initialize} method.
     */
    Component.prototype.initialize = function () {
        this.hidden = this.config.hidden;
        this.disabled = this.config.disabled;
        // Hide the component at initialization if it is configured to be hidden
        if (this.isHidden()) {
            this.hidden = false; // Set flag to false for the following hide() call to work (hide() checks the flag)
            this.hide();
        }
        // Disable the component at initialization if it is configured to be disabled
        if (this.isDisabled()) {
            this.disabled = false; // Set flag to false for the following disable() call to work (disable() checks the flag)
            this.disable();
        }
    };
    /**
     * Configures the component for the supplied Player and UIInstanceManager. This is the place where all the magic
     * happens, where components typically subscribe and react to events (on their DOM element, the Player, or the
     * UIInstanceManager), and basically everything that makes them interactive.
     * This method is called only once, when the UIManager initializes the UI.
     *
     * Subclasses usually overwrite this method to add their own functionality.
     *
     * @param player the player which this component controls
     * @param uimanager the UIInstanceManager that manages this component
     */
    Component.prototype.configure = function (player, uimanager) {
        var _this = this;
        this.onShow.subscribe(function () {
            uimanager.onComponentShow.dispatch(_this);
        });
        this.onHide.subscribe(function () {
            uimanager.onComponentHide.dispatch(_this);
        });
        // Track the hovered state of the element
        this.getDomElement().on('mouseenter', function () {
            _this.onHoverChangedEvent(true);
        });
        this.getDomElement().on('mouseleave', function () {
            _this.onHoverChangedEvent(false);
        });
    };
    /**
     * Releases all resources and dependencies that the component holds. Player, DOM, and UIManager events are
     * automatically removed during release and do not explicitly need to be removed here.
     * This method is called by the UIManager when it releases the UI.
     *
     * Subclasses that need to release resources should override this method and call super.release().
     */
    Component.prototype.release = function () {
        // Nothing to do here, override where necessary
    };
    /**
     * Generate the DOM element for this component.
     *
     * Subclasses usually overwrite this method to extend or replace the DOM element with their own design.
     */
    Component.prototype.toDomElement = function () {
        var element = new dom_1.DOM(this.config.tag, {
            'id': this.config.id,
            'class': this.getCssClasses(),
            'role': this.config.role,
        });
        return element;
    };
    /**
     * Returns the DOM element of this component. Creates the DOM element if it does not yet exist.
     *
     * Should not be overwritten by subclasses.
     *
     * @returns {DOM}
     */
    Component.prototype.getDomElement = function () {
        if (!this.element) {
            this.element = this.toDomElement();
        }
        return this.element;
    };
    /**
     * Checks if this component has a DOM element.
     */
    Component.prototype.hasDomElement = function () {
        return Boolean(this.element);
    };
    Component.prototype.setAriaLabel = function (label) {
        this.setAriaAttr('label', i18n_1.i18n.performLocalization(label));
    };
    Component.prototype.setAriaAttr = function (name, value) {
        this.getDomElement().attr("aria-".concat(name), value);
    };
    /**
     * Merges a configuration with a default configuration and a base configuration from the superclass.
     *
     * @param config the configuration settings for the components, as usually passed to the constructor
     * @param defaults a default configuration for settings that are not passed with the configuration
     * @param base configuration inherited from a superclass
     * @returns {Config}
     */
    Component.prototype.mergeConfig = function (config, defaults, base) {
        // Extend default config with supplied config
        var merged = Object.assign({}, base, defaults, config);
        // Return the extended config
        return merged;
    };
    /**
     * Helper method that returns a string of all CSS classes of the component.
     *
     * @returns {string}
     */
    Component.prototype.getCssClasses = function () {
        var _this = this;
        // Merge all CSS classes into single array
        var flattenedArray = [this.config.cssClass].concat(this.config.cssClasses);
        // Prefix classes
        flattenedArray = flattenedArray.map(function (css) {
            return _this.prefixCss(css);
        });
        // Join array values into a string
        var flattenedString = flattenedArray.join(' ');
        // Return trimmed string to prevent whitespace at the end from the join operation
        return flattenedString.trim();
    };
    Component.prototype.prefixCss = function (cssClassOrId) {
        return this.config.cssPrefix + '-' + cssClassOrId;
    };
    /**
     * Returns the configuration object of the component.
     * @returns {Config}
     */
    Component.prototype.getConfig = function () {
        return this.config;
    };
    /**
     * Hides the component if shown.
     * This method basically transfers the component into the hidden state. Actual hiding is done via CSS.
     */
    Component.prototype.hide = function () {
        if (!this.hidden) {
            this.hidden = true;
            this.getDomElement().addClass(this.prefixCss(Component.CLASS_HIDDEN));
            this.onHideEvent();
        }
    };
    /**
     * Shows the component if hidden.
     */
    Component.prototype.show = function () {
        if (this.hidden) {
            this.getDomElement().removeClass(this.prefixCss(Component.CLASS_HIDDEN));
            this.hidden = false;
            this.onShowEvent();
        }
    };
    /**
     * Determines if the component is hidden.
     * @returns {boolean} true if the component is hidden, else false
     */
    Component.prototype.isHidden = function () {
        return this.hidden;
    };
    /**
     * Determines if the component is shown.
     * @returns {boolean} true if the component is visible, else false
     */
    Component.prototype.isShown = function () {
        return !this.isHidden();
    };
    /**
     * Toggles the hidden state by hiding the component if it is shown, or showing it if hidden.
     */
    Component.prototype.toggleHidden = function () {
        if (this.isHidden()) {
            this.show();
        }
        else {
            this.hide();
        }
    };
    /**
     * Disables the component.
     * This method basically transfers the component into the disabled state. Actual disabling is done via CSS or child
     * components. (e.g. Button needs to unsubscribe click listeners)
     */
    Component.prototype.disable = function () {
        if (!this.disabled) {
            this.disabled = true;
            this.getDomElement().addClass(this.prefixCss(Component.CLASS_DISABLED));
            this.onDisabledEvent();
        }
    };
    /**
     * Enables the component.
     * This method basically transfers the component into the enabled state. Actual enabling is done via CSS or child
     * components. (e.g. Button needs to subscribe click listeners)
     */
    Component.prototype.enable = function () {
        if (this.disabled) {
            this.getDomElement().removeClass(this.prefixCss(Component.CLASS_DISABLED));
            this.disabled = false;
            this.onEnabledEvent();
        }
    };
    /**
     * Determines if the component is disabled.
     * @returns {boolean} true if the component is disabled, else false
     */
    Component.prototype.isDisabled = function () {
        return this.disabled;
    };
    /**
     * Determines if the component is enabled.
     * @returns {boolean} true if the component is enabled, else false
     */
    Component.prototype.isEnabled = function () {
        return !this.isDisabled();
    };
    /**
     * Determines if the component is currently hovered.
     * @returns {boolean} true if the component is hovered, else false
     */
    Component.prototype.isHovered = function () {
        return this.hovered;
    };
    /**
     * Fires the onShow event.
     * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
     */
    Component.prototype.onShowEvent = function () {
        this.componentEvents.onShow.dispatch(this);
    };
    /**
     * Fires the onHide event.
     * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
     */
    Component.prototype.onHideEvent = function () {
        this.componentEvents.onHide.dispatch(this);
    };
    /**
     * Fires the onEnabled event.
     * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
     */
    Component.prototype.onEnabledEvent = function () {
        this.componentEvents.onEnabled.dispatch(this);
    };
    /**
     * Fires the onDisabled event.
     * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
     */
    Component.prototype.onDisabledEvent = function () {
        this.componentEvents.onDisabled.dispatch(this);
    };
    /**
     * Fires the onHoverChanged event.
     * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
     */
    Component.prototype.onHoverChangedEvent = function (hovered) {
        this.hovered = hovered;
        this.componentEvents.onHoverChanged.dispatch(this, { hovered: hovered });
    };
    Object.defineProperty(Component.prototype, "onShow", {
        /**
         * Gets the event that is fired when the component is showing.
         * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
         * @returns {Event<Component<Config>, NoArgs>}
         */
        get: function () {
            return this.componentEvents.onShow.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "onHide", {
        /**
         * Gets the event that is fired when the component is hiding.
         * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
         * @returns {Event<Component<Config>, NoArgs>}
         */
        get: function () {
            return this.componentEvents.onHide.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "onEnabled", {
        /**
         * Gets the event that is fired when the component is enabling.
         * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
         * @returns {Event<Component<Config>, NoArgs>}
         */
        get: function () {
            return this.componentEvents.onEnabled.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "onDisabled", {
        /**
         * Gets the event that is fired when the component is disabling.
         * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
         * @returns {Event<Component<Config>, NoArgs>}
         */
        get: function () {
            return this.componentEvents.onDisabled.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "onHoverChanged", {
        /**
         * Gets the event that is fired when the component's hover-state is changing.
         * @returns {Event<Component<Config>, ComponentHoverChangedEventArgs>}
         */
        get: function () {
            return this.componentEvents.onHoverChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    /**
     * The classname that is attached to the element when it is in the hidden state.
     * @type {string}
     */
    Component.CLASS_HIDDEN = 'hidden';
    /**
     * The classname that is attached to the element when it is in the disabled state.
     * @type {string}
     */
    Component.CLASS_DISABLED = 'disabled';
    return Component;
}());

},{"../dom":84,"../eventdispatcher":86,"../guid":89,"../localization/i18n":91}],24:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Container = void 0;
var component_1 = require("./component");
var dom_1 = require("../dom");
var arrayutils_1 = require("../arrayutils");
var i18n_1 = require("../localization/i18n");
/**
 * A container component that can contain a collection of child components.
 * Components can be added at construction time through the {@link ContainerConfig#components} setting, or later
 * through the {@link Container#addComponent} method. The UIManager automatically takes care of all components, i.e. it
 * initializes and configures them automatically.
 *
 * In the DOM, the container consists of an outer <div> (that can be configured by the config) and an inner wrapper
 * <div> that contains the components. This double-<div>-structure is often required to achieve many advanced effects
 * in CSS and/or JS, e.g. animations and certain formatting with absolute positioning.
 *
 * DOM example:
 * <code>
 *     <div class='ui-container'>
 *         <div class='container-wrapper'>
 *             ... child components ...
 *         </div>
 *     </div>
 * </code>
 */
var Container = /** @class */ (function (_super) {
    __extends(Container, _super);
    function Container(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-container',
            components: [],
        }, _this.config);
        _this.componentsToAdd = [];
        _this.componentsToRemove = [];
        return _this;
    }
    /**
     * Adds a child component to the container.
     * @param component the component to add
     */
    Container.prototype.addComponent = function (component) {
        this.config.components.push(component);
        this.componentsToAdd.push(component);
    };
    /**
     * Removes a child component from the container.
     * @param component the component to remove
     * @returns {boolean} true if the component has been removed, false if it is not contained in this container
     */
    Container.prototype.removeComponent = function (component) {
        if (arrayutils_1.ArrayUtils.remove(this.config.components, component) != null) {
            this.componentsToRemove.push(component);
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * Gets an array of all child components in this container.
     * @returns {Component<ComponentConfig>[]}
     */
    Container.prototype.getComponents = function () {
        return this.config.components;
    };
    /**
     * Removes all child components from the container.
     */
    Container.prototype.removeComponents = function () {
        for (var _i = 0, _a = this.getComponents().slice(); _i < _a.length; _i++) {
            var component = _a[_i];
            this.removeComponent(component);
        }
    };
    /**
     * Updates the DOM of the container with the current components.
     */
    Container.prototype.updateComponents = function () {
        /* We cannot just clear the container to remove all elements and then re-add those that should stay, because
         * IE looses the innerHTML of unattached elements, leading to empty elements within the container (e.g. missing
         * subtitle text in SubtitleLabel).
         * Instead, we keep a list of elements to add and remove, leaving remaining elements alone. By keeping them in
         * the DOM, their content gets preserved in all browsers.
         */
        var component;
        while (component = this.componentsToRemove.shift()) {
            component.getDomElement().remove();
        }
        while (component = this.componentsToAdd.shift()) {
            this.innerContainerElement.append(component.getDomElement());
        }
    };
    Container.prototype.toDomElement = function () {
        // Create the container element (the outer <div>)
        var containerElement = new dom_1.DOM(this.config.tag, {
            'id': this.config.id,
            'class': this.getCssClasses(),
            'role': this.config.role,
            'aria-label': i18n_1.i18n.performLocalization(this.config.ariaLabel),
        });
        // Create the inner container element (the inner <div>) that will contain the components
        var innerContainer = new dom_1.DOM(this.config.tag, {
            'class': this.prefixCss('container-wrapper'),
        });
        this.innerContainerElement = innerContainer;
        for (var _i = 0, _a = this.config.components; _i < _a.length; _i++) {
            var initialComponent = _a[_i];
            this.componentsToAdd.push(initialComponent);
        }
        this.updateComponents();
        containerElement.append(innerContainer);
        return containerElement;
    };
    return Container;
}(component_1.Component));
exports.Container = Container;

},{"../arrayutils":6,"../dom":84,"../localization/i18n":91,"./component":23}],25:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControlBar = void 0;
var container_1 = require("./container");
var uiutils_1 = require("../uiutils");
var spacer_1 = require("./spacer");
var i18n_1 = require("../localization/i18n");
var browserutils_1 = require("../browserutils");
var settingspanel_1 = require("./settingspanel");
/**
 * A container for main player control components, e.g. play toggle button, seek bar, volume control, fullscreen toggle
 * button.
 */
var ControlBar = /** @class */ (function (_super) {
    __extends(ControlBar, _super);
    function ControlBar(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-controlbar',
            hidden: true,
            role: 'region',
            ariaLabel: i18n_1.i18n.getLocalizer('controlBar'),
        }, _this.config);
        return _this;
    }
    ControlBar.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        // Counts how many components are hovered and block hiding of the control bar
        var hoverStackCount = 0;
        var isSettingsPanelShown = false;
        // only enabling this for non-mobile platforms without touch input. enabling this
        // for touch devices causes the UI to not disappear after hideDelay seconds.
        // Instead, it will stay visible until another manual interaction is performed.
        if (uimanager.getConfig().disableAutoHideWhenHovered && !browserutils_1.BrowserUtils.isMobile) {
            // Track hover status of child components
            uiutils_1.UIUtils.traverseTree(this, function (component) {
                // Do not track hover status of child containers or spacers, only of 'real' controls
                if (component instanceof container_1.Container || component instanceof spacer_1.Spacer) {
                    return;
                }
                // Subscribe hover event and keep a count of the number of hovered children
                component.onHoverChanged.subscribe(function (_, args) {
                    if (args.hovered) {
                        hoverStackCount++;
                    }
                    else {
                        hoverStackCount--;
                    }
                });
            });
        }
        if (browserutils_1.BrowserUtils.isMobile) {
            uimanager.onComponentShow.subscribe(function (component) {
                if (component instanceof settingspanel_1.SettingsPanel) {
                    isSettingsPanelShown = true;
                }
            });
            uimanager.onComponentHide.subscribe(function (component) {
                if (component instanceof settingspanel_1.SettingsPanel) {
                    isSettingsPanelShown = false;
                }
            });
        }
        uimanager.onControlsShow.subscribe(function () {
            _this.show();
        });
        uimanager.onPreviewControlsHide.subscribe(function (sender, args) {
            // Cancel the hide event if hovered child components block hiding or if the settings panel is active on mobile.
            args.cancel = args.cancel || (hoverStackCount > 0 || isSettingsPanelShown);
        });
        uimanager.onControlsHide.subscribe(function () {
            _this.hide();
        });
    };
    return ControlBar;
}(container_1.Container));
exports.ControlBar = ControlBar;

},{"../browserutils":8,"../localization/i18n":91,"../uiutils":115,"./container":24,"./settingspanel":47,"./spacer":54}],26:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorMessageOverlay = void 0;
var container_1 = require("./container");
var label_1 = require("./label");
var tvnoisecanvas_1 = require("./tvnoisecanvas");
var errorutils_1 = require("../errorutils");
var mobilev3playerapi_1 = require("../mobilev3playerapi");
/**
 * Overlays the player and displays error messages.
 */
var ErrorMessageOverlay = /** @class */ (function (_super) {
    __extends(ErrorMessageOverlay, _super);
    function ErrorMessageOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.errorLabel = new label_1.Label({ cssClass: 'ui-errormessage-label' });
        _this.tvNoiseBackground = new tvnoisecanvas_1.TvNoiseCanvas();
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-errormessage-overlay',
            components: [_this.tvNoiseBackground, _this.errorLabel],
            hidden: true,
        }, _this.config);
        return _this;
    }
    ErrorMessageOverlay.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var handleErrorMessage = function (event, message) {
            var customizedMessage = customizeErrorMessage(uimanager.getConfig().errorMessages || config.messages, event);
            if (customizedMessage) {
                message = customizedMessage;
            }
            _this.display(message);
        };
        if ((0, mobilev3playerapi_1.isMobileV3PlayerAPI)(player)) {
            var errorEventHandler = function (event) {
                var message = errorutils_1.ErrorUtils.defaultMobileV3ErrorMessageTranslator(event);
                handleErrorMessage(event, message);
            };
            player.on(mobilev3playerapi_1.MobileV3PlayerEvent.PlayerError, errorEventHandler);
            player.on(mobilev3playerapi_1.MobileV3PlayerEvent.SourceError, errorEventHandler);
        }
        else {
            player.on(player.exports.PlayerEvent.Error, function (event) {
                var message = errorutils_1.ErrorUtils.defaultWebErrorMessageTranslator(event);
                handleErrorMessage(event, message);
            });
        }
        player.on(player.exports.PlayerEvent.SourceLoaded, function (event) {
            if (_this.isShown()) {
                _this.tvNoiseBackground.stop();
                _this.hide();
            }
        });
    };
    ErrorMessageOverlay.prototype.display = function (errorMessage) {
        this.errorLabel.setText(errorMessage);
        this.tvNoiseBackground.start();
        this.show();
    };
    ErrorMessageOverlay.prototype.release = function () {
        _super.prototype.release.call(this);
        // Canvas rendering must be explicitly stopped, else it just continues forever and hogs resources
        this.tvNoiseBackground.stop();
    };
    return ErrorMessageOverlay;
}(container_1.Container));
exports.ErrorMessageOverlay = ErrorMessageOverlay;
function customizeErrorMessage(errorMessages, event) {
    if (!errorMessages) {
        return undefined;
    }
    // Process message vocabularies
    if (typeof errorMessages === 'function') {
        // Translation function for all errors
        return errorMessages(event);
    }
    if (errorMessages[event.code]) {
        // It's not a translation function, so it must be a map of strings or translation functions
        var customMessage = errorMessages[event.code];
        return typeof customMessage === 'string' ? customMessage : customMessage(event);
    }
}

},{"../errorutils":85,"../mobilev3playerapi":96,"./container":24,"./label":31,"./tvnoisecanvas":75}],27:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FullscreenToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles the player between windowed and fullscreen view.
 */
var FullscreenToggleButton = /** @class */ (function (_super) {
    __extends(FullscreenToggleButton, _super);
    function FullscreenToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-fullscreentogglebutton',
            text: i18n_1.i18n.getLocalizer('fullscreen'),
        }, _this.config);
        return _this;
    }
    FullscreenToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var isFullScreenAvailable = function () {
            return player.isViewModeAvailable(player.exports.ViewMode.Fullscreen);
        };
        var fullscreenStateHandler = function () {
            player.getViewMode() === player.exports.ViewMode.Fullscreen ? _this.on() : _this.off();
        };
        var fullscreenAvailabilityChangedHandler = function () {
            isFullScreenAvailable() ? _this.show() : _this.hide();
        };
        player.on(player.exports.PlayerEvent.ViewModeChanged, fullscreenStateHandler);
        // Available only in our native SDKs for now
        if (player.exports.PlayerEvent.ViewModeAvailabilityChanged) {
            player.on(player.exports.PlayerEvent.ViewModeAvailabilityChanged, fullscreenAvailabilityChangedHandler);
        }
        uimanager.getConfig().events.onUpdated.subscribe(fullscreenAvailabilityChangedHandler);
        this.onClick.subscribe(function () {
            if (!isFullScreenAvailable()) {
                if (console) {
                    console.log('Fullscreen unavailable');
                }
                return;
            }
            var targetViewMode = player.getViewMode() === player.exports.ViewMode.Fullscreen
                ? player.exports.ViewMode.Inline
                : player.exports.ViewMode.Fullscreen;
            player.setViewMode(targetViewMode);
        });
        // Startup init
        fullscreenAvailabilityChangedHandler();
        fullscreenStateHandler();
    };
    return FullscreenToggleButton;
}(togglebutton_1.ToggleButton));
exports.FullscreenToggleButton = FullscreenToggleButton;

},{"../localization/i18n":91,"./togglebutton":74}],28:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.HugePlaybackToggleButton = void 0;
var playbacktogglebutton_1 = require("./playbacktogglebutton");
var dom_1 = require("../dom");
var i18n_1 = require("../localization/i18n");
/**
 * A button that overlays the video and toggles between playback and pause.
 */
var HugePlaybackToggleButton = /** @class */ (function (_super) {
    __extends(HugePlaybackToggleButton, _super);
    function HugePlaybackToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-hugeplaybacktogglebutton',
            text: i18n_1.i18n.getLocalizer('playPause'),
            role: 'button',
        }, _this.config);
        return _this;
    }
    HugePlaybackToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        // Update button state through API events
        _super.prototype.configure.call(this, player, uimanager, false);
        // Set enterFullscreenOnInitialPlayback if set in the uimanager config
        if (typeof uimanager.getConfig().enterFullscreenOnInitialPlayback === 'boolean') {
            this.config.enterFullscreenOnInitialPlayback = uimanager.getConfig().enterFullscreenOnInitialPlayback;
        }
        var togglePlayback = function () {
            if (player.isPlaying() || _this.isPlayInitiated) {
                player.pause('ui');
            }
            else {
                player.play('ui');
            }
        };
        var toggleFullscreen = function () {
            if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {
                player.setViewMode(player.exports.ViewMode.Inline);
            }
            else {
                player.setViewMode(player.exports.ViewMode.Fullscreen);
            }
        };
        var firstPlay = true;
        var clickTime = 0;
        var doubleClickTime = 0;
        /*
         * YouTube-style toggle button handling
         *
         * The goal is to prevent a short pause or playback interval between a click, that toggles playback, and a
         * double click, that toggles fullscreen. In this naive approach, the first click would e.g. start playback,
         * the second click would be detected as double click and toggle to fullscreen, and as second normal click stop
         * playback, which results is a short playback interval with max length of the double click detection
         * period (usually 500ms).
         *
         * To solve this issue, we defer handling of the first click for 200ms, which is almost unnoticeable to the user,
         * and just toggle playback if no second click (double click) has been registered during this period. If a double
         * click is registered, we just toggle the fullscreen. In the first 200ms, undesired playback changes thus cannot
         * happen. If a double click is registered within 500ms, we undo the playback change and switch fullscreen mode.
         * In the end, this method basically introduces a 200ms observing interval in which playback changes are prevented
         * if a double click happens.
         */
        this.onClick.subscribe(function () {
            // Directly start playback on first click of the button.
            // This is a required workaround for mobile browsers where video playback needs to be triggered directly
            // by the user. A deferred playback start through the timeout below is not considered as user action and
            // therefore ignored by mobile browsers.
            if (firstPlay) {
                // Try to start playback. Then we wait for Play and only when it arrives, we disable the firstPlay flag.
                // If we disable the flag here, onClick was triggered programmatically instead of by a user interaction, and
                // playback is blocked (e.g. on mobile devices due to the programmatic play() call), we loose the chance to
                // ever start playback through a user interaction again with this button.
                togglePlayback();
                if (_this.config.enterFullscreenOnInitialPlayback) {
                    player.setViewMode(player.exports.ViewMode.Fullscreen);
                }
                return;
            }
            var now = Date.now();
            if (now - clickTime < 200) {
                // We have a double click inside the 200ms interval, just toggle fullscreen mode
                toggleFullscreen();
                doubleClickTime = now;
                return;
            }
            else if (now - clickTime < 500) {
                // We have a double click inside the 500ms interval, undo playback toggle and toggle fullscreen mode
                toggleFullscreen();
                togglePlayback();
                doubleClickTime = now;
                return;
            }
            clickTime = now;
            setTimeout(function () {
                if (Date.now() - doubleClickTime > 200) {
                    // No double click detected, so we toggle playback and wait what happens next
                    togglePlayback();
                }
            }, 200);
        });
        player.on(player.exports.PlayerEvent.Play, function () {
            // Playback has really started, we can disable the flag to switch to normal toggle button handling
            firstPlay = false;
        });
        player.on(player.exports.PlayerEvent.Warning, function (event) {
            if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {
                // if playback could not be started, reset the first play flag as we need the user interaction to start
                firstPlay = true;
            }
        });
        var suppressPlayButtonTransitionAnimation = function () {
            // Disable the current animation
            _this.setTransitionAnimationsEnabled(false);
            // Enable the transition animations for the next state change
            _this.onToggle.subscribeOnce(function () {
                _this.setTransitionAnimationsEnabled(true);
            });
        };
        // Hide the play button animation when the UI is loaded (it should only be animated on state changes)
        suppressPlayButtonTransitionAnimation();
        var isAutoplayEnabled = player.getConfig().playback && Boolean(player.getConfig().playback.autoplay);
        // We only know if an autoplay attempt is upcoming if the player is not yet ready. It the player is already ready,
        // the attempt might be upcoming or might have already happened, but we don't have to handle that because we can
        // simply rely on isPlaying and the play state events.
        var isAutoplayUpcoming = !player.getSource() && isAutoplayEnabled;
        // Hide the play button when the player is already playing or autoplay is upcoming
        if (player.isPlaying() || isAutoplayUpcoming) {
            // Hide the play button (switch to playing state)
            this.on();
            // Disable the animation of the playing state switch
            suppressPlayButtonTransitionAnimation();
            // Show the play button without an animation if a play attempt is blocked
            player.on(player.exports.PlayerEvent.Warning, function (event) {
                if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {
                    suppressPlayButtonTransitionAnimation();
                }
            });
        }
    };
    HugePlaybackToggleButton.prototype.toDomElement = function () {
        var buttonElement = _super.prototype.toDomElement.call(this);
        // Add child that contains the play button image
        // Setting the image directly on the button does not work together with scaling animations, because the button
        // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined
        // to the size if the image, it can scale inside the player without overshooting.
        buttonElement.append(new dom_1.DOM('div', {
            'class': this.prefixCss('image'),
        }));
        return buttonElement;
    };
    /**
     * Enables or disables the play state transition animations of the play button image. Can be used to suppress
     * animations.
     * @param {boolean} enabled true to enable the animations (default), false to disable them
     */
    HugePlaybackToggleButton.prototype.setTransitionAnimationsEnabled = function (enabled) {
        var noTransitionAnimationsClass = this.prefixCss('no-transition-animations');
        if (enabled) {
            this.getDomElement().removeClass(noTransitionAnimationsClass);
        }
        else if (!this.getDomElement().hasClass(noTransitionAnimationsClass)) {
            this.getDomElement().addClass(noTransitionAnimationsClass);
        }
    };
    return HugePlaybackToggleButton;
}(playbacktogglebutton_1.PlaybackToggleButton));
exports.HugePlaybackToggleButton = HugePlaybackToggleButton;

},{"../dom":84,"../localization/i18n":91,"./playbacktogglebutton":38}],29:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.HugeReplayButton = void 0;
var button_1 = require("./button");
var dom_1 = require("../dom");
var i18n_1 = require("../localization/i18n");
/**
 * A button to play/replay a video.
 */
var HugeReplayButton = /** @class */ (function (_super) {
    __extends(HugeReplayButton, _super);
    function HugeReplayButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-hugereplaybutton',
            text: i18n_1.i18n.getLocalizer('replay'),
        }, _this.config);
        return _this;
    }
    HugeReplayButton.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        this.onClick.subscribe(function () {
            player.play('ui');
        });
    };
    HugeReplayButton.prototype.toDomElement = function () {
        var buttonElement = _super.prototype.toDomElement.call(this);
        // Add child that contains the play button image
        // Setting the image directly on the button does not work together with scaling animations, because the button
        // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined
        // to the size if the image, it can scale inside the player without overshooting.
        buttonElement.append(new dom_1.DOM('div', {
            'class': this.prefixCss('image'),
        }));
        return buttonElement;
    };
    return HugeReplayButton;
}(button_1.Button));
exports.HugeReplayButton = HugeReplayButton;

},{"../dom":84,"../localization/i18n":91,"./button":17}],30:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemSelectionList = void 0;
var listselector_1 = require("./listselector");
var dom_1 = require("../dom");
var i18n_1 = require("../localization/i18n");
var ItemSelectionList = exports.ItemSelectionList = /** @class */ (function (_super) {
    __extends(ItemSelectionList, _super);
    function ItemSelectionList(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            tag: 'ul',
            cssClass: 'ui-itemselectionlist',
        }, _this.config);
        return _this;
    }
    ItemSelectionList.prototype.isActive = function () {
        return this.items.length > 1;
    };
    ItemSelectionList.prototype.toDomElement = function () {
        var listElement = new dom_1.DOM('ul', {
            'id': this.config.id,
            'class': this.getCssClasses(),
        });
        this.listElement = listElement;
        this.updateDomItems();
        return listElement;
    };
    ItemSelectionList.prototype.updateDomItems = function (selectedValue) {
        var _this = this;
        if (selectedValue === void 0) { selectedValue = null; }
        // Delete all children
        this.listElement.empty();
        var selectedListItem = null;
        var selectItem = function (listItem) {
            listItem.addClass(_this.prefixCss(ItemSelectionList.CLASS_SELECTED));
        };
        var deselectItem = function (listItem) {
            listItem.removeClass(_this.prefixCss(ItemSelectionList.CLASS_SELECTED));
        };
        var _loop_1 = function (item) {
            var listItem = new dom_1.DOM('li', {
                'type': 'li',
                'class': this_1.prefixCss('ui-selectionlistitem'),
            }).append(new dom_1.DOM('a', {}).html(i18n_1.i18n.performLocalization(item.label)));
            if (!selectedListItem) {
                if (selectedValue == null) { // If there is no pre-selected value, select the first one
                    selectedListItem = listItem;
                }
                else if (String(selectedValue) === item.key) { // convert selectedValue to string to catch 'null'/null case
                    selectedListItem = listItem;
                }
            }
            // Handle list item selections
            listItem.on('click', function () {
                // Deselect the previous item (if there was a selected item)
                if (selectedListItem) {
                    deselectItem(selectedListItem);
                }
                // Select the clicked item
                selectedListItem = listItem;
                selectItem(listItem);
                // Fire the event
                _this.onItemSelectedEvent(item.key, false);
            });
            // Select default item
            if (selectedListItem) {
                selectItem(selectedListItem);
            }
            this_1.listElement.append(listItem);
        };
        var this_1 = this;
        for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
            var item = _a[_i];
            _loop_1(item);
        }
    };
    ItemSelectionList.prototype.onItemAddedEvent = function (value) {
        _super.prototype.onItemAddedEvent.call(this, value);
        this.updateDomItems(this.selectedItem);
    };
    ItemSelectionList.prototype.onItemRemovedEvent = function (value) {
        _super.prototype.onItemRemovedEvent.call(this, value);
        this.updateDomItems(this.selectedItem);
    };
    ItemSelectionList.prototype.onItemSelectedEvent = function (value, updateDomItems) {
        if (updateDomItems === void 0) { updateDomItems = true; }
        _super.prototype.onItemSelectedEvent.call(this, value);
        if (updateDomItems) {
            this.updateDomItems(value);
        }
    };
    ItemSelectionList.CLASS_SELECTED = 'selected';
    return ItemSelectionList;
}(listselector_1.ListSelector));

},{"../dom":84,"../localization/i18n":91,"./listselector":33}],31:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Label = void 0;
var component_1 = require("./component");
var dom_1 = require("../dom");
var eventdispatcher_1 = require("../eventdispatcher");
var i18n_1 = require("../localization/i18n");
/**
 * A simple text label.
 *
 * DOM example:
 * <code>
 *     <span class='ui-label'>...some text...</span>
 * </code>
 */
var Label = /** @class */ (function (_super) {
    __extends(Label, _super);
    function Label(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.labelEvents = {
            onClick: new eventdispatcher_1.EventDispatcher(),
            onTextChanged: new eventdispatcher_1.EventDispatcher(),
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-label',
        }, _this.config);
        _this.text = _this.config.text;
        return _this;
    }
    Label.prototype.toDomElement = function () {
        var _this = this;
        var tagName = this.config.for != null ? 'label' : 'span';
        var labelElement = new dom_1.DOM(tagName, {
            'id': this.config.id,
            'for': this.config.for,
            'class': this.getCssClasses(),
        }).html(i18n_1.i18n.performLocalization(this.text));
        labelElement.on('click', function () {
            _this.onClickEvent();
        });
        return labelElement;
    };
    /**
     * Set the text on this label.
     * @param text
     */
    Label.prototype.setText = function (text) {
        if (text === this.text) {
            return;
        }
        this.text = text;
        var localizedText = i18n_1.i18n.performLocalization(text);
        this.getDomElement().html(localizedText);
        this.onTextChangedEvent(localizedText);
    };
    /**
     * Gets the text on this label.
     * @return {string} The text on the label
     */
    Label.prototype.getText = function () {
        return i18n_1.i18n.performLocalization(this.text);
    };
    /**
     * Clears the text on this label.
     */
    Label.prototype.clearText = function () {
        this.getDomElement().html('');
        this.onTextChangedEvent(null);
    };
    /**
     * Tests if the label is empty and does not contain any text.
     * @return {boolean} True if the label is empty, else false
     */
    Label.prototype.isEmpty = function () {
        return !this.text;
    };
    /**
     * Fires the {@link #onClick} event.
     * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method
     * and calling the super method.
     */
    Label.prototype.onClickEvent = function () {
        this.labelEvents.onClick.dispatch(this);
    };
    /**
     * Fires the {@link #onClick} event.
     * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method
     * and calling the super method.
     */
    Label.prototype.onTextChangedEvent = function (text) {
        this.labelEvents.onTextChanged.dispatch(this, text);
    };
    Object.defineProperty(Label.prototype, "onClick", {
        /**
         * Gets the event that is fired when the label is clicked.
         * @returns {Event<Label<LabelConfig>, NoArgs>}
         */
        get: function () {
            return this.labelEvents.onClick.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "onTextChanged", {
        /**
         * Gets the event that is fired when the text on the label is changed.
         * @returns {Event<Label<LabelConfig>, string>}
         */
        get: function () {
            return this.labelEvents.onTextChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    return Label;
}(component_1.Component));
exports.Label = Label;

},{"../dom":84,"../eventdispatcher":86,"../localization/i18n":91,"./component":23}],32:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListBox = void 0;
var togglebutton_1 = require("./togglebutton");
var listselector_1 = require("./listselector");
var dom_1 = require("../dom");
var arrayutils_1 = require("../arrayutils");
/**
 * A element to select a single item out of a list of available items.
 *
 * DOM example:
 * <code>
 *   <div class='ui-listbox'>
 *     <button class='ui-listbox-button'>label</button>
 *     ...
 *   </div
 * </code>
 */
// TODO: change ListSelector to extends container in v4 to improve usage of ListBox.
//       Currently we are creating the dom element of the list box with child elements manually here.
//       But this functionality is already covered within the Container component.
var ListBox = /** @class */ (function (_super) {
    __extends(ListBox, _super);
    function ListBox(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.components = [];
        _this.removeListBoxDomItem = function (_, key) {
            var component = _this.getComponentForKey(key);
            if (component) {
                component.getDomElement().remove();
                arrayutils_1.ArrayUtils.remove(_this.components, component);
            }
        };
        _this.addListBoxDomItem = function (_, key) {
            var component = _this.getComponentForKey(key);
            var newItem = _this.getItemForKey(key);
            if (component) {
                // Update existing component
                component.setText(newItem.label);
            }
            else {
                var listBoxItemButton_1 = _this.buildListBoxItemButton(newItem);
                listBoxItemButton_1.onClick.subscribe(function () {
                    _this.handleSelectionChange(listBoxItemButton_1);
                });
                _this.components.push(listBoxItemButton_1);
                _this.listBoxElement.append(listBoxItemButton_1.getDomElement());
            }
        };
        _this.refreshSelectedItem = function () {
            // This gets called twice because the first time is triggered when the user clicks on the ListBoxItemButton. And the
            // second call comes from the player event when the actual item is selected (Subtitle / AudioTrack in this case).
            // As this is a generic component we can't prohibit this behaviour. We need to treat this component as it acts
            // independent from PlayerEvents and on the other hand we need to react to PlayerEvents as it could be triggered
            // from outside.
            for (var _i = 0, _a = _this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                var component = _this.getComponentForKey(item.key);
                if (component) {
                    String(component.key) === String(_this.selectedItem) ? component.on() : component.off();
                }
            }
        };
        _this.handleSelectionChange = function (sender) {
            _this.onItemSelectedEvent(sender.key);
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-listbox',
        }, _this.config);
        return _this;
    }
    ListBox.prototype.configure = function (player, uimanager) {
        // Subscribe before super call to receive initial events
        this.onItemAdded.subscribe(this.addListBoxDomItem);
        this.onItemRemoved.subscribe(this.removeListBoxDomItem);
        this.onItemSelected.subscribe(this.refreshSelectedItem);
        _super.prototype.configure.call(this, player, uimanager);
    };
    ListBox.prototype.toDomElement = function () {
        var listBoxElement = new dom_1.DOM('div', {
            'id': this.config.id,
            'class': this.getCssClasses(),
        });
        this.listBoxElement = listBoxElement;
        this.createListBoxDomItems();
        this.refreshSelectedItem();
        return listBoxElement;
    };
    ListBox.prototype.createListBoxDomItems = function () {
        // Delete all children
        this.listBoxElement.empty();
        this.components = [];
        // Add updated children
        for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
            var item = _a[_i];
            this.addListBoxDomItem(this, item.key);
        }
    };
    ListBox.prototype.buildListBoxItemButton = function (listItem) {
        return new ListBoxItemButton({
            key: listItem.key,
            text: listItem.label,
            ariaLabel: listItem.ariaLabel,
        });
    };
    ListBox.prototype.getComponentForKey = function (key) {
        return this.components.find(function (c) { return key === c.key; });
    };
    return ListBox;
}(listselector_1.ListSelector));
exports.ListBox = ListBox;
var ListBoxItemButton = /** @class */ (function (_super) {
    __extends(ListBoxItemButton, _super);
    function ListBoxItemButton(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-listbox-button',
            onClass: 'selected',
            offClass: '',
        }, _this.config);
        return _this;
    }
    Object.defineProperty(ListBoxItemButton.prototype, "key", {
        get: function () {
            return this.config.key;
        },
        enumerable: false,
        configurable: true
    });
    return ListBoxItemButton;
}(togglebutton_1.ToggleButton));

},{"../arrayutils":6,"../dom":84,"./listselector":33,"./togglebutton":74}],33:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListSelector = void 0;
var component_1 = require("./component");
var eventdispatcher_1 = require("../eventdispatcher");
var arrayutils_1 = require("../arrayutils");
var i18n_1 = require("../localization/i18n");
var ListSelector = /** @class */ (function (_super) {
    __extends(ListSelector, _super);
    function ListSelector(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.listSelectorEvents = {
            onItemAdded: new eventdispatcher_1.EventDispatcher(),
            onItemRemoved: new eventdispatcher_1.EventDispatcher(),
            onItemSelected: new eventdispatcher_1.EventDispatcher(),
        };
        _this.config = _this.mergeConfig(config, {
            items: [],
            cssClass: 'ui-listselector',
        }, _this.config);
        _this.items = _this.config.items;
        return _this;
    }
    ListSelector.prototype.getItemIndex = function (key) {
        for (var index in this.items) {
            if (key === this.items[index].key) {
                return parseInt(index);
            }
        }
        return -1;
    };
    /**
     * Returns all current items of this selector.
     * * @returns {ListItem[]}
     */
    ListSelector.prototype.getItems = function () {
        return this.items;
    };
    /**
     * Checks if the specified item is part of this selector.
     * @param key the key of the item to check
     * @returns {boolean} true if the item is part of this selector, else false
     */
    ListSelector.prototype.hasItem = function (key) {
        return this.getItemIndex(key) > -1;
    };
    /**
     * Adds an item to this selector by doing a sorted insert or by appending the element to the end of the list of items.
     * If an item with the specified key already exists, it is replaced.
     * @param key the key of the item to add
     * @param label the (human-readable) label of the item to add
     * @param sortedInsert whether the item should be added respecting the order of keys
     * @param ariaLabel custom aria label for the listItem
     */
    ListSelector.prototype.addItem = function (key, label, sortedInsert, ariaLabel) {
        if (sortedInsert === void 0) { sortedInsert = false; }
        if (ariaLabel === void 0) { ariaLabel = ''; }
        var listItem = __assign({ key: key, label: i18n_1.i18n.performLocalization(label) }, (ariaLabel && { ariaLabel: ariaLabel }));
        // Apply filter function
        if (this.config.filter && !this.config.filter(listItem)) {
            return;
        }
        // Apply translator function
        if (this.config.translator) {
            listItem.label = this.config.translator(listItem);
        }
        // Try to remove key first to get overwrite behavior and avoid duplicate keys
        this.removeItem(key); // This will trigger an ItemRemoved and an ItemAdded event
        // Add the item to the list
        if (sortedInsert) {
            var index = this.items.findIndex(function (entry) { return entry.key > key; });
            if (index < 0) {
                this.items.push(listItem);
            }
            else {
                this.items.splice(index, 0, listItem);
            }
        }
        else {
            this.items.push(listItem);
        }
        this.onItemAddedEvent(key);
    };
    /**
     * Removes an item from this selector.
     * @param key the key of the item to remove
     * @returns {boolean} true if removal was successful, false if the item is not part of this selector
     */
    ListSelector.prototype.removeItem = function (key) {
        var index = this.getItemIndex(key);
        if (index > -1) {
            arrayutils_1.ArrayUtils.remove(this.items, this.items[index]);
            this.onItemRemovedEvent(key);
            return true;
        }
        return false;
    };
    /**
     * Selects an item from the items in this selector.
     * @param key the key of the item to select
     * @returns {boolean} true is the selection was successful, false if the selected item is not part of the selector
     */
    ListSelector.prototype.selectItem = function (key) {
        if (key === this.selectedItem) {
            // itemConfig is already selected, suppress any further action
            return true;
        }
        var index = this.getItemIndex(key);
        if (index > -1) {
            this.selectedItem = key;
            this.onItemSelectedEvent(key);
            return true;
        }
        return false;
    };
    /**
     * Returns the key of the selected item.
     * @returns {string} the key of the selected item or null if no item is selected
     */
    ListSelector.prototype.getSelectedItem = function () {
        return this.selectedItem;
    };
    /**
     * Returns the items for the given key or undefined if no item with the given key exists.
     * @param key the key of the item to return
     * @returns {ListItem} the item with the requested key. Undefined if no item with the given key exists.
     */
    ListSelector.prototype.getItemForKey = function (key) {
        return this.items.find(function (item) { return item.key === key; });
    };
    /**
     * Synchronize the current items of this selector with the given ones. This will remove and add items selectively.
     * For each removed item the ItemRemovedEvent and for each added item the ItemAddedEvent will be triggered. Favour
     * this method over using clearItems and adding all items again afterwards.
     * @param newItems
     */
    ListSelector.prototype.synchronizeItems = function (newItems) {
        var _this = this;
        newItems
            .filter(function (item) { return !_this.hasItem(item.key); })
            .forEach(function (item) { return _this.addItem(item.key, item.label, item.sortedInsert, item.ariaLabel); });
        this.items
            .filter(function (item) { return newItems.filter(function (i) { return i.key === item.key; }).length === 0; })
            .forEach(function (item) { return _this.removeItem(item.key); });
    };
    /**
     * Removes all items from this selector.
     */
    ListSelector.prototype.clearItems = function () {
        // local copy for iteration after clear
        var items = this.items;
        // clear items
        this.items = [];
        // clear the selection as the selected item is also removed
        this.selectedItem = null;
        // fire events
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            this.onItemRemovedEvent(item.key);
        }
    };
    /**
     * Returns the number of items in this selector.
     * @returns {number}
     */
    ListSelector.prototype.itemCount = function () {
        return Object.keys(this.items).length;
    };
    ListSelector.prototype.onItemAddedEvent = function (key) {
        this.listSelectorEvents.onItemAdded.dispatch(this, key);
    };
    ListSelector.prototype.onItemRemovedEvent = function (key) {
        this.listSelectorEvents.onItemRemoved.dispatch(this, key);
    };
    ListSelector.prototype.onItemSelectedEvent = function (key) {
        this.listSelectorEvents.onItemSelected.dispatch(this, key);
    };
    Object.defineProperty(ListSelector.prototype, "onItemAdded", {
        /**
         * Gets the event that is fired when an item is added to the list of items.
         * @returns {Event<ListSelector<Config>, string>}
         */
        get: function () {
            return this.listSelectorEvents.onItemAdded.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListSelector.prototype, "onItemRemoved", {
        /**
         * Gets the event that is fired when an item is removed from the list of items.
         * @returns {Event<ListSelector<Config>, string>}
         */
        get: function () {
            return this.listSelectorEvents.onItemRemoved.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListSelector.prototype, "onItemSelected", {
        /**
         * Gets the event that is fired when an item is selected from the list of items.
         * @returns {Event<ListSelector<Config>, string>}
         */
        get: function () {
            return this.listSelectorEvents.onItemSelected.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    return ListSelector;
}(component_1.Component));
exports.ListSelector = ListSelector;

},{"../arrayutils":6,"../eventdispatcher":86,"../localization/i18n":91,"./component":23}],34:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataLabel = exports.MetadataLabelContent = void 0;
var label_1 = require("./label");
/**
 * Enumerates the types of content that the {@link MetadataLabel} can display.
 */
var MetadataLabelContent;
(function (MetadataLabelContent) {
    /**
     * Title of the data source.
     */
    MetadataLabelContent[MetadataLabelContent["Title"] = 0] = "Title";
    /**
     * Description fo the data source.
     */
    MetadataLabelContent[MetadataLabelContent["Description"] = 1] = "Description";
})(MetadataLabelContent = exports.MetadataLabelContent || (exports.MetadataLabelContent = {}));
/**
 * A label that can be configured to display certain metadata.
 */
var MetadataLabel = /** @class */ (function (_super) {
    __extends(MetadataLabel, _super);
    function MetadataLabel(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['label-metadata', 'label-metadata-' + MetadataLabelContent[config.content].toLowerCase()],
        }, _this.config);
        return _this;
    }
    MetadataLabel.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var uiconfig = uimanager.getConfig();
        var init = function () {
            switch (config.content) {
                case MetadataLabelContent.Title:
                    _this.setText(uiconfig.metadata.title);
                    break;
                case MetadataLabelContent.Description:
                    _this.setText(uiconfig.metadata.description);
                    break;
            }
        };
        var unload = function () {
            _this.setText(null);
        };
        // Init label
        init();
        // Clear labels when source is unloaded
        player.on(player.exports.PlayerEvent.SourceUnloaded, unload);
        uimanager.getConfig().events.onUpdated.subscribe(init);
    };
    return MetadataLabel;
}(label_1.Label));
exports.MetadataLabel = MetadataLabel;

},{"./label":31}],35:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PictureInPictureToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles Apple macOS picture-in-picture mode.
 */
var PictureInPictureToggleButton = /** @class */ (function (_super) {
    __extends(PictureInPictureToggleButton, _super);
    function PictureInPictureToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-piptogglebutton',
            text: i18n_1.i18n.getLocalizer('pictureInPicture'),
        }, _this.config);
        return _this;
    }
    PictureInPictureToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var isPictureInPictureAvailable = function () {
            return player.isViewModeAvailable(player.exports.ViewMode.PictureInPicture);
        };
        var pictureInPictureStateHandler = function () {
            player.getViewMode() === player.exports.ViewMode.PictureInPicture ? _this.on() : _this.off();
        };
        var pictureInPictureAvailabilityChangedHandler = function () {
            isPictureInPictureAvailable() ? _this.show() : _this.hide();
        };
        player.on(player.exports.PlayerEvent.ViewModeChanged, pictureInPictureStateHandler);
        // Available only in our native SDKs for now
        if (player.exports.PlayerEvent.ViewModeAvailabilityChanged) {
            player.on(player.exports.PlayerEvent.ViewModeAvailabilityChanged, pictureInPictureAvailabilityChangedHandler);
        }
        uimanager.getConfig().events.onUpdated.subscribe(pictureInPictureAvailabilityChangedHandler);
        this.onClick.subscribe(function () {
            if (!isPictureInPictureAvailable()) {
                if (console) {
                    console.log('PIP unavailable');
                }
                return;
            }
            var targetViewMode = player.getViewMode() === player.exports.ViewMode.PictureInPicture
                ? player.exports.ViewMode.Inline
                : player.exports.ViewMode.PictureInPicture;
            player.setViewMode(targetViewMode);
        });
        // Startup init
        pictureInPictureAvailabilityChangedHandler(); // Hide button if PIP not available
        pictureInPictureStateHandler();
    };
    return PictureInPictureToggleButton;
}(togglebutton_1.ToggleButton));
exports.PictureInPictureToggleButton = PictureInPictureToggleButton;

},{"../localization/i18n":91,"./togglebutton":74}],36:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackSpeedSelectBox = void 0;
var selectbox_1 = require("./selectbox");
var i18n_1 = require("../localization/i18n");
/**
 * A select box providing a selection of different playback speeds.
 */
var PlaybackSpeedSelectBox = /** @class */ (function (_super) {
    __extends(PlaybackSpeedSelectBox, _super);
    function PlaybackSpeedSelectBox(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.defaultPlaybackSpeeds = [0.25, 0.5, 1, 1.5, 2];
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-playbackspeedselectbox'],
        }, _this.config);
        return _this;
    }
    PlaybackSpeedSelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addDefaultItems();
        this.onItemSelected.subscribe(function (sender, value) {
            player.setPlaybackSpeed(parseFloat(value));
            _this.selectItem(value);
        });
        var setDefaultValue = function () {
            var playbackSpeed = player.getPlaybackSpeed();
            _this.setSpeed(playbackSpeed);
        };
        player.on(player.exports.PlayerEvent.PlaybackSpeedChanged, setDefaultValue);
        uimanager.getConfig().events.onUpdated.subscribe(setDefaultValue);
    };
    PlaybackSpeedSelectBox.prototype.setSpeed = function (speed) {
        if (!this.selectItem(String(speed))) {
            // a playback speed was set which is not in the list, add it to the list to show it to the user
            this.clearItems();
            this.addDefaultItems([speed]);
            this.selectItem(String(speed));
        }
    };
    PlaybackSpeedSelectBox.prototype.addDefaultItems = function (customItems) {
        var _this = this;
        if (customItems === void 0) { customItems = []; }
        var sortedSpeeds = this.defaultPlaybackSpeeds.concat(customItems).sort();
        sortedSpeeds.forEach(function (element) {
            if (element !== 1) {
                _this.addItem(String(element), "".concat(element, "x"));
            }
            else {
                _this.addItem(String(element), i18n_1.i18n.getLocalizer('normal'));
            }
        });
    };
    PlaybackSpeedSelectBox.prototype.clearItems = function () {
        this.items = [];
        this.selectedItem = null;
    };
    return PlaybackSpeedSelectBox;
}(selectbox_1.SelectBox));
exports.PlaybackSpeedSelectBox = PlaybackSpeedSelectBox;

},{"../localization/i18n":91,"./selectbox":46}],37:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackTimeLabel = exports.PlaybackTimeLabelMode = void 0;
var label_1 = require("./label");
var playerutils_1 = require("../playerutils");
var stringutils_1 = require("../stringutils");
var i18n_1 = require("../localization/i18n");
var PlaybackTimeLabelMode;
(function (PlaybackTimeLabelMode) {
    /**
     * Displays the current time
     */
    PlaybackTimeLabelMode[PlaybackTimeLabelMode["CurrentTime"] = 0] = "CurrentTime";
    /**
     * Displays the duration of the content
     */
    PlaybackTimeLabelMode[PlaybackTimeLabelMode["TotalTime"] = 1] = "TotalTime";
    /**
     * Displays the current time and the duration of the content
     * Format: ${currentTime} / ${totalTime}
     */
    PlaybackTimeLabelMode[PlaybackTimeLabelMode["CurrentAndTotalTime"] = 2] = "CurrentAndTotalTime";
    /**
     * Displays the remaining time of the content
     */
    PlaybackTimeLabelMode[PlaybackTimeLabelMode["RemainingTime"] = 3] = "RemainingTime";
})(PlaybackTimeLabelMode = exports.PlaybackTimeLabelMode || (exports.PlaybackTimeLabelMode = {}));
/**
 * A label that display the current playback time and the total time through {@link PlaybackTimeLabel#setTime setTime}
 * or any string through {@link PlaybackTimeLabel#setText setText}.
 */
var PlaybackTimeLabel = /** @class */ (function (_super) {
    __extends(PlaybackTimeLabel, _super);
    function PlaybackTimeLabel(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-playbacktimelabel',
            timeLabelMode: PlaybackTimeLabelMode.CurrentAndTotalTime,
            hideInLivePlayback: false,
        }, _this.config);
        return _this;
    }
    PlaybackTimeLabel.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var live = false;
        var liveCssClass = this.prefixCss('ui-playbacktimelabel-live');
        var liveEdgeCssClass = this.prefixCss('ui-playbacktimelabel-live-edge');
        var minWidth = 0;
        var liveClickHandler = function () {
            player.timeShift(0);
        };
        var updateLiveState = function () {
            // Player is playing a live stream when the duration is infinite
            live = player.isLive();
            // Attach/detach live marker class
            if (live) {
                _this.getDomElement().addClass(liveCssClass);
                _this.setText(i18n_1.i18n.getLocalizer('live'));
                if (config.hideInLivePlayback) {
                    _this.hide();
                }
                _this.onClick.subscribe(liveClickHandler);
                updateLiveTimeshiftState();
            }
            else {
                _this.getDomElement().removeClass(liveCssClass);
                _this.getDomElement().removeClass(liveEdgeCssClass);
                _this.show();
                _this.onClick.unsubscribe(liveClickHandler);
            }
        };
        var updateLiveTimeshiftState = function () {
            if (!live) {
                return;
            }
            // The player is only at the live edge iff the stream is not shifted and it is actually playing or playback has
            // never been started (meaning it isn't paused). A player that is paused is always behind the live edge.
            // An exception is made for live streams without a timeshift window, because here we "stop" playback instead
            // of pausing it (from a UI perspective), so we keep the live edge indicator on because a play would always
            // resume at the live edge.
            var isTimeshifted = player.getTimeShift() < 0;
            var isTimeshiftAvailable = player.getMaxTimeShift() < 0;
            if (!isTimeshifted && (!player.isPaused() || !isTimeshiftAvailable)) {
                _this.getDomElement().addClass(liveEdgeCssClass);
            }
            else {
                _this.getDomElement().removeClass(liveEdgeCssClass);
            }
        };
        var liveStreamDetector = new playerutils_1.PlayerUtils.LiveStreamDetector(player, uimanager);
        liveStreamDetector.onLiveChanged.subscribe(function (sender, args) {
            live = args.live;
            updateLiveState();
        });
        liveStreamDetector.detect(); // Initial detection
        var playbackTimeHandler = function () {
            if (!live && player.getDuration() !== Infinity) {
                _this.setTime(playerutils_1.PlayerUtils.getCurrentTimeRelativeToSeekableRange(player), player.getDuration());
            }
            // To avoid 'jumping' in the UI by varying label sizes due to non-monospaced fonts,
            // we gradually increase the min-width with the content to reach a stable size.
            var width = _this.getDomElement().width();
            if (width > minWidth) {
                minWidth = width;
                _this.getDomElement().css({
                    'min-width': minWidth + 'px',
                });
            }
        };
        var updateTimeFormatBasedOnDuration = function () {
            // Set time format depending on source duration
            _this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?
                stringutils_1.StringUtils.FORMAT_HHMMSS : stringutils_1.StringUtils.FORMAT_MMSS;
            playbackTimeHandler();
        };
        player.on(player.exports.PlayerEvent.TimeChanged, playbackTimeHandler);
        player.on(player.exports.PlayerEvent.Ready, updateTimeFormatBasedOnDuration);
        player.on(player.exports.PlayerEvent.Seeked, playbackTimeHandler);
        player.on(player.exports.PlayerEvent.TimeShift, updateLiveTimeshiftState);
        player.on(player.exports.PlayerEvent.TimeShifted, updateLiveTimeshiftState);
        player.on(player.exports.PlayerEvent.Playing, updateLiveTimeshiftState);
        player.on(player.exports.PlayerEvent.Paused, updateLiveTimeshiftState);
        player.on(player.exports.PlayerEvent.StallStarted, updateLiveTimeshiftState);
        player.on(player.exports.PlayerEvent.StallEnded, updateLiveTimeshiftState);
        var init = function () {
            // Reset min-width when a new source is ready (especially for switching VOD/Live modes where the label content
            // changes)
            minWidth = 0;
            _this.getDomElement().css({
                'min-width': null,
            });
            updateTimeFormatBasedOnDuration();
        };
        uimanager.getConfig().events.onUpdated.subscribe(init);
        init();
    };
    /**
     * Sets the current playback time and total duration.
     * @param playbackSeconds the current playback time in seconds
     * @param durationSeconds the total duration in seconds
     */
    PlaybackTimeLabel.prototype.setTime = function (playbackSeconds, durationSeconds) {
        var currentTime = stringutils_1.StringUtils.secondsToTime(playbackSeconds, this.timeFormat);
        var totalTime = stringutils_1.StringUtils.secondsToTime(durationSeconds, this.timeFormat);
        switch (this.config.timeLabelMode) {
            case PlaybackTimeLabelMode.CurrentTime:
                this.setText("".concat(currentTime));
                break;
            case PlaybackTimeLabelMode.TotalTime:
                this.setText("".concat(totalTime));
                break;
            case PlaybackTimeLabelMode.CurrentAndTotalTime:
                this.setText("".concat(currentTime, " / ").concat(totalTime));
                break;
            case PlaybackTimeLabelMode.RemainingTime:
                var remainingTime = stringutils_1.StringUtils.secondsToTime(durationSeconds - playbackSeconds, this.timeFormat);
                this.setText("".concat(remainingTime));
                break;
        }
    };
    /**
     * Sets the current time format
     * @param timeFormat the time format
     */
    PlaybackTimeLabel.prototype.setTimeFormat = function (timeFormat) {
        this.timeFormat = timeFormat;
    };
    return PlaybackTimeLabel;
}(label_1.Label));
exports.PlaybackTimeLabel = PlaybackTimeLabel;

},{"../localization/i18n":91,"../playerutils":97,"../stringutils":110,"./label":31}],38:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var playerutils_1 = require("../playerutils");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles between playback and pause.
 */
var PlaybackToggleButton = exports.PlaybackToggleButton = /** @class */ (function (_super) {
    __extends(PlaybackToggleButton, _super);
    function PlaybackToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-playbacktogglebutton',
            text: i18n_1.i18n.getLocalizer('play'),
            onAriaLabel: i18n_1.i18n.getLocalizer('pause'),
            offAriaLabel: i18n_1.i18n.getLocalizer('play'),
        }, _this.config);
        _this.isPlayInitiated = false;
        return _this;
    }
    PlaybackToggleButton.prototype.configure = function (player, uimanager, handleClickEvent) {
        var _this = this;
        if (handleClickEvent === void 0) { handleClickEvent = true; }
        _super.prototype.configure.call(this, player, uimanager);
        // Set enterFullscreenOnInitialPlayback if set in the uimanager config
        if (typeof uimanager.getConfig().enterFullscreenOnInitialPlayback === 'boolean') {
            this.config.enterFullscreenOnInitialPlayback = uimanager.getConfig().enterFullscreenOnInitialPlayback;
        }
        var isSeeking = false;
        var firstPlay = true;
        // Handler to update button state based on player state
        var playbackStateHandler = function () {
            // If the UI is currently seeking, playback is temporarily stopped but the buttons should
            // not reflect that and stay as-is (e.g indicate playback while seeking).
            if (isSeeking) {
                return;
            }
            if (player.isPlaying() || _this.isPlayInitiated) {
                _this.on();
            }
            else {
                _this.off();
            }
        };
        // Call handler upon these events
        player.on(player.exports.PlayerEvent.Play, function (e) {
            _this.isPlayInitiated = true;
            firstPlay = false;
            playbackStateHandler();
        });
        player.on(player.exports.PlayerEvent.Paused, function (e) {
            _this.isPlayInitiated = false;
            playbackStateHandler();
        });
        player.on(player.exports.PlayerEvent.Playing, function (e) {
            _this.isPlayInitiated = false;
            playbackStateHandler();
        });
        // after unloading + loading a new source, the player might be in a different playing state (from playing into stopped)
        player.on(player.exports.PlayerEvent.SourceLoaded, playbackStateHandler);
        uimanager.getConfig().events.onUpdated.subscribe(playbackStateHandler);
        player.on(player.exports.PlayerEvent.SourceUnloaded, playbackStateHandler);
        // when playback finishes, player turns to paused mode
        player.on(player.exports.PlayerEvent.PlaybackFinished, playbackStateHandler);
        player.on(player.exports.PlayerEvent.CastStarted, playbackStateHandler);
        // When a playback attempt is rejected with warning 5008, we switch the button state back to off
        // This is required for blocked autoplay, because there is no Paused event in such case
        player.on(player.exports.PlayerEvent.Warning, function (event) {
            if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {
                _this.isPlayInitiated = false;
                firstPlay = true;
                _this.off();
            }
        });
        var updateLiveState = function () {
            var showStopToggle = player.isLive() && !playerutils_1.PlayerUtils.isTimeShiftAvailable(player);
            if (showStopToggle) {
                _this.getDomElement().addClass(_this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));
            }
            else {
                _this.getDomElement().removeClass(_this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));
            }
        };
        // Detect absence of timeshifting on live streams and add tagging class to convert button icons to play/stop
        var timeShiftDetector = new playerutils_1.PlayerUtils.TimeShiftAvailabilityDetector(player);
        var liveStreamDetector = new playerutils_1.PlayerUtils.LiveStreamDetector(player, uimanager);
        timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe(function () { return updateLiveState(); });
        liveStreamDetector.onLiveChanged.subscribe(function () { return updateLiveState(); });
        timeShiftDetector.detect(); // Initial detection
        liveStreamDetector.detect();
        if (handleClickEvent) {
            // Control player by button events
            // When a button event triggers a player API call, events are fired which in turn call the event handler
            // above that updated the button state.
            this.onClick.subscribe(function () {
                if (player.isPlaying() || _this.isPlayInitiated) {
                    player.pause('ui');
                }
                else {
                    player.play('ui');
                    if (firstPlay && _this.config.enterFullscreenOnInitialPlayback) {
                        player.setViewMode(player.exports.ViewMode.Fullscreen);
                    }
                }
            });
        }
        // Track UI seeking status
        uimanager.onSeek.subscribe(function () {
            isSeeking = true;
        });
        uimanager.onSeeked.subscribe(function () {
            isSeeking = false;
        });
        // Startup init
        playbackStateHandler();
    };
    PlaybackToggleButton.CLASS_STOPTOGGLE = 'stoptoggle';
    return PlaybackToggleButton;
}(togglebutton_1.ToggleButton));

},{"../localization/i18n":91,"../playerutils":97,"./togglebutton":74}],39:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackToggleOverlay = void 0;
var container_1 = require("./container");
var hugeplaybacktogglebutton_1 = require("./hugeplaybacktogglebutton");
/**
 * Overlays the player and displays error messages.
 */
var PlaybackToggleOverlay = /** @class */ (function (_super) {
    __extends(PlaybackToggleOverlay, _super);
    function PlaybackToggleOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.playbackToggleButton = new hugeplaybacktogglebutton_1.HugePlaybackToggleButton({
            enterFullscreenOnInitialPlayback: Boolean(config.enterFullscreenOnInitialPlayback),
        });
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-playbacktoggle-overlay',
            components: [_this.playbackToggleButton],
        }, _this.config);
        return _this;
    }
    return PlaybackToggleOverlay;
}(container_1.Container));
exports.PlaybackToggleOverlay = PlaybackToggleOverlay;

},{"./container":24,"./hugeplaybacktogglebutton":28}],40:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecommendationOverlay = void 0;
var container_1 = require("./container");
var component_1 = require("./component");
var dom_1 = require("../dom");
var stringutils_1 = require("../stringutils");
var hugereplaybutton_1 = require("./hugereplaybutton");
/**
 * Overlays the player and displays recommended videos.
 */
var RecommendationOverlay = /** @class */ (function (_super) {
    __extends(RecommendationOverlay, _super);
    function RecommendationOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.replayButton = new hugereplaybutton_1.HugeReplayButton();
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-recommendation-overlay',
            hidden: true,
            components: [_this.replayButton],
        }, _this.config);
        return _this;
    }
    RecommendationOverlay.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var clearRecommendations = function () {
            for (var _i = 0, _a = _this.getComponents().slice(); _i < _a.length; _i++) {
                var component = _a[_i];
                if (component instanceof RecommendationItem) {
                    _this.removeComponent(component);
                }
            }
            _this.updateComponents();
            _this.getDomElement().removeClass(_this.prefixCss('recommendations'));
        };
        var setupRecommendations = function () {
            clearRecommendations();
            var recommendations = uimanager.getConfig().recommendations;
            if (recommendations.length > 0) {
                var index = 1;
                for (var _i = 0, recommendations_1 = recommendations; _i < recommendations_1.length; _i++) {
                    var item = recommendations_1[_i];
                    _this.addComponent(new RecommendationItem({
                        itemConfig: item,
                        cssClasses: ['recommendation-item-' + (index++)],
                    }));
                }
                _this.updateComponents(); // create container DOM elements
                _this.getDomElement().addClass(_this.prefixCss('recommendations'));
            }
        };
        uimanager.getConfig().events.onUpdated.subscribe(setupRecommendations);
        // Remove recommendations and hide overlay when source is unloaded
        player.on(player.exports.PlayerEvent.SourceUnloaded, function () {
            clearRecommendations();
            _this.hide();
        });
        // Display recommendations when playback has finished
        player.on(player.exports.PlayerEvent.PlaybackFinished, function () {
            _this.show();
        });
        // Hide recommendations when playback starts, e.g. a restart
        player.on(player.exports.PlayerEvent.Play, function () {
            _this.hide();
        });
        // Init on startup
        setupRecommendations();
    };
    return RecommendationOverlay;
}(container_1.Container));
exports.RecommendationOverlay = RecommendationOverlay;
/**
 * An item of the {@link RecommendationOverlay}. Used only internally in {@link RecommendationOverlay}.
 */
var RecommendationItem = /** @class */ (function (_super) {
    __extends(RecommendationItem, _super);
    function RecommendationItem(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-recommendation-item',
            itemConfig: null, // this must be passed in from outside
        }, _this.config);
        return _this;
    }
    RecommendationItem.prototype.toDomElement = function () {
        var config = this.config.itemConfig;
        var itemElement = new dom_1.DOM('a', {
            'id': this.config.id,
            'class': this.getCssClasses(),
            'href': config.url,
        }).css({ 'background-image': "url(".concat(config.thumbnail, ")") });
        var bgElement = new dom_1.DOM('div', {
            'class': this.prefixCss('background'),
        });
        itemElement.append(bgElement);
        var titleElement = new dom_1.DOM('span', {
            'class': this.prefixCss('title'),
        }).append(new dom_1.DOM('span', {
            'class': this.prefixCss('innertitle'),
        }).html(config.title));
        itemElement.append(titleElement);
        var timeElement = new dom_1.DOM('span', {
            'class': this.prefixCss('duration'),
        }).append(new dom_1.DOM('span', {
            'class': this.prefixCss('innerduration'),
        }).html(config.duration ? stringutils_1.StringUtils.secondsToTime(config.duration) : ''));
        itemElement.append(timeElement);
        return itemElement;
    };
    return RecommendationItem;
}(component_1.Component));

},{"../dom":84,"../stringutils":110,"./component":23,"./container":24,"./hugereplaybutton":29}],41:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReplayButton = void 0;
var button_1 = require("./button");
var i18n_1 = require("../localization/i18n");
var playerutils_1 = require("../playerutils");
/**
 * A button to play/replay a video.
 */
var ReplayButton = /** @class */ (function (_super) {
    __extends(ReplayButton, _super);
    function ReplayButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-replaybutton',
            text: i18n_1.i18n.getLocalizer('replay'),
        }, _this.config);
        return _this;
    }
    ReplayButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        if (player.isLive()) {
            this.hide();
        }
        var liveStreamDetector = new playerutils_1.PlayerUtils.LiveStreamDetector(player, uimanager);
        liveStreamDetector.onLiveChanged.subscribe(function (sender, args) {
            if (args.live) {
                _this.hide();
            }
            else {
                _this.show();
            }
        });
        this.onClick.subscribe(function () {
            if (!player.hasEnded()) {
                player.seek(0);
                // Not calling `play` will keep the play/pause state as is
            }
            else {
                // If playback has already ended, calling `play` will automatically restart from the beginning
                player.play('ui');
            }
        });
    };
    return ReplayButton;
}(button_1.Button));
exports.ReplayButton = ReplayButton;

},{"../localization/i18n":91,"../playerutils":97,"./button":17}],42:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeekBar = void 0;
var groupplaybackapi_1 = require("./../groupplaybackapi");
var component_1 = require("./component");
var dom_1 = require("../dom");
var eventdispatcher_1 = require("../eventdispatcher");
var timeout_1 = require("../timeout");
var playerutils_1 = require("../playerutils");
var stringutils_1 = require("../stringutils");
var seekbarcontroller_1 = require("./seekbarcontroller");
var i18n_1 = require("../localization/i18n");
var browserutils_1 = require("../browserutils");
var timelinemarkershandler_1 = require("./timelinemarkershandler");
var seekbarbufferlevel_1 = require("./seekbarbufferlevel");
/**
 * A seek bar to seek within the player's media. It displays the current playback position, amount of buffed data, seek
 * target, and keeps status about an ongoing seek.
 *
 * The seek bar displays different 'bars':
 *  - the playback position, i.e. the position in the media at which the player current playback pointer is positioned
 *  - the buffer position, which usually is the playback position plus the time span that is already buffered ahead
 *  - the seek position, used to preview to where in the timeline a seek will jump to
 */
var SeekBar = exports.SeekBar = /** @class */ (function (_super) {
    __extends(SeekBar, _super);
    function SeekBar(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        /**
         * Buffer of the the current playback position. The position must be buffered in case the element
         * needs to be refreshed with {@link #refreshPlaybackPosition}.
         * @type {number}
         */
        _this.playbackPositionPercentage = 0;
        _this.isUserSeeking = false;
        _this.seekBarEvents = {
            /**
             * Fired when a scrubbing seek operation is started.
             */
            onSeek: new eventdispatcher_1.EventDispatcher(),
            /**
             * Fired during a scrubbing seek to indicate that the seek preview (i.e. the video frame) should be updated.
             */
            onSeekPreview: new eventdispatcher_1.EventDispatcher(),
            /**
             * Fired when a scrubbing seek has finished or when a direct seek is issued.
             */
            onSeeked: new eventdispatcher_1.EventDispatcher(),
        };
        _this.seekWhileScrubbing = function (sender, args) {
            if (args.scrubbing) {
                _this.seek(args.position);
            }
        };
        _this.getTargetSeekPosition = function (percentage) {
            var target;
            if (_this.player.isLive()) {
                var maxTimeShift = _this.player.getMaxTimeShift();
                target = maxTimeShift - (maxTimeShift * (percentage / 100));
            }
            else {
                var seekableRangeStart = playerutils_1.PlayerUtils.getSeekableRangeStart(_this.player, 0);
                var relativeSeekTarget = _this.player.getDuration() * (percentage / 100);
                target = relativeSeekTarget + seekableRangeStart;
            }
            return target;
        };
        _this.seek = function (percentage) {
            var targetPlaybackPosition = _this.getTargetSeekPosition(percentage);
            if (_this.player.isLive()) {
                _this.player.timeShift(targetPlaybackPosition, 'ui');
            }
            else {
                _this.player.seek(targetPlaybackPosition, 'ui');
            }
        };
        var keyStepIncrements = _this.config.keyStepIncrements || {
            leftRight: 1,
            upDown: 5,
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-seekbar',
            vertical: false,
            smoothPlaybackPositionUpdateIntervalMs: 50,
            keyStepIncrements: keyStepIncrements,
            ariaLabel: i18n_1.i18n.getLocalizer('seekBar'),
            tabIndex: 0,
            snappingRange: 1,
            enableSeekPreview: true,
        }, _this.config);
        _this.label = _this.config.label;
        return _this;
    }
    SeekBar.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        if (this.hasLabel()) {
            this.getLabel().initialize();
        }
    };
    SeekBar.prototype.setAriaSliderMinMax = function (min, max) {
        this.getDomElement().attr('aria-valuemin', min);
        this.getDomElement().attr('aria-valuemax', max);
    };
    SeekBar.prototype.setAriaSliderValues = function () {
        if (this.seekBarType === seekbarcontroller_1.SeekBarType.Live) {
            var timeshiftValue = Math.ceil(this.player.getTimeShift()).toString();
            this.getDomElement().attr('aria-valuenow', timeshiftValue);
            this.getDomElement().attr('aria-valuetext', "".concat(i18n_1.i18n.performLocalization(i18n_1.i18n.getLocalizer('seekBar.timeshift')), " ").concat(i18n_1.i18n.performLocalization(i18n_1.i18n.getLocalizer('seekBar.value')), ": ").concat(timeshiftValue));
        }
        else if (this.seekBarType === seekbarcontroller_1.SeekBarType.Vod) {
            var ariaValueText = "".concat(stringutils_1.StringUtils.secondsToText(this.player.getCurrentTime()), " ").concat(i18n_1.i18n.performLocalization(i18n_1.i18n.getLocalizer('seekBar.durationText')), " ").concat(stringutils_1.StringUtils.secondsToText(this.player.getDuration()));
            this.getDomElement().attr('aria-valuenow', Math.floor(this.player.getCurrentTime()).toString());
            this.getDomElement().attr('aria-valuetext', ariaValueText);
        }
    };
    SeekBar.prototype.getPlaybackPositionPercentage = function () {
        if (this.player.isLive()) {
            return 100 - (100 / this.player.getMaxTimeShift() * this.player.getTimeShift());
        }
        return 100 / this.player.getDuration() * this.getRelativeCurrentTime();
    };
    SeekBar.prototype.updateBufferLevel = function (playbackPositionPercentage) {
        var bufferLoadedPercentageLevel;
        if (this.player.isLive()) {
            // Always show full buffer for live streams
            bufferLoadedPercentageLevel = 100;
        }
        else {
            bufferLoadedPercentageLevel = playbackPositionPercentage + (0, seekbarbufferlevel_1.getMinBufferLevel)(this.player);
        }
        this.setBufferPosition(bufferLoadedPercentageLevel);
    };
    SeekBar.prototype.configure = function (player, uimanager, configureSeek) {
        var _this = this;
        if (configureSeek === void 0) { configureSeek = true; }
        _super.prototype.configure.call(this, player, uimanager);
        this.player = player;
        // Apply scaling transform to the backdrop bar to have all bars rendered similarly
        // (the call must be up here to be executed for the volume slider as well)
        this.setPosition(this.seekBarBackdrop, 100);
        // Add seekbar controls to the seekbar
        var seekBarController = new seekbarcontroller_1.SeekBarController(this.config.keyStepIncrements, player, uimanager.getConfig().volumeController);
        seekBarController.setSeekBarControls(this.getDomElement(), function () { return _this.seekBarType; });
        // The configureSeek flag can be used by subclasses to disable configuration as seek bar. E.g. the volume
        // slider is reusing this component but adds its own functionality, and does not need the seek functionality.
        // This is actually a hack, the proper solution would be for both seek bar and volume sliders to extend
        // a common base slider component and implement their functionality there.
        if (!configureSeek) {
            this.seekBarType = seekbarcontroller_1.SeekBarType.Volume;
            return;
        }
        uimanager.onControlsShow.subscribe(function () {
            _this.isUiShown = true;
        });
        uimanager.onControlsHide.subscribe(function () {
            _this.isUiShown = false;
        });
        var isPlaying = false;
        var scrubbing = false;
        var isPlayerSeeking = false;
        var suspension;
        // Update playback and buffer positions
        var playbackPositionHandler = function (event, forceUpdate) {
            if (event === void 0) { event = null; }
            if (forceUpdate === void 0) { forceUpdate = false; }
            if (_this.isUserSeeking) {
                // We caught a seek preview seek, do not update the seekbar
                return;
            }
            var playbackPositionPercentage = _this.getPlaybackPositionPercentage();
            _this.updateBufferLevel(playbackPositionPercentage);
            // The segment request finished is used to help the playback position move, when the smooth playback position is not enabled.
            // At the same time when the user is scrubbing, we also move the position of the seekbar to display a preview during scrubbing.
            // When the user is scrubbing we do not record this as a user seek operation, as the user has yet to finish their seek,
            // but we should not move the playback position to not create a jumping behaviour.
            if (scrubbing && event && event.type === player.exports.PlayerEvent.SegmentRequestFinished && playbackPositionPercentage !== _this.playbackPositionPercentage) {
                playbackPositionPercentage = _this.playbackPositionPercentage;
            }
            if (player.isLive()) {
                if (player.getMaxTimeShift() === 0) {
                    // This case must be explicitly handled to avoid division by zero
                    _this.setPlaybackPosition(100);
                }
                else {
                    if (!_this.isSeeking()) {
                        _this.setPlaybackPosition(playbackPositionPercentage);
                    }
                    _this.setAriaSliderMinMax(player.getMaxTimeShift().toString(), '0');
                }
            }
            else {
                // Update playback position only in paused state or in the initial startup state where player is neither
                // paused nor playing. Playback updates are handled in the Timeout below.
                var isInInitialStartupState = _this.config.smoothPlaybackPositionUpdateIntervalMs === SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED
                    || forceUpdate || player.isPaused();
                var isNeitherPausedNorPlaying = player.isPaused() === player.isPlaying();
                if ((isInInitialStartupState || isNeitherPausedNorPlaying) && !_this.isSeeking()) {
                    _this.setPlaybackPosition(playbackPositionPercentage);
                }
                _this.setAriaSliderMinMax('0', player.getDuration().toString());
            }
            if (_this.isUiShown) {
                _this.setAriaSliderValues();
            }
        };
        // Update seekbar upon these events
        // init playback position when the player is ready
        player.on(player.exports.PlayerEvent.Ready, playbackPositionHandler);
        // update playback position when it changes
        player.on(player.exports.PlayerEvent.TimeChanged, playbackPositionHandler);
        // update bufferlevel when buffering is complete
        player.on(player.exports.PlayerEvent.StallEnded, playbackPositionHandler);
        // update playback position when a timeshift has finished
        player.on(player.exports.PlayerEvent.TimeShifted, playbackPositionHandler);
        // update bufferlevel when a segment has been downloaded
        player.on(player.exports.PlayerEvent.SegmentRequestFinished, playbackPositionHandler);
        this.configureLivePausedTimeshiftUpdater(player, uimanager, playbackPositionHandler);
        // Seek handling
        var onPlayerSeek = function () {
            isPlayerSeeking = true;
            _this.setSeeking(true);
            scrubbing = false;
        };
        var onPlayerSeeked = function (event, forceUpdate) {
            if (event === void 0) { event = null; }
            if (forceUpdate === void 0) { forceUpdate = false; }
            isPlayerSeeking = false;
            _this.setSeeking(false);
            // update playback position when a seek has finished
            playbackPositionHandler(event, forceUpdate);
        };
        var restorePlayingState = function () {
            // Continue playback after seek if player was playing when seek started
            if (isPlaying) {
                // use the same issuer here as in the pause on seek
                player.play('ui-seek');
            }
        };
        player.on(player.exports.PlayerEvent.Seek, onPlayerSeek);
        player.on(player.exports.PlayerEvent.Seeked, onPlayerSeeked);
        player.on(player.exports.PlayerEvent.TimeShift, onPlayerSeek);
        player.on(player.exports.PlayerEvent.TimeShifted, onPlayerSeeked);
        var isGroupPlaybackAPIAvailable = function (player) {
            return !!player.groupPlayback;
        };
        this.onSeek.subscribe(function (sender) {
            // track seeking status so we can catch events from seek preview seeks
            _this.isUserSeeking = true;
            // Notify UI manager of started seek
            uimanager.onSeek.dispatch(sender);
            if (isGroupPlaybackAPIAvailable(player) && player.groupPlayback.hasJoined() && !suspension) {
                suspension = player.groupPlayback.beginSuspension(groupplaybackapi_1.GroupPlaybackSuspensionReason.UserIsScrubbing);
            }
            // Save current playback state before performing the seek
            if (!isPlayerSeeking) {
                isPlaying = player.isPlaying();
                // Pause playback while seeking
                if (isPlaying) {
                    // use a different issuer here, as play/pause on seek is not "really" triggerd by the user
                    player.pause('ui-seek');
                }
            }
        });
        this.onSeekPreview.subscribe(function (sender, args) {
            // Notify UI manager of seek preview
            uimanager.onSeekPreview.dispatch(sender, args);
            scrubbing = args.scrubbing;
        });
        // Set enableSeekPreview if set in the uimanager config
        if (typeof uimanager.getConfig().enableSeekPreview === 'boolean') {
            this.config.enableSeekPreview = uimanager.getConfig().enableSeekPreview;
        }
        // Rate-limited scrubbing seek
        if (this.config.enableSeekPreview) {
            this.onSeekPreview.subscribeRateLimited(this.seekWhileScrubbing, 200);
        }
        this.onSeeked.subscribe(function (sender, percentage) {
            _this.isUserSeeking = false;
            // Do the seek
            _this.seek(percentage);
            // Notify UI manager of finished seek
            uimanager.onSeeked.dispatch(sender);
            // Continue playback after seek if player was playing when seek started
            restorePlayingState();
            if (isGroupPlaybackAPIAvailable(player) && player.groupPlayback.hasJoined() && suspension) {
                var proposedPlaybackTime = _this.getTargetSeekPosition(percentage);
                player.groupPlayback.endSuspension(suspension, { proposedPlaybackTime: proposedPlaybackTime });
                suspension = undefined;
            }
        });
        if (this.hasLabel()) {
            // Configure a seekbar label that is internal to the seekbar)
            this.getLabel().configure(player, uimanager);
        }
        // Hide seekbar for live sources without timeshift
        var isLive = false;
        var hasTimeShift = false;
        var switchVisibility = function (isLive, hasTimeShift) {
            if (isLive && !hasTimeShift) {
                _this.hide();
            }
            else {
                _this.show();
            }
            playbackPositionHandler(null, true);
            _this.refreshPlaybackPosition();
        };
        var liveStreamDetector = new playerutils_1.PlayerUtils.LiveStreamDetector(player, uimanager);
        liveStreamDetector.onLiveChanged.subscribe(function (sender, args) {
            isLive = args.live;
            if (isLive && _this.smoothPlaybackPositionUpdater != null) {
                _this.smoothPlaybackPositionUpdater.clear();
                _this.seekBarType = seekbarcontroller_1.SeekBarType.Live;
            }
            else {
                _this.seekBarType = seekbarcontroller_1.SeekBarType.Vod;
            }
            switchVisibility(isLive, hasTimeShift);
        });
        var timeShiftDetector = new playerutils_1.PlayerUtils.TimeShiftAvailabilityDetector(player);
        timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe(function (sender, args) {
            hasTimeShift = args.timeShiftAvailable;
            switchVisibility(isLive, hasTimeShift);
        });
        // Initial detection
        liveStreamDetector.detect();
        timeShiftDetector.detect();
        // Refresh the playback position when the player resized or the UI is configured. The playback position marker
        // is positioned absolutely and must therefore be updated when the size of the seekbar changes.
        player.on(player.exports.PlayerEvent.PlayerResized, function () {
            _this.refreshPlaybackPosition();
        });
        // Additionally, when this code is called, the seekbar is not part of the UI yet and therefore does not have a size,
        // resulting in a wrong initial position of the marker. Refreshing it once the UI is configured solved this issue.
        uimanager.onConfigured.subscribe(function () {
            _this.refreshPlaybackPosition();
        });
        // It can also happen when a new source is loaded
        player.on(player.exports.PlayerEvent.SourceLoaded, function () {
            _this.refreshPlaybackPosition();
        });
        // Add markers when a source is loaded or update when a marker is added or removed
        uimanager.getConfig().events.onUpdated.subscribe(function () {
            playbackPositionHandler();
        });
        // Set the snappingRange if set in the uimanager config
        if (typeof uimanager.getConfig().seekbarSnappingRange === 'number') {
            this.config.snappingRange = uimanager.getConfig().seekbarSnappingRange;
        }
        // Initialize seekbar
        playbackPositionHandler(); // Set the playback position
        this.setBufferPosition(0);
        this.setSeekPosition(0);
        if (this.config.smoothPlaybackPositionUpdateIntervalMs !== SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED) {
            this.configureSmoothPlaybackPositionUpdater(player, uimanager);
        }
        // Initialize markers
        this.initializeTimelineMarkers(player, uimanager);
    };
    SeekBar.prototype.initializeTimelineMarkers = function (player, uimanager) {
        var _this = this;
        var timelineMarkerConfig = {
            cssPrefix: this.config.cssPrefix,
            snappingRange: this.config.snappingRange,
        };
        this.timelineMarkersHandler = new timelinemarkershandler_1.TimelineMarkersHandler(timelineMarkerConfig, function () { return _this.seekBar.width(); }, this.seekBarMarkersContainer);
        this.timelineMarkersHandler.initialize(player, uimanager);
    };
    /**
     * Update seekbar while a live stream with DVR window is paused.
     * The playback position stays still and the position indicator visually moves towards the back.
     */
    SeekBar.prototype.configureLivePausedTimeshiftUpdater = function (player, uimanager, playbackPositionHandler) {
        var _this = this;
        // Regularly update the playback position while the timeout is active
        this.pausedTimeshiftUpdater = new timeout_1.Timeout(1000, playbackPositionHandler, true);
        // Start updater when a live stream with timeshift window is paused
        player.on(player.exports.PlayerEvent.Paused, function () {
            if (player.isLive() && player.getMaxTimeShift() < 0) {
                _this.pausedTimeshiftUpdater.start();
            }
        });
        // Stop updater when playback continues (no matter if the updater was started before)
        player.on(player.exports.PlayerEvent.Play, function () { return _this.pausedTimeshiftUpdater.clear(); });
    };
    SeekBar.prototype.configureSmoothPlaybackPositionUpdater = function (player, uimanager) {
        var _this = this;
        /*
         * Playback position update
         *
         * We do not update the position directly from the TimeChanged event, because it arrives very jittery and
         * results in a jittery position indicator since the CSS transition time is statically set.
         * To work around this issue, we maintain a local playback position that is updated in a stable regular interval
         * and kept in sync with the player.
         */
        var currentTimeSeekBar = 0;
        var currentTimePlayer = 0;
        var updateIntervalMs = 50;
        var currentTimeUpdateDeltaSecs = updateIntervalMs / 1000;
        this.smoothPlaybackPositionUpdater = new timeout_1.Timeout(updateIntervalMs, function () {
            if (_this.isSeeking()) {
                return;
            }
            currentTimeSeekBar += currentTimeUpdateDeltaSecs;
            try {
                currentTimePlayer = _this.getRelativeCurrentTime();
            }
            catch (error) {
                // Detect if the player has been destroyed and stop updating if so
                if (error instanceof player.exports.PlayerAPINotAvailableError) {
                    _this.smoothPlaybackPositionUpdater.clear();
                }
                // If the current time cannot be read it makes no sense to continue
                return;
            }
            // Sync currentTime of seekbar to player
            var currentTimeDelta = currentTimeSeekBar - currentTimePlayer;
            // If the delta is larger that 2 secs, directly jump the seekbar to the
            // player time instead of smoothly fast forwarding/rewinding.
            if (Math.abs(currentTimeDelta) > 2) {
                currentTimeSeekBar = currentTimePlayer;
            }
            // If currentTimeDelta is negative and below the adjustment threshold,
            // the player is ahead of the seekbar and we 'fast forward' the seekbar
            else if (currentTimeDelta <= -currentTimeUpdateDeltaSecs) {
                currentTimeSeekBar += currentTimeUpdateDeltaSecs;
            }
            // If currentTimeDelta is positive and above the adjustment threshold,
            // the player is behind the seekbar and we 'rewind' the seekbar
            else if (currentTimeDelta >= currentTimeUpdateDeltaSecs) {
                currentTimeSeekBar -= currentTimeUpdateDeltaSecs;
            }
            var playbackPositionPercentage = 100 / player.getDuration() * currentTimeSeekBar;
            _this.setPlaybackPosition(playbackPositionPercentage);
        }, true);
        var startSmoothPlaybackPositionUpdater = function () {
            if (!player.isLive()) {
                currentTimeSeekBar = _this.getRelativeCurrentTime();
                _this.smoothPlaybackPositionUpdater.start();
            }
        };
        var stopSmoothPlaybackPositionUpdater = function () {
            _this.smoothPlaybackPositionUpdater.clear();
        };
        player.on(player.exports.PlayerEvent.Play, startSmoothPlaybackPositionUpdater);
        player.on(player.exports.PlayerEvent.Playing, startSmoothPlaybackPositionUpdater);
        player.on(player.exports.PlayerEvent.Paused, stopSmoothPlaybackPositionUpdater);
        player.on(player.exports.PlayerEvent.PlaybackFinished, stopSmoothPlaybackPositionUpdater);
        player.on(player.exports.PlayerEvent.Seeked, function () {
            currentTimeSeekBar = _this.getRelativeCurrentTime();
        });
        player.on(player.exports.PlayerEvent.SourceUnloaded, stopSmoothPlaybackPositionUpdater);
        if (player.isPlaying()) {
            startSmoothPlaybackPositionUpdater();
        }
    };
    SeekBar.prototype.getRelativeCurrentTime = function () {
        return playerutils_1.PlayerUtils.getCurrentTimeRelativeToSeekableRange(this.player);
    };
    SeekBar.prototype.release = function () {
        _super.prototype.release.call(this);
        if (this.smoothPlaybackPositionUpdater) { // object must not necessarily exist, e.g. in volume slider subclass
            this.smoothPlaybackPositionUpdater.clear();
        }
        if (this.pausedTimeshiftUpdater) {
            this.pausedTimeshiftUpdater.clear();
        }
        if (this.config.enableSeekPreview) {
            this.onSeekPreview.unsubscribe(this.seekWhileScrubbing);
        }
    };
    SeekBar.prototype.toDomElement = function () {
        var _this = this;
        if (this.config.vertical) {
            this.config.cssClasses.push('vertical');
        }
        var seekBarContainer = new dom_1.DOM('div', {
            'id': this.config.id,
            'class': this.getCssClasses(),
            'role': 'slider',
            'aria-label': i18n_1.i18n.performLocalization(this.config.ariaLabel),
            'tabindex': this.config.tabIndex.toString(),
        });
        var seekBar = new dom_1.DOM('div', {
            'class': this.prefixCss('seekbar'),
        });
        this.seekBar = seekBar;
        // Indicator that shows the buffer fill level
        var seekBarBufferLevel = new dom_1.DOM('div', {
            'class': this.prefixCss('seekbar-bufferlevel'),
        });
        this.seekBarBufferPosition = seekBarBufferLevel;
        // Indicator that shows the current playback position
        var seekBarPlaybackPosition = new dom_1.DOM('div', {
            'class': this.prefixCss('seekbar-playbackposition'),
        });
        this.seekBarPlaybackPosition = seekBarPlaybackPosition;
        // A marker of the current playback position, e.g. a dot or line
        var seekBarPlaybackPositionMarker = new dom_1.DOM('div', {
            'class': this.prefixCss('seekbar-playbackposition-marker'),
        });
        this.seekBarPlaybackPositionMarker = seekBarPlaybackPositionMarker;
        // Indicator that show where a seek will go to
        var seekBarSeekPosition = new dom_1.DOM('div', {
            'class': this.prefixCss('seekbar-seekposition'),
        });
        this.seekBarSeekPosition = seekBarSeekPosition;
        // Indicator that shows the full seekbar
        var seekBarBackdrop = new dom_1.DOM('div', {
            'class': this.prefixCss('seekbar-backdrop'),
        });
        this.seekBarBackdrop = seekBarBackdrop;
        var seekBarChapterMarkersContainer = new dom_1.DOM('div', {
            'class': this.prefixCss('seekbar-markers'),
        });
        this.seekBarMarkersContainer = seekBarChapterMarkersContainer;
        seekBar.append(this.seekBarBackdrop, this.seekBarBufferPosition, this.seekBarSeekPosition, this.seekBarPlaybackPosition, this.seekBarMarkersContainer, this.seekBarPlaybackPositionMarker);
        var seeking = false;
        // Define handler functions so we can attach/remove them later
        var mouseTouchMoveHandler = function (e) {
            e.preventDefault();
            // Avoid propagation to VR handler
            if (_this.player.vr != null) {
                e.stopPropagation();
            }
            var targetPercentage = 100 * _this.getOffset(e);
            _this.setSeekPosition(targetPercentage);
            _this.setPlaybackPosition(targetPercentage);
            _this.onSeekPreviewEvent(targetPercentage, true);
        };
        var mouseTouchUpHandler = function (e) {
            e.preventDefault();
            // Remove handlers, seek operation is finished
            new dom_1.DOM(document).off('touchmove mousemove', mouseTouchMoveHandler);
            new dom_1.DOM(document).off('touchend mouseup', mouseTouchUpHandler);
            var targetPercentage = 100 * _this.getOffset(e);
            var snappedChapter = _this.timelineMarkersHandler && _this.timelineMarkersHandler.getMarkerAtPosition(targetPercentage);
            _this.setSeeking(false);
            seeking = false;
            // Fire seeked event
            _this.onSeekedEvent(snappedChapter ? snappedChapter.position : targetPercentage);
        };
        // A seek always start with a touchstart or mousedown directly on the seekbar.
        // To track a mouse seek also outside the seekbar (for touch events this works automatically),
        // so the user does not need to take care that the mouse always stays on the seekbar, we attach the mousemove
        // and mouseup handlers to the whole document. A seek is triggered when the user lifts the mouse key.
        // A seek mouse gesture is thus basically a click with a long time frame between down and up events.
        seekBar.on('touchstart mousedown', function (e) {
            var isTouchEvent = browserutils_1.BrowserUtils.isTouchSupported && _this.isTouchEvent(e);
            // Prevent selection of DOM elements (also prevents mousedown if current event is touchstart)
            e.preventDefault();
            // Avoid propagation to VR handler
            if (_this.player.vr != null) {
                e.stopPropagation();
            }
            _this.setSeeking(true); // Set seeking class on DOM element
            seeking = true; // Set seek tracking flag
            // Fire seeked event
            _this.onSeekEvent();
            // Add handler to track the seek operation over the whole document
            new dom_1.DOM(document).on(isTouchEvent ? 'touchmove' : 'mousemove', mouseTouchMoveHandler);
            new dom_1.DOM(document).on(isTouchEvent ? 'touchend' : 'mouseup', mouseTouchUpHandler);
        });
        // Display seek target indicator when mouse hovers or finger slides over seekbar
        seekBar.on('touchmove mousemove', function (e) {
            e.preventDefault();
            if (seeking) {
                mouseTouchMoveHandler(e);
            }
            var position = 100 * _this.getOffset(e);
            _this.setSeekPosition(position);
            _this.onSeekPreviewEvent(position, false);
            if (_this.hasLabel() && _this.getLabel().isHidden()) {
                _this.getLabel().show();
            }
        });
        // Hide seek target indicator when mouse or finger leaves seekbar
        seekBar.on('touchend mouseleave', function (e) {
            e.preventDefault();
            _this.setSeekPosition(0);
            if (_this.hasLabel()) {
                _this.getLabel().hide();
            }
        });
        seekBarContainer.append(seekBar);
        if (this.label) {
            seekBarContainer.append(this.label.getDomElement());
        }
        return seekBarContainer;
    };
    /**
     * Gets the horizontal offset of a mouse/touch event point from the left edge of the seek bar.
     * @param eventPageX the pageX coordinate of an event to calculate the offset from
     * @returns {number} a number in the range of [0, 1], where 0 is the left edge and 1 is the right edge
     */
    SeekBar.prototype.getHorizontalOffset = function (eventPageX) {
        var elementOffsetPx = this.seekBar.offset().left;
        var widthPx = this.seekBar.width();
        var offsetPx = eventPageX - elementOffsetPx;
        var offset = 1 / widthPx * offsetPx;
        return this.sanitizeOffset(offset);
    };
    /**
     * Gets the vertical offset of a mouse/touch event point from the bottom edge of the seek bar.
     * @param eventPageY the pageX coordinate of an event to calculate the offset from
     * @returns {number} a number in the range of [0, 1], where 0 is the bottom edge and 1 is the top edge
     */
    SeekBar.prototype.getVerticalOffset = function (eventPageY) {
        var elementOffsetPx = this.seekBar.offset().top;
        var widthPx = this.seekBar.height();
        var offsetPx = eventPageY - elementOffsetPx;
        var offset = 1 / widthPx * offsetPx;
        return 1 - this.sanitizeOffset(offset);
    };
    /**
     * Gets the mouse or touch event offset for the current configuration (horizontal or vertical).
     * @param e the event to calculate the offset from
     * @returns {number} a number in the range of [0, 1]
     * @see #getHorizontalOffset
     * @see #getVerticalOffset
     */
    SeekBar.prototype.getOffset = function (e) {
        if (browserutils_1.BrowserUtils.isTouchSupported && this.isTouchEvent(e)) {
            if (this.config.vertical) {
                return this.getVerticalOffset(e.type === 'touchend' ? e.changedTouches[0].pageY : e.touches[0].pageY);
            }
            else {
                return this.getHorizontalOffset(e.type === 'touchend' ? e.changedTouches[0].pageX : e.touches[0].pageX);
            }
        }
        else if (e instanceof MouseEvent) {
            if (this.config.vertical) {
                return this.getVerticalOffset(e.pageY);
            }
            else {
                return this.getHorizontalOffset(e.pageX);
            }
        }
        else {
            if (console) {
                console.warn('invalid event');
            }
            return 0;
        }
    };
    /**
     * Sanitizes the mouse offset to the range of [0, 1].
     *
     * When tracking the mouse outside the seek bar, the offset can be outside the desired range and this method
     * limits it to the desired range. E.g. a mouse event left of the left edge of a seek bar yields an offset below
     * zero, but to display the seek target on the seek bar, we need to limit it to zero.
     *
     * @param offset the offset to sanitize
     * @returns {number} the sanitized offset.
     */
    SeekBar.prototype.sanitizeOffset = function (offset) {
        // Since we track mouse moves over the whole document, the target can be outside the seek range,
        // and we need to limit it to the [0, 1] range.
        if (offset < 0) {
            offset = 0;
        }
        else if (offset > 1) {
            offset = 1;
        }
        return offset;
    };
    /**
     * Sets the position of the playback position indicator.
     * @param percent a number between 0 and 100 as returned by the player
     */
    SeekBar.prototype.setPlaybackPosition = function (percent) {
        this.playbackPositionPercentage = percent;
        // Set position of the bar
        this.setPosition(this.seekBarPlaybackPosition, percent);
        // Set position of the marker
        var totalSize = (this.config.vertical ? (this.seekBar.height() - this.seekBarPlaybackPositionMarker.height()) : this.seekBar.width());
        var px = (totalSize) / 100 * percent;
        if (this.config.vertical) {
            px = this.seekBar.height() - px - this.seekBarPlaybackPositionMarker.height();
        }
        var style = this.config.vertical ?
            // -ms-transform required for IE9
            // -webkit-transform required for Android 4.4 WebView
            {
                'transform': 'translateY(' + px + 'px)',
                '-ms-transform': 'translateY(' + px + 'px)',
                '-webkit-transform': 'translateY(' + px + 'px)',
            } :
            {
                'transform': 'translateX(' + px + 'px)',
                '-ms-transform': 'translateX(' + px + 'px)',
                '-webkit-transform': 'translateX(' + px + 'px)',
            };
        this.seekBarPlaybackPositionMarker.css(style);
    };
    /**
     * Refreshes the playback position. Can be used by subclasses to refresh the position when
     * the size of the component changes.
     */
    SeekBar.prototype.refreshPlaybackPosition = function () {
        this.setPlaybackPosition(this.playbackPositionPercentage);
    };
    /**
     * Sets the position until which media is buffered.
     * @param percent a number between 0 and 100
     */
    SeekBar.prototype.setBufferPosition = function (percent) {
        this.setPosition(this.seekBarBufferPosition, percent);
    };
    /**
     * Sets the position where a seek, if executed, would jump to.
     * @param percent a number between 0 and 100
     */
    SeekBar.prototype.setSeekPosition = function (percent) {
        this.setPosition(this.seekBarSeekPosition, percent);
    };
    /**
     * Set the actual position (width or height) of a DOM element that represent a bar in the seek bar.
     * @param element the element to set the position for
     * @param percent a number between 0 and 100
     */
    SeekBar.prototype.setPosition = function (element, percent) {
        var scale = percent / 100;
        // When the scale is exactly 1 or very near 1 (and the browser internally rounds it to 1), browsers seem to render
        // the elements differently and the height gets slightly off, leading to mismatching heights when e.g. the buffer
        // level bar has a width of 1 and the playback position bar has a width < 1. A jittering buffer level around 1
        // leads to an even worse flickering effect.
        // Various changes in CSS styling and DOM hierarchy did not solve the issue so the workaround is to avoid a scale
        // of exactly 1.
        if (scale >= 0.99999 && scale <= 1.00001) {
            scale = 0.99999;
        }
        var style = this.config.vertical ?
            // -ms-transform required for IE9
            // -webkit-transform required for Android 4.4 WebView
            {
                'transform': 'scaleY(' + scale + ')',
                '-ms-transform': 'scaleY(' + scale + ')',
                '-webkit-transform': 'scaleY(' + scale + ')',
            } :
            {
                'transform': 'scaleX(' + scale + ')',
                '-ms-transform': 'scaleX(' + scale + ')',
                '-webkit-transform': 'scaleX(' + scale + ')',
            };
        element.css(style);
    };
    /**
     * Puts the seek bar into or out of seeking state by adding/removing a class to the DOM element. This can be used
     * to adjust the styling while seeking.
     *
     * @param seeking should be true when entering seek state, false when exiting the seek state
     */
    SeekBar.prototype.setSeeking = function (seeking) {
        if (seeking) {
            this.getDomElement().addClass(this.prefixCss(SeekBar.CLASS_SEEKING));
        }
        else {
            this.getDomElement().removeClass(this.prefixCss(SeekBar.CLASS_SEEKING));
        }
    };
    /**
     * Checks if the seek bar is currently in the seek state.
     * @returns {boolean} true if in seek state, else false
     */
    SeekBar.prototype.isSeeking = function () {
        return this.getDomElement().hasClass(this.prefixCss(SeekBar.CLASS_SEEKING));
    };
    /**
     * Checks if the seek bar has a {@link SeekBarLabel}.
     * @returns {boolean} true if the seek bar has a label, else false
     */
    SeekBar.prototype.hasLabel = function () {
        return this.label != null;
    };
    /**
     * Gets the label of this seek bar.
     * @returns {SeekBarLabel} the label if this seek bar has a label, else null
     */
    SeekBar.prototype.getLabel = function () {
        return this.label;
    };
    SeekBar.prototype.onSeekEvent = function () {
        this.seekBarEvents.onSeek.dispatch(this);
    };
    SeekBar.prototype.onSeekPreviewEvent = function (percentage, scrubbing) {
        var snappedMarker = this.timelineMarkersHandler && this.timelineMarkersHandler.getMarkerAtPosition(percentage);
        var seekPositionPercentage = percentage;
        if (snappedMarker) {
            if (snappedMarker.duration > 0) {
                if (percentage < snappedMarker.position) {
                    // Snap the position to the start of the interval if the seek is within the left snap margin
                    // We know that we are within a snap margin when we are outside the marker interval but still
                    // have a snappedMarker
                    seekPositionPercentage = snappedMarker.position;
                }
                else if (percentage > snappedMarker.position + snappedMarker.duration) {
                    // Snap the position to the end of the interval if the seek is within the right snap margin
                    seekPositionPercentage = snappedMarker.position + snappedMarker.duration;
                }
            }
            else {
                // Position markers always snap to their marker position
                seekPositionPercentage = snappedMarker.position;
            }
        }
        if (this.label) {
            this.label.getDomElement().css({
                'left': seekPositionPercentage + '%',
            });
        }
        this.seekBarEvents.onSeekPreview.dispatch(this, {
            scrubbing: scrubbing,
            position: seekPositionPercentage,
            marker: snappedMarker,
        });
    };
    SeekBar.prototype.onSeekedEvent = function (percentage) {
        this.seekBarEvents.onSeeked.dispatch(this, percentage);
    };
    Object.defineProperty(SeekBar.prototype, "onSeek", {
        /**
         * Gets the event that is fired when a scrubbing seek operation is started.
         * @returns {Event<SeekBar, NoArgs>}
         */
        get: function () {
            return this.seekBarEvents.onSeek.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SeekBar.prototype, "onSeekPreview", {
        /**
         * Gets the event that is fired during a scrubbing seek (to indicate that the seek preview, i.e. the video frame,
         * should be updated), or during a normal seek preview when the seek bar is hovered (and the seek target,
         * i.e. the seek bar label, should be updated).
         * @returns {Event<SeekBar, SeekPreviewEventArgs>}
         */
        get: function () {
            return this.seekBarEvents.onSeekPreview.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SeekBar.prototype, "onSeeked", {
        /**
         * Gets the event that is fired when a scrubbing seek has finished or when a direct seek is issued.
         * @returns {Event<SeekBar, number>}
         */
        get: function () {
            return this.seekBarEvents.onSeeked.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    SeekBar.prototype.onShowEvent = function () {
        _super.prototype.onShowEvent.call(this);
        // Refresh the position of the playback position when the seek bar becomes visible. To correctly set the position,
        // the DOM element must be fully initialized an have its size calculated, because the position is set as an absolute
        // value calculated from the size. This required size is not known when it is hidden.
        // For such cases, we refresh the position here in onShow because here it is guaranteed that the component knows
        // its size and can set the position correctly.
        this.refreshPlaybackPosition();
    };
    /**
      * Checks if TouchEvent is supported.
      * @returns {boolean} true if TouchEvent not undefined, else false
      */
    SeekBar.prototype.isTouchEvent = function (e) {
        return window.TouchEvent && e instanceof TouchEvent;
    };
    SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED = -1;
    /**
     * The CSS class that is added to the DOM element while the seek bar is in 'seeking' state.
     */
    SeekBar.CLASS_SEEKING = 'seeking';
    return SeekBar;
}(component_1.Component));

},{"../browserutils":8,"../dom":84,"../eventdispatcher":86,"../localization/i18n":91,"../playerutils":97,"../stringutils":110,"../timeout":112,"./../groupplaybackapi":88,"./component":23,"./seekbarbufferlevel":43,"./seekbarcontroller":44,"./timelinemarkershandler":72}],43:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMinBufferLevel = void 0;
function getMinBufferLevel(player) {
    var playerDuration = player.getDuration();
    var videoBufferLength = player.getVideoBufferLength();
    var audioBufferLength = player.getAudioBufferLength();
    // Calculate the buffer length which is the smaller length of the audio and video buffers. If one of these
    // buffers is not available, we set it's value to MAX_VALUE to make sure that the other real value is taken
    // as the buffer length.
    var bufferLength = Math.min(videoBufferLength != null ? videoBufferLength : Number.MAX_VALUE, audioBufferLength != null ? audioBufferLength : Number.MAX_VALUE);
    // If both buffer lengths are missing, we set the buffer length to zero
    if (bufferLength === Number.MAX_VALUE) {
        bufferLength = 0;
    }
    return 100 / playerDuration * bufferLength;
}
exports.getMinBufferLevel = getMinBufferLevel;

},{}],44:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeekBarController = exports.SeekBarType = void 0;
var uiutils_1 = require("../uiutils");
var SeekBarType;
(function (SeekBarType) {
    SeekBarType[SeekBarType["Vod"] = 0] = "Vod";
    SeekBarType[SeekBarType["Live"] = 1] = "Live";
    SeekBarType[SeekBarType["Volume"] = 2] = "Volume";
})(SeekBarType = exports.SeekBarType || (exports.SeekBarType = {}));
var coerceValueIntoRange = function (value, range, cb) {
    if (value < range.min) {
        cb(range.min);
    }
    else if (value > range.max) {
        cb(range.max);
    }
    else {
        cb(value);
    }
};
var SeekBarController = /** @class */ (function () {
    function SeekBarController(keyStepIncrements, player, volumeController) {
        this.keyStepIncrements = keyStepIncrements;
        this.player = player;
        this.volumeController = volumeController;
    }
    SeekBarController.prototype.arrowKeyControls = function (currentValue, range, valueUpdate) {
        var _this = this;
        var controlValue = Math.floor(currentValue);
        return {
            left: function () { return coerceValueIntoRange(controlValue - _this.keyStepIncrements.leftRight, range, valueUpdate); },
            right: function () { return coerceValueIntoRange(controlValue + _this.keyStepIncrements.leftRight, range, valueUpdate); },
            up: function () { return coerceValueIntoRange(controlValue + _this.keyStepIncrements.upDown, range, valueUpdate); },
            down: function () { return coerceValueIntoRange(controlValue - _this.keyStepIncrements.upDown, range, valueUpdate); },
            home: function () { return coerceValueIntoRange(range.min, range, valueUpdate); },
            end: function () { return coerceValueIntoRange(range.max, range, valueUpdate); },
        };
    };
    SeekBarController.prototype.seekBarControls = function (type) {
        if (type === SeekBarType.Live) {
            return this.arrowKeyControls(this.player.getTimeShift(), { min: this.player.getMaxTimeShift(), max: 0 }, this.player.timeShift);
        }
        else if (type === SeekBarType.Vod) {
            return this.arrowKeyControls(this.player.getCurrentTime(), { min: 0, max: this.player.getDuration() }, this.player.seek);
        }
        else if (type === SeekBarType.Volume && this.volumeController != null) {
            var volumeTransition = this.volumeController.startTransition();
            return this.arrowKeyControls(this.player.getVolume(), { min: 0, max: 100 }, volumeTransition.finish.bind(volumeTransition));
        }
    };
    SeekBarController.prototype.setSeekBarControls = function (domElement, type) {
        var _this = this;
        domElement.on('keydown', function (e) {
            var controls = _this.seekBarControls(type());
            switch (e.keyCode) {
                case uiutils_1.UIUtils.KeyCode.LeftArrow: {
                    controls.left();
                    e.preventDefault();
                    break;
                }
                case uiutils_1.UIUtils.KeyCode.RightArrow: {
                    controls.right();
                    e.preventDefault();
                    break;
                }
                case uiutils_1.UIUtils.KeyCode.UpArrow: {
                    controls.up();
                    e.preventDefault();
                    break;
                }
                case uiutils_1.UIUtils.KeyCode.DownArrow: {
                    controls.down();
                    e.preventDefault();
                    break;
                }
                case uiutils_1.UIUtils.KeyCode.Home: {
                    controls.home();
                    e.preventDefault();
                    break;
                }
                case uiutils_1.UIUtils.KeyCode.End: {
                    controls.end();
                    e.preventDefault();
                    break;
                }
                case uiutils_1.UIUtils.KeyCode.Space: {
                    _this.player.isPlaying() ? _this.player.pause() : _this.player.play();
                    e.preventDefault();
                    break;
                }
            }
        });
    };
    return SeekBarController;
}());
exports.SeekBarController = SeekBarController;

},{"../uiutils":115}],45:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeekBarLabel = void 0;
var container_1 = require("./container");
var label_1 = require("./label");
var component_1 = require("./component");
var stringutils_1 = require("../stringutils");
var imageloader_1 = require("../imageloader");
var playerutils_1 = require("../playerutils");
/**
 * A label for a {@link SeekBar} that can display the seek target time, a thumbnail, and title (e.g. chapter title).
 */
var SeekBarLabel = /** @class */ (function (_super) {
    __extends(SeekBarLabel, _super);
    function SeekBarLabel(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.appliedMarkerCssClasses = [];
        _this.handleSeekPreview = function (sender, args) {
            if (_this.player.isLive()) {
                var maxTimeShift = _this.player.getMaxTimeShift();
                var timeShiftPreview = maxTimeShift - maxTimeShift * (args.position / 100);
                _this.setTime(timeShiftPreview);
                // In case of a live stream the player expects the time passed into the getThumbnail as a wallClockTime and not
                // as a relative timeShift value.
                var convertTimeShiftPreviewToWallClockTime = function (targetTimeShift) {
                    var currentTimeShift = _this.player.getTimeShift();
                    var currentTime = _this.player.getCurrentTime();
                    var wallClockTimeOfLiveEdge = currentTime - currentTimeShift;
                    return wallClockTimeOfLiveEdge + targetTimeShift;
                };
                var wallClockTime = convertTimeShiftPreviewToWallClockTime(timeShiftPreview);
                _this.setThumbnail(_this.player.getThumbnail(wallClockTime));
            }
            else {
                var time = _this.player.getDuration() * (args.position / 100);
                _this.setTime(time);
                var seekableRangeStart = playerutils_1.PlayerUtils.getSeekableRangeStart(_this.player, 0);
                var absoluteSeekTarget = time + seekableRangeStart;
                _this.setThumbnail(_this.player.getThumbnail(absoluteSeekTarget));
            }
            if (args.marker) {
                _this.setTitleText(args.marker.marker.title);
            }
            else {
                _this.setTitleText(null);
            }
            // Remove CSS classes from previous marker
            if (_this.appliedMarkerCssClasses.length > 0) {
                _this.getDomElement().removeClass(_this.appliedMarkerCssClasses.join(' '));
                _this.appliedMarkerCssClasses = [];
            }
            // Add CSS classes of current marker
            if (args.marker) {
                var cssClasses = (args.marker.marker.cssClasses || []).map(function (cssClass) { return _this.prefixCss(cssClass); });
                _this.getDomElement().addClass(cssClasses.join(' '));
                _this.appliedMarkerCssClasses = cssClasses;
            }
        };
        _this.timeLabel = new label_1.Label({ cssClasses: ['seekbar-label-time'] });
        _this.titleLabel = new label_1.Label({ cssClasses: ['seekbar-label-title'] });
        _this.thumbnail = new component_1.Component({ cssClasses: ['seekbar-thumbnail'], role: 'img' });
        _this.thumbnailImageLoader = new imageloader_1.ImageLoader();
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-seekbar-label',
            components: [new container_1.Container({
                    components: [
                        _this.thumbnail,
                        new container_1.Container({
                            components: [_this.titleLabel, _this.timeLabel],
                            cssClass: 'seekbar-label-metadata',
                        })
                    ],
                    cssClass: 'seekbar-label-inner',
                })],
            hidden: true,
        }, _this.config);
        return _this;
    }
    SeekBarLabel.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.player = player;
        this.uiManager = uimanager;
        uimanager.onSeekPreview.subscribeRateLimited(this.handleSeekPreview, 100);
        var init = function () {
            // Set time format depending on source duration
            _this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?
                stringutils_1.StringUtils.FORMAT_HHMMSS : stringutils_1.StringUtils.FORMAT_MMSS;
            // Set initial state of title and thumbnail to handle sourceLoaded when switching to a live-stream
            _this.setTitleText(null);
            _this.setThumbnail(null);
        };
        uimanager.getConfig().events.onUpdated.subscribe(init);
        init();
    };
    /**
     * Sets arbitrary text on the label.
     * @param text the text to show on the label
     */
    SeekBarLabel.prototype.setText = function (text) {
        this.timeLabel.setText(text);
    };
    /**
     * Sets a time to be displayed on the label.
     * @param seconds the time in seconds to display on the label
     */
    SeekBarLabel.prototype.setTime = function (seconds) {
        this.setText(stringutils_1.StringUtils.secondsToTime(seconds, this.timeFormat));
    };
    /**
     * Sets the text on the title label.
     * @param text the text to show on the label
     */
    SeekBarLabel.prototype.setTitleText = function (text) {
        if (text === void 0) { text = ''; }
        this.titleLabel.setText(text);
    };
    /**
     * Sets or removes a thumbnail on the label.
     * @param thumbnail the thumbnail to display on the label or null to remove a displayed thumbnail
     */
    SeekBarLabel.prototype.setThumbnail = function (thumbnail) {
        var _this = this;
        if (thumbnail === void 0) { thumbnail = null; }
        var thumbnailElement = this.thumbnail.getDomElement();
        if (thumbnail == null) {
            thumbnailElement.css({
                'background-image': null,
                'display': null,
                'width': null,
                'height': null,
            });
        }
        else {
            // We use the thumbnail image loader to make sure the thumbnail is loaded and it's size is known before be can
            // calculate the CSS properties and set them on the element.
            this.thumbnailImageLoader.load(thumbnail.url, function (url, width, height) {
                // can be checked like that because x/y/w/h are either all present or none
                // https://www.w3.org/TR/media-frags/#naming-space
                if (thumbnail.x !== undefined) {
                    thumbnailElement.css(_this.thumbnailCssSprite(thumbnail, width, height));
                }
                else {
                    thumbnailElement.css(_this.thumbnailCssSingleImage(thumbnail, width, height));
                }
            });
        }
    };
    SeekBarLabel.prototype.thumbnailCssSprite = function (thumbnail, width, height) {
        var thumbnailCountX = width / thumbnail.width;
        var thumbnailCountY = height / thumbnail.height;
        var thumbnailIndexX = thumbnail.x / thumbnail.width;
        var thumbnailIndexY = thumbnail.y / thumbnail.height;
        var sizeX = 100 * thumbnailCountX;
        var sizeY = 100 * thumbnailCountY;
        var offsetX = 100 * thumbnailIndexX;
        var offsetY = 100 * thumbnailIndexY;
        var aspectRatio = 1 / thumbnail.width * thumbnail.height;
        // The thumbnail size is set by setting the CSS 'width' and 'padding-bottom' properties. 'padding-bottom' is
        // used because it is relative to the width and can be used to set the aspect ratio of the thumbnail.
        // A default value for width is set in the stylesheet and can be overwritten from there or anywhere else.
        return {
            'display': 'inherit',
            'background-image': "url(".concat(thumbnail.url, ")"),
            'padding-bottom': "".concat(100 * aspectRatio, "%"),
            'background-size': "".concat(sizeX, "% ").concat(sizeY, "%"),
            'background-position': "-".concat(offsetX, "% -").concat(offsetY, "%"),
        };
    };
    SeekBarLabel.prototype.thumbnailCssSingleImage = function (thumbnail, width, height) {
        var aspectRatio = 1 / width * height;
        return {
            'display': 'inherit',
            'background-image': "url(".concat(thumbnail.url, ")"),
            'padding-bottom': "".concat(100 * aspectRatio, "%"),
            'background-size': "100% 100%",
            'background-position': "0 0",
        };
    };
    SeekBarLabel.prototype.release = function () {
        _super.prototype.release.call(this);
        this.uiManager.onSeekPreview.unsubscribe(this.handleSeekPreview);
    };
    return SeekBarLabel;
}(container_1.Container));
exports.SeekBarLabel = SeekBarLabel;

},{"../imageloader":90,"../playerutils":97,"../stringutils":110,"./component":23,"./container":24,"./label":31}],46:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectBox = void 0;
var listselector_1 = require("./listselector");
var dom_1 = require("../dom");
var i18n_1 = require("../localization/i18n");
/**
 * A simple select box providing the possibility to select a single item out of a list of available items.
 *
 * DOM example:
 * <code>
 *     <select class='ui-selectbox'>
 *         <option value='key'>label</option>
 *         ...
 *     </select>
 * </code>
 */
var SelectBox = /** @class */ (function (_super) {
    __extends(SelectBox, _super);
    function SelectBox(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-selectbox',
        }, _this.config);
        return _this;
    }
    SelectBox.prototype.toDomElement = function () {
        var _this = this;
        var selectElement = new dom_1.DOM('select', {
            'id': this.config.id,
            'class': this.getCssClasses(),
            'aria-label': i18n_1.i18n.performLocalization(this.config.ariaLabel),
        });
        this.selectElement = selectElement;
        this.updateDomItems();
        selectElement.on('change', function () {
            var value = selectElement.val();
            _this.onItemSelectedEvent(value, false);
        });
        return selectElement;
    };
    SelectBox.prototype.updateDomItems = function (selectedValue) {
        if (selectedValue === void 0) { selectedValue = null; }
        // Delete all children
        this.selectElement.empty();
        // Add updated children
        for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
            var item = _a[_i];
            var optionElement = new dom_1.DOM('option', {
                'value': String(item.key),
            }).html(i18n_1.i18n.performLocalization(item.label));
            if (item.key === String(selectedValue)) { // convert selectedValue to string to catch 'null'/null case
                optionElement.attr('selected', 'selected');
            }
            this.selectElement.append(optionElement);
        }
    };
    SelectBox.prototype.onItemAddedEvent = function (value) {
        _super.prototype.onItemAddedEvent.call(this, value);
        this.updateDomItems(this.selectedItem);
    };
    SelectBox.prototype.onItemRemovedEvent = function (value) {
        _super.prototype.onItemRemovedEvent.call(this, value);
        this.updateDomItems(this.selectedItem);
    };
    SelectBox.prototype.onItemSelectedEvent = function (value, updateDomItems) {
        if (updateDomItems === void 0) { updateDomItems = true; }
        _super.prototype.onItemSelectedEvent.call(this, value);
        if (updateDomItems) {
            this.updateDomItems(value);
        }
    };
    return SelectBox;
}(listselector_1.ListSelector));
exports.SelectBox = SelectBox;

},{"../dom":84,"../localization/i18n":91,"./listselector":33}],47:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsPanel = void 0;
var container_1 = require("./container");
var selectbox_1 = require("./selectbox");
var timeout_1 = require("../timeout");
var eventdispatcher_1 = require("../eventdispatcher");
var settingspanelpage_1 = require("./settingspanelpage");
var NavigationDirection;
(function (NavigationDirection) {
    NavigationDirection[NavigationDirection["Forwards"] = 0] = "Forwards";
    NavigationDirection[NavigationDirection["Backwards"] = 1] = "Backwards";
})(NavigationDirection || (NavigationDirection = {}));
/**
 * A panel containing a list of {@link SettingsPanelPage items}.
 *
 * To configure pages just pass them in the components array.
 *
 * Example:
 *  let settingsPanel = new SettingsPanel({
 *    hidden: true,
 *  });
 *
 *  let settingsPanelPage = new SettingsPanelPage({
 *    components: […]
 *  });
 *
 *  let secondSettingsPanelPage = new SettingsPanelPage({
 *    components: […]
 *  });
 *
 *  settingsPanel.addComponent(settingsPanelPage);
 *  settingsPanel.addComponent(secondSettingsPanelPage);
 *
 * For an example how to navigate between pages @see SettingsPanelPageNavigatorButton
 */
var SettingsPanel = exports.SettingsPanel = /** @class */ (function (_super) {
    __extends(SettingsPanel, _super);
    function SettingsPanel(config) {
        var _this = _super.call(this, config) || this;
        _this.navigationStack = [];
        _this.settingsPanelEvents = {
            onSettingsStateChanged: new eventdispatcher_1.EventDispatcher(),
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-settings-panel',
            hideDelay: 3000,
            pageTransitionAnimation: true,
        }, _this.config);
        _this.activePage = _this.getRootPage();
        return _this;
    }
    SettingsPanel.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        uimanager.onControlsHide.subscribe(function () { return _this.hideHoveredSelectBoxes(); });
        if (config.hideDelay > -1) {
            this.hideTimeout = new timeout_1.Timeout(config.hideDelay, function () {
                _this.hide();
                _this.hideHoveredSelectBoxes();
            });
            this.getDomElement().on('mouseenter', function () {
                // On mouse enter clear the timeout
                _this.hideTimeout.clear();
            });
            this.getDomElement().on('mouseleave', function () {
                // On mouse leave activate the timeout
                _this.hideTimeout.reset();
            });
            this.getDomElement().on('focusin', function () {
                _this.hideTimeout.clear();
            });
            this.getDomElement().on('focusout', function () {
                _this.hideTimeout.reset();
            });
        }
        this.onHide.subscribe(function () {
            if (config.hideDelay > -1) {
                // Clear timeout when hidden from outside
                _this.hideTimeout.clear();
            }
            // Since we don't reset the actual navigation here we need to simulate a onInactive event in case some panel
            // needs to do something when they become invisible / inactive.
            _this.activePage.onInactiveEvent();
        });
        this.onShow.subscribe(function () {
            // Reset navigation when te panel gets visible to avoid a weird animation when hiding
            _this.resetNavigation(true);
            // Since we don't need to navigate to the root page again we need to fire the onActive event when the settings
            // panel gets visible.
            _this.activePage.onActiveEvent();
            if (config.hideDelay > -1) {
                // Activate timeout when shown
                _this.hideTimeout.start();
            }
        });
        // pass event from root page through
        this.getRootPage().onSettingsStateChanged.subscribe(function () {
            _this.onSettingsStateChangedEvent();
        });
        this.updateActivePageClass();
    };
    /**
     * Returns the current active / visible page
     * @return {SettingsPanelPage}
     */
    SettingsPanel.prototype.getActivePage = function () {
        return this.activePage;
    };
    /**
     * Sets the
     * @deprecated Use {@link setActivePage} instead
     * @param index
     */
    SettingsPanel.prototype.setActivePageIndex = function (index) {
        this.setActivePage(this.getPages()[index]);
    };
    /**
     * Adds the passed page to the navigation stack and makes it visible.
     * Use {@link popSettingsPanelPage} to navigate backwards.
     *
     * Results in no-op if the target page is the current page.
     * @params page
     */
    SettingsPanel.prototype.setActivePage = function (targetPage) {
        if (targetPage === this.getActivePage()) {
            console.warn('Page is already the current one ... skipping navigation');
            return;
        }
        this.navigateToPage(targetPage, this.getActivePage(), NavigationDirection.Forwards, !this.config.pageTransitionAnimation);
    };
    /**
     * Resets the navigation stack by navigating back to the root page and displaying it.
     */
    SettingsPanel.prototype.popToRootSettingsPanelPage = function () {
        this.resetNavigation(this.config.pageTransitionAnimation);
    };
    /**
     * Removes the current page from the navigation stack and makes the previous one visible.
     * Results in a no-op if we are already on the root page.
     */
    SettingsPanel.prototype.popSettingsPanelPage = function () {
        if (this.navigationStack.length === 0) {
            console.warn('Already on the root page ... skipping navigation');
            return;
        }
        var targetPage = this.navigationStack[this.navigationStack.length - 2];
        // The root part isn't part of the navigation stack so handle it explicitly here
        if (!targetPage) {
            targetPage = this.getRootPage();
        }
        this.navigateToPage(targetPage, this.activePage, NavigationDirection.Backwards, !this.config.pageTransitionAnimation);
    };
    /**
     * Checks if there are active settings within the root page of the settings panel.
     * An active setting is a setting that is visible and enabled, which the user can interact with.
     * @returns {boolean} true if there are active settings, false if the panel is functionally empty to a user
     */
    SettingsPanel.prototype.rootPageHasActiveSettings = function () {
        return this.getRootPage().hasActiveSettings();
    };
    /**
     * Return all configured pages
     * @returns {SettingsPanelPage[]}
     */
    SettingsPanel.prototype.getPages = function () {
        return this.config.components.filter(function (component) { return component instanceof settingspanelpage_1.SettingsPanelPage; });
    };
    Object.defineProperty(SettingsPanel.prototype, "onSettingsStateChanged", {
        get: function () {
            return this.settingsPanelEvents.onSettingsStateChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    SettingsPanel.prototype.release = function () {
        _super.prototype.release.call(this);
        if (this.hideTimeout) {
            this.hideTimeout.clear();
        }
    };
    // Support adding settingsPanelPages after initialization
    SettingsPanel.prototype.addComponent = function (component) {
        if (this.getPages().length === 0 && component instanceof settingspanelpage_1.SettingsPanelPage) {
            this.activePage = component;
        }
        _super.prototype.addComponent.call(this, component);
    };
    SettingsPanel.prototype.updateActivePageClass = function () {
        var _this = this;
        this.getPages().forEach(function (page) {
            if (page === _this.activePage) {
                page.getDomElement().addClass(_this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));
            }
            else {
                page.getDomElement().removeClass(_this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));
            }
        });
    };
    SettingsPanel.prototype.resetNavigation = function (resetNavigationOnShow) {
        var sourcePage = this.getActivePage();
        var rootPage = this.getRootPage();
        if (sourcePage) {
            // Since the onInactiveEvent was already fired in the onHide we need to suppress it here
            if (!resetNavigationOnShow) {
                sourcePage.onInactiveEvent();
            }
        }
        this.navigationStack = [];
        this.animateNavigation(rootPage, sourcePage, resetNavigationOnShow);
        this.activePage = rootPage;
        this.updateActivePageClass();
    };
    SettingsPanel.prototype.navigateToPage = function (targetPage, sourcePage, direction, skipAnimation) {
        this.activePage = targetPage;
        if (direction === NavigationDirection.Forwards) {
            this.navigationStack.push(targetPage);
        }
        else {
            this.navigationStack.pop();
        }
        this.animateNavigation(targetPage, sourcePage, skipAnimation);
        this.updateActivePageClass();
        targetPage.onActiveEvent();
        sourcePage.onInactiveEvent();
    };
    /**
     * @param targetPage
     * @param sourcePage
     * @param skipAnimation This is just an internal flag if we want to have an animation. It is set true when we reset
     * the navigation within the onShow callback of the settingsPanel. In this case we don't want an actual animation but
     * the recalculation of the dimension of the settingsPanel.
     * This is independent of the pageTransitionAnimation flag.
     */
    SettingsPanel.prototype.animateNavigation = function (targetPage, sourcePage, skipAnimation) {
        if (!this.config.pageTransitionAnimation) {
            return;
        }
        var settingsPanelDomElement = this.getDomElement();
        var settingsPanelHTMLElement = this.getDomElement().get(0);
        // get current dimension
        var settingsPanelWidth = settingsPanelHTMLElement.scrollWidth;
        var settingsPanelHeight = settingsPanelHTMLElement.scrollHeight;
        // calculate target size of the settings panel
        sourcePage.getDomElement().css('display', 'none');
        this.getDomElement().css({ width: '', height: '' }); // let css auto settings kick in again
        var targetPageHtmlElement = targetPage.getDomElement().get(0);
        // clone the targetPage DOM element so that we can calculate the width / height how they will be after
        // switching the page. We are using a clone to prevent (mostly styling) side-effects on the real DOM element
        var clone = targetPageHtmlElement.cloneNode(true);
        // append to parent so we get the 'real' size
        var containerWrapper = targetPageHtmlElement.parentNode;
        containerWrapper.appendChild(clone);
        // set clone visible
        clone.style.display = 'block';
        // collect target dimension
        var targetSettingsPanelWidth = settingsPanelHTMLElement.scrollWidth;
        var targetSettingsPanelHeight = settingsPanelHTMLElement.scrollHeight;
        // remove clone from the DOM
        clone.parentElement.removeChild(clone); // .remove() is not working in IE
        sourcePage.getDomElement().css('display', '');
        // set the values back to the current ones that the browser animates it (browsers don't animate 'auto' values)
        settingsPanelDomElement.css({
            width: settingsPanelWidth + 'px',
            height: settingsPanelHeight + 'px',
        });
        if (!skipAnimation) {
            // We need to force the browser to reflow between setting the width and height that we actually get a animation
            this.forceBrowserReflow();
        }
        // set the values to the target dimension
        settingsPanelDomElement.css({
            width: targetSettingsPanelWidth + 'px',
            height: targetSettingsPanelHeight + 'px',
        });
    };
    SettingsPanel.prototype.forceBrowserReflow = function () {
        // Force the browser to reflow the layout
        // https://gist.github.com/paulirish/5d52fb081b3570c81e3a
        this.getDomElement().get(0).offsetLeft;
    };
    /**
     * Hack for IE + Firefox
     * when the settings panel fades out while an item of a select box is still hovered, the select box will not fade out
     * while the settings panel does. This would leave a floating select box, which is just weird
     */
    SettingsPanel.prototype.hideHoveredSelectBoxes = function () {
        this.getComputedItems().forEach(function (item) {
            if (item.isActive() && item.setting instanceof selectbox_1.SelectBox) {
                var selectBox_1 = item.setting;
                var oldDisplay_1 = selectBox_1.getDomElement().css('display');
                if (oldDisplay_1 === 'none') {
                    // if oldDisplay is already 'none', no need to set to 'none' again. It could lead to race condition
                    // wherein the display is irreversibly set to 'none' when browser tab/window is not active because
                    // requestAnimationFrame is either delayed or paused in some browsers in inactive state
                    return;
                }
                // updating the display to none marks the select-box as inactive, so it will be hidden with the rest
                // we just have to make sure to reset this as soon as possible
                selectBox_1.getDomElement().css('display', 'none');
                if (window.requestAnimationFrame) {
                    requestAnimationFrame(function () {
                        selectBox_1.getDomElement().css('display', oldDisplay_1);
                    });
                }
                else {
                    // IE9 has no requestAnimationFrame, set the value directly. It has no optimization about ignoring DOM-changes
                    // between animationFrames
                    selectBox_1.getDomElement().css('display', oldDisplay_1);
                }
            }
        });
    };
    // collect all items from all pages (see hideHoveredSelectBoxes)
    SettingsPanel.prototype.getComputedItems = function () {
        var allItems = [];
        for (var _i = 0, _a = this.getPages(); _i < _a.length; _i++) {
            var page = _a[_i];
            allItems.push.apply(allItems, page.getItems());
        }
        return allItems;
    };
    SettingsPanel.prototype.getRootPage = function () {
        return this.getPages()[0];
    };
    SettingsPanel.prototype.onSettingsStateChangedEvent = function () {
        this.settingsPanelEvents.onSettingsStateChanged.dispatch(this);
    };
    SettingsPanel.CLASS_ACTIVE_PAGE = 'active';
    return SettingsPanel;
}(container_1.Container));

},{"../eventdispatcher":86,"../timeout":112,"./container":24,"./selectbox":46,"./settingspanelpage":49}],48:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsPanelItem = void 0;
var container_1 = require("./container");
var component_1 = require("./component");
var eventdispatcher_1 = require("../eventdispatcher");
var label_1 = require("./label");
var selectbox_1 = require("./selectbox");
var listbox_1 = require("./listbox");
var videoqualityselectbox_1 = require("./videoqualityselectbox");
var audioqualityselectbox_1 = require("./audioqualityselectbox");
var playbackspeedselectbox_1 = require("./playbackspeedselectbox");
/**
 * An item for a {@link SettingsPanelPage},
 * Containing an optional {@link Label} and a component that configures a setting.
 * If the components is a {@link SelectBox} it will handle the logic of displaying it or not
 */
var SettingsPanelItem = /** @class */ (function (_super) {
    __extends(SettingsPanelItem, _super);
    function SettingsPanelItem(label, setting, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.settingsPanelItemEvents = {
            onActiveChanged: new eventdispatcher_1.EventDispatcher(),
        };
        _this.setting = setting;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-settings-panel-item',
            role: 'menuitem',
        }, _this.config);
        if (label !== null) {
            if (label instanceof component_1.Component) {
                _this.label = label;
            }
            else {
                _this.label = new label_1.Label({ text: label, for: _this.setting.getConfig().id });
            }
            _this.addComponent(_this.label);
        }
        _this.addComponent(_this.setting);
        return _this;
    }
    SettingsPanelItem.prototype.configure = function (player, uimanager) {
        var _this = this;
        if (this.setting instanceof selectbox_1.SelectBox || this.setting instanceof listbox_1.ListBox) {
            var handleConfigItemChanged = function () {
                if (!(_this.setting instanceof selectbox_1.SelectBox) && !(_this.setting instanceof listbox_1.ListBox)) {
                    return;
                }
                // The minimum number of items that must be available for the setting to be displayed
                // By default, at least two items must be available, else a selection is not possible
                var minItemsToDisplay = 2;
                // Audio/video quality select boxes contain an additional 'auto' mode, which in combination with a single
                // available quality also does not make sense
                if ((_this.setting instanceof videoqualityselectbox_1.VideoQualitySelectBox && _this.setting.hasAutoItem())
                    || _this.setting instanceof audioqualityselectbox_1.AudioQualitySelectBox) {
                    minItemsToDisplay = 3;
                }
                if (_this.setting.itemCount() < minItemsToDisplay) {
                    // Hide the setting if no meaningful choice is available
                    _this.hide();
                }
                else if (_this.setting instanceof playbackspeedselectbox_1.PlaybackSpeedSelectBox
                    && !uimanager.getConfig().playbackSpeedSelectionEnabled) {
                    // Hide the PlaybackSpeedSelectBox if disabled in config
                    _this.hide();
                }
                else {
                    _this.show();
                }
                // Visibility might have changed and therefore the active state might have changed so we fire the event
                // TODO fire only when state has really changed (e.g. check if visibility has really changed)
                _this.onActiveChangedEvent();
                _this.getDomElement().attr('aria-haspopup', 'true');
            };
            this.setting.onItemAdded.subscribe(handleConfigItemChanged);
            this.setting.onItemRemoved.subscribe(handleConfigItemChanged);
            // Initialize hidden state
            handleConfigItemChanged();
        }
    };
    /**
     * Checks if this settings panel item is active, i.e. visible and enabled and a user can interact with it.
     * @returns {boolean} true if the panel is active, else false
     */
    SettingsPanelItem.prototype.isActive = function () {
        return this.isShown();
    };
    SettingsPanelItem.prototype.onActiveChangedEvent = function () {
        this.settingsPanelItemEvents.onActiveChanged.dispatch(this);
    };
    Object.defineProperty(SettingsPanelItem.prototype, "onActiveChanged", {
        /**
         * Gets the event that is fired when the 'active' state of this item changes.
         * @see #isActive
         * @returns {Event<SettingsPanelItem, NoArgs>}
         */
        get: function () {
            return this.settingsPanelItemEvents.onActiveChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    return SettingsPanelItem;
}(container_1.Container));
exports.SettingsPanelItem = SettingsPanelItem;

},{"../eventdispatcher":86,"./audioqualityselectbox":13,"./component":23,"./container":24,"./label":31,"./listbox":32,"./playbackspeedselectbox":36,"./selectbox":46,"./videoqualityselectbox":77}],49:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsPanelPage = void 0;
var container_1 = require("./container");
var settingspanelitem_1 = require("./settingspanelitem");
var eventdispatcher_1 = require("../eventdispatcher");
var browserutils_1 = require("../browserutils");
/**
 * A panel containing a list of {@link SettingsPanelItem items} that represent labelled settings.
 */
var SettingsPanelPage = exports.SettingsPanelPage = /** @class */ (function (_super) {
    __extends(SettingsPanelPage, _super);
    function SettingsPanelPage(config) {
        var _this = _super.call(this, config) || this;
        _this.settingsPanelPageEvents = {
            onSettingsStateChanged: new eventdispatcher_1.EventDispatcher(),
            onActive: new eventdispatcher_1.EventDispatcher(),
            onInactive: new eventdispatcher_1.EventDispatcher(),
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-settings-panel-page',
            role: 'menu',
        }, _this.config);
        return _this;
    }
    SettingsPanelPage.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        // Fire event when the state of a settings-item has changed
        var settingsStateChangedHandler = function () {
            _this.onSettingsStateChangedEvent();
            // Attach marker class to last visible item
            var lastShownItem = null;
            for (var _i = 0, _a = _this.getItems(); _i < _a.length; _i++) {
                var component = _a[_i];
                component.getDomElement().removeClass(_this.prefixCss(SettingsPanelPage.CLASS_LAST));
                if (component.isShown()) {
                    lastShownItem = component;
                }
            }
            if (lastShownItem) {
                lastShownItem.getDomElement().addClass(_this.prefixCss(SettingsPanelPage.CLASS_LAST));
            }
        };
        for (var _i = 0, _a = this.getItems(); _i < _a.length; _i++) {
            var component = _a[_i];
            component.onActiveChanged.subscribe(settingsStateChangedHandler);
        }
    };
    SettingsPanelPage.prototype.hasActiveSettings = function () {
        for (var _i = 0, _a = this.getItems(); _i < _a.length; _i++) {
            var component = _a[_i];
            if (component.isActive()) {
                return true;
            }
        }
        return false;
    };
    SettingsPanelPage.prototype.getItems = function () {
        return this.config.components.filter(function (component) { return component instanceof settingspanelitem_1.SettingsPanelItem; });
    };
    SettingsPanelPage.prototype.onSettingsStateChangedEvent = function () {
        this.settingsPanelPageEvents.onSettingsStateChanged.dispatch(this);
    };
    Object.defineProperty(SettingsPanelPage.prototype, "onSettingsStateChanged", {
        get: function () {
            return this.settingsPanelPageEvents.onSettingsStateChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    SettingsPanelPage.prototype.onActiveEvent = function () {
        var activeItems = this.getItems().filter(function (item) { return item.isActive(); });
        this.settingsPanelPageEvents.onActive.dispatch(this);
        // Disable focus for iOS and iPadOS 13. They open select boxes automatically on focus and we want to avoid that.
        if (activeItems.length > 0 && !browserutils_1.BrowserUtils.isIOS && !(browserutils_1.BrowserUtils.isMacIntel && browserutils_1.BrowserUtils.isTouchSupported)) {
            activeItems[0].getDomElement().focusToFirstInput();
        }
    };
    Object.defineProperty(SettingsPanelPage.prototype, "onActive", {
        get: function () {
            return this.settingsPanelPageEvents.onActive.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    SettingsPanelPage.prototype.onInactiveEvent = function () {
        this.settingsPanelPageEvents.onInactive.dispatch(this);
    };
    Object.defineProperty(SettingsPanelPage.prototype, "onInactive", {
        get: function () {
            return this.settingsPanelPageEvents.onInactive.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    SettingsPanelPage.CLASS_LAST = 'last';
    return SettingsPanelPage;
}(container_1.Container));

},{"../browserutils":8,"../eventdispatcher":86,"./container":24,"./settingspanelitem":48}],50:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsPanelPageBackButton = void 0;
var settingspanelpagenavigatorbutton_1 = require("./settingspanelpagenavigatorbutton");
var SettingsPanelPageBackButton = /** @class */ (function (_super) {
    __extends(SettingsPanelPageBackButton, _super);
    function SettingsPanelPageBackButton(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-settingspanelpagebackbutton',
            text: 'back',
        }, _this.config);
        return _this;
    }
    SettingsPanelPageBackButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.onClick.subscribe(function () {
            _this.popPage();
        });
    };
    return SettingsPanelPageBackButton;
}(settingspanelpagenavigatorbutton_1.SettingsPanelPageNavigatorButton));
exports.SettingsPanelPageBackButton = SettingsPanelPageBackButton;

},{"./settingspanelpagenavigatorbutton":51}],51:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsPanelPageNavigatorButton = void 0;
var button_1 = require("./button");
/**
 * Can be used to navigate between SettingsPanelPages
 *
 * Example:
 *  let settingPanelNavigationButton = new SettingsPanelPageNavigatorButton({
 *    container: settingsPanel,
 *    targetPage: settingsPanelPage,
 *  });
 *
 *  settingsPanelPage.addComponent(settingPanelNavigationButton);
 *
 * Don't forget to add the settingPanelNavigationButton to the settingsPanelPage.
 */
var SettingsPanelPageNavigatorButton = /** @class */ (function (_super) {
    __extends(SettingsPanelPageNavigatorButton, _super);
    function SettingsPanelPageNavigatorButton(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {}, _this.config);
        _this.container = _this.config.container;
        _this.targetPage = _this.config.targetPage;
        return _this;
    }
    /**
     * navigate one level back
     */
    SettingsPanelPageNavigatorButton.prototype.popPage = function () {
        this.container.popSettingsPanelPage();
    };
    /**
     * navigate to the target page
     */
    SettingsPanelPageNavigatorButton.prototype.pushTargetPage = function () {
        this.container.setActivePage(this.targetPage);
    };
    return SettingsPanelPageNavigatorButton;
}(button_1.Button));
exports.SettingsPanelPageNavigatorButton = SettingsPanelPageNavigatorButton;

},{"./button":17}],52:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsPanelPageOpenButton = void 0;
var settingspanelpagenavigatorbutton_1 = require("./settingspanelpagenavigatorbutton");
var i18n_1 = require("../localization/i18n");
var SettingsPanelPageOpenButton = /** @class */ (function (_super) {
    __extends(SettingsPanelPageOpenButton, _super);
    function SettingsPanelPageOpenButton(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-settingspanelpageopenbutton',
            text: i18n_1.i18n.getLocalizer('open'),
            role: 'menuitem',
        }, _this.config);
        return _this;
    }
    SettingsPanelPageOpenButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.getDomElement().attr('aria-haspopup', 'true');
        this.getDomElement().attr('aria-owns', this.config.targetPage.getConfig().id);
        this.onClick.subscribe(function () {
            _this.pushTargetPage();
        });
    };
    return SettingsPanelPageOpenButton;
}(settingspanelpagenavigatorbutton_1.SettingsPanelPageNavigatorButton));
exports.SettingsPanelPageOpenButton = SettingsPanelPageOpenButton;

},{"../localization/i18n":91,"./settingspanelpagenavigatorbutton":51}],53:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var settingspanel_1 = require("./settingspanel");
var arrayutils_1 = require("../arrayutils");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles visibility of a settings panel.
 */
var SettingsToggleButton = /** @class */ (function (_super) {
    __extends(SettingsToggleButton, _super);
    function SettingsToggleButton(config) {
        var _this = _super.call(this, config) || this;
        _this.visibleSettingsPanels = [];
        if (!config.settingsPanel) {
            throw new Error('Required SettingsPanel is missing');
        }
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-settingstogglebutton',
            text: i18n_1.i18n.getLocalizer('settings'),
            settingsPanel: null,
            autoHideWhenNoActiveSettings: true,
            role: 'pop-up button',
        }, _this.config);
        /**
         * WCAG20 standard defines which popup menu (element id) is owned by the button
         */
        _this.getDomElement().attr('aria-owns', config.settingsPanel.getActivePage().getConfig().id);
        /**
         * WCAG20 standard defines that a button has a popup menu bound to it
         */
        _this.getDomElement().attr('aria-haspopup', 'true');
        return _this;
    }
    SettingsToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var settingsPanel = config.settingsPanel;
        this.onClick.subscribe(function () {
            // only hide other `SettingsPanel`s if a new one will be opened
            if (!settingsPanel.isShown()) {
                // Hide all open SettingsPanels before opening this button's panel
                // (We need to iterate a copy because hiding them will automatically remove themselves from the array
                // due to the subscribeOnce above)
                _this.visibleSettingsPanels.slice().forEach(function (settingsPanel) { return settingsPanel.hide(); });
            }
            settingsPanel.toggleHidden();
        });
        settingsPanel.onShow.subscribe(function () {
            // Set toggle status to on when the settings panel shows
            _this.on();
        });
        settingsPanel.onHide.subscribe(function () {
            // Set toggle status to off when the settings panel hides
            _this.off();
        });
        // Ensure that only one `SettingPanel` is visible at once
        // Keep track of shown SettingsPanels
        uimanager.onComponentShow.subscribe(function (sender) {
            if (sender instanceof settingspanel_1.SettingsPanel) {
                _this.visibleSettingsPanels.push(sender);
                sender.onHide.subscribeOnce(function () { return arrayutils_1.ArrayUtils.remove(_this.visibleSettingsPanels, sender); });
            }
        });
        // Handle automatic hiding of the button if there are no settings for the user to interact with
        if (config.autoHideWhenNoActiveSettings) {
            // Setup handler to show/hide button when the settings change
            var settingsPanelItemsChangedHandler = function () {
                if (settingsPanel.rootPageHasActiveSettings()) {
                    if (_this.isHidden()) {
                        _this.show();
                    }
                }
                else {
                    if (_this.isShown()) {
                        _this.hide();
                    }
                }
            };
            // Wire the handler to the event
            settingsPanel.onSettingsStateChanged.subscribe(settingsPanelItemsChangedHandler);
            // Call handler for first init at startup
            settingsPanelItemsChangedHandler();
        }
    };
    return SettingsToggleButton;
}(togglebutton_1.ToggleButton));
exports.SettingsToggleButton = SettingsToggleButton;

},{"../arrayutils":6,"../localization/i18n":91,"./settingspanel":47,"./togglebutton":74}],54:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Spacer = void 0;
var component_1 = require("./component");
/**
 * A dummy component that just reserves some space and does nothing else.
 */
var Spacer = /** @class */ (function (_super) {
    __extends(Spacer, _super);
    function Spacer(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-spacer',
        }, _this.config);
        return _this;
    }
    Spacer.prototype.onShowEvent = function () {
        // disable event firing by overwriting and not calling super
    };
    Spacer.prototype.onHideEvent = function () {
        // disable event firing by overwriting and not calling super
    };
    Spacer.prototype.onHoverChangedEvent = function (hovered) {
        // disable event firing by overwriting and not calling super
    };
    return Spacer;
}(component_1.Component));
exports.Spacer = Spacer;

},{"./component":23}],55:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleListBox = void 0;
var listbox_1 = require("./listbox");
var subtitleutils_1 = require("../subtitleutils");
/**
 * A element that is similar to a select box where the user can select a subtitle
 */
var SubtitleListBox = /** @class */ (function (_super) {
    __extends(SubtitleListBox, _super);
    function SubtitleListBox() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SubtitleListBox.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        new subtitleutils_1.SubtitleSwitchHandler(player, this, uimanager);
    };
    return SubtitleListBox;
}(listbox_1.ListBox));
exports.SubtitleListBox = SubtitleListBox;

},{"../subtitleutils":111,"./listbox":32}],56:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleRegionContainer = exports.SubtitleRegionContainerManager = exports.SubtitleLabel = exports.SubtitleOverlay = void 0;
var container_1 = require("./container");
var label_1 = require("./label");
var controlbar_1 = require("./controlbar");
var eventdispatcher_1 = require("../eventdispatcher");
var dom_1 = require("../dom");
var i18n_1 = require("../localization/i18n");
var vttutils_1 = require("../vttutils");
/**
 * Overlays the player to display subtitles.
 */
var SubtitleOverlay = exports.SubtitleOverlay = /** @class */ (function (_super) {
    __extends(SubtitleOverlay, _super);
    function SubtitleOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.preprocessLabelEventCallback = new eventdispatcher_1.EventDispatcher();
        _this.previewSubtitleActive = false;
        _this.previewSubtitle = new SubtitleLabel({ text: i18n_1.i18n.getLocalizer('subtitle.example') });
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-subtitle-overlay',
        }, _this.config);
        return _this;
    }
    SubtitleOverlay.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var subtitleManager = new ActiveSubtitleManager();
        this.subtitleManager = subtitleManager;
        this.subtitleContainerManager = new SubtitleRegionContainerManager(this);
        player.on(player.exports.PlayerEvent.CueEnter, function (event) {
            var label = _this.generateLabel(event);
            subtitleManager.cueEnter(event, label);
            _this.preprocessLabelEventCallback.dispatch(event, label);
            if (_this.previewSubtitleActive) {
                _this.subtitleContainerManager.removeLabel(_this.previewSubtitle);
            }
            _this.show();
            _this.subtitleContainerManager.addLabel(label, _this.getDomElement().size());
            _this.updateComponents();
            if (uimanager.getConfig().forceSubtitlesIntoViewContainer) {
                _this.handleSubtitleCropping(label);
            }
        });
        player.on(player.exports.PlayerEvent.CueUpdate, function (event) {
            var label = _this.generateLabel(event);
            var labelToReplace = subtitleManager.cueUpdate(event, label);
            _this.preprocessLabelEventCallback.dispatch(event, label);
            if (labelToReplace) {
                _this.subtitleContainerManager.replaceLabel(labelToReplace, label);
            }
            if (uimanager.getConfig().forceSubtitlesIntoViewContainer) {
                _this.handleSubtitleCropping(label);
            }
        });
        player.on(player.exports.PlayerEvent.CueExit, function (event) {
            var labelToRemove = subtitleManager.cueExit(event);
            if (labelToRemove) {
                _this.subtitleContainerManager.removeLabel(labelToRemove);
                _this.updateComponents();
            }
            if (!subtitleManager.hasCues) {
                if (!_this.previewSubtitleActive) {
                    _this.hide();
                }
                else {
                    _this.subtitleContainerManager.addLabel(_this.previewSubtitle);
                    _this.updateComponents();
                }
            }
        });
        var subtitleClearHandler = function () {
            _this.hide();
            _this.subtitleContainerManager.clear();
            subtitleManager.clear();
            _this.removeComponents();
            _this.updateComponents();
        };
        var clearInactiveCues = function () {
            var removedActiveCues = subtitleManager.clearInactiveCues(player.getCurrentTime());
            removedActiveCues.forEach(function (toRemove) {
                _this.subtitleContainerManager.removeLabel(toRemove.label);
            });
        };
        player.on(player.exports.PlayerEvent.AudioChanged, subtitleClearHandler);
        player.on(player.exports.PlayerEvent.SubtitleEnabled, subtitleClearHandler);
        player.on(player.exports.PlayerEvent.SubtitleDisabled, subtitleClearHandler);
        player.on(player.exports.PlayerEvent.Seeked, clearInactiveCues);
        player.on(player.exports.PlayerEvent.TimeShifted, clearInactiveCues);
        player.on(player.exports.PlayerEvent.PlaybackFinished, subtitleClearHandler);
        player.on(player.exports.PlayerEvent.SourceUnloaded, subtitleClearHandler);
        uimanager.onComponentShow.subscribe(function (component) {
            if (component instanceof controlbar_1.ControlBar) {
                _this.getDomElement().addClass(_this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));
            }
        });
        uimanager.onComponentHide.subscribe(function (component) {
            if (component instanceof controlbar_1.ControlBar) {
                _this.getDomElement().removeClass(_this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));
            }
        });
        this.configureCea608Captions(player, uimanager);
        // Init
        subtitleClearHandler();
    };
    SubtitleOverlay.prototype.detectCroppedSubtitleLabel = function (labelElement) {
        var parent = this.getDomElement().get(0);
        var childRect = labelElement.getBoundingClientRect();
        var parentRect = parent.getBoundingClientRect();
        return {
            top: childRect.top < parentRect.top,
            right: childRect.right > parentRect.right,
            bottom: childRect.bottom > parentRect.bottom,
            left: childRect.left < parentRect.left,
        };
    };
    SubtitleOverlay.prototype.handleSubtitleCropping = function (label) {
        var labelDomElement = label.getDomElement();
        var cropDetection = this.detectCroppedSubtitleLabel(labelDomElement.get(0));
        if (cropDetection.top) {
            labelDomElement.css('top', '0');
            labelDomElement.removeCss('bottom');
        }
        if (cropDetection.right) {
            labelDomElement.css('right', '0');
            labelDomElement.removeCss('left');
        }
        if (cropDetection.bottom) {
            labelDomElement.css('bottom', '0');
            labelDomElement.removeCss('top');
        }
        if (cropDetection.left) {
            labelDomElement.css('left', '0');
            labelDomElement.removeCss('right');
        }
    };
    SubtitleOverlay.prototype.generateLabel = function (event) {
        // Sanitize cue data (must be done before the cue ID is generated in subtitleManager.cueEnter / update)
        if (event.position) {
            // Sometimes the positions are undefined, we assume them to be zero
            event.position.row = event.position.row || 0;
            event.position.column = event.position.column || 0;
        }
        var label = new SubtitleLabel({
            // Prefer the HTML subtitle text if set, else try generating a image tag as string from the image attribute,
            // else use the plain text
            text: event.html || ActiveSubtitleManager.generateImageTagText(event.image) || event.text,
            vtt: event.vtt,
            region: event.region,
            regionStyle: event.regionStyle,
        });
        return label;
    };
    SubtitleOverlay.prototype.configureCea608Captions = function (player, uimanager) {
        var _this = this;
        // The calculated font size
        var fontSize = 0;
        // The required letter spacing spread the text characters evenly across the grid
        var fontLetterSpacing = 0;
        // Flag telling if a font size calculation is required of if the current values are valid
        var fontSizeCalculationRequired = true;
        // Flag telling if the CEA-608 mode is enabled
        var enabled = false;
        var updateCEA608FontSize = function () {
            var dummyLabel = new SubtitleLabel({ text: 'X' });
            dummyLabel.getDomElement().css({
                // By using a large font size we do not need to use multiple letters and can get still an
                // accurate measurement even though the returned size is an integer value
                'font-size': '200px',
                'line-height': '200px',
                'visibility': 'hidden',
            });
            _this.addComponent(dummyLabel);
            _this.updateComponents();
            _this.show();
            var dummyLabelCharWidth = dummyLabel.getDomElement().width();
            var dummyLabelCharHeight = dummyLabel.getDomElement().height();
            var fontSizeRatio = dummyLabelCharWidth / dummyLabelCharHeight;
            _this.removeComponent(dummyLabel);
            _this.updateComponents();
            if (!_this.subtitleManager.hasCues) {
                _this.hide();
            }
            // We subtract 1px here to avoid line breaks at the right border of the subtitle overlay that can happen
            // when texts contain whitespaces. It's probably some kind of pixel rounding issue in the browser's
            // layouting, but the actual reason could not be determined. Aiming for a target width - 1px would work in
            // most browsers, but Safari has a "quantized" font size rendering with huge steps in between so we need
            // to subtract some more pixels to avoid line breaks there as well.
            var subtitleOverlayWidth = _this.getDomElement().width() - 10;
            var subtitleOverlayHeight = _this.getDomElement().height();
            // The size ratio of the letter grid
            var fontGridSizeRatio = (dummyLabelCharWidth * SubtitleOverlay.CEA608_NUM_COLUMNS) /
                (dummyLabelCharHeight * SubtitleOverlay.CEA608_NUM_ROWS);
            // The size ratio of the available space for the grid
            var subtitleOverlaySizeRatio = subtitleOverlayWidth / subtitleOverlayHeight;
            if (subtitleOverlaySizeRatio > fontGridSizeRatio) {
                // When the available space is wider than the text grid, the font size is simply
                // determined by the height of the available space.
                fontSize = subtitleOverlayHeight / SubtitleOverlay.CEA608_NUM_ROWS;
                // Calculate the additional letter spacing required to evenly spread the text across the grid's width
                var gridSlotWidth = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS;
                var fontCharWidth = fontSize * fontSizeRatio;
                fontLetterSpacing = gridSlotWidth - fontCharWidth;
            }
            else {
                // When the available space is not wide enough, texts would vertically overlap if we take
                // the height as a base for the font size, so we need to limit the height. We do that
                // by determining the font size by the width of the available space.
                fontSize = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS / fontSizeRatio;
                fontLetterSpacing = 0;
            }
            // Update font-size of all active subtitle labels
            for (var _i = 0, _a = _this.getComponents(); _i < _a.length; _i++) {
                var label = _a[_i];
                if (label instanceof SubtitleLabel) {
                    label.getDomElement().css({
                        'font-size': "".concat(fontSize, "px"),
                        'letter-spacing': "".concat(fontLetterSpacing, "px"),
                    });
                }
            }
        };
        player.on(player.exports.PlayerEvent.PlayerResized, function () {
            if (enabled) {
                updateCEA608FontSize();
            }
            else {
                fontSizeCalculationRequired = true;
            }
        });
        this.preprocessLabelEventCallback.subscribe(function (event, label) {
            var isCEA608 = event.position != null;
            if (!isCEA608) {
                // Skip all non-CEA608 cues
                return;
            }
            if (!enabled) {
                enabled = true;
                _this.getDomElement().addClass(_this.prefixCss(SubtitleOverlay.CLASS_CEA_608));
                // We conditionally update the font size by this flag here to avoid updating every time a subtitle
                // is added into an empty overlay. Because we reset the overlay when all subtitles are gone, this
                // would trigger an unnecessary update every time, but it's only required under certain conditions,
                // e.g. after the player size has changed.
                if (fontSizeCalculationRequired) {
                    updateCEA608FontSize();
                    fontSizeCalculationRequired = false;
                }
            }
            label.getDomElement().css({
                'left': "".concat(event.position.column * SubtitleOverlay.CEA608_COLUMN_OFFSET, "%"),
                'top': "".concat(event.position.row * SubtitleOverlay.CEA608_ROW_OFFSET, "%"),
                'font-size': "".concat(fontSize, "px"),
                'letter-spacing': "".concat(fontLetterSpacing, "px"),
            });
        });
        var reset = function () {
            _this.getDomElement().removeClass(_this.prefixCss(SubtitleOverlay.CLASS_CEA_608));
            enabled = false;
        };
        player.on(player.exports.PlayerEvent.CueExit, function () {
            if (!_this.subtitleManager.hasCues) {
                // Disable CEA-608 mode when all subtitles are gone (to allow correct formatting and
                // display of other types of subtitles, e.g. the formatting preview subtitle)
                reset();
            }
        });
        player.on(player.exports.PlayerEvent.SourceUnloaded, reset);
        player.on(player.exports.PlayerEvent.SubtitleEnabled, reset);
        player.on(player.exports.PlayerEvent.SubtitleDisabled, reset);
    };
    SubtitleOverlay.prototype.enablePreviewSubtitleLabel = function () {
        if (!this.subtitleManager.hasCues) {
            this.previewSubtitleActive = true;
            this.subtitleContainerManager.addLabel(this.previewSubtitle);
            this.updateComponents();
            this.show();
        }
    };
    SubtitleOverlay.prototype.removePreviewSubtitleLabel = function () {
        if (this.previewSubtitleActive) {
            this.previewSubtitleActive = false;
            this.subtitleContainerManager.removeLabel(this.previewSubtitle);
            this.updateComponents();
        }
    };
    SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE = 'controlbar-visible';
    SubtitleOverlay.CLASS_CEA_608 = 'cea608';
    // The number of rows in a cea608 grid
    SubtitleOverlay.CEA608_NUM_ROWS = 15;
    // The number of columns in a cea608 grid
    SubtitleOverlay.CEA608_NUM_COLUMNS = 32;
    // The offset in percent for one row (which is also the height of a row)
    SubtitleOverlay.CEA608_ROW_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_ROWS;
    // The offset in percent for one column (which is also the width of a column)
    SubtitleOverlay.CEA608_COLUMN_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_COLUMNS;
    return SubtitleOverlay;
}(container_1.Container));
var SubtitleLabel = /** @class */ (function (_super) {
    __extends(SubtitleLabel, _super);
    function SubtitleLabel(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-subtitle-label',
        }, _this.config);
        return _this;
    }
    Object.defineProperty(SubtitleLabel.prototype, "vtt", {
        get: function () {
            return this.config.vtt;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleLabel.prototype, "region", {
        get: function () {
            return this.config.region;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleLabel.prototype, "regionStyle", {
        get: function () {
            return this.config.regionStyle;
        },
        enumerable: false,
        configurable: true
    });
    return SubtitleLabel;
}(label_1.Label));
exports.SubtitleLabel = SubtitleLabel;
var ActiveSubtitleManager = /** @class */ (function () {
    function ActiveSubtitleManager() {
        this.activeSubtitleCueMap = {};
        this.activeSubtitleCueCount = 0;
    }
    /**
     * Calculates a unique ID for a subtitle cue, which is needed to associate an CueEnter with its CueExit
     * event so we can remove the correct subtitle in CueExit when multiple subtitles are active at the same time.
     * The start time plus the text should make a unique identifier, and in the only case where a collision
     * can happen, two similar texts will be displayed at a similar time and a similar position (or without position).
     * The start time should always be known, because it is required to schedule the CueEnter event. The end time
     * must not necessarily be known and therefore cannot be used for the ID.
     * @param event
     * @return {string}
     */
    ActiveSubtitleManager.calculateId = function (event) {
        var id = event.start + '-' + event.text;
        if (event.position) {
            id += '-' + event.position.row + '-' + event.position.column;
        }
        return id;
    };
    ActiveSubtitleManager.prototype.cueEnter = function (event, label) {
        this.addCueToMap(event, label);
    };
    ActiveSubtitleManager.prototype.cueUpdate = function (event, label) {
        var labelToReplace = this.popCueFromMap(event);
        if (labelToReplace) {
            this.addCueToMap(event, label);
            return labelToReplace;
        }
        return undefined;
    };
    ActiveSubtitleManager.prototype.addCueToMap = function (event, label) {
        var id = ActiveSubtitleManager.calculateId(event);
        // Create array for id if it does not exist
        this.activeSubtitleCueMap[id] = this.activeSubtitleCueMap[id] || [];
        // Add cue
        this.activeSubtitleCueMap[id].push({ event: event, label: label });
        this.activeSubtitleCueCount++;
    };
    ActiveSubtitleManager.prototype.popCueFromMap = function (event) {
        var id = ActiveSubtitleManager.calculateId(event);
        var activeSubtitleCues = this.activeSubtitleCueMap[id];
        if (activeSubtitleCues && activeSubtitleCues.length > 0) {
            // Remove cue
            /* We apply the FIFO approach here and remove the oldest cue from the associated id. When there are multiple cues
             * with the same id, there is no way to know which one of the cues is to be deleted, so we just hope that FIFO
             * works fine. Theoretically it can happen that two cues with colliding ids are removed at different times, in
             * the wrong order. This rare case has yet to be observed. If it ever gets an issue, we can take the unstable
             * cue end time (which can change between CueEnter and CueExit IN CueUpdate) and use it as an
             * additional hint to try and remove the correct one of the colliding cues.
             */
            var activeSubtitleCue = activeSubtitleCues.shift();
            this.activeSubtitleCueCount--;
            return activeSubtitleCue.label;
        }
    };
    /**
     * Removes all active cues which don't enclose the given time
     * @param time the time for which subtitles should remain
     */
    ActiveSubtitleManager.prototype.clearInactiveCues = function (time) {
        var _this = this;
        var removedCues = [];
        Object.keys(this.activeSubtitleCueMap).forEach(function (key) {
            var activeCues = _this.activeSubtitleCueMap[key];
            activeCues.forEach(function (cue) {
                if (time < cue.event.start || time > cue.event.end) {
                    _this.popCueFromMap(cue.event);
                    removedCues.push(cue);
                }
            });
        });
        return removedCues;
    };
    ActiveSubtitleManager.generateImageTagText = function (imageData) {
        if (!imageData) {
            return;
        }
        var imgTag = new dom_1.DOM('img', {
            src: imageData,
        });
        imgTag.css('width', '100%');
        return imgTag.get(0).outerHTML; // return the html as string
    };
    /**
     * Returns the label associated with an already added cue.
     * @param event
     * @return {SubtitleLabel}
     */
    ActiveSubtitleManager.prototype.getCues = function (event) {
        var id = ActiveSubtitleManager.calculateId(event);
        var activeSubtitleCues = this.activeSubtitleCueMap[id];
        if (activeSubtitleCues && activeSubtitleCues.length > 0) {
            return activeSubtitleCues.map(function (cue) { return cue.label; });
        }
    };
    /**
     * Removes the subtitle cue from the manager and returns the label that should be removed from the subtitle overlay,
     * or null if there is no associated label existing (e.g. because all labels have been {@link #clear cleared}.
     * @param event
     * @return {SubtitleLabel|null}
     */
    ActiveSubtitleManager.prototype.cueExit = function (event) {
        return this.popCueFromMap(event);
    };
    Object.defineProperty(ActiveSubtitleManager.prototype, "cueCount", {
        /**
         * Returns the number of active subtitle cues.
         * @return {number}
         */
        get: function () {
            // We explicitly count the cues to save an Array.reduce on every cueCount call (which can happen frequently)
            return this.activeSubtitleCueCount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ActiveSubtitleManager.prototype, "hasCues", {
        /**
         * Returns true if there are active subtitle cues, else false.
         * @return {boolean}
         */
        get: function () {
            return this.cueCount > 0;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Removes all subtitle cues from the manager.
     */
    ActiveSubtitleManager.prototype.clear = function () {
        this.activeSubtitleCueMap = {};
        this.activeSubtitleCueCount = 0;
    };
    return ActiveSubtitleManager;
}());
var SubtitleRegionContainerManager = /** @class */ (function () {
    /**
     * @param subtitleOverlay Reference to the subtitle overlay for adding and removing the containers.
     */
    function SubtitleRegionContainerManager(subtitleOverlay) {
        this.subtitleOverlay = subtitleOverlay;
        this.subtitleRegionContainers = {};
        this.subtitleOverlay = subtitleOverlay;
    }
    SubtitleRegionContainerManager.prototype.getRegion = function (label) {
        if (label.vtt) {
            return {
                regionContainerId: label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt',
                regionName: 'vtt',
            };
        }
        return {
            regionContainerId: label.region || 'default',
            regionName: label.region || 'default',
        };
    };
    /**
     * Creates and wraps a subtitle label into a container div based on the subtitle region.
     * If the subtitle has positioning information it is added to the container.
     * @param label The subtitle label to wrap
     */
    SubtitleRegionContainerManager.prototype.addLabel = function (label, overlaySize) {
        var _a = this.getRegion(label), regionContainerId = _a.regionContainerId, regionName = _a.regionName;
        var cssClasses = ["subtitle-position-".concat(regionName)];
        if (label.vtt && label.vtt.region) {
            cssClasses.push("vtt-region-".concat(label.vtt.region.id));
        }
        if (!this.subtitleRegionContainers[regionContainerId]) {
            var regionContainer = new SubtitleRegionContainer({
                cssClasses: cssClasses,
            });
            this.subtitleRegionContainers[regionContainerId] = regionContainer;
            if (label.regionStyle) {
                regionContainer.getDomElement().attr('style', label.regionStyle);
            }
            else if (label.vtt && !label.vtt.region) {
                /**
                 * If there is no region present to wrap the Cue Box, the Cue box becomes the
                 * region itself. Therefore the positioning values have to come from the box.
                 */
                regionContainer.getDomElement().css('position', 'static');
            }
            else {
                // getDomElement needs to be called at least once to ensure the component exists
                regionContainer.getDomElement();
            }
            for (var regionContainerId_1 in this.subtitleRegionContainers) {
                this.subtitleOverlay.addComponent(this.subtitleRegionContainers[regionContainerId_1]);
            }
        }
        this.subtitleRegionContainers[regionContainerId].addLabel(label, overlaySize);
    };
    SubtitleRegionContainerManager.prototype.replaceLabel = function (previousLabel, newLabel) {
        var regionContainerId = this.getRegion(previousLabel).regionContainerId;
        this.subtitleRegionContainers[regionContainerId].removeLabel(previousLabel);
        this.subtitleRegionContainers[regionContainerId].addLabel(newLabel);
    };
    /**
     * Removes a subtitle label from a container.
     */
    SubtitleRegionContainerManager.prototype.removeLabel = function (label) {
        var regionContainerId;
        if (label.vtt) {
            regionContainerId = label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt';
        }
        else {
            regionContainerId = label.region || 'default';
        }
        this.subtitleRegionContainers[regionContainerId].removeLabel(label);
        // Remove container if no more labels are displayed
        if (this.subtitleRegionContainers[regionContainerId].isEmpty()) {
            this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionContainerId]);
            delete this.subtitleRegionContainers[regionContainerId];
        }
    };
    /**
     * Removes all subtitle containers.
     */
    SubtitleRegionContainerManager.prototype.clear = function () {
        for (var regionName in this.subtitleRegionContainers) {
            this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionName]);
        }
        this.subtitleRegionContainers = {};
    };
    return SubtitleRegionContainerManager;
}());
exports.SubtitleRegionContainerManager = SubtitleRegionContainerManager;
var SubtitleRegionContainer = /** @class */ (function (_super) {
    __extends(SubtitleRegionContainer, _super);
    function SubtitleRegionContainer(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.labelCount = 0;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'subtitle-region-container',
        }, _this.config);
        return _this;
    }
    SubtitleRegionContainer.prototype.addLabel = function (labelToAdd, overlaySize) {
        this.labelCount++;
        if (labelToAdd.vtt) {
            if (labelToAdd.vtt.region && overlaySize) {
                vttutils_1.VttUtils.setVttRegionStyles(this, labelToAdd.vtt.region, overlaySize);
            }
            vttutils_1.VttUtils.setVttCueBoxStyles(labelToAdd, overlaySize);
        }
        this.addComponent(labelToAdd);
        this.updateComponents();
    };
    SubtitleRegionContainer.prototype.removeLabel = function (labelToRemove) {
        this.labelCount--;
        this.removeComponent(labelToRemove);
        this.updateComponents();
    };
    SubtitleRegionContainer.prototype.isEmpty = function () {
        return this.labelCount === 0;
    };
    return SubtitleRegionContainer;
}(container_1.Container));
exports.SubtitleRegionContainer = SubtitleRegionContainer;

},{"../dom":84,"../eventdispatcher":86,"../localization/i18n":91,"../vttutils":117,"./container":24,"./controlbar":25,"./label":31}],57:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleSelectBox = void 0;
var selectbox_1 = require("./selectbox");
var subtitleutils_1 = require("../subtitleutils");
var i18n_1 = require("../localization/i18n");
/**
 * A select box providing a selection between available subtitle and caption tracks.
 */
var SubtitleSelectBox = /** @class */ (function (_super) {
    __extends(SubtitleSelectBox, _super);
    function SubtitleSelectBox(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitleselectbox'],
            ariaLabel: i18n_1.i18n.getLocalizer('subtitle.select'),
        }, _this.config);
        return _this;
    }
    SubtitleSelectBox.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        new subtitleutils_1.SubtitleSwitchHandler(player, this, uimanager);
    };
    return SubtitleSelectBox;
}(selectbox_1.SelectBox));
exports.SubtitleSelectBox = SubtitleSelectBox;

},{"../localization/i18n":91,"../subtitleutils":111,"./selectbox":46}],58:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackgroundColorSelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different background colors.
 */
var BackgroundColorSelectBox = /** @class */ (function (_super) {
    __extends(BackgroundColorSelectBox, _super);
    function BackgroundColorSelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingsbackgroundcolorselectbox'],
        }, _this.config);
        return _this;
    }
    BackgroundColorSelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('white', i18n_1.i18n.getLocalizer('colors.white'));
        this.addItem('black', i18n_1.i18n.getLocalizer('colors.black'));
        this.addItem('red', i18n_1.i18n.getLocalizer('colors.red'));
        this.addItem('green', i18n_1.i18n.getLocalizer('colors.green'));
        this.addItem('blue', i18n_1.i18n.getLocalizer('colors.blue'));
        this.addItem('cyan', i18n_1.i18n.getLocalizer('colors.cyan'));
        this.addItem('yellow', i18n_1.i18n.getLocalizer('colors.yellow'));
        this.addItem('magenta', i18n_1.i18n.getLocalizer('colors.magenta'));
        var setColorAndOpacity = function () {
            if (_this.settingsManager.backgroundColor.isSet() && _this.settingsManager.backgroundOpacity.isSet()) {
                _this.toggleOverlayClass('bgcolor-' + _this.settingsManager.backgroundColor.value + _this.settingsManager.backgroundOpacity.value);
            }
            else {
                _this.toggleOverlayClass(null);
            }
        };
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.backgroundColor.value = key;
        });
        this.settingsManager.backgroundColor.onChanged.subscribe(function (sender, property) {
            // Color and opacity go together, so we need to...
            if (!_this.settingsManager.backgroundColor.isSet()) {
                // ... clear the opacity when the color is not set
                _this.settingsManager.backgroundOpacity.clear();
            }
            else if (!_this.settingsManager.backgroundOpacity.isSet()) {
                // ... set an opacity when the color is set
                _this.settingsManager.backgroundOpacity.value = '100';
            }
            _this.selectItem(property.value);
            setColorAndOpacity();
        });
        this.settingsManager.backgroundOpacity.onChanged.subscribe(function () {
            setColorAndOpacity();
        });
        // Load initial value
        if (this.settingsManager.backgroundColor.isSet()) {
            this.selectItem(this.settingsManager.backgroundColor.value);
        }
    };
    return BackgroundColorSelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.BackgroundColorSelectBox = BackgroundColorSelectBox;

},{"../../localization/i18n":91,"./subtitlesettingselectbox":65}],59:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackgroundOpacitySelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different background opacity.
 */
var BackgroundOpacitySelectBox = /** @class */ (function (_super) {
    __extends(BackgroundOpacitySelectBox, _super);
    function BackgroundOpacitySelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingsbackgroundopacityselectbox'],
        }, _this.config);
        return _this;
    }
    BackgroundOpacitySelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('100', i18n_1.i18n.getLocalizer('percent', { value: 100 }));
        this.addItem('75', i18n_1.i18n.getLocalizer('percent', { value: 75 }));
        this.addItem('50', i18n_1.i18n.getLocalizer('percent', { value: 50 }));
        this.addItem('25', i18n_1.i18n.getLocalizer('percent', { value: 25 }));
        this.addItem('0', i18n_1.i18n.getLocalizer('percent', { value: 0 }));
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.backgroundOpacity.value = key;
            // Color and opacity go together, so we need to...
            if (!_this.settingsManager.backgroundOpacity.isSet()) {
                // ... clear the color when the opacity is not set
                _this.settingsManager.backgroundColor.clear();
            }
            else if (!_this.settingsManager.backgroundColor.isSet()) {
                // ... set a color when the opacity is set
                _this.settingsManager.backgroundColor.value = 'black';
            }
        });
        // Update selected item when value is set from somewhere else
        this.settingsManager.backgroundOpacity.onChanged.subscribe(function (sender, property) {
            _this.selectItem(property.value);
        });
        // Load initial value
        if (this.settingsManager.backgroundOpacity.isSet()) {
            this.selectItem(this.settingsManager.backgroundOpacity.value);
        }
    };
    return BackgroundOpacitySelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.BackgroundOpacitySelectBox = BackgroundOpacitySelectBox;

},{"../../localization/i18n":91,"./subtitlesettingselectbox":65}],60:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CharacterEdgeSelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different character edge.
 */
var CharacterEdgeSelectBox = /** @class */ (function (_super) {
    __extends(CharacterEdgeSelectBox, _super);
    function CharacterEdgeSelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingscharacteredgeselectbox'],
        }, _this.config);
        return _this;
    }
    CharacterEdgeSelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('raised', i18n_1.i18n.getLocalizer('settings.subtitles.characterEdge.raised'));
        this.addItem('depressed', i18n_1.i18n.getLocalizer('settings.subtitles.characterEdge.depressed'));
        this.addItem('uniform', i18n_1.i18n.getLocalizer('settings.subtitles.characterEdge.uniform'));
        this.addItem('dropshadowed', i18n_1.i18n.getLocalizer('settings.subtitles.characterEdge.dropshadowed'));
        this.settingsManager.characterEdge.onChanged.subscribe(function (sender, property) {
            if (property.isSet()) {
                _this.toggleOverlayClass('characteredge-' + property.value);
            }
            else {
                _this.toggleOverlayClass(null);
            }
            // Select the item in case the property was set from outside
            _this.selectItem(property.value);
        });
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.characterEdge.value = key;
        });
        // Load initial value
        if (this.settingsManager.characterEdge.isSet()) {
            this.selectItem(this.settingsManager.characterEdge.value);
        }
    };
    return CharacterEdgeSelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.CharacterEdgeSelectBox = CharacterEdgeSelectBox;

},{"../../localization/i18n":91,"./subtitlesettingselectbox":65}],61:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FontColorSelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different font colors.
 */
var FontColorSelectBox = /** @class */ (function (_super) {
    __extends(FontColorSelectBox, _super);
    function FontColorSelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingsfontcolorselectbox'],
        }, _this.config);
        return _this;
    }
    FontColorSelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('white', i18n_1.i18n.getLocalizer('colors.white'));
        this.addItem('black', i18n_1.i18n.getLocalizer('colors.black'));
        this.addItem('red', i18n_1.i18n.getLocalizer('colors.red'));
        this.addItem('green', i18n_1.i18n.getLocalizer('colors.green'));
        this.addItem('blue', i18n_1.i18n.getLocalizer('colors.blue'));
        this.addItem('cyan', i18n_1.i18n.getLocalizer('colors.cyan'));
        this.addItem('yellow', i18n_1.i18n.getLocalizer('colors.yellow'));
        this.addItem('magenta', i18n_1.i18n.getLocalizer('colors.magenta'));
        var setColorAndOpacity = function () {
            if (_this.settingsManager.fontColor.isSet() && _this.settingsManager.fontOpacity.isSet()) {
                _this.toggleOverlayClass('fontcolor-' + _this.settingsManager.fontColor.value + _this.settingsManager.fontOpacity.value);
            }
            else {
                _this.toggleOverlayClass(null);
            }
        };
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.fontColor.value = key;
        });
        this.settingsManager.fontColor.onChanged.subscribe(function (sender, property) {
            // Color and opacity go together, so we need to...
            if (!_this.settingsManager.fontColor.isSet()) {
                // ... clear the opacity when the color is not set
                _this.settingsManager.fontOpacity.clear();
            }
            else if (!_this.settingsManager.fontOpacity.isSet()) {
                // ... set an opacity when the color is set
                _this.settingsManager.fontOpacity.value = '100';
            }
            _this.selectItem(property.value);
            setColorAndOpacity();
        });
        this.settingsManager.fontOpacity.onChanged.subscribe(function () {
            setColorAndOpacity();
        });
        // Load initial value
        if (this.settingsManager.fontColor.isSet()) {
            this.selectItem(this.settingsManager.fontColor.value);
        }
    };
    return FontColorSelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.FontColorSelectBox = FontColorSelectBox;

},{"../../localization/i18n":91,"./subtitlesettingselectbox":65}],62:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FontFamilySelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different font family.
 */
var FontFamilySelectBox = /** @class */ (function (_super) {
    __extends(FontFamilySelectBox, _super);
    function FontFamilySelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingsfontfamilyselectbox'],
        }, _this.config);
        return _this;
    }
    FontFamilySelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('monospacedserif', i18n_1.i18n.getLocalizer('settings.subtitles.font.family.monospacedserif'));
        this.addItem('proportionalserif', i18n_1.i18n.getLocalizer('settings.subtitles.font.family.proportionalserif'));
        this.addItem('monospacedsansserif', i18n_1.i18n.getLocalizer('settings.subtitles.font.family.monospacedsansserif'));
        this.addItem('proportionalsansserif', i18n_1.i18n.getLocalizer('settings.subtitles.font.family.proportionalserif'));
        this.addItem('casual', i18n_1.i18n.getLocalizer('settings.subtitles.font.family.casual'));
        this.addItem('cursive', i18n_1.i18n.getLocalizer('settings.subtitles.font.family.cursive'));
        this.addItem('smallcapital', i18n_1.i18n.getLocalizer('settings.subtitles.font.family.smallcapital'));
        this.settingsManager.fontFamily.onChanged.subscribe(function (sender, property) {
            if (property.isSet()) {
                _this.toggleOverlayClass('fontfamily-' + property.value);
            }
            else {
                _this.toggleOverlayClass(null);
            }
            // Select the item in case the property was set from outside
            _this.selectItem(property.value);
        });
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.fontFamily.value = key;
        });
        // Load initial value
        if (this.settingsManager.fontFamily.isSet()) {
            this.selectItem(this.settingsManager.fontFamily.value);
        }
    };
    return FontFamilySelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.FontFamilySelectBox = FontFamilySelectBox;

},{"../../localization/i18n":91,"./subtitlesettingselectbox":65}],63:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FontOpacitySelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different font colors.
 */
var FontOpacitySelectBox = /** @class */ (function (_super) {
    __extends(FontOpacitySelectBox, _super);
    function FontOpacitySelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingsfontopacityselectbox'],
        }, _this.config);
        return _this;
    }
    FontOpacitySelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('100', i18n_1.i18n.getLocalizer('percent', { value: 100 }));
        this.addItem('75', i18n_1.i18n.getLocalizer('percent', { value: 75 }));
        this.addItem('50', i18n_1.i18n.getLocalizer('percent', { value: 50 }));
        this.addItem('25', i18n_1.i18n.getLocalizer('percent', { value: 25 }));
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.fontOpacity.value = key;
            // Color and opacity go together, so we need to...
            if (!_this.settingsManager.fontOpacity.isSet()) {
                // ... clear the color when the opacity is not set
                _this.settingsManager.fontColor.clear();
            }
            else if (!_this.settingsManager.fontColor.isSet()) {
                // ... set a color when the opacity is set
                _this.settingsManager.fontColor.value = 'white';
            }
        });
        // Update selected item when value is set from somewhere else
        this.settingsManager.fontOpacity.onChanged.subscribe(function (sender, property) {
            _this.selectItem(property.value);
        });
        // Load initial value
        if (this.settingsManager.fontOpacity.isSet()) {
            this.selectItem(this.settingsManager.fontOpacity.value);
        }
    };
    return FontOpacitySelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.FontOpacitySelectBox = FontOpacitySelectBox;

},{"../../localization/i18n":91,"./subtitlesettingselectbox":65}],64:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FontSizeSelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different font colors.
 */
var FontSizeSelectBox = /** @class */ (function (_super) {
    __extends(FontSizeSelectBox, _super);
    function FontSizeSelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingsfontsizeselectbox'],
        }, _this.config);
        return _this;
    }
    FontSizeSelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('50', i18n_1.i18n.getLocalizer('percent', { value: 50 }));
        this.addItem('75', i18n_1.i18n.getLocalizer('percent', { value: 75 }));
        this.addItem('100', i18n_1.i18n.getLocalizer('percent', { value: 100 }));
        this.addItem('150', i18n_1.i18n.getLocalizer('percent', { value: 150 }));
        this.addItem('200', i18n_1.i18n.getLocalizer('percent', { value: 200 }));
        this.addItem('300', i18n_1.i18n.getLocalizer('percent', { value: 300 }));
        this.addItem('400', i18n_1.i18n.getLocalizer('percent', { value: 400 }));
        this.settingsManager.fontSize.onChanged.subscribe(function (sender, property) {
            if (property.isSet()) {
                _this.toggleOverlayClass('fontsize-' + property.value);
            }
            else {
                _this.toggleOverlayClass(null);
            }
            // Select the item in case the property was set from outside
            _this.selectItem(property.value);
        });
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.fontSize.value = key;
        });
        // Load initial value
        if (this.settingsManager.fontSize.isSet()) {
            this.selectItem(this.settingsManager.fontSize.value);
        }
    };
    return FontSizeSelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.FontSizeSelectBox = FontSizeSelectBox;

},{"../../localization/i18n":91,"./subtitlesettingselectbox":65}],65:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleSettingSelectBox = void 0;
var selectbox_1 = require("../selectbox");
/**
 * Base class for all subtitles settings select box
 **/
var SubtitleSettingSelectBox = /** @class */ (function (_super) {
    __extends(SubtitleSettingSelectBox, _super);
    function SubtitleSettingSelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.settingsManager = config.settingsManager;
        _this.overlay = config.overlay;
        return _this;
    }
    /**
     * Removes a previously set class and adds the passed in class.
     * @param cssClass The new class to replace the previous class with or null to just remove the previous class
     */
    SubtitleSettingSelectBox.prototype.toggleOverlayClass = function (cssClass) {
        // Remove previous class if existing
        if (this.currentCssClass) {
            this.overlay.getDomElement().removeClass(this.currentCssClass);
            this.currentCssClass = null;
        }
        // Add new class if specified. If the new class is null, we don't add anything.
        if (cssClass) {
            this.currentCssClass = this.prefixCss(cssClass);
            this.overlay.getDomElement().addClass(this.currentCssClass);
        }
    };
    return SubtitleSettingSelectBox;
}(selectbox_1.SelectBox));
exports.SubtitleSettingSelectBox = SubtitleSettingSelectBox;

},{"../selectbox":46}],66:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleSettingsLabel = void 0;
var container_1 = require("../container");
var dom_1 = require("../../dom");
var i18n_1 = require("../../localization/i18n");
var SubtitleSettingsLabel = /** @class */ (function (_super) {
    __extends(SubtitleSettingsLabel, _super);
    function SubtitleSettingsLabel(config) {
        var _this = _super.call(this, config) || this;
        _this.opener = config.opener;
        _this.text = config.text;
        _this.for = config.for;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-label',
            components: [
                _this.opener,
            ],
        }, _this.config);
        return _this;
    }
    SubtitleSettingsLabel.prototype.toDomElement = function () {
        var labelElement = new dom_1.DOM('label', {
            'id': this.config.id,
            'class': this.getCssClasses(),
            'for': this.for,
        }).append(new dom_1.DOM('span', {}).html(i18n_1.i18n.performLocalization(this.text)), this.opener.getDomElement());
        return labelElement;
    };
    return SubtitleSettingsLabel;
}(container_1.Container));
exports.SubtitleSettingsLabel = SubtitleSettingsLabel;

},{"../../dom":84,"../../localization/i18n":91,"../container":24}],67:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleSettingsProperty = exports.SubtitleSettingsManager = void 0;
var storageutils_1 = require("../../storageutils");
var component_1 = require("../component");
var eventdispatcher_1 = require("../../eventdispatcher");
var SubtitleSettingsManager = /** @class */ (function () {
    function SubtitleSettingsManager() {
        var _this = this;
        this._properties = {
            fontColor: new SubtitleSettingsProperty(this),
            fontOpacity: new SubtitleSettingsProperty(this),
            fontFamily: new SubtitleSettingsProperty(this),
            fontSize: new SubtitleSettingsProperty(this),
            characterEdge: new SubtitleSettingsProperty(this),
            backgroundColor: new SubtitleSettingsProperty(this),
            backgroundOpacity: new SubtitleSettingsProperty(this),
            windowColor: new SubtitleSettingsProperty(this),
            windowOpacity: new SubtitleSettingsProperty(this),
        };
        this.userSettings = {};
        this.localStorageKey = DummyComponent.instance().prefixCss('subtitlesettings');
        var _loop_1 = function (propertyName) {
            this_1._properties[propertyName].onChanged.subscribe(function (sender, property) {
                if (property.isSet()) {
                    _this.userSettings[propertyName] = property.value;
                }
                else {
                    // Delete the property from the settings object if unset to avoid serialization of null values
                    delete _this.userSettings[propertyName];
                }
                // Save the settings object when a property has changed
                _this.save();
            });
        };
        var this_1 = this;
        for (var propertyName in this._properties) {
            _loop_1(propertyName);
        }
        this.load();
    }
    SubtitleSettingsManager.prototype.reset = function () {
        for (var propertyName in this._properties) {
            this._properties[propertyName].clear();
        }
    };
    Object.defineProperty(SubtitleSettingsManager.prototype, "fontColor", {
        get: function () {
            return this._properties.fontColor;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "fontOpacity", {
        get: function () {
            return this._properties.fontOpacity;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "fontFamily", {
        get: function () {
            return this._properties.fontFamily;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "fontSize", {
        get: function () {
            return this._properties.fontSize;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "characterEdge", {
        get: function () {
            return this._properties.characterEdge;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "backgroundColor", {
        get: function () {
            return this._properties.backgroundColor;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "backgroundOpacity", {
        get: function () {
            return this._properties.backgroundOpacity;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "windowColor", {
        get: function () {
            return this._properties.windowColor;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "windowOpacity", {
        get: function () {
            return this._properties.windowOpacity;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Saves the settings to local storage.
     */
    SubtitleSettingsManager.prototype.save = function () {
        storageutils_1.StorageUtils.setObject(this.localStorageKey, this.userSettings);
    };
    /**
     * Loads the settings from local storage
     */
    SubtitleSettingsManager.prototype.load = function () {
        this.userSettings = storageutils_1.StorageUtils.getObject(this.localStorageKey) || {};
        // Apply the loaded settings
        for (var property in this.userSettings) {
            this._properties[property].value = this.userSettings[property];
        }
    };
    return SubtitleSettingsManager;
}());
exports.SubtitleSettingsManager = SubtitleSettingsManager;
/**
 * A dummy component whose sole purpose is to expose the {@link #prefixCss} method to the
 * {@link SubtitleSettingsManager}.
 */
var DummyComponent = /** @class */ (function (_super) {
    __extends(DummyComponent, _super);
    function DummyComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DummyComponent.instance = function () {
        if (!DummyComponent._instance) {
            DummyComponent._instance = new DummyComponent();
        }
        return DummyComponent._instance;
    };
    DummyComponent.prototype.prefixCss = function (cssClassOrId) {
        return _super.prototype.prefixCss.call(this, cssClassOrId);
    };
    return DummyComponent;
}(component_1.Component));
var SubtitleSettingsProperty = /** @class */ (function () {
    function SubtitleSettingsProperty(manager) {
        this._manager = manager;
        this._onChanged = new eventdispatcher_1.EventDispatcher();
    }
    SubtitleSettingsProperty.prototype.isSet = function () {
        return this._value != null;
    };
    SubtitleSettingsProperty.prototype.clear = function () {
        this._value = null;
        this.onChangedEvent(null);
    };
    Object.defineProperty(SubtitleSettingsProperty.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            if (typeof value === 'string' && value === 'null') {
                value = null;
            }
            this._value = value;
            this.onChangedEvent(value);
        },
        enumerable: false,
        configurable: true
    });
    SubtitleSettingsProperty.prototype.onChangedEvent = function (value) {
        this._onChanged.dispatch(this._manager, this);
    };
    Object.defineProperty(SubtitleSettingsProperty.prototype, "onChanged", {
        get: function () {
            return this._onChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    return SubtitleSettingsProperty;
}());
exports.SubtitleSettingsProperty = SubtitleSettingsProperty;

},{"../../eventdispatcher":86,"../../storageutils":109,"../component":23}],68:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleSettingsPanelPage = void 0;
var settingspanelpage_1 = require("../settingspanelpage");
var subtitlesettingsmanager_1 = require("./subtitlesettingsmanager");
var fontsizeselectbox_1 = require("./fontsizeselectbox");
var fontfamilyselectbox_1 = require("./fontfamilyselectbox");
var fontcolorselectbox_1 = require("./fontcolorselectbox");
var fontopacityselectbox_1 = require("./fontopacityselectbox");
var characteredgeselectbox_1 = require("./characteredgeselectbox");
var backgroundcolorselectbox_1 = require("./backgroundcolorselectbox");
var backgroundopacityselectbox_1 = require("./backgroundopacityselectbox");
var windowcolorselectbox_1 = require("./windowcolorselectbox");
var windowopacityselectbox_1 = require("./windowopacityselectbox");
var subtitlesettingsresetbutton_1 = require("./subtitlesettingsresetbutton");
var settingspanelpagebackbutton_1 = require("../settingspanelpagebackbutton");
var settingspanelitem_1 = require("../settingspanelitem");
var i18n_1 = require("../../localization/i18n");
var SubtitleSettingsPanelPage = /** @class */ (function (_super) {
    __extends(SubtitleSettingsPanelPage, _super);
    function SubtitleSettingsPanelPage(config) {
        var _this = _super.call(this, config) || this;
        _this.overlay = config.overlay;
        _this.settingsPanel = config.settingsPanel;
        var manager = new subtitlesettingsmanager_1.SubtitleSettingsManager();
        _this.config = _this.mergeConfig(config, {
            components: [
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.font.size'), new fontsizeselectbox_1.FontSizeSelectBox({
                    overlay: _this.overlay, settingsManager: manager,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.font.family'), new fontfamilyselectbox_1.FontFamilySelectBox({
                    overlay: _this.overlay, settingsManager: manager,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.font.color'), new fontcolorselectbox_1.FontColorSelectBox({
                    overlay: _this.overlay, settingsManager: manager,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.font.opacity'), new fontopacityselectbox_1.FontOpacitySelectBox({
                    overlay: _this.overlay, settingsManager: manager,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.characterEdge'), new characteredgeselectbox_1.CharacterEdgeSelectBox({
                    overlay: _this.overlay, settingsManager: manager,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.background.color'), new backgroundcolorselectbox_1.BackgroundColorSelectBox({
                    overlay: _this.overlay, settingsManager: manager,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.background.opacity'), new backgroundopacityselectbox_1.BackgroundOpacitySelectBox({
                    overlay: _this.overlay, settingsManager: manager,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.window.color'), new windowcolorselectbox_1.WindowColorSelectBox({
                    overlay: _this.overlay, settingsManager: manager,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.window.opacity'), new windowopacityselectbox_1.WindowOpacitySelectBox({
                    overlay: _this.overlay, settingsManager: manager,
                })),
                new settingspanelitem_1.SettingsPanelItem(new settingspanelpagebackbutton_1.SettingsPanelPageBackButton({
                    container: _this.settingsPanel,
                    text: i18n_1.i18n.getLocalizer('back'),
                }), new subtitlesettingsresetbutton_1.SubtitleSettingsResetButton({
                    settingsManager: manager,
                }), {
                    role: 'menubar',
                }),
            ],
        }, _this.config);
        return _this;
    }
    SubtitleSettingsPanelPage.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.onActive.subscribe(function () {
            _this.overlay.enablePreviewSubtitleLabel();
        });
        this.onInactive.subscribe(function () {
            _this.overlay.removePreviewSubtitleLabel();
        });
    };
    return SubtitleSettingsPanelPage;
}(settingspanelpage_1.SettingsPanelPage));
exports.SubtitleSettingsPanelPage = SubtitleSettingsPanelPage;

},{"../../localization/i18n":91,"../settingspanelitem":48,"../settingspanelpage":49,"../settingspanelpagebackbutton":50,"./backgroundcolorselectbox":58,"./backgroundopacityselectbox":59,"./characteredgeselectbox":60,"./fontcolorselectbox":61,"./fontfamilyselectbox":62,"./fontopacityselectbox":63,"./fontsizeselectbox":64,"./subtitlesettingsmanager":67,"./subtitlesettingsresetbutton":69,"./windowcolorselectbox":70,"./windowopacityselectbox":71}],69:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleSettingsResetButton = void 0;
var button_1 = require("../button");
var i18n_1 = require("../../localization/i18n");
/**
 * A button that resets all subtitle settings to their defaults.
 */
var SubtitleSettingsResetButton = /** @class */ (function (_super) {
    __extends(SubtitleSettingsResetButton, _super);
    function SubtitleSettingsResetButton(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-subtitlesettingsresetbutton',
            text: i18n_1.i18n.getLocalizer('reset'),
        }, _this.config);
        return _this;
    }
    SubtitleSettingsResetButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.onClick.subscribe(function () {
            _this.config.settingsManager.reset();
        });
    };
    return SubtitleSettingsResetButton;
}(button_1.Button));
exports.SubtitleSettingsResetButton = SubtitleSettingsResetButton;

},{"../../localization/i18n":91,"../button":17}],70:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowColorSelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different background colors.
 */
var WindowColorSelectBox = /** @class */ (function (_super) {
    __extends(WindowColorSelectBox, _super);
    function WindowColorSelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingswindowcolorselectbox'],
        }, _this.config);
        return _this;
    }
    WindowColorSelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('white', i18n_1.i18n.getLocalizer('colors.white'));
        this.addItem('black', i18n_1.i18n.getLocalizer('colors.black'));
        this.addItem('red', i18n_1.i18n.getLocalizer('colors.red'));
        this.addItem('green', i18n_1.i18n.getLocalizer('colors.green'));
        this.addItem('blue', i18n_1.i18n.getLocalizer('colors.blue'));
        this.addItem('cyan', i18n_1.i18n.getLocalizer('colors.cyan'));
        this.addItem('yellow', i18n_1.i18n.getLocalizer('colors.yellow'));
        this.addItem('magenta', i18n_1.i18n.getLocalizer('colors.magenta'));
        var setColorAndOpacity = function () {
            if (_this.settingsManager.windowColor.isSet() && _this.settingsManager.windowOpacity.isSet()) {
                _this.toggleOverlayClass('windowcolor-' + _this.settingsManager.windowColor.value + _this.settingsManager.windowOpacity.value);
            }
            else {
                _this.toggleOverlayClass(null);
            }
        };
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.windowColor.value = key;
        });
        this.settingsManager.windowColor.onChanged.subscribe(function (sender, property) {
            // Color and opacity go together, so we need to...
            if (!_this.settingsManager.windowColor.isSet()) {
                // ... clear the opacity when the color is not set
                _this.settingsManager.windowOpacity.clear();
            }
            else if (!_this.settingsManager.windowOpacity.isSet()) {
                // ... set an opacity when the color is set
                _this.settingsManager.windowOpacity.value = '100';
            }
            _this.selectItem(property.value);
            setColorAndOpacity();
        });
        this.settingsManager.windowOpacity.onChanged.subscribe(function () {
            setColorAndOpacity();
        });
        // Load initial value
        if (this.settingsManager.windowColor.isSet()) {
            this.selectItem(this.settingsManager.windowColor.value);
        }
    };
    return WindowColorSelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.WindowColorSelectBox = WindowColorSelectBox;

},{"../../localization/i18n":91,"./subtitlesettingselectbox":65}],71:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowOpacitySelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different background opacity.
 */
var WindowOpacitySelectBox = /** @class */ (function (_super) {
    __extends(WindowOpacitySelectBox, _super);
    function WindowOpacitySelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingswindowopacityselectbox'],
        }, _this.config);
        return _this;
    }
    WindowOpacitySelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('100', i18n_1.i18n.getLocalizer('percent', { value: 100 }));
        this.addItem('75', i18n_1.i18n.getLocalizer('percent', { value: 75 }));
        this.addItem('50', i18n_1.i18n.getLocalizer('percent', { value: 50 }));
        this.addItem('25', i18n_1.i18n.getLocalizer('percent', { value: 25 }));
        this.addItem('0', i18n_1.i18n.getLocalizer('percent', { value: 0 }));
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.windowOpacity.value = key;
            // Color and opacity go together, so we need to...
            if (!_this.settingsManager.windowOpacity.isSet()) {
                // ... clear the color when the opacity is not set
                _this.settingsManager.windowColor.clear();
            }
            else if (!_this.settingsManager.windowColor.isSet()) {
                // ... set a color when the opacity is set
                _this.settingsManager.windowColor.value = 'black';
            }
        });
        // Update selected item when value is set from somewhere else
        this.settingsManager.windowOpacity.onChanged.subscribe(function (sender, property) {
            _this.selectItem(property.value);
        });
        // Load initial value
        if (this.settingsManager.windowOpacity.isSet()) {
            this.selectItem(this.settingsManager.windowOpacity.value);
        }
    };
    return WindowOpacitySelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.WindowOpacitySelectBox = WindowOpacitySelectBox;

},{"../../localization/i18n":91,"./subtitlesettingselectbox":65}],72:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimelineMarkersHandler = void 0;
var dom_1 = require("../dom");
var playerutils_1 = require("../playerutils");
var timeout_1 = require("../timeout");
var TimelineMarkersHandler = /** @class */ (function () {
    function TimelineMarkersHandler(config, getSeekBarWidth, markersContainer) {
        this.config = config;
        this.getSeekBarWidth = getSeekBarWidth;
        this.markersContainer = markersContainer;
        this.timelineMarkers = [];
    }
    TimelineMarkersHandler.prototype.initialize = function (player, uimanager) {
        this.player = player;
        this.uimanager = uimanager;
        this.configureMarkers();
    };
    TimelineMarkersHandler.prototype.configureMarkers = function () {
        var _this = this;
        // Remove markers when unloaded
        this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, function () { return _this.clearMarkers(); });
        this.player.on(this.player.exports.PlayerEvent.AdBreakStarted, function () { return _this.clearMarkers(); });
        this.player.on(this.player.exports.PlayerEvent.AdBreakFinished, function () { return _this.updateMarkers(); });
        // Update markers when the size of the seekbar changes
        this.player.on(this.player.exports.PlayerEvent.PlayerResized, function () { return _this.updateMarkersDOM(); });
        this.player.on(this.player.exports.PlayerEvent.SourceLoaded, function () {
            if (_this.player.isLive()) {
                // Update marker position as timeshift range changes
                _this.player.on(_this.player.exports.PlayerEvent.TimeChanged, function () { return _this.updateMarkers(); });
                // Update marker postion when paused as timeshift range changes
                _this.configureLivePausedTimeshiftUpdater(function () { return _this.updateMarkers(); });
            }
        });
        this.uimanager.getConfig().events.onUpdated.subscribe(function () { return _this.updateMarkers(); });
        this.uimanager.onRelease.subscribe(function () { return _this.uimanager.getConfig().events.onUpdated.unsubscribe(function () { return _this.updateMarkers(); }); });
        // Init markers at startup
        this.updateMarkers();
    };
    TimelineMarkersHandler.prototype.getMarkerAtPosition = function (percentage) {
        var snappingRange = this.config.snappingRange;
        var matchingMarker = this.timelineMarkers.find(function (marker) {
            var hasDuration = marker.duration > 0;
            // Handle interval markers
            var intervalMarkerMatch = hasDuration &&
                percentage >= marker.position - snappingRange &&
                percentage <= marker.position + marker.duration + snappingRange;
            // Handle position markers
            var positionMarkerMatch = percentage >= marker.position - snappingRange &&
                percentage <= marker.position + snappingRange;
            return intervalMarkerMatch || positionMarkerMatch;
        });
        return matchingMarker || null;
    };
    TimelineMarkersHandler.prototype.clearMarkers = function () {
        this.timelineMarkers = [];
        this.markersContainer.empty();
    };
    TimelineMarkersHandler.prototype.removeMarkerFromConfig = function (marker) {
        this.uimanager.getConfig().metadata.markers = this.uimanager.getConfig().metadata.markers.filter(function (_marker) { return marker !== _marker; });
    };
    TimelineMarkersHandler.prototype.filterRemovedMarkers = function () {
        var _this = this;
        this.timelineMarkers = this.timelineMarkers.filter(function (seekbarMarker) {
            var matchingMarker = _this.uimanager.getConfig().metadata.markers.find(function (_marker) { return seekbarMarker.marker === _marker; });
            if (!matchingMarker) {
                _this.removeMarkerFromDOM(seekbarMarker);
            }
            return matchingMarker;
        });
    };
    TimelineMarkersHandler.prototype.removeMarkerFromDOM = function (marker) {
        if (marker.element) {
            marker.element.remove();
        }
    };
    TimelineMarkersHandler.prototype.updateMarkers = function () {
        var _this = this;
        if (!shouldProcessMarkers(this.player, this.uimanager)) {
            this.clearMarkers();
            return;
        }
        this.filterRemovedMarkers();
        this.uimanager.getConfig().metadata.markers.forEach(function (marker) {
            var _a = getMarkerPositions(_this.player, marker), markerPosition = _a.markerPosition, markerDuration = _a.markerDuration;
            if (shouldRemoveMarker(markerPosition, markerDuration)) {
                _this.removeMarkerFromConfig(marker);
            }
            else if (markerPosition <= 100) {
                var matchingMarker = _this.timelineMarkers.find(function (seekbarMarker) { return seekbarMarker.marker === marker; });
                if (matchingMarker) {
                    matchingMarker.position = markerPosition;
                    matchingMarker.duration = markerDuration;
                    _this.updateMarkerDOM(matchingMarker);
                }
                else {
                    var newMarker = { marker: marker, position: markerPosition, duration: markerDuration };
                    _this.timelineMarkers.push(newMarker);
                    _this.createMarkerDOM(newMarker);
                }
            }
        });
    };
    TimelineMarkersHandler.prototype.getMarkerCssProperties = function (marker) {
        var seekBarWidthPx = this.getSeekBarWidth();
        var positionInPx = (seekBarWidthPx / 100) * (marker.position < 0 ? 0 : marker.position);
        var cssProperties = {
            'transform': "translateX(".concat(positionInPx, "px)"),
        };
        if (marker.duration > 0) {
            var markerWidthPx = Math.round(seekBarWidthPx / 100 * marker.duration);
            cssProperties['width'] = "".concat(markerWidthPx, "px");
        }
        return cssProperties;
    };
    TimelineMarkersHandler.prototype.updateMarkerDOM = function (marker) {
        marker.element.css(this.getMarkerCssProperties(marker));
    };
    TimelineMarkersHandler.prototype.createMarkerDOM = function (marker) {
        var _this = this;
        var markerClasses = ['seekbar-marker'].concat(marker.marker.cssClasses || [])
            .map(function (cssClass) { return _this.prefixCss(cssClass); });
        var markerElement = new dom_1.DOM('div', {
            'class': markerClasses.join(' '),
            'data-marker-time': String(marker.marker.time),
            'data-marker-title': String(marker.marker.title),
        }).css(this.getMarkerCssProperties(marker));
        if (marker.marker.imageUrl) {
            var removeImage = function () {
                imageElement_1.remove();
            };
            var imageElement_1 = new dom_1.DOM('img', {
                'class': this.prefixCss('seekbar-marker-image'),
                'src': marker.marker.imageUrl,
            }).on('error', removeImage);
            markerElement.append(imageElement_1);
        }
        marker.element = markerElement;
        this.markersContainer.append(markerElement);
    };
    TimelineMarkersHandler.prototype.updateMarkersDOM = function () {
        var _this = this;
        this.timelineMarkers.forEach(function (marker) {
            if (marker.element) {
                _this.updateMarkerDOM(marker);
            }
            else {
                _this.createMarkerDOM(marker);
            }
        });
    };
    TimelineMarkersHandler.prototype.configureLivePausedTimeshiftUpdater = function (handler) {
        var _this = this;
        // Regularly update the marker position while the timeout is active
        this.pausedTimeshiftUpdater = new timeout_1.Timeout(1000, handler, true);
        this.player.on(this.player.exports.PlayerEvent.Paused, function () {
            if (_this.player.isLive() && _this.player.getMaxTimeShift() < 0) {
                _this.pausedTimeshiftUpdater.start();
            }
        });
        // Stop updater when playback continues (no matter if the updater was started before)
        this.player.on(this.player.exports.PlayerEvent.Play, function () { return _this.pausedTimeshiftUpdater.clear(); });
        this.player.on(this.player.exports.PlayerEvent.Destroy, function () { return _this.pausedTimeshiftUpdater.clear(); });
    };
    TimelineMarkersHandler.prototype.prefixCss = function (cssClassOrId) {
        return this.config.cssPrefix + '-' + cssClassOrId;
    };
    return TimelineMarkersHandler;
}());
exports.TimelineMarkersHandler = TimelineMarkersHandler;
function getMarkerPositions(player, marker) {
    var duration = getDuration(player);
    var markerPosition = 100 / duration * getMarkerTime(marker, player, duration); // convert absolute time to percentage
    var markerDuration = 100 / duration * marker.duration;
    if (markerPosition < 0 && !isNaN(markerDuration)) {
        // Shrink marker duration for on live streams as they reach end
        markerDuration = markerDuration + markerPosition;
    }
    if (100 - markerPosition < markerDuration) {
        // Shrink marker if it overflows timeline
        markerDuration = 100 - markerPosition;
    }
    return { markerDuration: markerDuration, markerPosition: markerPosition };
}
function getMarkerTime(marker, player, duration) {
    if (!player.isLive()) {
        return marker.time;
    }
    return duration - (playerutils_1.PlayerUtils.getSeekableRangeRespectingLive(player).end - marker.time);
}
function getDuration(player) {
    if (!player.isLive()) {
        return player.getDuration();
    }
    var _a = playerutils_1.PlayerUtils.getSeekableRangeRespectingLive(player), start = _a.start, end = _a.end;
    return end - start;
}
function shouldRemoveMarker(markerPosition, markerDuration) {
    return (markerDuration < 0 || isNaN(markerDuration)) && markerPosition < 0;
}
function shouldProcessMarkers(player, uimanager) {
    // Don't generate timeline markers if we don't yet have a duration
    // The duration check is for buggy platforms where the duration is not available instantly (Chrome on Android 4.3)
    var validToProcess = player.getDuration() !== Infinity || player.isLive();
    var hasMarkers = uimanager.getConfig().metadata.markers.length > 0;
    return validToProcess && hasMarkers;
}

},{"../dom":84,"../playerutils":97,"../timeout":112}],73:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TitleBar = void 0;
var container_1 = require("./container");
var metadatalabel_1 = require("./metadatalabel");
/**
 * Displays a title bar containing a label with the title of the video.
 */
var TitleBar = /** @class */ (function (_super) {
    __extends(TitleBar, _super);
    function TitleBar(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-titlebar',
            hidden: true,
            components: [
                new metadatalabel_1.MetadataLabel({ content: metadatalabel_1.MetadataLabelContent.Title }),
                new metadatalabel_1.MetadataLabel({ content: metadatalabel_1.MetadataLabelContent.Description }),
            ],
            keepHiddenWithoutMetadata: false,
        }, _this.config);
        return _this;
    }
    TitleBar.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var shouldBeShown = !this.isHidden();
        var hasMetadataText = true; // Flag to track if any metadata label contains text
        var checkMetadataTextAndUpdateVisibility = function () {
            hasMetadataText = false;
            // Iterate through metadata labels and check if at least one of them contains text
            for (var _i = 0, _a = _this.getComponents(); _i < _a.length; _i++) {
                var component = _a[_i];
                if (component instanceof metadatalabel_1.MetadataLabel) {
                    if (!component.isEmpty()) {
                        hasMetadataText = true;
                        break;
                    }
                }
            }
            if (_this.isShown()) {
                // Hide a visible titlebar if it does not contain any text and the hidden flag is set
                if (config.keepHiddenWithoutMetadata && !hasMetadataText) {
                    _this.hide();
                }
            }
            else if (shouldBeShown) {
                // Show a hidden titlebar if it should actually be shown
                _this.show();
            }
        };
        // Listen to text change events to update the hasMetadataText flag when the metadata dynamically changes
        for (var _i = 0, _a = this.getComponents(); _i < _a.length; _i++) {
            var component = _a[_i];
            if (component instanceof metadatalabel_1.MetadataLabel) {
                component.onTextChanged.subscribe(checkMetadataTextAndUpdateVisibility);
            }
        }
        uimanager.onControlsShow.subscribe(function () {
            shouldBeShown = true;
            if (!(config.keepHiddenWithoutMetadata && !hasMetadataText)) {
                _this.show();
            }
        });
        uimanager.onControlsHide.subscribe(function () {
            shouldBeShown = false;
            _this.hide();
        });
        // init
        checkMetadataTextAndUpdateVisibility();
    };
    return TitleBar;
}(container_1.Container));
exports.TitleBar = TitleBar;

},{"./container":24,"./metadatalabel":34}],74:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToggleButton = void 0;
var button_1 = require("./button");
var eventdispatcher_1 = require("../eventdispatcher");
/**
 * A button that can be toggled between 'on' and 'off' states.
 */
var ToggleButton = /** @class */ (function (_super) {
    __extends(ToggleButton, _super);
    function ToggleButton(config) {
        var _this = _super.call(this, config) || this;
        _this.toggleButtonEvents = {
            onToggle: new eventdispatcher_1.EventDispatcher(),
            onToggleOn: new eventdispatcher_1.EventDispatcher(),
            onToggleOff: new eventdispatcher_1.EventDispatcher(),
        };
        var defaultConfig = {
            cssClass: 'ui-togglebutton',
            onClass: 'on',
            offClass: 'off',
        };
        if (config.onAriaLabel) {
            config.ariaLabel = config.onAriaLabel;
        }
        _this.config = _this.mergeConfig(config, defaultConfig, _this.config);
        return _this;
    }
    ToggleButton.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        this.getDomElement().addClass(this.prefixCss(config.offClass));
    };
    /**
     * Toggles the button to the 'on' state.
     */
    ToggleButton.prototype.on = function () {
        if (this.isOff()) {
            var config = this.getConfig();
            this.onState = true;
            this.getDomElement().removeClass(this.prefixCss(config.offClass));
            this.getDomElement().addClass(this.prefixCss(config.onClass));
            this.onToggleEvent();
            this.onToggleOnEvent();
            this.setAriaAttr('pressed', 'true');
            if (this.config.onAriaLabel) {
                this.setAriaLabel(this.config.onAriaLabel);
            }
        }
    };
    /**
     * Toggles the button to the 'off' state.
     */
    ToggleButton.prototype.off = function () {
        if (this.isOn()) {
            var config = this.getConfig();
            this.onState = false;
            this.getDomElement().removeClass(this.prefixCss(config.onClass));
            this.getDomElement().addClass(this.prefixCss(config.offClass));
            this.onToggleEvent();
            this.onToggleOffEvent();
            this.setAriaAttr('pressed', 'false');
            if (this.config.offAriaLabel) {
                this.setAriaLabel(this.config.offAriaLabel);
            }
        }
    };
    /**
     * Toggle the button 'on' if it is 'off', or 'off' if it is 'on'.
     */
    ToggleButton.prototype.toggle = function () {
        if (this.isOn()) {
            this.off();
        }
        else {
            this.on();
        }
    };
    /**
     * Checks if the toggle button is in the 'on' state.
     * @returns {boolean} true if button is 'on', false if 'off'
     */
    ToggleButton.prototype.isOn = function () {
        return this.onState;
    };
    /**
     * Checks if the toggle button is in the 'off' state.
     * @returns {boolean} true if button is 'off', false if 'on'
     */
    ToggleButton.prototype.isOff = function () {
        return !this.isOn();
    };
    ToggleButton.prototype.onClickEvent = function () {
        _super.prototype.onClickEvent.call(this);
        // Fire the toggle event together with the click event
        // (they are technically the same, only the semantics are different)
        this.onToggleEvent();
    };
    ToggleButton.prototype.onToggleEvent = function () {
        this.toggleButtonEvents.onToggle.dispatch(this);
    };
    ToggleButton.prototype.onToggleOnEvent = function () {
        this.toggleButtonEvents.onToggleOn.dispatch(this);
    };
    ToggleButton.prototype.onToggleOffEvent = function () {
        this.toggleButtonEvents.onToggleOff.dispatch(this);
    };
    Object.defineProperty(ToggleButton.prototype, "onToggle", {
        /**
         * Gets the event that is fired when the button is toggled.
         * @returns {Event<ToggleButton<Config>, NoArgs>}
         */
        get: function () {
            return this.toggleButtonEvents.onToggle.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToggleButton.prototype, "onToggleOn", {
        /**
         * Gets the event that is fired when the button is toggled 'on'.
         * @returns {Event<ToggleButton<Config>, NoArgs>}
         */
        get: function () {
            return this.toggleButtonEvents.onToggleOn.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToggleButton.prototype, "onToggleOff", {
        /**
         * Gets the event that is fired when the button is toggled 'off'.
         * @returns {Event<ToggleButton<Config>, NoArgs>}
         */
        get: function () {
            return this.toggleButtonEvents.onToggleOff.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    return ToggleButton;
}(button_1.Button));
exports.ToggleButton = ToggleButton;

},{"../eventdispatcher":86,"./button":17}],75:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TvNoiseCanvas = void 0;
var component_1 = require("./component");
var dom_1 = require("../dom");
/**
 * Animated analog TV static noise.
 */
var TvNoiseCanvas = /** @class */ (function (_super) {
    __extends(TvNoiseCanvas, _super);
    function TvNoiseCanvas(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.canvasWidth = 160;
        _this.canvasHeight = 90;
        _this.interferenceHeight = 50;
        _this.lastFrameUpdate = 0;
        _this.frameInterval = 60;
        _this.useAnimationFrame = !!window.requestAnimationFrame;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-tvnoisecanvas',
        }, _this.config);
        return _this;
    }
    TvNoiseCanvas.prototype.toDomElement = function () {
        return this.canvas = new dom_1.DOM('canvas', { 'class': this.getCssClasses() });
    };
    TvNoiseCanvas.prototype.start = function () {
        this.canvasElement = this.canvas.get(0);
        this.canvasContext = this.canvasElement.getContext('2d');
        this.noiseAnimationWindowPos = -this.canvasHeight;
        this.lastFrameUpdate = 0;
        this.canvasElement.width = this.canvasWidth;
        this.canvasElement.height = this.canvasHeight;
        this.renderFrame();
    };
    TvNoiseCanvas.prototype.stop = function () {
        if (this.useAnimationFrame) {
            cancelAnimationFrame(this.frameUpdateHandlerId);
        }
        else {
            clearTimeout(this.frameUpdateHandlerId);
        }
    };
    TvNoiseCanvas.prototype.renderFrame = function () {
        // This code has been copied from the player controls.js and simplified
        if (this.lastFrameUpdate + this.frameInterval > new Date().getTime()) {
            // It's too early to render the next frame
            this.scheduleNextRender();
            return;
        }
        var currentPixelOffset;
        var canvasWidth = this.canvasWidth;
        var canvasHeight = this.canvasHeight;
        // Create texture
        var noiseImage = this.canvasContext.createImageData(canvasWidth, canvasHeight);
        // Fill texture with noise
        for (var y = 0; y < canvasHeight; y++) {
            for (var x = 0; x < canvasWidth; x++) {
                currentPixelOffset = (canvasWidth * y * 4) + x * 4;
                noiseImage.data[currentPixelOffset] = Math.random() * 255;
                if (y < this.noiseAnimationWindowPos || y > this.noiseAnimationWindowPos + this.interferenceHeight) {
                    noiseImage.data[currentPixelOffset] *= 0.85;
                }
                noiseImage.data[currentPixelOffset + 1] = noiseImage.data[currentPixelOffset];
                noiseImage.data[currentPixelOffset + 2] = noiseImage.data[currentPixelOffset];
                noiseImage.data[currentPixelOffset + 3] = 50;
            }
        }
        // Put texture onto canvas
        this.canvasContext.putImageData(noiseImage, 0, 0);
        this.lastFrameUpdate = new Date().getTime();
        this.noiseAnimationWindowPos += 7;
        if (this.noiseAnimationWindowPos > canvasHeight) {
            this.noiseAnimationWindowPos = -canvasHeight;
        }
        this.scheduleNextRender();
    };
    TvNoiseCanvas.prototype.scheduleNextRender = function () {
        if (this.useAnimationFrame) {
            this.frameUpdateHandlerId = window.requestAnimationFrame(this.renderFrame.bind(this));
        }
        else {
            this.frameUpdateHandlerId = window.setTimeout(this.renderFrame.bind(this), this.frameInterval);
        }
    };
    return TvNoiseCanvas;
}(component_1.Component));
exports.TvNoiseCanvas = TvNoiseCanvas;

},{"../dom":84,"./component":23}],76:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.UIContainer = void 0;
var container_1 = require("./container");
var dom_1 = require("../dom");
var timeout_1 = require("../timeout");
var playerutils_1 = require("../playerutils");
var eventdispatcher_1 = require("../eventdispatcher");
var i18n_1 = require("../localization/i18n");
/**
 * The base container that contains all of the UI. The UIContainer is passed to the {@link UIManager} to build and
 * setup the UI.
 */
var UIContainer = exports.UIContainer = /** @class */ (function (_super) {
    __extends(UIContainer, _super);
    function UIContainer(config) {
        var _this = _super.call(this, config) || this;
        _this.hideUi = function () { };
        _this.showUi = function () { };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-uicontainer',
            role: 'region',
            ariaLabel: i18n_1.i18n.getLocalizer('player'),
            hideDelay: 5000,
        }, _this.config);
        _this.playerStateChange = new eventdispatcher_1.EventDispatcher();
        return _this;
    }
    UIContainer.prototype.configure = function (player, uimanager) {
        var config = this.getConfig();
        if (config.userInteractionEventSource) {
            this.userInteractionEventSource = new dom_1.DOM(config.userInteractionEventSource);
        }
        else {
            this.userInteractionEventSource = this.getDomElement();
        }
        _super.prototype.configure.call(this, player, uimanager);
        this.configureUIShowHide(player, uimanager);
        this.configurePlayerStates(player, uimanager);
    };
    UIContainer.prototype.configureUIShowHide = function (player, uimanager) {
        var _this = this;
        var config = this.getConfig();
        if (config.hideDelay === -1) {
            uimanager.onConfigured.subscribe(function () { return uimanager.onControlsShow.dispatch(_this); });
            return;
        }
        var isUiShown = false;
        var isSeeking = false;
        var isFirstTouch = true;
        var playerState;
        var hidingPrevented = function () {
            return config.hidePlayerStateExceptions && config.hidePlayerStateExceptions.indexOf(playerState) > -1;
        };
        this.showUi = function () {
            if (!isUiShown) {
                // Let subscribers know that they should reveal themselves
                uimanager.onControlsShow.dispatch(_this);
                isUiShown = true;
            }
            // Don't trigger timeout while seeking (it will be triggered once the seek is finished) or casting
            if (!isSeeking && !player.isCasting() && !hidingPrevented()) {
                _this.uiHideTimeout.start();
            }
        };
        this.hideUi = function () {
            // Hide the UI only if it is shown, and if not casting
            if (isUiShown && !player.isCasting()) {
                // Issue a preview event to check if we are good to hide the controls
                var previewHideEventArgs = {};
                uimanager.onPreviewControlsHide.dispatch(_this, previewHideEventArgs);
                if (!previewHideEventArgs.cancel) {
                    // If the preview wasn't canceled, let subscribers know that they should now hide themselves
                    uimanager.onControlsHide.dispatch(_this);
                    isUiShown = false;
                }
                else {
                    // If the hide preview was canceled, continue to show UI
                    _this.showUi();
                }
            }
        };
        // Timeout to defer UI hiding by the configured delay time
        this.uiHideTimeout = new timeout_1.Timeout(config.hideDelay, this.hideUi);
        this.userInteractionEvents = [{
                // On touch displays, the first touch reveals the UI
                name: 'touchend',
                handler: function (e) {
                    if (!isUiShown) {
                        // Only if the UI is hidden, we prevent other actions (except for the first touch) and reveal the UI
                        // instead. The first touch is not prevented to let other listeners receive the event and trigger an
                        // initial action, e.g. the huge playback button can directly start playback instead of requiring a double
                        // tap which 1. reveals the UI and 2. starts playback.
                        if (isFirstTouch && !player.isPlaying()) {
                            isFirstTouch = false;
                        }
                        else {
                            e.preventDefault();
                        }
                        _this.showUi();
                    }
                },
            }, {
                // When the mouse enters, we show the UI
                name: 'mouseenter',
                handler: function () {
                    _this.showUi();
                },
            }, {
                // When the mouse moves within, we show the UI
                name: 'mousemove',
                handler: function () {
                    _this.showUi();
                },
            }, {
                name: 'focusin',
                handler: function () {
                    _this.showUi();
                },
            }, {
                name: 'keydown',
                handler: function () {
                    _this.showUi();
                },
            }, {
                // When the mouse leaves, we can prepare to hide the UI, except a seek is going on
                name: 'mouseleave',
                handler: function () {
                    // When a seek is going on, the seek scrub pointer may exit the UI area while still seeking, and we do not
                    // hide the UI in such cases
                    if (!isSeeking && !hidingPrevented()) {
                        _this.uiHideTimeout.start();
                    }
                },
            }];
        this.userInteractionEvents.forEach(function (event) { return _this.userInteractionEventSource.on(event.name, event.handler); });
        uimanager.onSeek.subscribe(function () {
            _this.uiHideTimeout.clear(); // Don't hide UI while a seek is in progress
            isSeeking = true;
        });
        uimanager.onSeeked.subscribe(function () {
            isSeeking = false;
            if (!hidingPrevented()) {
                _this.uiHideTimeout.start(); // Re-enable UI hide timeout after a seek
            }
        });
        player.on(player.exports.PlayerEvent.CastStarted, function () {
            _this.showUi(); // Show UI when a Cast session has started (UI will then stay permanently on during the session)
        });
        this.playerStateChange.subscribe(function (_, state) {
            playerState = state;
            if (hidingPrevented()) {
                // Entering a player state that prevents hiding and forces the controls to be shown
                _this.uiHideTimeout.clear();
                _this.showUi();
            }
            else {
                // Entering a player state that allows hiding
                _this.uiHideTimeout.start();
            }
        });
    };
    UIContainer.prototype.configurePlayerStates = function (player, uimanager) {
        var _this = this;
        var container = this.getDomElement();
        // Convert player states into CSS class names
        var stateClassNames = [];
        for (var state in playerutils_1.PlayerUtils.PlayerState) {
            if (isNaN(Number(state))) {
                var enumName = playerutils_1.PlayerUtils.PlayerState[playerutils_1.PlayerUtils.PlayerState[state]];
                stateClassNames[playerutils_1.PlayerUtils.PlayerState[state]] =
                    this.prefixCss(UIContainer.STATE_PREFIX + enumName.toLowerCase());
            }
        }
        var removeStates = function () {
            container.removeClass(stateClassNames[playerutils_1.PlayerUtils.PlayerState.Idle]);
            container.removeClass(stateClassNames[playerutils_1.PlayerUtils.PlayerState.Prepared]);
            container.removeClass(stateClassNames[playerutils_1.PlayerUtils.PlayerState.Playing]);
            container.removeClass(stateClassNames[playerutils_1.PlayerUtils.PlayerState.Paused]);
            container.removeClass(stateClassNames[playerutils_1.PlayerUtils.PlayerState.Finished]);
        };
        var updateState = function (state) {
            removeStates();
            container.addClass(stateClassNames[state]);
            _this.playerStateChange.dispatch(_this, state);
        };
        player.on(player.exports.PlayerEvent.SourceLoaded, function () {
            updateState(playerutils_1.PlayerUtils.PlayerState.Prepared);
        });
        player.on(player.exports.PlayerEvent.Play, function () {
            updateState(playerutils_1.PlayerUtils.PlayerState.Playing);
        });
        player.on(player.exports.PlayerEvent.Playing, function () {
            updateState(playerutils_1.PlayerUtils.PlayerState.Playing);
        });
        player.on(player.exports.PlayerEvent.Paused, function () {
            updateState(playerutils_1.PlayerUtils.PlayerState.Paused);
        });
        player.on(player.exports.PlayerEvent.PlaybackFinished, function () {
            updateState(playerutils_1.PlayerUtils.PlayerState.Finished);
        });
        player.on(player.exports.PlayerEvent.SourceUnloaded, function () {
            updateState(playerutils_1.PlayerUtils.PlayerState.Idle);
        });
        uimanager.getConfig().events.onUpdated.subscribe(function () {
            updateState(playerutils_1.PlayerUtils.getState(player));
        });
        // Fullscreen marker class
        player.on(player.exports.PlayerEvent.ViewModeChanged, function () {
            if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {
                container.addClass(_this.prefixCss(UIContainer.FULLSCREEN));
            }
            else {
                container.removeClass(_this.prefixCss(UIContainer.FULLSCREEN));
            }
        });
        // Init fullscreen state
        if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {
            container.addClass(this.prefixCss(UIContainer.FULLSCREEN));
        }
        // Buffering marker class
        player.on(player.exports.PlayerEvent.StallStarted, function () {
            container.addClass(_this.prefixCss(UIContainer.BUFFERING));
        });
        player.on(player.exports.PlayerEvent.StallEnded, function () {
            container.removeClass(_this.prefixCss(UIContainer.BUFFERING));
        });
        // Init buffering state
        if (player.isStalled()) {
            container.addClass(this.prefixCss(UIContainer.BUFFERING));
        }
        // RemoteControl marker class
        player.on(player.exports.PlayerEvent.CastStarted, function () {
            container.addClass(_this.prefixCss(UIContainer.REMOTE_CONTROL));
        });
        player.on(player.exports.PlayerEvent.CastStopped, function () {
            container.removeClass(_this.prefixCss(UIContainer.REMOTE_CONTROL));
        });
        // Init RemoteControl state
        if (player.isCasting()) {
            container.addClass(this.prefixCss(UIContainer.REMOTE_CONTROL));
        }
        // Controls visibility marker class
        uimanager.onControlsShow.subscribe(function () {
            container.removeClass(_this.prefixCss(UIContainer.CONTROLS_HIDDEN));
            container.addClass(_this.prefixCss(UIContainer.CONTROLS_SHOWN));
        });
        uimanager.onControlsHide.subscribe(function () {
            container.removeClass(_this.prefixCss(UIContainer.CONTROLS_SHOWN));
            container.addClass(_this.prefixCss(UIContainer.CONTROLS_HIDDEN));
        });
        // Layout size classes
        var updateLayoutSizeClasses = function (width, height) {
            container.removeClass(_this.prefixCss('layout-max-width-400'));
            container.removeClass(_this.prefixCss('layout-max-width-600'));
            container.removeClass(_this.prefixCss('layout-max-width-800'));
            container.removeClass(_this.prefixCss('layout-max-width-1200'));
            if (width <= 400) {
                container.addClass(_this.prefixCss('layout-max-width-400'));
            }
            else if (width <= 600) {
                container.addClass(_this.prefixCss('layout-max-width-600'));
            }
            else if (width <= 800) {
                container.addClass(_this.prefixCss('layout-max-width-800'));
            }
            else if (width <= 1200) {
                container.addClass(_this.prefixCss('layout-max-width-1200'));
            }
        };
        player.on(player.exports.PlayerEvent.PlayerResized, function (e) {
            // Convert strings (with "px" suffix) to ints
            var width = Math.round(Number(e.width.substring(0, e.width.length - 2)));
            var height = Math.round(Number(e.height.substring(0, e.height.length - 2)));
            updateLayoutSizeClasses(width, height);
        });
        // Init layout state
        updateLayoutSizeClasses(new dom_1.DOM(player.getContainer()).width(), new dom_1.DOM(player.getContainer()).height());
    };
    UIContainer.prototype.release = function () {
        var _this = this;
        // Explicitly unsubscribe user interaction event handlers because they could be attached to an external element
        // that isn't owned by the UI and therefore not removed on release.
        if (this.userInteractionEvents) {
            this.userInteractionEvents.forEach(function (event) { return _this.userInteractionEventSource.off(event.name, event.handler); });
        }
        _super.prototype.release.call(this);
        if (this.uiHideTimeout) {
            this.uiHideTimeout.clear();
        }
    };
    UIContainer.prototype.toDomElement = function () {
        var container = _super.prototype.toDomElement.call(this);
        // Detect flexbox support (not supported in IE9)
        if (document && typeof document.createElement('p').style.flex !== 'undefined') {
            container.addClass(this.prefixCss('flexbox'));
        }
        else {
            container.addClass(this.prefixCss('no-flexbox'));
        }
        return container;
    };
    UIContainer.STATE_PREFIX = 'player-state-';
    UIContainer.FULLSCREEN = 'fullscreen';
    UIContainer.BUFFERING = 'buffering';
    UIContainer.REMOTE_CONTROL = 'remote-control';
    UIContainer.CONTROLS_SHOWN = 'controls-shown';
    UIContainer.CONTROLS_HIDDEN = 'controls-hidden';
    return UIContainer;
}(container_1.Container));

},{"../dom":84,"../eventdispatcher":86,"../localization/i18n":91,"../playerutils":97,"../timeout":112,"./container":24}],77:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoQualitySelectBox = void 0;
var selectbox_1 = require("./selectbox");
var i18n_1 = require("../localization/i18n");
/**
 * A select box providing a selection between 'auto' and the available video qualities.
 */
var VideoQualitySelectBox = /** @class */ (function (_super) {
    __extends(VideoQualitySelectBox, _super);
    function VideoQualitySelectBox(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-videoqualityselectbox'],
        }, _this.config);
        return _this;
    }
    VideoQualitySelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var selectCurrentVideoQuality = function () {
            _this.selectItem(player.getVideoQuality().id);
        };
        var updateVideoQualities = function () {
            var videoQualities = player.getAvailableVideoQualities();
            _this.clearItems();
            // Progressive streams do not support automatic quality selection
            _this.hasAuto = player.getStreamType() !== 'progressive';
            if (_this.hasAuto) {
                // Add entry for automatic quality switching (default setting)
                _this.addItem('auto', i18n_1.i18n.getLocalizer('auto'));
            }
            // Add video qualities
            for (var _i = 0, videoQualities_1 = videoQualities; _i < videoQualities_1.length; _i++) {
                var videoQuality = videoQualities_1[_i];
                _this.addItem(videoQuality.id, videoQuality.label);
            }
            // Select initial quality
            selectCurrentVideoQuality();
        };
        this.onItemSelected.subscribe(function (sender, value) {
            player.setVideoQuality(value);
        });
        // Update qualities when source goes away
        player.on(player.exports.PlayerEvent.SourceUnloaded, updateVideoQualities);
        // Update qualities when the period within a source changes
        player.on(player.exports.PlayerEvent.PeriodSwitched, updateVideoQualities);
        // Update quality selection when quality is changed (from outside)
        player.on(player.exports.PlayerEvent.VideoQualityChanged, selectCurrentVideoQuality);
        if (player.exports.PlayerEvent.VideoQualityAdded) {
            // Update qualities when their availability changed
            // TODO: remove any cast after next player release
            player.on(player.exports.PlayerEvent.VideoQualityAdded, updateVideoQualities);
            player.on(player.exports.PlayerEvent.VideoQualityRemoved, updateVideoQualities);
        }
        uimanager.getConfig().events.onUpdated.subscribe(updateVideoQualities);
    };
    /**
     * Returns true if the select box contains an 'auto' item for automatic quality selection mode.
     * @return {boolean}
     */
    VideoQualitySelectBox.prototype.hasAutoItem = function () {
        return this.hasAuto;
    };
    return VideoQualitySelectBox;
}(selectbox_1.SelectBox));
exports.VideoQualitySelectBox = VideoQualitySelectBox;

},{"../localization/i18n":91,"./selectbox":46}],78:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeControlButton = void 0;
var container_1 = require("./container");
var volumeslider_1 = require("./volumeslider");
var volumetogglebutton_1 = require("./volumetogglebutton");
var timeout_1 = require("../timeout");
/**
 * A composite volume control that consists of and internally manages a volume control button that can be used
 * for muting, and a (depending on the CSS style, e.g. slide-out) volume control bar.
 */
var VolumeControlButton = /** @class */ (function (_super) {
    __extends(VolumeControlButton, _super);
    function VolumeControlButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.volumeToggleButton = new volumetogglebutton_1.VolumeToggleButton();
        _this.volumeSlider = new volumeslider_1.VolumeSlider({
            vertical: config.vertical != null ? config.vertical : true,
            hidden: true,
        });
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-volumecontrolbutton',
            components: [_this.volumeToggleButton, _this.volumeSlider],
            hideDelay: 500,
        }, _this.config);
        return _this;
    }
    VolumeControlButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var volumeToggleButton = this.getVolumeToggleButton();
        var volumeSlider = this.getVolumeSlider();
        this.volumeSliderHideTimeout = new timeout_1.Timeout(this.getConfig().hideDelay, function () {
            volumeSlider.hide();
        });
        /*
         * Volume Slider visibility handling
         *
         * The volume slider shall be visible while the user hovers the mute toggle button, while the user hovers the
         * volume slider, and while the user slides the volume slider. If none of these situations are true, the slider
         * shall disappear.
         */
        var volumeSliderHovered = false;
        volumeToggleButton.getDomElement().on('mouseenter', function () {
            // Show volume slider when mouse enters the button area
            if (volumeSlider.isHidden()) {
                volumeSlider.show();
            }
            // Avoid hiding of the slider when button is hovered
            _this.volumeSliderHideTimeout.clear();
        });
        volumeToggleButton.getDomElement().on('mouseleave', function () {
            // Hide slider delayed when button is left
            _this.volumeSliderHideTimeout.reset();
        });
        volumeSlider.getDomElement().on('mouseenter', function () {
            // When the slider is entered, cancel the hide timeout activated by leaving the button
            _this.volumeSliderHideTimeout.clear();
            volumeSliderHovered = true;
        });
        volumeSlider.getDomElement().on('mouseleave', function () {
            // When mouse leaves the slider, only hide it if there is no slide operation in progress
            if (volumeSlider.isSeeking()) {
                _this.volumeSliderHideTimeout.clear();
            }
            else {
                _this.volumeSliderHideTimeout.reset();
            }
            volumeSliderHovered = false;
        });
        volumeSlider.onSeeked.subscribe(function () {
            // When a slide operation is done and the slider not hovered (mouse outside slider), hide slider delayed
            if (!volumeSliderHovered) {
                _this.volumeSliderHideTimeout.reset();
            }
        });
    };
    VolumeControlButton.prototype.release = function () {
        _super.prototype.release.call(this);
        this.volumeSliderHideTimeout.clear();
    };
    /**
     * Provides access to the internally managed volume toggle button.
     * @returns {VolumeToggleButton}
     */
    VolumeControlButton.prototype.getVolumeToggleButton = function () {
        return this.volumeToggleButton;
    };
    /**
     * Provides access to the internally managed volume silder.
     * @returns {VolumeSlider}
     */
    VolumeControlButton.prototype.getVolumeSlider = function () {
        return this.volumeSlider;
    };
    return VolumeControlButton;
}(container_1.Container));
exports.VolumeControlButton = VolumeControlButton;

},{"../timeout":112,"./container":24,"./volumeslider":79,"./volumetogglebutton":80}],79:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeSlider = void 0;
var seekbar_1 = require("./seekbar");
var i18n_1 = require("../localization/i18n");
/**
 * A simple volume slider component to adjust the player's volume setting.
 */
var VolumeSlider = /** @class */ (function (_super) {
    __extends(VolumeSlider, _super);
    function VolumeSlider(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.updateVolumeWhileScrubbing = function (sender, args) {
            if (args.scrubbing && _this.volumeTransition) {
                _this.volumeTransition.update(args.position);
            }
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-volumeslider',
            hideIfVolumeControlProhibited: true,
            ariaLabel: i18n_1.i18n.getLocalizer('settings.audio.volume'),
            tabIndex: 0,
        }, _this.config);
        return _this;
    }
    VolumeSlider.prototype.setVolumeAriaSliderValues = function (value) {
        this.getDomElement().attr('aria-valuenow', Math.ceil(value).toString());
        this.getDomElement().attr('aria-valuetext', "".concat(i18n_1.i18n.performLocalization(i18n_1.i18n.getLocalizer('seekBar.value')), ": ").concat(Math.ceil(value)));
    };
    VolumeSlider.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager, false);
        this.setAriaSliderMinMax('0', '100');
        var config = this.getConfig();
        var volumeController = uimanager.getConfig().volumeController;
        if (config.hideIfVolumeControlProhibited && !this.detectVolumeControlAvailability()) {
            this.hide();
            // We can just return from here, because the user will never interact with the control and any configured
            // functionality would only eat resources for no reason.
            return;
        }
        volumeController.onChanged.subscribe(function (_, args) {
            if (args.muted) {
                _this.setVolumeAriaSliderValues(0);
                _this.setPlaybackPosition(0);
            }
            else {
                _this.setPlaybackPosition(args.volume);
                _this.setVolumeAriaSliderValues(args.volume);
            }
        });
        this.onSeek.subscribe(function () {
            _this.volumeTransition = volumeController.startTransition();
        });
        this.onSeekPreview.subscribeRateLimited(this.updateVolumeWhileScrubbing, 50);
        this.onSeeked.subscribe(function (sender, percentage) {
            if (_this.volumeTransition) {
                _this.volumeTransition.finish(percentage);
            }
        });
        // Update the volume slider marker when the player resized, a source is loaded,
        // or the UI is configured. Check the seekbar for a detailed description.
        player.on(player.exports.PlayerEvent.PlayerResized, function () {
            _this.refreshPlaybackPosition();
        });
        uimanager.onConfigured.subscribe(function () {
            _this.refreshPlaybackPosition();
        });
        uimanager.getConfig().events.onUpdated.subscribe(function () {
            _this.refreshPlaybackPosition();
        });
        uimanager.onComponentShow.subscribe(function () {
            _this.refreshPlaybackPosition();
        });
        uimanager.onComponentHide.subscribe(function () {
            _this.refreshPlaybackPosition();
        });
        // Init volume bar
        volumeController.onChangedEvent();
    };
    VolumeSlider.prototype.detectVolumeControlAvailability = function () {
        /*
         * "On iOS devices, the audio level is always under the user’s physical control. The volume property is not
         * settable in JavaScript. Reading the volume property always returns 1."
         * https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html
         */
        // as muted autoplay gets paused as soon as we unmute it, we may not touch the volume of the actual player so we
        // probe a dummy audio element
        var dummyVideoElement = document.createElement('video');
        // try setting the volume to 0.7 and if it's still 1 we are on a volume control restricted device
        dummyVideoElement.volume = 0.7;
        return dummyVideoElement.volume !== 1;
    };
    VolumeSlider.prototype.release = function () {
        _super.prototype.release.call(this);
        this.onSeekPreview.unsubscribe(this.updateVolumeWhileScrubbing);
    };
    return VolumeSlider;
}(seekbar_1.SeekBar));
exports.VolumeSlider = VolumeSlider;

},{"../localization/i18n":91,"./seekbar":42}],80:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles audio muting.
 */
var VolumeToggleButton = /** @class */ (function (_super) {
    __extends(VolumeToggleButton, _super);
    function VolumeToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        var defaultConfig = {
            cssClass: 'ui-volumetogglebutton',
            text: i18n_1.i18n.getLocalizer('settings.audio.mute'),
            onClass: 'muted',
            offClass: 'unmuted',
            ariaLabel: i18n_1.i18n.getLocalizer('settings.audio.mute'),
        };
        _this.config = _this.mergeConfig(config, defaultConfig, _this.config);
        return _this;
    }
    VolumeToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var volumeController = uimanager.getConfig().volumeController;
        volumeController.onChanged.subscribe(function (_, args) {
            if (args.muted) {
                _this.on();
            }
            else {
                _this.off();
            }
            var volumeLevelTens = Math.ceil(args.volume / 10);
            _this.getDomElement().data(_this.prefixCss('volume-level-tens'), String(volumeLevelTens));
        });
        this.onClick.subscribe(function () {
            volumeController.toggleMuted();
        });
        // Startup init
        volumeController.onChangedEvent();
    };
    return VolumeToggleButton;
}(togglebutton_1.ToggleButton));
exports.VolumeToggleButton = VolumeToggleButton;

},{"../localization/i18n":91,"./togglebutton":74}],81:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.VRToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles the video view between normal/mono and VR/stereo.
 */
var VRToggleButton = /** @class */ (function (_super) {
    __extends(VRToggleButton, _super);
    function VRToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-vrtogglebutton',
            text: i18n_1.i18n.getLocalizer('vr'),
        }, _this.config);
        return _this;
    }
    VRToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var isVRConfigured = function () {
            // VR availability cannot be checked through getVRStatus() because it is asynchronously populated and not
            // available at UI initialization. As an alternative, we check the VR settings in the config.
            // TODO use getVRStatus() through isVRStereoAvailable() once the player has been rewritten and the status is
            // available in Ready
            var source = player.getSource();
            return source && Boolean(source.vr);
        };
        var isVRStereoAvailable = function () {
            var source = player.getSource();
            return player.vr && Boolean(source.vr);
        };
        var vrStateHandler = function (ev) {
            if (ev.type === player.exports.PlayerEvent.Warning
                && ev.code !== player.exports.WarningCode.VR_RENDERING_ERROR) {
                return;
            }
            if (isVRConfigured() && isVRStereoAvailable()) {
                _this.show(); // show button in case it is hidden
                if (player.vr && player.vr.getStereo()) {
                    _this.on();
                }
                else {
                    _this.off();
                }
            }
            else {
                _this.hide(); // hide button if no stereo mode available
            }
        };
        var vrButtonVisibilityHandler = function () {
            if (isVRConfigured()) {
                _this.show();
            }
            else {
                _this.hide();
            }
        };
        player.on(player.exports.PlayerEvent.VRStereoChanged, vrStateHandler);
        player.on(player.exports.PlayerEvent.Warning, vrStateHandler);
        // Hide button when VR source goes away
        player.on(player.exports.PlayerEvent.SourceUnloaded, vrButtonVisibilityHandler);
        uimanager.getConfig().events.onUpdated.subscribe(vrButtonVisibilityHandler);
        this.onClick.subscribe(function () {
            if (!isVRStereoAvailable()) {
                if (console) {
                    console.log('No VR content');
                }
            }
            else {
                if (player.vr && player.vr.getStereo()) {
                    player.vr.setStereo(false);
                }
                else {
                    player.vr.setStereo(true);
                }
            }
        });
        // Set startup visibility
        vrButtonVisibilityHandler();
    };
    return VRToggleButton;
}(togglebutton_1.ToggleButton));
exports.VRToggleButton = VRToggleButton;

},{"../localization/i18n":91,"./togglebutton":74}],82:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Watermark = void 0;
var clickoverlay_1 = require("./clickoverlay");
var i18n_1 = require("../localization/i18n");
/**
 * A watermark overlay with a clickable logo.
 */
var Watermark = /** @class */ (function (_super) {
    __extends(Watermark, _super);
    function Watermark(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-watermark',
            url: 'http://bitmovin.com',
            role: 'link',
            text: 'logo',
            ariaLabel: i18n_1.i18n.getLocalizer('watermarkLink'),
        }, _this.config);
        return _this;
    }
    return Watermark;
}(clickoverlay_1.ClickOverlay));
exports.Watermark = Watermark;

},{"../localization/i18n":91,"./clickoverlay":21}],83:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DemoFactory = void 0;
var vrtogglebutton_1 = require("./components/vrtogglebutton");
var settingstogglebutton_1 = require("./components/settingstogglebutton");
var volumeslider_1 = require("./components/volumeslider");
var playbacktimelabel_1 = require("./components/playbacktimelabel");
var airplaytogglebutton_1 = require("./components/airplaytogglebutton");
var errormessageoverlay_1 = require("./components/errormessageoverlay");
var controlbar_1 = require("./components/controlbar");
var casttogglebutton_1 = require("./components/casttogglebutton");
var fullscreentogglebutton_1 = require("./components/fullscreentogglebutton");
var recommendationoverlay_1 = require("./components/recommendationoverlay");
var playbackspeedselectbox_1 = require("./components/playbackspeedselectbox");
var audioqualityselectbox_1 = require("./components/audioqualityselectbox");
var caststatusoverlay_1 = require("./components/caststatusoverlay");
var uicontainer_1 = require("./components/uicontainer");
var watermark_1 = require("./components/watermark");
var subtitleoverlay_1 = require("./components/subtitleoverlay");
var settingspanel_1 = require("./components/settingspanel");
var seekbarlabel_1 = require("./components/seekbarlabel");
var playbacktoggleoverlay_1 = require("./components/playbacktoggleoverlay");
var pictureinpicturetogglebutton_1 = require("./components/pictureinpicturetogglebutton");
var spacer_1 = require("./components/spacer");
var container_1 = require("./components/container");
var volumetogglebutton_1 = require("./components/volumetogglebutton");
var playbacktogglebutton_1 = require("./components/playbacktogglebutton");
var seekbar_1 = require("./components/seekbar");
var videoqualityselectbox_1 = require("./components/videoqualityselectbox");
var uimanager_1 = require("./uimanager");
var titlebar_1 = require("./components/titlebar");
var bufferingoverlay_1 = require("./components/bufferingoverlay");
var subtitlelistbox_1 = require("./components/subtitlelistbox");
var audiotracklistbox_1 = require("./components/audiotracklistbox");
var settingspanelitem_1 = require("./components/settingspanelitem");
var settingspanelpage_1 = require("./components/settingspanelpage");
var uifactory_1 = require("./uifactory");
var DemoFactory;
(function (DemoFactory) {
    function buildDemoWithSeparateAudioSubtitlesButtons(player, config) {
        if (config === void 0) { config = {}; }
        // show smallScreen UI only on mobile/handheld devices
        var smallScreenSwitchWidth = 600;
        return new uimanager_1.UIManager(player, [{
                ui: uifactory_1.UIFactory.modernSmallScreenAdsUI(),
                condition: function (context) {
                    return context.isMobile && context.documentWidth < smallScreenSwitchWidth
                        && context.isAd && context.adRequiresUi;
                },
            }, {
                ui: uifactory_1.UIFactory.modernAdsUI(),
                condition: function (context) {
                    return context.isAd && context.adRequiresUi;
                },
            }, {
                ui: uifactory_1.UIFactory.modernSmallScreenUI(),
                condition: function (context) {
                    return context.isMobile && context.documentWidth < smallScreenSwitchWidth;
                },
            }, {
                ui: modernUIWithSeparateAudioSubtitlesButtons(),
            }], config);
    }
    DemoFactory.buildDemoWithSeparateAudioSubtitlesButtons = buildDemoWithSeparateAudioSubtitlesButtons;
    function modernUIWithSeparateAudioSubtitlesButtons() {
        var subtitleOverlay = new subtitleoverlay_1.SubtitleOverlay();
        var settingsPanel = new settingspanel_1.SettingsPanel({
            components: [
                new settingspanelpage_1.SettingsPanelPage({
                    components: [
                        new settingspanelitem_1.SettingsPanelItem('Video Quality', new videoqualityselectbox_1.VideoQualitySelectBox()),
                        new settingspanelitem_1.SettingsPanelItem('Speed', new playbackspeedselectbox_1.PlaybackSpeedSelectBox()),
                        new settingspanelitem_1.SettingsPanelItem('Audio Quality', new audioqualityselectbox_1.AudioQualitySelectBox()),
                    ],
                }),
            ],
            hidden: true,
        });
        var subtitleListBox = new subtitlelistbox_1.SubtitleListBox();
        var subtitleSettingsPanel = new settingspanel_1.SettingsPanel({
            components: [
                new settingspanelpage_1.SettingsPanelPage({
                    components: [
                        new settingspanelitem_1.SettingsPanelItem(null, subtitleListBox),
                    ],
                }),
            ],
            hidden: true,
        });
        var audioTrackListBox = new audiotracklistbox_1.AudioTrackListBox();
        var audioTrackSettingsPanel = new settingspanel_1.SettingsPanel({
            components: [
                new settingspanelpage_1.SettingsPanelPage({
                    components: [
                        new settingspanelitem_1.SettingsPanelItem(null, audioTrackListBox),
                    ],
                }),
            ],
            hidden: true,
        });
        var controlBar = new controlbar_1.ControlBar({
            components: [
                audioTrackSettingsPanel,
                subtitleSettingsPanel,
                settingsPanel,
                new container_1.Container({
                    components: [
                        new playbacktimelabel_1.PlaybackTimeLabel({ timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),
                        new seekbar_1.SeekBar({ label: new seekbarlabel_1.SeekBarLabel() }),
                        new playbacktimelabel_1.PlaybackTimeLabel({ timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),
                    ],
                    cssClasses: ['controlbar-top'],
                }),
                new container_1.Container({
                    components: [
                        new playbacktogglebutton_1.PlaybackToggleButton(),
                        new volumetogglebutton_1.VolumeToggleButton(),
                        new volumeslider_1.VolumeSlider(),
                        new spacer_1.Spacer(),
                        new pictureinpicturetogglebutton_1.PictureInPictureToggleButton(),
                        new airplaytogglebutton_1.AirPlayToggleButton(),
                        new casttogglebutton_1.CastToggleButton(),
                        new vrtogglebutton_1.VRToggleButton(),
                        new settingstogglebutton_1.SettingsToggleButton({
                            settingsPanel: audioTrackSettingsPanel,
                            cssClass: 'ui-audiotracksettingstogglebutton',
                        }),
                        new settingstogglebutton_1.SettingsToggleButton({
                            settingsPanel: subtitleSettingsPanel,
                            cssClass: 'ui-subtitlesettingstogglebutton',
                        }),
                        new settingstogglebutton_1.SettingsToggleButton({ settingsPanel: settingsPanel }),
                        new fullscreentogglebutton_1.FullscreenToggleButton(),
                    ],
                    cssClasses: ['controlbar-bottom'],
                }),
            ],
        });
        return new uicontainer_1.UIContainer({
            components: [
                subtitleOverlay,
                new bufferingoverlay_1.BufferingOverlay(),
                new playbacktoggleoverlay_1.PlaybackToggleOverlay(),
                new caststatusoverlay_1.CastStatusOverlay(),
                controlBar,
                new titlebar_1.TitleBar(),
                new recommendationoverlay_1.RecommendationOverlay(),
                new watermark_1.Watermark(),
                new errormessageoverlay_1.ErrorMessageOverlay(),
            ],
        });
    }
})(DemoFactory = exports.DemoFactory || (exports.DemoFactory = {}));

},{"./components/airplaytogglebutton":12,"./components/audioqualityselectbox":13,"./components/audiotracklistbox":14,"./components/bufferingoverlay":16,"./components/caststatusoverlay":18,"./components/casttogglebutton":19,"./components/container":24,"./components/controlbar":25,"./components/errormessageoverlay":26,"./components/fullscreentogglebutton":27,"./components/pictureinpicturetogglebutton":35,"./components/playbackspeedselectbox":36,"./components/playbacktimelabel":37,"./components/playbacktogglebutton":38,"./components/playbacktoggleoverlay":39,"./components/recommendationoverlay":40,"./components/seekbar":42,"./components/seekbarlabel":45,"./components/settingspanel":47,"./components/settingspanelitem":48,"./components/settingspanelpage":49,"./components/settingstogglebutton":53,"./components/spacer":54,"./components/subtitlelistbox":55,"./components/subtitleoverlay":56,"./components/titlebar":73,"./components/uicontainer":76,"./components/videoqualityselectbox":77,"./components/volumeslider":79,"./components/volumetogglebutton":80,"./components/vrtogglebutton":81,"./components/watermark":82,"./uifactory":113,"./uimanager":114}],84:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DOM = void 0;
/**
 * Simple DOM manipulation and DOM element event handling modeled after jQuery (as replacement for jQuery).
 *
 * Like jQuery, DOM operates on single elements and lists of elements. For example: creating an element returns a DOM
 * instance with a single element, selecting elements returns a DOM instance with zero, one, or many elements. Similar
 * to jQuery, setters usually affect all elements, while getters operate on only the first element.
 * Also similar to jQuery, most methods (except getters) return the DOM instance facilitating easy chaining of method
 * calls.
 *
 * Built with the help of: http://youmightnotneedjquery.com/
 */
var DOM = /** @class */ (function () {
    function DOM(something, attributes) {
        this.document = document; // Set the global document to the local document field
        if (something instanceof Array) {
            if (something.length > 0 && something[0] instanceof HTMLElement) {
                var elements = something;
                this.elements = elements;
            }
        }
        else if (something instanceof HTMLElement) {
            var element = something;
            this.elements = [element];
        }
        else if (something instanceof Document) {
            // When a document is passed in, we do not do anything with it, but by setting this.elements to null
            // we give the event handling method a means to detect if the events should be registered on the document
            // instead of elements.
            this.elements = null;
        }
        else if (attributes) {
            var tagName = something;
            var element = document.createElement(tagName);
            for (var attributeName in attributes) {
                var attributeValue = attributes[attributeName];
                if (attributeValue != null) {
                    element.setAttribute(attributeName, attributeValue);
                }
            }
            this.elements = [element];
        }
        else {
            var selector = something;
            this.elements = this.findChildElements(selector);
        }
    }
    Object.defineProperty(DOM.prototype, "length", {
        /**
         * Gets the number of elements that this DOM instance currently holds.
         * @returns {number} the number of elements
         */
        get: function () {
            return this.elements ? this.elements.length : 0;
        },
        enumerable: false,
        configurable: true
    });
    DOM.prototype.get = function (index) {
        if (index === undefined) {
            return this.elements;
        }
        else if (!this.elements || index >= this.elements.length || index < -this.elements.length) {
            return undefined;
        }
        else if (index < 0) {
            return this.elements[this.elements.length - index];
        }
        else {
            return this.elements[index];
        }
    };
    /**
     * A shortcut method for iterating all elements. Shorts this.elements.forEach(...) to this.forEach(...).
     * @param handler the handler to execute an operation on an element
     */
    DOM.prototype.forEach = function (handler) {
        if (!this.elements) {
            return;
        }
        this.elements.forEach(function (element) {
            handler(element);
        });
    };
    DOM.prototype.findChildElementsOfElement = function (element, selector) {
        var childElements = element.querySelectorAll(selector);
        // Convert NodeList to Array
        // https://toddmotto.com/a-comprehensive-dive-into-nodelists-arrays-converting-nodelists-and-understanding-the-dom/
        return [].slice.call(childElements);
    };
    DOM.prototype.findChildElements = function (selector) {
        var _this = this;
        var allChildElements = [];
        if (this.elements) {
            this.forEach(function (element) {
                allChildElements = allChildElements.concat(_this.findChildElementsOfElement(element, selector));
            });
        }
        else {
            return this.findChildElementsOfElement(document, selector);
        }
        return allChildElements;
    };
    /**
     * Finds all child elements of all elements matching the supplied selector.
     * @param selector the selector to match with child elements
     * @returns {DOM} a new DOM instance representing all matched children
     */
    DOM.prototype.find = function (selector) {
        var allChildElements = this.findChildElements(selector);
        return new DOM(allChildElements);
    };
    /**
     * Focuses to the first input element
     */
    DOM.prototype.focusToFirstInput = function () {
        var inputElements = this.findChildElements('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
        if (inputElements.length > 0) {
            inputElements[0].focus();
        }
    };
    /**
     * Focuses to the first input element
     */
    DOM.prototype.scrollTo = function (x, y) {
        this.elements[0].scrollTo(x, y);
    };
    DOM.prototype.html = function (content) {
        if (arguments.length > 0) {
            return this.setHtml(content);
        }
        else {
            return this.getHtml();
        }
    };
    DOM.prototype.getHtml = function () {
        return this.elements[0].innerHTML;
    };
    DOM.prototype.setHtml = function (content) {
        if (content === undefined || content == null) {
            // Set to empty string to avoid innerHTML getting set to 'undefined' (all browsers) or 'null' (IE9)
            content = '';
        }
        this.forEach(function (element) {
            element.innerHTML = content;
        });
        return this;
    };
    /**
     * Clears the inner HTML of all elements (deletes all children).
     * @returns {DOM}
     */
    DOM.prototype.empty = function () {
        this.forEach(function (element) {
            element.innerHTML = '';
        });
        return this;
    };
    /**
     * Returns the current value of the first form element, e.g. the selected value of a select box or the text if an
     * input field.
     * @returns {string} the value of a form element
     */
    DOM.prototype.val = function () {
        var element = this.elements[0];
        if (element instanceof HTMLSelectElement || element instanceof HTMLInputElement) {
            return element.value;
        }
        else {
            // TODO add support for missing form elements
            throw new Error("val() not supported for ".concat(typeof element));
        }
    };
    DOM.prototype.attr = function (attribute, value) {
        if (arguments.length > 1) {
            return this.setAttr(attribute, value);
        }
        else {
            return this.getAttr(attribute);
        }
    };
    /**
     * Removes the attribute of the element.
     * @param attribute
     */
    DOM.prototype.removeAttr = function (attribute) {
        this.forEach(function (element) {
            element.removeAttribute(attribute);
        });
    };
    DOM.prototype.getAttr = function (attribute) {
        return this.elements[0].getAttribute(attribute);
    };
    DOM.prototype.setAttr = function (attribute, value) {
        this.forEach(function (element) {
            element.setAttribute(attribute, value);
        });
        return this;
    };
    DOM.prototype.data = function (dataAttribute, value) {
        if (arguments.length > 1) {
            return this.setData(dataAttribute, value);
        }
        else {
            return this.getData(dataAttribute);
        }
    };
    DOM.prototype.getData = function (dataAttribute) {
        return this.elements[0].getAttribute('data-' + dataAttribute);
    };
    DOM.prototype.setData = function (dataAttribute, value) {
        this.forEach(function (element) {
            element.setAttribute('data-' + dataAttribute, value);
        });
        return this;
    };
    /**
     * Appends one or more DOM elements as children to all elements.
     * @param childElements the chrild elements to append
     * @returns {DOM}
     */
    DOM.prototype.append = function () {
        var childElements = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            childElements[_i] = arguments[_i];
        }
        this.forEach(function (element) {
            childElements.forEach(function (childElement) {
                childElement.elements.forEach(function (_, index) {
                    element.appendChild(childElement.elements[index]);
                });
            });
        });
        return this;
    };
    /**
     * Removes all elements from the DOM.
     */
    DOM.prototype.remove = function () {
        this.forEach(function (element) {
            var parent = element.parentNode;
            if (parent) {
                parent.removeChild(element);
            }
        });
    };
    /**
     * Returns the offset of the first element from the document's top left corner.
     * @returns {Offset}
     */
    DOM.prototype.offset = function () {
        var element = this.elements[0];
        var elementRect = element.getBoundingClientRect();
        var htmlRect = document.body.parentElement.getBoundingClientRect();
        // Virtual viewport scroll handling (e.g. pinch zoomed viewports in mobile browsers or desktop Chrome/Edge)
        // 'normal' zooms and virtual viewport zooms (aka layout viewport) result in different
        // element.getBoundingClientRect() results:
        //  - with normal scrolls, the clientRect decreases with an increase in scroll(Top|Left)/page(X|Y)Offset
        //  - with pinch zoom scrolls, the clientRect stays the same while scroll/pageOffset changes
        // This means, that the combination of clientRect + scroll/pageOffset does not work to calculate the offset
        // from the document's upper left origin when pinch zoom is used.
        // To work around this issue, we do not use scroll/pageOffset but get the clientRect of the html element and
        // subtract it from the element's rect, which always results in the offset from the document origin.
        // NOTE: the current way of offset calculation was implemented specifically to track event positions on the
        // seek bar, and it might break compatibility with jQuery's offset() method. If this ever turns out to be a
        // problem, this method should be reverted to the old version and the offset calculation moved to the seek bar.
        return {
            top: elementRect.top - htmlRect.top,
            left: elementRect.left - htmlRect.left,
        };
    };
    /**
     * Returns the width of the first element.
     * @returns {number} the width of the first element
     */
    DOM.prototype.width = function () {
        // TODO check if this is the same as jQuery's width() (probably not)
        return this.elements[0].offsetWidth;
    };
    /**
     * Returns the height of the first element.
     * @returns {number} the height of the first element
     */
    DOM.prototype.height = function () {
        // TODO check if this is the same as jQuery's height() (probably not)
        return this.elements[0].offsetHeight;
    };
    /**
     * Returns the size of the first element.
     * @return {Size} the size of the first element
     */
    DOM.prototype.size = function () {
        return { width: this.width(), height: this.height() };
    };
    /**
     * Attaches an event handler to one or more events on all elements.
     * @param eventName the event name (or multiple names separated by space) to listen to
     * @param eventHandler the event handler to call when the event fires
     * @returns {DOM}
     */
    DOM.prototype.on = function (eventName, eventHandler) {
        var _this = this;
        var events = eventName.split(' ');
        events.forEach(function (event) {
            if (_this.elements == null) {
                _this.document.addEventListener(event, eventHandler);
            }
            else {
                _this.forEach(function (element) {
                    element.addEventListener(event, eventHandler);
                });
            }
        });
        return this;
    };
    /**
     * Removes an event handler from one or more events on all elements.
     * @param eventName the event name (or multiple names separated by space) to remove the handler from
     * @param eventHandler the event handler to remove
     * @returns {DOM}
     */
    DOM.prototype.off = function (eventName, eventHandler) {
        var _this = this;
        var events = eventName.split(' ');
        events.forEach(function (event) {
            if (_this.elements == null) {
                _this.document.removeEventListener(event, eventHandler);
            }
            else {
                _this.forEach(function (element) {
                    element.removeEventListener(event, eventHandler);
                });
            }
        });
        return this;
    };
    /**
     * Adds the specified class(es) to all elements.
     * @param className the class(es) to add, multiple classes separated by space
     * @returns {DOM}
     */
    DOM.prototype.addClass = function (className) {
        this.forEach(function (element) {
            var _a;
            if (element.classList) {
                var classNames = className.split(' ')
                    .filter(function (className) { return className.length > 0; });
                if (classNames.length > 0) {
                    (_a = element.classList).add.apply(_a, classNames);
                }
            }
            else {
                element.className += ' ' + className;
            }
        });
        return this;
    };
    /**
     * Removed the specified class(es) from all elements.
     * @param className the class(es) to remove, multiple classes separated by space
     * @returns {DOM}
     */
    DOM.prototype.removeClass = function (className) {
        this.forEach(function (element) {
            var _a;
            if (element.classList) {
                var classNames = className.split(' ')
                    .filter(function (className) { return className.length > 0; });
                if (classNames.length > 0) {
                    (_a = element.classList).remove.apply(_a, classNames);
                }
            }
            else {
                element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
            }
        });
        return this;
    };
    /**
     * Checks if any of the elements has the specified class.
     * @param className the class name to check
     * @returns {boolean} true if one of the elements has the class attached, else if no element has it attached
     */
    DOM.prototype.hasClass = function (className) {
        var hasClass = false;
        this.forEach(function (element) {
            if (element.classList) {
                if (element.classList.contains(className)) {
                    // Since we are inside a handler, we can't just 'return true'. Instead, we save it to a variable
                    // and return it at the end of the function body.
                    hasClass = true;
                }
            }
            else {
                if (new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className)) {
                    // See comment above
                    hasClass = true;
                }
            }
        });
        return hasClass;
    };
    DOM.prototype.css = function (propertyNameOrCollection, value) {
        if (typeof propertyNameOrCollection === 'string') {
            var propertyName = propertyNameOrCollection;
            if (arguments.length === 2) {
                return this.setCss(propertyName, value);
            }
            else {
                return this.getCss(propertyName);
            }
        }
        else {
            var propertyValueCollection = propertyNameOrCollection;
            return this.setCssCollection(propertyValueCollection);
        }
    };
    /**
     * Removes an inline CSS property if it exists
     * @param propertyName name of the property to remove
     * @param elementIndex index of the element whose CSS property should get removed
     */
    DOM.prototype.removeCss = function (propertyName, elementIndex) {
        if (elementIndex === void 0) { elementIndex = 0; }
        return this.elements[elementIndex].style.removeProperty(propertyName);
    };
    DOM.prototype.getCss = function (propertyName) {
        return getComputedStyle(this.elements[0])[propertyName];
    };
    DOM.prototype.setCss = function (propertyName, value) {
        this.forEach(function (element) {
            // <any> cast to resolve TS7015: http://stackoverflow.com/a/36627114/370252
            element.style[propertyName] = value;
        });
        return this;
    };
    DOM.prototype.setCssCollection = function (ruleValueCollection) {
        this.forEach(function (element) {
            // http://stackoverflow.com/a/34490573/370252
            Object.assign(element.style, ruleValueCollection);
        });
        return this;
    };
    return DOM;
}());
exports.DOM = DOM;

},{}],85:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorUtils = void 0;
var ErrorUtils;
(function (ErrorUtils) {
    ErrorUtils.defaultErrorMessages = {
        1000: 'Error is unknown',
        1001: 'The player API is not available after a call to PlayerAPI.destroy.',
        1100: 'General setup error',
        1101: 'There was an error when inserting the HTML video element',
        1102: 'No configuration was provided',
        1103: 'The license is not valid',
        1104: 'The the domain-locked player is not authorized to playback on this domain',
        1105: 'The domain is not allowlisted',
        1106: 'The license server URL is invalid',
        1107: 'The impression server URL is invalid',
        1108: 'Could not initialize a rendering engine',
        1109: 'The used flash version does not support playback',
        1110: 'Native Flash is not authorized by a valid Adobe token',
        1111: 'Flash doesn\'t have sufficient resources',
        1112: 'Flash container API not available',
        1113: 'Protocol not supported. This site has been loaded using "file" protocol, but unfortunately this is not supported. Please load the page using a web server (using http or https)',
        1200: 'General source error',
        1201: 'No valid source was provided',
        1202: 'The downloaded manifest is invalid',
        1203: 'There was no technology detected to playback the provided source',
        1204: 'The stream type is not supported',
        1205: 'The forced technology is not supported',
        1206: 'No stream found for supported technologies.',
        1207: 'The downloaded segment is empty',
        1208: 'The manifest could not be loaded',
        1209: 'Progressive stream type not supported or the stream has an error',
        1210: 'HLS stream has an error',
        1211: 'The encryption method is not supported',
        1300: 'General playback error',
        1301: 'Video decoder or demuxer had an error with the content',
        1302: 'General error if Flash renderer has an error',
        1303: 'Flash doesn\'t have sufficient resources',
        1304: 'The transmuxer could not be initialized',
        1400: 'Network error while downloading',
        1401: 'The manifest download timed out',
        1402: 'The segment download timed out',
        1403: 'The progressive stream download timed out',
        1404: 'The Certificate could not be loaded',
        2000: 'General DRM error',
        2001: 'Required DRM configuration is missing',
        2002: 'The licensing server URL is missing',
        2003: 'License request failed',
        2004: 'Key or KeyId is missing',
        2005: 'Key size is not supported',
        2006: 'Unable to instantiate a key system supporting the required combinations',
        2007: 'Unable to create or initialize key session',
        2008: 'The MediaKey object could not be created/initialized',
        2009: 'Key error',
        2010: 'The key system is not supported',
        2011: 'The certificate is not valid',
        2012: 'Invalid header key/value pair for PlayReady license request',
        2013: 'Content cannot be played back because the output is restricted on this machine',
        2014: 'DRM error for the Flash renderer',
        2100: 'General VR error',
        2101: 'Player technology not compatible with VR playback',
        3000: 'General module error',
        3001: 'The definition of the module is invalid (e.g. incomplete).',
        3002: 'The module definition specifies dependencies but the module is not provided via a function for deferred loading.',
        3003: 'A module cannot be loaded because it has not been added to the player core.',
        3004: 'A module cannot be loaded because one or more dependencies are missing.',
        3100: 'An Advertising module error has occurred. Refer to the attached AdvertisingError.',
    };
    ErrorUtils.defaultMobileV3ErrorMessageTranslator = function (error) {
        return error.message;
    };
    ErrorUtils.defaultWebErrorMessageTranslator = function (error) {
        var errorMessage = ErrorUtils.defaultErrorMessages[error.code];
        if (errorMessage) {
            // Use the error message text if there is one
            return "".concat(errorMessage, "\n(").concat(error.name, ")"); // default error message style
        }
        else {
            // Fallback to error code/name if no message is defined
            return "".concat(error.code, " ").concat(error.name);
        }
    };
})(ErrorUtils = exports.ErrorUtils || (exports.ErrorUtils = {}));

},{}],86:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventDispatcher = void 0;
var arrayutils_1 = require("./arrayutils");
var timeout_1 = require("./timeout");
/**
 * Event dispatcher to subscribe and trigger events. Each event should have its own dispatcher.
 */
var EventDispatcher = /** @class */ (function () {
    function EventDispatcher() {
        this.listeners = [];
    }
    /**
     * {@inheritDoc}
     */
    EventDispatcher.prototype.subscribe = function (listener) {
        this.listeners.push(new EventListenerWrapper(listener));
    };
    /**
     * {@inheritDoc}
     */
    EventDispatcher.prototype.subscribeOnce = function (listener) {
        this.listeners.push(new EventListenerWrapper(listener, true));
    };
    /**
     * {@inheritDoc}
     */
    EventDispatcher.prototype.subscribeRateLimited = function (listener, rateMs) {
        this.listeners.push(new RateLimitedEventListenerWrapper(listener, rateMs));
    };
    /**
     * {@inheritDoc}
     */
    EventDispatcher.prototype.unsubscribe = function (listener) {
        // Iterate through listeners, compare with parameter, and remove if found
        // NOTE: In case we ever remove all matching listeners instead of just the first, we need to reverse-iterate here
        for (var i = 0; i < this.listeners.length; i++) {
            var subscribedListener = this.listeners[i];
            if (subscribedListener.listener === listener) {
                subscribedListener.clear();
                arrayutils_1.ArrayUtils.remove(this.listeners, subscribedListener);
                return true;
            }
        }
        return false;
    };
    /**
     * Removes all listeners from this dispatcher.
     */
    EventDispatcher.prototype.unsubscribeAll = function () {
        // In case of RateLimitedEventListenerWrapper we need to make sure that the timeout callback won't be called
        for (var _i = 0, _a = this.listeners; _i < _a.length; _i++) {
            var listener = _a[_i];
            listener.clear();
        }
        this.listeners = [];
    };
    /**
     * Dispatches an event to all subscribed listeners.
     * @param sender the source of the event
     * @param args the arguments for the event
     */
    EventDispatcher.prototype.dispatch = function (sender, args) {
        if (args === void 0) { args = null; }
        var listenersToRemove = [];
        // Call every listener
        // We iterate over a copy of the array of listeners to avoid the case where events are not fired on listeners when
        // listeners are unsubscribed from within the event handlers during a dispatch (because the indices change and
        // listeners are shifted within the array).
        // This means that listener x+1 will still be called if unsubscribed from within the handler of listener x, as well
        // as listener y+1 will not be called when subscribed from within the handler of listener y.
        // Array.slice(0) is the fastest array copy method according to: https://stackoverflow.com/a/21514254/370252
        var listeners = this.listeners.slice(0);
        for (var _i = 0, listeners_1 = listeners; _i < listeners_1.length; _i++) {
            var listener = listeners_1[_i];
            listener.fire(sender, args);
            if (listener.isOnce()) {
                listenersToRemove.push(listener);
            }
        }
        // Remove one-time listener
        for (var _a = 0, listenersToRemove_1 = listenersToRemove; _a < listenersToRemove_1.length; _a++) {
            var listenerToRemove = listenersToRemove_1[_a];
            arrayutils_1.ArrayUtils.remove(this.listeners, listenerToRemove);
        }
    };
    /**
     * Returns the event that this dispatcher manages and on which listeners can subscribe and unsubscribe event handlers.
     * @returns {Event}
     */
    EventDispatcher.prototype.getEvent = function () {
        // For now, just cast the event dispatcher to the event interface. At some point in the future when the
        // codebase grows, it might make sense to split the dispatcher into separate dispatcher and event classes.
        return this;
    };
    return EventDispatcher;
}());
exports.EventDispatcher = EventDispatcher;
/**
 * A basic event listener wrapper to manage listeners within the {@link EventDispatcher}. This is a 'private' class
 * for internal dispatcher use and it is therefore not exported.
 */
var EventListenerWrapper = /** @class */ (function () {
    function EventListenerWrapper(listener, once) {
        if (once === void 0) { once = false; }
        this.eventListener = listener;
        this.once = once;
    }
    Object.defineProperty(EventListenerWrapper.prototype, "listener", {
        /**
         * Returns the wrapped event listener.
         * @returns {EventListener<Sender, Args>}
         */
        get: function () {
            return this.eventListener;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Fires the wrapped event listener with the given arguments.
     * @param sender
     * @param args
     */
    EventListenerWrapper.prototype.fire = function (sender, args) {
        this.eventListener(sender, args);
    };
    /**
     * Checks if this listener is scheduled to be called only once.
     * @returns {boolean} once if true
     */
    EventListenerWrapper.prototype.isOnce = function () {
        return this.once;
    };
    EventListenerWrapper.prototype.clear = function () {
    };
    return EventListenerWrapper;
}());
/**
 * Extends the basic {@link EventListenerWrapper} with rate-limiting functionality.
 */
var RateLimitedEventListenerWrapper = /** @class */ (function (_super) {
    __extends(RateLimitedEventListenerWrapper, _super);
    function RateLimitedEventListenerWrapper(listener, rateMs) {
        var _this = _super.call(this, listener) || this;
        _this.rateMs = rateMs;
        // starting limiting the events to the given value
        var startRateLimiting = function () {
            _this.rateLimitTimout.start();
        };
        // timout for limiting the events
        _this.rateLimitTimout = new timeout_1.Timeout(_this.rateMs, function () {
            if (_this.lastSeenEvent) {
                _this.fireSuper(_this.lastSeenEvent.sender, _this.lastSeenEvent.args);
                startRateLimiting(); // start rateLimiting again to keep rate limit active even after firing the last seen event
                _this.lastSeenEvent = null;
            }
        });
        // In case the events stopping during the rateLimiting we need to track the last seen one and delegate after the
        // rate limiting is finished. This prevents missing the last update due to the rate limit.
        _this.rateLimitingEventListener = function (sender, args) {
            // only fire events if the rateLimiting is not running
            if (_this.shouldFireEvent()) {
                _this.fireSuper(sender, args);
                startRateLimiting();
                return;
            }
            _this.lastSeenEvent = {
                sender: sender,
                args: args,
            };
        };
        return _this;
    }
    RateLimitedEventListenerWrapper.prototype.shouldFireEvent = function () {
        return !this.rateLimitTimout.isActive();
    };
    RateLimitedEventListenerWrapper.prototype.fireSuper = function (sender, args) {
        // Fire the actual external event listener
        _super.prototype.fire.call(this, sender, args);
    };
    RateLimitedEventListenerWrapper.prototype.fire = function (sender, args) {
        // Fire the internal rate-limiting listener instead of the external event listener
        this.rateLimitingEventListener(sender, args);
    };
    RateLimitedEventListenerWrapper.prototype.clear = function () {
        _super.prototype.clear.call(this);
        this.rateLimitTimout.clear();
    };
    return RateLimitedEventListenerWrapper;
}(EventListenerWrapper));

},{"./arrayutils":6,"./timeout":112}],87:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FocusVisibilityTracker = void 0;
var FocusVisibleCssClassName = 'bmpui-focus-visible';
var FocusVisibilityTracker = /** @class */ (function () {
    function FocusVisibilityTracker(bitmovinUiPrefix) {
        var _this = this;
        this.bitmovinUiPrefix = bitmovinUiPrefix;
        this.lastInteractionWasKeyboard = true;
        this.onKeyDown = function (e) {
            if (e.metaKey || e.altKey || e.ctrlKey) {
                return;
            }
            _this.lastInteractionWasKeyboard = true;
        };
        this.onMouseOrPointerOrTouch = function () { return (_this.lastInteractionWasKeyboard = false); };
        this.onFocus = function (_a) {
            var element = _a.target;
            if (_this.lastInteractionWasKeyboard &&
                isHtmlElement(element) &&
                isBitmovinUi(element, _this.bitmovinUiPrefix) &&
                !element.classList.contains(FocusVisibleCssClassName)) {
                element.classList.add(FocusVisibleCssClassName);
            }
        };
        this.onBlur = function (_a) {
            var element = _a.target;
            if (isHtmlElement(element)) {
                element.classList.remove(FocusVisibleCssClassName);
            }
        };
        this.eventHandlerMap = {
            mousedown: this.onMouseOrPointerOrTouch,
            pointerdown: this.onMouseOrPointerOrTouch,
            touchstart: this.onMouseOrPointerOrTouch,
            keydown: this.onKeyDown,
            focus: this.onFocus,
            blur: this.onBlur,
        };
        this.registerEventListeners();
    }
    FocusVisibilityTracker.prototype.registerEventListeners = function () {
        for (var event_1 in this.eventHandlerMap) {
            document.addEventListener(event_1, this.eventHandlerMap[event_1], true);
        }
    };
    FocusVisibilityTracker.prototype.unregisterEventListeners = function () {
        for (var event_2 in this.eventHandlerMap) {
            document.removeEventListener(event_2, this.eventHandlerMap[event_2], true);
        }
    };
    FocusVisibilityTracker.prototype.release = function () {
        this.unregisterEventListeners();
    };
    return FocusVisibilityTracker;
}());
exports.FocusVisibilityTracker = FocusVisibilityTracker;
function isBitmovinUi(element, bitmovinUiPrefix) {
    return element.id.indexOf(bitmovinUiPrefix) === 0;
}
function isHtmlElement(element) {
    return (element instanceof HTMLElement && element.classList instanceof DOMTokenList);
}

},{}],88:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupPlaybackSuspensionReason = void 0;
/**
 * The Group Playback API offers control over synchronized playback of a group of clients, e.g. for Apple SharePlay
 * sessions.

 * Note: The API currently only covers the immediate needs of the iOS SDK in combination with our UI which is regarding
 * temporarily suspending synchronization of the player from the group. But it is open to be extended as needed in the
 * future.
 */
/**
 * Reason for suspending the synchronization with the group.
 */
var GroupPlaybackSuspensionReason;
(function (GroupPlaybackSuspensionReason) {
    GroupPlaybackSuspensionReason["UserIsScrubbing"] = "userIsScrubbing";
})(GroupPlaybackSuspensionReason = exports.GroupPlaybackSuspensionReason || (exports.GroupPlaybackSuspensionReason = {}));

},{}],89:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Guid = void 0;
var Guid;
(function (Guid) {
    var guid = 1;
    function next() {
        return guid++;
    }
    Guid.next = next;
})(Guid = exports.Guid || (exports.Guid = {}));

},{}],90:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageLoader = void 0;
var dom_1 = require("./dom");
/**
 * Tracks the loading state of images.
 */
var ImageLoader = /** @class */ (function () {
    function ImageLoader() {
        this.state = {};
    }
    /**
     * Loads an image and call the callback once the image is loaded. If the image is already loaded, the callback
     * is called immediately, else it is called once loading has finished. Calling this method multiple times for the
     * same image while it is loading calls only let callback passed into the last call.
     * @param url The url to the image to load
     * @param loadedCallback The callback that is called when the image is loaded
     */
    ImageLoader.prototype.load = function (url, loadedCallback) {
        var _this = this;
        if (!this.state[url]) {
            // When the image was never attempted to be loaded before, we create a state and store it in the state map
            // for later use when the same image is requested to be loaded again.
            var state_1 = {
                url: url,
                image: new dom_1.DOM('img', {}),
                loadedCallback: loadedCallback,
                loaded: false,
                width: 0,
                height: 0,
            };
            this.state[url] = state_1;
            // Listen to the load event, update the state and call the callback once the image is loaded
            state_1.image.on('load', function (e) {
                state_1.loaded = true;
                state_1.width = state_1.image.get(0).width;
                state_1.height = state_1.image.get(0).height;
                _this.callLoadedCallback(state_1);
            });
            // Set the image URL to start the loading
            state_1.image.attr('src', state_1.url);
        }
        else {
            // We have a state for the requested image, so it is either already loaded or currently loading
            var state = this.state[url];
            // We overwrite the callback to make sure that only the callback of the latest call gets executed.
            // Earlier callbacks become invalid once a new load call arrives, and they are not called as long as the image
            // is not loaded.
            state.loadedCallback = loadedCallback;
            // When the image is already loaded, we directly execute the callback instead of waiting for the load event
            if (state.loaded) {
                this.callLoadedCallback(state);
            }
        }
    };
    ImageLoader.prototype.callLoadedCallback = function (state) {
        state.loadedCallback(state.url, state.width, state.height);
    };
    return ImageLoader;
}());
exports.ImageLoader = ImageLoader;

},{"./dom":84}],91:[function(require,module,exports){
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.i18n = exports.defaultVocabularies = void 0;
var de_json_1 = __importDefault(require("./languages/de.json"));
var en_json_1 = __importDefault(require("./languages/en.json"));
var es_json_1 = __importDefault(require("./languages/es.json"));
exports.defaultVocabularies = {
    'en': en_json_1.default,
    'de': de_json_1.default,
    'es': es_json_1.default,
};
var defaultLocalizationConfig = {
    language: 'en',
    vocabularies: exports.defaultVocabularies,
};
var I18n = /** @class */ (function () {
    function I18n(config) {
        this.setConfig(config);
    }
    I18n.prototype.setConfig = function (config) {
        var mergedConfig = __assign(__assign({}, defaultLocalizationConfig), config);
        var detectBrowserLanguage = mergedConfig.language === 'auto';
        var vocabularies = this.mergeVocabulariesWithDefaultVocabularies(mergedConfig.vocabularies);
        this.initializeLanguage(mergedConfig.language, detectBrowserLanguage, vocabularies);
        this.initializeVocabulary(vocabularies);
    };
    I18n.containsLanguage = function (vocabularies, language) {
        return vocabularies.hasOwnProperty(language);
    };
    I18n.prototype.mergeVocabulariesWithDefaultVocabularies = function (vocabularies) {
        if (vocabularies === void 0) { vocabularies = {}; }
        var rawVocabularies = __assign(__assign({}, exports.defaultVocabularies), vocabularies);
        return Object.keys(rawVocabularies).reduce(function (mergedVocabularies, language) {
            var _a;
            var vocabulary = rawVocabularies[language];
            if (I18n.containsLanguage(exports.defaultVocabularies, language) && I18n.containsLanguage(vocabularies, language)) {
                vocabulary = __assign(__assign({}, exports.defaultVocabularies[language]), vocabularies[language]);
            }
            return __assign(__assign({}, mergedVocabularies), (_a = {}, _a[language] = vocabulary, _a));
        }, {});
    };
    I18n.prototype.initializeLanguage = function (language, browserLanguageDetectionEnabled, vocabularies) {
        if (browserLanguageDetectionEnabled) {
            var userLanguage = window.navigator.language;
            if (I18n.containsLanguage(vocabularies, userLanguage)) {
                this.language = userLanguage;
                return;
            }
            var shortenedUserLanguage = userLanguage.slice(0, 2);
            if (I18n.containsLanguage(vocabularies, shortenedUserLanguage)) {
                this.language = shortenedUserLanguage;
                return;
            }
        }
        this.language = language;
    };
    I18n.prototype.initializeVocabulary = function (vocabularies) {
        this.vocabulary = ['en', this.language]
            .reduce(function (vocab, lang) { return (__assign(__assign({}, vocab), (vocabularies[lang] || {}))); }, {});
    };
    I18n.prototype.replaceVariableWithPlaceholderIfExists = function (text, config) {
        var matches = text.match(new RegExp('{[a-zA-Z0-9]+}', 'g'));
        if (matches.length === 0) {
            return text;
        }
        return matches
            .map(function (m) { return ({ match: m, key: m.slice(1, -1) }); })
            .reduce(function (str, _a) {
            var key = _a.key, match = _a.match;
            return config.hasOwnProperty(key) ? str.replace(match, config[key]) : str;
        }, text);
    };
    I18n.prototype.getLocalizer = function (key, config) {
        var _this = this;
        return function () {
            if (key == null) { // because sometimes we call toDomElement() without configuring the component or setting text...
                return undefined;
            }
            var vocabularyString = _this.vocabulary[key];
            if (vocabularyString == null) {
                vocabularyString = key;
            }
            if (config != null) {
                vocabularyString = _this.replaceVariableWithPlaceholderIfExists(vocabularyString, config);
            }
            return vocabularyString;
        };
    };
    I18n.prototype.performLocalization = function (text) {
        return typeof text === 'function' ? text() : text;
    };
    return I18n;
}());
exports.i18n = new I18n(defaultLocalizationConfig);

},{"./languages/de.json":92,"./languages/en.json":93,"./languages/es.json":94}],92:[function(require,module,exports){
module.exports={
  "settings.video.quality": "Videoqualität",
  "settings.audio.quality": "Audioqualität",
  "settings.audio.track": "Audiospur",
  "speed": "Geschwindigkeit",
  "play": "Abspielen",
  "pause": "Pause",
  "playPause": "Abspielen/Pause",
  "open": "öffnen",
  "close": "Schließen",
  "settings.audio.mute": "Stummschaltung",
  "settings.audio.volume": "Lautstärke",
  "pictureInPicture": "Bild im Bild",
  "appleAirplay": "Apple AirPlay",
  "googleCast": "Google Cast",
  "vr": "VR",
  "settings": "Einstellungen",
  "fullscreen": "Vollbild",
  "off": "aus",
  "settings.subtitles": "Untertitel",
  "settings.subtitles.font.size": "Größe",
  "settings.subtitles.font.family": "Schriftart",
  "settings.subtitles.font.color": "Farbe",
  "settings.subtitles.font.opacity": "Deckkraft",
  "settings.subtitles.characterEdge": "Ränder",
  "settings.subtitles.background.color": "Hintergrundfarbe",
  "settings.subtitles.background.opacity": "Hintergrunddeckkraft",
  "settings.subtitles.window.color": "Hintergrundfarbe",
  "settings.subtitles.window.opacity": "Hintergrunddeckkraft",
  "settings.time.hours": "Stunden",
  "settings.time.minutes": "Minuten",
  "settings.time.seconds": "Sekunden",
  "back": "Zurück",
  "reset": "Zurücksetzen",
  "replay": "Wiederholen",
  "ads.remainingTime": "Diese Anzeige endet in {remainingTime} Sekunden",
  "default": "standard",
  "colors.white": "weiß",
  "colors.black": "schwarz",
  "colors.red": "rot",
  "colors.green": "grün",
  "colors.blue": "blau",
  "colors.yellow": "gelb",
  "subtitle.example": "Beispiel Untertitel",
  "subtitle.select": "Untertitel auswählen",
  "playingOn": "Spielt auf <strong>{castDeviceName}</strong>",
  "connectingTo": "Verbindung mit <strong>{castDeviceName}</strong> wird hergestellt...",
  "watermarkLink": "Link zum Homepage",
  "controlBar": "Videoplayer Kontrollen",
  "player": "Video player",
  "seekBar": "Video-Timeline",
  "seekBar.value": "Wert",
  "seekBar.timeshift": "Timeshift",
  "seekBar.durationText": "aus"
}

},{}],93:[function(require,module,exports){
module.exports={
  "settings.video.quality": "Video Quality",
  "settings.audio.quality": "Audio Quality",
  "settings.audio.track": "Audio Track",
  "settings.audio.mute" : "Mute",
  "settings.audio.volume" : "Volume",
  "settings.subtitles.window.color" : "Window color",
  "settings.subtitles.window.opacity" : "Window opacity",
  "settings.subtitles" : "Subtitles",
  "settings.subtitles.font.color" : "Font color",
  "settings.subtitles.font.opacity" : "Font opacity",
  "settings.subtitles.background.color" : "Background color",
  "settings.subtitles.background.opacity": "Background opacity",
  "colors.white": "white",
  "colors.black": "black",
  "colors.red": "red",
  "colors.green": "green",
  "colors.blue": "blue",
  "colors.cyan": "cyan",
  "colors.yellow": "yellow",
  "colors.magenta": "magenta",
  "percent": "{value}%",
  "settings.subtitles.font.size": "Font size",
  "settings.subtitles.characterEdge": "Character edge",
  "settings.subtitles.characterEdge.raised": "raised",
  "settings.subtitles.characterEdge.depressed": "depressed",
  "settings.subtitles.characterEdge.uniform": "uniform",
  "settings.subtitles.characterEdge.dropshadowed": "drop shadowed",
  "settings.subtitles.font.family": "Font family",
  "settings.subtitles.font.family.monospacedserif": "monospaced serif",
  "settings.subtitles.font.family.proportionalserif": "proportional serif",
  "settings.subtitles.font.family.monospacedsansserif": "monospaced sans serif",
  "settings.subtitles.font.family.proportionalsansserif": "proportional sans serif",
  "settings.subtitles.font.family.casual": "casual",
  "settings.subtitles.font.family.cursive": "cursive",
  "settings.subtitles.font.family.smallcapital": "small capital",
  "settings.time.hours": "Hours",
  "settings.time.minutes": "Minutes",
  "settings.time.seconds": "Seconds",
  "ads.remainingTime": "This ad will end in {remainingTime} seconds.",
  "settings": "Settings",
  "fullscreen" : "Fullscreen",
  "speed": "Speed",
  "playPause" : "Play/Pause",
  "play": "Play",
  "pause": "Pause",
  "open": "open",
  "close": "Close",
  "pictureInPicture": "Picture-in-Picture",
  "appleAirplay" : "Apple AirPlay",
  "googleCast": "Google Cast",
  "vr" : "VR",
  "off": "off",
  "auto": "auto",
  "back" : "Back",
  "reset": "Reset",
  "replay": "Replay",
  "normal": "normal",
  "default": "default",
  "live": "Live",
  "subtitle.example": "example subtitle",
  "subtitle.select": "Select subtitle",
  "playingOn": "Playing on <strong>{castDeviceName}</strong>",
  "connectingTo": "Connecting to <strong>{castDeviceName}</strong>...",
  "watermarkLink": "Link to Homepage",
  "controlBar": "Video player controls",
  "player": "Video player",
  "seekBar": "Video timeline",
  "seekBar.value": "Value",
  "seekBar.timeshift": "Timeshift",
  "seekBar.durationText": "out of"
}

},{}],94:[function(require,module,exports){
module.exports={
  "settings.video.quality": "Calidad de Video",
  "settings.audio.quality": "Calidad de Audio",
  "settings.audio.track": "Pista de Audio",
  "settings.audio.mute" : "Silencio",
  "settings.audio.volume" : "Volumen",
  "settings.subtitles.window.color" : "color de Ventana",
  "settings.subtitles.window.opacity" : "opacidad de Ventana",
  "settings.subtitles" : "Subtítulos",
  "settings.subtitles.font.color" : "color de Fuente",
  "settings.subtitles.font.opacity" : "opacidad de Fuente",
  "settings.subtitles.background.color" : "color de Fondo",
  "settings.subtitles.background.opacity": "opacidad de Fondo",
  "colors.white": "blanco",
  "colors.black": "negro",
  "colors.red": "rojo",
  "colors.green": "verde",
  "colors.blue": "azul",
  "colors.cyan": "cian",
  "colors.yellow": "amarillo",
  "colors.magenta": "magenta",
  "percent": "{value}%",
  "settings.subtitles.font.size": "tamaño de Fuente",
  "settings.subtitles.characterEdge": "borde del Caracter",
  "settings.subtitles.characterEdge.raised": "alzado",
  "settings.subtitles.characterEdge.depressed": "discreto",
  "settings.subtitles.characterEdge.uniform": "uniforme",
  "settings.subtitles.characterEdge.dropshadowed": "sombreado",
  "settings.subtitles.font.family": "tipo de Fuente",
  "settings.subtitles.font.family.monospacedserif": "monospaced serif",
  "settings.subtitles.font.family.proportionalserif": "proportional serif",
  "settings.subtitles.font.family.monospacedsansserif": "monospaced sans serif",
  "settings.subtitles.font.family.proportionalsansserif": "proportional sans serif",
  "settings.subtitles.font.family.casual": "casual",
  "settings.subtitles.font.family.cursive": "cursiva",
  "settings.subtitles.font.family.smallcapital": "small capital",
  "settings.time.hours": "Horas",
  "settings.time.minutes": "Minutos",
  "settings.time.seconds": "Segundos",
  "ads.remainingTime": "Este anuncio acabará en {remainingTime} segundos.",
  "settings": "Configuración",
  "fullscreen" : "Pantalla Completa",
  "speed": "Velocidad",
  "playPause" : "Reproducir/Pausa",
  "play": "Reproducir",
  "pause": "Pausa",
  "open": "Abrir",
  "close": "Cerrar",
  "pictureInPicture": "Imagen en Imagen",
  "appleAirplay" : "Apple AirPlay",
  "googleCast": "Google Cast",
  "vr" : "VR",
  "off": "off",
  "auto": "auto",
  "back" : "Atrás",
  "reset": "Reiniciar",
  "replay": "Rebobinar",
  "normal": "normal",
  "default": "predeterminado",
  "live": "Directo",
  "subtitle.example": "Ejemplo de Subtítulo",
  "subtitle.select": "Seleccionar subtítulo",
  "playingOn": "Reproduciendo en <strong>{castDeviceName}</strong>",
  "connectingTo": "Conectando a <strong>{castDeviceName}</strong>...",
  "watermarkLink": "Enlace al inicio",
  "controlBar": "Controles del Reproductor",
  "player": "Reproductor de Video",
  "seekBar": "Línea de Tiempo",
  "seekBar.value": "posición",
  "seekBar.timeshift": "cambio de posición",
  "seekBar.durationText": "de"
}
},{}],95:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeControlButton = exports.TitleBar = exports.SubtitleSelectBox = exports.SubtitleOverlay = exports.SeekBarLabel = exports.RecommendationOverlay = exports.ErrorMessageOverlay = exports.Component = exports.CastToggleButton = exports.CastStatusOverlay = exports.AudioTrackSelectBox = exports.AudioQualitySelectBox = exports.Label = exports.Container = exports.UIContainer = exports.Watermark = exports.VRToggleButton = exports.VolumeToggleButton = exports.VideoQualitySelectBox = exports.ToggleButton = exports.SettingsToggleButton = exports.SettingsPanel = exports.ItemSelectionList = exports.SelectBox = exports.SeekBar = exports.PlaybackToggleButton = exports.PlaybackTimeLabelMode = exports.PlaybackTimeLabel = exports.HugePlaybackToggleButton = exports.FullscreenToggleButton = exports.ControlBar = exports.Button = exports.ListOrientation = exports.ListNavigationGroup = exports.RootNavigationGroup = exports.NavigationGroup = exports.SpatialNavigation = exports.i18n = exports.ErrorUtils = exports.StorageUtils = exports.BrowserUtils = exports.UIUtils = exports.PlayerUtils = exports.StringUtils = exports.ArrayUtils = exports.DemoFactory = exports.UIFactory = exports.UIInstanceManager = exports.UIManager = exports.version = void 0;
exports.ReplayButton = exports.SettingsPanelItem = exports.SubtitleSettingsPanelPage = exports.SettingsPanelPageOpenButton = exports.SettingsPanelPageBackButton = exports.SettingsPanelPage = exports.AudioTrackListBox = exports.SubtitleListBox = exports.ListBox = exports.SubtitleSettingsResetButton = exports.WindowOpacitySelectBox = exports.WindowColorSelectBox = exports.SubtitleSettingsLabel = exports.SubtitleSettingSelectBox = exports.FontSizeSelectBox = exports.FontOpacitySelectBox = exports.FontFamilySelectBox = exports.FontColorSelectBox = exports.CharacterEdgeSelectBox = exports.BackgroundOpacitySelectBox = exports.BackgroundColorSelectBox = exports.Spacer = exports.PictureInPictureToggleButton = exports.VolumeSlider = exports.AirPlayToggleButton = exports.MetadataLabelContent = exports.MetadataLabel = exports.CloseButton = exports.PlaybackToggleOverlay = exports.CastUIContainer = exports.BufferingOverlay = exports.HugeReplayButton = exports.PlaybackSpeedSelectBox = exports.AdClickOverlay = exports.AdMessageLabel = exports.AdSkipButton = exports.ClickOverlay = void 0;
exports.version = '3.53.0';
// Management
var uimanager_1 = require("./uimanager");
Object.defineProperty(exports, "UIManager", { enumerable: true, get: function () { return uimanager_1.UIManager; } });
Object.defineProperty(exports, "UIInstanceManager", { enumerable: true, get: function () { return uimanager_1.UIInstanceManager; } });
// Factories
var uifactory_1 = require("./uifactory");
Object.defineProperty(exports, "UIFactory", { enumerable: true, get: function () { return uifactory_1.UIFactory; } });
var demofactory_1 = require("./demofactory");
Object.defineProperty(exports, "DemoFactory", { enumerable: true, get: function () { return demofactory_1.DemoFactory; } });
// Utils
var arrayutils_1 = require("./arrayutils");
Object.defineProperty(exports, "ArrayUtils", { enumerable: true, get: function () { return arrayutils_1.ArrayUtils; } });
var stringutils_1 = require("./stringutils");
Object.defineProperty(exports, "StringUtils", { enumerable: true, get: function () { return stringutils_1.StringUtils; } });
var playerutils_1 = require("./playerutils");
Object.defineProperty(exports, "PlayerUtils", { enumerable: true, get: function () { return playerutils_1.PlayerUtils; } });
var uiutils_1 = require("./uiutils");
Object.defineProperty(exports, "UIUtils", { enumerable: true, get: function () { return uiutils_1.UIUtils; } });
var browserutils_1 = require("./browserutils");
Object.defineProperty(exports, "BrowserUtils", { enumerable: true, get: function () { return browserutils_1.BrowserUtils; } });
var storageutils_1 = require("./storageutils");
Object.defineProperty(exports, "StorageUtils", { enumerable: true, get: function () { return storageutils_1.StorageUtils; } });
var errorutils_1 = require("./errorutils");
Object.defineProperty(exports, "ErrorUtils", { enumerable: true, get: function () { return errorutils_1.ErrorUtils; } });
// Localization
var i18n_1 = require("./localization/i18n");
Object.defineProperty(exports, "i18n", { enumerable: true, get: function () { return i18n_1.i18n; } });
// Spatial Navigation
var spatialnavigation_1 = require("./spatialnavigation/spatialnavigation");
Object.defineProperty(exports, "SpatialNavigation", { enumerable: true, get: function () { return spatialnavigation_1.SpatialNavigation; } });
var navigationgroup_1 = require("./spatialnavigation/navigationgroup");
Object.defineProperty(exports, "NavigationGroup", { enumerable: true, get: function () { return navigationgroup_1.NavigationGroup; } });
var rootnavigationgroup_1 = require("./spatialnavigation/rootnavigationgroup");
Object.defineProperty(exports, "RootNavigationGroup", { enumerable: true, get: function () { return rootnavigationgroup_1.RootNavigationGroup; } });
var ListNavigationGroup_1 = require("./spatialnavigation/ListNavigationGroup");
Object.defineProperty(exports, "ListNavigationGroup", { enumerable: true, get: function () { return ListNavigationGroup_1.ListNavigationGroup; } });
Object.defineProperty(exports, "ListOrientation", { enumerable: true, get: function () { return ListNavigationGroup_1.ListOrientation; } });
// Components
var button_1 = require("./components/button");
Object.defineProperty(exports, "Button", { enumerable: true, get: function () { return button_1.Button; } });
var controlbar_1 = require("./components/controlbar");
Object.defineProperty(exports, "ControlBar", { enumerable: true, get: function () { return controlbar_1.ControlBar; } });
var fullscreentogglebutton_1 = require("./components/fullscreentogglebutton");
Object.defineProperty(exports, "FullscreenToggleButton", { enumerable: true, get: function () { return fullscreentogglebutton_1.FullscreenToggleButton; } });
var hugeplaybacktogglebutton_1 = require("./components/hugeplaybacktogglebutton");
Object.defineProperty(exports, "HugePlaybackToggleButton", { enumerable: true, get: function () { return hugeplaybacktogglebutton_1.HugePlaybackToggleButton; } });
var playbacktimelabel_1 = require("./components/playbacktimelabel");
Object.defineProperty(exports, "PlaybackTimeLabel", { enumerable: true, get: function () { return playbacktimelabel_1.PlaybackTimeLabel; } });
Object.defineProperty(exports, "PlaybackTimeLabelMode", { enumerable: true, get: function () { return playbacktimelabel_1.PlaybackTimeLabelMode; } });
var playbacktogglebutton_1 = require("./components/playbacktogglebutton");
Object.defineProperty(exports, "PlaybackToggleButton", { enumerable: true, get: function () { return playbacktogglebutton_1.PlaybackToggleButton; } });
var seekbar_1 = require("./components/seekbar");
Object.defineProperty(exports, "SeekBar", { enumerable: true, get: function () { return seekbar_1.SeekBar; } });
var selectbox_1 = require("./components/selectbox");
Object.defineProperty(exports, "SelectBox", { enumerable: true, get: function () { return selectbox_1.SelectBox; } });
var itemselectionlist_1 = require("./components/itemselectionlist");
Object.defineProperty(exports, "ItemSelectionList", { enumerable: true, get: function () { return itemselectionlist_1.ItemSelectionList; } });
var settingspanel_1 = require("./components/settingspanel");
Object.defineProperty(exports, "SettingsPanel", { enumerable: true, get: function () { return settingspanel_1.SettingsPanel; } });
var settingstogglebutton_1 = require("./components/settingstogglebutton");
Object.defineProperty(exports, "SettingsToggleButton", { enumerable: true, get: function () { return settingstogglebutton_1.SettingsToggleButton; } });
var togglebutton_1 = require("./components/togglebutton");
Object.defineProperty(exports, "ToggleButton", { enumerable: true, get: function () { return togglebutton_1.ToggleButton; } });
var videoqualityselectbox_1 = require("./components/videoqualityselectbox");
Object.defineProperty(exports, "VideoQualitySelectBox", { enumerable: true, get: function () { return videoqualityselectbox_1.VideoQualitySelectBox; } });
var volumetogglebutton_1 = require("./components/volumetogglebutton");
Object.defineProperty(exports, "VolumeToggleButton", { enumerable: true, get: function () { return volumetogglebutton_1.VolumeToggleButton; } });
var vrtogglebutton_1 = require("./components/vrtogglebutton");
Object.defineProperty(exports, "VRToggleButton", { enumerable: true, get: function () { return vrtogglebutton_1.VRToggleButton; } });
var watermark_1 = require("./components/watermark");
Object.defineProperty(exports, "Watermark", { enumerable: true, get: function () { return watermark_1.Watermark; } });
var uicontainer_1 = require("./components/uicontainer");
Object.defineProperty(exports, "UIContainer", { enumerable: true, get: function () { return uicontainer_1.UIContainer; } });
var container_1 = require("./components/container");
Object.defineProperty(exports, "Container", { enumerable: true, get: function () { return container_1.Container; } });
var label_1 = require("./components/label");
Object.defineProperty(exports, "Label", { enumerable: true, get: function () { return label_1.Label; } });
var audioqualityselectbox_1 = require("./components/audioqualityselectbox");
Object.defineProperty(exports, "AudioQualitySelectBox", { enumerable: true, get: function () { return audioqualityselectbox_1.AudioQualitySelectBox; } });
var audiotrackselectbox_1 = require("./components/audiotrackselectbox");
Object.defineProperty(exports, "AudioTrackSelectBox", { enumerable: true, get: function () { return audiotrackselectbox_1.AudioTrackSelectBox; } });
var caststatusoverlay_1 = require("./components/caststatusoverlay");
Object.defineProperty(exports, "CastStatusOverlay", { enumerable: true, get: function () { return caststatusoverlay_1.CastStatusOverlay; } });
var casttogglebutton_1 = require("./components/casttogglebutton");
Object.defineProperty(exports, "CastToggleButton", { enumerable: true, get: function () { return casttogglebutton_1.CastToggleButton; } });
var component_1 = require("./components/component");
Object.defineProperty(exports, "Component", { enumerable: true, get: function () { return component_1.Component; } });
var errormessageoverlay_1 = require("./components/errormessageoverlay");
Object.defineProperty(exports, "ErrorMessageOverlay", { enumerable: true, get: function () { return errormessageoverlay_1.ErrorMessageOverlay; } });
var recommendationoverlay_1 = require("./components/recommendationoverlay");
Object.defineProperty(exports, "RecommendationOverlay", { enumerable: true, get: function () { return recommendationoverlay_1.RecommendationOverlay; } });
var seekbarlabel_1 = require("./components/seekbarlabel");
Object.defineProperty(exports, "SeekBarLabel", { enumerable: true, get: function () { return seekbarlabel_1.SeekBarLabel; } });
var subtitleoverlay_1 = require("./components/subtitleoverlay");
Object.defineProperty(exports, "SubtitleOverlay", { enumerable: true, get: function () { return subtitleoverlay_1.SubtitleOverlay; } });
var subtitleselectbox_1 = require("./components/subtitleselectbox");
Object.defineProperty(exports, "SubtitleSelectBox", { enumerable: true, get: function () { return subtitleselectbox_1.SubtitleSelectBox; } });
var titlebar_1 = require("./components/titlebar");
Object.defineProperty(exports, "TitleBar", { enumerable: true, get: function () { return titlebar_1.TitleBar; } });
var volumecontrolbutton_1 = require("./components/volumecontrolbutton");
Object.defineProperty(exports, "VolumeControlButton", { enumerable: true, get: function () { return volumecontrolbutton_1.VolumeControlButton; } });
var clickoverlay_1 = require("./components/clickoverlay");
Object.defineProperty(exports, "ClickOverlay", { enumerable: true, get: function () { return clickoverlay_1.ClickOverlay; } });
var adskipbutton_1 = require("./components/adskipbutton");
Object.defineProperty(exports, "AdSkipButton", { enumerable: true, get: function () { return adskipbutton_1.AdSkipButton; } });
var admessagelabel_1 = require("./components/admessagelabel");
Object.defineProperty(exports, "AdMessageLabel", { enumerable: true, get: function () { return admessagelabel_1.AdMessageLabel; } });
var adclickoverlay_1 = require("./components/adclickoverlay");
Object.defineProperty(exports, "AdClickOverlay", { enumerable: true, get: function () { return adclickoverlay_1.AdClickOverlay; } });
var playbackspeedselectbox_1 = require("./components/playbackspeedselectbox");
Object.defineProperty(exports, "PlaybackSpeedSelectBox", { enumerable: true, get: function () { return playbackspeedselectbox_1.PlaybackSpeedSelectBox; } });
var hugereplaybutton_1 = require("./components/hugereplaybutton");
Object.defineProperty(exports, "HugeReplayButton", { enumerable: true, get: function () { return hugereplaybutton_1.HugeReplayButton; } });
var bufferingoverlay_1 = require("./components/bufferingoverlay");
Object.defineProperty(exports, "BufferingOverlay", { enumerable: true, get: function () { return bufferingoverlay_1.BufferingOverlay; } });
var castuicontainer_1 = require("./components/castuicontainer");
Object.defineProperty(exports, "CastUIContainer", { enumerable: true, get: function () { return castuicontainer_1.CastUIContainer; } });
var playbacktoggleoverlay_1 = require("./components/playbacktoggleoverlay");
Object.defineProperty(exports, "PlaybackToggleOverlay", { enumerable: true, get: function () { return playbacktoggleoverlay_1.PlaybackToggleOverlay; } });
var closebutton_1 = require("./components/closebutton");
Object.defineProperty(exports, "CloseButton", { enumerable: true, get: function () { return closebutton_1.CloseButton; } });
var metadatalabel_1 = require("./components/metadatalabel");
Object.defineProperty(exports, "MetadataLabel", { enumerable: true, get: function () { return metadatalabel_1.MetadataLabel; } });
Object.defineProperty(exports, "MetadataLabelContent", { enumerable: true, get: function () { return metadatalabel_1.MetadataLabelContent; } });
var airplaytogglebutton_1 = require("./components/airplaytogglebutton");
Object.defineProperty(exports, "AirPlayToggleButton", { enumerable: true, get: function () { return airplaytogglebutton_1.AirPlayToggleButton; } });
var volumeslider_1 = require("./components/volumeslider");
Object.defineProperty(exports, "VolumeSlider", { enumerable: true, get: function () { return volumeslider_1.VolumeSlider; } });
var pictureinpicturetogglebutton_1 = require("./components/pictureinpicturetogglebutton");
Object.defineProperty(exports, "PictureInPictureToggleButton", { enumerable: true, get: function () { return pictureinpicturetogglebutton_1.PictureInPictureToggleButton; } });
var spacer_1 = require("./components/spacer");
Object.defineProperty(exports, "Spacer", { enumerable: true, get: function () { return spacer_1.Spacer; } });
var backgroundcolorselectbox_1 = require("./components/subtitlesettings/backgroundcolorselectbox");
Object.defineProperty(exports, "BackgroundColorSelectBox", { enumerable: true, get: function () { return backgroundcolorselectbox_1.BackgroundColorSelectBox; } });
var backgroundopacityselectbox_1 = require("./components/subtitlesettings/backgroundopacityselectbox");
Object.defineProperty(exports, "BackgroundOpacitySelectBox", { enumerable: true, get: function () { return backgroundopacityselectbox_1.BackgroundOpacitySelectBox; } });
var characteredgeselectbox_1 = require("./components/subtitlesettings/characteredgeselectbox");
Object.defineProperty(exports, "CharacterEdgeSelectBox", { enumerable: true, get: function () { return characteredgeselectbox_1.CharacterEdgeSelectBox; } });
var fontcolorselectbox_1 = require("./components/subtitlesettings/fontcolorselectbox");
Object.defineProperty(exports, "FontColorSelectBox", { enumerable: true, get: function () { return fontcolorselectbox_1.FontColorSelectBox; } });
var fontfamilyselectbox_1 = require("./components/subtitlesettings/fontfamilyselectbox");
Object.defineProperty(exports, "FontFamilySelectBox", { enumerable: true, get: function () { return fontfamilyselectbox_1.FontFamilySelectBox; } });
var fontopacityselectbox_1 = require("./components/subtitlesettings/fontopacityselectbox");
Object.defineProperty(exports, "FontOpacitySelectBox", { enumerable: true, get: function () { return fontopacityselectbox_1.FontOpacitySelectBox; } });
var fontsizeselectbox_1 = require("./components/subtitlesettings/fontsizeselectbox");
Object.defineProperty(exports, "FontSizeSelectBox", { enumerable: true, get: function () { return fontsizeselectbox_1.FontSizeSelectBox; } });
var subtitlesettingselectbox_1 = require("./components/subtitlesettings/subtitlesettingselectbox");
Object.defineProperty(exports, "SubtitleSettingSelectBox", { enumerable: true, get: function () { return subtitlesettingselectbox_1.SubtitleSettingSelectBox; } });
var subtitlesettingslabel_1 = require("./components/subtitlesettings/subtitlesettingslabel");
Object.defineProperty(exports, "SubtitleSettingsLabel", { enumerable: true, get: function () { return subtitlesettingslabel_1.SubtitleSettingsLabel; } });
var windowcolorselectbox_1 = require("./components/subtitlesettings/windowcolorselectbox");
Object.defineProperty(exports, "WindowColorSelectBox", { enumerable: true, get: function () { return windowcolorselectbox_1.WindowColorSelectBox; } });
var windowopacityselectbox_1 = require("./components/subtitlesettings/windowopacityselectbox");
Object.defineProperty(exports, "WindowOpacitySelectBox", { enumerable: true, get: function () { return windowopacityselectbox_1.WindowOpacitySelectBox; } });
var subtitlesettingsresetbutton_1 = require("./components/subtitlesettings/subtitlesettingsresetbutton");
Object.defineProperty(exports, "SubtitleSettingsResetButton", { enumerable: true, get: function () { return subtitlesettingsresetbutton_1.SubtitleSettingsResetButton; } });
var listbox_1 = require("./components/listbox");
Object.defineProperty(exports, "ListBox", { enumerable: true, get: function () { return listbox_1.ListBox; } });
var subtitlelistbox_1 = require("./components/subtitlelistbox");
Object.defineProperty(exports, "SubtitleListBox", { enumerable: true, get: function () { return subtitlelistbox_1.SubtitleListBox; } });
var audiotracklistbox_1 = require("./components/audiotracklistbox");
Object.defineProperty(exports, "AudioTrackListBox", { enumerable: true, get: function () { return audiotracklistbox_1.AudioTrackListBox; } });
var settingspanelpage_1 = require("./components/settingspanelpage");
Object.defineProperty(exports, "SettingsPanelPage", { enumerable: true, get: function () { return settingspanelpage_1.SettingsPanelPage; } });
var settingspanelpagebackbutton_1 = require("./components/settingspanelpagebackbutton");
Object.defineProperty(exports, "SettingsPanelPageBackButton", { enumerable: true, get: function () { return settingspanelpagebackbutton_1.SettingsPanelPageBackButton; } });
var settingspanelpageopenbutton_1 = require("./components/settingspanelpageopenbutton");
Object.defineProperty(exports, "SettingsPanelPageOpenButton", { enumerable: true, get: function () { return settingspanelpageopenbutton_1.SettingsPanelPageOpenButton; } });
var subtitlesettingspanelpage_1 = require("./components/subtitlesettings/subtitlesettingspanelpage");
Object.defineProperty(exports, "SubtitleSettingsPanelPage", { enumerable: true, get: function () { return subtitlesettingspanelpage_1.SubtitleSettingsPanelPage; } });
var settingspanelitem_1 = require("./components/settingspanelitem");
Object.defineProperty(exports, "SettingsPanelItem", { enumerable: true, get: function () { return settingspanelitem_1.SettingsPanelItem; } });
var replaybutton_1 = require("./components/replaybutton");
Object.defineProperty(exports, "ReplayButton", { enumerable: true, get: function () { return replaybutton_1.ReplayButton; } });
// Object.assign polyfill for ES5/IE9
// https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
if (typeof Object.assign !== 'function') {
    Object.assign = function (target) {
        'use strict';
        if (target == null) {
            throw new TypeError('Cannot convert undefined or null to object');
        }
        target = Object(target);
        for (var index = 1; index < arguments.length; index++) {
            var source = arguments[index];
            if (source != null) {
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
        }
        return target;
    };
}

},{"./arrayutils":6,"./browserutils":8,"./components/adclickoverlay":9,"./components/admessagelabel":10,"./components/adskipbutton":11,"./components/airplaytogglebutton":12,"./components/audioqualityselectbox":13,"./components/audiotracklistbox":14,"./components/audiotrackselectbox":15,"./components/bufferingoverlay":16,"./components/button":17,"./components/caststatusoverlay":18,"./components/casttogglebutton":19,"./components/castuicontainer":20,"./components/clickoverlay":21,"./components/closebutton":22,"./components/component":23,"./components/container":24,"./components/controlbar":25,"./components/errormessageoverlay":26,"./components/fullscreentogglebutton":27,"./components/hugeplaybacktogglebutton":28,"./components/hugereplaybutton":29,"./components/itemselectionlist":30,"./components/label":31,"./components/listbox":32,"./components/metadatalabel":34,"./components/pictureinpicturetogglebutton":35,"./components/playbackspeedselectbox":36,"./components/playbacktimelabel":37,"./components/playbacktogglebutton":38,"./components/playbacktoggleoverlay":39,"./components/recommendationoverlay":40,"./components/replaybutton":41,"./components/seekbar":42,"./components/seekbarlabel":45,"./components/selectbox":46,"./components/settingspanel":47,"./components/settingspanelitem":48,"./components/settingspanelpage":49,"./components/settingspanelpagebackbutton":50,"./components/settingspanelpageopenbutton":52,"./components/settingstogglebutton":53,"./components/spacer":54,"./components/subtitlelistbox":55,"./components/subtitleoverlay":56,"./components/subtitleselectbox":57,"./components/subtitlesettings/backgroundcolorselectbox":58,"./components/subtitlesettings/backgroundopacityselectbox":59,"./components/subtitlesettings/characteredgeselectbox":60,"./components/subtitlesettings/fontcolorselectbox":61,"./components/subtitlesettings/fontfamilyselectbox":62,"./components/subtitlesettings/fontopacityselectbox":63,"./components/subtitlesettings/fontsizeselectbox":64,"./components/subtitlesettings/subtitlesettingselectbox":65,"./components/subtitlesettings/subtitlesettingslabel":66,"./components/subtitlesettings/subtitlesettingspanelpage":68,"./components/subtitlesettings/subtitlesettingsresetbutton":69,"./components/subtitlesettings/windowcolorselectbox":70,"./components/subtitlesettings/windowopacityselectbox":71,"./components/titlebar":73,"./components/togglebutton":74,"./components/uicontainer":76,"./components/videoqualityselectbox":77,"./components/volumecontrolbutton":78,"./components/volumeslider":79,"./components/volumetogglebutton":80,"./components/vrtogglebutton":81,"./components/watermark":82,"./demofactory":83,"./errorutils":85,"./localization/i18n":91,"./playerutils":97,"./spatialnavigation/ListNavigationGroup":98,"./spatialnavigation/navigationgroup":102,"./spatialnavigation/rootnavigationgroup":104,"./spatialnavigation/spatialnavigation":106,"./storageutils":109,"./stringutils":110,"./uifactory":113,"./uimanager":114,"./uiutils":115}],96:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isMobileV3PlayerAPI = exports.MobileV3PlayerEvent = void 0;
var MobileV3PlayerEvent;
(function (MobileV3PlayerEvent) {
    MobileV3PlayerEvent["SourceError"] = "sourceerror";
    MobileV3PlayerEvent["PlayerError"] = "playererror";
    MobileV3PlayerEvent["PlaylistTransition"] = "playlisttransition";
})(MobileV3PlayerEvent = exports.MobileV3PlayerEvent || (exports.MobileV3PlayerEvent = {}));
function isMobileV3PlayerAPI(player) {
    for (var key in MobileV3PlayerEvent) {
        if (MobileV3PlayerEvent.hasOwnProperty(key) && !player.exports.PlayerEvent.hasOwnProperty(key)) {
            return false;
        }
    }
    return true;
}
exports.isMobileV3PlayerAPI = isMobileV3PlayerAPI;

},{}],97:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerUtils = void 0;
var eventdispatcher_1 = require("./eventdispatcher");
var browserutils_1 = require("./browserutils");
var PlayerUtils;
(function (PlayerUtils) {
    var PlayerState;
    (function (PlayerState) {
        PlayerState[PlayerState["Idle"] = 0] = "Idle";
        PlayerState[PlayerState["Prepared"] = 1] = "Prepared";
        PlayerState[PlayerState["Playing"] = 2] = "Playing";
        PlayerState[PlayerState["Paused"] = 3] = "Paused";
        PlayerState[PlayerState["Finished"] = 4] = "Finished";
    })(PlayerState = PlayerUtils.PlayerState || (PlayerUtils.PlayerState = {}));
    function isTimeShiftAvailable(player) {
        return player.isLive() && player.getMaxTimeShift() !== 0;
    }
    PlayerUtils.isTimeShiftAvailable = isTimeShiftAvailable;
    function getState(player) {
        if (player.hasEnded()) {
            return PlayerState.Finished;
        }
        else if (player.isPlaying()) {
            return PlayerState.Playing;
        }
        else if (player.isPaused()) {
            return PlayerState.Paused;
        }
        else if (player.getSource() != null) {
            return PlayerState.Prepared;
        }
        else {
            return PlayerState.Idle;
        }
    }
    PlayerUtils.getState = getState;
    /**
     * Returns the currentTime - seekableRange.start. This ensures a user-friendly currentTime after a live stream
     * transitioned to VoD.
     * @param player
     */
    function getCurrentTimeRelativeToSeekableRange(player) {
        var currentTime = player.getCurrentTime();
        if (player.isLive()) {
            return currentTime;
        }
        var seekableRangeStart = PlayerUtils.getSeekableRangeStart(player, 0);
        return currentTime - seekableRangeStart;
    }
    PlayerUtils.getCurrentTimeRelativeToSeekableRange = getCurrentTimeRelativeToSeekableRange;
    /**
     * Returns the start value of the seekable range or the defaultValue if no seekableRange is present.
     * For now this happens only in combination with Mobile SDKs.
     *
     * TODO: remove this function in next major release
     *
     * @param player
     * @param defaultValue
     */
    function getSeekableRangeStart(player, defaultValue) {
        if (defaultValue === void 0) { defaultValue = 0; }
        return player.getSeekableRange() && player.getSeekableRange().start || defaultValue;
    }
    PlayerUtils.getSeekableRangeStart = getSeekableRangeStart;
    /**
     * Calculates player seekable time range for live.
     * As the player returns `{ start: -1, end: -1 }` for live streams we need to calculate the `seekableRange` based on `maxTimeshift`.
     *
     * @param player
     */
    function getSeekableRangeRespectingLive(player) {
        if (!player.isLive()) {
            return player.getSeekableRange();
        }
        var currentTimeshift = -player.getTimeShift();
        var maxTimeshift = -player.getMaxTimeShift();
        var currentTime = player.getCurrentTime();
        var end = currentTime + (currentTimeshift);
        var start = currentTime - (maxTimeshift - currentTimeshift);
        return { start: start, end: end };
    }
    PlayerUtils.getSeekableRangeRespectingLive = getSeekableRangeRespectingLive;
    var TimeShiftAvailabilityDetector = /** @class */ (function () {
        function TimeShiftAvailabilityDetector(player) {
            var _this = this;
            this.timeShiftAvailabilityChangedEvent = new eventdispatcher_1.EventDispatcher();
            this.player = player;
            this.timeShiftAvailable = undefined;
            var timeShiftDetector = function () {
                _this.detect();
            };
            // Try to detect timeshift availability when source is loaded, which works for DASH streams
            player.on(player.exports.PlayerEvent.SourceLoaded, timeShiftDetector);
            // With HLS/NativePlayer streams, getMaxTimeShift can be 0 before the buffer fills, so we need to additionally
            // check timeshift availability in TimeChanged
            player.on(player.exports.PlayerEvent.TimeChanged, timeShiftDetector);
        }
        TimeShiftAvailabilityDetector.prototype.detect = function () {
            if (this.player.isLive()) {
                var timeShiftAvailableNow = PlayerUtils.isTimeShiftAvailable(this.player);
                // When the availability changes, we fire the event
                if (timeShiftAvailableNow !== this.timeShiftAvailable) {
                    this.timeShiftAvailabilityChangedEvent.dispatch(this.player, { timeShiftAvailable: timeShiftAvailableNow });
                    this.timeShiftAvailable = timeShiftAvailableNow;
                }
            }
        };
        Object.defineProperty(TimeShiftAvailabilityDetector.prototype, "onTimeShiftAvailabilityChanged", {
            get: function () {
                return this.timeShiftAvailabilityChangedEvent.getEvent();
            },
            enumerable: false,
            configurable: true
        });
        return TimeShiftAvailabilityDetector;
    }());
    PlayerUtils.TimeShiftAvailabilityDetector = TimeShiftAvailabilityDetector;
    /**
     * Detects changes of the stream type, i.e. changes of the return value of the player#isLive method.
     * Normally, a stream cannot change its type during playback, it's either VOD or live. Due to bugs on some
     * platforms or browsers, it can still change. It is therefore unreliable to just check #isLive and this detector
     * should be used as a workaround instead.
     *
     * Additionally starting with player v8.19.0 we have the use-case that a live stream changes into a vod.
     * The DurationChanged event indicates this switch.
     *
     * Known cases:
     *
     * - HLS VOD on Android 4.3
     * Video duration is initially 'Infinity' and only gets available after playback starts, so streams are wrongly
     * reported as 'live' before playback (the live-check in the player checks for infinite duration).
     *
     * @deprecated since UI v3.9.0 in combination with player v8.19.0 use PlayerEvent.DurationChanged instead
     *
     * TODO: remove this class in next major release
     */
    var LiveStreamDetector = /** @class */ (function () {
        function LiveStreamDetector(player, uimanager) {
            var _this = this;
            this.liveChangedEvent = new eventdispatcher_1.EventDispatcher();
            this.player = player;
            this.uimanager = uimanager;
            this.live = undefined;
            var liveDetector = function () {
                _this.detect();
            };
            this.uimanager.getConfig().events.onUpdated.subscribe(liveDetector);
            // Re-evaluate when playback starts
            player.on(player.exports.PlayerEvent.Play, liveDetector);
            // HLS live detection workaround for Android:
            // Also re-evaluate during playback, because that is when the live flag might change.
            // (Doing it only in Android Chrome saves unnecessary overhead on other platforms)
            if (browserutils_1.BrowserUtils.isAndroid && browserutils_1.BrowserUtils.isChrome) {
                player.on(player.exports.PlayerEvent.TimeChanged, liveDetector);
            }
            // DurationChanged event was introduced with player v8.19.0
            if (player.exports.PlayerEvent.DurationChanged) {
                player.on(player.exports.PlayerEvent.DurationChanged, liveDetector);
            }
            // Ad video's isLive() might be different than the actual video's isLive().
            player.on(player.exports.PlayerEvent.AdBreakStarted, liveDetector);
            player.on(player.exports.PlayerEvent.AdBreakFinished, liveDetector);
        }
        LiveStreamDetector.prototype.detect = function () {
            var liveNow = this.player.isLive();
            // Compare current to previous live state flag and fire event when it changes. Since we initialize the flag
            // with undefined, there is always at least an initial event fired that tells listeners the live state.
            if (liveNow !== this.live) {
                this.liveChangedEvent.dispatch(this.player, { live: liveNow });
                this.live = liveNow;
            }
        };
        Object.defineProperty(LiveStreamDetector.prototype, "onLiveChanged", {
            get: function () {
                return this.liveChangedEvent.getEvent();
            },
            enumerable: false,
            configurable: true
        });
        return LiveStreamDetector;
    }());
    PlayerUtils.LiveStreamDetector = LiveStreamDetector;
})(PlayerUtils = exports.PlayerUtils || (exports.PlayerUtils = {}));

},{"./browserutils":8,"./eventdispatcher":86}],98:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListNavigationGroup = exports.ListOrientation = void 0;
var navigationgroup_1 = require("./navigationgroup");
var types_1 = require("./types");
var ListOrientation;
(function (ListOrientation) {
    ListOrientation["Horizontal"] = "horizontal";
    ListOrientation["Vertical"] = "vertical";
})(ListOrientation = exports.ListOrientation || (exports.ListOrientation = {}));
var ListNavigationGroup = /** @class */ (function (_super) {
    __extends(ListNavigationGroup, _super);
    function ListNavigationGroup(orientation, container) {
        var components = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            components[_i - 2] = arguments[_i];
        }
        var _this = _super.apply(this, __spreadArray([container], components, false)) || this;
        switch (orientation) {
            case ListOrientation.Vertical:
                _this.listNavigationDirections = [types_1.Direction.UP, types_1.Direction.DOWN];
                break;
            case ListOrientation.Horizontal:
                _this.listNavigationDirections = [types_1.Direction.LEFT, types_1.Direction.RIGHT];
                break;
        }
        return _this;
    }
    ListNavigationGroup.prototype.handleAction = function (action) {
        _super.prototype.handleAction.call(this, action);
        if (action === types_1.Action.SELECT) {
            // close the container when a list entry is selected
            this.handleAction(types_1.Action.BACK);
        }
    };
    ListNavigationGroup.prototype.handleNavigation = function (direction) {
        _super.prototype.handleNavigation.call(this, direction);
        if (!this.listNavigationDirections.includes(direction)) {
            // close the container on navigation inputs that don't align
            // with the orientation of the list
            this.handleAction(types_1.Action.BACK);
        }
    };
    return ListNavigationGroup;
}(navigationgroup_1.NavigationGroup));
exports.ListNavigationGroup = ListNavigationGroup;

},{"./navigationgroup":102,"./types":108}],99:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHtmlElementsFromComponents = void 0;
var container_1 = require("../components/container");
var typeguards_1 = require("./typeguards");
/**
 * Recursively resolves a container and the components contained within them, building a flat list of components.
 *
 * @param container The container to get the contained components from
 */
function resolveAllComponents(container) {
    var childComponents = [];
    container.getComponents().forEach(function (containerOrComponent) {
        if ((0, typeguards_1.isContainer)(containerOrComponent)) {
            childComponents.push.apply(childComponents, resolveAllComponents(containerOrComponent));
        }
        else if ((0, typeguards_1.isComponent)(containerOrComponent)) {
            childComponents.push(containerOrComponent);
        }
    });
    return childComponents;
}
/**
 * Returns the HTML elements associated to the provided component.
 *
 * @param component The component to get the HTML elements from
 */
function toHtmlElement(component) {
    if ((0, typeguards_1.isListBox)(component)) {
        return [].slice.call(component.getDomElement().get()[0].children);
    }
    else {
        return component.getDomElement().get().slice(0, 1);
    }
}
/**
 * Takes the provided list of components and flat-maps them to a list of their respective HTML elements. In case a
 * provided component is a container, the children of that container will be resolved recursively. Ignores components
 * that are hidden.
 *
 * @param components The components to map to HTML elements
 */
function getHtmlElementsFromComponents(components) {
    var htmlElements = [];
    components
        .filter(function (component) { return !component.isHidden(); })
        .forEach(function (component) {
        var elementsToConsider = component instanceof container_1.Container ? resolveAllComponents(component) : [component];
        elementsToConsider.forEach(function (component) {
            htmlElements.push.apply(htmlElements, toHtmlElement(component));
        });
    });
    return htmlElements;
}
exports.getHtmlElementsFromComponents = getHtmlElementsFromComponents;

},{"../components/container":24,"./typeguards":107}],100:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getKeyMapForPlatform = void 0;
var types_1 = require("./types");
var browserutils_1 = require("../browserutils");
var TizenKeyMap = {
    isApplicable: function () { return browserutils_1.BrowserUtils.isTizen; },
    keyCodes: {
        // D-pad Up
        38: types_1.Direction.UP,
        // D-pad Down
        40: types_1.Direction.DOWN,
        // D-pad Left
        37: types_1.Direction.LEFT,
        // D-pad Right
        39: types_1.Direction.RIGHT,
        // D-pad OK
        13: types_1.Action.SELECT,
        // Back
        10009: types_1.Action.BACK,
    },
};
var WebOsKeyMap = {
    isApplicable: function () { return browserutils_1.BrowserUtils.isWebOs; },
    keyCodes: {
        // D-pad Up
        38: types_1.Direction.UP,
        // D-pad Down
        40: types_1.Direction.DOWN,
        // D-pad Left
        37: types_1.Direction.LEFT,
        // D-pad Right
        39: types_1.Direction.RIGHT,
        // D-pad OK
        13: types_1.Action.SELECT,
        // Back
        461: types_1.Action.BACK,
    },
};
var PlayStationKeyMap = {
    isApplicable: function () { return browserutils_1.BrowserUtils.isPlayStation; },
    keyCodes: {
        // D-pad Up
        38: types_1.Direction.UP,
        // D-pad Down
        40: types_1.Direction.DOWN,
        // D-pad Left
        37: types_1.Direction.LEFT,
        // D-pad Right
        39: types_1.Direction.RIGHT,
        // Cross
        13: types_1.Action.SELECT,
        // Circle
        27: types_1.Action.BACK,
    },
};
var AndroidKeyMap = {
    isApplicable: function () { return browserutils_1.BrowserUtils.isAndroid; },
    keyCodes: {
        // D-pad Up
        19: types_1.Direction.UP,
        // D-pad Down
        20: types_1.Direction.DOWN,
        // D-pad Left
        21: types_1.Direction.LEFT,
        // D-pad Right
        22: types_1.Direction.RIGHT,
        // D-pad Center
        23: types_1.Action.SELECT,
        // Enter
        66: types_1.Action.SELECT,
        // Back
        4: types_1.Action.BACK,
    },
};
var HisenseKeyMap = {
    isApplicable: function () { return browserutils_1.BrowserUtils.isHisense; },
    keyCodes: {
        // D-pad Up
        38: types_1.Direction.UP,
        // D-pad Down
        40: types_1.Direction.DOWN,
        // D-pad Left
        37: types_1.Direction.LEFT,
        // D-pad Right
        39: types_1.Direction.RIGHT,
        // OK
        13: types_1.Action.SELECT,
        // Back
        8: types_1.Action.BACK,
    },
};
// Default key map used on desktops
var DefaultKeyMap = {
    // Arrow Up
    38: types_1.Direction.UP,
    // Arrow Down
    40: types_1.Direction.DOWN,
    // Arrow Left
    37: types_1.Direction.LEFT,
    // Arrow Right
    39: types_1.Direction.RIGHT,
    // Enter
    13: types_1.Action.SELECT,
    // Escape
    27: types_1.Action.BACK,
};
/**
 * Returns the matching key map for the current platform.
 */
function getKeyMapForPlatform() {
    var applicableKeyMap = [
        WebOsKeyMap,
        TizenKeyMap,
        PlayStationKeyMap,
        HisenseKeyMap,
        AndroidKeyMap,
    ].find(function (keyMap) { return keyMap.isApplicable(); });
    if (applicableKeyMap) {
        return applicableKeyMap.keyCodes;
    }
    else {
        return DefaultKeyMap;
    }
}
exports.getKeyMapForPlatform = getKeyMapForPlatform;

},{"../browserutils":8,"./types":108}],101:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBoundingRectFromElement = exports.getElementInDirection = void 0;
var types_1 = require("./types");
/**
 * Calculates the length of a vector.
 *
 * @param vector The vector to calculate the length of
 */
function length(vector) {
    return Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));
}
/**
 * Normalizes the given vector.
 *
 * @param vector The vector to normalize
 */
function normalize(vector) {
    var len = length(vector);
    return {
        x: vector.x / len,
        y: vector.y / len,
    };
}
/**
 * Calculates the dot product between 2 vectors.
 *
 * @param a The first vector
 * @param b The second vector
 */
function dotProduct(a, b) {
    return a.x * b.x + a.y * b.y;
}
/**
 * Calculates the distance between the 2 points pointed to by the provided vectors.
 *
 * @param a The first vector
 * @param b The second vector
 */
function distance(a, b) {
    return length({
        x: b.x - a.x,
        y: b.y - a.y,
    });
}
/**
 * Returns a vector that corresponds to the center of the provided element.
 *
 * @param element The element to get the center of
 */
function getElementVector(element) {
    var boundingRect = getBoundingRectFromElement(element);
    return {
        x: boundingRect.x + boundingRect.width / 2,
        y: boundingRect.y + boundingRect.height / 2,
    };
}
/**
 * Returns the angle in degrees between the unit vector pointing in the given {Direction} and the unit vector that
 * points from the current element to another element.
 *
 * @param a The vector of the current element
 * @param b The vector of the other element
 * @param direction The direction to move along
 */
function calculateAngle(a, b, direction) {
    var directionVector = {
        x: (direction === types_1.Direction.LEFT ? -1 : direction === types_1.Direction.RIGHT ? 1 : 0),
        y: (direction === types_1.Direction.UP ? -1 : direction === types_1.Direction.DOWN ? 1 : 0),
    };
    var elementVector = normalize({
        x: b.x - a.x,
        y: b.y - a.y,
    });
    var angleCos = dotProduct(directionVector, elementVector) / (length(directionVector) * length(elementVector));
    return Math.acos(angleCos) * 180 / Math.PI;
}
/**
 * Returns the closest element to the current element when trying to navigate in the provided direction. Returns
 * undefined, if there is not element in the given direction.
 *
 * @param activeElement The currently selected element
 * @param elements The list of all elements that can be navigated to
 * @param direction The direction in which to navigate
 */
function getElementInDirection(activeElement, elements, direction) {
    var _a;
    if (!activeElement)
        return undefined;
    var cutoffAngle = 45;
    var activeElemVector = getElementVector(activeElement);
    return (_a = elements
        // don't take the current element into account
        .filter(function (elem) { return elem !== activeElement; })
        // get the angle between, and distance to any other element from the current element
        .map(function (element) {
        var elementVector = getElementVector(element);
        var dist = distance(activeElemVector, elementVector);
        var angle = calculateAngle(activeElemVector, elementVector, direction);
        return { angle: angle, dist: dist, element: element };
    })
        // filter out any elements that don't align with the direction we're trying to move in
        .filter(function (_a) {
        var angle = _a.angle;
        return angle <= cutoffAngle;
    })
        // sort the resulting elements based on their distance to the current element in ascending order
        .sort(function (_a, _b) {
        var angleA = _a.angle, distA = _a.dist;
        var angleB = _b.angle, distB = _b.dist;
        return (angleA - angleB) + (distA - distB);
    })
        // return the element closest to the current element
        .shift()) === null || _a === void 0 ? void 0 : _a.element;
}
exports.getElementInDirection = getElementInDirection;
/**
 * Returns DOMRect like object containing horizontal X and vertical Y coordinates from and HTMLElement.
 * Handles use-cases for getBoundingClientRect when the return type can be either
 * a ClientRect or DOMRect object type.
 *
 * @param element The currently selected element
 */
function getBoundingRectFromElement(element) {
    var boundingRect = element.getBoundingClientRect();
    if (typeof boundingRect.x !== 'number' && typeof boundingRect.y !== 'number') {
        boundingRect.x = boundingRect.left;
        boundingRect.y = boundingRect.top;
    }
    return boundingRect;
}
exports.getBoundingRectFromElement = getBoundingRectFromElement;

},{"./types":108}],102:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NavigationGroup = void 0;
var navigationalgorithm_1 = require("./navigationalgorithm");
var gethtmlelementsfromcomponents_1 = require("./gethtmlelementsfromcomponents");
var nodeeventsubscriber_1 = require("./nodeeventsubscriber");
var typeguards_1 = require("./typeguards");
var types_1 = require("./types");
/**
 * Used as part of spatial navigation. Groups together different components to which you can navigate to, in a single
 * navigation group.
 *
 * Responsible for finding elements in direction on navigation and for tracking active element inside the group.
 * Triggers blur and focus on element when active element is changed, as well as click on element on `Action.SELECT`.
 * Will call `hideUi()` on passed in container if `Action.BACK` is called.
 */
var NavigationGroup = /** @class */ (function () {
    function NavigationGroup(container) {
        var components = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            components[_i - 1] = arguments[_i];
        }
        this.container = container;
        this.removeElementHoverEventListeners = function () { };
        this.components = components;
        this.eventSubscriber = new nodeeventsubscriber_1.NodeEventSubscriber();
    }
    /**
     * Returns the active HTMLElement.
     */
    NavigationGroup.prototype.getActiveElement = function () {
        return this.activeElement;
    };
    NavigationGroup.prototype.focusElement = function (element) {
        this.blurActiveElement();
        this.activeElement = element;
        this.activeElement.focus();
    };
    NavigationGroup.prototype.blurActiveElement = function () {
        var _a;
        (_a = this.activeElement) === null || _a === void 0 ? void 0 : _a.blur();
    };
    NavigationGroup.prototype.focusFirstElement = function () {
        var element = (0, gethtmlelementsfromcomponents_1.getHtmlElementsFromComponents)(this.components)[0];
        if (element) {
            this.focusElement(element);
        }
    };
    NavigationGroup.prototype.defaultNavigationHandler = function (direction) {
        var targetElement = (0, navigationalgorithm_1.getElementInDirection)(this.activeElement, (0, gethtmlelementsfromcomponents_1.getHtmlElementsFromComponents)(this.components), direction);
        if (targetElement) {
            this.focusElement(targetElement);
        }
    };
    NavigationGroup.prototype.defaultActionHandler = function (action) {
        switch (action) {
            case (types_1.Action.SELECT):
                this.activeElement.click();
                break;
            case (types_1.Action.BACK):
                this.container.hide();
                break;
        }
    };
    NavigationGroup.prototype.handleInput = function (data, defaultHandler, userHandler) {
        var handleDefault = true;
        var preventDefault = function () { return (handleDefault = false); };
        userHandler === null || userHandler === void 0 ? void 0 : userHandler(data, this.activeElement, preventDefault);
        if (handleDefault) {
            defaultHandler.call(this, data);
        }
    };
    /**
     * Handles a navigation event.
     *
     * @param direction The direction of the navigation event
     */
    NavigationGroup.prototype.handleNavigation = function (direction) {
        if (!this.activeElement) {
            // If we do not have an active element, the active element has been disabled by a mouseleave
            // event. We should continue the navigation at the exact place where we left off.
            if (this.activeElementBeforeDisable) {
                this.focusElement(this.activeElementBeforeDisable);
            }
            else {
                this.focusFirstElement();
            }
            return;
        }
        this.handleInput(direction, this.defaultNavigationHandler, this.onNavigation);
    };
    /**
     * Handles an action event.
     *
     * @param action The action of the event
     */
    NavigationGroup.prototype.handleAction = function (action) {
        this.handleInput(action, this.defaultActionHandler, this.onAction);
    };
    /**
     * Disable navigation group
     *
     * Call blur on active element, set as undefined, and track it as element before disable.
     */
    NavigationGroup.prototype.disable = function () {
        if (this.activeElement) {
            this.activeElementBeforeDisable = this.activeElement;
            this.blurActiveElement();
            this.activeElement = undefined;
        }
    };
    /**
     * Enable navigation group
     *
     * Sets active element to either element that was active before disable, or first element of tracked elements.
     * If it is settings panel, it will always focus first element in the list.
     */
    NavigationGroup.prototype.enable = function () {
        if (this.activeElementBeforeDisable && !(0, typeguards_1.isSettingsPanel)(this.container)) {
            this.focusElement(this.activeElementBeforeDisable);
            this.activeElementBeforeDisable = undefined;
        }
        else {
            this.focusFirstElement();
        }
        this.trackElementHover();
    };
    /**
     * Adds event listener for `mouseenter` on tracked elements to ensure tracking of active element will work together
     * in combination of using mouse and key events.
     */
    NavigationGroup.prototype.trackElementHover = function () {
        var _this = this;
        this.removeElementHoverEventListeners();
        var removeEventListenerFunctions = (0, gethtmlelementsfromcomponents_1.getHtmlElementsFromComponents)(this.components).map(function (htmlElem) {
            var enterListener = _this.focusElement.bind(_this, htmlElem);
            var exitListener = function () { return _this.disable(); };
            _this.eventSubscriber.on(htmlElem, 'mouseenter', enterListener);
            _this.eventSubscriber.on(htmlElem, 'mouseleave', exitListener);
            return function () {
                _this.eventSubscriber.off(htmlElem, 'mouseenter', enterListener);
                _this.eventSubscriber.off(htmlElem, 'mouseleave', exitListener);
            };
        });
        this.removeElementHoverEventListeners = function () { return removeEventListenerFunctions.forEach(function (fn) { return fn(); }); };
    };
    /**
     * Dispose of navigation group
     */
    NavigationGroup.prototype.release = function () {
        this.eventSubscriber.release();
        this.activeElement = undefined;
        this.components.splice(0, this.components.length);
        this.removeElementHoverEventListeners();
    };
    return NavigationGroup;
}());
exports.NavigationGroup = NavigationGroup;

},{"./gethtmlelementsfromcomponents":99,"./navigationalgorithm":101,"./nodeeventsubscriber":103,"./typeguards":107,"./types":108}],103:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeEventSubscriber = void 0;
/**
 * Allows to subscribe to Node events.
 */
var NodeEventSubscriber = /** @class */ (function () {
    function NodeEventSubscriber() {
        this.attachedListeners = new Map();
    }
    NodeEventSubscriber.prototype.getEventListenersOfType = function (type) {
        if (!this.attachedListeners.has(type)) {
            this.attachedListeners.set(type, []);
        }
        return this.attachedListeners.get(type);
    };
    /**
     * Adds the given event listener to the node.
     *
     * @param node The node to remove the event listener from
     * @param type The event to listen to
     * @param listener The listener to remove
     * @param options The event listener options
     */
    NodeEventSubscriber.prototype.on = function (node, type, listener, options) {
        node.addEventListener(type, listener, options);
        this.getEventListenersOfType(type).push([node, listener, options]);
    };
    /**
     * Removes the given event listener from the node.
     *
     * @param node The node to attach the event listener to
     * @param type The event to listen to
     * @param listener The listener to add
     * @param options The event listener options
     */
    NodeEventSubscriber.prototype.off = function (node, type, listener, options) {
        var listenersOfType = this.getEventListenersOfType(type);
        var listenerIndex = listenersOfType.findIndex(function (_a) {
            var otherNode = _a[0], otherListener = _a[1], otherOptions = _a[2];
            return otherNode === node && otherListener === listener && otherOptions === options;
        });
        node.removeEventListener(type, listener, options);
        if (listenerIndex > -1) {
            listenersOfType.splice(listenerIndex, 1);
        }
    };
    /**
     * Removes all attached event listeners.
     */
    NodeEventSubscriber.prototype.release = function () {
        var _this = this;
        this.attachedListeners.forEach(function (listenersOfType, type) {
            listenersOfType.forEach(function (_a) {
                var element = _a[0], listener = _a[1], options = _a[2];
                _this.off(element, type, listener, options);
            });
        });
        this.attachedListeners.clear();
    };
    return NodeEventSubscriber;
}());
exports.NodeEventSubscriber = NodeEventSubscriber;

},{}],104:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RootNavigationGroup = void 0;
var navigationgroup_1 = require("./navigationgroup");
var types_1 = require("./types");
/**
 * Extends NavigationGroup and provides additional logic for hiding and showing the UI on the root container.
 */
var RootNavigationGroup = /** @class */ (function (_super) {
    __extends(RootNavigationGroup, _super);
    function RootNavigationGroup(container) {
        var elements = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            elements[_i - 1] = arguments[_i];
        }
        var _this = _super.apply(this, __spreadArray([container], elements, false)) || this;
        _this.container = container;
        return _this;
    }
    RootNavigationGroup.prototype.handleAction = function (action) {
        this.container.showUi();
        _super.prototype.handleAction.call(this, action);
    };
    RootNavigationGroup.prototype.handleNavigation = function (direction) {
        this.container.showUi();
        _super.prototype.handleNavigation.call(this, direction);
    };
    RootNavigationGroup.prototype.defaultActionHandler = function (action) {
        if (action === types_1.Action.BACK) {
            this.container.hideUi();
        }
        else {
            _super.prototype.defaultActionHandler.call(this, action);
        }
    };
    RootNavigationGroup.prototype.release = function () {
        _super.prototype.release.call(this);
    };
    return RootNavigationGroup;
}(navigationgroup_1.NavigationGroup));
exports.RootNavigationGroup = RootNavigationGroup;

},{"./navigationgroup":102,"./types":108}],105:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeekBarHandler = void 0;
var nodeeventsubscriber_1 = require("./nodeeventsubscriber");
var types_1 = require("./types");
var navigationalgorithm_1 = require("./navigationalgorithm");
var DefaultScrubSpeedPercentage = 0.005;
var ScrubSpeedClearInterval = 100;
var ScrubSpeedMultiplier = 1.1;
/**
 * Handles Spatial Navigation interaction with the seek bar. Ensures, that seek operations can be executed and that the
 * scrubbing tooltip is shown as if the user scrubbed using the mouse/touchscreen.
 */
var SeekBarHandler = /** @class */ (function () {
    function SeekBarHandler(rootNavigationGroup) {
        var _this = this;
        this.rootNavigationGroup = rootNavigationGroup;
        this.cursorPosition = { x: 0, y: 0 };
        this.isScrubbing = false;
        this.scrubSpeedPercentage = DefaultScrubSpeedPercentage;
        this.onNavigation = function (direction, target, preventDefault) {
            if (!isSeekBarWrapper(target)) {
                return;
            }
            if (direction === types_1.Direction.UP || direction === types_1.Direction.DOWN) {
                _this.stopSeeking(getSeekBar(target));
                return;
            }
            _this.initializeOrUpdateCursorPosition(target, direction);
            _this.dispatchMouseMoveEvent(getSeekBar(target));
            preventDefault();
        };
        this.onAction = function (action, target, preventDefault) {
            if (!isSeekBarWrapper(target)) {
                return;
            }
            var seekBar = getSeekBar(target);
            if (action === types_1.Action.SELECT && _this.isScrubbing) {
                _this.dispatchMouseClickEvent(seekBar);
                preventDefault();
            }
            else if (action === types_1.Action.BACK) {
                _this.stopSeeking(seekBar);
                preventDefault();
            }
        };
        this.rootNavigationGroup.onAction = this.onAction;
        this.eventSubscriber = new nodeeventsubscriber_1.NodeEventSubscriber();
        this.rootNavigationGroup.onNavigation = this.onNavigation;
    }
    SeekBarHandler.prototype.updateScrubSpeedPercentage = function () {
        var _this = this;
        clearTimeout(this.scrubSpeedResetTimeout);
        this.scrubSpeedPercentage *= ScrubSpeedMultiplier;
        this.scrubSpeedResetTimeout = window.setTimeout(function () { return _this.scrubSpeedPercentage = DefaultScrubSpeedPercentage; }, ScrubSpeedClearInterval);
    };
    SeekBarHandler.prototype.getIncrement = function (direction, seekBarWrapper) {
        this.updateScrubSpeedPercentage();
        var seekBarWidth = seekBarWrapper.getBoundingClientRect().width;
        var increment = seekBarWidth * this.scrubSpeedPercentage;
        return direction === types_1.Direction.RIGHT ? increment : -increment;
    };
    SeekBarHandler.prototype.resetCursorPosition = function () {
        this.cursorPosition.x = 0;
        this.cursorPosition.y = 0;
    };
    SeekBarHandler.prototype.updateCursorPosition = function (direction, seekBarWrapper) {
        this.cursorPosition.x += this.getIncrement(direction, seekBarWrapper);
    };
    SeekBarHandler.prototype.initializeCursorPosition = function (seekBarWrapper) {
        var playbackPositionMarker = getPlaybackPositionMarker(seekBarWrapper);
        var rect = (0, navigationalgorithm_1.getBoundingRectFromElement)(playbackPositionMarker);
        var startX = rect.x + (rect.width / 2);
        var startY = rect.y;
        this.cursorPosition.x = startX;
        this.cursorPosition.y = startY;
    };
    SeekBarHandler.prototype.initializeOrUpdateCursorPosition = function (seekBarWrapper, direction) {
        if (this.isScrubbing) {
            this.updateCursorPosition(direction, seekBarWrapper);
        }
        else {
            this.initializeCursorPosition(seekBarWrapper);
        }
        this.isScrubbing = true;
    };
    SeekBarHandler.prototype.getCursorPositionMouseEventInit = function () {
        return {
            clientX: this.cursorPosition.x,
            clientY: this.cursorPosition.y,
        };
    };
    SeekBarHandler.prototype.dispatchMouseMoveEvent = function (seekBar) {
        seekBar.dispatchEvent(new MouseEvent('mousemove', this.getCursorPositionMouseEventInit()));
    };
    SeekBarHandler.prototype.dispatchMouseClickEvent = function (seekBar) {
        var _this = this;
        var mouseDownHandler = function () {
            var mouseEventInit = _this.getCursorPositionMouseEventInit();
            document.dispatchEvent(new MouseEvent('mouseup', mouseEventInit));
            _this.eventSubscriber.off(seekBar, 'mousedown', mouseDownHandler);
            _this.stopSeeking(seekBar);
        };
        this.eventSubscriber.on(seekBar, 'mousedown', mouseDownHandler);
        seekBar.dispatchEvent(new MouseEvent('mousedown'));
    };
    SeekBarHandler.prototype.stopSeeking = function (seekBar) {
        this.resetCursorPosition();
        this.isScrubbing = false;
        this.dispatchMouseLeaveEvent(seekBar);
    };
    SeekBarHandler.prototype.dispatchMouseLeaveEvent = function (seekBar) {
        seekBar.dispatchEvent(new MouseEvent('mouseleave'));
    };
    /**
     * Releases the SeekBraHandler, making sure all event subscribers are removed.
     */
    SeekBarHandler.prototype.release = function () {
        this.eventSubscriber.release();
        this.rootNavigationGroup.onAction = undefined;
        this.rootNavigationGroup.onNavigation = undefined;
    };
    return SeekBarHandler;
}());
exports.SeekBarHandler = SeekBarHandler;
function isSeekBarWrapper(element) {
    return Array.from(element.classList).findIndex(function (className) { return /-ui-seekbar$/.test(className); }) > -1;
}
function getSeekBar(seekBarWrapper) {
    return seekBarWrapper.children.item(0);
}
function getPlaybackPositionMarker(seekBarWrapper) {
    return seekBarWrapper.querySelector('[class*="seekbar-playbackposition-marker"]');
}

},{"./navigationalgorithm":101,"./nodeeventsubscriber":103,"./types":108}],106:[function(require,module,exports){
"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpatialNavigation = void 0;
var nodeeventsubscriber_1 = require("./nodeeventsubscriber");
var seekbarhandler_1 = require("./seekbarhandler");
var keymap_1 = require("./keymap");
var typeguards_1 = require("./typeguards");
/**
 * SpatialNavigation keeps track of all navigation groups, and updates the active navigation group when visibility
 * changes on group container.
 *
 * It listens to key events, and triggers either handleNavigation or handleAction on the active group.
 * SeekBarHandler will get instantiated with root navigation group and disposed on release of the spatial navigation.
 */
var SpatialNavigation = /** @class */ (function () {
    function SpatialNavigation(rootNavigationGroup) {
        var navigationGroups = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            navigationGroups[_i - 1] = arguments[_i];
        }
        var _this = this;
        this.navigationGroups = [];
        this.onShow = function (group) {
            _this.activeNavigationGroups.push(group);
            _this.updateEnabledNavigationGroup();
        };
        this.onHide = function (group) {
            var groupIndex = _this.activeNavigationGroups.findIndex(function (other) { return other === group; });
            if (groupIndex > -1) {
                group.disable();
                _this.activeNavigationGroups.splice(groupIndex, 1);
                _this.updateEnabledNavigationGroup();
            }
        };
        /**
         * Checks if keyboard event keycode is tracked either as Direction or Action and calls appropriate handler on active
         * navigation group
         *
         * @param e {KeyboardEvent}
         */
        this.handleKeyEvent = function (e) {
            var event = _this.keyMap[getKeyCode(e)];
            var active = _this.getActiveNavigationGroup();
            if (!active || !active.container || active.container.isHidden() || active.container.isDisabled()) {
                return;
            }
            if ((0, typeguards_1.isDirection)(event)) {
                active.handleNavigation(event);
                e.preventDefault();
                e.stopPropagation();
            }
            if ((0, typeguards_1.isAction)(event)) {
                active.handleAction(event);
                e.preventDefault();
                e.stopPropagation();
            }
        };
        this.seekBarHandler = new seekbarhandler_1.SeekBarHandler(rootNavigationGroup);
        this.activeNavigationGroups = [];
        this.unsubscribeVisibilityChangesFns = [];
        this.eventSubscriber = new nodeeventsubscriber_1.NodeEventSubscriber();
        this.navigationGroups = __spreadArray([rootNavigationGroup], navigationGroups, true);
        this.keyMap = (0, keymap_1.getKeyMapForPlatform)();
        this.subscribeToNavigationGroupVisibilityChanges();
        this.attachKeyEventHandler();
        this.enableDefaultNavigationGroup();
    }
    SpatialNavigation.prototype.attachKeyEventHandler = function () {
        this.eventSubscriber.on(document, 'keydown', this.handleKeyEvent, true);
    };
    /**
     * Subscribes to onHide and onShow on all navigation groups containers as Spatial navigation tracks active navigation
     * group based on their container visibility.
     */
    SpatialNavigation.prototype.subscribeToNavigationGroupVisibilityChanges = function () {
        var _this = this;
        this.navigationGroups.forEach(function (group) {
            var onShowHandler = function () { return _this.onShow(group); };
            var onHideHandler = function () { return _this.onHide(group); };
            group.container.onShow.subscribe(onShowHandler);
            group.container.onHide.subscribe(onHideHandler);
            _this.unsubscribeVisibilityChangesFns.push(function () { return group.container.onShow.unsubscribe(onShowHandler); }, function () { return group.container.onHide.unsubscribe(onHideHandler); });
        });
    };
    SpatialNavigation.prototype.unsubscribeFromNavigationGroupVisibilityChanges = function () {
        this.unsubscribeVisibilityChangesFns.forEach(function (unsub) { return unsub(); });
        this.unsubscribeVisibilityChangesFns = [];
    };
    /**
     * It will enable group of which container is currently shown
     * If there are no groups with containers that are currently visible, it will enable root navigation group
     */
    SpatialNavigation.prototype.enableDefaultNavigationGroup = function () {
        var _a;
        var isShown = function (group) { return group.container.isShown(); };
        var groupToEnable = (_a = this.navigationGroups.find(isShown)) !== null && _a !== void 0 ? _a : this.navigationGroups[0];
        if (groupToEnable) {
            this.activeNavigationGroups.push(groupToEnable);
            this.updateEnabledNavigationGroup();
        }
    };
    /**
     * Disables navigation groups that are no longer active and calls enable on last pushed navigation group
     */
    SpatialNavigation.prototype.updateEnabledNavigationGroup = function () {
        var _this = this;
        this.activeNavigationGroups.forEach(function (group, idx) {
            if (idx < _this.activeNavigationGroups.length - 1) {
                group.disable();
            }
            else {
                group.enable();
            }
        });
    };
    /**
     * Returns currently active navigation group
     */
    SpatialNavigation.prototype.getActiveNavigationGroup = function () {
        return this.activeNavigationGroups[this.activeNavigationGroups.length - 1];
    };
    /**
     * Dispose of SpatialNavigation
     *
     * Remove all event handlers, release seekbar handler and release all navigation groups.
     */
    SpatialNavigation.prototype.release = function () {
        this.unsubscribeFromNavigationGroupVisibilityChanges();
        this.eventSubscriber.release();
        this.navigationGroups.forEach(function (group) { return group.release(); });
        this.seekBarHandler.release();
    };
    return SpatialNavigation;
}());
exports.SpatialNavigation = SpatialNavigation;
function getKeyCode(event) {
    return event.keyCode;
}

},{"./keymap":100,"./nodeeventsubscriber":103,"./seekbarhandler":105,"./typeguards":107}],107:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAction = exports.isDirection = exports.isListBox = exports.isContainer = exports.isComponent = exports.isSettingsPanel = void 0;
var component_1 = require("../components/component");
var settingspanel_1 = require("../components/settingspanel");
var container_1 = require("../components/container");
var listbox_1 = require("../components/listbox");
var types_1 = require("./types");
function isSettingsPanel(component) {
    return component instanceof settingspanel_1.SettingsPanel;
}
exports.isSettingsPanel = isSettingsPanel;
function isComponent(obj) {
    return obj !== null && obj !== undefined && obj instanceof component_1.Component;
}
exports.isComponent = isComponent;
function isContainer(obj) {
    return obj !== null && obj !== undefined && obj instanceof container_1.Container;
}
exports.isContainer = isContainer;
function isListBox(obj) {
    return obj instanceof listbox_1.ListBox;
}
exports.isListBox = isListBox;
function isDirection(direction) {
    return typeof direction === 'string' && Object.values(types_1.Direction).includes(direction);
}
exports.isDirection = isDirection;
function isAction(action) {
    return typeof action === 'string' && Object.values(types_1.Action).includes(action);
}
exports.isAction = isAction;

},{"../components/component":23,"../components/container":24,"../components/listbox":32,"../components/settingspanel":47,"./types":108}],108:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Action = exports.Direction = void 0;
var Direction;
(function (Direction) {
    Direction["UP"] = "up";
    Direction["DOWN"] = "down";
    Direction["LEFT"] = "left";
    Direction["RIGHT"] = "right";
})(Direction = exports.Direction || (exports.Direction = {}));
var Action;
(function (Action) {
    Action["SELECT"] = "select";
    Action["BACK"] = "back";
})(Action = exports.Action || (exports.Action = {}));

},{}],109:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageUtils = void 0;
var StorageUtils;
(function (StorageUtils) {
    var hasLocalStorageCache;
    function hasLocalStorage() {
        if (hasLocalStorageCache) {
            return hasLocalStorageCache;
        }
        // hasLocalStorage is used to safely ensure we can use localStorage
        // taken from https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage
        var storage = { length: 0 };
        try {
            storage = window['localStorage'];
            var x = '__storage_test__';
            storage.setItem(x, x);
            storage.removeItem(x);
            hasLocalStorageCache = true;
        }
        catch (e) {
            hasLocalStorageCache = e instanceof DOMException && (
            // everything except Firefox
            e.code === 22 ||
                // Firefox
                e.code === 1014 ||
                // test name field too, because code might not be present
                // everything except Firefox
                e.name === 'QuotaExceededError' ||
                // Firefox
                e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&
                // acknowledge QuotaExceededError only if there's something already stored
                storage.length !== 0;
        }
        return hasLocalStorageCache;
    }
    StorageUtils.hasLocalStorage = hasLocalStorage;
    /**
     * Stores a string item into localStorage.
     * @param key the item's key
     * @param data the item's data
     */
    function setItem(key, data) {
        if (StorageUtils.hasLocalStorage()) {
            window.localStorage.setItem(key, data);
        }
    }
    StorageUtils.setItem = setItem;
    /**
     * Gets an item's string value from the localStorage.
     * @param key the key to look up its associated value
     * @return {string | null} Returns the string if found, null if there is no data stored for the key
     */
    function getItem(key) {
        if (StorageUtils.hasLocalStorage()) {
            return window.localStorage.getItem(key);
        }
        else {
            return null;
        }
    }
    StorageUtils.getItem = getItem;
    /**
     * Stores an object into localStorage. The object will be serialized to JSON. The following types are supported
     * in addition to the default types:
     *  - ColorUtils.Color
     *
     * @param key the key to store the data to
     * @param data the object to store
     */
    function setObject(key, data) {
        if (StorageUtils.hasLocalStorage()) {
            var json = JSON.stringify(data);
            setItem(key, json);
        }
    }
    StorageUtils.setObject = setObject;
    /**
     * Gets an object for the given key from localStorage. The object will be deserialized from JSON. Beside the
     * default types, the following types are supported:
     *  - ColorUtils.Color
     *
     * @param key the key to look up its associated object
     * @return {any} Returns the object if found, null otherwise
     */
    function getObject(key) {
        if (StorageUtils.hasLocalStorage()) {
            var json = getItem(key);
            if (key) {
                var object = JSON.parse(json);
                return object;
            }
        }
        return null;
    }
    StorageUtils.getObject = getObject;
})(StorageUtils = exports.StorageUtils || (exports.StorageUtils = {}));

},{}],110:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringUtils = void 0;
var i18n_1 = require("./localization/i18n");
var StringUtils;
(function (StringUtils) {
    StringUtils.FORMAT_HHMMSS = 'hh:mm:ss';
    StringUtils.FORMAT_MMSS = 'mm:ss';
    /**
     * Formats a number of seconds into a time string with the pattern hh:mm:ss.
     *
     * @param totalSeconds the total number of seconds to format to string
     * @param format the time format to output (default: hh:mm:ss)
     * @returns {string} the formatted time string
     */
    function secondsToTime(totalSeconds, format) {
        if (format === void 0) { format = StringUtils.FORMAT_HHMMSS; }
        var isNegative = totalSeconds < 0;
        if (isNegative) {
            // If the time is negative, we make it positive for the calculation below
            // (else we'd get all negative numbers) and reattach the negative sign later.
            totalSeconds = -totalSeconds;
        }
        // Split into separate time parts
        var hours = Math.floor(totalSeconds / 3600);
        var minutes = Math.floor(totalSeconds / 60) - hours * 60;
        var seconds = Math.floor(totalSeconds) % 60;
        return (isNegative ? '-' : '') + format
            .replace('hh', leftPadWithZeros(hours, 2))
            .replace('mm', leftPadWithZeros(minutes, 2))
            .replace('ss', leftPadWithZeros(seconds, 2));
    }
    StringUtils.secondsToTime = secondsToTime;
    function secondsToText(totalSeconds) {
        var isNegative = totalSeconds < 0;
        if (isNegative) {
            // If the time is negative, we make it positive for the calculation below
            // (else we'd get all negative numbers) and reattach the negative sign later.
            totalSeconds = -totalSeconds;
        }
        // Split into separate time parts
        var hours = Math.floor(totalSeconds / 3600);
        var minutes = Math.floor(totalSeconds / 60) - hours * 60;
        var seconds = Math.floor(totalSeconds) % 60;
        return (isNegative ? '-' : '') +
            (hours !== 0 ? "".concat(leftPadWithZeros(hours, 2), " ").concat(i18n_1.i18n.performLocalization(i18n_1.i18n.getLocalizer('settings.time.hours')), " ") : '') +
            (minutes !== 0 ? "".concat(leftPadWithZeros(minutes, 2), " ").concat(i18n_1.i18n.performLocalization(i18n_1.i18n.getLocalizer('settings.time.minutes')), " ") : '') +
            "".concat(leftPadWithZeros(seconds, 2), " ").concat(i18n_1.i18n.performLocalization(i18n_1.i18n.getLocalizer('settings.time.seconds')));
    }
    StringUtils.secondsToText = secondsToText;
    /**
     * Converts a number to a string and left-pads it with zeros to the specified length.
     * Example: leftPadWithZeros(123, 5) => '00123'
     *
     * @param num the number to convert to string and pad with zeros
     * @param length the desired length of the padded string
     * @returns {string} the padded number as string
     */
    function leftPadWithZeros(num, length) {
        var text = num + '';
        var padding = '0000000000'.substr(0, length - text.length);
        return padding + text;
    }
    /**
     * Fills out placeholders in an ad message.
     *
     * Has the placeholders '{remainingTime[formatString]}', '{playedTime[formatString]}' and
     * '{adDuration[formatString]}', which are replaced by the remaining time until the ad can be skipped, the current
     * time or the ad duration. The format string is optional. If not specified, the placeholder is replaced by the time
     * in seconds. If specified, it must be of the following format:
     * - %d - Inserts the time as an integer.
     * - %0Nd - Inserts the time as an integer with leading zeroes, if the length of the time string is smaller than N.
     * - %f - Inserts the time as a float.
     * - %0Nf - Inserts the time as a float with leading zeroes.
     * - %.Mf - Inserts the time as a float with M decimal places. Can be combined with %0Nf, e.g. %04.2f (the time
     * 10.123 would be printed as 0010.12).
     * - %hh:mm:ss
     * - %mm:ss
     *
     * Examples:
     * - { text: 'Ad: {remainingTime%mm:ss} secs' }
     * An input value of 100 would be displayed as: 'Ad: 01:40 secs'
     * - { text: 'Ad: {remainingTime%f} secs' }
     * An input value of 100 would be displayed as: 'Ad: 100.0 secs'
     *
     * @param adMessage an ad message with optional placeholders to fill
     * @param skipOffset if specified, {remainingTime} will be filled with the remaining time until the ad can be skipped
     * @param player the player to get the time data from
     * @returns {string} the ad message with filled placeholders
     */
    function replaceAdMessagePlaceholders(adMessage, skipOffset, player) {
        var adMessagePlaceholderRegex = new RegExp('\\{(remainingTime|playedTime|adDuration)(}|%((0[1-9]\\d*(\\.\\d+(d|f)|d|f)|\\.\\d+f|d|f)|hh:mm:ss|mm:ss)})', 'g');
        return adMessage.replace(adMessagePlaceholderRegex, function (formatString) {
            var time = 0;
            if (formatString.indexOf('remainingTime') > -1) {
                if (skipOffset) {
                    time = Math.ceil(skipOffset - player.getCurrentTime());
                }
                else {
                    time = player.getDuration() - player.getCurrentTime();
                }
            }
            else if (formatString.indexOf('playedTime') > -1) {
                time = player.getCurrentTime();
            }
            else if (formatString.indexOf('adDuration') > -1) {
                time = player.getDuration();
            }
            return formatNumber(Math.round(time), formatString);
        });
    }
    StringUtils.replaceAdMessagePlaceholders = replaceAdMessagePlaceholders;
    function formatNumber(time, format) {
        var formatStringValidationRegex = /%((0[1-9]\d*(\.\d+(d|f)|d|f)|\.\d+f|d|f)|hh:mm:ss|mm:ss)/;
        var leadingZeroesRegex = /(%0[1-9]\d*)(?=(\.\d+f|f|d))/;
        var decimalPlacesRegex = /\.\d*(?=f)/;
        if (!formatStringValidationRegex.test(format)) {
            // If the format is invalid, we set a default fallback format
            format = '%d';
        }
        // Determine the number of leading zeros
        var leadingZeroes = 0;
        var leadingZeroesMatches = format.match(leadingZeroesRegex);
        if (leadingZeroesMatches) {
            leadingZeroes = parseInt(leadingZeroesMatches[0].substring(2));
        }
        // Determine the number of decimal places
        var numDecimalPlaces = null;
        var decimalPlacesMatches = format.match(decimalPlacesRegex);
        if (decimalPlacesMatches && !isNaN(parseInt(decimalPlacesMatches[0].substring(1)))) {
            numDecimalPlaces = parseInt(decimalPlacesMatches[0].substring(1));
            if (numDecimalPlaces > 20) {
                numDecimalPlaces = 20;
            }
        }
        // Float format
        if (format.indexOf('f') > -1) {
            var timeString = '';
            if (numDecimalPlaces !== null) {
                // Apply fixed number of decimal places
                timeString = time.toFixed(numDecimalPlaces);
            }
            else {
                timeString = '' + time;
            }
            // Apply leading zeros
            if (timeString.indexOf('.') > -1) {
                return leftPadWithZeros(timeString, timeString.length + (leadingZeroes - timeString.indexOf('.')));
            }
            else {
                return leftPadWithZeros(timeString, leadingZeroes);
            }
        }
        // Time format
        else if (format.indexOf(':') > -1) {
            var totalSeconds = Math.ceil(time);
            // hh:mm:ss format
            if (format.indexOf('hh') > -1) {
                return secondsToTime(totalSeconds);
            }
            // mm:ss format
            else {
                var minutes = Math.floor(totalSeconds / 60);
                var seconds = totalSeconds % 60;
                return leftPadWithZeros(minutes, 2) + ':' + leftPadWithZeros(seconds, 2);
            }
        }
        // Integer format
        else {
            return leftPadWithZeros(Math.ceil(time), leadingZeroes);
        }
    }
})(StringUtils = exports.StringUtils || (exports.StringUtils = {}));

},{"./localization/i18n":91}],111:[function(require,module,exports){
"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleSwitchHandler = void 0;
var i18n_1 = require("./localization/i18n");
/**
 * Helper class to handle all subtitle related events
 *
 * This class listens to player events as well as the `ListSelector` event if selection changed
 */
var SubtitleSwitchHandler = exports.SubtitleSwitchHandler = /** @class */ (function () {
    function SubtitleSwitchHandler(player, element, uimanager) {
        var _this = this;
        this.addSubtitle = function (event) {
            var subtitle = event.subtitle;
            if (!_this.listElement.hasItem(subtitle.id)) {
                _this.listElement.addItem(subtitle.id, subtitle.label);
            }
        };
        this.removeSubtitle = function (event) {
            var subtitle = event.subtitle;
            if (_this.listElement.hasItem(subtitle.id)) {
                _this.listElement.removeItem(subtitle.id);
            }
        };
        this.selectCurrentSubtitle = function () {
            if (!_this.player.subtitles) {
                // Subtitles API not available (yet)
                return;
            }
            var currentSubtitle = _this.player.subtitles.list().filter(function (subtitle) { return subtitle.enabled; }).pop();
            _this.listElement.selectItem(currentSubtitle ? currentSubtitle.id : SubtitleSwitchHandler.SUBTITLES_OFF_KEY);
        };
        this.clearSubtitles = function () {
            _this.listElement.clearItems();
        };
        this.refreshSubtitles = function () {
            if (!_this.player.subtitles) {
                // Subtitles API not available (yet)
                return;
            }
            var offListItem = {
                key: SubtitleSwitchHandler.SUBTITLES_OFF_KEY,
                label: i18n_1.i18n.getLocalizer('off'),
            };
            var subtitles = _this.player.subtitles.list();
            var subtitleToListItem = function (subtitle) {
                return { key: subtitle.id, label: subtitle.label };
            };
            _this.listElement.synchronizeItems(__spreadArray([
                offListItem
            ], subtitles.map(subtitleToListItem), true));
            _this.selectCurrentSubtitle();
        };
        this.player = player;
        this.listElement = element;
        this.uimanager = uimanager;
        this.bindSelectionEvent();
        this.bindPlayerEvents();
        this.refreshSubtitles();
    }
    SubtitleSwitchHandler.prototype.bindSelectionEvent = function () {
        var _this = this;
        this.listElement.onItemSelected.subscribe(function (_, value) {
            // TODO add support for multiple concurrent subtitle selections
            if (value === SubtitleSwitchHandler.SUBTITLES_OFF_KEY) {
                var currentSubtitle = _this.player.subtitles.list().filter(function (subtitle) { return subtitle.enabled; }).pop();
                if (currentSubtitle) {
                    _this.player.subtitles.disable(currentSubtitle.id);
                }
            }
            else {
                _this.player.subtitles.enable(value, true);
            }
        });
    };
    SubtitleSwitchHandler.prototype.bindPlayerEvents = function () {
        this.player.on(this.player.exports.PlayerEvent.SubtitleAdded, this.addSubtitle);
        this.player.on(this.player.exports.PlayerEvent.SubtitleEnabled, this.selectCurrentSubtitle);
        this.player.on(this.player.exports.PlayerEvent.SubtitleDisabled, this.selectCurrentSubtitle);
        this.player.on(this.player.exports.PlayerEvent.SubtitleRemoved, this.removeSubtitle);
        // Update subtitles when source goes away
        this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.clearSubtitles);
        // Update subtitles when the period within a source changes
        this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshSubtitles);
        this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshSubtitles);
    };
    SubtitleSwitchHandler.SUBTITLES_OFF_KEY = 'null';
    return SubtitleSwitchHandler;
}());

},{"./localization/i18n":91}],112:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Timeout = void 0;
// TODO change to internal (not exported) class, how to use in other files?
/**
 * Executes a callback after a specified amount of time, optionally repeatedly until stopped.
 */
var Timeout = /** @class */ (function () {
    /**
     * Creates a new timeout callback handler.
     * @param delay the delay in milliseconds after which the callback should be executed
     * @param callback the callback to execute after the delay time
     * @param repeat if true, call the callback repeatedly in delay intervals
     */
    function Timeout(delay, callback, repeat) {
        if (repeat === void 0) { repeat = false; }
        this.delay = delay;
        this.callback = callback;
        this.repeat = repeat;
        this.timeoutOrIntervalId = 0;
        this.active = false;
    }
    /**
     * Starts the timeout and calls the callback when the timeout delay has passed.
     * @returns {Timeout} the current timeout (so the start call can be chained to the constructor)
     */
    Timeout.prototype.start = function () {
        this.reset();
        return this;
    };
    /**
     * Clears the timeout. The callback will not be called if clear is called during the timeout.
     */
    Timeout.prototype.clear = function () {
        this.clearInternal();
    };
    /**
     * Resets the passed timeout delay to zero. Can be used to defer the calling of the callback.
     */
    Timeout.prototype.reset = function () {
        var _this = this;
        this.clearInternal();
        if (this.repeat) {
            this.timeoutOrIntervalId = setInterval(this.callback, this.delay);
        }
        else {
            this.timeoutOrIntervalId = setTimeout(function () {
                _this.active = false;
                _this.callback();
            }, this.delay);
        }
        this.active = true;
    };
    Timeout.prototype.isActive = function () {
        return this.active;
    };
    Timeout.prototype.clearInternal = function () {
        if (this.repeat) {
            clearInterval(this.timeoutOrIntervalId);
        }
        else {
            clearTimeout(this.timeoutOrIntervalId);
        }
        this.active = false;
    };
    return Timeout;
}());
exports.Timeout = Timeout;

},{}],113:[function(require,module,exports){
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UIFactory = void 0;
var gobackbutton_1 = require("./../custom/ts/components/gobackbutton");
var radiomodetogglebutton_1 = require("./../custom/ts/components/radiomode/radiomodetogglebutton");
var playbackjumpoverlay_1 = require("../custom/ts/components/playbackjumpoverlay");
var subtitleoverlay_1 = require("./components/subtitleoverlay");
var settingspanelpage_1 = require("./components/settingspanelpage");
var settingspanelitem_1 = require("./components/settingspanelitem");
var videoqualityselectbox_1 = require("./components/videoqualityselectbox");
var playbackspeedselectbox_1 = require("./components/playbackspeedselectbox");
var audiotrackselectbox_1 = require("./components/audiotrackselectbox");
var audioqualityselectbox_1 = require("./components/audioqualityselectbox");
var settingspanel_1 = require("./components/settingspanel");
var subtitlesettingspanelpage_1 = require("./components/subtitlesettings/subtitlesettingspanelpage");
var settingspanelpageopenbutton_1 = require("./components/settingspanelpageopenbutton");
var subtitlesettingslabel_1 = require("./components/subtitlesettings/subtitlesettingslabel");
var subtitleselectbox_1 = require("./components/subtitleselectbox");
var controlbar_1 = require("./components/controlbar");
var container_1 = require("./components/container");
var playbacktimelabel_1 = require("./components/playbacktimelabel");
var seekbar_1 = require("./components/seekbar");
var seekbarlabel_1 = require("./components/seekbarlabel");
var playbacktogglebutton_1 = require("./components/playbacktogglebutton");
var volumetogglebutton_1 = require("./components/volumetogglebutton");
var volumeslider_1 = require("./components/volumeslider");
var spacer_1 = require("./components/spacer");
var pictureinpicturetogglebutton_1 = require("./components/pictureinpicturetogglebutton");
var airplaytogglebutton_1 = require("./components/airplaytogglebutton");
var casttogglebutton_1 = require("./components/casttogglebutton");
var vrtogglebutton_1 = require("./components/vrtogglebutton");
var settingstogglebutton_1 = require("./components/settingstogglebutton");
var fullscreentogglebutton_1 = require("./components/fullscreentogglebutton");
var uicontainer_1 = require("./components/uicontainer");
var bufferingoverlay_1 = require("./components/bufferingoverlay");
var playbacktoggleoverlay_1 = require("./components/playbacktoggleoverlay");
var caststatusoverlay_1 = require("./components/caststatusoverlay");
var titlebar_1 = require("./components/titlebar");
var recommendationoverlay_1 = require("./components/recommendationoverlay");
var watermark_1 = require("./components/watermark");
var errormessageoverlay_1 = require("./components/errormessageoverlay");
var adclickoverlay_1 = require("./components/adclickoverlay");
var admessagelabel_1 = require("./components/admessagelabel");
var adskipbutton_1 = require("./components/adskipbutton");
var closebutton_1 = require("./components/closebutton");
var metadatalabel_1 = require("./components/metadatalabel");
var playerutils_1 = require("./playerutils");
var label_1 = require("./components/label");
var castuicontainer_1 = require("./components/castuicontainer");
var uimanager_1 = require("./uimanager");
var i18n_1 = require("./localization/i18n");
var subtitlelistbox_1 = require("./components/subtitlelistbox");
var audiotracklistbox_1 = require("./components/audiotracklistbox");
var spatialnavigation_1 = require("./spatialnavigation/spatialnavigation");
var rootnavigationgroup_1 = require("./spatialnavigation/rootnavigationgroup");
var ListNavigationGroup_1 = require("./spatialnavigation/ListNavigationGroup");
var UIFactory;
(function (UIFactory) {
    function buildDefaultUI(player, config) {
        if (config === void 0) { config = {}; }
        return UIFactory.buildModernUI(player, config);
    }
    UIFactory.buildDefaultUI = buildDefaultUI;
    function buildDefaultSmallScreenUI(player, config) {
        if (config === void 0) { config = {}; }
        return UIFactory.buildModernSmallScreenUI(player, config);
    }
    UIFactory.buildDefaultSmallScreenUI = buildDefaultSmallScreenUI;
    function buildDefaultCastReceiverUI(player, config) {
        if (config === void 0) { config = {}; }
        return UIFactory.buildModernCastReceiverUI(player, config);
    }
    UIFactory.buildDefaultCastReceiverUI = buildDefaultCastReceiverUI;
    function buildDefaultTvUI(player, config) {
        if (config === void 0) { config = {}; }
        return UIFactory.buildModernTvUI(player, config);
    }
    UIFactory.buildDefaultTvUI = buildDefaultTvUI;
    function modernUI() {
        var subtitleOverlay = new subtitleoverlay_1.SubtitleOverlay();
        var mainSettingsPanelPage = new settingspanelpage_1.SettingsPanelPage({
            components: [
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.video.quality'), new videoqualityselectbox_1.VideoQualitySelectBox()),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('speed'), new playbackspeedselectbox_1.PlaybackSpeedSelectBox()),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.audio.track'), new audiotrackselectbox_1.AudioTrackSelectBox()),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.audio.quality'), new audioqualityselectbox_1.AudioQualitySelectBox()),
            ],
        });
        var settingsPanel = new settingspanel_1.SettingsPanel({
            components: [
                mainSettingsPanelPage,
            ],
            hidden: true,
        });
        var subtitleSettingsPanelPage = new subtitlesettingspanelpage_1.SubtitleSettingsPanelPage({
            settingsPanel: settingsPanel,
            overlay: subtitleOverlay,
        });
        var subtitleSelectBox = new subtitleselectbox_1.SubtitleSelectBox();
        var subtitleSettingsOpenButton = new settingspanelpageopenbutton_1.SettingsPanelPageOpenButton({
            targetPage: subtitleSettingsPanelPage,
            container: settingsPanel,
            ariaLabel: i18n_1.i18n.getLocalizer('settings.subtitles'),
            text: i18n_1.i18n.getLocalizer('open'),
        });
        mainSettingsPanelPage.addComponent(new settingspanelitem_1.SettingsPanelItem(new subtitlesettingslabel_1.SubtitleSettingsLabel({
            text: i18n_1.i18n.getLocalizer('settings.subtitles'),
            opener: subtitleSettingsOpenButton,
        }), subtitleSelectBox, {
            role: 'menubar',
        }));
        settingsPanel.addComponent(subtitleSettingsPanelPage);
        var controlBar = new controlbar_1.ControlBar({
            components: [
                settingsPanel,
                new container_1.Container({
                    components: [
                        new playbacktimelabel_1.PlaybackTimeLabel({ timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),
                        new seekbar_1.SeekBar({ label: new seekbarlabel_1.SeekBarLabel() }),
                        new playbacktimelabel_1.PlaybackTimeLabel({ timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),
                    ],
                    cssClasses: ['controlbar-top'],
                }),
                new container_1.Container({
                    components: [
                        new playbacktogglebutton_1.PlaybackToggleButton(),
                        new volumetogglebutton_1.VolumeToggleButton(),
                        new volumeslider_1.VolumeSlider(),
                        new spacer_1.Spacer(),
                        new pictureinpicturetogglebutton_1.PictureInPictureToggleButton(),
                        new airplaytogglebutton_1.AirPlayToggleButton(),
                        new casttogglebutton_1.CastToggleButton(),
                        new radiomodetogglebutton_1.RadioModeToggleButton(),
                        new vrtogglebutton_1.VRToggleButton(),
                        new settingstogglebutton_1.SettingsToggleButton({ settingsPanel: settingsPanel }),
                        new fullscreentogglebutton_1.FullscreenToggleButton(),
                    ],
                    cssClasses: ['controlbar-bottom'],
                }),
            ],
        });
        return new uicontainer_1.UIContainer({
            components: [
                subtitleOverlay,
                new bufferingoverlay_1.BufferingOverlay(),
                new playbacktoggleoverlay_1.PlaybackToggleOverlay(),
                new playbackjumpoverlay_1.PlaybackJumpControlsOverlay(),
                new caststatusoverlay_1.CastStatusOverlay(),
                controlBar,
                new titlebar_1.TitleBar(),
                new recommendationoverlay_1.RecommendationOverlay(),
                new watermark_1.Watermark(),
                new errormessageoverlay_1.ErrorMessageOverlay(),
            ],
            hideDelay: 2000,
            hidePlayerStateExceptions: [
                playerutils_1.PlayerUtils.PlayerState.Prepared,
                playerutils_1.PlayerUtils.PlayerState.Paused,
                playerutils_1.PlayerUtils.PlayerState.Finished,
            ],
        });
    }
    UIFactory.modernUI = modernUI;
    function modernAdsUI() {
        return new uicontainer_1.UIContainer({
            components: [
                new bufferingoverlay_1.BufferingOverlay(),
                new adclickoverlay_1.AdClickOverlay(),
                new playbacktoggleoverlay_1.PlaybackToggleOverlay(),
                new container_1.Container({
                    components: [
                        new admessagelabel_1.AdMessageLabel({ text: i18n_1.i18n.getLocalizer('ads.remainingTime') }),
                        new adskipbutton_1.AdSkipButton(),
                    ],
                    cssClass: 'ui-ads-status',
                }),
                new controlbar_1.ControlBar({
                    components: [
                        new container_1.Container({
                            components: [
                                new playbacktogglebutton_1.PlaybackToggleButton(),
                                new volumetogglebutton_1.VolumeToggleButton(),
                                new volumeslider_1.VolumeSlider(),
                                new spacer_1.Spacer(),
                                new fullscreentogglebutton_1.FullscreenToggleButton(),
                            ],
                            cssClasses: ['controlbar-bottom'],
                        }),
                    ],
                }),
            ],
            cssClasses: ['ui-skin-ads'],
            hideDelay: 2000,
            hidePlayerStateExceptions: [
                playerutils_1.PlayerUtils.PlayerState.Prepared,
                playerutils_1.PlayerUtils.PlayerState.Paused,
                playerutils_1.PlayerUtils.PlayerState.Finished,
            ],
        });
    }
    UIFactory.modernAdsUI = modernAdsUI;
    function modernSmallScreenUI() {
        var subtitleOverlay = new subtitleoverlay_1.SubtitleOverlay();
        var mainSettingsPanelPage = new settingspanelpage_1.SettingsPanelPage({
            components: [
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.video.quality'), new videoqualityselectbox_1.VideoQualitySelectBox()),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('speed'), new playbackspeedselectbox_1.PlaybackSpeedSelectBox()),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.audio.track'), new audiotrackselectbox_1.AudioTrackSelectBox()),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.audio.quality'), new audioqualityselectbox_1.AudioQualitySelectBox()),
            ],
        });
        var settingsPanel = new settingspanel_1.SettingsPanel({
            components: [
                mainSettingsPanelPage,
            ],
            hidden: true,
            pageTransitionAnimation: false,
            hideDelay: -1,
        });
        var subtitleSettingsPanelPage = new subtitlesettingspanelpage_1.SubtitleSettingsPanelPage({
            settingsPanel: settingsPanel,
            overlay: subtitleOverlay,
        });
        var subtitleSettingsOpenButton = new settingspanelpageopenbutton_1.SettingsPanelPageOpenButton({
            targetPage: subtitleSettingsPanelPage,
            container: settingsPanel,
            ariaLabel: i18n_1.i18n.getLocalizer('settings.subtitles'),
            text: i18n_1.i18n.getLocalizer('open'),
        });
        var subtitleSelectBox = new subtitleselectbox_1.SubtitleSelectBox();
        mainSettingsPanelPage.addComponent(new settingspanelitem_1.SettingsPanelItem(new subtitlesettingslabel_1.SubtitleSettingsLabel({
            text: i18n_1.i18n.getLocalizer('settings.subtitles'),
            opener: subtitleSettingsOpenButton,
        }), subtitleSelectBox, {
            role: 'menubar',
        }));
        settingsPanel.addComponent(subtitleSettingsPanelPage);
        settingsPanel.addComponent(new closebutton_1.CloseButton({ target: settingsPanel }));
        subtitleSettingsPanelPage.addComponent(new closebutton_1.CloseButton({ target: settingsPanel }));
        var controlBar = new controlbar_1.ControlBar({
            components: [
                new container_1.Container({
                    components: [
                        new playbacktimelabel_1.PlaybackTimeLabel({ timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),
                        new seekbar_1.SeekBar({ label: new seekbarlabel_1.SeekBarLabel() }),
                        new playbacktimelabel_1.PlaybackTimeLabel({ timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),
                        new fullscreentogglebutton_1.FullscreenToggleButton({ cssClasses: ['controlbar-fullscreen-toggle-button'] }),
                    ],
                    cssClasses: ['controlbar-top'],
                }),
            ],
        });
        return new uicontainer_1.UIContainer({
            components: [
                subtitleOverlay,
                new bufferingoverlay_1.BufferingOverlay(),
                new caststatusoverlay_1.CastStatusOverlay(),
                new playbacktoggleoverlay_1.PlaybackToggleOverlay(),
                new playbackjumpoverlay_1.PlaybackJumpControlsOverlay(),
                new recommendationoverlay_1.RecommendationOverlay(),
                controlBar,
                new titlebar_1.TitleBar({
                    components: [
                        new gobackbutton_1.GoBackButton(),
                        new metadatalabel_1.MetadataLabel({ content: metadatalabel_1.MetadataLabelContent.Title }),
                        new casttogglebutton_1.CastToggleButton(),
                        new vrtogglebutton_1.VRToggleButton(),
                        new pictureinpicturetogglebutton_1.PictureInPictureToggleButton(),
                        new airplaytogglebutton_1.AirPlayToggleButton(),
                        new radiomodetogglebutton_1.RadioModeToggleButton(),
                        new settingstogglebutton_1.SettingsToggleButton({ settingsPanel: settingsPanel }),
                    ],
                }),
                settingsPanel,
                new watermark_1.Watermark(),
                new errormessageoverlay_1.ErrorMessageOverlay(),
            ],
            cssClasses: ['ui-skin-smallscreen'],
            hideDelay: 2000,
            hidePlayerStateExceptions: [
                playerutils_1.PlayerUtils.PlayerState.Prepared,
                playerutils_1.PlayerUtils.PlayerState.Paused,
                playerutils_1.PlayerUtils.PlayerState.Finished,
            ],
        });
    }
    UIFactory.modernSmallScreenUI = modernSmallScreenUI;
    function modernSmallScreenAdsUI() {
        return new uicontainer_1.UIContainer({
            components: [
                new bufferingoverlay_1.BufferingOverlay(),
                new adclickoverlay_1.AdClickOverlay(),
                new playbacktoggleoverlay_1.PlaybackToggleOverlay(),
                new titlebar_1.TitleBar({
                    components: [
                        // dummy label with no content to move buttons to the right
                        new label_1.Label({ cssClass: 'label-metadata-title' }),
                        new fullscreentogglebutton_1.FullscreenToggleButton(),
                    ],
                }),
                new container_1.Container({
                    components: [
                        new admessagelabel_1.AdMessageLabel({ text: 'Ad: {remainingTime} secs' }),
                        new adskipbutton_1.AdSkipButton(),
                    ],
                    cssClass: 'ui-ads-status',
                }),
            ],
            cssClasses: ['ui-skin-ads', 'ui-skin-smallscreen'],
            hideDelay: 2000,
            hidePlayerStateExceptions: [
                playerutils_1.PlayerUtils.PlayerState.Prepared,
                playerutils_1.PlayerUtils.PlayerState.Paused,
                playerutils_1.PlayerUtils.PlayerState.Finished,
            ],
        });
    }
    UIFactory.modernSmallScreenAdsUI = modernSmallScreenAdsUI;
    function modernCastReceiverUI() {
        var controlBar = new controlbar_1.ControlBar({
            components: [
                new container_1.Container({
                    components: [
                        new playbacktimelabel_1.PlaybackTimeLabel({ timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),
                        new seekbar_1.SeekBar({ smoothPlaybackPositionUpdateIntervalMs: -1 }),
                        new playbacktimelabel_1.PlaybackTimeLabel({ timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),
                    ],
                    cssClasses: ['controlbar-top'],
                }),
            ],
        });
        return new castuicontainer_1.CastUIContainer({
            components: [
                new subtitleoverlay_1.SubtitleOverlay(),
                new bufferingoverlay_1.BufferingOverlay(),
                new playbacktoggleoverlay_1.PlaybackToggleOverlay(),
                new watermark_1.Watermark(),
                controlBar,
                new titlebar_1.TitleBar({ keepHiddenWithoutMetadata: true }),
                new errormessageoverlay_1.ErrorMessageOverlay(),
            ],
            cssClasses: ['ui-skin-cast-receiver'],
            hideDelay: 2000,
            hidePlayerStateExceptions: [
                playerutils_1.PlayerUtils.PlayerState.Prepared,
                playerutils_1.PlayerUtils.PlayerState.Paused,
                playerutils_1.PlayerUtils.PlayerState.Finished,
            ],
        });
    }
    UIFactory.modernCastReceiverUI = modernCastReceiverUI;
    function buildModernUI(player, config) {
        if (config === void 0) { config = {}; }
        // show smallScreen UI only on mobile/handheld devices
        var smallScreenSwitchWidth = 600;
        return new uimanager_1.UIManager(player, [{
                ui: modernSmallScreenAdsUI(),
                condition: function (context) {
                    return context.isMobile && context.documentWidth < smallScreenSwitchWidth && context.isAd
                        && context.adRequiresUi;
                },
            }, {
                ui: modernAdsUI(),
                condition: function (context) {
                    return context.isAd && context.adRequiresUi;
                },
            }, {
                ui: modernSmallScreenUI(),
                condition: function (context) {
                    return !context.isAd && !context.adRequiresUi && context.isMobile
                        && context.documentWidth < smallScreenSwitchWidth;
                },
            }, {
                ui: modernUI(),
                condition: function (context) {
                    return !context.isAd && !context.adRequiresUi;
                },
            }], config);
    }
    UIFactory.buildModernUI = buildModernUI;
    function buildModernSmallScreenUI(player, config) {
        if (config === void 0) { config = {}; }
        return new uimanager_1.UIManager(player, [{
                ui: modernSmallScreenAdsUI(),
                condition: function (context) {
                    return context.isAd && context.adRequiresUi;
                },
            }, {
                ui: modernSmallScreenUI(),
                condition: function (context) {
                    return !context.isAd && !context.adRequiresUi;
                },
            }], config);
    }
    UIFactory.buildModernSmallScreenUI = buildModernSmallScreenUI;
    function buildModernCastReceiverUI(player, config) {
        if (config === void 0) { config = {}; }
        return new uimanager_1.UIManager(player, modernCastReceiverUI(), config);
    }
    UIFactory.buildModernCastReceiverUI = buildModernCastReceiverUI;
    function buildModernTvUI(player, config) {
        if (config === void 0) { config = {}; }
        return new uimanager_1.UIManager(player, [__assign({}, modernTvUI())], config);
    }
    UIFactory.buildModernTvUI = buildModernTvUI;
    function modernTvUI() {
        var subtitleListBox = new subtitlelistbox_1.SubtitleListBox();
        var subtitleListPanel = new settingspanel_1.SettingsPanel({
            components: [
                new settingspanelpage_1.SettingsPanelPage({
                    components: [
                        new settingspanelitem_1.SettingsPanelItem(null, subtitleListBox),
                    ],
                }),
            ],
            hidden: true,
        });
        var audioTrackListBox = new audiotracklistbox_1.AudioTrackListBox();
        var audioTrackListPanel = new settingspanel_1.SettingsPanel({
            components: [
                new settingspanelpage_1.SettingsPanelPage({
                    components: [
                        new settingspanelitem_1.SettingsPanelItem(null, audioTrackListBox),
                    ],
                }),
            ],
            hidden: true,
        });
        var seekBar = new seekbar_1.SeekBar({ label: new seekbarlabel_1.SeekBarLabel() });
        var playbackToggleOverlay = new playbacktoggleoverlay_1.PlaybackToggleOverlay();
        var subtitleToggleButton = new settingstogglebutton_1.SettingsToggleButton({
            settingsPanel: subtitleListPanel,
            autoHideWhenNoActiveSettings: true,
            cssClass: 'ui-subtitlesettingstogglebutton',
            text: i18n_1.i18n.getLocalizer('settings.subtitles'),
        });
        var audioToggleButton = new settingstogglebutton_1.SettingsToggleButton({
            settingsPanel: audioTrackListPanel,
            autoHideWhenNoActiveSettings: true,
            cssClass: 'ui-audiotracksettingstogglebutton',
            ariaLabel: i18n_1.i18n.getLocalizer('settings.audio.track'),
            text: i18n_1.i18n.getLocalizer('settings.audio.track'),
        });
        var uiContainer = new uicontainer_1.UIContainer({
            components: [
                new subtitleoverlay_1.SubtitleOverlay(),
                new bufferingoverlay_1.BufferingOverlay(),
                playbackToggleOverlay,
                new controlbar_1.ControlBar({
                    components: [
                        new container_1.Container({
                            components: [
                                new playbacktimelabel_1.PlaybackTimeLabel({ timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),
                                seekBar,
                                new playbacktimelabel_1.PlaybackTimeLabel({ timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.RemainingTime, cssClasses: ['text-right'] }),
                            ],
                            cssClasses: ['controlbar-top'],
                        }),
                    ],
                }),
                new titlebar_1.TitleBar({
                    components: [
                        new container_1.Container({
                            components: [
                                new metadatalabel_1.MetadataLabel({ content: metadatalabel_1.MetadataLabelContent.Title }),
                                subtitleToggleButton,
                                audioToggleButton,
                            ],
                            cssClasses: ['ui-titlebar-top'],
                        }),
                        new container_1.Container({
                            components: [
                                new metadatalabel_1.MetadataLabel({ content: metadatalabel_1.MetadataLabelContent.Description }),
                                subtitleListPanel,
                                audioTrackListPanel,
                            ],
                            cssClasses: ['ui-titlebar-bottom'],
                        }),
                    ],
                }),
                new recommendationoverlay_1.RecommendationOverlay(),
                new errormessageoverlay_1.ErrorMessageOverlay(),
            ],
            cssClasses: ['ui-skin-tv'],
            hideDelay: 2000,
            hidePlayerStateExceptions: [
                playerutils_1.PlayerUtils.PlayerState.Prepared,
                playerutils_1.PlayerUtils.PlayerState.Paused,
                playerutils_1.PlayerUtils.PlayerState.Finished,
            ],
        });
        var spatialNavigation = new spatialnavigation_1.SpatialNavigation(new rootnavigationgroup_1.RootNavigationGroup(uiContainer, playbackToggleOverlay, seekBar, audioToggleButton, subtitleToggleButton), new ListNavigationGroup_1.ListNavigationGroup(ListNavigationGroup_1.ListOrientation.Vertical, subtitleListPanel, subtitleListBox), new ListNavigationGroup_1.ListNavigationGroup(ListNavigationGroup_1.ListOrientation.Vertical, audioTrackListPanel, audioTrackListBox));
        return {
            ui: uiContainer,
            spatialNavigation: spatialNavigation,
        };
    }
    UIFactory.modernTvUI = modernTvUI;
})(UIFactory = exports.UIFactory || (exports.UIFactory = {}));

},{"../custom/ts/components/playbackjumpoverlay":3,"./../custom/ts/components/gobackbutton":1,"./../custom/ts/components/radiomode/radiomodetogglebutton":5,"./components/adclickoverlay":9,"./components/admessagelabel":10,"./components/adskipbutton":11,"./components/airplaytogglebutton":12,"./components/audioqualityselectbox":13,"./components/audiotracklistbox":14,"./components/audiotrackselectbox":15,"./components/bufferingoverlay":16,"./components/caststatusoverlay":18,"./components/casttogglebutton":19,"./components/castuicontainer":20,"./components/closebutton":22,"./components/container":24,"./components/controlbar":25,"./components/errormessageoverlay":26,"./components/fullscreentogglebutton":27,"./components/label":31,"./components/metadatalabel":34,"./components/pictureinpicturetogglebutton":35,"./components/playbackspeedselectbox":36,"./components/playbacktimelabel":37,"./components/playbacktogglebutton":38,"./components/playbacktoggleoverlay":39,"./components/recommendationoverlay":40,"./components/seekbar":42,"./components/seekbarlabel":45,"./components/settingspanel":47,"./components/settingspanelitem":48,"./components/settingspanelpage":49,"./components/settingspanelpageopenbutton":52,"./components/settingstogglebutton":53,"./components/spacer":54,"./components/subtitlelistbox":55,"./components/subtitleoverlay":56,"./components/subtitleselectbox":57,"./components/subtitlesettings/subtitlesettingslabel":66,"./components/subtitlesettings/subtitlesettingspanelpage":68,"./components/titlebar":73,"./components/uicontainer":76,"./components/videoqualityselectbox":77,"./components/volumeslider":79,"./components/volumetogglebutton":80,"./components/vrtogglebutton":81,"./components/watermark":82,"./localization/i18n":91,"./playerutils":97,"./spatialnavigation/ListNavigationGroup":98,"./spatialnavigation/rootnavigationgroup":104,"./spatialnavigation/spatialnavigation":106,"./uimanager":114}],114:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerWrapper = exports.UIInstanceManager = exports.UIManager = void 0;
var uicontainer_1 = require("./components/uicontainer");
var dom_1 = require("./dom");
var container_1 = require("./components/container");
var eventdispatcher_1 = require("./eventdispatcher");
var uiutils_1 = require("./uiutils");
var arrayutils_1 = require("./arrayutils");
var browserutils_1 = require("./browserutils");
var volumecontroller_1 = require("./volumecontroller");
var i18n_1 = require("./localization/i18n");
var focusvisibilitytracker_1 = require("./focusvisibilitytracker");
var mobilev3playerapi_1 = require("./mobilev3playerapi");
var UIManager = /** @class */ (function () {
    function UIManager(player, playerUiOrUiVariants, uiconfig) {
        if (uiconfig === void 0) { uiconfig = {}; }
        var _this = this;
        this.events = {
            onUiVariantResolve: new eventdispatcher_1.EventDispatcher(),
            onActiveUiChanged: new eventdispatcher_1.EventDispatcher(),
        };
        if (playerUiOrUiVariants instanceof uicontainer_1.UIContainer) {
            // Single-UI constructor has been called, transform arguments to UIVariant[] signature
            var playerUi = playerUiOrUiVariants;
            var uiVariants = [];
            // Add the default player UI
            uiVariants.push({ ui: playerUi });
            this.uiVariants = uiVariants;
        }
        else {
            // Default constructor (UIVariant[]) has been called
            this.uiVariants = playerUiOrUiVariants;
        }
        this.player = player;
        this.managerPlayerWrapper = new PlayerWrapper(player);
        // ensure that at least the metadata object does exist in the uiconfig
        uiconfig.metadata = uiconfig.metadata ? uiconfig.metadata : {};
        this.config = __assign(__assign({ playbackSpeedSelectionEnabled: true, autoUiVariantResolve: true, disableAutoHideWhenHovered: false, enableSeekPreview: true }, uiconfig), { events: {
                onUpdated: new eventdispatcher_1.EventDispatcher(),
            }, volumeController: new volumecontroller_1.VolumeController(this.managerPlayerWrapper.getPlayer()) });
        /**
         * Gathers configuration data from the UI config and player source config and creates a merged UI config
         * that is used throughout the UI instance.
         */
        var updateConfig = function () {
            var playerSourceConfig = player.getSource() || {};
            _this.config.metadata = JSON.parse(JSON.stringify(uiconfig.metadata || {}));
            // Extract the UI-related config properties from the source config
            var playerSourceUiConfig = {
                metadata: {
                    // TODO move metadata into source.metadata namespace in player v8
                    title: playerSourceConfig.title,
                    description: playerSourceConfig.description,
                    markers: playerSourceConfig.markers,
                },
                recommendations: playerSourceConfig.recommendations,
            };
            // Player source config takes precedence over the UI config, because the config in the source is attached
            // to a source which changes with every player.load, whereas the UI config stays the same for the whole
            // lifetime of the player instance.
            _this.config.metadata.title = playerSourceUiConfig.metadata.title || uiconfig.metadata.title;
            _this.config.metadata.description = playerSourceUiConfig.metadata.description || uiconfig.metadata.description;
            _this.config.metadata.markers = playerSourceUiConfig.metadata.markers || uiconfig.metadata.markers || [];
            _this.config.recommendations = playerSourceUiConfig.recommendations || uiconfig.recommendations || [];
        };
        updateConfig();
        // Update the source configuration when a new source is loaded and dispatch onUpdated
        var updateSource = function () {
            updateConfig();
            _this.config.events.onUpdated.dispatch(_this);
        };
        var wrappedPlayer = this.managerPlayerWrapper.getPlayer();
        wrappedPlayer.on(this.player.exports.PlayerEvent.SourceLoaded, updateSource);
        // The PlaylistTransition event is only available on Mobile v3 for now.
        // This event is fired when a new source becomes active in the player.
        if ((0, mobilev3playerapi_1.isMobileV3PlayerAPI)(wrappedPlayer)) {
            wrappedPlayer.on(mobilev3playerapi_1.MobileV3PlayerEvent.PlaylistTransition, updateSource);
        }
        if (uiconfig.container) {
            // Unfortunately "uiContainerElement = new DOM(config.container)" will not accept the container with
            // string|HTMLElement type directly, although it accepts both types, so we need to spit these two cases up here.
            // TODO check in upcoming TS versions if the container can be passed in directly, or fix the constructor
            this.uiContainerElement = uiconfig.container instanceof HTMLElement ?
                new dom_1.DOM(uiconfig.container) : new dom_1.DOM(uiconfig.container);
        }
        else {
            this.uiContainerElement = new dom_1.DOM(player.getContainer());
        }
        // Create UI instance managers for the UI variants
        // The instance managers map to the corresponding UI variants by their array index
        this.uiInstanceManagers = [];
        var uiVariantsWithoutCondition = [];
        for (var _i = 0, _a = this.uiVariants; _i < _a.length; _i++) {
            var uiVariant = _a[_i];
            if (uiVariant.condition == null) {
                // Collect variants without conditions for error checking
                uiVariantsWithoutCondition.push(uiVariant);
            }
            // Create the instance manager for a UI variant
            this.uiInstanceManagers.push(new InternalUIInstanceManager(player, uiVariant.ui, this.config, uiVariant.spatialNavigation));
        }
        // Make sure that there is only one UI variant without a condition
        // It does not make sense to have multiple variants without condition, because only the first one in the list
        // (the one with the lowest index) will ever be selected.
        if (uiVariantsWithoutCondition.length > 1) {
            throw Error('Too many UIs without a condition: You cannot have more than one default UI');
        }
        // Make sure that the default UI variant, if defined, is at the end of the list (last index)
        // If it comes earlier, the variants with conditions that come afterwards will never be selected because the
        // default variant without a condition always evaluates to 'true'
        if (uiVariantsWithoutCondition.length > 0
            && uiVariantsWithoutCondition[0] !== this.uiVariants[this.uiVariants.length - 1]) {
            throw Error('Invalid UI variant order: the default UI (without condition) must be at the end of the list');
        }
        var adStartedEvent = null; // keep the event stored here during ad playback
        // Dynamically select a UI variant that matches the current UI condition.
        var resolveUiVariant = function (event) {
            // Make sure that the AdStarted event data is persisted through ad playback in case other events happen
            // in the meantime, e.g. player resize. We need to store this data because there is no other way to find out
            // ad details while an ad is playing (in v8.0 at least; from v8.1 there will be ads.getActiveAd()).
            // Existing event data signals that an ad is currently active (instead of ads.isLinearAdActive()).
            if (event != null) {
                switch (event.type) {
                    // The ads UI is shown upon the first AdStarted event. Subsequent AdStarted events within an ad break
                    // will not change the condition context and thus not lead to undesired UI variant resolving.
                    // The ads UI is shown upon AdStarted instead of AdBreakStarted because there can be a loading delay
                    // between these two events in the player, and the AdBreakStarted event does not carry any metadata to
                    // initialize the ads UI, so it would be rendered in an uninitialized state for a certain amount of time.
                    // TODO show ads UI upon AdBreakStarted and display loading overlay between AdBreakStarted and first AdStarted
                    // TODO display loading overlay between AdFinished and next AdStarted
                    case player.exports.PlayerEvent.AdStarted:
                        adStartedEvent = event;
                        break;
                    // The ads UI is hidden only when the ad break is finished, i.e. not on AdFinished events. This way we keep
                    // the ads UI variant active throughout an ad break, as reacting to AdFinished would lead to undesired UI
                    // variant switching between two ads in an ad break, e.g. ads UI -> AdFinished -> content UI ->
                    // AdStarted -> ads UI.
                    case player.exports.PlayerEvent.AdBreakFinished:
                        adStartedEvent = null;
                        // When switching to a variant for the first time, a config.events.onUpdated event is fired to trigger a UI
                        // update of the new variant, because most components subscribe to this event to update themselves. When
                        // switching to the ads UI on the first AdStarted, all UI variants update themselves with the ad data, so
                        // when switching back to the "normal" UI it will carry properties of the ad instead of the main content.
                        // We thus fire this event here to force an UI update with the properties of the main content. This is
                        // basically a hack because the config.events.onUpdated event is abused in many places and not just used
                        // for config updates (e.g. adding a marker to the seekbar).
                        // TODO introduce an event that is fired when the playback content is updated, a switch to/from ads
                        _this.config.events.onUpdated.dispatch(_this);
                        break;
                    // When a new source is loaded during ad playback, there will be no Ad(Break)Finished event
                    case player.exports.PlayerEvent.SourceLoaded:
                    case player.exports.PlayerEvent.SourceUnloaded:
                        adStartedEvent = null;
                        break;
                }
            }
            // Detect if an ad has started
            var isAd = adStartedEvent != null;
            var adRequiresUi = false;
            if (isAd) {
                var ad = adStartedEvent.ad;
                // for now only linear ads can request a UI
                if (ad.isLinear) {
                    var linearAd = ad;
                    adRequiresUi = linearAd.uiConfig && linearAd.uiConfig.requestsUi || false;
                }
            }
            if (adRequiresUi) {
                // we dispatch onUpdated event because if there are multiple adBreaks for same position
                // `Play` and `Playing` events will not be dispatched which will cause `PlaybackButton` state
                // to be out of sync
                _this.config.events.onUpdated.dispatch(_this);
            }
            _this.resolveUiVariant({
                isAd: isAd,
                adRequiresUi: adRequiresUi,
            }, function (context) {
                // If this is an ad UI, we need to relay the saved ON_AD_STARTED event data so ad components can configure
                // themselves for the current ad.
                if (context.isAd) {
                    /* Relay the ON_AD_STARTED event to the ads UI
                     *
                     * Because the ads UI is initialized in the ON_AD_STARTED handler, i.e. when the ON_AD_STARTED event has
                     * already been fired, components in the ads UI that listen for the ON_AD_STARTED event never receive it.
                     * Since this can break functionality of components that rely on this event, we relay the event to the
                     * ads UI components with the following call.
                     */
                    _this.currentUi.getWrappedPlayer().fireEventInUI(_this.player.exports.PlayerEvent.AdStarted, adStartedEvent);
                }
            });
        };
        // Listen to the following events to trigger UI variant resolution
        if (this.config.autoUiVariantResolve) {
            this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.SourceLoaded, resolveUiVariant);
            this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.SourceUnloaded, resolveUiVariant);
            this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.Play, resolveUiVariant);
            this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.Paused, resolveUiVariant);
            this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.AdStarted, resolveUiVariant);
            this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.AdBreakFinished, resolveUiVariant);
            this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.PlayerResized, resolveUiVariant);
            this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.ViewModeChanged, resolveUiVariant);
        }
        this.focusVisibilityTracker = new focusvisibilitytracker_1.FocusVisibilityTracker('bmpui');
        // Initialize the UI
        resolveUiVariant(null);
    }
    /**
     * Exposes i18n.getLocalizer() function
     * @returns {I18nApi.getLocalizer()}
     */
    UIManager.localize = function (key) {
        return i18n_1.i18n.getLocalizer(key);
    };
    /**
     * Provide configuration to support Custom UI languages
     * default language: 'en'
     */
    UIManager.setLocalizationConfig = function (localizationConfig) {
        i18n_1.i18n.setConfig(localizationConfig);
    };
    UIManager.prototype.getConfig = function () {
        return this.config;
    };
    /**
     * Returns the list of UI variants as passed into the constructor of {@link UIManager}.
     * @returns {UIVariant[]} the list of available UI variants
     */
    UIManager.prototype.getUiVariants = function () {
        return this.uiVariants;
    };
    /**
     * Switches to a UI variant from the list returned by {@link getUiVariants}.
     * @param {UIVariant} uiVariant the UI variant to switch to
     * @param {() => void} onShow a callback that is executed just before the new UI variant is shown
     */
    UIManager.prototype.switchToUiVariant = function (uiVariant, onShow) {
        var uiVariantIndex = this.uiVariants.indexOf(uiVariant);
        var previousUi = this.currentUi;
        var nextUi = this.uiInstanceManagers[uiVariantIndex];
        // Determine if the UI variant is changing
        // Only if the UI variant is changing, we need to do some stuff. Else we just leave everything as-is.
        if (nextUi === this.currentUi) {
            return;
            // console.log('switched from ', this.currentUi ? this.currentUi.getUI() : 'none',
            //   ' to ', nextUi ? nextUi.getUI() : 'none');
        }
        // Hide the currently active UI variant
        if (this.currentUi) {
            this.currentUi.getUI().hide();
        }
        // Assign the new UI variant as current UI
        this.currentUi = nextUi;
        // When we switch to a different UI instance, there's some additional stuff to manage. If we do not switch
        // to an instance, we're done here.
        if (this.currentUi == null) {
            return;
        }
        // Add the UI to the DOM (and configure it) the first time it is selected
        if (!this.currentUi.isConfigured()) {
            this.addUi(this.currentUi);
            // ensure that the internal state is ready for the upcoming show call
            if (!this.currentUi.getUI().isHidden()) {
                this.currentUi.getUI().hide();
            }
        }
        if (onShow) {
            onShow();
        }
        this.currentUi.getUI().show();
        this.events.onActiveUiChanged.dispatch(this, { previousUi: previousUi, currentUi: nextUi });
    };
    /**
     * Triggers a UI variant switch as triggered by events when automatic switching is enabled. It allows to overwrite
     * properties of the {@link UIConditionContext}.
     * @param {Partial<UIConditionContext>} context an optional set of properties that overwrite properties of the
     *   automatically determined context
     * @param {(context: UIConditionContext) => void} onShow a callback that is executed just before the new UI variant
     *   is shown (if a switch is happening)
     */
    UIManager.prototype.resolveUiVariant = function (context, onShow) {
        if (context === void 0) { context = {}; }
        // Determine the current context for which the UI variant will be resolved
        var defaultContext = {
            isAd: false,
            adRequiresUi: false,
            isFullscreen: this.player.getViewMode() === this.player.exports.ViewMode.Fullscreen,
            isMobile: browserutils_1.BrowserUtils.isMobile,
            isPlaying: this.player.isPlaying(),
            width: this.uiContainerElement.width(),
            documentWidth: document.body.clientWidth,
        };
        // Overwrite properties of the default context with passed in context properties
        var switchingContext = __assign(__assign({}, defaultContext), context);
        // Fire the event and allow modification of the context before it is used to resolve the UI variant
        this.events.onUiVariantResolve.dispatch(this, switchingContext);
        var nextUiVariant = null;
        // Select new UI variant
        // If no variant condition is fulfilled, we switch to *no* UI
        for (var _i = 0, _a = this.uiVariants; _i < _a.length; _i++) {
            var uiVariant = _a[_i];
            var matchesCondition = uiVariant.condition == null || uiVariant.condition(switchingContext) === true;
            if (nextUiVariant == null && matchesCondition) {
                nextUiVariant = uiVariant;
            }
            else {
                // hide all UIs besides the one which should be active
                uiVariant.ui.hide();
            }
        }
        this.switchToUiVariant(nextUiVariant, function () {
            if (onShow) {
                onShow(switchingContext);
            }
        });
    };
    UIManager.prototype.addUi = function (ui) {
        var dom = ui.getUI().getDomElement();
        var player = ui.getWrappedPlayer();
        ui.configureControls();
        /* Append the UI DOM after configuration to avoid CSS transitions at initialization
         * Example: Components are hidden during configuration and these hides may trigger CSS transitions that are
         * undesirable at this time. */
        this.uiContainerElement.append(dom);
        // When the UI is loaded after a source was loaded, we need to tell the components to initialize themselves
        if (player.getSource()) {
            this.config.events.onUpdated.dispatch(this);
        }
        // Fire onConfigured after UI DOM elements are successfully added. When fired immediately, the DOM elements
        // might not be fully configured and e.g. do not have a size.
        // https://swizec.com/blog/how-to-properly-wait-for-dom-elements-to-show-up-in-modern-browsers/swizec/6663
        if (window.requestAnimationFrame) {
            requestAnimationFrame(function () { ui.onConfigured.dispatch(ui.getUI()); });
        }
        else {
            // IE9 fallback
            setTimeout(function () { ui.onConfigured.dispatch(ui.getUI()); }, 0);
        }
    };
    UIManager.prototype.releaseUi = function (ui) {
        ui.releaseControls();
        var uiContainer = ui.getUI();
        if (uiContainer.hasDomElement()) {
            uiContainer.getDomElement().remove();
        }
        ui.clearEventHandlers();
    };
    UIManager.prototype.release = function () {
        for (var _i = 0, _a = this.uiInstanceManagers; _i < _a.length; _i++) {
            var uiInstanceManager = _a[_i];
            this.releaseUi(uiInstanceManager);
        }
        this.managerPlayerWrapper.clearEventHandlers();
        this.focusVisibilityTracker.release();
    };
    Object.defineProperty(UIManager.prototype, "onUiVariantResolve", {
        /**
         * Fires just before UI variants are about to be resolved and the UI variant is possibly switched. It is fired when
         * the switch is triggered from an automatic switch and when calling {@link resolveUiVariant}.
         * Can be used to modify the {@link UIConditionContext} before resolving is done.
         * @returns {EventDispatcher<UIManager, UIConditionContext>}
         */
        get: function () {
            return this.events.onUiVariantResolve;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIManager.prototype, "onActiveUiChanged", {
        /**
         * Fires after the UIManager has switched to a different UI variant.
         * @returns {EventDispatcher<UIManager, ActiveUiChangedArgs>}
         */
        get: function () {
            return this.events.onActiveUiChanged;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIManager.prototype, "activeUi", {
        /**
         * The current active {@link UIInstanceManager}.
         */
        get: function () {
            return this.currentUi;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns the list of all added markers in undefined order.
     */
    UIManager.prototype.getTimelineMarkers = function () {
        return this.config.metadata.markers;
    };
    /**
     * Adds a marker to the timeline. Does not check for duplicates/overlaps at the `time`.
     */
    UIManager.prototype.addTimelineMarker = function (timelineMarker) {
        this.config.metadata.markers.push(timelineMarker);
        this.config.events.onUpdated.dispatch(this);
    };
    /**
     * Removes a marker from the timeline (by reference) and returns `true` if the marker has
     * been part of the timeline and successfully removed, or `false` if the marker could not
     * be found and thus not removed.
     */
    UIManager.prototype.removeTimelineMarker = function (timelineMarker) {
        if (arrayutils_1.ArrayUtils.remove(this.config.metadata.markers, timelineMarker) === timelineMarker) {
            this.config.events.onUpdated.dispatch(this);
            return true;
        }
        return false;
    };
    return UIManager;
}());
exports.UIManager = UIManager;
/**
 * Encapsulates functionality to manage a UI instance. Used by the {@link UIManager} to manage multiple UI instances.
 */
var UIInstanceManager = /** @class */ (function () {
    function UIInstanceManager(player, ui, config, spatialNavigation) {
        this.events = {
            onConfigured: new eventdispatcher_1.EventDispatcher(),
            onSeek: new eventdispatcher_1.EventDispatcher(),
            onSeekPreview: new eventdispatcher_1.EventDispatcher(),
            onSeeked: new eventdispatcher_1.EventDispatcher(),
            onComponentShow: new eventdispatcher_1.EventDispatcher(),
            onComponentHide: new eventdispatcher_1.EventDispatcher(),
            onControlsShow: new eventdispatcher_1.EventDispatcher(),
            onPreviewControlsHide: new eventdispatcher_1.EventDispatcher(),
            onControlsHide: new eventdispatcher_1.EventDispatcher(),
            onRelease: new eventdispatcher_1.EventDispatcher(),
        };
        this.playerWrapper = new PlayerWrapper(player);
        this.ui = ui;
        this.config = config;
        this.spatialNavigation = spatialNavigation;
    }
    UIInstanceManager.prototype.getConfig = function () {
        return this.config;
    };
    UIInstanceManager.prototype.getUI = function () {
        return this.ui;
    };
    UIInstanceManager.prototype.getPlayer = function () {
        return this.playerWrapper.getPlayer();
    };
    Object.defineProperty(UIInstanceManager.prototype, "onConfigured", {
        /**
         * Fires when the UI is fully configured and added to the DOM.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onConfigured;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onSeek", {
        /**
         * Fires when a seek starts.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onSeek;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onSeekPreview", {
        /**
         * Fires when the seek timeline is scrubbed.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onSeekPreview;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onSeeked", {
        /**
         * Fires when a seek is finished.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onSeeked;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onComponentShow", {
        /**
         * Fires when a component is showing.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onComponentShow;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onComponentHide", {
        /**
         * Fires when a component is hiding.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onComponentHide;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onControlsShow", {
        /**
         * Fires when the UI controls are showing.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onControlsShow;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onPreviewControlsHide", {
        /**
         * Fires before the UI controls are hiding to check if they are allowed to hide.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onPreviewControlsHide;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onControlsHide", {
        /**
         * Fires when the UI controls are hiding.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onControlsHide;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onRelease", {
        /**
         * Fires when the UI controls are released.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onRelease;
        },
        enumerable: false,
        configurable: true
    });
    UIInstanceManager.prototype.clearEventHandlers = function () {
        this.playerWrapper.clearEventHandlers();
        var events = this.events; // avoid TS7017
        for (var event_1 in events) {
            var dispatcher = events[event_1];
            dispatcher.unsubscribeAll();
        }
    };
    return UIInstanceManager;
}());
exports.UIInstanceManager = UIInstanceManager;
/**
 * Extends the {@link UIInstanceManager} for internal use in the {@link UIManager} and provides access to functionality
 * that components receiving a reference to the {@link UIInstanceManager} should not have access to.
 */
var InternalUIInstanceManager = /** @class */ (function (_super) {
    __extends(InternalUIInstanceManager, _super);
    function InternalUIInstanceManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InternalUIInstanceManager.prototype.getWrappedPlayer = function () {
        // TODO find a non-hacky way to provide the WrappedPlayer to the UIManager without exporting it
        // getPlayer() actually returns the WrappedPlayer but its return type is set to Player so the WrappedPlayer does
        // not need to be exported
        return this.getPlayer();
    };
    InternalUIInstanceManager.prototype.configureControls = function () {
        this.configureControlsTree(this.getUI());
        this.configured = true;
    };
    InternalUIInstanceManager.prototype.isConfigured = function () {
        return this.configured;
    };
    InternalUIInstanceManager.prototype.configureControlsTree = function (component) {
        var _this = this;
        var configuredComponents = [];
        uiutils_1.UIUtils.traverseTree(component, function (component) {
            // First, check if we have already configured a component, and throw an error if we did. Multiple configuration
            // of the same component leads to unexpected UI behavior. Also, a component that is in the UI tree multiple
            // times hints at a wrong UI structure.
            // We could just skip configuration in such a case and not throw an exception, but enforcing a clean UI tree
            // seems like the better choice.
            for (var _i = 0, configuredComponents_1 = configuredComponents; _i < configuredComponents_1.length; _i++) {
                var configuredComponent = configuredComponents_1[_i];
                if (configuredComponent === component) {
                    // Write the component to the console to simplify identification of the culprit
                    // (e.g. by inspecting the config)
                    if (console) {
                        console.error('Circular reference in UI tree', component);
                    }
                    // Additionally throw an error, because this case must not happen and leads to unexpected UI behavior.
                    throw Error('Circular reference in UI tree: ' + component.constructor.name);
                }
            }
            component.initialize();
            component.configure(_this.getPlayer(), _this);
            configuredComponents.push(component);
        });
    };
    InternalUIInstanceManager.prototype.releaseControls = function () {
        var _a;
        // Do not call release methods if the components have never been configured; this can result in exceptions
        if (this.configured) {
            this.onRelease.dispatch(this.getUI());
            this.releaseControlsTree(this.getUI());
            this.configured = false;
        }
        (_a = this.spatialNavigation) === null || _a === void 0 ? void 0 : _a.release();
        this.released = true;
    };
    InternalUIInstanceManager.prototype.isReleased = function () {
        return this.released;
    };
    InternalUIInstanceManager.prototype.releaseControlsTree = function (component) {
        component.release();
        if (component instanceof container_1.Container) {
            for (var _i = 0, _a = component.getComponents(); _i < _a.length; _i++) {
                var childComponent = _a[_i];
                this.releaseControlsTree(childComponent);
            }
        }
    };
    InternalUIInstanceManager.prototype.clearEventHandlers = function () {
        _super.prototype.clearEventHandlers.call(this);
    };
    return InternalUIInstanceManager;
}(UIInstanceManager));
/**
 * Wraps the player to track event handlers and provide a simple method to remove all registered event
 * handlers from the player.
 */
var PlayerWrapper = /** @class */ (function () {
    function PlayerWrapper(player) {
        var _this = this;
        this.eventHandlers = {};
        this.player = player;
        // Collect all members of the player (public API methods and properties of the player)
        var objectProtoPropertyNames = Object.getOwnPropertyNames(Object.getPrototypeOf({}));
        var namesToIgnore = __spreadArray(['constructor'], objectProtoPropertyNames, true);
        var members = getAllPropertyNames(player).filter(function (name) { return namesToIgnore.indexOf(name) === -1; });
        // Split the members into methods and properties
        var methods = [];
        var properties = [];
        for (var _i = 0, members_1 = members; _i < members_1.length; _i++) {
            var member = members_1[_i];
            if (typeof player[member] === 'function') {
                methods.push(member);
            }
            else {
                properties.push(member);
            }
        }
        // Create wrapper object
        var wrapper = {};
        var _loop_1 = function (method) {
            wrapper[method] = function () {
                // console.log('called ' + member); // track method calls on the player
                return player[method].apply(player, arguments);
            };
        };
        // Add function wrappers for all API methods that do nothing but calling the base method on the player
        for (var _a = 0, methods_1 = methods; _a < methods_1.length; _a++) {
            var method = methods_1[_a];
            _loop_1(method);
        }
        var _loop_2 = function (property) {
            // Get an eventually existing property descriptor to differentiate between plain properties and properties with
            // getters/setters.
            var propertyDescriptor = (function (target) {
                while (target) {
                    var propertyDescriptor_1 = Object.getOwnPropertyDescriptor(target, property);
                    if (propertyDescriptor_1) {
                        return propertyDescriptor_1;
                    }
                    // Check if the PropertyDescriptor exists on a child prototype in case we have an inheritance of the player
                    target = Object.getPrototypeOf(target);
                }
            })(player);
            // If the property has getters/setters, wrap them accordingly...
            if (propertyDescriptor && (propertyDescriptor.get || propertyDescriptor.set)) {
                Object.defineProperty(wrapper, property, {
                    get: function () { return propertyDescriptor.get.call(player); },
                    set: function (value) { return propertyDescriptor.set.call(player, value); },
                });
            }
            // ... else just transfer the property to the wrapper
            else {
                wrapper[property] = player[property];
            }
        };
        // Add all public properties of the player to the wrapper
        for (var _b = 0, properties_1 = properties; _b < properties_1.length; _b++) {
            var property = properties_1[_b];
            _loop_2(property);
        }
        // Explicitly add a wrapper method for 'on' that adds added event handlers to the event list
        wrapper.on = function (eventType, callback) {
            player.on(eventType, callback);
            if (!_this.eventHandlers[eventType]) {
                _this.eventHandlers[eventType] = [];
            }
            _this.eventHandlers[eventType].push(callback);
            return wrapper;
        };
        // Explicitly add a wrapper method for 'off' that removes removed event handlers from the event list
        wrapper.off = function (eventType, callback) {
            player.off(eventType, callback);
            if (_this.eventHandlers[eventType]) {
                arrayutils_1.ArrayUtils.remove(_this.eventHandlers[eventType], callback);
            }
            return wrapper;
        };
        wrapper.fireEventInUI = function (event, data) {
            if (_this.eventHandlers[event]) { // check if there are handlers for this event registered
                // Extend the data object with default values to convert it to a {@link PlayerEventBase} object.
                var playerEventData = Object.assign({}, {
                    timestamp: Date.now(),
                    type: event,
                    // Add a marker property so the UI can detect UI-internal player events
                    uiSourced: true,
                }, data);
                // Execute the registered callbacks
                for (var _i = 0, _a = _this.eventHandlers[event]; _i < _a.length; _i++) {
                    var callback = _a[_i];
                    callback(playerEventData);
                }
            }
        };
        this.wrapper = wrapper;
    }
    /**
     * Returns a wrapped player object that can be used on place of the normal player object.
     * @returns {WrappedPlayer} a wrapped player
     */
    PlayerWrapper.prototype.getPlayer = function () {
        return this.wrapper;
    };
    /**
     * Clears all registered event handlers from the player that were added through the wrapped player.
     */
    PlayerWrapper.prototype.clearEventHandlers = function () {
        try {
            // Call the player API to check if the instance is still valid or already destroyed.
            // This can be any call throwing the PlayerAPINotAvailableError when the player instance is destroyed.
            this.player.getSource();
        }
        catch (error) {
            if (error instanceof this.player.exports.PlayerAPINotAvailableError) {
                // We have detected that the player instance is already destroyed, so we clear the event handlers to avoid
                // event handler unsubscription attempts (which would result in PlayerAPINotAvailableError errors).
                this.eventHandlers = {};
            }
        }
        for (var eventType in this.eventHandlers) {
            for (var _i = 0, _a = this.eventHandlers[eventType]; _i < _a.length; _i++) {
                var callback = _a[_i];
                this.player.off(eventType, callback);
            }
        }
    };
    return PlayerWrapper;
}());
exports.PlayerWrapper = PlayerWrapper;
function getAllPropertyNames(target) {
    var names = [];
    while (target) {
        var newNames = Object.getOwnPropertyNames(target).filter(function (name) { return names.indexOf(name) === -1; });
        names = names.concat(newNames);
        // go up prototype chain
        target = Object.getPrototypeOf(target);
    }
    return names;
}

},{"./arrayutils":6,"./browserutils":8,"./components/container":24,"./components/uicontainer":76,"./dom":84,"./eventdispatcher":86,"./focusvisibilitytracker":87,"./localization/i18n":91,"./mobilev3playerapi":96,"./uiutils":115,"./volumecontroller":116}],115:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UIUtils = void 0;
var container_1 = require("./components/container");
var UIUtils;
(function (UIUtils) {
    function traverseTree(component, visit) {
        var recursiveTreeWalker = function (component, parent) {
            visit(component, parent);
            // If the current component is a container, visit it's children
            if (component instanceof container_1.Container) {
                for (var _i = 0, _a = component.getComponents(); _i < _a.length; _i++) {
                    var childComponent = _a[_i];
                    recursiveTreeWalker(childComponent, component);
                }
            }
        };
        // Walk and configure the component tree
        recursiveTreeWalker(component);
    }
    UIUtils.traverseTree = traverseTree;
    // From: https://github.com/nfriend/ts-keycode-enum/blob/master/Key.enum.ts
    var KeyCode;
    (function (KeyCode) {
        KeyCode[KeyCode["LeftArrow"] = 37] = "LeftArrow";
        KeyCode[KeyCode["UpArrow"] = 38] = "UpArrow";
        KeyCode[KeyCode["RightArrow"] = 39] = "RightArrow";
        KeyCode[KeyCode["DownArrow"] = 40] = "DownArrow";
        KeyCode[KeyCode["Space"] = 32] = "Space";
        KeyCode[KeyCode["End"] = 35] = "End";
        KeyCode[KeyCode["Home"] = 36] = "Home";
    })(KeyCode = UIUtils.KeyCode || (UIUtils.KeyCode = {}));
})(UIUtils = exports.UIUtils || (exports.UIUtils = {}));

},{"./components/container":24}],116:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeTransition = exports.VolumeController = void 0;
var eventdispatcher_1 = require("./eventdispatcher");
/**
 * Can be used to centrally manage and control the volume and mute state of the player from multiple components.
 */
var VolumeController = exports.VolumeController = /** @class */ (function () {
    function VolumeController(player) {
        var _this = this;
        this.player = player;
        this.events = {
            onChanged: new eventdispatcher_1.EventDispatcher(),
        };
        this.storeVolume();
        var handler = function () {
            _this.onChangedEvent();
        };
        player.on(player.exports.PlayerEvent.SourceLoaded, handler);
        player.on(player.exports.PlayerEvent.VolumeChanged, handler);
        player.on(player.exports.PlayerEvent.Muted, handler);
        player.on(player.exports.PlayerEvent.Unmuted, handler);
    }
    VolumeController.prototype.setVolume = function (volume) {
        this.player.setVolume(volume, VolumeController.issuerName);
    };
    VolumeController.prototype.getVolume = function () {
        return this.player.getVolume();
    };
    VolumeController.prototype.setMuted = function (muted) {
        if (muted) {
            this.player.mute(VolumeController.issuerName);
        }
        else {
            this.player.unmute(VolumeController.issuerName);
        }
    };
    VolumeController.prototype.toggleMuted = function () {
        if (this.isMuted() || this.getVolume() === 0) {
            // Unmuting from the mute or zero-volume state recalls the previously saved volume setting. Setting the
            // volume automatically unmutes the player in v7.
            this.recallVolume();
        }
        else {
            this.setMuted(true);
        }
    };
    VolumeController.prototype.isMuted = function () {
        return this.player.isMuted();
    };
    /**
     * Stores (saves) the current volume so it can later be restored with {@link recallVolume}.
     */
    VolumeController.prototype.storeVolume = function () {
        this.storedVolume = this.getVolume();
    };
    /**
     * Recalls (sets) the volume previously stored with {@link storeVolume}.
     */
    VolumeController.prototype.recallVolume = function () {
        this.setMuted(this.storedVolume === 0);
        this.setVolume(this.storedVolume);
    };
    VolumeController.prototype.startTransition = function () {
        return new VolumeTransition(this);
    };
    VolumeController.prototype.onChangedEvent = function () {
        var playerMuted = this.isMuted();
        var playerVolume = this.getVolume();
        var uiMuted = playerMuted || playerVolume === 0;
        var uiVolume = playerMuted ? 0 : playerVolume;
        this.storeVolume();
        this.events.onChanged.dispatch(this, { volume: uiVolume, muted: uiMuted });
    };
    Object.defineProperty(VolumeController.prototype, "onChanged", {
        /**
         * Gets the event that is fired when the volume settings have changed.
         */
        get: function () {
            return this.events.onChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    VolumeController.issuerName = 'ui-volumecontroller';
    return VolumeController;
}());
var VolumeTransition = /** @class */ (function () {
    function VolumeTransition(controller) {
        this.controller = controller;
        // Store the volume at the beginning of a volume change so we can recall it later in case we set the volume to
        // zero and actually mute the player.
        controller.storeVolume();
    }
    VolumeTransition.prototype.update = function (volume) {
        // Update the volume while transitioning so the user has a "live preview" of the desired target volume
        this.controller.setMuted(false);
        this.controller.setVolume(volume);
    };
    VolumeTransition.prototype.finish = function (volume) {
        if (volume === 0) {
            // When the volume is zero we essentially mute the volume so we recall the volume from the beginning of the
            // transition and mute the player instead. Recalling is necessary to return to the actual audio volume
            // when unmuting.
            // We must first recall the volume and then mute, because recalling sets the volume on the player
            // and setting a player volume > 0 unmutes the player in v7.
            this.controller.recallVolume();
            this.controller.setMuted(true);
        }
        else {
            this.controller.setMuted(false);
            this.controller.setVolume(volume);
            this.controller.storeVolume();
        }
    };
    return VolumeTransition;
}());
exports.VolumeTransition = VolumeTransition;

},{"./eventdispatcher":86}],117:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VttUtils = void 0;
// Our default height of a line
var lineHeight = 28;
// Default relative line height
var lineHeightPercent = 5;
var lineCount = 1;
var defaultLineNumber = 21; // Our default amount of lines
var Direction;
(function (Direction) {
    Direction["Top"] = "top";
    Direction["Bottom"] = "bottom";
    Direction["Left"] = "left";
    Direction["Right"] = "right";
})(Direction || (Direction = {}));
var VttVerticalWriting;
(function (VttVerticalWriting) {
    VttVerticalWriting["GrowingRight"] = "lr";
    VttVerticalWriting["GrowingLeft"] = "rl";
})(VttVerticalWriting || (VttVerticalWriting = {}));
var DirectionPair = new Map([
    [Direction.Top, Direction.Bottom],
    [Direction.Bottom, Direction.Top],
    [Direction.Left, Direction.Right],
    [Direction.Right, Direction.Left],
]);
/**
 * Sets the default standardized styles for the Cue Box
 * https://w3.org/TR/webvtt1/#applying-css-properties
 */
var setDefaultVttStyles = function (cueContainerDom, vtt) {
    if (vtt.region) {
        cueContainerDom.css('position', 'relative');
        cueContainerDom.css('unicode-bidi', 'plaintext');
    }
    else {
        cueContainerDom.css('position', 'absolute');
        cueContainerDom.css('overflow-wrap', 'break-word');
        cueContainerDom.css('overflow', 'hidden');
        cueContainerDom.css('flex-flow', 'column');
    }
    cueContainerDom.css('display', 'inline-flex');
};
/**
 * Align the Cue Box's line
 * https://w3.org/TR/webvtt1/#webvtt-cue-line-alignment
 */
var setVttLineAlign = function (cueContainerDom, _a, direction, relativeCueBoxPosition) {
    var lineAlign = _a.lineAlign;
    switch (lineAlign) {
        case 'center':
            setCssForCenterLineAlign(cueContainerDom, direction, relativeCueBoxPosition);
            break;
        case 'end':
            setCssForEndLineAlign(cueContainerDom, direction, relativeCueBoxPosition);
    }
};
/**
 * Defines the line positioning of the Cue Box
 * https://w3.org/TR/webvtt1/#webvtt-cue-line
 */
var setVttLine = function (cueContainerDom, vtt, direction, subtitleOverLaySize) {
    var overlayReferenceEdge = DirectionPair.get(direction);
    if (vtt.line === 'auto' && vtt.vertical) {
        cueContainerDom.css(overlayReferenceEdge, '0');
        return;
    }
    if (vtt.line === 'auto' && !vtt.vertical) {
        return;
    }
    var relativeLinePosition = parseFloat(vtt.line);
    if (vtt.snapToLines) {
        var targetLine = Number(vtt.line);
        if (targetLine < 0) {
            targetLine = defaultLineNumber + targetLine;
        }
        var lineHeight_1 = subtitleOverLaySize.height / defaultLineNumber;
        var absoluteLinePosition = lineHeight_1 * targetLine;
        relativeLinePosition = (100 * absoluteLinePosition) / subtitleOverLaySize.height;
    }
    if (vtt.lineAlign !== 'end')
        cueContainerDom.css(overlayReferenceEdge, "".concat(relativeLinePosition, "%"));
    setVttLineAlign(cueContainerDom, vtt, direction, relativeLinePosition);
};
/**
 * Defines the writing direction of the Cue Box
 * https://w3.org/TR/webvtt1/#webvtt-cue-writing-direction
 */
var setVttWritingDirectionAndCueBoxPositioning = function (cueContainerDom, vtt, subtitleOverlaySize) {
    switch (vtt.vertical) {
        case '':
            cueContainerDom.css('writing-mode', 'horizontal-tb');
            cueContainerDom.css(Direction.Bottom, '0');
            setVttLine(cueContainerDom, vtt, Direction.Bottom, subtitleOverlaySize);
            break;
        case VttVerticalWriting.GrowingRight:
            setCueBoxPositionForVerticalWriting(cueContainerDom, Direction.Right, vtt, subtitleOverlaySize);
            break;
        case VttVerticalWriting.GrowingLeft:
            setCueBoxPositionForVerticalWriting(cueContainerDom, Direction.Left, vtt, subtitleOverlaySize);
            break;
    }
};
var setCueBoxPositionForVerticalWriting = function (cueContainerDom, direction, vtt, subtitleOverlaySize) {
    var writingMode = direction === Direction.Right ?
        'vertical-lr' : 'vertical-rl';
    cueContainerDom.css('writing-mode', writingMode);
    cueContainerDom.css(Direction.Top, '0');
    setVttLine(cueContainerDom, vtt, direction, subtitleOverlaySize);
};
/**
 * Defines the Cue position alignment
 * https://w3.org/TR/webvtt1/#webvtt-cue-position-alignment
 */
var setVttPositionAlign = function (cueContainerDom, vtt, direction) {
    // https://www.w3.org/TR/webvtt1/#webvtt-cue-position
    if (vtt.position === 'auto') {
        cueContainerDom.css(direction, '0');
    }
    else {
        switch (vtt.positionAlign) {
            case 'line-left':
                cueContainerDom.css(direction, "".concat(vtt.position, "%"));
                cueContainerDom.css(DirectionPair.get(direction), 'auto');
                cueContainerDom.css('justify-content', 'flex-start');
                break;
            case 'center':
                cueContainerDom.css(direction, "".concat(vtt.position - vtt.size / 2, "%"));
                cueContainerDom.css(DirectionPair.get(direction), 'auto');
                cueContainerDom.css('justify-content', 'center');
                break;
            case 'line-right':
                cueContainerDom.css(direction, 'auto');
                cueContainerDom.css(DirectionPair.get(direction), "".concat(100 - vtt.position, "%"));
                cueContainerDom.css('justify-content', 'flex-end');
                break;
            default:
                cueContainerDom.css(direction, "".concat(vtt.position, "%"));
                cueContainerDom.css('justify-content', 'flex-start');
        }
    }
};
var countLines = function (innerHtml) {
    return innerHtml.split('<br />').length;
};
var setCssForCenterLineAlign = function (cueContainerDom, direction, relativeCueBoxPosition) {
    switch (direction) {
        case Direction.Bottom:
            cueContainerDom.css('transform', 'translateY(-50%)');
            break;
        case Direction.Left:
            cueContainerDom.css('transform', 'translateX(50%)');
            break;
        case Direction.Right:
            cueContainerDom.css('transform', 'translateX(-50%)');
            break;
    }
};
var setCssForEndLineAlign = function (cueContainerDom, direction, offset) {
    var opositeToOverlayReferenceEdge = direction;
    cueContainerDom.css(opositeToOverlayReferenceEdge, "".concat(100 - offset, "%"));
};
var VttUtils;
(function (VttUtils) {
    VttUtils.setVttCueBoxStyles = function (cueContainer, subtitleOverlaySize) {
        var vtt = cueContainer.vtt;
        var cueContainerDom = cueContainer.getDomElement();
        setDefaultVttStyles(cueContainerDom, vtt);
        lineCount = countLines(cueContainer.getText());
        setVttWritingDirectionAndCueBoxPositioning(cueContainerDom, vtt, subtitleOverlaySize);
        // https://w3.org/TR/webvtt1/#webvtt-cue-text-alignment
        var textAlign = vtt.align === 'middle' ? 'center' : vtt.align;
        cueContainerDom.css('text-align', textAlign);
        // https://w3.org/TR/webvtt1/#webvtt-cue-size
        var containerSize = vtt.size;
        if (vtt.vertical === '') {
            cueContainerDom.css('width', "".concat(containerSize, "%"));
            setVttPositionAlign(cueContainerDom, vtt, Direction.Left);
        }
        else {
            cueContainerDom.css('height', "".concat(containerSize, "%"));
            setVttPositionAlign(cueContainerDom, vtt, Direction.Top);
        }
    };
    /** https://www.w3.org/TR/webvtt1/#regions
     *  https://www.speechpad.com/captions/webvtt#toc_16
     */
    VttUtils.setVttRegionStyles = function (regionContainer, region, overlaySize) {
        var regionContainerDom = regionContainer.getDomElement();
        var regionPositionX = overlaySize.width * region.viewportAnchorX / 100 - ((overlaySize.width * region.width / 100) * region.regionAnchorX / 100);
        var regionPositionY = overlaySize.height * region.viewportAnchorY / 100 - ((region.lines * lineHeight) * region.regionAnchorY / 100);
        regionContainerDom.css('position', 'absolute');
        regionContainerDom.css('overflow', 'hidden');
        regionContainerDom.css('width', "".concat(region.width, "%"));
        regionContainerDom.css(Direction.Left, "".concat(regionPositionX, "px"));
        regionContainerDom.css(Direction.Right, 'unset');
        regionContainerDom.css(Direction.Top, "".concat(regionPositionY, "px"));
        regionContainerDom.css(Direction.Bottom, 'unset');
        regionContainerDom.css('height', "".concat(region.lines * lineHeight, "px"));
    };
})(VttUtils = exports.VttUtils || (exports.VttUtils = {}));

},{}]},{},[95])(95)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvY3VzdG9tL3RzL2NvbXBvbmVudHMvZ29iYWNrYnV0dG9uLnRzIiwic3JjL2N1c3RvbS90cy9jb21wb25lbnRzL3BsYXliYWNranVtcGJ1dHRvbi50cyIsInNyYy9jdXN0b20vdHMvY29tcG9uZW50cy9wbGF5YmFja2p1bXBvdmVybGF5LnRzIiwic3JjL2N1c3RvbS90cy9jb21wb25lbnRzL3JhZGlvbW9kZS9yYWRpb21vZGVjb250cm9sbGVyLnRzIiwic3JjL2N1c3RvbS90cy9jb21wb25lbnRzL3JhZGlvbW9kZS9yYWRpb21vZGV0b2dnbGVidXR0b24udHMiLCJzcmMvdHMvYXJyYXl1dGlscy50cyIsInNyYy90cy9hdWRpb3RyYWNrdXRpbHMudHMiLCJzcmMvdHMvYnJvd3NlcnV0aWxzLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvYWRjbGlja292ZXJsYXkudHMiLCJzcmMvdHMvY29tcG9uZW50cy9hZG1lc3NhZ2VsYWJlbC50cyIsInNyYy90cy9jb21wb25lbnRzL2Fkc2tpcGJ1dHRvbi50cyIsInNyYy90cy9jb21wb25lbnRzL2FpcnBsYXl0b2dnbGVidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy9hdWRpb3F1YWxpdHlzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9hdWRpb3RyYWNrbGlzdGJveC50cyIsInNyYy90cy9jb21wb25lbnRzL2F1ZGlvdHJhY2tzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9idWZmZXJpbmdvdmVybGF5LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvYnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvY2FzdHN0YXR1c292ZXJsYXkudHMiLCJzcmMvdHMvY29tcG9uZW50cy9jYXN0dG9nZ2xlYnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvY2FzdHVpY29udGFpbmVyLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvY2xpY2tvdmVybGF5LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvY2xvc2VidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy9jb21wb25lbnQudHMiLCJzcmMvdHMvY29tcG9uZW50cy9jb250YWluZXIudHMiLCJzcmMvdHMvY29tcG9uZW50cy9jb250cm9sYmFyLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvZXJyb3JtZXNzYWdlb3ZlcmxheS50cyIsInNyYy90cy9jb21wb25lbnRzL2Z1bGxzY3JlZW50b2dnbGVidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy9odWdlcGxheWJhY2t0b2dnbGVidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy9odWdlcmVwbGF5YnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvaXRlbXNlbGVjdGlvbmxpc3QudHMiLCJzcmMvdHMvY29tcG9uZW50cy9sYWJlbC50cyIsInNyYy90cy9jb21wb25lbnRzL2xpc3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9saXN0c2VsZWN0b3IudHMiLCJzcmMvdHMvY29tcG9uZW50cy9tZXRhZGF0YWxhYmVsLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvcGljdHVyZWlucGljdHVyZXRvZ2dsZWJ1dHRvbi50cyIsInNyYy90cy9jb21wb25lbnRzL3BsYXliYWNrc3BlZWRzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9wbGF5YmFja3RpbWVsYWJlbC50cyIsInNyYy90cy9jb21wb25lbnRzL3BsYXliYWNrdG9nZ2xlYnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvcGxheWJhY2t0b2dnbGVvdmVybGF5LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvcmVjb21tZW5kYXRpb25vdmVybGF5LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvcmVwbGF5YnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc2Vla2Jhci50cyIsInNyYy90cy9jb21wb25lbnRzL3NlZWtiYXJidWZmZXJsZXZlbC50cyIsInNyYy90cy9jb21wb25lbnRzL3NlZWtiYXJjb250cm9sbGVyLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc2Vla2JhcmxhYmVsLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc2VsZWN0Ym94LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc2V0dGluZ3NwYW5lbC50cyIsInNyYy90cy9jb21wb25lbnRzL3NldHRpbmdzcGFuZWxpdGVtLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc2V0dGluZ3NwYW5lbHBhZ2UudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zZXR0aW5nc3BhbmVscGFnZWJhY2tidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy9zZXR0aW5nc3BhbmVscGFnZW5hdmlnYXRvcmJ1dHRvbi50cyIsInNyYy90cy9jb21wb25lbnRzL3NldHRpbmdzcGFuZWxwYWdlb3BlbmJ1dHRvbi50cyIsInNyYy90cy9jb21wb25lbnRzL3NldHRpbmdzdG9nZ2xlYnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc3BhY2VyLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc3VidGl0bGVsaXN0Ym94LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc3VidGl0bGVvdmVybGF5LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc3VidGl0bGVzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL2JhY2tncm91bmRjb2xvcnNlbGVjdGJveC50cyIsInNyYy90cy9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3MvYmFja2dyb3VuZG9wYWNpdHlzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL2NoYXJhY3RlcmVkZ2VzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL2ZvbnRjb2xvcnNlbGVjdGJveC50cyIsInNyYy90cy9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3MvZm9udGZhbWlseXNlbGVjdGJveC50cyIsInNyYy90cy9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3MvZm9udG9wYWNpdHlzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL2ZvbnRzaXplc2VsZWN0Ym94LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc3VidGl0bGVzZXR0aW5ncy9zdWJ0aXRsZXNldHRpbmdzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL3N1YnRpdGxlc2V0dGluZ3NsYWJlbC50cyIsInNyYy90cy9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3Mvc3VidGl0bGVzZXR0aW5nc21hbmFnZXIudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL3N1YnRpdGxlc2V0dGluZ3NwYW5lbHBhZ2UudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL3N1YnRpdGxlc2V0dGluZ3NyZXNldGJ1dHRvbi50cyIsInNyYy90cy9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3Mvd2luZG93Y29sb3JzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL3dpbmRvd29wYWNpdHlzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy90aW1lbGluZW1hcmtlcnNoYW5kbGVyLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvdGl0bGViYXIudHMiLCJzcmMvdHMvY29tcG9uZW50cy90b2dnbGVidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy90dm5vaXNlY2FudmFzLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvdWljb250YWluZXIudHMiLCJzcmMvdHMvY29tcG9uZW50cy92aWRlb3F1YWxpdHlzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy92b2x1bWVjb250cm9sYnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvdm9sdW1lc2xpZGVyLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvdm9sdW1ldG9nZ2xlYnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvdnJ0b2dnbGVidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy93YXRlcm1hcmsudHMiLCJzcmMvdHMvZGVtb2ZhY3RvcnkudHMiLCJzcmMvdHMvZG9tLnRzIiwic3JjL3RzL2Vycm9ydXRpbHMudHMiLCJzcmMvdHMvZXZlbnRkaXNwYXRjaGVyLnRzIiwic3JjL3RzL2ZvY3VzdmlzaWJpbGl0eXRyYWNrZXIudHMiLCJzcmMvdHMvZ3JvdXBwbGF5YmFja2FwaS50cyIsInNyYy90cy9ndWlkLnRzIiwic3JjL3RzL2ltYWdlbG9hZGVyLnRzIiwic3JjL3RzL2xvY2FsaXphdGlvbi9pMThuLnRzIiwic3JjL3RzL2xvY2FsaXphdGlvbi9sYW5ndWFnZXMvZGUuanNvbiIsInNyYy90cy9sb2NhbGl6YXRpb24vbGFuZ3VhZ2VzL2VuLmpzb24iLCJzcmMvdHMvbG9jYWxpemF0aW9uL2xhbmd1YWdlcy9lcy5qc29uIiwic3JjL3RzL21haW4udHMiLCJzcmMvdHMvbW9iaWxldjNwbGF5ZXJhcGkudHMiLCJzcmMvdHMvcGxheWVydXRpbHMudHMiLCJzcmMvdHMvc3BhdGlhbG5hdmlnYXRpb24vTGlzdE5hdmlnYXRpb25Hcm91cC50cyIsInNyYy90cy9zcGF0aWFsbmF2aWdhdGlvbi9nZXRodG1sZWxlbWVudHNmcm9tY29tcG9uZW50cy50cyIsInNyYy90cy9zcGF0aWFsbmF2aWdhdGlvbi9rZXltYXAudHMiLCJzcmMvdHMvc3BhdGlhbG5hdmlnYXRpb24vbmF2aWdhdGlvbmFsZ29yaXRobS50cyIsInNyYy90cy9zcGF0aWFsbmF2aWdhdGlvbi9uYXZpZ2F0aW9uZ3JvdXAudHMiLCJzcmMvdHMvc3BhdGlhbG5hdmlnYXRpb24vbm9kZWV2ZW50c3Vic2NyaWJlci50cyIsInNyYy90cy9zcGF0aWFsbmF2aWdhdGlvbi9yb290bmF2aWdhdGlvbmdyb3VwLnRzIiwic3JjL3RzL3NwYXRpYWxuYXZpZ2F0aW9uL3NlZWtiYXJoYW5kbGVyLnRzIiwic3JjL3RzL3NwYXRpYWxuYXZpZ2F0aW9uL3NwYXRpYWxuYXZpZ2F0aW9uLnRzIiwic3JjL3RzL3NwYXRpYWxuYXZpZ2F0aW9uL3R5cGVndWFyZHMudHMiLCJzcmMvdHMvc3BhdGlhbG5hdmlnYXRpb24vdHlwZXMudHMiLCJzcmMvdHMvc3RvcmFnZXV0aWxzLnRzIiwic3JjL3RzL3N0cmluZ3V0aWxzLnRzIiwic3JjL3RzL3N1YnRpdGxldXRpbHMudHMiLCJzcmMvdHMvdGltZW91dC50cyIsInNyYy90cy91aWZhY3RvcnkudHMiLCJzcmMvdHMvdWltYW5hZ2VyLnRzIiwic3JjL3RzL3VpdXRpbHMudHMiLCJzcmMvdHMvdm9sdW1lY29udHJvbGxlci50cyIsInNyYy90cy92dHR1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0NBLHdEQUFxRTtBQUtyRTtJQUFrQyxnQ0FBb0I7SUFDcEQsc0JBQVksTUFBeUI7UUFBekIsdUJBQUEsRUFBQSxXQUF5QjtRQUFyQyxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQVNkO1FBUEMsSUFBTSxhQUFhLEdBQWlCO1lBQ2xDLFFBQVEsRUFBRSxpQkFBaUI7WUFDM0IsSUFBSSxFQUFFLFNBQVM7WUFDZixTQUFTLEVBQUUsU0FBUztTQUNyQixDQUFDO1FBRUYsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztJQUNyRSxDQUFDO0lBRUQsZ0NBQVMsR0FBVCxVQUFVLE1BQWlCLEVBQUUsU0FBNEI7UUFBekQsaUJBWUM7UUFYQyxpQkFBTSxTQUFTLFlBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRW5DLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1lBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUV2QyxNQUFNLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2xF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QUFRLENBQUMsQ0FBQztRQUM3QyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFVBQUcsTUFBTSxDQUFDLEtBQUssTUFBRyxDQUFDLENBQUM7UUFDcEQsa0JBQWtCLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsVUFBRyxlQUFlLE9BQUksQ0FBQyxDQUFDO1FBQy9ELGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2pELGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLFVBQUcsZUFBZSxPQUFJLENBQUMsQ0FBQztRQUM5RCxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNsRCxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLFVBQUcsTUFBTSxDQUFDLEtBQUssR0FBRyxVQUFVLE9BQUksQ0FBQyxDQUFDO0lBQ3JFLENBQUMsQ0FBQztBQUNKLENBQUMsRUFqRGdCLFFBQVEsR0FBUixnQkFBUSxLQUFSLGdCQUFRLFFBaUR4QiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJpbXBvcnQgeyBQbGF5ZXJBUEksIFBsYXllckV2ZW50IH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IEJ1dHRvbiwgQnV0dG9uQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vdHMvY29tcG9uZW50cy9idXR0b24nO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi8uLi8uLi90cy91aW1hbmFnZXInO1xuXG5kZWNsYXJlIGNvbnN0IHdpbmRvdzogYW55O1xuXG5leHBvcnQgY2xhc3MgR29CYWNrQnV0dG9uIGV4dGVuZHMgQnV0dG9uPEJ1dHRvbkNvbmZpZz4ge1xuICBjb25zdHJ1Y3Rvcihjb25maWc6IEJ1dHRvbkNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIGNvbnN0IGRlZmF1bHRDb25maWc6IEJ1dHRvbkNvbmZpZyA9IHtcbiAgICAgIGNzc0NsYXNzOiAndWktZ29iYWNrYnV0dG9uJyxcbiAgICAgIHRleHQ6ICdHbyBCYWNrJyxcbiAgICAgIGFyaWFMYWJlbDogJ0dvIEJhY2snLFxuICAgIH07XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCBkZWZhdWx0Q29uZmlnLCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnW0dvQmFja10gQnV0dG9uIGNsaWNrZWQnKTtcblxuICAgICAgd2luZG93LmJpdG1vdmluLmN1c3RvbU1lc3NhZ2VIYW5kbGVyLnNlbmRBc3luY2hyb25vdXMoJ2dvQmFjaycpO1xuICAgIH0pO1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlZpZXdNb2RlQ2hhbmdlZCwgKCkgPT4ge1xuICAgICAgcGxheWVyLmdldFZpZXdNb2RlKCkgPT09ICdmdWxsc2NyZWVuJyA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEJ1dHRvbiwgQnV0dG9uQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vdHMvY29tcG9uZW50cy9idXR0b24nO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi8uLi8uLi90cy91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi8uLi8uLi90cy9sb2NhbGl6YXRpb24vaTE4bic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGxheWJhY2tKdW1wQnV0dG9uc0NvbmZpZyBleHRlbmRzIEJ1dHRvbkNvbmZpZyB7XG4gIHNraXBUaW1lOiBudW1iZXI7IC8vIGluIHNlY29uZHNcbn1cblxuZXhwb3J0IGNsYXNzIFBsYXliYWNrSnVtcEJ1dHRvbnMgZXh0ZW5kcyBCdXR0b248UGxheWJhY2tKdW1wQnV0dG9uc0NvbmZpZz4ge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogUGxheWJhY2tKdW1wQnV0dG9uc0NvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXBsYXliYWNranVtcGJ1dHRvbnMnLFxuICAgICAgdGV4dDogY29uZmlnLnRleHQsXG4gICAgICBhcmlhTGFiZWw6IGNvbmZpZy5hcmlhTGFiZWwsXG4gICAgICBza2lwVGltZTogMCxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBjb25zdCBjdXJyZW50VGltZSA9IHBsYXllci5nZXRDdXJyZW50VGltZSgpO1xuICAgICAgY29uc3QgZHVyYXRpb24gPSBwbGF5ZXIuZ2V0RHVyYXRpb24oKTtcblxuICAgICAgaWYgKCFwbGF5ZXIuaXNMaXZlKCkpIHtcbiAgICAgICAgbGV0IG5ld1RpbWUgPSBjdXJyZW50VGltZSArIHRoaXMuY29uZmlnLnNraXBUaW1lO1xuICAgICAgICBuZXdUaW1lID0gTWF0aC5tYXgoMCwgTWF0aC5taW4obmV3VGltZSwgZHVyYXRpb24pKTtcbiAgICAgICAgcGxheWVyLnNlZWsobmV3VGltZSwgJ3VpJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFBsYXliYWNrRm9yd2FyZEJ1dHRvbiBleHRlbmRzIFBsYXliYWNrSnVtcEJ1dHRvbnMge1xuICBjb25zdHJ1Y3Rvcihjb25maWc6IFBsYXliYWNrSnVtcEJ1dHRvbnNDb25maWcpIHtcbiAgICBzdXBlcih7XG4gICAgICAuLi5jb25maWcsXG4gICAgICBjc3NDbGFzczogJ3VpLXBsYXliYWNrZm9yd2FyZGJ1dHRvbicsXG4gICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcignZm9yd2FyZCcpLFxuICAgICAgYXJpYUxhYmVsOiBpMThuLmdldExvY2FsaXplcignZm9yd2FyZCcpLFxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQbGF5YmFja1Jld2luZEJ1dHRvbiBleHRlbmRzIFBsYXliYWNrSnVtcEJ1dHRvbnMge1xuICBjb25zdHJ1Y3Rvcihjb25maWc6IFBsYXliYWNrSnVtcEJ1dHRvbnNDb25maWcpIHtcbiAgICBzdXBlcih7XG4gICAgICAuLi5jb25maWcsXG4gICAgICBjc3NDbGFzczogJ3VpLXBsYXliYWNrcmV3aW5kYnV0dG9uJyxcbiAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdyZXdpbmQnKSxcbiAgICAgIGFyaWFMYWJlbDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3Jld2luZCcpLFxuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQge0NvbnRhaW5lciwgQ29udGFpbmVyQ29uZmlnfSBmcm9tICcuLi8uLi8uLi90cy9jb21wb25lbnRzL2NvbnRhaW5lcic7XG5pbXBvcnQge1BsYXliYWNrRm9yd2FyZEJ1dHRvbiwgUGxheWJhY2tSZXdpbmRCdXR0b259IGZyb20gJy4vcGxheWJhY2tqdW1wYnV0dG9uJztcblxuZXhwb3J0IGludGVyZmFjZSBQbGF5YmFja0p1bXBDb250cm9sc092ZXJsYXlDb25maWcgZXh0ZW5kcyBDb250YWluZXJDb25maWcge31cblxuLyoqXG4gKiBPdmVybGF5IGNvbnRhaW5pbmcgdGhlIHBsYXliYWNrIGZvcndhcmQgYW5kIHJld2luZCBidXR0b25zLlxuICovXG5leHBvcnQgY2xhc3MgUGxheWJhY2tKdW1wQ29udHJvbHNPdmVybGF5IGV4dGVuZHMgQ29udGFpbmVyPFBsYXliYWNrSnVtcENvbnRyb2xzT3ZlcmxheUNvbmZpZz4ge1xuXG4gIHByaXZhdGUgZm9yd2FyZEJ1dHRvbjogUGxheWJhY2tGb3J3YXJkQnV0dG9uO1xuICBwcml2YXRlIHJld2luZEJ1dHRvbjogUGxheWJhY2tSZXdpbmRCdXR0b247XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBQbGF5YmFja0p1bXBDb250cm9sc092ZXJsYXlDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmZvcndhcmRCdXR0b24gPSBuZXcgUGxheWJhY2tGb3J3YXJkQnV0dG9uKHsgc2tpcFRpbWU6IDEwIH0pO1xuICAgIHRoaXMucmV3aW5kQnV0dG9uID0gbmV3IFBsYXliYWNrUmV3aW5kQnV0dG9uKHsgc2tpcFRpbWU6IC0xMCB9KTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktcGxheWJhY2tmb3J3YXJkLW92ZXJsYXknLFxuICAgICAgY29tcG9uZW50czogW3RoaXMuZm9yd2FyZEJ1dHRvbiwgdGhpcy5yZXdpbmRCdXR0b25dLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vdHMvZXZlbnRkaXNwYXRjaGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBSYWRpb01vZGVDaGFuZ2VkQXJncyB7XG4gIGFjdGl2YXRlZDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBIYW5kbGVzIHRoZSByYWRpbyBtb2RlIHN0YXRlLlxuICovXG5leHBvcnQgY2xhc3MgUmFkaW9Nb2RlQ29udHJvbGxlciB7XG4gIHByaXZhdGUgYWN0aXZhdGVkOiBib29sZWFuO1xuICBwcml2YXRlIHJlYWRvbmx5IGV2ZW50cyA9IHtcbiAgICBvbkNoYW5nZWQ6IG5ldyBFdmVudERpc3BhdGNoZXI8UmFkaW9Nb2RlQ29udHJvbGxlciwgUmFkaW9Nb2RlQ2hhbmdlZEFyZ3M+KCksXG4gIH07XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5hY3RpdmF0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gYWN0aXZhdGVkIC0gQm9vbGVhbiBzdGF0ZSBvZiB0aGUgcmFkaW8gbW9kZS5cbiAgICovXG4gIHNldFJhZGlvTW9kZShhY3RpdmF0ZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLmFjdGl2YXRlZCA9IGFjdGl2YXRlZDtcbiAgICB0aGlzLm9uQ2hhbmdlZEV2ZW50KCk7XG4gIH1cblxuICB0b2dnbGVSYWRpb01vZGUoKTogdm9pZCB7XG4gICAgdGhpcy5zZXRSYWRpb01vZGUoIXRoaXMuYWN0aXZhdGVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyBCb29sZWFuIHN0YXRlIG9mIHRoZSByYWRpbyBtb2RlLlxuICAgKi9cbiAgaXNSYWRpb01vZGVBY3RpdmF0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZhdGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyaWdnZXIgdGhlIG9uQ2hhbmdlZCBldmVudC5cbiAgICovXG4gIHByaXZhdGUgb25DaGFuZ2VkRXZlbnQoKTogdm9pZCB7XG4gICAgdGhpcy5ldmVudHMub25DaGFuZ2VkLmRpc3BhdGNoKHRoaXMsIHsgYWN0aXZhdGVkOiB0aGlzLmFjdGl2YXRlZCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG9uQ2hhbmdlZCBldmVudC5cbiAgICovXG4gIGdldCBvbkNoYW5nZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRzLm9uQ2hhbmdlZC5nZXRFdmVudCgpO1xuICB9XG59IiwiaW1wb3J0IHsgUmFkaW9Nb2RlQ29udHJvbGxlciB9IGZyb20gJy4vcmFkaW9tb2RlY29udHJvbGxlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgVG9nZ2xlQnV0dG9uLCBUb2dnbGVCdXR0b25Db25maWcgfSBmcm9tICcuLi8uLi8uLi8uLi90cy9jb21wb25lbnRzL3RvZ2dsZWJ1dHRvbic7XG5pbXBvcnQgeyBVSUluc3RhbmNlTWFuYWdlciB9IGZyb20gJy4uLy4uLy4uLy4uL3RzL3VpbWFuYWdlcic7XG5cbmRlY2xhcmUgY29uc3Qgd2luZG93OiBhbnk7XG5cbmV4cG9ydCBjbGFzcyBSYWRpb01vZGVUb2dnbGVCdXR0b24gZXh0ZW5kcyBUb2dnbGVCdXR0b248VG9nZ2xlQnV0dG9uQ29uZmlnPiB7XG4gIHByaXZhdGUgcmFkaW9Nb2RlQ29udHJvbGxlcjogUmFkaW9Nb2RlQ29udHJvbGxlcjtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFRvZ2dsZUJ1dHRvbkNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIGNvbnN0IGRlZmF1bHRDb25maWc6IFRvZ2dsZUJ1dHRvbkNvbmZpZyA9IHtcbiAgICAgIGNzc0NsYXNzOiAndWktcmFkaW9tb2RldG9nZ2xlYnV0dG9uJyxcbiAgICAgIHRleHQ6ICdSYWRpbyBNb2RlJyxcbiAgICAgIGFyaWFMYWJlbDogJ1JhZGlvIE1vZGUnLFxuICAgIH07XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCBkZWZhdWx0Q29uZmlnLCB0aGlzLmNvbmZpZyk7XG4gICAgdGhpcy5yYWRpb01vZGVDb250cm9sbGVyID0gbmV3IFJhZGlvTW9kZUNvbnRyb2xsZXIoKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICAvLyDDiWNvdXRleiBsZXMgY2hhbmdlbWVudHMgZCfDqXRhdCBkdSBtb2RlIHJhZGlvXG4gICAgdGhpcy5yYWRpb01vZGVDb250cm9sbGVyLm9uQ2hhbmdlZC5zdWJzY3JpYmUoKF8sIGFyZ3MpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGBbUmFkaW9Nb2RlVG9nZ2xlQnV0dG9uXSBSYWRpbyBtb2RlIHN0YXRlIGNoYW5nZWQ6ICR7YXJncy5hY3RpdmF0ZWR9YCk7XG4gICAgICBpZiAoYXJncy5hY3RpdmF0ZWQpIHtcbiAgICAgICAgdGhpcy5vbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vZmYoKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2VuZCB0aGUgY3VycmVudCBzdGF0ZSB0byB0aGUgb3V0c2lkZSAoZS5nLiB0byB0aGUgUmVhY3QgTmF0aXZlIGFwcClcbiAgICAgIHdpbmRvdy5iaXRtb3Zpbi5jdXN0b21NZXNzYWdlSGFuZGxlci5zZW5kQXN5bmNocm9ub3VzKCdyYWRpb01vZGVDaGFuZ2VkJywgSlNPTi5zdHJpbmdpZnkoeyBhY3RpdmF0ZWQ6IGFyZ3MuYWN0aXZhdGVkIH0pKTtcbiAgICB9KTtcblxuICAgIC8vIEhhbmRsZSBjbGlja3Mgb24gdGhlIGJ1dHRvblxuICAgIHRoaXMub25DbGljay5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ1tSYWRpb01vZGVUb2dnbGVCdXR0b25dIEJ1dHRvbiBjbGlja2VkJyk7XG4gICAgICB0aGlzLnJhZGlvTW9kZUNvbnRyb2xsZXIudG9nZ2xlUmFkaW9Nb2RlKCk7XG5cbiAgICAgIC8vIFNlbmQgc3luY2hyb25vdXMgb3IgYXN5bmNocm9ub3VzIG1lc3NhZ2VzIHRvIHRoZSBvdXRzaWRlIChlLmcuIHRvIHRoZSBSZWFjdCBOYXRpdmUgYXBwKVxuICAgICAgY29uc3QgcmVzdWx0ID0gd2luZG93LmJpdG1vdmluLmN1c3RvbU1lc3NhZ2VIYW5kbGVyLnNlbmRTeW5jaHJvbm91cygndG9nZ2xlUmFkaW9Nb2RlJyk7XG4gICAgICBjb25zb2xlLmxvZygnUmV0dXJuIHZhbHVlIGZyb20gbmF0aXZlOicsIHJlc3VsdCk7XG4gICAgfSk7XG5cbiAgICBpZiAod2luZG93LmJpdG1vdmluICYmIHdpbmRvdy5iaXRtb3Zpbi5jdXN0b21NZXNzYWdlSGFuZGxlcikge1xuICAgICAgd2luZG93LmJpdG1vdmluLmN1c3RvbU1lc3NhZ2VIYW5kbGVyLm9uKCd0b2dnbGVSYWRpb01vZGUnLCAoZGF0YT86IHN0cmluZykgPT4ge1xuICAgICAgICB0aGlzLnJhZGlvTW9kZUNvbnRyb2xsZXIudG9nZ2xlUmFkaW9Nb2RlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXNlIGwnw6l0YXQgZHUgYm91dG9uIGF1IGTDqW1hcnJhZ2VcbiAgICBpZiAodGhpcy5yYWRpb01vZGVDb250cm9sbGVyLmlzUmFkaW9Nb2RlQWN0aXZhdGVkKCkpIHtcbiAgICAgIHRoaXMub24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vZmYoKTtcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCBuYW1lc3BhY2UgQXJyYXlVdGlscyB7XG4gIC8qKlxuICAgKiBSZW1vdmVzIGFuIGl0ZW0gZnJvbSBhbiBhcnJheS5cbiAgICogQHBhcmFtIGFycmF5IHRoZSBhcnJheSB0aGF0IG1heSBjb250YWluIHRoZSBpdGVtIHRvIHJlbW92ZVxuICAgKiBAcGFyYW0gaXRlbSB0aGUgaXRlbSB0byByZW1vdmUgZnJvbSB0aGUgYXJyYXlcbiAgICogQHJldHVybnMge2FueX0gdGhlIHJlbW92ZWQgaXRlbSBvciBudWxsIGlmIGl0IHdhc24ndCBwYXJ0IG9mIHRoZSBhcnJheVxuICAgKi9cbiAgZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZTxUPihhcnJheTogVFtdLCBpdGVtOiBUKTogVCB8IG51bGwge1xuICAgIGxldCBpbmRleCA9IGFycmF5LmluZGV4T2YoaXRlbSk7XG5cbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFycmF5LnNwbGljZShpbmRleCwgMSlbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgTGlzdEl0ZW0sIExpc3RTZWxlY3RvciwgTGlzdFNlbGVjdG9yQ29uZmlnIH0gZnJvbSAnLi9jb21wb25lbnRzL2xpc3RzZWxlY3Rvcic7XG5pbXBvcnQgeyBVSUluc3RhbmNlTWFuYWdlciB9IGZyb20gJy4vdWltYW5hZ2VyJztcbmltcG9ydCB7IEF1ZGlvVHJhY2tFdmVudCwgUGxheWVyQVBJLCBBdWRpb1RyYWNrIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBIZWxwZXIgY2xhc3MgdG8gaGFuZGxlIGFsbCBhdWRpbyB0cmFja3MgcmVsYXRlZCBldmVudHNcbiAqXG4gKiBUaGlzIGNsYXNzIGxpc3RlbnMgdG8gcGxheWVyIGV2ZW50cyBhcyB3ZWxsIGFzIHRoZSBgTGlzdFNlbGVjdG9yYCBldmVudCBpZiBzZWxlY3Rpb24gY2hhbmdlZFxuICovXG5leHBvcnQgY2xhc3MgQXVkaW9UcmFja1N3aXRjaEhhbmRsZXIge1xuXG4gIHByaXZhdGUgcGxheWVyOiBQbGF5ZXJBUEk7XG4gIHByaXZhdGUgbGlzdEVsZW1lbnQ6IExpc3RTZWxlY3RvcjxMaXN0U2VsZWN0b3JDb25maWc+O1xuICBwcml2YXRlIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXI7XG5cbiAgY29uc3RydWN0b3IocGxheWVyOiBQbGF5ZXJBUEksIGVsZW1lbnQ6IExpc3RTZWxlY3RvcjxMaXN0U2VsZWN0b3JDb25maWc+LCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKSB7XG4gICAgdGhpcy5wbGF5ZXIgPSBwbGF5ZXI7XG4gICAgdGhpcy5saXN0RWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy51aW1hbmFnZXIgPSB1aW1hbmFnZXI7XG5cbiAgICB0aGlzLmJpbmRTZWxlY3Rpb25FdmVudCgpO1xuICAgIHRoaXMuYmluZFBsYXllckV2ZW50cygpO1xuICAgIHRoaXMucmVmcmVzaEF1ZGlvVHJhY2tzKCk7XG4gIH1cblxuICBwcml2YXRlIGJpbmRTZWxlY3Rpb25FdmVudCgpOiB2b2lkIHtcbiAgICB0aGlzLmxpc3RFbGVtZW50Lm9uSXRlbVNlbGVjdGVkLnN1YnNjcmliZSgoXywgdmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgdGhpcy5wbGF5ZXIuc2V0QXVkaW8odmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBiaW5kUGxheWVyRXZlbnRzKCk6IHZvaWQge1xuICAgIC8vIFVwZGF0ZSBzZWxlY3Rpb24gd2hlbiBzZWxlY3RlZCB0cmFjayBoYXMgY2hhbmdlZFxuICAgIHRoaXMucGxheWVyLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQXVkaW9DaGFuZ2VkLCB0aGlzLnNlbGVjdEN1cnJlbnRBdWRpb1RyYWNrKTtcbiAgICAvLyBVcGRhdGUgdHJhY2tzIHdoZW4gc291cmNlIGdvZXMgYXdheVxuICAgIHRoaXMucGxheWVyLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU291cmNlVW5sb2FkZWQsIHRoaXMucmVmcmVzaEF1ZGlvVHJhY2tzKTtcbiAgICAvLyBVcGRhdGUgdHJhY2tzIHdoZW4gdGhlIHBlcmlvZCB3aXRoaW4gYSBzb3VyY2UgY2hhbmdlc1xuICAgIHRoaXMucGxheWVyLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGVyaW9kU3dpdGNoZWQsIHRoaXMucmVmcmVzaEF1ZGlvVHJhY2tzKTtcbiAgICAvLyBVcGRhdGUgdHJhY2tzIHdoZW4gYSB0cmFjayBpcyBhZGRlZCBvciByZW1vdmVkXG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BdWRpb0FkZGVkLCB0aGlzLmFkZEF1ZGlvVHJhY2spO1xuICAgIHRoaXMucGxheWVyLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQXVkaW9SZW1vdmVkLCB0aGlzLnJlbW92ZUF1ZGlvVHJhY2spO1xuICAgIHRoaXMudWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKHRoaXMucmVmcmVzaEF1ZGlvVHJhY2tzKTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkQXVkaW9UcmFjayA9IChldmVudDogQXVkaW9UcmFja0V2ZW50KSA9PiB7XG4gICAgY29uc3QgYXVkaW9UcmFjayA9IGV2ZW50LnRyYWNrO1xuICAgIGlmICghdGhpcy5saXN0RWxlbWVudC5oYXNJdGVtKGF1ZGlvVHJhY2suaWQpKSB7XG4gICAgICB0aGlzLmxpc3RFbGVtZW50LmFkZEl0ZW0oYXVkaW9UcmFjay5pZCwgaTE4bi5nZXRMb2NhbGl6ZXIoYXVkaW9UcmFjay5sYWJlbCksIHRydWUpO1xuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIHJlbW92ZUF1ZGlvVHJhY2sgPSAoZXZlbnQ6IEF1ZGlvVHJhY2tFdmVudCkgPT4ge1xuICAgIGNvbnN0IGF1ZGlvVHJhY2sgPSBldmVudC50cmFjaztcbiAgICBpZiAodGhpcy5saXN0RWxlbWVudC5oYXNJdGVtKGF1ZGlvVHJhY2suaWQpKSB7XG4gICAgICB0aGlzLmxpc3RFbGVtZW50LnJlbW92ZUl0ZW0oYXVkaW9UcmFjay5pZCk7XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgc2VsZWN0Q3VycmVudEF1ZGlvVHJhY2sgPSAoKSA9PiB7XG4gICAgbGV0IGN1cnJlbnRBdWRpb1RyYWNrID0gdGhpcy5wbGF5ZXIuZ2V0QXVkaW8oKTtcblxuICAgIC8vIEhMUyBzdHJlYW1zIGRvbid0IGFsd2F5cyBwcm92aWRlIHRoaXMsIHNvIHdlIGhhdmUgdG8gY2hlY2tcbiAgICBpZiAoY3VycmVudEF1ZGlvVHJhY2spIHtcbiAgICAgIHRoaXMubGlzdEVsZW1lbnQuc2VsZWN0SXRlbShjdXJyZW50QXVkaW9UcmFjay5pZCk7XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgcmVmcmVzaEF1ZGlvVHJhY2tzID0gKCkgPT4ge1xuICAgIGNvbnN0IGF1ZGlvVHJhY2tzID0gdGhpcy5wbGF5ZXIuZ2V0QXZhaWxhYmxlQXVkaW8oKTtcbiAgICBjb25zdCBhdWRpb1RyYWNrVG9MaXN0SXRlbSA9IChhdWRpb1RyYWNrOiBBdWRpb1RyYWNrKTogTGlzdEl0ZW0gPT4ge1xuICAgICAgcmV0dXJuIHsga2V5OiBhdWRpb1RyYWNrLmlkLCBsYWJlbDogYXVkaW9UcmFjay5sYWJlbCB9O1xuICAgIH07XG5cbiAgICB0aGlzLmxpc3RFbGVtZW50LnN5bmNocm9uaXplSXRlbXMoYXVkaW9UcmFja3MubWFwKGF1ZGlvVHJhY2tUb0xpc3RJdGVtKSk7XG4gICAgdGhpcy5zZWxlY3RDdXJyZW50QXVkaW9UcmFjaygpO1xuICB9O1xufVxuIiwiZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgTmF2aWdhdG9yIHtcbiAgICBtc01heFRvdWNoUG9pbnRzPzogbnVtYmVyO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCcm93c2VyVXRpbHMge1xuICAvLyBpc01vYmlsZSBvbmx5IG5lZWRzIHRvIGJlIGV2YWx1YXRlZCBvbmNlIChpdCBjYW5ub3QgY2hhbmdlIGR1cmluZyBhIGJyb3dzZXIgc2Vzc2lvbilcbiAgLy8gTW9iaWxlIGRldGVjdGlvbiBhY2NvcmRpbmcgdG8gTW96aWxsYSByZWNvbW1lbmRhdGlvbjogXCJJbiBzdW1tYXJ5LCB3ZSByZWNvbW1lbmQgbG9va2luZyBmb3IgdGhlIHN0cmluZyDigJxNb2Jp4oCdXG4gIC8vIGFueXdoZXJlIGluIHRoZSBVc2VyIEFnZW50IHRvIGRldGVjdCBhIG1vYmlsZSBkZXZpY2UuXCJcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9Ccm93c2VyX2RldGVjdGlvbl91c2luZ190aGVfdXNlcl9hZ2VudFxuICBzdGF0aWMgZ2V0IGlzTW9iaWxlKCk6IGJvb2xlYW4ge1xuICAgIGlmICghdGhpcy53aW5kb3dFeGlzdHMoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgL01vYmkvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGlzQ2hyb21lKCk6IGJvb2xlYW4ge1xuICAgIGlmICghdGhpcy53aW5kb3dFeGlzdHMoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgL0Nocm9tZS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgaXNBbmRyb2lkKCk6IGJvb2xlYW4ge1xuICAgIGlmICghdGhpcy53aW5kb3dFeGlzdHMoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgL0FuZHJvaWQvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgIXRoaXMuaXNIaXNlbnNlO1xuICB9XG5cbiAgc3RhdGljIGdldCBpc0lPUygpOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMud2luZG93RXhpc3RzKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICB9XG5cbiAgc3RhdGljIGdldCBpc01hY0ludGVsKCk6IGJvb2xlYW4ge1xuICAgIGlmICghdGhpcy53aW5kb3dFeGlzdHMoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnBsYXRmb3JtID09PSAnTWFjSW50ZWwnO1xuICB9XG5cbiAgc3RhdGljIGdldCBpc0hpc2Vuc2UoKTogYm9vbGVhbiB7XG4gICAgaWYgKCF0aGlzLndpbmRvd0V4aXN0cygpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiAvSGlzZW5zZS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgaXNQbGF5U3RhdGlvbigpOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMud2luZG93RXhpc3RzKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIC9QbGF5U3RhdGlvbi9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGlzV2ViT3MoKTogYm9vbGVhbiB7XG4gICAgaWYgKCF0aGlzLndpbmRvd0V4aXN0cygpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICBuYXZpZ2F0b3IgJiZcbiAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQgJiZcbiAgICAgIChuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKCdXZWIwUycpIHx8IG5hdmlnYXRvci51c2VyQWdlbnQuaW5jbHVkZXMoJ05ldENhc3QnKSlcbiAgICApO1xuICB9XG5cbiAgc3RhdGljIGdldCBpc1RpemVuKCk6IGJvb2xlYW4ge1xuICAgIGlmICghdGhpcy53aW5kb3dFeGlzdHMoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgL1RpemVuLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICB9XG5cbiAgLy8gaHR0cHM6Ly9oYWNrcy5tb3ppbGxhLm9yZy8yMDEzLzA0L2RldGVjdGluZy10b3VjaC1pdHMtdGhlLXdoeS1ub3QtdGhlLWhvdy9cbiAgc3RhdGljIGdldCBpc1RvdWNoU3VwcG9ydGVkKCkge1xuICAgIGlmICghdGhpcy53aW5kb3dFeGlzdHMoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIChuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwIHx8IG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzID4gMCk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyB3aW5kb3dFeGlzdHMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDbGlja092ZXJsYXkgfSBmcm9tICcuL2NsaWNrb3ZlcmxheSc7XG5pbXBvcnQgeyBVSUluc3RhbmNlTWFuYWdlciB9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBBZCwgQWRFdmVudCwgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcblxuLyoqXG4gKiBBIHNpbXBsZSBjbGljayBjYXB0dXJlIG92ZXJsYXkgZm9yIGNsaWNrVGhyb3VnaFVybHMgb2YgYWRzLlxuICovXG5leHBvcnQgY2xhc3MgQWRDbGlja092ZXJsYXkgZXh0ZW5kcyBDbGlja092ZXJsYXkge1xuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICBsZXQgY2xpY2tUaHJvdWdoQ2FsbGJhY2s6ICgpID0+IHZvaWQgPSBudWxsO1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkU3RhcnRlZCwgKGV2ZW50OiBBZEV2ZW50KSA9PiB7XG4gICAgICBsZXQgYWQgPSBldmVudC5hZDtcbiAgICAgIHRoaXMuc2V0VXJsKGFkLmNsaWNrVGhyb3VnaFVybCk7XG4gICAgICBjbGlja1Rocm91Z2hDYWxsYmFjayA9IGFkLmNsaWNrVGhyb3VnaFVybE9wZW5lZDtcbiAgICB9KTtcblxuICAgIC8vIENsZWFyIGNsaWNrLXRocm91Z2ggVVJMIHdoZW4gYWQgaGFzIGZpbmlzaGVkXG4gICAgbGV0IGFkRmluaXNoZWRIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgdGhpcy5zZXRVcmwobnVsbCk7XG4gICAgfTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BZEZpbmlzaGVkLCBhZEZpbmlzaGVkSGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkU2tpcHBlZCwgYWRGaW5pc2hlZEhhbmRsZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BZEVycm9yLCBhZEZpbmlzaGVkSGFuZGxlcik7XG5cbiAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIC8vIFBhdXNlIHRoZSBhZCB3aGVuIG92ZXJsYXkgaXMgY2xpY2tlZFxuICAgICAgcGxheWVyLnBhdXNlKCd1aS1hZC1jbGljay1vdmVybGF5Jyk7XG5cbiAgICAgIGlmIChjbGlja1Rocm91Z2hDYWxsYmFjaykge1xuICAgICAgICBjbGlja1Rocm91Z2hDYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQge0xhYmVsLCBMYWJlbENvbmZpZ30gZnJvbSAnLi9sYWJlbCc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHtTdHJpbmdVdGlsc30gZnJvbSAnLi4vc3RyaW5ndXRpbHMnO1xuaW1wb3J0IHsgQWRFdmVudCwgTGluZWFyQWQsIFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEEgbGFiZWwgdGhhdCBkaXNwbGF5cyBhIG1lc3NhZ2UgYWJvdXQgYSBydW5uaW5nIGFkLCBvcHRpb25hbGx5IHdpdGggYSBjb3VudGRvd24uXG4gKi9cbmV4cG9ydCBjbGFzcyBBZE1lc3NhZ2VMYWJlbCBleHRlbmRzIExhYmVsPExhYmVsQ29uZmlnPiB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBMYWJlbENvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktbGFiZWwtYWQtbWVzc2FnZScsXG4gICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcignYWRzLnJlbWFpbmluZ1RpbWUnKSAsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuICAgIGxldCB0ZXh0ID0gY29uZmlnLnRleHQ7XG5cbiAgICBsZXQgdXBkYXRlTWVzc2FnZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICB0aGlzLnNldFRleHQoU3RyaW5nVXRpbHMucmVwbGFjZUFkTWVzc2FnZVBsYWNlaG9sZGVycyhpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24odGV4dCksIG51bGwsIHBsYXllcikpO1xuICAgIH07XG5cbiAgICBsZXQgYWRTdGFydEhhbmRsZXIgPSAoZXZlbnQ6IEFkRXZlbnQpID0+IHtcbiAgICAgIGxldCB1aUNvbmZpZyA9IChldmVudC5hZCBhcyBMaW5lYXJBZCkudWlDb25maWc7XG4gICAgICB0ZXh0ID0gdWlDb25maWcgJiYgdWlDb25maWcubWVzc2FnZSB8fCBjb25maWcudGV4dDtcblxuICAgICAgdXBkYXRlTWVzc2FnZUhhbmRsZXIoKTtcblxuICAgICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlRpbWVDaGFuZ2VkLCB1cGRhdGVNZXNzYWdlSGFuZGxlcik7XG4gICAgfTtcblxuICAgIGxldCBhZEVuZEhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICBwbGF5ZXIub2ZmKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlRpbWVDaGFuZ2VkLCB1cGRhdGVNZXNzYWdlSGFuZGxlcik7XG4gICAgfTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BZFN0YXJ0ZWQsIGFkU3RhcnRIYW5kbGVyKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQWRTa2lwcGVkLCBhZEVuZEhhbmRsZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BZEVycm9yLCBhZEVuZEhhbmRsZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BZEZpbmlzaGVkLCBhZEVuZEhhbmRsZXIpO1xuICB9XG59IiwiaW1wb3J0IHsgQnV0dG9uQ29uZmlnLCBCdXR0b24gfSBmcm9tICcuL2J1dHRvbic7XG5pbXBvcnQgeyBVSUluc3RhbmNlTWFuYWdlciB9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBTdHJpbmdVdGlscyB9IGZyb20gJy4uL3N0cmluZ3V0aWxzJztcbmltcG9ydCB7IEFkRXZlbnQsIExpbmVhckFkLCBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIGZvciB0aGUge0BsaW5rIEFkU2tpcEJ1dHRvbn0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWRTa2lwQnV0dG9uQ29uZmlnIGV4dGVuZHMgQnV0dG9uQ29uZmlnIHtcbiAgLyoqXG4gICAqIE1lc3NhZ2Ugd2hpY2ggZ2V0cyBkaXNwbGF5ZWQgZHVyaW5nIHRoZSBjb3VudGRvd24gaXMgYWN0aXZlLlxuICAgKiBTdXBwb3J0ZWQgcGxhY2Vob2xkZXJzOiBsb29rIGF0IHtAbGluayBTdHJpbmdVdGlscy5yZXBsYWNlQWRNZXNzYWdlUGxhY2Vob2xkZXJzfVxuICAgKi9cbiAgdW50aWxTa2lwcGFibGVNZXNzYWdlPzogc3RyaW5nO1xuICAvKipcbiAgICogTWVzc2FnZSBkaXNwbGF5ZWQgd2hlbiB0aGUgYWQgaXMgc2tpcHBhYmxlLlxuICAgKiBTdXBwb3J0ZWQgcGxhY2Vob2xkZXJzOiBsb29rIGF0IHtAbGluayBTdHJpbmdVdGlscy5yZXBsYWNlQWRNZXNzYWdlUGxhY2Vob2xkZXJzfVxuICAgKi9cbiAgc2tpcHBhYmxlTWVzc2FnZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBBIGJ1dHRvbiB0aGF0IGlzIGRpc3BsYXllZCBkdXJpbmcgYWRzIGFuZCBjYW4gYmUgdXNlZCB0byBza2lwIHRoZSBhZC5cbiAqL1xuZXhwb3J0IGNsYXNzIEFkU2tpcEJ1dHRvbiBleHRlbmRzIEJ1dHRvbjxBZFNraXBCdXR0b25Db25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IEFkU2tpcEJ1dHRvbkNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIDxBZFNraXBCdXR0b25Db25maWc+e1xuICAgICAgY3NzQ2xhc3M6ICd1aS1idXR0b24tYWQtc2tpcCcsXG4gICAgICB1bnRpbFNraXBwYWJsZU1lc3NhZ2U6ICdTa2lwIGFkIGluIHtyZW1haW5pbmdUaW1lfScsXG4gICAgICBza2lwcGFibGVNZXNzYWdlOiAnU2tpcCBhZCcsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuICAgIGxldCB1bnRpbFNraXBwYWJsZU1lc3NhZ2UgPSBjb25maWcudW50aWxTa2lwcGFibGVNZXNzYWdlO1xuICAgIGxldCBza2lwcGFibGVNZXNzYWdlID0gY29uZmlnLnNraXBwYWJsZU1lc3NhZ2U7XG4gICAgbGV0IHNraXBPZmZzZXQgPSAtMTtcblxuICAgIGxldCB1cGRhdGVTa2lwTWVzc2FnZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICB0aGlzLnNob3coKTtcblxuICAgICAgLy8gVXBkYXRlIHRoZSBza2lwIG1lc3NhZ2Ugb24gdGhlIGJ1dHRvblxuICAgICAgaWYgKHBsYXllci5nZXRDdXJyZW50VGltZSgpIDwgc2tpcE9mZnNldCkge1xuICAgICAgICB0aGlzLnNldFRleHQoU3RyaW5nVXRpbHMucmVwbGFjZUFkTWVzc2FnZVBsYWNlaG9sZGVycyh1bnRpbFNraXBwYWJsZU1lc3NhZ2UsIHNraXBPZmZzZXQsIHBsYXllcikpO1xuICAgICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2V0VGV4dChza2lwcGFibGVNZXNzYWdlKTtcbiAgICAgICAgdGhpcy5lbmFibGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbGV0IGFkU3RhcnRIYW5kbGVyID0gKGV2ZW50OiBBZEV2ZW50KSA9PiB7XG4gICAgICBsZXQgYWQgPSBldmVudC5hZCBhcyBMaW5lYXJBZDtcbiAgICAgIHNraXBPZmZzZXQgPSBhZC5za2lwcGFibGVBZnRlcjtcbiAgICAgIHVudGlsU2tpcHBhYmxlTWVzc2FnZSA9IGFkLnVpQ29uZmlnICYmIGFkLnVpQ29uZmlnLnVudGlsU2tpcHBhYmxlTWVzc2FnZSB8fCBjb25maWcudW50aWxTa2lwcGFibGVNZXNzYWdlO1xuICAgICAgc2tpcHBhYmxlTWVzc2FnZSA9IGFkLnVpQ29uZmlnICYmIGFkLnVpQ29uZmlnLnNraXBwYWJsZU1lc3NhZ2UgfHwgY29uZmlnLnNraXBwYWJsZU1lc3NhZ2U7XG5cbiAgICAgIC8vIERpc3BsYXkgdGhpcyBidXR0b24gb25seSBpZiBhZCBpcyBza2lwcGFibGUuXG4gICAgICAvLyBOb24tc2tpcHBhYmxlIGFkcyB3aWxsIHJldHVybiAtMSBmb3Igc2tpcHBhYmxlQWZ0ZXIgZm9yIHBsYXllciB2ZXJzaW9uIDwgdjguMy4wLlxuICAgICAgaWYgKHR5cGVvZiBza2lwT2Zmc2V0ID09PSAnbnVtYmVyJyAmJiBza2lwT2Zmc2V0ID49IDApIHtcbiAgICAgICAgdXBkYXRlU2tpcE1lc3NhZ2VIYW5kbGVyKCk7XG4gICAgICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5UaW1lQ2hhbmdlZCwgdXBkYXRlU2tpcE1lc3NhZ2VIYW5kbGVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBsZXQgYWRFbmRIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgcGxheWVyLm9mZihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5UaW1lQ2hhbmdlZCwgdXBkYXRlU2tpcE1lc3NhZ2VIYW5kbGVyKTtcbiAgICB9O1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkU3RhcnRlZCwgYWRTdGFydEhhbmRsZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BZFNraXBwZWQsIGFkRW5kSGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkRXJyb3IsIGFkRW5kSGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkRmluaXNoZWQsIGFkRW5kSGFuZGxlcik7XG5cbiAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIC8vIFRyeSB0byBza2lwIHRoZSBhZCAodGhpcyBvbmx5IHdvcmtzIGlmIGl0IGlzIHNraXBwYWJsZSBzbyB3ZSBkb24ndCBuZWVkIHRvIHRha2UgZXh0cmEgY2FyZSBvZiB0aGF0IGhlcmUpXG4gICAgICBwbGF5ZXIuYWRzLnNraXAoKTtcbiAgICB9KTtcbiAgfVxufSIsImltcG9ydCB7VG9nZ2xlQnV0dG9uLCBUb2dnbGVCdXR0b25Db25maWd9IGZyb20gJy4vdG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIGJ1dHRvbiB0aGF0IHRvZ2dsZXMgQXBwbGUgQWlyUGxheS5cbiAqL1xuZXhwb3J0IGNsYXNzIEFpclBsYXlUb2dnbGVCdXR0b24gZXh0ZW5kcyBUb2dnbGVCdXR0b248VG9nZ2xlQnV0dG9uQ29uZmlnPiB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBUb2dnbGVCdXR0b25Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLWFpcnBsYXl0b2dnbGVidXR0b24nLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ2FwcGxlQWlycGxheScpLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICBpZiAoIXBsYXllci5pc0FpcnBsYXlBdmFpbGFibGUpIHtcbiAgICAgIC8vIElmIHRoZSBwbGF5ZXIgZG9lcyBub3Qgc3VwcG9ydCBBaXJwbGF5IChwbGF5ZXIgNy4wKSwgd2UganVzdCBoaWRlIHRoaXMgY29tcG9uZW50IGFuZCBza2lwIGNvbmZpZ3VyYXRpb25cbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMub25DbGljay5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgaWYgKHBsYXllci5pc0FpcnBsYXlBdmFpbGFibGUoKSkge1xuICAgICAgICBwbGF5ZXIuc2hvd0FpcnBsYXlUYXJnZXRQaWNrZXIoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjb25zb2xlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ0FpclBsYXkgdW5hdmFpbGFibGUnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgYWlyUGxheUF2YWlsYWJsZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICBpZiAocGxheWVyLmlzQWlycGxheUF2YWlsYWJsZSgpKSB7XG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IGFpclBsYXlDaGFuZ2VkSGFuZGxlciA9ICgpID0+IHtcbiAgICAgIGlmIChwbGF5ZXIuaXNBaXJwbGF5QWN0aXZlKCkpIHtcbiAgICAgICAgdGhpcy5vbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vZmYoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFpcnBsYXlBdmFpbGFibGUsIGFpclBsYXlBdmFpbGFibGVIYW5kbGVyKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQWlycGxheUNoYW5nZWQsIGFpclBsYXlDaGFuZ2VkSGFuZGxlcik7XG5cbiAgICAvLyBTdGFydHVwIGluaXRcbiAgICBhaXJQbGF5QXZhaWxhYmxlSGFuZGxlcigpOyAvLyBIaWRlIGJ1dHRvbiBpZiBBaXJQbGF5IGlzIG5vdCBhdmFpbGFibGVcbiAgICBhaXJQbGF5Q2hhbmdlZEhhbmRsZXIoKTtcbiAgfVxufSIsImltcG9ydCB7U2VsZWN0Qm94fSBmcm9tICcuL3NlbGVjdGJveCc7XG5pbXBvcnQge0xpc3RTZWxlY3RvckNvbmZpZ30gZnJvbSAnLi9saXN0c2VsZWN0b3InO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEEgc2VsZWN0IGJveCBwcm92aWRpbmcgYSBzZWxlY3Rpb24gYmV0d2VlbiAnYXV0bycgYW5kIHRoZSBhdmFpbGFibGUgYXVkaW8gcXVhbGl0aWVzLlxuICovXG5leHBvcnQgY2xhc3MgQXVkaW9RdWFsaXR5U2VsZWN0Qm94IGV4dGVuZHMgU2VsZWN0Qm94IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IExpc3RTZWxlY3RvckNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzZXM6IFsndWktYXVkaW9xdWFsaXR5c2VsZWN0Ym94J10sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBzZWxlY3RDdXJyZW50QXVkaW9RdWFsaXR5ID0gKCkgPT4ge1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKHBsYXllci5nZXRBdWRpb1F1YWxpdHkoKS5pZCk7XG4gICAgfTtcblxuICAgIGxldCB1cGRhdGVBdWRpb1F1YWxpdGllcyA9ICgpID0+IHtcbiAgICAgIGxldCBhdWRpb1F1YWxpdGllcyA9IHBsYXllci5nZXRBdmFpbGFibGVBdWRpb1F1YWxpdGllcygpO1xuXG4gICAgICB0aGlzLmNsZWFySXRlbXMoKTtcblxuICAgICAgLy8gQWRkIGVudHJ5IGZvciBhdXRvbWF0aWMgcXVhbGl0eSBzd2l0Y2hpbmcgKGRlZmF1bHQgc2V0dGluZylcbiAgICAgIHRoaXMuYWRkSXRlbSgnYXV0bycsIGkxOG4uZ2V0TG9jYWxpemVyKCdhdXRvJykpO1xuXG4gICAgICAvLyBBZGQgYXVkaW8gcXVhbGl0aWVzXG4gICAgICBmb3IgKGxldCBhdWRpb1F1YWxpdHkgb2YgYXVkaW9RdWFsaXRpZXMpIHtcbiAgICAgICAgdGhpcy5hZGRJdGVtKGF1ZGlvUXVhbGl0eS5pZCwgYXVkaW9RdWFsaXR5LmxhYmVsKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2VsZWN0IGluaXRpYWwgcXVhbGl0eVxuICAgICAgc2VsZWN0Q3VycmVudEF1ZGlvUXVhbGl0eSgpO1xuICAgIH07XG5cbiAgICB0aGlzLm9uSXRlbVNlbGVjdGVkLnN1YnNjcmliZSgoc2VuZGVyOiBBdWRpb1F1YWxpdHlTZWxlY3RCb3gsIHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgIHBsYXllci5zZXRBdWRpb1F1YWxpdHkodmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLy8gVXBkYXRlIHF1YWxpdGllcyB3aGVuIGF1ZGlvIHRyYWNrIGhhcyBjaGFuZ2VkXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkF1ZGlvQ2hhbmdlZCwgdXBkYXRlQXVkaW9RdWFsaXRpZXMpO1xuICAgIC8vIFVwZGF0ZSBxdWFsaXRpZXMgd2hlbiBzb3VyY2UgZ29lcyBhd2F5XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZVVubG9hZGVkLCB1cGRhdGVBdWRpb1F1YWxpdGllcyk7XG4gICAgLy8gVXBkYXRlIHF1YWxpdGllcyB3aGVuIHRoZSBwZXJpb2Qgd2l0aGluIGEgc291cmNlIGNoYW5nZXNcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGVyaW9kU3dpdGNoZWQsIHVwZGF0ZUF1ZGlvUXVhbGl0aWVzKTtcbiAgICAvLyBVcGRhdGUgcXVhbGl0eSBzZWxlY3Rpb24gd2hlbiBxdWFsaXR5IGlzIGNoYW5nZWQgKGZyb20gb3V0c2lkZSlcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQXVkaW9RdWFsaXR5Q2hhbmdlZCwgc2VsZWN0Q3VycmVudEF1ZGlvUXVhbGl0eSk7XG4gICAgaWYgKChwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudCBhcyBhbnkpLkF1ZGlvUXVhbGl0eUFkZGVkKSB7XG4gICAgICAvLyBVcGRhdGUgcXVhbGl0aWVzIHdoZW4gdGhlaXIgYXZhaWxhYmlsaXR5IGNoYW5nZWRcbiAgICAgIC8vIFRPRE86IHJlbW92ZSBhbnkgY2FzdCBhZnRlciBuZXh0IHBsYXllciByZWxlYXNlXG4gICAgICBwbGF5ZXIub24oKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50IGFzIGFueSkuQXVkaW9RdWFsaXR5QWRkZWQsIHVwZGF0ZUF1ZGlvUXVhbGl0aWVzKTtcbiAgICAgIHBsYXllci5vbigocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQgYXMgYW55KS5BdWRpb1F1YWxpdHlSZW1vdmVkLCB1cGRhdGVBdWRpb1F1YWxpdGllcyk7XG4gICAgfVxuXG4gICAgdWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKHVwZGF0ZUF1ZGlvUXVhbGl0aWVzKTtcbiAgfVxufSIsImltcG9ydCB7TGlzdEJveH0gZnJvbSAnLi9saXN0Ym94JztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge0F1ZGlvVHJhY2tTd2l0Y2hIYW5kbGVyfSBmcm9tICcuLi9hdWRpb3RyYWNrdXRpbHMnO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcblxuLyoqXG4gKiBBIGVsZW1lbnQgdGhhdCBpcyBzaW1pbGFyIHRvIGEgc2VsZWN0IGJveCB3aGVyZSB0aGUgdXNlciBjYW4gc2VsZWN0IGEgc3VidGl0bGVcbiAqL1xuZXhwb3J0IGNsYXNzIEF1ZGlvVHJhY2tMaXN0Qm94IGV4dGVuZHMgTGlzdEJveCB7XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcbiAgICBuZXcgQXVkaW9UcmFja1N3aXRjaEhhbmRsZXIocGxheWVyLCB0aGlzLCB1aW1hbmFnZXIpO1xuICB9XG59XG4iLCJpbXBvcnQge1NlbGVjdEJveH0gZnJvbSAnLi9zZWxlY3Rib3gnO1xuaW1wb3J0IHtMaXN0U2VsZWN0b3JDb25maWd9IGZyb20gJy4vbGlzdHNlbGVjdG9yJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge0F1ZGlvVHJhY2tTd2l0Y2hIYW5kbGVyfSBmcm9tICcuLi9hdWRpb3RyYWNrdXRpbHMnO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcblxuLyoqXG4gKiBBIHNlbGVjdCBib3ggcHJvdmlkaW5nIGEgc2VsZWN0aW9uIGJldHdlZW4gYXZhaWxhYmxlIGF1ZGlvIHRyYWNrcyAoZS5nLiBkaWZmZXJlbnQgbGFuZ3VhZ2VzKS5cbiAqL1xuZXhwb3J0IGNsYXNzIEF1ZGlvVHJhY2tTZWxlY3RCb3ggZXh0ZW5kcyBTZWxlY3RCb3gge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogTGlzdFNlbGVjdG9yQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3NlczogWyd1aS1hdWRpb3RyYWNrc2VsZWN0Ym94J10sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIG5ldyBBdWRpb1RyYWNrU3dpdGNoSGFuZGxlcihwbGF5ZXIsIHRoaXMsIHVpbWFuYWdlcik7XG4gIH1cbn0iLCJpbXBvcnQge0NvbnRhaW5lckNvbmZpZywgQ29udGFpbmVyfSBmcm9tICcuL2NvbnRhaW5lcic7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHtDb21wb25lbnQsIENvbXBvbmVudENvbmZpZ30gZnJvbSAnLi9jb21wb25lbnQnO1xuaW1wb3J0IHtUaW1lb3V0fSBmcm9tICcuLi90aW1lb3V0JztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIHRoZSB7QGxpbmsgQnVmZmVyaW5nT3ZlcmxheX0gY29tcG9uZW50LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJ1ZmZlcmluZ092ZXJsYXlDb25maWcgZXh0ZW5kcyBDb250YWluZXJDb25maWcge1xuICAvKipcbiAgICogRGVsYXkgaW4gbWlsbGlzZWNvbmRzIGFmdGVyIHdoaWNoIHRoZSBidWZmZXJpbmcgb3ZlcmxheSB3aWxsIGJlIGRpc3BsYXllZC4gVXNlZnVsIHRvIGJ5cGFzcyBzaG9ydCBzdGFsbHMgd2l0aG91dFxuICAgKiBkaXNwbGF5aW5nIHRoZSBvdmVybGF5LiBTZXQgdG8gMCB0byBkaXNwbGF5IHRoZSBvdmVybGF5IGluc3RhbnRseS5cbiAgICogRGVmYXVsdDogMTAwMG1zICgxIHNlY29uZClcbiAgICovXG4gIHNob3dEZWxheU1zPzogbnVtYmVyO1xufVxuXG4vKipcbiAqIE92ZXJsYXlzIHRoZSBwbGF5ZXIgYW5kIGRpc3BsYXlzIGEgYnVmZmVyaW5nIGluZGljYXRvci5cbiAqL1xuZXhwb3J0IGNsYXNzIEJ1ZmZlcmluZ092ZXJsYXkgZXh0ZW5kcyBDb250YWluZXI8QnVmZmVyaW5nT3ZlcmxheUNvbmZpZz4ge1xuXG4gIHByaXZhdGUgaW5kaWNhdG9yczogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz5bXTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IEJ1ZmZlcmluZ092ZXJsYXlDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmluZGljYXRvcnMgPSBbXG4gICAgICBuZXcgQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4oeyB0YWc6ICdkaXYnLCBjc3NDbGFzczogJ3VpLWJ1ZmZlcmluZy1vdmVybGF5LWluZGljYXRvcicsIHJvbGU6ICdpbWcnIH0pLFxuICAgICAgbmV3IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+KHsgdGFnOiAnZGl2JywgY3NzQ2xhc3M6ICd1aS1idWZmZXJpbmctb3ZlcmxheS1pbmRpY2F0b3InLCByb2xlOiAnaW1nJyB9KSxcbiAgICAgIG5ldyBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPih7IHRhZzogJ2RpdicsIGNzc0NsYXNzOiAndWktYnVmZmVyaW5nLW92ZXJsYXktaW5kaWNhdG9yJywgcm9sZTogJ2ltZycgfSksXG4gICAgXTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIDxCdWZmZXJpbmdPdmVybGF5Q29uZmlnPntcbiAgICAgIGNzc0NsYXNzOiAndWktYnVmZmVyaW5nLW92ZXJsYXknLFxuICAgICAgaGlkZGVuOiB0cnVlLFxuICAgICAgY29tcG9uZW50czogdGhpcy5pbmRpY2F0b3JzLFxuICAgICAgc2hvd0RlbGF5TXM6IDEwMDAsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuXG4gICAgbGV0IG92ZXJsYXlTaG93VGltZW91dCA9IG5ldyBUaW1lb3V0KGNvbmZpZy5zaG93RGVsYXlNcywgKCkgPT4ge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfSk7XG5cbiAgICBsZXQgc2hvd092ZXJsYXkgPSAoKSA9PiB7XG4gICAgICBvdmVybGF5U2hvd1RpbWVvdXQuc3RhcnQoKTtcbiAgICB9O1xuXG4gICAgbGV0IGhpZGVPdmVybGF5ID0gKCkgPT4ge1xuICAgICAgb3ZlcmxheVNob3dUaW1lb3V0LmNsZWFyKCk7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9O1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlN0YWxsU3RhcnRlZCwgc2hvd092ZXJsYXkpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TdGFsbEVuZGVkLCBoaWRlT3ZlcmxheSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXksIHNob3dPdmVybGF5KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheWluZywgaGlkZU92ZXJsYXkpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QYXVzZWQsIGhpZGVPdmVybGF5KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU2Vlaywgc2hvd092ZXJsYXkpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TZWVrZWQsIGhpZGVPdmVybGF5KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVGltZVNoaWZ0LCBzaG93T3ZlcmxheSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlRpbWVTaGlmdGVkLCBoaWRlT3ZlcmxheSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZVVubG9hZGVkLCBoaWRlT3ZlcmxheSk7XG5cbiAgICAvLyBTaG93IG92ZXJsYXkgaWYgcGxheWVyIGlzIGFscmVhZHkgc3RhbGxlZCBhdCBpbml0XG4gICAgaWYgKHBsYXllci5pc1N0YWxsZWQoKSkge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge0NvbXBvbmVudENvbmZpZywgQ29tcG9uZW50fSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQge0RPTX0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7RXZlbnREaXNwYXRjaGVyLCBOb0FyZ3MsIEV2ZW50fSBmcm9tICcuLi9ldmVudGRpc3BhdGNoZXInO1xuaW1wb3J0IHsgTG9jYWxpemFibGVUZXh0ICwgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgYSB7QGxpbmsgQnV0dG9ufSBjb21wb25lbnQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnV0dG9uQ29uZmlnIGV4dGVuZHMgQ29tcG9uZW50Q29uZmlnIHtcbiAgLyoqXG4gICAqIFRoZSB0ZXh0IGFzIHN0cmluZyBvciBsb2NhbGl6ZSBjYWxsYmFjayBvbiB0aGUgYnV0dG9uLlxuICAgKi9cbiAgdGV4dD86IExvY2FsaXphYmxlVGV4dDtcbn1cblxuLyoqXG4gKiBBIHNpbXBsZSBjbGlja2FibGUgYnV0dG9uLlxuICovXG5leHBvcnQgY2xhc3MgQnV0dG9uPENvbmZpZyBleHRlbmRzIEJ1dHRvbkNvbmZpZz4gZXh0ZW5kcyBDb21wb25lbnQ8Q29uZmlnPiB7XG5cbiAgcHJpdmF0ZSBidXR0b25FdmVudHMgPSB7XG4gICAgb25DbGljazogbmV3IEV2ZW50RGlzcGF0Y2hlcjxCdXR0b248Q29uZmlnPiwgTm9BcmdzPigpLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktYnV0dG9uJyxcbiAgICAgIHJvbGU6ICdidXR0b24nLFxuICAgICAgdGFiSW5kZXg6IDAsXG4gICAgfSBhcyBDb25maWcsIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0b0RvbUVsZW1lbnQoKTogRE9NIHtcbiAgICBjb25zdCBidXR0b25FbGVtZW50QXR0cmlidXRlczogeyBbbmFtZTogc3RyaW5nXTogc3RyaW5nIH0gPSB7XG4gICAgICAnaWQnOiB0aGlzLmNvbmZpZy5pZCxcbiAgICAgICdhcmlhLWxhYmVsJzogaTE4bi5wZXJmb3JtTG9jYWxpemF0aW9uKHRoaXMuY29uZmlnLmFyaWFMYWJlbCB8fCB0aGlzLmNvbmZpZy50ZXh0KSxcbiAgICAgICdjbGFzcyc6IHRoaXMuZ2V0Q3NzQ2xhc3NlcygpLFxuICAgICAgJ3R5cGUnIDogJ2J1dHRvbicsXG4gICAgICAvKipcbiAgICAgICogV0NBRzIwIHN0YW5kYXJkIHRvIGRpc3BsYXkgaWYgYSBidXR0b24gaXMgcHJlc3NlZCBvciBub3RcbiAgICAgICovXG4gICAgICAnYXJpYS1wcmVzc2VkJzogJ2ZhbHNlJyxcbiAgICAgICd0YWJpbmRleCc6IHRoaXMuY29uZmlnLnRhYkluZGV4LnRvU3RyaW5nKCksXG4gICAgfTtcblxuICAgIGlmICh0aGlzLmNvbmZpZy5yb2xlICE9IG51bGwpIHtcbiAgICAgIGJ1dHRvbkVsZW1lbnRBdHRyaWJ1dGVzWydyb2xlJ10gPSB0aGlzLmNvbmZpZy5yb2xlO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSB0aGUgYnV0dG9uIGVsZW1lbnQgd2l0aCB0aGUgdGV4dCBsYWJlbFxuICAgIGxldCBidXR0b25FbGVtZW50ID0gbmV3IERPTSgnYnV0dG9uJywgYnV0dG9uRWxlbWVudEF0dHJpYnV0ZXMpLmFwcGVuZChuZXcgRE9NKCdzcGFuJywge1xuICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ2xhYmVsJyksXG4gICAgfSkuaHRtbChpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24odGhpcy5jb25maWcudGV4dCkpKTtcblxuICAgIC8vIExpc3RlbiBmb3IgdGhlIGNsaWNrIGV2ZW50IG9uIHRoZSBidXR0b24gZWxlbWVudCBhbmQgdHJpZ2dlciB0aGUgY29ycmVzcG9uZGluZyBldmVudCBvbiB0aGUgYnV0dG9uIGNvbXBvbmVudFxuICAgIGJ1dHRvbkVsZW1lbnQub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5vbkNsaWNrRXZlbnQoKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBidXR0b25FbGVtZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGV4dCBvbiB0aGUgbGFiZWwgb2YgdGhlIGJ1dHRvbi5cbiAgICogQHBhcmFtIHRleHQgdGhlIHRleHQgdG8gcHV0IGludG8gdGhlIGxhYmVsIG9mIHRoZSBidXR0b25cbiAgICovXG4gIHNldFRleHQodGV4dDogTG9jYWxpemFibGVUZXh0KTogdm9pZCB7XG4gICAgdGhpcy5nZXREb21FbGVtZW50KCkuZmluZCgnLicgKyB0aGlzLnByZWZpeENzcygnbGFiZWwnKSkuaHRtbChpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24odGV4dCkpO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uQ2xpY2tFdmVudCgpIHtcbiAgICB0aGlzLmJ1dHRvbkV2ZW50cy5vbkNsaWNrLmRpc3BhdGNoKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAqIEByZXR1cm5zIHtFdmVudDxCdXR0b248Q29uZmlnPiwgTm9BcmdzPn1cbiAgICovXG4gIGdldCBvbkNsaWNrKCk6IEV2ZW50PEJ1dHRvbjxDb25maWc+LCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5idXR0b25FdmVudHMub25DbGljay5nZXRFdmVudCgpO1xuICB9XG59XG4iLCJpbXBvcnQge0NvbnRhaW5lckNvbmZpZywgQ29udGFpbmVyfSBmcm9tICcuL2NvbnRhaW5lcic7XG5pbXBvcnQge0xhYmVsLCBMYWJlbENvbmZpZ30gZnJvbSAnLi9sYWJlbCc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgQ2FzdFN0YXJ0ZWRFdmVudCwgQ2FzdFdhaXRpbmdGb3JEZXZpY2VFdmVudCwgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogT3ZlcmxheXMgdGhlIHBsYXllciBhbmQgZGlzcGxheXMgdGhlIHN0YXR1cyBvZiBhIENhc3Qgc2Vzc2lvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIENhc3RTdGF0dXNPdmVybGF5IGV4dGVuZHMgQ29udGFpbmVyPENvbnRhaW5lckNvbmZpZz4ge1xuXG4gIHByaXZhdGUgc3RhdHVzTGFiZWw6IExhYmVsPExhYmVsQ29uZmlnPjtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbnRhaW5lckNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuc3RhdHVzTGFiZWwgPSBuZXcgTGFiZWw8TGFiZWxDb25maWc+KHsgY3NzQ2xhc3M6ICd1aS1jYXN0LXN0YXR1cy1sYWJlbCcgfSk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLWNhc3Qtc3RhdHVzLW92ZXJsYXknLFxuICAgICAgY29tcG9uZW50czogW3RoaXMuc3RhdHVzTGFiZWxdLFxuICAgICAgaGlkZGVuOiB0cnVlLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQ2FzdFdhaXRpbmdGb3JEZXZpY2UsXG4gICAgICAoZXZlbnQ6IENhc3RXYWl0aW5nRm9yRGV2aWNlRXZlbnQpID0+IHtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgIC8vIEdldCBkZXZpY2UgbmFtZSBhbmQgdXBkYXRlIHN0YXR1cyB0ZXh0IHdoaWxlIGNvbm5lY3RpbmdcbiAgICAgICAgbGV0IGNhc3REZXZpY2VOYW1lID0gZXZlbnQuY2FzdFBheWxvYWQuZGV2aWNlTmFtZTtcbiAgICAgICAgdGhpcy5zdGF0dXNMYWJlbC5zZXRUZXh0KGkxOG4uZ2V0TG9jYWxpemVyKCdjb25uZWN0aW5nVG8nLCB7IGNhc3REZXZpY2VOYW1lIH0pKTtcbiAgICAgIH0pO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5DYXN0U3RhcnRlZCwgKGV2ZW50OiBDYXN0U3RhcnRlZEV2ZW50KSA9PiB7XG4gICAgICAvLyBTZXNzaW9uIGlzIHN0YXJ0ZWQgb3IgcmVzdW1lZFxuICAgICAgLy8gRm9yIGNhc2VzIHdoZW4gYSBzZXNzaW9uIGlzIHJlc3VtZWQsIHdlIGRvIG5vdCByZWNlaXZlIHRoZSBwcmV2aW91cyBldmVudHMgYW5kIHRoZXJlZm9yZSBzaG93IHRoZSBzdGF0dXMgcGFuZWxcbiAgICAgIC8vIGhlcmUgdG9vXG4gICAgICB0aGlzLnNob3coKTtcbiAgICAgIGxldCBjYXN0RGV2aWNlTmFtZSA9IGV2ZW50LmRldmljZU5hbWU7XG4gICAgICB0aGlzLnN0YXR1c0xhYmVsLnNldFRleHQoaTE4bi5nZXRMb2NhbGl6ZXIoJ3BsYXlpbmdPbicsIHsgY2FzdERldmljZU5hbWUgfSkpO1xuICAgIH0pO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5DYXN0U3RvcHBlZCwgKGV2ZW50KSA9PiB7XG4gICAgICAvLyBDYXN0IHNlc3Npb24gZ29uZSwgaGlkZSB0aGUgc3RhdHVzIHBhbmVsXG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9KTtcbiAgfVxufSIsImltcG9ydCB7VG9nZ2xlQnV0dG9uLCBUb2dnbGVCdXR0b25Db25maWd9IGZyb20gJy4vdG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIGJ1dHRvbiB0aGF0IHRvZ2dsZXMgY2FzdGluZyB0byBhIENhc3QgcmVjZWl2ZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBDYXN0VG9nZ2xlQnV0dG9uIGV4dGVuZHMgVG9nZ2xlQnV0dG9uPFRvZ2dsZUJ1dHRvbkNvbmZpZz4ge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogVG9nZ2xlQnV0dG9uQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1jYXN0dG9nZ2xlYnV0dG9uJyxcbiAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdnb29nbGVDYXN0JyksXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMub25DbGljay5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgaWYgKHBsYXllci5pc0Nhc3RBdmFpbGFibGUoKSkge1xuICAgICAgICBpZiAocGxheWVyLmlzQ2FzdGluZygpKSB7XG4gICAgICAgICAgcGxheWVyLmNhc3RTdG9wKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGxheWVyLmNhc3RWaWRlbygpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY29uc29sZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdDYXN0IHVuYXZhaWxhYmxlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGxldCBjYXN0QXZhaWxhYmxlSGFuZGVyID0gKCkgPT4ge1xuICAgICAgaWYgKHBsYXllci5pc0Nhc3RBdmFpbGFibGUoKSkge1xuICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQ2FzdEF2YWlsYWJsZSwgY2FzdEF2YWlsYWJsZUhhbmRlcik7XG5cbiAgICAvLyBUb2dnbGUgYnV0dG9uICdvbicgc3RhdGVcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQ2FzdFdhaXRpbmdGb3JEZXZpY2UsICgpID0+IHtcbiAgICAgIHRoaXMub24oKTtcbiAgICB9KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQ2FzdFN0YXJ0ZWQsICgpID0+IHtcbiAgICAgIC8vIFdoZW4gYSBzZXNzaW9uIGlzIHJlc3VtZWQsIHRoZXJlIGlzIG5vIENhc3RTdGFydCBldmVudCwgc28gd2UgYWxzbyBuZWVkIHRvIHRvZ2dsZSBoZXJlIGZvciBzdWNoIGNhc2VzXG4gICAgICB0aGlzLm9uKCk7XG4gICAgfSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkNhc3RTdG9wcGVkLCAoKSA9PiB7XG4gICAgICB0aGlzLm9mZigpO1xuICAgIH0pO1xuXG4gICAgLy8gU3RhcnR1cCBpbml0XG4gICAgY2FzdEF2YWlsYWJsZUhhbmRlcigpOyAvLyBIaWRlIGJ1dHRvbiBpZiBDYXN0IG5vdCBhdmFpbGFibGVcbiAgICBpZiAocGxheWVyLmlzQ2FzdGluZygpKSB7XG4gICAgICB0aGlzLm9uKCk7XG4gICAgfVxuICB9XG59IiwiaW1wb3J0IHtVSUNvbnRhaW5lciwgVUlDb250YWluZXJDb25maWd9IGZyb20gJy4vdWljb250YWluZXInO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7VGltZW91dH0gZnJvbSAnLi4vdGltZW91dCc7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuXG4vKipcbiAqIFRoZSBiYXNlIGNvbnRhaW5lciBmb3IgQ2FzdCByZWNlaXZlcnMgdGhhdCBjb250YWlucyBhbGwgb2YgdGhlIFVJIGFuZCB0YWtlcyBjYXJlIHRoYXQgdGhlIFVJIGlzIHNob3duIG9uXG4gKiBjZXJ0YWluIHBsYXliYWNrIGV2ZW50cy5cbiAqL1xuZXhwb3J0IGNsYXNzIENhc3RVSUNvbnRhaW5lciBleHRlbmRzIFVJQ29udGFpbmVyIHtcblxuICBwcml2YXRlIGNhc3RVaUhpZGVUaW1lb3V0OiBUaW1lb3V0O1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogVUlDb250YWluZXJDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuXG4gICAgLypcbiAgICAgKiBTaG93IFVJIG9uIENhc3QgZGV2aWNlcyBhdCBjZXJ0YWluIHBsYXliYWNrIGV2ZW50c1xuICAgICAqXG4gICAgICogU2luY2UgYSBDYXN0IHJlY2VpdmVyIGRvZXMgbm90IGhhdmUgYSBkaXJlY3QgSENJLCB3ZSBzaG93IHRoZSBVSSBvbiBjZXJ0YWluIHBsYXliYWNrIGV2ZW50cyB0byBnaXZlIHRoZSB1c2VyXG4gICAgICogYSBjaGFuY2UgdG8gc2VlIG9uIHRoZSBzY3JlZW4gd2hhdCdzIGdvaW5nIG9uLCBlLmcuIG9uIHBsYXkvcGF1c2Ugb3IgYSBzZWVrIHRoZSBVSSBpcyBzaG93biBhbmQgdGhlIHVzZXIgY2FuXG4gICAgICogc2VlIHRoZSBjdXJyZW50IHRpbWUgYW5kIHBvc2l0aW9uIG9uIHRoZSBzZWVrIGJhci5cbiAgICAgKiBUaGUgVUkgaXMgc2hvd24gcGVybWFuZW50bHkgd2hpbGUgcGxheWJhY2sgaXMgcGF1c2VkLCBvdGhlcndpc2UgaGlkZXMgYXV0b21hdGljYWxseSBhZnRlciB0aGUgY29uZmlndXJlZFxuICAgICAqIGhpZGUgZGVsYXkgdGltZS5cbiAgICAgKi9cblxuICAgIGxldCBpc1VpU2hvd24gPSBmYWxzZTtcblxuICAgIGxldCBoaWRlVWkgPSAoKSA9PiB7XG4gICAgICB1aW1hbmFnZXIub25Db250cm9sc0hpZGUuZGlzcGF0Y2godGhpcyk7XG4gICAgICBpc1VpU2hvd24gPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgdGhpcy5jYXN0VWlIaWRlVGltZW91dCA9IG5ldyBUaW1lb3V0KGNvbmZpZy5oaWRlRGVsYXksIGhpZGVVaSk7XG5cbiAgICBsZXQgc2hvd1VpID0gKCkgPT4ge1xuICAgICAgaWYgKCFpc1VpU2hvd24pIHtcbiAgICAgICAgdWltYW5hZ2VyLm9uQ29udHJvbHNTaG93LmRpc3BhdGNoKHRoaXMpO1xuICAgICAgICBpc1VpU2hvd24gPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBsZXQgc2hvd1VpUGVybWFuZW50bHkgPSAoKSA9PiB7XG4gICAgICBzaG93VWkoKTtcbiAgICAgIHRoaXMuY2FzdFVpSGlkZVRpbWVvdXQuY2xlYXIoKTtcbiAgICB9O1xuXG4gICAgbGV0IHNob3dVaVdpdGhUaW1lb3V0ID0gKCkgPT4ge1xuICAgICAgc2hvd1VpKCk7XG4gICAgICB0aGlzLmNhc3RVaUhpZGVUaW1lb3V0LnN0YXJ0KCk7XG4gICAgfTtcblxuICAgIGxldCBzaG93VWlBZnRlclNlZWsgPSAoKSA9PiB7XG4gICAgICBpZiAocGxheWVyLmlzUGxheWluZygpKSB7XG4gICAgICAgIHNob3dVaVdpdGhUaW1lb3V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaG93VWlQZXJtYW5lbnRseSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheSwgc2hvd1VpV2l0aFRpbWVvdXQpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QYXVzZWQsIHNob3dVaVBlcm1hbmVudGx5KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU2Vlaywgc2hvd1VpUGVybWFuZW50bHkpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TZWVrZWQsIHNob3dVaUFmdGVyU2Vlayk7XG5cbiAgICB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUoc2hvd1VpV2l0aFRpbWVvdXQpO1xuICB9XG5cbiAgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBzdXBlci5yZWxlYXNlKCk7XG4gICAgdGhpcy5jYXN0VWlIaWRlVGltZW91dC5jbGVhcigpO1xuICB9XG59IiwiaW1wb3J0IHtCdXR0b24sIEJ1dHRvbkNvbmZpZ30gZnJvbSAnLi9idXR0b24nO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIGZvciBhIHtAbGluayBDbGlja092ZXJsYXl9LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENsaWNrT3ZlcmxheUNvbmZpZyBleHRlbmRzIEJ1dHRvbkNvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgdXJsIHRvIG9wZW4gd2hlbiB0aGUgb3ZlcmxheSBpcyBjbGlja2VkLiBTZXQgdG8gbnVsbCB0byBkaXNhYmxlIHRoZSBjbGljayBoYW5kbGVyLlxuICAgKi9cbiAgdXJsPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgY2xpY2sgb3ZlcmxheSB0aGF0IG9wZW5zIGFuIHVybCBpbiBhIG5ldyB0YWIgaWYgY2xpY2tlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIENsaWNrT3ZlcmxheSBleHRlbmRzIEJ1dHRvbjxDbGlja092ZXJsYXlDb25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IENsaWNrT3ZlcmxheUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktY2xpY2tvdmVybGF5JyxcbiAgICAgIHJvbGU6IHRoaXMuY29uZmlnLnJvbGUsXG4gICAgfSwgPENsaWNrT3ZlcmxheUNvbmZpZz50aGlzLmNvbmZpZyk7XG4gIH1cblxuICBpbml0aWFsaXplKCk6IHZvaWQge1xuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcblxuICAgIHRoaXMuc2V0VXJsKCg8Q2xpY2tPdmVybGF5Q29uZmlnPnRoaXMuY29uZmlnKS51cmwpO1xuICAgIGxldCBlbGVtZW50ID0gdGhpcy5nZXREb21FbGVtZW50KCk7XG4gICAgZWxlbWVudC5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICBpZiAoZWxlbWVudC5kYXRhKCd1cmwnKSkge1xuICAgICAgICB3aW5kb3cub3BlbihlbGVtZW50LmRhdGEoJ3VybCcpLCAnX2JsYW5rJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgVVJMIHRoYXQgc2hvdWxkIGJlIGZvbGxvd2VkIHdoZW4gdGhlIHdhdGVybWFyayBpcyBjbGlja2VkLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgd2F0ZXJtYXJrIFVSTFxuICAgKi9cbiAgZ2V0VXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmRhdGEoJ3VybCcpO1xuICB9XG5cbiAgc2V0VXJsKHVybDogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHVybCA9PT0gdW5kZWZpbmVkIHx8IHVybCA9PSBudWxsKSB7XG4gICAgICB1cmwgPSAnJztcbiAgICB9XG4gICAgdGhpcy5nZXREb21FbGVtZW50KCkuZGF0YSgndXJsJywgdXJsKTtcbiAgfVxufSIsImltcG9ydCB7QnV0dG9uQ29uZmlnLCBCdXR0b259IGZyb20gJy4vYnV0dG9uJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge0NvbXBvbmVudCwgQ29tcG9uZW50Q29uZmlnfSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgdGhlIHtAbGluayBDbG9zZUJ1dHRvbn0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2xvc2VCdXR0b25Db25maWcgZXh0ZW5kcyBCdXR0b25Db25maWcge1xuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB0aGF0IHNob3VsZCBiZSBjbG9zZWQgd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAqL1xuICB0YXJnZXQ6IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+O1xufVxuXG4vKipcbiAqIEEgYnV0dG9uIHRoYXQgY2xvc2VzIChoaWRlcykgYSBjb25maWd1cmVkIGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGNsYXNzIENsb3NlQnV0dG9uIGV4dGVuZHMgQnV0dG9uPENsb3NlQnV0dG9uQ29uZmlnPiB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBDbG9zZUJ1dHRvbkNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLWNsb3NlYnV0dG9uJyxcbiAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdjbG9zZScpLFxuICAgIH0gYXMgQ2xvc2VCdXR0b25Db25maWcsIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICBsZXQgY29uZmlnID0gdGhpcy5nZXRDb25maWcoKTtcblxuICAgIHRoaXMub25DbGljay5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgY29uZmlnLnRhcmdldC5oaWRlKCk7XG4gICAgfSk7XG4gIH1cbn0iLCJpbXBvcnQge0d1aWR9IGZyb20gJy4uL2d1aWQnO1xuaW1wb3J0IHtET019IGZyb20gJy4uL2RvbSc7XG5pbXBvcnQge0V2ZW50RGlzcGF0Y2hlciwgTm9BcmdzLCBFdmVudH0gZnJvbSAnLi4vZXZlbnRkaXNwYXRjaGVyJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biwgTG9jYWxpemFibGVUZXh0IH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEJhc2UgY29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIGEgY29tcG9uZW50LlxuICogU2hvdWxkIGJlIGV4dGVuZGVkIGJ5IGNvbXBvbmVudHMgdGhhdCB3YW50IHRvIGFkZCBhZGRpdGlvbmFsIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb21wb25lbnRDb25maWcge1xuICAvKipcbiAgICogVGhlIEhUTUwgdGFnIG5hbWUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICogRGVmYXVsdDogJ2RpdidcbiAgICovXG4gIHRhZz86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBIVE1MIElEIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIERlZmF1bHQ6IGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIHdpdGggcGF0dGVybiAndWktaWQte2d1aWR9Jy5cbiAgICovXG4gIGlkPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBIHByZWZpeCB0byBwcmVwZW5kIGFsbCBDU1MgY2xhc3NlcyB3aXRoLlxuICAgKi9cbiAgY3NzUHJlZml4Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzZXMgb2YgdGhlIGNvbXBvbmVudC4gVGhpcyBpcyB1c3VhbGx5IHRoZSBjbGFzcyBmcm9tIHdoZXJlIHRoZSBjb21wb25lbnQgdGFrZXMgaXRzIHN0eWxpbmcuXG4gICAqL1xuICBjc3NDbGFzcz86IHN0cmluZzsgLy8gJ2NsYXNzJyBpcyBhIHJlc2VydmVkIGtleXdvcmQsIHNvIHdlIG5lZWQgdG8gbWFrZSB0aGUgbmFtZSBtb3JlIGNvbXBsaWNhdGVkXG5cbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgQ1NTIGNsYXNzZXMgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNzc0NsYXNzZXM/OiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogU3BlY2lmaWVzIGlmIHRoZSBjb21wb25lbnQgc2hvdWxkIGJlIGhpZGRlbiBhdCBzdGFydHVwLlxuICAgKiBEZWZhdWx0OiBmYWxzZVxuICAgKi9cbiAgaGlkZGVuPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogU3BlY2lmaWVzIGlmIHRoZSBjb21wb25lbnQgaXMgZW5hYmxlZCAoaW50ZXJhY3RpdmUpIG9yIG5vdC5cbiAgICogRGVmYXVsdDogZmFsc2VcbiAgICovXG4gIGRpc2FibGVkPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSBjb21wb25lbnQgcm9sZSBmb3IgV0NBRzIwIHN0YW5kYXJkXG4gICAqL1xuICByb2xlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBXQ0FHMjAgcmVxdWlyZW1lbnQgZm9yIHNjcmVlbiByZWFkZXIgbmF2aWdhdGlvblxuICAgKi9cbiAgdGFiSW5kZXg/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFdDQUcyMCBzdGFuZGFyZCBmb3IgZGVmaW5pbmcgaW5mbyBhYm91dCB0aGUgY29tcG9uZW50ICh1c3VhbGx5IHRoZSBuYW1lKVxuICAgKi9cbiAgYXJpYUxhYmVsPzogTG9jYWxpemFibGVUZXh0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBvbmVudEhvdmVyQ2hhbmdlZEV2ZW50QXJncyBleHRlbmRzIE5vQXJncyB7XG4gIC8qKlxuICAgKiBUcnVlIGlzIHRoZSBjb21wb25lbnQgaXMgaG92ZXJlZCwgZWxzZSBmYWxzZS5cbiAgICovXG4gIGhvdmVyZWQ6IGJvb2xlYW47XG59XG5cbi8qKlxuICogVGhlIGJhc2UgY2xhc3Mgb2YgdGhlIFVJIGZyYW1ld29yay5cbiAqIEVhY2ggY29tcG9uZW50IG11c3QgZXh0ZW5kIHRoaXMgY2xhc3MgYW5kIG9wdGlvbmFsbHkgdGhlIGNvbmZpZyBpbnRlcmZhY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21wb25lbnQ8Q29uZmlnIGV4dGVuZHMgQ29tcG9uZW50Q29uZmlnPiB7XG5cbiAgLyoqXG4gICAqIFRoZSBjbGFzc25hbWUgdGhhdCBpcyBhdHRhY2hlZCB0byB0aGUgZWxlbWVudCB3aGVuIGl0IGlzIGluIHRoZSBoaWRkZW4gc3RhdGUuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDTEFTU19ISURERU4gPSAnaGlkZGVuJztcblxuICAvKipcbiAgICogVGhlIGNsYXNzbmFtZSB0aGF0IGlzIGF0dGFjaGVkIHRvIHRoZSBlbGVtZW50IHdoZW4gaXQgaXMgaW4gdGhlIGRpc2FibGVkIHN0YXRlLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ0xBU1NfRElTQUJMRUQgPSAnZGlzYWJsZWQnO1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIG9iamVjdCBvZiB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHByb3RlY3RlZCBjb25maWc6IENvbmZpZztcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCdzIERPTSBlbGVtZW50LlxuICAgKi9cbiAgcHJpdmF0ZSBlbGVtZW50OiBET007XG5cbiAgLyoqXG4gICAqIEZsYWcgdGhhdCBrZWVwcyB0cmFjayBvZiB0aGUgaGlkZGVuIHN0YXRlLlxuICAgKi9cbiAgcHJpdmF0ZSBoaWRkZW46IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEZsYXQgdGhhdCBrZWVwcyB0cmFjayBvZiB0aGUgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBwcml2YXRlIGRpc2FibGVkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBGbGFnIHRoYXQga2VlcHMgdHJhY2sgb2YgdGhlIGhvdmVyIHN0YXRlLlxuICAgKi9cbiAgcHJpdmF0ZSBob3ZlcmVkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgbGlzdCBvZiBldmVudHMgdGhhdCB0aGlzIGNvbXBvbmVudCBvZmZlcnMuIFRoZXNlIGV2ZW50cyBzaG91bGQgYWx3YXlzIGJlIHByaXZhdGUgYW5kIG9ubHkgZGlyZWN0bHlcbiAgICogYWNjZXNzZWQgZnJvbSB3aXRoaW4gdGhlIGltcGxlbWVudGluZyBjb21wb25lbnQuXG4gICAqXG4gICAqIEJlY2F1c2UgVHlwZVNjcmlwdCBkb2VzIG5vdCBzdXBwb3J0IHByaXZhdGUgcHJvcGVydGllcyB3aXRoIHRoZSBzYW1lIG5hbWUgb24gZGlmZmVyZW50IGNsYXNzIGhpZXJhcmNoeSBsZXZlbHNcbiAgICogKGkuZS4gc3VwZXJjbGFzcyBhbmQgc3ViY2xhc3MgY2Fubm90IGNvbnRhaW4gYSBwcml2YXRlIHByb3BlcnR5IHdpdGggdGhlIHNhbWUgbmFtZSksIHRoZSBkZWZhdWx0IG5hbWluZ1xuICAgKiBjb252ZW50aW9uIGZvciB0aGUgZXZlbnQgbGlzdCBvZiBhIGNvbXBvbmVudCB0aGF0IHNob3VsZCBiZSBmb2xsb3dlZCBieSBzdWJjbGFzc2VzIGlzIHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZVxuICAgKiBjYW1lbC1jYXNlZCBjbGFzcyBuYW1lICsgJ0V2ZW50cycgKGUuZy4gU3ViQ2xhc3MgZXh0ZW5kcyBDb21wb25lbnQgPT4gc3ViQ2xhc3NFdmVudHMpLlxuICAgKiBTZWUge0BsaW5rICNjb21wb25lbnRFdmVudHN9IGZvciBhbiBleGFtcGxlLlxuICAgKlxuICAgKiBFdmVudCBwcm9wZXJ0aWVzIHNob3VsZCBiZSBuYW1lZCBpbiBjYW1lbCBjYXNlIHdpdGggYW4gJ29uJyBwcmVmaXggYW5kIGluIHRoZSBwcmVzZW50IHRlbnNlLiBBc3luYyBldmVudHMgbWF5XG4gICAqIGhhdmUgYSBzdGFydCBldmVudCAod2hlbiB0aGUgb3BlcmF0aW9uIHN0YXJ0cykgaW4gdGhlIHByZXNlbnQgdGVuc2UsIGFuZCBtdXN0IGhhdmUgYW4gZW5kIGV2ZW50ICh3aGVuIHRoZVxuICAgKiBvcGVyYXRpb24gZW5kcykgaW4gdGhlIHBhc3QgdGVuc2UgKG9yIHByZXNlbnQgdGVuc2UgaW4gc3BlY2lhbCBjYXNlcyAoZS5nLiBvblN0YXJ0L29uU3RhcnRlZCBvciBvblBsYXkvb25QbGF5aW5nKS5cbiAgICogU2VlIHtAbGluayAjY29tcG9uZW50RXZlbnRzI29uU2hvd30gZm9yIGFuIGV4YW1wbGUuXG4gICAqXG4gICAqIEVhY2ggZXZlbnQgc2hvdWxkIGJlIGFjY29tcGFuaWVkIHdpdGggYSBwcm90ZWN0ZWQgbWV0aG9kIG5hbWVkIGJ5IHRoZSBjb252ZW50aW9uIGV2ZW50TmFtZSArICdFdmVudCdcbiAgICogKGUuZy4gb25TdGFydEV2ZW50KSwgdGhhdCBhY3R1YWxseSB0cmlnZ2VycyB0aGUgZXZlbnQgYnkgY2FsbGluZyB7QGxpbmsgRXZlbnREaXNwYXRjaGVyI2Rpc3BhdGNoIGRpc3BhdGNofSBhbmRcbiAgICogcGFzc2luZyBhIHJlZmVyZW5jZSB0byB0aGUgY29tcG9uZW50IGFzIGZpcnN0IHBhcmFtZXRlci4gQ29tcG9uZW50cyBzaG91bGQgYWx3YXlzIHRyaWdnZXIgdGhlaXIgZXZlbnRzIHdpdGggdGhlc2VcbiAgICogbWV0aG9kcy4gSW1wbGVtZW50aW5nIHRoaXMgcGF0dGVybiBnaXZlcyBzdWJjbGFzc2VzIG1lYW5zIHRvIGRpcmVjdGx5IGxpc3RlbiB0byB0aGUgZXZlbnRzIGJ5IG92ZXJyaWRpbmcgdGhlXG4gICAqIG1ldGhvZCAoYW5kIHNhdmluZyB0aGUgb3ZlcmhlYWQgb2YgcGFzc2luZyBhIGhhbmRsZXIgdG8gdGhlIGV2ZW50IGRpc3BhdGNoZXIpIGFuZCBtb3JlIGltcG9ydGFudGx5IHRvIHRyaWdnZXJcbiAgICogdGhlc2UgZXZlbnRzIHdpdGhvdXQgaGF2aW5nIGFjY2VzcyB0byB0aGUgcHJpdmF0ZSBldmVudCBsaXN0LlxuICAgKiBTZWUge0BsaW5rICNvblNob3d9IGZvciBhbiBleGFtcGxlLlxuICAgKlxuICAgKiBUbyBwcm92aWRlIGV4dGVybmFsIGNvZGUgdGhlIHBvc3NpYmlsaXR5IHRvIGxpc3RlbiB0byB0aGlzIGNvbXBvbmVudCdzIGV2ZW50cyAoc3Vic2NyaWJlLCB1bnN1YnNjcmliZSwgZXRjLiksXG4gICAqIGVhY2ggZXZlbnQgc2hvdWxkIGFsc28gYmUgYWNjb21wYW5pZWQgYnkgYSBwdWJsaWMgZ2V0dGVyIGZ1bmN0aW9uIHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQncyBwcm9wZXJ0eSxcbiAgICogdGhhdCByZXR1cm5zIHRoZSB7QGxpbmsgRXZlbnR9IG9idGFpbmVkIGZyb20gdGhlIGV2ZW50IGRpc3BhdGNoZXIgYnkgY2FsbGluZyB7QGxpbmsgRXZlbnREaXNwYXRjaGVyI2dldEV2ZW50fS5cbiAgICogU2VlIHtAbGluayAjb25TaG93fSBmb3IgYW4gZXhhbXBsZS5cbiAgICpcbiAgICogRnVsbCBleGFtcGxlIGZvciBhbiBldmVudCByZXByZXNlbnRpbmcgYW4gZXhhbXBsZSBhY3Rpb24gaW4gYSBleGFtcGxlIGNvbXBvbmVudDpcbiAgICpcbiAgICogPGNvZGU+XG4gICAqIC8vIERlZmluZSBhbiBleGFtcGxlIGNvbXBvbmVudCBjbGFzcyB3aXRoIGFuIGV4YW1wbGUgZXZlbnRcbiAgICogY2xhc3MgRXhhbXBsZUNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudDxDb21wb25lbnRDb25maWc+IHtcbiAgICAgKlxuICAgICAqICAgICBwcml2YXRlIGV4YW1wbGVDb21wb25lbnRFdmVudHMgPSB7XG4gICAgICogICAgICAgICBvbkV4YW1wbGVBY3Rpb246IG5ldyBFdmVudERpc3BhdGNoZXI8RXhhbXBsZUNvbXBvbmVudCwgTm9BcmdzPigpXG4gICAgICogICAgIH1cbiAgICAgKlxuICAgICAqICAgICAvLyBjb25zdHJ1Y3RvciBhbmQgb3RoZXIgc3R1ZmYuLi5cbiAgICAgKlxuICAgICAqICAgICBwcm90ZWN0ZWQgb25FeGFtcGxlQWN0aW9uRXZlbnQoKSB7XG4gICAgICogICAgICAgIHRoaXMuZXhhbXBsZUNvbXBvbmVudEV2ZW50cy5vbkV4YW1wbGVBY3Rpb24uZGlzcGF0Y2godGhpcyk7XG4gICAgICogICAgfVxuICAgICAqXG4gICAgICogICAgZ2V0IG9uRXhhbXBsZUFjdGlvbigpOiBFdmVudDxFeGFtcGxlQ29tcG9uZW50LCBOb0FyZ3M+IHtcbiAgICAgKiAgICAgICAgcmV0dXJuIHRoaXMuZXhhbXBsZUNvbXBvbmVudEV2ZW50cy5vbkV4YW1wbGVBY3Rpb24uZ2V0RXZlbnQoKTtcbiAgICAgKiAgICB9XG4gICAgICogfVxuICAgKlxuICAgKiAvLyBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhlIGNvbXBvbmVudCBzb21ld2hlcmVcbiAgICogdmFyIGV4YW1wbGVDb21wb25lbnRJbnN0YW5jZSA9IG5ldyBFeGFtcGxlQ29tcG9uZW50KCk7XG4gICAqXG4gICAqIC8vIFN1YnNjcmliZSB0byB0aGUgZXhhbXBsZSBldmVudCBvbiB0aGUgY29tcG9uZW50XG4gICAqIGV4YW1wbGVDb21wb25lbnRJbnN0YW5jZS5vbkV4YW1wbGVBY3Rpb24uc3Vic2NyaWJlKGZ1bmN0aW9uIChzZW5kZXI6IEV4YW1wbGVDb21wb25lbnQpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ29uRXhhbXBsZUFjdGlvbiBvZiAnICsgc2VuZGVyICsgJyBoYXMgZmlyZWQhJyk7XG4gICAgICogfSk7XG4gICAqIDwvY29kZT5cbiAgICovXG4gIHByaXZhdGUgY29tcG9uZW50RXZlbnRzID0ge1xuICAgIG9uU2hvdzogbmV3IEV2ZW50RGlzcGF0Y2hlcjxDb21wb25lbnQ8Q29uZmlnPiwgTm9BcmdzPigpLFxuICAgIG9uSGlkZTogbmV3IEV2ZW50RGlzcGF0Y2hlcjxDb21wb25lbnQ8Q29uZmlnPiwgTm9BcmdzPigpLFxuICAgIG9uSG92ZXJDaGFuZ2VkOiBuZXcgRXZlbnREaXNwYXRjaGVyPENvbXBvbmVudDxDb25maWc+LCBDb21wb25lbnRIb3ZlckNoYW5nZWRFdmVudEFyZ3M+KCksXG4gICAgb25FbmFibGVkOiBuZXcgRXZlbnREaXNwYXRjaGVyPENvbXBvbmVudDxDb25maWc+LCBOb0FyZ3M+KCksXG4gICAgb25EaXNhYmxlZDogbmV3IEV2ZW50RGlzcGF0Y2hlcjxDb21wb25lbnQ8Q29uZmlnPiwgTm9BcmdzPigpLFxuICB9O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgY29tcG9uZW50IHdpdGggYW4gb3B0aW9uYWxseSBzdXBwbGllZCBjb25maWcuIEFsbCBzdWJjbGFzc2VzIG11c3QgY2FsbCB0aGUgY29uc3RydWN0b3Igb2YgdGhlaXJcbiAgICogc3VwZXJjbGFzcyBhbmQgdGhlbiBtZXJnZSB0aGVpciBjb25maWd1cmF0aW9uIGludG8gdGhlIGNvbXBvbmVudCdzIGNvbmZpZ3VyYXRpb24uXG4gICAqIEBwYXJhbSBjb25maWcgdGhlIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBjb21wb25lbnRcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29tcG9uZW50Q29uZmlnID0ge30pIHtcbiAgICAvLyBDcmVhdGUgdGhlIGNvbmZpZ3VyYXRpb24gZm9yIHRoaXMgY29tcG9uZW50XG4gICAgdGhpcy5jb25maWcgPSA8Q29uZmlnPnRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICB0YWc6ICdkaXYnLFxuICAgICAgaWQ6ICd7e1BSRUZJWH19LWlkLScgKyBHdWlkLm5leHQoKSxcbiAgICAgIGNzc1ByZWZpeDogJ3t7UFJFRklYfX0nLFxuICAgICAgY3NzQ2xhc3M6ICd1aS1jb21wb25lbnQnLFxuICAgICAgY3NzQ2xhc3NlczogW10sXG4gICAgICBoaWRkZW46IGZhbHNlLFxuICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIH0sIHt9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgY29tcG9uZW50LCBlLmcuIGJ5IGFwcGx5aW5nIGNvbmZpZyBzZXR0aW5ncy5cbiAgICogVGhpcyBtZXRob2QgbXVzdCBub3QgYmUgY2FsbGVkIGZyb20gb3V0c2lkZSB0aGUgVUkgZnJhbWV3b3JrLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBhdXRvbWF0aWNhbGx5IGNhbGxlZCBieSB0aGUge0BsaW5rIFVJSW5zdGFuY2VNYW5hZ2VyfS4gSWYgdGhlIGNvbXBvbmVudCBpcyBhbiBpbm5lciBjb21wb25lbnQgb2ZcbiAgICogc29tZSBjb21wb25lbnQsIGFuZCB0aHVzIGVuY2Fwc3VsYXRlZCBhYmQgbWFuYWdlZCBpbnRlcm5hbGx5IGFuZCBuZXZlciBkaXJlY3RseSBleHBvc2VkIHRvIHRoZSBVSU1hbmFnZXIsXG4gICAqIHRoaXMgbWV0aG9kIG11c3QgYmUgY2FsbGVkIGZyb20gdGhlIG1hbmFnaW5nIGNvbXBvbmVudCdzIHtAbGluayAjaW5pdGlhbGl6ZX0gbWV0aG9kLlxuICAgKi9cbiAgaW5pdGlhbGl6ZSgpOiB2b2lkIHtcbiAgICB0aGlzLmhpZGRlbiA9IHRoaXMuY29uZmlnLmhpZGRlbjtcbiAgICB0aGlzLmRpc2FibGVkID0gdGhpcy5jb25maWcuZGlzYWJsZWQ7XG5cbiAgICAvLyBIaWRlIHRoZSBjb21wb25lbnQgYXQgaW5pdGlhbGl6YXRpb24gaWYgaXQgaXMgY29uZmlndXJlZCB0byBiZSBoaWRkZW5cbiAgICBpZiAodGhpcy5pc0hpZGRlbigpKSB7XG4gICAgICB0aGlzLmhpZGRlbiA9IGZhbHNlOyAvLyBTZXQgZmxhZyB0byBmYWxzZSBmb3IgdGhlIGZvbGxvd2luZyBoaWRlKCkgY2FsbCB0byB3b3JrIChoaWRlKCkgY2hlY2tzIHRoZSBmbGFnKVxuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfVxuXG4gICAgLy8gRGlzYWJsZSB0aGUgY29tcG9uZW50IGF0IGluaXRpYWxpemF0aW9uIGlmIGl0IGlzIGNvbmZpZ3VyZWQgdG8gYmUgZGlzYWJsZWRcbiAgICBpZiAodGhpcy5pc0Rpc2FibGVkKCkpIHtcbiAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTsgLy8gU2V0IGZsYWcgdG8gZmFsc2UgZm9yIHRoZSBmb2xsb3dpbmcgZGlzYWJsZSgpIGNhbGwgdG8gd29yayAoZGlzYWJsZSgpIGNoZWNrcyB0aGUgZmxhZylcbiAgICAgIHRoaXMuZGlzYWJsZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb25maWd1cmVzIHRoZSBjb21wb25lbnQgZm9yIHRoZSBzdXBwbGllZCBQbGF5ZXIgYW5kIFVJSW5zdGFuY2VNYW5hZ2VyLiBUaGlzIGlzIHRoZSBwbGFjZSB3aGVyZSBhbGwgdGhlIG1hZ2ljXG4gICAqIGhhcHBlbnMsIHdoZXJlIGNvbXBvbmVudHMgdHlwaWNhbGx5IHN1YnNjcmliZSBhbmQgcmVhY3QgdG8gZXZlbnRzIChvbiB0aGVpciBET00gZWxlbWVudCwgdGhlIFBsYXllciwgb3IgdGhlXG4gICAqIFVJSW5zdGFuY2VNYW5hZ2VyKSwgYW5kIGJhc2ljYWxseSBldmVyeXRoaW5nIHRoYXQgbWFrZXMgdGhlbSBpbnRlcmFjdGl2ZS5cbiAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIG9ubHkgb25jZSwgd2hlbiB0aGUgVUlNYW5hZ2VyIGluaXRpYWxpemVzIHRoZSBVSS5cbiAgICpcbiAgICogU3ViY2xhc3NlcyB1c3VhbGx5IG92ZXJ3cml0ZSB0aGlzIG1ldGhvZCB0byBhZGQgdGhlaXIgb3duIGZ1bmN0aW9uYWxpdHkuXG4gICAqXG4gICAqIEBwYXJhbSBwbGF5ZXIgdGhlIHBsYXllciB3aGljaCB0aGlzIGNvbXBvbmVudCBjb250cm9sc1xuICAgKiBAcGFyYW0gdWltYW5hZ2VyIHRoZSBVSUluc3RhbmNlTWFuYWdlciB0aGF0IG1hbmFnZXMgdGhpcyBjb21wb25lbnRcbiAgICovXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHRoaXMub25TaG93LnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB1aW1hbmFnZXIub25Db21wb25lbnRTaG93LmRpc3BhdGNoKHRoaXMpO1xuICAgIH0pO1xuICAgIHRoaXMub25IaWRlLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB1aW1hbmFnZXIub25Db21wb25lbnRIaWRlLmRpc3BhdGNoKHRoaXMpO1xuICAgIH0pO1xuXG4gICAgLy8gVHJhY2sgdGhlIGhvdmVyZWQgc3RhdGUgb2YgdGhlIGVsZW1lbnRcbiAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5vbignbW91c2VlbnRlcicsICgpID0+IHtcbiAgICAgIHRoaXMub25Ib3ZlckNoYW5nZWRFdmVudCh0cnVlKTtcbiAgICB9KTtcbiAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5vbignbW91c2VsZWF2ZScsICgpID0+IHtcbiAgICAgIHRoaXMub25Ib3ZlckNoYW5nZWRFdmVudChmYWxzZSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVsZWFzZXMgYWxsIHJlc291cmNlcyBhbmQgZGVwZW5kZW5jaWVzIHRoYXQgdGhlIGNvbXBvbmVudCBob2xkcy4gUGxheWVyLCBET00sIGFuZCBVSU1hbmFnZXIgZXZlbnRzIGFyZVxuICAgKiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQgZHVyaW5nIHJlbGVhc2UgYW5kIGRvIG5vdCBleHBsaWNpdGx5IG5lZWQgdG8gYmUgcmVtb3ZlZCBoZXJlLlxuICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYnkgdGhlIFVJTWFuYWdlciB3aGVuIGl0IHJlbGVhc2VzIHRoZSBVSS5cbiAgICpcbiAgICogU3ViY2xhc3NlcyB0aGF0IG5lZWQgdG8gcmVsZWFzZSByZXNvdXJjZXMgc2hvdWxkIG92ZXJyaWRlIHRoaXMgbWV0aG9kIGFuZCBjYWxsIHN1cGVyLnJlbGVhc2UoKS5cbiAgICovXG4gIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgLy8gTm90aGluZyB0byBkbyBoZXJlLCBvdmVycmlkZSB3aGVyZSBuZWNlc3NhcnlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSB0aGUgRE9NIGVsZW1lbnQgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKlxuICAgKiBTdWJjbGFzc2VzIHVzdWFsbHkgb3ZlcndyaXRlIHRoaXMgbWV0aG9kIHRvIGV4dGVuZCBvciByZXBsYWNlIHRoZSBET00gZWxlbWVudCB3aXRoIHRoZWlyIG93biBkZXNpZ24uXG4gICAqL1xuICBwcm90ZWN0ZWQgdG9Eb21FbGVtZW50KCk6IERPTSB7XG4gICAgbGV0IGVsZW1lbnQgPSBuZXcgRE9NKHRoaXMuY29uZmlnLnRhZywge1xuICAgICAgJ2lkJzogdGhpcy5jb25maWcuaWQsXG4gICAgICAnY2xhc3MnOiB0aGlzLmdldENzc0NsYXNzZXMoKSxcbiAgICAgICdyb2xlJzogdGhpcy5jb25maWcucm9sZSxcbiAgICB9KTtcblxuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIERPTSBlbGVtZW50IG9mIHRoaXMgY29tcG9uZW50LiBDcmVhdGVzIHRoZSBET00gZWxlbWVudCBpZiBpdCBkb2VzIG5vdCB5ZXQgZXhpc3QuXG4gICAqXG4gICAqIFNob3VsZCBub3QgYmUgb3ZlcndyaXR0ZW4gYnkgc3ViY2xhc3Nlcy5cbiAgICpcbiAgICogQHJldHVybnMge0RPTX1cbiAgICovXG4gIGdldERvbUVsZW1lbnQoKTogRE9NIHtcbiAgICBpZiAoIXRoaXMuZWxlbWVudCkge1xuICAgICAgdGhpcy5lbGVtZW50ID0gdGhpcy50b0RvbUVsZW1lbnQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lbGVtZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIGNvbXBvbmVudCBoYXMgYSBET00gZWxlbWVudC5cbiAgICovXG4gIGhhc0RvbUVsZW1lbnQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy5lbGVtZW50KTtcbiAgfVxuXG4gIHNldEFyaWFMYWJlbChsYWJlbDogTG9jYWxpemFibGVUZXh0KTogdm9pZCB7XG4gICAgdGhpcy5zZXRBcmlhQXR0cignbGFiZWwnLCBpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24obGFiZWwpKTtcbiAgfVxuXG4gIHNldEFyaWFBdHRyKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmF0dHIoYGFyaWEtJHtuYW1lfWAsIHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXJnZXMgYSBjb25maWd1cmF0aW9uIHdpdGggYSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gYW5kIGEgYmFzZSBjb25maWd1cmF0aW9uIGZyb20gdGhlIHN1cGVyY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSBjb25maWcgdGhlIGNvbmZpZ3VyYXRpb24gc2V0dGluZ3MgZm9yIHRoZSBjb21wb25lbnRzLCBhcyB1c3VhbGx5IHBhc3NlZCB0byB0aGUgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIGRlZmF1bHRzIGEgZGVmYXVsdCBjb25maWd1cmF0aW9uIGZvciBzZXR0aW5ncyB0aGF0IGFyZSBub3QgcGFzc2VkIHdpdGggdGhlIGNvbmZpZ3VyYXRpb25cbiAgICogQHBhcmFtIGJhc2UgY29uZmlndXJhdGlvbiBpbmhlcml0ZWQgZnJvbSBhIHN1cGVyY2xhc3NcbiAgICogQHJldHVybnMge0NvbmZpZ31cbiAgICovXG4gIHByb3RlY3RlZCBtZXJnZUNvbmZpZzxDb25maWc+KGNvbmZpZzogQ29uZmlnLCBkZWZhdWx0czogQ29uZmlnLCBiYXNlOiBDb25maWcpOiBDb25maWcge1xuICAgIC8vIEV4dGVuZCBkZWZhdWx0IGNvbmZpZyB3aXRoIHN1cHBsaWVkIGNvbmZpZ1xuICAgIGxldCBtZXJnZWQgPSBPYmplY3QuYXNzaWduKHt9LCBiYXNlLCBkZWZhdWx0cywgY29uZmlnKTtcblxuICAgIC8vIFJldHVybiB0aGUgZXh0ZW5kZWQgY29uZmlnXG4gICAgcmV0dXJuIG1lcmdlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgbWV0aG9kIHRoYXQgcmV0dXJucyBhIHN0cmluZyBvZiBhbGwgQ1NTIGNsYXNzZXMgb2YgdGhlIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHByb3RlY3RlZCBnZXRDc3NDbGFzc2VzKCk6IHN0cmluZyB7XG4gICAgLy8gTWVyZ2UgYWxsIENTUyBjbGFzc2VzIGludG8gc2luZ2xlIGFycmF5XG4gICAgbGV0IGZsYXR0ZW5lZEFycmF5ID0gW3RoaXMuY29uZmlnLmNzc0NsYXNzXS5jb25jYXQodGhpcy5jb25maWcuY3NzQ2xhc3Nlcyk7XG4gICAgLy8gUHJlZml4IGNsYXNzZXNcbiAgICBmbGF0dGVuZWRBcnJheSA9IGZsYXR0ZW5lZEFycmF5Lm1hcCgoY3NzKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5wcmVmaXhDc3MoY3NzKTtcbiAgICB9KTtcbiAgICAvLyBKb2luIGFycmF5IHZhbHVlcyBpbnRvIGEgc3RyaW5nXG4gICAgbGV0IGZsYXR0ZW5lZFN0cmluZyA9IGZsYXR0ZW5lZEFycmF5LmpvaW4oJyAnKTtcbiAgICAvLyBSZXR1cm4gdHJpbW1lZCBzdHJpbmcgdG8gcHJldmVudCB3aGl0ZXNwYWNlIGF0IHRoZSBlbmQgZnJvbSB0aGUgam9pbiBvcGVyYXRpb25cbiAgICByZXR1cm4gZmxhdHRlbmVkU3RyaW5nLnRyaW0oKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBwcmVmaXhDc3MoY3NzQ2xhc3NPcklkOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5jc3NQcmVmaXggKyAnLScgKyBjc3NDbGFzc09ySWQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY29uZmlndXJhdGlvbiBvYmplY3Qgb2YgdGhlIGNvbXBvbmVudC5cbiAgICogQHJldHVybnMge0NvbmZpZ31cbiAgICovXG4gIHB1YmxpYyBnZXRDb25maWcoKTogQ29uZmlnIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWc7XG4gIH1cblxuICAvKipcbiAgICogSGlkZXMgdGhlIGNvbXBvbmVudCBpZiBzaG93bi5cbiAgICogVGhpcyBtZXRob2QgYmFzaWNhbGx5IHRyYW5zZmVycyB0aGUgY29tcG9uZW50IGludG8gdGhlIGhpZGRlbiBzdGF0ZS4gQWN0dWFsIGhpZGluZyBpcyBkb25lIHZpYSBDU1MuXG4gICAqL1xuICBoaWRlKCkge1xuICAgIGlmICghdGhpcy5oaWRkZW4pIHtcbiAgICAgIHRoaXMuaGlkZGVuID0gdHJ1ZTtcbiAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKENvbXBvbmVudC5DTEFTU19ISURERU4pKTtcbiAgICAgIHRoaXMub25IaWRlRXZlbnQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2hvd3MgdGhlIGNvbXBvbmVudCBpZiBoaWRkZW4uXG4gICAqL1xuICBzaG93KCkge1xuICAgIGlmICh0aGlzLmhpZGRlbikge1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoQ29tcG9uZW50LkNMQVNTX0hJRERFTikpO1xuICAgICAgdGhpcy5oaWRkZW4gPSBmYWxzZTtcbiAgICAgIHRoaXMub25TaG93RXZlbnQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgY29tcG9uZW50IGlzIGhpZGRlbi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGNvbXBvbmVudCBpcyBoaWRkZW4sIGVsc2UgZmFsc2VcbiAgICovXG4gIGlzSGlkZGVuKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmhpZGRlbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBjb21wb25lbnQgaXMgdmlzaWJsZSwgZWxzZSBmYWxzZVxuICAgKi9cbiAgaXNTaG93bigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMuaXNIaWRkZW4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBoaWRkZW4gc3RhdGUgYnkgaGlkaW5nIHRoZSBjb21wb25lbnQgaWYgaXQgaXMgc2hvd24sIG9yIHNob3dpbmcgaXQgaWYgaGlkZGVuLlxuICAgKi9cbiAgdG9nZ2xlSGlkZGVuKCkge1xuICAgIGlmICh0aGlzLmlzSGlkZGVuKCkpIHtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGlzYWJsZXMgdGhlIGNvbXBvbmVudC5cbiAgICogVGhpcyBtZXRob2QgYmFzaWNhbGx5IHRyYW5zZmVycyB0aGUgY29tcG9uZW50IGludG8gdGhlIGRpc2FibGVkIHN0YXRlLiBBY3R1YWwgZGlzYWJsaW5nIGlzIGRvbmUgdmlhIENTUyBvciBjaGlsZFxuICAgKiBjb21wb25lbnRzLiAoZS5nLiBCdXR0b24gbmVlZHMgdG8gdW5zdWJzY3JpYmUgY2xpY2sgbGlzdGVuZXJzKVxuICAgKi9cbiAgZGlzYWJsZSgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoQ29tcG9uZW50LkNMQVNTX0RJU0FCTEVEKSk7XG4gICAgICB0aGlzLm9uRGlzYWJsZWRFdmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFbmFibGVzIHRoZSBjb21wb25lbnQuXG4gICAqIFRoaXMgbWV0aG9kIGJhc2ljYWxseSB0cmFuc2ZlcnMgdGhlIGNvbXBvbmVudCBpbnRvIHRoZSBlbmFibGVkIHN0YXRlLiBBY3R1YWwgZW5hYmxpbmcgaXMgZG9uZSB2aWEgQ1NTIG9yIGNoaWxkXG4gICAqIGNvbXBvbmVudHMuIChlLmcuIEJ1dHRvbiBuZWVkcyB0byBzdWJzY3JpYmUgY2xpY2sgbGlzdGVuZXJzKVxuICAgKi9cbiAgZW5hYmxlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeENzcyhDb21wb25lbnQuQ0xBU1NfRElTQUJMRUQpKTtcbiAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMub25FbmFibGVkRXZlbnQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLCBlbHNlIGZhbHNlXG4gICAqL1xuICBpc0Rpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmRpc2FibGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIGNvbXBvbmVudCBpcyBlbmFibGVkLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgY29tcG9uZW50IGlzIGVuYWJsZWQsIGVsc2UgZmFsc2VcbiAgICovXG4gIGlzRW5hYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMuaXNEaXNhYmxlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIGNvbXBvbmVudCBpcyBjdXJyZW50bHkgaG92ZXJlZC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGNvbXBvbmVudCBpcyBob3ZlcmVkLCBlbHNlIGZhbHNlXG4gICAqL1xuICBpc0hvdmVyZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaG92ZXJlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB0aGUgb25TaG93IGV2ZW50LlxuICAgKiBTZWUgdGhlIGRldGFpbGVkIGV4cGxhbmF0aW9uIG9uIGV2ZW50IGFyY2hpdGVjdHVyZSBvbiB0aGUge0BsaW5rICNjb21wb25lbnRFdmVudHMgZXZlbnRzIGxpc3R9LlxuICAgKi9cbiAgcHJvdGVjdGVkIG9uU2hvd0V2ZW50KCk6IHZvaWQge1xuICAgIHRoaXMuY29tcG9uZW50RXZlbnRzLm9uU2hvdy5kaXNwYXRjaCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB0aGUgb25IaWRlIGV2ZW50LlxuICAgKiBTZWUgdGhlIGRldGFpbGVkIGV4cGxhbmF0aW9uIG9uIGV2ZW50IGFyY2hpdGVjdHVyZSBvbiB0aGUge0BsaW5rICNjb21wb25lbnRFdmVudHMgZXZlbnRzIGxpc3R9LlxuICAgKi9cbiAgcHJvdGVjdGVkIG9uSGlkZUV2ZW50KCk6IHZvaWQge1xuICAgIHRoaXMuY29tcG9uZW50RXZlbnRzLm9uSGlkZS5kaXNwYXRjaCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB0aGUgb25FbmFibGVkIGV2ZW50LlxuICAgKiBTZWUgdGhlIGRldGFpbGVkIGV4cGxhbmF0aW9uIG9uIGV2ZW50IGFyY2hpdGVjdHVyZSBvbiB0aGUge0BsaW5rICNjb21wb25lbnRFdmVudHMgZXZlbnRzIGxpc3R9LlxuICAgKi9cbiAgcHJvdGVjdGVkIG9uRW5hYmxlZEV2ZW50KCk6IHZvaWQge1xuICAgIHRoaXMuY29tcG9uZW50RXZlbnRzLm9uRW5hYmxlZC5kaXNwYXRjaCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB0aGUgb25EaXNhYmxlZCBldmVudC5cbiAgICogU2VlIHRoZSBkZXRhaWxlZCBleHBsYW5hdGlvbiBvbiBldmVudCBhcmNoaXRlY3R1cmUgb24gdGhlIHtAbGluayAjY29tcG9uZW50RXZlbnRzIGV2ZW50cyBsaXN0fS5cbiAgICovXG4gIHByb3RlY3RlZCBvbkRpc2FibGVkRXZlbnQoKTogdm9pZCB7XG4gICAgdGhpcy5jb21wb25lbnRFdmVudHMub25EaXNhYmxlZC5kaXNwYXRjaCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB0aGUgb25Ib3ZlckNoYW5nZWQgZXZlbnQuXG4gICAqIFNlZSB0aGUgZGV0YWlsZWQgZXhwbGFuYXRpb24gb24gZXZlbnQgYXJjaGl0ZWN0dXJlIG9uIHRoZSB7QGxpbmsgI2NvbXBvbmVudEV2ZW50cyBldmVudHMgbGlzdH0uXG4gICAqL1xuICBwcm90ZWN0ZWQgb25Ib3ZlckNoYW5nZWRFdmVudChob3ZlcmVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5ob3ZlcmVkID0gaG92ZXJlZDtcbiAgICB0aGlzLmNvbXBvbmVudEV2ZW50cy5vbkhvdmVyQ2hhbmdlZC5kaXNwYXRjaCh0aGlzLCB7IGhvdmVyZWQ6IGhvdmVyZWQgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgZXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgc2hvd2luZy5cbiAgICogU2VlIHRoZSBkZXRhaWxlZCBleHBsYW5hdGlvbiBvbiBldmVudCBhcmNoaXRlY3R1cmUgb24gdGhlIHtAbGluayAjY29tcG9uZW50RXZlbnRzIGV2ZW50cyBsaXN0fS5cbiAgICogQHJldHVybnMge0V2ZW50PENvbXBvbmVudDxDb25maWc+LCBOb0FyZ3M+fVxuICAgKi9cbiAgZ2V0IG9uU2hvdygpOiBFdmVudDxDb21wb25lbnQ8Q29uZmlnPiwgTm9BcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50RXZlbnRzLm9uU2hvdy5nZXRFdmVudCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGhpZGluZy5cbiAgICogU2VlIHRoZSBkZXRhaWxlZCBleHBsYW5hdGlvbiBvbiBldmVudCBhcmNoaXRlY3R1cmUgb24gdGhlIHtAbGluayAjY29tcG9uZW50RXZlbnRzIGV2ZW50cyBsaXN0fS5cbiAgICogQHJldHVybnMge0V2ZW50PENvbXBvbmVudDxDb25maWc+LCBOb0FyZ3M+fVxuICAgKi9cbiAgZ2V0IG9uSGlkZSgpOiBFdmVudDxDb21wb25lbnQ8Q29uZmlnPiwgTm9BcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50RXZlbnRzLm9uSGlkZS5nZXRFdmVudCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGVuYWJsaW5nLlxuICAgKiBTZWUgdGhlIGRldGFpbGVkIGV4cGxhbmF0aW9uIG9uIGV2ZW50IGFyY2hpdGVjdHVyZSBvbiB0aGUge0BsaW5rICNjb21wb25lbnRFdmVudHMgZXZlbnRzIGxpc3R9LlxuICAgKiBAcmV0dXJucyB7RXZlbnQ8Q29tcG9uZW50PENvbmZpZz4sIE5vQXJncz59XG4gICAqL1xuICBnZXQgb25FbmFibGVkKCk6IEV2ZW50PENvbXBvbmVudDxDb25maWc+LCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnRFdmVudHMub25FbmFibGVkLmdldEV2ZW50KCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgZXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsaW5nLlxuICAgKiBTZWUgdGhlIGRldGFpbGVkIGV4cGxhbmF0aW9uIG9uIGV2ZW50IGFyY2hpdGVjdHVyZSBvbiB0aGUge0BsaW5rICNjb21wb25lbnRFdmVudHMgZXZlbnRzIGxpc3R9LlxuICAgKiBAcmV0dXJucyB7RXZlbnQ8Q29tcG9uZW50PENvbmZpZz4sIE5vQXJncz59XG4gICAqL1xuICBnZXQgb25EaXNhYmxlZCgpOiBFdmVudDxDb21wb25lbnQ8Q29uZmlnPiwgTm9BcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50RXZlbnRzLm9uRGlzYWJsZWQuZ2V0RXZlbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCdzIGhvdmVyLXN0YXRlIGlzIGNoYW5naW5nLlxuICAgKiBAcmV0dXJucyB7RXZlbnQ8Q29tcG9uZW50PENvbmZpZz4sIENvbXBvbmVudEhvdmVyQ2hhbmdlZEV2ZW50QXJncz59XG4gICAqL1xuICBnZXQgb25Ib3ZlckNoYW5nZWQoKTogRXZlbnQ8Q29tcG9uZW50PENvbmZpZz4sIENvbXBvbmVudEhvdmVyQ2hhbmdlZEV2ZW50QXJncz4ge1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudEV2ZW50cy5vbkhvdmVyQ2hhbmdlZC5nZXRFdmVudCgpO1xuICB9XG59IiwiaW1wb3J0IHtDb21wb25lbnRDb25maWcsIENvbXBvbmVudH0gZnJvbSAnLi9jb21wb25lbnQnO1xuaW1wb3J0IHtET019IGZyb20gJy4uL2RvbSc7XG5pbXBvcnQge0FycmF5VXRpbHN9IGZyb20gJy4uL2FycmF5dXRpbHMnO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgYSB7QGxpbmsgQ29udGFpbmVyfS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb250YWluZXJDb25maWcgZXh0ZW5kcyBDb21wb25lbnRDb25maWcge1xuICAvKipcbiAgICogQ2hpbGQgY29tcG9uZW50cyBvZiB0aGUgY29udGFpbmVyLlxuICAgKi9cbiAgY29tcG9uZW50cz86IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+W107XG59XG5cbi8qKlxuICogQSBjb250YWluZXIgY29tcG9uZW50IHRoYXQgY2FuIGNvbnRhaW4gYSBjb2xsZWN0aW9uIG9mIGNoaWxkIGNvbXBvbmVudHMuXG4gKiBDb21wb25lbnRzIGNhbiBiZSBhZGRlZCBhdCBjb25zdHJ1Y3Rpb24gdGltZSB0aHJvdWdoIHRoZSB7QGxpbmsgQ29udGFpbmVyQ29uZmlnI2NvbXBvbmVudHN9IHNldHRpbmcsIG9yIGxhdGVyXG4gKiB0aHJvdWdoIHRoZSB7QGxpbmsgQ29udGFpbmVyI2FkZENvbXBvbmVudH0gbWV0aG9kLiBUaGUgVUlNYW5hZ2VyIGF1dG9tYXRpY2FsbHkgdGFrZXMgY2FyZSBvZiBhbGwgY29tcG9uZW50cywgaS5lLiBpdFxuICogaW5pdGlhbGl6ZXMgYW5kIGNvbmZpZ3VyZXMgdGhlbSBhdXRvbWF0aWNhbGx5LlxuICpcbiAqIEluIHRoZSBET00sIHRoZSBjb250YWluZXIgY29uc2lzdHMgb2YgYW4gb3V0ZXIgPGRpdj4gKHRoYXQgY2FuIGJlIGNvbmZpZ3VyZWQgYnkgdGhlIGNvbmZpZykgYW5kIGFuIGlubmVyIHdyYXBwZXJcbiAqIDxkaXY+IHRoYXQgY29udGFpbnMgdGhlIGNvbXBvbmVudHMuIFRoaXMgZG91YmxlLTxkaXY+LXN0cnVjdHVyZSBpcyBvZnRlbiByZXF1aXJlZCB0byBhY2hpZXZlIG1hbnkgYWR2YW5jZWQgZWZmZWN0c1xuICogaW4gQ1NTIGFuZC9vciBKUywgZS5nLiBhbmltYXRpb25zIGFuZCBjZXJ0YWluIGZvcm1hdHRpbmcgd2l0aCBhYnNvbHV0ZSBwb3NpdGlvbmluZy5cbiAqXG4gKiBET00gZXhhbXBsZTpcbiAqIDxjb2RlPlxuICogICAgIDxkaXYgY2xhc3M9J3VpLWNvbnRhaW5lcic+XG4gKiAgICAgICAgIDxkaXYgY2xhc3M9J2NvbnRhaW5lci13cmFwcGVyJz5cbiAqICAgICAgICAgICAgIC4uLiBjaGlsZCBjb21wb25lbnRzIC4uLlxuICogICAgICAgICA8L2Rpdj5cbiAqICAgICA8L2Rpdj5cbiAqIDwvY29kZT5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbnRhaW5lcjxDb25maWcgZXh0ZW5kcyBDb250YWluZXJDb25maWc+IGV4dGVuZHMgQ29tcG9uZW50PENvbmZpZz4ge1xuXG4gIC8qKlxuICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgaW5uZXIgZWxlbWVudCB0aGF0IGNvbnRhaW5zIHRoZSBjb21wb25lbnRzIG9mIHRoZSBjb250YWluZXIuXG4gICAqL1xuICBwcml2YXRlIGlubmVyQ29udGFpbmVyRWxlbWVudDogRE9NO1xuICBwcml2YXRlIGNvbXBvbmVudHNUb0FkZDogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz5bXTtcbiAgcHJpdmF0ZSBjb21wb25lbnRzVG9SZW1vdmU6IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+W107XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1jb250YWluZXInLFxuICAgICAgY29tcG9uZW50czogW10sXG4gICAgfSBhcyBDb25maWcsIHRoaXMuY29uZmlnKTtcblxuICAgIHRoaXMuY29tcG9uZW50c1RvQWRkID0gW107XG4gICAgdGhpcy5jb21wb25lbnRzVG9SZW1vdmUgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY2hpbGQgY29tcG9uZW50IHRvIHRoZSBjb250YWluZXIuXG4gICAqIEBwYXJhbSBjb21wb25lbnQgdGhlIGNvbXBvbmVudCB0byBhZGRcbiAgICovXG4gIGFkZENvbXBvbmVudChjb21wb25lbnQ6IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+KSB7XG4gICAgdGhpcy5jb25maWcuY29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgdGhpcy5jb21wb25lbnRzVG9BZGQucHVzaChjb21wb25lbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBjaGlsZCBjb21wb25lbnQgZnJvbSB0aGUgY29udGFpbmVyLlxuICAgKiBAcGFyYW0gY29tcG9uZW50IHRoZSBjb21wb25lbnQgdG8gcmVtb3ZlXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gcmVtb3ZlZCwgZmFsc2UgaWYgaXQgaXMgbm90IGNvbnRhaW5lZCBpbiB0aGlzIGNvbnRhaW5lclxuICAgKi9cbiAgcmVtb3ZlQ29tcG9uZW50KGNvbXBvbmVudDogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4pOiBib29sZWFuIHtcbiAgICBpZiAoQXJyYXlVdGlscy5yZW1vdmUodGhpcy5jb25maWcuY29tcG9uZW50cywgY29tcG9uZW50KSAhPSBudWxsKSB7XG4gICAgICB0aGlzLmNvbXBvbmVudHNUb1JlbW92ZS5wdXNoKGNvbXBvbmVudCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGFuIGFycmF5IG9mIGFsbCBjaGlsZCBjb21wb25lbnRzIGluIHRoaXMgY29udGFpbmVyLlxuICAgKiBAcmV0dXJucyB7Q29tcG9uZW50PENvbXBvbmVudENvbmZpZz5bXX1cbiAgICovXG4gIGdldENvbXBvbmVudHMoKTogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz5bXSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLmNvbXBvbmVudHM7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgY2hpbGQgY29tcG9uZW50cyBmcm9tIHRoZSBjb250YWluZXIuXG4gICAqL1xuICByZW1vdmVDb21wb25lbnRzKCk6IHZvaWQge1xuICAgIGZvciAobGV0IGNvbXBvbmVudCBvZiB0aGlzLmdldENvbXBvbmVudHMoKS5zbGljZSgpKSB7XG4gICAgICB0aGlzLnJlbW92ZUNvbXBvbmVudChjb21wb25lbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBET00gb2YgdGhlIGNvbnRhaW5lciB3aXRoIHRoZSBjdXJyZW50IGNvbXBvbmVudHMuXG4gICAqL1xuICBwcm90ZWN0ZWQgdXBkYXRlQ29tcG9uZW50cygpOiB2b2lkIHtcbiAgICAvKiBXZSBjYW5ub3QganVzdCBjbGVhciB0aGUgY29udGFpbmVyIHRvIHJlbW92ZSBhbGwgZWxlbWVudHMgYW5kIHRoZW4gcmUtYWRkIHRob3NlIHRoYXQgc2hvdWxkIHN0YXksIGJlY2F1c2VcbiAgICAgKiBJRSBsb29zZXMgdGhlIGlubmVySFRNTCBvZiB1bmF0dGFjaGVkIGVsZW1lbnRzLCBsZWFkaW5nIHRvIGVtcHR5IGVsZW1lbnRzIHdpdGhpbiB0aGUgY29udGFpbmVyIChlLmcuIG1pc3NpbmdcbiAgICAgKiBzdWJ0aXRsZSB0ZXh0IGluIFN1YnRpdGxlTGFiZWwpLlxuICAgICAqIEluc3RlYWQsIHdlIGtlZXAgYSBsaXN0IG9mIGVsZW1lbnRzIHRvIGFkZCBhbmQgcmVtb3ZlLCBsZWF2aW5nIHJlbWFpbmluZyBlbGVtZW50cyBhbG9uZS4gQnkga2VlcGluZyB0aGVtIGluXG4gICAgICogdGhlIERPTSwgdGhlaXIgY29udGVudCBnZXRzIHByZXNlcnZlZCBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICovXG4gICAgbGV0IGNvbXBvbmVudDtcblxuICAgIHdoaWxlIChjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudHNUb1JlbW92ZS5zaGlmdCgpKSB7XG4gICAgICBjb21wb25lbnQuZ2V0RG9tRWxlbWVudCgpLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIHdoaWxlIChjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudHNUb0FkZC5zaGlmdCgpKSB7XG4gICAgICB0aGlzLmlubmVyQ29udGFpbmVyRWxlbWVudC5hcHBlbmQoY29tcG9uZW50LmdldERvbUVsZW1lbnQoKSk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHRvRG9tRWxlbWVudCgpOiBET00ge1xuICAgIC8vIENyZWF0ZSB0aGUgY29udGFpbmVyIGVsZW1lbnQgKHRoZSBvdXRlciA8ZGl2PilcbiAgICBsZXQgY29udGFpbmVyRWxlbWVudCA9IG5ldyBET00odGhpcy5jb25maWcudGFnLCB7XG4gICAgICAnaWQnOiB0aGlzLmNvbmZpZy5pZCxcbiAgICAgICdjbGFzcyc6IHRoaXMuZ2V0Q3NzQ2xhc3NlcygpLFxuICAgICAgJ3JvbGUnOiB0aGlzLmNvbmZpZy5yb2xlLFxuICAgICAgJ2FyaWEtbGFiZWwnOiBpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24odGhpcy5jb25maWcuYXJpYUxhYmVsKSxcbiAgICB9KTtcblxuICAgIC8vIENyZWF0ZSB0aGUgaW5uZXIgY29udGFpbmVyIGVsZW1lbnQgKHRoZSBpbm5lciA8ZGl2PikgdGhhdCB3aWxsIGNvbnRhaW4gdGhlIGNvbXBvbmVudHNcbiAgICBsZXQgaW5uZXJDb250YWluZXIgPSBuZXcgRE9NKHRoaXMuY29uZmlnLnRhZywge1xuICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ2NvbnRhaW5lci13cmFwcGVyJyksXG4gICAgfSk7XG4gICAgdGhpcy5pbm5lckNvbnRhaW5lckVsZW1lbnQgPSBpbm5lckNvbnRhaW5lcjtcblxuICAgIGZvciAobGV0IGluaXRpYWxDb21wb25lbnQgb2YgdGhpcy5jb25maWcuY29tcG9uZW50cykge1xuICAgICAgdGhpcy5jb21wb25lbnRzVG9BZGQucHVzaChpbml0aWFsQ29tcG9uZW50KTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVDb21wb25lbnRzKCk7XG5cbiAgICBjb250YWluZXJFbGVtZW50LmFwcGVuZChpbm5lckNvbnRhaW5lcik7XG5cbiAgICByZXR1cm4gY29udGFpbmVyRWxlbWVudDtcbiAgfVxufSIsImltcG9ydCB7Q29udGFpbmVyQ29uZmlnLCBDb250YWluZXJ9IGZyb20gJy4vY29udGFpbmVyJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge1VJVXRpbHN9IGZyb20gJy4uL3VpdXRpbHMnO1xuaW1wb3J0IHtTcGFjZXJ9IGZyb20gJy4vc3BhY2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuaW1wb3J0IHsgQnJvd3NlclV0aWxzIH0gZnJvbSAnLi4vYnJvd3NlcnV0aWxzJztcbmltcG9ydCB7Q29tcG9uZW50LCBDb21wb25lbnRDb25maWd9IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCB7U2V0dGluZ3NQYW5lbH0gZnJvbSAnLi9zZXR0aW5nc3BhbmVsJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgdGhlIHtAbGluayBDb250cm9sQmFyfS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb250cm9sQmFyQ29uZmlnIGV4dGVuZHMgQ29udGFpbmVyQ29uZmlnIHtcbiAgLy8gbm90aGluZyB5ZXRcbn1cblxuLyoqXG4gKiBBIGNvbnRhaW5lciBmb3IgbWFpbiBwbGF5ZXIgY29udHJvbCBjb21wb25lbnRzLCBlLmcuIHBsYXkgdG9nZ2xlIGJ1dHRvbiwgc2VlayBiYXIsIHZvbHVtZSBjb250cm9sLCBmdWxsc2NyZWVuIHRvZ2dsZVxuICogYnV0dG9uLlxuICovXG5leHBvcnQgY2xhc3MgQ29udHJvbEJhciBleHRlbmRzIENvbnRhaW5lcjxDb250cm9sQmFyQ29uZmlnPiB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBDb250cm9sQmFyQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktY29udHJvbGJhcicsXG4gICAgICBoaWRkZW46IHRydWUsXG4gICAgICByb2xlOiAncmVnaW9uJyxcbiAgICAgIGFyaWFMYWJlbDogaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbnRyb2xCYXInKSxcbiAgICB9LCA8Q29udHJvbEJhckNvbmZpZz50aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgLy8gQ291bnRzIGhvdyBtYW55IGNvbXBvbmVudHMgYXJlIGhvdmVyZWQgYW5kIGJsb2NrIGhpZGluZyBvZiB0aGUgY29udHJvbCBiYXJcbiAgICBsZXQgaG92ZXJTdGFja0NvdW50ID0gMDtcbiAgICBsZXQgaXNTZXR0aW5nc1BhbmVsU2hvd24gPSBmYWxzZTtcblxuICAgIC8vIG9ubHkgZW5hYmxpbmcgdGhpcyBmb3Igbm9uLW1vYmlsZSBwbGF0Zm9ybXMgd2l0aG91dCB0b3VjaCBpbnB1dC4gZW5hYmxpbmcgdGhpc1xuICAgIC8vIGZvciB0b3VjaCBkZXZpY2VzIGNhdXNlcyB0aGUgVUkgdG8gbm90IGRpc2FwcGVhciBhZnRlciBoaWRlRGVsYXkgc2Vjb25kcy5cbiAgICAvLyBJbnN0ZWFkLCBpdCB3aWxsIHN0YXkgdmlzaWJsZSB1bnRpbCBhbm90aGVyIG1hbnVhbCBpbnRlcmFjdGlvbiBpcyBwZXJmb3JtZWQuXG4gICAgaWYgKHVpbWFuYWdlci5nZXRDb25maWcoKS5kaXNhYmxlQXV0b0hpZGVXaGVuSG92ZXJlZCAmJiAhQnJvd3NlclV0aWxzLmlzTW9iaWxlKSB7XG4gICAgICAvLyBUcmFjayBob3ZlciBzdGF0dXMgb2YgY2hpbGQgY29tcG9uZW50c1xuICAgICAgVUlVdGlscy50cmF2ZXJzZVRyZWUodGhpcywgKGNvbXBvbmVudCkgPT4ge1xuICAgICAgICAvLyBEbyBub3QgdHJhY2sgaG92ZXIgc3RhdHVzIG9mIGNoaWxkIGNvbnRhaW5lcnMgb3Igc3BhY2Vycywgb25seSBvZiAncmVhbCcgY29udHJvbHNcbiAgICAgICAgaWYgKGNvbXBvbmVudCBpbnN0YW5jZW9mIENvbnRhaW5lciB8fCBjb21wb25lbnQgaW5zdGFuY2VvZiBTcGFjZXIpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdWJzY3JpYmUgaG92ZXIgZXZlbnQgYW5kIGtlZXAgYSBjb3VudCBvZiB0aGUgbnVtYmVyIG9mIGhvdmVyZWQgY2hpbGRyZW5cbiAgICAgICAgY29tcG9uZW50Lm9uSG92ZXJDaGFuZ2VkLnN1YnNjcmliZSgoXywgYXJncykgPT4ge1xuICAgICAgICAgIGlmIChhcmdzLmhvdmVyZWQpIHtcbiAgICAgICAgICAgIGhvdmVyU3RhY2tDb3VudCsrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBob3ZlclN0YWNrQ291bnQtLTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKEJyb3dzZXJVdGlscy5pc01vYmlsZSkge1xuICAgICAgdWltYW5hZ2VyLm9uQ29tcG9uZW50U2hvdy5zdWJzY3JpYmUoKGNvbXBvbmVudDogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4pID0+IHtcbiAgICAgICAgaWYgKGNvbXBvbmVudCBpbnN0YW5jZW9mIFNldHRpbmdzUGFuZWwpIHtcbiAgICAgICAgICBpc1NldHRpbmdzUGFuZWxTaG93biA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB1aW1hbmFnZXIub25Db21wb25lbnRIaWRlLnN1YnNjcmliZSgoY29tcG9uZW50OiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPikgPT4ge1xuICAgICAgICBpZiAoY29tcG9uZW50IGluc3RhbmNlb2YgU2V0dGluZ3NQYW5lbCkge1xuICAgICAgICAgIGlzU2V0dGluZ3NQYW5lbFNob3duID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHVpbWFuYWdlci5vbkNvbnRyb2xzU2hvdy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfSk7XG5cbiAgICB1aW1hbmFnZXIub25QcmV2aWV3Q29udHJvbHNIaWRlLnN1YnNjcmliZSgoc2VuZGVyLCBhcmdzKSA9PiB7XG4gICAgICAvLyBDYW5jZWwgdGhlIGhpZGUgZXZlbnQgaWYgaG92ZXJlZCBjaGlsZCBjb21wb25lbnRzIGJsb2NrIGhpZGluZyBvciBpZiB0aGUgc2V0dGluZ3MgcGFuZWwgaXMgYWN0aXZlIG9uIG1vYmlsZS5cbiAgICAgIGFyZ3MuY2FuY2VsID0gYXJncy5jYW5jZWwgfHwgKGhvdmVyU3RhY2tDb3VudCA+IDAgfHwgaXNTZXR0aW5nc1BhbmVsU2hvd24pO1xuICAgIH0pO1xuXG4gICAgdWltYW5hZ2VyLm9uQ29udHJvbHNIaWRlLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHtDb250YWluZXJDb25maWcsIENvbnRhaW5lcn0gZnJvbSAnLi9jb250YWluZXInO1xuaW1wb3J0IHtMYWJlbCwgTGFiZWxDb25maWd9IGZyb20gJy4vbGFiZWwnO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7VHZOb2lzZUNhbnZhc30gZnJvbSAnLi90dm5vaXNlY2FudmFzJztcbmltcG9ydCB7IEVycm9yVXRpbHMgfSBmcm9tICcuLi9lcnJvcnV0aWxzJztcbmltcG9ydCB7IEVycm9yRXZlbnQsIFBsYXllckFQSSwgUGxheWVyRXZlbnRCYXNlIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7XG4gIGlzTW9iaWxlVjNQbGF5ZXJBUEksXG4gIE1vYmlsZVYzUGxheWVyQVBJLCBNb2JpbGVWM1BsYXllckVycm9yRXZlbnQsIE1vYmlsZVYzUGxheWVyRXZlbnQsIE1vYmlsZVYzU291cmNlRXJyb3JFdmVudCxcbn0gZnJvbSAnLi4vbW9iaWxldjNwbGF5ZXJhcGknO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yTWVzc2FnZVRyYW5zbGF0b3Ige1xuICAoZXJyb3I6IEVycm9yRXZlbnQgfCBNb2JpbGVWM1BsYXllckVycm9yRXZlbnQpOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXJyb3JNZXNzYWdlTWFwIHtcbiAgW2NvZGU6IG51bWJlcl06IHN0cmluZyB8IEVycm9yTWVzc2FnZVRyYW5zbGF0b3I7XG59XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIHRoZSB7QGxpbmsgRXJyb3JNZXNzYWdlT3ZlcmxheX0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRXJyb3JNZXNzYWdlT3ZlcmxheUNvbmZpZyBleHRlbmRzIENvbnRhaW5lckNvbmZpZyB7XG4gIC8qKlxuICAgKiBBbGxvd3Mgb3ZlcndyaXRpbmcgb2YgdGhlIGVycm9yIG1lc3NhZ2VzIGRpc3BsYXllZCBpbiB0aGUgb3ZlcmxheSBmb3IgY3VzdG9taXphdGlvbiBhbmQgbG9jYWxpemF0aW9uLlxuICAgKiBUaGlzIGlzIGVpdGhlciBhIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgYW55IHtAbGluayBFcnJvckV2ZW50fSBhcyBwYXJhbWV0ZXIgYW5kIHRyYW5zbGF0ZXMgZXJyb3IgbWVzc2FnZXMsXG4gICAqIG9yIGEgbWFwIG9mIGVycm9yIGNvZGVzIHRoYXQgb3ZlcndyaXRlcyBzcGVjaWZpYyBlcnJvciBtZXNzYWdlcyB3aXRoIGEgcGxhaW4gc3RyaW5nIG9yIGEgZnVuY3Rpb24gdGhhdFxuICAgKiByZWNlaXZlcyB0aGUge0BsaW5rIEVycm9yRXZlbnR9IGFzIHBhcmFtZXRlciBhbmQgcmV0dXJucyBhIGN1c3RvbWl6ZWQgc3RyaW5nLlxuICAgKiBUaGUgdHJhbnNsYXRpb24gZnVuY3Rpb25zIGNhbiBiZSB1c2VkIHRvIGV4dHJhY3QgZGF0YSAoZS5nLiBwYXJhbWV0ZXJzKSBmcm9tIHRoZSBvcmlnaW5hbCBlcnJvciBtZXNzYWdlLlxuICAgKlxuICAgKiBFeGFtcGxlIDEgKGNhdGNoLWFsbCB0cmFuc2xhdGlvbiBmdW5jdGlvbik6XG4gICAqIDxjb2RlPlxuICAgKiBlcnJvck1lc3NhZ2VPdmVybGF5Q29uZmlnID0ge1xuICAgKiAgIG1lc3NhZ2VzOiBmdW5jdGlvbihlcnJvcikge1xuICAgKiAgICAgc3dpdGNoIChlcnJvci5jb2RlKSB7XG4gICAqICAgICAgIC8vIE92ZXJ3cml0ZSBlcnJvciAxMDAwICdVbmtub3duIGVycm9yJ1xuICAgKiAgICAgICBjYXNlIDEwMDA6XG4gICAqICAgICAgICAgcmV0dXJuICdIb3VzdG9uLCB3ZSBoYXZlIGEgcHJvYmxlbSdcbiAgICpcbiAgICogICAgICAgLy8gVHJhbnNmb3JtIGVycm9yIDEyMDEgJ1RoZSBkb3dubG9hZGVkIG1hbmlmZXN0IGlzIGludmFsaWQnIHRvIHVwcGVyY2FzZVxuICAgKiAgICAgICBjYXNlIDEyMDE6XG4gICAqICAgICAgICAgdmFyIGRlc2NyaXB0aW9uID0gRXJyb3JVdGlscy5kZWZhdWx0RXJyb3JNZXNzYWdlc1tlcnJvci5jb2RlXTtcbiAgICogICAgICAgICByZXR1cm4gZGVzY3JpcHRpb24udG9VcHBlckNhc2UoKTtcbiAgICpcbiAgICogICAgICAgLy8gQ3VzdG9taXplIGVycm9yIDEyMDcgJ1RoZSBtYW5pZmVzdCBjb3VsZCBub3QgYmUgbG9hZGVkJ1xuICAgKiAgICAgICBjYXNlIDEyMDc6XG4gICAqICAgICAgICAgdmFyIHN0YXR1c0NvZGUgPSBlcnJvci5kYXRhLnN0YXR1c0NvZGU7XG4gICAqICAgICAgICAgcmV0dXJuICdNYW5pZmVzdCBsb2FkaW5nIGZhaWxlZCB3aXRoIEhUVFAgZXJyb3IgJyArIHN0YXR1c0NvZGU7XG4gICAqICAgICB9XG4gICAqICAgICAvLyBSZXR1cm4gdW5tb2RpZmllZCBlcnJvciBtZXNzYWdlIGZvciBhbGwgb3RoZXIgZXJyb3JzXG4gICAqICAgICByZXR1cm4gZXJyb3IubWVzc2FnZTtcbiAgICogICB9XG4gICAqIH07XG4gICAqIDwvY29kZT5cbiAgICpcbiAgICogRXhhbXBsZSAyICh0cmFuc2xhdGluZyBzcGVjaWZpYyBlcnJvcnMpOlxuICAgKiA8Y29kZT5cbiAgICogZXJyb3JNZXNzYWdlT3ZlcmxheUNvbmZpZyA9IHtcbiAgICogICBtZXNzYWdlczoge1xuICAgKiAgICAgLy8gT3ZlcndyaXRlIGVycm9yIDEwMDAgJ1Vua25vd24gZXJyb3InXG4gICAqICAgICAxMDAwOiAnSG91c3Rvbiwgd2UgaGF2ZSBhIHByb2JsZW0nLFxuICAgKlxuICAgKiAgICAgLy8gVHJhbnNmb3JtIGVycm9yIDEyMDEgJ1Vuc3VwcG9ydGVkIG1hbmlmZXN0IGZvcm1hdCcgdG8gdXBwZXJjYXNlXG4gICAqICAgICAxMjAxOiBmdW5jdGlvbihlcnJvcikge1xuICAgKiAgICAgICB2YXIgZGVzY3JpcHRpb24gPSBFcnJvclV0aWxzLmRlZmF1bHRFcnJvck1lc3NhZ2VzW2Vycm9yLmNvZGVdO1xuICAgKiAgICAgICByZXR1cm4gZGVzY3JpcHRpb24udG9VcHBlckNhc2UoKTtcbiAgICogICAgIH0sXG4gICAqXG4gICAqICAgICAvLyBDdXN0b21pemUgZXJyb3IgMTIwNyAnVGhlIG1hbmlmZXN0IGNvdWxkIG5vdCBiZSBsb2FkZWQnXG4gICAqICAgICAxMjA3OiBmdW5jdGlvbihlcnJvcikge1xuICAgKiAgICAgICB2YXIgc3RhdHVzQ29kZSA9IGVycm9yLmRhdGEuc3RhdHVzQ29kZTtcbiAgICogICAgICAgcmV0dXJuICdNYW5pZmVzdCBsb2FkaW5nIGZhaWxlZCB3aXRoIEhUVFAgZXJyb3IgJyArIHN0YXR1c0NvZGU7XG4gICAqICAgICB9XG4gICAqICAgfVxuICAgKiB9O1xuICAgKiA8L2NvZGU+XG4gICAqL1xuICBtZXNzYWdlcz86IEVycm9yTWVzc2FnZU1hcCB8IEVycm9yTWVzc2FnZVRyYW5zbGF0b3I7XG59XG5cbi8qKlxuICogT3ZlcmxheXMgdGhlIHBsYXllciBhbmQgZGlzcGxheXMgZXJyb3IgbWVzc2FnZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBFcnJvck1lc3NhZ2VPdmVybGF5IGV4dGVuZHMgQ29udGFpbmVyPEVycm9yTWVzc2FnZU92ZXJsYXlDb25maWc+IHtcblxuICBwcml2YXRlIGVycm9yTGFiZWw6IExhYmVsPExhYmVsQ29uZmlnPjtcbiAgcHJpdmF0ZSB0dk5vaXNlQmFja2dyb3VuZDogVHZOb2lzZUNhbnZhcztcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IEVycm9yTWVzc2FnZU92ZXJsYXlDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmVycm9yTGFiZWwgPSBuZXcgTGFiZWw8TGFiZWxDb25maWc+KHsgY3NzQ2xhc3M6ICd1aS1lcnJvcm1lc3NhZ2UtbGFiZWwnIH0pO1xuICAgIHRoaXMudHZOb2lzZUJhY2tncm91bmQgPSBuZXcgVHZOb2lzZUNhbnZhcygpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1lcnJvcm1lc3NhZ2Utb3ZlcmxheScsXG4gICAgICBjb21wb25lbnRzOiBbdGhpcy50dk5vaXNlQmFja2dyb3VuZCwgdGhpcy5lcnJvckxhYmVsXSxcbiAgICAgIGhpZGRlbjogdHJ1ZSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEkgfCBNb2JpbGVWM1BsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICBsZXQgY29uZmlnID0gdGhpcy5nZXRDb25maWcoKTtcblxuICAgIGNvbnN0IGhhbmRsZUVycm9yTWVzc2FnZSA9IChcbiAgICAgIGV2ZW50OiBFcnJvckV2ZW50IHwgTW9iaWxlVjNTb3VyY2VFcnJvckV2ZW50IHwgTW9iaWxlVjNQbGF5ZXJFcnJvckV2ZW50LFxuICAgICAgbWVzc2FnZTogc3RyaW5nLFxuICAgICkgPT4ge1xuICAgICAgY29uc3QgY3VzdG9taXplZE1lc3NhZ2UgPSBjdXN0b21pemVFcnJvck1lc3NhZ2UodWltYW5hZ2VyLmdldENvbmZpZygpLmVycm9yTWVzc2FnZXMgfHwgY29uZmlnLm1lc3NhZ2VzLCBldmVudCk7XG4gICAgICBpZiAoY3VzdG9taXplZE1lc3NhZ2UpIHtcbiAgICAgICAgbWVzc2FnZSA9IGN1c3RvbWl6ZWRNZXNzYWdlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmRpc3BsYXkobWVzc2FnZSk7XG4gICAgfTtcblxuICAgIGlmIChpc01vYmlsZVYzUGxheWVyQVBJKHBsYXllcikpIHtcbiAgICAgIGNvbnN0IGVycm9yRXZlbnRIYW5kbGVyID0gKGV2ZW50OiBNb2JpbGVWM1NvdXJjZUVycm9yRXZlbnQgfCBNb2JpbGVWM1BsYXllckVycm9yRXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IEVycm9yVXRpbHMuZGVmYXVsdE1vYmlsZVYzRXJyb3JNZXNzYWdlVHJhbnNsYXRvcihldmVudCk7XG4gICAgICAgIGhhbmRsZUVycm9yTWVzc2FnZShldmVudCwgbWVzc2FnZSk7XG4gICAgICB9O1xuXG4gICAgICBwbGF5ZXIub24oTW9iaWxlVjNQbGF5ZXJFdmVudC5QbGF5ZXJFcnJvciwgZXJyb3JFdmVudEhhbmRsZXIpO1xuICAgICAgcGxheWVyLm9uKE1vYmlsZVYzUGxheWVyRXZlbnQuU291cmNlRXJyb3IsIGVycm9yRXZlbnRIYW5kbGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkVycm9yLCAoZXZlbnQ6IEVycm9yRXZlbnQpID0+IHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSBFcnJvclV0aWxzLmRlZmF1bHRXZWJFcnJvck1lc3NhZ2VUcmFuc2xhdG9yKGV2ZW50KTtcbiAgICAgICAgaGFuZGxlRXJyb3JNZXNzYWdlKGV2ZW50LCBtZXNzYWdlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VMb2FkZWQsIChldmVudDogUGxheWVyRXZlbnRCYXNlKSA9PiB7XG4gICAgICBpZiAodGhpcy5pc1Nob3duKCkpIHtcbiAgICAgICAgdGhpcy50dk5vaXNlQmFja2dyb3VuZC5zdG9wKCk7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZGlzcGxheShlcnJvck1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuZXJyb3JMYWJlbC5zZXRUZXh0KGVycm9yTWVzc2FnZSk7XG4gICAgdGhpcy50dk5vaXNlQmFja2dyb3VuZC5zdGFydCgpO1xuICAgIHRoaXMuc2hvdygpO1xuICB9XG5cbiAgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBzdXBlci5yZWxlYXNlKCk7XG5cbiAgICAvLyBDYW52YXMgcmVuZGVyaW5nIG11c3QgYmUgZXhwbGljaXRseSBzdG9wcGVkLCBlbHNlIGl0IGp1c3QgY29udGludWVzIGZvcmV2ZXIgYW5kIGhvZ3MgcmVzb3VyY2VzXG4gICAgdGhpcy50dk5vaXNlQmFja2dyb3VuZC5zdG9wKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3VzdG9taXplRXJyb3JNZXNzYWdlKFxuICBlcnJvck1lc3NhZ2VzOiBFcnJvck1lc3NhZ2VUcmFuc2xhdG9yIHwgRXJyb3JNZXNzYWdlTWFwLFxuICBldmVudDogRXJyb3JFdmVudCB8IE1vYmlsZVYzUGxheWVyRXJyb3JFdmVudCB8IE1vYmlsZVYzU291cmNlRXJyb3JFdmVudCxcbik6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gIGlmICghZXJyb3JNZXNzYWdlcykge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBQcm9jZXNzIG1lc3NhZ2Ugdm9jYWJ1bGFyaWVzXG4gIGlmICh0eXBlb2YgZXJyb3JNZXNzYWdlcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFRyYW5zbGF0aW9uIGZ1bmN0aW9uIGZvciBhbGwgZXJyb3JzXG4gICAgcmV0dXJuIGVycm9yTWVzc2FnZXMoZXZlbnQpO1xuICB9XG4gIGlmIChlcnJvck1lc3NhZ2VzW2V2ZW50LmNvZGVdKSB7XG4gICAgLy8gSXQncyBub3QgYSB0cmFuc2xhdGlvbiBmdW5jdGlvbiwgc28gaXQgbXVzdCBiZSBhIG1hcCBvZiBzdHJpbmdzIG9yIHRyYW5zbGF0aW9uIGZ1bmN0aW9uc1xuICAgIGNvbnN0IGN1c3RvbU1lc3NhZ2UgPSBlcnJvck1lc3NhZ2VzW2V2ZW50LmNvZGVdO1xuXG4gICAgcmV0dXJuIHR5cGVvZiBjdXN0b21NZXNzYWdlID09PSAnc3RyaW5nJyA/IGN1c3RvbU1lc3NhZ2UgOiBjdXN0b21NZXNzYWdlKGV2ZW50KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgVG9nZ2xlQnV0dG9uLCBUb2dnbGVCdXR0b25Db25maWcgfSBmcm9tICcuL3RvZ2dsZWJ1dHRvbic7XG5pbXBvcnQgeyBVSUluc3RhbmNlTWFuYWdlciB9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIGJ1dHRvbiB0aGF0IHRvZ2dsZXMgdGhlIHBsYXllciBiZXR3ZWVuIHdpbmRvd2VkIGFuZCBmdWxsc2NyZWVuIHZpZXcuXG4gKi9cbmV4cG9ydCBjbGFzcyBGdWxsc2NyZWVuVG9nZ2xlQnV0dG9uIGV4dGVuZHMgVG9nZ2xlQnV0dG9uPFRvZ2dsZUJ1dHRvbkNvbmZpZz4ge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogVG9nZ2xlQnV0dG9uQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1mdWxsc2NyZWVudG9nZ2xlYnV0dG9uJyxcbiAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdmdWxsc2NyZWVuJyksXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGNvbnN0IGlzRnVsbFNjcmVlbkF2YWlsYWJsZSA9ICgpID0+IHtcbiAgICAgIHJldHVybiBwbGF5ZXIuaXNWaWV3TW9kZUF2YWlsYWJsZShwbGF5ZXIuZXhwb3J0cy5WaWV3TW9kZS5GdWxsc2NyZWVuKTtcbiAgICB9O1xuXG4gICAgY29uc3QgZnVsbHNjcmVlblN0YXRlSGFuZGxlciA9ICgpID0+IHtcbiAgICAgIHBsYXllci5nZXRWaWV3TW9kZSgpID09PSBwbGF5ZXIuZXhwb3J0cy5WaWV3TW9kZS5GdWxsc2NyZWVuID8gdGhpcy5vbigpIDogdGhpcy5vZmYoKTtcbiAgICB9O1xuXG4gICAgY29uc3QgZnVsbHNjcmVlbkF2YWlsYWJpbGl0eUNoYW5nZWRIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgaXNGdWxsU2NyZWVuQXZhaWxhYmxlKCkgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuICAgIH07XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVmlld01vZGVDaGFuZ2VkLCBmdWxsc2NyZWVuU3RhdGVIYW5kbGVyKTtcblxuICAgIC8vIEF2YWlsYWJsZSBvbmx5IGluIG91ciBuYXRpdmUgU0RLcyBmb3Igbm93XG4gICAgaWYgKChwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudCBhcyBhbnkpLlZpZXdNb2RlQXZhaWxhYmlsaXR5Q2hhbmdlZCkge1xuICAgICAgcGxheWVyLm9uKFxuICAgICAgICAocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQgYXMgYW55KS5WaWV3TW9kZUF2YWlsYWJpbGl0eUNoYW5nZWQsXG4gICAgICAgIGZ1bGxzY3JlZW5BdmFpbGFiaWxpdHlDaGFuZ2VkSGFuZGxlcixcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKGZ1bGxzY3JlZW5BdmFpbGFiaWxpdHlDaGFuZ2VkSGFuZGxlcik7XG5cbiAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGlmICghaXNGdWxsU2NyZWVuQXZhaWxhYmxlKCkpIHtcbiAgICAgICAgaWYgKGNvbnNvbGUpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnRnVsbHNjcmVlbiB1bmF2YWlsYWJsZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdGFyZ2V0Vmlld01vZGUgPVxuICAgICAgICBwbGF5ZXIuZ2V0Vmlld01vZGUoKSA9PT0gcGxheWVyLmV4cG9ydHMuVmlld01vZGUuRnVsbHNjcmVlblxuICAgICAgICAgID8gcGxheWVyLmV4cG9ydHMuVmlld01vZGUuSW5saW5lXG4gICAgICAgICAgOiBwbGF5ZXIuZXhwb3J0cy5WaWV3TW9kZS5GdWxsc2NyZWVuO1xuXG4gICAgICBwbGF5ZXIuc2V0Vmlld01vZGUodGFyZ2V0Vmlld01vZGUpO1xuICAgIH0pO1xuXG4gICAgLy8gU3RhcnR1cCBpbml0XG4gICAgZnVsbHNjcmVlbkF2YWlsYWJpbGl0eUNoYW5nZWRIYW5kbGVyKCk7XG4gICAgZnVsbHNjcmVlblN0YXRlSGFuZGxlcigpO1xuICB9XG59XG4iLCJpbXBvcnQge1BsYXliYWNrVG9nZ2xlQnV0dG9uLCBQbGF5YmFja1RvZ2dsZUJ1dHRvbkNvbmZpZ30gZnJvbSAnLi9wbGF5YmFja3RvZ2dsZWJ1dHRvbic7XG5pbXBvcnQge0RPTX0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEksIFBsYXllckV2ZW50QmFzZSwgV2FybmluZ0V2ZW50IH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBidXR0b24gdGhhdCBvdmVybGF5cyB0aGUgdmlkZW8gYW5kIHRvZ2dsZXMgYmV0d2VlbiBwbGF5YmFjayBhbmQgcGF1c2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBIdWdlUGxheWJhY2tUb2dnbGVCdXR0b24gZXh0ZW5kcyBQbGF5YmFja1RvZ2dsZUJ1dHRvbiB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBQbGF5YmFja1RvZ2dsZUJ1dHRvbkNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktaHVnZXBsYXliYWNrdG9nZ2xlYnV0dG9uJyxcbiAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdwbGF5UGF1c2UnKSxcbiAgICAgIHJvbGU6ICdidXR0b24nLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIC8vIFVwZGF0ZSBidXR0b24gc3RhdGUgdGhyb3VnaCBBUEkgZXZlbnRzXG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyLCBmYWxzZSk7XG5cbiAgICAvLyBTZXQgZW50ZXJGdWxsc2NyZWVuT25Jbml0aWFsUGxheWJhY2sgaWYgc2V0IGluIHRoZSB1aW1hbmFnZXIgY29uZmlnXG4gICAgaWYgKHR5cGVvZiB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZW50ZXJGdWxsc2NyZWVuT25Jbml0aWFsUGxheWJhY2sgPT09ICdib29sZWFuJykge1xuICAgICAgdGhpcy5jb25maWcuZW50ZXJGdWxsc2NyZWVuT25Jbml0aWFsUGxheWJhY2sgPSB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZW50ZXJGdWxsc2NyZWVuT25Jbml0aWFsUGxheWJhY2s7XG4gICAgfVxuXG4gICAgbGV0IHRvZ2dsZVBsYXliYWNrID0gKCkgPT4ge1xuICAgICAgaWYgKHBsYXllci5pc1BsYXlpbmcoKSB8fCB0aGlzLmlzUGxheUluaXRpYXRlZCkge1xuICAgICAgICBwbGF5ZXIucGF1c2UoJ3VpJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwbGF5ZXIucGxheSgndWknKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbGV0IHRvZ2dsZUZ1bGxzY3JlZW4gPSAoKSA9PiB7XG4gICAgICBpZiAocGxheWVyLmdldFZpZXdNb2RlKCkgPT09IHBsYXllci5leHBvcnRzLlZpZXdNb2RlLkZ1bGxzY3JlZW4pIHtcbiAgICAgICAgcGxheWVyLnNldFZpZXdNb2RlKHBsYXllci5leHBvcnRzLlZpZXdNb2RlLklubGluZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwbGF5ZXIuc2V0Vmlld01vZGUocGxheWVyLmV4cG9ydHMuVmlld01vZGUuRnVsbHNjcmVlbik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGxldCBmaXJzdFBsYXkgPSB0cnVlO1xuICAgIGxldCBjbGlja1RpbWUgPSAwO1xuICAgIGxldCBkb3VibGVDbGlja1RpbWUgPSAwO1xuXG4gICAgLypcbiAgICAgKiBZb3VUdWJlLXN0eWxlIHRvZ2dsZSBidXR0b24gaGFuZGxpbmdcbiAgICAgKlxuICAgICAqIFRoZSBnb2FsIGlzIHRvIHByZXZlbnQgYSBzaG9ydCBwYXVzZSBvciBwbGF5YmFjayBpbnRlcnZhbCBiZXR3ZWVuIGEgY2xpY2ssIHRoYXQgdG9nZ2xlcyBwbGF5YmFjaywgYW5kIGFcbiAgICAgKiBkb3VibGUgY2xpY2ssIHRoYXQgdG9nZ2xlcyBmdWxsc2NyZWVuLiBJbiB0aGlzIG5haXZlIGFwcHJvYWNoLCB0aGUgZmlyc3QgY2xpY2sgd291bGQgZS5nLiBzdGFydCBwbGF5YmFjayxcbiAgICAgKiB0aGUgc2Vjb25kIGNsaWNrIHdvdWxkIGJlIGRldGVjdGVkIGFzIGRvdWJsZSBjbGljayBhbmQgdG9nZ2xlIHRvIGZ1bGxzY3JlZW4sIGFuZCBhcyBzZWNvbmQgbm9ybWFsIGNsaWNrIHN0b3BcbiAgICAgKiBwbGF5YmFjaywgd2hpY2ggcmVzdWx0cyBpcyBhIHNob3J0IHBsYXliYWNrIGludGVydmFsIHdpdGggbWF4IGxlbmd0aCBvZiB0aGUgZG91YmxlIGNsaWNrIGRldGVjdGlvblxuICAgICAqIHBlcmlvZCAodXN1YWxseSA1MDBtcykuXG4gICAgICpcbiAgICAgKiBUbyBzb2x2ZSB0aGlzIGlzc3VlLCB3ZSBkZWZlciBoYW5kbGluZyBvZiB0aGUgZmlyc3QgY2xpY2sgZm9yIDIwMG1zLCB3aGljaCBpcyBhbG1vc3QgdW5ub3RpY2VhYmxlIHRvIHRoZSB1c2VyLFxuICAgICAqIGFuZCBqdXN0IHRvZ2dsZSBwbGF5YmFjayBpZiBubyBzZWNvbmQgY2xpY2sgKGRvdWJsZSBjbGljaykgaGFzIGJlZW4gcmVnaXN0ZXJlZCBkdXJpbmcgdGhpcyBwZXJpb2QuIElmIGEgZG91YmxlXG4gICAgICogY2xpY2sgaXMgcmVnaXN0ZXJlZCwgd2UganVzdCB0b2dnbGUgdGhlIGZ1bGxzY3JlZW4uIEluIHRoZSBmaXJzdCAyMDBtcywgdW5kZXNpcmVkIHBsYXliYWNrIGNoYW5nZXMgdGh1cyBjYW5ub3RcbiAgICAgKiBoYXBwZW4uIElmIGEgZG91YmxlIGNsaWNrIGlzIHJlZ2lzdGVyZWQgd2l0aGluIDUwMG1zLCB3ZSB1bmRvIHRoZSBwbGF5YmFjayBjaGFuZ2UgYW5kIHN3aXRjaCBmdWxsc2NyZWVuIG1vZGUuXG4gICAgICogSW4gdGhlIGVuZCwgdGhpcyBtZXRob2QgYmFzaWNhbGx5IGludHJvZHVjZXMgYSAyMDBtcyBvYnNlcnZpbmcgaW50ZXJ2YWwgaW4gd2hpY2ggcGxheWJhY2sgY2hhbmdlcyBhcmUgcHJldmVudGVkXG4gICAgICogaWYgYSBkb3VibGUgY2xpY2sgaGFwcGVucy5cbiAgICAgKi9cbiAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIC8vIERpcmVjdGx5IHN0YXJ0IHBsYXliYWNrIG9uIGZpcnN0IGNsaWNrIG9mIHRoZSBidXR0b24uXG4gICAgICAvLyBUaGlzIGlzIGEgcmVxdWlyZWQgd29ya2Fyb3VuZCBmb3IgbW9iaWxlIGJyb3dzZXJzIHdoZXJlIHZpZGVvIHBsYXliYWNrIG5lZWRzIHRvIGJlIHRyaWdnZXJlZCBkaXJlY3RseVxuICAgICAgLy8gYnkgdGhlIHVzZXIuIEEgZGVmZXJyZWQgcGxheWJhY2sgc3RhcnQgdGhyb3VnaCB0aGUgdGltZW91dCBiZWxvdyBpcyBub3QgY29uc2lkZXJlZCBhcyB1c2VyIGFjdGlvbiBhbmRcbiAgICAgIC8vIHRoZXJlZm9yZSBpZ25vcmVkIGJ5IG1vYmlsZSBicm93c2Vycy5cbiAgICAgIGlmIChmaXJzdFBsYXkpIHtcbiAgICAgICAgLy8gVHJ5IHRvIHN0YXJ0IHBsYXliYWNrLiBUaGVuIHdlIHdhaXQgZm9yIFBsYXkgYW5kIG9ubHkgd2hlbiBpdCBhcnJpdmVzLCB3ZSBkaXNhYmxlIHRoZSBmaXJzdFBsYXkgZmxhZy5cbiAgICAgICAgLy8gSWYgd2UgZGlzYWJsZSB0aGUgZmxhZyBoZXJlLCBvbkNsaWNrIHdhcyB0cmlnZ2VyZWQgcHJvZ3JhbW1hdGljYWxseSBpbnN0ZWFkIG9mIGJ5IGEgdXNlciBpbnRlcmFjdGlvbiwgYW5kXG4gICAgICAgIC8vIHBsYXliYWNrIGlzIGJsb2NrZWQgKGUuZy4gb24gbW9iaWxlIGRldmljZXMgZHVlIHRvIHRoZSBwcm9ncmFtbWF0aWMgcGxheSgpIGNhbGwpLCB3ZSBsb29zZSB0aGUgY2hhbmNlIHRvXG4gICAgICAgIC8vIGV2ZXIgc3RhcnQgcGxheWJhY2sgdGhyb3VnaCBhIHVzZXIgaW50ZXJhY3Rpb24gYWdhaW4gd2l0aCB0aGlzIGJ1dHRvbi5cbiAgICAgICAgdG9nZ2xlUGxheWJhY2soKTtcblxuICAgICAgICBpZiAodGhpcy5jb25maWcuZW50ZXJGdWxsc2NyZWVuT25Jbml0aWFsUGxheWJhY2spIHtcbiAgICAgICAgICBwbGF5ZXIuc2V0Vmlld01vZGUocGxheWVyLmV4cG9ydHMuVmlld01vZGUuRnVsbHNjcmVlbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBub3cgPSBEYXRlLm5vdygpO1xuXG4gICAgICBpZiAobm93IC0gY2xpY2tUaW1lIDwgMjAwKSB7XG4gICAgICAgIC8vIFdlIGhhdmUgYSBkb3VibGUgY2xpY2sgaW5zaWRlIHRoZSAyMDBtcyBpbnRlcnZhbCwganVzdCB0b2dnbGUgZnVsbHNjcmVlbiBtb2RlXG4gICAgICAgIHRvZ2dsZUZ1bGxzY3JlZW4oKTtcbiAgICAgICAgZG91YmxlQ2xpY2tUaW1lID0gbm93O1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKG5vdyAtIGNsaWNrVGltZSA8IDUwMCkge1xuICAgICAgICAvLyBXZSBoYXZlIGEgZG91YmxlIGNsaWNrIGluc2lkZSB0aGUgNTAwbXMgaW50ZXJ2YWwsIHVuZG8gcGxheWJhY2sgdG9nZ2xlIGFuZCB0b2dnbGUgZnVsbHNjcmVlbiBtb2RlXG4gICAgICAgIHRvZ2dsZUZ1bGxzY3JlZW4oKTtcbiAgICAgICAgdG9nZ2xlUGxheWJhY2soKTtcbiAgICAgICAgZG91YmxlQ2xpY2tUaW1lID0gbm93O1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNsaWNrVGltZSA9IG5vdztcblxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmIChEYXRlLm5vdygpIC0gZG91YmxlQ2xpY2tUaW1lID4gMjAwKSB7XG4gICAgICAgICAgLy8gTm8gZG91YmxlIGNsaWNrIGRldGVjdGVkLCBzbyB3ZSB0b2dnbGUgcGxheWJhY2sgYW5kIHdhaXQgd2hhdCBoYXBwZW5zIG5leHRcbiAgICAgICAgICB0b2dnbGVQbGF5YmFjaygpO1xuICAgICAgICB9XG4gICAgICB9LCAyMDApO1xuICAgIH0pO1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXksICgpID0+IHtcbiAgICAgIC8vIFBsYXliYWNrIGhhcyByZWFsbHkgc3RhcnRlZCwgd2UgY2FuIGRpc2FibGUgdGhlIGZsYWcgdG8gc3dpdGNoIHRvIG5vcm1hbCB0b2dnbGUgYnV0dG9uIGhhbmRsaW5nXG4gICAgICBmaXJzdFBsYXkgPSBmYWxzZTtcbiAgICB9KTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5XYXJuaW5nLCAoZXZlbnQ6IFdhcm5pbmdFdmVudCkgPT4ge1xuICAgICAgaWYgKGV2ZW50LmNvZGUgPT09IHBsYXllci5leHBvcnRzLldhcm5pbmdDb2RlLlBMQVlCQUNLX0NPVUxEX05PVF9CRV9TVEFSVEVEKSB7XG4gICAgICAgIC8vIGlmIHBsYXliYWNrIGNvdWxkIG5vdCBiZSBzdGFydGVkLCByZXNldCB0aGUgZmlyc3QgcGxheSBmbGFnIGFzIHdlIG5lZWQgdGhlIHVzZXIgaW50ZXJhY3Rpb24gdG8gc3RhcnRcbiAgICAgICAgZmlyc3RQbGF5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IHN1cHByZXNzUGxheUJ1dHRvblRyYW5zaXRpb25BbmltYXRpb24gPSAoKSA9PiB7XG4gICAgICAvLyBEaXNhYmxlIHRoZSBjdXJyZW50IGFuaW1hdGlvblxuICAgICAgdGhpcy5zZXRUcmFuc2l0aW9uQW5pbWF0aW9uc0VuYWJsZWQoZmFsc2UpO1xuXG4gICAgICAvLyBFbmFibGUgdGhlIHRyYW5zaXRpb24gYW5pbWF0aW9ucyBmb3IgdGhlIG5leHQgc3RhdGUgY2hhbmdlXG4gICAgICB0aGlzLm9uVG9nZ2xlLnN1YnNjcmliZU9uY2UoKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFRyYW5zaXRpb25BbmltYXRpb25zRW5hYmxlZCh0cnVlKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBIaWRlIHRoZSBwbGF5IGJ1dHRvbiBhbmltYXRpb24gd2hlbiB0aGUgVUkgaXMgbG9hZGVkIChpdCBzaG91bGQgb25seSBiZSBhbmltYXRlZCBvbiBzdGF0ZSBjaGFuZ2VzKVxuICAgIHN1cHByZXNzUGxheUJ1dHRvblRyYW5zaXRpb25BbmltYXRpb24oKTtcblxuICAgIGNvbnN0IGlzQXV0b3BsYXlFbmFibGVkID0gcGxheWVyLmdldENvbmZpZygpLnBsYXliYWNrICYmIEJvb2xlYW4ocGxheWVyLmdldENvbmZpZygpLnBsYXliYWNrLmF1dG9wbGF5KTtcbiAgICAvLyBXZSBvbmx5IGtub3cgaWYgYW4gYXV0b3BsYXkgYXR0ZW1wdCBpcyB1cGNvbWluZyBpZiB0aGUgcGxheWVyIGlzIG5vdCB5ZXQgcmVhZHkuIEl0IHRoZSBwbGF5ZXIgaXMgYWxyZWFkeSByZWFkeSxcbiAgICAvLyB0aGUgYXR0ZW1wdCBtaWdodCBiZSB1cGNvbWluZyBvciBtaWdodCBoYXZlIGFscmVhZHkgaGFwcGVuZWQsIGJ1dCB3ZSBkb24ndCBoYXZlIHRvIGhhbmRsZSB0aGF0IGJlY2F1c2Ugd2UgY2FuXG4gICAgLy8gc2ltcGx5IHJlbHkgb24gaXNQbGF5aW5nIGFuZCB0aGUgcGxheSBzdGF0ZSBldmVudHMuXG4gICAgY29uc3QgaXNBdXRvcGxheVVwY29taW5nID0gIXBsYXllci5nZXRTb3VyY2UoKSAmJiBpc0F1dG9wbGF5RW5hYmxlZDtcblxuICAgIC8vIEhpZGUgdGhlIHBsYXkgYnV0dG9uIHdoZW4gdGhlIHBsYXllciBpcyBhbHJlYWR5IHBsYXlpbmcgb3IgYXV0b3BsYXkgaXMgdXBjb21pbmdcbiAgICBpZiAocGxheWVyLmlzUGxheWluZygpIHx8IGlzQXV0b3BsYXlVcGNvbWluZykge1xuICAgICAgLy8gSGlkZSB0aGUgcGxheSBidXR0b24gKHN3aXRjaCB0byBwbGF5aW5nIHN0YXRlKVxuICAgICAgdGhpcy5vbigpO1xuICAgICAgLy8gRGlzYWJsZSB0aGUgYW5pbWF0aW9uIG9mIHRoZSBwbGF5aW5nIHN0YXRlIHN3aXRjaFxuICAgICAgc3VwcHJlc3NQbGF5QnV0dG9uVHJhbnNpdGlvbkFuaW1hdGlvbigpO1xuXG4gICAgICAvLyBTaG93IHRoZSBwbGF5IGJ1dHRvbiB3aXRob3V0IGFuIGFuaW1hdGlvbiBpZiBhIHBsYXkgYXR0ZW1wdCBpcyBibG9ja2VkXG4gICAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuV2FybmluZywgKGV2ZW50OiBXYXJuaW5nRXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmNvZGUgPT09IHBsYXllci5leHBvcnRzLldhcm5pbmdDb2RlLlBMQVlCQUNLX0NPVUxEX05PVF9CRV9TVEFSVEVEKSB7XG4gICAgICAgICAgc3VwcHJlc3NQbGF5QnV0dG9uVHJhbnNpdGlvbkFuaW1hdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgdG9Eb21FbGVtZW50KCk6IERPTSB7XG4gICAgbGV0IGJ1dHRvbkVsZW1lbnQgPSBzdXBlci50b0RvbUVsZW1lbnQoKTtcblxuICAgIC8vIEFkZCBjaGlsZCB0aGF0IGNvbnRhaW5zIHRoZSBwbGF5IGJ1dHRvbiBpbWFnZVxuICAgIC8vIFNldHRpbmcgdGhlIGltYWdlIGRpcmVjdGx5IG9uIHRoZSBidXR0b24gZG9lcyBub3Qgd29yayB0b2dldGhlciB3aXRoIHNjYWxpbmcgYW5pbWF0aW9ucywgYmVjYXVzZSB0aGUgYnV0dG9uXG4gICAgLy8gY2FuIGNvdmVyIHRoZSB3aG9sZSB2aWRlbyBwbGF5ZXIgYXJlIGFuZCBzY2FsaW5nIHdvdWxkIGV4dGVuZCBpdCBiZXlvbmQuIEJ5IGFkZGluZyBhbiBpbm5lciBlbGVtZW50LCBjb25maW5lZFxuICAgIC8vIHRvIHRoZSBzaXplIGlmIHRoZSBpbWFnZSwgaXQgY2FuIHNjYWxlIGluc2lkZSB0aGUgcGxheWVyIHdpdGhvdXQgb3ZlcnNob290aW5nLlxuICAgIGJ1dHRvbkVsZW1lbnQuYXBwZW5kKG5ldyBET00oJ2RpdicsIHtcbiAgICAgICdjbGFzcyc6IHRoaXMucHJlZml4Q3NzKCdpbWFnZScpLFxuICAgIH0pKTtcblxuICAgIHJldHVybiBidXR0b25FbGVtZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHBsYXkgc3RhdGUgdHJhbnNpdGlvbiBhbmltYXRpb25zIG9mIHRoZSBwbGF5IGJ1dHRvbiBpbWFnZS4gQ2FuIGJlIHVzZWQgdG8gc3VwcHJlc3NcbiAgICogYW5pbWF0aW9ucy5cbiAgICogQHBhcmFtIHtib29sZWFufSBlbmFibGVkIHRydWUgdG8gZW5hYmxlIHRoZSBhbmltYXRpb25zIChkZWZhdWx0KSwgZmFsc2UgdG8gZGlzYWJsZSB0aGVtXG4gICAqL1xuICBwcm90ZWN0ZWQgc2V0VHJhbnNpdGlvbkFuaW1hdGlvbnNFbmFibGVkKGVuYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBjb25zdCBub1RyYW5zaXRpb25BbmltYXRpb25zQ2xhc3MgPSB0aGlzLnByZWZpeENzcygnbm8tdHJhbnNpdGlvbi1hbmltYXRpb25zJyk7XG5cbiAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3Mobm9UcmFuc2l0aW9uQW5pbWF0aW9uc0NsYXNzKTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLmdldERvbUVsZW1lbnQoKS5oYXNDbGFzcyhub1RyYW5zaXRpb25BbmltYXRpb25zQ2xhc3MpKSB7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hZGRDbGFzcyhub1RyYW5zaXRpb25BbmltYXRpb25zQ2xhc3MpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHtCdXR0b25Db25maWcsIEJ1dHRvbn0gZnJvbSAnLi9idXR0b24nO1xuaW1wb3J0IHtET019IGZyb20gJy4uL2RvbSc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBidXR0b24gdG8gcGxheS9yZXBsYXkgYSB2aWRlby5cbiAqL1xuZXhwb3J0IGNsYXNzIEh1Z2VSZXBsYXlCdXR0b24gZXh0ZW5kcyBCdXR0b248QnV0dG9uQ29uZmlnPiB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBCdXR0b25Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLWh1Z2VyZXBsYXlidXR0b24nLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3JlcGxheScpLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHBsYXllci5wbGF5KCd1aScpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRvRG9tRWxlbWVudCgpOiBET00ge1xuICAgIGxldCBidXR0b25FbGVtZW50ID0gc3VwZXIudG9Eb21FbGVtZW50KCk7XG5cbiAgICAvLyBBZGQgY2hpbGQgdGhhdCBjb250YWlucyB0aGUgcGxheSBidXR0b24gaW1hZ2VcbiAgICAvLyBTZXR0aW5nIHRoZSBpbWFnZSBkaXJlY3RseSBvbiB0aGUgYnV0dG9uIGRvZXMgbm90IHdvcmsgdG9nZXRoZXIgd2l0aCBzY2FsaW5nIGFuaW1hdGlvbnMsIGJlY2F1c2UgdGhlIGJ1dHRvblxuICAgIC8vIGNhbiBjb3ZlciB0aGUgd2hvbGUgdmlkZW8gcGxheWVyIGFyZSBhbmQgc2NhbGluZyB3b3VsZCBleHRlbmQgaXQgYmV5b25kLiBCeSBhZGRpbmcgYW4gaW5uZXIgZWxlbWVudCwgY29uZmluZWRcbiAgICAvLyB0byB0aGUgc2l6ZSBpZiB0aGUgaW1hZ2UsIGl0IGNhbiBzY2FsZSBpbnNpZGUgdGhlIHBsYXllciB3aXRob3V0IG92ZXJzaG9vdGluZy5cbiAgICBidXR0b25FbGVtZW50LmFwcGVuZChuZXcgRE9NKCdkaXYnLCB7XG4gICAgICAnY2xhc3MnOiB0aGlzLnByZWZpeENzcygnaW1hZ2UnKSxcbiAgICB9KSk7XG5cbiAgICByZXR1cm4gYnV0dG9uRWxlbWVudDtcbiAgfVxufSIsImltcG9ydCB7TGlzdFNlbGVjdG9yLCBMaXN0U2VsZWN0b3JDb25maWd9IGZyb20gJy4vbGlzdHNlbGVjdG9yJztcbmltcG9ydCB7RE9NfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuZXhwb3J0IGNsYXNzIEl0ZW1TZWxlY3Rpb25MaXN0IGV4dGVuZHMgTGlzdFNlbGVjdG9yPExpc3RTZWxlY3RvckNvbmZpZz4ge1xuXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENMQVNTX1NFTEVDVEVEID0gJ3NlbGVjdGVkJztcblxuICBwcml2YXRlIGxpc3RFbGVtZW50OiBET007XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBMaXN0U2VsZWN0b3JDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICB0YWc6ICd1bCcsXG4gICAgICBjc3NDbGFzczogJ3VpLWl0ZW1zZWxlY3Rpb25saXN0JyxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgaXNBY3RpdmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXMubGVuZ3RoID4gMTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0b0RvbUVsZW1lbnQoKTogRE9NIHtcbiAgICBsZXQgbGlzdEVsZW1lbnQgPSBuZXcgRE9NKCd1bCcsIHtcbiAgICAgICdpZCc6IHRoaXMuY29uZmlnLmlkLFxuICAgICAgJ2NsYXNzJzogdGhpcy5nZXRDc3NDbGFzc2VzKCksXG4gICAgfSk7XG5cbiAgICB0aGlzLmxpc3RFbGVtZW50ID0gbGlzdEVsZW1lbnQ7XG4gICAgdGhpcy51cGRhdGVEb21JdGVtcygpO1xuXG4gICAgcmV0dXJuIGxpc3RFbGVtZW50O1xuICB9XG5cbiAgcHJvdGVjdGVkIHVwZGF0ZURvbUl0ZW1zKHNlbGVjdGVkVmFsdWU6IHN0cmluZyA9IG51bGwpIHtcbiAgICAvLyBEZWxldGUgYWxsIGNoaWxkcmVuXG4gICAgdGhpcy5saXN0RWxlbWVudC5lbXB0eSgpO1xuXG4gICAgbGV0IHNlbGVjdGVkTGlzdEl0ZW06IERPTSA9IG51bGw7XG5cbiAgICBjb25zdCBzZWxlY3RJdGVtID0gKGxpc3RJdGVtOiBET00pID0+IHtcbiAgICAgIGxpc3RJdGVtLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKEl0ZW1TZWxlY3Rpb25MaXN0LkNMQVNTX1NFTEVDVEVEKSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGRlc2VsZWN0SXRlbSA9IChsaXN0SXRlbTogRE9NKSA9PiB7XG4gICAgICBsaXN0SXRlbS5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeENzcyhJdGVtU2VsZWN0aW9uTGlzdC5DTEFTU19TRUxFQ1RFRCkpO1xuICAgIH07XG5cbiAgICBmb3IgKGxldCBpdGVtIG9mIHRoaXMuaXRlbXMpIHtcbiAgICAgIGxldCBsaXN0SXRlbSA9IG5ldyBET00oJ2xpJywge1xuICAgICAgICAndHlwZSc6ICdsaScsXG4gICAgICAgICdjbGFzcyc6IHRoaXMucHJlZml4Q3NzKCd1aS1zZWxlY3Rpb25saXN0aXRlbScpLFxuICAgICAgfSkuYXBwZW5kKG5ldyBET00oJ2EnLCB7XG4gICAgICB9KS5odG1sKGkxOG4ucGVyZm9ybUxvY2FsaXphdGlvbihpdGVtLmxhYmVsKSkpO1xuXG4gICAgICBpZiAoIXNlbGVjdGVkTGlzdEl0ZW0pIHtcbiAgICAgICAgaWYgKHNlbGVjdGVkVmFsdWUgPT0gbnVsbCkgeyAvLyBJZiB0aGVyZSBpcyBubyBwcmUtc2VsZWN0ZWQgdmFsdWUsIHNlbGVjdCB0aGUgZmlyc3Qgb25lXG4gICAgICAgICAgc2VsZWN0ZWRMaXN0SXRlbSA9IGxpc3RJdGVtO1xuICAgICAgICB9IGVsc2UgaWYgKFN0cmluZyhzZWxlY3RlZFZhbHVlKSA9PT0gaXRlbS5rZXkpIHsgLy8gY29udmVydCBzZWxlY3RlZFZhbHVlIHRvIHN0cmluZyB0byBjYXRjaCAnbnVsbCcvbnVsbCBjYXNlXG4gICAgICAgICAgc2VsZWN0ZWRMaXN0SXRlbSA9IGxpc3RJdGVtO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEhhbmRsZSBsaXN0IGl0ZW0gc2VsZWN0aW9uc1xuICAgICAgbGlzdEl0ZW0ub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAvLyBEZXNlbGVjdCB0aGUgcHJldmlvdXMgaXRlbSAoaWYgdGhlcmUgd2FzIGEgc2VsZWN0ZWQgaXRlbSlcbiAgICAgICAgaWYgKHNlbGVjdGVkTGlzdEl0ZW0pIHtcbiAgICAgICAgICBkZXNlbGVjdEl0ZW0oc2VsZWN0ZWRMaXN0SXRlbSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZWxlY3QgdGhlIGNsaWNrZWQgaXRlbVxuICAgICAgICBzZWxlY3RlZExpc3RJdGVtID0gbGlzdEl0ZW07XG4gICAgICAgIHNlbGVjdEl0ZW0obGlzdEl0ZW0pO1xuXG4gICAgICAgIC8vIEZpcmUgdGhlIGV2ZW50XG4gICAgICAgIHRoaXMub25JdGVtU2VsZWN0ZWRFdmVudChpdGVtLmtleSwgZmFsc2UpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFNlbGVjdCBkZWZhdWx0IGl0ZW1cbiAgICAgIGlmIChzZWxlY3RlZExpc3RJdGVtKSB7XG4gICAgICAgIHNlbGVjdEl0ZW0oc2VsZWN0ZWRMaXN0SXRlbSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGlzdEVsZW1lbnQuYXBwZW5kKGxpc3RJdGVtKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgb25JdGVtQWRkZWRFdmVudCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIub25JdGVtQWRkZWRFdmVudCh2YWx1ZSk7XG4gICAgdGhpcy51cGRhdGVEb21JdGVtcyh0aGlzLnNlbGVjdGVkSXRlbSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25JdGVtUmVtb3ZlZEV2ZW50KHZhbHVlOiBzdHJpbmcpIHtcbiAgICBzdXBlci5vbkl0ZW1SZW1vdmVkRXZlbnQodmFsdWUpO1xuICAgIHRoaXMudXBkYXRlRG9tSXRlbXModGhpcy5zZWxlY3RlZEl0ZW0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uSXRlbVNlbGVjdGVkRXZlbnQodmFsdWU6IHN0cmluZywgdXBkYXRlRG9tSXRlbXM6IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgc3VwZXIub25JdGVtU2VsZWN0ZWRFdmVudCh2YWx1ZSk7XG4gICAgaWYgKHVwZGF0ZURvbUl0ZW1zKSB7XG4gICAgICB0aGlzLnVwZGF0ZURvbUl0ZW1zKHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7Q29tcG9uZW50Q29uZmlnLCBDb21wb25lbnR9IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCB7RE9NfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHtFdmVudERpc3BhdGNoZXIsIEV2ZW50LCBOb0FyZ3N9IGZyb20gJy4uL2V2ZW50ZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBMb2NhbGl6YWJsZVRleHQsIGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIGEge0BsaW5rIExhYmVsfSBjb21wb25lbnQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTGFiZWxDb25maWcgZXh0ZW5kcyBDb21wb25lbnRDb25maWcge1xuICAvKipcbiAgICogVGhlIHRleHQgYXMgc3RyaW5nIG9yIGxvY2FsaXplIGNhbGxiYWNrIG9uIHRoZSBsYWJlbC5cbiAgICovXG4gIHRleHQ/OiBMb2NhbGl6YWJsZVRleHQ7XG5cbiAgLyoqXG4gICAqIFdDQUcyMCBzdGFuZGFyZDogQXNzb2NpYXRlIGxhYmVsIHRvIGZvcm0gY29udHJvbC5cbiAgICovXG4gIGZvcj86IHN0cmluZztcbn1cblxuLyoqXG4gKiBBIHNpbXBsZSB0ZXh0IGxhYmVsLlxuICpcbiAqIERPTSBleGFtcGxlOlxuICogPGNvZGU+XG4gKiAgICAgPHNwYW4gY2xhc3M9J3VpLWxhYmVsJz4uLi5zb21lIHRleHQuLi48L3NwYW4+XG4gKiA8L2NvZGU+XG4gKi9cbmV4cG9ydCBjbGFzcyBMYWJlbDxDb25maWcgZXh0ZW5kcyBMYWJlbENvbmZpZz4gZXh0ZW5kcyBDb21wb25lbnQ8Q29uZmlnPiB7XG5cbiAgcHJpdmF0ZSB0ZXh0OiBMb2NhbGl6YWJsZVRleHQ7XG5cbiAgcHJpdmF0ZSBsYWJlbEV2ZW50cyA9IHtcbiAgICBvbkNsaWNrOiBuZXcgRXZlbnREaXNwYXRjaGVyPExhYmVsPENvbmZpZz4sIE5vQXJncz4oKSxcbiAgICBvblRleHRDaGFuZ2VkOiBuZXcgRXZlbnREaXNwYXRjaGVyPExhYmVsPENvbmZpZz4sIHN0cmluZz4oKSxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbmZpZyA9IHt9IGFzIENvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLWxhYmVsJyxcbiAgICB9IGFzIENvbmZpZywgdGhpcy5jb25maWcpO1xuICAgIHRoaXMudGV4dCA9IHRoaXMuY29uZmlnLnRleHQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgdG9Eb21FbGVtZW50KCk6IERPTSB7XG4gICAgY29uc3QgdGFnTmFtZSA9IHRoaXMuY29uZmlnLmZvciAhPSBudWxsID8gJ2xhYmVsJyA6ICdzcGFuJztcblxuICAgIGxldCBsYWJlbEVsZW1lbnQgPSBuZXcgRE9NKHRhZ05hbWUsIHtcbiAgICAgICdpZCc6IHRoaXMuY29uZmlnLmlkLFxuICAgICAgJ2Zvcic6IHRoaXMuY29uZmlnLmZvcixcbiAgICAgICdjbGFzcyc6IHRoaXMuZ2V0Q3NzQ2xhc3NlcygpLFxuICAgIH0pLmh0bWwoaTE4bi5wZXJmb3JtTG9jYWxpemF0aW9uKHRoaXMudGV4dCkpO1xuXG4gICAgbGFiZWxFbGVtZW50Lm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgIHRoaXMub25DbGlja0V2ZW50KCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbGFiZWxFbGVtZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdGV4dCBvbiB0aGlzIGxhYmVsLlxuICAgKiBAcGFyYW0gdGV4dFxuICAgKi9cbiAgc2V0VGV4dCh0ZXh0OiBMb2NhbGl6YWJsZVRleHQpIHtcbiAgICBpZiAodGV4dCA9PT0gdGhpcy50ZXh0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICBjb25zdCBsb2NhbGl6ZWRUZXh0ID0gaTE4bi5wZXJmb3JtTG9jYWxpemF0aW9uKHRleHQpO1xuICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmh0bWwobG9jYWxpemVkVGV4dCk7XG4gICAgdGhpcy5vblRleHRDaGFuZ2VkRXZlbnQobG9jYWxpemVkVGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgdGV4dCBvbiB0aGlzIGxhYmVsLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB0ZXh0IG9uIHRoZSBsYWJlbFxuICAgKi9cbiAgZ2V0VGV4dCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24odGhpcy50ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhcnMgdGhlIHRleHQgb24gdGhpcyBsYWJlbC5cbiAgICovXG4gIGNsZWFyVGV4dCgpIHtcbiAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5odG1sKCcnKTtcbiAgICB0aGlzLm9uVGV4dENoYW5nZWRFdmVudChudWxsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUZXN0cyBpZiB0aGUgbGFiZWwgaXMgZW1wdHkgYW5kIGRvZXMgbm90IGNvbnRhaW4gYW55IHRleHQuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGxhYmVsIGlzIGVtcHR5LCBlbHNlIGZhbHNlXG4gICAqL1xuICBpc0VtcHR5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy50ZXh0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHRoZSB7QGxpbmsgI29uQ2xpY2t9IGV2ZW50LlxuICAgKiBDYW4gYmUgdXNlZCBieSBzdWJjbGFzc2VzIHRvIGxpc3RlbiB0byB0aGlzIGV2ZW50IHdpdGhvdXQgc3Vic2NyaWJpbmcgYW4gZXZlbnQgbGlzdGVuZXIgYnkgb3ZlcndyaXRpbmcgdGhlIG1ldGhvZFxuICAgKiBhbmQgY2FsbGluZyB0aGUgc3VwZXIgbWV0aG9kLlxuICAgKi9cbiAgcHJvdGVjdGVkIG9uQ2xpY2tFdmVudCgpIHtcbiAgICB0aGlzLmxhYmVsRXZlbnRzLm9uQ2xpY2suZGlzcGF0Y2godGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgdGhlIHtAbGluayAjb25DbGlja30gZXZlbnQuXG4gICAqIENhbiBiZSB1c2VkIGJ5IHN1YmNsYXNzZXMgdG8gbGlzdGVuIHRvIHRoaXMgZXZlbnQgd2l0aG91dCBzdWJzY3JpYmluZyBhbiBldmVudCBsaXN0ZW5lciBieSBvdmVyd3JpdGluZyB0aGUgbWV0aG9kXG4gICAqIGFuZCBjYWxsaW5nIHRoZSBzdXBlciBtZXRob2QuXG4gICAqL1xuICBwcm90ZWN0ZWQgb25UZXh0Q2hhbmdlZEV2ZW50KHRleHQ6IHN0cmluZykge1xuICAgIHRoaXMubGFiZWxFdmVudHMub25UZXh0Q2hhbmdlZC5kaXNwYXRjaCh0aGlzLCB0ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIGxhYmVsIGlzIGNsaWNrZWQuXG4gICAqIEByZXR1cm5zIHtFdmVudDxMYWJlbDxMYWJlbENvbmZpZz4sIE5vQXJncz59XG4gICAqL1xuICBnZXQgb25DbGljaygpOiBFdmVudDxMYWJlbDxMYWJlbENvbmZpZz4sIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLmxhYmVsRXZlbnRzLm9uQ2xpY2suZ2V0RXZlbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIHRleHQgb24gdGhlIGxhYmVsIGlzIGNoYW5nZWQuXG4gICAqIEByZXR1cm5zIHtFdmVudDxMYWJlbDxMYWJlbENvbmZpZz4sIHN0cmluZz59XG4gICAqL1xuICBnZXQgb25UZXh0Q2hhbmdlZCgpOiBFdmVudDxMYWJlbDxMYWJlbENvbmZpZz4sIHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLmxhYmVsRXZlbnRzLm9uVGV4dENoYW5nZWQuZ2V0RXZlbnQoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgVG9nZ2xlQnV0dG9uLCBUb2dnbGVCdXR0b25Db25maWcgfSBmcm9tICcuL3RvZ2dsZWJ1dHRvbic7XG5pbXBvcnQgeyBMaXN0SXRlbSwgTGlzdFNlbGVjdG9yLCBMaXN0U2VsZWN0b3JDb25maWcgfSBmcm9tICcuL2xpc3RzZWxlY3Rvcic7XG5pbXBvcnQge0RPTX0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBVSUluc3RhbmNlTWFuYWdlciB9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBBcnJheVV0aWxzIH0gZnJvbSAnLi4vYXJyYXl1dGlscyc7XG5cbi8qKlxuICogQSBlbGVtZW50IHRvIHNlbGVjdCBhIHNpbmdsZSBpdGVtIG91dCBvZiBhIGxpc3Qgb2YgYXZhaWxhYmxlIGl0ZW1zLlxuICpcbiAqIERPTSBleGFtcGxlOlxuICogPGNvZGU+XG4gKiAgIDxkaXYgY2xhc3M9J3VpLWxpc3Rib3gnPlxuICogICAgIDxidXR0b24gY2xhc3M9J3VpLWxpc3Rib3gtYnV0dG9uJz5sYWJlbDwvYnV0dG9uPlxuICogICAgIC4uLlxuICogICA8L2RpdlxuICogPC9jb2RlPlxuICovXG4vLyBUT0RPOiBjaGFuZ2UgTGlzdFNlbGVjdG9yIHRvIGV4dGVuZHMgY29udGFpbmVyIGluIHY0IHRvIGltcHJvdmUgdXNhZ2Ugb2YgTGlzdEJveC5cbi8vICAgICAgIEN1cnJlbnRseSB3ZSBhcmUgY3JlYXRpbmcgdGhlIGRvbSBlbGVtZW50IG9mIHRoZSBsaXN0IGJveCB3aXRoIGNoaWxkIGVsZW1lbnRzIG1hbnVhbGx5IGhlcmUuXG4vLyAgICAgICBCdXQgdGhpcyBmdW5jdGlvbmFsaXR5IGlzIGFscmVhZHkgY292ZXJlZCB3aXRoaW4gdGhlIENvbnRhaW5lciBjb21wb25lbnQuXG5leHBvcnQgY2xhc3MgTGlzdEJveCBleHRlbmRzIExpc3RTZWxlY3RvcjxMaXN0U2VsZWN0b3JDb25maWc+IHtcbiAgcHJpdmF0ZSBsaXN0Qm94RWxlbWVudDogRE9NO1xuICBwcml2YXRlIGNvbXBvbmVudHM6IExpc3RCb3hJdGVtQnV0dG9uW10gPSBbXTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IExpc3RTZWxlY3RvckNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktbGlzdGJveCcsXG4gICAgfSBhcyBMaXN0U2VsZWN0b3JDb25maWcsIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIHB1YmxpYyBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICAvLyBTdWJzY3JpYmUgYmVmb3JlIHN1cGVyIGNhbGwgdG8gcmVjZWl2ZSBpbml0aWFsIGV2ZW50c1xuICAgIHRoaXMub25JdGVtQWRkZWQuc3Vic2NyaWJlKHRoaXMuYWRkTGlzdEJveERvbUl0ZW0pO1xuICAgIHRoaXMub25JdGVtUmVtb3ZlZC5zdWJzY3JpYmUodGhpcy5yZW1vdmVMaXN0Qm94RG9tSXRlbSk7XG4gICAgdGhpcy5vbkl0ZW1TZWxlY3RlZC5zdWJzY3JpYmUodGhpcy5yZWZyZXNoU2VsZWN0ZWRJdGVtKTtcblxuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG4gIH1cblxuICBwcm90ZWN0ZWQgdG9Eb21FbGVtZW50KCk6IERPTSB7XG4gICAgbGV0IGxpc3RCb3hFbGVtZW50ID0gbmV3IERPTSgnZGl2Jywge1xuICAgICAgJ2lkJzogdGhpcy5jb25maWcuaWQsXG4gICAgICAnY2xhc3MnOiB0aGlzLmdldENzc0NsYXNzZXMoKSxcbiAgICB9KTtcblxuICAgIHRoaXMubGlzdEJveEVsZW1lbnQgPSBsaXN0Qm94RWxlbWVudDtcbiAgICB0aGlzLmNyZWF0ZUxpc3RCb3hEb21JdGVtcygpO1xuICAgIHRoaXMucmVmcmVzaFNlbGVjdGVkSXRlbSgpO1xuXG4gICAgcmV0dXJuIGxpc3RCb3hFbGVtZW50O1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVMaXN0Qm94RG9tSXRlbXMoKSB7XG4gICAgLy8gRGVsZXRlIGFsbCBjaGlsZHJlblxuICAgIHRoaXMubGlzdEJveEVsZW1lbnQuZW1wdHkoKTtcbiAgICB0aGlzLmNvbXBvbmVudHMgPSBbXTtcblxuICAgIC8vIEFkZCB1cGRhdGVkIGNoaWxkcmVuXG4gICAgZm9yIChsZXQgaXRlbSBvZiB0aGlzLml0ZW1zKSB7XG4gICAgICB0aGlzLmFkZExpc3RCb3hEb21JdGVtKHRoaXMsIGl0ZW0ua2V5KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZUxpc3RCb3hEb21JdGVtID0gKF86IExpc3RCb3gsIGtleTogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5nZXRDb21wb25lbnRGb3JLZXkoa2V5KTtcbiAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICBjb21wb25lbnQuZ2V0RG9tRWxlbWVudCgpLnJlbW92ZSgpO1xuICAgICAgQXJyYXlVdGlscy5yZW1vdmUodGhpcy5jb21wb25lbnRzLCBjb21wb25lbnQpO1xuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIGFkZExpc3RCb3hEb21JdGVtID0gKF86IExpc3RCb3gsIGtleTogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5nZXRDb21wb25lbnRGb3JLZXkoa2V5KTtcbiAgICBjb25zdCBuZXdJdGVtID0gdGhpcy5nZXRJdGVtRm9yS2V5KGtleSk7XG4gICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgLy8gVXBkYXRlIGV4aXN0aW5nIGNvbXBvbmVudFxuICAgICAgY29tcG9uZW50LnNldFRleHQobmV3SXRlbS5sYWJlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGxpc3RCb3hJdGVtQnV0dG9uID0gdGhpcy5idWlsZExpc3RCb3hJdGVtQnV0dG9uKG5ld0l0ZW0pO1xuXG4gICAgICBsaXN0Qm94SXRlbUJ1dHRvbi5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuaGFuZGxlU2VsZWN0aW9uQ2hhbmdlKGxpc3RCb3hJdGVtQnV0dG9uKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLmNvbXBvbmVudHMucHVzaChsaXN0Qm94SXRlbUJ1dHRvbik7XG4gICAgICB0aGlzLmxpc3RCb3hFbGVtZW50LmFwcGVuZChsaXN0Qm94SXRlbUJ1dHRvbi5nZXREb21FbGVtZW50KCkpO1xuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIHJlZnJlc2hTZWxlY3RlZEl0ZW0gPSAoKSA9PiB7XG4gICAgLy8gVGhpcyBnZXRzIGNhbGxlZCB0d2ljZSBiZWNhdXNlIHRoZSBmaXJzdCB0aW1lIGlzIHRyaWdnZXJlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiB0aGUgTGlzdEJveEl0ZW1CdXR0b24uIEFuZCB0aGVcbiAgICAvLyBzZWNvbmQgY2FsbCBjb21lcyBmcm9tIHRoZSBwbGF5ZXIgZXZlbnQgd2hlbiB0aGUgYWN0dWFsIGl0ZW0gaXMgc2VsZWN0ZWQgKFN1YnRpdGxlIC8gQXVkaW9UcmFjayBpbiB0aGlzIGNhc2UpLlxuICAgIC8vIEFzIHRoaXMgaXMgYSBnZW5lcmljIGNvbXBvbmVudCB3ZSBjYW4ndCBwcm9oaWJpdCB0aGlzIGJlaGF2aW91ci4gV2UgbmVlZCB0byB0cmVhdCB0aGlzIGNvbXBvbmVudCBhcyBpdCBhY3RzXG4gICAgLy8gaW5kZXBlbmRlbnQgZnJvbSBQbGF5ZXJFdmVudHMgYW5kIG9uIHRoZSBvdGhlciBoYW5kIHdlIG5lZWQgdG8gcmVhY3QgdG8gUGxheWVyRXZlbnRzIGFzIGl0IGNvdWxkIGJlIHRyaWdnZXJlZFxuICAgIC8vIGZyb20gb3V0c2lkZS5cblxuICAgIGZvciAobGV0IGl0ZW0gb2YgdGhpcy5pdGVtcykge1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5nZXRDb21wb25lbnRGb3JLZXkoaXRlbS5rZXkpO1xuICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICBTdHJpbmcoY29tcG9uZW50LmtleSkgPT09IFN0cmluZyh0aGlzLnNlbGVjdGVkSXRlbSkgPyBjb21wb25lbnQub24oKSA6IGNvbXBvbmVudC5vZmYoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSBidWlsZExpc3RCb3hJdGVtQnV0dG9uKGxpc3RJdGVtOiBMaXN0SXRlbSk6IExpc3RCb3hJdGVtQnV0dG9uIHtcbiAgICByZXR1cm4gbmV3IExpc3RCb3hJdGVtQnV0dG9uKHtcbiAgICAgIGtleTogbGlzdEl0ZW0ua2V5LFxuICAgICAgdGV4dDogbGlzdEl0ZW0ubGFiZWwsXG4gICAgICBhcmlhTGFiZWw6IGxpc3RJdGVtLmFyaWFMYWJlbCxcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q29tcG9uZW50Rm9yS2V5KGtleTogc3RyaW5nKTogTGlzdEJveEl0ZW1CdXR0b24ge1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudHMuZmluZCgoYykgPT4ga2V5ID09PSBjLmtleSk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZVNlbGVjdGlvbkNoYW5nZSA9IChzZW5kZXI6IExpc3RCb3hJdGVtQnV0dG9uKSA9PiB7XG4gICAgdGhpcy5vbkl0ZW1TZWxlY3RlZEV2ZW50KHNlbmRlci5rZXkpO1xuICB9O1xufVxuXG5pbnRlcmZhY2UgTGlzdEJveEl0ZW1CdXR0b25Db25maWcgZXh0ZW5kcyBUb2dnbGVCdXR0b25Db25maWcge1xuICAvKipcbiAgICoga2V5IHRvIGlkZW50aWZ5IHNlbGVjdGVkIGl0ZW0uIFNpbWlsYXIgdG8gdGhlIHZhbHVlIGF0dHJpYnV0ZSBvZiBhbiBzZWxlY3Qgb3B0aW9uLlxuICAgKi9cbiAga2V5OiBzdHJpbmc7XG59XG5cbmNsYXNzIExpc3RCb3hJdGVtQnV0dG9uIGV4dGVuZHMgVG9nZ2xlQnV0dG9uPExpc3RCb3hJdGVtQnV0dG9uQ29uZmlnPiB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBMaXN0Qm94SXRlbUJ1dHRvbkNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLWxpc3Rib3gtYnV0dG9uJyxcbiAgICAgIG9uQ2xhc3M6ICdzZWxlY3RlZCcsXG4gICAgICBvZmZDbGFzczogJycsXG4gICAgfSBhcyBMaXN0Qm94SXRlbUJ1dHRvbkNvbmZpZywgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgZ2V0IGtleSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAodGhpcy5jb25maWcgYXMgTGlzdEJveEl0ZW1CdXR0b25Db25maWcpLmtleTtcbiAgfVxufVxuIiwiaW1wb3J0IHtDb21wb25lbnQsIENvbXBvbmVudENvbmZpZ30gZnJvbSAnLi9jb21wb25lbnQnO1xuaW1wb3J0IHtFdmVudERpc3BhdGNoZXIsIEV2ZW50fSBmcm9tICcuLi9ldmVudGRpc3BhdGNoZXInO1xuaW1wb3J0IHtBcnJheVV0aWxzfSBmcm9tICcuLi9hcnJheXV0aWxzJztcbmltcG9ydCB7IExvY2FsaXphYmxlVGV4dCwgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIG1hcCBvZiBpdGVtcyAoa2V5L3ZhbHVlIC0+IGxhYmVsfSBmb3IgYSB7QGxpbmsgTGlzdFNlbGVjdG9yfSBpbiBhIHtAbGluayBMaXN0U2VsZWN0b3JDb25maWd9LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIExpc3RJdGVtIHtcbiAga2V5OiBzdHJpbmc7XG4gIGxhYmVsOiBMb2NhbGl6YWJsZVRleHQ7XG4gIHNvcnRlZEluc2VydD86IGJvb2xlYW47XG4gIGFyaWFMYWJlbD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBGaWx0ZXIgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBmaWx0ZXIgb3V0IGxpc3QgaXRlbXMgYWRkZWQgdGhyb3VnaCB7QGxpbmsgTGlzdFNlbGVjdG9yLmFkZEl0ZW19LlxuICpcbiAqIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHN1YmNsYXNzZXMgdGhhdCBwb3B1bGF0ZSB0aGVtc2VsdmVzIGF1dG9tYXRpY2FsbHlcbiAqIHZpYSB0aGUgcGxheWVyIEFQSSwgZS5nLiB7QGxpbmsgU3VidGl0bGVTZWxlY3RCb3h9LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIExpc3RJdGVtRmlsdGVyIHtcbiAgLyoqXG4gICAqIFRha2VzIGEgbGlzdCBpdGVtIGFuZCBkZWNpZGVzIHdoZXRoZXIgaXQgc2hvdWxkIHBhc3Mgb3IgYmUgZGlzY2FyZGVkLlxuICAgKiBAcGFyYW0ge0xpc3RJdGVtfSBsaXN0SXRlbSB0aGUgaXRlbSB0byBhcHBseSB0aGUgZmlsdGVyIHRvXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIHRvIGxldCB0aGUgaXRlbSBwYXNzIHRocm91Z2ggdGhlIGZpbHRlciwgZmFsc2UgdG8gZGlzY2FyZCB0aGUgaXRlbVxuICAgKi9cbiAgKGxpc3RJdGVtOiBMaXN0SXRlbSk6IGJvb2xlYW47XG59XG5cbi8qKlxuICogVHJhbnNsYXRvciBmdW5jdGlvbiB0byB0cmFuc2xhdGUgbGFiZWxzIG9mIGxpc3QgaXRlbXMgYWRkZWQgdGhyb3VnaCB7QGxpbmsgTGlzdFNlbGVjdG9yLmFkZEl0ZW19LlxuICpcbiAqIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHN1YmNsYXNzZXMgdGhhdCBwb3B1bGF0ZSB0aGVtc2VsdmVzIGF1dG9tYXRpY2FsbHlcbiAqIHZpYSB0aGUgcGxheWVyIEFQSSwgZS5nLiB7QGxpbmsgU3VidGl0bGVTZWxlY3RCb3h9LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIExpc3RJdGVtTGFiZWxUcmFuc2xhdG9yIHtcbiAgLyoqXG4gICAqIFRha2VzIGEgbGlzdCBpdGVtLCBvcHRpb25hbGx5IGNoYW5nZXMgdGhlIGxhYmVsLCBhbmQgcmV0dXJucyB0aGUgbmV3IGxhYmVsLlxuICAgKiBAcGFyYW0ge0xpc3RJdGVtfSBsaXN0SXRlbSB0aGUgaXRlbSB0byB0cmFuc2xhdGVcbiAgICogQHJldHVybnMge3N0cmluZ30gdGhlIHRyYW5zbGF0ZWQgb3Igb3JpZ2luYWwgbGFiZWxcbiAgICovXG4gIChsaXN0SXRlbTogTGlzdEl0ZW0pOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIGEge0BsaW5rIExpc3RTZWxlY3Rvcn0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTGlzdFNlbGVjdG9yQ29uZmlnIGV4dGVuZHMgQ29tcG9uZW50Q29uZmlnIHtcbiAgaXRlbXM/OiBMaXN0SXRlbVtdO1xuICBmaWx0ZXI/OiBMaXN0SXRlbUZpbHRlcjtcbiAgdHJhbnNsYXRvcj86IExpc3RJdGVtTGFiZWxUcmFuc2xhdG9yO1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTGlzdFNlbGVjdG9yPENvbmZpZyBleHRlbmRzIExpc3RTZWxlY3RvckNvbmZpZz4gZXh0ZW5kcyBDb21wb25lbnQ8TGlzdFNlbGVjdG9yQ29uZmlnPiB7XG5cbiAgcHJvdGVjdGVkIGl0ZW1zOiBMaXN0SXRlbVtdO1xuICBwcm90ZWN0ZWQgc2VsZWN0ZWRJdGVtOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBsaXN0U2VsZWN0b3JFdmVudHMgPSB7XG4gICAgb25JdGVtQWRkZWQ6IG5ldyBFdmVudERpc3BhdGNoZXI8TGlzdFNlbGVjdG9yPENvbmZpZz4sIHN0cmluZz4oKSxcbiAgICBvbkl0ZW1SZW1vdmVkOiBuZXcgRXZlbnREaXNwYXRjaGVyPExpc3RTZWxlY3RvcjxDb25maWc+LCBzdHJpbmc+KCksXG4gICAgb25JdGVtU2VsZWN0ZWQ6IG5ldyBFdmVudERpc3BhdGNoZXI8TGlzdFNlbGVjdG9yPENvbmZpZz4sIHN0cmluZz4oKSxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IExpc3RTZWxlY3RvckNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGl0ZW1zOiBbXSxcbiAgICAgIGNzc0NsYXNzOiAndWktbGlzdHNlbGVjdG9yJyxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG5cbiAgICB0aGlzLml0ZW1zID0gdGhpcy5jb25maWcuaXRlbXM7XG4gIH1cblxuICBwcml2YXRlIGdldEl0ZW1JbmRleChrZXk6IHN0cmluZyk6IG51bWJlciB7XG4gICAgZm9yIChsZXQgaW5kZXggaW4gdGhpcy5pdGVtcykge1xuICAgICAgaWYgKGtleSA9PT0gdGhpcy5pdGVtc1tpbmRleF0ua2V5KSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChpbmRleCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFsbCBjdXJyZW50IGl0ZW1zIG9mIHRoaXMgc2VsZWN0b3IuXG4gICAqICogQHJldHVybnMge0xpc3RJdGVtW119XG4gICAqL1xuICBnZXRJdGVtcygpOiBMaXN0SXRlbVtdIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIHNwZWNpZmllZCBpdGVtIGlzIHBhcnQgb2YgdGhpcyBzZWxlY3Rvci5cbiAgICogQHBhcmFtIGtleSB0aGUga2V5IG9mIHRoZSBpdGVtIHRvIGNoZWNrXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBpdGVtIGlzIHBhcnQgb2YgdGhpcyBzZWxlY3RvciwgZWxzZSBmYWxzZVxuICAgKi9cbiAgaGFzSXRlbShrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmdldEl0ZW1JbmRleChrZXkpID4gLTE7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbiBpdGVtIHRvIHRoaXMgc2VsZWN0b3IgYnkgZG9pbmcgYSBzb3J0ZWQgaW5zZXJ0IG9yIGJ5IGFwcGVuZGluZyB0aGUgZWxlbWVudCB0byB0aGUgZW5kIG9mIHRoZSBsaXN0IG9mIGl0ZW1zLlxuICAgKiBJZiBhbiBpdGVtIHdpdGggdGhlIHNwZWNpZmllZCBrZXkgYWxyZWFkeSBleGlzdHMsIGl0IGlzIHJlcGxhY2VkLlxuICAgKiBAcGFyYW0ga2V5IHRoZSBrZXkgb2YgdGhlIGl0ZW0gdG8gYWRkXG4gICAqIEBwYXJhbSBsYWJlbCB0aGUgKGh1bWFuLXJlYWRhYmxlKSBsYWJlbCBvZiB0aGUgaXRlbSB0byBhZGRcbiAgICogQHBhcmFtIHNvcnRlZEluc2VydCB3aGV0aGVyIHRoZSBpdGVtIHNob3VsZCBiZSBhZGRlZCByZXNwZWN0aW5nIHRoZSBvcmRlciBvZiBrZXlzXG4gICAqIEBwYXJhbSBhcmlhTGFiZWwgY3VzdG9tIGFyaWEgbGFiZWwgZm9yIHRoZSBsaXN0SXRlbVxuICAgKi9cbiAgYWRkSXRlbShrZXk6IHN0cmluZywgbGFiZWw6IExvY2FsaXphYmxlVGV4dCwgc29ydGVkSW5zZXJ0ID0gZmFsc2UsIGFyaWFMYWJlbCA9ICcnKSB7XG4gICAgY29uc3QgbGlzdEl0ZW0gPSB7IGtleToga2V5LCBsYWJlbDogaTE4bi5wZXJmb3JtTG9jYWxpemF0aW9uKGxhYmVsKSwgLi4uKGFyaWFMYWJlbCAmJiB7IGFyaWFMYWJlbCB9KX07XG5cbiAgICAvLyBBcHBseSBmaWx0ZXIgZnVuY3Rpb25cbiAgICBpZiAodGhpcy5jb25maWcuZmlsdGVyICYmICF0aGlzLmNvbmZpZy5maWx0ZXIobGlzdEl0ZW0pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQXBwbHkgdHJhbnNsYXRvciBmdW5jdGlvblxuICAgIGlmICh0aGlzLmNvbmZpZy50cmFuc2xhdG9yKSB7XG4gICAgICBsaXN0SXRlbS5sYWJlbCA9IHRoaXMuY29uZmlnLnRyYW5zbGF0b3IobGlzdEl0ZW0pO1xuICAgIH1cblxuICAgIC8vIFRyeSB0byByZW1vdmUga2V5IGZpcnN0IHRvIGdldCBvdmVyd3JpdGUgYmVoYXZpb3IgYW5kIGF2b2lkIGR1cGxpY2F0ZSBrZXlzXG4gICAgdGhpcy5yZW1vdmVJdGVtKGtleSk7IC8vIFRoaXMgd2lsbCB0cmlnZ2VyIGFuIEl0ZW1SZW1vdmVkIGFuZCBhbiBJdGVtQWRkZWQgZXZlbnRcblxuICAgIC8vIEFkZCB0aGUgaXRlbSB0byB0aGUgbGlzdFxuICAgIGlmIChzb3J0ZWRJbnNlcnQpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5pdGVtcy5maW5kSW5kZXgoZW50cnkgPT4gZW50cnkua2V5ID4ga2V5KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgdGhpcy5pdGVtcy5wdXNoKGxpc3RJdGVtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaXRlbXMuc3BsaWNlKGluZGV4LCAwLCBsaXN0SXRlbSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXRlbXMucHVzaChsaXN0SXRlbSk7XG4gICAgfVxuICAgIHRoaXMub25JdGVtQWRkZWRFdmVudChrZXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYW4gaXRlbSBmcm9tIHRoaXMgc2VsZWN0b3IuXG4gICAqIEBwYXJhbSBrZXkgdGhlIGtleSBvZiB0aGUgaXRlbSB0byByZW1vdmVcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgcmVtb3ZhbCB3YXMgc3VjY2Vzc2Z1bCwgZmFsc2UgaWYgdGhlIGl0ZW0gaXMgbm90IHBhcnQgb2YgdGhpcyBzZWxlY3RvclxuICAgKi9cbiAgcmVtb3ZlSXRlbShrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGxldCBpbmRleCA9IHRoaXMuZ2V0SXRlbUluZGV4KGtleSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIEFycmF5VXRpbHMucmVtb3ZlKHRoaXMuaXRlbXMsIHRoaXMuaXRlbXNbaW5kZXhdKTtcbiAgICAgIHRoaXMub25JdGVtUmVtb3ZlZEV2ZW50KGtleSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogU2VsZWN0cyBhbiBpdGVtIGZyb20gdGhlIGl0ZW1zIGluIHRoaXMgc2VsZWN0b3IuXG4gICAqIEBwYXJhbSBrZXkgdGhlIGtleSBvZiB0aGUgaXRlbSB0byBzZWxlY3RcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaXMgdGhlIHNlbGVjdGlvbiB3YXMgc3VjY2Vzc2Z1bCwgZmFsc2UgaWYgdGhlIHNlbGVjdGVkIGl0ZW0gaXMgbm90IHBhcnQgb2YgdGhlIHNlbGVjdG9yXG4gICAqL1xuICBzZWxlY3RJdGVtKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgaWYgKGtleSA9PT0gdGhpcy5zZWxlY3RlZEl0ZW0pIHtcbiAgICAgIC8vIGl0ZW1Db25maWcgaXMgYWxyZWFkeSBzZWxlY3RlZCwgc3VwcHJlc3MgYW55IGZ1cnRoZXIgYWN0aW9uXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgaW5kZXggPSB0aGlzLmdldEl0ZW1JbmRleChrZXkpO1xuXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtID0ga2V5O1xuICAgICAgdGhpcy5vbkl0ZW1TZWxlY3RlZEV2ZW50KGtleSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUga2V5IG9mIHRoZSBzZWxlY3RlZCBpdGVtLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUga2V5IG9mIHRoZSBzZWxlY3RlZCBpdGVtIG9yIG51bGwgaWYgbm8gaXRlbSBpcyBzZWxlY3RlZFxuICAgKi9cbiAgZ2V0U2VsZWN0ZWRJdGVtKCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLnNlbGVjdGVkSXRlbTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpdGVtcyBmb3IgdGhlIGdpdmVuIGtleSBvciB1bmRlZmluZWQgaWYgbm8gaXRlbSB3aXRoIHRoZSBnaXZlbiBrZXkgZXhpc3RzLlxuICAgKiBAcGFyYW0ga2V5IHRoZSBrZXkgb2YgdGhlIGl0ZW0gdG8gcmV0dXJuXG4gICAqIEByZXR1cm5zIHtMaXN0SXRlbX0gdGhlIGl0ZW0gd2l0aCB0aGUgcmVxdWVzdGVkIGtleS4gVW5kZWZpbmVkIGlmIG5vIGl0ZW0gd2l0aCB0aGUgZ2l2ZW4ga2V5IGV4aXN0cy5cbiAgICovXG4gIGdldEl0ZW1Gb3JLZXkoa2V5OiBzdHJpbmcpOiBMaXN0SXRlbSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXMuZmluZCgoaXRlbSkgPT4gaXRlbS5rZXkgPT09IGtleSk7XG4gIH1cblxuICAvKipcbiAgICogU3luY2hyb25pemUgdGhlIGN1cnJlbnQgaXRlbXMgb2YgdGhpcyBzZWxlY3RvciB3aXRoIHRoZSBnaXZlbiBvbmVzLiBUaGlzIHdpbGwgcmVtb3ZlIGFuZCBhZGQgaXRlbXMgc2VsZWN0aXZlbHkuXG4gICAqIEZvciBlYWNoIHJlbW92ZWQgaXRlbSB0aGUgSXRlbVJlbW92ZWRFdmVudCBhbmQgZm9yIGVhY2ggYWRkZWQgaXRlbSB0aGUgSXRlbUFkZGVkRXZlbnQgd2lsbCBiZSB0cmlnZ2VyZWQuIEZhdm91clxuICAgKiB0aGlzIG1ldGhvZCBvdmVyIHVzaW5nIGNsZWFySXRlbXMgYW5kIGFkZGluZyBhbGwgaXRlbXMgYWdhaW4gYWZ0ZXJ3YXJkcy5cbiAgICogQHBhcmFtIG5ld0l0ZW1zXG4gICAqL1xuICBzeW5jaHJvbml6ZUl0ZW1zKG5ld0l0ZW1zOiBMaXN0SXRlbVtdKTogdm9pZCB7XG4gICAgbmV3SXRlbXNcbiAgICAgIC5maWx0ZXIoKGl0ZW0pID0+ICF0aGlzLmhhc0l0ZW0oaXRlbS5rZXkpKVxuICAgICAgLmZvckVhY2goKGl0ZW0pID0+IHRoaXMuYWRkSXRlbShpdGVtLmtleSwgaXRlbS5sYWJlbCwgaXRlbS5zb3J0ZWRJbnNlcnQsIGl0ZW0uYXJpYUxhYmVsKSk7XG5cbiAgICB0aGlzLml0ZW1zXG4gICAgICAuZmlsdGVyKChpdGVtKSA9PiBuZXdJdGVtcy5maWx0ZXIoKGkpID0+IGkua2V5ID09PSBpdGVtLmtleSkubGVuZ3RoID09PSAwKVxuICAgICAgLmZvckVhY2goKGl0ZW0pID0+IHRoaXMucmVtb3ZlSXRlbShpdGVtLmtleSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYWxsIGl0ZW1zIGZyb20gdGhpcyBzZWxlY3Rvci5cbiAgICovXG4gIGNsZWFySXRlbXMoKSB7XG4gICAgLy8gbG9jYWwgY29weSBmb3IgaXRlcmF0aW9uIGFmdGVyIGNsZWFyXG4gICAgbGV0IGl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICAvLyBjbGVhciBpdGVtc1xuICAgIHRoaXMuaXRlbXMgPSBbXTtcblxuICAgIC8vIGNsZWFyIHRoZSBzZWxlY3Rpb24gYXMgdGhlIHNlbGVjdGVkIGl0ZW0gaXMgYWxzbyByZW1vdmVkXG4gICAgdGhpcy5zZWxlY3RlZEl0ZW0gPSBudWxsO1xuXG4gICAgLy8gZmlyZSBldmVudHNcbiAgICBmb3IgKGxldCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICB0aGlzLm9uSXRlbVJlbW92ZWRFdmVudChpdGVtLmtleSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBpdGVtcyBpbiB0aGlzIHNlbGVjdG9yLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgaXRlbUNvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuaXRlbXMpLmxlbmd0aDtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkl0ZW1BZGRlZEV2ZW50KGtleTogc3RyaW5nKSB7XG4gICAgdGhpcy5saXN0U2VsZWN0b3JFdmVudHMub25JdGVtQWRkZWQuZGlzcGF0Y2godGhpcywga2V5KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkl0ZW1SZW1vdmVkRXZlbnQoa2V5OiBzdHJpbmcpIHtcbiAgICB0aGlzLmxpc3RTZWxlY3RvckV2ZW50cy5vbkl0ZW1SZW1vdmVkLmRpc3BhdGNoKHRoaXMsIGtleSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25JdGVtU2VsZWN0ZWRFdmVudChrZXk6IHN0cmluZykge1xuICAgIHRoaXMubGlzdFNlbGVjdG9yRXZlbnRzLm9uSXRlbVNlbGVjdGVkLmRpc3BhdGNoKHRoaXMsIGtleSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgZXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIGFuIGl0ZW0gaXMgYWRkZWQgdG8gdGhlIGxpc3Qgb2YgaXRlbXMuXG4gICAqIEByZXR1cm5zIHtFdmVudDxMaXN0U2VsZWN0b3I8Q29uZmlnPiwgc3RyaW5nPn1cbiAgICovXG4gIGdldCBvbkl0ZW1BZGRlZCgpOiBFdmVudDxMaXN0U2VsZWN0b3I8Q29uZmlnPiwgc3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMubGlzdFNlbGVjdG9yRXZlbnRzLm9uSXRlbUFkZGVkLmdldEV2ZW50KCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgZXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIGFuIGl0ZW0gaXMgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0IG9mIGl0ZW1zLlxuICAgKiBAcmV0dXJucyB7RXZlbnQ8TGlzdFNlbGVjdG9yPENvbmZpZz4sIHN0cmluZz59XG4gICAqL1xuICBnZXQgb25JdGVtUmVtb3ZlZCgpOiBFdmVudDxMaXN0U2VsZWN0b3I8Q29uZmlnPiwgc3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMubGlzdFNlbGVjdG9yRXZlbnRzLm9uSXRlbVJlbW92ZWQuZ2V0RXZlbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gYW4gaXRlbSBpcyBzZWxlY3RlZCBmcm9tIHRoZSBsaXN0IG9mIGl0ZW1zLlxuICAgKiBAcmV0dXJucyB7RXZlbnQ8TGlzdFNlbGVjdG9yPENvbmZpZz4sIHN0cmluZz59XG4gICAqL1xuICBnZXQgb25JdGVtU2VsZWN0ZWQoKTogRXZlbnQ8TGlzdFNlbGVjdG9yPENvbmZpZz4sIHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLmxpc3RTZWxlY3RvckV2ZW50cy5vbkl0ZW1TZWxlY3RlZC5nZXRFdmVudCgpO1xuICB9XG59IiwiaW1wb3J0IHtMYWJlbENvbmZpZywgTGFiZWx9IGZyb20gJy4vbGFiZWwnO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5cbi8qKlxuICogRW51bWVyYXRlcyB0aGUgdHlwZXMgb2YgY29udGVudCB0aGF0IHRoZSB7QGxpbmsgTWV0YWRhdGFMYWJlbH0gY2FuIGRpc3BsYXkuXG4gKi9cbmV4cG9ydCBlbnVtIE1ldGFkYXRhTGFiZWxDb250ZW50IHtcbiAgLyoqXG4gICAqIFRpdGxlIG9mIHRoZSBkYXRhIHNvdXJjZS5cbiAgICovXG4gIFRpdGxlLFxuICAvKipcbiAgICogRGVzY3JpcHRpb24gZm8gdGhlIGRhdGEgc291cmNlLlxuICAgKi9cbiAgRGVzY3JpcHRpb24sXG59XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIHtAbGluayBNZXRhZGF0YUxhYmVsfS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNZXRhZGF0YUxhYmVsQ29uZmlnIGV4dGVuZHMgTGFiZWxDb25maWcge1xuICAvKipcbiAgICogVGhlIHR5cGUgb2YgY29udGVudCB0aGF0IHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gdGhlIGxhYmVsLlxuICAgKi9cbiAgY29udGVudDogTWV0YWRhdGFMYWJlbENvbnRlbnQ7XG59XG5cbi8qKlxuICogQSBsYWJlbCB0aGF0IGNhbiBiZSBjb25maWd1cmVkIHRvIGRpc3BsYXkgY2VydGFpbiBtZXRhZGF0YS5cbiAqL1xuZXhwb3J0IGNsYXNzIE1ldGFkYXRhTGFiZWwgZXh0ZW5kcyBMYWJlbDxNZXRhZGF0YUxhYmVsQ29uZmlnPiB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBNZXRhZGF0YUxhYmVsQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzZXM6IFsnbGFiZWwtbWV0YWRhdGEnLCAnbGFiZWwtbWV0YWRhdGEtJyArIE1ldGFkYXRhTGFiZWxDb250ZW50W2NvbmZpZy5jb250ZW50XS50b0xvd2VyQ2FzZSgpXSxcbiAgICB9IGFzIE1ldGFkYXRhTGFiZWxDb25maWcsIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICBsZXQgY29uZmlnID0gdGhpcy5nZXRDb25maWcoKTtcbiAgICBsZXQgdWljb25maWcgPSB1aW1hbmFnZXIuZ2V0Q29uZmlnKCk7XG5cbiAgICBsZXQgaW5pdCA9ICgpID0+IHtcbiAgICAgIHN3aXRjaCAoY29uZmlnLmNvbnRlbnQpIHtcbiAgICAgICAgY2FzZSBNZXRhZGF0YUxhYmVsQ29udGVudC5UaXRsZTpcbiAgICAgICAgICB0aGlzLnNldFRleHQodWljb25maWcubWV0YWRhdGEudGl0bGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE1ldGFkYXRhTGFiZWxDb250ZW50LkRlc2NyaXB0aW9uOlxuICAgICAgICAgIHRoaXMuc2V0VGV4dCh1aWNvbmZpZy5tZXRhZGF0YS5kZXNjcmlwdGlvbik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGxldCB1bmxvYWQgPSAoKSA9PiB7XG4gICAgICB0aGlzLnNldFRleHQobnVsbCk7XG4gICAgfTtcblxuICAgIC8vIEluaXQgbGFiZWxcbiAgICBpbml0KCk7XG4gICAgLy8gQ2xlYXIgbGFiZWxzIHdoZW4gc291cmNlIGlzIHVubG9hZGVkXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZVVubG9hZGVkLCB1bmxvYWQpO1xuXG4gICAgdWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKGluaXQpO1xuICB9XG59IiwiaW1wb3J0IHtUb2dnbGVCdXR0b24sIFRvZ2dsZUJ1dHRvbkNvbmZpZ30gZnJvbSAnLi90b2dnbGVidXR0b24nO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEEgYnV0dG9uIHRoYXQgdG9nZ2xlcyBBcHBsZSBtYWNPUyBwaWN0dXJlLWluLXBpY3R1cmUgbW9kZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFBpY3R1cmVJblBpY3R1cmVUb2dnbGVCdXR0b24gZXh0ZW5kcyBUb2dnbGVCdXR0b248VG9nZ2xlQnV0dG9uQ29uZmlnPiB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBUb2dnbGVCdXR0b25Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXBpcHRvZ2dsZWJ1dHRvbicsXG4gICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcigncGljdHVyZUluUGljdHVyZScpLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICBjb25zdCBpc1BpY3R1cmVJblBpY3R1cmVBdmFpbGFibGUgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gcGxheWVyLmlzVmlld01vZGVBdmFpbGFibGUocGxheWVyLmV4cG9ydHMuVmlld01vZGUuUGljdHVyZUluUGljdHVyZSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHBpY3R1cmVJblBpY3R1cmVTdGF0ZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICBwbGF5ZXIuZ2V0Vmlld01vZGUoKSA9PT0gcGxheWVyLmV4cG9ydHMuVmlld01vZGUuUGljdHVyZUluUGljdHVyZSA/IHRoaXMub24oKSA6IHRoaXMub2ZmKCk7XG4gICAgfTtcblxuICAgIGNvbnN0IHBpY3R1cmVJblBpY3R1cmVBdmFpbGFiaWxpdHlDaGFuZ2VkSGFuZGxlciA9ICgpID0+IHtcbiAgICAgIGlzUGljdHVyZUluUGljdHVyZUF2YWlsYWJsZSgpID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcbiAgICB9O1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlZpZXdNb2RlQ2hhbmdlZCwgcGljdHVyZUluUGljdHVyZVN0YXRlSGFuZGxlcik7XG5cbiAgICAvLyBBdmFpbGFibGUgb25seSBpbiBvdXIgbmF0aXZlIFNES3MgZm9yIG5vd1xuICAgIGlmICgocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQgYXMgYW55KS5WaWV3TW9kZUF2YWlsYWJpbGl0eUNoYW5nZWQpIHtcbiAgICAgIHBsYXllci5vbihcbiAgICAgICAgKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50IGFzIGFueSkuVmlld01vZGVBdmFpbGFiaWxpdHlDaGFuZ2VkLFxuICAgICAgICBwaWN0dXJlSW5QaWN0dXJlQXZhaWxhYmlsaXR5Q2hhbmdlZEhhbmRsZXIsXG4gICAgICApO1xuICAgIH1cblxuICAgIHVpbWFuYWdlci5nZXRDb25maWcoKS5ldmVudHMub25VcGRhdGVkLnN1YnNjcmliZShwaWN0dXJlSW5QaWN0dXJlQXZhaWxhYmlsaXR5Q2hhbmdlZEhhbmRsZXIpO1xuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBpZiAoIWlzUGljdHVyZUluUGljdHVyZUF2YWlsYWJsZSgpKSB7XG4gICAgICAgIGlmIChjb25zb2xlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1BJUCB1bmF2YWlsYWJsZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdGFyZ2V0Vmlld01vZGUgPVxuICAgICAgICBwbGF5ZXIuZ2V0Vmlld01vZGUoKSA9PT0gcGxheWVyLmV4cG9ydHMuVmlld01vZGUuUGljdHVyZUluUGljdHVyZVxuICAgICAgICAgID8gcGxheWVyLmV4cG9ydHMuVmlld01vZGUuSW5saW5lXG4gICAgICAgICAgOiBwbGF5ZXIuZXhwb3J0cy5WaWV3TW9kZS5QaWN0dXJlSW5QaWN0dXJlO1xuXG4gICAgICBwbGF5ZXIuc2V0Vmlld01vZGUodGFyZ2V0Vmlld01vZGUpO1xuICAgIH0pO1xuXG4gICAgLy8gU3RhcnR1cCBpbml0XG4gICAgcGljdHVyZUluUGljdHVyZUF2YWlsYWJpbGl0eUNoYW5nZWRIYW5kbGVyKCk7IC8vIEhpZGUgYnV0dG9uIGlmIFBJUCBub3QgYXZhaWxhYmxlXG4gICAgcGljdHVyZUluUGljdHVyZVN0YXRlSGFuZGxlcigpO1xuICB9XG59XG4iLCJpbXBvcnQge1NlbGVjdEJveH0gZnJvbSAnLi9zZWxlY3Rib3gnO1xuaW1wb3J0IHtMaXN0U2VsZWN0b3JDb25maWd9IGZyb20gJy4vbGlzdHNlbGVjdG9yJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIHNlbGVjdCBib3ggcHJvdmlkaW5nIGEgc2VsZWN0aW9uIG9mIGRpZmZlcmVudCBwbGF5YmFjayBzcGVlZHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBQbGF5YmFja1NwZWVkU2VsZWN0Qm94IGV4dGVuZHMgU2VsZWN0Qm94IHtcbiAgcHJvdGVjdGVkIGRlZmF1bHRQbGF5YmFja1NwZWVkczogbnVtYmVyW107XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBMaXN0U2VsZWN0b3JDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG4gICAgdGhpcy5kZWZhdWx0UGxheWJhY2tTcGVlZHMgPSBbMC4yNSwgMC41LCAxLCAxLjUsIDJdO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3NlczogWyd1aS1wbGF5YmFja3NwZWVkc2VsZWN0Ym94J10sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMuYWRkRGVmYXVsdEl0ZW1zKCk7XG5cbiAgICB0aGlzLm9uSXRlbVNlbGVjdGVkLnN1YnNjcmliZSgoc2VuZGVyOiBQbGF5YmFja1NwZWVkU2VsZWN0Qm94LCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICBwbGF5ZXIuc2V0UGxheWJhY2tTcGVlZChwYXJzZUZsb2F0KHZhbHVlKSk7XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0odmFsdWUpO1xuICAgIH0pO1xuXG4gICAgY29uc3Qgc2V0RGVmYXVsdFZhbHVlID0gKCk6IHZvaWQgPT4ge1xuICAgICAgY29uc3QgcGxheWJhY2tTcGVlZCA9IHBsYXllci5nZXRQbGF5YmFja1NwZWVkKCk7XG4gICAgICB0aGlzLnNldFNwZWVkKHBsYXliYWNrU3BlZWQpO1xuICAgIH07XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheWJhY2tTcGVlZENoYW5nZWQsIHNldERlZmF1bHRWYWx1ZSk7XG4gICAgdWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKHNldERlZmF1bHRWYWx1ZSk7XG4gIH1cblxuICBzZXRTcGVlZChzcGVlZDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLnNlbGVjdEl0ZW0oU3RyaW5nKHNwZWVkKSkpIHtcbiAgICAgIC8vIGEgcGxheWJhY2sgc3BlZWQgd2FzIHNldCB3aGljaCBpcyBub3QgaW4gdGhlIGxpc3QsIGFkZCBpdCB0byB0aGUgbGlzdCB0byBzaG93IGl0IHRvIHRoZSB1c2VyXG4gICAgICB0aGlzLmNsZWFySXRlbXMoKTtcbiAgICAgIHRoaXMuYWRkRGVmYXVsdEl0ZW1zKFtzcGVlZF0pO1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKFN0cmluZyhzcGVlZCkpO1xuICAgIH1cbiAgfVxuXG4gIGFkZERlZmF1bHRJdGVtcyhjdXN0b21JdGVtczogbnVtYmVyW10gPSBbXSk6IHZvaWQge1xuICAgIGNvbnN0IHNvcnRlZFNwZWVkcyA9IHRoaXMuZGVmYXVsdFBsYXliYWNrU3BlZWRzLmNvbmNhdChjdXN0b21JdGVtcykuc29ydCgpO1xuXG4gICAgc29ydGVkU3BlZWRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICBpZiAoZWxlbWVudCAhPT0gMSkge1xuICAgICAgICB0aGlzLmFkZEl0ZW0oU3RyaW5nKGVsZW1lbnQpLCBgJHtlbGVtZW50fXhgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYWRkSXRlbShTdHJpbmcoZWxlbWVudCksIGkxOG4uZ2V0TG9jYWxpemVyKCdub3JtYWwnKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjbGVhckl0ZW1zKCk6IHZvaWQge1xuICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAgICB0aGlzLnNlbGVjdGVkSXRlbSA9IG51bGw7XG4gIH1cbn0iLCJpbXBvcnQge0xhYmVsQ29uZmlnLCBMYWJlbH0gZnJvbSAnLi9sYWJlbCc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IExpdmVTdHJlYW1EZXRlY3RvckV2ZW50QXJncyA9IFBsYXllclV0aWxzLkxpdmVTdHJlYW1EZXRlY3RvckV2ZW50QXJncztcbmltcG9ydCB7UGxheWVyVXRpbHN9IGZyb20gJy4uL3BsYXllcnV0aWxzJztcbmltcG9ydCB7U3RyaW5nVXRpbHN9IGZyb20gJy4uL3N0cmluZ3V0aWxzJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG5leHBvcnQgZW51bSBQbGF5YmFja1RpbWVMYWJlbE1vZGUge1xuICAvKipcbiAgICogRGlzcGxheXMgdGhlIGN1cnJlbnQgdGltZVxuICAgKi9cbiAgQ3VycmVudFRpbWUsXG4gIC8qKlxuICAgKiBEaXNwbGF5cyB0aGUgZHVyYXRpb24gb2YgdGhlIGNvbnRlbnRcbiAgICovXG4gIFRvdGFsVGltZSxcbiAgLyoqXG4gICAqIERpc3BsYXlzIHRoZSBjdXJyZW50IHRpbWUgYW5kIHRoZSBkdXJhdGlvbiBvZiB0aGUgY29udGVudFxuICAgKiBGb3JtYXQ6ICR7Y3VycmVudFRpbWV9IC8gJHt0b3RhbFRpbWV9XG4gICAqL1xuICBDdXJyZW50QW5kVG90YWxUaW1lLFxuICAvKipcbiAgICogRGlzcGxheXMgdGhlIHJlbWFpbmluZyB0aW1lIG9mIHRoZSBjb250ZW50XG4gICAqL1xuICBSZW1haW5pbmdUaW1lLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBsYXliYWNrVGltZUxhYmVsQ29uZmlnIGV4dGVuZHMgTGFiZWxDb25maWcge1xuICAvKipcbiAgICogVGhlIHR5cGUgb2Ygd2hpY2ggdGltZSBzaG91bGQgYmUgZGlzcGxheWVkIGluIHRoZSBsYWJlbC5cbiAgICogRGVmYXVsdDogUGxheWJhY2tUaW1lTGFiZWxNb2RlLkN1cnJlbnRBbmRUb3RhbFRpbWVcbiAgICovXG4gIHRpbWVMYWJlbE1vZGU/OiBQbGF5YmFja1RpbWVMYWJlbE1vZGU7XG4gIC8qKlxuICAgKiBCb29sZWFuIGlmIHRoZSBsYWJlbCBzaG91bGQgYmUgaGlkZGVuIGluIGxpdmUgcGxheWJhY2tcbiAgICovXG4gIGhpZGVJbkxpdmVQbGF5YmFjaz86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQSBsYWJlbCB0aGF0IGRpc3BsYXkgdGhlIGN1cnJlbnQgcGxheWJhY2sgdGltZSBhbmQgdGhlIHRvdGFsIHRpbWUgdGhyb3VnaCB7QGxpbmsgUGxheWJhY2tUaW1lTGFiZWwjc2V0VGltZSBzZXRUaW1lfVxuICogb3IgYW55IHN0cmluZyB0aHJvdWdoIHtAbGluayBQbGF5YmFja1RpbWVMYWJlbCNzZXRUZXh0IHNldFRleHR9LlxuICovXG5leHBvcnQgY2xhc3MgUGxheWJhY2tUaW1lTGFiZWwgZXh0ZW5kcyBMYWJlbDxQbGF5YmFja1RpbWVMYWJlbENvbmZpZz4ge1xuXG4gIHByaXZhdGUgdGltZUZvcm1hdDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogUGxheWJhY2tUaW1lTGFiZWxDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCA8UGxheWJhY2tUaW1lTGFiZWxDb25maWc+e1xuICAgICAgY3NzQ2xhc3M6ICd1aS1wbGF5YmFja3RpbWVsYWJlbCcsXG4gICAgICB0aW1lTGFiZWxNb2RlOiBQbGF5YmFja1RpbWVMYWJlbE1vZGUuQ3VycmVudEFuZFRvdGFsVGltZSxcbiAgICAgIGhpZGVJbkxpdmVQbGF5YmFjazogZmFsc2UsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuICAgIGxldCBsaXZlID0gZmFsc2U7XG4gICAgbGV0IGxpdmVDc3NDbGFzcyA9IHRoaXMucHJlZml4Q3NzKCd1aS1wbGF5YmFja3RpbWVsYWJlbC1saXZlJyk7XG4gICAgbGV0IGxpdmVFZGdlQ3NzQ2xhc3MgPSB0aGlzLnByZWZpeENzcygndWktcGxheWJhY2t0aW1lbGFiZWwtbGl2ZS1lZGdlJyk7XG4gICAgbGV0IG1pbldpZHRoID0gMDtcblxuICAgIGxldCBsaXZlQ2xpY2tIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgcGxheWVyLnRpbWVTaGlmdCgwKTtcbiAgICB9O1xuXG4gICAgbGV0IHVwZGF0ZUxpdmVTdGF0ZSA9ICgpID0+IHtcbiAgICAgIC8vIFBsYXllciBpcyBwbGF5aW5nIGEgbGl2ZSBzdHJlYW0gd2hlbiB0aGUgZHVyYXRpb24gaXMgaW5maW5pdGVcbiAgICAgIGxpdmUgPSBwbGF5ZXIuaXNMaXZlKCk7XG5cbiAgICAgIC8vIEF0dGFjaC9kZXRhY2ggbGl2ZSBtYXJrZXIgY2xhc3NcbiAgICAgIGlmIChsaXZlKSB7XG4gICAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmFkZENsYXNzKGxpdmVDc3NDbGFzcyk7XG4gICAgICAgIHRoaXMuc2V0VGV4dChpMThuLmdldExvY2FsaXplcignbGl2ZScpKTtcbiAgICAgICAgaWYgKGNvbmZpZy5oaWRlSW5MaXZlUGxheWJhY2spIHtcbiAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKGxpdmVDbGlja0hhbmRsZXIpO1xuICAgICAgICB1cGRhdGVMaXZlVGltZXNoaWZ0U3RhdGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLnJlbW92ZUNsYXNzKGxpdmVDc3NDbGFzcyk7XG4gICAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLnJlbW92ZUNsYXNzKGxpdmVFZGdlQ3NzQ2xhc3MpO1xuICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgdGhpcy5vbkNsaWNrLnVuc3Vic2NyaWJlKGxpdmVDbGlja0hhbmRsZXIpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBsZXQgdXBkYXRlTGl2ZVRpbWVzaGlmdFN0YXRlID0gKCkgPT4ge1xuICAgICAgaWYgKCFsaXZlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHBsYXllciBpcyBvbmx5IGF0IHRoZSBsaXZlIGVkZ2UgaWZmIHRoZSBzdHJlYW0gaXMgbm90IHNoaWZ0ZWQgYW5kIGl0IGlzIGFjdHVhbGx5IHBsYXlpbmcgb3IgcGxheWJhY2sgaGFzXG4gICAgICAvLyBuZXZlciBiZWVuIHN0YXJ0ZWQgKG1lYW5pbmcgaXQgaXNuJ3QgcGF1c2VkKS4gQSBwbGF5ZXIgdGhhdCBpcyBwYXVzZWQgaXMgYWx3YXlzIGJlaGluZCB0aGUgbGl2ZSBlZGdlLlxuICAgICAgLy8gQW4gZXhjZXB0aW9uIGlzIG1hZGUgZm9yIGxpdmUgc3RyZWFtcyB3aXRob3V0IGEgdGltZXNoaWZ0IHdpbmRvdywgYmVjYXVzZSBoZXJlIHdlIFwic3RvcFwiIHBsYXliYWNrIGluc3RlYWRcbiAgICAgIC8vIG9mIHBhdXNpbmcgaXQgKGZyb20gYSBVSSBwZXJzcGVjdGl2ZSksIHNvIHdlIGtlZXAgdGhlIGxpdmUgZWRnZSBpbmRpY2F0b3Igb24gYmVjYXVzZSBhIHBsYXkgd291bGQgYWx3YXlzXG4gICAgICAvLyByZXN1bWUgYXQgdGhlIGxpdmUgZWRnZS5cbiAgICAgIGNvbnN0IGlzVGltZXNoaWZ0ZWQgPSBwbGF5ZXIuZ2V0VGltZVNoaWZ0KCkgPCAwO1xuICAgICAgY29uc3QgaXNUaW1lc2hpZnRBdmFpbGFibGUgPSBwbGF5ZXIuZ2V0TWF4VGltZVNoaWZ0KCkgPCAwO1xuICAgICAgaWYgKCFpc1RpbWVzaGlmdGVkICYmICghcGxheWVyLmlzUGF1c2VkKCkgfHwgIWlzVGltZXNoaWZ0QXZhaWxhYmxlKSkge1xuICAgICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hZGRDbGFzcyhsaXZlRWRnZUNzc0NsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLnJlbW92ZUNsYXNzKGxpdmVFZGdlQ3NzQ2xhc3MpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBsZXQgbGl2ZVN0cmVhbURldGVjdG9yID0gbmV3IFBsYXllclV0aWxzLkxpdmVTdHJlYW1EZXRlY3RvcihwbGF5ZXIsIHVpbWFuYWdlcik7XG4gICAgbGl2ZVN0cmVhbURldGVjdG9yLm9uTGl2ZUNoYW5nZWQuc3Vic2NyaWJlKChzZW5kZXIsIGFyZ3M6IExpdmVTdHJlYW1EZXRlY3RvckV2ZW50QXJncykgPT4ge1xuICAgICAgbGl2ZSA9IGFyZ3MubGl2ZTtcbiAgICAgIHVwZGF0ZUxpdmVTdGF0ZSgpO1xuICAgIH0pO1xuICAgIGxpdmVTdHJlYW1EZXRlY3Rvci5kZXRlY3QoKTsgLy8gSW5pdGlhbCBkZXRlY3Rpb25cblxuICAgIGxldCBwbGF5YmFja1RpbWVIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgaWYgKCFsaXZlICYmIHBsYXllci5nZXREdXJhdGlvbigpICE9PSBJbmZpbml0eSkge1xuICAgICAgICB0aGlzLnNldFRpbWUoXG4gICAgICAgICAgUGxheWVyVXRpbHMuZ2V0Q3VycmVudFRpbWVSZWxhdGl2ZVRvU2Vla2FibGVSYW5nZShwbGF5ZXIpLFxuICAgICAgICAgIHBsYXllci5nZXREdXJhdGlvbigpKTtcbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgJ2p1bXBpbmcnIGluIHRoZSBVSSBieSB2YXJ5aW5nIGxhYmVsIHNpemVzIGR1ZSB0byBub24tbW9ub3NwYWNlZCBmb250cyxcbiAgICAgIC8vIHdlIGdyYWR1YWxseSBpbmNyZWFzZSB0aGUgbWluLXdpZHRoIHdpdGggdGhlIGNvbnRlbnQgdG8gcmVhY2ggYSBzdGFibGUgc2l6ZS5cbiAgICAgIGxldCB3aWR0aCA9IHRoaXMuZ2V0RG9tRWxlbWVudCgpLndpZHRoKCk7XG4gICAgICBpZiAod2lkdGggPiBtaW5XaWR0aCkge1xuICAgICAgICBtaW5XaWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5jc3Moe1xuICAgICAgICAgICdtaW4td2lkdGgnOiBtaW5XaWR0aCArICdweCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBsZXQgdXBkYXRlVGltZUZvcm1hdEJhc2VkT25EdXJhdGlvbiA9ICgpID0+IHtcbiAgICAgIC8vIFNldCB0aW1lIGZvcm1hdCBkZXBlbmRpbmcgb24gc291cmNlIGR1cmF0aW9uXG4gICAgICB0aGlzLnRpbWVGb3JtYXQgPSBNYXRoLmFicyhwbGF5ZXIuaXNMaXZlKCkgPyBwbGF5ZXIuZ2V0TWF4VGltZVNoaWZ0KCkgOiBwbGF5ZXIuZ2V0RHVyYXRpb24oKSkgPj0gMzYwMCA/XG4gICAgICBTdHJpbmdVdGlscy5GT1JNQVRfSEhNTVNTIDogU3RyaW5nVXRpbHMuRk9STUFUX01NU1M7XG4gICAgICBwbGF5YmFja1RpbWVIYW5kbGVyKCk7XG4gICAgfTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5UaW1lQ2hhbmdlZCwgcGxheWJhY2tUaW1lSGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlJlYWR5LCB1cGRhdGVUaW1lRm9ybWF0QmFzZWRPbkR1cmF0aW9uKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU2Vla2VkLCBwbGF5YmFja1RpbWVIYW5kbGVyKTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5UaW1lU2hpZnQsIHVwZGF0ZUxpdmVUaW1lc2hpZnRTdGF0ZSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlRpbWVTaGlmdGVkLCB1cGRhdGVMaXZlVGltZXNoaWZ0U3RhdGUpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5aW5nLCB1cGRhdGVMaXZlVGltZXNoaWZ0U3RhdGUpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QYXVzZWQsIHVwZGF0ZUxpdmVUaW1lc2hpZnRTdGF0ZSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlN0YWxsU3RhcnRlZCwgdXBkYXRlTGl2ZVRpbWVzaGlmdFN0YXRlKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU3RhbGxFbmRlZCwgdXBkYXRlTGl2ZVRpbWVzaGlmdFN0YXRlKTtcblxuICAgIGxldCBpbml0ID0gKCkgPT4ge1xuICAgICAgLy8gUmVzZXQgbWluLXdpZHRoIHdoZW4gYSBuZXcgc291cmNlIGlzIHJlYWR5IChlc3BlY2lhbGx5IGZvciBzd2l0Y2hpbmcgVk9EL0xpdmUgbW9kZXMgd2hlcmUgdGhlIGxhYmVsIGNvbnRlbnRcbiAgICAgIC8vIGNoYW5nZXMpXG4gICAgICBtaW5XaWR0aCA9IDA7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5jc3Moe1xuICAgICAgICAnbWluLXdpZHRoJzogbnVsbCxcbiAgICAgIH0pO1xuXG4gICAgICB1cGRhdGVUaW1lRm9ybWF0QmFzZWRPbkR1cmF0aW9uKCk7XG4gICAgfTtcbiAgICB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUoaW5pdCk7XG5cbiAgICBpbml0KCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgY3VycmVudCBwbGF5YmFjayB0aW1lIGFuZCB0b3RhbCBkdXJhdGlvbi5cbiAgICogQHBhcmFtIHBsYXliYWNrU2Vjb25kcyB0aGUgY3VycmVudCBwbGF5YmFjayB0aW1lIGluIHNlY29uZHNcbiAgICogQHBhcmFtIGR1cmF0aW9uU2Vjb25kcyB0aGUgdG90YWwgZHVyYXRpb24gaW4gc2Vjb25kc1xuICAgKi9cbiAgc2V0VGltZShwbGF5YmFja1NlY29uZHM6IG51bWJlciwgZHVyYXRpb25TZWNvbmRzOiBudW1iZXIpIHtcbiAgICBsZXQgY3VycmVudFRpbWUgPSBTdHJpbmdVdGlscy5zZWNvbmRzVG9UaW1lKHBsYXliYWNrU2Vjb25kcywgdGhpcy50aW1lRm9ybWF0KTtcbiAgICBsZXQgdG90YWxUaW1lID0gU3RyaW5nVXRpbHMuc2Vjb25kc1RvVGltZShkdXJhdGlvblNlY29uZHMsIHRoaXMudGltZUZvcm1hdCk7XG5cbiAgICBzd2l0Y2ggKCg8UGxheWJhY2tUaW1lTGFiZWxDb25maWc+dGhpcy5jb25maWcpLnRpbWVMYWJlbE1vZGUpIHtcbiAgICAgIGNhc2UgUGxheWJhY2tUaW1lTGFiZWxNb2RlLkN1cnJlbnRUaW1lOlxuICAgICAgICB0aGlzLnNldFRleHQoYCR7Y3VycmVudFRpbWV9YCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBQbGF5YmFja1RpbWVMYWJlbE1vZGUuVG90YWxUaW1lOlxuICAgICAgICB0aGlzLnNldFRleHQoYCR7dG90YWxUaW1lfWApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgUGxheWJhY2tUaW1lTGFiZWxNb2RlLkN1cnJlbnRBbmRUb3RhbFRpbWU6XG4gICAgICAgIHRoaXMuc2V0VGV4dChgJHtjdXJyZW50VGltZX0gLyAke3RvdGFsVGltZX1gKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFBsYXliYWNrVGltZUxhYmVsTW9kZS5SZW1haW5pbmdUaW1lOlxuICAgICAgICBsZXQgcmVtYWluaW5nVGltZSA9IFN0cmluZ1V0aWxzLnNlY29uZHNUb1RpbWUoZHVyYXRpb25TZWNvbmRzIC0gcGxheWJhY2tTZWNvbmRzLCB0aGlzLnRpbWVGb3JtYXQpO1xuICAgICAgICB0aGlzLnNldFRleHQoYCR7cmVtYWluaW5nVGltZX1gKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGN1cnJlbnQgdGltZSBmb3JtYXRcbiAgICogQHBhcmFtIHRpbWVGb3JtYXQgdGhlIHRpbWUgZm9ybWF0XG4gICAqL1xuICBwcm90ZWN0ZWQgc2V0VGltZUZvcm1hdCh0aW1lRm9ybWF0OiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnRpbWVGb3JtYXQgPSB0aW1lRm9ybWF0O1xuICB9XG59XG4iLCJpbXBvcnQge1RvZ2dsZUJ1dHRvbiwgVG9nZ2xlQnV0dG9uQ29uZmlnfSBmcm9tICcuL3RvZ2dsZWJ1dHRvbic7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHtQbGF5ZXJVdGlsc30gZnJvbSAnLi4vcGxheWVydXRpbHMnO1xuaW1wb3J0IHsgUGxheWVyQVBJLCBXYXJuaW5nRXZlbnQgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuZXhwb3J0IGludGVyZmFjZSBQbGF5YmFja1RvZ2dsZUJ1dHRvbkNvbmZpZyBleHRlbmRzIFRvZ2dsZUJ1dHRvbkNvbmZpZyB7XG4gIC8qKlxuICAgKiBTcGVjaWZ5IHdoZXRoZXIgdGhlIHBsYXllciBzaG91bGQgYmUgc2V0IHRvIGVudGVyIGZ1bGxzY3JlZW4gYnkgY2xpY2tpbmcgb24gdGhlIHBsYXliYWNrIHRvZ2dsZSBidXR0b25cbiAgICogd2hlbiBpbml0aWF0aW5nIHRoZSBpbml0aWFsIHBsYXliYWNrLlxuICAgKiBEZWZhdWx0IGlzIGZhbHNlLlxuICAgKi9cbiAgZW50ZXJGdWxsc2NyZWVuT25Jbml0aWFsUGxheWJhY2s/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEEgYnV0dG9uIHRoYXQgdG9nZ2xlcyBiZXR3ZWVuIHBsYXliYWNrIGFuZCBwYXVzZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFBsYXliYWNrVG9nZ2xlQnV0dG9uIGV4dGVuZHMgVG9nZ2xlQnV0dG9uPFBsYXliYWNrVG9nZ2xlQnV0dG9uQ29uZmlnPiB7XG5cbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ0xBU1NfU1RPUFRPR0dMRSA9ICdzdG9wdG9nZ2xlJztcbiAgcHJvdGVjdGVkIGlzUGxheUluaXRpYXRlZDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFBsYXliYWNrVG9nZ2xlQnV0dG9uQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1wbGF5YmFja3RvZ2dsZWJ1dHRvbicsXG4gICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcigncGxheScpLFxuICAgICAgb25BcmlhTGFiZWw6IGkxOG4uZ2V0TG9jYWxpemVyKCdwYXVzZScpLFxuICAgICAgb2ZmQXJpYUxhYmVsOiBpMThuLmdldExvY2FsaXplcigncGxheScpLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcblxuICAgIHRoaXMuaXNQbGF5SW5pdGlhdGVkID0gZmFsc2U7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIsIGhhbmRsZUNsaWNrRXZlbnQ6IGJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIC8vIFNldCBlbnRlckZ1bGxzY3JlZW5PbkluaXRpYWxQbGF5YmFjayBpZiBzZXQgaW4gdGhlIHVpbWFuYWdlciBjb25maWdcbiAgICBpZiAodHlwZW9mIHVpbWFuYWdlci5nZXRDb25maWcoKS5lbnRlckZ1bGxzY3JlZW5PbkluaXRpYWxQbGF5YmFjayA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICB0aGlzLmNvbmZpZy5lbnRlckZ1bGxzY3JlZW5PbkluaXRpYWxQbGF5YmFjayA9IHVpbWFuYWdlci5nZXRDb25maWcoKS5lbnRlckZ1bGxzY3JlZW5PbkluaXRpYWxQbGF5YmFjaztcbiAgICB9XG5cbiAgICBsZXQgaXNTZWVraW5nID0gZmFsc2U7XG4gICAgbGV0IGZpcnN0UGxheSA9IHRydWU7XG5cbiAgICAvLyBIYW5kbGVyIHRvIHVwZGF0ZSBidXR0b24gc3RhdGUgYmFzZWQgb24gcGxheWVyIHN0YXRlXG4gICAgbGV0IHBsYXliYWNrU3RhdGVIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgLy8gSWYgdGhlIFVJIGlzIGN1cnJlbnRseSBzZWVraW5nLCBwbGF5YmFjayBpcyB0ZW1wb3JhcmlseSBzdG9wcGVkIGJ1dCB0aGUgYnV0dG9ucyBzaG91bGRcbiAgICAgIC8vIG5vdCByZWZsZWN0IHRoYXQgYW5kIHN0YXkgYXMtaXMgKGUuZyBpbmRpY2F0ZSBwbGF5YmFjayB3aGlsZSBzZWVraW5nKS5cbiAgICAgIGlmIChpc1NlZWtpbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocGxheWVyLmlzUGxheWluZygpIHx8IHRoaXMuaXNQbGF5SW5pdGlhdGVkKSB7XG4gICAgICAgIHRoaXMub24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub2ZmKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIENhbGwgaGFuZGxlciB1cG9uIHRoZXNlIGV2ZW50c1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5LCAoZSkgPT4ge1xuICAgICAgdGhpcy5pc1BsYXlJbml0aWF0ZWQgPSB0cnVlO1xuICAgICAgZmlyc3RQbGF5ID0gZmFsc2U7XG4gICAgICBwbGF5YmFja1N0YXRlSGFuZGxlcigpO1xuICAgIH0pO1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBhdXNlZCwgKGUpID0+IHtcbiAgICAgIHRoaXMuaXNQbGF5SW5pdGlhdGVkID0gZmFsc2U7XG4gICAgICBwbGF5YmFja1N0YXRlSGFuZGxlcigpO1xuICAgIH0pO1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXlpbmcsIChlKSA9PiB7XG4gICAgICB0aGlzLmlzUGxheUluaXRpYXRlZCA9IGZhbHNlO1xuICAgICAgcGxheWJhY2tTdGF0ZUhhbmRsZXIoKTtcbiAgICB9KTtcbiAgICAvLyBhZnRlciB1bmxvYWRpbmcgKyBsb2FkaW5nIGEgbmV3IHNvdXJjZSwgdGhlIHBsYXllciBtaWdodCBiZSBpbiBhIGRpZmZlcmVudCBwbGF5aW5nIHN0YXRlIChmcm9tIHBsYXlpbmcgaW50byBzdG9wcGVkKVxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VMb2FkZWQsIHBsYXliYWNrU3RhdGVIYW5kbGVyKTtcbiAgICB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUocGxheWJhY2tTdGF0ZUhhbmRsZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VVbmxvYWRlZCwgcGxheWJhY2tTdGF0ZUhhbmRsZXIpO1xuICAgIC8vIHdoZW4gcGxheWJhY2sgZmluaXNoZXMsIHBsYXllciB0dXJucyB0byBwYXVzZWQgbW9kZVxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5YmFja0ZpbmlzaGVkLCBwbGF5YmFja1N0YXRlSGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkNhc3RTdGFydGVkLCBwbGF5YmFja1N0YXRlSGFuZGxlcik7XG5cbiAgICAvLyBXaGVuIGEgcGxheWJhY2sgYXR0ZW1wdCBpcyByZWplY3RlZCB3aXRoIHdhcm5pbmcgNTAwOCwgd2Ugc3dpdGNoIHRoZSBidXR0b24gc3RhdGUgYmFjayB0byBvZmZcbiAgICAvLyBUaGlzIGlzIHJlcXVpcmVkIGZvciBibG9ja2VkIGF1dG9wbGF5LCBiZWNhdXNlIHRoZXJlIGlzIG5vIFBhdXNlZCBldmVudCBpbiBzdWNoIGNhc2VcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuV2FybmluZywgKGV2ZW50OiBXYXJuaW5nRXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudC5jb2RlID09PSBwbGF5ZXIuZXhwb3J0cy5XYXJuaW5nQ29kZS5QTEFZQkFDS19DT1VMRF9OT1RfQkVfU1RBUlRFRCkge1xuICAgICAgICB0aGlzLmlzUGxheUluaXRpYXRlZCA9IGZhbHNlO1xuICAgICAgICBmaXJzdFBsYXkgPSB0cnVlO1xuICAgICAgICB0aGlzLm9mZigpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgdXBkYXRlTGl2ZVN0YXRlID0gKCkgPT4ge1xuICAgICAgY29uc3Qgc2hvd1N0b3BUb2dnbGUgPSBwbGF5ZXIuaXNMaXZlKCkgJiYgIVBsYXllclV0aWxzLmlzVGltZVNoaWZ0QXZhaWxhYmxlKHBsYXllcik7XG5cbiAgICAgIGlmIChzaG93U3RvcFRvZ2dsZSkge1xuICAgICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hZGRDbGFzcyh0aGlzLnByZWZpeENzcyhQbGF5YmFja1RvZ2dsZUJ1dHRvbi5DTEFTU19TVE9QVE9HR0xFKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeENzcyhQbGF5YmFja1RvZ2dsZUJ1dHRvbi5DTEFTU19TVE9QVE9HR0xFKSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIERldGVjdCBhYnNlbmNlIG9mIHRpbWVzaGlmdGluZyBvbiBsaXZlIHN0cmVhbXMgYW5kIGFkZCB0YWdnaW5nIGNsYXNzIHRvIGNvbnZlcnQgYnV0dG9uIGljb25zIHRvIHBsYXkvc3RvcFxuICAgIGxldCB0aW1lU2hpZnREZXRlY3RvciA9IG5ldyBQbGF5ZXJVdGlscy5UaW1lU2hpZnRBdmFpbGFiaWxpdHlEZXRlY3RvcihwbGF5ZXIpO1xuICAgIGxldCBsaXZlU3RyZWFtRGV0ZWN0b3IgPSBuZXcgUGxheWVyVXRpbHMuTGl2ZVN0cmVhbURldGVjdG9yKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRpbWVTaGlmdERldGVjdG9yLm9uVGltZVNoaWZ0QXZhaWxhYmlsaXR5Q2hhbmdlZC5zdWJzY3JpYmUoKCkgPT4gdXBkYXRlTGl2ZVN0YXRlKCkpO1xuICAgIGxpdmVTdHJlYW1EZXRlY3Rvci5vbkxpdmVDaGFuZ2VkLnN1YnNjcmliZSgoKSA9PiB1cGRhdGVMaXZlU3RhdGUoKSk7XG5cbiAgICB0aW1lU2hpZnREZXRlY3Rvci5kZXRlY3QoKTsgLy8gSW5pdGlhbCBkZXRlY3Rpb25cbiAgICBsaXZlU3RyZWFtRGV0ZWN0b3IuZGV0ZWN0KCk7XG5cbiAgICBpZiAoaGFuZGxlQ2xpY2tFdmVudCkge1xuICAgICAgLy8gQ29udHJvbCBwbGF5ZXIgYnkgYnV0dG9uIGV2ZW50c1xuICAgICAgLy8gV2hlbiBhIGJ1dHRvbiBldmVudCB0cmlnZ2VycyBhIHBsYXllciBBUEkgY2FsbCwgZXZlbnRzIGFyZSBmaXJlZCB3aGljaCBpbiB0dXJuIGNhbGwgdGhlIGV2ZW50IGhhbmRsZXJcbiAgICAgIC8vIGFib3ZlIHRoYXQgdXBkYXRlZCB0aGUgYnV0dG9uIHN0YXRlLlxuICAgICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIGlmIChwbGF5ZXIuaXNQbGF5aW5nKCkgfHwgdGhpcy5pc1BsYXlJbml0aWF0ZWQpIHtcbiAgICAgICAgICBwbGF5ZXIucGF1c2UoJ3VpJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGxheWVyLnBsYXkoJ3VpJyk7XG5cbiAgICAgICAgICBpZiAoZmlyc3RQbGF5ICYmIHRoaXMuY29uZmlnLmVudGVyRnVsbHNjcmVlbk9uSW5pdGlhbFBsYXliYWNrKSB7XG4gICAgICAgICAgICBwbGF5ZXIuc2V0Vmlld01vZGUocGxheWVyLmV4cG9ydHMuVmlld01vZGUuRnVsbHNjcmVlbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBUcmFjayBVSSBzZWVraW5nIHN0YXR1c1xuICAgIHVpbWFuYWdlci5vblNlZWsuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGlzU2Vla2luZyA9IHRydWU7XG4gICAgfSk7XG4gICAgdWltYW5hZ2VyLm9uU2Vla2VkLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBpc1NlZWtpbmcgPSBmYWxzZTtcbiAgICB9KTtcblxuICAgIC8vIFN0YXJ0dXAgaW5pdFxuICAgIHBsYXliYWNrU3RhdGVIYW5kbGVyKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7Q29udGFpbmVyLCBDb250YWluZXJDb25maWd9IGZyb20gJy4vY29udGFpbmVyJztcbmltcG9ydCB7SHVnZVBsYXliYWNrVG9nZ2xlQnV0dG9ufSBmcm9tICcuL2h1Z2VwbGF5YmFja3RvZ2dsZWJ1dHRvbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGxheWJhY2tUb2dnbGVPdmVybGF5Q29uZmlnIGV4dGVuZHMgQ29udGFpbmVyQ29uZmlnIHtcbiAgLyoqXG4gICAqIFNwZWNpZnkgd2hldGhlciB0aGUgcGxheWVyIHNob3VsZCBiZSBzZXQgdG8gZW50ZXIgZnVsbHNjcmVlbiBieSBjbGlja2luZyBvbiB0aGUgcGxheWJhY2sgdG9nZ2xlIGJ1dHRvblxuICAgKiB3aGVuIGluaXRpYXRpbmcgdGhlIGluaXRpYWwgcGxheWJhY2suXG4gICAqIERlZmF1bHQgaXMgZmFsc2UuXG4gICAqL1xuICBlbnRlckZ1bGxzY3JlZW5PbkluaXRpYWxQbGF5YmFjaz86IGJvb2xlYW47XG59XG5cbi8qKlxuICogT3ZlcmxheXMgdGhlIHBsYXllciBhbmQgZGlzcGxheXMgZXJyb3IgbWVzc2FnZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBQbGF5YmFja1RvZ2dsZU92ZXJsYXkgZXh0ZW5kcyBDb250YWluZXI8UGxheWJhY2tUb2dnbGVPdmVybGF5Q29uZmlnPiB7XG5cbiAgcHJpdmF0ZSBwbGF5YmFja1RvZ2dsZUJ1dHRvbjogSHVnZVBsYXliYWNrVG9nZ2xlQnV0dG9uO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogUGxheWJhY2tUb2dnbGVPdmVybGF5Q29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5wbGF5YmFja1RvZ2dsZUJ1dHRvbiA9IG5ldyBIdWdlUGxheWJhY2tUb2dnbGVCdXR0b24oe1xuICAgICAgZW50ZXJGdWxsc2NyZWVuT25Jbml0aWFsUGxheWJhY2s6IEJvb2xlYW4oY29uZmlnLmVudGVyRnVsbHNjcmVlbk9uSW5pdGlhbFBsYXliYWNrKSxcbiAgICB9KTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktcGxheWJhY2t0b2dnbGUtb3ZlcmxheScsXG4gICAgICBjb21wb25lbnRzOiBbdGhpcy5wbGF5YmFja1RvZ2dsZUJ1dHRvbl0sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG59IiwiaW1wb3J0IHtDb250YWluZXJDb25maWcsIENvbnRhaW5lcn0gZnJvbSAnLi9jb250YWluZXInO1xuaW1wb3J0IHtDb21wb25lbnQsIENvbXBvbmVudENvbmZpZ30gZnJvbSAnLi9jb21wb25lbnQnO1xuaW1wb3J0IHtET019IGZyb20gJy4uL2RvbSc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHtTdHJpbmdVdGlsc30gZnJvbSAnLi4vc3RyaW5ndXRpbHMnO1xuaW1wb3J0IHtIdWdlUmVwbGF5QnV0dG9ufSBmcm9tICcuL2h1Z2VyZXBsYXlidXR0b24nO1xuaW1wb3J0IHsgVUlSZWNvbW1lbmRhdGlvbkNvbmZpZyB9IGZyb20gJy4uL3VpY29uZmlnJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5cbi8qKlxuICogT3ZlcmxheXMgdGhlIHBsYXllciBhbmQgZGlzcGxheXMgcmVjb21tZW5kZWQgdmlkZW9zLlxuICovXG5leHBvcnQgY2xhc3MgUmVjb21tZW5kYXRpb25PdmVybGF5IGV4dGVuZHMgQ29udGFpbmVyPENvbnRhaW5lckNvbmZpZz4ge1xuXG4gIHByaXZhdGUgcmVwbGF5QnV0dG9uOiBIdWdlUmVwbGF5QnV0dG9uO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29udGFpbmVyQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5yZXBsYXlCdXR0b24gPSBuZXcgSHVnZVJlcGxheUJ1dHRvbigpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1yZWNvbW1lbmRhdGlvbi1vdmVybGF5JyxcbiAgICAgIGhpZGRlbjogdHJ1ZSxcbiAgICAgIGNvbXBvbmVudHM6IFt0aGlzLnJlcGxheUJ1dHRvbl0sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBjbGVhclJlY29tbWVuZGF0aW9ucyA9ICgpID0+IHtcbiAgICAgIGZvciAobGV0IGNvbXBvbmVudCBvZiB0aGlzLmdldENvbXBvbmVudHMoKS5zbGljZSgpKSB7XG4gICAgICAgIGlmIChjb21wb25lbnQgaW5zdGFuY2VvZiBSZWNvbW1lbmRhdGlvbkl0ZW0pIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUNvbXBvbmVudChjb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudHMoKTtcbiAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4Q3NzKCdyZWNvbW1lbmRhdGlvbnMnKSk7XG4gICAgfTtcblxuICAgIGxldCBzZXR1cFJlY29tbWVuZGF0aW9ucyA9ICgpID0+IHtcbiAgICAgIGNsZWFyUmVjb21tZW5kYXRpb25zKCk7XG5cbiAgICAgIGNvbnN0IHJlY29tbWVuZGF0aW9ucyA9IHVpbWFuYWdlci5nZXRDb25maWcoKS5yZWNvbW1lbmRhdGlvbnM7XG5cbiAgICAgIGlmIChyZWNvbW1lbmRhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgaW5kZXggPSAxO1xuICAgICAgICBmb3IgKGxldCBpdGVtIG9mIHJlY29tbWVuZGF0aW9ucykge1xuICAgICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KG5ldyBSZWNvbW1lbmRhdGlvbkl0ZW0oe1xuICAgICAgICAgICAgaXRlbUNvbmZpZzogaXRlbSxcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsncmVjb21tZW5kYXRpb24taXRlbS0nICsgKGluZGV4KyspXSxcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVDb21wb25lbnRzKCk7IC8vIGNyZWF0ZSBjb250YWluZXIgRE9NIGVsZW1lbnRzXG5cbiAgICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoJ3JlY29tbWVuZGF0aW9ucycpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKHNldHVwUmVjb21tZW5kYXRpb25zKTtcbiAgICAvLyBSZW1vdmUgcmVjb21tZW5kYXRpb25zIGFuZCBoaWRlIG92ZXJsYXkgd2hlbiBzb3VyY2UgaXMgdW5sb2FkZWRcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU291cmNlVW5sb2FkZWQsICgpID0+IHtcbiAgICAgIGNsZWFyUmVjb21tZW5kYXRpb25zKCk7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9KTtcbiAgICAvLyBEaXNwbGF5IHJlY29tbWVuZGF0aW9ucyB3aGVuIHBsYXliYWNrIGhhcyBmaW5pc2hlZFxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5YmFja0ZpbmlzaGVkLCAoKSA9PiB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9KTtcbiAgICAvLyBIaWRlIHJlY29tbWVuZGF0aW9ucyB3aGVuIHBsYXliYWNrIHN0YXJ0cywgZS5nLiBhIHJlc3RhcnRcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheSwgKCkgPT4ge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfSk7XG5cbiAgICAvLyBJbml0IG9uIHN0YXJ0dXBcbiAgICBzZXR1cFJlY29tbWVuZGF0aW9ucygpO1xuICB9XG59XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIHRoZSB7QGxpbmsgUmVjb21tZW5kYXRpb25JdGVtfVxuICovXG5pbnRlcmZhY2UgUmVjb21tZW5kYXRpb25JdGVtQ29uZmlnIGV4dGVuZHMgQ29tcG9uZW50Q29uZmlnIHtcbiAgaXRlbUNvbmZpZzogVUlSZWNvbW1lbmRhdGlvbkNvbmZpZztcbn1cblxuLyoqXG4gKiBBbiBpdGVtIG9mIHRoZSB7QGxpbmsgUmVjb21tZW5kYXRpb25PdmVybGF5fS4gVXNlZCBvbmx5IGludGVybmFsbHkgaW4ge0BsaW5rIFJlY29tbWVuZGF0aW9uT3ZlcmxheX0uXG4gKi9cbmNsYXNzIFJlY29tbWVuZGF0aW9uSXRlbSBleHRlbmRzIENvbXBvbmVudDxSZWNvbW1lbmRhdGlvbkl0ZW1Db25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFJlY29tbWVuZGF0aW9uSXRlbUNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXJlY29tbWVuZGF0aW9uLWl0ZW0nLFxuICAgICAgaXRlbUNvbmZpZzogbnVsbCwgLy8gdGhpcyBtdXN0IGJlIHBhc3NlZCBpbiBmcm9tIG91dHNpZGVcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdG9Eb21FbGVtZW50KCk6IERPTSB7XG4gICAgbGV0IGNvbmZpZyA9IHRoaXMuY29uZmlnLml0ZW1Db25maWc7XG5cbiAgICBsZXQgaXRlbUVsZW1lbnQgPSBuZXcgRE9NKCdhJywge1xuICAgICAgJ2lkJzogdGhpcy5jb25maWcuaWQsXG4gICAgICAnY2xhc3MnOiB0aGlzLmdldENzc0NsYXNzZXMoKSxcbiAgICAgICdocmVmJzogY29uZmlnLnVybCxcbiAgICB9KS5jc3MoeyAnYmFja2dyb3VuZC1pbWFnZSc6IGB1cmwoJHtjb25maWcudGh1bWJuYWlsfSlgIH0pO1xuXG4gICAgbGV0IGJnRWxlbWVudCA9IG5ldyBET00oJ2RpdicsIHtcbiAgICAgICdjbGFzcyc6IHRoaXMucHJlZml4Q3NzKCdiYWNrZ3JvdW5kJyksXG4gICAgfSk7XG4gICAgaXRlbUVsZW1lbnQuYXBwZW5kKGJnRWxlbWVudCk7XG5cbiAgICBsZXQgdGl0bGVFbGVtZW50ID0gbmV3IERPTSgnc3BhbicsIHtcbiAgICAgICdjbGFzcyc6IHRoaXMucHJlZml4Q3NzKCd0aXRsZScpLFxuICAgIH0pLmFwcGVuZChuZXcgRE9NKCdzcGFuJywge1xuICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ2lubmVydGl0bGUnKSxcbiAgICB9KS5odG1sKGNvbmZpZy50aXRsZSkpO1xuICAgIGl0ZW1FbGVtZW50LmFwcGVuZCh0aXRsZUVsZW1lbnQpO1xuXG4gICAgbGV0IHRpbWVFbGVtZW50ID0gbmV3IERPTSgnc3BhbicsIHtcbiAgICAgICdjbGFzcyc6IHRoaXMucHJlZml4Q3NzKCdkdXJhdGlvbicpLFxuICAgIH0pLmFwcGVuZChuZXcgRE9NKCdzcGFuJywge1xuICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ2lubmVyZHVyYXRpb24nKSxcbiAgICB9KS5odG1sKGNvbmZpZy5kdXJhdGlvbiA/IFN0cmluZ1V0aWxzLnNlY29uZHNUb1RpbWUoY29uZmlnLmR1cmF0aW9uKSA6ICcnKSk7XG4gICAgaXRlbUVsZW1lbnQuYXBwZW5kKHRpbWVFbGVtZW50KTtcblxuICAgIHJldHVybiBpdGVtRWxlbWVudDtcbiAgfVxufSIsImltcG9ydCB7IEJ1dHRvbkNvbmZpZywgQnV0dG9uIH0gZnJvbSAnLi9idXR0b24nO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5pbXBvcnQgeyBQbGF5ZXJVdGlscyB9IGZyb20gJy4uL3BsYXllcnV0aWxzJztcbmltcG9ydCBMaXZlU3RyZWFtRGV0ZWN0b3JFdmVudEFyZ3MgPSBQbGF5ZXJVdGlscy5MaXZlU3RyZWFtRGV0ZWN0b3JFdmVudEFyZ3M7XG5cbi8qKlxuICogQSBidXR0b24gdG8gcGxheS9yZXBsYXkgYSB2aWRlby5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlcGxheUJ1dHRvbiBleHRlbmRzIEJ1dHRvbjxCdXR0b25Db25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IEJ1dHRvbkNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktcmVwbGF5YnV0dG9uJyxcbiAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdyZXBsYXknKSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgaWYgKHBsYXllci5pc0xpdmUoKSkge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfVxuXG4gICAgY29uc3QgbGl2ZVN0cmVhbURldGVjdG9yID0gbmV3IFBsYXllclV0aWxzLkxpdmVTdHJlYW1EZXRlY3RvcihwbGF5ZXIsIHVpbWFuYWdlcik7XG4gICAgbGl2ZVN0cmVhbURldGVjdG9yLm9uTGl2ZUNoYW5nZWQuc3Vic2NyaWJlKChzZW5kZXIsIGFyZ3M6IExpdmVTdHJlYW1EZXRlY3RvckV2ZW50QXJncykgPT4ge1xuICAgICAgaWYgKGFyZ3MubGl2ZSkge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBpZiAoIXBsYXllci5oYXNFbmRlZCgpKSB7XG4gICAgICAgIHBsYXllci5zZWVrKDApO1xuICAgICAgICAvLyBOb3QgY2FsbGluZyBgcGxheWAgd2lsbCBrZWVwIHRoZSBwbGF5L3BhdXNlIHN0YXRlIGFzIGlzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiBwbGF5YmFjayBoYXMgYWxyZWFkeSBlbmRlZCwgY2FsbGluZyBgcGxheWAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlc3RhcnQgZnJvbSB0aGUgYmVnaW5uaW5nXG4gICAgICAgIHBsYXllci5wbGF5KCd1aScpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBFeHRlbmRlZFBsYXllckFQSSwgR3JvdXBQbGF5YmFja1N1c3BlbnNpb24sIEdyb3VwUGxheWJhY2tTdXNwZW5zaW9uUmVhc29uIH0gZnJvbSAnLi8uLi9ncm91cHBsYXliYWNrYXBpJztcbmltcG9ydCB7IENvbXBvbmVudCwgQ29tcG9uZW50Q29uZmlnIH0gZnJvbSAnLi9jb21wb25lbnQnO1xuaW1wb3J0IHsgRE9NIH0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7IEV2ZW50LCBFdmVudERpc3BhdGNoZXIsIE5vQXJncyB9IGZyb20gJy4uL2V2ZW50ZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBTZWVrQmFyTGFiZWwgfSBmcm9tICcuL3NlZWtiYXJsYWJlbCc7XG5pbXBvcnQgeyBVSUluc3RhbmNlTWFuYWdlciwgU2Vla1ByZXZpZXdBcmdzIH0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFRpbWVvdXQgfSBmcm9tICcuLi90aW1lb3V0JztcbmltcG9ydCB7IFBsYXllclV0aWxzIH0gZnJvbSAnLi4vcGxheWVydXRpbHMnO1xuaW1wb3J0IFRpbWVTaGlmdEF2YWlsYWJpbGl0eUNoYW5nZWRBcmdzID0gUGxheWVyVXRpbHMuVGltZVNoaWZ0QXZhaWxhYmlsaXR5Q2hhbmdlZEFyZ3M7XG5pbXBvcnQgTGl2ZVN0cmVhbURldGVjdG9yRXZlbnRBcmdzID0gUGxheWVyVXRpbHMuTGl2ZVN0cmVhbURldGVjdG9yRXZlbnRBcmdzO1xuaW1wb3J0IHsgVGltZWxpbmVNYXJrZXIgfSBmcm9tICcuLi91aWNvbmZpZyc7XG5pbXBvcnQgeyBQbGF5ZXJBUEksIFBsYXllckV2ZW50QmFzZSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBTdHJpbmdVdGlscyB9IGZyb20gJy4uL3N0cmluZ3V0aWxzJztcbmltcG9ydCB7IFNlZWtCYXJUeXBlLCBTZWVrQmFyQ29udHJvbGxlciB9IGZyb20gJy4vc2Vla2JhcmNvbnRyb2xsZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcbmltcG9ydCB7IEJyb3dzZXJVdGlscyB9IGZyb20gJy4uL2Jyb3dzZXJ1dGlscyc7XG5pbXBvcnQgeyBUaW1lbGluZU1hcmtlcnNIYW5kbGVyIH0gZnJvbSAnLi90aW1lbGluZW1hcmtlcnNoYW5kbGVyJztcbmltcG9ydCB7IGdldE1pbkJ1ZmZlckxldmVsIH0gZnJvbSAnLi9zZWVrYmFyYnVmZmVybGV2ZWwnO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIGZvciB0aGUge0BsaW5rIFNlZWtCYXJ9IGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZWVrQmFyQ29uZmlnIGV4dGVuZHMgQ29tcG9uZW50Q29uZmlnIHtcbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBhYm92ZSB0aGUgc2VlayBwb3NpdGlvbi5cbiAgICovXG4gIGxhYmVsPzogU2Vla0JhckxhYmVsO1xuICAvKipcbiAgICogQmFyIHdpbGwgYmUgdmVydGljYWwgaW5zdGVhZCBvZiBob3Jpem9udGFsIGlmIHNldCB0byB0cnVlLlxuICAgKi9cbiAgdmVydGljYWw/OiBib29sZWFuO1xuICAvKipcbiAgICogVGhlIGludGVydmFsIGluIG1pbGxpc2Vjb25kcyBpbiB3aGljaCB0aGUgcGxheWJhY2sgcG9zaXRpb24gb24gdGhlIHNlZWsgYmFyIHdpbGwgYmUgdXBkYXRlZC4gVGhlIHNob3J0ZXIgdGhlXG4gICAqIGludGVydmFsLCB0aGUgc21vb3RoZXIgaXQgbG9va3MgYW5kIHRoZSBtb3JlIHJlc291cmNlIGludGVuc2UgaXQgaXMuIFRoZSB1cGRhdGUgaW50ZXJ2YWwgd2lsbCBiZSBrZXB0IGFzIHN0ZWFkeVxuICAgKiBhcyBwb3NzaWJsZSB0byBhdm9pZCBqaXR0ZXIuXG4gICAqIFNldCB0byAtMSB0byBkaXNhYmxlIHNtb290aCB1cGRhdGluZyBhbmQgdXBkYXRlIGl0IG9uIHBsYXllciBUaW1lQ2hhbmdlZCBldmVudHMgaW5zdGVhZC5cbiAgICogRGVmYXVsdDogNTAgKDUwbXMgPSAyMGZwcykuXG4gICAqL1xuICBzbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlSW50ZXJ2YWxNcz86IG51bWJlcjtcblxuICAvKipcbiAgICogVXNlZCBmb3Igc2Vla0JhciBjb250cm9sIGluY3JlbWVudHMgYW5kIGRlY3JlbWVudHNcbiAgICovXG4gIGtleVN0ZXBJbmNyZW1lbnRzPzogeyBsZWZ0UmlnaHQ6IG51bWJlciwgdXBEb3duOiBudW1iZXIgfTtcblxuICAvKipcbiAgICogVXNlZCBmb3Igc2Vla0JhciBtYXJrZXIgc25hcHBpbmcgcmFuZ2UgcGVyY2VudGFnZVxuICAgKi9cbiAgc25hcHBpbmdSYW5nZT86IG51bWJlcjtcblxuICAvKipcbiAgICogVXNlZCB0byBlbmFibGUvZGlzYWJsZSBzZWVrIHByZXZpZXdcbiAgICovXG4gIGVuYWJsZVNlZWtQcmV2aWV3PzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBFdmVudCBhcmd1bWVudCBpbnRlcmZhY2UgZm9yIGEgc2VlayBwcmV2aWV3IGV2ZW50LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlZWtQcmV2aWV3RXZlbnRBcmdzIGV4dGVuZHMgU2Vla1ByZXZpZXdBcmdzIHtcbiAgLyoqXG4gICAqIFRlbGxzIGlmIHRoZSBzZWVrIHByZXZpZXcgZXZlbnQgY29tZXMgZnJvbSBhIHNjcnViYmluZy5cbiAgICovXG4gIHNjcnViYmluZzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZWVrQmFyTWFya2VyIHtcbiAgbWFya2VyOiBUaW1lbGluZU1hcmtlcjtcbiAgcG9zaXRpb246IG51bWJlcjtcbiAgZHVyYXRpb24/OiBudW1iZXI7XG4gIGVsZW1lbnQ/OiBET007XG59XG5cbi8qKlxuICogQSBzZWVrIGJhciB0byBzZWVrIHdpdGhpbiB0aGUgcGxheWVyJ3MgbWVkaWEuIEl0IGRpc3BsYXlzIHRoZSBjdXJyZW50IHBsYXliYWNrIHBvc2l0aW9uLCBhbW91bnQgb2YgYnVmZmVkIGRhdGEsIHNlZWtcbiAqIHRhcmdldCwgYW5kIGtlZXBzIHN0YXR1cyBhYm91dCBhbiBvbmdvaW5nIHNlZWsuXG4gKlxuICogVGhlIHNlZWsgYmFyIGRpc3BsYXlzIGRpZmZlcmVudCAnYmFycyc6XG4gKiAgLSB0aGUgcGxheWJhY2sgcG9zaXRpb24sIGkuZS4gdGhlIHBvc2l0aW9uIGluIHRoZSBtZWRpYSBhdCB3aGljaCB0aGUgcGxheWVyIGN1cnJlbnQgcGxheWJhY2sgcG9pbnRlciBpcyBwb3NpdGlvbmVkXG4gKiAgLSB0aGUgYnVmZmVyIHBvc2l0aW9uLCB3aGljaCB1c3VhbGx5IGlzIHRoZSBwbGF5YmFjayBwb3NpdGlvbiBwbHVzIHRoZSB0aW1lIHNwYW4gdGhhdCBpcyBhbHJlYWR5IGJ1ZmZlcmVkIGFoZWFkXG4gKiAgLSB0aGUgc2VlayBwb3NpdGlvbiwgdXNlZCB0byBwcmV2aWV3IHRvIHdoZXJlIGluIHRoZSB0aW1lbGluZSBhIHNlZWsgd2lsbCBqdW1wIHRvXG4gKi9cbmV4cG9ydCBjbGFzcyBTZWVrQmFyIGV4dGVuZHMgQ29tcG9uZW50PFNlZWtCYXJDb25maWc+IHtcblxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFNNT09USF9QTEFZQkFDS19QT1NJVElPTl9VUERBVEVfRElTQUJMRUQgPSAtMTtcblxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyB0aGF0IGlzIGFkZGVkIHRvIHRoZSBET00gZWxlbWVudCB3aGlsZSB0aGUgc2VlayBiYXIgaXMgaW4gJ3NlZWtpbmcnIHN0YXRlLlxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ0xBU1NfU0VFS0lORyA9ICdzZWVraW5nJztcblxuICBwcml2YXRlIHNlZWtCYXI6IERPTTtcbiAgcHJpdmF0ZSBzZWVrQmFyUGxheWJhY2tQb3NpdGlvbjogRE9NO1xuICBwcml2YXRlIHNlZWtCYXJQbGF5YmFja1Bvc2l0aW9uTWFya2VyOiBET007XG4gIHByaXZhdGUgc2Vla0JhckJ1ZmZlclBvc2l0aW9uOiBET007XG4gIHByaXZhdGUgc2Vla0JhclNlZWtQb3NpdGlvbjogRE9NO1xuICBwcml2YXRlIHNlZWtCYXJCYWNrZHJvcDogRE9NO1xuXG4gIHByaXZhdGUgbGFiZWw6IFNlZWtCYXJMYWJlbDtcblxuICBwcml2YXRlIHNlZWtCYXJNYXJrZXJzQ29udGFpbmVyOiBET007XG4gIHByaXZhdGUgdGltZWxpbmVNYXJrZXJzSGFuZGxlcjogVGltZWxpbmVNYXJrZXJzSGFuZGxlcjtcblxuICBwcml2YXRlIHBsYXllcjogUGxheWVyQVBJO1xuXG4gIHByb3RlY3RlZCBzZWVrQmFyVHlwZTogU2Vla0JhclR5cGU7XG5cbiAgcHJvdGVjdGVkIGlzVWlTaG93bjogYm9vbGVhbjtcblxuICAvKipcbiAgICogQnVmZmVyIG9mIHRoZSB0aGUgY3VycmVudCBwbGF5YmFjayBwb3NpdGlvbi4gVGhlIHBvc2l0aW9uIG11c3QgYmUgYnVmZmVyZWQgaW4gY2FzZSB0aGUgZWxlbWVudFxuICAgKiBuZWVkcyB0byBiZSByZWZyZXNoZWQgd2l0aCB7QGxpbmsgI3JlZnJlc2hQbGF5YmFja1Bvc2l0aW9ufS5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHByaXZhdGUgcGxheWJhY2tQb3NpdGlvblBlcmNlbnRhZ2UgPSAwO1xuXG4gIHByaXZhdGUgc21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZXI6IFRpbWVvdXQ7XG4gIHByaXZhdGUgcGF1c2VkVGltZXNoaWZ0VXBkYXRlcjogVGltZW91dDtcblxuICBwcml2YXRlIGlzVXNlclNlZWtpbmcgPSBmYWxzZTtcblxuICBwcml2YXRlIHNlZWtCYXJFdmVudHMgPSB7XG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhIHNjcnViYmluZyBzZWVrIG9wZXJhdGlvbiBpcyBzdGFydGVkLlxuICAgICAqL1xuICAgIG9uU2VlazogbmV3IEV2ZW50RGlzcGF0Y2hlcjxTZWVrQmFyLCBOb0FyZ3M+KCksXG4gICAgLyoqXG4gICAgICogRmlyZWQgZHVyaW5nIGEgc2NydWJiaW5nIHNlZWsgdG8gaW5kaWNhdGUgdGhhdCB0aGUgc2VlayBwcmV2aWV3IChpLmUuIHRoZSB2aWRlbyBmcmFtZSkgc2hvdWxkIGJlIHVwZGF0ZWQuXG4gICAgICovXG4gICAgb25TZWVrUHJldmlldzogbmV3IEV2ZW50RGlzcGF0Y2hlcjxTZWVrQmFyLCBTZWVrUHJldmlld0V2ZW50QXJncz4oKSxcbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGEgc2NydWJiaW5nIHNlZWsgaGFzIGZpbmlzaGVkIG9yIHdoZW4gYSBkaXJlY3Qgc2VlayBpcyBpc3N1ZWQuXG4gICAgICovXG4gICAgb25TZWVrZWQ6IG5ldyBFdmVudERpc3BhdGNoZXI8U2Vla0JhciwgbnVtYmVyPigpLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU2Vla0JhckNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIGNvbnN0IGtleVN0ZXBJbmNyZW1lbnRzID0gdGhpcy5jb25maWcua2V5U3RlcEluY3JlbWVudHMgfHwge1xuICAgICAgbGVmdFJpZ2h0OiAxLFxuICAgICAgdXBEb3duOiA1LFxuICAgIH07XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXNlZWtiYXInLFxuICAgICAgdmVydGljYWw6IGZhbHNlLFxuICAgICAgc21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZUludGVydmFsTXM6IDUwLFxuICAgICAga2V5U3RlcEluY3JlbWVudHMsXG4gICAgICBhcmlhTGFiZWw6IGkxOG4uZ2V0TG9jYWxpemVyKCdzZWVrQmFyJyksXG4gICAgICB0YWJJbmRleDogMCxcbiAgICAgIHNuYXBwaW5nUmFuZ2U6IDEsXG4gICAgICBlbmFibGVTZWVrUHJldmlldzogdHJ1ZSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG5cbiAgICB0aGlzLmxhYmVsID0gdGhpcy5jb25maWcubGFiZWw7XG4gIH1cblxuICBpbml0aWFsaXplKCk6IHZvaWQge1xuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcblxuICAgIGlmICh0aGlzLmhhc0xhYmVsKCkpIHtcbiAgICAgIHRoaXMuZ2V0TGFiZWwoKS5pbml0aWFsaXplKCk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHNldEFyaWFTbGlkZXJNaW5NYXgobWluOiBzdHJpbmcsIG1heDogc3RyaW5nKSB7XG4gICAgdGhpcy5nZXREb21FbGVtZW50KCkuYXR0cignYXJpYS12YWx1ZW1pbicsIG1pbik7XG4gICAgdGhpcy5nZXREb21FbGVtZW50KCkuYXR0cignYXJpYS12YWx1ZW1heCcsIG1heCk7XG4gIH1cblxuICBwcml2YXRlIHNldEFyaWFTbGlkZXJWYWx1ZXMoKSB7XG4gICAgaWYgKHRoaXMuc2Vla0JhclR5cGUgPT09IFNlZWtCYXJUeXBlLkxpdmUpIHtcbiAgICAgIGNvbnN0IHRpbWVzaGlmdFZhbHVlID0gTWF0aC5jZWlsKHRoaXMucGxheWVyLmdldFRpbWVTaGlmdCgpKS50b1N0cmluZygpO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuYXR0cignYXJpYS12YWx1ZW5vdycsIHRpbWVzaGlmdFZhbHVlKTtcbiAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmF0dHIoJ2FyaWEtdmFsdWV0ZXh0JywgYCR7aTE4bi5wZXJmb3JtTG9jYWxpemF0aW9uKGkxOG4uZ2V0TG9jYWxpemVyKCdzZWVrQmFyLnRpbWVzaGlmdCcpKX0gJHtpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24oaTE4bi5nZXRMb2NhbGl6ZXIoJ3NlZWtCYXIudmFsdWUnKSl9OiAke3RpbWVzaGlmdFZhbHVlfWApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zZWVrQmFyVHlwZSA9PT0gU2Vla0JhclR5cGUuVm9kKSB7XG4gICAgICBjb25zdCBhcmlhVmFsdWVUZXh0ID0gYCR7U3RyaW5nVXRpbHMuc2Vjb25kc1RvVGV4dCh0aGlzLnBsYXllci5nZXRDdXJyZW50VGltZSgpKX0gJHtpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24oaTE4bi5nZXRMb2NhbGl6ZXIoJ3NlZWtCYXIuZHVyYXRpb25UZXh0JykpfSAke1N0cmluZ1V0aWxzLnNlY29uZHNUb1RleHQodGhpcy5wbGF5ZXIuZ2V0RHVyYXRpb24oKSl9YDtcbiAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmF0dHIoJ2FyaWEtdmFsdWVub3cnLCBNYXRoLmZsb29yKHRoaXMucGxheWVyLmdldEN1cnJlbnRUaW1lKCkpLnRvU3RyaW5nKCkpO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuYXR0cignYXJpYS12YWx1ZXRleHQnLCBhcmlhVmFsdWVUZXh0KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldFBsYXliYWNrUG9zaXRpb25QZXJjZW50YWdlKCk6IG51bWJlciB7XG4gICAgaWYgKHRoaXMucGxheWVyLmlzTGl2ZSgpKSB7XG4gICAgICByZXR1cm4gMTAwIC0gKDEwMCAvIHRoaXMucGxheWVyLmdldE1heFRpbWVTaGlmdCgpICogdGhpcy5wbGF5ZXIuZ2V0VGltZVNoaWZ0KCkpO1xuICAgIH1cblxuICAgIHJldHVybiAxMDAgLyB0aGlzLnBsYXllci5nZXREdXJhdGlvbigpICogdGhpcy5nZXRSZWxhdGl2ZUN1cnJlbnRUaW1lKCk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUJ1ZmZlckxldmVsKHBsYXliYWNrUG9zaXRpb25QZXJjZW50YWdlOiBudW1iZXIpOiB2b2lkIHtcblxuICAgIGxldCBidWZmZXJMb2FkZWRQZXJjZW50YWdlTGV2ZWw6IG51bWJlcjtcbiAgICBpZiAodGhpcy5wbGF5ZXIuaXNMaXZlKCkpIHtcbiAgICAgIC8vIEFsd2F5cyBzaG93IGZ1bGwgYnVmZmVyIGZvciBsaXZlIHN0cmVhbXNcbiAgICAgIGJ1ZmZlckxvYWRlZFBlcmNlbnRhZ2VMZXZlbCA9IDEwMDtcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmZmVyTG9hZGVkUGVyY2VudGFnZUxldmVsID0gcGxheWJhY2tQb3NpdGlvblBlcmNlbnRhZ2UgKyBnZXRNaW5CdWZmZXJMZXZlbCh0aGlzLnBsYXllcik7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRCdWZmZXJQb3NpdGlvbihidWZmZXJMb2FkZWRQZXJjZW50YWdlTGV2ZWwpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyLCBjb25maWd1cmVTZWVrOiBib29sZWFuID0gdHJ1ZSk6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICB0aGlzLnBsYXllciA9IHBsYXllcjtcblxuICAgIC8vIEFwcGx5IHNjYWxpbmcgdHJhbnNmb3JtIHRvIHRoZSBiYWNrZHJvcCBiYXIgdG8gaGF2ZSBhbGwgYmFycyByZW5kZXJlZCBzaW1pbGFybHlcbiAgICAvLyAodGhlIGNhbGwgbXVzdCBiZSB1cCBoZXJlIHRvIGJlIGV4ZWN1dGVkIGZvciB0aGUgdm9sdW1lIHNsaWRlciBhcyB3ZWxsKVxuICAgIHRoaXMuc2V0UG9zaXRpb24odGhpcy5zZWVrQmFyQmFja2Ryb3AsIDEwMCk7XG5cbiAgICAvLyBBZGQgc2Vla2JhciBjb250cm9scyB0byB0aGUgc2Vla2JhclxuICAgIGNvbnN0IHNlZWtCYXJDb250cm9sbGVyID0gbmV3IFNlZWtCYXJDb250cm9sbGVyKHRoaXMuY29uZmlnLmtleVN0ZXBJbmNyZW1lbnRzLCBwbGF5ZXIsIHVpbWFuYWdlci5nZXRDb25maWcoKS52b2x1bWVDb250cm9sbGVyKTtcblxuICAgIHNlZWtCYXJDb250cm9sbGVyLnNldFNlZWtCYXJDb250cm9scyh0aGlzLmdldERvbUVsZW1lbnQoKSwgKCkgPT4gdGhpcy5zZWVrQmFyVHlwZSk7XG5cbiAgICAvLyBUaGUgY29uZmlndXJlU2VlayBmbGFnIGNhbiBiZSB1c2VkIGJ5IHN1YmNsYXNzZXMgdG8gZGlzYWJsZSBjb25maWd1cmF0aW9uIGFzIHNlZWsgYmFyLiBFLmcuIHRoZSB2b2x1bWVcbiAgICAvLyBzbGlkZXIgaXMgcmV1c2luZyB0aGlzIGNvbXBvbmVudCBidXQgYWRkcyBpdHMgb3duIGZ1bmN0aW9uYWxpdHksIGFuZCBkb2VzIG5vdCBuZWVkIHRoZSBzZWVrIGZ1bmN0aW9uYWxpdHkuXG4gICAgLy8gVGhpcyBpcyBhY3R1YWxseSBhIGhhY2ssIHRoZSBwcm9wZXIgc29sdXRpb24gd291bGQgYmUgZm9yIGJvdGggc2VlayBiYXIgYW5kIHZvbHVtZSBzbGlkZXJzIHRvIGV4dGVuZFxuICAgIC8vIGEgY29tbW9uIGJhc2Ugc2xpZGVyIGNvbXBvbmVudCBhbmQgaW1wbGVtZW50IHRoZWlyIGZ1bmN0aW9uYWxpdHkgdGhlcmUuXG4gICAgaWYgKCFjb25maWd1cmVTZWVrKSB7XG4gICAgICB0aGlzLnNlZWtCYXJUeXBlID0gU2Vla0JhclR5cGUuVm9sdW1lO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdWltYW5hZ2VyLm9uQ29udHJvbHNTaG93LnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLmlzVWlTaG93biA9IHRydWU7XG4gICAgfSk7XG5cbiAgICB1aW1hbmFnZXIub25Db250cm9sc0hpZGUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuaXNVaVNob3duID0gZmFsc2U7XG4gICAgfSk7XG5cbiAgICBsZXQgaXNQbGF5aW5nID0gZmFsc2U7XG4gICAgbGV0IHNjcnViYmluZyA9IGZhbHNlO1xuICAgIGxldCBpc1BsYXllclNlZWtpbmcgPSBmYWxzZTtcbiAgICBsZXQgc3VzcGVuc2lvbjogR3JvdXBQbGF5YmFja1N1c3BlbnNpb24gfCB1bmRlZmluZWQ7XG5cbiAgICAvLyBVcGRhdGUgcGxheWJhY2sgYW5kIGJ1ZmZlciBwb3NpdGlvbnNcbiAgICBsZXQgcGxheWJhY2tQb3NpdGlvbkhhbmRsZXIgPSAoZXZlbnQ6IFBsYXllckV2ZW50QmFzZSA9IG51bGwsIGZvcmNlVXBkYXRlOiBib29sZWFuID0gZmFsc2UpID0+IHtcbiAgICAgIGlmICh0aGlzLmlzVXNlclNlZWtpbmcpIHtcbiAgICAgICAgLy8gV2UgY2F1Z2h0IGEgc2VlayBwcmV2aWV3IHNlZWssIGRvIG5vdCB1cGRhdGUgdGhlIHNlZWtiYXJcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBsZXQgcGxheWJhY2tQb3NpdGlvblBlcmNlbnRhZ2UgPSB0aGlzLmdldFBsYXliYWNrUG9zaXRpb25QZXJjZW50YWdlKCk7XG5cbiAgICAgIHRoaXMudXBkYXRlQnVmZmVyTGV2ZWwocGxheWJhY2tQb3NpdGlvblBlcmNlbnRhZ2UpO1xuXG4gICAgICAvLyBUaGUgc2VnbWVudCByZXF1ZXN0IGZpbmlzaGVkIGlzIHVzZWQgdG8gaGVscCB0aGUgcGxheWJhY2sgcG9zaXRpb24gbW92ZSwgd2hlbiB0aGUgc21vb3RoIHBsYXliYWNrIHBvc2l0aW9uIGlzIG5vdCBlbmFibGVkLlxuICAgICAgLy8gQXQgdGhlIHNhbWUgdGltZSB3aGVuIHRoZSB1c2VyIGlzIHNjcnViYmluZywgd2UgYWxzbyBtb3ZlIHRoZSBwb3NpdGlvbiBvZiB0aGUgc2Vla2JhciB0byBkaXNwbGF5IGEgcHJldmlldyBkdXJpbmcgc2NydWJiaW5nLlxuICAgICAgLy8gV2hlbiB0aGUgdXNlciBpcyBzY3J1YmJpbmcgd2UgZG8gbm90IHJlY29yZCB0aGlzIGFzIGEgdXNlciBzZWVrIG9wZXJhdGlvbiwgYXMgdGhlIHVzZXIgaGFzIHlldCB0byBmaW5pc2ggdGhlaXIgc2VlayxcbiAgICAgIC8vIGJ1dCB3ZSBzaG91bGQgbm90IG1vdmUgdGhlIHBsYXliYWNrIHBvc2l0aW9uIHRvIG5vdCBjcmVhdGUgYSBqdW1waW5nIGJlaGF2aW91ci5cbiAgICAgIGlmIChzY3J1YmJpbmcgJiYgZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gcGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU2VnbWVudFJlcXVlc3RGaW5pc2hlZCAmJiBwbGF5YmFja1Bvc2l0aW9uUGVyY2VudGFnZSAhPT0gdGhpcy5wbGF5YmFja1Bvc2l0aW9uUGVyY2VudGFnZSkge1xuICAgICAgICBwbGF5YmFja1Bvc2l0aW9uUGVyY2VudGFnZSA9IHRoaXMucGxheWJhY2tQb3NpdGlvblBlcmNlbnRhZ2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChwbGF5ZXIuaXNMaXZlKCkpIHtcbiAgICAgICAgaWYgKHBsYXllci5nZXRNYXhUaW1lU2hpZnQoKSA9PT0gMCkge1xuICAgICAgICAgIC8vIFRoaXMgY2FzZSBtdXN0IGJlIGV4cGxpY2l0bHkgaGFuZGxlZCB0byBhdm9pZCBkaXZpc2lvbiBieSB6ZXJvXG4gICAgICAgICAgdGhpcy5zZXRQbGF5YmFja1Bvc2l0aW9uKDEwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCF0aGlzLmlzU2Vla2luZygpKSB7XG4gICAgICAgICAgICB0aGlzLnNldFBsYXliYWNrUG9zaXRpb24ocGxheWJhY2tQb3NpdGlvblBlcmNlbnRhZ2UpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuc2V0QXJpYVNsaWRlck1pbk1heChwbGF5ZXIuZ2V0TWF4VGltZVNoaWZ0KCkudG9TdHJpbmcoKSwgJzAnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVXBkYXRlIHBsYXliYWNrIHBvc2l0aW9uIG9ubHkgaW4gcGF1c2VkIHN0YXRlIG9yIGluIHRoZSBpbml0aWFsIHN0YXJ0dXAgc3RhdGUgd2hlcmUgcGxheWVyIGlzIG5laXRoZXJcbiAgICAgICAgLy8gcGF1c2VkIG5vciBwbGF5aW5nLiBQbGF5YmFjayB1cGRhdGVzIGFyZSBoYW5kbGVkIGluIHRoZSBUaW1lb3V0IGJlbG93LlxuICAgICAgICBjb25zdCBpc0luSW5pdGlhbFN0YXJ0dXBTdGF0ZSA9IHRoaXMuY29uZmlnLnNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVJbnRlcnZhbE1zID09PSBTZWVrQmFyLlNNT09USF9QTEFZQkFDS19QT1NJVElPTl9VUERBVEVfRElTQUJMRURcbiAgICAgICAgICAgIHx8IGZvcmNlVXBkYXRlIHx8IHBsYXllci5pc1BhdXNlZCgpO1xuICAgICAgICBjb25zdCBpc05laXRoZXJQYXVzZWROb3JQbGF5aW5nID0gcGxheWVyLmlzUGF1c2VkKCkgPT09IHBsYXllci5pc1BsYXlpbmcoKTtcblxuICAgICAgICBpZiAoKGlzSW5Jbml0aWFsU3RhcnR1cFN0YXRlIHx8IGlzTmVpdGhlclBhdXNlZE5vclBsYXlpbmcpICYmICF0aGlzLmlzU2Vla2luZygpKSB7XG4gICAgICAgICAgdGhpcy5zZXRQbGF5YmFja1Bvc2l0aW9uKHBsYXliYWNrUG9zaXRpb25QZXJjZW50YWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0QXJpYVNsaWRlck1pbk1heCgnMCcsIHBsYXllci5nZXREdXJhdGlvbigpLnRvU3RyaW5nKCkpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc1VpU2hvd24pIHtcbiAgICAgICAgdGhpcy5zZXRBcmlhU2xpZGVyVmFsdWVzKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFVwZGF0ZSBzZWVrYmFyIHVwb24gdGhlc2UgZXZlbnRzXG4gICAgLy8gaW5pdCBwbGF5YmFjayBwb3NpdGlvbiB3aGVuIHRoZSBwbGF5ZXIgaXMgcmVhZHlcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUmVhZHksIHBsYXliYWNrUG9zaXRpb25IYW5kbGVyKTtcbiAgICAvLyB1cGRhdGUgcGxheWJhY2sgcG9zaXRpb24gd2hlbiBpdCBjaGFuZ2VzXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlRpbWVDaGFuZ2VkLCBwbGF5YmFja1Bvc2l0aW9uSGFuZGxlcik7XG4gICAgLy8gdXBkYXRlIGJ1ZmZlcmxldmVsIHdoZW4gYnVmZmVyaW5nIGlzIGNvbXBsZXRlXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlN0YWxsRW5kZWQsIHBsYXliYWNrUG9zaXRpb25IYW5kbGVyKTtcbiAgICAvLyB1cGRhdGUgcGxheWJhY2sgcG9zaXRpb24gd2hlbiBhIHRpbWVzaGlmdCBoYXMgZmluaXNoZWRcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVGltZVNoaWZ0ZWQsIHBsYXliYWNrUG9zaXRpb25IYW5kbGVyKTtcbiAgICAvLyB1cGRhdGUgYnVmZmVybGV2ZWwgd2hlbiBhIHNlZ21lbnQgaGFzIGJlZW4gZG93bmxvYWRlZFxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TZWdtZW50UmVxdWVzdEZpbmlzaGVkLCBwbGF5YmFja1Bvc2l0aW9uSGFuZGxlcik7XG5cbiAgICB0aGlzLmNvbmZpZ3VyZUxpdmVQYXVzZWRUaW1lc2hpZnRVcGRhdGVyKHBsYXllciwgdWltYW5hZ2VyLCBwbGF5YmFja1Bvc2l0aW9uSGFuZGxlcik7XG5cbiAgICAvLyBTZWVrIGhhbmRsaW5nXG4gICAgbGV0IG9uUGxheWVyU2VlayA9ICgpID0+IHtcbiAgICAgIGlzUGxheWVyU2Vla2luZyA9IHRydWU7XG4gICAgICB0aGlzLnNldFNlZWtpbmcodHJ1ZSk7XG4gICAgICBzY3J1YmJpbmcgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgbGV0IG9uUGxheWVyU2Vla2VkID0gKGV2ZW50OiBQbGF5ZXJFdmVudEJhc2UgPSBudWxsLCBmb3JjZVVwZGF0ZTogYm9vbGVhbiA9IGZhbHNlICkgPT4ge1xuICAgICAgaXNQbGF5ZXJTZWVraW5nID0gZmFsc2U7XG4gICAgICB0aGlzLnNldFNlZWtpbmcoZmFsc2UpO1xuXG4gICAgICAvLyB1cGRhdGUgcGxheWJhY2sgcG9zaXRpb24gd2hlbiBhIHNlZWsgaGFzIGZpbmlzaGVkXG4gICAgICBwbGF5YmFja1Bvc2l0aW9uSGFuZGxlcihldmVudCwgZm9yY2VVcGRhdGUpO1xuICAgIH07XG5cbiAgICBsZXQgcmVzdG9yZVBsYXlpbmdTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIENvbnRpbnVlIHBsYXliYWNrIGFmdGVyIHNlZWsgaWYgcGxheWVyIHdhcyBwbGF5aW5nIHdoZW4gc2VlayBzdGFydGVkXG4gICAgICBpZiAoaXNQbGF5aW5nKSB7XG4gICAgICAgIC8vIHVzZSB0aGUgc2FtZSBpc3N1ZXIgaGVyZSBhcyBpbiB0aGUgcGF1c2Ugb24gc2Vla1xuICAgICAgICBwbGF5ZXIucGxheSgndWktc2VlaycpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU2Vlaywgb25QbGF5ZXJTZWVrKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU2Vla2VkLCBvblBsYXllclNlZWtlZCk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlRpbWVTaGlmdCwgb25QbGF5ZXJTZWVrKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVGltZVNoaWZ0ZWQsIG9uUGxheWVyU2Vla2VkKTtcblxuICAgIGxldCBpc0dyb3VwUGxheWJhY2tBUElBdmFpbGFibGUgPSAocGxheWVyOiBQbGF5ZXJBUEkpOiBwbGF5ZXIgaXMgRXh0ZW5kZWRQbGF5ZXJBUEkgPT4ge1xuICAgICAgcmV0dXJuICEhKHBsYXllciBhcyBFeHRlbmRlZFBsYXllckFQSSkuZ3JvdXBQbGF5YmFjaztcbiAgICB9O1xuXG4gICAgdGhpcy5vblNlZWsuc3Vic2NyaWJlKChzZW5kZXIpID0+IHtcbiAgICAgIC8vIHRyYWNrIHNlZWtpbmcgc3RhdHVzIHNvIHdlIGNhbiBjYXRjaCBldmVudHMgZnJvbSBzZWVrIHByZXZpZXcgc2Vla3NcbiAgICAgIHRoaXMuaXNVc2VyU2Vla2luZyA9IHRydWU7XG4gICAgICAvLyBOb3RpZnkgVUkgbWFuYWdlciBvZiBzdGFydGVkIHNlZWtcbiAgICAgIHVpbWFuYWdlci5vblNlZWsuZGlzcGF0Y2goc2VuZGVyKTtcblxuICAgICAgaWYgKGlzR3JvdXBQbGF5YmFja0FQSUF2YWlsYWJsZShwbGF5ZXIpICYmIHBsYXllci5ncm91cFBsYXliYWNrLmhhc0pvaW5lZCgpICYmICFzdXNwZW5zaW9uKSB7XG4gICAgICAgIHN1c3BlbnNpb24gPSBwbGF5ZXIuZ3JvdXBQbGF5YmFjay5iZWdpblN1c3BlbnNpb24oR3JvdXBQbGF5YmFja1N1c3BlbnNpb25SZWFzb24uVXNlcklzU2NydWJiaW5nKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2F2ZSBjdXJyZW50IHBsYXliYWNrIHN0YXRlIGJlZm9yZSBwZXJmb3JtaW5nIHRoZSBzZWVrXG4gICAgICBpZiAoIWlzUGxheWVyU2Vla2luZykge1xuICAgICAgICBpc1BsYXlpbmcgPSBwbGF5ZXIuaXNQbGF5aW5nKCk7XG5cbiAgICAgICAgLy8gUGF1c2UgcGxheWJhY2sgd2hpbGUgc2Vla2luZ1xuICAgICAgICBpZiAoaXNQbGF5aW5nKSB7XG4gICAgICAgICAgLy8gdXNlIGEgZGlmZmVyZW50IGlzc3VlciBoZXJlLCBhcyBwbGF5L3BhdXNlIG9uIHNlZWsgaXMgbm90IFwicmVhbGx5XCIgdHJpZ2dlcmQgYnkgdGhlIHVzZXJcbiAgICAgICAgICBwbGF5ZXIucGF1c2UoJ3VpLXNlZWsnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5vblNlZWtQcmV2aWV3LnN1YnNjcmliZSgoc2VuZGVyOiBTZWVrQmFyLCBhcmdzOiBTZWVrUHJldmlld0V2ZW50QXJncykgPT4ge1xuICAgICAgLy8gTm90aWZ5IFVJIG1hbmFnZXIgb2Ygc2VlayBwcmV2aWV3XG4gICAgICB1aW1hbmFnZXIub25TZWVrUHJldmlldy5kaXNwYXRjaChzZW5kZXIsIGFyZ3MpO1xuICAgICAgc2NydWJiaW5nID0gYXJncy5zY3J1YmJpbmc7XG4gICAgfSk7XG5cbiAgICAvLyBTZXQgZW5hYmxlU2Vla1ByZXZpZXcgaWYgc2V0IGluIHRoZSB1aW1hbmFnZXIgY29uZmlnXG4gICAgaWYgKHR5cGVvZiB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZW5hYmxlU2Vla1ByZXZpZXcgPT09ICdib29sZWFuJykge1xuICAgICAgdGhpcy5jb25maWcuZW5hYmxlU2Vla1ByZXZpZXcgPSB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZW5hYmxlU2Vla1ByZXZpZXc7XG4gICAgfVxuXG4gICAgLy8gUmF0ZS1saW1pdGVkIHNjcnViYmluZyBzZWVrXG4gICAgaWYgKHRoaXMuY29uZmlnLmVuYWJsZVNlZWtQcmV2aWV3KSB7XG4gICAgICB0aGlzLm9uU2Vla1ByZXZpZXcuc3Vic2NyaWJlUmF0ZUxpbWl0ZWQodGhpcy5zZWVrV2hpbGVTY3J1YmJpbmcsIDIwMCk7XG4gICAgfVxuXG4gICAgdGhpcy5vblNlZWtlZC5zdWJzY3JpYmUoKHNlbmRlciwgcGVyY2VudGFnZSkgPT4ge1xuICAgICAgdGhpcy5pc1VzZXJTZWVraW5nID0gZmFsc2U7XG5cbiAgICAgIC8vIERvIHRoZSBzZWVrXG4gICAgICB0aGlzLnNlZWsocGVyY2VudGFnZSk7XG5cbiAgICAgIC8vIE5vdGlmeSBVSSBtYW5hZ2VyIG9mIGZpbmlzaGVkIHNlZWtcbiAgICAgIHVpbWFuYWdlci5vblNlZWtlZC5kaXNwYXRjaChzZW5kZXIpO1xuXG4gICAgICAvLyBDb250aW51ZSBwbGF5YmFjayBhZnRlciBzZWVrIGlmIHBsYXllciB3YXMgcGxheWluZyB3aGVuIHNlZWsgc3RhcnRlZFxuICAgICAgcmVzdG9yZVBsYXlpbmdTdGF0ZSgpO1xuXG4gICAgICBpZiAoaXNHcm91cFBsYXliYWNrQVBJQXZhaWxhYmxlKHBsYXllcikgJiYgcGxheWVyLmdyb3VwUGxheWJhY2suaGFzSm9pbmVkKCkgJiYgc3VzcGVuc2lvbikge1xuICAgICAgICBjb25zdCBwcm9wb3NlZFBsYXliYWNrVGltZSA9IHRoaXMuZ2V0VGFyZ2V0U2Vla1Bvc2l0aW9uKHBlcmNlbnRhZ2UpO1xuICAgICAgICBwbGF5ZXIuZ3JvdXBQbGF5YmFjay5lbmRTdXNwZW5zaW9uKHN1c3BlbnNpb24sIHsgcHJvcG9zZWRQbGF5YmFja1RpbWUgfSk7XG4gICAgICAgIHN1c3BlbnNpb24gPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5oYXNMYWJlbCgpKSB7XG4gICAgICAvLyBDb25maWd1cmUgYSBzZWVrYmFyIGxhYmVsIHRoYXQgaXMgaW50ZXJuYWwgdG8gdGhlIHNlZWtiYXIpXG4gICAgICB0aGlzLmdldExhYmVsKCkuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcbiAgICB9XG5cbiAgICAvLyBIaWRlIHNlZWtiYXIgZm9yIGxpdmUgc291cmNlcyB3aXRob3V0IHRpbWVzaGlmdFxuICAgIGxldCBpc0xpdmUgPSBmYWxzZTtcbiAgICBsZXQgaGFzVGltZVNoaWZ0ID0gZmFsc2U7XG4gICAgbGV0IHN3aXRjaFZpc2liaWxpdHkgPSAoaXNMaXZlOiBib29sZWFuLCBoYXNUaW1lU2hpZnQ6IGJvb2xlYW4pID0+IHtcbiAgICAgIGlmIChpc0xpdmUgJiYgIWhhc1RpbWVTaGlmdCkge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgfVxuICAgICAgcGxheWJhY2tQb3NpdGlvbkhhbmRsZXIobnVsbCwgdHJ1ZSk7XG4gICAgICB0aGlzLnJlZnJlc2hQbGF5YmFja1Bvc2l0aW9uKCk7XG4gICAgfTtcbiAgICBsZXQgbGl2ZVN0cmVhbURldGVjdG9yID0gbmV3IFBsYXllclV0aWxzLkxpdmVTdHJlYW1EZXRlY3RvcihwbGF5ZXIsIHVpbWFuYWdlcik7XG4gICAgbGl2ZVN0cmVhbURldGVjdG9yLm9uTGl2ZUNoYW5nZWQuc3Vic2NyaWJlKChzZW5kZXIsIGFyZ3M6IExpdmVTdHJlYW1EZXRlY3RvckV2ZW50QXJncykgPT4ge1xuICAgICAgaXNMaXZlID0gYXJncy5saXZlO1xuICAgICAgaWYgKGlzTGl2ZSAmJiB0aGlzLnNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVyICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5zbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlci5jbGVhcigpO1xuICAgICAgICB0aGlzLnNlZWtCYXJUeXBlID0gU2Vla0JhclR5cGUuTGl2ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2Vla0JhclR5cGUgPSBTZWVrQmFyVHlwZS5Wb2Q7XG4gICAgICB9XG4gICAgICBzd2l0Y2hWaXNpYmlsaXR5KGlzTGl2ZSwgaGFzVGltZVNoaWZ0KTtcbiAgICB9KTtcbiAgICBsZXQgdGltZVNoaWZ0RGV0ZWN0b3IgPSBuZXcgUGxheWVyVXRpbHMuVGltZVNoaWZ0QXZhaWxhYmlsaXR5RGV0ZWN0b3IocGxheWVyKTtcbiAgICB0aW1lU2hpZnREZXRlY3Rvci5vblRpbWVTaGlmdEF2YWlsYWJpbGl0eUNoYW5nZWQuc3Vic2NyaWJlKChzZW5kZXIsIGFyZ3M6IFRpbWVTaGlmdEF2YWlsYWJpbGl0eUNoYW5nZWRBcmdzKSA9PiB7XG4gICAgICBoYXNUaW1lU2hpZnQgPSBhcmdzLnRpbWVTaGlmdEF2YWlsYWJsZTtcbiAgICAgIHN3aXRjaFZpc2liaWxpdHkoaXNMaXZlLCBoYXNUaW1lU2hpZnQpO1xuICAgIH0pO1xuICAgIC8vIEluaXRpYWwgZGV0ZWN0aW9uXG4gICAgbGl2ZVN0cmVhbURldGVjdG9yLmRldGVjdCgpO1xuICAgIHRpbWVTaGlmdERldGVjdG9yLmRldGVjdCgpO1xuXG4gICAgLy8gUmVmcmVzaCB0aGUgcGxheWJhY2sgcG9zaXRpb24gd2hlbiB0aGUgcGxheWVyIHJlc2l6ZWQgb3IgdGhlIFVJIGlzIGNvbmZpZ3VyZWQuIFRoZSBwbGF5YmFjayBwb3NpdGlvbiBtYXJrZXJcbiAgICAvLyBpcyBwb3NpdGlvbmVkIGFic29sdXRlbHkgYW5kIG11c3QgdGhlcmVmb3JlIGJlIHVwZGF0ZWQgd2hlbiB0aGUgc2l6ZSBvZiB0aGUgc2Vla2JhciBjaGFuZ2VzLlxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5ZXJSZXNpemVkLCAoKSA9PiB7XG4gICAgICB0aGlzLnJlZnJlc2hQbGF5YmFja1Bvc2l0aW9uKCk7XG4gICAgfSk7XG4gICAgLy8gQWRkaXRpb25hbGx5LCB3aGVuIHRoaXMgY29kZSBpcyBjYWxsZWQsIHRoZSBzZWVrYmFyIGlzIG5vdCBwYXJ0IG9mIHRoZSBVSSB5ZXQgYW5kIHRoZXJlZm9yZSBkb2VzIG5vdCBoYXZlIGEgc2l6ZSxcbiAgICAvLyByZXN1bHRpbmcgaW4gYSB3cm9uZyBpbml0aWFsIHBvc2l0aW9uIG9mIHRoZSBtYXJrZXIuIFJlZnJlc2hpbmcgaXQgb25jZSB0aGUgVUkgaXMgY29uZmlndXJlZCBzb2x2ZWQgdGhpcyBpc3N1ZS5cbiAgICB1aW1hbmFnZXIub25Db25maWd1cmVkLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLnJlZnJlc2hQbGF5YmFja1Bvc2l0aW9uKCk7XG4gICAgfSk7XG4gICAgLy8gSXQgY2FuIGFsc28gaGFwcGVuIHdoZW4gYSBuZXcgc291cmNlIGlzIGxvYWRlZFxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VMb2FkZWQsICgpID0+IHtcbiAgICAgIHRoaXMucmVmcmVzaFBsYXliYWNrUG9zaXRpb24oKTtcbiAgICB9KTtcbiAgICAvLyBBZGQgbWFya2VycyB3aGVuIGEgc291cmNlIGlzIGxvYWRlZCBvciB1cGRhdGUgd2hlbiBhIG1hcmtlciBpcyBhZGRlZCBvciByZW1vdmVkXG4gICAgdWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHBsYXliYWNrUG9zaXRpb25IYW5kbGVyKCk7XG4gICAgfSk7XG5cbiAgICAvLyBTZXQgdGhlIHNuYXBwaW5nUmFuZ2UgaWYgc2V0IGluIHRoZSB1aW1hbmFnZXIgY29uZmlnXG4gICAgaWYgKHR5cGVvZiB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuc2Vla2JhclNuYXBwaW5nUmFuZ2UgPT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLmNvbmZpZy5zbmFwcGluZ1JhbmdlID0gdWltYW5hZ2VyLmdldENvbmZpZygpLnNlZWtiYXJTbmFwcGluZ1JhbmdlO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgc2Vla2JhclxuICAgIHBsYXliYWNrUG9zaXRpb25IYW5kbGVyKCk7IC8vIFNldCB0aGUgcGxheWJhY2sgcG9zaXRpb25cbiAgICB0aGlzLnNldEJ1ZmZlclBvc2l0aW9uKDApO1xuICAgIHRoaXMuc2V0U2Vla1Bvc2l0aW9uKDApO1xuICAgIGlmICh0aGlzLmNvbmZpZy5zbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlSW50ZXJ2YWxNcyAhPT0gU2Vla0Jhci5TTU9PVEhfUExBWUJBQ0tfUE9TSVRJT05fVVBEQVRFX0RJU0FCTEVEKSB7XG4gICAgICB0aGlzLmNvbmZpZ3VyZVNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVyKHBsYXllciwgdWltYW5hZ2VyKTtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXplIG1hcmtlcnNcbiAgICB0aGlzLmluaXRpYWxpemVUaW1lbGluZU1hcmtlcnMocGxheWVyLCB1aW1hbmFnZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0aWFsaXplVGltZWxpbmVNYXJrZXJzKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgY29uc3QgdGltZWxpbmVNYXJrZXJDb25maWcgPSB7XG4gICAgICBjc3NQcmVmaXg6IHRoaXMuY29uZmlnLmNzc1ByZWZpeCxcbiAgICAgIHNuYXBwaW5nUmFuZ2U6IHRoaXMuY29uZmlnLnNuYXBwaW5nUmFuZ2UsXG4gICAgfTtcbiAgICB0aGlzLnRpbWVsaW5lTWFya2Vyc0hhbmRsZXIgPSBuZXcgVGltZWxpbmVNYXJrZXJzSGFuZGxlcih0aW1lbGluZU1hcmtlckNvbmZpZywgKCkgPT4gdGhpcy5zZWVrQmFyLndpZHRoKCksIHRoaXMuc2Vla0Jhck1hcmtlcnNDb250YWluZXIpO1xuICAgIHRoaXMudGltZWxpbmVNYXJrZXJzSGFuZGxlci5pbml0aWFsaXplKHBsYXllciwgdWltYW5hZ2VyKTtcbiAgfVxuXG4gIHByaXZhdGUgc2Vla1doaWxlU2NydWJiaW5nID0gKHNlbmRlcjogU2Vla0JhciwgYXJnczogU2Vla1ByZXZpZXdFdmVudEFyZ3MpID0+IHtcbiAgICBpZiAoYXJncy5zY3J1YmJpbmcpIHtcbiAgICAgIHRoaXMuc2VlayhhcmdzLnBvc2l0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSBnZXRUYXJnZXRTZWVrUG9zaXRpb24gPSAocGVyY2VudGFnZTogbnVtYmVyKSA9PiB7XG4gICAgbGV0IHRhcmdldDogbnVtYmVyO1xuICAgIGlmICh0aGlzLnBsYXllci5pc0xpdmUoKSkge1xuICAgICAgY29uc3QgbWF4VGltZVNoaWZ0ID0gdGhpcy5wbGF5ZXIuZ2V0TWF4VGltZVNoaWZ0KCk7XG4gICAgICB0YXJnZXQgPSBtYXhUaW1lU2hpZnQgLSAobWF4VGltZVNoaWZ0ICogKHBlcmNlbnRhZ2UgLyAxMDApKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc2Vla2FibGVSYW5nZVN0YXJ0ID0gUGxheWVyVXRpbHMuZ2V0U2Vla2FibGVSYW5nZVN0YXJ0KHRoaXMucGxheWVyLCAwKTtcbiAgICAgIGNvbnN0IHJlbGF0aXZlU2Vla1RhcmdldCA9IHRoaXMucGxheWVyLmdldER1cmF0aW9uKCkgKiAocGVyY2VudGFnZSAvIDEwMCk7XG4gICAgICB0YXJnZXQgPSByZWxhdGl2ZVNlZWtUYXJnZXQgKyBzZWVrYWJsZVJhbmdlU3RhcnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIHByaXZhdGUgc2VlayA9IChwZXJjZW50YWdlOiBudW1iZXIpID0+IHtcbiAgICBjb25zdCB0YXJnZXRQbGF5YmFja1Bvc2l0aW9uID0gdGhpcy5nZXRUYXJnZXRTZWVrUG9zaXRpb24ocGVyY2VudGFnZSk7XG4gICAgaWYgKHRoaXMucGxheWVyLmlzTGl2ZSgpKSB7XG4gICAgICB0aGlzLnBsYXllci50aW1lU2hpZnQodGFyZ2V0UGxheWJhY2tQb3NpdGlvbiwgJ3VpJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGxheWVyLnNlZWsodGFyZ2V0UGxheWJhY2tQb3NpdGlvbiwgJ3VpJyk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBVcGRhdGUgc2Vla2JhciB3aGlsZSBhIGxpdmUgc3RyZWFtIHdpdGggRFZSIHdpbmRvdyBpcyBwYXVzZWQuXG4gICAqIFRoZSBwbGF5YmFjayBwb3NpdGlvbiBzdGF5cyBzdGlsbCBhbmQgdGhlIHBvc2l0aW9uIGluZGljYXRvciB2aXN1YWxseSBtb3ZlcyB0b3dhcmRzIHRoZSBiYWNrLlxuICAgKi9cbiAgcHJpdmF0ZSBjb25maWd1cmVMaXZlUGF1c2VkVGltZXNoaWZ0VXBkYXRlcihcbiAgICBwbGF5ZXI6IFBsYXllckFQSSxcbiAgICB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyLFxuICAgIHBsYXliYWNrUG9zaXRpb25IYW5kbGVyOiAoKSA9PiB2b2lkLFxuICApOiB2b2lkIHtcbiAgICAvLyBSZWd1bGFybHkgdXBkYXRlIHRoZSBwbGF5YmFjayBwb3NpdGlvbiB3aGlsZSB0aGUgdGltZW91dCBpcyBhY3RpdmVcbiAgICB0aGlzLnBhdXNlZFRpbWVzaGlmdFVwZGF0ZXIgPSBuZXcgVGltZW91dCgxMDAwLCBwbGF5YmFja1Bvc2l0aW9uSGFuZGxlciwgdHJ1ZSk7XG5cbiAgICAvLyBTdGFydCB1cGRhdGVyIHdoZW4gYSBsaXZlIHN0cmVhbSB3aXRoIHRpbWVzaGlmdCB3aW5kb3cgaXMgcGF1c2VkXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBhdXNlZCwgKCkgPT4ge1xuICAgICAgaWYgKHBsYXllci5pc0xpdmUoKSAmJiBwbGF5ZXIuZ2V0TWF4VGltZVNoaWZ0KCkgPCAwKSB7XG4gICAgICAgIHRoaXMucGF1c2VkVGltZXNoaWZ0VXBkYXRlci5zdGFydCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gU3RvcCB1cGRhdGVyIHdoZW4gcGxheWJhY2sgY29udGludWVzIChubyBtYXR0ZXIgaWYgdGhlIHVwZGF0ZXIgd2FzIHN0YXJ0ZWQgYmVmb3JlKVxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5LCAoKSA9PiB0aGlzLnBhdXNlZFRpbWVzaGlmdFVwZGF0ZXIuY2xlYXIoKSk7XG4gIH1cblxuICBwcml2YXRlIGNvbmZpZ3VyZVNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVyKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgLypcbiAgICAgKiBQbGF5YmFjayBwb3NpdGlvbiB1cGRhdGVcbiAgICAgKlxuICAgICAqIFdlIGRvIG5vdCB1cGRhdGUgdGhlIHBvc2l0aW9uIGRpcmVjdGx5IGZyb20gdGhlIFRpbWVDaGFuZ2VkIGV2ZW50LCBiZWNhdXNlIGl0IGFycml2ZXMgdmVyeSBqaXR0ZXJ5IGFuZFxuICAgICAqIHJlc3VsdHMgaW4gYSBqaXR0ZXJ5IHBvc2l0aW9uIGluZGljYXRvciBzaW5jZSB0aGUgQ1NTIHRyYW5zaXRpb24gdGltZSBpcyBzdGF0aWNhbGx5IHNldC5cbiAgICAgKiBUbyB3b3JrIGFyb3VuZCB0aGlzIGlzc3VlLCB3ZSBtYWludGFpbiBhIGxvY2FsIHBsYXliYWNrIHBvc2l0aW9uIHRoYXQgaXMgdXBkYXRlZCBpbiBhIHN0YWJsZSByZWd1bGFyIGludGVydmFsXG4gICAgICogYW5kIGtlcHQgaW4gc3luYyB3aXRoIHRoZSBwbGF5ZXIuXG4gICAgICovXG4gICAgbGV0IGN1cnJlbnRUaW1lU2Vla0JhciA9IDA7XG4gICAgbGV0IGN1cnJlbnRUaW1lUGxheWVyID0gMDtcbiAgICBsZXQgdXBkYXRlSW50ZXJ2YWxNcyA9IDUwO1xuICAgIGxldCBjdXJyZW50VGltZVVwZGF0ZURlbHRhU2VjcyA9IHVwZGF0ZUludGVydmFsTXMgLyAxMDAwO1xuXG4gICAgdGhpcy5zbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlciA9IG5ldyBUaW1lb3V0KHVwZGF0ZUludGVydmFsTXMsICgpID0+IHtcbiAgICAgIGlmICh0aGlzLmlzU2Vla2luZygpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY3VycmVudFRpbWVTZWVrQmFyICs9IGN1cnJlbnRUaW1lVXBkYXRlRGVsdGFTZWNzO1xuXG4gICAgICB0cnkge1xuICAgICAgICBjdXJyZW50VGltZVBsYXllciA9IHRoaXMuZ2V0UmVsYXRpdmVDdXJyZW50VGltZSgpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gRGV0ZWN0IGlmIHRoZSBwbGF5ZXIgaGFzIGJlZW4gZGVzdHJveWVkIGFuZCBzdG9wIHVwZGF0aW5nIGlmIHNvXG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIHBsYXllci5leHBvcnRzLlBsYXllckFQSU5vdEF2YWlsYWJsZUVycm9yKSB7XG4gICAgICAgICAgdGhpcy5zbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlci5jbGVhcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhlIGN1cnJlbnQgdGltZSBjYW5ub3QgYmUgcmVhZCBpdCBtYWtlcyBubyBzZW5zZSB0byBjb250aW51ZVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFN5bmMgY3VycmVudFRpbWUgb2Ygc2Vla2JhciB0byBwbGF5ZXJcbiAgICAgIGxldCBjdXJyZW50VGltZURlbHRhID0gY3VycmVudFRpbWVTZWVrQmFyIC0gY3VycmVudFRpbWVQbGF5ZXI7XG4gICAgICAvLyBJZiB0aGUgZGVsdGEgaXMgbGFyZ2VyIHRoYXQgMiBzZWNzLCBkaXJlY3RseSBqdW1wIHRoZSBzZWVrYmFyIHRvIHRoZVxuICAgICAgLy8gcGxheWVyIHRpbWUgaW5zdGVhZCBvZiBzbW9vdGhseSBmYXN0IGZvcndhcmRpbmcvcmV3aW5kaW5nLlxuICAgICAgaWYgKE1hdGguYWJzKGN1cnJlbnRUaW1lRGVsdGEpID4gMikge1xuICAgICAgICBjdXJyZW50VGltZVNlZWtCYXIgPSBjdXJyZW50VGltZVBsYXllcjtcbiAgICAgIH1cbiAgICAgIC8vIElmIGN1cnJlbnRUaW1lRGVsdGEgaXMgbmVnYXRpdmUgYW5kIGJlbG93IHRoZSBhZGp1c3RtZW50IHRocmVzaG9sZCxcbiAgICAgIC8vIHRoZSBwbGF5ZXIgaXMgYWhlYWQgb2YgdGhlIHNlZWtiYXIgYW5kIHdlICdmYXN0IGZvcndhcmQnIHRoZSBzZWVrYmFyXG4gICAgICBlbHNlIGlmIChjdXJyZW50VGltZURlbHRhIDw9IC1jdXJyZW50VGltZVVwZGF0ZURlbHRhU2Vjcykge1xuICAgICAgICBjdXJyZW50VGltZVNlZWtCYXIgKz0gY3VycmVudFRpbWVVcGRhdGVEZWx0YVNlY3M7XG4gICAgICB9XG4gICAgICAvLyBJZiBjdXJyZW50VGltZURlbHRhIGlzIHBvc2l0aXZlIGFuZCBhYm92ZSB0aGUgYWRqdXN0bWVudCB0aHJlc2hvbGQsXG4gICAgICAvLyB0aGUgcGxheWVyIGlzIGJlaGluZCB0aGUgc2Vla2JhciBhbmQgd2UgJ3Jld2luZCcgdGhlIHNlZWtiYXJcbiAgICAgIGVsc2UgaWYgKGN1cnJlbnRUaW1lRGVsdGEgPj0gY3VycmVudFRpbWVVcGRhdGVEZWx0YVNlY3MpIHtcbiAgICAgICAgY3VycmVudFRpbWVTZWVrQmFyIC09IGN1cnJlbnRUaW1lVXBkYXRlRGVsdGFTZWNzO1xuICAgICAgfVxuXG4gICAgICBsZXQgcGxheWJhY2tQb3NpdGlvblBlcmNlbnRhZ2UgPSAxMDAgLyBwbGF5ZXIuZ2V0RHVyYXRpb24oKSAqIGN1cnJlbnRUaW1lU2Vla0JhcjtcbiAgICAgIHRoaXMuc2V0UGxheWJhY2tQb3NpdGlvbihwbGF5YmFja1Bvc2l0aW9uUGVyY2VudGFnZSk7XG4gICAgfSwgdHJ1ZSk7XG5cbiAgICBsZXQgc3RhcnRTbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlciA9ICgpID0+IHtcbiAgICAgIGlmICghcGxheWVyLmlzTGl2ZSgpKSB7XG4gICAgICAgIGN1cnJlbnRUaW1lU2Vla0JhciA9IHRoaXMuZ2V0UmVsYXRpdmVDdXJyZW50VGltZSgpO1xuICAgICAgICB0aGlzLnNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVyLnN0YXJ0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGxldCBzdG9wU21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZXIgPSAoKSA9PiB7XG4gICAgICB0aGlzLnNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVyLmNsZWFyKCk7XG4gICAgfTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5LCBzdGFydFNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVyKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheWluZywgc3RhcnRTbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBhdXNlZCwgc3RvcFNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVyKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheWJhY2tGaW5pc2hlZCwgc3RvcFNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVyKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU2Vla2VkLCAoKSA9PiB7XG4gICAgICBjdXJyZW50VGltZVNlZWtCYXIgPSB0aGlzLmdldFJlbGF0aXZlQ3VycmVudFRpbWUoKTtcbiAgICB9KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU291cmNlVW5sb2FkZWQsIHN0b3BTbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlcik7XG5cbiAgICBpZiAocGxheWVyLmlzUGxheWluZygpKSB7XG4gICAgICBzdGFydFNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVyKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRSZWxhdGl2ZUN1cnJlbnRUaW1lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIFBsYXllclV0aWxzLmdldEN1cnJlbnRUaW1lUmVsYXRpdmVUb1NlZWthYmxlUmFuZ2UodGhpcy5wbGF5ZXIpO1xuICB9XG5cbiAgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBzdXBlci5yZWxlYXNlKCk7XG5cbiAgICBpZiAodGhpcy5zbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlcikgeyAvLyBvYmplY3QgbXVzdCBub3QgbmVjZXNzYXJpbHkgZXhpc3QsIGUuZy4gaW4gdm9sdW1lIHNsaWRlciBzdWJjbGFzc1xuICAgICAgdGhpcy5zbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlci5jbGVhcigpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnBhdXNlZFRpbWVzaGlmdFVwZGF0ZXIpIHtcbiAgICAgIHRoaXMucGF1c2VkVGltZXNoaWZ0VXBkYXRlci5jbGVhcigpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNvbmZpZy5lbmFibGVTZWVrUHJldmlldykge1xuICAgICAgdGhpcy5vblNlZWtQcmV2aWV3LnVuc3Vic2NyaWJlKHRoaXMuc2Vla1doaWxlU2NydWJiaW5nKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgdG9Eb21FbGVtZW50KCk6IERPTSB7XG4gICAgaWYgKHRoaXMuY29uZmlnLnZlcnRpY2FsKSB7XG4gICAgICB0aGlzLmNvbmZpZy5jc3NDbGFzc2VzLnB1c2goJ3ZlcnRpY2FsJyk7XG4gICAgfVxuXG4gICAgbGV0IHNlZWtCYXJDb250YWluZXIgPSBuZXcgRE9NKCdkaXYnLCB7XG4gICAgICAnaWQnOiB0aGlzLmNvbmZpZy5pZCxcbiAgICAgICdjbGFzcyc6IHRoaXMuZ2V0Q3NzQ2xhc3NlcygpLFxuICAgICAgJ3JvbGUnOiAnc2xpZGVyJyxcbiAgICAgICdhcmlhLWxhYmVsJzogaTE4bi5wZXJmb3JtTG9jYWxpemF0aW9uKHRoaXMuY29uZmlnLmFyaWFMYWJlbCksXG4gICAgICAndGFiaW5kZXgnOiB0aGlzLmNvbmZpZy50YWJJbmRleC50b1N0cmluZygpLFxuICAgIH0pO1xuXG4gICAgbGV0IHNlZWtCYXIgPSBuZXcgRE9NKCdkaXYnLCB7XG4gICAgICAnY2xhc3MnOiB0aGlzLnByZWZpeENzcygnc2Vla2JhcicpLFxuICAgIH0pO1xuICAgIHRoaXMuc2Vla0JhciA9IHNlZWtCYXI7XG5cbiAgICAvLyBJbmRpY2F0b3IgdGhhdCBzaG93cyB0aGUgYnVmZmVyIGZpbGwgbGV2ZWxcbiAgICBsZXQgc2Vla0JhckJ1ZmZlckxldmVsID0gbmV3IERPTSgnZGl2Jywge1xuICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ3NlZWtiYXItYnVmZmVybGV2ZWwnKSxcbiAgICB9KTtcbiAgICB0aGlzLnNlZWtCYXJCdWZmZXJQb3NpdGlvbiA9IHNlZWtCYXJCdWZmZXJMZXZlbDtcblxuICAgIC8vIEluZGljYXRvciB0aGF0IHNob3dzIHRoZSBjdXJyZW50IHBsYXliYWNrIHBvc2l0aW9uXG4gICAgbGV0IHNlZWtCYXJQbGF5YmFja1Bvc2l0aW9uID0gbmV3IERPTSgnZGl2Jywge1xuICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ3NlZWtiYXItcGxheWJhY2twb3NpdGlvbicpLFxuICAgIH0pO1xuICAgIHRoaXMuc2Vla0JhclBsYXliYWNrUG9zaXRpb24gPSBzZWVrQmFyUGxheWJhY2tQb3NpdGlvbjtcblxuICAgIC8vIEEgbWFya2VyIG9mIHRoZSBjdXJyZW50IHBsYXliYWNrIHBvc2l0aW9uLCBlLmcuIGEgZG90IG9yIGxpbmVcbiAgICBsZXQgc2Vla0JhclBsYXliYWNrUG9zaXRpb25NYXJrZXIgPSBuZXcgRE9NKCdkaXYnLCB7XG4gICAgICAnY2xhc3MnOiB0aGlzLnByZWZpeENzcygnc2Vla2Jhci1wbGF5YmFja3Bvc2l0aW9uLW1hcmtlcicpLFxuICAgIH0pO1xuICAgIHRoaXMuc2Vla0JhclBsYXliYWNrUG9zaXRpb25NYXJrZXIgPSBzZWVrQmFyUGxheWJhY2tQb3NpdGlvbk1hcmtlcjtcblxuICAgIC8vIEluZGljYXRvciB0aGF0IHNob3cgd2hlcmUgYSBzZWVrIHdpbGwgZ28gdG9cbiAgICBsZXQgc2Vla0JhclNlZWtQb3NpdGlvbiA9IG5ldyBET00oJ2RpdicsIHtcbiAgICAgICdjbGFzcyc6IHRoaXMucHJlZml4Q3NzKCdzZWVrYmFyLXNlZWtwb3NpdGlvbicpLFxuICAgIH0pO1xuICAgIHRoaXMuc2Vla0JhclNlZWtQb3NpdGlvbiA9IHNlZWtCYXJTZWVrUG9zaXRpb247XG5cbiAgICAvLyBJbmRpY2F0b3IgdGhhdCBzaG93cyB0aGUgZnVsbCBzZWVrYmFyXG4gICAgbGV0IHNlZWtCYXJCYWNrZHJvcCA9IG5ldyBET00oJ2RpdicsIHtcbiAgICAgICdjbGFzcyc6IHRoaXMucHJlZml4Q3NzKCdzZWVrYmFyLWJhY2tkcm9wJyksXG4gICAgfSk7XG4gICAgdGhpcy5zZWVrQmFyQmFja2Ryb3AgPSBzZWVrQmFyQmFja2Ryb3A7XG5cbiAgICBsZXQgc2Vla0JhckNoYXB0ZXJNYXJrZXJzQ29udGFpbmVyID0gbmV3IERPTSgnZGl2Jywge1xuICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ3NlZWtiYXItbWFya2VycycpLFxuICAgIH0pO1xuICAgIHRoaXMuc2Vla0Jhck1hcmtlcnNDb250YWluZXIgPSBzZWVrQmFyQ2hhcHRlck1hcmtlcnNDb250YWluZXI7XG5cbiAgICBzZWVrQmFyLmFwcGVuZCh0aGlzLnNlZWtCYXJCYWNrZHJvcCwgdGhpcy5zZWVrQmFyQnVmZmVyUG9zaXRpb24sIHRoaXMuc2Vla0JhclNlZWtQb3NpdGlvbixcbiAgICAgIHRoaXMuc2Vla0JhclBsYXliYWNrUG9zaXRpb24sIHRoaXMuc2Vla0Jhck1hcmtlcnNDb250YWluZXIsIHRoaXMuc2Vla0JhclBsYXliYWNrUG9zaXRpb25NYXJrZXIpO1xuXG4gICAgbGV0IHNlZWtpbmcgPSBmYWxzZTtcblxuICAgIC8vIERlZmluZSBoYW5kbGVyIGZ1bmN0aW9ucyBzbyB3ZSBjYW4gYXR0YWNoL3JlbW92ZSB0aGVtIGxhdGVyXG4gICAgbGV0IG1vdXNlVG91Y2hNb3ZlSGFuZGxlciA9IChlOiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpb24gdG8gVlIgaGFuZGxlclxuICAgICAgaWYgKHRoaXMucGxheWVyLnZyICE9IG51bGwpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHRhcmdldFBlcmNlbnRhZ2UgPSAxMDAgKiB0aGlzLmdldE9mZnNldChlKTtcbiAgICAgIHRoaXMuc2V0U2Vla1Bvc2l0aW9uKHRhcmdldFBlcmNlbnRhZ2UpO1xuICAgICAgdGhpcy5zZXRQbGF5YmFja1Bvc2l0aW9uKHRhcmdldFBlcmNlbnRhZ2UpO1xuICAgICAgdGhpcy5vblNlZWtQcmV2aWV3RXZlbnQodGFyZ2V0UGVyY2VudGFnZSwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIGxldCBtb3VzZVRvdWNoVXBIYW5kbGVyID0gKGU6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50KSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIC8vIFJlbW92ZSBoYW5kbGVycywgc2VlayBvcGVyYXRpb24gaXMgZmluaXNoZWRcbiAgICAgIG5ldyBET00oZG9jdW1lbnQpLm9mZigndG91Y2htb3ZlIG1vdXNlbW92ZScsIG1vdXNlVG91Y2hNb3ZlSGFuZGxlcik7XG4gICAgICBuZXcgRE9NKGRvY3VtZW50KS5vZmYoJ3RvdWNoZW5kIG1vdXNldXAnLCBtb3VzZVRvdWNoVXBIYW5kbGVyKTtcblxuICAgICAgbGV0IHRhcmdldFBlcmNlbnRhZ2UgPSAxMDAgKiB0aGlzLmdldE9mZnNldChlKTtcbiAgICAgIGxldCBzbmFwcGVkQ2hhcHRlciA9IHRoaXMudGltZWxpbmVNYXJrZXJzSGFuZGxlciAmJiB0aGlzLnRpbWVsaW5lTWFya2Vyc0hhbmRsZXIuZ2V0TWFya2VyQXRQb3NpdGlvbih0YXJnZXRQZXJjZW50YWdlKTtcblxuICAgICAgdGhpcy5zZXRTZWVraW5nKGZhbHNlKTtcbiAgICAgIHNlZWtpbmcgPSBmYWxzZTtcblxuICAgICAgLy8gRmlyZSBzZWVrZWQgZXZlbnRcbiAgICAgIHRoaXMub25TZWVrZWRFdmVudChzbmFwcGVkQ2hhcHRlciA/IHNuYXBwZWRDaGFwdGVyLnBvc2l0aW9uIDogdGFyZ2V0UGVyY2VudGFnZSk7XG4gICAgfTtcblxuICAgIC8vIEEgc2VlayBhbHdheXMgc3RhcnQgd2l0aCBhIHRvdWNoc3RhcnQgb3IgbW91c2Vkb3duIGRpcmVjdGx5IG9uIHRoZSBzZWVrYmFyLlxuICAgIC8vIFRvIHRyYWNrIGEgbW91c2Ugc2VlayBhbHNvIG91dHNpZGUgdGhlIHNlZWtiYXIgKGZvciB0b3VjaCBldmVudHMgdGhpcyB3b3JrcyBhdXRvbWF0aWNhbGx5KSxcbiAgICAvLyBzbyB0aGUgdXNlciBkb2VzIG5vdCBuZWVkIHRvIHRha2UgY2FyZSB0aGF0IHRoZSBtb3VzZSBhbHdheXMgc3RheXMgb24gdGhlIHNlZWtiYXIsIHdlIGF0dGFjaCB0aGUgbW91c2Vtb3ZlXG4gICAgLy8gYW5kIG1vdXNldXAgaGFuZGxlcnMgdG8gdGhlIHdob2xlIGRvY3VtZW50LiBBIHNlZWsgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIHVzZXIgbGlmdHMgdGhlIG1vdXNlIGtleS5cbiAgICAvLyBBIHNlZWsgbW91c2UgZ2VzdHVyZSBpcyB0aHVzIGJhc2ljYWxseSBhIGNsaWNrIHdpdGggYSBsb25nIHRpbWUgZnJhbWUgYmV0d2VlbiBkb3duIGFuZCB1cCBldmVudHMuXG4gICAgc2Vla0Jhci5vbigndG91Y2hzdGFydCBtb3VzZWRvd24nLCAoZTogTW91c2VFdmVudCB8IFRvdWNoRXZlbnQpID0+IHtcbiAgICAgIGxldCBpc1RvdWNoRXZlbnQgPSBCcm93c2VyVXRpbHMuaXNUb3VjaFN1cHBvcnRlZCAmJiB0aGlzLmlzVG91Y2hFdmVudChlKTtcblxuICAgICAgLy8gUHJldmVudCBzZWxlY3Rpb24gb2YgRE9NIGVsZW1lbnRzIChhbHNvIHByZXZlbnRzIG1vdXNlZG93biBpZiBjdXJyZW50IGV2ZW50IGlzIHRvdWNoc3RhcnQpXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAvLyBBdm9pZCBwcm9wYWdhdGlvbiB0byBWUiBoYW5kbGVyXG4gICAgICBpZiAodGhpcy5wbGF5ZXIudnIgIT0gbnVsbCkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFNlZWtpbmcodHJ1ZSk7IC8vIFNldCBzZWVraW5nIGNsYXNzIG9uIERPTSBlbGVtZW50XG4gICAgICBzZWVraW5nID0gdHJ1ZTsgLy8gU2V0IHNlZWsgdHJhY2tpbmcgZmxhZ1xuXG4gICAgICAvLyBGaXJlIHNlZWtlZCBldmVudFxuICAgICAgdGhpcy5vblNlZWtFdmVudCgpO1xuXG4gICAgICAvLyBBZGQgaGFuZGxlciB0byB0cmFjayB0aGUgc2VlayBvcGVyYXRpb24gb3ZlciB0aGUgd2hvbGUgZG9jdW1lbnRcbiAgICAgIG5ldyBET00oZG9jdW1lbnQpLm9uKGlzVG91Y2hFdmVudCA/ICd0b3VjaG1vdmUnIDogJ21vdXNlbW92ZScsIG1vdXNlVG91Y2hNb3ZlSGFuZGxlcik7XG4gICAgICBuZXcgRE9NKGRvY3VtZW50KS5vbihpc1RvdWNoRXZlbnQgPyAndG91Y2hlbmQnIDogJ21vdXNldXAnLCBtb3VzZVRvdWNoVXBIYW5kbGVyKTtcbiAgICB9KTtcblxuICAgIC8vIERpc3BsYXkgc2VlayB0YXJnZXQgaW5kaWNhdG9yIHdoZW4gbW91c2UgaG92ZXJzIG9yIGZpbmdlciBzbGlkZXMgb3ZlciBzZWVrYmFyXG4gICAgc2Vla0Jhci5vbigndG91Y2htb3ZlIG1vdXNlbW92ZScsIChlOiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAoc2Vla2luZykge1xuICAgICAgICBtb3VzZVRvdWNoTW92ZUhhbmRsZXIoZSk7XG4gICAgICB9XG5cbiAgICAgIGxldCBwb3NpdGlvbiA9IDEwMCAqIHRoaXMuZ2V0T2Zmc2V0KGUpO1xuICAgICAgdGhpcy5zZXRTZWVrUG9zaXRpb24ocG9zaXRpb24pO1xuXG4gICAgICB0aGlzLm9uU2Vla1ByZXZpZXdFdmVudChwb3NpdGlvbiwgZmFsc2UpO1xuXG4gICAgICBpZiAodGhpcy5oYXNMYWJlbCgpICYmIHRoaXMuZ2V0TGFiZWwoKS5pc0hpZGRlbigpKSB7XG4gICAgICAgIHRoaXMuZ2V0TGFiZWwoKS5zaG93KCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBIaWRlIHNlZWsgdGFyZ2V0IGluZGljYXRvciB3aGVuIG1vdXNlIG9yIGZpbmdlciBsZWF2ZXMgc2Vla2JhclxuICAgIHNlZWtCYXIub24oJ3RvdWNoZW5kIG1vdXNlbGVhdmUnLCAoZTogTW91c2VFdmVudCB8IFRvdWNoRXZlbnQpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgdGhpcy5zZXRTZWVrUG9zaXRpb24oMCk7XG5cbiAgICAgIGlmICh0aGlzLmhhc0xhYmVsKCkpIHtcbiAgICAgICAgdGhpcy5nZXRMYWJlbCgpLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHNlZWtCYXJDb250YWluZXIuYXBwZW5kKHNlZWtCYXIpO1xuXG4gICAgaWYgKHRoaXMubGFiZWwpIHtcbiAgICAgIHNlZWtCYXJDb250YWluZXIuYXBwZW5kKHRoaXMubGFiZWwuZ2V0RG9tRWxlbWVudCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2Vla0JhckNvbnRhaW5lcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBob3Jpem9udGFsIG9mZnNldCBvZiBhIG1vdXNlL3RvdWNoIGV2ZW50IHBvaW50IGZyb20gdGhlIGxlZnQgZWRnZSBvZiB0aGUgc2VlayBiYXIuXG4gICAqIEBwYXJhbSBldmVudFBhZ2VYIHRoZSBwYWdlWCBjb29yZGluYXRlIG9mIGFuIGV2ZW50IHRvIGNhbGN1bGF0ZSB0aGUgb2Zmc2V0IGZyb21cbiAgICogQHJldHVybnMge251bWJlcn0gYSBudW1iZXIgaW4gdGhlIHJhbmdlIG9mIFswLCAxXSwgd2hlcmUgMCBpcyB0aGUgbGVmdCBlZGdlIGFuZCAxIGlzIHRoZSByaWdodCBlZGdlXG4gICAqL1xuICBwcml2YXRlIGdldEhvcml6b250YWxPZmZzZXQoZXZlbnRQYWdlWDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBsZXQgZWxlbWVudE9mZnNldFB4ID0gdGhpcy5zZWVrQmFyLm9mZnNldCgpLmxlZnQ7XG4gICAgbGV0IHdpZHRoUHggPSB0aGlzLnNlZWtCYXIud2lkdGgoKTtcbiAgICBsZXQgb2Zmc2V0UHggPSBldmVudFBhZ2VYIC0gZWxlbWVudE9mZnNldFB4O1xuICAgIGxldCBvZmZzZXQgPSAxIC8gd2lkdGhQeCAqIG9mZnNldFB4O1xuXG4gICAgcmV0dXJuIHRoaXMuc2FuaXRpemVPZmZzZXQob2Zmc2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB2ZXJ0aWNhbCBvZmZzZXQgb2YgYSBtb3VzZS90b3VjaCBldmVudCBwb2ludCBmcm9tIHRoZSBib3R0b20gZWRnZSBvZiB0aGUgc2VlayBiYXIuXG4gICAqIEBwYXJhbSBldmVudFBhZ2VZIHRoZSBwYWdlWCBjb29yZGluYXRlIG9mIGFuIGV2ZW50IHRvIGNhbGN1bGF0ZSB0aGUgb2Zmc2V0IGZyb21cbiAgICogQHJldHVybnMge251bWJlcn0gYSBudW1iZXIgaW4gdGhlIHJhbmdlIG9mIFswLCAxXSwgd2hlcmUgMCBpcyB0aGUgYm90dG9tIGVkZ2UgYW5kIDEgaXMgdGhlIHRvcCBlZGdlXG4gICAqL1xuICBwcml2YXRlIGdldFZlcnRpY2FsT2Zmc2V0KGV2ZW50UGFnZVk6IG51bWJlcik6IG51bWJlciB7XG4gICAgbGV0IGVsZW1lbnRPZmZzZXRQeCA9IHRoaXMuc2Vla0Jhci5vZmZzZXQoKS50b3A7XG4gICAgbGV0IHdpZHRoUHggPSB0aGlzLnNlZWtCYXIuaGVpZ2h0KCk7XG4gICAgbGV0IG9mZnNldFB4ID0gZXZlbnRQYWdlWSAtIGVsZW1lbnRPZmZzZXRQeDtcbiAgICBsZXQgb2Zmc2V0ID0gMSAvIHdpZHRoUHggKiBvZmZzZXRQeDtcblxuICAgIHJldHVybiAxIC0gdGhpcy5zYW5pdGl6ZU9mZnNldChvZmZzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG1vdXNlIG9yIHRvdWNoIGV2ZW50IG9mZnNldCBmb3IgdGhlIGN1cnJlbnQgY29uZmlndXJhdGlvbiAoaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCkuXG4gICAqIEBwYXJhbSBlIHRoZSBldmVudCB0byBjYWxjdWxhdGUgdGhlIG9mZnNldCBmcm9tXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IGEgbnVtYmVyIGluIHRoZSByYW5nZSBvZiBbMCwgMV1cbiAgICogQHNlZSAjZ2V0SG9yaXpvbnRhbE9mZnNldFxuICAgKiBAc2VlICNnZXRWZXJ0aWNhbE9mZnNldFxuICAgKi9cbiAgcHJpdmF0ZSBnZXRPZmZzZXQoZTogTW91c2VFdmVudCB8IFRvdWNoRXZlbnQpOiBudW1iZXIge1xuICAgIGlmIChCcm93c2VyVXRpbHMuaXNUb3VjaFN1cHBvcnRlZCAmJiB0aGlzLmlzVG91Y2hFdmVudChlKSkge1xuICAgICAgaWYgKHRoaXMuY29uZmlnLnZlcnRpY2FsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFZlcnRpY2FsT2Zmc2V0KGUudHlwZSA9PT0gJ3RvdWNoZW5kJyA/IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkgOiBlLnRvdWNoZXNbMF0ucGFnZVkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SG9yaXpvbnRhbE9mZnNldChlLnR5cGUgPT09ICd0b3VjaGVuZCcgPyBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYIDogZS50b3VjaGVzWzBdLnBhZ2VYKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoZSBpbnN0YW5jZW9mIE1vdXNlRXZlbnQpIHtcbiAgICAgIGlmICh0aGlzLmNvbmZpZy52ZXJ0aWNhbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRWZXJ0aWNhbE9mZnNldChlLnBhZ2VZKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEhvcml6b250YWxPZmZzZXQoZS5wYWdlWCk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKGNvbnNvbGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdpbnZhbGlkIGV2ZW50Jyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2FuaXRpemVzIHRoZSBtb3VzZSBvZmZzZXQgdG8gdGhlIHJhbmdlIG9mIFswLCAxXS5cbiAgICpcbiAgICogV2hlbiB0cmFja2luZyB0aGUgbW91c2Ugb3V0c2lkZSB0aGUgc2VlayBiYXIsIHRoZSBvZmZzZXQgY2FuIGJlIG91dHNpZGUgdGhlIGRlc2lyZWQgcmFuZ2UgYW5kIHRoaXMgbWV0aG9kXG4gICAqIGxpbWl0cyBpdCB0byB0aGUgZGVzaXJlZCByYW5nZS4gRS5nLiBhIG1vdXNlIGV2ZW50IGxlZnQgb2YgdGhlIGxlZnQgZWRnZSBvZiBhIHNlZWsgYmFyIHlpZWxkcyBhbiBvZmZzZXQgYmVsb3dcbiAgICogemVybywgYnV0IHRvIGRpc3BsYXkgdGhlIHNlZWsgdGFyZ2V0IG9uIHRoZSBzZWVrIGJhciwgd2UgbmVlZCB0byBsaW1pdCBpdCB0byB6ZXJvLlxuICAgKlxuICAgKiBAcGFyYW0gb2Zmc2V0IHRoZSBvZmZzZXQgdG8gc2FuaXRpemVcbiAgICogQHJldHVybnMge251bWJlcn0gdGhlIHNhbml0aXplZCBvZmZzZXQuXG4gICAqL1xuICBwcml2YXRlIHNhbml0aXplT2Zmc2V0KG9mZnNldDogbnVtYmVyKSB7XG4gICAgLy8gU2luY2Ugd2UgdHJhY2sgbW91c2UgbW92ZXMgb3ZlciB0aGUgd2hvbGUgZG9jdW1lbnQsIHRoZSB0YXJnZXQgY2FuIGJlIG91dHNpZGUgdGhlIHNlZWsgcmFuZ2UsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gbGltaXQgaXQgdG8gdGhlIFswLCAxXSByYW5nZS5cbiAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgb2Zmc2V0ID0gMDtcbiAgICB9IGVsc2UgaWYgKG9mZnNldCA+IDEpIHtcbiAgICAgIG9mZnNldCA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwb3NpdGlvbiBvZiB0aGUgcGxheWJhY2sgcG9zaXRpb24gaW5kaWNhdG9yLlxuICAgKiBAcGFyYW0gcGVyY2VudCBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEwMCBhcyByZXR1cm5lZCBieSB0aGUgcGxheWVyXG4gICAqL1xuICBzZXRQbGF5YmFja1Bvc2l0aW9uKHBlcmNlbnQ6IG51bWJlcikge1xuICAgIHRoaXMucGxheWJhY2tQb3NpdGlvblBlcmNlbnRhZ2UgPSBwZXJjZW50O1xuXG4gICAgLy8gU2V0IHBvc2l0aW9uIG9mIHRoZSBiYXJcbiAgICB0aGlzLnNldFBvc2l0aW9uKHRoaXMuc2Vla0JhclBsYXliYWNrUG9zaXRpb24sIHBlcmNlbnQpO1xuXG4gICAgLy8gU2V0IHBvc2l0aW9uIG9mIHRoZSBtYXJrZXJcbiAgICBsZXQgdG90YWxTaXplID0gKHRoaXMuY29uZmlnLnZlcnRpY2FsID8gKHRoaXMuc2Vla0Jhci5oZWlnaHQoKSAtIHRoaXMuc2Vla0JhclBsYXliYWNrUG9zaXRpb25NYXJrZXIuaGVpZ2h0KCkpIDogdGhpcy5zZWVrQmFyLndpZHRoKCkpO1xuICAgIGxldCBweCA9ICh0b3RhbFNpemUpIC8gMTAwICogcGVyY2VudDtcbiAgICBpZiAodGhpcy5jb25maWcudmVydGljYWwpIHtcbiAgICAgIHB4ID0gdGhpcy5zZWVrQmFyLmhlaWdodCgpIC0gcHggLSB0aGlzLnNlZWtCYXJQbGF5YmFja1Bvc2l0aW9uTWFya2VyLmhlaWdodCgpO1xuICAgIH1cblxuICAgIGxldCBzdHlsZSA9IHRoaXMuY29uZmlnLnZlcnRpY2FsID9cbiAgICAgIC8vIC1tcy10cmFuc2Zvcm0gcmVxdWlyZWQgZm9yIElFOVxuICAgICAgLy8gLXdlYmtpdC10cmFuc2Zvcm0gcmVxdWlyZWQgZm9yIEFuZHJvaWQgNC40IFdlYlZpZXdcbiAgICAgIHtcbiAgICAgICAgJ3RyYW5zZm9ybSc6ICd0cmFuc2xhdGVZKCcgKyBweCArICdweCknLFxuICAgICAgICAnLW1zLXRyYW5zZm9ybSc6ICd0cmFuc2xhdGVZKCcgKyBweCArICdweCknLFxuICAgICAgICAnLXdlYmtpdC10cmFuc2Zvcm0nOiAndHJhbnNsYXRlWSgnICsgcHggKyAncHgpJyxcbiAgICAgIH0gOlxuICAgICAge1xuICAgICAgICAndHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVgoJyArIHB4ICsgJ3B4KScsXG4gICAgICAgICctbXMtdHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVgoJyArIHB4ICsgJ3B4KScsXG4gICAgICAgICctd2Via2l0LXRyYW5zZm9ybSc6ICd0cmFuc2xhdGVYKCcgKyBweCArICdweCknLFxuICAgICAgfTtcbiAgICB0aGlzLnNlZWtCYXJQbGF5YmFja1Bvc2l0aW9uTWFya2VyLmNzcyhzdHlsZSk7XG4gIH1cblxuICAvKipcbiAgICogUmVmcmVzaGVzIHRoZSBwbGF5YmFjayBwb3NpdGlvbi4gQ2FuIGJlIHVzZWQgYnkgc3ViY2xhc3NlcyB0byByZWZyZXNoIHRoZSBwb3NpdGlvbiB3aGVuXG4gICAqIHRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQgY2hhbmdlcy5cbiAgICovXG4gIHByb3RlY3RlZCByZWZyZXNoUGxheWJhY2tQb3NpdGlvbigpIHtcbiAgICB0aGlzLnNldFBsYXliYWNrUG9zaXRpb24odGhpcy5wbGF5YmFja1Bvc2l0aW9uUGVyY2VudGFnZSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcG9zaXRpb24gdW50aWwgd2hpY2ggbWVkaWEgaXMgYnVmZmVyZWQuXG4gICAqIEBwYXJhbSBwZXJjZW50IGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMTAwXG4gICAqL1xuICBzZXRCdWZmZXJQb3NpdGlvbihwZXJjZW50OiBudW1iZXIpIHtcbiAgICB0aGlzLnNldFBvc2l0aW9uKHRoaXMuc2Vla0JhckJ1ZmZlclBvc2l0aW9uLCBwZXJjZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwb3NpdGlvbiB3aGVyZSBhIHNlZWssIGlmIGV4ZWN1dGVkLCB3b3VsZCBqdW1wIHRvLlxuICAgKiBAcGFyYW0gcGVyY2VudCBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEwMFxuICAgKi9cbiAgc2V0U2Vla1Bvc2l0aW9uKHBlcmNlbnQ6IG51bWJlcikge1xuICAgIHRoaXMuc2V0UG9zaXRpb24odGhpcy5zZWVrQmFyU2Vla1Bvc2l0aW9uLCBwZXJjZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGFjdHVhbCBwb3NpdGlvbiAod2lkdGggb3IgaGVpZ2h0KSBvZiBhIERPTSBlbGVtZW50IHRoYXQgcmVwcmVzZW50IGEgYmFyIGluIHRoZSBzZWVrIGJhci5cbiAgICogQHBhcmFtIGVsZW1lbnQgdGhlIGVsZW1lbnQgdG8gc2V0IHRoZSBwb3NpdGlvbiBmb3JcbiAgICogQHBhcmFtIHBlcmNlbnQgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxMDBcbiAgICovXG4gIHByaXZhdGUgc2V0UG9zaXRpb24oZWxlbWVudDogRE9NLCBwZXJjZW50OiBudW1iZXIpIHtcbiAgICBsZXQgc2NhbGUgPSBwZXJjZW50IC8gMTAwO1xuXG4gICAgLy8gV2hlbiB0aGUgc2NhbGUgaXMgZXhhY3RseSAxIG9yIHZlcnkgbmVhciAxIChhbmQgdGhlIGJyb3dzZXIgaW50ZXJuYWxseSByb3VuZHMgaXQgdG8gMSksIGJyb3dzZXJzIHNlZW0gdG8gcmVuZGVyXG4gICAgLy8gdGhlIGVsZW1lbnRzIGRpZmZlcmVudGx5IGFuZCB0aGUgaGVpZ2h0IGdldHMgc2xpZ2h0bHkgb2ZmLCBsZWFkaW5nIHRvIG1pc21hdGNoaW5nIGhlaWdodHMgd2hlbiBlLmcuIHRoZSBidWZmZXJcbiAgICAvLyBsZXZlbCBiYXIgaGFzIGEgd2lkdGggb2YgMSBhbmQgdGhlIHBsYXliYWNrIHBvc2l0aW9uIGJhciBoYXMgYSB3aWR0aCA8IDEuIEEgaml0dGVyaW5nIGJ1ZmZlciBsZXZlbCBhcm91bmQgMVxuICAgIC8vIGxlYWRzIHRvIGFuIGV2ZW4gd29yc2UgZmxpY2tlcmluZyBlZmZlY3QuXG4gICAgLy8gVmFyaW91cyBjaGFuZ2VzIGluIENTUyBzdHlsaW5nIGFuZCBET00gaGllcmFyY2h5IGRpZCBub3Qgc29sdmUgdGhlIGlzc3VlIHNvIHRoZSB3b3JrYXJvdW5kIGlzIHRvIGF2b2lkIGEgc2NhbGVcbiAgICAvLyBvZiBleGFjdGx5IDEuXG4gICAgaWYgKHNjYWxlID49IDAuOTk5OTkgJiYgc2NhbGUgPD0gMS4wMDAwMSkge1xuICAgICAgc2NhbGUgPSAwLjk5OTk5O1xuICAgIH1cblxuICAgIGxldCBzdHlsZSA9IHRoaXMuY29uZmlnLnZlcnRpY2FsID9cbiAgICAgIC8vIC1tcy10cmFuc2Zvcm0gcmVxdWlyZWQgZm9yIElFOVxuICAgICAgLy8gLXdlYmtpdC10cmFuc2Zvcm0gcmVxdWlyZWQgZm9yIEFuZHJvaWQgNC40IFdlYlZpZXdcbiAgICAgIHtcbiAgICAgICAgJ3RyYW5zZm9ybSc6ICdzY2FsZVkoJyArIHNjYWxlICsgJyknLFxuICAgICAgICAnLW1zLXRyYW5zZm9ybSc6ICdzY2FsZVkoJyArIHNjYWxlICsgJyknLFxuICAgICAgICAnLXdlYmtpdC10cmFuc2Zvcm0nOiAnc2NhbGVZKCcgKyBzY2FsZSArICcpJyxcbiAgICAgIH0gOlxuICAgICAge1xuICAgICAgICAndHJhbnNmb3JtJzogJ3NjYWxlWCgnICsgc2NhbGUgKyAnKScsXG4gICAgICAgICctbXMtdHJhbnNmb3JtJzogJ3NjYWxlWCgnICsgc2NhbGUgKyAnKScsXG4gICAgICAgICctd2Via2l0LXRyYW5zZm9ybSc6ICdzY2FsZVgoJyArIHNjYWxlICsgJyknLFxuICAgICAgfTtcbiAgICBlbGVtZW50LmNzcyhzdHlsZSk7XG4gIH1cblxuICAvKipcbiAgICogUHV0cyB0aGUgc2VlayBiYXIgaW50byBvciBvdXQgb2Ygc2Vla2luZyBzdGF0ZSBieSBhZGRpbmcvcmVtb3ZpbmcgYSBjbGFzcyB0byB0aGUgRE9NIGVsZW1lbnQuIFRoaXMgY2FuIGJlIHVzZWRcbiAgICogdG8gYWRqdXN0IHRoZSBzdHlsaW5nIHdoaWxlIHNlZWtpbmcuXG4gICAqXG4gICAqIEBwYXJhbSBzZWVraW5nIHNob3VsZCBiZSB0cnVlIHdoZW4gZW50ZXJpbmcgc2VlayBzdGF0ZSwgZmFsc2Ugd2hlbiBleGl0aW5nIHRoZSBzZWVrIHN0YXRlXG4gICAqL1xuICBzZXRTZWVraW5nKHNlZWtpbmc6IGJvb2xlYW4pIHtcbiAgICBpZiAoc2Vla2luZykge1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoU2Vla0Jhci5DTEFTU19TRUVLSU5HKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4Q3NzKFNlZWtCYXIuQ0xBU1NfU0VFS0lORykpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIHNlZWsgYmFyIGlzIGN1cnJlbnRseSBpbiB0aGUgc2VlayBzdGF0ZS5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgaW4gc2VlayBzdGF0ZSwgZWxzZSBmYWxzZVxuICAgKi9cbiAgaXNTZWVraW5nKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmdldERvbUVsZW1lbnQoKS5oYXNDbGFzcyh0aGlzLnByZWZpeENzcyhTZWVrQmFyLkNMQVNTX1NFRUtJTkcpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIHNlZWsgYmFyIGhhcyBhIHtAbGluayBTZWVrQmFyTGFiZWx9LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgc2VlayBiYXIgaGFzIGEgbGFiZWwsIGVsc2UgZmFsc2VcbiAgICovXG4gIGhhc0xhYmVsKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmxhYmVsICE9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbGFiZWwgb2YgdGhpcyBzZWVrIGJhci5cbiAgICogQHJldHVybnMge1NlZWtCYXJMYWJlbH0gdGhlIGxhYmVsIGlmIHRoaXMgc2VlayBiYXIgaGFzIGEgbGFiZWwsIGVsc2UgbnVsbFxuICAgKi9cbiAgZ2V0TGFiZWwoKTogU2Vla0JhckxhYmVsIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMubGFiZWw7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25TZWVrRXZlbnQoKSB7XG4gICAgdGhpcy5zZWVrQmFyRXZlbnRzLm9uU2Vlay5kaXNwYXRjaCh0aGlzKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvblNlZWtQcmV2aWV3RXZlbnQocGVyY2VudGFnZTogbnVtYmVyLCBzY3J1YmJpbmc6IGJvb2xlYW4pIHtcbiAgICBsZXQgc25hcHBlZE1hcmtlciA9IHRoaXMudGltZWxpbmVNYXJrZXJzSGFuZGxlciAmJiB0aGlzLnRpbWVsaW5lTWFya2Vyc0hhbmRsZXIuZ2V0TWFya2VyQXRQb3NpdGlvbihwZXJjZW50YWdlKTtcblxuICAgIGxldCBzZWVrUG9zaXRpb25QZXJjZW50YWdlID0gcGVyY2VudGFnZTtcblxuICAgIGlmIChzbmFwcGVkTWFya2VyKSB7XG4gICAgICBpZiAoc25hcHBlZE1hcmtlci5kdXJhdGlvbiA+IDApIHtcbiAgICAgICAgaWYgKHBlcmNlbnRhZ2UgPCBzbmFwcGVkTWFya2VyLnBvc2l0aW9uKSB7XG4gICAgICAgICAgLy8gU25hcCB0aGUgcG9zaXRpb24gdG8gdGhlIHN0YXJ0IG9mIHRoZSBpbnRlcnZhbCBpZiB0aGUgc2VlayBpcyB3aXRoaW4gdGhlIGxlZnQgc25hcCBtYXJnaW5cbiAgICAgICAgICAvLyBXZSBrbm93IHRoYXQgd2UgYXJlIHdpdGhpbiBhIHNuYXAgbWFyZ2luIHdoZW4gd2UgYXJlIG91dHNpZGUgdGhlIG1hcmtlciBpbnRlcnZhbCBidXQgc3RpbGxcbiAgICAgICAgICAvLyBoYXZlIGEgc25hcHBlZE1hcmtlclxuICAgICAgICAgIHNlZWtQb3NpdGlvblBlcmNlbnRhZ2UgPSBzbmFwcGVkTWFya2VyLnBvc2l0aW9uO1xuICAgICAgICB9IGVsc2UgaWYgKHBlcmNlbnRhZ2UgPiBzbmFwcGVkTWFya2VyLnBvc2l0aW9uICsgc25hcHBlZE1hcmtlci5kdXJhdGlvbikge1xuICAgICAgICAgIC8vIFNuYXAgdGhlIHBvc2l0aW9uIHRvIHRoZSBlbmQgb2YgdGhlIGludGVydmFsIGlmIHRoZSBzZWVrIGlzIHdpdGhpbiB0aGUgcmlnaHQgc25hcCBtYXJnaW5cbiAgICAgICAgICBzZWVrUG9zaXRpb25QZXJjZW50YWdlID0gc25hcHBlZE1hcmtlci5wb3NpdGlvbiArIHNuYXBwZWRNYXJrZXIuZHVyYXRpb247XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFBvc2l0aW9uIG1hcmtlcnMgYWx3YXlzIHNuYXAgdG8gdGhlaXIgbWFya2VyIHBvc2l0aW9uXG4gICAgICAgIHNlZWtQb3NpdGlvblBlcmNlbnRhZ2UgPSBzbmFwcGVkTWFya2VyLnBvc2l0aW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmxhYmVsKSB7XG4gICAgICB0aGlzLmxhYmVsLmdldERvbUVsZW1lbnQoKS5jc3Moe1xuICAgICAgICAnbGVmdCc6IHNlZWtQb3NpdGlvblBlcmNlbnRhZ2UgKyAnJScsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnNlZWtCYXJFdmVudHMub25TZWVrUHJldmlldy5kaXNwYXRjaCh0aGlzLCB7XG4gICAgICBzY3J1YmJpbmc6IHNjcnViYmluZyxcbiAgICAgIHBvc2l0aW9uOiBzZWVrUG9zaXRpb25QZXJjZW50YWdlLFxuICAgICAgbWFya2VyOiBzbmFwcGVkTWFya2VyLFxuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uU2Vla2VkRXZlbnQocGVyY2VudGFnZTogbnVtYmVyKSB7XG4gICAgdGhpcy5zZWVrQmFyRXZlbnRzLm9uU2Vla2VkLmRpc3BhdGNoKHRoaXMsIHBlcmNlbnRhZ2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiBhIHNjcnViYmluZyBzZWVrIG9wZXJhdGlvbiBpcyBzdGFydGVkLlxuICAgKiBAcmV0dXJucyB7RXZlbnQ8U2Vla0JhciwgTm9BcmdzPn1cbiAgICovXG4gIGdldCBvblNlZWsoKTogRXZlbnQ8U2Vla0JhciwgTm9BcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuc2Vla0JhckV2ZW50cy5vblNlZWsuZ2V0RXZlbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIGR1cmluZyBhIHNjcnViYmluZyBzZWVrICh0byBpbmRpY2F0ZSB0aGF0IHRoZSBzZWVrIHByZXZpZXcsIGkuZS4gdGhlIHZpZGVvIGZyYW1lLFxuICAgKiBzaG91bGQgYmUgdXBkYXRlZCksIG9yIGR1cmluZyBhIG5vcm1hbCBzZWVrIHByZXZpZXcgd2hlbiB0aGUgc2VlayBiYXIgaXMgaG92ZXJlZCAoYW5kIHRoZSBzZWVrIHRhcmdldCxcbiAgICogaS5lLiB0aGUgc2VlayBiYXIgbGFiZWwsIHNob3VsZCBiZSB1cGRhdGVkKS5cbiAgICogQHJldHVybnMge0V2ZW50PFNlZWtCYXIsIFNlZWtQcmV2aWV3RXZlbnRBcmdzPn1cbiAgICovXG4gIGdldCBvblNlZWtQcmV2aWV3KCk6IEV2ZW50PFNlZWtCYXIsIFNlZWtQcmV2aWV3RXZlbnRBcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuc2Vla0JhckV2ZW50cy5vblNlZWtQcmV2aWV3LmdldEV2ZW50KCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgZXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIGEgc2NydWJiaW5nIHNlZWsgaGFzIGZpbmlzaGVkIG9yIHdoZW4gYSBkaXJlY3Qgc2VlayBpcyBpc3N1ZWQuXG4gICAqIEByZXR1cm5zIHtFdmVudDxTZWVrQmFyLCBudW1iZXI+fVxuICAgKi9cbiAgZ2V0IG9uU2Vla2VkKCk6IEV2ZW50PFNlZWtCYXIsIG51bWJlcj4ge1xuICAgIHJldHVybiB0aGlzLnNlZWtCYXJFdmVudHMub25TZWVrZWQuZ2V0RXZlbnQoKTtcbiAgfVxuXG5cbiAgcHJvdGVjdGVkIG9uU2hvd0V2ZW50KCk6IHZvaWQge1xuICAgIHN1cGVyLm9uU2hvd0V2ZW50KCk7XG5cbiAgICAvLyBSZWZyZXNoIHRoZSBwb3NpdGlvbiBvZiB0aGUgcGxheWJhY2sgcG9zaXRpb24gd2hlbiB0aGUgc2VlayBiYXIgYmVjb21lcyB2aXNpYmxlLiBUbyBjb3JyZWN0bHkgc2V0IHRoZSBwb3NpdGlvbixcbiAgICAvLyB0aGUgRE9NIGVsZW1lbnQgbXVzdCBiZSBmdWxseSBpbml0aWFsaXplZCBhbiBoYXZlIGl0cyBzaXplIGNhbGN1bGF0ZWQsIGJlY2F1c2UgdGhlIHBvc2l0aW9uIGlzIHNldCBhcyBhbiBhYnNvbHV0ZVxuICAgIC8vIHZhbHVlIGNhbGN1bGF0ZWQgZnJvbSB0aGUgc2l6ZS4gVGhpcyByZXF1aXJlZCBzaXplIGlzIG5vdCBrbm93biB3aGVuIGl0IGlzIGhpZGRlbi5cbiAgICAvLyBGb3Igc3VjaCBjYXNlcywgd2UgcmVmcmVzaCB0aGUgcG9zaXRpb24gaGVyZSBpbiBvblNob3cgYmVjYXVzZSBoZXJlIGl0IGlzIGd1YXJhbnRlZWQgdGhhdCB0aGUgY29tcG9uZW50IGtub3dzXG4gICAgLy8gaXRzIHNpemUgYW5kIGNhbiBzZXQgdGhlIHBvc2l0aW9uIGNvcnJlY3RseS5cbiAgICB0aGlzLnJlZnJlc2hQbGF5YmFja1Bvc2l0aW9uKCk7XG4gIH1cblxuIC8qKlxuICAgKiBDaGVja3MgaWYgVG91Y2hFdmVudCBpcyBzdXBwb3J0ZWQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIFRvdWNoRXZlbnQgbm90IHVuZGVmaW5lZCwgZWxzZSBmYWxzZVxuICAgKi9cbiAgaXNUb3VjaEV2ZW50KGU6IFVJRXZlbnQpOiBlIGlzIFRvdWNoRXZlbnQge1xuICAgIHJldHVybiB3aW5kb3cuVG91Y2hFdmVudCAmJiBlIGluc3RhbmNlb2YgVG91Y2hFdmVudDtcbiAgfVxufVxuIiwiaW1wb3J0IHtQbGF5ZXJBUEl9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNaW5CdWZmZXJMZXZlbChwbGF5ZXI6IFBsYXllckFQSSk6IG51bWJlciB7XG5cbiAgICBjb25zdCBwbGF5ZXJEdXJhdGlvbiA9IHBsYXllci5nZXREdXJhdGlvbigpO1xuXG4gICAgY29uc3QgdmlkZW9CdWZmZXJMZW5ndGggPSBwbGF5ZXIuZ2V0VmlkZW9CdWZmZXJMZW5ndGgoKTtcbiAgICBjb25zdCBhdWRpb0J1ZmZlckxlbmd0aCA9IHBsYXllci5nZXRBdWRpb0J1ZmZlckxlbmd0aCgpO1xuICAgIC8vIENhbGN1bGF0ZSB0aGUgYnVmZmVyIGxlbmd0aCB3aGljaCBpcyB0aGUgc21hbGxlciBsZW5ndGggb2YgdGhlIGF1ZGlvIGFuZCB2aWRlbyBidWZmZXJzLiBJZiBvbmUgb2YgdGhlc2VcbiAgICAvLyBidWZmZXJzIGlzIG5vdCBhdmFpbGFibGUsIHdlIHNldCBpdCdzIHZhbHVlIHRvIE1BWF9WQUxVRSB0byBtYWtlIHN1cmUgdGhhdCB0aGUgb3RoZXIgcmVhbCB2YWx1ZSBpcyB0YWtlblxuICAgIC8vIGFzIHRoZSBidWZmZXIgbGVuZ3RoLlxuICAgIGxldCBidWZmZXJMZW5ndGggPSBNYXRoLm1pbihcbiAgICAgICAgdmlkZW9CdWZmZXJMZW5ndGggIT0gbnVsbCA/IHZpZGVvQnVmZmVyTGVuZ3RoIDogTnVtYmVyLk1BWF9WQUxVRSxcbiAgICAgICAgYXVkaW9CdWZmZXJMZW5ndGggIT0gbnVsbCA/IGF1ZGlvQnVmZmVyTGVuZ3RoIDogTnVtYmVyLk1BWF9WQUxVRSk7XG4gICAgLy8gSWYgYm90aCBidWZmZXIgbGVuZ3RocyBhcmUgbWlzc2luZywgd2Ugc2V0IHRoZSBidWZmZXIgbGVuZ3RoIHRvIHplcm9cbiAgICBpZiAoYnVmZmVyTGVuZ3RoID09PSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgIGJ1ZmZlckxlbmd0aCA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIDEwMCAvIHBsYXllckR1cmF0aW9uICogYnVmZmVyTGVuZ3RoO1xufVxuIiwiaW1wb3J0IHsgVUlVdGlscyB9IGZyb20gJy4uL3VpdXRpbHMnO1xuaW1wb3J0IHsgRE9NIH0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBWb2x1bWVDb250cm9sbGVyIH0gZnJvbSAnLi4vdm9sdW1lY29udHJvbGxlcic7XG5cbmV4cG9ydCBlbnVtIFNlZWtCYXJUeXBlIHtcbiAgVm9kLFxuICBMaXZlLFxuICBWb2x1bWUsXG59XG5cbmludGVyZmFjZSBSYW5nZSB7XG4gIG1pbjogbnVtYmVyO1xuICBtYXg6IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIEtleVN0ZXBJbmNyZW1lbnRzQ29uZmlnIHtcbiAgbGVmdFJpZ2h0OiBudW1iZXI7XG4gIHVwRG93bjogbnVtYmVyO1xufVxuXG5jb25zdCBjb2VyY2VWYWx1ZUludG9SYW5nZSA9IChcbiAgdmFsdWU6IG51bWJlcixcbiAgcmFuZ2U6IFJhbmdlLFxuICBjYjogKHZhbHVlOiBudW1iZXIpID0+IHZvaWQsXG4pID0+IHtcbiAgaWYgKHZhbHVlIDwgcmFuZ2UubWluKSB7XG4gICAgY2IocmFuZ2UubWluKTtcbiAgfSBlbHNlIGlmICh2YWx1ZSA+IHJhbmdlLm1heCkge1xuICAgIGNiKHJhbmdlLm1heCk7XG4gIH0gZWxzZSB7XG4gICAgY2IodmFsdWUpO1xuICB9XG59O1xuXG5leHBvcnQgY2xhc3MgU2Vla0JhckNvbnRyb2xsZXIge1xuICBwcm90ZWN0ZWQga2V5U3RlcEluY3JlbWVudHM6IEtleVN0ZXBJbmNyZW1lbnRzQ29uZmlnO1xuICBwcm90ZWN0ZWQgcGxheWVyOiBQbGF5ZXJBUEk7XG4gIHByb3RlY3RlZCB2b2x1bWVDb250cm9sbGVyOiBWb2x1bWVDb250cm9sbGVyO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGtleVN0ZXBJbmNyZW1lbnRzOiBLZXlTdGVwSW5jcmVtZW50c0NvbmZpZyxcbiAgICBwbGF5ZXI6IFBsYXllckFQSSxcbiAgICB2b2x1bWVDb250cm9sbGVyOiBWb2x1bWVDb250cm9sbGVyLFxuICApIHtcbiAgICB0aGlzLmtleVN0ZXBJbmNyZW1lbnRzID0ga2V5U3RlcEluY3JlbWVudHM7XG4gICAgdGhpcy5wbGF5ZXIgPSBwbGF5ZXI7XG4gICAgdGhpcy52b2x1bWVDb250cm9sbGVyID0gdm9sdW1lQ29udHJvbGxlcjtcbiAgfVxuXG4gIHByb3RlY3RlZCBhcnJvd0tleUNvbnRyb2xzKFxuICAgIGN1cnJlbnRWYWx1ZTogbnVtYmVyLFxuICAgIHJhbmdlOiBSYW5nZSxcbiAgICB2YWx1ZVVwZGF0ZTogKHZhbHVlOiBudW1iZXIpID0+IHZvaWQsXG4gICkge1xuICAgIGNvbnN0IGNvbnRyb2xWYWx1ZSA9IE1hdGguZmxvb3IoY3VycmVudFZhbHVlKTtcblxuICAgIHJldHVybiB7XG4gICAgICBsZWZ0OiAoKSA9PiBjb2VyY2VWYWx1ZUludG9SYW5nZShjb250cm9sVmFsdWUgLSB0aGlzLmtleVN0ZXBJbmNyZW1lbnRzLmxlZnRSaWdodCwgcmFuZ2UsIHZhbHVlVXBkYXRlKSxcbiAgICAgIHJpZ2h0OiAoKSA9PiBjb2VyY2VWYWx1ZUludG9SYW5nZShjb250cm9sVmFsdWUgKyB0aGlzLmtleVN0ZXBJbmNyZW1lbnRzLmxlZnRSaWdodCwgcmFuZ2UsIHZhbHVlVXBkYXRlKSxcbiAgICAgIHVwOiAoKSA9PiBjb2VyY2VWYWx1ZUludG9SYW5nZShjb250cm9sVmFsdWUgKyB0aGlzLmtleVN0ZXBJbmNyZW1lbnRzLnVwRG93biwgcmFuZ2UsIHZhbHVlVXBkYXRlKSxcbiAgICAgIGRvd246ICgpID0+IGNvZXJjZVZhbHVlSW50b1JhbmdlKGNvbnRyb2xWYWx1ZSAtIHRoaXMua2V5U3RlcEluY3JlbWVudHMudXBEb3duLCByYW5nZSwgdmFsdWVVcGRhdGUpLFxuICAgICAgaG9tZTogKCkgPT4gY29lcmNlVmFsdWVJbnRvUmFuZ2UocmFuZ2UubWluLCByYW5nZSwgdmFsdWVVcGRhdGUpLFxuICAgICAgZW5kOiAoKSA9PiBjb2VyY2VWYWx1ZUludG9SYW5nZShyYW5nZS5tYXgsIHJhbmdlLCB2YWx1ZVVwZGF0ZSksXG4gICAgfTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzZWVrQmFyQ29udHJvbHModHlwZTogU2Vla0JhclR5cGUpIHtcbiAgICBpZiAodHlwZSA9PT0gU2Vla0JhclR5cGUuTGl2ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXJyb3dLZXlDb250cm9scyh0aGlzLnBsYXllci5nZXRUaW1lU2hpZnQoKSwgeyBtaW46IHRoaXMucGxheWVyLmdldE1heFRpbWVTaGlmdCgpLCBtYXg6IDAgfSwgdGhpcy5wbGF5ZXIudGltZVNoaWZ0KTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFNlZWtCYXJUeXBlLlZvZCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXJyb3dLZXlDb250cm9scyh0aGlzLnBsYXllci5nZXRDdXJyZW50VGltZSgpLCB7IG1pbjogMCwgbWF4OiB0aGlzLnBsYXllci5nZXREdXJhdGlvbigpIH0sIHRoaXMucGxheWVyLnNlZWspO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gU2Vla0JhclR5cGUuVm9sdW1lICYmIHRoaXMudm9sdW1lQ29udHJvbGxlciAhPSBudWxsKSB7XG4gICAgICBjb25zdCB2b2x1bWVUcmFuc2l0aW9uID0gdGhpcy52b2x1bWVDb250cm9sbGVyLnN0YXJ0VHJhbnNpdGlvbigpO1xuICAgICAgcmV0dXJuIHRoaXMuYXJyb3dLZXlDb250cm9scyh0aGlzLnBsYXllci5nZXRWb2x1bWUoKSwgeyBtaW46IDAsIG1heDogMTAwIH0sIHZvbHVtZVRyYW5zaXRpb24uZmluaXNoLmJpbmQodm9sdW1lVHJhbnNpdGlvbikpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzZXRTZWVrQmFyQ29udHJvbHMoZG9tRWxlbWVudDogRE9NLCB0eXBlOiAoKSA9PiBTZWVrQmFyVHlwZSkge1xuICAgIGRvbUVsZW1lbnQub24oJ2tleWRvd24nLCAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgY29uc3QgY29udHJvbHMgPSB0aGlzLnNlZWtCYXJDb250cm9scyh0eXBlKCkpO1xuICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSBVSVV0aWxzLktleUNvZGUuTGVmdEFycm93OiB7XG4gICAgICAgICAgY29udHJvbHMubGVmdCgpO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFVJVXRpbHMuS2V5Q29kZS5SaWdodEFycm93OiB7XG4gICAgICAgICAgY29udHJvbHMucmlnaHQoKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBVSVV0aWxzLktleUNvZGUuVXBBcnJvdzoge1xuICAgICAgICAgIGNvbnRyb2xzLnVwKCk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgVUlVdGlscy5LZXlDb2RlLkRvd25BcnJvdzoge1xuICAgICAgICAgIGNvbnRyb2xzLmRvd24oKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBVSVV0aWxzLktleUNvZGUuSG9tZToge1xuICAgICAgICAgIGNvbnRyb2xzLmhvbWUoKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBVSVV0aWxzLktleUNvZGUuRW5kOiB7XG4gICAgICAgICAgY29udHJvbHMuZW5kKCk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgVUlVdGlscy5LZXlDb2RlLlNwYWNlOiB7XG4gICAgICAgICAgdGhpcy5wbGF5ZXIuaXNQbGF5aW5nKCkgPyB0aGlzLnBsYXllci5wYXVzZSgpIDogdGhpcy5wbGF5ZXIucGxheSgpO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59IiwiaW1wb3J0IHtDb250YWluZXIsIENvbnRhaW5lckNvbmZpZ30gZnJvbSAnLi9jb250YWluZXInO1xuaW1wb3J0IHtMYWJlbCwgTGFiZWxDb25maWd9IGZyb20gJy4vbGFiZWwnO1xuaW1wb3J0IHtDb21wb25lbnQsIENvbXBvbmVudENvbmZpZ30gZnJvbSAnLi9jb21wb25lbnQnO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHtTdHJpbmdVdGlsc30gZnJvbSAnLi4vc3RyaW5ndXRpbHMnO1xuaW1wb3J0IHtJbWFnZUxvYWRlcn0gZnJvbSAnLi4vaW1hZ2Vsb2FkZXInO1xuaW1wb3J0IHtDc3NQcm9wZXJ0aWVzfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHsgUGxheWVyQVBJLCBUaHVtYm5haWwgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgU2Vla0JhciwgU2Vla1ByZXZpZXdFdmVudEFyZ3MgfSBmcm9tICcuL3NlZWtiYXInO1xuaW1wb3J0IHsgUGxheWVyVXRpbHMgfSBmcm9tICcuLi9wbGF5ZXJ1dGlscyc7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIGEge0BsaW5rIFNlZWtCYXJMYWJlbH0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2Vla0JhckxhYmVsQ29uZmlnIGV4dGVuZHMgQ29udGFpbmVyQ29uZmlnIHtcbiAgLy8gbm90aGluZyB5ZXRcbn1cblxuLyoqXG4gKiBBIGxhYmVsIGZvciBhIHtAbGluayBTZWVrQmFyfSB0aGF0IGNhbiBkaXNwbGF5IHRoZSBzZWVrIHRhcmdldCB0aW1lLCBhIHRodW1ibmFpbCwgYW5kIHRpdGxlIChlLmcuIGNoYXB0ZXIgdGl0bGUpLlxuICovXG5leHBvcnQgY2xhc3MgU2Vla0JhckxhYmVsIGV4dGVuZHMgQ29udGFpbmVyPFNlZWtCYXJMYWJlbENvbmZpZz4ge1xuXG4gIHByaXZhdGUgdGltZUxhYmVsOiBMYWJlbDxMYWJlbENvbmZpZz47XG4gIHByaXZhdGUgdGl0bGVMYWJlbDogTGFiZWw8TGFiZWxDb25maWc+O1xuICBwcml2YXRlIHRodW1ibmFpbDogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz47XG5cbiAgcHJpdmF0ZSB0aHVtYm5haWxJbWFnZUxvYWRlcjogSW1hZ2VMb2FkZXI7XG5cbiAgcHJpdmF0ZSB0aW1lRm9ybWF0OiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBhcHBsaWVkTWFya2VyQ3NzQ2xhc3Nlczogc3RyaW5nW10gPSBbXTtcbiAgcHJpdmF0ZSBwbGF5ZXI6IFBsYXllckFQSTtcbiAgcHJpdmF0ZSB1aU1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU2Vla0JhckxhYmVsQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy50aW1lTGFiZWwgPSBuZXcgTGFiZWwoeyBjc3NDbGFzc2VzOiBbJ3NlZWtiYXItbGFiZWwtdGltZSddIH0pO1xuICAgIHRoaXMudGl0bGVMYWJlbCA9IG5ldyBMYWJlbCh7IGNzc0NsYXNzZXM6IFsnc2Vla2Jhci1sYWJlbC10aXRsZSddIH0pO1xuICAgIHRoaXMudGh1bWJuYWlsID0gbmV3IENvbXBvbmVudCh7IGNzc0NsYXNzZXM6IFsnc2Vla2Jhci10aHVtYm5haWwnXSwgcm9sZTogJ2ltZycgfSk7XG4gICAgdGhpcy50aHVtYm5haWxJbWFnZUxvYWRlciA9IG5ldyBJbWFnZUxvYWRlcigpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1zZWVrYmFyLWxhYmVsJyxcbiAgICAgIGNvbXBvbmVudHM6IFtuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHRoaXMudGh1bWJuYWlsLFxuICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgY29tcG9uZW50czogW3RoaXMudGl0bGVMYWJlbCwgdGhpcy50aW1lTGFiZWxdLFxuICAgICAgICAgICAgY3NzQ2xhc3M6ICdzZWVrYmFyLWxhYmVsLW1ldGFkYXRhJyxcbiAgICAgICAgICB9KV0sXG4gICAgICAgIGNzc0NsYXNzOiAnc2Vla2Jhci1sYWJlbC1pbm5lcicsXG4gICAgICB9KV0sXG4gICAgICBoaWRkZW46IHRydWUsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMucGxheWVyID0gcGxheWVyO1xuICAgIHRoaXMudWlNYW5hZ2VyID0gdWltYW5hZ2VyO1xuICAgIHVpbWFuYWdlci5vblNlZWtQcmV2aWV3LnN1YnNjcmliZVJhdGVMaW1pdGVkKHRoaXMuaGFuZGxlU2Vla1ByZXZpZXcsIDEwMCk7XG5cbiAgICBsZXQgaW5pdCA9ICgpID0+IHtcbiAgICAgIC8vIFNldCB0aW1lIGZvcm1hdCBkZXBlbmRpbmcgb24gc291cmNlIGR1cmF0aW9uXG4gICAgICB0aGlzLnRpbWVGb3JtYXQgPSBNYXRoLmFicyhwbGF5ZXIuaXNMaXZlKCkgPyBwbGF5ZXIuZ2V0TWF4VGltZVNoaWZ0KCkgOiBwbGF5ZXIuZ2V0RHVyYXRpb24oKSkgPj0gMzYwMCA/XG4gICAgICAgIFN0cmluZ1V0aWxzLkZPUk1BVF9ISE1NU1MgOiBTdHJpbmdVdGlscy5GT1JNQVRfTU1TUztcbiAgICAgIC8vIFNldCBpbml0aWFsIHN0YXRlIG9mIHRpdGxlIGFuZCB0aHVtYm5haWwgdG8gaGFuZGxlIHNvdXJjZUxvYWRlZCB3aGVuIHN3aXRjaGluZyB0byBhIGxpdmUtc3RyZWFtXG4gICAgICB0aGlzLnNldFRpdGxlVGV4dChudWxsKTtcbiAgICAgIHRoaXMuc2V0VGh1bWJuYWlsKG51bGwpO1xuICAgIH07XG5cbiAgICB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUoaW5pdCk7XG4gICAgaW5pdCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVTZWVrUHJldmlldyA9IChzZW5kZXI6IFNlZWtCYXIsIGFyZ3M6IFNlZWtQcmV2aWV3RXZlbnRBcmdzKSA9PiB7XG4gICAgaWYgKHRoaXMucGxheWVyLmlzTGl2ZSgpKSB7XG4gICAgICBsZXQgbWF4VGltZVNoaWZ0ID0gdGhpcy5wbGF5ZXIuZ2V0TWF4VGltZVNoaWZ0KCk7XG4gICAgICBsZXQgdGltZVNoaWZ0UHJldmlldyA9IG1heFRpbWVTaGlmdCAtIG1heFRpbWVTaGlmdCAqIChhcmdzLnBvc2l0aW9uIC8gMTAwKTtcblxuICAgICAgdGhpcy5zZXRUaW1lKHRpbWVTaGlmdFByZXZpZXcpO1xuXG4gICAgICAvLyBJbiBjYXNlIG9mIGEgbGl2ZSBzdHJlYW0gdGhlIHBsYXllciBleHBlY3RzIHRoZSB0aW1lIHBhc3NlZCBpbnRvIHRoZSBnZXRUaHVtYm5haWwgYXMgYSB3YWxsQ2xvY2tUaW1lIGFuZCBub3RcbiAgICAgIC8vIGFzIGEgcmVsYXRpdmUgdGltZVNoaWZ0IHZhbHVlLlxuICAgICAgY29uc3QgY29udmVydFRpbWVTaGlmdFByZXZpZXdUb1dhbGxDbG9ja1RpbWUgPSAodGFyZ2V0VGltZVNoaWZ0OiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGltZVNoaWZ0ID0gdGhpcy5wbGF5ZXIuZ2V0VGltZVNoaWZ0KCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gdGhpcy5wbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKTtcblxuICAgICAgICBjb25zdCB3YWxsQ2xvY2tUaW1lT2ZMaXZlRWRnZSA9IGN1cnJlbnRUaW1lIC0gY3VycmVudFRpbWVTaGlmdDtcbiAgICAgICAgcmV0dXJuIHdhbGxDbG9ja1RpbWVPZkxpdmVFZGdlICsgdGFyZ2V0VGltZVNoaWZ0O1xuICAgICAgfTtcblxuICAgICAgY29uc3Qgd2FsbENsb2NrVGltZSA9IGNvbnZlcnRUaW1lU2hpZnRQcmV2aWV3VG9XYWxsQ2xvY2tUaW1lKHRpbWVTaGlmdFByZXZpZXcpO1xuICAgICAgdGhpcy5zZXRUaHVtYm5haWwodGhpcy5wbGF5ZXIuZ2V0VGh1bWJuYWlsKHdhbGxDbG9ja1RpbWUpKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdGltZSA9IHRoaXMucGxheWVyLmdldER1cmF0aW9uKCkgKiAoYXJncy5wb3NpdGlvbiAvIDEwMCk7XG4gICAgICB0aGlzLnNldFRpbWUodGltZSk7XG5cbiAgICAgIGNvbnN0IHNlZWthYmxlUmFuZ2VTdGFydCA9IFBsYXllclV0aWxzLmdldFNlZWthYmxlUmFuZ2VTdGFydCh0aGlzLnBsYXllciwgMCk7XG4gICAgICBjb25zdCBhYnNvbHV0ZVNlZWtUYXJnZXQgPSB0aW1lICsgc2Vla2FibGVSYW5nZVN0YXJ0O1xuICAgICAgdGhpcy5zZXRUaHVtYm5haWwodGhpcy5wbGF5ZXIuZ2V0VGh1bWJuYWlsKGFic29sdXRlU2Vla1RhcmdldCkpO1xuICAgIH1cblxuICAgIGlmIChhcmdzLm1hcmtlcikge1xuICAgICAgdGhpcy5zZXRUaXRsZVRleHQoYXJncy5tYXJrZXIubWFya2VyLnRpdGxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRUaXRsZVRleHQobnVsbCk7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIENTUyBjbGFzc2VzIGZyb20gcHJldmlvdXMgbWFya2VyXG4gICAgaWYgKHRoaXMuYXBwbGllZE1hcmtlckNzc0NsYXNzZXMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3ModGhpcy5hcHBsaWVkTWFya2VyQ3NzQ2xhc3Nlcy5qb2luKCcgJykpO1xuICAgICAgdGhpcy5hcHBsaWVkTWFya2VyQ3NzQ2xhc3NlcyA9IFtdO1xuICAgIH1cblxuICAgIC8vIEFkZCBDU1MgY2xhc3NlcyBvZiBjdXJyZW50IG1hcmtlclxuICAgIGlmIChhcmdzLm1hcmtlcikge1xuICAgICAgY29uc3QgY3NzQ2xhc3NlcyA9IChhcmdzLm1hcmtlci5tYXJrZXIuY3NzQ2xhc3NlcyB8fCBbXSkubWFwKGNzc0NsYXNzID0+IHRoaXMucHJlZml4Q3NzKGNzc0NsYXNzKSk7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hZGRDbGFzcyhjc3NDbGFzc2VzLmpvaW4oJyAnKSk7XG4gICAgICB0aGlzLmFwcGxpZWRNYXJrZXJDc3NDbGFzc2VzID0gY3NzQ2xhc3NlcztcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHMgYXJiaXRyYXJ5IHRleHQgb24gdGhlIGxhYmVsLlxuICAgKiBAcGFyYW0gdGV4dCB0aGUgdGV4dCB0byBzaG93IG9uIHRoZSBsYWJlbFxuICAgKi9cbiAgc2V0VGV4dCh0ZXh0OiBzdHJpbmcpIHtcbiAgICB0aGlzLnRpbWVMYWJlbC5zZXRUZXh0KHRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgYSB0aW1lIHRvIGJlIGRpc3BsYXllZCBvbiB0aGUgbGFiZWwuXG4gICAqIEBwYXJhbSBzZWNvbmRzIHRoZSB0aW1lIGluIHNlY29uZHMgdG8gZGlzcGxheSBvbiB0aGUgbGFiZWxcbiAgICovXG4gIHNldFRpbWUoc2Vjb25kczogbnVtYmVyKSB7XG4gICAgdGhpcy5zZXRUZXh0KFN0cmluZ1V0aWxzLnNlY29uZHNUb1RpbWUoc2Vjb25kcywgdGhpcy50aW1lRm9ybWF0KSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgdGV4dCBvbiB0aGUgdGl0bGUgbGFiZWwuXG4gICAqIEBwYXJhbSB0ZXh0IHRoZSB0ZXh0IHRvIHNob3cgb24gdGhlIGxhYmVsXG4gICAqL1xuICBzZXRUaXRsZVRleHQodGV4dCA9ICcnKSB7XG4gICAgdGhpcy50aXRsZUxhYmVsLnNldFRleHQodGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBvciByZW1vdmVzIGEgdGh1bWJuYWlsIG9uIHRoZSBsYWJlbC5cbiAgICogQHBhcmFtIHRodW1ibmFpbCB0aGUgdGh1bWJuYWlsIHRvIGRpc3BsYXkgb24gdGhlIGxhYmVsIG9yIG51bGwgdG8gcmVtb3ZlIGEgZGlzcGxheWVkIHRodW1ibmFpbFxuICAgKi9cbiAgc2V0VGh1bWJuYWlsKHRodW1ibmFpbDogVGh1bWJuYWlsID0gbnVsbCkge1xuICAgIGxldCB0aHVtYm5haWxFbGVtZW50ID0gdGhpcy50aHVtYm5haWwuZ2V0RG9tRWxlbWVudCgpO1xuXG4gICAgaWYgKHRodW1ibmFpbCA9PSBudWxsKSB7XG4gICAgICB0aHVtYm5haWxFbGVtZW50LmNzcyh7XG4gICAgICAgICdiYWNrZ3JvdW5kLWltYWdlJzogbnVsbCxcbiAgICAgICAgJ2Rpc3BsYXknOiBudWxsLFxuICAgICAgICAnd2lkdGgnOiBudWxsLFxuICAgICAgICAnaGVpZ2h0JzogbnVsbCxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIFdlIHVzZSB0aGUgdGh1bWJuYWlsIGltYWdlIGxvYWRlciB0byBtYWtlIHN1cmUgdGhlIHRodW1ibmFpbCBpcyBsb2FkZWQgYW5kIGl0J3Mgc2l6ZSBpcyBrbm93biBiZWZvcmUgYmUgY2FuXG4gICAgICAvLyBjYWxjdWxhdGUgdGhlIENTUyBwcm9wZXJ0aWVzIGFuZCBzZXQgdGhlbSBvbiB0aGUgZWxlbWVudC5cbiAgICAgIHRoaXMudGh1bWJuYWlsSW1hZ2VMb2FkZXIubG9hZCh0aHVtYm5haWwudXJsLCAodXJsLCB3aWR0aCwgaGVpZ2h0KSA9PiB7XG4gICAgICAgIC8vIGNhbiBiZSBjaGVja2VkIGxpa2UgdGhhdCBiZWNhdXNlIHgveS93L2ggYXJlIGVpdGhlciBhbGwgcHJlc2VudCBvciBub25lXG4gICAgICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9tZWRpYS1mcmFncy8jbmFtaW5nLXNwYWNlXG4gICAgICAgIGlmICh0aHVtYm5haWwueCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGh1bWJuYWlsRWxlbWVudC5jc3ModGhpcy50aHVtYm5haWxDc3NTcHJpdGUodGh1bWJuYWlsLCB3aWR0aCwgaGVpZ2h0KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGh1bWJuYWlsRWxlbWVudC5jc3ModGhpcy50aHVtYm5haWxDc3NTaW5nbGVJbWFnZSh0aHVtYm5haWwsIHdpZHRoLCBoZWlnaHQpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB0aHVtYm5haWxDc3NTcHJpdGUodGh1bWJuYWlsOiBUaHVtYm5haWwsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogQ3NzUHJvcGVydGllcyB7XG4gICAgbGV0IHRodW1ibmFpbENvdW50WCA9IHdpZHRoIC8gdGh1bWJuYWlsLndpZHRoO1xuICAgIGxldCB0aHVtYm5haWxDb3VudFkgPSBoZWlnaHQgLyB0aHVtYm5haWwuaGVpZ2h0O1xuXG4gICAgbGV0IHRodW1ibmFpbEluZGV4WCA9IHRodW1ibmFpbC54IC8gdGh1bWJuYWlsLndpZHRoO1xuICAgIGxldCB0aHVtYm5haWxJbmRleFkgPSB0aHVtYm5haWwueSAvIHRodW1ibmFpbC5oZWlnaHQ7XG5cbiAgICBsZXQgc2l6ZVggPSAxMDAgKiB0aHVtYm5haWxDb3VudFg7XG4gICAgbGV0IHNpemVZID0gMTAwICogdGh1bWJuYWlsQ291bnRZO1xuXG4gICAgbGV0IG9mZnNldFggPSAxMDAgKiB0aHVtYm5haWxJbmRleFg7XG4gICAgbGV0IG9mZnNldFkgPSAxMDAgKiB0aHVtYm5haWxJbmRleFk7XG5cbiAgICBsZXQgYXNwZWN0UmF0aW8gPSAxIC8gdGh1bWJuYWlsLndpZHRoICogdGh1bWJuYWlsLmhlaWdodDtcblxuICAgIC8vIFRoZSB0aHVtYm5haWwgc2l6ZSBpcyBzZXQgYnkgc2V0dGluZyB0aGUgQ1NTICd3aWR0aCcgYW5kICdwYWRkaW5nLWJvdHRvbScgcHJvcGVydGllcy4gJ3BhZGRpbmctYm90dG9tJyBpc1xuICAgIC8vIHVzZWQgYmVjYXVzZSBpdCBpcyByZWxhdGl2ZSB0byB0aGUgd2lkdGggYW5kIGNhbiBiZSB1c2VkIHRvIHNldCB0aGUgYXNwZWN0IHJhdGlvIG9mIHRoZSB0aHVtYm5haWwuXG4gICAgLy8gQSBkZWZhdWx0IHZhbHVlIGZvciB3aWR0aCBpcyBzZXQgaW4gdGhlIHN0eWxlc2hlZXQgYW5kIGNhbiBiZSBvdmVyd3JpdHRlbiBmcm9tIHRoZXJlIG9yIGFueXdoZXJlIGVsc2UuXG4gICAgcmV0dXJuIHtcbiAgICAgICdkaXNwbGF5JzogJ2luaGVyaXQnLFxuICAgICAgJ2JhY2tncm91bmQtaW1hZ2UnOiBgdXJsKCR7dGh1bWJuYWlsLnVybH0pYCxcbiAgICAgICdwYWRkaW5nLWJvdHRvbSc6IGAkezEwMCAqIGFzcGVjdFJhdGlvfSVgLFxuICAgICAgJ2JhY2tncm91bmQtc2l6ZSc6IGAke3NpemVYfSUgJHtzaXplWX0lYCxcbiAgICAgICdiYWNrZ3JvdW5kLXBvc2l0aW9uJzogYC0ke29mZnNldFh9JSAtJHtvZmZzZXRZfSVgLFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIHRodW1ibmFpbENzc1NpbmdsZUltYWdlKHRodW1ibmFpbDogVGh1bWJuYWlsLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IENzc1Byb3BlcnRpZXMge1xuICAgIGxldCBhc3BlY3RSYXRpbyA9IDEgLyB3aWR0aCAqIGhlaWdodDtcblxuICAgIHJldHVybiB7XG4gICAgICAnZGlzcGxheSc6ICdpbmhlcml0JyxcbiAgICAgICdiYWNrZ3JvdW5kLWltYWdlJzogYHVybCgke3RodW1ibmFpbC51cmx9KWAsXG4gICAgICAncGFkZGluZy1ib3R0b20nOiBgJHsxMDAgKiBhc3BlY3RSYXRpb30lYCxcbiAgICAgICdiYWNrZ3JvdW5kLXNpemUnOiBgMTAwJSAxMDAlYCxcbiAgICAgICdiYWNrZ3JvdW5kLXBvc2l0aW9uJzogYDAgMGAsXG4gICAgfTtcbiAgfVxuXG4gIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgc3VwZXIucmVsZWFzZSgpO1xuXG4gICAgdGhpcy51aU1hbmFnZXIub25TZWVrUHJldmlldy51bnN1YnNjcmliZSh0aGlzLmhhbmRsZVNlZWtQcmV2aWV3KTtcbiAgfVxufVxuIiwiaW1wb3J0IHtMaXN0U2VsZWN0b3IsIExpc3RTZWxlY3RvckNvbmZpZ30gZnJvbSAnLi9saXN0c2VsZWN0b3InO1xuaW1wb3J0IHtET019IGZyb20gJy4uL2RvbSc7XG5pbXBvcnQgeyBpMThuLCBMb2NhbGl6YWJsZVRleHQgfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBzaW1wbGUgc2VsZWN0IGJveCBwcm92aWRpbmcgdGhlIHBvc3NpYmlsaXR5IHRvIHNlbGVjdCBhIHNpbmdsZSBpdGVtIG91dCBvZiBhIGxpc3Qgb2YgYXZhaWxhYmxlIGl0ZW1zLlxuICpcbiAqIERPTSBleGFtcGxlOlxuICogPGNvZGU+XG4gKiAgICAgPHNlbGVjdCBjbGFzcz0ndWktc2VsZWN0Ym94Jz5cbiAqICAgICAgICAgPG9wdGlvbiB2YWx1ZT0na2V5Jz5sYWJlbDwvb3B0aW9uPlxuICogICAgICAgICAuLi5cbiAqICAgICA8L3NlbGVjdD5cbiAqIDwvY29kZT5cbiAqL1xuXG5leHBvcnQgY2xhc3MgU2VsZWN0Qm94IGV4dGVuZHMgTGlzdFNlbGVjdG9yPExpc3RTZWxlY3RvckNvbmZpZz4ge1xuXG4gIHByaXZhdGUgc2VsZWN0RWxlbWVudDogRE9NO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogTGlzdFNlbGVjdG9yQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1zZWxlY3Rib3gnLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0b0RvbUVsZW1lbnQoKTogRE9NIHtcbiAgICBsZXQgc2VsZWN0RWxlbWVudCA9IG5ldyBET00oJ3NlbGVjdCcsIHtcbiAgICAgICdpZCc6IHRoaXMuY29uZmlnLmlkLFxuICAgICAgJ2NsYXNzJzogdGhpcy5nZXRDc3NDbGFzc2VzKCksXG4gICAgICAnYXJpYS1sYWJlbCc6IGkxOG4ucGVyZm9ybUxvY2FsaXphdGlvbih0aGlzLmNvbmZpZy5hcmlhTGFiZWwpLFxuICAgIH0pO1xuXG4gICAgdGhpcy5zZWxlY3RFbGVtZW50ID0gc2VsZWN0RWxlbWVudDtcbiAgICB0aGlzLnVwZGF0ZURvbUl0ZW1zKCk7XG5cbiAgICBzZWxlY3RFbGVtZW50Lm9uKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICBsZXQgdmFsdWUgPSBzZWxlY3RFbGVtZW50LnZhbCgpO1xuICAgICAgdGhpcy5vbkl0ZW1TZWxlY3RlZEV2ZW50KHZhbHVlLCBmYWxzZSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2VsZWN0RWxlbWVudDtcbiAgfVxuXG4gIHByb3RlY3RlZCB1cGRhdGVEb21JdGVtcyhzZWxlY3RlZFZhbHVlOiBzdHJpbmcgPSBudWxsKSB7XG4gICAgLy8gRGVsZXRlIGFsbCBjaGlsZHJlblxuICAgIHRoaXMuc2VsZWN0RWxlbWVudC5lbXB0eSgpO1xuXG4gICAgLy8gQWRkIHVwZGF0ZWQgY2hpbGRyZW5cbiAgICBmb3IgKGxldCBpdGVtIG9mIHRoaXMuaXRlbXMpIHtcbiAgICAgIGxldCBvcHRpb25FbGVtZW50ID0gbmV3IERPTSgnb3B0aW9uJywge1xuICAgICAgICAndmFsdWUnOiBTdHJpbmcoaXRlbS5rZXkpLFxuICAgICAgfSkuaHRtbChpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24oaXRlbS5sYWJlbCkpO1xuXG4gICAgICBpZiAoaXRlbS5rZXkgPT09IFN0cmluZyhzZWxlY3RlZFZhbHVlKSkgeyAvLyBjb252ZXJ0IHNlbGVjdGVkVmFsdWUgdG8gc3RyaW5nIHRvIGNhdGNoICdudWxsJy9udWxsIGNhc2VcbiAgICAgICAgb3B0aW9uRWxlbWVudC5hdHRyKCdzZWxlY3RlZCcsICdzZWxlY3RlZCcpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNlbGVjdEVsZW1lbnQuYXBwZW5kKG9wdGlvbkVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBvbkl0ZW1BZGRlZEV2ZW50KHZhbHVlOiBzdHJpbmcpIHtcbiAgICBzdXBlci5vbkl0ZW1BZGRlZEV2ZW50KHZhbHVlKTtcbiAgICB0aGlzLnVwZGF0ZURvbUl0ZW1zKHRoaXMuc2VsZWN0ZWRJdGVtKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkl0ZW1SZW1vdmVkRXZlbnQodmFsdWU6IHN0cmluZykge1xuICAgIHN1cGVyLm9uSXRlbVJlbW92ZWRFdmVudCh2YWx1ZSk7XG4gICAgdGhpcy51cGRhdGVEb21JdGVtcyh0aGlzLnNlbGVjdGVkSXRlbSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25JdGVtU2VsZWN0ZWRFdmVudCh2YWx1ZTogc3RyaW5nLCB1cGRhdGVEb21JdGVtczogYm9vbGVhbiA9IHRydWUpIHtcbiAgICBzdXBlci5vbkl0ZW1TZWxlY3RlZEV2ZW50KHZhbHVlKTtcbiAgICBpZiAodXBkYXRlRG9tSXRlbXMpIHtcbiAgICAgIHRoaXMudXBkYXRlRG9tSXRlbXModmFsdWUpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29udGFpbmVyLCBDb250YWluZXJDb25maWcgfSBmcm9tICcuL2NvbnRhaW5lcic7XG5pbXBvcnQgeyBTZWxlY3RCb3ggfSBmcm9tICcuL3NlbGVjdGJveCc7XG5pbXBvcnQgeyBVSUluc3RhbmNlTWFuYWdlciB9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBUaW1lb3V0IH0gZnJvbSAnLi4vdGltZW91dCc7XG5pbXBvcnQgeyBFdmVudCwgRXZlbnREaXNwYXRjaGVyLCBOb0FyZ3MgfSBmcm9tICcuLi9ldmVudGRpc3BhdGNoZXInO1xuaW1wb3J0IHsgU2V0dGluZ3NQYW5lbFBhZ2UgfSBmcm9tICcuL3NldHRpbmdzcGFuZWxwYWdlJztcbmltcG9ydCB7IFNldHRpbmdzUGFuZWxJdGVtIH0gZnJvbSAnLi9zZXR0aW5nc3BhbmVsaXRlbSc7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBDb21wb25lbnRDb25maWcgfSBmcm9tICcuL2NvbXBvbmVudCc7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIGEge0BsaW5rIFNldHRpbmdzUGFuZWx9LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNldHRpbmdzUGFuZWxDb25maWcgZXh0ZW5kcyBDb250YWluZXJDb25maWcge1xuICAvKipcbiAgICogVGhlIGRlbGF5IGluIG1pbGxpc2Vjb25kcyBhZnRlciB3aGljaCB0aGUgc2V0dGluZ3MgcGFuZWwgd2lsbCBiZSBoaWRkZW4gd2hlbiB0aGVyZSBpcyBubyB1c2VyIGludGVyYWN0aW9uLlxuICAgKiBTZXQgdG8gLTEgdG8gZGlzYWJsZSBhdXRvbWF0aWMgaGlkaW5nLlxuICAgKiBEZWZhdWx0OiAzIHNlY29uZHMgKDMwMDApXG4gICAqL1xuICBoaWRlRGVsYXk/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEZsYWcgdG8gc3BlY2lmeSBpZiB0aGVyZSBzaG91bGQgYmUgYW4gYW5pbWF0aW9uIHdoZW4gc3dpdGNoaW5nIFNldHRpbmdzUGFuZWxQYWdlcy5cbiAgICogRGVmYXVsdDogdHJ1ZVxuICAgKi9cbiAgcGFnZVRyYW5zaXRpb25BbmltYXRpb24/OiBib29sZWFuO1xufVxuXG5lbnVtIE5hdmlnYXRpb25EaXJlY3Rpb24ge1xuICBGb3J3YXJkcyxcbiAgQmFja3dhcmRzLFxufVxuXG4vKipcbiAqIEEgcGFuZWwgY29udGFpbmluZyBhIGxpc3Qgb2Yge0BsaW5rIFNldHRpbmdzUGFuZWxQYWdlIGl0ZW1zfS5cbiAqXG4gKiBUbyBjb25maWd1cmUgcGFnZXMganVzdCBwYXNzIHRoZW0gaW4gdGhlIGNvbXBvbmVudHMgYXJyYXkuXG4gKlxuICogRXhhbXBsZTpcbiAqICBsZXQgc2V0dGluZ3NQYW5lbCA9IG5ldyBTZXR0aW5nc1BhbmVsKHtcbiAqICAgIGhpZGRlbjogdHJ1ZSxcbiAqICB9KTtcbiAqXG4gKiAgbGV0IHNldHRpbmdzUGFuZWxQYWdlID0gbmV3IFNldHRpbmdzUGFuZWxQYWdlKHtcbiAqICAgIGNvbXBvbmVudHM6IFvigKZdXG4gKiAgfSk7XG4gKlxuICogIGxldCBzZWNvbmRTZXR0aW5nc1BhbmVsUGFnZSA9IG5ldyBTZXR0aW5nc1BhbmVsUGFnZSh7XG4gKiAgICBjb21wb25lbnRzOiBb4oCmXVxuICogIH0pO1xuICpcbiAqICBzZXR0aW5nc1BhbmVsLmFkZENvbXBvbmVudChzZXR0aW5nc1BhbmVsUGFnZSk7XG4gKiAgc2V0dGluZ3NQYW5lbC5hZGRDb21wb25lbnQoc2Vjb25kU2V0dGluZ3NQYW5lbFBhZ2UpO1xuICpcbiAqIEZvciBhbiBleGFtcGxlIGhvdyB0byBuYXZpZ2F0ZSBiZXR3ZWVuIHBhZ2VzIEBzZWUgU2V0dGluZ3NQYW5lbFBhZ2VOYXZpZ2F0b3JCdXR0b25cbiAqL1xuZXhwb3J0IGNsYXNzIFNldHRpbmdzUGFuZWwgZXh0ZW5kcyBDb250YWluZXI8U2V0dGluZ3NQYW5lbENvbmZpZz4ge1xuXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENMQVNTX0FDVElWRV9QQUdFID0gJ2FjdGl2ZSc7XG5cbiAgLy8gbmF2aWdhdGlvbiBoYW5kbGluZ1xuICBwcml2YXRlIGFjdGl2ZVBhZ2U6IFNldHRpbmdzUGFuZWxQYWdlO1xuICBwcml2YXRlIG5hdmlnYXRpb25TdGFjazogU2V0dGluZ3NQYW5lbFBhZ2VbXSA9IFtdO1xuXG4gIHByaXZhdGUgc2V0dGluZ3NQYW5lbEV2ZW50cyA9IHtcbiAgICBvblNldHRpbmdzU3RhdGVDaGFuZ2VkOiBuZXcgRXZlbnREaXNwYXRjaGVyPFNldHRpbmdzUGFuZWwsIE5vQXJncz4oKSxcbiAgfTtcblxuICBwcml2YXRlIGhpZGVUaW1lb3V0OiBUaW1lb3V0O1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU2V0dGluZ3NQYW5lbENvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXNldHRpbmdzLXBhbmVsJyxcbiAgICAgIGhpZGVEZWxheTogMzAwMCxcbiAgICAgIHBhZ2VUcmFuc2l0aW9uQW5pbWF0aW9uOiB0cnVlLFxuICAgIH0gYXMgU2V0dGluZ3NQYW5lbENvbmZpZywgdGhpcy5jb25maWcpO1xuXG4gICAgdGhpcy5hY3RpdmVQYWdlID0gdGhpcy5nZXRSb290UGFnZSgpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuXG4gICAgdWltYW5hZ2VyLm9uQ29udHJvbHNIaWRlLnN1YnNjcmliZSgoKSA9PiB0aGlzLmhpZGVIb3ZlcmVkU2VsZWN0Qm94ZXMoKSk7XG5cbiAgICBpZiAoY29uZmlnLmhpZGVEZWxheSA+IC0xKSB7XG4gICAgICB0aGlzLmhpZGVUaW1lb3V0ID0gbmV3IFRpbWVvdXQoY29uZmlnLmhpZGVEZWxheSwgKCkgPT4ge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgdGhpcy5oaWRlSG92ZXJlZFNlbGVjdEJveGVzKCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLm9uKCdtb3VzZWVudGVyJywgKCkgPT4ge1xuICAgICAgICAvLyBPbiBtb3VzZSBlbnRlciBjbGVhciB0aGUgdGltZW91dFxuICAgICAgICB0aGlzLmhpZGVUaW1lb3V0LmNsZWFyKCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLm9uKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xuICAgICAgICAvLyBPbiBtb3VzZSBsZWF2ZSBhY3RpdmF0ZSB0aGUgdGltZW91dFxuICAgICAgICB0aGlzLmhpZGVUaW1lb3V0LnJlc2V0KCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLm9uKCdmb2N1c2luJywgKCkgPT4ge1xuICAgICAgICB0aGlzLmhpZGVUaW1lb3V0LmNsZWFyKCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLm9uKCdmb2N1c291dCcsICgpID0+IHtcbiAgICAgICAgdGhpcy5oaWRlVGltZW91dC5yZXNldCgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5vbkhpZGUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGlmIChjb25maWcuaGlkZURlbGF5ID4gLTEpIHtcbiAgICAgICAgLy8gQ2xlYXIgdGltZW91dCB3aGVuIGhpZGRlbiBmcm9tIG91dHNpZGVcbiAgICAgICAgdGhpcy5oaWRlVGltZW91dC5jbGVhcigpO1xuICAgICAgfVxuXG4gICAgICAvLyBTaW5jZSB3ZSBkb24ndCByZXNldCB0aGUgYWN0dWFsIG5hdmlnYXRpb24gaGVyZSB3ZSBuZWVkIHRvIHNpbXVsYXRlIGEgb25JbmFjdGl2ZSBldmVudCBpbiBjYXNlIHNvbWUgcGFuZWxcbiAgICAgIC8vIG5lZWRzIHRvIGRvIHNvbWV0aGluZyB3aGVuIHRoZXkgYmVjb21lIGludmlzaWJsZSAvIGluYWN0aXZlLlxuICAgICAgdGhpcy5hY3RpdmVQYWdlLm9uSW5hY3RpdmVFdmVudCgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vblNob3cuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIC8vIFJlc2V0IG5hdmlnYXRpb24gd2hlbiB0ZSBwYW5lbCBnZXRzIHZpc2libGUgdG8gYXZvaWQgYSB3ZWlyZCBhbmltYXRpb24gd2hlbiBoaWRpbmdcbiAgICAgIHRoaXMucmVzZXROYXZpZ2F0aW9uKHRydWUpO1xuICAgICAgLy8gU2luY2Ugd2UgZG9uJ3QgbmVlZCB0byBuYXZpZ2F0ZSB0byB0aGUgcm9vdCBwYWdlIGFnYWluIHdlIG5lZWQgdG8gZmlyZSB0aGUgb25BY3RpdmUgZXZlbnQgd2hlbiB0aGUgc2V0dGluZ3NcbiAgICAgIC8vIHBhbmVsIGdldHMgdmlzaWJsZS5cbiAgICAgIHRoaXMuYWN0aXZlUGFnZS5vbkFjdGl2ZUV2ZW50KCk7XG5cbiAgICAgIGlmIChjb25maWcuaGlkZURlbGF5ID4gLTEpIHtcbiAgICAgICAgLy8gQWN0aXZhdGUgdGltZW91dCB3aGVuIHNob3duXG4gICAgICAgIHRoaXMuaGlkZVRpbWVvdXQuc3RhcnQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIHBhc3MgZXZlbnQgZnJvbSByb290IHBhZ2UgdGhyb3VnaFxuICAgIHRoaXMuZ2V0Um9vdFBhZ2UoKS5vblNldHRpbmdzU3RhdGVDaGFuZ2VkLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLm9uU2V0dGluZ3NTdGF0ZUNoYW5nZWRFdmVudCgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy51cGRhdGVBY3RpdmVQYWdlQ2xhc3MoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IGFjdGl2ZSAvIHZpc2libGUgcGFnZVxuICAgKiBAcmV0dXJuIHtTZXR0aW5nc1BhbmVsUGFnZX1cbiAgICovXG4gIGdldEFjdGl2ZVBhZ2UoKTogU2V0dGluZ3NQYW5lbFBhZ2Uge1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZVBhZ2U7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGVcbiAgICogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayBzZXRBY3RpdmVQYWdlfSBpbnN0ZWFkXG4gICAqIEBwYXJhbSBpbmRleFxuICAgKi9cbiAgc2V0QWN0aXZlUGFnZUluZGV4KGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnNldEFjdGl2ZVBhZ2UodGhpcy5nZXRQYWdlcygpW2luZGV4XSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyB0aGUgcGFzc2VkIHBhZ2UgdG8gdGhlIG5hdmlnYXRpb24gc3RhY2sgYW5kIG1ha2VzIGl0IHZpc2libGUuXG4gICAqIFVzZSB7QGxpbmsgcG9wU2V0dGluZ3NQYW5lbFBhZ2V9IHRvIG5hdmlnYXRlIGJhY2t3YXJkcy5cbiAgICpcbiAgICogUmVzdWx0cyBpbiBuby1vcCBpZiB0aGUgdGFyZ2V0IHBhZ2UgaXMgdGhlIGN1cnJlbnQgcGFnZS5cbiAgICogQHBhcmFtcyBwYWdlXG4gICAqL1xuICBzZXRBY3RpdmVQYWdlKHRhcmdldFBhZ2U6IFNldHRpbmdzUGFuZWxQYWdlKTogdm9pZCB7XG4gICAgaWYgKHRhcmdldFBhZ2UgPT09IHRoaXMuZ2V0QWN0aXZlUGFnZSgpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1BhZ2UgaXMgYWxyZWFkeSB0aGUgY3VycmVudCBvbmUgLi4uIHNraXBwaW5nIG5hdmlnYXRpb24nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLm5hdmlnYXRlVG9QYWdlKFxuICAgICAgdGFyZ2V0UGFnZSxcbiAgICAgIHRoaXMuZ2V0QWN0aXZlUGFnZSgpLFxuICAgICAgTmF2aWdhdGlvbkRpcmVjdGlvbi5Gb3J3YXJkcyxcbiAgICAgICEodGhpcy5jb25maWcgYXMgU2V0dGluZ3NQYW5lbENvbmZpZykucGFnZVRyYW5zaXRpb25BbmltYXRpb24sXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldHMgdGhlIG5hdmlnYXRpb24gc3RhY2sgYnkgbmF2aWdhdGluZyBiYWNrIHRvIHRoZSByb290IHBhZ2UgYW5kIGRpc3BsYXlpbmcgaXQuXG4gICAqL1xuICBwb3BUb1Jvb3RTZXR0aW5nc1BhbmVsUGFnZSgpOiB2b2lkIHtcbiAgICB0aGlzLnJlc2V0TmF2aWdhdGlvbigodGhpcy5jb25maWcgYXMgU2V0dGluZ3NQYW5lbENvbmZpZykucGFnZVRyYW5zaXRpb25BbmltYXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIGN1cnJlbnQgcGFnZSBmcm9tIHRoZSBuYXZpZ2F0aW9uIHN0YWNrIGFuZCBtYWtlcyB0aGUgcHJldmlvdXMgb25lIHZpc2libGUuXG4gICAqIFJlc3VsdHMgaW4gYSBuby1vcCBpZiB3ZSBhcmUgYWxyZWFkeSBvbiB0aGUgcm9vdCBwYWdlLlxuICAgKi9cbiAgcG9wU2V0dGluZ3NQYW5lbFBhZ2UoKSB7XG4gICAgaWYgKHRoaXMubmF2aWdhdGlvblN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc29sZS53YXJuKCdBbHJlYWR5IG9uIHRoZSByb290IHBhZ2UgLi4uIHNraXBwaW5nIG5hdmlnYXRpb24nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgdGFyZ2V0UGFnZSA9IHRoaXMubmF2aWdhdGlvblN0YWNrW3RoaXMubmF2aWdhdGlvblN0YWNrLmxlbmd0aCAtIDJdO1xuICAgIC8vIFRoZSByb290IHBhcnQgaXNuJ3QgcGFydCBvZiB0aGUgbmF2aWdhdGlvbiBzdGFjayBzbyBoYW5kbGUgaXQgZXhwbGljaXRseSBoZXJlXG4gICAgaWYgKCF0YXJnZXRQYWdlKSB7XG4gICAgICB0YXJnZXRQYWdlID0gdGhpcy5nZXRSb290UGFnZSgpO1xuICAgIH1cblxuICAgIHRoaXMubmF2aWdhdGVUb1BhZ2UoXG4gICAgICB0YXJnZXRQYWdlLFxuICAgICAgdGhpcy5hY3RpdmVQYWdlLFxuICAgICAgTmF2aWdhdGlvbkRpcmVjdGlvbi5CYWNrd2FyZHMsXG4gICAgICAhKHRoaXMuY29uZmlnIGFzIFNldHRpbmdzUGFuZWxDb25maWcpLnBhZ2VUcmFuc2l0aW9uQW5pbWF0aW9uLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZXJlIGFyZSBhY3RpdmUgc2V0dGluZ3Mgd2l0aGluIHRoZSByb290IHBhZ2Ugb2YgdGhlIHNldHRpbmdzIHBhbmVsLlxuICAgKiBBbiBhY3RpdmUgc2V0dGluZyBpcyBhIHNldHRpbmcgdGhhdCBpcyB2aXNpYmxlIGFuZCBlbmFibGVkLCB3aGljaCB0aGUgdXNlciBjYW4gaW50ZXJhY3Qgd2l0aC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlcmUgYXJlIGFjdGl2ZSBzZXR0aW5ncywgZmFsc2UgaWYgdGhlIHBhbmVsIGlzIGZ1bmN0aW9uYWxseSBlbXB0eSB0byBhIHVzZXJcbiAgICovXG4gIHJvb3RQYWdlSGFzQWN0aXZlU2V0dGluZ3MoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Um9vdFBhZ2UoKS5oYXNBY3RpdmVTZXR0aW5ncygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhbGwgY29uZmlndXJlZCBwYWdlc1xuICAgKiBAcmV0dXJucyB7U2V0dGluZ3NQYW5lbFBhZ2VbXX1cbiAgICovXG4gIGdldFBhZ2VzKCk6IFNldHRpbmdzUGFuZWxQYWdlW10ge1xuICAgIHJldHVybiA8U2V0dGluZ3NQYW5lbFBhZ2VbXT50aGlzLmNvbmZpZy5jb21wb25lbnRzLmZpbHRlcihjb21wb25lbnQgPT4gY29tcG9uZW50IGluc3RhbmNlb2YgU2V0dGluZ3NQYW5lbFBhZ2UpO1xuICB9XG5cbiAgZ2V0IG9uU2V0dGluZ3NTdGF0ZUNoYW5nZWQoKTogRXZlbnQ8U2V0dGluZ3NQYW5lbCwgTm9BcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuc2V0dGluZ3NQYW5lbEV2ZW50cy5vblNldHRpbmdzU3RhdGVDaGFuZ2VkLmdldEV2ZW50KCk7XG4gIH1cblxuICByZWxlYXNlKCk6IHZvaWQge1xuICAgIHN1cGVyLnJlbGVhc2UoKTtcbiAgICBpZiAodGhpcy5oaWRlVGltZW91dCkge1xuICAgICAgdGhpcy5oaWRlVGltZW91dC5jbGVhcigpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFN1cHBvcnQgYWRkaW5nIHNldHRpbmdzUGFuZWxQYWdlcyBhZnRlciBpbml0aWFsaXphdGlvblxuICBhZGRDb21wb25lbnQoY29tcG9uZW50OiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPikge1xuICAgIGlmICh0aGlzLmdldFBhZ2VzKCkubGVuZ3RoID09PSAwICYmIGNvbXBvbmVudCBpbnN0YW5jZW9mIFNldHRpbmdzUGFuZWxQYWdlKSB7XG4gICAgICB0aGlzLmFjdGl2ZVBhZ2UgPSBjb21wb25lbnQ7XG4gICAgfVxuICAgIHN1cGVyLmFkZENvbXBvbmVudChjb21wb25lbnQpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVBY3RpdmVQYWdlQ2xhc3MoKTogdm9pZCB7XG4gICAgdGhpcy5nZXRQYWdlcygpLmZvckVhY2goKHBhZ2U6IFNldHRpbmdzUGFuZWxQYWdlKSA9PiB7XG4gICAgICBpZiAocGFnZSA9PT0gdGhpcy5hY3RpdmVQYWdlKSB7XG4gICAgICAgIHBhZ2UuZ2V0RG9tRWxlbWVudCgpLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKFNldHRpbmdzUGFuZWwuQ0xBU1NfQUNUSVZFX1BBR0UpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2UuZ2V0RG9tRWxlbWVudCgpLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4Q3NzKFNldHRpbmdzUGFuZWwuQ0xBU1NfQUNUSVZFX1BBR0UpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgcmVzZXROYXZpZ2F0aW9uKHJlc2V0TmF2aWdhdGlvbk9uU2hvdzogYm9vbGVhbik6IHZvaWQge1xuICAgIGNvbnN0IHNvdXJjZVBhZ2UgPSB0aGlzLmdldEFjdGl2ZVBhZ2UoKTtcbiAgICBjb25zdCByb290UGFnZSA9IHRoaXMuZ2V0Um9vdFBhZ2UoKTtcbiAgICBpZiAoc291cmNlUGFnZSkge1xuICAgICAgLy8gU2luY2UgdGhlIG9uSW5hY3RpdmVFdmVudCB3YXMgYWxyZWFkeSBmaXJlZCBpbiB0aGUgb25IaWRlIHdlIG5lZWQgdG8gc3VwcHJlc3MgaXQgaGVyZVxuICAgICAgaWYgKCFyZXNldE5hdmlnYXRpb25PblNob3cpIHtcbiAgICAgICAgc291cmNlUGFnZS5vbkluYWN0aXZlRXZlbnQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5uYXZpZ2F0aW9uU3RhY2sgPSBbXTtcbiAgICB0aGlzLmFuaW1hdGVOYXZpZ2F0aW9uKHJvb3RQYWdlLCBzb3VyY2VQYWdlLCByZXNldE5hdmlnYXRpb25PblNob3cpO1xuICAgIHRoaXMuYWN0aXZlUGFnZSA9IHJvb3RQYWdlO1xuICAgIHRoaXMudXBkYXRlQWN0aXZlUGFnZUNsYXNzKCk7XG4gIH1cblxuICBwcml2YXRlIG5hdmlnYXRlVG9QYWdlKFxuICAgIHRhcmdldFBhZ2U6IFNldHRpbmdzUGFuZWxQYWdlLFxuICAgIHNvdXJjZVBhZ2U6IFNldHRpbmdzUGFuZWxQYWdlLFxuICAgIGRpcmVjdGlvbjogTmF2aWdhdGlvbkRpcmVjdGlvbixcbiAgICBza2lwQW5pbWF0aW9uOiBib29sZWFuLFxuICApOiB2b2lkIHtcbiAgICB0aGlzLmFjdGl2ZVBhZ2UgPSB0YXJnZXRQYWdlO1xuXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gTmF2aWdhdGlvbkRpcmVjdGlvbi5Gb3J3YXJkcykge1xuICAgICAgdGhpcy5uYXZpZ2F0aW9uU3RhY2sucHVzaCh0YXJnZXRQYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5uYXZpZ2F0aW9uU3RhY2sucG9wKCk7XG4gICAgfVxuXG4gICAgdGhpcy5hbmltYXRlTmF2aWdhdGlvbih0YXJnZXRQYWdlLCBzb3VyY2VQYWdlLCBza2lwQW5pbWF0aW9uKTtcblxuICAgIHRoaXMudXBkYXRlQWN0aXZlUGFnZUNsYXNzKCk7XG4gICAgdGFyZ2V0UGFnZS5vbkFjdGl2ZUV2ZW50KCk7XG4gICAgc291cmNlUGFnZS5vbkluYWN0aXZlRXZlbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gdGFyZ2V0UGFnZVxuICAgKiBAcGFyYW0gc291cmNlUGFnZVxuICAgKiBAcGFyYW0gc2tpcEFuaW1hdGlvbiBUaGlzIGlzIGp1c3QgYW4gaW50ZXJuYWwgZmxhZyBpZiB3ZSB3YW50IHRvIGhhdmUgYW4gYW5pbWF0aW9uLiBJdCBpcyBzZXQgdHJ1ZSB3aGVuIHdlIHJlc2V0XG4gICAqIHRoZSBuYXZpZ2F0aW9uIHdpdGhpbiB0aGUgb25TaG93IGNhbGxiYWNrIG9mIHRoZSBzZXR0aW5nc1BhbmVsLiBJbiB0aGlzIGNhc2Ugd2UgZG9uJ3Qgd2FudCBhbiBhY3R1YWwgYW5pbWF0aW9uIGJ1dFxuICAgKiB0aGUgcmVjYWxjdWxhdGlvbiBvZiB0aGUgZGltZW5zaW9uIG9mIHRoZSBzZXR0aW5nc1BhbmVsLlxuICAgKiBUaGlzIGlzIGluZGVwZW5kZW50IG9mIHRoZSBwYWdlVHJhbnNpdGlvbkFuaW1hdGlvbiBmbGFnLlxuICAgKi9cbiAgcHJpdmF0ZSBhbmltYXRlTmF2aWdhdGlvbih0YXJnZXRQYWdlOiBTZXR0aW5nc1BhbmVsUGFnZSwgc291cmNlUGFnZTogU2V0dGluZ3NQYW5lbFBhZ2UsIHNraXBBbmltYXRpb246IGJvb2xlYW4pIHtcbiAgICBpZiAoISh0aGlzLmNvbmZpZyBhcyBTZXR0aW5nc1BhbmVsQ29uZmlnKS5wYWdlVHJhbnNpdGlvbkFuaW1hdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNldHRpbmdzUGFuZWxEb21FbGVtZW50ID0gdGhpcy5nZXREb21FbGVtZW50KCk7XG4gICAgY29uc3Qgc2V0dGluZ3NQYW5lbEhUTUxFbGVtZW50ID0gdGhpcy5nZXREb21FbGVtZW50KCkuZ2V0KDApO1xuXG4gICAgLy8gZ2V0IGN1cnJlbnQgZGltZW5zaW9uXG4gICAgY29uc3Qgc2V0dGluZ3NQYW5lbFdpZHRoID0gc2V0dGluZ3NQYW5lbEhUTUxFbGVtZW50LnNjcm9sbFdpZHRoO1xuICAgIGNvbnN0IHNldHRpbmdzUGFuZWxIZWlnaHQgPSBzZXR0aW5nc1BhbmVsSFRNTEVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuXG4gICAgLy8gY2FsY3VsYXRlIHRhcmdldCBzaXplIG9mIHRoZSBzZXR0aW5ncyBwYW5lbFxuICAgIHNvdXJjZVBhZ2UuZ2V0RG9tRWxlbWVudCgpLmNzcygnZGlzcGxheScsICdub25lJyk7XG4gICAgdGhpcy5nZXREb21FbGVtZW50KCkuY3NzKHsgd2lkdGg6ICcnLCBoZWlnaHQ6ICcnIH0pOyAvLyBsZXQgY3NzIGF1dG8gc2V0dGluZ3Mga2ljayBpbiBhZ2FpblxuXG4gICAgY29uc3QgdGFyZ2V0UGFnZUh0bWxFbGVtZW50ID0gdGFyZ2V0UGFnZS5nZXREb21FbGVtZW50KCkuZ2V0KDApO1xuICAgIC8vIGNsb25lIHRoZSB0YXJnZXRQYWdlIERPTSBlbGVtZW50IHNvIHRoYXQgd2UgY2FuIGNhbGN1bGF0ZSB0aGUgd2lkdGggLyBoZWlnaHQgaG93IHRoZXkgd2lsbCBiZSBhZnRlclxuICAgIC8vIHN3aXRjaGluZyB0aGUgcGFnZS4gV2UgYXJlIHVzaW5nIGEgY2xvbmUgdG8gcHJldmVudCAobW9zdGx5IHN0eWxpbmcpIHNpZGUtZWZmZWN0cyBvbiB0aGUgcmVhbCBET00gZWxlbWVudFxuICAgIGNvbnN0IGNsb25lID0gdGFyZ2V0UGFnZUh0bWxFbGVtZW50LmNsb25lTm9kZSh0cnVlKSBhcyBIVE1MRWxlbWVudDtcbiAgICAvLyBhcHBlbmQgdG8gcGFyZW50IHNvIHdlIGdldCB0aGUgJ3JlYWwnIHNpemVcbiAgICBjb25zdCBjb250YWluZXJXcmFwcGVyID0gdGFyZ2V0UGFnZUh0bWxFbGVtZW50LnBhcmVudE5vZGU7XG4gICAgY29udGFpbmVyV3JhcHBlci5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgLy8gc2V0IGNsb25lIHZpc2libGVcbiAgICBjbG9uZS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblxuICAgIC8vIGNvbGxlY3QgdGFyZ2V0IGRpbWVuc2lvblxuICAgIGNvbnN0IHRhcmdldFNldHRpbmdzUGFuZWxXaWR0aCA9IHNldHRpbmdzUGFuZWxIVE1MRWxlbWVudC5zY3JvbGxXaWR0aDtcbiAgICBjb25zdCB0YXJnZXRTZXR0aW5nc1BhbmVsSGVpZ2h0ID0gc2V0dGluZ3NQYW5lbEhUTUxFbGVtZW50LnNjcm9sbEhlaWdodDtcblxuICAgIC8vIHJlbW92ZSBjbG9uZSBmcm9tIHRoZSBET01cbiAgICBjbG9uZS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGNsb25lKTsgLy8gLnJlbW92ZSgpIGlzIG5vdCB3b3JraW5nIGluIElFXG4gICAgc291cmNlUGFnZS5nZXREb21FbGVtZW50KCkuY3NzKCdkaXNwbGF5JywgJycpO1xuXG4gICAgLy8gc2V0IHRoZSB2YWx1ZXMgYmFjayB0byB0aGUgY3VycmVudCBvbmVzIHRoYXQgdGhlIGJyb3dzZXIgYW5pbWF0ZXMgaXQgKGJyb3dzZXJzIGRvbid0IGFuaW1hdGUgJ2F1dG8nIHZhbHVlcylcbiAgICBzZXR0aW5nc1BhbmVsRG9tRWxlbWVudC5jc3Moe1xuICAgICAgd2lkdGg6IHNldHRpbmdzUGFuZWxXaWR0aCArICdweCcsXG4gICAgICBoZWlnaHQ6IHNldHRpbmdzUGFuZWxIZWlnaHQgKyAncHgnLFxuICAgIH0pO1xuXG4gICAgaWYgKCFza2lwQW5pbWF0aW9uKSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIGZvcmNlIHRoZSBicm93c2VyIHRvIHJlZmxvdyBiZXR3ZWVuIHNldHRpbmcgdGhlIHdpZHRoIGFuZCBoZWlnaHQgdGhhdCB3ZSBhY3R1YWxseSBnZXQgYSBhbmltYXRpb25cbiAgICAgIHRoaXMuZm9yY2VCcm93c2VyUmVmbG93KCk7XG4gICAgfVxuXG4gICAgLy8gc2V0IHRoZSB2YWx1ZXMgdG8gdGhlIHRhcmdldCBkaW1lbnNpb25cbiAgICBzZXR0aW5nc1BhbmVsRG9tRWxlbWVudC5jc3Moe1xuICAgICAgd2lkdGg6IHRhcmdldFNldHRpbmdzUGFuZWxXaWR0aCArICdweCcsXG4gICAgICBoZWlnaHQ6IHRhcmdldFNldHRpbmdzUGFuZWxIZWlnaHQgKyAncHgnLFxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBmb3JjZUJyb3dzZXJSZWZsb3coKTogdm9pZCB7XG4gICAgLy8gRm9yY2UgdGhlIGJyb3dzZXIgdG8gcmVmbG93IHRoZSBsYXlvdXRcbiAgICAvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9wYXVsaXJpc2gvNWQ1MmZiMDgxYjM1NzBjODFlM2FcbiAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5nZXQoMCkub2Zmc2V0TGVmdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYWNrIGZvciBJRSArIEZpcmVmb3hcbiAgICogd2hlbiB0aGUgc2V0dGluZ3MgcGFuZWwgZmFkZXMgb3V0IHdoaWxlIGFuIGl0ZW0gb2YgYSBzZWxlY3QgYm94IGlzIHN0aWxsIGhvdmVyZWQsIHRoZSBzZWxlY3QgYm94IHdpbGwgbm90IGZhZGUgb3V0XG4gICAqIHdoaWxlIHRoZSBzZXR0aW5ncyBwYW5lbCBkb2VzLiBUaGlzIHdvdWxkIGxlYXZlIGEgZmxvYXRpbmcgc2VsZWN0IGJveCwgd2hpY2ggaXMganVzdCB3ZWlyZFxuICAgKi9cbiAgcHJpdmF0ZSBoaWRlSG92ZXJlZFNlbGVjdEJveGVzKCk6IHZvaWQge1xuICAgIHRoaXMuZ2V0Q29tcHV0ZWRJdGVtcygpLmZvckVhY2goKGl0ZW06IFNldHRpbmdzUGFuZWxJdGVtKSA9PiB7XG4gICAgICBpZiAoaXRlbS5pc0FjdGl2ZSgpICYmIChpdGVtIGFzIGFueSkuc2V0dGluZyBpbnN0YW5jZW9mIFNlbGVjdEJveCkge1xuICAgICAgICBjb25zdCBzZWxlY3RCb3ggPSAoaXRlbSBhcyBhbnkpLnNldHRpbmcgYXMgU2VsZWN0Qm94O1xuICAgICAgICBjb25zdCBvbGREaXNwbGF5ID0gc2VsZWN0Qm94LmdldERvbUVsZW1lbnQoKS5jc3MoJ2Rpc3BsYXknKTtcbiAgICAgICAgaWYgKG9sZERpc3BsYXkgPT09ICdub25lJykge1xuICAgICAgICAgIC8vIGlmIG9sZERpc3BsYXkgaXMgYWxyZWFkeSAnbm9uZScsIG5vIG5lZWQgdG8gc2V0IHRvICdub25lJyBhZ2Fpbi4gSXQgY291bGQgbGVhZCB0byByYWNlIGNvbmRpdGlvblxuICAgICAgICAgIC8vIHdoZXJlaW4gdGhlIGRpc3BsYXkgaXMgaXJyZXZlcnNpYmx5IHNldCB0byAnbm9uZScgd2hlbiBicm93c2VyIHRhYi93aW5kb3cgaXMgbm90IGFjdGl2ZSBiZWNhdXNlXG4gICAgICAgICAgLy8gcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGlzIGVpdGhlciBkZWxheWVkIG9yIHBhdXNlZCBpbiBzb21lIGJyb3dzZXJzIGluIGluYWN0aXZlIHN0YXRlXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRpbmcgdGhlIGRpc3BsYXkgdG8gbm9uZSBtYXJrcyB0aGUgc2VsZWN0LWJveCBhcyBpbmFjdGl2ZSwgc28gaXQgd2lsbCBiZSBoaWRkZW4gd2l0aCB0aGUgcmVzdFxuICAgICAgICAvLyB3ZSBqdXN0IGhhdmUgdG8gbWFrZSBzdXJlIHRvIHJlc2V0IHRoaXMgYXMgc29vbiBhcyBwb3NzaWJsZVxuICAgICAgICBzZWxlY3RCb3guZ2V0RG9tRWxlbWVudCgpLmNzcygnZGlzcGxheScsICdub25lJyk7XG4gICAgICAgIGlmICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIHNlbGVjdEJveC5nZXREb21FbGVtZW50KCkuY3NzKCdkaXNwbGF5Jywgb2xkRGlzcGxheSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSUU5IGhhcyBubyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUsIHNldCB0aGUgdmFsdWUgZGlyZWN0bHkuIEl0IGhhcyBubyBvcHRpbWl6YXRpb24gYWJvdXQgaWdub3JpbmcgRE9NLWNoYW5nZXNcbiAgICAgICAgICAvLyBiZXR3ZWVuIGFuaW1hdGlvbkZyYW1lc1xuICAgICAgICAgIHNlbGVjdEJveC5nZXREb21FbGVtZW50KCkuY3NzKCdkaXNwbGF5Jywgb2xkRGlzcGxheSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vIGNvbGxlY3QgYWxsIGl0ZW1zIGZyb20gYWxsIHBhZ2VzIChzZWUgaGlkZUhvdmVyZWRTZWxlY3RCb3hlcylcbiAgcHJpdmF0ZSBnZXRDb21wdXRlZEl0ZW1zKCk6IFNldHRpbmdzUGFuZWxJdGVtW10ge1xuICAgIGNvbnN0IGFsbEl0ZW1zOiBTZXR0aW5nc1BhbmVsSXRlbVtdID0gW107XG4gICAgZm9yIChsZXQgcGFnZSBvZiB0aGlzLmdldFBhZ2VzKCkpIHtcbiAgICAgIGFsbEl0ZW1zLnB1c2goLi4ucGFnZS5nZXRJdGVtcygpKTtcbiAgICB9XG4gICAgcmV0dXJuIGFsbEl0ZW1zO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRSb290UGFnZSgpOiBTZXR0aW5nc1BhbmVsUGFnZSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UGFnZXMoKVswXTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvblNldHRpbmdzU3RhdGVDaGFuZ2VkRXZlbnQoKSB7XG4gICAgdGhpcy5zZXR0aW5nc1BhbmVsRXZlbnRzLm9uU2V0dGluZ3NTdGF0ZUNoYW5nZWQuZGlzcGF0Y2godGhpcyk7XG4gIH1cbn1cbiIsImltcG9ydCB7Q29udGFpbmVyLCBDb250YWluZXJDb25maWd9IGZyb20gJy4vY29udGFpbmVyJztcbmltcG9ydCB7Q29tcG9uZW50LCBDb21wb25lbnRDb25maWd9IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCB7RXZlbnQsIEV2ZW50RGlzcGF0Y2hlciwgTm9BcmdzfSBmcm9tICcuLi9ldmVudGRpc3BhdGNoZXInO1xuaW1wb3J0IHsgTGFiZWwsIExhYmVsQ29uZmlnIH0gZnJvbSAnLi9sYWJlbCc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHtTZWxlY3RCb3h9IGZyb20gJy4vc2VsZWN0Ym94JztcbmltcG9ydCB7TGlzdEJveH0gZnJvbSAnLi9saXN0Ym94JztcbmltcG9ydCB7VmlkZW9RdWFsaXR5U2VsZWN0Qm94fSBmcm9tICcuL3ZpZGVvcXVhbGl0eXNlbGVjdGJveCc7XG5pbXBvcnQge0F1ZGlvUXVhbGl0eVNlbGVjdEJveH0gZnJvbSAnLi9hdWRpb3F1YWxpdHlzZWxlY3Rib3gnO1xuaW1wb3J0IHtQbGF5YmFja1NwZWVkU2VsZWN0Qm94fSBmcm9tICcuL3BsYXliYWNrc3BlZWRzZWxlY3Rib3gnO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IExvY2FsaXphYmxlVGV4dCB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBbiBpdGVtIGZvciBhIHtAbGluayBTZXR0aW5nc1BhbmVsUGFnZX0sXG4gKiBDb250YWluaW5nIGFuIG9wdGlvbmFsIHtAbGluayBMYWJlbH0gYW5kIGEgY29tcG9uZW50IHRoYXQgY29uZmlndXJlcyBhIHNldHRpbmcuXG4gKiBJZiB0aGUgY29tcG9uZW50cyBpcyBhIHtAbGluayBTZWxlY3RCb3h9IGl0IHdpbGwgaGFuZGxlIHRoZSBsb2dpYyBvZiBkaXNwbGF5aW5nIGl0IG9yIG5vdFxuICovXG5leHBvcnQgY2xhc3MgU2V0dGluZ3NQYW5lbEl0ZW0gZXh0ZW5kcyBDb250YWluZXI8Q29udGFpbmVyQ29uZmlnPiB7XG5cbiAgcHJpdmF0ZSBsYWJlbDogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz47XG4gIHByaXZhdGUgc2V0dGluZzogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz47XG5cbiAgcHJpdmF0ZSBzZXR0aW5nc1BhbmVsSXRlbUV2ZW50cyA9IHtcbiAgICBvbkFjdGl2ZUNoYW5nZWQ6IG5ldyBFdmVudERpc3BhdGNoZXI8U2V0dGluZ3NQYW5lbEl0ZW0sIE5vQXJncz4oKSxcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihsYWJlbDogTG9jYWxpemFibGVUZXh0IHwgQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4sIHNldHRpbmc6IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+LCBjb25maWc6IENvbnRhaW5lckNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuc2V0dGluZyA9IHNldHRpbmc7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXNldHRpbmdzLXBhbmVsLWl0ZW0nLFxuICAgICAgcm9sZTogJ21lbnVpdGVtJyxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG5cbiAgICBpZiAobGFiZWwgIT09IG51bGwpIHtcbiAgICAgIGlmIChsYWJlbCBpbnN0YW5jZW9mIENvbXBvbmVudCkge1xuICAgICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxhYmVsID0gbmV3IExhYmVsKHsgdGV4dDogbGFiZWwsIGZvcjogdGhpcy5zZXR0aW5nLmdldENvbmZpZygpLmlkIH0gYXMgTGFiZWxDb25maWcpO1xuICAgICAgfVxuICAgICAgdGhpcy5hZGRDb21wb25lbnQodGhpcy5sYWJlbCk7XG4gICAgfVxuXG4gICAgdGhpcy5hZGRDb21wb25lbnQodGhpcy5zZXR0aW5nKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIGlmICh0aGlzLnNldHRpbmcgaW5zdGFuY2VvZiBTZWxlY3RCb3ggfHwgdGhpcy5zZXR0aW5nIGluc3RhbmNlb2YgTGlzdEJveCkge1xuICAgICAgbGV0IGhhbmRsZUNvbmZpZ0l0ZW1DaGFuZ2VkID0gKCkgPT4ge1xuICAgICAgICBpZiAoISh0aGlzLnNldHRpbmcgaW5zdGFuY2VvZiBTZWxlY3RCb3gpICYmICEodGhpcy5zZXR0aW5nIGluc3RhbmNlb2YgTGlzdEJveCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIG1pbmltdW0gbnVtYmVyIG9mIGl0ZW1zIHRoYXQgbXVzdCBiZSBhdmFpbGFibGUgZm9yIHRoZSBzZXR0aW5nIHRvIGJlIGRpc3BsYXllZFxuICAgICAgICAvLyBCeSBkZWZhdWx0LCBhdCBsZWFzdCB0d28gaXRlbXMgbXVzdCBiZSBhdmFpbGFibGUsIGVsc2UgYSBzZWxlY3Rpb24gaXMgbm90IHBvc3NpYmxlXG4gICAgICAgIGxldCBtaW5JdGVtc1RvRGlzcGxheSA9IDI7XG4gICAgICAgIC8vIEF1ZGlvL3ZpZGVvIHF1YWxpdHkgc2VsZWN0IGJveGVzIGNvbnRhaW4gYW4gYWRkaXRpb25hbCAnYXV0bycgbW9kZSwgd2hpY2ggaW4gY29tYmluYXRpb24gd2l0aCBhIHNpbmdsZVxuICAgICAgICAvLyBhdmFpbGFibGUgcXVhbGl0eSBhbHNvIGRvZXMgbm90IG1ha2Ugc2Vuc2VcbiAgICAgICAgaWYgKCh0aGlzLnNldHRpbmcgaW5zdGFuY2VvZiBWaWRlb1F1YWxpdHlTZWxlY3RCb3ggJiYgdGhpcy5zZXR0aW5nLmhhc0F1dG9JdGVtKCkpXG4gICAgICAgICAgfHwgdGhpcy5zZXR0aW5nIGluc3RhbmNlb2YgQXVkaW9RdWFsaXR5U2VsZWN0Qm94KSB7XG4gICAgICAgICAgbWluSXRlbXNUb0Rpc3BsYXkgPSAzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZy5pdGVtQ291bnQoKSA8IG1pbkl0ZW1zVG9EaXNwbGF5KSB7XG4gICAgICAgICAgLy8gSGlkZSB0aGUgc2V0dGluZyBpZiBubyBtZWFuaW5nZnVsIGNob2ljZSBpcyBhdmFpbGFibGVcbiAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNldHRpbmcgaW5zdGFuY2VvZiBQbGF5YmFja1NwZWVkU2VsZWN0Qm94XG4gICAgICAgICAgJiYgIXVpbWFuYWdlci5nZXRDb25maWcoKS5wbGF5YmFja1NwZWVkU2VsZWN0aW9uRW5hYmxlZCkge1xuICAgICAgICAgIC8vIEhpZGUgdGhlIFBsYXliYWNrU3BlZWRTZWxlY3RCb3ggaWYgZGlzYWJsZWQgaW4gY29uZmlnXG4gICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBWaXNpYmlsaXR5IG1pZ2h0IGhhdmUgY2hhbmdlZCBhbmQgdGhlcmVmb3JlIHRoZSBhY3RpdmUgc3RhdGUgbWlnaHQgaGF2ZSBjaGFuZ2VkIHNvIHdlIGZpcmUgdGhlIGV2ZW50XG4gICAgICAgIC8vIFRPRE8gZmlyZSBvbmx5IHdoZW4gc3RhdGUgaGFzIHJlYWxseSBjaGFuZ2VkIChlLmcuIGNoZWNrIGlmIHZpc2liaWxpdHkgaGFzIHJlYWxseSBjaGFuZ2VkKVxuICAgICAgICB0aGlzLm9uQWN0aXZlQ2hhbmdlZEV2ZW50KCk7XG5cbiAgICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuYXR0cignYXJpYS1oYXNwb3B1cCcsICd0cnVlJyk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnNldHRpbmcub25JdGVtQWRkZWQuc3Vic2NyaWJlKGhhbmRsZUNvbmZpZ0l0ZW1DaGFuZ2VkKTtcbiAgICAgIHRoaXMuc2V0dGluZy5vbkl0ZW1SZW1vdmVkLnN1YnNjcmliZShoYW5kbGVDb25maWdJdGVtQ2hhbmdlZCk7XG5cbiAgICAgIC8vIEluaXRpYWxpemUgaGlkZGVuIHN0YXRlXG4gICAgICBoYW5kbGVDb25maWdJdGVtQ2hhbmdlZCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhpcyBzZXR0aW5ncyBwYW5lbCBpdGVtIGlzIGFjdGl2ZSwgaS5lLiB2aXNpYmxlIGFuZCBlbmFibGVkIGFuZCBhIHVzZXIgY2FuIGludGVyYWN0IHdpdGggaXQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBwYW5lbCBpcyBhY3RpdmUsIGVsc2UgZmFsc2VcbiAgICovXG4gIGlzQWN0aXZlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmlzU2hvd24oKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkFjdGl2ZUNoYW5nZWRFdmVudCgpIHtcbiAgICB0aGlzLnNldHRpbmdzUGFuZWxJdGVtRXZlbnRzLm9uQWN0aXZlQ2hhbmdlZC5kaXNwYXRjaCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlICdhY3RpdmUnIHN0YXRlIG9mIHRoaXMgaXRlbSBjaGFuZ2VzLlxuICAgKiBAc2VlICNpc0FjdGl2ZVxuICAgKiBAcmV0dXJucyB7RXZlbnQ8U2V0dGluZ3NQYW5lbEl0ZW0sIE5vQXJncz59XG4gICAqL1xuICBnZXQgb25BY3RpdmVDaGFuZ2VkKCk6IEV2ZW50PFNldHRpbmdzUGFuZWxJdGVtLCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5zZXR0aW5nc1BhbmVsSXRlbUV2ZW50cy5vbkFjdGl2ZUNoYW5nZWQuZ2V0RXZlbnQoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtDb250YWluZXIsIENvbnRhaW5lckNvbmZpZ30gZnJvbSAnLi9jb250YWluZXInO1xuaW1wb3J0IHtTZXR0aW5nc1BhbmVsSXRlbX0gZnJvbSAnLi9zZXR0aW5nc3BhbmVsaXRlbSc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHtFdmVudCwgRXZlbnREaXNwYXRjaGVyLCBOb0FyZ3N9IGZyb20gJy4uL2V2ZW50ZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgQnJvd3NlclV0aWxzIH0gZnJvbSAnLi4vYnJvd3NlcnV0aWxzJztcblxuLyoqXG4gKiBBIHBhbmVsIGNvbnRhaW5pbmcgYSBsaXN0IG9mIHtAbGluayBTZXR0aW5nc1BhbmVsSXRlbSBpdGVtc30gdGhhdCByZXByZXNlbnQgbGFiZWxsZWQgc2V0dGluZ3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXR0aW5nc1BhbmVsUGFnZSBleHRlbmRzIENvbnRhaW5lcjxDb250YWluZXJDb25maWc+IHtcblxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDTEFTU19MQVNUID0gJ2xhc3QnO1xuXG4gIHByaXZhdGUgc2V0dGluZ3NQYW5lbFBhZ2VFdmVudHMgPSB7XG4gICAgb25TZXR0aW5nc1N0YXRlQ2hhbmdlZDogbmV3IEV2ZW50RGlzcGF0Y2hlcjxTZXR0aW5nc1BhbmVsUGFnZSwgTm9BcmdzPigpLFxuICAgIG9uQWN0aXZlOiBuZXcgRXZlbnREaXNwYXRjaGVyPFNldHRpbmdzUGFuZWxQYWdlLCBOb0FyZ3M+KCksXG4gICAgb25JbmFjdGl2ZTogbmV3IEV2ZW50RGlzcGF0Y2hlcjxTZXR0aW5nc1BhbmVsUGFnZSwgTm9BcmdzPigpLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29udGFpbmVyQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZzxDb250YWluZXJDb25maWc+KGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1zZXR0aW5ncy1wYW5lbC1wYWdlJyxcbiAgICAgIHJvbGU6ICdtZW51JyxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgLy8gRmlyZSBldmVudCB3aGVuIHRoZSBzdGF0ZSBvZiBhIHNldHRpbmdzLWl0ZW0gaGFzIGNoYW5nZWRcbiAgICBsZXQgc2V0dGluZ3NTdGF0ZUNoYW5nZWRIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgdGhpcy5vblNldHRpbmdzU3RhdGVDaGFuZ2VkRXZlbnQoKTtcblxuICAgICAgLy8gQXR0YWNoIG1hcmtlciBjbGFzcyB0byBsYXN0IHZpc2libGUgaXRlbVxuICAgICAgbGV0IGxhc3RTaG93bkl0ZW0gPSBudWxsO1xuICAgICAgZm9yIChsZXQgY29tcG9uZW50IG9mIHRoaXMuZ2V0SXRlbXMoKSkge1xuICAgICAgICBjb21wb25lbnQuZ2V0RG9tRWxlbWVudCgpLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4Q3NzKFNldHRpbmdzUGFuZWxQYWdlLkNMQVNTX0xBU1QpKTtcbiAgICAgICAgaWYgKGNvbXBvbmVudC5pc1Nob3duKCkpIHtcbiAgICAgICAgICBsYXN0U2hvd25JdGVtID0gY29tcG9uZW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobGFzdFNob3duSXRlbSkge1xuICAgICAgICBsYXN0U2hvd25JdGVtLmdldERvbUVsZW1lbnQoKS5hZGRDbGFzcyh0aGlzLnByZWZpeENzcyhTZXR0aW5nc1BhbmVsUGFnZS5DTEFTU19MQVNUKSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBmb3IgKGxldCBjb21wb25lbnQgb2YgdGhpcy5nZXRJdGVtcygpKSB7XG4gICAgICBjb21wb25lbnQub25BY3RpdmVDaGFuZ2VkLnN1YnNjcmliZShzZXR0aW5nc1N0YXRlQ2hhbmdlZEhhbmRsZXIpO1xuICAgIH1cbiAgfVxuXG4gIGhhc0FjdGl2ZVNldHRpbmdzKCk6IGJvb2xlYW4ge1xuICAgIGZvciAobGV0IGNvbXBvbmVudCBvZiB0aGlzLmdldEl0ZW1zKCkpIHtcbiAgICAgIGlmIChjb21wb25lbnQuaXNBY3RpdmUoKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBnZXRJdGVtcygpOiBTZXR0aW5nc1BhbmVsSXRlbVtdIHtcbiAgICByZXR1cm4gPFNldHRpbmdzUGFuZWxJdGVtW10+dGhpcy5jb25maWcuY29tcG9uZW50cy5maWx0ZXIoY29tcG9uZW50ID0+IGNvbXBvbmVudCBpbnN0YW5jZW9mIFNldHRpbmdzUGFuZWxJdGVtKTtcbiAgfVxuXG4gIG9uU2V0dGluZ3NTdGF0ZUNoYW5nZWRFdmVudCgpIHtcbiAgICB0aGlzLnNldHRpbmdzUGFuZWxQYWdlRXZlbnRzLm9uU2V0dGluZ3NTdGF0ZUNoYW5nZWQuZGlzcGF0Y2godGhpcyk7XG4gIH1cblxuICBnZXQgb25TZXR0aW5nc1N0YXRlQ2hhbmdlZCgpOiBFdmVudDxTZXR0aW5nc1BhbmVsUGFnZSwgTm9BcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuc2V0dGluZ3NQYW5lbFBhZ2VFdmVudHMub25TZXR0aW5nc1N0YXRlQ2hhbmdlZC5nZXRFdmVudCgpO1xuICB9XG5cbiAgb25BY3RpdmVFdmVudCgpIHtcbiAgICBjb25zdCBhY3RpdmVJdGVtcyA9IHRoaXMuZ2V0SXRlbXMoKS5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0uaXNBY3RpdmUoKSk7XG5cbiAgICB0aGlzLnNldHRpbmdzUGFuZWxQYWdlRXZlbnRzLm9uQWN0aXZlLmRpc3BhdGNoKHRoaXMpO1xuICAgIC8vIERpc2FibGUgZm9jdXMgZm9yIGlPUyBhbmQgaVBhZE9TIDEzLiBUaGV5IG9wZW4gc2VsZWN0IGJveGVzIGF1dG9tYXRpY2FsbHkgb24gZm9jdXMgYW5kIHdlIHdhbnQgdG8gYXZvaWQgdGhhdC5cbiAgICBpZiAoYWN0aXZlSXRlbXMubGVuZ3RoID4gMCAmJiAhQnJvd3NlclV0aWxzLmlzSU9TICYmICEoQnJvd3NlclV0aWxzLmlzTWFjSW50ZWwgJiYgQnJvd3NlclV0aWxzLmlzVG91Y2hTdXBwb3J0ZWQpKSB7XG4gICAgICBhY3RpdmVJdGVtc1swXS5nZXREb21FbGVtZW50KCkuZm9jdXNUb0ZpcnN0SW5wdXQoKTtcbiAgICB9XG4gIH1cblxuICBnZXQgb25BY3RpdmUoKTogRXZlbnQ8U2V0dGluZ3NQYW5lbFBhZ2UsIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLnNldHRpbmdzUGFuZWxQYWdlRXZlbnRzLm9uQWN0aXZlLmdldEV2ZW50KCk7XG4gIH1cblxuICBvbkluYWN0aXZlRXZlbnQoKSB7XG4gICAgdGhpcy5zZXR0aW5nc1BhbmVsUGFnZUV2ZW50cy5vbkluYWN0aXZlLmRpc3BhdGNoKHRoaXMpO1xuICB9XG5cbiAgZ2V0IG9uSW5hY3RpdmUoKTogRXZlbnQ8U2V0dGluZ3NQYW5lbFBhZ2UsIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLnNldHRpbmdzUGFuZWxQYWdlRXZlbnRzLm9uSW5hY3RpdmUuZ2V0RXZlbnQoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7U2V0dGluZ3NQYW5lbFBhZ2VOYXZpZ2F0b3JCdXR0b24sIFNldHRpbmdzUGFuZWxQYWdlTmF2aWdhdG9yQ29uZmlnfSBmcm9tICcuL3NldHRpbmdzcGFuZWxwYWdlbmF2aWdhdG9yYnV0dG9uJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5cbmV4cG9ydCBjbGFzcyBTZXR0aW5nc1BhbmVsUGFnZUJhY2tCdXR0b24gZXh0ZW5kcyBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckJ1dHRvbiB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXNldHRpbmdzcGFuZWxwYWdlYmFja2J1dHRvbicsXG4gICAgICB0ZXh0OiAnYmFjaycsXG4gICAgfSBhcyBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckNvbmZpZywgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMub25DbGljay5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5wb3BQYWdlKCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7QnV0dG9uLCBCdXR0b25Db25maWd9IGZyb20gJy4vYnV0dG9uJztcbmltcG9ydCB7U2V0dGluZ3NQYW5lbH0gZnJvbSAnLi9zZXR0aW5nc3BhbmVsJztcbmltcG9ydCB7U2V0dGluZ3NQYW5lbFBhZ2V9IGZyb20gJy4vc2V0dGluZ3NwYW5lbHBhZ2UnO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IFVJSW5zdGFuY2VNYW5hZ2VyIH0gZnJvbSAnLi4vdWltYW5hZ2VyJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgYSB7QGxpbmsgU2V0dGluZ3NQYW5lbFBhZ2VOYXZpZ2F0b3JCdXR0b259XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2V0dGluZ3NQYW5lbFBhZ2VOYXZpZ2F0b3JDb25maWcgZXh0ZW5kcyBCdXR0b25Db25maWcge1xuICAvKipcbiAgICogQ29udGFpbmVyIGBTZXR0aW5nc1BhbmVsYCB3aGVyZSB0aGUgbmF2aWdhdGlvbiB0YWtlcyBwbGFjZVxuICAgKi9cbiAgY29udGFpbmVyOiBTZXR0aW5nc1BhbmVsO1xuICAvKipcbiAgICogUGFnZSB3aGVyZSB0aGUgYnV0dG9uIHNob3VsZCBuYXZpZ2F0ZSB0b1xuICAgKiBJZiBlbXB0eSBpdCB3aWxsIG5hdmlnYXRlIHRvIHRoZSByb290IHBhZ2UgKG5vdCBpbnRlbmRlZCB0byB1c2UgYXMgbmF2aWdhdGUgYmFjayBiZWhhdmlvcilcbiAgICovXG4gIHRhcmdldFBhZ2U/OiBTZXR0aW5nc1BhbmVsUGFnZTtcblxuICAvKipcbiAgICogV0NBRzIwIHN0YW5kYXJkOiBFc3RhYmxpc2hlcyByZWxhdGlvbnNoaXBzIGJldHdlZW4gb2JqZWN0cyBhbmQgdGhlaXIgbGFiZWwocylcbiAgICovXG4gIGFyaWFMYWJlbGxlZEJ5Pzogc3RyaW5nO1xufVxuXG4vKipcbiAqIENhbiBiZSB1c2VkIHRvIG5hdmlnYXRlIGJldHdlZW4gU2V0dGluZ3NQYW5lbFBhZ2VzXG4gKlxuICogRXhhbXBsZTpcbiAqICBsZXQgc2V0dGluZ1BhbmVsTmF2aWdhdGlvbkJ1dHRvbiA9IG5ldyBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckJ1dHRvbih7XG4gKiAgICBjb250YWluZXI6IHNldHRpbmdzUGFuZWwsXG4gKiAgICB0YXJnZXRQYWdlOiBzZXR0aW5nc1BhbmVsUGFnZSxcbiAqICB9KTtcbiAqXG4gKiAgc2V0dGluZ3NQYW5lbFBhZ2UuYWRkQ29tcG9uZW50KHNldHRpbmdQYW5lbE5hdmlnYXRpb25CdXR0b24pO1xuICpcbiAqIERvbid0IGZvcmdldCB0byBhZGQgdGhlIHNldHRpbmdQYW5lbE5hdmlnYXRpb25CdXR0b24gdG8gdGhlIHNldHRpbmdzUGFuZWxQYWdlLlxuICovXG5leHBvcnQgY2xhc3MgU2V0dGluZ3NQYW5lbFBhZ2VOYXZpZ2F0b3JCdXR0b24gZXh0ZW5kcyBCdXR0b248U2V0dGluZ3NQYW5lbFBhZ2VOYXZpZ2F0b3JDb25maWc+IHtcbiAgcHJpdmF0ZSByZWFkb25seSBjb250YWluZXI6IFNldHRpbmdzUGFuZWw7XG4gIHByaXZhdGUgcmVhZG9ubHkgdGFyZ2V0UGFnZT86IFNldHRpbmdzUGFuZWxQYWdlO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU2V0dGluZ3NQYW5lbFBhZ2VOYXZpZ2F0b3JDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHt9IGFzIFNldHRpbmdzUGFuZWxQYWdlTmF2aWdhdG9yQ29uZmlnLCB0aGlzLmNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbnRhaW5lciA9ICh0aGlzLmNvbmZpZyBhcyBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckNvbmZpZykuY29udGFpbmVyO1xuICAgIHRoaXMudGFyZ2V0UGFnZSA9ICh0aGlzLmNvbmZpZyBhcyBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckNvbmZpZykudGFyZ2V0UGFnZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBuYXZpZ2F0ZSBvbmUgbGV2ZWwgYmFja1xuICAgKi9cbiAgcG9wUGFnZSgpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5wb3BTZXR0aW5nc1BhbmVsUGFnZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIG5hdmlnYXRlIHRvIHRoZSB0YXJnZXQgcGFnZVxuICAgKi9cbiAgcHVzaFRhcmdldFBhZ2UoKSB7XG4gICAgdGhpcy5jb250YWluZXIuc2V0QWN0aXZlUGFnZSh0aGlzLnRhcmdldFBhZ2UpO1xuICB9XG59XG4iLCJpbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHtTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckJ1dHRvbiwgU2V0dGluZ3NQYW5lbFBhZ2VOYXZpZ2F0b3JDb25maWd9IGZyb20gJy4vc2V0dGluZ3NwYW5lbHBhZ2VuYXZpZ2F0b3JidXR0b24nO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbmV4cG9ydCBjbGFzcyBTZXR0aW5nc1BhbmVsUGFnZU9wZW5CdXR0b24gZXh0ZW5kcyBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckJ1dHRvbiB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU2V0dGluZ3NQYW5lbFBhZ2VOYXZpZ2F0b3JDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1zZXR0aW5nc3BhbmVscGFnZW9wZW5idXR0b24nLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ29wZW4nKSxcbiAgICAgIHJvbGU6ICdtZW51aXRlbScsXG4gICAgfSBhcyBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckNvbmZpZywgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmF0dHIoJ2FyaWEtaGFzcG9wdXAnLCAndHJ1ZScpO1xuICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmF0dHIoJ2FyaWEtb3ducycsIHRoaXMuY29uZmlnLnRhcmdldFBhZ2UuZ2V0Q29uZmlnKCkuaWQpO1xuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLnB1c2hUYXJnZXRQYWdlKCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7VG9nZ2xlQnV0dG9uLCBUb2dnbGVCdXR0b25Db25maWd9IGZyb20gJy4vdG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7U2V0dGluZ3NQYW5lbH0gZnJvbSAnLi9zZXR0aW5nc3BhbmVsJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge0NvbXBvbmVudCwgQ29tcG9uZW50Q29uZmlnfSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQge0FycmF5VXRpbHN9IGZyb20gJy4uL2FycmF5dXRpbHMnO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIHRoZSB7QGxpbmsgU2V0dGluZ3NUb2dnbGVCdXR0b259LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNldHRpbmdzVG9nZ2xlQnV0dG9uQ29uZmlnIGV4dGVuZHMgVG9nZ2xlQnV0dG9uQ29uZmlnIHtcbiAgLyoqXG4gICAqIFRoZSBzZXR0aW5ncyBwYW5lbCB3aG9zZSB2aXNpYmlsaXR5IHRoZSBidXR0b24gc2hvdWxkIHRvZ2dsZS5cbiAgICovXG4gIHNldHRpbmdzUGFuZWw6IFNldHRpbmdzUGFuZWw7XG5cbiAgLyoqXG4gICAqIERlY2lkZXMgaWYgdGhlIGJ1dHRvbiBzaG91bGQgYmUgYXV0b21hdGljYWxseSBoaWRkZW4gd2hlbiB0aGUgc2V0dGluZ3MgcGFuZWwgZG9lcyBub3QgY29udGFpbiBhbnkgYWN0aXZlIHNldHRpbmdzLlxuICAgKiBEZWZhdWx0OiB0cnVlXG4gICAqL1xuICBhdXRvSGlkZVdoZW5Ob0FjdGl2ZVNldHRpbmdzPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBBIGJ1dHRvbiB0aGF0IHRvZ2dsZXMgdmlzaWJpbGl0eSBvZiBhIHNldHRpbmdzIHBhbmVsLlxuICovXG5leHBvcnQgY2xhc3MgU2V0dGluZ3NUb2dnbGVCdXR0b24gZXh0ZW5kcyBUb2dnbGVCdXR0b248U2V0dGluZ3NUb2dnbGVCdXR0b25Db25maWc+IHtcblxuICBwcml2YXRlIHZpc2libGVTZXR0aW5nc1BhbmVsczogU2V0dGluZ3NQYW5lbFtdID0gW107XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTZXR0aW5nc1RvZ2dsZUJ1dHRvbkNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICBpZiAoIWNvbmZpZy5zZXR0aW5nc1BhbmVsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIFNldHRpbmdzUGFuZWwgaXMgbWlzc2luZycpO1xuICAgIH1cblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktc2V0dGluZ3N0b2dnbGVidXR0b24nLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzJyksXG4gICAgICBzZXR0aW5nc1BhbmVsOiBudWxsLFxuICAgICAgYXV0b0hpZGVXaGVuTm9BY3RpdmVTZXR0aW5nczogdHJ1ZSxcbiAgICAgIHJvbGU6ICdwb3AtdXAgYnV0dG9uJyxcbiAgICB9LCA8U2V0dGluZ3NUb2dnbGVCdXR0b25Db25maWc+dGhpcy5jb25maWcpO1xuXG4gICAgLyoqXG4gICAgICogV0NBRzIwIHN0YW5kYXJkIGRlZmluZXMgd2hpY2ggcG9wdXAgbWVudSAoZWxlbWVudCBpZCkgaXMgb3duZWQgYnkgdGhlIGJ1dHRvblxuICAgICAqL1xuICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmF0dHIoJ2FyaWEtb3ducycsIGNvbmZpZy5zZXR0aW5nc1BhbmVsLmdldEFjdGl2ZVBhZ2UoKS5nZXRDb25maWcoKS5pZCk7XG5cbiAgICAvKipcbiAgICAgKiBXQ0FHMjAgc3RhbmRhcmQgZGVmaW5lcyB0aGF0IGEgYnV0dG9uIGhhcyBhIHBvcHVwIG1lbnUgYm91bmQgdG8gaXRcbiAgICAgKi9cbiAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hdHRyKCdhcmlhLWhhc3BvcHVwJywgJ3RydWUnKTtcblxuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuICAgIGxldCBzZXR0aW5nc1BhbmVsID0gY29uZmlnLnNldHRpbmdzUGFuZWw7XG5cbiAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIC8vIG9ubHkgaGlkZSBvdGhlciBgU2V0dGluZ3NQYW5lbGBzIGlmIGEgbmV3IG9uZSB3aWxsIGJlIG9wZW5lZFxuICAgICAgaWYgKCFzZXR0aW5nc1BhbmVsLmlzU2hvd24oKSkge1xuICAgICAgICAvLyBIaWRlIGFsbCBvcGVuIFNldHRpbmdzUGFuZWxzIGJlZm9yZSBvcGVuaW5nIHRoaXMgYnV0dG9uJ3MgcGFuZWxcbiAgICAgICAgLy8gKFdlIG5lZWQgdG8gaXRlcmF0ZSBhIGNvcHkgYmVjYXVzZSBoaWRpbmcgdGhlbSB3aWxsIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZW1zZWx2ZXMgZnJvbSB0aGUgYXJyYXlcbiAgICAgICAgLy8gZHVlIHRvIHRoZSBzdWJzY3JpYmVPbmNlIGFib3ZlKVxuICAgICAgICB0aGlzLnZpc2libGVTZXR0aW5nc1BhbmVscy5zbGljZSgpLmZvckVhY2goc2V0dGluZ3NQYW5lbCA9PiBzZXR0aW5nc1BhbmVsLmhpZGUoKSk7XG4gICAgICB9XG4gICAgICBzZXR0aW5nc1BhbmVsLnRvZ2dsZUhpZGRlbigpO1xuICAgIH0pO1xuICAgIHNldHRpbmdzUGFuZWwub25TaG93LnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAvLyBTZXQgdG9nZ2xlIHN0YXR1cyB0byBvbiB3aGVuIHRoZSBzZXR0aW5ncyBwYW5lbCBzaG93c1xuICAgICAgdGhpcy5vbigpO1xuICAgIH0pO1xuICAgIHNldHRpbmdzUGFuZWwub25IaWRlLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAvLyBTZXQgdG9nZ2xlIHN0YXR1cyB0byBvZmYgd2hlbiB0aGUgc2V0dGluZ3MgcGFuZWwgaGlkZXNcbiAgICAgIHRoaXMub2ZmKCk7XG4gICAgfSk7XG5cbiAgICAvLyBFbnN1cmUgdGhhdCBvbmx5IG9uZSBgU2V0dGluZ1BhbmVsYCBpcyB2aXNpYmxlIGF0IG9uY2VcbiAgICAvLyBLZWVwIHRyYWNrIG9mIHNob3duIFNldHRpbmdzUGFuZWxzXG4gICAgdWltYW5hZ2VyLm9uQ29tcG9uZW50U2hvdy5zdWJzY3JpYmUoKHNlbmRlcjogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4pID0+IHtcbiAgICAgIGlmIChzZW5kZXIgaW5zdGFuY2VvZiBTZXR0aW5nc1BhbmVsKSB7XG4gICAgICAgIHRoaXMudmlzaWJsZVNldHRpbmdzUGFuZWxzLnB1c2goc2VuZGVyKTtcbiAgICAgICAgc2VuZGVyLm9uSGlkZS5zdWJzY3JpYmVPbmNlKCgpID0+IEFycmF5VXRpbHMucmVtb3ZlKHRoaXMudmlzaWJsZVNldHRpbmdzUGFuZWxzLCBzZW5kZXIpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEhhbmRsZSBhdXRvbWF0aWMgaGlkaW5nIG9mIHRoZSBidXR0b24gaWYgdGhlcmUgYXJlIG5vIHNldHRpbmdzIGZvciB0aGUgdXNlciB0byBpbnRlcmFjdCB3aXRoXG4gICAgaWYgKGNvbmZpZy5hdXRvSGlkZVdoZW5Ob0FjdGl2ZVNldHRpbmdzKSB7XG4gICAgICAvLyBTZXR1cCBoYW5kbGVyIHRvIHNob3cvaGlkZSBidXR0b24gd2hlbiB0aGUgc2V0dGluZ3MgY2hhbmdlXG4gICAgICBsZXQgc2V0dGluZ3NQYW5lbEl0ZW1zQ2hhbmdlZEhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgIGlmIChzZXR0aW5nc1BhbmVsLnJvb3RQYWdlSGFzQWN0aXZlU2V0dGluZ3MoKSkge1xuICAgICAgICAgIGlmICh0aGlzLmlzSGlkZGVuKCkpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodGhpcy5pc1Nob3duKCkpIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIC8vIFdpcmUgdGhlIGhhbmRsZXIgdG8gdGhlIGV2ZW50XG4gICAgICBzZXR0aW5nc1BhbmVsLm9uU2V0dGluZ3NTdGF0ZUNoYW5nZWQuc3Vic2NyaWJlKHNldHRpbmdzUGFuZWxJdGVtc0NoYW5nZWRIYW5kbGVyKTtcbiAgICAgIC8vIENhbGwgaGFuZGxlciBmb3IgZmlyc3QgaW5pdCBhdCBzdGFydHVwXG4gICAgICBzZXR0aW5nc1BhbmVsSXRlbXNDaGFuZ2VkSGFuZGxlcigpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHtDb21wb25lbnQsIENvbXBvbmVudENvbmZpZ30gZnJvbSAnLi9jb21wb25lbnQnO1xuXG4vKipcbiAqIEEgZHVtbXkgY29tcG9uZW50IHRoYXQganVzdCByZXNlcnZlcyBzb21lIHNwYWNlIGFuZCBkb2VzIG5vdGhpbmcgZWxzZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFNwYWNlciBleHRlbmRzIENvbXBvbmVudDxDb21wb25lbnRDb25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbXBvbmVudENvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktc3BhY2VyJyxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuXG4gIHByb3RlY3RlZCBvblNob3dFdmVudCgpOiB2b2lkIHtcbiAgICAvLyBkaXNhYmxlIGV2ZW50IGZpcmluZyBieSBvdmVyd3JpdGluZyBhbmQgbm90IGNhbGxpbmcgc3VwZXJcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkhpZGVFdmVudCgpOiB2b2lkIHtcbiAgICAvLyBkaXNhYmxlIGV2ZW50IGZpcmluZyBieSBvdmVyd3JpdGluZyBhbmQgbm90IGNhbGxpbmcgc3VwZXJcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkhvdmVyQ2hhbmdlZEV2ZW50KGhvdmVyZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAvLyBkaXNhYmxlIGV2ZW50IGZpcmluZyBieSBvdmVyd3JpdGluZyBhbmQgbm90IGNhbGxpbmcgc3VwZXJcbiAgfVxufSIsImltcG9ydCB7TGlzdEJveH0gZnJvbSAnLi9saXN0Ym94JztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge1N1YnRpdGxlU3dpdGNoSGFuZGxlcn0gZnJvbSAnLi4vc3VidGl0bGV1dGlscyc7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuXG4vKipcbiAqIEEgZWxlbWVudCB0aGF0IGlzIHNpbWlsYXIgdG8gYSBzZWxlY3QgYm94IHdoZXJlIHRoZSB1c2VyIGNhbiBzZWxlY3QgYSBzdWJ0aXRsZVxuICovXG5leHBvcnQgY2xhc3MgU3VidGl0bGVMaXN0Qm94IGV4dGVuZHMgTGlzdEJveCB7XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIG5ldyBTdWJ0aXRsZVN3aXRjaEhhbmRsZXIocGxheWVyLCB0aGlzLCB1aW1hbmFnZXIpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb250YWluZXIsIENvbnRhaW5lckNvbmZpZyB9IGZyb20gJy4vY29udGFpbmVyJztcbmltcG9ydCB7IFVJSW5zdGFuY2VNYW5hZ2VyIH0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IExhYmVsLCBMYWJlbENvbmZpZyB9IGZyb20gJy4vbGFiZWwnO1xuaW1wb3J0IHsgQ29tcG9uZW50Q29uZmlnLCBDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBDb250cm9sQmFyIH0gZnJvbSAnLi9jb250cm9sYmFyJztcbmltcG9ydCB7IEV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJy4uL2V2ZW50ZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBET00sIFNpemUgfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHsgUGxheWVyQVBJLCBTdWJ0aXRsZUN1ZUV2ZW50IH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5pbXBvcnQgeyBWdHRVdGlscyB9IGZyb20gJy4uL3Z0dHV0aWxzJztcbmltcG9ydCB7IFZUVFByb3BlcnRpZXMgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXIvdHlwZXMvc3VidGl0bGVzL3Z0dC9BUEknO1xuXG5pbnRlcmZhY2UgU3VidGl0bGVDcm9wRGV0ZWN0aW9uUmVzdWx0IHtcbiAgdG9wOiBib29sZWFuO1xuICByaWdodDogYm9vbGVhbjtcbiAgYm90dG9tOiBib29sZWFuO1xuICBsZWZ0OiBib29sZWFuO1xufVxuXG4vKipcbiAqIE92ZXJsYXlzIHRoZSBwbGF5ZXIgdG8gZGlzcGxheSBzdWJ0aXRsZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdWJ0aXRsZU92ZXJsYXkgZXh0ZW5kcyBDb250YWluZXI8Q29udGFpbmVyQ29uZmlnPiB7XG5cbiAgcHJpdmF0ZSBzdWJ0aXRsZU1hbmFnZXI6IEFjdGl2ZVN1YnRpdGxlTWFuYWdlcjtcbiAgcHJpdmF0ZSBwcmV2aWV3U3VidGl0bGVBY3RpdmU6IGJvb2xlYW47XG4gIHByaXZhdGUgcHJldmlld1N1YnRpdGxlOiBTdWJ0aXRsZUxhYmVsO1xuXG4gIHByaXZhdGUgcHJlcHJvY2Vzc0xhYmVsRXZlbnRDYWxsYmFjayA9IG5ldyBFdmVudERpc3BhdGNoZXI8U3VidGl0bGVDdWVFdmVudCwgU3VidGl0bGVMYWJlbD4oKTtcbiAgcHJpdmF0ZSBzdWJ0aXRsZUNvbnRhaW5lck1hbmFnZXI6IFN1YnRpdGxlUmVnaW9uQ29udGFpbmVyTWFuYWdlcjtcblxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDTEFTU19DT05UUk9MQkFSX1ZJU0lCTEUgPSAnY29udHJvbGJhci12aXNpYmxlJztcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ0xBU1NfQ0VBXzYwOCA9ICdjZWE2MDgnO1xuXG4gIC8vIFRoZSBudW1iZXIgb2Ygcm93cyBpbiBhIGNlYTYwOCBncmlkXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENFQTYwOF9OVU1fUk9XUyA9IDE1O1xuICAvLyBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgaW4gYSBjZWE2MDggZ3JpZFxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDRUE2MDhfTlVNX0NPTFVNTlMgPSAzMjtcbiAgLy8gVGhlIG9mZnNldCBpbiBwZXJjZW50IGZvciBvbmUgcm93ICh3aGljaCBpcyBhbHNvIHRoZSBoZWlnaHQgb2YgYSByb3cpXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENFQTYwOF9ST1dfT0ZGU0VUID0gMTAwIC8gU3VidGl0bGVPdmVybGF5LkNFQTYwOF9OVU1fUk9XUztcbiAgLy8gVGhlIG9mZnNldCBpbiBwZXJjZW50IGZvciBvbmUgY29sdW1uICh3aGljaCBpcyBhbHNvIHRoZSB3aWR0aCBvZiBhIGNvbHVtbilcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ0VBNjA4X0NPTFVNTl9PRkZTRVQgPSAxMDAgLyBTdWJ0aXRsZU92ZXJsYXkuQ0VBNjA4X05VTV9DT0xVTU5TO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29udGFpbmVyQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5wcmV2aWV3U3VidGl0bGVBY3RpdmUgPSBmYWxzZTtcbiAgICB0aGlzLnByZXZpZXdTdWJ0aXRsZSA9IG5ldyBTdWJ0aXRsZUxhYmVsKHsgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3N1YnRpdGxlLmV4YW1wbGUnKSB9KTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktc3VidGl0bGUtb3ZlcmxheScsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBzdWJ0aXRsZU1hbmFnZXIgPSBuZXcgQWN0aXZlU3VidGl0bGVNYW5hZ2VyKCk7XG4gICAgdGhpcy5zdWJ0aXRsZU1hbmFnZXIgPSBzdWJ0aXRsZU1hbmFnZXI7XG5cbiAgICB0aGlzLnN1YnRpdGxlQ29udGFpbmVyTWFuYWdlciA9IG5ldyBTdWJ0aXRsZVJlZ2lvbkNvbnRhaW5lck1hbmFnZXIodGhpcyk7XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQ3VlRW50ZXIsIChldmVudDogU3VidGl0bGVDdWVFdmVudCkgPT4ge1xuICAgICAgY29uc3QgbGFiZWwgPSB0aGlzLmdlbmVyYXRlTGFiZWwoZXZlbnQpO1xuICAgICAgc3VidGl0bGVNYW5hZ2VyLmN1ZUVudGVyKGV2ZW50LCBsYWJlbCk7XG5cbiAgICAgIHRoaXMucHJlcHJvY2Vzc0xhYmVsRXZlbnRDYWxsYmFjay5kaXNwYXRjaChldmVudCwgbGFiZWwpO1xuXG4gICAgICBpZiAodGhpcy5wcmV2aWV3U3VidGl0bGVBY3RpdmUpIHtcbiAgICAgICAgdGhpcy5zdWJ0aXRsZUNvbnRhaW5lck1hbmFnZXIucmVtb3ZlTGFiZWwodGhpcy5wcmV2aWV3U3VidGl0bGUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNob3coKTtcblxuICAgICAgdGhpcy5zdWJ0aXRsZUNvbnRhaW5lck1hbmFnZXIuYWRkTGFiZWwobGFiZWwsIHRoaXMuZ2V0RG9tRWxlbWVudCgpLnNpemUoKSk7XG4gICAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudHMoKTtcblxuICAgICAgaWYgKHVpbWFuYWdlci5nZXRDb25maWcoKS5mb3JjZVN1YnRpdGxlc0ludG9WaWV3Q29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlU3VidGl0bGVDcm9wcGluZyhsYWJlbCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQ3VlVXBkYXRlLCAoZXZlbnQ6IFN1YnRpdGxlQ3VlRXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IGxhYmVsID0gdGhpcy5nZW5lcmF0ZUxhYmVsKGV2ZW50KTtcbiAgICAgIGNvbnN0IGxhYmVsVG9SZXBsYWNlID0gc3VidGl0bGVNYW5hZ2VyLmN1ZVVwZGF0ZShldmVudCwgbGFiZWwpO1xuXG4gICAgICB0aGlzLnByZXByb2Nlc3NMYWJlbEV2ZW50Q2FsbGJhY2suZGlzcGF0Y2goZXZlbnQsIGxhYmVsKTtcblxuICAgICAgaWYgKGxhYmVsVG9SZXBsYWNlKSB7XG4gICAgICAgIHRoaXMuc3VidGl0bGVDb250YWluZXJNYW5hZ2VyLnJlcGxhY2VMYWJlbChsYWJlbFRvUmVwbGFjZSwgbGFiZWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAodWltYW5hZ2VyLmdldENvbmZpZygpLmZvcmNlU3VidGl0bGVzSW50b1ZpZXdDb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVTdWJ0aXRsZUNyb3BwaW5nKGxhYmVsKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5DdWVFeGl0LCAoZXZlbnQ6IFN1YnRpdGxlQ3VlRXZlbnQpID0+IHtcbiAgICAgIGxldCBsYWJlbFRvUmVtb3ZlID0gc3VidGl0bGVNYW5hZ2VyLmN1ZUV4aXQoZXZlbnQpO1xuXG4gICAgICBpZiAobGFiZWxUb1JlbW92ZSkge1xuICAgICAgICB0aGlzLnN1YnRpdGxlQ29udGFpbmVyTWFuYWdlci5yZW1vdmVMYWJlbChsYWJlbFRvUmVtb3ZlKTtcbiAgICAgICAgdGhpcy51cGRhdGVDb21wb25lbnRzKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghc3VidGl0bGVNYW5hZ2VyLmhhc0N1ZXMpIHtcbiAgICAgICAgaWYgKCF0aGlzLnByZXZpZXdTdWJ0aXRsZUFjdGl2ZSkge1xuICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc3VidGl0bGVDb250YWluZXJNYW5hZ2VyLmFkZExhYmVsKHRoaXMucHJldmlld1N1YnRpdGxlKTtcbiAgICAgICAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudHMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbGV0IHN1YnRpdGxlQ2xlYXJIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB0aGlzLnN1YnRpdGxlQ29udGFpbmVyTWFuYWdlci5jbGVhcigpO1xuICAgICAgc3VidGl0bGVNYW5hZ2VyLmNsZWFyKCk7XG4gICAgICB0aGlzLnJlbW92ZUNvbXBvbmVudHMoKTtcbiAgICAgIHRoaXMudXBkYXRlQ29tcG9uZW50cygpO1xuICAgIH07XG5cbiAgICBjb25zdCBjbGVhckluYWN0aXZlQ3VlcyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHJlbW92ZWRBY3RpdmVDdWVzID0gc3VidGl0bGVNYW5hZ2VyLmNsZWFySW5hY3RpdmVDdWVzKHBsYXllci5nZXRDdXJyZW50VGltZSgpKTtcbiAgICAgIHJlbW92ZWRBY3RpdmVDdWVzLmZvckVhY2godG9SZW1vdmUgPT4ge1xuICAgICAgICB0aGlzLnN1YnRpdGxlQ29udGFpbmVyTWFuYWdlci5yZW1vdmVMYWJlbCh0b1JlbW92ZS5sYWJlbCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkF1ZGlvQ2hhbmdlZCwgc3VidGl0bGVDbGVhckhhbmRsZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TdWJ0aXRsZUVuYWJsZWQsIHN1YnRpdGxlQ2xlYXJIYW5kbGVyKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU3VidGl0bGVEaXNhYmxlZCwgc3VidGl0bGVDbGVhckhhbmRsZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TZWVrZWQsIGNsZWFySW5hY3RpdmVDdWVzKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVGltZVNoaWZ0ZWQsIGNsZWFySW5hY3RpdmVDdWVzKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheWJhY2tGaW5pc2hlZCwgc3VidGl0bGVDbGVhckhhbmRsZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VVbmxvYWRlZCwgc3VidGl0bGVDbGVhckhhbmRsZXIpO1xuXG4gICAgdWltYW5hZ2VyLm9uQ29tcG9uZW50U2hvdy5zdWJzY3JpYmUoKGNvbXBvbmVudDogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4pID0+IHtcbiAgICAgIGlmIChjb21wb25lbnQgaW5zdGFuY2VvZiBDb250cm9sQmFyKSB7XG4gICAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKFN1YnRpdGxlT3ZlcmxheS5DTEFTU19DT05UUk9MQkFSX1ZJU0lCTEUpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1aW1hbmFnZXIub25Db21wb25lbnRIaWRlLnN1YnNjcmliZSgoY29tcG9uZW50OiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPikgPT4ge1xuICAgICAgaWYgKGNvbXBvbmVudCBpbnN0YW5jZW9mIENvbnRyb2xCYXIpIHtcbiAgICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoU3VidGl0bGVPdmVybGF5LkNMQVNTX0NPTlRST0xCQVJfVklTSUJMRSkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5jb25maWd1cmVDZWE2MDhDYXB0aW9ucyhwbGF5ZXIsIHVpbWFuYWdlcik7XG4gICAgLy8gSW5pdFxuICAgIHN1YnRpdGxlQ2xlYXJIYW5kbGVyKCk7XG4gIH1cblxuICBkZXRlY3RDcm9wcGVkU3VidGl0bGVMYWJlbChcbiAgICBsYWJlbEVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICApOiBTdWJ0aXRsZUNyb3BEZXRlY3Rpb25SZXN1bHQge1xuICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuZ2V0RG9tRWxlbWVudCgpLmdldCgwKTtcblxuICAgIGNvbnN0IGNoaWxkUmVjdCA9IGxhYmVsRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCBwYXJlbnRSZWN0ID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogY2hpbGRSZWN0LnRvcCA8IHBhcmVudFJlY3QudG9wLFxuICAgICAgcmlnaHQ6IGNoaWxkUmVjdC5yaWdodCA+IHBhcmVudFJlY3QucmlnaHQsXG4gICAgICBib3R0b206IGNoaWxkUmVjdC5ib3R0b20gPiBwYXJlbnRSZWN0LmJvdHRvbSxcbiAgICAgIGxlZnQ6IGNoaWxkUmVjdC5sZWZ0IDwgcGFyZW50UmVjdC5sZWZ0LFxuICAgIH07XG4gIH1cblxuICBoYW5kbGVTdWJ0aXRsZUNyb3BwaW5nKGxhYmVsOiBTdWJ0aXRsZUxhYmVsKSB7XG4gICAgY29uc3QgbGFiZWxEb21FbGVtZW50ID0gbGFiZWwuZ2V0RG9tRWxlbWVudCgpO1xuICAgIGNvbnN0IGNyb3BEZXRlY3Rpb24gPSB0aGlzLmRldGVjdENyb3BwZWRTdWJ0aXRsZUxhYmVsKFxuICAgICAgbGFiZWxEb21FbGVtZW50LmdldCgwKSxcbiAgICApO1xuXG4gICAgaWYgKGNyb3BEZXRlY3Rpb24udG9wKSB7XG4gICAgICBsYWJlbERvbUVsZW1lbnQuY3NzKCd0b3AnLCAnMCcpO1xuICAgICAgbGFiZWxEb21FbGVtZW50LnJlbW92ZUNzcygnYm90dG9tJyk7XG4gICAgfVxuXG4gICAgaWYgKGNyb3BEZXRlY3Rpb24ucmlnaHQpIHtcbiAgICAgIGxhYmVsRG9tRWxlbWVudC5jc3MoJ3JpZ2h0JywgJzAnKTtcbiAgICAgIGxhYmVsRG9tRWxlbWVudC5yZW1vdmVDc3MoJ2xlZnQnKTtcbiAgICB9XG5cbiAgICBpZiAoY3JvcERldGVjdGlvbi5ib3R0b20pIHtcbiAgICAgIGxhYmVsRG9tRWxlbWVudC5jc3MoJ2JvdHRvbScsICcwJyk7XG4gICAgICBsYWJlbERvbUVsZW1lbnQucmVtb3ZlQ3NzKCd0b3AnKTtcbiAgICB9XG5cbiAgICBpZiAoY3JvcERldGVjdGlvbi5sZWZ0KSB7XG4gICAgICBsYWJlbERvbUVsZW1lbnQuY3NzKCdsZWZ0JywgJzAnKTtcbiAgICAgIGxhYmVsRG9tRWxlbWVudC5yZW1vdmVDc3MoJ3JpZ2h0Jyk7XG4gICAgfVxuICB9XG5cbiAgZ2VuZXJhdGVMYWJlbChldmVudDogU3VidGl0bGVDdWVFdmVudCk6IFN1YnRpdGxlTGFiZWwge1xuICAgIC8vIFNhbml0aXplIGN1ZSBkYXRhIChtdXN0IGJlIGRvbmUgYmVmb3JlIHRoZSBjdWUgSUQgaXMgZ2VuZXJhdGVkIGluIHN1YnRpdGxlTWFuYWdlci5jdWVFbnRlciAvIHVwZGF0ZSlcbiAgICBpZiAoZXZlbnQucG9zaXRpb24pIHtcbiAgICAgIC8vIFNvbWV0aW1lcyB0aGUgcG9zaXRpb25zIGFyZSB1bmRlZmluZWQsIHdlIGFzc3VtZSB0aGVtIHRvIGJlIHplcm9cbiAgICAgIGV2ZW50LnBvc2l0aW9uLnJvdyA9IGV2ZW50LnBvc2l0aW9uLnJvdyB8fCAwO1xuICAgICAgZXZlbnQucG9zaXRpb24uY29sdW1uID0gZXZlbnQucG9zaXRpb24uY29sdW1uIHx8IDA7XG4gICAgfVxuXG4gICAgY29uc3QgbGFiZWwgPSBuZXcgU3VidGl0bGVMYWJlbCh7XG4gICAgICAvLyBQcmVmZXIgdGhlIEhUTUwgc3VidGl0bGUgdGV4dCBpZiBzZXQsIGVsc2UgdHJ5IGdlbmVyYXRpbmcgYSBpbWFnZSB0YWcgYXMgc3RyaW5nIGZyb20gdGhlIGltYWdlIGF0dHJpYnV0ZSxcbiAgICAgIC8vIGVsc2UgdXNlIHRoZSBwbGFpbiB0ZXh0XG4gICAgICB0ZXh0OiBldmVudC5odG1sIHx8IEFjdGl2ZVN1YnRpdGxlTWFuYWdlci5nZW5lcmF0ZUltYWdlVGFnVGV4dChldmVudC5pbWFnZSkgfHwgZXZlbnQudGV4dCxcbiAgICAgIHZ0dDogZXZlbnQudnR0LFxuICAgICAgcmVnaW9uOiBldmVudC5yZWdpb24sXG4gICAgICByZWdpb25TdHlsZTogZXZlbnQucmVnaW9uU3R5bGUsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbGFiZWw7XG4gIH1cblxuICBjb25maWd1cmVDZWE2MDhDYXB0aW9ucyhwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIC8vIFRoZSBjYWxjdWxhdGVkIGZvbnQgc2l6ZVxuICAgIGxldCBmb250U2l6ZSA9IDA7XG4gICAgLy8gVGhlIHJlcXVpcmVkIGxldHRlciBzcGFjaW5nIHNwcmVhZCB0aGUgdGV4dCBjaGFyYWN0ZXJzIGV2ZW5seSBhY3Jvc3MgdGhlIGdyaWRcbiAgICBsZXQgZm9udExldHRlclNwYWNpbmcgPSAwO1xuICAgIC8vIEZsYWcgdGVsbGluZyBpZiBhIGZvbnQgc2l6ZSBjYWxjdWxhdGlvbiBpcyByZXF1aXJlZCBvZiBpZiB0aGUgY3VycmVudCB2YWx1ZXMgYXJlIHZhbGlkXG4gICAgbGV0IGZvbnRTaXplQ2FsY3VsYXRpb25SZXF1aXJlZCA9IHRydWU7XG4gICAgLy8gRmxhZyB0ZWxsaW5nIGlmIHRoZSBDRUEtNjA4IG1vZGUgaXMgZW5hYmxlZFxuICAgIGxldCBlbmFibGVkID0gZmFsc2U7XG5cbiAgICBjb25zdCB1cGRhdGVDRUE2MDhGb250U2l6ZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGR1bW15TGFiZWwgPSBuZXcgU3VidGl0bGVMYWJlbCh7IHRleHQ6ICdYJyB9KTtcbiAgICAgIGR1bW15TGFiZWwuZ2V0RG9tRWxlbWVudCgpLmNzcyh7XG4gICAgICAgIC8vIEJ5IHVzaW5nIGEgbGFyZ2UgZm9udCBzaXplIHdlIGRvIG5vdCBuZWVkIHRvIHVzZSBtdWx0aXBsZSBsZXR0ZXJzIGFuZCBjYW4gZ2V0IHN0aWxsIGFuXG4gICAgICAgIC8vIGFjY3VyYXRlIG1lYXN1cmVtZW50IGV2ZW4gdGhvdWdoIHRoZSByZXR1cm5lZCBzaXplIGlzIGFuIGludGVnZXIgdmFsdWVcbiAgICAgICAgJ2ZvbnQtc2l6ZSc6ICcyMDBweCcsXG4gICAgICAgICdsaW5lLWhlaWdodCc6ICcyMDBweCcsXG4gICAgICAgICd2aXNpYmlsaXR5JzogJ2hpZGRlbicsXG4gICAgICB9KTtcbiAgICAgIHRoaXMuYWRkQ29tcG9uZW50KGR1bW15TGFiZWwpO1xuICAgICAgdGhpcy51cGRhdGVDb21wb25lbnRzKCk7XG4gICAgICB0aGlzLnNob3coKTtcblxuICAgICAgY29uc3QgZHVtbXlMYWJlbENoYXJXaWR0aCA9IGR1bW15TGFiZWwuZ2V0RG9tRWxlbWVudCgpLndpZHRoKCk7XG4gICAgICBjb25zdCBkdW1teUxhYmVsQ2hhckhlaWdodCA9IGR1bW15TGFiZWwuZ2V0RG9tRWxlbWVudCgpLmhlaWdodCgpO1xuICAgICAgY29uc3QgZm9udFNpemVSYXRpbyA9IGR1bW15TGFiZWxDaGFyV2lkdGggLyBkdW1teUxhYmVsQ2hhckhlaWdodDtcblxuICAgICAgdGhpcy5yZW1vdmVDb21wb25lbnQoZHVtbXlMYWJlbCk7XG4gICAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudHMoKTtcbiAgICAgIGlmICghdGhpcy5zdWJ0aXRsZU1hbmFnZXIuaGFzQ3Vlcykge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2Ugc3VidHJhY3QgMXB4IGhlcmUgdG8gYXZvaWQgbGluZSBicmVha3MgYXQgdGhlIHJpZ2h0IGJvcmRlciBvZiB0aGUgc3VidGl0bGUgb3ZlcmxheSB0aGF0IGNhbiBoYXBwZW5cbiAgICAgIC8vIHdoZW4gdGV4dHMgY29udGFpbiB3aGl0ZXNwYWNlcy4gSXQncyBwcm9iYWJseSBzb21lIGtpbmQgb2YgcGl4ZWwgcm91bmRpbmcgaXNzdWUgaW4gdGhlIGJyb3dzZXInc1xuICAgICAgLy8gbGF5b3V0aW5nLCBidXQgdGhlIGFjdHVhbCByZWFzb24gY291bGQgbm90IGJlIGRldGVybWluZWQuIEFpbWluZyBmb3IgYSB0YXJnZXQgd2lkdGggLSAxcHggd291bGQgd29yayBpblxuICAgICAgLy8gbW9zdCBicm93c2VycywgYnV0IFNhZmFyaSBoYXMgYSBcInF1YW50aXplZFwiIGZvbnQgc2l6ZSByZW5kZXJpbmcgd2l0aCBodWdlIHN0ZXBzIGluIGJldHdlZW4gc28gd2UgbmVlZFxuICAgICAgLy8gdG8gc3VidHJhY3Qgc29tZSBtb3JlIHBpeGVscyB0byBhdm9pZCBsaW5lIGJyZWFrcyB0aGVyZSBhcyB3ZWxsLlxuICAgICAgY29uc3Qgc3VidGl0bGVPdmVybGF5V2lkdGggPSB0aGlzLmdldERvbUVsZW1lbnQoKS53aWR0aCgpIC0gMTA7XG4gICAgICBjb25zdCBzdWJ0aXRsZU92ZXJsYXlIZWlnaHQgPSB0aGlzLmdldERvbUVsZW1lbnQoKS5oZWlnaHQoKTtcblxuICAgICAgLy8gVGhlIHNpemUgcmF0aW8gb2YgdGhlIGxldHRlciBncmlkXG4gICAgICBjb25zdCBmb250R3JpZFNpemVSYXRpbyA9IChkdW1teUxhYmVsQ2hhcldpZHRoICogU3VidGl0bGVPdmVybGF5LkNFQTYwOF9OVU1fQ09MVU1OUykgL1xuICAgICAgICAoZHVtbXlMYWJlbENoYXJIZWlnaHQgKiBTdWJ0aXRsZU92ZXJsYXkuQ0VBNjA4X05VTV9ST1dTKTtcbiAgICAgIC8vIFRoZSBzaXplIHJhdGlvIG9mIHRoZSBhdmFpbGFibGUgc3BhY2UgZm9yIHRoZSBncmlkXG4gICAgICBjb25zdCBzdWJ0aXRsZU92ZXJsYXlTaXplUmF0aW8gPSBzdWJ0aXRsZU92ZXJsYXlXaWR0aCAvIHN1YnRpdGxlT3ZlcmxheUhlaWdodDtcblxuICAgICAgaWYgKHN1YnRpdGxlT3ZlcmxheVNpemVSYXRpbyA+IGZvbnRHcmlkU2l6ZVJhdGlvKSB7XG4gICAgICAgIC8vIFdoZW4gdGhlIGF2YWlsYWJsZSBzcGFjZSBpcyB3aWRlciB0aGFuIHRoZSB0ZXh0IGdyaWQsIHRoZSBmb250IHNpemUgaXMgc2ltcGx5XG4gICAgICAgIC8vIGRldGVybWluZWQgYnkgdGhlIGhlaWdodCBvZiB0aGUgYXZhaWxhYmxlIHNwYWNlLlxuICAgICAgICBmb250U2l6ZSA9IHN1YnRpdGxlT3ZlcmxheUhlaWdodCAvIFN1YnRpdGxlT3ZlcmxheS5DRUE2MDhfTlVNX1JPV1M7XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBhZGRpdGlvbmFsIGxldHRlciBzcGFjaW5nIHJlcXVpcmVkIHRvIGV2ZW5seSBzcHJlYWQgdGhlIHRleHQgYWNyb3NzIHRoZSBncmlkJ3Mgd2lkdGhcbiAgICAgICAgY29uc3QgZ3JpZFNsb3RXaWR0aCA9IHN1YnRpdGxlT3ZlcmxheVdpZHRoIC8gU3VidGl0bGVPdmVybGF5LkNFQTYwOF9OVU1fQ09MVU1OUztcbiAgICAgICAgY29uc3QgZm9udENoYXJXaWR0aCA9IGZvbnRTaXplICogZm9udFNpemVSYXRpbztcbiAgICAgICAgZm9udExldHRlclNwYWNpbmcgPSBncmlkU2xvdFdpZHRoIC0gZm9udENoYXJXaWR0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFdoZW4gdGhlIGF2YWlsYWJsZSBzcGFjZSBpcyBub3Qgd2lkZSBlbm91Z2gsIHRleHRzIHdvdWxkIHZlcnRpY2FsbHkgb3ZlcmxhcCBpZiB3ZSB0YWtlXG4gICAgICAgIC8vIHRoZSBoZWlnaHQgYXMgYSBiYXNlIGZvciB0aGUgZm9udCBzaXplLCBzbyB3ZSBuZWVkIHRvIGxpbWl0IHRoZSBoZWlnaHQuIFdlIGRvIHRoYXRcbiAgICAgICAgLy8gYnkgZGV0ZXJtaW5pbmcgdGhlIGZvbnQgc2l6ZSBieSB0aGUgd2lkdGggb2YgdGhlIGF2YWlsYWJsZSBzcGFjZS5cbiAgICAgICAgZm9udFNpemUgPSBzdWJ0aXRsZU92ZXJsYXlXaWR0aCAvIFN1YnRpdGxlT3ZlcmxheS5DRUE2MDhfTlVNX0NPTFVNTlMgLyBmb250U2l6ZVJhdGlvO1xuICAgICAgICBmb250TGV0dGVyU3BhY2luZyA9IDA7XG4gICAgICB9XG5cbiAgICAgIC8vIFVwZGF0ZSBmb250LXNpemUgb2YgYWxsIGFjdGl2ZSBzdWJ0aXRsZSBsYWJlbHNcbiAgICAgIGZvciAobGV0IGxhYmVsIG9mIHRoaXMuZ2V0Q29tcG9uZW50cygpKSB7XG4gICAgICAgIGlmIChsYWJlbCBpbnN0YW5jZW9mIFN1YnRpdGxlTGFiZWwpIHtcbiAgICAgICAgICBsYWJlbC5nZXREb21FbGVtZW50KCkuY3NzKHtcbiAgICAgICAgICAgICdmb250LXNpemUnOiBgJHtmb250U2l6ZX1weGAsXG4gICAgICAgICAgICAnbGV0dGVyLXNwYWNpbmcnOiBgJHtmb250TGV0dGVyU3BhY2luZ31weGAsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXllclJlc2l6ZWQsICgpID0+IHtcbiAgICAgIGlmIChlbmFibGVkKSB7XG4gICAgICAgIHVwZGF0ZUNFQTYwOEZvbnRTaXplKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb250U2l6ZUNhbGN1bGF0aW9uUmVxdWlyZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5wcmVwcm9jZXNzTGFiZWxFdmVudENhbGxiYWNrLnN1YnNjcmliZSgoZXZlbnQ6IFN1YnRpdGxlQ3VlRXZlbnQsIGxhYmVsOiBTdWJ0aXRsZUxhYmVsKSA9PiB7XG4gICAgICBjb25zdCBpc0NFQTYwOCA9IGV2ZW50LnBvc2l0aW9uICE9IG51bGw7XG4gICAgICBpZiAoIWlzQ0VBNjA4KSB7XG4gICAgICAgIC8vIFNraXAgYWxsIG5vbi1DRUE2MDggY3Vlc1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghZW5hYmxlZCkge1xuICAgICAgICBlbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoU3VidGl0bGVPdmVybGF5LkNMQVNTX0NFQV82MDgpKTtcblxuICAgICAgICAvLyBXZSBjb25kaXRpb25hbGx5IHVwZGF0ZSB0aGUgZm9udCBzaXplIGJ5IHRoaXMgZmxhZyBoZXJlIHRvIGF2b2lkIHVwZGF0aW5nIGV2ZXJ5IHRpbWUgYSBzdWJ0aXRsZVxuICAgICAgICAvLyBpcyBhZGRlZCBpbnRvIGFuIGVtcHR5IG92ZXJsYXkuIEJlY2F1c2Ugd2UgcmVzZXQgdGhlIG92ZXJsYXkgd2hlbiBhbGwgc3VidGl0bGVzIGFyZSBnb25lLCB0aGlzXG4gICAgICAgIC8vIHdvdWxkIHRyaWdnZXIgYW4gdW5uZWNlc3NhcnkgdXBkYXRlIGV2ZXJ5IHRpbWUsIGJ1dCBpdCdzIG9ubHkgcmVxdWlyZWQgdW5kZXIgY2VydGFpbiBjb25kaXRpb25zLFxuICAgICAgICAvLyBlLmcuIGFmdGVyIHRoZSBwbGF5ZXIgc2l6ZSBoYXMgY2hhbmdlZC5cbiAgICAgICAgaWYgKGZvbnRTaXplQ2FsY3VsYXRpb25SZXF1aXJlZCkge1xuICAgICAgICAgIHVwZGF0ZUNFQTYwOEZvbnRTaXplKCk7XG4gICAgICAgICAgZm9udFNpemVDYWxjdWxhdGlvblJlcXVpcmVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGFiZWwuZ2V0RG9tRWxlbWVudCgpLmNzcyh7XG4gICAgICAgICdsZWZ0JzogYCR7ZXZlbnQucG9zaXRpb24uY29sdW1uICogU3VidGl0bGVPdmVybGF5LkNFQTYwOF9DT0xVTU5fT0ZGU0VUfSVgLFxuICAgICAgICAndG9wJzogYCR7ZXZlbnQucG9zaXRpb24ucm93ICogU3VidGl0bGVPdmVybGF5LkNFQTYwOF9ST1dfT0ZGU0VUfSVgLFxuICAgICAgICAnZm9udC1zaXplJzogYCR7Zm9udFNpemV9cHhgLFxuICAgICAgICAnbGV0dGVyLXNwYWNpbmcnOiBgJHtmb250TGV0dGVyU3BhY2luZ31weGAsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc2V0ID0gKCkgPT4ge1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoU3VidGl0bGVPdmVybGF5LkNMQVNTX0NFQV82MDgpKTtcbiAgICAgIGVuYWJsZWQgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkN1ZUV4aXQsICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5zdWJ0aXRsZU1hbmFnZXIuaGFzQ3Vlcykge1xuICAgICAgICAvLyBEaXNhYmxlIENFQS02MDggbW9kZSB3aGVuIGFsbCBzdWJ0aXRsZXMgYXJlIGdvbmUgKHRvIGFsbG93IGNvcnJlY3QgZm9ybWF0dGluZyBhbmRcbiAgICAgICAgLy8gZGlzcGxheSBvZiBvdGhlciB0eXBlcyBvZiBzdWJ0aXRsZXMsIGUuZy4gdGhlIGZvcm1hdHRpbmcgcHJldmlldyBzdWJ0aXRsZSlcbiAgICAgICAgcmVzZXQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VVbmxvYWRlZCwgcmVzZXQpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TdWJ0aXRsZUVuYWJsZWQsIHJlc2V0KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU3VidGl0bGVEaXNhYmxlZCwgcmVzZXQpO1xuICB9XG5cbiAgZW5hYmxlUHJldmlld1N1YnRpdGxlTGFiZWwoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLnN1YnRpdGxlTWFuYWdlci5oYXNDdWVzKSB7XG4gICAgICB0aGlzLnByZXZpZXdTdWJ0aXRsZUFjdGl2ZSA9IHRydWU7XG4gICAgICB0aGlzLnN1YnRpdGxlQ29udGFpbmVyTWFuYWdlci5hZGRMYWJlbCh0aGlzLnByZXZpZXdTdWJ0aXRsZSk7XG4gICAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudHMoKTtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZVByZXZpZXdTdWJ0aXRsZUxhYmVsKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnByZXZpZXdTdWJ0aXRsZUFjdGl2ZSkge1xuICAgICAgdGhpcy5wcmV2aWV3U3VidGl0bGVBY3RpdmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuc3VidGl0bGVDb250YWluZXJNYW5hZ2VyLnJlbW92ZUxhYmVsKHRoaXMucHJldmlld1N1YnRpdGxlKTtcbiAgICAgIHRoaXMudXBkYXRlQ29tcG9uZW50cygpO1xuICAgIH1cbiAgfVxufVxuXG5pbnRlcmZhY2UgQWN0aXZlU3VidGl0bGVDdWUge1xuICBldmVudDogU3VidGl0bGVDdWVFdmVudDtcbiAgbGFiZWw6IFN1YnRpdGxlTGFiZWw7XG59XG5cbmludGVyZmFjZSBBY3RpdmVTdWJ0aXRsZUN1ZU1hcCB7XG4gIFtpZDogc3RyaW5nXTogQWN0aXZlU3VidGl0bGVDdWVbXTtcbn1cblxuaW50ZXJmYWNlIFN1YnRpdGxlTGFiZWxDb25maWcgZXh0ZW5kcyBMYWJlbENvbmZpZyB7XG4gIHZ0dD86IFZUVFByb3BlcnRpZXM7XG4gIHJlZ2lvbj86IHN0cmluZztcbiAgcmVnaW9uU3R5bGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBTdWJ0aXRsZUxhYmVsIGV4dGVuZHMgTGFiZWw8U3VidGl0bGVMYWJlbENvbmZpZz4ge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU3VidGl0bGVMYWJlbENvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktc3VidGl0bGUtbGFiZWwnLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGdldCB2dHQoKTogVlRUUHJvcGVydGllcyB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLnZ0dDtcbiAgfVxuXG4gIGdldCByZWdpb24oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcucmVnaW9uO1xuICB9XG5cbiAgZ2V0IHJlZ2lvblN0eWxlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLnJlZ2lvblN0eWxlO1xuICB9XG59XG5cbmNsYXNzIEFjdGl2ZVN1YnRpdGxlTWFuYWdlciB7XG5cbiAgcHJpdmF0ZSBhY3RpdmVTdWJ0aXRsZUN1ZU1hcDogQWN0aXZlU3VidGl0bGVDdWVNYXA7XG4gIHByaXZhdGUgYWN0aXZlU3VidGl0bGVDdWVDb3VudDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYWN0aXZlU3VidGl0bGVDdWVNYXAgPSB7fTtcbiAgICB0aGlzLmFjdGl2ZVN1YnRpdGxlQ3VlQ291bnQgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgYSB1bmlxdWUgSUQgZm9yIGEgc3VidGl0bGUgY3VlLCB3aGljaCBpcyBuZWVkZWQgdG8gYXNzb2NpYXRlIGFuIEN1ZUVudGVyIHdpdGggaXRzIEN1ZUV4aXRcbiAgICogZXZlbnQgc28gd2UgY2FuIHJlbW92ZSB0aGUgY29ycmVjdCBzdWJ0aXRsZSBpbiBDdWVFeGl0IHdoZW4gbXVsdGlwbGUgc3VidGl0bGVzIGFyZSBhY3RpdmUgYXQgdGhlIHNhbWUgdGltZS5cbiAgICogVGhlIHN0YXJ0IHRpbWUgcGx1cyB0aGUgdGV4dCBzaG91bGQgbWFrZSBhIHVuaXF1ZSBpZGVudGlmaWVyLCBhbmQgaW4gdGhlIG9ubHkgY2FzZSB3aGVyZSBhIGNvbGxpc2lvblxuICAgKiBjYW4gaGFwcGVuLCB0d28gc2ltaWxhciB0ZXh0cyB3aWxsIGJlIGRpc3BsYXllZCBhdCBhIHNpbWlsYXIgdGltZSBhbmQgYSBzaW1pbGFyIHBvc2l0aW9uIChvciB3aXRob3V0IHBvc2l0aW9uKS5cbiAgICogVGhlIHN0YXJ0IHRpbWUgc2hvdWxkIGFsd2F5cyBiZSBrbm93biwgYmVjYXVzZSBpdCBpcyByZXF1aXJlZCB0byBzY2hlZHVsZSB0aGUgQ3VlRW50ZXIgZXZlbnQuIFRoZSBlbmQgdGltZVxuICAgKiBtdXN0IG5vdCBuZWNlc3NhcmlseSBiZSBrbm93biBhbmQgdGhlcmVmb3JlIGNhbm5vdCBiZSB1c2VkIGZvciB0aGUgSUQuXG4gICAqIEBwYXJhbSBldmVudFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBjYWxjdWxhdGVJZChldmVudDogU3VidGl0bGVDdWVFdmVudCk6IHN0cmluZyB7XG4gICAgbGV0IGlkID0gZXZlbnQuc3RhcnQgKyAnLScgKyBldmVudC50ZXh0O1xuXG4gICAgaWYgKGV2ZW50LnBvc2l0aW9uKSB7XG4gICAgICBpZCArPSAnLScgKyBldmVudC5wb3NpdGlvbi5yb3cgKyAnLScgKyBldmVudC5wb3NpdGlvbi5jb2x1bW47XG4gICAgfVxuXG4gICAgcmV0dXJuIGlkO1xuICB9XG5cbiAgY3VlRW50ZXIoZXZlbnQ6IFN1YnRpdGxlQ3VlRXZlbnQsIGxhYmVsOiBTdWJ0aXRsZUxhYmVsKTogdm9pZCB7XG4gICAgdGhpcy5hZGRDdWVUb01hcChldmVudCwgbGFiZWwpO1xuICB9XG5cbiAgY3VlVXBkYXRlKGV2ZW50OiBTdWJ0aXRsZUN1ZUV2ZW50LCBsYWJlbDogU3VidGl0bGVMYWJlbCk6IFN1YnRpdGxlTGFiZWwgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IGxhYmVsVG9SZXBsYWNlID0gdGhpcy5wb3BDdWVGcm9tTWFwKGV2ZW50KTtcblxuICAgIGlmIChsYWJlbFRvUmVwbGFjZSkge1xuICAgICAgdGhpcy5hZGRDdWVUb01hcChldmVudCwgbGFiZWwpO1xuICAgICAgcmV0dXJuIGxhYmVsVG9SZXBsYWNlO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBwcml2YXRlIGFkZEN1ZVRvTWFwKGV2ZW50OiBTdWJ0aXRsZUN1ZUV2ZW50LCBsYWJlbDogU3VidGl0bGVMYWJlbCk6IHZvaWQge1xuICAgIGxldCBpZCA9IEFjdGl2ZVN1YnRpdGxlTWFuYWdlci5jYWxjdWxhdGVJZChldmVudCk7XG5cbiAgICAvLyBDcmVhdGUgYXJyYXkgZm9yIGlkIGlmIGl0IGRvZXMgbm90IGV4aXN0XG4gICAgdGhpcy5hY3RpdmVTdWJ0aXRsZUN1ZU1hcFtpZF0gPSB0aGlzLmFjdGl2ZVN1YnRpdGxlQ3VlTWFwW2lkXSB8fCBbXTtcblxuICAgIC8vIEFkZCBjdWVcbiAgICB0aGlzLmFjdGl2ZVN1YnRpdGxlQ3VlTWFwW2lkXS5wdXNoKHsgZXZlbnQsIGxhYmVsIH0pO1xuICAgIHRoaXMuYWN0aXZlU3VidGl0bGVDdWVDb3VudCsrO1xuICB9XG5cbiAgcHJpdmF0ZSBwb3BDdWVGcm9tTWFwKGV2ZW50OiBTdWJ0aXRsZUN1ZUV2ZW50KTogU3VidGl0bGVMYWJlbCB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGlkID0gQWN0aXZlU3VidGl0bGVNYW5hZ2VyLmNhbGN1bGF0ZUlkKGV2ZW50KTtcbiAgICBsZXQgYWN0aXZlU3VidGl0bGVDdWVzID0gdGhpcy5hY3RpdmVTdWJ0aXRsZUN1ZU1hcFtpZF07XG5cbiAgICBpZiAoYWN0aXZlU3VidGl0bGVDdWVzICYmIGFjdGl2ZVN1YnRpdGxlQ3Vlcy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBSZW1vdmUgY3VlXG4gICAgICAvKiBXZSBhcHBseSB0aGUgRklGTyBhcHByb2FjaCBoZXJlIGFuZCByZW1vdmUgdGhlIG9sZGVzdCBjdWUgZnJvbSB0aGUgYXNzb2NpYXRlZCBpZC4gV2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgY3Vlc1xuICAgICAgICogd2l0aCB0aGUgc2FtZSBpZCwgdGhlcmUgaXMgbm8gd2F5IHRvIGtub3cgd2hpY2ggb25lIG9mIHRoZSBjdWVzIGlzIHRvIGJlIGRlbGV0ZWQsIHNvIHdlIGp1c3QgaG9wZSB0aGF0IEZJRk9cbiAgICAgICAqIHdvcmtzIGZpbmUuIFRoZW9yZXRpY2FsbHkgaXQgY2FuIGhhcHBlbiB0aGF0IHR3byBjdWVzIHdpdGggY29sbGlkaW5nIGlkcyBhcmUgcmVtb3ZlZCBhdCBkaWZmZXJlbnQgdGltZXMsIGluXG4gICAgICAgKiB0aGUgd3Jvbmcgb3JkZXIuIFRoaXMgcmFyZSBjYXNlIGhhcyB5ZXQgdG8gYmUgb2JzZXJ2ZWQuIElmIGl0IGV2ZXIgZ2V0cyBhbiBpc3N1ZSwgd2UgY2FuIHRha2UgdGhlIHVuc3RhYmxlXG4gICAgICAgKiBjdWUgZW5kIHRpbWUgKHdoaWNoIGNhbiBjaGFuZ2UgYmV0d2VlbiBDdWVFbnRlciBhbmQgQ3VlRXhpdCBJTiBDdWVVcGRhdGUpIGFuZCB1c2UgaXQgYXMgYW5cbiAgICAgICAqIGFkZGl0aW9uYWwgaGludCB0byB0cnkgYW5kIHJlbW92ZSB0aGUgY29ycmVjdCBvbmUgb2YgdGhlIGNvbGxpZGluZyBjdWVzLlxuICAgICAgICovXG4gICAgICBsZXQgYWN0aXZlU3VidGl0bGVDdWUgPSBhY3RpdmVTdWJ0aXRsZUN1ZXMuc2hpZnQoKTtcbiAgICAgIHRoaXMuYWN0aXZlU3VidGl0bGVDdWVDb3VudC0tO1xuXG4gICAgICByZXR1cm4gYWN0aXZlU3VidGl0bGVDdWUubGFiZWw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYWxsIGFjdGl2ZSBjdWVzIHdoaWNoIGRvbid0IGVuY2xvc2UgdGhlIGdpdmVuIHRpbWVcbiAgICogQHBhcmFtIHRpbWUgdGhlIHRpbWUgZm9yIHdoaWNoIHN1YnRpdGxlcyBzaG91bGQgcmVtYWluXG4gICAqL1xuICBwdWJsaWMgY2xlYXJJbmFjdGl2ZUN1ZXModGltZTogbnVtYmVyKTogQWN0aXZlU3VidGl0bGVDdWVbXSB7XG4gICAgY29uc3QgcmVtb3ZlZEN1ZXM6IEFjdGl2ZVN1YnRpdGxlQ3VlW10gPSBbXTtcbiAgICBPYmplY3Qua2V5cyh0aGlzLmFjdGl2ZVN1YnRpdGxlQ3VlTWFwKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBjb25zdCBhY3RpdmVDdWVzID0gdGhpcy5hY3RpdmVTdWJ0aXRsZUN1ZU1hcFtrZXldO1xuICAgICAgYWN0aXZlQ3Vlcy5mb3JFYWNoKGN1ZSA9PiB7XG4gICAgICAgIGlmICh0aW1lIDwgY3VlLmV2ZW50LnN0YXJ0IHx8IHRpbWUgPiBjdWUuZXZlbnQuZW5kKSB7XG4gICAgICAgICAgdGhpcy5wb3BDdWVGcm9tTWFwKGN1ZS5ldmVudCk7XG4gICAgICAgICAgcmVtb3ZlZEN1ZXMucHVzaChjdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVtb3ZlZEN1ZXM7XG4gIH1cblxuICBzdGF0aWMgZ2VuZXJhdGVJbWFnZVRhZ1RleHQoaW1hZ2VEYXRhOiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIGlmICghaW1hZ2VEYXRhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaW1nVGFnID0gbmV3IERPTSgnaW1nJywge1xuICAgICAgc3JjOiBpbWFnZURhdGEsXG4gICAgfSk7XG4gICAgaW1nVGFnLmNzcygnd2lkdGgnLCAnMTAwJScpO1xuICAgIHJldHVybiBpbWdUYWcuZ2V0KDApLm91dGVySFRNTDsgLy8gcmV0dXJuIHRoZSBodG1sIGFzIHN0cmluZ1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxhYmVsIGFzc29jaWF0ZWQgd2l0aCBhbiBhbHJlYWR5IGFkZGVkIGN1ZS5cbiAgICogQHBhcmFtIGV2ZW50XG4gICAqIEByZXR1cm4ge1N1YnRpdGxlTGFiZWx9XG4gICAqL1xuICBnZXRDdWVzKGV2ZW50OiBTdWJ0aXRsZUN1ZUV2ZW50KTogU3VidGl0bGVMYWJlbFtdIHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaWQgPSBBY3RpdmVTdWJ0aXRsZU1hbmFnZXIuY2FsY3VsYXRlSWQoZXZlbnQpO1xuICAgIGxldCBhY3RpdmVTdWJ0aXRsZUN1ZXMgPSB0aGlzLmFjdGl2ZVN1YnRpdGxlQ3VlTWFwW2lkXTtcbiAgICBpZiAoYWN0aXZlU3VidGl0bGVDdWVzICYmIGFjdGl2ZVN1YnRpdGxlQ3Vlcy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gYWN0aXZlU3VidGl0bGVDdWVzLm1hcCgoY3VlKSA9PiBjdWUubGFiZWwpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHRoZSBzdWJ0aXRsZSBjdWUgZnJvbSB0aGUgbWFuYWdlciBhbmQgcmV0dXJucyB0aGUgbGFiZWwgdGhhdCBzaG91bGQgYmUgcmVtb3ZlZCBmcm9tIHRoZSBzdWJ0aXRsZSBvdmVybGF5LFxuICAgKiBvciBudWxsIGlmIHRoZXJlIGlzIG5vIGFzc29jaWF0ZWQgbGFiZWwgZXhpc3RpbmcgKGUuZy4gYmVjYXVzZSBhbGwgbGFiZWxzIGhhdmUgYmVlbiB7QGxpbmsgI2NsZWFyIGNsZWFyZWR9LlxuICAgKiBAcGFyYW0gZXZlbnRcbiAgICogQHJldHVybiB7U3VidGl0bGVMYWJlbHxudWxsfVxuICAgKi9cbiAgY3VlRXhpdChldmVudDogU3VidGl0bGVDdWVFdmVudCk6IFN1YnRpdGxlTGFiZWwge1xuICAgIHJldHVybiB0aGlzLnBvcEN1ZUZyb21NYXAoZXZlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBhY3RpdmUgc3VidGl0bGUgY3Vlcy5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGN1ZUNvdW50KCk6IG51bWJlciB7XG4gICAgLy8gV2UgZXhwbGljaXRseSBjb3VudCB0aGUgY3VlcyB0byBzYXZlIGFuIEFycmF5LnJlZHVjZSBvbiBldmVyeSBjdWVDb3VudCBjYWxsICh3aGljaCBjYW4gaGFwcGVuIGZyZXF1ZW50bHkpXG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlU3VidGl0bGVDdWVDb3VudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlcmUgYXJlIGFjdGl2ZSBzdWJ0aXRsZSBjdWVzLCBlbHNlIGZhbHNlLlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGhhc0N1ZXMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY3VlQ291bnQgPiAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYWxsIHN1YnRpdGxlIGN1ZXMgZnJvbSB0aGUgbWFuYWdlci5cbiAgICovXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuYWN0aXZlU3VidGl0bGVDdWVNYXAgPSB7fTtcbiAgICB0aGlzLmFjdGl2ZVN1YnRpdGxlQ3VlQ291bnQgPSAwO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdWJ0aXRsZVJlZ2lvbkNvbnRhaW5lck1hbmFnZXIge1xuICBwcml2YXRlIHN1YnRpdGxlUmVnaW9uQ29udGFpbmVyczogeyBbcmVnaW9uTmFtZTogc3RyaW5nXTogU3VidGl0bGVSZWdpb25Db250YWluZXIgfSA9IHt9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0gc3VidGl0bGVPdmVybGF5IFJlZmVyZW5jZSB0byB0aGUgc3VidGl0bGUgb3ZlcmxheSBmb3IgYWRkaW5nIGFuZCByZW1vdmluZyB0aGUgY29udGFpbmVycy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc3VidGl0bGVPdmVybGF5OiBTdWJ0aXRsZU92ZXJsYXkpIHtcbiAgICB0aGlzLnN1YnRpdGxlT3ZlcmxheSA9IHN1YnRpdGxlT3ZlcmxheTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UmVnaW9uKGxhYmVsOiBTdWJ0aXRsZUxhYmVsKTogeyByZWdpb25Db250YWluZXJJZDogc3RyaW5nLCByZWdpb25OYW1lOiBzdHJpbmcgfSB7XG4gICAgaWYgKGxhYmVsLnZ0dCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVnaW9uQ29udGFpbmVySWQ6IGxhYmVsLnZ0dC5yZWdpb24gJiYgbGFiZWwudnR0LnJlZ2lvbi5pZCA/IGxhYmVsLnZ0dC5yZWdpb24uaWQgOiAndnR0JyxcbiAgICAgICAgcmVnaW9uTmFtZTogJ3Z0dCcsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICByZWdpb25Db250YWluZXJJZDogbGFiZWwucmVnaW9uIHx8ICdkZWZhdWx0JyxcbiAgICAgIHJlZ2lvbk5hbWU6IGxhYmVsLnJlZ2lvbiB8fCAnZGVmYXVsdCcsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuZCB3cmFwcyBhIHN1YnRpdGxlIGxhYmVsIGludG8gYSBjb250YWluZXIgZGl2IGJhc2VkIG9uIHRoZSBzdWJ0aXRsZSByZWdpb24uXG4gICAqIElmIHRoZSBzdWJ0aXRsZSBoYXMgcG9zaXRpb25pbmcgaW5mb3JtYXRpb24gaXQgaXMgYWRkZWQgdG8gdGhlIGNvbnRhaW5lci5cbiAgICogQHBhcmFtIGxhYmVsIFRoZSBzdWJ0aXRsZSBsYWJlbCB0byB3cmFwXG4gICAqL1xuICBhZGRMYWJlbChsYWJlbDogU3VidGl0bGVMYWJlbCwgb3ZlcmxheVNpemU/OiBTaXplKTogdm9pZCB7XG4gICAgY29uc3QgeyByZWdpb25Db250YWluZXJJZCwgcmVnaW9uTmFtZSB9ID0gdGhpcy5nZXRSZWdpb24obGFiZWwpO1xuICAgIGNvbnN0IGNzc0NsYXNzZXMgPSBbYHN1YnRpdGxlLXBvc2l0aW9uLSR7cmVnaW9uTmFtZX1gXTtcblxuICAgIGlmIChsYWJlbC52dHQgJiYgbGFiZWwudnR0LnJlZ2lvbikge1xuICAgICAgY3NzQ2xhc3Nlcy5wdXNoKGB2dHQtcmVnaW9uLSR7bGFiZWwudnR0LnJlZ2lvbi5pZH1gKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc3VidGl0bGVSZWdpb25Db250YWluZXJzW3JlZ2lvbkNvbnRhaW5lcklkXSkge1xuICAgICAgY29uc3QgcmVnaW9uQ29udGFpbmVyID0gbmV3IFN1YnRpdGxlUmVnaW9uQ29udGFpbmVyKHtcbiAgICAgICAgY3NzQ2xhc3NlcyxcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnN1YnRpdGxlUmVnaW9uQ29udGFpbmVyc1tyZWdpb25Db250YWluZXJJZF0gPSByZWdpb25Db250YWluZXI7XG5cbiAgICAgIGlmIChsYWJlbC5yZWdpb25TdHlsZSkge1xuICAgICAgICByZWdpb25Db250YWluZXIuZ2V0RG9tRWxlbWVudCgpLmF0dHIoJ3N0eWxlJywgbGFiZWwucmVnaW9uU3R5bGUpO1xuICAgICAgfSBlbHNlIGlmIChsYWJlbC52dHQgJiYgIWxhYmVsLnZ0dC5yZWdpb24pIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoZXJlIGlzIG5vIHJlZ2lvbiBwcmVzZW50IHRvIHdyYXAgdGhlIEN1ZSBCb3gsIHRoZSBDdWUgYm94IGJlY29tZXMgdGhlXG4gICAgICAgICAqIHJlZ2lvbiBpdHNlbGYuIFRoZXJlZm9yZSB0aGUgcG9zaXRpb25pbmcgdmFsdWVzIGhhdmUgdG8gY29tZSBmcm9tIHRoZSBib3guXG4gICAgICAgICAqL1xuICAgICAgICByZWdpb25Db250YWluZXIuZ2V0RG9tRWxlbWVudCgpLmNzcygncG9zaXRpb24nLCAnc3RhdGljJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBnZXREb21FbGVtZW50IG5lZWRzIHRvIGJlIGNhbGxlZCBhdCBsZWFzdCBvbmNlIHRvIGVuc3VyZSB0aGUgY29tcG9uZW50IGV4aXN0c1xuICAgICAgICByZWdpb25Db250YWluZXIuZ2V0RG9tRWxlbWVudCgpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGNvbnN0IHJlZ2lvbkNvbnRhaW5lcklkIGluIHRoaXMuc3VidGl0bGVSZWdpb25Db250YWluZXJzKSB7XG4gICAgICAgIHRoaXMuc3VidGl0bGVPdmVybGF5LmFkZENvbXBvbmVudCh0aGlzLnN1YnRpdGxlUmVnaW9uQ29udGFpbmVyc1tyZWdpb25Db250YWluZXJJZF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc3VidGl0bGVSZWdpb25Db250YWluZXJzW3JlZ2lvbkNvbnRhaW5lcklkXS5hZGRMYWJlbChsYWJlbCwgb3ZlcmxheVNpemUpO1xuICB9XG5cbiAgcmVwbGFjZUxhYmVsKHByZXZpb3VzTGFiZWw6IFN1YnRpdGxlTGFiZWwsIG5ld0xhYmVsOiBTdWJ0aXRsZUxhYmVsKTogdm9pZCB7XG4gICAgY29uc3QgeyByZWdpb25Db250YWluZXJJZCB9ID0gdGhpcy5nZXRSZWdpb24ocHJldmlvdXNMYWJlbCk7XG5cbiAgICB0aGlzLnN1YnRpdGxlUmVnaW9uQ29udGFpbmVyc1tyZWdpb25Db250YWluZXJJZF0ucmVtb3ZlTGFiZWwocHJldmlvdXNMYWJlbCk7XG4gICAgdGhpcy5zdWJ0aXRsZVJlZ2lvbkNvbnRhaW5lcnNbcmVnaW9uQ29udGFpbmVySWRdLmFkZExhYmVsKG5ld0xhYmVsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgc3VidGl0bGUgbGFiZWwgZnJvbSBhIGNvbnRhaW5lci5cbiAgICovXG4gIHJlbW92ZUxhYmVsKGxhYmVsOiBTdWJ0aXRsZUxhYmVsKTogdm9pZCB7XG4gICAgbGV0IHJlZ2lvbkNvbnRhaW5lcklkO1xuXG4gICAgaWYgKGxhYmVsLnZ0dCkge1xuICAgICAgcmVnaW9uQ29udGFpbmVySWQgPSBsYWJlbC52dHQucmVnaW9uICYmIGxhYmVsLnZ0dC5yZWdpb24uaWQgPyBsYWJlbC52dHQucmVnaW9uLmlkIDogJ3Z0dCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZ2lvbkNvbnRhaW5lcklkID0gbGFiZWwucmVnaW9uIHx8ICdkZWZhdWx0JztcbiAgICB9XG5cbiAgICB0aGlzLnN1YnRpdGxlUmVnaW9uQ29udGFpbmVyc1tyZWdpb25Db250YWluZXJJZF0ucmVtb3ZlTGFiZWwobGFiZWwpO1xuXG4gICAgLy8gUmVtb3ZlIGNvbnRhaW5lciBpZiBubyBtb3JlIGxhYmVscyBhcmUgZGlzcGxheWVkXG4gICAgaWYgKHRoaXMuc3VidGl0bGVSZWdpb25Db250YWluZXJzW3JlZ2lvbkNvbnRhaW5lcklkXS5pc0VtcHR5KCkpIHtcbiAgICAgIHRoaXMuc3VidGl0bGVPdmVybGF5LnJlbW92ZUNvbXBvbmVudCh0aGlzLnN1YnRpdGxlUmVnaW9uQ29udGFpbmVyc1tyZWdpb25Db250YWluZXJJZF0pO1xuICAgICAgZGVsZXRlIHRoaXMuc3VidGl0bGVSZWdpb25Db250YWluZXJzW3JlZ2lvbkNvbnRhaW5lcklkXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgc3VidGl0bGUgY29udGFpbmVycy5cbiAgICovXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIGZvciAoY29uc3QgcmVnaW9uTmFtZSBpbiB0aGlzLnN1YnRpdGxlUmVnaW9uQ29udGFpbmVycykge1xuICAgICAgdGhpcy5zdWJ0aXRsZU92ZXJsYXkucmVtb3ZlQ29tcG9uZW50KHRoaXMuc3VidGl0bGVSZWdpb25Db250YWluZXJzW3JlZ2lvbk5hbWVdKTtcbiAgICB9XG5cbiAgICB0aGlzLnN1YnRpdGxlUmVnaW9uQ29udGFpbmVycyA9IHt9O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdWJ0aXRsZVJlZ2lvbkNvbnRhaW5lciBleHRlbmRzIENvbnRhaW5lcjxDb250YWluZXJDb25maWc+IHtcbiAgcHJpdmF0ZSBsYWJlbENvdW50ID0gMDtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbnRhaW5lckNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAnc3VidGl0bGUtcmVnaW9uLWNvbnRhaW5lcicsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgYWRkTGFiZWwobGFiZWxUb0FkZDogU3VidGl0bGVMYWJlbCwgb3ZlcmxheVNpemU/OiBTaXplKSB7XG4gICAgdGhpcy5sYWJlbENvdW50Kys7XG5cbiAgICBpZiAobGFiZWxUb0FkZC52dHQpIHtcbiAgICAgIGlmIChsYWJlbFRvQWRkLnZ0dC5yZWdpb24gJiYgb3ZlcmxheVNpemUpIHtcbiAgICAgICAgVnR0VXRpbHMuc2V0VnR0UmVnaW9uU3R5bGVzKHRoaXMsIGxhYmVsVG9BZGQudnR0LnJlZ2lvbiwgb3ZlcmxheVNpemUpO1xuICAgICAgfVxuXG4gICAgICBWdHRVdGlscy5zZXRWdHRDdWVCb3hTdHlsZXMobGFiZWxUb0FkZCwgb3ZlcmxheVNpemUpO1xuICAgIH1cblxuICAgIHRoaXMuYWRkQ29tcG9uZW50KGxhYmVsVG9BZGQpO1xuICAgIHRoaXMudXBkYXRlQ29tcG9uZW50cygpO1xuICB9XG5cbiAgcmVtb3ZlTGFiZWwobGFiZWxUb1JlbW92ZTogU3VidGl0bGVMYWJlbCk6IHZvaWQge1xuICAgIHRoaXMubGFiZWxDb3VudC0tO1xuICAgIHRoaXMucmVtb3ZlQ29tcG9uZW50KGxhYmVsVG9SZW1vdmUpO1xuICAgIHRoaXMudXBkYXRlQ29tcG9uZW50cygpO1xuICB9XG5cbiAgcHVibGljIGlzRW1wdHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubGFiZWxDb3VudCA9PT0gMDtcbiAgfVxufVxuIiwiaW1wb3J0IHtTZWxlY3RCb3h9IGZyb20gJy4vc2VsZWN0Ym94JztcbmltcG9ydCB7TGlzdFNlbGVjdG9yQ29uZmlnfSBmcm9tICcuL2xpc3RzZWxlY3Rvcic7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHtTdWJ0aXRsZVN3aXRjaEhhbmRsZXJ9IGZyb20gJy4uL3N1YnRpdGxldXRpbHMnO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBzZWxlY3QgYm94IHByb3ZpZGluZyBhIHNlbGVjdGlvbiBiZXR3ZWVuIGF2YWlsYWJsZSBzdWJ0aXRsZSBhbmQgY2FwdGlvbiB0cmFja3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdWJ0aXRsZVNlbGVjdEJveCBleHRlbmRzIFNlbGVjdEJveCB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBMaXN0U2VsZWN0b3JDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzc2VzOiBbJ3VpLXN1YnRpdGxlc2VsZWN0Ym94J10sXG4gICAgICBhcmlhTGFiZWw6IGkxOG4uZ2V0TG9jYWxpemVyKCdzdWJ0aXRsZS5zZWxlY3QnKSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbmV3IFN1YnRpdGxlU3dpdGNoSGFuZGxlcihwbGF5ZXIsIHRoaXMsIHVpbWFuYWdlcik7XG4gIH1cbn1cbiIsImltcG9ydCB7IFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCwgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnIH0gZnJvbSAnLi9zdWJ0aXRsZXNldHRpbmdzZWxlY3Rib3gnO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEEgc2VsZWN0IGJveCBwcm92aWRpbmcgYSBzZWxlY3Rpb24gb2YgZGlmZmVyZW50IGJhY2tncm91bmQgY29sb3JzLlxuICovXG5leHBvcnQgY2xhc3MgQmFja2dyb3VuZENvbG9yU2VsZWN0Qm94IGV4dGVuZHMgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveENvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzc2VzOiBbJ3VpLXN1YnRpdGxlc2V0dGluZ3NiYWNrZ3JvdW5kY29sb3JzZWxlY3Rib3gnXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5hZGRJdGVtKG51bGwsIGkxOG4uZ2V0TG9jYWxpemVyKCdkZWZhdWx0JykpO1xuICAgIHRoaXMuYWRkSXRlbSgnd2hpdGUnLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLndoaXRlJykpO1xuICAgIHRoaXMuYWRkSXRlbSgnYmxhY2snLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLmJsYWNrJykpO1xuICAgIHRoaXMuYWRkSXRlbSgncmVkJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy5yZWQnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdncmVlbicsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMuZ3JlZW4nKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdibHVlJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy5ibHVlJykpO1xuICAgIHRoaXMuYWRkSXRlbSgnY3lhbicsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMuY3lhbicpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ3llbGxvdycsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMueWVsbG93JykpO1xuICAgIHRoaXMuYWRkSXRlbSgnbWFnZW50YScsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMubWFnZW50YScpKTtcblxuICAgIGxldCBzZXRDb2xvckFuZE9wYWNpdHkgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5zZXR0aW5nc01hbmFnZXIuYmFja2dyb3VuZENvbG9yLmlzU2V0KCkgJiYgdGhpcy5zZXR0aW5nc01hbmFnZXIuYmFja2dyb3VuZE9wYWNpdHkuaXNTZXQoKSkge1xuICAgICAgICB0aGlzLnRvZ2dsZU92ZXJsYXlDbGFzcyhcbiAgICAgICAgICAnYmdjb2xvci0nICsgdGhpcy5zZXR0aW5nc01hbmFnZXIuYmFja2dyb3VuZENvbG9yLnZhbHVlICsgdGhpcy5zZXR0aW5nc01hbmFnZXIuYmFja2dyb3VuZE9wYWNpdHkudmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50b2dnbGVPdmVybGF5Q2xhc3MobnVsbCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMub25JdGVtU2VsZWN0ZWQuc3Vic2NyaWJlKChzZW5kZXIsIGtleTogc3RyaW5nKSA9PiB7XG4gICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kQ29sb3IudmFsdWUgPSBrZXk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kQ29sb3Iub25DaGFuZ2VkLnN1YnNjcmliZSgoc2VuZGVyLCBwcm9wZXJ0eSkgPT4ge1xuICAgICAgLy8gQ29sb3IgYW5kIG9wYWNpdHkgZ28gdG9nZXRoZXIsIHNvIHdlIG5lZWQgdG8uLi5cbiAgICAgIGlmICghdGhpcy5zZXR0aW5nc01hbmFnZXIuYmFja2dyb3VuZENvbG9yLmlzU2V0KCkpIHtcbiAgICAgICAgLy8gLi4uIGNsZWFyIHRoZSBvcGFjaXR5IHdoZW4gdGhlIGNvbG9yIGlzIG5vdCBzZXRcbiAgICAgICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuYmFja2dyb3VuZE9wYWNpdHkuY2xlYXIoKTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuc2V0dGluZ3NNYW5hZ2VyLmJhY2tncm91bmRPcGFjaXR5LmlzU2V0KCkpIHtcbiAgICAgICAgLy8gLi4uIHNldCBhbiBvcGFjaXR5IHdoZW4gdGhlIGNvbG9yIGlzIHNldFxuICAgICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kT3BhY2l0eS52YWx1ZSA9ICcxMDAnO1xuICAgICAgfVxuICAgICAgdGhpcy5zZWxlY3RJdGVtKHByb3BlcnR5LnZhbHVlKTtcbiAgICAgIHNldENvbG9yQW5kT3BhY2l0eSgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuYmFja2dyb3VuZE9wYWNpdHkub25DaGFuZ2VkLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBzZXRDb2xvckFuZE9wYWNpdHkoKTtcbiAgICB9KTtcblxuICAgIC8vIExvYWQgaW5pdGlhbCB2YWx1ZVxuICAgIGlmICh0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kQ29sb3IuaXNTZXQoKSkge1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmJhY2tncm91bmRDb2xvci52YWx1ZSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3gsIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveENvbmZpZyB9IGZyb20gJy4vc3VidGl0bGVzZXR0aW5nc2VsZWN0Ym94JztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uLy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uLy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIHNlbGVjdCBib3ggcHJvdmlkaW5nIGEgc2VsZWN0aW9uIG9mIGRpZmZlcmVudCBiYWNrZ3JvdW5kIG9wYWNpdHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBCYWNrZ3JvdW5kT3BhY2l0eVNlbGVjdEJveCBleHRlbmRzIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3NlczogWyd1aS1zdWJ0aXRsZXNldHRpbmdzYmFja2dyb3VuZG9wYWNpdHlzZWxlY3Rib3gnXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5hZGRJdGVtKG51bGwsIGkxOG4uZ2V0TG9jYWxpemVyKCdkZWZhdWx0JykpO1xuICAgIHRoaXMuYWRkSXRlbSgnMTAwJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiAxMDAgfSkpO1xuICAgIHRoaXMuYWRkSXRlbSgnNzUnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDc1IH0pKTtcbiAgICB0aGlzLmFkZEl0ZW0oJzUwJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiA1MCB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCcyNScsIGkxOG4uZ2V0TG9jYWxpemVyKCdwZXJjZW50JywgeyB2YWx1ZTogMjUgfSkpO1xuICAgIHRoaXMuYWRkSXRlbSgnMCcsIGkxOG4uZ2V0TG9jYWxpemVyKCdwZXJjZW50JywgeyB2YWx1ZTogMCB9KSk7XG5cbiAgICB0aGlzLm9uSXRlbVNlbGVjdGVkLnN1YnNjcmliZSgoc2VuZGVyLCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuYmFja2dyb3VuZE9wYWNpdHkudmFsdWUgPSBrZXk7XG5cbiAgICAgIC8vIENvbG9yIGFuZCBvcGFjaXR5IGdvIHRvZ2V0aGVyLCBzbyB3ZSBuZWVkIHRvLi4uXG4gICAgICBpZiAoIXRoaXMuc2V0dGluZ3NNYW5hZ2VyLmJhY2tncm91bmRPcGFjaXR5LmlzU2V0KCkpIHtcbiAgICAgICAgLy8gLi4uIGNsZWFyIHRoZSBjb2xvciB3aGVuIHRoZSBvcGFjaXR5IGlzIG5vdCBzZXRcbiAgICAgICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuYmFja2dyb3VuZENvbG9yLmNsZWFyKCk7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kQ29sb3IuaXNTZXQoKSkge1xuICAgICAgICAvLyAuLi4gc2V0IGEgY29sb3Igd2hlbiB0aGUgb3BhY2l0eSBpcyBzZXRcbiAgICAgICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuYmFja2dyb3VuZENvbG9yLnZhbHVlID0gJ2JsYWNrJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFVwZGF0ZSBzZWxlY3RlZCBpdGVtIHdoZW4gdmFsdWUgaXMgc2V0IGZyb20gc29tZXdoZXJlIGVsc2VcbiAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kT3BhY2l0eS5vbkNoYW5nZWQuc3Vic2NyaWJlKChzZW5kZXIsIHByb3BlcnR5KSA9PiB7XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0ocHJvcGVydHkudmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLy8gTG9hZCBpbml0aWFsIHZhbHVlXG4gICAgaWYgKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmJhY2tncm91bmRPcGFjaXR5LmlzU2V0KCkpIHtcbiAgICAgIHRoaXMuc2VsZWN0SXRlbSh0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kT3BhY2l0eS52YWx1ZSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3gsIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveENvbmZpZyB9IGZyb20gJy4vc3VidGl0bGVzZXR0aW5nc2VsZWN0Ym94JztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uLy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uLy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIHNlbGVjdCBib3ggcHJvdmlkaW5nIGEgc2VsZWN0aW9uIG9mIGRpZmZlcmVudCBjaGFyYWN0ZXIgZWRnZS5cbiAqL1xuZXhwb3J0IGNsYXNzIENoYXJhY3RlckVkZ2VTZWxlY3RCb3ggZXh0ZW5kcyBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3gge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzZXM6IFsndWktc3VidGl0bGVzZXR0aW5nc2NoYXJhY3RlcmVkZ2VzZWxlY3Rib3gnXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5hZGRJdGVtKG51bGwsIGkxOG4uZ2V0TG9jYWxpemVyKCdkZWZhdWx0JykpO1xuICAgIHRoaXMuYWRkSXRlbSgncmFpc2VkJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy5jaGFyYWN0ZXJFZGdlLnJhaXNlZCcpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ2RlcHJlc3NlZCcsIGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZS5kZXByZXNzZWQnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCd1bmlmb3JtJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy5jaGFyYWN0ZXJFZGdlLnVuaWZvcm0nKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdkcm9wc2hhZG93ZWQnLCBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2UuZHJvcHNoYWRvd2VkJykpO1xuXG4gICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuY2hhcmFjdGVyRWRnZS5vbkNoYW5nZWQuc3Vic2NyaWJlKChzZW5kZXIsIHByb3BlcnR5KSA9PiB7XG4gICAgICBpZiAocHJvcGVydHkuaXNTZXQoKSkge1xuICAgICAgICB0aGlzLnRvZ2dsZU92ZXJsYXlDbGFzcygnY2hhcmFjdGVyZWRnZS0nICsgcHJvcGVydHkudmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50b2dnbGVPdmVybGF5Q2xhc3MobnVsbCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNlbGVjdCB0aGUgaXRlbSBpbiBjYXNlIHRoZSBwcm9wZXJ0eSB3YXMgc2V0IGZyb20gb3V0c2lkZVxuICAgICAgdGhpcy5zZWxlY3RJdGVtKHByb3BlcnR5LnZhbHVlKTtcbiAgICB9KTtcblxuICAgIHRoaXMub25JdGVtU2VsZWN0ZWQuc3Vic2NyaWJlKChzZW5kZXIsIGtleTogc3RyaW5nKSA9PiB7XG4gICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5jaGFyYWN0ZXJFZGdlLnZhbHVlID0ga2V5O1xuICAgIH0pO1xuXG4gICAgLy8gTG9hZCBpbml0aWFsIHZhbHVlXG4gICAgaWYgKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmNoYXJhY3RlckVkZ2UuaXNTZXQoKSkge1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmNoYXJhY3RlckVkZ2UudmFsdWUpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94LCBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcgfSBmcm9tICcuL3N1YnRpdGxlc2V0dGluZ3NlbGVjdGJveCc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi8uLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi8uLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBzZWxlY3QgYm94IHByb3ZpZGluZyBhIHNlbGVjdGlvbiBvZiBkaWZmZXJlbnQgZm9udCBjb2xvcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBGb250Q29sb3JTZWxlY3RCb3ggZXh0ZW5kcyBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3gge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzZXM6IFsndWktc3VidGl0bGVzZXR0aW5nc2ZvbnRjb2xvcnNlbGVjdGJveCddLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICB0aGlzLmFkZEl0ZW0obnVsbCwgaTE4bi5nZXRMb2NhbGl6ZXIoJ2RlZmF1bHQnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCd3aGl0ZScsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMud2hpdGUnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdibGFjaycsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMuYmxhY2snKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdyZWQnLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLnJlZCcpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ2dyZWVuJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy5ncmVlbicpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ2JsdWUnLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLmJsdWUnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdjeWFuJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy5jeWFuJykpO1xuICAgIHRoaXMuYWRkSXRlbSgneWVsbG93JywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy55ZWxsb3cnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdtYWdlbnRhJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy5tYWdlbnRhJykpO1xuXG4gICAgbGV0IHNldENvbG9yQW5kT3BhY2l0eSA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLnNldHRpbmdzTWFuYWdlci5mb250Q29sb3IuaXNTZXQoKSAmJiB0aGlzLnNldHRpbmdzTWFuYWdlci5mb250T3BhY2l0eS5pc1NldCgpKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlT3ZlcmxheUNsYXNzKFxuICAgICAgICAgICdmb250Y29sb3ItJyArIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRDb2xvci52YWx1ZSArIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRPcGFjaXR5LnZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudG9nZ2xlT3ZlcmxheUNsYXNzKG51bGwpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLm9uSXRlbVNlbGVjdGVkLnN1YnNjcmliZSgoc2VuZGVyLCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udENvbG9yLnZhbHVlID0ga2V5O1xuICAgIH0pO1xuXG4gICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udENvbG9yLm9uQ2hhbmdlZC5zdWJzY3JpYmUoKHNlbmRlciwgcHJvcGVydHkpID0+IHtcbiAgICAgIC8vIENvbG9yIGFuZCBvcGFjaXR5IGdvIHRvZ2V0aGVyLCBzbyB3ZSBuZWVkIHRvLi4uXG4gICAgICBpZiAoIXRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRDb2xvci5pc1NldCgpKSB7XG4gICAgICAgIC8vIC4uLiBjbGVhciB0aGUgb3BhY2l0eSB3aGVuIHRoZSBjb2xvciBpcyBub3Qgc2V0XG4gICAgICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRPcGFjaXR5LmNsZWFyKCk7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLnNldHRpbmdzTWFuYWdlci5mb250T3BhY2l0eS5pc1NldCgpKSB7XG4gICAgICAgIC8vIC4uLiBzZXQgYW4gb3BhY2l0eSB3aGVuIHRoZSBjb2xvciBpcyBzZXRcbiAgICAgICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udE9wYWNpdHkudmFsdWUgPSAnMTAwJztcbiAgICAgIH1cbiAgICAgIHRoaXMuc2VsZWN0SXRlbShwcm9wZXJ0eS52YWx1ZSk7XG4gICAgICBzZXRDb2xvckFuZE9wYWNpdHkoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRPcGFjaXR5Lm9uQ2hhbmdlZC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgc2V0Q29sb3JBbmRPcGFjaXR5KCk7XG4gICAgfSk7XG5cbiAgICAvLyBMb2FkIGluaXRpYWwgdmFsdWVcbiAgICBpZiAodGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udENvbG9yLmlzU2V0KCkpIHtcbiAgICAgIHRoaXMuc2VsZWN0SXRlbSh0aGlzLnNldHRpbmdzTWFuYWdlci5mb250Q29sb3IudmFsdWUpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94LCBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcgfSBmcm9tICcuL3N1YnRpdGxlc2V0dGluZ3NlbGVjdGJveCc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi8uLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi8uLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBzZWxlY3QgYm94IHByb3ZpZGluZyBhIHNlbGVjdGlvbiBvZiBkaWZmZXJlbnQgZm9udCBmYW1pbHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBGb250RmFtaWx5U2VsZWN0Qm94IGV4dGVuZHMgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveENvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzc2VzOiBbJ3VpLXN1YnRpdGxlc2V0dGluZ3Nmb250ZmFtaWx5c2VsZWN0Ym94J10sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMuYWRkSXRlbShudWxsLCBpMThuLmdldExvY2FsaXplcignZGVmYXVsdCcpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ21vbm9zcGFjZWRzZXJpZicsIGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkubW9ub3NwYWNlZHNlcmlmJykpO1xuICAgIHRoaXMuYWRkSXRlbSgncHJvcG9ydGlvbmFsc2VyaWYnLCBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LnByb3BvcnRpb25hbHNlcmlmJykpO1xuICAgIHRoaXMuYWRkSXRlbSgnbW9ub3NwYWNlZHNhbnNzZXJpZicsIGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkubW9ub3NwYWNlZHNhbnNzZXJpZicpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ3Byb3BvcnRpb25hbHNhbnNzZXJpZicsIGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkucHJvcG9ydGlvbmFsc2VyaWYnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdjYXN1YWwnLCBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LmNhc3VhbCcpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ2N1cnNpdmUnLCBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LmN1cnNpdmUnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdzbWFsbGNhcGl0YWwnLCBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LnNtYWxsY2FwaXRhbCcpKTtcblxuICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRGYW1pbHkub25DaGFuZ2VkLnN1YnNjcmliZSgoc2VuZGVyLCBwcm9wZXJ0eSkgPT4ge1xuICAgICAgaWYgKHByb3BlcnR5LmlzU2V0KCkpIHtcbiAgICAgICAgdGhpcy50b2dnbGVPdmVybGF5Q2xhc3MoJ2ZvbnRmYW1pbHktJyArIHByb3BlcnR5LnZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudG9nZ2xlT3ZlcmxheUNsYXNzKG51bGwpO1xuICAgICAgfVxuXG4gICAgICAvLyBTZWxlY3QgdGhlIGl0ZW0gaW4gY2FzZSB0aGUgcHJvcGVydHkgd2FzIHNldCBmcm9tIG91dHNpZGVcbiAgICAgIHRoaXMuc2VsZWN0SXRlbShwcm9wZXJ0eS52YWx1ZSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uSXRlbVNlbGVjdGVkLnN1YnNjcmliZSgoc2VuZGVyLCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udEZhbWlseS52YWx1ZSA9IGtleTtcbiAgICB9KTtcblxuICAgIC8vIExvYWQgaW5pdGlhbCB2YWx1ZVxuICAgIGlmICh0aGlzLnNldHRpbmdzTWFuYWdlci5mb250RmFtaWx5LmlzU2V0KCkpIHtcbiAgICAgIHRoaXMuc2VsZWN0SXRlbSh0aGlzLnNldHRpbmdzTWFuYWdlci5mb250RmFtaWx5LnZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCwgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnIH0gZnJvbSAnLi9zdWJ0aXRsZXNldHRpbmdzZWxlY3Rib3gnO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEEgc2VsZWN0IGJveCBwcm92aWRpbmcgYSBzZWxlY3Rpb24gb2YgZGlmZmVyZW50IGZvbnQgY29sb3JzLlxuICovXG5leHBvcnQgY2xhc3MgRm9udE9wYWNpdHlTZWxlY3RCb3ggZXh0ZW5kcyBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3gge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzZXM6IFsndWktc3VidGl0bGVzZXR0aW5nc2ZvbnRvcGFjaXR5c2VsZWN0Ym94J10sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMuYWRkSXRlbShudWxsLCBpMThuLmdldExvY2FsaXplcignZGVmYXVsdCcpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJzEwMCcsIGkxOG4uZ2V0TG9jYWxpemVyKCdwZXJjZW50JywgeyB2YWx1ZTogMTAwIH0pKTtcbiAgICB0aGlzLmFkZEl0ZW0oJzc1JywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiA3NSB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCc1MCcsIGkxOG4uZ2V0TG9jYWxpemVyKCdwZXJjZW50JywgeyB2YWx1ZTogNTAgfSkpO1xuICAgIHRoaXMuYWRkSXRlbSgnMjUnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDI1IH0pKTtcblxuICAgIHRoaXMub25JdGVtU2VsZWN0ZWQuc3Vic2NyaWJlKChzZW5kZXIsIGtleTogc3RyaW5nKSA9PiB7XG4gICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5mb250T3BhY2l0eS52YWx1ZSA9IGtleTtcblxuICAgICAgLy8gQ29sb3IgYW5kIG9wYWNpdHkgZ28gdG9nZXRoZXIsIHNvIHdlIG5lZWQgdG8uLi5cbiAgICAgIGlmICghdGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udE9wYWNpdHkuaXNTZXQoKSkge1xuICAgICAgICAvLyAuLi4gY2xlYXIgdGhlIGNvbG9yIHdoZW4gdGhlIG9wYWNpdHkgaXMgbm90IHNldFxuICAgICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5mb250Q29sb3IuY2xlYXIoKTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRDb2xvci5pc1NldCgpKSB7XG4gICAgICAgIC8vIC4uLiBzZXQgYSBjb2xvciB3aGVuIHRoZSBvcGFjaXR5IGlzIHNldFxuICAgICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5mb250Q29sb3IudmFsdWUgPSAnd2hpdGUnO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gVXBkYXRlIHNlbGVjdGVkIGl0ZW0gd2hlbiB2YWx1ZSBpcyBzZXQgZnJvbSBzb21ld2hlcmUgZWxzZVxuICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRPcGFjaXR5Lm9uQ2hhbmdlZC5zdWJzY3JpYmUoKHNlbmRlciwgcHJvcGVydHkpID0+IHtcbiAgICAgIHRoaXMuc2VsZWN0SXRlbShwcm9wZXJ0eS52YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvLyBMb2FkIGluaXRpYWwgdmFsdWVcbiAgICBpZiAodGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udE9wYWNpdHkuaXNTZXQoKSkge1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRPcGFjaXR5LnZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCwgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnIH0gZnJvbSAnLi9zdWJ0aXRsZXNldHRpbmdzZWxlY3Rib3gnO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEEgc2VsZWN0IGJveCBwcm92aWRpbmcgYSBzZWxlY3Rpb24gb2YgZGlmZmVyZW50IGZvbnQgY29sb3JzLlxuICovXG5leHBvcnQgY2xhc3MgRm9udFNpemVTZWxlY3RCb3ggZXh0ZW5kcyBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3gge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzZXM6IFsndWktc3VidGl0bGVzZXR0aW5nc2ZvbnRzaXplc2VsZWN0Ym94J10sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMuYWRkSXRlbShudWxsLCBpMThuLmdldExvY2FsaXplcignZGVmYXVsdCcpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJzUwJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiA1MCB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCc3NScsIGkxOG4uZ2V0TG9jYWxpemVyKCdwZXJjZW50JywgeyB2YWx1ZTogNzUgfSkpO1xuICAgIHRoaXMuYWRkSXRlbSgnMTAwJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiAxMDAgfSkpO1xuICAgIHRoaXMuYWRkSXRlbSgnMTUwJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiAxNTAgfSkpO1xuICAgIHRoaXMuYWRkSXRlbSgnMjAwJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiAyMDAgfSkpO1xuICAgIHRoaXMuYWRkSXRlbSgnMzAwJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiAzMDAgfSkpO1xuICAgIHRoaXMuYWRkSXRlbSgnNDAwJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiA0MDAgfSkpO1xuXG4gICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udFNpemUub25DaGFuZ2VkLnN1YnNjcmliZSgoc2VuZGVyLCBwcm9wZXJ0eSkgPT4ge1xuICAgICAgaWYgKHByb3BlcnR5LmlzU2V0KCkpIHtcbiAgICAgICAgdGhpcy50b2dnbGVPdmVybGF5Q2xhc3MoJ2ZvbnRzaXplLScgKyBwcm9wZXJ0eS52YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRvZ2dsZU92ZXJsYXlDbGFzcyhudWxsKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2VsZWN0IHRoZSBpdGVtIGluIGNhc2UgdGhlIHByb3BlcnR5IHdhcyBzZXQgZnJvbSBvdXRzaWRlXG4gICAgICB0aGlzLnNlbGVjdEl0ZW0ocHJvcGVydHkudmFsdWUpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vbkl0ZW1TZWxlY3RlZC5zdWJzY3JpYmUoKHNlbmRlciwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRTaXplLnZhbHVlID0ga2V5O1xuICAgIH0pO1xuXG4gICAgLy8gTG9hZCBpbml0aWFsIHZhbHVlXG4gICAgaWYgKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRTaXplLmlzU2V0KCkpIHtcbiAgICAgIHRoaXMuc2VsZWN0SXRlbSh0aGlzLnNldHRpbmdzTWFuYWdlci5mb250U2l6ZS52YWx1ZSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge1N1YnRpdGxlT3ZlcmxheX0gZnJvbSAnLi4vc3VidGl0bGVvdmVybGF5JztcbmltcG9ydCB7TGlzdFNlbGVjdG9yQ29uZmlnfSBmcm9tICcuLi9saXN0c2VsZWN0b3InO1xuaW1wb3J0IHtTZWxlY3RCb3h9IGZyb20gJy4uL3NlbGVjdGJveCc7XG5pbXBvcnQge1N1YnRpdGxlU2V0dGluZ3NNYW5hZ2VyfSBmcm9tICcuL3N1YnRpdGxlc2V0dGluZ3NtYW5hZ2VyJztcblxuZXhwb3J0IGludGVyZmFjZSBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcgZXh0ZW5kcyBMaXN0U2VsZWN0b3JDb25maWcge1xuICBvdmVybGF5OiBTdWJ0aXRsZU92ZXJsYXk7XG4gIHNldHRpbmdzTWFuYWdlcjogU3VidGl0bGVTZXR0aW5nc01hbmFnZXI7XG59XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgYWxsIHN1YnRpdGxlcyBzZXR0aW5ncyBzZWxlY3QgYm94XG4gKiovXG5leHBvcnQgY2xhc3MgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94IGV4dGVuZHMgU2VsZWN0Qm94IHtcblxuICBwcm90ZWN0ZWQgc2V0dGluZ3NNYW5hZ2VyOiBTdWJ0aXRsZVNldHRpbmdzTWFuYWdlcjtcbiAgcHJvdGVjdGVkIG92ZXJsYXk6IFN1YnRpdGxlT3ZlcmxheTtcbiAgcHJpdmF0ZSBjdXJyZW50Q3NzQ2xhc3M6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveENvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLnNldHRpbmdzTWFuYWdlciA9IGNvbmZpZy5zZXR0aW5nc01hbmFnZXI7XG4gICAgdGhpcy5vdmVybGF5ID0gY29uZmlnLm92ZXJsYXk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIHByZXZpb3VzbHkgc2V0IGNsYXNzIGFuZCBhZGRzIHRoZSBwYXNzZWQgaW4gY2xhc3MuXG4gICAqIEBwYXJhbSBjc3NDbGFzcyBUaGUgbmV3IGNsYXNzIHRvIHJlcGxhY2UgdGhlIHByZXZpb3VzIGNsYXNzIHdpdGggb3IgbnVsbCB0byBqdXN0IHJlbW92ZSB0aGUgcHJldmlvdXMgY2xhc3NcbiAgICovXG4gIHByb3RlY3RlZCB0b2dnbGVPdmVybGF5Q2xhc3MoY3NzQ2xhc3M6IHN0cmluZyk6IHZvaWQge1xuICAgIC8vIFJlbW92ZSBwcmV2aW91cyBjbGFzcyBpZiBleGlzdGluZ1xuICAgIGlmICh0aGlzLmN1cnJlbnRDc3NDbGFzcykge1xuICAgICAgdGhpcy5vdmVybGF5LmdldERvbUVsZW1lbnQoKS5yZW1vdmVDbGFzcyh0aGlzLmN1cnJlbnRDc3NDbGFzcyk7XG4gICAgICB0aGlzLmN1cnJlbnRDc3NDbGFzcyA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gQWRkIG5ldyBjbGFzcyBpZiBzcGVjaWZpZWQuIElmIHRoZSBuZXcgY2xhc3MgaXMgbnVsbCwgd2UgZG9uJ3QgYWRkIGFueXRoaW5nLlxuICAgIGlmIChjc3NDbGFzcykge1xuICAgICAgdGhpcy5jdXJyZW50Q3NzQ2xhc3MgPSB0aGlzLnByZWZpeENzcyhjc3NDbGFzcyk7XG4gICAgICB0aGlzLm92ZXJsYXkuZ2V0RG9tRWxlbWVudCgpLmFkZENsYXNzKHRoaXMuY3VycmVudENzc0NsYXNzKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7TGFiZWxDb25maWd9IGZyb20gJy4uL2xhYmVsJztcbmltcG9ydCB7Q29udGFpbmVyLCBDb250YWluZXJDb25maWd9IGZyb20gJy4uL2NvbnRhaW5lcic7XG5pbXBvcnQge0RPTX0gZnJvbSAnLi4vLi4vZG9tJztcbmltcG9ydCB7U2V0dGluZ3NQYW5lbFBhZ2VPcGVuQnV0dG9ufSBmcm9tICcuLi9zZXR0aW5nc3BhbmVscGFnZW9wZW5idXR0b24nO1xuaW1wb3J0IHsgTG9jYWxpemFibGVUZXh0LCBpMThuIH0gZnJvbSAnLi4vLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN1YnRpdGxlU2V0dGluZ3NMYWJlbENvbmZpZyBleHRlbmRzIExhYmVsQ29uZmlnIHtcbiAgb3BlbmVyOiBTZXR0aW5nc1BhbmVsUGFnZU9wZW5CdXR0b247XG59XG5cbmV4cG9ydCBjbGFzcyBTdWJ0aXRsZVNldHRpbmdzTGFiZWwgZXh0ZW5kcyBDb250YWluZXI8Q29udGFpbmVyQ29uZmlnPiB7XG5cbiAgcHJpdmF0ZSBvcGVuZXI6IFNldHRpbmdzUGFuZWxQYWdlT3BlbkJ1dHRvbjtcblxuICBwcml2YXRlIHRleHQ6IExvY2FsaXphYmxlVGV4dDtcblxuICBwcml2YXRlIGZvcjogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU3VidGl0bGVTZXR0aW5nc0xhYmVsQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMub3BlbmVyID0gY29uZmlnLm9wZW5lcjtcbiAgICB0aGlzLnRleHQgPSBjb25maWcudGV4dDtcbiAgICB0aGlzLmZvciA9IGNvbmZpZy5mb3I7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoPENvbnRhaW5lckNvbmZpZz5jb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktbGFiZWwnLFxuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICB0aGlzLm9wZW5lcixcbiAgICAgIF0sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRvRG9tRWxlbWVudCgpOiBET00ge1xuICAgIGxldCBsYWJlbEVsZW1lbnQgPSBuZXcgRE9NKCdsYWJlbCcsIHtcbiAgICAgICdpZCc6IHRoaXMuY29uZmlnLmlkLFxuICAgICAgJ2NsYXNzJzogdGhpcy5nZXRDc3NDbGFzc2VzKCksXG4gICAgICAnZm9yJzogdGhpcy5mb3IsXG4gICAgfSkuYXBwZW5kKFxuICAgICAgbmV3IERPTSgnc3BhbicsIHt9KS5odG1sKGkxOG4ucGVyZm9ybUxvY2FsaXphdGlvbih0aGlzLnRleHQpKSxcbiAgICAgIHRoaXMub3BlbmVyLmdldERvbUVsZW1lbnQoKSxcbiAgICApO1xuXG4gICAgcmV0dXJuIGxhYmVsRWxlbWVudDtcbiAgfVxufVxuIiwiaW1wb3J0IHtTdG9yYWdlVXRpbHN9IGZyb20gJy4uLy4uL3N0b3JhZ2V1dGlscyc7XG5pbXBvcnQge0NvbXBvbmVudCwgQ29tcG9uZW50Q29uZmlnfSBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IHtFdmVudERpc3BhdGNoZXIsIEV2ZW50fSBmcm9tICcuLi8uLi9ldmVudGRpc3BhdGNoZXInO1xuXG5pbnRlcmZhY2UgU3VidGl0bGVTZXR0aW5ncyB7XG4gIGZvbnRDb2xvcj86IHN0cmluZztcbiAgZm9udE9wYWNpdHk/OiBzdHJpbmc7XG4gIGZvbnRGYW1pbHk/OiBzdHJpbmc7XG4gIGZvbnRTaXplPzogc3RyaW5nO1xuICBjaGFyYWN0ZXJFZGdlPzogc3RyaW5nO1xuICBiYWNrZ3JvdW5kQ29sb3I/OiBzdHJpbmc7XG4gIGJhY2tncm91bmRPcGFjaXR5Pzogc3RyaW5nO1xuICB3aW5kb3dDb2xvcj86IHN0cmluZztcbiAgd2luZG93T3BhY2l0eT86IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFByb3BlcnRpZXMge1xuICBbbmFtZTogc3RyaW5nXTogU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PHN0cmluZz47XG59XG5cbmV4cG9ydCBjbGFzcyBTdWJ0aXRsZVNldHRpbmdzTWFuYWdlciB7XG5cbiAgcHJpdmF0ZSB1c2VyU2V0dGluZ3M6IFN1YnRpdGxlU2V0dGluZ3M7XG4gIHByaXZhdGUgbG9jYWxTdG9yYWdlS2V5OiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBfcHJvcGVydGllczogUHJvcGVydGllcyA9IHtcbiAgICBmb250Q29sb3I6IG5ldyBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8c3RyaW5nPih0aGlzKSxcbiAgICBmb250T3BhY2l0eTogbmV3IFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxzdHJpbmc+KHRoaXMpLFxuICAgIGZvbnRGYW1pbHk6IG5ldyBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8c3RyaW5nPih0aGlzKSxcbiAgICBmb250U2l6ZTogbmV3IFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxzdHJpbmc+KHRoaXMpLFxuICAgIGNoYXJhY3RlckVkZ2U6IG5ldyBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8c3RyaW5nPih0aGlzKSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IG5ldyBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8c3RyaW5nPih0aGlzKSxcbiAgICBiYWNrZ3JvdW5kT3BhY2l0eTogbmV3IFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxzdHJpbmc+KHRoaXMpLFxuICAgIHdpbmRvd0NvbG9yOiBuZXcgU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PHN0cmluZz4odGhpcyksXG4gICAgd2luZG93T3BhY2l0eTogbmV3IFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxzdHJpbmc+KHRoaXMpLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudXNlclNldHRpbmdzID0ge307XG4gICAgdGhpcy5sb2NhbFN0b3JhZ2VLZXkgPSBEdW1teUNvbXBvbmVudC5pbnN0YW5jZSgpLnByZWZpeENzcygnc3VidGl0bGVzZXR0aW5ncycpO1xuXG4gICAgZm9yIChsZXQgcHJvcGVydHlOYW1lIGluIHRoaXMuX3Byb3BlcnRpZXMpIHtcbiAgICAgIHRoaXMuX3Byb3BlcnRpZXNbcHJvcGVydHlOYW1lXS5vbkNoYW5nZWQuc3Vic2NyaWJlKChzZW5kZXIsIHByb3BlcnR5KSA9PiB7XG4gICAgICAgIGlmIChwcm9wZXJ0eS5pc1NldCgpKSB7XG4gICAgICAgICAgKDxhbnk+dGhpcy51c2VyU2V0dGluZ3MpW3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0eS52YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBEZWxldGUgdGhlIHByb3BlcnR5IGZyb20gdGhlIHNldHRpbmdzIG9iamVjdCBpZiB1bnNldCB0byBhdm9pZCBzZXJpYWxpemF0aW9uIG9mIG51bGwgdmFsdWVzXG4gICAgICAgICAgZGVsZXRlICg8YW55PnRoaXMudXNlclNldHRpbmdzKVtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2F2ZSB0aGUgc2V0dGluZ3Mgb2JqZWN0IHdoZW4gYSBwcm9wZXJ0eSBoYXMgY2hhbmdlZFxuICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMubG9hZCgpO1xuICB9XG5cbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xuICAgIGZvciAobGV0IHByb3BlcnR5TmFtZSBpbiB0aGlzLl9wcm9wZXJ0aWVzKSB7XG4gICAgICB0aGlzLl9wcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV0uY2xlYXIoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0IGZvbnRDb2xvcigpOiBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb3BlcnRpZXMuZm9udENvbG9yO1xuICB9XG5cbiAgcHVibGljIGdldCBmb250T3BhY2l0eSgpOiBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb3BlcnRpZXMuZm9udE9wYWNpdHk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGZvbnRGYW1pbHkoKTogU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLl9wcm9wZXJ0aWVzLmZvbnRGYW1pbHk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGZvbnRTaXplKCk6IFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5fcHJvcGVydGllcy5mb250U2l6ZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgY2hhcmFjdGVyRWRnZSgpOiBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb3BlcnRpZXMuY2hhcmFjdGVyRWRnZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgYmFja2dyb3VuZENvbG9yKCk6IFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5fcHJvcGVydGllcy5iYWNrZ3JvdW5kQ29sb3I7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGJhY2tncm91bmRPcGFjaXR5KCk6IFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5fcHJvcGVydGllcy5iYWNrZ3JvdW5kT3BhY2l0eTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgd2luZG93Q29sb3IoKTogU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLl9wcm9wZXJ0aWVzLndpbmRvd0NvbG9yO1xuICB9XG5cbiAgcHVibGljIGdldCB3aW5kb3dPcGFjaXR5KCk6IFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5fcHJvcGVydGllcy53aW5kb3dPcGFjaXR5O1xuICB9XG5cbiAgLyoqXG4gICAqIFNhdmVzIHRoZSBzZXR0aW5ncyB0byBsb2NhbCBzdG9yYWdlLlxuICAgKi9cbiAgcHVibGljIHNhdmUoKTogdm9pZCB7XG4gICAgU3RvcmFnZVV0aWxzLnNldE9iamVjdCh0aGlzLmxvY2FsU3RvcmFnZUtleSwgdGhpcy51c2VyU2V0dGluZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIExvYWRzIHRoZSBzZXR0aW5ncyBmcm9tIGxvY2FsIHN0b3JhZ2VcbiAgICovXG4gIHB1YmxpYyBsb2FkKCk6IHZvaWQge1xuICAgIHRoaXMudXNlclNldHRpbmdzID0gU3RvcmFnZVV0aWxzLmdldE9iamVjdDxTdWJ0aXRsZVNldHRpbmdzPih0aGlzLmxvY2FsU3RvcmFnZUtleSkgfHwge307XG5cbiAgICAvLyBBcHBseSB0aGUgbG9hZGVkIHNldHRpbmdzXG4gICAgZm9yIChsZXQgcHJvcGVydHkgaW4gdGhpcy51c2VyU2V0dGluZ3MpIHtcbiAgICAgIHRoaXMuX3Byb3BlcnRpZXNbcHJvcGVydHldLnZhbHVlID0gKDxhbnk+dGhpcy51c2VyU2V0dGluZ3MpW3Byb3BlcnR5XTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBIGR1bW15IGNvbXBvbmVudCB3aG9zZSBzb2xlIHB1cnBvc2UgaXMgdG8gZXhwb3NlIHRoZSB7QGxpbmsgI3ByZWZpeENzc30gbWV0aG9kIHRvIHRoZVxuICoge0BsaW5rIFN1YnRpdGxlU2V0dGluZ3NNYW5hZ2VyfS5cbiAqL1xuY2xhc3MgRHVtbXlDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPiB7XG5cbiAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBEdW1teUNvbXBvbmVudDtcblxuICBwdWJsaWMgc3RhdGljIGluc3RhbmNlKCk6IER1bW15Q29tcG9uZW50IHtcbiAgICBpZiAoIUR1bW15Q29tcG9uZW50Ll9pbnN0YW5jZSkge1xuICAgICAgRHVtbXlDb21wb25lbnQuX2luc3RhbmNlID0gbmV3IER1bW15Q29tcG9uZW50KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIER1bW15Q29tcG9uZW50Ll9pbnN0YW5jZTtcbiAgfVxuXG4gIHB1YmxpYyBwcmVmaXhDc3MoY3NzQ2xhc3NPcklkOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBzdXBlci5wcmVmaXhDc3MoY3NzQ2xhc3NPcklkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PFQ+IHtcblxuICBwcml2YXRlIF9tYW5hZ2VyOiBTdWJ0aXRsZVNldHRpbmdzTWFuYWdlcjtcbiAgcHJpdmF0ZSBfb25DaGFuZ2VkOiBFdmVudERpc3BhdGNoZXI8U3VidGl0bGVTZXR0aW5nc01hbmFnZXIsIFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxUPj47XG4gIHByaXZhdGUgX3ZhbHVlOiBUO1xuXG4gIGNvbnN0cnVjdG9yKG1hbmFnZXI6IFN1YnRpdGxlU2V0dGluZ3NNYW5hZ2VyKSB7XG4gICAgdGhpcy5fbWFuYWdlciA9IG1hbmFnZXI7XG4gICAgdGhpcy5fb25DaGFuZ2VkID0gbmV3IEV2ZW50RGlzcGF0Y2hlcjxTdWJ0aXRsZVNldHRpbmdzTWFuYWdlciwgU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PFQ+PigpO1xuICB9XG5cbiAgcHVibGljIGlzU2V0KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZSAhPSBudWxsO1xuICB9XG5cbiAgcHVibGljIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcbiAgICB0aGlzLm9uQ2hhbmdlZEV2ZW50KG51bGwpO1xuICB9XG5cbiAgcHVibGljIGdldCB2YWx1ZSgpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBwdWJsaWMgc2V0IHZhbHVlKHZhbHVlOiBUKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgPT09ICdudWxsJykge1xuICAgICAgdmFsdWUgPSBudWxsO1xuICAgIH1cblxuICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5vbkNoYW5nZWRFdmVudCh2YWx1ZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25DaGFuZ2VkRXZlbnQodmFsdWU6IFQpIHtcbiAgICB0aGlzLl9vbkNoYW5nZWQuZGlzcGF0Y2godGhpcy5fbWFuYWdlciwgdGhpcyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IG9uQ2hhbmdlZCgpOiBFdmVudDxTdWJ0aXRsZVNldHRpbmdzTWFuYWdlciwgU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PFQ+PiB7XG4gICAgcmV0dXJuIHRoaXMuX29uQ2hhbmdlZC5nZXRFdmVudCgpO1xuICB9XG59IiwiaW1wb3J0IHtTZXR0aW5nc1BhbmVsUGFnZX0gZnJvbSAnLi4vc2V0dGluZ3NwYW5lbHBhZ2UnO1xuaW1wb3J0IHtTZXR0aW5nc1BhbmVsfSBmcm9tICcuLi9zZXR0aW5nc3BhbmVsJztcbmltcG9ydCB7U3VidGl0bGVPdmVybGF5fSBmcm9tICcuLi9zdWJ0aXRsZW92ZXJsYXknO1xuaW1wb3J0IHtDb250YWluZXJDb25maWd9IGZyb20gJy4uL2NvbnRhaW5lcic7XG5pbXBvcnQge1N1YnRpdGxlU2V0dGluZ3NNYW5hZ2VyfSBmcm9tICcuL3N1YnRpdGxlc2V0dGluZ3NtYW5hZ2VyJztcbmltcG9ydCB7Q29tcG9uZW50LCBDb21wb25lbnRDb25maWd9IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQge0ZvbnRTaXplU2VsZWN0Qm94fSBmcm9tICcuL2ZvbnRzaXplc2VsZWN0Ym94JztcbmltcG9ydCB7Rm9udEZhbWlseVNlbGVjdEJveH0gZnJvbSAnLi9mb250ZmFtaWx5c2VsZWN0Ym94JztcbmltcG9ydCB7Rm9udENvbG9yU2VsZWN0Qm94fSBmcm9tICcuL2ZvbnRjb2xvcnNlbGVjdGJveCc7XG5pbXBvcnQge0ZvbnRPcGFjaXR5U2VsZWN0Qm94fSBmcm9tICcuL2ZvbnRvcGFjaXR5c2VsZWN0Ym94JztcbmltcG9ydCB7Q2hhcmFjdGVyRWRnZVNlbGVjdEJveH0gZnJvbSAnLi9jaGFyYWN0ZXJlZGdlc2VsZWN0Ym94JztcbmltcG9ydCB7QmFja2dyb3VuZENvbG9yU2VsZWN0Qm94fSBmcm9tICcuL2JhY2tncm91bmRjb2xvcnNlbGVjdGJveCc7XG5pbXBvcnQge0JhY2tncm91bmRPcGFjaXR5U2VsZWN0Qm94fSBmcm9tICcuL2JhY2tncm91bmRvcGFjaXR5c2VsZWN0Ym94JztcbmltcG9ydCB7V2luZG93Q29sb3JTZWxlY3RCb3h9IGZyb20gJy4vd2luZG93Y29sb3JzZWxlY3Rib3gnO1xuaW1wb3J0IHtXaW5kb3dPcGFjaXR5U2VsZWN0Qm94fSBmcm9tICcuL3dpbmRvd29wYWNpdHlzZWxlY3Rib3gnO1xuaW1wb3J0IHtTdWJ0aXRsZVNldHRpbmdzUmVzZXRCdXR0b259IGZyb20gJy4vc3VidGl0bGVzZXR0aW5nc3Jlc2V0YnV0dG9uJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uLy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge1NldHRpbmdzUGFuZWxQYWdlQmFja0J1dHRvbn0gZnJvbSAnLi4vc2V0dGluZ3NwYW5lbHBhZ2ViYWNrYnV0dG9uJztcbmltcG9ydCB7U2V0dGluZ3NQYW5lbEl0ZW19IGZyb20gJy4uL3NldHRpbmdzcGFuZWxpdGVtJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN1YnRpdGxlU2V0dGluZ3NQYW5lbFBhZ2VDb25maWcgZXh0ZW5kcyBDb250YWluZXJDb25maWcge1xuICBzZXR0aW5nc1BhbmVsOiBTZXR0aW5nc1BhbmVsO1xuICBvdmVybGF5OiBTdWJ0aXRsZU92ZXJsYXk7XG59XG5cbmV4cG9ydCBjbGFzcyBTdWJ0aXRsZVNldHRpbmdzUGFuZWxQYWdlIGV4dGVuZHMgU2V0dGluZ3NQYW5lbFBhZ2Uge1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgb3ZlcmxheTogU3VidGl0bGVPdmVybGF5O1xuICBwcml2YXRlIHJlYWRvbmx5IHNldHRpbmdzUGFuZWw6IFNldHRpbmdzUGFuZWw7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTdWJ0aXRsZVNldHRpbmdzUGFuZWxQYWdlQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMub3ZlcmxheSA9IGNvbmZpZy5vdmVybGF5O1xuICAgIHRoaXMuc2V0dGluZ3NQYW5lbCA9IGNvbmZpZy5zZXR0aW5nc1BhbmVsO1xuXG4gICAgbGV0IG1hbmFnZXIgPSBuZXcgU3VidGl0bGVTZXR0aW5nc01hbmFnZXIoKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNvbXBvbmVudHM6IDxDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPltdPltcbiAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5zaXplJyksIG5ldyBGb250U2l6ZVNlbGVjdEJveCh7XG4gICAgICAgICAgb3ZlcmxheTogdGhpcy5vdmVybGF5LCBzZXR0aW5nc01hbmFnZXI6IG1hbmFnZXIsXG4gICAgICAgIH0pKSxcbiAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHknKSwgbmV3IEZvbnRGYW1pbHlTZWxlY3RCb3goe1xuICAgICAgICAgIG92ZXJsYXk6IHRoaXMub3ZlcmxheSwgc2V0dGluZ3NNYW5hZ2VyOiBtYW5hZ2VyLFxuICAgICAgICB9KSksXG4gICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbShpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuY29sb3InKSwgbmV3IEZvbnRDb2xvclNlbGVjdEJveCh7XG4gICAgICAgICAgb3ZlcmxheTogdGhpcy5vdmVybGF5LCBzZXR0aW5nc01hbmFnZXI6IG1hbmFnZXIsXG4gICAgICAgIH0pKSxcbiAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5vcGFjaXR5JyksIG5ldyBGb250T3BhY2l0eVNlbGVjdEJveCh7XG4gICAgICAgICAgb3ZlcmxheTogdGhpcy5vdmVybGF5LCBzZXR0aW5nc01hbmFnZXI6IG1hbmFnZXIsXG4gICAgICAgIH0pKSxcbiAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZScpLCBuZXcgQ2hhcmFjdGVyRWRnZVNlbGVjdEJveCh7XG4gICAgICAgICAgb3ZlcmxheTogdGhpcy5vdmVybGF5LCBzZXR0aW5nc01hbmFnZXI6IG1hbmFnZXIsXG4gICAgICAgIH0pKSxcbiAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMuYmFja2dyb3VuZC5jb2xvcicpLCBuZXcgQmFja2dyb3VuZENvbG9yU2VsZWN0Qm94KHtcbiAgICAgICAgICBvdmVybGF5OiB0aGlzLm92ZXJsYXksIHNldHRpbmdzTWFuYWdlcjogbWFuYWdlcixcbiAgICAgICAgfSkpLFxuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy5iYWNrZ3JvdW5kLm9wYWNpdHknKSwgbmV3IEJhY2tncm91bmRPcGFjaXR5U2VsZWN0Qm94KHtcbiAgICAgICAgICBvdmVybGF5OiB0aGlzLm92ZXJsYXksIHNldHRpbmdzTWFuYWdlcjogbWFuYWdlcixcbiAgICAgICAgfSkpLFxuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy53aW5kb3cuY29sb3InKSwgbmV3IFdpbmRvd0NvbG9yU2VsZWN0Qm94KHtcbiAgICAgICAgICBvdmVybGF5OiB0aGlzLm92ZXJsYXksIHNldHRpbmdzTWFuYWdlcjogbWFuYWdlcixcbiAgICAgICAgfSkpLFxuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy53aW5kb3cub3BhY2l0eScpLCBuZXcgV2luZG93T3BhY2l0eVNlbGVjdEJveCh7XG4gICAgICAgICAgb3ZlcmxheTogdGhpcy5vdmVybGF5LCBzZXR0aW5nc01hbmFnZXI6IG1hbmFnZXIsXG4gICAgICAgIH0pKSxcbiAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKG5ldyBTZXR0aW5nc1BhbmVsUGFnZUJhY2tCdXR0b24oe1xuICAgICAgICAgIGNvbnRhaW5lcjogdGhpcy5zZXR0aW5nc1BhbmVsLFxuICAgICAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdiYWNrJyksXG4gICAgICAgIH0pLCBuZXcgU3VidGl0bGVTZXR0aW5nc1Jlc2V0QnV0dG9uKHtcbiAgICAgICAgICBzZXR0aW5nc01hbmFnZXI6IG1hbmFnZXIsXG4gICAgICAgIH0pLCB7XG4gICAgICAgICAgcm9sZTogJ21lbnViYXInLFxuICAgICAgICB9KSxcbiAgICAgIF0sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMub25BY3RpdmUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMub3ZlcmxheS5lbmFibGVQcmV2aWV3U3VidGl0bGVMYWJlbCgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vbkluYWN0aXZlLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLm92ZXJsYXkucmVtb3ZlUHJldmlld1N1YnRpdGxlTGFiZWwoKTtcbiAgICB9KTtcbiAgfVxufSIsImltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uLy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge1N1YnRpdGxlU2V0dGluZ3NNYW5hZ2VyfSBmcm9tICcuL3N1YnRpdGxlc2V0dGluZ3NtYW5hZ2VyJztcbmltcG9ydCB7QnV0dG9uLCBCdXR0b25Db25maWd9IGZyb20gJy4uL2J1dHRvbic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uLy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuZXhwb3J0IGludGVyZmFjZSBTdWJ0aXRsZVNldHRpbmdzUmVzZXRCdXR0b25Db25maWcgZXh0ZW5kcyBCdXR0b25Db25maWcge1xuICBzZXR0aW5nc01hbmFnZXI6IFN1YnRpdGxlU2V0dGluZ3NNYW5hZ2VyO1xufVxuXG4vKipcbiAqIEEgYnV0dG9uIHRoYXQgcmVzZXRzIGFsbCBzdWJ0aXRsZSBzZXR0aW5ncyB0byB0aGVpciBkZWZhdWx0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIFN1YnRpdGxlU2V0dGluZ3NSZXNldEJ1dHRvbiBleHRlbmRzIEJ1dHRvbjxCdXR0b25Db25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFN1YnRpdGxlU2V0dGluZ3NSZXNldEJ1dHRvbkNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXN1YnRpdGxlc2V0dGluZ3NyZXNldGJ1dHRvbicsXG4gICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcigncmVzZXQnKSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAoPFN1YnRpdGxlU2V0dGluZ3NSZXNldEJ1dHRvbkNvbmZpZz50aGlzLmNvbmZpZykuc2V0dGluZ3NNYW5hZ2VyLnJlc2V0KCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCwgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnIH0gZnJvbSAnLi9zdWJ0aXRsZXNldHRpbmdzZWxlY3Rib3gnO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEEgc2VsZWN0IGJveCBwcm92aWRpbmcgYSBzZWxlY3Rpb24gb2YgZGlmZmVyZW50IGJhY2tncm91bmQgY29sb3JzLlxuICovXG5leHBvcnQgY2xhc3MgV2luZG93Q29sb3JTZWxlY3RCb3ggZXh0ZW5kcyBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3gge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzZXM6IFsndWktc3VidGl0bGVzZXR0aW5nc3dpbmRvd2NvbG9yc2VsZWN0Ym94J10sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMuYWRkSXRlbShudWxsLCBpMThuLmdldExvY2FsaXplcignZGVmYXVsdCcpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ3doaXRlJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy53aGl0ZScpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ2JsYWNrJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy5ibGFjaycpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ3JlZCcsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMucmVkJykpO1xuICAgIHRoaXMuYWRkSXRlbSgnZ3JlZW4nLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLmdyZWVuJykpO1xuICAgIHRoaXMuYWRkSXRlbSgnYmx1ZScsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMuYmx1ZScpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ2N5YW4nLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLmN5YW4nKSk7XG4gICAgdGhpcy5hZGRJdGVtKCd5ZWxsb3cnLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLnllbGxvdycpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ21hZ2VudGEnLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLm1hZ2VudGEnKSk7XG5cblxuXG4gICAgbGV0IHNldENvbG9yQW5kT3BhY2l0eSA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dDb2xvci5pc1NldCgpICYmIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLndpbmRvd09wYWNpdHkuaXNTZXQoKSkge1xuICAgICAgICB0aGlzLnRvZ2dsZU92ZXJsYXlDbGFzcyhcbiAgICAgICAgICAnd2luZG93Y29sb3ItJyArIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLndpbmRvd0NvbG9yLnZhbHVlICsgdGhpcy5zZXR0aW5nc01hbmFnZXIud2luZG93T3BhY2l0eS52YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRvZ2dsZU92ZXJsYXlDbGFzcyhudWxsKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5vbkl0ZW1TZWxlY3RlZC5zdWJzY3JpYmUoKHNlbmRlciwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLndpbmRvd0NvbG9yLnZhbHVlID0ga2V5O1xuICAgIH0pO1xuXG4gICAgdGhpcy5zZXR0aW5nc01hbmFnZXIud2luZG93Q29sb3Iub25DaGFuZ2VkLnN1YnNjcmliZSgoc2VuZGVyLCBwcm9wZXJ0eSkgPT4ge1xuICAgICAgLy8gQ29sb3IgYW5kIG9wYWNpdHkgZ28gdG9nZXRoZXIsIHNvIHdlIG5lZWQgdG8uLi5cbiAgICAgIGlmICghdGhpcy5zZXR0aW5nc01hbmFnZXIud2luZG93Q29sb3IuaXNTZXQoKSkge1xuICAgICAgICAvLyAuLi4gY2xlYXIgdGhlIG9wYWNpdHkgd2hlbiB0aGUgY29sb3IgaXMgbm90IHNldFxuICAgICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dPcGFjaXR5LmNsZWFyKCk7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dPcGFjaXR5LmlzU2V0KCkpIHtcbiAgICAgICAgLy8gLi4uIHNldCBhbiBvcGFjaXR5IHdoZW4gdGhlIGNvbG9yIGlzIHNldFxuICAgICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dPcGFjaXR5LnZhbHVlID0gJzEwMCc7XG4gICAgICB9XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0ocHJvcGVydHkudmFsdWUpO1xuICAgICAgc2V0Q29sb3JBbmRPcGFjaXR5KCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dPcGFjaXR5Lm9uQ2hhbmdlZC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgc2V0Q29sb3JBbmRPcGFjaXR5KCk7XG4gICAgfSk7XG5cbiAgICAvLyBMb2FkIGluaXRpYWwgdmFsdWVcbiAgICBpZiAodGhpcy5zZXR0aW5nc01hbmFnZXIud2luZG93Q29sb3IuaXNTZXQoKSkge1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLndpbmRvd0NvbG9yLnZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCwgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnIH0gZnJvbSAnLi9zdWJ0aXRsZXNldHRpbmdzZWxlY3Rib3gnO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEEgc2VsZWN0IGJveCBwcm92aWRpbmcgYSBzZWxlY3Rpb24gb2YgZGlmZmVyZW50IGJhY2tncm91bmQgb3BhY2l0eS5cbiAqL1xuZXhwb3J0IGNsYXNzIFdpbmRvd09wYWNpdHlTZWxlY3RCb3ggZXh0ZW5kcyBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3gge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzZXM6IFsndWktc3VidGl0bGVzZXR0aW5nc3dpbmRvd29wYWNpdHlzZWxlY3Rib3gnXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5hZGRJdGVtKG51bGwsIGkxOG4uZ2V0TG9jYWxpemVyKCdkZWZhdWx0JykpO1xuICAgIHRoaXMuYWRkSXRlbSgnMTAwJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiAxMDAgfSkpO1xuICAgIHRoaXMuYWRkSXRlbSgnNzUnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDc1IH0pKTtcbiAgICB0aGlzLmFkZEl0ZW0oJzUwJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiA1MCB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCcyNScsIGkxOG4uZ2V0TG9jYWxpemVyKCdwZXJjZW50JywgeyB2YWx1ZTogMjUgfSkpO1xuICAgIHRoaXMuYWRkSXRlbSgnMCcsIGkxOG4uZ2V0TG9jYWxpemVyKCdwZXJjZW50JywgeyB2YWx1ZTogMCB9KSk7XG5cbiAgICB0aGlzLm9uSXRlbVNlbGVjdGVkLnN1YnNjcmliZSgoc2VuZGVyLCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgdGhpcy5zZXR0aW5nc01hbmFnZXIud2luZG93T3BhY2l0eS52YWx1ZSA9IGtleTtcblxuICAgICAgLy8gQ29sb3IgYW5kIG9wYWNpdHkgZ28gdG9nZXRoZXIsIHNvIHdlIG5lZWQgdG8uLi5cbiAgICAgIGlmICghdGhpcy5zZXR0aW5nc01hbmFnZXIud2luZG93T3BhY2l0eS5pc1NldCgpKSB7XG4gICAgICAgIC8vIC4uLiBjbGVhciB0aGUgY29sb3Igd2hlbiB0aGUgb3BhY2l0eSBpcyBub3Qgc2V0XG4gICAgICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLndpbmRvd0NvbG9yLmNsZWFyKCk7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dDb2xvci5pc1NldCgpKSB7XG4gICAgICAgIC8vIC4uLiBzZXQgYSBjb2xvciB3aGVuIHRoZSBvcGFjaXR5IGlzIHNldFxuICAgICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dDb2xvci52YWx1ZSA9ICdibGFjayc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBVcGRhdGUgc2VsZWN0ZWQgaXRlbSB3aGVuIHZhbHVlIGlzIHNldCBmcm9tIHNvbWV3aGVyZSBlbHNlXG4gICAgdGhpcy5zZXR0aW5nc01hbmFnZXIud2luZG93T3BhY2l0eS5vbkNoYW5nZWQuc3Vic2NyaWJlKChzZW5kZXIsIHByb3BlcnR5KSA9PiB7XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0ocHJvcGVydHkudmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLy8gTG9hZCBpbml0aWFsIHZhbHVlXG4gICAgaWYgKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLndpbmRvd09wYWNpdHkuaXNTZXQoKSkge1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLndpbmRvd09wYWNpdHkudmFsdWUpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IFVJSW5zdGFuY2VNYW5hZ2VyIH0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IERPTSB9IGZyb20gJy4uL2RvbSc7XG5pbXBvcnQgeyBDb21wb25lbnRDb25maWcgfSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBUaW1lbGluZU1hcmtlciB9IGZyb20gJy4uL3VpY29uZmlnJztcbmltcG9ydCB7IFNlZWtCYXJNYXJrZXIgfSBmcm9tICcuL3NlZWtiYXInO1xuaW1wb3J0IHsgUGxheWVyVXRpbHMgfSBmcm9tICcuLi9wbGF5ZXJ1dGlscyc7XG5pbXBvcnQgeyBUaW1lb3V0IH0gZnJvbSAnLi4vdGltZW91dCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWFya2Vyc0NvbmZpZyBleHRlbmRzIENvbXBvbmVudENvbmZpZyB7XG4gIC8qKlxuICAgKiBVc2VkIGZvciBzZWVrQmFyIG1hcmtlciBzbmFwcGluZyByYW5nZSBwZXJjZW50YWdlXG4gICAqL1xuICBzbmFwcGluZ1JhbmdlPzogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgVGltZWxpbmVNYXJrZXJzSGFuZGxlciB7XG4gIHByaXZhdGUgbWFya2Vyc0NvbnRhaW5lcjogRE9NO1xuICBwcml2YXRlIHRpbWVsaW5lTWFya2VyczogU2Vla0Jhck1hcmtlcltdO1xuICBwcml2YXRlIHBsYXllcjogUGxheWVyQVBJO1xuICBwcml2YXRlIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXI7XG4gIHByaXZhdGUgcGF1c2VkVGltZXNoaWZ0VXBkYXRlcjogVGltZW91dDtcbiAgcHJpdmF0ZSBnZXRTZWVrQmFyV2lkdGg6ICgpID0+IG51bWJlcjtcbiAgcHJvdGVjdGVkIGNvbmZpZzogTWFya2Vyc0NvbmZpZztcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IE1hcmtlcnNDb25maWcsIGdldFNlZWtCYXJXaWR0aDogKCkgPT4gbnVtYmVyLCBtYXJrZXJzQ29udGFpbmVyOiBET00pIHtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICB0aGlzLmdldFNlZWtCYXJXaWR0aCA9IGdldFNlZWtCYXJXaWR0aDtcbiAgICB0aGlzLm1hcmtlcnNDb250YWluZXIgPSBtYXJrZXJzQ29udGFpbmVyO1xuICAgIHRoaXMudGltZWxpbmVNYXJrZXJzID0gW107XG4gIH1cblxuICBwdWJsaWMgaW5pdGlhbGl6ZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcikge1xuICAgIHRoaXMucGxheWVyID0gcGxheWVyO1xuICAgIHRoaXMudWltYW5hZ2VyID0gdWltYW5hZ2VyO1xuICAgIHRoaXMuY29uZmlndXJlTWFya2VycygpO1xuICB9XG5cbiAgcHJpdmF0ZSBjb25maWd1cmVNYXJrZXJzKCk6IHZvaWQge1xuICAgIC8vIFJlbW92ZSBtYXJrZXJzIHdoZW4gdW5sb2FkZWRcbiAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZVVubG9hZGVkLCAoKSA9PiB0aGlzLmNsZWFyTWFya2VycygpKTtcbiAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkQnJlYWtTdGFydGVkLCAoKSA9PiB0aGlzLmNsZWFyTWFya2VycygpKTtcbiAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkQnJlYWtGaW5pc2hlZCwgKCkgPT4gdGhpcy51cGRhdGVNYXJrZXJzKCkpO1xuICAgIC8vIFVwZGF0ZSBtYXJrZXJzIHdoZW4gdGhlIHNpemUgb2YgdGhlIHNlZWtiYXIgY2hhbmdlc1xuICAgIHRoaXMucGxheWVyLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheWVyUmVzaXplZCwgKCkgPT4gdGhpcy51cGRhdGVNYXJrZXJzRE9NKCkpO1xuXG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VMb2FkZWQsICgpID0+IHtcbiAgICAgIGlmICh0aGlzLnBsYXllci5pc0xpdmUoKSkge1xuICAgICAgICAvLyBVcGRhdGUgbWFya2VyIHBvc2l0aW9uIGFzIHRpbWVzaGlmdCByYW5nZSBjaGFuZ2VzXG4gICAgICAgIHRoaXMucGxheWVyLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVGltZUNoYW5nZWQsICgpID0+IHRoaXMudXBkYXRlTWFya2VycygpKTtcbiAgICAgICAgLy8gVXBkYXRlIG1hcmtlciBwb3N0aW9uIHdoZW4gcGF1c2VkIGFzIHRpbWVzaGlmdCByYW5nZSBjaGFuZ2VzXG4gICAgICAgIHRoaXMuY29uZmlndXJlTGl2ZVBhdXNlZFRpbWVzaGlmdFVwZGF0ZXIoKCkgPT4gdGhpcy51cGRhdGVNYXJrZXJzKCkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMudWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKCgpID0+IHRoaXMudXBkYXRlTWFya2VycygpKTtcbiAgICB0aGlzLnVpbWFuYWdlci5vblJlbGVhc2Uuc3Vic2NyaWJlKCgpID0+IHRoaXMudWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQudW5zdWJzY3JpYmUoKCkgPT4gdGhpcy51cGRhdGVNYXJrZXJzKCkpKTtcblxuICAgIC8vIEluaXQgbWFya2VycyBhdCBzdGFydHVwXG4gICAgdGhpcy51cGRhdGVNYXJrZXJzKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0TWFya2VyQXRQb3NpdGlvbihwZXJjZW50YWdlOiBudW1iZXIpOiBTZWVrQmFyTWFya2VyIHwgbnVsbCB7XG4gICAgY29uc3Qgc25hcHBpbmdSYW5nZSA9IHRoaXMuY29uZmlnLnNuYXBwaW5nUmFuZ2U7XG5cbiAgICBjb25zdCBtYXRjaGluZ01hcmtlciA9IHRoaXMudGltZWxpbmVNYXJrZXJzLmZpbmQobWFya2VyID0+IHtcbiAgICAgIGNvbnN0IGhhc0R1cmF0aW9uID0gbWFya2VyLmR1cmF0aW9uID4gMDtcbiAgICAgIC8vIEhhbmRsZSBpbnRlcnZhbCBtYXJrZXJzXG4gICAgICBjb25zdCBpbnRlcnZhbE1hcmtlck1hdGNoID1cbiAgICAgICAgaGFzRHVyYXRpb24gJiZcbiAgICAgICAgcGVyY2VudGFnZSA+PSBtYXJrZXIucG9zaXRpb24gLSBzbmFwcGluZ1JhbmdlICYmXG4gICAgICAgIHBlcmNlbnRhZ2UgPD0gbWFya2VyLnBvc2l0aW9uICsgbWFya2VyLmR1cmF0aW9uICsgc25hcHBpbmdSYW5nZTtcblxuICAgICAgLy8gSGFuZGxlIHBvc2l0aW9uIG1hcmtlcnNcbiAgICAgIGNvbnN0IHBvc2l0aW9uTWFya2VyTWF0Y2ggPVxuICAgICAgICBwZXJjZW50YWdlID49IG1hcmtlci5wb3NpdGlvbiAtIHNuYXBwaW5nUmFuZ2UgJiZcbiAgICAgICAgcGVyY2VudGFnZSA8PSBtYXJrZXIucG9zaXRpb24gKyBzbmFwcGluZ1JhbmdlO1xuXG4gICAgICByZXR1cm4gaW50ZXJ2YWxNYXJrZXJNYXRjaCB8fCBwb3NpdGlvbk1hcmtlck1hdGNoO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1hdGNoaW5nTWFya2VyIHx8IG51bGw7XG4gIH1cblxuICBwcml2YXRlIGNsZWFyTWFya2VycygpOiB2b2lkIHtcbiAgICB0aGlzLnRpbWVsaW5lTWFya2VycyA9IFtdO1xuICAgIHRoaXMubWFya2Vyc0NvbnRhaW5lci5lbXB0eSgpO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVNYXJrZXJGcm9tQ29uZmlnKG1hcmtlcjogVGltZWxpbmVNYXJrZXIpOiB2b2lkIHtcbiAgICB0aGlzLnVpbWFuYWdlci5nZXRDb25maWcoKS5tZXRhZGF0YS5tYXJrZXJzID0gdGhpcy51aW1hbmFnZXIuZ2V0Q29uZmlnKCkubWV0YWRhdGEubWFya2Vycy5maWx0ZXIoX21hcmtlciA9PiBtYXJrZXIgIT09IF9tYXJrZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBmaWx0ZXJSZW1vdmVkTWFya2VycygpOiB2b2lkIHtcbiAgICB0aGlzLnRpbWVsaW5lTWFya2VycyA9IHRoaXMudGltZWxpbmVNYXJrZXJzLmZpbHRlcihzZWVrYmFyTWFya2VyID0+IHtcbiAgICAgIGNvbnN0IG1hdGNoaW5nTWFya2VyID0gdGhpcy51aW1hbmFnZXIuZ2V0Q29uZmlnKCkubWV0YWRhdGEubWFya2Vycy5maW5kKF9tYXJrZXIgPT4gc2Vla2Jhck1hcmtlci5tYXJrZXIgPT09IF9tYXJrZXIpO1xuICAgICAgaWYgKCFtYXRjaGluZ01hcmtlcikge1xuICAgICAgICB0aGlzLnJlbW92ZU1hcmtlckZyb21ET00oc2Vla2Jhck1hcmtlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2hpbmdNYXJrZXI7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZU1hcmtlckZyb21ET00obWFya2VyOiBTZWVrQmFyTWFya2VyKTogdm9pZCB7XG4gICAgaWYgKG1hcmtlci5lbGVtZW50KSB7XG4gICAgICBtYXJrZXIuZWxlbWVudC5yZW1vdmUoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZU1hcmtlcnMoKTogdm9pZCB7XG4gICAgaWYgKCFzaG91bGRQcm9jZXNzTWFya2Vycyh0aGlzLnBsYXllciwgdGhpcy51aW1hbmFnZXIpKSB7XG4gICAgICB0aGlzLmNsZWFyTWFya2VycygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZmlsdGVyUmVtb3ZlZE1hcmtlcnMoKTtcblxuICAgIHRoaXMudWltYW5hZ2VyLmdldENvbmZpZygpLm1ldGFkYXRhLm1hcmtlcnMuZm9yRWFjaChtYXJrZXIgPT4ge1xuICAgICAgY29uc3QgeyBtYXJrZXJQb3NpdGlvbiwgbWFya2VyRHVyYXRpb24gfSA9IGdldE1hcmtlclBvc2l0aW9ucyh0aGlzLnBsYXllciwgbWFya2VyKTtcblxuICAgICAgaWYgKHNob3VsZFJlbW92ZU1hcmtlcihtYXJrZXJQb3NpdGlvbiwgbWFya2VyRHVyYXRpb24pKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTWFya2VyRnJvbUNvbmZpZyhtYXJrZXIpO1xuICAgICAgfSBlbHNlIGlmIChtYXJrZXJQb3NpdGlvbiA8PSAxMDApIHtcbiAgICAgICAgY29uc3QgbWF0Y2hpbmdNYXJrZXIgPSB0aGlzLnRpbWVsaW5lTWFya2Vycy5maW5kKHNlZWtiYXJNYXJrZXIgPT4gc2Vla2Jhck1hcmtlci5tYXJrZXIgPT09IG1hcmtlcik7XG5cbiAgICAgICAgaWYgKG1hdGNoaW5nTWFya2VyKSB7XG4gICAgICAgICAgbWF0Y2hpbmdNYXJrZXIucG9zaXRpb24gPSBtYXJrZXJQb3NpdGlvbjtcbiAgICAgICAgICBtYXRjaGluZ01hcmtlci5kdXJhdGlvbiA9IG1hcmtlckR1cmF0aW9uO1xuXG4gICAgICAgICAgdGhpcy51cGRhdGVNYXJrZXJET00obWF0Y2hpbmdNYXJrZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IG5ld01hcmtlcjogU2Vla0Jhck1hcmtlciA9IHsgbWFya2VyLCBwb3NpdGlvbjogbWFya2VyUG9zaXRpb24sIGR1cmF0aW9uOiBtYXJrZXJEdXJhdGlvbiB9O1xuICAgICAgICAgIHRoaXMudGltZWxpbmVNYXJrZXJzLnB1c2gobmV3TWFya2VyKTtcblxuICAgICAgICAgIHRoaXMuY3JlYXRlTWFya2VyRE9NKG5ld01hcmtlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TWFya2VyQ3NzUHJvcGVydGllcyhtYXJrZXI6IFNlZWtCYXJNYXJrZXIpOiB7IFtwcm9wZXJ0eU5hbWU6IHN0cmluZ106IHN0cmluZyB9IHtcbiAgICBjb25zdCBzZWVrQmFyV2lkdGhQeCA9IHRoaXMuZ2V0U2Vla0JhcldpZHRoKCk7XG5cbiAgICBjb25zdCBwb3NpdGlvbkluUHggPSAoc2Vla0JhcldpZHRoUHggLyAxMDApICogKG1hcmtlci5wb3NpdGlvbiA8IDAgPyAwIDogbWFya2VyLnBvc2l0aW9uKTtcbiAgICBjb25zdCBjc3NQcm9wZXJ0aWVzOiB7IFtwcm9wZXJ0eU5hbWU6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICAgICAgJ3RyYW5zZm9ybSc6IGB0cmFuc2xhdGVYKCR7cG9zaXRpb25JblB4fXB4KWAsXG4gICAgfTtcblxuICAgIGlmIChtYXJrZXIuZHVyYXRpb24gPiAwKSB7XG4gICAgICBjb25zdCBtYXJrZXJXaWR0aFB4ID0gTWF0aC5yb3VuZChzZWVrQmFyV2lkdGhQeCAvIDEwMCAqIG1hcmtlci5kdXJhdGlvbik7XG4gICAgICBjc3NQcm9wZXJ0aWVzWyd3aWR0aCddID0gYCR7bWFya2VyV2lkdGhQeH1weGA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNzc1Byb3BlcnRpZXM7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZU1hcmtlckRPTShtYXJrZXI6IFNlZWtCYXJNYXJrZXIpOiB2b2lkIHtcbiAgICBtYXJrZXIuZWxlbWVudC5jc3ModGhpcy5nZXRNYXJrZXJDc3NQcm9wZXJ0aWVzKG1hcmtlcikpO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVNYXJrZXJET00obWFya2VyOiBTZWVrQmFyTWFya2VyKTogdm9pZCB7XG4gICAgY29uc3QgbWFya2VyQ2xhc3NlcyA9IFsnc2Vla2Jhci1tYXJrZXInXS5jb25jYXQobWFya2VyLm1hcmtlci5jc3NDbGFzc2VzIHx8IFtdKVxuICAgICAgLm1hcChjc3NDbGFzcyA9PiB0aGlzLnByZWZpeENzcyhjc3NDbGFzcykpO1xuXG4gICAgY29uc3QgbWFya2VyRWxlbWVudCA9IG5ldyBET00oJ2RpdicsIHtcbiAgICAgICdjbGFzcyc6IG1hcmtlckNsYXNzZXMuam9pbignICcpLFxuICAgICAgJ2RhdGEtbWFya2VyLXRpbWUnOiBTdHJpbmcobWFya2VyLm1hcmtlci50aW1lKSxcbiAgICAgICdkYXRhLW1hcmtlci10aXRsZSc6IFN0cmluZyhtYXJrZXIubWFya2VyLnRpdGxlKSxcbiAgICB9KS5jc3ModGhpcy5nZXRNYXJrZXJDc3NQcm9wZXJ0aWVzKG1hcmtlcikpO1xuXG4gICAgaWYgKG1hcmtlci5tYXJrZXIuaW1hZ2VVcmwpIHtcbiAgICAgIGNvbnN0IHJlbW92ZUltYWdlID0gKCkgPT4ge1xuICAgICAgICBpbWFnZUVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBpbWFnZUVsZW1lbnQgPSBuZXcgRE9NKCdpbWcnLCB7XG4gICAgICAgICdjbGFzcyc6IHRoaXMucHJlZml4Q3NzKCdzZWVrYmFyLW1hcmtlci1pbWFnZScpLFxuICAgICAgICAnc3JjJzogbWFya2VyLm1hcmtlci5pbWFnZVVybCxcbiAgICAgIH0pLm9uKCdlcnJvcicsIHJlbW92ZUltYWdlKTtcblxuICAgICAgbWFya2VyRWxlbWVudC5hcHBlbmQoaW1hZ2VFbGVtZW50KTtcbiAgICB9XG5cbiAgICBtYXJrZXIuZWxlbWVudCA9IG1hcmtlckVsZW1lbnQ7XG4gICAgdGhpcy5tYXJrZXJzQ29udGFpbmVyLmFwcGVuZChtYXJrZXJFbGVtZW50KTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlTWFya2Vyc0RPTSgpOiB2b2lkIHtcbiAgICB0aGlzLnRpbWVsaW5lTWFya2Vycy5mb3JFYWNoKG1hcmtlciA9PiB7XG4gICAgICBpZiAobWFya2VyLmVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy51cGRhdGVNYXJrZXJET00obWFya2VyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY3JlYXRlTWFya2VyRE9NKG1hcmtlcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGNvbmZpZ3VyZUxpdmVQYXVzZWRUaW1lc2hpZnRVcGRhdGVyKFxuICAgIGhhbmRsZXI6ICgpID0+IHZvaWQsXG4gICk6IHZvaWQge1xuICAgIC8vIFJlZ3VsYXJseSB1cGRhdGUgdGhlIG1hcmtlciBwb3NpdGlvbiB3aGlsZSB0aGUgdGltZW91dCBpcyBhY3RpdmVcbiAgICB0aGlzLnBhdXNlZFRpbWVzaGlmdFVwZGF0ZXIgPSBuZXcgVGltZW91dCgxMDAwLCBoYW5kbGVyLCB0cnVlKTtcblxuICAgIHRoaXMucGxheWVyLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGF1c2VkLCAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5wbGF5ZXIuaXNMaXZlKCkgJiYgdGhpcy5wbGF5ZXIuZ2V0TWF4VGltZVNoaWZ0KCkgPCAwKSB7XG4gICAgICAgIHRoaXMucGF1c2VkVGltZXNoaWZ0VXBkYXRlci5zdGFydCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gU3RvcCB1cGRhdGVyIHdoZW4gcGxheWJhY2sgY29udGludWVzIChubyBtYXR0ZXIgaWYgdGhlIHVwZGF0ZXIgd2FzIHN0YXJ0ZWQgYmVmb3JlKVxuICAgIHRoaXMucGxheWVyLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheSwgKCkgPT4gdGhpcy5wYXVzZWRUaW1lc2hpZnRVcGRhdGVyLmNsZWFyKCkpO1xuICAgIHRoaXMucGxheWVyLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuRGVzdHJveSwgKCkgPT4gdGhpcy5wYXVzZWRUaW1lc2hpZnRVcGRhdGVyLmNsZWFyKCkpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHByZWZpeENzcyhjc3NDbGFzc09ySWQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLmNzc1ByZWZpeCArICctJyArIGNzc0NsYXNzT3JJZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRNYXJrZXJQb3NpdGlvbnMocGxheWVyOiBQbGF5ZXJBUEksIG1hcmtlcjogVGltZWxpbmVNYXJrZXIpIHtcbiAgY29uc3QgZHVyYXRpb24gPSBnZXREdXJhdGlvbihwbGF5ZXIpO1xuXG4gIGNvbnN0IG1hcmtlclBvc2l0aW9uID0gMTAwIC8gZHVyYXRpb24gKiBnZXRNYXJrZXJUaW1lKG1hcmtlciwgcGxheWVyLCBkdXJhdGlvbik7IC8vIGNvbnZlcnQgYWJzb2x1dGUgdGltZSB0byBwZXJjZW50YWdlXG4gIGxldCBtYXJrZXJEdXJhdGlvbiA9IDEwMCAvIGR1cmF0aW9uICogbWFya2VyLmR1cmF0aW9uO1xuXG4gIGlmIChtYXJrZXJQb3NpdGlvbiA8IDAgJiYgIWlzTmFOKG1hcmtlckR1cmF0aW9uKSkge1xuICAgIC8vIFNocmluayBtYXJrZXIgZHVyYXRpb24gZm9yIG9uIGxpdmUgc3RyZWFtcyBhcyB0aGV5IHJlYWNoIGVuZFxuICAgIG1hcmtlckR1cmF0aW9uID0gbWFya2VyRHVyYXRpb24gKyBtYXJrZXJQb3NpdGlvbjtcbiAgfVxuXG4gIGlmICgxMDAgLSBtYXJrZXJQb3NpdGlvbiA8IG1hcmtlckR1cmF0aW9uKSB7XG4gICAgLy8gU2hyaW5rIG1hcmtlciBpZiBpdCBvdmVyZmxvd3MgdGltZWxpbmVcbiAgICBtYXJrZXJEdXJhdGlvbiA9IDEwMCAtIG1hcmtlclBvc2l0aW9uO1xuICB9XG5cbiAgcmV0dXJuIHsgbWFya2VyRHVyYXRpb24sIG1hcmtlclBvc2l0aW9uIH07XG59XG5cbmZ1bmN0aW9uIGdldE1hcmtlclRpbWUobWFya2VyOiBUaW1lbGluZU1hcmtlciwgcGxheWVyOiBQbGF5ZXJBUEksIGR1cmF0aW9uOiBudW1iZXIpOiBudW1iZXIge1xuICBpZiAoIXBsYXllci5pc0xpdmUoKSkge1xuICAgIHJldHVybiBtYXJrZXIudGltZTtcbiAgfVxuXG4gIHJldHVybiBkdXJhdGlvbiAtIChQbGF5ZXJVdGlscy5nZXRTZWVrYWJsZVJhbmdlUmVzcGVjdGluZ0xpdmUocGxheWVyKS5lbmQgLSBtYXJrZXIudGltZSk7XG59XG5cbmZ1bmN0aW9uIGdldER1cmF0aW9uKHBsYXllcjogUGxheWVyQVBJKTogbnVtYmVyIHtcbiAgaWYgKCFwbGF5ZXIuaXNMaXZlKCkpIHtcbiAgICByZXR1cm4gcGxheWVyLmdldER1cmF0aW9uKCk7XG4gIH1cbiAgY29uc3QgeyBzdGFydCwgZW5kIH0gPSBQbGF5ZXJVdGlscy5nZXRTZWVrYWJsZVJhbmdlUmVzcGVjdGluZ0xpdmUocGxheWVyKTtcblxuICByZXR1cm4gZW5kIC0gc3RhcnQ7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFJlbW92ZU1hcmtlcihtYXJrZXJQb3NpdGlvbjogbnVtYmVyLCBtYXJrZXJEdXJhdGlvbjogbnVtYmVyKTogYm9vbGVhbiB7XG4gIHJldHVybiAobWFya2VyRHVyYXRpb24gPCAwIHx8IGlzTmFOKG1hcmtlckR1cmF0aW9uKSkgJiYgbWFya2VyUG9zaXRpb24gPCAwO1xufVxuXG5mdW5jdGlvbiBzaG91bGRQcm9jZXNzTWFya2VycyhwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IGJvb2xlYW4ge1xuICAvLyBEb24ndCBnZW5lcmF0ZSB0aW1lbGluZSBtYXJrZXJzIGlmIHdlIGRvbid0IHlldCBoYXZlIGEgZHVyYXRpb25cbiAgLy8gVGhlIGR1cmF0aW9uIGNoZWNrIGlzIGZvciBidWdneSBwbGF0Zm9ybXMgd2hlcmUgdGhlIGR1cmF0aW9uIGlzIG5vdCBhdmFpbGFibGUgaW5zdGFudGx5IChDaHJvbWUgb24gQW5kcm9pZCA0LjMpXG4gIGNvbnN0IHZhbGlkVG9Qcm9jZXNzID0gcGxheWVyLmdldER1cmF0aW9uKCkgIT09IEluZmluaXR5IHx8IHBsYXllci5pc0xpdmUoKTtcbiAgY29uc3QgaGFzTWFya2VycyA9IHVpbWFuYWdlci5nZXRDb25maWcoKS5tZXRhZGF0YS5tYXJrZXJzLmxlbmd0aCA+IDA7XG5cbiAgcmV0dXJuIHZhbGlkVG9Qcm9jZXNzICYmIGhhc01hcmtlcnM7XG59XG4iLCJpbXBvcnQge0NvbnRhaW5lciwgQ29udGFpbmVyQ29uZmlnfSBmcm9tICcuL2NvbnRhaW5lcic7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHtNZXRhZGF0YUxhYmVsLCBNZXRhZGF0YUxhYmVsQ29udGVudH0gZnJvbSAnLi9tZXRhZGF0YWxhYmVsJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIGEge0BsaW5rIFRpdGxlQmFyfS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUaXRsZUJhckNvbmZpZyBleHRlbmRzIENvbnRhaW5lckNvbmZpZyB7XG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgaWYgdGhlIHRpdGxlIGJhciBzaG91bGQgc3RheSBoaWRkZW4gd2hlbiBubyBtZXRhZGF0YSBsYWJlbCBjb250YWlucyBhbnkgdGV4dC4gRG9lcyBub3QgbWFrZSBhIGxvdFxuICAgKiBvZiBzZW5zZSBpZiB0aGUgdGl0bGUgYmFyIGNvbnRhaW5zIG90aGVyIGNvbXBvbmVudHMgdGhhbiBqdXN0IE1ldGFkYXRhTGFiZWxzIChsaWtlIGluIHRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24pLlxuICAgKiBEZWZhdWx0OiBmYWxzZVxuICAgKi9cbiAga2VlcEhpZGRlbldpdGhvdXRNZXRhZGF0YT86IGJvb2xlYW47XG59XG5cbi8qKlxuICogRGlzcGxheXMgYSB0aXRsZSBiYXIgY29udGFpbmluZyBhIGxhYmVsIHdpdGggdGhlIHRpdGxlIG9mIHRoZSB2aWRlby5cbiAqL1xuZXhwb3J0IGNsYXNzIFRpdGxlQmFyIGV4dGVuZHMgQ29udGFpbmVyPFRpdGxlQmFyQ29uZmlnPiB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBUaXRsZUJhckNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktdGl0bGViYXInLFxuICAgICAgaGlkZGVuOiB0cnVlLFxuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBuZXcgTWV0YWRhdGFMYWJlbCh7IGNvbnRlbnQ6IE1ldGFkYXRhTGFiZWxDb250ZW50LlRpdGxlIH0pLFxuICAgICAgICBuZXcgTWV0YWRhdGFMYWJlbCh7IGNvbnRlbnQ6IE1ldGFkYXRhTGFiZWxDb250ZW50LkRlc2NyaXB0aW9uIH0pLFxuICAgICAgXSxcbiAgICAgIGtlZXBIaWRkZW5XaXRob3V0TWV0YWRhdGE6IGZhbHNlLFxuICAgIH0sIDxUaXRsZUJhckNvbmZpZz50aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbGV0IGNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG4gICAgbGV0IHNob3VsZEJlU2hvd24gPSAhdGhpcy5pc0hpZGRlbigpO1xuICAgIGxldCBoYXNNZXRhZGF0YVRleHQgPSB0cnVlOyAvLyBGbGFnIHRvIHRyYWNrIGlmIGFueSBtZXRhZGF0YSBsYWJlbCBjb250YWlucyB0ZXh0XG5cbiAgICBsZXQgY2hlY2tNZXRhZGF0YVRleHRBbmRVcGRhdGVWaXNpYmlsaXR5ID0gKCkgPT4ge1xuICAgICAgaGFzTWV0YWRhdGFUZXh0ID0gZmFsc2U7XG5cbiAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBtZXRhZGF0YSBsYWJlbHMgYW5kIGNoZWNrIGlmIGF0IGxlYXN0IG9uZSBvZiB0aGVtIGNvbnRhaW5zIHRleHRcbiAgICAgIGZvciAobGV0IGNvbXBvbmVudCBvZiB0aGlzLmdldENvbXBvbmVudHMoKSkge1xuICAgICAgICBpZiAoY29tcG9uZW50IGluc3RhbmNlb2YgTWV0YWRhdGFMYWJlbCkge1xuICAgICAgICAgIGlmICghY29tcG9uZW50LmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgaGFzTWV0YWRhdGFUZXh0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc1Nob3duKCkpIHtcbiAgICAgICAgLy8gSGlkZSBhIHZpc2libGUgdGl0bGViYXIgaWYgaXQgZG9lcyBub3QgY29udGFpbiBhbnkgdGV4dCBhbmQgdGhlIGhpZGRlbiBmbGFnIGlzIHNldFxuICAgICAgICBpZiAoY29uZmlnLmtlZXBIaWRkZW5XaXRob3V0TWV0YWRhdGEgJiYgIWhhc01ldGFkYXRhVGV4dCkge1xuICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHNob3VsZEJlU2hvd24pIHtcbiAgICAgICAgLy8gU2hvdyBhIGhpZGRlbiB0aXRsZWJhciBpZiBpdCBzaG91bGQgYWN0dWFsbHkgYmUgc2hvd25cbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIExpc3RlbiB0byB0ZXh0IGNoYW5nZSBldmVudHMgdG8gdXBkYXRlIHRoZSBoYXNNZXRhZGF0YVRleHQgZmxhZyB3aGVuIHRoZSBtZXRhZGF0YSBkeW5hbWljYWxseSBjaGFuZ2VzXG4gICAgZm9yIChsZXQgY29tcG9uZW50IG9mIHRoaXMuZ2V0Q29tcG9uZW50cygpKSB7XG4gICAgICBpZiAoY29tcG9uZW50IGluc3RhbmNlb2YgTWV0YWRhdGFMYWJlbCkge1xuICAgICAgICBjb21wb25lbnQub25UZXh0Q2hhbmdlZC5zdWJzY3JpYmUoY2hlY2tNZXRhZGF0YVRleHRBbmRVcGRhdGVWaXNpYmlsaXR5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1aW1hbmFnZXIub25Db250cm9sc1Nob3cuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHNob3VsZEJlU2hvd24gPSB0cnVlO1xuICAgICAgaWYgKCEoY29uZmlnLmtlZXBIaWRkZW5XaXRob3V0TWV0YWRhdGEgJiYgIWhhc01ldGFkYXRhVGV4dCkpIHtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdWltYW5hZ2VyLm9uQ29udHJvbHNIaWRlLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBzaG91bGRCZVNob3duID0gZmFsc2U7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9KTtcblxuICAgIC8vIGluaXRcbiAgICBjaGVja01ldGFkYXRhVGV4dEFuZFVwZGF0ZVZpc2liaWxpdHkoKTtcbiAgfVxufSIsImltcG9ydCB7QnV0dG9uLCBCdXR0b25Db25maWd9IGZyb20gJy4vYnV0dG9uJztcbmltcG9ydCB7Tm9BcmdzLCBFdmVudERpc3BhdGNoZXIsIEV2ZW50fSBmcm9tICcuLi9ldmVudGRpc3BhdGNoZXInO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IExvY2FsaXphYmxlVGV4dCB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgYSB0b2dnbGUgYnV0dG9uIGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUb2dnbGVCdXR0b25Db25maWcgZXh0ZW5kcyBCdXR0b25Db25maWcge1xuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyB0aGF0IG1hcmtzIHRoZSBvbi1zdGF0ZSBvZiB0aGUgYnV0dG9uLlxuICAgKi9cbiAgb25DbGFzcz86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3MgdGhhdCBtYXJrcyB0aGUgb2ZmLXN0YXRlIG9mIHRoZSBidXR0b24uXG4gICAqL1xuICBvZmZDbGFzcz86IHN0cmluZztcbiAgLyoqXG4gICAqIFdDQUcyMCBzdGFuZGFyZCBmb3IgZGVmaW5pbmcgaW5mbyBhYm91dCB0aGUgY29tcG9uZW50ICh1c3VhbGx5IHRoZSBuYW1lKVxuICAgKlxuICAgKiBJdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgYG9uQXJpYUxhYmVsYCBhbmQgYG9mZkFyaWFMYWJlbGAgZm9yIHRvZ2dsZSBidXR0b25zXG4gICAqIGFzIHRoZSBjb21wb25lbnQgY2FuIHRoZW4gdXBkYXRlIHRoZW0gYXMgdGhlIGJ1dHRvbiBpcyB1c2VkLlxuICAgKlxuICAgKiBJZiBib3RoIGBhcmlhTGFiZWxgIGFuZCBgb25BcmlhTGFiZWxgIGFyZSBzZXQsIGBvbkFyaWFMYWJlbGAgaXMgdXNlZC5cbiAgICovXG4gIGFyaWFMYWJlbD86IExvY2FsaXphYmxlVGV4dDtcbiAgLyoqXG4gICAqIFRoZSBhcmlhIGxhYmVsIHRoYXQgbWFya3MgdGhlIG9uLXN0YXRlIG9mIHRoZSBidXR0b24uXG4gICAqL1xuICBvbkFyaWFMYWJlbD86IExvY2FsaXphYmxlVGV4dDtcbiAgLyoqXG4gICAqIFRoZSBhcmlhIGxhYmVsIHRoYXQgbWFya3MgdGhlIG9mZi1zdGF0ZSBvZiB0aGUgYnV0dG9uLlxuICAgKi9cbiAgb2ZmQXJpYUxhYmVsPzogTG9jYWxpemFibGVUZXh0O1xuICAvKipcbiAgICogVGhlIHRleHQgYXMgc3RyaW5nIG9yIGFzIGxvY2FsaXplIGNhbGxiYWNrIG9uIHRoZSBidXR0b24uXG4gICAqL1xuICB0ZXh0PzogTG9jYWxpemFibGVUZXh0O1xufVxuXG4vKipcbiAqIEEgYnV0dG9uIHRoYXQgY2FuIGJlIHRvZ2dsZWQgYmV0d2VlbiAnb24nIGFuZCAnb2ZmJyBzdGF0ZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUb2dnbGVCdXR0b248Q29uZmlnIGV4dGVuZHMgVG9nZ2xlQnV0dG9uQ29uZmlnPiBleHRlbmRzIEJ1dHRvbjxDb25maWc+IHtcblxuICBwcml2YXRlIG9uU3RhdGU6IGJvb2xlYW47XG5cbiAgcHJpdmF0ZSB0b2dnbGVCdXR0b25FdmVudHMgPSB7XG4gICAgb25Ub2dnbGU6IG5ldyBFdmVudERpc3BhdGNoZXI8VG9nZ2xlQnV0dG9uPENvbmZpZz4sIE5vQXJncz4oKSxcbiAgICBvblRvZ2dsZU9uOiBuZXcgRXZlbnREaXNwYXRjaGVyPFRvZ2dsZUJ1dHRvbjxDb25maWc+LCBOb0FyZ3M+KCksXG4gICAgb25Ub2dnbGVPZmY6IG5ldyBFdmVudERpc3BhdGNoZXI8VG9nZ2xlQnV0dG9uPENvbmZpZz4sIE5vQXJncz4oKSxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICBjb25zdCBkZWZhdWx0Q29uZmlnOiBUb2dnbGVCdXR0b25Db25maWcgPSB7XG4gICAgICBjc3NDbGFzczogJ3VpLXRvZ2dsZWJ1dHRvbicsXG4gICAgICBvbkNsYXNzOiAnb24nLFxuICAgICAgb2ZmQ2xhc3M6ICdvZmYnLFxuICAgIH07XG5cbiAgICBpZiAoY29uZmlnLm9uQXJpYUxhYmVsKSB7XG4gICAgICBjb25maWcuYXJpYUxhYmVsID0gY29uZmlnLm9uQXJpYUxhYmVsO1xuICAgIH1cblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIGRlZmF1bHRDb25maWcgYXMgQ29uZmlnLCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG4gICAgdGhpcy5nZXREb21FbGVtZW50KCkuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoY29uZmlnLm9mZkNsYXNzKSk7XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgYnV0dG9uIHRvIHRoZSAnb24nIHN0YXRlLlxuICAgKi9cbiAgb24oKSB7XG4gICAgaWYgKHRoaXMuaXNPZmYoKSkge1xuICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5nZXRDb25maWcoKTtcblxuICAgICAgdGhpcy5vblN0YXRlID0gdHJ1ZTtcbiAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4Q3NzKGNvbmZpZy5vZmZDbGFzcykpO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoY29uZmlnLm9uQ2xhc3MpKTtcblxuICAgICAgdGhpcy5vblRvZ2dsZUV2ZW50KCk7XG4gICAgICB0aGlzLm9uVG9nZ2xlT25FdmVudCgpO1xuXG4gICAgICB0aGlzLnNldEFyaWFBdHRyKCdwcmVzc2VkJywgJ3RydWUnKTtcblxuICAgICAgaWYgKHRoaXMuY29uZmlnLm9uQXJpYUxhYmVsKSB7XG4gICAgICAgIHRoaXMuc2V0QXJpYUxhYmVsKHRoaXMuY29uZmlnLm9uQXJpYUxhYmVsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgYnV0dG9uIHRvIHRoZSAnb2ZmJyBzdGF0ZS5cbiAgICovXG4gIG9mZigpIHtcbiAgICBpZiAodGhpcy5pc09uKCkpIHtcbiAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG5cbiAgICAgIHRoaXMub25TdGF0ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoY29uZmlnLm9uQ2xhc3MpKTtcbiAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKGNvbmZpZy5vZmZDbGFzcykpO1xuXG4gICAgICB0aGlzLm9uVG9nZ2xlRXZlbnQoKTtcbiAgICAgIHRoaXMub25Ub2dnbGVPZmZFdmVudCgpO1xuXG4gICAgICB0aGlzLnNldEFyaWFBdHRyKCdwcmVzc2VkJywgJ2ZhbHNlJyk7XG5cbiAgICAgIGlmICh0aGlzLmNvbmZpZy5vZmZBcmlhTGFiZWwpIHtcbiAgICAgICAgdGhpcy5zZXRBcmlhTGFiZWwodGhpcy5jb25maWcub2ZmQXJpYUxhYmVsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlIHRoZSBidXR0b24gJ29uJyBpZiBpdCBpcyAnb2ZmJywgb3IgJ29mZicgaWYgaXQgaXMgJ29uJy5cbiAgICovXG4gIHRvZ2dsZSgpIHtcbiAgICBpZiAodGhpcy5pc09uKCkpIHtcbiAgICAgIHRoaXMub2ZmKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub24oKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSB0b2dnbGUgYnV0dG9uIGlzIGluIHRoZSAnb24nIHN0YXRlLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBidXR0b24gaXMgJ29uJywgZmFsc2UgaWYgJ29mZidcbiAgICovXG4gIGlzT24oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMub25TdGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIHRvZ2dsZSBidXR0b24gaXMgaW4gdGhlICdvZmYnIHN0YXRlLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBidXR0b24gaXMgJ29mZicsIGZhbHNlIGlmICdvbidcbiAgICovXG4gIGlzT2ZmKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5pc09uKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25DbGlja0V2ZW50KCkge1xuICAgIHN1cGVyLm9uQ2xpY2tFdmVudCgpO1xuXG4gICAgLy8gRmlyZSB0aGUgdG9nZ2xlIGV2ZW50IHRvZ2V0aGVyIHdpdGggdGhlIGNsaWNrIGV2ZW50XG4gICAgLy8gKHRoZXkgYXJlIHRlY2huaWNhbGx5IHRoZSBzYW1lLCBvbmx5IHRoZSBzZW1hbnRpY3MgYXJlIGRpZmZlcmVudClcbiAgICB0aGlzLm9uVG9nZ2xlRXZlbnQoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvblRvZ2dsZUV2ZW50KCkge1xuICAgIHRoaXMudG9nZ2xlQnV0dG9uRXZlbnRzLm9uVG9nZ2xlLmRpc3BhdGNoKHRoaXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uVG9nZ2xlT25FdmVudCgpIHtcbiAgICB0aGlzLnRvZ2dsZUJ1dHRvbkV2ZW50cy5vblRvZ2dsZU9uLmRpc3BhdGNoKHRoaXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uVG9nZ2xlT2ZmRXZlbnQoKSB7XG4gICAgdGhpcy50b2dnbGVCdXR0b25FdmVudHMub25Ub2dnbGVPZmYuZGlzcGF0Y2godGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgZXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIHRoZSBidXR0b24gaXMgdG9nZ2xlZC5cbiAgICogQHJldHVybnMge0V2ZW50PFRvZ2dsZUJ1dHRvbjxDb25maWc+LCBOb0FyZ3M+fVxuICAgKi9cbiAgZ2V0IG9uVG9nZ2xlKCk6IEV2ZW50PFRvZ2dsZUJ1dHRvbjxDb25maWc+LCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy50b2dnbGVCdXR0b25FdmVudHMub25Ub2dnbGUuZ2V0RXZlbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIGJ1dHRvbiBpcyB0b2dnbGVkICdvbicuXG4gICAqIEByZXR1cm5zIHtFdmVudDxUb2dnbGVCdXR0b248Q29uZmlnPiwgTm9BcmdzPn1cbiAgICovXG4gIGdldCBvblRvZ2dsZU9uKCk6IEV2ZW50PFRvZ2dsZUJ1dHRvbjxDb25maWc+LCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy50b2dnbGVCdXR0b25FdmVudHMub25Ub2dnbGVPbi5nZXRFdmVudCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgYnV0dG9uIGlzIHRvZ2dsZWQgJ29mZicuXG4gICAqIEByZXR1cm5zIHtFdmVudDxUb2dnbGVCdXR0b248Q29uZmlnPiwgTm9BcmdzPn1cbiAgICovXG4gIGdldCBvblRvZ2dsZU9mZigpOiBFdmVudDxUb2dnbGVCdXR0b248Q29uZmlnPiwgTm9BcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMudG9nZ2xlQnV0dG9uRXZlbnRzLm9uVG9nZ2xlT2ZmLmdldEV2ZW50KCk7XG4gIH1cbn0iLCJpbXBvcnQge0NvbXBvbmVudCwgQ29tcG9uZW50Q29uZmlnfSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQge0RPTX0gZnJvbSAnLi4vZG9tJztcblxuLyoqXG4gKiBBbmltYXRlZCBhbmFsb2cgVFYgc3RhdGljIG5vaXNlLlxuICovXG5leHBvcnQgY2xhc3MgVHZOb2lzZUNhbnZhcyBleHRlbmRzIENvbXBvbmVudDxDb21wb25lbnRDb25maWc+IHtcblxuICBwcml2YXRlIGNhbnZhczogRE9NO1xuXG4gIHByaXZhdGUgY2FudmFzRWxlbWVudDogSFRNTENhbnZhc0VsZW1lbnQ7XG4gIHByaXZhdGUgY2FudmFzQ29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xuICBwcml2YXRlIGNhbnZhc1dpZHRoID0gMTYwO1xuICBwcml2YXRlIGNhbnZhc0hlaWdodCA9IDkwO1xuICBwcml2YXRlIGludGVyZmVyZW5jZUhlaWdodCA9IDUwO1xuICBwcml2YXRlIGxhc3RGcmFtZVVwZGF0ZTogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBmcmFtZUludGVydmFsOiBudW1iZXIgPSA2MDtcbiAgcHJpdmF0ZSB1c2VBbmltYXRpb25GcmFtZTogYm9vbGVhbiA9ICEhd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgcHJpdmF0ZSBub2lzZUFuaW1hdGlvbldpbmRvd1BvczogbnVtYmVyO1xuICBwcml2YXRlIGZyYW1lVXBkYXRlSGFuZGxlcklkOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBDb21wb25lbnRDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXR2bm9pc2VjYW52YXMnLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0b0RvbUVsZW1lbnQoKTogRE9NIHtcbiAgICByZXR1cm4gdGhpcy5jYW52YXMgPSBuZXcgRE9NKCdjYW52YXMnLCB7ICdjbGFzcyc6IHRoaXMuZ2V0Q3NzQ2xhc3NlcygpIH0pO1xuICB9XG5cbiAgc3RhcnQoKTogdm9pZCB7XG4gICAgdGhpcy5jYW52YXNFbGVtZW50ID0gPEhUTUxDYW52YXNFbGVtZW50PnRoaXMuY2FudmFzLmdldCgwKTtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQgPSB0aGlzLmNhbnZhc0VsZW1lbnQuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB0aGlzLm5vaXNlQW5pbWF0aW9uV2luZG93UG9zID0gLXRoaXMuY2FudmFzSGVpZ2h0O1xuICAgIHRoaXMubGFzdEZyYW1lVXBkYXRlID0gMDtcblxuICAgIHRoaXMuY2FudmFzRWxlbWVudC53aWR0aCA9IHRoaXMuY2FudmFzV2lkdGg7XG4gICAgdGhpcy5jYW52YXNFbGVtZW50LmhlaWdodCA9IHRoaXMuY2FudmFzSGVpZ2h0O1xuXG4gICAgdGhpcy5yZW5kZXJGcmFtZSgpO1xuICB9XG5cbiAgc3RvcCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy51c2VBbmltYXRpb25GcmFtZSkge1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5mcmFtZVVwZGF0ZUhhbmRsZXJJZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmZyYW1lVXBkYXRlSGFuZGxlcklkKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlbmRlckZyYW1lKCk6IHZvaWQge1xuICAgIC8vIFRoaXMgY29kZSBoYXMgYmVlbiBjb3BpZWQgZnJvbSB0aGUgcGxheWVyIGNvbnRyb2xzLmpzIGFuZCBzaW1wbGlmaWVkXG5cbiAgICBpZiAodGhpcy5sYXN0RnJhbWVVcGRhdGUgKyB0aGlzLmZyYW1lSW50ZXJ2YWwgPiBuZXcgRGF0ZSgpLmdldFRpbWUoKSkge1xuICAgICAgLy8gSXQncyB0b28gZWFybHkgdG8gcmVuZGVyIHRoZSBuZXh0IGZyYW1lXG4gICAgICB0aGlzLnNjaGVkdWxlTmV4dFJlbmRlcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBjdXJyZW50UGl4ZWxPZmZzZXQ7XG4gICAgbGV0IGNhbnZhc1dpZHRoID0gdGhpcy5jYW52YXNXaWR0aDtcbiAgICBsZXQgY2FudmFzSGVpZ2h0ID0gdGhpcy5jYW52YXNIZWlnaHQ7XG5cbiAgICAvLyBDcmVhdGUgdGV4dHVyZVxuICAgIGxldCBub2lzZUltYWdlID0gdGhpcy5jYW52YXNDb250ZXh0LmNyZWF0ZUltYWdlRGF0YShjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0KTtcblxuICAgIC8vIEZpbGwgdGV4dHVyZSB3aXRoIG5vaXNlXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBjYW52YXNIZWlnaHQ7IHkrKykge1xuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBjYW52YXNXaWR0aDsgeCsrKSB7XG4gICAgICAgIGN1cnJlbnRQaXhlbE9mZnNldCA9IChjYW52YXNXaWR0aCAqIHkgKiA0KSArIHggKiA0O1xuICAgICAgICBub2lzZUltYWdlLmRhdGFbY3VycmVudFBpeGVsT2Zmc2V0XSA9IE1hdGgucmFuZG9tKCkgKiAyNTU7XG4gICAgICAgIGlmICh5IDwgdGhpcy5ub2lzZUFuaW1hdGlvbldpbmRvd1BvcyB8fCB5ID4gdGhpcy5ub2lzZUFuaW1hdGlvbldpbmRvd1BvcyArIHRoaXMuaW50ZXJmZXJlbmNlSGVpZ2h0KSB7XG4gICAgICAgICAgbm9pc2VJbWFnZS5kYXRhW2N1cnJlbnRQaXhlbE9mZnNldF0gKj0gMC44NTtcbiAgICAgICAgfVxuICAgICAgICBub2lzZUltYWdlLmRhdGFbY3VycmVudFBpeGVsT2Zmc2V0ICsgMV0gPSBub2lzZUltYWdlLmRhdGFbY3VycmVudFBpeGVsT2Zmc2V0XTtcbiAgICAgICAgbm9pc2VJbWFnZS5kYXRhW2N1cnJlbnRQaXhlbE9mZnNldCArIDJdID0gbm9pc2VJbWFnZS5kYXRhW2N1cnJlbnRQaXhlbE9mZnNldF07XG4gICAgICAgIG5vaXNlSW1hZ2UuZGF0YVtjdXJyZW50UGl4ZWxPZmZzZXQgKyAzXSA9IDUwO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFB1dCB0ZXh0dXJlIG9udG8gY2FudmFzXG4gICAgdGhpcy5jYW52YXNDb250ZXh0LnB1dEltYWdlRGF0YShub2lzZUltYWdlLCAwLCAwKTtcblxuICAgIHRoaXMubGFzdEZyYW1lVXBkYXRlID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgdGhpcy5ub2lzZUFuaW1hdGlvbldpbmRvd1BvcyArPSA3O1xuICAgIGlmICh0aGlzLm5vaXNlQW5pbWF0aW9uV2luZG93UG9zID4gY2FudmFzSGVpZ2h0KSB7XG4gICAgICB0aGlzLm5vaXNlQW5pbWF0aW9uV2luZG93UG9zID0gLWNhbnZhc0hlaWdodDtcbiAgICB9XG5cbiAgICB0aGlzLnNjaGVkdWxlTmV4dFJlbmRlcigpO1xuICB9XG5cbiAgcHJpdmF0ZSBzY2hlZHVsZU5leHRSZW5kZXIoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudXNlQW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgIHRoaXMuZnJhbWVVcGRhdGVIYW5kbGVySWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMucmVuZGVyRnJhbWUuYmluZCh0aGlzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZnJhbWVVcGRhdGVIYW5kbGVySWQgPSB3aW5kb3cuc2V0VGltZW91dCh0aGlzLnJlbmRlckZyYW1lLmJpbmQodGhpcyksIHRoaXMuZnJhbWVJbnRlcnZhbCk7XG4gICAgfVxuICB9XG59IiwiaW1wb3J0IHtDb250YWluZXJDb25maWcsIENvbnRhaW5lcn0gZnJvbSAnLi9jb250YWluZXInO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7RE9NfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHtUaW1lb3V0fSBmcm9tICcuLi90aW1lb3V0JztcbmltcG9ydCB7UGxheWVyVXRpbHN9IGZyb20gJy4uL3BsYXllcnV0aWxzJztcbmltcG9ydCB7IENhbmNlbEV2ZW50QXJncywgRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnLi4vZXZlbnRkaXNwYXRjaGVyJztcbmltcG9ydCB7IFBsYXllckFQSSwgUGxheWVyUmVzaXplZEV2ZW50IH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIGEge0BsaW5rIFVJQ29udGFpbmVyfS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVSUNvbnRhaW5lckNvbmZpZyBleHRlbmRzIENvbnRhaW5lckNvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgZGVsYXkgaW4gbWlsbGlzZWNvbmRzIGFmdGVyIHdoaWNoIHRoZSBjb250cm9sIGJhciB3aWxsIGJlIGhpZGRlbiB3aGVuIHRoZXJlIGlzIG5vIHVzZXIgaW50ZXJhY3Rpb24uXG4gICAqIFNldCB0byAtMSBmb3IgdGhlIFVJIHRvIGJlIGFsd2F5cyBzaG93bi5cbiAgICogRGVmYXVsdDogNSBzZWNvbmRzICg1MDAwKVxuICAgKi9cbiAgaGlkZURlbGF5PzogbnVtYmVyO1xuICAvKipcbiAgICogQW4gYXJyYXkgb2YgcGxheWVyIHN0YXRlcyBpbiB3aGljaCB0aGUgVUkgd2lsbCBub3QgYmUgaGlkZGVuLCBubyBtYXR0ZXIgd2hhdCB0aGUge0BsaW5rIGhpZGVEZWxheX0gaXMuXG4gICAqL1xuICBoaWRlUGxheWVyU3RhdGVFeGNlcHRpb25zPzogUGxheWVyVXRpbHMuUGxheWVyU3RhdGVbXTtcbiAgLyoqXG4gICAqIFRoZSBIVE1MIGVsZW1lbnQgb24gd2hpY2ggdXNlciBpbnRlcmFjdGlvbiBldmVudHMgKGUuZy4gbW91c2UgYW5kIHRvdWNoIGV2ZW50cykgd2lsbCBiZSB0cmFja2VkIHRvIGRldGVjdFxuICAgKiBpbnRlcmFjdGlvbiB3aXRoIHRoZSBVSS4gVGhlc2UgYmFzaWNhbGx5IHRyaWdnZXIgc2hvd2luZyBhbmQgaGlkaW5nIG9mIHRoZSBVSS5cbiAgICogRGVmYXVsdDogdGhlIFVJIGNvbnRhaW5lciBpdHNlbGZcbiAgICovXG4gIHVzZXJJbnRlcmFjdGlvbkV2ZW50U291cmNlPzogSFRNTEVsZW1lbnQ7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgY29udGFpbmVyIHRoYXQgY29udGFpbnMgYWxsIG9mIHRoZSBVSS4gVGhlIFVJQ29udGFpbmVyIGlzIHBhc3NlZCB0byB0aGUge0BsaW5rIFVJTWFuYWdlcn0gdG8gYnVpbGQgYW5kXG4gKiBzZXR1cCB0aGUgVUkuXG4gKi9cbmV4cG9ydCBjbGFzcyBVSUNvbnRhaW5lciBleHRlbmRzIENvbnRhaW5lcjxVSUNvbnRhaW5lckNvbmZpZz4ge1xuXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFNUQVRFX1BSRUZJWCA9ICdwbGF5ZXItc3RhdGUtJztcblxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBGVUxMU0NSRUVOID0gJ2Z1bGxzY3JlZW4nO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBCVUZGRVJJTkcgPSAnYnVmZmVyaW5nJztcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgUkVNT1RFX0NPTlRST0wgPSAncmVtb3RlLWNvbnRyb2wnO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDT05UUk9MU19TSE9XTiA9ICdjb250cm9scy1zaG93bic7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENPTlRST0xTX0hJRERFTiA9ICdjb250cm9scy1oaWRkZW4nO1xuXG4gIHByaXZhdGUgdWlIaWRlVGltZW91dDogVGltZW91dDtcbiAgcHJpdmF0ZSBwbGF5ZXJTdGF0ZUNoYW5nZTogRXZlbnREaXNwYXRjaGVyPFVJQ29udGFpbmVyLCBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZT47XG5cbiAgcHJpdmF0ZSB1c2VySW50ZXJhY3Rpb25FdmVudFNvdXJjZTogRE9NO1xuICBwcml2YXRlIHVzZXJJbnRlcmFjdGlvbkV2ZW50czogeyBuYW1lOiBzdHJpbmcsIGhhbmRsZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3QgfVtdO1xuXG4gIHB1YmxpYyBoaWRlVWk6ICgpID0+IHZvaWQgPSAoKSA9PiB7fTtcbiAgcHVibGljIHNob3dVaTogKCkgPT4gdm9pZCA9ICgpID0+IHt9O1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogVUlDb250YWluZXJDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywgPFVJQ29udGFpbmVyQ29uZmlnPntcbiAgICAgIGNzc0NsYXNzOiAndWktdWljb250YWluZXInLFxuICAgICAgcm9sZTogJ3JlZ2lvbicsXG4gICAgICBhcmlhTGFiZWw6IGkxOG4uZ2V0TG9jYWxpemVyKCdwbGF5ZXInKSxcbiAgICAgIGhpZGVEZWxheTogNTAwMCxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG5cbiAgICB0aGlzLnBsYXllclN0YXRlQ2hhbmdlID0gbmV3IEV2ZW50RGlzcGF0Y2hlcjxVSUNvbnRhaW5lciwgUGxheWVyVXRpbHMuUGxheWVyU3RhdGU+KCk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuXG4gICAgaWYgKGNvbmZpZy51c2VySW50ZXJhY3Rpb25FdmVudFNvdXJjZSkge1xuICAgICAgdGhpcy51c2VySW50ZXJhY3Rpb25FdmVudFNvdXJjZSA9IG5ldyBET00oY29uZmlnLnVzZXJJbnRlcmFjdGlvbkV2ZW50U291cmNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51c2VySW50ZXJhY3Rpb25FdmVudFNvdXJjZSA9IHRoaXMuZ2V0RG9tRWxlbWVudCgpO1xuICAgIH1cblxuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICB0aGlzLmNvbmZpZ3VyZVVJU2hvd0hpZGUocGxheWVyLCB1aW1hbmFnZXIpO1xuICAgIHRoaXMuY29uZmlndXJlUGxheWVyU3RhdGVzKHBsYXllciwgdWltYW5hZ2VyKTtcbiAgfVxuXG4gIHByaXZhdGUgY29uZmlndXJlVUlTaG93SGlkZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIGxldCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuXG4gICAgaWYgKGNvbmZpZy5oaWRlRGVsYXkgPT09IC0xKSB7XG4gICAgICB1aW1hbmFnZXIub25Db25maWd1cmVkLnN1YnNjcmliZSgoKSA9PiB1aW1hbmFnZXIub25Db250cm9sc1Nob3cuZGlzcGF0Y2godGhpcykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBpc1VpU2hvd24gPSBmYWxzZTtcbiAgICBsZXQgaXNTZWVraW5nID0gZmFsc2U7XG4gICAgbGV0IGlzRmlyc3RUb3VjaCA9IHRydWU7XG4gICAgbGV0IHBsYXllclN0YXRlOiBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZTtcblxuICAgIGNvbnN0IGhpZGluZ1ByZXZlbnRlZCA9ICgpOiBib29sZWFuID0+IHtcbiAgICAgIHJldHVybiBjb25maWcuaGlkZVBsYXllclN0YXRlRXhjZXB0aW9ucyAmJiBjb25maWcuaGlkZVBsYXllclN0YXRlRXhjZXB0aW9ucy5pbmRleE9mKHBsYXllclN0YXRlKSA+IC0xO1xuICAgIH07XG5cbiAgICB0aGlzLnNob3dVaSA9ICgpID0+IHtcbiAgICAgIGlmICghaXNVaVNob3duKSB7XG4gICAgICAgIC8vIExldCBzdWJzY3JpYmVycyBrbm93IHRoYXQgdGhleSBzaG91bGQgcmV2ZWFsIHRoZW1zZWx2ZXNcbiAgICAgICAgdWltYW5hZ2VyLm9uQ29udHJvbHNTaG93LmRpc3BhdGNoKHRoaXMpO1xuICAgICAgICBpc1VpU2hvd24gPSB0cnVlO1xuICAgICAgfVxuICAgICAgLy8gRG9uJ3QgdHJpZ2dlciB0aW1lb3V0IHdoaWxlIHNlZWtpbmcgKGl0IHdpbGwgYmUgdHJpZ2dlcmVkIG9uY2UgdGhlIHNlZWsgaXMgZmluaXNoZWQpIG9yIGNhc3RpbmdcbiAgICAgIGlmICghaXNTZWVraW5nICYmICFwbGF5ZXIuaXNDYXN0aW5nKCkgJiYgIWhpZGluZ1ByZXZlbnRlZCgpKSB7XG4gICAgICAgIHRoaXMudWlIaWRlVGltZW91dC5zdGFydCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLmhpZGVVaSA9ICgpID0+IHtcbiAgICAgIC8vIEhpZGUgdGhlIFVJIG9ubHkgaWYgaXQgaXMgc2hvd24sIGFuZCBpZiBub3QgY2FzdGluZ1xuICAgICAgaWYgKGlzVWlTaG93biAmJiAhcGxheWVyLmlzQ2FzdGluZygpKSB7XG4gICAgICAgIC8vIElzc3VlIGEgcHJldmlldyBldmVudCB0byBjaGVjayBpZiB3ZSBhcmUgZ29vZCB0byBoaWRlIHRoZSBjb250cm9sc1xuICAgICAgICBsZXQgcHJldmlld0hpZGVFdmVudEFyZ3MgPSA8Q2FuY2VsRXZlbnRBcmdzPnt9O1xuICAgICAgICB1aW1hbmFnZXIub25QcmV2aWV3Q29udHJvbHNIaWRlLmRpc3BhdGNoKHRoaXMsIHByZXZpZXdIaWRlRXZlbnRBcmdzKTtcblxuICAgICAgICBpZiAoIXByZXZpZXdIaWRlRXZlbnRBcmdzLmNhbmNlbCkge1xuICAgICAgICAgIC8vIElmIHRoZSBwcmV2aWV3IHdhc24ndCBjYW5jZWxlZCwgbGV0IHN1YnNjcmliZXJzIGtub3cgdGhhdCB0aGV5IHNob3VsZCBub3cgaGlkZSB0aGVtc2VsdmVzXG4gICAgICAgICAgdWltYW5hZ2VyLm9uQ29udHJvbHNIaWRlLmRpc3BhdGNoKHRoaXMpO1xuICAgICAgICAgIGlzVWlTaG93biA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIHRoZSBoaWRlIHByZXZpZXcgd2FzIGNhbmNlbGVkLCBjb250aW51ZSB0byBzaG93IFVJXG4gICAgICAgICAgdGhpcy5zaG93VWkoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBUaW1lb3V0IHRvIGRlZmVyIFVJIGhpZGluZyBieSB0aGUgY29uZmlndXJlZCBkZWxheSB0aW1lXG4gICAgdGhpcy51aUhpZGVUaW1lb3V0ID0gbmV3IFRpbWVvdXQoY29uZmlnLmhpZGVEZWxheSwgdGhpcy5oaWRlVWkpO1xuXG4gICAgdGhpcy51c2VySW50ZXJhY3Rpb25FdmVudHMgPSBbe1xuICAgICAgLy8gT24gdG91Y2ggZGlzcGxheXMsIHRoZSBmaXJzdCB0b3VjaCByZXZlYWxzIHRoZSBVSVxuICAgICAgbmFtZTogJ3RvdWNoZW5kJyxcbiAgICAgIGhhbmRsZXI6IChlKSA9PiB7XG4gICAgICAgIGlmICghaXNVaVNob3duKSB7XG4gICAgICAgICAgLy8gT25seSBpZiB0aGUgVUkgaXMgaGlkZGVuLCB3ZSBwcmV2ZW50IG90aGVyIGFjdGlvbnMgKGV4Y2VwdCBmb3IgdGhlIGZpcnN0IHRvdWNoKSBhbmQgcmV2ZWFsIHRoZSBVSVxuICAgICAgICAgIC8vIGluc3RlYWQuIFRoZSBmaXJzdCB0b3VjaCBpcyBub3QgcHJldmVudGVkIHRvIGxldCBvdGhlciBsaXN0ZW5lcnMgcmVjZWl2ZSB0aGUgZXZlbnQgYW5kIHRyaWdnZXIgYW5cbiAgICAgICAgICAvLyBpbml0aWFsIGFjdGlvbiwgZS5nLiB0aGUgaHVnZSBwbGF5YmFjayBidXR0b24gY2FuIGRpcmVjdGx5IHN0YXJ0IHBsYXliYWNrIGluc3RlYWQgb2YgcmVxdWlyaW5nIGEgZG91YmxlXG4gICAgICAgICAgLy8gdGFwIHdoaWNoIDEuIHJldmVhbHMgdGhlIFVJIGFuZCAyLiBzdGFydHMgcGxheWJhY2suXG4gICAgICAgICAgaWYgKGlzRmlyc3RUb3VjaCAmJiAhcGxheWVyLmlzUGxheWluZygpKSB7XG4gICAgICAgICAgICBpc0ZpcnN0VG91Y2ggPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnNob3dVaSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sIHtcbiAgICAgIC8vIFdoZW4gdGhlIG1vdXNlIGVudGVycywgd2Ugc2hvdyB0aGUgVUlcbiAgICAgIG5hbWU6ICdtb3VzZWVudGVyJyxcbiAgICAgIGhhbmRsZXI6ICgpID0+IHtcbiAgICAgICAgdGhpcy5zaG93VWkoKTtcbiAgICAgIH0sXG4gICAgfSwge1xuICAgICAgLy8gV2hlbiB0aGUgbW91c2UgbW92ZXMgd2l0aGluLCB3ZSBzaG93IHRoZSBVSVxuICAgICAgbmFtZTogJ21vdXNlbW92ZScsXG4gICAgICBoYW5kbGVyOiAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2hvd1VpKCk7XG4gICAgICB9LFxuICAgIH0sIHtcbiAgICAgIG5hbWU6ICdmb2N1c2luJyxcbiAgICAgIGhhbmRsZXI6ICgpID0+IHtcbiAgICAgICAgdGhpcy5zaG93VWkoKTtcbiAgICAgIH0sXG4gICAgfSwge1xuICAgICAgbmFtZTogJ2tleWRvd24nLFxuICAgICAgaGFuZGxlcjogKCkgPT4ge1xuICAgICAgICB0aGlzLnNob3dVaSgpO1xuICAgICAgfSxcbiAgICB9LCB7XG4gICAgICAvLyBXaGVuIHRoZSBtb3VzZSBsZWF2ZXMsIHdlIGNhbiBwcmVwYXJlIHRvIGhpZGUgdGhlIFVJLCBleGNlcHQgYSBzZWVrIGlzIGdvaW5nIG9uXG4gICAgICBuYW1lOiAnbW91c2VsZWF2ZScsXG4gICAgICBoYW5kbGVyOiAoKSA9PiB7XG4gICAgICAgIC8vIFdoZW4gYSBzZWVrIGlzIGdvaW5nIG9uLCB0aGUgc2VlayBzY3J1YiBwb2ludGVyIG1heSBleGl0IHRoZSBVSSBhcmVhIHdoaWxlIHN0aWxsIHNlZWtpbmcsIGFuZCB3ZSBkbyBub3RcbiAgICAgICAgLy8gaGlkZSB0aGUgVUkgaW4gc3VjaCBjYXNlc1xuICAgICAgICBpZiAoIWlzU2Vla2luZyAmJiAhaGlkaW5nUHJldmVudGVkKCkpIHtcbiAgICAgICAgICB0aGlzLnVpSGlkZVRpbWVvdXQuc3RhcnQoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9XTtcblxuICAgIHRoaXMudXNlckludGVyYWN0aW9uRXZlbnRzLmZvckVhY2goKGV2ZW50KSA9PiB0aGlzLnVzZXJJbnRlcmFjdGlvbkV2ZW50U291cmNlLm9uKGV2ZW50Lm5hbWUsIGV2ZW50LmhhbmRsZXIpKTtcblxuICAgIHVpbWFuYWdlci5vblNlZWsuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMudWlIaWRlVGltZW91dC5jbGVhcigpOyAvLyBEb24ndCBoaWRlIFVJIHdoaWxlIGEgc2VlayBpcyBpbiBwcm9ncmVzc1xuICAgICAgaXNTZWVraW5nID0gdHJ1ZTtcbiAgICB9KTtcbiAgICB1aW1hbmFnZXIub25TZWVrZWQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGlzU2Vla2luZyA9IGZhbHNlO1xuICAgICAgaWYgKCFoaWRpbmdQcmV2ZW50ZWQoKSkge1xuICAgICAgICB0aGlzLnVpSGlkZVRpbWVvdXQuc3RhcnQoKTsgLy8gUmUtZW5hYmxlIFVJIGhpZGUgdGltZW91dCBhZnRlciBhIHNlZWtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQ2FzdFN0YXJ0ZWQsICgpID0+IHtcbiAgICAgIHRoaXMuc2hvd1VpKCk7IC8vIFNob3cgVUkgd2hlbiBhIENhc3Qgc2Vzc2lvbiBoYXMgc3RhcnRlZCAoVUkgd2lsbCB0aGVuIHN0YXkgcGVybWFuZW50bHkgb24gZHVyaW5nIHRoZSBzZXNzaW9uKVxuICAgIH0pO1xuICAgIHRoaXMucGxheWVyU3RhdGVDaGFuZ2Uuc3Vic2NyaWJlKChfLCBzdGF0ZSkgPT4ge1xuICAgICAgcGxheWVyU3RhdGUgPSBzdGF0ZTtcbiAgICAgIGlmIChoaWRpbmdQcmV2ZW50ZWQoKSkge1xuICAgICAgICAvLyBFbnRlcmluZyBhIHBsYXllciBzdGF0ZSB0aGF0IHByZXZlbnRzIGhpZGluZyBhbmQgZm9yY2VzIHRoZSBjb250cm9scyB0byBiZSBzaG93blxuICAgICAgICB0aGlzLnVpSGlkZVRpbWVvdXQuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5zaG93VWkoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEVudGVyaW5nIGEgcGxheWVyIHN0YXRlIHRoYXQgYWxsb3dzIGhpZGluZ1xuICAgICAgICB0aGlzLnVpSGlkZVRpbWVvdXQuc3RhcnQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgY29uZmlndXJlUGxheWVyU3RhdGVzKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgbGV0IGNvbnRhaW5lciA9IHRoaXMuZ2V0RG9tRWxlbWVudCgpO1xuXG4gICAgLy8gQ29udmVydCBwbGF5ZXIgc3RhdGVzIGludG8gQ1NTIGNsYXNzIG5hbWVzXG4gICAgbGV0IHN0YXRlQ2xhc3NOYW1lcyA9IDxhbnk+W107XG4gICAgZm9yIChsZXQgc3RhdGUgaW4gUGxheWVyVXRpbHMuUGxheWVyU3RhdGUpIHtcbiAgICAgIGlmIChpc05hTihOdW1iZXIoc3RhdGUpKSkge1xuICAgICAgICBsZXQgZW51bU5hbWUgPSBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZVs8YW55PlBsYXllclV0aWxzLlBsYXllclN0YXRlW3N0YXRlXV07XG4gICAgICAgIHN0YXRlQ2xhc3NOYW1lc1tQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZVtzdGF0ZV1dID1cbiAgICAgICAgICB0aGlzLnByZWZpeENzcyhVSUNvbnRhaW5lci5TVEFURV9QUkVGSVggKyBlbnVtTmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcmVtb3ZlU3RhdGVzID0gKCkgPT4ge1xuICAgICAgY29udGFpbmVyLnJlbW92ZUNsYXNzKHN0YXRlQ2xhc3NOYW1lc1tQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5JZGxlXSk7XG4gICAgICBjb250YWluZXIucmVtb3ZlQ2xhc3Moc3RhdGVDbGFzc05hbWVzW1BsYXllclV0aWxzLlBsYXllclN0YXRlLlByZXBhcmVkXSk7XG4gICAgICBjb250YWluZXIucmVtb3ZlQ2xhc3Moc3RhdGVDbGFzc05hbWVzW1BsYXllclV0aWxzLlBsYXllclN0YXRlLlBsYXlpbmddKTtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDbGFzcyhzdGF0ZUNsYXNzTmFtZXNbUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUGF1c2VkXSk7XG4gICAgICBjb250YWluZXIucmVtb3ZlQ2xhc3Moc3RhdGVDbGFzc05hbWVzW1BsYXllclV0aWxzLlBsYXllclN0YXRlLkZpbmlzaGVkXSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHVwZGF0ZVN0YXRlID0gKHN0YXRlOiBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZSkgPT4ge1xuICAgICAgcmVtb3ZlU3RhdGVzKCk7XG4gICAgICBjb250YWluZXIuYWRkQ2xhc3Moc3RhdGVDbGFzc05hbWVzW3N0YXRlXSk7XG4gICAgICB0aGlzLnBsYXllclN0YXRlQ2hhbmdlLmRpc3BhdGNoKHRoaXMsIHN0YXRlKTtcbiAgICB9O1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZUxvYWRlZCwgKCkgPT4ge1xuICAgICAgdXBkYXRlU3RhdGUoUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUHJlcGFyZWQpO1xuICAgIH0pO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5LCAoKSA9PiB7XG4gICAgICB1cGRhdGVTdGF0ZShQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5QbGF5aW5nKTtcbiAgICB9KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheWluZywgKCkgPT4ge1xuICAgICAgdXBkYXRlU3RhdGUoUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUGxheWluZyk7XG4gICAgfSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBhdXNlZCwgKCkgPT4ge1xuICAgICAgdXBkYXRlU3RhdGUoUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUGF1c2VkKTtcbiAgICB9KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheWJhY2tGaW5pc2hlZCwgKCkgPT4ge1xuICAgICAgdXBkYXRlU3RhdGUoUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuRmluaXNoZWQpO1xuICAgIH0pO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VVbmxvYWRlZCwgKCkgPT4ge1xuICAgICAgdXBkYXRlU3RhdGUoUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuSWRsZSk7XG4gICAgfSk7XG4gICAgdWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHVwZGF0ZVN0YXRlKFBsYXllclV0aWxzLmdldFN0YXRlKHBsYXllcikpO1xuICAgIH0pO1xuXG4gICAgLy8gRnVsbHNjcmVlbiBtYXJrZXIgY2xhc3NcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVmlld01vZGVDaGFuZ2VkLCAoKSA9PiB7XG4gICAgICBpZiAocGxheWVyLmdldFZpZXdNb2RlKCkgPT09IHBsYXllci5leHBvcnRzLlZpZXdNb2RlLkZ1bGxzY3JlZW4pIHtcbiAgICAgICAgY29udGFpbmVyLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKFVJQ29udGFpbmVyLkZVTExTQ1JFRU4pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeENzcyhVSUNvbnRhaW5lci5GVUxMU0NSRUVOKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gSW5pdCBmdWxsc2NyZWVuIHN0YXRlXG4gICAgaWYgKHBsYXllci5nZXRWaWV3TW9kZSgpID09PSBwbGF5ZXIuZXhwb3J0cy5WaWV3TW9kZS5GdWxsc2NyZWVuKSB7XG4gICAgICBjb250YWluZXIuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoVUlDb250YWluZXIuRlVMTFNDUkVFTikpO1xuICAgIH1cblxuICAgIC8vIEJ1ZmZlcmluZyBtYXJrZXIgY2xhc3NcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU3RhbGxTdGFydGVkLCAoKSA9PiB7XG4gICAgICBjb250YWluZXIuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoVUlDb250YWluZXIuQlVGRkVSSU5HKSk7XG4gICAgfSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlN0YWxsRW5kZWQsICgpID0+IHtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeENzcyhVSUNvbnRhaW5lci5CVUZGRVJJTkcpKTtcbiAgICB9KTtcbiAgICAvLyBJbml0IGJ1ZmZlcmluZyBzdGF0ZVxuICAgIGlmIChwbGF5ZXIuaXNTdGFsbGVkKCkpIHtcbiAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLnByZWZpeENzcyhVSUNvbnRhaW5lci5CVUZGRVJJTkcpKTtcbiAgICB9XG5cbiAgICAvLyBSZW1vdGVDb250cm9sIG1hcmtlciBjbGFzc1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5DYXN0U3RhcnRlZCwgKCkgPT4ge1xuICAgICAgY29udGFpbmVyLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKFVJQ29udGFpbmVyLlJFTU9URV9DT05UUk9MKSk7XG4gICAgfSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkNhc3RTdG9wcGVkLCAoKSA9PiB7XG4gICAgICBjb250YWluZXIucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoVUlDb250YWluZXIuUkVNT1RFX0NPTlRST0wpKTtcbiAgICB9KTtcbiAgICAvLyBJbml0IFJlbW90ZUNvbnRyb2wgc3RhdGVcbiAgICBpZiAocGxheWVyLmlzQ2FzdGluZygpKSB7XG4gICAgICBjb250YWluZXIuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoVUlDb250YWluZXIuUkVNT1RFX0NPTlRST0wpKTtcbiAgICB9XG5cbiAgICAvLyBDb250cm9scyB2aXNpYmlsaXR5IG1hcmtlciBjbGFzc1xuICAgIHVpbWFuYWdlci5vbkNvbnRyb2xzU2hvdy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgY29udGFpbmVyLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4Q3NzKFVJQ29udGFpbmVyLkNPTlRST0xTX0hJRERFTikpO1xuICAgICAgY29udGFpbmVyLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKFVJQ29udGFpbmVyLkNPTlRST0xTX1NIT1dOKSk7XG4gICAgfSk7XG4gICAgdWltYW5hZ2VyLm9uQ29udHJvbHNIaWRlLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBjb250YWluZXIucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoVUlDb250YWluZXIuQ09OVFJPTFNfU0hPV04pKTtcbiAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLnByZWZpeENzcyhVSUNvbnRhaW5lci5DT05UUk9MU19ISURERU4pKTtcbiAgICB9KTtcblxuICAgIC8vIExheW91dCBzaXplIGNsYXNzZXNcbiAgICBsZXQgdXBkYXRlTGF5b3V0U2l6ZUNsYXNzZXMgPSAod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpID0+IHtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeENzcygnbGF5b3V0LW1heC13aWR0aC00MDAnKSk7XG4gICAgICBjb250YWluZXIucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoJ2xheW91dC1tYXgtd2lkdGgtNjAwJykpO1xuICAgICAgY29udGFpbmVyLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4Q3NzKCdsYXlvdXQtbWF4LXdpZHRoLTgwMCcpKTtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeENzcygnbGF5b3V0LW1heC13aWR0aC0xMjAwJykpO1xuXG4gICAgICBpZiAod2lkdGggPD0gNDAwKSB7XG4gICAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLnByZWZpeENzcygnbGF5b3V0LW1heC13aWR0aC00MDAnKSk7XG4gICAgICB9IGVsc2UgaWYgKHdpZHRoIDw9IDYwMCkge1xuICAgICAgICBjb250YWluZXIuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoJ2xheW91dC1tYXgtd2lkdGgtNjAwJykpO1xuICAgICAgfSBlbHNlIGlmICh3aWR0aCA8PSA4MDApIHtcbiAgICAgICAgY29udGFpbmVyLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKCdsYXlvdXQtbWF4LXdpZHRoLTgwMCcpKTtcbiAgICAgIH0gZWxzZSBpZiAod2lkdGggPD0gMTIwMCkge1xuICAgICAgICBjb250YWluZXIuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoJ2xheW91dC1tYXgtd2lkdGgtMTIwMCcpKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5ZXJSZXNpemVkLCAoZTogUGxheWVyUmVzaXplZEV2ZW50KSA9PiB7XG4gICAgICAvLyBDb252ZXJ0IHN0cmluZ3MgKHdpdGggXCJweFwiIHN1ZmZpeCkgdG8gaW50c1xuICAgICAgbGV0IHdpZHRoID0gTWF0aC5yb3VuZChOdW1iZXIoZS53aWR0aC5zdWJzdHJpbmcoMCwgZS53aWR0aC5sZW5ndGggLSAyKSkpO1xuICAgICAgbGV0IGhlaWdodCA9IE1hdGgucm91bmQoTnVtYmVyKGUuaGVpZ2h0LnN1YnN0cmluZygwLCBlLmhlaWdodC5sZW5ndGggLSAyKSkpO1xuXG4gICAgICB1cGRhdGVMYXlvdXRTaXplQ2xhc3Nlcyh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9KTtcbiAgICAvLyBJbml0IGxheW91dCBzdGF0ZVxuICAgIHVwZGF0ZUxheW91dFNpemVDbGFzc2VzKG5ldyBET00ocGxheWVyLmdldENvbnRhaW5lcigpKS53aWR0aCgpLCBuZXcgRE9NKHBsYXllci5nZXRDb250YWluZXIoKSkuaGVpZ2h0KCkpO1xuICB9XG5cbiAgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICAvLyBFeHBsaWNpdGx5IHVuc3Vic2NyaWJlIHVzZXIgaW50ZXJhY3Rpb24gZXZlbnQgaGFuZGxlcnMgYmVjYXVzZSB0aGV5IGNvdWxkIGJlIGF0dGFjaGVkIHRvIGFuIGV4dGVybmFsIGVsZW1lbnRcbiAgICAvLyB0aGF0IGlzbid0IG93bmVkIGJ5IHRoZSBVSSBhbmQgdGhlcmVmb3JlIG5vdCByZW1vdmVkIG9uIHJlbGVhc2UuXG4gICAgaWYgKHRoaXMudXNlckludGVyYWN0aW9uRXZlbnRzKSB7XG4gICAgICB0aGlzLnVzZXJJbnRlcmFjdGlvbkV2ZW50cy5mb3JFYWNoKChldmVudCkgPT4gdGhpcy51c2VySW50ZXJhY3Rpb25FdmVudFNvdXJjZS5vZmYoZXZlbnQubmFtZSwgZXZlbnQuaGFuZGxlcikpO1xuICAgIH1cblxuICAgIHN1cGVyLnJlbGVhc2UoKTtcblxuICAgIGlmICh0aGlzLnVpSGlkZVRpbWVvdXQpIHtcbiAgICAgIHRoaXMudWlIaWRlVGltZW91dC5jbGVhcigpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCB0b0RvbUVsZW1lbnQoKTogRE9NIHtcbiAgICBsZXQgY29udGFpbmVyID0gc3VwZXIudG9Eb21FbGVtZW50KCk7XG5cbiAgICAvLyBEZXRlY3QgZmxleGJveCBzdXBwb3J0IChub3Qgc3VwcG9ydGVkIGluIElFOSlcbiAgICBpZiAoZG9jdW1lbnQgJiYgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKS5zdHlsZS5mbGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29udGFpbmVyLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKCdmbGV4Ym94JykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250YWluZXIuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoJ25vLWZsZXhib3gnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgfVxufVxuIiwiaW1wb3J0IHtTZWxlY3RCb3h9IGZyb20gJy4vc2VsZWN0Ym94JztcbmltcG9ydCB7TGlzdFNlbGVjdG9yQ29uZmlnfSBmcm9tICcuL2xpc3RzZWxlY3Rvcic7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBzZWxlY3QgYm94IHByb3ZpZGluZyBhIHNlbGVjdGlvbiBiZXR3ZWVuICdhdXRvJyBhbmQgdGhlIGF2YWlsYWJsZSB2aWRlbyBxdWFsaXRpZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBWaWRlb1F1YWxpdHlTZWxlY3RCb3ggZXh0ZW5kcyBTZWxlY3RCb3gge1xuXG4gIHByaXZhdGUgaGFzQXV0bzogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IExpc3RTZWxlY3RvckNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzZXM6IFsndWktdmlkZW9xdWFsaXR5c2VsZWN0Ym94J10sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBzZWxlY3RDdXJyZW50VmlkZW9RdWFsaXR5ID0gKCkgPT4ge1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKHBsYXllci5nZXRWaWRlb1F1YWxpdHkoKS5pZCk7XG4gICAgfTtcblxuICAgIGxldCB1cGRhdGVWaWRlb1F1YWxpdGllcyA9ICgpID0+IHtcbiAgICAgIGxldCB2aWRlb1F1YWxpdGllcyA9IHBsYXllci5nZXRBdmFpbGFibGVWaWRlb1F1YWxpdGllcygpO1xuXG4gICAgICB0aGlzLmNsZWFySXRlbXMoKTtcblxuICAgICAgLy8gUHJvZ3Jlc3NpdmUgc3RyZWFtcyBkbyBub3Qgc3VwcG9ydCBhdXRvbWF0aWMgcXVhbGl0eSBzZWxlY3Rpb25cbiAgICAgIHRoaXMuaGFzQXV0byA9IHBsYXllci5nZXRTdHJlYW1UeXBlKCkgIT09ICdwcm9ncmVzc2l2ZSc7XG5cbiAgICAgIGlmICh0aGlzLmhhc0F1dG8pIHtcbiAgICAgICAgLy8gQWRkIGVudHJ5IGZvciBhdXRvbWF0aWMgcXVhbGl0eSBzd2l0Y2hpbmcgKGRlZmF1bHQgc2V0dGluZylcbiAgICAgICAgdGhpcy5hZGRJdGVtKCdhdXRvJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2F1dG8nKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCB2aWRlbyBxdWFsaXRpZXNcbiAgICAgIGZvciAobGV0IHZpZGVvUXVhbGl0eSBvZiB2aWRlb1F1YWxpdGllcykge1xuICAgICAgICB0aGlzLmFkZEl0ZW0odmlkZW9RdWFsaXR5LmlkLCB2aWRlb1F1YWxpdHkubGFiZWwpO1xuICAgICAgfVxuXG4gICAgICAvLyBTZWxlY3QgaW5pdGlhbCBxdWFsaXR5XG4gICAgICBzZWxlY3RDdXJyZW50VmlkZW9RdWFsaXR5KCk7XG4gICAgfTtcblxuICAgIHRoaXMub25JdGVtU2VsZWN0ZWQuc3Vic2NyaWJlKChzZW5kZXI6IFZpZGVvUXVhbGl0eVNlbGVjdEJveCwgdmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgcGxheWVyLnNldFZpZGVvUXVhbGl0eSh2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvLyBVcGRhdGUgcXVhbGl0aWVzIHdoZW4gc291cmNlIGdvZXMgYXdheVxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VVbmxvYWRlZCwgdXBkYXRlVmlkZW9RdWFsaXRpZXMpO1xuICAgIC8vIFVwZGF0ZSBxdWFsaXRpZXMgd2hlbiB0aGUgcGVyaW9kIHdpdGhpbiBhIHNvdXJjZSBjaGFuZ2VzXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBlcmlvZFN3aXRjaGVkLCB1cGRhdGVWaWRlb1F1YWxpdGllcyk7XG4gICAgLy8gVXBkYXRlIHF1YWxpdHkgc2VsZWN0aW9uIHdoZW4gcXVhbGl0eSBpcyBjaGFuZ2VkIChmcm9tIG91dHNpZGUpXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlZpZGVvUXVhbGl0eUNoYW5nZWQsIHNlbGVjdEN1cnJlbnRWaWRlb1F1YWxpdHkpO1xuXG4gICAgaWYgKChwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudCBhcyBhbnkpLlZpZGVvUXVhbGl0eUFkZGVkKSB7XG4gICAgICAvLyBVcGRhdGUgcXVhbGl0aWVzIHdoZW4gdGhlaXIgYXZhaWxhYmlsaXR5IGNoYW5nZWRcbiAgICAgIC8vIFRPRE86IHJlbW92ZSBhbnkgY2FzdCBhZnRlciBuZXh0IHBsYXllciByZWxlYXNlXG4gICAgICBwbGF5ZXIub24oKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50IGFzIGFueSkuVmlkZW9RdWFsaXR5QWRkZWQsIHVwZGF0ZVZpZGVvUXVhbGl0aWVzKTtcbiAgICAgIHBsYXllci5vbigocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQgYXMgYW55KS5WaWRlb1F1YWxpdHlSZW1vdmVkLCB1cGRhdGVWaWRlb1F1YWxpdGllcyk7XG4gICAgfVxuXG4gICAgdWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKHVwZGF0ZVZpZGVvUXVhbGl0aWVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNlbGVjdCBib3ggY29udGFpbnMgYW4gJ2F1dG8nIGl0ZW0gZm9yIGF1dG9tYXRpYyBxdWFsaXR5IHNlbGVjdGlvbiBtb2RlLlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaGFzQXV0b0l0ZW0oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaGFzQXV0bztcbiAgfVxufSIsImltcG9ydCB7Q29udGFpbmVyLCBDb250YWluZXJDb25maWd9IGZyb20gJy4vY29udGFpbmVyJztcbmltcG9ydCB7Vm9sdW1lU2xpZGVyfSBmcm9tICcuL3ZvbHVtZXNsaWRlcic7XG5pbXBvcnQge1ZvbHVtZVRvZ2dsZUJ1dHRvbn0gZnJvbSAnLi92b2x1bWV0b2dnbGVidXR0b24nO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7VGltZW91dH0gZnJvbSAnLi4vdGltZW91dCc7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIGZvciBhIHtAbGluayBWb2x1bWVDb250cm9sQnV0dG9ufS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBWb2x1bWVDb250cm9sQnV0dG9uQ29uZmlnIGV4dGVuZHMgQ29udGFpbmVyQ29uZmlnIHtcbiAgLyoqXG4gICAqIFRoZSBkZWxheSBhZnRlciB3aGljaCB0aGUgdm9sdW1lIHNsaWRlciB3aWxsIGJlIGhpZGRlbiB3aGVuIHRoZXJlIGlzIG5vIHVzZXIgaW50ZXJhY3Rpb24uXG4gICAqIENhcmUgbXVzdCBiZSB0YWtlbiB0aGF0IHRoZSBkZWxheSBpcyBsb25nIGVub3VnaCBzbyB1c2VycyBjYW4gcmVhY2ggdGhlIHNsaWRlciBmcm9tIHRoZSB0b2dnbGUgYnV0dG9uLCBlLmcuIGJ5XG4gICAqIG1vdXNlIG1vdmVtZW50LiBJZiB0aGUgZGVsYXkgaXMgdG9vIHNob3J0LCB0aGUgc2xpZGVycyBkaXNhcHBlYXJzIGJlZm9yZSB0aGUgbW91c2UgcG9pbnRlciBoYXMgcmVhY2hlZCBpdCBhbmRcbiAgICogdGhlIHVzZXIgaXMgbm90IGFibGUgdG8gdXNlIGl0LlxuICAgKiBEZWZhdWx0OiA1MDBtc1xuICAgKi9cbiAgaGlkZURlbGF5PzogbnVtYmVyO1xuICAvKipcbiAgICogU3BlY2lmaWVzIGlmIHRoZSB2b2x1bWUgc2xpZGVyIHNob3VsZCBiZSB2ZXJ0aWNhbGx5IG9yIGhvcml6b250YWxseSBhbGlnbmVkLlxuICAgKiBEZWZhdWx0OiB0cnVlXG4gICAqL1xuICB2ZXJ0aWNhbD86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQSBjb21wb3NpdGUgdm9sdW1lIGNvbnRyb2wgdGhhdCBjb25zaXN0cyBvZiBhbmQgaW50ZXJuYWxseSBtYW5hZ2VzIGEgdm9sdW1lIGNvbnRyb2wgYnV0dG9uIHRoYXQgY2FuIGJlIHVzZWRcbiAqIGZvciBtdXRpbmcsIGFuZCBhIChkZXBlbmRpbmcgb24gdGhlIENTUyBzdHlsZSwgZS5nLiBzbGlkZS1vdXQpIHZvbHVtZSBjb250cm9sIGJhci5cbiAqL1xuZXhwb3J0IGNsYXNzIFZvbHVtZUNvbnRyb2xCdXR0b24gZXh0ZW5kcyBDb250YWluZXI8Vm9sdW1lQ29udHJvbEJ1dHRvbkNvbmZpZz4ge1xuXG4gIHByaXZhdGUgdm9sdW1lVG9nZ2xlQnV0dG9uOiBWb2x1bWVUb2dnbGVCdXR0b247XG4gIHByaXZhdGUgdm9sdW1lU2xpZGVyOiBWb2x1bWVTbGlkZXI7XG5cbiAgcHJpdmF0ZSB2b2x1bWVTbGlkZXJIaWRlVGltZW91dDogVGltZW91dDtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFZvbHVtZUNvbnRyb2xCdXR0b25Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLnZvbHVtZVRvZ2dsZUJ1dHRvbiA9IG5ldyBWb2x1bWVUb2dnbGVCdXR0b24oKTtcbiAgICB0aGlzLnZvbHVtZVNsaWRlciA9IG5ldyBWb2x1bWVTbGlkZXIoe1xuICAgICAgdmVydGljYWw6IGNvbmZpZy52ZXJ0aWNhbCAhPSBudWxsID8gY29uZmlnLnZlcnRpY2FsIDogdHJ1ZSxcbiAgICAgIGhpZGRlbjogdHJ1ZSxcbiAgICB9KTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktdm9sdW1lY29udHJvbGJ1dHRvbicsXG4gICAgICBjb21wb25lbnRzOiBbdGhpcy52b2x1bWVUb2dnbGVCdXR0b24sIHRoaXMudm9sdW1lU2xpZGVyXSxcbiAgICAgIGhpZGVEZWxheTogNTAwLFxuICAgIH0sIDxWb2x1bWVDb250cm9sQnV0dG9uQ29uZmlnPnRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICBsZXQgdm9sdW1lVG9nZ2xlQnV0dG9uID0gdGhpcy5nZXRWb2x1bWVUb2dnbGVCdXR0b24oKTtcbiAgICBsZXQgdm9sdW1lU2xpZGVyID0gdGhpcy5nZXRWb2x1bWVTbGlkZXIoKTtcblxuICAgIHRoaXMudm9sdW1lU2xpZGVySGlkZVRpbWVvdXQgPSBuZXcgVGltZW91dCh0aGlzLmdldENvbmZpZygpLmhpZGVEZWxheSwgKCkgPT4ge1xuICAgICAgdm9sdW1lU2xpZGVyLmhpZGUoKTtcbiAgICB9KTtcblxuICAgIC8qXG4gICAgICogVm9sdW1lIFNsaWRlciB2aXNpYmlsaXR5IGhhbmRsaW5nXG4gICAgICpcbiAgICAgKiBUaGUgdm9sdW1lIHNsaWRlciBzaGFsbCBiZSB2aXNpYmxlIHdoaWxlIHRoZSB1c2VyIGhvdmVycyB0aGUgbXV0ZSB0b2dnbGUgYnV0dG9uLCB3aGlsZSB0aGUgdXNlciBob3ZlcnMgdGhlXG4gICAgICogdm9sdW1lIHNsaWRlciwgYW5kIHdoaWxlIHRoZSB1c2VyIHNsaWRlcyB0aGUgdm9sdW1lIHNsaWRlci4gSWYgbm9uZSBvZiB0aGVzZSBzaXR1YXRpb25zIGFyZSB0cnVlLCB0aGUgc2xpZGVyXG4gICAgICogc2hhbGwgZGlzYXBwZWFyLlxuICAgICAqL1xuICAgIGxldCB2b2x1bWVTbGlkZXJIb3ZlcmVkID0gZmFsc2U7XG4gICAgdm9sdW1lVG9nZ2xlQnV0dG9uLmdldERvbUVsZW1lbnQoKS5vbignbW91c2VlbnRlcicsICgpID0+IHtcbiAgICAgIC8vIFNob3cgdm9sdW1lIHNsaWRlciB3aGVuIG1vdXNlIGVudGVycyB0aGUgYnV0dG9uIGFyZWFcbiAgICAgIGlmICh2b2x1bWVTbGlkZXIuaXNIaWRkZW4oKSkge1xuICAgICAgICB2b2x1bWVTbGlkZXIuc2hvdygpO1xuICAgICAgfVxuICAgICAgLy8gQXZvaWQgaGlkaW5nIG9mIHRoZSBzbGlkZXIgd2hlbiBidXR0b24gaXMgaG92ZXJlZFxuICAgICAgdGhpcy52b2x1bWVTbGlkZXJIaWRlVGltZW91dC5jbGVhcigpO1xuICAgIH0pO1xuICAgIHZvbHVtZVRvZ2dsZUJ1dHRvbi5nZXREb21FbGVtZW50KCkub24oJ21vdXNlbGVhdmUnLCAoKSA9PiB7XG4gICAgICAvLyBIaWRlIHNsaWRlciBkZWxheWVkIHdoZW4gYnV0dG9uIGlzIGxlZnRcbiAgICAgIHRoaXMudm9sdW1lU2xpZGVySGlkZVRpbWVvdXQucmVzZXQoKTtcbiAgICB9KTtcbiAgICB2b2x1bWVTbGlkZXIuZ2V0RG9tRWxlbWVudCgpLm9uKCdtb3VzZWVudGVyJywgKCkgPT4ge1xuICAgICAgLy8gV2hlbiB0aGUgc2xpZGVyIGlzIGVudGVyZWQsIGNhbmNlbCB0aGUgaGlkZSB0aW1lb3V0IGFjdGl2YXRlZCBieSBsZWF2aW5nIHRoZSBidXR0b25cbiAgICAgIHRoaXMudm9sdW1lU2xpZGVySGlkZVRpbWVvdXQuY2xlYXIoKTtcbiAgICAgIHZvbHVtZVNsaWRlckhvdmVyZWQgPSB0cnVlO1xuICAgIH0pO1xuICAgIHZvbHVtZVNsaWRlci5nZXREb21FbGVtZW50KCkub24oJ21vdXNlbGVhdmUnLCAoKSA9PiB7XG4gICAgICAvLyBXaGVuIG1vdXNlIGxlYXZlcyB0aGUgc2xpZGVyLCBvbmx5IGhpZGUgaXQgaWYgdGhlcmUgaXMgbm8gc2xpZGUgb3BlcmF0aW9uIGluIHByb2dyZXNzXG4gICAgICBpZiAodm9sdW1lU2xpZGVyLmlzU2Vla2luZygpKSB7XG4gICAgICAgIHRoaXMudm9sdW1lU2xpZGVySGlkZVRpbWVvdXQuY2xlYXIoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudm9sdW1lU2xpZGVySGlkZVRpbWVvdXQucmVzZXQoKTtcbiAgICAgIH1cbiAgICAgIHZvbHVtZVNsaWRlckhvdmVyZWQgPSBmYWxzZTtcbiAgICB9KTtcbiAgICB2b2x1bWVTbGlkZXIub25TZWVrZWQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIC8vIFdoZW4gYSBzbGlkZSBvcGVyYXRpb24gaXMgZG9uZSBhbmQgdGhlIHNsaWRlciBub3QgaG92ZXJlZCAobW91c2Ugb3V0c2lkZSBzbGlkZXIpLCBoaWRlIHNsaWRlciBkZWxheWVkXG4gICAgICBpZiAoIXZvbHVtZVNsaWRlckhvdmVyZWQpIHtcbiAgICAgICAgdGhpcy52b2x1bWVTbGlkZXJIaWRlVGltZW91dC5yZXNldCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBzdXBlci5yZWxlYXNlKCk7XG4gICAgdGhpcy52b2x1bWVTbGlkZXJIaWRlVGltZW91dC5jbGVhcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGFjY2VzcyB0byB0aGUgaW50ZXJuYWxseSBtYW5hZ2VkIHZvbHVtZSB0b2dnbGUgYnV0dG9uLlxuICAgKiBAcmV0dXJucyB7Vm9sdW1lVG9nZ2xlQnV0dG9ufVxuICAgKi9cbiAgZ2V0Vm9sdW1lVG9nZ2xlQnV0dG9uKCk6IFZvbHVtZVRvZ2dsZUJ1dHRvbiB7XG4gICAgcmV0dXJuIHRoaXMudm9sdW1lVG9nZ2xlQnV0dG9uO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGFjY2VzcyB0byB0aGUgaW50ZXJuYWxseSBtYW5hZ2VkIHZvbHVtZSBzaWxkZXIuXG4gICAqIEByZXR1cm5zIHtWb2x1bWVTbGlkZXJ9XG4gICAqL1xuICBnZXRWb2x1bWVTbGlkZXIoKTogVm9sdW1lU2xpZGVyIHtcbiAgICByZXR1cm4gdGhpcy52b2x1bWVTbGlkZXI7XG4gIH1cbn0iLCJpbXBvcnQgeyBTZWVrQmFyLCBTZWVrQmFyQ29uZmlnLCBTZWVrUHJldmlld0V2ZW50QXJncyB9IGZyb20gJy4vc2Vla2Jhcic7XG5pbXBvcnQgeyBVSUluc3RhbmNlTWFuYWdlciB9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgVm9sdW1lVHJhbnNpdGlvbiB9IGZyb20gJy4uL3ZvbHVtZWNvbnRyb2xsZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgdGhlIHtAbGluayBWb2x1bWVTbGlkZXJ9IGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBWb2x1bWVTbGlkZXJDb25maWcgZXh0ZW5kcyBTZWVrQmFyQ29uZmlnIHtcbiAgLyoqXG4gICAqIFNwZWNpZmllcyBpZiB0aGUgdm9sdW1lIHNsaWRlciBzaG91bGQgYmUgYXV0b21hdGljYWxseSBoaWRkZW4gd2hlbiB2b2x1bWUgY29udHJvbCBpcyBwcm9oaWJpdGVkIGJ5IHRoZVxuICAgKiBicm93c2VyIG9yIHBsYXRmb3JtLiBUaGlzIGN1cnJlbnRseSBvbmx5IGFwcGxpZXMgdG8gaU9TLlxuICAgKiBEZWZhdWx0OiB0cnVlXG4gICAqL1xuICBoaWRlSWZWb2x1bWVDb250cm9sUHJvaGliaXRlZD86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQSBzaW1wbGUgdm9sdW1lIHNsaWRlciBjb21wb25lbnQgdG8gYWRqdXN0IHRoZSBwbGF5ZXIncyB2b2x1bWUgc2V0dGluZy5cbiAqL1xuZXhwb3J0IGNsYXNzIFZvbHVtZVNsaWRlciBleHRlbmRzIFNlZWtCYXIge1xuICBwcml2YXRlIHZvbHVtZVRyYW5zaXRpb246IFZvbHVtZVRyYW5zaXRpb247XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBWb2x1bWVTbGlkZXJDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCA8Vm9sdW1lU2xpZGVyQ29uZmlnPntcbiAgICAgIGNzc0NsYXNzOiAndWktdm9sdW1lc2xpZGVyJyxcbiAgICAgIGhpZGVJZlZvbHVtZUNvbnRyb2xQcm9oaWJpdGVkOiB0cnVlLFxuICAgICAgYXJpYUxhYmVsOiBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3MuYXVkaW8udm9sdW1lJyksXG4gICAgICB0YWJJbmRleDogMCxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBwcml2YXRlIHNldFZvbHVtZUFyaWFTbGlkZXJWYWx1ZXModmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmF0dHIoJ2FyaWEtdmFsdWVub3cnLCBNYXRoLmNlaWwodmFsdWUpLnRvU3RyaW5nKCkpO1xuICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmF0dHIoJ2FyaWEtdmFsdWV0ZXh0JywgYCR7aTE4bi5wZXJmb3JtTG9jYWxpemF0aW9uKGkxOG4uZ2V0TG9jYWxpemVyKCdzZWVrQmFyLnZhbHVlJykpfTogJHtNYXRoLmNlaWwodmFsdWUpfWApO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyLCBmYWxzZSk7XG5cbiAgICB0aGlzLnNldEFyaWFTbGlkZXJNaW5NYXgoJzAnLCAnMTAwJyk7XG5cbiAgICBsZXQgY29uZmlnID0gPFZvbHVtZVNsaWRlckNvbmZpZz50aGlzLmdldENvbmZpZygpO1xuXG4gICAgY29uc3Qgdm9sdW1lQ29udHJvbGxlciA9IHVpbWFuYWdlci5nZXRDb25maWcoKS52b2x1bWVDb250cm9sbGVyO1xuXG4gICAgaWYgKGNvbmZpZy5oaWRlSWZWb2x1bWVDb250cm9sUHJvaGliaXRlZCAmJiAhdGhpcy5kZXRlY3RWb2x1bWVDb250cm9sQXZhaWxhYmlsaXR5KCkpIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuXG4gICAgICAvLyBXZSBjYW4ganVzdCByZXR1cm4gZnJvbSBoZXJlLCBiZWNhdXNlIHRoZSB1c2VyIHdpbGwgbmV2ZXIgaW50ZXJhY3Qgd2l0aCB0aGUgY29udHJvbCBhbmQgYW55IGNvbmZpZ3VyZWRcbiAgICAgIC8vIGZ1bmN0aW9uYWxpdHkgd291bGQgb25seSBlYXQgcmVzb3VyY2VzIGZvciBubyByZWFzb24uXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdm9sdW1lQ29udHJvbGxlci5vbkNoYW5nZWQuc3Vic2NyaWJlKChfLCBhcmdzKSA9PiB7XG4gICAgICBpZiAoYXJncy5tdXRlZCkge1xuICAgICAgICB0aGlzLnNldFZvbHVtZUFyaWFTbGlkZXJWYWx1ZXMoMCk7XG4gICAgICAgIHRoaXMuc2V0UGxheWJhY2tQb3NpdGlvbigwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2V0UGxheWJhY2tQb3NpdGlvbihhcmdzLnZvbHVtZSk7XG4gICAgICAgIHRoaXMuc2V0Vm9sdW1lQXJpYVNsaWRlclZhbHVlcyhhcmdzLnZvbHVtZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uU2Vlay5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy52b2x1bWVUcmFuc2l0aW9uID0gdm9sdW1lQ29udHJvbGxlci5zdGFydFRyYW5zaXRpb24oKTtcbiAgICB9KTtcblxuICAgIHRoaXMub25TZWVrUHJldmlldy5zdWJzY3JpYmVSYXRlTGltaXRlZCh0aGlzLnVwZGF0ZVZvbHVtZVdoaWxlU2NydWJiaW5nLCA1MCk7XG4gICAgdGhpcy5vblNlZWtlZC5zdWJzY3JpYmUoKHNlbmRlciwgcGVyY2VudGFnZSkgPT4ge1xuICAgICAgaWYgKHRoaXMudm9sdW1lVHJhbnNpdGlvbikge1xuICAgICAgICB0aGlzLnZvbHVtZVRyYW5zaXRpb24uZmluaXNoKHBlcmNlbnRhZ2UpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gVXBkYXRlIHRoZSB2b2x1bWUgc2xpZGVyIG1hcmtlciB3aGVuIHRoZSBwbGF5ZXIgcmVzaXplZCwgYSBzb3VyY2UgaXMgbG9hZGVkLFxuICAgIC8vIG9yIHRoZSBVSSBpcyBjb25maWd1cmVkLiBDaGVjayB0aGUgc2Vla2JhciBmb3IgYSBkZXRhaWxlZCBkZXNjcmlwdGlvbi5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheWVyUmVzaXplZCwgKCkgPT4ge1xuICAgICAgdGhpcy5yZWZyZXNoUGxheWJhY2tQb3NpdGlvbigpO1xuICAgIH0pO1xuICAgIHVpbWFuYWdlci5vbkNvbmZpZ3VyZWQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMucmVmcmVzaFBsYXliYWNrUG9zaXRpb24oKTtcbiAgICB9KTtcblxuICAgIHVpbWFuYWdlci5nZXRDb25maWcoKS5ldmVudHMub25VcGRhdGVkLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLnJlZnJlc2hQbGF5YmFja1Bvc2l0aW9uKCk7XG4gICAgfSk7XG5cbiAgICB1aW1hbmFnZXIub25Db21wb25lbnRTaG93LnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLnJlZnJlc2hQbGF5YmFja1Bvc2l0aW9uKCk7XG4gICAgfSk7XG4gICAgdWltYW5hZ2VyLm9uQ29tcG9uZW50SGlkZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5yZWZyZXNoUGxheWJhY2tQb3NpdGlvbigpO1xuICAgIH0pO1xuXG4gICAgLy8gSW5pdCB2b2x1bWUgYmFyXG4gICAgdm9sdW1lQ29udHJvbGxlci5vbkNoYW5nZWRFdmVudCgpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVWb2x1bWVXaGlsZVNjcnViYmluZyA9IChzZW5kZXI6IFZvbHVtZVNsaWRlciwgYXJnczogU2Vla1ByZXZpZXdFdmVudEFyZ3MpID0+IHtcbiAgICBpZiAoYXJncy5zY3J1YmJpbmcgJiYgdGhpcy52b2x1bWVUcmFuc2l0aW9uKSB7XG4gICAgICB0aGlzLnZvbHVtZVRyYW5zaXRpb24udXBkYXRlKGFyZ3MucG9zaXRpb24pO1xuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIGRldGVjdFZvbHVtZUNvbnRyb2xBdmFpbGFiaWxpdHkoKTogYm9vbGVhbiB7XG4gICAgLypcbiAgICAgKiBcIk9uIGlPUyBkZXZpY2VzLCB0aGUgYXVkaW8gbGV2ZWwgaXMgYWx3YXlzIHVuZGVyIHRoZSB1c2Vy4oCZcyBwaHlzaWNhbCBjb250cm9sLiBUaGUgdm9sdW1lIHByb3BlcnR5IGlzIG5vdFxuICAgICAqIHNldHRhYmxlIGluIEphdmFTY3JpcHQuIFJlYWRpbmcgdGhlIHZvbHVtZSBwcm9wZXJ0eSBhbHdheXMgcmV0dXJucyAxLlwiXG4gICAgICogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvY29udGVudC9kb2N1bWVudGF0aW9uL0F1ZGlvVmlkZW8vQ29uY2VwdHVhbC9Vc2luZ19IVE1MNV9BdWRpb19WaWRlby9EZXZpY2UtU3BlY2lmaWNDb25zaWRlcmF0aW9ucy9EZXZpY2UtU3BlY2lmaWNDb25zaWRlcmF0aW9ucy5odG1sXG4gICAgICovXG4gICAgLy8gYXMgbXV0ZWQgYXV0b3BsYXkgZ2V0cyBwYXVzZWQgYXMgc29vbiBhcyB3ZSB1bm11dGUgaXQsIHdlIG1heSBub3QgdG91Y2ggdGhlIHZvbHVtZSBvZiB0aGUgYWN0dWFsIHBsYXllciBzbyB3ZVxuICAgIC8vIHByb2JlIGEgZHVtbXkgYXVkaW8gZWxlbWVudFxuICAgIGNvbnN0IGR1bW15VmlkZW9FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcbiAgICAvLyB0cnkgc2V0dGluZyB0aGUgdm9sdW1lIHRvIDAuNyBhbmQgaWYgaXQncyBzdGlsbCAxIHdlIGFyZSBvbiBhIHZvbHVtZSBjb250cm9sIHJlc3RyaWN0ZWQgZGV2aWNlXG4gICAgZHVtbXlWaWRlb0VsZW1lbnQudm9sdW1lID0gMC43O1xuICAgIHJldHVybiBkdW1teVZpZGVvRWxlbWVudC52b2x1bWUgIT09IDE7XG4gIH1cblxuICByZWxlYXNlKCk6IHZvaWQge1xuICAgIHN1cGVyLnJlbGVhc2UoKTtcblxuICAgIHRoaXMub25TZWVrUHJldmlldy51bnN1YnNjcmliZSh0aGlzLnVwZGF0ZVZvbHVtZVdoaWxlU2NydWJiaW5nKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtUb2dnbGVCdXR0b24sIFRvZ2dsZUJ1dHRvbkNvbmZpZ30gZnJvbSAnLi90b2dnbGVidXR0b24nO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBidXR0b24gdGhhdCB0b2dnbGVzIGF1ZGlvIG11dGluZy5cbiAqL1xuZXhwb3J0IGNsYXNzIFZvbHVtZVRvZ2dsZUJ1dHRvbiBleHRlbmRzIFRvZ2dsZUJ1dHRvbjxUb2dnbGVCdXR0b25Db25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFRvZ2dsZUJ1dHRvbkNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIGNvbnN0IGRlZmF1bHRDb25maWc6IFRvZ2dsZUJ1dHRvbkNvbmZpZyA9IHtcbiAgICAgIGNzc0NsYXNzOiAndWktdm9sdW1ldG9nZ2xlYnV0dG9uJyxcbiAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5hdWRpby5tdXRlJyksXG4gICAgICBvbkNsYXNzOiAnbXV0ZWQnLFxuICAgICAgb2ZmQ2xhc3M6ICd1bm11dGVkJyxcbiAgICAgIGFyaWFMYWJlbDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLmF1ZGlvLm11dGUnKSxcbiAgICB9O1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywgZGVmYXVsdENvbmZpZywgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGNvbnN0IHZvbHVtZUNvbnRyb2xsZXIgPSB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkudm9sdW1lQ29udHJvbGxlcjtcblxuICAgIHZvbHVtZUNvbnRyb2xsZXIub25DaGFuZ2VkLnN1YnNjcmliZSgoXywgYXJncykgPT4ge1xuICAgICAgaWYgKGFyZ3MubXV0ZWQpIHtcbiAgICAgICAgdGhpcy5vbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vZmYoKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgdm9sdW1lTGV2ZWxUZW5zID0gTWF0aC5jZWlsKGFyZ3Mudm9sdW1lIC8gMTApO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuZGF0YSh0aGlzLnByZWZpeENzcygndm9sdW1lLWxldmVsLXRlbnMnKSwgU3RyaW5nKHZvbHVtZUxldmVsVGVucykpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB2b2x1bWVDb250cm9sbGVyLnRvZ2dsZU11dGVkKCk7XG4gICAgfSk7XG5cbiAgICAvLyBTdGFydHVwIGluaXRcbiAgICB2b2x1bWVDb250cm9sbGVyLm9uQ2hhbmdlZEV2ZW50KCk7XG4gIH1cbn0iLCJpbXBvcnQge1RvZ2dsZUJ1dHRvbiwgVG9nZ2xlQnV0dG9uQ29uZmlnfSBmcm9tICcuL3RvZ2dsZWJ1dHRvbic7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJLCBQbGF5ZXJFdmVudEJhc2UsIFdhcm5pbmdFdmVudCB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEEgYnV0dG9uIHRoYXQgdG9nZ2xlcyB0aGUgdmlkZW8gdmlldyBiZXR3ZWVuIG5vcm1hbC9tb25vIGFuZCBWUi9zdGVyZW8uXG4gKi9cbmV4cG9ydCBjbGFzcyBWUlRvZ2dsZUJ1dHRvbiBleHRlbmRzIFRvZ2dsZUJ1dHRvbjxUb2dnbGVCdXR0b25Db25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFRvZ2dsZUJ1dHRvbkNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktdnJ0b2dnbGVidXR0b24nLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3ZyJyksXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBpc1ZSQ29uZmlndXJlZCA9ICgpID0+IHtcbiAgICAgIC8vIFZSIGF2YWlsYWJpbGl0eSBjYW5ub3QgYmUgY2hlY2tlZCB0aHJvdWdoIGdldFZSU3RhdHVzKCkgYmVjYXVzZSBpdCBpcyBhc3luY2hyb25vdXNseSBwb3B1bGF0ZWQgYW5kIG5vdFxuICAgICAgLy8gYXZhaWxhYmxlIGF0IFVJIGluaXRpYWxpemF0aW9uLiBBcyBhbiBhbHRlcm5hdGl2ZSwgd2UgY2hlY2sgdGhlIFZSIHNldHRpbmdzIGluIHRoZSBjb25maWcuXG4gICAgICAvLyBUT0RPIHVzZSBnZXRWUlN0YXR1cygpIHRocm91Z2ggaXNWUlN0ZXJlb0F2YWlsYWJsZSgpIG9uY2UgdGhlIHBsYXllciBoYXMgYmVlbiByZXdyaXR0ZW4gYW5kIHRoZSBzdGF0dXMgaXNcbiAgICAgIC8vIGF2YWlsYWJsZSBpbiBSZWFkeVxuICAgICAgY29uc3Qgc291cmNlID0gcGxheWVyLmdldFNvdXJjZSgpO1xuICAgICAgcmV0dXJuIHNvdXJjZSAmJiBCb29sZWFuKHNvdXJjZS52cik7XG4gICAgfTtcblxuICAgIGxldCBpc1ZSU3RlcmVvQXZhaWxhYmxlID0gKCkgPT4ge1xuICAgICAgY29uc3Qgc291cmNlID0gcGxheWVyLmdldFNvdXJjZSgpO1xuICAgICAgcmV0dXJuIHBsYXllci52ciAmJiBCb29sZWFuKHNvdXJjZS52cik7XG4gICAgfTtcblxuICAgIGxldCB2clN0YXRlSGFuZGxlciA9IChldjogUGxheWVyRXZlbnRCYXNlKSA9PiB7XG4gICAgICBpZiAoZXYudHlwZSA9PT0gcGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuV2FybmluZ1xuICAgICAgICAmJiAoZXYgYXMgV2FybmluZ0V2ZW50KS5jb2RlICE9PSBwbGF5ZXIuZXhwb3J0cy5XYXJuaW5nQ29kZS5WUl9SRU5ERVJJTkdfRVJST1IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNWUkNvbmZpZ3VyZWQoKSAmJiBpc1ZSU3RlcmVvQXZhaWxhYmxlKCkpIHtcbiAgICAgICAgdGhpcy5zaG93KCk7IC8vIHNob3cgYnV0dG9uIGluIGNhc2UgaXQgaXMgaGlkZGVuXG5cbiAgICAgICAgaWYgKHBsYXllci52ciAmJiBwbGF5ZXIudnIuZ2V0U3RlcmVvKCkpIHtcbiAgICAgICAgICB0aGlzLm9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5vZmYoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5oaWRlKCk7IC8vIGhpZGUgYnV0dG9uIGlmIG5vIHN0ZXJlbyBtb2RlIGF2YWlsYWJsZVxuICAgICAgfVxuICAgIH07XG5cbiAgICBsZXQgdnJCdXR0b25WaXNpYmlsaXR5SGFuZGxlciA9ICgpID0+IHtcbiAgICAgIGlmIChpc1ZSQ29uZmlndXJlZCgpKSB7XG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5WUlN0ZXJlb0NoYW5nZWQsIHZyU3RhdGVIYW5kbGVyKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuV2FybmluZywgdnJTdGF0ZUhhbmRsZXIpO1xuICAgIC8vIEhpZGUgYnV0dG9uIHdoZW4gVlIgc291cmNlIGdvZXMgYXdheVxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VVbmxvYWRlZCwgdnJCdXR0b25WaXNpYmlsaXR5SGFuZGxlcik7XG4gICAgdWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKHZyQnV0dG9uVmlzaWJpbGl0eUhhbmRsZXIpO1xuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBpZiAoIWlzVlJTdGVyZW9BdmFpbGFibGUoKSkge1xuICAgICAgICBpZiAoY29uc29sZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdObyBWUiBjb250ZW50Jyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwbGF5ZXIudnIgJiYgcGxheWVyLnZyLmdldFN0ZXJlbygpKSB7XG4gICAgICAgICAgcGxheWVyLnZyLnNldFN0ZXJlbyhmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGxheWVyLnZyLnNldFN0ZXJlbyh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gU2V0IHN0YXJ0dXAgdmlzaWJpbGl0eVxuICAgIHZyQnV0dG9uVmlzaWJpbGl0eUhhbmRsZXIoKTtcbiAgfVxufSIsImltcG9ydCB7Q2xpY2tPdmVybGF5LCBDbGlja092ZXJsYXlDb25maWd9IGZyb20gJy4vY2xpY2tvdmVybGF5JztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIGEge0BsaW5rIENsaWNrT3ZlcmxheX0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgV2F0ZXJtYXJrQ29uZmlnIGV4dGVuZHMgQ2xpY2tPdmVybGF5Q29uZmlnIHtcbiAgLy8gbm90aGluZyB5ZXRcbn1cblxuLyoqXG4gKiBBIHdhdGVybWFyayBvdmVybGF5IHdpdGggYSBjbGlja2FibGUgbG9nby5cbiAqL1xuZXhwb3J0IGNsYXNzIFdhdGVybWFyayBleHRlbmRzIENsaWNrT3ZlcmxheSB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBXYXRlcm1hcmtDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXdhdGVybWFyaycsXG4gICAgICB1cmw6ICdodHRwOi8vYml0bW92aW4uY29tJyxcbiAgICAgIHJvbGU6ICdsaW5rJyxcbiAgICAgIHRleHQ6ICdsb2dvJyxcbiAgICAgIGFyaWFMYWJlbDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3dhdGVybWFya0xpbmsnKSxcbiAgICB9LCA8V2F0ZXJtYXJrQ29uZmlnPnRoaXMuY29uZmlnKTtcbiAgfVxufSIsImltcG9ydCB7VlJUb2dnbGVCdXR0b259IGZyb20gJy4vY29tcG9uZW50cy92cnRvZ2dsZWJ1dHRvbic7XG5pbXBvcnQge1NldHRpbmdzVG9nZ2xlQnV0dG9ufSBmcm9tICcuL2NvbXBvbmVudHMvc2V0dGluZ3N0b2dnbGVidXR0b24nO1xuaW1wb3J0IHtWb2x1bWVTbGlkZXJ9IGZyb20gJy4vY29tcG9uZW50cy92b2x1bWVzbGlkZXInO1xuaW1wb3J0IHtQbGF5YmFja1RpbWVMYWJlbCwgUGxheWJhY2tUaW1lTGFiZWxNb2RlfSBmcm9tICcuL2NvbXBvbmVudHMvcGxheWJhY2t0aW1lbGFiZWwnO1xuaW1wb3J0IHtBaXJQbGF5VG9nZ2xlQnV0dG9ufSBmcm9tICcuL2NvbXBvbmVudHMvYWlycGxheXRvZ2dsZWJ1dHRvbic7XG5pbXBvcnQge0Vycm9yTWVzc2FnZU92ZXJsYXl9IGZyb20gJy4vY29tcG9uZW50cy9lcnJvcm1lc3NhZ2VvdmVybGF5JztcbmltcG9ydCB7Q29udHJvbEJhcn0gZnJvbSAnLi9jb21wb25lbnRzL2NvbnRyb2xiYXInO1xuaW1wb3J0IHtDYXN0VG9nZ2xlQnV0dG9ufSBmcm9tICcuL2NvbXBvbmVudHMvY2FzdHRvZ2dsZWJ1dHRvbic7XG5pbXBvcnQge0Z1bGxzY3JlZW5Ub2dnbGVCdXR0b259IGZyb20gJy4vY29tcG9uZW50cy9mdWxsc2NyZWVudG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7UmVjb21tZW5kYXRpb25PdmVybGF5fSBmcm9tICcuL2NvbXBvbmVudHMvcmVjb21tZW5kYXRpb25vdmVybGF5JztcbmltcG9ydCB7UGxheWJhY2tTcGVlZFNlbGVjdEJveH0gZnJvbSAnLi9jb21wb25lbnRzL3BsYXliYWNrc3BlZWRzZWxlY3Rib3gnO1xuaW1wb3J0IHtBdWRpb1F1YWxpdHlTZWxlY3RCb3h9IGZyb20gJy4vY29tcG9uZW50cy9hdWRpb3F1YWxpdHlzZWxlY3Rib3gnO1xuaW1wb3J0IHtDYXN0U3RhdHVzT3ZlcmxheX0gZnJvbSAnLi9jb21wb25lbnRzL2Nhc3RzdGF0dXNvdmVybGF5JztcbmltcG9ydCB7VUlDb250YWluZXJ9IGZyb20gJy4vY29tcG9uZW50cy91aWNvbnRhaW5lcic7XG5pbXBvcnQge1dhdGVybWFya30gZnJvbSAnLi9jb21wb25lbnRzL3dhdGVybWFyayc7XG5pbXBvcnQge1N1YnRpdGxlT3ZlcmxheX0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlb3ZlcmxheSc7XG5pbXBvcnQge1NldHRpbmdzUGFuZWx9IGZyb20gJy4vY29tcG9uZW50cy9zZXR0aW5nc3BhbmVsJztcbmltcG9ydCB7U2Vla0JhckxhYmVsfSBmcm9tICcuL2NvbXBvbmVudHMvc2Vla2JhcmxhYmVsJztcbmltcG9ydCB7UGxheWJhY2tUb2dnbGVPdmVybGF5fSBmcm9tICcuL2NvbXBvbmVudHMvcGxheWJhY2t0b2dnbGVvdmVybGF5JztcbmltcG9ydCB7UGljdHVyZUluUGljdHVyZVRvZ2dsZUJ1dHRvbn0gZnJvbSAnLi9jb21wb25lbnRzL3BpY3R1cmVpbnBpY3R1cmV0b2dnbGVidXR0b24nO1xuaW1wb3J0IHtTcGFjZXJ9IGZyb20gJy4vY29tcG9uZW50cy9zcGFjZXInO1xuaW1wb3J0IHtDb250YWluZXJ9IGZyb20gJy4vY29tcG9uZW50cy9jb250YWluZXInO1xuaW1wb3J0IHtWb2x1bWVUb2dnbGVCdXR0b259IGZyb20gJy4vY29tcG9uZW50cy92b2x1bWV0b2dnbGVidXR0b24nO1xuaW1wb3J0IHtQbGF5YmFja1RvZ2dsZUJ1dHRvbn0gZnJvbSAnLi9jb21wb25lbnRzL3BsYXliYWNrdG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7U2Vla0Jhcn0gZnJvbSAnLi9jb21wb25lbnRzL3NlZWtiYXInO1xuaW1wb3J0IHtWaWRlb1F1YWxpdHlTZWxlY3RCb3h9IGZyb20gJy4vY29tcG9uZW50cy92aWRlb3F1YWxpdHlzZWxlY3Rib3gnO1xuaW1wb3J0IHtVSUNvbmRpdGlvbkNvbnRleHQsIFVJTWFuYWdlcn0gZnJvbSAnLi91aW1hbmFnZXInO1xuaW1wb3J0IHtUaXRsZUJhcn0gZnJvbSAnLi9jb21wb25lbnRzL3RpdGxlYmFyJztcbmltcG9ydCB7QnVmZmVyaW5nT3ZlcmxheX0gZnJvbSAnLi9jb21wb25lbnRzL2J1ZmZlcmluZ292ZXJsYXknO1xuaW1wb3J0IHtTdWJ0aXRsZUxpc3RCb3h9IGZyb20gJy4vY29tcG9uZW50cy9zdWJ0aXRsZWxpc3Rib3gnO1xuaW1wb3J0IHtBdWRpb1RyYWNrTGlzdEJveH0gZnJvbSAnLi9jb21wb25lbnRzL2F1ZGlvdHJhY2tsaXN0Ym94JztcbmltcG9ydCB7U2V0dGluZ3NQYW5lbEl0ZW19IGZyb20gJy4vY29tcG9uZW50cy9zZXR0aW5nc3BhbmVsaXRlbSc7XG5pbXBvcnQge1NldHRpbmdzUGFuZWxQYWdlfSBmcm9tICcuL2NvbXBvbmVudHMvc2V0dGluZ3NwYW5lbHBhZ2UnO1xuaW1wb3J0IHsgVUlGYWN0b3J5IH0gZnJvbSAnLi91aWZhY3RvcnknO1xuaW1wb3J0IHsgVUlDb25maWcgfSBmcm9tICcuL3VpY29uZmlnJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5cbmV4cG9ydCBuYW1lc3BhY2UgRGVtb0ZhY3Rvcnkge1xuXG4gIGV4cG9ydCBmdW5jdGlvbiBidWlsZERlbW9XaXRoU2VwYXJhdGVBdWRpb1N1YnRpdGxlc0J1dHRvbnMocGxheWVyOiBQbGF5ZXJBUEksIGNvbmZpZzogVUlDb25maWcgPSB7fSk6IFVJTWFuYWdlciB7XG4gICAgLy8gc2hvdyBzbWFsbFNjcmVlbiBVSSBvbmx5IG9uIG1vYmlsZS9oYW5kaGVsZCBkZXZpY2VzXG4gICAgbGV0IHNtYWxsU2NyZWVuU3dpdGNoV2lkdGggPSA2MDA7XG5cbiAgICByZXR1cm4gbmV3IFVJTWFuYWdlcihwbGF5ZXIsIFt7XG4gICAgICB1aTogVUlGYWN0b3J5Lm1vZGVyblNtYWxsU2NyZWVuQWRzVUkoKSxcbiAgICAgIGNvbmRpdGlvbjogKGNvbnRleHQ6IFVJQ29uZGl0aW9uQ29udGV4dCkgPT4ge1xuICAgICAgICByZXR1cm4gY29udGV4dC5pc01vYmlsZSAmJiBjb250ZXh0LmRvY3VtZW50V2lkdGggPCBzbWFsbFNjcmVlblN3aXRjaFdpZHRoXG4gICAgICAgICAgJiYgY29udGV4dC5pc0FkICYmIGNvbnRleHQuYWRSZXF1aXJlc1VpO1xuICAgICAgfSxcbiAgICB9LCB7XG4gICAgICB1aTogVUlGYWN0b3J5Lm1vZGVybkFkc1VJKCksXG4gICAgICBjb25kaXRpb246IChjb250ZXh0OiBVSUNvbmRpdGlvbkNvbnRleHQpID0+IHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQuaXNBZCAmJiBjb250ZXh0LmFkUmVxdWlyZXNVaTtcbiAgICAgIH0sXG4gICAgfSwge1xuICAgICAgdWk6IFVJRmFjdG9yeS5tb2Rlcm5TbWFsbFNjcmVlblVJKCksXG4gICAgICBjb25kaXRpb246IChjb250ZXh0OiBVSUNvbmRpdGlvbkNvbnRleHQpID0+IHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQuaXNNb2JpbGUgJiYgY29udGV4dC5kb2N1bWVudFdpZHRoIDwgc21hbGxTY3JlZW5Td2l0Y2hXaWR0aDtcbiAgICAgIH0sXG4gICAgfSwge1xuICAgICAgdWk6IG1vZGVyblVJV2l0aFNlcGFyYXRlQXVkaW9TdWJ0aXRsZXNCdXR0b25zKCksXG4gICAgfV0sIGNvbmZpZyk7XG4gIH1cblxuICBmdW5jdGlvbiBtb2Rlcm5VSVdpdGhTZXBhcmF0ZUF1ZGlvU3VidGl0bGVzQnV0dG9ucygpIHtcbiAgICBsZXQgc3VidGl0bGVPdmVybGF5ID0gbmV3IFN1YnRpdGxlT3ZlcmxheSgpO1xuXG4gICAgbGV0IHNldHRpbmdzUGFuZWwgPSBuZXcgU2V0dGluZ3NQYW5lbCh7XG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsUGFnZSh7XG4gICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKCdWaWRlbyBRdWFsaXR5JywgbmV3IFZpZGVvUXVhbGl0eVNlbGVjdEJveCgpKSxcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbSgnU3BlZWQnLCBuZXcgUGxheWJhY2tTcGVlZFNlbGVjdEJveCgpKSxcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbSgnQXVkaW8gUXVhbGl0eScsIG5ldyBBdWRpb1F1YWxpdHlTZWxlY3RCb3goKSksXG4gICAgICAgICAgXSxcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgICAgaGlkZGVuOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgbGV0IHN1YnRpdGxlTGlzdEJveCA9IG5ldyBTdWJ0aXRsZUxpc3RCb3goKTtcbiAgICBsZXQgc3VidGl0bGVTZXR0aW5nc1BhbmVsID0gbmV3IFNldHRpbmdzUGFuZWwoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbFBhZ2Uoe1xuICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbShudWxsLCBzdWJ0aXRsZUxpc3RCb3gpLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICAgIGhpZGRlbjogdHJ1ZSxcbiAgICB9KTtcblxuICAgIGxldCBhdWRpb1RyYWNrTGlzdEJveCA9IG5ldyBBdWRpb1RyYWNrTGlzdEJveCgpO1xuICAgIGxldCBhdWRpb1RyYWNrU2V0dGluZ3NQYW5lbCA9IG5ldyBTZXR0aW5nc1BhbmVsKHtcbiAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxQYWdlKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0obnVsbCwgYXVkaW9UcmFja0xpc3RCb3gpLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICAgIGhpZGRlbjogdHJ1ZSxcbiAgICB9KTtcblxuICAgIGxldCBjb250cm9sQmFyID0gbmV3IENvbnRyb2xCYXIoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBhdWRpb1RyYWNrU2V0dGluZ3NQYW5lbCxcbiAgICAgICAgc3VidGl0bGVTZXR0aW5nc1BhbmVsLFxuICAgICAgICBzZXR0aW5nc1BhbmVsLFxuICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICBuZXcgUGxheWJhY2tUaW1lTGFiZWwoeyB0aW1lTGFiZWxNb2RlOiBQbGF5YmFja1RpbWVMYWJlbE1vZGUuQ3VycmVudFRpbWUsIGhpZGVJbkxpdmVQbGF5YmFjazogdHJ1ZSB9KSxcbiAgICAgICAgICAgIG5ldyBTZWVrQmFyKHsgbGFiZWw6IG5ldyBTZWVrQmFyTGFiZWwoKSB9KSxcbiAgICAgICAgICAgIG5ldyBQbGF5YmFja1RpbWVMYWJlbCh7IHRpbWVMYWJlbE1vZGU6IFBsYXliYWNrVGltZUxhYmVsTW9kZS5Ub3RhbFRpbWUsIGNzc0NsYXNzZXM6IFsndGV4dC1yaWdodCddIH0pLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgY3NzQ2xhc3NlczogWydjb250cm9sYmFyLXRvcCddLFxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgbmV3IFBsYXliYWNrVG9nZ2xlQnV0dG9uKCksXG4gICAgICAgICAgICBuZXcgVm9sdW1lVG9nZ2xlQnV0dG9uKCksXG4gICAgICAgICAgICBuZXcgVm9sdW1lU2xpZGVyKCksXG4gICAgICAgICAgICBuZXcgU3BhY2VyKCksXG4gICAgICAgICAgICBuZXcgUGljdHVyZUluUGljdHVyZVRvZ2dsZUJ1dHRvbigpLFxuICAgICAgICAgICAgbmV3IEFpclBsYXlUb2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgIG5ldyBDYXN0VG9nZ2xlQnV0dG9uKCksXG4gICAgICAgICAgICBuZXcgVlJUb2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nc1RvZ2dsZUJ1dHRvbih7XG4gICAgICAgICAgICAgIHNldHRpbmdzUGFuZWw6IGF1ZGlvVHJhY2tTZXR0aW5nc1BhbmVsLFxuICAgICAgICAgICAgICBjc3NDbGFzczogJ3VpLWF1ZGlvdHJhY2tzZXR0aW5nc3RvZ2dsZWJ1dHRvbicsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nc1RvZ2dsZUJ1dHRvbih7XG4gICAgICAgICAgICAgIHNldHRpbmdzUGFuZWw6IHN1YnRpdGxlU2V0dGluZ3NQYW5lbCxcbiAgICAgICAgICAgICAgY3NzQ2xhc3M6ICd1aS1zdWJ0aXRsZXNldHRpbmdzdG9nZ2xlYnV0dG9uJyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IFNldHRpbmdzVG9nZ2xlQnV0dG9uKHsgc2V0dGluZ3NQYW5lbDogc2V0dGluZ3NQYW5lbCB9KSxcbiAgICAgICAgICAgIG5ldyBGdWxsc2NyZWVuVG9nZ2xlQnV0dG9uKCksXG4gICAgICAgICAgXSxcbiAgICAgICAgICBjc3NDbGFzc2VzOiBbJ2NvbnRyb2xiYXItYm90dG9tJ10sXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIHJldHVybiBuZXcgVUlDb250YWluZXIoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBzdWJ0aXRsZU92ZXJsYXksXG4gICAgICAgIG5ldyBCdWZmZXJpbmdPdmVybGF5KCksXG4gICAgICAgIG5ldyBQbGF5YmFja1RvZ2dsZU92ZXJsYXkoKSxcbiAgICAgICAgbmV3IENhc3RTdGF0dXNPdmVybGF5KCksXG4gICAgICAgIGNvbnRyb2xCYXIsXG4gICAgICAgIG5ldyBUaXRsZUJhcigpLFxuICAgICAgICBuZXcgUmVjb21tZW5kYXRpb25PdmVybGF5KCksXG4gICAgICAgIG5ldyBXYXRlcm1hcmsoKSxcbiAgICAgICAgbmV3IEVycm9yTWVzc2FnZU92ZXJsYXkoKSxcbiAgICAgIF0sXG4gICAgfSk7XG4gIH1cbn0iLCJleHBvcnQgaW50ZXJmYWNlIE9mZnNldCB7XG4gIGxlZnQ6IG51bWJlcjtcbiAgdG9wOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2l6ZSB7XG4gIHdpZHRoOiBudW1iZXI7XG4gIGhlaWdodDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENzc1Byb3BlcnRpZXMge1xuICBbcHJvcGVydHlOYW1lOiBzdHJpbmddOiBzdHJpbmc7XG59XG5cbi8qKlxuICogU2ltcGxlIERPTSBtYW5pcHVsYXRpb24gYW5kIERPTSBlbGVtZW50IGV2ZW50IGhhbmRsaW5nIG1vZGVsZWQgYWZ0ZXIgalF1ZXJ5IChhcyByZXBsYWNlbWVudCBmb3IgalF1ZXJ5KS5cbiAqXG4gKiBMaWtlIGpRdWVyeSwgRE9NIG9wZXJhdGVzIG9uIHNpbmdsZSBlbGVtZW50cyBhbmQgbGlzdHMgb2YgZWxlbWVudHMuIEZvciBleGFtcGxlOiBjcmVhdGluZyBhbiBlbGVtZW50IHJldHVybnMgYSBET01cbiAqIGluc3RhbmNlIHdpdGggYSBzaW5nbGUgZWxlbWVudCwgc2VsZWN0aW5nIGVsZW1lbnRzIHJldHVybnMgYSBET00gaW5zdGFuY2Ugd2l0aCB6ZXJvLCBvbmUsIG9yIG1hbnkgZWxlbWVudHMuIFNpbWlsYXJcbiAqIHRvIGpRdWVyeSwgc2V0dGVycyB1c3VhbGx5IGFmZmVjdCBhbGwgZWxlbWVudHMsIHdoaWxlIGdldHRlcnMgb3BlcmF0ZSBvbiBvbmx5IHRoZSBmaXJzdCBlbGVtZW50LlxuICogQWxzbyBzaW1pbGFyIHRvIGpRdWVyeSwgbW9zdCBtZXRob2RzIChleGNlcHQgZ2V0dGVycykgcmV0dXJuIHRoZSBET00gaW5zdGFuY2UgZmFjaWxpdGF0aW5nIGVhc3kgY2hhaW5pbmcgb2YgbWV0aG9kXG4gKiBjYWxscy5cbiAqXG4gKiBCdWlsdCB3aXRoIHRoZSBoZWxwIG9mOiBodHRwOi8veW91bWlnaHRub3RuZWVkanF1ZXJ5LmNvbS9cbiAqL1xuZXhwb3J0IGNsYXNzIERPTSB7XG5cbiAgcHJpdmF0ZSBkb2N1bWVudDogRG9jdW1lbnQ7XG5cbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIGVsZW1lbnRzIHRoYXQgdGhlIGluc3RhbmNlIHdyYXBzLiBUYWtlIGNhcmUgdGhhdCBub3QgYWxsIG1ldGhvZHMgY2FuIG9wZXJhdGUgb24gdGhlIHdob2xlIGxpc3QsXG4gICAqIGdldHRlcnMgdXN1YWxseSBqdXN0IHdvcmsgb24gdGhlIGZpcnN0IGVsZW1lbnQuXG4gICAqL1xuICBwcml2YXRlIGVsZW1lbnRzOiBIVE1MRWxlbWVudFtdO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgRE9NIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB0YWdOYW1lIHRoZSB0YWcgbmFtZSBvZiB0aGUgRE9NIGVsZW1lbnRcbiAgICogQHBhcmFtIGF0dHJpYnV0ZXMgYSBsaXN0IG9mIGF0dHJpYnV0ZXMgb2YgdGhlIGVsZW1lbnRcbiAgICovXG4gIGNvbnN0cnVjdG9yKHRhZ05hbWU6IHN0cmluZywgYXR0cmlidXRlczoge1tuYW1lOiBzdHJpbmddOiBzdHJpbmd9KTtcbiAgLyoqXG4gICAqIFNlbGVjdHMgYWxsIGVsZW1lbnRzIGZyb20gdGhlIERPTSB0aGF0IG1hdGNoIHRoZSBzcGVjaWZpZWQgc2VsZWN0b3IuXG4gICAqIEBwYXJhbSBzZWxlY3RvciB0aGUgc2VsZWN0b3IgdG8gbWF0Y2ggRE9NIGVsZW1lbnRzIHdpdGhcbiAgICovXG4gIGNvbnN0cnVjdG9yKHNlbGVjdG9yOiBzdHJpbmcpO1xuICAvKipcbiAgICogV3JhcHMgYSBwbGFpbiBIVE1MRWxlbWVudCB3aXRoIGEgRE9NIGluc3RhbmNlLlxuICAgKiBAcGFyYW0gZWxlbWVudCB0aGUgSFRNTEVsZW1lbnQgdG8gd3JhcCB3aXRoIERPTVxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudDogSFRNTEVsZW1lbnQpO1xuICAvKipcbiAgICogV3JhcHMgYSBsaXN0IG9mIHBsYWluIEhUTUxFbGVtZW50cyB3aXRoIGEgRE9NIGluc3RhbmNlLlxuICAgKiBAcGFyYW0gZWxlbWVudHMgdGhlIEhUTUxFbGVtZW50cyB0byB3cmFwIHdpdGggRE9NXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50czogSFRNTEVsZW1lbnRbXSk7XG4gIC8qKlxuICAgKiBXcmFwcyB0aGUgZG9jdW1lbnQgd2l0aCBhIERPTSBpbnN0YW5jZS4gVXNlZnVsIHRvIGF0dGFjaCBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIGRvY3VtZW50LlxuICAgKiBAcGFyYW0gZG9jdW1lbnQgdGhlIGRvY3VtZW50IHRvIHdyYXBcbiAgICovXG4gIGNvbnN0cnVjdG9yKGRvY3VtZW50OiBEb2N1bWVudCk7XG4gIGNvbnN0cnVjdG9yKHNvbWV0aGluZzogc3RyaW5nIHwgSFRNTEVsZW1lbnQgfCBIVE1MRWxlbWVudFtdIHwgRG9jdW1lbnQsIGF0dHJpYnV0ZXM/OiB7W25hbWU6IHN0cmluZ106IHN0cmluZ30pIHtcbiAgICB0aGlzLmRvY3VtZW50ID0gZG9jdW1lbnQ7IC8vIFNldCB0aGUgZ2xvYmFsIGRvY3VtZW50IHRvIHRoZSBsb2NhbCBkb2N1bWVudCBmaWVsZFxuXG4gICAgaWYgKHNvbWV0aGluZyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBpZiAoc29tZXRoaW5nLmxlbmd0aCA+IDAgJiYgc29tZXRoaW5nWzBdIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgbGV0IGVsZW1lbnRzID0gc29tZXRoaW5nO1xuICAgICAgICB0aGlzLmVsZW1lbnRzID0gZWxlbWVudHM7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHNvbWV0aGluZyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICBsZXQgZWxlbWVudCA9IHNvbWV0aGluZztcbiAgICAgIHRoaXMuZWxlbWVudHMgPSBbZWxlbWVudF07XG4gICAgfVxuICAgIGVsc2UgaWYgKHNvbWV0aGluZyBpbnN0YW5jZW9mIERvY3VtZW50KSB7XG4gICAgICAvLyBXaGVuIGEgZG9jdW1lbnQgaXMgcGFzc2VkIGluLCB3ZSBkbyBub3QgZG8gYW55dGhpbmcgd2l0aCBpdCwgYnV0IGJ5IHNldHRpbmcgdGhpcy5lbGVtZW50cyB0byBudWxsXG4gICAgICAvLyB3ZSBnaXZlIHRoZSBldmVudCBoYW5kbGluZyBtZXRob2QgYSBtZWFucyB0byBkZXRlY3QgaWYgdGhlIGV2ZW50cyBzaG91bGQgYmUgcmVnaXN0ZXJlZCBvbiB0aGUgZG9jdW1lbnRcbiAgICAgIC8vIGluc3RlYWQgb2YgZWxlbWVudHMuXG4gICAgICB0aGlzLmVsZW1lbnRzID0gbnVsbDtcbiAgICB9XG4gICAgZWxzZSBpZiAoYXR0cmlidXRlcykge1xuICAgICAgbGV0IHRhZ05hbWUgPSBzb21ldGhpbmc7XG4gICAgICBsZXQgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG5cbiAgICAgIGZvciAobGV0IGF0dHJpYnV0ZU5hbWUgaW4gYXR0cmlidXRlcykge1xuICAgICAgICBsZXQgYXR0cmlidXRlVmFsdWUgPSBhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdO1xuICAgICAgICBpZiAoYXR0cmlidXRlVmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmVsZW1lbnRzID0gW2VsZW1lbnRdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGxldCBzZWxlY3RvciA9IHNvbWV0aGluZztcbiAgICAgIHRoaXMuZWxlbWVudHMgPSB0aGlzLmZpbmRDaGlsZEVsZW1lbnRzKHNlbGVjdG9yKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRoYXQgdGhpcyBET00gaW5zdGFuY2UgY3VycmVudGx5IGhvbGRzLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzXG4gICAqL1xuICBnZXQgbGVuZ3RoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHMgPyB0aGlzLmVsZW1lbnRzLmxlbmd0aCA6IDA7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgSFRNTCBlbGVtZW50cyB0aGF0IHRoaXMgRE9NIGluc3RhbmNlIGN1cnJlbnRseSBob2xkcy5cbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50W119IHRoZSByYXcgSFRNTCBlbGVtZW50c1xuICAgKi9cbiAgZ2V0KCk6IEhUTUxFbGVtZW50W107XG4gIC8qKlxuICAgKiBHZXRzIGFuIEhUTUwgZWxlbWVudCBmcm9tIHRoZSBsaXN0IGVsZW1lbnRzIHRoYXQgdGhpcyBET00gaW5zdGFuY2UgY3VycmVudGx5IGhvbGRzLlxuICAgKiBAcGFyYW0gaW5kZXggVGhlIHplcm8tYmFzZWQgaW5kZXggaW50byB0aGUgZWxlbWVudCBsaXN0LiBDYW4gYmUgbmVnYXRpdmUgdG8gcmV0dXJuIGFuIGVsZW1lbnQgZnJvbSB0aGUgZW5kLFxuICAgKiAgICBlLmcuIC0xIHJldHVybnMgdGhlIGxhc3QgZWxlbWVudC5cbiAgICovXG4gIGdldChpbmRleDogbnVtYmVyKTogSFRNTEVsZW1lbnQ7XG4gIGdldChpbmRleD86IG51bWJlcik6IEhUTUxFbGVtZW50IHwgSFRNTEVsZW1lbnRbXSB7XG4gICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRzO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMuZWxlbWVudHMgfHwgaW5kZXggPj0gdGhpcy5lbGVtZW50cy5sZW5ndGggfHwgaW5kZXggPCAtdGhpcy5lbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIGlmIChpbmRleCA8IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRzW3RoaXMuZWxlbWVudHMubGVuZ3RoIC0gaW5kZXhdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50c1tpbmRleF07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEEgc2hvcnRjdXQgbWV0aG9kIGZvciBpdGVyYXRpbmcgYWxsIGVsZW1lbnRzLiBTaG9ydHMgdGhpcy5lbGVtZW50cy5mb3JFYWNoKC4uLikgdG8gdGhpcy5mb3JFYWNoKC4uLikuXG4gICAqIEBwYXJhbSBoYW5kbGVyIHRoZSBoYW5kbGVyIHRvIGV4ZWN1dGUgYW4gb3BlcmF0aW9uIG9uIGFuIGVsZW1lbnRcbiAgICovXG4gIHByaXZhdGUgZm9yRWFjaChoYW5kbGVyOiAoZWxlbWVudDogSFRNTEVsZW1lbnQpID0+IHZvaWQpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuZWxlbWVudHMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICBoYW5kbGVyKGVsZW1lbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBmaW5kQ2hpbGRFbGVtZW50c09mRWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCB8IERvY3VtZW50LCBzZWxlY3Rvcjogc3RyaW5nKTogSFRNTEVsZW1lbnRbXSB7XG4gICAgbGV0IGNoaWxkRWxlbWVudHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXG4gICAgLy8gQ29udmVydCBOb2RlTGlzdCB0byBBcnJheVxuICAgIC8vIGh0dHBzOi8vdG9kZG1vdHRvLmNvbS9hLWNvbXByZWhlbnNpdmUtZGl2ZS1pbnRvLW5vZGVsaXN0cy1hcnJheXMtY29udmVydGluZy1ub2RlbGlzdHMtYW5kLXVuZGVyc3RhbmRpbmctdGhlLWRvbS9cbiAgICByZXR1cm4gW10uc2xpY2UuY2FsbChjaGlsZEVsZW1lbnRzKTtcbiAgfVxuXG4gIHByaXZhdGUgZmluZENoaWxkRWxlbWVudHMoc2VsZWN0b3I6IHN0cmluZyk6IEhUTUxFbGVtZW50W10ge1xuICAgIGxldCBhbGxDaGlsZEVsZW1lbnRzID0gPEhUTUxFbGVtZW50W10+W107XG5cbiAgICBpZiAodGhpcy5lbGVtZW50cykge1xuICAgICAgdGhpcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgIGFsbENoaWxkRWxlbWVudHMgPSBhbGxDaGlsZEVsZW1lbnRzLmNvbmNhdCh0aGlzLmZpbmRDaGlsZEVsZW1lbnRzT2ZFbGVtZW50KGVsZW1lbnQsIHNlbGVjdG9yKSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5maW5kQ2hpbGRFbGVtZW50c09mRWxlbWVudChkb2N1bWVudCwgc2VsZWN0b3IpO1xuICAgIH1cblxuICAgIHJldHVybiBhbGxDaGlsZEVsZW1lbnRzO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmRzIGFsbCBjaGlsZCBlbGVtZW50cyBvZiBhbGwgZWxlbWVudHMgbWF0Y2hpbmcgdGhlIHN1cHBsaWVkIHNlbGVjdG9yLlxuICAgKiBAcGFyYW0gc2VsZWN0b3IgdGhlIHNlbGVjdG9yIHRvIG1hdGNoIHdpdGggY2hpbGQgZWxlbWVudHNcbiAgICogQHJldHVybnMge0RPTX0gYSBuZXcgRE9NIGluc3RhbmNlIHJlcHJlc2VudGluZyBhbGwgbWF0Y2hlZCBjaGlsZHJlblxuICAgKi9cbiAgZmluZChzZWxlY3Rvcjogc3RyaW5nKTogRE9NIHtcbiAgICBsZXQgYWxsQ2hpbGRFbGVtZW50cyA9IHRoaXMuZmluZENoaWxkRWxlbWVudHMoc2VsZWN0b3IpO1xuICAgIHJldHVybiBuZXcgRE9NKGFsbENoaWxkRWxlbWVudHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvY3VzZXMgdG8gdGhlIGZpcnN0IGlucHV0IGVsZW1lbnRcbiAgICovXG4gIGZvY3VzVG9GaXJzdElucHV0KCkge1xuICAgIGNvbnN0IGlucHV0RWxlbWVudHMgPSB0aGlzLmZpbmRDaGlsZEVsZW1lbnRzKCdidXR0b24sIFtocmVmXSwgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIFt0YWJpbmRleF06bm90KFt0YWJpbmRleD1cIi0xXCJdKScpO1xuXG4gICAgaWYgKGlucHV0RWxlbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgaW5wdXRFbGVtZW50c1swXS5mb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGb2N1c2VzIHRvIHRoZSBmaXJzdCBpbnB1dCBlbGVtZW50XG4gICAqL1xuICBzY3JvbGxUbyh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgIHRoaXMuZWxlbWVudHNbMF0uc2Nyb2xsVG8oeCwgeSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyBvZiB0aGUgaW5uZXIgSFRNTCBjb250ZW50IG9mIHRoZSBmaXJzdCBlbGVtZW50LlxuICAgKi9cbiAgaHRtbCgpOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBpbm5lciBIVE1MIGNvbnRlbnQgb2YgYWxsIGVsZW1lbnRzLlxuICAgKiBAcGFyYW0gY29udGVudCBhIHN0cmluZyBvZiBwbGFpbiB0ZXh0IG9yIEhUTUwgbWFya3VwXG4gICAqL1xuICBodG1sKGNvbnRlbnQ6IHN0cmluZyk6IERPTTtcbiAgaHRtbChjb250ZW50Pzogc3RyaW5nKTogc3RyaW5nIHwgRE9NIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLnNldEh0bWwoY29udGVudCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0SHRtbCgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0SHRtbCgpOiBzdHJpbmcgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50c1swXS5pbm5lckhUTUw7XG4gIH1cblxuICBwcml2YXRlIHNldEh0bWwoY29udGVudDogc3RyaW5nKTogRE9NIHtcbiAgICBpZiAoY29udGVudCA9PT0gdW5kZWZpbmVkIHx8IGNvbnRlbnQgPT0gbnVsbCkge1xuICAgICAgLy8gU2V0IHRvIGVtcHR5IHN0cmluZyB0byBhdm9pZCBpbm5lckhUTUwgZ2V0dGluZyBzZXQgdG8gJ3VuZGVmaW5lZCcgKGFsbCBicm93c2Vycykgb3IgJ251bGwnIChJRTkpXG4gICAgICBjb250ZW50ID0gJyc7XG4gICAgfVxuXG4gICAgdGhpcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICBlbGVtZW50LmlubmVySFRNTCA9IGNvbnRlbnQ7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhcnMgdGhlIGlubmVyIEhUTUwgb2YgYWxsIGVsZW1lbnRzIChkZWxldGVzIGFsbCBjaGlsZHJlbikuXG4gICAqIEByZXR1cm5zIHtET019XG4gICAqL1xuICBlbXB0eSgpOiBET00ge1xuICAgIHRoaXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSAnJztcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBmaXJzdCBmb3JtIGVsZW1lbnQsIGUuZy4gdGhlIHNlbGVjdGVkIHZhbHVlIG9mIGEgc2VsZWN0IGJveCBvciB0aGUgdGV4dCBpZiBhblxuICAgKiBpbnB1dCBmaWVsZC5cbiAgICogQHJldHVybnMge3N0cmluZ30gdGhlIHZhbHVlIG9mIGEgZm9ybSBlbGVtZW50XG4gICAqL1xuICB2YWwoKTogc3RyaW5nIHtcbiAgICBsZXQgZWxlbWVudCA9IHRoaXMuZWxlbWVudHNbMF07XG5cbiAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxTZWxlY3RFbGVtZW50IHx8IGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50KSB7XG4gICAgICByZXR1cm4gZWxlbWVudC52YWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBUT0RPIGFkZCBzdXBwb3J0IGZvciBtaXNzaW5nIGZvcm0gZWxlbWVudHNcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdmFsKCkgbm90IHN1cHBvcnRlZCBmb3IgJHt0eXBlb2YgZWxlbWVudH1gKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgYW4gYXR0cmlidXRlIG9uIHRoZSBmaXJzdCBlbGVtZW50LlxuICAgKiBAcGFyYW0gYXR0cmlidXRlXG4gICAqL1xuICBhdHRyKGF0dHJpYnV0ZTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbDtcbiAgLyoqXG4gICAqIFNldHMgYW4gYXR0cmlidXRlIG9uIGFsbCBlbGVtZW50cy5cbiAgICogQHBhcmFtIGF0dHJpYnV0ZSB0aGUgbmFtZSBvZiB0aGUgYXR0cmlidXRlXG4gICAqIEBwYXJhbSB2YWx1ZSB0aGUgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZVxuICAgKi9cbiAgYXR0cihhdHRyaWJ1dGU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IERPTTtcbiAgYXR0cihhdHRyaWJ1dGU6IHN0cmluZywgdmFsdWU/OiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHwgRE9NIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldEF0dHIoYXR0cmlidXRlLCB2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0QXR0cihhdHRyaWJ1dGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHRoZSBhdHRyaWJ1dGUgb2YgdGhlIGVsZW1lbnQuXG4gICAqIEBwYXJhbSBhdHRyaWJ1dGVcbiAgICovXG4gIHJlbW92ZUF0dHIoYXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICB0aGlzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldEF0dHIoYXR0cmlidXRlOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50c1swXS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0QXR0cihhdHRyaWJ1dGU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IERPTSB7XG4gICAgdGhpcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiBhIGRhdGEgZWxlbWVudCBvbiB0aGUgZmlyc3QgZWxlbWVudC5cbiAgICogQHBhcmFtIGRhdGFBdHRyaWJ1dGUgdGhlIG5hbWUgb2YgdGhlIGRhdGEgYXR0cmlidXRlIHdpdGhvdXQgdGhlICdkYXRhLScgcHJlZml4XG4gICAqL1xuICBkYXRhKGRhdGFBdHRyaWJ1dGU6IHN0cmluZyk6IHN0cmluZyB8IG51bGw7XG4gIC8qKlxuICAgKiBTZXRzIGEgZGF0YSBhdHRyaWJ1dGUgb24gYWxsIGVsZW1lbnRzLlxuICAgKiBAcGFyYW0gZGF0YUF0dHJpYnV0ZSB0aGUgbmFtZSBvZiB0aGUgZGF0YSBhdHRyaWJ1dGUgd2l0aG91dCB0aGUgJ2RhdGEtJyBwcmVmaXhcbiAgICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZSBvZiB0aGUgZGF0YSBhdHRyaWJ1dGVcbiAgICovXG4gIGRhdGEoZGF0YUF0dHJpYnV0ZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogRE9NO1xuICBkYXRhKGRhdGFBdHRyaWJ1dGU6IHN0cmluZywgdmFsdWU/OiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHwgRE9NIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldERhdGEoZGF0YUF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmdldERhdGEoZGF0YUF0dHJpYnV0ZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXREYXRhKGRhdGFBdHRyaWJ1dGU6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzWzBdLmdldEF0dHJpYnV0ZSgnZGF0YS0nICsgZGF0YUF0dHJpYnV0ZSk7XG4gIH1cblxuICBwcml2YXRlIHNldERhdGEoZGF0YUF0dHJpYnV0ZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogRE9NIHtcbiAgICB0aGlzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLScgKyBkYXRhQXR0cmlidXRlLCB2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyBvbmUgb3IgbW9yZSBET00gZWxlbWVudHMgYXMgY2hpbGRyZW4gdG8gYWxsIGVsZW1lbnRzLlxuICAgKiBAcGFyYW0gY2hpbGRFbGVtZW50cyB0aGUgY2hyaWxkIGVsZW1lbnRzIHRvIGFwcGVuZFxuICAgKiBAcmV0dXJucyB7RE9NfVxuICAgKi9cbiAgYXBwZW5kKC4uLmNoaWxkRWxlbWVudHM6IERPTVtdKTogRE9NIHtcbiAgICB0aGlzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgIGNoaWxkRWxlbWVudHMuZm9yRWFjaCgoY2hpbGRFbGVtZW50KSA9PiB7XG4gICAgICAgIGNoaWxkRWxlbWVudC5lbGVtZW50cy5mb3JFYWNoKChfLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoY2hpbGRFbGVtZW50LmVsZW1lbnRzW2luZGV4XSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgZWxlbWVudHMgZnJvbSB0aGUgRE9NLlxuICAgKi9cbiAgcmVtb3ZlKCk6IHZvaWQge1xuICAgIHRoaXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgbGV0IHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG9mZnNldCBvZiB0aGUgZmlyc3QgZWxlbWVudCBmcm9tIHRoZSBkb2N1bWVudCdzIHRvcCBsZWZ0IGNvcm5lci5cbiAgICogQHJldHVybnMge09mZnNldH1cbiAgICovXG4gIG9mZnNldCgpOiBPZmZzZXQge1xuICAgIGxldCBlbGVtZW50ID0gdGhpcy5lbGVtZW50c1swXTtcbiAgICBsZXQgZWxlbWVudFJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGxldCBodG1sUmVjdCA9IGRvY3VtZW50LmJvZHkucGFyZW50RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIC8vIFZpcnR1YWwgdmlld3BvcnQgc2Nyb2xsIGhhbmRsaW5nIChlLmcuIHBpbmNoIHpvb21lZCB2aWV3cG9ydHMgaW4gbW9iaWxlIGJyb3dzZXJzIG9yIGRlc2t0b3AgQ2hyb21lL0VkZ2UpXG4gICAgLy8gJ25vcm1hbCcgem9vbXMgYW5kIHZpcnR1YWwgdmlld3BvcnQgem9vbXMgKGFrYSBsYXlvdXQgdmlld3BvcnQpIHJlc3VsdCBpbiBkaWZmZXJlbnRcbiAgICAvLyBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIHJlc3VsdHM6XG4gICAgLy8gIC0gd2l0aCBub3JtYWwgc2Nyb2xscywgdGhlIGNsaWVudFJlY3QgZGVjcmVhc2VzIHdpdGggYW4gaW5jcmVhc2UgaW4gc2Nyb2xsKFRvcHxMZWZ0KS9wYWdlKFh8WSlPZmZzZXRcbiAgICAvLyAgLSB3aXRoIHBpbmNoIHpvb20gc2Nyb2xscywgdGhlIGNsaWVudFJlY3Qgc3RheXMgdGhlIHNhbWUgd2hpbGUgc2Nyb2xsL3BhZ2VPZmZzZXQgY2hhbmdlc1xuICAgIC8vIFRoaXMgbWVhbnMsIHRoYXQgdGhlIGNvbWJpbmF0aW9uIG9mIGNsaWVudFJlY3QgKyBzY3JvbGwvcGFnZU9mZnNldCBkb2VzIG5vdCB3b3JrIHRvIGNhbGN1bGF0ZSB0aGUgb2Zmc2V0XG4gICAgLy8gZnJvbSB0aGUgZG9jdW1lbnQncyB1cHBlciBsZWZ0IG9yaWdpbiB3aGVuIHBpbmNoIHpvb20gaXMgdXNlZC5cbiAgICAvLyBUbyB3b3JrIGFyb3VuZCB0aGlzIGlzc3VlLCB3ZSBkbyBub3QgdXNlIHNjcm9sbC9wYWdlT2Zmc2V0IGJ1dCBnZXQgdGhlIGNsaWVudFJlY3Qgb2YgdGhlIGh0bWwgZWxlbWVudCBhbmRcbiAgICAvLyBzdWJ0cmFjdCBpdCBmcm9tIHRoZSBlbGVtZW50J3MgcmVjdCwgd2hpY2ggYWx3YXlzIHJlc3VsdHMgaW4gdGhlIG9mZnNldCBmcm9tIHRoZSBkb2N1bWVudCBvcmlnaW4uXG4gICAgLy8gTk9URTogdGhlIGN1cnJlbnQgd2F5IG9mIG9mZnNldCBjYWxjdWxhdGlvbiB3YXMgaW1wbGVtZW50ZWQgc3BlY2lmaWNhbGx5IHRvIHRyYWNrIGV2ZW50IHBvc2l0aW9ucyBvbiB0aGVcbiAgICAvLyBzZWVrIGJhciwgYW5kIGl0IG1pZ2h0IGJyZWFrIGNvbXBhdGliaWxpdHkgd2l0aCBqUXVlcnkncyBvZmZzZXQoKSBtZXRob2QuIElmIHRoaXMgZXZlciB0dXJucyBvdXQgdG8gYmUgYVxuICAgIC8vIHByb2JsZW0sIHRoaXMgbWV0aG9kIHNob3VsZCBiZSByZXZlcnRlZCB0byB0aGUgb2xkIHZlcnNpb24gYW5kIHRoZSBvZmZzZXQgY2FsY3VsYXRpb24gbW92ZWQgdG8gdGhlIHNlZWsgYmFyLlxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogZWxlbWVudFJlY3QudG9wIC0gaHRtbFJlY3QudG9wLFxuICAgICAgbGVmdDogZWxlbWVudFJlY3QubGVmdCAtIGh0bWxSZWN0LmxlZnQsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB3aWR0aCBvZiB0aGUgZmlyc3QgZWxlbWVudC5cbiAgICogQHJldHVybnMge251bWJlcn0gdGhlIHdpZHRoIG9mIHRoZSBmaXJzdCBlbGVtZW50XG4gICAqL1xuICB3aWR0aCgpOiBudW1iZXIge1xuICAgIC8vIFRPRE8gY2hlY2sgaWYgdGhpcyBpcyB0aGUgc2FtZSBhcyBqUXVlcnkncyB3aWR0aCgpIChwcm9iYWJseSBub3QpXG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHNbMF0ub2Zmc2V0V2lkdGg7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaGVpZ2h0IG9mIHRoZSBmaXJzdCBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSB0aGUgaGVpZ2h0IG9mIHRoZSBmaXJzdCBlbGVtZW50XG4gICAqL1xuICBoZWlnaHQoKTogbnVtYmVyIHtcbiAgICAvLyBUT0RPIGNoZWNrIGlmIHRoaXMgaXMgdGhlIHNhbWUgYXMgalF1ZXJ5J3MgaGVpZ2h0KCkgKHByb2JhYmx5IG5vdClcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50c1swXS5vZmZzZXRIZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc2l6ZSBvZiB0aGUgZmlyc3QgZWxlbWVudC5cbiAgICogQHJldHVybiB7U2l6ZX0gdGhlIHNpemUgb2YgdGhlIGZpcnN0IGVsZW1lbnRcbiAgICovXG4gIHNpemUoKTogU2l6ZSB7XG4gICAgcmV0dXJuIHsgd2lkdGg6IHRoaXMud2lkdGgoKSwgaGVpZ2h0OiB0aGlzLmhlaWdodCgpIH07XG4gIH1cblxuICAvKipcbiAgICogQXR0YWNoZXMgYW4gZXZlbnQgaGFuZGxlciB0byBvbmUgb3IgbW9yZSBldmVudHMgb24gYWxsIGVsZW1lbnRzLlxuICAgKiBAcGFyYW0gZXZlbnROYW1lIHRoZSBldmVudCBuYW1lIChvciBtdWx0aXBsZSBuYW1lcyBzZXBhcmF0ZWQgYnkgc3BhY2UpIHRvIGxpc3RlbiB0b1xuICAgKiBAcGFyYW0gZXZlbnRIYW5kbGVyIHRoZSBldmVudCBoYW5kbGVyIHRvIGNhbGwgd2hlbiB0aGUgZXZlbnQgZmlyZXNcbiAgICogQHJldHVybnMge0RPTX1cbiAgICovXG4gIG9uKGV2ZW50TmFtZTogc3RyaW5nLCBldmVudEhhbmRsZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3QpOiBET00ge1xuICAgIGxldCBldmVudHMgPSBldmVudE5hbWUuc3BsaXQoJyAnKTtcblxuICAgIGV2ZW50cy5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgICAgaWYgKHRoaXMuZWxlbWVudHMgPT0gbnVsbCkge1xuICAgICAgICB0aGlzLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGV2ZW50SGFuZGxlcik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBldmVudEhhbmRsZXIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYW4gZXZlbnQgaGFuZGxlciBmcm9tIG9uZSBvciBtb3JlIGV2ZW50cyBvbiBhbGwgZWxlbWVudHMuXG4gICAqIEBwYXJhbSBldmVudE5hbWUgdGhlIGV2ZW50IG5hbWUgKG9yIG11bHRpcGxlIG5hbWVzIHNlcGFyYXRlZCBieSBzcGFjZSkgdG8gcmVtb3ZlIHRoZSBoYW5kbGVyIGZyb21cbiAgICogQHBhcmFtIGV2ZW50SGFuZGxlciB0aGUgZXZlbnQgaGFuZGxlciB0byByZW1vdmVcbiAgICogQHJldHVybnMge0RPTX1cbiAgICovXG4gIG9mZihldmVudE5hbWU6IHN0cmluZywgZXZlbnRIYW5kbGVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0KTogRE9NIHtcbiAgICBsZXQgZXZlbnRzID0gZXZlbnROYW1lLnNwbGl0KCcgJyk7XG5cbiAgICBldmVudHMuZm9yRWFjaCgoZXZlbnQpID0+IHtcbiAgICAgIGlmICh0aGlzLmVsZW1lbnRzID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBldmVudEhhbmRsZXIpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgZXZlbnRIYW5kbGVyKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIHRoZSBzcGVjaWZpZWQgY2xhc3MoZXMpIHRvIGFsbCBlbGVtZW50cy5cbiAgICogQHBhcmFtIGNsYXNzTmFtZSB0aGUgY2xhc3MoZXMpIHRvIGFkZCwgbXVsdGlwbGUgY2xhc3NlcyBzZXBhcmF0ZWQgYnkgc3BhY2VcbiAgICogQHJldHVybnMge0RPTX1cbiAgICovXG4gIGFkZENsYXNzKGNsYXNzTmFtZTogc3RyaW5nKTogRE9NIHtcbiAgICB0aGlzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xuICAgICAgICBjb25zdCBjbGFzc05hbWVzID0gY2xhc3NOYW1lLnNwbGl0KCcgJylcbiAgICAgICAgICAuZmlsdGVyKGNsYXNzTmFtZSA9PiBjbGFzc05hbWUubGVuZ3RoID4gMCk7XG5cbiAgICAgICAgaWYgKGNsYXNzTmFtZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCguLi5jbGFzc05hbWVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lICs9ICcgJyArIGNsYXNzTmFtZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZWQgdGhlIHNwZWNpZmllZCBjbGFzcyhlcykgZnJvbSBhbGwgZWxlbWVudHMuXG4gICAqIEBwYXJhbSBjbGFzc05hbWUgdGhlIGNsYXNzKGVzKSB0byByZW1vdmUsIG11bHRpcGxlIGNsYXNzZXMgc2VwYXJhdGVkIGJ5IHNwYWNlXG4gICAqIEByZXR1cm5zIHtET019XG4gICAqL1xuICByZW1vdmVDbGFzcyhjbGFzc05hbWU6IHN0cmluZyk6IERPTSB7XG4gICAgdGhpcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgICAgY29uc3QgY2xhc3NOYW1lcyA9IGNsYXNzTmFtZS5zcGxpdCgnICcpXG4gICAgICAgICAgLmZpbHRlcihjbGFzc05hbWUgPT4gY2xhc3NOYW1lLmxlbmd0aCA+IDApO1xuXG4gICAgICAgIGlmIChjbGFzc05hbWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoLi4uY2xhc3NOYW1lcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UoXG4gICAgICAgICAgbmV3IFJlZ0V4cCgnKF58XFxcXGIpJyArIGNsYXNzTmFtZS5zcGxpdCgnICcpLmpvaW4oJ3wnKSArICcoXFxcXGJ8JCknLCAnZ2knKSwgJyAnKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhbnkgb2YgdGhlIGVsZW1lbnRzIGhhcyB0aGUgc3BlY2lmaWVkIGNsYXNzLlxuICAgKiBAcGFyYW0gY2xhc3NOYW1lIHRoZSBjbGFzcyBuYW1lIHRvIGNoZWNrXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIG9uZSBvZiB0aGUgZWxlbWVudHMgaGFzIHRoZSBjbGFzcyBhdHRhY2hlZCwgZWxzZSBpZiBubyBlbGVtZW50IGhhcyBpdCBhdHRhY2hlZFxuICAgKi9cbiAgaGFzQ2xhc3MoY2xhc3NOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBsZXQgaGFzQ2xhc3MgPSBmYWxzZTtcblxuICAgIHRoaXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XG4gICAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSB7XG4gICAgICAgICAgLy8gU2luY2Ugd2UgYXJlIGluc2lkZSBhIGhhbmRsZXIsIHdlIGNhbid0IGp1c3QgJ3JldHVybiB0cnVlJy4gSW5zdGVhZCwgd2Ugc2F2ZSBpdCB0byBhIHZhcmlhYmxlXG4gICAgICAgICAgLy8gYW5kIHJldHVybiBpdCBhdCB0aGUgZW5kIG9mIHRoZSBmdW5jdGlvbiBib2R5LlxuICAgICAgICAgIGhhc0NsYXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChuZXcgUmVnRXhwKCcoXnwgKScgKyBjbGFzc05hbWUgKyAnKCB8JCknLCAnZ2knKS50ZXN0KGVsZW1lbnQuY2xhc3NOYW1lKSkge1xuICAgICAgICAgIC8vIFNlZSBjb21tZW50IGFib3ZlXG4gICAgICAgICAgaGFzQ2xhc3MgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gaGFzQ2xhc3M7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgYSBDU1MgcHJvcGVydHkgb2YgdGhlIGZpcnN0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgdGhlIG5hbWUgb2YgdGhlIENTUyBwcm9wZXJ0eSB0byByZXRyaWV2ZSB0aGUgdmFsdWUgb2ZcbiAgICovXG4gIGNzcyhwcm9wZXJ0eU5hbWU6IHN0cmluZyk6IHN0cmluZyB8IG51bGw7XG4gIC8qKlxuICAgKiBTZXRzIHRoZSB2YWx1ZSBvZiBhIENTUyBwcm9wZXJ0eSBvbiBhbGwgZWxlbWVudHMuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgdGhlIG5hbWUgb2YgdGhlIENTUyBwcm9wZXJ0eSB0byBzZXQgdGhlIHZhbHVlIGZvclxuICAgKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIHRvIHNldCBmb3IgdGhlIGdpdmVuIENTUyBwcm9wZXJ0eVxuICAgKi9cbiAgY3NzKHByb3BlcnR5TmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogRE9NO1xuICAvKipcbiAgICogU2V0cyBhIGNvbGxlY3Rpb24gb2YgQ1NTIHByb3BlcnRpZXMgYW5kIHRoZWlyIHZhbHVlcyBvbiBhbGwgZWxlbWVudHMuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eVZhbHVlQ29sbGVjdGlvbiBhbiBvYmplY3QgY29udGFpbmluZyBwYWlycyBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgdGhlaXIgdmFsdWVzXG4gICAqL1xuICBjc3MocHJvcGVydHlWYWx1ZUNvbGxlY3Rpb246IENzc1Byb3BlcnRpZXMpOiBET007XG4gIGNzcyhwcm9wZXJ0eU5hbWVPckNvbGxlY3Rpb246IHN0cmluZyB8IENzc1Byb3BlcnRpZXMsIHZhbHVlPzogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB8IERPTSB7XG4gICAgaWYgKHR5cGVvZiBwcm9wZXJ0eU5hbWVPckNvbGxlY3Rpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICBsZXQgcHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lT3JDb2xsZWN0aW9uO1xuXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRDc3MocHJvcGVydHlOYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3NzKHByb3BlcnR5TmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgbGV0IHByb3BlcnR5VmFsdWVDb2xsZWN0aW9uID0gcHJvcGVydHlOYW1lT3JDb2xsZWN0aW9uO1xuICAgICAgcmV0dXJuIHRoaXMuc2V0Q3NzQ29sbGVjdGlvbihwcm9wZXJ0eVZhbHVlQ29sbGVjdGlvbik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYW4gaW5saW5lIENTUyBwcm9wZXJ0eSBpZiBpdCBleGlzdHNcbiAgICogQHBhcmFtIHByb3BlcnR5TmFtZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byByZW1vdmVcbiAgICogQHBhcmFtIGVsZW1lbnRJbmRleCBpbmRleCBvZiB0aGUgZWxlbWVudCB3aG9zZSBDU1MgcHJvcGVydHkgc2hvdWxkIGdldCByZW1vdmVkXG4gICAqL1xuICByZW1vdmVDc3MocHJvcGVydHlOYW1lOiBzdHJpbmcsIGVsZW1lbnRJbmRleCA9IDApOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzW2VsZW1lbnRJbmRleF0uc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcGVydHlOYW1lKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q3NzKHByb3BlcnR5TmFtZTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUodGhpcy5lbGVtZW50c1swXSlbPGFueT5wcm9wZXJ0eU5hbWVdO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRDc3MocHJvcGVydHlOYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBET00ge1xuICAgIHRoaXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgLy8gPGFueT4gY2FzdCB0byByZXNvbHZlIFRTNzAxNTogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzY2MjcxMTQvMzcwMjUyXG4gICAgICBlbGVtZW50LnN0eWxlWzxhbnk+cHJvcGVydHlOYW1lXSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRDc3NDb2xsZWN0aW9uKHJ1bGVWYWx1ZUNvbGxlY3Rpb246IHtbcnVsZU5hbWU6IHN0cmluZ106IHN0cmluZ30pOiBET00ge1xuICAgIHRoaXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzQ0OTA1NzMvMzcwMjUyXG4gICAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHJ1bGVWYWx1ZUNvbGxlY3Rpb24pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiIsImltcG9ydCB7RXJyb3JNZXNzYWdlTWFwLCBFcnJvck1lc3NhZ2VUcmFuc2xhdG9yfSBmcm9tICcuL2NvbXBvbmVudHMvZXJyb3JtZXNzYWdlb3ZlcmxheSc7XG5pbXBvcnQgeyBFcnJvckV2ZW50IH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IE1vYmlsZVYzUGxheWVyRXJyb3JFdmVudCwgTW9iaWxlVjNTb3VyY2VFcnJvckV2ZW50IH0gZnJvbSAnLi9tb2JpbGV2M3BsYXllcmFwaSc7XG5cbmV4cG9ydCBuYW1lc3BhY2UgRXJyb3JVdGlscyB7XG5cbiAgZXhwb3J0IGNvbnN0IGRlZmF1bHRFcnJvck1lc3NhZ2VzOiBFcnJvck1lc3NhZ2VNYXAgPSB7XG4gICAgMTAwMDogJ0Vycm9yIGlzIHVua25vd24nLFxuICAgIDEwMDE6ICdUaGUgcGxheWVyIEFQSSBpcyBub3QgYXZhaWxhYmxlIGFmdGVyIGEgY2FsbCB0byBQbGF5ZXJBUEkuZGVzdHJveS4nLFxuICAgIDExMDA6ICdHZW5lcmFsIHNldHVwIGVycm9yJyxcbiAgICAxMTAxOiAnVGhlcmUgd2FzIGFuIGVycm9yIHdoZW4gaW5zZXJ0aW5nIHRoZSBIVE1MIHZpZGVvIGVsZW1lbnQnLFxuICAgIDExMDI6ICdObyBjb25maWd1cmF0aW9uIHdhcyBwcm92aWRlZCcsXG4gICAgMTEwMzogJ1RoZSBsaWNlbnNlIGlzIG5vdCB2YWxpZCcsXG4gICAgMTEwNDogJ1RoZSB0aGUgZG9tYWluLWxvY2tlZCBwbGF5ZXIgaXMgbm90IGF1dGhvcml6ZWQgdG8gcGxheWJhY2sgb24gdGhpcyBkb21haW4nLFxuICAgIDExMDU6ICdUaGUgZG9tYWluIGlzIG5vdCBhbGxvd2xpc3RlZCcsXG4gICAgMTEwNjogJ1RoZSBsaWNlbnNlIHNlcnZlciBVUkwgaXMgaW52YWxpZCcsXG4gICAgMTEwNzogJ1RoZSBpbXByZXNzaW9uIHNlcnZlciBVUkwgaXMgaW52YWxpZCcsXG4gICAgMTEwODogJ0NvdWxkIG5vdCBpbml0aWFsaXplIGEgcmVuZGVyaW5nIGVuZ2luZScsXG4gICAgMTEwOTogJ1RoZSB1c2VkIGZsYXNoIHZlcnNpb24gZG9lcyBub3Qgc3VwcG9ydCBwbGF5YmFjaycsXG4gICAgMTExMDogJ05hdGl2ZSBGbGFzaCBpcyBub3QgYXV0aG9yaXplZCBieSBhIHZhbGlkIEFkb2JlIHRva2VuJyxcbiAgICAxMTExOiAnRmxhc2ggZG9lc25cXCd0IGhhdmUgc3VmZmljaWVudCByZXNvdXJjZXMnLFxuICAgIDExMTI6ICdGbGFzaCBjb250YWluZXIgQVBJIG5vdCBhdmFpbGFibGUnLFxuICAgIDExMTM6ICdQcm90b2NvbCBub3Qgc3VwcG9ydGVkLiBUaGlzIHNpdGUgaGFzIGJlZW4gbG9hZGVkIHVzaW5nIFwiZmlsZVwiIHByb3RvY29sLCBidXQgdW5mb3J0dW5hdGVseSB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSBsb2FkIHRoZSBwYWdlIHVzaW5nIGEgd2ViIHNlcnZlciAodXNpbmcgaHR0cCBvciBodHRwcyknLFxuICAgIDEyMDA6ICdHZW5lcmFsIHNvdXJjZSBlcnJvcicsXG4gICAgMTIwMTogJ05vIHZhbGlkIHNvdXJjZSB3YXMgcHJvdmlkZWQnLFxuICAgIDEyMDI6ICdUaGUgZG93bmxvYWRlZCBtYW5pZmVzdCBpcyBpbnZhbGlkJyxcbiAgICAxMjAzOiAnVGhlcmUgd2FzIG5vIHRlY2hub2xvZ3kgZGV0ZWN0ZWQgdG8gcGxheWJhY2sgdGhlIHByb3ZpZGVkIHNvdXJjZScsXG4gICAgMTIwNDogJ1RoZSBzdHJlYW0gdHlwZSBpcyBub3Qgc3VwcG9ydGVkJyxcbiAgICAxMjA1OiAnVGhlIGZvcmNlZCB0ZWNobm9sb2d5IGlzIG5vdCBzdXBwb3J0ZWQnLFxuICAgIDEyMDY6ICdObyBzdHJlYW0gZm91bmQgZm9yIHN1cHBvcnRlZCB0ZWNobm9sb2dpZXMuJyxcbiAgICAxMjA3OiAnVGhlIGRvd25sb2FkZWQgc2VnbWVudCBpcyBlbXB0eScsXG4gICAgMTIwODogJ1RoZSBtYW5pZmVzdCBjb3VsZCBub3QgYmUgbG9hZGVkJyxcbiAgICAxMjA5OiAnUHJvZ3Jlc3NpdmUgc3RyZWFtIHR5cGUgbm90IHN1cHBvcnRlZCBvciB0aGUgc3RyZWFtIGhhcyBhbiBlcnJvcicsXG4gICAgMTIxMDogJ0hMUyBzdHJlYW0gaGFzIGFuIGVycm9yJyxcbiAgICAxMjExOiAnVGhlIGVuY3J5cHRpb24gbWV0aG9kIGlzIG5vdCBzdXBwb3J0ZWQnLFxuICAgIDEzMDA6ICdHZW5lcmFsIHBsYXliYWNrIGVycm9yJyxcbiAgICAxMzAxOiAnVmlkZW8gZGVjb2RlciBvciBkZW11eGVyIGhhZCBhbiBlcnJvciB3aXRoIHRoZSBjb250ZW50JyxcbiAgICAxMzAyOiAnR2VuZXJhbCBlcnJvciBpZiBGbGFzaCByZW5kZXJlciBoYXMgYW4gZXJyb3InLFxuICAgIDEzMDM6ICdGbGFzaCBkb2VzblxcJ3QgaGF2ZSBzdWZmaWNpZW50IHJlc291cmNlcycsXG4gICAgMTMwNDogJ1RoZSB0cmFuc211eGVyIGNvdWxkIG5vdCBiZSBpbml0aWFsaXplZCcsXG4gICAgMTQwMDogJ05ldHdvcmsgZXJyb3Igd2hpbGUgZG93bmxvYWRpbmcnLFxuICAgIDE0MDE6ICdUaGUgbWFuaWZlc3QgZG93bmxvYWQgdGltZWQgb3V0JyxcbiAgICAxNDAyOiAnVGhlIHNlZ21lbnQgZG93bmxvYWQgdGltZWQgb3V0JyxcbiAgICAxNDAzOiAnVGhlIHByb2dyZXNzaXZlIHN0cmVhbSBkb3dubG9hZCB0aW1lZCBvdXQnLFxuICAgIDE0MDQ6ICdUaGUgQ2VydGlmaWNhdGUgY291bGQgbm90IGJlIGxvYWRlZCcsXG4gICAgMjAwMDogJ0dlbmVyYWwgRFJNIGVycm9yJyxcbiAgICAyMDAxOiAnUmVxdWlyZWQgRFJNIGNvbmZpZ3VyYXRpb24gaXMgbWlzc2luZycsXG4gICAgMjAwMjogJ1RoZSBsaWNlbnNpbmcgc2VydmVyIFVSTCBpcyBtaXNzaW5nJyxcbiAgICAyMDAzOiAnTGljZW5zZSByZXF1ZXN0IGZhaWxlZCcsXG4gICAgMjAwNDogJ0tleSBvciBLZXlJZCBpcyBtaXNzaW5nJyxcbiAgICAyMDA1OiAnS2V5IHNpemUgaXMgbm90IHN1cHBvcnRlZCcsXG4gICAgMjAwNjogJ1VuYWJsZSB0byBpbnN0YW50aWF0ZSBhIGtleSBzeXN0ZW0gc3VwcG9ydGluZyB0aGUgcmVxdWlyZWQgY29tYmluYXRpb25zJyxcbiAgICAyMDA3OiAnVW5hYmxlIHRvIGNyZWF0ZSBvciBpbml0aWFsaXplIGtleSBzZXNzaW9uJyxcbiAgICAyMDA4OiAnVGhlIE1lZGlhS2V5IG9iamVjdCBjb3VsZCBub3QgYmUgY3JlYXRlZC9pbml0aWFsaXplZCcsXG4gICAgMjAwOTogJ0tleSBlcnJvcicsXG4gICAgMjAxMDogJ1RoZSBrZXkgc3lzdGVtIGlzIG5vdCBzdXBwb3J0ZWQnLFxuICAgIDIwMTE6ICdUaGUgY2VydGlmaWNhdGUgaXMgbm90IHZhbGlkJyxcbiAgICAyMDEyOiAnSW52YWxpZCBoZWFkZXIga2V5L3ZhbHVlIHBhaXIgZm9yIFBsYXlSZWFkeSBsaWNlbnNlIHJlcXVlc3QnLFxuICAgIDIwMTM6ICdDb250ZW50IGNhbm5vdCBiZSBwbGF5ZWQgYmFjayBiZWNhdXNlIHRoZSBvdXRwdXQgaXMgcmVzdHJpY3RlZCBvbiB0aGlzIG1hY2hpbmUnLFxuICAgIDIwMTQ6ICdEUk0gZXJyb3IgZm9yIHRoZSBGbGFzaCByZW5kZXJlcicsXG4gICAgMjEwMDogJ0dlbmVyYWwgVlIgZXJyb3InLFxuICAgIDIxMDE6ICdQbGF5ZXIgdGVjaG5vbG9neSBub3QgY29tcGF0aWJsZSB3aXRoIFZSIHBsYXliYWNrJyxcbiAgICAzMDAwOiAnR2VuZXJhbCBtb2R1bGUgZXJyb3InLFxuICAgIDMwMDE6ICdUaGUgZGVmaW5pdGlvbiBvZiB0aGUgbW9kdWxlIGlzIGludmFsaWQgKGUuZy4gaW5jb21wbGV0ZSkuJyxcbiAgICAzMDAyOiAnVGhlIG1vZHVsZSBkZWZpbml0aW9uIHNwZWNpZmllcyBkZXBlbmRlbmNpZXMgYnV0IHRoZSBtb2R1bGUgaXMgbm90IHByb3ZpZGVkIHZpYSBhIGZ1bmN0aW9uIGZvciBkZWZlcnJlZCBsb2FkaW5nLicsXG4gICAgMzAwMzogJ0EgbW9kdWxlIGNhbm5vdCBiZSBsb2FkZWQgYmVjYXVzZSBpdCBoYXMgbm90IGJlZW4gYWRkZWQgdG8gdGhlIHBsYXllciBjb3JlLicsXG4gICAgMzAwNDogJ0EgbW9kdWxlIGNhbm5vdCBiZSBsb2FkZWQgYmVjYXVzZSBvbmUgb3IgbW9yZSBkZXBlbmRlbmNpZXMgYXJlIG1pc3NpbmcuJyxcbiAgICAzMTAwOiAnQW4gQWR2ZXJ0aXNpbmcgbW9kdWxlIGVycm9yIGhhcyBvY2N1cnJlZC4gUmVmZXIgdG8gdGhlIGF0dGFjaGVkIEFkdmVydGlzaW5nRXJyb3IuJyxcbiAgfTtcblxuICBleHBvcnQgY29uc3QgZGVmYXVsdE1vYmlsZVYzRXJyb3JNZXNzYWdlVHJhbnNsYXRvciA9IChlcnJvcjogTW9iaWxlVjNQbGF5ZXJFcnJvckV2ZW50IHwgTW9iaWxlVjNTb3VyY2VFcnJvckV2ZW50KSA9PiB7XG4gICAgcmV0dXJuIGVycm9yLm1lc3NhZ2U7XG4gIH07XG5cbiAgZXhwb3J0IGNvbnN0IGRlZmF1bHRXZWJFcnJvck1lc3NhZ2VUcmFuc2xhdG9yOiBFcnJvck1lc3NhZ2VUcmFuc2xhdG9yID0gKGVycm9yOiBFcnJvckV2ZW50KSA9PiB7XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gRXJyb3JVdGlscy5kZWZhdWx0RXJyb3JNZXNzYWdlc1tlcnJvci5jb2RlXTtcblxuICAgIGlmIChlcnJvck1lc3NhZ2UpIHtcbiAgICAgIC8vIFVzZSB0aGUgZXJyb3IgbWVzc2FnZSB0ZXh0IGlmIHRoZXJlIGlzIG9uZVxuICAgICAgcmV0dXJuIGAke2Vycm9yTWVzc2FnZX1cXG4oJHtlcnJvci5uYW1lfSlgOyAvLyBkZWZhdWx0IGVycm9yIG1lc3NhZ2Ugc3R5bGVcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRmFsbGJhY2sgdG8gZXJyb3IgY29kZS9uYW1lIGlmIG5vIG1lc3NhZ2UgaXMgZGVmaW5lZFxuICAgICAgcmV0dXJuIGAke2Vycm9yLmNvZGV9ICR7ZXJyb3IubmFtZX1gO1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCB7QXJyYXlVdGlsc30gZnJvbSAnLi9hcnJheXV0aWxzJztcbmltcG9ydCB7IFRpbWVvdXQgfSBmcm9tICcuL3RpbWVvdXQnO1xuLyoqXG4gKiBGdW5jdGlvbiBpbnRlcmZhY2UgZm9yIGV2ZW50IGxpc3RlbmVycyBvbiB0aGUge0BsaW5rIEV2ZW50RGlzcGF0Y2hlcn0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRXZlbnRMaXN0ZW5lcjxTZW5kZXIsIEFyZ3M+IHtcbiAgKHNlbmRlcjogU2VuZGVyLCBhcmdzOiBBcmdzKTogdm9pZDtcbn1cblxuLyoqXG4gKiBFbXB0eSB0eXBlIGZvciBjcmVhdGluZyB7QGxpbmsgRXZlbnREaXNwYXRjaGVyIGV2ZW50IGRpc3BhdGNoZXJzfSB0aGF0IGRvIG5vdCBjYXJyeSBhbnkgYXJndW1lbnRzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5vQXJncyB7XG59XG5cbi8qKlxuICogRXZlbnQgYXJncyBmb3IgYW4gZXZlbnQgdGhhdCBjYW4gYmUgY2FuY2VsZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2FuY2VsRXZlbnRBcmdzIGV4dGVuZHMgTm9BcmdzIHtcbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyBhIGZsYWcgd2hldGhlciB0aGUgZXZlbnQgc2hvdWxkIGJlIGNhbmNlbGVkLlxuICAgKi9cbiAgY2FuY2VsPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBQdWJsaWMgaW50ZXJmYWNlIHRoYXQgcmVwcmVzZW50cyBhbiBldmVudC4gQ2FuIGJlIHVzZWQgdG8gc3Vic2NyaWJlIHRvIGFuZCB1bnN1YnNjcmliZSBmcm9tIGV2ZW50cy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFdmVudDxTZW5kZXIsIEFyZ3M+IHtcbiAgLyoqXG4gICAqIFN1YnNjcmliZXMgYW4gZXZlbnQgbGlzdGVuZXIgdG8gdGhpcyBldmVudCBkaXNwYXRjaGVyLlxuICAgKiBAcGFyYW0gbGlzdGVuZXIgdGhlIGxpc3RlbmVyIHRvIGFkZFxuICAgKi9cbiAgc3Vic2NyaWJlKGxpc3RlbmVyOiBFdmVudExpc3RlbmVyPFNlbmRlciwgQXJncz4pOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmVzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIHRoaXMgZXZlbnQgZGlzcGF0Y2hlciB0aGF0IGlzIG9ubHkgY2FsbGVkIG9uY2UuXG4gICAqIEBwYXJhbSBsaXN0ZW5lciB0aGUgbGlzdGVuZXIgdG8gYWRkXG4gICAqL1xuICBzdWJzY3JpYmVPbmNlKGxpc3RlbmVyOiBFdmVudExpc3RlbmVyPFNlbmRlciwgQXJncz4pOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmVzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIHRoaXMgZXZlbnQgZGlzcGF0Y2hlciB0aGF0IHdpbGwgYmUgY2FsbGVkIGF0IGEgbGltaXRlZCByYXRlIHdpdGggYSBtaW5pbXVtXG4gICAqIGludGVydmFsIG9mIHRoZSBzcGVjaWZpZWQgbWlsbGlzZWNvbmRzLlxuICAgKiBAcGFyYW0gbGlzdGVuZXIgdGhlIGxpc3RlbmVyIHRvIGFkZFxuICAgKiBAcGFyYW0gcmF0ZU1zIHRoZSByYXRlIGluIG1pbGxpc2Vjb25kcyB0byB3aGljaCBjYWxsaW5nIG9mIHRoZSBsaXN0ZW5lcnMgc2hvdWxkIGJlIGxpbWl0ZWRcbiAgICovXG4gIHN1YnNjcmliZVJhdGVMaW1pdGVkKGxpc3RlbmVyOiBFdmVudExpc3RlbmVyPFNlbmRlciwgQXJncz4sIHJhdGVNczogbnVtYmVyKTogdm9pZDtcblxuICAvKipcbiAgICogVW5zdWJzY3JpYmVzIGEgc3Vic2NyaWJlZCBldmVudCBsaXN0ZW5lciBmcm9tIHRoaXMgZGlzcGF0Y2hlci5cbiAgICogQHBhcmFtIGxpc3RlbmVyIHRoZSBsaXN0ZW5lciB0byByZW1vdmVcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGxpc3RlbmVyIHdhcyBzdWNjZXNzZnVsbHkgdW5zdWJzY3JpYmVkLCBmYWxzZSBpZiBpdCBpc24ndCBzdWJzY3JpYmVkIG9uIHRoaXNcbiAgICogICBkaXNwYXRjaGVyXG4gICAqL1xuICB1bnN1YnNjcmliZShsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcjxTZW5kZXIsIEFyZ3M+KTogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBFdmVudCBkaXNwYXRjaGVyIHRvIHN1YnNjcmliZSBhbmQgdHJpZ2dlciBldmVudHMuIEVhY2ggZXZlbnQgc2hvdWxkIGhhdmUgaXRzIG93biBkaXNwYXRjaGVyLlxuICovXG5leHBvcnQgY2xhc3MgRXZlbnREaXNwYXRjaGVyPFNlbmRlciwgQXJncz4gaW1wbGVtZW50cyBFdmVudDxTZW5kZXIsIEFyZ3M+IHtcblxuICBwcml2YXRlIGxpc3RlbmVyczogRXZlbnRMaXN0ZW5lcldyYXBwZXI8U2VuZGVyLCBBcmdzPltdID0gW107XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICAvKipcbiAgICoge0Bpbmhlcml0RG9jfVxuICAgKi9cbiAgc3Vic2NyaWJlKGxpc3RlbmVyOiBFdmVudExpc3RlbmVyPFNlbmRlciwgQXJncz4pIHtcbiAgICB0aGlzLmxpc3RlbmVycy5wdXNoKG5ldyBFdmVudExpc3RlbmVyV3JhcHBlcihsaXN0ZW5lcikpO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAaW5oZXJpdERvY31cbiAgICovXG4gIHN1YnNjcmliZU9uY2UobGlzdGVuZXI6IEV2ZW50TGlzdGVuZXI8U2VuZGVyLCBBcmdzPikge1xuICAgIHRoaXMubGlzdGVuZXJzLnB1c2gobmV3IEV2ZW50TGlzdGVuZXJXcmFwcGVyKGxpc3RlbmVyLCB0cnVlKSk7XG4gIH1cblxuICAvKipcbiAgICoge0Bpbmhlcml0RG9jfVxuICAgKi9cbiAgc3Vic2NyaWJlUmF0ZUxpbWl0ZWQobGlzdGVuZXI6IEV2ZW50TGlzdGVuZXI8U2VuZGVyLCBBcmdzPiwgcmF0ZU1zOiBudW1iZXIpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5wdXNoKG5ldyBSYXRlTGltaXRlZEV2ZW50TGlzdGVuZXJXcmFwcGVyKGxpc3RlbmVyLCByYXRlTXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGluaGVyaXREb2N9XG4gICAqL1xuICB1bnN1YnNjcmliZShsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcjxTZW5kZXIsIEFyZ3M+KTogYm9vbGVhbiB7XG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGxpc3RlbmVycywgY29tcGFyZSB3aXRoIHBhcmFtZXRlciwgYW5kIHJlbW92ZSBpZiBmb3VuZFxuICAgIC8vIE5PVEU6IEluIGNhc2Ugd2UgZXZlciByZW1vdmUgYWxsIG1hdGNoaW5nIGxpc3RlbmVycyBpbnN0ZWFkIG9mIGp1c3QgdGhlIGZpcnN0LCB3ZSBuZWVkIHRvIHJldmVyc2UtaXRlcmF0ZSBoZXJlXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHN1YnNjcmliZWRMaXN0ZW5lciA9IHRoaXMubGlzdGVuZXJzW2ldO1xuICAgICAgaWYgKHN1YnNjcmliZWRMaXN0ZW5lci5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgc3Vic2NyaWJlZExpc3RlbmVyLmNsZWFyKCk7XG4gICAgICAgIEFycmF5VXRpbHMucmVtb3ZlKHRoaXMubGlzdGVuZXJzLCBzdWJzY3JpYmVkTGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgbGlzdGVuZXJzIGZyb20gdGhpcyBkaXNwYXRjaGVyLlxuICAgKi9cbiAgdW5zdWJzY3JpYmVBbGwoKTogdm9pZCB7XG4gICAgLy8gSW4gY2FzZSBvZiBSYXRlTGltaXRlZEV2ZW50TGlzdGVuZXJXcmFwcGVyIHdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIHRpbWVvdXQgY2FsbGJhY2sgd29uJ3QgYmUgY2FsbGVkXG4gICAgZm9yIChsZXQgbGlzdGVuZXIgb2YgdGhpcy5saXN0ZW5lcnMpIHtcbiAgICAgIGxpc3RlbmVyLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGV2ZW50IHRvIGFsbCBzdWJzY3JpYmVkIGxpc3RlbmVycy5cbiAgICogQHBhcmFtIHNlbmRlciB0aGUgc291cmNlIG9mIHRoZSBldmVudFxuICAgKiBAcGFyYW0gYXJncyB0aGUgYXJndW1lbnRzIGZvciB0aGUgZXZlbnRcbiAgICovXG4gIGRpc3BhdGNoKHNlbmRlcjogU2VuZGVyLCBhcmdzOiBBcmdzID0gbnVsbCkge1xuICAgIGxldCBsaXN0ZW5lcnNUb1JlbW92ZSA9IFtdO1xuXG4gICAgLy8gQ2FsbCBldmVyeSBsaXN0ZW5lclxuICAgIC8vIFdlIGl0ZXJhdGUgb3ZlciBhIGNvcHkgb2YgdGhlIGFycmF5IG9mIGxpc3RlbmVycyB0byBhdm9pZCB0aGUgY2FzZSB3aGVyZSBldmVudHMgYXJlIG5vdCBmaXJlZCBvbiBsaXN0ZW5lcnMgd2hlblxuICAgIC8vIGxpc3RlbmVycyBhcmUgdW5zdWJzY3JpYmVkIGZyb20gd2l0aGluIHRoZSBldmVudCBoYW5kbGVycyBkdXJpbmcgYSBkaXNwYXRjaCAoYmVjYXVzZSB0aGUgaW5kaWNlcyBjaGFuZ2UgYW5kXG4gICAgLy8gbGlzdGVuZXJzIGFyZSBzaGlmdGVkIHdpdGhpbiB0aGUgYXJyYXkpLlxuICAgIC8vIFRoaXMgbWVhbnMgdGhhdCBsaXN0ZW5lciB4KzEgd2lsbCBzdGlsbCBiZSBjYWxsZWQgaWYgdW5zdWJzY3JpYmVkIGZyb20gd2l0aGluIHRoZSBoYW5kbGVyIG9mIGxpc3RlbmVyIHgsIGFzIHdlbGxcbiAgICAvLyBhcyBsaXN0ZW5lciB5KzEgd2lsbCBub3QgYmUgY2FsbGVkIHdoZW4gc3Vic2NyaWJlZCBmcm9tIHdpdGhpbiB0aGUgaGFuZGxlciBvZiBsaXN0ZW5lciB5LlxuICAgIC8vIEFycmF5LnNsaWNlKDApIGlzIHRoZSBmYXN0ZXN0IGFycmF5IGNvcHkgbWV0aG9kIGFjY29yZGluZyB0bzogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIxNTE0MjU0LzM3MDI1MlxuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzLnNsaWNlKDApO1xuICAgIGZvciAobGV0IGxpc3RlbmVyIG9mIGxpc3RlbmVycykge1xuICAgICAgbGlzdGVuZXIuZmlyZShzZW5kZXIsIGFyZ3MpO1xuXG4gICAgICBpZiAobGlzdGVuZXIuaXNPbmNlKCkpIHtcbiAgICAgICAgbGlzdGVuZXJzVG9SZW1vdmUucHVzaChsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIG9uZS10aW1lIGxpc3RlbmVyXG4gICAgZm9yIChsZXQgbGlzdGVuZXJUb1JlbW92ZSBvZiBsaXN0ZW5lcnNUb1JlbW92ZSkge1xuICAgICAgQXJyYXlVdGlscy5yZW1vdmUodGhpcy5saXN0ZW5lcnMsIGxpc3RlbmVyVG9SZW1vdmUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBldmVudCB0aGF0IHRoaXMgZGlzcGF0Y2hlciBtYW5hZ2VzIGFuZCBvbiB3aGljaCBsaXN0ZW5lcnMgY2FuIHN1YnNjcmliZSBhbmQgdW5zdWJzY3JpYmUgZXZlbnQgaGFuZGxlcnMuXG4gICAqIEByZXR1cm5zIHtFdmVudH1cbiAgICovXG4gIGdldEV2ZW50KCk6IEV2ZW50PFNlbmRlciwgQXJncz4ge1xuICAgIC8vIEZvciBub3csIGp1c3QgY2FzdCB0aGUgZXZlbnQgZGlzcGF0Y2hlciB0byB0aGUgZXZlbnQgaW50ZXJmYWNlLiBBdCBzb21lIHBvaW50IGluIHRoZSBmdXR1cmUgd2hlbiB0aGVcbiAgICAvLyBjb2RlYmFzZSBncm93cywgaXQgbWlnaHQgbWFrZSBzZW5zZSB0byBzcGxpdCB0aGUgZGlzcGF0Y2hlciBpbnRvIHNlcGFyYXRlIGRpc3BhdGNoZXIgYW5kIGV2ZW50IGNsYXNzZXMuXG4gICAgcmV0dXJuIDxFdmVudDxTZW5kZXIsIEFyZ3M+PnRoaXM7XG4gIH1cbn1cblxuLyoqXG4gKiBBIGJhc2ljIGV2ZW50IGxpc3RlbmVyIHdyYXBwZXIgdG8gbWFuYWdlIGxpc3RlbmVycyB3aXRoaW4gdGhlIHtAbGluayBFdmVudERpc3BhdGNoZXJ9LiBUaGlzIGlzIGEgJ3ByaXZhdGUnIGNsYXNzXG4gKiBmb3IgaW50ZXJuYWwgZGlzcGF0Y2hlciB1c2UgYW5kIGl0IGlzIHRoZXJlZm9yZSBub3QgZXhwb3J0ZWQuXG4gKi9cbmNsYXNzIEV2ZW50TGlzdGVuZXJXcmFwcGVyPFNlbmRlciwgQXJncz4ge1xuXG4gIHByaXZhdGUgZXZlbnRMaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcjxTZW5kZXIsIEFyZ3M+O1xuICBwcml2YXRlIG9uY2U6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IobGlzdGVuZXI6IEV2ZW50TGlzdGVuZXI8U2VuZGVyLCBBcmdzPiwgb25jZTogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgdGhpcy5ldmVudExpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgdGhpcy5vbmNlID0gb25jZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB3cmFwcGVkIGV2ZW50IGxpc3RlbmVyLlxuICAgKiBAcmV0dXJucyB7RXZlbnRMaXN0ZW5lcjxTZW5kZXIsIEFyZ3M+fVxuICAgKi9cbiAgZ2V0IGxpc3RlbmVyKCk6IEV2ZW50TGlzdGVuZXI8U2VuZGVyLCBBcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRMaXN0ZW5lcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB0aGUgd3JhcHBlZCBldmVudCBsaXN0ZW5lciB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHMuXG4gICAqIEBwYXJhbSBzZW5kZXJcbiAgICogQHBhcmFtIGFyZ3NcbiAgICovXG4gIGZpcmUoc2VuZGVyOiBTZW5kZXIsIGFyZ3M6IEFyZ3MpIHtcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXIoc2VuZGVyLCBhcmdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhpcyBsaXN0ZW5lciBpcyBzY2hlZHVsZWQgdG8gYmUgY2FsbGVkIG9ubHkgb25jZS5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IG9uY2UgaWYgdHJ1ZVxuICAgKi9cbiAgaXNPbmNlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm9uY2U7XG4gIH1cblxuICBjbGVhcigpOiB2b2lkIHtcbiAgfVxufVxuXG5pbnRlcmZhY2UgRXZlbnRBdHRyaWJ1dGVzPFNlbmRlciwgQXJncz4ge1xuICBzZW5kZXI6IFNlbmRlcjtcbiAgYXJnczogQXJncztcbn1cblxuLyoqXG4gKiBFeHRlbmRzIHRoZSBiYXNpYyB7QGxpbmsgRXZlbnRMaXN0ZW5lcldyYXBwZXJ9IHdpdGggcmF0ZS1saW1pdGluZyBmdW5jdGlvbmFsaXR5LlxuICovXG5jbGFzcyBSYXRlTGltaXRlZEV2ZW50TGlzdGVuZXJXcmFwcGVyPFNlbmRlciwgQXJncz4gZXh0ZW5kcyBFdmVudExpc3RlbmVyV3JhcHBlcjxTZW5kZXIsIEFyZ3M+IHtcblxuICBwcml2YXRlIHJlYWRvbmx5IHJhdGVNczogbnVtYmVyO1xuICBwcml2YXRlIHJlYWRvbmx5IHJhdGVMaW1pdGluZ0V2ZW50TGlzdGVuZXI6IEV2ZW50TGlzdGVuZXI8U2VuZGVyLCBBcmdzPjtcblxuICAvLyBzYXZlIGxhc3Qgc2VlbiBldmVudCBhdHRyaWJ1dGVzXG4gIHByaXZhdGUgbGFzdFNlZW5FdmVudDogRXZlbnRBdHRyaWJ1dGVzPFNlbmRlciwgQXJncz47XG5cbiAgcHJpdmF0ZSByYXRlTGltaXRUaW1vdXQ6IFRpbWVvdXQ7XG5cbiAgY29uc3RydWN0b3IobGlzdGVuZXI6IEV2ZW50TGlzdGVuZXI8U2VuZGVyLCBBcmdzPiwgcmF0ZU1zOiBudW1iZXIpIHtcbiAgICBzdXBlcihsaXN0ZW5lcik7IC8vIHNldHMgdGhlIGV2ZW50IGxpc3RlbmVyIHNpbmtcblxuICAgIHRoaXMucmF0ZU1zID0gcmF0ZU1zO1xuXG4gICAgLy8gc3RhcnRpbmcgbGltaXRpbmcgdGhlIGV2ZW50cyB0byB0aGUgZ2l2ZW4gdmFsdWVcbiAgICBjb25zdCBzdGFydFJhdGVMaW1pdGluZyA9ICgpID0+IHtcbiAgICAgIHRoaXMucmF0ZUxpbWl0VGltb3V0LnN0YXJ0KCk7XG4gICAgfTtcblxuICAgIC8vIHRpbW91dCBmb3IgbGltaXRpbmcgdGhlIGV2ZW50c1xuICAgIHRoaXMucmF0ZUxpbWl0VGltb3V0ID0gbmV3IFRpbWVvdXQodGhpcy5yYXRlTXMsICgpID0+IHtcbiAgICAgIGlmICh0aGlzLmxhc3RTZWVuRXZlbnQpIHtcbiAgICAgICAgdGhpcy5maXJlU3VwZXIodGhpcy5sYXN0U2VlbkV2ZW50LnNlbmRlciwgdGhpcy5sYXN0U2VlbkV2ZW50LmFyZ3MpO1xuICAgICAgICBzdGFydFJhdGVMaW1pdGluZygpOyAvLyBzdGFydCByYXRlTGltaXRpbmcgYWdhaW4gdG8ga2VlcCByYXRlIGxpbWl0IGFjdGl2ZSBldmVuIGFmdGVyIGZpcmluZyB0aGUgbGFzdCBzZWVuIGV2ZW50XG4gICAgICAgIHRoaXMubGFzdFNlZW5FdmVudCA9IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBJbiBjYXNlIHRoZSBldmVudHMgc3RvcHBpbmcgZHVyaW5nIHRoZSByYXRlTGltaXRpbmcgd2UgbmVlZCB0byB0cmFjayB0aGUgbGFzdCBzZWVuIG9uZSBhbmQgZGVsZWdhdGUgYWZ0ZXIgdGhlXG4gICAgLy8gcmF0ZSBsaW1pdGluZyBpcyBmaW5pc2hlZC4gVGhpcyBwcmV2ZW50cyBtaXNzaW5nIHRoZSBsYXN0IHVwZGF0ZSBkdWUgdG8gdGhlIHJhdGUgbGltaXQuXG4gICAgdGhpcy5yYXRlTGltaXRpbmdFdmVudExpc3RlbmVyID0gKHNlbmRlcjogU2VuZGVyLCBhcmdzOiBBcmdzKSA9PiB7XG4gICAgICAvLyBvbmx5IGZpcmUgZXZlbnRzIGlmIHRoZSByYXRlTGltaXRpbmcgaXMgbm90IHJ1bm5pbmdcbiAgICAgIGlmICh0aGlzLnNob3VsZEZpcmVFdmVudCgpKSB7XG4gICAgICAgIHRoaXMuZmlyZVN1cGVyKHNlbmRlciwgYXJncyk7XG4gICAgICAgIHN0YXJ0UmF0ZUxpbWl0aW5nKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sYXN0U2VlbkV2ZW50ID0ge1xuICAgICAgICBzZW5kZXI6IHNlbmRlcixcbiAgICAgICAgYXJnczogYXJncyxcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgc2hvdWxkRmlyZUV2ZW50KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5yYXRlTGltaXRUaW1vdXQuaXNBY3RpdmUoKTtcbiAgfVxuXG4gIHByaXZhdGUgZmlyZVN1cGVyKHNlbmRlcjogU2VuZGVyLCBhcmdzOiBBcmdzKSB7XG4gICAgLy8gRmlyZSB0aGUgYWN0dWFsIGV4dGVybmFsIGV2ZW50IGxpc3RlbmVyXG4gICAgc3VwZXIuZmlyZShzZW5kZXIsIGFyZ3MpO1xuICB9XG5cbiAgZmlyZShzZW5kZXI6IFNlbmRlciwgYXJnczogQXJncykge1xuICAgIC8vIEZpcmUgdGhlIGludGVybmFsIHJhdGUtbGltaXRpbmcgbGlzdGVuZXIgaW5zdGVhZCBvZiB0aGUgZXh0ZXJuYWwgZXZlbnQgbGlzdGVuZXJcbiAgICB0aGlzLnJhdGVMaW1pdGluZ0V2ZW50TGlzdGVuZXIoc2VuZGVyLCBhcmdzKTtcbiAgfVxuXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIHN1cGVyLmNsZWFyKCk7XG4gICAgdGhpcy5yYXRlTGltaXRUaW1vdXQuY2xlYXIoKTtcbiAgfVxufVxuIiwiY29uc3QgRm9jdXNWaXNpYmxlQ3NzQ2xhc3NOYW1lID0gJ3t7UFJFRklYfX0tZm9jdXMtdmlzaWJsZSc7XG5cbmV4cG9ydCBjbGFzcyBGb2N1c1Zpc2liaWxpdHlUcmFja2VyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBldmVudEhhbmRsZXJNYXA6IHsgW2V2ZW50TmFtZTogc3RyaW5nXTogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdCB9O1xuICBwcml2YXRlIGxhc3RJbnRlcmFjdGlvbldhc0tleWJvYXJkOiBib29sZWFuID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJpdG1vdmluVWlQcmVmaXg6IHN0cmluZykge1xuICAgIHRoaXMuZXZlbnRIYW5kbGVyTWFwID0ge1xuICAgICAgbW91c2Vkb3duOiB0aGlzLm9uTW91c2VPclBvaW50ZXJPclRvdWNoLFxuICAgICAgcG9pbnRlcmRvd246IHRoaXMub25Nb3VzZU9yUG9pbnRlck9yVG91Y2gsXG4gICAgICB0b3VjaHN0YXJ0OiB0aGlzLm9uTW91c2VPclBvaW50ZXJPclRvdWNoLFxuICAgICAga2V5ZG93bjogdGhpcy5vbktleURvd24sXG4gICAgICBmb2N1czogdGhpcy5vbkZvY3VzLFxuICAgICAgYmx1cjogdGhpcy5vbkJsdXIsXG4gICAgfTtcbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIHByaXZhdGUgb25LZXlEb3duID0gKGU6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICBpZiAoZS5tZXRhS2V5IHx8IGUuYWx0S2V5IHx8IGUuY3RybEtleSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMubGFzdEludGVyYWN0aW9uV2FzS2V5Ym9hcmQgPSB0cnVlO1xuICB9O1xuXG4gIHByaXZhdGUgb25Nb3VzZU9yUG9pbnRlck9yVG91Y2ggPSAoKSA9PiAodGhpcy5sYXN0SW50ZXJhY3Rpb25XYXNLZXlib2FyZCA9IGZhbHNlKTtcblxuICBwcml2YXRlIG9uRm9jdXMgPSAoeyB0YXJnZXQ6IGVsZW1lbnQgfTogRm9jdXNFdmVudCkgPT4ge1xuICAgIGlmIChcbiAgICAgIHRoaXMubGFzdEludGVyYWN0aW9uV2FzS2V5Ym9hcmQgJiZcbiAgICAgIGlzSHRtbEVsZW1lbnQoZWxlbWVudCkgJiZcbiAgICAgIGlzQml0bW92aW5VaShlbGVtZW50LCB0aGlzLmJpdG1vdmluVWlQcmVmaXgpICYmXG4gICAgICAhZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoRm9jdXNWaXNpYmxlQ3NzQ2xhc3NOYW1lKVxuICAgICkge1xuICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKEZvY3VzVmlzaWJsZUNzc0NsYXNzTmFtZSk7XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgb25CbHVyID0gKHsgdGFyZ2V0OiBlbGVtZW50IH06IEZvY3VzRXZlbnQpID0+IHtcbiAgICBpZiAoaXNIdG1sRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKEZvY3VzVmlzaWJsZUNzc0NsYXNzTmFtZSk7XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgcmVnaXN0ZXJFdmVudExpc3RlbmVycygpOiB2b2lkIHtcbiAgICBmb3IgKGNvbnN0IGV2ZW50IGluIHRoaXMuZXZlbnRIYW5kbGVyTWFwKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCB0aGlzLmV2ZW50SGFuZGxlck1hcFtldmVudF0sIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdW5yZWdpc3RlckV2ZW50TGlzdGVuZXJzKCk6IHZvaWQge1xuICAgIGZvciAoY29uc3QgZXZlbnQgaW4gdGhpcy5ldmVudEhhbmRsZXJNYXApIHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIHRoaXMuZXZlbnRIYW5kbGVyTWFwW2V2ZW50XSwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgdGhpcy51bnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0JpdG1vdmluVWkoZWxlbWVudDogRWxlbWVudCwgYml0bW92aW5VaVByZWZpeDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBlbGVtZW50LmlkLmluZGV4T2YoYml0bW92aW5VaVByZWZpeCkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGlzSHRtbEVsZW1lbnQoZWxlbWVudDogdW5rbm93bik6IGVsZW1lbnQgaXMgSFRNTEVsZW1lbnQgJiB7IGNsYXNzTGlzdDogRE9NVG9rZW5MaXN0IH0ge1xuICByZXR1cm4gKFxuICAgIGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiBlbGVtZW50LmNsYXNzTGlzdCBpbnN0YW5jZW9mIERPTVRva2VuTGlzdFxuICApO1xufVxuIiwiaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbi8qKlxuICogVGhlIEdyb3VwIFBsYXliYWNrIEFQSSBvZmZlcnMgY29udHJvbCBvdmVyIHN5bmNocm9uaXplZCBwbGF5YmFjayBvZiBhIGdyb3VwIG9mIGNsaWVudHMsIGUuZy4gZm9yIEFwcGxlIFNoYXJlUGxheVxuICogc2Vzc2lvbnMuXG5cbiAqIE5vdGU6IFRoZSBBUEkgY3VycmVudGx5IG9ubHkgY292ZXJzIHRoZSBpbW1lZGlhdGUgbmVlZHMgb2YgdGhlIGlPUyBTREsgaW4gY29tYmluYXRpb24gd2l0aCBvdXIgVUkgd2hpY2ggaXMgcmVnYXJkaW5nXG4gKiB0ZW1wb3JhcmlseSBzdXNwZW5kaW5nIHN5bmNocm9uaXphdGlvbiBvZiB0aGUgcGxheWVyIGZyb20gdGhlIGdyb3VwLiBCdXQgaXQgaXMgb3BlbiB0byBiZSBleHRlbmRlZCBhcyBuZWVkZWQgaW4gdGhlXG4gKiBmdXR1cmUuXG4gKi9cblxuLyoqXG4gKiBSZWFzb24gZm9yIHN1c3BlbmRpbmcgdGhlIHN5bmNocm9uaXphdGlvbiB3aXRoIHRoZSBncm91cC5cbiAqL1xuZXhwb3J0IGVudW0gR3JvdXBQbGF5YmFja1N1c3BlbnNpb25SZWFzb24ge1xuICBVc2VySXNTY3J1YmJpbmcgPSAndXNlcklzU2NydWJiaW5nJyxcbn1cblxuLyoqXG4gKiBBIHJlcHJlc2VudGF0aW9uIG9mIGEgdGVtcG9yYXJ5IGJyZWFrIGluIHBhcnRpY2lwYXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR3JvdXBQbGF5YmFja1N1c3BlbnNpb24ge1xuICAvKipcbiAgICogVGhlIHJlYXNvbiBmb3IgdGhlIHN1c3BlbnNpb24uXG4gICAqL1xuICByZWFzb246IEdyb3VwUGxheWJhY2tTdXNwZW5zaW9uUmVhc29uO1xuXG4gIC8qKlxuICAgKiBBIHVuaXF1ZSBpZGVudGlmaWVyLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcbn1cblxuLyoqXG4gKiBPcHRpb25zIHRvIGJlIGNvbnNpZGVyZWQgdXBvbiBlbmRpbmcgYSBzdXNwZW5zaW9uLlxuICovXG5pbnRlcmZhY2UgRW5kR3JvdXBQbGF5YmFja1N1c3BlbnNpb25PcHRpb25zIHtcbiAgLyoqXG4gICAqIEEgcHJvcG9zZWQgdGltZSBmb3IgdGhlIGdyb3VwIHRvIHNlZWsgdG8uXG4gICAqL1xuICBwcm9wb3NlZFBsYXliYWNrVGltZT86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBHcm91cCBQbGF5YmFjayBBUEkgb2ZmZXJpbmcgY29udHJvbCBvdmVyIHRoZSBwbGF5ZXIncyBwYXJ0aWNpcGF0aW9uIGluIHN5bmNocm9uaXplZCBwbGF5YmFjayBvZiBhIGdyb3VwIG9mIGNsaWVudHMuXG4gKiBGb3IgZXhhbXBsZSwgYW4gQXBwbGUgU2hhcmVQbGF5IHNlc3Npb24uXG4gKi9cbmludGVyZmFjZSBHcm91cFBsYXliYWNrQVBJIHtcbiAgLyoqXG4gICAqIEJlZ2lucyBhIG5ldyBzdXNwZW5zaW9uLlxuICAgKlxuICAgKiBUZW1wb3JhcmlseSBzdXNwZW5kcyB0aGUgbG9jYWwgcGxheWVyJ3Mgc3luY2hyb25pemF0aW9uIHdpdGggdGhlIGdyb3VwLiBXaGlsZSBzdXNwZW5kZWQsIGFueSBsb2NhbCBwbGF5YmFjayBjb250cm9sXG4gICAqIGFjdGlvbiAoZS5nLiBwbGF5LCBwYXVzZSwgc2Vlaykgd2lsbCBub3QgYmUgZm9yd2FyZGVkIHRvIHRoZSBncm91cCBhbmQgYW55IGFjdGlvbiBvcmlnaW5hdGluZyBmcm9tIGFub3RoZXIgZ3JvdXBcbiAgICogcGFydGljaXBhbnQgd2lsbCBub3QgYmUgcGVyZm9ybWVkIG9uIHRoZSBsb2NhbCBwbGF5ZXIuXG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqIEl0IGlzIHBvc3NpYmxlIGZvciBtdWx0aXBsZSBzdXNwZW5zaW9ucyB0byBleGlzdCBleGlzdCBzaW11bHRhbmVvdXNseSB3aXRoIGRpZmZlcmVudCBzdXNwZW5zaW9uIHJlYXNvbnMuIFRoZSBwbGF5ZXJcbiAgICogd2lsbCByZS1zeW5jaHJvbml6ZSB3aXRoIHRoZSBncm91cCBvbmNlIGFsbCBleGlzdGluZyBzdXNwZW5zaW9ucyBoYXZlIGVuZGVkLlxuICAgKlxuICAgKiBAcGFyYW0gcmVhc29uIC0gVGhlIHJlYXNvbiBmb3IgdGhlIHN1c3BlbnNpb24uXG4gICAqIEByZXR1cm5zIEEgc3VzcGVuc2lvbiBvYmplY3QuXG4gICAqL1xuICBiZWdpblN1c3BlbnNpb24ocmVhc29uOiBHcm91cFBsYXliYWNrU3VzcGVuc2lvblJlYXNvbik6IEdyb3VwUGxheWJhY2tTdXNwZW5zaW9uO1xuXG4gIC8qKlxuICAgKiBFbmRzIHRoZSBnaXZlbiBzdXNwZW5zaW9uLlxuICAgKlxuICAgKiBAcGFyYW0gc3VzcGVuc2lvbiAtIFRoZSBzdXNwZW5zaW9uIHRvIGJlIGVuZGVkLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsLiBPcHRpb25zIHRvIGJlIGNvbnNpZGVyZWQgd2hlbiBlbmRpbmcgdGhlIHN1c3BlbnNpb24sIGUuZy4gYSBwcm9wb3NlZCBzZWVrIHRpbWUgZm9yIHRoZSBncm91cC5cbiAgICovXG4gIGVuZFN1c3BlbnNpb24oc3VzcGVuc2lvbjogR3JvdXBQbGF5YmFja1N1c3BlbnNpb24sIG9wdGlvbnM/OiBFbmRHcm91cFBsYXliYWNrU3VzcGVuc2lvbk9wdGlvbnMpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBwbGF5ZXIgaXMgY3VycmVudGx5IHBhcnRpY2lwYXRpbmcgaW4gYSBncm91cCBwbGF5YmFjayBzZXNzaW9uLlxuICAgKi9cbiAgaGFzSm9pbmVkKCk6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHBsYXllciBpcyBjdXJyZW50bHkgc3VzcGVuZGluZyBzeW5jaHJvbml6YXRpb24gd2l0aCB0aGUgZ3JvdXAuXG4gICAqIENhbiBvbmx5IHJldHVybiB0cnVlIGlmIGBoYXNKb2luZWQoKWAgYWxzbyBpcyB0cnVlLlxuICAgKi9cbiAgaXNTdXNwZW5kZWQoKTogYm9vbGVhbjtcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIEV4dGVuZGVkUGxheWVyQVBJIGV4dGVuZHMgUGxheWVyQVBJIHtcbiAgLyoqXG4gICAqIEdyb3VwIFBsYXliYWNrIEFQSVxuICAgKlxuICAgKiBAcmVtYXJrc1xuICAgKiBUaGlzIEFQSSBpcyBvcHRpb25hbCBhcyBub3QgZXZlcnkgcGxhdGZvcm0gc3VwcG9ydHMgZ3JvdXAgcGxheWJhY2suXG4gICAqL1xuICBncm91cFBsYXliYWNrPzogR3JvdXBQbGF5YmFja0FQSTtcbn1cbiIsImV4cG9ydCBuYW1lc3BhY2UgR3VpZCB7XG5cbiAgbGV0IGd1aWQgPSAxO1xuXG4gIGV4cG9ydCBmdW5jdGlvbiBuZXh0KCkge1xuICAgIHJldHVybiBndWlkKys7XG4gIH1cbn1cbiIsImltcG9ydCB7RE9NfSBmcm9tICcuL2RvbSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW1hZ2VMb2FkZWRDYWxsYmFjayB7XG4gICh1cmw6IHN0cmluZywgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgSW1hZ2VMb2FkZXJTdGF0ZSB7XG4gIHVybDogc3RyaW5nO1xuICBpbWFnZTogRE9NO1xuICBsb2FkZWRDYWxsYmFjazogSW1hZ2VMb2FkZWRDYWxsYmFjaztcbiAgbG9hZGVkOiBib29sZWFuO1xuICB3aWR0aDogbnVtYmVyO1xuICBoZWlnaHQ6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBUcmFja3MgdGhlIGxvYWRpbmcgc3RhdGUgb2YgaW1hZ2VzLlxuICovXG5leHBvcnQgY2xhc3MgSW1hZ2VMb2FkZXIge1xuXG4gIHByaXZhdGUgc3RhdGU6IHsgW3VybDogc3RyaW5nXTogSW1hZ2VMb2FkZXJTdGF0ZTsgfSA9IHt9O1xuXG4gIC8qKlxuICAgKiBMb2FkcyBhbiBpbWFnZSBhbmQgY2FsbCB0aGUgY2FsbGJhY2sgb25jZSB0aGUgaW1hZ2UgaXMgbG9hZGVkLiBJZiB0aGUgaW1hZ2UgaXMgYWxyZWFkeSBsb2FkZWQsIHRoZSBjYWxsYmFja1xuICAgKiBpcyBjYWxsZWQgaW1tZWRpYXRlbHksIGVsc2UgaXQgaXMgY2FsbGVkIG9uY2UgbG9hZGluZyBoYXMgZmluaXNoZWQuIENhbGxpbmcgdGhpcyBtZXRob2QgbXVsdGlwbGUgdGltZXMgZm9yIHRoZVxuICAgKiBzYW1lIGltYWdlIHdoaWxlIGl0IGlzIGxvYWRpbmcgY2FsbHMgb25seSBsZXQgY2FsbGJhY2sgcGFzc2VkIGludG8gdGhlIGxhc3QgY2FsbC5cbiAgICogQHBhcmFtIHVybCBUaGUgdXJsIHRvIHRoZSBpbWFnZSB0byBsb2FkXG4gICAqIEBwYXJhbSBsb2FkZWRDYWxsYmFjayBUaGUgY2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgaW1hZ2UgaXMgbG9hZGVkXG4gICAqL1xuICBsb2FkKHVybDogc3RyaW5nLCBsb2FkZWRDYWxsYmFjazogSW1hZ2VMb2FkZWRDYWxsYmFjayk6IHZvaWQge1xuICAgIGlmICghdGhpcy5zdGF0ZVt1cmxdKSB7XG4gICAgICAvLyBXaGVuIHRoZSBpbWFnZSB3YXMgbmV2ZXIgYXR0ZW1wdGVkIHRvIGJlIGxvYWRlZCBiZWZvcmUsIHdlIGNyZWF0ZSBhIHN0YXRlIGFuZCBzdG9yZSBpdCBpbiB0aGUgc3RhdGUgbWFwXG4gICAgICAvLyBmb3IgbGF0ZXIgdXNlIHdoZW4gdGhlIHNhbWUgaW1hZ2UgaXMgcmVxdWVzdGVkIHRvIGJlIGxvYWRlZCBhZ2Fpbi5cbiAgICAgIGxldCBzdGF0ZTogSW1hZ2VMb2FkZXJTdGF0ZSA9IHtcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIGltYWdlOiBuZXcgRE9NKCdpbWcnLCB7fSksXG4gICAgICAgIGxvYWRlZENhbGxiYWNrOiBsb2FkZWRDYWxsYmFjayxcbiAgICAgICAgbG9hZGVkOiBmYWxzZSxcbiAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgIGhlaWdodDogMCxcbiAgICAgIH07XG4gICAgICB0aGlzLnN0YXRlW3VybF0gPSBzdGF0ZTtcblxuICAgICAgLy8gTGlzdGVuIHRvIHRoZSBsb2FkIGV2ZW50LCB1cGRhdGUgdGhlIHN0YXRlIGFuZCBjYWxsIHRoZSBjYWxsYmFjayBvbmNlIHRoZSBpbWFnZSBpcyBsb2FkZWRcbiAgICAgIHN0YXRlLmltYWdlLm9uKCdsb2FkJywgKGUpID0+IHtcbiAgICAgICAgc3RhdGUubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgc3RhdGUud2lkdGggPSAoPEhUTUxJbWFnZUVsZW1lbnQ+c3RhdGUuaW1hZ2UuZ2V0KDApKS53aWR0aDtcbiAgICAgICAgc3RhdGUuaGVpZ2h0ID0gKDxIVE1MSW1hZ2VFbGVtZW50PnN0YXRlLmltYWdlLmdldCgwKSkuaGVpZ2h0O1xuXG4gICAgICAgIHRoaXMuY2FsbExvYWRlZENhbGxiYWNrKHN0YXRlKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBTZXQgdGhlIGltYWdlIFVSTCB0byBzdGFydCB0aGUgbG9hZGluZ1xuICAgICAgc3RhdGUuaW1hZ2UuYXR0cignc3JjJywgc3RhdGUudXJsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gV2UgaGF2ZSBhIHN0YXRlIGZvciB0aGUgcmVxdWVzdGVkIGltYWdlLCBzbyBpdCBpcyBlaXRoZXIgYWxyZWFkeSBsb2FkZWQgb3IgY3VycmVudGx5IGxvYWRpbmdcbiAgICAgIGxldCBzdGF0ZSA9IHRoaXMuc3RhdGVbdXJsXTtcblxuICAgICAgLy8gV2Ugb3ZlcndyaXRlIHRoZSBjYWxsYmFjayB0byBtYWtlIHN1cmUgdGhhdCBvbmx5IHRoZSBjYWxsYmFjayBvZiB0aGUgbGF0ZXN0IGNhbGwgZ2V0cyBleGVjdXRlZC5cbiAgICAgIC8vIEVhcmxpZXIgY2FsbGJhY2tzIGJlY29tZSBpbnZhbGlkIG9uY2UgYSBuZXcgbG9hZCBjYWxsIGFycml2ZXMsIGFuZCB0aGV5IGFyZSBub3QgY2FsbGVkIGFzIGxvbmcgYXMgdGhlIGltYWdlXG4gICAgICAvLyBpcyBub3QgbG9hZGVkLlxuICAgICAgc3RhdGUubG9hZGVkQ2FsbGJhY2sgPSBsb2FkZWRDYWxsYmFjaztcblxuICAgICAgLy8gV2hlbiB0aGUgaW1hZ2UgaXMgYWxyZWFkeSBsb2FkZWQsIHdlIGRpcmVjdGx5IGV4ZWN1dGUgdGhlIGNhbGxiYWNrIGluc3RlYWQgb2Ygd2FpdGluZyBmb3IgdGhlIGxvYWQgZXZlbnRcbiAgICAgIGlmIChzdGF0ZS5sb2FkZWQpIHtcbiAgICAgICAgdGhpcy5jYWxsTG9hZGVkQ2FsbGJhY2soc3RhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2FsbExvYWRlZENhbGxiYWNrKHN0YXRlOiBJbWFnZUxvYWRlclN0YXRlKTogdm9pZCB7XG4gICAgc3RhdGUubG9hZGVkQ2FsbGJhY2soc3RhdGUudXJsLCBzdGF0ZS53aWR0aCwgc3RhdGUuaGVpZ2h0KTtcbiAgfVxufVxuIiwiaW1wb3J0IHZvY2FidWxhcnlEZSBmcm9tICcuL2xhbmd1YWdlcy9kZS5qc29uJztcbmltcG9ydCB2b2NhYnVsYXJ5RW4gZnJvbSAnLi9sYW5ndWFnZXMvZW4uanNvbic7XG5pbXBvcnQgdm9jYWJ1bGFyeUVzIGZyb20gJy4vbGFuZ3VhZ2VzL2VzLmpzb24nO1xuaW1wb3J0IHsgTG9jYWxpemF0aW9uQ29uZmlnIH0gZnJvbSAnLi4vdWltYW5hZ2VyLmpzJztcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRWb2NhYnVsYXJpZXM6IFZvY2FidWxhcmllcyA9IHtcbiAgJ2VuJzogdm9jYWJ1bGFyeUVuLFxuICAnZGUnOiB2b2NhYnVsYXJ5RGUsXG4gICdlcyc6IHZvY2FidWxhcnlFcyxcbn07XG5cbmNvbnN0IGRlZmF1bHRMb2NhbGl6YXRpb25Db25maWc6IExvY2FsaXphdGlvbkNvbmZpZyA9IHtcbiAgbGFuZ3VhZ2U6ICdlbicsXG4gIHZvY2FidWxhcmllczogZGVmYXVsdFZvY2FidWxhcmllcyxcbn07XG5cbnR5cGUgTG9jYWxpemVyID0gKCkgPT4gc3RyaW5nO1xuZXhwb3J0IHR5cGUgTG9jYWxpemFibGVUZXh0ID0gc3RyaW5nIHwgTG9jYWxpemVyO1xuXG5pbnRlcmZhY2UgVm9jYWJ1bGFyeSB7XG4gICdzZXR0aW5ncy52aWRlby5xdWFsaXR5Jzogc3RyaW5nO1xuICAnc2V0dGluZ3MuYXVkaW8ucXVhbGl0eSc6IHN0cmluZztcbiAgJ3NldHRpbmdzLmF1ZGlvLnRyYWNrJzogc3RyaW5nO1xuICAnc2V0dGluZ3MuYXVkaW8ubXV0ZSc6IHN0cmluZztcbiAgJ3NldHRpbmdzLmF1ZGlvLnZvbHVtZSc6IHN0cmluZztcbiAgJ3NldHRpbmdzLnN1YnRpdGxlcyc6IHN0cmluZztcbiAgJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250LmNvbG9yJzogc3RyaW5nO1xuICAnc2V0dGluZ3Muc3VidGl0bGVzLmZvbnQub3BhY2l0eSc6IHN0cmluZztcbiAgJ3NldHRpbmdzLnN1YnRpdGxlcy5iYWNrZ3JvdW5kLmNvbG9yJzogc3RyaW5nO1xuICAnc2V0dGluZ3Muc3VidGl0bGVzLmJhY2tncm91bmQub3BhY2l0eSc6IHN0cmluZztcbiAgJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250LnNpemUnOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZSc6IHN0cmluZztcbiAgJ3NldHRpbmdzLnN1YnRpdGxlcy5jaGFyYWN0ZXJFZGdlLnJhaXNlZCc6IHN0cmluZztcbiAgJ3NldHRpbmdzLnN1YnRpdGxlcy5jaGFyYWN0ZXJFZGdlLmRlcHJlc3NlZCc6IHN0cmluZztcbiAgJ3NldHRpbmdzLnN1YnRpdGxlcy5jaGFyYWN0ZXJFZGdlLnVuaWZvcm0nOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZS5kcm9wc2hhZG93ZWQnOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHknOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkubW9ub3NwYWNlZHNlcmlmJzogc3RyaW5nO1xuICAnc2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LnByb3BvcnRpb25hbHNlcmlmJzogc3RyaW5nO1xuICAnc2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5Lm1vbm9zcGFjZWRzYW5zc2VyaWYnOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkucHJvcG9ydGlvbmFsc2Fuc3NlcmlmJzogc3RyaW5nO1xuICAnc2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LmNhc3VhbCc6IHN0cmluZztcbiAgJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5jdXJzaXZlJzogc3RyaW5nO1xuICAnc2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LnNtYWxsY2FwaXRhbCc6IHN0cmluZztcbiAgJ3NldHRpbmdzLnN1YnRpdGxlcy53aW5kb3cuY29sb3InOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5zdWJ0aXRsZXMud2luZG93Lm9wYWNpdHknOiBzdHJpbmc7XG4gICdwbGF5Jzogc3RyaW5nO1xuICAnc2V0dGluZ3MudGltZS5ob3Vycyc6IHN0cmluZztcbiAgJ3NldHRpbmdzLnRpbWUubWludXRlcyc6IHN0cmluZztcbiAgJ3NldHRpbmdzLnRpbWUuc2Vjb25kcyc6IHN0cmluZztcbiAgJ2NvbG9ycy53aGl0ZSc6IHN0cmluZztcbiAgJ2NvbG9ycy5ibGFjayc6IHN0cmluZztcbiAgJ2NvbG9ycy5yZWQnOiBzdHJpbmc7XG4gICdjb2xvcnMuZ3JlZW4nOiBzdHJpbmc7XG4gICdjb2xvcnMuYmx1ZSc6IHN0cmluZztcbiAgJ2NvbG9ycy5jeWFuJzogc3RyaW5nO1xuICAnY29sb3JzLnllbGxvdyc6IHN0cmluZztcbiAgJ2NvbG9ycy5tYWdlbnRhJzogc3RyaW5nO1xuICAncGVyY2VudCc6IHN0cmluZztcbiAgJ3NldHRpbmdzJzogc3RyaW5nO1xuICAnYWRzLnJlbWFpbmluZ1RpbWUnOiBzdHJpbmc7XG4gICdwaWN0dXJlSW5QaWN0dXJlJzogc3RyaW5nO1xuICAnYXBwbGVBaXJwbGF5Jzogc3RyaW5nO1xuICAnZ29vZ2xlQ2FzdCc6IHN0cmluZztcbiAgJ3ZyJzogc3RyaW5nO1xuICAnb2ZmJzogc3RyaW5nO1xuICAnYXV0byc6IHN0cmluZztcbiAgJ2JhY2snOiBzdHJpbmc7XG4gICdyZXNldCc6IHN0cmluZztcbiAgJ3JlcGxheSc6IHN0cmluZztcbiAgJ25vcm1hbCc6IHN0cmluZztcbiAgJ2RlZmF1bHQnOiBzdHJpbmc7XG4gICdvcGVuJzogc3RyaW5nO1xuICAnY2xvc2UnOiBzdHJpbmc7XG4gICdmdWxsc2NyZWVuJzogc3RyaW5nO1xuICAnc3BlZWQnOiBzdHJpbmc7XG4gICdwbGF5UGF1c2UnOiBzdHJpbmc7XG4gICdsaXZlJzogc3RyaW5nO1xuICAnc3VidGl0bGUuZXhhbXBsZSc6IHN0cmluZztcbiAgJ3N1YnRpdGxlLnNlbGVjdCc6IHN0cmluZztcbiAgJ3BsYXlpbmdPbic6IHN0cmluZztcbiAgJ2Nvbm5lY3RpbmdUbyc6IHN0cmluZztcbiAgJ3dhdGVybWFya0xpbmsnOiBzdHJpbmc7XG4gICdjb250cm9sQmFyJzogc3RyaW5nO1xuICAncGxheWVyJzogc3RyaW5nO1xuICAnc2Vla0Jhcic6IHN0cmluZztcbiAgJ3NlZWtCYXIudmFsdWUnOiBzdHJpbmc7XG4gICdzZWVrQmFyLnRpbWVzaGlmdCc6IHN0cmluZztcbiAgJ3NlZWtCYXIuZHVyYXRpb25UZXh0Jzogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBDdXN0b21Wb2NhYnVsYXJ5PFY+ID0gViAmIFBhcnRpYWw8Vm9jYWJ1bGFyeT47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVm9jYWJ1bGFyaWVzIHtcbiAgW2tleTogc3RyaW5nXTogQ3VzdG9tVm9jYWJ1bGFyeTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+Pjtcbn1cblxuY2xhc3MgSTE4biB7XG4gIHByaXZhdGUgbGFuZ3VhZ2U6IHN0cmluZztcbiAgcHJpdmF0ZSB2b2NhYnVsYXJ5OiBDdXN0b21Wb2NhYnVsYXJ5PFJlY29yZDxzdHJpbmcsIHN0cmluZz4+O1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogTG9jYWxpemF0aW9uQ29uZmlnKSB7XG4gICAgdGhpcy5zZXRDb25maWcoY29uZmlnKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRDb25maWcoY29uZmlnOiBMb2NhbGl6YXRpb25Db25maWcpIHtcbiAgICBjb25zdCBtZXJnZWRDb25maWcgPSB7IC4uLmRlZmF1bHRMb2NhbGl6YXRpb25Db25maWcsIC4uLmNvbmZpZyB9O1xuICAgIGNvbnN0IGRldGVjdEJyb3dzZXJMYW5ndWFnZSA9IG1lcmdlZENvbmZpZy5sYW5ndWFnZSA9PT0gJ2F1dG8nO1xuICAgIGNvbnN0IHZvY2FidWxhcmllcyA9IHRoaXMubWVyZ2VWb2NhYnVsYXJpZXNXaXRoRGVmYXVsdFZvY2FidWxhcmllcyhtZXJnZWRDb25maWcudm9jYWJ1bGFyaWVzKTtcbiAgICB0aGlzLmluaXRpYWxpemVMYW5ndWFnZShtZXJnZWRDb25maWcubGFuZ3VhZ2UsIGRldGVjdEJyb3dzZXJMYW5ndWFnZSwgdm9jYWJ1bGFyaWVzKTtcbiAgICB0aGlzLmluaXRpYWxpemVWb2NhYnVsYXJ5KHZvY2FidWxhcmllcyk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBjb250YWluc0xhbmd1YWdlKHZvY2FidWxhcmllczogVm9jYWJ1bGFyaWVzLCBsYW5ndWFnZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHZvY2FidWxhcmllcy5oYXNPd25Qcm9wZXJ0eShsYW5ndWFnZSk7XG4gIH1cblxuICBwcml2YXRlIG1lcmdlVm9jYWJ1bGFyaWVzV2l0aERlZmF1bHRWb2NhYnVsYXJpZXModm9jYWJ1bGFyaWVzOiBWb2NhYnVsYXJpZXMgPSB7fSkge1xuICAgIGNvbnN0IHJhd1ZvY2FidWxhcmllczogVm9jYWJ1bGFyaWVzID0geyAuLi5kZWZhdWx0Vm9jYWJ1bGFyaWVzLCAuLi52b2NhYnVsYXJpZXMgfTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocmF3Vm9jYWJ1bGFyaWVzKS5yZWR1Y2UoKG1lcmdlZFZvY2FidWxhcmllcywgbGFuZ3VhZ2UpID0+IHtcbiAgICAgIGxldCB2b2NhYnVsYXJ5ID0gcmF3Vm9jYWJ1bGFyaWVzW2xhbmd1YWdlXTtcbiAgICAgIGlmIChJMThuLmNvbnRhaW5zTGFuZ3VhZ2UoZGVmYXVsdFZvY2FidWxhcmllcywgbGFuZ3VhZ2UpICYmIEkxOG4uY29udGFpbnNMYW5ndWFnZSh2b2NhYnVsYXJpZXMsIGxhbmd1YWdlKSkge1xuICAgICAgICB2b2NhYnVsYXJ5ID0geyAuLi5kZWZhdWx0Vm9jYWJ1bGFyaWVzW2xhbmd1YWdlXSwgLi4udm9jYWJ1bGFyaWVzW2xhbmd1YWdlXSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgLi4ubWVyZ2VkVm9jYWJ1bGFyaWVzLCBbbGFuZ3VhZ2VdOiB2b2NhYnVsYXJ5IH07XG4gICAgfSwge30pO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0aWFsaXplTGFuZ3VhZ2UoXG4gICAgbGFuZ3VhZ2U6IHN0cmluZyxcbiAgICBicm93c2VyTGFuZ3VhZ2VEZXRlY3Rpb25FbmFibGVkOiBib29sZWFuLFxuICAgIHZvY2FidWxhcmllczogVm9jYWJ1bGFyaWVzLFxuICApIHtcbiAgICBpZiAoYnJvd3Nlckxhbmd1YWdlRGV0ZWN0aW9uRW5hYmxlZCkge1xuICAgICAgY29uc3QgdXNlckxhbmd1YWdlID0gd2luZG93Lm5hdmlnYXRvci5sYW5ndWFnZTtcblxuICAgICAgaWYgKEkxOG4uY29udGFpbnNMYW5ndWFnZSh2b2NhYnVsYXJpZXMsIHVzZXJMYW5ndWFnZSkpIHtcbiAgICAgICAgdGhpcy5sYW5ndWFnZSA9IHVzZXJMYW5ndWFnZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2hvcnRlbmVkVXNlckxhbmd1YWdlID0gdXNlckxhbmd1YWdlLnNsaWNlKDAsIDIpO1xuICAgICAgaWYgKEkxOG4uY29udGFpbnNMYW5ndWFnZSh2b2NhYnVsYXJpZXMsIHNob3J0ZW5lZFVzZXJMYW5ndWFnZSkpIHtcbiAgICAgICAgdGhpcy5sYW5ndWFnZSA9IHNob3J0ZW5lZFVzZXJMYW5ndWFnZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGFuZ3VhZ2UgPSBsYW5ndWFnZTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdGlhbGl6ZVZvY2FidWxhcnkodm9jYWJ1bGFyaWVzOiBWb2NhYnVsYXJpZXMpIHtcbiAgICB0aGlzLnZvY2FidWxhcnkgPSBbJ2VuJywgdGhpcy5sYW5ndWFnZV1cbiAgICAgIC5yZWR1Y2UoKHZvY2FiLCBsYW5nKSA9PiAoeyAuLi52b2NhYiwgLi4uKHZvY2FidWxhcmllc1tsYW5nXSB8fCB7fSkgfSksIHt9KTtcbiAgfVxuXG4gIHByaXZhdGUgcmVwbGFjZVZhcmlhYmxlV2l0aFBsYWNlaG9sZGVySWZFeGlzdHModGV4dDogc3RyaW5nLCBjb25maWc6IGFueSkge1xuICAgIGNvbnN0IG1hdGNoZXMgPSB0ZXh0Lm1hdGNoKG5ldyBSZWdFeHAoJ3tbYS16QS1aMC05XSt9JywgJ2cnKSk7XG4gICAgaWYgKG1hdGNoZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2hlc1xuICAgICAgLm1hcCgobTogc3RyaW5nKSA9PiAoeyBtYXRjaDogbSwga2V5OiBtLnNsaWNlKDEsIC0xKSB9KSlcbiAgICAgIC5yZWR1Y2UoKHN0ciwgeyBrZXksIG1hdGNoIH0pID0+IGNvbmZpZy5oYXNPd25Qcm9wZXJ0eShrZXkpID8gc3RyLnJlcGxhY2UobWF0Y2gsIGNvbmZpZ1trZXldKSA6IHN0ciwgdGV4dCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0TG9jYWxpemVyPFYgZXh0ZW5kcyBDdXN0b21Wb2NhYnVsYXJ5PFJlY29yZDxzdHJpbmcsIHN0cmluZz4+ID0gQ3VzdG9tVm9jYWJ1bGFyeTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+Pj4oXG4gICAga2V5OiBrZXlvZiBWLFxuICAgIGNvbmZpZz86IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IG51bWJlcj4sXG4gICk6IExvY2FsaXplciB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChrZXkgPT0gbnVsbCkgeyAvLyBiZWNhdXNlIHNvbWV0aW1lcyB3ZSBjYWxsIHRvRG9tRWxlbWVudCgpIHdpdGhvdXQgY29uZmlndXJpbmcgdGhlIGNvbXBvbmVudCBvciBzZXR0aW5nIHRleHQuLi5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGxldCB2b2NhYnVsYXJ5U3RyaW5nID0gdGhpcy52b2NhYnVsYXJ5W2tleSBhcyBzdHJpbmddO1xuXG4gICAgICBpZiAodm9jYWJ1bGFyeVN0cmluZyA9PSBudWxsKSB7XG4gICAgICAgIHZvY2FidWxhcnlTdHJpbmcgPSBrZXkgYXMgc3RyaW5nO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgdm9jYWJ1bGFyeVN0cmluZyA9IHRoaXMucmVwbGFjZVZhcmlhYmxlV2l0aFBsYWNlaG9sZGVySWZFeGlzdHModm9jYWJ1bGFyeVN0cmluZywgY29uZmlnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZvY2FidWxhcnlTdHJpbmc7XG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBwZXJmb3JtTG9jYWxpemF0aW9uKHRleHQ6IExvY2FsaXphYmxlVGV4dCkge1xuICAgIHJldHVybiB0eXBlb2YgdGV4dCA9PT0gJ2Z1bmN0aW9uJyA/IHRleHQoKSA6IHRleHQ7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGkxOG4gPSBuZXcgSTE4bihkZWZhdWx0TG9jYWxpemF0aW9uQ29uZmlnKTtcbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJzZXR0aW5ncy52aWRlby5xdWFsaXR5XCI6IFwiVmlkZW9xdWFsaXTDpHRcIixcbiAgXCJzZXR0aW5ncy5hdWRpby5xdWFsaXR5XCI6IFwiQXVkaW9xdWFsaXTDpHRcIixcbiAgXCJzZXR0aW5ncy5hdWRpby50cmFja1wiOiBcIkF1ZGlvc3B1clwiLFxuICBcInNwZWVkXCI6IFwiR2VzY2h3aW5kaWdrZWl0XCIsXG4gIFwicGxheVwiOiBcIkFic3BpZWxlblwiLFxuICBcInBhdXNlXCI6IFwiUGF1c2VcIixcbiAgXCJwbGF5UGF1c2VcIjogXCJBYnNwaWVsZW4vUGF1c2VcIixcbiAgXCJvcGVuXCI6IFwiw7ZmZm5lblwiLFxuICBcImNsb3NlXCI6IFwiU2NobGllw59lblwiLFxuICBcInNldHRpbmdzLmF1ZGlvLm11dGVcIjogXCJTdHVtbXNjaGFsdHVuZ1wiLFxuICBcInNldHRpbmdzLmF1ZGlvLnZvbHVtZVwiOiBcIkxhdXRzdMOkcmtlXCIsXG4gIFwicGljdHVyZUluUGljdHVyZVwiOiBcIkJpbGQgaW0gQmlsZFwiLFxuICBcImFwcGxlQWlycGxheVwiOiBcIkFwcGxlIEFpclBsYXlcIixcbiAgXCJnb29nbGVDYXN0XCI6IFwiR29vZ2xlIENhc3RcIixcbiAgXCJ2clwiOiBcIlZSXCIsXG4gIFwic2V0dGluZ3NcIjogXCJFaW5zdGVsbHVuZ2VuXCIsXG4gIFwiZnVsbHNjcmVlblwiOiBcIlZvbGxiaWxkXCIsXG4gIFwib2ZmXCI6IFwiYXVzXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzXCI6IFwiVW50ZXJ0aXRlbFwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LnNpemVcIjogXCJHcsO2w59lXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5XCI6IFwiU2NocmlmdGFydFwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LmNvbG9yXCI6IFwiRmFyYmVcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5vcGFjaXR5XCI6IFwiRGVja2tyYWZ0XCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2VcIjogXCJSw6RuZGVyXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmJhY2tncm91bmQuY29sb3JcIjogXCJIaW50ZXJncnVuZGZhcmJlXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmJhY2tncm91bmQub3BhY2l0eVwiOiBcIkhpbnRlcmdydW5kZGVja2tyYWZ0XCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLndpbmRvdy5jb2xvclwiOiBcIkhpbnRlcmdydW5kZmFyYmVcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMud2luZG93Lm9wYWNpdHlcIjogXCJIaW50ZXJncnVuZGRlY2trcmFmdFwiLFxuICBcInNldHRpbmdzLnRpbWUuaG91cnNcIjogXCJTdHVuZGVuXCIsXG4gIFwic2V0dGluZ3MudGltZS5taW51dGVzXCI6IFwiTWludXRlblwiLFxuICBcInNldHRpbmdzLnRpbWUuc2Vjb25kc1wiOiBcIlNla3VuZGVuXCIsXG4gIFwiYmFja1wiOiBcIlp1csO8Y2tcIixcbiAgXCJyZXNldFwiOiBcIlp1csO8Y2tzZXR6ZW5cIixcbiAgXCJyZXBsYXlcIjogXCJXaWVkZXJob2xlblwiLFxuICBcImFkcy5yZW1haW5pbmdUaW1lXCI6IFwiRGllc2UgQW56ZWlnZSBlbmRldCBpbiB7cmVtYWluaW5nVGltZX0gU2VrdW5kZW5cIixcbiAgXCJkZWZhdWx0XCI6IFwic3RhbmRhcmRcIixcbiAgXCJjb2xvcnMud2hpdGVcIjogXCJ3ZWnDn1wiLFxuICBcImNvbG9ycy5ibGFja1wiOiBcInNjaHdhcnpcIixcbiAgXCJjb2xvcnMucmVkXCI6IFwicm90XCIsXG4gIFwiY29sb3JzLmdyZWVuXCI6IFwiZ3LDvG5cIixcbiAgXCJjb2xvcnMuYmx1ZVwiOiBcImJsYXVcIixcbiAgXCJjb2xvcnMueWVsbG93XCI6IFwiZ2VsYlwiLFxuICBcInN1YnRpdGxlLmV4YW1wbGVcIjogXCJCZWlzcGllbCBVbnRlcnRpdGVsXCIsXG4gIFwic3VidGl0bGUuc2VsZWN0XCI6IFwiVW50ZXJ0aXRlbCBhdXN3w6RobGVuXCIsXG4gIFwicGxheWluZ09uXCI6IFwiU3BpZWx0IGF1ZiA8c3Ryb25nPntjYXN0RGV2aWNlTmFtZX08L3N0cm9uZz5cIixcbiAgXCJjb25uZWN0aW5nVG9cIjogXCJWZXJiaW5kdW5nIG1pdCA8c3Ryb25nPntjYXN0RGV2aWNlTmFtZX08L3N0cm9uZz4gd2lyZCBoZXJnZXN0ZWxsdC4uLlwiLFxuICBcIndhdGVybWFya0xpbmtcIjogXCJMaW5rIHp1bSBIb21lcGFnZVwiLFxuICBcImNvbnRyb2xCYXJcIjogXCJWaWRlb3BsYXllciBLb250cm9sbGVuXCIsXG4gIFwicGxheWVyXCI6IFwiVmlkZW8gcGxheWVyXCIsXG4gIFwic2Vla0JhclwiOiBcIlZpZGVvLVRpbWVsaW5lXCIsXG4gIFwic2Vla0Jhci52YWx1ZVwiOiBcIldlcnRcIixcbiAgXCJzZWVrQmFyLnRpbWVzaGlmdFwiOiBcIlRpbWVzaGlmdFwiLFxuICBcInNlZWtCYXIuZHVyYXRpb25UZXh0XCI6IFwiYXVzXCJcbn1cbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJzZXR0aW5ncy52aWRlby5xdWFsaXR5XCI6IFwiVmlkZW8gUXVhbGl0eVwiLFxuICBcInNldHRpbmdzLmF1ZGlvLnF1YWxpdHlcIjogXCJBdWRpbyBRdWFsaXR5XCIsXG4gIFwic2V0dGluZ3MuYXVkaW8udHJhY2tcIjogXCJBdWRpbyBUcmFja1wiLFxuICBcInNldHRpbmdzLmF1ZGlvLm11dGVcIiA6IFwiTXV0ZVwiLFxuICBcInNldHRpbmdzLmF1ZGlvLnZvbHVtZVwiIDogXCJWb2x1bWVcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMud2luZG93LmNvbG9yXCIgOiBcIldpbmRvdyBjb2xvclwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy53aW5kb3cub3BhY2l0eVwiIDogXCJXaW5kb3cgb3BhY2l0eVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlc1wiIDogXCJTdWJ0aXRsZXNcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5jb2xvclwiIDogXCJGb250IGNvbG9yXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQub3BhY2l0eVwiIDogXCJGb250IG9wYWNpdHlcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuYmFja2dyb3VuZC5jb2xvclwiIDogXCJCYWNrZ3JvdW5kIGNvbG9yXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmJhY2tncm91bmQub3BhY2l0eVwiOiBcIkJhY2tncm91bmQgb3BhY2l0eVwiLFxuICBcImNvbG9ycy53aGl0ZVwiOiBcIndoaXRlXCIsXG4gIFwiY29sb3JzLmJsYWNrXCI6IFwiYmxhY2tcIixcbiAgXCJjb2xvcnMucmVkXCI6IFwicmVkXCIsXG4gIFwiY29sb3JzLmdyZWVuXCI6IFwiZ3JlZW5cIixcbiAgXCJjb2xvcnMuYmx1ZVwiOiBcImJsdWVcIixcbiAgXCJjb2xvcnMuY3lhblwiOiBcImN5YW5cIixcbiAgXCJjb2xvcnMueWVsbG93XCI6IFwieWVsbG93XCIsXG4gIFwiY29sb3JzLm1hZ2VudGFcIjogXCJtYWdlbnRhXCIsXG4gIFwicGVyY2VudFwiOiBcInt2YWx1ZX0lXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuc2l6ZVwiOiBcIkZvbnQgc2l6ZVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5jaGFyYWN0ZXJFZGdlXCI6IFwiQ2hhcmFjdGVyIGVkZ2VcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZS5yYWlzZWRcIjogXCJyYWlzZWRcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZS5kZXByZXNzZWRcIjogXCJkZXByZXNzZWRcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZS51bmlmb3JtXCI6IFwidW5pZm9ybVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5jaGFyYWN0ZXJFZGdlLmRyb3BzaGFkb3dlZFwiOiBcImRyb3Agc2hhZG93ZWRcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHlcIjogXCJGb250IGZhbWlseVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5tb25vc3BhY2Vkc2VyaWZcIjogXCJtb25vc3BhY2VkIHNlcmlmXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LnByb3BvcnRpb25hbHNlcmlmXCI6IFwicHJvcG9ydGlvbmFsIHNlcmlmXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5Lm1vbm9zcGFjZWRzYW5zc2VyaWZcIjogXCJtb25vc3BhY2VkIHNhbnMgc2VyaWZcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkucHJvcG9ydGlvbmFsc2Fuc3NlcmlmXCI6IFwicHJvcG9ydGlvbmFsIHNhbnMgc2VyaWZcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkuY2FzdWFsXCI6IFwiY2FzdWFsXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LmN1cnNpdmVcIjogXCJjdXJzaXZlXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LnNtYWxsY2FwaXRhbFwiOiBcInNtYWxsIGNhcGl0YWxcIixcbiAgXCJzZXR0aW5ncy50aW1lLmhvdXJzXCI6IFwiSG91cnNcIixcbiAgXCJzZXR0aW5ncy50aW1lLm1pbnV0ZXNcIjogXCJNaW51dGVzXCIsXG4gIFwic2V0dGluZ3MudGltZS5zZWNvbmRzXCI6IFwiU2Vjb25kc1wiLFxuICBcImFkcy5yZW1haW5pbmdUaW1lXCI6IFwiVGhpcyBhZCB3aWxsIGVuZCBpbiB7cmVtYWluaW5nVGltZX0gc2Vjb25kcy5cIixcbiAgXCJzZXR0aW5nc1wiOiBcIlNldHRpbmdzXCIsXG4gIFwiZnVsbHNjcmVlblwiIDogXCJGdWxsc2NyZWVuXCIsXG4gIFwic3BlZWRcIjogXCJTcGVlZFwiLFxuICBcInBsYXlQYXVzZVwiIDogXCJQbGF5L1BhdXNlXCIsXG4gIFwicGxheVwiOiBcIlBsYXlcIixcbiAgXCJwYXVzZVwiOiBcIlBhdXNlXCIsXG4gIFwib3BlblwiOiBcIm9wZW5cIixcbiAgXCJjbG9zZVwiOiBcIkNsb3NlXCIsXG4gIFwicGljdHVyZUluUGljdHVyZVwiOiBcIlBpY3R1cmUtaW4tUGljdHVyZVwiLFxuICBcImFwcGxlQWlycGxheVwiIDogXCJBcHBsZSBBaXJQbGF5XCIsXG4gIFwiZ29vZ2xlQ2FzdFwiOiBcIkdvb2dsZSBDYXN0XCIsXG4gIFwidnJcIiA6IFwiVlJcIixcbiAgXCJvZmZcIjogXCJvZmZcIixcbiAgXCJhdXRvXCI6IFwiYXV0b1wiLFxuICBcImJhY2tcIiA6IFwiQmFja1wiLFxuICBcInJlc2V0XCI6IFwiUmVzZXRcIixcbiAgXCJyZXBsYXlcIjogXCJSZXBsYXlcIixcbiAgXCJub3JtYWxcIjogXCJub3JtYWxcIixcbiAgXCJkZWZhdWx0XCI6IFwiZGVmYXVsdFwiLFxuICBcImxpdmVcIjogXCJMaXZlXCIsXG4gIFwic3VidGl0bGUuZXhhbXBsZVwiOiBcImV4YW1wbGUgc3VidGl0bGVcIixcbiAgXCJzdWJ0aXRsZS5zZWxlY3RcIjogXCJTZWxlY3Qgc3VidGl0bGVcIixcbiAgXCJwbGF5aW5nT25cIjogXCJQbGF5aW5nIG9uIDxzdHJvbmc+e2Nhc3REZXZpY2VOYW1lfTwvc3Ryb25nPlwiLFxuICBcImNvbm5lY3RpbmdUb1wiOiBcIkNvbm5lY3RpbmcgdG8gPHN0cm9uZz57Y2FzdERldmljZU5hbWV9PC9zdHJvbmc+Li4uXCIsXG4gIFwid2F0ZXJtYXJrTGlua1wiOiBcIkxpbmsgdG8gSG9tZXBhZ2VcIixcbiAgXCJjb250cm9sQmFyXCI6IFwiVmlkZW8gcGxheWVyIGNvbnRyb2xzXCIsXG4gIFwicGxheWVyXCI6IFwiVmlkZW8gcGxheWVyXCIsXG4gIFwic2Vla0JhclwiOiBcIlZpZGVvIHRpbWVsaW5lXCIsXG4gIFwic2Vla0Jhci52YWx1ZVwiOiBcIlZhbHVlXCIsXG4gIFwic2Vla0Jhci50aW1lc2hpZnRcIjogXCJUaW1lc2hpZnRcIixcbiAgXCJzZWVrQmFyLmR1cmF0aW9uVGV4dFwiOiBcIm91dCBvZlwiXG59XG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwic2V0dGluZ3MudmlkZW8ucXVhbGl0eVwiOiBcIkNhbGlkYWQgZGUgVmlkZW9cIixcbiAgXCJzZXR0aW5ncy5hdWRpby5xdWFsaXR5XCI6IFwiQ2FsaWRhZCBkZSBBdWRpb1wiLFxuICBcInNldHRpbmdzLmF1ZGlvLnRyYWNrXCI6IFwiUGlzdGEgZGUgQXVkaW9cIixcbiAgXCJzZXR0aW5ncy5hdWRpby5tdXRlXCIgOiBcIlNpbGVuY2lvXCIsXG4gIFwic2V0dGluZ3MuYXVkaW8udm9sdW1lXCIgOiBcIlZvbHVtZW5cIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMud2luZG93LmNvbG9yXCIgOiBcImNvbG9yIGRlIFZlbnRhbmFcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMud2luZG93Lm9wYWNpdHlcIiA6IFwib3BhY2lkYWQgZGUgVmVudGFuYVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlc1wiIDogXCJTdWJ0w610dWxvc1wiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LmNvbG9yXCIgOiBcImNvbG9yIGRlIEZ1ZW50ZVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250Lm9wYWNpdHlcIiA6IFwib3BhY2lkYWQgZGUgRnVlbnRlXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmJhY2tncm91bmQuY29sb3JcIiA6IFwiY29sb3IgZGUgRm9uZG9cIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuYmFja2dyb3VuZC5vcGFjaXR5XCI6IFwib3BhY2lkYWQgZGUgRm9uZG9cIixcbiAgXCJjb2xvcnMud2hpdGVcIjogXCJibGFuY29cIixcbiAgXCJjb2xvcnMuYmxhY2tcIjogXCJuZWdyb1wiLFxuICBcImNvbG9ycy5yZWRcIjogXCJyb2pvXCIsXG4gIFwiY29sb3JzLmdyZWVuXCI6IFwidmVyZGVcIixcbiAgXCJjb2xvcnMuYmx1ZVwiOiBcImF6dWxcIixcbiAgXCJjb2xvcnMuY3lhblwiOiBcImNpYW5cIixcbiAgXCJjb2xvcnMueWVsbG93XCI6IFwiYW1hcmlsbG9cIixcbiAgXCJjb2xvcnMubWFnZW50YVwiOiBcIm1hZ2VudGFcIixcbiAgXCJwZXJjZW50XCI6IFwie3ZhbHVlfSVcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5zaXplXCI6IFwidGFtYcOxbyBkZSBGdWVudGVcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZVwiOiBcImJvcmRlIGRlbCBDYXJhY3RlclwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5jaGFyYWN0ZXJFZGdlLnJhaXNlZFwiOiBcImFsemFkb1wiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5jaGFyYWN0ZXJFZGdlLmRlcHJlc3NlZFwiOiBcImRpc2NyZXRvXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2UudW5pZm9ybVwiOiBcInVuaWZvcm1lXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2UuZHJvcHNoYWRvd2VkXCI6IFwic29tYnJlYWRvXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5XCI6IFwidGlwbyBkZSBGdWVudGVcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkubW9ub3NwYWNlZHNlcmlmXCI6IFwibW9ub3NwYWNlZCBzZXJpZlwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5wcm9wb3J0aW9uYWxzZXJpZlwiOiBcInByb3BvcnRpb25hbCBzZXJpZlwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5tb25vc3BhY2Vkc2Fuc3NlcmlmXCI6IFwibW9ub3NwYWNlZCBzYW5zIHNlcmlmXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LnByb3BvcnRpb25hbHNhbnNzZXJpZlwiOiBcInByb3BvcnRpb25hbCBzYW5zIHNlcmlmXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LmNhc3VhbFwiOiBcImNhc3VhbFwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5jdXJzaXZlXCI6IFwiY3Vyc2l2YVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5zbWFsbGNhcGl0YWxcIjogXCJzbWFsbCBjYXBpdGFsXCIsXG4gIFwic2V0dGluZ3MudGltZS5ob3Vyc1wiOiBcIkhvcmFzXCIsXG4gIFwic2V0dGluZ3MudGltZS5taW51dGVzXCI6IFwiTWludXRvc1wiLFxuICBcInNldHRpbmdzLnRpbWUuc2Vjb25kc1wiOiBcIlNlZ3VuZG9zXCIsXG4gIFwiYWRzLnJlbWFpbmluZ1RpbWVcIjogXCJFc3RlIGFudW5jaW8gYWNhYmFyw6EgZW4ge3JlbWFpbmluZ1RpbWV9IHNlZ3VuZG9zLlwiLFxuICBcInNldHRpbmdzXCI6IFwiQ29uZmlndXJhY2nDs25cIixcbiAgXCJmdWxsc2NyZWVuXCIgOiBcIlBhbnRhbGxhIENvbXBsZXRhXCIsXG4gIFwic3BlZWRcIjogXCJWZWxvY2lkYWRcIixcbiAgXCJwbGF5UGF1c2VcIiA6IFwiUmVwcm9kdWNpci9QYXVzYVwiLFxuICBcInBsYXlcIjogXCJSZXByb2R1Y2lyXCIsXG4gIFwicGF1c2VcIjogXCJQYXVzYVwiLFxuICBcIm9wZW5cIjogXCJBYnJpclwiLFxuICBcImNsb3NlXCI6IFwiQ2VycmFyXCIsXG4gIFwicGljdHVyZUluUGljdHVyZVwiOiBcIkltYWdlbiBlbiBJbWFnZW5cIixcbiAgXCJhcHBsZUFpcnBsYXlcIiA6IFwiQXBwbGUgQWlyUGxheVwiLFxuICBcImdvb2dsZUNhc3RcIjogXCJHb29nbGUgQ2FzdFwiLFxuICBcInZyXCIgOiBcIlZSXCIsXG4gIFwib2ZmXCI6IFwib2ZmXCIsXG4gIFwiYXV0b1wiOiBcImF1dG9cIixcbiAgXCJiYWNrXCIgOiBcIkF0csOhc1wiLFxuICBcInJlc2V0XCI6IFwiUmVpbmljaWFyXCIsXG4gIFwicmVwbGF5XCI6IFwiUmVib2JpbmFyXCIsXG4gIFwibm9ybWFsXCI6IFwibm9ybWFsXCIsXG4gIFwiZGVmYXVsdFwiOiBcInByZWRldGVybWluYWRvXCIsXG4gIFwibGl2ZVwiOiBcIkRpcmVjdG9cIixcbiAgXCJzdWJ0aXRsZS5leGFtcGxlXCI6IFwiRWplbXBsbyBkZSBTdWJ0w610dWxvXCIsXG4gIFwic3VidGl0bGUuc2VsZWN0XCI6IFwiU2VsZWNjaW9uYXIgc3VidMOtdHVsb1wiLFxuICBcInBsYXlpbmdPblwiOiBcIlJlcHJvZHVjaWVuZG8gZW4gPHN0cm9uZz57Y2FzdERldmljZU5hbWV9PC9zdHJvbmc+XCIsXG4gIFwiY29ubmVjdGluZ1RvXCI6IFwiQ29uZWN0YW5kbyBhIDxzdHJvbmc+e2Nhc3REZXZpY2VOYW1lfTwvc3Ryb25nPi4uLlwiLFxuICBcIndhdGVybWFya0xpbmtcIjogXCJFbmxhY2UgYWwgaW5pY2lvXCIsXG4gIFwiY29udHJvbEJhclwiOiBcIkNvbnRyb2xlcyBkZWwgUmVwcm9kdWN0b3JcIixcbiAgXCJwbGF5ZXJcIjogXCJSZXByb2R1Y3RvciBkZSBWaWRlb1wiLFxuICBcInNlZWtCYXJcIjogXCJMw61uZWEgZGUgVGllbXBvXCIsXG4gIFwic2Vla0Jhci52YWx1ZVwiOiBcInBvc2ljacOzblwiLFxuICBcInNlZWtCYXIudGltZXNoaWZ0XCI6IFwiY2FtYmlvIGRlIHBvc2ljacOzblwiLFxuICBcInNlZWtCYXIuZHVyYXRpb25UZXh0XCI6IFwiZGVcIlxufSIsImV4cG9ydCBjb25zdCB2ZXJzaW9uOiBzdHJpbmcgPSAne3tWRVJTSU9OfX0nO1xuLy8gTWFuYWdlbWVudFxuZXhwb3J0IHsgVUlNYW5hZ2VyLCBVSUluc3RhbmNlTWFuYWdlciB9IGZyb20gJy4vdWltYW5hZ2VyJztcbi8vIEZhY3Rvcmllc1xuZXhwb3J0IHsgVUlGYWN0b3J5IH0gZnJvbSAnLi91aWZhY3RvcnknO1xuZXhwb3J0IHsgRGVtb0ZhY3RvcnkgfSBmcm9tICcuL2RlbW9mYWN0b3J5Jztcbi8vIFV0aWxzXG5leHBvcnQgeyBBcnJheVV0aWxzIH0gZnJvbSAnLi9hcnJheXV0aWxzJztcbmV4cG9ydCB7IFN0cmluZ1V0aWxzIH0gZnJvbSAnLi9zdHJpbmd1dGlscyc7XG5leHBvcnQgeyBQbGF5ZXJVdGlscyB9IGZyb20gJy4vcGxheWVydXRpbHMnO1xuZXhwb3J0IHsgVUlVdGlscyB9IGZyb20gJy4vdWl1dGlscyc7XG5leHBvcnQgeyBCcm93c2VyVXRpbHMgfSBmcm9tICcuL2Jyb3dzZXJ1dGlscyc7XG5leHBvcnQgeyBTdG9yYWdlVXRpbHMgfSBmcm9tICcuL3N0b3JhZ2V1dGlscyc7XG5leHBvcnQgeyBFcnJvclV0aWxzIH0gZnJvbSAnLi9lcnJvcnV0aWxzJztcbi8vIExvY2FsaXphdGlvblxuZXhwb3J0IHsgaTE4biB9IGZyb20gJy4vbG9jYWxpemF0aW9uL2kxOG4nO1xuLy8gU3BhdGlhbCBOYXZpZ2F0aW9uXG5leHBvcnQgeyBTcGF0aWFsTmF2aWdhdGlvbiB9IGZyb20gJy4vc3BhdGlhbG5hdmlnYXRpb24vc3BhdGlhbG5hdmlnYXRpb24nO1xuZXhwb3J0IHsgTmF2aWdhdGlvbkdyb3VwIH0gZnJvbSAnLi9zcGF0aWFsbmF2aWdhdGlvbi9uYXZpZ2F0aW9uZ3JvdXAnO1xuZXhwb3J0IHsgUm9vdE5hdmlnYXRpb25Hcm91cCB9IGZyb20gJy4vc3BhdGlhbG5hdmlnYXRpb24vcm9vdG5hdmlnYXRpb25ncm91cCc7XG5leHBvcnQgeyBMaXN0TmF2aWdhdGlvbkdyb3VwLCBMaXN0T3JpZW50YXRpb24gfSBmcm9tICcuL3NwYXRpYWxuYXZpZ2F0aW9uL0xpc3ROYXZpZ2F0aW9uR3JvdXAnO1xuLy8gQ29tcG9uZW50c1xuZXhwb3J0IHsgQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL2J1dHRvbic7XG5leHBvcnQgeyBDb250cm9sQmFyIH0gZnJvbSAnLi9jb21wb25lbnRzL2NvbnRyb2xiYXInO1xuZXhwb3J0IHsgRnVsbHNjcmVlblRvZ2dsZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9mdWxsc2NyZWVudG9nZ2xlYnV0dG9uJztcbmV4cG9ydCB7IEh1Z2VQbGF5YmFja1RvZ2dsZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9odWdlcGxheWJhY2t0b2dnbGVidXR0b24nO1xuZXhwb3J0IHsgUGxheWJhY2tUaW1lTGFiZWwsIFBsYXliYWNrVGltZUxhYmVsTW9kZSB9IGZyb20gJy4vY29tcG9uZW50cy9wbGF5YmFja3RpbWVsYWJlbCc7XG5leHBvcnQgeyBQbGF5YmFja1RvZ2dsZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9wbGF5YmFja3RvZ2dsZWJ1dHRvbic7XG5leHBvcnQgeyBTZWVrQmFyIH0gZnJvbSAnLi9jb21wb25lbnRzL3NlZWtiYXInO1xuZXhwb3J0IHsgU2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL3NlbGVjdGJveCc7XG5leHBvcnQgeyBJdGVtU2VsZWN0aW9uTGlzdCB9IGZyb20gJy4vY29tcG9uZW50cy9pdGVtc2VsZWN0aW9ubGlzdCc7XG5leHBvcnQgeyBTZXR0aW5nc1BhbmVsIH0gZnJvbSAnLi9jb21wb25lbnRzL3NldHRpbmdzcGFuZWwnO1xuZXhwb3J0IHsgU2V0dGluZ3NUb2dnbGVCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvc2V0dGluZ3N0b2dnbGVidXR0b24nO1xuZXhwb3J0IHsgVG9nZ2xlQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL3RvZ2dsZWJ1dHRvbic7XG5leHBvcnQgeyBWaWRlb1F1YWxpdHlTZWxlY3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvdmlkZW9xdWFsaXR5c2VsZWN0Ym94JztcbmV4cG9ydCB7IFZvbHVtZVRvZ2dsZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy92b2x1bWV0b2dnbGVidXR0b24nO1xuZXhwb3J0IHsgVlJUb2dnbGVCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvdnJ0b2dnbGVidXR0b24nO1xuZXhwb3J0IHsgV2F0ZXJtYXJrIH0gZnJvbSAnLi9jb21wb25lbnRzL3dhdGVybWFyayc7XG5leHBvcnQgeyBVSUNvbnRhaW5lciB9IGZyb20gJy4vY29tcG9uZW50cy91aWNvbnRhaW5lcic7XG5leHBvcnQgeyBDb250YWluZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvY29udGFpbmVyJztcbmV4cG9ydCB7IExhYmVsIH0gZnJvbSAnLi9jb21wb25lbnRzL2xhYmVsJztcbmV4cG9ydCB7IEF1ZGlvUXVhbGl0eVNlbGVjdEJveCB9IGZyb20gJy4vY29tcG9uZW50cy9hdWRpb3F1YWxpdHlzZWxlY3Rib3gnO1xuZXhwb3J0IHsgQXVkaW9UcmFja1NlbGVjdEJveCB9IGZyb20gJy4vY29tcG9uZW50cy9hdWRpb3RyYWNrc2VsZWN0Ym94JztcbmV4cG9ydCB7IENhc3RTdGF0dXNPdmVybGF5IH0gZnJvbSAnLi9jb21wb25lbnRzL2Nhc3RzdGF0dXNvdmVybGF5JztcbmV4cG9ydCB7IENhc3RUb2dnbGVCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvY2FzdHRvZ2dsZWJ1dHRvbic7XG5leHBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvY29tcG9uZW50JztcbmV4cG9ydCB7IEVycm9yTWVzc2FnZU92ZXJsYXkgfSBmcm9tICcuL2NvbXBvbmVudHMvZXJyb3JtZXNzYWdlb3ZlcmxheSc7XG5leHBvcnQgeyBSZWNvbW1lbmRhdGlvbk92ZXJsYXkgfSBmcm9tICcuL2NvbXBvbmVudHMvcmVjb21tZW5kYXRpb25vdmVybGF5JztcbmV4cG9ydCB7IFNlZWtCYXJMYWJlbCB9IGZyb20gJy4vY29tcG9uZW50cy9zZWVrYmFybGFiZWwnO1xuZXhwb3J0IHsgU3VidGl0bGVPdmVybGF5IH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlb3ZlcmxheSc7XG5leHBvcnQgeyBTdWJ0aXRsZVNlbGVjdEJveCB9IGZyb20gJy4vY29tcG9uZW50cy9zdWJ0aXRsZXNlbGVjdGJveCc7XG5leHBvcnQgeyBUaXRsZUJhciB9IGZyb20gJy4vY29tcG9uZW50cy90aXRsZWJhcic7XG5leHBvcnQgeyBWb2x1bWVDb250cm9sQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL3ZvbHVtZWNvbnRyb2xidXR0b24nO1xuZXhwb3J0IHsgQ2xpY2tPdmVybGF5IH0gZnJvbSAnLi9jb21wb25lbnRzL2NsaWNrb3ZlcmxheSc7XG5leHBvcnQgeyBBZFNraXBCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvYWRza2lwYnV0dG9uJztcbmV4cG9ydCB7IEFkTWVzc2FnZUxhYmVsIH0gZnJvbSAnLi9jb21wb25lbnRzL2FkbWVzc2FnZWxhYmVsJztcbmV4cG9ydCB7IEFkQ2xpY2tPdmVybGF5IH0gZnJvbSAnLi9jb21wb25lbnRzL2FkY2xpY2tvdmVybGF5JztcbmV4cG9ydCB7IFBsYXliYWNrU3BlZWRTZWxlY3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvcGxheWJhY2tzcGVlZHNlbGVjdGJveCc7XG5leHBvcnQgeyBIdWdlUmVwbGF5QnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL2h1Z2VyZXBsYXlidXR0b24nO1xuZXhwb3J0IHsgQnVmZmVyaW5nT3ZlcmxheSB9IGZyb20gJy4vY29tcG9uZW50cy9idWZmZXJpbmdvdmVybGF5JztcbmV4cG9ydCB7IENhc3RVSUNvbnRhaW5lciB9IGZyb20gJy4vY29tcG9uZW50cy9jYXN0dWljb250YWluZXInO1xuZXhwb3J0IHsgUGxheWJhY2tUb2dnbGVPdmVybGF5IH0gZnJvbSAnLi9jb21wb25lbnRzL3BsYXliYWNrdG9nZ2xlb3ZlcmxheSc7XG5leHBvcnQgeyBDbG9zZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9jbG9zZWJ1dHRvbic7XG5leHBvcnQgeyBNZXRhZGF0YUxhYmVsLCBNZXRhZGF0YUxhYmVsQ29udGVudCB9IGZyb20gJy4vY29tcG9uZW50cy9tZXRhZGF0YWxhYmVsJztcbmV4cG9ydCB7IEFpclBsYXlUb2dnbGVCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvYWlycGxheXRvZ2dsZWJ1dHRvbic7XG5leHBvcnQgeyBWb2x1bWVTbGlkZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvdm9sdW1lc2xpZGVyJztcbmV4cG9ydCB7IFBpY3R1cmVJblBpY3R1cmVUb2dnbGVCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvcGljdHVyZWlucGljdHVyZXRvZ2dsZWJ1dHRvbic7XG5leHBvcnQgeyBTcGFjZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvc3BhY2VyJztcbmV4cG9ydCB7IEJhY2tncm91bmRDb2xvclNlbGVjdEJveCB9IGZyb20gJy4vY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL2JhY2tncm91bmRjb2xvcnNlbGVjdGJveCc7XG5leHBvcnQgeyBCYWNrZ3JvdW5kT3BhY2l0eVNlbGVjdEJveCB9IGZyb20gJy4vY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL2JhY2tncm91bmRvcGFjaXR5c2VsZWN0Ym94JztcbmV4cG9ydCB7IENoYXJhY3RlckVkZ2VTZWxlY3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvc3VidGl0bGVzZXR0aW5ncy9jaGFyYWN0ZXJlZGdlc2VsZWN0Ym94JztcbmV4cG9ydCB7IEZvbnRDb2xvclNlbGVjdEJveCB9IGZyb20gJy4vY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL2ZvbnRjb2xvcnNlbGVjdGJveCc7XG5leHBvcnQgeyBGb250RmFtaWx5U2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3MvZm9udGZhbWlseXNlbGVjdGJveCc7XG5leHBvcnQgeyBGb250T3BhY2l0eVNlbGVjdEJveCB9IGZyb20gJy4vY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL2ZvbnRvcGFjaXR5c2VsZWN0Ym94JztcbmV4cG9ydCB7IEZvbnRTaXplU2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3MvZm9udHNpemVzZWxlY3Rib3gnO1xuZXhwb3J0IHsgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3Mvc3VidGl0bGVzZXR0aW5nc2VsZWN0Ym94JztcbmV4cG9ydCB7IFN1YnRpdGxlU2V0dGluZ3NMYWJlbCB9IGZyb20gJy4vY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL3N1YnRpdGxlc2V0dGluZ3NsYWJlbCc7XG5leHBvcnQgeyBXaW5kb3dDb2xvclNlbGVjdEJveCB9IGZyb20gJy4vY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL3dpbmRvd2NvbG9yc2VsZWN0Ym94JztcbmV4cG9ydCB7IFdpbmRvd09wYWNpdHlTZWxlY3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvc3VidGl0bGVzZXR0aW5ncy93aW5kb3dvcGFjaXR5c2VsZWN0Ym94JztcbmV4cG9ydCB7IFN1YnRpdGxlU2V0dGluZ3NSZXNldEJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL3N1YnRpdGxlc2V0dGluZ3NyZXNldGJ1dHRvbic7XG5leHBvcnQgeyBMaXN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL2xpc3Rib3gnO1xuZXhwb3J0IHsgU3VidGl0bGVMaXN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlbGlzdGJveCc7XG5leHBvcnQgeyBBdWRpb1RyYWNrTGlzdEJveCB9IGZyb20gJy4vY29tcG9uZW50cy9hdWRpb3RyYWNrbGlzdGJveCc7XG5leHBvcnQgeyBTZXR0aW5nc1BhbmVsUGFnZSB9IGZyb20gJy4vY29tcG9uZW50cy9zZXR0aW5nc3BhbmVscGFnZSc7XG5leHBvcnQgeyBTZXR0aW5nc1BhbmVsUGFnZUJhY2tCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvc2V0dGluZ3NwYW5lbHBhZ2ViYWNrYnV0dG9uJztcbmV4cG9ydCB7IFNldHRpbmdzUGFuZWxQYWdlT3BlbkJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9zZXR0aW5nc3BhbmVscGFnZW9wZW5idXR0b24nO1xuZXhwb3J0IHsgU3VidGl0bGVTZXR0aW5nc1BhbmVsUGFnZSB9IGZyb20gJy4vY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL3N1YnRpdGxlc2V0dGluZ3NwYW5lbHBhZ2UnO1xuZXhwb3J0IHsgU2V0dGluZ3NQYW5lbEl0ZW0gfSBmcm9tICcuL2NvbXBvbmVudHMvc2V0dGluZ3NwYW5lbGl0ZW0nO1xuZXhwb3J0IHsgUmVwbGF5QnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL3JlcGxheWJ1dHRvbic7XG5cbi8vIE9iamVjdC5hc3NpZ24gcG9seWZpbGwgZm9yIEVTNS9JRTlcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RlL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9hc3NpZ25cbmlmICh0eXBlb2YgT2JqZWN0LmFzc2lnbiAhPT0gJ2Z1bmN0aW9uJykge1xuICBPYmplY3QuYXNzaWduID0gZnVuY3Rpb24odGFyZ2V0OiBhbnkpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaWYgKHRhcmdldCA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTtcbiAgICB9XG5cbiAgICB0YXJnZXQgPSBPYmplY3QodGFyZ2V0KTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDE7IGluZGV4IDwgYXJndW1lbnRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgbGV0IHNvdXJjZSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICBpZiAoc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xufSIsImltcG9ydCB7IFBsYXllckFQSSwgUGxheWVyRXZlbnQsIFBsYXllckV2ZW50QmFzZSwgUGxheWVyRXZlbnRDYWxsYmFjayB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBXcmFwcGVkUGxheWVyIH0gZnJvbSAnLi91aW1hbmFnZXInO1xuXG5leHBvcnQgZW51bSBNb2JpbGVWM1BsYXllckV2ZW50IHtcbiAgU291cmNlRXJyb3IgPSAnc291cmNlZXJyb3InLFxuICBQbGF5ZXJFcnJvciA9ICdwbGF5ZXJlcnJvcicsXG4gIFBsYXlsaXN0VHJhbnNpdGlvbiA9ICdwbGF5bGlzdHRyYW5zaXRpb24nLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1vYmlsZVYzUGxheWVyRXJyb3JFdmVudCBleHRlbmRzIFBsYXllckV2ZW50QmFzZSB7XG4gIGNvZGU6IG51bWJlcjtcbiAgbWVzc2FnZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1vYmlsZVYzU291cmNlRXJyb3JFdmVudCBleHRlbmRzIFBsYXllckV2ZW50QmFzZSB7XG4gIGNvZGU6IG51bWJlcjtcbiAgbWVzc2FnZTogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBNb2JpbGVWM1BsYXllckV2ZW50VHlwZSA9IFBsYXllckV2ZW50IHwgTW9iaWxlVjNQbGF5ZXJFdmVudDtcblxuZXhwb3J0IGludGVyZmFjZSBNb2JpbGVWM1BsYXllckFQSSBleHRlbmRzIFBsYXllckFQSSB7XG4gIG9uKGV2ZW50VHlwZTogTW9iaWxlVjNQbGF5ZXJFdmVudFR5cGUsIGNhbGxiYWNrOiBQbGF5ZXJFdmVudENhbGxiYWNrKTogdm9pZDtcbiAgZXhwb3J0czogUGxheWVyQVBJWydleHBvcnRzJ10gJiB7IFBsYXllckV2ZW50OiBNb2JpbGVWM1BsYXllckV2ZW50VHlwZSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNNb2JpbGVWM1BsYXllckFQSShwbGF5ZXI6IFdyYXBwZWRQbGF5ZXIgfCBQbGF5ZXJBUEkgfCBNb2JpbGVWM1BsYXllckFQSSk6IHBsYXllciBpcyBNb2JpbGVWM1BsYXllckFQSSB7XG4gIGZvciAoY29uc3Qga2V5IGluIE1vYmlsZVYzUGxheWVyRXZlbnQpIHtcbiAgICBpZiAoTW9iaWxlVjNQbGF5ZXJFdmVudC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICFwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG4iLCJpbXBvcnQge0V2ZW50LCBFdmVudERpc3BhdGNoZXIsIE5vQXJnc30gZnJvbSAnLi9ldmVudGRpc3BhdGNoZXInO1xuaW1wb3J0IHtCcm93c2VyVXRpbHN9IGZyb20gJy4vYnJvd3NlcnV0aWxzJztcbmltcG9ydCB7IFVJSW5zdGFuY2VNYW5hZ2VyIH0gZnJvbSAnLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJLCBUaW1lUmFuZ2UgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuXG5leHBvcnQgbmFtZXNwYWNlIFBsYXllclV0aWxzIHtcblxuICBleHBvcnQgZW51bSBQbGF5ZXJTdGF0ZSB7XG4gICAgSWRsZSxcbiAgICBQcmVwYXJlZCxcbiAgICBQbGF5aW5nLFxuICAgIFBhdXNlZCxcbiAgICBGaW5pc2hlZCxcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBpc1RpbWVTaGlmdEF2YWlsYWJsZShwbGF5ZXI6IFBsYXllckFQSSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwbGF5ZXIuaXNMaXZlKCkgJiYgcGxheWVyLmdldE1heFRpbWVTaGlmdCgpICE9PSAwO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGdldFN0YXRlKHBsYXllcjogUGxheWVyQVBJKTogUGxheWVyU3RhdGUge1xuICAgIGlmIChwbGF5ZXIuaGFzRW5kZWQoKSkge1xuICAgICAgcmV0dXJuIFBsYXllclN0YXRlLkZpbmlzaGVkO1xuICAgIH0gZWxzZSBpZiAocGxheWVyLmlzUGxheWluZygpKSB7XG4gICAgICByZXR1cm4gUGxheWVyU3RhdGUuUGxheWluZztcbiAgICB9IGVsc2UgaWYgKHBsYXllci5pc1BhdXNlZCgpKSB7XG4gICAgICByZXR1cm4gUGxheWVyU3RhdGUuUGF1c2VkO1xuICAgIH0gZWxzZSBpZiAocGxheWVyLmdldFNvdXJjZSgpICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBQbGF5ZXJTdGF0ZS5QcmVwYXJlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFBsYXllclN0YXRlLklkbGU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnRUaW1lIC0gc2Vla2FibGVSYW5nZS5zdGFydC4gVGhpcyBlbnN1cmVzIGEgdXNlci1mcmllbmRseSBjdXJyZW50VGltZSBhZnRlciBhIGxpdmUgc3RyZWFtXG4gICAqIHRyYW5zaXRpb25lZCB0byBWb0QuXG4gICAqIEBwYXJhbSBwbGF5ZXJcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50VGltZVJlbGF0aXZlVG9TZWVrYWJsZVJhbmdlKHBsYXllcjogUGxheWVyQVBJKTogbnVtYmVyIHtcbiAgICBjb25zdCBjdXJyZW50VGltZSA9IHBsYXllci5nZXRDdXJyZW50VGltZSgpO1xuICAgIGlmIChwbGF5ZXIuaXNMaXZlKCkpIHtcbiAgICAgIHJldHVybiBjdXJyZW50VGltZTtcbiAgICB9XG5cbiAgICBjb25zdCBzZWVrYWJsZVJhbmdlU3RhcnQgPSBQbGF5ZXJVdGlscy5nZXRTZWVrYWJsZVJhbmdlU3RhcnQocGxheWVyLCAwKTtcbiAgICByZXR1cm4gY3VycmVudFRpbWUgLSBzZWVrYWJsZVJhbmdlU3RhcnQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc3RhcnQgdmFsdWUgb2YgdGhlIHNlZWthYmxlIHJhbmdlIG9yIHRoZSBkZWZhdWx0VmFsdWUgaWYgbm8gc2Vla2FibGVSYW5nZSBpcyBwcmVzZW50LlxuICAgKiBGb3Igbm93IHRoaXMgaGFwcGVucyBvbmx5IGluIGNvbWJpbmF0aW9uIHdpdGggTW9iaWxlIFNES3MuXG4gICAqXG4gICAqIFRPRE86IHJlbW92ZSB0aGlzIGZ1bmN0aW9uIGluIG5leHQgbWFqb3IgcmVsZWFzZVxuICAgKlxuICAgKiBAcGFyYW0gcGxheWVyXG4gICAqIEBwYXJhbSBkZWZhdWx0VmFsdWVcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRTZWVrYWJsZVJhbmdlU3RhcnQocGxheWVyOiBQbGF5ZXJBUEksIGRlZmF1bHRWYWx1ZTogbnVtYmVyID0gMCkge1xuICAgIHJldHVybiBwbGF5ZXIuZ2V0U2Vla2FibGVSYW5nZSgpICYmIHBsYXllci5nZXRTZWVrYWJsZVJhbmdlKCkuc3RhcnQgfHwgZGVmYXVsdFZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgcGxheWVyIHNlZWthYmxlIHRpbWUgcmFuZ2UgZm9yIGxpdmUuXG4gICAqIEFzIHRoZSBwbGF5ZXIgcmV0dXJucyBgeyBzdGFydDogLTEsIGVuZDogLTEgfWAgZm9yIGxpdmUgc3RyZWFtcyB3ZSBuZWVkIHRvIGNhbGN1bGF0ZSB0aGUgYHNlZWthYmxlUmFuZ2VgIGJhc2VkIG9uIGBtYXhUaW1lc2hpZnRgLlxuICAgKlxuICAgKiBAcGFyYW0gcGxheWVyXG4gICAqL1xuICBleHBvcnQgZnVuY3Rpb24gZ2V0U2Vla2FibGVSYW5nZVJlc3BlY3RpbmdMaXZlKHBsYXllcjogUGxheWVyQVBJKTogVGltZVJhbmdlIHtcbiAgICBpZiAoIXBsYXllci5pc0xpdmUoKSkge1xuICAgICAgcmV0dXJuIHBsYXllci5nZXRTZWVrYWJsZVJhbmdlKCk7XG4gICAgfVxuXG4gICAgY29uc3QgY3VycmVudFRpbWVzaGlmdCA9IC1wbGF5ZXIuZ2V0VGltZVNoaWZ0KCk7XG4gICAgY29uc3QgbWF4VGltZXNoaWZ0ID0gLXBsYXllci5nZXRNYXhUaW1lU2hpZnQoKTtcbiAgICBjb25zdCBjdXJyZW50VGltZSA9IHBsYXllci5nZXRDdXJyZW50VGltZSgpO1xuXG4gICAgY29uc3QgZW5kID0gY3VycmVudFRpbWUgKyAoY3VycmVudFRpbWVzaGlmdCk7XG4gICAgY29uc3Qgc3RhcnQgPSBjdXJyZW50VGltZSAtIChtYXhUaW1lc2hpZnQgLSBjdXJyZW50VGltZXNoaWZ0KTtcblxuICAgIHJldHVybiB7IHN0YXJ0LCBlbmQgfTtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGltZVNoaWZ0QXZhaWxhYmlsaXR5Q2hhbmdlZEFyZ3MgZXh0ZW5kcyBOb0FyZ3Mge1xuICAgIHRpbWVTaGlmdEF2YWlsYWJsZTogYm9vbGVhbjtcbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBUaW1lU2hpZnRBdmFpbGFiaWxpdHlEZXRlY3RvciB7XG5cbiAgICBwcml2YXRlIHBsYXllcjogUGxheWVyQVBJO1xuICAgIHByaXZhdGUgdGltZVNoaWZ0QXZhaWxhYmxlOiBib29sZWFuO1xuICAgIHByaXZhdGUgdGltZVNoaWZ0QXZhaWxhYmlsaXR5Q2hhbmdlZEV2ZW50ID0gbmV3IEV2ZW50RGlzcGF0Y2hlcjxQbGF5ZXJBUEksIFRpbWVTaGlmdEF2YWlsYWJpbGl0eUNoYW5nZWRBcmdzPigpO1xuXG4gICAgY29uc3RydWN0b3IocGxheWVyOiBQbGF5ZXJBUEkpIHtcbiAgICAgIHRoaXMucGxheWVyID0gcGxheWVyO1xuICAgICAgdGhpcy50aW1lU2hpZnRBdmFpbGFibGUgPSB1bmRlZmluZWQ7XG5cbiAgICAgIGxldCB0aW1lU2hpZnREZXRlY3RvciA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5kZXRlY3QoKTtcbiAgICAgIH07XG4gICAgICAvLyBUcnkgdG8gZGV0ZWN0IHRpbWVzaGlmdCBhdmFpbGFiaWxpdHkgd2hlbiBzb3VyY2UgaXMgbG9hZGVkLCB3aGljaCB3b3JrcyBmb3IgREFTSCBzdHJlYW1zXG4gICAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU291cmNlTG9hZGVkLCB0aW1lU2hpZnREZXRlY3Rvcik7XG4gICAgICAvLyBXaXRoIEhMUy9OYXRpdmVQbGF5ZXIgc3RyZWFtcywgZ2V0TWF4VGltZVNoaWZ0IGNhbiBiZSAwIGJlZm9yZSB0aGUgYnVmZmVyIGZpbGxzLCBzbyB3ZSBuZWVkIHRvIGFkZGl0aW9uYWxseVxuICAgICAgLy8gY2hlY2sgdGltZXNoaWZ0IGF2YWlsYWJpbGl0eSBpbiBUaW1lQ2hhbmdlZFxuICAgICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlRpbWVDaGFuZ2VkLCB0aW1lU2hpZnREZXRlY3Rvcik7XG4gICAgfVxuXG4gICAgZGV0ZWN0KCk6IHZvaWQge1xuICAgICAgaWYgKHRoaXMucGxheWVyLmlzTGl2ZSgpKSB7XG4gICAgICAgIGxldCB0aW1lU2hpZnRBdmFpbGFibGVOb3cgPSBQbGF5ZXJVdGlscy5pc1RpbWVTaGlmdEF2YWlsYWJsZSh0aGlzLnBsYXllcik7XG5cbiAgICAgICAgLy8gV2hlbiB0aGUgYXZhaWxhYmlsaXR5IGNoYW5nZXMsIHdlIGZpcmUgdGhlIGV2ZW50XG4gICAgICAgIGlmICh0aW1lU2hpZnRBdmFpbGFibGVOb3cgIT09IHRoaXMudGltZVNoaWZ0QXZhaWxhYmxlKSB7XG4gICAgICAgICAgdGhpcy50aW1lU2hpZnRBdmFpbGFiaWxpdHlDaGFuZ2VkRXZlbnQuZGlzcGF0Y2godGhpcy5wbGF5ZXIsIHsgdGltZVNoaWZ0QXZhaWxhYmxlOiB0aW1lU2hpZnRBdmFpbGFibGVOb3cgfSk7XG4gICAgICAgICAgdGhpcy50aW1lU2hpZnRBdmFpbGFibGUgPSB0aW1lU2hpZnRBdmFpbGFibGVOb3c7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgb25UaW1lU2hpZnRBdmFpbGFiaWxpdHlDaGFuZ2VkKCk6IEV2ZW50PFBsYXllckFQSSwgVGltZVNoaWZ0QXZhaWxhYmlsaXR5Q2hhbmdlZEFyZ3M+IHtcbiAgICAgIHJldHVybiB0aGlzLnRpbWVTaGlmdEF2YWlsYWJpbGl0eUNoYW5nZWRFdmVudC5nZXRFdmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgTGl2ZVN0cmVhbURldGVjdG9yRXZlbnRBcmdzIGV4dGVuZHMgTm9BcmdzIHtcbiAgICBsaXZlOiBib29sZWFuO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVjdHMgY2hhbmdlcyBvZiB0aGUgc3RyZWFtIHR5cGUsIGkuZS4gY2hhbmdlcyBvZiB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwbGF5ZXIjaXNMaXZlIG1ldGhvZC5cbiAgICogTm9ybWFsbHksIGEgc3RyZWFtIGNhbm5vdCBjaGFuZ2UgaXRzIHR5cGUgZHVyaW5nIHBsYXliYWNrLCBpdCdzIGVpdGhlciBWT0Qgb3IgbGl2ZS4gRHVlIHRvIGJ1Z3Mgb24gc29tZVxuICAgKiBwbGF0Zm9ybXMgb3IgYnJvd3NlcnMsIGl0IGNhbiBzdGlsbCBjaGFuZ2UuIEl0IGlzIHRoZXJlZm9yZSB1bnJlbGlhYmxlIHRvIGp1c3QgY2hlY2sgI2lzTGl2ZSBhbmQgdGhpcyBkZXRlY3RvclxuICAgKiBzaG91bGQgYmUgdXNlZCBhcyBhIHdvcmthcm91bmQgaW5zdGVhZC5cbiAgICpcbiAgICogQWRkaXRpb25hbGx5IHN0YXJ0aW5nIHdpdGggcGxheWVyIHY4LjE5LjAgd2UgaGF2ZSB0aGUgdXNlLWNhc2UgdGhhdCBhIGxpdmUgc3RyZWFtIGNoYW5nZXMgaW50byBhIHZvZC5cbiAgICogVGhlIER1cmF0aW9uQ2hhbmdlZCBldmVudCBpbmRpY2F0ZXMgdGhpcyBzd2l0Y2guXG4gICAqXG4gICAqIEtub3duIGNhc2VzOlxuICAgKlxuICAgKiAtIEhMUyBWT0Qgb24gQW5kcm9pZCA0LjNcbiAgICogVmlkZW8gZHVyYXRpb24gaXMgaW5pdGlhbGx5ICdJbmZpbml0eScgYW5kIG9ubHkgZ2V0cyBhdmFpbGFibGUgYWZ0ZXIgcGxheWJhY2sgc3RhcnRzLCBzbyBzdHJlYW1zIGFyZSB3cm9uZ2x5XG4gICAqIHJlcG9ydGVkIGFzICdsaXZlJyBiZWZvcmUgcGxheWJhY2sgKHRoZSBsaXZlLWNoZWNrIGluIHRoZSBwbGF5ZXIgY2hlY2tzIGZvciBpbmZpbml0ZSBkdXJhdGlvbikuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIHNpbmNlIFVJIHYzLjkuMCBpbiBjb21iaW5hdGlvbiB3aXRoIHBsYXllciB2OC4xOS4wIHVzZSBQbGF5ZXJFdmVudC5EdXJhdGlvbkNoYW5nZWQgaW5zdGVhZFxuICAgKlxuICAgKiBUT0RPOiByZW1vdmUgdGhpcyBjbGFzcyBpbiBuZXh0IG1ham9yIHJlbGVhc2VcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBMaXZlU3RyZWFtRGV0ZWN0b3Ige1xuXG4gICAgcHJpdmF0ZSBwbGF5ZXI6IFBsYXllckFQSTtcbiAgICBwcml2YXRlIGxpdmU6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBsaXZlQ2hhbmdlZEV2ZW50ID0gbmV3IEV2ZW50RGlzcGF0Y2hlcjxQbGF5ZXJBUEksIExpdmVTdHJlYW1EZXRlY3RvckV2ZW50QXJncz4oKTtcbiAgICBwcml2YXRlIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcikge1xuICAgICAgdGhpcy5wbGF5ZXIgPSBwbGF5ZXI7XG4gICAgICB0aGlzLnVpbWFuYWdlciA9IHVpbWFuYWdlcjtcbiAgICAgIHRoaXMubGl2ZSA9IHVuZGVmaW5lZDtcblxuICAgICAgbGV0IGxpdmVEZXRlY3RvciA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5kZXRlY3QoKTtcbiAgICAgIH07XG4gICAgICB0aGlzLnVpbWFuYWdlci5nZXRDb25maWcoKS5ldmVudHMub25VcGRhdGVkLnN1YnNjcmliZShsaXZlRGV0ZWN0b3IpO1xuICAgICAgLy8gUmUtZXZhbHVhdGUgd2hlbiBwbGF5YmFjayBzdGFydHNcbiAgICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5LCBsaXZlRGV0ZWN0b3IpO1xuXG4gICAgICAvLyBITFMgbGl2ZSBkZXRlY3Rpb24gd29ya2Fyb3VuZCBmb3IgQW5kcm9pZDpcbiAgICAgIC8vIEFsc28gcmUtZXZhbHVhdGUgZHVyaW5nIHBsYXliYWNrLCBiZWNhdXNlIHRoYXQgaXMgd2hlbiB0aGUgbGl2ZSBmbGFnIG1pZ2h0IGNoYW5nZS5cbiAgICAgIC8vIChEb2luZyBpdCBvbmx5IGluIEFuZHJvaWQgQ2hyb21lIHNhdmVzIHVubmVjZXNzYXJ5IG92ZXJoZWFkIG9uIG90aGVyIHBsYXRmb3JtcylcbiAgICAgIGlmIChCcm93c2VyVXRpbHMuaXNBbmRyb2lkICYmIEJyb3dzZXJVdGlscy5pc0Nocm9tZSkge1xuICAgICAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVGltZUNoYW5nZWQsIGxpdmVEZXRlY3Rvcik7XG4gICAgICB9XG5cbiAgICAgIC8vIER1cmF0aW9uQ2hhbmdlZCBldmVudCB3YXMgaW50cm9kdWNlZCB3aXRoIHBsYXllciB2OC4xOS4wXG4gICAgICBpZiAocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuRHVyYXRpb25DaGFuZ2VkKSB7XG4gICAgICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5EdXJhdGlvbkNoYW5nZWQsIGxpdmVEZXRlY3Rvcik7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkIHZpZGVvJ3MgaXNMaXZlKCkgbWlnaHQgYmUgZGlmZmVyZW50IHRoYW4gdGhlIGFjdHVhbCB2aWRlbydzIGlzTGl2ZSgpLlxuICAgICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkQnJlYWtTdGFydGVkLCBsaXZlRGV0ZWN0b3IpO1xuICAgICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkQnJlYWtGaW5pc2hlZCwgbGl2ZURldGVjdG9yKTtcbiAgICB9XG5cbiAgICBkZXRlY3QoKTogdm9pZCB7XG4gICAgICBsZXQgbGl2ZU5vdyA9IHRoaXMucGxheWVyLmlzTGl2ZSgpO1xuXG4gICAgICAvLyBDb21wYXJlIGN1cnJlbnQgdG8gcHJldmlvdXMgbGl2ZSBzdGF0ZSBmbGFnIGFuZCBmaXJlIGV2ZW50IHdoZW4gaXQgY2hhbmdlcy4gU2luY2Ugd2UgaW5pdGlhbGl6ZSB0aGUgZmxhZ1xuICAgICAgLy8gd2l0aCB1bmRlZmluZWQsIHRoZXJlIGlzIGFsd2F5cyBhdCBsZWFzdCBhbiBpbml0aWFsIGV2ZW50IGZpcmVkIHRoYXQgdGVsbHMgbGlzdGVuZXJzIHRoZSBsaXZlIHN0YXRlLlxuICAgICAgaWYgKGxpdmVOb3cgIT09IHRoaXMubGl2ZSkge1xuICAgICAgICB0aGlzLmxpdmVDaGFuZ2VkRXZlbnQuZGlzcGF0Y2godGhpcy5wbGF5ZXIsIHsgbGl2ZTogbGl2ZU5vdyB9KTtcbiAgICAgICAgdGhpcy5saXZlID0gbGl2ZU5vdztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgb25MaXZlQ2hhbmdlZCgpOiBFdmVudDxQbGF5ZXJBUEksIExpdmVTdHJlYW1EZXRlY3RvckV2ZW50QXJncz4ge1xuICAgICAgcmV0dXJuIHRoaXMubGl2ZUNoYW5nZWRFdmVudC5nZXRFdmVudCgpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgTmF2aWdhdGlvbkdyb3VwIH0gZnJvbSAnLi9uYXZpZ2F0aW9uZ3JvdXAnO1xuaW1wb3J0IHsgQWN0aW9uLCBEaXJlY3Rpb24gfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IENvbnRhaW5lciB9IGZyb20gJy4uL2NvbXBvbmVudHMvY29udGFpbmVyJztcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvY29tcG9uZW50JztcblxuZXhwb3J0IGVudW0gTGlzdE9yaWVudGF0aW9uIHtcbiAgSG9yaXpvbnRhbCA9ICdob3Jpem9udGFsJyxcbiAgVmVydGljYWwgPSAndmVydGljYWwnLFxufVxuXG5leHBvcnQgY2xhc3MgTGlzdE5hdmlnYXRpb25Hcm91cCBleHRlbmRzIE5hdmlnYXRpb25Hcm91cCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgbGlzdE5hdmlnYXRpb25EaXJlY3Rpb25zOiBEaXJlY3Rpb25bXTtcblxuICBjb25zdHJ1Y3RvcihvcmllbnRhdGlvbjogTGlzdE9yaWVudGF0aW9uLCBjb250YWluZXI6IENvbnRhaW5lcjx1bmtub3duPiwgLi4uY29tcG9uZW50czogQ29tcG9uZW50PHVua25vd24+W10pIHtcbiAgICBzdXBlcihjb250YWluZXIsIC4uLmNvbXBvbmVudHMpO1xuXG4gICAgc3dpdGNoIChvcmllbnRhdGlvbikge1xuICAgICAgY2FzZSBMaXN0T3JpZW50YXRpb24uVmVydGljYWw6XG4gICAgICAgIHRoaXMubGlzdE5hdmlnYXRpb25EaXJlY3Rpb25zID0gW0RpcmVjdGlvbi5VUCwgRGlyZWN0aW9uLkRPV05dO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMaXN0T3JpZW50YXRpb24uSG9yaXpvbnRhbDpcbiAgICAgICAgdGhpcy5saXN0TmF2aWdhdGlvbkRpcmVjdGlvbnMgPSBbRGlyZWN0aW9uLkxFRlQsIERpcmVjdGlvbi5SSUdIVF07XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVBY3Rpb24oYWN0aW9uOiBBY3Rpb24pOiB2b2lkIHtcbiAgICBzdXBlci5oYW5kbGVBY3Rpb24oYWN0aW9uKTtcblxuICAgIGlmIChhY3Rpb24gPT09IEFjdGlvbi5TRUxFQ1QpIHtcbiAgICAgIC8vIGNsb3NlIHRoZSBjb250YWluZXIgd2hlbiBhIGxpc3QgZW50cnkgaXMgc2VsZWN0ZWRcbiAgICAgIHRoaXMuaGFuZGxlQWN0aW9uKEFjdGlvbi5CQUNLKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgaGFuZGxlTmF2aWdhdGlvbihkaXJlY3Rpb246IERpcmVjdGlvbik6IHZvaWQge1xuICAgIHN1cGVyLmhhbmRsZU5hdmlnYXRpb24oZGlyZWN0aW9uKTtcblxuICAgIGlmICghdGhpcy5saXN0TmF2aWdhdGlvbkRpcmVjdGlvbnMuaW5jbHVkZXMoZGlyZWN0aW9uKSkge1xuICAgICAgLy8gY2xvc2UgdGhlIGNvbnRhaW5lciBvbiBuYXZpZ2F0aW9uIGlucHV0cyB0aGF0IGRvbid0IGFsaWduXG4gICAgICAvLyB3aXRoIHRoZSBvcmllbnRhdGlvbiBvZiB0aGUgbGlzdFxuICAgICAgdGhpcy5oYW5kbGVBY3Rpb24oQWN0aW9uLkJBQ0spO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSAnLi4vY29tcG9uZW50cy9jb250YWluZXInO1xuaW1wb3J0IHsgaXNDb21wb25lbnQsIGlzQ29udGFpbmVyLCBpc0xpc3RCb3ggfSBmcm9tICcuL3R5cGVndWFyZHMnO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHJlc29sdmVzIGEgY29udGFpbmVyIGFuZCB0aGUgY29tcG9uZW50cyBjb250YWluZWQgd2l0aGluIHRoZW0sIGJ1aWxkaW5nIGEgZmxhdCBsaXN0IG9mIGNvbXBvbmVudHMuXG4gKlxuICogQHBhcmFtIGNvbnRhaW5lciBUaGUgY29udGFpbmVyIHRvIGdldCB0aGUgY29udGFpbmVkIGNvbXBvbmVudHMgZnJvbVxuICovXG5mdW5jdGlvbiByZXNvbHZlQWxsQ29tcG9uZW50cyhjb250YWluZXI6IENvbnRhaW5lcjx1bmtub3duPik6IENvbXBvbmVudDx1bmtub3duPltdIHtcbiAgY29uc3QgY2hpbGRDb21wb25lbnRzOiBDb21wb25lbnQ8dW5rbm93bj5bXSA9IFtdO1xuXG4gIGNvbnRhaW5lci5nZXRDb21wb25lbnRzKCkuZm9yRWFjaChjb250YWluZXJPckNvbXBvbmVudCA9PiB7XG4gICAgaWYgKGlzQ29udGFpbmVyKGNvbnRhaW5lck9yQ29tcG9uZW50KSkge1xuICAgICAgY2hpbGRDb21wb25lbnRzLnB1c2goLi4ucmVzb2x2ZUFsbENvbXBvbmVudHMoY29udGFpbmVyT3JDb21wb25lbnQpKTtcbiAgICB9IGVsc2UgaWYgKGlzQ29tcG9uZW50KGNvbnRhaW5lck9yQ29tcG9uZW50KSkge1xuICAgICAgY2hpbGRDb21wb25lbnRzLnB1c2goY29udGFpbmVyT3JDb21wb25lbnQpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNoaWxkQ29tcG9uZW50cztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBIVE1MIGVsZW1lbnRzIGFzc29jaWF0ZWQgdG8gdGhlIHByb3ZpZGVkIGNvbXBvbmVudC5cbiAqXG4gKiBAcGFyYW0gY29tcG9uZW50IFRoZSBjb21wb25lbnQgdG8gZ2V0IHRoZSBIVE1MIGVsZW1lbnRzIGZyb21cbiAqL1xuZnVuY3Rpb24gdG9IdG1sRWxlbWVudChjb21wb25lbnQ6IENvbXBvbmVudDx1bmtub3duPik6IEhUTUxFbGVtZW50W10ge1xuICBpZiAoaXNMaXN0Qm94KGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gW10uc2xpY2UuY2FsbChjb21wb25lbnQuZ2V0RG9tRWxlbWVudCgpLmdldCgpWzBdLmNoaWxkcmVuKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29tcG9uZW50LmdldERvbUVsZW1lbnQoKS5nZXQoKS5zbGljZSgwLCAxKTtcbiAgfVxufVxuXG4vKipcbiAqIFRha2VzIHRoZSBwcm92aWRlZCBsaXN0IG9mIGNvbXBvbmVudHMgYW5kIGZsYXQtbWFwcyB0aGVtIHRvIGEgbGlzdCBvZiB0aGVpciByZXNwZWN0aXZlIEhUTUwgZWxlbWVudHMuIEluIGNhc2UgYVxuICogcHJvdmlkZWQgY29tcG9uZW50IGlzIGEgY29udGFpbmVyLCB0aGUgY2hpbGRyZW4gb2YgdGhhdCBjb250YWluZXIgd2lsbCBiZSByZXNvbHZlZCByZWN1cnNpdmVseS4gSWdub3JlcyBjb21wb25lbnRzXG4gKiB0aGF0IGFyZSBoaWRkZW4uXG4gKlxuICogQHBhcmFtIGNvbXBvbmVudHMgVGhlIGNvbXBvbmVudHMgdG8gbWFwIHRvIEhUTUwgZWxlbWVudHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEh0bWxFbGVtZW50c0Zyb21Db21wb25lbnRzKGNvbXBvbmVudHM6IENvbXBvbmVudDx1bmtub3duPltdKTogSFRNTEVsZW1lbnRbXSB7XG4gIGNvbnN0IGh0bWxFbGVtZW50czogSFRNTEVsZW1lbnRbXSA9IFtdO1xuXG4gIGNvbXBvbmVudHNcbiAgICAuZmlsdGVyKGNvbXBvbmVudCA9PiAhY29tcG9uZW50LmlzSGlkZGVuKCkpXG4gICAgLmZvckVhY2goY29tcG9uZW50ID0+IHtcbiAgICAgIGNvbnN0IGVsZW1lbnRzVG9Db25zaWRlciA9IGNvbXBvbmVudCBpbnN0YW5jZW9mIENvbnRhaW5lciA/IHJlc29sdmVBbGxDb21wb25lbnRzKGNvbXBvbmVudCkgOiBbY29tcG9uZW50XTtcblxuICAgICAgZWxlbWVudHNUb0NvbnNpZGVyLmZvckVhY2goY29tcG9uZW50ID0+IHtcbiAgICAgICAgaHRtbEVsZW1lbnRzLnB1c2goLi4udG9IdG1sRWxlbWVudChjb21wb25lbnQpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gIHJldHVybiBodG1sRWxlbWVudHM7XG59XG4iLCJpbXBvcnQgeyBBY3Rpb24sIERpcmVjdGlvbiwgS2V5TWFwIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBCcm93c2VyVXRpbHMgfSBmcm9tICcuLi9icm93c2VydXRpbHMnO1xuXG5jb25zdCBUaXplbktleU1hcCA9IHtcbiAgaXNBcHBsaWNhYmxlOiAoKSA9PiBCcm93c2VyVXRpbHMuaXNUaXplbixcbiAga2V5Q29kZXM6IHtcbiAgICAvLyBELXBhZCBVcFxuICAgIDM4OiBEaXJlY3Rpb24uVVAsXG4gICAgLy8gRC1wYWQgRG93blxuICAgIDQwOiBEaXJlY3Rpb24uRE9XTixcbiAgICAvLyBELXBhZCBMZWZ0XG4gICAgMzc6IERpcmVjdGlvbi5MRUZULFxuICAgIC8vIEQtcGFkIFJpZ2h0XG4gICAgMzk6IERpcmVjdGlvbi5SSUdIVCxcbiAgICAvLyBELXBhZCBPS1xuICAgIDEzOiBBY3Rpb24uU0VMRUNULFxuICAgIC8vIEJhY2tcbiAgICAxMDAwOTogQWN0aW9uLkJBQ0ssXG4gIH0sXG59O1xuXG5jb25zdCBXZWJPc0tleU1hcCA9IHtcbiAgaXNBcHBsaWNhYmxlOiAoKSA9PiBCcm93c2VyVXRpbHMuaXNXZWJPcyxcbiAga2V5Q29kZXM6IHtcbiAgICAvLyBELXBhZCBVcFxuICAgIDM4OiBEaXJlY3Rpb24uVVAsXG4gICAgLy8gRC1wYWQgRG93blxuICAgIDQwOiBEaXJlY3Rpb24uRE9XTixcbiAgICAvLyBELXBhZCBMZWZ0XG4gICAgMzc6IERpcmVjdGlvbi5MRUZULFxuICAgIC8vIEQtcGFkIFJpZ2h0XG4gICAgMzk6IERpcmVjdGlvbi5SSUdIVCxcbiAgICAvLyBELXBhZCBPS1xuICAgIDEzOiBBY3Rpb24uU0VMRUNULFxuICAgIC8vIEJhY2tcbiAgICA0NjE6IEFjdGlvbi5CQUNLLFxuICB9LFxufTtcblxuY29uc3QgUGxheVN0YXRpb25LZXlNYXAgPSB7XG4gIGlzQXBwbGljYWJsZTogKCkgPT4gQnJvd3NlclV0aWxzLmlzUGxheVN0YXRpb24sXG4gIGtleUNvZGVzOiB7XG4gICAgLy8gRC1wYWQgVXBcbiAgICAzODogRGlyZWN0aW9uLlVQLFxuICAgIC8vIEQtcGFkIERvd25cbiAgICA0MDogRGlyZWN0aW9uLkRPV04sXG4gICAgLy8gRC1wYWQgTGVmdFxuICAgIDM3OiBEaXJlY3Rpb24uTEVGVCxcbiAgICAvLyBELXBhZCBSaWdodFxuICAgIDM5OiBEaXJlY3Rpb24uUklHSFQsXG4gICAgLy8gQ3Jvc3NcbiAgICAxMzogQWN0aW9uLlNFTEVDVCxcbiAgICAvLyBDaXJjbGVcbiAgICAyNzogQWN0aW9uLkJBQ0ssXG4gIH0sXG59O1xuXG5jb25zdCBBbmRyb2lkS2V5TWFwID0ge1xuICBpc0FwcGxpY2FibGU6ICgpID0+IEJyb3dzZXJVdGlscy5pc0FuZHJvaWQsXG4gIGtleUNvZGVzOiB7XG4gICAgLy8gRC1wYWQgVXBcbiAgICAxOTogRGlyZWN0aW9uLlVQLFxuICAgIC8vIEQtcGFkIERvd25cbiAgICAyMDogRGlyZWN0aW9uLkRPV04sXG4gICAgLy8gRC1wYWQgTGVmdFxuICAgIDIxOiBEaXJlY3Rpb24uTEVGVCxcbiAgICAvLyBELXBhZCBSaWdodFxuICAgIDIyOiBEaXJlY3Rpb24uUklHSFQsXG4gICAgLy8gRC1wYWQgQ2VudGVyXG4gICAgMjM6IEFjdGlvbi5TRUxFQ1QsXG4gICAgLy8gRW50ZXJcbiAgICA2NjogQWN0aW9uLlNFTEVDVCxcbiAgICAvLyBCYWNrXG4gICAgNDogQWN0aW9uLkJBQ0ssXG4gIH0sXG59O1xuXG5jb25zdCBIaXNlbnNlS2V5TWFwID0ge1xuICBpc0FwcGxpY2FibGU6ICgpID0+IEJyb3dzZXJVdGlscy5pc0hpc2Vuc2UsXG4gIGtleUNvZGVzOiB7XG4gICAgLy8gRC1wYWQgVXBcbiAgICAzODogRGlyZWN0aW9uLlVQLFxuICAgIC8vIEQtcGFkIERvd25cbiAgICA0MDogRGlyZWN0aW9uLkRPV04sXG4gICAgLy8gRC1wYWQgTGVmdFxuICAgIDM3OiBEaXJlY3Rpb24uTEVGVCxcbiAgICAvLyBELXBhZCBSaWdodFxuICAgIDM5OiBEaXJlY3Rpb24uUklHSFQsXG4gICAgLy8gT0tcbiAgICAxMzogQWN0aW9uLlNFTEVDVCxcbiAgICAvLyBCYWNrXG4gICAgODogQWN0aW9uLkJBQ0ssXG4gIH0sXG59O1xuXG4vLyBEZWZhdWx0IGtleSBtYXAgdXNlZCBvbiBkZXNrdG9wc1xuY29uc3QgRGVmYXVsdEtleU1hcCA9IHtcbiAgLy8gQXJyb3cgVXBcbiAgMzg6IERpcmVjdGlvbi5VUCxcbiAgLy8gQXJyb3cgRG93blxuICA0MDogRGlyZWN0aW9uLkRPV04sXG4gIC8vIEFycm93IExlZnRcbiAgMzc6IERpcmVjdGlvbi5MRUZULFxuICAvLyBBcnJvdyBSaWdodFxuICAzOTogRGlyZWN0aW9uLlJJR0hULFxuICAvLyBFbnRlclxuICAxMzogQWN0aW9uLlNFTEVDVCxcbiAgLy8gRXNjYXBlXG4gIDI3OiBBY3Rpb24uQkFDSyxcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbWF0Y2hpbmcga2V5IG1hcCBmb3IgdGhlIGN1cnJlbnQgcGxhdGZvcm0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRLZXlNYXBGb3JQbGF0Zm9ybSgpOiBLZXlNYXAge1xuICBjb25zdCBhcHBsaWNhYmxlS2V5TWFwID0gW1xuICAgIFdlYk9zS2V5TWFwLFxuICAgIFRpemVuS2V5TWFwLFxuICAgIFBsYXlTdGF0aW9uS2V5TWFwLFxuICAgIEhpc2Vuc2VLZXlNYXAsXG4gICAgQW5kcm9pZEtleU1hcCxcbiAgXS5maW5kKGtleU1hcCA9PiBrZXlNYXAuaXNBcHBsaWNhYmxlKCkpO1xuXG4gIGlmIChhcHBsaWNhYmxlS2V5TWFwKSB7XG4gICAgcmV0dXJuIGFwcGxpY2FibGVLZXlNYXAua2V5Q29kZXM7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIERlZmF1bHRLZXlNYXA7XG4gIH1cbn1cbiIsImltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gJy4vdHlwZXMnO1xuXG5pbnRlcmZhY2UgVmVjdG9yIHtcbiAgeDogbnVtYmVyO1xuICB5OiBudW1iZXI7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgdmVjdG9yLlxuICpcbiAqIEBwYXJhbSB2ZWN0b3IgVGhlIHZlY3RvciB0byBjYWxjdWxhdGUgdGhlIGxlbmd0aCBvZlxuICovXG5mdW5jdGlvbiBsZW5ndGgodmVjdG9yOiBWZWN0b3IpOiBudW1iZXIge1xuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHZlY3Rvci54LCAyKSArIE1hdGgucG93KHZlY3Rvci55LCAyKSk7XG59XG5cbi8qKlxuICogTm9ybWFsaXplcyB0aGUgZ2l2ZW4gdmVjdG9yLlxuICpcbiAqIEBwYXJhbSB2ZWN0b3IgVGhlIHZlY3RvciB0byBub3JtYWxpemVcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplKHZlY3RvcjogVmVjdG9yKTogVmVjdG9yIHtcbiAgY29uc3QgbGVuID0gbGVuZ3RoKHZlY3Rvcik7XG5cbiAgcmV0dXJuIHtcbiAgICB4OiB2ZWN0b3IueCAvIGxlbixcbiAgICB5OiB2ZWN0b3IueSAvIGxlbixcbiAgfTtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBiZXR3ZWVuIDIgdmVjdG9ycy5cbiAqXG4gKiBAcGFyYW0gYSBUaGUgZmlyc3QgdmVjdG9yXG4gKiBAcGFyYW0gYiBUaGUgc2Vjb25kIHZlY3RvclxuICovXG5mdW5jdGlvbiBkb3RQcm9kdWN0KGE6IFZlY3RvciwgYjogVmVjdG9yKTogbnVtYmVyIHtcbiAgcmV0dXJuIGEueCAqIGIueCArIGEueSAqIGIueTtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSAyIHBvaW50cyBwb2ludGVkIHRvIGJ5IHRoZSBwcm92aWRlZCB2ZWN0b3JzLlxuICpcbiAqIEBwYXJhbSBhIFRoZSBmaXJzdCB2ZWN0b3JcbiAqIEBwYXJhbSBiIFRoZSBzZWNvbmQgdmVjdG9yXG4gKi9cbmZ1bmN0aW9uIGRpc3RhbmNlKGE6IFZlY3RvciwgYjogVmVjdG9yKTogbnVtYmVyIHtcbiAgcmV0dXJuIGxlbmd0aCh7XG4gICAgeDogYi54IC0gYS54LFxuICAgIHk6IGIueSAtIGEueSxcbiAgfSk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHZlY3RvciB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoZSBjZW50ZXIgb2YgdGhlIHByb3ZpZGVkIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gZ2V0IHRoZSBjZW50ZXIgb2ZcbiAqL1xuZnVuY3Rpb24gZ2V0RWxlbWVudFZlY3RvcihlbGVtZW50OiBIVE1MRWxlbWVudCk6IFZlY3RvciB7XG4gIGNvbnN0IGJvdW5kaW5nUmVjdCA9IGdldEJvdW5kaW5nUmVjdEZyb21FbGVtZW50KGVsZW1lbnQpO1xuXG4gIHJldHVybiB7XG4gICAgeDogYm91bmRpbmdSZWN0LnggKyBib3VuZGluZ1JlY3Qud2lkdGggLyAyLFxuICAgIHk6IGJvdW5kaW5nUmVjdC55ICsgYm91bmRpbmdSZWN0LmhlaWdodCAvIDIsXG4gIH07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYW5nbGUgaW4gZGVncmVlcyBiZXR3ZWVuIHRoZSB1bml0IHZlY3RvciBwb2ludGluZyBpbiB0aGUgZ2l2ZW4ge0RpcmVjdGlvbn0gYW5kIHRoZSB1bml0IHZlY3RvciB0aGF0XG4gKiBwb2ludHMgZnJvbSB0aGUgY3VycmVudCBlbGVtZW50IHRvIGFub3RoZXIgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gYSBUaGUgdmVjdG9yIG9mIHRoZSBjdXJyZW50IGVsZW1lbnRcbiAqIEBwYXJhbSBiIFRoZSB2ZWN0b3Igb2YgdGhlIG90aGVyIGVsZW1lbnRcbiAqIEBwYXJhbSBkaXJlY3Rpb24gVGhlIGRpcmVjdGlvbiB0byBtb3ZlIGFsb25nXG4gKi9cbmZ1bmN0aW9uIGNhbGN1bGF0ZUFuZ2xlKGE6IFZlY3RvciwgYjogVmVjdG9yLCBkaXJlY3Rpb246IERpcmVjdGlvbik6IG51bWJlciB7XG4gIGNvbnN0IGRpcmVjdGlvblZlY3RvciA9IHtcbiAgICB4OiAoZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uTEVGVCA/IC0xIDogZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uUklHSFQgPyAxIDogMCksXG4gICAgeTogKGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLlVQID8gLTEgOiBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5ET1dOID8gMSA6IDApLFxuICB9O1xuXG4gIGNvbnN0IGVsZW1lbnRWZWN0b3IgPSBub3JtYWxpemUoe1xuICAgIHg6IGIueCAtIGEueCxcbiAgICB5OiBiLnkgLSBhLnksXG4gIH0pO1xuXG4gIGNvbnN0IGFuZ2xlQ29zID0gZG90UHJvZHVjdChkaXJlY3Rpb25WZWN0b3IsIGVsZW1lbnRWZWN0b3IpIC8gKGxlbmd0aChkaXJlY3Rpb25WZWN0b3IpICogbGVuZ3RoKGVsZW1lbnRWZWN0b3IpKTtcblxuICByZXR1cm4gTWF0aC5hY29zKGFuZ2xlQ29zKSAqIDE4MCAvIE1hdGguUEk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY2xvc2VzdCBlbGVtZW50IHRvIHRoZSBjdXJyZW50IGVsZW1lbnQgd2hlbiB0cnlpbmcgdG8gbmF2aWdhdGUgaW4gdGhlIHByb3ZpZGVkIGRpcmVjdGlvbi4gUmV0dXJuc1xuICogdW5kZWZpbmVkLCBpZiB0aGVyZSBpcyBub3QgZWxlbWVudCBpbiB0aGUgZ2l2ZW4gZGlyZWN0aW9uLlxuICpcbiAqIEBwYXJhbSBhY3RpdmVFbGVtZW50IFRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgZWxlbWVudFxuICogQHBhcmFtIGVsZW1lbnRzIFRoZSBsaXN0IG9mIGFsbCBlbGVtZW50cyB0aGF0IGNhbiBiZSBuYXZpZ2F0ZWQgdG9cbiAqIEBwYXJhbSBkaXJlY3Rpb24gVGhlIGRpcmVjdGlvbiBpbiB3aGljaCB0byBuYXZpZ2F0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWxlbWVudEluRGlyZWN0aW9uKFxuICBhY3RpdmVFbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgZWxlbWVudHM6IEhUTUxFbGVtZW50W10sXG4gIGRpcmVjdGlvbjogRGlyZWN0aW9uLFxuKTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQge1xuICBpZiAoIWFjdGl2ZUVsZW1lbnQpIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgY29uc3QgY3V0b2ZmQW5nbGUgPSA0NTtcbiAgY29uc3QgYWN0aXZlRWxlbVZlY3RvciA9IGdldEVsZW1lbnRWZWN0b3IoYWN0aXZlRWxlbWVudCk7XG5cbiAgcmV0dXJuIGVsZW1lbnRzXG4gICAgLy8gZG9uJ3QgdGFrZSB0aGUgY3VycmVudCBlbGVtZW50IGludG8gYWNjb3VudFxuICAgIC5maWx0ZXIoZWxlbSA9PiBlbGVtICE9PSBhY3RpdmVFbGVtZW50KVxuICAgIC8vIGdldCB0aGUgYW5nbGUgYmV0d2VlbiwgYW5kIGRpc3RhbmNlIHRvIGFueSBvdGhlciBlbGVtZW50IGZyb20gdGhlIGN1cnJlbnQgZWxlbWVudFxuICAgIC5tYXAoZWxlbWVudCA9PiB7XG4gICAgICBjb25zdCBlbGVtZW50VmVjdG9yID0gZ2V0RWxlbWVudFZlY3RvcihlbGVtZW50KTtcbiAgICAgIGNvbnN0IGRpc3QgPSBkaXN0YW5jZShhY3RpdmVFbGVtVmVjdG9yLCBlbGVtZW50VmVjdG9yKTtcbiAgICAgIGNvbnN0IGFuZ2xlID0gY2FsY3VsYXRlQW5nbGUoYWN0aXZlRWxlbVZlY3RvciwgZWxlbWVudFZlY3RvciwgZGlyZWN0aW9uKTtcblxuICAgICAgcmV0dXJuIHsgYW5nbGUsIGRpc3QsIGVsZW1lbnQgfTtcbiAgICB9KVxuICAgIC8vIGZpbHRlciBvdXQgYW55IGVsZW1lbnRzIHRoYXQgZG9uJ3QgYWxpZ24gd2l0aCB0aGUgZGlyZWN0aW9uIHdlJ3JlIHRyeWluZyB0byBtb3ZlIGluXG4gICAgLmZpbHRlcigoeyBhbmdsZSB9KSA9PiBhbmdsZSA8PSBjdXRvZmZBbmdsZSlcbiAgICAvLyBzb3J0IHRoZSByZXN1bHRpbmcgZWxlbWVudHMgYmFzZWQgb24gdGhlaXIgZGlzdGFuY2UgdG8gdGhlIGN1cnJlbnQgZWxlbWVudCBpbiBhc2NlbmRpbmcgb3JkZXJcbiAgICAuc29ydCgoeyBhbmdsZTogYW5nbGVBLCBkaXN0OiBkaXN0QSB9LCB7IGFuZ2xlOiBhbmdsZUIsIGRpc3Q6IGRpc3RCIH0pID0+IChhbmdsZUEgLSBhbmdsZUIpICsgKGRpc3RBIC0gZGlzdEIpKVxuICAgIC8vIHJldHVybiB0aGUgZWxlbWVudCBjbG9zZXN0IHRvIHRoZSBjdXJyZW50IGVsZW1lbnRcbiAgICAuc2hpZnQoKT8uZWxlbWVudDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIERPTVJlY3QgbGlrZSBvYmplY3QgY29udGFpbmluZyBob3Jpem9udGFsIFggYW5kIHZlcnRpY2FsIFkgY29vcmRpbmF0ZXMgZnJvbSBhbmQgSFRNTEVsZW1lbnQuXG4gKiBIYW5kbGVzIHVzZS1jYXNlcyBmb3IgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IHdoZW4gdGhlIHJldHVybiB0eXBlIGNhbiBiZSBlaXRoZXJcbiAqIGEgQ2xpZW50UmVjdCBvciBET01SZWN0IG9iamVjdCB0eXBlLlxuICpcbiAqIEBwYXJhbSBlbGVtZW50IFRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgZWxlbWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Qm91bmRpbmdSZWN0RnJvbUVsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgY29uc3QgYm91bmRpbmdSZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICBpZiAodHlwZW9mIGJvdW5kaW5nUmVjdC54ICE9PSAnbnVtYmVyJyAmJiB0eXBlb2YgYm91bmRpbmdSZWN0LnkgIT09ICdudW1iZXInKSB7XG4gICAgYm91bmRpbmdSZWN0LnggPSBib3VuZGluZ1JlY3QubGVmdDtcbiAgICBib3VuZGluZ1JlY3QueSA9IGJvdW5kaW5nUmVjdC50b3A7XG4gIH1cblxuICByZXR1cm4gYm91bmRpbmdSZWN0O1xufVxuXG4iLCJpbXBvcnQgeyBDb250YWluZXIgfSBmcm9tICcuLi9jb21wb25lbnRzL2NvbnRhaW5lcic7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBnZXRFbGVtZW50SW5EaXJlY3Rpb24gfSBmcm9tICcuL25hdmlnYXRpb25hbGdvcml0aG0nO1xuaW1wb3J0IHsgZ2V0SHRtbEVsZW1lbnRzRnJvbUNvbXBvbmVudHMgfSBmcm9tICcuL2dldGh0bWxlbGVtZW50c2Zyb21jb21wb25lbnRzJztcbmltcG9ydCB7IE5vZGVFdmVudFN1YnNjcmliZXIgfSBmcm9tICcuL25vZGVldmVudHN1YnNjcmliZXInO1xuaW1wb3J0IHsgaXNTZXR0aW5nc1BhbmVsIH0gZnJvbSAnLi90eXBlZ3VhcmRzJztcbmltcG9ydCB7IEFjdGlvbiwgQWN0aW9uQ2FsbGJhY2ssIENhbGxiYWNrLCBEaXJlY3Rpb24sIE5hdmlnYXRpb25DYWxsYmFjayB9IGZyb20gJy4vdHlwZXMnO1xuXG4vKipcbiAqIFVzZWQgYXMgcGFydCBvZiBzcGF0aWFsIG5hdmlnYXRpb24uIEdyb3VwcyB0b2dldGhlciBkaWZmZXJlbnQgY29tcG9uZW50cyB0byB3aGljaCB5b3UgY2FuIG5hdmlnYXRlIHRvLCBpbiBhIHNpbmdsZVxuICogbmF2aWdhdGlvbiBncm91cC5cbiAqXG4gKiBSZXNwb25zaWJsZSBmb3IgZmluZGluZyBlbGVtZW50cyBpbiBkaXJlY3Rpb24gb24gbmF2aWdhdGlvbiBhbmQgZm9yIHRyYWNraW5nIGFjdGl2ZSBlbGVtZW50IGluc2lkZSB0aGUgZ3JvdXAuXG4gKiBUcmlnZ2VycyBibHVyIGFuZCBmb2N1cyBvbiBlbGVtZW50IHdoZW4gYWN0aXZlIGVsZW1lbnQgaXMgY2hhbmdlZCwgYXMgd2VsbCBhcyBjbGljayBvbiBlbGVtZW50IG9uIGBBY3Rpb24uU0VMRUNUYC5cbiAqIFdpbGwgY2FsbCBgaGlkZVVpKClgIG9uIHBhc3NlZCBpbiBjb250YWluZXIgaWYgYEFjdGlvbi5CQUNLYCBpcyBjYWxsZWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBOYXZpZ2F0aW9uR3JvdXAge1xuICBwcml2YXRlIGFjdGl2ZUVsZW1lbnQ/OiBIVE1MRWxlbWVudDtcbiAgcHJpdmF0ZSBhY3RpdmVFbGVtZW50QmVmb3JlRGlzYWJsZT86IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIHJlYWRvbmx5IGNvbXBvbmVudHM6IENvbXBvbmVudDx1bmtub3duPltdO1xuICBwcml2YXRlIHJlbW92ZUVsZW1lbnRIb3ZlckV2ZW50TGlzdGVuZXJzID0gKCkgPT4ge307XG4gIHByaXZhdGUgcmVhZG9ubHkgZXZlbnRTdWJzY3JpYmVyOiBOb2RlRXZlbnRTdWJzY3JpYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBjb250YWluZXI6IENvbnRhaW5lcjx1bmtub3duPiwgLi4uY29tcG9uZW50czogQ29tcG9uZW50PHVua25vd24+W10pIHtcbiAgICB0aGlzLmNvbXBvbmVudHMgPSBjb21wb25lbnRzO1xuICAgIHRoaXMuZXZlbnRTdWJzY3JpYmVyID0gbmV3IE5vZGVFdmVudFN1YnNjcmliZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiBvdmVyd3JpdHRlbiwgYWxsb3dzIHRvIGltcGxlbWVudCBjdXN0b20gbmF2aWdhdGlvbiBiZWhhdmlvci4gUGVyIGRlZmF1bHQsIHRoZSBpbnRlcm5hbCBoYW5kbGVyIHdpbGwgc3RpbGwgYmVcbiAgICogZXhlY3V0ZWQuIFRvIHByZXZlbnQgZXhlY3V0aW9uIG9mIHRoZSBkZWZhdWx0IG5hdmlnYXRpb24gaGFuZGxlciwgY2FsbCBgcHJldmVudERlZmF1bHQoKWA7XG4gICAqXG4gICAqIEBwYXJhbSBkaXJlY3Rpb24ge0RpcmVjdGlvbn0gVGhlIGRpcmVjdGlvbiB0byBtb3ZlIGFsb25nXG4gICAqIEBwYXJhbSB0YXJnZXQge0hUTUxFbGVtZW50fSBUaGUgdGFyZ2V0IGVsZW1lbnQgZm9yIHRoZSBldmVudFxuICAgKiBAcGFyYW0gcHJldmVudERlZmF1bHQgeygpID0+IHZvaWR9IEEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIHdpbGwgcHJldmVudCB0aGUgZXhlY3V0aW9uIG9mIHRoZSBkZWZhdWx0IGhhbmRsZXJcbiAgICovXG4gIHB1YmxpYyBvbk5hdmlnYXRpb24/OiBOYXZpZ2F0aW9uQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIElmIG92ZXJ3cml0dGVuLCBhbGxvd3MgdG8gaW1wbGVtZW50IGN1c3RvbSBhY3Rpb24gYmVoYXZpb3IuIFBlciBkZWZhdWx0LCB0aGUgaW50ZXJuYWwgaGFuZGxlciB3aWxsIHN0aWxsIGJlXG4gICAqIGV4ZWN1dGVkLiBUbyBwcmV2ZW50IGV4ZWN1dGlvbiBvZiB0aGUgZGVmYXVsdCBhY3Rpb24gaGFuZGxlciwgY2FsbCBgcHJldmVudERlZmF1bHQoKWA7XG4gICAqXG4gICAqIEBwYXJhbSBhY3Rpb24ge0FjdGlvbn0gVGhlIGFjdGlvbiB0aGF0IHdhcyBjYWxsZWRcbiAgICogQHBhcmFtIHRhcmdldCB7SFRNTEVsZW1lbnR9IFRoZSB0YXJnZXQgZWxlbWVudCB0aGF0IGFjdGlvbiB3YXMgY2FsbGVkIG9uXG4gICAqIEBwYXJhbSBwcmV2ZW50RGVmYXVsdCB7KCkgPT4gdm9pZH0gQSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgd2lsbCBwcmV2ZW50IHRoZSBleGVjdXRpb24gb2YgdGhlIGRlZmF1bHQgaGFuZGxlclxuICAgKi9cbiAgcHVibGljIG9uQWN0aW9uPzogQWN0aW9uQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFjdGl2ZSBIVE1MRWxlbWVudC5cbiAgICovXG4gIHB1YmxpYyBnZXRBY3RpdmVFbGVtZW50KCk6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmVFbGVtZW50O1xuICB9XG5cbiAgcHJpdmF0ZSBmb2N1c0VsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICB0aGlzLmJsdXJBY3RpdmVFbGVtZW50KCk7XG4gICAgdGhpcy5hY3RpdmVFbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLmFjdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgfVxuXG4gIHByaXZhdGUgYmx1ckFjdGl2ZUVsZW1lbnQoKTogdm9pZCB7XG4gICAgdGhpcy5hY3RpdmVFbGVtZW50Py5ibHVyKCk7XG4gIH1cblxuICBwcml2YXRlIGZvY3VzRmlyc3RFbGVtZW50KCk6IHZvaWQge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBnZXRIdG1sRWxlbWVudHNGcm9tQ29tcG9uZW50cyh0aGlzLmNvbXBvbmVudHMpWzBdO1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICB0aGlzLmZvY3VzRWxlbWVudChlbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgZGVmYXVsdE5hdmlnYXRpb25IYW5kbGVyKGRpcmVjdGlvbjogRGlyZWN0aW9uKTogdm9pZCB7XG4gICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9IGdldEVsZW1lbnRJbkRpcmVjdGlvbihcbiAgICAgIHRoaXMuYWN0aXZlRWxlbWVudCxcbiAgICAgIGdldEh0bWxFbGVtZW50c0Zyb21Db21wb25lbnRzKHRoaXMuY29tcG9uZW50cyksXG4gICAgICBkaXJlY3Rpb24sXG4gICAgKTtcblxuICAgIGlmICh0YXJnZXRFbGVtZW50KSB7XG4gICAgICB0aGlzLmZvY3VzRWxlbWVudCh0YXJnZXRFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgZGVmYXVsdEFjdGlvbkhhbmRsZXIoYWN0aW9uOiBBY3Rpb24pOiB2b2lkIHtcbiAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgY2FzZShBY3Rpb24uU0VMRUNUKTpcbiAgICAgICAgdGhpcy5hY3RpdmVFbGVtZW50LmNsaWNrKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZShBY3Rpb24uQkFDSyk6XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmhpZGUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVJbnB1dDxUPihkYXRhOiBULCBkZWZhdWx0SGFuZGxlcjogKGRhdGE6IFQpID0+IHZvaWQsIHVzZXJIYW5kbGVyPzogQ2FsbGJhY2s8VD4pOiB2b2lkIHtcbiAgICBsZXQgaGFuZGxlRGVmYXVsdCA9IHRydWU7XG4gICAgY29uc3QgcHJldmVudERlZmF1bHQgPSAoKSA9PiAoaGFuZGxlRGVmYXVsdCA9IGZhbHNlKTtcblxuICAgIHVzZXJIYW5kbGVyPy4oZGF0YSwgdGhpcy5hY3RpdmVFbGVtZW50LCBwcmV2ZW50RGVmYXVsdCk7XG5cbiAgICBpZiAoaGFuZGxlRGVmYXVsdCkge1xuICAgICAgZGVmYXVsdEhhbmRsZXIuY2FsbCh0aGlzLCBkYXRhKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBhIG5hdmlnYXRpb24gZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSBkaXJlY3Rpb24gVGhlIGRpcmVjdGlvbiBvZiB0aGUgbmF2aWdhdGlvbiBldmVudFxuICAgKi9cbiAgcHVibGljIGhhbmRsZU5hdmlnYXRpb24oZGlyZWN0aW9uOiBEaXJlY3Rpb24pOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuYWN0aXZlRWxlbWVudCkge1xuICAgICAgLy8gSWYgd2UgZG8gbm90IGhhdmUgYW4gYWN0aXZlIGVsZW1lbnQsIHRoZSBhY3RpdmUgZWxlbWVudCBoYXMgYmVlbiBkaXNhYmxlZCBieSBhIG1vdXNlbGVhdmVcbiAgICAgIC8vIGV2ZW50LiBXZSBzaG91bGQgY29udGludWUgdGhlIG5hdmlnYXRpb24gYXQgdGhlIGV4YWN0IHBsYWNlIHdoZXJlIHdlIGxlZnQgb2ZmLlxuICAgICAgaWYgKHRoaXMuYWN0aXZlRWxlbWVudEJlZm9yZURpc2FibGUpIHtcbiAgICAgICAgdGhpcy5mb2N1c0VsZW1lbnQodGhpcy5hY3RpdmVFbGVtZW50QmVmb3JlRGlzYWJsZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmZvY3VzRmlyc3RFbGVtZW50KCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuaGFuZGxlSW5wdXQoZGlyZWN0aW9uLCB0aGlzLmRlZmF1bHROYXZpZ2F0aW9uSGFuZGxlciwgdGhpcy5vbk5hdmlnYXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgYW4gYWN0aW9uIGV2ZW50LlxuICAgKlxuICAgKiBAcGFyYW0gYWN0aW9uIFRoZSBhY3Rpb24gb2YgdGhlIGV2ZW50XG4gICAqL1xuICBwdWJsaWMgaGFuZGxlQWN0aW9uKGFjdGlvbjogQWN0aW9uKTogdm9pZCB7XG4gICAgdGhpcy5oYW5kbGVJbnB1dChhY3Rpb24sIHRoaXMuZGVmYXVsdEFjdGlvbkhhbmRsZXIsIHRoaXMub25BY3Rpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc2FibGUgbmF2aWdhdGlvbiBncm91cFxuICAgKlxuICAgKiBDYWxsIGJsdXIgb24gYWN0aXZlIGVsZW1lbnQsIHNldCBhcyB1bmRlZmluZWQsIGFuZCB0cmFjayBpdCBhcyBlbGVtZW50IGJlZm9yZSBkaXNhYmxlLlxuICAgKi9cbiAgcHVibGljIGRpc2FibGUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuYWN0aXZlRWxlbWVudCkge1xuICAgICAgdGhpcy5hY3RpdmVFbGVtZW50QmVmb3JlRGlzYWJsZSA9IHRoaXMuYWN0aXZlRWxlbWVudDtcbiAgICAgIHRoaXMuYmx1ckFjdGl2ZUVsZW1lbnQoKTtcbiAgICAgIHRoaXMuYWN0aXZlRWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRW5hYmxlIG5hdmlnYXRpb24gZ3JvdXBcbiAgICpcbiAgICogU2V0cyBhY3RpdmUgZWxlbWVudCB0byBlaXRoZXIgZWxlbWVudCB0aGF0IHdhcyBhY3RpdmUgYmVmb3JlIGRpc2FibGUsIG9yIGZpcnN0IGVsZW1lbnQgb2YgdHJhY2tlZCBlbGVtZW50cy5cbiAgICogSWYgaXQgaXMgc2V0dGluZ3MgcGFuZWwsIGl0IHdpbGwgYWx3YXlzIGZvY3VzIGZpcnN0IGVsZW1lbnQgaW4gdGhlIGxpc3QuXG4gICAqL1xuICBwdWJsaWMgZW5hYmxlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmFjdGl2ZUVsZW1lbnRCZWZvcmVEaXNhYmxlICYmICFpc1NldHRpbmdzUGFuZWwodGhpcy5jb250YWluZXIpKSB7XG4gICAgICB0aGlzLmZvY3VzRWxlbWVudCh0aGlzLmFjdGl2ZUVsZW1lbnRCZWZvcmVEaXNhYmxlKTtcbiAgICAgIHRoaXMuYWN0aXZlRWxlbWVudEJlZm9yZURpc2FibGUgPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZm9jdXNGaXJzdEVsZW1lbnQoKTtcbiAgICB9XG5cbiAgICB0aGlzLnRyYWNrRWxlbWVudEhvdmVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBsaXN0ZW5lciBmb3IgYG1vdXNlZW50ZXJgIG9uIHRyYWNrZWQgZWxlbWVudHMgdG8gZW5zdXJlIHRyYWNraW5nIG9mIGFjdGl2ZSBlbGVtZW50IHdpbGwgd29yayB0b2dldGhlclxuICAgKiBpbiBjb21iaW5hdGlvbiBvZiB1c2luZyBtb3VzZSBhbmQga2V5IGV2ZW50cy5cbiAgICovXG4gIHByaXZhdGUgdHJhY2tFbGVtZW50SG92ZXIoKTogdm9pZCB7XG4gICAgdGhpcy5yZW1vdmVFbGVtZW50SG92ZXJFdmVudExpc3RlbmVycygpO1xuXG4gICAgY29uc3QgcmVtb3ZlRXZlbnRMaXN0ZW5lckZ1bmN0aW9ucyA9IGdldEh0bWxFbGVtZW50c0Zyb21Db21wb25lbnRzKHRoaXMuY29tcG9uZW50cykubWFwKGh0bWxFbGVtID0+IHtcbiAgICAgIGNvbnN0IGVudGVyTGlzdGVuZXIgPSB0aGlzLmZvY3VzRWxlbWVudC5iaW5kKHRoaXMsIGh0bWxFbGVtKTtcbiAgICAgIGNvbnN0IGV4aXRMaXN0ZW5lciA9ICgpID0+IHRoaXMuZGlzYWJsZSgpO1xuXG4gICAgICB0aGlzLmV2ZW50U3Vic2NyaWJlci5vbihodG1sRWxlbSwgJ21vdXNlZW50ZXInLCBlbnRlckxpc3RlbmVyKTtcbiAgICAgIHRoaXMuZXZlbnRTdWJzY3JpYmVyLm9uKGh0bWxFbGVtLCAnbW91c2VsZWF2ZScsIGV4aXRMaXN0ZW5lcik7XG5cbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHRoaXMuZXZlbnRTdWJzY3JpYmVyLm9mZihodG1sRWxlbSwgJ21vdXNlZW50ZXInLCBlbnRlckxpc3RlbmVyKTtcbiAgICAgICAgdGhpcy5ldmVudFN1YnNjcmliZXIub2ZmKGh0bWxFbGVtLCAnbW91c2VsZWF2ZScsIGV4aXRMaXN0ZW5lcik7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgdGhpcy5yZW1vdmVFbGVtZW50SG92ZXJFdmVudExpc3RlbmVycyA9ICgpID0+IHJlbW92ZUV2ZW50TGlzdGVuZXJGdW5jdGlvbnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwb3NlIG9mIG5hdmlnYXRpb24gZ3JvdXBcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIHRoaXMuZXZlbnRTdWJzY3JpYmVyLnJlbGVhc2UoKTtcbiAgICB0aGlzLmFjdGl2ZUVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jb21wb25lbnRzLnNwbGljZSgwLCB0aGlzLmNvbXBvbmVudHMubGVuZ3RoKTtcbiAgICB0aGlzLnJlbW92ZUVsZW1lbnRIb3ZlckV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cbn1cbiIsInR5cGUgTGlzdGVuZXJzID0gKFtOb2RlLCBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0LCBib29sZWFuIHwgQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnNdKVtdO1xuXG4vKipcbiAqIEFsbG93cyB0byBzdWJzY3JpYmUgdG8gTm9kZSBldmVudHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBOb2RlRXZlbnRTdWJzY3JpYmVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBhdHRhY2hlZExpc3RlbmVyczogTWFwPGtleW9mIEhUTUxFbGVtZW50RXZlbnRNYXAsIExpc3RlbmVycz47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5hdHRhY2hlZExpc3RlbmVycyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RXZlbnRMaXN0ZW5lcnNPZlR5cGUodHlwZToga2V5b2YgSFRNTEVsZW1lbnRFdmVudE1hcCk6IExpc3RlbmVycyB7XG4gICAgaWYgKCF0aGlzLmF0dGFjaGVkTGlzdGVuZXJzLmhhcyh0eXBlKSkge1xuICAgICAgdGhpcy5hdHRhY2hlZExpc3RlbmVycy5zZXQodHlwZSwgW10pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmF0dGFjaGVkTGlzdGVuZXJzLmdldCh0eXBlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIHRoZSBnaXZlbiBldmVudCBsaXN0ZW5lciB0byB0aGUgbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIG5vZGUgVGhlIG5vZGUgdG8gcmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lciBmcm9tXG4gICAqIEBwYXJhbSB0eXBlIFRoZSBldmVudCB0byBsaXN0ZW4gdG9cbiAgICogQHBhcmFtIGxpc3RlbmVyIFRoZSBsaXN0ZW5lciB0byByZW1vdmVcbiAgICogQHBhcmFtIG9wdGlvbnMgVGhlIGV2ZW50IGxpc3RlbmVyIG9wdGlvbnNcbiAgICovXG4gIHB1YmxpYyBvbihcbiAgICBub2RlOiBOb2RlLFxuICAgIHR5cGU6IGtleW9mIEhUTUxFbGVtZW50RXZlbnRNYXAsXG4gICAgbGlzdGVuZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3QsXG4gICAgb3B0aW9ucz86IGJvb2xlYW4gfCBBZGRFdmVudExpc3RlbmVyT3B0aW9ucyxcbiAgKTogdm9pZCB7XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgICB0aGlzLmdldEV2ZW50TGlzdGVuZXJzT2ZUeXBlKHR5cGUpLnB1c2goW25vZGUsIGxpc3RlbmVyLCBvcHRpb25zXSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgZ2l2ZW4gZXZlbnQgbGlzdGVuZXIgZnJvbSB0aGUgbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIG5vZGUgVGhlIG5vZGUgdG8gYXR0YWNoIHRoZSBldmVudCBsaXN0ZW5lciB0b1xuICAgKiBAcGFyYW0gdHlwZSBUaGUgZXZlbnQgdG8gbGlzdGVuIHRvXG4gICAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgbGlzdGVuZXIgdG8gYWRkXG4gICAqIEBwYXJhbSBvcHRpb25zIFRoZSBldmVudCBsaXN0ZW5lciBvcHRpb25zXG4gICAqL1xuICBwdWJsaWMgb2ZmKFxuICAgIG5vZGU6IE5vZGUsXG4gICAgdHlwZToga2V5b2YgSFRNTEVsZW1lbnRFdmVudE1hcCxcbiAgICBsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdCxcbiAgICBvcHRpb25zPzogYm9vbGVhbiB8IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zLFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBsaXN0ZW5lcnNPZlR5cGUgPSB0aGlzLmdldEV2ZW50TGlzdGVuZXJzT2ZUeXBlKHR5cGUpO1xuICAgIGNvbnN0IGxpc3RlbmVySW5kZXggPSBsaXN0ZW5lcnNPZlR5cGUuZmluZEluZGV4KChbb3RoZXJOb2RlLCBvdGhlckxpc3RlbmVyLCBvdGhlck9wdGlvbnNdKSA9PiB7XG4gICAgICByZXR1cm4gb3RoZXJOb2RlID09PSBub2RlICYmIG90aGVyTGlzdGVuZXIgPT09IGxpc3RlbmVyICYmIG90aGVyT3B0aW9ucyA9PT0gb3B0aW9ucztcbiAgICB9KTtcblxuICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG5cbiAgICBpZiAobGlzdGVuZXJJbmRleCA+IC0xKSB7XG4gICAgICBsaXN0ZW5lcnNPZlR5cGUuc3BsaWNlKGxpc3RlbmVySW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBhdHRhY2hlZCBldmVudCBsaXN0ZW5lcnMuXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLmF0dGFjaGVkTGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyc09mVHlwZSwgdHlwZSkgPT4ge1xuICAgICAgbGlzdGVuZXJzT2ZUeXBlLmZvckVhY2goKFtlbGVtZW50LCBsaXN0ZW5lciwgb3B0aW9uc10pID0+IHtcbiAgICAgICAgdGhpcy5vZmYoZWxlbWVudCwgdHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5hdHRhY2hlZExpc3RlbmVycy5jbGVhcigpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOYXZpZ2F0aW9uR3JvdXAgfSBmcm9tICcuL25hdmlnYXRpb25ncm91cCc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBVSUNvbnRhaW5lciB9IGZyb20gJy4uL2NvbXBvbmVudHMvdWljb250YWluZXInO1xuaW1wb3J0IHsgQWN0aW9uLCBEaXJlY3Rpb24gfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBFeHRlbmRzIE5hdmlnYXRpb25Hcm91cCBhbmQgcHJvdmlkZXMgYWRkaXRpb25hbCBsb2dpYyBmb3IgaGlkaW5nIGFuZCBzaG93aW5nIHRoZSBVSSBvbiB0aGUgcm9vdCBjb250YWluZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBSb290TmF2aWdhdGlvbkdyb3VwIGV4dGVuZHMgTmF2aWdhdGlvbkdyb3VwIHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IGNvbnRhaW5lcjogVUlDb250YWluZXIsIC4uLmVsZW1lbnRzOiBDb21wb25lbnQ8dW5rbm93bj5bXSkge1xuICAgIHN1cGVyKGNvbnRhaW5lciwgLi4uZWxlbWVudHMpO1xuICB9XG5cbiAgcHVibGljIGhhbmRsZUFjdGlvbihhY3Rpb246IEFjdGlvbikge1xuICAgIHRoaXMuY29udGFpbmVyLnNob3dVaSgpO1xuXG4gICAgc3VwZXIuaGFuZGxlQWN0aW9uKGFjdGlvbik7XG4gIH1cblxuICBwdWJsaWMgaGFuZGxlTmF2aWdhdGlvbihkaXJlY3Rpb246IERpcmVjdGlvbikge1xuICAgIHRoaXMuY29udGFpbmVyLnNob3dVaSgpO1xuXG4gICAgc3VwZXIuaGFuZGxlTmF2aWdhdGlvbihkaXJlY3Rpb24pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGRlZmF1bHRBY3Rpb25IYW5kbGVyKGFjdGlvbjogQWN0aW9uKTogdm9pZCB7XG4gICAgaWYgKGFjdGlvbiA9PT0gQWN0aW9uLkJBQ0spIHtcbiAgICAgIHRoaXMuY29udGFpbmVyLmhpZGVVaSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdXBlci5kZWZhdWx0QWN0aW9uSGFuZGxlcihhY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIHN1cGVyLnJlbGVhc2UoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUm9vdE5hdmlnYXRpb25Hcm91cCB9IGZyb20gJy4vcm9vdG5hdmlnYXRpb25ncm91cCc7XG5pbXBvcnQgeyBOb2RlRXZlbnRTdWJzY3JpYmVyIH0gZnJvbSAnLi9ub2RlZXZlbnRzdWJzY3JpYmVyJztcbmltcG9ydCB7IEFjdGlvbiwgRGlyZWN0aW9uIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge2dldEJvdW5kaW5nUmVjdEZyb21FbGVtZW50fSBmcm9tICcuL25hdmlnYXRpb25hbGdvcml0aG0nO1xuXG5jb25zdCBEZWZhdWx0U2NydWJTcGVlZFBlcmNlbnRhZ2UgPSAwLjAwNTtcbmNvbnN0IFNjcnViU3BlZWRDbGVhckludGVydmFsID0gMTAwO1xuY29uc3QgU2NydWJTcGVlZE11bHRpcGxpZXIgPSAxLjE7XG5cbi8qKlxuICogSGFuZGxlcyBTcGF0aWFsIE5hdmlnYXRpb24gaW50ZXJhY3Rpb24gd2l0aCB0aGUgc2VlayBiYXIuIEVuc3VyZXMsIHRoYXQgc2VlayBvcGVyYXRpb25zIGNhbiBiZSBleGVjdXRlZCBhbmQgdGhhdCB0aGVcbiAqIHNjcnViYmluZyB0b29sdGlwIGlzIHNob3duIGFzIGlmIHRoZSB1c2VyIHNjcnViYmVkIHVzaW5nIHRoZSBtb3VzZS90b3VjaHNjcmVlbi5cbiAqL1xuZXhwb3J0IGNsYXNzIFNlZWtCYXJIYW5kbGVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBjdXJzb3JQb3NpdGlvbiA9IHsgeDogMCwgeTogMH07XG4gIHByaXZhdGUgcmVhZG9ubHkgZXZlbnRTdWJzY3JpYmVyOiBOb2RlRXZlbnRTdWJzY3JpYmVyO1xuICBwcml2YXRlIGlzU2NydWJiaW5nID0gZmFsc2U7XG4gIHByaXZhdGUgc2NydWJTcGVlZFJlc2V0VGltZW91dDogbnVtYmVyO1xuICBwcml2YXRlIHNjcnViU3BlZWRQZXJjZW50YWdlID0gRGVmYXVsdFNjcnViU3BlZWRQZXJjZW50YWdlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcm9vdE5hdmlnYXRpb25Hcm91cDogUm9vdE5hdmlnYXRpb25Hcm91cCkge1xuICAgIHRoaXMucm9vdE5hdmlnYXRpb25Hcm91cC5vbkFjdGlvbiA9IHRoaXMub25BY3Rpb247XG4gICAgdGhpcy5ldmVudFN1YnNjcmliZXIgPSBuZXcgTm9kZUV2ZW50U3Vic2NyaWJlcigpO1xuICAgIHRoaXMucm9vdE5hdmlnYXRpb25Hcm91cC5vbk5hdmlnYXRpb24gPSB0aGlzLm9uTmF2aWdhdGlvbjtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlU2NydWJTcGVlZFBlcmNlbnRhZ2UoKTogdm9pZCB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuc2NydWJTcGVlZFJlc2V0VGltZW91dCk7XG4gICAgdGhpcy5zY3J1YlNwZWVkUGVyY2VudGFnZSAqPSBTY3J1YlNwZWVkTXVsdGlwbGllcjtcbiAgICB0aGlzLnNjcnViU3BlZWRSZXNldFRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChcbiAgICAgICgpID0+IHRoaXMuc2NydWJTcGVlZFBlcmNlbnRhZ2UgPSBEZWZhdWx0U2NydWJTcGVlZFBlcmNlbnRhZ2UsIFNjcnViU3BlZWRDbGVhckludGVydmFsLFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGdldEluY3JlbWVudChkaXJlY3Rpb246IERpcmVjdGlvbiwgc2Vla0JhcldyYXBwZXI6IEhUTUxFbGVtZW50KTogbnVtYmVyIHtcbiAgICB0aGlzLnVwZGF0ZVNjcnViU3BlZWRQZXJjZW50YWdlKCk7XG5cbiAgICBjb25zdCBzZWVrQmFyV2lkdGggPSBzZWVrQmFyV3JhcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICBjb25zdCBpbmNyZW1lbnQgPSBzZWVrQmFyV2lkdGggKiB0aGlzLnNjcnViU3BlZWRQZXJjZW50YWdlO1xuXG4gICAgcmV0dXJuIGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLlJJR0hUID8gaW5jcmVtZW50IDogLWluY3JlbWVudDtcbiAgfVxuXG4gIHByaXZhdGUgcmVzZXRDdXJzb3JQb3NpdGlvbigpOiB2b2lkIHtcbiAgICB0aGlzLmN1cnNvclBvc2l0aW9uLnggPSAwO1xuICAgIHRoaXMuY3Vyc29yUG9zaXRpb24ueSA9IDA7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUN1cnNvclBvc2l0aW9uKGRpcmVjdGlvbjogRGlyZWN0aW9uLCBzZWVrQmFyV3JhcHBlcjogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICB0aGlzLmN1cnNvclBvc2l0aW9uLnggKz0gdGhpcy5nZXRJbmNyZW1lbnQoZGlyZWN0aW9uLCBzZWVrQmFyV3JhcHBlcik7XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemVDdXJzb3JQb3NpdGlvbihzZWVrQmFyV3JhcHBlcjogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICBjb25zdCBwbGF5YmFja1Bvc2l0aW9uTWFya2VyID0gZ2V0UGxheWJhY2tQb3NpdGlvbk1hcmtlcihzZWVrQmFyV3JhcHBlcik7XG4gICAgY29uc3QgcmVjdCA9IGdldEJvdW5kaW5nUmVjdEZyb21FbGVtZW50KHBsYXliYWNrUG9zaXRpb25NYXJrZXIpO1xuXG5cbiAgICBjb25zdCBzdGFydFggPSByZWN0LnggKyAocmVjdC53aWR0aCAvIDIpO1xuICAgIGNvbnN0IHN0YXJ0WSA9IHJlY3QueTtcblxuICAgIHRoaXMuY3Vyc29yUG9zaXRpb24ueCA9IHN0YXJ0WDtcbiAgICB0aGlzLmN1cnNvclBvc2l0aW9uLnkgPSBzdGFydFk7XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemVPclVwZGF0ZUN1cnNvclBvc2l0aW9uKHNlZWtCYXJXcmFwcGVyOiBIVE1MRWxlbWVudCwgZGlyZWN0aW9uOiBEaXJlY3Rpb24pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc1NjcnViYmluZykge1xuICAgICAgdGhpcy51cGRhdGVDdXJzb3JQb3NpdGlvbihkaXJlY3Rpb24sIHNlZWtCYXJXcmFwcGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pbml0aWFsaXplQ3Vyc29yUG9zaXRpb24oc2Vla0JhcldyYXBwZXIpO1xuICAgIH1cblxuICAgIHRoaXMuaXNTY3J1YmJpbmcgPSB0cnVlO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDdXJzb3JQb3NpdGlvbk1vdXNlRXZlbnRJbml0KCk6IE1vdXNlRXZlbnRJbml0IHtcbiAgICByZXR1cm4ge1xuICAgICAgY2xpZW50WDogdGhpcy5jdXJzb3JQb3NpdGlvbi54LFxuICAgICAgY2xpZW50WTogdGhpcy5jdXJzb3JQb3NpdGlvbi55LFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGRpc3BhdGNoTW91c2VNb3ZlRXZlbnQoc2Vla0JhcjogRWxlbWVudCk6IHZvaWQge1xuICAgIHNlZWtCYXIuZGlzcGF0Y2hFdmVudChuZXcgTW91c2VFdmVudCgnbW91c2Vtb3ZlJywgdGhpcy5nZXRDdXJzb3JQb3NpdGlvbk1vdXNlRXZlbnRJbml0KCkpKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVhZG9ubHkgb25OYXZpZ2F0aW9uID0gKGRpcmVjdGlvbjogRGlyZWN0aW9uLCB0YXJnZXQ6IEhUTUxFbGVtZW50LCBwcmV2ZW50RGVmYXVsdDogKCkgPT4gdm9pZCk6IHZvaWQgPT4ge1xuICAgIGlmICghaXNTZWVrQmFyV3JhcHBlcih0YXJnZXQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLlVQIHx8IGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLkRPV04pIHtcbiAgICAgIHRoaXMuc3RvcFNlZWtpbmcoZ2V0U2Vla0Jhcih0YXJnZXQpKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuaW5pdGlhbGl6ZU9yVXBkYXRlQ3Vyc29yUG9zaXRpb24odGFyZ2V0LCBkaXJlY3Rpb24pO1xuICAgIHRoaXMuZGlzcGF0Y2hNb3VzZU1vdmVFdmVudChnZXRTZWVrQmFyKHRhcmdldCkpO1xuXG4gICAgcHJldmVudERlZmF1bHQoKTtcbiAgfTtcblxuICBwcml2YXRlIGRpc3BhdGNoTW91c2VDbGlja0V2ZW50KHNlZWtCYXI6IEVsZW1lbnQpOiB2b2lkIHtcbiAgICBjb25zdCBtb3VzZURvd25IYW5kbGVyID0gKCkgPT4ge1xuICAgICAgY29uc3QgbW91c2VFdmVudEluaXQgPSB0aGlzLmdldEN1cnNvclBvc2l0aW9uTW91c2VFdmVudEluaXQoKTtcblxuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgTW91c2VFdmVudCgnbW91c2V1cCcsIG1vdXNlRXZlbnRJbml0KSk7XG4gICAgICB0aGlzLmV2ZW50U3Vic2NyaWJlci5vZmYoc2Vla0JhciwgJ21vdXNlZG93bicsIG1vdXNlRG93bkhhbmRsZXIpO1xuICAgICAgdGhpcy5zdG9wU2Vla2luZyhzZWVrQmFyKTtcbiAgICB9O1xuXG4gICAgdGhpcy5ldmVudFN1YnNjcmliZXIub24oc2Vla0JhciwgJ21vdXNlZG93bicsIG1vdXNlRG93bkhhbmRsZXIpO1xuICAgIHNlZWtCYXIuZGlzcGF0Y2hFdmVudChuZXcgTW91c2VFdmVudCgnbW91c2Vkb3duJykpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdG9wU2Vla2luZyhzZWVrQmFyOiBFbGVtZW50KTogdm9pZCB7XG4gICAgdGhpcy5yZXNldEN1cnNvclBvc2l0aW9uKCk7XG4gICAgdGhpcy5pc1NjcnViYmluZyA9IGZhbHNlO1xuICAgIHRoaXMuZGlzcGF0Y2hNb3VzZUxlYXZlRXZlbnQoc2Vla0Jhcik7XG4gIH1cblxuICBwcml2YXRlIGRpc3BhdGNoTW91c2VMZWF2ZUV2ZW50KHNlZWtCYXI6IEVsZW1lbnQpOiB2b2lkIHtcbiAgICBzZWVrQmFyLmRpc3BhdGNoRXZlbnQobmV3IE1vdXNlRXZlbnQoJ21vdXNlbGVhdmUnKSk7XG4gIH1cblxuICBwcml2YXRlIHJlYWRvbmx5IG9uQWN0aW9uID0gKGFjdGlvbjogQWN0aW9uLCB0YXJnZXQ6IEhUTUxFbGVtZW50LCBwcmV2ZW50RGVmYXVsdDogKCkgPT4gdm9pZCk6IHZvaWQgPT4ge1xuICAgIGlmICghaXNTZWVrQmFyV3JhcHBlcih0YXJnZXQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc2Vla0JhciA9IGdldFNlZWtCYXIodGFyZ2V0KTtcblxuICAgIGlmIChhY3Rpb24gPT09IEFjdGlvbi5TRUxFQ1QgJiYgdGhpcy5pc1NjcnViYmluZykge1xuICAgICAgdGhpcy5kaXNwYXRjaE1vdXNlQ2xpY2tFdmVudChzZWVrQmFyKTtcbiAgICAgIHByZXZlbnREZWZhdWx0KCk7XG4gICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IEFjdGlvbi5CQUNLKSB7XG4gICAgICB0aGlzLnN0b3BTZWVraW5nKHNlZWtCYXIpO1xuICAgICAgcHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlbGVhc2VzIHRoZSBTZWVrQnJhSGFuZGxlciwgbWFraW5nIHN1cmUgYWxsIGV2ZW50IHN1YnNjcmliZXJzIGFyZSByZW1vdmVkLlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgdGhpcy5ldmVudFN1YnNjcmliZXIucmVsZWFzZSgpO1xuICAgIHRoaXMucm9vdE5hdmlnYXRpb25Hcm91cC5vbkFjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnJvb3ROYXZpZ2F0aW9uR3JvdXAub25OYXZpZ2F0aW9uID0gdW5kZWZpbmVkO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzU2Vla0JhcldyYXBwZXIoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBib29sZWFuIHtcbiAgcmV0dXJuIEFycmF5LmZyb20oZWxlbWVudC5jbGFzc0xpc3QpLmZpbmRJbmRleChjbGFzc05hbWUgPT4gLy11aS1zZWVrYmFyJC8udGVzdChjbGFzc05hbWUpKSA+IC0xO1xufVxuXG5mdW5jdGlvbiBnZXRTZWVrQmFyKHNlZWtCYXJXcmFwcGVyOiBIVE1MRWxlbWVudCk6IEVsZW1lbnQge1xuICByZXR1cm4gc2Vla0JhcldyYXBwZXIuY2hpbGRyZW4uaXRlbSgwKTtcbn1cblxuZnVuY3Rpb24gZ2V0UGxheWJhY2tQb3NpdGlvbk1hcmtlcihzZWVrQmFyV3JhcHBlcjogSFRNTEVsZW1lbnQpOiBIVE1MRWxlbWVudCB7XG4gIHJldHVybiBzZWVrQmFyV3JhcHBlci5xdWVyeVNlbGVjdG9yKCdbY2xhc3MqPVwic2Vla2Jhci1wbGF5YmFja3Bvc2l0aW9uLW1hcmtlclwiXScpO1xufVxuIiwiaW1wb3J0IHsgTmF2aWdhdGlvbkdyb3VwIH0gZnJvbSAnLi9uYXZpZ2F0aW9uZ3JvdXAnO1xuaW1wb3J0IHsgUm9vdE5hdmlnYXRpb25Hcm91cCB9IGZyb20gJy4vcm9vdG5hdmlnYXRpb25ncm91cCc7XG5pbXBvcnQgeyBOb2RlRXZlbnRTdWJzY3JpYmVyIH0gZnJvbSAnLi9ub2RlZXZlbnRzdWJzY3JpYmVyJztcbmltcG9ydCB7IFNlZWtCYXJIYW5kbGVyIH0gZnJvbSAnLi9zZWVrYmFyaGFuZGxlcic7XG5pbXBvcnQgeyBnZXRLZXlNYXBGb3JQbGF0Zm9ybSB9IGZyb20gJy4va2V5bWFwJztcbmltcG9ydCB7IEFjdGlvbiwgRGlyZWN0aW9uLCBLZXlNYXAgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IGlzQWN0aW9uLCBpc0RpcmVjdGlvbiB9IGZyb20gJy4vdHlwZWd1YXJkcyc7XG5cbi8qKlxuICogU3BhdGlhbE5hdmlnYXRpb24ga2VlcHMgdHJhY2sgb2YgYWxsIG5hdmlnYXRpb24gZ3JvdXBzLCBhbmQgdXBkYXRlcyB0aGUgYWN0aXZlIG5hdmlnYXRpb24gZ3JvdXAgd2hlbiB2aXNpYmlsaXR5XG4gKiBjaGFuZ2VzIG9uIGdyb3VwIGNvbnRhaW5lci5cbiAqXG4gKiBJdCBsaXN0ZW5zIHRvIGtleSBldmVudHMsIGFuZCB0cmlnZ2VycyBlaXRoZXIgaGFuZGxlTmF2aWdhdGlvbiBvciBoYW5kbGVBY3Rpb24gb24gdGhlIGFjdGl2ZSBncm91cC5cbiAqIFNlZWtCYXJIYW5kbGVyIHdpbGwgZ2V0IGluc3RhbnRpYXRlZCB3aXRoIHJvb3QgbmF2aWdhdGlvbiBncm91cCBhbmQgZGlzcG9zZWQgb24gcmVsZWFzZSBvZiB0aGUgc3BhdGlhbCBuYXZpZ2F0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgU3BhdGlhbE5hdmlnYXRpb24ge1xuICBwcml2YXRlIHVuc3Vic2NyaWJlVmlzaWJpbGl0eUNoYW5nZXNGbnM6ICgoKSA9PiB2b2lkKVtdO1xuICBwcml2YXRlIHJlYWRvbmx5IG5hdmlnYXRpb25Hcm91cHM6IE5hdmlnYXRpb25Hcm91cFtdID0gW107XG4gIHByaXZhdGUgcmVhZG9ubHkgYWN0aXZlTmF2aWdhdGlvbkdyb3VwczogTmF2aWdhdGlvbkdyb3VwW107XG4gIHByaXZhdGUgcmVhZG9ubHkgZXZlbnRTdWJzY3JpYmVyOiBOb2RlRXZlbnRTdWJzY3JpYmVyO1xuICBwcml2YXRlIHJlYWRvbmx5IHNlZWtCYXJIYW5kbGVyOiBTZWVrQmFySGFuZGxlcjtcbiAgcHJpdmF0ZSByZWFkb25seSBrZXlNYXA6IEtleU1hcDtcblxuICBjb25zdHJ1Y3Rvcihyb290TmF2aWdhdGlvbkdyb3VwOiBSb290TmF2aWdhdGlvbkdyb3VwLCAuLi5uYXZpZ2F0aW9uR3JvdXBzOiBOYXZpZ2F0aW9uR3JvdXBbXSkge1xuICAgIHRoaXMuc2Vla0JhckhhbmRsZXIgPSBuZXcgU2Vla0JhckhhbmRsZXIocm9vdE5hdmlnYXRpb25Hcm91cCk7XG5cbiAgICB0aGlzLmFjdGl2ZU5hdmlnYXRpb25Hcm91cHMgPSBbXTtcbiAgICB0aGlzLnVuc3Vic2NyaWJlVmlzaWJpbGl0eUNoYW5nZXNGbnMgPSBbXTtcbiAgICB0aGlzLmV2ZW50U3Vic2NyaWJlciA9IG5ldyBOb2RlRXZlbnRTdWJzY3JpYmVyKCk7XG4gICAgdGhpcy5uYXZpZ2F0aW9uR3JvdXBzID0gW3Jvb3ROYXZpZ2F0aW9uR3JvdXAsIC4uLm5hdmlnYXRpb25Hcm91cHNdO1xuICAgIHRoaXMua2V5TWFwID0gZ2V0S2V5TWFwRm9yUGxhdGZvcm0oKTtcblxuICAgIHRoaXMuc3Vic2NyaWJlVG9OYXZpZ2F0aW9uR3JvdXBWaXNpYmlsaXR5Q2hhbmdlcygpO1xuICAgIHRoaXMuYXR0YWNoS2V5RXZlbnRIYW5kbGVyKCk7XG4gICAgdGhpcy5lbmFibGVEZWZhdWx0TmF2aWdhdGlvbkdyb3VwKCk7XG4gIH1cblxuICBwcml2YXRlIGF0dGFjaEtleUV2ZW50SGFuZGxlcigpOiB2b2lkIHtcbiAgICB0aGlzLmV2ZW50U3Vic2NyaWJlci5vbihkb2N1bWVudCwgJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleUV2ZW50LCB0cnVlKTtcbiAgfVxuXG4gIHByaXZhdGUgb25TaG93ID0gKGdyb3VwOiBOYXZpZ2F0aW9uR3JvdXApOiB2b2lkID0+IHtcbiAgICB0aGlzLmFjdGl2ZU5hdmlnYXRpb25Hcm91cHMucHVzaChncm91cCk7XG4gICAgdGhpcy51cGRhdGVFbmFibGVkTmF2aWdhdGlvbkdyb3VwKCk7XG4gIH07XG5cbiAgcHJpdmF0ZSBvbkhpZGUgPSAoZ3JvdXA6IE5hdmlnYXRpb25Hcm91cCk6IHZvaWQgPT4ge1xuICAgIGNvbnN0IGdyb3VwSW5kZXggPSB0aGlzLmFjdGl2ZU5hdmlnYXRpb25Hcm91cHMuZmluZEluZGV4KG90aGVyID0+IG90aGVyID09PSBncm91cCk7XG5cbiAgICBpZiAoZ3JvdXBJbmRleCA+IC0xKSB7XG4gICAgICBncm91cC5kaXNhYmxlKCk7XG4gICAgICB0aGlzLmFjdGl2ZU5hdmlnYXRpb25Hcm91cHMuc3BsaWNlKGdyb3VwSW5kZXgsIDEpO1xuICAgICAgdGhpcy51cGRhdGVFbmFibGVkTmF2aWdhdGlvbkdyb3VwKCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmVzIHRvIG9uSGlkZSBhbmQgb25TaG93IG9uIGFsbCBuYXZpZ2F0aW9uIGdyb3VwcyBjb250YWluZXJzIGFzIFNwYXRpYWwgbmF2aWdhdGlvbiB0cmFja3MgYWN0aXZlIG5hdmlnYXRpb25cbiAgICogZ3JvdXAgYmFzZWQgb24gdGhlaXIgY29udGFpbmVyIHZpc2liaWxpdHkuXG4gICAqL1xuICBwcml2YXRlIHN1YnNjcmliZVRvTmF2aWdhdGlvbkdyb3VwVmlzaWJpbGl0eUNoYW5nZXMoKTogdm9pZCB7XG4gICAgdGhpcy5uYXZpZ2F0aW9uR3JvdXBzLmZvckVhY2goZ3JvdXAgPT4ge1xuICAgICAgY29uc3Qgb25TaG93SGFuZGxlciA9ICgpID0+IHRoaXMub25TaG93KGdyb3VwKTtcbiAgICAgIGNvbnN0IG9uSGlkZUhhbmRsZXIgPSAoKSA9PiB0aGlzLm9uSGlkZShncm91cCk7XG5cbiAgICAgIGdyb3VwLmNvbnRhaW5lci5vblNob3cuc3Vic2NyaWJlKG9uU2hvd0hhbmRsZXIpO1xuICAgICAgZ3JvdXAuY29udGFpbmVyLm9uSGlkZS5zdWJzY3JpYmUob25IaWRlSGFuZGxlcik7XG5cbiAgICAgIHRoaXMudW5zdWJzY3JpYmVWaXNpYmlsaXR5Q2hhbmdlc0Zucy5wdXNoKFxuICAgICAgICAoKSA9PiBncm91cC5jb250YWluZXIub25TaG93LnVuc3Vic2NyaWJlKG9uU2hvd0hhbmRsZXIpLFxuICAgICAgICAoKSA9PiBncm91cC5jb250YWluZXIub25IaWRlLnVuc3Vic2NyaWJlKG9uSGlkZUhhbmRsZXIpLFxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgdW5zdWJzY3JpYmVGcm9tTmF2aWdhdGlvbkdyb3VwVmlzaWJpbGl0eUNoYW5nZXMoKTogdm9pZCB7XG4gICAgdGhpcy51bnN1YnNjcmliZVZpc2liaWxpdHlDaGFuZ2VzRm5zLmZvckVhY2godW5zdWIgPT4gdW5zdWIoKSk7XG4gICAgdGhpcy51bnN1YnNjcmliZVZpc2liaWxpdHlDaGFuZ2VzRm5zID0gW107XG4gIH1cblxuICAvKipcbiAgICogSXQgd2lsbCBlbmFibGUgZ3JvdXAgb2Ygd2hpY2ggY29udGFpbmVyIGlzIGN1cnJlbnRseSBzaG93blxuICAgKiBJZiB0aGVyZSBhcmUgbm8gZ3JvdXBzIHdpdGggY29udGFpbmVycyB0aGF0IGFyZSBjdXJyZW50bHkgdmlzaWJsZSwgaXQgd2lsbCBlbmFibGUgcm9vdCBuYXZpZ2F0aW9uIGdyb3VwXG4gICAqL1xuICBwcml2YXRlIGVuYWJsZURlZmF1bHROYXZpZ2F0aW9uR3JvdXAoKTogdm9pZCB7XG4gICAgY29uc3QgaXNTaG93biA9IChncm91cDogTmF2aWdhdGlvbkdyb3VwKSA9PiBncm91cC5jb250YWluZXIuaXNTaG93bigpO1xuICAgIGNvbnN0IGdyb3VwVG9FbmFibGUgPSB0aGlzLm5hdmlnYXRpb25Hcm91cHMuZmluZChpc1Nob3duKSA/PyB0aGlzLm5hdmlnYXRpb25Hcm91cHNbMF07XG5cbiAgICBpZiAoZ3JvdXBUb0VuYWJsZSkge1xuICAgICAgdGhpcy5hY3RpdmVOYXZpZ2F0aW9uR3JvdXBzLnB1c2goZ3JvdXBUb0VuYWJsZSk7XG4gICAgICB0aGlzLnVwZGF0ZUVuYWJsZWROYXZpZ2F0aW9uR3JvdXAoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGlzYWJsZXMgbmF2aWdhdGlvbiBncm91cHMgdGhhdCBhcmUgbm8gbG9uZ2VyIGFjdGl2ZSBhbmQgY2FsbHMgZW5hYmxlIG9uIGxhc3QgcHVzaGVkIG5hdmlnYXRpb24gZ3JvdXBcbiAgICovXG4gIHByaXZhdGUgdXBkYXRlRW5hYmxlZE5hdmlnYXRpb25Hcm91cCgpOiB2b2lkIHtcbiAgICB0aGlzLmFjdGl2ZU5hdmlnYXRpb25Hcm91cHMuZm9yRWFjaCgoZ3JvdXAsIGlkeCkgPT4ge1xuICAgICAgaWYgKGlkeCA8IHRoaXMuYWN0aXZlTmF2aWdhdGlvbkdyb3Vwcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIGdyb3VwLmRpc2FibGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdyb3VwLmVuYWJsZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgY3VycmVudGx5IGFjdGl2ZSBuYXZpZ2F0aW9uIGdyb3VwXG4gICAqL1xuICBwdWJsaWMgZ2V0QWN0aXZlTmF2aWdhdGlvbkdyb3VwKCk6IE5hdmlnYXRpb25Hcm91cCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlTmF2aWdhdGlvbkdyb3Vwc1t0aGlzLmFjdGl2ZU5hdmlnYXRpb25Hcm91cHMubGVuZ3RoIC0gMV07XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGtleWJvYXJkIGV2ZW50IGtleWNvZGUgaXMgdHJhY2tlZCBlaXRoZXIgYXMgRGlyZWN0aW9uIG9yIEFjdGlvbiBhbmQgY2FsbHMgYXBwcm9wcmlhdGUgaGFuZGxlciBvbiBhY3RpdmVcbiAgICogbmF2aWdhdGlvbiBncm91cFxuICAgKlxuICAgKiBAcGFyYW0gZSB7S2V5Ym9hcmRFdmVudH1cbiAgICovXG4gIHByaXZhdGUgaGFuZGxlS2V5RXZlbnQgPSAoZTogS2V5Ym9hcmRFdmVudCk6IHZvaWQgPT4ge1xuICAgIGNvbnN0IGV2ZW50OiBEaXJlY3Rpb24gfCBBY3Rpb24gfCB1bmRlZmluZWQgPSB0aGlzLmtleU1hcFtnZXRLZXlDb2RlKGUpXTtcblxuICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuZ2V0QWN0aXZlTmF2aWdhdGlvbkdyb3VwKCk7XG4gICAgaWYgKCFhY3RpdmUgfHwgIWFjdGl2ZS5jb250YWluZXIgfHwgYWN0aXZlLmNvbnRhaW5lci5pc0hpZGRlbigpIHx8IGFjdGl2ZS5jb250YWluZXIuaXNEaXNhYmxlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzRGlyZWN0aW9uKGV2ZW50KSkge1xuICAgICAgYWN0aXZlLmhhbmRsZU5hdmlnYXRpb24oZXZlbnQpO1xuXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgICBpZiAoaXNBY3Rpb24oZXZlbnQpKSB7XG4gICAgICBhY3RpdmUuaGFuZGxlQWN0aW9uKGV2ZW50KTtcblxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIERpc3Bvc2Ugb2YgU3BhdGlhbE5hdmlnYXRpb25cbiAgICpcbiAgICogUmVtb3ZlIGFsbCBldmVudCBoYW5kbGVycywgcmVsZWFzZSBzZWVrYmFyIGhhbmRsZXIgYW5kIHJlbGVhc2UgYWxsIG5hdmlnYXRpb24gZ3JvdXBzLlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgdGhpcy51bnN1YnNjcmliZUZyb21OYXZpZ2F0aW9uR3JvdXBWaXNpYmlsaXR5Q2hhbmdlcygpO1xuICAgIHRoaXMuZXZlbnRTdWJzY3JpYmVyLnJlbGVhc2UoKTtcbiAgICB0aGlzLm5hdmlnYXRpb25Hcm91cHMuZm9yRWFjaChncm91cCA9PiBncm91cC5yZWxlYXNlKCkpO1xuICAgIHRoaXMuc2Vla0JhckhhbmRsZXIucmVsZWFzZSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEtleUNvZGUoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiBudW1iZXIge1xuICByZXR1cm4gZXZlbnQua2V5Q29kZTtcbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvY29tcG9uZW50JztcbmltcG9ydCB7IFNldHRpbmdzUGFuZWwgfSBmcm9tICcuLi9jb21wb25lbnRzL3NldHRpbmdzcGFuZWwnO1xuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSAnLi4vY29tcG9uZW50cy9jb250YWluZXInO1xuaW1wb3J0IHsgTGlzdEJveCB9IGZyb20gJy4uL2NvbXBvbmVudHMvbGlzdGJveCc7XG5pbXBvcnQgeyBBY3Rpb24sIERpcmVjdGlvbiB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNTZXR0aW5nc1BhbmVsKGNvbXBvbmVudDogQ29tcG9uZW50PHVua25vd24+KTogY29tcG9uZW50IGlzIFNldHRpbmdzUGFuZWwge1xuICByZXR1cm4gY29tcG9uZW50IGluc3RhbmNlb2YgU2V0dGluZ3NQYW5lbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29tcG9uZW50KG9iajogdW5rbm93bik6IG9iaiBpcyBDb21wb25lbnQ8dW5rbm93bj4ge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIG9iaiAhPT0gdW5kZWZpbmVkICYmIG9iaiBpbnN0YW5jZW9mIENvbXBvbmVudDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29udGFpbmVyKG9iajogdW5rbm93bik6IG9iaiBpcyBDb250YWluZXI8dW5rbm93bj4ge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIG9iaiAhPT0gdW5kZWZpbmVkICYmIG9iaiBpbnN0YW5jZW9mIENvbnRhaW5lcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTGlzdEJveChvYmo6IHVua25vd24pOiBvYmogaXMgTGlzdEJveCB7XG4gIHJldHVybiBvYmogaW5zdGFuY2VvZiBMaXN0Qm94O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEaXJlY3Rpb24oZGlyZWN0aW9uOiB1bmtub3duKTogZGlyZWN0aW9uIGlzIERpcmVjdGlvbiB7XG4gIHJldHVybiB0eXBlb2YgZGlyZWN0aW9uID09PSAnc3RyaW5nJyAmJiBPYmplY3QudmFsdWVzPHN0cmluZz4oRGlyZWN0aW9uKS5pbmNsdWRlcyhkaXJlY3Rpb24pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBY3Rpb24oYWN0aW9uOiB1bmtub3duKTogYWN0aW9uIGlzIEFjdGlvbiB7XG4gIHJldHVybiB0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJyAmJiBPYmplY3QudmFsdWVzPHN0cmluZz4oQWN0aW9uKS5pbmNsdWRlcyhhY3Rpb24pO1xufVxuIiwiZXhwb3J0IHR5cGUgQ2FsbGJhY2s8VD4gPSAoZGF0YTogVCwgdGFyZ2V0OiBIVE1MRWxlbWVudCwgcHJldmVudERlZmF1bHQ6ICgpID0+IHZvaWQpID0+IHZvaWQ7XG5leHBvcnQgdHlwZSBOYXZpZ2F0aW9uQ2FsbGJhY2sgPSBDYWxsYmFjazxEaXJlY3Rpb24+O1xuZXhwb3J0IHR5cGUgQWN0aW9uQ2FsbGJhY2sgPSBDYWxsYmFjazxBY3Rpb24+O1xuZXhwb3J0IHR5cGUgS2V5TWFwID0ge1xuICBba2V5Q29kZTogbnVtYmVyXTogQWN0aW9uIHwgRGlyZWN0aW9uO1xufTtcblxuZXhwb3J0IGVudW0gRGlyZWN0aW9uIHtcbiAgVVAgPSAndXAnLFxuICBET1dOID0gJ2Rvd24nLFxuICBMRUZUID0gJ2xlZnQnLFxuICBSSUdIVCA9ICdyaWdodCcsXG59XG5cbmV4cG9ydCBlbnVtIEFjdGlvbiB7XG4gIFNFTEVDVCA9ICdzZWxlY3QnLFxuICBCQUNLID0gJ2JhY2snLFxufVxuIiwiZXhwb3J0IG5hbWVzcGFjZSBTdG9yYWdlVXRpbHMge1xuICBsZXQgaGFzTG9jYWxTdG9yYWdlQ2FjaGU6IGJvb2xlYW47XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGhhc0xvY2FsU3RvcmFnZSgpOiBib29sZWFuIHtcbiAgICBpZiAoaGFzTG9jYWxTdG9yYWdlQ2FjaGUpIHtcbiAgICAgIHJldHVybiBoYXNMb2NhbFN0b3JhZ2VDYWNoZTtcbiAgICB9XG5cbiAgICAvLyBoYXNMb2NhbFN0b3JhZ2UgaXMgdXNlZCB0byBzYWZlbHkgZW5zdXJlIHdlIGNhbiB1c2UgbG9jYWxTdG9yYWdlXG4gICAgLy8gdGFrZW4gZnJvbSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2ViX1N0b3JhZ2VfQVBJL1VzaW5nX3RoZV9XZWJfU3RvcmFnZV9BUEkjRmVhdHVyZS1kZXRlY3RpbmdfbG9jYWxTdG9yYWdlXG4gICAgbGV0IHN0b3JhZ2U6IGFueSA9IHsgbGVuZ3RoOiAwIH07XG4gICAgdHJ5IHtcbiAgICAgIHN0b3JhZ2UgPSB3aW5kb3dbJ2xvY2FsU3RvcmFnZSddO1xuICAgICAgbGV0IHggPSAnX19zdG9yYWdlX3Rlc3RfXyc7XG4gICAgICBzdG9yYWdlLnNldEl0ZW0oeCwgeCk7XG4gICAgICBzdG9yYWdlLnJlbW92ZUl0ZW0oeCk7XG4gICAgICBoYXNMb2NhbFN0b3JhZ2VDYWNoZSA9IHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICBoYXNMb2NhbFN0b3JhZ2VDYWNoZSA9IGUgaW5zdGFuY2VvZiBET01FeGNlcHRpb24gJiYgKFxuICAgICAgICAgIC8vIGV2ZXJ5dGhpbmcgZXhjZXB0IEZpcmVmb3hcbiAgICAgICAgZS5jb2RlID09PSAyMiB8fFxuICAgICAgICAvLyBGaXJlZm94XG4gICAgICAgIGUuY29kZSA9PT0gMTAxNCB8fFxuICAgICAgICAvLyB0ZXN0IG5hbWUgZmllbGQgdG9vLCBiZWNhdXNlIGNvZGUgbWlnaHQgbm90IGJlIHByZXNlbnRcbiAgICAgICAgLy8gZXZlcnl0aGluZyBleGNlcHQgRmlyZWZveFxuICAgICAgICBlLm5hbWUgPT09ICdRdW90YUV4Y2VlZGVkRXJyb3InIHx8XG4gICAgICAgIC8vIEZpcmVmb3hcbiAgICAgICAgZS5uYW1lID09PSAnTlNfRVJST1JfRE9NX1FVT1RBX1JFQUNIRUQnKSAmJlxuICAgICAgICAvLyBhY2tub3dsZWRnZSBRdW90YUV4Y2VlZGVkRXJyb3Igb25seSBpZiB0aGVyZSdzIHNvbWV0aGluZyBhbHJlYWR5IHN0b3JlZFxuICAgICAgICBzdG9yYWdlLmxlbmd0aCAhPT0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0xvY2FsU3RvcmFnZUNhY2hlO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3JlcyBhIHN0cmluZyBpdGVtIGludG8gbG9jYWxTdG9yYWdlLlxuICAgKiBAcGFyYW0ga2V5IHRoZSBpdGVtJ3Mga2V5XG4gICAqIEBwYXJhbSBkYXRhIHRoZSBpdGVtJ3MgZGF0YVxuICAgKi9cbiAgZXhwb3J0IGZ1bmN0aW9uIHNldEl0ZW0oa2V5OiBzdHJpbmcsIGRhdGE6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmIChTdG9yYWdlVXRpbHMuaGFzTG9jYWxTdG9yYWdlKCkpIHtcbiAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIGRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGFuIGl0ZW0ncyBzdHJpbmcgdmFsdWUgZnJvbSB0aGUgbG9jYWxTdG9yYWdlLlxuICAgKiBAcGFyYW0ga2V5IHRoZSBrZXkgdG8gbG9vayB1cCBpdHMgYXNzb2NpYXRlZCB2YWx1ZVxuICAgKiBAcmV0dXJuIHtzdHJpbmcgfCBudWxsfSBSZXR1cm5zIHRoZSBzdHJpbmcgaWYgZm91bmQsIG51bGwgaWYgdGhlcmUgaXMgbm8gZGF0YSBzdG9yZWQgZm9yIHRoZSBrZXlcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRJdGVtKGtleTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgaWYgKFN0b3JhZ2VVdGlscy5oYXNMb2NhbFN0b3JhZ2UoKSkge1xuICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3RvcmVzIGFuIG9iamVjdCBpbnRvIGxvY2FsU3RvcmFnZS4gVGhlIG9iamVjdCB3aWxsIGJlIHNlcmlhbGl6ZWQgdG8gSlNPTi4gVGhlIGZvbGxvd2luZyB0eXBlcyBhcmUgc3VwcG9ydGVkXG4gICAqIGluIGFkZGl0aW9uIHRvIHRoZSBkZWZhdWx0IHR5cGVzOlxuICAgKiAgLSBDb2xvclV0aWxzLkNvbG9yXG4gICAqXG4gICAqIEBwYXJhbSBrZXkgdGhlIGtleSB0byBzdG9yZSB0aGUgZGF0YSB0b1xuICAgKiBAcGFyYW0gZGF0YSB0aGUgb2JqZWN0IHRvIHN0b3JlXG4gICAqL1xuICBleHBvcnQgZnVuY3Rpb24gc2V0T2JqZWN0PFQ+KGtleTogc3RyaW5nLCBkYXRhOiBUKTogdm9pZCB7XG4gICAgaWYgKFN0b3JhZ2VVdGlscy5oYXNMb2NhbFN0b3JhZ2UoKSkge1xuICAgICAgbGV0IGpzb24gPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICAgIHNldEl0ZW0oa2V5LCBqc29uKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhbiBvYmplY3QgZm9yIHRoZSBnaXZlbiBrZXkgZnJvbSBsb2NhbFN0b3JhZ2UuIFRoZSBvYmplY3Qgd2lsbCBiZSBkZXNlcmlhbGl6ZWQgZnJvbSBKU09OLiBCZXNpZGUgdGhlXG4gICAqIGRlZmF1bHQgdHlwZXMsIHRoZSBmb2xsb3dpbmcgdHlwZXMgYXJlIHN1cHBvcnRlZDpcbiAgICogIC0gQ29sb3JVdGlscy5Db2xvclxuICAgKlxuICAgKiBAcGFyYW0ga2V5IHRoZSBrZXkgdG8gbG9vayB1cCBpdHMgYXNzb2NpYXRlZCBvYmplY3RcbiAgICogQHJldHVybiB7YW55fSBSZXR1cm5zIHRoZSBvYmplY3QgaWYgZm91bmQsIG51bGwgb3RoZXJ3aXNlXG4gICAqL1xuICBleHBvcnQgZnVuY3Rpb24gZ2V0T2JqZWN0PFQ+KGtleTogc3RyaW5nKTogVCB7XG4gICAgaWYgKFN0b3JhZ2VVdGlscy5oYXNMb2NhbFN0b3JhZ2UoKSkge1xuICAgICAgbGV0IGpzb24gPSBnZXRJdGVtKGtleSk7XG5cbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgbGV0IG9iamVjdCA9IEpTT04ucGFyc2UoanNvbik7XG4gICAgICAgIHJldHVybiA8VD5vYmplY3Q7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG5leHBvcnQgbmFtZXNwYWNlIFN0cmluZ1V0aWxzIHtcblxuICBleHBvcnQgbGV0IEZPUk1BVF9ISE1NU1M6IHN0cmluZyA9ICdoaDptbTpzcyc7XG4gIGV4cG9ydCBsZXQgRk9STUFUX01NU1M6IHN0cmluZyA9ICdtbTpzcyc7XG5cbiAgLyoqXG4gICAqIEZvcm1hdHMgYSBudW1iZXIgb2Ygc2Vjb25kcyBpbnRvIGEgdGltZSBzdHJpbmcgd2l0aCB0aGUgcGF0dGVybiBoaDptbTpzcy5cbiAgICpcbiAgICogQHBhcmFtIHRvdGFsU2Vjb25kcyB0aGUgdG90YWwgbnVtYmVyIG9mIHNlY29uZHMgdG8gZm9ybWF0IHRvIHN0cmluZ1xuICAgKiBAcGFyYW0gZm9ybWF0IHRoZSB0aW1lIGZvcm1hdCB0byBvdXRwdXQgKGRlZmF1bHQ6IGhoOm1tOnNzKVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgZm9ybWF0dGVkIHRpbWUgc3RyaW5nXG4gICAqL1xuICBleHBvcnQgZnVuY3Rpb24gc2Vjb25kc1RvVGltZSh0b3RhbFNlY29uZHM6IG51bWJlciwgZm9ybWF0OiBzdHJpbmcgPSBGT1JNQVRfSEhNTVNTKTogc3RyaW5nIHtcbiAgICBsZXQgaXNOZWdhdGl2ZSA9IHRvdGFsU2Vjb25kcyA8IDA7XG5cbiAgICBpZiAoaXNOZWdhdGl2ZSkge1xuICAgICAgLy8gSWYgdGhlIHRpbWUgaXMgbmVnYXRpdmUsIHdlIG1ha2UgaXQgcG9zaXRpdmUgZm9yIHRoZSBjYWxjdWxhdGlvbiBiZWxvd1xuICAgICAgLy8gKGVsc2Ugd2UnZCBnZXQgYWxsIG5lZ2F0aXZlIG51bWJlcnMpIGFuZCByZWF0dGFjaCB0aGUgbmVnYXRpdmUgc2lnbiBsYXRlci5cbiAgICAgIHRvdGFsU2Vjb25kcyA9IC10b3RhbFNlY29uZHM7XG4gICAgfVxuXG4gICAgLy8gU3BsaXQgaW50byBzZXBhcmF0ZSB0aW1lIHBhcnRzXG4gICAgbGV0IGhvdXJzID0gTWF0aC5mbG9vcih0b3RhbFNlY29uZHMgLyAzNjAwKTtcbiAgICBsZXQgbWludXRlcyA9IE1hdGguZmxvb3IodG90YWxTZWNvbmRzIC8gNjApIC0gaG91cnMgKiA2MDtcbiAgICBsZXQgc2Vjb25kcyA9IE1hdGguZmxvb3IodG90YWxTZWNvbmRzKSAlIDYwO1xuXG4gICAgcmV0dXJuIChpc05lZ2F0aXZlID8gJy0nIDogJycpICsgZm9ybWF0XG4gICAgICAgIC5yZXBsYWNlKCdoaCcsIGxlZnRQYWRXaXRoWmVyb3MoaG91cnMsIDIpKVxuICAgICAgICAucmVwbGFjZSgnbW0nLCBsZWZ0UGFkV2l0aFplcm9zKG1pbnV0ZXMsIDIpKVxuICAgICAgICAucmVwbGFjZSgnc3MnLCBsZWZ0UGFkV2l0aFplcm9zKHNlY29uZHMsIDIpKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBzZWNvbmRzVG9UZXh0KHRvdGFsU2Vjb25kczogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBjb25zdCBpc05lZ2F0aXZlID0gdG90YWxTZWNvbmRzIDwgMDtcblxuICAgIGlmIChpc05lZ2F0aXZlKSB7XG4gICAgICAvLyBJZiB0aGUgdGltZSBpcyBuZWdhdGl2ZSwgd2UgbWFrZSBpdCBwb3NpdGl2ZSBmb3IgdGhlIGNhbGN1bGF0aW9uIGJlbG93XG4gICAgICAvLyAoZWxzZSB3ZSdkIGdldCBhbGwgbmVnYXRpdmUgbnVtYmVycykgYW5kIHJlYXR0YWNoIHRoZSBuZWdhdGl2ZSBzaWduIGxhdGVyLlxuICAgICAgdG90YWxTZWNvbmRzID0gLXRvdGFsU2Vjb25kcztcbiAgICB9XG5cbiAgICAvLyBTcGxpdCBpbnRvIHNlcGFyYXRlIHRpbWUgcGFydHNcbiAgICBjb25zdCBob3VycyA9IE1hdGguZmxvb3IodG90YWxTZWNvbmRzIC8gMzYwMCk7XG4gICAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3IodG90YWxTZWNvbmRzIC8gNjApIC0gaG91cnMgKiA2MDtcbiAgICBjb25zdCBzZWNvbmRzID0gTWF0aC5mbG9vcih0b3RhbFNlY29uZHMpICUgNjA7XG5cbiAgICByZXR1cm4gKGlzTmVnYXRpdmUgPyAnLScgOiAnJykgK1xuICAgIChob3VycyAhPT0gMCA/IGAke2xlZnRQYWRXaXRoWmVyb3MoaG91cnMsIDIpfSAke2kxOG4ucGVyZm9ybUxvY2FsaXphdGlvbihpMThuLmdldExvY2FsaXplcignc2V0dGluZ3MudGltZS5ob3VycycpKX0gYCA6ICcnKSArXG4gICAgKG1pbnV0ZXMgIT09IDAgPyBgJHtsZWZ0UGFkV2l0aFplcm9zKG1pbnV0ZXMsIDIpfSAke2kxOG4ucGVyZm9ybUxvY2FsaXphdGlvbihpMThuLmdldExvY2FsaXplcignc2V0dGluZ3MudGltZS5taW51dGVzJykpfSBgIDogJycpICtcbiAgICBgJHtsZWZ0UGFkV2l0aFplcm9zKHNlY29uZHMsIDIpfSAke2kxOG4ucGVyZm9ybUxvY2FsaXphdGlvbihpMThuLmdldExvY2FsaXplcignc2V0dGluZ3MudGltZS5zZWNvbmRzJykpfWA7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYSBudW1iZXIgdG8gYSBzdHJpbmcgYW5kIGxlZnQtcGFkcyBpdCB3aXRoIHplcm9zIHRvIHRoZSBzcGVjaWZpZWQgbGVuZ3RoLlxuICAgKiBFeGFtcGxlOiBsZWZ0UGFkV2l0aFplcm9zKDEyMywgNSkgPT4gJzAwMTIzJ1xuICAgKlxuICAgKiBAcGFyYW0gbnVtIHRoZSBudW1iZXIgdG8gY29udmVydCB0byBzdHJpbmcgYW5kIHBhZCB3aXRoIHplcm9zXG4gICAqIEBwYXJhbSBsZW5ndGggdGhlIGRlc2lyZWQgbGVuZ3RoIG9mIHRoZSBwYWRkZWQgc3RyaW5nXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBwYWRkZWQgbnVtYmVyIGFzIHN0cmluZ1xuICAgKi9cbiAgZnVuY3Rpb24gbGVmdFBhZFdpdGhaZXJvcyhudW06IG51bWJlciB8IHN0cmluZywgbGVuZ3RoOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGxldCB0ZXh0ID0gbnVtICsgJyc7XG4gICAgbGV0IHBhZGRpbmcgPSAnMDAwMDAwMDAwMCcuc3Vic3RyKDAsIGxlbmd0aCAtIHRleHQubGVuZ3RoKTtcbiAgICByZXR1cm4gcGFkZGluZyArIHRleHQ7XG4gIH1cblxuICAvKipcbiAgICogRmlsbHMgb3V0IHBsYWNlaG9sZGVycyBpbiBhbiBhZCBtZXNzYWdlLlxuICAgKlxuICAgKiBIYXMgdGhlIHBsYWNlaG9sZGVycyAne3JlbWFpbmluZ1RpbWVbZm9ybWF0U3RyaW5nXX0nLCAne3BsYXllZFRpbWVbZm9ybWF0U3RyaW5nXX0nIGFuZFxuICAgKiAne2FkRHVyYXRpb25bZm9ybWF0U3RyaW5nXX0nLCB3aGljaCBhcmUgcmVwbGFjZWQgYnkgdGhlIHJlbWFpbmluZyB0aW1lIHVudGlsIHRoZSBhZCBjYW4gYmUgc2tpcHBlZCwgdGhlIGN1cnJlbnRcbiAgICogdGltZSBvciB0aGUgYWQgZHVyYXRpb24uIFRoZSBmb3JtYXQgc3RyaW5nIGlzIG9wdGlvbmFsLiBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgcGxhY2Vob2xkZXIgaXMgcmVwbGFjZWQgYnkgdGhlIHRpbWVcbiAgICogaW4gc2Vjb25kcy4gSWYgc3BlY2lmaWVkLCBpdCBtdXN0IGJlIG9mIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuICAgKiAtICVkIC0gSW5zZXJ0cyB0aGUgdGltZSBhcyBhbiBpbnRlZ2VyLlxuICAgKiAtICUwTmQgLSBJbnNlcnRzIHRoZSB0aW1lIGFzIGFuIGludGVnZXIgd2l0aCBsZWFkaW5nIHplcm9lcywgaWYgdGhlIGxlbmd0aCBvZiB0aGUgdGltZSBzdHJpbmcgaXMgc21hbGxlciB0aGFuIE4uXG4gICAqIC0gJWYgLSBJbnNlcnRzIHRoZSB0aW1lIGFzIGEgZmxvYXQuXG4gICAqIC0gJTBOZiAtIEluc2VydHMgdGhlIHRpbWUgYXMgYSBmbG9hdCB3aXRoIGxlYWRpbmcgemVyb2VzLlxuICAgKiAtICUuTWYgLSBJbnNlcnRzIHRoZSB0aW1lIGFzIGEgZmxvYXQgd2l0aCBNIGRlY2ltYWwgcGxhY2VzLiBDYW4gYmUgY29tYmluZWQgd2l0aCAlME5mLCBlLmcuICUwNC4yZiAodGhlIHRpbWVcbiAgICogMTAuMTIzIHdvdWxkIGJlIHByaW50ZWQgYXMgMDAxMC4xMikuXG4gICAqIC0gJWhoOm1tOnNzXG4gICAqIC0gJW1tOnNzXG4gICAqXG4gICAqIEV4YW1wbGVzOlxuICAgKiAtIHsgdGV4dDogJ0FkOiB7cmVtYWluaW5nVGltZSVtbTpzc30gc2VjcycgfVxuICAgKiBBbiBpbnB1dCB2YWx1ZSBvZiAxMDAgd291bGQgYmUgZGlzcGxheWVkIGFzOiAnQWQ6IDAxOjQwIHNlY3MnXG4gICAqIC0geyB0ZXh0OiAnQWQ6IHtyZW1haW5pbmdUaW1lJWZ9IHNlY3MnIH1cbiAgICogQW4gaW5wdXQgdmFsdWUgb2YgMTAwIHdvdWxkIGJlIGRpc3BsYXllZCBhczogJ0FkOiAxMDAuMCBzZWNzJ1xuICAgKlxuICAgKiBAcGFyYW0gYWRNZXNzYWdlIGFuIGFkIG1lc3NhZ2Ugd2l0aCBvcHRpb25hbCBwbGFjZWhvbGRlcnMgdG8gZmlsbFxuICAgKiBAcGFyYW0gc2tpcE9mZnNldCBpZiBzcGVjaWZpZWQsIHtyZW1haW5pbmdUaW1lfSB3aWxsIGJlIGZpbGxlZCB3aXRoIHRoZSByZW1haW5pbmcgdGltZSB1bnRpbCB0aGUgYWQgY2FuIGJlIHNraXBwZWRcbiAgICogQHBhcmFtIHBsYXllciB0aGUgcGxheWVyIHRvIGdldCB0aGUgdGltZSBkYXRhIGZyb21cbiAgICogQHJldHVybnMge3N0cmluZ30gdGhlIGFkIG1lc3NhZ2Ugd2l0aCBmaWxsZWQgcGxhY2Vob2xkZXJzXG4gICAqL1xuICBleHBvcnQgZnVuY3Rpb24gcmVwbGFjZUFkTWVzc2FnZVBsYWNlaG9sZGVycyhhZE1lc3NhZ2U6IHN0cmluZywgc2tpcE9mZnNldDogbnVtYmVyLCBwbGF5ZXI6IFBsYXllckFQSSkge1xuICAgIGxldCBhZE1lc3NhZ2VQbGFjZWhvbGRlclJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICdcXFxceyhyZW1haW5pbmdUaW1lfHBsYXllZFRpbWV8YWREdXJhdGlvbikofXwlKCgwWzEtOV1cXFxcZCooXFxcXC5cXFxcZCsoZHxmKXxkfGYpfFxcXFwuXFxcXGQrZnxkfGYpfGhoOm1tOnNzfG1tOnNzKX0pJyxcbiAgICAgICdnJyxcbiAgICApO1xuXG4gICAgcmV0dXJuIGFkTWVzc2FnZS5yZXBsYWNlKGFkTWVzc2FnZVBsYWNlaG9sZGVyUmVnZXgsIChmb3JtYXRTdHJpbmcpID0+IHtcbiAgICAgIGxldCB0aW1lID0gMDtcbiAgICAgIGlmIChmb3JtYXRTdHJpbmcuaW5kZXhPZigncmVtYWluaW5nVGltZScpID4gLTEpIHtcbiAgICAgICAgaWYgKHNraXBPZmZzZXQpIHtcbiAgICAgICAgICB0aW1lID0gTWF0aC5jZWlsKHNraXBPZmZzZXQgLSBwbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGltZSA9IHBsYXllci5nZXREdXJhdGlvbigpIC0gcGxheWVyLmdldEN1cnJlbnRUaW1lKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZm9ybWF0U3RyaW5nLmluZGV4T2YoJ3BsYXllZFRpbWUnKSA+IC0xKSB7XG4gICAgICAgIHRpbWUgPSBwbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKTtcbiAgICAgIH0gZWxzZSBpZiAoZm9ybWF0U3RyaW5nLmluZGV4T2YoJ2FkRHVyYXRpb24nKSA+IC0xKSB7XG4gICAgICAgIHRpbWUgPSBwbGF5ZXIuZ2V0RHVyYXRpb24oKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmb3JtYXROdW1iZXIoTWF0aC5yb3VuZCh0aW1lKSwgZm9ybWF0U3RyaW5nKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdE51bWJlcih0aW1lOiBudW1iZXIsIGZvcm1hdDogc3RyaW5nKSB7XG4gICAgbGV0IGZvcm1hdFN0cmluZ1ZhbGlkYXRpb25SZWdleCA9IC8lKCgwWzEtOV1cXGQqKFxcLlxcZCsoZHxmKXxkfGYpfFxcLlxcZCtmfGR8Zil8aGg6bW06c3N8bW06c3MpLztcbiAgICBsZXQgbGVhZGluZ1plcm9lc1JlZ2V4ID0gLyglMFsxLTldXFxkKikoPz0oXFwuXFxkK2Z8ZnxkKSkvO1xuICAgIGxldCBkZWNpbWFsUGxhY2VzUmVnZXggPSAvXFwuXFxkKig/PWYpLztcblxuICAgIGlmICghZm9ybWF0U3RyaW5nVmFsaWRhdGlvblJlZ2V4LnRlc3QoZm9ybWF0KSkge1xuICAgICAgLy8gSWYgdGhlIGZvcm1hdCBpcyBpbnZhbGlkLCB3ZSBzZXQgYSBkZWZhdWx0IGZhbGxiYWNrIGZvcm1hdFxuICAgICAgZm9ybWF0ID0gJyVkJztcbiAgICB9XG5cbiAgICAvLyBEZXRlcm1pbmUgdGhlIG51bWJlciBvZiBsZWFkaW5nIHplcm9zXG4gICAgbGV0IGxlYWRpbmdaZXJvZXMgPSAwO1xuICAgIGxldCBsZWFkaW5nWmVyb2VzTWF0Y2hlcyA9IGZvcm1hdC5tYXRjaChsZWFkaW5nWmVyb2VzUmVnZXgpO1xuICAgIGlmIChsZWFkaW5nWmVyb2VzTWF0Y2hlcykge1xuICAgICAgbGVhZGluZ1plcm9lcyA9IHBhcnNlSW50KGxlYWRpbmdaZXJvZXNNYXRjaGVzWzBdLnN1YnN0cmluZygyKSk7XG4gICAgfVxuXG4gICAgLy8gRGV0ZXJtaW5lIHRoZSBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXNcbiAgICBsZXQgbnVtRGVjaW1hbFBsYWNlcyA9IG51bGw7XG4gICAgbGV0IGRlY2ltYWxQbGFjZXNNYXRjaGVzID0gZm9ybWF0Lm1hdGNoKGRlY2ltYWxQbGFjZXNSZWdleCk7XG4gICAgaWYgKGRlY2ltYWxQbGFjZXNNYXRjaGVzICYmICFpc05hTihwYXJzZUludChkZWNpbWFsUGxhY2VzTWF0Y2hlc1swXS5zdWJzdHJpbmcoMSkpKSkge1xuICAgICAgbnVtRGVjaW1hbFBsYWNlcyA9IHBhcnNlSW50KGRlY2ltYWxQbGFjZXNNYXRjaGVzWzBdLnN1YnN0cmluZygxKSk7XG4gICAgICBpZiAobnVtRGVjaW1hbFBsYWNlcyA+IDIwKSB7XG4gICAgICAgIG51bURlY2ltYWxQbGFjZXMgPSAyMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGbG9hdCBmb3JtYXRcbiAgICBpZiAoZm9ybWF0LmluZGV4T2YoJ2YnKSA+IC0xKSB7XG4gICAgICBsZXQgdGltZVN0cmluZyA9ICcnO1xuXG4gICAgICBpZiAobnVtRGVjaW1hbFBsYWNlcyAhPT0gbnVsbCkge1xuICAgICAgICAvLyBBcHBseSBmaXhlZCBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXNcbiAgICAgICAgdGltZVN0cmluZyA9IHRpbWUudG9GaXhlZChudW1EZWNpbWFsUGxhY2VzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpbWVTdHJpbmcgPSAnJyArIHRpbWU7XG4gICAgICB9XG5cbiAgICAgIC8vIEFwcGx5IGxlYWRpbmcgemVyb3NcbiAgICAgIGlmICh0aW1lU3RyaW5nLmluZGV4T2YoJy4nKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiBsZWZ0UGFkV2l0aFplcm9zKHRpbWVTdHJpbmcsIHRpbWVTdHJpbmcubGVuZ3RoICsgKGxlYWRpbmdaZXJvZXMgLSB0aW1lU3RyaW5nLmluZGV4T2YoJy4nKSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxlZnRQYWRXaXRoWmVyb3ModGltZVN0cmluZywgbGVhZGluZ1plcm9lcyk7XG4gICAgICB9XG5cbiAgICB9XG4gICAgLy8gVGltZSBmb3JtYXRcbiAgICBlbHNlIGlmIChmb3JtYXQuaW5kZXhPZignOicpID4gLTEpIHtcbiAgICAgIGxldCB0b3RhbFNlY29uZHMgPSBNYXRoLmNlaWwodGltZSk7XG5cbiAgICAgIC8vIGhoOm1tOnNzIGZvcm1hdFxuICAgICAgaWYgKGZvcm1hdC5pbmRleE9mKCdoaCcpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHNlY29uZHNUb1RpbWUodG90YWxTZWNvbmRzKTtcbiAgICAgIH1cbiAgICAgIC8vIG1tOnNzIGZvcm1hdFxuICAgICAgZWxzZSB7XG4gICAgICAgIGxldCBtaW51dGVzID0gTWF0aC5mbG9vcih0b3RhbFNlY29uZHMgLyA2MCk7XG4gICAgICAgIGxldCBzZWNvbmRzID0gdG90YWxTZWNvbmRzICUgNjA7XG5cbiAgICAgICAgcmV0dXJuIGxlZnRQYWRXaXRoWmVyb3MobWludXRlcywgMikgKyAnOicgKyBsZWZ0UGFkV2l0aFplcm9zKHNlY29uZHMsIDIpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBJbnRlZ2VyIGZvcm1hdFxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIGxlZnRQYWRXaXRoWmVyb3MoTWF0aC5jZWlsKHRpbWUpLCBsZWFkaW5nWmVyb2VzKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IExpc3RJdGVtLCBMaXN0U2VsZWN0b3IsIExpc3RTZWxlY3RvckNvbmZpZyB9IGZyb20gJy4vY29tcG9uZW50cy9saXN0c2VsZWN0b3InO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEksIFN1YnRpdGxlRXZlbnQsIFN1YnRpdGxlVHJhY2sgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEhlbHBlciBjbGFzcyB0byBoYW5kbGUgYWxsIHN1YnRpdGxlIHJlbGF0ZWQgZXZlbnRzXG4gKlxuICogVGhpcyBjbGFzcyBsaXN0ZW5zIHRvIHBsYXllciBldmVudHMgYXMgd2VsbCBhcyB0aGUgYExpc3RTZWxlY3RvcmAgZXZlbnQgaWYgc2VsZWN0aW9uIGNoYW5nZWRcbiAqL1xuZXhwb3J0IGNsYXNzIFN1YnRpdGxlU3dpdGNoSGFuZGxlciB7XG5cbiAgcHJpdmF0ZSBzdGF0aWMgU1VCVElUTEVTX09GRl9LRVk6IHN0cmluZyA9ICdudWxsJztcblxuICBwcml2YXRlIHBsYXllcjogUGxheWVyQVBJO1xuICBwcml2YXRlIGxpc3RFbGVtZW50OiBMaXN0U2VsZWN0b3I8TGlzdFNlbGVjdG9yQ29uZmlnPjtcbiAgcHJpdmF0ZSB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyO1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllcjogUGxheWVyQVBJLCBlbGVtZW50OiBMaXN0U2VsZWN0b3I8TGlzdFNlbGVjdG9yQ29uZmlnPiwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcikge1xuICAgIHRoaXMucGxheWVyID0gcGxheWVyO1xuICAgIHRoaXMubGlzdEVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMudWltYW5hZ2VyID0gdWltYW5hZ2VyO1xuXG4gICAgdGhpcy5iaW5kU2VsZWN0aW9uRXZlbnQoKTtcbiAgICB0aGlzLmJpbmRQbGF5ZXJFdmVudHMoKTtcbiAgICB0aGlzLnJlZnJlc2hTdWJ0aXRsZXMoKTtcbiAgfVxuXG4gIHByaXZhdGUgYmluZFNlbGVjdGlvbkV2ZW50KCk6IHZvaWQge1xuICAgIHRoaXMubGlzdEVsZW1lbnQub25JdGVtU2VsZWN0ZWQuc3Vic2NyaWJlKChfLCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICAvLyBUT0RPIGFkZCBzdXBwb3J0IGZvciBtdWx0aXBsZSBjb25jdXJyZW50IHN1YnRpdGxlIHNlbGVjdGlvbnNcbiAgICAgIGlmICh2YWx1ZSA9PT0gU3VidGl0bGVTd2l0Y2hIYW5kbGVyLlNVQlRJVExFU19PRkZfS0VZKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTdWJ0aXRsZSA9IHRoaXMucGxheWVyLnN1YnRpdGxlcy5saXN0KCkuZmlsdGVyKChzdWJ0aXRsZSkgPT4gc3VidGl0bGUuZW5hYmxlZCkucG9wKCk7XG4gICAgICAgIGlmIChjdXJyZW50U3VidGl0bGUpIHtcbiAgICAgICAgICB0aGlzLnBsYXllci5zdWJ0aXRsZXMuZGlzYWJsZShjdXJyZW50U3VidGl0bGUuaWQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBsYXllci5zdWJ0aXRsZXMuZW5hYmxlKHZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgYmluZFBsYXllckV2ZW50cygpOiB2b2lkIHtcbiAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlN1YnRpdGxlQWRkZWQsIHRoaXMuYWRkU3VidGl0bGUpO1xuICAgIHRoaXMucGxheWVyLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU3VidGl0bGVFbmFibGVkLCB0aGlzLnNlbGVjdEN1cnJlbnRTdWJ0aXRsZSk7XG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TdWJ0aXRsZURpc2FibGVkLCB0aGlzLnNlbGVjdEN1cnJlbnRTdWJ0aXRsZSk7XG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TdWJ0aXRsZVJlbW92ZWQsIHRoaXMucmVtb3ZlU3VidGl0bGUpO1xuICAgIC8vIFVwZGF0ZSBzdWJ0aXRsZXMgd2hlbiBzb3VyY2UgZ29lcyBhd2F5XG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VVbmxvYWRlZCwgdGhpcy5jbGVhclN1YnRpdGxlcyk7XG4gICAgLy8gVXBkYXRlIHN1YnRpdGxlcyB3aGVuIHRoZSBwZXJpb2Qgd2l0aGluIGEgc291cmNlIGNoYW5nZXNcbiAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBlcmlvZFN3aXRjaGVkLCB0aGlzLnJlZnJlc2hTdWJ0aXRsZXMpO1xuICAgIHRoaXMudWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKHRoaXMucmVmcmVzaFN1YnRpdGxlcyk7XG4gIH1cblxuICBwcml2YXRlIGFkZFN1YnRpdGxlID0gKGV2ZW50OiBTdWJ0aXRsZUV2ZW50KSA9PiB7XG4gICAgY29uc3Qgc3VidGl0bGUgPSBldmVudC5zdWJ0aXRsZTtcbiAgICBpZiAoIXRoaXMubGlzdEVsZW1lbnQuaGFzSXRlbShzdWJ0aXRsZS5pZCkpIHtcbiAgICAgIHRoaXMubGlzdEVsZW1lbnQuYWRkSXRlbShzdWJ0aXRsZS5pZCwgc3VidGl0bGUubGFiZWwpO1xuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIHJlbW92ZVN1YnRpdGxlID0gKGV2ZW50OiBTdWJ0aXRsZUV2ZW50KSA9PiB7XG4gICAgY29uc3Qgc3VidGl0bGUgPSBldmVudC5zdWJ0aXRsZTtcbiAgICBpZiAodGhpcy5saXN0RWxlbWVudC5oYXNJdGVtKHN1YnRpdGxlLmlkKSkge1xuICAgICAgdGhpcy5saXN0RWxlbWVudC5yZW1vdmVJdGVtKHN1YnRpdGxlLmlkKTtcbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSBzZWxlY3RDdXJyZW50U3VidGl0bGUgPSAoKSA9PiB7XG4gICAgaWYgKCF0aGlzLnBsYXllci5zdWJ0aXRsZXMpIHtcbiAgICAgIC8vIFN1YnRpdGxlcyBBUEkgbm90IGF2YWlsYWJsZSAoeWV0KVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBjdXJyZW50U3VidGl0bGUgPSB0aGlzLnBsYXllci5zdWJ0aXRsZXMubGlzdCgpLmZpbHRlcigoc3VidGl0bGUpID0+IHN1YnRpdGxlLmVuYWJsZWQpLnBvcCgpO1xuICAgIHRoaXMubGlzdEVsZW1lbnQuc2VsZWN0SXRlbShjdXJyZW50U3VidGl0bGUgPyBjdXJyZW50U3VidGl0bGUuaWQgOiBTdWJ0aXRsZVN3aXRjaEhhbmRsZXIuU1VCVElUTEVTX09GRl9LRVkpO1xuICB9O1xuXG4gIHByaXZhdGUgY2xlYXJTdWJ0aXRsZXMgPSAoKSA9PiB7XG4gICAgdGhpcy5saXN0RWxlbWVudC5jbGVhckl0ZW1zKCk7XG4gIH1cblxuICBwcml2YXRlIHJlZnJlc2hTdWJ0aXRsZXMgPSAoKSA9PiB7XG4gICAgaWYgKCF0aGlzLnBsYXllci5zdWJ0aXRsZXMpIHtcbiAgICAgIC8vIFN1YnRpdGxlcyBBUEkgbm90IGF2YWlsYWJsZSAoeWV0KVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG9mZkxpc3RJdGVtOiBMaXN0SXRlbSA9IHtcbiAgICAgIGtleTogU3VidGl0bGVTd2l0Y2hIYW5kbGVyLlNVQlRJVExFU19PRkZfS0VZLFxuICAgICAgbGFiZWw6IGkxOG4uZ2V0TG9jYWxpemVyKCdvZmYnKSxcbiAgICB9O1xuXG4gICAgY29uc3Qgc3VidGl0bGVzID0gdGhpcy5wbGF5ZXIuc3VidGl0bGVzLmxpc3QoKTtcbiAgICBjb25zdCBzdWJ0aXRsZVRvTGlzdEl0ZW0gPSAoc3VidGl0bGU6IFN1YnRpdGxlVHJhY2spOiBMaXN0SXRlbSA9PiB7XG4gICAgICByZXR1cm4geyBrZXk6IHN1YnRpdGxlLmlkLCBsYWJlbDogc3VidGl0bGUubGFiZWwgfTtcbiAgICB9O1xuXG4gICAgdGhpcy5saXN0RWxlbWVudC5zeW5jaHJvbml6ZUl0ZW1zKFtcbiAgICAgIG9mZkxpc3RJdGVtLCAuLi5zdWJ0aXRsZXMubWFwKHN1YnRpdGxlVG9MaXN0SXRlbSksXG4gICAgXSk7XG4gICAgdGhpcy5zZWxlY3RDdXJyZW50U3VidGl0bGUoKTtcbiAgfTtcbn1cbiIsIi8vIFRPRE8gY2hhbmdlIHRvIGludGVybmFsIChub3QgZXhwb3J0ZWQpIGNsYXNzLCBob3cgdG8gdXNlIGluIG90aGVyIGZpbGVzP1xuLyoqXG4gKiBFeGVjdXRlcyBhIGNhbGxiYWNrIGFmdGVyIGEgc3BlY2lmaWVkIGFtb3VudCBvZiB0aW1lLCBvcHRpb25hbGx5IHJlcGVhdGVkbHkgdW50aWwgc3RvcHBlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFRpbWVvdXQge1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgZGVsYXk6IG51bWJlcjtcbiAgcHJpdmF0ZSByZWFkb25seSBjYWxsYmFjazogKCkgPT4gdm9pZDtcbiAgcHJpdmF0ZSByZWFkb25seSByZXBlYXQ6IGJvb2xlYW47XG4gIC8vIFRoZXJlJ3MgdHdvIHNldFRpbWVvdXQgZGVjbGFyYXRpb25zLCBvbmUgb24gV2luZG93IHdoaWNoIHJldHVybnMgdHlwZSBcIm51bWJlclwiIGFuZCBvbmUgaW4gTm9kZUpTIHdoaWNoIHJldHVybnNcbiAgLy8gdHlwZSBcIlRpbWVyXCIuIEZvciB1bmtub3duIHJlYXNvbnMgYnVpbGRzIG9uIEplbmtpbnMgZmFpbCBkdWUgdG8gYSB0eXBlIG1pc21hdGNoIHdoZW4gd2UgdXNlIHR5cGUgXCJudW1iZXJcIiBoZXJlLFxuICAvLyBhbHRob3VnaCBpdCB3b3JrcyBvbiBvdGhlciBwbGF0Zm9ybXMgKGUuZy4gV2luZG93cywgQ29kZXNoaXApLlxuICAvLyBUbyB3b3JrIGFyb3VuZCB0aGUgaXNzdWUgd2UgdXNlIHR5cGUgXCJhbnlcIi4gVGhlIHR5cGUgZG9lcyBub3QgbWF0dGVyIGFueXdheSBiZWNhdXNlIHdlJ3JlIG5vdCB3b3JraW5nIHdpdGhcbiAgLy8gdGhpcyB2YWx1ZSBleGNlcHQgcHJvdmlkaW5nIGl0IHRvIGNsZWFyVGltZW91dC5cbiAgcHJpdmF0ZSB0aW1lb3V0T3JJbnRlcnZhbElkOiBhbnk7XG4gIHByaXZhdGUgYWN0aXZlOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IHRpbWVvdXQgY2FsbGJhY2sgaGFuZGxlci5cbiAgICogQHBhcmFtIGRlbGF5IHRoZSBkZWxheSBpbiBtaWxsaXNlY29uZHMgYWZ0ZXIgd2hpY2ggdGhlIGNhbGxiYWNrIHNob3VsZCBiZSBleGVjdXRlZFxuICAgKiBAcGFyYW0gY2FsbGJhY2sgdGhlIGNhbGxiYWNrIHRvIGV4ZWN1dGUgYWZ0ZXIgdGhlIGRlbGF5IHRpbWVcbiAgICogQHBhcmFtIHJlcGVhdCBpZiB0cnVlLCBjYWxsIHRoZSBjYWxsYmFjayByZXBlYXRlZGx5IGluIGRlbGF5IGludGVydmFsc1xuICAgKi9cbiAgY29uc3RydWN0b3IoZGVsYXk6IG51bWJlciwgY2FsbGJhY2s6ICgpID0+IHZvaWQsIHJlcGVhdDogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB0aGlzLnJlcGVhdCA9IHJlcGVhdDtcbiAgICB0aGlzLnRpbWVvdXRPckludGVydmFsSWQgPSAwO1xuICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIHRoZSB0aW1lb3V0IGFuZCBjYWxscyB0aGUgY2FsbGJhY2sgd2hlbiB0aGUgdGltZW91dCBkZWxheSBoYXMgcGFzc2VkLlxuICAgKiBAcmV0dXJucyB7VGltZW91dH0gdGhlIGN1cnJlbnQgdGltZW91dCAoc28gdGhlIHN0YXJ0IGNhbGwgY2FuIGJlIGNoYWluZWQgdG8gdGhlIGNvbnN0cnVjdG9yKVxuICAgKi9cbiAgc3RhcnQoKTogdGhpcyB7XG4gICAgdGhpcy5yZXNldCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyB0aGUgdGltZW91dC4gVGhlIGNhbGxiYWNrIHdpbGwgbm90IGJlIGNhbGxlZCBpZiBjbGVhciBpcyBjYWxsZWQgZHVyaW5nIHRoZSB0aW1lb3V0LlxuICAgKi9cbiAgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5jbGVhckludGVybmFsKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBwYXNzZWQgdGltZW91dCBkZWxheSB0byB6ZXJvLiBDYW4gYmUgdXNlZCB0byBkZWZlciB0aGUgY2FsbGluZyBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICByZXNldCgpOiB2b2lkIHtcbiAgICB0aGlzLmNsZWFySW50ZXJuYWwoKTtcblxuICAgIGlmICh0aGlzLnJlcGVhdCkge1xuICAgICAgdGhpcy50aW1lb3V0T3JJbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwodGhpcy5jYWxsYmFjaywgdGhpcy5kZWxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGltZW91dE9ySW50ZXJ2YWxJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNhbGxiYWNrKCk7XG4gICAgICB9LCB0aGlzLmRlbGF5KTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICB9XG5cbiAgaXNBY3RpdmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlO1xuICB9XG5cbiAgcHJpdmF0ZSBjbGVhckludGVybmFsKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnJlcGVhdCkge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVvdXRPckludGVydmFsSWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0T3JJbnRlcnZhbElkKTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgfVxufSIsImltcG9ydCB7IEdvQmFja0J1dHRvbiB9IGZyb20gJy4vLi4vY3VzdG9tL3RzL2NvbXBvbmVudHMvZ29iYWNrYnV0dG9uJztcbmltcG9ydCB7IFJhZGlvTW9kZVRvZ2dsZUJ1dHRvbiB9IGZyb20gJy4vLi4vY3VzdG9tL3RzL2NvbXBvbmVudHMvcmFkaW9tb2RlL3JhZGlvbW9kZXRvZ2dsZWJ1dHRvbic7XG5pbXBvcnQgeyBQbGF5YmFja0p1bXBDb250cm9sc092ZXJsYXkgfSBmcm9tICcuLi9jdXN0b20vdHMvY29tcG9uZW50cy9wbGF5YmFja2p1bXBvdmVybGF5JztcbmltcG9ydCB7IFN1YnRpdGxlT3ZlcmxheSB9IGZyb20gJy4vY29tcG9uZW50cy9zdWJ0aXRsZW92ZXJsYXknO1xuaW1wb3J0IHsgU2V0dGluZ3NQYW5lbFBhZ2UgfSBmcm9tICcuL2NvbXBvbmVudHMvc2V0dGluZ3NwYW5lbHBhZ2UnO1xuaW1wb3J0IHsgU2V0dGluZ3NQYW5lbEl0ZW0gfSBmcm9tICcuL2NvbXBvbmVudHMvc2V0dGluZ3NwYW5lbGl0ZW0nO1xuaW1wb3J0IHsgVmlkZW9RdWFsaXR5U2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL3ZpZGVvcXVhbGl0eXNlbGVjdGJveCc7XG5pbXBvcnQgeyBQbGF5YmFja1NwZWVkU2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL3BsYXliYWNrc3BlZWRzZWxlY3Rib3gnO1xuaW1wb3J0IHsgQXVkaW9UcmFja1NlbGVjdEJveCB9IGZyb20gJy4vY29tcG9uZW50cy9hdWRpb3RyYWNrc2VsZWN0Ym94JztcbmltcG9ydCB7IEF1ZGlvUXVhbGl0eVNlbGVjdEJveCB9IGZyb20gJy4vY29tcG9uZW50cy9hdWRpb3F1YWxpdHlzZWxlY3Rib3gnO1xuaW1wb3J0IHsgU2V0dGluZ3NQYW5lbCB9IGZyb20gJy4vY29tcG9uZW50cy9zZXR0aW5nc3BhbmVsJztcbmltcG9ydCB7IFN1YnRpdGxlU2V0dGluZ3NQYW5lbFBhZ2UgfSBmcm9tICcuL2NvbXBvbmVudHMvc3VidGl0bGVzZXR0aW5ncy9zdWJ0aXRsZXNldHRpbmdzcGFuZWxwYWdlJztcbmltcG9ydCB7IFNldHRpbmdzUGFuZWxQYWdlT3BlbkJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9zZXR0aW5nc3BhbmVscGFnZW9wZW5idXR0b24nO1xuaW1wb3J0IHsgU3VidGl0bGVTZXR0aW5nc0xhYmVsIH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3Mvc3VidGl0bGVzZXR0aW5nc2xhYmVsJztcbmltcG9ydCB7IFN1YnRpdGxlU2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2VsZWN0Ym94JztcbmltcG9ydCB7IENvbnRyb2xCYXIgfSBmcm9tICcuL2NvbXBvbmVudHMvY29udHJvbGJhcic7XG5pbXBvcnQgeyBDb250YWluZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvY29udGFpbmVyJztcbmltcG9ydCB7IFBsYXliYWNrVGltZUxhYmVsLCBQbGF5YmFja1RpbWVMYWJlbE1vZGUgfSBmcm9tICcuL2NvbXBvbmVudHMvcGxheWJhY2t0aW1lbGFiZWwnO1xuaW1wb3J0IHsgU2Vla0JhciB9IGZyb20gJy4vY29tcG9uZW50cy9zZWVrYmFyJztcbmltcG9ydCB7IFNlZWtCYXJMYWJlbCB9IGZyb20gJy4vY29tcG9uZW50cy9zZWVrYmFybGFiZWwnO1xuaW1wb3J0IHsgUGxheWJhY2tUb2dnbGVCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvcGxheWJhY2t0b2dnbGVidXR0b24nO1xuaW1wb3J0IHsgVm9sdW1lVG9nZ2xlQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL3ZvbHVtZXRvZ2dsZWJ1dHRvbic7XG5pbXBvcnQgeyBWb2x1bWVTbGlkZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvdm9sdW1lc2xpZGVyJztcbmltcG9ydCB7IFNwYWNlciB9IGZyb20gJy4vY29tcG9uZW50cy9zcGFjZXInO1xuaW1wb3J0IHsgUGljdHVyZUluUGljdHVyZVRvZ2dsZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9waWN0dXJlaW5waWN0dXJldG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7IEFpclBsYXlUb2dnbGVCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvYWlycGxheXRvZ2dsZWJ1dHRvbic7XG5pbXBvcnQgeyBDYXN0VG9nZ2xlQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL2Nhc3R0b2dnbGVidXR0b24nO1xuaW1wb3J0IHsgVlJUb2dnbGVCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvdnJ0b2dnbGVidXR0b24nO1xuaW1wb3J0IHsgU2V0dGluZ3NUb2dnbGVCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvc2V0dGluZ3N0b2dnbGVidXR0b24nO1xuaW1wb3J0IHsgRnVsbHNjcmVlblRvZ2dsZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9mdWxsc2NyZWVudG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7IFVJQ29udGFpbmVyIH0gZnJvbSAnLi9jb21wb25lbnRzL3VpY29udGFpbmVyJztcbmltcG9ydCB7IEJ1ZmZlcmluZ092ZXJsYXkgfSBmcm9tICcuL2NvbXBvbmVudHMvYnVmZmVyaW5nb3ZlcmxheSc7XG5pbXBvcnQgeyBQbGF5YmFja1RvZ2dsZU92ZXJsYXkgfSBmcm9tICcuL2NvbXBvbmVudHMvcGxheWJhY2t0b2dnbGVvdmVybGF5JztcbmltcG9ydCB7IENhc3RTdGF0dXNPdmVybGF5IH0gZnJvbSAnLi9jb21wb25lbnRzL2Nhc3RzdGF0dXNvdmVybGF5JztcbmltcG9ydCB7IFRpdGxlQmFyIH0gZnJvbSAnLi9jb21wb25lbnRzL3RpdGxlYmFyJztcbmltcG9ydCB7IFJlY29tbWVuZGF0aW9uT3ZlcmxheSB9IGZyb20gJy4vY29tcG9uZW50cy9yZWNvbW1lbmRhdGlvbm92ZXJsYXknO1xuaW1wb3J0IHsgV2F0ZXJtYXJrIH0gZnJvbSAnLi9jb21wb25lbnRzL3dhdGVybWFyayc7XG5pbXBvcnQgeyBFcnJvck1lc3NhZ2VPdmVybGF5IH0gZnJvbSAnLi9jb21wb25lbnRzL2Vycm9ybWVzc2FnZW92ZXJsYXknO1xuaW1wb3J0IHsgQWRDbGlja092ZXJsYXkgfSBmcm9tICcuL2NvbXBvbmVudHMvYWRjbGlja292ZXJsYXknO1xuaW1wb3J0IHsgQWRNZXNzYWdlTGFiZWwgfSBmcm9tICcuL2NvbXBvbmVudHMvYWRtZXNzYWdlbGFiZWwnO1xuaW1wb3J0IHsgQWRTa2lwQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL2Fkc2tpcGJ1dHRvbic7XG5pbXBvcnQgeyBDbG9zZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9jbG9zZWJ1dHRvbic7XG5pbXBvcnQgeyBNZXRhZGF0YUxhYmVsLCBNZXRhZGF0YUxhYmVsQ29udGVudCB9IGZyb20gJy4vY29tcG9uZW50cy9tZXRhZGF0YWxhYmVsJztcbmltcG9ydCB7IFBsYXllclV0aWxzIH0gZnJvbSAnLi9wbGF5ZXJ1dGlscyc7XG5pbXBvcnQgeyBMYWJlbCB9IGZyb20gJy4vY29tcG9uZW50cy9sYWJlbCc7XG5pbXBvcnQgeyBDYXN0VUlDb250YWluZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvY2FzdHVpY29udGFpbmVyJztcbmltcG9ydCB7IFVJQ29uZGl0aW9uQ29udGV4dCwgVUlNYW5hZ2VyIH0gZnJvbSAnLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgVUlDb25maWcgfSBmcm9tICcuL3VpY29uZmlnJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi9sb2NhbGl6YXRpb24vaTE4bic7XG5pbXBvcnQgeyBTdWJ0aXRsZUxpc3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvc3VidGl0bGVsaXN0Ym94JztcbmltcG9ydCB7IEF1ZGlvVHJhY2tMaXN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL2F1ZGlvdHJhY2tsaXN0Ym94JztcbmltcG9ydCB7IFNwYXRpYWxOYXZpZ2F0aW9uIH0gZnJvbSAnLi9zcGF0aWFsbmF2aWdhdGlvbi9zcGF0aWFsbmF2aWdhdGlvbic7XG5pbXBvcnQgeyBSb290TmF2aWdhdGlvbkdyb3VwIH0gZnJvbSAnLi9zcGF0aWFsbmF2aWdhdGlvbi9yb290bmF2aWdhdGlvbmdyb3VwJztcbmltcG9ydCB7IExpc3ROYXZpZ2F0aW9uR3JvdXAsIExpc3RPcmllbnRhdGlvbiB9IGZyb20gJy4vc3BhdGlhbG5hdmlnYXRpb24vTGlzdE5hdmlnYXRpb25Hcm91cCc7XG5cbmV4cG9ydCBuYW1lc3BhY2UgVUlGYWN0b3J5IHtcblxuICBleHBvcnQgZnVuY3Rpb24gYnVpbGREZWZhdWx0VUkocGxheWVyOiBQbGF5ZXJBUEksIGNvbmZpZzogVUlDb25maWcgPSB7fSk6IFVJTWFuYWdlciB7XG4gICAgcmV0dXJuIFVJRmFjdG9yeS5idWlsZE1vZGVyblVJKHBsYXllciwgY29uZmlnKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBidWlsZERlZmF1bHRTbWFsbFNjcmVlblVJKHBsYXllcjogUGxheWVyQVBJLCBjb25maWc6IFVJQ29uZmlnID0ge30pOiBVSU1hbmFnZXIge1xuICAgIHJldHVybiBVSUZhY3RvcnkuYnVpbGRNb2Rlcm5TbWFsbFNjcmVlblVJKHBsYXllciwgY29uZmlnKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBidWlsZERlZmF1bHRDYXN0UmVjZWl2ZXJVSShwbGF5ZXI6IFBsYXllckFQSSwgY29uZmlnOiBVSUNvbmZpZyA9IHt9KTogVUlNYW5hZ2VyIHtcbiAgICByZXR1cm4gVUlGYWN0b3J5LmJ1aWxkTW9kZXJuQ2FzdFJlY2VpdmVyVUkocGxheWVyLCBjb25maWcpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkRGVmYXVsdFR2VUkocGxheWVyOiBQbGF5ZXJBUEksIGNvbmZpZzogVUlDb25maWcgPSB7fSk6IFVJTWFuYWdlciB7XG4gICAgcmV0dXJuIFVJRmFjdG9yeS5idWlsZE1vZGVyblR2VUkocGxheWVyLCBjb25maWcpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIG1vZGVyblVJKCkge1xuICAgIGxldCBzdWJ0aXRsZU92ZXJsYXkgPSBuZXcgU3VidGl0bGVPdmVybGF5KCk7XG5cbiAgICBsZXQgbWFpblNldHRpbmdzUGFuZWxQYWdlID0gbmV3IFNldHRpbmdzUGFuZWxQYWdlKHtcbiAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy52aWRlby5xdWFsaXR5JyksIG5ldyBWaWRlb1F1YWxpdHlTZWxlY3RCb3goKSksXG4gICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbShpMThuLmdldExvY2FsaXplcignc3BlZWQnKSwgbmV3IFBsYXliYWNrU3BlZWRTZWxlY3RCb3goKSksXG4gICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbShpMThuLmdldExvY2FsaXplcignc2V0dGluZ3MuYXVkaW8udHJhY2snKSwgbmV3IEF1ZGlvVHJhY2tTZWxlY3RCb3goKSksXG4gICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbShpMThuLmdldExvY2FsaXplcignc2V0dGluZ3MuYXVkaW8ucXVhbGl0eScpLCBuZXcgQXVkaW9RdWFsaXR5U2VsZWN0Qm94KCkpLFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIGxldCBzZXR0aW5nc1BhbmVsID0gbmV3IFNldHRpbmdzUGFuZWwoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBtYWluU2V0dGluZ3NQYW5lbFBhZ2UsXG4gICAgICBdLFxuICAgICAgaGlkZGVuOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgbGV0IHN1YnRpdGxlU2V0dGluZ3NQYW5lbFBhZ2UgPSBuZXcgU3VidGl0bGVTZXR0aW5nc1BhbmVsUGFnZSh7XG4gICAgICBzZXR0aW5nc1BhbmVsOiBzZXR0aW5nc1BhbmVsLFxuICAgICAgb3ZlcmxheTogc3VidGl0bGVPdmVybGF5LFxuICAgIH0pO1xuXG4gICAgY29uc3Qgc3VidGl0bGVTZWxlY3RCb3ggPSBuZXcgU3VidGl0bGVTZWxlY3RCb3goKTtcblxuICAgIGxldCBzdWJ0aXRsZVNldHRpbmdzT3BlbkJ1dHRvbiA9IG5ldyBTZXR0aW5nc1BhbmVsUGFnZU9wZW5CdXR0b24oe1xuICAgICAgdGFyZ2V0UGFnZTogc3VidGl0bGVTZXR0aW5nc1BhbmVsUGFnZSxcbiAgICAgIGNvbnRhaW5lcjogc2V0dGluZ3NQYW5lbCxcbiAgICAgIGFyaWFMYWJlbDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcycpLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ29wZW4nKSxcbiAgICB9KTtcblxuICAgIG1haW5TZXR0aW5nc1BhbmVsUGFnZS5hZGRDb21wb25lbnQoXG4gICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oXG4gICAgICAgIG5ldyBTdWJ0aXRsZVNldHRpbmdzTGFiZWwoe1xuICAgICAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMnKSxcbiAgICAgICAgICBvcGVuZXI6IHN1YnRpdGxlU2V0dGluZ3NPcGVuQnV0dG9uLFxuICAgICAgICB9KSxcbiAgICAgICAgc3VidGl0bGVTZWxlY3RCb3gsXG4gICAgICAgIHtcbiAgICAgICAgICByb2xlOiAnbWVudWJhcicsXG4gICAgICAgIH0sXG4gICAgICApKTtcblxuICAgIHNldHRpbmdzUGFuZWwuYWRkQ29tcG9uZW50KHN1YnRpdGxlU2V0dGluZ3NQYW5lbFBhZ2UpO1xuXG4gICAgbGV0IGNvbnRyb2xCYXIgPSBuZXcgQ29udHJvbEJhcih7XG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIHNldHRpbmdzUGFuZWwsXG4gICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgIG5ldyBQbGF5YmFja1RpbWVMYWJlbCh7IHRpbWVMYWJlbE1vZGU6IFBsYXliYWNrVGltZUxhYmVsTW9kZS5DdXJyZW50VGltZSwgaGlkZUluTGl2ZVBsYXliYWNrOiB0cnVlIH0pLFxuICAgICAgICAgICAgbmV3IFNlZWtCYXIoeyBsYWJlbDogbmV3IFNlZWtCYXJMYWJlbCgpIH0pLFxuICAgICAgICAgICAgbmV3IFBsYXliYWNrVGltZUxhYmVsKHsgdGltZUxhYmVsTW9kZTogUGxheWJhY2tUaW1lTGFiZWxNb2RlLlRvdGFsVGltZSwgY3NzQ2xhc3NlczogWyd0ZXh0LXJpZ2h0J10gfSksXG4gICAgICAgICAgXSxcbiAgICAgICAgICBjc3NDbGFzc2VzOiBbJ2NvbnRyb2xiYXItdG9wJ10sXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICBuZXcgUGxheWJhY2tUb2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgIG5ldyBWb2x1bWVUb2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgIG5ldyBWb2x1bWVTbGlkZXIoKSxcbiAgICAgICAgICAgIG5ldyBTcGFjZXIoKSxcbiAgICAgICAgICAgIG5ldyBQaWN0dXJlSW5QaWN0dXJlVG9nZ2xlQnV0dG9uKCksXG4gICAgICAgICAgICBuZXcgQWlyUGxheVRvZ2dsZUJ1dHRvbigpLFxuICAgICAgICAgICAgbmV3IENhc3RUb2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgIG5ldyBSYWRpb01vZGVUb2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgIG5ldyBWUlRvZ2dsZUJ1dHRvbigpLFxuICAgICAgICAgICAgbmV3IFNldHRpbmdzVG9nZ2xlQnV0dG9uKHsgc2V0dGluZ3NQYW5lbDogc2V0dGluZ3NQYW5lbCB9KSxcbiAgICAgICAgICAgIG5ldyBGdWxsc2NyZWVuVG9nZ2xlQnV0dG9uKCksXG4gICAgICAgICAgXSxcbiAgICAgICAgICBjc3NDbGFzc2VzOiBbJ2NvbnRyb2xiYXItYm90dG9tJ10sXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIHJldHVybiBuZXcgVUlDb250YWluZXIoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBzdWJ0aXRsZU92ZXJsYXksXG4gICAgICAgIG5ldyBCdWZmZXJpbmdPdmVybGF5KCksXG4gICAgICAgIG5ldyBQbGF5YmFja1RvZ2dsZU92ZXJsYXkoKSxcbiAgICAgICAgbmV3IFBsYXliYWNrSnVtcENvbnRyb2xzT3ZlcmxheSgpLFxuICAgICAgICBuZXcgQ2FzdFN0YXR1c092ZXJsYXkoKSxcbiAgICAgICAgY29udHJvbEJhcixcbiAgICAgICAgbmV3IFRpdGxlQmFyKCksXG4gICAgICAgIG5ldyBSZWNvbW1lbmRhdGlvbk92ZXJsYXkoKSxcbiAgICAgICAgbmV3IFdhdGVybWFyaygpLFxuICAgICAgICBuZXcgRXJyb3JNZXNzYWdlT3ZlcmxheSgpLFxuICAgICAgXSxcbiAgICAgIGhpZGVEZWxheTogMjAwMCxcbiAgICAgIGhpZGVQbGF5ZXJTdGF0ZUV4Y2VwdGlvbnM6IFtcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUHJlcGFyZWQsXG4gICAgICAgIFBsYXllclV0aWxzLlBsYXllclN0YXRlLlBhdXNlZCxcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuRmluaXNoZWQsXG4gICAgICBdLFxuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIG1vZGVybkFkc1VJKCkge1xuICAgIHJldHVybiBuZXcgVUlDb250YWluZXIoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBuZXcgQnVmZmVyaW5nT3ZlcmxheSgpLFxuICAgICAgICBuZXcgQWRDbGlja092ZXJsYXkoKSxcbiAgICAgICAgbmV3IFBsYXliYWNrVG9nZ2xlT3ZlcmxheSgpLFxuICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICBuZXcgQWRNZXNzYWdlTGFiZWwoeyB0ZXh0OiBpMThuLmdldExvY2FsaXplcignYWRzLnJlbWFpbmluZ1RpbWUnKX0pLFxuICAgICAgICAgICAgbmV3IEFkU2tpcEJ1dHRvbigpLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgY3NzQ2xhc3M6ICd1aS1hZHMtc3RhdHVzJyxcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBDb250cm9sQmFyKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICAgIG5ldyBQbGF5YmFja1RvZ2dsZUJ1dHRvbigpLFxuICAgICAgICAgICAgICAgIG5ldyBWb2x1bWVUb2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgICAgICBuZXcgVm9sdW1lU2xpZGVyKCksXG4gICAgICAgICAgICAgICAgbmV3IFNwYWNlcigpLFxuICAgICAgICAgICAgICAgIG5ldyBGdWxsc2NyZWVuVG9nZ2xlQnV0dG9uKCksXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnY29udHJvbGJhci1ib3R0b20nXSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICAgIGNzc0NsYXNzZXM6IFsndWktc2tpbi1hZHMnXSxcbiAgICAgIGhpZGVEZWxheTogMjAwMCxcbiAgICAgIGhpZGVQbGF5ZXJTdGF0ZUV4Y2VwdGlvbnM6IFtcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUHJlcGFyZWQsXG4gICAgICAgIFBsYXllclV0aWxzLlBsYXllclN0YXRlLlBhdXNlZCxcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuRmluaXNoZWQsXG4gICAgICBdLFxuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIG1vZGVyblNtYWxsU2NyZWVuVUkoKSB7XG4gICAgbGV0IHN1YnRpdGxlT3ZlcmxheSA9IG5ldyBTdWJ0aXRsZU92ZXJsYXkoKTtcblxuICAgIGxldCBtYWluU2V0dGluZ3NQYW5lbFBhZ2UgPSBuZXcgU2V0dGluZ3NQYW5lbFBhZ2Uoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnZpZGVvLnF1YWxpdHknKSwgbmV3IFZpZGVvUXVhbGl0eVNlbGVjdEJveCgpKSxcbiAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKGkxOG4uZ2V0TG9jYWxpemVyKCdzcGVlZCcpLCBuZXcgUGxheWJhY2tTcGVlZFNlbGVjdEJveCgpKSxcbiAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5hdWRpby50cmFjaycpLCBuZXcgQXVkaW9UcmFja1NlbGVjdEJveCgpKSxcbiAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5hdWRpby5xdWFsaXR5JyksIG5ldyBBdWRpb1F1YWxpdHlTZWxlY3RCb3goKSksXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgbGV0IHNldHRpbmdzUGFuZWwgPSBuZXcgU2V0dGluZ3NQYW5lbCh7XG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIG1haW5TZXR0aW5nc1BhbmVsUGFnZSxcbiAgICAgIF0sXG4gICAgICBoaWRkZW46IHRydWUsXG4gICAgICBwYWdlVHJhbnNpdGlvbkFuaW1hdGlvbjogZmFsc2UsXG4gICAgICBoaWRlRGVsYXk6IC0xLFxuICAgIH0pO1xuXG4gICAgbGV0IHN1YnRpdGxlU2V0dGluZ3NQYW5lbFBhZ2UgPSBuZXcgU3VidGl0bGVTZXR0aW5nc1BhbmVsUGFnZSh7XG4gICAgICBzZXR0aW5nc1BhbmVsOiBzZXR0aW5nc1BhbmVsLFxuICAgICAgb3ZlcmxheTogc3VidGl0bGVPdmVybGF5LFxuICAgIH0pO1xuXG4gICAgbGV0IHN1YnRpdGxlU2V0dGluZ3NPcGVuQnV0dG9uID0gbmV3IFNldHRpbmdzUGFuZWxQYWdlT3BlbkJ1dHRvbih7XG4gICAgICB0YXJnZXRQYWdlOiBzdWJ0aXRsZVNldHRpbmdzUGFuZWxQYWdlLFxuICAgICAgY29udGFpbmVyOiBzZXR0aW5nc1BhbmVsLFxuICAgICAgYXJpYUxhYmVsOiBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzJyksXG4gICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcignb3BlbicpLFxuICAgIH0pO1xuXG4gICAgY29uc3Qgc3VidGl0bGVTZWxlY3RCb3ggPSBuZXcgU3VidGl0bGVTZWxlY3RCb3goKTtcblxuICAgIG1haW5TZXR0aW5nc1BhbmVsUGFnZS5hZGRDb21wb25lbnQoXG4gICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oXG4gICAgICAgIG5ldyBTdWJ0aXRsZVNldHRpbmdzTGFiZWwoe1xuICAgICAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMnKSxcbiAgICAgICAgICBvcGVuZXI6IHN1YnRpdGxlU2V0dGluZ3NPcGVuQnV0dG9uLFxuICAgICAgICB9KSxcbiAgICAgICAgc3VidGl0bGVTZWxlY3RCb3gsXG4gICAgICAgIHtcbiAgICAgICAgICByb2xlOiAnbWVudWJhcicsXG4gICAgICAgIH0sXG4gICAgICApKTtcblxuICAgIHNldHRpbmdzUGFuZWwuYWRkQ29tcG9uZW50KHN1YnRpdGxlU2V0dGluZ3NQYW5lbFBhZ2UpO1xuXG4gICAgc2V0dGluZ3NQYW5lbC5hZGRDb21wb25lbnQobmV3IENsb3NlQnV0dG9uKHsgdGFyZ2V0OiBzZXR0aW5nc1BhbmVsIH0pKTtcbiAgICBzdWJ0aXRsZVNldHRpbmdzUGFuZWxQYWdlLmFkZENvbXBvbmVudChuZXcgQ2xvc2VCdXR0b24oeyB0YXJnZXQ6IHNldHRpbmdzUGFuZWwgfSkpO1xuXG4gICAgbGV0IGNvbnRyb2xCYXIgPSBuZXcgQ29udHJvbEJhcih7XG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgIG5ldyBQbGF5YmFja1RpbWVMYWJlbCh7IHRpbWVMYWJlbE1vZGU6IFBsYXliYWNrVGltZUxhYmVsTW9kZS5DdXJyZW50VGltZSwgaGlkZUluTGl2ZVBsYXliYWNrOiB0cnVlIH0pLFxuICAgICAgICAgICAgbmV3IFNlZWtCYXIoeyBsYWJlbDogbmV3IFNlZWtCYXJMYWJlbCgpIH0pLFxuICAgICAgICAgICAgbmV3IFBsYXliYWNrVGltZUxhYmVsKHsgdGltZUxhYmVsTW9kZTogUGxheWJhY2tUaW1lTGFiZWxNb2RlLlRvdGFsVGltZSwgY3NzQ2xhc3NlczogWyd0ZXh0LXJpZ2h0J10gfSksXG4gICAgICAgICAgICBuZXcgRnVsbHNjcmVlblRvZ2dsZUJ1dHRvbih7IGNzc0NsYXNzZXM6IFsnY29udHJvbGJhci1mdWxsc2NyZWVuLXRvZ2dsZS1idXR0b24nXX0pLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgY3NzQ2xhc3NlczogWydjb250cm9sYmFyLXRvcCddLFxuICAgICAgICB9KSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmV3IFVJQ29udGFpbmVyKHtcbiAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgc3VidGl0bGVPdmVybGF5LFxuICAgICAgICBuZXcgQnVmZmVyaW5nT3ZlcmxheSgpLFxuICAgICAgICBuZXcgQ2FzdFN0YXR1c092ZXJsYXkoKSxcbiAgICAgICAgbmV3IFBsYXliYWNrVG9nZ2xlT3ZlcmxheSgpLFxuICAgICAgICBuZXcgUGxheWJhY2tKdW1wQ29udHJvbHNPdmVybGF5KCksXG4gICAgICAgIG5ldyBSZWNvbW1lbmRhdGlvbk92ZXJsYXkoKSxcbiAgICAgICAgY29udHJvbEJhcixcbiAgICAgICAgbmV3IFRpdGxlQmFyKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICBuZXcgR29CYWNrQnV0dG9uKCksXG4gICAgICAgICAgICBuZXcgTWV0YWRhdGFMYWJlbCh7IGNvbnRlbnQ6IE1ldGFkYXRhTGFiZWxDb250ZW50LlRpdGxlIH0pLFxuICAgICAgICAgICAgbmV3IENhc3RUb2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgIG5ldyBWUlRvZ2dsZUJ1dHRvbigpLFxuICAgICAgICAgICAgbmV3IFBpY3R1cmVJblBpY3R1cmVUb2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgIG5ldyBBaXJQbGF5VG9nZ2xlQnV0dG9uKCksXG4gICAgICAgICAgICBuZXcgUmFkaW9Nb2RlVG9nZ2xlQnV0dG9uKCksXG4gICAgICAgICAgICBuZXcgU2V0dGluZ3NUb2dnbGVCdXR0b24oeyBzZXR0aW5nc1BhbmVsOiBzZXR0aW5nc1BhbmVsIH0pLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pLFxuICAgICAgICBzZXR0aW5nc1BhbmVsLFxuICAgICAgICBuZXcgV2F0ZXJtYXJrKCksXG4gICAgICAgIG5ldyBFcnJvck1lc3NhZ2VPdmVybGF5KCksXG4gICAgICBdLFxuICAgICAgY3NzQ2xhc3NlczogWyd1aS1za2luLXNtYWxsc2NyZWVuJ10sXG4gICAgICBoaWRlRGVsYXk6IDIwMDAsXG4gICAgICBoaWRlUGxheWVyU3RhdGVFeGNlcHRpb25zOiBbXG4gICAgICAgIFBsYXllclV0aWxzLlBsYXllclN0YXRlLlByZXBhcmVkLFxuICAgICAgICBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5QYXVzZWQsXG4gICAgICAgIFBsYXllclV0aWxzLlBsYXllclN0YXRlLkZpbmlzaGVkLFxuICAgICAgXSxcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBtb2Rlcm5TbWFsbFNjcmVlbkFkc1VJKCkge1xuICAgIHJldHVybiBuZXcgVUlDb250YWluZXIoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBuZXcgQnVmZmVyaW5nT3ZlcmxheSgpLFxuICAgICAgICBuZXcgQWRDbGlja092ZXJsYXkoKSxcbiAgICAgICAgbmV3IFBsYXliYWNrVG9nZ2xlT3ZlcmxheSgpLFxuICAgICAgICBuZXcgVGl0bGVCYXIoe1xuICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgIC8vIGR1bW15IGxhYmVsIHdpdGggbm8gY29udGVudCB0byBtb3ZlIGJ1dHRvbnMgdG8gdGhlIHJpZ2h0XG4gICAgICAgICAgICBuZXcgTGFiZWwoeyBjc3NDbGFzczogJ2xhYmVsLW1ldGFkYXRhLXRpdGxlJyB9KSxcbiAgICAgICAgICAgIG5ldyBGdWxsc2NyZWVuVG9nZ2xlQnV0dG9uKCksXG4gICAgICAgICAgXSxcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgIG5ldyBBZE1lc3NhZ2VMYWJlbCh7IHRleHQ6ICdBZDoge3JlbWFpbmluZ1RpbWV9IHNlY3MnIH0pLFxuICAgICAgICAgICAgbmV3IEFkU2tpcEJ1dHRvbigpLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgY3NzQ2xhc3M6ICd1aS1hZHMtc3RhdHVzJyxcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgICAgY3NzQ2xhc3NlczogWyd1aS1za2luLWFkcycsICd1aS1za2luLXNtYWxsc2NyZWVuJ10sXG4gICAgICBoaWRlRGVsYXk6IDIwMDAsXG4gICAgICBoaWRlUGxheWVyU3RhdGVFeGNlcHRpb25zOiBbXG4gICAgICAgIFBsYXllclV0aWxzLlBsYXllclN0YXRlLlByZXBhcmVkLFxuICAgICAgICBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5QYXVzZWQsXG4gICAgICAgIFBsYXllclV0aWxzLlBsYXllclN0YXRlLkZpbmlzaGVkLFxuICAgICAgXSxcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBtb2Rlcm5DYXN0UmVjZWl2ZXJVSSgpIHtcbiAgICBsZXQgY29udHJvbEJhciA9IG5ldyBDb250cm9sQmFyKHtcbiAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgbmV3IFBsYXliYWNrVGltZUxhYmVsKHsgdGltZUxhYmVsTW9kZTogUGxheWJhY2tUaW1lTGFiZWxNb2RlLkN1cnJlbnRUaW1lLCBoaWRlSW5MaXZlUGxheWJhY2s6IHRydWUgfSksXG4gICAgICAgICAgICBuZXcgU2Vla0Jhcih7IHNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVJbnRlcnZhbE1zOiAtMSB9KSxcbiAgICAgICAgICAgIG5ldyBQbGF5YmFja1RpbWVMYWJlbCh7IHRpbWVMYWJlbE1vZGU6IFBsYXliYWNrVGltZUxhYmVsTW9kZS5Ub3RhbFRpbWUsIGNzc0NsYXNzZXM6IFsndGV4dC1yaWdodCddIH0pLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgY3NzQ2xhc3NlczogWydjb250cm9sYmFyLXRvcCddLFxuICAgICAgICB9KSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmV3IENhc3RVSUNvbnRhaW5lcih7XG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIG5ldyBTdWJ0aXRsZU92ZXJsYXkoKSxcbiAgICAgICAgbmV3IEJ1ZmZlcmluZ092ZXJsYXkoKSxcbiAgICAgICAgbmV3IFBsYXliYWNrVG9nZ2xlT3ZlcmxheSgpLFxuICAgICAgICBuZXcgV2F0ZXJtYXJrKCksXG4gICAgICAgIGNvbnRyb2xCYXIsXG4gICAgICAgIG5ldyBUaXRsZUJhcih7IGtlZXBIaWRkZW5XaXRob3V0TWV0YWRhdGE6IHRydWUgfSksXG4gICAgICAgIG5ldyBFcnJvck1lc3NhZ2VPdmVybGF5KCksXG4gICAgICBdLFxuICAgICAgY3NzQ2xhc3NlczogWyd1aS1za2luLWNhc3QtcmVjZWl2ZXInXSxcbiAgICAgIGhpZGVEZWxheTogMjAwMCxcbiAgICAgIGhpZGVQbGF5ZXJTdGF0ZUV4Y2VwdGlvbnM6IFtcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUHJlcGFyZWQsXG4gICAgICAgIFBsYXllclV0aWxzLlBsYXllclN0YXRlLlBhdXNlZCxcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuRmluaXNoZWQsXG4gICAgICBdLFxuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTW9kZXJuVUkocGxheWVyOiBQbGF5ZXJBUEksIGNvbmZpZzogVUlDb25maWcgPSB7fSk6IFVJTWFuYWdlciB7XG4gICAgLy8gc2hvdyBzbWFsbFNjcmVlbiBVSSBvbmx5IG9uIG1vYmlsZS9oYW5kaGVsZCBkZXZpY2VzXG4gICAgbGV0IHNtYWxsU2NyZWVuU3dpdGNoV2lkdGggPSA2MDA7XG5cbiAgICByZXR1cm4gbmV3IFVJTWFuYWdlcihwbGF5ZXIsIFt7XG4gICAgICB1aTogbW9kZXJuU21hbGxTY3JlZW5BZHNVSSgpLFxuICAgICAgY29uZGl0aW9uOiAoY29udGV4dDogVUlDb25kaXRpb25Db250ZXh0KSA9PiB7XG4gICAgICAgIHJldHVybiBjb250ZXh0LmlzTW9iaWxlICYmIGNvbnRleHQuZG9jdW1lbnRXaWR0aCA8IHNtYWxsU2NyZWVuU3dpdGNoV2lkdGggJiYgY29udGV4dC5pc0FkXG4gICAgICAgICAgJiYgY29udGV4dC5hZFJlcXVpcmVzVWk7XG4gICAgICB9LFxuICAgIH0sIHtcbiAgICAgIHVpOiBtb2Rlcm5BZHNVSSgpLFxuICAgICAgY29uZGl0aW9uOiAoY29udGV4dDogVUlDb25kaXRpb25Db250ZXh0KSA9PiB7XG4gICAgICAgIHJldHVybiBjb250ZXh0LmlzQWQgJiYgY29udGV4dC5hZFJlcXVpcmVzVWk7XG4gICAgICB9LFxuICAgIH0sIHtcbiAgICAgIHVpOiBtb2Rlcm5TbWFsbFNjcmVlblVJKCksXG4gICAgICBjb25kaXRpb246IChjb250ZXh0OiBVSUNvbmRpdGlvbkNvbnRleHQpID0+IHtcbiAgICAgICAgcmV0dXJuICFjb250ZXh0LmlzQWQgJiYgIWNvbnRleHQuYWRSZXF1aXJlc1VpICYmIGNvbnRleHQuaXNNb2JpbGVcbiAgICAgICAgICAmJiBjb250ZXh0LmRvY3VtZW50V2lkdGggPCBzbWFsbFNjcmVlblN3aXRjaFdpZHRoO1xuICAgICAgfSxcbiAgICB9LCB7XG4gICAgICB1aTogbW9kZXJuVUkoKSxcbiAgICAgIGNvbmRpdGlvbjogKGNvbnRleHQ6IFVJQ29uZGl0aW9uQ29udGV4dCkgPT4ge1xuICAgICAgICByZXR1cm4gIWNvbnRleHQuaXNBZCAmJiAhY29udGV4dC5hZFJlcXVpcmVzVWk7XG4gICAgICB9LFxuICAgIH1dLCBjb25maWcpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTW9kZXJuU21hbGxTY3JlZW5VSShwbGF5ZXI6IFBsYXllckFQSSwgY29uZmlnOiBVSUNvbmZpZyA9IHt9KTogVUlNYW5hZ2VyIHtcbiAgICByZXR1cm4gbmV3IFVJTWFuYWdlcihwbGF5ZXIsIFt7XG4gICAgICB1aTogbW9kZXJuU21hbGxTY3JlZW5BZHNVSSgpLFxuICAgICAgY29uZGl0aW9uOiAoY29udGV4dDogVUlDb25kaXRpb25Db250ZXh0KSA9PiB7XG4gICAgICAgIHJldHVybiBjb250ZXh0LmlzQWQgJiYgY29udGV4dC5hZFJlcXVpcmVzVWk7XG4gICAgICB9LFxuICAgIH0sIHtcbiAgICAgIHVpOiBtb2Rlcm5TbWFsbFNjcmVlblVJKCksXG4gICAgICBjb25kaXRpb246IChjb250ZXh0OiBVSUNvbmRpdGlvbkNvbnRleHQpID0+IHtcbiAgICAgICAgcmV0dXJuICFjb250ZXh0LmlzQWQgJiYgIWNvbnRleHQuYWRSZXF1aXJlc1VpO1xuICAgICAgfSxcbiAgICB9XSwgY29uZmlnKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBidWlsZE1vZGVybkNhc3RSZWNlaXZlclVJKHBsYXllcjogUGxheWVyQVBJLCBjb25maWc6IFVJQ29uZmlnID0ge30pOiBVSU1hbmFnZXIge1xuICAgIHJldHVybiBuZXcgVUlNYW5hZ2VyKHBsYXllciwgbW9kZXJuQ2FzdFJlY2VpdmVyVUkoKSwgY29uZmlnKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBidWlsZE1vZGVyblR2VUkocGxheWVyOiBQbGF5ZXJBUEksIGNvbmZpZzogVUlDb25maWcgPSB7fSk6IFVJTWFuYWdlciB7XG4gICAgICAgIHJldHVybiBuZXcgVUlNYW5hZ2VyKHBsYXllciwgW3tcbiAgICAgICAgICAuLi5tb2Rlcm5UdlVJKCksXG4gICAgICAgIH1dLCBjb25maWcpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIG1vZGVyblR2VUkoKSB7XG4gICAgY29uc3Qgc3VidGl0bGVMaXN0Qm94ID0gbmV3IFN1YnRpdGxlTGlzdEJveCgpO1xuICAgIGNvbnN0IHN1YnRpdGxlTGlzdFBhbmVsID0gbmV3IFNldHRpbmdzUGFuZWwoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbFBhZ2Uoe1xuICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbShudWxsLCBzdWJ0aXRsZUxpc3RCb3gpLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICAgIGhpZGRlbjogdHJ1ZSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGF1ZGlvVHJhY2tMaXN0Qm94ID0gbmV3IEF1ZGlvVHJhY2tMaXN0Qm94KCk7XG4gICAgY29uc3QgYXVkaW9UcmFja0xpc3RQYW5lbCA9IG5ldyBTZXR0aW5nc1BhbmVsKHtcbiAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxQYWdlKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0obnVsbCwgYXVkaW9UcmFja0xpc3RCb3gpLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICAgIGhpZGRlbjogdHJ1ZSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHNlZWtCYXIgPSBuZXcgU2Vla0Jhcih7IGxhYmVsOiBuZXcgU2Vla0JhckxhYmVsKCkgfSk7XG4gICAgY29uc3QgcGxheWJhY2tUb2dnbGVPdmVybGF5ID0gbmV3IFBsYXliYWNrVG9nZ2xlT3ZlcmxheSgpO1xuICAgIGNvbnN0IHN1YnRpdGxlVG9nZ2xlQnV0dG9uID0gbmV3IFNldHRpbmdzVG9nZ2xlQnV0dG9uKHtcbiAgICAgIHNldHRpbmdzUGFuZWw6IHN1YnRpdGxlTGlzdFBhbmVsLFxuICAgICAgYXV0b0hpZGVXaGVuTm9BY3RpdmVTZXR0aW5nczogdHJ1ZSxcbiAgICAgIGNzc0NsYXNzOiAndWktc3VidGl0bGVzZXR0aW5nc3RvZ2dsZWJ1dHRvbicsXG4gICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzJyksXG4gICAgfSk7XG4gICAgY29uc3QgYXVkaW9Ub2dnbGVCdXR0b24gPSBuZXcgU2V0dGluZ3NUb2dnbGVCdXR0b24oe1xuICAgICAgc2V0dGluZ3NQYW5lbDogYXVkaW9UcmFja0xpc3RQYW5lbCxcbiAgICAgIGF1dG9IaWRlV2hlbk5vQWN0aXZlU2V0dGluZ3M6IHRydWUsXG4gICAgICBjc3NDbGFzczogJ3VpLWF1ZGlvdHJhY2tzZXR0aW5nc3RvZ2dsZWJ1dHRvbicsXG4gICAgICBhcmlhTGFiZWw6IGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5hdWRpby50cmFjaycpLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLmF1ZGlvLnRyYWNrJyksXG4gICAgfSk7XG4gICAgY29uc3QgdWlDb250YWluZXIgPSBuZXcgVUlDb250YWluZXIoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBuZXcgU3VidGl0bGVPdmVybGF5KCksXG4gICAgICAgIG5ldyBCdWZmZXJpbmdPdmVybGF5KCksXG4gICAgICAgIHBsYXliYWNrVG9nZ2xlT3ZlcmxheSxcbiAgICAgICAgbmV3IENvbnRyb2xCYXIoe1xuICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgICAgbmV3IFBsYXliYWNrVGltZUxhYmVsKHsgdGltZUxhYmVsTW9kZTogUGxheWJhY2tUaW1lTGFiZWxNb2RlLkN1cnJlbnRUaW1lLCBoaWRlSW5MaXZlUGxheWJhY2s6IHRydWUgfSksXG4gICAgICAgICAgICAgICAgc2Vla0JhcixcbiAgICAgICAgICAgICAgICBuZXcgUGxheWJhY2tUaW1lTGFiZWwoeyB0aW1lTGFiZWxNb2RlOiBQbGF5YmFja1RpbWVMYWJlbE1vZGUuUmVtYWluaW5nVGltZSwgY3NzQ2xhc3NlczogWyd0ZXh0LXJpZ2h0J10gfSksXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnY29udHJvbGJhci10b3AnXSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgVGl0bGVCYXIoe1xuICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgICAgbmV3IE1ldGFkYXRhTGFiZWwoeyBjb250ZW50OiBNZXRhZGF0YUxhYmVsQ29udGVudC5UaXRsZSB9KSxcbiAgICAgICAgICAgICAgICBzdWJ0aXRsZVRvZ2dsZUJ1dHRvbixcbiAgICAgICAgICAgICAgICBhdWRpb1RvZ2dsZUJ1dHRvbixcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgY3NzQ2xhc3NlczogWyd1aS10aXRsZWJhci10b3AnXSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAgICBuZXcgTWV0YWRhdGFMYWJlbCh7IGNvbnRlbnQ6IE1ldGFkYXRhTGFiZWxDb250ZW50LkRlc2NyaXB0aW9uIH0pLFxuICAgICAgICAgICAgICAgIHN1YnRpdGxlTGlzdFBhbmVsLFxuICAgICAgICAgICAgICAgIGF1ZGlvVHJhY2tMaXN0UGFuZWwsXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsndWktdGl0bGViYXItYm90dG9tJ10sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICBdLFxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IFJlY29tbWVuZGF0aW9uT3ZlcmxheSgpLFxuICAgICAgICBuZXcgRXJyb3JNZXNzYWdlT3ZlcmxheSgpLFxuICAgICAgXSxcbiAgICAgIGNzc0NsYXNzZXM6IFsndWktc2tpbi10diddLFxuICAgICAgaGlkZURlbGF5OiAyMDAwLFxuICAgICAgaGlkZVBsYXllclN0YXRlRXhjZXB0aW9uczogW1xuICAgICAgICBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5QcmVwYXJlZCxcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUGF1c2VkLFxuICAgICAgICBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5GaW5pc2hlZCxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICBjb25zdCBzcGF0aWFsTmF2aWdhdGlvbiA9IG5ldyBTcGF0aWFsTmF2aWdhdGlvbihcbiAgICAgIG5ldyBSb290TmF2aWdhdGlvbkdyb3VwKHVpQ29udGFpbmVyLCBwbGF5YmFja1RvZ2dsZU92ZXJsYXksIHNlZWtCYXIsIGF1ZGlvVG9nZ2xlQnV0dG9uLCBzdWJ0aXRsZVRvZ2dsZUJ1dHRvbiksXG4gICAgICBuZXcgTGlzdE5hdmlnYXRpb25Hcm91cChMaXN0T3JpZW50YXRpb24uVmVydGljYWwsIHN1YnRpdGxlTGlzdFBhbmVsLCBzdWJ0aXRsZUxpc3RCb3gpLFxuICAgICAgbmV3IExpc3ROYXZpZ2F0aW9uR3JvdXAoTGlzdE9yaWVudGF0aW9uLlZlcnRpY2FsLCBhdWRpb1RyYWNrTGlzdFBhbmVsLCBhdWRpb1RyYWNrTGlzdEJveCksXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICB1aTogdWlDb250YWluZXIsXG4gICAgICBzcGF0aWFsTmF2aWdhdGlvbjogc3BhdGlhbE5hdmlnYXRpb24sXG4gICAgfTtcbiAgfVxufVxuIiwiaW1wb3J0IHtVSUNvbnRhaW5lcn0gZnJvbSAnLi9jb21wb25lbnRzL3VpY29udGFpbmVyJztcbmltcG9ydCB7RE9NfSBmcm9tICcuL2RvbSc7XG5pbXBvcnQge0NvbXBvbmVudCwgQ29tcG9uZW50Q29uZmlnfSBmcm9tICcuL2NvbXBvbmVudHMvY29tcG9uZW50JztcbmltcG9ydCB7Q29udGFpbmVyfSBmcm9tICcuL2NvbXBvbmVudHMvY29udGFpbmVyJztcbmltcG9ydCB7IFNlZWtCYXIsIFNlZWtCYXJNYXJrZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvc2Vla2Jhcic7XG5pbXBvcnQge05vQXJncywgRXZlbnREaXNwYXRjaGVyLCBDYW5jZWxFdmVudEFyZ3N9IGZyb20gJy4vZXZlbnRkaXNwYXRjaGVyJztcbmltcG9ydCB7VUlVdGlsc30gZnJvbSAnLi91aXV0aWxzJztcbmltcG9ydCB7QXJyYXlVdGlsc30gZnJvbSAnLi9hcnJheXV0aWxzJztcbmltcG9ydCB7QnJvd3NlclV0aWxzfSBmcm9tICcuL2Jyb3dzZXJ1dGlscyc7XG5pbXBvcnQgeyBUaW1lbGluZU1hcmtlciwgVUlDb25maWcgfSBmcm9tICcuL3VpY29uZmlnJztcbmltcG9ydCB7IFBsYXllckFQSSwgUGxheWVyRXZlbnRDYWxsYmFjaywgUGxheWVyRXZlbnRCYXNlLCBQbGF5ZXJFdmVudCwgQWRFdmVudCwgTGluZWFyQWQgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgVm9sdW1lQ29udHJvbGxlciB9IGZyb20gJy4vdm9sdW1lY29udHJvbGxlcic7XG5pbXBvcnQgeyBpMThuLCBDdXN0b21Wb2NhYnVsYXJ5LCBWb2NhYnVsYXJpZXMgfSBmcm9tICcuL2xvY2FsaXphdGlvbi9pMThuJztcbmltcG9ydCB7IEZvY3VzVmlzaWJpbGl0eVRyYWNrZXIgfSBmcm9tICcuL2ZvY3VzdmlzaWJpbGl0eXRyYWNrZXInO1xuaW1wb3J0IHsgaXNNb2JpbGVWM1BsYXllckFQSSwgTW9iaWxlVjNQbGF5ZXJBUEksIE1vYmlsZVYzUGxheWVyRXZlbnQgfSBmcm9tICcuL21vYmlsZXYzcGxheWVyYXBpJztcbmltcG9ydCB7IFNwYXRpYWxOYXZpZ2F0aW9uIH0gZnJvbSAnLi9zcGF0aWFsbmF2aWdhdGlvbi9zcGF0aWFsbmF2aWdhdGlvbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9jYWxpemF0aW9uQ29uZmlnIHtcbiAgLyoqXG4gICAqIFNldHMgdGhlIGRlc2lyZWQgbGFuZ3VhZ2UsIGFuZCBmYWxscyBiYWNrIHRvICdlbicgaWYgdGhlcmUgaXMgbm8gdm9jYWJ1bGFyeSBmb3IgdGhlIGRlc2lyZWQgbGFuZ3VhZ2UuIFNldHRpbmcgaXRcbiAgICogdG8gXCJhdXRvXCIgd2lsbCBlbmFibGUgbGFuZ3VhZ2UgZGV0ZWN0aW9uIGZyb20gdGhlIGJyb3dzZXIncyBsb2NhbGUuXG4gICAqL1xuICBsYW5ndWFnZT86ICdhdXRvJyB8ICdlbicgfCAnZGUnIHwgc3RyaW5nO1xuICAvKipcbiAgICogQSBtYXAgb2YgYGxhbmd1YWdlYCB0byB7QGxpbmsgQ3VzdG9tVm9jYWJ1bGFyeX0gZGVmaW5pdGlvbnMuIENhbiBiZSB1c2VkIHRvIG92ZXJ3cml0ZSBkZWZhdWx0IHRyYW5zbGF0aW9ucyBhbmQgYWRkXG4gICAqIGN1c3RvbSBzdHJpbmdzIG9yIGFkZGl0aW9uYWwgbGFuZ3VhZ2VzLlxuICAgKi9cbiAgdm9jYWJ1bGFyaWVzPzogVm9jYWJ1bGFyaWVzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEludGVybmFsVUlDb25maWcgZXh0ZW5kcyBVSUNvbmZpZyB7XG4gIGV2ZW50czoge1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIGNvbmZpZ3VyYXRpb24gaGFzIGJlZW4gdXBkYXRlZC9jaGFuZ2VkLlxuICAgICAqL1xuICAgIG9uVXBkYXRlZDogRXZlbnREaXNwYXRjaGVyPFVJTWFuYWdlciwgdm9pZD47XG4gIH07XG4gIHZvbHVtZUNvbnRyb2xsZXI6IFZvbHVtZUNvbnRyb2xsZXI7XG59XG5cbi8qKlxuICogVGhlIGNvbnRleHQgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byBhIHtAbGluayBVSUNvbmRpdGlvblJlc29sdmVyfSB0byBkZXRlcm1pbmUgaWYgaXQncyBjb25kaXRpb25zIGZ1bGZpbCB0aGUgY29udGV4dC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVSUNvbmRpdGlvbkNvbnRleHQge1xuICAvKipcbiAgICogVGVsbHMgaWYgdGhlIHBsYXllciBpcyBsb2FkaW5nIG9yIHBsYXlpbmcgYW4gYWQuXG4gICAqL1xuICBpc0FkOiBib29sZWFuO1xuICAvKipcbiAgICogVGVsbHMgaWYgdGhlIGN1cnJlbnQgYWQgcmVxdWlyZXMgYW4gZXh0ZXJuYWwgVUksIGlmIHtAbGluayAjaXNBZH0gaXMgdHJ1ZS5cbiAgICovXG4gIGFkUmVxdWlyZXNVaTogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFRlbGxzIGlmIHRoZSBwbGF5ZXIgaXMgY3VycmVudGx5IGluIGZ1bGxzY3JlZW4gbW9kZS5cbiAgICovXG4gIGlzRnVsbHNjcmVlbjogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFRlbGxzIGlmIHRoZSBVSSBpcyBydW5uaW5nIGluIGEgbW9iaWxlIGJyb3dzZXIuXG4gICAqL1xuICBpc01vYmlsZTogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFRlbGxzIGlmIHRoZSBwbGF5ZXIgaXMgaW4gcGxheWluZyBvciBwYXVzZWQgc3RhdGUuXG4gICAqL1xuICBpc1BsYXlpbmc6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIHBsYXllci9VSSBlbGVtZW50LlxuICAgKi9cbiAgd2lkdGg6IG51bWJlcjtcbiAgLyoqXG4gICAqIFRoZSB3aWR0aCBvZiB0aGUgZG9jdW1lbnQgd2hlcmUgdGhlIHBsYXllci9VSSBpcyBlbWJlZGRlZCBpbi5cbiAgICovXG4gIGRvY3VtZW50V2lkdGg6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBSZXNvbHZlcyB0aGUgY29uZGl0aW9ucyBvZiBpdHMgYXNzb2NpYXRlZCBVSSBpbiBhIHtAbGluayBVSVZhcmlhbnR9IHVwb24gYSB7QGxpbmsgVUlDb25kaXRpb25Db250ZXh0fSBhbmQgZGVjaWRlc1xuICogaWYgdGhlIFVJIHNob3VsZCBiZSBkaXNwbGF5ZWQuIElmIGl0IHJldHVybnMgdHJ1ZSwgdGhlIFVJIGlzIGEgY2FuZGlkYXRlIGZvciBkaXNwbGF5OyBpZiBpdCByZXR1cm5zIGZhbHNlLCBpdCB3aWxsXG4gKiBub3QgYmUgZGlzcGxheWVkIGluIHRoZSBnaXZlbiBjb250ZXh0LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFVJQ29uZGl0aW9uUmVzb2x2ZXIge1xuICAoY29udGV4dDogVUlDb25kaXRpb25Db250ZXh0KTogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBBc3NvY2lhdGVzIGEgVUkgaW5zdGFuY2Ugd2l0aCBhbiBvcHRpb25hbCB7QGxpbmsgVUlDb25kaXRpb25SZXNvbHZlcn0gdGhhdCBkZXRlcm1pbmVzIGlmIHRoZSBVSSBzaG91bGQgYmUgZGlzcGxheWVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFVJVmFyaWFudCB7XG4gIHVpOiBVSUNvbnRhaW5lcjtcbiAgY29uZGl0aW9uPzogVUlDb25kaXRpb25SZXNvbHZlcjtcbiAgc3BhdGlhbE5hdmlnYXRpb24/OiBTcGF0aWFsTmF2aWdhdGlvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY3RpdmVVaUNoYW5nZWRBcmdzIGV4dGVuZHMgTm9BcmdzIHtcbiAgLyoqXG4gICAqIFRoZSBwcmV2aW91c2x5IGFjdGl2ZSB7QGxpbmsgVUlJbnN0YW5jZU1hbmFnZXJ9IHByaW9yIHRvIHRoZSB7QGxpbmsgVUlNYW5hZ2VyfSBzd2l0Y2hpbmcgdG8gYSBkaWZmZXJlbnQgVUkgdmFyaWFudC5cbiAgICovXG4gIHByZXZpb3VzVWk6IFVJSW5zdGFuY2VNYW5hZ2VyO1xuICAvKipcbiAgICogVGhlIGN1cnJlbnRseSBhY3RpdmUge0BsaW5rIFVJSW5zdGFuY2VNYW5hZ2VyfS5cbiAgICovXG4gIGN1cnJlbnRVaTogVUlJbnN0YW5jZU1hbmFnZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBVSU1hbmFnZXIge1xuXG4gIHByaXZhdGUgcGxheWVyOiBQbGF5ZXJBUEk7XG4gIHByaXZhdGUgdWlDb250YWluZXJFbGVtZW50OiBET007XG4gIHByaXZhdGUgdWlWYXJpYW50czogVUlWYXJpYW50W107XG4gIHByaXZhdGUgdWlJbnN0YW5jZU1hbmFnZXJzOiBJbnRlcm5hbFVJSW5zdGFuY2VNYW5hZ2VyW107XG4gIHByaXZhdGUgY3VycmVudFVpOiBJbnRlcm5hbFVJSW5zdGFuY2VNYW5hZ2VyO1xuICBwcml2YXRlIGNvbmZpZzogSW50ZXJuYWxVSUNvbmZpZzsgLy8gQ29uanVuY3Rpb24gb2YgcHJvdmlkZWQgdWlDb25maWcgYW5kIHNvdXJjZUNvbmZpZyBmcm9tIHRoZSBwbGF5ZXJcbiAgcHJpdmF0ZSBtYW5hZ2VyUGxheWVyV3JhcHBlcjogUGxheWVyV3JhcHBlcjtcbiAgcHJpdmF0ZSBmb2N1c1Zpc2liaWxpdHlUcmFja2VyOiBGb2N1c1Zpc2liaWxpdHlUcmFja2VyO1xuXG4gIHByaXZhdGUgZXZlbnRzID0ge1xuICAgIG9uVWlWYXJpYW50UmVzb2x2ZTogbmV3IEV2ZW50RGlzcGF0Y2hlcjxVSU1hbmFnZXIsIFVJQ29uZGl0aW9uQ29udGV4dD4oKSxcbiAgICBvbkFjdGl2ZVVpQ2hhbmdlZDogbmV3IEV2ZW50RGlzcGF0Y2hlcjxVSU1hbmFnZXIsIEFjdGl2ZVVpQ2hhbmdlZEFyZ3M+KCksXG4gIH07XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBVSSBtYW5hZ2VyIHdpdGggYSBzaW5nbGUgVUkgdmFyaWFudCB0aGF0IHdpbGwgYmUgcGVybWFuZW50bHkgc2hvd24uXG4gICAqIEBwYXJhbSBwbGF5ZXIgdGhlIGFzc29jaWF0ZWQgcGxheWVyIG9mIHRoaXMgVUlcbiAgICogQHBhcmFtIHVpIHRoZSBVSSB0byBhZGQgdG8gdGhlIHBsYXllclxuICAgKiBAcGFyYW0gdWljb25maWcgb3B0aW9uYWwgVUkgY29uZmlndXJhdGlvblxuICAgKi9cbiAgY29uc3RydWN0b3IocGxheWVyOiBQbGF5ZXJBUEksIHVpOiBVSUNvbnRhaW5lciwgdWljb25maWc/OiBVSUNvbmZpZyk7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgVUkgbWFuYWdlciB3aXRoIGEgbGlzdCBvZiBVSSB2YXJpYW50cyB0aGF0IHdpbGwgYmUgZHluYW1pY2FsbHkgc2VsZWN0ZWQgYW5kIHN3aXRjaGVkIGFjY29yZGluZyB0b1xuICAgKiB0aGUgY29udGV4dCBvZiB0aGUgVUkuXG4gICAqXG4gICAqIEV2ZXJ5IHRpbWUgdGhlIFVJIGNvbnRleHQgY2hhbmdlcywgdGhlIGNvbmRpdGlvbnMgb2YgdGhlIFVJIHZhcmlhbnRzIHdpbGwgYmUgc2VxdWVudGlhbGx5IHJlc29sdmVkIGFuZCB0aGUgZmlyc3RcbiAgICogVUksIHdob3NlIGNvbmRpdGlvbiBldmFsdWF0ZXMgdG8gdHJ1ZSwgd2lsbCBiZSBzZWxlY3RlZCBhbmQgZGlzcGxheWVkLiBUaGUgbGFzdCB2YXJpYW50IGluIHRoZSBsaXN0IG1pZ2h0IG9taXQgdGhlXG4gICAqIGNvbmRpdGlvbiByZXNvbHZlciBhbmQgd2lsbCBiZSBzZWxlY3RlZCBhcyBkZWZhdWx0L2ZhbGxiYWNrIFVJIHdoZW4gYWxsIG90aGVyIGNvbmRpdGlvbnMgZmFpbC4gSWYgdGhlcmUgaXMgbm9cbiAgICogZmFsbGJhY2sgVUkgYW5kIGFsbCBjb25kaXRpb25zIGZhaWwsIG5vIFVJIHdpbGwgYmUgZGlzcGxheWVkLlxuICAgKlxuICAgKiBAcGFyYW0gcGxheWVyIHRoZSBhc3NvY2lhdGVkIHBsYXllciBvZiB0aGlzIFVJXG4gICAqIEBwYXJhbSB1aVZhcmlhbnRzIGEgbGlzdCBvZiBVSSB2YXJpYW50cyB0aGF0IHdpbGwgYmUgZHluYW1pY2FsbHkgc3dpdGNoZWRcbiAgICogQHBhcmFtIHVpY29uZmlnIG9wdGlvbmFsIFVJIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIGNvbnN0cnVjdG9yKHBsYXllcjogUGxheWVyQVBJLCB1aVZhcmlhbnRzOiBVSVZhcmlhbnRbXSwgdWljb25maWc/OiBVSUNvbmZpZyk7XG4gIGNvbnN0cnVjdG9yKHBsYXllcjogUGxheWVyQVBJLCBwbGF5ZXJVaU9yVWlWYXJpYW50czogVUlDb250YWluZXIgfCBVSVZhcmlhbnRbXSwgdWljb25maWc6IFVJQ29uZmlnID0ge30pIHtcbiAgICBpZiAocGxheWVyVWlPclVpVmFyaWFudHMgaW5zdGFuY2VvZiBVSUNvbnRhaW5lcikge1xuICAgICAgLy8gU2luZ2xlLVVJIGNvbnN0cnVjdG9yIGhhcyBiZWVuIGNhbGxlZCwgdHJhbnNmb3JtIGFyZ3VtZW50cyB0byBVSVZhcmlhbnRbXSBzaWduYXR1cmVcbiAgICAgIGxldCBwbGF5ZXJVaSA9IDxVSUNvbnRhaW5lcj5wbGF5ZXJVaU9yVWlWYXJpYW50cztcbiAgICAgIGxldCB1aVZhcmlhbnRzID0gW107XG5cbiAgICAgIC8vIEFkZCB0aGUgZGVmYXVsdCBwbGF5ZXIgVUlcbiAgICAgIHVpVmFyaWFudHMucHVzaCh7IHVpOiBwbGF5ZXJVaSB9KTtcblxuICAgICAgdGhpcy51aVZhcmlhbnRzID0gdWlWYXJpYW50cztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBEZWZhdWx0IGNvbnN0cnVjdG9yIChVSVZhcmlhbnRbXSkgaGFzIGJlZW4gY2FsbGVkXG4gICAgICB0aGlzLnVpVmFyaWFudHMgPSA8VUlWYXJpYW50W10+cGxheWVyVWlPclVpVmFyaWFudHM7XG4gICAgfVxuXG4gICAgdGhpcy5wbGF5ZXIgPSBwbGF5ZXI7XG4gICAgdGhpcy5tYW5hZ2VyUGxheWVyV3JhcHBlciA9IG5ldyBQbGF5ZXJXcmFwcGVyKHBsYXllcik7XG5cbiAgICAvLyBlbnN1cmUgdGhhdCBhdCBsZWFzdCB0aGUgbWV0YWRhdGEgb2JqZWN0IGRvZXMgZXhpc3QgaW4gdGhlIHVpY29uZmlnXG4gICAgdWljb25maWcubWV0YWRhdGEgPSB1aWNvbmZpZy5tZXRhZGF0YSA/IHVpY29uZmlnLm1ldGFkYXRhIDoge307XG5cbiAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgIHBsYXliYWNrU3BlZWRTZWxlY3Rpb25FbmFibGVkOiB0cnVlLCAvLyBTd2l0Y2ggb24gc3BlZWQgc2VsZWN0b3IgYnkgZGVmYXVsdFxuICAgICAgYXV0b1VpVmFyaWFudFJlc29sdmU6IHRydWUsIC8vIFN3aXRjaCBvbiBhdXRvIFVJIHJlc29sdmluZyBieSBkZWZhdWx0XG4gICAgICBkaXNhYmxlQXV0b0hpZGVXaGVuSG92ZXJlZDogZmFsc2UsIC8vIERpc2FibGUgYXV0byBoaWRlIHdoZW4gVUkgaXMgaG92ZXJlZFxuICAgICAgZW5hYmxlU2Vla1ByZXZpZXc6IHRydWUsXG4gICAgICAuLi51aWNvbmZpZyxcbiAgICAgIGV2ZW50czoge1xuICAgICAgICBvblVwZGF0ZWQ6IG5ldyBFdmVudERpc3BhdGNoZXI8VUlNYW5hZ2VyLCB2b2lkPigpLFxuICAgICAgfSxcbiAgICAgIHZvbHVtZUNvbnRyb2xsZXI6IG5ldyBWb2x1bWVDb250cm9sbGVyKHRoaXMubWFuYWdlclBsYXllcldyYXBwZXIuZ2V0UGxheWVyKCkpLFxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHYXRoZXJzIGNvbmZpZ3VyYXRpb24gZGF0YSBmcm9tIHRoZSBVSSBjb25maWcgYW5kIHBsYXllciBzb3VyY2UgY29uZmlnIGFuZCBjcmVhdGVzIGEgbWVyZ2VkIFVJIGNvbmZpZ1xuICAgICAqIHRoYXQgaXMgdXNlZCB0aHJvdWdob3V0IHRoZSBVSSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVDb25maWcgPSAoKSA9PiB7XG4gICAgICBjb25zdCBwbGF5ZXJTb3VyY2VDb25maWcgPSBwbGF5ZXIuZ2V0U291cmNlKCkgfHwge307XG4gICAgICB0aGlzLmNvbmZpZy5tZXRhZGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodWljb25maWcubWV0YWRhdGEgfHwge30pKTtcblxuICAgICAgLy8gRXh0cmFjdCB0aGUgVUktcmVsYXRlZCBjb25maWcgcHJvcGVydGllcyBmcm9tIHRoZSBzb3VyY2UgY29uZmlnXG4gICAgICBjb25zdCBwbGF5ZXJTb3VyY2VVaUNvbmZpZzogVUlDb25maWcgPSB7XG4gICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgLy8gVE9ETyBtb3ZlIG1ldGFkYXRhIGludG8gc291cmNlLm1ldGFkYXRhIG5hbWVzcGFjZSBpbiBwbGF5ZXIgdjhcbiAgICAgICAgICB0aXRsZTogcGxheWVyU291cmNlQ29uZmlnLnRpdGxlLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBwbGF5ZXJTb3VyY2VDb25maWcuZGVzY3JpcHRpb24sXG4gICAgICAgICAgbWFya2VyczogKHBsYXllclNvdXJjZUNvbmZpZyBhcyBhbnkpLm1hcmtlcnMsXG4gICAgICAgIH0sXG4gICAgICAgIHJlY29tbWVuZGF0aW9uczogKHBsYXllclNvdXJjZUNvbmZpZyBhcyBhbnkpLnJlY29tbWVuZGF0aW9ucyxcbiAgICAgIH07XG5cbiAgICAgIC8vIFBsYXllciBzb3VyY2UgY29uZmlnIHRha2VzIHByZWNlZGVuY2Ugb3ZlciB0aGUgVUkgY29uZmlnLCBiZWNhdXNlIHRoZSBjb25maWcgaW4gdGhlIHNvdXJjZSBpcyBhdHRhY2hlZFxuICAgICAgLy8gdG8gYSBzb3VyY2Ugd2hpY2ggY2hhbmdlcyB3aXRoIGV2ZXJ5IHBsYXllci5sb2FkLCB3aGVyZWFzIHRoZSBVSSBjb25maWcgc3RheXMgdGhlIHNhbWUgZm9yIHRoZSB3aG9sZVxuICAgICAgLy8gbGlmZXRpbWUgb2YgdGhlIHBsYXllciBpbnN0YW5jZS5cbiAgICAgIHRoaXMuY29uZmlnLm1ldGFkYXRhLnRpdGxlID0gcGxheWVyU291cmNlVWlDb25maWcubWV0YWRhdGEudGl0bGUgfHwgdWljb25maWcubWV0YWRhdGEudGl0bGU7XG4gICAgICB0aGlzLmNvbmZpZy5tZXRhZGF0YS5kZXNjcmlwdGlvbiA9IHBsYXllclNvdXJjZVVpQ29uZmlnLm1ldGFkYXRhLmRlc2NyaXB0aW9uIHx8IHVpY29uZmlnLm1ldGFkYXRhLmRlc2NyaXB0aW9uO1xuICAgICAgdGhpcy5jb25maWcubWV0YWRhdGEubWFya2VycyA9IHBsYXllclNvdXJjZVVpQ29uZmlnLm1ldGFkYXRhLm1hcmtlcnMgfHwgdWljb25maWcubWV0YWRhdGEubWFya2VycyB8fCBbXTtcbiAgICAgIHRoaXMuY29uZmlnLnJlY29tbWVuZGF0aW9ucyA9IHBsYXllclNvdXJjZVVpQ29uZmlnLnJlY29tbWVuZGF0aW9ucyB8fCB1aWNvbmZpZy5yZWNvbW1lbmRhdGlvbnMgfHwgW107XG4gICAgfTtcblxuICAgIHVwZGF0ZUNvbmZpZygpO1xuXG4gICAgLy8gVXBkYXRlIHRoZSBzb3VyY2UgY29uZmlndXJhdGlvbiB3aGVuIGEgbmV3IHNvdXJjZSBpcyBsb2FkZWQgYW5kIGRpc3BhdGNoIG9uVXBkYXRlZFxuICAgIGNvbnN0IHVwZGF0ZVNvdXJjZSA9ICgpID0+IHtcbiAgICAgIHVwZGF0ZUNvbmZpZygpO1xuICAgICAgdGhpcy5jb25maWcuZXZlbnRzLm9uVXBkYXRlZC5kaXNwYXRjaCh0aGlzKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgd3JhcHBlZFBsYXllciA9IHRoaXMubWFuYWdlclBsYXllcldyYXBwZXIuZ2V0UGxheWVyKCk7XG5cbiAgICB3cmFwcGVkUGxheWVyLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU291cmNlTG9hZGVkLCB1cGRhdGVTb3VyY2UpO1xuXG4gICAgLy8gVGhlIFBsYXlsaXN0VHJhbnNpdGlvbiBldmVudCBpcyBvbmx5IGF2YWlsYWJsZSBvbiBNb2JpbGUgdjMgZm9yIG5vdy5cbiAgICAvLyBUaGlzIGV2ZW50IGlzIGZpcmVkIHdoZW4gYSBuZXcgc291cmNlIGJlY29tZXMgYWN0aXZlIGluIHRoZSBwbGF5ZXIuXG4gICAgaWYgKGlzTW9iaWxlVjNQbGF5ZXJBUEkod3JhcHBlZFBsYXllcikpIHtcbiAgICAgIHdyYXBwZWRQbGF5ZXIub24oTW9iaWxlVjNQbGF5ZXJFdmVudC5QbGF5bGlzdFRyYW5zaXRpb24sIHVwZGF0ZVNvdXJjZSk7XG4gICAgfVxuXG4gICAgaWYgKHVpY29uZmlnLmNvbnRhaW5lcikge1xuICAgICAgLy8gVW5mb3J0dW5hdGVseSBcInVpQ29udGFpbmVyRWxlbWVudCA9IG5ldyBET00oY29uZmlnLmNvbnRhaW5lcilcIiB3aWxsIG5vdCBhY2NlcHQgdGhlIGNvbnRhaW5lciB3aXRoXG4gICAgICAvLyBzdHJpbmd8SFRNTEVsZW1lbnQgdHlwZSBkaXJlY3RseSwgYWx0aG91Z2ggaXQgYWNjZXB0cyBib3RoIHR5cGVzLCBzbyB3ZSBuZWVkIHRvIHNwaXQgdGhlc2UgdHdvIGNhc2VzIHVwIGhlcmUuXG4gICAgICAvLyBUT0RPIGNoZWNrIGluIHVwY29taW5nIFRTIHZlcnNpb25zIGlmIHRoZSBjb250YWluZXIgY2FuIGJlIHBhc3NlZCBpbiBkaXJlY3RseSwgb3IgZml4IHRoZSBjb25zdHJ1Y3RvclxuICAgICAgdGhpcy51aUNvbnRhaW5lckVsZW1lbnQgPSB1aWNvbmZpZy5jb250YWluZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCA/XG4gICAgICAgIG5ldyBET00odWljb25maWcuY29udGFpbmVyKSA6IG5ldyBET00odWljb25maWcuY29udGFpbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51aUNvbnRhaW5lckVsZW1lbnQgPSBuZXcgRE9NKHBsYXllci5nZXRDb250YWluZXIoKSk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIFVJIGluc3RhbmNlIG1hbmFnZXJzIGZvciB0aGUgVUkgdmFyaWFudHNcbiAgICAvLyBUaGUgaW5zdGFuY2UgbWFuYWdlcnMgbWFwIHRvIHRoZSBjb3JyZXNwb25kaW5nIFVJIHZhcmlhbnRzIGJ5IHRoZWlyIGFycmF5IGluZGV4XG4gICAgdGhpcy51aUluc3RhbmNlTWFuYWdlcnMgPSBbXTtcbiAgICBsZXQgdWlWYXJpYW50c1dpdGhvdXRDb25kaXRpb24gPSBbXTtcbiAgICBmb3IgKGxldCB1aVZhcmlhbnQgb2YgdGhpcy51aVZhcmlhbnRzKSB7XG4gICAgICBpZiAodWlWYXJpYW50LmNvbmRpdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIC8vIENvbGxlY3QgdmFyaWFudHMgd2l0aG91dCBjb25kaXRpb25zIGZvciBlcnJvciBjaGVja2luZ1xuICAgICAgICB1aVZhcmlhbnRzV2l0aG91dENvbmRpdGlvbi5wdXNoKHVpVmFyaWFudCk7XG4gICAgICB9XG4gICAgICAvLyBDcmVhdGUgdGhlIGluc3RhbmNlIG1hbmFnZXIgZm9yIGEgVUkgdmFyaWFudFxuICAgICAgdGhpcy51aUluc3RhbmNlTWFuYWdlcnMucHVzaChuZXcgSW50ZXJuYWxVSUluc3RhbmNlTWFuYWdlcihcbiAgICAgICAgcGxheWVyLFxuICAgICAgICB1aVZhcmlhbnQudWksXG4gICAgICAgIHRoaXMuY29uZmlnLFxuICAgICAgICB1aVZhcmlhbnQuc3BhdGlhbE5hdmlnYXRpb24sXG4gICAgICApKTtcbiAgICB9XG4gICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlcmUgaXMgb25seSBvbmUgVUkgdmFyaWFudCB3aXRob3V0IGEgY29uZGl0aW9uXG4gICAgLy8gSXQgZG9lcyBub3QgbWFrZSBzZW5zZSB0byBoYXZlIG11bHRpcGxlIHZhcmlhbnRzIHdpdGhvdXQgY29uZGl0aW9uLCBiZWNhdXNlIG9ubHkgdGhlIGZpcnN0IG9uZSBpbiB0aGUgbGlzdFxuICAgIC8vICh0aGUgb25lIHdpdGggdGhlIGxvd2VzdCBpbmRleCkgd2lsbCBldmVyIGJlIHNlbGVjdGVkLlxuICAgIGlmICh1aVZhcmlhbnRzV2l0aG91dENvbmRpdGlvbi5sZW5ndGggPiAxKSB7XG4gICAgICB0aHJvdyBFcnJvcignVG9vIG1hbnkgVUlzIHdpdGhvdXQgYSBjb25kaXRpb246IFlvdSBjYW5ub3QgaGF2ZSBtb3JlIHRoYW4gb25lIGRlZmF1bHQgVUknKTtcbiAgICB9XG4gICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIGRlZmF1bHQgVUkgdmFyaWFudCwgaWYgZGVmaW5lZCwgaXMgYXQgdGhlIGVuZCBvZiB0aGUgbGlzdCAobGFzdCBpbmRleClcbiAgICAvLyBJZiBpdCBjb21lcyBlYXJsaWVyLCB0aGUgdmFyaWFudHMgd2l0aCBjb25kaXRpb25zIHRoYXQgY29tZSBhZnRlcndhcmRzIHdpbGwgbmV2ZXIgYmUgc2VsZWN0ZWQgYmVjYXVzZSB0aGVcbiAgICAvLyBkZWZhdWx0IHZhcmlhbnQgd2l0aG91dCBhIGNvbmRpdGlvbiBhbHdheXMgZXZhbHVhdGVzIHRvICd0cnVlJ1xuICAgIGlmICh1aVZhcmlhbnRzV2l0aG91dENvbmRpdGlvbi5sZW5ndGggPiAwXG4gICAgICAmJiB1aVZhcmlhbnRzV2l0aG91dENvbmRpdGlvblswXSAhPT0gdGhpcy51aVZhcmlhbnRzW3RoaXMudWlWYXJpYW50cy5sZW5ndGggLSAxXSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgVUkgdmFyaWFudCBvcmRlcjogdGhlIGRlZmF1bHQgVUkgKHdpdGhvdXQgY29uZGl0aW9uKSBtdXN0IGJlIGF0IHRoZSBlbmQgb2YgdGhlIGxpc3QnKTtcbiAgICB9XG5cbiAgICBsZXQgYWRTdGFydGVkRXZlbnQ6IEFkRXZlbnQgPSBudWxsOyAvLyBrZWVwIHRoZSBldmVudCBzdG9yZWQgaGVyZSBkdXJpbmcgYWQgcGxheWJhY2tcblxuICAgIC8vIER5bmFtaWNhbGx5IHNlbGVjdCBhIFVJIHZhcmlhbnQgdGhhdCBtYXRjaGVzIHRoZSBjdXJyZW50IFVJIGNvbmRpdGlvbi5cbiAgICBsZXQgcmVzb2x2ZVVpVmFyaWFudCA9IChldmVudDogUGxheWVyRXZlbnRCYXNlKSA9PiB7XG4gICAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgQWRTdGFydGVkIGV2ZW50IGRhdGEgaXMgcGVyc2lzdGVkIHRocm91Z2ggYWQgcGxheWJhY2sgaW4gY2FzZSBvdGhlciBldmVudHMgaGFwcGVuXG4gICAgICAvLyBpbiB0aGUgbWVhbnRpbWUsIGUuZy4gcGxheWVyIHJlc2l6ZS4gV2UgbmVlZCB0byBzdG9yZSB0aGlzIGRhdGEgYmVjYXVzZSB0aGVyZSBpcyBubyBvdGhlciB3YXkgdG8gZmluZCBvdXRcbiAgICAgIC8vIGFkIGRldGFpbHMgd2hpbGUgYW4gYWQgaXMgcGxheWluZyAoaW4gdjguMCBhdCBsZWFzdDsgZnJvbSB2OC4xIHRoZXJlIHdpbGwgYmUgYWRzLmdldEFjdGl2ZUFkKCkpLlxuICAgICAgLy8gRXhpc3RpbmcgZXZlbnQgZGF0YSBzaWduYWxzIHRoYXQgYW4gYWQgaXMgY3VycmVudGx5IGFjdGl2ZSAoaW5zdGVhZCBvZiBhZHMuaXNMaW5lYXJBZEFjdGl2ZSgpKS5cbiAgICAgIGlmIChldmVudCAhPSBudWxsKSB7XG4gICAgICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgICAgIC8vIFRoZSBhZHMgVUkgaXMgc2hvd24gdXBvbiB0aGUgZmlyc3QgQWRTdGFydGVkIGV2ZW50LiBTdWJzZXF1ZW50IEFkU3RhcnRlZCBldmVudHMgd2l0aGluIGFuIGFkIGJyZWFrXG4gICAgICAgICAgLy8gd2lsbCBub3QgY2hhbmdlIHRoZSBjb25kaXRpb24gY29udGV4dCBhbmQgdGh1cyBub3QgbGVhZCB0byB1bmRlc2lyZWQgVUkgdmFyaWFudCByZXNvbHZpbmcuXG4gICAgICAgICAgLy8gVGhlIGFkcyBVSSBpcyBzaG93biB1cG9uIEFkU3RhcnRlZCBpbnN0ZWFkIG9mIEFkQnJlYWtTdGFydGVkIGJlY2F1c2UgdGhlcmUgY2FuIGJlIGEgbG9hZGluZyBkZWxheVxuICAgICAgICAgIC8vIGJldHdlZW4gdGhlc2UgdHdvIGV2ZW50cyBpbiB0aGUgcGxheWVyLCBhbmQgdGhlIEFkQnJlYWtTdGFydGVkIGV2ZW50IGRvZXMgbm90IGNhcnJ5IGFueSBtZXRhZGF0YSB0b1xuICAgICAgICAgIC8vIGluaXRpYWxpemUgdGhlIGFkcyBVSSwgc28gaXQgd291bGQgYmUgcmVuZGVyZWQgaW4gYW4gdW5pbml0aWFsaXplZCBzdGF0ZSBmb3IgYSBjZXJ0YWluIGFtb3VudCBvZiB0aW1lLlxuICAgICAgICAgIC8vIFRPRE8gc2hvdyBhZHMgVUkgdXBvbiBBZEJyZWFrU3RhcnRlZCBhbmQgZGlzcGxheSBsb2FkaW5nIG92ZXJsYXkgYmV0d2VlbiBBZEJyZWFrU3RhcnRlZCBhbmQgZmlyc3QgQWRTdGFydGVkXG4gICAgICAgICAgLy8gVE9ETyBkaXNwbGF5IGxvYWRpbmcgb3ZlcmxheSBiZXR3ZWVuIEFkRmluaXNoZWQgYW5kIG5leHQgQWRTdGFydGVkXG4gICAgICAgICAgY2FzZSBwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BZFN0YXJ0ZWQ6XG4gICAgICAgICAgICBhZFN0YXJ0ZWRFdmVudCA9IGV2ZW50IGFzIEFkRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAvLyBUaGUgYWRzIFVJIGlzIGhpZGRlbiBvbmx5IHdoZW4gdGhlIGFkIGJyZWFrIGlzIGZpbmlzaGVkLCBpLmUuIG5vdCBvbiBBZEZpbmlzaGVkIGV2ZW50cy4gVGhpcyB3YXkgd2Uga2VlcFxuICAgICAgICAgIC8vIHRoZSBhZHMgVUkgdmFyaWFudCBhY3RpdmUgdGhyb3VnaG91dCBhbiBhZCBicmVhaywgYXMgcmVhY3RpbmcgdG8gQWRGaW5pc2hlZCB3b3VsZCBsZWFkIHRvIHVuZGVzaXJlZCBVSVxuICAgICAgICAgIC8vIHZhcmlhbnQgc3dpdGNoaW5nIGJldHdlZW4gdHdvIGFkcyBpbiBhbiBhZCBicmVhaywgZS5nLiBhZHMgVUkgLT4gQWRGaW5pc2hlZCAtPiBjb250ZW50IFVJIC0+XG4gICAgICAgICAgLy8gQWRTdGFydGVkIC0+IGFkcyBVSS5cbiAgICAgICAgICBjYXNlIHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkQnJlYWtGaW5pc2hlZDpcbiAgICAgICAgICAgIGFkU3RhcnRlZEV2ZW50ID0gbnVsbDtcbiAgICAgICAgICAgIC8vIFdoZW4gc3dpdGNoaW5nIHRvIGEgdmFyaWFudCBmb3IgdGhlIGZpcnN0IHRpbWUsIGEgY29uZmlnLmV2ZW50cy5vblVwZGF0ZWQgZXZlbnQgaXMgZmlyZWQgdG8gdHJpZ2dlciBhIFVJXG4gICAgICAgICAgICAvLyB1cGRhdGUgb2YgdGhlIG5ldyB2YXJpYW50LCBiZWNhdXNlIG1vc3QgY29tcG9uZW50cyBzdWJzY3JpYmUgdG8gdGhpcyBldmVudCB0byB1cGRhdGUgdGhlbXNlbHZlcy4gV2hlblxuICAgICAgICAgICAgLy8gc3dpdGNoaW5nIHRvIHRoZSBhZHMgVUkgb24gdGhlIGZpcnN0IEFkU3RhcnRlZCwgYWxsIFVJIHZhcmlhbnRzIHVwZGF0ZSB0aGVtc2VsdmVzIHdpdGggdGhlIGFkIGRhdGEsIHNvXG4gICAgICAgICAgICAvLyB3aGVuIHN3aXRjaGluZyBiYWNrIHRvIHRoZSBcIm5vcm1hbFwiIFVJIGl0IHdpbGwgY2FycnkgcHJvcGVydGllcyBvZiB0aGUgYWQgaW5zdGVhZCBvZiB0aGUgbWFpbiBjb250ZW50LlxuICAgICAgICAgICAgLy8gV2UgdGh1cyBmaXJlIHRoaXMgZXZlbnQgaGVyZSB0byBmb3JjZSBhbiBVSSB1cGRhdGUgd2l0aCB0aGUgcHJvcGVydGllcyBvZiB0aGUgbWFpbiBjb250ZW50LiBUaGlzIGlzXG4gICAgICAgICAgICAvLyBiYXNpY2FsbHkgYSBoYWNrIGJlY2F1c2UgdGhlIGNvbmZpZy5ldmVudHMub25VcGRhdGVkIGV2ZW50IGlzIGFidXNlZCBpbiBtYW55IHBsYWNlcyBhbmQgbm90IGp1c3QgdXNlZFxuICAgICAgICAgICAgLy8gZm9yIGNvbmZpZyB1cGRhdGVzIChlLmcuIGFkZGluZyBhIG1hcmtlciB0byB0aGUgc2Vla2JhcikuXG4gICAgICAgICAgICAvLyBUT0RPIGludHJvZHVjZSBhbiBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIHBsYXliYWNrIGNvbnRlbnQgaXMgdXBkYXRlZCwgYSBzd2l0Y2ggdG8vZnJvbSBhZHNcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmV2ZW50cy5vblVwZGF0ZWQuZGlzcGF0Y2godGhpcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAvLyBXaGVuIGEgbmV3IHNvdXJjZSBpcyBsb2FkZWQgZHVyaW5nIGFkIHBsYXliYWNrLCB0aGVyZSB3aWxsIGJlIG5vIEFkKEJyZWFrKUZpbmlzaGVkIGV2ZW50XG4gICAgICAgICAgY2FzZSBwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VMb2FkZWQ6XG4gICAgICAgICAgY2FzZSBwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VVbmxvYWRlZDpcbiAgICAgICAgICAgIGFkU3RhcnRlZEV2ZW50ID0gbnVsbDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIERldGVjdCBpZiBhbiBhZCBoYXMgc3RhcnRlZFxuICAgICAgbGV0IGlzQWQgPSBhZFN0YXJ0ZWRFdmVudCAhPSBudWxsO1xuICAgICAgbGV0IGFkUmVxdWlyZXNVaSA9IGZhbHNlO1xuICAgICAgaWYgKGlzQWQpIHtcbiAgICAgICAgbGV0IGFkID0gYWRTdGFydGVkRXZlbnQuYWQ7XG4gICAgICAgIC8vIGZvciBub3cgb25seSBsaW5lYXIgYWRzIGNhbiByZXF1ZXN0IGEgVUlcbiAgICAgICAgaWYgKGFkLmlzTGluZWFyKSB7XG4gICAgICAgICAgbGV0IGxpbmVhckFkID0gYWQgYXMgTGluZWFyQWQ7XG4gICAgICAgICAgYWRSZXF1aXJlc1VpID0gbGluZWFyQWQudWlDb25maWcgJiYgbGluZWFyQWQudWlDb25maWcucmVxdWVzdHNVaSB8fCBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYWRSZXF1aXJlc1VpKSB7XG4gICAgICAgIC8vIHdlIGRpc3BhdGNoIG9uVXBkYXRlZCBldmVudCBiZWNhdXNlIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSBhZEJyZWFrcyBmb3Igc2FtZSBwb3NpdGlvblxuICAgICAgICAvLyBgUGxheWAgYW5kIGBQbGF5aW5nYCBldmVudHMgd2lsbCBub3QgYmUgZGlzcGF0Y2hlZCB3aGljaCB3aWxsIGNhdXNlIGBQbGF5YmFja0J1dHRvbmAgc3RhdGVcbiAgICAgICAgLy8gdG8gYmUgb3V0IG9mIHN5bmNcbiAgICAgICAgdGhpcy5jb25maWcuZXZlbnRzLm9uVXBkYXRlZC5kaXNwYXRjaCh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZXNvbHZlVWlWYXJpYW50KHtcbiAgICAgICAgaXNBZDogaXNBZCxcbiAgICAgICAgYWRSZXF1aXJlc1VpOiBhZFJlcXVpcmVzVWksXG4gICAgICB9LCAoY29udGV4dCkgPT4ge1xuICAgICAgICAvLyBJZiB0aGlzIGlzIGFuIGFkIFVJLCB3ZSBuZWVkIHRvIHJlbGF5IHRoZSBzYXZlZCBPTl9BRF9TVEFSVEVEIGV2ZW50IGRhdGEgc28gYWQgY29tcG9uZW50cyBjYW4gY29uZmlndXJlXG4gICAgICAgIC8vIHRoZW1zZWx2ZXMgZm9yIHRoZSBjdXJyZW50IGFkLlxuICAgICAgICBpZiAoY29udGV4dC5pc0FkKSB7XG4gICAgICAgICAgLyogUmVsYXkgdGhlIE9OX0FEX1NUQVJURUQgZXZlbnQgdG8gdGhlIGFkcyBVSVxuICAgICAgICAgICAqXG4gICAgICAgICAgICogQmVjYXVzZSB0aGUgYWRzIFVJIGlzIGluaXRpYWxpemVkIGluIHRoZSBPTl9BRF9TVEFSVEVEIGhhbmRsZXIsIGkuZS4gd2hlbiB0aGUgT05fQURfU1RBUlRFRCBldmVudCBoYXNcbiAgICAgICAgICAgKiBhbHJlYWR5IGJlZW4gZmlyZWQsIGNvbXBvbmVudHMgaW4gdGhlIGFkcyBVSSB0aGF0IGxpc3RlbiBmb3IgdGhlIE9OX0FEX1NUQVJURUQgZXZlbnQgbmV2ZXIgcmVjZWl2ZSBpdC5cbiAgICAgICAgICAgKiBTaW5jZSB0aGlzIGNhbiBicmVhayBmdW5jdGlvbmFsaXR5IG9mIGNvbXBvbmVudHMgdGhhdCByZWx5IG9uIHRoaXMgZXZlbnQsIHdlIHJlbGF5IHRoZSBldmVudCB0byB0aGVcbiAgICAgICAgICAgKiBhZHMgVUkgY29tcG9uZW50cyB3aXRoIHRoZSBmb2xsb3dpbmcgY2FsbC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICB0aGlzLmN1cnJlbnRVaS5nZXRXcmFwcGVkUGxheWVyKCkuZmlyZUV2ZW50SW5VSSh0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkU3RhcnRlZCwgYWRTdGFydGVkRXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gTGlzdGVuIHRvIHRoZSBmb2xsb3dpbmcgZXZlbnRzIHRvIHRyaWdnZXIgVUkgdmFyaWFudCByZXNvbHV0aW9uXG4gICAgaWYgKHRoaXMuY29uZmlnLmF1dG9VaVZhcmlhbnRSZXNvbHZlKSB7XG4gICAgICB0aGlzLm1hbmFnZXJQbGF5ZXJXcmFwcGVyLmdldFBsYXllcigpLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU291cmNlTG9hZGVkLCByZXNvbHZlVWlWYXJpYW50KTtcbiAgICAgIHRoaXMubWFuYWdlclBsYXllcldyYXBwZXIuZ2V0UGxheWVyKCkub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VVbmxvYWRlZCwgcmVzb2x2ZVVpVmFyaWFudCk7XG4gICAgICB0aGlzLm1hbmFnZXJQbGF5ZXJXcmFwcGVyLmdldFBsYXllcigpLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheSwgcmVzb2x2ZVVpVmFyaWFudCk7XG4gICAgICB0aGlzLm1hbmFnZXJQbGF5ZXJXcmFwcGVyLmdldFBsYXllcigpLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGF1c2VkLCByZXNvbHZlVWlWYXJpYW50KTtcbiAgICAgIHRoaXMubWFuYWdlclBsYXllcldyYXBwZXIuZ2V0UGxheWVyKCkub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BZFN0YXJ0ZWQsIHJlc29sdmVVaVZhcmlhbnQpO1xuICAgICAgdGhpcy5tYW5hZ2VyUGxheWVyV3JhcHBlci5nZXRQbGF5ZXIoKS5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkQnJlYWtGaW5pc2hlZCwgcmVzb2x2ZVVpVmFyaWFudCk7XG4gICAgICB0aGlzLm1hbmFnZXJQbGF5ZXJXcmFwcGVyLmdldFBsYXllcigpLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheWVyUmVzaXplZCwgcmVzb2x2ZVVpVmFyaWFudCk7XG4gICAgICB0aGlzLm1hbmFnZXJQbGF5ZXJXcmFwcGVyLmdldFBsYXllcigpLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVmlld01vZGVDaGFuZ2VkLCByZXNvbHZlVWlWYXJpYW50KTtcbiAgICB9XG5cbiAgICB0aGlzLmZvY3VzVmlzaWJpbGl0eVRyYWNrZXIgPSBuZXcgRm9jdXNWaXNpYmlsaXR5VHJhY2tlcigne3tQUkVGSVh9fScpO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgVUlcbiAgICByZXNvbHZlVWlWYXJpYW50KG51bGwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4cG9zZXMgaTE4bi5nZXRMb2NhbGl6ZXIoKSBmdW5jdGlvblxuICAgKiBAcmV0dXJucyB7STE4bkFwaS5nZXRMb2NhbGl6ZXIoKX1cbiAgICovXG4gIHN0YXRpYyBsb2NhbGl6ZTxWIGV4dGVuZHMgQ3VzdG9tVm9jYWJ1bGFyeTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+Pj4oa2V5OiBrZXlvZiBWKSB7XG4gICAgcmV0dXJuIGkxOG4uZ2V0TG9jYWxpemVyKGtleSk7XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZSBjb25maWd1cmF0aW9uIHRvIHN1cHBvcnQgQ3VzdG9tIFVJIGxhbmd1YWdlc1xuICAgKiBkZWZhdWx0IGxhbmd1YWdlOiAnZW4nXG4gICAqL1xuICBzdGF0aWMgc2V0TG9jYWxpemF0aW9uQ29uZmlnKGxvY2FsaXphdGlvbkNvbmZpZzogTG9jYWxpemF0aW9uQ29uZmlnKSB7XG4gICAgaTE4bi5zZXRDb25maWcobG9jYWxpemF0aW9uQ29uZmlnKTtcbiAgfVxuXG4gIGdldENvbmZpZygpOiBVSUNvbmZpZyB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxpc3Qgb2YgVUkgdmFyaWFudHMgYXMgcGFzc2VkIGludG8gdGhlIGNvbnN0cnVjdG9yIG9mIHtAbGluayBVSU1hbmFnZXJ9LlxuICAgKiBAcmV0dXJucyB7VUlWYXJpYW50W119IHRoZSBsaXN0IG9mIGF2YWlsYWJsZSBVSSB2YXJpYW50c1xuICAgKi9cbiAgZ2V0VWlWYXJpYW50cygpOiBVSVZhcmlhbnRbXSB7XG4gICAgcmV0dXJuIHRoaXMudWlWYXJpYW50cztcbiAgfVxuXG4gIC8qKlxuICAgKiBTd2l0Y2hlcyB0byBhIFVJIHZhcmlhbnQgZnJvbSB0aGUgbGlzdCByZXR1cm5lZCBieSB7QGxpbmsgZ2V0VWlWYXJpYW50c30uXG4gICAqIEBwYXJhbSB7VUlWYXJpYW50fSB1aVZhcmlhbnQgdGhlIFVJIHZhcmlhbnQgdG8gc3dpdGNoIHRvXG4gICAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gb25TaG93IGEgY2FsbGJhY2sgdGhhdCBpcyBleGVjdXRlZCBqdXN0IGJlZm9yZSB0aGUgbmV3IFVJIHZhcmlhbnQgaXMgc2hvd25cbiAgICovXG4gIHN3aXRjaFRvVWlWYXJpYW50KHVpVmFyaWFudDogVUlWYXJpYW50LCBvblNob3c/OiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgbGV0IHVpVmFyaWFudEluZGV4ID0gdGhpcy51aVZhcmlhbnRzLmluZGV4T2YodWlWYXJpYW50KTtcblxuICAgIGNvbnN0IHByZXZpb3VzVWkgPSB0aGlzLmN1cnJlbnRVaTtcbiAgICBjb25zdCBuZXh0VWk6IEludGVybmFsVUlJbnN0YW5jZU1hbmFnZXIgPSB0aGlzLnVpSW5zdGFuY2VNYW5hZ2Vyc1t1aVZhcmlhbnRJbmRleF07XG4gICAgLy8gRGV0ZXJtaW5lIGlmIHRoZSBVSSB2YXJpYW50IGlzIGNoYW5naW5nXG4gICAgLy8gT25seSBpZiB0aGUgVUkgdmFyaWFudCBpcyBjaGFuZ2luZywgd2UgbmVlZCB0byBkbyBzb21lIHN0dWZmLiBFbHNlIHdlIGp1c3QgbGVhdmUgZXZlcnl0aGluZyBhcy1pcy5cbiAgICBpZiAobmV4dFVpID09PSB0aGlzLmN1cnJlbnRVaSkge1xuICAgICAgcmV0dXJuO1xuICAgICAgLy8gY29uc29sZS5sb2coJ3N3aXRjaGVkIGZyb20gJywgdGhpcy5jdXJyZW50VWkgPyB0aGlzLmN1cnJlbnRVaS5nZXRVSSgpIDogJ25vbmUnLFxuICAgICAgLy8gICAnIHRvICcsIG5leHRVaSA/IG5leHRVaS5nZXRVSSgpIDogJ25vbmUnKTtcbiAgICB9XG5cbiAgICAvLyBIaWRlIHRoZSBjdXJyZW50bHkgYWN0aXZlIFVJIHZhcmlhbnRcbiAgICBpZiAodGhpcy5jdXJyZW50VWkpIHtcbiAgICAgIHRoaXMuY3VycmVudFVpLmdldFVJKCkuaGlkZSgpO1xuICAgIH1cblxuICAgIC8vIEFzc2lnbiB0aGUgbmV3IFVJIHZhcmlhbnQgYXMgY3VycmVudCBVSVxuICAgIHRoaXMuY3VycmVudFVpID0gbmV4dFVpO1xuXG4gICAgLy8gV2hlbiB3ZSBzd2l0Y2ggdG8gYSBkaWZmZXJlbnQgVUkgaW5zdGFuY2UsIHRoZXJlJ3Mgc29tZSBhZGRpdGlvbmFsIHN0dWZmIHRvIG1hbmFnZS4gSWYgd2UgZG8gbm90IHN3aXRjaFxuICAgIC8vIHRvIGFuIGluc3RhbmNlLCB3ZSdyZSBkb25lIGhlcmUuXG4gICAgaWYgKHRoaXMuY3VycmVudFVpID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQWRkIHRoZSBVSSB0byB0aGUgRE9NIChhbmQgY29uZmlndXJlIGl0KSB0aGUgZmlyc3QgdGltZSBpdCBpcyBzZWxlY3RlZFxuICAgIGlmICghdGhpcy5jdXJyZW50VWkuaXNDb25maWd1cmVkKCkpIHtcbiAgICAgIHRoaXMuYWRkVWkodGhpcy5jdXJyZW50VWkpO1xuICAgICAgLy8gZW5zdXJlIHRoYXQgdGhlIGludGVybmFsIHN0YXRlIGlzIHJlYWR5IGZvciB0aGUgdXBjb21pbmcgc2hvdyBjYWxsXG4gICAgICBpZiAoIXRoaXMuY3VycmVudFVpLmdldFVJKCkuaXNIaWRkZW4oKSkge1xuICAgICAgICB0aGlzLmN1cnJlbnRVaS5nZXRVSSgpLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9uU2hvdykge1xuICAgICAgb25TaG93KCk7XG4gICAgfVxuICAgIHRoaXMuY3VycmVudFVpLmdldFVJKCkuc2hvdygpO1xuICAgIHRoaXMuZXZlbnRzLm9uQWN0aXZlVWlDaGFuZ2VkLmRpc3BhdGNoKHRoaXMsIHsgcHJldmlvdXNVaSwgY3VycmVudFVpOiBuZXh0VWkgfSk7XG4gIH1cblxuICAvKipcbiAgICogVHJpZ2dlcnMgYSBVSSB2YXJpYW50IHN3aXRjaCBhcyB0cmlnZ2VyZWQgYnkgZXZlbnRzIHdoZW4gYXV0b21hdGljIHN3aXRjaGluZyBpcyBlbmFibGVkLiBJdCBhbGxvd3MgdG8gb3ZlcndyaXRlXG4gICAqIHByb3BlcnRpZXMgb2YgdGhlIHtAbGluayBVSUNvbmRpdGlvbkNvbnRleHR9LlxuICAgKiBAcGFyYW0ge1BhcnRpYWw8VUlDb25kaXRpb25Db250ZXh0Pn0gY29udGV4dCBhbiBvcHRpb25hbCBzZXQgb2YgcHJvcGVydGllcyB0aGF0IG92ZXJ3cml0ZSBwcm9wZXJ0aWVzIG9mIHRoZVxuICAgKiAgIGF1dG9tYXRpY2FsbHkgZGV0ZXJtaW5lZCBjb250ZXh0XG4gICAqIEBwYXJhbSB7KGNvbnRleHQ6IFVJQ29uZGl0aW9uQ29udGV4dCkgPT4gdm9pZH0gb25TaG93IGEgY2FsbGJhY2sgdGhhdCBpcyBleGVjdXRlZCBqdXN0IGJlZm9yZSB0aGUgbmV3IFVJIHZhcmlhbnRcbiAgICogICBpcyBzaG93biAoaWYgYSBzd2l0Y2ggaXMgaGFwcGVuaW5nKVxuICAgKi9cbiAgcmVzb2x2ZVVpVmFyaWFudChjb250ZXh0OiBQYXJ0aWFsPFVJQ29uZGl0aW9uQ29udGV4dD4gPSB7fSwgb25TaG93PzogKGNvbnRleHQ6IFVJQ29uZGl0aW9uQ29udGV4dCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIC8vIERldGVybWluZSB0aGUgY3VycmVudCBjb250ZXh0IGZvciB3aGljaCB0aGUgVUkgdmFyaWFudCB3aWxsIGJlIHJlc29sdmVkXG4gICAgY29uc3QgZGVmYXVsdENvbnRleHQ6IFVJQ29uZGl0aW9uQ29udGV4dCA9IHtcbiAgICAgIGlzQWQ6IGZhbHNlLFxuICAgICAgYWRSZXF1aXJlc1VpOiBmYWxzZSxcbiAgICAgIGlzRnVsbHNjcmVlbjogdGhpcy5wbGF5ZXIuZ2V0Vmlld01vZGUoKSA9PT0gdGhpcy5wbGF5ZXIuZXhwb3J0cy5WaWV3TW9kZS5GdWxsc2NyZWVuLFxuICAgICAgaXNNb2JpbGU6IEJyb3dzZXJVdGlscy5pc01vYmlsZSxcbiAgICAgIGlzUGxheWluZzogdGhpcy5wbGF5ZXIuaXNQbGF5aW5nKCksXG4gICAgICB3aWR0aDogdGhpcy51aUNvbnRhaW5lckVsZW1lbnQud2lkdGgoKSxcbiAgICAgIGRvY3VtZW50V2lkdGg6IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGgsXG4gICAgfTtcblxuICAgIC8vIE92ZXJ3cml0ZSBwcm9wZXJ0aWVzIG9mIHRoZSBkZWZhdWx0IGNvbnRleHQgd2l0aCBwYXNzZWQgaW4gY29udGV4dCBwcm9wZXJ0aWVzXG4gICAgY29uc3Qgc3dpdGNoaW5nQ29udGV4dCA9IHsgLi4uZGVmYXVsdENvbnRleHQsIC4uLmNvbnRleHQgfTtcblxuICAgIC8vIEZpcmUgdGhlIGV2ZW50IGFuZCBhbGxvdyBtb2RpZmljYXRpb24gb2YgdGhlIGNvbnRleHQgYmVmb3JlIGl0IGlzIHVzZWQgdG8gcmVzb2x2ZSB0aGUgVUkgdmFyaWFudFxuICAgIHRoaXMuZXZlbnRzLm9uVWlWYXJpYW50UmVzb2x2ZS5kaXNwYXRjaCh0aGlzLCBzd2l0Y2hpbmdDb250ZXh0KTtcblxuICAgIGxldCBuZXh0VWlWYXJpYW50OiBVSVZhcmlhbnQgPSBudWxsO1xuXG4gICAgLy8gU2VsZWN0IG5ldyBVSSB2YXJpYW50XG4gICAgLy8gSWYgbm8gdmFyaWFudCBjb25kaXRpb24gaXMgZnVsZmlsbGVkLCB3ZSBzd2l0Y2ggdG8gKm5vKiBVSVxuICAgIGZvciAobGV0IHVpVmFyaWFudCBvZiB0aGlzLnVpVmFyaWFudHMpIHtcbiAgICAgIGNvbnN0IG1hdGNoZXNDb25kaXRpb24gPSB1aVZhcmlhbnQuY29uZGl0aW9uID09IG51bGwgfHwgdWlWYXJpYW50LmNvbmRpdGlvbihzd2l0Y2hpbmdDb250ZXh0KSA9PT0gdHJ1ZTtcbiAgICAgIGlmIChuZXh0VWlWYXJpYW50ID09IG51bGwgJiYgbWF0Y2hlc0NvbmRpdGlvbikge1xuICAgICAgICBuZXh0VWlWYXJpYW50ID0gdWlWYXJpYW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaGlkZSBhbGwgVUlzIGJlc2lkZXMgdGhlIG9uZSB3aGljaCBzaG91bGQgYmUgYWN0aXZlXG4gICAgICAgIHVpVmFyaWFudC51aS5oaWRlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zd2l0Y2hUb1VpVmFyaWFudChuZXh0VWlWYXJpYW50LCAoKSA9PiB7XG4gICAgICBpZiAob25TaG93KSB7XG4gICAgICAgIG9uU2hvdyhzd2l0Y2hpbmdDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkVWkodWk6IEludGVybmFsVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBsZXQgZG9tID0gdWkuZ2V0VUkoKS5nZXREb21FbGVtZW50KCk7XG4gICAgbGV0IHBsYXllciA9IHVpLmdldFdyYXBwZWRQbGF5ZXIoKTtcblxuICAgIHVpLmNvbmZpZ3VyZUNvbnRyb2xzKCk7XG4gICAgLyogQXBwZW5kIHRoZSBVSSBET00gYWZ0ZXIgY29uZmlndXJhdGlvbiB0byBhdm9pZCBDU1MgdHJhbnNpdGlvbnMgYXQgaW5pdGlhbGl6YXRpb25cbiAgICAgKiBFeGFtcGxlOiBDb21wb25lbnRzIGFyZSBoaWRkZW4gZHVyaW5nIGNvbmZpZ3VyYXRpb24gYW5kIHRoZXNlIGhpZGVzIG1heSB0cmlnZ2VyIENTUyB0cmFuc2l0aW9ucyB0aGF0IGFyZVxuICAgICAqIHVuZGVzaXJhYmxlIGF0IHRoaXMgdGltZS4gKi9cbiAgICB0aGlzLnVpQ29udGFpbmVyRWxlbWVudC5hcHBlbmQoZG9tKTtcblxuICAgIC8vIFdoZW4gdGhlIFVJIGlzIGxvYWRlZCBhZnRlciBhIHNvdXJjZSB3YXMgbG9hZGVkLCB3ZSBuZWVkIHRvIHRlbGwgdGhlIGNvbXBvbmVudHMgdG8gaW5pdGlhbGl6ZSB0aGVtc2VsdmVzXG4gICAgaWYgKHBsYXllci5nZXRTb3VyY2UoKSkge1xuICAgICAgdGhpcy5jb25maWcuZXZlbnRzLm9uVXBkYXRlZC5kaXNwYXRjaCh0aGlzKTtcbiAgICB9XG5cbiAgICAvLyBGaXJlIG9uQ29uZmlndXJlZCBhZnRlciBVSSBET00gZWxlbWVudHMgYXJlIHN1Y2Nlc3NmdWxseSBhZGRlZC4gV2hlbiBmaXJlZCBpbW1lZGlhdGVseSwgdGhlIERPTSBlbGVtZW50c1xuICAgIC8vIG1pZ2h0IG5vdCBiZSBmdWxseSBjb25maWd1cmVkIGFuZCBlLmcuIGRvIG5vdCBoYXZlIGEgc2l6ZS5cbiAgICAvLyBodHRwczovL3N3aXplYy5jb20vYmxvZy9ob3ctdG8tcHJvcGVybHktd2FpdC1mb3ItZG9tLWVsZW1lbnRzLXRvLXNob3ctdXAtaW4tbW9kZXJuLWJyb3dzZXJzL3N3aXplYy82NjYzXG4gICAgaWYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7IHVpLm9uQ29uZmlndXJlZC5kaXNwYXRjaCh1aS5nZXRVSSgpKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElFOSBmYWxsYmFja1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7IHVpLm9uQ29uZmlndXJlZC5kaXNwYXRjaCh1aS5nZXRVSSgpKTsgfSwgMCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZWxlYXNlVWkodWk6IEludGVybmFsVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICB1aS5yZWxlYXNlQ29udHJvbHMoKTtcblxuICAgIGNvbnN0IHVpQ29udGFpbmVyID0gdWkuZ2V0VUkoKTtcbiAgICBpZiAodWlDb250YWluZXIuaGFzRG9tRWxlbWVudCgpKSB7XG4gICAgICB1aUNvbnRhaW5lci5nZXREb21FbGVtZW50KCkucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgdWkuY2xlYXJFdmVudEhhbmRsZXJzKCk7XG4gIH1cblxuICByZWxlYXNlKCk6IHZvaWQge1xuICAgIGZvciAobGV0IHVpSW5zdGFuY2VNYW5hZ2VyIG9mIHRoaXMudWlJbnN0YW5jZU1hbmFnZXJzKSB7XG4gICAgICB0aGlzLnJlbGVhc2VVaSh1aUluc3RhbmNlTWFuYWdlcik7XG4gICAgfVxuICAgIHRoaXMubWFuYWdlclBsYXllcldyYXBwZXIuY2xlYXJFdmVudEhhbmRsZXJzKCk7XG4gICAgdGhpcy5mb2N1c1Zpc2liaWxpdHlUcmFja2VyLnJlbGVhc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyBqdXN0IGJlZm9yZSBVSSB2YXJpYW50cyBhcmUgYWJvdXQgdG8gYmUgcmVzb2x2ZWQgYW5kIHRoZSBVSSB2YXJpYW50IGlzIHBvc3NpYmx5IHN3aXRjaGVkLiBJdCBpcyBmaXJlZCB3aGVuXG4gICAqIHRoZSBzd2l0Y2ggaXMgdHJpZ2dlcmVkIGZyb20gYW4gYXV0b21hdGljIHN3aXRjaCBhbmQgd2hlbiBjYWxsaW5nIHtAbGluayByZXNvbHZlVWlWYXJpYW50fS5cbiAgICogQ2FuIGJlIHVzZWQgdG8gbW9kaWZ5IHRoZSB7QGxpbmsgVUlDb25kaXRpb25Db250ZXh0fSBiZWZvcmUgcmVzb2x2aW5nIGlzIGRvbmUuXG4gICAqIEByZXR1cm5zIHtFdmVudERpc3BhdGNoZXI8VUlNYW5hZ2VyLCBVSUNvbmRpdGlvbkNvbnRleHQ+fVxuICAgKi9cbiAgZ2V0IG9uVWlWYXJpYW50UmVzb2x2ZSgpOiBFdmVudERpc3BhdGNoZXI8VUlNYW5hZ2VyLCBVSUNvbmRpdGlvbkNvbnRleHQ+IHtcbiAgICByZXR1cm4gdGhpcy5ldmVudHMub25VaVZhcmlhbnRSZXNvbHZlO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIGFmdGVyIHRoZSBVSU1hbmFnZXIgaGFzIHN3aXRjaGVkIHRvIGEgZGlmZmVyZW50IFVJIHZhcmlhbnQuXG4gICAqIEByZXR1cm5zIHtFdmVudERpc3BhdGNoZXI8VUlNYW5hZ2VyLCBBY3RpdmVVaUNoYW5nZWRBcmdzPn1cbiAgICovXG4gIGdldCBvbkFjdGl2ZVVpQ2hhbmdlZCgpOiBFdmVudERpc3BhdGNoZXI8VUlNYW5hZ2VyLCBBY3RpdmVVaUNoYW5nZWRBcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRzLm9uQWN0aXZlVWlDaGFuZ2VkO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IGFjdGl2ZSB7QGxpbmsgVUlJbnN0YW5jZU1hbmFnZXJ9LlxuICAgKi9cbiAgZ2V0IGFjdGl2ZVVpKCk6IFVJSW5zdGFuY2VNYW5hZ2VyIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50VWk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbGlzdCBvZiBhbGwgYWRkZWQgbWFya2VycyBpbiB1bmRlZmluZWQgb3JkZXIuXG4gICAqL1xuICBnZXRUaW1lbGluZU1hcmtlcnMoKTogVGltZWxpbmVNYXJrZXJbXSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLm1ldGFkYXRhLm1hcmtlcnM7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIG1hcmtlciB0byB0aGUgdGltZWxpbmUuIERvZXMgbm90IGNoZWNrIGZvciBkdXBsaWNhdGVzL292ZXJsYXBzIGF0IHRoZSBgdGltZWAuXG4gICAqL1xuICBhZGRUaW1lbGluZU1hcmtlcih0aW1lbGluZU1hcmtlcjogVGltZWxpbmVNYXJrZXIpOiB2b2lkIHtcbiAgICB0aGlzLmNvbmZpZy5tZXRhZGF0YS5tYXJrZXJzLnB1c2godGltZWxpbmVNYXJrZXIpO1xuICAgIHRoaXMuY29uZmlnLmV2ZW50cy5vblVwZGF0ZWQuZGlzcGF0Y2godGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIG1hcmtlciBmcm9tIHRoZSB0aW1lbGluZSAoYnkgcmVmZXJlbmNlKSBhbmQgcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG1hcmtlciBoYXNcbiAgICogYmVlbiBwYXJ0IG9mIHRoZSB0aW1lbGluZSBhbmQgc3VjY2Vzc2Z1bGx5IHJlbW92ZWQsIG9yIGBmYWxzZWAgaWYgdGhlIG1hcmtlciBjb3VsZCBub3RcbiAgICogYmUgZm91bmQgYW5kIHRodXMgbm90IHJlbW92ZWQuXG4gICAqL1xuICByZW1vdmVUaW1lbGluZU1hcmtlcih0aW1lbGluZU1hcmtlcjogVGltZWxpbmVNYXJrZXIpOiBib29sZWFuIHtcbiAgICBpZiAoQXJyYXlVdGlscy5yZW1vdmUodGhpcy5jb25maWcubWV0YWRhdGEubWFya2VycywgdGltZWxpbmVNYXJrZXIpID09PSB0aW1lbGluZU1hcmtlcikge1xuICAgICAgdGhpcy5jb25maWcuZXZlbnRzLm9uVXBkYXRlZC5kaXNwYXRjaCh0aGlzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlZWtQcmV2aWV3QXJncyBleHRlbmRzIE5vQXJncyB7XG4gIC8qKlxuICAgKiBUaGUgdGltZWxpbmUgcG9zaXRpb24gaW4gcGVyY2VudCB3aGVyZSB0aGUgZXZlbnQgb3JpZ2luYXRlcyBmcm9tLlxuICAgKi9cbiAgcG9zaXRpb246IG51bWJlcjtcbiAgLyoqXG4gICAqIFRoZSB0aW1lbGluZSBtYXJrZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBjdXJyZW50IHBvc2l0aW9uLCBpZiBleGlzdGluZy5cbiAgICovXG4gIG1hcmtlcj86IFNlZWtCYXJNYXJrZXI7XG59XG5cbi8qKlxuICogRW5jYXBzdWxhdGVzIGZ1bmN0aW9uYWxpdHkgdG8gbWFuYWdlIGEgVUkgaW5zdGFuY2UuIFVzZWQgYnkgdGhlIHtAbGluayBVSU1hbmFnZXJ9IHRvIG1hbmFnZSBtdWx0aXBsZSBVSSBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBVSUluc3RhbmNlTWFuYWdlciB7XG4gIHByaXZhdGUgcGxheWVyV3JhcHBlcjogUGxheWVyV3JhcHBlcjtcbiAgcHJpdmF0ZSB1aTogVUlDb250YWluZXI7XG4gIHByaXZhdGUgY29uZmlnOiBJbnRlcm5hbFVJQ29uZmlnO1xuICBwcm90ZWN0ZWQgc3BhdGlhbE5hdmlnYXRpb24/OiBTcGF0aWFsTmF2aWdhdGlvbjtcblxuICBwcml2YXRlIGV2ZW50cyA9IHtcbiAgICBvbkNvbmZpZ3VyZWQ6IG5ldyBFdmVudERpc3BhdGNoZXI8VUlDb250YWluZXIsIE5vQXJncz4oKSxcbiAgICBvblNlZWs6IG5ldyBFdmVudERpc3BhdGNoZXI8U2Vla0JhciwgTm9BcmdzPigpLFxuICAgIG9uU2Vla1ByZXZpZXc6IG5ldyBFdmVudERpc3BhdGNoZXI8U2Vla0JhciwgU2Vla1ByZXZpZXdBcmdzPigpLFxuICAgIG9uU2Vla2VkOiBuZXcgRXZlbnREaXNwYXRjaGVyPFNlZWtCYXIsIE5vQXJncz4oKSxcbiAgICBvbkNvbXBvbmVudFNob3c6IG5ldyBFdmVudERpc3BhdGNoZXI8Q29tcG9uZW50PENvbXBvbmVudENvbmZpZz4sIE5vQXJncz4oKSxcbiAgICBvbkNvbXBvbmVudEhpZGU6IG5ldyBFdmVudERpc3BhdGNoZXI8Q29tcG9uZW50PENvbXBvbmVudENvbmZpZz4sIE5vQXJncz4oKSxcbiAgICBvbkNvbnRyb2xzU2hvdzogbmV3IEV2ZW50RGlzcGF0Y2hlcjxVSUNvbnRhaW5lciwgTm9BcmdzPigpLFxuICAgIG9uUHJldmlld0NvbnRyb2xzSGlkZTogbmV3IEV2ZW50RGlzcGF0Y2hlcjxVSUNvbnRhaW5lciwgQ2FuY2VsRXZlbnRBcmdzPigpLFxuICAgIG9uQ29udHJvbHNIaWRlOiBuZXcgRXZlbnREaXNwYXRjaGVyPFVJQ29udGFpbmVyLCBOb0FyZ3M+KCksXG4gICAgb25SZWxlYXNlOiBuZXcgRXZlbnREaXNwYXRjaGVyPFVJQ29udGFpbmVyLCBOb0FyZ3M+KCksXG4gIH07XG5cbiAgY29uc3RydWN0b3IocGxheWVyOiBQbGF5ZXJBUEksIHVpOiBVSUNvbnRhaW5lciwgY29uZmlnOiBJbnRlcm5hbFVJQ29uZmlnLCBzcGF0aWFsTmF2aWdhdGlvbj86IFNwYXRpYWxOYXZpZ2F0aW9uKSB7XG4gICAgdGhpcy5wbGF5ZXJXcmFwcGVyID0gbmV3IFBsYXllcldyYXBwZXIocGxheWVyKTtcbiAgICB0aGlzLnVpID0gdWk7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5zcGF0aWFsTmF2aWdhdGlvbiA9IHNwYXRpYWxOYXZpZ2F0aW9uO1xuICB9XG5cbiAgZ2V0Q29uZmlnKCk6IEludGVybmFsVUlDb25maWcge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZztcbiAgfVxuXG4gIGdldFVJKCk6IFVJQ29udGFpbmVyIHtcbiAgICByZXR1cm4gdGhpcy51aTtcbiAgfVxuXG4gIGdldFBsYXllcigpOiBQbGF5ZXJBUEkge1xuICAgIHJldHVybiB0aGlzLnBsYXllcldyYXBwZXIuZ2V0UGxheWVyKCk7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiB0aGUgVUkgaXMgZnVsbHkgY29uZmlndXJlZCBhbmQgYWRkZWQgdG8gdGhlIERPTS5cbiAgICogQHJldHVybnMge0V2ZW50RGlzcGF0Y2hlcn1cbiAgICovXG4gIGdldCBvbkNvbmZpZ3VyZWQoKTogRXZlbnREaXNwYXRjaGVyPFVJQ29udGFpbmVyLCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5ldmVudHMub25Db25maWd1cmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHdoZW4gYSBzZWVrIHN0YXJ0cy5cbiAgICogQHJldHVybnMge0V2ZW50RGlzcGF0Y2hlcn1cbiAgICovXG4gIGdldCBvblNlZWsoKTogRXZlbnREaXNwYXRjaGVyPFNlZWtCYXIsIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLmV2ZW50cy5vblNlZWs7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiB0aGUgc2VlayB0aW1lbGluZSBpcyBzY3J1YmJlZC5cbiAgICogQHJldHVybnMge0V2ZW50RGlzcGF0Y2hlcn1cbiAgICovXG4gIGdldCBvblNlZWtQcmV2aWV3KCk6IEV2ZW50RGlzcGF0Y2hlcjxTZWVrQmFyLCBTZWVrUHJldmlld0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5ldmVudHMub25TZWVrUHJldmlldztcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB3aGVuIGEgc2VlayBpcyBmaW5pc2hlZC5cbiAgICogQHJldHVybnMge0V2ZW50RGlzcGF0Y2hlcn1cbiAgICovXG4gIGdldCBvblNlZWtlZCgpOiBFdmVudERpc3BhdGNoZXI8U2Vla0JhciwgTm9BcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRzLm9uU2Vla2VkO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHdoZW4gYSBjb21wb25lbnQgaXMgc2hvd2luZy5cbiAgICogQHJldHVybnMge0V2ZW50RGlzcGF0Y2hlcn1cbiAgICovXG4gIGdldCBvbkNvbXBvbmVudFNob3coKTogRXZlbnREaXNwYXRjaGVyPENvbXBvbmVudDxDb21wb25lbnRDb25maWc+LCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5ldmVudHMub25Db21wb25lbnRTaG93O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHdoZW4gYSBjb21wb25lbnQgaXMgaGlkaW5nLlxuICAgKiBAcmV0dXJucyB7RXZlbnREaXNwYXRjaGVyfVxuICAgKi9cbiAgZ2V0IG9uQ29tcG9uZW50SGlkZSgpOiBFdmVudERpc3BhdGNoZXI8Q29tcG9uZW50PENvbXBvbmVudENvbmZpZz4sIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLmV2ZW50cy5vbkNvbXBvbmVudEhpZGU7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiB0aGUgVUkgY29udHJvbHMgYXJlIHNob3dpbmcuXG4gICAqIEByZXR1cm5zIHtFdmVudERpc3BhdGNoZXJ9XG4gICAqL1xuICBnZXQgb25Db250cm9sc1Nob3coKTogRXZlbnREaXNwYXRjaGVyPFVJQ29udGFpbmVyLCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5ldmVudHMub25Db250cm9sc1Nob3c7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgYmVmb3JlIHRoZSBVSSBjb250cm9scyBhcmUgaGlkaW5nIHRvIGNoZWNrIGlmIHRoZXkgYXJlIGFsbG93ZWQgdG8gaGlkZS5cbiAgICogQHJldHVybnMge0V2ZW50RGlzcGF0Y2hlcn1cbiAgICovXG4gIGdldCBvblByZXZpZXdDb250cm9sc0hpZGUoKTogRXZlbnREaXNwYXRjaGVyPFVJQ29udGFpbmVyLCBDYW5jZWxFdmVudEFyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5ldmVudHMub25QcmV2aWV3Q29udHJvbHNIaWRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHdoZW4gdGhlIFVJIGNvbnRyb2xzIGFyZSBoaWRpbmcuXG4gICAqIEByZXR1cm5zIHtFdmVudERpc3BhdGNoZXJ9XG4gICAqL1xuICBnZXQgb25Db250cm9sc0hpZGUoKTogRXZlbnREaXNwYXRjaGVyPFVJQ29udGFpbmVyLCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5ldmVudHMub25Db250cm9sc0hpZGU7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiB0aGUgVUkgY29udHJvbHMgYXJlIHJlbGVhc2VkLlxuICAgKiBAcmV0dXJucyB7RXZlbnREaXNwYXRjaGVyfVxuICAgKi9cbiAgZ2V0IG9uUmVsZWFzZSgpOiBFdmVudERpc3BhdGNoZXI8VUlDb250YWluZXIsIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLmV2ZW50cy5vblJlbGVhc2U7XG4gIH1cblxuICBwcm90ZWN0ZWQgY2xlYXJFdmVudEhhbmRsZXJzKCk6IHZvaWQge1xuICAgIHRoaXMucGxheWVyV3JhcHBlci5jbGVhckV2ZW50SGFuZGxlcnMoKTtcblxuICAgIGxldCBldmVudHMgPSA8YW55PnRoaXMuZXZlbnRzOyAvLyBhdm9pZCBUUzcwMTdcbiAgICBmb3IgKGxldCBldmVudCBpbiBldmVudHMpIHtcbiAgICAgIGxldCBkaXNwYXRjaGVyID0gPEV2ZW50RGlzcGF0Y2hlcjxPYmplY3QsIE9iamVjdD4+ZXZlbnRzW2V2ZW50XTtcbiAgICAgIGRpc3BhdGNoZXIudW5zdWJzY3JpYmVBbGwoKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBFeHRlbmRzIHRoZSB7QGxpbmsgVUlJbnN0YW5jZU1hbmFnZXJ9IGZvciBpbnRlcm5hbCB1c2UgaW4gdGhlIHtAbGluayBVSU1hbmFnZXJ9IGFuZCBwcm92aWRlcyBhY2Nlc3MgdG8gZnVuY3Rpb25hbGl0eVxuICogdGhhdCBjb21wb25lbnRzIHJlY2VpdmluZyBhIHJlZmVyZW5jZSB0byB0aGUge0BsaW5rIFVJSW5zdGFuY2VNYW5hZ2VyfSBzaG91bGQgbm90IGhhdmUgYWNjZXNzIHRvLlxuICovXG5jbGFzcyBJbnRlcm5hbFVJSW5zdGFuY2VNYW5hZ2VyIGV4dGVuZHMgVUlJbnN0YW5jZU1hbmFnZXIge1xuXG4gIHByaXZhdGUgY29uZmlndXJlZDogYm9vbGVhbjtcbiAgcHJpdmF0ZSByZWxlYXNlZDogYm9vbGVhbjtcblxuICBnZXRXcmFwcGVkUGxheWVyKCk6IFdyYXBwZWRQbGF5ZXIge1xuICAgIC8vIFRPRE8gZmluZCBhIG5vbi1oYWNreSB3YXkgdG8gcHJvdmlkZSB0aGUgV3JhcHBlZFBsYXllciB0byB0aGUgVUlNYW5hZ2VyIHdpdGhvdXQgZXhwb3J0aW5nIGl0XG4gICAgLy8gZ2V0UGxheWVyKCkgYWN0dWFsbHkgcmV0dXJucyB0aGUgV3JhcHBlZFBsYXllciBidXQgaXRzIHJldHVybiB0eXBlIGlzIHNldCB0byBQbGF5ZXIgc28gdGhlIFdyYXBwZWRQbGF5ZXIgZG9lc1xuICAgIC8vIG5vdCBuZWVkIHRvIGJlIGV4cG9ydGVkXG4gICAgcmV0dXJuIDxXcmFwcGVkUGxheWVyPnRoaXMuZ2V0UGxheWVyKCk7XG4gIH1cblxuICBjb25maWd1cmVDb250cm9scygpOiB2b2lkIHtcbiAgICB0aGlzLmNvbmZpZ3VyZUNvbnRyb2xzVHJlZSh0aGlzLmdldFVJKCkpO1xuICAgIHRoaXMuY29uZmlndXJlZCA9IHRydWU7XG4gIH1cblxuICBpc0NvbmZpZ3VyZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlndXJlZDtcbiAgfVxuXG4gIHByaXZhdGUgY29uZmlndXJlQ29udHJvbHNUcmVlKGNvbXBvbmVudDogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4pIHtcbiAgICBsZXQgY29uZmlndXJlZENvbXBvbmVudHM6IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+W10gPSBbXTtcblxuICAgIFVJVXRpbHMudHJhdmVyc2VUcmVlKGNvbXBvbmVudCwgKGNvbXBvbmVudCkgPT4ge1xuICAgICAgLy8gRmlyc3QsIGNoZWNrIGlmIHdlIGhhdmUgYWxyZWFkeSBjb25maWd1cmVkIGEgY29tcG9uZW50LCBhbmQgdGhyb3cgYW4gZXJyb3IgaWYgd2UgZGlkLiBNdWx0aXBsZSBjb25maWd1cmF0aW9uXG4gICAgICAvLyBvZiB0aGUgc2FtZSBjb21wb25lbnQgbGVhZHMgdG8gdW5leHBlY3RlZCBVSSBiZWhhdmlvci4gQWxzbywgYSBjb21wb25lbnQgdGhhdCBpcyBpbiB0aGUgVUkgdHJlZSBtdWx0aXBsZVxuICAgICAgLy8gdGltZXMgaGludHMgYXQgYSB3cm9uZyBVSSBzdHJ1Y3R1cmUuXG4gICAgICAvLyBXZSBjb3VsZCBqdXN0IHNraXAgY29uZmlndXJhdGlvbiBpbiBzdWNoIGEgY2FzZSBhbmQgbm90IHRocm93IGFuIGV4Y2VwdGlvbiwgYnV0IGVuZm9yY2luZyBhIGNsZWFuIFVJIHRyZWVcbiAgICAgIC8vIHNlZW1zIGxpa2UgdGhlIGJldHRlciBjaG9pY2UuXG4gICAgICBmb3IgKGxldCBjb25maWd1cmVkQ29tcG9uZW50IG9mIGNvbmZpZ3VyZWRDb21wb25lbnRzKSB7XG4gICAgICAgIGlmIChjb25maWd1cmVkQ29tcG9uZW50ID09PSBjb21wb25lbnQpIHtcbiAgICAgICAgICAvLyBXcml0ZSB0aGUgY29tcG9uZW50IHRvIHRoZSBjb25zb2xlIHRvIHNpbXBsaWZ5IGlkZW50aWZpY2F0aW9uIG9mIHRoZSBjdWxwcml0XG4gICAgICAgICAgLy8gKGUuZy4gYnkgaW5zcGVjdGluZyB0aGUgY29uZmlnKVxuICAgICAgICAgIGlmIChjb25zb2xlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdDaXJjdWxhciByZWZlcmVuY2UgaW4gVUkgdHJlZScsIGNvbXBvbmVudCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQWRkaXRpb25hbGx5IHRocm93IGFuIGVycm9yLCBiZWNhdXNlIHRoaXMgY2FzZSBtdXN0IG5vdCBoYXBwZW4gYW5kIGxlYWRzIHRvIHVuZXhwZWN0ZWQgVUkgYmVoYXZpb3IuXG4gICAgICAgICAgdGhyb3cgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBpbiBVSSB0cmVlOiAnICsgY29tcG9uZW50LmNvbnN0cnVjdG9yLm5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbXBvbmVudC5pbml0aWFsaXplKCk7XG4gICAgICBjb21wb25lbnQuY29uZmlndXJlKHRoaXMuZ2V0UGxheWVyKCksIHRoaXMpO1xuICAgICAgY29uZmlndXJlZENvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgcmVsZWFzZUNvbnRyb2xzKCk6IHZvaWQge1xuICAgIC8vIERvIG5vdCBjYWxsIHJlbGVhc2UgbWV0aG9kcyBpZiB0aGUgY29tcG9uZW50cyBoYXZlIG5ldmVyIGJlZW4gY29uZmlndXJlZDsgdGhpcyBjYW4gcmVzdWx0IGluIGV4Y2VwdGlvbnNcbiAgICBpZiAodGhpcy5jb25maWd1cmVkKSB7XG4gICAgICB0aGlzLm9uUmVsZWFzZS5kaXNwYXRjaCh0aGlzLmdldFVJKCkpO1xuICAgICAgdGhpcy5yZWxlYXNlQ29udHJvbHNUcmVlKHRoaXMuZ2V0VUkoKSk7XG4gICAgICB0aGlzLmNvbmZpZ3VyZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5zcGF0aWFsTmF2aWdhdGlvbj8ucmVsZWFzZSgpO1xuICAgIHRoaXMucmVsZWFzZWQgPSB0cnVlO1xuICB9XG5cbiAgaXNSZWxlYXNlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5yZWxlYXNlZDtcbiAgfVxuXG4gIHByaXZhdGUgcmVsZWFzZUNvbnRyb2xzVHJlZShjb21wb25lbnQ6IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+KSB7XG4gICAgY29tcG9uZW50LnJlbGVhc2UoKTtcblxuICAgIGlmIChjb21wb25lbnQgaW5zdGFuY2VvZiBDb250YWluZXIpIHtcbiAgICAgIGZvciAobGV0IGNoaWxkQ29tcG9uZW50IG9mIGNvbXBvbmVudC5nZXRDb21wb25lbnRzKCkpIHtcbiAgICAgICAgdGhpcy5yZWxlYXNlQ29udHJvbHNUcmVlKGNoaWxkQ29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjbGVhckV2ZW50SGFuZGxlcnMoKTogdm9pZCB7XG4gICAgc3VwZXIuY2xlYXJFdmVudEhhbmRsZXJzKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBFeHRlbmRlZCBpbnRlcmZhY2Ugb2YgdGhlIHtAbGluayBQbGF5ZXJ9IGZvciB1c2UgaW4gdGhlIFVJLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFdyYXBwZWRQbGF5ZXIgZXh0ZW5kcyBQbGF5ZXJBUEkge1xuICAvKipcbiAgICogRmlyZXMgYW4gZXZlbnQgb24gdGhlIHBsYXllciB0aGF0IHRhcmdldHMgYWxsIGhhbmRsZXJzIGluIHRoZSBVSSBidXQgbmV2ZXIgZW50ZXJzIHRoZSByZWFsIHBsYXllci5cbiAgICogQHBhcmFtIGV2ZW50IHRoZSBldmVudCB0byBmaXJlXG4gICAqIEBwYXJhbSBkYXRhIGRhdGEgdG8gc2VuZCB3aXRoIHRoZSBldmVudFxuICAgKi9cbiAgZmlyZUV2ZW50SW5VSShldmVudDogUGxheWVyRXZlbnQsIGRhdGE6IHt9KTogdm9pZDtcbn1cblxuLyoqXG4gKiBXcmFwcyB0aGUgcGxheWVyIHRvIHRyYWNrIGV2ZW50IGhhbmRsZXJzIGFuZCBwcm92aWRlIGEgc2ltcGxlIG1ldGhvZCB0byByZW1vdmUgYWxsIHJlZ2lzdGVyZWQgZXZlbnRcbiAqIGhhbmRsZXJzIGZyb20gdGhlIHBsYXllci5cbiAqL1xuZXhwb3J0IGNsYXNzIFBsYXllcldyYXBwZXIge1xuXG4gIHByaXZhdGUgcGxheWVyOiBQbGF5ZXJBUEk7XG4gIHByaXZhdGUgd3JhcHBlcjogV3JhcHBlZFBsYXllcjtcblxuICBwcml2YXRlIGV2ZW50SGFuZGxlcnM6IHsgW2V2ZW50VHlwZTogc3RyaW5nXTogUGxheWVyRXZlbnRDYWxsYmFja1tdOyB9ID0ge307XG5cbiAgY29uc3RydWN0b3IocGxheWVyOiBQbGF5ZXJBUEkpIHtcbiAgICB0aGlzLnBsYXllciA9IHBsYXllcjtcblxuICAgIC8vIENvbGxlY3QgYWxsIG1lbWJlcnMgb2YgdGhlIHBsYXllciAocHVibGljIEFQSSBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzIG9mIHRoZSBwbGF5ZXIpXG4gICAgY29uc3Qgb2JqZWN0UHJvdG9Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT2JqZWN0LmdldFByb3RvdHlwZU9mKHt9KSk7XG4gICAgY29uc3QgbmFtZXNUb0lnbm9yZSA9IFsnY29uc3RydWN0b3InLCAuLi5vYmplY3RQcm90b1Byb3BlcnR5TmFtZXNdO1xuICAgIGNvbnN0IG1lbWJlcnMgPSBnZXRBbGxQcm9wZXJ0eU5hbWVzKHBsYXllcikuZmlsdGVyKG5hbWUgPT4gbmFtZXNUb0lnbm9yZS5pbmRleE9mKG5hbWUpID09PSAtMSk7XG4gICAgLy8gU3BsaXQgdGhlIG1lbWJlcnMgaW50byBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzXG4gICAgbGV0IG1ldGhvZHMgPSA8YW55W10+W107XG4gICAgbGV0IHByb3BlcnRpZXMgPSA8YW55W10+W107XG5cbiAgICBmb3IgKGxldCBtZW1iZXIgb2YgbWVtYmVycykge1xuICAgICAgaWYgKHR5cGVvZiAoPGFueT5wbGF5ZXIpW21lbWJlcl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgbWV0aG9kcy5wdXNoKG1lbWJlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9wZXJ0aWVzLnB1c2gobWVtYmVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgd3JhcHBlciBvYmplY3RcbiAgICBsZXQgd3JhcHBlciA9IDxhbnk+e307XG5cbiAgICAvLyBBZGQgZnVuY3Rpb24gd3JhcHBlcnMgZm9yIGFsbCBBUEkgbWV0aG9kcyB0aGF0IGRvIG5vdGhpbmcgYnV0IGNhbGxpbmcgdGhlIGJhc2UgbWV0aG9kIG9uIHRoZSBwbGF5ZXJcbiAgICBmb3IgKGxldCBtZXRob2Qgb2YgbWV0aG9kcykge1xuICAgICAgd3JhcHBlclttZXRob2RdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdjYWxsZWQgJyArIG1lbWJlcik7IC8vIHRyYWNrIG1ldGhvZCBjYWxscyBvbiB0aGUgcGxheWVyXG4gICAgICAgIHJldHVybiAoPGFueT5wbGF5ZXIpW21ldGhvZF0uYXBwbHkocGxheWVyLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBBZGQgYWxsIHB1YmxpYyBwcm9wZXJ0aWVzIG9mIHRoZSBwbGF5ZXIgdG8gdGhlIHdyYXBwZXJcbiAgICBmb3IgKGxldCBwcm9wZXJ0eSBvZiBwcm9wZXJ0aWVzKSB7XG4gICAgICAvLyBHZXQgYW4gZXZlbnR1YWxseSBleGlzdGluZyBwcm9wZXJ0eSBkZXNjcmlwdG9yIHRvIGRpZmZlcmVudGlhdGUgYmV0d2VlbiBwbGFpbiBwcm9wZXJ0aWVzIGFuZCBwcm9wZXJ0aWVzIHdpdGhcbiAgICAgIC8vIGdldHRlcnMvc2V0dGVycy5cbiAgICAgIGNvbnN0IHByb3BlcnR5RGVzY3JpcHRvciA9ICgodGFyZ2V0OiBQbGF5ZXJBUEkpID0+IHtcbiAgICAgICAgd2hpbGUgKHRhcmdldCkge1xuICAgICAgICAgIGNvbnN0IHByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgICAgICAgaWYgKHByb3BlcnR5RGVzY3JpcHRvcikge1xuICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5RGVzY3JpcHRvcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIFByb3BlcnR5RGVzY3JpcHRvciBleGlzdHMgb24gYSBjaGlsZCBwcm90b3R5cGUgaW4gY2FzZSB3ZSBoYXZlIGFuIGluaGVyaXRhbmNlIG9mIHRoZSBwbGF5ZXJcbiAgICAgICAgICB0YXJnZXQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfSkocGxheWVyKTtcblxuICAgICAgLy8gSWYgdGhlIHByb3BlcnR5IGhhcyBnZXR0ZXJzL3NldHRlcnMsIHdyYXAgdGhlbSBhY2NvcmRpbmdseS4uLlxuICAgICAgaWYgKHByb3BlcnR5RGVzY3JpcHRvciAmJiAocHJvcGVydHlEZXNjcmlwdG9yLmdldCB8fCBwcm9wZXJ0eURlc2NyaXB0b3Iuc2V0KSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod3JhcHBlciwgcHJvcGVydHksIHtcbiAgICAgICAgICBnZXQ6ICgpID0+IHByb3BlcnR5RGVzY3JpcHRvci5nZXQuY2FsbChwbGF5ZXIpLFxuICAgICAgICAgIHNldDogKHZhbHVlOiBhbnkpID0+IHByb3BlcnR5RGVzY3JpcHRvci5zZXQuY2FsbChwbGF5ZXIsIHZhbHVlKSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyAuLi4gZWxzZSBqdXN0IHRyYW5zZmVyIHRoZSBwcm9wZXJ0eSB0byB0aGUgd3JhcHBlclxuICAgICAgZWxzZSB7XG4gICAgICAgIHdyYXBwZXJbcHJvcGVydHldID0gKDxhbnk+cGxheWVyKVtwcm9wZXJ0eV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRXhwbGljaXRseSBhZGQgYSB3cmFwcGVyIG1ldGhvZCBmb3IgJ29uJyB0aGF0IGFkZHMgYWRkZWQgZXZlbnQgaGFuZGxlcnMgdG8gdGhlIGV2ZW50IGxpc3RcbiAgICB3cmFwcGVyLm9uID0gKGV2ZW50VHlwZTogUGxheWVyRXZlbnQsIGNhbGxiYWNrOiBQbGF5ZXJFdmVudENhbGxiYWNrKSA9PiB7XG4gICAgICBwbGF5ZXIub24oZXZlbnRUeXBlLCBjYWxsYmFjayk7XG5cbiAgICAgIGlmICghdGhpcy5ldmVudEhhbmRsZXJzW2V2ZW50VHlwZV0pIHtcbiAgICAgICAgdGhpcy5ldmVudEhhbmRsZXJzW2V2ZW50VHlwZV0gPSBbXTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5ldmVudEhhbmRsZXJzW2V2ZW50VHlwZV0ucHVzaChjYWxsYmFjayk7XG5cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH07XG5cbiAgICAvLyBFeHBsaWNpdGx5IGFkZCBhIHdyYXBwZXIgbWV0aG9kIGZvciAnb2ZmJyB0aGF0IHJlbW92ZXMgcmVtb3ZlZCBldmVudCBoYW5kbGVycyBmcm9tIHRoZSBldmVudCBsaXN0XG4gICAgd3JhcHBlci5vZmYgPSAoZXZlbnRUeXBlOiBQbGF5ZXJFdmVudCwgY2FsbGJhY2s6IFBsYXllckV2ZW50Q2FsbGJhY2spID0+IHtcbiAgICAgIHBsYXllci5vZmYoZXZlbnRUeXBlLCBjYWxsYmFjayk7XG5cbiAgICAgIGlmICh0aGlzLmV2ZW50SGFuZGxlcnNbZXZlbnRUeXBlXSkge1xuICAgICAgICBBcnJheVV0aWxzLnJlbW92ZSh0aGlzLmV2ZW50SGFuZGxlcnNbZXZlbnRUeXBlXSwgY2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9O1xuXG4gICAgd3JhcHBlci5maXJlRXZlbnRJblVJID0gKGV2ZW50OiBQbGF5ZXJFdmVudCwgZGF0YToge30pID0+IHtcbiAgICAgIGlmICh0aGlzLmV2ZW50SGFuZGxlcnNbZXZlbnRdKSB7IC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBoYW5kbGVycyBmb3IgdGhpcyBldmVudCByZWdpc3RlcmVkXG4gICAgICAgIC8vIEV4dGVuZCB0aGUgZGF0YSBvYmplY3Qgd2l0aCBkZWZhdWx0IHZhbHVlcyB0byBjb252ZXJ0IGl0IHRvIGEge0BsaW5rIFBsYXllckV2ZW50QmFzZX0gb2JqZWN0LlxuICAgICAgICBsZXQgcGxheWVyRXZlbnREYXRhID0gPFBsYXllckV2ZW50QmFzZT5PYmplY3QuYXNzaWduKHt9LCB7XG4gICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICAgIHR5cGU6IGV2ZW50LFxuICAgICAgICAgIC8vIEFkZCBhIG1hcmtlciBwcm9wZXJ0eSBzbyB0aGUgVUkgY2FuIGRldGVjdCBVSS1pbnRlcm5hbCBwbGF5ZXIgZXZlbnRzXG4gICAgICAgICAgdWlTb3VyY2VkOiB0cnVlLFxuICAgICAgICB9LCBkYXRhKTtcblxuICAgICAgICAvLyBFeGVjdXRlIHRoZSByZWdpc3RlcmVkIGNhbGxiYWNrc1xuICAgICAgICBmb3IgKGxldCBjYWxsYmFjayBvZiB0aGlzLmV2ZW50SGFuZGxlcnNbZXZlbnRdKSB7XG4gICAgICAgICAgY2FsbGJhY2socGxheWVyRXZlbnREYXRhKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLndyYXBwZXIgPSA8V3JhcHBlZFBsYXllcj53cmFwcGVyO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSB3cmFwcGVkIHBsYXllciBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBvbiBwbGFjZSBvZiB0aGUgbm9ybWFsIHBsYXllciBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtXcmFwcGVkUGxheWVyfSBhIHdyYXBwZWQgcGxheWVyXG4gICAqL1xuICBnZXRQbGF5ZXIoKTogV3JhcHBlZFBsYXllciB7XG4gICAgcmV0dXJuIHRoaXMud3JhcHBlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhcnMgYWxsIHJlZ2lzdGVyZWQgZXZlbnQgaGFuZGxlcnMgZnJvbSB0aGUgcGxheWVyIHRoYXQgd2VyZSBhZGRlZCB0aHJvdWdoIHRoZSB3cmFwcGVkIHBsYXllci5cbiAgICovXG4gIGNsZWFyRXZlbnRIYW5kbGVycygpOiB2b2lkIHtcbiAgICB0cnkge1xuICAgICAgLy8gQ2FsbCB0aGUgcGxheWVyIEFQSSB0byBjaGVjayBpZiB0aGUgaW5zdGFuY2UgaXMgc3RpbGwgdmFsaWQgb3IgYWxyZWFkeSBkZXN0cm95ZWQuXG4gICAgICAvLyBUaGlzIGNhbiBiZSBhbnkgY2FsbCB0aHJvd2luZyB0aGUgUGxheWVyQVBJTm90QXZhaWxhYmxlRXJyb3Igd2hlbiB0aGUgcGxheWVyIGluc3RhbmNlIGlzIGRlc3Ryb3llZC5cbiAgICAgIHRoaXMucGxheWVyLmdldFNvdXJjZSgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiB0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckFQSU5vdEF2YWlsYWJsZUVycm9yKSB7XG4gICAgICAgIC8vIFdlIGhhdmUgZGV0ZWN0ZWQgdGhhdCB0aGUgcGxheWVyIGluc3RhbmNlIGlzIGFscmVhZHkgZGVzdHJveWVkLCBzbyB3ZSBjbGVhciB0aGUgZXZlbnQgaGFuZGxlcnMgdG8gYXZvaWRcbiAgICAgICAgLy8gZXZlbnQgaGFuZGxlciB1bnN1YnNjcmlwdGlvbiBhdHRlbXB0cyAod2hpY2ggd291bGQgcmVzdWx0IGluIFBsYXllckFQSU5vdEF2YWlsYWJsZUVycm9yIGVycm9ycykuXG4gICAgICAgIHRoaXMuZXZlbnRIYW5kbGVycyA9IHt9O1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAobGV0IGV2ZW50VHlwZSBpbiB0aGlzLmV2ZW50SGFuZGxlcnMpIHtcbiAgICAgIGZvciAobGV0IGNhbGxiYWNrIG9mIHRoaXMuZXZlbnRIYW5kbGVyc1tldmVudFR5cGVdKSB7XG4gICAgICAgIHRoaXMucGxheWVyLm9mZihldmVudFR5cGUgYXMgUGxheWVyRXZlbnQsIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QWxsUHJvcGVydHlOYW1lcyh0YXJnZXQ6IE9iamVjdCk6IHN0cmluZ1tdIHtcbiAgbGV0IG5hbWVzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIHdoaWxlICh0YXJnZXQpIHtcbiAgICBjb25zdCBuZXdOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCkuZmlsdGVyKG5hbWUgPT4gbmFtZXMuaW5kZXhPZihuYW1lKSA9PT0gLTEpO1xuICAgIG5hbWVzID0gbmFtZXMuY29uY2F0KG5ld05hbWVzKTtcbiAgICAvLyBnbyB1cCBwcm90b3R5cGUgY2hhaW5cbiAgICB0YXJnZXQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KTtcbiAgfVxuXG4gIHJldHVybiBuYW1lcztcbn1cbiIsImltcG9ydCB7Q29tcG9uZW50LCBDb21wb25lbnRDb25maWd9IGZyb20gJy4vY29tcG9uZW50cy9jb21wb25lbnQnO1xuaW1wb3J0IHtDb250YWluZXJ9IGZyb20gJy4vY29tcG9uZW50cy9jb250YWluZXInO1xuXG5leHBvcnQgbmFtZXNwYWNlIFVJVXRpbHMge1xuICBleHBvcnQgaW50ZXJmYWNlIFRyZWVUcmF2ZXJzYWxDYWxsYmFjayB7XG4gICAgKGNvbXBvbmVudDogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4sIHBhcmVudD86IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+KTogdm9pZDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiB0cmF2ZXJzZVRyZWUoY29tcG9uZW50OiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPiwgdmlzaXQ6IFRyZWVUcmF2ZXJzYWxDYWxsYmFjayk6IHZvaWQge1xuICAgIGxldCByZWN1cnNpdmVUcmVlV2Fsa2VyID0gKGNvbXBvbmVudDogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4sIHBhcmVudD86IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+KSA9PiB7XG4gICAgICB2aXNpdChjb21wb25lbnQsIHBhcmVudCk7XG5cbiAgICAgIC8vIElmIHRoZSBjdXJyZW50IGNvbXBvbmVudCBpcyBhIGNvbnRhaW5lciwgdmlzaXQgaXQncyBjaGlsZHJlblxuICAgICAgaWYgKGNvbXBvbmVudCBpbnN0YW5jZW9mIENvbnRhaW5lcikge1xuICAgICAgICBmb3IgKGxldCBjaGlsZENvbXBvbmVudCBvZiBjb21wb25lbnQuZ2V0Q29tcG9uZW50cygpKSB7XG4gICAgICAgICAgcmVjdXJzaXZlVHJlZVdhbGtlcihjaGlsZENvbXBvbmVudCwgY29tcG9uZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBXYWxrIGFuZCBjb25maWd1cmUgdGhlIGNvbXBvbmVudCB0cmVlXG4gICAgcmVjdXJzaXZlVHJlZVdhbGtlcihjb21wb25lbnQpO1xuICB9XG5cbiAgLy8gRnJvbTogaHR0cHM6Ly9naXRodWIuY29tL25mcmllbmQvdHMta2V5Y29kZS1lbnVtL2Jsb2IvbWFzdGVyL0tleS5lbnVtLnRzXG4gIGV4cG9ydCBlbnVtIEtleUNvZGUge1xuICAgIExlZnRBcnJvdyA9IDM3LFxuICAgIFVwQXJyb3cgPSAzOCxcbiAgICBSaWdodEFycm93ID0gMzksXG4gICAgRG93bkFycm93ID0gNDAsXG4gICAgU3BhY2UgPSAzMixcbiAgICBFbmQgPSAzNSxcbiAgICBIb21lID0gMzYsXG4gIH1cbn1cbiIsImltcG9ydCB7IEV2ZW50LCBFdmVudERpc3BhdGNoZXIgfSBmcm9tICcuL2V2ZW50ZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIFZvbHVtZVNldHRpbmdDaGFuZ2VkQXJncyB7XG4gIHZvbHVtZTogbnVtYmVyO1xuICBtdXRlZDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBDYW4gYmUgdXNlZCB0byBjZW50cmFsbHkgbWFuYWdlIGFuZCBjb250cm9sIHRoZSB2b2x1bWUgYW5kIG11dGUgc3RhdGUgb2YgdGhlIHBsYXllciBmcm9tIG11bHRpcGxlIGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBWb2x1bWVDb250cm9sbGVyIHtcblxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBpc3N1ZXJOYW1lID0gJ3VpLXZvbHVtZWNvbnRyb2xsZXInO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgZXZlbnRzID0ge1xuICAgIG9uQ2hhbmdlZDogbmV3IEV2ZW50RGlzcGF0Y2hlcjxWb2x1bWVDb250cm9sbGVyLCBWb2x1bWVTZXR0aW5nQ2hhbmdlZEFyZ3M+KCksXG4gIH07XG5cbiAgcHJpdmF0ZSBzdG9yZWRWb2x1bWU6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHBsYXllcjogUGxheWVyQVBJKSB7XG4gICAgdGhpcy5zdG9yZVZvbHVtZSgpO1xuXG4gICAgY29uc3QgaGFuZGxlciA9ICgpID0+IHtcbiAgICAgIHRoaXMub25DaGFuZ2VkRXZlbnQoKTtcbiAgICB9O1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZUxvYWRlZCwgaGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlZvbHVtZUNoYW5nZWQsIGhhbmRsZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5NdXRlZCwgaGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlVubXV0ZWQsIGhhbmRsZXIpO1xuICB9XG5cbiAgc2V0Vm9sdW1lKHZvbHVtZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5wbGF5ZXIuc2V0Vm9sdW1lKHZvbHVtZSwgVm9sdW1lQ29udHJvbGxlci5pc3N1ZXJOYW1lKTtcbiAgfVxuXG4gIGdldFZvbHVtZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnBsYXllci5nZXRWb2x1bWUoKTtcbiAgfVxuXG4gIHNldE11dGVkKG11dGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKG11dGVkKSB7XG4gICAgICB0aGlzLnBsYXllci5tdXRlKFZvbHVtZUNvbnRyb2xsZXIuaXNzdWVyTmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGxheWVyLnVubXV0ZShWb2x1bWVDb250cm9sbGVyLmlzc3Vlck5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIHRvZ2dsZU11dGVkKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzTXV0ZWQoKSB8fCB0aGlzLmdldFZvbHVtZSgpID09PSAwKSB7XG4gICAgICAvLyBVbm11dGluZyBmcm9tIHRoZSBtdXRlIG9yIHplcm8tdm9sdW1lIHN0YXRlIHJlY2FsbHMgdGhlIHByZXZpb3VzbHkgc2F2ZWQgdm9sdW1lIHNldHRpbmcuIFNldHRpbmcgdGhlXG4gICAgICAvLyB2b2x1bWUgYXV0b21hdGljYWxseSB1bm11dGVzIHRoZSBwbGF5ZXIgaW4gdjcuXG4gICAgICB0aGlzLnJlY2FsbFZvbHVtZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldE11dGVkKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIGlzTXV0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucGxheWVyLmlzTXV0ZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9yZXMgKHNhdmVzKSB0aGUgY3VycmVudCB2b2x1bWUgc28gaXQgY2FuIGxhdGVyIGJlIHJlc3RvcmVkIHdpdGgge0BsaW5rIHJlY2FsbFZvbHVtZX0uXG4gICAqL1xuICBzdG9yZVZvbHVtZSgpOiB2b2lkIHtcbiAgICB0aGlzLnN0b3JlZFZvbHVtZSA9IHRoaXMuZ2V0Vm9sdW1lKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVjYWxscyAoc2V0cykgdGhlIHZvbHVtZSBwcmV2aW91c2x5IHN0b3JlZCB3aXRoIHtAbGluayBzdG9yZVZvbHVtZX0uXG4gICAqL1xuICByZWNhbGxWb2x1bWUoKTogdm9pZCB7XG4gICAgdGhpcy5zZXRNdXRlZCh0aGlzLnN0b3JlZFZvbHVtZSA9PT0gMCk7XG4gICAgdGhpcy5zZXRWb2x1bWUodGhpcy5zdG9yZWRWb2x1bWUpO1xuICB9XG5cbiAgc3RhcnRUcmFuc2l0aW9uKCk6IFZvbHVtZVRyYW5zaXRpb24ge1xuICAgIHJldHVybiBuZXcgVm9sdW1lVHJhbnNpdGlvbih0aGlzKTtcbiAgfVxuXG4gIG9uQ2hhbmdlZEV2ZW50KCkge1xuICAgIGNvbnN0IHBsYXllck11dGVkID0gdGhpcy5pc011dGVkKCk7XG4gICAgY29uc3QgcGxheWVyVm9sdW1lID0gdGhpcy5nZXRWb2x1bWUoKTtcblxuICAgIGNvbnN0IHVpTXV0ZWQgPSBwbGF5ZXJNdXRlZCB8fCBwbGF5ZXJWb2x1bWUgPT09IDA7XG4gICAgY29uc3QgdWlWb2x1bWUgPSBwbGF5ZXJNdXRlZCA/IDAgOiBwbGF5ZXJWb2x1bWU7XG5cbiAgICB0aGlzLnN0b3JlVm9sdW1lKCk7XG5cbiAgICB0aGlzLmV2ZW50cy5vbkNoYW5nZWQuZGlzcGF0Y2godGhpcywgeyB2b2x1bWU6IHVpVm9sdW1lLCBtdXRlZDogdWlNdXRlZCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIHZvbHVtZSBzZXR0aW5ncyBoYXZlIGNoYW5nZWQuXG4gICAqL1xuICBnZXQgb25DaGFuZ2VkKCk6IEV2ZW50PFZvbHVtZUNvbnRyb2xsZXIsIFZvbHVtZVNldHRpbmdDaGFuZ2VkQXJncz4ge1xuICAgIHJldHVybiB0aGlzLmV2ZW50cy5vbkNoYW5nZWQuZ2V0RXZlbnQoKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVm9sdW1lVHJhbnNpdGlvbiB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb250cm9sbGVyOiBWb2x1bWVDb250cm9sbGVyKSB7XG4gICAgLy8gU3RvcmUgdGhlIHZvbHVtZSBhdCB0aGUgYmVnaW5uaW5nIG9mIGEgdm9sdW1lIGNoYW5nZSBzbyB3ZSBjYW4gcmVjYWxsIGl0IGxhdGVyIGluIGNhc2Ugd2Ugc2V0IHRoZSB2b2x1bWUgdG9cbiAgICAvLyB6ZXJvIGFuZCBhY3R1YWxseSBtdXRlIHRoZSBwbGF5ZXIuXG4gICAgY29udHJvbGxlci5zdG9yZVZvbHVtZSgpO1xuICB9XG5cbiAgdXBkYXRlKHZvbHVtZTogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8gVXBkYXRlIHRoZSB2b2x1bWUgd2hpbGUgdHJhbnNpdGlvbmluZyBzbyB0aGUgdXNlciBoYXMgYSBcImxpdmUgcHJldmlld1wiIG9mIHRoZSBkZXNpcmVkIHRhcmdldCB2b2x1bWVcbiAgICB0aGlzLmNvbnRyb2xsZXIuc2V0TXV0ZWQoZmFsc2UpO1xuICAgIHRoaXMuY29udHJvbGxlci5zZXRWb2x1bWUodm9sdW1lKTtcbiAgfVxuXG4gIGZpbmlzaCh2b2x1bWU6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh2b2x1bWUgPT09IDApIHtcbiAgICAgIC8vIFdoZW4gdGhlIHZvbHVtZSBpcyB6ZXJvIHdlIGVzc2VudGlhbGx5IG11dGUgdGhlIHZvbHVtZSBzbyB3ZSByZWNhbGwgdGhlIHZvbHVtZSBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgdGhlXG4gICAgICAvLyB0cmFuc2l0aW9uIGFuZCBtdXRlIHRoZSBwbGF5ZXIgaW5zdGVhZC4gUmVjYWxsaW5nIGlzIG5lY2Vzc2FyeSB0byByZXR1cm4gdG8gdGhlIGFjdHVhbCBhdWRpbyB2b2x1bWVcbiAgICAgIC8vIHdoZW4gdW5tdXRpbmcuXG4gICAgICAvLyBXZSBtdXN0IGZpcnN0IHJlY2FsbCB0aGUgdm9sdW1lIGFuZCB0aGVuIG11dGUsIGJlY2F1c2UgcmVjYWxsaW5nIHNldHMgdGhlIHZvbHVtZSBvbiB0aGUgcGxheWVyXG4gICAgICAvLyBhbmQgc2V0dGluZyBhIHBsYXllciB2b2x1bWUgPiAwIHVubXV0ZXMgdGhlIHBsYXllciBpbiB2Ny5cbiAgICAgIHRoaXMuY29udHJvbGxlci5yZWNhbGxWb2x1bWUoKTtcbiAgICAgIHRoaXMuY29udHJvbGxlci5zZXRNdXRlZCh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb250cm9sbGVyLnNldE11dGVkKGZhbHNlKTtcbiAgICAgIHRoaXMuY29udHJvbGxlci5zZXRWb2x1bWUodm9sdW1lKTtcbiAgICAgIHRoaXMuY29udHJvbGxlci5zdG9yZVZvbHVtZSgpO1xuICAgIH1cbiAgfVxufSIsImltcG9ydCB7IFN1YnRpdGxlUmVnaW9uQ29udGFpbmVyLCBTdWJ0aXRsZUxhYmVsIH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlb3ZlcmxheSc7XG5pbXBvcnQgeyBWVFRQcm9wZXJ0aWVzLCBWVFRSZWdpb25Qcm9wZXJ0aWVzIH0gZnJvbSAnYml0bW92aW4tcGxheWVyL3R5cGVzL3N1YnRpdGxlcy92dHQvQVBJJztcbmltcG9ydCB7IERPTSwgU2l6ZSB9IGZyb20gJy4vZG9tJztcblxuLy8gT3VyIGRlZmF1bHQgaGVpZ2h0IG9mIGEgbGluZVxuY29uc3QgbGluZUhlaWdodCA9IDI4O1xuXG4vLyBEZWZhdWx0IHJlbGF0aXZlIGxpbmUgaGVpZ2h0XG5jb25zdCBsaW5lSGVpZ2h0UGVyY2VudCA9IDU7XG5sZXQgbGluZUNvdW50OiBudW1iZXIgPSAxO1xuXG5jb25zdCBkZWZhdWx0TGluZU51bWJlciA9IDIxOyAvLyBPdXIgZGVmYXVsdCBhbW91bnQgb2YgbGluZXNcblxuZW51bSBEaXJlY3Rpb24ge1xuICBUb3AgPSAndG9wJyxcbiAgQm90dG9tID0gJ2JvdHRvbScsXG4gIExlZnQgPSAnbGVmdCcsXG4gIFJpZ2h0ID0gJ3JpZ2h0Jyxcbn1cblxuZW51bSBWdHRWZXJ0aWNhbFdyaXRpbmcge1xuICBHcm93aW5nUmlnaHQgPSAnbHInLFxuICBHcm93aW5nTGVmdCA9ICdybCcsXG59XG5cbnR5cGUgVmVydGljYWxXcml0aW5nRGlyZWN0aW9uID0gRGlyZWN0aW9uLkxlZnQgfCBEaXJlY3Rpb24uUmlnaHQ7XG5cbmNvbnN0IERpcmVjdGlvblBhaXIgPSBuZXcgTWFwPERpcmVjdGlvbiwgRGlyZWN0aW9uPihbXG4gIFtEaXJlY3Rpb24uVG9wLCBEaXJlY3Rpb24uQm90dG9tXSxcbiAgW0RpcmVjdGlvbi5Cb3R0b20sIERpcmVjdGlvbi5Ub3BdLFxuICBbRGlyZWN0aW9uLkxlZnQsIERpcmVjdGlvbi5SaWdodF0sXG4gIFtEaXJlY3Rpb24uUmlnaHQsIERpcmVjdGlvbi5MZWZ0XSxcbl0pO1xuXG4vKipcbiAqIFNldHMgdGhlIGRlZmF1bHQgc3RhbmRhcmRpemVkIHN0eWxlcyBmb3IgdGhlIEN1ZSBCb3hcbiAqIGh0dHBzOi8vdzMub3JnL1RSL3dlYnZ0dDEvI2FwcGx5aW5nLWNzcy1wcm9wZXJ0aWVzXG4gKi9cbmNvbnN0IHNldERlZmF1bHRWdHRTdHlsZXMgPSAoY3VlQ29udGFpbmVyRG9tOiBET00sIHZ0dDogVlRUUHJvcGVydGllcykgPT4ge1xuICBpZiAodnR0LnJlZ2lvbikge1xuICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoJ3Bvc2l0aW9uJywgJ3JlbGF0aXZlJyk7XG4gICAgY3VlQ29udGFpbmVyRG9tLmNzcygndW5pY29kZS1iaWRpJywgJ3BsYWludGV4dCcpO1xuICB9IGVsc2Uge1xuICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJyk7XG4gICAgY3VlQ29udGFpbmVyRG9tLmNzcygnb3ZlcmZsb3ctd3JhcCcsICdicmVhay13b3JkJyk7XG4gICAgY3VlQ29udGFpbmVyRG9tLmNzcygnb3ZlcmZsb3cnLCAnaGlkZGVuJyk7XG4gICAgY3VlQ29udGFpbmVyRG9tLmNzcygnZmxleC1mbG93JywgJ2NvbHVtbicpO1xuICB9XG4gIGN1ZUNvbnRhaW5lckRvbS5jc3MoJ2Rpc3BsYXknLCAnaW5saW5lLWZsZXgnKTtcbn07XG5cbi8qKlxuICogQWxpZ24gdGhlIEN1ZSBCb3gncyBsaW5lXG4gKiBodHRwczovL3czLm9yZy9UUi93ZWJ2dHQxLyN3ZWJ2dHQtY3VlLWxpbmUtYWxpZ25tZW50XG4gKi9cbmNvbnN0IHNldFZ0dExpbmVBbGlnbiA9IChcbiAgY3VlQ29udGFpbmVyRG9tOiBET00sXG4gIHsgbGluZUFsaWduIH06IFZUVFByb3BlcnRpZXMsXG4gIGRpcmVjdGlvbjogRGlyZWN0aW9uLFxuICByZWxhdGl2ZUN1ZUJveFBvc2l0aW9uOiBudW1iZXIpID0+IHtcbiAgc3dpdGNoIChsaW5lQWxpZ24pIHtcbiAgICBjYXNlICdjZW50ZXInOlxuICAgICAgc2V0Q3NzRm9yQ2VudGVyTGluZUFsaWduKFxuICAgICAgICBjdWVDb250YWluZXJEb20sIGRpcmVjdGlvbiwgcmVsYXRpdmVDdWVCb3hQb3NpdGlvbik7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdlbmQnOlxuICAgICAgc2V0Q3NzRm9yRW5kTGluZUFsaWduKFxuICAgICAgICBjdWVDb250YWluZXJEb20sIGRpcmVjdGlvbiwgcmVsYXRpdmVDdWVCb3hQb3NpdGlvbik7XG4gIH1cbn07XG5cbi8qKlxuICogRGVmaW5lcyB0aGUgbGluZSBwb3NpdGlvbmluZyBvZiB0aGUgQ3VlIEJveFxuICogaHR0cHM6Ly93My5vcmcvVFIvd2VidnR0MS8jd2VidnR0LWN1ZS1saW5lXG4gKi9cbmNvbnN0IHNldFZ0dExpbmUgPSAoXG4gIGN1ZUNvbnRhaW5lckRvbTogRE9NLFxuICB2dHQ6IFZUVFByb3BlcnRpZXMsXG4gIGRpcmVjdGlvbjogRGlyZWN0aW9uLFxuICBzdWJ0aXRsZU92ZXJMYXlTaXplOiBTaXplLFxuKSA9PiB7XG4gIGNvbnN0IG92ZXJsYXlSZWZlcmVuY2VFZGdlID0gRGlyZWN0aW9uUGFpci5nZXQoZGlyZWN0aW9uKTtcbiAgaWYgKHZ0dC5saW5lID09PSAnYXV0bycgJiYgdnR0LnZlcnRpY2FsKSB7XG4gICAgY3VlQ29udGFpbmVyRG9tLmNzcyhvdmVybGF5UmVmZXJlbmNlRWRnZSwgJzAnKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHZ0dC5saW5lID09PSAnYXV0bycgJiYgIXZ0dC52ZXJ0aWNhbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCByZWxhdGl2ZUxpbmVQb3NpdGlvbiA9IHBhcnNlRmxvYXQodnR0LmxpbmUgYXMgc3RyaW5nKTtcblxuICBpZiAodnR0LnNuYXBUb0xpbmVzKSB7XG4gICAgbGV0IHRhcmdldExpbmUgPSBOdW1iZXIodnR0LmxpbmUpO1xuICAgIGlmICh0YXJnZXRMaW5lIDwgMCkge1xuICAgICAgdGFyZ2V0TGluZSA9IGRlZmF1bHRMaW5lTnVtYmVyICsgdGFyZ2V0TGluZTtcbiAgICB9XG5cbiAgICBjb25zdCBsaW5lSGVpZ2h0ID0gc3VidGl0bGVPdmVyTGF5U2l6ZS5oZWlnaHQgLyBkZWZhdWx0TGluZU51bWJlcjtcbiAgICBjb25zdCBhYnNvbHV0ZUxpbmVQb3NpdGlvbiA9IGxpbmVIZWlnaHQgKiB0YXJnZXRMaW5lO1xuICAgIHJlbGF0aXZlTGluZVBvc2l0aW9uID0gKDEwMCAqIGFic29sdXRlTGluZVBvc2l0aW9uKSAvIHN1YnRpdGxlT3ZlckxheVNpemUuaGVpZ2h0O1xuICB9XG5cbiAgaWYgKHZ0dC5saW5lQWxpZ24gIT09ICdlbmQnKVxuICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoXG4gICAgICBvdmVybGF5UmVmZXJlbmNlRWRnZSwgYCR7cmVsYXRpdmVMaW5lUG9zaXRpb259JWApO1xuICBzZXRWdHRMaW5lQWxpZ24oY3VlQ29udGFpbmVyRG9tLCB2dHQsIGRpcmVjdGlvbiwgcmVsYXRpdmVMaW5lUG9zaXRpb24pO1xufTtcblxuLyoqXG4gKiBEZWZpbmVzIHRoZSB3cml0aW5nIGRpcmVjdGlvbiBvZiB0aGUgQ3VlIEJveFxuICogaHR0cHM6Ly93My5vcmcvVFIvd2VidnR0MS8jd2VidnR0LWN1ZS13cml0aW5nLWRpcmVjdGlvblxuICovXG5jb25zdCBzZXRWdHRXcml0aW5nRGlyZWN0aW9uQW5kQ3VlQm94UG9zaXRpb25pbmcgPSAoXG4gIGN1ZUNvbnRhaW5lckRvbTogRE9NLCB2dHQ6IFZUVFByb3BlcnRpZXMsXG4gIHN1YnRpdGxlT3ZlcmxheVNpemU6IFNpemUsXG4pID0+IHtcbiAgc3dpdGNoICh2dHQudmVydGljYWwpIHtcbiAgY2FzZSAnJzpcbiAgICBjdWVDb250YWluZXJEb20uY3NzKCd3cml0aW5nLW1vZGUnLCAnaG9yaXpvbnRhbC10YicpO1xuICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoRGlyZWN0aW9uLkJvdHRvbSwgJzAnKTtcbiAgICBzZXRWdHRMaW5lKGN1ZUNvbnRhaW5lckRvbSwgdnR0LCBEaXJlY3Rpb24uQm90dG9tLCBzdWJ0aXRsZU92ZXJsYXlTaXplKTtcbiAgICBicmVhaztcbiAgY2FzZSBWdHRWZXJ0aWNhbFdyaXRpbmcuR3Jvd2luZ1JpZ2h0OlxuICAgIHNldEN1ZUJveFBvc2l0aW9uRm9yVmVydGljYWxXcml0aW5nKFxuICAgICAgY3VlQ29udGFpbmVyRG9tLCBEaXJlY3Rpb24uUmlnaHQsIHZ0dCwgc3VidGl0bGVPdmVybGF5U2l6ZSk7XG4gICAgYnJlYWs7XG4gIGNhc2UgVnR0VmVydGljYWxXcml0aW5nLkdyb3dpbmdMZWZ0OlxuICAgIHNldEN1ZUJveFBvc2l0aW9uRm9yVmVydGljYWxXcml0aW5nKFxuICAgICAgY3VlQ29udGFpbmVyRG9tLCBEaXJlY3Rpb24uTGVmdCwgdnR0LCBzdWJ0aXRsZU92ZXJsYXlTaXplKTtcbiAgICBicmVhaztcbiAgfVxufTtcblxuY29uc3Qgc2V0Q3VlQm94UG9zaXRpb25Gb3JWZXJ0aWNhbFdyaXRpbmcgPSAoXG4gIGN1ZUNvbnRhaW5lckRvbTogRE9NLFxuICBkaXJlY3Rpb246IFZlcnRpY2FsV3JpdGluZ0RpcmVjdGlvbixcbiAgdnR0OiBWVFRQcm9wZXJ0aWVzLFxuICBzdWJ0aXRsZU92ZXJsYXlTaXplOiBTaXplLFxuKSA9PiB7XG4gICAgY29uc3Qgd3JpdGluZ01vZGUgPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5SaWdodCA/XG4gICAgICAndmVydGljYWwtbHInIDogJ3ZlcnRpY2FsLXJsJztcblxuICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoJ3dyaXRpbmctbW9kZScsIHdyaXRpbmdNb2RlKTtcbiAgICBjdWVDb250YWluZXJEb20uY3NzKERpcmVjdGlvbi5Ub3AsICcwJyk7XG4gICAgc2V0VnR0TGluZShjdWVDb250YWluZXJEb20sIHZ0dCwgZGlyZWN0aW9uLCBzdWJ0aXRsZU92ZXJsYXlTaXplKTtcbn07XG5cbi8qKlxuICogRGVmaW5lcyB0aGUgQ3VlIHBvc2l0aW9uIGFsaWdubWVudFxuICogaHR0cHM6Ly93My5vcmcvVFIvd2VidnR0MS8jd2VidnR0LWN1ZS1wb3NpdGlvbi1hbGlnbm1lbnRcbiAqL1xuY29uc3Qgc2V0VnR0UG9zaXRpb25BbGlnbiA9IChjdWVDb250YWluZXJEb206IERPTSwgdnR0OiBWVFRQcm9wZXJ0aWVzLCBkaXJlY3Rpb246IERpcmVjdGlvbikgPT4ge1xuICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvd2VidnR0MS8jd2VidnR0LWN1ZS1wb3NpdGlvblxuICBpZiAodnR0LnBvc2l0aW9uID09PSAnYXV0bycpIHtcbiAgICBjdWVDb250YWluZXJEb20uY3NzKGRpcmVjdGlvbiwgJzAnKTtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKHZ0dC5wb3NpdGlvbkFsaWduKSB7XG4gICAgICBjYXNlICdsaW5lLWxlZnQnOlxuICAgICAgICBjdWVDb250YWluZXJEb20uY3NzKGRpcmVjdGlvbiwgYCR7dnR0LnBvc2l0aW9ufSVgKTtcbiAgICAgICAgY3VlQ29udGFpbmVyRG9tLmNzcyhEaXJlY3Rpb25QYWlyLmdldChkaXJlY3Rpb24pLCAnYXV0bycpO1xuICAgICAgICBjdWVDb250YWluZXJEb20uY3NzKCdqdXN0aWZ5LWNvbnRlbnQnLCAnZmxleC1zdGFydCcpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoZGlyZWN0aW9uLCBgJHt2dHQucG9zaXRpb24gLSB2dHQuc2l6ZSAvIDJ9JWApO1xuICAgICAgICBjdWVDb250YWluZXJEb20uY3NzKERpcmVjdGlvblBhaXIuZ2V0KGRpcmVjdGlvbiksICdhdXRvJyk7XG4gICAgICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoJ2p1c3RpZnktY29udGVudCcsICdjZW50ZXInKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdsaW5lLXJpZ2h0JzpcbiAgICAgICAgY3VlQ29udGFpbmVyRG9tLmNzcyhkaXJlY3Rpb24sICdhdXRvJyk7XG4gICAgICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoRGlyZWN0aW9uUGFpci5nZXQoZGlyZWN0aW9uKSwgYCR7MTAwIC0gdnR0LnBvc2l0aW9ufSVgKTtcbiAgICAgICAgY3VlQ29udGFpbmVyRG9tLmNzcygnanVzdGlmeS1jb250ZW50JywgJ2ZsZXgtZW5kJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgY3VlQ29udGFpbmVyRG9tLmNzcyhkaXJlY3Rpb24sIGAke3Z0dC5wb3NpdGlvbn0lYCk7XG4gICAgICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoJ2p1c3RpZnktY29udGVudCcsICdmbGV4LXN0YXJ0Jyk7XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCBjb3VudExpbmVzID0gKGlubmVySHRtbDogc3RyaW5nKSA9PlxuICBpbm5lckh0bWwuc3BsaXQoJzxiciAvPicpLmxlbmd0aDtcblxuY29uc3Qgc2V0Q3NzRm9yQ2VudGVyTGluZUFsaWduID0gKFxuICBjdWVDb250YWluZXJEb206IERPTSxcbiAgZGlyZWN0aW9uOiBEaXJlY3Rpb24sXG4gIHJlbGF0aXZlQ3VlQm94UG9zaXRpb246IG51bWJlcikgPT4ge1xuICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgIGNhc2UgRGlyZWN0aW9uLkJvdHRvbTpcbiAgICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGVZKC01MCUpJyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIERpcmVjdGlvbi5MZWZ0OlxuICAgICAgY3VlQ29udGFpbmVyRG9tLmNzcygndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZVgoNTAlKScpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBEaXJlY3Rpb24uUmlnaHQ6XG4gICAgICBjdWVDb250YWluZXJEb20uY3NzKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlWCgtNTAlKScpO1xuICAgICAgYnJlYWs7XG4gIH1cbn07XG5cbmNvbnN0IHNldENzc0ZvckVuZExpbmVBbGlnbiA9IChcbiAgY3VlQ29udGFpbmVyRG9tOiBET00sXG4gIGRpcmVjdGlvbjogRGlyZWN0aW9uLFxuICBvZmZzZXQ6IG51bWJlcikgPT4ge1xuICAgICAgY29uc3Qgb3Bvc2l0ZVRvT3ZlcmxheVJlZmVyZW5jZUVkZ2UgPSBkaXJlY3Rpb247XG4gICAgICBjdWVDb250YWluZXJEb20uY3NzKG9wb3NpdGVUb092ZXJsYXlSZWZlcmVuY2VFZGdlLCBgJHsxMDAgLSBvZmZzZXR9JWApO1xufTtcblxuZXhwb3J0IG5hbWVzcGFjZSBWdHRVdGlscyB7XG4gIGV4cG9ydCBjb25zdCBzZXRWdHRDdWVCb3hTdHlsZXMgPSAoXG4gICAgY3VlQ29udGFpbmVyOiBTdWJ0aXRsZUxhYmVsLFxuICAgIHN1YnRpdGxlT3ZlcmxheVNpemU6IFNpemUsXG4gICkgPT4ge1xuICAgIGNvbnN0IHZ0dCA9IGN1ZUNvbnRhaW5lci52dHQ7XG4gICAgY29uc3QgY3VlQ29udGFpbmVyRG9tID0gY3VlQ29udGFpbmVyLmdldERvbUVsZW1lbnQoKTtcblxuXG4gICAgc2V0RGVmYXVsdFZ0dFN0eWxlcyhjdWVDb250YWluZXJEb20sIHZ0dCk7XG5cbiAgICBsaW5lQ291bnQgPSBjb3VudExpbmVzKGN1ZUNvbnRhaW5lci5nZXRUZXh0KCkpO1xuICAgIHNldFZ0dFdyaXRpbmdEaXJlY3Rpb25BbmRDdWVCb3hQb3NpdGlvbmluZyhjdWVDb250YWluZXJEb20sIHZ0dCwgc3VidGl0bGVPdmVybGF5U2l6ZSk7XG5cbiAgICAvLyBodHRwczovL3czLm9yZy9UUi93ZWJ2dHQxLyN3ZWJ2dHQtY3VlLXRleHQtYWxpZ25tZW50XG4gICAgY29uc3QgdGV4dEFsaWduID0gdnR0LmFsaWduID09PSAnbWlkZGxlJyA/ICdjZW50ZXInIDogdnR0LmFsaWduO1xuICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoJ3RleHQtYWxpZ24nLCB0ZXh0QWxpZ24pO1xuXG4gICAgLy8gaHR0cHM6Ly93My5vcmcvVFIvd2VidnR0MS8jd2VidnR0LWN1ZS1zaXplXG4gICAgY29uc3QgY29udGFpbmVyU2l6ZSA9IHZ0dC5zaXplO1xuICAgIGlmICh2dHQudmVydGljYWwgPT09ICcnKSB7XG4gICAgICBjdWVDb250YWluZXJEb20uY3NzKCd3aWR0aCcsIGAke2NvbnRhaW5lclNpemV9JWApO1xuICAgICAgc2V0VnR0UG9zaXRpb25BbGlnbihjdWVDb250YWluZXJEb20sIHZ0dCwgRGlyZWN0aW9uLkxlZnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdWVDb250YWluZXJEb20uY3NzKCdoZWlnaHQnLCBgJHtjb250YWluZXJTaXplfSVgKTtcbiAgICAgIHNldFZ0dFBvc2l0aW9uQWxpZ24oY3VlQ29udGFpbmVyRG9tLCB2dHQsIERpcmVjdGlvbi5Ub3ApO1xuICAgIH1cbiAgfTtcblxuICAvKiogaHR0cHM6Ly93d3cudzMub3JnL1RSL3dlYnZ0dDEvI3JlZ2lvbnNcbiAgICogIGh0dHBzOi8vd3d3LnNwZWVjaHBhZC5jb20vY2FwdGlvbnMvd2VidnR0I3RvY18xNlxuICAgKi9cbiAgZXhwb3J0IGNvbnN0IHNldFZ0dFJlZ2lvblN0eWxlcyA9IChcbiAgICByZWdpb25Db250YWluZXI6IFN1YnRpdGxlUmVnaW9uQ29udGFpbmVyLFxuICAgIHJlZ2lvbjogVlRUUmVnaW9uUHJvcGVydGllcyxcbiAgICBvdmVybGF5U2l6ZTogU2l6ZSxcbiAgKSA9PiB7XG4gICAgY29uc3QgcmVnaW9uQ29udGFpbmVyRG9tID0gcmVnaW9uQ29udGFpbmVyLmdldERvbUVsZW1lbnQoKTtcbiAgICBjb25zdCByZWdpb25Qb3NpdGlvblggPSBvdmVybGF5U2l6ZS53aWR0aCAqIHJlZ2lvbi52aWV3cG9ydEFuY2hvclggLyAxMDAgLSAoKG92ZXJsYXlTaXplLndpZHRoICogcmVnaW9uLndpZHRoIC8gMTAwKSAqIHJlZ2lvbi5yZWdpb25BbmNob3JYIC8gMTAwKTtcbiAgICBjb25zdCByZWdpb25Qb3NpdGlvblkgPSBvdmVybGF5U2l6ZS5oZWlnaHQgKiByZWdpb24udmlld3BvcnRBbmNob3JZIC8gMTAwIC0gKChyZWdpb24ubGluZXMgKiBsaW5lSGVpZ2h0KSAqIHJlZ2lvbi5yZWdpb25BbmNob3JZIC8gMTAwKTtcbiAgICByZWdpb25Db250YWluZXJEb20uY3NzKCdwb3NpdGlvbicsICdhYnNvbHV0ZScpO1xuICAgIHJlZ2lvbkNvbnRhaW5lckRvbS5jc3MoJ292ZXJmbG93JywgJ2hpZGRlbicpO1xuICAgIHJlZ2lvbkNvbnRhaW5lckRvbS5jc3MoJ3dpZHRoJywgYCR7cmVnaW9uLndpZHRofSVgKTtcbiAgICByZWdpb25Db250YWluZXJEb20uY3NzKERpcmVjdGlvbi5MZWZ0LCBgJHtyZWdpb25Qb3NpdGlvblh9cHhgKTtcbiAgICByZWdpb25Db250YWluZXJEb20uY3NzKERpcmVjdGlvbi5SaWdodCwgJ3Vuc2V0Jyk7XG4gICAgcmVnaW9uQ29udGFpbmVyRG9tLmNzcyhEaXJlY3Rpb24uVG9wLCBgJHtyZWdpb25Qb3NpdGlvbll9cHhgKTtcbiAgICByZWdpb25Db250YWluZXJEb20uY3NzKERpcmVjdGlvbi5Cb3R0b20sICd1bnNldCcpO1xuICAgIHJlZ2lvbkNvbnRhaW5lckRvbS5jc3MoJ2hlaWdodCcsIGAke3JlZ2lvbi5saW5lcyAqIGxpbmVIZWlnaHR9cHhgKTtcbiAgfTtcbn1cbiJdfQ==
