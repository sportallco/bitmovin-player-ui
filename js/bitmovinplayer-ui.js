(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}(g.bitmovin || (g.bitmovin = {})).playerui = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoBackButton = void 0;
var button_1 = require("../../../ts/components/button");
var GoBackButton = /** @class */ (function (_super) {
    __extends(GoBackButton, _super);
    function GoBackButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        var defaultConfig = {
            cssClass: 'ui-gobackbutton',
            text: 'Go Back',
            ariaLabel: 'Go Back',
        };
        _this.config = _this.mergeConfig(config, defaultConfig, _this.config);
        return _this;
    }
    GoBackButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.onClick.subscribe(function () {
            console.log('[GoBack] Button clicked');
            window.bitmovin.customMessageHandler.sendAsynchronous('goBack');
        });
        player.on(player.exports.PlayerEvent.ViewModeChanged, function () {
            player.getViewMode() === 'fullscreen' ? _this.hide() : _this.show();
        });
    };
    return GoBackButton;
}(button_1.Button));
exports.GoBackButton = GoBackButton;

},{"../../../ts/components/button":17}],2:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackRewindButton = exports.PlaybackForwardButton = exports.PlaybackJumpButtons = void 0;
var button_1 = require("../../../ts/components/button");
var i18n_1 = require("../../../ts/localization/i18n");
var playerutils_1 = require("../../../ts/playerutils");
var PlaybackJumpButtons = /** @class */ (function (_super) {
    __extends(PlaybackJumpButtons, _super);
    function PlaybackJumpButtons(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-playbackjumpbuttons',
            text: config.text,
            ariaLabel: config.ariaLabel,
            skipTime: 0,
        }, _this.config);
        return _this;
    }
    PlaybackJumpButtons.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var liveStreamDetector = new playerutils_1.PlayerUtils.LiveStreamDetector(player, uimanager);
        liveStreamDetector.onLiveChanged.subscribe(function (sender, args) {
            if (player.isLive()) {
                _this.hide();
            }
            else {
                _this.show();
            }
        });
        liveStreamDetector.detect();
        this.onClick.subscribe(function () {
            var currentTime = player.getCurrentTime();
            var duration = player.getDuration();
            if (!player.isLive()) {
                var newTime = currentTime + _this.config.skipTime;
                newTime = Math.max(0, Math.min(newTime, duration));
                player.seek(newTime, 'ui');
            }
        });
        uimanager.onControlsShow.subscribe(function () {
            _this.show();
        });
        uimanager.onControlsHide.subscribe(function () {
            _this.hide();
        });
    };
    return PlaybackJumpButtons;
}(button_1.Button));
exports.PlaybackJumpButtons = PlaybackJumpButtons;
var PlaybackForwardButton = /** @class */ (function (_super) {
    __extends(PlaybackForwardButton, _super);
    function PlaybackForwardButton(config) {
        return _super.call(this, __assign(__assign({}, config), { cssClass: 'ui-playbackforwardbutton', text: i18n_1.i18n.getLocalizer('forward'), ariaLabel: i18n_1.i18n.getLocalizer('forward') })) || this;
    }
    return PlaybackForwardButton;
}(PlaybackJumpButtons));
exports.PlaybackForwardButton = PlaybackForwardButton;
var PlaybackRewindButton = /** @class */ (function (_super) {
    __extends(PlaybackRewindButton, _super);
    function PlaybackRewindButton(config) {
        return _super.call(this, __assign(__assign({}, config), { cssClass: 'ui-playbackrewindbutton', text: i18n_1.i18n.getLocalizer('rewind'), ariaLabel: i18n_1.i18n.getLocalizer('rewind') })) || this;
    }
    return PlaybackRewindButton;
}(PlaybackJumpButtons));
exports.PlaybackRewindButton = PlaybackRewindButton;

},{"../../../ts/components/button":17,"../../../ts/localization/i18n":91,"../../../ts/playerutils":97}],3:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackJumpControlsOverlay = void 0;
var container_1 = require("../../../ts/components/container");
var playbackjumpbutton_1 = require("./playbackjumpbutton");
/**
 * Overlay containing the playback forward and rewind buttons.
 */
var PlaybackJumpControlsOverlay = /** @class */ (function (_super) {
    __extends(PlaybackJumpControlsOverlay, _super);
    function PlaybackJumpControlsOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.forwardButton = new playbackjumpbutton_1.PlaybackForwardButton({ skipTime: 10 });
        _this.rewindButton = new playbackjumpbutton_1.PlaybackRewindButton({ skipTime: -10 });
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-playbackforward-overlay',
            components: [_this.forwardButton, _this.rewindButton],
        }, _this.config);
        return _this;
    }
    return PlaybackJumpControlsOverlay;
}(container_1.Container));
exports.PlaybackJumpControlsOverlay = PlaybackJumpControlsOverlay;

},{"../../../ts/components/container":24,"./playbackjumpbutton":2}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RadioModeController = void 0;
var eventdispatcher_1 = require("../../../../ts/eventdispatcher");
/**
 * Handles the radio mode state.
 */
var RadioModeController = /** @class */ (function () {
    function RadioModeController() {
        this.events = {
            onChanged: new eventdispatcher_1.EventDispatcher(),
        };
        this.activated = false;
    }
    /**
     * @param activated - Boolean state of the radio mode.
     */
    RadioModeController.prototype.setRadioMode = function (activated) {
        this.activated = activated;
        this.onChangedEvent();
    };
    RadioModeController.prototype.toggleRadioMode = function () {
        this.setRadioMode(!this.activated);
    };
    /**
     * @returns Boolean state of the radio mode.
     */
    RadioModeController.prototype.isRadioModeActivated = function () {
        return this.activated;
    };
    /**
     * Trigger the onChanged event.
     */
    RadioModeController.prototype.onChangedEvent = function () {
        this.events.onChanged.dispatch(this, { activated: this.activated });
    };
    Object.defineProperty(RadioModeController.prototype, "onChanged", {
        /**
         * Get the onChanged event.
         */
        get: function () {
            return this.events.onChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    return RadioModeController;
}());
exports.RadioModeController = RadioModeController;

},{"../../../../ts/eventdispatcher":86}],5:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RadioModeToggleButton = void 0;
var radiomodecontroller_1 = require("./radiomodecontroller");
var togglebutton_1 = require("../../../../ts/components/togglebutton");
var RadioModeToggleButton = /** @class */ (function (_super) {
    __extends(RadioModeToggleButton, _super);
    function RadioModeToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        var defaultConfig = {
            cssClass: 'ui-radiomodetogglebutton',
            text: 'Radio Mode',
            ariaLabel: 'Radio Mode',
        };
        _this.config = _this.mergeConfig(config, defaultConfig, _this.config);
        _this.radioModeController = new radiomodecontroller_1.RadioModeController();
        return _this;
    }
    RadioModeToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.radioModeController.onChanged.subscribe(function (sender, args) {
            if (window.bitmovin.customMessageHandler) {
                window.bitmovin.customMessageHandler.sendAsynchronous('radioModeChanged', JSON.stringify({ activated: args.activated }));
            }
        });
        if (window.bitmovin.customMessageHandler) {
            window.bitmovin.customMessageHandler.on('radioModeChanged', function (data) {
                if (data) {
                    var activated = JSON.parse(data).activated;
                    _this.radioModeController.setRadioMode(activated);
                    if (activated) {
                        _this.on();
                    }
                    else {
                        _this.off();
                    }
                }
            });
            this.onClick.subscribe(function () {
                console.log('[RadioModeToggleButton] Button clicked');
                _this.radioModeController.toggleRadioMode();
                if (_this.radioModeController.isRadioModeActivated()) {
                    _this.on();
                }
                else {
                    _this.off();
                }
                window.bitmovin.customMessageHandler.sendAsynchronous('radioModeChanged', JSON.stringify({
                    before: !_this.radioModeController.isRadioModeActivated(),
                    after: _this.radioModeController.isRadioModeActivated(),
                    activated: _this.radioModeController.isRadioModeActivated(),
                }));
            });
        }
        if (this.radioModeController.isRadioModeActivated()) {
            this.on();
        }
        else {
            this.off();
        }
    };
    return RadioModeToggleButton;
}(togglebutton_1.ToggleButton));
exports.RadioModeToggleButton = RadioModeToggleButton;

},{"../../../../ts/components/togglebutton":74,"./radiomodecontroller":4}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayUtils = void 0;
var ArrayUtils;
(function (ArrayUtils) {
    /**
     * Removes an item from an array.
     * @param array the array that may contain the item to remove
     * @param item the item to remove from the array
     * @returns {any} the removed item or null if it wasn't part of the array
     */
    function remove(array, item) {
        var index = array.indexOf(item);
        if (index > -1) {
            return array.splice(index, 1)[0];
        }
        else {
            return null;
        }
    }
    ArrayUtils.remove = remove;
})(ArrayUtils = exports.ArrayUtils || (exports.ArrayUtils = {}));

},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioTrackSwitchHandler = void 0;
var i18n_1 = require("./localization/i18n");
/**
 * Helper class to handle all audio tracks related events
 *
 * This class listens to player events as well as the `ListSelector` event if selection changed
 */
var AudioTrackSwitchHandler = /** @class */ (function () {
    function AudioTrackSwitchHandler(player, element, uimanager) {
        var _this = this;
        this.addAudioTrack = function (event) {
            var audioTrack = event.track;
            if (!_this.listElement.hasItem(audioTrack.id)) {
                _this.listElement.addItem(audioTrack.id, i18n_1.i18n.getLocalizer(audioTrack.label), true);
            }
        };
        this.removeAudioTrack = function (event) {
            var audioTrack = event.track;
            if (_this.listElement.hasItem(audioTrack.id)) {
                _this.listElement.removeItem(audioTrack.id);
            }
        };
        this.selectCurrentAudioTrack = function () {
            var currentAudioTrack = _this.player.getAudio();
            // HLS streams don't always provide this, so we have to check
            if (currentAudioTrack) {
                _this.listElement.selectItem(currentAudioTrack.id);
            }
        };
        this.refreshAudioTracks = function () {
            var audioTracks = _this.player.getAvailableAudio();
            var audioTrackToListItem = function (audioTrack) {
                return { key: audioTrack.id, label: audioTrack.label };
            };
            _this.listElement.synchronizeItems(audioTracks.map(audioTrackToListItem));
            _this.selectCurrentAudioTrack();
        };
        this.player = player;
        this.listElement = element;
        this.uimanager = uimanager;
        this.bindSelectionEvent();
        this.bindPlayerEvents();
        this.refreshAudioTracks();
    }
    AudioTrackSwitchHandler.prototype.bindSelectionEvent = function () {
        var _this = this;
        this.listElement.onItemSelected.subscribe(function (_, value) {
            _this.player.setAudio(value);
        });
    };
    AudioTrackSwitchHandler.prototype.bindPlayerEvents = function () {
        // Update selection when selected track has changed
        this.player.on(this.player.exports.PlayerEvent.AudioChanged, this.selectCurrentAudioTrack);
        // Update tracks when source goes away
        this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.refreshAudioTracks);
        // Update tracks when the period within a source changes
        this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshAudioTracks);
        // Update tracks when a track is added or removed
        this.player.on(this.player.exports.PlayerEvent.AudioAdded, this.addAudioTrack);
        this.player.on(this.player.exports.PlayerEvent.AudioRemoved, this.removeAudioTrack);
        this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshAudioTracks);
    };
    return AudioTrackSwitchHandler;
}());
exports.AudioTrackSwitchHandler = AudioTrackSwitchHandler;

},{"./localization/i18n":91}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserUtils = void 0;
var BrowserUtils = /** @class */ (function () {
    function BrowserUtils() {
    }
    Object.defineProperty(BrowserUtils, "isMobile", {
        // isMobile only needs to be evaluated once (it cannot change during a browser session)
        // Mobile detection according to Mozilla recommendation: "In summary, we recommend looking for the string “Mobi”
        // anywhere in the User Agent to detect a mobile device."
        // https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && /Mobi/.test(navigator.userAgent);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isChrome", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && /Chrome/.test(navigator.userAgent);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isAndroid", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && /Android/.test(navigator.userAgent) && !this.isHisense;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isIOS", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && /iPad|iPhone|iPod/.test(navigator.userAgent);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isMacIntel", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && navigator.platform === 'MacIntel';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isHisense", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && /Hisense/.test(navigator.userAgent);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isPlayStation", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && /PlayStation/i.test(navigator.userAgent);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isWebOs", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return (navigator &&
                navigator.userAgent &&
                (navigator.userAgent.includes('Web0S') || navigator.userAgent.includes('NetCast')));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isTizen", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && /Tizen/.test(navigator.userAgent);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isTouchSupported", {
        // https://hacks.mozilla.org/2013/04/detecting-touch-its-the-why-not-the-how/
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return 'ontouchstart' in window || navigator && navigator.userAgent && (navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0);
        },
        enumerable: false,
        configurable: true
    });
    BrowserUtils.windowExists = function () {
        return typeof window !== 'undefined';
    };
    return BrowserUtils;
}());
exports.BrowserUtils = BrowserUtils;

},{}],9:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdClickOverlay = void 0;
var clickoverlay_1 = require("./clickoverlay");
/**
 * A simple click capture overlay for clickThroughUrls of ads.
 */
var AdClickOverlay = /** @class */ (function (_super) {
    __extends(AdClickOverlay, _super);
    function AdClickOverlay() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AdClickOverlay.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var clickThroughCallback = null;
        player.on(player.exports.PlayerEvent.AdStarted, function (event) {
            var ad = event.ad;
            _this.setUrl(ad.clickThroughUrl);
            clickThroughCallback = ad.clickThroughUrlOpened;
        });
        // Clear click-through URL when ad has finished
        var adFinishedHandler = function () {
            _this.setUrl(null);
        };
        player.on(player.exports.PlayerEvent.AdFinished, adFinishedHandler);
        player.on(player.exports.PlayerEvent.AdSkipped, adFinishedHandler);
        player.on(player.exports.PlayerEvent.AdError, adFinishedHandler);
        this.onClick.subscribe(function () {
            // Pause the ad when overlay is clicked
            player.pause('ui-ad-click-overlay');
            if (clickThroughCallback) {
                clickThroughCallback();
            }
        });
    };
    return AdClickOverlay;
}(clickoverlay_1.ClickOverlay));
exports.AdClickOverlay = AdClickOverlay;

},{"./clickoverlay":21}],10:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdMessageLabel = void 0;
var label_1 = require("./label");
var stringutils_1 = require("../stringutils");
var i18n_1 = require("../localization/i18n");
/**
 * A label that displays a message about a running ad, optionally with a countdown.
 */
var AdMessageLabel = /** @class */ (function (_super) {
    __extends(AdMessageLabel, _super);
    function AdMessageLabel(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-label-ad-message',
            text: i18n_1.i18n.getLocalizer('ads.remainingTime'),
        }, _this.config);
        return _this;
    }
    AdMessageLabel.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var text = config.text;
        var updateMessageHandler = function () {
            _this.setText(stringutils_1.StringUtils.replaceAdMessagePlaceholders(i18n_1.i18n.performLocalization(text), null, player));
        };
        var adStartHandler = function (event) {
            var uiConfig = event.ad.uiConfig;
            text = uiConfig && uiConfig.message || config.text;
            updateMessageHandler();
            player.on(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);
        };
        var adEndHandler = function () {
            player.off(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);
        };
        player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);
        player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);
        player.on(player.exports.PlayerEvent.AdError, adEndHandler);
        player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);
    };
    return AdMessageLabel;
}(label_1.Label));
exports.AdMessageLabel = AdMessageLabel;

},{"../localization/i18n":91,"../stringutils":110,"./label":31}],11:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdSkipButton = void 0;
var button_1 = require("./button");
var stringutils_1 = require("../stringutils");
/**
 * A button that is displayed during ads and can be used to skip the ad.
 */
var AdSkipButton = /** @class */ (function (_super) {
    __extends(AdSkipButton, _super);
    function AdSkipButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-button-ad-skip',
            untilSkippableMessage: 'Skip ad in {remainingTime}',
            skippableMessage: 'Skip ad',
        }, _this.config);
        return _this;
    }
    AdSkipButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var untilSkippableMessage = config.untilSkippableMessage;
        var skippableMessage = config.skippableMessage;
        var skipOffset = -1;
        var updateSkipMessageHandler = function () {
            _this.show();
            // Update the skip message on the button
            if (player.getCurrentTime() < skipOffset) {
                _this.setText(stringutils_1.StringUtils.replaceAdMessagePlaceholders(untilSkippableMessage, skipOffset, player));
                _this.disable();
            }
            else {
                _this.setText(skippableMessage);
                _this.enable();
            }
        };
        var adStartHandler = function (event) {
            var ad = event.ad;
            skipOffset = ad.skippableAfter;
            untilSkippableMessage = ad.uiConfig && ad.uiConfig.untilSkippableMessage || config.untilSkippableMessage;
            skippableMessage = ad.uiConfig && ad.uiConfig.skippableMessage || config.skippableMessage;
            // Display this button only if ad is skippable.
            // Non-skippable ads will return -1 for skippableAfter for player version < v8.3.0.
            if (typeof skipOffset === 'number' && skipOffset >= 0) {
                updateSkipMessageHandler();
                player.on(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);
            }
            else {
                _this.hide();
            }
        };
        var adEndHandler = function () {
            player.off(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);
        };
        player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);
        player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);
        player.on(player.exports.PlayerEvent.AdError, adEndHandler);
        player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);
        this.onClick.subscribe(function () {
            // Try to skip the ad (this only works if it is skippable so we don't need to take extra care of that here)
            player.ads.skip();
        });
    };
    return AdSkipButton;
}(button_1.Button));
exports.AdSkipButton = AdSkipButton;

},{"../stringutils":110,"./button":17}],12:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AirPlayToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles Apple AirPlay.
 */
var AirPlayToggleButton = /** @class */ (function (_super) {
    __extends(AirPlayToggleButton, _super);
    function AirPlayToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-airplaytogglebutton',
            text: i18n_1.i18n.getLocalizer('appleAirplay'),
        }, _this.config);
        return _this;
    }
    AirPlayToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        if (!player.isAirplayAvailable) {
            // If the player does not support Airplay (player 7.0), we just hide this component and skip configuration
            this.hide();
            return;
        }
        this.onClick.subscribe(function () {
            if (player.isAirplayAvailable()) {
                player.showAirplayTargetPicker();
            }
            else {
                if (console) {
                    console.log('AirPlay unavailable');
                }
            }
        });
        var airPlayAvailableHandler = function () {
            if (player.isAirplayAvailable()) {
                _this.show();
            }
            else {
                _this.hide();
            }
        };
        var airPlayChangedHandler = function () {
            if (player.isAirplayActive()) {
                _this.on();
            }
            else {
                _this.off();
            }
        };
        player.on(player.exports.PlayerEvent.AirplayAvailable, airPlayAvailableHandler);
        player.on(player.exports.PlayerEvent.AirplayChanged, airPlayChangedHandler);
        // Startup init
        airPlayAvailableHandler(); // Hide button if AirPlay is not available
        airPlayChangedHandler();
    };
    return AirPlayToggleButton;
}(togglebutton_1.ToggleButton));
exports.AirPlayToggleButton = AirPlayToggleButton;

},{"../localization/i18n":91,"./togglebutton":74}],13:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioQualitySelectBox = void 0;
var selectbox_1 = require("./selectbox");
var i18n_1 = require("../localization/i18n");
/**
 * A select box providing a selection between 'auto' and the available audio qualities.
 */
var AudioQualitySelectBox = /** @class */ (function (_super) {
    __extends(AudioQualitySelectBox, _super);
    function AudioQualitySelectBox(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-audioqualityselectbox'],
        }, _this.config);
        return _this;
    }
    AudioQualitySelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var selectCurrentAudioQuality = function () {
            _this.selectItem(player.getAudioQuality().id);
        };
        var updateAudioQualities = function () {
            var audioQualities = player.getAvailableAudioQualities();
            _this.clearItems();
            // Add entry for automatic quality switching (default setting)
            _this.addItem('auto', i18n_1.i18n.getLocalizer('auto'));
            // Add audio qualities
            for (var _i = 0, audioQualities_1 = audioQualities; _i < audioQualities_1.length; _i++) {
                var audioQuality = audioQualities_1[_i];
                _this.addItem(audioQuality.id, audioQuality.label);
            }
            // Select initial quality
            selectCurrentAudioQuality();
        };
        this.onItemSelected.subscribe(function (sender, value) {
            player.setAudioQuality(value);
        });
        // Update qualities when audio track has changed
        player.on(player.exports.PlayerEvent.AudioChanged, updateAudioQualities);
        // Update qualities when source goes away
        player.on(player.exports.PlayerEvent.SourceUnloaded, updateAudioQualities);
        // Update qualities when the period within a source changes
        player.on(player.exports.PlayerEvent.PeriodSwitched, updateAudioQualities);
        // Update quality selection when quality is changed (from outside)
        player.on(player.exports.PlayerEvent.AudioQualityChanged, selectCurrentAudioQuality);
        if (player.exports.PlayerEvent.AudioQualityAdded) {
            // Update qualities when their availability changed
            // TODO: remove any cast after next player release
            player.on(player.exports.PlayerEvent.AudioQualityAdded, updateAudioQualities);
            player.on(player.exports.PlayerEvent.AudioQualityRemoved, updateAudioQualities);
        }
        uimanager.getConfig().events.onUpdated.subscribe(updateAudioQualities);
    };
    return AudioQualitySelectBox;
}(selectbox_1.SelectBox));
exports.AudioQualitySelectBox = AudioQualitySelectBox;

},{"../localization/i18n":91,"./selectbox":46}],14:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioTrackListBox = void 0;
var listbox_1 = require("./listbox");
var audiotrackutils_1 = require("../audiotrackutils");
/**
 * A element that is similar to a select box where the user can select a subtitle
 */
var AudioTrackListBox = /** @class */ (function (_super) {
    __extends(AudioTrackListBox, _super);
    function AudioTrackListBox() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AudioTrackListBox.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        new audiotrackutils_1.AudioTrackSwitchHandler(player, this, uimanager);
    };
    return AudioTrackListBox;
}(listbox_1.ListBox));
exports.AudioTrackListBox = AudioTrackListBox;

},{"../audiotrackutils":7,"./listbox":32}],15:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioTrackSelectBox = void 0;
var selectbox_1 = require("./selectbox");
var audiotrackutils_1 = require("../audiotrackutils");
/**
 * A select box providing a selection between available audio tracks (e.g. different languages).
 */
var AudioTrackSelectBox = /** @class */ (function (_super) {
    __extends(AudioTrackSelectBox, _super);
    function AudioTrackSelectBox(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-audiotrackselectbox'],
        }, _this.config);
        return _this;
    }
    AudioTrackSelectBox.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        new audiotrackutils_1.AudioTrackSwitchHandler(player, this, uimanager);
    };
    return AudioTrackSelectBox;
}(selectbox_1.SelectBox));
exports.AudioTrackSelectBox = AudioTrackSelectBox;

},{"../audiotrackutils":7,"./selectbox":46}],16:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BufferingOverlay = void 0;
var container_1 = require("./container");
var component_1 = require("./component");
var timeout_1 = require("../timeout");
/**
 * Overlays the player and displays a buffering indicator.
 */
var BufferingOverlay = /** @class */ (function (_super) {
    __extends(BufferingOverlay, _super);
    function BufferingOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.indicators = [
            new component_1.Component({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),
            new component_1.Component({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),
            new component_1.Component({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),
        ];
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-buffering-overlay',
            hidden: true,
            components: _this.indicators,
            showDelayMs: 1000,
        }, _this.config);
        return _this;
    }
    BufferingOverlay.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var overlayShowTimeout = new timeout_1.Timeout(config.showDelayMs, function () {
            _this.show();
        });
        var showOverlay = function () {
            overlayShowTimeout.start();
        };
        var hideOverlay = function () {
            overlayShowTimeout.clear();
            _this.hide();
        };
        player.on(player.exports.PlayerEvent.StallStarted, showOverlay);
        player.on(player.exports.PlayerEvent.StallEnded, hideOverlay);
        player.on(player.exports.PlayerEvent.Play, showOverlay);
        player.on(player.exports.PlayerEvent.Playing, hideOverlay);
        player.on(player.exports.PlayerEvent.Paused, hideOverlay);
        player.on(player.exports.PlayerEvent.Seek, showOverlay);
        player.on(player.exports.PlayerEvent.Seeked, hideOverlay);
        player.on(player.exports.PlayerEvent.TimeShift, showOverlay);
        player.on(player.exports.PlayerEvent.TimeShifted, hideOverlay);
        player.on(player.exports.PlayerEvent.SourceUnloaded, hideOverlay);
        // Show overlay if player is already stalled at init
        if (player.isStalled()) {
            this.show();
        }
    };
    return BufferingOverlay;
}(container_1.Container));
exports.BufferingOverlay = BufferingOverlay;

},{"../timeout":112,"./component":23,"./container":24}],17:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Button = void 0;
var component_1 = require("./component");
var dom_1 = require("../dom");
var eventdispatcher_1 = require("../eventdispatcher");
var i18n_1 = require("../localization/i18n");
/**
 * A simple clickable button.
 */
var Button = /** @class */ (function (_super) {
    __extends(Button, _super);
    function Button(config) {
        var _this = _super.call(this, config) || this;
        _this.buttonEvents = {
            onClick: new eventdispatcher_1.EventDispatcher(),
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-button',
            role: 'button',
            tabIndex: 0,
        }, _this.config);
        return _this;
    }
    Button.prototype.toDomElement = function () {
        var _this = this;
        var buttonElementAttributes = {
            'id': this.config.id,
            'aria-label': i18n_1.i18n.performLocalization(this.config.ariaLabel || this.config.text),
            'class': this.getCssClasses(),
            'type': 'button',
            /**
            * WCAG20 standard to display if a button is pressed or not
            */
            'aria-pressed': 'false',
            'tabindex': this.config.tabIndex.toString(),
        };
        if (this.config.role != null) {
            buttonElementAttributes['role'] = this.config.role;
        }
        // Create the button element with the text label
        var buttonElement = new dom_1.DOM('button', buttonElementAttributes).append(new dom_1.DOM('span', {
            'class': this.prefixCss('label'),
        }).html(i18n_1.i18n.performLocalization(this.config.text)));
        // Listen for the click event on the button element and trigger the corresponding event on the button component
        buttonElement.on('click', function () {
            _this.onClickEvent();
        });
        return buttonElement;
    };
    /**
     * Sets text on the label of the button.
     * @param text the text to put into the label of the button
     */
    Button.prototype.setText = function (text) {
        this.getDomElement().find('.' + this.prefixCss('label')).html(i18n_1.i18n.performLocalization(text));
    };
    Button.prototype.onClickEvent = function () {
        this.buttonEvents.onClick.dispatch(this);
    };
    Object.defineProperty(Button.prototype, "onClick", {
        /**
         * Gets the event that is fired when the button is clicked.
         * @returns {Event<Button<Config>, NoArgs>}
         */
        get: function () {
            return this.buttonEvents.onClick.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    return Button;
}(component_1.Component));
exports.Button = Button;

},{"../dom":84,"../eventdispatcher":86,"../localization/i18n":91,"./component":23}],18:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CastStatusOverlay = void 0;
var container_1 = require("./container");
var label_1 = require("./label");
var i18n_1 = require("../localization/i18n");
/**
 * Overlays the player and displays the status of a Cast session.
 */
var CastStatusOverlay = /** @class */ (function (_super) {
    __extends(CastStatusOverlay, _super);
    function CastStatusOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.statusLabel = new label_1.Label({ cssClass: 'ui-cast-status-label' });
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-cast-status-overlay',
            components: [_this.statusLabel],
            hidden: true,
        }, _this.config);
        return _this;
    }
    CastStatusOverlay.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        player.on(player.exports.PlayerEvent.CastWaitingForDevice, function (event) {
            _this.show();
            // Get device name and update status text while connecting
            var castDeviceName = event.castPayload.deviceName;
            _this.statusLabel.setText(i18n_1.i18n.getLocalizer('connectingTo', { castDeviceName: castDeviceName }));
        });
        player.on(player.exports.PlayerEvent.CastStarted, function (event) {
            // Session is started or resumed
            // For cases when a session is resumed, we do not receive the previous events and therefore show the status panel
            // here too
            _this.show();
            var castDeviceName = event.deviceName;
            _this.statusLabel.setText(i18n_1.i18n.getLocalizer('playingOn', { castDeviceName: castDeviceName }));
        });
        player.on(player.exports.PlayerEvent.CastStopped, function (event) {
            // Cast session gone, hide the status panel
            _this.hide();
        });
    };
    return CastStatusOverlay;
}(container_1.Container));
exports.CastStatusOverlay = CastStatusOverlay;

},{"../localization/i18n":91,"./container":24,"./label":31}],19:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CastToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles casting to a Cast receiver.
 */
var CastToggleButton = /** @class */ (function (_super) {
    __extends(CastToggleButton, _super);
    function CastToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-casttogglebutton',
            text: i18n_1.i18n.getLocalizer('googleCast'),
        }, _this.config);
        return _this;
    }
    CastToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.onClick.subscribe(function () {
            if (player.isCastAvailable()) {
                if (player.isCasting()) {
                    player.castStop();
                }
                else {
                    player.castVideo();
                }
            }
            else {
                if (console) {
                    console.log('Cast unavailable');
                }
            }
        });
        var castAvailableHander = function () {
            if (player.isCastAvailable()) {
                _this.show();
            }
            else {
                _this.hide();
            }
        };
        player.on(player.exports.PlayerEvent.CastAvailable, castAvailableHander);
        // Toggle button 'on' state
        player.on(player.exports.PlayerEvent.CastWaitingForDevice, function () {
            _this.on();
        });
        player.on(player.exports.PlayerEvent.CastStarted, function () {
            // When a session is resumed, there is no CastStart event, so we also need to toggle here for such cases
            _this.on();
        });
        player.on(player.exports.PlayerEvent.CastStopped, function () {
            _this.off();
        });
        // Startup init
        castAvailableHander(); // Hide button if Cast not available
        if (player.isCasting()) {
            this.on();
        }
    };
    return CastToggleButton;
}(togglebutton_1.ToggleButton));
exports.CastToggleButton = CastToggleButton;

},{"../localization/i18n":91,"./togglebutton":74}],20:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CastUIContainer = void 0;
var uicontainer_1 = require("./uicontainer");
var timeout_1 = require("../timeout");
/**
 * The base container for Cast receivers that contains all of the UI and takes care that the UI is shown on
 * certain playback events.
 */
var CastUIContainer = /** @class */ (function (_super) {
    __extends(CastUIContainer, _super);
    function CastUIContainer(config) {
        return _super.call(this, config) || this;
    }
    CastUIContainer.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        /*
         * Show UI on Cast devices at certain playback events
         *
         * Since a Cast receiver does not have a direct HCI, we show the UI on certain playback events to give the user
         * a chance to see on the screen what's going on, e.g. on play/pause or a seek the UI is shown and the user can
         * see the current time and position on the seek bar.
         * The UI is shown permanently while playback is paused, otherwise hides automatically after the configured
         * hide delay time.
         */
        var isUiShown = false;
        var hideUi = function () {
            uimanager.onControlsHide.dispatch(_this);
            isUiShown = false;
        };
        this.castUiHideTimeout = new timeout_1.Timeout(config.hideDelay, hideUi);
        var showUi = function () {
            if (!isUiShown) {
                uimanager.onControlsShow.dispatch(_this);
                isUiShown = true;
            }
        };
        var showUiPermanently = function () {
            showUi();
            _this.castUiHideTimeout.clear();
        };
        var showUiWithTimeout = function () {
            showUi();
            _this.castUiHideTimeout.start();
        };
        var showUiAfterSeek = function () {
            if (player.isPlaying()) {
                showUiWithTimeout();
            }
            else {
                showUiPermanently();
            }
        };
        player.on(player.exports.PlayerEvent.Play, showUiWithTimeout);
        player.on(player.exports.PlayerEvent.Paused, showUiPermanently);
        player.on(player.exports.PlayerEvent.Seek, showUiPermanently);
        player.on(player.exports.PlayerEvent.Seeked, showUiAfterSeek);
        uimanager.getConfig().events.onUpdated.subscribe(showUiWithTimeout);
    };
    CastUIContainer.prototype.release = function () {
        _super.prototype.release.call(this);
        this.castUiHideTimeout.clear();
    };
    return CastUIContainer;
}(uicontainer_1.UIContainer));
exports.CastUIContainer = CastUIContainer;

},{"../timeout":112,"./uicontainer":76}],21:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClickOverlay = void 0;
var button_1 = require("./button");
/**
 * A click overlay that opens an url in a new tab if clicked.
 */
var ClickOverlay = /** @class */ (function (_super) {
    __extends(ClickOverlay, _super);
    function ClickOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-clickoverlay',
            role: _this.config.role,
        }, _this.config);
        return _this;
    }
    ClickOverlay.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.setUrl(this.config.url);
        var element = this.getDomElement();
        element.on('click', function () {
            if (element.data('url')) {
                window.open(element.data('url'), '_blank');
            }
        });
    };
    /**
     * Gets the URL that should be followed when the watermark is clicked.
     * @returns {string} the watermark URL
     */
    ClickOverlay.prototype.getUrl = function () {
        return this.getDomElement().data('url');
    };
    ClickOverlay.prototype.setUrl = function (url) {
        if (url === undefined || url == null) {
            url = '';
        }
        this.getDomElement().data('url', url);
    };
    return ClickOverlay;
}(button_1.Button));
exports.ClickOverlay = ClickOverlay;

},{"./button":17}],22:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloseButton = void 0;
var button_1 = require("./button");
var i18n_1 = require("../localization/i18n");
/**
 * A button that closes (hides) a configured component.
 */
var CloseButton = /** @class */ (function (_super) {
    __extends(CloseButton, _super);
    function CloseButton(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-closebutton',
            text: i18n_1.i18n.getLocalizer('close'),
        }, _this.config);
        return _this;
    }
    CloseButton.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        this.onClick.subscribe(function () {
            config.target.hide();
        });
    };
    return CloseButton;
}(button_1.Button));
exports.CloseButton = CloseButton;

},{"../localization/i18n":91,"./button":17}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Component = void 0;
var guid_1 = require("../guid");
var dom_1 = require("../dom");
var eventdispatcher_1 = require("../eventdispatcher");
var i18n_1 = require("../localization/i18n");
/**
 * The base class of the UI framework.
 * Each component must extend this class and optionally the config interface.
 */
var Component = exports.Component = /** @class */ (function () {
    /**
     * Constructs a component with an optionally supplied config. All subclasses must call the constructor of their
     * superclass and then merge their configuration into the component's configuration.
     * @param config the configuration for the component
     */
    function Component(config) {
        if (config === void 0) { config = {}; }
        /**
         * The list of events that this component offers. These events should always be private and only directly
         * accessed from within the implementing component.
         *
         * Because TypeScript does not support private properties with the same name on different class hierarchy levels
         * (i.e. superclass and subclass cannot contain a private property with the same name), the default naming
         * convention for the event list of a component that should be followed by subclasses is the concatenation of the
         * camel-cased class name + 'Events' (e.g. SubClass extends Component => subClassEvents).
         * See {@link #componentEvents} for an example.
         *
         * Event properties should be named in camel case with an 'on' prefix and in the present tense. Async events may
         * have a start event (when the operation starts) in the present tense, and must have an end event (when the
         * operation ends) in the past tense (or present tense in special cases (e.g. onStart/onStarted or onPlay/onPlaying).
         * See {@link #componentEvents#onShow} for an example.
         *
         * Each event should be accompanied with a protected method named by the convention eventName + 'Event'
         * (e.g. onStartEvent), that actually triggers the event by calling {@link EventDispatcher#dispatch dispatch} and
         * passing a reference to the component as first parameter. Components should always trigger their events with these
         * methods. Implementing this pattern gives subclasses means to directly listen to the events by overriding the
         * method (and saving the overhead of passing a handler to the event dispatcher) and more importantly to trigger
         * these events without having access to the private event list.
         * See {@link #onShow} for an example.
         *
         * To provide external code the possibility to listen to this component's events (subscribe, unsubscribe, etc.),
         * each event should also be accompanied by a public getter function with the same name as the event's property,
         * that returns the {@link Event} obtained from the event dispatcher by calling {@link EventDispatcher#getEvent}.
         * See {@link #onShow} for an example.
         *
         * Full example for an event representing an example action in a example component:
         *
         * <code>
         * // Define an example component class with an example event
         * class ExampleComponent extends Component<ComponentConfig> {
           *
           *     private exampleComponentEvents = {
           *         onExampleAction: new EventDispatcher<ExampleComponent, NoArgs>()
           *     }
           *
           *     // constructor and other stuff...
           *
           *     protected onExampleActionEvent() {
           *        this.exampleComponentEvents.onExampleAction.dispatch(this);
           *    }
           *
           *    get onExampleAction(): Event<ExampleComponent, NoArgs> {
           *        return this.exampleComponentEvents.onExampleAction.getEvent();
           *    }
           * }
         *
         * // Create an instance of the component somewhere
         * var exampleComponentInstance = new ExampleComponent();
         *
         * // Subscribe to the example event on the component
         * exampleComponentInstance.onExampleAction.subscribe(function (sender: ExampleComponent) {
           *     console.log('onExampleAction of ' + sender + ' has fired!');
           * });
         * </code>
         */
        this.componentEvents = {
            onShow: new eventdispatcher_1.EventDispatcher(),
            onHide: new eventdispatcher_1.EventDispatcher(),
            onHoverChanged: new eventdispatcher_1.EventDispatcher(),
            onEnabled: new eventdispatcher_1.EventDispatcher(),
            onDisabled: new eventdispatcher_1.EventDispatcher(),
        };
        // Create the configuration for this component
        this.config = this.mergeConfig(config, {
            tag: 'div',
            id: 'bmpui-id-' + guid_1.Guid.next(),
            cssPrefix: 'bmpui',
            cssClass: 'ui-component',
            cssClasses: [],
            hidden: false,
            disabled: false,
        }, {});
    }
    /**
     * Initializes the component, e.g. by applying config settings.
     * This method must not be called from outside the UI framework.
     *
     * This method is automatically called by the {@link UIInstanceManager}. If the component is an inner component of
     * some component, and thus encapsulated abd managed internally and never directly exposed to the UIManager,
     * this method must be called from the managing component's {@link #initialize} method.
     */
    Component.prototype.initialize = function () {
        this.hidden = this.config.hidden;
        this.disabled = this.config.disabled;
        // Hide the component at initialization if it is configured to be hidden
        if (this.isHidden()) {
            this.hidden = false; // Set flag to false for the following hide() call to work (hide() checks the flag)
            this.hide();
        }
        // Disable the component at initialization if it is configured to be disabled
        if (this.isDisabled()) {
            this.disabled = false; // Set flag to false for the following disable() call to work (disable() checks the flag)
            this.disable();
        }
    };
    /**
     * Configures the component for the supplied Player and UIInstanceManager. This is the place where all the magic
     * happens, where components typically subscribe and react to events (on their DOM element, the Player, or the
     * UIInstanceManager), and basically everything that makes them interactive.
     * This method is called only once, when the UIManager initializes the UI.
     *
     * Subclasses usually overwrite this method to add their own functionality.
     *
     * @param player the player which this component controls
     * @param uimanager the UIInstanceManager that manages this component
     */
    Component.prototype.configure = function (player, uimanager) {
        var _this = this;
        this.onShow.subscribe(function () {
            uimanager.onComponentShow.dispatch(_this);
        });
        this.onHide.subscribe(function () {
            uimanager.onComponentHide.dispatch(_this);
        });
        // Track the hovered state of the element
        this.getDomElement().on('mouseenter', function () {
            _this.onHoverChangedEvent(true);
        });
        this.getDomElement().on('mouseleave', function () {
            _this.onHoverChangedEvent(false);
        });
    };
    /**
     * Releases all resources and dependencies that the component holds. Player, DOM, and UIManager events are
     * automatically removed during release and do not explicitly need to be removed here.
     * This method is called by the UIManager when it releases the UI.
     *
     * Subclasses that need to release resources should override this method and call super.release().
     */
    Component.prototype.release = function () {
        // Nothing to do here, override where necessary
    };
    /**
     * Generate the DOM element for this component.
     *
     * Subclasses usually overwrite this method to extend or replace the DOM element with their own design.
     */
    Component.prototype.toDomElement = function () {
        var element = new dom_1.DOM(this.config.tag, {
            'id': this.config.id,
            'class': this.getCssClasses(),
            'role': this.config.role,
        });
        return element;
    };
    /**
     * Returns the DOM element of this component. Creates the DOM element if it does not yet exist.
     *
     * Should not be overwritten by subclasses.
     *
     * @returns {DOM}
     */
    Component.prototype.getDomElement = function () {
        if (!this.element) {
            this.element = this.toDomElement();
        }
        return this.element;
    };
    /**
     * Checks if this component has a DOM element.
     */
    Component.prototype.hasDomElement = function () {
        return Boolean(this.element);
    };
    Component.prototype.setAriaLabel = function (label) {
        this.setAriaAttr('label', i18n_1.i18n.performLocalization(label));
    };
    Component.prototype.setAriaAttr = function (name, value) {
        this.getDomElement().attr("aria-".concat(name), value);
    };
    /**
     * Merges a configuration with a default configuration and a base configuration from the superclass.
     *
     * @param config the configuration settings for the components, as usually passed to the constructor
     * @param defaults a default configuration for settings that are not passed with the configuration
     * @param base configuration inherited from a superclass
     * @returns {Config}
     */
    Component.prototype.mergeConfig = function (config, defaults, base) {
        // Extend default config with supplied config
        var merged = Object.assign({}, base, defaults, config);
        // Return the extended config
        return merged;
    };
    /**
     * Helper method that returns a string of all CSS classes of the component.
     *
     * @returns {string}
     */
    Component.prototype.getCssClasses = function () {
        var _this = this;
        // Merge all CSS classes into single array
        var flattenedArray = [this.config.cssClass].concat(this.config.cssClasses);
        // Prefix classes
        flattenedArray = flattenedArray.map(function (css) {
            return _this.prefixCss(css);
        });
        // Join array values into a string
        var flattenedString = flattenedArray.join(' ');
        // Return trimmed string to prevent whitespace at the end from the join operation
        return flattenedString.trim();
    };
    Component.prototype.prefixCss = function (cssClassOrId) {
        return this.config.cssPrefix + '-' + cssClassOrId;
    };
    /**
     * Returns the configuration object of the component.
     * @returns {Config}
     */
    Component.prototype.getConfig = function () {
        return this.config;
    };
    /**
     * Hides the component if shown.
     * This method basically transfers the component into the hidden state. Actual hiding is done via CSS.
     */
    Component.prototype.hide = function () {
        if (!this.hidden) {
            this.hidden = true;
            this.getDomElement().addClass(this.prefixCss(Component.CLASS_HIDDEN));
            this.onHideEvent();
        }
    };
    /**
     * Shows the component if hidden.
     */
    Component.prototype.show = function () {
        if (this.hidden) {
            this.getDomElement().removeClass(this.prefixCss(Component.CLASS_HIDDEN));
            this.hidden = false;
            this.onShowEvent();
        }
    };
    /**
     * Determines if the component is hidden.
     * @returns {boolean} true if the component is hidden, else false
     */
    Component.prototype.isHidden = function () {
        return this.hidden;
    };
    /**
     * Determines if the component is shown.
     * @returns {boolean} true if the component is visible, else false
     */
    Component.prototype.isShown = function () {
        return !this.isHidden();
    };
    /**
     * Toggles the hidden state by hiding the component if it is shown, or showing it if hidden.
     */
    Component.prototype.toggleHidden = function () {
        if (this.isHidden()) {
            this.show();
        }
        else {
            this.hide();
        }
    };
    /**
     * Disables the component.
     * This method basically transfers the component into the disabled state. Actual disabling is done via CSS or child
     * components. (e.g. Button needs to unsubscribe click listeners)
     */
    Component.prototype.disable = function () {
        if (!this.disabled) {
            this.disabled = true;
            this.getDomElement().addClass(this.prefixCss(Component.CLASS_DISABLED));
            this.onDisabledEvent();
        }
    };
    /**
     * Enables the component.
     * This method basically transfers the component into the enabled state. Actual enabling is done via CSS or child
     * components. (e.g. Button needs to subscribe click listeners)
     */
    Component.prototype.enable = function () {
        if (this.disabled) {
            this.getDomElement().removeClass(this.prefixCss(Component.CLASS_DISABLED));
            this.disabled = false;
            this.onEnabledEvent();
        }
    };
    /**
     * Determines if the component is disabled.
     * @returns {boolean} true if the component is disabled, else false
     */
    Component.prototype.isDisabled = function () {
        return this.disabled;
    };
    /**
     * Determines if the component is enabled.
     * @returns {boolean} true if the component is enabled, else false
     */
    Component.prototype.isEnabled = function () {
        return !this.isDisabled();
    };
    /**
     * Determines if the component is currently hovered.
     * @returns {boolean} true if the component is hovered, else false
     */
    Component.prototype.isHovered = function () {
        return this.hovered;
    };
    /**
     * Fires the onShow event.
     * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
     */
    Component.prototype.onShowEvent = function () {
        this.componentEvents.onShow.dispatch(this);
    };
    /**
     * Fires the onHide event.
     * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
     */
    Component.prototype.onHideEvent = function () {
        this.componentEvents.onHide.dispatch(this);
    };
    /**
     * Fires the onEnabled event.
     * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
     */
    Component.prototype.onEnabledEvent = function () {
        this.componentEvents.onEnabled.dispatch(this);
    };
    /**
     * Fires the onDisabled event.
     * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
     */
    Component.prototype.onDisabledEvent = function () {
        this.componentEvents.onDisabled.dispatch(this);
    };
    /**
     * Fires the onHoverChanged event.
     * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
     */
    Component.prototype.onHoverChangedEvent = function (hovered) {
        this.hovered = hovered;
        this.componentEvents.onHoverChanged.dispatch(this, { hovered: hovered });
    };
    Object.defineProperty(Component.prototype, "onShow", {
        /**
         * Gets the event that is fired when the component is showing.
         * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
         * @returns {Event<Component<Config>, NoArgs>}
         */
        get: function () {
            return this.componentEvents.onShow.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "onHide", {
        /**
         * Gets the event that is fired when the component is hiding.
         * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
         * @returns {Event<Component<Config>, NoArgs>}
         */
        get: function () {
            return this.componentEvents.onHide.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "onEnabled", {
        /**
         * Gets the event that is fired when the component is enabling.
         * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
         * @returns {Event<Component<Config>, NoArgs>}
         */
        get: function () {
            return this.componentEvents.onEnabled.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "onDisabled", {
        /**
         * Gets the event that is fired when the component is disabling.
         * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
         * @returns {Event<Component<Config>, NoArgs>}
         */
        get: function () {
            return this.componentEvents.onDisabled.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "onHoverChanged", {
        /**
         * Gets the event that is fired when the component's hover-state is changing.
         * @returns {Event<Component<Config>, ComponentHoverChangedEventArgs>}
         */
        get: function () {
            return this.componentEvents.onHoverChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    /**
     * The classname that is attached to the element when it is in the hidden state.
     * @type {string}
     */
    Component.CLASS_HIDDEN = 'hidden';
    /**
     * The classname that is attached to the element when it is in the disabled state.
     * @type {string}
     */
    Component.CLASS_DISABLED = 'disabled';
    return Component;
}());

},{"../dom":84,"../eventdispatcher":86,"../guid":89,"../localization/i18n":91}],24:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Container = void 0;
var component_1 = require("./component");
var dom_1 = require("../dom");
var arrayutils_1 = require("../arrayutils");
var i18n_1 = require("../localization/i18n");
/**
 * A container component that can contain a collection of child components.
 * Components can be added at construction time through the {@link ContainerConfig#components} setting, or later
 * through the {@link Container#addComponent} method. The UIManager automatically takes care of all components, i.e. it
 * initializes and configures them automatically.
 *
 * In the DOM, the container consists of an outer <div> (that can be configured by the config) and an inner wrapper
 * <div> that contains the components. This double-<div>-structure is often required to achieve many advanced effects
 * in CSS and/or JS, e.g. animations and certain formatting with absolute positioning.
 *
 * DOM example:
 * <code>
 *     <div class='ui-container'>
 *         <div class='container-wrapper'>
 *             ... child components ...
 *         </div>
 *     </div>
 * </code>
 */
var Container = /** @class */ (function (_super) {
    __extends(Container, _super);
    function Container(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-container',
            components: [],
        }, _this.config);
        _this.componentsToAdd = [];
        _this.componentsToRemove = [];
        return _this;
    }
    /**
     * Adds a child component to the container.
     * @param component the component to add
     */
    Container.prototype.addComponent = function (component) {
        this.config.components.push(component);
        this.componentsToAdd.push(component);
    };
    /**
     * Removes a child component from the container.
     * @param component the component to remove
     * @returns {boolean} true if the component has been removed, false if it is not contained in this container
     */
    Container.prototype.removeComponent = function (component) {
        if (arrayutils_1.ArrayUtils.remove(this.config.components, component) != null) {
            this.componentsToRemove.push(component);
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * Gets an array of all child components in this container.
     * @returns {Component<ComponentConfig>[]}
     */
    Container.prototype.getComponents = function () {
        return this.config.components;
    };
    /**
     * Removes all child components from the container.
     */
    Container.prototype.removeComponents = function () {
        for (var _i = 0, _a = this.getComponents().slice(); _i < _a.length; _i++) {
            var component = _a[_i];
            this.removeComponent(component);
        }
    };
    /**
     * Updates the DOM of the container with the current components.
     */
    Container.prototype.updateComponents = function () {
        /* We cannot just clear the container to remove all elements and then re-add those that should stay, because
         * IE looses the innerHTML of unattached elements, leading to empty elements within the container (e.g. missing
         * subtitle text in SubtitleLabel).
         * Instead, we keep a list of elements to add and remove, leaving remaining elements alone. By keeping them in
         * the DOM, their content gets preserved in all browsers.
         */
        var component;
        while (component = this.componentsToRemove.shift()) {
            component.getDomElement().remove();
        }
        while (component = this.componentsToAdd.shift()) {
            this.innerContainerElement.append(component.getDomElement());
        }
    };
    Container.prototype.toDomElement = function () {
        // Create the container element (the outer <div>)
        var containerElement = new dom_1.DOM(this.config.tag, {
            'id': this.config.id,
            'class': this.getCssClasses(),
            'role': this.config.role,
            'aria-label': i18n_1.i18n.performLocalization(this.config.ariaLabel),
        });
        // Create the inner container element (the inner <div>) that will contain the components
        var innerContainer = new dom_1.DOM(this.config.tag, {
            'class': this.prefixCss('container-wrapper'),
        });
        this.innerContainerElement = innerContainer;
        for (var _i = 0, _a = this.config.components; _i < _a.length; _i++) {
            var initialComponent = _a[_i];
            this.componentsToAdd.push(initialComponent);
        }
        this.updateComponents();
        containerElement.append(innerContainer);
        return containerElement;
    };
    return Container;
}(component_1.Component));
exports.Container = Container;

},{"../arrayutils":6,"../dom":84,"../localization/i18n":91,"./component":23}],25:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControlBar = void 0;
var container_1 = require("./container");
var uiutils_1 = require("../uiutils");
var spacer_1 = require("./spacer");
var i18n_1 = require("../localization/i18n");
var browserutils_1 = require("../browserutils");
var settingspanel_1 = require("./settingspanel");
/**
 * A container for main player control components, e.g. play toggle button, seek bar, volume control, fullscreen toggle
 * button.
 */
var ControlBar = /** @class */ (function (_super) {
    __extends(ControlBar, _super);
    function ControlBar(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-controlbar',
            hidden: true,
            role: 'region',
            ariaLabel: i18n_1.i18n.getLocalizer('controlBar'),
        }, _this.config);
        return _this;
    }
    ControlBar.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        // Counts how many components are hovered and block hiding of the control bar
        var hoverStackCount = 0;
        var isSettingsPanelShown = false;
        // only enabling this for non-mobile platforms without touch input. enabling this
        // for touch devices causes the UI to not disappear after hideDelay seconds.
        // Instead, it will stay visible until another manual interaction is performed.
        if (uimanager.getConfig().disableAutoHideWhenHovered && !browserutils_1.BrowserUtils.isMobile) {
            // Track hover status of child components
            uiutils_1.UIUtils.traverseTree(this, function (component) {
                // Do not track hover status of child containers or spacers, only of 'real' controls
                if (component instanceof container_1.Container || component instanceof spacer_1.Spacer) {
                    return;
                }
                // Subscribe hover event and keep a count of the number of hovered children
                component.onHoverChanged.subscribe(function (_, args) {
                    if (args.hovered) {
                        hoverStackCount++;
                    }
                    else {
                        hoverStackCount--;
                    }
                });
            });
        }
        if (browserutils_1.BrowserUtils.isMobile) {
            uimanager.onComponentShow.subscribe(function (component) {
                if (component instanceof settingspanel_1.SettingsPanel) {
                    isSettingsPanelShown = true;
                }
            });
            uimanager.onComponentHide.subscribe(function (component) {
                if (component instanceof settingspanel_1.SettingsPanel) {
                    isSettingsPanelShown = false;
                }
            });
        }
        uimanager.onControlsShow.subscribe(function () {
            _this.show();
        });
        uimanager.onPreviewControlsHide.subscribe(function (sender, args) {
            // Cancel the hide event if hovered child components block hiding or if the settings panel is active on mobile.
            args.cancel = args.cancel || (hoverStackCount > 0 || isSettingsPanelShown);
        });
        uimanager.onControlsHide.subscribe(function () {
            _this.hide();
        });
    };
    return ControlBar;
}(container_1.Container));
exports.ControlBar = ControlBar;

},{"../browserutils":8,"../localization/i18n":91,"../uiutils":115,"./container":24,"./settingspanel":47,"./spacer":54}],26:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorMessageOverlay = void 0;
var container_1 = require("./container");
var label_1 = require("./label");
var tvnoisecanvas_1 = require("./tvnoisecanvas");
var errorutils_1 = require("../errorutils");
var mobilev3playerapi_1 = require("../mobilev3playerapi");
/**
 * Overlays the player and displays error messages.
 */
var ErrorMessageOverlay = /** @class */ (function (_super) {
    __extends(ErrorMessageOverlay, _super);
    function ErrorMessageOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.errorLabel = new label_1.Label({ cssClass: 'ui-errormessage-label' });
        _this.tvNoiseBackground = new tvnoisecanvas_1.TvNoiseCanvas();
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-errormessage-overlay',
            components: [_this.tvNoiseBackground, _this.errorLabel],
            hidden: true,
        }, _this.config);
        return _this;
    }
    ErrorMessageOverlay.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var handleErrorMessage = function (event, message) {
            var customizedMessage = customizeErrorMessage(uimanager.getConfig().errorMessages || config.messages, event);
            if (customizedMessage) {
                message = customizedMessage;
            }
            _this.display(message);
        };
        if ((0, mobilev3playerapi_1.isMobileV3PlayerAPI)(player)) {
            var errorEventHandler = function (event) {
                var message = errorutils_1.ErrorUtils.defaultMobileV3ErrorMessageTranslator(event);
                handleErrorMessage(event, message);
            };
            player.on(mobilev3playerapi_1.MobileV3PlayerEvent.PlayerError, errorEventHandler);
            player.on(mobilev3playerapi_1.MobileV3PlayerEvent.SourceError, errorEventHandler);
        }
        else {
            player.on(player.exports.PlayerEvent.Error, function (event) {
                var message = errorutils_1.ErrorUtils.defaultWebErrorMessageTranslator(event);
                handleErrorMessage(event, message);
            });
        }
        player.on(player.exports.PlayerEvent.SourceLoaded, function (event) {
            if (_this.isShown()) {
                _this.tvNoiseBackground.stop();
                _this.hide();
            }
        });
    };
    ErrorMessageOverlay.prototype.display = function (errorMessage) {
        this.errorLabel.setText(errorMessage);
        this.tvNoiseBackground.start();
        this.show();
    };
    ErrorMessageOverlay.prototype.release = function () {
        _super.prototype.release.call(this);
        // Canvas rendering must be explicitly stopped, else it just continues forever and hogs resources
        this.tvNoiseBackground.stop();
    };
    return ErrorMessageOverlay;
}(container_1.Container));
exports.ErrorMessageOverlay = ErrorMessageOverlay;
function customizeErrorMessage(errorMessages, event) {
    if (!errorMessages) {
        return undefined;
    }
    // Process message vocabularies
    if (typeof errorMessages === 'function') {
        // Translation function for all errors
        return errorMessages(event);
    }
    if (errorMessages[event.code]) {
        // It's not a translation function, so it must be a map of strings or translation functions
        var customMessage = errorMessages[event.code];
        return typeof customMessage === 'string' ? customMessage : customMessage(event);
    }
}

},{"../errorutils":85,"../mobilev3playerapi":96,"./container":24,"./label":31,"./tvnoisecanvas":75}],27:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FullscreenToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles the player between windowed and fullscreen view.
 */
var FullscreenToggleButton = /** @class */ (function (_super) {
    __extends(FullscreenToggleButton, _super);
    function FullscreenToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-fullscreentogglebutton',
            text: i18n_1.i18n.getLocalizer('fullscreen'),
        }, _this.config);
        return _this;
    }
    FullscreenToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var isFullScreenAvailable = function () {
            return player.isViewModeAvailable(player.exports.ViewMode.Fullscreen);
        };
        var fullscreenStateHandler = function () {
            player.getViewMode() === player.exports.ViewMode.Fullscreen ? _this.on() : _this.off();
        };
        var fullscreenAvailabilityChangedHandler = function () {
            isFullScreenAvailable() ? _this.show() : _this.hide();
        };
        player.on(player.exports.PlayerEvent.ViewModeChanged, fullscreenStateHandler);
        // Available only in our native SDKs for now
        if (player.exports.PlayerEvent.ViewModeAvailabilityChanged) {
            player.on(player.exports.PlayerEvent.ViewModeAvailabilityChanged, fullscreenAvailabilityChangedHandler);
        }
        uimanager.getConfig().events.onUpdated.subscribe(fullscreenAvailabilityChangedHandler);
        this.onClick.subscribe(function () {
            if (!isFullScreenAvailable()) {
                if (console) {
                    console.log('Fullscreen unavailable');
                }
                return;
            }
            var targetViewMode = player.getViewMode() === player.exports.ViewMode.Fullscreen
                ? player.exports.ViewMode.Inline
                : player.exports.ViewMode.Fullscreen;
            player.setViewMode(targetViewMode);
        });
        // Startup init
        fullscreenAvailabilityChangedHandler();
        fullscreenStateHandler();
    };
    return FullscreenToggleButton;
}(togglebutton_1.ToggleButton));
exports.FullscreenToggleButton = FullscreenToggleButton;

},{"../localization/i18n":91,"./togglebutton":74}],28:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.HugePlaybackToggleButton = void 0;
var playbacktogglebutton_1 = require("./playbacktogglebutton");
var dom_1 = require("../dom");
var i18n_1 = require("../localization/i18n");
/**
 * A button that overlays the video and toggles between playback and pause.
 */
var HugePlaybackToggleButton = /** @class */ (function (_super) {
    __extends(HugePlaybackToggleButton, _super);
    function HugePlaybackToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-hugeplaybacktogglebutton',
            text: i18n_1.i18n.getLocalizer('playPause'),
            role: 'button',
        }, _this.config);
        return _this;
    }
    HugePlaybackToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        // Update button state through API events
        _super.prototype.configure.call(this, player, uimanager, false);
        // Set enterFullscreenOnInitialPlayback if set in the uimanager config
        if (typeof uimanager.getConfig().enterFullscreenOnInitialPlayback === 'boolean') {
            this.config.enterFullscreenOnInitialPlayback = uimanager.getConfig().enterFullscreenOnInitialPlayback;
        }
        var togglePlayback = function () {
            if (player.isPlaying() || _this.isPlayInitiated) {
                player.pause('ui');
            }
            else {
                player.play('ui');
            }
        };
        var toggleFullscreen = function () {
            if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {
                player.setViewMode(player.exports.ViewMode.Inline);
            }
            else {
                player.setViewMode(player.exports.ViewMode.Fullscreen);
            }
        };
        var firstPlay = true;
        var clickTime = 0;
        var doubleClickTime = 0;
        /*
         * YouTube-style toggle button handling
         *
         * The goal is to prevent a short pause or playback interval between a click, that toggles playback, and a
         * double click, that toggles fullscreen. In this naive approach, the first click would e.g. start playback,
         * the second click would be detected as double click and toggle to fullscreen, and as second normal click stop
         * playback, which results is a short playback interval with max length of the double click detection
         * period (usually 500ms).
         *
         * To solve this issue, we defer handling of the first click for 200ms, which is almost unnoticeable to the user,
         * and just toggle playback if no second click (double click) has been registered during this period. If a double
         * click is registered, we just toggle the fullscreen. In the first 200ms, undesired playback changes thus cannot
         * happen. If a double click is registered within 500ms, we undo the playback change and switch fullscreen mode.
         * In the end, this method basically introduces a 200ms observing interval in which playback changes are prevented
         * if a double click happens.
         */
        this.onClick.subscribe(function () {
            // Directly start playback on first click of the button.
            // This is a required workaround for mobile browsers where video playback needs to be triggered directly
            // by the user. A deferred playback start through the timeout below is not considered as user action and
            // therefore ignored by mobile browsers.
            if (firstPlay) {
                // Try to start playback. Then we wait for Play and only when it arrives, we disable the firstPlay flag.
                // If we disable the flag here, onClick was triggered programmatically instead of by a user interaction, and
                // playback is blocked (e.g. on mobile devices due to the programmatic play() call), we loose the chance to
                // ever start playback through a user interaction again with this button.
                togglePlayback();
                if (_this.config.enterFullscreenOnInitialPlayback) {
                    player.setViewMode(player.exports.ViewMode.Fullscreen);
                }
                return;
            }
            var now = Date.now();
            if (now - clickTime < 200) {
                // We have a double click inside the 200ms interval, just toggle fullscreen mode
                toggleFullscreen();
                doubleClickTime = now;
                return;
            }
            else if (now - clickTime < 500) {
                // We have a double click inside the 500ms interval, undo playback toggle and toggle fullscreen mode
                toggleFullscreen();
                togglePlayback();
                doubleClickTime = now;
                return;
            }
            clickTime = now;
            setTimeout(function () {
                if (Date.now() - doubleClickTime > 200) {
                    // No double click detected, so we toggle playback and wait what happens next
                    togglePlayback();
                }
            }, 200);
        });
        player.on(player.exports.PlayerEvent.Play, function () {
            // Playback has really started, we can disable the flag to switch to normal toggle button handling
            firstPlay = false;
        });
        player.on(player.exports.PlayerEvent.Warning, function (event) {
            if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {
                // if playback could not be started, reset the first play flag as we need the user interaction to start
                firstPlay = true;
            }
        });
        var suppressPlayButtonTransitionAnimation = function () {
            // Disable the current animation
            _this.setTransitionAnimationsEnabled(false);
            // Enable the transition animations for the next state change
            _this.onToggle.subscribeOnce(function () {
                _this.setTransitionAnimationsEnabled(true);
            });
        };
        // Hide the play button animation when the UI is loaded (it should only be animated on state changes)
        suppressPlayButtonTransitionAnimation();
        var isAutoplayEnabled = player.getConfig().playback && Boolean(player.getConfig().playback.autoplay);
        // We only know if an autoplay attempt is upcoming if the player is not yet ready. It the player is already ready,
        // the attempt might be upcoming or might have already happened, but we don't have to handle that because we can
        // simply rely on isPlaying and the play state events.
        var isAutoplayUpcoming = !player.getSource() && isAutoplayEnabled;
        // Hide the play button when the player is already playing or autoplay is upcoming
        if (player.isPlaying() || isAutoplayUpcoming) {
            // Hide the play button (switch to playing state)
            this.on();
            // Disable the animation of the playing state switch
            suppressPlayButtonTransitionAnimation();
            // Show the play button without an animation if a play attempt is blocked
            player.on(player.exports.PlayerEvent.Warning, function (event) {
                if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {
                    suppressPlayButtonTransitionAnimation();
                }
            });
        }
    };
    HugePlaybackToggleButton.prototype.toDomElement = function () {
        var buttonElement = _super.prototype.toDomElement.call(this);
        // Add child that contains the play button image
        // Setting the image directly on the button does not work together with scaling animations, because the button
        // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined
        // to the size if the image, it can scale inside the player without overshooting.
        buttonElement.append(new dom_1.DOM('div', {
            'class': this.prefixCss('image'),
        }));
        return buttonElement;
    };
    /**
     * Enables or disables the play state transition animations of the play button image. Can be used to suppress
     * animations.
     * @param {boolean} enabled true to enable the animations (default), false to disable them
     */
    HugePlaybackToggleButton.prototype.setTransitionAnimationsEnabled = function (enabled) {
        var noTransitionAnimationsClass = this.prefixCss('no-transition-animations');
        if (enabled) {
            this.getDomElement().removeClass(noTransitionAnimationsClass);
        }
        else if (!this.getDomElement().hasClass(noTransitionAnimationsClass)) {
            this.getDomElement().addClass(noTransitionAnimationsClass);
        }
    };
    return HugePlaybackToggleButton;
}(playbacktogglebutton_1.PlaybackToggleButton));
exports.HugePlaybackToggleButton = HugePlaybackToggleButton;

},{"../dom":84,"../localization/i18n":91,"./playbacktogglebutton":38}],29:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.HugeReplayButton = void 0;
var button_1 = require("./button");
var dom_1 = require("../dom");
var i18n_1 = require("../localization/i18n");
/**
 * A button to play/replay a video.
 */
var HugeReplayButton = /** @class */ (function (_super) {
    __extends(HugeReplayButton, _super);
    function HugeReplayButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-hugereplaybutton',
            text: i18n_1.i18n.getLocalizer('replay'),
        }, _this.config);
        return _this;
    }
    HugeReplayButton.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        this.onClick.subscribe(function () {
            player.play('ui');
        });
    };
    HugeReplayButton.prototype.toDomElement = function () {
        var buttonElement = _super.prototype.toDomElement.call(this);
        // Add child that contains the play button image
        // Setting the image directly on the button does not work together with scaling animations, because the button
        // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined
        // to the size if the image, it can scale inside the player without overshooting.
        buttonElement.append(new dom_1.DOM('div', {
            'class': this.prefixCss('image'),
        }));
        return buttonElement;
    };
    return HugeReplayButton;
}(button_1.Button));
exports.HugeReplayButton = HugeReplayButton;

},{"../dom":84,"../localization/i18n":91,"./button":17}],30:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemSelectionList = void 0;
var listselector_1 = require("./listselector");
var dom_1 = require("../dom");
var i18n_1 = require("../localization/i18n");
var ItemSelectionList = exports.ItemSelectionList = /** @class */ (function (_super) {
    __extends(ItemSelectionList, _super);
    function ItemSelectionList(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            tag: 'ul',
            cssClass: 'ui-itemselectionlist',
        }, _this.config);
        return _this;
    }
    ItemSelectionList.prototype.isActive = function () {
        return this.items.length > 1;
    };
    ItemSelectionList.prototype.toDomElement = function () {
        var listElement = new dom_1.DOM('ul', {
            'id': this.config.id,
            'class': this.getCssClasses(),
        });
        this.listElement = listElement;
        this.updateDomItems();
        return listElement;
    };
    ItemSelectionList.prototype.updateDomItems = function (selectedValue) {
        var _this = this;
        if (selectedValue === void 0) { selectedValue = null; }
        // Delete all children
        this.listElement.empty();
        var selectedListItem = null;
        var selectItem = function (listItem) {
            listItem.addClass(_this.prefixCss(ItemSelectionList.CLASS_SELECTED));
        };
        var deselectItem = function (listItem) {
            listItem.removeClass(_this.prefixCss(ItemSelectionList.CLASS_SELECTED));
        };
        var _loop_1 = function (item) {
            var listItem = new dom_1.DOM('li', {
                'type': 'li',
                'class': this_1.prefixCss('ui-selectionlistitem'),
            }).append(new dom_1.DOM('a', {}).html(i18n_1.i18n.performLocalization(item.label)));
            if (!selectedListItem) {
                if (selectedValue == null) { // If there is no pre-selected value, select the first one
                    selectedListItem = listItem;
                }
                else if (String(selectedValue) === item.key) { // convert selectedValue to string to catch 'null'/null case
                    selectedListItem = listItem;
                }
            }
            // Handle list item selections
            listItem.on('click', function () {
                // Deselect the previous item (if there was a selected item)
                if (selectedListItem) {
                    deselectItem(selectedListItem);
                }
                // Select the clicked item
                selectedListItem = listItem;
                selectItem(listItem);
                // Fire the event
                _this.onItemSelectedEvent(item.key, false);
            });
            // Select default item
            if (selectedListItem) {
                selectItem(selectedListItem);
            }
            this_1.listElement.append(listItem);
        };
        var this_1 = this;
        for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
            var item = _a[_i];
            _loop_1(item);
        }
    };
    ItemSelectionList.prototype.onItemAddedEvent = function (value) {
        _super.prototype.onItemAddedEvent.call(this, value);
        this.updateDomItems(this.selectedItem);
    };
    ItemSelectionList.prototype.onItemRemovedEvent = function (value) {
        _super.prototype.onItemRemovedEvent.call(this, value);
        this.updateDomItems(this.selectedItem);
    };
    ItemSelectionList.prototype.onItemSelectedEvent = function (value, updateDomItems) {
        if (updateDomItems === void 0) { updateDomItems = true; }
        _super.prototype.onItemSelectedEvent.call(this, value);
        if (updateDomItems) {
            this.updateDomItems(value);
        }
    };
    ItemSelectionList.CLASS_SELECTED = 'selected';
    return ItemSelectionList;
}(listselector_1.ListSelector));

},{"../dom":84,"../localization/i18n":91,"./listselector":33}],31:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Label = void 0;
var component_1 = require("./component");
var dom_1 = require("../dom");
var eventdispatcher_1 = require("../eventdispatcher");
var i18n_1 = require("../localization/i18n");
/**
 * A simple text label.
 *
 * DOM example:
 * <code>
 *     <span class='ui-label'>...some text...</span>
 * </code>
 */
var Label = /** @class */ (function (_super) {
    __extends(Label, _super);
    function Label(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.labelEvents = {
            onClick: new eventdispatcher_1.EventDispatcher(),
            onTextChanged: new eventdispatcher_1.EventDispatcher(),
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-label',
        }, _this.config);
        _this.text = _this.config.text;
        return _this;
    }
    Label.prototype.toDomElement = function () {
        var _this = this;
        var tagName = this.config.for != null ? 'label' : 'span';
        var labelElement = new dom_1.DOM(tagName, {
            'id': this.config.id,
            'for': this.config.for,
            'class': this.getCssClasses(),
        }).html(i18n_1.i18n.performLocalization(this.text));
        labelElement.on('click', function () {
            _this.onClickEvent();
        });
        return labelElement;
    };
    /**
     * Set the text on this label.
     * @param text
     */
    Label.prototype.setText = function (text) {
        if (text === this.text) {
            return;
        }
        this.text = text;
        var localizedText = i18n_1.i18n.performLocalization(text);
        this.getDomElement().html(localizedText);
        this.onTextChangedEvent(localizedText);
    };
    /**
     * Gets the text on this label.
     * @return {string} The text on the label
     */
    Label.prototype.getText = function () {
        return i18n_1.i18n.performLocalization(this.text);
    };
    /**
     * Clears the text on this label.
     */
    Label.prototype.clearText = function () {
        this.getDomElement().html('');
        this.onTextChangedEvent(null);
    };
    /**
     * Tests if the label is empty and does not contain any text.
     * @return {boolean} True if the label is empty, else false
     */
    Label.prototype.isEmpty = function () {
        return !this.text;
    };
    /**
     * Fires the {@link #onClick} event.
     * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method
     * and calling the super method.
     */
    Label.prototype.onClickEvent = function () {
        this.labelEvents.onClick.dispatch(this);
    };
    /**
     * Fires the {@link #onClick} event.
     * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method
     * and calling the super method.
     */
    Label.prototype.onTextChangedEvent = function (text) {
        this.labelEvents.onTextChanged.dispatch(this, text);
    };
    Object.defineProperty(Label.prototype, "onClick", {
        /**
         * Gets the event that is fired when the label is clicked.
         * @returns {Event<Label<LabelConfig>, NoArgs>}
         */
        get: function () {
            return this.labelEvents.onClick.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "onTextChanged", {
        /**
         * Gets the event that is fired when the text on the label is changed.
         * @returns {Event<Label<LabelConfig>, string>}
         */
        get: function () {
            return this.labelEvents.onTextChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    return Label;
}(component_1.Component));
exports.Label = Label;

},{"../dom":84,"../eventdispatcher":86,"../localization/i18n":91,"./component":23}],32:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListBox = void 0;
var togglebutton_1 = require("./togglebutton");
var listselector_1 = require("./listselector");
var dom_1 = require("../dom");
var arrayutils_1 = require("../arrayutils");
/**
 * A element to select a single item out of a list of available items.
 *
 * DOM example:
 * <code>
 *   <div class='ui-listbox'>
 *     <button class='ui-listbox-button'>label</button>
 *     ...
 *   </div
 * </code>
 */
// TODO: change ListSelector to extends container in v4 to improve usage of ListBox.
//       Currently we are creating the dom element of the list box with child elements manually here.
//       But this functionality is already covered within the Container component.
var ListBox = /** @class */ (function (_super) {
    __extends(ListBox, _super);
    function ListBox(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.components = [];
        _this.removeListBoxDomItem = function (_, key) {
            var component = _this.getComponentForKey(key);
            if (component) {
                component.getDomElement().remove();
                arrayutils_1.ArrayUtils.remove(_this.components, component);
            }
        };
        _this.addListBoxDomItem = function (_, key) {
            var component = _this.getComponentForKey(key);
            var newItem = _this.getItemForKey(key);
            if (component) {
                // Update existing component
                component.setText(newItem.label);
            }
            else {
                var listBoxItemButton_1 = _this.buildListBoxItemButton(newItem);
                listBoxItemButton_1.onClick.subscribe(function () {
                    _this.handleSelectionChange(listBoxItemButton_1);
                });
                _this.components.push(listBoxItemButton_1);
                _this.listBoxElement.append(listBoxItemButton_1.getDomElement());
            }
        };
        _this.refreshSelectedItem = function () {
            // This gets called twice because the first time is triggered when the user clicks on the ListBoxItemButton. And the
            // second call comes from the player event when the actual item is selected (Subtitle / AudioTrack in this case).
            // As this is a generic component we can't prohibit this behaviour. We need to treat this component as it acts
            // independent from PlayerEvents and on the other hand we need to react to PlayerEvents as it could be triggered
            // from outside.
            for (var _i = 0, _a = _this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                var component = _this.getComponentForKey(item.key);
                if (component) {
                    String(component.key) === String(_this.selectedItem) ? component.on() : component.off();
                }
            }
        };
        _this.handleSelectionChange = function (sender) {
            _this.onItemSelectedEvent(sender.key);
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-listbox',
        }, _this.config);
        return _this;
    }
    ListBox.prototype.configure = function (player, uimanager) {
        // Subscribe before super call to receive initial events
        this.onItemAdded.subscribe(this.addListBoxDomItem);
        this.onItemRemoved.subscribe(this.removeListBoxDomItem);
        this.onItemSelected.subscribe(this.refreshSelectedItem);
        _super.prototype.configure.call(this, player, uimanager);
    };
    ListBox.prototype.toDomElement = function () {
        var listBoxElement = new dom_1.DOM('div', {
            'id': this.config.id,
            'class': this.getCssClasses(),
        });
        this.listBoxElement = listBoxElement;
        this.createListBoxDomItems();
        this.refreshSelectedItem();
        return listBoxElement;
    };
    ListBox.prototype.createListBoxDomItems = function () {
        // Delete all children
        this.listBoxElement.empty();
        this.components = [];
        // Add updated children
        for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
            var item = _a[_i];
            this.addListBoxDomItem(this, item.key);
        }
    };
    ListBox.prototype.buildListBoxItemButton = function (listItem) {
        return new ListBoxItemButton({
            key: listItem.key,
            text: listItem.label,
            ariaLabel: listItem.ariaLabel,
        });
    };
    ListBox.prototype.getComponentForKey = function (key) {
        return this.components.find(function (c) { return key === c.key; });
    };
    return ListBox;
}(listselector_1.ListSelector));
exports.ListBox = ListBox;
var ListBoxItemButton = /** @class */ (function (_super) {
    __extends(ListBoxItemButton, _super);
    function ListBoxItemButton(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-listbox-button',
            onClass: 'selected',
            offClass: '',
        }, _this.config);
        return _this;
    }
    Object.defineProperty(ListBoxItemButton.prototype, "key", {
        get: function () {
            return this.config.key;
        },
        enumerable: false,
        configurable: true
    });
    return ListBoxItemButton;
}(togglebutton_1.ToggleButton));

},{"../arrayutils":6,"../dom":84,"./listselector":33,"./togglebutton":74}],33:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListSelector = void 0;
var component_1 = require("./component");
var eventdispatcher_1 = require("../eventdispatcher");
var arrayutils_1 = require("../arrayutils");
var i18n_1 = require("../localization/i18n");
var ListSelector = /** @class */ (function (_super) {
    __extends(ListSelector, _super);
    function ListSelector(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.listSelectorEvents = {
            onItemAdded: new eventdispatcher_1.EventDispatcher(),
            onItemRemoved: new eventdispatcher_1.EventDispatcher(),
            onItemSelected: new eventdispatcher_1.EventDispatcher(),
        };
        _this.config = _this.mergeConfig(config, {
            items: [],
            cssClass: 'ui-listselector',
        }, _this.config);
        _this.items = _this.config.items;
        return _this;
    }
    ListSelector.prototype.getItemIndex = function (key) {
        for (var index in this.items) {
            if (key === this.items[index].key) {
                return parseInt(index);
            }
        }
        return -1;
    };
    /**
     * Returns all current items of this selector.
     * * @returns {ListItem[]}
     */
    ListSelector.prototype.getItems = function () {
        return this.items;
    };
    /**
     * Checks if the specified item is part of this selector.
     * @param key the key of the item to check
     * @returns {boolean} true if the item is part of this selector, else false
     */
    ListSelector.prototype.hasItem = function (key) {
        return this.getItemIndex(key) > -1;
    };
    /**
     * Adds an item to this selector by doing a sorted insert or by appending the element to the end of the list of items.
     * If an item with the specified key already exists, it is replaced.
     * @param key the key of the item to add
     * @param label the (human-readable) label of the item to add
     * @param sortedInsert whether the item should be added respecting the order of keys
     * @param ariaLabel custom aria label for the listItem
     */
    ListSelector.prototype.addItem = function (key, label, sortedInsert, ariaLabel) {
        if (sortedInsert === void 0) { sortedInsert = false; }
        if (ariaLabel === void 0) { ariaLabel = ''; }
        var listItem = __assign({ key: key, label: i18n_1.i18n.performLocalization(label) }, (ariaLabel && { ariaLabel: ariaLabel }));
        // Apply filter function
        if (this.config.filter && !this.config.filter(listItem)) {
            return;
        }
        // Apply translator function
        if (this.config.translator) {
            listItem.label = this.config.translator(listItem);
        }
        // Try to remove key first to get overwrite behavior and avoid duplicate keys
        this.removeItem(key); // This will trigger an ItemRemoved and an ItemAdded event
        // Add the item to the list
        if (sortedInsert) {
            var index = this.items.findIndex(function (entry) { return entry.key > key; });
            if (index < 0) {
                this.items.push(listItem);
            }
            else {
                this.items.splice(index, 0, listItem);
            }
        }
        else {
            this.items.push(listItem);
        }
        this.onItemAddedEvent(key);
    };
    /**
     * Removes an item from this selector.
     * @param key the key of the item to remove
     * @returns {boolean} true if removal was successful, false if the item is not part of this selector
     */
    ListSelector.prototype.removeItem = function (key) {
        var index = this.getItemIndex(key);
        if (index > -1) {
            arrayutils_1.ArrayUtils.remove(this.items, this.items[index]);
            this.onItemRemovedEvent(key);
            return true;
        }
        return false;
    };
    /**
     * Selects an item from the items in this selector.
     * @param key the key of the item to select
     * @returns {boolean} true is the selection was successful, false if the selected item is not part of the selector
     */
    ListSelector.prototype.selectItem = function (key) {
        if (key === this.selectedItem) {
            // itemConfig is already selected, suppress any further action
            return true;
        }
        var index = this.getItemIndex(key);
        if (index > -1) {
            this.selectedItem = key;
            this.onItemSelectedEvent(key);
            return true;
        }
        return false;
    };
    /**
     * Returns the key of the selected item.
     * @returns {string} the key of the selected item or null if no item is selected
     */
    ListSelector.prototype.getSelectedItem = function () {
        return this.selectedItem;
    };
    /**
     * Returns the items for the given key or undefined if no item with the given key exists.
     * @param key the key of the item to return
     * @returns {ListItem} the item with the requested key. Undefined if no item with the given key exists.
     */
    ListSelector.prototype.getItemForKey = function (key) {
        return this.items.find(function (item) { return item.key === key; });
    };
    /**
     * Synchronize the current items of this selector with the given ones. This will remove and add items selectively.
     * For each removed item the ItemRemovedEvent and for each added item the ItemAddedEvent will be triggered. Favour
     * this method over using clearItems and adding all items again afterwards.
     * @param newItems
     */
    ListSelector.prototype.synchronizeItems = function (newItems) {
        var _this = this;
        newItems
            .filter(function (item) { return !_this.hasItem(item.key); })
            .forEach(function (item) { return _this.addItem(item.key, item.label, item.sortedInsert, item.ariaLabel); });
        this.items
            .filter(function (item) { return newItems.filter(function (i) { return i.key === item.key; }).length === 0; })
            .forEach(function (item) { return _this.removeItem(item.key); });
    };
    /**
     * Removes all items from this selector.
     */
    ListSelector.prototype.clearItems = function () {
        // local copy for iteration after clear
        var items = this.items;
        // clear items
        this.items = [];
        // clear the selection as the selected item is also removed
        this.selectedItem = null;
        // fire events
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            this.onItemRemovedEvent(item.key);
        }
    };
    /**
     * Returns the number of items in this selector.
     * @returns {number}
     */
    ListSelector.prototype.itemCount = function () {
        return Object.keys(this.items).length;
    };
    ListSelector.prototype.onItemAddedEvent = function (key) {
        this.listSelectorEvents.onItemAdded.dispatch(this, key);
    };
    ListSelector.prototype.onItemRemovedEvent = function (key) {
        this.listSelectorEvents.onItemRemoved.dispatch(this, key);
    };
    ListSelector.prototype.onItemSelectedEvent = function (key) {
        this.listSelectorEvents.onItemSelected.dispatch(this, key);
    };
    Object.defineProperty(ListSelector.prototype, "onItemAdded", {
        /**
         * Gets the event that is fired when an item is added to the list of items.
         * @returns {Event<ListSelector<Config>, string>}
         */
        get: function () {
            return this.listSelectorEvents.onItemAdded.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListSelector.prototype, "onItemRemoved", {
        /**
         * Gets the event that is fired when an item is removed from the list of items.
         * @returns {Event<ListSelector<Config>, string>}
         */
        get: function () {
            return this.listSelectorEvents.onItemRemoved.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListSelector.prototype, "onItemSelected", {
        /**
         * Gets the event that is fired when an item is selected from the list of items.
         * @returns {Event<ListSelector<Config>, string>}
         */
        get: function () {
            return this.listSelectorEvents.onItemSelected.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    return ListSelector;
}(component_1.Component));
exports.ListSelector = ListSelector;

},{"../arrayutils":6,"../eventdispatcher":86,"../localization/i18n":91,"./component":23}],34:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataLabel = exports.MetadataLabelContent = void 0;
var label_1 = require("./label");
/**
 * Enumerates the types of content that the {@link MetadataLabel} can display.
 */
var MetadataLabelContent;
(function (MetadataLabelContent) {
    /**
     * Title of the data source.
     */
    MetadataLabelContent[MetadataLabelContent["Title"] = 0] = "Title";
    /**
     * Description fo the data source.
     */
    MetadataLabelContent[MetadataLabelContent["Description"] = 1] = "Description";
})(MetadataLabelContent = exports.MetadataLabelContent || (exports.MetadataLabelContent = {}));
/**
 * A label that can be configured to display certain metadata.
 */
var MetadataLabel = /** @class */ (function (_super) {
    __extends(MetadataLabel, _super);
    function MetadataLabel(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['label-metadata', 'label-metadata-' + MetadataLabelContent[config.content].toLowerCase()],
        }, _this.config);
        return _this;
    }
    MetadataLabel.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var uiconfig = uimanager.getConfig();
        var init = function () {
            switch (config.content) {
                case MetadataLabelContent.Title:
                    _this.setText(uiconfig.metadata.title);
                    break;
                case MetadataLabelContent.Description:
                    _this.setText(uiconfig.metadata.description);
                    break;
            }
        };
        var unload = function () {
            _this.setText(null);
        };
        // Init label
        init();
        // Clear labels when source is unloaded
        player.on(player.exports.PlayerEvent.SourceUnloaded, unload);
        uimanager.getConfig().events.onUpdated.subscribe(init);
    };
    return MetadataLabel;
}(label_1.Label));
exports.MetadataLabel = MetadataLabel;

},{"./label":31}],35:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PictureInPictureToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles Apple macOS picture-in-picture mode.
 */
var PictureInPictureToggleButton = /** @class */ (function (_super) {
    __extends(PictureInPictureToggleButton, _super);
    function PictureInPictureToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-piptogglebutton',
            text: i18n_1.i18n.getLocalizer('pictureInPicture'),
        }, _this.config);
        return _this;
    }
    PictureInPictureToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var isPictureInPictureAvailable = function () {
            return player.isViewModeAvailable(player.exports.ViewMode.PictureInPicture);
        };
        var pictureInPictureStateHandler = function () {
            player.getViewMode() === player.exports.ViewMode.PictureInPicture ? _this.on() : _this.off();
        };
        var pictureInPictureAvailabilityChangedHandler = function () {
            isPictureInPictureAvailable() ? _this.show() : _this.hide();
        };
        player.on(player.exports.PlayerEvent.ViewModeChanged, pictureInPictureStateHandler);
        // Available only in our native SDKs for now
        if (player.exports.PlayerEvent.ViewModeAvailabilityChanged) {
            player.on(player.exports.PlayerEvent.ViewModeAvailabilityChanged, pictureInPictureAvailabilityChangedHandler);
        }
        uimanager.getConfig().events.onUpdated.subscribe(pictureInPictureAvailabilityChangedHandler);
        this.onClick.subscribe(function () {
            if (!isPictureInPictureAvailable()) {
                if (console) {
                    console.log('PIP unavailable');
                }
                return;
            }
            var targetViewMode = player.getViewMode() === player.exports.ViewMode.PictureInPicture
                ? player.exports.ViewMode.Inline
                : player.exports.ViewMode.PictureInPicture;
            player.setViewMode(targetViewMode);
        });
        // Startup init
        pictureInPictureAvailabilityChangedHandler(); // Hide button if PIP not available
        pictureInPictureStateHandler();
    };
    return PictureInPictureToggleButton;
}(togglebutton_1.ToggleButton));
exports.PictureInPictureToggleButton = PictureInPictureToggleButton;

},{"../localization/i18n":91,"./togglebutton":74}],36:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackSpeedSelectBox = void 0;
var selectbox_1 = require("./selectbox");
var i18n_1 = require("../localization/i18n");
/**
 * A select box providing a selection of different playback speeds.
 */
var PlaybackSpeedSelectBox = /** @class */ (function (_super) {
    __extends(PlaybackSpeedSelectBox, _super);
    function PlaybackSpeedSelectBox(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.defaultPlaybackSpeeds = [0.25, 0.5, 1, 1.5, 2];
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-playbackspeedselectbox'],
        }, _this.config);
        return _this;
    }
    PlaybackSpeedSelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addDefaultItems();
        this.onItemSelected.subscribe(function (sender, value) {
            player.setPlaybackSpeed(parseFloat(value));
            _this.selectItem(value);
        });
        var setDefaultValue = function () {
            var playbackSpeed = player.getPlaybackSpeed();
            _this.setSpeed(playbackSpeed);
        };
        player.on(player.exports.PlayerEvent.PlaybackSpeedChanged, setDefaultValue);
        uimanager.getConfig().events.onUpdated.subscribe(setDefaultValue);
    };
    PlaybackSpeedSelectBox.prototype.setSpeed = function (speed) {
        if (!this.selectItem(String(speed))) {
            // a playback speed was set which is not in the list, add it to the list to show it to the user
            this.clearItems();
            this.addDefaultItems([speed]);
            this.selectItem(String(speed));
        }
    };
    PlaybackSpeedSelectBox.prototype.addDefaultItems = function (customItems) {
        var _this = this;
        if (customItems === void 0) { customItems = []; }
        var sortedSpeeds = this.defaultPlaybackSpeeds.concat(customItems).sort();
        sortedSpeeds.forEach(function (element) {
            if (element !== 1) {
                _this.addItem(String(element), "".concat(element, "x"));
            }
            else {
                _this.addItem(String(element), i18n_1.i18n.getLocalizer('normal'));
            }
        });
    };
    PlaybackSpeedSelectBox.prototype.clearItems = function () {
        this.items = [];
        this.selectedItem = null;
    };
    return PlaybackSpeedSelectBox;
}(selectbox_1.SelectBox));
exports.PlaybackSpeedSelectBox = PlaybackSpeedSelectBox;

},{"../localization/i18n":91,"./selectbox":46}],37:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackTimeLabel = exports.PlaybackTimeLabelMode = void 0;
var label_1 = require("./label");
var playerutils_1 = require("../playerutils");
var stringutils_1 = require("../stringutils");
var i18n_1 = require("../localization/i18n");
var PlaybackTimeLabelMode;
(function (PlaybackTimeLabelMode) {
    /**
     * Displays the current time
     */
    PlaybackTimeLabelMode[PlaybackTimeLabelMode["CurrentTime"] = 0] = "CurrentTime";
    /**
     * Displays the duration of the content
     */
    PlaybackTimeLabelMode[PlaybackTimeLabelMode["TotalTime"] = 1] = "TotalTime";
    /**
     * Displays the current time and the duration of the content
     * Format: ${currentTime} / ${totalTime}
     */
    PlaybackTimeLabelMode[PlaybackTimeLabelMode["CurrentAndTotalTime"] = 2] = "CurrentAndTotalTime";
    /**
     * Displays the remaining time of the content
     */
    PlaybackTimeLabelMode[PlaybackTimeLabelMode["RemainingTime"] = 3] = "RemainingTime";
})(PlaybackTimeLabelMode = exports.PlaybackTimeLabelMode || (exports.PlaybackTimeLabelMode = {}));
/**
 * A label that display the current playback time and the total time through {@link PlaybackTimeLabel#setTime setTime}
 * or any string through {@link PlaybackTimeLabel#setText setText}.
 */
var PlaybackTimeLabel = /** @class */ (function (_super) {
    __extends(PlaybackTimeLabel, _super);
    function PlaybackTimeLabel(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-playbacktimelabel',
            timeLabelMode: PlaybackTimeLabelMode.CurrentAndTotalTime,
            hideInLivePlayback: false,
        }, _this.config);
        return _this;
    }
    PlaybackTimeLabel.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var live = false;
        var liveCssClass = this.prefixCss('ui-playbacktimelabel-live');
        var liveEdgeCssClass = this.prefixCss('ui-playbacktimelabel-live-edge');
        var minWidth = 0;
        var liveClickHandler = function () {
            player.timeShift(0);
        };
        var updateLiveState = function () {
            // Player is playing a live stream when the duration is infinite
            live = player.isLive();
            // Attach/detach live marker class
            if (live) {
                _this.getDomElement().addClass(liveCssClass);
                _this.setText(i18n_1.i18n.getLocalizer('live'));
                if (config.hideInLivePlayback) {
                    _this.hide();
                }
                _this.onClick.subscribe(liveClickHandler);
                updateLiveTimeshiftState();
            }
            else {
                _this.getDomElement().removeClass(liveCssClass);
                _this.getDomElement().removeClass(liveEdgeCssClass);
                _this.show();
                _this.onClick.unsubscribe(liveClickHandler);
            }
        };
        var updateLiveTimeshiftState = function () {
            if (!live) {
                return;
            }
            // The player is only at the live edge iff the stream is not shifted and it is actually playing or playback has
            // never been started (meaning it isn't paused). A player that is paused is always behind the live edge.
            // An exception is made for live streams without a timeshift window, because here we "stop" playback instead
            // of pausing it (from a UI perspective), so we keep the live edge indicator on because a play would always
            // resume at the live edge.
            var isTimeshifted = player.getTimeShift() < 0;
            var isTimeshiftAvailable = player.getMaxTimeShift() < 0;
            if (!isTimeshifted && (!player.isPaused() || !isTimeshiftAvailable)) {
                _this.getDomElement().addClass(liveEdgeCssClass);
            }
            else {
                _this.getDomElement().removeClass(liveEdgeCssClass);
            }
        };
        var liveStreamDetector = new playerutils_1.PlayerUtils.LiveStreamDetector(player, uimanager);
        liveStreamDetector.onLiveChanged.subscribe(function (sender, args) {
            live = args.live;
            updateLiveState();
        });
        liveStreamDetector.detect(); // Initial detection
        var playbackTimeHandler = function () {
            if (!live && player.getDuration() !== Infinity) {
                _this.setTime(playerutils_1.PlayerUtils.getCurrentTimeRelativeToSeekableRange(player), player.getDuration());
            }
            // To avoid 'jumping' in the UI by varying label sizes due to non-monospaced fonts,
            // we gradually increase the min-width with the content to reach a stable size.
            var width = _this.getDomElement().width();
            if (width > minWidth) {
                minWidth = width;
                _this.getDomElement().css({
                    'min-width': minWidth + 'px',
                });
            }
        };
        var updateTimeFormatBasedOnDuration = function () {
            // Set time format depending on source duration
            _this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?
                stringutils_1.StringUtils.FORMAT_HHMMSS : stringutils_1.StringUtils.FORMAT_MMSS;
            playbackTimeHandler();
        };
        player.on(player.exports.PlayerEvent.TimeChanged, playbackTimeHandler);
        player.on(player.exports.PlayerEvent.Ready, updateTimeFormatBasedOnDuration);
        player.on(player.exports.PlayerEvent.Seeked, playbackTimeHandler);
        player.on(player.exports.PlayerEvent.TimeShift, updateLiveTimeshiftState);
        player.on(player.exports.PlayerEvent.TimeShifted, updateLiveTimeshiftState);
        player.on(player.exports.PlayerEvent.Playing, updateLiveTimeshiftState);
        player.on(player.exports.PlayerEvent.Paused, updateLiveTimeshiftState);
        player.on(player.exports.PlayerEvent.StallStarted, updateLiveTimeshiftState);
        player.on(player.exports.PlayerEvent.StallEnded, updateLiveTimeshiftState);
        var init = function () {
            // Reset min-width when a new source is ready (especially for switching VOD/Live modes where the label content
            // changes)
            minWidth = 0;
            _this.getDomElement().css({
                'min-width': null,
            });
            updateTimeFormatBasedOnDuration();
        };
        uimanager.getConfig().events.onUpdated.subscribe(init);
        init();
    };
    /**
     * Sets the current playback time and total duration.
     * @param playbackSeconds the current playback time in seconds
     * @param durationSeconds the total duration in seconds
     */
    PlaybackTimeLabel.prototype.setTime = function (playbackSeconds, durationSeconds) {
        var currentTime = stringutils_1.StringUtils.secondsToTime(playbackSeconds, this.timeFormat);
        var totalTime = stringutils_1.StringUtils.secondsToTime(durationSeconds, this.timeFormat);
        switch (this.config.timeLabelMode) {
            case PlaybackTimeLabelMode.CurrentTime:
                this.setText("".concat(currentTime));
                break;
            case PlaybackTimeLabelMode.TotalTime:
                this.setText("".concat(totalTime));
                break;
            case PlaybackTimeLabelMode.CurrentAndTotalTime:
                this.setText("".concat(currentTime, " / ").concat(totalTime));
                break;
            case PlaybackTimeLabelMode.RemainingTime:
                var remainingTime = stringutils_1.StringUtils.secondsToTime(durationSeconds - playbackSeconds, this.timeFormat);
                this.setText("".concat(remainingTime));
                break;
        }
    };
    /**
     * Sets the current time format
     * @param timeFormat the time format
     */
    PlaybackTimeLabel.prototype.setTimeFormat = function (timeFormat) {
        this.timeFormat = timeFormat;
    };
    return PlaybackTimeLabel;
}(label_1.Label));
exports.PlaybackTimeLabel = PlaybackTimeLabel;

},{"../localization/i18n":91,"../playerutils":97,"../stringutils":110,"./label":31}],38:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var playerutils_1 = require("../playerutils");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles between playback and pause.
 */
var PlaybackToggleButton = exports.PlaybackToggleButton = /** @class */ (function (_super) {
    __extends(PlaybackToggleButton, _super);
    function PlaybackToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-playbacktogglebutton',
            text: i18n_1.i18n.getLocalizer('play'),
            onAriaLabel: i18n_1.i18n.getLocalizer('pause'),
            offAriaLabel: i18n_1.i18n.getLocalizer('play'),
        }, _this.config);
        _this.isPlayInitiated = false;
        return _this;
    }
    PlaybackToggleButton.prototype.configure = function (player, uimanager, handleClickEvent) {
        var _this = this;
        if (handleClickEvent === void 0) { handleClickEvent = true; }
        _super.prototype.configure.call(this, player, uimanager);
        // Set enterFullscreenOnInitialPlayback if set in the uimanager config
        if (typeof uimanager.getConfig().enterFullscreenOnInitialPlayback === 'boolean') {
            this.config.enterFullscreenOnInitialPlayback = uimanager.getConfig().enterFullscreenOnInitialPlayback;
        }
        var isSeeking = false;
        var firstPlay = true;
        // Handler to update button state based on player state
        var playbackStateHandler = function () {
            // If the UI is currently seeking, playback is temporarily stopped but the buttons should
            // not reflect that and stay as-is (e.g indicate playback while seeking).
            if (isSeeking) {
                return;
            }
            if (player.isPlaying() || _this.isPlayInitiated) {
                _this.on();
            }
            else {
                _this.off();
            }
        };
        // Call handler upon these events
        player.on(player.exports.PlayerEvent.Play, function (e) {
            _this.isPlayInitiated = true;
            firstPlay = false;
            playbackStateHandler();
        });
        player.on(player.exports.PlayerEvent.Paused, function (e) {
            _this.isPlayInitiated = false;
            playbackStateHandler();
        });
        player.on(player.exports.PlayerEvent.Playing, function (e) {
            _this.isPlayInitiated = false;
            playbackStateHandler();
        });
        // after unloading + loading a new source, the player might be in a different playing state (from playing into stopped)
        player.on(player.exports.PlayerEvent.SourceLoaded, playbackStateHandler);
        uimanager.getConfig().events.onUpdated.subscribe(playbackStateHandler);
        player.on(player.exports.PlayerEvent.SourceUnloaded, playbackStateHandler);
        // when playback finishes, player turns to paused mode
        player.on(player.exports.PlayerEvent.PlaybackFinished, playbackStateHandler);
        player.on(player.exports.PlayerEvent.CastStarted, playbackStateHandler);
        // When a playback attempt is rejected with warning 5008, we switch the button state back to off
        // This is required for blocked autoplay, because there is no Paused event in such case
        player.on(player.exports.PlayerEvent.Warning, function (event) {
            if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {
                _this.isPlayInitiated = false;
                firstPlay = true;
                _this.off();
            }
        });
        var updateLiveState = function () {
            var showStopToggle = player.isLive() && !playerutils_1.PlayerUtils.isTimeShiftAvailable(player);
            if (showStopToggle) {
                _this.getDomElement().addClass(_this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));
            }
            else {
                _this.getDomElement().removeClass(_this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));
            }
        };
        // Detect absence of timeshifting on live streams and add tagging class to convert button icons to play/stop
        var timeShiftDetector = new playerutils_1.PlayerUtils.TimeShiftAvailabilityDetector(player);
        var liveStreamDetector = new playerutils_1.PlayerUtils.LiveStreamDetector(player, uimanager);
        timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe(function () { return updateLiveState(); });
        liveStreamDetector.onLiveChanged.subscribe(function () { return updateLiveState(); });
        timeShiftDetector.detect(); // Initial detection
        liveStreamDetector.detect();
        if (handleClickEvent) {
            // Control player by button events
            // When a button event triggers a player API call, events are fired which in turn call the event handler
            // above that updated the button state.
            this.onClick.subscribe(function () {
                if (player.isPlaying() || _this.isPlayInitiated) {
                    player.pause('ui');
                }
                else {
                    player.play('ui');
                    if (firstPlay && _this.config.enterFullscreenOnInitialPlayback) {
                        player.setViewMode(player.exports.ViewMode.Fullscreen);
                    }
                }
            });
        }
        // Track UI seeking status
        uimanager.onSeek.subscribe(function () {
            isSeeking = true;
        });
        uimanager.onSeeked.subscribe(function () {
            isSeeking = false;
        });
        // Startup init
        playbackStateHandler();
    };
    PlaybackToggleButton.CLASS_STOPTOGGLE = 'stoptoggle';
    return PlaybackToggleButton;
}(togglebutton_1.ToggleButton));

},{"../localization/i18n":91,"../playerutils":97,"./togglebutton":74}],39:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackToggleOverlay = void 0;
var container_1 = require("./container");
var hugeplaybacktogglebutton_1 = require("./hugeplaybacktogglebutton");
/**
 * Overlays the player and displays error messages.
 */
var PlaybackToggleOverlay = /** @class */ (function (_super) {
    __extends(PlaybackToggleOverlay, _super);
    function PlaybackToggleOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.playbackToggleButton = new hugeplaybacktogglebutton_1.HugePlaybackToggleButton({
            enterFullscreenOnInitialPlayback: Boolean(config.enterFullscreenOnInitialPlayback),
        });
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-playbacktoggle-overlay',
            components: [_this.playbackToggleButton],
        }, _this.config);
        return _this;
    }
    return PlaybackToggleOverlay;
}(container_1.Container));
exports.PlaybackToggleOverlay = PlaybackToggleOverlay;

},{"./container":24,"./hugeplaybacktogglebutton":28}],40:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecommendationOverlay = void 0;
var container_1 = require("./container");
var component_1 = require("./component");
var dom_1 = require("../dom");
var stringutils_1 = require("../stringutils");
var hugereplaybutton_1 = require("./hugereplaybutton");
/**
 * Overlays the player and displays recommended videos.
 */
var RecommendationOverlay = /** @class */ (function (_super) {
    __extends(RecommendationOverlay, _super);
    function RecommendationOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.replayButton = new hugereplaybutton_1.HugeReplayButton();
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-recommendation-overlay',
            hidden: true,
            components: [_this.replayButton],
        }, _this.config);
        return _this;
    }
    RecommendationOverlay.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var clearRecommendations = function () {
            for (var _i = 0, _a = _this.getComponents().slice(); _i < _a.length; _i++) {
                var component = _a[_i];
                if (component instanceof RecommendationItem) {
                    _this.removeComponent(component);
                }
            }
            _this.updateComponents();
            _this.getDomElement().removeClass(_this.prefixCss('recommendations'));
        };
        var setupRecommendations = function () {
            clearRecommendations();
            var recommendations = uimanager.getConfig().recommendations;
            if (recommendations.length > 0) {
                var index = 1;
                for (var _i = 0, recommendations_1 = recommendations; _i < recommendations_1.length; _i++) {
                    var item = recommendations_1[_i];
                    _this.addComponent(new RecommendationItem({
                        itemConfig: item,
                        cssClasses: ['recommendation-item-' + (index++)],
                    }));
                }
                _this.updateComponents(); // create container DOM elements
                _this.getDomElement().addClass(_this.prefixCss('recommendations'));
            }
        };
        uimanager.getConfig().events.onUpdated.subscribe(setupRecommendations);
        // Remove recommendations and hide overlay when source is unloaded
        player.on(player.exports.PlayerEvent.SourceUnloaded, function () {
            clearRecommendations();
            _this.hide();
        });
        // Display recommendations when playback has finished
        player.on(player.exports.PlayerEvent.PlaybackFinished, function () {
            _this.show();
        });
        // Hide recommendations when playback starts, e.g. a restart
        player.on(player.exports.PlayerEvent.Play, function () {
            _this.hide();
        });
        // Init on startup
        setupRecommendations();
    };
    return RecommendationOverlay;
}(container_1.Container));
exports.RecommendationOverlay = RecommendationOverlay;
/**
 * An item of the {@link RecommendationOverlay}. Used only internally in {@link RecommendationOverlay}.
 */
var RecommendationItem = /** @class */ (function (_super) {
    __extends(RecommendationItem, _super);
    function RecommendationItem(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-recommendation-item',
            itemConfig: null, // this must be passed in from outside
        }, _this.config);
        return _this;
    }
    RecommendationItem.prototype.toDomElement = function () {
        var config = this.config.itemConfig;
        var itemElement = new dom_1.DOM('a', {
            'id': this.config.id,
            'class': this.getCssClasses(),
            'href': config.url,
        }).css({ 'background-image': "url(".concat(config.thumbnail, ")") });
        var bgElement = new dom_1.DOM('div', {
            'class': this.prefixCss('background'),
        });
        itemElement.append(bgElement);
        var titleElement = new dom_1.DOM('span', {
            'class': this.prefixCss('title'),
        }).append(new dom_1.DOM('span', {
            'class': this.prefixCss('innertitle'),
        }).html(config.title));
        itemElement.append(titleElement);
        var timeElement = new dom_1.DOM('span', {
            'class': this.prefixCss('duration'),
        }).append(new dom_1.DOM('span', {
            'class': this.prefixCss('innerduration'),
        }).html(config.duration ? stringutils_1.StringUtils.secondsToTime(config.duration) : ''));
        itemElement.append(timeElement);
        return itemElement;
    };
    return RecommendationItem;
}(component_1.Component));

},{"../dom":84,"../stringutils":110,"./component":23,"./container":24,"./hugereplaybutton":29}],41:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReplayButton = void 0;
var button_1 = require("./button");
var i18n_1 = require("../localization/i18n");
var playerutils_1 = require("../playerutils");
/**
 * A button to play/replay a video.
 */
var ReplayButton = /** @class */ (function (_super) {
    __extends(ReplayButton, _super);
    function ReplayButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-replaybutton',
            text: i18n_1.i18n.getLocalizer('replay'),
        }, _this.config);
        return _this;
    }
    ReplayButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        if (player.isLive()) {
            this.hide();
        }
        var liveStreamDetector = new playerutils_1.PlayerUtils.LiveStreamDetector(player, uimanager);
        liveStreamDetector.onLiveChanged.subscribe(function (sender, args) {
            if (args.live) {
                _this.hide();
            }
            else {
                _this.show();
            }
        });
        this.onClick.subscribe(function () {
            if (!player.hasEnded()) {
                player.seek(0);
                // Not calling `play` will keep the play/pause state as is
            }
            else {
                // If playback has already ended, calling `play` will automatically restart from the beginning
                player.play('ui');
            }
        });
    };
    return ReplayButton;
}(button_1.Button));
exports.ReplayButton = ReplayButton;

},{"../localization/i18n":91,"../playerutils":97,"./button":17}],42:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeekBar = void 0;
var groupplaybackapi_1 = require("./../groupplaybackapi");
var component_1 = require("./component");
var dom_1 = require("../dom");
var eventdispatcher_1 = require("../eventdispatcher");
var timeout_1 = require("../timeout");
var playerutils_1 = require("../playerutils");
var stringutils_1 = require("../stringutils");
var seekbarcontroller_1 = require("./seekbarcontroller");
var i18n_1 = require("../localization/i18n");
var browserutils_1 = require("../browserutils");
var timelinemarkershandler_1 = require("./timelinemarkershandler");
var seekbarbufferlevel_1 = require("./seekbarbufferlevel");
/**
 * A seek bar to seek within the player's media. It displays the current playback position, amount of buffed data, seek
 * target, and keeps status about an ongoing seek.
 *
 * The seek bar displays different 'bars':
 *  - the playback position, i.e. the position in the media at which the player current playback pointer is positioned
 *  - the buffer position, which usually is the playback position plus the time span that is already buffered ahead
 *  - the seek position, used to preview to where in the timeline a seek will jump to
 */
var SeekBar = exports.SeekBar = /** @class */ (function (_super) {
    __extends(SeekBar, _super);
    function SeekBar(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        /**
         * Buffer of the the current playback position. The position must be buffered in case the element
         * needs to be refreshed with {@link #refreshPlaybackPosition}.
         * @type {number}
         */
        _this.playbackPositionPercentage = 0;
        _this.isUserSeeking = false;
        _this.seekBarEvents = {
            /**
             * Fired when a scrubbing seek operation is started.
             */
            onSeek: new eventdispatcher_1.EventDispatcher(),
            /**
             * Fired during a scrubbing seek to indicate that the seek preview (i.e. the video frame) should be updated.
             */
            onSeekPreview: new eventdispatcher_1.EventDispatcher(),
            /**
             * Fired when a scrubbing seek has finished or when a direct seek is issued.
             */
            onSeeked: new eventdispatcher_1.EventDispatcher(),
        };
        _this.seekWhileScrubbing = function (sender, args) {
            if (args.scrubbing) {
                _this.seek(args.position);
            }
        };
        _this.getTargetSeekPosition = function (percentage) {
            var target;
            if (_this.player.isLive()) {
                var maxTimeShift = _this.player.getMaxTimeShift();
                target = maxTimeShift - (maxTimeShift * (percentage / 100));
            }
            else {
                var seekableRangeStart = playerutils_1.PlayerUtils.getSeekableRangeStart(_this.player, 0);
                var relativeSeekTarget = _this.player.getDuration() * (percentage / 100);
                target = relativeSeekTarget + seekableRangeStart;
            }
            return target;
        };
        _this.seek = function (percentage) {
            var targetPlaybackPosition = _this.getTargetSeekPosition(percentage);
            if (_this.player.isLive()) {
                _this.player.timeShift(targetPlaybackPosition, 'ui');
            }
            else {
                _this.player.seek(targetPlaybackPosition, 'ui');
            }
        };
        var keyStepIncrements = _this.config.keyStepIncrements || {
            leftRight: 1,
            upDown: 5,
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-seekbar',
            vertical: false,
            smoothPlaybackPositionUpdateIntervalMs: 50,
            keyStepIncrements: keyStepIncrements,
            ariaLabel: i18n_1.i18n.getLocalizer('seekBar'),
            tabIndex: 0,
            snappingRange: 1,
            enableSeekPreview: true,
        }, _this.config);
        _this.label = _this.config.label;
        return _this;
    }
    SeekBar.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        if (this.hasLabel()) {
            this.getLabel().initialize();
        }
    };
    SeekBar.prototype.setAriaSliderMinMax = function (min, max) {
        this.getDomElement().attr('aria-valuemin', min);
        this.getDomElement().attr('aria-valuemax', max);
    };
    SeekBar.prototype.setAriaSliderValues = function () {
        if (this.seekBarType === seekbarcontroller_1.SeekBarType.Live) {
            var timeshiftValue = Math.ceil(this.player.getTimeShift()).toString();
            this.getDomElement().attr('aria-valuenow', timeshiftValue);
            this.getDomElement().attr('aria-valuetext', "".concat(i18n_1.i18n.performLocalization(i18n_1.i18n.getLocalizer('seekBar.timeshift')), " ").concat(i18n_1.i18n.performLocalization(i18n_1.i18n.getLocalizer('seekBar.value')), ": ").concat(timeshiftValue));
        }
        else if (this.seekBarType === seekbarcontroller_1.SeekBarType.Vod) {
            var ariaValueText = "".concat(stringutils_1.StringUtils.secondsToText(this.player.getCurrentTime()), " ").concat(i18n_1.i18n.performLocalization(i18n_1.i18n.getLocalizer('seekBar.durationText')), " ").concat(stringutils_1.StringUtils.secondsToText(this.player.getDuration()));
            this.getDomElement().attr('aria-valuenow', Math.floor(this.player.getCurrentTime()).toString());
            this.getDomElement().attr('aria-valuetext', ariaValueText);
        }
    };
    SeekBar.prototype.getPlaybackPositionPercentage = function () {
        if (this.player.isLive()) {
            return 100 - (100 / this.player.getMaxTimeShift() * this.player.getTimeShift());
        }
        return 100 / this.player.getDuration() * this.getRelativeCurrentTime();
    };
    SeekBar.prototype.updateBufferLevel = function (playbackPositionPercentage) {
        var bufferLoadedPercentageLevel;
        if (this.player.isLive()) {
            // Always show full buffer for live streams
            bufferLoadedPercentageLevel = 100;
        }
        else {
            bufferLoadedPercentageLevel = playbackPositionPercentage + (0, seekbarbufferlevel_1.getMinBufferLevel)(this.player);
        }
        this.setBufferPosition(bufferLoadedPercentageLevel);
    };
    SeekBar.prototype.configure = function (player, uimanager, configureSeek) {
        var _this = this;
        if (configureSeek === void 0) { configureSeek = true; }
        _super.prototype.configure.call(this, player, uimanager);
        this.player = player;
        // Apply scaling transform to the backdrop bar to have all bars rendered similarly
        // (the call must be up here to be executed for the volume slider as well)
        this.setPosition(this.seekBarBackdrop, 100);
        // Add seekbar controls to the seekbar
        var seekBarController = new seekbarcontroller_1.SeekBarController(this.config.keyStepIncrements, player, uimanager.getConfig().volumeController);
        seekBarController.setSeekBarControls(this.getDomElement(), function () { return _this.seekBarType; });
        // The configureSeek flag can be used by subclasses to disable configuration as seek bar. E.g. the volume
        // slider is reusing this component but adds its own functionality, and does not need the seek functionality.
        // This is actually a hack, the proper solution would be for both seek bar and volume sliders to extend
        // a common base slider component and implement their functionality there.
        if (!configureSeek) {
            this.seekBarType = seekbarcontroller_1.SeekBarType.Volume;
            return;
        }
        uimanager.onControlsShow.subscribe(function () {
            _this.isUiShown = true;
        });
        uimanager.onControlsHide.subscribe(function () {
            _this.isUiShown = false;
        });
        var isPlaying = false;
        var scrubbing = false;
        var isPlayerSeeking = false;
        var suspension;
        // Update playback and buffer positions
        var playbackPositionHandler = function (event, forceUpdate) {
            if (event === void 0) { event = null; }
            if (forceUpdate === void 0) { forceUpdate = false; }
            if (_this.isUserSeeking) {
                // We caught a seek preview seek, do not update the seekbar
                return;
            }
            var playbackPositionPercentage = _this.getPlaybackPositionPercentage();
            _this.updateBufferLevel(playbackPositionPercentage);
            // The segment request finished is used to help the playback position move, when the smooth playback position is not enabled.
            // At the same time when the user is scrubbing, we also move the position of the seekbar to display a preview during scrubbing.
            // When the user is scrubbing we do not record this as a user seek operation, as the user has yet to finish their seek,
            // but we should not move the playback position to not create a jumping behaviour.
            if (scrubbing && event && event.type === player.exports.PlayerEvent.SegmentRequestFinished && playbackPositionPercentage !== _this.playbackPositionPercentage) {
                playbackPositionPercentage = _this.playbackPositionPercentage;
            }
            if (player.isLive()) {
                if (player.getMaxTimeShift() === 0) {
                    // This case must be explicitly handled to avoid division by zero
                    _this.setPlaybackPosition(100);
                }
                else {
                    if (!_this.isSeeking()) {
                        _this.setPlaybackPosition(playbackPositionPercentage);
                    }
                    _this.setAriaSliderMinMax(player.getMaxTimeShift().toString(), '0');
                }
            }
            else {
                // Update playback position only in paused state or in the initial startup state where player is neither
                // paused nor playing. Playback updates are handled in the Timeout below.
                var isInInitialStartupState = _this.config.smoothPlaybackPositionUpdateIntervalMs === SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED
                    || forceUpdate || player.isPaused();
                var isNeitherPausedNorPlaying = player.isPaused() === player.isPlaying();
                if ((isInInitialStartupState || isNeitherPausedNorPlaying) && !_this.isSeeking()) {
                    _this.setPlaybackPosition(playbackPositionPercentage);
                }
                _this.setAriaSliderMinMax('0', player.getDuration().toString());
            }
            if (_this.isUiShown) {
                _this.setAriaSliderValues();
            }
        };
        // Update seekbar upon these events
        // init playback position when the player is ready
        player.on(player.exports.PlayerEvent.Ready, playbackPositionHandler);
        // update playback position when it changes
        player.on(player.exports.PlayerEvent.TimeChanged, playbackPositionHandler);
        // update bufferlevel when buffering is complete
        player.on(player.exports.PlayerEvent.StallEnded, playbackPositionHandler);
        // update playback position when a timeshift has finished
        player.on(player.exports.PlayerEvent.TimeShifted, playbackPositionHandler);
        // update bufferlevel when a segment has been downloaded
        player.on(player.exports.PlayerEvent.SegmentRequestFinished, playbackPositionHandler);
        this.configureLivePausedTimeshiftUpdater(player, uimanager, playbackPositionHandler);
        // Seek handling
        var onPlayerSeek = function () {
            isPlayerSeeking = true;
            _this.setSeeking(true);
            scrubbing = false;
        };
        var onPlayerSeeked = function (event, forceUpdate) {
            if (event === void 0) { event = null; }
            if (forceUpdate === void 0) { forceUpdate = false; }
            isPlayerSeeking = false;
            _this.setSeeking(false);
            // update playback position when a seek has finished
            playbackPositionHandler(event, forceUpdate);
        };
        var restorePlayingState = function () {
            // Continue playback after seek if player was playing when seek started
            if (isPlaying) {
                // use the same issuer here as in the pause on seek
                player.play('ui-seek');
            }
        };
        player.on(player.exports.PlayerEvent.Seek, onPlayerSeek);
        player.on(player.exports.PlayerEvent.Seeked, onPlayerSeeked);
        player.on(player.exports.PlayerEvent.TimeShift, onPlayerSeek);
        player.on(player.exports.PlayerEvent.TimeShifted, onPlayerSeeked);
        var isGroupPlaybackAPIAvailable = function (player) {
            return !!player.groupPlayback;
        };
        this.onSeek.subscribe(function (sender) {
            // track seeking status so we can catch events from seek preview seeks
            _this.isUserSeeking = true;
            // Notify UI manager of started seek
            uimanager.onSeek.dispatch(sender);
            if (isGroupPlaybackAPIAvailable(player) && player.groupPlayback.hasJoined() && !suspension) {
                suspension = player.groupPlayback.beginSuspension(groupplaybackapi_1.GroupPlaybackSuspensionReason.UserIsScrubbing);
            }
            // Save current playback state before performing the seek
            if (!isPlayerSeeking) {
                isPlaying = player.isPlaying();
                // Pause playback while seeking
                if (isPlaying) {
                    // use a different issuer here, as play/pause on seek is not "really" triggerd by the user
                    player.pause('ui-seek');
                }
            }
        });
        this.onSeekPreview.subscribe(function (sender, args) {
            // Notify UI manager of seek preview
            uimanager.onSeekPreview.dispatch(sender, args);
            scrubbing = args.scrubbing;
        });
        // Set enableSeekPreview if set in the uimanager config
        if (typeof uimanager.getConfig().enableSeekPreview === 'boolean') {
            this.config.enableSeekPreview = uimanager.getConfig().enableSeekPreview;
        }
        // Rate-limited scrubbing seek
        if (this.config.enableSeekPreview) {
            this.onSeekPreview.subscribeRateLimited(this.seekWhileScrubbing, 200);
        }
        this.onSeeked.subscribe(function (sender, percentage) {
            _this.isUserSeeking = false;
            // Do the seek
            _this.seek(percentage);
            // Notify UI manager of finished seek
            uimanager.onSeeked.dispatch(sender);
            // Continue playback after seek if player was playing when seek started
            restorePlayingState();
            if (isGroupPlaybackAPIAvailable(player) && player.groupPlayback.hasJoined() && suspension) {
                var proposedPlaybackTime = _this.getTargetSeekPosition(percentage);
                player.groupPlayback.endSuspension(suspension, { proposedPlaybackTime: proposedPlaybackTime });
                suspension = undefined;
            }
        });
        if (this.hasLabel()) {
            // Configure a seekbar label that is internal to the seekbar)
            this.getLabel().configure(player, uimanager);
        }
        // Hide seekbar for live sources without timeshift
        var isLive = false;
        var hasTimeShift = false;
        var switchVisibility = function (isLive, hasTimeShift) {
            if (isLive && !hasTimeShift) {
                _this.hide();
            }
            else {
                _this.show();
            }
            playbackPositionHandler(null, true);
            _this.refreshPlaybackPosition();
        };
        var liveStreamDetector = new playerutils_1.PlayerUtils.LiveStreamDetector(player, uimanager);
        liveStreamDetector.onLiveChanged.subscribe(function (sender, args) {
            isLive = args.live;
            if (isLive && _this.smoothPlaybackPositionUpdater != null) {
                _this.smoothPlaybackPositionUpdater.clear();
                _this.seekBarType = seekbarcontroller_1.SeekBarType.Live;
            }
            else {
                _this.seekBarType = seekbarcontroller_1.SeekBarType.Vod;
            }
            switchVisibility(isLive, hasTimeShift);
        });
        var timeShiftDetector = new playerutils_1.PlayerUtils.TimeShiftAvailabilityDetector(player);
        timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe(function (sender, args) {
            hasTimeShift = args.timeShiftAvailable;
            switchVisibility(isLive, hasTimeShift);
        });
        // Initial detection
        liveStreamDetector.detect();
        timeShiftDetector.detect();
        // Refresh the playback position when the player resized or the UI is configured. The playback position marker
        // is positioned absolutely and must therefore be updated when the size of the seekbar changes.
        player.on(player.exports.PlayerEvent.PlayerResized, function () {
            _this.refreshPlaybackPosition();
        });
        // Additionally, when this code is called, the seekbar is not part of the UI yet and therefore does not have a size,
        // resulting in a wrong initial position of the marker. Refreshing it once the UI is configured solved this issue.
        uimanager.onConfigured.subscribe(function () {
            _this.refreshPlaybackPosition();
        });
        // It can also happen when a new source is loaded
        player.on(player.exports.PlayerEvent.SourceLoaded, function () {
            _this.refreshPlaybackPosition();
        });
        // Add markers when a source is loaded or update when a marker is added or removed
        uimanager.getConfig().events.onUpdated.subscribe(function () {
            playbackPositionHandler();
        });
        // Set the snappingRange if set in the uimanager config
        if (typeof uimanager.getConfig().seekbarSnappingRange === 'number') {
            this.config.snappingRange = uimanager.getConfig().seekbarSnappingRange;
        }
        // Initialize seekbar
        playbackPositionHandler(); // Set the playback position
        this.setBufferPosition(0);
        this.setSeekPosition(0);
        if (this.config.smoothPlaybackPositionUpdateIntervalMs !== SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED) {
            this.configureSmoothPlaybackPositionUpdater(player, uimanager);
        }
        // Initialize markers
        this.initializeTimelineMarkers(player, uimanager);
    };
    SeekBar.prototype.initializeTimelineMarkers = function (player, uimanager) {
        var _this = this;
        var timelineMarkerConfig = {
            cssPrefix: this.config.cssPrefix,
            snappingRange: this.config.snappingRange,
        };
        this.timelineMarkersHandler = new timelinemarkershandler_1.TimelineMarkersHandler(timelineMarkerConfig, function () { return _this.seekBar.width(); }, this.seekBarMarkersContainer);
        this.timelineMarkersHandler.initialize(player, uimanager);
    };
    /**
     * Update seekbar while a live stream with DVR window is paused.
     * The playback position stays still and the position indicator visually moves towards the back.
     */
    SeekBar.prototype.configureLivePausedTimeshiftUpdater = function (player, uimanager, playbackPositionHandler) {
        var _this = this;
        // Regularly update the playback position while the timeout is active
        this.pausedTimeshiftUpdater = new timeout_1.Timeout(1000, playbackPositionHandler, true);
        // Start updater when a live stream with timeshift window is paused
        player.on(player.exports.PlayerEvent.Paused, function () {
            if (player.isLive() && player.getMaxTimeShift() < 0) {
                _this.pausedTimeshiftUpdater.start();
            }
        });
        // Stop updater when playback continues (no matter if the updater was started before)
        player.on(player.exports.PlayerEvent.Play, function () { return _this.pausedTimeshiftUpdater.clear(); });
    };
    SeekBar.prototype.configureSmoothPlaybackPositionUpdater = function (player, uimanager) {
        var _this = this;
        /*
         * Playback position update
         *
         * We do not update the position directly from the TimeChanged event, because it arrives very jittery and
         * results in a jittery position indicator since the CSS transition time is statically set.
         * To work around this issue, we maintain a local playback position that is updated in a stable regular interval
         * and kept in sync with the player.
         */
        var currentTimeSeekBar = 0;
        var currentTimePlayer = 0;
        var updateIntervalMs = 50;
        var currentTimeUpdateDeltaSecs = updateIntervalMs / 1000;
        this.smoothPlaybackPositionUpdater = new timeout_1.Timeout(updateIntervalMs, function () {
            if (_this.isSeeking()) {
                return;
            }
            currentTimeSeekBar += currentTimeUpdateDeltaSecs;
            try {
                currentTimePlayer = _this.getRelativeCurrentTime();
            }
            catch (error) {
                // Detect if the player has been destroyed and stop updating if so
                if (error instanceof player.exports.PlayerAPINotAvailableError) {
                    _this.smoothPlaybackPositionUpdater.clear();
                }
                // If the current time cannot be read it makes no sense to continue
                return;
            }
            // Sync currentTime of seekbar to player
            var currentTimeDelta = currentTimeSeekBar - currentTimePlayer;
            // If the delta is larger that 2 secs, directly jump the seekbar to the
            // player time instead of smoothly fast forwarding/rewinding.
            if (Math.abs(currentTimeDelta) > 2) {
                currentTimeSeekBar = currentTimePlayer;
            }
            // If currentTimeDelta is negative and below the adjustment threshold,
            // the player is ahead of the seekbar and we 'fast forward' the seekbar
            else if (currentTimeDelta <= -currentTimeUpdateDeltaSecs) {
                currentTimeSeekBar += currentTimeUpdateDeltaSecs;
            }
            // If currentTimeDelta is positive and above the adjustment threshold,
            // the player is behind the seekbar and we 'rewind' the seekbar
            else if (currentTimeDelta >= currentTimeUpdateDeltaSecs) {
                currentTimeSeekBar -= currentTimeUpdateDeltaSecs;
            }
            var playbackPositionPercentage = 100 / player.getDuration() * currentTimeSeekBar;
            _this.setPlaybackPosition(playbackPositionPercentage);
        }, true);
        var startSmoothPlaybackPositionUpdater = function () {
            if (!player.isLive()) {
                currentTimeSeekBar = _this.getRelativeCurrentTime();
                _this.smoothPlaybackPositionUpdater.start();
            }
        };
        var stopSmoothPlaybackPositionUpdater = function () {
            _this.smoothPlaybackPositionUpdater.clear();
        };
        player.on(player.exports.PlayerEvent.Play, startSmoothPlaybackPositionUpdater);
        player.on(player.exports.PlayerEvent.Playing, startSmoothPlaybackPositionUpdater);
        player.on(player.exports.PlayerEvent.Paused, stopSmoothPlaybackPositionUpdater);
        player.on(player.exports.PlayerEvent.PlaybackFinished, stopSmoothPlaybackPositionUpdater);
        player.on(player.exports.PlayerEvent.Seeked, function () {
            currentTimeSeekBar = _this.getRelativeCurrentTime();
        });
        player.on(player.exports.PlayerEvent.SourceUnloaded, stopSmoothPlaybackPositionUpdater);
        if (player.isPlaying()) {
            startSmoothPlaybackPositionUpdater();
        }
    };
    SeekBar.prototype.getRelativeCurrentTime = function () {
        return playerutils_1.PlayerUtils.getCurrentTimeRelativeToSeekableRange(this.player);
    };
    SeekBar.prototype.release = function () {
        _super.prototype.release.call(this);
        if (this.smoothPlaybackPositionUpdater) { // object must not necessarily exist, e.g. in volume slider subclass
            this.smoothPlaybackPositionUpdater.clear();
        }
        if (this.pausedTimeshiftUpdater) {
            this.pausedTimeshiftUpdater.clear();
        }
        if (this.config.enableSeekPreview) {
            this.onSeekPreview.unsubscribe(this.seekWhileScrubbing);
        }
    };
    SeekBar.prototype.toDomElement = function () {
        var _this = this;
        if (this.config.vertical) {
            this.config.cssClasses.push('vertical');
        }
        var seekBarContainer = new dom_1.DOM('div', {
            'id': this.config.id,
            'class': this.getCssClasses(),
            'role': 'slider',
            'aria-label': i18n_1.i18n.performLocalization(this.config.ariaLabel),
            'tabindex': this.config.tabIndex.toString(),
        });
        var seekBar = new dom_1.DOM('div', {
            'class': this.prefixCss('seekbar'),
        });
        this.seekBar = seekBar;
        // Indicator that shows the buffer fill level
        var seekBarBufferLevel = new dom_1.DOM('div', {
            'class': this.prefixCss('seekbar-bufferlevel'),
        });
        this.seekBarBufferPosition = seekBarBufferLevel;
        // Indicator that shows the current playback position
        var seekBarPlaybackPosition = new dom_1.DOM('div', {
            'class': this.prefixCss('seekbar-playbackposition'),
        });
        this.seekBarPlaybackPosition = seekBarPlaybackPosition;
        // A marker of the current playback position, e.g. a dot or line
        var seekBarPlaybackPositionMarker = new dom_1.DOM('div', {
            'class': this.prefixCss('seekbar-playbackposition-marker'),
        });
        this.seekBarPlaybackPositionMarker = seekBarPlaybackPositionMarker;
        // Indicator that show where a seek will go to
        var seekBarSeekPosition = new dom_1.DOM('div', {
            'class': this.prefixCss('seekbar-seekposition'),
        });
        this.seekBarSeekPosition = seekBarSeekPosition;
        // Indicator that shows the full seekbar
        var seekBarBackdrop = new dom_1.DOM('div', {
            'class': this.prefixCss('seekbar-backdrop'),
        });
        this.seekBarBackdrop = seekBarBackdrop;
        var seekBarChapterMarkersContainer = new dom_1.DOM('div', {
            'class': this.prefixCss('seekbar-markers'),
        });
        this.seekBarMarkersContainer = seekBarChapterMarkersContainer;
        seekBar.append(this.seekBarBackdrop, this.seekBarBufferPosition, this.seekBarSeekPosition, this.seekBarPlaybackPosition, this.seekBarMarkersContainer, this.seekBarPlaybackPositionMarker);
        var seeking = false;
        // Define handler functions so we can attach/remove them later
        var mouseTouchMoveHandler = function (e) {
            e.preventDefault();
            // Avoid propagation to VR handler
            if (_this.player.vr != null) {
                e.stopPropagation();
            }
            var targetPercentage = 100 * _this.getOffset(e);
            _this.setSeekPosition(targetPercentage);
            _this.setPlaybackPosition(targetPercentage);
            _this.onSeekPreviewEvent(targetPercentage, true);
        };
        var mouseTouchUpHandler = function (e) {
            e.preventDefault();
            // Remove handlers, seek operation is finished
            new dom_1.DOM(document).off('touchmove mousemove', mouseTouchMoveHandler);
            new dom_1.DOM(document).off('touchend mouseup', mouseTouchUpHandler);
            var targetPercentage = 100 * _this.getOffset(e);
            var snappedChapter = _this.timelineMarkersHandler && _this.timelineMarkersHandler.getMarkerAtPosition(targetPercentage);
            _this.setSeeking(false);
            seeking = false;
            // Fire seeked event
            _this.onSeekedEvent(snappedChapter ? snappedChapter.position : targetPercentage);
        };
        // A seek always start with a touchstart or mousedown directly on the seekbar.
        // To track a mouse seek also outside the seekbar (for touch events this works automatically),
        // so the user does not need to take care that the mouse always stays on the seekbar, we attach the mousemove
        // and mouseup handlers to the whole document. A seek is triggered when the user lifts the mouse key.
        // A seek mouse gesture is thus basically a click with a long time frame between down and up events.
        seekBar.on('touchstart mousedown', function (e) {
            var isTouchEvent = browserutils_1.BrowserUtils.isTouchSupported && _this.isTouchEvent(e);
            // Prevent selection of DOM elements (also prevents mousedown if current event is touchstart)
            e.preventDefault();
            // Avoid propagation to VR handler
            if (_this.player.vr != null) {
                e.stopPropagation();
            }
            _this.setSeeking(true); // Set seeking class on DOM element
            seeking = true; // Set seek tracking flag
            // Fire seeked event
            _this.onSeekEvent();
            // Add handler to track the seek operation over the whole document
            new dom_1.DOM(document).on(isTouchEvent ? 'touchmove' : 'mousemove', mouseTouchMoveHandler);
            new dom_1.DOM(document).on(isTouchEvent ? 'touchend' : 'mouseup', mouseTouchUpHandler);
        });
        // Display seek target indicator when mouse hovers or finger slides over seekbar
        seekBar.on('touchmove mousemove', function (e) {
            e.preventDefault();
            if (seeking) {
                mouseTouchMoveHandler(e);
            }
            var position = 100 * _this.getOffset(e);
            _this.setSeekPosition(position);
            _this.onSeekPreviewEvent(position, false);
            if (_this.hasLabel() && _this.getLabel().isHidden()) {
                _this.getLabel().show();
            }
        });
        // Hide seek target indicator when mouse or finger leaves seekbar
        seekBar.on('touchend mouseleave', function (e) {
            e.preventDefault();
            _this.setSeekPosition(0);
            if (_this.hasLabel()) {
                _this.getLabel().hide();
            }
        });
        seekBarContainer.append(seekBar);
        if (this.label) {
            seekBarContainer.append(this.label.getDomElement());
        }
        return seekBarContainer;
    };
    /**
     * Gets the horizontal offset of a mouse/touch event point from the left edge of the seek bar.
     * @param eventPageX the pageX coordinate of an event to calculate the offset from
     * @returns {number} a number in the range of [0, 1], where 0 is the left edge and 1 is the right edge
     */
    SeekBar.prototype.getHorizontalOffset = function (eventPageX) {
        var elementOffsetPx = this.seekBar.offset().left;
        var widthPx = this.seekBar.width();
        var offsetPx = eventPageX - elementOffsetPx;
        var offset = 1 / widthPx * offsetPx;
        return this.sanitizeOffset(offset);
    };
    /**
     * Gets the vertical offset of a mouse/touch event point from the bottom edge of the seek bar.
     * @param eventPageY the pageX coordinate of an event to calculate the offset from
     * @returns {number} a number in the range of [0, 1], where 0 is the bottom edge and 1 is the top edge
     */
    SeekBar.prototype.getVerticalOffset = function (eventPageY) {
        var elementOffsetPx = this.seekBar.offset().top;
        var widthPx = this.seekBar.height();
        var offsetPx = eventPageY - elementOffsetPx;
        var offset = 1 / widthPx * offsetPx;
        return 1 - this.sanitizeOffset(offset);
    };
    /**
     * Gets the mouse or touch event offset for the current configuration (horizontal or vertical).
     * @param e the event to calculate the offset from
     * @returns {number} a number in the range of [0, 1]
     * @see #getHorizontalOffset
     * @see #getVerticalOffset
     */
    SeekBar.prototype.getOffset = function (e) {
        if (browserutils_1.BrowserUtils.isTouchSupported && this.isTouchEvent(e)) {
            if (this.config.vertical) {
                return this.getVerticalOffset(e.type === 'touchend' ? e.changedTouches[0].pageY : e.touches[0].pageY);
            }
            else {
                return this.getHorizontalOffset(e.type === 'touchend' ? e.changedTouches[0].pageX : e.touches[0].pageX);
            }
        }
        else if (e instanceof MouseEvent) {
            if (this.config.vertical) {
                return this.getVerticalOffset(e.pageY);
            }
            else {
                return this.getHorizontalOffset(e.pageX);
            }
        }
        else {
            if (console) {
                console.warn('invalid event');
            }
            return 0;
        }
    };
    /**
     * Sanitizes the mouse offset to the range of [0, 1].
     *
     * When tracking the mouse outside the seek bar, the offset can be outside the desired range and this method
     * limits it to the desired range. E.g. a mouse event left of the left edge of a seek bar yields an offset below
     * zero, but to display the seek target on the seek bar, we need to limit it to zero.
     *
     * @param offset the offset to sanitize
     * @returns {number} the sanitized offset.
     */
    SeekBar.prototype.sanitizeOffset = function (offset) {
        // Since we track mouse moves over the whole document, the target can be outside the seek range,
        // and we need to limit it to the [0, 1] range.
        if (offset < 0) {
            offset = 0;
        }
        else if (offset > 1) {
            offset = 1;
        }
        return offset;
    };
    /**
     * Sets the position of the playback position indicator.
     * @param percent a number between 0 and 100 as returned by the player
     */
    SeekBar.prototype.setPlaybackPosition = function (percent) {
        this.playbackPositionPercentage = percent;
        // Set position of the bar
        this.setPosition(this.seekBarPlaybackPosition, percent);
        // Set position of the marker
        var totalSize = (this.config.vertical ? (this.seekBar.height() - this.seekBarPlaybackPositionMarker.height()) : this.seekBar.width());
        var px = (totalSize) / 100 * percent;
        if (this.config.vertical) {
            px = this.seekBar.height() - px - this.seekBarPlaybackPositionMarker.height();
        }
        var style = this.config.vertical ?
            // -ms-transform required for IE9
            // -webkit-transform required for Android 4.4 WebView
            {
                'transform': 'translateY(' + px + 'px)',
                '-ms-transform': 'translateY(' + px + 'px)',
                '-webkit-transform': 'translateY(' + px + 'px)',
            } :
            {
                'transform': 'translateX(' + px + 'px)',
                '-ms-transform': 'translateX(' + px + 'px)',
                '-webkit-transform': 'translateX(' + px + 'px)',
            };
        this.seekBarPlaybackPositionMarker.css(style);
    };
    /**
     * Refreshes the playback position. Can be used by subclasses to refresh the position when
     * the size of the component changes.
     */
    SeekBar.prototype.refreshPlaybackPosition = function () {
        this.setPlaybackPosition(this.playbackPositionPercentage);
    };
    /**
     * Sets the position until which media is buffered.
     * @param percent a number between 0 and 100
     */
    SeekBar.prototype.setBufferPosition = function (percent) {
        this.setPosition(this.seekBarBufferPosition, percent);
    };
    /**
     * Sets the position where a seek, if executed, would jump to.
     * @param percent a number between 0 and 100
     */
    SeekBar.prototype.setSeekPosition = function (percent) {
        this.setPosition(this.seekBarSeekPosition, percent);
    };
    /**
     * Set the actual position (width or height) of a DOM element that represent a bar in the seek bar.
     * @param element the element to set the position for
     * @param percent a number between 0 and 100
     */
    SeekBar.prototype.setPosition = function (element, percent) {
        var scale = percent / 100;
        // When the scale is exactly 1 or very near 1 (and the browser internally rounds it to 1), browsers seem to render
        // the elements differently and the height gets slightly off, leading to mismatching heights when e.g. the buffer
        // level bar has a width of 1 and the playback position bar has a width < 1. A jittering buffer level around 1
        // leads to an even worse flickering effect.
        // Various changes in CSS styling and DOM hierarchy did not solve the issue so the workaround is to avoid a scale
        // of exactly 1.
        if (scale >= 0.99999 && scale <= 1.00001) {
            scale = 0.99999;
        }
        var style = this.config.vertical ?
            // -ms-transform required for IE9
            // -webkit-transform required for Android 4.4 WebView
            {
                'transform': 'scaleY(' + scale + ')',
                '-ms-transform': 'scaleY(' + scale + ')',
                '-webkit-transform': 'scaleY(' + scale + ')',
            } :
            {
                'transform': 'scaleX(' + scale + ')',
                '-ms-transform': 'scaleX(' + scale + ')',
                '-webkit-transform': 'scaleX(' + scale + ')',
            };
        element.css(style);
    };
    /**
     * Puts the seek bar into or out of seeking state by adding/removing a class to the DOM element. This can be used
     * to adjust the styling while seeking.
     *
     * @param seeking should be true when entering seek state, false when exiting the seek state
     */
    SeekBar.prototype.setSeeking = function (seeking) {
        if (seeking) {
            this.getDomElement().addClass(this.prefixCss(SeekBar.CLASS_SEEKING));
        }
        else {
            this.getDomElement().removeClass(this.prefixCss(SeekBar.CLASS_SEEKING));
        }
    };
    /**
     * Checks if the seek bar is currently in the seek state.
     * @returns {boolean} true if in seek state, else false
     */
    SeekBar.prototype.isSeeking = function () {
        return this.getDomElement().hasClass(this.prefixCss(SeekBar.CLASS_SEEKING));
    };
    /**
     * Checks if the seek bar has a {@link SeekBarLabel}.
     * @returns {boolean} true if the seek bar has a label, else false
     */
    SeekBar.prototype.hasLabel = function () {
        return this.label != null;
    };
    /**
     * Gets the label of this seek bar.
     * @returns {SeekBarLabel} the label if this seek bar has a label, else null
     */
    SeekBar.prototype.getLabel = function () {
        return this.label;
    };
    SeekBar.prototype.onSeekEvent = function () {
        this.seekBarEvents.onSeek.dispatch(this);
    };
    SeekBar.prototype.onSeekPreviewEvent = function (percentage, scrubbing) {
        var snappedMarker = this.timelineMarkersHandler && this.timelineMarkersHandler.getMarkerAtPosition(percentage);
        var seekPositionPercentage = percentage;
        if (snappedMarker) {
            if (snappedMarker.duration > 0) {
                if (percentage < snappedMarker.position) {
                    // Snap the position to the start of the interval if the seek is within the left snap margin
                    // We know that we are within a snap margin when we are outside the marker interval but still
                    // have a snappedMarker
                    seekPositionPercentage = snappedMarker.position;
                }
                else if (percentage > snappedMarker.position + snappedMarker.duration) {
                    // Snap the position to the end of the interval if the seek is within the right snap margin
                    seekPositionPercentage = snappedMarker.position + snappedMarker.duration;
                }
            }
            else {
                // Position markers always snap to their marker position
                seekPositionPercentage = snappedMarker.position;
            }
        }
        if (this.label) {
            this.label.getDomElement().css({
                'left': seekPositionPercentage + '%',
            });
        }
        this.seekBarEvents.onSeekPreview.dispatch(this, {
            scrubbing: scrubbing,
            position: seekPositionPercentage,
            marker: snappedMarker,
        });
    };
    SeekBar.prototype.onSeekedEvent = function (percentage) {
        this.seekBarEvents.onSeeked.dispatch(this, percentage);
    };
    Object.defineProperty(SeekBar.prototype, "onSeek", {
        /**
         * Gets the event that is fired when a scrubbing seek operation is started.
         * @returns {Event<SeekBar, NoArgs>}
         */
        get: function () {
            return this.seekBarEvents.onSeek.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SeekBar.prototype, "onSeekPreview", {
        /**
         * Gets the event that is fired during a scrubbing seek (to indicate that the seek preview, i.e. the video frame,
         * should be updated), or during a normal seek preview when the seek bar is hovered (and the seek target,
         * i.e. the seek bar label, should be updated).
         * @returns {Event<SeekBar, SeekPreviewEventArgs>}
         */
        get: function () {
            return this.seekBarEvents.onSeekPreview.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SeekBar.prototype, "onSeeked", {
        /**
         * Gets the event that is fired when a scrubbing seek has finished or when a direct seek is issued.
         * @returns {Event<SeekBar, number>}
         */
        get: function () {
            return this.seekBarEvents.onSeeked.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    SeekBar.prototype.onShowEvent = function () {
        _super.prototype.onShowEvent.call(this);
        // Refresh the position of the playback position when the seek bar becomes visible. To correctly set the position,
        // the DOM element must be fully initialized an have its size calculated, because the position is set as an absolute
        // value calculated from the size. This required size is not known when it is hidden.
        // For such cases, we refresh the position here in onShow because here it is guaranteed that the component knows
        // its size and can set the position correctly.
        this.refreshPlaybackPosition();
    };
    /**
      * Checks if TouchEvent is supported.
      * @returns {boolean} true if TouchEvent not undefined, else false
      */
    SeekBar.prototype.isTouchEvent = function (e) {
        return window.TouchEvent && e instanceof TouchEvent;
    };
    SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED = -1;
    /**
     * The CSS class that is added to the DOM element while the seek bar is in 'seeking' state.
     */
    SeekBar.CLASS_SEEKING = 'seeking';
    return SeekBar;
}(component_1.Component));

},{"../browserutils":8,"../dom":84,"../eventdispatcher":86,"../localization/i18n":91,"../playerutils":97,"../stringutils":110,"../timeout":112,"./../groupplaybackapi":88,"./component":23,"./seekbarbufferlevel":43,"./seekbarcontroller":44,"./timelinemarkershandler":72}],43:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMinBufferLevel = void 0;
function getMinBufferLevel(player) {
    var playerDuration = player.getDuration();
    var videoBufferLength = player.getVideoBufferLength();
    var audioBufferLength = player.getAudioBufferLength();
    // Calculate the buffer length which is the smaller length of the audio and video buffers. If one of these
    // buffers is not available, we set it's value to MAX_VALUE to make sure that the other real value is taken
    // as the buffer length.
    var bufferLength = Math.min(videoBufferLength != null ? videoBufferLength : Number.MAX_VALUE, audioBufferLength != null ? audioBufferLength : Number.MAX_VALUE);
    // If both buffer lengths are missing, we set the buffer length to zero
    if (bufferLength === Number.MAX_VALUE) {
        bufferLength = 0;
    }
    return 100 / playerDuration * bufferLength;
}
exports.getMinBufferLevel = getMinBufferLevel;

},{}],44:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeekBarController = exports.SeekBarType = void 0;
var uiutils_1 = require("../uiutils");
var SeekBarType;
(function (SeekBarType) {
    SeekBarType[SeekBarType["Vod"] = 0] = "Vod";
    SeekBarType[SeekBarType["Live"] = 1] = "Live";
    SeekBarType[SeekBarType["Volume"] = 2] = "Volume";
})(SeekBarType = exports.SeekBarType || (exports.SeekBarType = {}));
var coerceValueIntoRange = function (value, range, cb) {
    if (value < range.min) {
        cb(range.min);
    }
    else if (value > range.max) {
        cb(range.max);
    }
    else {
        cb(value);
    }
};
var SeekBarController = /** @class */ (function () {
    function SeekBarController(keyStepIncrements, player, volumeController) {
        this.keyStepIncrements = keyStepIncrements;
        this.player = player;
        this.volumeController = volumeController;
    }
    SeekBarController.prototype.arrowKeyControls = function (currentValue, range, valueUpdate) {
        var _this = this;
        var controlValue = Math.floor(currentValue);
        return {
            left: function () { return coerceValueIntoRange(controlValue - _this.keyStepIncrements.leftRight, range, valueUpdate); },
            right: function () { return coerceValueIntoRange(controlValue + _this.keyStepIncrements.leftRight, range, valueUpdate); },
            up: function () { return coerceValueIntoRange(controlValue + _this.keyStepIncrements.upDown, range, valueUpdate); },
            down: function () { return coerceValueIntoRange(controlValue - _this.keyStepIncrements.upDown, range, valueUpdate); },
            home: function () { return coerceValueIntoRange(range.min, range, valueUpdate); },
            end: function () { return coerceValueIntoRange(range.max, range, valueUpdate); },
        };
    };
    SeekBarController.prototype.seekBarControls = function (type) {
        if (type === SeekBarType.Live) {
            return this.arrowKeyControls(this.player.getTimeShift(), { min: this.player.getMaxTimeShift(), max: 0 }, this.player.timeShift);
        }
        else if (type === SeekBarType.Vod) {
            return this.arrowKeyControls(this.player.getCurrentTime(), { min: 0, max: this.player.getDuration() }, this.player.seek);
        }
        else if (type === SeekBarType.Volume && this.volumeController != null) {
            var volumeTransition = this.volumeController.startTransition();
            return this.arrowKeyControls(this.player.getVolume(), { min: 0, max: 100 }, volumeTransition.finish.bind(volumeTransition));
        }
    };
    SeekBarController.prototype.setSeekBarControls = function (domElement, type) {
        var _this = this;
        domElement.on('keydown', function (e) {
            var controls = _this.seekBarControls(type());
            switch (e.keyCode) {
                case uiutils_1.UIUtils.KeyCode.LeftArrow: {
                    controls.left();
                    e.preventDefault();
                    break;
                }
                case uiutils_1.UIUtils.KeyCode.RightArrow: {
                    controls.right();
                    e.preventDefault();
                    break;
                }
                case uiutils_1.UIUtils.KeyCode.UpArrow: {
                    controls.up();
                    e.preventDefault();
                    break;
                }
                case uiutils_1.UIUtils.KeyCode.DownArrow: {
                    controls.down();
                    e.preventDefault();
                    break;
                }
                case uiutils_1.UIUtils.KeyCode.Home: {
                    controls.home();
                    e.preventDefault();
                    break;
                }
                case uiutils_1.UIUtils.KeyCode.End: {
                    controls.end();
                    e.preventDefault();
                    break;
                }
                case uiutils_1.UIUtils.KeyCode.Space: {
                    _this.player.isPlaying() ? _this.player.pause() : _this.player.play();
                    e.preventDefault();
                    break;
                }
            }
        });
    };
    return SeekBarController;
}());
exports.SeekBarController = SeekBarController;

},{"../uiutils":115}],45:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeekBarLabel = void 0;
var container_1 = require("./container");
var label_1 = require("./label");
var component_1 = require("./component");
var stringutils_1 = require("../stringutils");
var imageloader_1 = require("../imageloader");
var playerutils_1 = require("../playerutils");
/**
 * A label for a {@link SeekBar} that can display the seek target time, a thumbnail, and title (e.g. chapter title).
 */
var SeekBarLabel = /** @class */ (function (_super) {
    __extends(SeekBarLabel, _super);
    function SeekBarLabel(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.appliedMarkerCssClasses = [];
        _this.handleSeekPreview = function (sender, args) {
            if (_this.player.isLive()) {
                var maxTimeShift = _this.player.getMaxTimeShift();
                var timeShiftPreview = maxTimeShift - maxTimeShift * (args.position / 100);
                _this.setTime(timeShiftPreview);
                // In case of a live stream the player expects the time passed into the getThumbnail as a wallClockTime and not
                // as a relative timeShift value.
                var convertTimeShiftPreviewToWallClockTime = function (targetTimeShift) {
                    var currentTimeShift = _this.player.getTimeShift();
                    var currentTime = _this.player.getCurrentTime();
                    var wallClockTimeOfLiveEdge = currentTime - currentTimeShift;
                    return wallClockTimeOfLiveEdge + targetTimeShift;
                };
                var wallClockTime = convertTimeShiftPreviewToWallClockTime(timeShiftPreview);
                _this.setThumbnail(_this.player.getThumbnail(wallClockTime));
            }
            else {
                var time = _this.player.getDuration() * (args.position / 100);
                _this.setTime(time);
                var seekableRangeStart = playerutils_1.PlayerUtils.getSeekableRangeStart(_this.player, 0);
                var absoluteSeekTarget = time + seekableRangeStart;
                _this.setThumbnail(_this.player.getThumbnail(absoluteSeekTarget));
            }
            if (args.marker) {
                _this.setTitleText(args.marker.marker.title);
            }
            else {
                _this.setTitleText(null);
            }
            // Remove CSS classes from previous marker
            if (_this.appliedMarkerCssClasses.length > 0) {
                _this.getDomElement().removeClass(_this.appliedMarkerCssClasses.join(' '));
                _this.appliedMarkerCssClasses = [];
            }
            // Add CSS classes of current marker
            if (args.marker) {
                var cssClasses = (args.marker.marker.cssClasses || []).map(function (cssClass) { return _this.prefixCss(cssClass); });
                _this.getDomElement().addClass(cssClasses.join(' '));
                _this.appliedMarkerCssClasses = cssClasses;
            }
        };
        _this.timeLabel = new label_1.Label({ cssClasses: ['seekbar-label-time'] });
        _this.titleLabel = new label_1.Label({ cssClasses: ['seekbar-label-title'] });
        _this.thumbnail = new component_1.Component({ cssClasses: ['seekbar-thumbnail'], role: 'img' });
        _this.thumbnailImageLoader = new imageloader_1.ImageLoader();
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-seekbar-label',
            components: [new container_1.Container({
                    components: [
                        _this.thumbnail,
                        new container_1.Container({
                            components: [_this.titleLabel, _this.timeLabel],
                            cssClass: 'seekbar-label-metadata',
                        })
                    ],
                    cssClass: 'seekbar-label-inner',
                })],
            hidden: true,
        }, _this.config);
        return _this;
    }
    SeekBarLabel.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.player = player;
        this.uiManager = uimanager;
        uimanager.onSeekPreview.subscribeRateLimited(this.handleSeekPreview, 100);
        var init = function () {
            // Set time format depending on source duration
            _this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?
                stringutils_1.StringUtils.FORMAT_HHMMSS : stringutils_1.StringUtils.FORMAT_MMSS;
            // Set initial state of title and thumbnail to handle sourceLoaded when switching to a live-stream
            _this.setTitleText(null);
            _this.setThumbnail(null);
        };
        uimanager.getConfig().events.onUpdated.subscribe(init);
        init();
    };
    /**
     * Sets arbitrary text on the label.
     * @param text the text to show on the label
     */
    SeekBarLabel.prototype.setText = function (text) {
        this.timeLabel.setText(text);
    };
    /**
     * Sets a time to be displayed on the label.
     * @param seconds the time in seconds to display on the label
     */
    SeekBarLabel.prototype.setTime = function (seconds) {
        this.setText(stringutils_1.StringUtils.secondsToTime(seconds, this.timeFormat));
    };
    /**
     * Sets the text on the title label.
     * @param text the text to show on the label
     */
    SeekBarLabel.prototype.setTitleText = function (text) {
        if (text === void 0) { text = ''; }
        this.titleLabel.setText(text);
    };
    /**
     * Sets or removes a thumbnail on the label.
     * @param thumbnail the thumbnail to display on the label or null to remove a displayed thumbnail
     */
    SeekBarLabel.prototype.setThumbnail = function (thumbnail) {
        var _this = this;
        if (thumbnail === void 0) { thumbnail = null; }
        var thumbnailElement = this.thumbnail.getDomElement();
        if (thumbnail == null) {
            thumbnailElement.css({
                'background-image': null,
                'display': null,
                'width': null,
                'height': null,
            });
        }
        else {
            // We use the thumbnail image loader to make sure the thumbnail is loaded and it's size is known before be can
            // calculate the CSS properties and set them on the element.
            this.thumbnailImageLoader.load(thumbnail.url, function (url, width, height) {
                // can be checked like that because x/y/w/h are either all present or none
                // https://www.w3.org/TR/media-frags/#naming-space
                if (thumbnail.x !== undefined) {
                    thumbnailElement.css(_this.thumbnailCssSprite(thumbnail, width, height));
                }
                else {
                    thumbnailElement.css(_this.thumbnailCssSingleImage(thumbnail, width, height));
                }
            });
        }
    };
    SeekBarLabel.prototype.thumbnailCssSprite = function (thumbnail, width, height) {
        var thumbnailCountX = width / thumbnail.width;
        var thumbnailCountY = height / thumbnail.height;
        var thumbnailIndexX = thumbnail.x / thumbnail.width;
        var thumbnailIndexY = thumbnail.y / thumbnail.height;
        var sizeX = 100 * thumbnailCountX;
        var sizeY = 100 * thumbnailCountY;
        var offsetX = 100 * thumbnailIndexX;
        var offsetY = 100 * thumbnailIndexY;
        var aspectRatio = 1 / thumbnail.width * thumbnail.height;
        // The thumbnail size is set by setting the CSS 'width' and 'padding-bottom' properties. 'padding-bottom' is
        // used because it is relative to the width and can be used to set the aspect ratio of the thumbnail.
        // A default value for width is set in the stylesheet and can be overwritten from there or anywhere else.
        return {
            'display': 'inherit',
            'background-image': "url(".concat(thumbnail.url, ")"),
            'padding-bottom': "".concat(100 * aspectRatio, "%"),
            'background-size': "".concat(sizeX, "% ").concat(sizeY, "%"),
            'background-position': "-".concat(offsetX, "% -").concat(offsetY, "%"),
        };
    };
    SeekBarLabel.prototype.thumbnailCssSingleImage = function (thumbnail, width, height) {
        var aspectRatio = 1 / width * height;
        return {
            'display': 'inherit',
            'background-image': "url(".concat(thumbnail.url, ")"),
            'padding-bottom': "".concat(100 * aspectRatio, "%"),
            'background-size': "100% 100%",
            'background-position': "0 0",
        };
    };
    SeekBarLabel.prototype.release = function () {
        _super.prototype.release.call(this);
        this.uiManager.onSeekPreview.unsubscribe(this.handleSeekPreview);
    };
    return SeekBarLabel;
}(container_1.Container));
exports.SeekBarLabel = SeekBarLabel;

},{"../imageloader":90,"../playerutils":97,"../stringutils":110,"./component":23,"./container":24,"./label":31}],46:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectBox = void 0;
var listselector_1 = require("./listselector");
var dom_1 = require("../dom");
var i18n_1 = require("../localization/i18n");
/**
 * A simple select box providing the possibility to select a single item out of a list of available items.
 *
 * DOM example:
 * <code>
 *     <select class='ui-selectbox'>
 *         <option value='key'>label</option>
 *         ...
 *     </select>
 * </code>
 */
var SelectBox = /** @class */ (function (_super) {
    __extends(SelectBox, _super);
    function SelectBox(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-selectbox',
        }, _this.config);
        return _this;
    }
    SelectBox.prototype.toDomElement = function () {
        var _this = this;
        var selectElement = new dom_1.DOM('select', {
            'id': this.config.id,
            'class': this.getCssClasses(),
            'aria-label': i18n_1.i18n.performLocalization(this.config.ariaLabel),
        });
        this.selectElement = selectElement;
        this.updateDomItems();
        selectElement.on('change', function () {
            var value = selectElement.val();
            _this.onItemSelectedEvent(value, false);
        });
        return selectElement;
    };
    SelectBox.prototype.updateDomItems = function (selectedValue) {
        if (selectedValue === void 0) { selectedValue = null; }
        // Delete all children
        this.selectElement.empty();
        // Add updated children
        for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
            var item = _a[_i];
            var optionElement = new dom_1.DOM('option', {
                'value': String(item.key),
            }).html(i18n_1.i18n.performLocalization(item.label));
            if (item.key === String(selectedValue)) { // convert selectedValue to string to catch 'null'/null case
                optionElement.attr('selected', 'selected');
            }
            this.selectElement.append(optionElement);
        }
    };
    SelectBox.prototype.onItemAddedEvent = function (value) {
        _super.prototype.onItemAddedEvent.call(this, value);
        this.updateDomItems(this.selectedItem);
    };
    SelectBox.prototype.onItemRemovedEvent = function (value) {
        _super.prototype.onItemRemovedEvent.call(this, value);
        this.updateDomItems(this.selectedItem);
    };
    SelectBox.prototype.onItemSelectedEvent = function (value, updateDomItems) {
        if (updateDomItems === void 0) { updateDomItems = true; }
        _super.prototype.onItemSelectedEvent.call(this, value);
        if (updateDomItems) {
            this.updateDomItems(value);
        }
    };
    return SelectBox;
}(listselector_1.ListSelector));
exports.SelectBox = SelectBox;

},{"../dom":84,"../localization/i18n":91,"./listselector":33}],47:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsPanel = void 0;
var container_1 = require("./container");
var selectbox_1 = require("./selectbox");
var timeout_1 = require("../timeout");
var eventdispatcher_1 = require("../eventdispatcher");
var settingspanelpage_1 = require("./settingspanelpage");
var NavigationDirection;
(function (NavigationDirection) {
    NavigationDirection[NavigationDirection["Forwards"] = 0] = "Forwards";
    NavigationDirection[NavigationDirection["Backwards"] = 1] = "Backwards";
})(NavigationDirection || (NavigationDirection = {}));
/**
 * A panel containing a list of {@link SettingsPanelPage items}.
 *
 * To configure pages just pass them in the components array.
 *
 * Example:
 *  let settingsPanel = new SettingsPanel({
 *    hidden: true,
 *  });
 *
 *  let settingsPanelPage = new SettingsPanelPage({
 *    components: […]
 *  });
 *
 *  let secondSettingsPanelPage = new SettingsPanelPage({
 *    components: […]
 *  });
 *
 *  settingsPanel.addComponent(settingsPanelPage);
 *  settingsPanel.addComponent(secondSettingsPanelPage);
 *
 * For an example how to navigate between pages @see SettingsPanelPageNavigatorButton
 */
var SettingsPanel = exports.SettingsPanel = /** @class */ (function (_super) {
    __extends(SettingsPanel, _super);
    function SettingsPanel(config) {
        var _this = _super.call(this, config) || this;
        _this.navigationStack = [];
        _this.settingsPanelEvents = {
            onSettingsStateChanged: new eventdispatcher_1.EventDispatcher(),
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-settings-panel',
            hideDelay: 3000,
            pageTransitionAnimation: true,
        }, _this.config);
        _this.activePage = _this.getRootPage();
        return _this;
    }
    SettingsPanel.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        uimanager.onControlsHide.subscribe(function () { return _this.hideHoveredSelectBoxes(); });
        if (config.hideDelay > -1) {
            this.hideTimeout = new timeout_1.Timeout(config.hideDelay, function () {
                _this.hide();
                _this.hideHoveredSelectBoxes();
            });
            this.getDomElement().on('mouseenter', function () {
                // On mouse enter clear the timeout
                _this.hideTimeout.clear();
            });
            this.getDomElement().on('mouseleave', function () {
                // On mouse leave activate the timeout
                _this.hideTimeout.reset();
            });
            this.getDomElement().on('focusin', function () {
                _this.hideTimeout.clear();
            });
            this.getDomElement().on('focusout', function () {
                _this.hideTimeout.reset();
            });
        }
        this.onHide.subscribe(function () {
            if (config.hideDelay > -1) {
                // Clear timeout when hidden from outside
                _this.hideTimeout.clear();
            }
            // Since we don't reset the actual navigation here we need to simulate a onInactive event in case some panel
            // needs to do something when they become invisible / inactive.
            _this.activePage.onInactiveEvent();
        });
        this.onShow.subscribe(function () {
            // Reset navigation when te panel gets visible to avoid a weird animation when hiding
            _this.resetNavigation(true);
            // Since we don't need to navigate to the root page again we need to fire the onActive event when the settings
            // panel gets visible.
            _this.activePage.onActiveEvent();
            if (config.hideDelay > -1) {
                // Activate timeout when shown
                _this.hideTimeout.start();
            }
        });
        // pass event from root page through
        this.getRootPage().onSettingsStateChanged.subscribe(function () {
            _this.onSettingsStateChangedEvent();
        });
        this.updateActivePageClass();
    };
    /**
     * Returns the current active / visible page
     * @return {SettingsPanelPage}
     */
    SettingsPanel.prototype.getActivePage = function () {
        return this.activePage;
    };
    /**
     * Sets the
     * @deprecated Use {@link setActivePage} instead
     * @param index
     */
    SettingsPanel.prototype.setActivePageIndex = function (index) {
        this.setActivePage(this.getPages()[index]);
    };
    /**
     * Adds the passed page to the navigation stack and makes it visible.
     * Use {@link popSettingsPanelPage} to navigate backwards.
     *
     * Results in no-op if the target page is the current page.
     * @params page
     */
    SettingsPanel.prototype.setActivePage = function (targetPage) {
        if (targetPage === this.getActivePage()) {
            console.warn('Page is already the current one ... skipping navigation');
            return;
        }
        this.navigateToPage(targetPage, this.getActivePage(), NavigationDirection.Forwards, !this.config.pageTransitionAnimation);
    };
    /**
     * Resets the navigation stack by navigating back to the root page and displaying it.
     */
    SettingsPanel.prototype.popToRootSettingsPanelPage = function () {
        this.resetNavigation(this.config.pageTransitionAnimation);
    };
    /**
     * Removes the current page from the navigation stack and makes the previous one visible.
     * Results in a no-op if we are already on the root page.
     */
    SettingsPanel.prototype.popSettingsPanelPage = function () {
        if (this.navigationStack.length === 0) {
            console.warn('Already on the root page ... skipping navigation');
            return;
        }
        var targetPage = this.navigationStack[this.navigationStack.length - 2];
        // The root part isn't part of the navigation stack so handle it explicitly here
        if (!targetPage) {
            targetPage = this.getRootPage();
        }
        this.navigateToPage(targetPage, this.activePage, NavigationDirection.Backwards, !this.config.pageTransitionAnimation);
    };
    /**
     * Checks if there are active settings within the root page of the settings panel.
     * An active setting is a setting that is visible and enabled, which the user can interact with.
     * @returns {boolean} true if there are active settings, false if the panel is functionally empty to a user
     */
    SettingsPanel.prototype.rootPageHasActiveSettings = function () {
        return this.getRootPage().hasActiveSettings();
    };
    /**
     * Return all configured pages
     * @returns {SettingsPanelPage[]}
     */
    SettingsPanel.prototype.getPages = function () {
        return this.config.components.filter(function (component) { return component instanceof settingspanelpage_1.SettingsPanelPage; });
    };
    Object.defineProperty(SettingsPanel.prototype, "onSettingsStateChanged", {
        get: function () {
            return this.settingsPanelEvents.onSettingsStateChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    SettingsPanel.prototype.release = function () {
        _super.prototype.release.call(this);
        if (this.hideTimeout) {
            this.hideTimeout.clear();
        }
    };
    // Support adding settingsPanelPages after initialization
    SettingsPanel.prototype.addComponent = function (component) {
        if (this.getPages().length === 0 && component instanceof settingspanelpage_1.SettingsPanelPage) {
            this.activePage = component;
        }
        _super.prototype.addComponent.call(this, component);
    };
    SettingsPanel.prototype.updateActivePageClass = function () {
        var _this = this;
        this.getPages().forEach(function (page) {
            if (page === _this.activePage) {
                page.getDomElement().addClass(_this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));
            }
            else {
                page.getDomElement().removeClass(_this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));
            }
        });
    };
    SettingsPanel.prototype.resetNavigation = function (resetNavigationOnShow) {
        var sourcePage = this.getActivePage();
        var rootPage = this.getRootPage();
        if (sourcePage) {
            // Since the onInactiveEvent was already fired in the onHide we need to suppress it here
            if (!resetNavigationOnShow) {
                sourcePage.onInactiveEvent();
            }
        }
        this.navigationStack = [];
        this.animateNavigation(rootPage, sourcePage, resetNavigationOnShow);
        this.activePage = rootPage;
        this.updateActivePageClass();
    };
    SettingsPanel.prototype.navigateToPage = function (targetPage, sourcePage, direction, skipAnimation) {
        this.activePage = targetPage;
        if (direction === NavigationDirection.Forwards) {
            this.navigationStack.push(targetPage);
        }
        else {
            this.navigationStack.pop();
        }
        this.animateNavigation(targetPage, sourcePage, skipAnimation);
        this.updateActivePageClass();
        targetPage.onActiveEvent();
        sourcePage.onInactiveEvent();
    };
    /**
     * @param targetPage
     * @param sourcePage
     * @param skipAnimation This is just an internal flag if we want to have an animation. It is set true when we reset
     * the navigation within the onShow callback of the settingsPanel. In this case we don't want an actual animation but
     * the recalculation of the dimension of the settingsPanel.
     * This is independent of the pageTransitionAnimation flag.
     */
    SettingsPanel.prototype.animateNavigation = function (targetPage, sourcePage, skipAnimation) {
        if (!this.config.pageTransitionAnimation) {
            return;
        }
        var settingsPanelDomElement = this.getDomElement();
        var settingsPanelHTMLElement = this.getDomElement().get(0);
        // get current dimension
        var settingsPanelWidth = settingsPanelHTMLElement.scrollWidth;
        var settingsPanelHeight = settingsPanelHTMLElement.scrollHeight;
        // calculate target size of the settings panel
        sourcePage.getDomElement().css('display', 'none');
        this.getDomElement().css({ width: '', height: '' }); // let css auto settings kick in again
        var targetPageHtmlElement = targetPage.getDomElement().get(0);
        // clone the targetPage DOM element so that we can calculate the width / height how they will be after
        // switching the page. We are using a clone to prevent (mostly styling) side-effects on the real DOM element
        var clone = targetPageHtmlElement.cloneNode(true);
        // append to parent so we get the 'real' size
        var containerWrapper = targetPageHtmlElement.parentNode;
        containerWrapper.appendChild(clone);
        // set clone visible
        clone.style.display = 'block';
        // collect target dimension
        var targetSettingsPanelWidth = settingsPanelHTMLElement.scrollWidth;
        var targetSettingsPanelHeight = settingsPanelHTMLElement.scrollHeight;
        // remove clone from the DOM
        clone.parentElement.removeChild(clone); // .remove() is not working in IE
        sourcePage.getDomElement().css('display', '');
        // set the values back to the current ones that the browser animates it (browsers don't animate 'auto' values)
        settingsPanelDomElement.css({
            width: settingsPanelWidth + 'px',
            height: settingsPanelHeight + 'px',
        });
        if (!skipAnimation) {
            // We need to force the browser to reflow between setting the width and height that we actually get a animation
            this.forceBrowserReflow();
        }
        // set the values to the target dimension
        settingsPanelDomElement.css({
            width: targetSettingsPanelWidth + 'px',
            height: targetSettingsPanelHeight + 'px',
        });
    };
    SettingsPanel.prototype.forceBrowserReflow = function () {
        // Force the browser to reflow the layout
        // https://gist.github.com/paulirish/5d52fb081b3570c81e3a
        this.getDomElement().get(0).offsetLeft;
    };
    /**
     * Hack for IE + Firefox
     * when the settings panel fades out while an item of a select box is still hovered, the select box will not fade out
     * while the settings panel does. This would leave a floating select box, which is just weird
     */
    SettingsPanel.prototype.hideHoveredSelectBoxes = function () {
        this.getComputedItems().forEach(function (item) {
            if (item.isActive() && item.setting instanceof selectbox_1.SelectBox) {
                var selectBox_1 = item.setting;
                var oldDisplay_1 = selectBox_1.getDomElement().css('display');
                if (oldDisplay_1 === 'none') {
                    // if oldDisplay is already 'none', no need to set to 'none' again. It could lead to race condition
                    // wherein the display is irreversibly set to 'none' when browser tab/window is not active because
                    // requestAnimationFrame is either delayed or paused in some browsers in inactive state
                    return;
                }
                // updating the display to none marks the select-box as inactive, so it will be hidden with the rest
                // we just have to make sure to reset this as soon as possible
                selectBox_1.getDomElement().css('display', 'none');
                if (window.requestAnimationFrame) {
                    requestAnimationFrame(function () {
                        selectBox_1.getDomElement().css('display', oldDisplay_1);
                    });
                }
                else {
                    // IE9 has no requestAnimationFrame, set the value directly. It has no optimization about ignoring DOM-changes
                    // between animationFrames
                    selectBox_1.getDomElement().css('display', oldDisplay_1);
                }
            }
        });
    };
    // collect all items from all pages (see hideHoveredSelectBoxes)
    SettingsPanel.prototype.getComputedItems = function () {
        var allItems = [];
        for (var _i = 0, _a = this.getPages(); _i < _a.length; _i++) {
            var page = _a[_i];
            allItems.push.apply(allItems, page.getItems());
        }
        return allItems;
    };
    SettingsPanel.prototype.getRootPage = function () {
        return this.getPages()[0];
    };
    SettingsPanel.prototype.onSettingsStateChangedEvent = function () {
        this.settingsPanelEvents.onSettingsStateChanged.dispatch(this);
    };
    SettingsPanel.CLASS_ACTIVE_PAGE = 'active';
    return SettingsPanel;
}(container_1.Container));

},{"../eventdispatcher":86,"../timeout":112,"./container":24,"./selectbox":46,"./settingspanelpage":49}],48:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsPanelItem = void 0;
var container_1 = require("./container");
var component_1 = require("./component");
var eventdispatcher_1 = require("../eventdispatcher");
var label_1 = require("./label");
var selectbox_1 = require("./selectbox");
var listbox_1 = require("./listbox");
var videoqualityselectbox_1 = require("./videoqualityselectbox");
var audioqualityselectbox_1 = require("./audioqualityselectbox");
var playbackspeedselectbox_1 = require("./playbackspeedselectbox");
/**
 * An item for a {@link SettingsPanelPage},
 * Containing an optional {@link Label} and a component that configures a setting.
 * If the components is a {@link SelectBox} it will handle the logic of displaying it or not
 */
var SettingsPanelItem = /** @class */ (function (_super) {
    __extends(SettingsPanelItem, _super);
    function SettingsPanelItem(label, setting, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.settingsPanelItemEvents = {
            onActiveChanged: new eventdispatcher_1.EventDispatcher(),
        };
        _this.setting = setting;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-settings-panel-item',
            role: 'menuitem',
        }, _this.config);
        if (label !== null) {
            if (label instanceof component_1.Component) {
                _this.label = label;
            }
            else {
                _this.label = new label_1.Label({ text: label, for: _this.setting.getConfig().id });
            }
            _this.addComponent(_this.label);
        }
        _this.addComponent(_this.setting);
        return _this;
    }
    SettingsPanelItem.prototype.configure = function (player, uimanager) {
        var _this = this;
        if (this.setting instanceof selectbox_1.SelectBox || this.setting instanceof listbox_1.ListBox) {
            var handleConfigItemChanged = function () {
                if (!(_this.setting instanceof selectbox_1.SelectBox) && !(_this.setting instanceof listbox_1.ListBox)) {
                    return;
                }
                // The minimum number of items that must be available for the setting to be displayed
                // By default, at least two items must be available, else a selection is not possible
                var minItemsToDisplay = 2;
                // Audio/video quality select boxes contain an additional 'auto' mode, which in combination with a single
                // available quality also does not make sense
                if ((_this.setting instanceof videoqualityselectbox_1.VideoQualitySelectBox && _this.setting.hasAutoItem())
                    || _this.setting instanceof audioqualityselectbox_1.AudioQualitySelectBox) {
                    minItemsToDisplay = 3;
                }
                if (_this.setting.itemCount() < minItemsToDisplay) {
                    // Hide the setting if no meaningful choice is available
                    _this.hide();
                }
                else if (_this.setting instanceof playbackspeedselectbox_1.PlaybackSpeedSelectBox
                    && !uimanager.getConfig().playbackSpeedSelectionEnabled) {
                    // Hide the PlaybackSpeedSelectBox if disabled in config
                    _this.hide();
                }
                else {
                    _this.show();
                }
                // Visibility might have changed and therefore the active state might have changed so we fire the event
                // TODO fire only when state has really changed (e.g. check if visibility has really changed)
                _this.onActiveChangedEvent();
                _this.getDomElement().attr('aria-haspopup', 'true');
            };
            this.setting.onItemAdded.subscribe(handleConfigItemChanged);
            this.setting.onItemRemoved.subscribe(handleConfigItemChanged);
            // Initialize hidden state
            handleConfigItemChanged();
        }
    };
    /**
     * Checks if this settings panel item is active, i.e. visible and enabled and a user can interact with it.
     * @returns {boolean} true if the panel is active, else false
     */
    SettingsPanelItem.prototype.isActive = function () {
        return this.isShown();
    };
    SettingsPanelItem.prototype.onActiveChangedEvent = function () {
        this.settingsPanelItemEvents.onActiveChanged.dispatch(this);
    };
    Object.defineProperty(SettingsPanelItem.prototype, "onActiveChanged", {
        /**
         * Gets the event that is fired when the 'active' state of this item changes.
         * @see #isActive
         * @returns {Event<SettingsPanelItem, NoArgs>}
         */
        get: function () {
            return this.settingsPanelItemEvents.onActiveChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    return SettingsPanelItem;
}(container_1.Container));
exports.SettingsPanelItem = SettingsPanelItem;

},{"../eventdispatcher":86,"./audioqualityselectbox":13,"./component":23,"./container":24,"./label":31,"./listbox":32,"./playbackspeedselectbox":36,"./selectbox":46,"./videoqualityselectbox":77}],49:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsPanelPage = void 0;
var container_1 = require("./container");
var settingspanelitem_1 = require("./settingspanelitem");
var eventdispatcher_1 = require("../eventdispatcher");
var browserutils_1 = require("../browserutils");
/**
 * A panel containing a list of {@link SettingsPanelItem items} that represent labelled settings.
 */
var SettingsPanelPage = exports.SettingsPanelPage = /** @class */ (function (_super) {
    __extends(SettingsPanelPage, _super);
    function SettingsPanelPage(config) {
        var _this = _super.call(this, config) || this;
        _this.settingsPanelPageEvents = {
            onSettingsStateChanged: new eventdispatcher_1.EventDispatcher(),
            onActive: new eventdispatcher_1.EventDispatcher(),
            onInactive: new eventdispatcher_1.EventDispatcher(),
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-settings-panel-page',
            role: 'menu',
        }, _this.config);
        return _this;
    }
    SettingsPanelPage.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        // Fire event when the state of a settings-item has changed
        var settingsStateChangedHandler = function () {
            _this.onSettingsStateChangedEvent();
            // Attach marker class to last visible item
            var lastShownItem = null;
            for (var _i = 0, _a = _this.getItems(); _i < _a.length; _i++) {
                var component = _a[_i];
                component.getDomElement().removeClass(_this.prefixCss(SettingsPanelPage.CLASS_LAST));
                if (component.isShown()) {
                    lastShownItem = component;
                }
            }
            if (lastShownItem) {
                lastShownItem.getDomElement().addClass(_this.prefixCss(SettingsPanelPage.CLASS_LAST));
            }
        };
        for (var _i = 0, _a = this.getItems(); _i < _a.length; _i++) {
            var component = _a[_i];
            component.onActiveChanged.subscribe(settingsStateChangedHandler);
        }
    };
    SettingsPanelPage.prototype.hasActiveSettings = function () {
        for (var _i = 0, _a = this.getItems(); _i < _a.length; _i++) {
            var component = _a[_i];
            if (component.isActive()) {
                return true;
            }
        }
        return false;
    };
    SettingsPanelPage.prototype.getItems = function () {
        return this.config.components.filter(function (component) { return component instanceof settingspanelitem_1.SettingsPanelItem; });
    };
    SettingsPanelPage.prototype.onSettingsStateChangedEvent = function () {
        this.settingsPanelPageEvents.onSettingsStateChanged.dispatch(this);
    };
    Object.defineProperty(SettingsPanelPage.prototype, "onSettingsStateChanged", {
        get: function () {
            return this.settingsPanelPageEvents.onSettingsStateChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    SettingsPanelPage.prototype.onActiveEvent = function () {
        var activeItems = this.getItems().filter(function (item) { return item.isActive(); });
        this.settingsPanelPageEvents.onActive.dispatch(this);
        // Disable focus for iOS and iPadOS 13. They open select boxes automatically on focus and we want to avoid that.
        if (activeItems.length > 0 && !browserutils_1.BrowserUtils.isIOS && !(browserutils_1.BrowserUtils.isMacIntel && browserutils_1.BrowserUtils.isTouchSupported)) {
            activeItems[0].getDomElement().focusToFirstInput();
        }
    };
    Object.defineProperty(SettingsPanelPage.prototype, "onActive", {
        get: function () {
            return this.settingsPanelPageEvents.onActive.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    SettingsPanelPage.prototype.onInactiveEvent = function () {
        this.settingsPanelPageEvents.onInactive.dispatch(this);
    };
    Object.defineProperty(SettingsPanelPage.prototype, "onInactive", {
        get: function () {
            return this.settingsPanelPageEvents.onInactive.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    SettingsPanelPage.CLASS_LAST = 'last';
    return SettingsPanelPage;
}(container_1.Container));

},{"../browserutils":8,"../eventdispatcher":86,"./container":24,"./settingspanelitem":48}],50:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsPanelPageBackButton = void 0;
var settingspanelpagenavigatorbutton_1 = require("./settingspanelpagenavigatorbutton");
var SettingsPanelPageBackButton = /** @class */ (function (_super) {
    __extends(SettingsPanelPageBackButton, _super);
    function SettingsPanelPageBackButton(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-settingspanelpagebackbutton',
            text: 'back',
        }, _this.config);
        return _this;
    }
    SettingsPanelPageBackButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.onClick.subscribe(function () {
            _this.popPage();
        });
    };
    return SettingsPanelPageBackButton;
}(settingspanelpagenavigatorbutton_1.SettingsPanelPageNavigatorButton));
exports.SettingsPanelPageBackButton = SettingsPanelPageBackButton;

},{"./settingspanelpagenavigatorbutton":51}],51:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsPanelPageNavigatorButton = void 0;
var button_1 = require("./button");
/**
 * Can be used to navigate between SettingsPanelPages
 *
 * Example:
 *  let settingPanelNavigationButton = new SettingsPanelPageNavigatorButton({
 *    container: settingsPanel,
 *    targetPage: settingsPanelPage,
 *  });
 *
 *  settingsPanelPage.addComponent(settingPanelNavigationButton);
 *
 * Don't forget to add the settingPanelNavigationButton to the settingsPanelPage.
 */
var SettingsPanelPageNavigatorButton = /** @class */ (function (_super) {
    __extends(SettingsPanelPageNavigatorButton, _super);
    function SettingsPanelPageNavigatorButton(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {}, _this.config);
        _this.container = _this.config.container;
        _this.targetPage = _this.config.targetPage;
        return _this;
    }
    /**
     * navigate one level back
     */
    SettingsPanelPageNavigatorButton.prototype.popPage = function () {
        this.container.popSettingsPanelPage();
    };
    /**
     * navigate to the target page
     */
    SettingsPanelPageNavigatorButton.prototype.pushTargetPage = function () {
        this.container.setActivePage(this.targetPage);
    };
    return SettingsPanelPageNavigatorButton;
}(button_1.Button));
exports.SettingsPanelPageNavigatorButton = SettingsPanelPageNavigatorButton;

},{"./button":17}],52:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsPanelPageOpenButton = void 0;
var settingspanelpagenavigatorbutton_1 = require("./settingspanelpagenavigatorbutton");
var i18n_1 = require("../localization/i18n");
var SettingsPanelPageOpenButton = /** @class */ (function (_super) {
    __extends(SettingsPanelPageOpenButton, _super);
    function SettingsPanelPageOpenButton(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-settingspanelpageopenbutton',
            text: i18n_1.i18n.getLocalizer('open'),
            role: 'menuitem',
        }, _this.config);
        return _this;
    }
    SettingsPanelPageOpenButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.getDomElement().attr('aria-haspopup', 'true');
        this.getDomElement().attr('aria-owns', this.config.targetPage.getConfig().id);
        this.onClick.subscribe(function () {
            _this.pushTargetPage();
        });
    };
    return SettingsPanelPageOpenButton;
}(settingspanelpagenavigatorbutton_1.SettingsPanelPageNavigatorButton));
exports.SettingsPanelPageOpenButton = SettingsPanelPageOpenButton;

},{"../localization/i18n":91,"./settingspanelpagenavigatorbutton":51}],53:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var settingspanel_1 = require("./settingspanel");
var arrayutils_1 = require("../arrayutils");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles visibility of a settings panel.
 */
var SettingsToggleButton = /** @class */ (function (_super) {
    __extends(SettingsToggleButton, _super);
    function SettingsToggleButton(config) {
        var _this = _super.call(this, config) || this;
        _this.visibleSettingsPanels = [];
        if (!config.settingsPanel) {
            throw new Error('Required SettingsPanel is missing');
        }
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-settingstogglebutton',
            text: i18n_1.i18n.getLocalizer('settings'),
            settingsPanel: null,
            autoHideWhenNoActiveSettings: true,
            role: 'pop-up button',
        }, _this.config);
        /**
         * WCAG20 standard defines which popup menu (element id) is owned by the button
         */
        _this.getDomElement().attr('aria-owns', config.settingsPanel.getActivePage().getConfig().id);
        /**
         * WCAG20 standard defines that a button has a popup menu bound to it
         */
        _this.getDomElement().attr('aria-haspopup', 'true');
        return _this;
    }
    SettingsToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var settingsPanel = config.settingsPanel;
        this.onClick.subscribe(function () {
            // only hide other `SettingsPanel`s if a new one will be opened
            if (!settingsPanel.isShown()) {
                // Hide all open SettingsPanels before opening this button's panel
                // (We need to iterate a copy because hiding them will automatically remove themselves from the array
                // due to the subscribeOnce above)
                _this.visibleSettingsPanels.slice().forEach(function (settingsPanel) { return settingsPanel.hide(); });
            }
            settingsPanel.toggleHidden();
        });
        settingsPanel.onShow.subscribe(function () {
            // Set toggle status to on when the settings panel shows
            _this.on();
        });
        settingsPanel.onHide.subscribe(function () {
            // Set toggle status to off when the settings panel hides
            _this.off();
        });
        // Ensure that only one `SettingPanel` is visible at once
        // Keep track of shown SettingsPanels
        uimanager.onComponentShow.subscribe(function (sender) {
            if (sender instanceof settingspanel_1.SettingsPanel) {
                _this.visibleSettingsPanels.push(sender);
                sender.onHide.subscribeOnce(function () { return arrayutils_1.ArrayUtils.remove(_this.visibleSettingsPanels, sender); });
            }
        });
        // Handle automatic hiding of the button if there are no settings for the user to interact with
        if (config.autoHideWhenNoActiveSettings) {
            // Setup handler to show/hide button when the settings change
            var settingsPanelItemsChangedHandler = function () {
                if (settingsPanel.rootPageHasActiveSettings()) {
                    if (_this.isHidden()) {
                        _this.show();
                    }
                }
                else {
                    if (_this.isShown()) {
                        _this.hide();
                    }
                }
            };
            // Wire the handler to the event
            settingsPanel.onSettingsStateChanged.subscribe(settingsPanelItemsChangedHandler);
            // Call handler for first init at startup
            settingsPanelItemsChangedHandler();
        }
    };
    return SettingsToggleButton;
}(togglebutton_1.ToggleButton));
exports.SettingsToggleButton = SettingsToggleButton;

},{"../arrayutils":6,"../localization/i18n":91,"./settingspanel":47,"./togglebutton":74}],54:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Spacer = void 0;
var component_1 = require("./component");
/**
 * A dummy component that just reserves some space and does nothing else.
 */
var Spacer = /** @class */ (function (_super) {
    __extends(Spacer, _super);
    function Spacer(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-spacer',
        }, _this.config);
        return _this;
    }
    Spacer.prototype.onShowEvent = function () {
        // disable event firing by overwriting and not calling super
    };
    Spacer.prototype.onHideEvent = function () {
        // disable event firing by overwriting and not calling super
    };
    Spacer.prototype.onHoverChangedEvent = function (hovered) {
        // disable event firing by overwriting and not calling super
    };
    return Spacer;
}(component_1.Component));
exports.Spacer = Spacer;

},{"./component":23}],55:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleListBox = void 0;
var listbox_1 = require("./listbox");
var subtitleutils_1 = require("../subtitleutils");
/**
 * A element that is similar to a select box where the user can select a subtitle
 */
var SubtitleListBox = /** @class */ (function (_super) {
    __extends(SubtitleListBox, _super);
    function SubtitleListBox() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SubtitleListBox.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        new subtitleutils_1.SubtitleSwitchHandler(player, this, uimanager);
    };
    return SubtitleListBox;
}(listbox_1.ListBox));
exports.SubtitleListBox = SubtitleListBox;

},{"../subtitleutils":111,"./listbox":32}],56:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleRegionContainer = exports.SubtitleRegionContainerManager = exports.SubtitleLabel = exports.SubtitleOverlay = void 0;
var container_1 = require("./container");
var label_1 = require("./label");
var controlbar_1 = require("./controlbar");
var eventdispatcher_1 = require("../eventdispatcher");
var dom_1 = require("../dom");
var i18n_1 = require("../localization/i18n");
var vttutils_1 = require("../vttutils");
/**
 * Overlays the player to display subtitles.
 */
var SubtitleOverlay = exports.SubtitleOverlay = /** @class */ (function (_super) {
    __extends(SubtitleOverlay, _super);
    function SubtitleOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.preprocessLabelEventCallback = new eventdispatcher_1.EventDispatcher();
        _this.previewSubtitleActive = false;
        _this.previewSubtitle = new SubtitleLabel({ text: i18n_1.i18n.getLocalizer('subtitle.example') });
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-subtitle-overlay',
        }, _this.config);
        return _this;
    }
    SubtitleOverlay.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var subtitleManager = new ActiveSubtitleManager();
        this.subtitleManager = subtitleManager;
        this.subtitleContainerManager = new SubtitleRegionContainerManager(this);
        player.on(player.exports.PlayerEvent.CueEnter, function (event) {
            var label = _this.generateLabel(event);
            subtitleManager.cueEnter(event, label);
            _this.preprocessLabelEventCallback.dispatch(event, label);
            if (_this.previewSubtitleActive) {
                _this.subtitleContainerManager.removeLabel(_this.previewSubtitle);
            }
            _this.show();
            _this.subtitleContainerManager.addLabel(label, _this.getDomElement().size());
            _this.updateComponents();
            if (uimanager.getConfig().forceSubtitlesIntoViewContainer) {
                _this.handleSubtitleCropping(label);
            }
        });
        player.on(player.exports.PlayerEvent.CueUpdate, function (event) {
            var label = _this.generateLabel(event);
            var labelToReplace = subtitleManager.cueUpdate(event, label);
            _this.preprocessLabelEventCallback.dispatch(event, label);
            if (labelToReplace) {
                _this.subtitleContainerManager.replaceLabel(labelToReplace, label);
            }
            if (uimanager.getConfig().forceSubtitlesIntoViewContainer) {
                _this.handleSubtitleCropping(label);
            }
        });
        player.on(player.exports.PlayerEvent.CueExit, function (event) {
            var labelToRemove = subtitleManager.cueExit(event);
            if (labelToRemove) {
                _this.subtitleContainerManager.removeLabel(labelToRemove);
                _this.updateComponents();
            }
            if (!subtitleManager.hasCues) {
                if (!_this.previewSubtitleActive) {
                    _this.hide();
                }
                else {
                    _this.subtitleContainerManager.addLabel(_this.previewSubtitle);
                    _this.updateComponents();
                }
            }
        });
        var subtitleClearHandler = function () {
            _this.hide();
            _this.subtitleContainerManager.clear();
            subtitleManager.clear();
            _this.removeComponents();
            _this.updateComponents();
        };
        var clearInactiveCues = function () {
            var removedActiveCues = subtitleManager.clearInactiveCues(player.getCurrentTime());
            removedActiveCues.forEach(function (toRemove) {
                _this.subtitleContainerManager.removeLabel(toRemove.label);
            });
        };
        player.on(player.exports.PlayerEvent.AudioChanged, subtitleClearHandler);
        player.on(player.exports.PlayerEvent.SubtitleEnabled, subtitleClearHandler);
        player.on(player.exports.PlayerEvent.SubtitleDisabled, subtitleClearHandler);
        player.on(player.exports.PlayerEvent.Seeked, clearInactiveCues);
        player.on(player.exports.PlayerEvent.TimeShifted, clearInactiveCues);
        player.on(player.exports.PlayerEvent.PlaybackFinished, subtitleClearHandler);
        player.on(player.exports.PlayerEvent.SourceUnloaded, subtitleClearHandler);
        uimanager.onComponentShow.subscribe(function (component) {
            if (component instanceof controlbar_1.ControlBar) {
                _this.getDomElement().addClass(_this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));
            }
        });
        uimanager.onComponentHide.subscribe(function (component) {
            if (component instanceof controlbar_1.ControlBar) {
                _this.getDomElement().removeClass(_this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));
            }
        });
        this.configureCea608Captions(player, uimanager);
        // Init
        subtitleClearHandler();
    };
    SubtitleOverlay.prototype.detectCroppedSubtitleLabel = function (labelElement) {
        var parent = this.getDomElement().get(0);
        var childRect = labelElement.getBoundingClientRect();
        var parentRect = parent.getBoundingClientRect();
        return {
            top: childRect.top < parentRect.top,
            right: childRect.right > parentRect.right,
            bottom: childRect.bottom > parentRect.bottom,
            left: childRect.left < parentRect.left,
        };
    };
    SubtitleOverlay.prototype.handleSubtitleCropping = function (label) {
        var labelDomElement = label.getDomElement();
        var cropDetection = this.detectCroppedSubtitleLabel(labelDomElement.get(0));
        if (cropDetection.top) {
            labelDomElement.css('top', '0');
            labelDomElement.removeCss('bottom');
        }
        if (cropDetection.right) {
            labelDomElement.css('right', '0');
            labelDomElement.removeCss('left');
        }
        if (cropDetection.bottom) {
            labelDomElement.css('bottom', '0');
            labelDomElement.removeCss('top');
        }
        if (cropDetection.left) {
            labelDomElement.css('left', '0');
            labelDomElement.removeCss('right');
        }
    };
    SubtitleOverlay.prototype.generateLabel = function (event) {
        // Sanitize cue data (must be done before the cue ID is generated in subtitleManager.cueEnter / update)
        if (event.position) {
            // Sometimes the positions are undefined, we assume them to be zero
            event.position.row = event.position.row || 0;
            event.position.column = event.position.column || 0;
        }
        var label = new SubtitleLabel({
            // Prefer the HTML subtitle text if set, else try generating a image tag as string from the image attribute,
            // else use the plain text
            text: event.html || ActiveSubtitleManager.generateImageTagText(event.image) || event.text,
            vtt: event.vtt,
            region: event.region,
            regionStyle: event.regionStyle,
        });
        return label;
    };
    SubtitleOverlay.prototype.configureCea608Captions = function (player, uimanager) {
        var _this = this;
        // The calculated font size
        var fontSize = 0;
        // The required letter spacing spread the text characters evenly across the grid
        var fontLetterSpacing = 0;
        // Flag telling if a font size calculation is required of if the current values are valid
        var fontSizeCalculationRequired = true;
        // Flag telling if the CEA-608 mode is enabled
        var enabled = false;
        var updateCEA608FontSize = function () {
            var dummyLabel = new SubtitleLabel({ text: 'X' });
            dummyLabel.getDomElement().css({
                // By using a large font size we do not need to use multiple letters and can get still an
                // accurate measurement even though the returned size is an integer value
                'font-size': '200px',
                'line-height': '200px',
                'visibility': 'hidden',
            });
            _this.addComponent(dummyLabel);
            _this.updateComponents();
            _this.show();
            var dummyLabelCharWidth = dummyLabel.getDomElement().width();
            var dummyLabelCharHeight = dummyLabel.getDomElement().height();
            var fontSizeRatio = dummyLabelCharWidth / dummyLabelCharHeight;
            _this.removeComponent(dummyLabel);
            _this.updateComponents();
            if (!_this.subtitleManager.hasCues) {
                _this.hide();
            }
            // We subtract 1px here to avoid line breaks at the right border of the subtitle overlay that can happen
            // when texts contain whitespaces. It's probably some kind of pixel rounding issue in the browser's
            // layouting, but the actual reason could not be determined. Aiming for a target width - 1px would work in
            // most browsers, but Safari has a "quantized" font size rendering with huge steps in between so we need
            // to subtract some more pixels to avoid line breaks there as well.
            var subtitleOverlayWidth = _this.getDomElement().width() - 10;
            var subtitleOverlayHeight = _this.getDomElement().height();
            // The size ratio of the letter grid
            var fontGridSizeRatio = (dummyLabelCharWidth * SubtitleOverlay.CEA608_NUM_COLUMNS) /
                (dummyLabelCharHeight * SubtitleOverlay.CEA608_NUM_ROWS);
            // The size ratio of the available space for the grid
            var subtitleOverlaySizeRatio = subtitleOverlayWidth / subtitleOverlayHeight;
            if (subtitleOverlaySizeRatio > fontGridSizeRatio) {
                // When the available space is wider than the text grid, the font size is simply
                // determined by the height of the available space.
                fontSize = subtitleOverlayHeight / SubtitleOverlay.CEA608_NUM_ROWS;
                // Calculate the additional letter spacing required to evenly spread the text across the grid's width
                var gridSlotWidth = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS;
                var fontCharWidth = fontSize * fontSizeRatio;
                fontLetterSpacing = gridSlotWidth - fontCharWidth;
            }
            else {
                // When the available space is not wide enough, texts would vertically overlap if we take
                // the height as a base for the font size, so we need to limit the height. We do that
                // by determining the font size by the width of the available space.
                fontSize = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS / fontSizeRatio;
                fontLetterSpacing = 0;
            }
            // Update font-size of all active subtitle labels
            for (var _i = 0, _a = _this.getComponents(); _i < _a.length; _i++) {
                var label = _a[_i];
                if (label instanceof SubtitleLabel) {
                    label.getDomElement().css({
                        'font-size': "".concat(fontSize, "px"),
                        'letter-spacing': "".concat(fontLetterSpacing, "px"),
                    });
                }
            }
        };
        player.on(player.exports.PlayerEvent.PlayerResized, function () {
            if (enabled) {
                updateCEA608FontSize();
            }
            else {
                fontSizeCalculationRequired = true;
            }
        });
        this.preprocessLabelEventCallback.subscribe(function (event, label) {
            var isCEA608 = event.position != null;
            if (!isCEA608) {
                // Skip all non-CEA608 cues
                return;
            }
            if (!enabled) {
                enabled = true;
                _this.getDomElement().addClass(_this.prefixCss(SubtitleOverlay.CLASS_CEA_608));
                // We conditionally update the font size by this flag here to avoid updating every time a subtitle
                // is added into an empty overlay. Because we reset the overlay when all subtitles are gone, this
                // would trigger an unnecessary update every time, but it's only required under certain conditions,
                // e.g. after the player size has changed.
                if (fontSizeCalculationRequired) {
                    updateCEA608FontSize();
                    fontSizeCalculationRequired = false;
                }
            }
            label.getDomElement().css({
                'left': "".concat(event.position.column * SubtitleOverlay.CEA608_COLUMN_OFFSET, "%"),
                'top': "".concat(event.position.row * SubtitleOverlay.CEA608_ROW_OFFSET, "%"),
                'font-size': "".concat(fontSize, "px"),
                'letter-spacing': "".concat(fontLetterSpacing, "px"),
            });
        });
        var reset = function () {
            _this.getDomElement().removeClass(_this.prefixCss(SubtitleOverlay.CLASS_CEA_608));
            enabled = false;
        };
        player.on(player.exports.PlayerEvent.CueExit, function () {
            if (!_this.subtitleManager.hasCues) {
                // Disable CEA-608 mode when all subtitles are gone (to allow correct formatting and
                // display of other types of subtitles, e.g. the formatting preview subtitle)
                reset();
            }
        });
        player.on(player.exports.PlayerEvent.SourceUnloaded, reset);
        player.on(player.exports.PlayerEvent.SubtitleEnabled, reset);
        player.on(player.exports.PlayerEvent.SubtitleDisabled, reset);
    };
    SubtitleOverlay.prototype.enablePreviewSubtitleLabel = function () {
        if (!this.subtitleManager.hasCues) {
            this.previewSubtitleActive = true;
            this.subtitleContainerManager.addLabel(this.previewSubtitle);
            this.updateComponents();
            this.show();
        }
    };
    SubtitleOverlay.prototype.removePreviewSubtitleLabel = function () {
        if (this.previewSubtitleActive) {
            this.previewSubtitleActive = false;
            this.subtitleContainerManager.removeLabel(this.previewSubtitle);
            this.updateComponents();
        }
    };
    SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE = 'controlbar-visible';
    SubtitleOverlay.CLASS_CEA_608 = 'cea608';
    // The number of rows in a cea608 grid
    SubtitleOverlay.CEA608_NUM_ROWS = 15;
    // The number of columns in a cea608 grid
    SubtitleOverlay.CEA608_NUM_COLUMNS = 32;
    // The offset in percent for one row (which is also the height of a row)
    SubtitleOverlay.CEA608_ROW_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_ROWS;
    // The offset in percent for one column (which is also the width of a column)
    SubtitleOverlay.CEA608_COLUMN_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_COLUMNS;
    return SubtitleOverlay;
}(container_1.Container));
var SubtitleLabel = /** @class */ (function (_super) {
    __extends(SubtitleLabel, _super);
    function SubtitleLabel(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-subtitle-label',
        }, _this.config);
        return _this;
    }
    Object.defineProperty(SubtitleLabel.prototype, "vtt", {
        get: function () {
            return this.config.vtt;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleLabel.prototype, "region", {
        get: function () {
            return this.config.region;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleLabel.prototype, "regionStyle", {
        get: function () {
            return this.config.regionStyle;
        },
        enumerable: false,
        configurable: true
    });
    return SubtitleLabel;
}(label_1.Label));
exports.SubtitleLabel = SubtitleLabel;
var ActiveSubtitleManager = /** @class */ (function () {
    function ActiveSubtitleManager() {
        this.activeSubtitleCueMap = {};
        this.activeSubtitleCueCount = 0;
    }
    /**
     * Calculates a unique ID for a subtitle cue, which is needed to associate an CueEnter with its CueExit
     * event so we can remove the correct subtitle in CueExit when multiple subtitles are active at the same time.
     * The start time plus the text should make a unique identifier, and in the only case where a collision
     * can happen, two similar texts will be displayed at a similar time and a similar position (or without position).
     * The start time should always be known, because it is required to schedule the CueEnter event. The end time
     * must not necessarily be known and therefore cannot be used for the ID.
     * @param event
     * @return {string}
     */
    ActiveSubtitleManager.calculateId = function (event) {
        var id = event.start + '-' + event.text;
        if (event.position) {
            id += '-' + event.position.row + '-' + event.position.column;
        }
        return id;
    };
    ActiveSubtitleManager.prototype.cueEnter = function (event, label) {
        this.addCueToMap(event, label);
    };
    ActiveSubtitleManager.prototype.cueUpdate = function (event, label) {
        var labelToReplace = this.popCueFromMap(event);
        if (labelToReplace) {
            this.addCueToMap(event, label);
            return labelToReplace;
        }
        return undefined;
    };
    ActiveSubtitleManager.prototype.addCueToMap = function (event, label) {
        var id = ActiveSubtitleManager.calculateId(event);
        // Create array for id if it does not exist
        this.activeSubtitleCueMap[id] = this.activeSubtitleCueMap[id] || [];
        // Add cue
        this.activeSubtitleCueMap[id].push({ event: event, label: label });
        this.activeSubtitleCueCount++;
    };
    ActiveSubtitleManager.prototype.popCueFromMap = function (event) {
        var id = ActiveSubtitleManager.calculateId(event);
        var activeSubtitleCues = this.activeSubtitleCueMap[id];
        if (activeSubtitleCues && activeSubtitleCues.length > 0) {
            // Remove cue
            /* We apply the FIFO approach here and remove the oldest cue from the associated id. When there are multiple cues
             * with the same id, there is no way to know which one of the cues is to be deleted, so we just hope that FIFO
             * works fine. Theoretically it can happen that two cues with colliding ids are removed at different times, in
             * the wrong order. This rare case has yet to be observed. If it ever gets an issue, we can take the unstable
             * cue end time (which can change between CueEnter and CueExit IN CueUpdate) and use it as an
             * additional hint to try and remove the correct one of the colliding cues.
             */
            var activeSubtitleCue = activeSubtitleCues.shift();
            this.activeSubtitleCueCount--;
            return activeSubtitleCue.label;
        }
    };
    /**
     * Removes all active cues which don't enclose the given time
     * @param time the time for which subtitles should remain
     */
    ActiveSubtitleManager.prototype.clearInactiveCues = function (time) {
        var _this = this;
        var removedCues = [];
        Object.keys(this.activeSubtitleCueMap).forEach(function (key) {
            var activeCues = _this.activeSubtitleCueMap[key];
            activeCues.forEach(function (cue) {
                if (time < cue.event.start || time > cue.event.end) {
                    _this.popCueFromMap(cue.event);
                    removedCues.push(cue);
                }
            });
        });
        return removedCues;
    };
    ActiveSubtitleManager.generateImageTagText = function (imageData) {
        if (!imageData) {
            return;
        }
        var imgTag = new dom_1.DOM('img', {
            src: imageData,
        });
        imgTag.css('width', '100%');
        return imgTag.get(0).outerHTML; // return the html as string
    };
    /**
     * Returns the label associated with an already added cue.
     * @param event
     * @return {SubtitleLabel}
     */
    ActiveSubtitleManager.prototype.getCues = function (event) {
        var id = ActiveSubtitleManager.calculateId(event);
        var activeSubtitleCues = this.activeSubtitleCueMap[id];
        if (activeSubtitleCues && activeSubtitleCues.length > 0) {
            return activeSubtitleCues.map(function (cue) { return cue.label; });
        }
    };
    /**
     * Removes the subtitle cue from the manager and returns the label that should be removed from the subtitle overlay,
     * or null if there is no associated label existing (e.g. because all labels have been {@link #clear cleared}.
     * @param event
     * @return {SubtitleLabel|null}
     */
    ActiveSubtitleManager.prototype.cueExit = function (event) {
        return this.popCueFromMap(event);
    };
    Object.defineProperty(ActiveSubtitleManager.prototype, "cueCount", {
        /**
         * Returns the number of active subtitle cues.
         * @return {number}
         */
        get: function () {
            // We explicitly count the cues to save an Array.reduce on every cueCount call (which can happen frequently)
            return this.activeSubtitleCueCount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ActiveSubtitleManager.prototype, "hasCues", {
        /**
         * Returns true if there are active subtitle cues, else false.
         * @return {boolean}
         */
        get: function () {
            return this.cueCount > 0;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Removes all subtitle cues from the manager.
     */
    ActiveSubtitleManager.prototype.clear = function () {
        this.activeSubtitleCueMap = {};
        this.activeSubtitleCueCount = 0;
    };
    return ActiveSubtitleManager;
}());
var SubtitleRegionContainerManager = /** @class */ (function () {
    /**
     * @param subtitleOverlay Reference to the subtitle overlay for adding and removing the containers.
     */
    function SubtitleRegionContainerManager(subtitleOverlay) {
        this.subtitleOverlay = subtitleOverlay;
        this.subtitleRegionContainers = {};
        this.subtitleOverlay = subtitleOverlay;
    }
    SubtitleRegionContainerManager.prototype.getRegion = function (label) {
        if (label.vtt) {
            return {
                regionContainerId: label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt',
                regionName: 'vtt',
            };
        }
        return {
            regionContainerId: label.region || 'default',
            regionName: label.region || 'default',
        };
    };
    /**
     * Creates and wraps a subtitle label into a container div based on the subtitle region.
     * If the subtitle has positioning information it is added to the container.
     * @param label The subtitle label to wrap
     */
    SubtitleRegionContainerManager.prototype.addLabel = function (label, overlaySize) {
        var _a = this.getRegion(label), regionContainerId = _a.regionContainerId, regionName = _a.regionName;
        var cssClasses = ["subtitle-position-".concat(regionName)];
        if (label.vtt && label.vtt.region) {
            cssClasses.push("vtt-region-".concat(label.vtt.region.id));
        }
        if (!this.subtitleRegionContainers[regionContainerId]) {
            var regionContainer = new SubtitleRegionContainer({
                cssClasses: cssClasses,
            });
            this.subtitleRegionContainers[regionContainerId] = regionContainer;
            if (label.regionStyle) {
                regionContainer.getDomElement().attr('style', label.regionStyle);
            }
            else if (label.vtt && !label.vtt.region) {
                /**
                 * If there is no region present to wrap the Cue Box, the Cue box becomes the
                 * region itself. Therefore the positioning values have to come from the box.
                 */
                regionContainer.getDomElement().css('position', 'static');
            }
            else {
                // getDomElement needs to be called at least once to ensure the component exists
                regionContainer.getDomElement();
            }
            for (var regionContainerId_1 in this.subtitleRegionContainers) {
                this.subtitleOverlay.addComponent(this.subtitleRegionContainers[regionContainerId_1]);
            }
        }
        this.subtitleRegionContainers[regionContainerId].addLabel(label, overlaySize);
    };
    SubtitleRegionContainerManager.prototype.replaceLabel = function (previousLabel, newLabel) {
        var regionContainerId = this.getRegion(previousLabel).regionContainerId;
        this.subtitleRegionContainers[regionContainerId].removeLabel(previousLabel);
        this.subtitleRegionContainers[regionContainerId].addLabel(newLabel);
    };
    /**
     * Removes a subtitle label from a container.
     */
    SubtitleRegionContainerManager.prototype.removeLabel = function (label) {
        var regionContainerId;
        if (label.vtt) {
            regionContainerId = label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt';
        }
        else {
            regionContainerId = label.region || 'default';
        }
        this.subtitleRegionContainers[regionContainerId].removeLabel(label);
        // Remove container if no more labels are displayed
        if (this.subtitleRegionContainers[regionContainerId].isEmpty()) {
            this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionContainerId]);
            delete this.subtitleRegionContainers[regionContainerId];
        }
    };
    /**
     * Removes all subtitle containers.
     */
    SubtitleRegionContainerManager.prototype.clear = function () {
        for (var regionName in this.subtitleRegionContainers) {
            this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionName]);
        }
        this.subtitleRegionContainers = {};
    };
    return SubtitleRegionContainerManager;
}());
exports.SubtitleRegionContainerManager = SubtitleRegionContainerManager;
var SubtitleRegionContainer = /** @class */ (function (_super) {
    __extends(SubtitleRegionContainer, _super);
    function SubtitleRegionContainer(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.labelCount = 0;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'subtitle-region-container',
        }, _this.config);
        return _this;
    }
    SubtitleRegionContainer.prototype.addLabel = function (labelToAdd, overlaySize) {
        this.labelCount++;
        if (labelToAdd.vtt) {
            if (labelToAdd.vtt.region && overlaySize) {
                vttutils_1.VttUtils.setVttRegionStyles(this, labelToAdd.vtt.region, overlaySize);
            }
            vttutils_1.VttUtils.setVttCueBoxStyles(labelToAdd, overlaySize);
        }
        this.addComponent(labelToAdd);
        this.updateComponents();
    };
    SubtitleRegionContainer.prototype.removeLabel = function (labelToRemove) {
        this.labelCount--;
        this.removeComponent(labelToRemove);
        this.updateComponents();
    };
    SubtitleRegionContainer.prototype.isEmpty = function () {
        return this.labelCount === 0;
    };
    return SubtitleRegionContainer;
}(container_1.Container));
exports.SubtitleRegionContainer = SubtitleRegionContainer;

},{"../dom":84,"../eventdispatcher":86,"../localization/i18n":91,"../vttutils":117,"./container":24,"./controlbar":25,"./label":31}],57:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleSelectBox = void 0;
var selectbox_1 = require("./selectbox");
var subtitleutils_1 = require("../subtitleutils");
var i18n_1 = require("../localization/i18n");
/**
 * A select box providing a selection between available subtitle and caption tracks.
 */
var SubtitleSelectBox = /** @class */ (function (_super) {
    __extends(SubtitleSelectBox, _super);
    function SubtitleSelectBox(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitleselectbox'],
            ariaLabel: i18n_1.i18n.getLocalizer('subtitle.select'),
        }, _this.config);
        return _this;
    }
    SubtitleSelectBox.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        new subtitleutils_1.SubtitleSwitchHandler(player, this, uimanager);
    };
    return SubtitleSelectBox;
}(selectbox_1.SelectBox));
exports.SubtitleSelectBox = SubtitleSelectBox;

},{"../localization/i18n":91,"../subtitleutils":111,"./selectbox":46}],58:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackgroundColorSelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different background colors.
 */
var BackgroundColorSelectBox = /** @class */ (function (_super) {
    __extends(BackgroundColorSelectBox, _super);
    function BackgroundColorSelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingsbackgroundcolorselectbox'],
        }, _this.config);
        return _this;
    }
    BackgroundColorSelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('white', i18n_1.i18n.getLocalizer('colors.white'));
        this.addItem('black', i18n_1.i18n.getLocalizer('colors.black'));
        this.addItem('red', i18n_1.i18n.getLocalizer('colors.red'));
        this.addItem('green', i18n_1.i18n.getLocalizer('colors.green'));
        this.addItem('blue', i18n_1.i18n.getLocalizer('colors.blue'));
        this.addItem('cyan', i18n_1.i18n.getLocalizer('colors.cyan'));
        this.addItem('yellow', i18n_1.i18n.getLocalizer('colors.yellow'));
        this.addItem('magenta', i18n_1.i18n.getLocalizer('colors.magenta'));
        var setColorAndOpacity = function () {
            if (_this.settingsManager.backgroundColor.isSet() && _this.settingsManager.backgroundOpacity.isSet()) {
                _this.toggleOverlayClass('bgcolor-' + _this.settingsManager.backgroundColor.value + _this.settingsManager.backgroundOpacity.value);
            }
            else {
                _this.toggleOverlayClass(null);
            }
        };
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.backgroundColor.value = key;
        });
        this.settingsManager.backgroundColor.onChanged.subscribe(function (sender, property) {
            // Color and opacity go together, so we need to...
            if (!_this.settingsManager.backgroundColor.isSet()) {
                // ... clear the opacity when the color is not set
                _this.settingsManager.backgroundOpacity.clear();
            }
            else if (!_this.settingsManager.backgroundOpacity.isSet()) {
                // ... set an opacity when the color is set
                _this.settingsManager.backgroundOpacity.value = '100';
            }
            _this.selectItem(property.value);
            setColorAndOpacity();
        });
        this.settingsManager.backgroundOpacity.onChanged.subscribe(function () {
            setColorAndOpacity();
        });
        // Load initial value
        if (this.settingsManager.backgroundColor.isSet()) {
            this.selectItem(this.settingsManager.backgroundColor.value);
        }
    };
    return BackgroundColorSelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.BackgroundColorSelectBox = BackgroundColorSelectBox;

},{"../../localization/i18n":91,"./subtitlesettingselectbox":65}],59:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackgroundOpacitySelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different background opacity.
 */
var BackgroundOpacitySelectBox = /** @class */ (function (_super) {
    __extends(BackgroundOpacitySelectBox, _super);
    function BackgroundOpacitySelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingsbackgroundopacityselectbox'],
        }, _this.config);
        return _this;
    }
    BackgroundOpacitySelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('100', i18n_1.i18n.getLocalizer('percent', { value: 100 }));
        this.addItem('75', i18n_1.i18n.getLocalizer('percent', { value: 75 }));
        this.addItem('50', i18n_1.i18n.getLocalizer('percent', { value: 50 }));
        this.addItem('25', i18n_1.i18n.getLocalizer('percent', { value: 25 }));
        this.addItem('0', i18n_1.i18n.getLocalizer('percent', { value: 0 }));
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.backgroundOpacity.value = key;
            // Color and opacity go together, so we need to...
            if (!_this.settingsManager.backgroundOpacity.isSet()) {
                // ... clear the color when the opacity is not set
                _this.settingsManager.backgroundColor.clear();
            }
            else if (!_this.settingsManager.backgroundColor.isSet()) {
                // ... set a color when the opacity is set
                _this.settingsManager.backgroundColor.value = 'black';
            }
        });
        // Update selected item when value is set from somewhere else
        this.settingsManager.backgroundOpacity.onChanged.subscribe(function (sender, property) {
            _this.selectItem(property.value);
        });
        // Load initial value
        if (this.settingsManager.backgroundOpacity.isSet()) {
            this.selectItem(this.settingsManager.backgroundOpacity.value);
        }
    };
    return BackgroundOpacitySelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.BackgroundOpacitySelectBox = BackgroundOpacitySelectBox;

},{"../../localization/i18n":91,"./subtitlesettingselectbox":65}],60:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CharacterEdgeSelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different character edge.
 */
var CharacterEdgeSelectBox = /** @class */ (function (_super) {
    __extends(CharacterEdgeSelectBox, _super);
    function CharacterEdgeSelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingscharacteredgeselectbox'],
        }, _this.config);
        return _this;
    }
    CharacterEdgeSelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('raised', i18n_1.i18n.getLocalizer('settings.subtitles.characterEdge.raised'));
        this.addItem('depressed', i18n_1.i18n.getLocalizer('settings.subtitles.characterEdge.depressed'));
        this.addItem('uniform', i18n_1.i18n.getLocalizer('settings.subtitles.characterEdge.uniform'));
        this.addItem('dropshadowed', i18n_1.i18n.getLocalizer('settings.subtitles.characterEdge.dropshadowed'));
        this.settingsManager.characterEdge.onChanged.subscribe(function (sender, property) {
            if (property.isSet()) {
                _this.toggleOverlayClass('characteredge-' + property.value);
            }
            else {
                _this.toggleOverlayClass(null);
            }
            // Select the item in case the property was set from outside
            _this.selectItem(property.value);
        });
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.characterEdge.value = key;
        });
        // Load initial value
        if (this.settingsManager.characterEdge.isSet()) {
            this.selectItem(this.settingsManager.characterEdge.value);
        }
    };
    return CharacterEdgeSelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.CharacterEdgeSelectBox = CharacterEdgeSelectBox;

},{"../../localization/i18n":91,"./subtitlesettingselectbox":65}],61:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FontColorSelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different font colors.
 */
var FontColorSelectBox = /** @class */ (function (_super) {
    __extends(FontColorSelectBox, _super);
    function FontColorSelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingsfontcolorselectbox'],
        }, _this.config);
        return _this;
    }
    FontColorSelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('white', i18n_1.i18n.getLocalizer('colors.white'));
        this.addItem('black', i18n_1.i18n.getLocalizer('colors.black'));
        this.addItem('red', i18n_1.i18n.getLocalizer('colors.red'));
        this.addItem('green', i18n_1.i18n.getLocalizer('colors.green'));
        this.addItem('blue', i18n_1.i18n.getLocalizer('colors.blue'));
        this.addItem('cyan', i18n_1.i18n.getLocalizer('colors.cyan'));
        this.addItem('yellow', i18n_1.i18n.getLocalizer('colors.yellow'));
        this.addItem('magenta', i18n_1.i18n.getLocalizer('colors.magenta'));
        var setColorAndOpacity = function () {
            if (_this.settingsManager.fontColor.isSet() && _this.settingsManager.fontOpacity.isSet()) {
                _this.toggleOverlayClass('fontcolor-' + _this.settingsManager.fontColor.value + _this.settingsManager.fontOpacity.value);
            }
            else {
                _this.toggleOverlayClass(null);
            }
        };
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.fontColor.value = key;
        });
        this.settingsManager.fontColor.onChanged.subscribe(function (sender, property) {
            // Color and opacity go together, so we need to...
            if (!_this.settingsManager.fontColor.isSet()) {
                // ... clear the opacity when the color is not set
                _this.settingsManager.fontOpacity.clear();
            }
            else if (!_this.settingsManager.fontOpacity.isSet()) {
                // ... set an opacity when the color is set
                _this.settingsManager.fontOpacity.value = '100';
            }
            _this.selectItem(property.value);
            setColorAndOpacity();
        });
        this.settingsManager.fontOpacity.onChanged.subscribe(function () {
            setColorAndOpacity();
        });
        // Load initial value
        if (this.settingsManager.fontColor.isSet()) {
            this.selectItem(this.settingsManager.fontColor.value);
        }
    };
    return FontColorSelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.FontColorSelectBox = FontColorSelectBox;

},{"../../localization/i18n":91,"./subtitlesettingselectbox":65}],62:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FontFamilySelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different font family.
 */
var FontFamilySelectBox = /** @class */ (function (_super) {
    __extends(FontFamilySelectBox, _super);
    function FontFamilySelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingsfontfamilyselectbox'],
        }, _this.config);
        return _this;
    }
    FontFamilySelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('monospacedserif', i18n_1.i18n.getLocalizer('settings.subtitles.font.family.monospacedserif'));
        this.addItem('proportionalserif', i18n_1.i18n.getLocalizer('settings.subtitles.font.family.proportionalserif'));
        this.addItem('monospacedsansserif', i18n_1.i18n.getLocalizer('settings.subtitles.font.family.monospacedsansserif'));
        this.addItem('proportionalsansserif', i18n_1.i18n.getLocalizer('settings.subtitles.font.family.proportionalserif'));
        this.addItem('casual', i18n_1.i18n.getLocalizer('settings.subtitles.font.family.casual'));
        this.addItem('cursive', i18n_1.i18n.getLocalizer('settings.subtitles.font.family.cursive'));
        this.addItem('smallcapital', i18n_1.i18n.getLocalizer('settings.subtitles.font.family.smallcapital'));
        this.settingsManager.fontFamily.onChanged.subscribe(function (sender, property) {
            if (property.isSet()) {
                _this.toggleOverlayClass('fontfamily-' + property.value);
            }
            else {
                _this.toggleOverlayClass(null);
            }
            // Select the item in case the property was set from outside
            _this.selectItem(property.value);
        });
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.fontFamily.value = key;
        });
        // Load initial value
        if (this.settingsManager.fontFamily.isSet()) {
            this.selectItem(this.settingsManager.fontFamily.value);
        }
    };
    return FontFamilySelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.FontFamilySelectBox = FontFamilySelectBox;

},{"../../localization/i18n":91,"./subtitlesettingselectbox":65}],63:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FontOpacitySelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different font colors.
 */
var FontOpacitySelectBox = /** @class */ (function (_super) {
    __extends(FontOpacitySelectBox, _super);
    function FontOpacitySelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingsfontopacityselectbox'],
        }, _this.config);
        return _this;
    }
    FontOpacitySelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('100', i18n_1.i18n.getLocalizer('percent', { value: 100 }));
        this.addItem('75', i18n_1.i18n.getLocalizer('percent', { value: 75 }));
        this.addItem('50', i18n_1.i18n.getLocalizer('percent', { value: 50 }));
        this.addItem('25', i18n_1.i18n.getLocalizer('percent', { value: 25 }));
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.fontOpacity.value = key;
            // Color and opacity go together, so we need to...
            if (!_this.settingsManager.fontOpacity.isSet()) {
                // ... clear the color when the opacity is not set
                _this.settingsManager.fontColor.clear();
            }
            else if (!_this.settingsManager.fontColor.isSet()) {
                // ... set a color when the opacity is set
                _this.settingsManager.fontColor.value = 'white';
            }
        });
        // Update selected item when value is set from somewhere else
        this.settingsManager.fontOpacity.onChanged.subscribe(function (sender, property) {
            _this.selectItem(property.value);
        });
        // Load initial value
        if (this.settingsManager.fontOpacity.isSet()) {
            this.selectItem(this.settingsManager.fontOpacity.value);
        }
    };
    return FontOpacitySelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.FontOpacitySelectBox = FontOpacitySelectBox;

},{"../../localization/i18n":91,"./subtitlesettingselectbox":65}],64:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FontSizeSelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different font colors.
 */
var FontSizeSelectBox = /** @class */ (function (_super) {
    __extends(FontSizeSelectBox, _super);
    function FontSizeSelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingsfontsizeselectbox'],
        }, _this.config);
        return _this;
    }
    FontSizeSelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('50', i18n_1.i18n.getLocalizer('percent', { value: 50 }));
        this.addItem('75', i18n_1.i18n.getLocalizer('percent', { value: 75 }));
        this.addItem('100', i18n_1.i18n.getLocalizer('percent', { value: 100 }));
        this.addItem('150', i18n_1.i18n.getLocalizer('percent', { value: 150 }));
        this.addItem('200', i18n_1.i18n.getLocalizer('percent', { value: 200 }));
        this.addItem('300', i18n_1.i18n.getLocalizer('percent', { value: 300 }));
        this.addItem('400', i18n_1.i18n.getLocalizer('percent', { value: 400 }));
        this.settingsManager.fontSize.onChanged.subscribe(function (sender, property) {
            if (property.isSet()) {
                _this.toggleOverlayClass('fontsize-' + property.value);
            }
            else {
                _this.toggleOverlayClass(null);
            }
            // Select the item in case the property was set from outside
            _this.selectItem(property.value);
        });
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.fontSize.value = key;
        });
        // Load initial value
        if (this.settingsManager.fontSize.isSet()) {
            this.selectItem(this.settingsManager.fontSize.value);
        }
    };
    return FontSizeSelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.FontSizeSelectBox = FontSizeSelectBox;

},{"../../localization/i18n":91,"./subtitlesettingselectbox":65}],65:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleSettingSelectBox = void 0;
var selectbox_1 = require("../selectbox");
/**
 * Base class for all subtitles settings select box
 **/
var SubtitleSettingSelectBox = /** @class */ (function (_super) {
    __extends(SubtitleSettingSelectBox, _super);
    function SubtitleSettingSelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.settingsManager = config.settingsManager;
        _this.overlay = config.overlay;
        return _this;
    }
    /**
     * Removes a previously set class and adds the passed in class.
     * @param cssClass The new class to replace the previous class with or null to just remove the previous class
     */
    SubtitleSettingSelectBox.prototype.toggleOverlayClass = function (cssClass) {
        // Remove previous class if existing
        if (this.currentCssClass) {
            this.overlay.getDomElement().removeClass(this.currentCssClass);
            this.currentCssClass = null;
        }
        // Add new class if specified. If the new class is null, we don't add anything.
        if (cssClass) {
            this.currentCssClass = this.prefixCss(cssClass);
            this.overlay.getDomElement().addClass(this.currentCssClass);
        }
    };
    return SubtitleSettingSelectBox;
}(selectbox_1.SelectBox));
exports.SubtitleSettingSelectBox = SubtitleSettingSelectBox;

},{"../selectbox":46}],66:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleSettingsLabel = void 0;
var container_1 = require("../container");
var dom_1 = require("../../dom");
var i18n_1 = require("../../localization/i18n");
var SubtitleSettingsLabel = /** @class */ (function (_super) {
    __extends(SubtitleSettingsLabel, _super);
    function SubtitleSettingsLabel(config) {
        var _this = _super.call(this, config) || this;
        _this.opener = config.opener;
        _this.text = config.text;
        _this.for = config.for;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-label',
            components: [
                _this.opener,
            ],
        }, _this.config);
        return _this;
    }
    SubtitleSettingsLabel.prototype.toDomElement = function () {
        var labelElement = new dom_1.DOM('label', {
            'id': this.config.id,
            'class': this.getCssClasses(),
            'for': this.for,
        }).append(new dom_1.DOM('span', {}).html(i18n_1.i18n.performLocalization(this.text)), this.opener.getDomElement());
        return labelElement;
    };
    return SubtitleSettingsLabel;
}(container_1.Container));
exports.SubtitleSettingsLabel = SubtitleSettingsLabel;

},{"../../dom":84,"../../localization/i18n":91,"../container":24}],67:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleSettingsProperty = exports.SubtitleSettingsManager = void 0;
var storageutils_1 = require("../../storageutils");
var component_1 = require("../component");
var eventdispatcher_1 = require("../../eventdispatcher");
var SubtitleSettingsManager = /** @class */ (function () {
    function SubtitleSettingsManager() {
        var _this = this;
        this._properties = {
            fontColor: new SubtitleSettingsProperty(this),
            fontOpacity: new SubtitleSettingsProperty(this),
            fontFamily: new SubtitleSettingsProperty(this),
            fontSize: new SubtitleSettingsProperty(this),
            characterEdge: new SubtitleSettingsProperty(this),
            backgroundColor: new SubtitleSettingsProperty(this),
            backgroundOpacity: new SubtitleSettingsProperty(this),
            windowColor: new SubtitleSettingsProperty(this),
            windowOpacity: new SubtitleSettingsProperty(this),
        };
        this.userSettings = {};
        this.localStorageKey = DummyComponent.instance().prefixCss('subtitlesettings');
        var _loop_1 = function (propertyName) {
            this_1._properties[propertyName].onChanged.subscribe(function (sender, property) {
                if (property.isSet()) {
                    _this.userSettings[propertyName] = property.value;
                }
                else {
                    // Delete the property from the settings object if unset to avoid serialization of null values
                    delete _this.userSettings[propertyName];
                }
                // Save the settings object when a property has changed
                _this.save();
            });
        };
        var this_1 = this;
        for (var propertyName in this._properties) {
            _loop_1(propertyName);
        }
        this.load();
    }
    SubtitleSettingsManager.prototype.reset = function () {
        for (var propertyName in this._properties) {
            this._properties[propertyName].clear();
        }
    };
    Object.defineProperty(SubtitleSettingsManager.prototype, "fontColor", {
        get: function () {
            return this._properties.fontColor;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "fontOpacity", {
        get: function () {
            return this._properties.fontOpacity;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "fontFamily", {
        get: function () {
            return this._properties.fontFamily;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "fontSize", {
        get: function () {
            return this._properties.fontSize;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "characterEdge", {
        get: function () {
            return this._properties.characterEdge;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "backgroundColor", {
        get: function () {
            return this._properties.backgroundColor;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "backgroundOpacity", {
        get: function () {
            return this._properties.backgroundOpacity;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "windowColor", {
        get: function () {
            return this._properties.windowColor;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "windowOpacity", {
        get: function () {
            return this._properties.windowOpacity;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Saves the settings to local storage.
     */
    SubtitleSettingsManager.prototype.save = function () {
        storageutils_1.StorageUtils.setObject(this.localStorageKey, this.userSettings);
    };
    /**
     * Loads the settings from local storage
     */
    SubtitleSettingsManager.prototype.load = function () {
        this.userSettings = storageutils_1.StorageUtils.getObject(this.localStorageKey) || {};
        // Apply the loaded settings
        for (var property in this.userSettings) {
            this._properties[property].value = this.userSettings[property];
        }
    };
    return SubtitleSettingsManager;
}());
exports.SubtitleSettingsManager = SubtitleSettingsManager;
/**
 * A dummy component whose sole purpose is to expose the {@link #prefixCss} method to the
 * {@link SubtitleSettingsManager}.
 */
var DummyComponent = /** @class */ (function (_super) {
    __extends(DummyComponent, _super);
    function DummyComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DummyComponent.instance = function () {
        if (!DummyComponent._instance) {
            DummyComponent._instance = new DummyComponent();
        }
        return DummyComponent._instance;
    };
    DummyComponent.prototype.prefixCss = function (cssClassOrId) {
        return _super.prototype.prefixCss.call(this, cssClassOrId);
    };
    return DummyComponent;
}(component_1.Component));
var SubtitleSettingsProperty = /** @class */ (function () {
    function SubtitleSettingsProperty(manager) {
        this._manager = manager;
        this._onChanged = new eventdispatcher_1.EventDispatcher();
    }
    SubtitleSettingsProperty.prototype.isSet = function () {
        return this._value != null;
    };
    SubtitleSettingsProperty.prototype.clear = function () {
        this._value = null;
        this.onChangedEvent(null);
    };
    Object.defineProperty(SubtitleSettingsProperty.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            if (typeof value === 'string' && value === 'null') {
                value = null;
            }
            this._value = value;
            this.onChangedEvent(value);
        },
        enumerable: false,
        configurable: true
    });
    SubtitleSettingsProperty.prototype.onChangedEvent = function (value) {
        this._onChanged.dispatch(this._manager, this);
    };
    Object.defineProperty(SubtitleSettingsProperty.prototype, "onChanged", {
        get: function () {
            return this._onChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    return SubtitleSettingsProperty;
}());
exports.SubtitleSettingsProperty = SubtitleSettingsProperty;

},{"../../eventdispatcher":86,"../../storageutils":109,"../component":23}],68:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleSettingsPanelPage = void 0;
var settingspanelpage_1 = require("../settingspanelpage");
var subtitlesettingsmanager_1 = require("./subtitlesettingsmanager");
var fontsizeselectbox_1 = require("./fontsizeselectbox");
var fontfamilyselectbox_1 = require("./fontfamilyselectbox");
var fontcolorselectbox_1 = require("./fontcolorselectbox");
var fontopacityselectbox_1 = require("./fontopacityselectbox");
var characteredgeselectbox_1 = require("./characteredgeselectbox");
var backgroundcolorselectbox_1 = require("./backgroundcolorselectbox");
var backgroundopacityselectbox_1 = require("./backgroundopacityselectbox");
var windowcolorselectbox_1 = require("./windowcolorselectbox");
var windowopacityselectbox_1 = require("./windowopacityselectbox");
var subtitlesettingsresetbutton_1 = require("./subtitlesettingsresetbutton");
var settingspanelpagebackbutton_1 = require("../settingspanelpagebackbutton");
var settingspanelitem_1 = require("../settingspanelitem");
var i18n_1 = require("../../localization/i18n");
var SubtitleSettingsPanelPage = /** @class */ (function (_super) {
    __extends(SubtitleSettingsPanelPage, _super);
    function SubtitleSettingsPanelPage(config) {
        var _this = _super.call(this, config) || this;
        _this.overlay = config.overlay;
        _this.settingsPanel = config.settingsPanel;
        var manager = new subtitlesettingsmanager_1.SubtitleSettingsManager();
        _this.config = _this.mergeConfig(config, {
            components: [
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.font.size'), new fontsizeselectbox_1.FontSizeSelectBox({
                    overlay: _this.overlay, settingsManager: manager,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.font.family'), new fontfamilyselectbox_1.FontFamilySelectBox({
                    overlay: _this.overlay, settingsManager: manager,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.font.color'), new fontcolorselectbox_1.FontColorSelectBox({
                    overlay: _this.overlay, settingsManager: manager,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.font.opacity'), new fontopacityselectbox_1.FontOpacitySelectBox({
                    overlay: _this.overlay, settingsManager: manager,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.characterEdge'), new characteredgeselectbox_1.CharacterEdgeSelectBox({
                    overlay: _this.overlay, settingsManager: manager,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.background.color'), new backgroundcolorselectbox_1.BackgroundColorSelectBox({
                    overlay: _this.overlay, settingsManager: manager,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.background.opacity'), new backgroundopacityselectbox_1.BackgroundOpacitySelectBox({
                    overlay: _this.overlay, settingsManager: manager,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.window.color'), new windowcolorselectbox_1.WindowColorSelectBox({
                    overlay: _this.overlay, settingsManager: manager,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.window.opacity'), new windowopacityselectbox_1.WindowOpacitySelectBox({
                    overlay: _this.overlay, settingsManager: manager,
                })),
                new settingspanelitem_1.SettingsPanelItem(new settingspanelpagebackbutton_1.SettingsPanelPageBackButton({
                    container: _this.settingsPanel,
                    text: i18n_1.i18n.getLocalizer('back'),
                }), new subtitlesettingsresetbutton_1.SubtitleSettingsResetButton({
                    settingsManager: manager,
                }), {
                    role: 'menubar',
                }),
            ],
        }, _this.config);
        return _this;
    }
    SubtitleSettingsPanelPage.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.onActive.subscribe(function () {
            _this.overlay.enablePreviewSubtitleLabel();
        });
        this.onInactive.subscribe(function () {
            _this.overlay.removePreviewSubtitleLabel();
        });
    };
    return SubtitleSettingsPanelPage;
}(settingspanelpage_1.SettingsPanelPage));
exports.SubtitleSettingsPanelPage = SubtitleSettingsPanelPage;

},{"../../localization/i18n":91,"../settingspanelitem":48,"../settingspanelpage":49,"../settingspanelpagebackbutton":50,"./backgroundcolorselectbox":58,"./backgroundopacityselectbox":59,"./characteredgeselectbox":60,"./fontcolorselectbox":61,"./fontfamilyselectbox":62,"./fontopacityselectbox":63,"./fontsizeselectbox":64,"./subtitlesettingsmanager":67,"./subtitlesettingsresetbutton":69,"./windowcolorselectbox":70,"./windowopacityselectbox":71}],69:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleSettingsResetButton = void 0;
var button_1 = require("../button");
var i18n_1 = require("../../localization/i18n");
/**
 * A button that resets all subtitle settings to their defaults.
 */
var SubtitleSettingsResetButton = /** @class */ (function (_super) {
    __extends(SubtitleSettingsResetButton, _super);
    function SubtitleSettingsResetButton(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-subtitlesettingsresetbutton',
            text: i18n_1.i18n.getLocalizer('reset'),
        }, _this.config);
        return _this;
    }
    SubtitleSettingsResetButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.onClick.subscribe(function () {
            _this.config.settingsManager.reset();
        });
    };
    return SubtitleSettingsResetButton;
}(button_1.Button));
exports.SubtitleSettingsResetButton = SubtitleSettingsResetButton;

},{"../../localization/i18n":91,"../button":17}],70:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowColorSelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different background colors.
 */
var WindowColorSelectBox = /** @class */ (function (_super) {
    __extends(WindowColorSelectBox, _super);
    function WindowColorSelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingswindowcolorselectbox'],
        }, _this.config);
        return _this;
    }
    WindowColorSelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('white', i18n_1.i18n.getLocalizer('colors.white'));
        this.addItem('black', i18n_1.i18n.getLocalizer('colors.black'));
        this.addItem('red', i18n_1.i18n.getLocalizer('colors.red'));
        this.addItem('green', i18n_1.i18n.getLocalizer('colors.green'));
        this.addItem('blue', i18n_1.i18n.getLocalizer('colors.blue'));
        this.addItem('cyan', i18n_1.i18n.getLocalizer('colors.cyan'));
        this.addItem('yellow', i18n_1.i18n.getLocalizer('colors.yellow'));
        this.addItem('magenta', i18n_1.i18n.getLocalizer('colors.magenta'));
        var setColorAndOpacity = function () {
            if (_this.settingsManager.windowColor.isSet() && _this.settingsManager.windowOpacity.isSet()) {
                _this.toggleOverlayClass('windowcolor-' + _this.settingsManager.windowColor.value + _this.settingsManager.windowOpacity.value);
            }
            else {
                _this.toggleOverlayClass(null);
            }
        };
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.windowColor.value = key;
        });
        this.settingsManager.windowColor.onChanged.subscribe(function (sender, property) {
            // Color and opacity go together, so we need to...
            if (!_this.settingsManager.windowColor.isSet()) {
                // ... clear the opacity when the color is not set
                _this.settingsManager.windowOpacity.clear();
            }
            else if (!_this.settingsManager.windowOpacity.isSet()) {
                // ... set an opacity when the color is set
                _this.settingsManager.windowOpacity.value = '100';
            }
            _this.selectItem(property.value);
            setColorAndOpacity();
        });
        this.settingsManager.windowOpacity.onChanged.subscribe(function () {
            setColorAndOpacity();
        });
        // Load initial value
        if (this.settingsManager.windowColor.isSet()) {
            this.selectItem(this.settingsManager.windowColor.value);
        }
    };
    return WindowColorSelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.WindowColorSelectBox = WindowColorSelectBox;

},{"../../localization/i18n":91,"./subtitlesettingselectbox":65}],71:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowOpacitySelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different background opacity.
 */
var WindowOpacitySelectBox = /** @class */ (function (_super) {
    __extends(WindowOpacitySelectBox, _super);
    function WindowOpacitySelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingswindowopacityselectbox'],
        }, _this.config);
        return _this;
    }
    WindowOpacitySelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('100', i18n_1.i18n.getLocalizer('percent', { value: 100 }));
        this.addItem('75', i18n_1.i18n.getLocalizer('percent', { value: 75 }));
        this.addItem('50', i18n_1.i18n.getLocalizer('percent', { value: 50 }));
        this.addItem('25', i18n_1.i18n.getLocalizer('percent', { value: 25 }));
        this.addItem('0', i18n_1.i18n.getLocalizer('percent', { value: 0 }));
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.windowOpacity.value = key;
            // Color and opacity go together, so we need to...
            if (!_this.settingsManager.windowOpacity.isSet()) {
                // ... clear the color when the opacity is not set
                _this.settingsManager.windowColor.clear();
            }
            else if (!_this.settingsManager.windowColor.isSet()) {
                // ... set a color when the opacity is set
                _this.settingsManager.windowColor.value = 'black';
            }
        });
        // Update selected item when value is set from somewhere else
        this.settingsManager.windowOpacity.onChanged.subscribe(function (sender, property) {
            _this.selectItem(property.value);
        });
        // Load initial value
        if (this.settingsManager.windowOpacity.isSet()) {
            this.selectItem(this.settingsManager.windowOpacity.value);
        }
    };
    return WindowOpacitySelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.WindowOpacitySelectBox = WindowOpacitySelectBox;

},{"../../localization/i18n":91,"./subtitlesettingselectbox":65}],72:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimelineMarkersHandler = void 0;
var dom_1 = require("../dom");
var playerutils_1 = require("../playerutils");
var timeout_1 = require("../timeout");
var TimelineMarkersHandler = /** @class */ (function () {
    function TimelineMarkersHandler(config, getSeekBarWidth, markersContainer) {
        this.config = config;
        this.getSeekBarWidth = getSeekBarWidth;
        this.markersContainer = markersContainer;
        this.timelineMarkers = [];
    }
    TimelineMarkersHandler.prototype.initialize = function (player, uimanager) {
        this.player = player;
        this.uimanager = uimanager;
        this.configureMarkers();
    };
    TimelineMarkersHandler.prototype.configureMarkers = function () {
        var _this = this;
        // Remove markers when unloaded
        this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, function () { return _this.clearMarkers(); });
        this.player.on(this.player.exports.PlayerEvent.AdBreakStarted, function () { return _this.clearMarkers(); });
        this.player.on(this.player.exports.PlayerEvent.AdBreakFinished, function () { return _this.updateMarkers(); });
        // Update markers when the size of the seekbar changes
        this.player.on(this.player.exports.PlayerEvent.PlayerResized, function () { return _this.updateMarkersDOM(); });
        this.player.on(this.player.exports.PlayerEvent.SourceLoaded, function () {
            if (_this.player.isLive()) {
                // Update marker position as timeshift range changes
                _this.player.on(_this.player.exports.PlayerEvent.TimeChanged, function () { return _this.updateMarkers(); });
                // Update marker postion when paused as timeshift range changes
                _this.configureLivePausedTimeshiftUpdater(function () { return _this.updateMarkers(); });
            }
        });
        this.uimanager.getConfig().events.onUpdated.subscribe(function () { return _this.updateMarkers(); });
        this.uimanager.onRelease.subscribe(function () { return _this.uimanager.getConfig().events.onUpdated.unsubscribe(function () { return _this.updateMarkers(); }); });
        // Init markers at startup
        this.updateMarkers();
    };
    TimelineMarkersHandler.prototype.getMarkerAtPosition = function (percentage) {
        var snappingRange = this.config.snappingRange;
        var matchingMarker = this.timelineMarkers.find(function (marker) {
            var hasDuration = marker.duration > 0;
            // Handle interval markers
            var intervalMarkerMatch = hasDuration &&
                percentage >= marker.position - snappingRange &&
                percentage <= marker.position + marker.duration + snappingRange;
            // Handle position markers
            var positionMarkerMatch = percentage >= marker.position - snappingRange &&
                percentage <= marker.position + snappingRange;
            return intervalMarkerMatch || positionMarkerMatch;
        });
        return matchingMarker || null;
    };
    TimelineMarkersHandler.prototype.clearMarkers = function () {
        this.timelineMarkers = [];
        this.markersContainer.empty();
    };
    TimelineMarkersHandler.prototype.removeMarkerFromConfig = function (marker) {
        this.uimanager.getConfig().metadata.markers = this.uimanager.getConfig().metadata.markers.filter(function (_marker) { return marker !== _marker; });
    };
    TimelineMarkersHandler.prototype.filterRemovedMarkers = function () {
        var _this = this;
        this.timelineMarkers = this.timelineMarkers.filter(function (seekbarMarker) {
            var matchingMarker = _this.uimanager.getConfig().metadata.markers.find(function (_marker) { return seekbarMarker.marker === _marker; });
            if (!matchingMarker) {
                _this.removeMarkerFromDOM(seekbarMarker);
            }
            return matchingMarker;
        });
    };
    TimelineMarkersHandler.prototype.removeMarkerFromDOM = function (marker) {
        if (marker.element) {
            marker.element.remove();
        }
    };
    TimelineMarkersHandler.prototype.updateMarkers = function () {
        var _this = this;
        if (!shouldProcessMarkers(this.player, this.uimanager)) {
            this.clearMarkers();
            return;
        }
        this.filterRemovedMarkers();
        this.uimanager.getConfig().metadata.markers.forEach(function (marker) {
            var _a = getMarkerPositions(_this.player, marker), markerPosition = _a.markerPosition, markerDuration = _a.markerDuration;
            if (shouldRemoveMarker(markerPosition, markerDuration)) {
                _this.removeMarkerFromConfig(marker);
            }
            else if (markerPosition <= 100) {
                var matchingMarker = _this.timelineMarkers.find(function (seekbarMarker) { return seekbarMarker.marker === marker; });
                if (matchingMarker) {
                    matchingMarker.position = markerPosition;
                    matchingMarker.duration = markerDuration;
                    _this.updateMarkerDOM(matchingMarker);
                }
                else {
                    var newMarker = { marker: marker, position: markerPosition, duration: markerDuration };
                    _this.timelineMarkers.push(newMarker);
                    _this.createMarkerDOM(newMarker);
                }
            }
        });
    };
    TimelineMarkersHandler.prototype.getMarkerCssProperties = function (marker) {
        var seekBarWidthPx = this.getSeekBarWidth();
        var positionInPx = (seekBarWidthPx / 100) * (marker.position < 0 ? 0 : marker.position);
        var cssProperties = {
            'transform': "translateX(".concat(positionInPx, "px)"),
        };
        if (marker.duration > 0) {
            var markerWidthPx = Math.round(seekBarWidthPx / 100 * marker.duration);
            cssProperties['width'] = "".concat(markerWidthPx, "px");
        }
        return cssProperties;
    };
    TimelineMarkersHandler.prototype.updateMarkerDOM = function (marker) {
        marker.element.css(this.getMarkerCssProperties(marker));
    };
    TimelineMarkersHandler.prototype.createMarkerDOM = function (marker) {
        var _this = this;
        var markerClasses = ['seekbar-marker'].concat(marker.marker.cssClasses || [])
            .map(function (cssClass) { return _this.prefixCss(cssClass); });
        var markerElement = new dom_1.DOM('div', {
            'class': markerClasses.join(' '),
            'data-marker-time': String(marker.marker.time),
            'data-marker-title': String(marker.marker.title),
        }).css(this.getMarkerCssProperties(marker));
        if (marker.marker.imageUrl) {
            var removeImage = function () {
                imageElement_1.remove();
            };
            var imageElement_1 = new dom_1.DOM('img', {
                'class': this.prefixCss('seekbar-marker-image'),
                'src': marker.marker.imageUrl,
            }).on('error', removeImage);
            markerElement.append(imageElement_1);
        }
        marker.element = markerElement;
        this.markersContainer.append(markerElement);
    };
    TimelineMarkersHandler.prototype.updateMarkersDOM = function () {
        var _this = this;
        this.timelineMarkers.forEach(function (marker) {
            if (marker.element) {
                _this.updateMarkerDOM(marker);
            }
            else {
                _this.createMarkerDOM(marker);
            }
        });
    };
    TimelineMarkersHandler.prototype.configureLivePausedTimeshiftUpdater = function (handler) {
        var _this = this;
        // Regularly update the marker position while the timeout is active
        this.pausedTimeshiftUpdater = new timeout_1.Timeout(1000, handler, true);
        this.player.on(this.player.exports.PlayerEvent.Paused, function () {
            if (_this.player.isLive() && _this.player.getMaxTimeShift() < 0) {
                _this.pausedTimeshiftUpdater.start();
            }
        });
        // Stop updater when playback continues (no matter if the updater was started before)
        this.player.on(this.player.exports.PlayerEvent.Play, function () { return _this.pausedTimeshiftUpdater.clear(); });
        this.player.on(this.player.exports.PlayerEvent.Destroy, function () { return _this.pausedTimeshiftUpdater.clear(); });
    };
    TimelineMarkersHandler.prototype.prefixCss = function (cssClassOrId) {
        return this.config.cssPrefix + '-' + cssClassOrId;
    };
    return TimelineMarkersHandler;
}());
exports.TimelineMarkersHandler = TimelineMarkersHandler;
function getMarkerPositions(player, marker) {
    var duration = getDuration(player);
    var markerPosition = 100 / duration * getMarkerTime(marker, player, duration); // convert absolute time to percentage
    var markerDuration = 100 / duration * marker.duration;
    if (markerPosition < 0 && !isNaN(markerDuration)) {
        // Shrink marker duration for on live streams as they reach end
        markerDuration = markerDuration + markerPosition;
    }
    if (100 - markerPosition < markerDuration) {
        // Shrink marker if it overflows timeline
        markerDuration = 100 - markerPosition;
    }
    return { markerDuration: markerDuration, markerPosition: markerPosition };
}
function getMarkerTime(marker, player, duration) {
    if (!player.isLive()) {
        return marker.time;
    }
    return duration - (playerutils_1.PlayerUtils.getSeekableRangeRespectingLive(player).end - marker.time);
}
function getDuration(player) {
    if (!player.isLive()) {
        return player.getDuration();
    }
    var _a = playerutils_1.PlayerUtils.getSeekableRangeRespectingLive(player), start = _a.start, end = _a.end;
    return end - start;
}
function shouldRemoveMarker(markerPosition, markerDuration) {
    return (markerDuration < 0 || isNaN(markerDuration)) && markerPosition < 0;
}
function shouldProcessMarkers(player, uimanager) {
    // Don't generate timeline markers if we don't yet have a duration
    // The duration check is for buggy platforms where the duration is not available instantly (Chrome on Android 4.3)
    var validToProcess = player.getDuration() !== Infinity || player.isLive();
    var hasMarkers = uimanager.getConfig().metadata.markers.length > 0;
    return validToProcess && hasMarkers;
}

},{"../dom":84,"../playerutils":97,"../timeout":112}],73:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TitleBar = void 0;
var container_1 = require("./container");
var metadatalabel_1 = require("./metadatalabel");
/**
 * Displays a title bar containing a label with the title of the video.
 */
var TitleBar = /** @class */ (function (_super) {
    __extends(TitleBar, _super);
    function TitleBar(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-titlebar',
            hidden: true,
            components: [
                new metadatalabel_1.MetadataLabel({ content: metadatalabel_1.MetadataLabelContent.Title }),
                new metadatalabel_1.MetadataLabel({ content: metadatalabel_1.MetadataLabelContent.Description }),
            ],
            keepHiddenWithoutMetadata: false,
        }, _this.config);
        return _this;
    }
    TitleBar.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var shouldBeShown = !this.isHidden();
        var hasMetadataText = true; // Flag to track if any metadata label contains text
        var checkMetadataTextAndUpdateVisibility = function () {
            hasMetadataText = false;
            // Iterate through metadata labels and check if at least one of them contains text
            for (var _i = 0, _a = _this.getComponents(); _i < _a.length; _i++) {
                var component = _a[_i];
                if (component instanceof metadatalabel_1.MetadataLabel) {
                    if (!component.isEmpty()) {
                        hasMetadataText = true;
                        break;
                    }
                }
            }
            if (_this.isShown()) {
                // Hide a visible titlebar if it does not contain any text and the hidden flag is set
                if (config.keepHiddenWithoutMetadata && !hasMetadataText) {
                    _this.hide();
                }
            }
            else if (shouldBeShown) {
                // Show a hidden titlebar if it should actually be shown
                _this.show();
            }
        };
        // Listen to text change events to update the hasMetadataText flag when the metadata dynamically changes
        for (var _i = 0, _a = this.getComponents(); _i < _a.length; _i++) {
            var component = _a[_i];
            if (component instanceof metadatalabel_1.MetadataLabel) {
                component.onTextChanged.subscribe(checkMetadataTextAndUpdateVisibility);
            }
        }
        uimanager.onControlsShow.subscribe(function () {
            shouldBeShown = true;
            if (!(config.keepHiddenWithoutMetadata && !hasMetadataText)) {
                _this.show();
            }
        });
        uimanager.onControlsHide.subscribe(function () {
            shouldBeShown = false;
            _this.hide();
        });
        // init
        checkMetadataTextAndUpdateVisibility();
    };
    return TitleBar;
}(container_1.Container));
exports.TitleBar = TitleBar;

},{"./container":24,"./metadatalabel":34}],74:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToggleButton = void 0;
var button_1 = require("./button");
var eventdispatcher_1 = require("../eventdispatcher");
/**
 * A button that can be toggled between 'on' and 'off' states.
 */
var ToggleButton = /** @class */ (function (_super) {
    __extends(ToggleButton, _super);
    function ToggleButton(config) {
        var _this = _super.call(this, config) || this;
        _this.toggleButtonEvents = {
            onToggle: new eventdispatcher_1.EventDispatcher(),
            onToggleOn: new eventdispatcher_1.EventDispatcher(),
            onToggleOff: new eventdispatcher_1.EventDispatcher(),
        };
        var defaultConfig = {
            cssClass: 'ui-togglebutton',
            onClass: 'on',
            offClass: 'off',
        };
        if (config.onAriaLabel) {
            config.ariaLabel = config.onAriaLabel;
        }
        _this.config = _this.mergeConfig(config, defaultConfig, _this.config);
        return _this;
    }
    ToggleButton.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        this.getDomElement().addClass(this.prefixCss(config.offClass));
    };
    /**
     * Toggles the button to the 'on' state.
     */
    ToggleButton.prototype.on = function () {
        if (this.isOff()) {
            var config = this.getConfig();
            this.onState = true;
            this.getDomElement().removeClass(this.prefixCss(config.offClass));
            this.getDomElement().addClass(this.prefixCss(config.onClass));
            this.onToggleEvent();
            this.onToggleOnEvent();
            this.setAriaAttr('pressed', 'true');
            if (this.config.onAriaLabel) {
                this.setAriaLabel(this.config.onAriaLabel);
            }
        }
    };
    /**
     * Toggles the button to the 'off' state.
     */
    ToggleButton.prototype.off = function () {
        if (this.isOn()) {
            var config = this.getConfig();
            this.onState = false;
            this.getDomElement().removeClass(this.prefixCss(config.onClass));
            this.getDomElement().addClass(this.prefixCss(config.offClass));
            this.onToggleEvent();
            this.onToggleOffEvent();
            this.setAriaAttr('pressed', 'false');
            if (this.config.offAriaLabel) {
                this.setAriaLabel(this.config.offAriaLabel);
            }
        }
    };
    /**
     * Toggle the button 'on' if it is 'off', or 'off' if it is 'on'.
     */
    ToggleButton.prototype.toggle = function () {
        if (this.isOn()) {
            this.off();
        }
        else {
            this.on();
        }
    };
    /**
     * Checks if the toggle button is in the 'on' state.
     * @returns {boolean} true if button is 'on', false if 'off'
     */
    ToggleButton.prototype.isOn = function () {
        return this.onState;
    };
    /**
     * Checks if the toggle button is in the 'off' state.
     * @returns {boolean} true if button is 'off', false if 'on'
     */
    ToggleButton.prototype.isOff = function () {
        return !this.isOn();
    };
    ToggleButton.prototype.onClickEvent = function () {
        _super.prototype.onClickEvent.call(this);
        // Fire the toggle event together with the click event
        // (they are technically the same, only the semantics are different)
        this.onToggleEvent();
    };
    ToggleButton.prototype.onToggleEvent = function () {
        this.toggleButtonEvents.onToggle.dispatch(this);
    };
    ToggleButton.prototype.onToggleOnEvent = function () {
        this.toggleButtonEvents.onToggleOn.dispatch(this);
    };
    ToggleButton.prototype.onToggleOffEvent = function () {
        this.toggleButtonEvents.onToggleOff.dispatch(this);
    };
    Object.defineProperty(ToggleButton.prototype, "onToggle", {
        /**
         * Gets the event that is fired when the button is toggled.
         * @returns {Event<ToggleButton<Config>, NoArgs>}
         */
        get: function () {
            return this.toggleButtonEvents.onToggle.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToggleButton.prototype, "onToggleOn", {
        /**
         * Gets the event that is fired when the button is toggled 'on'.
         * @returns {Event<ToggleButton<Config>, NoArgs>}
         */
        get: function () {
            return this.toggleButtonEvents.onToggleOn.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToggleButton.prototype, "onToggleOff", {
        /**
         * Gets the event that is fired when the button is toggled 'off'.
         * @returns {Event<ToggleButton<Config>, NoArgs>}
         */
        get: function () {
            return this.toggleButtonEvents.onToggleOff.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    return ToggleButton;
}(button_1.Button));
exports.ToggleButton = ToggleButton;

},{"../eventdispatcher":86,"./button":17}],75:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TvNoiseCanvas = void 0;
var component_1 = require("./component");
var dom_1 = require("../dom");
/**
 * Animated analog TV static noise.
 */
var TvNoiseCanvas = /** @class */ (function (_super) {
    __extends(TvNoiseCanvas, _super);
    function TvNoiseCanvas(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.canvasWidth = 160;
        _this.canvasHeight = 90;
        _this.interferenceHeight = 50;
        _this.lastFrameUpdate = 0;
        _this.frameInterval = 60;
        _this.useAnimationFrame = !!window.requestAnimationFrame;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-tvnoisecanvas',
        }, _this.config);
        return _this;
    }
    TvNoiseCanvas.prototype.toDomElement = function () {
        return this.canvas = new dom_1.DOM('canvas', { 'class': this.getCssClasses() });
    };
    TvNoiseCanvas.prototype.start = function () {
        this.canvasElement = this.canvas.get(0);
        this.canvasContext = this.canvasElement.getContext('2d');
        this.noiseAnimationWindowPos = -this.canvasHeight;
        this.lastFrameUpdate = 0;
        this.canvasElement.width = this.canvasWidth;
        this.canvasElement.height = this.canvasHeight;
        this.renderFrame();
    };
    TvNoiseCanvas.prototype.stop = function () {
        if (this.useAnimationFrame) {
            cancelAnimationFrame(this.frameUpdateHandlerId);
        }
        else {
            clearTimeout(this.frameUpdateHandlerId);
        }
    };
    TvNoiseCanvas.prototype.renderFrame = function () {
        // This code has been copied from the player controls.js and simplified
        if (this.lastFrameUpdate + this.frameInterval > new Date().getTime()) {
            // It's too early to render the next frame
            this.scheduleNextRender();
            return;
        }
        var currentPixelOffset;
        var canvasWidth = this.canvasWidth;
        var canvasHeight = this.canvasHeight;
        // Create texture
        var noiseImage = this.canvasContext.createImageData(canvasWidth, canvasHeight);
        // Fill texture with noise
        for (var y = 0; y < canvasHeight; y++) {
            for (var x = 0; x < canvasWidth; x++) {
                currentPixelOffset = (canvasWidth * y * 4) + x * 4;
                noiseImage.data[currentPixelOffset] = Math.random() * 255;
                if (y < this.noiseAnimationWindowPos || y > this.noiseAnimationWindowPos + this.interferenceHeight) {
                    noiseImage.data[currentPixelOffset] *= 0.85;
                }
                noiseImage.data[currentPixelOffset + 1] = noiseImage.data[currentPixelOffset];
                noiseImage.data[currentPixelOffset + 2] = noiseImage.data[currentPixelOffset];
                noiseImage.data[currentPixelOffset + 3] = 50;
            }
        }
        // Put texture onto canvas
        this.canvasContext.putImageData(noiseImage, 0, 0);
        this.lastFrameUpdate = new Date().getTime();
        this.noiseAnimationWindowPos += 7;
        if (this.noiseAnimationWindowPos > canvasHeight) {
            this.noiseAnimationWindowPos = -canvasHeight;
        }
        this.scheduleNextRender();
    };
    TvNoiseCanvas.prototype.scheduleNextRender = function () {
        if (this.useAnimationFrame) {
            this.frameUpdateHandlerId = window.requestAnimationFrame(this.renderFrame.bind(this));
        }
        else {
            this.frameUpdateHandlerId = window.setTimeout(this.renderFrame.bind(this), this.frameInterval);
        }
    };
    return TvNoiseCanvas;
}(component_1.Component));
exports.TvNoiseCanvas = TvNoiseCanvas;

},{"../dom":84,"./component":23}],76:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.UIContainer = void 0;
var container_1 = require("./container");
var dom_1 = require("../dom");
var timeout_1 = require("../timeout");
var playerutils_1 = require("../playerutils");
var eventdispatcher_1 = require("../eventdispatcher");
var i18n_1 = require("../localization/i18n");
/**
 * The base container that contains all of the UI. The UIContainer is passed to the {@link UIManager} to build and
 * setup the UI.
 */
var UIContainer = exports.UIContainer = /** @class */ (function (_super) {
    __extends(UIContainer, _super);
    function UIContainer(config) {
        var _this = _super.call(this, config) || this;
        _this.hideUi = function () { };
        _this.showUi = function () { };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-uicontainer',
            role: 'region',
            ariaLabel: i18n_1.i18n.getLocalizer('player'),
            hideDelay: 5000,
        }, _this.config);
        _this.playerStateChange = new eventdispatcher_1.EventDispatcher();
        return _this;
    }
    UIContainer.prototype.configure = function (player, uimanager) {
        var config = this.getConfig();
        if (config.userInteractionEventSource) {
            this.userInteractionEventSource = new dom_1.DOM(config.userInteractionEventSource);
        }
        else {
            this.userInteractionEventSource = this.getDomElement();
        }
        _super.prototype.configure.call(this, player, uimanager);
        this.configureUIShowHide(player, uimanager);
        this.configurePlayerStates(player, uimanager);
    };
    UIContainer.prototype.configureUIShowHide = function (player, uimanager) {
        var _this = this;
        var config = this.getConfig();
        if (config.hideDelay === -1) {
            uimanager.onConfigured.subscribe(function () { return uimanager.onControlsShow.dispatch(_this); });
            return;
        }
        var isUiShown = false;
        var isSeeking = false;
        var isFirstTouch = true;
        var playerState;
        var hidingPrevented = function () {
            return config.hidePlayerStateExceptions && config.hidePlayerStateExceptions.indexOf(playerState) > -1;
        };
        this.showUi = function () {
            if (!isUiShown) {
                // Let subscribers know that they should reveal themselves
                uimanager.onControlsShow.dispatch(_this);
                isUiShown = true;
            }
            // Don't trigger timeout while seeking (it will be triggered once the seek is finished) or casting
            if (!isSeeking && !player.isCasting() && !hidingPrevented()) {
                _this.uiHideTimeout.start();
            }
        };
        this.hideUi = function () {
            // Hide the UI only if it is shown, and if not casting
            if (isUiShown && !player.isCasting()) {
                // Issue a preview event to check if we are good to hide the controls
                var previewHideEventArgs = {};
                uimanager.onPreviewControlsHide.dispatch(_this, previewHideEventArgs);
                if (!previewHideEventArgs.cancel) {
                    // If the preview wasn't canceled, let subscribers know that they should now hide themselves
                    uimanager.onControlsHide.dispatch(_this);
                    isUiShown = false;
                }
                else {
                    // If the hide preview was canceled, continue to show UI
                    _this.showUi();
                }
            }
        };
        // Timeout to defer UI hiding by the configured delay time
        this.uiHideTimeout = new timeout_1.Timeout(config.hideDelay, this.hideUi);
        this.userInteractionEvents = [{
                // On touch displays, the first touch reveals the UI
                name: 'touchend',
                handler: function (e) {
                    if (!isUiShown) {
                        // Only if the UI is hidden, we prevent other actions (except for the first touch) and reveal the UI
                        // instead. The first touch is not prevented to let other listeners receive the event and trigger an
                        // initial action, e.g. the huge playback button can directly start playback instead of requiring a double
                        // tap which 1. reveals the UI and 2. starts playback.
                        if (isFirstTouch && !player.isPlaying()) {
                            isFirstTouch = false;
                        }
                        else {
                            e.preventDefault();
                        }
                        _this.showUi();
                    }
                },
            }, {
                // When the mouse enters, we show the UI
                name: 'mouseenter',
                handler: function () {
                    _this.showUi();
                },
            }, {
                // When the mouse moves within, we show the UI
                name: 'mousemove',
                handler: function () {
                    _this.showUi();
                },
            }, {
                name: 'focusin',
                handler: function () {
                    _this.showUi();
                },
            }, {
                name: 'keydown',
                handler: function () {
                    _this.showUi();
                },
            }, {
                // When the mouse leaves, we can prepare to hide the UI, except a seek is going on
                name: 'mouseleave',
                handler: function () {
                    // When a seek is going on, the seek scrub pointer may exit the UI area while still seeking, and we do not
                    // hide the UI in such cases
                    if (!isSeeking && !hidingPrevented()) {
                        _this.uiHideTimeout.start();
                    }
                },
            }];
        this.userInteractionEvents.forEach(function (event) { return _this.userInteractionEventSource.on(event.name, event.handler); });
        uimanager.onSeek.subscribe(function () {
            _this.uiHideTimeout.clear(); // Don't hide UI while a seek is in progress
            isSeeking = true;
        });
        uimanager.onSeeked.subscribe(function () {
            isSeeking = false;
            if (!hidingPrevented()) {
                _this.uiHideTimeout.start(); // Re-enable UI hide timeout after a seek
            }
        });
        player.on(player.exports.PlayerEvent.CastStarted, function () {
            _this.showUi(); // Show UI when a Cast session has started (UI will then stay permanently on during the session)
        });
        this.playerStateChange.subscribe(function (_, state) {
            playerState = state;
            if (hidingPrevented()) {
                // Entering a player state that prevents hiding and forces the controls to be shown
                _this.uiHideTimeout.clear();
                _this.showUi();
            }
            else {
                // Entering a player state that allows hiding
                _this.uiHideTimeout.start();
            }
        });
    };
    UIContainer.prototype.configurePlayerStates = function (player, uimanager) {
        var _this = this;
        var container = this.getDomElement();
        // Convert player states into CSS class names
        var stateClassNames = [];
        for (var state in playerutils_1.PlayerUtils.PlayerState) {
            if (isNaN(Number(state))) {
                var enumName = playerutils_1.PlayerUtils.PlayerState[playerutils_1.PlayerUtils.PlayerState[state]];
                stateClassNames[playerutils_1.PlayerUtils.PlayerState[state]] =
                    this.prefixCss(UIContainer.STATE_PREFIX + enumName.toLowerCase());
            }
        }
        var removeStates = function () {
            container.removeClass(stateClassNames[playerutils_1.PlayerUtils.PlayerState.Idle]);
            container.removeClass(stateClassNames[playerutils_1.PlayerUtils.PlayerState.Prepared]);
            container.removeClass(stateClassNames[playerutils_1.PlayerUtils.PlayerState.Playing]);
            container.removeClass(stateClassNames[playerutils_1.PlayerUtils.PlayerState.Paused]);
            container.removeClass(stateClassNames[playerutils_1.PlayerUtils.PlayerState.Finished]);
        };
        var updateState = function (state) {
            removeStates();
            container.addClass(stateClassNames[state]);
            _this.playerStateChange.dispatch(_this, state);
        };
        player.on(player.exports.PlayerEvent.SourceLoaded, function () {
            updateState(playerutils_1.PlayerUtils.PlayerState.Prepared);
        });
        player.on(player.exports.PlayerEvent.Play, function () {
            updateState(playerutils_1.PlayerUtils.PlayerState.Playing);
        });
        player.on(player.exports.PlayerEvent.Playing, function () {
            updateState(playerutils_1.PlayerUtils.PlayerState.Playing);
        });
        player.on(player.exports.PlayerEvent.Paused, function () {
            updateState(playerutils_1.PlayerUtils.PlayerState.Paused);
        });
        player.on(player.exports.PlayerEvent.PlaybackFinished, function () {
            updateState(playerutils_1.PlayerUtils.PlayerState.Finished);
        });
        player.on(player.exports.PlayerEvent.SourceUnloaded, function () {
            updateState(playerutils_1.PlayerUtils.PlayerState.Idle);
        });
        uimanager.getConfig().events.onUpdated.subscribe(function () {
            updateState(playerutils_1.PlayerUtils.getState(player));
        });
        // Fullscreen marker class
        player.on(player.exports.PlayerEvent.ViewModeChanged, function () {
            if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {
                container.addClass(_this.prefixCss(UIContainer.FULLSCREEN));
            }
            else {
                container.removeClass(_this.prefixCss(UIContainer.FULLSCREEN));
            }
        });
        // Init fullscreen state
        if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {
            container.addClass(this.prefixCss(UIContainer.FULLSCREEN));
        }
        // Buffering marker class
        player.on(player.exports.PlayerEvent.StallStarted, function () {
            container.addClass(_this.prefixCss(UIContainer.BUFFERING));
        });
        player.on(player.exports.PlayerEvent.StallEnded, function () {
            container.removeClass(_this.prefixCss(UIContainer.BUFFERING));
        });
        // Init buffering state
        if (player.isStalled()) {
            container.addClass(this.prefixCss(UIContainer.BUFFERING));
        }
        // RemoteControl marker class
        player.on(player.exports.PlayerEvent.CastStarted, function () {
            container.addClass(_this.prefixCss(UIContainer.REMOTE_CONTROL));
        });
        player.on(player.exports.PlayerEvent.CastStopped, function () {
            container.removeClass(_this.prefixCss(UIContainer.REMOTE_CONTROL));
        });
        // Init RemoteControl state
        if (player.isCasting()) {
            container.addClass(this.prefixCss(UIContainer.REMOTE_CONTROL));
        }
        // Controls visibility marker class
        uimanager.onControlsShow.subscribe(function () {
            container.removeClass(_this.prefixCss(UIContainer.CONTROLS_HIDDEN));
            container.addClass(_this.prefixCss(UIContainer.CONTROLS_SHOWN));
        });
        uimanager.onControlsHide.subscribe(function () {
            container.removeClass(_this.prefixCss(UIContainer.CONTROLS_SHOWN));
            container.addClass(_this.prefixCss(UIContainer.CONTROLS_HIDDEN));
        });
        // Layout size classes
        var updateLayoutSizeClasses = function (width, height) {
            container.removeClass(_this.prefixCss('layout-max-width-400'));
            container.removeClass(_this.prefixCss('layout-max-width-600'));
            container.removeClass(_this.prefixCss('layout-max-width-800'));
            container.removeClass(_this.prefixCss('layout-max-width-1200'));
            if (width <= 400) {
                container.addClass(_this.prefixCss('layout-max-width-400'));
            }
            else if (width <= 600) {
                container.addClass(_this.prefixCss('layout-max-width-600'));
            }
            else if (width <= 800) {
                container.addClass(_this.prefixCss('layout-max-width-800'));
            }
            else if (width <= 1200) {
                container.addClass(_this.prefixCss('layout-max-width-1200'));
            }
        };
        player.on(player.exports.PlayerEvent.PlayerResized, function (e) {
            // Convert strings (with "px" suffix) to ints
            var width = Math.round(Number(e.width.substring(0, e.width.length - 2)));
            var height = Math.round(Number(e.height.substring(0, e.height.length - 2)));
            updateLayoutSizeClasses(width, height);
        });
        // Init layout state
        updateLayoutSizeClasses(new dom_1.DOM(player.getContainer()).width(), new dom_1.DOM(player.getContainer()).height());
    };
    UIContainer.prototype.release = function () {
        var _this = this;
        // Explicitly unsubscribe user interaction event handlers because they could be attached to an external element
        // that isn't owned by the UI and therefore not removed on release.
        if (this.userInteractionEvents) {
            this.userInteractionEvents.forEach(function (event) { return _this.userInteractionEventSource.off(event.name, event.handler); });
        }
        _super.prototype.release.call(this);
        if (this.uiHideTimeout) {
            this.uiHideTimeout.clear();
        }
    };
    UIContainer.prototype.toDomElement = function () {
        var container = _super.prototype.toDomElement.call(this);
        // Detect flexbox support (not supported in IE9)
        if (document && typeof document.createElement('p').style.flex !== 'undefined') {
            container.addClass(this.prefixCss('flexbox'));
        }
        else {
            container.addClass(this.prefixCss('no-flexbox'));
        }
        return container;
    };
    UIContainer.STATE_PREFIX = 'player-state-';
    UIContainer.FULLSCREEN = 'fullscreen';
    UIContainer.BUFFERING = 'buffering';
    UIContainer.REMOTE_CONTROL = 'remote-control';
    UIContainer.CONTROLS_SHOWN = 'controls-shown';
    UIContainer.CONTROLS_HIDDEN = 'controls-hidden';
    return UIContainer;
}(container_1.Container));

},{"../dom":84,"../eventdispatcher":86,"../localization/i18n":91,"../playerutils":97,"../timeout":112,"./container":24}],77:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoQualitySelectBox = void 0;
var selectbox_1 = require("./selectbox");
var i18n_1 = require("../localization/i18n");
/**
 * A select box providing a selection between 'auto' and the available video qualities.
 */
var VideoQualitySelectBox = /** @class */ (function (_super) {
    __extends(VideoQualitySelectBox, _super);
    function VideoQualitySelectBox(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-videoqualityselectbox'],
        }, _this.config);
        return _this;
    }
    VideoQualitySelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var selectCurrentVideoQuality = function () {
            _this.selectItem(player.getVideoQuality().id);
        };
        var updateVideoQualities = function () {
            var videoQualities = player.getAvailableVideoQualities();
            _this.clearItems();
            // Progressive streams do not support automatic quality selection
            _this.hasAuto = player.getStreamType() !== 'progressive';
            if (_this.hasAuto) {
                // Add entry for automatic quality switching (default setting)
                _this.addItem('auto', i18n_1.i18n.getLocalizer('auto'));
            }
            // Add video qualities
            for (var _i = 0, videoQualities_1 = videoQualities; _i < videoQualities_1.length; _i++) {
                var videoQuality = videoQualities_1[_i];
                _this.addItem(videoQuality.id, videoQuality.label);
            }
            // Select initial quality
            selectCurrentVideoQuality();
        };
        this.onItemSelected.subscribe(function (sender, value) {
            player.setVideoQuality(value);
        });
        // Update qualities when source goes away
        player.on(player.exports.PlayerEvent.SourceUnloaded, updateVideoQualities);
        // Update qualities when the period within a source changes
        player.on(player.exports.PlayerEvent.PeriodSwitched, updateVideoQualities);
        // Update quality selection when quality is changed (from outside)
        player.on(player.exports.PlayerEvent.VideoQualityChanged, selectCurrentVideoQuality);
        if (player.exports.PlayerEvent.VideoQualityAdded) {
            // Update qualities when their availability changed
            // TODO: remove any cast after next player release
            player.on(player.exports.PlayerEvent.VideoQualityAdded, updateVideoQualities);
            player.on(player.exports.PlayerEvent.VideoQualityRemoved, updateVideoQualities);
        }
        uimanager.getConfig().events.onUpdated.subscribe(updateVideoQualities);
    };
    /**
     * Returns true if the select box contains an 'auto' item for automatic quality selection mode.
     * @return {boolean}
     */
    VideoQualitySelectBox.prototype.hasAutoItem = function () {
        return this.hasAuto;
    };
    return VideoQualitySelectBox;
}(selectbox_1.SelectBox));
exports.VideoQualitySelectBox = VideoQualitySelectBox;

},{"../localization/i18n":91,"./selectbox":46}],78:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeControlButton = void 0;
var container_1 = require("./container");
var volumeslider_1 = require("./volumeslider");
var volumetogglebutton_1 = require("./volumetogglebutton");
var timeout_1 = require("../timeout");
/**
 * A composite volume control that consists of and internally manages a volume control button that can be used
 * for muting, and a (depending on the CSS style, e.g. slide-out) volume control bar.
 */
var VolumeControlButton = /** @class */ (function (_super) {
    __extends(VolumeControlButton, _super);
    function VolumeControlButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.volumeToggleButton = new volumetogglebutton_1.VolumeToggleButton();
        _this.volumeSlider = new volumeslider_1.VolumeSlider({
            vertical: config.vertical != null ? config.vertical : true,
            hidden: true,
        });
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-volumecontrolbutton',
            components: [_this.volumeToggleButton, _this.volumeSlider],
            hideDelay: 500,
        }, _this.config);
        return _this;
    }
    VolumeControlButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var volumeToggleButton = this.getVolumeToggleButton();
        var volumeSlider = this.getVolumeSlider();
        this.volumeSliderHideTimeout = new timeout_1.Timeout(this.getConfig().hideDelay, function () {
            volumeSlider.hide();
        });
        /*
         * Volume Slider visibility handling
         *
         * The volume slider shall be visible while the user hovers the mute toggle button, while the user hovers the
         * volume slider, and while the user slides the volume slider. If none of these situations are true, the slider
         * shall disappear.
         */
        var volumeSliderHovered = false;
        volumeToggleButton.getDomElement().on('mouseenter', function () {
            // Show volume slider when mouse enters the button area
            if (volumeSlider.isHidden()) {
                volumeSlider.show();
            }
            // Avoid hiding of the slider when button is hovered
            _this.volumeSliderHideTimeout.clear();
        });
        volumeToggleButton.getDomElement().on('mouseleave', function () {
            // Hide slider delayed when button is left
            _this.volumeSliderHideTimeout.reset();
        });
        volumeSlider.getDomElement().on('mouseenter', function () {
            // When the slider is entered, cancel the hide timeout activated by leaving the button
            _this.volumeSliderHideTimeout.clear();
            volumeSliderHovered = true;
        });
        volumeSlider.getDomElement().on('mouseleave', function () {
            // When mouse leaves the slider, only hide it if there is no slide operation in progress
            if (volumeSlider.isSeeking()) {
                _this.volumeSliderHideTimeout.clear();
            }
            else {
                _this.volumeSliderHideTimeout.reset();
            }
            volumeSliderHovered = false;
        });
        volumeSlider.onSeeked.subscribe(function () {
            // When a slide operation is done and the slider not hovered (mouse outside slider), hide slider delayed
            if (!volumeSliderHovered) {
                _this.volumeSliderHideTimeout.reset();
            }
        });
    };
    VolumeControlButton.prototype.release = function () {
        _super.prototype.release.call(this);
        this.volumeSliderHideTimeout.clear();
    };
    /**
     * Provides access to the internally managed volume toggle button.
     * @returns {VolumeToggleButton}
     */
    VolumeControlButton.prototype.getVolumeToggleButton = function () {
        return this.volumeToggleButton;
    };
    /**
     * Provides access to the internally managed volume silder.
     * @returns {VolumeSlider}
     */
    VolumeControlButton.prototype.getVolumeSlider = function () {
        return this.volumeSlider;
    };
    return VolumeControlButton;
}(container_1.Container));
exports.VolumeControlButton = VolumeControlButton;

},{"../timeout":112,"./container":24,"./volumeslider":79,"./volumetogglebutton":80}],79:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeSlider = void 0;
var seekbar_1 = require("./seekbar");
var i18n_1 = require("../localization/i18n");
/**
 * A simple volume slider component to adjust the player's volume setting.
 */
var VolumeSlider = /** @class */ (function (_super) {
    __extends(VolumeSlider, _super);
    function VolumeSlider(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.updateVolumeWhileScrubbing = function (sender, args) {
            if (args.scrubbing && _this.volumeTransition) {
                _this.volumeTransition.update(args.position);
            }
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-volumeslider',
            hideIfVolumeControlProhibited: true,
            ariaLabel: i18n_1.i18n.getLocalizer('settings.audio.volume'),
            tabIndex: 0,
        }, _this.config);
        return _this;
    }
    VolumeSlider.prototype.setVolumeAriaSliderValues = function (value) {
        this.getDomElement().attr('aria-valuenow', Math.ceil(value).toString());
        this.getDomElement().attr('aria-valuetext', "".concat(i18n_1.i18n.performLocalization(i18n_1.i18n.getLocalizer('seekBar.value')), ": ").concat(Math.ceil(value)));
    };
    VolumeSlider.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager, false);
        this.setAriaSliderMinMax('0', '100');
        var config = this.getConfig();
        var volumeController = uimanager.getConfig().volumeController;
        if (config.hideIfVolumeControlProhibited && !this.detectVolumeControlAvailability()) {
            this.hide();
            // We can just return from here, because the user will never interact with the control and any configured
            // functionality would only eat resources for no reason.
            return;
        }
        volumeController.onChanged.subscribe(function (_, args) {
            if (args.muted) {
                _this.setVolumeAriaSliderValues(0);
                _this.setPlaybackPosition(0);
            }
            else {
                _this.setPlaybackPosition(args.volume);
                _this.setVolumeAriaSliderValues(args.volume);
            }
        });
        this.onSeek.subscribe(function () {
            _this.volumeTransition = volumeController.startTransition();
        });
        this.onSeekPreview.subscribeRateLimited(this.updateVolumeWhileScrubbing, 50);
        this.onSeeked.subscribe(function (sender, percentage) {
            if (_this.volumeTransition) {
                _this.volumeTransition.finish(percentage);
            }
        });
        // Update the volume slider marker when the player resized, a source is loaded,
        // or the UI is configured. Check the seekbar for a detailed description.
        player.on(player.exports.PlayerEvent.PlayerResized, function () {
            _this.refreshPlaybackPosition();
        });
        uimanager.onConfigured.subscribe(function () {
            _this.refreshPlaybackPosition();
        });
        uimanager.getConfig().events.onUpdated.subscribe(function () {
            _this.refreshPlaybackPosition();
        });
        uimanager.onComponentShow.subscribe(function () {
            _this.refreshPlaybackPosition();
        });
        uimanager.onComponentHide.subscribe(function () {
            _this.refreshPlaybackPosition();
        });
        // Init volume bar
        volumeController.onChangedEvent();
    };
    VolumeSlider.prototype.detectVolumeControlAvailability = function () {
        /*
         * "On iOS devices, the audio level is always under the user’s physical control. The volume property is not
         * settable in JavaScript. Reading the volume property always returns 1."
         * https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html
         */
        // as muted autoplay gets paused as soon as we unmute it, we may not touch the volume of the actual player so we
        // probe a dummy audio element
        var dummyVideoElement = document.createElement('video');
        // try setting the volume to 0.7 and if it's still 1 we are on a volume control restricted device
        dummyVideoElement.volume = 0.7;
        return dummyVideoElement.volume !== 1;
    };
    VolumeSlider.prototype.release = function () {
        _super.prototype.release.call(this);
        this.onSeekPreview.unsubscribe(this.updateVolumeWhileScrubbing);
    };
    return VolumeSlider;
}(seekbar_1.SeekBar));
exports.VolumeSlider = VolumeSlider;

},{"../localization/i18n":91,"./seekbar":42}],80:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles audio muting.
 */
var VolumeToggleButton = /** @class */ (function (_super) {
    __extends(VolumeToggleButton, _super);
    function VolumeToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        var defaultConfig = {
            cssClass: 'ui-volumetogglebutton',
            text: i18n_1.i18n.getLocalizer('settings.audio.mute'),
            onClass: 'muted',
            offClass: 'unmuted',
            ariaLabel: i18n_1.i18n.getLocalizer('settings.audio.mute'),
        };
        _this.config = _this.mergeConfig(config, defaultConfig, _this.config);
        return _this;
    }
    VolumeToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var volumeController = uimanager.getConfig().volumeController;
        volumeController.onChanged.subscribe(function (_, args) {
            if (args.muted) {
                _this.on();
            }
            else {
                _this.off();
            }
            var volumeLevelTens = Math.ceil(args.volume / 10);
            _this.getDomElement().data(_this.prefixCss('volume-level-tens'), String(volumeLevelTens));
        });
        this.onClick.subscribe(function () {
            volumeController.toggleMuted();
        });
        // Startup init
        volumeController.onChangedEvent();
    };
    return VolumeToggleButton;
}(togglebutton_1.ToggleButton));
exports.VolumeToggleButton = VolumeToggleButton;

},{"../localization/i18n":91,"./togglebutton":74}],81:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.VRToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles the video view between normal/mono and VR/stereo.
 */
var VRToggleButton = /** @class */ (function (_super) {
    __extends(VRToggleButton, _super);
    function VRToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-vrtogglebutton',
            text: i18n_1.i18n.getLocalizer('vr'),
        }, _this.config);
        return _this;
    }
    VRToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var isVRConfigured = function () {
            // VR availability cannot be checked through getVRStatus() because it is asynchronously populated and not
            // available at UI initialization. As an alternative, we check the VR settings in the config.
            // TODO use getVRStatus() through isVRStereoAvailable() once the player has been rewritten and the status is
            // available in Ready
            var source = player.getSource();
            return source && Boolean(source.vr);
        };
        var isVRStereoAvailable = function () {
            var source = player.getSource();
            return player.vr && Boolean(source.vr);
        };
        var vrStateHandler = function (ev) {
            if (ev.type === player.exports.PlayerEvent.Warning
                && ev.code !== player.exports.WarningCode.VR_RENDERING_ERROR) {
                return;
            }
            if (isVRConfigured() && isVRStereoAvailable()) {
                _this.show(); // show button in case it is hidden
                if (player.vr && player.vr.getStereo()) {
                    _this.on();
                }
                else {
                    _this.off();
                }
            }
            else {
                _this.hide(); // hide button if no stereo mode available
            }
        };
        var vrButtonVisibilityHandler = function () {
            if (isVRConfigured()) {
                _this.show();
            }
            else {
                _this.hide();
            }
        };
        player.on(player.exports.PlayerEvent.VRStereoChanged, vrStateHandler);
        player.on(player.exports.PlayerEvent.Warning, vrStateHandler);
        // Hide button when VR source goes away
        player.on(player.exports.PlayerEvent.SourceUnloaded, vrButtonVisibilityHandler);
        uimanager.getConfig().events.onUpdated.subscribe(vrButtonVisibilityHandler);
        this.onClick.subscribe(function () {
            if (!isVRStereoAvailable()) {
                if (console) {
                    console.log('No VR content');
                }
            }
            else {
                if (player.vr && player.vr.getStereo()) {
                    player.vr.setStereo(false);
                }
                else {
                    player.vr.setStereo(true);
                }
            }
        });
        // Set startup visibility
        vrButtonVisibilityHandler();
    };
    return VRToggleButton;
}(togglebutton_1.ToggleButton));
exports.VRToggleButton = VRToggleButton;

},{"../localization/i18n":91,"./togglebutton":74}],82:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Watermark = void 0;
var clickoverlay_1 = require("./clickoverlay");
var i18n_1 = require("../localization/i18n");
/**
 * A watermark overlay with a clickable logo.
 */
var Watermark = /** @class */ (function (_super) {
    __extends(Watermark, _super);
    function Watermark(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-watermark',
            url: 'http://bitmovin.com',
            role: 'link',
            text: 'logo',
            ariaLabel: i18n_1.i18n.getLocalizer('watermarkLink'),
        }, _this.config);
        return _this;
    }
    return Watermark;
}(clickoverlay_1.ClickOverlay));
exports.Watermark = Watermark;

},{"../localization/i18n":91,"./clickoverlay":21}],83:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DemoFactory = void 0;
var vrtogglebutton_1 = require("./components/vrtogglebutton");
var settingstogglebutton_1 = require("./components/settingstogglebutton");
var volumeslider_1 = require("./components/volumeslider");
var playbacktimelabel_1 = require("./components/playbacktimelabel");
var airplaytogglebutton_1 = require("./components/airplaytogglebutton");
var errormessageoverlay_1 = require("./components/errormessageoverlay");
var controlbar_1 = require("./components/controlbar");
var casttogglebutton_1 = require("./components/casttogglebutton");
var fullscreentogglebutton_1 = require("./components/fullscreentogglebutton");
var recommendationoverlay_1 = require("./components/recommendationoverlay");
var playbackspeedselectbox_1 = require("./components/playbackspeedselectbox");
var audioqualityselectbox_1 = require("./components/audioqualityselectbox");
var caststatusoverlay_1 = require("./components/caststatusoverlay");
var uicontainer_1 = require("./components/uicontainer");
var watermark_1 = require("./components/watermark");
var subtitleoverlay_1 = require("./components/subtitleoverlay");
var settingspanel_1 = require("./components/settingspanel");
var seekbarlabel_1 = require("./components/seekbarlabel");
var playbacktoggleoverlay_1 = require("./components/playbacktoggleoverlay");
var pictureinpicturetogglebutton_1 = require("./components/pictureinpicturetogglebutton");
var spacer_1 = require("./components/spacer");
var container_1 = require("./components/container");
var volumetogglebutton_1 = require("./components/volumetogglebutton");
var playbacktogglebutton_1 = require("./components/playbacktogglebutton");
var seekbar_1 = require("./components/seekbar");
var videoqualityselectbox_1 = require("./components/videoqualityselectbox");
var uimanager_1 = require("./uimanager");
var titlebar_1 = require("./components/titlebar");
var bufferingoverlay_1 = require("./components/bufferingoverlay");
var subtitlelistbox_1 = require("./components/subtitlelistbox");
var audiotracklistbox_1 = require("./components/audiotracklistbox");
var settingspanelitem_1 = require("./components/settingspanelitem");
var settingspanelpage_1 = require("./components/settingspanelpage");
var uifactory_1 = require("./uifactory");
var DemoFactory;
(function (DemoFactory) {
    function buildDemoWithSeparateAudioSubtitlesButtons(player, config) {
        if (config === void 0) { config = {}; }
        // show smallScreen UI only on mobile/handheld devices
        var smallScreenSwitchWidth = 600;
        return new uimanager_1.UIManager(player, [{
                ui: uifactory_1.UIFactory.modernSmallScreenAdsUI(),
                condition: function (context) {
                    return context.isMobile && context.documentWidth < smallScreenSwitchWidth
                        && context.isAd && context.adRequiresUi;
                },
            }, {
                ui: uifactory_1.UIFactory.modernAdsUI(),
                condition: function (context) {
                    return context.isAd && context.adRequiresUi;
                },
            }, {
                ui: uifactory_1.UIFactory.modernSmallScreenUI(),
                condition: function (context) {
                    return context.isMobile && context.documentWidth < smallScreenSwitchWidth;
                },
            }, {
                ui: modernUIWithSeparateAudioSubtitlesButtons(),
            }], config);
    }
    DemoFactory.buildDemoWithSeparateAudioSubtitlesButtons = buildDemoWithSeparateAudioSubtitlesButtons;
    function modernUIWithSeparateAudioSubtitlesButtons() {
        var subtitleOverlay = new subtitleoverlay_1.SubtitleOverlay();
        var settingsPanel = new settingspanel_1.SettingsPanel({
            components: [
                new settingspanelpage_1.SettingsPanelPage({
                    components: [
                        new settingspanelitem_1.SettingsPanelItem('Video Quality', new videoqualityselectbox_1.VideoQualitySelectBox()),
                        new settingspanelitem_1.SettingsPanelItem('Speed', new playbackspeedselectbox_1.PlaybackSpeedSelectBox()),
                        new settingspanelitem_1.SettingsPanelItem('Audio Quality', new audioqualityselectbox_1.AudioQualitySelectBox()),
                    ],
                }),
            ],
            hidden: true,
        });
        var subtitleListBox = new subtitlelistbox_1.SubtitleListBox();
        var subtitleSettingsPanel = new settingspanel_1.SettingsPanel({
            components: [
                new settingspanelpage_1.SettingsPanelPage({
                    components: [
                        new settingspanelitem_1.SettingsPanelItem(null, subtitleListBox),
                    ],
                }),
            ],
            hidden: true,
        });
        var audioTrackListBox = new audiotracklistbox_1.AudioTrackListBox();
        var audioTrackSettingsPanel = new settingspanel_1.SettingsPanel({
            components: [
                new settingspanelpage_1.SettingsPanelPage({
                    components: [
                        new settingspanelitem_1.SettingsPanelItem(null, audioTrackListBox),
                    ],
                }),
            ],
            hidden: true,
        });
        var controlBar = new controlbar_1.ControlBar({
            components: [
                audioTrackSettingsPanel,
                subtitleSettingsPanel,
                settingsPanel,
                new container_1.Container({
                    components: [
                        new playbacktimelabel_1.PlaybackTimeLabel({ timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),
                        new seekbar_1.SeekBar({ label: new seekbarlabel_1.SeekBarLabel() }),
                        new playbacktimelabel_1.PlaybackTimeLabel({ timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),
                    ],
                    cssClasses: ['controlbar-top'],
                }),
                new container_1.Container({
                    components: [
                        new playbacktogglebutton_1.PlaybackToggleButton(),
                        new volumetogglebutton_1.VolumeToggleButton(),
                        new volumeslider_1.VolumeSlider(),
                        new spacer_1.Spacer(),
                        new pictureinpicturetogglebutton_1.PictureInPictureToggleButton(),
                        new airplaytogglebutton_1.AirPlayToggleButton(),
                        new casttogglebutton_1.CastToggleButton(),
                        new vrtogglebutton_1.VRToggleButton(),
                        new settingstogglebutton_1.SettingsToggleButton({
                            settingsPanel: audioTrackSettingsPanel,
                            cssClass: 'ui-audiotracksettingstogglebutton',
                        }),
                        new settingstogglebutton_1.SettingsToggleButton({
                            settingsPanel: subtitleSettingsPanel,
                            cssClass: 'ui-subtitlesettingstogglebutton',
                        }),
                        new settingstogglebutton_1.SettingsToggleButton({ settingsPanel: settingsPanel }),
                        new fullscreentogglebutton_1.FullscreenToggleButton(),
                    ],
                    cssClasses: ['controlbar-bottom'],
                }),
            ],
        });
        return new uicontainer_1.UIContainer({
            components: [
                subtitleOverlay,
                new bufferingoverlay_1.BufferingOverlay(),
                new playbacktoggleoverlay_1.PlaybackToggleOverlay(),
                new caststatusoverlay_1.CastStatusOverlay(),
                controlBar,
                new titlebar_1.TitleBar(),
                new recommendationoverlay_1.RecommendationOverlay(),
                new watermark_1.Watermark(),
                new errormessageoverlay_1.ErrorMessageOverlay(),
            ],
        });
    }
})(DemoFactory = exports.DemoFactory || (exports.DemoFactory = {}));

},{"./components/airplaytogglebutton":12,"./components/audioqualityselectbox":13,"./components/audiotracklistbox":14,"./components/bufferingoverlay":16,"./components/caststatusoverlay":18,"./components/casttogglebutton":19,"./components/container":24,"./components/controlbar":25,"./components/errormessageoverlay":26,"./components/fullscreentogglebutton":27,"./components/pictureinpicturetogglebutton":35,"./components/playbackspeedselectbox":36,"./components/playbacktimelabel":37,"./components/playbacktogglebutton":38,"./components/playbacktoggleoverlay":39,"./components/recommendationoverlay":40,"./components/seekbar":42,"./components/seekbarlabel":45,"./components/settingspanel":47,"./components/settingspanelitem":48,"./components/settingspanelpage":49,"./components/settingstogglebutton":53,"./components/spacer":54,"./components/subtitlelistbox":55,"./components/subtitleoverlay":56,"./components/titlebar":73,"./components/uicontainer":76,"./components/videoqualityselectbox":77,"./components/volumeslider":79,"./components/volumetogglebutton":80,"./components/vrtogglebutton":81,"./components/watermark":82,"./uifactory":113,"./uimanager":114}],84:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DOM = void 0;
/**
 * Simple DOM manipulation and DOM element event handling modeled after jQuery (as replacement for jQuery).
 *
 * Like jQuery, DOM operates on single elements and lists of elements. For example: creating an element returns a DOM
 * instance with a single element, selecting elements returns a DOM instance with zero, one, or many elements. Similar
 * to jQuery, setters usually affect all elements, while getters operate on only the first element.
 * Also similar to jQuery, most methods (except getters) return the DOM instance facilitating easy chaining of method
 * calls.
 *
 * Built with the help of: http://youmightnotneedjquery.com/
 */
var DOM = /** @class */ (function () {
    function DOM(something, attributes) {
        this.document = document; // Set the global document to the local document field
        if (something instanceof Array) {
            if (something.length > 0 && something[0] instanceof HTMLElement) {
                var elements = something;
                this.elements = elements;
            }
        }
        else if (something instanceof HTMLElement) {
            var element = something;
            this.elements = [element];
        }
        else if (something instanceof Document) {
            // When a document is passed in, we do not do anything with it, but by setting this.elements to null
            // we give the event handling method a means to detect if the events should be registered on the document
            // instead of elements.
            this.elements = null;
        }
        else if (attributes) {
            var tagName = something;
            var element = document.createElement(tagName);
            for (var attributeName in attributes) {
                var attributeValue = attributes[attributeName];
                if (attributeValue != null) {
                    element.setAttribute(attributeName, attributeValue);
                }
            }
            this.elements = [element];
        }
        else {
            var selector = something;
            this.elements = this.findChildElements(selector);
        }
    }
    Object.defineProperty(DOM.prototype, "length", {
        /**
         * Gets the number of elements that this DOM instance currently holds.
         * @returns {number} the number of elements
         */
        get: function () {
            return this.elements ? this.elements.length : 0;
        },
        enumerable: false,
        configurable: true
    });
    DOM.prototype.get = function (index) {
        if (index === undefined) {
            return this.elements;
        }
        else if (!this.elements || index >= this.elements.length || index < -this.elements.length) {
            return undefined;
        }
        else if (index < 0) {
            return this.elements[this.elements.length - index];
        }
        else {
            return this.elements[index];
        }
    };
    /**
     * A shortcut method for iterating all elements. Shorts this.elements.forEach(...) to this.forEach(...).
     * @param handler the handler to execute an operation on an element
     */
    DOM.prototype.forEach = function (handler) {
        if (!this.elements) {
            return;
        }
        this.elements.forEach(function (element) {
            handler(element);
        });
    };
    DOM.prototype.findChildElementsOfElement = function (element, selector) {
        var childElements = element.querySelectorAll(selector);
        // Convert NodeList to Array
        // https://toddmotto.com/a-comprehensive-dive-into-nodelists-arrays-converting-nodelists-and-understanding-the-dom/
        return [].slice.call(childElements);
    };
    DOM.prototype.findChildElements = function (selector) {
        var _this = this;
        var allChildElements = [];
        if (this.elements) {
            this.forEach(function (element) {
                allChildElements = allChildElements.concat(_this.findChildElementsOfElement(element, selector));
            });
        }
        else {
            return this.findChildElementsOfElement(document, selector);
        }
        return allChildElements;
    };
    /**
     * Finds all child elements of all elements matching the supplied selector.
     * @param selector the selector to match with child elements
     * @returns {DOM} a new DOM instance representing all matched children
     */
    DOM.prototype.find = function (selector) {
        var allChildElements = this.findChildElements(selector);
        return new DOM(allChildElements);
    };
    /**
     * Focuses to the first input element
     */
    DOM.prototype.focusToFirstInput = function () {
        var inputElements = this.findChildElements('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
        if (inputElements.length > 0) {
            inputElements[0].focus();
        }
    };
    /**
     * Focuses to the first input element
     */
    DOM.prototype.scrollTo = function (x, y) {
        this.elements[0].scrollTo(x, y);
    };
    DOM.prototype.html = function (content) {
        if (arguments.length > 0) {
            return this.setHtml(content);
        }
        else {
            return this.getHtml();
        }
    };
    DOM.prototype.getHtml = function () {
        return this.elements[0].innerHTML;
    };
    DOM.prototype.setHtml = function (content) {
        if (content === undefined || content == null) {
            // Set to empty string to avoid innerHTML getting set to 'undefined' (all browsers) or 'null' (IE9)
            content = '';
        }
        this.forEach(function (element) {
            element.innerHTML = content;
        });
        return this;
    };
    /**
     * Clears the inner HTML of all elements (deletes all children).
     * @returns {DOM}
     */
    DOM.prototype.empty = function () {
        this.forEach(function (element) {
            element.innerHTML = '';
        });
        return this;
    };
    /**
     * Returns the current value of the first form element, e.g. the selected value of a select box or the text if an
     * input field.
     * @returns {string} the value of a form element
     */
    DOM.prototype.val = function () {
        var element = this.elements[0];
        if (element instanceof HTMLSelectElement || element instanceof HTMLInputElement) {
            return element.value;
        }
        else {
            // TODO add support for missing form elements
            throw new Error("val() not supported for ".concat(typeof element));
        }
    };
    DOM.prototype.attr = function (attribute, value) {
        if (arguments.length > 1) {
            return this.setAttr(attribute, value);
        }
        else {
            return this.getAttr(attribute);
        }
    };
    /**
     * Removes the attribute of the element.
     * @param attribute
     */
    DOM.prototype.removeAttr = function (attribute) {
        this.forEach(function (element) {
            element.removeAttribute(attribute);
        });
    };
    DOM.prototype.getAttr = function (attribute) {
        return this.elements[0].getAttribute(attribute);
    };
    DOM.prototype.setAttr = function (attribute, value) {
        this.forEach(function (element) {
            element.setAttribute(attribute, value);
        });
        return this;
    };
    DOM.prototype.data = function (dataAttribute, value) {
        if (arguments.length > 1) {
            return this.setData(dataAttribute, value);
        }
        else {
            return this.getData(dataAttribute);
        }
    };
    DOM.prototype.getData = function (dataAttribute) {
        return this.elements[0].getAttribute('data-' + dataAttribute);
    };
    DOM.prototype.setData = function (dataAttribute, value) {
        this.forEach(function (element) {
            element.setAttribute('data-' + dataAttribute, value);
        });
        return this;
    };
    /**
     * Appends one or more DOM elements as children to all elements.
     * @param childElements the chrild elements to append
     * @returns {DOM}
     */
    DOM.prototype.append = function () {
        var childElements = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            childElements[_i] = arguments[_i];
        }
        this.forEach(function (element) {
            childElements.forEach(function (childElement) {
                childElement.elements.forEach(function (_, index) {
                    element.appendChild(childElement.elements[index]);
                });
            });
        });
        return this;
    };
    /**
     * Removes all elements from the DOM.
     */
    DOM.prototype.remove = function () {
        this.forEach(function (element) {
            var parent = element.parentNode;
            if (parent) {
                parent.removeChild(element);
            }
        });
    };
    /**
     * Returns the offset of the first element from the document's top left corner.
     * @returns {Offset}
     */
    DOM.prototype.offset = function () {
        var element = this.elements[0];
        var elementRect = element.getBoundingClientRect();
        var htmlRect = document.body.parentElement.getBoundingClientRect();
        // Virtual viewport scroll handling (e.g. pinch zoomed viewports in mobile browsers or desktop Chrome/Edge)
        // 'normal' zooms and virtual viewport zooms (aka layout viewport) result in different
        // element.getBoundingClientRect() results:
        //  - with normal scrolls, the clientRect decreases with an increase in scroll(Top|Left)/page(X|Y)Offset
        //  - with pinch zoom scrolls, the clientRect stays the same while scroll/pageOffset changes
        // This means, that the combination of clientRect + scroll/pageOffset does not work to calculate the offset
        // from the document's upper left origin when pinch zoom is used.
        // To work around this issue, we do not use scroll/pageOffset but get the clientRect of the html element and
        // subtract it from the element's rect, which always results in the offset from the document origin.
        // NOTE: the current way of offset calculation was implemented specifically to track event positions on the
        // seek bar, and it might break compatibility with jQuery's offset() method. If this ever turns out to be a
        // problem, this method should be reverted to the old version and the offset calculation moved to the seek bar.
        return {
            top: elementRect.top - htmlRect.top,
            left: elementRect.left - htmlRect.left,
        };
    };
    /**
     * Returns the width of the first element.
     * @returns {number} the width of the first element
     */
    DOM.prototype.width = function () {
        // TODO check if this is the same as jQuery's width() (probably not)
        return this.elements[0].offsetWidth;
    };
    /**
     * Returns the height of the first element.
     * @returns {number} the height of the first element
     */
    DOM.prototype.height = function () {
        // TODO check if this is the same as jQuery's height() (probably not)
        return this.elements[0].offsetHeight;
    };
    /**
     * Returns the size of the first element.
     * @return {Size} the size of the first element
     */
    DOM.prototype.size = function () {
        return { width: this.width(), height: this.height() };
    };
    /**
     * Attaches an event handler to one or more events on all elements.
     * @param eventName the event name (or multiple names separated by space) to listen to
     * @param eventHandler the event handler to call when the event fires
     * @returns {DOM}
     */
    DOM.prototype.on = function (eventName, eventHandler) {
        var _this = this;
        var events = eventName.split(' ');
        events.forEach(function (event) {
            if (_this.elements == null) {
                _this.document.addEventListener(event, eventHandler);
            }
            else {
                _this.forEach(function (element) {
                    element.addEventListener(event, eventHandler);
                });
            }
        });
        return this;
    };
    /**
     * Removes an event handler from one or more events on all elements.
     * @param eventName the event name (or multiple names separated by space) to remove the handler from
     * @param eventHandler the event handler to remove
     * @returns {DOM}
     */
    DOM.prototype.off = function (eventName, eventHandler) {
        var _this = this;
        var events = eventName.split(' ');
        events.forEach(function (event) {
            if (_this.elements == null) {
                _this.document.removeEventListener(event, eventHandler);
            }
            else {
                _this.forEach(function (element) {
                    element.removeEventListener(event, eventHandler);
                });
            }
        });
        return this;
    };
    /**
     * Adds the specified class(es) to all elements.
     * @param className the class(es) to add, multiple classes separated by space
     * @returns {DOM}
     */
    DOM.prototype.addClass = function (className) {
        this.forEach(function (element) {
            var _a;
            if (element.classList) {
                var classNames = className.split(' ')
                    .filter(function (className) { return className.length > 0; });
                if (classNames.length > 0) {
                    (_a = element.classList).add.apply(_a, classNames);
                }
            }
            else {
                element.className += ' ' + className;
            }
        });
        return this;
    };
    /**
     * Removed the specified class(es) from all elements.
     * @param className the class(es) to remove, multiple classes separated by space
     * @returns {DOM}
     */
    DOM.prototype.removeClass = function (className) {
        this.forEach(function (element) {
            var _a;
            if (element.classList) {
                var classNames = className.split(' ')
                    .filter(function (className) { return className.length > 0; });
                if (classNames.length > 0) {
                    (_a = element.classList).remove.apply(_a, classNames);
                }
            }
            else {
                element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
            }
        });
        return this;
    };
    /**
     * Checks if any of the elements has the specified class.
     * @param className the class name to check
     * @returns {boolean} true if one of the elements has the class attached, else if no element has it attached
     */
    DOM.prototype.hasClass = function (className) {
        var hasClass = false;
        this.forEach(function (element) {
            if (element.classList) {
                if (element.classList.contains(className)) {
                    // Since we are inside a handler, we can't just 'return true'. Instead, we save it to a variable
                    // and return it at the end of the function body.
                    hasClass = true;
                }
            }
            else {
                if (new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className)) {
                    // See comment above
                    hasClass = true;
                }
            }
        });
        return hasClass;
    };
    DOM.prototype.css = function (propertyNameOrCollection, value) {
        if (typeof propertyNameOrCollection === 'string') {
            var propertyName = propertyNameOrCollection;
            if (arguments.length === 2) {
                return this.setCss(propertyName, value);
            }
            else {
                return this.getCss(propertyName);
            }
        }
        else {
            var propertyValueCollection = propertyNameOrCollection;
            return this.setCssCollection(propertyValueCollection);
        }
    };
    /**
     * Removes an inline CSS property if it exists
     * @param propertyName name of the property to remove
     * @param elementIndex index of the element whose CSS property should get removed
     */
    DOM.prototype.removeCss = function (propertyName, elementIndex) {
        if (elementIndex === void 0) { elementIndex = 0; }
        return this.elements[elementIndex].style.removeProperty(propertyName);
    };
    DOM.prototype.getCss = function (propertyName) {
        return getComputedStyle(this.elements[0])[propertyName];
    };
    DOM.prototype.setCss = function (propertyName, value) {
        this.forEach(function (element) {
            // <any> cast to resolve TS7015: http://stackoverflow.com/a/36627114/370252
            element.style[propertyName] = value;
        });
        return this;
    };
    DOM.prototype.setCssCollection = function (ruleValueCollection) {
        this.forEach(function (element) {
            // http://stackoverflow.com/a/34490573/370252
            Object.assign(element.style, ruleValueCollection);
        });
        return this;
    };
    return DOM;
}());
exports.DOM = DOM;

},{}],85:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorUtils = void 0;
var ErrorUtils;
(function (ErrorUtils) {
    ErrorUtils.defaultErrorMessages = {
        1000: 'Error is unknown',
        1001: 'The player API is not available after a call to PlayerAPI.destroy.',
        1100: 'General setup error',
        1101: 'There was an error when inserting the HTML video element',
        1102: 'No configuration was provided',
        1103: 'The license is not valid',
        1104: 'The the domain-locked player is not authorized to playback on this domain',
        1105: 'The domain is not allowlisted',
        1106: 'The license server URL is invalid',
        1107: 'The impression server URL is invalid',
        1108: 'Could not initialize a rendering engine',
        1109: 'The used flash version does not support playback',
        1110: 'Native Flash is not authorized by a valid Adobe token',
        1111: 'Flash doesn\'t have sufficient resources',
        1112: 'Flash container API not available',
        1113: 'Protocol not supported. This site has been loaded using "file" protocol, but unfortunately this is not supported. Please load the page using a web server (using http or https)',
        1200: 'General source error',
        1201: 'No valid source was provided',
        1202: 'The downloaded manifest is invalid',
        1203: 'There was no technology detected to playback the provided source',
        1204: 'The stream type is not supported',
        1205: 'The forced technology is not supported',
        1206: 'No stream found for supported technologies.',
        1207: 'The downloaded segment is empty',
        1208: 'The manifest could not be loaded',
        1209: 'Progressive stream type not supported or the stream has an error',
        1210: 'HLS stream has an error',
        1211: 'The encryption method is not supported',
        1300: 'General playback error',
        1301: 'Video decoder or demuxer had an error with the content',
        1302: 'General error if Flash renderer has an error',
        1303: 'Flash doesn\'t have sufficient resources',
        1304: 'The transmuxer could not be initialized',
        1400: 'Network error while downloading',
        1401: 'The manifest download timed out',
        1402: 'The segment download timed out',
        1403: 'The progressive stream download timed out',
        1404: 'The Certificate could not be loaded',
        2000: 'General DRM error',
        2001: 'Required DRM configuration is missing',
        2002: 'The licensing server URL is missing',
        2003: 'License request failed',
        2004: 'Key or KeyId is missing',
        2005: 'Key size is not supported',
        2006: 'Unable to instantiate a key system supporting the required combinations',
        2007: 'Unable to create or initialize key session',
        2008: 'The MediaKey object could not be created/initialized',
        2009: 'Key error',
        2010: 'The key system is not supported',
        2011: 'The certificate is not valid',
        2012: 'Invalid header key/value pair for PlayReady license request',
        2013: 'Content cannot be played back because the output is restricted on this machine',
        2014: 'DRM error for the Flash renderer',
        2100: 'General VR error',
        2101: 'Player technology not compatible with VR playback',
        3000: 'General module error',
        3001: 'The definition of the module is invalid (e.g. incomplete).',
        3002: 'The module definition specifies dependencies but the module is not provided via a function for deferred loading.',
        3003: 'A module cannot be loaded because it has not been added to the player core.',
        3004: 'A module cannot be loaded because one or more dependencies are missing.',
        3100: 'An Advertising module error has occurred. Refer to the attached AdvertisingError.',
    };
    ErrorUtils.defaultMobileV3ErrorMessageTranslator = function (error) {
        return error.message;
    };
    ErrorUtils.defaultWebErrorMessageTranslator = function (error) {
        var errorMessage = ErrorUtils.defaultErrorMessages[error.code];
        if (errorMessage) {
            // Use the error message text if there is one
            return "".concat(errorMessage, "\n(").concat(error.name, ")"); // default error message style
        }
        else {
            // Fallback to error code/name if no message is defined
            return "".concat(error.code, " ").concat(error.name);
        }
    };
})(ErrorUtils = exports.ErrorUtils || (exports.ErrorUtils = {}));

},{}],86:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventDispatcher = void 0;
var arrayutils_1 = require("./arrayutils");
var timeout_1 = require("./timeout");
/**
 * Event dispatcher to subscribe and trigger events. Each event should have its own dispatcher.
 */
var EventDispatcher = /** @class */ (function () {
    function EventDispatcher() {
        this.listeners = [];
    }
    /**
     * {@inheritDoc}
     */
    EventDispatcher.prototype.subscribe = function (listener) {
        this.listeners.push(new EventListenerWrapper(listener));
    };
    /**
     * {@inheritDoc}
     */
    EventDispatcher.prototype.subscribeOnce = function (listener) {
        this.listeners.push(new EventListenerWrapper(listener, true));
    };
    /**
     * {@inheritDoc}
     */
    EventDispatcher.prototype.subscribeRateLimited = function (listener, rateMs) {
        this.listeners.push(new RateLimitedEventListenerWrapper(listener, rateMs));
    };
    /**
     * {@inheritDoc}
     */
    EventDispatcher.prototype.unsubscribe = function (listener) {
        // Iterate through listeners, compare with parameter, and remove if found
        // NOTE: In case we ever remove all matching listeners instead of just the first, we need to reverse-iterate here
        for (var i = 0; i < this.listeners.length; i++) {
            var subscribedListener = this.listeners[i];
            if (subscribedListener.listener === listener) {
                subscribedListener.clear();
                arrayutils_1.ArrayUtils.remove(this.listeners, subscribedListener);
                return true;
            }
        }
        return false;
    };
    /**
     * Removes all listeners from this dispatcher.
     */
    EventDispatcher.prototype.unsubscribeAll = function () {
        // In case of RateLimitedEventListenerWrapper we need to make sure that the timeout callback won't be called
        for (var _i = 0, _a = this.listeners; _i < _a.length; _i++) {
            var listener = _a[_i];
            listener.clear();
        }
        this.listeners = [];
    };
    /**
     * Dispatches an event to all subscribed listeners.
     * @param sender the source of the event
     * @param args the arguments for the event
     */
    EventDispatcher.prototype.dispatch = function (sender, args) {
        if (args === void 0) { args = null; }
        var listenersToRemove = [];
        // Call every listener
        // We iterate over a copy of the array of listeners to avoid the case where events are not fired on listeners when
        // listeners are unsubscribed from within the event handlers during a dispatch (because the indices change and
        // listeners are shifted within the array).
        // This means that listener x+1 will still be called if unsubscribed from within the handler of listener x, as well
        // as listener y+1 will not be called when subscribed from within the handler of listener y.
        // Array.slice(0) is the fastest array copy method according to: https://stackoverflow.com/a/21514254/370252
        var listeners = this.listeners.slice(0);
        for (var _i = 0, listeners_1 = listeners; _i < listeners_1.length; _i++) {
            var listener = listeners_1[_i];
            listener.fire(sender, args);
            if (listener.isOnce()) {
                listenersToRemove.push(listener);
            }
        }
        // Remove one-time listener
        for (var _a = 0, listenersToRemove_1 = listenersToRemove; _a < listenersToRemove_1.length; _a++) {
            var listenerToRemove = listenersToRemove_1[_a];
            arrayutils_1.ArrayUtils.remove(this.listeners, listenerToRemove);
        }
    };
    /**
     * Returns the event that this dispatcher manages and on which listeners can subscribe and unsubscribe event handlers.
     * @returns {Event}
     */
    EventDispatcher.prototype.getEvent = function () {
        // For now, just cast the event dispatcher to the event interface. At some point in the future when the
        // codebase grows, it might make sense to split the dispatcher into separate dispatcher and event classes.
        return this;
    };
    return EventDispatcher;
}());
exports.EventDispatcher = EventDispatcher;
/**
 * A basic event listener wrapper to manage listeners within the {@link EventDispatcher}. This is a 'private' class
 * for internal dispatcher use and it is therefore not exported.
 */
var EventListenerWrapper = /** @class */ (function () {
    function EventListenerWrapper(listener, once) {
        if (once === void 0) { once = false; }
        this.eventListener = listener;
        this.once = once;
    }
    Object.defineProperty(EventListenerWrapper.prototype, "listener", {
        /**
         * Returns the wrapped event listener.
         * @returns {EventListener<Sender, Args>}
         */
        get: function () {
            return this.eventListener;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Fires the wrapped event listener with the given arguments.
     * @param sender
     * @param args
     */
    EventListenerWrapper.prototype.fire = function (sender, args) {
        this.eventListener(sender, args);
    };
    /**
     * Checks if this listener is scheduled to be called only once.
     * @returns {boolean} once if true
     */
    EventListenerWrapper.prototype.isOnce = function () {
        return this.once;
    };
    EventListenerWrapper.prototype.clear = function () {
    };
    return EventListenerWrapper;
}());
/**
 * Extends the basic {@link EventListenerWrapper} with rate-limiting functionality.
 */
var RateLimitedEventListenerWrapper = /** @class */ (function (_super) {
    __extends(RateLimitedEventListenerWrapper, _super);
    function RateLimitedEventListenerWrapper(listener, rateMs) {
        var _this = _super.call(this, listener) || this;
        _this.rateMs = rateMs;
        // starting limiting the events to the given value
        var startRateLimiting = function () {
            _this.rateLimitTimout.start();
        };
        // timout for limiting the events
        _this.rateLimitTimout = new timeout_1.Timeout(_this.rateMs, function () {
            if (_this.lastSeenEvent) {
                _this.fireSuper(_this.lastSeenEvent.sender, _this.lastSeenEvent.args);
                startRateLimiting(); // start rateLimiting again to keep rate limit active even after firing the last seen event
                _this.lastSeenEvent = null;
            }
        });
        // In case the events stopping during the rateLimiting we need to track the last seen one and delegate after the
        // rate limiting is finished. This prevents missing the last update due to the rate limit.
        _this.rateLimitingEventListener = function (sender, args) {
            // only fire events if the rateLimiting is not running
            if (_this.shouldFireEvent()) {
                _this.fireSuper(sender, args);
                startRateLimiting();
                return;
            }
            _this.lastSeenEvent = {
                sender: sender,
                args: args,
            };
        };
        return _this;
    }
    RateLimitedEventListenerWrapper.prototype.shouldFireEvent = function () {
        return !this.rateLimitTimout.isActive();
    };
    RateLimitedEventListenerWrapper.prototype.fireSuper = function (sender, args) {
        // Fire the actual external event listener
        _super.prototype.fire.call(this, sender, args);
    };
    RateLimitedEventListenerWrapper.prototype.fire = function (sender, args) {
        // Fire the internal rate-limiting listener instead of the external event listener
        this.rateLimitingEventListener(sender, args);
    };
    RateLimitedEventListenerWrapper.prototype.clear = function () {
        _super.prototype.clear.call(this);
        this.rateLimitTimout.clear();
    };
    return RateLimitedEventListenerWrapper;
}(EventListenerWrapper));

},{"./arrayutils":6,"./timeout":112}],87:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FocusVisibilityTracker = void 0;
var FocusVisibleCssClassName = 'bmpui-focus-visible';
var FocusVisibilityTracker = /** @class */ (function () {
    function FocusVisibilityTracker(bitmovinUiPrefix) {
        var _this = this;
        this.bitmovinUiPrefix = bitmovinUiPrefix;
        this.lastInteractionWasKeyboard = true;
        this.onKeyDown = function (e) {
            if (e.metaKey || e.altKey || e.ctrlKey) {
                return;
            }
            _this.lastInteractionWasKeyboard = true;
        };
        this.onMouseOrPointerOrTouch = function () { return (_this.lastInteractionWasKeyboard = false); };
        this.onFocus = function (_a) {
            var element = _a.target;
            if (_this.lastInteractionWasKeyboard &&
                isHtmlElement(element) &&
                isBitmovinUi(element, _this.bitmovinUiPrefix) &&
                !element.classList.contains(FocusVisibleCssClassName)) {
                element.classList.add(FocusVisibleCssClassName);
            }
        };
        this.onBlur = function (_a) {
            var element = _a.target;
            if (isHtmlElement(element)) {
                element.classList.remove(FocusVisibleCssClassName);
            }
        };
        this.eventHandlerMap = {
            mousedown: this.onMouseOrPointerOrTouch,
            pointerdown: this.onMouseOrPointerOrTouch,
            touchstart: this.onMouseOrPointerOrTouch,
            keydown: this.onKeyDown,
            focus: this.onFocus,
            blur: this.onBlur,
        };
        this.registerEventListeners();
    }
    FocusVisibilityTracker.prototype.registerEventListeners = function () {
        for (var event_1 in this.eventHandlerMap) {
            document.addEventListener(event_1, this.eventHandlerMap[event_1], true);
        }
    };
    FocusVisibilityTracker.prototype.unregisterEventListeners = function () {
        for (var event_2 in this.eventHandlerMap) {
            document.removeEventListener(event_2, this.eventHandlerMap[event_2], true);
        }
    };
    FocusVisibilityTracker.prototype.release = function () {
        this.unregisterEventListeners();
    };
    return FocusVisibilityTracker;
}());
exports.FocusVisibilityTracker = FocusVisibilityTracker;
function isBitmovinUi(element, bitmovinUiPrefix) {
    return element.id.indexOf(bitmovinUiPrefix) === 0;
}
function isHtmlElement(element) {
    return (element instanceof HTMLElement && element.classList instanceof DOMTokenList);
}

},{}],88:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupPlaybackSuspensionReason = void 0;
/**
 * The Group Playback API offers control over synchronized playback of a group of clients, e.g. for Apple SharePlay
 * sessions.

 * Note: The API currently only covers the immediate needs of the iOS SDK in combination with our UI which is regarding
 * temporarily suspending synchronization of the player from the group. But it is open to be extended as needed in the
 * future.
 */
/**
 * Reason for suspending the synchronization with the group.
 */
var GroupPlaybackSuspensionReason;
(function (GroupPlaybackSuspensionReason) {
    GroupPlaybackSuspensionReason["UserIsScrubbing"] = "userIsScrubbing";
})(GroupPlaybackSuspensionReason = exports.GroupPlaybackSuspensionReason || (exports.GroupPlaybackSuspensionReason = {}));

},{}],89:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Guid = void 0;
var Guid;
(function (Guid) {
    var guid = 1;
    function next() {
        return guid++;
    }
    Guid.next = next;
})(Guid = exports.Guid || (exports.Guid = {}));

},{}],90:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageLoader = void 0;
var dom_1 = require("./dom");
/**
 * Tracks the loading state of images.
 */
var ImageLoader = /** @class */ (function () {
    function ImageLoader() {
        this.state = {};
    }
    /**
     * Loads an image and call the callback once the image is loaded. If the image is already loaded, the callback
     * is called immediately, else it is called once loading has finished. Calling this method multiple times for the
     * same image while it is loading calls only let callback passed into the last call.
     * @param url The url to the image to load
     * @param loadedCallback The callback that is called when the image is loaded
     */
    ImageLoader.prototype.load = function (url, loadedCallback) {
        var _this = this;
        if (!this.state[url]) {
            // When the image was never attempted to be loaded before, we create a state and store it in the state map
            // for later use when the same image is requested to be loaded again.
            var state_1 = {
                url: url,
                image: new dom_1.DOM('img', {}),
                loadedCallback: loadedCallback,
                loaded: false,
                width: 0,
                height: 0,
            };
            this.state[url] = state_1;
            // Listen to the load event, update the state and call the callback once the image is loaded
            state_1.image.on('load', function (e) {
                state_1.loaded = true;
                state_1.width = state_1.image.get(0).width;
                state_1.height = state_1.image.get(0).height;
                _this.callLoadedCallback(state_1);
            });
            // Set the image URL to start the loading
            state_1.image.attr('src', state_1.url);
        }
        else {
            // We have a state for the requested image, so it is either already loaded or currently loading
            var state = this.state[url];
            // We overwrite the callback to make sure that only the callback of the latest call gets executed.
            // Earlier callbacks become invalid once a new load call arrives, and they are not called as long as the image
            // is not loaded.
            state.loadedCallback = loadedCallback;
            // When the image is already loaded, we directly execute the callback instead of waiting for the load event
            if (state.loaded) {
                this.callLoadedCallback(state);
            }
        }
    };
    ImageLoader.prototype.callLoadedCallback = function (state) {
        state.loadedCallback(state.url, state.width, state.height);
    };
    return ImageLoader;
}());
exports.ImageLoader = ImageLoader;

},{"./dom":84}],91:[function(require,module,exports){
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.i18n = exports.defaultVocabularies = void 0;
var de_json_1 = __importDefault(require("./languages/de.json"));
var en_json_1 = __importDefault(require("./languages/en.json"));
var es_json_1 = __importDefault(require("./languages/es.json"));
exports.defaultVocabularies = {
    'en': en_json_1.default,
    'de': de_json_1.default,
    'es': es_json_1.default,
};
var defaultLocalizationConfig = {
    language: 'en',
    vocabularies: exports.defaultVocabularies,
};
var I18n = /** @class */ (function () {
    function I18n(config) {
        this.setConfig(config);
    }
    I18n.prototype.setConfig = function (config) {
        var mergedConfig = __assign(__assign({}, defaultLocalizationConfig), config);
        var detectBrowserLanguage = mergedConfig.language === 'auto';
        var vocabularies = this.mergeVocabulariesWithDefaultVocabularies(mergedConfig.vocabularies);
        this.initializeLanguage(mergedConfig.language, detectBrowserLanguage, vocabularies);
        this.initializeVocabulary(vocabularies);
    };
    I18n.containsLanguage = function (vocabularies, language) {
        return vocabularies.hasOwnProperty(language);
    };
    I18n.prototype.mergeVocabulariesWithDefaultVocabularies = function (vocabularies) {
        if (vocabularies === void 0) { vocabularies = {}; }
        var rawVocabularies = __assign(__assign({}, exports.defaultVocabularies), vocabularies);
        return Object.keys(rawVocabularies).reduce(function (mergedVocabularies, language) {
            var _a;
            var vocabulary = rawVocabularies[language];
            if (I18n.containsLanguage(exports.defaultVocabularies, language) && I18n.containsLanguage(vocabularies, language)) {
                vocabulary = __assign(__assign({}, exports.defaultVocabularies[language]), vocabularies[language]);
            }
            return __assign(__assign({}, mergedVocabularies), (_a = {}, _a[language] = vocabulary, _a));
        }, {});
    };
    I18n.prototype.initializeLanguage = function (language, browserLanguageDetectionEnabled, vocabularies) {
        if (browserLanguageDetectionEnabled) {
            var userLanguage = window.navigator.language;
            if (I18n.containsLanguage(vocabularies, userLanguage)) {
                this.language = userLanguage;
                return;
            }
            var shortenedUserLanguage = userLanguage.slice(0, 2);
            if (I18n.containsLanguage(vocabularies, shortenedUserLanguage)) {
                this.language = shortenedUserLanguage;
                return;
            }
        }
        this.language = language;
    };
    I18n.prototype.initializeVocabulary = function (vocabularies) {
        this.vocabulary = ['en', this.language]
            .reduce(function (vocab, lang) { return (__assign(__assign({}, vocab), (vocabularies[lang] || {}))); }, {});
    };
    I18n.prototype.replaceVariableWithPlaceholderIfExists = function (text, config) {
        var matches = text.match(new RegExp('{[a-zA-Z0-9]+}', 'g'));
        if (matches.length === 0) {
            return text;
        }
        return matches
            .map(function (m) { return ({ match: m, key: m.slice(1, -1) }); })
            .reduce(function (str, _a) {
            var key = _a.key, match = _a.match;
            return config.hasOwnProperty(key) ? str.replace(match, config[key]) : str;
        }, text);
    };
    I18n.prototype.getLocalizer = function (key, config) {
        var _this = this;
        return function () {
            if (key == null) { // because sometimes we call toDomElement() without configuring the component or setting text...
                return undefined;
            }
            var vocabularyString = _this.vocabulary[key];
            if (vocabularyString == null) {
                vocabularyString = key;
            }
            if (config != null) {
                vocabularyString = _this.replaceVariableWithPlaceholderIfExists(vocabularyString, config);
            }
            return vocabularyString;
        };
    };
    I18n.prototype.performLocalization = function (text) {
        return typeof text === 'function' ? text() : text;
    };
    return I18n;
}());
exports.i18n = new I18n(defaultLocalizationConfig);

},{"./languages/de.json":92,"./languages/en.json":93,"./languages/es.json":94}],92:[function(require,module,exports){
module.exports={
  "settings.video.quality": "Videoqualität",
  "settings.audio.quality": "Audioqualität",
  "settings.audio.track": "Audiospur",
  "speed": "Geschwindigkeit",
  "play": "Abspielen",
  "pause": "Pause",
  "playPause": "Abspielen/Pause",
  "open": "öffnen",
  "close": "Schließen",
  "settings.audio.mute": "Stummschaltung",
  "settings.audio.volume": "Lautstärke",
  "pictureInPicture": "Bild im Bild",
  "appleAirplay": "Apple AirPlay",
  "googleCast": "Google Cast",
  "vr": "VR",
  "settings": "Einstellungen",
  "fullscreen": "Vollbild",
  "off": "aus",
  "settings.subtitles": "Untertitel",
  "settings.subtitles.font.size": "Größe",
  "settings.subtitles.font.family": "Schriftart",
  "settings.subtitles.font.color": "Farbe",
  "settings.subtitles.font.opacity": "Deckkraft",
  "settings.subtitles.characterEdge": "Ränder",
  "settings.subtitles.background.color": "Hintergrundfarbe",
  "settings.subtitles.background.opacity": "Hintergrunddeckkraft",
  "settings.subtitles.window.color": "Hintergrundfarbe",
  "settings.subtitles.window.opacity": "Hintergrunddeckkraft",
  "settings.time.hours": "Stunden",
  "settings.time.minutes": "Minuten",
  "settings.time.seconds": "Sekunden",
  "back": "Zurück",
  "reset": "Zurücksetzen",
  "replay": "Wiederholen",
  "ads.remainingTime": "Diese Anzeige endet in {remainingTime} Sekunden",
  "default": "standard",
  "colors.white": "weiß",
  "colors.black": "schwarz",
  "colors.red": "rot",
  "colors.green": "grün",
  "colors.blue": "blau",
  "colors.yellow": "gelb",
  "subtitle.example": "Beispiel Untertitel",
  "subtitle.select": "Untertitel auswählen",
  "playingOn": "Spielt auf <strong>{castDeviceName}</strong>",
  "connectingTo": "Verbindung mit <strong>{castDeviceName}</strong> wird hergestellt...",
  "watermarkLink": "Link zum Homepage",
  "controlBar": "Videoplayer Kontrollen",
  "player": "Video player",
  "seekBar": "Video-Timeline",
  "seekBar.value": "Wert",
  "seekBar.timeshift": "Timeshift",
  "seekBar.durationText": "aus"
}

},{}],93:[function(require,module,exports){
module.exports={
  "settings.video.quality": "Video Quality",
  "settings.audio.quality": "Audio Quality",
  "settings.audio.track": "Audio Track",
  "settings.audio.mute" : "Mute",
  "settings.audio.volume" : "Volume",
  "settings.subtitles.window.color" : "Window color",
  "settings.subtitles.window.opacity" : "Window opacity",
  "settings.subtitles" : "Subtitles",
  "settings.subtitles.font.color" : "Font color",
  "settings.subtitles.font.opacity" : "Font opacity",
  "settings.subtitles.background.color" : "Background color",
  "settings.subtitles.background.opacity": "Background opacity",
  "colors.white": "white",
  "colors.black": "black",
  "colors.red": "red",
  "colors.green": "green",
  "colors.blue": "blue",
  "colors.cyan": "cyan",
  "colors.yellow": "yellow",
  "colors.magenta": "magenta",
  "percent": "{value}%",
  "settings.subtitles.font.size": "Font size",
  "settings.subtitles.characterEdge": "Character edge",
  "settings.subtitles.characterEdge.raised": "raised",
  "settings.subtitles.characterEdge.depressed": "depressed",
  "settings.subtitles.characterEdge.uniform": "uniform",
  "settings.subtitles.characterEdge.dropshadowed": "drop shadowed",
  "settings.subtitles.font.family": "Font family",
  "settings.subtitles.font.family.monospacedserif": "monospaced serif",
  "settings.subtitles.font.family.proportionalserif": "proportional serif",
  "settings.subtitles.font.family.monospacedsansserif": "monospaced sans serif",
  "settings.subtitles.font.family.proportionalsansserif": "proportional sans serif",
  "settings.subtitles.font.family.casual": "casual",
  "settings.subtitles.font.family.cursive": "cursive",
  "settings.subtitles.font.family.smallcapital": "small capital",
  "settings.time.hours": "Hours",
  "settings.time.minutes": "Minutes",
  "settings.time.seconds": "Seconds",
  "ads.remainingTime": "This ad will end in {remainingTime} seconds.",
  "settings": "Settings",
  "fullscreen" : "Fullscreen",
  "speed": "Speed",
  "playPause" : "Play/Pause",
  "play": "Play",
  "pause": "Pause",
  "open": "open",
  "close": "Close",
  "pictureInPicture": "Picture-in-Picture",
  "appleAirplay" : "Apple AirPlay",
  "googleCast": "Google Cast",
  "vr" : "VR",
  "off": "off",
  "auto": "auto",
  "back" : "Back",
  "reset": "Reset",
  "replay": "Replay",
  "normal": "normal",
  "default": "default",
  "live": "Live",
  "subtitle.example": "example subtitle",
  "subtitle.select": "Select subtitle",
  "playingOn": "Playing on <strong>{castDeviceName}</strong>",
  "connectingTo": "Connecting to <strong>{castDeviceName}</strong>...",
  "watermarkLink": "Link to Homepage",
  "controlBar": "Video player controls",
  "player": "Video player",
  "seekBar": "Video timeline",
  "seekBar.value": "Value",
  "seekBar.timeshift": "Timeshift",
  "seekBar.durationText": "out of"
}

},{}],94:[function(require,module,exports){
module.exports={
  "settings.video.quality": "Calidad de Video",
  "settings.audio.quality": "Calidad de Audio",
  "settings.audio.track": "Pista de Audio",
  "settings.audio.mute" : "Silencio",
  "settings.audio.volume" : "Volumen",
  "settings.subtitles.window.color" : "color de Ventana",
  "settings.subtitles.window.opacity" : "opacidad de Ventana",
  "settings.subtitles" : "Subtítulos",
  "settings.subtitles.font.color" : "color de Fuente",
  "settings.subtitles.font.opacity" : "opacidad de Fuente",
  "settings.subtitles.background.color" : "color de Fondo",
  "settings.subtitles.background.opacity": "opacidad de Fondo",
  "colors.white": "blanco",
  "colors.black": "negro",
  "colors.red": "rojo",
  "colors.green": "verde",
  "colors.blue": "azul",
  "colors.cyan": "cian",
  "colors.yellow": "amarillo",
  "colors.magenta": "magenta",
  "percent": "{value}%",
  "settings.subtitles.font.size": "tamaño de Fuente",
  "settings.subtitles.characterEdge": "borde del Caracter",
  "settings.subtitles.characterEdge.raised": "alzado",
  "settings.subtitles.characterEdge.depressed": "discreto",
  "settings.subtitles.characterEdge.uniform": "uniforme",
  "settings.subtitles.characterEdge.dropshadowed": "sombreado",
  "settings.subtitles.font.family": "tipo de Fuente",
  "settings.subtitles.font.family.monospacedserif": "monospaced serif",
  "settings.subtitles.font.family.proportionalserif": "proportional serif",
  "settings.subtitles.font.family.monospacedsansserif": "monospaced sans serif",
  "settings.subtitles.font.family.proportionalsansserif": "proportional sans serif",
  "settings.subtitles.font.family.casual": "casual",
  "settings.subtitles.font.family.cursive": "cursiva",
  "settings.subtitles.font.family.smallcapital": "small capital",
  "settings.time.hours": "Horas",
  "settings.time.minutes": "Minutos",
  "settings.time.seconds": "Segundos",
  "ads.remainingTime": "Este anuncio acabará en {remainingTime} segundos.",
  "settings": "Configuración",
  "fullscreen" : "Pantalla Completa",
  "speed": "Velocidad",
  "playPause" : "Reproducir/Pausa",
  "play": "Reproducir",
  "pause": "Pausa",
  "open": "Abrir",
  "close": "Cerrar",
  "pictureInPicture": "Imagen en Imagen",
  "appleAirplay" : "Apple AirPlay",
  "googleCast": "Google Cast",
  "vr" : "VR",
  "off": "off",
  "auto": "auto",
  "back" : "Atrás",
  "reset": "Reiniciar",
  "replay": "Rebobinar",
  "normal": "normal",
  "default": "predeterminado",
  "live": "Directo",
  "subtitle.example": "Ejemplo de Subtítulo",
  "subtitle.select": "Seleccionar subtítulo",
  "playingOn": "Reproduciendo en <strong>{castDeviceName}</strong>",
  "connectingTo": "Conectando a <strong>{castDeviceName}</strong>...",
  "watermarkLink": "Enlace al inicio",
  "controlBar": "Controles del Reproductor",
  "player": "Reproductor de Video",
  "seekBar": "Línea de Tiempo",
  "seekBar.value": "posición",
  "seekBar.timeshift": "cambio de posición",
  "seekBar.durationText": "de"
}
},{}],95:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeControlButton = exports.TitleBar = exports.SubtitleSelectBox = exports.SubtitleOverlay = exports.SeekBarLabel = exports.RecommendationOverlay = exports.ErrorMessageOverlay = exports.Component = exports.CastToggleButton = exports.CastStatusOverlay = exports.AudioTrackSelectBox = exports.AudioQualitySelectBox = exports.Label = exports.Container = exports.UIContainer = exports.Watermark = exports.VRToggleButton = exports.VolumeToggleButton = exports.VideoQualitySelectBox = exports.ToggleButton = exports.SettingsToggleButton = exports.SettingsPanel = exports.ItemSelectionList = exports.SelectBox = exports.SeekBar = exports.PlaybackToggleButton = exports.PlaybackTimeLabelMode = exports.PlaybackTimeLabel = exports.HugePlaybackToggleButton = exports.FullscreenToggleButton = exports.ControlBar = exports.Button = exports.ListOrientation = exports.ListNavigationGroup = exports.RootNavigationGroup = exports.NavigationGroup = exports.SpatialNavigation = exports.i18n = exports.ErrorUtils = exports.StorageUtils = exports.BrowserUtils = exports.UIUtils = exports.PlayerUtils = exports.StringUtils = exports.ArrayUtils = exports.DemoFactory = exports.UIFactory = exports.UIInstanceManager = exports.UIManager = exports.version = void 0;
exports.ReplayButton = exports.SettingsPanelItem = exports.SubtitleSettingsPanelPage = exports.SettingsPanelPageOpenButton = exports.SettingsPanelPageBackButton = exports.SettingsPanelPage = exports.AudioTrackListBox = exports.SubtitleListBox = exports.ListBox = exports.SubtitleSettingsResetButton = exports.WindowOpacitySelectBox = exports.WindowColorSelectBox = exports.SubtitleSettingsLabel = exports.SubtitleSettingSelectBox = exports.FontSizeSelectBox = exports.FontOpacitySelectBox = exports.FontFamilySelectBox = exports.FontColorSelectBox = exports.CharacterEdgeSelectBox = exports.BackgroundOpacitySelectBox = exports.BackgroundColorSelectBox = exports.Spacer = exports.PictureInPictureToggleButton = exports.VolumeSlider = exports.AirPlayToggleButton = exports.MetadataLabelContent = exports.MetadataLabel = exports.CloseButton = exports.PlaybackToggleOverlay = exports.CastUIContainer = exports.BufferingOverlay = exports.HugeReplayButton = exports.PlaybackSpeedSelectBox = exports.AdClickOverlay = exports.AdMessageLabel = exports.AdSkipButton = exports.ClickOverlay = void 0;
exports.version = '3.53.0';
// Management
var uimanager_1 = require("./uimanager");
Object.defineProperty(exports, "UIManager", { enumerable: true, get: function () { return uimanager_1.UIManager; } });
Object.defineProperty(exports, "UIInstanceManager", { enumerable: true, get: function () { return uimanager_1.UIInstanceManager; } });
// Factories
var uifactory_1 = require("./uifactory");
Object.defineProperty(exports, "UIFactory", { enumerable: true, get: function () { return uifactory_1.UIFactory; } });
var demofactory_1 = require("./demofactory");
Object.defineProperty(exports, "DemoFactory", { enumerable: true, get: function () { return demofactory_1.DemoFactory; } });
// Utils
var arrayutils_1 = require("./arrayutils");
Object.defineProperty(exports, "ArrayUtils", { enumerable: true, get: function () { return arrayutils_1.ArrayUtils; } });
var stringutils_1 = require("./stringutils");
Object.defineProperty(exports, "StringUtils", { enumerable: true, get: function () { return stringutils_1.StringUtils; } });
var playerutils_1 = require("./playerutils");
Object.defineProperty(exports, "PlayerUtils", { enumerable: true, get: function () { return playerutils_1.PlayerUtils; } });
var uiutils_1 = require("./uiutils");
Object.defineProperty(exports, "UIUtils", { enumerable: true, get: function () { return uiutils_1.UIUtils; } });
var browserutils_1 = require("./browserutils");
Object.defineProperty(exports, "BrowserUtils", { enumerable: true, get: function () { return browserutils_1.BrowserUtils; } });
var storageutils_1 = require("./storageutils");
Object.defineProperty(exports, "StorageUtils", { enumerable: true, get: function () { return storageutils_1.StorageUtils; } });
var errorutils_1 = require("./errorutils");
Object.defineProperty(exports, "ErrorUtils", { enumerable: true, get: function () { return errorutils_1.ErrorUtils; } });
// Localization
var i18n_1 = require("./localization/i18n");
Object.defineProperty(exports, "i18n", { enumerable: true, get: function () { return i18n_1.i18n; } });
// Spatial Navigation
var spatialnavigation_1 = require("./spatialnavigation/spatialnavigation");
Object.defineProperty(exports, "SpatialNavigation", { enumerable: true, get: function () { return spatialnavigation_1.SpatialNavigation; } });
var navigationgroup_1 = require("./spatialnavigation/navigationgroup");
Object.defineProperty(exports, "NavigationGroup", { enumerable: true, get: function () { return navigationgroup_1.NavigationGroup; } });
var rootnavigationgroup_1 = require("./spatialnavigation/rootnavigationgroup");
Object.defineProperty(exports, "RootNavigationGroup", { enumerable: true, get: function () { return rootnavigationgroup_1.RootNavigationGroup; } });
var ListNavigationGroup_1 = require("./spatialnavigation/ListNavigationGroup");
Object.defineProperty(exports, "ListNavigationGroup", { enumerable: true, get: function () { return ListNavigationGroup_1.ListNavigationGroup; } });
Object.defineProperty(exports, "ListOrientation", { enumerable: true, get: function () { return ListNavigationGroup_1.ListOrientation; } });
// Components
var button_1 = require("./components/button");
Object.defineProperty(exports, "Button", { enumerable: true, get: function () { return button_1.Button; } });
var controlbar_1 = require("./components/controlbar");
Object.defineProperty(exports, "ControlBar", { enumerable: true, get: function () { return controlbar_1.ControlBar; } });
var fullscreentogglebutton_1 = require("./components/fullscreentogglebutton");
Object.defineProperty(exports, "FullscreenToggleButton", { enumerable: true, get: function () { return fullscreentogglebutton_1.FullscreenToggleButton; } });
var hugeplaybacktogglebutton_1 = require("./components/hugeplaybacktogglebutton");
Object.defineProperty(exports, "HugePlaybackToggleButton", { enumerable: true, get: function () { return hugeplaybacktogglebutton_1.HugePlaybackToggleButton; } });
var playbacktimelabel_1 = require("./components/playbacktimelabel");
Object.defineProperty(exports, "PlaybackTimeLabel", { enumerable: true, get: function () { return playbacktimelabel_1.PlaybackTimeLabel; } });
Object.defineProperty(exports, "PlaybackTimeLabelMode", { enumerable: true, get: function () { return playbacktimelabel_1.PlaybackTimeLabelMode; } });
var playbacktogglebutton_1 = require("./components/playbacktogglebutton");
Object.defineProperty(exports, "PlaybackToggleButton", { enumerable: true, get: function () { return playbacktogglebutton_1.PlaybackToggleButton; } });
var seekbar_1 = require("./components/seekbar");
Object.defineProperty(exports, "SeekBar", { enumerable: true, get: function () { return seekbar_1.SeekBar; } });
var selectbox_1 = require("./components/selectbox");
Object.defineProperty(exports, "SelectBox", { enumerable: true, get: function () { return selectbox_1.SelectBox; } });
var itemselectionlist_1 = require("./components/itemselectionlist");
Object.defineProperty(exports, "ItemSelectionList", { enumerable: true, get: function () { return itemselectionlist_1.ItemSelectionList; } });
var settingspanel_1 = require("./components/settingspanel");
Object.defineProperty(exports, "SettingsPanel", { enumerable: true, get: function () { return settingspanel_1.SettingsPanel; } });
var settingstogglebutton_1 = require("./components/settingstogglebutton");
Object.defineProperty(exports, "SettingsToggleButton", { enumerable: true, get: function () { return settingstogglebutton_1.SettingsToggleButton; } });
var togglebutton_1 = require("./components/togglebutton");
Object.defineProperty(exports, "ToggleButton", { enumerable: true, get: function () { return togglebutton_1.ToggleButton; } });
var videoqualityselectbox_1 = require("./components/videoqualityselectbox");
Object.defineProperty(exports, "VideoQualitySelectBox", { enumerable: true, get: function () { return videoqualityselectbox_1.VideoQualitySelectBox; } });
var volumetogglebutton_1 = require("./components/volumetogglebutton");
Object.defineProperty(exports, "VolumeToggleButton", { enumerable: true, get: function () { return volumetogglebutton_1.VolumeToggleButton; } });
var vrtogglebutton_1 = require("./components/vrtogglebutton");
Object.defineProperty(exports, "VRToggleButton", { enumerable: true, get: function () { return vrtogglebutton_1.VRToggleButton; } });
var watermark_1 = require("./components/watermark");
Object.defineProperty(exports, "Watermark", { enumerable: true, get: function () { return watermark_1.Watermark; } });
var uicontainer_1 = require("./components/uicontainer");
Object.defineProperty(exports, "UIContainer", { enumerable: true, get: function () { return uicontainer_1.UIContainer; } });
var container_1 = require("./components/container");
Object.defineProperty(exports, "Container", { enumerable: true, get: function () { return container_1.Container; } });
var label_1 = require("./components/label");
Object.defineProperty(exports, "Label", { enumerable: true, get: function () { return label_1.Label; } });
var audioqualityselectbox_1 = require("./components/audioqualityselectbox");
Object.defineProperty(exports, "AudioQualitySelectBox", { enumerable: true, get: function () { return audioqualityselectbox_1.AudioQualitySelectBox; } });
var audiotrackselectbox_1 = require("./components/audiotrackselectbox");
Object.defineProperty(exports, "AudioTrackSelectBox", { enumerable: true, get: function () { return audiotrackselectbox_1.AudioTrackSelectBox; } });
var caststatusoverlay_1 = require("./components/caststatusoverlay");
Object.defineProperty(exports, "CastStatusOverlay", { enumerable: true, get: function () { return caststatusoverlay_1.CastStatusOverlay; } });
var casttogglebutton_1 = require("./components/casttogglebutton");
Object.defineProperty(exports, "CastToggleButton", { enumerable: true, get: function () { return casttogglebutton_1.CastToggleButton; } });
var component_1 = require("./components/component");
Object.defineProperty(exports, "Component", { enumerable: true, get: function () { return component_1.Component; } });
var errormessageoverlay_1 = require("./components/errormessageoverlay");
Object.defineProperty(exports, "ErrorMessageOverlay", { enumerable: true, get: function () { return errormessageoverlay_1.ErrorMessageOverlay; } });
var recommendationoverlay_1 = require("./components/recommendationoverlay");
Object.defineProperty(exports, "RecommendationOverlay", { enumerable: true, get: function () { return recommendationoverlay_1.RecommendationOverlay; } });
var seekbarlabel_1 = require("./components/seekbarlabel");
Object.defineProperty(exports, "SeekBarLabel", { enumerable: true, get: function () { return seekbarlabel_1.SeekBarLabel; } });
var subtitleoverlay_1 = require("./components/subtitleoverlay");
Object.defineProperty(exports, "SubtitleOverlay", { enumerable: true, get: function () { return subtitleoverlay_1.SubtitleOverlay; } });
var subtitleselectbox_1 = require("./components/subtitleselectbox");
Object.defineProperty(exports, "SubtitleSelectBox", { enumerable: true, get: function () { return subtitleselectbox_1.SubtitleSelectBox; } });
var titlebar_1 = require("./components/titlebar");
Object.defineProperty(exports, "TitleBar", { enumerable: true, get: function () { return titlebar_1.TitleBar; } });
var volumecontrolbutton_1 = require("./components/volumecontrolbutton");
Object.defineProperty(exports, "VolumeControlButton", { enumerable: true, get: function () { return volumecontrolbutton_1.VolumeControlButton; } });
var clickoverlay_1 = require("./components/clickoverlay");
Object.defineProperty(exports, "ClickOverlay", { enumerable: true, get: function () { return clickoverlay_1.ClickOverlay; } });
var adskipbutton_1 = require("./components/adskipbutton");
Object.defineProperty(exports, "AdSkipButton", { enumerable: true, get: function () { return adskipbutton_1.AdSkipButton; } });
var admessagelabel_1 = require("./components/admessagelabel");
Object.defineProperty(exports, "AdMessageLabel", { enumerable: true, get: function () { return admessagelabel_1.AdMessageLabel; } });
var adclickoverlay_1 = require("./components/adclickoverlay");
Object.defineProperty(exports, "AdClickOverlay", { enumerable: true, get: function () { return adclickoverlay_1.AdClickOverlay; } });
var playbackspeedselectbox_1 = require("./components/playbackspeedselectbox");
Object.defineProperty(exports, "PlaybackSpeedSelectBox", { enumerable: true, get: function () { return playbackspeedselectbox_1.PlaybackSpeedSelectBox; } });
var hugereplaybutton_1 = require("./components/hugereplaybutton");
Object.defineProperty(exports, "HugeReplayButton", { enumerable: true, get: function () { return hugereplaybutton_1.HugeReplayButton; } });
var bufferingoverlay_1 = require("./components/bufferingoverlay");
Object.defineProperty(exports, "BufferingOverlay", { enumerable: true, get: function () { return bufferingoverlay_1.BufferingOverlay; } });
var castuicontainer_1 = require("./components/castuicontainer");
Object.defineProperty(exports, "CastUIContainer", { enumerable: true, get: function () { return castuicontainer_1.CastUIContainer; } });
var playbacktoggleoverlay_1 = require("./components/playbacktoggleoverlay");
Object.defineProperty(exports, "PlaybackToggleOverlay", { enumerable: true, get: function () { return playbacktoggleoverlay_1.PlaybackToggleOverlay; } });
var closebutton_1 = require("./components/closebutton");
Object.defineProperty(exports, "CloseButton", { enumerable: true, get: function () { return closebutton_1.CloseButton; } });
var metadatalabel_1 = require("./components/metadatalabel");
Object.defineProperty(exports, "MetadataLabel", { enumerable: true, get: function () { return metadatalabel_1.MetadataLabel; } });
Object.defineProperty(exports, "MetadataLabelContent", { enumerable: true, get: function () { return metadatalabel_1.MetadataLabelContent; } });
var airplaytogglebutton_1 = require("./components/airplaytogglebutton");
Object.defineProperty(exports, "AirPlayToggleButton", { enumerable: true, get: function () { return airplaytogglebutton_1.AirPlayToggleButton; } });
var volumeslider_1 = require("./components/volumeslider");
Object.defineProperty(exports, "VolumeSlider", { enumerable: true, get: function () { return volumeslider_1.VolumeSlider; } });
var pictureinpicturetogglebutton_1 = require("./components/pictureinpicturetogglebutton");
Object.defineProperty(exports, "PictureInPictureToggleButton", { enumerable: true, get: function () { return pictureinpicturetogglebutton_1.PictureInPictureToggleButton; } });
var spacer_1 = require("./components/spacer");
Object.defineProperty(exports, "Spacer", { enumerable: true, get: function () { return spacer_1.Spacer; } });
var backgroundcolorselectbox_1 = require("./components/subtitlesettings/backgroundcolorselectbox");
Object.defineProperty(exports, "BackgroundColorSelectBox", { enumerable: true, get: function () { return backgroundcolorselectbox_1.BackgroundColorSelectBox; } });
var backgroundopacityselectbox_1 = require("./components/subtitlesettings/backgroundopacityselectbox");
Object.defineProperty(exports, "BackgroundOpacitySelectBox", { enumerable: true, get: function () { return backgroundopacityselectbox_1.BackgroundOpacitySelectBox; } });
var characteredgeselectbox_1 = require("./components/subtitlesettings/characteredgeselectbox");
Object.defineProperty(exports, "CharacterEdgeSelectBox", { enumerable: true, get: function () { return characteredgeselectbox_1.CharacterEdgeSelectBox; } });
var fontcolorselectbox_1 = require("./components/subtitlesettings/fontcolorselectbox");
Object.defineProperty(exports, "FontColorSelectBox", { enumerable: true, get: function () { return fontcolorselectbox_1.FontColorSelectBox; } });
var fontfamilyselectbox_1 = require("./components/subtitlesettings/fontfamilyselectbox");
Object.defineProperty(exports, "FontFamilySelectBox", { enumerable: true, get: function () { return fontfamilyselectbox_1.FontFamilySelectBox; } });
var fontopacityselectbox_1 = require("./components/subtitlesettings/fontopacityselectbox");
Object.defineProperty(exports, "FontOpacitySelectBox", { enumerable: true, get: function () { return fontopacityselectbox_1.FontOpacitySelectBox; } });
var fontsizeselectbox_1 = require("./components/subtitlesettings/fontsizeselectbox");
Object.defineProperty(exports, "FontSizeSelectBox", { enumerable: true, get: function () { return fontsizeselectbox_1.FontSizeSelectBox; } });
var subtitlesettingselectbox_1 = require("./components/subtitlesettings/subtitlesettingselectbox");
Object.defineProperty(exports, "SubtitleSettingSelectBox", { enumerable: true, get: function () { return subtitlesettingselectbox_1.SubtitleSettingSelectBox; } });
var subtitlesettingslabel_1 = require("./components/subtitlesettings/subtitlesettingslabel");
Object.defineProperty(exports, "SubtitleSettingsLabel", { enumerable: true, get: function () { return subtitlesettingslabel_1.SubtitleSettingsLabel; } });
var windowcolorselectbox_1 = require("./components/subtitlesettings/windowcolorselectbox");
Object.defineProperty(exports, "WindowColorSelectBox", { enumerable: true, get: function () { return windowcolorselectbox_1.WindowColorSelectBox; } });
var windowopacityselectbox_1 = require("./components/subtitlesettings/windowopacityselectbox");
Object.defineProperty(exports, "WindowOpacitySelectBox", { enumerable: true, get: function () { return windowopacityselectbox_1.WindowOpacitySelectBox; } });
var subtitlesettingsresetbutton_1 = require("./components/subtitlesettings/subtitlesettingsresetbutton");
Object.defineProperty(exports, "SubtitleSettingsResetButton", { enumerable: true, get: function () { return subtitlesettingsresetbutton_1.SubtitleSettingsResetButton; } });
var listbox_1 = require("./components/listbox");
Object.defineProperty(exports, "ListBox", { enumerable: true, get: function () { return listbox_1.ListBox; } });
var subtitlelistbox_1 = require("./components/subtitlelistbox");
Object.defineProperty(exports, "SubtitleListBox", { enumerable: true, get: function () { return subtitlelistbox_1.SubtitleListBox; } });
var audiotracklistbox_1 = require("./components/audiotracklistbox");
Object.defineProperty(exports, "AudioTrackListBox", { enumerable: true, get: function () { return audiotracklistbox_1.AudioTrackListBox; } });
var settingspanelpage_1 = require("./components/settingspanelpage");
Object.defineProperty(exports, "SettingsPanelPage", { enumerable: true, get: function () { return settingspanelpage_1.SettingsPanelPage; } });
var settingspanelpagebackbutton_1 = require("./components/settingspanelpagebackbutton");
Object.defineProperty(exports, "SettingsPanelPageBackButton", { enumerable: true, get: function () { return settingspanelpagebackbutton_1.SettingsPanelPageBackButton; } });
var settingspanelpageopenbutton_1 = require("./components/settingspanelpageopenbutton");
Object.defineProperty(exports, "SettingsPanelPageOpenButton", { enumerable: true, get: function () { return settingspanelpageopenbutton_1.SettingsPanelPageOpenButton; } });
var subtitlesettingspanelpage_1 = require("./components/subtitlesettings/subtitlesettingspanelpage");
Object.defineProperty(exports, "SubtitleSettingsPanelPage", { enumerable: true, get: function () { return subtitlesettingspanelpage_1.SubtitleSettingsPanelPage; } });
var settingspanelitem_1 = require("./components/settingspanelitem");
Object.defineProperty(exports, "SettingsPanelItem", { enumerable: true, get: function () { return settingspanelitem_1.SettingsPanelItem; } });
var replaybutton_1 = require("./components/replaybutton");
Object.defineProperty(exports, "ReplayButton", { enumerable: true, get: function () { return replaybutton_1.ReplayButton; } });
// Object.assign polyfill for ES5/IE9
// https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
if (typeof Object.assign !== 'function') {
    Object.assign = function (target) {
        'use strict';
        if (target == null) {
            throw new TypeError('Cannot convert undefined or null to object');
        }
        target = Object(target);
        for (var index = 1; index < arguments.length; index++) {
            var source = arguments[index];
            if (source != null) {
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
        }
        return target;
    };
}

},{"./arrayutils":6,"./browserutils":8,"./components/adclickoverlay":9,"./components/admessagelabel":10,"./components/adskipbutton":11,"./components/airplaytogglebutton":12,"./components/audioqualityselectbox":13,"./components/audiotracklistbox":14,"./components/audiotrackselectbox":15,"./components/bufferingoverlay":16,"./components/button":17,"./components/caststatusoverlay":18,"./components/casttogglebutton":19,"./components/castuicontainer":20,"./components/clickoverlay":21,"./components/closebutton":22,"./components/component":23,"./components/container":24,"./components/controlbar":25,"./components/errormessageoverlay":26,"./components/fullscreentogglebutton":27,"./components/hugeplaybacktogglebutton":28,"./components/hugereplaybutton":29,"./components/itemselectionlist":30,"./components/label":31,"./components/listbox":32,"./components/metadatalabel":34,"./components/pictureinpicturetogglebutton":35,"./components/playbackspeedselectbox":36,"./components/playbacktimelabel":37,"./components/playbacktogglebutton":38,"./components/playbacktoggleoverlay":39,"./components/recommendationoverlay":40,"./components/replaybutton":41,"./components/seekbar":42,"./components/seekbarlabel":45,"./components/selectbox":46,"./components/settingspanel":47,"./components/settingspanelitem":48,"./components/settingspanelpage":49,"./components/settingspanelpagebackbutton":50,"./components/settingspanelpageopenbutton":52,"./components/settingstogglebutton":53,"./components/spacer":54,"./components/subtitlelistbox":55,"./components/subtitleoverlay":56,"./components/subtitleselectbox":57,"./components/subtitlesettings/backgroundcolorselectbox":58,"./components/subtitlesettings/backgroundopacityselectbox":59,"./components/subtitlesettings/characteredgeselectbox":60,"./components/subtitlesettings/fontcolorselectbox":61,"./components/subtitlesettings/fontfamilyselectbox":62,"./components/subtitlesettings/fontopacityselectbox":63,"./components/subtitlesettings/fontsizeselectbox":64,"./components/subtitlesettings/subtitlesettingselectbox":65,"./components/subtitlesettings/subtitlesettingslabel":66,"./components/subtitlesettings/subtitlesettingspanelpage":68,"./components/subtitlesettings/subtitlesettingsresetbutton":69,"./components/subtitlesettings/windowcolorselectbox":70,"./components/subtitlesettings/windowopacityselectbox":71,"./components/titlebar":73,"./components/togglebutton":74,"./components/uicontainer":76,"./components/videoqualityselectbox":77,"./components/volumecontrolbutton":78,"./components/volumeslider":79,"./components/volumetogglebutton":80,"./components/vrtogglebutton":81,"./components/watermark":82,"./demofactory":83,"./errorutils":85,"./localization/i18n":91,"./playerutils":97,"./spatialnavigation/ListNavigationGroup":98,"./spatialnavigation/navigationgroup":102,"./spatialnavigation/rootnavigationgroup":104,"./spatialnavigation/spatialnavigation":106,"./storageutils":109,"./stringutils":110,"./uifactory":113,"./uimanager":114,"./uiutils":115}],96:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isMobileV3PlayerAPI = exports.MobileV3PlayerEvent = void 0;
var MobileV3PlayerEvent;
(function (MobileV3PlayerEvent) {
    MobileV3PlayerEvent["SourceError"] = "sourceerror";
    MobileV3PlayerEvent["PlayerError"] = "playererror";
    MobileV3PlayerEvent["PlaylistTransition"] = "playlisttransition";
})(MobileV3PlayerEvent = exports.MobileV3PlayerEvent || (exports.MobileV3PlayerEvent = {}));
function isMobileV3PlayerAPI(player) {
    for (var key in MobileV3PlayerEvent) {
        if (MobileV3PlayerEvent.hasOwnProperty(key) && !player.exports.PlayerEvent.hasOwnProperty(key)) {
            return false;
        }
    }
    return true;
}
exports.isMobileV3PlayerAPI = isMobileV3PlayerAPI;

},{}],97:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerUtils = void 0;
var eventdispatcher_1 = require("./eventdispatcher");
var browserutils_1 = require("./browserutils");
var PlayerUtils;
(function (PlayerUtils) {
    var PlayerState;
    (function (PlayerState) {
        PlayerState[PlayerState["Idle"] = 0] = "Idle";
        PlayerState[PlayerState["Prepared"] = 1] = "Prepared";
        PlayerState[PlayerState["Playing"] = 2] = "Playing";
        PlayerState[PlayerState["Paused"] = 3] = "Paused";
        PlayerState[PlayerState["Finished"] = 4] = "Finished";
    })(PlayerState = PlayerUtils.PlayerState || (PlayerUtils.PlayerState = {}));
    function isTimeShiftAvailable(player) {
        return player.isLive() && player.getMaxTimeShift() !== 0;
    }
    PlayerUtils.isTimeShiftAvailable = isTimeShiftAvailable;
    function getState(player) {
        if (player.hasEnded()) {
            return PlayerState.Finished;
        }
        else if (player.isPlaying()) {
            return PlayerState.Playing;
        }
        else if (player.isPaused()) {
            return PlayerState.Paused;
        }
        else if (player.getSource() != null) {
            return PlayerState.Prepared;
        }
        else {
            return PlayerState.Idle;
        }
    }
    PlayerUtils.getState = getState;
    /**
     * Returns the currentTime - seekableRange.start. This ensures a user-friendly currentTime after a live stream
     * transitioned to VoD.
     * @param player
     */
    function getCurrentTimeRelativeToSeekableRange(player) {
        var currentTime = player.getCurrentTime();
        if (player.isLive()) {
            return currentTime;
        }
        var seekableRangeStart = PlayerUtils.getSeekableRangeStart(player, 0);
        return currentTime - seekableRangeStart;
    }
    PlayerUtils.getCurrentTimeRelativeToSeekableRange = getCurrentTimeRelativeToSeekableRange;
    /**
     * Returns the start value of the seekable range or the defaultValue if no seekableRange is present.
     * For now this happens only in combination with Mobile SDKs.
     *
     * TODO: remove this function in next major release
     *
     * @param player
     * @param defaultValue
     */
    function getSeekableRangeStart(player, defaultValue) {
        if (defaultValue === void 0) { defaultValue = 0; }
        return player.getSeekableRange() && player.getSeekableRange().start || defaultValue;
    }
    PlayerUtils.getSeekableRangeStart = getSeekableRangeStart;
    /**
     * Calculates player seekable time range for live.
     * As the player returns `{ start: -1, end: -1 }` for live streams we need to calculate the `seekableRange` based on `maxTimeshift`.
     *
     * @param player
     */
    function getSeekableRangeRespectingLive(player) {
        if (!player.isLive()) {
            return player.getSeekableRange();
        }
        var currentTimeshift = -player.getTimeShift();
        var maxTimeshift = -player.getMaxTimeShift();
        var currentTime = player.getCurrentTime();
        var end = currentTime + (currentTimeshift);
        var start = currentTime - (maxTimeshift - currentTimeshift);
        return { start: start, end: end };
    }
    PlayerUtils.getSeekableRangeRespectingLive = getSeekableRangeRespectingLive;
    var TimeShiftAvailabilityDetector = /** @class */ (function () {
        function TimeShiftAvailabilityDetector(player) {
            var _this = this;
            this.timeShiftAvailabilityChangedEvent = new eventdispatcher_1.EventDispatcher();
            this.player = player;
            this.timeShiftAvailable = undefined;
            var timeShiftDetector = function () {
                _this.detect();
            };
            // Try to detect timeshift availability when source is loaded, which works for DASH streams
            player.on(player.exports.PlayerEvent.SourceLoaded, timeShiftDetector);
            // With HLS/NativePlayer streams, getMaxTimeShift can be 0 before the buffer fills, so we need to additionally
            // check timeshift availability in TimeChanged
            player.on(player.exports.PlayerEvent.TimeChanged, timeShiftDetector);
        }
        TimeShiftAvailabilityDetector.prototype.detect = function () {
            if (this.player.isLive()) {
                var timeShiftAvailableNow = PlayerUtils.isTimeShiftAvailable(this.player);
                // When the availability changes, we fire the event
                if (timeShiftAvailableNow !== this.timeShiftAvailable) {
                    this.timeShiftAvailabilityChangedEvent.dispatch(this.player, { timeShiftAvailable: timeShiftAvailableNow });
                    this.timeShiftAvailable = timeShiftAvailableNow;
                }
            }
        };
        Object.defineProperty(TimeShiftAvailabilityDetector.prototype, "onTimeShiftAvailabilityChanged", {
            get: function () {
                return this.timeShiftAvailabilityChangedEvent.getEvent();
            },
            enumerable: false,
            configurable: true
        });
        return TimeShiftAvailabilityDetector;
    }());
    PlayerUtils.TimeShiftAvailabilityDetector = TimeShiftAvailabilityDetector;
    /**
     * Detects changes of the stream type, i.e. changes of the return value of the player#isLive method.
     * Normally, a stream cannot change its type during playback, it's either VOD or live. Due to bugs on some
     * platforms or browsers, it can still change. It is therefore unreliable to just check #isLive and this detector
     * should be used as a workaround instead.
     *
     * Additionally starting with player v8.19.0 we have the use-case that a live stream changes into a vod.
     * The DurationChanged event indicates this switch.
     *
     * Known cases:
     *
     * - HLS VOD on Android 4.3
     * Video duration is initially 'Infinity' and only gets available after playback starts, so streams are wrongly
     * reported as 'live' before playback (the live-check in the player checks for infinite duration).
     *
     * @deprecated since UI v3.9.0 in combination with player v8.19.0 use PlayerEvent.DurationChanged instead
     *
     * TODO: remove this class in next major release
     */
    var LiveStreamDetector = /** @class */ (function () {
        function LiveStreamDetector(player, uimanager) {
            var _this = this;
            this.liveChangedEvent = new eventdispatcher_1.EventDispatcher();
            this.player = player;
            this.uimanager = uimanager;
            this.live = undefined;
            var liveDetector = function () {
                _this.detect();
            };
            this.uimanager.getConfig().events.onUpdated.subscribe(liveDetector);
            // Re-evaluate when playback starts
            player.on(player.exports.PlayerEvent.Play, liveDetector);
            // HLS live detection workaround for Android:
            // Also re-evaluate during playback, because that is when the live flag might change.
            // (Doing it only in Android Chrome saves unnecessary overhead on other platforms)
            if (browserutils_1.BrowserUtils.isAndroid && browserutils_1.BrowserUtils.isChrome) {
                player.on(player.exports.PlayerEvent.TimeChanged, liveDetector);
            }
            // DurationChanged event was introduced with player v8.19.0
            if (player.exports.PlayerEvent.DurationChanged) {
                player.on(player.exports.PlayerEvent.DurationChanged, liveDetector);
            }
            // Ad video's isLive() might be different than the actual video's isLive().
            player.on(player.exports.PlayerEvent.AdBreakStarted, liveDetector);
            player.on(player.exports.PlayerEvent.AdBreakFinished, liveDetector);
        }
        LiveStreamDetector.prototype.detect = function () {
            var liveNow = this.player.isLive();
            // Compare current to previous live state flag and fire event when it changes. Since we initialize the flag
            // with undefined, there is always at least an initial event fired that tells listeners the live state.
            if (liveNow !== this.live) {
                this.liveChangedEvent.dispatch(this.player, { live: liveNow });
                this.live = liveNow;
            }
        };
        Object.defineProperty(LiveStreamDetector.prototype, "onLiveChanged", {
            get: function () {
                return this.liveChangedEvent.getEvent();
            },
            enumerable: false,
            configurable: true
        });
        return LiveStreamDetector;
    }());
    PlayerUtils.LiveStreamDetector = LiveStreamDetector;
})(PlayerUtils = exports.PlayerUtils || (exports.PlayerUtils = {}));

},{"./browserutils":8,"./eventdispatcher":86}],98:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListNavigationGroup = exports.ListOrientation = void 0;
var navigationgroup_1 = require("./navigationgroup");
var types_1 = require("./types");
var ListOrientation;
(function (ListOrientation) {
    ListOrientation["Horizontal"] = "horizontal";
    ListOrientation["Vertical"] = "vertical";
})(ListOrientation = exports.ListOrientation || (exports.ListOrientation = {}));
var ListNavigationGroup = /** @class */ (function (_super) {
    __extends(ListNavigationGroup, _super);
    function ListNavigationGroup(orientation, container) {
        var components = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            components[_i - 2] = arguments[_i];
        }
        var _this = _super.apply(this, __spreadArray([container], components, false)) || this;
        switch (orientation) {
            case ListOrientation.Vertical:
                _this.listNavigationDirections = [types_1.Direction.UP, types_1.Direction.DOWN];
                break;
            case ListOrientation.Horizontal:
                _this.listNavigationDirections = [types_1.Direction.LEFT, types_1.Direction.RIGHT];
                break;
        }
        return _this;
    }
    ListNavigationGroup.prototype.handleAction = function (action) {
        _super.prototype.handleAction.call(this, action);
        if (action === types_1.Action.SELECT) {
            // close the container when a list entry is selected
            this.handleAction(types_1.Action.BACK);
        }
    };
    ListNavigationGroup.prototype.handleNavigation = function (direction) {
        _super.prototype.handleNavigation.call(this, direction);
        if (!this.listNavigationDirections.includes(direction)) {
            // close the container on navigation inputs that don't align
            // with the orientation of the list
            this.handleAction(types_1.Action.BACK);
        }
    };
    return ListNavigationGroup;
}(navigationgroup_1.NavigationGroup));
exports.ListNavigationGroup = ListNavigationGroup;

},{"./navigationgroup":102,"./types":108}],99:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHtmlElementsFromComponents = void 0;
var container_1 = require("../components/container");
var typeguards_1 = require("./typeguards");
/**
 * Recursively resolves a container and the components contained within them, building a flat list of components.
 *
 * @param container The container to get the contained components from
 */
function resolveAllComponents(container) {
    var childComponents = [];
    container.getComponents().forEach(function (containerOrComponent) {
        if ((0, typeguards_1.isContainer)(containerOrComponent)) {
            childComponents.push.apply(childComponents, resolveAllComponents(containerOrComponent));
        }
        else if ((0, typeguards_1.isComponent)(containerOrComponent)) {
            childComponents.push(containerOrComponent);
        }
    });
    return childComponents;
}
/**
 * Returns the HTML elements associated to the provided component.
 *
 * @param component The component to get the HTML elements from
 */
function toHtmlElement(component) {
    if ((0, typeguards_1.isListBox)(component)) {
        return [].slice.call(component.getDomElement().get()[0].children);
    }
    else {
        return component.getDomElement().get().slice(0, 1);
    }
}
/**
 * Takes the provided list of components and flat-maps them to a list of their respective HTML elements. In case a
 * provided component is a container, the children of that container will be resolved recursively. Ignores components
 * that are hidden.
 *
 * @param components The components to map to HTML elements
 */
function getHtmlElementsFromComponents(components) {
    var htmlElements = [];
    components
        .filter(function (component) { return !component.isHidden(); })
        .forEach(function (component) {
        var elementsToConsider = component instanceof container_1.Container ? resolveAllComponents(component) : [component];
        elementsToConsider.forEach(function (component) {
            htmlElements.push.apply(htmlElements, toHtmlElement(component));
        });
    });
    return htmlElements;
}
exports.getHtmlElementsFromComponents = getHtmlElementsFromComponents;

},{"../components/container":24,"./typeguards":107}],100:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getKeyMapForPlatform = void 0;
var types_1 = require("./types");
var browserutils_1 = require("../browserutils");
var TizenKeyMap = {
    isApplicable: function () { return browserutils_1.BrowserUtils.isTizen; },
    keyCodes: {
        // D-pad Up
        38: types_1.Direction.UP,
        // D-pad Down
        40: types_1.Direction.DOWN,
        // D-pad Left
        37: types_1.Direction.LEFT,
        // D-pad Right
        39: types_1.Direction.RIGHT,
        // D-pad OK
        13: types_1.Action.SELECT,
        // Back
        10009: types_1.Action.BACK,
    },
};
var WebOsKeyMap = {
    isApplicable: function () { return browserutils_1.BrowserUtils.isWebOs; },
    keyCodes: {
        // D-pad Up
        38: types_1.Direction.UP,
        // D-pad Down
        40: types_1.Direction.DOWN,
        // D-pad Left
        37: types_1.Direction.LEFT,
        // D-pad Right
        39: types_1.Direction.RIGHT,
        // D-pad OK
        13: types_1.Action.SELECT,
        // Back
        461: types_1.Action.BACK,
    },
};
var PlayStationKeyMap = {
    isApplicable: function () { return browserutils_1.BrowserUtils.isPlayStation; },
    keyCodes: {
        // D-pad Up
        38: types_1.Direction.UP,
        // D-pad Down
        40: types_1.Direction.DOWN,
        // D-pad Left
        37: types_1.Direction.LEFT,
        // D-pad Right
        39: types_1.Direction.RIGHT,
        // Cross
        13: types_1.Action.SELECT,
        // Circle
        27: types_1.Action.BACK,
    },
};
var AndroidKeyMap = {
    isApplicable: function () { return browserutils_1.BrowserUtils.isAndroid; },
    keyCodes: {
        // D-pad Up
        19: types_1.Direction.UP,
        // D-pad Down
        20: types_1.Direction.DOWN,
        // D-pad Left
        21: types_1.Direction.LEFT,
        // D-pad Right
        22: types_1.Direction.RIGHT,
        // D-pad Center
        23: types_1.Action.SELECT,
        // Enter
        66: types_1.Action.SELECT,
        // Back
        4: types_1.Action.BACK,
    },
};
var HisenseKeyMap = {
    isApplicable: function () { return browserutils_1.BrowserUtils.isHisense; },
    keyCodes: {
        // D-pad Up
        38: types_1.Direction.UP,
        // D-pad Down
        40: types_1.Direction.DOWN,
        // D-pad Left
        37: types_1.Direction.LEFT,
        // D-pad Right
        39: types_1.Direction.RIGHT,
        // OK
        13: types_1.Action.SELECT,
        // Back
        8: types_1.Action.BACK,
    },
};
// Default key map used on desktops
var DefaultKeyMap = {
    // Arrow Up
    38: types_1.Direction.UP,
    // Arrow Down
    40: types_1.Direction.DOWN,
    // Arrow Left
    37: types_1.Direction.LEFT,
    // Arrow Right
    39: types_1.Direction.RIGHT,
    // Enter
    13: types_1.Action.SELECT,
    // Escape
    27: types_1.Action.BACK,
};
/**
 * Returns the matching key map for the current platform.
 */
function getKeyMapForPlatform() {
    var applicableKeyMap = [
        WebOsKeyMap,
        TizenKeyMap,
        PlayStationKeyMap,
        HisenseKeyMap,
        AndroidKeyMap,
    ].find(function (keyMap) { return keyMap.isApplicable(); });
    if (applicableKeyMap) {
        return applicableKeyMap.keyCodes;
    }
    else {
        return DefaultKeyMap;
    }
}
exports.getKeyMapForPlatform = getKeyMapForPlatform;

},{"../browserutils":8,"./types":108}],101:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBoundingRectFromElement = exports.getElementInDirection = void 0;
var types_1 = require("./types");
/**
 * Calculates the length of a vector.
 *
 * @param vector The vector to calculate the length of
 */
function length(vector) {
    return Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));
}
/**
 * Normalizes the given vector.
 *
 * @param vector The vector to normalize
 */
function normalize(vector) {
    var len = length(vector);
    return {
        x: vector.x / len,
        y: vector.y / len,
    };
}
/**
 * Calculates the dot product between 2 vectors.
 *
 * @param a The first vector
 * @param b The second vector
 */
function dotProduct(a, b) {
    return a.x * b.x + a.y * b.y;
}
/**
 * Calculates the distance between the 2 points pointed to by the provided vectors.
 *
 * @param a The first vector
 * @param b The second vector
 */
function distance(a, b) {
    return length({
        x: b.x - a.x,
        y: b.y - a.y,
    });
}
/**
 * Returns a vector that corresponds to the center of the provided element.
 *
 * @param element The element to get the center of
 */
function getElementVector(element) {
    var boundingRect = getBoundingRectFromElement(element);
    return {
        x: boundingRect.x + boundingRect.width / 2,
        y: boundingRect.y + boundingRect.height / 2,
    };
}
/**
 * Returns the angle in degrees between the unit vector pointing in the given {Direction} and the unit vector that
 * points from the current element to another element.
 *
 * @param a The vector of the current element
 * @param b The vector of the other element
 * @param direction The direction to move along
 */
function calculateAngle(a, b, direction) {
    var directionVector = {
        x: (direction === types_1.Direction.LEFT ? -1 : direction === types_1.Direction.RIGHT ? 1 : 0),
        y: (direction === types_1.Direction.UP ? -1 : direction === types_1.Direction.DOWN ? 1 : 0),
    };
    var elementVector = normalize({
        x: b.x - a.x,
        y: b.y - a.y,
    });
    var angleCos = dotProduct(directionVector, elementVector) / (length(directionVector) * length(elementVector));
    return Math.acos(angleCos) * 180 / Math.PI;
}
/**
 * Returns the closest element to the current element when trying to navigate in the provided direction. Returns
 * undefined, if there is not element in the given direction.
 *
 * @param activeElement The currently selected element
 * @param elements The list of all elements that can be navigated to
 * @param direction The direction in which to navigate
 */
function getElementInDirection(activeElement, elements, direction) {
    var _a;
    if (!activeElement)
        return undefined;
    var cutoffAngle = 45;
    var activeElemVector = getElementVector(activeElement);
    return (_a = elements
        // don't take the current element into account
        .filter(function (elem) { return elem !== activeElement; })
        // get the angle between, and distance to any other element from the current element
        .map(function (element) {
        var elementVector = getElementVector(element);
        var dist = distance(activeElemVector, elementVector);
        var angle = calculateAngle(activeElemVector, elementVector, direction);
        return { angle: angle, dist: dist, element: element };
    })
        // filter out any elements that don't align with the direction we're trying to move in
        .filter(function (_a) {
        var angle = _a.angle;
        return angle <= cutoffAngle;
    })
        // sort the resulting elements based on their distance to the current element in ascending order
        .sort(function (_a, _b) {
        var angleA = _a.angle, distA = _a.dist;
        var angleB = _b.angle, distB = _b.dist;
        return (angleA - angleB) + (distA - distB);
    })
        // return the element closest to the current element
        .shift()) === null || _a === void 0 ? void 0 : _a.element;
}
exports.getElementInDirection = getElementInDirection;
/**
 * Returns DOMRect like object containing horizontal X and vertical Y coordinates from and HTMLElement.
 * Handles use-cases for getBoundingClientRect when the return type can be either
 * a ClientRect or DOMRect object type.
 *
 * @param element The currently selected element
 */
function getBoundingRectFromElement(element) {
    var boundingRect = element.getBoundingClientRect();
    if (typeof boundingRect.x !== 'number' && typeof boundingRect.y !== 'number') {
        boundingRect.x = boundingRect.left;
        boundingRect.y = boundingRect.top;
    }
    return boundingRect;
}
exports.getBoundingRectFromElement = getBoundingRectFromElement;

},{"./types":108}],102:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NavigationGroup = void 0;
var navigationalgorithm_1 = require("./navigationalgorithm");
var gethtmlelementsfromcomponents_1 = require("./gethtmlelementsfromcomponents");
var nodeeventsubscriber_1 = require("./nodeeventsubscriber");
var typeguards_1 = require("./typeguards");
var types_1 = require("./types");
/**
 * Used as part of spatial navigation. Groups together different components to which you can navigate to, in a single
 * navigation group.
 *
 * Responsible for finding elements in direction on navigation and for tracking active element inside the group.
 * Triggers blur and focus on element when active element is changed, as well as click on element on `Action.SELECT`.
 * Will call `hideUi()` on passed in container if `Action.BACK` is called.
 */
var NavigationGroup = /** @class */ (function () {
    function NavigationGroup(container) {
        var components = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            components[_i - 1] = arguments[_i];
        }
        this.container = container;
        this.removeElementHoverEventListeners = function () { };
        this.components = components;
        this.eventSubscriber = new nodeeventsubscriber_1.NodeEventSubscriber();
    }
    /**
     * Returns the active HTMLElement.
     */
    NavigationGroup.prototype.getActiveElement = function () {
        return this.activeElement;
    };
    NavigationGroup.prototype.focusElement = function (element) {
        this.blurActiveElement();
        this.activeElement = element;
        this.activeElement.focus();
    };
    NavigationGroup.prototype.blurActiveElement = function () {
        var _a;
        (_a = this.activeElement) === null || _a === void 0 ? void 0 : _a.blur();
    };
    NavigationGroup.prototype.focusFirstElement = function () {
        var element = (0, gethtmlelementsfromcomponents_1.getHtmlElementsFromComponents)(this.components)[0];
        if (element) {
            this.focusElement(element);
        }
    };
    NavigationGroup.prototype.defaultNavigationHandler = function (direction) {
        var targetElement = (0, navigationalgorithm_1.getElementInDirection)(this.activeElement, (0, gethtmlelementsfromcomponents_1.getHtmlElementsFromComponents)(this.components), direction);
        if (targetElement) {
            this.focusElement(targetElement);
        }
    };
    NavigationGroup.prototype.defaultActionHandler = function (action) {
        switch (action) {
            case (types_1.Action.SELECT):
                this.activeElement.click();
                break;
            case (types_1.Action.BACK):
                this.container.hide();
                break;
        }
    };
    NavigationGroup.prototype.handleInput = function (data, defaultHandler, userHandler) {
        var handleDefault = true;
        var preventDefault = function () { return (handleDefault = false); };
        userHandler === null || userHandler === void 0 ? void 0 : userHandler(data, this.activeElement, preventDefault);
        if (handleDefault) {
            defaultHandler.call(this, data);
        }
    };
    /**
     * Handles a navigation event.
     *
     * @param direction The direction of the navigation event
     */
    NavigationGroup.prototype.handleNavigation = function (direction) {
        if (!this.activeElement) {
            // If we do not have an active element, the active element has been disabled by a mouseleave
            // event. We should continue the navigation at the exact place where we left off.
            if (this.activeElementBeforeDisable) {
                this.focusElement(this.activeElementBeforeDisable);
            }
            else {
                this.focusFirstElement();
            }
            return;
        }
        this.handleInput(direction, this.defaultNavigationHandler, this.onNavigation);
    };
    /**
     * Handles an action event.
     *
     * @param action The action of the event
     */
    NavigationGroup.prototype.handleAction = function (action) {
        this.handleInput(action, this.defaultActionHandler, this.onAction);
    };
    /**
     * Disable navigation group
     *
     * Call blur on active element, set as undefined, and track it as element before disable.
     */
    NavigationGroup.prototype.disable = function () {
        if (this.activeElement) {
            this.activeElementBeforeDisable = this.activeElement;
            this.blurActiveElement();
            this.activeElement = undefined;
        }
    };
    /**
     * Enable navigation group
     *
     * Sets active element to either element that was active before disable, or first element of tracked elements.
     * If it is settings panel, it will always focus first element in the list.
     */
    NavigationGroup.prototype.enable = function () {
        if (this.activeElementBeforeDisable && !(0, typeguards_1.isSettingsPanel)(this.container)) {
            this.focusElement(this.activeElementBeforeDisable);
            this.activeElementBeforeDisable = undefined;
        }
        else {
            this.focusFirstElement();
        }
        this.trackElementHover();
    };
    /**
     * Adds event listener for `mouseenter` on tracked elements to ensure tracking of active element will work together
     * in combination of using mouse and key events.
     */
    NavigationGroup.prototype.trackElementHover = function () {
        var _this = this;
        this.removeElementHoverEventListeners();
        var removeEventListenerFunctions = (0, gethtmlelementsfromcomponents_1.getHtmlElementsFromComponents)(this.components).map(function (htmlElem) {
            var enterListener = _this.focusElement.bind(_this, htmlElem);
            var exitListener = function () { return _this.disable(); };
            _this.eventSubscriber.on(htmlElem, 'mouseenter', enterListener);
            _this.eventSubscriber.on(htmlElem, 'mouseleave', exitListener);
            return function () {
                _this.eventSubscriber.off(htmlElem, 'mouseenter', enterListener);
                _this.eventSubscriber.off(htmlElem, 'mouseleave', exitListener);
            };
        });
        this.removeElementHoverEventListeners = function () { return removeEventListenerFunctions.forEach(function (fn) { return fn(); }); };
    };
    /**
     * Dispose of navigation group
     */
    NavigationGroup.prototype.release = function () {
        this.eventSubscriber.release();
        this.activeElement = undefined;
        this.components.splice(0, this.components.length);
        this.removeElementHoverEventListeners();
    };
    return NavigationGroup;
}());
exports.NavigationGroup = NavigationGroup;

},{"./gethtmlelementsfromcomponents":99,"./navigationalgorithm":101,"./nodeeventsubscriber":103,"./typeguards":107,"./types":108}],103:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeEventSubscriber = void 0;
/**
 * Allows to subscribe to Node events.
 */
var NodeEventSubscriber = /** @class */ (function () {
    function NodeEventSubscriber() {
        this.attachedListeners = new Map();
    }
    NodeEventSubscriber.prototype.getEventListenersOfType = function (type) {
        if (!this.attachedListeners.has(type)) {
            this.attachedListeners.set(type, []);
        }
        return this.attachedListeners.get(type);
    };
    /**
     * Adds the given event listener to the node.
     *
     * @param node The node to remove the event listener from
     * @param type The event to listen to
     * @param listener The listener to remove
     * @param options The event listener options
     */
    NodeEventSubscriber.prototype.on = function (node, type, listener, options) {
        node.addEventListener(type, listener, options);
        this.getEventListenersOfType(type).push([node, listener, options]);
    };
    /**
     * Removes the given event listener from the node.
     *
     * @param node The node to attach the event listener to
     * @param type The event to listen to
     * @param listener The listener to add
     * @param options The event listener options
     */
    NodeEventSubscriber.prototype.off = function (node, type, listener, options) {
        var listenersOfType = this.getEventListenersOfType(type);
        var listenerIndex = listenersOfType.findIndex(function (_a) {
            var otherNode = _a[0], otherListener = _a[1], otherOptions = _a[2];
            return otherNode === node && otherListener === listener && otherOptions === options;
        });
        node.removeEventListener(type, listener, options);
        if (listenerIndex > -1) {
            listenersOfType.splice(listenerIndex, 1);
        }
    };
    /**
     * Removes all attached event listeners.
     */
    NodeEventSubscriber.prototype.release = function () {
        var _this = this;
        this.attachedListeners.forEach(function (listenersOfType, type) {
            listenersOfType.forEach(function (_a) {
                var element = _a[0], listener = _a[1], options = _a[2];
                _this.off(element, type, listener, options);
            });
        });
        this.attachedListeners.clear();
    };
    return NodeEventSubscriber;
}());
exports.NodeEventSubscriber = NodeEventSubscriber;

},{}],104:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RootNavigationGroup = void 0;
var navigationgroup_1 = require("./navigationgroup");
var types_1 = require("./types");
/**
 * Extends NavigationGroup and provides additional logic for hiding and showing the UI on the root container.
 */
var RootNavigationGroup = /** @class */ (function (_super) {
    __extends(RootNavigationGroup, _super);
    function RootNavigationGroup(container) {
        var elements = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            elements[_i - 1] = arguments[_i];
        }
        var _this = _super.apply(this, __spreadArray([container], elements, false)) || this;
        _this.container = container;
        return _this;
    }
    RootNavigationGroup.prototype.handleAction = function (action) {
        this.container.showUi();
        _super.prototype.handleAction.call(this, action);
    };
    RootNavigationGroup.prototype.handleNavigation = function (direction) {
        this.container.showUi();
        _super.prototype.handleNavigation.call(this, direction);
    };
    RootNavigationGroup.prototype.defaultActionHandler = function (action) {
        if (action === types_1.Action.BACK) {
            this.container.hideUi();
        }
        else {
            _super.prototype.defaultActionHandler.call(this, action);
        }
    };
    RootNavigationGroup.prototype.release = function () {
        _super.prototype.release.call(this);
    };
    return RootNavigationGroup;
}(navigationgroup_1.NavigationGroup));
exports.RootNavigationGroup = RootNavigationGroup;

},{"./navigationgroup":102,"./types":108}],105:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeekBarHandler = void 0;
var nodeeventsubscriber_1 = require("./nodeeventsubscriber");
var types_1 = require("./types");
var navigationalgorithm_1 = require("./navigationalgorithm");
var DefaultScrubSpeedPercentage = 0.005;
var ScrubSpeedClearInterval = 100;
var ScrubSpeedMultiplier = 1.1;
/**
 * Handles Spatial Navigation interaction with the seek bar. Ensures, that seek operations can be executed and that the
 * scrubbing tooltip is shown as if the user scrubbed using the mouse/touchscreen.
 */
var SeekBarHandler = /** @class */ (function () {
    function SeekBarHandler(rootNavigationGroup) {
        var _this = this;
        this.rootNavigationGroup = rootNavigationGroup;
        this.cursorPosition = { x: 0, y: 0 };
        this.isScrubbing = false;
        this.scrubSpeedPercentage = DefaultScrubSpeedPercentage;
        this.onNavigation = function (direction, target, preventDefault) {
            if (!isSeekBarWrapper(target)) {
                return;
            }
            if (direction === types_1.Direction.UP || direction === types_1.Direction.DOWN) {
                _this.stopSeeking(getSeekBar(target));
                return;
            }
            _this.initializeOrUpdateCursorPosition(target, direction);
            _this.dispatchMouseMoveEvent(getSeekBar(target));
            preventDefault();
        };
        this.onAction = function (action, target, preventDefault) {
            if (!isSeekBarWrapper(target)) {
                return;
            }
            var seekBar = getSeekBar(target);
            if (action === types_1.Action.SELECT && _this.isScrubbing) {
                _this.dispatchMouseClickEvent(seekBar);
                preventDefault();
            }
            else if (action === types_1.Action.BACK) {
                _this.stopSeeking(seekBar);
                preventDefault();
            }
        };
        this.rootNavigationGroup.onAction = this.onAction;
        this.eventSubscriber = new nodeeventsubscriber_1.NodeEventSubscriber();
        this.rootNavigationGroup.onNavigation = this.onNavigation;
    }
    SeekBarHandler.prototype.updateScrubSpeedPercentage = function () {
        var _this = this;
        clearTimeout(this.scrubSpeedResetTimeout);
        this.scrubSpeedPercentage *= ScrubSpeedMultiplier;
        this.scrubSpeedResetTimeout = window.setTimeout(function () { return _this.scrubSpeedPercentage = DefaultScrubSpeedPercentage; }, ScrubSpeedClearInterval);
    };
    SeekBarHandler.prototype.getIncrement = function (direction, seekBarWrapper) {
        this.updateScrubSpeedPercentage();
        var seekBarWidth = seekBarWrapper.getBoundingClientRect().width;
        var increment = seekBarWidth * this.scrubSpeedPercentage;
        return direction === types_1.Direction.RIGHT ? increment : -increment;
    };
    SeekBarHandler.prototype.resetCursorPosition = function () {
        this.cursorPosition.x = 0;
        this.cursorPosition.y = 0;
    };
    SeekBarHandler.prototype.updateCursorPosition = function (direction, seekBarWrapper) {
        this.cursorPosition.x += this.getIncrement(direction, seekBarWrapper);
    };
    SeekBarHandler.prototype.initializeCursorPosition = function (seekBarWrapper) {
        var playbackPositionMarker = getPlaybackPositionMarker(seekBarWrapper);
        var rect = (0, navigationalgorithm_1.getBoundingRectFromElement)(playbackPositionMarker);
        var startX = rect.x + (rect.width / 2);
        var startY = rect.y;
        this.cursorPosition.x = startX;
        this.cursorPosition.y = startY;
    };
    SeekBarHandler.prototype.initializeOrUpdateCursorPosition = function (seekBarWrapper, direction) {
        if (this.isScrubbing) {
            this.updateCursorPosition(direction, seekBarWrapper);
        }
        else {
            this.initializeCursorPosition(seekBarWrapper);
        }
        this.isScrubbing = true;
    };
    SeekBarHandler.prototype.getCursorPositionMouseEventInit = function () {
        return {
            clientX: this.cursorPosition.x,
            clientY: this.cursorPosition.y,
        };
    };
    SeekBarHandler.prototype.dispatchMouseMoveEvent = function (seekBar) {
        seekBar.dispatchEvent(new MouseEvent('mousemove', this.getCursorPositionMouseEventInit()));
    };
    SeekBarHandler.prototype.dispatchMouseClickEvent = function (seekBar) {
        var _this = this;
        var mouseDownHandler = function () {
            var mouseEventInit = _this.getCursorPositionMouseEventInit();
            document.dispatchEvent(new MouseEvent('mouseup', mouseEventInit));
            _this.eventSubscriber.off(seekBar, 'mousedown', mouseDownHandler);
            _this.stopSeeking(seekBar);
        };
        this.eventSubscriber.on(seekBar, 'mousedown', mouseDownHandler);
        seekBar.dispatchEvent(new MouseEvent('mousedown'));
    };
    SeekBarHandler.prototype.stopSeeking = function (seekBar) {
        this.resetCursorPosition();
        this.isScrubbing = false;
        this.dispatchMouseLeaveEvent(seekBar);
    };
    SeekBarHandler.prototype.dispatchMouseLeaveEvent = function (seekBar) {
        seekBar.dispatchEvent(new MouseEvent('mouseleave'));
    };
    /**
     * Releases the SeekBraHandler, making sure all event subscribers are removed.
     */
    SeekBarHandler.prototype.release = function () {
        this.eventSubscriber.release();
        this.rootNavigationGroup.onAction = undefined;
        this.rootNavigationGroup.onNavigation = undefined;
    };
    return SeekBarHandler;
}());
exports.SeekBarHandler = SeekBarHandler;
function isSeekBarWrapper(element) {
    return Array.from(element.classList).findIndex(function (className) { return /-ui-seekbar$/.test(className); }) > -1;
}
function getSeekBar(seekBarWrapper) {
    return seekBarWrapper.children.item(0);
}
function getPlaybackPositionMarker(seekBarWrapper) {
    return seekBarWrapper.querySelector('[class*="seekbar-playbackposition-marker"]');
}

},{"./navigationalgorithm":101,"./nodeeventsubscriber":103,"./types":108}],106:[function(require,module,exports){
"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpatialNavigation = void 0;
var nodeeventsubscriber_1 = require("./nodeeventsubscriber");
var seekbarhandler_1 = require("./seekbarhandler");
var keymap_1 = require("./keymap");
var typeguards_1 = require("./typeguards");
/**
 * SpatialNavigation keeps track of all navigation groups, and updates the active navigation group when visibility
 * changes on group container.
 *
 * It listens to key events, and triggers either handleNavigation or handleAction on the active group.
 * SeekBarHandler will get instantiated with root navigation group and disposed on release of the spatial navigation.
 */
var SpatialNavigation = /** @class */ (function () {
    function SpatialNavigation(rootNavigationGroup) {
        var navigationGroups = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            navigationGroups[_i - 1] = arguments[_i];
        }
        var _this = this;
        this.navigationGroups = [];
        this.onShow = function (group) {
            _this.activeNavigationGroups.push(group);
            _this.updateEnabledNavigationGroup();
        };
        this.onHide = function (group) {
            var groupIndex = _this.activeNavigationGroups.findIndex(function (other) { return other === group; });
            if (groupIndex > -1) {
                group.disable();
                _this.activeNavigationGroups.splice(groupIndex, 1);
                _this.updateEnabledNavigationGroup();
            }
        };
        /**
         * Checks if keyboard event keycode is tracked either as Direction or Action and calls appropriate handler on active
         * navigation group
         *
         * @param e {KeyboardEvent}
         */
        this.handleKeyEvent = function (e) {
            var event = _this.keyMap[getKeyCode(e)];
            var active = _this.getActiveNavigationGroup();
            if (!active || !active.container || active.container.isHidden() || active.container.isDisabled()) {
                return;
            }
            if ((0, typeguards_1.isDirection)(event)) {
                active.handleNavigation(event);
                e.preventDefault();
                e.stopPropagation();
            }
            if ((0, typeguards_1.isAction)(event)) {
                active.handleAction(event);
                e.preventDefault();
                e.stopPropagation();
            }
        };
        this.seekBarHandler = new seekbarhandler_1.SeekBarHandler(rootNavigationGroup);
        this.activeNavigationGroups = [];
        this.unsubscribeVisibilityChangesFns = [];
        this.eventSubscriber = new nodeeventsubscriber_1.NodeEventSubscriber();
        this.navigationGroups = __spreadArray([rootNavigationGroup], navigationGroups, true);
        this.keyMap = (0, keymap_1.getKeyMapForPlatform)();
        this.subscribeToNavigationGroupVisibilityChanges();
        this.attachKeyEventHandler();
        this.enableDefaultNavigationGroup();
    }
    SpatialNavigation.prototype.attachKeyEventHandler = function () {
        this.eventSubscriber.on(document, 'keydown', this.handleKeyEvent, true);
    };
    /**
     * Subscribes to onHide and onShow on all navigation groups containers as Spatial navigation tracks active navigation
     * group based on their container visibility.
     */
    SpatialNavigation.prototype.subscribeToNavigationGroupVisibilityChanges = function () {
        var _this = this;
        this.navigationGroups.forEach(function (group) {
            var onShowHandler = function () { return _this.onShow(group); };
            var onHideHandler = function () { return _this.onHide(group); };
            group.container.onShow.subscribe(onShowHandler);
            group.container.onHide.subscribe(onHideHandler);
            _this.unsubscribeVisibilityChangesFns.push(function () { return group.container.onShow.unsubscribe(onShowHandler); }, function () { return group.container.onHide.unsubscribe(onHideHandler); });
        });
    };
    SpatialNavigation.prototype.unsubscribeFromNavigationGroupVisibilityChanges = function () {
        this.unsubscribeVisibilityChangesFns.forEach(function (unsub) { return unsub(); });
        this.unsubscribeVisibilityChangesFns = [];
    };
    /**
     * It will enable group of which container is currently shown
     * If there are no groups with containers that are currently visible, it will enable root navigation group
     */
    SpatialNavigation.prototype.enableDefaultNavigationGroup = function () {
        var _a;
        var isShown = function (group) { return group.container.isShown(); };
        var groupToEnable = (_a = this.navigationGroups.find(isShown)) !== null && _a !== void 0 ? _a : this.navigationGroups[0];
        if (groupToEnable) {
            this.activeNavigationGroups.push(groupToEnable);
            this.updateEnabledNavigationGroup();
        }
    };
    /**
     * Disables navigation groups that are no longer active and calls enable on last pushed navigation group
     */
    SpatialNavigation.prototype.updateEnabledNavigationGroup = function () {
        var _this = this;
        this.activeNavigationGroups.forEach(function (group, idx) {
            if (idx < _this.activeNavigationGroups.length - 1) {
                group.disable();
            }
            else {
                group.enable();
            }
        });
    };
    /**
     * Returns currently active navigation group
     */
    SpatialNavigation.prototype.getActiveNavigationGroup = function () {
        return this.activeNavigationGroups[this.activeNavigationGroups.length - 1];
    };
    /**
     * Dispose of SpatialNavigation
     *
     * Remove all event handlers, release seekbar handler and release all navigation groups.
     */
    SpatialNavigation.prototype.release = function () {
        this.unsubscribeFromNavigationGroupVisibilityChanges();
        this.eventSubscriber.release();
        this.navigationGroups.forEach(function (group) { return group.release(); });
        this.seekBarHandler.release();
    };
    return SpatialNavigation;
}());
exports.SpatialNavigation = SpatialNavigation;
function getKeyCode(event) {
    return event.keyCode;
}

},{"./keymap":100,"./nodeeventsubscriber":103,"./seekbarhandler":105,"./typeguards":107}],107:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAction = exports.isDirection = exports.isListBox = exports.isContainer = exports.isComponent = exports.isSettingsPanel = void 0;
var component_1 = require("../components/component");
var settingspanel_1 = require("../components/settingspanel");
var container_1 = require("../components/container");
var listbox_1 = require("../components/listbox");
var types_1 = require("./types");
function isSettingsPanel(component) {
    return component instanceof settingspanel_1.SettingsPanel;
}
exports.isSettingsPanel = isSettingsPanel;
function isComponent(obj) {
    return obj !== null && obj !== undefined && obj instanceof component_1.Component;
}
exports.isComponent = isComponent;
function isContainer(obj) {
    return obj !== null && obj !== undefined && obj instanceof container_1.Container;
}
exports.isContainer = isContainer;
function isListBox(obj) {
    return obj instanceof listbox_1.ListBox;
}
exports.isListBox = isListBox;
function isDirection(direction) {
    return typeof direction === 'string' && Object.values(types_1.Direction).includes(direction);
}
exports.isDirection = isDirection;
function isAction(action) {
    return typeof action === 'string' && Object.values(types_1.Action).includes(action);
}
exports.isAction = isAction;

},{"../components/component":23,"../components/container":24,"../components/listbox":32,"../components/settingspanel":47,"./types":108}],108:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Action = exports.Direction = void 0;
var Direction;
(function (Direction) {
    Direction["UP"] = "up";
    Direction["DOWN"] = "down";
    Direction["LEFT"] = "left";
    Direction["RIGHT"] = "right";
})(Direction = exports.Direction || (exports.Direction = {}));
var Action;
(function (Action) {
    Action["SELECT"] = "select";
    Action["BACK"] = "back";
})(Action = exports.Action || (exports.Action = {}));

},{}],109:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageUtils = void 0;
var StorageUtils;
(function (StorageUtils) {
    var hasLocalStorageCache;
    function hasLocalStorage() {
        if (hasLocalStorageCache) {
            return hasLocalStorageCache;
        }
        // hasLocalStorage is used to safely ensure we can use localStorage
        // taken from https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage
        var storage = { length: 0 };
        try {
            storage = window['localStorage'];
            var x = '__storage_test__';
            storage.setItem(x, x);
            storage.removeItem(x);
            hasLocalStorageCache = true;
        }
        catch (e) {
            hasLocalStorageCache = e instanceof DOMException && (
            // everything except Firefox
            e.code === 22 ||
                // Firefox
                e.code === 1014 ||
                // test name field too, because code might not be present
                // everything except Firefox
                e.name === 'QuotaExceededError' ||
                // Firefox
                e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&
                // acknowledge QuotaExceededError only if there's something already stored
                storage.length !== 0;
        }
        return hasLocalStorageCache;
    }
    StorageUtils.hasLocalStorage = hasLocalStorage;
    /**
     * Stores a string item into localStorage.
     * @param key the item's key
     * @param data the item's data
     */
    function setItem(key, data) {
        if (StorageUtils.hasLocalStorage()) {
            window.localStorage.setItem(key, data);
        }
    }
    StorageUtils.setItem = setItem;
    /**
     * Gets an item's string value from the localStorage.
     * @param key the key to look up its associated value
     * @return {string | null} Returns the string if found, null if there is no data stored for the key
     */
    function getItem(key) {
        if (StorageUtils.hasLocalStorage()) {
            return window.localStorage.getItem(key);
        }
        else {
            return null;
        }
    }
    StorageUtils.getItem = getItem;
    /**
     * Stores an object into localStorage. The object will be serialized to JSON. The following types are supported
     * in addition to the default types:
     *  - ColorUtils.Color
     *
     * @param key the key to store the data to
     * @param data the object to store
     */
    function setObject(key, data) {
        if (StorageUtils.hasLocalStorage()) {
            var json = JSON.stringify(data);
            setItem(key, json);
        }
    }
    StorageUtils.setObject = setObject;
    /**
     * Gets an object for the given key from localStorage. The object will be deserialized from JSON. Beside the
     * default types, the following types are supported:
     *  - ColorUtils.Color
     *
     * @param key the key to look up its associated object
     * @return {any} Returns the object if found, null otherwise
     */
    function getObject(key) {
        if (StorageUtils.hasLocalStorage()) {
            var json = getItem(key);
            if (key) {
                var object = JSON.parse(json);
                return object;
            }
        }
        return null;
    }
    StorageUtils.getObject = getObject;
})(StorageUtils = exports.StorageUtils || (exports.StorageUtils = {}));

},{}],110:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringUtils = void 0;
var i18n_1 = require("./localization/i18n");
var StringUtils;
(function (StringUtils) {
    StringUtils.FORMAT_HHMMSS = 'hh:mm:ss';
    StringUtils.FORMAT_MMSS = 'mm:ss';
    /**
     * Formats a number of seconds into a time string with the pattern hh:mm:ss.
     *
     * @param totalSeconds the total number of seconds to format to string
     * @param format the time format to output (default: hh:mm:ss)
     * @returns {string} the formatted time string
     */
    function secondsToTime(totalSeconds, format) {
        if (format === void 0) { format = StringUtils.FORMAT_HHMMSS; }
        var isNegative = totalSeconds < 0;
        if (isNegative) {
            // If the time is negative, we make it positive for the calculation below
            // (else we'd get all negative numbers) and reattach the negative sign later.
            totalSeconds = -totalSeconds;
        }
        // Split into separate time parts
        var hours = Math.floor(totalSeconds / 3600);
        var minutes = Math.floor(totalSeconds / 60) - hours * 60;
        var seconds = Math.floor(totalSeconds) % 60;
        return (isNegative ? '-' : '') + format
            .replace('hh', leftPadWithZeros(hours, 2))
            .replace('mm', leftPadWithZeros(minutes, 2))
            .replace('ss', leftPadWithZeros(seconds, 2));
    }
    StringUtils.secondsToTime = secondsToTime;
    function secondsToText(totalSeconds) {
        var isNegative = totalSeconds < 0;
        if (isNegative) {
            // If the time is negative, we make it positive for the calculation below
            // (else we'd get all negative numbers) and reattach the negative sign later.
            totalSeconds = -totalSeconds;
        }
        // Split into separate time parts
        var hours = Math.floor(totalSeconds / 3600);
        var minutes = Math.floor(totalSeconds / 60) - hours * 60;
        var seconds = Math.floor(totalSeconds) % 60;
        return (isNegative ? '-' : '') +
            (hours !== 0 ? "".concat(leftPadWithZeros(hours, 2), " ").concat(i18n_1.i18n.performLocalization(i18n_1.i18n.getLocalizer('settings.time.hours')), " ") : '') +
            (minutes !== 0 ? "".concat(leftPadWithZeros(minutes, 2), " ").concat(i18n_1.i18n.performLocalization(i18n_1.i18n.getLocalizer('settings.time.minutes')), " ") : '') +
            "".concat(leftPadWithZeros(seconds, 2), " ").concat(i18n_1.i18n.performLocalization(i18n_1.i18n.getLocalizer('settings.time.seconds')));
    }
    StringUtils.secondsToText = secondsToText;
    /**
     * Converts a number to a string and left-pads it with zeros to the specified length.
     * Example: leftPadWithZeros(123, 5) => '00123'
     *
     * @param num the number to convert to string and pad with zeros
     * @param length the desired length of the padded string
     * @returns {string} the padded number as string
     */
    function leftPadWithZeros(num, length) {
        var text = num + '';
        var padding = '0000000000'.substr(0, length - text.length);
        return padding + text;
    }
    /**
     * Fills out placeholders in an ad message.
     *
     * Has the placeholders '{remainingTime[formatString]}', '{playedTime[formatString]}' and
     * '{adDuration[formatString]}', which are replaced by the remaining time until the ad can be skipped, the current
     * time or the ad duration. The format string is optional. If not specified, the placeholder is replaced by the time
     * in seconds. If specified, it must be of the following format:
     * - %d - Inserts the time as an integer.
     * - %0Nd - Inserts the time as an integer with leading zeroes, if the length of the time string is smaller than N.
     * - %f - Inserts the time as a float.
     * - %0Nf - Inserts the time as a float with leading zeroes.
     * - %.Mf - Inserts the time as a float with M decimal places. Can be combined with %0Nf, e.g. %04.2f (the time
     * 10.123 would be printed as 0010.12).
     * - %hh:mm:ss
     * - %mm:ss
     *
     * Examples:
     * - { text: 'Ad: {remainingTime%mm:ss} secs' }
     * An input value of 100 would be displayed as: 'Ad: 01:40 secs'
     * - { text: 'Ad: {remainingTime%f} secs' }
     * An input value of 100 would be displayed as: 'Ad: 100.0 secs'
     *
     * @param adMessage an ad message with optional placeholders to fill
     * @param skipOffset if specified, {remainingTime} will be filled with the remaining time until the ad can be skipped
     * @param player the player to get the time data from
     * @returns {string} the ad message with filled placeholders
     */
    function replaceAdMessagePlaceholders(adMessage, skipOffset, player) {
        var adMessagePlaceholderRegex = new RegExp('\\{(remainingTime|playedTime|adDuration)(}|%((0[1-9]\\d*(\\.\\d+(d|f)|d|f)|\\.\\d+f|d|f)|hh:mm:ss|mm:ss)})', 'g');
        return adMessage.replace(adMessagePlaceholderRegex, function (formatString) {
            var time = 0;
            if (formatString.indexOf('remainingTime') > -1) {
                if (skipOffset) {
                    time = Math.ceil(skipOffset - player.getCurrentTime());
                }
                else {
                    time = player.getDuration() - player.getCurrentTime();
                }
            }
            else if (formatString.indexOf('playedTime') > -1) {
                time = player.getCurrentTime();
            }
            else if (formatString.indexOf('adDuration') > -1) {
                time = player.getDuration();
            }
            return formatNumber(Math.round(time), formatString);
        });
    }
    StringUtils.replaceAdMessagePlaceholders = replaceAdMessagePlaceholders;
    function formatNumber(time, format) {
        var formatStringValidationRegex = /%((0[1-9]\d*(\.\d+(d|f)|d|f)|\.\d+f|d|f)|hh:mm:ss|mm:ss)/;
        var leadingZeroesRegex = /(%0[1-9]\d*)(?=(\.\d+f|f|d))/;
        var decimalPlacesRegex = /\.\d*(?=f)/;
        if (!formatStringValidationRegex.test(format)) {
            // If the format is invalid, we set a default fallback format
            format = '%d';
        }
        // Determine the number of leading zeros
        var leadingZeroes = 0;
        var leadingZeroesMatches = format.match(leadingZeroesRegex);
        if (leadingZeroesMatches) {
            leadingZeroes = parseInt(leadingZeroesMatches[0].substring(2));
        }
        // Determine the number of decimal places
        var numDecimalPlaces = null;
        var decimalPlacesMatches = format.match(decimalPlacesRegex);
        if (decimalPlacesMatches && !isNaN(parseInt(decimalPlacesMatches[0].substring(1)))) {
            numDecimalPlaces = parseInt(decimalPlacesMatches[0].substring(1));
            if (numDecimalPlaces > 20) {
                numDecimalPlaces = 20;
            }
        }
        // Float format
        if (format.indexOf('f') > -1) {
            var timeString = '';
            if (numDecimalPlaces !== null) {
                // Apply fixed number of decimal places
                timeString = time.toFixed(numDecimalPlaces);
            }
            else {
                timeString = '' + time;
            }
            // Apply leading zeros
            if (timeString.indexOf('.') > -1) {
                return leftPadWithZeros(timeString, timeString.length + (leadingZeroes - timeString.indexOf('.')));
            }
            else {
                return leftPadWithZeros(timeString, leadingZeroes);
            }
        }
        // Time format
        else if (format.indexOf(':') > -1) {
            var totalSeconds = Math.ceil(time);
            // hh:mm:ss format
            if (format.indexOf('hh') > -1) {
                return secondsToTime(totalSeconds);
            }
            // mm:ss format
            else {
                var minutes = Math.floor(totalSeconds / 60);
                var seconds = totalSeconds % 60;
                return leftPadWithZeros(minutes, 2) + ':' + leftPadWithZeros(seconds, 2);
            }
        }
        // Integer format
        else {
            return leftPadWithZeros(Math.ceil(time), leadingZeroes);
        }
    }
})(StringUtils = exports.StringUtils || (exports.StringUtils = {}));

},{"./localization/i18n":91}],111:[function(require,module,exports){
"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleSwitchHandler = void 0;
var i18n_1 = require("./localization/i18n");
/**
 * Helper class to handle all subtitle related events
 *
 * This class listens to player events as well as the `ListSelector` event if selection changed
 */
var SubtitleSwitchHandler = exports.SubtitleSwitchHandler = /** @class */ (function () {
    function SubtitleSwitchHandler(player, element, uimanager) {
        var _this = this;
        this.addSubtitle = function (event) {
            var subtitle = event.subtitle;
            if (!_this.listElement.hasItem(subtitle.id)) {
                _this.listElement.addItem(subtitle.id, subtitle.label);
            }
        };
        this.removeSubtitle = function (event) {
            var subtitle = event.subtitle;
            if (_this.listElement.hasItem(subtitle.id)) {
                _this.listElement.removeItem(subtitle.id);
            }
        };
        this.selectCurrentSubtitle = function () {
            if (!_this.player.subtitles) {
                // Subtitles API not available (yet)
                return;
            }
            var currentSubtitle = _this.player.subtitles.list().filter(function (subtitle) { return subtitle.enabled; }).pop();
            _this.listElement.selectItem(currentSubtitle ? currentSubtitle.id : SubtitleSwitchHandler.SUBTITLES_OFF_KEY);
        };
        this.clearSubtitles = function () {
            _this.listElement.clearItems();
        };
        this.refreshSubtitles = function () {
            if (!_this.player.subtitles) {
                // Subtitles API not available (yet)
                return;
            }
            var offListItem = {
                key: SubtitleSwitchHandler.SUBTITLES_OFF_KEY,
                label: i18n_1.i18n.getLocalizer('off'),
            };
            var subtitles = _this.player.subtitles.list();
            var subtitleToListItem = function (subtitle) {
                return { key: subtitle.id, label: subtitle.label };
            };
            _this.listElement.synchronizeItems(__spreadArray([
                offListItem
            ], subtitles.map(subtitleToListItem), true));
            _this.selectCurrentSubtitle();
        };
        this.player = player;
        this.listElement = element;
        this.uimanager = uimanager;
        this.bindSelectionEvent();
        this.bindPlayerEvents();
        this.refreshSubtitles();
    }
    SubtitleSwitchHandler.prototype.bindSelectionEvent = function () {
        var _this = this;
        this.listElement.onItemSelected.subscribe(function (_, value) {
            // TODO add support for multiple concurrent subtitle selections
            if (value === SubtitleSwitchHandler.SUBTITLES_OFF_KEY) {
                var currentSubtitle = _this.player.subtitles.list().filter(function (subtitle) { return subtitle.enabled; }).pop();
                if (currentSubtitle) {
                    _this.player.subtitles.disable(currentSubtitle.id);
                }
            }
            else {
                _this.player.subtitles.enable(value, true);
            }
        });
    };
    SubtitleSwitchHandler.prototype.bindPlayerEvents = function () {
        this.player.on(this.player.exports.PlayerEvent.SubtitleAdded, this.addSubtitle);
        this.player.on(this.player.exports.PlayerEvent.SubtitleEnabled, this.selectCurrentSubtitle);
        this.player.on(this.player.exports.PlayerEvent.SubtitleDisabled, this.selectCurrentSubtitle);
        this.player.on(this.player.exports.PlayerEvent.SubtitleRemoved, this.removeSubtitle);
        // Update subtitles when source goes away
        this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.clearSubtitles);
        // Update subtitles when the period within a source changes
        this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshSubtitles);
        this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshSubtitles);
    };
    SubtitleSwitchHandler.SUBTITLES_OFF_KEY = 'null';
    return SubtitleSwitchHandler;
}());

},{"./localization/i18n":91}],112:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Timeout = void 0;
// TODO change to internal (not exported) class, how to use in other files?
/**
 * Executes a callback after a specified amount of time, optionally repeatedly until stopped.
 */
var Timeout = /** @class */ (function () {
    /**
     * Creates a new timeout callback handler.
     * @param delay the delay in milliseconds after which the callback should be executed
     * @param callback the callback to execute after the delay time
     * @param repeat if true, call the callback repeatedly in delay intervals
     */
    function Timeout(delay, callback, repeat) {
        if (repeat === void 0) { repeat = false; }
        this.delay = delay;
        this.callback = callback;
        this.repeat = repeat;
        this.timeoutOrIntervalId = 0;
        this.active = false;
    }
    /**
     * Starts the timeout and calls the callback when the timeout delay has passed.
     * @returns {Timeout} the current timeout (so the start call can be chained to the constructor)
     */
    Timeout.prototype.start = function () {
        this.reset();
        return this;
    };
    /**
     * Clears the timeout. The callback will not be called if clear is called during the timeout.
     */
    Timeout.prototype.clear = function () {
        this.clearInternal();
    };
    /**
     * Resets the passed timeout delay to zero. Can be used to defer the calling of the callback.
     */
    Timeout.prototype.reset = function () {
        var _this = this;
        this.clearInternal();
        if (this.repeat) {
            this.timeoutOrIntervalId = setInterval(this.callback, this.delay);
        }
        else {
            this.timeoutOrIntervalId = setTimeout(function () {
                _this.active = false;
                _this.callback();
            }, this.delay);
        }
        this.active = true;
    };
    Timeout.prototype.isActive = function () {
        return this.active;
    };
    Timeout.prototype.clearInternal = function () {
        if (this.repeat) {
            clearInterval(this.timeoutOrIntervalId);
        }
        else {
            clearTimeout(this.timeoutOrIntervalId);
        }
        this.active = false;
    };
    return Timeout;
}());
exports.Timeout = Timeout;

},{}],113:[function(require,module,exports){
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UIFactory = void 0;
var gobackbutton_1 = require("./../custom/ts/components/gobackbutton");
var radiomodetogglebutton_1 = require("./../custom/ts/components/radiomode/radiomodetogglebutton");
var playbackjumpoverlay_1 = require("../custom/ts/components/playbackjumpoverlay");
var subtitleoverlay_1 = require("./components/subtitleoverlay");
var settingspanelpage_1 = require("./components/settingspanelpage");
var settingspanelitem_1 = require("./components/settingspanelitem");
var videoqualityselectbox_1 = require("./components/videoqualityselectbox");
var playbackspeedselectbox_1 = require("./components/playbackspeedselectbox");
var audiotrackselectbox_1 = require("./components/audiotrackselectbox");
var audioqualityselectbox_1 = require("./components/audioqualityselectbox");
var settingspanel_1 = require("./components/settingspanel");
var subtitlesettingspanelpage_1 = require("./components/subtitlesettings/subtitlesettingspanelpage");
var settingspanelpageopenbutton_1 = require("./components/settingspanelpageopenbutton");
var subtitlesettingslabel_1 = require("./components/subtitlesettings/subtitlesettingslabel");
var subtitleselectbox_1 = require("./components/subtitleselectbox");
var controlbar_1 = require("./components/controlbar");
var container_1 = require("./components/container");
var playbacktimelabel_1 = require("./components/playbacktimelabel");
var seekbar_1 = require("./components/seekbar");
var seekbarlabel_1 = require("./components/seekbarlabel");
var playbacktogglebutton_1 = require("./components/playbacktogglebutton");
var volumetogglebutton_1 = require("./components/volumetogglebutton");
var volumeslider_1 = require("./components/volumeslider");
var spacer_1 = require("./components/spacer");
var pictureinpicturetogglebutton_1 = require("./components/pictureinpicturetogglebutton");
var airplaytogglebutton_1 = require("./components/airplaytogglebutton");
var casttogglebutton_1 = require("./components/casttogglebutton");
var vrtogglebutton_1 = require("./components/vrtogglebutton");
var settingstogglebutton_1 = require("./components/settingstogglebutton");
var fullscreentogglebutton_1 = require("./components/fullscreentogglebutton");
var uicontainer_1 = require("./components/uicontainer");
var bufferingoverlay_1 = require("./components/bufferingoverlay");
var playbacktoggleoverlay_1 = require("./components/playbacktoggleoverlay");
var caststatusoverlay_1 = require("./components/caststatusoverlay");
var titlebar_1 = require("./components/titlebar");
var recommendationoverlay_1 = require("./components/recommendationoverlay");
var watermark_1 = require("./components/watermark");
var errormessageoverlay_1 = require("./components/errormessageoverlay");
var adclickoverlay_1 = require("./components/adclickoverlay");
var admessagelabel_1 = require("./components/admessagelabel");
var adskipbutton_1 = require("./components/adskipbutton");
var closebutton_1 = require("./components/closebutton");
var metadatalabel_1 = require("./components/metadatalabel");
var playerutils_1 = require("./playerutils");
var label_1 = require("./components/label");
var castuicontainer_1 = require("./components/castuicontainer");
var uimanager_1 = require("./uimanager");
var i18n_1 = require("./localization/i18n");
var subtitlelistbox_1 = require("./components/subtitlelistbox");
var audiotracklistbox_1 = require("./components/audiotracklistbox");
var spatialnavigation_1 = require("./spatialnavigation/spatialnavigation");
var rootnavigationgroup_1 = require("./spatialnavigation/rootnavigationgroup");
var ListNavigationGroup_1 = require("./spatialnavigation/ListNavigationGroup");
var uiManager;
var playerApi;
var uiConfig;
var UIFactory;
(function (UIFactory) {
    function buildDefaultUI(player, config) {
        if (config === void 0) { config = {}; }
        return UIFactory.buildModernUI(player, config);
    }
    UIFactory.buildDefaultUI = buildDefaultUI;
    function buildDefaultSmallScreenUI(player, config) {
        if (config === void 0) { config = {}; }
        uiConfig = config;
        playerApi = player;
        uiManager = UIFactory.buildModernSmallScreenUI(player, config);
        return uiManager;
    }
    UIFactory.buildDefaultSmallScreenUI = buildDefaultSmallScreenUI;
    function buildDefaultCastReceiverUI(player, config) {
        if (config === void 0) { config = {}; }
        return UIFactory.buildModernCastReceiverUI(player, config);
    }
    UIFactory.buildDefaultCastReceiverUI = buildDefaultCastReceiverUI;
    function buildDefaultTvUI(player, config) {
        if (config === void 0) { config = {}; }
        return UIFactory.buildModernTvUI(player, config);
    }
    UIFactory.buildDefaultTvUI = buildDefaultTvUI;
    function modernUI() {
        var subtitleOverlay = new subtitleoverlay_1.SubtitleOverlay();
        var mainSettingsPanelPage = new settingspanelpage_1.SettingsPanelPage({
            components: [
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.video.quality'), new videoqualityselectbox_1.VideoQualitySelectBox()),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('speed'), new playbackspeedselectbox_1.PlaybackSpeedSelectBox()),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.audio.track'), new audiotrackselectbox_1.AudioTrackSelectBox()),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.audio.quality'), new audioqualityselectbox_1.AudioQualitySelectBox()),
            ],
        });
        var settingsPanel = new settingspanel_1.SettingsPanel({
            components: [mainSettingsPanelPage],
            hidden: true,
        });
        var subtitleSettingsPanelPage = new subtitlesettingspanelpage_1.SubtitleSettingsPanelPage({
            settingsPanel: settingsPanel,
            overlay: subtitleOverlay,
        });
        var subtitleSelectBox = new subtitleselectbox_1.SubtitleSelectBox();
        var subtitleSettingsOpenButton = new settingspanelpageopenbutton_1.SettingsPanelPageOpenButton({
            targetPage: subtitleSettingsPanelPage,
            container: settingsPanel,
            ariaLabel: i18n_1.i18n.getLocalizer('settings.subtitles'),
            text: i18n_1.i18n.getLocalizer('open'),
        });
        mainSettingsPanelPage.addComponent(new settingspanelitem_1.SettingsPanelItem(new subtitlesettingslabel_1.SubtitleSettingsLabel({
            text: i18n_1.i18n.getLocalizer('settings.subtitles'),
            opener: subtitleSettingsOpenButton,
        }), subtitleSelectBox, {
            role: 'menubar',
        }));
        settingsPanel.addComponent(subtitleSettingsPanelPage);
        var controlBar = new controlbar_1.ControlBar({
            components: [
                settingsPanel,
                new container_1.Container({
                    components: [
                        new playbacktimelabel_1.PlaybackTimeLabel({
                            timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.CurrentTime,
                            hideInLivePlayback: true,
                        }),
                        new seekbar_1.SeekBar({ label: new seekbarlabel_1.SeekBarLabel() }),
                        new playbacktimelabel_1.PlaybackTimeLabel({
                            timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.TotalTime,
                            cssClasses: ['text-right'],
                        }),
                    ],
                    cssClasses: ['controlbar-top'],
                }),
                new container_1.Container({
                    components: [
                        new playbacktogglebutton_1.PlaybackToggleButton(),
                        new volumetogglebutton_1.VolumeToggleButton(),
                        new volumeslider_1.VolumeSlider(),
                        new spacer_1.Spacer(),
                        new pictureinpicturetogglebutton_1.PictureInPictureToggleButton(),
                        new airplaytogglebutton_1.AirPlayToggleButton(),
                        new casttogglebutton_1.CastToggleButton(),
                        new radiomodetogglebutton_1.RadioModeToggleButton(),
                        new vrtogglebutton_1.VRToggleButton(),
                        new settingstogglebutton_1.SettingsToggleButton({ settingsPanel: settingsPanel }),
                        new fullscreentogglebutton_1.FullscreenToggleButton(),
                    ],
                    cssClasses: ['controlbar-bottom'],
                }),
            ],
        });
        return new uicontainer_1.UIContainer({
            components: [
                subtitleOverlay,
                new bufferingoverlay_1.BufferingOverlay(),
                new playbacktoggleoverlay_1.PlaybackToggleOverlay(),
                new playbackjumpoverlay_1.PlaybackJumpControlsOverlay(),
                new caststatusoverlay_1.CastStatusOverlay(),
                controlBar,
                new titlebar_1.TitleBar(),
                new recommendationoverlay_1.RecommendationOverlay(),
                new watermark_1.Watermark(),
                new errormessageoverlay_1.ErrorMessageOverlay(),
            ],
            hideDelay: 2000,
            hidePlayerStateExceptions: [
                playerutils_1.PlayerUtils.PlayerState.Prepared,
                playerutils_1.PlayerUtils.PlayerState.Paused,
                playerutils_1.PlayerUtils.PlayerState.Finished,
            ],
        });
    }
    UIFactory.modernUI = modernUI;
    function modernAdsUI() {
        return new uicontainer_1.UIContainer({
            components: [
                new bufferingoverlay_1.BufferingOverlay(),
                new adclickoverlay_1.AdClickOverlay(),
                new playbacktoggleoverlay_1.PlaybackToggleOverlay(),
                new container_1.Container({
                    components: [
                        new admessagelabel_1.AdMessageLabel({
                            text: i18n_1.i18n.getLocalizer('ads.remainingTime'),
                        }),
                        new adskipbutton_1.AdSkipButton(),
                    ],
                    cssClass: 'ui-ads-status',
                }),
                new controlbar_1.ControlBar({
                    components: [
                        new container_1.Container({
                            components: [
                                new playbacktogglebutton_1.PlaybackToggleButton(),
                                new volumetogglebutton_1.VolumeToggleButton(),
                                new volumeslider_1.VolumeSlider(),
                                new spacer_1.Spacer(),
                                new fullscreentogglebutton_1.FullscreenToggleButton(),
                            ],
                            cssClasses: ['controlbar-bottom'],
                        }),
                    ],
                }),
            ],
            cssClasses: ['ui-skin-ads'],
            hideDelay: 2000,
            hidePlayerStateExceptions: [
                playerutils_1.PlayerUtils.PlayerState.Prepared,
                playerutils_1.PlayerUtils.PlayerState.Paused,
                playerutils_1.PlayerUtils.PlayerState.Finished,
            ],
        });
    }
    UIFactory.modernAdsUI = modernAdsUI;
    function modernSmallScreenUI() {
        var subtitleOverlay = new subtitleoverlay_1.SubtitleOverlay();
        var mainSettingsPanelPage = new settingspanelpage_1.SettingsPanelPage({
            components: [
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.video.quality'), new videoqualityselectbox_1.VideoQualitySelectBox()),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('speed'), new playbackspeedselectbox_1.PlaybackSpeedSelectBox()),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.audio.track'), new audiotrackselectbox_1.AudioTrackSelectBox()),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.audio.quality'), new audioqualityselectbox_1.AudioQualitySelectBox()),
            ],
        });
        var settingsPanel = new settingspanel_1.SettingsPanel({
            components: [mainSettingsPanelPage],
            hidden: true,
            pageTransitionAnimation: false,
            hideDelay: -1,
        });
        var subtitleSettingsPanelPage = new subtitlesettingspanelpage_1.SubtitleSettingsPanelPage({
            settingsPanel: settingsPanel,
            overlay: subtitleOverlay,
        });
        var subtitleSettingsOpenButton = new settingspanelpageopenbutton_1.SettingsPanelPageOpenButton({
            targetPage: subtitleSettingsPanelPage,
            container: settingsPanel,
            ariaLabel: i18n_1.i18n.getLocalizer('settings.subtitles'),
            text: i18n_1.i18n.getLocalizer('open'),
        });
        var subtitleSelectBox = new subtitleselectbox_1.SubtitleSelectBox();
        mainSettingsPanelPage.addComponent(new settingspanelitem_1.SettingsPanelItem(new subtitlesettingslabel_1.SubtitleSettingsLabel({
            text: i18n_1.i18n.getLocalizer('settings.subtitles'),
            opener: subtitleSettingsOpenButton,
        }), subtitleSelectBox, {
            role: 'menubar',
        }));
        settingsPanel.addComponent(subtitleSettingsPanelPage);
        settingsPanel.addComponent(new closebutton_1.CloseButton({ target: settingsPanel }));
        subtitleSettingsPanelPage.addComponent(new closebutton_1.CloseButton({ target: settingsPanel }));
        var controlBar = new controlbar_1.ControlBar({
            components: [
                new container_1.Container({
                    components: [
                        new playbacktimelabel_1.PlaybackTimeLabel({
                            timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.CurrentTime,
                            hideInLivePlayback: true,
                        }),
                        new seekbar_1.SeekBar({ label: new seekbarlabel_1.SeekBarLabel() }),
                        new playbacktimelabel_1.PlaybackTimeLabel({
                            timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.TotalTime,
                            cssClasses: ['text-right'],
                        }),
                        new fullscreentogglebutton_1.FullscreenToggleButton({
                            cssClasses: ['controlbar-fullscreen-toggle-button'],
                        }),
                    ],
                    cssClasses: ['controlbar-top'],
                }),
            ],
        });
        return new uicontainer_1.UIContainer({
            components: [
                subtitleOverlay,
                new bufferingoverlay_1.BufferingOverlay(),
                new caststatusoverlay_1.CastStatusOverlay(),
                new playbacktoggleoverlay_1.PlaybackToggleOverlay(),
                new playbackjumpoverlay_1.PlaybackJumpControlsOverlay(),
                new recommendationoverlay_1.RecommendationOverlay(),
                controlBar,
                new titlebar_1.TitleBar({
                    components: [
                        new gobackbutton_1.GoBackButton(),
                        new metadatalabel_1.MetadataLabel({ content: metadatalabel_1.MetadataLabelContent.Title }),
                        new casttogglebutton_1.CastToggleButton(),
                        new vrtogglebutton_1.VRToggleButton(),
                        new pictureinpicturetogglebutton_1.PictureInPictureToggleButton(),
                        new airplaytogglebutton_1.AirPlayToggleButton(),
                        new radiomodetogglebutton_1.RadioModeToggleButton(),
                        new settingstogglebutton_1.SettingsToggleButton({ settingsPanel: settingsPanel }),
                    ],
                }),
                settingsPanel,
                new watermark_1.Watermark(),
                new errormessageoverlay_1.ErrorMessageOverlay(),
            ],
            cssClasses: ['ui-skin-smallscreen'],
            hideDelay: 2000,
            hidePlayerStateExceptions: [
                playerutils_1.PlayerUtils.PlayerState.Prepared,
                playerutils_1.PlayerUtils.PlayerState.Paused,
                playerutils_1.PlayerUtils.PlayerState.Finished,
            ],
        });
    }
    UIFactory.modernSmallScreenUI = modernSmallScreenUI;
    function modernSmallScreenAdsUI() {
        return new uicontainer_1.UIContainer({
            components: [
                new bufferingoverlay_1.BufferingOverlay(),
                new adclickoverlay_1.AdClickOverlay(),
                new playbacktoggleoverlay_1.PlaybackToggleOverlay(),
                new titlebar_1.TitleBar({
                    components: [
                        // dummy label with no content to move buttons to the right
                        new label_1.Label({ cssClass: 'label-metadata-title' }),
                        new fullscreentogglebutton_1.FullscreenToggleButton(),
                    ],
                }),
                new container_1.Container({
                    components: [
                        new admessagelabel_1.AdMessageLabel({ text: 'Ad: {remainingTime} secs' }),
                        new adskipbutton_1.AdSkipButton(),
                    ],
                    cssClass: 'ui-ads-status',
                }),
            ],
            cssClasses: ['ui-skin-ads', 'ui-skin-smallscreen'],
            hideDelay: 2000,
            hidePlayerStateExceptions: [
                playerutils_1.PlayerUtils.PlayerState.Prepared,
                playerutils_1.PlayerUtils.PlayerState.Paused,
                playerutils_1.PlayerUtils.PlayerState.Finished,
            ],
        });
    }
    UIFactory.modernSmallScreenAdsUI = modernSmallScreenAdsUI;
    function modernCastReceiverUI() {
        var controlBar = new controlbar_1.ControlBar({
            components: [
                new container_1.Container({
                    components: [
                        new playbacktimelabel_1.PlaybackTimeLabel({
                            timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.CurrentTime,
                            hideInLivePlayback: true,
                        }),
                        new seekbar_1.SeekBar({ smoothPlaybackPositionUpdateIntervalMs: -1 }),
                        new playbacktimelabel_1.PlaybackTimeLabel({
                            timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.TotalTime,
                            cssClasses: ['text-right'],
                        }),
                    ],
                    cssClasses: ['controlbar-top'],
                }),
            ],
        });
        return new castuicontainer_1.CastUIContainer({
            components: [
                new subtitleoverlay_1.SubtitleOverlay(),
                new bufferingoverlay_1.BufferingOverlay(),
                new playbacktoggleoverlay_1.PlaybackToggleOverlay(),
                new watermark_1.Watermark(),
                controlBar,
                new titlebar_1.TitleBar({ keepHiddenWithoutMetadata: true }),
                new errormessageoverlay_1.ErrorMessageOverlay(),
            ],
            cssClasses: ['ui-skin-cast-receiver'],
            hideDelay: 2000,
            hidePlayerStateExceptions: [
                playerutils_1.PlayerUtils.PlayerState.Prepared,
                playerutils_1.PlayerUtils.PlayerState.Paused,
                playerutils_1.PlayerUtils.PlayerState.Finished,
            ],
        });
    }
    UIFactory.modernCastReceiverUI = modernCastReceiverUI;
    function buildModernUI(player, config) {
        if (config === void 0) { config = {}; }
        // show smallScreen UI only on mobile/handheld devices
        var smallScreenSwitchWidth = 600;
        return new uimanager_1.UIManager(player, [
            {
                ui: modernSmallScreenAdsUI(),
                condition: function (context) {
                    return (context.isMobile &&
                        context.documentWidth < smallScreenSwitchWidth &&
                        context.isAd &&
                        context.adRequiresUi);
                },
            },
            {
                ui: modernAdsUI(),
                condition: function (context) {
                    return context.isAd && context.adRequiresUi;
                },
            },
            {
                ui: modernSmallScreenUI(),
                condition: function (context) {
                    return (!context.isAd &&
                        !context.adRequiresUi &&
                        context.isMobile &&
                        context.documentWidth < smallScreenSwitchWidth);
                },
            },
            {
                ui: modernUI(),
                condition: function (context) {
                    return !context.isAd && !context.adRequiresUi;
                },
            },
        ], config);
    }
    UIFactory.buildModernUI = buildModernUI;
    function buildModernSmallScreenUI(player, config) {
        if (config === void 0) { config = {}; }
        if (window.bitmovin.customMessageHandler) {
            window.bitmovin.customMessageHandler.on('radioModeChanged', function (data) {
                var activated = (JSON.parse(data) || { activated: false }).activated;
                uiManager.release();
                uiManager = activated
                    ? UIFactory.buildModernRadioModeUI(player, uiConfig)
                    : UIFactory.buildModernSmallScreenUI(player, uiConfig);
            });
        }
        return new uimanager_1.UIManager(player, [
            {
                ui: modernSmallScreenAdsUI(),
                condition: function (context) {
                    return context.isAd && context.adRequiresUi;
                },
            },
            {
                ui: modernSmallScreenUI(),
                condition: function (context) {
                    return !context.isAd && !context.adRequiresUi;
                },
            },
        ], config);
    }
    UIFactory.buildModernSmallScreenUI = buildModernSmallScreenUI;
    function buildModernCastReceiverUI(player, config) {
        if (config === void 0) { config = {}; }
        return new uimanager_1.UIManager(player, modernCastReceiverUI(), config);
    }
    UIFactory.buildModernCastReceiverUI = buildModernCastReceiverUI;
    function buildModernTvUI(player, config) {
        if (config === void 0) { config = {}; }
        return new uimanager_1.UIManager(player, [
            __assign({}, modernTvUI()),
        ], config);
    }
    UIFactory.buildModernTvUI = buildModernTvUI;
    function modernTvUI() {
        var subtitleListBox = new subtitlelistbox_1.SubtitleListBox();
        var subtitleListPanel = new settingspanel_1.SettingsPanel({
            components: [
                new settingspanelpage_1.SettingsPanelPage({
                    components: [new settingspanelitem_1.SettingsPanelItem(null, subtitleListBox)],
                }),
            ],
            hidden: true,
        });
        var audioTrackListBox = new audiotracklistbox_1.AudioTrackListBox();
        var audioTrackListPanel = new settingspanel_1.SettingsPanel({
            components: [
                new settingspanelpage_1.SettingsPanelPage({
                    components: [new settingspanelitem_1.SettingsPanelItem(null, audioTrackListBox)],
                }),
            ],
            hidden: true,
        });
        var seekBar = new seekbar_1.SeekBar({ label: new seekbarlabel_1.SeekBarLabel() });
        var playbackToggleOverlay = new playbacktoggleoverlay_1.PlaybackToggleOverlay();
        var subtitleToggleButton = new settingstogglebutton_1.SettingsToggleButton({
            settingsPanel: subtitleListPanel,
            autoHideWhenNoActiveSettings: true,
            cssClass: 'ui-subtitlesettingstogglebutton',
            text: i18n_1.i18n.getLocalizer('settings.subtitles'),
        });
        var audioToggleButton = new settingstogglebutton_1.SettingsToggleButton({
            settingsPanel: audioTrackListPanel,
            autoHideWhenNoActiveSettings: true,
            cssClass: 'ui-audiotracksettingstogglebutton',
            ariaLabel: i18n_1.i18n.getLocalizer('settings.audio.track'),
            text: i18n_1.i18n.getLocalizer('settings.audio.track'),
        });
        var uiContainer = new uicontainer_1.UIContainer({
            components: [
                new subtitleoverlay_1.SubtitleOverlay(),
                new bufferingoverlay_1.BufferingOverlay(),
                playbackToggleOverlay,
                new controlbar_1.ControlBar({
                    components: [
                        new container_1.Container({
                            components: [
                                new playbacktimelabel_1.PlaybackTimeLabel({
                                    timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.CurrentTime,
                                    hideInLivePlayback: true,
                                }),
                                seekBar,
                                new playbacktimelabel_1.PlaybackTimeLabel({
                                    timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.RemainingTime,
                                    cssClasses: ['text-right'],
                                }),
                            ],
                            cssClasses: ['controlbar-top'],
                        }),
                    ],
                }),
                new titlebar_1.TitleBar({
                    components: [
                        new container_1.Container({
                            components: [
                                new metadatalabel_1.MetadataLabel({ content: metadatalabel_1.MetadataLabelContent.Title }),
                                subtitleToggleButton,
                                audioToggleButton,
                            ],
                            cssClasses: ['ui-titlebar-top'],
                        }),
                        new container_1.Container({
                            components: [
                                new metadatalabel_1.MetadataLabel({
                                    content: metadatalabel_1.MetadataLabelContent.Description,
                                }),
                                subtitleListPanel,
                                audioTrackListPanel,
                            ],
                            cssClasses: ['ui-titlebar-bottom'],
                        }),
                    ],
                }),
                new recommendationoverlay_1.RecommendationOverlay(),
                new errormessageoverlay_1.ErrorMessageOverlay(),
            ],
            cssClasses: ['ui-skin-tv'],
            hideDelay: 2000,
            hidePlayerStateExceptions: [
                playerutils_1.PlayerUtils.PlayerState.Prepared,
                playerutils_1.PlayerUtils.PlayerState.Paused,
                playerutils_1.PlayerUtils.PlayerState.Finished,
            ],
        });
        var spatialNavigation = new spatialnavigation_1.SpatialNavigation(new rootnavigationgroup_1.RootNavigationGroup(uiContainer, playbackToggleOverlay, seekBar, audioToggleButton, subtitleToggleButton), new ListNavigationGroup_1.ListNavigationGroup(ListNavigationGroup_1.ListOrientation.Vertical, subtitleListPanel, subtitleListBox), new ListNavigationGroup_1.ListNavigationGroup(ListNavigationGroup_1.ListOrientation.Vertical, audioTrackListPanel, audioTrackListBox));
        return {
            ui: uiContainer,
            spatialNavigation: spatialNavigation,
        };
    }
    UIFactory.modernTvUI = modernTvUI;
    function modernRadioModeUi() {
        return new uicontainer_1.UIContainer({
            components: [
                new controlbar_1.ControlBar({
                    components: [
                        new container_1.Container({
                            components: [
                                new playbacktogglebutton_1.PlaybackToggleButton(),
                                new seekbar_1.SeekBar({ label: new seekbarlabel_1.SeekBarLabel() }),
                                new radiomodetogglebutton_1.RadioModeToggleButton(),
                            ],
                            cssClasses: ['controlbar-top'],
                        }),
                    ],
                }),
            ],
            cssClasses: ['ui-skin-radio'],
            hideDelay: -1,
        });
    }
    UIFactory.modernRadioModeUi = modernRadioModeUi;
    function buildModernRadioModeUI(player, config) {
        if (config === void 0) { config = {}; }
        return new uimanager_1.UIManager(player, [
            {
                ui: modernRadioModeUi(),
            },
        ], config);
    }
    UIFactory.buildModernRadioModeUI = buildModernRadioModeUI;
})(UIFactory = exports.UIFactory || (exports.UIFactory = {}));

},{"../custom/ts/components/playbackjumpoverlay":3,"./../custom/ts/components/gobackbutton":1,"./../custom/ts/components/radiomode/radiomodetogglebutton":5,"./components/adclickoverlay":9,"./components/admessagelabel":10,"./components/adskipbutton":11,"./components/airplaytogglebutton":12,"./components/audioqualityselectbox":13,"./components/audiotracklistbox":14,"./components/audiotrackselectbox":15,"./components/bufferingoverlay":16,"./components/caststatusoverlay":18,"./components/casttogglebutton":19,"./components/castuicontainer":20,"./components/closebutton":22,"./components/container":24,"./components/controlbar":25,"./components/errormessageoverlay":26,"./components/fullscreentogglebutton":27,"./components/label":31,"./components/metadatalabel":34,"./components/pictureinpicturetogglebutton":35,"./components/playbackspeedselectbox":36,"./components/playbacktimelabel":37,"./components/playbacktogglebutton":38,"./components/playbacktoggleoverlay":39,"./components/recommendationoverlay":40,"./components/seekbar":42,"./components/seekbarlabel":45,"./components/settingspanel":47,"./components/settingspanelitem":48,"./components/settingspanelpage":49,"./components/settingspanelpageopenbutton":52,"./components/settingstogglebutton":53,"./components/spacer":54,"./components/subtitlelistbox":55,"./components/subtitleoverlay":56,"./components/subtitleselectbox":57,"./components/subtitlesettings/subtitlesettingslabel":66,"./components/subtitlesettings/subtitlesettingspanelpage":68,"./components/titlebar":73,"./components/uicontainer":76,"./components/videoqualityselectbox":77,"./components/volumeslider":79,"./components/volumetogglebutton":80,"./components/vrtogglebutton":81,"./components/watermark":82,"./localization/i18n":91,"./playerutils":97,"./spatialnavigation/ListNavigationGroup":98,"./spatialnavigation/rootnavigationgroup":104,"./spatialnavigation/spatialnavigation":106,"./uimanager":114}],114:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerWrapper = exports.UIInstanceManager = exports.UIManager = void 0;
var uicontainer_1 = require("./components/uicontainer");
var dom_1 = require("./dom");
var container_1 = require("./components/container");
var eventdispatcher_1 = require("./eventdispatcher");
var uiutils_1 = require("./uiutils");
var arrayutils_1 = require("./arrayutils");
var browserutils_1 = require("./browserutils");
var volumecontroller_1 = require("./volumecontroller");
var i18n_1 = require("./localization/i18n");
var focusvisibilitytracker_1 = require("./focusvisibilitytracker");
var mobilev3playerapi_1 = require("./mobilev3playerapi");
var UIManager = /** @class */ (function () {
    function UIManager(player, playerUiOrUiVariants, uiconfig) {
        if (uiconfig === void 0) { uiconfig = {}; }
        var _this = this;
        this.events = {
            onUiVariantResolve: new eventdispatcher_1.EventDispatcher(),
            onActiveUiChanged: new eventdispatcher_1.EventDispatcher(),
        };
        if (playerUiOrUiVariants instanceof uicontainer_1.UIContainer) {
            // Single-UI constructor has been called, transform arguments to UIVariant[] signature
            var playerUi = playerUiOrUiVariants;
            var uiVariants = [];
            // Add the default player UI
            uiVariants.push({ ui: playerUi });
            this.uiVariants = uiVariants;
        }
        else {
            // Default constructor (UIVariant[]) has been called
            this.uiVariants = playerUiOrUiVariants;
        }
        this.player = player;
        this.managerPlayerWrapper = new PlayerWrapper(player);
        // ensure that at least the metadata object does exist in the uiconfig
        uiconfig.metadata = uiconfig.metadata ? uiconfig.metadata : {};
        this.config = __assign(__assign({ playbackSpeedSelectionEnabled: true, autoUiVariantResolve: true, disableAutoHideWhenHovered: false, enableSeekPreview: true }, uiconfig), { events: {
                onUpdated: new eventdispatcher_1.EventDispatcher(),
            }, volumeController: new volumecontroller_1.VolumeController(this.managerPlayerWrapper.getPlayer()) });
        /**
         * Gathers configuration data from the UI config and player source config and creates a merged UI config
         * that is used throughout the UI instance.
         */
        var updateConfig = function () {
            var playerSourceConfig = player.getSource() || {};
            _this.config.metadata = JSON.parse(JSON.stringify(uiconfig.metadata || {}));
            // Extract the UI-related config properties from the source config
            var playerSourceUiConfig = {
                metadata: {
                    // TODO move metadata into source.metadata namespace in player v8
                    title: playerSourceConfig.title,
                    description: playerSourceConfig.description,
                    markers: playerSourceConfig.markers,
                },
                recommendations: playerSourceConfig.recommendations,
            };
            // Player source config takes precedence over the UI config, because the config in the source is attached
            // to a source which changes with every player.load, whereas the UI config stays the same for the whole
            // lifetime of the player instance.
            _this.config.metadata.title = playerSourceUiConfig.metadata.title || uiconfig.metadata.title;
            _this.config.metadata.description = playerSourceUiConfig.metadata.description || uiconfig.metadata.description;
            _this.config.metadata.markers = playerSourceUiConfig.metadata.markers || uiconfig.metadata.markers || [];
            _this.config.recommendations = playerSourceUiConfig.recommendations || uiconfig.recommendations || [];
        };
        updateConfig();
        // Update the source configuration when a new source is loaded and dispatch onUpdated
        var updateSource = function () {
            updateConfig();
            _this.config.events.onUpdated.dispatch(_this);
        };
        var wrappedPlayer = this.managerPlayerWrapper.getPlayer();
        wrappedPlayer.on(this.player.exports.PlayerEvent.SourceLoaded, updateSource);
        // The PlaylistTransition event is only available on Mobile v3 for now.
        // This event is fired when a new source becomes active in the player.
        if ((0, mobilev3playerapi_1.isMobileV3PlayerAPI)(wrappedPlayer)) {
            wrappedPlayer.on(mobilev3playerapi_1.MobileV3PlayerEvent.PlaylistTransition, updateSource);
        }
        if (uiconfig.container) {
            // Unfortunately "uiContainerElement = new DOM(config.container)" will not accept the container with
            // string|HTMLElement type directly, although it accepts both types, so we need to spit these two cases up here.
            // TODO check in upcoming TS versions if the container can be passed in directly, or fix the constructor
            this.uiContainerElement = uiconfig.container instanceof HTMLElement ?
                new dom_1.DOM(uiconfig.container) : new dom_1.DOM(uiconfig.container);
        }
        else {
            this.uiContainerElement = new dom_1.DOM(player.getContainer());
        }
        // Create UI instance managers for the UI variants
        // The instance managers map to the corresponding UI variants by their array index
        this.uiInstanceManagers = [];
        var uiVariantsWithoutCondition = [];
        for (var _i = 0, _a = this.uiVariants; _i < _a.length; _i++) {
            var uiVariant = _a[_i];
            if (uiVariant.condition == null) {
                // Collect variants without conditions for error checking
                uiVariantsWithoutCondition.push(uiVariant);
            }
            // Create the instance manager for a UI variant
            this.uiInstanceManagers.push(new InternalUIInstanceManager(player, uiVariant.ui, this.config, uiVariant.spatialNavigation));
        }
        // Make sure that there is only one UI variant without a condition
        // It does not make sense to have multiple variants without condition, because only the first one in the list
        // (the one with the lowest index) will ever be selected.
        if (uiVariantsWithoutCondition.length > 1) {
            throw Error('Too many UIs without a condition: You cannot have more than one default UI');
        }
        // Make sure that the default UI variant, if defined, is at the end of the list (last index)
        // If it comes earlier, the variants with conditions that come afterwards will never be selected because the
        // default variant without a condition always evaluates to 'true'
        if (uiVariantsWithoutCondition.length > 0
            && uiVariantsWithoutCondition[0] !== this.uiVariants[this.uiVariants.length - 1]) {
            throw Error('Invalid UI variant order: the default UI (without condition) must be at the end of the list');
        }
        var adStartedEvent = null; // keep the event stored here during ad playback
        // Dynamically select a UI variant that matches the current UI condition.
        var resolveUiVariant = function (event) {
            // Make sure that the AdStarted event data is persisted through ad playback in case other events happen
            // in the meantime, e.g. player resize. We need to store this data because there is no other way to find out
            // ad details while an ad is playing (in v8.0 at least; from v8.1 there will be ads.getActiveAd()).
            // Existing event data signals that an ad is currently active (instead of ads.isLinearAdActive()).
            if (event != null) {
                switch (event.type) {
                    // The ads UI is shown upon the first AdStarted event. Subsequent AdStarted events within an ad break
                    // will not change the condition context and thus not lead to undesired UI variant resolving.
                    // The ads UI is shown upon AdStarted instead of AdBreakStarted because there can be a loading delay
                    // between these two events in the player, and the AdBreakStarted event does not carry any metadata to
                    // initialize the ads UI, so it would be rendered in an uninitialized state for a certain amount of time.
                    // TODO show ads UI upon AdBreakStarted and display loading overlay between AdBreakStarted and first AdStarted
                    // TODO display loading overlay between AdFinished and next AdStarted
                    case player.exports.PlayerEvent.AdStarted:
                        adStartedEvent = event;
                        break;
                    // The ads UI is hidden only when the ad break is finished, i.e. not on AdFinished events. This way we keep
                    // the ads UI variant active throughout an ad break, as reacting to AdFinished would lead to undesired UI
                    // variant switching between two ads in an ad break, e.g. ads UI -> AdFinished -> content UI ->
                    // AdStarted -> ads UI.
                    case player.exports.PlayerEvent.AdBreakFinished:
                        adStartedEvent = null;
                        // When switching to a variant for the first time, a config.events.onUpdated event is fired to trigger a UI
                        // update of the new variant, because most components subscribe to this event to update themselves. When
                        // switching to the ads UI on the first AdStarted, all UI variants update themselves with the ad data, so
                        // when switching back to the "normal" UI it will carry properties of the ad instead of the main content.
                        // We thus fire this event here to force an UI update with the properties of the main content. This is
                        // basically a hack because the config.events.onUpdated event is abused in many places and not just used
                        // for config updates (e.g. adding a marker to the seekbar).
                        // TODO introduce an event that is fired when the playback content is updated, a switch to/from ads
                        _this.config.events.onUpdated.dispatch(_this);
                        break;
                    // When a new source is loaded during ad playback, there will be no Ad(Break)Finished event
                    case player.exports.PlayerEvent.SourceLoaded:
                    case player.exports.PlayerEvent.SourceUnloaded:
                        adStartedEvent = null;
                        break;
                }
            }
            // Detect if an ad has started
            var isAd = adStartedEvent != null;
            var adRequiresUi = false;
            if (isAd) {
                var ad = adStartedEvent.ad;
                // for now only linear ads can request a UI
                if (ad.isLinear) {
                    var linearAd = ad;
                    adRequiresUi = linearAd.uiConfig && linearAd.uiConfig.requestsUi || false;
                }
            }
            if (adRequiresUi) {
                // we dispatch onUpdated event because if there are multiple adBreaks for same position
                // `Play` and `Playing` events will not be dispatched which will cause `PlaybackButton` state
                // to be out of sync
                _this.config.events.onUpdated.dispatch(_this);
            }
            _this.resolveUiVariant({
                isAd: isAd,
                adRequiresUi: adRequiresUi,
            }, function (context) {
                // If this is an ad UI, we need to relay the saved ON_AD_STARTED event data so ad components can configure
                // themselves for the current ad.
                if (context.isAd) {
                    /* Relay the ON_AD_STARTED event to the ads UI
                     *
                     * Because the ads UI is initialized in the ON_AD_STARTED handler, i.e. when the ON_AD_STARTED event has
                     * already been fired, components in the ads UI that listen for the ON_AD_STARTED event never receive it.
                     * Since this can break functionality of components that rely on this event, we relay the event to the
                     * ads UI components with the following call.
                     */
                    _this.currentUi.getWrappedPlayer().fireEventInUI(_this.player.exports.PlayerEvent.AdStarted, adStartedEvent);
                }
            });
        };
        // Listen to the following events to trigger UI variant resolution
        if (this.config.autoUiVariantResolve) {
            this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.SourceLoaded, resolveUiVariant);
            this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.SourceUnloaded, resolveUiVariant);
            this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.Play, resolveUiVariant);
            this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.Paused, resolveUiVariant);
            this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.AdStarted, resolveUiVariant);
            this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.AdBreakFinished, resolveUiVariant);
            this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.PlayerResized, resolveUiVariant);
            this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.ViewModeChanged, resolveUiVariant);
        }
        this.focusVisibilityTracker = new focusvisibilitytracker_1.FocusVisibilityTracker('bmpui');
        // Initialize the UI
        resolveUiVariant(null);
    }
    /**
     * Exposes i18n.getLocalizer() function
     * @returns {I18nApi.getLocalizer()}
     */
    UIManager.localize = function (key) {
        return i18n_1.i18n.getLocalizer(key);
    };
    /**
     * Provide configuration to support Custom UI languages
     * default language: 'en'
     */
    UIManager.setLocalizationConfig = function (localizationConfig) {
        i18n_1.i18n.setConfig(localizationConfig);
    };
    UIManager.prototype.getConfig = function () {
        return this.config;
    };
    /**
     * Returns the list of UI variants as passed into the constructor of {@link UIManager}.
     * @returns {UIVariant[]} the list of available UI variants
     */
    UIManager.prototype.getUiVariants = function () {
        return this.uiVariants;
    };
    /**
     * Switches to a UI variant from the list returned by {@link getUiVariants}.
     * @param {UIVariant} uiVariant the UI variant to switch to
     * @param {() => void} onShow a callback that is executed just before the new UI variant is shown
     */
    UIManager.prototype.switchToUiVariant = function (uiVariant, onShow) {
        var uiVariantIndex = this.uiVariants.indexOf(uiVariant);
        var previousUi = this.currentUi;
        var nextUi = this.uiInstanceManagers[uiVariantIndex];
        // Determine if the UI variant is changing
        // Only if the UI variant is changing, we need to do some stuff. Else we just leave everything as-is.
        if (nextUi === this.currentUi) {
            return;
            // console.log('switched from ', this.currentUi ? this.currentUi.getUI() : 'none',
            //   ' to ', nextUi ? nextUi.getUI() : 'none');
        }
        // Hide the currently active UI variant
        if (this.currentUi) {
            this.currentUi.getUI().hide();
        }
        // Assign the new UI variant as current UI
        this.currentUi = nextUi;
        // When we switch to a different UI instance, there's some additional stuff to manage. If we do not switch
        // to an instance, we're done here.
        if (this.currentUi == null) {
            return;
        }
        // Add the UI to the DOM (and configure it) the first time it is selected
        if (!this.currentUi.isConfigured()) {
            this.addUi(this.currentUi);
            // ensure that the internal state is ready for the upcoming show call
            if (!this.currentUi.getUI().isHidden()) {
                this.currentUi.getUI().hide();
            }
        }
        if (onShow) {
            onShow();
        }
        this.currentUi.getUI().show();
        this.events.onActiveUiChanged.dispatch(this, { previousUi: previousUi, currentUi: nextUi });
    };
    /**
     * Triggers a UI variant switch as triggered by events when automatic switching is enabled. It allows to overwrite
     * properties of the {@link UIConditionContext}.
     * @param {Partial<UIConditionContext>} context an optional set of properties that overwrite properties of the
     *   automatically determined context
     * @param {(context: UIConditionContext) => void} onShow a callback that is executed just before the new UI variant
     *   is shown (if a switch is happening)
     */
    UIManager.prototype.resolveUiVariant = function (context, onShow) {
        if (context === void 0) { context = {}; }
        // Determine the current context for which the UI variant will be resolved
        var defaultContext = {
            isAd: false,
            adRequiresUi: false,
            isFullscreen: this.player.getViewMode() === this.player.exports.ViewMode.Fullscreen,
            isMobile: browserutils_1.BrowserUtils.isMobile,
            isPlaying: this.player.isPlaying(),
            width: this.uiContainerElement.width(),
            documentWidth: document.body.clientWidth,
        };
        // Overwrite properties of the default context with passed in context properties
        var switchingContext = __assign(__assign({}, defaultContext), context);
        // Fire the event and allow modification of the context before it is used to resolve the UI variant
        this.events.onUiVariantResolve.dispatch(this, switchingContext);
        var nextUiVariant = null;
        // Select new UI variant
        // If no variant condition is fulfilled, we switch to *no* UI
        for (var _i = 0, _a = this.uiVariants; _i < _a.length; _i++) {
            var uiVariant = _a[_i];
            var matchesCondition = uiVariant.condition == null || uiVariant.condition(switchingContext) === true;
            if (nextUiVariant == null && matchesCondition) {
                nextUiVariant = uiVariant;
            }
            else {
                // hide all UIs besides the one which should be active
                uiVariant.ui.hide();
            }
        }
        this.switchToUiVariant(nextUiVariant, function () {
            if (onShow) {
                onShow(switchingContext);
            }
        });
    };
    UIManager.prototype.addUi = function (ui) {
        var dom = ui.getUI().getDomElement();
        var player = ui.getWrappedPlayer();
        ui.configureControls();
        /* Append the UI DOM after configuration to avoid CSS transitions at initialization
         * Example: Components are hidden during configuration and these hides may trigger CSS transitions that are
         * undesirable at this time. */
        this.uiContainerElement.append(dom);
        // When the UI is loaded after a source was loaded, we need to tell the components to initialize themselves
        if (player.getSource()) {
            this.config.events.onUpdated.dispatch(this);
        }
        // Fire onConfigured after UI DOM elements are successfully added. When fired immediately, the DOM elements
        // might not be fully configured and e.g. do not have a size.
        // https://swizec.com/blog/how-to-properly-wait-for-dom-elements-to-show-up-in-modern-browsers/swizec/6663
        if (window.requestAnimationFrame) {
            requestAnimationFrame(function () { ui.onConfigured.dispatch(ui.getUI()); });
        }
        else {
            // IE9 fallback
            setTimeout(function () { ui.onConfigured.dispatch(ui.getUI()); }, 0);
        }
    };
    UIManager.prototype.releaseUi = function (ui) {
        ui.releaseControls();
        var uiContainer = ui.getUI();
        if (uiContainer.hasDomElement()) {
            uiContainer.getDomElement().remove();
        }
        ui.clearEventHandlers();
    };
    UIManager.prototype.release = function () {
        for (var _i = 0, _a = this.uiInstanceManagers; _i < _a.length; _i++) {
            var uiInstanceManager = _a[_i];
            this.releaseUi(uiInstanceManager);
        }
        this.managerPlayerWrapper.clearEventHandlers();
        this.focusVisibilityTracker.release();
    };
    Object.defineProperty(UIManager.prototype, "onUiVariantResolve", {
        /**
         * Fires just before UI variants are about to be resolved and the UI variant is possibly switched. It is fired when
         * the switch is triggered from an automatic switch and when calling {@link resolveUiVariant}.
         * Can be used to modify the {@link UIConditionContext} before resolving is done.
         * @returns {EventDispatcher<UIManager, UIConditionContext>}
         */
        get: function () {
            return this.events.onUiVariantResolve;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIManager.prototype, "onActiveUiChanged", {
        /**
         * Fires after the UIManager has switched to a different UI variant.
         * @returns {EventDispatcher<UIManager, ActiveUiChangedArgs>}
         */
        get: function () {
            return this.events.onActiveUiChanged;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIManager.prototype, "activeUi", {
        /**
         * The current active {@link UIInstanceManager}.
         */
        get: function () {
            return this.currentUi;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns the list of all added markers in undefined order.
     */
    UIManager.prototype.getTimelineMarkers = function () {
        return this.config.metadata.markers;
    };
    /**
     * Adds a marker to the timeline. Does not check for duplicates/overlaps at the `time`.
     */
    UIManager.prototype.addTimelineMarker = function (timelineMarker) {
        this.config.metadata.markers.push(timelineMarker);
        this.config.events.onUpdated.dispatch(this);
    };
    /**
     * Removes a marker from the timeline (by reference) and returns `true` if the marker has
     * been part of the timeline and successfully removed, or `false` if the marker could not
     * be found and thus not removed.
     */
    UIManager.prototype.removeTimelineMarker = function (timelineMarker) {
        if (arrayutils_1.ArrayUtils.remove(this.config.metadata.markers, timelineMarker) === timelineMarker) {
            this.config.events.onUpdated.dispatch(this);
            return true;
        }
        return false;
    };
    return UIManager;
}());
exports.UIManager = UIManager;
/**
 * Encapsulates functionality to manage a UI instance. Used by the {@link UIManager} to manage multiple UI instances.
 */
var UIInstanceManager = /** @class */ (function () {
    function UIInstanceManager(player, ui, config, spatialNavigation) {
        this.events = {
            onConfigured: new eventdispatcher_1.EventDispatcher(),
            onSeek: new eventdispatcher_1.EventDispatcher(),
            onSeekPreview: new eventdispatcher_1.EventDispatcher(),
            onSeeked: new eventdispatcher_1.EventDispatcher(),
            onComponentShow: new eventdispatcher_1.EventDispatcher(),
            onComponentHide: new eventdispatcher_1.EventDispatcher(),
            onControlsShow: new eventdispatcher_1.EventDispatcher(),
            onPreviewControlsHide: new eventdispatcher_1.EventDispatcher(),
            onControlsHide: new eventdispatcher_1.EventDispatcher(),
            onRelease: new eventdispatcher_1.EventDispatcher(),
        };
        this.playerWrapper = new PlayerWrapper(player);
        this.ui = ui;
        this.config = config;
        this.spatialNavigation = spatialNavigation;
    }
    UIInstanceManager.prototype.getConfig = function () {
        return this.config;
    };
    UIInstanceManager.prototype.getUI = function () {
        return this.ui;
    };
    UIInstanceManager.prototype.getPlayer = function () {
        return this.playerWrapper.getPlayer();
    };
    Object.defineProperty(UIInstanceManager.prototype, "onConfigured", {
        /**
         * Fires when the UI is fully configured and added to the DOM.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onConfigured;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onSeek", {
        /**
         * Fires when a seek starts.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onSeek;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onSeekPreview", {
        /**
         * Fires when the seek timeline is scrubbed.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onSeekPreview;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onSeeked", {
        /**
         * Fires when a seek is finished.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onSeeked;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onComponentShow", {
        /**
         * Fires when a component is showing.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onComponentShow;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onComponentHide", {
        /**
         * Fires when a component is hiding.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onComponentHide;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onControlsShow", {
        /**
         * Fires when the UI controls are showing.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onControlsShow;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onPreviewControlsHide", {
        /**
         * Fires before the UI controls are hiding to check if they are allowed to hide.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onPreviewControlsHide;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onControlsHide", {
        /**
         * Fires when the UI controls are hiding.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onControlsHide;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onRelease", {
        /**
         * Fires when the UI controls are released.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onRelease;
        },
        enumerable: false,
        configurable: true
    });
    UIInstanceManager.prototype.clearEventHandlers = function () {
        this.playerWrapper.clearEventHandlers();
        var events = this.events; // avoid TS7017
        for (var event_1 in events) {
            var dispatcher = events[event_1];
            dispatcher.unsubscribeAll();
        }
    };
    return UIInstanceManager;
}());
exports.UIInstanceManager = UIInstanceManager;
/**
 * Extends the {@link UIInstanceManager} for internal use in the {@link UIManager} and provides access to functionality
 * that components receiving a reference to the {@link UIInstanceManager} should not have access to.
 */
var InternalUIInstanceManager = /** @class */ (function (_super) {
    __extends(InternalUIInstanceManager, _super);
    function InternalUIInstanceManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InternalUIInstanceManager.prototype.getWrappedPlayer = function () {
        // TODO find a non-hacky way to provide the WrappedPlayer to the UIManager without exporting it
        // getPlayer() actually returns the WrappedPlayer but its return type is set to Player so the WrappedPlayer does
        // not need to be exported
        return this.getPlayer();
    };
    InternalUIInstanceManager.prototype.configureControls = function () {
        this.configureControlsTree(this.getUI());
        this.configured = true;
    };
    InternalUIInstanceManager.prototype.isConfigured = function () {
        return this.configured;
    };
    InternalUIInstanceManager.prototype.configureControlsTree = function (component) {
        var _this = this;
        var configuredComponents = [];
        uiutils_1.UIUtils.traverseTree(component, function (component) {
            // First, check if we have already configured a component, and throw an error if we did. Multiple configuration
            // of the same component leads to unexpected UI behavior. Also, a component that is in the UI tree multiple
            // times hints at a wrong UI structure.
            // We could just skip configuration in such a case and not throw an exception, but enforcing a clean UI tree
            // seems like the better choice.
            for (var _i = 0, configuredComponents_1 = configuredComponents; _i < configuredComponents_1.length; _i++) {
                var configuredComponent = configuredComponents_1[_i];
                if (configuredComponent === component) {
                    // Write the component to the console to simplify identification of the culprit
                    // (e.g. by inspecting the config)
                    if (console) {
                        console.error('Circular reference in UI tree', component);
                    }
                    // Additionally throw an error, because this case must not happen and leads to unexpected UI behavior.
                    throw Error('Circular reference in UI tree: ' + component.constructor.name);
                }
            }
            component.initialize();
            component.configure(_this.getPlayer(), _this);
            configuredComponents.push(component);
        });
    };
    InternalUIInstanceManager.prototype.releaseControls = function () {
        var _a;
        // Do not call release methods if the components have never been configured; this can result in exceptions
        if (this.configured) {
            this.onRelease.dispatch(this.getUI());
            this.releaseControlsTree(this.getUI());
            this.configured = false;
        }
        (_a = this.spatialNavigation) === null || _a === void 0 ? void 0 : _a.release();
        this.released = true;
    };
    InternalUIInstanceManager.prototype.isReleased = function () {
        return this.released;
    };
    InternalUIInstanceManager.prototype.releaseControlsTree = function (component) {
        component.release();
        if (component instanceof container_1.Container) {
            for (var _i = 0, _a = component.getComponents(); _i < _a.length; _i++) {
                var childComponent = _a[_i];
                this.releaseControlsTree(childComponent);
            }
        }
    };
    InternalUIInstanceManager.prototype.clearEventHandlers = function () {
        _super.prototype.clearEventHandlers.call(this);
    };
    return InternalUIInstanceManager;
}(UIInstanceManager));
/**
 * Wraps the player to track event handlers and provide a simple method to remove all registered event
 * handlers from the player.
 */
var PlayerWrapper = /** @class */ (function () {
    function PlayerWrapper(player) {
        var _this = this;
        this.eventHandlers = {};
        this.player = player;
        // Collect all members of the player (public API methods and properties of the player)
        var objectProtoPropertyNames = Object.getOwnPropertyNames(Object.getPrototypeOf({}));
        var namesToIgnore = __spreadArray(['constructor'], objectProtoPropertyNames, true);
        var members = getAllPropertyNames(player).filter(function (name) { return namesToIgnore.indexOf(name) === -1; });
        // Split the members into methods and properties
        var methods = [];
        var properties = [];
        for (var _i = 0, members_1 = members; _i < members_1.length; _i++) {
            var member = members_1[_i];
            if (typeof player[member] === 'function') {
                methods.push(member);
            }
            else {
                properties.push(member);
            }
        }
        // Create wrapper object
        var wrapper = {};
        var _loop_1 = function (method) {
            wrapper[method] = function () {
                // console.log('called ' + member); // track method calls on the player
                return player[method].apply(player, arguments);
            };
        };
        // Add function wrappers for all API methods that do nothing but calling the base method on the player
        for (var _a = 0, methods_1 = methods; _a < methods_1.length; _a++) {
            var method = methods_1[_a];
            _loop_1(method);
        }
        var _loop_2 = function (property) {
            // Get an eventually existing property descriptor to differentiate between plain properties and properties with
            // getters/setters.
            var propertyDescriptor = (function (target) {
                while (target) {
                    var propertyDescriptor_1 = Object.getOwnPropertyDescriptor(target, property);
                    if (propertyDescriptor_1) {
                        return propertyDescriptor_1;
                    }
                    // Check if the PropertyDescriptor exists on a child prototype in case we have an inheritance of the player
                    target = Object.getPrototypeOf(target);
                }
            })(player);
            // If the property has getters/setters, wrap them accordingly...
            if (propertyDescriptor && (propertyDescriptor.get || propertyDescriptor.set)) {
                Object.defineProperty(wrapper, property, {
                    get: function () { return propertyDescriptor.get.call(player); },
                    set: function (value) { return propertyDescriptor.set.call(player, value); },
                });
            }
            // ... else just transfer the property to the wrapper
            else {
                wrapper[property] = player[property];
            }
        };
        // Add all public properties of the player to the wrapper
        for (var _b = 0, properties_1 = properties; _b < properties_1.length; _b++) {
            var property = properties_1[_b];
            _loop_2(property);
        }
        // Explicitly add a wrapper method for 'on' that adds added event handlers to the event list
        wrapper.on = function (eventType, callback) {
            player.on(eventType, callback);
            if (!_this.eventHandlers[eventType]) {
                _this.eventHandlers[eventType] = [];
            }
            _this.eventHandlers[eventType].push(callback);
            return wrapper;
        };
        // Explicitly add a wrapper method for 'off' that removes removed event handlers from the event list
        wrapper.off = function (eventType, callback) {
            player.off(eventType, callback);
            if (_this.eventHandlers[eventType]) {
                arrayutils_1.ArrayUtils.remove(_this.eventHandlers[eventType], callback);
            }
            return wrapper;
        };
        wrapper.fireEventInUI = function (event, data) {
            if (_this.eventHandlers[event]) { // check if there are handlers for this event registered
                // Extend the data object with default values to convert it to a {@link PlayerEventBase} object.
                var playerEventData = Object.assign({}, {
                    timestamp: Date.now(),
                    type: event,
                    // Add a marker property so the UI can detect UI-internal player events
                    uiSourced: true,
                }, data);
                // Execute the registered callbacks
                for (var _i = 0, _a = _this.eventHandlers[event]; _i < _a.length; _i++) {
                    var callback = _a[_i];
                    callback(playerEventData);
                }
            }
        };
        this.wrapper = wrapper;
    }
    /**
     * Returns a wrapped player object that can be used on place of the normal player object.
     * @returns {WrappedPlayer} a wrapped player
     */
    PlayerWrapper.prototype.getPlayer = function () {
        return this.wrapper;
    };
    /**
     * Clears all registered event handlers from the player that were added through the wrapped player.
     */
    PlayerWrapper.prototype.clearEventHandlers = function () {
        try {
            // Call the player API to check if the instance is still valid or already destroyed.
            // This can be any call throwing the PlayerAPINotAvailableError when the player instance is destroyed.
            this.player.getSource();
        }
        catch (error) {
            if (error instanceof this.player.exports.PlayerAPINotAvailableError) {
                // We have detected that the player instance is already destroyed, so we clear the event handlers to avoid
                // event handler unsubscription attempts (which would result in PlayerAPINotAvailableError errors).
                this.eventHandlers = {};
            }
        }
        for (var eventType in this.eventHandlers) {
            for (var _i = 0, _a = this.eventHandlers[eventType]; _i < _a.length; _i++) {
                var callback = _a[_i];
                this.player.off(eventType, callback);
            }
        }
    };
    return PlayerWrapper;
}());
exports.PlayerWrapper = PlayerWrapper;
function getAllPropertyNames(target) {
    var names = [];
    while (target) {
        var newNames = Object.getOwnPropertyNames(target).filter(function (name) { return names.indexOf(name) === -1; });
        names = names.concat(newNames);
        // go up prototype chain
        target = Object.getPrototypeOf(target);
    }
    return names;
}

},{"./arrayutils":6,"./browserutils":8,"./components/container":24,"./components/uicontainer":76,"./dom":84,"./eventdispatcher":86,"./focusvisibilitytracker":87,"./localization/i18n":91,"./mobilev3playerapi":96,"./uiutils":115,"./volumecontroller":116}],115:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UIUtils = void 0;
var container_1 = require("./components/container");
var UIUtils;
(function (UIUtils) {
    function traverseTree(component, visit) {
        var recursiveTreeWalker = function (component, parent) {
            visit(component, parent);
            // If the current component is a container, visit it's children
            if (component instanceof container_1.Container) {
                for (var _i = 0, _a = component.getComponents(); _i < _a.length; _i++) {
                    var childComponent = _a[_i];
                    recursiveTreeWalker(childComponent, component);
                }
            }
        };
        // Walk and configure the component tree
        recursiveTreeWalker(component);
    }
    UIUtils.traverseTree = traverseTree;
    // From: https://github.com/nfriend/ts-keycode-enum/blob/master/Key.enum.ts
    var KeyCode;
    (function (KeyCode) {
        KeyCode[KeyCode["LeftArrow"] = 37] = "LeftArrow";
        KeyCode[KeyCode["UpArrow"] = 38] = "UpArrow";
        KeyCode[KeyCode["RightArrow"] = 39] = "RightArrow";
        KeyCode[KeyCode["DownArrow"] = 40] = "DownArrow";
        KeyCode[KeyCode["Space"] = 32] = "Space";
        KeyCode[KeyCode["End"] = 35] = "End";
        KeyCode[KeyCode["Home"] = 36] = "Home";
    })(KeyCode = UIUtils.KeyCode || (UIUtils.KeyCode = {}));
})(UIUtils = exports.UIUtils || (exports.UIUtils = {}));

},{"./components/container":24}],116:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeTransition = exports.VolumeController = void 0;
var eventdispatcher_1 = require("./eventdispatcher");
/**
 * Can be used to centrally manage and control the volume and mute state of the player from multiple components.
 */
var VolumeController = exports.VolumeController = /** @class */ (function () {
    function VolumeController(player) {
        var _this = this;
        this.player = player;
        this.events = {
            onChanged: new eventdispatcher_1.EventDispatcher(),
        };
        this.storeVolume();
        var handler = function () {
            _this.onChangedEvent();
        };
        player.on(player.exports.PlayerEvent.SourceLoaded, handler);
        player.on(player.exports.PlayerEvent.VolumeChanged, handler);
        player.on(player.exports.PlayerEvent.Muted, handler);
        player.on(player.exports.PlayerEvent.Unmuted, handler);
    }
    VolumeController.prototype.setVolume = function (volume) {
        this.player.setVolume(volume, VolumeController.issuerName);
    };
    VolumeController.prototype.getVolume = function () {
        return this.player.getVolume();
    };
    VolumeController.prototype.setMuted = function (muted) {
        if (muted) {
            this.player.mute(VolumeController.issuerName);
        }
        else {
            this.player.unmute(VolumeController.issuerName);
        }
    };
    VolumeController.prototype.toggleMuted = function () {
        if (this.isMuted() || this.getVolume() === 0) {
            // Unmuting from the mute or zero-volume state recalls the previously saved volume setting. Setting the
            // volume automatically unmutes the player in v7.
            this.recallVolume();
        }
        else {
            this.setMuted(true);
        }
    };
    VolumeController.prototype.isMuted = function () {
        return this.player.isMuted();
    };
    /**
     * Stores (saves) the current volume so it can later be restored with {@link recallVolume}.
     */
    VolumeController.prototype.storeVolume = function () {
        this.storedVolume = this.getVolume();
    };
    /**
     * Recalls (sets) the volume previously stored with {@link storeVolume}.
     */
    VolumeController.prototype.recallVolume = function () {
        this.setMuted(this.storedVolume === 0);
        this.setVolume(this.storedVolume);
    };
    VolumeController.prototype.startTransition = function () {
        return new VolumeTransition(this);
    };
    VolumeController.prototype.onChangedEvent = function () {
        var playerMuted = this.isMuted();
        var playerVolume = this.getVolume();
        var uiMuted = playerMuted || playerVolume === 0;
        var uiVolume = playerMuted ? 0 : playerVolume;
        this.storeVolume();
        this.events.onChanged.dispatch(this, { volume: uiVolume, muted: uiMuted });
    };
    Object.defineProperty(VolumeController.prototype, "onChanged", {
        /**
         * Gets the event that is fired when the volume settings have changed.
         */
        get: function () {
            return this.events.onChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    VolumeController.issuerName = 'ui-volumecontroller';
    return VolumeController;
}());
var VolumeTransition = /** @class */ (function () {
    function VolumeTransition(controller) {
        this.controller = controller;
        // Store the volume at the beginning of a volume change so we can recall it later in case we set the volume to
        // zero and actually mute the player.
        controller.storeVolume();
    }
    VolumeTransition.prototype.update = function (volume) {
        // Update the volume while transitioning so the user has a "live preview" of the desired target volume
        this.controller.setMuted(false);
        this.controller.setVolume(volume);
    };
    VolumeTransition.prototype.finish = function (volume) {
        if (volume === 0) {
            // When the volume is zero we essentially mute the volume so we recall the volume from the beginning of the
            // transition and mute the player instead. Recalling is necessary to return to the actual audio volume
            // when unmuting.
            // We must first recall the volume and then mute, because recalling sets the volume on the player
            // and setting a player volume > 0 unmutes the player in v7.
            this.controller.recallVolume();
            this.controller.setMuted(true);
        }
        else {
            this.controller.setMuted(false);
            this.controller.setVolume(volume);
            this.controller.storeVolume();
        }
    };
    return VolumeTransition;
}());
exports.VolumeTransition = VolumeTransition;

},{"./eventdispatcher":86}],117:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VttUtils = void 0;
// Our default height of a line
var lineHeight = 28;
// Default relative line height
var lineHeightPercent = 5;
var lineCount = 1;
var defaultLineNumber = 21; // Our default amount of lines
var Direction;
(function (Direction) {
    Direction["Top"] = "top";
    Direction["Bottom"] = "bottom";
    Direction["Left"] = "left";
    Direction["Right"] = "right";
})(Direction || (Direction = {}));
var VttVerticalWriting;
(function (VttVerticalWriting) {
    VttVerticalWriting["GrowingRight"] = "lr";
    VttVerticalWriting["GrowingLeft"] = "rl";
})(VttVerticalWriting || (VttVerticalWriting = {}));
var DirectionPair = new Map([
    [Direction.Top, Direction.Bottom],
    [Direction.Bottom, Direction.Top],
    [Direction.Left, Direction.Right],
    [Direction.Right, Direction.Left],
]);
/**
 * Sets the default standardized styles for the Cue Box
 * https://w3.org/TR/webvtt1/#applying-css-properties
 */
var setDefaultVttStyles = function (cueContainerDom, vtt) {
    if (vtt.region) {
        cueContainerDom.css('position', 'relative');
        cueContainerDom.css('unicode-bidi', 'plaintext');
    }
    else {
        cueContainerDom.css('position', 'absolute');
        cueContainerDom.css('overflow-wrap', 'break-word');
        cueContainerDom.css('overflow', 'hidden');
        cueContainerDom.css('flex-flow', 'column');
    }
    cueContainerDom.css('display', 'inline-flex');
};
/**
 * Align the Cue Box's line
 * https://w3.org/TR/webvtt1/#webvtt-cue-line-alignment
 */
var setVttLineAlign = function (cueContainerDom, _a, direction, relativeCueBoxPosition) {
    var lineAlign = _a.lineAlign;
    switch (lineAlign) {
        case 'center':
            setCssForCenterLineAlign(cueContainerDom, direction, relativeCueBoxPosition);
            break;
        case 'end':
            setCssForEndLineAlign(cueContainerDom, direction, relativeCueBoxPosition);
    }
};
/**
 * Defines the line positioning of the Cue Box
 * https://w3.org/TR/webvtt1/#webvtt-cue-line
 */
var setVttLine = function (cueContainerDom, vtt, direction, subtitleOverLaySize) {
    var overlayReferenceEdge = DirectionPair.get(direction);
    if (vtt.line === 'auto' && vtt.vertical) {
        cueContainerDom.css(overlayReferenceEdge, '0');
        return;
    }
    if (vtt.line === 'auto' && !vtt.vertical) {
        return;
    }
    var relativeLinePosition = parseFloat(vtt.line);
    if (vtt.snapToLines) {
        var targetLine = Number(vtt.line);
        if (targetLine < 0) {
            targetLine = defaultLineNumber + targetLine;
        }
        var lineHeight_1 = subtitleOverLaySize.height / defaultLineNumber;
        var absoluteLinePosition = lineHeight_1 * targetLine;
        relativeLinePosition = (100 * absoluteLinePosition) / subtitleOverLaySize.height;
    }
    if (vtt.lineAlign !== 'end')
        cueContainerDom.css(overlayReferenceEdge, "".concat(relativeLinePosition, "%"));
    setVttLineAlign(cueContainerDom, vtt, direction, relativeLinePosition);
};
/**
 * Defines the writing direction of the Cue Box
 * https://w3.org/TR/webvtt1/#webvtt-cue-writing-direction
 */
var setVttWritingDirectionAndCueBoxPositioning = function (cueContainerDom, vtt, subtitleOverlaySize) {
    switch (vtt.vertical) {
        case '':
            cueContainerDom.css('writing-mode', 'horizontal-tb');
            cueContainerDom.css(Direction.Bottom, '0');
            setVttLine(cueContainerDom, vtt, Direction.Bottom, subtitleOverlaySize);
            break;
        case VttVerticalWriting.GrowingRight:
            setCueBoxPositionForVerticalWriting(cueContainerDom, Direction.Right, vtt, subtitleOverlaySize);
            break;
        case VttVerticalWriting.GrowingLeft:
            setCueBoxPositionForVerticalWriting(cueContainerDom, Direction.Left, vtt, subtitleOverlaySize);
            break;
    }
};
var setCueBoxPositionForVerticalWriting = function (cueContainerDom, direction, vtt, subtitleOverlaySize) {
    var writingMode = direction === Direction.Right ?
        'vertical-lr' : 'vertical-rl';
    cueContainerDom.css('writing-mode', writingMode);
    cueContainerDom.css(Direction.Top, '0');
    setVttLine(cueContainerDom, vtt, direction, subtitleOverlaySize);
};
/**
 * Defines the Cue position alignment
 * https://w3.org/TR/webvtt1/#webvtt-cue-position-alignment
 */
var setVttPositionAlign = function (cueContainerDom, vtt, direction) {
    // https://www.w3.org/TR/webvtt1/#webvtt-cue-position
    if (vtt.position === 'auto') {
        cueContainerDom.css(direction, '0');
    }
    else {
        switch (vtt.positionAlign) {
            case 'line-left':
                cueContainerDom.css(direction, "".concat(vtt.position, "%"));
                cueContainerDom.css(DirectionPair.get(direction), 'auto');
                cueContainerDom.css('justify-content', 'flex-start');
                break;
            case 'center':
                cueContainerDom.css(direction, "".concat(vtt.position - vtt.size / 2, "%"));
                cueContainerDom.css(DirectionPair.get(direction), 'auto');
                cueContainerDom.css('justify-content', 'center');
                break;
            case 'line-right':
                cueContainerDom.css(direction, 'auto');
                cueContainerDom.css(DirectionPair.get(direction), "".concat(100 - vtt.position, "%"));
                cueContainerDom.css('justify-content', 'flex-end');
                break;
            default:
                cueContainerDom.css(direction, "".concat(vtt.position, "%"));
                cueContainerDom.css('justify-content', 'flex-start');
        }
    }
};
var countLines = function (innerHtml) {
    return innerHtml.split('<br />').length;
};
var setCssForCenterLineAlign = function (cueContainerDom, direction, relativeCueBoxPosition) {
    switch (direction) {
        case Direction.Bottom:
            cueContainerDom.css('transform', 'translateY(-50%)');
            break;
        case Direction.Left:
            cueContainerDom.css('transform', 'translateX(50%)');
            break;
        case Direction.Right:
            cueContainerDom.css('transform', 'translateX(-50%)');
            break;
    }
};
var setCssForEndLineAlign = function (cueContainerDom, direction, offset) {
    var opositeToOverlayReferenceEdge = direction;
    cueContainerDom.css(opositeToOverlayReferenceEdge, "".concat(100 - offset, "%"));
};
var VttUtils;
(function (VttUtils) {
    VttUtils.setVttCueBoxStyles = function (cueContainer, subtitleOverlaySize) {
        var vtt = cueContainer.vtt;
        var cueContainerDom = cueContainer.getDomElement();
        setDefaultVttStyles(cueContainerDom, vtt);
        lineCount = countLines(cueContainer.getText());
        setVttWritingDirectionAndCueBoxPositioning(cueContainerDom, vtt, subtitleOverlaySize);
        // https://w3.org/TR/webvtt1/#webvtt-cue-text-alignment
        var textAlign = vtt.align === 'middle' ? 'center' : vtt.align;
        cueContainerDom.css('text-align', textAlign);
        // https://w3.org/TR/webvtt1/#webvtt-cue-size
        var containerSize = vtt.size;
        if (vtt.vertical === '') {
            cueContainerDom.css('width', "".concat(containerSize, "%"));
            setVttPositionAlign(cueContainerDom, vtt, Direction.Left);
        }
        else {
            cueContainerDom.css('height', "".concat(containerSize, "%"));
            setVttPositionAlign(cueContainerDom, vtt, Direction.Top);
        }
    };
    /** https://www.w3.org/TR/webvtt1/#regions
     *  https://www.speechpad.com/captions/webvtt#toc_16
     */
    VttUtils.setVttRegionStyles = function (regionContainer, region, overlaySize) {
        var regionContainerDom = regionContainer.getDomElement();
        var regionPositionX = overlaySize.width * region.viewportAnchorX / 100 - ((overlaySize.width * region.width / 100) * region.regionAnchorX / 100);
        var regionPositionY = overlaySize.height * region.viewportAnchorY / 100 - ((region.lines * lineHeight) * region.regionAnchorY / 100);
        regionContainerDom.css('position', 'absolute');
        regionContainerDom.css('overflow', 'hidden');
        regionContainerDom.css('width', "".concat(region.width, "%"));
        regionContainerDom.css(Direction.Left, "".concat(regionPositionX, "px"));
        regionContainerDom.css(Direction.Right, 'unset');
        regionContainerDom.css(Direction.Top, "".concat(regionPositionY, "px"));
        regionContainerDom.css(Direction.Bottom, 'unset');
        regionContainerDom.css('height', "".concat(region.lines * lineHeight, "px"));
    };
})(VttUtils = exports.VttUtils || (exports.VttUtils = {}));

},{}]},{},[95])(95)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvY3VzdG9tL3RzL2NvbXBvbmVudHMvZ29iYWNrYnV0dG9uLnRzIiwic3JjL2N1c3RvbS90cy9jb21wb25lbnRzL3BsYXliYWNranVtcGJ1dHRvbi50cyIsInNyYy9jdXN0b20vdHMvY29tcG9uZW50cy9wbGF5YmFja2p1bXBvdmVybGF5LnRzIiwic3JjL2N1c3RvbS90cy9jb21wb25lbnRzL3JhZGlvbW9kZS9yYWRpb21vZGVjb250cm9sbGVyLnRzIiwic3JjL2N1c3RvbS90cy9jb21wb25lbnRzL3JhZGlvbW9kZS9yYWRpb21vZGV0b2dnbGVidXR0b24udHMiLCJzcmMvdHMvYXJyYXl1dGlscy50cyIsInNyYy90cy9hdWRpb3RyYWNrdXRpbHMudHMiLCJzcmMvdHMvYnJvd3NlcnV0aWxzLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvYWRjbGlja292ZXJsYXkudHMiLCJzcmMvdHMvY29tcG9uZW50cy9hZG1lc3NhZ2VsYWJlbC50cyIsInNyYy90cy9jb21wb25lbnRzL2Fkc2tpcGJ1dHRvbi50cyIsInNyYy90cy9jb21wb25lbnRzL2FpcnBsYXl0b2dnbGVidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy9hdWRpb3F1YWxpdHlzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9hdWRpb3RyYWNrbGlzdGJveC50cyIsInNyYy90cy9jb21wb25lbnRzL2F1ZGlvdHJhY2tzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9idWZmZXJpbmdvdmVybGF5LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvYnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvY2FzdHN0YXR1c292ZXJsYXkudHMiLCJzcmMvdHMvY29tcG9uZW50cy9jYXN0dG9nZ2xlYnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvY2FzdHVpY29udGFpbmVyLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvY2xpY2tvdmVybGF5LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvY2xvc2VidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy9jb21wb25lbnQudHMiLCJzcmMvdHMvY29tcG9uZW50cy9jb250YWluZXIudHMiLCJzcmMvdHMvY29tcG9uZW50cy9jb250cm9sYmFyLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvZXJyb3JtZXNzYWdlb3ZlcmxheS50cyIsInNyYy90cy9jb21wb25lbnRzL2Z1bGxzY3JlZW50b2dnbGVidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy9odWdlcGxheWJhY2t0b2dnbGVidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy9odWdlcmVwbGF5YnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvaXRlbXNlbGVjdGlvbmxpc3QudHMiLCJzcmMvdHMvY29tcG9uZW50cy9sYWJlbC50cyIsInNyYy90cy9jb21wb25lbnRzL2xpc3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9saXN0c2VsZWN0b3IudHMiLCJzcmMvdHMvY29tcG9uZW50cy9tZXRhZGF0YWxhYmVsLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvcGljdHVyZWlucGljdHVyZXRvZ2dsZWJ1dHRvbi50cyIsInNyYy90cy9jb21wb25lbnRzL3BsYXliYWNrc3BlZWRzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9wbGF5YmFja3RpbWVsYWJlbC50cyIsInNyYy90cy9jb21wb25lbnRzL3BsYXliYWNrdG9nZ2xlYnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvcGxheWJhY2t0b2dnbGVvdmVybGF5LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvcmVjb21tZW5kYXRpb25vdmVybGF5LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvcmVwbGF5YnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc2Vla2Jhci50cyIsInNyYy90cy9jb21wb25lbnRzL3NlZWtiYXJidWZmZXJsZXZlbC50cyIsInNyYy90cy9jb21wb25lbnRzL3NlZWtiYXJjb250cm9sbGVyLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc2Vla2JhcmxhYmVsLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc2VsZWN0Ym94LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc2V0dGluZ3NwYW5lbC50cyIsInNyYy90cy9jb21wb25lbnRzL3NldHRpbmdzcGFuZWxpdGVtLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc2V0dGluZ3NwYW5lbHBhZ2UudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zZXR0aW5nc3BhbmVscGFnZWJhY2tidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy9zZXR0aW5nc3BhbmVscGFnZW5hdmlnYXRvcmJ1dHRvbi50cyIsInNyYy90cy9jb21wb25lbnRzL3NldHRpbmdzcGFuZWxwYWdlb3BlbmJ1dHRvbi50cyIsInNyYy90cy9jb21wb25lbnRzL3NldHRpbmdzdG9nZ2xlYnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc3BhY2VyLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc3VidGl0bGVsaXN0Ym94LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc3VidGl0bGVvdmVybGF5LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc3VidGl0bGVzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL2JhY2tncm91bmRjb2xvcnNlbGVjdGJveC50cyIsInNyYy90cy9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3MvYmFja2dyb3VuZG9wYWNpdHlzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL2NoYXJhY3RlcmVkZ2VzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL2ZvbnRjb2xvcnNlbGVjdGJveC50cyIsInNyYy90cy9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3MvZm9udGZhbWlseXNlbGVjdGJveC50cyIsInNyYy90cy9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3MvZm9udG9wYWNpdHlzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL2ZvbnRzaXplc2VsZWN0Ym94LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc3VidGl0bGVzZXR0aW5ncy9zdWJ0aXRsZXNldHRpbmdzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL3N1YnRpdGxlc2V0dGluZ3NsYWJlbC50cyIsInNyYy90cy9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3Mvc3VidGl0bGVzZXR0aW5nc21hbmFnZXIudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL3N1YnRpdGxlc2V0dGluZ3NwYW5lbHBhZ2UudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL3N1YnRpdGxlc2V0dGluZ3NyZXNldGJ1dHRvbi50cyIsInNyYy90cy9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3Mvd2luZG93Y29sb3JzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL3dpbmRvd29wYWNpdHlzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy90aW1lbGluZW1hcmtlcnNoYW5kbGVyLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvdGl0bGViYXIudHMiLCJzcmMvdHMvY29tcG9uZW50cy90b2dnbGVidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy90dm5vaXNlY2FudmFzLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvdWljb250YWluZXIudHMiLCJzcmMvdHMvY29tcG9uZW50cy92aWRlb3F1YWxpdHlzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy92b2x1bWVjb250cm9sYnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvdm9sdW1lc2xpZGVyLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvdm9sdW1ldG9nZ2xlYnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvdnJ0b2dnbGVidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy93YXRlcm1hcmsudHMiLCJzcmMvdHMvZGVtb2ZhY3RvcnkudHMiLCJzcmMvdHMvZG9tLnRzIiwic3JjL3RzL2Vycm9ydXRpbHMudHMiLCJzcmMvdHMvZXZlbnRkaXNwYXRjaGVyLnRzIiwic3JjL3RzL2ZvY3VzdmlzaWJpbGl0eXRyYWNrZXIudHMiLCJzcmMvdHMvZ3JvdXBwbGF5YmFja2FwaS50cyIsInNyYy90cy9ndWlkLnRzIiwic3JjL3RzL2ltYWdlbG9hZGVyLnRzIiwic3JjL3RzL2xvY2FsaXphdGlvbi9pMThuLnRzIiwic3JjL3RzL2xvY2FsaXphdGlvbi9sYW5ndWFnZXMvZGUuanNvbiIsInNyYy90cy9sb2NhbGl6YXRpb24vbGFuZ3VhZ2VzL2VuLmpzb24iLCJzcmMvdHMvbG9jYWxpemF0aW9uL2xhbmd1YWdlcy9lcy5qc29uIiwic3JjL3RzL21haW4udHMiLCJzcmMvdHMvbW9iaWxldjNwbGF5ZXJhcGkudHMiLCJzcmMvdHMvcGxheWVydXRpbHMudHMiLCJzcmMvdHMvc3BhdGlhbG5hdmlnYXRpb24vTGlzdE5hdmlnYXRpb25Hcm91cC50cyIsInNyYy90cy9zcGF0aWFsbmF2aWdhdGlvbi9nZXRodG1sZWxlbWVudHNmcm9tY29tcG9uZW50cy50cyIsInNyYy90cy9zcGF0aWFsbmF2aWdhdGlvbi9rZXltYXAudHMiLCJzcmMvdHMvc3BhdGlhbG5hdmlnYXRpb24vbmF2aWdhdGlvbmFsZ29yaXRobS50cyIsInNyYy90cy9zcGF0aWFsbmF2aWdhdGlvbi9uYXZpZ2F0aW9uZ3JvdXAudHMiLCJzcmMvdHMvc3BhdGlhbG5hdmlnYXRpb24vbm9kZWV2ZW50c3Vic2NyaWJlci50cyIsInNyYy90cy9zcGF0aWFsbmF2aWdhdGlvbi9yb290bmF2aWdhdGlvbmdyb3VwLnRzIiwic3JjL3RzL3NwYXRpYWxuYXZpZ2F0aW9uL3NlZWtiYXJoYW5kbGVyLnRzIiwic3JjL3RzL3NwYXRpYWxuYXZpZ2F0aW9uL3NwYXRpYWxuYXZpZ2F0aW9uLnRzIiwic3JjL3RzL3NwYXRpYWxuYXZpZ2F0aW9uL3R5cGVndWFyZHMudHMiLCJzcmMvdHMvc3BhdGlhbG5hdmlnYXRpb24vdHlwZXMudHMiLCJzcmMvdHMvc3RvcmFnZXV0aWxzLnRzIiwic3JjL3RzL3N0cmluZ3V0aWxzLnRzIiwic3JjL3RzL3N1YnRpdGxldXRpbHMudHMiLCJzcmMvdHMvdGltZW91dC50cyIsInNyYy90cy91aWZhY3RvcnkudHMiLCJzcmMvdHMvdWltYW5hZ2VyLnRzIiwic3JjL3RzL3VpdXRpbHMudHMiLCJzcmMvdHMvdm9sdW1lY29udHJvbGxlci50cyIsInNyYy90cy92dHR1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0NBLHdEQUFxRTtBQUtyRTtJQUFrQyxnQ0FBb0I7SUFDcEQsc0JBQVksTUFBeUI7UUFBekIsdUJBQUEsRUFBQSxXQUF5QjtRQUFyQyxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQVNkO1FBUEMsSUFBTSxhQUFhLEdBQWlCO1lBQ2xDLFFBQVEsRUFBRSxpQkFBaUI7WUFDM0IsSUFBSSxFQUFFLFNBQVM7WUFDZixTQUFTLEVBQUUsU0FBUztTQUNyQixDQUFDO1FBRUYsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztJQUNyRSxDQUFDO0lBRUQsZ0NBQVMsR0FBVCxVQUFVLE1BQWlCLEVBQUUsU0FBNEI7UUFBekQsaUJBWUM7UUFYQyxpQkFBTSxTQUFTLFlBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRW5DLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1lBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUV2QyxNQUFNLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2xF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QUMsS0FBSyxFQUFFLENBQUM7WUFDM0IsS0FBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsQ0FBQyxDQUFDO1FBRUYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDaEUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDOUQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDM0QsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDMUQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDMUQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDN0QsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDL0QsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFFbEUsb0RBQW9EO1FBQ3BELElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNiO0lBQ0gsQ0FBQztJQUNILHVCQUFDO0FBQUQsQ0F2REEsQUF1REMsQ0F2RHFDLHFCQUFTLEdBdUQ5QztBQXZEWSw0Q0FBZ0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3JCN0IseUNBQXVEO0FBQ3ZELDhCQUEyQjtBQUMzQixzREFBa0U7QUFDbEUsNkNBQThEO0FBWTlEOztHQUVHO0FBQ0g7SUFBeUQsMEJBQWlCO0lBTXhFLGdCQUFZLE1BQWM7UUFBMUIsWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FPZDtRQVpPLGtCQUFZLEdBQUc7WUFDckIsT0FBTyxFQUFFLElBQUksaUNBQWUsRUFBMEI7U0FDdkQsQ0FBQztRQUtBLEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDckMsUUFBUSxFQUFFLFdBQVc7WUFDckIsSUFBSSxFQUFFLFFBQVE7WUFDZCxRQUFRLEVBQUUsQ0FBQztTQUNGLEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztJQUM1QixDQUFDO0lBRVMsNkJBQVksR0FBdEI7UUFBQSxpQkE0QkM7UUEzQkMsSUFBTSx1QkFBdUIsR0FBK0I7WUFDMUQsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNwQixZQUFZLEVBQUUsV0FBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2pGLE9BQU8sRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQzdCLE1BQU0sRUFBRyxRQUFRO1lBQ2pCOztjQUVFO1lBQ0YsY0FBYyxFQUFFLE9BQU87WUFDdkIsVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRTtTQUM1QyxDQUFDO1FBRUYsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUU7WUFDNUIsdUJBQXVCLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7U0FDcEQ7UUFFRCxnREFBZ0Q7UUFDaEQsSUFBSSxhQUFhLEdBQUcsSUFBSSxTQUFHLENBQUMsUUFBUSxFQUFFLHVCQUF1QixDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksU0FBRyxDQUFDLE1BQU0sRUFBRTtZQUNwRixPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7U0FDakMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFckQsK0dBQStHO1FBQy9HLGFBQWEsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFO1lBQ3hCLEtBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0QixDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7O09BR0c7SUFDSCx3QkFBTyxHQUFQLFVBQVEsSUFBcUI7UUFDM0IsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNoRyxDQUFDO0lBRVMsNkJBQVksR0FBdEI7UUFDRSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQU1ELHNCQUFJLDJCQUFPO1FBSlg7OztXQUdHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzlDLENBQUM7OztPQUFBO0lBQ0gsYUFBQztBQUFELENBakVBLEFBaUVDLENBakV3RCxxQkFBUyxHQWlFakU7QUFqRVksd0JBQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2xCbkIseUNBQXVEO0FBQ3ZELGlDQUEyQztBQUczQyw2Q0FBNEM7QUFFNUM7O0dBRUc7QUFDSDtJQUF1QyxxQ0FBMEI7SUFJL0QsMkJBQVksTUFBNEI7UUFBNUIsdUJBQUEsRUFBQSxXQUE0QjtRQUF4QyxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQVNkO1FBUEMsS0FBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGFBQUssQ0FBYyxFQUFFLFFBQVEsRUFBRSxzQkFBc0IsRUFBRSxDQUFDLENBQUM7UUFFaEYsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxRQUFRLEVBQUUsd0JBQXdCO1lBQ2xDLFVBQVUsRUFBRSxDQUFDLEtBQUksQ0FBQyxXQUFXLENBQUM7WUFDOUIsTUFBTSxFQUFFLElBQUk7U0FDYixFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7SUFDbEIsQ0FBQztJQUVELHFDQUFTLEdBQVQsVUFBVSxNQUFpQixFQUFFLFNBQTRCO1FBQXpELGlCQXNCQztRQXJCQyxpQkFBTSxTQUFTLFlBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRW5DLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsb0JBQW9CLEVBQ3ZELFVBQUMsS0FBZ0M7WUFDL0IsS0FBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ1osMERBQTBEO1lBQzFELElBQUksY0FBYyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDO1lBQ2xELEtBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFdBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLEVBQUUsY0FBYyxnQkFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2xGLENBQUMsQ0FBQyxDQUFDO1FBQ0wsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsVUFBQyxLQUF1QjtZQUN4RSxnQ0FBZ0M7WUFDaEMsaUhBQWlIO1lBQ2pILFdBQVc7WUFDWCxLQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDWixJQUFJLGNBQWMsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO1lBQ3RDLEtBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFdBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLEVBQUUsY0FBYyxnQkFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQy9FLENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsVUFBQyxLQUFLO1lBQ3RELDJDQUEyQztZQUMzQyxLQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDSCx3QkFBQztBQUFELENBdkNBLEFBdUNDLENBdkNzQyxxQkFBUyxHQXVDL0M7QUF2Q1ksOENBQWlCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNUOUIsK0NBQWdFO0FBR2hFLDZDQUE0QztBQUU1Qzs7R0FFRztBQUNIO0lBQXNDLG9DQUFnQztJQUVwRSwwQkFBWSxNQUErQjtRQUEvQix1QkFBQSxFQUFBLFdBQStCO1FBQTNDLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBTWQ7UUFKQyxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFFBQVEsRUFBRSxxQkFBcUI7WUFDL0IsSUFBSSxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDO1NBQ3RDLEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztJQUNsQixDQUFDO0lBRUQsb0NBQVMsR0FBVCxVQUFVLE1BQWlCLEVBQUUsU0FBNEI7UUFBekQsaUJBNENDO1FBM0NDLGlCQUFNLFNBQVMsWUFBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7WUFDckIsSUFBSSxNQUFNLENBQUMsZUFBZSxFQUFFLEVBQUU7Z0JBQzVCLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFO29CQUN0QixNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7aUJBQ25CO3FCQUFNO29CQUNMLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztpQkFDcEI7YUFDRjtpQkFBTTtnQkFDTCxJQUFJLE9BQU8sRUFBRTtvQkFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7aUJBQ2pDO2FBQ0Y7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksbUJBQW1CLEdBQUc7WUFDeEIsSUFBSSxNQUFNLENBQUMsZUFBZSxFQUFFLEVBQUU7Z0JBQzVCLEtBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNiO2lCQUFNO2dCQUNMLEtBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNiO1FBQ0gsQ0FBQyxDQUFDO1FBRUYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUV6RSwyQkFBMkI7UUFDM0IsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsRUFBRTtZQUN6RCxLQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDWixDQUFDLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFO1lBQ2hELHdHQUF3RztZQUN4RyxLQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDWixDQUFDLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFO1lBQ2hELEtBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNiLENBQUMsQ0FBQyxDQUFDO1FBRUgsZUFBZTtRQUNmLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxvQ0FBb0M7UUFDM0QsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDdEIsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO1NBQ1g7SUFDSCxDQUFDO0lBQ0gsdUJBQUM7QUFBRCxDQXhEQSxBQXdEQyxDQXhEcUMsMkJBQVksR0F3RGpEO0FBeERZLDRDQUFnQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDUjdCLDZDQUE2RDtBQUU3RCxzQ0FBbUM7QUFHbkM7OztHQUdHO0FBQ0g7SUFBcUMsbUNBQVc7SUFJOUMseUJBQVksTUFBeUI7ZUFDbkMsa0JBQU0sTUFBTSxDQUFDO0lBQ2YsQ0FBQztJQUVELG1DQUFTLEdBQVQsVUFBVSxNQUFpQixFQUFFLFNBQTRCO1FBQXpELGlCQXVEQztRQXREQyxpQkFBTSxTQUFTLFlBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRW5DLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUU5Qjs7Ozs7Ozs7V0FRRztRQUVILElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQztRQUV0QixJQUFJLE1BQU0sR0FBRztZQUNYLFNBQVMsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxDQUFDO1lBQ3hDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDcEIsQ0FBQyxDQUFDO1FBRUYsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksaUJBQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRS9ELElBQUksTUFBTSxHQUFHO1lBQ1gsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDZCxTQUFTLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsQ0FBQztnQkFDeEMsU0FBUyxHQUFHLElBQUksQ0FBQzthQUNsQjtRQUNILENBQUMsQ0FBQztRQUVGLElBQUksaUJBQWlCLEdBQUc7WUFDdEIsTUFBTSxFQUFFLENBQUM7WUFDVCxLQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDakMsQ0FBQyxDQUFDO1FBRUYsSUFBSSxpQkFBaUIsR0FBRztZQUN0QixNQUFNLEVBQUUsQ0FBQztZQUNULEtBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNqQyxDQUFDLENBQUM7UUFFRixJQUFJLGVBQWUsR0FBRztZQUNwQixJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQkFDdEIsaUJBQWlCLEVBQUUsQ0FBQzthQUNyQjtpQkFBTTtnQkFDTCxpQkFBaUIsRUFBRSxDQUFDO2FBQ3JCO1FBQ0gsQ0FBQyxDQUFDO1FBRUYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUM5RCxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDOUQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFFOUQsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVELGlDQUFPLEdBQVA7UUFDRSxpQkFBTSxPQUFPLFdBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDakMsQ0FBQztJQUNILHNCQUFDO0FBQUQsQ0FyRUEsQUFxRUMsQ0FyRW9DLHlCQUFXLEdBcUUvQztBQXJFWSwwQ0FBZTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDVDVCLG1DQUE4QztBQVk5Qzs7R0FFRztBQUNIO0lBQWtDLGdDQUEwQjtJQUUxRCxzQkFBWSxNQUErQjtRQUEvQix1QkFBQSxFQUFBLFdBQStCO1FBQTNDLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBTWQ7UUFKQyxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFFBQVEsRUFBRSxpQkFBaUI7WUFDM0IsSUFBSSxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSTtTQUN2QixFQUFzQixLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQ3RDLENBQUM7SUFFRCxpQ0FBVSxHQUFWO1FBQ0UsaUJBQU0sVUFBVSxXQUFFLENBQUM7UUFFbkIsSUFBSSxDQUFDLE1BQU0sQ0FBc0IsSUFBSSxDQUFDLE1BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuRCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDbkMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUU7WUFDbEIsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFDNUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7O09BR0c7SUFDSCw2QkFBTSxHQUFOO1FBQ0UsT0FBTyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCw2QkFBTSxHQUFOLFVBQU8sR0FBVztRQUNoQixJQUFJLEdBQUcsS0FBSyxTQUFTLElBQUksR0FBRyxJQUFJLElBQUksRUFBRTtZQUNwQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1NBQ1Y7UUFDRCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBQ0gsbUJBQUM7QUFBRCxDQXJDQSxBQXFDQyxDQXJDaUMsZUFBTSxHQXFDdkM7QUFyQ1ksb0NBQVk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2Z6QixtQ0FBOEM7QUFJOUMsNkNBQTRDO0FBWTVDOztHQUVHO0FBQ0g7SUFBaUMsK0JBQXlCO0lBRXhELHFCQUFZLE1BQXlCO1FBQXJDLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBTWQ7UUFKQyxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFFBQVEsRUFBRSxnQkFBZ0I7WUFDMUIsSUFBSSxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDO1NBQ1osRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQ3ZDLENBQUM7SUFFRCwrQkFBUyxHQUFULFVBQVUsTUFBaUIsRUFBRSxTQUE0QjtRQUN2RCxpQkFBTSxTQUFTLFlBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRW5DLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUU5QixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztZQUNyQixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNILGtCQUFDO0FBQUQsQ0FwQkEsQUFvQkMsQ0FwQmdDLGVBQU0sR0FvQnRDO0FBcEJZLGtDQUFXOzs7Ozs7QUNuQnhCLGdDQUE2QjtBQUM3Qiw4QkFBMkI7QUFDM0Isc0RBQWtFO0FBR2xFLDZDQUE2RDtBQW9FN0Q7OztHQUdHO0FBQ0g7SUF5R0U7Ozs7T0FJRztJQUNILG1CQUFZLE1BQTRCO1FBQTVCLHVCQUFBLEVBQUEsV0FBNEI7UUF2RXhDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0F5REc7UUFDSyxvQkFBZSxHQUFHO1lBQ3hCLE1BQU0sRUFBRSxJQUFJLGlDQUFlLEVBQTZCO1lBQ3hELE1BQU0sRUFBRSxJQUFJLGlDQUFlLEVBQTZCO1lBQ3hELGNBQWMsRUFBRSxJQUFJLGlDQUFlLEVBQXFEO1lBQ3hGLFNBQVMsRUFBRSxJQUFJLGlDQUFlLEVBQTZCO1lBQzNELFVBQVUsRUFBRSxJQUFJLGlDQUFlLEVBQTZCO1NBQzdELENBQUM7UUFRQSw4Q0FBOEM7UUFDOUMsSUFBSSxDQUFDLE1BQU0sR0FBVyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUM3QyxHQUFHLEVBQUUsS0FBSztZQUNWLEVBQUUsRUFBRSxnQkFBZ0IsR0FBRyxXQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2xDLFNBQVMsRUFBRSxZQUFZO1lBQ3ZCLFFBQVEsRUFBRSxjQUFjO1lBQ3hCLFVBQVUsRUFBRSxFQUFFO1lBQ2QsTUFBTSxFQUFFLEtBQUs7WUFDYixRQUFRLEVBQUUsS0FBSztTQUNoQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCw4QkFBVSxHQUFWO1FBQ0UsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBRXJDLHdFQUF3RTtRQUN4RSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLG1GQUFtRjtZQUN4RyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDYjtRQUVELDZFQUE2RTtRQUM3RSxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUNyQixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLHlGQUF5RjtZQUNoSCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDaEI7SUFDSCxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7T0FVRztJQUNILDZCQUFTLEdBQVQsVUFBVSxNQUFpQixFQUFFLFNBQTRCO1FBQXpELGlCQWVDO1FBZEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDcEIsU0FBUyxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztZQUNwQixTQUFTLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUMsQ0FBQztRQUVILHlDQUF5QztRQUN6QyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRTtZQUNwQyxLQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRTtZQUNwQyxLQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsMkJBQU8sR0FBUDtRQUNFLCtDQUErQztJQUNqRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNPLGdDQUFZLEdBQXRCO1FBQ0UsSUFBSSxPQUFPLEdBQUcsSUFBSSxTQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDckMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNwQixPQUFPLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUM3QixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJO1NBQ3pCLENBQUMsQ0FBQztRQUVILE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxpQ0FBYSxHQUFiO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDcEM7UUFFRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsaUNBQWEsR0FBYjtRQUNFLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsZ0NBQVksR0FBWixVQUFhLEtBQXNCO1FBQ2pDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLFdBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRCwrQkFBVyxHQUFYLFVBQVksSUFBWSxFQUFFLEtBQWE7UUFDckMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFRLElBQUksQ0FBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ08sK0JBQVcsR0FBckIsVUFBOEIsTUFBYyxFQUFFLFFBQWdCLEVBQUUsSUFBWTtRQUMxRSw2Q0FBNkM7UUFDN0MsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUV2RCw2QkFBNkI7UUFDN0IsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVEOzs7O09BSUc7SUFDTyxpQ0FBYSxHQUF2QjtRQUFBLGlCQVdDO1FBVkMsMENBQTBDO1FBQzFDLElBQUksY0FBYyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMzRSxpQkFBaUI7UUFDakIsY0FBYyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsVUFBQyxHQUFHO1lBQ3RDLE9BQU8sS0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QixDQUFDLENBQUMsQ0FBQztRQUNILGtDQUFrQztRQUNsQyxJQUFJLGVBQWUsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQy9DLGlGQUFpRjtRQUNqRixPQUFPLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRVMsNkJBQVMsR0FBbkIsVUFBb0IsWUFBb0I7UUFDdEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxHQUFHLEdBQUcsWUFBWSxDQUFDO0lBQ3BELENBQUM7SUFFRDs7O09BR0c7SUFDSSw2QkFBUyxHQUFoQjtRQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsd0JBQUksR0FBSjtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2hCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1lBQ25CLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUN0RSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCx3QkFBSSxHQUFKO1FBQ0UsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBQ3pFLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNwQjtJQUNILENBQUM7SUFFRDs7O09BR0c7SUFDSCw0QkFBUSxHQUFSO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7O09BR0c7SUFDSCwyQkFBTyxHQUFQO1FBQ0UsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxnQ0FBWSxHQUFaO1FBQ0UsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDbkIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ2I7YUFBTTtZQUNMLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNiO0lBQ0gsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCwyQkFBTyxHQUFQO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDckIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1lBQ3hFLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUN4QjtJQUNILENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsMEJBQU0sR0FBTjtRQUNFLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFDM0UsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7WUFDdEIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNILDhCQUFVLEdBQVY7UUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7T0FHRztJQUNILDZCQUFTLEdBQVQ7UUFDRSxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRDs7O09BR0c7SUFDSCw2QkFBUyxHQUFUO1FBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7O09BR0c7SUFDTywrQkFBVyxHQUFyQjtRQUNFLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ08sK0JBQVcsR0FBckI7UUFDRSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVEOzs7T0FHRztJQUNPLGtDQUFjLEdBQXhCO1FBQ0UsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRDs7O09BR0c7SUFDTyxtQ0FBZSxHQUF6QjtRQUNFLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ08sdUNBQW1CLEdBQTdCLFVBQThCLE9BQWdCO1FBQzVDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBT0Qsc0JBQUksNkJBQU07UUFMVjs7OztXQUlHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hELENBQUM7OztPQUFBO0lBT0Qsc0JBQUksNkJBQU07UUFMVjs7OztXQUlHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hELENBQUM7OztPQUFBO0lBT0Qsc0JBQUksZ0NBQVM7UUFMYjs7OztXQUlHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25ELENBQUM7OztPQUFBO0lBT0Qsc0JBQUksaUNBQVU7UUFMZDs7OztXQUlHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3BELENBQUM7OztPQUFBO0lBTUQsc0JBQUkscUNBQWM7UUFKbEI7OztXQUdHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3hELENBQUM7OztPQUFBO0lBM2NEOzs7T0FHRztJQUNxQixzQkFBWSxHQUFHLFFBQUgsQUFBVyxDQUFDO0lBRWhEOzs7T0FHRztJQUNxQix3QkFBYyxHQUFHLFVBQUgsQUFBYSxDQUFDO0lBa2N0RCxnQkFBQztDQTljRCxBQThjQyxJQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMzaEJELHlDQUF1RDtBQUN2RCw4QkFBMkI7QUFDM0IsNENBQXlDO0FBQ3pDLDZDQUE0QztBQVk1Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBa0JHO0FBQ0g7SUFBK0QsNkJBQWlCO0lBUzlFLG1CQUFZLE1BQWM7UUFBMUIsWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FTZDtRQVBDLEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDckMsUUFBUSxFQUFFLGNBQWM7WUFDeEIsVUFBVSxFQUFFLEVBQUU7U0FDTCxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUxQixLQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztRQUMxQixLQUFJLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFDOztJQUMvQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsZ0NBQVksR0FBWixVQUFhLFNBQXFDO1FBQ2hELElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILG1DQUFlLEdBQWYsVUFBZ0IsU0FBcUM7UUFDbkQsSUFBSSx1QkFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsSUFBSSxJQUFJLEVBQUU7WUFDaEUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN4QyxPQUFPLElBQUksQ0FBQztTQUNiO2FBQU07WUFDTCxPQUFPLEtBQUssQ0FBQztTQUNkO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNILGlDQUFhLEdBQWI7UUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7T0FFRztJQUNILG9DQUFnQixHQUFoQjtRQUNFLEtBQXNCLFVBQTRCLEVBQTVCLEtBQUEsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUE1QixjQUE0QixFQUE1QixJQUE0QixFQUFFO1lBQS9DLElBQUksU0FBUyxTQUFBO1lBQ2hCLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDakM7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDTyxvQ0FBZ0IsR0FBMUI7UUFDRTs7Ozs7V0FLRztRQUNILElBQUksU0FBUyxDQUFDO1FBRWQsT0FBTyxTQUFTLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ2xELFNBQVMsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNwQztRQUVELE9BQU8sU0FBUyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDL0MsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztTQUM5RDtJQUNILENBQUM7SUFFUyxnQ0FBWSxHQUF0QjtRQUNFLGlEQUFpRDtRQUNqRCxJQUFJLGdCQUFnQixHQUFHLElBQUksU0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQzlDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDcEIsT0FBTyxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDN0IsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSTtZQUN4QixZQUFZLEVBQUUsV0FBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDO1NBQzlELENBQUMsQ0FBQztRQUVILHdGQUF3RjtRQUN4RixJQUFJLGNBQWMsR0FBRyxJQUFJLFNBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUM1QyxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQztTQUM3QyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMscUJBQXFCLEdBQUcsY0FBYyxDQUFDO1FBRTVDLEtBQTZCLFVBQXNCLEVBQXRCLEtBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQXRCLGNBQXNCLEVBQXRCLElBQXNCLEVBQUU7WUFBaEQsSUFBSSxnQkFBZ0IsU0FBQTtZQUN2QixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1NBQzdDO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFFeEIsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRXhDLE9BQU8sZ0JBQWdCLENBQUM7SUFDMUIsQ0FBQztJQUNILGdCQUFDO0FBQUQsQ0ExR0EsQUEwR0MsQ0ExRzhELHFCQUFTLEdBMEd2RTtBQTFHWSw4QkFBUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbEN0Qix5Q0FBdUQ7QUFFdkQsc0NBQW1DO0FBQ25DLG1DQUFnQztBQUVoQyw2Q0FBNEM7QUFDNUMsZ0RBQStDO0FBRS9DLGlEQUE4QztBQVM5Qzs7O0dBR0c7QUFDSDtJQUFnQyw4QkFBMkI7SUFFekQsb0JBQVksTUFBd0I7UUFBcEMsWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FRZDtRQU5DLEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDckMsUUFBUSxFQUFFLGVBQWU7WUFDekIsTUFBTSxFQUFFLElBQUk7WUFDWixJQUFJLEVBQUUsUUFBUTtZQUNkLFNBQVMsRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQztTQUMzQyxFQUFvQixLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQ3BDLENBQUM7SUFFRCw4QkFBUyxHQUFULFVBQVUsTUFBaUIsRUFBRSxTQUE0QjtRQUF6RCxpQkF1REM7UUF0REMsaUJBQU0sU0FBUyxZQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVuQyw2RUFBNkU7UUFDN0UsSUFBSSxlQUFlLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLElBQUksb0JBQW9CLEdBQUcsS0FBSyxDQUFDO1FBRWpDLGlGQUFpRjtRQUNqRiw0RUFBNEU7UUFDNUUsK0VBQStFO1FBQy9FLElBQUksU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLDBCQUEwQixJQUFJLENBQUMsMkJBQVksQ0FBQyxRQUFRLEVBQUU7WUFDOUUseUNBQXlDO1lBQ3pDLGlCQUFPLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxVQUFDLFNBQVM7Z0JBQ25DLG9GQUFvRjtnQkFDcEYsSUFBSSxTQUFTLFlBQVkscUJBQVMsSUFBSSxTQUFTLFlBQVksZUFBTSxFQUFFO29CQUNqRSxPQUFPO2lCQUNSO2dCQUVELDJFQUEyRTtnQkFDM0UsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsVUFBQyxDQUFDLEVBQUUsSUFBSTtvQkFDekMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO3dCQUNoQixlQUFlLEVBQUUsQ0FBQztxQkFDbkI7eUJBQU07d0JBQ0wsZUFBZSxFQUFFLENBQUM7cUJBQ25CO2dCQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksMkJBQVksQ0FBQyxRQUFRLEVBQUU7WUFDekIsU0FBUyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsVUFBQyxTQUFxQztnQkFDeEUsSUFBSSxTQUFTLFlBQVksNkJBQWEsRUFBRTtvQkFDdEMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDO2lCQUM3QjtZQUNILENBQUMsQ0FBQyxDQUFDO1lBRUgsU0FBUyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsVUFBQyxTQUFxQztnQkFDeEUsSUFBSSxTQUFTLFlBQVksNkJBQWEsRUFBRTtvQkFDdEMsb0JBQW9CLEdBQUcsS0FBSyxDQUFDO2lCQUM5QjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQztZQUNqQyxLQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztRQUVILFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsVUFBQyxNQUFNLEVBQUUsSUFBSTtZQUNyRCwrR0FBK0c7WUFDL0csSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxDQUFDO1FBQzdFLENBQUMsQ0FBQyxDQUFDO1FBRUgsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUM7WUFDakMsS0FBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0gsaUJBQUM7QUFBRCxDQXJFQSxBQXFFQyxDQXJFK0IscUJBQVMsR0FxRXhDO0FBckVZLGdDQUFVOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNyQnZCLHlDQUF1RDtBQUN2RCxpQ0FBMkM7QUFFM0MsaURBQThDO0FBQzlDLDRDQUEyQztBQUUzQywwREFHOEI7QUF1RTlCOztHQUVHO0FBQ0g7SUFBeUMsdUNBQW9DO0lBSzNFLDZCQUFZLE1BQXNDO1FBQXRDLHVCQUFBLEVBQUEsV0FBc0M7UUFBbEQsWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FVZDtRQVJDLEtBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxhQUFLLENBQWMsRUFBRSxRQUFRLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDO1FBQ2hGLEtBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLDZCQUFhLEVBQUUsQ0FBQztRQUU3QyxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFFBQVEsRUFBRSx5QkFBeUI7WUFDbkMsVUFBVSxFQUFFLENBQUMsS0FBSSxDQUFDLGlCQUFpQixFQUFFLEtBQUksQ0FBQyxVQUFVLENBQUM7WUFDckQsTUFBTSxFQUFFLElBQUk7U0FDYixFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7SUFDbEIsQ0FBQztJQUVELHVDQUFTLEdBQVQsVUFBVSxNQUFxQyxFQUFFLFNBQTRCO1FBQTdFLGlCQXNDQztRQXJDQyxpQkFBTSxTQUFTLFlBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRW5DLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUU5QixJQUFNLGtCQUFrQixHQUFHLFVBQ3pCLEtBQXVFLEVBQ3ZFLE9BQWU7WUFFZixJQUFNLGlCQUFpQixHQUFHLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxhQUFhLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUMvRyxJQUFJLGlCQUFpQixFQUFFO2dCQUNyQixPQUFPLEdBQUcsaUJBQWlCLENBQUM7YUFDN0I7WUFFRCxLQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hCLENBQUMsQ0FBQztRQUVGLElBQUksSUFBQSx1Q0FBbUIsRUFBQyxNQUFNLENBQUMsRUFBRTtZQUMvQixJQUFNLGlCQUFpQixHQUFHLFVBQUMsS0FBMEQ7Z0JBQ25GLElBQU0sT0FBTyxHQUFHLHVCQUFVLENBQUMscUNBQXFDLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3hFLGtCQUFrQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztZQUNyQyxDQUFDLENBQUM7WUFFRixNQUFNLENBQUMsRUFBRSxDQUFDLHVDQUFtQixDQUFDLFdBQVcsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1lBQzlELE1BQU0sQ0FBQyxFQUFFLENBQUMsdUNBQW1CLENBQUMsV0FBVyxFQUFFLGlCQUFpQixDQUFDLENBQUM7U0FDL0Q7YUFBTTtZQUNMLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLFVBQUMsS0FBaUI7Z0JBQzVELElBQUksT0FBTyxHQUFHLHVCQUFVLENBQUMsZ0NBQWdDLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2pFLGtCQUFrQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztZQUNyQyxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsVUFBQyxLQUFzQjtZQUN4RSxJQUFJLEtBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDbEIsS0FBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDO2dCQUM5QixLQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDYjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELHFDQUFPLEdBQVAsVUFBUSxZQUFvQjtRQUMxQixJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELHFDQUFPLEdBQVA7UUFDRSxpQkFBTSxPQUFPLFdBQUUsQ0FBQztRQUVoQixpR0FBaUc7UUFDakcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFDSCwwQkFBQztBQUFELENBdEVBLEFBc0VDLENBdEV3QyxxQkFBUyxHQXNFakQ7QUF0RVksa0RBQW1CO0FBd0VoQyxTQUFTLHFCQUFxQixDQUM1QixhQUF1RCxFQUN2RCxLQUF1RTtJQUV2RSxJQUFJLENBQUMsYUFBYSxFQUFFO1FBQ2xCLE9BQU8sU0FBUyxDQUFDO0tBQ2xCO0lBRUQsK0JBQStCO0lBQy9CLElBQUksT0FBTyxhQUFhLEtBQUssVUFBVSxFQUFFO1FBQ3ZDLHNDQUFzQztRQUN0QyxPQUFPLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUM3QjtJQUNELElBQUksYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUM3QiwyRkFBMkY7UUFDM0YsSUFBTSxhQUFhLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVoRCxPQUFPLE9BQU8sYUFBYSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDakY7QUFDSCxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM5S0QsK0NBQWtFO0FBR2xFLDZDQUE0QztBQUU1Qzs7R0FFRztBQUNIO0lBQTRDLDBDQUFnQztJQUUxRSxnQ0FBWSxNQUErQjtRQUEvQix1QkFBQSxFQUFBLFdBQStCO1FBQTNDLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBTWQ7UUFKQyxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFFBQVEsRUFBRSwyQkFBMkI7WUFDckMsSUFBSSxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDO1NBQ3RDLEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztJQUNsQixDQUFDO0lBRUQsMENBQVMsR0FBVCxVQUFVLE1BQWlCLEVBQUUsU0FBNEI7UUFBekQsaUJBOENDO1FBN0NDLGlCQUFNLFNBQVMsWUFBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFbkMsSUFBTSxxQkFBcUIsR0FBRztZQUM1QixPQUFPLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN4RSxDQUFDLENBQUM7UUFFRixJQUFNLHNCQUFzQixHQUFHO1lBQzdCLE1BQU0sQ0FBQyxXQUFXLEVBQUUsS0FBSyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3ZGLENBQUMsQ0FBQztRQUVGLElBQU0sb0NBQW9DLEdBQUc7WUFDM0MscUJBQXFCLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdEQsQ0FBQyxDQUFDO1FBRUYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxlQUFlLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztRQUU5RSw0Q0FBNEM7UUFDNUMsSUFBSyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQW1CLENBQUMsMkJBQTJCLEVBQUU7WUFDbkUsTUFBTSxDQUFDLEVBQUUsQ0FDTixNQUFNLENBQUMsT0FBTyxDQUFDLFdBQW1CLENBQUMsMkJBQTJCLEVBQy9ELG9DQUFvQyxDQUNyQyxDQUFDO1NBQ0g7UUFFRCxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsb0NBQW9DLENBQUMsQ0FBQztRQUV2RixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztZQUNyQixJQUFJLENBQUMscUJBQXFCLEVBQUUsRUFBRTtnQkFDNUIsSUFBSSxPQUFPLEVBQUU7b0JBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO2lCQUN2QztnQkFDRCxPQUFPO2FBQ1I7WUFFRCxJQUFNLGNBQWMsR0FDbEIsTUFBTSxDQUFDLFdBQVcsRUFBRSxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFVBQVU7Z0JBQ3pELENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNO2dCQUNoQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDO1lBRXpDLE1BQU0sQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7UUFFSCxlQUFlO1FBQ2Ysb0NBQW9DLEVBQUUsQ0FBQztRQUN2QyxzQkFBc0IsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFDSCw2QkFBQztBQUFELENBMURBLEFBMERDLENBMUQyQywyQkFBWSxHQTBEdkQ7QUExRFksd0RBQXNCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNSbkMsK0RBQXdGO0FBQ3hGLDhCQUEyQjtBQUczQiw2Q0FBNEM7QUFFNUM7O0dBRUc7QUFDSDtJQUE4Qyw0Q0FBb0I7SUFFaEUsa0NBQVksTUFBdUM7UUFBdkMsdUJBQUEsRUFBQSxXQUF1QztRQUFuRCxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQU9kO1FBTEMsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxRQUFRLEVBQUUsNkJBQTZCO1lBQ3ZDLElBQUksRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQztZQUNwQyxJQUFJLEVBQUUsUUFBUTtTQUNmLEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztJQUNsQixDQUFDO0lBRUQsNENBQVMsR0FBVCxVQUFVLE1BQWlCLEVBQUUsU0FBNEI7UUFBekQsaUJBc0lDO1FBcklDLHlDQUF5QztRQUN6QyxpQkFBTSxTQUFTLFlBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUUxQyxzRUFBc0U7UUFDdEUsSUFBSSxPQUFPLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxnQ0FBZ0MsS0FBSyxTQUFTLEVBQUU7WUFDL0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQ0FBZ0MsR0FBRyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsZ0NBQWdDLENBQUM7U0FDdkc7UUFFRCxJQUFJLGNBQWMsR0FBRztZQUNuQixJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUUsSUFBSSxLQUFJLENBQUMsZUFBZSxFQUFFO2dCQUM5QyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3BCO2lCQUFNO2dCQUNMLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDbkI7UUFDSCxDQUFDLENBQUM7UUFFRixJQUFJLGdCQUFnQixHQUFHO1lBQ3JCLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRSxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRTtnQkFDL0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNwRDtpQkFBTTtnQkFDTCxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ3hEO1FBQ0gsQ0FBQyxDQUFDO1FBRUYsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztRQUNsQixJQUFJLGVBQWUsR0FBRyxDQUFDLENBQUM7UUFFeEI7Ozs7Ozs7Ozs7Ozs7OztXQWVHO1FBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7WUFDckIsd0RBQXdEO1lBQ3hELHdHQUF3RztZQUN4Ryx3R0FBd0c7WUFDeEcsd0NBQXdDO1lBQ3hDLElBQUksU0FBUyxFQUFFO2dCQUNiLHdHQUF3RztnQkFDeEcsNEdBQTRHO2dCQUM1RywyR0FBMkc7Z0JBQzNHLHlFQUF5RTtnQkFDekUsY0FBYyxFQUFFLENBQUM7Z0JBRWpCLElBQUksS0FBSSxDQUFDLE1BQU0sQ0FBQyxnQ0FBZ0MsRUFBRTtvQkFDaEQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztpQkFDeEQ7Z0JBRUQsT0FBTzthQUNSO1lBRUQsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBRXJCLElBQUksR0FBRyxHQUFHLFNBQVMsR0FBRyxHQUFHLEVBQUU7Z0JBQ3pCLGdGQUFnRjtnQkFDaEYsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDbkIsZUFBZSxHQUFHLEdBQUcsQ0FBQztnQkFDdEIsT0FBTzthQUNSO2lCQUFNLElBQUksR0FBRyxHQUFHLFNBQVMsR0FBRyxHQUFHLEVBQUU7Z0JBQ2hDLG9HQUFvRztnQkFDcEcsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDbkIsY0FBYyxFQUFFLENBQUM7Z0JBQ2pCLGVBQWUsR0FBRyxHQUFHLENBQUM7Z0JBQ3RCLE9BQU87YUFDUjtZQUVELFNBQVMsR0FBRyxHQUFHLENBQUM7WUFFaEIsVUFBVSxDQUFDO2dCQUNULElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLGVBQWUsR0FBRyxHQUFHLEVBQUU7b0JBQ3RDLDZFQUE2RTtvQkFDN0UsY0FBYyxFQUFFLENBQUM7aUJBQ2xCO1lBQ0gsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRTtZQUN6QyxrR0FBa0c7WUFDbEcsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLFVBQUMsS0FBbUI7WUFDaEUsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLDZCQUE2QixFQUFFO2dCQUMzRSx1R0FBdUc7Z0JBQ3ZHLFNBQVMsR0FBRyxJQUFJLENBQUM7YUFDbEI7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILElBQU0scUNBQXFDLEdBQUc7WUFDNUMsZ0NBQWdDO1lBQ2hDLEtBQUksQ0FBQyw4QkFBOEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUUzQyw2REFBNkQ7WUFDN0QsS0FBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUM7Z0JBQzFCLEtBQUksQ0FBQyw4QkFBOEIsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM1QyxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQztRQUVGLHFHQUFxRztRQUNyRyxxQ0FBcUMsRUFBRSxDQUFDO1FBRXhDLElBQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN2RyxrSEFBa0g7UUFDbEgsZ0hBQWdIO1FBQ2hILHNEQUFzRDtRQUN0RCxJQUFNLGtCQUFrQixHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxJQUFJLGlCQUFpQixDQUFDO1FBRXBFLGtGQUFrRjtRQUNsRixJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUUsSUFBSSxrQkFBa0IsRUFBRTtZQUM1QyxpREFBaUQ7WUFDakQsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ1Ysb0RBQW9EO1lBQ3BELHFDQUFxQyxFQUFFLENBQUM7WUFFeEMseUVBQXlFO1lBQ3pFLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLFVBQUMsS0FBbUI7Z0JBQ2hFLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyw2QkFBNkIsRUFBRTtvQkFDM0UscUNBQXFDLEVBQUUsQ0FBQztpQkFDekM7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVTLCtDQUFZLEdBQXRCO1FBQ0UsSUFBSSxhQUFhLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFFekMsZ0RBQWdEO1FBQ2hELDhHQUE4RztRQUM5RyxnSEFBZ0g7UUFDaEgsaUZBQWlGO1FBQ2pGLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxTQUFHLENBQUMsS0FBSyxFQUFFO1lBQ2xDLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztTQUNqQyxDQUFDLENBQUMsQ0FBQztRQUVKLE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7OztPQUlHO0lBQ08saUVBQThCLEdBQXhDLFVBQXlDLE9BQWdCO1FBQ3ZELElBQU0sMkJBQTJCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBRS9FLElBQUksT0FBTyxFQUFFO1lBQ1gsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLFdBQVcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1NBQy9EO2FBQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxRQUFRLENBQUMsMkJBQTJCLENBQUMsRUFBRTtZQUN0RSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsUUFBUSxDQUFDLDJCQUEyQixDQUFDLENBQUM7U0FDNUQ7SUFDSCxDQUFDO0lBQ0gsK0JBQUM7QUFBRCxDQWhMQSxBQWdMQyxDQWhMNkMsMkNBQW9CLEdBZ0xqRTtBQWhMWSw0REFBd0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1RyQyxtQ0FBOEM7QUFDOUMsOEJBQTJCO0FBRzNCLDZDQUE0QztBQUU1Qzs7R0FFRztBQUNIO0lBQXNDLG9DQUFvQjtJQUV4RCwwQkFBWSxNQUF5QjtRQUF6Qix1QkFBQSxFQUFBLFdBQXlCO1FBQXJDLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBTWQ7UUFKQyxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFFBQVEsRUFBRSxxQkFBcUI7WUFDL0IsSUFBSSxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDO1NBQ2xDLEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztJQUNsQixDQUFDO0lBRUQsb0NBQVMsR0FBVCxVQUFVLE1BQWlCLEVBQUUsU0FBNEI7UUFDdkQsaUJBQU0sU0FBUyxZQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVuQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztZQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVTLHVDQUFZLEdBQXRCO1FBQ0UsSUFBSSxhQUFhLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFFekMsZ0RBQWdEO1FBQ2hELDhHQUE4RztRQUM5RyxnSEFBZ0g7UUFDaEgsaUZBQWlGO1FBQ2pGLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxTQUFHLENBQUMsS0FBSyxFQUFFO1lBQ2xDLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztTQUNqQyxDQUFDLENBQUMsQ0FBQztRQUVKLE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7SUFDSCx1QkFBQztBQUFELENBaENBLEFBZ0NDLENBaENxQyxlQUFNLEdBZ0MzQztBQWhDWSw0Q0FBZ0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1Q3QiwrQ0FBZ0U7QUFDaEUsOEJBQTJCO0FBQzNCLDZDQUE0QztBQUU1QztJQUF1QyxxQ0FBZ0M7SUFNckUsMkJBQVksTUFBK0I7UUFBL0IsdUJBQUEsRUFBQSxXQUErQjtRQUEzQyxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQU1kO1FBSkMsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxHQUFHLEVBQUUsSUFBSTtZQUNULFFBQVEsRUFBRSxzQkFBc0I7U0FDakMsRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQ2xCLENBQUM7SUFFUyxvQ0FBUSxHQUFsQjtRQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFUyx3Q0FBWSxHQUF0QjtRQUNFLElBQUksV0FBVyxHQUFHLElBQUksU0FBRyxDQUFDLElBQUksRUFBRTtZQUM5QixJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3BCLE9BQU8sRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFO1NBQzlCLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUV0QixPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBRVMsMENBQWMsR0FBeEIsVUFBeUIsYUFBNEI7UUFBckQsaUJBbURDO1FBbkR3Qiw4QkFBQSxFQUFBLG9CQUE0QjtRQUNuRCxzQkFBc0I7UUFDdEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUV6QixJQUFJLGdCQUFnQixHQUFRLElBQUksQ0FBQztRQUVqQyxJQUFNLFVBQVUsR0FBRyxVQUFDLFFBQWE7WUFDL0IsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFDdEUsQ0FBQyxDQUFDO1FBRUYsSUFBTSxZQUFZLEdBQUcsVUFBQyxRQUFhO1lBQ2pDLFFBQVEsQ0FBQyxXQUFXLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQ3pFLENBQUMsQ0FBQztnQ0FFTyxJQUFJO1lBQ1gsSUFBSSxRQUFRLEdBQUcsSUFBSSxTQUFHLENBQUMsSUFBSSxFQUFFO2dCQUMzQixNQUFNLEVBQUUsSUFBSTtnQkFDWixPQUFPLEVBQUUsT0FBSyxTQUFTLENBQUMsc0JBQXNCLENBQUM7YUFDaEQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLFNBQUcsQ0FBQyxHQUFHLEVBQUUsRUFDdEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUUvQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQ3JCLElBQUksYUFBYSxJQUFJLElBQUksRUFBRSxFQUFFLDBEQUEwRDtvQkFDckYsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDO2lCQUM3QjtxQkFBTSxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBSyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsNERBQTREO29CQUMzRyxnQkFBZ0IsR0FBRyxRQUFRLENBQUM7aUJBQzdCO2FBQ0Y7WUFFRCw4QkFBOEI7WUFDOUIsUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUU7Z0JBQ25CLDREQUE0RDtnQkFDNUQsSUFBSSxnQkFBZ0IsRUFBRTtvQkFDcEIsWUFBWSxDQUFDLGdCQUFnQixDQUFDLENBQUM7aUJBQ2hDO2dCQUVELDBCQUEwQjtnQkFDMUIsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDO2dCQUM1QixVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBRXJCLGlCQUFpQjtnQkFDakIsS0FBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDNUMsQ0FBQyxDQUFDLENBQUM7WUFFSCxzQkFBc0I7WUFDdEIsSUFBSSxnQkFBZ0IsRUFBRTtnQkFDcEIsVUFBVSxDQUFDLGdCQUFnQixDQUFDLENBQUM7YUFDOUI7WUFFRCxPQUFLLFdBQVcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7OztRQW5DcEMsS0FBaUIsVUFBVSxFQUFWLEtBQUEsSUFBSSxDQUFDLEtBQUssRUFBVixjQUFVLEVBQVYsSUFBVTtZQUF0QixJQUFJLElBQUksU0FBQTtvQkFBSixJQUFJO1NBb0NaO0lBQ0gsQ0FBQztJQUVTLDRDQUFnQixHQUExQixVQUEyQixLQUFhO1FBQ3RDLGlCQUFNLGdCQUFnQixZQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFUyw4Q0FBa0IsR0FBNUIsVUFBNkIsS0FBYTtRQUN4QyxpQkFBTSxrQkFBa0IsWUFBQyxLQUFLLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRVMsK0NBQW1CLEdBQTdCLFVBQThCLEtBQWEsRUFBRSxjQUE4QjtRQUE5QiwrQkFBQSxFQUFBLHFCQUE4QjtRQUN6RSxpQkFBTSxtQkFBbUIsWUFBQyxLQUFLLENBQUMsQ0FBQztRQUNqQyxJQUFJLGNBQWMsRUFBRTtZQUNsQixJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzVCO0lBQ0gsQ0FBQztJQWpHdUIsZ0NBQWMsR0FBRyxVQUFVLENBQUM7SUFrR3RELHdCQUFDO0NBcEdELEFBb0dDLENBcEdzQywyQkFBWSxHQW9HbEQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3hHRCx5Q0FBdUQ7QUFDdkQsOEJBQTJCO0FBQzNCLHNEQUFrRTtBQUNsRSw2Q0FBNkQ7QUFpQjdEOzs7Ozs7O0dBT0c7QUFDSDtJQUF1RCx5QkFBaUI7SUFTdEUsZUFBWSxNQUE2QjtRQUE3Qix1QkFBQSxFQUFBLFNBQWlCLEVBQVk7UUFBekMsWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FNZDtRQVpPLGlCQUFXLEdBQUc7WUFDcEIsT0FBTyxFQUFFLElBQUksaUNBQWUsRUFBeUI7WUFDckQsYUFBYSxFQUFFLElBQUksaUNBQWUsRUFBeUI7U0FDNUQsQ0FBQztRQUtBLEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDckMsUUFBUSxFQUFFLFVBQVU7U0FDWCxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxQixLQUFJLENBQUMsSUFBSSxHQUFHLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDOztJQUMvQixDQUFDO0lBRVMsNEJBQVksR0FBdEI7UUFBQSxpQkFjQztRQWJDLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFFM0QsSUFBSSxZQUFZLEdBQUcsSUFBSSxTQUFHLENBQUMsT0FBTyxFQUFFO1lBQ2xDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDcEIsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRztZQUN0QixPQUFPLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRTtTQUM5QixDQUFDLENBQUMsSUFBSSxDQUFDLFdBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUU3QyxZQUFZLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRTtZQUN2QixLQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsdUJBQU8sR0FBUCxVQUFRLElBQXFCO1FBQzNCLElBQUksSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDdEIsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBTSxhQUFhLEdBQUcsV0FBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRDs7O09BR0c7SUFDSCx1QkFBTyxHQUFQO1FBQ0UsT0FBTyxXQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRDs7T0FFRztJQUNILHlCQUFTLEdBQVQ7UUFDRSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsdUJBQU8sR0FBUDtRQUNFLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7OztPQUlHO0lBQ08sNEJBQVksR0FBdEI7UUFDRSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOzs7O09BSUc7SUFDTyxrQ0FBa0IsR0FBNUIsVUFBNkIsSUFBWTtRQUN2QyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFNRCxzQkFBSSwwQkFBTztRQUpYOzs7V0FHRzthQUNIO1lBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM3QyxDQUFDOzs7T0FBQTtJQU1ELHNCQUFJLGdDQUFhO1FBSmpCOzs7V0FHRzthQUNIO1lBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuRCxDQUFDOzs7T0FBQTtJQUNILFlBQUM7QUFBRCxDQTFHQSxBQTBHQyxDQTFHc0QscUJBQVMsR0EwRy9EO0FBMUdZLHNCQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM1QmxCLCtDQUFrRTtBQUNsRSwrQ0FBNEU7QUFDNUUsOEJBQTJCO0FBRzNCLDRDQUEyQztBQUUzQzs7Ozs7Ozs7OztHQVVHO0FBQ0gsb0ZBQW9GO0FBQ3BGLHFHQUFxRztBQUNyRyxrRkFBa0Y7QUFDbEY7SUFBNkIsMkJBQWdDO0lBSTNELGlCQUFZLE1BQStCO1FBQS9CLHVCQUFBLEVBQUEsV0FBK0I7UUFBM0MsWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FLZDtRQVJPLGdCQUFVLEdBQXdCLEVBQUUsQ0FBQztRQTJDckMsMEJBQW9CLEdBQUcsVUFBQyxDQUFVLEVBQUUsR0FBVztZQUNyRCxJQUFNLFNBQVMsR0FBRyxLQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDL0MsSUFBSSxTQUFTLEVBQUU7Z0JBQ2IsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUNuQyx1QkFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFJLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO2FBQy9DO1FBQ0gsQ0FBQyxDQUFDO1FBRU0sdUJBQWlCLEdBQUcsVUFBQyxDQUFVLEVBQUUsR0FBVztZQUNsRCxJQUFNLFNBQVMsR0FBRyxLQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDL0MsSUFBTSxPQUFPLEdBQUcsS0FBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN4QyxJQUFJLFNBQVMsRUFBRTtnQkFDYiw0QkFBNEI7Z0JBQzVCLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ2xDO2lCQUFNO2dCQUNMLElBQU0sbUJBQWlCLEdBQUcsS0FBSSxDQUFDLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUUvRCxtQkFBaUIsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO29CQUNsQyxLQUFJLENBQUMscUJBQXFCLENBQUMsbUJBQWlCLENBQUMsQ0FBQztnQkFDaEQsQ0FBQyxDQUFDLENBQUM7Z0JBRUgsS0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsbUJBQWlCLENBQUMsQ0FBQztnQkFDeEMsS0FBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsbUJBQWlCLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQzthQUMvRDtRQUNILENBQUMsQ0FBQztRQUVNLHlCQUFtQixHQUFHO1lBQzVCLG9IQUFvSDtZQUNwSCxpSEFBaUg7WUFDakgsOEdBQThHO1lBQzlHLGdIQUFnSDtZQUNoSCxnQkFBZ0I7WUFFaEIsS0FBaUIsVUFBVSxFQUFWLEtBQUEsS0FBSSxDQUFDLEtBQUssRUFBVixjQUFVLEVBQVYsSUFBVSxFQUFFO2dCQUF4QixJQUFJLElBQUksU0FBQTtnQkFDWCxJQUFNLFNBQVMsR0FBRyxLQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNwRCxJQUFJLFNBQVMsRUFBRTtvQkFDYixNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxLQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDO2lCQUN4RjthQUNGO1FBQ0gsQ0FBQyxDQUFDO1FBY00sMkJBQXFCLEdBQUcsVUFBQyxNQUF5QjtZQUN4RCxLQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQztRQTdGQSxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFFBQVEsRUFBRSxZQUFZO1NBQ0QsRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQ3hDLENBQUM7SUFFTSwyQkFBUyxHQUFoQixVQUFpQixNQUFpQixFQUFFLFNBQTRCO1FBQzlELHdEQUF3RDtRQUN4RCxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUV4RCxpQkFBTSxTQUFTLFlBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFUyw4QkFBWSxHQUF0QjtRQUNFLElBQUksY0FBYyxHQUFHLElBQUksU0FBRyxDQUFDLEtBQUssRUFBRTtZQUNsQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3BCLE9BQU8sRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFO1NBQzlCLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBRTNCLE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENBQUM7SUFFTyx1Q0FBcUIsR0FBN0I7UUFDRSxzQkFBc0I7UUFDdEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUVyQix1QkFBdUI7UUFDdkIsS0FBaUIsVUFBVSxFQUFWLEtBQUEsSUFBSSxDQUFDLEtBQUssRUFBVixjQUFVLEVBQVYsSUFBVSxFQUFFO1lBQXhCLElBQUksSUFBSSxTQUFBO1lBQ1gsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDeEM7SUFDSCxDQUFDO0lBMkNPLHdDQUFzQixHQUE5QixVQUErQixRQUFrQjtRQUMvQyxPQUFPLElBQUksaUJBQWlCLENBQUM7WUFDM0IsR0FBRyxFQUFFLFFBQVEsQ0FBQyxHQUFHO1lBQ2pCLElBQUksRUFBRSxRQUFRLENBQUMsS0FBSztZQUNwQixTQUFTLEVBQUUsUUFBUSxDQUFDLFNBQVM7U0FDOUIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLG9DQUFrQixHQUExQixVQUEyQixHQUFXO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBYixDQUFhLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBS0gsY0FBQztBQUFELENBckdBLEFBcUdDLENBckc0QiwyQkFBWSxHQXFHeEM7QUFyR1ksMEJBQU87QUE4R3BCO0lBQWdDLHFDQUFxQztJQUVuRSwyQkFBWSxNQUErQjtRQUEzQyxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQU9kO1FBTEMsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxRQUFRLEVBQUUsbUJBQW1CO1lBQzdCLE9BQU8sRUFBRSxVQUFVO1lBQ25CLFFBQVEsRUFBRSxFQUFFO1NBQ2MsRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQzdDLENBQUM7SUFFRCxzQkFBSSxrQ0FBRzthQUFQO1lBQ0UsT0FBUSxJQUFJLENBQUMsTUFBa0MsQ0FBQyxHQUFHLENBQUM7UUFDdEQsQ0FBQzs7O09BQUE7SUFDSCx3QkFBQztBQUFELENBZkEsQUFlQyxDQWYrQiwyQkFBWSxHQWUzQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNsSkQseUNBQXVEO0FBQ3ZELHNEQUEwRDtBQUMxRCw0Q0FBeUM7QUFDekMsNkNBQTZEO0FBbUQ3RDtJQUE4RSxnQ0FBNkI7SUFXekcsc0JBQVksTUFBK0I7UUFBL0IsdUJBQUEsRUFBQSxXQUErQjtRQUEzQyxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQVFkO1FBZk8sd0JBQWtCLEdBQUc7WUFDM0IsV0FBVyxFQUFFLElBQUksaUNBQWUsRUFBZ0M7WUFDaEUsYUFBYSxFQUFFLElBQUksaUNBQWUsRUFBZ0M7WUFDbEUsY0FBYyxFQUFFLElBQUksaUNBQWUsRUFBZ0M7U0FDcEUsQ0FBQztRQUtBLEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDckMsS0FBSyxFQUFFLEVBQUU7WUFDVCxRQUFRLEVBQUUsaUJBQWlCO1NBQzVCLEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWhCLEtBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7O0lBQ2pDLENBQUM7SUFFTyxtQ0FBWSxHQUFwQixVQUFxQixHQUFXO1FBQzlCLEtBQUssSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUM1QixJQUFJLEdBQUcsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRTtnQkFDakMsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDeEI7U0FDRjtRQUNELE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDWixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsK0JBQVEsR0FBUjtRQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILDhCQUFPLEdBQVAsVUFBUSxHQUFXO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILDhCQUFPLEdBQVAsVUFBUSxHQUFXLEVBQUUsS0FBc0IsRUFBRSxZQUFvQixFQUFFLFNBQWM7UUFBcEMsNkJBQUEsRUFBQSxvQkFBb0I7UUFBRSwwQkFBQSxFQUFBLGNBQWM7UUFDL0UsSUFBTSxRQUFRLGNBQUssR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsV0FBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxJQUFLLENBQUMsU0FBUyxJQUFJLEVBQUUsU0FBUyxXQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFdEcsd0JBQXdCO1FBQ3hCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN2RCxPQUFPO1NBQ1I7UUFFRCw0QkFBNEI7UUFDNUIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUMxQixRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ25EO1FBRUQsNkVBQTZFO1FBQzdFLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQywwREFBMEQ7UUFFaEYsMkJBQTJCO1FBQzNCLElBQUksWUFBWSxFQUFFO1lBQ2hCLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQWYsQ0FBZSxDQUFDLENBQUM7WUFDN0QsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO2dCQUNiLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQzNCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFDdkM7U0FDRjthQUFNO1lBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDM0I7UUFDRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxpQ0FBVSxHQUFWLFVBQVcsR0FBVztRQUNwQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2QsdUJBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDakQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzdCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsaUNBQVUsR0FBVixVQUFXLEdBQVc7UUFDcEIsSUFBSSxHQUFHLEtBQUssSUFBSSxDQUFDLFlBQVksRUFBRTtZQUM3Qiw4REFBOEQ7WUFDOUQsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFbkMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDZCxJQUFJLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQztZQUN4QixJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDOUIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVEOzs7T0FHRztJQUNILHNDQUFlLEdBQWY7UUFDRSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxvQ0FBYSxHQUFiLFVBQWMsR0FBVztRQUN2QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQUMsSUFBSSxJQUFLLE9BQUEsSUFBSSxDQUFDLEdBQUcsS0FBSyxHQUFHLEVBQWhCLENBQWdCLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCx1Q0FBZ0IsR0FBaEIsVUFBaUIsUUFBb0I7UUFBckMsaUJBUUM7UUFQQyxRQUFRO2FBQ0wsTUFBTSxDQUFDLFVBQUMsSUFBSSxJQUFLLE9BQUEsQ0FBQyxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBdkIsQ0FBdUIsQ0FBQzthQUN6QyxPQUFPLENBQUMsVUFBQyxJQUFJLElBQUssT0FBQSxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBckUsQ0FBcUUsQ0FBQyxDQUFDO1FBRTVGLElBQUksQ0FBQyxLQUFLO2FBQ1AsTUFBTSxDQUFDLFVBQUMsSUFBSSxJQUFLLE9BQUEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLEdBQUcsRUFBbEIsQ0FBa0IsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQXZELENBQXVELENBQUM7YUFDekUsT0FBTyxDQUFDLFVBQUMsSUFBSSxJQUFLLE9BQUEsS0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQXpCLENBQXlCLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxpQ0FBVSxHQUFWO1FBQ0UsdUNBQXVDO1FBQ3ZDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDdkIsY0FBYztRQUNkLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBRWhCLDJEQUEyRDtRQUMzRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUV6QixjQUFjO1FBQ2QsS0FBaUIsVUFBSyxFQUFMLGVBQUssRUFBTCxtQkFBSyxFQUFMLElBQUssRUFBRTtZQUFuQixJQUFJLElBQUksY0FBQTtZQUNYLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDbkM7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsZ0NBQVMsR0FBVDtRQUNFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3hDLENBQUM7SUFFUyx1Q0FBZ0IsR0FBMUIsVUFBMkIsR0FBVztRQUNwQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVTLHlDQUFrQixHQUE1QixVQUE2QixHQUFXO1FBQ3RDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRVMsMENBQW1CLEdBQTdCLFVBQThCLEdBQVc7UUFDdkMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFNRCxzQkFBSSxxQ0FBVztRQUpmOzs7V0FHRzthQUNIO1lBQ0UsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3hELENBQUM7OztPQUFBO0lBTUQsc0JBQUksdUNBQWE7UUFKakI7OztXQUdHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDMUQsQ0FBQzs7O09BQUE7SUFNRCxzQkFBSSx3Q0FBYztRQUpsQjs7O1dBR0c7YUFDSDtZQUNFLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMzRCxDQUFDOzs7T0FBQTtJQUNILG1CQUFDO0FBQUQsQ0ExTkEsQUEwTkMsQ0ExTjZFLHFCQUFTLEdBME50RjtBQTFOcUIsb0NBQVk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3REbEMsaUNBQTJDO0FBSTNDOztHQUVHO0FBQ0gsSUFBWSxvQkFTWDtBQVRELFdBQVksb0JBQW9CO0lBQzlCOztPQUVHO0lBQ0gsaUVBQUssQ0FBQTtJQUNMOztPQUVHO0lBQ0gsNkVBQVcsQ0FBQTtBQUNiLENBQUMsRUFUVyxvQkFBb0IsR0FBcEIsNEJBQW9CLEtBQXBCLDRCQUFvQixRQVMvQjtBQVlEOztHQUVHO0FBQ0g7SUFBbUMsaUNBQTBCO0lBRTNELHVCQUFZLE1BQTJCO1FBQXZDLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBS2Q7UUFIQyxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFVBQVUsRUFBRSxDQUFDLGdCQUFnQixFQUFFLGlCQUFpQixHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNoRixFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7SUFDekMsQ0FBQztJQUVELGlDQUFTLEdBQVQsVUFBVSxNQUFpQixFQUFFLFNBQTRCO1FBQXpELGlCQTJCQztRQTFCQyxpQkFBTSxTQUFTLFlBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRW5DLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUM5QixJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFckMsSUFBSSxJQUFJLEdBQUc7WUFDVCxRQUFRLE1BQU0sQ0FBQyxPQUFPLEVBQUU7Z0JBQ3RCLEtBQUssb0JBQW9CLENBQUMsS0FBSztvQkFDN0IsS0FBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUN0QyxNQUFNO2dCQUNSLEtBQUssb0JBQW9CLENBQUMsV0FBVztvQkFDbkMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO29CQUM1QyxNQUFNO2FBQ1Q7UUFDSCxDQUFDLENBQUM7UUFFRixJQUFJLE1BQU0sR0FBRztZQUNYLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsQ0FBQyxDQUFDO1FBRUYsYUFBYTtRQUNiLElBQUksRUFBRSxDQUFDO1FBQ1AsdUNBQXVDO1FBQ3ZDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRTdELFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBQ0gsb0JBQUM7QUFBRCxDQXRDQSxBQXNDQyxDQXRDa0MsYUFBSyxHQXNDdkM7QUF0Q1ksc0NBQWE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQy9CMUIsK0NBQWdFO0FBR2hFLDZDQUE0QztBQUU1Qzs7R0FFRztBQUNIO0lBQWtELGdEQUFnQztJQUVoRixzQ0FBWSxNQUErQjtRQUEvQix1QkFBQSxFQUFBLFdBQStCO1FBQTNDLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBTWQ7UUFKQyxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFFBQVEsRUFBRSxvQkFBb0I7WUFDOUIsSUFBSSxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUM7U0FDNUMsRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQ2xCLENBQUM7SUFFRCxnREFBUyxHQUFULFVBQVUsTUFBaUIsRUFBRSxTQUE0QjtRQUF6RCxpQkE4Q0M7UUE3Q0MsaUJBQU0sU0FBUyxZQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVuQyxJQUFNLDJCQUEyQixHQUFHO1lBQ2xDLE9BQU8sTUFBTSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDOUUsQ0FBQyxDQUFDO1FBRUYsSUFBTSw0QkFBNEIsR0FBRztZQUNuQyxNQUFNLENBQUMsV0FBVyxFQUFFLEtBQUssTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzdGLENBQUMsQ0FBQztRQUVGLElBQU0sMENBQTBDLEdBQUc7WUFDakQsMkJBQTJCLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDNUQsQ0FBQyxDQUFDO1FBRUYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxlQUFlLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztRQUVwRiw0Q0FBNEM7UUFDNUMsSUFBSyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQW1CLENBQUMsMkJBQTJCLEVBQUU7WUFDbkUsTUFBTSxDQUFDLEVBQUUsQ0FDTixNQUFNLENBQUMsT0FBTyxDQUFDLFdBQW1CLENBQUMsMkJBQTJCLEVBQy9ELDBDQUEwQyxDQUMzQyxDQUFDO1NBQ0g7UUFFRCxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsMENBQTBDLENBQUMsQ0FBQztRQUU3RixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztZQUNyQixJQUFJLENBQUMsMkJBQTJCLEVBQUUsRUFBRTtnQkFDbEMsSUFBSSxPQUFPLEVBQUU7b0JBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO2lCQUNoQztnQkFDRCxPQUFPO2FBQ1I7WUFFRCxJQUFNLGNBQWMsR0FDbEIsTUFBTSxDQUFDLFdBQVcsRUFBRSxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGdCQUFnQjtnQkFDL0QsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU07Z0JBQ2hDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQztZQUUvQyxNQUFNLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO1FBRUgsZUFBZTtRQUNmLDBDQUEwQyxFQUFFLENBQUMsQ0FBQyxtQ0FBbUM7UUFDakYsNEJBQTRCLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0lBQ0gsbUNBQUM7QUFBRCxDQTFEQSxBQTBEQyxDQTFEaUQsMkJBQVksR0EwRDdEO0FBMURZLG9FQUE0Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDUnpDLHlDQUFzQztBQUl0Qyw2Q0FBNEM7QUFFNUM7O0dBRUc7QUFDSDtJQUE0QywwQ0FBUztJQUduRCxnQ0FBWSxNQUErQjtRQUEvQix1QkFBQSxFQUFBLFdBQStCO1FBQTNDLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBTWQ7UUFMQyxLQUFJLENBQUMscUJBQXFCLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFcEQsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxVQUFVLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQztTQUMxQyxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7SUFDbEIsQ0FBQztJQUVELDBDQUFTLEdBQVQsVUFBVSxNQUFpQixFQUFFLFNBQTRCO1FBQXpELGlCQWlCQztRQWhCQyxpQkFBTSxTQUFTLFlBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRW5DLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUV2QixJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxVQUFDLE1BQThCLEVBQUUsS0FBYTtZQUMxRSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDM0MsS0FBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQztRQUVILElBQU0sZUFBZSxHQUFHO1lBQ3RCLElBQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ2hELEtBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDO1FBRUYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUM1RSxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELHlDQUFRLEdBQVIsVUFBUyxLQUFhO1FBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ25DLCtGQUErRjtZQUMvRixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDbEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDOUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUNoQztJQUNILENBQUM7SUFFRCxnREFBZSxHQUFmLFVBQWdCLFdBQTBCO1FBQTFDLGlCQVVDO1FBVmUsNEJBQUEsRUFBQSxnQkFBMEI7UUFDeEMsSUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUUzRSxZQUFZLENBQUMsT0FBTyxDQUFDLFVBQUEsT0FBTztZQUMxQixJQUFJLE9BQU8sS0FBSyxDQUFDLEVBQUU7Z0JBQ2pCLEtBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLFVBQUcsT0FBTyxNQUFHLENBQUMsQ0FBQzthQUM5QztpQkFBTTtnQkFDTCxLQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7YUFDNUQ7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCwyQ0FBVSxHQUFWO1FBQ0UsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7SUFDM0IsQ0FBQztJQUNILDZCQUFDO0FBQUQsQ0F4REEsQUF3REMsQ0F4RDJDLHFCQUFTLEdBd0RwRDtBQXhEWSx3REFBc0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1RuQyxpQ0FBMkM7QUFHM0MsOENBQTJDO0FBQzNDLDhDQUEyQztBQUUzQyw2Q0FBNEM7QUFFNUMsSUFBWSxxQkFrQlg7QUFsQkQsV0FBWSxxQkFBcUI7SUFDL0I7O09BRUc7SUFDSCwrRUFBVyxDQUFBO0lBQ1g7O09BRUc7SUFDSCwyRUFBUyxDQUFBO0lBQ1Q7OztPQUdHO0lBQ0gsK0ZBQW1CLENBQUE7SUFDbkI7O09BRUc7SUFDSCxtRkFBYSxDQUFBO0FBQ2YsQ0FBQyxFQWxCVyxxQkFBcUIsR0FBckIsNkJBQXFCLEtBQXJCLDZCQUFxQixRQWtCaEM7QUFjRDs7O0dBR0c7QUFDSDtJQUF1QyxxQ0FBOEI7SUFJbkUsMkJBQVksTUFBb0M7UUFBcEMsdUJBQUEsRUFBQSxXQUFvQztRQUFoRCxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQU9kO1FBTEMsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBMkI7WUFDOUQsUUFBUSxFQUFFLHNCQUFzQjtZQUNoQyxhQUFhLEVBQUUscUJBQXFCLENBQUMsbUJBQW1CO1lBQ3hELGtCQUFrQixFQUFFLEtBQUs7U0FDMUIsRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQ2xCLENBQUM7SUFFRCxxQ0FBUyxHQUFULFVBQVUsTUFBaUIsRUFBRSxTQUE0QjtRQUF6RCxpQkE2R0M7UUE1R0MsaUJBQU0sU0FBUyxZQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVuQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDOUIsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2pCLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsMkJBQTJCLENBQUMsQ0FBQztRQUMvRCxJQUFJLGdCQUFnQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUN4RSxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFFakIsSUFBSSxnQkFBZ0IsR0FBRztZQUNyQixNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLENBQUMsQ0FBQztRQUVGLElBQUksZUFBZSxHQUFHO1lBQ3BCLGdFQUFnRTtZQUNoRSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBRXZCLGtDQUFrQztZQUNsQyxJQUFJLElBQUksRUFBRTtnQkFDUixLQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUM1QyxLQUFJLENBQUMsT0FBTyxDQUFDLFdBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDeEMsSUFBSSxNQUFNLENBQUMsa0JBQWtCLEVBQUU7b0JBQzdCLEtBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztpQkFDYjtnQkFDRCxLQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUN6Qyx3QkFBd0IsRUFBRSxDQUFDO2FBQzVCO2lCQUFNO2dCQUNMLEtBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQy9DLEtBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFDbkQsS0FBSSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNaLEtBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUM7YUFDNUM7UUFDSCxDQUFDLENBQUM7UUFFRixJQUFJLHdCQUF3QixHQUFHO1lBQzdCLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1QsT0FBTzthQUNSO1lBRUQsK0dBQStHO1lBQy9HLHdHQUF3RztZQUN4Ryw0R0FBNEc7WUFDNUcsMkdBQTJHO1lBQzNHLDJCQUEyQjtZQUMzQixJQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ2hELElBQU0sb0JBQW9CLEdBQUcsTUFBTSxDQUFDLGVBQWUsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUMxRCxJQUFJLENBQUMsYUFBYSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFO2dCQUNuRSxLQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7YUFDakQ7aUJBQU07Z0JBQ0wsS0FBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2FBQ3BEO1FBQ0gsQ0FBQyxDQUFDO1FBRUYsSUFBSSxrQkFBa0IsR0FBRyxJQUFJLHlCQUFXLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQy9FLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsVUFBQyxNQUFNLEVBQUUsSUFBaUM7WUFDbkYsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDakIsZUFBZSxFQUFFLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLG9CQUFvQjtRQUVqRCxJQUFJLG1CQUFtQixHQUFHO1lBQ3hCLElBQUksQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRSxLQUFLLFFBQVEsRUFBRTtnQkFDOUMsS0FBSSxDQUFDLE9BQU8sQ0FDVix5QkFBVyxDQUFDLHFDQUFxQyxDQUFDLE1BQU0sQ0FBQyxFQUN6RCxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQzthQUN6QjtZQUVELG1GQUFtRjtZQUNuRiwrRUFBK0U7WUFDL0UsSUFBSSxLQUFLLEdBQUcsS0FBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3pDLElBQUksS0FBSyxHQUFHLFFBQVEsRUFBRTtnQkFDcEIsUUFBUSxHQUFHLEtBQUssQ0FBQztnQkFDakIsS0FBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLEdBQUcsQ0FBQztvQkFDdkIsV0FBVyxFQUFFLFFBQVEsR0FBRyxJQUFJO2lCQUM3QixDQUFDLENBQUM7YUFDSjtRQUNILENBQUMsQ0FBQztRQUVGLElBQUksK0JBQStCLEdBQUc7WUFDcEMsK0NBQStDO1lBQy9DLEtBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7Z0JBQ3ZHLHlCQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyx5QkFBVyxDQUFDLFdBQVcsQ0FBQztZQUNwRCxtQkFBbUIsRUFBRSxDQUFDO1FBQ3hCLENBQUMsQ0FBQztRQUVGLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLG1CQUFtQixDQUFDLENBQUM7UUFDdkUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsK0JBQStCLENBQUMsQ0FBQztRQUM3RSxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1FBRWxFLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLHdCQUF3QixDQUFDLENBQUM7UUFDMUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztRQUM1RSxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO1FBQ3hFLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLHdCQUF3QixDQUFDLENBQUM7UUFDdkUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztRQUM3RSxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO1FBRTNFLElBQUksSUFBSSxHQUFHO1lBQ1QsOEdBQThHO1lBQzlHLFdBQVc7WUFDWCxRQUFRLEdBQUcsQ0FBQyxDQUFDO1lBQ2IsS0FBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLEdBQUcsQ0FBQztnQkFDdkIsV0FBVyxFQUFFLElBQUk7YUFDbEIsQ0FBQyxDQUFDO1lBRUgsK0JBQStCLEVBQUUsQ0FBQztRQUNwQyxDQUFDLENBQUM7UUFDRixTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdkQsSUFBSSxFQUFFLENBQUM7SUFDVCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILG1DQUFPLEdBQVAsVUFBUSxlQUF1QixFQUFFLGVBQXVCO1FBQ3RELElBQUksV0FBVyxHQUFHLHlCQUFXLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDOUUsSUFBSSxTQUFTLEdBQUcseUJBQVcsQ0FBQyxhQUFhLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUU1RSxRQUFrQyxJQUFJLENBQUMsTUFBTyxDQUFDLGFBQWEsRUFBRTtZQUM1RCxLQUFLLHFCQUFxQixDQUFDLFdBQVc7Z0JBQ3BDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBRyxXQUFXLENBQUUsQ0FBQyxDQUFDO2dCQUMvQixNQUFNO1lBQ1IsS0FBSyxxQkFBcUIsQ0FBQyxTQUFTO2dCQUNsQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUcsU0FBUyxDQUFFLENBQUMsQ0FBQztnQkFDN0IsTUFBTTtZQUNSLEtBQUsscUJBQXFCLENBQUMsbUJBQW1CO2dCQUM1QyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUcsV0FBVyxnQkFBTSxTQUFTLENBQUUsQ0FBQyxDQUFDO2dCQUM5QyxNQUFNO1lBQ1IsS0FBSyxxQkFBcUIsQ0FBQyxhQUFhO2dCQUN0QyxJQUFJLGFBQWEsR0FBRyx5QkFBVyxDQUFDLGFBQWEsQ0FBQyxlQUFlLEdBQUcsZUFBZSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDbEcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFHLGFBQWEsQ0FBRSxDQUFDLENBQUM7Z0JBQ2pDLE1BQU07U0FDVDtJQUNILENBQUM7SUFFRDs7O09BR0c7SUFDTyx5Q0FBYSxHQUF2QixVQUF3QixVQUFrQjtRQUN4QyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUMvQixDQUFDO0lBQ0gsd0JBQUM7QUFBRCxDQTlKQSxBQThKQyxDQTlKc0MsYUFBSyxHQThKM0M7QUE5SlksOENBQWlCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM1QzlCLCtDQUFnRTtBQUVoRSw4Q0FBMkM7QUFFM0MsNkNBQTRDO0FBVzVDOztHQUVHO0FBQ0g7SUFBMEMsd0NBQXdDO0lBS2hGLDhCQUFZLE1BQXVDO1FBQXZDLHVCQUFBLEVBQUEsV0FBdUM7UUFBbkQsWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FVZDtRQVJDLEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDckMsUUFBUSxFQUFFLHlCQUF5QjtZQUNuQyxJQUFJLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7WUFDL0IsV0FBVyxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDO1lBQ3ZDLFlBQVksRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztTQUN4QyxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVoQixLQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQzs7SUFDL0IsQ0FBQztJQUVELHdDQUFTLEdBQVQsVUFBVSxNQUFpQixFQUFFLFNBQTRCLEVBQUUsZ0JBQWdDO1FBQTNGLGlCQTJHQztRQTNHMEQsaUNBQUEsRUFBQSx1QkFBZ0M7UUFDekYsaUJBQU0sU0FBUyxZQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVuQyxzRUFBc0U7UUFDdEUsSUFBSSxPQUFPLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxnQ0FBZ0MsS0FBSyxTQUFTLEVBQUU7WUFDL0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQ0FBZ0MsR0FBRyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsZ0NBQWdDLENBQUM7U0FDdkc7UUFFRCxJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBRXJCLHVEQUF1RDtRQUN2RCxJQUFJLG9CQUFvQixHQUFHO1lBQ3pCLHlGQUF5RjtZQUN6Rix5RUFBeUU7WUFDekUsSUFBSSxTQUFTLEVBQUU7Z0JBQ2IsT0FBTzthQUNSO1lBRUQsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFLElBQUksS0FBSSxDQUFDLGVBQWUsRUFBRTtnQkFDOUMsS0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO2FBQ1g7aUJBQU07Z0JBQ0wsS0FBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO2FBQ1o7UUFDSCxDQUFDLENBQUM7UUFFRixpQ0FBaUM7UUFDakMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsVUFBQyxDQUFDO1lBQzNDLEtBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1lBQzVCLFNBQVMsR0FBRyxLQUFLLENBQUM7WUFDbEIsb0JBQW9CLEVBQUUsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFVBQUMsQ0FBQztZQUM3QyxLQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztZQUM3QixvQkFBb0IsRUFBRSxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsVUFBQyxDQUFDO1lBQzlDLEtBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO1lBQzdCLG9CQUFvQixFQUFFLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7UUFDSCx1SEFBdUg7UUFDdkgsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztRQUN6RSxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUN2RSxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQzNFLHNEQUFzRDtRQUN0RCxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGdCQUFnQixFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFDN0UsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztRQUV4RSxnR0FBZ0c7UUFDaEcsdUZBQXVGO1FBQ3ZGLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLFVBQUMsS0FBbUI7WUFDaEUsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLDZCQUE2QixFQUFFO2dCQUMzRSxLQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztnQkFDN0IsU0FBUyxHQUFHLElBQUksQ0FBQztnQkFDakIsS0FBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO2FBQ1o7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILElBQU0sZUFBZSxHQUFHO1lBQ3RCLElBQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLHlCQUFXLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFcEYsSUFBSSxjQUFjLEVBQUU7Z0JBQ2xCLEtBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7YUFDdEY7aUJBQU07Z0JBQ0wsS0FBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLFdBQVcsQ0FBQyxLQUFJLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQzthQUN6RjtRQUNILENBQUMsQ0FBQztRQUVGLDRHQUE0RztRQUM1RyxJQUFJLGlCQUFpQixHQUFHLElBQUkseUJBQVcsQ0FBQyw2QkFBNkIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5RSxJQUFJLGtCQUFrQixHQUFHLElBQUkseUJBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFL0UsaUJBQWlCLENBQUMsOEJBQThCLENBQUMsU0FBUyxDQUFDLGNBQU0sT0FBQSxlQUFlLEVBQUUsRUFBakIsQ0FBaUIsQ0FBQyxDQUFDO1FBQ3BGLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsY0FBTSxPQUFBLGVBQWUsRUFBRSxFQUFqQixDQUFpQixDQUFDLENBQUM7UUFFcEUsaUJBQWlCLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxvQkFBb0I7UUFDaEQsa0JBQWtCLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFNUIsSUFBSSxnQkFBZ0IsRUFBRTtZQUNwQixrQ0FBa0M7WUFDbEMsd0dBQXdHO1lBQ3hHLHVDQUF1QztZQUN2QyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztnQkFDckIsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFLElBQUksS0FBSSxDQUFDLGVBQWUsRUFBRTtvQkFDOUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDcEI7cUJBQU07b0JBQ0wsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFFbEIsSUFBSSxTQUFTLElBQUksS0FBSSxDQUFDLE1BQU0sQ0FBQyxnQ0FBZ0MsRUFBRTt3QkFDN0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztxQkFDeEQ7aUJBQ0Y7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsMEJBQTBCO1FBQzFCLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDO1lBQ3pCLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUM7UUFDSCxTQUFTLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQztZQUMzQixTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO1FBRUgsZUFBZTtRQUNmLG9CQUFvQixFQUFFLENBQUM7SUFDekIsQ0FBQztJQTNIdUIscUNBQWdCLEdBQUcsWUFBWSxDQUFDO0lBNEgxRCwyQkFBQztDQTlIRCxBQThIQyxDQTlIeUMsMkJBQVksR0E4SHJEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNoSkQseUNBQXVEO0FBQ3ZELHVFQUFvRTtBQVdwRTs7R0FFRztBQUNIO0lBQTJDLHlDQUFzQztJQUkvRSwrQkFBWSxNQUF3QztRQUF4Qyx1QkFBQSxFQUFBLFdBQXdDO1FBQXBELFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBVWQ7UUFSQyxLQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxtREFBd0IsQ0FBQztZQUN2RCxnQ0FBZ0MsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLGdDQUFnQyxDQUFDO1NBQ25GLENBQUMsQ0FBQztRQUVILEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDckMsUUFBUSxFQUFFLDJCQUEyQjtZQUNyQyxVQUFVLEVBQUUsQ0FBQyxLQUFJLENBQUMsb0JBQW9CLENBQUM7U0FDeEMsRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQ2xCLENBQUM7SUFDSCw0QkFBQztBQUFELENBaEJBLEFBZ0JDLENBaEIwQyxxQkFBUyxHQWdCbkQ7QUFoQlksc0RBQXFCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNmbEMseUNBQXVEO0FBQ3ZELHlDQUF1RDtBQUN2RCw4QkFBMkI7QUFFM0IsOENBQTJDO0FBQzNDLHVEQUFvRDtBQUlwRDs7R0FFRztBQUNIO0lBQTJDLHlDQUEwQjtJQUluRSwrQkFBWSxNQUE0QjtRQUE1Qix1QkFBQSxFQUFBLFdBQTRCO1FBQXhDLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBU2Q7UUFQQyxLQUFJLENBQUMsWUFBWSxHQUFHLElBQUksbUNBQWdCLEVBQUUsQ0FBQztRQUUzQyxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFFBQVEsRUFBRSwyQkFBMkI7WUFDckMsTUFBTSxFQUFFLElBQUk7WUFDWixVQUFVLEVBQUUsQ0FBQyxLQUFJLENBQUMsWUFBWSxDQUFDO1NBQ2hDLEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztJQUNsQixDQUFDO0lBRUQseUNBQVMsR0FBVCxVQUFVLE1BQWlCLEVBQUUsU0FBNEI7UUFBekQsaUJBaURDO1FBaERDLGlCQUFNLFNBQVMsWUFBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFbkMsSUFBSSxvQkFBb0IsR0FBRztZQUN6QixLQUFzQixVQUE0QixFQUE1QixLQUFBLEtBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBNUIsY0FBNEIsRUFBNUIsSUFBNEIsRUFBRTtnQkFBL0MsSUFBSSxTQUFTLFNBQUE7Z0JBQ2hCLElBQUksU0FBUyxZQUFZLGtCQUFrQixFQUFFO29CQUMzQyxLQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2lCQUNqQzthQUNGO1lBQ0QsS0FBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDeEIsS0FBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLFdBQVcsQ0FBQyxLQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztRQUN0RSxDQUFDLENBQUM7UUFFRixJQUFJLG9CQUFvQixHQUFHO1lBQ3pCLG9CQUFvQixFQUFFLENBQUM7WUFFdkIsSUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLGVBQWUsQ0FBQztZQUU5RCxJQUFJLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUM5QixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7Z0JBQ2QsS0FBaUIsVUFBZSxFQUFmLG1DQUFlLEVBQWYsNkJBQWUsRUFBZixJQUFlLEVBQUU7b0JBQTdCLElBQUksSUFBSSx3QkFBQTtvQkFDWCxLQUFJLENBQUMsWUFBWSxDQUFDLElBQUksa0JBQWtCLENBQUM7d0JBQ3ZDLFVBQVUsRUFBRSxJQUFJO3dCQUNoQixVQUFVLEVBQUUsQ0FBQyxzQkFBc0IsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7cUJBQ2pELENBQUMsQ0FBQyxDQUFDO2lCQUNMO2dCQUNELEtBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsZ0NBQWdDO2dCQUV6RCxLQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO2FBQ2xFO1FBQ0gsQ0FBQyxDQUFDO1FBRUYsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDdkUsa0VBQWtFO1FBQ2xFLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFO1lBQ25ELG9CQUFvQixFQUFFLENBQUM7WUFDdkIsS0FBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUM7UUFDSCxxREFBcUQ7UUFDckQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRTtZQUNyRCxLQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztRQUNILDREQUE0RDtRQUM1RCxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRTtZQUN6QyxLQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztRQUVILGtCQUFrQjtRQUNsQixvQkFBb0IsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFDSCw0QkFBQztBQUFELENBbEVBLEFBa0VDLENBbEUwQyxxQkFBUyxHQWtFbkQ7QUFsRVksc0RBQXFCO0FBMkVsQzs7R0FFRztBQUNIO0lBQWlDLHNDQUFtQztJQUVsRSw0QkFBWSxNQUFnQztRQUE1QyxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQU1kO1FBSkMsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxRQUFRLEVBQUUsd0JBQXdCO1lBQ2xDLFVBQVUsRUFBRSxJQUFJLEVBQUUsc0NBQXNDO1NBQ3pELEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztJQUNsQixDQUFDO0lBRVMseUNBQVksR0FBdEI7UUFDRSxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUVwQyxJQUFJLFdBQVcsR0FBRyxJQUFJLFNBQUcsQ0FBQyxHQUFHLEVBQUU7WUFDN0IsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNwQixPQUFPLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUM3QixNQUFNLEVBQUUsTUFBTSxDQUFDLEdBQUc7U0FDbkIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLGtCQUFrQixFQUFFLGNBQU8sTUFBTSxDQUFDLFNBQVMsTUFBRyxFQUFFLENBQUMsQ0FBQztRQUUzRCxJQUFJLFNBQVMsR0FBRyxJQUFJLFNBQUcsQ0FBQyxLQUFLLEVBQUU7WUFDN0IsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO1NBQ3RDLENBQUMsQ0FBQztRQUNILFdBQVcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFOUIsSUFBSSxZQUFZLEdBQUcsSUFBSSxTQUFHLENBQUMsTUFBTSxFQUFFO1lBQ2pDLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztTQUNqQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksU0FBRyxDQUFDLE1BQU0sRUFBRTtZQUN4QixPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUM7U0FDdEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN2QixXQUFXLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRWpDLElBQUksV0FBVyxHQUFHLElBQUksU0FBRyxDQUFDLE1BQU0sRUFBRTtZQUNoQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7U0FDcEMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLFNBQUcsQ0FBQyxNQUFNLEVBQUU7WUFDeEIsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDO1NBQ3pDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMseUJBQVcsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVFLFdBQVcsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFaEMsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUNILHlCQUFDO0FBQUQsQ0F6Q0EsQUF5Q0MsQ0F6Q2dDLHFCQUFTLEdBeUN6Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbklELG1DQUFnRDtBQUdoRCw2Q0FBNEM7QUFDNUMsOENBQTZDO0FBRzdDOztHQUVHO0FBQ0g7SUFBa0MsZ0NBQW9CO0lBRXBELHNCQUFZLE1BQXlCO1FBQXpCLHVCQUFBLEVBQUEsV0FBeUI7UUFBckMsWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FNZDtRQUpDLEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDckMsUUFBUSxFQUFFLGlCQUFpQjtZQUMzQixJQUFJLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7U0FDbEMsRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQ2xCLENBQUM7SUFFRCxnQ0FBUyxHQUFULFVBQVUsTUFBaUIsRUFBRSxTQUE0QjtRQUF6RCxpQkF5QkM7UUF4QkMsaUJBQU0sU0FBUyxZQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVuQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNuQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDYjtRQUVELElBQU0sa0JBQWtCLEdBQUcsSUFBSSx5QkFBVyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNqRixrQkFBa0IsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFVBQUMsTUFBTSxFQUFFLElBQWlDO1lBQ25GLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDYixLQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDYjtpQkFBTTtnQkFDTCxLQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDYjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7WUFDckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRTtnQkFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDZiwwREFBMEQ7YUFDM0Q7aUJBQU07Z0JBQ0wsOEZBQThGO2dCQUM5RixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ25CO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0gsbUJBQUM7QUFBRCxDQXJDQSxBQXFDQyxDQXJDaUMsZUFBTSxHQXFDdkM7QUFyQ1ksb0NBQVk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1Z6QiwwREFBa0g7QUFDbEgseUNBQXlEO0FBQ3pELDhCQUE2QjtBQUM3QixzREFBb0U7QUFHcEUsc0NBQXFDO0FBQ3JDLDhDQUE2QztBQUs3Qyw4Q0FBNkM7QUFDN0MseURBQXFFO0FBQ3JFLDZDQUE0QztBQUM1QyxnREFBK0M7QUFDL0MsbUVBQWtFO0FBQ2xFLDJEQUF5RDtBQXdEekQ7Ozs7Ozs7O0dBUUc7QUFDSDtJQUE2QiwyQkFBd0I7SUFzRG5ELGlCQUFZLE1BQTBCO1FBQTFCLHVCQUFBLEVBQUEsV0FBMEI7UUFBdEMsWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FtQmQ7UUEvQ0Q7Ozs7V0FJRztRQUNLLGdDQUEwQixHQUFHLENBQUMsQ0FBQztRQUsvQixtQkFBYSxHQUFHLEtBQUssQ0FBQztRQUV0QixtQkFBYSxHQUFHO1lBQ3RCOztlQUVHO1lBQ0gsTUFBTSxFQUFFLElBQUksaUNBQWUsRUFBbUI7WUFDOUM7O2VBRUc7WUFDSCxhQUFhLEVBQUUsSUFBSSxpQ0FBZSxFQUFpQztZQUNuRTs7ZUFFRztZQUNILFFBQVEsRUFBRSxJQUFJLGlDQUFlLEVBQW1CO1NBQ2pELENBQUM7UUFxVk0sd0JBQWtCLEdBQUcsVUFBQyxNQUFlLEVBQUUsSUFBMEI7WUFDdkUsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNsQixLQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUMxQjtRQUNILENBQUMsQ0FBQztRQUVNLDJCQUFxQixHQUFHLFVBQUMsVUFBa0I7WUFDakQsSUFBSSxNQUFjLENBQUM7WUFDbkIsSUFBSSxLQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFO2dCQUN4QixJQUFNLFlBQVksR0FBRyxLQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO2dCQUNuRCxNQUFNLEdBQUcsWUFBWSxHQUFHLENBQUMsWUFBWSxHQUFHLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDN0Q7aUJBQU07Z0JBQ0wsSUFBTSxrQkFBa0IsR0FBRyx5QkFBVyxDQUFDLHFCQUFxQixDQUFDLEtBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQzdFLElBQU0sa0JBQWtCLEdBQUcsS0FBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsQ0FBQztnQkFDMUUsTUFBTSxHQUFHLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDO2FBQ2xEO1lBRUQsT0FBTyxNQUFNLENBQUM7UUFDaEIsQ0FBQyxDQUFBO1FBRU8sVUFBSSxHQUFHLFVBQUMsVUFBa0I7WUFDaEMsSUFBTSxzQkFBc0IsR0FBRyxLQUFJLENBQUMscUJBQXFCLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDdEUsSUFBSSxLQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFO2dCQUN4QixLQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsRUFBRSxJQUFJLENBQUMsQ0FBQzthQUNyRDtpQkFBTTtnQkFDTCxLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxJQUFJLENBQUMsQ0FBQzthQUNoRDtRQUNILENBQUMsQ0FBQztRQTNXQSxJQUFNLGlCQUFpQixHQUFHLEtBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLElBQUk7WUFDekQsU0FBUyxFQUFFLENBQUM7WUFDWixNQUFNLEVBQUUsQ0FBQztTQUNWLENBQUM7UUFFRixLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFFBQVEsRUFBRSxZQUFZO1lBQ3RCLFFBQVEsRUFBRSxLQUFLO1lBQ2Ysc0NBQXNDLEVBQUUsRUFBRTtZQUMxQyxpQkFBaUIsbUJBQUE7WUFDakIsU0FBUyxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDO1lBQ3ZDLFFBQVEsRUFBRSxDQUFDO1lBQ1gsYUFBYSxFQUFFLENBQUM7WUFDaEIsaUJBQWlCLEVBQUUsSUFBSTtTQUN4QixFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVoQixLQUFJLENBQUMsS0FBSyxHQUFHLEtBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDOztJQUNqQyxDQUFDO0lBRUQsNEJBQVUsR0FBVjtRQUNFLGlCQUFNLFVBQVUsV0FBRSxDQUFDO1FBRW5CLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ25CLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUM5QjtJQUNILENBQUM7SUFFUyxxQ0FBbUIsR0FBN0IsVUFBOEIsR0FBVyxFQUFFLEdBQVc7UUFDcEQsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVPLHFDQUFtQixHQUEzQjtRQUNFLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSywrQkFBVyxDQUFDLElBQUksRUFBRTtZQUN6QyxJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN4RSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxjQUFjLENBQUMsQ0FBQztZQUMzRCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFVBQUcsV0FBSSxDQUFDLG1CQUFtQixDQUFDLFdBQUksQ0FBQyxZQUFZLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxjQUFJLFdBQUksQ0FBQyxtQkFBbUIsQ0FBQyxXQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxDQUFDLGVBQUssY0FBYyxDQUFFLENBQUMsQ0FBQztTQUN2TTthQUFNLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSywrQkFBVyxDQUFDLEdBQUcsRUFBRTtZQUMvQyxJQUFNLGFBQWEsR0FBRyxVQUFHLHlCQUFXLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUMsY0FBSSxXQUFJLENBQUMsbUJBQW1CLENBQUMsV0FBSSxDQUFDLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLGNBQUkseUJBQVcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFFLENBQUM7WUFDbE4sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUNoRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLGFBQWEsQ0FBQyxDQUFDO1NBQzVEO0lBQ0gsQ0FBQztJQUVPLCtDQUE2QixHQUFyQztRQUNFLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUN4QixPQUFPLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztTQUNqRjtRQUVELE9BQU8sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7SUFDekUsQ0FBQztJQUVPLG1DQUFpQixHQUF6QixVQUEwQiwwQkFBa0M7UUFFMUQsSUFBSSwyQkFBbUMsQ0FBQztRQUN4QyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDeEIsMkNBQTJDO1lBQzNDLDJCQUEyQixHQUFHLEdBQUcsQ0FBQztTQUNuQzthQUFNO1lBQ0wsMkJBQTJCLEdBQUcsMEJBQTBCLEdBQUcsSUFBQSxzQ0FBaUIsRUFBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDM0Y7UUFFRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsMkJBQVMsR0FBVCxVQUFVLE1BQWlCLEVBQUUsU0FBNEIsRUFBRSxhQUE2QjtRQUF4RixpQkFvUUM7UUFwUTBELDhCQUFBLEVBQUEsb0JBQTZCO1FBQ3RGLGlCQUFNLFNBQVMsWUFBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFbkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFFckIsa0ZBQWtGO1FBQ2xGLDBFQUEwRTtRQUMxRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFNUMsc0NBQXNDO1FBQ3RDLElBQU0saUJBQWlCLEdBQUcsSUFBSSxxQ0FBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUUvSCxpQkFBaUIsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUUsY0FBTSxPQUFBLEtBQUksQ0FBQyxXQUFXLEVBQWhCLENBQWdCLENBQUMsQ0FBQztRQUVuRix5R0FBeUc7UUFDekcsNkdBQTZHO1FBQzdHLHVHQUF1RztRQUN2RywwRUFBMEU7UUFDMUUsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNsQixJQUFJLENBQUMsV0FBVyxHQUFHLCtCQUFXLENBQUMsTUFBTSxDQUFDO1lBRXRDLE9BQU87U0FDUjtRQUVELFNBQVMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDO1lBQ2pDLEtBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO1FBRUgsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUM7WUFDakMsS0FBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLElBQUksZUFBZSxHQUFHLEtBQUssQ0FBQztRQUM1QixJQUFJLFVBQStDLENBQUM7UUFFcEQsdUNBQXVDO1FBQ3ZDLElBQUksdUJBQXVCLEdBQUcsVUFBQyxLQUE2QixFQUFFLFdBQTRCO1lBQTNELHNCQUFBLEVBQUEsWUFBNkI7WUFBRSw0QkFBQSxFQUFBLG1CQUE0QjtZQUN4RixJQUFJLEtBQUksQ0FBQyxhQUFhLEVBQUU7Z0JBQ3RCLDJEQUEyRDtnQkFDM0QsT0FBTzthQUNSO1lBRUQsSUFBSSwwQkFBMEIsR0FBRyxLQUFJLENBQUMsNkJBQTZCLEVBQUUsQ0FBQztZQUV0RSxLQUFJLENBQUMsaUJBQWlCLENBQUMsMEJBQTBCLENBQUMsQ0FBQztZQUVuRCw2SEFBNkg7WUFDN0gsK0hBQStIO1lBQy9ILHVIQUF1SDtZQUN2SCxrRkFBa0Y7WUFDbEYsSUFBSSxTQUFTLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsc0JBQXNCLElBQUksMEJBQTBCLEtBQUssS0FBSSxDQUFDLDBCQUEwQixFQUFFO2dCQUM1SiwwQkFBMEIsR0FBRyxLQUFJLENBQUMsMEJBQTBCLENBQUM7YUFDOUQ7WUFFRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRTtnQkFDbkIsSUFBSSxNQUFNLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxFQUFFO29CQUNsQyxpRUFBaUU7b0JBQ2pFLEtBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDL0I7cUJBQU07b0JBQ0wsSUFBSSxDQUFDLEtBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRTt3QkFDckIsS0FBSSxDQUFDLG1CQUFtQixDQUFDLDBCQUEwQixDQUFDLENBQUM7cUJBQ3REO29CQUVELEtBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7aUJBQ3BFO2FBQ0Y7aUJBQU07Z0JBQ0wsd0dBQXdHO2dCQUN4Ryx5RUFBeUU7Z0JBQ3pFLElBQU0sdUJBQXVCLEdBQUcsS0FBSSxDQUFDLE1BQU0sQ0FBQyxzQ0FBc0MsS0FBSyxPQUFPLENBQUMsd0NBQXdDO3VCQUNoSSxXQUFXLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUN4QyxJQUFNLHlCQUF5QixHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsS0FBSyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7Z0JBRTNFLElBQUksQ0FBQyx1QkFBdUIsSUFBSSx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLFNBQVMsRUFBRSxFQUFFO29CQUMvRSxLQUFJLENBQUMsbUJBQW1CLENBQUMsMEJBQTBCLENBQUMsQ0FBQztpQkFDdEQ7Z0JBRUQsS0FBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQzthQUNoRTtZQUVELElBQUksS0FBSSxDQUFDLFNBQVMsRUFBRTtnQkFDbEIsS0FBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7YUFDNUI7UUFDSCxDQUFDLENBQUM7UUFFRixtQ0FBbUM7UUFDbkMsa0RBQWtEO1FBQ2xELE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLHVCQUF1QixDQUFDLENBQUM7UUFDckUsMkNBQTJDO1FBQzNDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLHVCQUF1QixDQUFDLENBQUM7UUFDM0UsZ0RBQWdEO1FBQ2hELE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLHVCQUF1QixDQUFDLENBQUM7UUFDMUUseURBQXlEO1FBQ3pELE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLHVCQUF1QixDQUFDLENBQUM7UUFDM0Usd0RBQXdEO1FBQ3hELE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsc0JBQXNCLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztRQUV0RixJQUFJLENBQUMsbUNBQW1DLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO1FBRXJGLGdCQUFnQjtRQUNoQixJQUFJLFlBQVksR0FBRztZQUNqQixlQUFlLEdBQUcsSUFBSSxDQUFDO1lBQ3ZCLEtBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdEIsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUNwQixDQUFDLENBQUM7UUFFRixJQUFJLGNBQWMsR0FBRyxVQUFDLEtBQTZCLEVBQUUsV0FBNEI7WUFBM0Qsc0JBQUEsRUFBQSxZQUE2QjtZQUFFLDRCQUFBLEVBQUEsbUJBQTRCO1lBQy9FLGVBQWUsR0FBRyxLQUFLLENBQUM7WUFDeEIsS0FBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUV2QixvREFBb0Q7WUFDcEQsdUJBQXVCLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQztRQUVGLElBQUksbUJBQW1CLEdBQUc7WUFDeEIsdUVBQXVFO1lBQ3ZFLElBQUksU0FBUyxFQUFFO2dCQUNiLG1EQUFtRDtnQkFDbkQsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUN4QjtRQUNILENBQUMsQ0FBQztRQUVGLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ3pELE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQzdELE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQzlELE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBRWxFLElBQUksMkJBQTJCLEdBQUcsVUFBQyxNQUFpQjtZQUNsRCxPQUFPLENBQUMsQ0FBRSxNQUE0QixDQUFDLGFBQWEsQ0FBQztRQUN2RCxDQUFDLENBQUM7UUFFRixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFDLE1BQU07WUFDM0Isc0VBQXNFO1lBQ3RFLEtBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1lBQzFCLG9DQUFvQztZQUNwQyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUVsQyxJQUFJLDJCQUEyQixDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQzFGLFVBQVUsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxnREFBNkIsQ0FBQyxlQUFlLENBQUMsQ0FBQzthQUNsRztZQUVELHlEQUF5RDtZQUN6RCxJQUFJLENBQUMsZUFBZSxFQUFFO2dCQUNwQixTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO2dCQUUvQiwrQkFBK0I7Z0JBQy9CLElBQUksU0FBUyxFQUFFO29CQUNiLDBGQUEwRjtvQkFDMUYsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztpQkFDekI7YUFDRjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsVUFBQyxNQUFlLEVBQUUsSUFBMEI7WUFDdkUsb0NBQW9DO1lBQ3BDLFNBQVMsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMvQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUM3QixDQUFDLENBQUMsQ0FBQztRQUVILHVEQUF1RDtRQUN2RCxJQUFJLE9BQU8sU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLGlCQUFpQixLQUFLLFNBQVMsRUFBRTtZQUNoRSxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixHQUFHLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztTQUN6RTtRQUVELDhCQUE4QjtRQUM5QixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUU7WUFDakMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDdkU7UUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxVQUFDLE1BQU0sRUFBRSxVQUFVO1lBQ3pDLEtBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1lBRTNCLGNBQWM7WUFDZCxLQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRXRCLHFDQUFxQztZQUNyQyxTQUFTLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUVwQyx1RUFBdUU7WUFDdkUsbUJBQW1CLEVBQUUsQ0FBQztZQUV0QixJQUFJLDJCQUEyQixDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLElBQUksVUFBVSxFQUFFO2dCQUN6RixJQUFNLG9CQUFvQixHQUFHLEtBQUksQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDcEUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLEVBQUUsb0JBQW9CLHNCQUFBLEVBQUUsQ0FBQyxDQUFDO2dCQUN6RSxVQUFVLEdBQUcsU0FBUyxDQUFDO2FBQ3hCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNuQiw2REFBNkQ7WUFDN0QsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDOUM7UUFFRCxrREFBa0Q7UUFDbEQsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksWUFBWSxHQUFHLEtBQUssQ0FBQztRQUN6QixJQUFJLGdCQUFnQixHQUFHLFVBQUMsTUFBZSxFQUFFLFlBQXFCO1lBQzVELElBQUksTUFBTSxJQUFJLENBQUMsWUFBWSxFQUFFO2dCQUMzQixLQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDYjtpQkFBTTtnQkFDTCxLQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDYjtZQUNELHVCQUF1QixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNwQyxLQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUNqQyxDQUFDLENBQUM7UUFDRixJQUFJLGtCQUFrQixHQUFHLElBQUkseUJBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDL0Usa0JBQWtCLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxVQUFDLE1BQU0sRUFBRSxJQUFpQztZQUNuRixNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNuQixJQUFJLE1BQU0sSUFBSSxLQUFJLENBQUMsNkJBQTZCLElBQUksSUFBSSxFQUFFO2dCQUN4RCxLQUFJLENBQUMsNkJBQTZCLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQzNDLEtBQUksQ0FBQyxXQUFXLEdBQUcsK0JBQVcsQ0FBQyxJQUFJLENBQUM7YUFDckM7aUJBQU07Z0JBQ0wsS0FBSSxDQUFDLFdBQVcsR0FBRywrQkFBVyxDQUFDLEdBQUcsQ0FBQzthQUNwQztZQUNELGdCQUFnQixDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksaUJBQWlCLEdBQUcsSUFBSSx5QkFBVyxDQUFDLDZCQUE2QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlFLGlCQUFpQixDQUFDLDhCQUE4QixDQUFDLFNBQVMsQ0FBQyxVQUFDLE1BQU0sRUFBRSxJQUFzQztZQUN4RyxZQUFZLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDO1lBQ3ZDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQztRQUNILG9CQUFvQjtRQUNwQixrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM1QixpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUUzQiw4R0FBOEc7UUFDOUcsK0ZBQStGO1FBQy9GLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFO1lBQ2xELEtBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsb0hBQW9IO1FBQ3BILGtIQUFrSDtRQUNsSCxTQUFTLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQztZQUMvQixLQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztRQUNILGlEQUFpRDtRQUNqRCxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRTtZQUNqRCxLQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztRQUNILGtGQUFrRjtRQUNsRixTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7WUFDL0MsdUJBQXVCLEVBQUUsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztRQUVILHVEQUF1RDtRQUN2RCxJQUFJLE9BQU8sU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLG9CQUFvQixLQUFLLFFBQVEsRUFBRTtZQUNsRSxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsb0JBQW9CLENBQUM7U0FDeEU7UUFFRCxxQkFBcUI7UUFDckIsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDLDRCQUE0QjtRQUN2RCxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsc0NBQXNDLEtBQUssT0FBTyxDQUFDLHdDQUF3QyxFQUFFO1lBQzNHLElBQUksQ0FBQyxzQ0FBc0MsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDaEU7UUFFRCxxQkFBcUI7UUFDckIsSUFBSSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRU8sMkNBQXlCLEdBQWpDLFVBQWtDLE1BQWlCLEVBQUUsU0FBNEI7UUFBakYsaUJBT0M7UUFOQyxJQUFNLG9CQUFvQixHQUFHO1lBQzNCLFNBQVMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVM7WUFDaEMsYUFBYSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYTtTQUN6QyxDQUFDO1FBQ0YsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksK0NBQXNCLENBQUMsb0JBQW9CLEVBQUUsY0FBTSxPQUFBLEtBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQXBCLENBQW9CLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFDekksSUFBSSxDQUFDLHNCQUFzQixDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQStCRDs7O09BR0c7SUFDSyxxREFBbUMsR0FBM0MsVUFDRSxNQUFpQixFQUNqQixTQUE0QixFQUM1Qix1QkFBbUM7UUFIckMsaUJBaUJDO1FBWkMscUVBQXFFO1FBQ3JFLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLGlCQUFPLENBQUMsSUFBSSxFQUFFLHVCQUF1QixFQUFFLElBQUksQ0FBQyxDQUFDO1FBRS9FLG1FQUFtRTtRQUNuRSxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUMzQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxNQUFNLENBQUMsZUFBZSxFQUFFLEdBQUcsQ0FBQyxFQUFFO2dCQUNuRCxLQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDckM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILHFGQUFxRjtRQUNyRixNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxjQUFNLE9BQUEsS0FBSSxDQUFDLHNCQUFzQixDQUFDLEtBQUssRUFBRSxFQUFuQyxDQUFtQyxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQUVPLHdEQUFzQyxHQUE5QyxVQUErQyxNQUFpQixFQUFFLFNBQTRCO1FBQTlGLGlCQThFQztRQTdFQzs7Ozs7OztXQU9HO1FBQ0gsSUFBSSxrQkFBa0IsR0FBRyxDQUFDLENBQUM7UUFDM0IsSUFBSSxpQkFBaUIsR0FBRyxDQUFDLENBQUM7UUFDMUIsSUFBSSxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7UUFDMUIsSUFBSSwwQkFBMEIsR0FBRyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFFekQsSUFBSSxDQUFDLDZCQUE2QixHQUFHLElBQUksaUJBQU8sQ0FBQyxnQkFBZ0IsRUFBRTtZQUNqRSxJQUFJLEtBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQkFDcEIsT0FBTzthQUNSO1lBRUQsa0JBQWtCLElBQUksMEJBQTBCLENBQUM7WUFFakQsSUFBSTtnQkFDRixpQkFBaUIsR0FBRyxLQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQzthQUNuRDtZQUFDLE9BQU8sS0FBSyxFQUFFO2dCQUNkLGtFQUFrRTtnQkFDbEUsSUFBSSxLQUFLLFlBQVksTUFBTSxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsRUFBRTtvQkFDOUQsS0FBSSxDQUFDLDZCQUE2QixDQUFDLEtBQUssRUFBRSxDQUFDO2lCQUM1QztnQkFFRCxtRUFBbUU7Z0JBQ25FLE9BQU87YUFDUjtZQUVELHdDQUF3QztZQUN4QyxJQUFJLGdCQUFnQixHQUFHLGtCQUFrQixHQUFHLGlCQUFpQixDQUFDO1lBQzlELHVFQUF1RTtZQUN2RSw2REFBNkQ7WUFDN0QsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNsQyxrQkFBa0IsR0FBRyxpQkFBaUIsQ0FBQzthQUN4QztZQUNELHNFQUFzRTtZQUN0RSx1RUFBdUU7aUJBQ2xFLElBQUksZ0JBQWdCLElBQUksQ0FBQywwQkFBMEIsRUFBRTtnQkFDeEQsa0JBQWtCLElBQUksMEJBQTBCLENBQUM7YUFDbEQ7WUFDRCxzRUFBc0U7WUFDdEUsK0RBQStEO2lCQUMxRCxJQUFJLGdCQUFnQixJQUFJLDBCQUEwQixFQUFFO2dCQUN2RCxrQkFBa0IsSUFBSSwwQkFBMEIsQ0FBQzthQUNsRDtZQUVELElBQUksMEJBQTBCLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxXQUFXLEVBQUUsR0FBRyxrQkFBa0IsQ0FBQztZQUNqRixLQUFJLENBQUMsbUJBQW1CLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUN2RCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFVCxJQUFJLGtDQUFrQyxHQUFHO1lBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUU7Z0JBQ3BCLGtCQUFrQixHQUFHLEtBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO2dCQUNuRCxLQUFJLENBQUMsNkJBQTZCLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDNUM7UUFDSCxDQUFDLENBQUM7UUFFRixJQUFJLGlDQUFpQyxHQUFHO1lBQ3RDLEtBQUksQ0FBQyw2QkFBNkIsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM3QyxDQUFDLENBQUM7UUFFRixNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxrQ0FBa0MsQ0FBQyxDQUFDO1FBQy9FLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLGtDQUFrQyxDQUFDLENBQUM7UUFDbEYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsaUNBQWlDLENBQUMsQ0FBQztRQUNoRixNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGdCQUFnQixFQUFFLGlDQUFpQyxDQUFDLENBQUM7UUFDMUYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDM0Msa0JBQWtCLEdBQUcsS0FBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7UUFDckQsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxpQ0FBaUMsQ0FBQyxDQUFDO1FBRXhGLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQ3RCLGtDQUFrQyxFQUFFLENBQUM7U0FDdEM7SUFDSCxDQUFDO0lBRU8sd0NBQXNCLEdBQTlCO1FBQ0UsT0FBTyx5QkFBVyxDQUFDLHFDQUFxQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQseUJBQU8sR0FBUDtRQUNFLGlCQUFNLE9BQU8sV0FBRSxDQUFDO1FBRWhCLElBQUksSUFBSSxDQUFDLDZCQUE2QixFQUFFLEVBQUUsb0VBQW9FO1lBQzVHLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUM1QztRQUVELElBQUksSUFBSSxDQUFDLHNCQUFzQixFQUFFO1lBQy9CLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNyQztRQUVELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRTtZQUNqQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztTQUN6RDtJQUNILENBQUM7SUFFUyw4QkFBWSxHQUF0QjtRQUFBLGlCQXVKQztRQXRKQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN6QztRQUVELElBQUksZ0JBQWdCLEdBQUcsSUFBSSxTQUFHLENBQUMsS0FBSyxFQUFFO1lBQ3BDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDcEIsT0FBTyxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDN0IsTUFBTSxFQUFFLFFBQVE7WUFDaEIsWUFBWSxFQUFFLFdBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztZQUM3RCxVQUFVLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFO1NBQzVDLENBQUMsQ0FBQztRQUVILElBQUksT0FBTyxHQUFHLElBQUksU0FBRyxDQUFDLEtBQUssRUFBRTtZQUMzQixPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7U0FDbkMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFFdkIsNkNBQTZDO1FBQzdDLElBQUksa0JBQWtCLEdBQUcsSUFBSSxTQUFHLENBQUMsS0FBSyxFQUFFO1lBQ3RDLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDO1NBQy9DLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxxQkFBcUIsR0FBRyxrQkFBa0IsQ0FBQztRQUVoRCxxREFBcUQ7UUFDckQsSUFBSSx1QkFBdUIsR0FBRyxJQUFJLFNBQUcsQ0FBQyxLQUFLLEVBQUU7WUFDM0MsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsMEJBQTBCLENBQUM7U0FDcEQsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLHVCQUF1QixHQUFHLHVCQUF1QixDQUFDO1FBRXZELGdFQUFnRTtRQUNoRSxJQUFJLDZCQUE2QixHQUFHLElBQUksU0FBRyxDQUFDLEtBQUssRUFBRTtZQUNqRCxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxpQ0FBaUMsQ0FBQztTQUMzRCxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsNkJBQTZCLEdBQUcsNkJBQTZCLENBQUM7UUFFbkUsOENBQThDO1FBQzlDLElBQUksbUJBQW1CLEdBQUcsSUFBSSxTQUFHLENBQUMsS0FBSyxFQUFFO1lBQ3ZDLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDO1NBQ2hELENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxtQkFBbUIsR0FBRyxtQkFBbUIsQ0FBQztRQUUvQyx3Q0FBd0M7UUFDeEMsSUFBSSxlQUFlLEdBQUcsSUFBSSxTQUFHLENBQUMsS0FBSyxFQUFFO1lBQ25DLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDO1NBQzVDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO1FBRXZDLElBQUksOEJBQThCLEdBQUcsSUFBSSxTQUFHLENBQUMsS0FBSyxFQUFFO1lBQ2xELE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDO1NBQzNDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyx1QkFBdUIsR0FBRyw4QkFBOEIsQ0FBQztRQUU5RCxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxtQkFBbUIsRUFDdkYsSUFBSSxDQUFDLHVCQUF1QixFQUFFLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxJQUFJLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUVsRyxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFFcEIsOERBQThEO1FBQzlELElBQUkscUJBQXFCLEdBQUcsVUFBQyxDQUEwQjtZQUNyRCxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDbkIsa0NBQWtDO1lBQ2xDLElBQUksS0FBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksSUFBSSxFQUFFO2dCQUMxQixDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7YUFDckI7WUFFRCxJQUFJLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxLQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9DLEtBQUksQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUN2QyxLQUFJLENBQUMsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUMzQyxLQUFJLENBQUMsa0JBQWtCLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbEQsQ0FBQyxDQUFDO1FBRUYsSUFBSSxtQkFBbUIsR0FBRyxVQUFDLENBQTBCO1lBQ25ELENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUVuQiw4Q0FBOEM7WUFDOUMsSUFBSSxTQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLHFCQUFxQixDQUFDLENBQUM7WUFDcEUsSUFBSSxTQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLG1CQUFtQixDQUFDLENBQUM7WUFFL0QsSUFBSSxnQkFBZ0IsR0FBRyxHQUFHLEdBQUcsS0FBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQyxJQUFJLGNBQWMsR0FBRyxLQUFJLENBQUMsc0JBQXNCLElBQUksS0FBSSxDQUFDLHNCQUFzQixDQUFDLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFFdEgsS0FBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN2QixPQUFPLEdBQUcsS0FBSyxDQUFDO1lBRWhCLG9CQUFvQjtZQUNwQixLQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNsRixDQUFDLENBQUM7UUFFRiw4RUFBOEU7UUFDOUUsOEZBQThGO1FBQzlGLDZHQUE2RztRQUM3RyxxR0FBcUc7UUFDckcsb0dBQW9HO1FBQ3BHLE9BQU8sQ0FBQyxFQUFFLENBQUMsc0JBQXNCLEVBQUUsVUFBQyxDQUEwQjtZQUM1RCxJQUFJLFlBQVksR0FBRywyQkFBWSxDQUFDLGdCQUFnQixJQUFJLEtBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFekUsNkZBQTZGO1lBQzdGLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUNuQixrQ0FBa0M7WUFDbEMsSUFBSSxLQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxJQUFJLEVBQUU7Z0JBQzFCLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQzthQUNyQjtZQUVELEtBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxtQ0FBbUM7WUFDMUQsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLHlCQUF5QjtZQUV6QyxvQkFBb0I7WUFDcEIsS0FBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBRW5CLGtFQUFrRTtZQUNsRSxJQUFJLFNBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO1lBQ3RGLElBQUksU0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLG1CQUFtQixDQUFDLENBQUM7UUFDbkYsQ0FBQyxDQUFDLENBQUM7UUFFSCxnRkFBZ0Y7UUFDaEYsT0FBTyxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxVQUFDLENBQTBCO1lBQzNELENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUVuQixJQUFJLE9BQU8sRUFBRTtnQkFDWCxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMxQjtZQUVELElBQUksUUFBUSxHQUFHLEdBQUcsR0FBRyxLQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLEtBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFL0IsS0FBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUV6QyxJQUFJLEtBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxLQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUU7Z0JBQ2pELEtBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUN4QjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsaUVBQWlFO1FBQ2pFLE9BQU8sQ0FBQyxFQUFFLENBQUMscUJBQXFCLEVBQUUsVUFBQyxDQUEwQjtZQUMzRCxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7WUFFbkIsS0FBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUV4QixJQUFJLEtBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRTtnQkFDbkIsS0FBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ3hCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFakMsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2QsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztTQUNyRDtRQUVELE9BQU8sZ0JBQWdCLENBQUM7SUFDMUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSyxxQ0FBbUIsR0FBM0IsVUFBNEIsVUFBa0I7UUFDNUMsSUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUFDakQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNuQyxJQUFJLFFBQVEsR0FBRyxVQUFVLEdBQUcsZUFBZSxDQUFDO1FBQzVDLElBQUksTUFBTSxHQUFHLENBQUMsR0FBRyxPQUFPLEdBQUcsUUFBUSxDQUFDO1FBRXBDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLG1DQUFpQixHQUF6QixVQUEwQixVQUFrQjtRQUMxQyxJQUFJLGVBQWUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQztRQUNoRCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3BDLElBQUksUUFBUSxHQUFHLFVBQVUsR0FBRyxlQUFlLENBQUM7UUFDNUMsSUFBSSxNQUFNLEdBQUcsQ0FBQyxHQUFHLE9BQU8sR0FBRyxRQUFRLENBQUM7UUFFcEMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ssMkJBQVMsR0FBakIsVUFBa0IsQ0FBMEI7UUFDMUMsSUFBSSwyQkFBWSxDQUFDLGdCQUFnQixJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDekQsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtnQkFDeEIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3ZHO2lCQUFNO2dCQUNMLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN6RztTQUNGO2FBQ0ksSUFBSSxDQUFDLFlBQVksVUFBVSxFQUFFO1lBQ2hDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUU7Z0JBQ3hCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN4QztpQkFBTTtnQkFDTCxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDMUM7U0FDRjthQUNJO1lBQ0gsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQzthQUMvQjtZQUNELE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7SUFDSCxDQUFDO0lBRUQ7Ozs7Ozs7OztPQVNHO0lBQ0ssZ0NBQWMsR0FBdEIsVUFBdUIsTUFBYztRQUNuQyxnR0FBZ0c7UUFDaEcsK0NBQStDO1FBQy9DLElBQUksTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNkLE1BQU0sR0FBRyxDQUFDLENBQUM7U0FDWjthQUFNLElBQUksTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNyQixNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQ1o7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gscUNBQW1CLEdBQW5CLFVBQW9CLE9BQWU7UUFDakMsSUFBSSxDQUFDLDBCQUEwQixHQUFHLE9BQU8sQ0FBQztRQUUxQywwQkFBMEI7UUFDMUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFeEQsNkJBQTZCO1FBQzdCLElBQUksU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsNkJBQTZCLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3RJLElBQUksRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQztRQUNyQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO1lBQ3hCLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsNkJBQTZCLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDL0U7UUFFRCxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2hDLGlDQUFpQztZQUNqQyxxREFBcUQ7WUFDckQ7Z0JBQ0UsV0FBVyxFQUFFLGFBQWEsR0FBRyxFQUFFLEdBQUcsS0FBSztnQkFDdkMsZUFBZSxFQUFFLGFBQWEsR0FBRyxFQUFFLEdBQUcsS0FBSztnQkFDM0MsbUJBQW1CLEVBQUUsYUFBYSxHQUFHLEVBQUUsR0FBRyxLQUFLO2FBQ2hELENBQUMsQ0FBQztZQUNIO2dCQUNFLFdBQVcsRUFBRSxhQUFhLEdBQUcsRUFBRSxHQUFHLEtBQUs7Z0JBQ3ZDLGVBQWUsRUFBRSxhQUFhLEdBQUcsRUFBRSxHQUFHLEtBQUs7Z0JBQzNDLG1CQUFtQixFQUFFLGFBQWEsR0FBRyxFQUFFLEdBQUcsS0FBSzthQUNoRCxDQUFDO1FBQ0osSUFBSSxDQUFDLDZCQUE2QixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ08seUNBQXVCLEdBQWpDO1FBQ0UsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRDs7O09BR0c7SUFDSCxtQ0FBaUIsR0FBakIsVUFBa0IsT0FBZTtRQUMvQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsaUNBQWUsR0FBZixVQUFnQixPQUFlO1FBQzdCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssNkJBQVcsR0FBbkIsVUFBb0IsT0FBWSxFQUFFLE9BQWU7UUFDL0MsSUFBSSxLQUFLLEdBQUcsT0FBTyxHQUFHLEdBQUcsQ0FBQztRQUUxQixrSEFBa0g7UUFDbEgsaUhBQWlIO1FBQ2pILDhHQUE4RztRQUM5Ryw0Q0FBNEM7UUFDNUMsaUhBQWlIO1FBQ2pILGdCQUFnQjtRQUNoQixJQUFJLEtBQUssSUFBSSxPQUFPLElBQUksS0FBSyxJQUFJLE9BQU8sRUFBRTtZQUN4QyxLQUFLLEdBQUcsT0FBTyxDQUFDO1NBQ2pCO1FBRUQsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNoQyxpQ0FBaUM7WUFDakMscURBQXFEO1lBQ3JEO2dCQUNFLFdBQVcsRUFBRSxTQUFTLEdBQUcsS0FBSyxHQUFHLEdBQUc7Z0JBQ3BDLGVBQWUsRUFBRSxTQUFTLEdBQUcsS0FBSyxHQUFHLEdBQUc7Z0JBQ3hDLG1CQUFtQixFQUFFLFNBQVMsR0FBRyxLQUFLLEdBQUcsR0FBRzthQUM3QyxDQUFDLENBQUM7WUFDSDtnQkFDRSxXQUFXLEVBQUUsU0FBUyxHQUFHLEtBQUssR0FBRyxHQUFHO2dCQUNwQyxlQUFlLEVBQUUsU0FBUyxHQUFHLEtBQUssR0FBRyxHQUFHO2dCQUN4QyxtQkFBbUIsRUFBRSxTQUFTLEdBQUcsS0FBSyxHQUFHLEdBQUc7YUFDN0MsQ0FBQztRQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsNEJBQVUsR0FBVixVQUFXLE9BQWdCO1FBQ3pCLElBQUksT0FBTyxFQUFFO1lBQ1gsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1NBQ3RFO2FBQU07WUFDTCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7U0FDekU7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsMkJBQVMsR0FBVDtRQUNFLE9BQU8sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFRDs7O09BR0c7SUFDSCwwQkFBUSxHQUFSO1FBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQztJQUM1QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsMEJBQVEsR0FBUjtRQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRVMsNkJBQVcsR0FBckI7UUFDRSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVTLG9DQUFrQixHQUE1QixVQUE2QixVQUFrQixFQUFFLFNBQWtCO1FBQ2pFLElBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxzQkFBc0IsSUFBSSxJQUFJLENBQUMsc0JBQXNCLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFL0csSUFBSSxzQkFBc0IsR0FBRyxVQUFVLENBQUM7UUFFeEMsSUFBSSxhQUFhLEVBQUU7WUFDakIsSUFBSSxhQUFhLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRTtnQkFDOUIsSUFBSSxVQUFVLEdBQUcsYUFBYSxDQUFDLFFBQVEsRUFBRTtvQkFDdkMsNEZBQTRGO29CQUM1Riw2RkFBNkY7b0JBQzdGLHVCQUF1QjtvQkFDdkIsc0JBQXNCLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQztpQkFDakQ7cUJBQU0sSUFBSSxVQUFVLEdBQUcsYUFBYSxDQUFDLFFBQVEsR0FBRyxhQUFhLENBQUMsUUFBUSxFQUFFO29CQUN2RSwyRkFBMkY7b0JBQzNGLHNCQUFzQixHQUFHLGFBQWEsQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQztpQkFDMUU7YUFDRjtpQkFBTTtnQkFDTCx3REFBd0Q7Z0JBQ3hELHNCQUFzQixHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUM7YUFDakQ7U0FDRjtRQUVELElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsR0FBRyxDQUFDO2dCQUM3QixNQUFNLEVBQUUsc0JBQXNCLEdBQUcsR0FBRzthQUNyQyxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUU7WUFDOUMsU0FBUyxFQUFFLFNBQVM7WUFDcEIsUUFBUSxFQUFFLHNCQUFzQjtZQUNoQyxNQUFNLEVBQUUsYUFBYTtTQUN0QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRVMsK0JBQWEsR0FBdkIsVUFBd0IsVUFBa0I7UUFDeEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBTUQsc0JBQUksMkJBQU07UUFKVjs7O1dBR0c7YUFDSDtZQUNFLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDOUMsQ0FBQzs7O09BQUE7SUFRRCxzQkFBSSxrQ0FBYTtRQU5qQjs7Ozs7V0FLRzthQUNIO1lBQ0UsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNyRCxDQUFDOzs7T0FBQTtJQU1ELHNCQUFJLDZCQUFRO1FBSlo7OztXQUdHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hELENBQUM7OztPQUFBO0lBR1MsNkJBQVcsR0FBckI7UUFDRSxpQkFBTSxXQUFXLFdBQUUsQ0FBQztRQUVwQixrSEFBa0g7UUFDbEgsb0hBQW9IO1FBQ3BILHFGQUFxRjtRQUNyRixnSEFBZ0g7UUFDaEgsK0NBQStDO1FBQy9DLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRjs7O1FBR0k7SUFDSCw4QkFBWSxHQUFaLFVBQWEsQ0FBVTtRQUNyQixPQUFPLE1BQU0sQ0FBQyxVQUFVLElBQUksQ0FBQyxZQUFZLFVBQVUsQ0FBQztJQUN0RCxDQUFDO0lBaCtCc0IsZ0RBQXdDLEdBQUcsQ0FBQyxDQUFKLEFBQUssQ0FBQztJQUVyRTs7T0FFRztJQUNxQixxQkFBYSxHQUFHLFNBQUgsQUFBWSxDQUFDO0lBNDlCcEQsY0FBQztDQW4rQkQsQUFtK0JDLENBbitCNEIscUJBQVMsR0FtK0JyQzs7Ozs7O0FDbmpDRCxTQUFnQixpQkFBaUIsQ0FBQyxNQUFpQjtJQUUvQyxJQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7SUFFNUMsSUFBTSxpQkFBaUIsR0FBRyxNQUFNLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztJQUN4RCxJQUFNLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0lBQ3hELDBHQUEwRztJQUMxRywyR0FBMkc7SUFDM0csd0JBQXdCO0lBQ3hCLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQ3ZCLGlCQUFpQixJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQ2hFLGlCQUFpQixJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN0RSx1RUFBdUU7SUFDdkUsSUFBSSxZQUFZLEtBQUssTUFBTSxDQUFDLFNBQVMsRUFBRTtRQUNuQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO0tBQ3BCO0lBRUQsT0FBTyxHQUFHLEdBQUcsY0FBYyxHQUFHLFlBQVksQ0FBQztBQUMvQyxDQUFDO0FBbEJELDhDQWtCQzs7Ozs7O0FDcEJELHNDQUFxQztBQUtyQyxJQUFZLFdBSVg7QUFKRCxXQUFZLFdBQVc7SUFDckIsMkNBQUcsQ0FBQTtJQUNILDZDQUFJLENBQUE7SUFDSixpREFBTSxDQUFBO0FBQ1IsQ0FBQyxFQUpXLFdBQVcsR0FBWCxtQkFBVyxLQUFYLG1CQUFXLFFBSXRCO0FBWUQsSUFBTSxvQkFBb0IsR0FBRyxVQUMzQixLQUFhLEVBQ2IsS0FBWSxFQUNaLEVBQTJCO0lBRTNCLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUU7UUFDckIsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNmO1NBQU0sSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRTtRQUM1QixFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2Y7U0FBTTtRQUNMLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNYO0FBQ0gsQ0FBQyxDQUFDO0FBRUY7SUFLRSwyQkFDRSxpQkFBMEMsRUFDMUMsTUFBaUIsRUFDakIsZ0JBQWtDO1FBRWxDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztRQUMzQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7SUFDM0MsQ0FBQztJQUVTLDRDQUFnQixHQUExQixVQUNFLFlBQW9CLEVBQ3BCLEtBQVksRUFDWixXQUFvQztRQUh0QyxpQkFlQztRQVZDLElBQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFOUMsT0FBTztZQUNMLElBQUksRUFBRSxjQUFNLE9BQUEsb0JBQW9CLENBQUMsWUFBWSxHQUFHLEtBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUF6RixDQUF5RjtZQUNyRyxLQUFLLEVBQUUsY0FBTSxPQUFBLG9CQUFvQixDQUFDLFlBQVksR0FBRyxLQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLENBQUMsRUFBekYsQ0FBeUY7WUFDdEcsRUFBRSxFQUFFLGNBQU0sT0FBQSxvQkFBb0IsQ0FBQyxZQUFZLEdBQUcsS0FBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsV0FBVyxDQUFDLEVBQXRGLENBQXNGO1lBQ2hHLElBQUksRUFBRSxjQUFNLE9BQUEsb0JBQW9CLENBQUMsWUFBWSxHQUFHLEtBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUF0RixDQUFzRjtZQUNsRyxJQUFJLEVBQUUsY0FBTSxPQUFBLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUFuRCxDQUFtRDtZQUMvRCxHQUFHLEVBQUUsY0FBTSxPQUFBLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUFuRCxDQUFtRDtTQUMvRCxDQUFDO0lBQ0osQ0FBQztJQUVTLDJDQUFlLEdBQXpCLFVBQTBCLElBQWlCO1FBQ3pDLElBQUksSUFBSSxLQUFLLFdBQVcsQ0FBQyxJQUFJLEVBQUU7WUFDN0IsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ2pJO2FBQU0sSUFBSSxJQUFJLEtBQUssV0FBVyxDQUFDLEdBQUcsRUFBRTtZQUNuQyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUg7YUFBTSxJQUFJLElBQUksS0FBSyxXQUFXLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLEVBQUU7WUFDdkUsSUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDakUsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1NBQzdIO0lBQ0gsQ0FBQztJQUVNLDhDQUFrQixHQUF6QixVQUEwQixVQUFlLEVBQUUsSUFBdUI7UUFBbEUsaUJBeUNDO1FBeENDLFVBQVUsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLFVBQUMsQ0FBZ0I7WUFDeEMsSUFBTSxRQUFRLEdBQUcsS0FBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQzlDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sRUFBRTtnQkFDakIsS0FBSyxpQkFBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztvQkFDOUIsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNoQixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7b0JBQ25CLE1BQU07aUJBQ1A7Z0JBQ0QsS0FBSyxpQkFBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztvQkFDL0IsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUNqQixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7b0JBQ25CLE1BQU07aUJBQ1A7Z0JBQ0QsS0FBSyxpQkFBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDNUIsUUFBUSxDQUFDLEVBQUUsRUFBRSxDQUFDO29CQUNkLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztvQkFDbkIsTUFBTTtpQkFDUDtnQkFDRCxLQUFLLGlCQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO29CQUM5QixRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2hCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztvQkFDbkIsTUFBTTtpQkFDUDtnQkFDRCxLQUFLLGlCQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUN6QixRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2hCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztvQkFDbkIsTUFBTTtpQkFDUDtnQkFDRCxLQUFLLGlCQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUN4QixRQUFRLENBQUMsR0FBRyxFQUFFLENBQUM7b0JBQ2YsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO29CQUNuQixNQUFNO2lCQUNQO2dCQUNELEtBQUssaUJBQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQzFCLEtBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ25FLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztvQkFDbkIsTUFBTTtpQkFDUDthQUNGO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0gsd0JBQUM7QUFBRCxDQXJGQSxBQXFGQyxJQUFBO0FBckZZLDhDQUFpQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbkM5Qix5Q0FBdUQ7QUFDdkQsaUNBQTJDO0FBQzNDLHlDQUF1RDtBQUV2RCw4Q0FBMkM7QUFDM0MsOENBQTJDO0FBSTNDLDhDQUE2QztBQVM3Qzs7R0FFRztBQUNIO0lBQWtDLGdDQUE2QjtJQWM3RCxzQkFBWSxNQUErQjtRQUEvQix1QkFBQSxFQUFBLFdBQStCO1FBQTNDLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBb0JkO1FBekJPLDZCQUF1QixHQUFhLEVBQUUsQ0FBQztRQStDdkMsdUJBQWlCLEdBQUcsVUFBQyxNQUFlLEVBQUUsSUFBMEI7WUFDdEUsSUFBSSxLQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFO2dCQUN4QixJQUFJLFlBQVksR0FBRyxLQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO2dCQUNqRCxJQUFJLGdCQUFnQixHQUFHLFlBQVksR0FBRyxZQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDO2dCQUUzRSxLQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBRS9CLCtHQUErRztnQkFDL0csaUNBQWlDO2dCQUNqQyxJQUFNLHNDQUFzQyxHQUFHLFVBQUMsZUFBdUI7b0JBQ3JFLElBQU0sZ0JBQWdCLEdBQUcsS0FBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztvQkFDcEQsSUFBTSxXQUFXLEdBQUcsS0FBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztvQkFFakQsSUFBTSx1QkFBdUIsR0FBRyxXQUFXLEdBQUcsZ0JBQWdCLENBQUM7b0JBQy9ELE9BQU8sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO2dCQUNuRCxDQUFDLENBQUM7Z0JBRUYsSUFBTSxhQUFhLEdBQUcsc0NBQXNDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFDL0UsS0FBSSxDQUFDLFlBQVksQ0FBQyxLQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO2FBRTVEO2lCQUFNO2dCQUNMLElBQUksSUFBSSxHQUFHLEtBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDO2dCQUM3RCxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUVuQixJQUFNLGtCQUFrQixHQUFHLHlCQUFXLENBQUMscUJBQXFCLENBQUMsS0FBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDN0UsSUFBTSxrQkFBa0IsR0FBRyxJQUFJLEdBQUcsa0JBQWtCLENBQUM7Z0JBQ3JELEtBQUksQ0FBQyxZQUFZLENBQUMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO2FBQ2pFO1lBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNmLEtBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDN0M7aUJBQU07Z0JBQ0wsS0FBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN6QjtZQUVELDBDQUEwQztZQUMxQyxJQUFJLEtBQUksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUMzQyxLQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDekUsS0FBSSxDQUFDLHVCQUF1QixHQUFHLEVBQUUsQ0FBQzthQUNuQztZQUVELG9DQUFvQztZQUNwQyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ2YsSUFBTSxVQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsUUFBUSxJQUFJLE9BQUEsS0FBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBeEIsQ0FBd0IsQ0FBQyxDQUFDO2dCQUNuRyxLQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDcEQsS0FBSSxDQUFDLHVCQUF1QixHQUFHLFVBQVUsQ0FBQzthQUMzQztRQUNILENBQUMsQ0FBQztRQXZGQSxLQUFJLENBQUMsU0FBUyxHQUFHLElBQUksYUFBSyxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkUsS0FBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGFBQUssQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLHFCQUFxQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3JFLEtBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxxQkFBUyxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsbUJBQW1CLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNuRixLQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSx5QkFBVyxFQUFFLENBQUM7UUFFOUMsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxRQUFRLEVBQUUsa0JBQWtCO1lBQzVCLFVBQVUsRUFBRSxDQUFDLElBQUkscUJBQVMsQ0FBQztvQkFDekIsVUFBVSxFQUFFO3dCQUNWLEtBQUksQ0FBQyxTQUFTO3dCQUNkLElBQUkscUJBQVMsQ0FBQzs0QkFDWixVQUFVLEVBQUUsQ0FBQyxLQUFJLENBQUMsVUFBVSxFQUFFLEtBQUksQ0FBQyxTQUFTLENBQUM7NEJBQzdDLFFBQVEsRUFBRSx3QkFBd0I7eUJBQ25DLENBQUM7cUJBQUM7b0JBQ0wsUUFBUSxFQUFFLHFCQUFxQjtpQkFDaEMsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxFQUFFLElBQUk7U0FDYixFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7SUFDbEIsQ0FBQztJQUVELGdDQUFTLEdBQVQsVUFBVSxNQUFpQixFQUFFLFNBQTRCO1FBQXpELGlCQWtCQztRQWpCQyxpQkFBTSxTQUFTLFlBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRW5DLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLFNBQVMsQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRTFFLElBQUksSUFBSSxHQUFHO1lBQ1QsK0NBQStDO1lBQy9DLEtBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7Z0JBQ3JHLHlCQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyx5QkFBVyxDQUFDLFdBQVcsQ0FBQztZQUN0RCxrR0FBa0c7WUFDbEcsS0FBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4QixLQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFCLENBQUMsQ0FBQztRQUVGLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2RCxJQUFJLEVBQUUsQ0FBQztJQUNULENBQUM7SUFtREQ7OztPQUdHO0lBQ0gsOEJBQU8sR0FBUCxVQUFRLElBQVk7UUFDbEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVEOzs7T0FHRztJQUNILDhCQUFPLEdBQVAsVUFBUSxPQUFlO1FBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMseUJBQVcsQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRDs7O09BR0c7SUFDSCxtQ0FBWSxHQUFaLFVBQWEsSUFBUztRQUFULHFCQUFBLEVBQUEsU0FBUztRQUNwQixJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsbUNBQVksR0FBWixVQUFhLFNBQTJCO1FBQXhDLGlCQXdCQztRQXhCWSwwQkFBQSxFQUFBLGdCQUEyQjtRQUN0QyxJQUFJLGdCQUFnQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFdEQsSUFBSSxTQUFTLElBQUksSUFBSSxFQUFFO1lBQ3JCLGdCQUFnQixDQUFDLEdBQUcsQ0FBQztnQkFDbkIsa0JBQWtCLEVBQUUsSUFBSTtnQkFDeEIsU0FBUyxFQUFFLElBQUk7Z0JBQ2YsT0FBTyxFQUFFLElBQUk7Z0JBQ2IsUUFBUSxFQUFFLElBQUk7YUFDZixDQUFDLENBQUM7U0FDSjthQUNJO1lBQ0gsOEdBQThHO1lBQzlHLDREQUE0RDtZQUM1RCxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsVUFBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU07Z0JBQy9ELDBFQUEwRTtnQkFDMUUsa0RBQWtEO2dCQUNsRCxJQUFJLFNBQVMsQ0FBQyxDQUFDLEtBQUssU0FBUyxFQUFFO29CQUM3QixnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsS0FBSSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztpQkFDekU7cUJBQU07b0JBQ0wsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEtBQUksQ0FBQyx1QkFBdUIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7aUJBQzlFO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFTyx5Q0FBa0IsR0FBMUIsVUFBMkIsU0FBb0IsRUFBRSxLQUFhLEVBQUUsTUFBYztRQUM1RSxJQUFJLGVBQWUsR0FBRyxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQztRQUM5QyxJQUFJLGVBQWUsR0FBRyxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQztRQUVoRCxJQUFJLGVBQWUsR0FBRyxTQUFTLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFDcEQsSUFBSSxlQUFlLEdBQUcsU0FBUyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDO1FBRXJELElBQUksS0FBSyxHQUFHLEdBQUcsR0FBRyxlQUFlLENBQUM7UUFDbEMsSUFBSSxLQUFLLEdBQUcsR0FBRyxHQUFHLGVBQWUsQ0FBQztRQUVsQyxJQUFJLE9BQU8sR0FBRyxHQUFHLEdBQUcsZUFBZSxDQUFDO1FBQ3BDLElBQUksT0FBTyxHQUFHLEdBQUcsR0FBRyxlQUFlLENBQUM7UUFFcEMsSUFBSSxXQUFXLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQztRQUV6RCw0R0FBNEc7UUFDNUcscUdBQXFHO1FBQ3JHLHlHQUF5RztRQUN6RyxPQUFPO1lBQ0wsU0FBUyxFQUFFLFNBQVM7WUFDcEIsa0JBQWtCLEVBQUUsY0FBTyxTQUFTLENBQUMsR0FBRyxNQUFHO1lBQzNDLGdCQUFnQixFQUFFLFVBQUcsR0FBRyxHQUFHLFdBQVcsTUFBRztZQUN6QyxpQkFBaUIsRUFBRSxVQUFHLEtBQUssZUFBSyxLQUFLLE1BQUc7WUFDeEMscUJBQXFCLEVBQUUsV0FBSSxPQUFPLGdCQUFNLE9BQU8sTUFBRztTQUNuRCxDQUFDO0lBQ0osQ0FBQztJQUVPLDhDQUF1QixHQUEvQixVQUFnQyxTQUFvQixFQUFFLEtBQWEsRUFBRSxNQUFjO1FBQ2pGLElBQUksV0FBVyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDO1FBRXJDLE9BQU87WUFDTCxTQUFTLEVBQUUsU0FBUztZQUNwQixrQkFBa0IsRUFBRSxjQUFPLFNBQVMsQ0FBQyxHQUFHLE1BQUc7WUFDM0MsZ0JBQWdCLEVBQUUsVUFBRyxHQUFHLEdBQUcsV0FBVyxNQUFHO1lBQ3pDLGlCQUFpQixFQUFFLFdBQVc7WUFDOUIscUJBQXFCLEVBQUUsS0FBSztTQUM3QixDQUFDO0lBQ0osQ0FBQztJQUVELDhCQUFPLEdBQVA7UUFDRSxpQkFBTSxPQUFPLFdBQUUsQ0FBQztRQUVoQixJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUNILG1CQUFDO0FBQUQsQ0E1TUEsQUE0TUMsQ0E1TWlDLHFCQUFTLEdBNE0xQztBQTVNWSxvQ0FBWTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDckJ6QiwrQ0FBZ0U7QUFDaEUsOEJBQTJCO0FBQzNCLDZDQUE2RDtBQUU3RDs7Ozs7Ozs7OztHQVVHO0FBRUg7SUFBK0IsNkJBQWdDO0lBSTdELG1CQUFZLE1BQStCO1FBQS9CLHVCQUFBLEVBQUEsV0FBK0I7UUFBM0MsWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FLZDtRQUhDLEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDckMsUUFBUSxFQUFFLGNBQWM7U0FDekIsRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQ2xCLENBQUM7SUFFUyxnQ0FBWSxHQUF0QjtRQUFBLGlCQWdCQztRQWZDLElBQUksYUFBYSxHQUFHLElBQUksU0FBRyxDQUFDLFFBQVEsRUFBRTtZQUNwQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3BCLE9BQU8sRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQzdCLFlBQVksRUFBRSxXQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7U0FDOUQsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBRXRCLGFBQWEsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFO1lBQ3pCLElBQUksS0FBSyxHQUFHLGFBQWEsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNoQyxLQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxhQUFhLENBQUM7SUFDdkIsQ0FBQztJQUVTLGtDQUFjLEdBQXhCLFVBQXlCLGFBQTRCO1FBQTVCLDhCQUFBLEVBQUEsb0JBQTRCO1FBQ25ELHNCQUFzQjtRQUN0QixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTNCLHVCQUF1QjtRQUN2QixLQUFpQixVQUFVLEVBQVYsS0FBQSxJQUFJLENBQUMsS0FBSyxFQUFWLGNBQVUsRUFBVixJQUFVLEVBQUU7WUFBeEIsSUFBSSxJQUFJLFNBQUE7WUFDWCxJQUFJLGFBQWEsR0FBRyxJQUFJLFNBQUcsQ0FBQyxRQUFRLEVBQUU7Z0JBQ3BDLE9BQU8sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQzthQUMxQixDQUFDLENBQUMsSUFBSSxDQUFDLFdBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUU5QyxJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsNERBQTREO2dCQUNwRyxhQUFhLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQzthQUM1QztZQUVELElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQzFDO0lBQ0gsQ0FBQztJQUVTLG9DQUFnQixHQUExQixVQUEyQixLQUFhO1FBQ3RDLGlCQUFNLGdCQUFnQixZQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFUyxzQ0FBa0IsR0FBNUIsVUFBNkIsS0FBYTtRQUN4QyxpQkFBTSxrQkFBa0IsWUFBQyxLQUFLLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRVMsdUNBQW1CLEdBQTdCLFVBQThCLEtBQWEsRUFBRSxjQUE4QjtRQUE5QiwrQkFBQSxFQUFBLHFCQUE4QjtRQUN6RSxpQkFBTSxtQkFBbUIsWUFBQyxLQUFLLENBQUMsQ0FBQztRQUNqQyxJQUFJLGNBQWMsRUFBRTtZQUNsQixJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzVCO0lBQ0gsQ0FBQztJQUNILGdCQUFDO0FBQUQsQ0FoRUEsQUFnRUMsQ0FoRThCLDJCQUFZLEdBZ0UxQztBQWhFWSw4QkFBUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDaEJ0Qix5Q0FBeUQ7QUFDekQseUNBQXdDO0FBRXhDLHNDQUFxQztBQUNyQyxzREFBb0U7QUFDcEUseURBQXdEO0FBdUJ4RCxJQUFLLG1CQUdKO0FBSEQsV0FBSyxtQkFBbUI7SUFDdEIscUVBQVEsQ0FBQTtJQUNSLHVFQUFTLENBQUE7QUFDWCxDQUFDLEVBSEksbUJBQW1CLEtBQW5CLG1CQUFtQixRQUd2QjtBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBc0JHO0FBQ0g7SUFBbUMsaUNBQThCO0lBYy9ELHVCQUFZLE1BQTJCO1FBQXZDLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBU2Q7UUFsQk8scUJBQWUsR0FBd0IsRUFBRSxDQUFDO1FBRTFDLHlCQUFtQixHQUFHO1lBQzVCLHNCQUFzQixFQUFFLElBQUksaUNBQWUsRUFBeUI7U0FDckUsQ0FBQztRQU9BLEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDckMsUUFBUSxFQUFFLG1CQUFtQjtZQUM3QixTQUFTLEVBQUUsSUFBSTtZQUNmLHVCQUF1QixFQUFFLElBQUk7U0FDUCxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV2QyxLQUFJLENBQUMsVUFBVSxHQUFHLEtBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQzs7SUFDdkMsQ0FBQztJQUVELGlDQUFTLEdBQVQsVUFBVSxNQUFpQixFQUFFLFNBQTRCO1FBQXpELGlCQTBEQztRQXpEQyxpQkFBTSxTQUFTLFlBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRW5DLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUU5QixTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLHNCQUFzQixFQUFFLEVBQTdCLENBQTZCLENBQUMsQ0FBQztRQUV4RSxJQUFJLE1BQU0sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDekIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGlCQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtnQkFDL0MsS0FBSSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNaLEtBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1lBQ2hDLENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUU7Z0JBQ3BDLG1DQUFtQztnQkFDbkMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUMzQixDQUFDLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFO2dCQUNwQyxzQ0FBc0M7Z0JBQ3RDLEtBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDM0IsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRTtnQkFDakMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUMzQixDQUFDLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFO2dCQUNsQyxLQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzNCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztZQUNwQixJQUFJLE1BQU0sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3pCLHlDQUF5QztnQkFDekMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUMxQjtZQUVELDRHQUE0RztZQUM1RywrREFBK0Q7WUFDL0QsS0FBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDO1lBQ3BCLHFGQUFxRjtZQUNyRixLQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzNCLDhHQUE4RztZQUM5RyxzQkFBc0I7WUFDdEIsS0FBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUVoQyxJQUFJLE1BQU0sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3pCLDhCQUE4QjtnQkFDOUIsS0FBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUMxQjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsb0NBQW9DO1FBQ3BDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUM7WUFDbEQsS0FBSSxDQUFDLDJCQUEyQixFQUFFLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gscUNBQWEsR0FBYjtRQUNFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILDBDQUFrQixHQUFsQixVQUFtQixLQUFhO1FBQzlCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILHFDQUFhLEdBQWIsVUFBYyxVQUE2QjtRQUN6QyxJQUFJLFVBQVUsS0FBSyxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDdkMsT0FBTyxDQUFDLElBQUksQ0FBQyx5REFBeUQsQ0FBQyxDQUFDO1lBQ3hFLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxjQUFjLENBQ2pCLFVBQVUsRUFDVixJQUFJLENBQUMsYUFBYSxFQUFFLEVBQ3BCLG1CQUFtQixDQUFDLFFBQVEsRUFDNUIsQ0FBRSxJQUFJLENBQUMsTUFBOEIsQ0FBQyx1QkFBdUIsQ0FDOUQsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNILGtEQUEwQixHQUExQjtRQUNFLElBQUksQ0FBQyxlQUFlLENBQUUsSUFBSSxDQUFDLE1BQThCLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUNyRixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsNENBQW9CLEdBQXBCO1FBQ0UsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDckMsT0FBTyxDQUFDLElBQUksQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO1lBQ2pFLE9BQU87U0FDUjtRQUVELElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkUsZ0ZBQWdGO1FBQ2hGLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDZixVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ2pDO1FBRUQsSUFBSSxDQUFDLGNBQWMsQ0FDakIsVUFBVSxFQUNWLElBQUksQ0FBQyxVQUFVLEVBQ2YsbUJBQW1CLENBQUMsU0FBUyxFQUM3QixDQUFFLElBQUksQ0FBQyxNQUE4QixDQUFDLHVCQUF1QixDQUM5RCxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxpREFBeUIsR0FBekI7UUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQ2hELENBQUM7SUFFRDs7O09BR0c7SUFDSCxnQ0FBUSxHQUFSO1FBQ0UsT0FBNEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFVBQUEsU0FBUyxJQUFJLE9BQUEsU0FBUyxZQUFZLHFDQUFpQixFQUF0QyxDQUFzQyxDQUFDLENBQUM7SUFDakgsQ0FBQztJQUVELHNCQUFJLGlEQUFzQjthQUExQjtZQUNFLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLHNCQUFzQixDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3BFLENBQUM7OztPQUFBO0lBRUQsK0JBQU8sR0FBUDtRQUNFLGlCQUFNLE9BQU8sV0FBRSxDQUFDO1FBQ2hCLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUVELHlEQUF5RDtJQUN6RCxvQ0FBWSxHQUFaLFVBQWEsU0FBcUM7UUFDaEQsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxTQUFTLFlBQVkscUNBQWlCLEVBQUU7WUFDMUUsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7U0FDN0I7UUFDRCxpQkFBTSxZQUFZLFlBQUMsU0FBUyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVPLDZDQUFxQixHQUE3QjtRQUFBLGlCQVFDO1FBUEMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFDLElBQXVCO1lBQzlDLElBQUksSUFBSSxLQUFLLEtBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQzVCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO2FBQ2hGO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO2FBQ25GO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sdUNBQWUsR0FBdkIsVUFBd0IscUJBQThCO1FBQ3BELElBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN4QyxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDcEMsSUFBSSxVQUFVLEVBQUU7WUFDZCx3RkFBd0Y7WUFDeEYsSUFBSSxDQUFDLHFCQUFxQixFQUFFO2dCQUMxQixVQUFVLENBQUMsZUFBZSxFQUFFLENBQUM7YUFDOUI7U0FDRjtRQUNELElBQUksQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLHFCQUFxQixDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUM7UUFDM0IsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVPLHNDQUFjLEdBQXRCLFVBQ0UsVUFBNkIsRUFDN0IsVUFBNkIsRUFDN0IsU0FBOEIsRUFDOUIsYUFBc0I7UUFFdEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFFN0IsSUFBSSxTQUFTLEtBQUssbUJBQW1CLENBQUMsUUFBUSxFQUFFO1lBQzlDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ3ZDO2FBQU07WUFDTCxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQzVCO1FBRUQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFFOUQsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDN0IsVUFBVSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzNCLFVBQVUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNLLHlDQUFpQixHQUF6QixVQUEwQixVQUE2QixFQUFFLFVBQTZCLEVBQUUsYUFBc0I7UUFDNUcsSUFBSSxDQUFFLElBQUksQ0FBQyxNQUE4QixDQUFDLHVCQUF1QixFQUFFO1lBQ2pFLE9BQU87U0FDUjtRQUVELElBQU0sdUJBQXVCLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3JELElBQU0sd0JBQXdCLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU3RCx3QkFBd0I7UUFDeEIsSUFBTSxrQkFBa0IsR0FBRyx3QkFBd0IsQ0FBQyxXQUFXLENBQUM7UUFDaEUsSUFBTSxtQkFBbUIsR0FBRyx3QkFBd0IsQ0FBQyxZQUFZLENBQUM7UUFFbEUsOENBQThDO1FBQzlDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsc0NBQXNDO1FBRTNGLElBQU0scUJBQXFCLEdBQUcsVUFBVSxDQUFDLGFBQWEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRSxzR0FBc0c7UUFDdEcsNEdBQTRHO1FBQzVHLElBQU0sS0FBSyxHQUFHLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQWdCLENBQUM7UUFDbkUsNkNBQTZDO1FBQzdDLElBQU0sZ0JBQWdCLEdBQUcscUJBQXFCLENBQUMsVUFBVSxDQUFDO1FBQzFELGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQyxvQkFBb0I7UUFDcEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBRTlCLDJCQUEyQjtRQUMzQixJQUFNLHdCQUF3QixHQUFHLHdCQUF3QixDQUFDLFdBQVcsQ0FBQztRQUN0RSxJQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDLFlBQVksQ0FBQztRQUV4RSw0QkFBNEI7UUFDNUIsS0FBSyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxpQ0FBaUM7UUFDekUsVUFBVSxDQUFDLGFBQWEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFOUMsOEdBQThHO1FBQzlHLHVCQUF1QixDQUFDLEdBQUcsQ0FBQztZQUMxQixLQUFLLEVBQUUsa0JBQWtCLEdBQUcsSUFBSTtZQUNoQyxNQUFNLEVBQUUsbUJBQW1CLEdBQUcsSUFBSTtTQUNuQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2xCLCtHQUErRztZQUMvRyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztTQUMzQjtRQUVELHlDQUF5QztRQUN6Qyx1QkFBdUIsQ0FBQyxHQUFHLENBQUM7WUFDMUIsS0FBSyxFQUFFLHdCQUF3QixHQUFHLElBQUk7WUFDdEMsTUFBTSxFQUFFLHlCQUF5QixHQUFHLElBQUk7U0FDekMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLDBDQUFrQixHQUExQjtRQUNFLHlDQUF5QztRQUN6Qyx5REFBeUQ7UUFDekQsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7SUFDekMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSyw4Q0FBc0IsR0FBOUI7UUFDRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUF1QjtZQUN0RCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSyxJQUFZLENBQUMsT0FBTyxZQUFZLHFCQUFTLEVBQUU7Z0JBQ2pFLElBQU0sV0FBUyxHQUFJLElBQVksQ0FBQyxPQUFvQixDQUFDO2dCQUNyRCxJQUFNLFlBQVUsR0FBRyxXQUFTLENBQUMsYUFBYSxFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUM1RCxJQUFJLFlBQVUsS0FBSyxNQUFNLEVBQUU7b0JBQ3pCLG1HQUFtRztvQkFDbkcsa0dBQWtHO29CQUNsRyx1RkFBdUY7b0JBQ3ZGLE9BQU87aUJBQ1I7Z0JBRUQsb0dBQW9HO2dCQUNwRyw4REFBOEQ7Z0JBQzlELFdBQVMsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUNqRCxJQUFJLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRTtvQkFDaEMscUJBQXFCLENBQUM7d0JBQ3BCLFdBQVMsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLFlBQVUsQ0FBQyxDQUFDO29CQUN2RCxDQUFDLENBQUMsQ0FBQztpQkFDSjtxQkFBTTtvQkFDTCw4R0FBOEc7b0JBQzlHLDBCQUEwQjtvQkFDMUIsV0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsWUFBVSxDQUFDLENBQUM7aUJBQ3REO2FBQ0Y7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxnRUFBZ0U7SUFDeEQsd0NBQWdCLEdBQXhCO1FBQ0UsSUFBTSxRQUFRLEdBQXdCLEVBQUUsQ0FBQztRQUN6QyxLQUFpQixVQUFlLEVBQWYsS0FBQSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQWYsY0FBZSxFQUFmLElBQWUsRUFBRTtZQUE3QixJQUFJLElBQUksU0FBQTtZQUNYLFFBQVEsQ0FBQyxJQUFJLE9BQWIsUUFBUSxFQUFTLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRTtTQUNuQztRQUNELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFTyxtQ0FBVyxHQUFuQjtRQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFUyxtREFBMkIsR0FBckM7UUFDRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsc0JBQXNCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUE3VnVCLCtCQUFpQixHQUFHLFFBQUgsQUFBVyxDQUFDO0lBOFZ2RCxvQkFBQztDQWhXRCxBQWdXQyxDQWhXa0MscUJBQVMsR0FnVzNDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN4WkQseUNBQXVEO0FBQ3ZELHlDQUF1RDtBQUN2RCxzREFBa0U7QUFDbEUsaUNBQTZDO0FBRTdDLHlDQUFzQztBQUN0QyxxQ0FBa0M7QUFDbEMsaUVBQThEO0FBQzlELGlFQUE4RDtBQUM5RCxtRUFBZ0U7QUFJaEU7Ozs7R0FJRztBQUNIO0lBQXVDLHFDQUEwQjtJQVMvRCwyQkFBWSxLQUFtRCxFQUFFLE9BQW1DLEVBQUUsTUFBNEI7UUFBNUIsdUJBQUEsRUFBQSxXQUE0QjtRQUFsSSxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQW1CZDtRQXhCTyw2QkFBdUIsR0FBRztZQUNoQyxlQUFlLEVBQUUsSUFBSSxpQ0FBZSxFQUE2QjtTQUNsRSxDQUFDO1FBS0EsS0FBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFFdkIsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxRQUFRLEVBQUUsd0JBQXdCO1lBQ2xDLElBQUksRUFBRSxVQUFVO1NBQ2pCLEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWhCLElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtZQUNsQixJQUFJLEtBQUssWUFBWSxxQkFBUyxFQUFFO2dCQUM5QixLQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQzthQUNwQjtpQkFBTTtnQkFDTCxLQUFJLENBQUMsS0FBSyxHQUFHLElBQUksYUFBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQWlCLENBQUMsQ0FBQzthQUMxRjtZQUNELEtBQUksQ0FBQyxZQUFZLENBQUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQy9CO1FBRUQsS0FBSSxDQUFDLFlBQVksQ0FBQyxLQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7O0lBQ2xDLENBQUM7SUFFRCxxQ0FBUyxHQUFULFVBQVUsTUFBaUIsRUFBRSxTQUE0QjtRQUF6RCxpQkF3Q0M7UUF2Q0MsSUFBSSxJQUFJLENBQUMsT0FBTyxZQUFZLHFCQUFTLElBQUksSUFBSSxDQUFDLE9BQU8sWUFBWSxpQkFBTyxFQUFFO1lBQ3hFLElBQUksdUJBQXVCLEdBQUc7Z0JBQzVCLElBQUksQ0FBQyxDQUFDLEtBQUksQ0FBQyxPQUFPLFlBQVkscUJBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFJLENBQUMsT0FBTyxZQUFZLGlCQUFPLENBQUMsRUFBRTtvQkFDOUUsT0FBTztpQkFDUjtnQkFDRCxxRkFBcUY7Z0JBQ3JGLHFGQUFxRjtnQkFDckYsSUFBSSxpQkFBaUIsR0FBRyxDQUFDLENBQUM7Z0JBQzFCLHlHQUF5RztnQkFDekcsNkNBQTZDO2dCQUM3QyxJQUFJLENBQUMsS0FBSSxDQUFDLE9BQU8sWUFBWSw2Q0FBcUIsSUFBSSxLQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO3VCQUM1RSxLQUFJLENBQUMsT0FBTyxZQUFZLDZDQUFxQixFQUFFO29CQUNsRCxpQkFBaUIsR0FBRyxDQUFDLENBQUM7aUJBQ3ZCO2dCQUVELElBQUksS0FBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxpQkFBaUIsRUFBRTtvQkFDaEQsd0RBQXdEO29CQUN4RCxLQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7aUJBQ2I7cUJBQU0sSUFBSSxLQUFJLENBQUMsT0FBTyxZQUFZLCtDQUFzQjt1QkFDcEQsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsNkJBQTZCLEVBQUU7b0JBQ3pELHdEQUF3RDtvQkFDeEQsS0FBSSxDQUFDLElBQUksRUFBRSxDQUFDO2lCQUNiO3FCQUFNO29CQUNMLEtBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztpQkFDYjtnQkFFRCx1R0FBdUc7Z0JBQ3ZHLDZGQUE2RjtnQkFDN0YsS0FBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Z0JBRTVCLEtBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3JELENBQUMsQ0FBQztZQUVGLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBQzVELElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBRTlELDBCQUEwQjtZQUMxQix1QkFBdUIsRUFBRSxDQUFDO1NBQzNCO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNILG9DQUFRLEdBQVI7UUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRVMsZ0RBQW9CLEdBQTlCO1FBQ0UsSUFBSSxDQUFDLHVCQUF1QixDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQU9ELHNCQUFJLDhDQUFlO1FBTG5COzs7O1dBSUc7YUFDSDtZQUNFLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNqRSxDQUFDOzs7T0FBQTtJQUNILHdCQUFDO0FBQUQsQ0E3RkEsQUE2RkMsQ0E3RnNDLHFCQUFTLEdBNkYvQztBQTdGWSw4Q0FBaUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2xCOUIseUNBQXVEO0FBQ3ZELHlEQUFzRDtBQUV0RCxzREFBa0U7QUFFbEUsZ0RBQStDO0FBRS9DOztHQUVHO0FBQ0g7SUFBdUMscUNBQTBCO0lBVS9ELDJCQUFZLE1BQXVCO1FBQW5DLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBTWQ7UUFiTyw2QkFBdUIsR0FBRztZQUNoQyxzQkFBc0IsRUFBRSxJQUFJLGlDQUFlLEVBQTZCO1lBQ3hFLFFBQVEsRUFBRSxJQUFJLGlDQUFlLEVBQTZCO1lBQzFELFVBQVUsRUFBRSxJQUFJLGlDQUFlLEVBQTZCO1NBQzdELENBQUM7UUFLQSxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQWtCLE1BQU0sRUFBRTtZQUN0RCxRQUFRLEVBQUUsd0JBQXdCO1lBQ2xDLElBQUksRUFBRSxNQUFNO1NBQ2IsRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQ2xCLENBQUM7SUFFRCxxQ0FBUyxHQUFULFVBQVUsTUFBaUIsRUFBRSxTQUE0QjtRQUF6RCxpQkFzQkM7UUFyQkMsaUJBQU0sU0FBUyxZQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVuQywyREFBMkQ7UUFDM0QsSUFBSSwyQkFBMkIsR0FBRztZQUNoQyxLQUFJLENBQUMsMkJBQTJCLEVBQUUsQ0FBQztZQUVuQywyQ0FBMkM7WUFDM0MsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDO1lBQ3pCLEtBQXNCLFVBQWUsRUFBZixLQUFBLEtBQUksQ0FBQyxRQUFRLEVBQUUsRUFBZixjQUFlLEVBQWYsSUFBZSxFQUFFO2dCQUFsQyxJQUFJLFNBQVMsU0FBQTtnQkFDaEIsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDLFdBQVcsQ0FBQyxLQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BGLElBQUksU0FBUyxDQUFDLE9BQU8sRUFBRSxFQUFFO29CQUN2QixhQUFhLEdBQUcsU0FBUyxDQUFDO2lCQUMzQjthQUNGO1lBQ0QsSUFBSSxhQUFhLEVBQUU7Z0JBQ2pCLGFBQWEsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO2FBQ3RGO1FBQ0gsQ0FBQyxDQUFDO1FBQ0YsS0FBc0IsVUFBZSxFQUFmLEtBQUEsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFmLGNBQWUsRUFBZixJQUFlLEVBQUU7WUFBbEMsSUFBSSxTQUFTLFNBQUE7WUFDaEIsU0FBUyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsMkJBQTJCLENBQUMsQ0FBQztTQUNsRTtJQUNILENBQUM7SUFFRCw2Q0FBaUIsR0FBakI7UUFDRSxLQUFzQixVQUFlLEVBQWYsS0FBQSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQWYsY0FBZSxFQUFmLElBQWUsRUFBRTtZQUFsQyxJQUFJLFNBQVMsU0FBQTtZQUNoQixJQUFJLFNBQVMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtnQkFDeEIsT0FBTyxJQUFJLENBQUM7YUFDYjtTQUNGO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsb0NBQVEsR0FBUjtRQUNFLE9BQTRCLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFBLFNBQVMsSUFBSSxPQUFBLFNBQVMsWUFBWSxxQ0FBaUIsRUFBdEMsQ0FBc0MsQ0FBQyxDQUFDO0lBQ2pILENBQUM7SUFFRCx1REFBMkIsR0FBM0I7UUFDRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsc0JBQXNCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxzQkFBSSxxREFBc0I7YUFBMUI7WUFDRSxPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN4RSxDQUFDOzs7T0FBQTtJQUVELHlDQUFhLEdBQWI7UUFDRSxJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQUMsSUFBSSxJQUFLLE9BQUEsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFmLENBQWUsQ0FBQyxDQUFDO1FBRXRFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JELGdIQUFnSDtRQUNoSCxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsMkJBQVksQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLDJCQUFZLENBQUMsVUFBVSxJQUFJLDJCQUFZLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtZQUNoSCxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztTQUNwRDtJQUNILENBQUM7SUFFRCxzQkFBSSx1Q0FBUTthQUFaO1lBQ0UsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzFELENBQUM7OztPQUFBO0lBRUQsMkNBQWUsR0FBZjtRQUNFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxzQkFBSSx5Q0FBVTthQUFkO1lBQ0UsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzVELENBQUM7OztPQUFBO0lBbkZ1Qiw0QkFBVSxHQUFHLE1BQUgsQUFBUyxDQUFDO0lBb0Y5Qyx3QkFBQztDQXRGRCxBQXNGQyxDQXRGc0MscUJBQVMsR0FzRi9DOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMvRkQsdUZBQXNIO0FBR3RIO0lBQWlELCtDQUFnQztJQUUvRSxxQ0FBWSxNQUF3QztRQUFwRCxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQU1kO1FBSkMsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxRQUFRLEVBQUUsZ0NBQWdDO1lBQzFDLElBQUksRUFBRSxNQUFNO1NBQ3VCLEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztJQUN0RCxDQUFDO0lBRUQsK0NBQVMsR0FBVCxVQUFVLE1BQWlCLEVBQUUsU0FBNEI7UUFBekQsaUJBTUM7UUFMQyxpQkFBTSxTQUFTLFlBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRW5DLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1lBQ3JCLEtBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNqQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDSCxrQ0FBQztBQUFELENBbEJBLEFBa0JDLENBbEJnRCxtRUFBZ0MsR0FrQmhGO0FBbEJZLGtFQUEyQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDSnhDLG1DQUE4QztBQTBCOUM7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0g7SUFBc0Qsb0RBQXdDO0lBSTVGLDBDQUFZLE1BQXdDO1FBQXBELFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBS2Q7UUFKQyxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLEVBQXNDLEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTVGLEtBQUksQ0FBQyxTQUFTLEdBQUksS0FBSSxDQUFDLE1BQTJDLENBQUMsU0FBUyxDQUFDO1FBQzdFLEtBQUksQ0FBQyxVQUFVLEdBQUksS0FBSSxDQUFDLE1BQTJDLENBQUMsVUFBVSxDQUFDOztJQUNqRixDQUFDO0lBRUQ7O09BRUc7SUFDSCxrREFBTyxHQUFQO1FBQ0UsSUFBSSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7T0FFRztJQUNILHlEQUFjLEdBQWQ7UUFDRSxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUNILHVDQUFDO0FBQUQsQ0F6QkEsQUF5QkMsQ0F6QnFELGVBQU0sR0F5QjNEO0FBekJZLDRFQUFnQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDdEM3Qyx1RkFBc0g7QUFFdEgsNkNBQTRDO0FBRTVDO0lBQWlELCtDQUFnQztJQUMvRSxxQ0FBWSxNQUF3QztRQUFwRCxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQU9kO1FBTEMsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxRQUFRLEVBQUUsZ0NBQWdDO1lBQzFDLElBQUksRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztZQUMvQixJQUFJLEVBQUUsVUFBVTtTQUNtQixFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7SUFDdEQsQ0FBQztJQUVELCtDQUFTLEdBQVQsVUFBVSxNQUFpQixFQUFFLFNBQTRCO1FBQXpELGlCQVNDO1FBUkMsaUJBQU0sU0FBUyxZQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVuQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUU5RSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztZQUNyQixLQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0gsa0NBQUM7QUFBRCxDQXJCQSxBQXFCQyxDQXJCZ0QsbUVBQWdDLEdBcUJoRjtBQXJCWSxrRUFBMkI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0x4QywrQ0FBZ0U7QUFDaEUsaURBQThDO0FBRzlDLDRDQUF5QztBQUV6Qyw2Q0FBNEM7QUFrQjVDOztHQUVHO0FBQ0g7SUFBMEMsd0NBQXdDO0lBSWhGLDhCQUFZLE1BQWtDO1FBQTlDLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBd0JkO1FBM0JPLDJCQUFxQixHQUFvQixFQUFFLENBQUM7UUFLbEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUU7WUFDekIsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1NBQ3REO1FBRUQsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxRQUFRLEVBQUUseUJBQXlCO1lBQ25DLElBQUksRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztZQUNuQyxhQUFhLEVBQUUsSUFBSTtZQUNuQiw0QkFBNEIsRUFBRSxJQUFJO1lBQ2xDLElBQUksRUFBRSxlQUFlO1NBQ3RCLEVBQThCLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUU1Qzs7V0FFRztRQUNILEtBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFNUY7O1dBRUc7UUFDSCxLQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQzs7SUFFckQsQ0FBQztJQUVELHdDQUFTLEdBQVQsVUFBVSxNQUFpQixFQUFFLFNBQTRCO1FBQXpELGlCQXFEQztRQXBEQyxpQkFBTSxTQUFTLFlBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRW5DLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUM5QixJQUFJLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBRXpDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1lBQ3JCLCtEQUErRDtZQUMvRCxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUM1QixrRUFBa0U7Z0JBQ2xFLHFHQUFxRztnQkFDckcsa0NBQWtDO2dCQUNsQyxLQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQUEsYUFBYSxJQUFJLE9BQUEsYUFBYSxDQUFDLElBQUksRUFBRSxFQUFwQixDQUFvQixDQUFDLENBQUM7YUFDbkY7WUFDRCxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7UUFDSCxhQUFhLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztZQUM3Qix3REFBd0Q7WUFDeEQsS0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ1osQ0FBQyxDQUFDLENBQUM7UUFDSCxhQUFhLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztZQUM3Qix5REFBeUQ7WUFDekQsS0FBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2IsQ0FBQyxDQUFDLENBQUM7UUFFSCx5REFBeUQ7UUFDekQscUNBQXFDO1FBQ3JDLFNBQVMsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLFVBQUMsTUFBa0M7WUFDckUsSUFBSSxNQUFNLFlBQVksNkJBQWEsRUFBRTtnQkFDbkMsS0FBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDeEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsY0FBTSxPQUFBLHVCQUFVLENBQUMsTUFBTSxDQUFDLEtBQUksQ0FBQyxxQkFBcUIsRUFBRSxNQUFNLENBQUMsRUFBckQsQ0FBcUQsQ0FBQyxDQUFDO2FBQzFGO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCwrRkFBK0Y7UUFDL0YsSUFBSSxNQUFNLENBQUMsNEJBQTRCLEVBQUU7WUFDdkMsNkRBQTZEO1lBQzdELElBQUksZ0NBQWdDLEdBQUc7Z0JBQ3JDLElBQUksYUFBYSxDQUFDLHlCQUF5QixFQUFFLEVBQUU7b0JBQzdDLElBQUksS0FBSSxDQUFDLFFBQVEsRUFBRSxFQUFFO3dCQUNuQixLQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7cUJBQ2I7aUJBQ0Y7cUJBQU07b0JBQ0wsSUFBSSxLQUFJLENBQUMsT0FBTyxFQUFFLEVBQUU7d0JBQ2xCLEtBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztxQkFDYjtpQkFDRjtZQUNILENBQUMsQ0FBQztZQUNGLGdDQUFnQztZQUNoQyxhQUFhLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7WUFDakYseUNBQXlDO1lBQ3pDLGdDQUFnQyxFQUFFLENBQUM7U0FDcEM7SUFDSCxDQUFDO0lBQ0gsMkJBQUM7QUFBRCxDQXJGQSxBQXFGQyxDQXJGeUMsMkJBQVksR0FxRnJEO0FBckZZLG9EQUFvQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDM0JqQyx5Q0FBdUQ7QUFFdkQ7O0dBRUc7QUFDSDtJQUE0QiwwQkFBMEI7SUFFcEQsZ0JBQVksTUFBNEI7UUFBNUIsdUJBQUEsRUFBQSxXQUE0QjtRQUF4QyxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQUtkO1FBSEMsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxRQUFRLEVBQUUsV0FBVztTQUN0QixFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7SUFDbEIsQ0FBQztJQUdTLDRCQUFXLEdBQXJCO1FBQ0UsNERBQTREO0lBQzlELENBQUM7SUFFUyw0QkFBVyxHQUFyQjtRQUNFLDREQUE0RDtJQUM5RCxDQUFDO0lBRVMsb0NBQW1CLEdBQTdCLFVBQThCLE9BQWdCO1FBQzVDLDREQUE0RDtJQUM5RCxDQUFDO0lBQ0gsYUFBQztBQUFELENBdEJBLEFBc0JDLENBdEIyQixxQkFBUyxHQXNCcEM7QUF0Qlksd0JBQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0xuQixxQ0FBa0M7QUFFbEMsa0RBQXVEO0FBR3ZEOztHQUVHO0FBQ0g7SUFBcUMsbUNBQU87SUFBNUM7O0lBT0EsQ0FBQztJQUxDLG1DQUFTLEdBQVQsVUFBVSxNQUFpQixFQUFFLFNBQTRCO1FBQ3ZELGlCQUFNLFNBQVMsWUFBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFbkMsSUFBSSxxQ0FBcUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFDSCxzQkFBQztBQUFELENBUEEsQUFPQyxDQVBvQyxpQkFBTyxHQU8zQztBQVBZLDBDQUFlOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNSNUIseUNBQXlEO0FBRXpELGlDQUE2QztBQUU3QywyQ0FBMEM7QUFDMUMsc0RBQXFEO0FBQ3JELDhCQUFtQztBQUVuQyw2Q0FBNEM7QUFDNUMsd0NBQXVDO0FBVXZDOztHQUVHO0FBQ0g7SUFBcUMsbUNBQTBCO0lBcUI3RCx5QkFBWSxNQUE0QjtRQUE1Qix1QkFBQSxFQUFBLFdBQTRCO1FBQXhDLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBUWQ7UUF4Qk8sa0NBQTRCLEdBQUcsSUFBSSxpQ0FBZSxFQUFtQyxDQUFDO1FBa0I1RixLQUFJLENBQUMscUJBQXFCLEdBQUcsS0FBSyxDQUFDO1FBQ25DLEtBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxhQUFhLENBQUMsRUFBRSxJQUFJLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUUxRixLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFFBQVEsRUFBRSxxQkFBcUI7U0FDaEMsRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQ2xCLENBQUM7SUFFRCxtQ0FBUyxHQUFULFVBQVUsTUFBaUIsRUFBRSxTQUE0QjtRQUF6RCxpQkFrR0M7UUFqR0MsaUJBQU0sU0FBUyxZQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVuQyxJQUFJLGVBQWUsR0FBRyxJQUFJLHFCQUFxQixFQUFFLENBQUM7UUFDbEQsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7UUFFdkMsSUFBSSxDQUFDLHdCQUF3QixHQUFHLElBQUksOEJBQThCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFekUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsVUFBQyxLQUF1QjtZQUNyRSxJQUFNLEtBQUssR0FBRyxLQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3hDLGVBQWUsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBRXZDLEtBQUksQ0FBQyw0QkFBNEIsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBRXpELElBQUksS0FBSSxDQUFDLHFCQUFxQixFQUFFO2dCQUM5QixLQUFJLENBQUMsd0JBQXdCLENBQUMsV0FBVyxDQUFDLEtBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQzthQUNqRTtZQUVELEtBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVaLEtBQUksQ0FBQyx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQzNFLEtBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBRXhCLElBQUksU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLCtCQUErQixFQUFFO2dCQUN6RCxLQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDcEM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFVBQUMsS0FBdUI7WUFDdEUsSUFBTSxLQUFLLEdBQUcsS0FBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN4QyxJQUFNLGNBQWMsR0FBRyxlQUFlLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztZQUUvRCxLQUFJLENBQUMsNEJBQTRCLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztZQUV6RCxJQUFJLGNBQWMsRUFBRTtnQkFDbEIsS0FBSSxDQUFDLHdCQUF3QixDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDbkU7WUFFRCxJQUFJLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQywrQkFBK0IsRUFBRTtnQkFDekQsS0FBSSxDQUFDLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3BDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxVQUFDLEtBQXVCO1lBQ3BFLElBQUksYUFBYSxHQUFHLGVBQWUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFbkQsSUFBSSxhQUFhLEVBQUU7Z0JBQ2pCLEtBQUksQ0FBQyx3QkFBd0IsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQ3pELEtBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO2FBQ3pCO1lBRUQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUU7Z0JBQzVCLElBQUksQ0FBQyxLQUFJLENBQUMscUJBQXFCLEVBQUU7b0JBQy9CLEtBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztpQkFDYjtxQkFBTTtvQkFDTCxLQUFJLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztvQkFDN0QsS0FBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7aUJBQ3pCO2FBQ0Y7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksb0JBQW9CLEdBQUc7WUFDekIsS0FBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ1osS0FBSSxDQUFDLHdCQUF3QixDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3RDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUN4QixLQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUN4QixLQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUMxQixDQUFDLENBQUM7UUFFRixJQUFNLGlCQUFpQixHQUFHO1lBQ3hCLElBQU0saUJBQWlCLEdBQUcsZUFBZSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO1lBQ3JGLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxVQUFBLFFBQVE7Z0JBQ2hDLEtBQUksQ0FBQyx3QkFBd0IsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzVELENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDO1FBRUYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztRQUN6RSxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQzVFLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztRQUM3RSxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDckUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQzdFLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFFM0UsU0FBUyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsVUFBQyxTQUFxQztZQUN4RSxJQUFJLFNBQVMsWUFBWSx1QkFBVSxFQUFFO2dCQUNuQyxLQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQzthQUN6RjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsU0FBUyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsVUFBQyxTQUFxQztZQUN4RSxJQUFJLFNBQVMsWUFBWSx1QkFBVSxFQUFFO2dCQUNuQyxLQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQzthQUM1RjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNoRCxPQUFPO1FBQ1Asb0JBQW9CLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsb0RBQTBCLEdBQTFCLFVBQ0UsWUFBeUI7UUFFekIsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUUzQyxJQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUN2RCxJQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUVsRCxPQUFPO1lBQ0wsR0FBRyxFQUFFLFNBQVMsQ0FBQyxHQUFHLEdBQUcsVUFBVSxDQUFDLEdBQUc7WUFDbkMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUs7WUFDekMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU07WUFDNUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLElBQUk7U0FDdkMsQ0FBQztJQUNKLENBQUM7SUFFRCxnREFBc0IsR0FBdEIsVUFBdUIsS0FBb0I7UUFDekMsSUFBTSxlQUFlLEdBQUcsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzlDLElBQU0sYUFBYSxHQUFHLElBQUksQ0FBQywwQkFBMEIsQ0FDbkQsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FDdkIsQ0FBQztRQUVGLElBQUksYUFBYSxDQUFDLEdBQUcsRUFBRTtZQUNyQixlQUFlLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNoQyxlQUFlLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3JDO1FBRUQsSUFBSSxhQUFhLENBQUMsS0FBSyxFQUFFO1lBQ3ZCLGVBQWUsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ2xDLGVBQWUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDbkM7UUFFRCxJQUFJLGFBQWEsQ0FBQyxNQUFNLEVBQUU7WUFDeEIsZUFBZSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDbkMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNsQztRQUVELElBQUksYUFBYSxDQUFDLElBQUksRUFBRTtZQUN0QixlQUFlLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNqQyxlQUFlLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQztJQUVELHVDQUFhLEdBQWIsVUFBYyxLQUF1QjtRQUNuQyx1R0FBdUc7UUFDdkcsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFO1lBQ2xCLG1FQUFtRTtZQUNuRSxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7WUFDN0MsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDO1NBQ3BEO1FBRUQsSUFBTSxLQUFLLEdBQUcsSUFBSSxhQUFhLENBQUM7WUFDOUIsNEdBQTRHO1lBQzVHLDBCQUEwQjtZQUMxQixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksSUFBSSxxQkFBcUIsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLElBQUk7WUFDekYsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHO1lBQ2QsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztTQUMvQixDQUFDLENBQUM7UUFFSCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxpREFBdUIsR0FBdkIsVUFBd0IsTUFBaUIsRUFBRSxTQUE0QjtRQUF2RSxpQkFnSUM7UUEvSEMsMkJBQTJCO1FBQzNCLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQztRQUNqQixnRkFBZ0Y7UUFDaEYsSUFBSSxpQkFBaUIsR0FBRyxDQUFDLENBQUM7UUFDMUIseUZBQXlGO1FBQ3pGLElBQUksMkJBQTJCLEdBQUcsSUFBSSxDQUFDO1FBQ3ZDLDhDQUE4QztRQUM5QyxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFFcEIsSUFBTSxvQkFBb0IsR0FBRztZQUMzQixJQUFNLFVBQVUsR0FBRyxJQUFJLGFBQWEsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ3BELFVBQVUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxHQUFHLENBQUM7Z0JBQzdCLHlGQUF5RjtnQkFDekYseUVBQXlFO2dCQUN6RSxXQUFXLEVBQUUsT0FBTztnQkFDcEIsYUFBYSxFQUFFLE9BQU87Z0JBQ3RCLFlBQVksRUFBRSxRQUFRO2FBQ3ZCLENBQUMsQ0FBQztZQUNILEtBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDOUIsS0FBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDeEIsS0FBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBRVosSUFBTSxtQkFBbUIsR0FBRyxVQUFVLENBQUMsYUFBYSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDL0QsSUFBTSxvQkFBb0IsR0FBRyxVQUFVLENBQUMsYUFBYSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDakUsSUFBTSxhQUFhLEdBQUcsbUJBQW1CLEdBQUcsb0JBQW9CLENBQUM7WUFFakUsS0FBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNqQyxLQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUN4QixJQUFJLENBQUMsS0FBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUU7Z0JBQ2pDLEtBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNiO1lBRUQsd0dBQXdHO1lBQ3hHLG1HQUFtRztZQUNuRywwR0FBMEc7WUFDMUcsd0dBQXdHO1lBQ3hHLG1FQUFtRTtZQUNuRSxJQUFNLG9CQUFvQixHQUFHLEtBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUM7WUFDL0QsSUFBTSxxQkFBcUIsR0FBRyxLQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7WUFFNUQsb0NBQW9DO1lBQ3BDLElBQU0saUJBQWlCLEdBQUcsQ0FBQyxtQkFBbUIsR0FBRyxlQUFlLENBQUMsa0JBQWtCLENBQUM7Z0JBQ2xGLENBQUMsb0JBQW9CLEdBQUcsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQzNELHFEQUFxRDtZQUNyRCxJQUFNLHdCQUF3QixHQUFHLG9CQUFvQixHQUFHLHFCQUFxQixDQUFDO1lBRTlFLElBQUksd0JBQXdCLEdBQUcsaUJBQWlCLEVBQUU7Z0JBQ2hELGdGQUFnRjtnQkFDaEYsbURBQW1EO2dCQUNuRCxRQUFRLEdBQUcscUJBQXFCLEdBQUcsZUFBZSxDQUFDLGVBQWUsQ0FBQztnQkFFbkUscUdBQXFHO2dCQUNyRyxJQUFNLGFBQWEsR0FBRyxvQkFBb0IsR0FBRyxlQUFlLENBQUMsa0JBQWtCLENBQUM7Z0JBQ2hGLElBQU0sYUFBYSxHQUFHLFFBQVEsR0FBRyxhQUFhLENBQUM7Z0JBQy9DLGlCQUFpQixHQUFHLGFBQWEsR0FBRyxhQUFhLENBQUM7YUFDbkQ7aUJBQU07Z0JBQ0wseUZBQXlGO2dCQUN6RixxRkFBcUY7Z0JBQ3JGLG9FQUFvRTtnQkFDcEUsUUFBUSxHQUFHLG9CQUFvQixHQUFHLGVBQWUsQ0FBQyxrQkFBa0IsR0FBRyxhQUFhLENBQUM7Z0JBQ3JGLGlCQUFpQixHQUFHLENBQUMsQ0FBQzthQUN2QjtZQUVELGlEQUFpRDtZQUNqRCxLQUFrQixVQUFvQixFQUFwQixLQUFBLEtBQUksQ0FBQyxhQUFhLEVBQUUsRUFBcEIsY0FBb0IsRUFBcEIsSUFBb0IsRUFBRTtnQkFBbkMsSUFBSSxLQUFLLFNBQUE7Z0JBQ1osSUFBSSxLQUFLLFlBQVksYUFBYSxFQUFFO29CQUNsQyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsR0FBRyxDQUFDO3dCQUN4QixXQUFXLEVBQUUsVUFBRyxRQUFRLE9BQUk7d0JBQzVCLGdCQUFnQixFQUFFLFVBQUcsaUJBQWlCLE9BQUk7cUJBQzNDLENBQUMsQ0FBQztpQkFDSjthQUNGO1FBQ0gsQ0FBQyxDQUFDO1FBRUYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUU7WUFDbEQsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsb0JBQW9CLEVBQUUsQ0FBQzthQUN4QjtpQkFBTTtnQkFDTCwyQkFBMkIsR0FBRyxJQUFJLENBQUM7YUFDcEM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxTQUFTLENBQUMsVUFBQyxLQUF1QixFQUFFLEtBQW9CO1lBQ3hGLElBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDO1lBQ3hDLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2IsMkJBQTJCO2dCQUMzQixPQUFPO2FBQ1I7WUFFRCxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNaLE9BQU8sR0FBRyxJQUFJLENBQUM7Z0JBQ2YsS0FBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO2dCQUU3RSxrR0FBa0c7Z0JBQ2xHLGlHQUFpRztnQkFDakcsbUdBQW1HO2dCQUNuRywwQ0FBMEM7Z0JBQzFDLElBQUksMkJBQTJCLEVBQUU7b0JBQy9CLG9CQUFvQixFQUFFLENBQUM7b0JBQ3ZCLDJCQUEyQixHQUFHLEtBQUssQ0FBQztpQkFDckM7YUFDRjtZQUVELEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQyxHQUFHLENBQUM7Z0JBQ3hCLE1BQU0sRUFBRSxVQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLGVBQWUsQ0FBQyxvQkFBb0IsTUFBRztnQkFDMUUsS0FBSyxFQUFFLFVBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsZUFBZSxDQUFDLGlCQUFpQixNQUFHO2dCQUNuRSxXQUFXLEVBQUUsVUFBRyxRQUFRLE9BQUk7Z0JBQzVCLGdCQUFnQixFQUFFLFVBQUcsaUJBQWlCLE9BQUk7YUFDM0MsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFNLEtBQUssR0FBRztZQUNaLEtBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUNoRixPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLENBQUMsQ0FBQztRQUVGLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFO1lBQzVDLElBQUksQ0FBQyxLQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRTtnQkFDakMsb0ZBQW9GO2dCQUNwRiw2RUFBNkU7Z0JBQzdFLEtBQUssRUFBRSxDQUFDO2FBQ1Q7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzVELE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzdELE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELG9EQUEwQixHQUExQjtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRTtZQUNqQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDO1lBQ2xDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQzdELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ3hCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNiO0lBQ0gsQ0FBQztJQUVELG9EQUEwQixHQUExQjtRQUNFLElBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFO1lBQzlCLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxLQUFLLENBQUM7WUFDbkMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDaEUsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7U0FDekI7SUFDSCxDQUFDO0lBM1V1Qix3Q0FBd0IsR0FBRyxvQkFBSCxBQUF1QixDQUFDO0lBQ2hELDZCQUFhLEdBQUcsUUFBSCxBQUFXLENBQUM7SUFFakQsc0NBQXNDO0lBQ2QsK0JBQWUsR0FBRyxFQUFILEFBQUssQ0FBQztJQUM3Qyx5Q0FBeUM7SUFDakIsa0NBQWtCLEdBQUcsRUFBSCxBQUFLLENBQUM7SUFDaEQsd0VBQXdFO0lBQ2hELGlDQUFpQixHQUFHLEdBQUcsR0FBRyxlQUFlLENBQUMsZUFBekIsQUFBd0MsQ0FBQztJQUNsRiw2RUFBNkU7SUFDckQsb0NBQW9CLEdBQUcsR0FBRyxHQUFHLGVBQWUsQ0FBQyxrQkFBekIsQUFBMkMsQ0FBQztJQWtVMUYsc0JBQUM7Q0FyVkQsQUFxVkMsQ0FyVm9DLHFCQUFTLEdBcVY3QztBQWlCRDtJQUFtQyxpQ0FBMEI7SUFFM0QsdUJBQVksTUFBZ0M7UUFBaEMsdUJBQUEsRUFBQSxXQUFnQztRQUE1QyxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQUtkO1FBSEMsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxRQUFRLEVBQUUsbUJBQW1CO1NBQzlCLEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztJQUNsQixDQUFDO0lBRUQsc0JBQUksOEJBQUc7YUFBUDtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDekIsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSxpQ0FBTTthQUFWO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUM1QixDQUFDOzs7T0FBQTtJQUVELHNCQUFJLHNDQUFXO2FBQWY7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO1FBQ2pDLENBQUM7OztPQUFBO0lBQ0gsb0JBQUM7QUFBRCxDQXJCQSxBQXFCQyxDQXJCa0MsYUFBSyxHQXFCdkM7QUFyQlksc0NBQWE7QUF1QjFCO0lBS0U7UUFDRSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDO1FBQy9CLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVEOzs7Ozs7Ozs7T0FTRztJQUNZLGlDQUFXLEdBQTFCLFVBQTJCLEtBQXVCO1FBQ2hELElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFFeEMsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFO1lBQ2xCLEVBQUUsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1NBQzlEO1FBRUQsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsd0NBQVEsR0FBUixVQUFTLEtBQXVCLEVBQUUsS0FBb0I7UUFDcEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELHlDQUFTLEdBQVQsVUFBVSxLQUF1QixFQUFFLEtBQW9CO1FBQ3JELElBQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFakQsSUFBSSxjQUFjLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDL0IsT0FBTyxjQUFjLENBQUM7U0FDdkI7UUFFRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRU8sMkNBQVcsR0FBbkIsVUFBb0IsS0FBdUIsRUFBRSxLQUFvQjtRQUMvRCxJQUFJLEVBQUUsR0FBRyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFbEQsMkNBQTJDO1FBQzNDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRXBFLFVBQVU7UUFDVixJQUFJLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxPQUFBLEVBQUUsS0FBSyxPQUFBLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFTyw2Q0FBYSxHQUFyQixVQUFzQixLQUF1QjtRQUMzQyxJQUFJLEVBQUUsR0FBRyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEQsSUFBSSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFdkQsSUFBSSxrQkFBa0IsSUFBSSxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZELGFBQWE7WUFDYjs7Ozs7O2VBTUc7WUFDSCxJQUFJLGlCQUFpQixHQUFHLGtCQUFrQixDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ25ELElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1lBRTlCLE9BQU8saUJBQWlCLENBQUMsS0FBSyxDQUFDO1NBQ2hDO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNJLGlEQUFpQixHQUF4QixVQUF5QixJQUFZO1FBQXJDLGlCQVlDO1FBWEMsSUFBTSxXQUFXLEdBQXdCLEVBQUUsQ0FBQztRQUM1QyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLEdBQUc7WUFDaEQsSUFBTSxVQUFVLEdBQUcsS0FBSSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2xELFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHO2dCQUNwQixJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUU7b0JBQ2xELEtBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUM5QixXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUN2QjtZQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBRU0sMENBQW9CLEdBQTNCLFVBQTRCLFNBQWlCO1FBQzNDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxPQUFPO1NBQ1I7UUFFRCxJQUFNLE1BQU0sR0FBRyxJQUFJLFNBQUcsQ0FBQyxLQUFLLEVBQUU7WUFDNUIsR0FBRyxFQUFFLFNBQVM7U0FDZixDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM1QixPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsNEJBQTRCO0lBQzlELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsdUNBQU8sR0FBUCxVQUFRLEtBQXVCO1FBQzdCLElBQUksRUFBRSxHQUFHLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsRCxJQUFJLGtCQUFrQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN2RCxJQUFJLGtCQUFrQixJQUFJLGtCQUFrQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdkQsT0FBTyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsVUFBQyxHQUFHLElBQUssT0FBQSxHQUFHLENBQUMsS0FBSyxFQUFULENBQVMsQ0FBQyxDQUFDO1NBQ25EO0lBQ0gsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsdUNBQU8sR0FBUCxVQUFRLEtBQXVCO1FBQzdCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBTUQsc0JBQUksMkNBQVE7UUFKWjs7O1dBR0c7YUFDSDtZQUNFLDRHQUE0RztZQUM1RyxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztRQUNyQyxDQUFDOzs7T0FBQTtJQU1ELHNCQUFJLDBDQUFPO1FBSlg7OztXQUdHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLENBQUM7OztPQUFBO0lBRUQ7O09BRUc7SUFDSCxxQ0FBSyxHQUFMO1FBQ0UsSUFBSSxDQUFDLG9CQUFvQixHQUFHLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsc0JBQXNCLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFDSCw0QkFBQztBQUFELENBekpBLEFBeUpDLElBQUE7QUFFRDtJQUdFOztPQUVHO0lBQ0gsd0NBQW9CLGVBQWdDO1FBQWhDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUw1Qyw2QkFBd0IsR0FBc0QsRUFBRSxDQUFDO1FBTXZGLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO0lBQ3pDLENBQUM7SUFFTyxrREFBUyxHQUFqQixVQUFrQixLQUFvQjtRQUNwQyxJQUFJLEtBQUssQ0FBQyxHQUFHLEVBQUU7WUFDYixPQUFPO2dCQUNMLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLO2dCQUN4RixVQUFVLEVBQUUsS0FBSzthQUNsQixDQUFDO1NBQ0g7UUFFRCxPQUFPO1lBQ0wsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLE1BQU0sSUFBSSxTQUFTO1lBQzVDLFVBQVUsRUFBRSxLQUFLLENBQUMsTUFBTSxJQUFJLFNBQVM7U0FDdEMsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsaURBQVEsR0FBUixVQUFTLEtBQW9CLEVBQUUsV0FBa0I7UUFDekMsSUFBQSxLQUFvQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUF2RCxpQkFBaUIsdUJBQUEsRUFBRSxVQUFVLGdCQUEwQixDQUFDO1FBQ2hFLElBQU0sVUFBVSxHQUFHLENBQUMsNEJBQXFCLFVBQVUsQ0FBRSxDQUFDLENBQUM7UUFFdkQsSUFBSSxLQUFLLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFO1lBQ2pDLFVBQVUsQ0FBQyxJQUFJLENBQUMscUJBQWMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFFLENBQUMsQ0FBQztTQUN0RDtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsaUJBQWlCLENBQUMsRUFBRTtZQUNyRCxJQUFNLGVBQWUsR0FBRyxJQUFJLHVCQUF1QixDQUFDO2dCQUNsRCxVQUFVLFlBQUE7YUFDWCxDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsd0JBQXdCLENBQUMsaUJBQWlCLENBQUMsR0FBRyxlQUFlLENBQUM7WUFFbkUsSUFBSSxLQUFLLENBQUMsV0FBVyxFQUFFO2dCQUNyQixlQUFlLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDbEU7aUJBQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUU7Z0JBQ3pDOzs7bUJBR0c7Z0JBQ0gsZUFBZSxDQUFDLGFBQWEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFDM0Q7aUJBQU07Z0JBQ0wsZ0ZBQWdGO2dCQUNoRixlQUFlLENBQUMsYUFBYSxFQUFFLENBQUM7YUFDakM7WUFFRCxLQUFLLElBQU0sbUJBQWlCLElBQUksSUFBSSxDQUFDLHdCQUF3QixFQUFFO2dCQUM3RCxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsbUJBQWlCLENBQUMsQ0FBQyxDQUFDO2FBQ3JGO1NBQ0Y7UUFFRCxJQUFJLENBQUMsd0JBQXdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFRCxxREFBWSxHQUFaLFVBQWEsYUFBNEIsRUFBRSxRQUF1QjtRQUN4RCxJQUFBLGlCQUFpQixHQUFLLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLGtCQUFsQyxDQUFtQztRQUU1RCxJQUFJLENBQUMsd0JBQXdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDNUUsSUFBSSxDQUFDLHdCQUF3QixDQUFDLGlCQUFpQixDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRDs7T0FFRztJQUNILG9EQUFXLEdBQVgsVUFBWSxLQUFvQjtRQUM5QixJQUFJLGlCQUFpQixDQUFDO1FBRXRCLElBQUksS0FBSyxDQUFDLEdBQUcsRUFBRTtZQUNiLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7U0FDM0Y7YUFBTTtZQUNMLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxNQUFNLElBQUksU0FBUyxDQUFDO1NBQy9DO1FBRUQsSUFBSSxDQUFDLHdCQUF3QixDQUFDLGlCQUFpQixDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXBFLG1EQUFtRDtRQUNuRCxJQUFJLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzlELElBQUksQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7WUFDdkYsT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUN6RDtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILDhDQUFLLEdBQUw7UUFDRSxLQUFLLElBQU0sVUFBVSxJQUFJLElBQUksQ0FBQyx3QkFBd0IsRUFBRTtZQUN0RCxJQUFJLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztTQUNqRjtRQUVELElBQUksQ0FBQyx3QkFBd0IsR0FBRyxFQUFFLENBQUM7SUFDckMsQ0FBQztJQUNILHFDQUFDO0FBQUQsQ0F2R0EsQUF1R0MsSUFBQTtBQXZHWSx3RUFBOEI7QUF5RzNDO0lBQTZDLDJDQUEwQjtJQUdyRSxpQ0FBWSxNQUE0QjtRQUE1Qix1QkFBQSxFQUFBLFdBQTRCO1FBQXhDLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBS2Q7UUFSTyxnQkFBVSxHQUFHLENBQUMsQ0FBQztRQUtyQixLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFFBQVEsRUFBRSwyQkFBMkI7U0FDdEMsRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQ2xCLENBQUM7SUFFRCwwQ0FBUSxHQUFSLFVBQVMsVUFBeUIsRUFBRSxXQUFrQjtRQUNwRCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFFbEIsSUFBSSxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2xCLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLElBQUksV0FBVyxFQUFFO2dCQUN4QyxtQkFBUSxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQzthQUN2RTtZQUVELG1CQUFRLENBQUMsa0JBQWtCLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ3REO1FBRUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsNkNBQVcsR0FBWCxVQUFZLGFBQTRCO1FBQ3RDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFTSx5Q0FBTyxHQUFkO1FBQ0UsT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBQ0gsOEJBQUM7QUFBRCxDQW5DQSxBQW1DQyxDQW5DNEMscUJBQVMsR0FtQ3JEO0FBbkNZLDBEQUF1Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDdnBCcEMseUNBQXNDO0FBR3RDLGtEQUF1RDtBQUV2RCw2Q0FBNEM7QUFFNUM7O0dBRUc7QUFDSDtJQUF1QyxxQ0FBUztJQUU5QywyQkFBWSxNQUErQjtRQUEvQix1QkFBQSxFQUFBLFdBQStCO1FBQTNDLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBTWQ7UUFKQyxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFVBQVUsRUFBRSxDQUFDLHNCQUFzQixDQUFDO1lBQ3BDLFNBQVMsRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDO1NBQ2hELEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztJQUNsQixDQUFDO0lBRUQscUNBQVMsR0FBVCxVQUFVLE1BQWlCLEVBQUUsU0FBNEI7UUFDdkQsaUJBQU0sU0FBUyxZQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVuQyxJQUFJLHFDQUFxQixDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUNILHdCQUFDO0FBQUQsQ0FoQkEsQUFnQkMsQ0FoQnNDLHFCQUFTLEdBZ0IvQztBQWhCWSw4Q0FBaUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1Y5Qix1RUFBc0c7QUFHdEcsZ0RBQStDO0FBRS9DOztHQUVHO0FBQ0g7SUFBOEMsNENBQXdCO0lBRXBFLGtDQUFZLE1BQXNDO1FBQWxELFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBS2Q7UUFIQyxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFVBQVUsRUFBRSxDQUFDLDZDQUE2QyxDQUFDO1NBQzVELEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztJQUNsQixDQUFDO0lBRUQsNENBQVMsR0FBVCxVQUFVLE1BQWlCLEVBQUUsU0FBNEI7UUFBekQsaUJBK0NDO1FBOUNDLGlCQUFNLFNBQVMsWUFBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztRQUU3RCxJQUFJLGtCQUFrQixHQUFHO1lBQ3ZCLElBQUksS0FBSSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLElBQUksS0FBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDbEcsS0FBSSxDQUFDLGtCQUFrQixDQUNyQixVQUFVLEdBQUcsS0FBSSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsS0FBSyxHQUFHLEtBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDM0c7aUJBQU07Z0JBQ0wsS0FBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO2FBQy9CO1FBQ0gsQ0FBQyxDQUFDO1FBRUYsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsVUFBQyxNQUFNLEVBQUUsR0FBVztZQUNoRCxLQUFJLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxVQUFDLE1BQU0sRUFBRSxRQUFRO1lBQ3hFLGtEQUFrRDtZQUNsRCxJQUFJLENBQUMsS0FBSSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ2pELGtEQUFrRDtnQkFDbEQsS0FBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNoRDtpQkFBTSxJQUFJLENBQUMsS0FBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDMUQsMkNBQTJDO2dCQUMzQyxLQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7YUFDdEQ7WUFDRCxLQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoQyxrQkFBa0IsRUFBRSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO1lBQ3pELGtCQUFrQixFQUFFLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQUM7UUFFSCxxQkFBcUI7UUFDckIsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNoRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzdEO0lBQ0gsQ0FBQztJQUNILCtCQUFDO0FBQUQsQ0ExREEsQUEwREMsQ0ExRDZDLG1EQUF3QixHQTBEckU7QUExRFksNERBQXdCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNSckMsdUVBQXNHO0FBR3RHLGdEQUErQztBQUUvQzs7R0FFRztBQUNIO0lBQWdELDhDQUF3QjtJQUV0RSxvQ0FBWSxNQUFzQztRQUFsRCxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQUtkO1FBSEMsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxVQUFVLEVBQUUsQ0FBQywrQ0FBK0MsQ0FBQztTQUM5RCxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7SUFDbEIsQ0FBQztJQUVELDhDQUFTLEdBQVQsVUFBVSxNQUFpQixFQUFFLFNBQTRCO1FBQXpELGlCQWdDQztRQS9CQyxpQkFBTSxTQUFTLFlBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRW5DLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRTlELElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLFVBQUMsTUFBTSxFQUFFLEdBQVc7WUFDaEQsS0FBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO1lBRW5ELGtEQUFrRDtZQUNsRCxJQUFJLENBQUMsS0FBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDbkQsa0RBQWtEO2dCQUNsRCxLQUFJLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUM5QztpQkFBTSxJQUFJLENBQUMsS0FBSSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ3hELDBDQUEwQztnQkFDMUMsS0FBSSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQzthQUN0RDtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsNkRBQTZEO1FBQzdELElBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxVQUFDLE1BQU0sRUFBRSxRQUFRO1lBQzFFLEtBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO1FBRUgscUJBQXFCO1FBQ3JCLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNsRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0Q7SUFDSCxDQUFDO0lBQ0gsaUNBQUM7QUFBRCxDQTNDQSxBQTJDQyxDQTNDK0MsbURBQXdCLEdBMkN2RTtBQTNDWSxnRUFBMEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1J2Qyx1RUFBc0c7QUFHdEcsZ0RBQStDO0FBRS9DOztHQUVHO0FBQ0g7SUFBNEMsMENBQXdCO0lBRWxFLGdDQUFZLE1BQXNDO1FBQWxELFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBS2Q7UUFIQyxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFVBQVUsRUFBRSxDQUFDLDJDQUEyQyxDQUFDO1NBQzFELEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztJQUNsQixDQUFDO0lBRUQsMENBQVMsR0FBVCxVQUFVLE1BQWlCLEVBQUUsU0FBNEI7UUFBekQsaUJBNEJDO1FBM0JDLGlCQUFNLFNBQVMsWUFBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMseUNBQXlDLENBQUMsQ0FBQyxDQUFDO1FBQ3JGLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsNENBQTRDLENBQUMsQ0FBQyxDQUFDO1FBQzNGLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZGLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsK0NBQStDLENBQUMsQ0FBQyxDQUFDO1FBRWpHLElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsVUFBQyxNQUFNLEVBQUUsUUFBUTtZQUN0RSxJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDcEIsS0FBSSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUM1RDtpQkFBTTtnQkFDTCxLQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDL0I7WUFFRCw0REFBNEQ7WUFDNUQsS0FBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxVQUFDLE1BQU0sRUFBRSxHQUFXO1lBQ2hELEtBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7UUFDakQsQ0FBQyxDQUFDLENBQUM7UUFFSCxxQkFBcUI7UUFDckIsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUM5QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzNEO0lBQ0gsQ0FBQztJQUNILDZCQUFDO0FBQUQsQ0F2Q0EsQUF1Q0MsQ0F2QzJDLG1EQUF3QixHQXVDbkU7QUF2Q1ksd0RBQXNCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNSbkMsdUVBQXNHO0FBR3RHLGdEQUErQztBQUUvQzs7R0FFRztBQUNIO0lBQXdDLHNDQUF3QjtJQUU5RCw0QkFBWSxNQUFzQztRQUFsRCxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQUtkO1FBSEMsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxVQUFVLEVBQUUsQ0FBQyx1Q0FBdUMsQ0FBQztTQUN0RCxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7SUFDbEIsQ0FBQztJQUVELHNDQUFTLEdBQVQsVUFBVSxNQUFpQixFQUFFLFNBQTRCO1FBQXpELGlCQStDQztRQTlDQyxpQkFBTSxTQUFTLFlBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRW5DLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7UUFFN0QsSUFBSSxrQkFBa0IsR0FBRztZQUN2QixJQUFJLEtBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEtBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUN0RixLQUFJLENBQUMsa0JBQWtCLENBQ3JCLFlBQVksR0FBRyxLQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsS0FBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDakc7aUJBQU07Z0JBQ0wsS0FBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO2FBQy9CO1FBQ0gsQ0FBQyxDQUFDO1FBRUYsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsVUFBQyxNQUFNLEVBQUUsR0FBVztZQUNoRCxLQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO1FBQzdDLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxVQUFDLE1BQU0sRUFBRSxRQUFRO1lBQ2xFLGtEQUFrRDtZQUNsRCxJQUFJLENBQUMsS0FBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQzNDLGtEQUFrRDtnQkFDbEQsS0FBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDMUM7aUJBQU0sSUFBSSxDQUFDLEtBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUNwRCwyQ0FBMkM7Z0JBQzNDLEtBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7YUFDaEQ7WUFDRCxLQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoQyxrQkFBa0IsRUFBRSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztZQUNuRCxrQkFBa0IsRUFBRSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO1FBRUgscUJBQXFCO1FBQ3JCLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDMUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN2RDtJQUNILENBQUM7SUFDSCx5QkFBQztBQUFELENBMURBLEFBMERDLENBMUR1QyxtREFBd0IsR0EwRC9EO0FBMURZLGdEQUFrQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDUi9CLHVFQUFzRztBQUd0RyxnREFBK0M7QUFFL0M7O0dBRUc7QUFDSDtJQUF5Qyx1Q0FBd0I7SUFFL0QsNkJBQVksTUFBc0M7UUFBbEQsWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FLZDtRQUhDLEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDckMsVUFBVSxFQUFFLENBQUMsd0NBQXdDLENBQUM7U0FDdkQsRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQ2xCLENBQUM7SUFFRCx1Q0FBUyxHQUFULFVBQVUsTUFBaUIsRUFBRSxTQUE0QjtRQUF6RCxpQkErQkM7UUE5QkMsaUJBQU0sU0FBUyxZQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVuQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLGdEQUFnRCxDQUFDLENBQUMsQ0FBQztRQUNyRyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsa0RBQWtELENBQUMsQ0FBQyxDQUFDO1FBQ3pHLElBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxvREFBb0QsQ0FBQyxDQUFDLENBQUM7UUFDN0csSUFBSSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLGtEQUFrRCxDQUFDLENBQUMsQ0FBQztRQUM3RyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLHVDQUF1QyxDQUFDLENBQUMsQ0FBQztRQUNuRixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLHdDQUF3QyxDQUFDLENBQUMsQ0FBQztRQUNyRixJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLDZDQUE2QyxDQUFDLENBQUMsQ0FBQztRQUUvRixJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFVBQUMsTUFBTSxFQUFFLFFBQVE7WUFDbkUsSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ3BCLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3pEO2lCQUFNO2dCQUNMLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMvQjtZQUVELDREQUE0RDtZQUM1RCxLQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLFVBQUMsTUFBTSxFQUFFLEdBQVc7WUFDaEQsS0FBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FBQztRQUVILHFCQUFxQjtRQUNyQixJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQzNDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDeEQ7SUFDSCxDQUFDO0lBQ0gsMEJBQUM7QUFBRCxDQTFDQSxBQTBDQyxDQTFDd0MsbURBQXdCLEdBMENoRTtBQTFDWSxrREFBbUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1JoQyx1RUFBc0c7QUFHdEcsZ0RBQStDO0FBRS9DOztHQUVHO0FBQ0g7SUFBMEMsd0NBQXdCO0lBRWhFLDhCQUFZLE1BQXNDO1FBQWxELFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBS2Q7UUFIQyxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFVBQVUsRUFBRSxDQUFDLHlDQUF5QyxDQUFDO1NBQ3hELEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztJQUNsQixDQUFDO0lBRUQsd0NBQVMsR0FBVCxVQUFVLE1BQWlCLEVBQUUsU0FBNEI7UUFBekQsaUJBK0JDO1FBOUJDLGlCQUFNLFNBQVMsWUFBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUVoRSxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxVQUFDLE1BQU0sRUFBRSxHQUFXO1lBQ2hELEtBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7WUFFN0Msa0RBQWtEO1lBQ2xELElBQUksQ0FBQyxLQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDN0Msa0RBQWtEO2dCQUNsRCxLQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUN4QztpQkFBTSxJQUFJLENBQUMsS0FBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ2xELDBDQUEwQztnQkFDMUMsS0FBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQzthQUNoRDtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsNkRBQTZEO1FBQzdELElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsVUFBQyxNQUFNLEVBQUUsUUFBUTtZQUNwRSxLQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztRQUVILHFCQUFxQjtRQUNyQixJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQzVDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDekQ7SUFDSCxDQUFDO0lBQ0gsMkJBQUM7QUFBRCxDQTFDQSxBQTBDQyxDQTFDeUMsbURBQXdCLEdBMENqRTtBQTFDWSxvREFBb0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1JqQyx1RUFBc0c7QUFHdEcsZ0RBQStDO0FBRS9DOztHQUVHO0FBQ0g7SUFBdUMscUNBQXdCO0lBRTdELDJCQUFZLE1BQXNDO1FBQWxELFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBS2Q7UUFIQyxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFVBQVUsRUFBRSxDQUFDLHNDQUFzQyxDQUFDO1NBQ3JELEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztJQUNsQixDQUFDO0lBRUQscUNBQVMsR0FBVCxVQUFVLE1BQWlCLEVBQUUsU0FBNEI7UUFBekQsaUJBK0JDO1FBOUJDLGlCQUFNLFNBQVMsWUFBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUVsRSxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFVBQUMsTUFBTSxFQUFFLFFBQVE7WUFDakUsSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ3BCLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3ZEO2lCQUFNO2dCQUNMLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMvQjtZQUVELDREQUE0RDtZQUM1RCxLQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLFVBQUMsTUFBTSxFQUFFLEdBQVc7WUFDaEQsS0FBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztRQUM1QyxDQUFDLENBQUMsQ0FBQztRQUVILHFCQUFxQjtRQUNyQixJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ3pDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdEQ7SUFDSCxDQUFDO0lBQ0gsd0JBQUM7QUFBRCxDQTFDQSxBQTBDQyxDQTFDc0MsbURBQXdCLEdBMEM5RDtBQTFDWSw4Q0FBaUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ045QiwwQ0FBdUM7QUFRdkM7O0lBRUk7QUFDSjtJQUE4Qyw0Q0FBUztJQU1yRCxrQ0FBWSxNQUFzQztRQUFsRCxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQUlkO1FBRkMsS0FBSSxDQUFDLGVBQWUsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDO1FBQzlDLEtBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQzs7SUFDaEMsQ0FBQztJQUVEOzs7T0FHRztJQUNPLHFEQUFrQixHQUE1QixVQUE2QixRQUFnQjtRQUMzQyxvQ0FBb0M7UUFDcEMsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUMvRCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztTQUM3QjtRQUVELCtFQUErRTtRQUMvRSxJQUFJLFFBQVEsRUFBRTtZQUNaLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNoRCxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDN0Q7SUFDSCxDQUFDO0lBQ0gsK0JBQUM7QUFBRCxDQTlCQSxBQThCQyxDQTlCNkMscUJBQVMsR0E4QnREO0FBOUJZLDREQUF3Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDWnJDLDBDQUF3RDtBQUN4RCxpQ0FBOEI7QUFFOUIsZ0RBQWdFO0FBTWhFO0lBQTJDLHlDQUEwQjtJQVFuRSwrQkFBWSxNQUFtQztRQUEvQyxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQVlkO1FBVkMsS0FBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzVCLEtBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztRQUN4QixLQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFFdEIsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFrQixNQUFNLEVBQUU7WUFDdEQsUUFBUSxFQUFFLFVBQVU7WUFDcEIsVUFBVSxFQUFFO2dCQUNWLEtBQUksQ0FBQyxNQUFNO2FBQ1o7U0FDRixFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7SUFDbEIsQ0FBQztJQUVTLDRDQUFZLEdBQXRCO1FBQ0UsSUFBSSxZQUFZLEdBQUcsSUFBSSxTQUFHLENBQUMsT0FBTyxFQUFFO1lBQ2xDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDcEIsT0FBTyxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDN0IsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHO1NBQ2hCLENBQUMsQ0FBQyxNQUFNLENBQ1AsSUFBSSxTQUFHLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQzdELElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQzVCLENBQUM7UUFFRixPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBQ0gsNEJBQUM7QUFBRCxDQW5DQSxBQW1DQyxDQW5DMEMscUJBQVMsR0FtQ25EO0FBbkNZLHNEQUFxQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDVmxDLG1EQUFnRDtBQUNoRCwwQ0FBd0Q7QUFDeEQseURBQTZEO0FBa0I3RDtJQWlCRTtRQUFBLGlCQW1CQztRQS9CTyxnQkFBVyxHQUFlO1lBQ2hDLFNBQVMsRUFBRSxJQUFJLHdCQUF3QixDQUFTLElBQUksQ0FBQztZQUNyRCxXQUFXLEVBQUUsSUFBSSx3QkFBd0IsQ0FBUyxJQUFJLENBQUM7WUFDdkQsVUFBVSxFQUFFLElBQUksd0JBQXdCLENBQVMsSUFBSSxDQUFDO1lBQ3RELFFBQVEsRUFBRSxJQUFJLHdCQUF3QixDQUFTLElBQUksQ0FBQztZQUNwRCxhQUFhLEVBQUUsSUFBSSx3QkFBd0IsQ0FBUyxJQUFJLENBQUM7WUFDekQsZUFBZSxFQUFFLElBQUksd0JBQXdCLENBQVMsSUFBSSxDQUFDO1lBQzNELGlCQUFpQixFQUFFLElBQUksd0JBQXdCLENBQVMsSUFBSSxDQUFDO1lBQzdELFdBQVcsRUFBRSxJQUFJLHdCQUF3QixDQUFTLElBQUksQ0FBQztZQUN2RCxhQUFhLEVBQUUsSUFBSSx3QkFBd0IsQ0FBUyxJQUFJLENBQUM7U0FDMUQsQ0FBQztRQUdBLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2dDQUV0RSxZQUFZO1lBQ25CLE9BQUssV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsVUFBQyxNQUFNLEVBQUUsUUFBUTtnQkFDbEUsSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUU7b0JBQ2QsS0FBSSxDQUFDLFlBQWEsQ0FBQyxZQUFZLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO2lCQUN6RDtxQkFBTTtvQkFDTCw4RkFBOEY7b0JBQzlGLE9BQWEsS0FBSSxDQUFDLFlBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztpQkFDL0M7Z0JBRUQsdURBQXVEO2dCQUN2RCxLQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDZCxDQUFDLENBQUMsQ0FBQzs7O1FBWEwsS0FBSyxJQUFJLFlBQVksSUFBSSxJQUFJLENBQUMsV0FBVztvQkFBaEMsWUFBWTtTQVlwQjtRQUVELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFTSx1Q0FBSyxHQUFaO1FBQ0UsS0FBSyxJQUFJLFlBQVksSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3pDLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDeEM7SUFDSCxDQUFDO0lBRUQsc0JBQVcsOENBQVM7YUFBcEI7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDO1FBQ3BDLENBQUM7OztPQUFBO0lBRUQsc0JBQVcsZ0RBQVc7YUFBdEI7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDO1FBQ3RDLENBQUM7OztPQUFBO0lBRUQsc0JBQVcsK0NBQVU7YUFBckI7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDO1FBQ3JDLENBQUM7OztPQUFBO0lBRUQsc0JBQVcsNkNBQVE7YUFBbkI7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDO1FBQ25DLENBQUM7OztPQUFBO0lBRUQsc0JBQVcsa0RBQWE7YUFBeEI7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDO1FBQ3hDLENBQUM7OztPQUFBO0lBRUQsc0JBQVcsb0RBQWU7YUFBMUI7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDO1FBQzFDLENBQUM7OztPQUFBO0lBRUQsc0JBQVcsc0RBQWlCO2FBQTVCO1lBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDO1FBQzVDLENBQUM7OztPQUFBO0lBRUQsc0JBQVcsZ0RBQVc7YUFBdEI7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDO1FBQ3RDLENBQUM7OztPQUFBO0lBRUQsc0JBQVcsa0RBQWE7YUFBeEI7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDO1FBQ3hDLENBQUM7OztPQUFBO0lBRUQ7O09BRUc7SUFDSSxzQ0FBSSxHQUFYO1FBQ0UsMkJBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVEOztPQUVHO0lBQ0ksc0NBQUksR0FBWDtRQUNFLElBQUksQ0FBQyxZQUFZLEdBQUcsMkJBQVksQ0FBQyxTQUFTLENBQW1CLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFekYsNEJBQTRCO1FBQzVCLEtBQUssSUFBSSxRQUFRLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUN0QyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssR0FBUyxJQUFJLENBQUMsWUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3ZFO0lBQ0gsQ0FBQztJQUNILDhCQUFDO0FBQUQsQ0FsR0EsQUFrR0MsSUFBQTtBQWxHWSwwREFBdUI7QUFvR3BDOzs7R0FHRztBQUNIO0lBQTZCLGtDQUEwQjtJQUF2RDs7SUFlQSxDQUFDO0lBWGUsdUJBQVEsR0FBdEI7UUFDRSxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRTtZQUM3QixjQUFjLENBQUMsU0FBUyxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7U0FDakQ7UUFFRCxPQUFPLGNBQWMsQ0FBQyxTQUFTLENBQUM7SUFDbEMsQ0FBQztJQUVNLGtDQUFTLEdBQWhCLFVBQWlCLFlBQW9CO1FBQ25DLE9BQU8saUJBQU0sU0FBUyxZQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFDSCxxQkFBQztBQUFELENBZkEsQUFlQyxDQWY0QixxQkFBUyxHQWVyQztBQUVEO0lBTUUsa0NBQVksT0FBZ0M7UUFDMUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDeEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGlDQUFlLEVBQXdELENBQUM7SUFDaEcsQ0FBQztJQUVNLHdDQUFLLEdBQVo7UUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDO0lBQzdCLENBQUM7SUFFTSx3Q0FBSyxHQUFaO1FBQ0UsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsc0JBQVcsMkNBQUs7YUFBaEI7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckIsQ0FBQzthQUVELFVBQWlCLEtBQVE7WUFDdkIsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxLQUFLLE1BQU0sRUFBRTtnQkFDakQsS0FBSyxHQUFHLElBQUksQ0FBQzthQUNkO1lBRUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7WUFDcEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QixDQUFDOzs7T0FUQTtJQVdTLGlEQUFjLEdBQXhCLFVBQXlCLEtBQVE7UUFDL0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsc0JBQVcsK0NBQVM7YUFBcEI7WUFDRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDcEMsQ0FBQzs7O09BQUE7SUFDSCwrQkFBQztBQUFELENBeENBLEFBd0NDLElBQUE7QUF4Q1ksNERBQXdCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM3SXJDLDBEQUF1RDtBQUl2RCxxRUFBa0U7QUFFbEUseURBQXNEO0FBQ3RELDZEQUEwRDtBQUMxRCwyREFBd0Q7QUFDeEQsK0RBQTREO0FBQzVELG1FQUFnRTtBQUNoRSx1RUFBb0U7QUFDcEUsMkVBQXdFO0FBQ3hFLCtEQUE0RDtBQUM1RCxtRUFBZ0U7QUFDaEUsNkVBQTBFO0FBRTFFLDhFQUEyRTtBQUMzRSwwREFBdUQ7QUFFdkQsZ0RBQStDO0FBTy9DO0lBQStDLDZDQUFpQjtJQUs5RCxtQ0FBWSxNQUF1QztRQUFuRCxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQThDZDtRQTVDQyxLQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDOUIsS0FBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBRTFDLElBQUksT0FBTyxHQUFHLElBQUksaURBQXVCLEVBQUUsQ0FBQztRQUU1QyxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFVBQVUsRUFBZ0M7Z0JBQ3hDLElBQUkscUNBQWlCLENBQUMsV0FBSSxDQUFDLFlBQVksQ0FBQyw4QkFBOEIsQ0FBQyxFQUFFLElBQUkscUNBQWlCLENBQUM7b0JBQzdGLE9BQU8sRUFBRSxLQUFJLENBQUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxPQUFPO2lCQUNoRCxDQUFDLENBQUM7Z0JBQ0gsSUFBSSxxQ0FBaUIsQ0FBQyxXQUFJLENBQUMsWUFBWSxDQUFDLGdDQUFnQyxDQUFDLEVBQUUsSUFBSSx5Q0FBbUIsQ0FBQztvQkFDakcsT0FBTyxFQUFFLEtBQUksQ0FBQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE9BQU87aUJBQ2hELENBQUMsQ0FBQztnQkFDSCxJQUFJLHFDQUFpQixDQUFDLFdBQUksQ0FBQyxZQUFZLENBQUMsK0JBQStCLENBQUMsRUFBRSxJQUFJLHVDQUFrQixDQUFDO29CQUMvRixPQUFPLEVBQUUsS0FBSSxDQUFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsT0FBTztpQkFDaEQsQ0FBQyxDQUFDO2dCQUNILElBQUkscUNBQWlCLENBQUMsV0FBSSxDQUFDLFlBQVksQ0FBQyxpQ0FBaUMsQ0FBQyxFQUFFLElBQUksMkNBQW9CLENBQUM7b0JBQ25HLE9BQU8sRUFBRSxLQUFJLENBQUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxPQUFPO2lCQUNoRCxDQUFDLENBQUM7Z0JBQ0gsSUFBSSxxQ0FBaUIsQ0FBQyxXQUFJLENBQUMsWUFBWSxDQUFDLGtDQUFrQyxDQUFDLEVBQUUsSUFBSSwrQ0FBc0IsQ0FBQztvQkFDdEcsT0FBTyxFQUFFLEtBQUksQ0FBQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE9BQU87aUJBQ2hELENBQUMsQ0FBQztnQkFDSCxJQUFJLHFDQUFpQixDQUFDLFdBQUksQ0FBQyxZQUFZLENBQUMscUNBQXFDLENBQUMsRUFBRSxJQUFJLG1EQUF3QixDQUFDO29CQUMzRyxPQUFPLEVBQUUsS0FBSSxDQUFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsT0FBTztpQkFDaEQsQ0FBQyxDQUFDO2dCQUNILElBQUkscUNBQWlCLENBQUMsV0FBSSxDQUFDLFlBQVksQ0FBQyx1Q0FBdUMsQ0FBQyxFQUFFLElBQUksdURBQTBCLENBQUM7b0JBQy9HLE9BQU8sRUFBRSxLQUFJLENBQUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxPQUFPO2lCQUNoRCxDQUFDLENBQUM7Z0JBQ0gsSUFBSSxxQ0FBaUIsQ0FBQyxXQUFJLENBQUMsWUFBWSxDQUFDLGlDQUFpQyxDQUFDLEVBQUUsSUFBSSwyQ0FBb0IsQ0FBQztvQkFDbkcsT0FBTyxFQUFFLEtBQUksQ0FBQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE9BQU87aUJBQ2hELENBQUMsQ0FBQztnQkFDSCxJQUFJLHFDQUFpQixDQUFDLFdBQUksQ0FBQyxZQUFZLENBQUMsbUNBQW1DLENBQUMsRUFBRSxJQUFJLCtDQUFzQixDQUFDO29CQUN2RyxPQUFPLEVBQUUsS0FBSSxDQUFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsT0FBTztpQkFDaEQsQ0FBQyxDQUFDO2dCQUNILElBQUkscUNBQWlCLENBQUMsSUFBSSx5REFBMkIsQ0FBQztvQkFDcEQsU0FBUyxFQUFFLEtBQUksQ0FBQyxhQUFhO29CQUM3QixJQUFJLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7aUJBQ2hDLENBQUMsRUFBRSxJQUFJLHlEQUEyQixDQUFDO29CQUNsQyxlQUFlLEVBQUUsT0FBTztpQkFDekIsQ0FBQyxFQUFFO29CQUNGLElBQUksRUFBRSxTQUFTO2lCQUNoQixDQUFDO2FBQ0g7U0FDRixFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7SUFDbEIsQ0FBQztJQUVELDZDQUFTLEdBQVQsVUFBVSxNQUFpQixFQUFFLFNBQTRCO1FBQXpELGlCQVVDO1FBVEMsaUJBQU0sU0FBUyxZQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVuQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQztZQUN0QixLQUFJLENBQUMsT0FBTyxDQUFDLDBCQUEwQixFQUFFLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQztZQUN4QixLQUFJLENBQUMsT0FBTyxDQUFDLDBCQUEwQixFQUFFLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0gsZ0NBQUM7QUFBRCxDQWpFQSxBQWlFQyxDQWpFOEMscUNBQWlCLEdBaUUvRDtBQWpFWSw4REFBeUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3pCdEMsb0NBQStDO0FBRS9DLGdEQUErQztBQU0vQzs7R0FFRztBQUNIO0lBQWlELCtDQUFvQjtJQUVuRSxxQ0FBWSxNQUF5QztRQUFyRCxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQU1kO1FBSkMsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxRQUFRLEVBQUUsZ0NBQWdDO1lBQzFDLElBQUksRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQztTQUNqQyxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7SUFDbEIsQ0FBQztJQUVELCtDQUFTLEdBQVQsVUFBVSxNQUFpQixFQUFFLFNBQTRCO1FBQXpELGlCQU1DO1FBTEMsaUJBQU0sU0FBUyxZQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVuQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztZQUNlLEtBQUksQ0FBQyxNQUFPLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzNFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNILGtDQUFDO0FBQUQsQ0FsQkEsQUFrQkMsQ0FsQmdELGVBQU0sR0FrQnREO0FBbEJZLGtFQUEyQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDYnhDLHVFQUFzRztBQUd0RyxnREFBK0M7QUFFL0M7O0dBRUc7QUFDSDtJQUEwQyx3Q0FBd0I7SUFFaEUsOEJBQVksTUFBc0M7UUFBbEQsWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FLZDtRQUhDLEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDckMsVUFBVSxFQUFFLENBQUMseUNBQXlDLENBQUM7U0FDeEQsRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQ2xCLENBQUM7SUFFRCx3Q0FBUyxHQUFULFVBQVUsTUFBaUIsRUFBRSxTQUE0QjtRQUF6RCxpQkFpREM7UUFoREMsaUJBQU0sU0FBUyxZQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVuQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO1FBQzNELElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1FBSTdELElBQUksa0JBQWtCLEdBQUc7WUFDdkIsSUFBSSxLQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxLQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDMUYsS0FBSSxDQUFDLGtCQUFrQixDQUNyQixjQUFjLEdBQUcsS0FBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsS0FBSyxHQUFHLEtBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3ZHO2lCQUFNO2dCQUNMLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMvQjtRQUNILENBQUMsQ0FBQztRQUVGLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLFVBQUMsTUFBTSxFQUFFLEdBQVc7WUFDaEQsS0FBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztRQUMvQyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsVUFBQyxNQUFNLEVBQUUsUUFBUTtZQUNwRSxrREFBa0Q7WUFDbEQsSUFBSSxDQUFDLEtBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUM3QyxrREFBa0Q7Z0JBQ2xELEtBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQzVDO2lCQUFNLElBQUksQ0FBQyxLQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDdEQsMkNBQTJDO2dCQUMzQyxLQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO2FBQ2xEO1lBQ0QsS0FBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEMsa0JBQWtCLEVBQUUsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7WUFDckQsa0JBQWtCLEVBQUUsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQztRQUVILHFCQUFxQjtRQUNyQixJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQzVDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDekQ7SUFDSCxDQUFDO0lBQ0gsMkJBQUM7QUFBRCxDQTVEQSxBQTREQyxDQTVEeUMsbURBQXdCLEdBNERqRTtBQTVEWSxvREFBb0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1JqQyx1RUFBc0c7QUFHdEcsZ0RBQStDO0FBRS9DOztHQUVHO0FBQ0g7SUFBNEMsMENBQXdCO0lBRWxFLGdDQUFZLE1BQXNDO1FBQWxELFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBS2Q7UUFIQyxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFVBQVUsRUFBRSxDQUFDLDJDQUEyQyxDQUFDO1NBQzFELEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztJQUNsQixDQUFDO0lBRUQsMENBQVMsR0FBVCxVQUFVLE1BQWlCLEVBQUUsU0FBNEI7UUFBekQsaUJBZ0NDO1FBL0JDLGlCQUFNLFNBQVMsWUFBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFOUQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsVUFBQyxNQUFNLEVBQUUsR0FBVztZQUNoRCxLQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO1lBRS9DLGtEQUFrRDtZQUNsRCxJQUFJLENBQUMsS0FBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQy9DLGtEQUFrRDtnQkFDbEQsS0FBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDMUM7aUJBQU0sSUFBSSxDQUFDLEtBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUNwRCwwQ0FBMEM7Z0JBQzFDLEtBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7YUFDbEQ7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILDZEQUE2RDtRQUM3RCxJQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFVBQUMsTUFBTSxFQUFFLFFBQVE7WUFDdEUsS0FBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxxQkFBcUI7UUFDckIsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUM5QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzNEO0lBQ0gsQ0FBQztJQUNILDZCQUFDO0FBQUQsQ0EzQ0EsQUEyQ0MsQ0EzQzJDLG1EQUF3QixHQTJDbkU7QUEzQ1ksd0RBQXNCOzs7Ozs7QUNObkMsOEJBQTZCO0FBSTdCLDhDQUE2QztBQUM3QyxzQ0FBcUM7QUFTckM7SUFTRSxnQ0FBWSxNQUFxQixFQUFFLGVBQTZCLEVBQUUsZ0JBQXFCO1FBQ3JGLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztRQUN6QyxJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRU0sMkNBQVUsR0FBakIsVUFBa0IsTUFBaUIsRUFBRSxTQUE0QjtRQUMvRCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRU8saURBQWdCLEdBQXhCO1FBQUEsaUJBcUJDO1FBcEJDLCtCQUErQjtRQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLGNBQU0sT0FBQSxLQUFJLENBQUMsWUFBWSxFQUFFLEVBQW5CLENBQW1CLENBQUMsQ0FBQztRQUMxRixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLGNBQU0sT0FBQSxLQUFJLENBQUMsWUFBWSxFQUFFLEVBQW5CLENBQW1CLENBQUMsQ0FBQztRQUMxRixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsZUFBZSxFQUFFLGNBQU0sT0FBQSxLQUFJLENBQUMsYUFBYSxFQUFFLEVBQXBCLENBQW9CLENBQUMsQ0FBQztRQUM1RixzREFBc0Q7UUFDdEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxjQUFNLE9BQUEsS0FBSSxDQUFDLGdCQUFnQixFQUFFLEVBQXZCLENBQXVCLENBQUMsQ0FBQztRQUU3RixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFO1lBQzNELElBQUksS0FBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRTtnQkFDeEIsb0RBQW9EO2dCQUNwRCxLQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLGNBQU0sT0FBQSxLQUFJLENBQUMsYUFBYSxFQUFFLEVBQXBCLENBQW9CLENBQUMsQ0FBQztnQkFDeEYsK0RBQStEO2dCQUMvRCxLQUFJLENBQUMsbUNBQW1DLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxhQUFhLEVBQUUsRUFBcEIsQ0FBb0IsQ0FBQyxDQUFDO2FBQ3RFO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsYUFBYSxFQUFFLEVBQXBCLENBQW9CLENBQUMsQ0FBQztRQUNsRixJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxhQUFhLEVBQUUsRUFBcEIsQ0FBb0IsQ0FBQyxFQUFuRixDQUFtRixDQUFDLENBQUM7UUFFOUgsMEJBQTBCO1FBQzFCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRU0sb0RBQW1CLEdBQTFCLFVBQTJCLFVBQWtCO1FBQzNDLElBQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBRWhELElBQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFVBQUEsTUFBTTtZQUNyRCxJQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztZQUN4QywwQkFBMEI7WUFDMUIsSUFBTSxtQkFBbUIsR0FDdkIsV0FBVztnQkFDWCxVQUFVLElBQUksTUFBTSxDQUFDLFFBQVEsR0FBRyxhQUFhO2dCQUM3QyxVQUFVLElBQUksTUFBTSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQztZQUVsRSwwQkFBMEI7WUFDMUIsSUFBTSxtQkFBbUIsR0FDdkIsVUFBVSxJQUFJLE1BQU0sQ0FBQyxRQUFRLEdBQUcsYUFBYTtnQkFDN0MsVUFBVSxJQUFJLE1BQU0sQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDO1lBRWhELE9BQU8sbUJBQW1CLElBQUksbUJBQW1CLENBQUM7UUFDcEQsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLGNBQWMsSUFBSSxJQUFJLENBQUM7SUFDaEMsQ0FBQztJQUVPLDZDQUFZLEdBQXBCO1FBQ0UsSUFBSSxDQUFDLGVBQWUsR0FBRyxFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFTyx1REFBc0IsR0FBOUIsVUFBK0IsTUFBc0I7UUFDbkQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBQSxPQUFPLElBQUksT0FBQSxNQUFNLEtBQUssT0FBTyxFQUFsQixDQUFrQixDQUFDLENBQUM7SUFDbEksQ0FBQztJQUVPLHFEQUFvQixHQUE1QjtRQUFBLGlCQVFDO1FBUEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxVQUFBLGFBQWE7WUFDOUQsSUFBTSxjQUFjLEdBQUcsS0FBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFBLE9BQU8sSUFBSSxPQUFBLGFBQWEsQ0FBQyxNQUFNLEtBQUssT0FBTyxFQUFoQyxDQUFnQyxDQUFDLENBQUM7WUFDckgsSUFBSSxDQUFDLGNBQWMsRUFBRTtnQkFDbkIsS0FBSSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQ3pDO1lBQ0QsT0FBTyxjQUFjLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sb0RBQW1CLEdBQTNCLFVBQTRCLE1BQXFCO1FBQy9DLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUNsQixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUVPLDhDQUFhLEdBQXJCO1FBQUEsaUJBNkJDO1FBNUJDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUN0RCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDcEIsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFBLE1BQU07WUFDbEQsSUFBQSxLQUFxQyxrQkFBa0IsQ0FBQyxLQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxFQUExRSxjQUFjLG9CQUFBLEVBQUUsY0FBYyxvQkFBNEMsQ0FBQztZQUVuRixJQUFJLGtCQUFrQixDQUFDLGNBQWMsRUFBRSxjQUFjLENBQUMsRUFBRTtnQkFDdEQsS0FBSSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3JDO2lCQUFNLElBQUksY0FBYyxJQUFJLEdBQUcsRUFBRTtnQkFDaEMsSUFBTSxjQUFjLEdBQUcsS0FBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBQSxhQUFhLElBQUksT0FBQSxhQUFhLENBQUMsTUFBTSxLQUFLLE1BQU0sRUFBL0IsQ0FBK0IsQ0FBQyxDQUFDO2dCQUVuRyxJQUFJLGNBQWMsRUFBRTtvQkFDbEIsY0FBYyxDQUFDLFFBQVEsR0FBRyxjQUFjLENBQUM7b0JBQ3pDLGNBQWMsQ0FBQyxRQUFRLEdBQUcsY0FBYyxDQUFDO29CQUV6QyxLQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2lCQUN0QztxQkFBTTtvQkFDTCxJQUFNLFNBQVMsR0FBa0IsRUFBRSxNQUFNLFFBQUEsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUUsQ0FBQztvQkFDaEcsS0FBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7b0JBRXJDLEtBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7aUJBQ2pDO2FBQ0Y7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyx1REFBc0IsR0FBOUIsVUFBK0IsTUFBcUI7UUFDbEQsSUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBRTlDLElBQU0sWUFBWSxHQUFHLENBQUMsY0FBYyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFGLElBQU0sYUFBYSxHQUF1QztZQUN4RCxXQUFXLEVBQUUscUJBQWMsWUFBWSxRQUFLO1NBQzdDLENBQUM7UUFFRixJQUFJLE1BQU0sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZCLElBQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDekUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLFVBQUcsYUFBYSxPQUFJLENBQUM7U0FDL0M7UUFFRCxPQUFPLGFBQWEsQ0FBQztJQUN2QixDQUFDO0lBRU8sZ0RBQWUsR0FBdkIsVUFBd0IsTUFBcUI7UUFDM0MsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVPLGdEQUFlLEdBQXZCLFVBQXdCLE1BQXFCO1FBQTdDLGlCQXlCQztRQXhCQyxJQUFNLGFBQWEsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQzthQUM1RSxHQUFHLENBQUMsVUFBQSxRQUFRLElBQUksT0FBQSxLQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUF4QixDQUF3QixDQUFDLENBQUM7UUFFN0MsSUFBTSxhQUFhLEdBQUcsSUFBSSxTQUFHLENBQUMsS0FBSyxFQUFFO1lBQ25DLE9BQU8sRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztZQUNoQyxrQkFBa0IsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDOUMsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQ2pELENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFFNUMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUMxQixJQUFNLFdBQVcsR0FBRztnQkFDbEIsY0FBWSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3hCLENBQUMsQ0FBQztZQUVGLElBQU0sY0FBWSxHQUFHLElBQUksU0FBRyxDQUFDLEtBQUssRUFBRTtnQkFDbEMsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUM7Z0JBQy9DLEtBQUssRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVE7YUFDOUIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFFNUIsYUFBYSxDQUFDLE1BQU0sQ0FBQyxjQUFZLENBQUMsQ0FBQztTQUNwQztRQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsYUFBYSxDQUFDO1FBQy9CLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVPLGlEQUFnQixHQUF4QjtRQUFBLGlCQVFDO1FBUEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsVUFBQSxNQUFNO1lBQ2pDLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRTtnQkFDbEIsS0FBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUM5QjtpQkFBTTtnQkFDTCxLQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzlCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sb0VBQW1DLEdBQTNDLFVBQ0UsT0FBbUI7UUFEckIsaUJBZUM7UUFaQyxtRUFBbUU7UUFDbkUsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksaUJBQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRS9ELElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDckQsSUFBSSxLQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLEtBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLEdBQUcsQ0FBQyxFQUFFO2dCQUM3RCxLQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDckM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILHFGQUFxRjtRQUNyRixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLGNBQU0sT0FBQSxLQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxFQUFFLEVBQW5DLENBQW1DLENBQUMsQ0FBQztRQUNoRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLGNBQU0sT0FBQSxLQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxFQUFFLEVBQW5DLENBQW1DLENBQUMsQ0FBQztJQUNyRyxDQUFDO0lBRVMsMENBQVMsR0FBbkIsVUFBb0IsWUFBb0I7UUFDdEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxHQUFHLEdBQUcsWUFBWSxDQUFDO0lBQ3BELENBQUM7SUFDSCw2QkFBQztBQUFELENBeE1BLEFBd01DLElBQUE7QUF4TVksd0RBQXNCO0FBME1uQyxTQUFTLGtCQUFrQixDQUFDLE1BQWlCLEVBQUUsTUFBc0I7SUFDbkUsSUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXJDLElBQU0sY0FBYyxHQUFHLEdBQUcsR0FBRyxRQUFRLEdBQUcsYUFBYSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxzQ0FBc0M7SUFDdkgsSUFBSSxjQUFjLEdBQUcsR0FBRyxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO0lBRXRELElBQUksY0FBYyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRTtRQUNoRCwrREFBK0Q7UUFDL0QsY0FBYyxHQUFHLGNBQWMsR0FBRyxjQUFjLENBQUM7S0FDbEQ7SUFFRCxJQUFJLEdBQUcsR0FBRyxjQUFjLEdBQUcsY0FBYyxFQUFFO1FBQ3pDLHlDQUF5QztRQUN6QyxjQUFjLEdBQUcsR0FBRyxHQUFHLGNBQWMsQ0FBQztLQUN2QztJQUVELE9BQU8sRUFBRSxjQUFjLGdCQUFBLEVBQUUsY0FBYyxnQkFBQSxFQUFFLENBQUM7QUFDNUMsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLE1BQXNCLEVBQUUsTUFBaUIsRUFBRSxRQUFnQjtJQUNoRixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ3BCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQztLQUNwQjtJQUVELE9BQU8sUUFBUSxHQUFHLENBQUMseUJBQVcsQ0FBQyw4QkFBOEIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNGLENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxNQUFpQjtJQUNwQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ3BCLE9BQU8sTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO0tBQzdCO0lBQ0ssSUFBQSxLQUFpQix5QkFBVyxDQUFDLDhCQUE4QixDQUFDLE1BQU0sQ0FBQyxFQUFqRSxLQUFLLFdBQUEsRUFBRSxHQUFHLFNBQXVELENBQUM7SUFFMUUsT0FBTyxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ3JCLENBQUM7QUFFRCxTQUFTLGtCQUFrQixDQUFDLGNBQXNCLEVBQUUsY0FBc0I7SUFDeEUsT0FBTyxDQUFDLGNBQWMsR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksY0FBYyxHQUFHLENBQUMsQ0FBQztBQUM3RSxDQUFDO0FBRUQsU0FBUyxvQkFBb0IsQ0FBQyxNQUFpQixFQUFFLFNBQTRCO0lBQzNFLGtFQUFrRTtJQUNsRSxrSEFBa0g7SUFDbEgsSUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLFdBQVcsRUFBRSxLQUFLLFFBQVEsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDNUUsSUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUVyRSxPQUFPLGNBQWMsSUFBSSxVQUFVLENBQUM7QUFDdEMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDelFELHlDQUF1RDtBQUV2RCxpREFBb0U7QUFlcEU7O0dBRUc7QUFDSDtJQUE4Qiw0QkFBeUI7SUFFckQsa0JBQVksTUFBMkI7UUFBM0IsdUJBQUEsRUFBQSxXQUEyQjtRQUF2QyxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQVdkO1FBVEMsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxRQUFRLEVBQUUsYUFBYTtZQUN2QixNQUFNLEVBQUUsSUFBSTtZQUNaLFVBQVUsRUFBRTtnQkFDVixJQUFJLDZCQUFhLENBQUMsRUFBRSxPQUFPLEVBQUUsb0NBQW9CLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQzFELElBQUksNkJBQWEsQ0FBQyxFQUFFLE9BQU8sRUFBRSxvQ0FBb0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUNqRTtZQUNELHlCQUF5QixFQUFFLEtBQUs7U0FDakMsRUFBa0IsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztJQUNsQyxDQUFDO0lBRUQsNEJBQVMsR0FBVCxVQUFVLE1BQWlCLEVBQUUsU0FBNEI7UUFBekQsaUJBbURDO1FBbERDLGlCQUFNLFNBQVMsWUFBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFbkMsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzlCLElBQUksYUFBYSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3JDLElBQUksZUFBZSxHQUFHLElBQUksQ0FBQyxDQUFDLG9EQUFvRDtRQUVoRixJQUFJLG9DQUFvQyxHQUFHO1lBQ3pDLGVBQWUsR0FBRyxLQUFLLENBQUM7WUFFeEIsa0ZBQWtGO1lBQ2xGLEtBQXNCLFVBQW9CLEVBQXBCLEtBQUEsS0FBSSxDQUFDLGFBQWEsRUFBRSxFQUFwQixjQUFvQixFQUFwQixJQUFvQixFQUFFO2dCQUF2QyxJQUFJLFNBQVMsU0FBQTtnQkFDaEIsSUFBSSxTQUFTLFlBQVksNkJBQWEsRUFBRTtvQkFDdEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsRUFBRTt3QkFDeEIsZUFBZSxHQUFHLElBQUksQ0FBQzt3QkFDdkIsTUFBTTtxQkFDUDtpQkFDRjthQUNGO1lBRUQsSUFBSSxLQUFJLENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ2xCLHFGQUFxRjtnQkFDckYsSUFBSSxNQUFNLENBQUMseUJBQXlCLElBQUksQ0FBQyxlQUFlLEVBQUU7b0JBQ3hELEtBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztpQkFDYjthQUNGO2lCQUFNLElBQUksYUFBYSxFQUFFO2dCQUN4Qix3REFBd0Q7Z0JBQ3hELEtBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNiO1FBQ0gsQ0FBQyxDQUFDO1FBRUYsd0dBQXdHO1FBQ3hHLEtBQXNCLFVBQW9CLEVBQXBCLEtBQUEsSUFBSSxDQUFDLGFBQWEsRUFBRSxFQUFwQixjQUFvQixFQUFwQixJQUFvQixFQUFFO1lBQXZDLElBQUksU0FBUyxTQUFBO1lBQ2hCLElBQUksU0FBUyxZQUFZLDZCQUFhLEVBQUU7Z0JBQ3RDLFNBQVMsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7YUFDekU7U0FDRjtRQUVELFNBQVMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDO1lBQ2pDLGFBQWEsR0FBRyxJQUFJLENBQUM7WUFDckIsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLHlCQUF5QixJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUU7Z0JBQzNELEtBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNiO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQztZQUNqQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1lBQ3RCLEtBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLG9DQUFvQyxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUNILGVBQUM7QUFBRCxDQXBFQSxBQW9FQyxDQXBFNkIscUJBQVMsR0FvRXRDO0FBcEVZLDRCQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNwQnJCLG1DQUE4QztBQUM5QyxzREFBa0U7QUF3Q2xFOztHQUVHO0FBQ0g7SUFBcUUsZ0NBQWM7SUFVakYsc0JBQVksTUFBYztRQUExQixZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQWFkO1FBcEJPLHdCQUFrQixHQUFHO1lBQzNCLFFBQVEsRUFBRSxJQUFJLGlDQUFlLEVBQWdDO1lBQzdELFVBQVUsRUFBRSxJQUFJLGlDQUFlLEVBQWdDO1lBQy9ELFdBQVcsRUFBRSxJQUFJLGlDQUFlLEVBQWdDO1NBQ2pFLENBQUM7UUFLQSxJQUFNLGFBQWEsR0FBdUI7WUFDeEMsUUFBUSxFQUFFLGlCQUFpQjtZQUMzQixPQUFPLEVBQUUsSUFBSTtZQUNiLFFBQVEsRUFBRSxLQUFLO1NBQ2hCLENBQUM7UUFFRixJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUU7WUFDdEIsTUFBTSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO1NBQ3ZDO1FBRUQsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxhQUF1QixFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7SUFDL0UsQ0FBQztJQUVELGdDQUFTLEdBQVQsVUFBVSxNQUFpQixFQUFFLFNBQTRCO1FBQ3ZELGlCQUFNLFNBQVMsWUFBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDbkMsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQ7O09BRUc7SUFDSCx5QkFBRSxHQUFGO1FBQ0UsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDaEIsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBRWhDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNsRSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFFOUQsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUV2QixJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUVwQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFO2dCQUMzQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDNUM7U0FDRjtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILDBCQUFHLEdBQUg7UUFDRSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNmLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUVoQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUNyQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDakUsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBRS9ELElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUNyQixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUV4QixJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUVyQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFO2dCQUM1QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDN0M7U0FDRjtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILDZCQUFNLEdBQU47UUFDRSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNmLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUNaO2FBQU07WUFDTCxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7U0FDWDtJQUNILENBQUM7SUFFRDs7O09BR0c7SUFDSCwyQkFBSSxHQUFKO1FBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7O09BR0c7SUFDSCw0QkFBSyxHQUFMO1FBQ0UsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRVMsbUNBQVksR0FBdEI7UUFDRSxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUVyQixzREFBc0Q7UUFDdEQsb0VBQW9FO1FBQ3BFLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRVMsb0NBQWEsR0FBdkI7UUFDRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRVMsc0NBQWUsR0FBekI7UUFDRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRVMsdUNBQWdCLEdBQTFCO1FBQ0UsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckQsQ0FBQztJQU1ELHNCQUFJLGtDQUFRO1FBSlo7OztXQUdHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDckQsQ0FBQzs7O09BQUE7SUFNRCxzQkFBSSxvQ0FBVTtRQUpkOzs7V0FHRzthQUNIO1lBQ0UsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3ZELENBQUM7OztPQUFBO0lBTUQsc0JBQUkscUNBQVc7UUFKZjs7O1dBR0c7YUFDSDtZQUNFLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN4RCxDQUFDOzs7T0FBQTtJQUNILG1CQUFDO0FBQUQsQ0FsSkEsQUFrSkMsQ0FsSm9FLGVBQU0sR0FrSjFFO0FBbEpZLG9DQUFZOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM1Q3pCLHlDQUF1RDtBQUN2RCw4QkFBMkI7QUFFM0I7O0dBRUc7QUFDSDtJQUFtQyxpQ0FBMEI7SUFlM0QsdUJBQVksTUFBNEI7UUFBNUIsdUJBQUEsRUFBQSxXQUE0QjtRQUF4QyxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQUtkO1FBZk8saUJBQVcsR0FBRyxHQUFHLENBQUM7UUFDbEIsa0JBQVksR0FBRyxFQUFFLENBQUM7UUFDbEIsd0JBQWtCLEdBQUcsRUFBRSxDQUFDO1FBQ3hCLHFCQUFlLEdBQVcsQ0FBQyxDQUFDO1FBQzVCLG1CQUFhLEdBQVcsRUFBRSxDQUFDO1FBQzNCLHVCQUFpQixHQUFZLENBQUMsQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUM7UUFPbEUsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxRQUFRLEVBQUUsa0JBQWtCO1NBQzdCLEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztJQUNsQixDQUFDO0lBRVMsb0NBQVksR0FBdEI7UUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxTQUFHLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVELDZCQUFLLEdBQUw7UUFDRSxJQUFJLENBQUMsYUFBYSxHQUFzQixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyx1QkFBdUIsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDbEQsSUFBSSxDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUM7UUFFekIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUM1QyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBRTlDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsNEJBQUksR0FBSjtRQUNFLElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQzFCLG9CQUFvQixDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1NBQ2pEO2FBQU07WUFDTCxZQUFZLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7U0FDekM7SUFDSCxDQUFDO0lBRU8sbUNBQVcsR0FBbkI7UUFDRSx1RUFBdUU7UUFFdkUsSUFBSSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNwRSwwQ0FBMEM7WUFDMUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFDMUIsT0FBTztTQUNSO1FBRUQsSUFBSSxrQkFBa0IsQ0FBQztRQUN2QixJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ25DLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7UUFFckMsaUJBQWlCO1FBQ2pCLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUUvRSwwQkFBMEI7UUFDMUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFlBQVksRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNyQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNwQyxrQkFBa0IsR0FBRyxDQUFDLFdBQVcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDbkQsVUFBVSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUM7Z0JBQzFELElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyx1QkFBdUIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtvQkFDbEcsVUFBVSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLElBQUksQ0FBQztpQkFDN0M7Z0JBQ0QsVUFBVSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7Z0JBQzlFLFVBQVUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2dCQUM5RSxVQUFVLENBQUMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQzthQUM5QztTQUNGO1FBRUQsMEJBQTBCO1FBQzFCLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFbEQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzVDLElBQUksQ0FBQyx1QkFBdUIsSUFBSSxDQUFDLENBQUM7UUFDbEMsSUFBSSxJQUFJLENBQUMsdUJBQXVCLEdBQUcsWUFBWSxFQUFFO1lBQy9DLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxDQUFDLFlBQVksQ0FBQztTQUM5QztRQUVELElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFTywwQ0FBa0IsR0FBMUI7UUFDRSxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUMxQixJQUFJLENBQUMsb0JBQW9CLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDdkY7YUFBTTtZQUNMLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNoRztJQUNILENBQUM7SUFDSCxvQkFBQztBQUFELENBaEdBLEFBZ0dDLENBaEdrQyxxQkFBUyxHQWdHM0M7QUFoR1ksc0NBQWE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ04xQix5Q0FBdUQ7QUFFdkQsOEJBQTJCO0FBQzNCLHNDQUFtQztBQUNuQyw4Q0FBMkM7QUFDM0Msc0RBQXNFO0FBRXRFLDZDQUE0QztBQXdCNUM7OztHQUdHO0FBQ0g7SUFBaUMsK0JBQTRCO0lBbUIzRCxxQkFBWSxNQUF5QjtRQUFyQyxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQVVkO1FBZE0sWUFBTSxHQUFlLGNBQU8sQ0FBQyxDQUFDO1FBQzlCLFlBQU0sR0FBZSxjQUFPLENBQUMsQ0FBQztRQUtuQyxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFxQjtZQUN4RCxRQUFRLEVBQUUsZ0JBQWdCO1lBQzFCLElBQUksRUFBRSxRQUFRO1lBQ2QsU0FBUyxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDO1lBQ3RDLFNBQVMsRUFBRSxJQUFJO1NBQ2hCLEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWhCLEtBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLGlDQUFlLEVBQXdDLENBQUM7O0lBQ3ZGLENBQUM7SUFFRCwrQkFBUyxHQUFULFVBQVUsTUFBaUIsRUFBRSxTQUE0QjtRQUN2RCxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFaEMsSUFBSSxNQUFNLENBQUMsMEJBQTBCLEVBQUU7WUFDckMsSUFBSSxDQUFDLDBCQUEwQixHQUFHLElBQUksU0FBRyxDQUFDLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1NBQzlFO2FBQU07WUFDTCxJQUFJLENBQUMsMEJBQTBCLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ3hEO1FBRUQsaUJBQU0sU0FBUyxZQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVuQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVPLHlDQUFtQixHQUEzQixVQUE0QixNQUFpQixFQUFFLFNBQTRCO1FBQTNFLGlCQStIQztRQTlIQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFOUIsSUFBSSxNQUFNLENBQUMsU0FBUyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQzNCLFNBQVMsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLGNBQU0sT0FBQSxTQUFTLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsRUFBdkMsQ0FBdUMsQ0FBQyxDQUFDO1lBQ2hGLE9BQU87U0FDUjtRQUVELElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN0QixJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLElBQUksV0FBb0MsQ0FBQztRQUV6QyxJQUFNLGVBQWUsR0FBRztZQUN0QixPQUFPLE1BQU0sQ0FBQyx5QkFBeUIsSUFBSSxNQUFNLENBQUMseUJBQXlCLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3hHLENBQUMsQ0FBQztRQUVGLElBQUksQ0FBQyxNQUFNLEdBQUc7WUFDWixJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNkLDBEQUEwRDtnQkFDMUQsU0FBUyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLENBQUM7Z0JBQ3hDLFNBQVMsR0FBRyxJQUFJLENBQUM7YUFDbEI7WUFDRCxrR0FBa0c7WUFDbEcsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFFO2dCQUMzRCxLQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQzVCO1FBQ0gsQ0FBQyxDQUFDO1FBRUYsSUFBSSxDQUFDLE1BQU0sR0FBRztZQUNaLHNEQUFzRDtZQUN0RCxJQUFJLFNBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQkFDcEMscUVBQXFFO2dCQUNyRSxJQUFJLG9CQUFvQixHQUFvQixFQUFFLENBQUM7Z0JBQy9DLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsS0FBSSxFQUFFLG9CQUFvQixDQUFDLENBQUM7Z0JBRXJFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLEVBQUU7b0JBQ2hDLDRGQUE0RjtvQkFDNUYsU0FBUyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLENBQUM7b0JBQ3hDLFNBQVMsR0FBRyxLQUFLLENBQUM7aUJBQ25CO3FCQUFNO29CQUNMLHdEQUF3RDtvQkFDeEQsS0FBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2lCQUNmO2FBQ0Y7UUFDSCxDQUFDLENBQUM7UUFFRiwwREFBMEQ7UUFDMUQsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLGlCQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFaEUsSUFBSSxDQUFDLHFCQUFxQixHQUFHLENBQUM7Z0JBQzVCLG9EQUFvRDtnQkFDcEQsSUFBSSxFQUFFLFVBQVU7Z0JBQ2hCLE9BQU8sRUFBRSxVQUFDLENBQUM7b0JBQ1QsSUFBSSxDQUFDLFNBQVMsRUFBRTt3QkFDZCxvR0FBb0c7d0JBQ3BHLG9HQUFvRzt3QkFDcEcsMEdBQTBHO3dCQUMxRyxzREFBc0Q7d0JBQ3RELElBQUksWUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFOzRCQUN2QyxZQUFZLEdBQUcsS0FBSyxDQUFDO3lCQUN0Qjs2QkFBTTs0QkFDTCxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7eUJBQ3BCO3dCQUNELEtBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztxQkFDZjtnQkFDSCxDQUFDO2FBQ0YsRUFBRTtnQkFDRCx3Q0FBd0M7Z0JBQ3hDLElBQUksRUFBRSxZQUFZO2dCQUNsQixPQUFPLEVBQUU7b0JBQ1AsS0FBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUNoQixDQUFDO2FBQ0YsRUFBRTtnQkFDRCw4Q0FBOEM7Z0JBQzlDLElBQUksRUFBRSxXQUFXO2dCQUNqQixPQUFPLEVBQUU7b0JBQ1AsS0FBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUNoQixDQUFDO2FBQ0YsRUFBRTtnQkFDRCxJQUFJLEVBQUUsU0FBUztnQkFDZixPQUFPLEVBQUU7b0JBQ1AsS0FBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUNoQixDQUFDO2FBQ0YsRUFBRTtnQkFDRCxJQUFJLEVBQUUsU0FBUztnQkFDZixPQUFPLEVBQUU7b0JBQ1AsS0FBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUNoQixDQUFDO2FBQ0YsRUFBRTtnQkFDRCxrRkFBa0Y7Z0JBQ2xGLElBQUksRUFBRSxZQUFZO2dCQUNsQixPQUFPLEVBQUU7b0JBQ1AsMEdBQTBHO29CQUMxRyw0QkFBNEI7b0JBQzVCLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRTt3QkFDcEMsS0FBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztxQkFDNUI7Z0JBQ0gsQ0FBQzthQUNGLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLLElBQUssT0FBQSxLQUFJLENBQUMsMEJBQTBCLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUE3RCxDQUE2RCxDQUFDLENBQUM7UUFFN0csU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDekIsS0FBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLDRDQUE0QztZQUN4RSxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO1FBQ0gsU0FBUyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7WUFDM0IsU0FBUyxHQUFHLEtBQUssQ0FBQztZQUNsQixJQUFJLENBQUMsZUFBZSxFQUFFLEVBQUU7Z0JBQ3RCLEtBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyx5Q0FBeUM7YUFDdEU7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFO1lBQ2hELEtBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLGdHQUFnRztRQUNqSCxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsVUFBQyxDQUFDLEVBQUUsS0FBSztZQUN4QyxXQUFXLEdBQUcsS0FBSyxDQUFDO1lBQ3BCLElBQUksZUFBZSxFQUFFLEVBQUU7Z0JBQ3JCLG1GQUFtRjtnQkFDbkYsS0FBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDM0IsS0FBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQ2Y7aUJBQU07Z0JBQ0wsNkNBQTZDO2dCQUM3QyxLQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQzVCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sMkNBQXFCLEdBQTdCLFVBQThCLE1BQWlCLEVBQUUsU0FBNEI7UUFBN0UsaUJBMEhDO1FBekhDLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUVyQyw2Q0FBNkM7UUFDN0MsSUFBSSxlQUFlLEdBQVEsRUFBRSxDQUFDO1FBQzlCLEtBQUssSUFBSSxLQUFLLElBQUkseUJBQVcsQ0FBQyxXQUFXLEVBQUU7WUFDekMsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQ3hCLElBQUksUUFBUSxHQUFHLHlCQUFXLENBQUMsV0FBVyxDQUFNLHlCQUFXLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQzVFLGVBQWUsQ0FBQyx5QkFBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDN0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO2FBQ3JFO1NBQ0Y7UUFFRCxJQUFJLFlBQVksR0FBRztZQUNqQixTQUFTLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyx5QkFBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3JFLFNBQVMsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLHlCQUFXLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDekUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMseUJBQVcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUN4RSxTQUFTLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyx5QkFBVyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3ZFLFNBQVMsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLHlCQUFXLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDM0UsQ0FBQyxDQUFDO1FBRUYsSUFBTSxXQUFXLEdBQUcsVUFBQyxLQUE4QjtZQUNqRCxZQUFZLEVBQUUsQ0FBQztZQUNmLFNBQVMsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDM0MsS0FBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxLQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0MsQ0FBQyxDQUFDO1FBRUYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUU7WUFDakQsV0FBVyxDQUFDLHlCQUFXLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hELENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUU7WUFDekMsV0FBVyxDQUFDLHlCQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUU7WUFDNUMsV0FBVyxDQUFDLHlCQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDM0MsV0FBVyxDQUFDLHlCQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRTtZQUNyRCxXQUFXLENBQUMseUJBQVcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEQsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRTtZQUNuRCxXQUFXLENBQUMseUJBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7UUFDSCxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7WUFDL0MsV0FBVyxDQUFDLHlCQUFXLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7UUFFSCwwQkFBMEI7UUFDMUIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxlQUFlLEVBQUU7WUFDcEQsSUFBSSxNQUFNLENBQUMsV0FBVyxFQUFFLEtBQUssTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFO2dCQUMvRCxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7YUFDNUQ7aUJBQU07Z0JBQ0wsU0FBUyxDQUFDLFdBQVcsQ0FBQyxLQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO2FBQy9EO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCx3QkFBd0I7UUFDeEIsSUFBSSxNQUFNLENBQUMsV0FBVyxFQUFFLEtBQUssTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFO1lBQy9ELFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztTQUM1RDtRQUVELHlCQUF5QjtRQUN6QixNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRTtZQUNqRCxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDNUQsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRTtZQUMvQyxTQUFTLENBQUMsV0FBVyxDQUFDLEtBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDL0QsQ0FBQyxDQUFDLENBQUM7UUFDSCx1QkFBdUI7UUFDdkIsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDdEIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1NBQzNEO1FBRUQsNkJBQTZCO1FBQzdCLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFO1lBQ2hELFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUNqRSxDQUFDLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFO1lBQ2hELFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUNwRSxDQUFDLENBQUMsQ0FBQztRQUNILDJCQUEyQjtRQUMzQixJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUN0QixTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7U0FDaEU7UUFFRCxtQ0FBbUM7UUFDbkMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUM7WUFDakMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxLQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO1lBQ25FLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUNqRSxDQUFDLENBQUMsQ0FBQztRQUNILFNBQVMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDO1lBQ2pDLFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztZQUNsRSxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7UUFDbEUsQ0FBQyxDQUFDLENBQUM7UUFFSCxzQkFBc0I7UUFDdEIsSUFBSSx1QkFBdUIsR0FBRyxVQUFDLEtBQWEsRUFBRSxNQUFjO1lBQzFELFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7WUFDOUQsU0FBUyxDQUFDLFdBQVcsQ0FBQyxLQUFJLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQztZQUM5RCxTQUFTLENBQUMsV0FBVyxDQUFDLEtBQUksQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO1lBQzlELFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUM7WUFFL0QsSUFBSSxLQUFLLElBQUksR0FBRyxFQUFFO2dCQUNoQixTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO2FBQzVEO2lCQUFNLElBQUksS0FBSyxJQUFJLEdBQUcsRUFBRTtnQkFDdkIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQzthQUM1RDtpQkFBTSxJQUFJLEtBQUssSUFBSSxHQUFHLEVBQUU7Z0JBQ3ZCLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7YUFDNUQ7aUJBQU0sSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFO2dCQUN4QixTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxTQUFTLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO2FBQzdEO1FBQ0gsQ0FBQyxDQUFDO1FBQ0YsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsVUFBQyxDQUFxQjtZQUN4RSw2Q0FBNkM7WUFDN0MsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6RSxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRTVFLHVCQUF1QixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQztRQUNILG9CQUFvQjtRQUNwQix1QkFBdUIsQ0FBQyxJQUFJLFNBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLFNBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQzNHLENBQUM7SUFFRCw2QkFBTyxHQUFQO1FBQUEsaUJBWUM7UUFYQywrR0FBK0c7UUFDL0csbUVBQW1FO1FBQ25FLElBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFO1lBQzlCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLLElBQUssT0FBQSxLQUFJLENBQUMsMEJBQTBCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUE5RCxDQUE4RCxDQUFDLENBQUM7U0FDL0c7UUFFRCxpQkFBTSxPQUFPLFdBQUUsQ0FBQztRQUVoQixJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUM1QjtJQUNILENBQUM7SUFFUyxrQ0FBWSxHQUF0QjtRQUNFLElBQUksU0FBUyxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBRXJDLGdEQUFnRDtRQUNoRCxJQUFJLFFBQVEsSUFBSSxPQUFPLFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUU7WUFDN0UsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDL0M7YUFBTTtZQUNMLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1NBQ2xEO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQW5VdUIsd0JBQVksR0FBRyxlQUFILEFBQWtCLENBQUM7SUFFL0Isc0JBQVUsR0FBRyxZQUFILEFBQWUsQ0FBQztJQUMxQixxQkFBUyxHQUFHLFdBQUgsQUFBYyxDQUFDO0lBQ3hCLDBCQUFjLEdBQUcsZ0JBQUgsQUFBbUIsQ0FBQztJQUNsQywwQkFBYyxHQUFHLGdCQUFILEFBQW1CLENBQUM7SUFDbEMsMkJBQWUsR0FBRyxpQkFBSCxBQUFvQixDQUFDO0lBOFQ5RCxrQkFBQztDQXRVRCxBQXNVQyxDQXRVZ0MscUJBQVMsR0FzVXpDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN6V0QseUNBQXNDO0FBSXRDLDZDQUE0QztBQUU1Qzs7R0FFRztBQUNIO0lBQTJDLHlDQUFTO0lBSWxELCtCQUFZLE1BQStCO1FBQS9CLHVCQUFBLEVBQUEsV0FBK0I7UUFBM0MsWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FLZDtRQUhDLEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDckMsVUFBVSxFQUFFLENBQUMsMEJBQTBCLENBQUM7U0FDekMsRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQ2xCLENBQUM7SUFFRCx5Q0FBUyxHQUFULFVBQVUsTUFBaUIsRUFBRSxTQUE0QjtRQUF6RCxpQkFnREM7UUEvQ0MsaUJBQU0sU0FBUyxZQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVuQyxJQUFJLHlCQUF5QixHQUFHO1lBQzlCLEtBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQztRQUVGLElBQUksb0JBQW9CLEdBQUc7WUFDekIsSUFBSSxjQUFjLEdBQUcsTUFBTSxDQUFDLDBCQUEwQixFQUFFLENBQUM7WUFFekQsS0FBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBRWxCLGlFQUFpRTtZQUNqRSxLQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxhQUFhLEVBQUUsS0FBSyxhQUFhLENBQUM7WUFFeEQsSUFBSSxLQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNoQiw4REFBOEQ7Z0JBQzlELEtBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzthQUNqRDtZQUVELHNCQUFzQjtZQUN0QixLQUF5QixVQUFjLEVBQWQsaUNBQWMsRUFBZCw0QkFBYyxFQUFkLElBQWMsRUFBRTtnQkFBcEMsSUFBSSxZQUFZLHVCQUFBO2dCQUNuQixLQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ25EO1lBRUQseUJBQXlCO1lBQ3pCLHlCQUF5QixFQUFFLENBQUM7UUFDOUIsQ0FBQyxDQUFDO1FBRUYsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsVUFBQyxNQUE2QixFQUFFLEtBQWE7WUFDekUsTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQztRQUVILHlDQUF5QztRQUN6QyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQzNFLDJEQUEyRDtRQUMzRCxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQzNFLGtFQUFrRTtRQUNsRSxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLG1CQUFtQixFQUFFLHlCQUF5QixDQUFDLENBQUM7UUFFckYsSUFBSyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQW1CLENBQUMsaUJBQWlCLEVBQUU7WUFDekQsbURBQW1EO1lBQ25ELGtEQUFrRDtZQUNsRCxNQUFNLENBQUMsRUFBRSxDQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBbUIsQ0FBQyxpQkFBaUIsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1lBQ3ZGLE1BQU0sQ0FBQyxFQUFFLENBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFtQixDQUFDLG1CQUFtQixFQUFFLG9CQUFvQixDQUFDLENBQUM7U0FDMUY7UUFFRCxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsMkNBQVcsR0FBWDtRQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBQ0gsNEJBQUM7QUFBRCxDQXJFQSxBQXFFQyxDQXJFMEMscUJBQVMsR0FxRW5EO0FBckVZLHNEQUFxQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDVGxDLHlDQUF1RDtBQUN2RCwrQ0FBNEM7QUFDNUMsMkRBQXdEO0FBRXhELHNDQUFtQztBQXNCbkM7OztHQUdHO0FBQ0g7SUFBeUMsdUNBQW9DO0lBTzNFLDZCQUFZLE1BQXNDO1FBQXRDLHVCQUFBLEVBQUEsV0FBc0M7UUFBbEQsWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FhZDtRQVhDLEtBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLHVDQUFrQixFQUFFLENBQUM7UUFDbkQsS0FBSSxDQUFDLFlBQVksR0FBRyxJQUFJLDJCQUFZLENBQUM7WUFDbkMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJO1lBQzFELE1BQU0sRUFBRSxJQUFJO1NBQ2IsQ0FBQyxDQUFDO1FBRUgsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxRQUFRLEVBQUUsd0JBQXdCO1lBQ2xDLFVBQVUsRUFBRSxDQUFDLEtBQUksQ0FBQyxrQkFBa0IsRUFBRSxLQUFJLENBQUMsWUFBWSxDQUFDO1lBQ3hELFNBQVMsRUFBRSxHQUFHO1NBQ2YsRUFBNkIsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztJQUM3QyxDQUFDO0lBRUQsdUNBQVMsR0FBVCxVQUFVLE1BQWlCLEVBQUUsU0FBNEI7UUFBekQsaUJBa0RDO1FBakRDLGlCQUFNLFNBQVMsWUFBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFbkMsSUFBSSxrQkFBa0IsR0FBRyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUN0RCxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFFMUMsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksaUJBQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsU0FBUyxFQUFFO1lBQ3JFLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN0QixDQUFDLENBQUMsQ0FBQztRQUVIOzs7Ozs7V0FNRztRQUNILElBQUksbUJBQW1CLEdBQUcsS0FBSyxDQUFDO1FBQ2hDLGtCQUFrQixDQUFDLGFBQWEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUU7WUFDbEQsdURBQXVEO1lBQ3ZELElBQUksWUFBWSxDQUFDLFFBQVEsRUFBRSxFQUFFO2dCQUMzQixZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDckI7WUFDRCxvREFBb0Q7WUFDcEQsS0FBSSxDQUFDLHVCQUF1QixDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsa0JBQWtCLENBQUMsYUFBYSxFQUFFLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRTtZQUNsRCwwQ0FBMEM7WUFDMUMsS0FBSSxDQUFDLHVCQUF1QixDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsWUFBWSxDQUFDLGFBQWEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUU7WUFDNUMsc0ZBQXNGO1lBQ3RGLEtBQUksQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNyQyxtQkFBbUIsR0FBRyxJQUFJLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7UUFDSCxZQUFZLENBQUMsYUFBYSxFQUFFLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRTtZQUM1Qyx3RkFBd0Y7WUFDeEYsSUFBSSxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUU7Z0JBQzVCLEtBQUksQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUN0QztpQkFBTTtnQkFDTCxLQUFJLENBQUMsdUJBQXVCLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDdEM7WUFDRCxtQkFBbUIsR0FBRyxLQUFLLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7UUFDSCxZQUFZLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQztZQUM5Qix3R0FBd0c7WUFDeEcsSUFBSSxDQUFDLG1CQUFtQixFQUFFO2dCQUN4QixLQUFJLENBQUMsdUJBQXVCLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDdEM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxxQ0FBTyxHQUFQO1FBQ0UsaUJBQU0sT0FBTyxXQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLHVCQUF1QixDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3ZDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxtREFBcUIsR0FBckI7UUFDRSxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztJQUNqQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsNkNBQWUsR0FBZjtRQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBQ0gsMEJBQUM7QUFBRCxDQS9GQSxBQStGQyxDQS9Gd0MscUJBQVMsR0ErRmpEO0FBL0ZZLGtEQUFtQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDOUJoQyxxQ0FBeUU7QUFJekUsNkNBQTRDO0FBYzVDOztHQUVHO0FBQ0g7SUFBa0MsZ0NBQU87SUFHdkMsc0JBQVksTUFBK0I7UUFBL0IsdUJBQUEsRUFBQSxXQUErQjtRQUEzQyxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQVFkO1FBcUVPLGdDQUEwQixHQUFHLFVBQUMsTUFBb0IsRUFBRSxJQUEwQjtZQUNwRixJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksS0FBSSxDQUFDLGdCQUFnQixFQUFFO2dCQUMzQyxLQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUM3QztRQUNILENBQUMsQ0FBQztRQS9FQSxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFzQjtZQUN6RCxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLDZCQUE2QixFQUFFLElBQUk7WUFDbkMsU0FBUyxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsdUJBQXVCLENBQUM7WUFDckQsUUFBUSxFQUFFLENBQUM7U0FDWixFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7SUFDbEIsQ0FBQztJQUVPLGdEQUF5QixHQUFqQyxVQUFrQyxLQUFhO1FBQzdDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUN4RSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFVBQUcsV0FBSSxDQUFDLG1CQUFtQixDQUFDLFdBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLENBQUMsZUFBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFFLENBQUMsQ0FBQztJQUN0SSxDQUFDO0lBRUQsZ0NBQVMsR0FBVCxVQUFVLE1BQWlCLEVBQUUsU0FBNEI7UUFBekQsaUJBNERDO1FBM0RDLGlCQUFNLFNBQVMsWUFBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRTFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFckMsSUFBSSxNQUFNLEdBQXVCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUVsRCxJQUFNLGdCQUFnQixHQUFHLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztRQUVoRSxJQUFJLE1BQU0sQ0FBQyw2QkFBNkIsSUFBSSxDQUFDLElBQUksQ0FBQywrQkFBK0IsRUFBRSxFQUFFO1lBQ25GLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVaLHlHQUF5RztZQUN6Ryx3REFBd0Q7WUFDeEQsT0FBTztTQUNSO1FBRUQsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxVQUFDLENBQUMsRUFBRSxJQUFJO1lBQzNDLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDZCxLQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xDLEtBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM3QjtpQkFBTTtnQkFDTCxLQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN0QyxLQUFJLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzdDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztZQUNwQixLQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDN0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM3RSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxVQUFDLE1BQU0sRUFBRSxVQUFVO1lBQ3pDLElBQUksS0FBSSxDQUFDLGdCQUFnQixFQUFFO2dCQUN6QixLQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQzFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCwrRUFBK0U7UUFDL0UseUVBQXlFO1FBQ3pFLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFO1lBQ2xELEtBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsU0FBUyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUM7WUFDL0IsS0FBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7UUFFSCxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7WUFDL0MsS0FBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7UUFFSCxTQUFTLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQztZQUNsQyxLQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztRQUNILFNBQVMsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDO1lBQ2xDLEtBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO1FBRUgsa0JBQWtCO1FBQ2xCLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUFRTyxzREFBK0IsR0FBdkM7UUFDRTs7OztXQUlHO1FBQ0gsZ0hBQWdIO1FBQ2hILDhCQUE4QjtRQUM5QixJQUFNLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUQsaUdBQWlHO1FBQ2pHLGlCQUFpQixDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7UUFDL0IsT0FBTyxpQkFBaUIsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCw4QkFBTyxHQUFQO1FBQ0UsaUJBQU0sT0FBTyxXQUFFLENBQUM7UUFFaEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUNILG1CQUFDO0FBQUQsQ0ExR0EsQUEwR0MsQ0ExR2lDLGlCQUFPLEdBMEd4QztBQTFHWSxvQ0FBWTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDckJ6QiwrQ0FBZ0U7QUFHaEUsNkNBQTRDO0FBRTVDOztHQUVHO0FBQ0g7SUFBd0Msc0NBQWdDO0lBRXRFLDRCQUFZLE1BQStCO1FBQS9CLHVCQUFBLEVBQUEsV0FBK0I7UUFBM0MsWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FXZDtRQVRDLElBQU0sYUFBYSxHQUF1QjtZQUN4QyxRQUFRLEVBQUUsdUJBQXVCO1lBQ2pDLElBQUksRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLHFCQUFxQixDQUFDO1lBQzlDLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFFBQVEsRUFBRSxTQUFTO1lBQ25CLFNBQVMsRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLHFCQUFxQixDQUFDO1NBQ3BELENBQUM7UUFFRixLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQ3JFLENBQUM7SUFFRCxzQ0FBUyxHQUFULFVBQVUsTUFBaUIsRUFBRSxTQUE0QjtRQUF6RCxpQkFzQkM7UUFyQkMsaUJBQU0sU0FBUyxZQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVuQyxJQUFNLGdCQUFnQixHQUFHLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztRQUVoRSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFVBQUMsQ0FBQyxFQUFFLElBQUk7WUFDM0MsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNkLEtBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQzthQUNYO2lCQUFNO2dCQUNMLEtBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQzthQUNaO1lBRUQsSUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ3BELEtBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO1FBQzFGLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7WUFDckIsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7UUFFSCxlQUFlO1FBQ2YsZ0JBQWdCLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUNILHlCQUFDO0FBQUQsQ0F2Q0EsQUF1Q0MsQ0F2Q3VDLDJCQUFZLEdBdUNuRDtBQXZDWSxnREFBa0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1IvQiwrQ0FBZ0U7QUFHaEUsNkNBQTRDO0FBRTVDOztHQUVHO0FBQ0g7SUFBb0Msa0NBQWdDO0lBRWxFLHdCQUFZLE1BQStCO1FBQS9CLHVCQUFBLEVBQUEsV0FBK0I7UUFBM0MsWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FNZDtRQUpDLEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDckMsUUFBUSxFQUFFLG1CQUFtQjtZQUM3QixJQUFJLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7U0FDOUIsRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQ2xCLENBQUM7SUFFRCxrQ0FBUyxHQUFULFVBQVUsTUFBaUIsRUFBRSxTQUE0QjtRQUF6RCxpQkFrRUM7UUFqRUMsaUJBQU0sU0FBUyxZQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVuQyxJQUFJLGNBQWMsR0FBRztZQUNuQix5R0FBeUc7WUFDekcsNkZBQTZGO1lBQzdGLDRHQUE0RztZQUM1RyxxQkFBcUI7WUFDckIsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2xDLE9BQU8sTUFBTSxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdEMsQ0FBQyxDQUFDO1FBRUYsSUFBSSxtQkFBbUIsR0FBRztZQUN4QixJQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDbEMsT0FBTyxNQUFNLENBQUMsRUFBRSxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFDO1FBRUYsSUFBSSxjQUFjLEdBQUcsVUFBQyxFQUFtQjtZQUN2QyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsT0FBTzttQkFDNUMsRUFBbUIsQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsa0JBQWtCLEVBQUU7Z0JBQ2hGLE9BQU87YUFDUjtZQUVELElBQUksY0FBYyxFQUFFLElBQUksbUJBQW1CLEVBQUUsRUFBRTtnQkFDN0MsS0FBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsbUNBQW1DO2dCQUVoRCxJQUFJLE1BQU0sQ0FBQyxFQUFFLElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsRUFBRTtvQkFDdEMsS0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO2lCQUNYO3FCQUFNO29CQUNMLEtBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztpQkFDWjthQUNGO2lCQUFNO2dCQUNMLEtBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLDBDQUEwQzthQUN4RDtRQUNILENBQUMsQ0FBQztRQUVGLElBQUkseUJBQXlCLEdBQUc7WUFDOUIsSUFBSSxjQUFjLEVBQUUsRUFBRTtnQkFDcEIsS0FBSSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ2I7aUJBQU07Z0JBQ0wsS0FBSSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ2I7UUFDSCxDQUFDLENBQUM7UUFFRixNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUN0RSxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQztRQUM5RCx1Q0FBdUM7UUFDdkMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUseUJBQXlCLENBQUMsQ0FBQztRQUNoRixTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUU1RSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztZQUNyQixJQUFJLENBQUMsbUJBQW1CLEVBQUUsRUFBRTtnQkFDMUIsSUFBSSxPQUFPLEVBQUU7b0JBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztpQkFDOUI7YUFDRjtpQkFBTTtnQkFDTCxJQUFJLE1BQU0sQ0FBQyxFQUFFLElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsRUFBRTtvQkFDdEMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQzVCO3FCQUFNO29CQUNMLE1BQU0sQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUMzQjthQUNGO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCx5QkFBeUI7UUFDekIseUJBQXlCLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBQ0gscUJBQUM7QUFBRCxDQTlFQSxBQThFQyxDQTlFbUMsMkJBQVksR0E4RS9DO0FBOUVZLHdDQUFjOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNSM0IsK0NBQWdFO0FBQ2hFLDZDQUE0QztBQVM1Qzs7R0FFRztBQUNIO0lBQStCLDZCQUFZO0lBRXpDLG1CQUFZLE1BQTRCO1FBQTVCLHVCQUFBLEVBQUEsV0FBNEI7UUFBeEMsWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FTZDtRQVBDLEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDckMsUUFBUSxFQUFFLGNBQWM7WUFDeEIsR0FBRyxFQUFFLHFCQUFxQjtZQUMxQixJQUFJLEVBQUUsTUFBTTtZQUNaLElBQUksRUFBRSxNQUFNO1lBQ1osU0FBUyxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDO1NBQzlDLEVBQW1CLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7SUFDbkMsQ0FBQztJQUNILGdCQUFDO0FBQUQsQ0FiQSxBQWFDLENBYjhCLDJCQUFZLEdBYTFDO0FBYlksOEJBQVM7Ozs7OztBQ2J0Qiw4REFBMkQ7QUFDM0QsMEVBQXVFO0FBQ3ZFLDBEQUF1RDtBQUN2RCxvRUFBd0Y7QUFDeEYsd0VBQXFFO0FBQ3JFLHdFQUFxRTtBQUNyRSxzREFBbUQ7QUFDbkQsa0VBQStEO0FBQy9ELDhFQUEyRTtBQUMzRSw0RUFBeUU7QUFDekUsOEVBQTJFO0FBQzNFLDRFQUF5RTtBQUN6RSxvRUFBaUU7QUFDakUsd0RBQXFEO0FBQ3JELG9EQUFpRDtBQUNqRCxnRUFBNkQ7QUFDN0QsNERBQXlEO0FBQ3pELDBEQUF1RDtBQUN2RCw0RUFBeUU7QUFDekUsMEZBQXVGO0FBQ3ZGLDhDQUEyQztBQUMzQyxvREFBaUQ7QUFDakQsc0VBQW1FO0FBQ25FLDBFQUF1RTtBQUN2RSxnREFBNkM7QUFDN0MsNEVBQXlFO0FBQ3pFLHlDQUEwRDtBQUMxRCxrREFBK0M7QUFDL0Msa0VBQStEO0FBQy9ELGdFQUE2RDtBQUM3RCxvRUFBaUU7QUFDakUsb0VBQWlFO0FBQ2pFLG9FQUFpRTtBQUNqRSx5Q0FBd0M7QUFJeEMsSUFBaUIsV0FBVyxDQXdIM0I7QUF4SEQsV0FBaUIsV0FBVztJQUUxQixTQUFnQiwwQ0FBMEMsQ0FBQyxNQUFpQixFQUFFLE1BQXFCO1FBQXJCLHVCQUFBLEVBQUEsV0FBcUI7UUFDakcsc0RBQXNEO1FBQ3RELElBQUksc0JBQXNCLEdBQUcsR0FBRyxDQUFDO1FBRWpDLE9BQU8sSUFBSSxxQkFBUyxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUM1QixFQUFFLEVBQUUscUJBQVMsQ0FBQyxzQkFBc0IsRUFBRTtnQkFDdEMsU0FBUyxFQUFFLFVBQUMsT0FBMkI7b0JBQ3JDLE9BQU8sT0FBTyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsYUFBYSxHQUFHLHNCQUFzQjsyQkFDcEUsT0FBTyxDQUFDLElBQUksSUFBSSxPQUFPLENBQUMsWUFBWSxDQUFDO2dCQUM1QyxDQUFDO2FBQ0YsRUFBRTtnQkFDRCxFQUFFLEVBQUUscUJBQVMsQ0FBQyxXQUFXLEVBQUU7Z0JBQzNCLFNBQVMsRUFBRSxVQUFDLE9BQTJCO29CQUNyQyxPQUFPLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLFlBQVksQ0FBQztnQkFDOUMsQ0FBQzthQUNGLEVBQUU7Z0JBQ0QsRUFBRSxFQUFFLHFCQUFTLENBQUMsbUJBQW1CLEVBQUU7Z0JBQ25DLFNBQVMsRUFBRSxVQUFDLE9BQTJCO29CQUNyQyxPQUFPLE9BQU8sQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDLGFBQWEsR0FBRyxzQkFBc0IsQ0FBQztnQkFDNUUsQ0FBQzthQUNGLEVBQUU7Z0JBQ0QsRUFBRSxFQUFFLHlDQUF5QyxFQUFFO2FBQ2hELENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNkLENBQUM7SUF2QmUsc0RBQTBDLDZDQXVCekQsQ0FBQTtJQUVELFNBQVMseUNBQXlDO1FBQ2hELElBQUksZUFBZSxHQUFHLElBQUksaUNBQWUsRUFBRSxDQUFDO1FBRTVDLElBQUksYUFBYSxHQUFHLElBQUksNkJBQWEsQ0FBQztZQUNwQyxVQUFVLEVBQUU7Z0JBQ1YsSUFBSSxxQ0FBaUIsQ0FBQztvQkFDcEIsVUFBVSxFQUFFO3dCQUNWLElBQUkscUNBQWlCLENBQUMsZUFBZSxFQUFFLElBQUksNkNBQXFCLEVBQUUsQ0FBQzt3QkFDbkUsSUFBSSxxQ0FBaUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSwrQ0FBc0IsRUFBRSxDQUFDO3dCQUM1RCxJQUFJLHFDQUFpQixDQUFDLGVBQWUsRUFBRSxJQUFJLDZDQUFxQixFQUFFLENBQUM7cUJBQ3BFO2lCQUNGLENBQUM7YUFDSDtZQUNELE1BQU0sRUFBRSxJQUFJO1NBQ2IsQ0FBQyxDQUFDO1FBRUgsSUFBSSxlQUFlLEdBQUcsSUFBSSxpQ0FBZSxFQUFFLENBQUM7UUFDNUMsSUFBSSxxQkFBcUIsR0FBRyxJQUFJLDZCQUFhLENBQUM7WUFDNUMsVUFBVSxFQUFFO2dCQUNWLElBQUkscUNBQWlCLENBQUM7b0JBQ3BCLFVBQVUsRUFBRTt3QkFDVixJQUFJLHFDQUFpQixDQUFDLElBQUksRUFBRSxlQUFlLENBQUM7cUJBQzdDO2lCQUNGLENBQUM7YUFDSDtZQUNELE1BQU0sRUFBRSxJQUFJO1NBQ2IsQ0FBQyxDQUFDO1FBRUgsSUFBSSxpQkFBaUIsR0FBRyxJQUFJLHFDQUFpQixFQUFFLENBQUM7UUFDaEQsSUFBSSx1QkFBdUIsR0FBRyxJQUFJLDZCQUFhLENBQUM7WUFDOUMsVUFBVSxFQUFFO2dCQUNWLElBQUkscUNBQWlCLENBQUM7b0JBQ3BCLFVBQVUsRUFBRTt3QkFDVixJQUFJLHFDQUFpQixDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQztxQkFDL0M7aUJBQ0YsQ0FBQzthQUNIO1lBQ0QsTUFBTSxFQUFFLElBQUk7U0FDYixDQUFDLENBQUM7UUFFSCxJQUFJLFVBQVUsR0FBRyxJQUFJLHVCQUFVLENBQUM7WUFDOUIsVUFBVSxFQUFFO2dCQUNWLHVCQUF1QjtnQkFDdkIscUJBQXFCO2dCQUNyQixhQUFhO2dCQUNiLElBQUkscUJBQVMsQ0FBQztvQkFDWixVQUFVLEVBQUU7d0JBQ1YsSUFBSSxxQ0FBaUIsQ0FBQyxFQUFFLGFBQWEsRUFBRSx5Q0FBcUIsQ0FBQyxXQUFXLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxFQUFFLENBQUM7d0JBQ3JHLElBQUksaUJBQU8sQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLDJCQUFZLEVBQUUsRUFBRSxDQUFDO3dCQUMxQyxJQUFJLHFDQUFpQixDQUFDLEVBQUUsYUFBYSxFQUFFLHlDQUFxQixDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDO3FCQUN0RztvQkFDRCxVQUFVLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztpQkFDL0IsQ0FBQztnQkFDRixJQUFJLHFCQUFTLENBQUM7b0JBQ1osVUFBVSxFQUFFO3dCQUNWLElBQUksMkNBQW9CLEVBQUU7d0JBQzFCLElBQUksdUNBQWtCLEVBQUU7d0JBQ3hCLElBQUksMkJBQVksRUFBRTt3QkFDbEIsSUFBSSxlQUFNLEVBQUU7d0JBQ1osSUFBSSwyREFBNEIsRUFBRTt3QkFDbEMsSUFBSSx5Q0FBbUIsRUFBRTt3QkFDekIsSUFBSSxtQ0FBZ0IsRUFBRTt3QkFDdEIsSUFBSSwrQkFBYyxFQUFFO3dCQUNwQixJQUFJLDJDQUFvQixDQUFDOzRCQUN2QixhQUFhLEVBQUUsdUJBQXVCOzRCQUN0QyxRQUFRLEVBQUUsbUNBQW1DO3lCQUM5QyxDQUFDO3dCQUNGLElBQUksMkNBQW9CLENBQUM7NEJBQ3ZCLGFBQWEsRUFBRSxxQkFBcUI7NEJBQ3BDLFFBQVEsRUFBRSxpQ0FBaUM7eUJBQzVDLENBQUM7d0JBQ0YsSUFBSSwyQ0FBb0IsQ0FBQyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsQ0FBQzt3QkFDMUQsSUFBSSwrQ0FBc0IsRUFBRTtxQkFDN0I7b0JBQ0QsVUFBVSxFQUFFLENBQUMsbUJBQW1CLENBQUM7aUJBQ2xDLENBQUM7YUFDSDtTQUNGLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSx5QkFBVyxDQUFDO1lBQ3JCLFVBQVUsRUFBRTtnQkFDVixlQUFlO2dCQUNmLElBQUksbUNBQWdCLEVBQUU7Z0JBQ3RCLElBQUksNkNBQXFCLEVBQUU7Z0JBQzNCLElBQUkscUNBQWlCLEVBQUU7Z0JBQ3ZCLFVBQVU7Z0JBQ1YsSUFBSSxtQkFBUSxFQUFFO2dCQUNkLElBQUksNkNBQXFCLEVBQUU7Z0JBQzNCLElBQUkscUJBQVMsRUFBRTtnQkFDZixJQUFJLHlDQUFtQixFQUFFO2FBQzFCO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztBQUNILENBQUMsRUF4SGdCLFdBQVcsR0FBWCxtQkFBVyxLQUFYLG1CQUFXLFFBd0gzQjs7Ozs7O0FDL0lEOzs7Ozs7Ozs7O0dBVUc7QUFDSDtJQW9DRSxhQUFZLFNBQTBELEVBQUUsVUFBcUM7UUFDM0csSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsQ0FBQyxzREFBc0Q7UUFFaEYsSUFBSSxTQUFTLFlBQVksS0FBSyxFQUFFO1lBQzlCLElBQUksU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxZQUFZLFdBQVcsRUFBRTtnQkFDL0QsSUFBSSxRQUFRLEdBQUcsU0FBUyxDQUFDO2dCQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQzthQUMxQjtTQUNGO2FBQ0ksSUFBSSxTQUFTLFlBQVksV0FBVyxFQUFFO1lBQ3pDLElBQUksT0FBTyxHQUFHLFNBQVMsQ0FBQztZQUN4QixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDM0I7YUFDSSxJQUFJLFNBQVMsWUFBWSxRQUFRLEVBQUU7WUFDdEMsb0dBQW9HO1lBQ3BHLHlHQUF5RztZQUN6Ryx1QkFBdUI7WUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FDdEI7YUFDSSxJQUFJLFVBQVUsRUFBRTtZQUNuQixJQUFJLE9BQU8sR0FBRyxTQUFTLENBQUM7WUFDeEIsSUFBSSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUU5QyxLQUFLLElBQUksYUFBYSxJQUFJLFVBQVUsRUFBRTtnQkFDcEMsSUFBSSxjQUFjLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUMvQyxJQUFJLGNBQWMsSUFBSSxJQUFJLEVBQUU7b0JBQzFCLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLGNBQWMsQ0FBQyxDQUFDO2lCQUNyRDthQUNGO1lBRUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzNCO2FBQ0k7WUFDSCxJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUM7WUFDekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDbEQ7SUFDSCxDQUFDO0lBTUQsc0JBQUksdUJBQU07UUFKVjs7O1dBR0c7YUFDSDtZQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRCxDQUFDOzs7T0FBQTtJQWFELGlCQUFHLEdBQUgsVUFBSSxLQUFjO1FBQ2hCLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUN2QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDdEI7YUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDM0YsT0FBTyxTQUFTLENBQUM7U0FDbEI7YUFBTSxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDcEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDO1NBQ3BEO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDN0I7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0sscUJBQU8sR0FBZixVQUFnQixPQUF1QztRQUNyRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFDLE9BQU87WUFDNUIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLHdDQUEwQixHQUFsQyxVQUFtQyxPQUErQixFQUFFLFFBQWdCO1FBQ2xGLElBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUV2RCw0QkFBNEI7UUFDNUIsbUhBQW1IO1FBQ25ILE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVPLCtCQUFpQixHQUF6QixVQUEwQixRQUFnQjtRQUExQyxpQkFhQztRQVpDLElBQUksZ0JBQWdCLEdBQWtCLEVBQUUsQ0FBQztRQUV6QyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFDLE9BQU87Z0JBQ25CLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxLQUFJLENBQUMsMEJBQTBCLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDakcsQ0FBQyxDQUFDLENBQUM7U0FDSjthQUNJO1lBQ0gsT0FBTyxJQUFJLENBQUMsMEJBQTBCLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQzVEO1FBRUQsT0FBTyxnQkFBZ0IsQ0FBQztJQUMxQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGtCQUFJLEdBQUosVUFBSyxRQUFnQjtRQUNuQixJQUFJLGdCQUFnQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4RCxPQUFPLElBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsK0JBQWlCLEdBQWpCO1FBQ0UsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLDBFQUEwRSxDQUFDLENBQUM7UUFFekgsSUFBSSxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM1QixhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxzQkFBUSxHQUFSLFVBQVMsQ0FBUyxFQUFFLENBQVM7UUFDM0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFXRCxrQkFBSSxHQUFKLFVBQUssT0FBZ0I7UUFDbkIsSUFBSSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN4QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDOUI7YUFDSTtZQUNILE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQztJQUVPLHFCQUFPLEdBQWY7UUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQ3BDLENBQUM7SUFFTyxxQkFBTyxHQUFmLFVBQWdCLE9BQWU7UUFDN0IsSUFBSSxPQUFPLEtBQUssU0FBUyxJQUFJLE9BQU8sSUFBSSxJQUFJLEVBQUU7WUFDNUMsbUdBQW1HO1lBQ25HLE9BQU8sR0FBRyxFQUFFLENBQUM7U0FDZDtRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsVUFBQyxPQUFPO1lBQ25CLE9BQU8sQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsbUJBQUssR0FBTDtRQUNFLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBQyxPQUFPO1lBQ25CLE9BQU8sQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGlCQUFHLEdBQUg7UUFDRSxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRS9CLElBQUksT0FBTyxZQUFZLGlCQUFpQixJQUFJLE9BQU8sWUFBWSxnQkFBZ0IsRUFBRTtZQUMvRSxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUM7U0FDdEI7YUFDSTtZQUNILDZDQUE2QztZQUM3QyxNQUFNLElBQUksS0FBSyxDQUFDLGtDQUEyQixPQUFPLE9BQU8sQ0FBRSxDQUFDLENBQUM7U0FDOUQ7SUFDSCxDQUFDO0lBYUQsa0JBQUksR0FBSixVQUFLLFNBQWlCLEVBQUUsS0FBYztRQUNwQyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDdkM7YUFDSTtZQUNILE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNoQztJQUNILENBQUM7SUFFRDs7O09BR0c7SUFDSCx3QkFBVSxHQUFWLFVBQVcsU0FBaUI7UUFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFDLE9BQU87WUFDbkIsT0FBTyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxxQkFBTyxHQUFmLFVBQWdCLFNBQWlCO1FBQy9CLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVPLHFCQUFPLEdBQWYsVUFBZ0IsU0FBaUIsRUFBRSxLQUFhO1FBQzlDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBQyxPQUFPO1lBQ25CLE9BQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBYUQsa0JBQUksR0FBSixVQUFLLGFBQXFCLEVBQUUsS0FBYztRQUN4QyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDM0M7YUFDSTtZQUNILE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNwQztJQUNILENBQUM7SUFFTyxxQkFBTyxHQUFmLFVBQWdCLGFBQXFCO1FBQ25DLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBTyxHQUFHLGFBQWEsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFTyxxQkFBTyxHQUFmLFVBQWdCLGFBQXFCLEVBQUUsS0FBYTtRQUNsRCxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUMsT0FBTztZQUNuQixPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sR0FBRyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdkQsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsb0JBQU0sR0FBTjtRQUFPLHVCQUF1QjthQUF2QixVQUF1QixFQUF2QixxQkFBdUIsRUFBdkIsSUFBdUI7WUFBdkIsa0NBQXVCOztRQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUMsT0FBTztZQUNuQixhQUFhLENBQUMsT0FBTyxDQUFDLFVBQUMsWUFBWTtnQkFDakMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBQyxDQUFDLEVBQUUsS0FBSztvQkFDckMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ3BELENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOztPQUVHO0lBQ0gsb0JBQU0sR0FBTjtRQUNFLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBQyxPQUFPO1lBQ25CLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7WUFDaEMsSUFBSSxNQUFNLEVBQUU7Z0JBQ1YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUM3QjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNILG9CQUFNLEdBQU47UUFDRSxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9CLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQ2xELElBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFFbkUsMkdBQTJHO1FBQzNHLHNGQUFzRjtRQUN0RiwyQ0FBMkM7UUFDM0Msd0dBQXdHO1FBQ3hHLDRGQUE0RjtRQUM1RiwyR0FBMkc7UUFDM0csaUVBQWlFO1FBQ2pFLDRHQUE0RztRQUM1RyxvR0FBb0c7UUFDcEcsMkdBQTJHO1FBQzNHLDJHQUEyRztRQUMzRywrR0FBK0c7UUFFL0csT0FBTztZQUNMLEdBQUcsRUFBRSxXQUFXLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHO1lBQ25DLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJO1NBQ3ZDLENBQUM7SUFDSixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsbUJBQUssR0FBTDtRQUNFLG9FQUFvRTtRQUNwRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO0lBQ3RDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxvQkFBTSxHQUFOO1FBQ0UscUVBQXFFO1FBQ3JFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7SUFDdkMsQ0FBQztJQUVEOzs7T0FHRztJQUNILGtCQUFJLEdBQUo7UUFDRSxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7SUFDeEQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsZ0JBQUUsR0FBRixVQUFHLFNBQWlCLEVBQUUsWUFBZ0Q7UUFBdEUsaUJBZUM7UUFkQyxJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWxDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLO1lBQ25CLElBQUksS0FBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLEVBQUU7Z0JBQ3pCLEtBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO2FBQ3JEO2lCQUNJO2dCQUNILEtBQUksQ0FBQyxPQUFPLENBQUMsVUFBQyxPQUFPO29CQUNuQixPQUFPLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO2dCQUNoRCxDQUFDLENBQUMsQ0FBQzthQUNKO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILGlCQUFHLEdBQUgsVUFBSSxTQUFpQixFQUFFLFlBQWdEO1FBQXZFLGlCQWVDO1FBZEMsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVsQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBSztZQUNuQixJQUFJLEtBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxFQUFFO2dCQUN6QixLQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQzthQUN4RDtpQkFDSTtnQkFDSCxLQUFJLENBQUMsT0FBTyxDQUFDLFVBQUMsT0FBTztvQkFDbkIsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztnQkFDbkQsQ0FBQyxDQUFDLENBQUM7YUFDSjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILHNCQUFRLEdBQVIsVUFBUyxTQUFpQjtRQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUMsT0FBTzs7WUFDbkIsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFO2dCQUNyQixJQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztxQkFDcEMsTUFBTSxDQUFDLFVBQUEsU0FBUyxJQUFJLE9BQUEsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQXBCLENBQW9CLENBQUMsQ0FBQztnQkFFN0MsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFDekIsQ0FBQSxLQUFBLE9BQU8sQ0FBQyxTQUFTLENBQUEsQ0FBQyxHQUFHLFdBQUksVUFBVSxFQUFFO2lCQUN0QzthQUNGO2lCQUNJO2dCQUNILE9BQU8sQ0FBQyxTQUFTLElBQUksR0FBRyxHQUFHLFNBQVMsQ0FBQzthQUN0QztRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILHlCQUFXLEdBQVgsVUFBWSxTQUFpQjtRQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUMsT0FBTzs7WUFDbkIsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFO2dCQUNyQixJQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztxQkFDcEMsTUFBTSxDQUFDLFVBQUEsU0FBUyxJQUFJLE9BQUEsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQXBCLENBQW9CLENBQUMsQ0FBQztnQkFFN0MsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFDekIsQ0FBQSxLQUFBLE9BQU8sQ0FBQyxTQUFTLENBQUEsQ0FBQyxNQUFNLFdBQUksVUFBVSxFQUFFO2lCQUN6QzthQUNGO2lCQUNJO2dCQUNILE9BQU8sQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQzNDLElBQUksTUFBTSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7YUFDbEY7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxzQkFBUSxHQUFSLFVBQVMsU0FBaUI7UUFDeEIsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBRXJCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBQyxPQUFPO1lBQ25CLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtnQkFDckIsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtvQkFDekMsZ0dBQWdHO29CQUNoRyxpREFBaUQ7b0JBQ2pELFFBQVEsR0FBRyxJQUFJLENBQUM7aUJBQ2pCO2FBQ0Y7aUJBQ0k7Z0JBQ0gsSUFBSSxJQUFJLE1BQU0sQ0FBQyxPQUFPLEdBQUcsU0FBUyxHQUFHLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO29CQUMzRSxvQkFBb0I7b0JBQ3BCLFFBQVEsR0FBRyxJQUFJLENBQUM7aUJBQ2pCO2FBQ0Y7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFrQkQsaUJBQUcsR0FBSCxVQUFJLHdCQUFnRCxFQUFFLEtBQWM7UUFDbEUsSUFBSSxPQUFPLHdCQUF3QixLQUFLLFFBQVEsRUFBRTtZQUNoRCxJQUFJLFlBQVksR0FBRyx3QkFBd0IsQ0FBQztZQUU1QyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUMxQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ3pDO2lCQUNJO2dCQUNILE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUNsQztTQUNGO2FBQ0k7WUFDSCxJQUFJLHVCQUF1QixHQUFHLHdCQUF3QixDQUFDO1lBQ3ZELE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLHVCQUF1QixDQUFDLENBQUM7U0FDdkQ7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILHVCQUFTLEdBQVQsVUFBVSxZQUFvQixFQUFFLFlBQWdCO1FBQWhCLDZCQUFBLEVBQUEsZ0JBQWdCO1FBQzlDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFTyxvQkFBTSxHQUFkLFVBQWUsWUFBb0I7UUFDakMsT0FBTyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQU0sWUFBWSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVPLG9CQUFNLEdBQWQsVUFBZSxZQUFvQixFQUFFLEtBQWE7UUFDaEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFDLE9BQU87WUFDbkIsMkVBQTJFO1lBQzNFLE9BQU8sQ0FBQyxLQUFLLENBQU0sWUFBWSxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzNDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU8sOEJBQWdCLEdBQXhCLFVBQXlCLG1CQUFpRDtRQUN4RSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUMsT0FBTztZQUNuQiw2Q0FBNkM7WUFDN0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLG1CQUFtQixDQUFDLENBQUM7UUFDcEQsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDSCxVQUFDO0FBQUQsQ0F4akJBLEFBd2pCQyxJQUFBO0FBeGpCWSxrQkFBRzs7Ozs7O0FDckJoQixJQUFpQixVQUFVLENBaUYxQjtBQWpGRCxXQUFpQixVQUFVO0lBRVosK0JBQW9CLEdBQW9CO1FBQ25ELElBQUksRUFBRSxrQkFBa0I7UUFDeEIsSUFBSSxFQUFFLG9FQUFvRTtRQUMxRSxJQUFJLEVBQUUscUJBQXFCO1FBQzNCLElBQUksRUFBRSwwREFBMEQ7UUFDaEUsSUFBSSxFQUFFLCtCQUErQjtRQUNyQyxJQUFJLEVBQUUsMEJBQTBCO1FBQ2hDLElBQUksRUFBRSwyRUFBMkU7UUFDakYsSUFBSSxFQUFFLCtCQUErQjtRQUNyQyxJQUFJLEVBQUUsbUNBQW1DO1FBQ3pDLElBQUksRUFBRSxzQ0FBc0M7UUFDNUMsSUFBSSxFQUFFLHlDQUF5QztRQUMvQyxJQUFJLEVBQUUsa0RBQWtEO1FBQ3hELElBQUksRUFBRSx1REFBdUQ7UUFDN0QsSUFBSSxFQUFFLDBDQUEwQztRQUNoRCxJQUFJLEVBQUUsbUNBQW1DO1FBQ3pDLElBQUksRUFBRSxpTEFBaUw7UUFDdkwsSUFBSSxFQUFFLHNCQUFzQjtRQUM1QixJQUFJLEVBQUUsOEJBQThCO1FBQ3BDLElBQUksRUFBRSxvQ0FBb0M7UUFDMUMsSUFBSSxFQUFFLGtFQUFrRTtRQUN4RSxJQUFJLEVBQUUsa0NBQWtDO1FBQ3hDLElBQUksRUFBRSx3Q0FBd0M7UUFDOUMsSUFBSSxFQUFFLDZDQUE2QztRQUNuRCxJQUFJLEVBQUUsaUNBQWlDO1FBQ3ZDLElBQUksRUFBRSxrQ0FBa0M7UUFDeEMsSUFBSSxFQUFFLGtFQUFrRTtRQUN4RSxJQUFJLEVBQUUseUJBQXlCO1FBQy9CLElBQUksRUFBRSx3Q0FBd0M7UUFDOUMsSUFBSSxFQUFFLHdCQUF3QjtRQUM5QixJQUFJLEVBQUUsd0RBQXdEO1FBQzlELElBQUksRUFBRSw4Q0FBOEM7UUFDcEQsSUFBSSxFQUFFLDBDQUEwQztRQUNoRCxJQUFJLEVBQUUseUNBQXlDO1FBQy9DLElBQUksRUFBRSxpQ0FBaUM7UUFDdkMsSUFBSSxFQUFFLGlDQUFpQztRQUN2QyxJQUFJLEVBQUUsZ0NBQWdDO1FBQ3RDLElBQUksRUFBRSwyQ0FBMkM7UUFDakQsSUFBSSxFQUFFLHFDQUFxQztRQUMzQyxJQUFJLEVBQUUsbUJBQW1CO1FBQ3pCLElBQUksRUFBRSx1Q0FBdUM7UUFDN0MsSUFBSSxFQUFFLHFDQUFxQztRQUMzQyxJQUFJLEVBQUUsd0JBQXdCO1FBQzlCLElBQUksRUFBRSx5QkFBeUI7UUFDL0IsSUFBSSxFQUFFLDJCQUEyQjtRQUNqQyxJQUFJLEVBQUUseUVBQXlFO1FBQy9FLElBQUksRUFBRSw0Q0FBNEM7UUFDbEQsSUFBSSxFQUFFLHNEQUFzRDtRQUM1RCxJQUFJLEVBQUUsV0FBVztRQUNqQixJQUFJLEVBQUUsaUNBQWlDO1FBQ3ZDLElBQUksRUFBRSw4QkFBOEI7UUFDcEMsSUFBSSxFQUFFLDZEQUE2RDtRQUNuRSxJQUFJLEVBQUUsZ0ZBQWdGO1FBQ3RGLElBQUksRUFBRSxrQ0FBa0M7UUFDeEMsSUFBSSxFQUFFLGtCQUFrQjtRQUN4QixJQUFJLEVBQUUsbURBQW1EO1FBQ3pELElBQUksRUFBRSxzQkFBc0I7UUFDNUIsSUFBSSxFQUFFLDREQUE0RDtRQUNsRSxJQUFJLEVBQUUsa0hBQWtIO1FBQ3hILElBQUksRUFBRSw2RUFBNkU7UUFDbkYsSUFBSSxFQUFFLHlFQUF5RTtRQUMvRSxJQUFJLEVBQUUsbUZBQW1GO0tBQzFGLENBQUM7SUFFVyxnREFBcUMsR0FBRyxVQUFDLEtBQTBEO1FBQzlHLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQztJQUN2QixDQUFDLENBQUM7SUFFVywyQ0FBZ0MsR0FBMkIsVUFBQyxLQUFpQjtRQUN4RixJQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWpFLElBQUksWUFBWSxFQUFFO1lBQ2hCLDZDQUE2QztZQUM3QyxPQUFPLFVBQUcsWUFBWSxnQkFBTSxLQUFLLENBQUMsSUFBSSxNQUFHLENBQUMsQ0FBQyw4QkFBOEI7U0FDMUU7YUFBTTtZQUNMLHVEQUF1RDtZQUN2RCxPQUFPLFVBQUcsS0FBSyxDQUFDLElBQUksY0FBSSxLQUFLLENBQUMsSUFBSSxDQUFFLENBQUM7U0FDdEM7SUFDSCxDQUFDLENBQUM7QUFDSixDQUFDLEVBakZnQixVQUFVLEdBQVYsa0JBQVUsS0FBVixrQkFBVSxRQWlGMUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3JGRCwyQ0FBd0M7QUFDeEMscUNBQW9DO0FBeURwQzs7R0FFRztBQUNIO0lBSUU7UUFGUSxjQUFTLEdBQXlDLEVBQUUsQ0FBQztJQUc3RCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxtQ0FBUyxHQUFULFVBQVUsUUFBcUM7UUFDN0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRDs7T0FFRztJQUNILHVDQUFhLEdBQWIsVUFBYyxRQUFxQztRQUNqRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRDs7T0FFRztJQUNILDhDQUFvQixHQUFwQixVQUFxQixRQUFxQyxFQUFFLE1BQWM7UUFDeEUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSwrQkFBK0IsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxxQ0FBVyxHQUFYLFVBQVksUUFBcUM7UUFDL0MseUVBQXlFO1FBQ3pFLGlIQUFpSDtRQUNqSCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDOUMsSUFBSSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNDLElBQUksa0JBQWtCLENBQUMsUUFBUSxLQUFLLFFBQVEsRUFBRTtnQkFDNUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQzNCLHVCQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztnQkFDdEQsT0FBTyxJQUFJLENBQUM7YUFDYjtTQUNGO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQ7O09BRUc7SUFDSCx3Q0FBYyxHQUFkO1FBQ0UsNEdBQTRHO1FBQzVHLEtBQXFCLFVBQWMsRUFBZCxLQUFBLElBQUksQ0FBQyxTQUFTLEVBQWQsY0FBYyxFQUFkLElBQWMsRUFBRTtZQUFoQyxJQUFJLFFBQVEsU0FBQTtZQUNmLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNsQjtRQUVELElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsa0NBQVEsR0FBUixVQUFTLE1BQWMsRUFBRSxJQUFpQjtRQUFqQixxQkFBQSxFQUFBLFdBQWlCO1FBQ3hDLElBQUksaUJBQWlCLEdBQUcsRUFBRSxDQUFDO1FBRTNCLHNCQUFzQjtRQUN0QixrSEFBa0g7UUFDbEgsOEdBQThHO1FBQzlHLDJDQUEyQztRQUMzQyxtSEFBbUg7UUFDbkgsNEZBQTRGO1FBQzVGLDRHQUE0RztRQUM1RyxJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQyxLQUFxQixVQUFTLEVBQVQsdUJBQVMsRUFBVCx1QkFBUyxFQUFULElBQVMsRUFBRTtZQUEzQixJQUFJLFFBQVEsa0JBQUE7WUFDZixRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztZQUU1QixJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUUsRUFBRTtnQkFDckIsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ2xDO1NBQ0Y7UUFFRCwyQkFBMkI7UUFDM0IsS0FBNkIsVUFBaUIsRUFBakIsdUNBQWlCLEVBQWpCLCtCQUFpQixFQUFqQixJQUFpQixFQUFFO1lBQTNDLElBQUksZ0JBQWdCLDBCQUFBO1lBQ3ZCLHVCQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztTQUNyRDtJQUNILENBQUM7SUFFRDs7O09BR0c7SUFDSCxrQ0FBUSxHQUFSO1FBQ0UsdUdBQXVHO1FBQ3ZHLDBHQUEwRztRQUMxRyxPQUE0QixJQUFJLENBQUM7SUFDbkMsQ0FBQztJQUNILHNCQUFDO0FBQUQsQ0FqR0EsQUFpR0MsSUFBQTtBQWpHWSwwQ0FBZTtBQW1HNUI7OztHQUdHO0FBQ0g7SUFLRSw4QkFBWSxRQUFxQyxFQUFFLElBQXFCO1FBQXJCLHFCQUFBLEVBQUEsWUFBcUI7UUFDdEUsSUFBSSxDQUFDLGFBQWEsR0FBRyxRQUFRLENBQUM7UUFDOUIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQU1ELHNCQUFJLDBDQUFRO1FBSlo7OztXQUdHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDNUIsQ0FBQzs7O09BQUE7SUFFRDs7OztPQUlHO0lBQ0gsbUNBQUksR0FBSixVQUFLLE1BQWMsRUFBRSxJQUFVO1FBQzdCLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRDs7O09BR0c7SUFDSCxxQ0FBTSxHQUFOO1FBQ0UsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ25CLENBQUM7SUFFRCxvQ0FBSyxHQUFMO0lBQ0EsQ0FBQztJQUNILDJCQUFDO0FBQUQsQ0FyQ0EsQUFxQ0MsSUFBQTtBQU9EOztHQUVHO0FBQ0g7SUFBNEQsbURBQWtDO0lBVTVGLHlDQUFZLFFBQXFDLEVBQUUsTUFBYztRQUFqRSxZQUNFLGtCQUFNLFFBQVEsQ0FBQyxTQWlDaEI7UUEvQkMsS0FBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFFckIsa0RBQWtEO1FBQ2xELElBQU0saUJBQWlCLEdBQUc7WUFDeEIsS0FBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMvQixDQUFDLENBQUM7UUFFRixpQ0FBaUM7UUFDakMsS0FBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLGlCQUFPLENBQUMsS0FBSSxDQUFDLE1BQU0sRUFBRTtZQUM5QyxJQUFJLEtBQUksQ0FBQyxhQUFhLEVBQUU7Z0JBQ3RCLEtBQUksQ0FBQyxTQUFTLENBQUMsS0FBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsS0FBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDbkUsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLDJGQUEyRjtnQkFDaEgsS0FBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7YUFDM0I7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILGdIQUFnSDtRQUNoSCwwRkFBMEY7UUFDMUYsS0FBSSxDQUFDLHlCQUF5QixHQUFHLFVBQUMsTUFBYyxFQUFFLElBQVU7WUFDMUQsc0RBQXNEO1lBQ3RELElBQUksS0FBSSxDQUFDLGVBQWUsRUFBRSxFQUFFO2dCQUMxQixLQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDN0IsaUJBQWlCLEVBQUUsQ0FBQztnQkFDcEIsT0FBTzthQUNSO1lBRUQsS0FBSSxDQUFDLGFBQWEsR0FBRztnQkFDbkIsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsSUFBSSxFQUFFLElBQUk7YUFDWCxDQUFDO1FBQ0osQ0FBQyxDQUFDOztJQUNKLENBQUM7SUFFTyx5REFBZSxHQUF2QjtRQUNFLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFFTyxtREFBUyxHQUFqQixVQUFrQixNQUFjLEVBQUUsSUFBVTtRQUMxQywwQ0FBMEM7UUFDMUMsaUJBQU0sSUFBSSxZQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsOENBQUksR0FBSixVQUFLLE1BQWMsRUFBRSxJQUFVO1FBQzdCLGtGQUFrRjtRQUNsRixJQUFJLENBQUMseUJBQXlCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCwrQ0FBSyxHQUFMO1FBQ0UsaUJBQU0sS0FBSyxXQUFFLENBQUM7UUFDZCxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFDSCxzQ0FBQztBQUFELENBaEVBLEFBZ0VDLENBaEUyRCxvQkFBb0IsR0FnRS9FOzs7Ozs7QUNuUkQsSUFBTSx3QkFBd0IsR0FBRywwQkFBMEIsQ0FBQztBQUU1RDtJQUlFLGdDQUFvQixnQkFBd0I7UUFBNUMsaUJBVUM7UUFWbUIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFRO1FBRnBDLCtCQUEwQixHQUFZLElBQUksQ0FBQztRQWMzQyxjQUFTLEdBQUcsVUFBQyxDQUFnQjtZQUNuQyxJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFO2dCQUN0QyxPQUFPO2FBQ1I7WUFFRCxLQUFJLENBQUMsMEJBQTBCLEdBQUcsSUFBSSxDQUFDO1FBQ3pDLENBQUMsQ0FBQztRQUVNLDRCQUF1QixHQUFHLGNBQU0sT0FBQSxDQUFDLEtBQUksQ0FBQywwQkFBMEIsR0FBRyxLQUFLLENBQUMsRUFBekMsQ0FBeUMsQ0FBQztRQUUxRSxZQUFPLEdBQUcsVUFBQyxFQUErQjtnQkFBckIsT0FBTyxZQUFBO1lBQ2xDLElBQ0UsS0FBSSxDQUFDLDBCQUEwQjtnQkFDL0IsYUFBYSxDQUFDLE9BQU8sQ0FBQztnQkFDdEIsWUFBWSxDQUFDLE9BQU8sRUFBRSxLQUFJLENBQUMsZ0JBQWdCLENBQUM7Z0JBQzVDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsd0JBQXdCLENBQUMsRUFDckQ7Z0JBQ0EsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQzthQUNqRDtRQUNILENBQUMsQ0FBQztRQUVNLFdBQU0sR0FBRyxVQUFDLEVBQStCO2dCQUFyQixPQUFPLFlBQUE7WUFDakMsSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQzFCLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUM7YUFDcEQ7UUFDSCxDQUFDLENBQUM7UUFwQ0EsSUFBSSxDQUFDLGVBQWUsR0FBRztZQUNyQixTQUFTLEVBQUUsSUFBSSxDQUFDLHVCQUF1QjtZQUN2QyxXQUFXLEVBQUUsSUFBSSxDQUFDLHVCQUF1QjtZQUN6QyxVQUFVLEVBQUUsSUFBSSxDQUFDLHVCQUF1QjtZQUN4QyxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDdkIsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQ25CLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTTtTQUNsQixDQUFDO1FBQ0YsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7SUFDaEMsQ0FBQztJQTZCTyx1REFBc0IsR0FBOUI7UUFDRSxLQUFLLElBQU0sT0FBSyxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDeEMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLE9BQUssRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQUssQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3JFO0lBQ0gsQ0FBQztJQUVPLHlEQUF3QixHQUFoQztRQUNFLEtBQUssSUFBTSxPQUFLLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN4QyxRQUFRLENBQUMsbUJBQW1CLENBQUMsT0FBSyxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDeEU7SUFDSCxDQUFDO0lBRU0sd0NBQU8sR0FBZDtRQUNFLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFDSCw2QkFBQztBQUFELENBMURBLEFBMERDLElBQUE7QUExRFksd0RBQXNCO0FBNERuQyxTQUFTLFlBQVksQ0FBQyxPQUFnQixFQUFFLGdCQUF3QjtJQUM5RCxPQUFPLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BELENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBQyxPQUFnQjtJQUNyQyxPQUFPLENBQ0wsT0FBTyxZQUFZLFdBQVcsSUFBSSxPQUFPLENBQUMsU0FBUyxZQUFZLFlBQVksQ0FDNUUsQ0FBQztBQUNKLENBQUM7Ozs7OztBQ3JFRDs7Ozs7OztHQU9HO0FBRUg7O0dBRUc7QUFDSCxJQUFZLDZCQUVYO0FBRkQsV0FBWSw2QkFBNkI7SUFDdkMsb0VBQW1DLENBQUE7QUFDckMsQ0FBQyxFQUZXLDZCQUE2QixHQUE3QixxQ0FBNkIsS0FBN0IscUNBQTZCLFFBRXhDOzs7Ozs7QUNmRCxJQUFpQixJQUFJLENBT3BCO0FBUEQsV0FBaUIsSUFBSTtJQUVuQixJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7SUFFYixTQUFnQixJQUFJO1FBQ2xCLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUZlLFNBQUksT0FFbkIsQ0FBQTtBQUNILENBQUMsRUFQZ0IsSUFBSSxHQUFKLFlBQUksS0FBSixZQUFJLFFBT3BCOzs7Ozs7QUNQRCw2QkFBMEI7QUFlMUI7O0dBRUc7QUFDSDtJQUFBO1FBRVUsVUFBSyxHQUF5QyxFQUFFLENBQUM7SUFxRDNELENBQUM7SUFuREM7Ozs7OztPQU1HO0lBQ0gsMEJBQUksR0FBSixVQUFLLEdBQVcsRUFBRSxjQUFtQztRQUFyRCxpQkF1Q0M7UUF0Q0MsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDcEIsMEdBQTBHO1lBQzFHLHFFQUFxRTtZQUNyRSxJQUFJLE9BQUssR0FBcUI7Z0JBQzVCLEdBQUcsRUFBRSxHQUFHO2dCQUNSLEtBQUssRUFBRSxJQUFJLFNBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO2dCQUN6QixjQUFjLEVBQUUsY0FBYztnQkFDOUIsTUFBTSxFQUFFLEtBQUs7Z0JBQ2IsS0FBSyxFQUFFLENBQUM7Z0JBQ1IsTUFBTSxFQUFFLENBQUM7YUFDVixDQUFDO1lBQ0YsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFLLENBQUM7WUFFeEIsNEZBQTRGO1lBQzVGLE9BQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFDLENBQUM7Z0JBQ3ZCLE9BQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO2dCQUNwQixPQUFLLENBQUMsS0FBSyxHQUFzQixPQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUUsQ0FBQyxLQUFLLENBQUM7Z0JBQzNELE9BQUssQ0FBQyxNQUFNLEdBQXNCLE9BQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBRSxDQUFDLE1BQU0sQ0FBQztnQkFFN0QsS0FBSSxDQUFDLGtCQUFrQixDQUFDLE9BQUssQ0FBQyxDQUFDO1lBQ2pDLENBQUMsQ0FBQyxDQUFDO1lBRUgseUNBQXlDO1lBQ3pDLE9BQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxPQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDcEM7YUFBTTtZQUNMLCtGQUErRjtZQUMvRixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRTVCLGtHQUFrRztZQUNsRyw4R0FBOEc7WUFDOUcsaUJBQWlCO1lBQ2pCLEtBQUssQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO1lBRXRDLDJHQUEyRztZQUMzRyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7Z0JBQ2hCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNoQztTQUNGO0lBQ0gsQ0FBQztJQUVPLHdDQUFrQixHQUExQixVQUEyQixLQUF1QjtRQUNoRCxLQUFLLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUNILGtCQUFDO0FBQUQsQ0F2REEsQUF1REMsSUFBQTtBQXZEWSxrQ0FBVzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNsQnhCLGdFQUErQztBQUMvQyxnRUFBK0M7QUFDL0MsZ0VBQStDO0FBR2xDLFFBQUEsbUJBQW1CLEdBQWlCO0lBQy9DLElBQUksRUFBRSxpQkFBWTtJQUNsQixJQUFJLEVBQUUsaUJBQVk7SUFDbEIsSUFBSSxFQUFFLGlCQUFZO0NBQ25CLENBQUM7QUFFRixJQUFNLHlCQUF5QixHQUF1QjtJQUNwRCxRQUFRLEVBQUUsSUFBSTtJQUNkLFlBQVksRUFBRSwyQkFBbUI7Q0FDbEMsQ0FBQztBQW1GRjtJQUlFLGNBQVksTUFBMEI7UUFDcEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRU0sd0JBQVMsR0FBaEIsVUFBaUIsTUFBMEI7UUFDekMsSUFBTSxZQUFZLHlCQUFRLHlCQUF5QixHQUFLLE1BQU0sQ0FBRSxDQUFDO1FBQ2pFLElBQU0scUJBQXFCLEdBQUcsWUFBWSxDQUFDLFFBQVEsS0FBSyxNQUFNLENBQUM7UUFDL0QsSUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLHdDQUF3QyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM5RixJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxxQkFBcUIsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsb0JBQW9CLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVjLHFCQUFnQixHQUEvQixVQUFnQyxZQUEwQixFQUFFLFFBQWdCO1FBQzFFLE9BQU8sWUFBWSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRU8sdURBQXdDLEdBQWhELFVBQWlELFlBQStCO1FBQS9CLDZCQUFBLEVBQUEsaUJBQStCO1FBQzlFLElBQU0sZUFBZSx5QkFBc0IsMkJBQW1CLEdBQUssWUFBWSxDQUFFLENBQUM7UUFDbEYsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFDLGtCQUFrQixFQUFFLFFBQVE7O1lBQ3RFLElBQUksVUFBVSxHQUFHLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMzQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQywyQkFBbUIsRUFBRSxRQUFRLENBQUMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxFQUFFO2dCQUN6RyxVQUFVLHlCQUFRLDJCQUFtQixDQUFDLFFBQVEsQ0FBQyxHQUFLLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBRSxDQUFDO2FBQzlFO1lBQ0QsNkJBQVksa0JBQWtCLGdCQUFHLFFBQVEsSUFBRyxVQUFVLE9BQUc7UUFDM0QsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztJQUVPLGlDQUFrQixHQUExQixVQUNFLFFBQWdCLEVBQ2hCLCtCQUF3QyxFQUN4QyxZQUEwQjtRQUUxQixJQUFJLCtCQUErQixFQUFFO1lBQ25DLElBQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO1lBRS9DLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxZQUFZLENBQUMsRUFBRTtnQkFDckQsSUFBSSxDQUFDLFFBQVEsR0FBRyxZQUFZLENBQUM7Z0JBQzdCLE9BQU87YUFDUjtZQUNELElBQU0scUJBQXFCLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdkQsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLHFCQUFxQixDQUFDLEVBQUU7Z0JBQzlELElBQUksQ0FBQyxRQUFRLEdBQUcscUJBQXFCLENBQUM7Z0JBQ3RDLE9BQU87YUFDUjtTQUNGO1FBRUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVPLG1DQUFvQixHQUE1QixVQUE2QixZQUEwQjtRQUNyRCxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDcEMsTUFBTSxDQUFDLFVBQUMsS0FBSyxFQUFFLElBQUksSUFBSyxPQUFBLHVCQUFNLEtBQUssR0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRyxFQUE3QyxDQUE2QyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFTyxxREFBc0MsR0FBOUMsVUFBK0MsSUFBWSxFQUFFLE1BQVc7UUFDdEUsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzlELElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDeEIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE9BQU8sT0FBTzthQUNYLEdBQUcsQ0FBQyxVQUFDLENBQVMsSUFBSyxPQUFBLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBbkMsQ0FBbUMsQ0FBQzthQUN2RCxNQUFNLENBQUMsVUFBQyxHQUFHLEVBQUUsRUFBYztnQkFBWixHQUFHLFNBQUEsRUFBRSxLQUFLLFdBQUE7WUFBTyxPQUFBLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHO1FBQWxFLENBQWtFLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDL0csQ0FBQztJQUVNLDJCQUFZLEdBQW5CLFVBQ0UsR0FBWSxFQUNaLE1BQXdDO1FBRjFDLGlCQW9CQztRQWhCQyxPQUFPO1lBQ0wsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLEVBQUUsZ0dBQWdHO2dCQUNqSCxPQUFPLFNBQVMsQ0FBQzthQUNsQjtZQUNELElBQUksZ0JBQWdCLEdBQUcsS0FBSSxDQUFDLFVBQVUsQ0FBQyxHQUFhLENBQUMsQ0FBQztZQUV0RCxJQUFJLGdCQUFnQixJQUFJLElBQUksRUFBRTtnQkFDNUIsZ0JBQWdCLEdBQUcsR0FBYSxDQUFDO2FBQ2xDO1lBRUQsSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFO2dCQUNsQixnQkFBZ0IsR0FBRyxLQUFJLENBQUMsc0NBQXNDLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDMUY7WUFFRCxPQUFPLGdCQUFnQixDQUFDO1FBQzFCLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFTSxrQ0FBbUIsR0FBMUIsVUFBMkIsSUFBcUI7UUFDOUMsT0FBTyxPQUFPLElBQUksS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDcEQsQ0FBQztJQUNILFdBQUM7QUFBRCxDQTlGQSxBQThGQyxJQUFBO0FBRVksUUFBQSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQzs7O0FDak14RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUN2RWEsUUFBQSxPQUFPLEdBQVcsYUFBYSxDQUFDO0FBQzdDLGFBQWE7QUFDYix5Q0FBMkQ7QUFBbEQsc0dBQUEsU0FBUyxPQUFBO0FBQUUsOEdBQUEsaUJBQWlCLE9BQUE7QUFDckMsWUFBWTtBQUNaLHlDQUF3QztBQUEvQixzR0FBQSxTQUFTLE9BQUE7QUFDbEIsNkNBQTRDO0FBQW5DLDBHQUFBLFdBQVcsT0FBQTtBQUNwQixRQUFRO0FBQ1IsMkNBQTBDO0FBQWpDLHdHQUFBLFVBQVUsT0FBQTtBQUNuQiw2Q0FBNEM7QUFBbkMsMEdBQUEsV0FBVyxPQUFBO0FBQ3BCLDZDQUE0QztBQUFuQywwR0FBQSxXQUFXLE9BQUE7QUFDcEIscUNBQW9DO0FBQTNCLGtHQUFBLE9BQU8sT0FBQTtBQUNoQiwrQ0FBOEM7QUFBckMsNEdBQUEsWUFBWSxPQUFBO0FBQ3JCLCtDQUE4QztBQUFyQyw0R0FBQSxZQUFZLE9BQUE7QUFDckIsMkNBQTBDO0FBQWpDLHdHQUFBLFVBQVUsT0FBQTtBQUNuQixlQUFlO0FBQ2YsNENBQTJDO0FBQWxDLDRGQUFBLElBQUksT0FBQTtBQUNiLHFCQUFxQjtBQUNyQiwyRUFBMEU7QUFBakUsc0hBQUEsaUJBQWlCLE9BQUE7QUFDMUIsdUVBQXNFO0FBQTdELGtIQUFBLGVBQWUsT0FBQTtBQUN4QiwrRUFBOEU7QUFBckUsMEhBQUEsbUJBQW1CLE9BQUE7QUFDNUIsK0VBQStGO0FBQXRGLDBIQUFBLG1CQUFtQixPQUFBO0FBQUUsc0hBQUEsZUFBZSxPQUFBO0FBQzdDLGFBQWE7QUFDYiw4Q0FBNkM7QUFBcEMsZ0dBQUEsTUFBTSxPQUFBO0FBQ2Ysc0RBQXFEO0FBQTVDLHdHQUFBLFVBQVUsT0FBQTtBQUNuQiw4RUFBNkU7QUFBcEUsZ0lBQUEsc0JBQXNCLE9BQUE7QUFDL0Isa0ZBQWlGO0FBQXhFLG9JQUFBLHdCQUF3QixPQUFBO0FBQ2pDLG9FQUEwRjtBQUFqRixzSEFBQSxpQkFBaUIsT0FBQTtBQUFFLDBIQUFBLHFCQUFxQixPQUFBO0FBQ2pELDBFQUF5RTtBQUFoRSw0SEFBQSxvQkFBb0IsT0FBQTtBQUM3QixnREFBK0M7QUFBdEMsa0dBQUEsT0FBTyxPQUFBO0FBQ2hCLG9EQUFtRDtBQUExQyxzR0FBQSxTQUFTLE9BQUE7QUFDbEIsb0VBQW1FO0FBQTFELHNIQUFBLGlCQUFpQixPQUFBO0FBQzFCLDREQUEyRDtBQUFsRCw4R0FBQSxhQUFhLE9BQUE7QUFDdEIsMEVBQXlFO0FBQWhFLDRIQUFBLG9CQUFvQixPQUFBO0FBQzdCLDBEQUF5RDtBQUFoRCw0R0FBQSxZQUFZLE9BQUE7QUFDckIsNEVBQTJFO0FBQWxFLDhIQUFBLHFCQUFxQixPQUFBO0FBQzlCLHNFQUFxRTtBQUE1RCx3SEFBQSxrQkFBa0IsT0FBQTtBQUMzQiw4REFBNkQ7QUFBcEQsZ0hBQUEsY0FBYyxPQUFBO0FBQ3ZCLG9EQUFtRDtBQUExQyxzR0FBQSxTQUFTLE9BQUE7QUFDbEIsd0RBQXVEO0FBQTlDLDBHQUFBLFdBQVcsT0FBQTtBQUNwQixvREFBbUQ7QUFBMUMsc0dBQUEsU0FBUyxPQUFBO0FBQ2xCLDRDQUEyQztBQUFsQyw4RkFBQSxLQUFLLE9BQUE7QUFDZCw0RUFBMkU7QUFBbEUsOEhBQUEscUJBQXFCLE9BQUE7QUFDOUIsd0VBQXVFO0FBQTlELDBIQUFBLG1CQUFtQixPQUFBO0FBQzVCLG9FQUFtRTtBQUExRCxzSEFBQSxpQkFBaUIsT0FBQTtBQUMxQixrRUFBaUU7QUFBeEQsb0hBQUEsZ0JBQWdCLE9BQUE7QUFDekIsb0RBQW1EO0FBQTFDLHNHQUFBLFNBQVMsT0FBQTtBQUNsQix3RUFBdUU7QUFBOUQsMEhBQUEsbUJBQW1CLE9BQUE7QUFDNUIsNEVBQTJFO0FBQWxFLDhIQUFBLHFCQUFxQixPQUFBO0FBQzlCLDBEQUF5RDtBQUFoRCw0R0FBQSxZQUFZLE9BQUE7QUFDckIsZ0VBQStEO0FBQXRELGtIQUFBLGVBQWUsT0FBQTtBQUN4QixvRUFBbUU7QUFBMUQsc0hBQUEsaUJBQWlCLE9BQUE7QUFDMUIsa0RBQWlEO0FBQXhDLG9HQUFBLFFBQVEsT0FBQTtBQUNqQix3RUFBdUU7QUFBOUQsMEhBQUEsbUJBQW1CLE9BQUE7QUFDNUIsMERBQXlEO0FBQWhELDRHQUFBLFlBQVksT0FBQTtBQUNyQiwwREFBeUQ7QUFBaEQsNEdBQUEsWUFBWSxPQUFBO0FBQ3JCLDhEQUE2RDtBQUFwRCxnSEFBQSxjQUFjLE9BQUE7QUFDdkIsOERBQTZEO0FBQXBELGdIQUFBLGNBQWMsT0FBQTtBQUN2Qiw4RUFBNkU7QUFBcEUsZ0lBQUEsc0JBQXNCLE9BQUE7QUFDL0Isa0VBQWlFO0FBQXhELG9IQUFBLGdCQUFnQixPQUFBO0FBQ3pCLGtFQUFpRTtBQUF4RCxvSEFBQSxnQkFBZ0IsT0FBQTtBQUN6QixnRUFBK0Q7QUFBdEQsa0hBQUEsZUFBZSxPQUFBO0FBQ3hCLDRFQUEyRTtBQUFsRSw4SEFBQSxxQkFBcUIsT0FBQTtBQUM5Qix3REFBdUQ7QUFBOUMsMEdBQUEsV0FBVyxPQUFBO0FBQ3BCLDREQUFpRjtBQUF4RSw4R0FBQSxhQUFhLE9BQUE7QUFBRSxxSEFBQSxvQkFBb0IsT0FBQTtBQUM1Qyx3RUFBdUU7QUFBOUQsMEhBQUEsbUJBQW1CLE9BQUE7QUFDNUIsMERBQXlEO0FBQWhELDRHQUFBLFlBQVksT0FBQTtBQUNyQiwwRkFBeUY7QUFBaEYsNElBQUEsNEJBQTRCLE9BQUE7QUFDckMsOENBQTZDO0FBQXBDLGdHQUFBLE1BQU0sT0FBQTtBQUNmLG1HQUFrRztBQUF6RixvSUFBQSx3QkFBd0IsT0FBQTtBQUNqQyx1R0FBc0c7QUFBN0Ysd0lBQUEsMEJBQTBCLE9BQUE7QUFDbkMsK0ZBQThGO0FBQXJGLGdJQUFBLHNCQUFzQixPQUFBO0FBQy9CLHVGQUFzRjtBQUE3RSx3SEFBQSxrQkFBa0IsT0FBQTtBQUMzQix5RkFBd0Y7QUFBL0UsMEhBQUEsbUJBQW1CLE9BQUE7QUFDNUIsMkZBQTBGO0FBQWpGLDRIQUFBLG9CQUFvQixPQUFBO0FBQzdCLHFGQUFvRjtBQUEzRSxzSEFBQSxpQkFBaUIsT0FBQTtBQUMxQixtR0FBa0c7QUFBekYsb0lBQUEsd0JBQXdCLE9BQUE7QUFDakMsNkZBQTRGO0FBQW5GLDhIQUFBLHFCQUFxQixPQUFBO0FBQzlCLDJGQUEwRjtBQUFqRiw0SEFBQSxvQkFBb0IsT0FBQTtBQUM3QiwrRkFBOEY7QUFBckYsZ0lBQUEsc0JBQXNCLE9BQUE7QUFDL0IseUdBQXdHO0FBQS9GLDBJQUFBLDJCQUEyQixPQUFBO0FBQ3BDLGdEQUErQztBQUF0QyxrR0FBQSxPQUFPLE9BQUE7QUFDaEIsZ0VBQStEO0FBQXRELGtIQUFBLGVBQWUsT0FBQTtBQUN4QixvRUFBbUU7QUFBMUQsc0hBQUEsaUJBQWlCLE9BQUE7QUFDMUIsb0VBQW1FO0FBQTFELHNIQUFBLGlCQUFpQixPQUFBO0FBQzFCLHdGQUF1RjtBQUE5RSwwSUFBQSwyQkFBMkIsT0FBQTtBQUNwQyx3RkFBdUY7QUFBOUUsMElBQUEsMkJBQTJCLE9BQUE7QUFDcEMscUdBQW9HO0FBQTNGLHNJQUFBLHlCQUF5QixPQUFBO0FBQ2xDLG9FQUFtRTtBQUExRCxzSEFBQSxpQkFBaUIsT0FBQTtBQUMxQiwwREFBeUQ7QUFBaEQsNEdBQUEsWUFBWSxPQUFBO0FBRXJCLHFDQUFxQztBQUNyQyw4RkFBOEY7QUFDOUYsSUFBSSxPQUFPLE1BQU0sQ0FBQyxNQUFNLEtBQUssVUFBVSxFQUFFO0lBQ3ZDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsVUFBUyxNQUFXO1FBQ2xDLFlBQVksQ0FBQztRQUNiLElBQUksTUFBTSxJQUFJLElBQUksRUFBRTtZQUNsQixNQUFNLElBQUksU0FBUyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7U0FDbkU7UUFFRCxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3JELElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM5QixJQUFJLE1BQU0sSUFBSSxJQUFJLEVBQUU7Z0JBQ2xCLEtBQUssSUFBSSxHQUFHLElBQUksTUFBTSxFQUFFO29CQUN0QixJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUU7d0JBQ3JELE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7cUJBQzNCO2lCQUNGO2FBQ0Y7U0FDRjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUMsQ0FBQztDQUNIOzs7Ozs7QUM3R0QsSUFBWSxtQkFJWDtBQUpELFdBQVksbUJBQW1CO0lBQzdCLGtEQUEyQixDQUFBO0lBQzNCLGtEQUEyQixDQUFBO0lBQzNCLGdFQUF5QyxDQUFBO0FBQzNDLENBQUMsRUFKVyxtQkFBbUIsR0FBbkIsMkJBQW1CLEtBQW5CLDJCQUFtQixRQUk5QjtBQW1CRCxTQUFnQixtQkFBbUIsQ0FBQyxNQUFxRDtJQUN2RixLQUFLLElBQU0sR0FBRyxJQUFJLG1CQUFtQixFQUFFO1FBQ3JDLElBQUksbUJBQW1CLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzlGLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7S0FDRjtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQVJELGtEQVFDOzs7Ozs7QUNsQ0QscURBQWlFO0FBQ2pFLCtDQUE0QztBQUk1QyxJQUFpQixXQUFXLENBZ00zQjtBQWhNRCxXQUFpQixXQUFXO0lBRTFCLElBQVksV0FNWDtJQU5ELFdBQVksV0FBVztRQUNyQiw2Q0FBSSxDQUFBO1FBQ0oscURBQVEsQ0FBQTtRQUNSLG1EQUFPLENBQUE7UUFDUCxpREFBTSxDQUFBO1FBQ04scURBQVEsQ0FBQTtJQUNWLENBQUMsRUFOVyxXQUFXLEdBQVgsdUJBQVcsS0FBWCx1QkFBVyxRQU10QjtJQUVELFNBQWdCLG9CQUFvQixDQUFDLE1BQWlCO1FBQ3BELE9BQU8sTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLE1BQU0sQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUZlLGdDQUFvQix1QkFFbkMsQ0FBQTtJQUVELFNBQWdCLFFBQVEsQ0FBQyxNQUFpQjtRQUN4QyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNyQixPQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUM7U0FDN0I7YUFBTSxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUM3QixPQUFPLFdBQVcsQ0FBQyxPQUFPLENBQUM7U0FDNUI7YUFBTSxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUM1QixPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUM7U0FDM0I7YUFBTSxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUU7WUFDckMsT0FBTyxXQUFXLENBQUMsUUFBUSxDQUFDO1NBQzdCO2FBQU07WUFDTCxPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUM7U0FDekI7SUFDSCxDQUFDO0lBWmUsb0JBQVEsV0FZdkIsQ0FBQTtJQUVEOzs7O09BSUc7SUFDSCxTQUFnQixxQ0FBcUMsQ0FBQyxNQUFpQjtRQUNyRSxJQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDNUMsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDbkIsT0FBTyxXQUFXLENBQUM7U0FDcEI7UUFFRCxJQUFNLGtCQUFrQixHQUFHLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDeEUsT0FBTyxXQUFXLEdBQUcsa0JBQWtCLENBQUM7SUFDMUMsQ0FBQztJQVJlLGlEQUFxQyx3Q0FRcEQsQ0FBQTtJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsU0FBZ0IscUJBQXFCLENBQUMsTUFBaUIsRUFBRSxZQUF3QjtRQUF4Qiw2QkFBQSxFQUFBLGdCQUF3QjtRQUMvRSxPQUFPLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEtBQUssSUFBSSxZQUFZLENBQUM7SUFDdEYsQ0FBQztJQUZlLGlDQUFxQix3QkFFcEMsQ0FBQTtJQUVEOzs7OztPQUtHO0lBQ0gsU0FBZ0IsOEJBQThCLENBQUMsTUFBaUI7UUFDOUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNwQixPQUFPLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1NBQ2xDO1FBRUQsSUFBTSxnQkFBZ0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNoRCxJQUFNLFlBQVksR0FBRyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUMvQyxJQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7UUFFNUMsSUFBTSxHQUFHLEdBQUcsV0FBVyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUM3QyxJQUFNLEtBQUssR0FBRyxXQUFXLEdBQUcsQ0FBQyxZQUFZLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQztRQUU5RCxPQUFPLEVBQUUsS0FBSyxPQUFBLEVBQUUsR0FBRyxLQUFBLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBYmUsMENBQThCLGlDQWE3QyxDQUFBO0lBTUQ7UUFNRSx1Q0FBWSxNQUFpQjtZQUE3QixpQkFZQztZQWRPLHNDQUFpQyxHQUFHLElBQUksaUNBQWUsRUFBK0MsQ0FBQztZQUc3RyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztZQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsU0FBUyxDQUFDO1lBRXBDLElBQUksaUJBQWlCLEdBQUc7Z0JBQ3RCLEtBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNoQixDQUFDLENBQUM7WUFDRiwyRkFBMkY7WUFDM0YsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztZQUN0RSw4R0FBOEc7WUFDOUcsOENBQThDO1lBQzlDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDdkUsQ0FBQztRQUVELDhDQUFNLEdBQU47WUFDRSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUU7Z0JBQ3hCLElBQUkscUJBQXFCLEdBQUcsV0FBVyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFFMUUsbURBQW1EO2dCQUNuRCxJQUFJLHFCQUFxQixLQUFLLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtvQkFDckQsSUFBSSxDQUFDLGlDQUFpQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsa0JBQWtCLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO29CQUM1RyxJQUFJLENBQUMsa0JBQWtCLEdBQUcscUJBQXFCLENBQUM7aUJBQ2pEO2FBQ0Y7UUFDSCxDQUFDO1FBRUQsc0JBQUkseUVBQThCO2lCQUFsQztnQkFDRSxPQUFPLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUMzRCxDQUFDOzs7V0FBQTtRQUNILG9DQUFDO0lBQUQsQ0FuQ0EsQUFtQ0MsSUFBQTtJQW5DWSx5Q0FBNkIsZ0NBbUN6QyxDQUFBO0lBTUQ7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQWtCRztJQUNIO1FBT0UsNEJBQVksTUFBaUIsRUFBRSxTQUE0QjtZQUEzRCxpQkEyQkM7WUE5Qk8scUJBQWdCLEdBQUcsSUFBSSxpQ0FBZSxFQUEwQyxDQUFDO1lBSXZGLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1lBQzNCLElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO1lBRXRCLElBQUksWUFBWSxHQUFHO2dCQUNqQixLQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDaEIsQ0FBQyxDQUFDO1lBQ0YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNwRSxtQ0FBbUM7WUFDbkMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFFekQsNkNBQTZDO1lBQzdDLHFGQUFxRjtZQUNyRixrRkFBa0Y7WUFDbEYsSUFBSSwyQkFBWSxDQUFDLFNBQVMsSUFBSSwyQkFBWSxDQUFDLFFBQVEsRUFBRTtnQkFDbkQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUM7YUFDakU7WUFFRCwyREFBMkQ7WUFDM0QsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxlQUFlLEVBQUU7Z0JBQzlDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsZUFBZSxFQUFFLFlBQVksQ0FBQyxDQUFDO2FBQ3JFO1lBRUQsMkVBQTJFO1lBQzNFLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQ25FLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsZUFBZSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ3RFLENBQUM7UUFFRCxtQ0FBTSxHQUFOO1lBQ0UsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUVuQywyR0FBMkc7WUFDM0csdUdBQXVHO1lBQ3ZHLElBQUksT0FBTyxLQUFLLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ3pCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO2dCQUMvRCxJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQzthQUNyQjtRQUNILENBQUM7UUFFRCxzQkFBSSw2Q0FBYTtpQkFBakI7Z0JBQ0UsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDMUMsQ0FBQzs7O1dBQUE7UUFDSCx5QkFBQztJQUFELENBbERBLEFBa0RDLElBQUE7SUFsRFksOEJBQWtCLHFCQWtEOUIsQ0FBQTtBQUNILENBQUMsRUFoTWdCLFdBQVcsR0FBWCxtQkFBVyxLQUFYLG1CQUFXLFFBZ00zQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDck1ELHFEQUFvRDtBQUNwRCxpQ0FBNEM7QUFJNUMsSUFBWSxlQUdYO0FBSEQsV0FBWSxlQUFlO0lBQ3pCLDRDQUF5QixDQUFBO0lBQ3pCLHdDQUFxQixDQUFBO0FBQ3ZCLENBQUMsRUFIVyxlQUFlLEdBQWYsdUJBQWUsS0FBZix1QkFBZSxRQUcxQjtBQUVEO0lBQXlDLHVDQUFlO0lBR3RELDZCQUFZLFdBQTRCLEVBQUUsU0FBNkI7UUFBRSxvQkFBbUM7YUFBbkMsVUFBbUMsRUFBbkMscUJBQW1DLEVBQW5DLElBQW1DO1lBQW5DLG1DQUFtQzs7UUFBNUcsOENBQ1EsU0FBUyxHQUFLLFVBQVUsa0JBVy9CO1FBVEMsUUFBUSxXQUFXLEVBQUU7WUFDbkIsS0FBSyxlQUFlLENBQUMsUUFBUTtnQkFDM0IsS0FBSSxDQUFDLHdCQUF3QixHQUFHLENBQUMsaUJBQVMsQ0FBQyxFQUFFLEVBQUUsaUJBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDL0QsTUFBTTtZQUVSLEtBQUssZUFBZSxDQUFDLFVBQVU7Z0JBQzdCLEtBQUksQ0FBQyx3QkFBd0IsR0FBRyxDQUFDLGlCQUFTLENBQUMsSUFBSSxFQUFFLGlCQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2xFLE1BQU07U0FDVDs7SUFDSCxDQUFDO0lBRU0sMENBQVksR0FBbkIsVUFBb0IsTUFBYztRQUNoQyxpQkFBTSxZQUFZLFlBQUMsTUFBTSxDQUFDLENBQUM7UUFFM0IsSUFBSSxNQUFNLEtBQUssY0FBTSxDQUFDLE1BQU0sRUFBRTtZQUM1QixvREFBb0Q7WUFDcEQsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEM7SUFDSCxDQUFDO0lBRU0sOENBQWdCLEdBQXZCLFVBQXdCLFNBQW9CO1FBQzFDLGlCQUFNLGdCQUFnQixZQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRWxDLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3RELDREQUE0RDtZQUM1RCxtQ0FBbUM7WUFDbkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEM7SUFDSCxDQUFDO0lBQ0gsMEJBQUM7QUFBRCxDQW5DQSxBQW1DQyxDQW5Dd0MsaUNBQWUsR0FtQ3ZEO0FBbkNZLGtEQUFtQjs7Ozs7O0FDVGhDLHFEQUFvRDtBQUNwRCwyQ0FBbUU7QUFFbkU7Ozs7R0FJRztBQUNILFNBQVMsb0JBQW9CLENBQUMsU0FBNkI7SUFDekQsSUFBTSxlQUFlLEdBQXlCLEVBQUUsQ0FBQztJQUVqRCxTQUFTLENBQUMsYUFBYSxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQUEsb0JBQW9CO1FBQ3BELElBQUksSUFBQSx3QkFBVyxFQUFDLG9CQUFvQixDQUFDLEVBQUU7WUFDckMsZUFBZSxDQUFDLElBQUksT0FBcEIsZUFBZSxFQUFTLG9CQUFvQixDQUFDLG9CQUFvQixDQUFDLEVBQUU7U0FDckU7YUFBTSxJQUFJLElBQUEsd0JBQVcsRUFBQyxvQkFBb0IsQ0FBQyxFQUFFO1lBQzVDLGVBQWUsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUM1QztJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxlQUFlLENBQUM7QUFDekIsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFTLGFBQWEsQ0FBQyxTQUE2QjtJQUNsRCxJQUFJLElBQUEsc0JBQVMsRUFBQyxTQUFTLENBQUMsRUFBRTtRQUN4QixPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNuRTtTQUFNO1FBQ0wsT0FBTyxTQUFTLENBQUMsYUFBYSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUNwRDtBQUNILENBQUM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxTQUFnQiw2QkFBNkIsQ0FBQyxVQUFnQztJQUM1RSxJQUFNLFlBQVksR0FBa0IsRUFBRSxDQUFDO0lBRXZDLFVBQVU7U0FDUCxNQUFNLENBQUMsVUFBQSxTQUFTLElBQUksT0FBQSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsRUFBckIsQ0FBcUIsQ0FBQztTQUMxQyxPQUFPLENBQUMsVUFBQSxTQUFTO1FBQ2hCLElBQU0sa0JBQWtCLEdBQUcsU0FBUyxZQUFZLHFCQUFTLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxVQUFBLFNBQVM7WUFDbEMsWUFBWSxDQUFDLElBQUksT0FBakIsWUFBWSxFQUFTLGFBQWEsQ0FBQyxTQUFTLENBQUMsRUFBRTtRQUNqRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUwsT0FBTyxZQUFZLENBQUM7QUFDdEIsQ0FBQztBQWRELHNFQWNDOzs7Ozs7QUN6REQsaUNBQW9EO0FBQ3BELGdEQUErQztBQUUvQyxJQUFNLFdBQVcsR0FBRztJQUNsQixZQUFZLEVBQUUsY0FBTSxPQUFBLDJCQUFZLENBQUMsT0FBTyxFQUFwQixDQUFvQjtJQUN4QyxRQUFRLEVBQUU7UUFDUixXQUFXO1FBQ1gsRUFBRSxFQUFFLGlCQUFTLENBQUMsRUFBRTtRQUNoQixhQUFhO1FBQ2IsRUFBRSxFQUFFLGlCQUFTLENBQUMsSUFBSTtRQUNsQixhQUFhO1FBQ2IsRUFBRSxFQUFFLGlCQUFTLENBQUMsSUFBSTtRQUNsQixjQUFjO1FBQ2QsRUFBRSxFQUFFLGlCQUFTLENBQUMsS0FBSztRQUNuQixXQUFXO1FBQ1gsRUFBRSxFQUFFLGNBQU0sQ0FBQyxNQUFNO1FBQ2pCLE9BQU87UUFDUCxLQUFLLEVBQUUsY0FBTSxDQUFDLElBQUk7S0FDbkI7Q0FDRixDQUFDO0FBRUYsSUFBTSxXQUFXLEdBQUc7SUFDbEIsWUFBWSxFQUFFLGNBQU0sT0FBQSwyQkFBWSxDQUFDLE9BQU8sRUFBcEIsQ0FBb0I7SUFDeEMsUUFBUSxFQUFFO1FBQ1IsV0FBVztRQUNYLEVBQUUsRUFBRSxpQkFBUyxDQUFDLEVBQUU7UUFDaEIsYUFBYTtRQUNiLEVBQUUsRUFBRSxpQkFBUyxDQUFDLElBQUk7UUFDbEIsYUFBYTtRQUNiLEVBQUUsRUFBRSxpQkFBUyxDQUFDLElBQUk7UUFDbEIsY0FBYztRQUNkLEVBQUUsRUFBRSxpQkFBUyxDQUFDLEtBQUs7UUFDbkIsV0FBVztRQUNYLEVBQUUsRUFBRSxjQUFNLENBQUMsTUFBTTtRQUNqQixPQUFPO1FBQ1AsR0FBRyxFQUFFLGNBQU0sQ0FBQyxJQUFJO0tBQ2pCO0NBQ0YsQ0FBQztBQUVGLElBQU0saUJBQWlCLEdBQUc7SUFDeEIsWUFBWSxFQUFFLGNBQU0sT0FBQSwyQkFBWSxDQUFDLGFBQWEsRUFBMUIsQ0FBMEI7SUFDOUMsUUFBUSxFQUFFO1FBQ1IsV0FBVztRQUNYLEVBQUUsRUFBRSxpQkFBUyxDQUFDLEVBQUU7UUFDaEIsYUFBYTtRQUNiLEVBQUUsRUFBRSxpQkFBUyxDQUFDLElBQUk7UUFDbEIsYUFBYTtRQUNiLEVBQUUsRUFBRSxpQkFBUyxDQUFDLElBQUk7UUFDbEIsY0FBYztRQUNkLEVBQUUsRUFBRSxpQkFBUyxDQUFDLEtBQUs7UUFDbkIsUUFBUTtRQUNSLEVBQUUsRUFBRSxjQUFNLENBQUMsTUFBTTtRQUNqQixTQUFTO1FBQ1QsRUFBRSxFQUFFLGNBQU0sQ0FBQyxJQUFJO0tBQ2hCO0NBQ0YsQ0FBQztBQUVGLElBQU0sYUFBYSxHQUFHO0lBQ3BCLFlBQVksRUFBRSxjQUFNLE9BQUEsMkJBQVksQ0FBQyxTQUFTLEVBQXRCLENBQXNCO0lBQzFDLFFBQVEsRUFBRTtRQUNSLFdBQVc7UUFDWCxFQUFFLEVBQUUsaUJBQVMsQ0FBQyxFQUFFO1FBQ2hCLGFBQWE7UUFDYixFQUFFLEVBQUUsaUJBQVMsQ0FBQyxJQUFJO1FBQ2xCLGFBQWE7UUFDYixFQUFFLEVBQUUsaUJBQVMsQ0FBQyxJQUFJO1FBQ2xCLGNBQWM7UUFDZCxFQUFFLEVBQUUsaUJBQVMsQ0FBQyxLQUFLO1FBQ25CLGVBQWU7UUFDZixFQUFFLEVBQUUsY0FBTSxDQUFDLE1BQU07UUFDakIsUUFBUTtRQUNSLEVBQUUsRUFBRSxjQUFNLENBQUMsTUFBTTtRQUNqQixPQUFPO1FBQ1AsQ0FBQyxFQUFFLGNBQU0sQ0FBQyxJQUFJO0tBQ2Y7Q0FDRixDQUFDO0FBRUYsSUFBTSxhQUFhLEdBQUc7SUFDcEIsWUFBWSxFQUFFLGNBQU0sT0FBQSwyQkFBWSxDQUFDLFNBQVMsRUFBdEIsQ0FBc0I7SUFDMUMsUUFBUSxFQUFFO1FBQ1IsV0FBVztRQUNYLEVBQUUsRUFBRSxpQkFBUyxDQUFDLEVBQUU7UUFDaEIsYUFBYTtRQUNiLEVBQUUsRUFBRSxpQkFBUyxDQUFDLElBQUk7UUFDbEIsYUFBYTtRQUNiLEVBQUUsRUFBRSxpQkFBUyxDQUFDLElBQUk7UUFDbEIsY0FBYztRQUNkLEVBQUUsRUFBRSxpQkFBUyxDQUFDLEtBQUs7UUFDbkIsS0FBSztRQUNMLEVBQUUsRUFBRSxjQUFNLENBQUMsTUFBTTtRQUNqQixPQUFPO1FBQ1AsQ0FBQyxFQUFFLGNBQU0sQ0FBQyxJQUFJO0tBQ2Y7Q0FDRixDQUFDO0FBRUYsbUNBQW1DO0FBQ25DLElBQU0sYUFBYSxHQUFHO0lBQ3BCLFdBQVc7SUFDWCxFQUFFLEVBQUUsaUJBQVMsQ0FBQyxFQUFFO0lBQ2hCLGFBQWE7SUFDYixFQUFFLEVBQUUsaUJBQVMsQ0FBQyxJQUFJO0lBQ2xCLGFBQWE7SUFDYixFQUFFLEVBQUUsaUJBQVMsQ0FBQyxJQUFJO0lBQ2xCLGNBQWM7SUFDZCxFQUFFLEVBQUUsaUJBQVMsQ0FBQyxLQUFLO0lBQ25CLFFBQVE7SUFDUixFQUFFLEVBQUUsY0FBTSxDQUFDLE1BQU07SUFDakIsU0FBUztJQUNULEVBQUUsRUFBRSxjQUFNLENBQUMsSUFBSTtDQUNoQixDQUFDO0FBRUY7O0dBRUc7QUFDSCxTQUFnQixvQkFBb0I7SUFDbEMsSUFBTSxnQkFBZ0IsR0FBRztRQUN2QixXQUFXO1FBQ1gsV0FBVztRQUNYLGlCQUFpQjtRQUNqQixhQUFhO1FBQ2IsYUFBYTtLQUNkLENBQUMsSUFBSSxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFyQixDQUFxQixDQUFDLENBQUM7SUFFeEMsSUFBSSxnQkFBZ0IsRUFBRTtRQUNwQixPQUFPLGdCQUFnQixDQUFDLFFBQVEsQ0FBQztLQUNsQztTQUFNO1FBQ0wsT0FBTyxhQUFhLENBQUM7S0FDdEI7QUFDSCxDQUFDO0FBZEQsb0RBY0M7Ozs7OztBQ2hJRCxpQ0FBb0M7QUFPcEM7Ozs7R0FJRztBQUNILFNBQVMsTUFBTSxDQUFDLE1BQWM7SUFDNUIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRSxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQVMsU0FBUyxDQUFDLE1BQWM7SUFDL0IsSUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRTNCLE9BQU87UUFDTCxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHO1FBQ2pCLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUc7S0FDbEIsQ0FBQztBQUNKLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILFNBQVMsVUFBVSxDQUFDLENBQVMsRUFBRSxDQUFTO0lBQ3RDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFTLFFBQVEsQ0FBQyxDQUFTLEVBQUUsQ0FBUztJQUNwQyxPQUFPLE1BQU0sQ0FBQztRQUNaLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ1osQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDYixDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQVMsZ0JBQWdCLENBQUMsT0FBb0I7SUFDNUMsSUFBTSxZQUFZLEdBQUcsMEJBQTBCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFekQsT0FBTztRQUNMLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxLQUFLLEdBQUcsQ0FBQztRQUMxQyxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUM7S0FDNUMsQ0FBQztBQUNKLENBQUM7QUFFRDs7Ozs7OztHQU9HO0FBQ0gsU0FBUyxjQUFjLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxTQUFvQjtJQUNoRSxJQUFNLGVBQWUsR0FBRztRQUN0QixDQUFDLEVBQUUsQ0FBQyxTQUFTLEtBQUssaUJBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEtBQUssaUJBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlFLENBQUMsRUFBRSxDQUFDLFNBQVMsS0FBSyxpQkFBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsS0FBSyxpQkFBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDNUUsQ0FBQztJQUVGLElBQU0sYUFBYSxHQUFHLFNBQVMsQ0FBQztRQUM5QixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNaLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ2IsQ0FBQyxDQUFDO0lBRUgsSUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLGVBQWUsRUFBRSxhQUFhLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUVoSCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7QUFDN0MsQ0FBQztBQUVEOzs7Ozs7O0dBT0c7QUFDSCxTQUFnQixxQkFBcUIsQ0FDbkMsYUFBMEIsRUFDMUIsUUFBdUIsRUFDdkIsU0FBb0I7O0lBRXBCLElBQUksQ0FBQyxhQUFhO1FBQUUsT0FBTyxTQUFTLENBQUM7SUFFckMsSUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQU0sZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFekQsT0FBTyxNQUFBLFFBQVE7UUFDYiw4Q0FBOEM7U0FDN0MsTUFBTSxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxLQUFLLGFBQWEsRUFBdEIsQ0FBc0IsQ0FBQztRQUN2QyxvRkFBb0Y7U0FDbkYsR0FBRyxDQUFDLFVBQUEsT0FBTztRQUNWLElBQU0sYUFBYSxHQUFHLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2hELElBQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN2RCxJQUFNLEtBQUssR0FBRyxjQUFjLENBQUMsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRXpFLE9BQU8sRUFBRSxLQUFLLE9BQUEsRUFBRSxJQUFJLE1BQUEsRUFBRSxPQUFPLFNBQUEsRUFBRSxDQUFDO0lBQ2xDLENBQUMsQ0FBQztRQUNGLHNGQUFzRjtTQUNyRixNQUFNLENBQUMsVUFBQyxFQUFTO1lBQVAsS0FBSyxXQUFBO1FBQU8sT0FBQSxLQUFLLElBQUksV0FBVztJQUFwQixDQUFvQixDQUFDO1FBQzVDLGdHQUFnRztTQUMvRixJQUFJLENBQUMsVUFBQyxFQUE4QixFQUFFLEVBQThCO1lBQXJELE1BQU0sV0FBQSxFQUFRLEtBQUssVUFBQTtZQUFhLE1BQU0sV0FBQSxFQUFRLEtBQUssVUFBQTtRQUFPLE9BQUEsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQW5DLENBQW1DLENBQUM7UUFDOUcsb0RBQW9EO1NBQ25ELEtBQUssRUFBRSwwQ0FBRSxPQUFPLENBQUM7QUFDdEIsQ0FBQztBQTNCRCxzREEyQkM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxTQUFnQiwwQkFBMEIsQ0FBQyxPQUFvQjtJQUM3RCxJQUFNLFlBQVksR0FBRyxPQUFPLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUVyRCxJQUFJLE9BQU8sWUFBWSxDQUFDLENBQUMsS0FBSyxRQUFRLElBQUksT0FBTyxZQUFZLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUM1RSxZQUFZLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUM7UUFDbkMsWUFBWSxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDO0tBQ25DO0lBRUQsT0FBTyxZQUFZLENBQUM7QUFDdEIsQ0FBQztBQVRELGdFQVNDOzs7Ozs7QUM5SUQsNkRBQThEO0FBQzlELGlGQUFnRjtBQUNoRiw2REFBNEQ7QUFDNUQsMkNBQStDO0FBQy9DLGlDQUEwRjtBQUUxRjs7Ozs7OztHQU9HO0FBQ0g7SUFPRSx5QkFBNEIsU0FBNkI7UUFBRSxvQkFBbUM7YUFBbkMsVUFBbUMsRUFBbkMscUJBQW1DLEVBQW5DLElBQW1DO1lBQW5DLG1DQUFtQzs7UUFBbEUsY0FBUyxHQUFULFNBQVMsQ0FBb0I7UUFIakQscUNBQWdDLEdBQUcsY0FBTyxDQUFDLENBQUM7UUFJbEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLHlDQUFtQixFQUFFLENBQUM7SUFDbkQsQ0FBQztJQXNCRDs7T0FFRztJQUNJLDBDQUFnQixHQUF2QjtRQUNFLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM1QixDQUFDO0lBRU8sc0NBQVksR0FBcEIsVUFBcUIsT0FBb0I7UUFDdkMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUM7UUFDN0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRU8sMkNBQWlCLEdBQXpCOztRQUNFLE1BQUEsSUFBSSxDQUFDLGFBQWEsMENBQUUsSUFBSSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVPLDJDQUFpQixHQUF6QjtRQUNFLElBQU0sT0FBTyxHQUFHLElBQUEsNkRBQTZCLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xFLElBQUksT0FBTyxFQUFFO1lBQ1gsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUM1QjtJQUNILENBQUM7SUFFUyxrREFBd0IsR0FBbEMsVUFBbUMsU0FBb0I7UUFDckQsSUFBTSxhQUFhLEdBQUcsSUFBQSwyQ0FBcUIsRUFDekMsSUFBSSxDQUFDLGFBQWEsRUFDbEIsSUFBQSw2REFBNkIsRUFBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQzlDLFNBQVMsQ0FDVixDQUFDO1FBRUYsSUFBSSxhQUFhLEVBQUU7WUFDakIsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNsQztJQUNILENBQUM7SUFFUyw4Q0FBb0IsR0FBOUIsVUFBK0IsTUFBYztRQUMzQyxRQUFRLE1BQU0sRUFBRTtZQUNkLEtBQUksQ0FBQyxjQUFNLENBQUMsTUFBTSxDQUFDO2dCQUNqQixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUMzQixNQUFNO1lBQ1IsS0FBSSxDQUFDLGNBQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ2YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDdEIsTUFBTTtTQUNUO0lBQ0gsQ0FBQztJQUVPLHFDQUFXLEdBQW5CLFVBQXVCLElBQU8sRUFBRSxjQUFpQyxFQUFFLFdBQXlCO1FBQzFGLElBQUksYUFBYSxHQUFHLElBQUksQ0FBQztRQUN6QixJQUFNLGNBQWMsR0FBRyxjQUFNLE9BQUEsQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLEVBQXZCLENBQXVCLENBQUM7UUFFckQsV0FBVyxhQUFYLFdBQVcsdUJBQVgsV0FBVyxDQUFHLElBQUksRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBRXhELElBQUksYUFBYSxFQUFFO1lBQ2pCLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSwwQ0FBZ0IsR0FBdkIsVUFBd0IsU0FBb0I7UUFDMUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdkIsNEZBQTRGO1lBQzVGLGlGQUFpRjtZQUNqRixJQUFJLElBQUksQ0FBQywwQkFBMEIsRUFBRTtnQkFDbkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQzthQUNwRDtpQkFBTTtnQkFDTCxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQzthQUMxQjtZQUNELE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDaEYsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxzQ0FBWSxHQUFuQixVQUFvQixNQUFjO1FBQ2hDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxpQ0FBTyxHQUFkO1FBQ0UsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3RCLElBQUksQ0FBQywwQkFBMEIsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1lBQ3JELElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDO1NBQ2hDO0lBQ0gsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksZ0NBQU0sR0FBYjtRQUNFLElBQUksSUFBSSxDQUFDLDBCQUEwQixJQUFJLENBQUMsSUFBQSw0QkFBZSxFQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUN2RSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1lBQ25ELElBQUksQ0FBQywwQkFBMEIsR0FBRyxTQUFTLENBQUM7U0FDN0M7YUFBTTtZQUNMLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1NBQzFCO1FBRUQsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7T0FHRztJQUNLLDJDQUFpQixHQUF6QjtRQUFBLGlCQWlCQztRQWhCQyxJQUFJLENBQUMsZ0NBQWdDLEVBQUUsQ0FBQztRQUV4QyxJQUFNLDRCQUE0QixHQUFHLElBQUEsNkRBQTZCLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLFFBQVE7WUFDOUYsSUFBTSxhQUFhLEdBQUcsS0FBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQzdELElBQU0sWUFBWSxHQUFHLGNBQU0sT0FBQSxLQUFJLENBQUMsT0FBTyxFQUFFLEVBQWQsQ0FBYyxDQUFDO1lBRTFDLEtBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFDL0QsS0FBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRSxZQUFZLENBQUMsQ0FBQztZQUU5RCxPQUFPO2dCQUNMLEtBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUUsYUFBYSxDQUFDLENBQUM7Z0JBQ2hFLEtBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDakUsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsZ0NBQWdDLEdBQUcsY0FBTSxPQUFBLDRCQUE0QixDQUFDLE9BQU8sQ0FBQyxVQUFBLEVBQUUsSUFBSSxPQUFBLEVBQUUsRUFBRSxFQUFKLENBQUksQ0FBQyxFQUFoRCxDQUFnRCxDQUFDO0lBQ2pHLENBQUM7SUFFRDs7T0FFRztJQUNJLGlDQUFPLEdBQWQ7UUFDRSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQy9CLElBQUksQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDO1FBQy9CLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFDSCxzQkFBQztBQUFELENBcExBLEFBb0xDLElBQUE7QUFwTFksMENBQWU7Ozs7OztBQ2Q1Qjs7R0FFRztBQUNIO0lBR0U7UUFDRSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRU8scURBQXVCLEdBQS9CLFVBQWdDLElBQStCO1FBQzdELElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3RDO1FBRUQsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksZ0NBQUUsR0FBVCxVQUNFLElBQVUsRUFDVixJQUErQixFQUMvQixRQUE0QyxFQUM1QyxPQUEyQztRQUUzQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksaUNBQUcsR0FBVixVQUNFLElBQVUsRUFDVixJQUErQixFQUMvQixRQUE0QyxFQUM1QyxPQUEyQztRQUUzQyxJQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0QsSUFBTSxhQUFhLEdBQUcsZUFBZSxDQUFDLFNBQVMsQ0FBQyxVQUFDLEVBQXdDO2dCQUF2QyxTQUFTLFFBQUEsRUFBRSxhQUFhLFFBQUEsRUFBRSxZQUFZLFFBQUE7WUFDdEYsT0FBTyxTQUFTLEtBQUssSUFBSSxJQUFJLGFBQWEsS0FBSyxRQUFRLElBQUksWUFBWSxLQUFLLE9BQU8sQ0FBQztRQUN0RixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRWxELElBQUksYUFBYSxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ3RCLGVBQWUsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQzFDO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0kscUNBQU8sR0FBZDtRQUFBLGlCQU9DO1FBTkMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxVQUFDLGVBQWUsRUFBRSxJQUFJO1lBQ25ELGVBQWUsQ0FBQyxPQUFPLENBQUMsVUFBQyxFQUE0QjtvQkFBM0IsT0FBTyxRQUFBLEVBQUUsUUFBUSxRQUFBLEVBQUUsT0FBTyxRQUFBO2dCQUNsRCxLQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzdDLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDakMsQ0FBQztJQUNILDBCQUFDO0FBQUQsQ0F0RUEsQUFzRUMsSUFBQTtBQXRFWSxrREFBbUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0xoQyxxREFBb0Q7QUFHcEQsaUNBQTRDO0FBRTVDOztHQUVHO0FBQ0g7SUFBeUMsdUNBQWU7SUFDdEQsNkJBQTRCLFNBQXNCO1FBQUUsa0JBQWlDO2FBQWpDLFVBQWlDLEVBQWpDLHFCQUFpQyxFQUFqQyxJQUFpQztZQUFqQyxpQ0FBaUM7O1FBQXJGLDhDQUNRLFNBQVMsR0FBSyxRQUFRLGtCQUM3QjtRQUYyQixlQUFTLEdBQVQsU0FBUyxDQUFhOztJQUVsRCxDQUFDO0lBRU0sMENBQVksR0FBbkIsVUFBb0IsTUFBYztRQUNoQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRXhCLGlCQUFNLFlBQVksWUFBQyxNQUFNLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRU0sOENBQWdCLEdBQXZCLFVBQXdCLFNBQW9CO1FBQzFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFeEIsaUJBQU0sZ0JBQWdCLFlBQUMsU0FBUyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVTLGtEQUFvQixHQUE5QixVQUErQixNQUFjO1FBQzNDLElBQUksTUFBTSxLQUFLLGNBQU0sQ0FBQyxJQUFJLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUN6QjthQUFNO1lBQ0wsaUJBQU0sb0JBQW9CLFlBQUMsTUFBTSxDQUFDLENBQUM7U0FDcEM7SUFDSCxDQUFDO0lBRU0scUNBQU8sR0FBZDtRQUNFLGlCQUFNLE9BQU8sV0FBRSxDQUFDO0lBQ2xCLENBQUM7SUFDSCwwQkFBQztBQUFELENBNUJBLEFBNEJDLENBNUJ3QyxpQ0FBZSxHQTRCdkQ7QUE1Qlksa0RBQW1COzs7Ozs7QUNQaEMsNkRBQTREO0FBQzVELGlDQUE0QztBQUM1Qyw2REFBaUU7QUFFakUsSUFBTSwyQkFBMkIsR0FBRyxLQUFLLENBQUM7QUFDMUMsSUFBTSx1QkFBdUIsR0FBRyxHQUFHLENBQUM7QUFDcEMsSUFBTSxvQkFBb0IsR0FBRyxHQUFHLENBQUM7QUFFakM7OztHQUdHO0FBQ0g7SUFPRSx3QkFBNkIsbUJBQXdDO1FBQXJFLGlCQUlDO1FBSjRCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFOcEQsbUJBQWMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDO1FBRXhDLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBRXBCLHlCQUFvQixHQUFHLDJCQUEyQixDQUFDO1FBbUUxQyxpQkFBWSxHQUFHLFVBQUMsU0FBb0IsRUFBRSxNQUFtQixFQUFFLGNBQTBCO1lBQ3BHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDN0IsT0FBTzthQUNSO1lBRUQsSUFBSSxTQUFTLEtBQUssaUJBQVMsQ0FBQyxFQUFFLElBQUksU0FBUyxLQUFLLGlCQUFTLENBQUMsSUFBSSxFQUFFO2dCQUM5RCxLQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUVyQyxPQUFPO2FBQ1I7WUFFRCxLQUFJLENBQUMsZ0NBQWdDLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQ3pELEtBQUksQ0FBQyxzQkFBc0IsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUVoRCxjQUFjLEVBQUUsQ0FBQztRQUNuQixDQUFDLENBQUM7UUF5QmUsYUFBUSxHQUFHLFVBQUMsTUFBYyxFQUFFLE1BQW1CLEVBQUUsY0FBMEI7WUFDMUYsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUM3QixPQUFPO2FBQ1I7WUFFRCxJQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFbkMsSUFBSSxNQUFNLEtBQUssY0FBTSxDQUFDLE1BQU0sSUFBSSxLQUFJLENBQUMsV0FBVyxFQUFFO2dCQUNoRCxLQUFJLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ3RDLGNBQWMsRUFBRSxDQUFDO2FBQ2xCO2lCQUFNLElBQUksTUFBTSxLQUFLLGNBQU0sQ0FBQyxJQUFJLEVBQUU7Z0JBQ2pDLEtBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQzFCLGNBQWMsRUFBRSxDQUFDO2FBQ2xCO1FBQ0gsQ0FBQyxDQUFDO1FBdEhBLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNsRCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUkseUNBQW1CLEVBQUUsQ0FBQztRQUNqRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDNUQsQ0FBQztJQUVPLG1EQUEwQixHQUFsQztRQUFBLGlCQU1DO1FBTEMsWUFBWSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxvQkFBb0IsSUFBSSxvQkFBb0IsQ0FBQztRQUNsRCxJQUFJLENBQUMsc0JBQXNCLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FDN0MsY0FBTSxPQUFBLEtBQUksQ0FBQyxvQkFBb0IsR0FBRywyQkFBMkIsRUFBdkQsQ0FBdUQsRUFBRSx1QkFBdUIsQ0FDdkYsQ0FBQztJQUNKLENBQUM7SUFFTyxxQ0FBWSxHQUFwQixVQUFxQixTQUFvQixFQUFFLGNBQTJCO1FBQ3BFLElBQUksQ0FBQywwQkFBMEIsRUFBRSxDQUFDO1FBRWxDLElBQU0sWUFBWSxHQUFHLGNBQWMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsRSxJQUFNLFNBQVMsR0FBRyxZQUFZLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDO1FBRTNELE9BQU8sU0FBUyxLQUFLLGlCQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQ2hFLENBQUM7SUFFTyw0Q0FBbUIsR0FBM0I7UUFDRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFTyw2Q0FBb0IsR0FBNUIsVUFBNkIsU0FBb0IsRUFBRSxjQUEyQjtRQUM1RSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRU8saURBQXdCLEdBQWhDLFVBQWlDLGNBQTJCO1FBQzFELElBQU0sc0JBQXNCLEdBQUcseUJBQXlCLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDekUsSUFBTSxJQUFJLEdBQUcsSUFBQSxnREFBMEIsRUFBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBR2hFLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFdEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQy9CLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztJQUNqQyxDQUFDO0lBRU8seURBQWdDLEdBQXhDLFVBQXlDLGNBQTJCLEVBQUUsU0FBb0I7UUFDeEYsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLENBQUM7U0FDdEQ7YUFBTTtZQUNMLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUMvQztRQUVELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0lBQzFCLENBQUM7SUFFTyx3REFBK0IsR0FBdkM7UUFDRSxPQUFPO1lBQ0wsT0FBTyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUM5QixPQUFPLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQy9CLENBQUM7SUFDSixDQUFDO0lBRU8sK0NBQXNCLEdBQTlCLFVBQStCLE9BQWdCO1FBQzdDLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxVQUFVLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQywrQkFBK0IsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM3RixDQUFDO0lBbUJPLGdEQUF1QixHQUEvQixVQUFnQyxPQUFnQjtRQUFoRCxpQkFXQztRQVZDLElBQU0sZ0JBQWdCLEdBQUc7WUFDdkIsSUFBTSxjQUFjLEdBQUcsS0FBSSxDQUFDLCtCQUErQixFQUFFLENBQUM7WUFFOUQsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztZQUNsRSxLQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFDakUsS0FBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUM7UUFFRixJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFDaEUsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFTyxvQ0FBVyxHQUFuQixVQUFvQixPQUFnQjtRQUNsQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUMzQixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVPLGdEQUF1QixHQUEvQixVQUFnQyxPQUFnQjtRQUM5QyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQWtCRDs7T0FFRztJQUNJLGdDQUFPLEdBQWQ7UUFDRSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQy9CLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO1FBQzlDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO0lBQ3BELENBQUM7SUFDSCxxQkFBQztBQUFELENBeElBLEFBd0lDLElBQUE7QUF4SVksd0NBQWM7QUEwSTNCLFNBQVMsZ0JBQWdCLENBQUMsT0FBb0I7SUFDNUMsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBQSxTQUFTLElBQUksT0FBQSxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUE5QixDQUE4QixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDbkcsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLGNBQTJCO0lBQzdDLE9BQU8sY0FBYyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekMsQ0FBQztBQUVELFNBQVMseUJBQXlCLENBQUMsY0FBMkI7SUFDNUQsT0FBTyxjQUFjLENBQUMsYUFBYSxDQUFDLDRDQUE0QyxDQUFDLENBQUM7QUFDcEYsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7O0FDL0pELDZEQUE0RDtBQUM1RCxtREFBa0Q7QUFDbEQsbUNBQWdEO0FBRWhELDJDQUFxRDtBQUVyRDs7Ozs7O0dBTUc7QUFDSDtJQVFFLDJCQUFZLG1CQUF3QztRQUFFLDBCQUFzQzthQUF0QyxVQUFzQyxFQUF0QyxxQkFBc0MsRUFBdEMsSUFBc0M7WUFBdEMseUNBQXNDOztRQUE1RixpQkFZQztRQWxCZ0IscUJBQWdCLEdBQXNCLEVBQUUsQ0FBQztRQXdCbEQsV0FBTSxHQUFHLFVBQUMsS0FBc0I7WUFDdEMsS0FBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN4QyxLQUFJLENBQUMsNEJBQTRCLEVBQUUsQ0FBQztRQUN0QyxDQUFDLENBQUM7UUFFTSxXQUFNLEdBQUcsVUFBQyxLQUFzQjtZQUN0QyxJQUFNLFVBQVUsR0FBRyxLQUFJLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSyxLQUFLLEtBQUssRUFBZixDQUFlLENBQUMsQ0FBQztZQUVuRixJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUMsRUFBRTtnQkFDbkIsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUNoQixLQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDbEQsS0FBSSxDQUFDLDRCQUE0QixFQUFFLENBQUM7YUFDckM7UUFDSCxDQUFDLENBQUM7UUE0REY7Ozs7O1dBS0c7UUFDSyxtQkFBYyxHQUFHLFVBQUMsQ0FBZ0I7WUFDeEMsSUFBTSxLQUFLLEdBQW1DLEtBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFekUsSUFBTSxNQUFNLEdBQUcsS0FBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7WUFDL0MsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxFQUFFO2dCQUNoRyxPQUFPO2FBQ1I7WUFFRCxJQUFJLElBQUEsd0JBQVcsRUFBQyxLQUFLLENBQUMsRUFBRTtnQkFDdEIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUUvQixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7Z0JBQ25CLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQzthQUNyQjtZQUNELElBQUksSUFBQSxxQkFBUSxFQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNuQixNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUUzQixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7Z0JBQ25CLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQzthQUNyQjtRQUNILENBQUMsQ0FBQztRQXBIQSxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksK0JBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRTlELElBQUksQ0FBQyxzQkFBc0IsR0FBRyxFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLCtCQUErQixHQUFHLEVBQUUsQ0FBQztRQUMxQyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUkseUNBQW1CLEVBQUUsQ0FBQztRQUNqRCxJQUFJLENBQUMsZ0JBQWdCLGtCQUFJLG1CQUFtQixHQUFLLGdCQUFnQixPQUFDLENBQUM7UUFDbkUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFBLDZCQUFvQixHQUFFLENBQUM7UUFFckMsSUFBSSxDQUFDLDJDQUEyQyxFQUFFLENBQUM7UUFDbkQsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQUM7SUFDdEMsQ0FBQztJQUVPLGlEQUFxQixHQUE3QjtRQUNFLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBaUJEOzs7T0FHRztJQUNLLHVFQUEyQyxHQUFuRDtRQUFBLGlCQWFDO1FBWkMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUs7WUFDakMsSUFBTSxhQUFhLEdBQUcsY0FBTSxPQUFBLEtBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQWxCLENBQWtCLENBQUM7WUFDL0MsSUFBTSxhQUFhLEdBQUcsY0FBTSxPQUFBLEtBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQWxCLENBQWtCLENBQUM7WUFFL0MsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ2hELEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUVoRCxLQUFJLENBQUMsK0JBQStCLENBQUMsSUFBSSxDQUN2QyxjQUFNLE9BQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxFQUFqRCxDQUFpRCxFQUN2RCxjQUFNLE9BQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxFQUFqRCxDQUFpRCxDQUN4RCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sMkVBQStDLEdBQXZEO1FBQ0UsSUFBSSxDQUFDLCtCQUErQixDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUssRUFBRSxFQUFQLENBQU8sQ0FBQyxDQUFDO1FBQy9ELElBQUksQ0FBQywrQkFBK0IsR0FBRyxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVEOzs7T0FHRztJQUNLLHdEQUE0QixHQUFwQzs7UUFDRSxJQUFNLE9BQU8sR0FBRyxVQUFDLEtBQXNCLElBQUssT0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxFQUF6QixDQUF5QixDQUFDO1FBQ3RFLElBQU0sYUFBYSxHQUFHLE1BQUEsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsbUNBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXRGLElBQUksYUFBYSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDaEQsSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQUM7U0FDckM7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSyx3REFBNEIsR0FBcEM7UUFBQSxpQkFRQztRQVBDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLLEVBQUUsR0FBRztZQUM3QyxJQUFJLEdBQUcsR0FBRyxLQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDaEQsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQ2pCO2lCQUFNO2dCQUNMLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUNoQjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0ksb0RBQXdCLEdBQS9CO1FBQ0UsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBOEJEOzs7O09BSUc7SUFDSSxtQ0FBTyxHQUFkO1FBQ0UsSUFBSSxDQUFDLCtDQUErQyxFQUFFLENBQUM7UUFDdkQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFmLENBQWUsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUNILHdCQUFDO0FBQUQsQ0ExSUEsQUEwSUMsSUFBQTtBQTFJWSw4Q0FBaUI7QUE0STlCLFNBQVMsVUFBVSxDQUFDLEtBQW9CO0lBQ3RDLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQztBQUN2QixDQUFDOzs7Ozs7QUM3SkQscURBQW9EO0FBQ3BELDZEQUE0RDtBQUM1RCxxREFBb0Q7QUFDcEQsaURBQWdEO0FBQ2hELGlDQUE0QztBQUU1QyxTQUFnQixlQUFlLENBQUMsU0FBNkI7SUFDM0QsT0FBTyxTQUFTLFlBQVksNkJBQWEsQ0FBQztBQUM1QyxDQUFDO0FBRkQsMENBRUM7QUFFRCxTQUFnQixXQUFXLENBQUMsR0FBWTtJQUN0QyxPQUFPLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxLQUFLLFNBQVMsSUFBSSxHQUFHLFlBQVkscUJBQVMsQ0FBQztBQUN2RSxDQUFDO0FBRkQsa0NBRUM7QUFFRCxTQUFnQixXQUFXLENBQUMsR0FBWTtJQUN0QyxPQUFPLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxLQUFLLFNBQVMsSUFBSSxHQUFHLFlBQVkscUJBQVMsQ0FBQztBQUN2RSxDQUFDO0FBRkQsa0NBRUM7QUFFRCxTQUFnQixTQUFTLENBQUMsR0FBWTtJQUNwQyxPQUFPLEdBQUcsWUFBWSxpQkFBTyxDQUFDO0FBQ2hDLENBQUM7QUFGRCw4QkFFQztBQUVELFNBQWdCLFdBQVcsQ0FBQyxTQUFrQjtJQUM1QyxPQUFPLE9BQU8sU0FBUyxLQUFLLFFBQVEsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFTLGlCQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0YsQ0FBQztBQUZELGtDQUVDO0FBRUQsU0FBZ0IsUUFBUSxDQUFDLE1BQWU7SUFDdEMsT0FBTyxPQUFPLE1BQU0sS0FBSyxRQUFRLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBUyxjQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdEYsQ0FBQztBQUZELDRCQUVDOzs7Ozs7QUNyQkQsSUFBWSxTQUtYO0FBTEQsV0FBWSxTQUFTO0lBQ25CLHNCQUFTLENBQUE7SUFDVCwwQkFBYSxDQUFBO0lBQ2IsMEJBQWEsQ0FBQTtJQUNiLDRCQUFlLENBQUE7QUFDakIsQ0FBQyxFQUxXLFNBQVMsR0FBVCxpQkFBUyxLQUFULGlCQUFTLFFBS3BCO0FBRUQsSUFBWSxNQUdYO0FBSEQsV0FBWSxNQUFNO0lBQ2hCLDJCQUFpQixDQUFBO0lBQ2pCLHVCQUFhLENBQUE7QUFDZixDQUFDLEVBSFcsTUFBTSxHQUFOLGNBQU0sS0FBTixjQUFNLFFBR2pCOzs7Ozs7QUNqQkQsSUFBaUIsWUFBWSxDQTZGNUI7QUE3RkQsV0FBaUIsWUFBWTtJQUMzQixJQUFJLG9CQUE2QixDQUFDO0lBRWxDLFNBQWdCLGVBQWU7UUFDN0IsSUFBSSxvQkFBb0IsRUFBRTtZQUN4QixPQUFPLG9CQUFvQixDQUFDO1NBQzdCO1FBRUQsbUVBQW1FO1FBQ25FLHVJQUF1STtRQUN2SSxJQUFJLE9BQU8sR0FBUSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNqQyxJQUFJO1lBQ0YsT0FBTyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNqQyxJQUFJLENBQUMsR0FBRyxrQkFBa0IsQ0FBQztZQUMzQixPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN0QixPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLG9CQUFvQixHQUFHLElBQUksQ0FBQztTQUM3QjtRQUNELE9BQU8sQ0FBQyxFQUFFO1lBQ1Isb0JBQW9CLEdBQUcsQ0FBQyxZQUFZLFlBQVksSUFBSTtZQUNoRCw0QkFBNEI7WUFDOUIsQ0FBQyxDQUFDLElBQUksS0FBSyxFQUFFO2dCQUNiLFVBQVU7Z0JBQ1YsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJO2dCQUNmLHlEQUF5RDtnQkFDekQsNEJBQTRCO2dCQUM1QixDQUFDLENBQUMsSUFBSSxLQUFLLG9CQUFvQjtnQkFDL0IsVUFBVTtnQkFDVixDQUFDLENBQUMsSUFBSSxLQUFLLDRCQUE0QixDQUFDO2dCQUN4QywwRUFBMEU7Z0JBQzFFLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO1NBQ3hCO1FBQ0QsT0FBTyxvQkFBb0IsQ0FBQztJQUM5QixDQUFDO0lBOUJlLDRCQUFlLGtCQThCOUIsQ0FBQTtJQUVEOzs7O09BSUc7SUFDSCxTQUFnQixPQUFPLENBQUMsR0FBVyxFQUFFLElBQVk7UUFDL0MsSUFBSSxZQUFZLENBQUMsZUFBZSxFQUFFLEVBQUU7WUFDbEMsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQztJQUplLG9CQUFPLFVBSXRCLENBQUE7SUFFRDs7OztPQUlHO0lBQ0gsU0FBZ0IsT0FBTyxDQUFDLEdBQVc7UUFDakMsSUFBSSxZQUFZLENBQUMsZUFBZSxFQUFFLEVBQUU7WUFDbEMsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN6QzthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUM7U0FDYjtJQUNILENBQUM7SUFOZSxvQkFBTyxVQU10QixDQUFBO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILFNBQWdCLFNBQVMsQ0FBSSxHQUFXLEVBQUUsSUFBTztRQUMvQyxJQUFJLFlBQVksQ0FBQyxlQUFlLEVBQUUsRUFBRTtZQUNsQyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBTGUsc0JBQVMsWUFLeEIsQ0FBQTtJQUVEOzs7Ozs7O09BT0c7SUFDSCxTQUFnQixTQUFTLENBQUksR0FBVztRQUN0QyxJQUFJLFlBQVksQ0FBQyxlQUFlLEVBQUUsRUFBRTtZQUNsQyxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFeEIsSUFBSSxHQUFHLEVBQUU7Z0JBQ1AsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDOUIsT0FBVSxNQUFNLENBQUM7YUFDbEI7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQVZlLHNCQUFTLFlBVXhCLENBQUE7QUFDSCxDQUFDLEVBN0ZnQixZQUFZLEdBQVosb0JBQVksS0FBWixvQkFBWSxRQTZGNUI7Ozs7OztBQzVGRCw0Q0FBMkM7QUFFM0MsSUFBaUIsV0FBVyxDQXVMM0I7QUF2TEQsV0FBaUIsV0FBVztJQUVmLHlCQUFhLEdBQVcsVUFBVSxDQUFDO0lBQ25DLHVCQUFXLEdBQVcsT0FBTyxDQUFDO0lBRXpDOzs7Ozs7T0FNRztJQUNILFNBQWdCLGFBQWEsQ0FBQyxZQUFvQixFQUFFLE1BQThCO1FBQTlCLHVCQUFBLEVBQUEsU0FBaUIseUJBQWE7UUFDaEYsSUFBSSxVQUFVLEdBQUcsWUFBWSxHQUFHLENBQUMsQ0FBQztRQUVsQyxJQUFJLFVBQVUsRUFBRTtZQUNkLHlFQUF5RTtZQUN6RSw2RUFBNkU7WUFDN0UsWUFBWSxHQUFHLENBQUMsWUFBWSxDQUFDO1NBQzlCO1FBRUQsaUNBQWlDO1FBQ2pDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQzVDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDekQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFNUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNO2FBQ2xDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3pDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzNDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQWxCZSx5QkFBYSxnQkFrQjVCLENBQUE7SUFFRCxTQUFnQixhQUFhLENBQUMsWUFBb0I7UUFDaEQsSUFBTSxVQUFVLEdBQUcsWUFBWSxHQUFHLENBQUMsQ0FBQztRQUVwQyxJQUFJLFVBQVUsRUFBRTtZQUNkLHlFQUF5RTtZQUN6RSw2RUFBNkU7WUFDN0UsWUFBWSxHQUFHLENBQUMsWUFBWSxDQUFDO1NBQzlCO1FBRUQsaUNBQWlDO1FBQ2pDLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQzlDLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDM0QsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFOUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDOUIsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFHLGdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsY0FBSSxXQUFJLENBQUMsbUJBQW1CLENBQUMsV0FBSSxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLE1BQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzNILENBQUMsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBRyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLGNBQUksV0FBSSxDQUFDLG1CQUFtQixDQUFDLFdBQUksQ0FBQyxZQUFZLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxNQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNqSSxVQUFHLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsY0FBSSxXQUFJLENBQUMsbUJBQW1CLENBQUMsV0FBSSxDQUFDLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUUsQ0FBQztJQUM1RyxDQUFDO0lBbEJlLHlCQUFhLGdCQWtCNUIsQ0FBQTtJQUVEOzs7Ozs7O09BT0c7SUFDSCxTQUFTLGdCQUFnQixDQUFDLEdBQW9CLEVBQUUsTUFBYztRQUM1RCxJQUFJLElBQUksR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLElBQUksT0FBTyxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0QsT0FBTyxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ3hCLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0EwQkc7SUFDSCxTQUFnQiw0QkFBNEIsQ0FBQyxTQUFpQixFQUFFLFVBQWtCLEVBQUUsTUFBaUI7UUFDbkcsSUFBSSx5QkFBeUIsR0FBRyxJQUFJLE1BQU0sQ0FDeEMsNEdBQTRHLEVBQzVHLEdBQUcsQ0FDSixDQUFDO1FBRUYsT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFDLHlCQUF5QixFQUFFLFVBQUMsWUFBWTtZQUMvRCxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7WUFDYixJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQzlDLElBQUksVUFBVSxFQUFFO29CQUNkLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztpQkFDeEQ7cUJBQU07b0JBQ0wsSUFBSSxHQUFHLE1BQU0sQ0FBQyxXQUFXLEVBQUUsR0FBRyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7aUJBQ3ZEO2FBQ0Y7aUJBQU0sSUFBSSxZQUFZLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUNsRCxJQUFJLEdBQUcsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO2FBQ2hDO2lCQUFNLElBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtnQkFDbEQsSUFBSSxHQUFHLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUM3QjtZQUNELE9BQU8sWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDdEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBckJlLHdDQUE0QiwrQkFxQjNDLENBQUE7SUFFRCxTQUFTLFlBQVksQ0FBQyxJQUFZLEVBQUUsTUFBYztRQUNoRCxJQUFJLDJCQUEyQixHQUFHLDBEQUEwRCxDQUFDO1FBQzdGLElBQUksa0JBQWtCLEdBQUcsOEJBQThCLENBQUM7UUFDeEQsSUFBSSxrQkFBa0IsR0FBRyxZQUFZLENBQUM7UUFFdEMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUM3Qyw2REFBNkQ7WUFDN0QsTUFBTSxHQUFHLElBQUksQ0FBQztTQUNmO1FBRUQsd0NBQXdDO1FBQ3hDLElBQUksYUFBYSxHQUFHLENBQUMsQ0FBQztRQUN0QixJQUFJLG9CQUFvQixHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUM1RCxJQUFJLG9CQUFvQixFQUFFO1lBQ3hCLGFBQWEsR0FBRyxRQUFRLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDaEU7UUFFRCx5Q0FBeUM7UUFDekMsSUFBSSxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFDNUIsSUFBSSxvQkFBb0IsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDNUQsSUFBSSxvQkFBb0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNsRixnQkFBZ0IsR0FBRyxRQUFRLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEUsSUFBSSxnQkFBZ0IsR0FBRyxFQUFFLEVBQUU7Z0JBQ3pCLGdCQUFnQixHQUFHLEVBQUUsQ0FBQzthQUN2QjtTQUNGO1FBRUQsZUFBZTtRQUNmLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUM1QixJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7WUFFcEIsSUFBSSxnQkFBZ0IsS0FBSyxJQUFJLEVBQUU7Z0JBQzdCLHVDQUF1QztnQkFDdkMsVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzthQUM3QztpQkFBTTtnQkFDTCxVQUFVLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQzthQUN4QjtZQUVELHNCQUFzQjtZQUN0QixJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2hDLE9BQU8sZ0JBQWdCLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDcEc7aUJBQU07Z0JBQ0wsT0FBTyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUM7YUFDcEQ7U0FFRjtRQUNELGNBQWM7YUFDVCxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDakMsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVuQyxrQkFBa0I7WUFDbEIsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUM3QixPQUFPLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUNwQztZQUNELGVBQWU7aUJBQ1Y7Z0JBQ0gsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLENBQUM7Z0JBQzVDLElBQUksT0FBTyxHQUFHLFlBQVksR0FBRyxFQUFFLENBQUM7Z0JBRWhDLE9BQU8sZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDMUU7U0FDRjtRQUNELGlCQUFpQjthQUNaO1lBQ0gsT0FBTyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1NBQ3pEO0lBQ0gsQ0FBQztBQUNILENBQUMsRUF2TGdCLFdBQVcsR0FBWCxtQkFBVyxLQUFYLG1CQUFXLFFBdUwzQjs7Ozs7Ozs7Ozs7Ozs7O0FDdkxELDRDQUEyQztBQUUzQzs7OztHQUlHO0FBQ0g7SUFRRSwrQkFBWSxNQUFpQixFQUFFLE9BQXlDLEVBQUUsU0FBNEI7UUFBdEcsaUJBUUM7UUE0Qk8sZ0JBQVcsR0FBRyxVQUFDLEtBQW9CO1lBQ3pDLElBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7WUFDaEMsSUFBSSxDQUFDLEtBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDMUMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDdkQ7UUFDSCxDQUFDLENBQUM7UUFFTSxtQkFBYyxHQUFHLFVBQUMsS0FBb0I7WUFDNUMsSUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztZQUNoQyxJQUFJLEtBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDekMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQzFDO1FBQ0gsQ0FBQyxDQUFDO1FBRU0sMEJBQXFCLEdBQUc7WUFDOUIsSUFBSSxDQUFDLEtBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO2dCQUMxQixvQ0FBb0M7Z0JBQ3BDLE9BQU87YUFDUjtZQUVELElBQUksZUFBZSxHQUFHLEtBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFDLFFBQVEsSUFBSyxPQUFBLFFBQVEsQ0FBQyxPQUFPLEVBQWhCLENBQWdCLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNoRyxLQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDOUcsQ0FBQyxDQUFDO1FBRU0sbUJBQWMsR0FBRztZQUN2QixLQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2hDLENBQUMsQ0FBQTtRQUVPLHFCQUFnQixHQUFHO1lBQ3pCLElBQUksQ0FBQyxLQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtnQkFDMUIsb0NBQW9DO2dCQUNwQyxPQUFPO2FBQ1I7WUFFRCxJQUFNLFdBQVcsR0FBYTtnQkFDNUIsR0FBRyxFQUFFLHFCQUFxQixDQUFDLGlCQUFpQjtnQkFDNUMsS0FBSyxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO2FBQ2hDLENBQUM7WUFFRixJQUFNLFNBQVMsR0FBRyxLQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMvQyxJQUFNLGtCQUFrQixHQUFHLFVBQUMsUUFBdUI7Z0JBQ2pELE9BQU8sRUFBRSxHQUFHLEVBQUUsUUFBUSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3JELENBQUMsQ0FBQztZQUVGLEtBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCO2dCQUMvQixXQUFXO2VBQUssU0FBUyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxRQUNqRCxDQUFDO1lBQ0gsS0FBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDL0IsQ0FBQyxDQUFDO1FBbkZBLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO1FBQzNCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBRTNCLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFTyxrREFBa0IsR0FBMUI7UUFBQSxpQkFZQztRQVhDLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxVQUFDLENBQUMsRUFBRSxLQUFhO1lBQ3pELCtEQUErRDtZQUMvRCxJQUFJLEtBQUssS0FBSyxxQkFBcUIsQ0FBQyxpQkFBaUIsRUFBRTtnQkFDckQsSUFBTSxlQUFlLEdBQUcsS0FBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQUMsUUFBUSxJQUFLLE9BQUEsUUFBUSxDQUFDLE9BQU8sRUFBaEIsQ0FBZ0IsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUNsRyxJQUFJLGVBQWUsRUFBRTtvQkFDbkIsS0FBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztpQkFDbkQ7YUFDRjtpQkFBTTtnQkFDTCxLQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQzNDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sZ0RBQWdCLEdBQXhCO1FBQ0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUM1RixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDN0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDckYseUNBQXlDO1FBQ3pDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3BGLDJEQUEyRDtRQUMzRCxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3RGLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDL0UsQ0FBQztJQXhDYyx1Q0FBaUIsR0FBVyxNQUFYLEFBQWlCLENBQUM7SUEyRnBELDRCQUFDO0NBN0ZELEFBNkZDLElBQUE7Ozs7OztBQ3ZHRCwyRUFBMkU7QUFDM0U7O0dBRUc7QUFDSDtJQWFFOzs7OztPQUtHO0lBQ0gsaUJBQVksS0FBYSxFQUFFLFFBQW9CLEVBQUUsTUFBdUI7UUFBdkIsdUJBQUEsRUFBQSxjQUF1QjtRQUN0RSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7O09BR0c7SUFDSCx1QkFBSyxHQUFMO1FBQ0UsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2IsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7O09BRUc7SUFDSCx1QkFBSyxHQUFMO1FBQ0UsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7T0FFRztJQUNILHVCQUFLLEdBQUw7UUFBQSxpQkFZQztRQVhDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUVyQixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsbUJBQW1CLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ25FO2FBQU07WUFDTCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsVUFBVSxDQUFDO2dCQUNwQyxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztnQkFDcEIsS0FBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2xCLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDaEI7UUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQsMEJBQVEsR0FBUjtRQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRU8sK0JBQWEsR0FBckI7UUFDRSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixhQUFhLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDekM7YUFBTTtZQUNMLFlBQVksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztTQUN4QztRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFDSCxjQUFDO0FBQUQsQ0F4RUEsQUF3RUMsSUFBQTtBQXhFWSwwQkFBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNKcEIsdUVBQXNFO0FBQ3RFLG1HQUFrRztBQUNsRyxtRkFBMEY7QUFDMUYsZ0VBQStEO0FBQy9ELG9FQUFtRTtBQUNuRSxvRUFBbUU7QUFDbkUsNEVBQTJFO0FBQzNFLDhFQUE2RTtBQUM3RSx3RUFBdUU7QUFDdkUsNEVBQTJFO0FBQzNFLDREQUEyRDtBQUMzRCxxR0FBb0c7QUFDcEcsd0ZBQXVGO0FBQ3ZGLDZGQUE0RjtBQUM1RixvRUFBbUU7QUFDbkUsc0RBQXFEO0FBQ3JELG9EQUFtRDtBQUNuRCxvRUFBMEY7QUFDMUYsZ0RBQStDO0FBQy9DLDBEQUF5RDtBQUN6RCwwRUFBeUU7QUFDekUsc0VBQXFFO0FBQ3JFLDBEQUF5RDtBQUN6RCw4Q0FBNkM7QUFDN0MsMEZBQXlGO0FBQ3pGLHdFQUF1RTtBQUN2RSxrRUFBaUU7QUFDakUsOERBQTZEO0FBQzdELDBFQUF5RTtBQUN6RSw4RUFBNkU7QUFDN0Usd0RBQXVEO0FBQ3ZELGtFQUFpRTtBQUNqRSw0RUFBMkU7QUFDM0Usb0VBQW1FO0FBQ25FLGtEQUFpRDtBQUNqRCw0RUFBMkU7QUFDM0Usb0RBQW1EO0FBQ25ELHdFQUF1RTtBQUN2RSw4REFBNkQ7QUFDN0QsOERBQTZEO0FBQzdELDBEQUF5RDtBQUN6RCx3REFBdUQ7QUFDdkQsNERBQWlGO0FBQ2pGLDZDQUE0QztBQUM1Qyw0Q0FBMkM7QUFDM0MsZ0VBQStEO0FBQy9ELHlDQUE0RDtBQUc1RCw0Q0FBMkM7QUFDM0MsZ0VBQStEO0FBQy9ELG9FQUFtRTtBQUNuRSwyRUFBMEU7QUFDMUUsK0VBQThFO0FBQzlFLCtFQUErRjtBQVEvRixJQUFJLFNBQW9CLENBQUM7QUFDekIsSUFBSSxTQUFvQixDQUFDO0FBQ3pCLElBQUksUUFBa0IsQ0FBQztBQUV2QixJQUFpQixTQUFTLENBb29CekI7QUFwb0JELFdBQWlCLFNBQVM7SUFDeEIsU0FBZ0IsY0FBYyxDQUM1QixNQUFpQixFQUNqQixNQUFxQjtRQUFyQix1QkFBQSxFQUFBLFdBQXFCO1FBRXJCLE9BQU8sU0FBUyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUxlLHdCQUFjLGlCQUs3QixDQUFBO0lBRUQsU0FBZ0IseUJBQXlCLENBQ3ZDLE1BQWlCLEVBQ2pCLE1BQXFCO1FBQXJCLHVCQUFBLEVBQUEsV0FBcUI7UUFFckIsUUFBUSxHQUFHLE1BQU0sQ0FBQztRQUNsQixTQUFTLEdBQUcsTUFBTSxDQUFDO1FBQ25CLFNBQVMsR0FBRyxTQUFTLENBQUMsd0JBQXdCLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQy9ELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFSZSxtQ0FBeUIsNEJBUXhDLENBQUE7SUFFRCxTQUFnQiwwQkFBMEIsQ0FDeEMsTUFBaUIsRUFDakIsTUFBcUI7UUFBckIsdUJBQUEsRUFBQSxXQUFxQjtRQUVyQixPQUFPLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUxlLG9DQUEwQiw2QkFLekMsQ0FBQTtJQUVELFNBQWdCLGdCQUFnQixDQUM5QixNQUFpQixFQUNqQixNQUFxQjtRQUFyQix1QkFBQSxFQUFBLFdBQXFCO1FBRXJCLE9BQU8sU0FBUyxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUxlLDBCQUFnQixtQkFLL0IsQ0FBQTtJQUVELFNBQWdCLFFBQVE7UUFDdEIsSUFBSSxlQUFlLEdBQUcsSUFBSSxpQ0FBZSxFQUFFLENBQUM7UUFFNUMsSUFBSSxxQkFBcUIsR0FBRyxJQUFJLHFDQUFpQixDQUFDO1lBQ2hELFVBQVUsRUFBRTtnQkFDVixJQUFJLHFDQUFpQixDQUNuQixXQUFJLENBQUMsWUFBWSxDQUFDLHdCQUF3QixDQUFDLEVBQzNDLElBQUksNkNBQXFCLEVBQUUsQ0FDNUI7Z0JBQ0QsSUFBSSxxQ0FBaUIsQ0FDbkIsV0FBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFDMUIsSUFBSSwrQ0FBc0IsRUFBRSxDQUM3QjtnQkFDRCxJQUFJLHFDQUFpQixDQUNuQixXQUFJLENBQUMsWUFBWSxDQUFDLHNCQUFzQixDQUFDLEVBQ3pDLElBQUkseUNBQW1CLEVBQUUsQ0FDMUI7Z0JBQ0QsSUFBSSxxQ0FBaUIsQ0FDbkIsV0FBSSxDQUFDLFlBQVksQ0FBQyx3QkFBd0IsQ0FBQyxFQUMzQyxJQUFJLDZDQUFxQixFQUFFLENBQzVCO2FBQ0Y7U0FDRixDQUFDLENBQUM7UUFFSCxJQUFJLGFBQWEsR0FBRyxJQUFJLDZCQUFhLENBQUM7WUFDcEMsVUFBVSxFQUFFLENBQUMscUJBQXFCLENBQUM7WUFDbkMsTUFBTSxFQUFFLElBQUk7U0FDYixDQUFDLENBQUM7UUFFSCxJQUFJLHlCQUF5QixHQUFHLElBQUkscURBQXlCLENBQUM7WUFDNUQsYUFBYSxFQUFFLGFBQWE7WUFDNUIsT0FBTyxFQUFFLGVBQWU7U0FDekIsQ0FBQyxDQUFDO1FBRUgsSUFBTSxpQkFBaUIsR0FBRyxJQUFJLHFDQUFpQixFQUFFLENBQUM7UUFFbEQsSUFBSSwwQkFBMEIsR0FBRyxJQUFJLHlEQUEyQixDQUFDO1lBQy9ELFVBQVUsRUFBRSx5QkFBeUI7WUFDckMsU0FBUyxFQUFFLGFBQWE7WUFDeEIsU0FBUyxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUM7WUFDbEQsSUFBSSxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO1NBQ2hDLENBQUMsQ0FBQztRQUVILHFCQUFxQixDQUFDLFlBQVksQ0FDaEMsSUFBSSxxQ0FBaUIsQ0FDbkIsSUFBSSw2Q0FBcUIsQ0FBQztZQUN4QixJQUFJLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQztZQUM3QyxNQUFNLEVBQUUsMEJBQTBCO1NBQ25DLENBQUMsRUFDRixpQkFBaUIsRUFDakI7WUFDRSxJQUFJLEVBQUUsU0FBUztTQUNoQixDQUNGLENBQ0YsQ0FBQztRQUVGLGFBQWEsQ0FBQyxZQUFZLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUV0RCxJQUFJLFVBQVUsR0FBRyxJQUFJLHVCQUFVLENBQUM7WUFDOUIsVUFBVSxFQUFFO2dCQUNWLGFBQWE7Z0JBQ2IsSUFBSSxxQkFBUyxDQUFDO29CQUNaLFVBQVUsRUFBRTt3QkFDVixJQUFJLHFDQUFpQixDQUFDOzRCQUNwQixhQUFhLEVBQUUseUNBQXFCLENBQUMsV0FBVzs0QkFDaEQsa0JBQWtCLEVBQUUsSUFBSTt5QkFDekIsQ0FBQzt3QkFDRixJQUFJLGlCQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSwyQkFBWSxFQUFFLEVBQUUsQ0FBQzt3QkFDMUMsSUFBSSxxQ0FBaUIsQ0FBQzs0QkFDcEIsYUFBYSxFQUFFLHlDQUFxQixDQUFDLFNBQVM7NEJBQzlDLFVBQVUsRUFBRSxDQUFDLFlBQVksQ0FBQzt5QkFDM0IsQ0FBQztxQkFDSDtvQkFDRCxVQUFVLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztpQkFDL0IsQ0FBQztnQkFDRixJQUFJLHFCQUFTLENBQUM7b0JBQ1osVUFBVSxFQUFFO3dCQUNWLElBQUksMkNBQW9CLEVBQUU7d0JBQzFCLElBQUksdUNBQWtCLEVBQUU7d0JBQ3hCLElBQUksMkJBQVksRUFBRTt3QkFDbEIsSUFBSSxlQUFNLEVBQUU7d0JBQ1osSUFBSSwyREFBNEIsRUFBRTt3QkFDbEMsSUFBSSx5Q0FBbUIsRUFBRTt3QkFDekIsSUFBSSxtQ0FBZ0IsRUFBRTt3QkFDdEIsSUFBSSw2Q0FBcUIsRUFBRTt3QkFDM0IsSUFBSSwrQkFBYyxFQUFFO3dCQUNwQixJQUFJLDJDQUFvQixDQUFDLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxDQUFDO3dCQUMxRCxJQUFJLCtDQUFzQixFQUFFO3FCQUM3QjtvQkFDRCxVQUFVLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztpQkFDbEMsQ0FBQzthQUNIO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLHlCQUFXLENBQUM7WUFDckIsVUFBVSxFQUFFO2dCQUNWLGVBQWU7Z0JBQ2YsSUFBSSxtQ0FBZ0IsRUFBRTtnQkFDdEIsSUFBSSw2Q0FBcUIsRUFBRTtnQkFDM0IsSUFBSSxpREFBMkIsRUFBRTtnQkFDakMsSUFBSSxxQ0FBaUIsRUFBRTtnQkFDdkIsVUFBVTtnQkFDVixJQUFJLG1CQUFRLEVBQUU7Z0JBQ2QsSUFBSSw2Q0FBcUIsRUFBRTtnQkFDM0IsSUFBSSxxQkFBUyxFQUFFO2dCQUNmLElBQUkseUNBQW1CLEVBQUU7YUFDMUI7WUFDRCxTQUFTLEVBQUUsSUFBSTtZQUNmLHlCQUF5QixFQUFFO2dCQUN6Qix5QkFBVyxDQUFDLFdBQVcsQ0FBQyxRQUFRO2dCQUNoQyx5QkFBVyxDQUFDLFdBQVcsQ0FBQyxNQUFNO2dCQUM5Qix5QkFBVyxDQUFDLFdBQVcsQ0FBQyxRQUFRO2FBQ2pDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQWxIZSxrQkFBUSxXQWtIdkIsQ0FBQTtJQUVELFNBQWdCLFdBQVc7UUFDekIsT0FBTyxJQUFJLHlCQUFXLENBQUM7WUFDckIsVUFBVSxFQUFFO2dCQUNWLElBQUksbUNBQWdCLEVBQUU7Z0JBQ3RCLElBQUksK0JBQWMsRUFBRTtnQkFDcEIsSUFBSSw2Q0FBcUIsRUFBRTtnQkFDM0IsSUFBSSxxQkFBUyxDQUFDO29CQUNaLFVBQVUsRUFBRTt3QkFDVixJQUFJLCtCQUFjLENBQUM7NEJBQ2pCLElBQUksRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLG1CQUFtQixDQUFDO3lCQUM3QyxDQUFDO3dCQUNGLElBQUksMkJBQVksRUFBRTtxQkFDbkI7b0JBQ0QsUUFBUSxFQUFFLGVBQWU7aUJBQzFCLENBQUM7Z0JBQ0YsSUFBSSx1QkFBVSxDQUFDO29CQUNiLFVBQVUsRUFBRTt3QkFDVixJQUFJLHFCQUFTLENBQUM7NEJBQ1osVUFBVSxFQUFFO2dDQUNWLElBQUksMkNBQW9CLEVBQUU7Z0NBQzFCLElBQUksdUNBQWtCLEVBQUU7Z0NBQ3hCLElBQUksMkJBQVksRUFBRTtnQ0FDbEIsSUFBSSxlQUFNLEVBQUU7Z0NBQ1osSUFBSSwrQ0FBc0IsRUFBRTs2QkFDN0I7NEJBQ0QsVUFBVSxFQUFFLENBQUMsbUJBQW1CLENBQUM7eUJBQ2xDLENBQUM7cUJBQ0g7aUJBQ0YsQ0FBQzthQUNIO1lBQ0QsVUFBVSxFQUFFLENBQUMsYUFBYSxDQUFDO1lBQzNCLFNBQVMsRUFBRSxJQUFJO1lBQ2YseUJBQXlCLEVBQUU7Z0JBQ3pCLHlCQUFXLENBQUMsV0FBVyxDQUFDLFFBQVE7Z0JBQ2hDLHlCQUFXLENBQUMsV0FBVyxDQUFDLE1BQU07Z0JBQzlCLHlCQUFXLENBQUMsV0FBVyxDQUFDLFFBQVE7YUFDakM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBdENlLHFCQUFXLGNBc0MxQixDQUFBO0lBRUQsU0FBZ0IsbUJBQW1CO1FBQ2pDLElBQUksZUFBZSxHQUFHLElBQUksaUNBQWUsRUFBRSxDQUFDO1FBRTVDLElBQUkscUJBQXFCLEdBQUcsSUFBSSxxQ0FBaUIsQ0FBQztZQUNoRCxVQUFVLEVBQUU7Z0JBQ1YsSUFBSSxxQ0FBaUIsQ0FDbkIsV0FBSSxDQUFDLFlBQVksQ0FBQyx3QkFBd0IsQ0FBQyxFQUMzQyxJQUFJLDZDQUFxQixFQUFFLENBQzVCO2dCQUNELElBQUkscUNBQWlCLENBQ25CLFdBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEVBQzFCLElBQUksK0NBQXNCLEVBQUUsQ0FDN0I7Z0JBQ0QsSUFBSSxxQ0FBaUIsQ0FDbkIsV0FBSSxDQUFDLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxFQUN6QyxJQUFJLHlDQUFtQixFQUFFLENBQzFCO2dCQUNELElBQUkscUNBQWlCLENBQ25CLFdBQUksQ0FBQyxZQUFZLENBQUMsd0JBQXdCLENBQUMsRUFDM0MsSUFBSSw2Q0FBcUIsRUFBRSxDQUM1QjthQUNGO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsSUFBSSxhQUFhLEdBQUcsSUFBSSw2QkFBYSxDQUFDO1lBQ3BDLFVBQVUsRUFBRSxDQUFDLHFCQUFxQixDQUFDO1lBQ25DLE1BQU0sRUFBRSxJQUFJO1lBQ1osdUJBQXVCLEVBQUUsS0FBSztZQUM5QixTQUFTLEVBQUUsQ0FBQyxDQUFDO1NBQ2QsQ0FBQyxDQUFDO1FBRUgsSUFBSSx5QkFBeUIsR0FBRyxJQUFJLHFEQUF5QixDQUFDO1lBQzVELGFBQWEsRUFBRSxhQUFhO1lBQzVCLE9BQU8sRUFBRSxlQUFlO1NBQ3pCLENBQUMsQ0FBQztRQUVILElBQUksMEJBQTBCLEdBQUcsSUFBSSx5REFBMkIsQ0FBQztZQUMvRCxVQUFVLEVBQUUseUJBQXlCO1lBQ3JDLFNBQVMsRUFBRSxhQUFhO1lBQ3hCLFNBQVMsRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLG9CQUFvQixDQUFDO1lBQ2xELElBQUksRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztTQUNoQyxDQUFDLENBQUM7UUFFSCxJQUFNLGlCQUFpQixHQUFHLElBQUkscUNBQWlCLEVBQUUsQ0FBQztRQUVsRCxxQkFBcUIsQ0FBQyxZQUFZLENBQ2hDLElBQUkscUNBQWlCLENBQ25CLElBQUksNkNBQXFCLENBQUM7WUFDeEIsSUFBSSxFQUFFLFdBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUM7WUFDN0MsTUFBTSxFQUFFLDBCQUEwQjtTQUNuQyxDQUFDLEVBQ0YsaUJBQWlCLEVBQ2pCO1lBQ0UsSUFBSSxFQUFFLFNBQVM7U0FDaEIsQ0FDRixDQUNGLENBQUM7UUFFRixhQUFhLENBQUMsWUFBWSxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFFdEQsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLHlCQUFXLENBQUMsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLHlCQUF5QixDQUFDLFlBQVksQ0FDcEMsSUFBSSx5QkFBVyxDQUFDLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQzNDLENBQUM7UUFFRixJQUFJLFVBQVUsR0FBRyxJQUFJLHVCQUFVLENBQUM7WUFDOUIsVUFBVSxFQUFFO2dCQUNWLElBQUkscUJBQVMsQ0FBQztvQkFDWixVQUFVLEVBQUU7d0JBQ1YsSUFBSSxxQ0FBaUIsQ0FBQzs0QkFDcEIsYUFBYSxFQUFFLHlDQUFxQixDQUFDLFdBQVc7NEJBQ2hELGtCQUFrQixFQUFFLElBQUk7eUJBQ3pCLENBQUM7d0JBQ0YsSUFBSSxpQkFBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksMkJBQVksRUFBRSxFQUFFLENBQUM7d0JBQzFDLElBQUkscUNBQWlCLENBQUM7NEJBQ3BCLGFBQWEsRUFBRSx5Q0FBcUIsQ0FBQyxTQUFTOzRCQUM5QyxVQUFVLEVBQUUsQ0FBQyxZQUFZLENBQUM7eUJBQzNCLENBQUM7d0JBQ0YsSUFBSSwrQ0FBc0IsQ0FBQzs0QkFDekIsVUFBVSxFQUFFLENBQUMscUNBQXFDLENBQUM7eUJBQ3BELENBQUM7cUJBQ0g7b0JBQ0QsVUFBVSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7aUJBQy9CLENBQUM7YUFDSDtTQUNGLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSx5QkFBVyxDQUFDO1lBQ3JCLFVBQVUsRUFBRTtnQkFDVixlQUFlO2dCQUNmLElBQUksbUNBQWdCLEVBQUU7Z0JBQ3RCLElBQUkscUNBQWlCLEVBQUU7Z0JBQ3ZCLElBQUksNkNBQXFCLEVBQUU7Z0JBQzNCLElBQUksaURBQTJCLEVBQUU7Z0JBQ2pDLElBQUksNkNBQXFCLEVBQUU7Z0JBQzNCLFVBQVU7Z0JBQ1YsSUFBSSxtQkFBUSxDQUFDO29CQUNYLFVBQVUsRUFBRTt3QkFDVixJQUFJLDJCQUFZLEVBQUU7d0JBQ2xCLElBQUksNkJBQWEsQ0FBQyxFQUFFLE9BQU8sRUFBRSxvQ0FBb0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQzt3QkFDMUQsSUFBSSxtQ0FBZ0IsRUFBRTt3QkFDdEIsSUFBSSwrQkFBYyxFQUFFO3dCQUNwQixJQUFJLDJEQUE0QixFQUFFO3dCQUNsQyxJQUFJLHlDQUFtQixFQUFFO3dCQUN6QixJQUFJLDZDQUFxQixFQUFFO3dCQUMzQixJQUFJLDJDQUFvQixDQUFDLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxDQUFDO3FCQUMzRDtpQkFDRixDQUFDO2dCQUNGLGFBQWE7Z0JBQ2IsSUFBSSxxQkFBUyxFQUFFO2dCQUNmLElBQUkseUNBQW1CLEVBQUU7YUFDMUI7WUFDRCxVQUFVLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztZQUNuQyxTQUFTLEVBQUUsSUFBSTtZQUNmLHlCQUF5QixFQUFFO2dCQUN6Qix5QkFBVyxDQUFDLFdBQVcsQ0FBQyxRQUFRO2dCQUNoQyx5QkFBVyxDQUFDLFdBQVcsQ0FBQyxNQUFNO2dCQUM5Qix5QkFBVyxDQUFDLFdBQVcsQ0FBQyxRQUFRO2FBQ2pDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQXhIZSw2QkFBbUIsc0JBd0hsQyxDQUFBO0lBRUQsU0FBZ0Isc0JBQXNCO1FBQ3BDLE9BQU8sSUFBSSx5QkFBVyxDQUFDO1lBQ3JCLFVBQVUsRUFBRTtnQkFDVixJQUFJLG1DQUFnQixFQUFFO2dCQUN0QixJQUFJLCtCQUFjLEVBQUU7Z0JBQ3BCLElBQUksNkNBQXFCLEVBQUU7Z0JBQzNCLElBQUksbUJBQVEsQ0FBQztvQkFDWCxVQUFVLEVBQUU7d0JBQ1YsMkRBQTJEO3dCQUMzRCxJQUFJLGFBQUssQ0FBQyxFQUFFLFFBQVEsRUFBRSxzQkFBc0IsRUFBRSxDQUFDO3dCQUMvQyxJQUFJLCtDQUFzQixFQUFFO3FCQUM3QjtpQkFDRixDQUFDO2dCQUNGLElBQUkscUJBQVMsQ0FBQztvQkFDWixVQUFVLEVBQUU7d0JBQ1YsSUFBSSwrQkFBYyxDQUFDLEVBQUUsSUFBSSxFQUFFLDBCQUEwQixFQUFFLENBQUM7d0JBQ3hELElBQUksMkJBQVksRUFBRTtxQkFDbkI7b0JBQ0QsUUFBUSxFQUFFLGVBQWU7aUJBQzFCLENBQUM7YUFDSDtZQUNELFVBQVUsRUFBRSxDQUFDLGFBQWEsRUFBRSxxQkFBcUIsQ0FBQztZQUNsRCxTQUFTLEVBQUUsSUFBSTtZQUNmLHlCQUF5QixFQUFFO2dCQUN6Qix5QkFBVyxDQUFDLFdBQVcsQ0FBQyxRQUFRO2dCQUNoQyx5QkFBVyxDQUFDLFdBQVcsQ0FBQyxNQUFNO2dCQUM5Qix5QkFBVyxDQUFDLFdBQVcsQ0FBQyxRQUFRO2FBQ2pDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQTdCZSxnQ0FBc0IseUJBNkJyQyxDQUFBO0lBRUQsU0FBZ0Isb0JBQW9CO1FBQ2xDLElBQUksVUFBVSxHQUFHLElBQUksdUJBQVUsQ0FBQztZQUM5QixVQUFVLEVBQUU7Z0JBQ1YsSUFBSSxxQkFBUyxDQUFDO29CQUNaLFVBQVUsRUFBRTt3QkFDVixJQUFJLHFDQUFpQixDQUFDOzRCQUNwQixhQUFhLEVBQUUseUNBQXFCLENBQUMsV0FBVzs0QkFDaEQsa0JBQWtCLEVBQUUsSUFBSTt5QkFDekIsQ0FBQzt3QkFDRixJQUFJLGlCQUFPLENBQUMsRUFBRSxzQ0FBc0MsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO3dCQUMzRCxJQUFJLHFDQUFpQixDQUFDOzRCQUNwQixhQUFhLEVBQUUseUNBQXFCLENBQUMsU0FBUzs0QkFDOUMsVUFBVSxFQUFFLENBQUMsWUFBWSxDQUFDO3lCQUMzQixDQUFDO3FCQUNIO29CQUNELFVBQVUsRUFBRSxDQUFDLGdCQUFnQixDQUFDO2lCQUMvQixDQUFDO2FBQ0g7U0FDRixDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksaUNBQWUsQ0FBQztZQUN6QixVQUFVLEVBQUU7Z0JBQ1YsSUFBSSxpQ0FBZSxFQUFFO2dCQUNyQixJQUFJLG1DQUFnQixFQUFFO2dCQUN0QixJQUFJLDZDQUFxQixFQUFFO2dCQUMzQixJQUFJLHFCQUFTLEVBQUU7Z0JBQ2YsVUFBVTtnQkFDVixJQUFJLG1CQUFRLENBQUMsRUFBRSx5QkFBeUIsRUFBRSxJQUFJLEVBQUUsQ0FBQztnQkFDakQsSUFBSSx5Q0FBbUIsRUFBRTthQUMxQjtZQUNELFVBQVUsRUFBRSxDQUFDLHVCQUF1QixDQUFDO1lBQ3JDLFNBQVMsRUFBRSxJQUFJO1lBQ2YseUJBQXlCLEVBQUU7Z0JBQ3pCLHlCQUFXLENBQUMsV0FBVyxDQUFDLFFBQVE7Z0JBQ2hDLHlCQUFXLENBQUMsV0FBVyxDQUFDLE1BQU07Z0JBQzlCLHlCQUFXLENBQUMsV0FBVyxDQUFDLFFBQVE7YUFDakM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBdENlLDhCQUFvQix1QkFzQ25DLENBQUE7SUFFRCxTQUFnQixhQUFhLENBQzNCLE1BQWlCLEVBQ2pCLE1BQXFCO1FBQXJCLHVCQUFBLEVBQUEsV0FBcUI7UUFFckIsc0RBQXNEO1FBQ3RELElBQUksc0JBQXNCLEdBQUcsR0FBRyxDQUFDO1FBRWpDLE9BQU8sSUFBSSxxQkFBUyxDQUNsQixNQUFNLEVBQ047WUFDRTtnQkFDRSxFQUFFLEVBQUUsc0JBQXNCLEVBQUU7Z0JBQzVCLFNBQVMsRUFBRSxVQUFDLE9BQTJCO29CQUNyQyxPQUFPLENBQ0wsT0FBTyxDQUFDLFFBQVE7d0JBQ2hCLE9BQU8sQ0FBQyxhQUFhLEdBQUcsc0JBQXNCO3dCQUM5QyxPQUFPLENBQUMsSUFBSTt3QkFDWixPQUFPLENBQUMsWUFBWSxDQUNyQixDQUFDO2dCQUNKLENBQUM7YUFDRjtZQUNEO2dCQUNFLEVBQUUsRUFBRSxXQUFXLEVBQUU7Z0JBQ2pCLFNBQVMsRUFBRSxVQUFDLE9BQTJCO29CQUNyQyxPQUFPLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLFlBQVksQ0FBQztnQkFDOUMsQ0FBQzthQUNGO1lBQ0Q7Z0JBQ0UsRUFBRSxFQUFFLG1CQUFtQixFQUFFO2dCQUN6QixTQUFTLEVBQUUsVUFBQyxPQUEyQjtvQkFDckMsT0FBTyxDQUNMLENBQUMsT0FBTyxDQUFDLElBQUk7d0JBQ2IsQ0FBQyxPQUFPLENBQUMsWUFBWTt3QkFDckIsT0FBTyxDQUFDLFFBQVE7d0JBQ2hCLE9BQU8sQ0FBQyxhQUFhLEdBQUcsc0JBQXNCLENBQy9DLENBQUM7Z0JBQ0osQ0FBQzthQUNGO1lBQ0Q7Z0JBQ0UsRUFBRSxFQUFFLFFBQVEsRUFBRTtnQkFDZCxTQUFTLEVBQUUsVUFBQyxPQUEyQjtvQkFDckMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO2dCQUNoRCxDQUFDO2FBQ0Y7U0FDRixFQUNELE1BQU0sQ0FDUCxDQUFDO0lBQ0osQ0FBQztJQS9DZSx1QkFBYSxnQkErQzVCLENBQUE7SUFFRCxTQUFnQix3QkFBd0IsQ0FDdEMsTUFBaUIsRUFDakIsTUFBcUI7UUFBckIsdUJBQUEsRUFBQSxXQUFxQjtRQUVyQixJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsb0JBQW9CLEVBQUU7WUFDeEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQ3JDLGtCQUFrQixFQUNsQixVQUFDLElBQWE7Z0JBQ0osSUFBQSxTQUFTLEdBQUssQ0FBQSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFBLFVBQTdDLENBQThDO2dCQUMvRCxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBRXBCLFNBQVMsR0FBRyxTQUFTO29CQUNuQixDQUFDLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUM7b0JBQ3BELENBQUMsQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQzNELENBQUMsQ0FDRixDQUFDO1NBQ0g7UUFFRCxPQUFPLElBQUkscUJBQVMsQ0FDbEIsTUFBTSxFQUNOO1lBQ0U7Z0JBQ0UsRUFBRSxFQUFFLHNCQUFzQixFQUFFO2dCQUM1QixTQUFTLEVBQUUsVUFBQyxPQUEyQjtvQkFDckMsT0FBTyxPQUFPLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxZQUFZLENBQUM7Z0JBQzlDLENBQUM7YUFDRjtZQUNEO2dCQUNFLEVBQUUsRUFBRSxtQkFBbUIsRUFBRTtnQkFDekIsU0FBUyxFQUFFLFVBQUMsT0FBMkI7b0JBQ3JDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQztnQkFDaEQsQ0FBQzthQUNGO1NBQ0YsRUFDRCxNQUFNLENBQ1AsQ0FBQztJQUNKLENBQUM7SUFwQ2Usa0NBQXdCLDJCQW9DdkMsQ0FBQTtJQUVELFNBQWdCLHlCQUF5QixDQUN2QyxNQUFpQixFQUNqQixNQUFxQjtRQUFyQix1QkFBQSxFQUFBLFdBQXFCO1FBRXJCLE9BQU8sSUFBSSxxQkFBUyxDQUFDLE1BQU0sRUFBRSxvQkFBb0IsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFMZSxtQ0FBeUIsNEJBS3hDLENBQUE7SUFFRCxTQUFnQixlQUFlLENBQzdCLE1BQWlCLEVBQ2pCLE1BQXFCO1FBQXJCLHVCQUFBLEVBQUEsV0FBcUI7UUFFckIsT0FBTyxJQUFJLHFCQUFTLENBQ2xCLE1BQU0sRUFDTjt5QkFFTyxVQUFVLEVBQUU7U0FFbEIsRUFDRCxNQUFNLENBQ1AsQ0FBQztJQUNKLENBQUM7SUFiZSx5QkFBZSxrQkFhOUIsQ0FBQTtJQUVELFNBQWdCLFVBQVU7UUFDeEIsSUFBTSxlQUFlLEdBQUcsSUFBSSxpQ0FBZSxFQUFFLENBQUM7UUFDOUMsSUFBTSxpQkFBaUIsR0FBRyxJQUFJLDZCQUFhLENBQUM7WUFDMUMsVUFBVSxFQUFFO2dCQUNWLElBQUkscUNBQWlCLENBQUM7b0JBQ3BCLFVBQVUsRUFBRSxDQUFDLElBQUkscUNBQWlCLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxDQUFDO2lCQUMzRCxDQUFDO2FBQ0g7WUFDRCxNQUFNLEVBQUUsSUFBSTtTQUNiLENBQUMsQ0FBQztRQUVILElBQU0saUJBQWlCLEdBQUcsSUFBSSxxQ0FBaUIsRUFBRSxDQUFDO1FBQ2xELElBQU0sbUJBQW1CLEdBQUcsSUFBSSw2QkFBYSxDQUFDO1lBQzVDLFVBQVUsRUFBRTtnQkFDVixJQUFJLHFDQUFpQixDQUFDO29CQUNwQixVQUFVLEVBQUUsQ0FBQyxJQUFJLHFDQUFpQixDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO2lCQUM3RCxDQUFDO2FBQ0g7WUFDRCxNQUFNLEVBQUUsSUFBSTtTQUNiLENBQUMsQ0FBQztRQUVILElBQU0sT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLDJCQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDM0QsSUFBTSxxQkFBcUIsR0FBRyxJQUFJLDZDQUFxQixFQUFFLENBQUM7UUFDMUQsSUFBTSxvQkFBb0IsR0FBRyxJQUFJLDJDQUFvQixDQUFDO1lBQ3BELGFBQWEsRUFBRSxpQkFBaUI7WUFDaEMsNEJBQTRCLEVBQUUsSUFBSTtZQUNsQyxRQUFRLEVBQUUsaUNBQWlDO1lBQzNDLElBQUksRUFBRSxXQUFJLENBQUMsWUFBWSxDQUFDLG9CQUFvQixDQUFDO1NBQzlDLENBQUMsQ0FBQztRQUNILElBQU0saUJBQWlCLEdBQUcsSUFBSSwyQ0FBb0IsQ0FBQztZQUNqRCxhQUFhLEVBQUUsbUJBQW1CO1lBQ2xDLDRCQUE0QixFQUFFLElBQUk7WUFDbEMsUUFBUSxFQUFFLG1DQUFtQztZQUM3QyxTQUFTLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQztZQUNwRCxJQUFJLEVBQUUsV0FBSSxDQUFDLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQztTQUNoRCxDQUFDLENBQUM7UUFDSCxJQUFNLFdBQVcsR0FBRyxJQUFJLHlCQUFXLENBQUM7WUFDbEMsVUFBVSxFQUFFO2dCQUNWLElBQUksaUNBQWUsRUFBRTtnQkFDckIsSUFBSSxtQ0FBZ0IsRUFBRTtnQkFDdEIscUJBQXFCO2dCQUNyQixJQUFJLHVCQUFVLENBQUM7b0JBQ2IsVUFBVSxFQUFFO3dCQUNWLElBQUkscUJBQVMsQ0FBQzs0QkFDWixVQUFVLEVBQUU7Z0NBQ1YsSUFBSSxxQ0FBaUIsQ0FBQztvQ0FDcEIsYUFBYSxFQUFFLHlDQUFxQixDQUFDLFdBQVc7b0NBQ2hELGtCQUFrQixFQUFFLElBQUk7aUNBQ3pCLENBQUM7Z0NBQ0YsT0FBTztnQ0FDUCxJQUFJLHFDQUFpQixDQUFDO29DQUNwQixhQUFhLEVBQUUseUNBQXFCLENBQUMsYUFBYTtvQ0FDbEQsVUFBVSxFQUFFLENBQUMsWUFBWSxDQUFDO2lDQUMzQixDQUFDOzZCQUNIOzRCQUNELFVBQVUsRUFBRSxDQUFDLGdCQUFnQixDQUFDO3lCQUMvQixDQUFDO3FCQUNIO2lCQUNGLENBQUM7Z0JBQ0YsSUFBSSxtQkFBUSxDQUFDO29CQUNYLFVBQVUsRUFBRTt3QkFDVixJQUFJLHFCQUFTLENBQUM7NEJBQ1osVUFBVSxFQUFFO2dDQUNWLElBQUksNkJBQWEsQ0FBQyxFQUFFLE9BQU8sRUFBRSxvQ0FBb0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQ0FDMUQsb0JBQW9CO2dDQUNwQixpQkFBaUI7NkJBQ2xCOzRCQUNELFVBQVUsRUFBRSxDQUFDLGlCQUFpQixDQUFDO3lCQUNoQyxDQUFDO3dCQUNGLElBQUkscUJBQVMsQ0FBQzs0QkFDWixVQUFVLEVBQUU7Z0NBQ1YsSUFBSSw2QkFBYSxDQUFDO29DQUNoQixPQUFPLEVBQUUsb0NBQW9CLENBQUMsV0FBVztpQ0FDMUMsQ0FBQztnQ0FDRixpQkFBaUI7Z0NBQ2pCLG1CQUFtQjs2QkFDcEI7NEJBQ0QsVUFBVSxFQUFFLENBQUMsb0JBQW9CLENBQUM7eUJBQ25DLENBQUM7cUJBQ0g7aUJBQ0YsQ0FBQztnQkFDRixJQUFJLDZDQUFxQixFQUFFO2dCQUMzQixJQUFJLHlDQUFtQixFQUFFO2FBQzFCO1lBQ0QsVUFBVSxFQUFFLENBQUMsWUFBWSxDQUFDO1lBQzFCLFNBQVMsRUFBRSxJQUFJO1lBQ2YseUJBQXlCLEVBQUU7Z0JBQ3pCLHlCQUFXLENBQUMsV0FBVyxDQUFDLFFBQVE7Z0JBQ2hDLHlCQUFXLENBQUMsV0FBVyxDQUFDLE1BQU07Z0JBQzlCLHlCQUFXLENBQUMsV0FBVyxDQUFDLFFBQVE7YUFDakM7U0FDRixDQUFDLENBQUM7UUFFSCxJQUFNLGlCQUFpQixHQUFHLElBQUkscUNBQWlCLENBQzdDLElBQUkseUNBQW1CLENBQ3JCLFdBQVcsRUFDWCxxQkFBcUIsRUFDckIsT0FBTyxFQUNQLGlCQUFpQixFQUNqQixvQkFBb0IsQ0FDckIsRUFDRCxJQUFJLHlDQUFtQixDQUNyQixxQ0FBZSxDQUFDLFFBQVEsRUFDeEIsaUJBQWlCLEVBQ2pCLGVBQWUsQ0FDaEIsRUFDRCxJQUFJLHlDQUFtQixDQUNyQixxQ0FBZSxDQUFDLFFBQVEsRUFDeEIsbUJBQW1CLEVBQ25CLGlCQUFpQixDQUNsQixDQUNGLENBQUM7UUFFRixPQUFPO1lBQ0wsRUFBRSxFQUFFLFdBQVc7WUFDZixpQkFBaUIsRUFBRSxpQkFBaUI7U0FDckMsQ0FBQztJQUNKLENBQUM7SUFySGUsb0JBQVUsYUFxSHpCLENBQUE7SUFFRCxTQUFnQixpQkFBaUI7UUFDL0IsT0FBTyxJQUFJLHlCQUFXLENBQUM7WUFDckIsVUFBVSxFQUFFO2dCQUNWLElBQUksdUJBQVUsQ0FBQztvQkFDYixVQUFVLEVBQUU7d0JBQ1YsSUFBSSxxQkFBUyxDQUFDOzRCQUNaLFVBQVUsRUFBRTtnQ0FDVixJQUFJLDJDQUFvQixFQUFFO2dDQUMxQixJQUFJLGlCQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSwyQkFBWSxFQUFFLEVBQUUsQ0FBQztnQ0FDMUMsSUFBSSw2Q0FBcUIsRUFBRTs2QkFDNUI7NEJBQ0QsVUFBVSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7eUJBQy9CLENBQUM7cUJBQ0g7aUJBQ0YsQ0FBQzthQUNIO1lBQ0QsVUFBVSxFQUFFLENBQUMsZUFBZSxDQUFDO1lBQzdCLFNBQVMsRUFBRSxDQUFDLENBQUM7U0FDZCxDQUFDLENBQUM7SUFDTCxDQUFDO0lBbkJlLDJCQUFpQixvQkFtQmhDLENBQUE7SUFFRCxTQUFnQixzQkFBc0IsQ0FDcEMsTUFBaUIsRUFDakIsTUFBcUI7UUFBckIsdUJBQUEsRUFBQSxXQUFxQjtRQUVyQixPQUFPLElBQUkscUJBQVMsQ0FDbEIsTUFBTSxFQUNOO1lBQ0U7Z0JBQ0UsRUFBRSxFQUFFLGlCQUFpQixFQUFFO2FBQ3hCO1NBQ0YsRUFDRCxNQUFNLENBQ1AsQ0FBQztJQUNKLENBQUM7SUFiZSxnQ0FBc0IseUJBYXJDLENBQUE7QUFDSCxDQUFDLEVBcG9CZ0IsU0FBUyxHQUFULGlCQUFTLEtBQVQsaUJBQVMsUUFvb0J6Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN0c0JELHdEQUFxRDtBQUNyRCw2QkFBMEI7QUFFMUIsb0RBQWlEO0FBRWpELHFEQUEyRTtBQUMzRSxxQ0FBa0M7QUFDbEMsMkNBQXdDO0FBQ3hDLCtDQUE0QztBQUc1Qyx1REFBc0Q7QUFDdEQsNENBQTJFO0FBQzNFLG1FQUFrRTtBQUNsRSx5REFBa0c7QUF5RmxHO0lBcUNFLG1CQUFZLE1BQWlCLEVBQUUsb0JBQStDLEVBQUUsUUFBdUI7UUFBdkIseUJBQUEsRUFBQSxhQUF1QjtRQUF2RyxpQkEyTkM7UUFyUE8sV0FBTSxHQUFHO1lBQ2Ysa0JBQWtCLEVBQUUsSUFBSSxpQ0FBZSxFQUFpQztZQUN4RSxpQkFBaUIsRUFBRSxJQUFJLGlDQUFlLEVBQWtDO1NBQ3pFLENBQUM7UUF3QkEsSUFBSSxvQkFBb0IsWUFBWSx5QkFBVyxFQUFFO1lBQy9DLHNGQUFzRjtZQUN0RixJQUFJLFFBQVEsR0FBZ0Isb0JBQW9CLENBQUM7WUFDakQsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDO1lBRXBCLDRCQUE0QjtZQUM1QixVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFFbEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7U0FDOUI7YUFDSTtZQUNILG9EQUFvRDtZQUNwRCxJQUFJLENBQUMsVUFBVSxHQUFnQixvQkFBb0IsQ0FBQztTQUNyRDtRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV0RCxzRUFBc0U7UUFDdEUsUUFBUSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFL0QsSUFBSSxDQUFDLE1BQU0sdUJBQ1QsNkJBQTZCLEVBQUUsSUFBSSxFQUNuQyxvQkFBb0IsRUFBRSxJQUFJLEVBQzFCLDBCQUEwQixFQUFFLEtBQUssRUFDakMsaUJBQWlCLEVBQUUsSUFBSSxJQUNwQixRQUFRLEtBQ1gsTUFBTSxFQUFFO2dCQUNOLFNBQVMsRUFBRSxJQUFJLGlDQUFlLEVBQW1CO2FBQ2xELEVBQ0QsZ0JBQWdCLEVBQUUsSUFBSSxtQ0FBZ0IsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsU0FBUyxFQUFFLENBQUMsR0FDOUUsQ0FBQztRQUVGOzs7V0FHRztRQUNILElBQU0sWUFBWSxHQUFHO1lBQ25CLElBQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUNwRCxLQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBRTNFLGtFQUFrRTtZQUNsRSxJQUFNLG9CQUFvQixHQUFhO2dCQUNyQyxRQUFRLEVBQUU7b0JBQ1IsaUVBQWlFO29CQUNqRSxLQUFLLEVBQUUsa0JBQWtCLENBQUMsS0FBSztvQkFDL0IsV0FBVyxFQUFFLGtCQUFrQixDQUFDLFdBQVc7b0JBQzNDLE9BQU8sRUFBRyxrQkFBMEIsQ0FBQyxPQUFPO2lCQUM3QztnQkFDRCxlQUFlLEVBQUcsa0JBQTBCLENBQUMsZUFBZTthQUM3RCxDQUFDO1lBRUYseUdBQXlHO1lBQ3pHLHVHQUF1RztZQUN2RyxtQ0FBbUM7WUFDbkMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxLQUFLLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7WUFDNUYsS0FBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBVyxHQUFHLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxXQUFXLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7WUFDOUcsS0FBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxPQUFPLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO1lBQ3hHLEtBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxHQUFHLG9CQUFvQixDQUFDLGVBQWUsSUFBSSxRQUFRLENBQUMsZUFBZSxJQUFJLEVBQUUsQ0FBQztRQUN2RyxDQUFDLENBQUM7UUFFRixZQUFZLEVBQUUsQ0FBQztRQUVmLHFGQUFxRjtRQUNyRixJQUFNLFlBQVksR0FBRztZQUNuQixZQUFZLEVBQUUsQ0FBQztZQUNmLEtBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLENBQUM7UUFDOUMsQ0FBQyxDQUFDO1FBRUYsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRTVELGFBQWEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUMsQ0FBQztRQUU3RSx1RUFBdUU7UUFDdkUsc0VBQXNFO1FBQ3RFLElBQUksSUFBQSx1Q0FBbUIsRUFBQyxhQUFhLENBQUMsRUFBRTtZQUN0QyxhQUFhLENBQUMsRUFBRSxDQUFDLHVDQUFtQixDQUFDLGtCQUFrQixFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ3hFO1FBRUQsSUFBSSxRQUFRLENBQUMsU0FBUyxFQUFFO1lBQ3RCLG9HQUFvRztZQUNwRyxnSEFBZ0g7WUFDaEgsd0dBQXdHO1lBQ3hHLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxRQUFRLENBQUMsU0FBUyxZQUFZLFdBQVcsQ0FBQyxDQUFDO2dCQUNuRSxJQUFJLFNBQUcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUM3RDthQUFNO1lBQ0wsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksU0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO1NBQzFEO1FBRUQsa0RBQWtEO1FBQ2xELGtGQUFrRjtRQUNsRixJQUFJLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFDO1FBQzdCLElBQUksMEJBQTBCLEdBQUcsRUFBRSxDQUFDO1FBQ3BDLEtBQXNCLFVBQWUsRUFBZixLQUFBLElBQUksQ0FBQyxVQUFVLEVBQWYsY0FBZSxFQUFmLElBQWUsRUFBRTtZQUFsQyxJQUFJLFNBQVMsU0FBQTtZQUNoQixJQUFJLFNBQVMsQ0FBQyxTQUFTLElBQUksSUFBSSxFQUFFO2dCQUMvQix5REFBeUQ7Z0JBQ3pELDBCQUEwQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUM1QztZQUNELCtDQUErQztZQUMvQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUkseUJBQXlCLENBQ3hELE1BQU0sRUFDTixTQUFTLENBQUMsRUFBRSxFQUNaLElBQUksQ0FBQyxNQUFNLEVBQ1gsU0FBUyxDQUFDLGlCQUFpQixDQUM1QixDQUFDLENBQUM7U0FDSjtRQUNELGtFQUFrRTtRQUNsRSw2R0FBNkc7UUFDN0cseURBQXlEO1FBQ3pELElBQUksMEJBQTBCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN6QyxNQUFNLEtBQUssQ0FBQyw0RUFBNEUsQ0FBQyxDQUFDO1NBQzNGO1FBQ0QsNEZBQTRGO1FBQzVGLDRHQUE0RztRQUM1RyxpRUFBaUU7UUFDakUsSUFBSSwwQkFBMEIsQ0FBQyxNQUFNLEdBQUcsQ0FBQztlQUNwQywwQkFBMEIsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2xGLE1BQU0sS0FBSyxDQUFDLDZGQUE2RixDQUFDLENBQUM7U0FDNUc7UUFFRCxJQUFJLGNBQWMsR0FBWSxJQUFJLENBQUMsQ0FBQyxnREFBZ0Q7UUFFcEYseUVBQXlFO1FBQ3pFLElBQUksZ0JBQWdCLEdBQUcsVUFBQyxLQUFzQjtZQUM1Qyx1R0FBdUc7WUFDdkcsNEdBQTRHO1lBQzVHLG1HQUFtRztZQUNuRyxrR0FBa0c7WUFDbEcsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFO2dCQUNqQixRQUFRLEtBQUssQ0FBQyxJQUFJLEVBQUU7b0JBQ2xCLHFHQUFxRztvQkFDckcsNkZBQTZGO29CQUM3RixvR0FBb0c7b0JBQ3BHLHNHQUFzRztvQkFDdEcseUdBQXlHO29CQUN6Ryw4R0FBOEc7b0JBQzlHLHFFQUFxRTtvQkFDckUsS0FBSyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxTQUFTO3dCQUN2QyxjQUFjLEdBQUcsS0FBZ0IsQ0FBQzt3QkFDbEMsTUFBTTtvQkFDUiwyR0FBMkc7b0JBQzNHLHlHQUF5RztvQkFDekcsK0ZBQStGO29CQUMvRix1QkFBdUI7b0JBQ3ZCLEtBQUssTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsZUFBZTt3QkFDN0MsY0FBYyxHQUFHLElBQUksQ0FBQzt3QkFDdEIsMkdBQTJHO3dCQUMzRyx3R0FBd0c7d0JBQ3hHLHlHQUF5Rzt3QkFDekcseUdBQXlHO3dCQUN6RyxzR0FBc0c7d0JBQ3RHLHdHQUF3Rzt3QkFDeEcsNERBQTREO3dCQUM1RCxtR0FBbUc7d0JBQ25HLEtBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLENBQUM7d0JBQzVDLE1BQU07b0JBQ1IsMkZBQTJGO29CQUMzRixLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQztvQkFDN0MsS0FBSyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxjQUFjO3dCQUM1QyxjQUFjLEdBQUcsSUFBSSxDQUFDO3dCQUN0QixNQUFNO2lCQUNUO2FBQ0Y7WUFFRCw4QkFBOEI7WUFDOUIsSUFBSSxJQUFJLEdBQUcsY0FBYyxJQUFJLElBQUksQ0FBQztZQUNsQyxJQUFJLFlBQVksR0FBRyxLQUFLLENBQUM7WUFDekIsSUFBSSxJQUFJLEVBQUU7Z0JBQ1IsSUFBSSxFQUFFLEdBQUcsY0FBYyxDQUFDLEVBQUUsQ0FBQztnQkFDM0IsMkNBQTJDO2dCQUMzQyxJQUFJLEVBQUUsQ0FBQyxRQUFRLEVBQUU7b0JBQ2YsSUFBSSxRQUFRLEdBQUcsRUFBYyxDQUFDO29CQUM5QixZQUFZLEdBQUcsUUFBUSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLFVBQVUsSUFBSSxLQUFLLENBQUM7aUJBQzNFO2FBQ0Y7WUFFRCxJQUFJLFlBQVksRUFBRTtnQkFDaEIsdUZBQXVGO2dCQUN2Riw2RkFBNkY7Z0JBQzdGLG9CQUFvQjtnQkFDcEIsS0FBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsQ0FBQzthQUM3QztZQUVELEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQztnQkFDcEIsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsWUFBWSxFQUFFLFlBQVk7YUFDM0IsRUFBRSxVQUFDLE9BQU87Z0JBQ1QsMEdBQTBHO2dCQUMxRyxpQ0FBaUM7Z0JBQ2pDLElBQUksT0FBTyxDQUFDLElBQUksRUFBRTtvQkFDaEI7Ozs7Ozt1QkFNRztvQkFDSCxLQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLENBQUM7aUJBQzVHO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUM7UUFFRixrRUFBa0U7UUFDbEUsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFO1lBQ3BDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3pHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBQzNHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ2pHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ25HLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3RHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBQzVHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBQzFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1NBQzdHO1FBRUQsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksK0NBQXNCLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFdkUsb0JBQW9CO1FBQ3BCLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7O09BR0c7SUFDSSxrQkFBUSxHQUFmLFVBQW9FLEdBQVk7UUFDOUUsT0FBTyxXQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7O09BR0c7SUFDSSwrQkFBcUIsR0FBNUIsVUFBNkIsa0JBQXNDO1FBQ2pFLFdBQUksQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsNkJBQVMsR0FBVDtRQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsaUNBQWEsR0FBYjtRQUNFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILHFDQUFpQixHQUFqQixVQUFrQixTQUFvQixFQUFFLE1BQW1CO1FBQ3pELElBQUksY0FBYyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRXhELElBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDbEMsSUFBTSxNQUFNLEdBQThCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNsRiwwQ0FBMEM7UUFDMUMscUdBQXFHO1FBQ3JHLElBQUksTUFBTSxLQUFLLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDN0IsT0FBTztZQUNQLGtGQUFrRjtZQUNsRiwrQ0FBK0M7U0FDaEQ7UUFFRCx1Q0FBdUM7UUFDdkMsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDL0I7UUFFRCwwQ0FBMEM7UUFDMUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUM7UUFFeEIsMEdBQTBHO1FBQzFHLG1DQUFtQztRQUNuQyxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxFQUFFO1lBQzFCLE9BQU87U0FDUjtRQUNELHlFQUF5RTtRQUN6RSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsRUFBRTtZQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUMzQixxRUFBcUU7WUFDckUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUU7Z0JBQ3RDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDL0I7U0FDRjtRQUNELElBQUksTUFBTSxFQUFFO1lBQ1YsTUFBTSxFQUFFLENBQUM7U0FDVjtRQUNELElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsVUFBVSxZQUFBLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxvQ0FBZ0IsR0FBaEIsVUFBaUIsT0FBeUMsRUFBRSxNQUE4QztRQUF6Rix3QkFBQSxFQUFBLFlBQXlDO1FBQ3hELDBFQUEwRTtRQUMxRSxJQUFNLGNBQWMsR0FBdUI7WUFDekMsSUFBSSxFQUFFLEtBQUs7WUFDWCxZQUFZLEVBQUUsS0FBSztZQUNuQixZQUFZLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsVUFBVTtZQUNuRixRQUFRLEVBQUUsMkJBQVksQ0FBQyxRQUFRO1lBQy9CLFNBQVMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtZQUNsQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRTtZQUN0QyxhQUFhLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXO1NBQ3pDLENBQUM7UUFFRixnRkFBZ0Y7UUFDaEYsSUFBTSxnQkFBZ0IseUJBQVEsY0FBYyxHQUFLLE9BQU8sQ0FBRSxDQUFDO1FBRTNELG1HQUFtRztRQUNuRyxJQUFJLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUVoRSxJQUFJLGFBQWEsR0FBYyxJQUFJLENBQUM7UUFFcEMsd0JBQXdCO1FBQ3hCLDZEQUE2RDtRQUM3RCxLQUFzQixVQUFlLEVBQWYsS0FBQSxJQUFJLENBQUMsVUFBVSxFQUFmLGNBQWUsRUFBZixJQUFlLEVBQUU7WUFBbEMsSUFBSSxTQUFTLFNBQUE7WUFDaEIsSUFBTSxnQkFBZ0IsR0FBRyxTQUFTLENBQUMsU0FBUyxJQUFJLElBQUksSUFBSSxTQUFTLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLEtBQUssSUFBSSxDQUFDO1lBQ3ZHLElBQUksYUFBYSxJQUFJLElBQUksSUFBSSxnQkFBZ0IsRUFBRTtnQkFDN0MsYUFBYSxHQUFHLFNBQVMsQ0FBQzthQUMzQjtpQkFBTTtnQkFDTCxzREFBc0Q7Z0JBQ3RELFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDckI7U0FDRjtRQUVELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUU7WUFDcEMsSUFBSSxNQUFNLEVBQUU7Z0JBQ1YsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7YUFDMUI7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyx5QkFBSyxHQUFiLFVBQWMsRUFBNkI7UUFDekMsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3JDLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBRW5DLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3ZCOzt1Q0FFK0I7UUFDL0IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVwQywyR0FBMkc7UUFDM0csSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM3QztRQUVELDJHQUEyRztRQUMzRyw2REFBNkQ7UUFDN0QsMEdBQTBHO1FBQzFHLElBQUksTUFBTSxDQUFDLHFCQUFxQixFQUFFO1lBQ2hDLHFCQUFxQixDQUFDLGNBQVEsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN4RTthQUFNO1lBQ0wsZUFBZTtZQUNmLFVBQVUsQ0FBQyxjQUFRLEVBQUUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ2hFO0lBQ0gsQ0FBQztJQUVPLDZCQUFTLEdBQWpCLFVBQWtCLEVBQTZCO1FBQzdDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUVyQixJQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDL0IsSUFBSSxXQUFXLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDL0IsV0FBVyxDQUFDLGFBQWEsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3RDO1FBRUQsRUFBRSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELDJCQUFPLEdBQVA7UUFDRSxLQUE4QixVQUF1QixFQUF2QixLQUFBLElBQUksQ0FBQyxrQkFBa0IsRUFBdkIsY0FBdUIsRUFBdkIsSUFBdUIsRUFBRTtZQUFsRCxJQUFJLGlCQUFpQixTQUFBO1lBQ3hCLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUNuQztRQUNELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQy9DLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN4QyxDQUFDO0lBUUQsc0JBQUkseUNBQWtCO1FBTnRCOzs7OztXQUtHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUM7UUFDeEMsQ0FBQzs7O09BQUE7SUFNRCxzQkFBSSx3Q0FBaUI7UUFKckI7OztXQUdHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUM7UUFDdkMsQ0FBQzs7O09BQUE7SUFLRCxzQkFBSSwrQkFBUTtRQUhaOztXQUVHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDeEIsQ0FBQzs7O09BQUE7SUFFRDs7T0FFRztJQUNILHNDQUFrQixHQUFsQjtRQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO0lBQ3RDLENBQUM7SUFFRDs7T0FFRztJQUNILHFDQUFpQixHQUFqQixVQUFrQixjQUE4QjtRQUM5QyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCx3Q0FBb0IsR0FBcEIsVUFBcUIsY0FBOEI7UUFDakQsSUFBSSx1QkFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFDLEtBQUssY0FBYyxFQUFFO1lBQ3RGLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUMsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUNILGdCQUFDO0FBQUQsQ0E3ZEEsQUE2ZEMsSUFBQTtBQTdkWSw4QkFBUztBQTBldEI7O0dBRUc7QUFDSDtJQW1CRSwyQkFBWSxNQUFpQixFQUFFLEVBQWUsRUFBRSxNQUF3QixFQUFFLGlCQUFxQztRQWJ2RyxXQUFNLEdBQUc7WUFDZixZQUFZLEVBQUUsSUFBSSxpQ0FBZSxFQUF1QjtZQUN4RCxNQUFNLEVBQUUsSUFBSSxpQ0FBZSxFQUFtQjtZQUM5QyxhQUFhLEVBQUUsSUFBSSxpQ0FBZSxFQUE0QjtZQUM5RCxRQUFRLEVBQUUsSUFBSSxpQ0FBZSxFQUFtQjtZQUNoRCxlQUFlLEVBQUUsSUFBSSxpQ0FBZSxFQUFzQztZQUMxRSxlQUFlLEVBQUUsSUFBSSxpQ0FBZSxFQUFzQztZQUMxRSxjQUFjLEVBQUUsSUFBSSxpQ0FBZSxFQUF1QjtZQUMxRCxxQkFBcUIsRUFBRSxJQUFJLGlDQUFlLEVBQWdDO1lBQzFFLGNBQWMsRUFBRSxJQUFJLGlDQUFlLEVBQXVCO1lBQzFELFNBQVMsRUFBRSxJQUFJLGlDQUFlLEVBQXVCO1NBQ3RELENBQUM7UUFHQSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO0lBQzdDLENBQUM7SUFFRCxxQ0FBUyxHQUFUO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxpQ0FBSyxHQUFMO1FBQ0UsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFFRCxxQ0FBUyxHQUFUO1FBQ0UsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3hDLENBQUM7SUFNRCxzQkFBSSwyQ0FBWTtRQUpoQjs7O1dBR0c7YUFDSDtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUM7UUFDbEMsQ0FBQzs7O09BQUE7SUFNRCxzQkFBSSxxQ0FBTTtRQUpWOzs7V0FHRzthQUNIO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUM1QixDQUFDOzs7T0FBQTtJQU1ELHNCQUFJLDRDQUFhO1FBSmpCOzs7V0FHRzthQUNIO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQUNuQyxDQUFDOzs7T0FBQTtJQU1ELHNCQUFJLHVDQUFRO1FBSlo7OztXQUdHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQzlCLENBQUM7OztPQUFBO0lBTUQsc0JBQUksOENBQWU7UUFKbkI7OztXQUdHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDO1FBQ3JDLENBQUM7OztPQUFBO0lBTUQsc0JBQUksOENBQWU7UUFKbkI7OztXQUdHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDO1FBQ3JDLENBQUM7OztPQUFBO0lBTUQsc0JBQUksNkNBQWM7UUFKbEI7OztXQUdHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDO1FBQ3BDLENBQUM7OztPQUFBO0lBTUQsc0JBQUksb0RBQXFCO1FBSnpCOzs7V0FHRzthQUNIO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDO1FBQzNDLENBQUM7OztPQUFBO0lBTUQsc0JBQUksNkNBQWM7UUFKbEI7OztXQUdHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDO1FBQ3BDLENBQUM7OztPQUFBO0lBTUQsc0JBQUksd0NBQVM7UUFKYjs7O1dBR0c7YUFDSDtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFDL0IsQ0FBQzs7O09BQUE7SUFFUyw4Q0FBa0IsR0FBNUI7UUFDRSxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFFeEMsSUFBSSxNQUFNLEdBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWU7UUFDOUMsS0FBSyxJQUFJLE9BQUssSUFBSSxNQUFNLEVBQUU7WUFDeEIsSUFBSSxVQUFVLEdBQW9DLE1BQU0sQ0FBQyxPQUFLLENBQUMsQ0FBQztZQUNoRSxVQUFVLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDN0I7SUFDSCxDQUFDO0lBQ0gsd0JBQUM7QUFBRCxDQS9IQSxBQStIQyxJQUFBO0FBL0hZLDhDQUFpQjtBQWlJOUI7OztHQUdHO0FBQ0g7SUFBd0MsNkNBQWlCO0lBQXpEOztJQTZFQSxDQUFDO0lBeEVDLG9EQUFnQixHQUFoQjtRQUNFLCtGQUErRjtRQUMvRixnSEFBZ0g7UUFDaEgsMEJBQTBCO1FBQzFCLE9BQXNCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUN6QyxDQUFDO0lBRUQscURBQWlCLEdBQWpCO1FBQ0UsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxnREFBWSxHQUFaO1FBQ0UsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFFTyx5REFBcUIsR0FBN0IsVUFBOEIsU0FBcUM7UUFBbkUsaUJBMEJDO1FBekJDLElBQUksb0JBQW9CLEdBQWlDLEVBQUUsQ0FBQztRQUU1RCxpQkFBTyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsVUFBQyxTQUFTO1lBQ3hDLCtHQUErRztZQUMvRywyR0FBMkc7WUFDM0csdUNBQXVDO1lBQ3ZDLDRHQUE0RztZQUM1RyxnQ0FBZ0M7WUFDaEMsS0FBZ0MsVUFBb0IsRUFBcEIsNkNBQW9CLEVBQXBCLGtDQUFvQixFQUFwQixJQUFvQixFQUFFO2dCQUFqRCxJQUFJLG1CQUFtQiw2QkFBQTtnQkFDMUIsSUFBSSxtQkFBbUIsS0FBSyxTQUFTLEVBQUU7b0JBQ3JDLCtFQUErRTtvQkFDL0Usa0NBQWtDO29CQUNsQyxJQUFJLE9BQU8sRUFBRTt3QkFDWCxPQUFPLENBQUMsS0FBSyxDQUFDLCtCQUErQixFQUFFLFNBQVMsQ0FBQyxDQUFDO3FCQUMzRDtvQkFFRCxzR0FBc0c7b0JBQ3RHLE1BQU0sS0FBSyxDQUFDLGlDQUFpQyxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQzdFO2FBQ0Y7WUFFRCxTQUFTLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDdkIsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFJLENBQUMsU0FBUyxFQUFFLEVBQUUsS0FBSSxDQUFDLENBQUM7WUFDNUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELG1EQUFlLEdBQWY7O1FBQ0UsMEdBQTBHO1FBQzFHLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDdkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7U0FDekI7UUFDRCxNQUFBLElBQUksQ0FBQyxpQkFBaUIsMENBQUUsT0FBTyxFQUFFLENBQUM7UUFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFDdkIsQ0FBQztJQUVELDhDQUFVLEdBQVY7UUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVPLHVEQUFtQixHQUEzQixVQUE0QixTQUFxQztRQUMvRCxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFcEIsSUFBSSxTQUFTLFlBQVkscUJBQVMsRUFBRTtZQUNsQyxLQUEyQixVQUF5QixFQUF6QixLQUFBLFNBQVMsQ0FBQyxhQUFhLEVBQUUsRUFBekIsY0FBeUIsRUFBekIsSUFBeUIsRUFBRTtnQkFBakQsSUFBSSxjQUFjLFNBQUE7Z0JBQ3JCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLENBQUMsQ0FBQzthQUMxQztTQUNGO0lBQ0gsQ0FBQztJQUVELHNEQUFrQixHQUFsQjtRQUNFLGlCQUFNLGtCQUFrQixXQUFFLENBQUM7SUFDN0IsQ0FBQztJQUNILGdDQUFDO0FBQUQsQ0E3RUEsQUE2RUMsQ0E3RXVDLGlCQUFpQixHQTZFeEQ7QUFjRDs7O0dBR0c7QUFDSDtJQU9FLHVCQUFZLE1BQWlCO1FBQTdCLGlCQW9HQztRQXRHTyxrQkFBYSxHQUFvRCxFQUFFLENBQUM7UUFHMUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFFckIsc0ZBQXNGO1FBQ3RGLElBQU0sd0JBQXdCLEdBQUcsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN2RixJQUFNLGFBQWEsa0JBQUksYUFBYSxHQUFLLHdCQUF3QixPQUFDLENBQUM7UUFDbkUsSUFBTSxPQUFPLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBbEMsQ0FBa0MsQ0FBQyxDQUFDO1FBQy9GLGdEQUFnRDtRQUNoRCxJQUFJLE9BQU8sR0FBVSxFQUFFLENBQUM7UUFDeEIsSUFBSSxVQUFVLEdBQVUsRUFBRSxDQUFDO1FBRTNCLEtBQW1CLFVBQU8sRUFBUCxtQkFBTyxFQUFQLHFCQUFPLEVBQVAsSUFBTyxFQUFFO1lBQXZCLElBQUksTUFBTSxnQkFBQTtZQUNiLElBQUksT0FBYSxNQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssVUFBVSxFQUFFO2dCQUMvQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3RCO2lCQUFNO2dCQUNMLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDekI7U0FDRjtRQUVELHdCQUF3QjtRQUN4QixJQUFJLE9BQU8sR0FBUSxFQUFFLENBQUM7Z0NBR2IsTUFBTTtZQUNiLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRztnQkFDaEIsdUVBQXVFO2dCQUN2RSxPQUFhLE1BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQ3hELENBQUMsQ0FBQzs7UUFMSixzR0FBc0c7UUFDdEcsS0FBbUIsVUFBTyxFQUFQLG1CQUFPLEVBQVAscUJBQU8sRUFBUCxJQUFPO1lBQXJCLElBQUksTUFBTSxnQkFBQTtvQkFBTixNQUFNO1NBS2Q7Z0NBR1EsUUFBUTtZQUNmLCtHQUErRztZQUMvRyxtQkFBbUI7WUFDbkIsSUFBTSxrQkFBa0IsR0FBRyxDQUFDLFVBQUMsTUFBaUI7Z0JBQzVDLE9BQU8sTUFBTSxFQUFFO29CQUNiLElBQU0sb0JBQWtCLEdBQUcsTUFBTSxDQUFDLHdCQUF3QixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztvQkFDN0UsSUFBSSxvQkFBa0IsRUFBRTt3QkFDdEIsT0FBTyxvQkFBa0IsQ0FBQztxQkFDM0I7b0JBQ0QsMkdBQTJHO29CQUMzRyxNQUFNLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDeEM7WUFDSCxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUVYLGdFQUFnRTtZQUNoRSxJQUFJLGtCQUFrQixJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxJQUFJLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUM1RSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUU7b0JBQ3ZDLEdBQUcsRUFBRSxjQUFNLE9BQUEsa0JBQWtCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBbkMsQ0FBbUM7b0JBQzlDLEdBQUcsRUFBRSxVQUFDLEtBQVUsSUFBSyxPQUFBLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUExQyxDQUEwQztpQkFDaEUsQ0FBQyxDQUFDO2FBQ0o7WUFDRCxxREFBcUQ7aUJBQ2hEO2dCQUNILE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBUyxNQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDN0M7O1FBekJILHlEQUF5RDtRQUN6RCxLQUFxQixVQUFVLEVBQVYseUJBQVUsRUFBVix3QkFBVSxFQUFWLElBQVU7WUFBMUIsSUFBSSxRQUFRLG1CQUFBO29CQUFSLFFBQVE7U0F5QmhCO1FBRUQsNEZBQTRGO1FBQzVGLE9BQU8sQ0FBQyxFQUFFLEdBQUcsVUFBQyxTQUFzQixFQUFFLFFBQTZCO1lBQ2pFLE1BQU0sQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBRS9CLElBQUksQ0FBQyxLQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUNsQyxLQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQzthQUNwQztZQUVELEtBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRTdDLE9BQU8sT0FBTyxDQUFDO1FBQ2pCLENBQUMsQ0FBQztRQUVGLG9HQUFvRztRQUNwRyxPQUFPLENBQUMsR0FBRyxHQUFHLFVBQUMsU0FBc0IsRUFBRSxRQUE2QjtZQUNsRSxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUVoQyxJQUFJLEtBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ2pDLHVCQUFVLENBQUMsTUFBTSxDQUFDLEtBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFDNUQ7WUFFRCxPQUFPLE9BQU8sQ0FBQztRQUNqQixDQUFDLENBQUM7UUFFRixPQUFPLENBQUMsYUFBYSxHQUFHLFVBQUMsS0FBa0IsRUFBRSxJQUFRO1lBQ25ELElBQUksS0FBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLHdEQUF3RDtnQkFDdkYsZ0dBQWdHO2dCQUNoRyxJQUFJLGVBQWUsR0FBb0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7b0JBQ3ZELFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFO29CQUNyQixJQUFJLEVBQUUsS0FBSztvQkFDWCx1RUFBdUU7b0JBQ3ZFLFNBQVMsRUFBRSxJQUFJO2lCQUNoQixFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUVULG1DQUFtQztnQkFDbkMsS0FBcUIsVUFBeUIsRUFBekIsS0FBQSxLQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxFQUF6QixjQUF5QixFQUF6QixJQUF5QixFQUFFO29CQUEzQyxJQUFJLFFBQVEsU0FBQTtvQkFDZixRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7aUJBQzNCO2FBQ0Y7UUFDSCxDQUFDLENBQUM7UUFFRixJQUFJLENBQUMsT0FBTyxHQUFrQixPQUFPLENBQUM7SUFDeEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILGlDQUFTLEdBQVQ7UUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsMENBQWtCLEdBQWxCO1FBQ0UsSUFBSTtZQUNGLG9GQUFvRjtZQUNwRixzR0FBc0c7WUFDdEcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUN6QjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsSUFBSSxLQUFLLFlBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsMEJBQTBCLEVBQUU7Z0JBQ25FLDBHQUEwRztnQkFDMUcsbUdBQW1HO2dCQUNuRyxJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQzthQUN6QjtTQUNGO1FBRUQsS0FBSyxJQUFJLFNBQVMsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3hDLEtBQXFCLFVBQTZCLEVBQTdCLEtBQUEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsRUFBN0IsY0FBNkIsRUFBN0IsSUFBNkIsRUFBRTtnQkFBL0MsSUFBSSxRQUFRLFNBQUE7Z0JBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBd0IsRUFBRSxRQUFRLENBQUMsQ0FBQzthQUNyRDtTQUNGO0lBQ0gsQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0EzSUEsQUEySUMsSUFBQTtBQTNJWSxzQ0FBYTtBQTZJMUIsU0FBUyxtQkFBbUIsQ0FBQyxNQUFjO0lBQ3pDLElBQUksS0FBSyxHQUFhLEVBQUUsQ0FBQztJQUV6QixPQUFPLE1BQU0sRUFBRTtRQUNiLElBQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUExQixDQUEwQixDQUFDLENBQUM7UUFDL0YsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0Isd0JBQXdCO1FBQ3hCLE1BQU0sR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3hDO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDOzs7Ozs7QUMvOEJELG9EQUFpRDtBQUVqRCxJQUFpQixPQUFPLENBK0J2QjtBQS9CRCxXQUFpQixPQUFPO0lBS3RCLFNBQWdCLFlBQVksQ0FBQyxTQUFxQyxFQUFFLEtBQTRCO1FBQzlGLElBQUksbUJBQW1CLEdBQUcsVUFBQyxTQUFxQyxFQUFFLE1BQW1DO1lBQ25HLEtBQUssQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFFekIsK0RBQStEO1lBQy9ELElBQUksU0FBUyxZQUFZLHFCQUFTLEVBQUU7Z0JBQ2xDLEtBQTJCLFVBQXlCLEVBQXpCLEtBQUEsU0FBUyxDQUFDLGFBQWEsRUFBRSxFQUF6QixjQUF5QixFQUF6QixJQUF5QixFQUFFO29CQUFqRCxJQUFJLGNBQWMsU0FBQTtvQkFDckIsbUJBQW1CLENBQUMsY0FBYyxFQUFFLFNBQVMsQ0FBQyxDQUFDO2lCQUNoRDthQUNGO1FBQ0gsQ0FBQyxDQUFDO1FBRUYsd0NBQXdDO1FBQ3hDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFkZSxvQkFBWSxlQWMzQixDQUFBO0lBRUQsMkVBQTJFO0lBQzNFLElBQVksT0FRWDtJQVJELFdBQVksT0FBTztRQUNqQixnREFBYyxDQUFBO1FBQ2QsNENBQVksQ0FBQTtRQUNaLGtEQUFlLENBQUE7UUFDZixnREFBYyxDQUFBO1FBQ2Qsd0NBQVUsQ0FBQTtRQUNWLG9DQUFRLENBQUE7UUFDUixzQ0FBUyxDQUFBO0lBQ1gsQ0FBQyxFQVJXLE9BQU8sR0FBUCxlQUFPLEtBQVAsZUFBTyxRQVFsQjtBQUNILENBQUMsRUEvQmdCLE9BQU8sR0FBUCxlQUFPLEtBQVAsZUFBTyxRQStCdkI7Ozs7OztBQ2xDRCxxREFBMkQ7QUFRM0Q7O0dBRUc7QUFDSDtJQVVFLDBCQUE2QixNQUFpQjtRQUE5QyxpQkFXQztRQVg0QixXQUFNLEdBQU4sTUFBTSxDQUFXO1FBTjdCLFdBQU0sR0FBRztZQUN4QixTQUFTLEVBQUUsSUFBSSxpQ0FBZSxFQUE4QztTQUM3RSxDQUFDO1FBS0EsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRW5CLElBQU0sT0FBTyxHQUFHO1lBQ2QsS0FBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3hCLENBQUMsQ0FBQztRQUVGLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzVELE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzdELE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3JELE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxvQ0FBUyxHQUFULFVBQVUsTUFBYztRQUN0QixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELG9DQUFTLEdBQVQ7UUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDakMsQ0FBQztJQUVELG1DQUFRLEdBQVIsVUFBUyxLQUFjO1FBQ3JCLElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDL0M7YUFBTTtZQUNMLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ2pEO0lBQ0gsQ0FBQztJQUVELHNDQUFXLEdBQVg7UUFDRSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQzVDLHVHQUF1RztZQUN2RyxpREFBaUQ7WUFDakQsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3JCO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3JCO0lBQ0gsQ0FBQztJQUVELGtDQUFPLEdBQVA7UUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsc0NBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3ZDLENBQUM7SUFFRDs7T0FFRztJQUNILHVDQUFZLEdBQVo7UUFDRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELDBDQUFlLEdBQWY7UUFDRSxPQUFPLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELHlDQUFjLEdBQWQ7UUFDRSxJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDbkMsSUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRXRDLElBQU0sT0FBTyxHQUFHLFdBQVcsSUFBSSxZQUFZLEtBQUssQ0FBQyxDQUFDO1FBQ2xELElBQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7UUFFaEQsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRW5CLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFLRCxzQkFBSSx1Q0FBUztRQUhiOztXQUVHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzFDLENBQUM7OztPQUFBO0lBdkZ1QiwyQkFBVSxHQUFHLHFCQUFILEFBQXdCLENBQUM7SUF3RjdELHVCQUFDO0NBMUZELEFBMEZDLElBQUE7QUFFRDtJQUVFLDBCQUFvQixVQUE0QjtRQUE1QixlQUFVLEdBQVYsVUFBVSxDQUFrQjtRQUM5Qyw4R0FBOEc7UUFDOUcscUNBQXFDO1FBQ3JDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQsaUNBQU0sR0FBTixVQUFPLE1BQWM7UUFDbkIsc0dBQXNHO1FBQ3RHLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxpQ0FBTSxHQUFOLFVBQU8sTUFBYztRQUNuQixJQUFJLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDaEIsMkdBQTJHO1lBQzNHLHNHQUFzRztZQUN0RyxpQkFBaUI7WUFDakIsaUdBQWlHO1lBQ2pHLDREQUE0RDtZQUM1RCxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQy9CLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2hDO2FBQU07WUFDTCxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNsQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQy9CO0lBQ0gsQ0FBQztJQUNILHVCQUFDO0FBQUQsQ0E3QkEsQUE2QkMsSUFBQTtBQTdCWSw0Q0FBZ0I7Ozs7OztBQ25HN0IsK0JBQStCO0FBQy9CLElBQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQztBQUV0QiwrQkFBK0I7QUFDL0IsSUFBTSxpQkFBaUIsR0FBRyxDQUFDLENBQUM7QUFDNUIsSUFBSSxTQUFTLEdBQVcsQ0FBQyxDQUFDO0FBRTFCLElBQU0saUJBQWlCLEdBQUcsRUFBRSxDQUFDLENBQUMsOEJBQThCO0FBRTVELElBQUssU0FLSjtBQUxELFdBQUssU0FBUztJQUNaLHdCQUFXLENBQUE7SUFDWCw4QkFBaUIsQ0FBQTtJQUNqQiwwQkFBYSxDQUFBO0lBQ2IsNEJBQWUsQ0FBQTtBQUNqQixDQUFDLEVBTEksU0FBUyxLQUFULFNBQVMsUUFLYjtBQUVELElBQUssa0JBR0o7QUFIRCxXQUFLLGtCQUFrQjtJQUNyQix5Q0FBbUIsQ0FBQTtJQUNuQix3Q0FBa0IsQ0FBQTtBQUNwQixDQUFDLEVBSEksa0JBQWtCLEtBQWxCLGtCQUFrQixRQUd0QjtBQUlELElBQU0sYUFBYSxHQUFHLElBQUksR0FBRyxDQUF1QjtJQUNsRCxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUNqQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQztJQUNqQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQztJQUNqQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQztDQUNsQyxDQUFDLENBQUM7QUFFSDs7O0dBR0c7QUFDSCxJQUFNLG1CQUFtQixHQUFHLFVBQUMsZUFBb0IsRUFBRSxHQUFrQjtJQUNuRSxJQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUU7UUFDZCxlQUFlLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM1QyxlQUFlLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxXQUFXLENBQUMsQ0FBQztLQUNsRDtTQUFNO1FBQ0wsZUFBZSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDNUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDbkQsZUFBZSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDMUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDNUM7SUFDRCxlQUFlLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUNoRCxDQUFDLENBQUM7QUFFRjs7O0dBR0c7QUFDSCxJQUFNLGVBQWUsR0FBRyxVQUN0QixlQUFvQixFQUNwQixFQUE0QixFQUM1QixTQUFvQixFQUNwQixzQkFBOEI7UUFGNUIsU0FBUyxlQUFBO0lBR1gsUUFBUSxTQUFTLEVBQUU7UUFDakIsS0FBSyxRQUFRO1lBQ1gsd0JBQXdCLENBQ3RCLGVBQWUsRUFBRSxTQUFTLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztZQUN0RCxNQUFNO1FBQ1IsS0FBSyxLQUFLO1lBQ1IscUJBQXFCLENBQ25CLGVBQWUsRUFBRSxTQUFTLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztLQUN6RDtBQUNILENBQUMsQ0FBQztBQUVGOzs7R0FHRztBQUNILElBQU0sVUFBVSxHQUFHLFVBQ2pCLGVBQW9CLEVBQ3BCLEdBQWtCLEVBQ2xCLFNBQW9CLEVBQ3BCLG1CQUF5QjtJQUV6QixJQUFNLG9CQUFvQixHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDMUQsSUFBSSxHQUFHLENBQUMsSUFBSSxLQUFLLE1BQU0sSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFO1FBQ3ZDLGVBQWUsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDL0MsT0FBTztLQUNSO0lBQ0QsSUFBSSxHQUFHLENBQUMsSUFBSSxLQUFLLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUU7UUFDeEMsT0FBTztLQUNSO0lBRUQsSUFBSSxvQkFBb0IsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQWMsQ0FBQyxDQUFDO0lBRTFELElBQUksR0FBRyxDQUFDLFdBQVcsRUFBRTtRQUNuQixJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLElBQUksVUFBVSxHQUFHLENBQUMsRUFBRTtZQUNsQixVQUFVLEdBQUcsaUJBQWlCLEdBQUcsVUFBVSxDQUFDO1NBQzdDO1FBRUQsSUFBTSxZQUFVLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxHQUFHLGlCQUFpQixDQUFDO1FBQ2xFLElBQU0sb0JBQW9CLEdBQUcsWUFBVSxHQUFHLFVBQVUsQ0FBQztRQUNyRCxvQkFBb0IsR0FBRyxDQUFDLEdBQUcsR0FBRyxvQkFBb0IsQ0FBQyxHQUFHLG1CQUFtQixDQUFDLE1BQU0sQ0FBQztLQUNsRjtJQUVELElBQUksR0FBRyxDQUFDLFNBQVMsS0FBSyxLQUFLO1FBQ3pCLGVBQWUsQ0FBQyxHQUFHLENBQ2pCLG9CQUFvQixFQUFFLFVBQUcsb0JBQW9CLE1BQUcsQ0FBQyxDQUFDO0lBQ3RELGVBQWUsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3pFLENBQUMsQ0FBQztBQUVGOzs7R0FHRztBQUNILElBQU0sMENBQTBDLEdBQUcsVUFDakQsZUFBb0IsRUFBRSxHQUFrQixFQUN4QyxtQkFBeUI7SUFFekIsUUFBUSxHQUFHLENBQUMsUUFBUSxFQUFFO1FBQ3RCLEtBQUssRUFBRTtZQUNMLGVBQWUsQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1lBQ3JELGVBQWUsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztZQUMzQyxVQUFVLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRSxTQUFTLENBQUMsTUFBTSxFQUFFLG1CQUFtQixDQUFDLENBQUM7WUFDeEUsTUFBTTtRQUNSLEtBQUssa0JBQWtCLENBQUMsWUFBWTtZQUNsQyxtQ0FBbUMsQ0FDakMsZUFBZSxFQUFFLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLG1CQUFtQixDQUFDLENBQUM7WUFDOUQsTUFBTTtRQUNSLEtBQUssa0JBQWtCLENBQUMsV0FBVztZQUNqQyxtQ0FBbUMsQ0FDakMsZUFBZSxFQUFFLFNBQVMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLG1CQUFtQixDQUFDLENBQUM7WUFDN0QsTUFBTTtLQUNQO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsSUFBTSxtQ0FBbUMsR0FBRyxVQUMxQyxlQUFvQixFQUNwQixTQUFtQyxFQUNuQyxHQUFrQixFQUNsQixtQkFBeUI7SUFFdkIsSUFBTSxXQUFXLEdBQUcsU0FBUyxLQUFLLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqRCxhQUFhLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQztJQUVoQyxlQUFlLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNqRCxlQUFlLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDeEMsVUFBVSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLG1CQUFtQixDQUFDLENBQUM7QUFDckUsQ0FBQyxDQUFDO0FBRUY7OztHQUdHO0FBQ0gsSUFBTSxtQkFBbUIsR0FBRyxVQUFDLGVBQW9CLEVBQUUsR0FBa0IsRUFBRSxTQUFvQjtJQUN6RixxREFBcUQ7SUFDckQsSUFBSSxHQUFHLENBQUMsUUFBUSxLQUFLLE1BQU0sRUFBRTtRQUMzQixlQUFlLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUNyQztTQUFNO1FBQ0wsUUFBUSxHQUFHLENBQUMsYUFBYSxFQUFFO1lBQ3pCLEtBQUssV0FBVztnQkFDZCxlQUFlLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxVQUFHLEdBQUcsQ0FBQyxRQUFRLE1BQUcsQ0FBQyxDQUFDO2dCQUNuRCxlQUFlLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQzFELGVBQWUsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsWUFBWSxDQUFDLENBQUM7Z0JBQ3JELE1BQU07WUFDUixLQUFLLFFBQVE7Z0JBQ1gsZUFBZSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsVUFBRyxHQUFHLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFHLENBQUMsQ0FBQztnQkFDbEUsZUFBZSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUMxRCxlQUFlLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLFFBQVEsQ0FBQyxDQUFDO2dCQUNqRCxNQUFNO1lBQ1IsS0FBSyxZQUFZO2dCQUNmLGVBQWUsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUN2QyxlQUFlLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsVUFBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLFFBQVEsTUFBRyxDQUFDLENBQUM7Z0JBQzVFLGVBQWUsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsVUFBVSxDQUFDLENBQUM7Z0JBQ25ELE1BQU07WUFDUjtnQkFDRSxlQUFlLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxVQUFHLEdBQUcsQ0FBQyxRQUFRLE1BQUcsQ0FBQyxDQUFDO2dCQUNuRCxlQUFlLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ3hEO0tBQ0Y7QUFDSCxDQUFDLENBQUM7QUFFRixJQUFNLFVBQVUsR0FBRyxVQUFDLFNBQWlCO0lBQ25DLE9BQUEsU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNO0FBQWhDLENBQWdDLENBQUM7QUFFbkMsSUFBTSx3QkFBd0IsR0FBRyxVQUMvQixlQUFvQixFQUNwQixTQUFvQixFQUNwQixzQkFBOEI7SUFDOUIsUUFBUSxTQUFTLEVBQUU7UUFDakIsS0FBSyxTQUFTLENBQUMsTUFBTTtZQUNuQixlQUFlLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3JELE1BQU07UUFDUixLQUFLLFNBQVMsQ0FBQyxJQUFJO1lBQ2pCLGVBQWUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLGlCQUFpQixDQUFDLENBQUM7WUFDcEQsTUFBTTtRQUNSLEtBQUssU0FBUyxDQUFDLEtBQUs7WUFDbEIsZUFBZSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztZQUNyRCxNQUFNO0tBQ1Q7QUFDSCxDQUFDLENBQUM7QUFFRixJQUFNLHFCQUFxQixHQUFHLFVBQzVCLGVBQW9CLEVBQ3BCLFNBQW9CLEVBQ3BCLE1BQWM7SUFDVixJQUFNLDZCQUE2QixHQUFHLFNBQVMsQ0FBQztJQUNoRCxlQUFlLENBQUMsR0FBRyxDQUFDLDZCQUE2QixFQUFFLFVBQUcsR0FBRyxHQUFHLE1BQU0sTUFBRyxDQUFDLENBQUM7QUFDN0UsQ0FBQyxDQUFDO0FBRUYsSUFBaUIsUUFBUSxDQWlEeEI7QUFqREQsV0FBaUIsUUFBUTtJQUNWLDJCQUFrQixHQUFHLFVBQ2hDLFlBQTJCLEVBQzNCLG1CQUF5QjtRQUV6QixJQUFNLEdBQUcsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDO1FBQzdCLElBQU0sZUFBZSxHQUFHLFlBQVksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUdyRCxtQkFBbUIsQ0FBQyxlQUFlLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFMUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUMvQywwQ0FBMEMsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFLG1CQUFtQixDQUFDLENBQUM7UUFFdEYsdURBQXVEO1FBQ3ZELElBQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDaEUsZUFBZSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFN0MsNkNBQTZDO1FBQzdDLElBQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDL0IsSUFBSSxHQUFHLENBQUMsUUFBUSxLQUFLLEVBQUUsRUFBRTtZQUN2QixlQUFlLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxVQUFHLGFBQWEsTUFBRyxDQUFDLENBQUM7WUFDbEQsbUJBQW1CLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0Q7YUFBTTtZQUNMLGVBQWUsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLFVBQUcsYUFBYSxNQUFHLENBQUMsQ0FBQztZQUNuRCxtQkFBbUIsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMxRDtJQUNILENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ1UsMkJBQWtCLEdBQUcsVUFDaEMsZUFBd0MsRUFDeEMsTUFBMkIsRUFDM0IsV0FBaUI7UUFFakIsSUFBTSxrQkFBa0IsR0FBRyxlQUFlLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDM0QsSUFBTSxlQUFlLEdBQUcsV0FBVyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsZUFBZSxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDbkosSUFBTSxlQUFlLEdBQUcsV0FBVyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsZUFBZSxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUMsR0FBRyxNQUFNLENBQUMsYUFBYSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZJLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDL0Msa0JBQWtCLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUM3QyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFVBQUcsTUFBTSxDQUFDLEtBQUssTUFBRyxDQUFDLENBQUM7UUFDcEQsa0JBQWtCLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsVUFBRyxlQUFlLE9BQUksQ0FBQyxDQUFDO1FBQy9ELGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2pELGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLFVBQUcsZUFBZSxPQUFJLENBQUMsQ0FBQztRQUM5RCxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNsRCxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLFVBQUcsTUFBTSxDQUFDLEtBQUssR0FBRyxVQUFVLE9BQUksQ0FBQyxDQUFDO0lBQ3JFLENBQUMsQ0FBQztBQUNKLENBQUMsRUFqRGdCLFFBQVEsR0FBUixnQkFBUSxLQUFSLGdCQUFRLFFBaUR4QiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJpbXBvcnQgeyBQbGF5ZXJBUEksIFBsYXllckV2ZW50IH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IEJ1dHRvbiwgQnV0dG9uQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vdHMvY29tcG9uZW50cy9idXR0b24nO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi8uLi8uLi90cy91aW1hbmFnZXInO1xuXG5kZWNsYXJlIGNvbnN0IHdpbmRvdzogYW55O1xuXG5leHBvcnQgY2xhc3MgR29CYWNrQnV0dG9uIGV4dGVuZHMgQnV0dG9uPEJ1dHRvbkNvbmZpZz4ge1xuICBjb25zdHJ1Y3Rvcihjb25maWc6IEJ1dHRvbkNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIGNvbnN0IGRlZmF1bHRDb25maWc6IEJ1dHRvbkNvbmZpZyA9IHtcbiAgICAgIGNzc0NsYXNzOiAndWktZ29iYWNrYnV0dG9uJyxcbiAgICAgIHRleHQ6ICdHbyBCYWNrJyxcbiAgICAgIGFyaWFMYWJlbDogJ0dvIEJhY2snLFxuICAgIH07XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCBkZWZhdWx0Q29uZmlnLCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnW0dvQmFja10gQnV0dG9uIGNsaWNrZWQnKTtcblxuICAgICAgd2luZG93LmJpdG1vdmluLmN1c3RvbU1lc3NhZ2VIYW5kbGVyLnNlbmRBc3luY2hyb25vdXMoJ2dvQmFjaycpO1xuICAgIH0pO1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlZpZXdNb2RlQ2hhbmdlZCwgKCkgPT4ge1xuICAgICAgcGxheWVyLmdldFZpZXdNb2RlKCkgPT09ICdmdWxsc2NyZWVuJyA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEJ1dHRvbiwgQnV0dG9uQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vdHMvY29tcG9uZW50cy9idXR0b24nO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi8uLi8uLi90cy91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi8uLi8uLi90cy9sb2NhbGl6YXRpb24vaTE4bic7XG5pbXBvcnQgeyBQbGF5ZXJVdGlscyB9IGZyb20gJy4uLy4uLy4uL3RzL3BsYXllcnV0aWxzJztcbmltcG9ydCBMaXZlU3RyZWFtRGV0ZWN0b3JFdmVudEFyZ3MgPSBQbGF5ZXJVdGlscy5MaXZlU3RyZWFtRGV0ZWN0b3JFdmVudEFyZ3M7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGxheWJhY2tKdW1wQnV0dG9uc0NvbmZpZyBleHRlbmRzIEJ1dHRvbkNvbmZpZyB7XG4gIHNraXBUaW1lOiBudW1iZXI7IC8vIGluIHNlY29uZHNcbn1cblxuZXhwb3J0IGNsYXNzIFBsYXliYWNrSnVtcEJ1dHRvbnMgZXh0ZW5kcyBCdXR0b248UGxheWJhY2tKdW1wQnV0dG9uc0NvbmZpZz4ge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogUGxheWJhY2tKdW1wQnV0dG9uc0NvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXBsYXliYWNranVtcGJ1dHRvbnMnLFxuICAgICAgdGV4dDogY29uZmlnLnRleHQsXG4gICAgICBhcmlhTGFiZWw6IGNvbmZpZy5hcmlhTGFiZWwsXG4gICAgICBza2lwVGltZTogMCxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbGV0IGxpdmVTdHJlYW1EZXRlY3RvciA9IG5ldyBQbGF5ZXJVdGlscy5MaXZlU3RyZWFtRGV0ZWN0b3IocGxheWVyLCB1aW1hbmFnZXIpO1xuICAgIGxpdmVTdHJlYW1EZXRlY3Rvci5vbkxpdmVDaGFuZ2VkLnN1YnNjcmliZSgoc2VuZGVyLCBhcmdzOiBMaXZlU3RyZWFtRGV0ZWN0b3JFdmVudEFyZ3MpID0+IHtcbiAgICAgIGlmIChwbGF5ZXIuaXNMaXZlKCkpIHtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBsaXZlU3RyZWFtRGV0ZWN0b3IuZGV0ZWN0KCk7XG5cbiAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gcGxheWVyLmdldEN1cnJlbnRUaW1lKCk7XG4gICAgICBjb25zdCBkdXJhdGlvbiA9IHBsYXllci5nZXREdXJhdGlvbigpO1xuXG4gICAgICBpZiAoIXBsYXllci5pc0xpdmUoKSkge1xuICAgICAgICBsZXQgbmV3VGltZSA9IGN1cnJlbnRUaW1lICsgdGhpcy5jb25maWcuc2tpcFRpbWU7XG4gICAgICAgIG5ld1RpbWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihuZXdUaW1lLCBkdXJhdGlvbikpO1xuICAgICAgICBwbGF5ZXIuc2VlayhuZXdUaW1lLCAndWknKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHVpbWFuYWdlci5vbkNvbnRyb2xzU2hvdy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfSk7XG5cbiAgICB1aW1hbmFnZXIub25Db250cm9sc0hpZGUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQbGF5YmFja0ZvcndhcmRCdXR0b24gZXh0ZW5kcyBQbGF5YmFja0p1bXBCdXR0b25zIHtcbiAgY29uc3RydWN0b3IoY29uZmlnOiBQbGF5YmFja0p1bXBCdXR0b25zQ29uZmlnKSB7XG4gICAgc3VwZXIoe1xuICAgICAgLi4uY29uZmlnLFxuICAgICAgY3NzQ2xhc3M6ICd1aS1wbGF5YmFja2ZvcndhcmRidXR0b24nLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ2ZvcndhcmQnKSxcbiAgICAgIGFyaWFMYWJlbDogaTE4bi5nZXRMb2NhbGl6ZXIoJ2ZvcndhcmQnKSxcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUGxheWJhY2tSZXdpbmRCdXR0b24gZXh0ZW5kcyBQbGF5YmFja0p1bXBCdXR0b25zIHtcbiAgY29uc3RydWN0b3IoY29uZmlnOiBQbGF5YmFja0p1bXBCdXR0b25zQ29uZmlnKSB7XG4gICAgc3VwZXIoe1xuICAgICAgLi4uY29uZmlnLFxuICAgICAgY3NzQ2xhc3M6ICd1aS1wbGF5YmFja3Jld2luZGJ1dHRvbicsXG4gICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcigncmV3aW5kJyksXG4gICAgICBhcmlhTGFiZWw6IGkxOG4uZ2V0TG9jYWxpemVyKCdyZXdpbmQnKSxcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHtDb250YWluZXIsIENvbnRhaW5lckNvbmZpZ30gZnJvbSAnLi4vLi4vLi4vdHMvY29tcG9uZW50cy9jb250YWluZXInO1xuaW1wb3J0IHtQbGF5YmFja0ZvcndhcmRCdXR0b24sIFBsYXliYWNrUmV3aW5kQnV0dG9ufSBmcm9tICcuL3BsYXliYWNranVtcGJ1dHRvbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGxheWJhY2tKdW1wQ29udHJvbHNPdmVybGF5Q29uZmlnIGV4dGVuZHMgQ29udGFpbmVyQ29uZmlnIHt9XG5cbi8qKlxuICogT3ZlcmxheSBjb250YWluaW5nIHRoZSBwbGF5YmFjayBmb3J3YXJkIGFuZCByZXdpbmQgYnV0dG9ucy5cbiAqL1xuZXhwb3J0IGNsYXNzIFBsYXliYWNrSnVtcENvbnRyb2xzT3ZlcmxheSBleHRlbmRzIENvbnRhaW5lcjxQbGF5YmFja0p1bXBDb250cm9sc092ZXJsYXlDb25maWc+IHtcblxuICBwcml2YXRlIGZvcndhcmRCdXR0b246IFBsYXliYWNrRm9yd2FyZEJ1dHRvbjtcbiAgcHJpdmF0ZSByZXdpbmRCdXR0b246IFBsYXliYWNrUmV3aW5kQnV0dG9uO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogUGxheWJhY2tKdW1wQ29udHJvbHNPdmVybGF5Q29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5mb3J3YXJkQnV0dG9uID0gbmV3IFBsYXliYWNrRm9yd2FyZEJ1dHRvbih7IHNraXBUaW1lOiAxMCB9KTtcbiAgICB0aGlzLnJld2luZEJ1dHRvbiA9IG5ldyBQbGF5YmFja1Jld2luZEJ1dHRvbih7IHNraXBUaW1lOiAtMTAgfSk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXBsYXliYWNrZm9yd2FyZC1vdmVybGF5JyxcbiAgICAgIGNvbXBvbmVudHM6IFt0aGlzLmZvcndhcmRCdXR0b24sIHRoaXMucmV3aW5kQnV0dG9uXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJy4uLy4uLy4uLy4uL3RzL2V2ZW50ZGlzcGF0Y2hlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmFkaW9Nb2RlQ2hhbmdlZEFyZ3Mge1xuICBhY3RpdmF0ZWQ6IGJvb2xlYW47XG59XG5cbi8qKlxuICogSGFuZGxlcyB0aGUgcmFkaW8gbW9kZSBzdGF0ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFJhZGlvTW9kZUNvbnRyb2xsZXIge1xuICBwcml2YXRlIGFjdGl2YXRlZDogYm9vbGVhbjtcbiAgcHJpdmF0ZSByZWFkb25seSBldmVudHMgPSB7XG4gICAgb25DaGFuZ2VkOiBuZXcgRXZlbnREaXNwYXRjaGVyPFJhZGlvTW9kZUNvbnRyb2xsZXIsIFJhZGlvTW9kZUNoYW5nZWRBcmdzPigpLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYWN0aXZhdGVkID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIGFjdGl2YXRlZCAtIEJvb2xlYW4gc3RhdGUgb2YgdGhlIHJhZGlvIG1vZGUuXG4gICAqL1xuICBzZXRSYWRpb01vZGUoYWN0aXZhdGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5hY3RpdmF0ZWQgPSBhY3RpdmF0ZWQ7XG4gICAgdGhpcy5vbkNoYW5nZWRFdmVudCgpO1xuICB9XG5cbiAgdG9nZ2xlUmFkaW9Nb2RlKCk6IHZvaWQge1xuICAgIHRoaXMuc2V0UmFkaW9Nb2RlKCF0aGlzLmFjdGl2YXRlZCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMgQm9vbGVhbiBzdGF0ZSBvZiB0aGUgcmFkaW8gbW9kZS5cbiAgICovXG4gIGlzUmFkaW9Nb2RlQWN0aXZhdGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmFjdGl2YXRlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VyIHRoZSBvbkNoYW5nZWQgZXZlbnQuXG4gICAqL1xuICBwcml2YXRlIG9uQ2hhbmdlZEV2ZW50KCk6IHZvaWQge1xuICAgIHRoaXMuZXZlbnRzLm9uQ2hhbmdlZC5kaXNwYXRjaCh0aGlzLCB7IGFjdGl2YXRlZDogdGhpcy5hY3RpdmF0ZWQgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBvbkNoYW5nZWQgZXZlbnQuXG4gICAqL1xuICBnZXQgb25DaGFuZ2VkKCkge1xuICAgIHJldHVybiB0aGlzLmV2ZW50cy5vbkNoYW5nZWQuZ2V0RXZlbnQoKTtcbiAgfVxufSIsImltcG9ydCB7IFJhZGlvTW9kZUNvbnRyb2xsZXIgfSBmcm9tICcuL3JhZGlvbW9kZWNvbnRyb2xsZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IFRvZ2dsZUJ1dHRvbiwgVG9nZ2xlQnV0dG9uQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vLi4vdHMvY29tcG9uZW50cy90b2dnbGVidXR0b24nO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi8uLi8uLi8uLi90cy91aW1hbmFnZXInO1xuXG5kZWNsYXJlIGNvbnN0IHdpbmRvdzogYW55O1xuXG5leHBvcnQgY2xhc3MgUmFkaW9Nb2RlVG9nZ2xlQnV0dG9uIGV4dGVuZHMgVG9nZ2xlQnV0dG9uPFRvZ2dsZUJ1dHRvbkNvbmZpZz4ge1xuICBwcml2YXRlIHJhZGlvTW9kZUNvbnRyb2xsZXI6IFJhZGlvTW9kZUNvbnRyb2xsZXI7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBUb2dnbGVCdXR0b25Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICBjb25zdCBkZWZhdWx0Q29uZmlnOiBUb2dnbGVCdXR0b25Db25maWcgPSB7XG4gICAgICBjc3NDbGFzczogJ3VpLXJhZGlvbW9kZXRvZ2dsZWJ1dHRvbicsXG4gICAgICB0ZXh0OiAnUmFkaW8gTW9kZScsXG4gICAgICBhcmlhTGFiZWw6ICdSYWRpbyBNb2RlJyxcbiAgICB9O1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywgZGVmYXVsdENvbmZpZywgdGhpcy5jb25maWcpO1xuICAgIHRoaXMucmFkaW9Nb2RlQ29udHJvbGxlciA9IG5ldyBSYWRpb01vZGVDb250cm9sbGVyKCk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG5cbiAgICB0aGlzLnJhZGlvTW9kZUNvbnRyb2xsZXIub25DaGFuZ2VkLnN1YnNjcmliZSgoc2VuZGVyLCBhcmdzKSA9PiB7XG4gICAgICBpZiAod2luZG93LmJpdG1vdmluLmN1c3RvbU1lc3NhZ2VIYW5kbGVyKSB7XG4gICAgICAgIHdpbmRvdy5iaXRtb3Zpbi5jdXN0b21NZXNzYWdlSGFuZGxlci5zZW5kQXN5bmNocm9ub3VzKFxuICAgICAgICAgICdyYWRpb01vZGVDaGFuZ2VkJyxcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeSh7IGFjdGl2YXRlZDogYXJncy5hY3RpdmF0ZWQgfSksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAod2luZG93LmJpdG1vdmluLmN1c3RvbU1lc3NhZ2VIYW5kbGVyKSB7XG4gICAgICB3aW5kb3cuYml0bW92aW4uY3VzdG9tTWVzc2FnZUhhbmRsZXIub24oXG4gICAgICAgICdyYWRpb01vZGVDaGFuZ2VkJyxcbiAgICAgICAgKGRhdGE/OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgY29uc3QgYWN0aXZhdGVkID0gSlNPTi5wYXJzZShkYXRhKS5hY3RpdmF0ZWQ7XG4gICAgICAgICAgICB0aGlzLnJhZGlvTW9kZUNvbnRyb2xsZXIuc2V0UmFkaW9Nb2RlKGFjdGl2YXRlZCk7XG4gICAgICAgICAgICBpZiAoYWN0aXZhdGVkKSB7XG4gICAgICAgICAgICAgIHRoaXMub24oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMub2ZmKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgKTtcblxuICAgICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbUmFkaW9Nb2RlVG9nZ2xlQnV0dG9uXSBCdXR0b24gY2xpY2tlZCcpO1xuICAgICAgICB0aGlzLnJhZGlvTW9kZUNvbnRyb2xsZXIudG9nZ2xlUmFkaW9Nb2RlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMucmFkaW9Nb2RlQ29udHJvbGxlci5pc1JhZGlvTW9kZUFjdGl2YXRlZCgpKSB7XG4gICAgICAgICAgdGhpcy5vbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMub2ZmKCk7XG4gICAgICAgIH1cbiAgICAgICAgd2luZG93LmJpdG1vdmluLmN1c3RvbU1lc3NhZ2VIYW5kbGVyLnNlbmRBc3luY2hyb25vdXMoXG4gICAgICAgICAgJ3JhZGlvTW9kZUNoYW5nZWQnLFxuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIGJlZm9yZTogIXRoaXMucmFkaW9Nb2RlQ29udHJvbGxlci5pc1JhZGlvTW9kZUFjdGl2YXRlZCgpLFxuICAgICAgICAgICAgYWZ0ZXI6IHRoaXMucmFkaW9Nb2RlQ29udHJvbGxlci5pc1JhZGlvTW9kZUFjdGl2YXRlZCgpLFxuICAgICAgICAgICAgYWN0aXZhdGVkOiB0aGlzLnJhZGlvTW9kZUNvbnRyb2xsZXIuaXNSYWRpb01vZGVBY3RpdmF0ZWQoKSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJhZGlvTW9kZUNvbnRyb2xsZXIuaXNSYWRpb01vZGVBY3RpdmF0ZWQoKSkge1xuICAgICAgdGhpcy5vbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9mZigpO1xuICAgIH1cbiAgfVxufVxuIiwiZXhwb3J0IG5hbWVzcGFjZSBBcnJheVV0aWxzIHtcbiAgLyoqXG4gICAqIFJlbW92ZXMgYW4gaXRlbSBmcm9tIGFuIGFycmF5LlxuICAgKiBAcGFyYW0gYXJyYXkgdGhlIGFycmF5IHRoYXQgbWF5IGNvbnRhaW4gdGhlIGl0ZW0gdG8gcmVtb3ZlXG4gICAqIEBwYXJhbSBpdGVtIHRoZSBpdGVtIHRvIHJlbW92ZSBmcm9tIHRoZSBhcnJheVxuICAgKiBAcmV0dXJucyB7YW55fSB0aGUgcmVtb3ZlZCBpdGVtIG9yIG51bGwgaWYgaXQgd2Fzbid0IHBhcnQgb2YgdGhlIGFycmF5XG4gICAqL1xuICBleHBvcnQgZnVuY3Rpb24gcmVtb3ZlPFQ+KGFycmF5OiBUW10sIGl0ZW06IFQpOiBUIHwgbnVsbCB7XG4gICAgbGV0IGluZGV4ID0gYXJyYXkuaW5kZXhPZihpdGVtKTtcblxuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICByZXR1cm4gYXJyYXkuc3BsaWNlKGluZGV4LCAxKVswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBMaXN0SXRlbSwgTGlzdFNlbGVjdG9yLCBMaXN0U2VsZWN0b3JDb25maWcgfSBmcm9tICcuL2NvbXBvbmVudHMvbGlzdHNlbGVjdG9yJztcbmltcG9ydCB7IFVJSW5zdGFuY2VNYW5hZ2VyIH0gZnJvbSAnLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgQXVkaW9UcmFja0V2ZW50LCBQbGF5ZXJBUEksIEF1ZGlvVHJhY2sgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEhlbHBlciBjbGFzcyB0byBoYW5kbGUgYWxsIGF1ZGlvIHRyYWNrcyByZWxhdGVkIGV2ZW50c1xuICpcbiAqIFRoaXMgY2xhc3MgbGlzdGVucyB0byBwbGF5ZXIgZXZlbnRzIGFzIHdlbGwgYXMgdGhlIGBMaXN0U2VsZWN0b3JgIGV2ZW50IGlmIHNlbGVjdGlvbiBjaGFuZ2VkXG4gKi9cbmV4cG9ydCBjbGFzcyBBdWRpb1RyYWNrU3dpdGNoSGFuZGxlciB7XG5cbiAgcHJpdmF0ZSBwbGF5ZXI6IFBsYXllckFQSTtcbiAgcHJpdmF0ZSBsaXN0RWxlbWVudDogTGlzdFNlbGVjdG9yPExpc3RTZWxlY3RvckNvbmZpZz47XG4gIHByaXZhdGUgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcjtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXI6IFBsYXllckFQSSwgZWxlbWVudDogTGlzdFNlbGVjdG9yPExpc3RTZWxlY3RvckNvbmZpZz4sIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpIHtcbiAgICB0aGlzLnBsYXllciA9IHBsYXllcjtcbiAgICB0aGlzLmxpc3RFbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLnVpbWFuYWdlciA9IHVpbWFuYWdlcjtcblxuICAgIHRoaXMuYmluZFNlbGVjdGlvbkV2ZW50KCk7XG4gICAgdGhpcy5iaW5kUGxheWVyRXZlbnRzKCk7XG4gICAgdGhpcy5yZWZyZXNoQXVkaW9UcmFja3MoKTtcbiAgfVxuXG4gIHByaXZhdGUgYmluZFNlbGVjdGlvbkV2ZW50KCk6IHZvaWQge1xuICAgIHRoaXMubGlzdEVsZW1lbnQub25JdGVtU2VsZWN0ZWQuc3Vic2NyaWJlKChfLCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICB0aGlzLnBsYXllci5zZXRBdWRpbyh2YWx1ZSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGJpbmRQbGF5ZXJFdmVudHMoKTogdm9pZCB7XG4gICAgLy8gVXBkYXRlIHNlbGVjdGlvbiB3aGVuIHNlbGVjdGVkIHRyYWNrIGhhcyBjaGFuZ2VkXG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BdWRpb0NoYW5nZWQsIHRoaXMuc2VsZWN0Q3VycmVudEF1ZGlvVHJhY2spO1xuICAgIC8vIFVwZGF0ZSB0cmFja3Mgd2hlbiBzb3VyY2UgZ29lcyBhd2F5XG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VVbmxvYWRlZCwgdGhpcy5yZWZyZXNoQXVkaW9UcmFja3MpO1xuICAgIC8vIFVwZGF0ZSB0cmFja3Mgd2hlbiB0aGUgcGVyaW9kIHdpdGhpbiBhIHNvdXJjZSBjaGFuZ2VzXG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QZXJpb2RTd2l0Y2hlZCwgdGhpcy5yZWZyZXNoQXVkaW9UcmFja3MpO1xuICAgIC8vIFVwZGF0ZSB0cmFja3Mgd2hlbiBhIHRyYWNrIGlzIGFkZGVkIG9yIHJlbW92ZWRcbiAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkF1ZGlvQWRkZWQsIHRoaXMuYWRkQXVkaW9UcmFjayk7XG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BdWRpb1JlbW92ZWQsIHRoaXMucmVtb3ZlQXVkaW9UcmFjayk7XG4gICAgdGhpcy51aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUodGhpcy5yZWZyZXNoQXVkaW9UcmFja3MpO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRBdWRpb1RyYWNrID0gKGV2ZW50OiBBdWRpb1RyYWNrRXZlbnQpID0+IHtcbiAgICBjb25zdCBhdWRpb1RyYWNrID0gZXZlbnQudHJhY2s7XG4gICAgaWYgKCF0aGlzLmxpc3RFbGVtZW50Lmhhc0l0ZW0oYXVkaW9UcmFjay5pZCkpIHtcbiAgICAgIHRoaXMubGlzdEVsZW1lbnQuYWRkSXRlbShhdWRpb1RyYWNrLmlkLCBpMThuLmdldExvY2FsaXplcihhdWRpb1RyYWNrLmxhYmVsKSwgdHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgcmVtb3ZlQXVkaW9UcmFjayA9IChldmVudDogQXVkaW9UcmFja0V2ZW50KSA9PiB7XG4gICAgY29uc3QgYXVkaW9UcmFjayA9IGV2ZW50LnRyYWNrO1xuICAgIGlmICh0aGlzLmxpc3RFbGVtZW50Lmhhc0l0ZW0oYXVkaW9UcmFjay5pZCkpIHtcbiAgICAgIHRoaXMubGlzdEVsZW1lbnQucmVtb3ZlSXRlbShhdWRpb1RyYWNrLmlkKTtcbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSBzZWxlY3RDdXJyZW50QXVkaW9UcmFjayA9ICgpID0+IHtcbiAgICBsZXQgY3VycmVudEF1ZGlvVHJhY2sgPSB0aGlzLnBsYXllci5nZXRBdWRpbygpO1xuXG4gICAgLy8gSExTIHN0cmVhbXMgZG9uJ3QgYWx3YXlzIHByb3ZpZGUgdGhpcywgc28gd2UgaGF2ZSB0byBjaGVja1xuICAgIGlmIChjdXJyZW50QXVkaW9UcmFjaykge1xuICAgICAgdGhpcy5saXN0RWxlbWVudC5zZWxlY3RJdGVtKGN1cnJlbnRBdWRpb1RyYWNrLmlkKTtcbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSByZWZyZXNoQXVkaW9UcmFja3MgPSAoKSA9PiB7XG4gICAgY29uc3QgYXVkaW9UcmFja3MgPSB0aGlzLnBsYXllci5nZXRBdmFpbGFibGVBdWRpbygpO1xuICAgIGNvbnN0IGF1ZGlvVHJhY2tUb0xpc3RJdGVtID0gKGF1ZGlvVHJhY2s6IEF1ZGlvVHJhY2spOiBMaXN0SXRlbSA9PiB7XG4gICAgICByZXR1cm4geyBrZXk6IGF1ZGlvVHJhY2suaWQsIGxhYmVsOiBhdWRpb1RyYWNrLmxhYmVsIH07XG4gICAgfTtcblxuICAgIHRoaXMubGlzdEVsZW1lbnQuc3luY2hyb25pemVJdGVtcyhhdWRpb1RyYWNrcy5tYXAoYXVkaW9UcmFja1RvTGlzdEl0ZW0pKTtcbiAgICB0aGlzLnNlbGVjdEN1cnJlbnRBdWRpb1RyYWNrKCk7XG4gIH07XG59XG4iLCJkZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBOYXZpZ2F0b3Ige1xuICAgIG1zTWF4VG91Y2hQb2ludHM/OiBudW1iZXI7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJyb3dzZXJVdGlscyB7XG4gIC8vIGlzTW9iaWxlIG9ubHkgbmVlZHMgdG8gYmUgZXZhbHVhdGVkIG9uY2UgKGl0IGNhbm5vdCBjaGFuZ2UgZHVyaW5nIGEgYnJvd3NlciBzZXNzaW9uKVxuICAvLyBNb2JpbGUgZGV0ZWN0aW9uIGFjY29yZGluZyB0byBNb3ppbGxhIHJlY29tbWVuZGF0aW9uOiBcIkluIHN1bW1hcnksIHdlIHJlY29tbWVuZCBsb29raW5nIGZvciB0aGUgc3RyaW5nIOKAnE1vYmnigJ1cbiAgLy8gYW55d2hlcmUgaW4gdGhlIFVzZXIgQWdlbnQgdG8gZGV0ZWN0IGEgbW9iaWxlIGRldmljZS5cIlxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0Jyb3dzZXJfZGV0ZWN0aW9uX3VzaW5nX3RoZV91c2VyX2FnZW50XG4gIHN0YXRpYyBnZXQgaXNNb2JpbGUoKTogYm9vbGVhbiB7XG4gICAgaWYgKCF0aGlzLndpbmRvd0V4aXN0cygpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiAvTW9iaS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgaXNDaHJvbWUoKTogYm9vbGVhbiB7XG4gICAgaWYgKCF0aGlzLndpbmRvd0V4aXN0cygpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiAvQ2hyb21lLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICB9XG5cbiAgc3RhdGljIGdldCBpc0FuZHJvaWQoKTogYm9vbGVhbiB7XG4gICAgaWYgKCF0aGlzLndpbmRvd0V4aXN0cygpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiAvQW5kcm9pZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiAhdGhpcy5pc0hpc2Vuc2U7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGlzSU9TKCk6IGJvb2xlYW4ge1xuICAgIGlmICghdGhpcy53aW5kb3dFeGlzdHMoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgL2lQYWR8aVBob25lfGlQb2QvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGlzTWFjSW50ZWwoKTogYm9vbGVhbiB7XG4gICAgaWYgKCF0aGlzLndpbmRvd0V4aXN0cygpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IucGxhdGZvcm0gPT09ICdNYWNJbnRlbCc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGlzSGlzZW5zZSgpOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMud2luZG93RXhpc3RzKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIC9IaXNlbnNlLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICB9XG5cbiAgc3RhdGljIGdldCBpc1BsYXlTdGF0aW9uKCk6IGJvb2xlYW4ge1xuICAgIGlmICghdGhpcy53aW5kb3dFeGlzdHMoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgL1BsYXlTdGF0aW9uL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgaXNXZWJPcygpOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMud2luZG93RXhpc3RzKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIG5hdmlnYXRvciAmJlxuICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJlxuICAgICAgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5jbHVkZXMoJ1dlYjBTJykgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnTmV0Q2FzdCcpKVxuICAgICk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGlzVGl6ZW4oKTogYm9vbGVhbiB7XG4gICAgaWYgKCF0aGlzLndpbmRvd0V4aXN0cygpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiAvVGl6ZW4vLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gIH1cblxuICAvLyBodHRwczovL2hhY2tzLm1vemlsbGEub3JnLzIwMTMvMDQvZGV0ZWN0aW5nLXRvdWNoLWl0cy10aGUtd2h5LW5vdC10aGUtaG93L1xuICBzdGF0aWMgZ2V0IGlzVG91Y2hTdXBwb3J0ZWQoKSB7XG4gICAgaWYgKCF0aGlzLndpbmRvd0V4aXN0cygpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgfHwgbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgKG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDAgfHwgbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMgPiAwKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIHdpbmRvd0V4aXN0cygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG4gIH1cbn1cbiIsImltcG9ydCB7IENsaWNrT3ZlcmxheSB9IGZyb20gJy4vY2xpY2tvdmVybGF5JztcbmltcG9ydCB7IFVJSW5zdGFuY2VNYW5hZ2VyIH0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IEFkLCBBZEV2ZW50LCBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuXG4vKipcbiAqIEEgc2ltcGxlIGNsaWNrIGNhcHR1cmUgb3ZlcmxheSBmb3IgY2xpY2tUaHJvdWdoVXJscyBvZiBhZHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBBZENsaWNrT3ZlcmxheSBleHRlbmRzIENsaWNrT3ZlcmxheSB7XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBjbGlja1Rocm91Z2hDYWxsYmFjazogKCkgPT4gdm9pZCA9IG51bGw7XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQWRTdGFydGVkLCAoZXZlbnQ6IEFkRXZlbnQpID0+IHtcbiAgICAgIGxldCBhZCA9IGV2ZW50LmFkO1xuICAgICAgdGhpcy5zZXRVcmwoYWQuY2xpY2tUaHJvdWdoVXJsKTtcbiAgICAgIGNsaWNrVGhyb3VnaENhbGxiYWNrID0gYWQuY2xpY2tUaHJvdWdoVXJsT3BlbmVkO1xuICAgIH0pO1xuXG4gICAgLy8gQ2xlYXIgY2xpY2stdGhyb3VnaCBVUkwgd2hlbiBhZCBoYXMgZmluaXNoZWRcbiAgICBsZXQgYWRGaW5pc2hlZEhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICB0aGlzLnNldFVybChudWxsKTtcbiAgICB9O1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkRmluaXNoZWQsIGFkRmluaXNoZWRIYW5kbGVyKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQWRTa2lwcGVkLCBhZEZpbmlzaGVkSGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkRXJyb3IsIGFkRmluaXNoZWRIYW5kbGVyKTtcblxuICAgIHRoaXMub25DbGljay5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgLy8gUGF1c2UgdGhlIGFkIHdoZW4gb3ZlcmxheSBpcyBjbGlja2VkXG4gICAgICBwbGF5ZXIucGF1c2UoJ3VpLWFkLWNsaWNrLW92ZXJsYXknKTtcblxuICAgICAgaWYgKGNsaWNrVGhyb3VnaENhbGxiYWNrKSB7XG4gICAgICAgIGNsaWNrVGhyb3VnaENhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7TGFiZWwsIExhYmVsQ29uZmlnfSBmcm9tICcuL2xhYmVsJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge1N0cmluZ1V0aWxzfSBmcm9tICcuLi9zdHJpbmd1dGlscyc7XG5pbXBvcnQgeyBBZEV2ZW50LCBMaW5lYXJBZCwgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBsYWJlbCB0aGF0IGRpc3BsYXlzIGEgbWVzc2FnZSBhYm91dCBhIHJ1bm5pbmcgYWQsIG9wdGlvbmFsbHkgd2l0aCBhIGNvdW50ZG93bi5cbiAqL1xuZXhwb3J0IGNsYXNzIEFkTWVzc2FnZUxhYmVsIGV4dGVuZHMgTGFiZWw8TGFiZWxDb25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IExhYmVsQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1sYWJlbC1hZC1tZXNzYWdlJyxcbiAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdhZHMucmVtYWluaW5nVGltZScpICxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbGV0IGNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG4gICAgbGV0IHRleHQgPSBjb25maWcudGV4dDtcblxuICAgIGxldCB1cGRhdGVNZXNzYWdlSGFuZGxlciA9ICgpID0+IHtcbiAgICAgIHRoaXMuc2V0VGV4dChTdHJpbmdVdGlscy5yZXBsYWNlQWRNZXNzYWdlUGxhY2Vob2xkZXJzKGkxOG4ucGVyZm9ybUxvY2FsaXphdGlvbih0ZXh0KSwgbnVsbCwgcGxheWVyKSk7XG4gICAgfTtcblxuICAgIGxldCBhZFN0YXJ0SGFuZGxlciA9IChldmVudDogQWRFdmVudCkgPT4ge1xuICAgICAgbGV0IHVpQ29uZmlnID0gKGV2ZW50LmFkIGFzIExpbmVhckFkKS51aUNvbmZpZztcbiAgICAgIHRleHQgPSB1aUNvbmZpZyAmJiB1aUNvbmZpZy5tZXNzYWdlIHx8IGNvbmZpZy50ZXh0O1xuXG4gICAgICB1cGRhdGVNZXNzYWdlSGFuZGxlcigpO1xuXG4gICAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVGltZUNoYW5nZWQsIHVwZGF0ZU1lc3NhZ2VIYW5kbGVyKTtcbiAgICB9O1xuXG4gICAgbGV0IGFkRW5kSGFuZGxlciA9ICgpID0+IHtcbiAgICAgIHBsYXllci5vZmYocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVGltZUNoYW5nZWQsIHVwZGF0ZU1lc3NhZ2VIYW5kbGVyKTtcbiAgICB9O1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkU3RhcnRlZCwgYWRTdGFydEhhbmRsZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BZFNraXBwZWQsIGFkRW5kSGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkRXJyb3IsIGFkRW5kSGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkRmluaXNoZWQsIGFkRW5kSGFuZGxlcik7XG4gIH1cbn0iLCJpbXBvcnQgeyBCdXR0b25Db25maWcsIEJ1dHRvbiB9IGZyb20gJy4vYnV0dG9uJztcbmltcG9ydCB7IFVJSW5zdGFuY2VNYW5hZ2VyIH0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFN0cmluZ1V0aWxzIH0gZnJvbSAnLi4vc3RyaW5ndXRpbHMnO1xuaW1wb3J0IHsgQWRFdmVudCwgTGluZWFyQWQsIFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIHRoZSB7QGxpbmsgQWRTa2lwQnV0dG9ufS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBZFNraXBCdXR0b25Db25maWcgZXh0ZW5kcyBCdXR0b25Db25maWcge1xuICAvKipcbiAgICogTWVzc2FnZSB3aGljaCBnZXRzIGRpc3BsYXllZCBkdXJpbmcgdGhlIGNvdW50ZG93biBpcyBhY3RpdmUuXG4gICAqIFN1cHBvcnRlZCBwbGFjZWhvbGRlcnM6IGxvb2sgYXQge0BsaW5rIFN0cmluZ1V0aWxzLnJlcGxhY2VBZE1lc3NhZ2VQbGFjZWhvbGRlcnN9XG4gICAqL1xuICB1bnRpbFNraXBwYWJsZU1lc3NhZ2U/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBNZXNzYWdlIGRpc3BsYXllZCB3aGVuIHRoZSBhZCBpcyBza2lwcGFibGUuXG4gICAqIFN1cHBvcnRlZCBwbGFjZWhvbGRlcnM6IGxvb2sgYXQge0BsaW5rIFN0cmluZ1V0aWxzLnJlcGxhY2VBZE1lc3NhZ2VQbGFjZWhvbGRlcnN9XG4gICAqL1xuICBza2lwcGFibGVNZXNzYWdlPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgYnV0dG9uIHRoYXQgaXMgZGlzcGxheWVkIGR1cmluZyBhZHMgYW5kIGNhbiBiZSB1c2VkIHRvIHNraXAgdGhlIGFkLlxuICovXG5leHBvcnQgY2xhc3MgQWRTa2lwQnV0dG9uIGV4dGVuZHMgQnV0dG9uPEFkU2tpcEJ1dHRvbkNvbmZpZz4ge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQWRTa2lwQnV0dG9uQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywgPEFkU2tpcEJ1dHRvbkNvbmZpZz57XG4gICAgICBjc3NDbGFzczogJ3VpLWJ1dHRvbi1hZC1za2lwJyxcbiAgICAgIHVudGlsU2tpcHBhYmxlTWVzc2FnZTogJ1NraXAgYWQgaW4ge3JlbWFpbmluZ1RpbWV9JyxcbiAgICAgIHNraXBwYWJsZU1lc3NhZ2U6ICdTa2lwIGFkJyxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbGV0IGNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG4gICAgbGV0IHVudGlsU2tpcHBhYmxlTWVzc2FnZSA9IGNvbmZpZy51bnRpbFNraXBwYWJsZU1lc3NhZ2U7XG4gICAgbGV0IHNraXBwYWJsZU1lc3NhZ2UgPSBjb25maWcuc2tpcHBhYmxlTWVzc2FnZTtcbiAgICBsZXQgc2tpcE9mZnNldCA9IC0xO1xuXG4gICAgbGV0IHVwZGF0ZVNraXBNZXNzYWdlSGFuZGxlciA9ICgpID0+IHtcbiAgICAgIHRoaXMuc2hvdygpO1xuXG4gICAgICAvLyBVcGRhdGUgdGhlIHNraXAgbWVzc2FnZSBvbiB0aGUgYnV0dG9uXG4gICAgICBpZiAocGxheWVyLmdldEN1cnJlbnRUaW1lKCkgPCBza2lwT2Zmc2V0KSB7XG4gICAgICAgIHRoaXMuc2V0VGV4dChTdHJpbmdVdGlscy5yZXBsYWNlQWRNZXNzYWdlUGxhY2Vob2xkZXJzKHVudGlsU2tpcHBhYmxlTWVzc2FnZSwgc2tpcE9mZnNldCwgcGxheWVyKSk7XG4gICAgICAgIHRoaXMuZGlzYWJsZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRUZXh0KHNraXBwYWJsZU1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmVuYWJsZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBsZXQgYWRTdGFydEhhbmRsZXIgPSAoZXZlbnQ6IEFkRXZlbnQpID0+IHtcbiAgICAgIGxldCBhZCA9IGV2ZW50LmFkIGFzIExpbmVhckFkO1xuICAgICAgc2tpcE9mZnNldCA9IGFkLnNraXBwYWJsZUFmdGVyO1xuICAgICAgdW50aWxTa2lwcGFibGVNZXNzYWdlID0gYWQudWlDb25maWcgJiYgYWQudWlDb25maWcudW50aWxTa2lwcGFibGVNZXNzYWdlIHx8IGNvbmZpZy51bnRpbFNraXBwYWJsZU1lc3NhZ2U7XG4gICAgICBza2lwcGFibGVNZXNzYWdlID0gYWQudWlDb25maWcgJiYgYWQudWlDb25maWcuc2tpcHBhYmxlTWVzc2FnZSB8fCBjb25maWcuc2tpcHBhYmxlTWVzc2FnZTtcblxuICAgICAgLy8gRGlzcGxheSB0aGlzIGJ1dHRvbiBvbmx5IGlmIGFkIGlzIHNraXBwYWJsZS5cbiAgICAgIC8vIE5vbi1za2lwcGFibGUgYWRzIHdpbGwgcmV0dXJuIC0xIGZvciBza2lwcGFibGVBZnRlciBmb3IgcGxheWVyIHZlcnNpb24gPCB2OC4zLjAuXG4gICAgICBpZiAodHlwZW9mIHNraXBPZmZzZXQgPT09ICdudW1iZXInICYmIHNraXBPZmZzZXQgPj0gMCkge1xuICAgICAgICB1cGRhdGVTa2lwTWVzc2FnZUhhbmRsZXIoKTtcbiAgICAgICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlRpbWVDaGFuZ2VkLCB1cGRhdGVTa2lwTWVzc2FnZUhhbmRsZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGxldCBhZEVuZEhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICBwbGF5ZXIub2ZmKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlRpbWVDaGFuZ2VkLCB1cGRhdGVTa2lwTWVzc2FnZUhhbmRsZXIpO1xuICAgIH07XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQWRTdGFydGVkLCBhZFN0YXJ0SGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkU2tpcHBlZCwgYWRFbmRIYW5kbGVyKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQWRFcnJvciwgYWRFbmRIYW5kbGVyKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQWRGaW5pc2hlZCwgYWRFbmRIYW5kbGVyKTtcblxuICAgIHRoaXMub25DbGljay5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgLy8gVHJ5IHRvIHNraXAgdGhlIGFkICh0aGlzIG9ubHkgd29ya3MgaWYgaXQgaXMgc2tpcHBhYmxlIHNvIHdlIGRvbid0IG5lZWQgdG8gdGFrZSBleHRyYSBjYXJlIG9mIHRoYXQgaGVyZSlcbiAgICAgIHBsYXllci5hZHMuc2tpcCgpO1xuICAgIH0pO1xuICB9XG59IiwiaW1wb3J0IHtUb2dnbGVCdXR0b24sIFRvZ2dsZUJ1dHRvbkNvbmZpZ30gZnJvbSAnLi90b2dnbGVidXR0b24nO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEEgYnV0dG9uIHRoYXQgdG9nZ2xlcyBBcHBsZSBBaXJQbGF5LlxuICovXG5leHBvcnQgY2xhc3MgQWlyUGxheVRvZ2dsZUJ1dHRvbiBleHRlbmRzIFRvZ2dsZUJ1dHRvbjxUb2dnbGVCdXR0b25Db25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFRvZ2dsZUJ1dHRvbkNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktYWlycGxheXRvZ2dsZWJ1dHRvbicsXG4gICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcignYXBwbGVBaXJwbGF5JyksXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGlmICghcGxheWVyLmlzQWlycGxheUF2YWlsYWJsZSkge1xuICAgICAgLy8gSWYgdGhlIHBsYXllciBkb2VzIG5vdCBzdXBwb3J0IEFpcnBsYXkgKHBsYXllciA3LjApLCB3ZSBqdXN0IGhpZGUgdGhpcyBjb21wb25lbnQgYW5kIHNraXAgY29uZmlndXJhdGlvblxuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBpZiAocGxheWVyLmlzQWlycGxheUF2YWlsYWJsZSgpKSB7XG4gICAgICAgIHBsYXllci5zaG93QWlycGxheVRhcmdldFBpY2tlcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGNvbnNvbGUpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnQWlyUGxheSB1bmF2YWlsYWJsZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBhaXJQbGF5QXZhaWxhYmxlSGFuZGxlciA9ICgpID0+IHtcbiAgICAgIGlmIChwbGF5ZXIuaXNBaXJwbGF5QXZhaWxhYmxlKCkpIHtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgYWlyUGxheUNoYW5nZWRIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgaWYgKHBsYXllci5pc0FpcnBsYXlBY3RpdmUoKSkge1xuICAgICAgICB0aGlzLm9uKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9mZigpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQWlycGxheUF2YWlsYWJsZSwgYWlyUGxheUF2YWlsYWJsZUhhbmRsZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BaXJwbGF5Q2hhbmdlZCwgYWlyUGxheUNoYW5nZWRIYW5kbGVyKTtcblxuICAgIC8vIFN0YXJ0dXAgaW5pdFxuICAgIGFpclBsYXlBdmFpbGFibGVIYW5kbGVyKCk7IC8vIEhpZGUgYnV0dG9uIGlmIEFpclBsYXkgaXMgbm90IGF2YWlsYWJsZVxuICAgIGFpclBsYXlDaGFuZ2VkSGFuZGxlcigpO1xuICB9XG59IiwiaW1wb3J0IHtTZWxlY3RCb3h9IGZyb20gJy4vc2VsZWN0Ym94JztcbmltcG9ydCB7TGlzdFNlbGVjdG9yQ29uZmlnfSBmcm9tICcuL2xpc3RzZWxlY3Rvcic7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBzZWxlY3QgYm94IHByb3ZpZGluZyBhIHNlbGVjdGlvbiBiZXR3ZWVuICdhdXRvJyBhbmQgdGhlIGF2YWlsYWJsZSBhdWRpbyBxdWFsaXRpZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBBdWRpb1F1YWxpdHlTZWxlY3RCb3ggZXh0ZW5kcyBTZWxlY3RCb3gge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogTGlzdFNlbGVjdG9yQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3NlczogWyd1aS1hdWRpb3F1YWxpdHlzZWxlY3Rib3gnXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbGV0IHNlbGVjdEN1cnJlbnRBdWRpb1F1YWxpdHkgPSAoKSA9PiB7XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0ocGxheWVyLmdldEF1ZGlvUXVhbGl0eSgpLmlkKTtcbiAgICB9O1xuXG4gICAgbGV0IHVwZGF0ZUF1ZGlvUXVhbGl0aWVzID0gKCkgPT4ge1xuICAgICAgbGV0IGF1ZGlvUXVhbGl0aWVzID0gcGxheWVyLmdldEF2YWlsYWJsZUF1ZGlvUXVhbGl0aWVzKCk7XG5cbiAgICAgIHRoaXMuY2xlYXJJdGVtcygpO1xuXG4gICAgICAvLyBBZGQgZW50cnkgZm9yIGF1dG9tYXRpYyBxdWFsaXR5IHN3aXRjaGluZyAoZGVmYXVsdCBzZXR0aW5nKVxuICAgICAgdGhpcy5hZGRJdGVtKCdhdXRvJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2F1dG8nKSk7XG5cbiAgICAgIC8vIEFkZCBhdWRpbyBxdWFsaXRpZXNcbiAgICAgIGZvciAobGV0IGF1ZGlvUXVhbGl0eSBvZiBhdWRpb1F1YWxpdGllcykge1xuICAgICAgICB0aGlzLmFkZEl0ZW0oYXVkaW9RdWFsaXR5LmlkLCBhdWRpb1F1YWxpdHkubGFiZWwpO1xuICAgICAgfVxuXG4gICAgICAvLyBTZWxlY3QgaW5pdGlhbCBxdWFsaXR5XG4gICAgICBzZWxlY3RDdXJyZW50QXVkaW9RdWFsaXR5KCk7XG4gICAgfTtcblxuICAgIHRoaXMub25JdGVtU2VsZWN0ZWQuc3Vic2NyaWJlKChzZW5kZXI6IEF1ZGlvUXVhbGl0eVNlbGVjdEJveCwgdmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgcGxheWVyLnNldEF1ZGlvUXVhbGl0eSh2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvLyBVcGRhdGUgcXVhbGl0aWVzIHdoZW4gYXVkaW8gdHJhY2sgaGFzIGNoYW5nZWRcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQXVkaW9DaGFuZ2VkLCB1cGRhdGVBdWRpb1F1YWxpdGllcyk7XG4gICAgLy8gVXBkYXRlIHF1YWxpdGllcyB3aGVuIHNvdXJjZSBnb2VzIGF3YXlcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU291cmNlVW5sb2FkZWQsIHVwZGF0ZUF1ZGlvUXVhbGl0aWVzKTtcbiAgICAvLyBVcGRhdGUgcXVhbGl0aWVzIHdoZW4gdGhlIHBlcmlvZCB3aXRoaW4gYSBzb3VyY2UgY2hhbmdlc1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QZXJpb2RTd2l0Y2hlZCwgdXBkYXRlQXVkaW9RdWFsaXRpZXMpO1xuICAgIC8vIFVwZGF0ZSBxdWFsaXR5IHNlbGVjdGlvbiB3aGVuIHF1YWxpdHkgaXMgY2hhbmdlZCAoZnJvbSBvdXRzaWRlKVxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BdWRpb1F1YWxpdHlDaGFuZ2VkLCBzZWxlY3RDdXJyZW50QXVkaW9RdWFsaXR5KTtcbiAgICBpZiAoKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50IGFzIGFueSkuQXVkaW9RdWFsaXR5QWRkZWQpIHtcbiAgICAgIC8vIFVwZGF0ZSBxdWFsaXRpZXMgd2hlbiB0aGVpciBhdmFpbGFiaWxpdHkgY2hhbmdlZFxuICAgICAgLy8gVE9ETzogcmVtb3ZlIGFueSBjYXN0IGFmdGVyIG5leHQgcGxheWVyIHJlbGVhc2VcbiAgICAgIHBsYXllci5vbigocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQgYXMgYW55KS5BdWRpb1F1YWxpdHlBZGRlZCwgdXBkYXRlQXVkaW9RdWFsaXRpZXMpO1xuICAgICAgcGxheWVyLm9uKChwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudCBhcyBhbnkpLkF1ZGlvUXVhbGl0eVJlbW92ZWQsIHVwZGF0ZUF1ZGlvUXVhbGl0aWVzKTtcbiAgICB9XG5cbiAgICB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUodXBkYXRlQXVkaW9RdWFsaXRpZXMpO1xuICB9XG59IiwiaW1wb3J0IHtMaXN0Qm94fSBmcm9tICcuL2xpc3Rib3gnO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7QXVkaW9UcmFja1N3aXRjaEhhbmRsZXJ9IGZyb20gJy4uL2F1ZGlvdHJhY2t1dGlscyc7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuXG4vKipcbiAqIEEgZWxlbWVudCB0aGF0IGlzIHNpbWlsYXIgdG8gYSBzZWxlY3QgYm94IHdoZXJlIHRoZSB1c2VyIGNhbiBzZWxlY3QgYSBzdWJ0aXRsZVxuICovXG5leHBvcnQgY2xhc3MgQXVkaW9UcmFja0xpc3RCb3ggZXh0ZW5kcyBMaXN0Qm94IHtcblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuICAgIG5ldyBBdWRpb1RyYWNrU3dpdGNoSGFuZGxlcihwbGF5ZXIsIHRoaXMsIHVpbWFuYWdlcik7XG4gIH1cbn1cbiIsImltcG9ydCB7U2VsZWN0Qm94fSBmcm9tICcuL3NlbGVjdGJveCc7XG5pbXBvcnQge0xpc3RTZWxlY3RvckNvbmZpZ30gZnJvbSAnLi9saXN0c2VsZWN0b3InO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7QXVkaW9UcmFja1N3aXRjaEhhbmRsZXJ9IGZyb20gJy4uL2F1ZGlvdHJhY2t1dGlscyc7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuXG4vKipcbiAqIEEgc2VsZWN0IGJveCBwcm92aWRpbmcgYSBzZWxlY3Rpb24gYmV0d2VlbiBhdmFpbGFibGUgYXVkaW8gdHJhY2tzIChlLmcuIGRpZmZlcmVudCBsYW5ndWFnZXMpLlxuICovXG5leHBvcnQgY2xhc3MgQXVkaW9UcmFja1NlbGVjdEJveCBleHRlbmRzIFNlbGVjdEJveCB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBMaXN0U2VsZWN0b3JDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzc2VzOiBbJ3VpLWF1ZGlvdHJhY2tzZWxlY3Rib3gnXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbmV3IEF1ZGlvVHJhY2tTd2l0Y2hIYW5kbGVyKHBsYXllciwgdGhpcywgdWltYW5hZ2VyKTtcbiAgfVxufSIsImltcG9ydCB7Q29udGFpbmVyQ29uZmlnLCBDb250YWluZXJ9IGZyb20gJy4vY29udGFpbmVyJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge0NvbXBvbmVudCwgQ29tcG9uZW50Q29uZmlnfSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQge1RpbWVvdXR9IGZyb20gJy4uL3RpbWVvdXQnO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgdGhlIHtAbGluayBCdWZmZXJpbmdPdmVybGF5fSBjb21wb25lbnQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnVmZmVyaW5nT3ZlcmxheUNvbmZpZyBleHRlbmRzIENvbnRhaW5lckNvbmZpZyB7XG4gIC8qKlxuICAgKiBEZWxheSBpbiBtaWxsaXNlY29uZHMgYWZ0ZXIgd2hpY2ggdGhlIGJ1ZmZlcmluZyBvdmVybGF5IHdpbGwgYmUgZGlzcGxheWVkLiBVc2VmdWwgdG8gYnlwYXNzIHNob3J0IHN0YWxscyB3aXRob3V0XG4gICAqIGRpc3BsYXlpbmcgdGhlIG92ZXJsYXkuIFNldCB0byAwIHRvIGRpc3BsYXkgdGhlIG92ZXJsYXkgaW5zdGFudGx5LlxuICAgKiBEZWZhdWx0OiAxMDAwbXMgKDEgc2Vjb25kKVxuICAgKi9cbiAgc2hvd0RlbGF5TXM/OiBudW1iZXI7XG59XG5cbi8qKlxuICogT3ZlcmxheXMgdGhlIHBsYXllciBhbmQgZGlzcGxheXMgYSBidWZmZXJpbmcgaW5kaWNhdG9yLlxuICovXG5leHBvcnQgY2xhc3MgQnVmZmVyaW5nT3ZlcmxheSBleHRlbmRzIENvbnRhaW5lcjxCdWZmZXJpbmdPdmVybGF5Q29uZmlnPiB7XG5cbiAgcHJpdmF0ZSBpbmRpY2F0b3JzOiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPltdO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQnVmZmVyaW5nT3ZlcmxheUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuaW5kaWNhdG9ycyA9IFtcbiAgICAgIG5ldyBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPih7IHRhZzogJ2RpdicsIGNzc0NsYXNzOiAndWktYnVmZmVyaW5nLW92ZXJsYXktaW5kaWNhdG9yJywgcm9sZTogJ2ltZycgfSksXG4gICAgICBuZXcgQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4oeyB0YWc6ICdkaXYnLCBjc3NDbGFzczogJ3VpLWJ1ZmZlcmluZy1vdmVybGF5LWluZGljYXRvcicsIHJvbGU6ICdpbWcnIH0pLFxuICAgICAgbmV3IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+KHsgdGFnOiAnZGl2JywgY3NzQ2xhc3M6ICd1aS1idWZmZXJpbmctb3ZlcmxheS1pbmRpY2F0b3InLCByb2xlOiAnaW1nJyB9KSxcbiAgICBdO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywgPEJ1ZmZlcmluZ092ZXJsYXlDb25maWc+e1xuICAgICAgY3NzQ2xhc3M6ICd1aS1idWZmZXJpbmctb3ZlcmxheScsXG4gICAgICBoaWRkZW46IHRydWUsXG4gICAgICBjb21wb25lbnRzOiB0aGlzLmluZGljYXRvcnMsXG4gICAgICBzaG93RGVsYXlNczogMTAwMCxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbGV0IGNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG5cbiAgICBsZXQgb3ZlcmxheVNob3dUaW1lb3V0ID0gbmV3IFRpbWVvdXQoY29uZmlnLnNob3dEZWxheU1zLCAoKSA9PiB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9KTtcblxuICAgIGxldCBzaG93T3ZlcmxheSA9ICgpID0+IHtcbiAgICAgIG92ZXJsYXlTaG93VGltZW91dC5zdGFydCgpO1xuICAgIH07XG5cbiAgICBsZXQgaGlkZU92ZXJsYXkgPSAoKSA9PiB7XG4gICAgICBvdmVybGF5U2hvd1RpbWVvdXQuY2xlYXIoKTtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH07XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU3RhbGxTdGFydGVkLCBzaG93T3ZlcmxheSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlN0YWxsRW5kZWQsIGhpZGVPdmVybGF5KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheSwgc2hvd092ZXJsYXkpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5aW5nLCBoaWRlT3ZlcmxheSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBhdXNlZCwgaGlkZU92ZXJsYXkpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TZWVrLCBzaG93T3ZlcmxheSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNlZWtlZCwgaGlkZU92ZXJsYXkpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5UaW1lU2hpZnQsIHNob3dPdmVybGF5KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVGltZVNoaWZ0ZWQsIGhpZGVPdmVybGF5KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU291cmNlVW5sb2FkZWQsIGhpZGVPdmVybGF5KTtcblxuICAgIC8vIFNob3cgb3ZlcmxheSBpZiBwbGF5ZXIgaXMgYWxyZWFkeSBzdGFsbGVkIGF0IGluaXRcbiAgICBpZiAocGxheWVyLmlzU3RhbGxlZCgpKSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7Q29tcG9uZW50Q29uZmlnLCBDb21wb25lbnR9IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCB7RE9NfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHtFdmVudERpc3BhdGNoZXIsIE5vQXJncywgRXZlbnR9IGZyb20gJy4uL2V2ZW50ZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBMb2NhbGl6YWJsZVRleHQgLCBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIGZvciBhIHtAbGluayBCdXR0b259IGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCdXR0b25Db25maWcgZXh0ZW5kcyBDb21wb25lbnRDb25maWcge1xuICAvKipcbiAgICogVGhlIHRleHQgYXMgc3RyaW5nIG9yIGxvY2FsaXplIGNhbGxiYWNrIG9uIHRoZSBidXR0b24uXG4gICAqL1xuICB0ZXh0PzogTG9jYWxpemFibGVUZXh0O1xufVxuXG4vKipcbiAqIEEgc2ltcGxlIGNsaWNrYWJsZSBidXR0b24uXG4gKi9cbmV4cG9ydCBjbGFzcyBCdXR0b248Q29uZmlnIGV4dGVuZHMgQnV0dG9uQ29uZmlnPiBleHRlbmRzIENvbXBvbmVudDxDb25maWc+IHtcblxuICBwcml2YXRlIGJ1dHRvbkV2ZW50cyA9IHtcbiAgICBvbkNsaWNrOiBuZXcgRXZlbnREaXNwYXRjaGVyPEJ1dHRvbjxDb25maWc+LCBOb0FyZ3M+KCksXG4gIH07XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1idXR0b24nLFxuICAgICAgcm9sZTogJ2J1dHRvbicsXG4gICAgICB0YWJJbmRleDogMCxcbiAgICB9IGFzIENvbmZpZywgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRvRG9tRWxlbWVudCgpOiBET00ge1xuICAgIGNvbnN0IGJ1dHRvbkVsZW1lbnRBdHRyaWJ1dGVzOiB7IFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfSA9IHtcbiAgICAgICdpZCc6IHRoaXMuY29uZmlnLmlkLFxuICAgICAgJ2FyaWEtbGFiZWwnOiBpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24odGhpcy5jb25maWcuYXJpYUxhYmVsIHx8IHRoaXMuY29uZmlnLnRleHQpLFxuICAgICAgJ2NsYXNzJzogdGhpcy5nZXRDc3NDbGFzc2VzKCksXG4gICAgICAndHlwZScgOiAnYnV0dG9uJyxcbiAgICAgIC8qKlxuICAgICAgKiBXQ0FHMjAgc3RhbmRhcmQgdG8gZGlzcGxheSBpZiBhIGJ1dHRvbiBpcyBwcmVzc2VkIG9yIG5vdFxuICAgICAgKi9cbiAgICAgICdhcmlhLXByZXNzZWQnOiAnZmFsc2UnLFxuICAgICAgJ3RhYmluZGV4JzogdGhpcy5jb25maWcudGFiSW5kZXgudG9TdHJpbmcoKSxcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuY29uZmlnLnJvbGUgIT0gbnVsbCkge1xuICAgICAgYnV0dG9uRWxlbWVudEF0dHJpYnV0ZXNbJ3JvbGUnXSA9IHRoaXMuY29uZmlnLnJvbGU7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIHRoZSBidXR0b24gZWxlbWVudCB3aXRoIHRoZSB0ZXh0IGxhYmVsXG4gICAgbGV0IGJ1dHRvbkVsZW1lbnQgPSBuZXcgRE9NKCdidXR0b24nLCBidXR0b25FbGVtZW50QXR0cmlidXRlcykuYXBwZW5kKG5ldyBET00oJ3NwYW4nLCB7XG4gICAgICAnY2xhc3MnOiB0aGlzLnByZWZpeENzcygnbGFiZWwnKSxcbiAgICB9KS5odG1sKGkxOG4ucGVyZm9ybUxvY2FsaXphdGlvbih0aGlzLmNvbmZpZy50ZXh0KSkpO1xuXG4gICAgLy8gTGlzdGVuIGZvciB0aGUgY2xpY2sgZXZlbnQgb24gdGhlIGJ1dHRvbiBlbGVtZW50IGFuZCB0cmlnZ2VyIHRoZSBjb3JyZXNwb25kaW5nIGV2ZW50IG9uIHRoZSBidXR0b24gY29tcG9uZW50XG4gICAgYnV0dG9uRWxlbWVudC5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLm9uQ2xpY2tFdmVudCgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJ1dHRvbkVsZW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0ZXh0IG9uIHRoZSBsYWJlbCBvZiB0aGUgYnV0dG9uLlxuICAgKiBAcGFyYW0gdGV4dCB0aGUgdGV4dCB0byBwdXQgaW50byB0aGUgbGFiZWwgb2YgdGhlIGJ1dHRvblxuICAgKi9cbiAgc2V0VGV4dCh0ZXh0OiBMb2NhbGl6YWJsZVRleHQpOiB2b2lkIHtcbiAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5maW5kKCcuJyArIHRoaXMucHJlZml4Q3NzKCdsYWJlbCcpKS5odG1sKGkxOG4ucGVyZm9ybUxvY2FsaXphdGlvbih0ZXh0KSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25DbGlja0V2ZW50KCkge1xuICAgIHRoaXMuYnV0dG9uRXZlbnRzLm9uQ2xpY2suZGlzcGF0Y2godGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgZXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZC5cbiAgICogQHJldHVybnMge0V2ZW50PEJ1dHRvbjxDb25maWc+LCBOb0FyZ3M+fVxuICAgKi9cbiAgZ2V0IG9uQ2xpY2soKTogRXZlbnQ8QnV0dG9uPENvbmZpZz4sIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLmJ1dHRvbkV2ZW50cy5vbkNsaWNrLmdldEV2ZW50KCk7XG4gIH1cbn1cbiIsImltcG9ydCB7Q29udGFpbmVyQ29uZmlnLCBDb250YWluZXJ9IGZyb20gJy4vY29udGFpbmVyJztcbmltcG9ydCB7TGFiZWwsIExhYmVsQ29uZmlnfSBmcm9tICcuL2xhYmVsJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBDYXN0U3RhcnRlZEV2ZW50LCBDYXN0V2FpdGluZ0ZvckRldmljZUV2ZW50LCBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBPdmVybGF5cyB0aGUgcGxheWVyIGFuZCBkaXNwbGF5cyB0aGUgc3RhdHVzIG9mIGEgQ2FzdCBzZXNzaW9uLlxuICovXG5leHBvcnQgY2xhc3MgQ2FzdFN0YXR1c092ZXJsYXkgZXh0ZW5kcyBDb250YWluZXI8Q29udGFpbmVyQ29uZmlnPiB7XG5cbiAgcHJpdmF0ZSBzdGF0dXNMYWJlbDogTGFiZWw8TGFiZWxDb25maWc+O1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29udGFpbmVyQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5zdGF0dXNMYWJlbCA9IG5ldyBMYWJlbDxMYWJlbENvbmZpZz4oeyBjc3NDbGFzczogJ3VpLWNhc3Qtc3RhdHVzLWxhYmVsJyB9KTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktY2FzdC1zdGF0dXMtb3ZlcmxheScsXG4gICAgICBjb21wb25lbnRzOiBbdGhpcy5zdGF0dXNMYWJlbF0sXG4gICAgICBoaWRkZW46IHRydWUsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5DYXN0V2FpdGluZ0ZvckRldmljZSxcbiAgICAgIChldmVudDogQ2FzdFdhaXRpbmdGb3JEZXZpY2VFdmVudCkgPT4ge1xuICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgLy8gR2V0IGRldmljZSBuYW1lIGFuZCB1cGRhdGUgc3RhdHVzIHRleHQgd2hpbGUgY29ubmVjdGluZ1xuICAgICAgICBsZXQgY2FzdERldmljZU5hbWUgPSBldmVudC5jYXN0UGF5bG9hZC5kZXZpY2VOYW1lO1xuICAgICAgICB0aGlzLnN0YXR1c0xhYmVsLnNldFRleHQoaTE4bi5nZXRMb2NhbGl6ZXIoJ2Nvbm5lY3RpbmdUbycsIHsgY2FzdERldmljZU5hbWUgfSkpO1xuICAgICAgfSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkNhc3RTdGFydGVkLCAoZXZlbnQ6IENhc3RTdGFydGVkRXZlbnQpID0+IHtcbiAgICAgIC8vIFNlc3Npb24gaXMgc3RhcnRlZCBvciByZXN1bWVkXG4gICAgICAvLyBGb3IgY2FzZXMgd2hlbiBhIHNlc3Npb24gaXMgcmVzdW1lZCwgd2UgZG8gbm90IHJlY2VpdmUgdGhlIHByZXZpb3VzIGV2ZW50cyBhbmQgdGhlcmVmb3JlIHNob3cgdGhlIHN0YXR1cyBwYW5lbFxuICAgICAgLy8gaGVyZSB0b29cbiAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgbGV0IGNhc3REZXZpY2VOYW1lID0gZXZlbnQuZGV2aWNlTmFtZTtcbiAgICAgIHRoaXMuc3RhdHVzTGFiZWwuc2V0VGV4dChpMThuLmdldExvY2FsaXplcigncGxheWluZ09uJywgeyBjYXN0RGV2aWNlTmFtZSB9KSk7XG4gICAgfSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkNhc3RTdG9wcGVkLCAoZXZlbnQpID0+IHtcbiAgICAgIC8vIENhc3Qgc2Vzc2lvbiBnb25lLCBoaWRlIHRoZSBzdGF0dXMgcGFuZWxcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0pO1xuICB9XG59IiwiaW1wb3J0IHtUb2dnbGVCdXR0b24sIFRvZ2dsZUJ1dHRvbkNvbmZpZ30gZnJvbSAnLi90b2dnbGVidXR0b24nO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEEgYnV0dG9uIHRoYXQgdG9nZ2xlcyBjYXN0aW5nIHRvIGEgQ2FzdCByZWNlaXZlci5cbiAqL1xuZXhwb3J0IGNsYXNzIENhc3RUb2dnbGVCdXR0b24gZXh0ZW5kcyBUb2dnbGVCdXR0b248VG9nZ2xlQnV0dG9uQ29uZmlnPiB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBUb2dnbGVCdXR0b25Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLWNhc3R0b2dnbGVidXR0b24nLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ2dvb2dsZUNhc3QnKSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBpZiAocGxheWVyLmlzQ2FzdEF2YWlsYWJsZSgpKSB7XG4gICAgICAgIGlmIChwbGF5ZXIuaXNDYXN0aW5nKCkpIHtcbiAgICAgICAgICBwbGF5ZXIuY2FzdFN0b3AoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwbGF5ZXIuY2FzdFZpZGVvKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjb25zb2xlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ0Nhc3QgdW5hdmFpbGFibGUnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbGV0IGNhc3RBdmFpbGFibGVIYW5kZXIgPSAoKSA9PiB7XG4gICAgICBpZiAocGxheWVyLmlzQ2FzdEF2YWlsYWJsZSgpKSB7XG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5DYXN0QXZhaWxhYmxlLCBjYXN0QXZhaWxhYmxlSGFuZGVyKTtcblxuICAgIC8vIFRvZ2dsZSBidXR0b24gJ29uJyBzdGF0ZVxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5DYXN0V2FpdGluZ0ZvckRldmljZSwgKCkgPT4ge1xuICAgICAgdGhpcy5vbigpO1xuICAgIH0pO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5DYXN0U3RhcnRlZCwgKCkgPT4ge1xuICAgICAgLy8gV2hlbiBhIHNlc3Npb24gaXMgcmVzdW1lZCwgdGhlcmUgaXMgbm8gQ2FzdFN0YXJ0IGV2ZW50LCBzbyB3ZSBhbHNvIG5lZWQgdG8gdG9nZ2xlIGhlcmUgZm9yIHN1Y2ggY2FzZXNcbiAgICAgIHRoaXMub24oKTtcbiAgICB9KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQ2FzdFN0b3BwZWQsICgpID0+IHtcbiAgICAgIHRoaXMub2ZmKCk7XG4gICAgfSk7XG5cbiAgICAvLyBTdGFydHVwIGluaXRcbiAgICBjYXN0QXZhaWxhYmxlSGFuZGVyKCk7IC8vIEhpZGUgYnV0dG9uIGlmIENhc3Qgbm90IGF2YWlsYWJsZVxuICAgIGlmIChwbGF5ZXIuaXNDYXN0aW5nKCkpIHtcbiAgICAgIHRoaXMub24oKTtcbiAgICB9XG4gIH1cbn0iLCJpbXBvcnQge1VJQ29udGFpbmVyLCBVSUNvbnRhaW5lckNvbmZpZ30gZnJvbSAnLi91aWNvbnRhaW5lcic7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHtUaW1lb3V0fSBmcm9tICcuLi90aW1lb3V0JztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5cbi8qKlxuICogVGhlIGJhc2UgY29udGFpbmVyIGZvciBDYXN0IHJlY2VpdmVycyB0aGF0IGNvbnRhaW5zIGFsbCBvZiB0aGUgVUkgYW5kIHRha2VzIGNhcmUgdGhhdCB0aGUgVUkgaXMgc2hvd24gb25cbiAqIGNlcnRhaW4gcGxheWJhY2sgZXZlbnRzLlxuICovXG5leHBvcnQgY2xhc3MgQ2FzdFVJQ29udGFpbmVyIGV4dGVuZHMgVUlDb250YWluZXIge1xuXG4gIHByaXZhdGUgY2FzdFVpSGlkZVRpbWVvdXQ6IFRpbWVvdXQ7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBVSUNvbnRhaW5lckNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbGV0IGNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG5cbiAgICAvKlxuICAgICAqIFNob3cgVUkgb24gQ2FzdCBkZXZpY2VzIGF0IGNlcnRhaW4gcGxheWJhY2sgZXZlbnRzXG4gICAgICpcbiAgICAgKiBTaW5jZSBhIENhc3QgcmVjZWl2ZXIgZG9lcyBub3QgaGF2ZSBhIGRpcmVjdCBIQ0ksIHdlIHNob3cgdGhlIFVJIG9uIGNlcnRhaW4gcGxheWJhY2sgZXZlbnRzIHRvIGdpdmUgdGhlIHVzZXJcbiAgICAgKiBhIGNoYW5jZSB0byBzZWUgb24gdGhlIHNjcmVlbiB3aGF0J3MgZ29pbmcgb24sIGUuZy4gb24gcGxheS9wYXVzZSBvciBhIHNlZWsgdGhlIFVJIGlzIHNob3duIGFuZCB0aGUgdXNlciBjYW5cbiAgICAgKiBzZWUgdGhlIGN1cnJlbnQgdGltZSBhbmQgcG9zaXRpb24gb24gdGhlIHNlZWsgYmFyLlxuICAgICAqIFRoZSBVSSBpcyBzaG93biBwZXJtYW5lbnRseSB3aGlsZSBwbGF5YmFjayBpcyBwYXVzZWQsIG90aGVyd2lzZSBoaWRlcyBhdXRvbWF0aWNhbGx5IGFmdGVyIHRoZSBjb25maWd1cmVkXG4gICAgICogaGlkZSBkZWxheSB0aW1lLlxuICAgICAqL1xuXG4gICAgbGV0IGlzVWlTaG93biA9IGZhbHNlO1xuXG4gICAgbGV0IGhpZGVVaSA9ICgpID0+IHtcbiAgICAgIHVpbWFuYWdlci5vbkNvbnRyb2xzSGlkZS5kaXNwYXRjaCh0aGlzKTtcbiAgICAgIGlzVWlTaG93biA9IGZhbHNlO1xuICAgIH07XG5cbiAgICB0aGlzLmNhc3RVaUhpZGVUaW1lb3V0ID0gbmV3IFRpbWVvdXQoY29uZmlnLmhpZGVEZWxheSwgaGlkZVVpKTtcblxuICAgIGxldCBzaG93VWkgPSAoKSA9PiB7XG4gICAgICBpZiAoIWlzVWlTaG93bikge1xuICAgICAgICB1aW1hbmFnZXIub25Db250cm9sc1Nob3cuZGlzcGF0Y2godGhpcyk7XG4gICAgICAgIGlzVWlTaG93biA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGxldCBzaG93VWlQZXJtYW5lbnRseSA9ICgpID0+IHtcbiAgICAgIHNob3dVaSgpO1xuICAgICAgdGhpcy5jYXN0VWlIaWRlVGltZW91dC5jbGVhcigpO1xuICAgIH07XG5cbiAgICBsZXQgc2hvd1VpV2l0aFRpbWVvdXQgPSAoKSA9PiB7XG4gICAgICBzaG93VWkoKTtcbiAgICAgIHRoaXMuY2FzdFVpSGlkZVRpbWVvdXQuc3RhcnQoKTtcbiAgICB9O1xuXG4gICAgbGV0IHNob3dVaUFmdGVyU2VlayA9ICgpID0+IHtcbiAgICAgIGlmIChwbGF5ZXIuaXNQbGF5aW5nKCkpIHtcbiAgICAgICAgc2hvd1VpV2l0aFRpbWVvdXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNob3dVaVBlcm1hbmVudGx5KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5LCBzaG93VWlXaXRoVGltZW91dCk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBhdXNlZCwgc2hvd1VpUGVybWFuZW50bHkpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TZWVrLCBzaG93VWlQZXJtYW5lbnRseSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNlZWtlZCwgc2hvd1VpQWZ0ZXJTZWVrKTtcblxuICAgIHVpbWFuYWdlci5nZXRDb25maWcoKS5ldmVudHMub25VcGRhdGVkLnN1YnNjcmliZShzaG93VWlXaXRoVGltZW91dCk7XG4gIH1cblxuICByZWxlYXNlKCk6IHZvaWQge1xuICAgIHN1cGVyLnJlbGVhc2UoKTtcbiAgICB0aGlzLmNhc3RVaUhpZGVUaW1lb3V0LmNsZWFyKCk7XG4gIH1cbn0iLCJpbXBvcnQge0J1dHRvbiwgQnV0dG9uQ29uZmlnfSBmcm9tICcuL2J1dHRvbic7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIGEge0BsaW5rIENsaWNrT3ZlcmxheX0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2xpY2tPdmVybGF5Q29uZmlnIGV4dGVuZHMgQnV0dG9uQ29uZmlnIHtcbiAgLyoqXG4gICAqIFRoZSB1cmwgdG8gb3BlbiB3aGVuIHRoZSBvdmVybGF5IGlzIGNsaWNrZWQuIFNldCB0byBudWxsIHRvIGRpc2FibGUgdGhlIGNsaWNrIGhhbmRsZXIuXG4gICAqL1xuICB1cmw/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQSBjbGljayBvdmVybGF5IHRoYXQgb3BlbnMgYW4gdXJsIGluIGEgbmV3IHRhYiBpZiBjbGlja2VkLlxuICovXG5leHBvcnQgY2xhc3MgQ2xpY2tPdmVybGF5IGV4dGVuZHMgQnV0dG9uPENsaWNrT3ZlcmxheUNvbmZpZz4ge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQ2xpY2tPdmVybGF5Q29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1jbGlja292ZXJsYXknLFxuICAgICAgcm9sZTogdGhpcy5jb25maWcucm9sZSxcbiAgICB9LCA8Q2xpY2tPdmVybGF5Q29uZmlnPnRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGluaXRpYWxpemUoKTogdm9pZCB7XG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuXG4gICAgdGhpcy5zZXRVcmwoKDxDbGlja092ZXJsYXlDb25maWc+dGhpcy5jb25maWcpLnVybCk7XG4gICAgbGV0IGVsZW1lbnQgPSB0aGlzLmdldERvbUVsZW1lbnQoKTtcbiAgICBlbGVtZW50Lm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgIGlmIChlbGVtZW50LmRhdGEoJ3VybCcpKSB7XG4gICAgICAgIHdpbmRvdy5vcGVuKGVsZW1lbnQuZGF0YSgndXJsJyksICdfYmxhbmsnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBVUkwgdGhhdCBzaG91bGQgYmUgZm9sbG93ZWQgd2hlbiB0aGUgd2F0ZXJtYXJrIGlzIGNsaWNrZWQuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSB3YXRlcm1hcmsgVVJMXG4gICAqL1xuICBnZXRVcmwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5nZXREb21FbGVtZW50KCkuZGF0YSgndXJsJyk7XG4gIH1cblxuICBzZXRVcmwodXJsOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAodXJsID09PSB1bmRlZmluZWQgfHwgdXJsID09IG51bGwpIHtcbiAgICAgIHVybCA9ICcnO1xuICAgIH1cbiAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5kYXRhKCd1cmwnLCB1cmwpO1xuICB9XG59IiwiaW1wb3J0IHtCdXR0b25Db25maWcsIEJ1dHRvbn0gZnJvbSAnLi9idXR0b24nO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7Q29tcG9uZW50LCBDb21wb25lbnRDb25maWd9IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIGZvciB0aGUge0BsaW5rIENsb3NlQnV0dG9ufS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDbG9zZUJ1dHRvbkNvbmZpZyBleHRlbmRzIEJ1dHRvbkNvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHRoYXQgc2hvdWxkIGJlIGNsb3NlZCB3aGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZC5cbiAgICovXG4gIHRhcmdldDogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz47XG59XG5cbi8qKlxuICogQSBidXR0b24gdGhhdCBjbG9zZXMgKGhpZGVzKSBhIGNvbmZpZ3VyZWQgY29tcG9uZW50LlxuICovXG5leHBvcnQgY2xhc3MgQ2xvc2VCdXR0b24gZXh0ZW5kcyBCdXR0b248Q2xvc2VCdXR0b25Db25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IENsb3NlQnV0dG9uQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktY2xvc2VidXR0b24nLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ2Nsb3NlJyksXG4gICAgfSBhcyBDbG9zZUJ1dHRvbkNvbmZpZywgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBjb25maWcudGFyZ2V0LmhpZGUoKTtcbiAgICB9KTtcbiAgfVxufSIsImltcG9ydCB7R3VpZH0gZnJvbSAnLi4vZ3VpZCc7XG5pbXBvcnQge0RPTX0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7RXZlbnREaXNwYXRjaGVyLCBOb0FyZ3MsIEV2ZW50fSBmcm9tICcuLi9ldmVudGRpc3BhdGNoZXInO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuLCBMb2NhbGl6YWJsZVRleHQgfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQmFzZSBjb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgYSBjb21wb25lbnQuXG4gKiBTaG91bGQgYmUgZXh0ZW5kZWQgYnkgY29tcG9uZW50cyB0aGF0IHdhbnQgdG8gYWRkIGFkZGl0aW9uYWwgY29uZmlndXJhdGlvbiBvcHRpb25zLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbXBvbmVudENvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgSFRNTCB0YWcgbmFtZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBEZWZhdWx0OiAnZGl2J1xuICAgKi9cbiAgdGFnPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIEhUTUwgSUQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICogRGVmYXVsdDogYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgd2l0aCBwYXR0ZXJuICd1aS1pZC17Z3VpZH0nLlxuICAgKi9cbiAgaWQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgcHJlZml4IHRvIHByZXBlbmQgYWxsIENTUyBjbGFzc2VzIHdpdGguXG4gICAqL1xuICBjc3NQcmVmaXg/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3NlcyBvZiB0aGUgY29tcG9uZW50LiBUaGlzIGlzIHVzdWFsbHkgdGhlIGNsYXNzIGZyb20gd2hlcmUgdGhlIGNvbXBvbmVudCB0YWtlcyBpdHMgc3R5bGluZy5cbiAgICovXG4gIGNzc0NsYXNzPzogc3RyaW5nOyAvLyAnY2xhc3MnIGlzIGEgcmVzZXJ2ZWQga2V5d29yZCwgc28gd2UgbmVlZCB0byBtYWtlIHRoZSBuYW1lIG1vcmUgY29tcGxpY2F0ZWRcblxuICAvKipcbiAgICogQWRkaXRpb25hbCBDU1MgY2xhc3NlcyBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY3NzQ2xhc3Nlcz86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgaWYgdGhlIGNvbXBvbmVudCBzaG91bGQgYmUgaGlkZGVuIGF0IHN0YXJ0dXAuXG4gICAqIERlZmF1bHQ6IGZhbHNlXG4gICAqL1xuICBoaWRkZW4/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgaWYgdGhlIGNvbXBvbmVudCBpcyBlbmFibGVkIChpbnRlcmFjdGl2ZSkgb3Igbm90LlxuICAgKiBEZWZhdWx0OiBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGNvbXBvbmVudCByb2xlIGZvciBXQ0FHMjAgc3RhbmRhcmRcbiAgICovXG4gIHJvbGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFdDQUcyMCByZXF1aXJlbWVudCBmb3Igc2NyZWVuIHJlYWRlciBuYXZpZ2F0aW9uXG4gICAqL1xuICB0YWJJbmRleD86IG51bWJlcjtcblxuICAvKipcbiAgICogV0NBRzIwIHN0YW5kYXJkIGZvciBkZWZpbmluZyBpbmZvIGFib3V0IHRoZSBjb21wb25lbnQgKHVzdWFsbHkgdGhlIG5hbWUpXG4gICAqL1xuICBhcmlhTGFiZWw/OiBMb2NhbGl6YWJsZVRleHQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcG9uZW50SG92ZXJDaGFuZ2VkRXZlbnRBcmdzIGV4dGVuZHMgTm9BcmdzIHtcbiAgLyoqXG4gICAqIFRydWUgaXMgdGhlIGNvbXBvbmVudCBpcyBob3ZlcmVkLCBlbHNlIGZhbHNlLlxuICAgKi9cbiAgaG92ZXJlZDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBjbGFzcyBvZiB0aGUgVUkgZnJhbWV3b3JrLlxuICogRWFjaCBjb21wb25lbnQgbXVzdCBleHRlbmQgdGhpcyBjbGFzcyBhbmQgb3B0aW9uYWxseSB0aGUgY29uZmlnIGludGVyZmFjZS5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbXBvbmVudDxDb25maWcgZXh0ZW5kcyBDb21wb25lbnRDb25maWc+IHtcblxuICAvKipcbiAgICogVGhlIGNsYXNzbmFtZSB0aGF0IGlzIGF0dGFjaGVkIHRvIHRoZSBlbGVtZW50IHdoZW4gaXQgaXMgaW4gdGhlIGhpZGRlbiBzdGF0ZS5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENMQVNTX0hJRERFTiA9ICdoaWRkZW4nO1xuXG4gIC8qKlxuICAgKiBUaGUgY2xhc3NuYW1lIHRoYXQgaXMgYXR0YWNoZWQgdG8gdGhlIGVsZW1lbnQgd2hlbiBpdCBpcyBpbiB0aGUgZGlzYWJsZWQgc3RhdGUuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDTEFTU19ESVNBQkxFRCA9ICdkaXNhYmxlZCc7XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gb2JqZWN0IG9mIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgcHJvdGVjdGVkIGNvbmZpZzogQ29uZmlnO1xuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50J3MgRE9NIGVsZW1lbnQuXG4gICAqL1xuICBwcml2YXRlIGVsZW1lbnQ6IERPTTtcblxuICAvKipcbiAgICogRmxhZyB0aGF0IGtlZXBzIHRyYWNrIG9mIHRoZSBoaWRkZW4gc3RhdGUuXG4gICAqL1xuICBwcml2YXRlIGhpZGRlbjogYm9vbGVhbjtcblxuICAvKipcbiAgICogRmxhdCB0aGF0IGtlZXBzIHRyYWNrIG9mIHRoZSBkaXNhYmxlZCBzdGF0ZS5cbiAgICovXG4gIHByaXZhdGUgZGlzYWJsZWQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEZsYWcgdGhhdCBrZWVwcyB0cmFjayBvZiB0aGUgaG92ZXIgc3RhdGUuXG4gICAqL1xuICBwcml2YXRlIGhvdmVyZWQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIGV2ZW50cyB0aGF0IHRoaXMgY29tcG9uZW50IG9mZmVycy4gVGhlc2UgZXZlbnRzIHNob3VsZCBhbHdheXMgYmUgcHJpdmF0ZSBhbmQgb25seSBkaXJlY3RseVxuICAgKiBhY2Nlc3NlZCBmcm9tIHdpdGhpbiB0aGUgaW1wbGVtZW50aW5nIGNvbXBvbmVudC5cbiAgICpcbiAgICogQmVjYXVzZSBUeXBlU2NyaXB0IGRvZXMgbm90IHN1cHBvcnQgcHJpdmF0ZSBwcm9wZXJ0aWVzIHdpdGggdGhlIHNhbWUgbmFtZSBvbiBkaWZmZXJlbnQgY2xhc3MgaGllcmFyY2h5IGxldmVsc1xuICAgKiAoaS5lLiBzdXBlcmNsYXNzIGFuZCBzdWJjbGFzcyBjYW5ub3QgY29udGFpbiBhIHByaXZhdGUgcHJvcGVydHkgd2l0aCB0aGUgc2FtZSBuYW1lKSwgdGhlIGRlZmF1bHQgbmFtaW5nXG4gICAqIGNvbnZlbnRpb24gZm9yIHRoZSBldmVudCBsaXN0IG9mIGEgY29tcG9uZW50IHRoYXQgc2hvdWxkIGJlIGZvbGxvd2VkIGJ5IHN1YmNsYXNzZXMgaXMgdGhlIGNvbmNhdGVuYXRpb24gb2YgdGhlXG4gICAqIGNhbWVsLWNhc2VkIGNsYXNzIG5hbWUgKyAnRXZlbnRzJyAoZS5nLiBTdWJDbGFzcyBleHRlbmRzIENvbXBvbmVudCA9PiBzdWJDbGFzc0V2ZW50cykuXG4gICAqIFNlZSB7QGxpbmsgI2NvbXBvbmVudEV2ZW50c30gZm9yIGFuIGV4YW1wbGUuXG4gICAqXG4gICAqIEV2ZW50IHByb3BlcnRpZXMgc2hvdWxkIGJlIG5hbWVkIGluIGNhbWVsIGNhc2Ugd2l0aCBhbiAnb24nIHByZWZpeCBhbmQgaW4gdGhlIHByZXNlbnQgdGVuc2UuIEFzeW5jIGV2ZW50cyBtYXlcbiAgICogaGF2ZSBhIHN0YXJ0IGV2ZW50ICh3aGVuIHRoZSBvcGVyYXRpb24gc3RhcnRzKSBpbiB0aGUgcHJlc2VudCB0ZW5zZSwgYW5kIG11c3QgaGF2ZSBhbiBlbmQgZXZlbnQgKHdoZW4gdGhlXG4gICAqIG9wZXJhdGlvbiBlbmRzKSBpbiB0aGUgcGFzdCB0ZW5zZSAob3IgcHJlc2VudCB0ZW5zZSBpbiBzcGVjaWFsIGNhc2VzIChlLmcuIG9uU3RhcnQvb25TdGFydGVkIG9yIG9uUGxheS9vblBsYXlpbmcpLlxuICAgKiBTZWUge0BsaW5rICNjb21wb25lbnRFdmVudHMjb25TaG93fSBmb3IgYW4gZXhhbXBsZS5cbiAgICpcbiAgICogRWFjaCBldmVudCBzaG91bGQgYmUgYWNjb21wYW5pZWQgd2l0aCBhIHByb3RlY3RlZCBtZXRob2QgbmFtZWQgYnkgdGhlIGNvbnZlbnRpb24gZXZlbnROYW1lICsgJ0V2ZW50J1xuICAgKiAoZS5nLiBvblN0YXJ0RXZlbnQpLCB0aGF0IGFjdHVhbGx5IHRyaWdnZXJzIHRoZSBldmVudCBieSBjYWxsaW5nIHtAbGluayBFdmVudERpc3BhdGNoZXIjZGlzcGF0Y2ggZGlzcGF0Y2h9IGFuZFxuICAgKiBwYXNzaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBjb21wb25lbnQgYXMgZmlyc3QgcGFyYW1ldGVyLiBDb21wb25lbnRzIHNob3VsZCBhbHdheXMgdHJpZ2dlciB0aGVpciBldmVudHMgd2l0aCB0aGVzZVxuICAgKiBtZXRob2RzLiBJbXBsZW1lbnRpbmcgdGhpcyBwYXR0ZXJuIGdpdmVzIHN1YmNsYXNzZXMgbWVhbnMgdG8gZGlyZWN0bHkgbGlzdGVuIHRvIHRoZSBldmVudHMgYnkgb3ZlcnJpZGluZyB0aGVcbiAgICogbWV0aG9kIChhbmQgc2F2aW5nIHRoZSBvdmVyaGVhZCBvZiBwYXNzaW5nIGEgaGFuZGxlciB0byB0aGUgZXZlbnQgZGlzcGF0Y2hlcikgYW5kIG1vcmUgaW1wb3J0YW50bHkgdG8gdHJpZ2dlclxuICAgKiB0aGVzZSBldmVudHMgd2l0aG91dCBoYXZpbmcgYWNjZXNzIHRvIHRoZSBwcml2YXRlIGV2ZW50IGxpc3QuXG4gICAqIFNlZSB7QGxpbmsgI29uU2hvd30gZm9yIGFuIGV4YW1wbGUuXG4gICAqXG4gICAqIFRvIHByb3ZpZGUgZXh0ZXJuYWwgY29kZSB0aGUgcG9zc2liaWxpdHkgdG8gbGlzdGVuIHRvIHRoaXMgY29tcG9uZW50J3MgZXZlbnRzIChzdWJzY3JpYmUsIHVuc3Vic2NyaWJlLCBldGMuKSxcbiAgICogZWFjaCBldmVudCBzaG91bGQgYWxzbyBiZSBhY2NvbXBhbmllZCBieSBhIHB1YmxpYyBnZXR0ZXIgZnVuY3Rpb24gd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudCdzIHByb3BlcnR5LFxuICAgKiB0aGF0IHJldHVybnMgdGhlIHtAbGluayBFdmVudH0gb2J0YWluZWQgZnJvbSB0aGUgZXZlbnQgZGlzcGF0Y2hlciBieSBjYWxsaW5nIHtAbGluayBFdmVudERpc3BhdGNoZXIjZ2V0RXZlbnR9LlxuICAgKiBTZWUge0BsaW5rICNvblNob3d9IGZvciBhbiBleGFtcGxlLlxuICAgKlxuICAgKiBGdWxsIGV4YW1wbGUgZm9yIGFuIGV2ZW50IHJlcHJlc2VudGluZyBhbiBleGFtcGxlIGFjdGlvbiBpbiBhIGV4YW1wbGUgY29tcG9uZW50OlxuICAgKlxuICAgKiA8Y29kZT5cbiAgICogLy8gRGVmaW5lIGFuIGV4YW1wbGUgY29tcG9uZW50IGNsYXNzIHdpdGggYW4gZXhhbXBsZSBldmVudFxuICAgKiBjbGFzcyBFeGFtcGxlQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4ge1xuICAgICAqXG4gICAgICogICAgIHByaXZhdGUgZXhhbXBsZUNvbXBvbmVudEV2ZW50cyA9IHtcbiAgICAgKiAgICAgICAgIG9uRXhhbXBsZUFjdGlvbjogbmV3IEV2ZW50RGlzcGF0Y2hlcjxFeGFtcGxlQ29tcG9uZW50LCBOb0FyZ3M+KClcbiAgICAgKiAgICAgfVxuICAgICAqXG4gICAgICogICAgIC8vIGNvbnN0cnVjdG9yIGFuZCBvdGhlciBzdHVmZi4uLlxuICAgICAqXG4gICAgICogICAgIHByb3RlY3RlZCBvbkV4YW1wbGVBY3Rpb25FdmVudCgpIHtcbiAgICAgKiAgICAgICAgdGhpcy5leGFtcGxlQ29tcG9uZW50RXZlbnRzLm9uRXhhbXBsZUFjdGlvbi5kaXNwYXRjaCh0aGlzKTtcbiAgICAgKiAgICB9XG4gICAgICpcbiAgICAgKiAgICBnZXQgb25FeGFtcGxlQWN0aW9uKCk6IEV2ZW50PEV4YW1wbGVDb21wb25lbnQsIE5vQXJncz4ge1xuICAgICAqICAgICAgICByZXR1cm4gdGhpcy5leGFtcGxlQ29tcG9uZW50RXZlbnRzLm9uRXhhbXBsZUFjdGlvbi5nZXRFdmVudCgpO1xuICAgICAqICAgIH1cbiAgICAgKiB9XG4gICAqXG4gICAqIC8vIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGUgY29tcG9uZW50IHNvbWV3aGVyZVxuICAgKiB2YXIgZXhhbXBsZUNvbXBvbmVudEluc3RhbmNlID0gbmV3IEV4YW1wbGVDb21wb25lbnQoKTtcbiAgICpcbiAgICogLy8gU3Vic2NyaWJlIHRvIHRoZSBleGFtcGxlIGV2ZW50IG9uIHRoZSBjb21wb25lbnRcbiAgICogZXhhbXBsZUNvbXBvbmVudEluc3RhbmNlLm9uRXhhbXBsZUFjdGlvbi5zdWJzY3JpYmUoZnVuY3Rpb24gKHNlbmRlcjogRXhhbXBsZUNvbXBvbmVudCkge1xuICAgICAqICAgICBjb25zb2xlLmxvZygnb25FeGFtcGxlQWN0aW9uIG9mICcgKyBzZW5kZXIgKyAnIGhhcyBmaXJlZCEnKTtcbiAgICAgKiB9KTtcbiAgICogPC9jb2RlPlxuICAgKi9cbiAgcHJpdmF0ZSBjb21wb25lbnRFdmVudHMgPSB7XG4gICAgb25TaG93OiBuZXcgRXZlbnREaXNwYXRjaGVyPENvbXBvbmVudDxDb25maWc+LCBOb0FyZ3M+KCksXG4gICAgb25IaWRlOiBuZXcgRXZlbnREaXNwYXRjaGVyPENvbXBvbmVudDxDb25maWc+LCBOb0FyZ3M+KCksXG4gICAgb25Ib3ZlckNoYW5nZWQ6IG5ldyBFdmVudERpc3BhdGNoZXI8Q29tcG9uZW50PENvbmZpZz4sIENvbXBvbmVudEhvdmVyQ2hhbmdlZEV2ZW50QXJncz4oKSxcbiAgICBvbkVuYWJsZWQ6IG5ldyBFdmVudERpc3BhdGNoZXI8Q29tcG9uZW50PENvbmZpZz4sIE5vQXJncz4oKSxcbiAgICBvbkRpc2FibGVkOiBuZXcgRXZlbnREaXNwYXRjaGVyPENvbXBvbmVudDxDb25maWc+LCBOb0FyZ3M+KCksXG4gIH07XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBjb21wb25lbnQgd2l0aCBhbiBvcHRpb25hbGx5IHN1cHBsaWVkIGNvbmZpZy4gQWxsIHN1YmNsYXNzZXMgbXVzdCBjYWxsIHRoZSBjb25zdHJ1Y3RvciBvZiB0aGVpclxuICAgKiBzdXBlcmNsYXNzIGFuZCB0aGVuIG1lcmdlIHRoZWlyIGNvbmZpZ3VyYXRpb24gaW50byB0aGUgY29tcG9uZW50J3MgY29uZmlndXJhdGlvbi5cbiAgICogQHBhcmFtIGNvbmZpZyB0aGUgY29uZmlndXJhdGlvbiBmb3IgdGhlIGNvbXBvbmVudFxuICAgKi9cbiAgY29uc3RydWN0b3IoY29uZmlnOiBDb21wb25lbnRDb25maWcgPSB7fSkge1xuICAgIC8vIENyZWF0ZSB0aGUgY29uZmlndXJhdGlvbiBmb3IgdGhpcyBjb21wb25lbnRcbiAgICB0aGlzLmNvbmZpZyA9IDxDb25maWc+dGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIHRhZzogJ2RpdicsXG4gICAgICBpZDogJ3t7UFJFRklYfX0taWQtJyArIEd1aWQubmV4dCgpLFxuICAgICAgY3NzUHJlZml4OiAne3tQUkVGSVh9fScsXG4gICAgICBjc3NDbGFzczogJ3VpLWNvbXBvbmVudCcsXG4gICAgICBjc3NDbGFzc2VzOiBbXSxcbiAgICAgIGhpZGRlbjogZmFsc2UsXG4gICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgfSwge30pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBjb21wb25lbnQsIGUuZy4gYnkgYXBwbHlpbmcgY29uZmlnIHNldHRpbmdzLlxuICAgKiBUaGlzIG1ldGhvZCBtdXN0IG5vdCBiZSBjYWxsZWQgZnJvbSBvdXRzaWRlIHRoZSBVSSBmcmFtZXdvcmsuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGF1dG9tYXRpY2FsbHkgY2FsbGVkIGJ5IHRoZSB7QGxpbmsgVUlJbnN0YW5jZU1hbmFnZXJ9LiBJZiB0aGUgY29tcG9uZW50IGlzIGFuIGlubmVyIGNvbXBvbmVudCBvZlxuICAgKiBzb21lIGNvbXBvbmVudCwgYW5kIHRodXMgZW5jYXBzdWxhdGVkIGFiZCBtYW5hZ2VkIGludGVybmFsbHkgYW5kIG5ldmVyIGRpcmVjdGx5IGV4cG9zZWQgdG8gdGhlIFVJTWFuYWdlcixcbiAgICogdGhpcyBtZXRob2QgbXVzdCBiZSBjYWxsZWQgZnJvbSB0aGUgbWFuYWdpbmcgY29tcG9uZW50J3Mge0BsaW5rICNpbml0aWFsaXplfSBtZXRob2QuXG4gICAqL1xuICBpbml0aWFsaXplKCk6IHZvaWQge1xuICAgIHRoaXMuaGlkZGVuID0gdGhpcy5jb25maWcuaGlkZGVuO1xuICAgIHRoaXMuZGlzYWJsZWQgPSB0aGlzLmNvbmZpZy5kaXNhYmxlZDtcblxuICAgIC8vIEhpZGUgdGhlIGNvbXBvbmVudCBhdCBpbml0aWFsaXphdGlvbiBpZiBpdCBpcyBjb25maWd1cmVkIHRvIGJlIGhpZGRlblxuICAgIGlmICh0aGlzLmlzSGlkZGVuKCkpIHtcbiAgICAgIHRoaXMuaGlkZGVuID0gZmFsc2U7IC8vIFNldCBmbGFnIHRvIGZhbHNlIGZvciB0aGUgZm9sbG93aW5nIGhpZGUoKSBjYWxsIHRvIHdvcmsgKGhpZGUoKSBjaGVja3MgdGhlIGZsYWcpXG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG5cbiAgICAvLyBEaXNhYmxlIHRoZSBjb21wb25lbnQgYXQgaW5pdGlhbGl6YXRpb24gaWYgaXQgaXMgY29uZmlndXJlZCB0byBiZSBkaXNhYmxlZFxuICAgIGlmICh0aGlzLmlzRGlzYWJsZWQoKSkge1xuICAgICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlOyAvLyBTZXQgZmxhZyB0byBmYWxzZSBmb3IgdGhlIGZvbGxvd2luZyBkaXNhYmxlKCkgY2FsbCB0byB3b3JrIChkaXNhYmxlKCkgY2hlY2tzIHRoZSBmbGFnKVxuICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyZXMgdGhlIGNvbXBvbmVudCBmb3IgdGhlIHN1cHBsaWVkIFBsYXllciBhbmQgVUlJbnN0YW5jZU1hbmFnZXIuIFRoaXMgaXMgdGhlIHBsYWNlIHdoZXJlIGFsbCB0aGUgbWFnaWNcbiAgICogaGFwcGVucywgd2hlcmUgY29tcG9uZW50cyB0eXBpY2FsbHkgc3Vic2NyaWJlIGFuZCByZWFjdCB0byBldmVudHMgKG9uIHRoZWlyIERPTSBlbGVtZW50LCB0aGUgUGxheWVyLCBvciB0aGVcbiAgICogVUlJbnN0YW5jZU1hbmFnZXIpLCBhbmQgYmFzaWNhbGx5IGV2ZXJ5dGhpbmcgdGhhdCBtYWtlcyB0aGVtIGludGVyYWN0aXZlLlxuICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgb25seSBvbmNlLCB3aGVuIHRoZSBVSU1hbmFnZXIgaW5pdGlhbGl6ZXMgdGhlIFVJLlxuICAgKlxuICAgKiBTdWJjbGFzc2VzIHVzdWFsbHkgb3ZlcndyaXRlIHRoaXMgbWV0aG9kIHRvIGFkZCB0aGVpciBvd24gZnVuY3Rpb25hbGl0eS5cbiAgICpcbiAgICogQHBhcmFtIHBsYXllciB0aGUgcGxheWVyIHdoaWNoIHRoaXMgY29tcG9uZW50IGNvbnRyb2xzXG4gICAqIEBwYXJhbSB1aW1hbmFnZXIgdGhlIFVJSW5zdGFuY2VNYW5hZ2VyIHRoYXQgbWFuYWdlcyB0aGlzIGNvbXBvbmVudFxuICAgKi9cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgdGhpcy5vblNob3cuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHVpbWFuYWdlci5vbkNvbXBvbmVudFNob3cuZGlzcGF0Y2godGhpcyk7XG4gICAgfSk7XG4gICAgdGhpcy5vbkhpZGUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHVpbWFuYWdlci5vbkNvbXBvbmVudEhpZGUuZGlzcGF0Y2godGhpcyk7XG4gICAgfSk7XG5cbiAgICAvLyBUcmFjayB0aGUgaG92ZXJlZCBzdGF0ZSBvZiB0aGUgZWxlbWVudFxuICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLm9uKCdtb3VzZWVudGVyJywgKCkgPT4ge1xuICAgICAgdGhpcy5vbkhvdmVyQ2hhbmdlZEV2ZW50KHRydWUpO1xuICAgIH0pO1xuICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLm9uKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xuICAgICAgdGhpcy5vbkhvdmVyQ2hhbmdlZEV2ZW50KGZhbHNlKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWxlYXNlcyBhbGwgcmVzb3VyY2VzIGFuZCBkZXBlbmRlbmNpZXMgdGhhdCB0aGUgY29tcG9uZW50IGhvbGRzLiBQbGF5ZXIsIERPTSwgYW5kIFVJTWFuYWdlciBldmVudHMgYXJlXG4gICAqIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBkdXJpbmcgcmVsZWFzZSBhbmQgZG8gbm90IGV4cGxpY2l0bHkgbmVlZCB0byBiZSByZW1vdmVkIGhlcmUuXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBieSB0aGUgVUlNYW5hZ2VyIHdoZW4gaXQgcmVsZWFzZXMgdGhlIFVJLlxuICAgKlxuICAgKiBTdWJjbGFzc2VzIHRoYXQgbmVlZCB0byByZWxlYXNlIHJlc291cmNlcyBzaG91bGQgb3ZlcnJpZGUgdGhpcyBtZXRob2QgYW5kIGNhbGwgc3VwZXIucmVsZWFzZSgpLlxuICAgKi9cbiAgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICAvLyBOb3RoaW5nIHRvIGRvIGhlcmUsIG92ZXJyaWRlIHdoZXJlIG5lY2Vzc2FyeVxuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIHRoZSBET00gZWxlbWVudCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqXG4gICAqIFN1YmNsYXNzZXMgdXN1YWxseSBvdmVyd3JpdGUgdGhpcyBtZXRob2QgdG8gZXh0ZW5kIG9yIHJlcGxhY2UgdGhlIERPTSBlbGVtZW50IHdpdGggdGhlaXIgb3duIGRlc2lnbi5cbiAgICovXG4gIHByb3RlY3RlZCB0b0RvbUVsZW1lbnQoKTogRE9NIHtcbiAgICBsZXQgZWxlbWVudCA9IG5ldyBET00odGhpcy5jb25maWcudGFnLCB7XG4gICAgICAnaWQnOiB0aGlzLmNvbmZpZy5pZCxcbiAgICAgICdjbGFzcyc6IHRoaXMuZ2V0Q3NzQ2xhc3NlcygpLFxuICAgICAgJ3JvbGUnOiB0aGlzLmNvbmZpZy5yb2xlLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgRE9NIGVsZW1lbnQgb2YgdGhpcyBjb21wb25lbnQuIENyZWF0ZXMgdGhlIERPTSBlbGVtZW50IGlmIGl0IGRvZXMgbm90IHlldCBleGlzdC5cbiAgICpcbiAgICogU2hvdWxkIG5vdCBiZSBvdmVyd3JpdHRlbiBieSBzdWJjbGFzc2VzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7RE9NfVxuICAgKi9cbiAgZ2V0RG9tRWxlbWVudCgpOiBET00ge1xuICAgIGlmICghdGhpcy5lbGVtZW50KSB7XG4gICAgICB0aGlzLmVsZW1lbnQgPSB0aGlzLnRvRG9tRWxlbWVudCgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmVsZW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgY29tcG9uZW50IGhhcyBhIERPTSBlbGVtZW50LlxuICAgKi9cbiAgaGFzRG9tRWxlbWVudCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLmVsZW1lbnQpO1xuICB9XG5cbiAgc2V0QXJpYUxhYmVsKGxhYmVsOiBMb2NhbGl6YWJsZVRleHQpOiB2b2lkIHtcbiAgICB0aGlzLnNldEFyaWFBdHRyKCdsYWJlbCcsIGkxOG4ucGVyZm9ybUxvY2FsaXphdGlvbihsYWJlbCkpO1xuICB9XG5cbiAgc2V0QXJpYUF0dHIobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5nZXREb21FbGVtZW50KCkuYXR0cihgYXJpYS0ke25hbWV9YCwgdmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1lcmdlcyBhIGNvbmZpZ3VyYXRpb24gd2l0aCBhIGRlZmF1bHQgY29uZmlndXJhdGlvbiBhbmQgYSBiYXNlIGNvbmZpZ3VyYXRpb24gZnJvbSB0aGUgc3VwZXJjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIGNvbmZpZyB0aGUgY29uZmlndXJhdGlvbiBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudHMsIGFzIHVzdWFsbHkgcGFzc2VkIHRvIHRoZSBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gZGVmYXVsdHMgYSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gZm9yIHNldHRpbmdzIHRoYXQgYXJlIG5vdCBwYXNzZWQgd2l0aCB0aGUgY29uZmlndXJhdGlvblxuICAgKiBAcGFyYW0gYmFzZSBjb25maWd1cmF0aW9uIGluaGVyaXRlZCBmcm9tIGEgc3VwZXJjbGFzc1xuICAgKiBAcmV0dXJucyB7Q29uZmlnfVxuICAgKi9cbiAgcHJvdGVjdGVkIG1lcmdlQ29uZmlnPENvbmZpZz4oY29uZmlnOiBDb25maWcsIGRlZmF1bHRzOiBDb25maWcsIGJhc2U6IENvbmZpZyk6IENvbmZpZyB7XG4gICAgLy8gRXh0ZW5kIGRlZmF1bHQgY29uZmlnIHdpdGggc3VwcGxpZWQgY29uZmlnXG4gICAgbGV0IG1lcmdlZCA9IE9iamVjdC5hc3NpZ24oe30sIGJhc2UsIGRlZmF1bHRzLCBjb25maWcpO1xuXG4gICAgLy8gUmV0dXJuIHRoZSBleHRlbmRlZCBjb25maWdcbiAgICByZXR1cm4gbWVyZ2VkO1xuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBtZXRob2QgdGhhdCByZXR1cm5zIGEgc3RyaW5nIG9mIGFsbCBDU1MgY2xhc3NlcyBvZiB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgcHJvdGVjdGVkIGdldENzc0NsYXNzZXMoKTogc3RyaW5nIHtcbiAgICAvLyBNZXJnZSBhbGwgQ1NTIGNsYXNzZXMgaW50byBzaW5nbGUgYXJyYXlcbiAgICBsZXQgZmxhdHRlbmVkQXJyYXkgPSBbdGhpcy5jb25maWcuY3NzQ2xhc3NdLmNvbmNhdCh0aGlzLmNvbmZpZy5jc3NDbGFzc2VzKTtcbiAgICAvLyBQcmVmaXggY2xhc3Nlc1xuICAgIGZsYXR0ZW5lZEFycmF5ID0gZmxhdHRlbmVkQXJyYXkubWFwKChjc3MpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLnByZWZpeENzcyhjc3MpO1xuICAgIH0pO1xuICAgIC8vIEpvaW4gYXJyYXkgdmFsdWVzIGludG8gYSBzdHJpbmdcbiAgICBsZXQgZmxhdHRlbmVkU3RyaW5nID0gZmxhdHRlbmVkQXJyYXkuam9pbignICcpO1xuICAgIC8vIFJldHVybiB0cmltbWVkIHN0cmluZyB0byBwcmV2ZW50IHdoaXRlc3BhY2UgYXQgdGhlIGVuZCBmcm9tIHRoZSBqb2luIG9wZXJhdGlvblxuICAgIHJldHVybiBmbGF0dGVuZWRTdHJpbmcudHJpbSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHByZWZpeENzcyhjc3NDbGFzc09ySWQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLmNzc1ByZWZpeCArICctJyArIGNzc0NsYXNzT3JJZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBAcmV0dXJucyB7Q29uZmlnfVxuICAgKi9cbiAgcHVibGljIGdldENvbmZpZygpOiBDb25maWcge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZztcbiAgfVxuXG4gIC8qKlxuICAgKiBIaWRlcyB0aGUgY29tcG9uZW50IGlmIHNob3duLlxuICAgKiBUaGlzIG1ldGhvZCBiYXNpY2FsbHkgdHJhbnNmZXJzIHRoZSBjb21wb25lbnQgaW50byB0aGUgaGlkZGVuIHN0YXRlLiBBY3R1YWwgaGlkaW5nIGlzIGRvbmUgdmlhIENTUy5cbiAgICovXG4gIGhpZGUoKSB7XG4gICAgaWYgKCF0aGlzLmhpZGRlbikge1xuICAgICAgdGhpcy5oaWRkZW4gPSB0cnVlO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoQ29tcG9uZW50LkNMQVNTX0hJRERFTikpO1xuICAgICAgdGhpcy5vbkhpZGVFdmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93cyB0aGUgY29tcG9uZW50IGlmIGhpZGRlbi5cbiAgICovXG4gIHNob3coKSB7XG4gICAgaWYgKHRoaXMuaGlkZGVuKSB7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeENzcyhDb21wb25lbnQuQ0xBU1NfSElEREVOKSk7XG4gICAgICB0aGlzLmhpZGRlbiA9IGZhbHNlO1xuICAgICAgdGhpcy5vblNob3dFdmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBjb21wb25lbnQgaXMgaGlkZGVuLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgY29tcG9uZW50IGlzIGhpZGRlbiwgZWxzZSBmYWxzZVxuICAgKi9cbiAgaXNIaWRkZW4oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaGlkZGVuO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIGNvbXBvbmVudCBpcyBzaG93bi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGNvbXBvbmVudCBpcyB2aXNpYmxlLCBlbHNlIGZhbHNlXG4gICAqL1xuICBpc1Nob3duKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5pc0hpZGRlbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIGhpZGRlbiBzdGF0ZSBieSBoaWRpbmcgdGhlIGNvbXBvbmVudCBpZiBpdCBpcyBzaG93biwgb3Igc2hvd2luZyBpdCBpZiBoaWRkZW4uXG4gICAqL1xuICB0b2dnbGVIaWRkZW4oKSB7XG4gICAgaWYgKHRoaXMuaXNIaWRkZW4oKSkge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNhYmxlcyB0aGUgY29tcG9uZW50LlxuICAgKiBUaGlzIG1ldGhvZCBiYXNpY2FsbHkgdHJhbnNmZXJzIHRoZSBjb21wb25lbnQgaW50byB0aGUgZGlzYWJsZWQgc3RhdGUuIEFjdHVhbCBkaXNhYmxpbmcgaXMgZG9uZSB2aWEgQ1NTIG9yIGNoaWxkXG4gICAqIGNvbXBvbmVudHMuIChlLmcuIEJ1dHRvbiBuZWVkcyB0byB1bnN1YnNjcmliZSBjbGljayBsaXN0ZW5lcnMpXG4gICAqL1xuICBkaXNhYmxlKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5kaXNhYmxlZCA9IHRydWU7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hZGRDbGFzcyh0aGlzLnByZWZpeENzcyhDb21wb25lbnQuQ0xBU1NfRElTQUJMRUQpKTtcbiAgICAgIHRoaXMub25EaXNhYmxlZEV2ZW50KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgdGhlIGNvbXBvbmVudC5cbiAgICogVGhpcyBtZXRob2QgYmFzaWNhbGx5IHRyYW5zZmVycyB0aGUgY29tcG9uZW50IGludG8gdGhlIGVuYWJsZWQgc3RhdGUuIEFjdHVhbCBlbmFibGluZyBpcyBkb25lIHZpYSBDU1Mgb3IgY2hpbGRcbiAgICogY29tcG9uZW50cy4gKGUuZy4gQnV0dG9uIG5lZWRzIHRvIHN1YnNjcmliZSBjbGljayBsaXN0ZW5lcnMpXG4gICAqL1xuICBlbmFibGUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4Q3NzKENvbXBvbmVudC5DTEFTU19ESVNBQkxFRCkpO1xuICAgICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5vbkVuYWJsZWRFdmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQsIGVsc2UgZmFsc2VcbiAgICovXG4gIGlzRGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZGlzYWJsZWQ7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgY29tcG9uZW50IGlzIGVuYWJsZWQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBjb21wb25lbnQgaXMgZW5hYmxlZCwgZWxzZSBmYWxzZVxuICAgKi9cbiAgaXNFbmFibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5pc0Rpc2FibGVkKCk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgY29tcG9uZW50IGlzIGN1cnJlbnRseSBob3ZlcmVkLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgY29tcG9uZW50IGlzIGhvdmVyZWQsIGVsc2UgZmFsc2VcbiAgICovXG4gIGlzSG92ZXJlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5ob3ZlcmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHRoZSBvblNob3cgZXZlbnQuXG4gICAqIFNlZSB0aGUgZGV0YWlsZWQgZXhwbGFuYXRpb24gb24gZXZlbnQgYXJjaGl0ZWN0dXJlIG9uIHRoZSB7QGxpbmsgI2NvbXBvbmVudEV2ZW50cyBldmVudHMgbGlzdH0uXG4gICAqL1xuICBwcm90ZWN0ZWQgb25TaG93RXZlbnQoKTogdm9pZCB7XG4gICAgdGhpcy5jb21wb25lbnRFdmVudHMub25TaG93LmRpc3BhdGNoKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHRoZSBvbkhpZGUgZXZlbnQuXG4gICAqIFNlZSB0aGUgZGV0YWlsZWQgZXhwbGFuYXRpb24gb24gZXZlbnQgYXJjaGl0ZWN0dXJlIG9uIHRoZSB7QGxpbmsgI2NvbXBvbmVudEV2ZW50cyBldmVudHMgbGlzdH0uXG4gICAqL1xuICBwcm90ZWN0ZWQgb25IaWRlRXZlbnQoKTogdm9pZCB7XG4gICAgdGhpcy5jb21wb25lbnRFdmVudHMub25IaWRlLmRpc3BhdGNoKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHRoZSBvbkVuYWJsZWQgZXZlbnQuXG4gICAqIFNlZSB0aGUgZGV0YWlsZWQgZXhwbGFuYXRpb24gb24gZXZlbnQgYXJjaGl0ZWN0dXJlIG9uIHRoZSB7QGxpbmsgI2NvbXBvbmVudEV2ZW50cyBldmVudHMgbGlzdH0uXG4gICAqL1xuICBwcm90ZWN0ZWQgb25FbmFibGVkRXZlbnQoKTogdm9pZCB7XG4gICAgdGhpcy5jb21wb25lbnRFdmVudHMub25FbmFibGVkLmRpc3BhdGNoKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHRoZSBvbkRpc2FibGVkIGV2ZW50LlxuICAgKiBTZWUgdGhlIGRldGFpbGVkIGV4cGxhbmF0aW9uIG9uIGV2ZW50IGFyY2hpdGVjdHVyZSBvbiB0aGUge0BsaW5rICNjb21wb25lbnRFdmVudHMgZXZlbnRzIGxpc3R9LlxuICAgKi9cbiAgcHJvdGVjdGVkIG9uRGlzYWJsZWRFdmVudCgpOiB2b2lkIHtcbiAgICB0aGlzLmNvbXBvbmVudEV2ZW50cy5vbkRpc2FibGVkLmRpc3BhdGNoKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHRoZSBvbkhvdmVyQ2hhbmdlZCBldmVudC5cbiAgICogU2VlIHRoZSBkZXRhaWxlZCBleHBsYW5hdGlvbiBvbiBldmVudCBhcmNoaXRlY3R1cmUgb24gdGhlIHtAbGluayAjY29tcG9uZW50RXZlbnRzIGV2ZW50cyBsaXN0fS5cbiAgICovXG4gIHByb3RlY3RlZCBvbkhvdmVyQ2hhbmdlZEV2ZW50KGhvdmVyZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLmhvdmVyZWQgPSBob3ZlcmVkO1xuICAgIHRoaXMuY29tcG9uZW50RXZlbnRzLm9uSG92ZXJDaGFuZ2VkLmRpc3BhdGNoKHRoaXMsIHsgaG92ZXJlZDogaG92ZXJlZCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBzaG93aW5nLlxuICAgKiBTZWUgdGhlIGRldGFpbGVkIGV4cGxhbmF0aW9uIG9uIGV2ZW50IGFyY2hpdGVjdHVyZSBvbiB0aGUge0BsaW5rICNjb21wb25lbnRFdmVudHMgZXZlbnRzIGxpc3R9LlxuICAgKiBAcmV0dXJucyB7RXZlbnQ8Q29tcG9uZW50PENvbmZpZz4sIE5vQXJncz59XG4gICAqL1xuICBnZXQgb25TaG93KCk6IEV2ZW50PENvbXBvbmVudDxDb25maWc+LCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnRFdmVudHMub25TaG93LmdldEV2ZW50KCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgZXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgaGlkaW5nLlxuICAgKiBTZWUgdGhlIGRldGFpbGVkIGV4cGxhbmF0aW9uIG9uIGV2ZW50IGFyY2hpdGVjdHVyZSBvbiB0aGUge0BsaW5rICNjb21wb25lbnRFdmVudHMgZXZlbnRzIGxpc3R9LlxuICAgKiBAcmV0dXJucyB7RXZlbnQ8Q29tcG9uZW50PENvbmZpZz4sIE5vQXJncz59XG4gICAqL1xuICBnZXQgb25IaWRlKCk6IEV2ZW50PENvbXBvbmVudDxDb25maWc+LCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnRFdmVudHMub25IaWRlLmdldEV2ZW50KCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgZXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZW5hYmxpbmcuXG4gICAqIFNlZSB0aGUgZGV0YWlsZWQgZXhwbGFuYXRpb24gb24gZXZlbnQgYXJjaGl0ZWN0dXJlIG9uIHRoZSB7QGxpbmsgI2NvbXBvbmVudEV2ZW50cyBldmVudHMgbGlzdH0uXG4gICAqIEByZXR1cm5zIHtFdmVudDxDb21wb25lbnQ8Q29uZmlnPiwgTm9BcmdzPn1cbiAgICovXG4gIGdldCBvbkVuYWJsZWQoKTogRXZlbnQ8Q29tcG9uZW50PENvbmZpZz4sIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudEV2ZW50cy5vbkVuYWJsZWQuZ2V0RXZlbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxpbmcuXG4gICAqIFNlZSB0aGUgZGV0YWlsZWQgZXhwbGFuYXRpb24gb24gZXZlbnQgYXJjaGl0ZWN0dXJlIG9uIHRoZSB7QGxpbmsgI2NvbXBvbmVudEV2ZW50cyBldmVudHMgbGlzdH0uXG4gICAqIEByZXR1cm5zIHtFdmVudDxDb21wb25lbnQ8Q29uZmlnPiwgTm9BcmdzPn1cbiAgICovXG4gIGdldCBvbkRpc2FibGVkKCk6IEV2ZW50PENvbXBvbmVudDxDb25maWc+LCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnRFdmVudHMub25EaXNhYmxlZC5nZXRFdmVudCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50J3MgaG92ZXItc3RhdGUgaXMgY2hhbmdpbmcuXG4gICAqIEByZXR1cm5zIHtFdmVudDxDb21wb25lbnQ8Q29uZmlnPiwgQ29tcG9uZW50SG92ZXJDaGFuZ2VkRXZlbnRBcmdzPn1cbiAgICovXG4gIGdldCBvbkhvdmVyQ2hhbmdlZCgpOiBFdmVudDxDb21wb25lbnQ8Q29uZmlnPiwgQ29tcG9uZW50SG92ZXJDaGFuZ2VkRXZlbnRBcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50RXZlbnRzLm9uSG92ZXJDaGFuZ2VkLmdldEV2ZW50KCk7XG4gIH1cbn0iLCJpbXBvcnQge0NvbXBvbmVudENvbmZpZywgQ29tcG9uZW50fSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQge0RPTX0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7QXJyYXlVdGlsc30gZnJvbSAnLi4vYXJyYXl1dGlscyc7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIGZvciBhIHtAbGluayBDb250YWluZXJ9LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbnRhaW5lckNvbmZpZyBleHRlbmRzIENvbXBvbmVudENvbmZpZyB7XG4gIC8qKlxuICAgKiBDaGlsZCBjb21wb25lbnRzIG9mIHRoZSBjb250YWluZXIuXG4gICAqL1xuICBjb21wb25lbnRzPzogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz5bXTtcbn1cblxuLyoqXG4gKiBBIGNvbnRhaW5lciBjb21wb25lbnQgdGhhdCBjYW4gY29udGFpbiBhIGNvbGxlY3Rpb24gb2YgY2hpbGQgY29tcG9uZW50cy5cbiAqIENvbXBvbmVudHMgY2FuIGJlIGFkZGVkIGF0IGNvbnN0cnVjdGlvbiB0aW1lIHRocm91Z2ggdGhlIHtAbGluayBDb250YWluZXJDb25maWcjY29tcG9uZW50c30gc2V0dGluZywgb3IgbGF0ZXJcbiAqIHRocm91Z2ggdGhlIHtAbGluayBDb250YWluZXIjYWRkQ29tcG9uZW50fSBtZXRob2QuIFRoZSBVSU1hbmFnZXIgYXV0b21hdGljYWxseSB0YWtlcyBjYXJlIG9mIGFsbCBjb21wb25lbnRzLCBpLmUuIGl0XG4gKiBpbml0aWFsaXplcyBhbmQgY29uZmlndXJlcyB0aGVtIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogSW4gdGhlIERPTSwgdGhlIGNvbnRhaW5lciBjb25zaXN0cyBvZiBhbiBvdXRlciA8ZGl2PiAodGhhdCBjYW4gYmUgY29uZmlndXJlZCBieSB0aGUgY29uZmlnKSBhbmQgYW4gaW5uZXIgd3JhcHBlclxuICogPGRpdj4gdGhhdCBjb250YWlucyB0aGUgY29tcG9uZW50cy4gVGhpcyBkb3VibGUtPGRpdj4tc3RydWN0dXJlIGlzIG9mdGVuIHJlcXVpcmVkIHRvIGFjaGlldmUgbWFueSBhZHZhbmNlZCBlZmZlY3RzXG4gKiBpbiBDU1MgYW5kL29yIEpTLCBlLmcuIGFuaW1hdGlvbnMgYW5kIGNlcnRhaW4gZm9ybWF0dGluZyB3aXRoIGFic29sdXRlIHBvc2l0aW9uaW5nLlxuICpcbiAqIERPTSBleGFtcGxlOlxuICogPGNvZGU+XG4gKiAgICAgPGRpdiBjbGFzcz0ndWktY29udGFpbmVyJz5cbiAqICAgICAgICAgPGRpdiBjbGFzcz0nY29udGFpbmVyLXdyYXBwZXInPlxuICogICAgICAgICAgICAgLi4uIGNoaWxkIGNvbXBvbmVudHMgLi4uXG4gKiAgICAgICAgIDwvZGl2PlxuICogICAgIDwvZGl2PlxuICogPC9jb2RlPlxuICovXG5leHBvcnQgY2xhc3MgQ29udGFpbmVyPENvbmZpZyBleHRlbmRzIENvbnRhaW5lckNvbmZpZz4gZXh0ZW5kcyBDb21wb25lbnQ8Q29uZmlnPiB7XG5cbiAgLyoqXG4gICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBpbm5lciBlbGVtZW50IHRoYXQgY29udGFpbnMgdGhlIGNvbXBvbmVudHMgb2YgdGhlIGNvbnRhaW5lci5cbiAgICovXG4gIHByaXZhdGUgaW5uZXJDb250YWluZXJFbGVtZW50OiBET007XG4gIHByaXZhdGUgY29tcG9uZW50c1RvQWRkOiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPltdO1xuICBwcml2YXRlIGNvbXBvbmVudHNUb1JlbW92ZTogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz5bXTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLWNvbnRhaW5lcicsXG4gICAgICBjb21wb25lbnRzOiBbXSxcbiAgICB9IGFzIENvbmZpZywgdGhpcy5jb25maWcpO1xuXG4gICAgdGhpcy5jb21wb25lbnRzVG9BZGQgPSBbXTtcbiAgICB0aGlzLmNvbXBvbmVudHNUb1JlbW92ZSA9IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGlsZCBjb21wb25lbnQgdG8gdGhlIGNvbnRhaW5lci5cbiAgICogQHBhcmFtIGNvbXBvbmVudCB0aGUgY29tcG9uZW50IHRvIGFkZFxuICAgKi9cbiAgYWRkQ29tcG9uZW50KGNvbXBvbmVudDogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4pIHtcbiAgICB0aGlzLmNvbmZpZy5jb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcbiAgICB0aGlzLmNvbXBvbmVudHNUb0FkZC5wdXNoKGNvbXBvbmVudCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIGNoaWxkIGNvbXBvbmVudCBmcm9tIHRoZSBjb250YWluZXIuXG4gICAqIEBwYXJhbSBjb21wb25lbnQgdGhlIGNvbXBvbmVudCB0byByZW1vdmVcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGNvbXBvbmVudCBoYXMgYmVlbiByZW1vdmVkLCBmYWxzZSBpZiBpdCBpcyBub3QgY29udGFpbmVkIGluIHRoaXMgY29udGFpbmVyXG4gICAqL1xuICByZW1vdmVDb21wb25lbnQoY29tcG9uZW50OiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPik6IGJvb2xlYW4ge1xuICAgIGlmIChBcnJheVV0aWxzLnJlbW92ZSh0aGlzLmNvbmZpZy5jb21wb25lbnRzLCBjb21wb25lbnQpICE9IG51bGwpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50c1RvUmVtb3ZlLnB1c2goY29tcG9uZW50KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYW4gYXJyYXkgb2YgYWxsIGNoaWxkIGNvbXBvbmVudHMgaW4gdGhpcyBjb250YWluZXIuXG4gICAqIEByZXR1cm5zIHtDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPltdfVxuICAgKi9cbiAgZ2V0Q29tcG9uZW50cygpOiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPltdIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcuY29tcG9uZW50cztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBjaGlsZCBjb21wb25lbnRzIGZyb20gdGhlIGNvbnRhaW5lci5cbiAgICovXG4gIHJlbW92ZUNvbXBvbmVudHMoKTogdm9pZCB7XG4gICAgZm9yIChsZXQgY29tcG9uZW50IG9mIHRoaXMuZ2V0Q29tcG9uZW50cygpLnNsaWNlKCkpIHtcbiAgICAgIHRoaXMucmVtb3ZlQ29tcG9uZW50KGNvbXBvbmVudCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIERPTSBvZiB0aGUgY29udGFpbmVyIHdpdGggdGhlIGN1cnJlbnQgY29tcG9uZW50cy5cbiAgICovXG4gIHByb3RlY3RlZCB1cGRhdGVDb21wb25lbnRzKCk6IHZvaWQge1xuICAgIC8qIFdlIGNhbm5vdCBqdXN0IGNsZWFyIHRoZSBjb250YWluZXIgdG8gcmVtb3ZlIGFsbCBlbGVtZW50cyBhbmQgdGhlbiByZS1hZGQgdGhvc2UgdGhhdCBzaG91bGQgc3RheSwgYmVjYXVzZVxuICAgICAqIElFIGxvb3NlcyB0aGUgaW5uZXJIVE1MIG9mIHVuYXR0YWNoZWQgZWxlbWVudHMsIGxlYWRpbmcgdG8gZW1wdHkgZWxlbWVudHMgd2l0aGluIHRoZSBjb250YWluZXIgKGUuZy4gbWlzc2luZ1xuICAgICAqIHN1YnRpdGxlIHRleHQgaW4gU3VidGl0bGVMYWJlbCkuXG4gICAgICogSW5zdGVhZCwgd2Uga2VlcCBhIGxpc3Qgb2YgZWxlbWVudHMgdG8gYWRkIGFuZCByZW1vdmUsIGxlYXZpbmcgcmVtYWluaW5nIGVsZW1lbnRzIGFsb25lLiBCeSBrZWVwaW5nIHRoZW0gaW5cbiAgICAgKiB0aGUgRE9NLCB0aGVpciBjb250ZW50IGdldHMgcHJlc2VydmVkIGluIGFsbCBicm93c2Vycy5cbiAgICAgKi9cbiAgICBsZXQgY29tcG9uZW50O1xuXG4gICAgd2hpbGUgKGNvbXBvbmVudCA9IHRoaXMuY29tcG9uZW50c1RvUmVtb3ZlLnNoaWZ0KCkpIHtcbiAgICAgIGNvbXBvbmVudC5nZXREb21FbGVtZW50KCkucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKGNvbXBvbmVudCA9IHRoaXMuY29tcG9uZW50c1RvQWRkLnNoaWZ0KCkpIHtcbiAgICAgIHRoaXMuaW5uZXJDb250YWluZXJFbGVtZW50LmFwcGVuZChjb21wb25lbnQuZ2V0RG9tRWxlbWVudCgpKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgdG9Eb21FbGVtZW50KCk6IERPTSB7XG4gICAgLy8gQ3JlYXRlIHRoZSBjb250YWluZXIgZWxlbWVudCAodGhlIG91dGVyIDxkaXY+KVxuICAgIGxldCBjb250YWluZXJFbGVtZW50ID0gbmV3IERPTSh0aGlzLmNvbmZpZy50YWcsIHtcbiAgICAgICdpZCc6IHRoaXMuY29uZmlnLmlkLFxuICAgICAgJ2NsYXNzJzogdGhpcy5nZXRDc3NDbGFzc2VzKCksXG4gICAgICAncm9sZSc6IHRoaXMuY29uZmlnLnJvbGUsXG4gICAgICAnYXJpYS1sYWJlbCc6IGkxOG4ucGVyZm9ybUxvY2FsaXphdGlvbih0aGlzLmNvbmZpZy5hcmlhTGFiZWwpLFxuICAgIH0pO1xuXG4gICAgLy8gQ3JlYXRlIHRoZSBpbm5lciBjb250YWluZXIgZWxlbWVudCAodGhlIGlubmVyIDxkaXY+KSB0aGF0IHdpbGwgY29udGFpbiB0aGUgY29tcG9uZW50c1xuICAgIGxldCBpbm5lckNvbnRhaW5lciA9IG5ldyBET00odGhpcy5jb25maWcudGFnLCB7XG4gICAgICAnY2xhc3MnOiB0aGlzLnByZWZpeENzcygnY29udGFpbmVyLXdyYXBwZXInKSxcbiAgICB9KTtcbiAgICB0aGlzLmlubmVyQ29udGFpbmVyRWxlbWVudCA9IGlubmVyQ29udGFpbmVyO1xuXG4gICAgZm9yIChsZXQgaW5pdGlhbENvbXBvbmVudCBvZiB0aGlzLmNvbmZpZy5jb21wb25lbnRzKSB7XG4gICAgICB0aGlzLmNvbXBvbmVudHNUb0FkZC5wdXNoKGluaXRpYWxDb21wb25lbnQpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudHMoKTtcblxuICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kKGlubmVyQ29udGFpbmVyKTtcblxuICAgIHJldHVybiBjb250YWluZXJFbGVtZW50O1xuICB9XG59IiwiaW1wb3J0IHtDb250YWluZXJDb25maWcsIENvbnRhaW5lcn0gZnJvbSAnLi9jb250YWluZXInO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7VUlVdGlsc30gZnJvbSAnLi4vdWl1dGlscyc7XG5pbXBvcnQge1NwYWNlcn0gZnJvbSAnLi9zcGFjZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5pbXBvcnQgeyBCcm93c2VyVXRpbHMgfSBmcm9tICcuLi9icm93c2VydXRpbHMnO1xuaW1wb3J0IHtDb21wb25lbnQsIENvbXBvbmVudENvbmZpZ30gZnJvbSAnLi9jb21wb25lbnQnO1xuaW1wb3J0IHtTZXR0aW5nc1BhbmVsfSBmcm9tICcuL3NldHRpbmdzcGFuZWwnO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIGZvciB0aGUge0BsaW5rIENvbnRyb2xCYXJ9LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbnRyb2xCYXJDb25maWcgZXh0ZW5kcyBDb250YWluZXJDb25maWcge1xuICAvLyBub3RoaW5nIHlldFxufVxuXG4vKipcbiAqIEEgY29udGFpbmVyIGZvciBtYWluIHBsYXllciBjb250cm9sIGNvbXBvbmVudHMsIGUuZy4gcGxheSB0b2dnbGUgYnV0dG9uLCBzZWVrIGJhciwgdm9sdW1lIGNvbnRyb2wsIGZ1bGxzY3JlZW4gdG9nZ2xlXG4gKiBidXR0b24uXG4gKi9cbmV4cG9ydCBjbGFzcyBDb250cm9sQmFyIGV4dGVuZHMgQ29udGFpbmVyPENvbnRyb2xCYXJDb25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbnRyb2xCYXJDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1jb250cm9sYmFyJyxcbiAgICAgIGhpZGRlbjogdHJ1ZSxcbiAgICAgIHJvbGU6ICdyZWdpb24nLFxuICAgICAgYXJpYUxhYmVsOiBpMThuLmdldExvY2FsaXplcignY29udHJvbEJhcicpLFxuICAgIH0sIDxDb250cm9sQmFyQ29uZmlnPnRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICAvLyBDb3VudHMgaG93IG1hbnkgY29tcG9uZW50cyBhcmUgaG92ZXJlZCBhbmQgYmxvY2sgaGlkaW5nIG9mIHRoZSBjb250cm9sIGJhclxuICAgIGxldCBob3ZlclN0YWNrQ291bnQgPSAwO1xuICAgIGxldCBpc1NldHRpbmdzUGFuZWxTaG93biA9IGZhbHNlO1xuXG4gICAgLy8gb25seSBlbmFibGluZyB0aGlzIGZvciBub24tbW9iaWxlIHBsYXRmb3JtcyB3aXRob3V0IHRvdWNoIGlucHV0LiBlbmFibGluZyB0aGlzXG4gICAgLy8gZm9yIHRvdWNoIGRldmljZXMgY2F1c2VzIHRoZSBVSSB0byBub3QgZGlzYXBwZWFyIGFmdGVyIGhpZGVEZWxheSBzZWNvbmRzLlxuICAgIC8vIEluc3RlYWQsIGl0IHdpbGwgc3RheSB2aXNpYmxlIHVudGlsIGFub3RoZXIgbWFudWFsIGludGVyYWN0aW9uIGlzIHBlcmZvcm1lZC5cbiAgICBpZiAodWltYW5hZ2VyLmdldENvbmZpZygpLmRpc2FibGVBdXRvSGlkZVdoZW5Ib3ZlcmVkICYmICFCcm93c2VyVXRpbHMuaXNNb2JpbGUpIHtcbiAgICAgIC8vIFRyYWNrIGhvdmVyIHN0YXR1cyBvZiBjaGlsZCBjb21wb25lbnRzXG4gICAgICBVSVV0aWxzLnRyYXZlcnNlVHJlZSh0aGlzLCAoY29tcG9uZW50KSA9PiB7XG4gICAgICAgIC8vIERvIG5vdCB0cmFjayBob3ZlciBzdGF0dXMgb2YgY2hpbGQgY29udGFpbmVycyBvciBzcGFjZXJzLCBvbmx5IG9mICdyZWFsJyBjb250cm9sc1xuICAgICAgICBpZiAoY29tcG9uZW50IGluc3RhbmNlb2YgQ29udGFpbmVyIHx8IGNvbXBvbmVudCBpbnN0YW5jZW9mIFNwYWNlcikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN1YnNjcmliZSBob3ZlciBldmVudCBhbmQga2VlcCBhIGNvdW50IG9mIHRoZSBudW1iZXIgb2YgaG92ZXJlZCBjaGlsZHJlblxuICAgICAgICBjb21wb25lbnQub25Ib3ZlckNoYW5nZWQuc3Vic2NyaWJlKChfLCBhcmdzKSA9PiB7XG4gICAgICAgICAgaWYgKGFyZ3MuaG92ZXJlZCkge1xuICAgICAgICAgICAgaG92ZXJTdGFja0NvdW50Kys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhvdmVyU3RhY2tDb3VudC0tO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoQnJvd3NlclV0aWxzLmlzTW9iaWxlKSB7XG4gICAgICB1aW1hbmFnZXIub25Db21wb25lbnRTaG93LnN1YnNjcmliZSgoY29tcG9uZW50OiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPikgPT4ge1xuICAgICAgICBpZiAoY29tcG9uZW50IGluc3RhbmNlb2YgU2V0dGluZ3NQYW5lbCkge1xuICAgICAgICAgIGlzU2V0dGluZ3NQYW5lbFNob3duID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHVpbWFuYWdlci5vbkNvbXBvbmVudEhpZGUuc3Vic2NyaWJlKChjb21wb25lbnQ6IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+KSA9PiB7XG4gICAgICAgIGlmIChjb21wb25lbnQgaW5zdGFuY2VvZiBTZXR0aW5nc1BhbmVsKSB7XG4gICAgICAgICAgaXNTZXR0aW5nc1BhbmVsU2hvd24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdWltYW5hZ2VyLm9uQ29udHJvbHNTaG93LnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9KTtcblxuICAgIHVpbWFuYWdlci5vblByZXZpZXdDb250cm9sc0hpZGUuc3Vic2NyaWJlKChzZW5kZXIsIGFyZ3MpID0+IHtcbiAgICAgIC8vIENhbmNlbCB0aGUgaGlkZSBldmVudCBpZiBob3ZlcmVkIGNoaWxkIGNvbXBvbmVudHMgYmxvY2sgaGlkaW5nIG9yIGlmIHRoZSBzZXR0aW5ncyBwYW5lbCBpcyBhY3RpdmUgb24gbW9iaWxlLlxuICAgICAgYXJncy5jYW5jZWwgPSBhcmdzLmNhbmNlbCB8fCAoaG92ZXJTdGFja0NvdW50ID4gMCB8fCBpc1NldHRpbmdzUGFuZWxTaG93bik7XG4gICAgfSk7XG5cbiAgICB1aW1hbmFnZXIub25Db250cm9sc0hpZGUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQge0NvbnRhaW5lckNvbmZpZywgQ29udGFpbmVyfSBmcm9tICcuL2NvbnRhaW5lcic7XG5pbXBvcnQge0xhYmVsLCBMYWJlbENvbmZpZ30gZnJvbSAnLi9sYWJlbCc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHtUdk5vaXNlQ2FudmFzfSBmcm9tICcuL3R2bm9pc2VjYW52YXMnO1xuaW1wb3J0IHsgRXJyb3JVdGlscyB9IGZyb20gJy4uL2Vycm9ydXRpbHMnO1xuaW1wb3J0IHsgRXJyb3JFdmVudCwgUGxheWVyQVBJLCBQbGF5ZXJFdmVudEJhc2UgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHtcbiAgaXNNb2JpbGVWM1BsYXllckFQSSxcbiAgTW9iaWxlVjNQbGF5ZXJBUEksIE1vYmlsZVYzUGxheWVyRXJyb3JFdmVudCwgTW9iaWxlVjNQbGF5ZXJFdmVudCwgTW9iaWxlVjNTb3VyY2VFcnJvckV2ZW50LFxufSBmcm9tICcuLi9tb2JpbGV2M3BsYXllcmFwaSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXJyb3JNZXNzYWdlVHJhbnNsYXRvciB7XG4gIChlcnJvcjogRXJyb3JFdmVudCB8IE1vYmlsZVYzUGxheWVyRXJyb3JFdmVudCk6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFcnJvck1lc3NhZ2VNYXAge1xuICBbY29kZTogbnVtYmVyXTogc3RyaW5nIHwgRXJyb3JNZXNzYWdlVHJhbnNsYXRvcjtcbn1cblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgdGhlIHtAbGluayBFcnJvck1lc3NhZ2VPdmVybGF5fS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFcnJvck1lc3NhZ2VPdmVybGF5Q29uZmlnIGV4dGVuZHMgQ29udGFpbmVyQ29uZmlnIHtcbiAgLyoqXG4gICAqIEFsbG93cyBvdmVyd3JpdGluZyBvZiB0aGUgZXJyb3IgbWVzc2FnZXMgZGlzcGxheWVkIGluIHRoZSBvdmVybGF5IGZvciBjdXN0b21pemF0aW9uIGFuZCBsb2NhbGl6YXRpb24uXG4gICAqIFRoaXMgaXMgZWl0aGVyIGEgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyBhbnkge0BsaW5rIEVycm9yRXZlbnR9IGFzIHBhcmFtZXRlciBhbmQgdHJhbnNsYXRlcyBlcnJvciBtZXNzYWdlcyxcbiAgICogb3IgYSBtYXAgb2YgZXJyb3IgY29kZXMgdGhhdCBvdmVyd3JpdGVzIHNwZWNpZmljIGVycm9yIG1lc3NhZ2VzIHdpdGggYSBwbGFpbiBzdHJpbmcgb3IgYSBmdW5jdGlvbiB0aGF0XG4gICAqIHJlY2VpdmVzIHRoZSB7QGxpbmsgRXJyb3JFdmVudH0gYXMgcGFyYW1ldGVyIGFuZCByZXR1cm5zIGEgY3VzdG9taXplZCBzdHJpbmcuXG4gICAqIFRoZSB0cmFuc2xhdGlvbiBmdW5jdGlvbnMgY2FuIGJlIHVzZWQgdG8gZXh0cmFjdCBkYXRhIChlLmcuIHBhcmFtZXRlcnMpIGZyb20gdGhlIG9yaWdpbmFsIGVycm9yIG1lc3NhZ2UuXG4gICAqXG4gICAqIEV4YW1wbGUgMSAoY2F0Y2gtYWxsIHRyYW5zbGF0aW9uIGZ1bmN0aW9uKTpcbiAgICogPGNvZGU+XG4gICAqIGVycm9yTWVzc2FnZU92ZXJsYXlDb25maWcgPSB7XG4gICAqICAgbWVzc2FnZXM6IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAqICAgICBzd2l0Y2ggKGVycm9yLmNvZGUpIHtcbiAgICogICAgICAgLy8gT3ZlcndyaXRlIGVycm9yIDEwMDAgJ1Vua25vd24gZXJyb3InXG4gICAqICAgICAgIGNhc2UgMTAwMDpcbiAgICogICAgICAgICByZXR1cm4gJ0hvdXN0b24sIHdlIGhhdmUgYSBwcm9ibGVtJ1xuICAgKlxuICAgKiAgICAgICAvLyBUcmFuc2Zvcm0gZXJyb3IgMTIwMSAnVGhlIGRvd25sb2FkZWQgbWFuaWZlc3QgaXMgaW52YWxpZCcgdG8gdXBwZXJjYXNlXG4gICAqICAgICAgIGNhc2UgMTIwMTpcbiAgICogICAgICAgICB2YXIgZGVzY3JpcHRpb24gPSBFcnJvclV0aWxzLmRlZmF1bHRFcnJvck1lc3NhZ2VzW2Vycm9yLmNvZGVdO1xuICAgKiAgICAgICAgIHJldHVybiBkZXNjcmlwdGlvbi50b1VwcGVyQ2FzZSgpO1xuICAgKlxuICAgKiAgICAgICAvLyBDdXN0b21pemUgZXJyb3IgMTIwNyAnVGhlIG1hbmlmZXN0IGNvdWxkIG5vdCBiZSBsb2FkZWQnXG4gICAqICAgICAgIGNhc2UgMTIwNzpcbiAgICogICAgICAgICB2YXIgc3RhdHVzQ29kZSA9IGVycm9yLmRhdGEuc3RhdHVzQ29kZTtcbiAgICogICAgICAgICByZXR1cm4gJ01hbmlmZXN0IGxvYWRpbmcgZmFpbGVkIHdpdGggSFRUUCBlcnJvciAnICsgc3RhdHVzQ29kZTtcbiAgICogICAgIH1cbiAgICogICAgIC8vIFJldHVybiB1bm1vZGlmaWVkIGVycm9yIG1lc3NhZ2UgZm9yIGFsbCBvdGhlciBlcnJvcnNcbiAgICogICAgIHJldHVybiBlcnJvci5tZXNzYWdlO1xuICAgKiAgIH1cbiAgICogfTtcbiAgICogPC9jb2RlPlxuICAgKlxuICAgKiBFeGFtcGxlIDIgKHRyYW5zbGF0aW5nIHNwZWNpZmljIGVycm9ycyk6XG4gICAqIDxjb2RlPlxuICAgKiBlcnJvck1lc3NhZ2VPdmVybGF5Q29uZmlnID0ge1xuICAgKiAgIG1lc3NhZ2VzOiB7XG4gICAqICAgICAvLyBPdmVyd3JpdGUgZXJyb3IgMTAwMCAnVW5rbm93biBlcnJvcidcbiAgICogICAgIDEwMDA6ICdIb3VzdG9uLCB3ZSBoYXZlIGEgcHJvYmxlbScsXG4gICAqXG4gICAqICAgICAvLyBUcmFuc2Zvcm0gZXJyb3IgMTIwMSAnVW5zdXBwb3J0ZWQgbWFuaWZlc3QgZm9ybWF0JyB0byB1cHBlcmNhc2VcbiAgICogICAgIDEyMDE6IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAqICAgICAgIHZhciBkZXNjcmlwdGlvbiA9IEVycm9yVXRpbHMuZGVmYXVsdEVycm9yTWVzc2FnZXNbZXJyb3IuY29kZV07XG4gICAqICAgICAgIHJldHVybiBkZXNjcmlwdGlvbi50b1VwcGVyQ2FzZSgpO1xuICAgKiAgICAgfSxcbiAgICpcbiAgICogICAgIC8vIEN1c3RvbWl6ZSBlcnJvciAxMjA3ICdUaGUgbWFuaWZlc3QgY291bGQgbm90IGJlIGxvYWRlZCdcbiAgICogICAgIDEyMDc6IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAqICAgICAgIHZhciBzdGF0dXNDb2RlID0gZXJyb3IuZGF0YS5zdGF0dXNDb2RlO1xuICAgKiAgICAgICByZXR1cm4gJ01hbmlmZXN0IGxvYWRpbmcgZmFpbGVkIHdpdGggSFRUUCBlcnJvciAnICsgc3RhdHVzQ29kZTtcbiAgICogICAgIH1cbiAgICogICB9XG4gICAqIH07XG4gICAqIDwvY29kZT5cbiAgICovXG4gIG1lc3NhZ2VzPzogRXJyb3JNZXNzYWdlTWFwIHwgRXJyb3JNZXNzYWdlVHJhbnNsYXRvcjtcbn1cblxuLyoqXG4gKiBPdmVybGF5cyB0aGUgcGxheWVyIGFuZCBkaXNwbGF5cyBlcnJvciBtZXNzYWdlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIEVycm9yTWVzc2FnZU92ZXJsYXkgZXh0ZW5kcyBDb250YWluZXI8RXJyb3JNZXNzYWdlT3ZlcmxheUNvbmZpZz4ge1xuXG4gIHByaXZhdGUgZXJyb3JMYWJlbDogTGFiZWw8TGFiZWxDb25maWc+O1xuICBwcml2YXRlIHR2Tm9pc2VCYWNrZ3JvdW5kOiBUdk5vaXNlQ2FudmFzO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogRXJyb3JNZXNzYWdlT3ZlcmxheUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuZXJyb3JMYWJlbCA9IG5ldyBMYWJlbDxMYWJlbENvbmZpZz4oeyBjc3NDbGFzczogJ3VpLWVycm9ybWVzc2FnZS1sYWJlbCcgfSk7XG4gICAgdGhpcy50dk5vaXNlQmFja2dyb3VuZCA9IG5ldyBUdk5vaXNlQ2FudmFzKCk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLWVycm9ybWVzc2FnZS1vdmVybGF5JyxcbiAgICAgIGNvbXBvbmVudHM6IFt0aGlzLnR2Tm9pc2VCYWNrZ3JvdW5kLCB0aGlzLmVycm9yTGFiZWxdLFxuICAgICAgaGlkZGVuOiB0cnVlLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSB8IE1vYmlsZVYzUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuXG4gICAgY29uc3QgaGFuZGxlRXJyb3JNZXNzYWdlID0gKFxuICAgICAgZXZlbnQ6IEVycm9yRXZlbnQgfCBNb2JpbGVWM1NvdXJjZUVycm9yRXZlbnQgfCBNb2JpbGVWM1BsYXllckVycm9yRXZlbnQsXG4gICAgICBtZXNzYWdlOiBzdHJpbmcsXG4gICAgKSA9PiB7XG4gICAgICBjb25zdCBjdXN0b21pemVkTWVzc2FnZSA9IGN1c3RvbWl6ZUVycm9yTWVzc2FnZSh1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXJyb3JNZXNzYWdlcyB8fCBjb25maWcubWVzc2FnZXMsIGV2ZW50KTtcbiAgICAgIGlmIChjdXN0b21pemVkTWVzc2FnZSkge1xuICAgICAgICBtZXNzYWdlID0gY3VzdG9taXplZE1lc3NhZ2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZGlzcGxheShtZXNzYWdlKTtcbiAgICB9O1xuXG4gICAgaWYgKGlzTW9iaWxlVjNQbGF5ZXJBUEkocGxheWVyKSkge1xuICAgICAgY29uc3QgZXJyb3JFdmVudEhhbmRsZXIgPSAoZXZlbnQ6IE1vYmlsZVYzU291cmNlRXJyb3JFdmVudCB8IE1vYmlsZVYzUGxheWVyRXJyb3JFdmVudCkgPT4ge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gRXJyb3JVdGlscy5kZWZhdWx0TW9iaWxlVjNFcnJvck1lc3NhZ2VUcmFuc2xhdG9yKGV2ZW50KTtcbiAgICAgICAgaGFuZGxlRXJyb3JNZXNzYWdlKGV2ZW50LCBtZXNzYWdlKTtcbiAgICAgIH07XG5cbiAgICAgIHBsYXllci5vbihNb2JpbGVWM1BsYXllckV2ZW50LlBsYXllckVycm9yLCBlcnJvckV2ZW50SGFuZGxlcik7XG4gICAgICBwbGF5ZXIub24oTW9iaWxlVjNQbGF5ZXJFdmVudC5Tb3VyY2VFcnJvciwgZXJyb3JFdmVudEhhbmRsZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuRXJyb3IsIChldmVudDogRXJyb3JFdmVudCkgPT4ge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IEVycm9yVXRpbHMuZGVmYXVsdFdlYkVycm9yTWVzc2FnZVRyYW5zbGF0b3IoZXZlbnQpO1xuICAgICAgICBoYW5kbGVFcnJvck1lc3NhZ2UoZXZlbnQsIG1lc3NhZ2UpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZUxvYWRlZCwgKGV2ZW50OiBQbGF5ZXJFdmVudEJhc2UpID0+IHtcbiAgICAgIGlmICh0aGlzLmlzU2hvd24oKSkge1xuICAgICAgICB0aGlzLnR2Tm9pc2VCYWNrZ3JvdW5kLnN0b3AoKTtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBkaXNwbGF5KGVycm9yTWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5lcnJvckxhYmVsLnNldFRleHQoZXJyb3JNZXNzYWdlKTtcbiAgICB0aGlzLnR2Tm9pc2VCYWNrZ3JvdW5kLnN0YXJ0KCk7XG4gICAgdGhpcy5zaG93KCk7XG4gIH1cblxuICByZWxlYXNlKCk6IHZvaWQge1xuICAgIHN1cGVyLnJlbGVhc2UoKTtcblxuICAgIC8vIENhbnZhcyByZW5kZXJpbmcgbXVzdCBiZSBleHBsaWNpdGx5IHN0b3BwZWQsIGVsc2UgaXQganVzdCBjb250aW51ZXMgZm9yZXZlciBhbmQgaG9ncyByZXNvdXJjZXNcbiAgICB0aGlzLnR2Tm9pc2VCYWNrZ3JvdW5kLnN0b3AoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjdXN0b21pemVFcnJvck1lc3NhZ2UoXG4gIGVycm9yTWVzc2FnZXM6IEVycm9yTWVzc2FnZVRyYW5zbGF0b3IgfCBFcnJvck1lc3NhZ2VNYXAsXG4gIGV2ZW50OiBFcnJvckV2ZW50IHwgTW9iaWxlVjNQbGF5ZXJFcnJvckV2ZW50IHwgTW9iaWxlVjNTb3VyY2VFcnJvckV2ZW50LFxuKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgaWYgKCFlcnJvck1lc3NhZ2VzKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIFByb2Nlc3MgbWVzc2FnZSB2b2NhYnVsYXJpZXNcbiAgaWYgKHR5cGVvZiBlcnJvck1lc3NhZ2VzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gVHJhbnNsYXRpb24gZnVuY3Rpb24gZm9yIGFsbCBlcnJvcnNcbiAgICByZXR1cm4gZXJyb3JNZXNzYWdlcyhldmVudCk7XG4gIH1cbiAgaWYgKGVycm9yTWVzc2FnZXNbZXZlbnQuY29kZV0pIHtcbiAgICAvLyBJdCdzIG5vdCBhIHRyYW5zbGF0aW9uIGZ1bmN0aW9uLCBzbyBpdCBtdXN0IGJlIGEgbWFwIG9mIHN0cmluZ3Mgb3IgdHJhbnNsYXRpb24gZnVuY3Rpb25zXG4gICAgY29uc3QgY3VzdG9tTWVzc2FnZSA9IGVycm9yTWVzc2FnZXNbZXZlbnQuY29kZV07XG5cbiAgICByZXR1cm4gdHlwZW9mIGN1c3RvbU1lc3NhZ2UgPT09ICdzdHJpbmcnID8gY3VzdG9tTWVzc2FnZSA6IGN1c3RvbU1lc3NhZ2UoZXZlbnQpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBUb2dnbGVCdXR0b24sIFRvZ2dsZUJ1dHRvbkNvbmZpZyB9IGZyb20gJy4vdG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7IFVJSW5zdGFuY2VNYW5hZ2VyIH0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEEgYnV0dG9uIHRoYXQgdG9nZ2xlcyB0aGUgcGxheWVyIGJldHdlZW4gd2luZG93ZWQgYW5kIGZ1bGxzY3JlZW4gdmlldy5cbiAqL1xuZXhwb3J0IGNsYXNzIEZ1bGxzY3JlZW5Ub2dnbGVCdXR0b24gZXh0ZW5kcyBUb2dnbGVCdXR0b248VG9nZ2xlQnV0dG9uQ29uZmlnPiB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBUb2dnbGVCdXR0b25Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLWZ1bGxzY3JlZW50b2dnbGVidXR0b24nLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ2Z1bGxzY3JlZW4nKSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgY29uc3QgaXNGdWxsU2NyZWVuQXZhaWxhYmxlID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIHBsYXllci5pc1ZpZXdNb2RlQXZhaWxhYmxlKHBsYXllci5leHBvcnRzLlZpZXdNb2RlLkZ1bGxzY3JlZW4pO1xuICAgIH07XG5cbiAgICBjb25zdCBmdWxsc2NyZWVuU3RhdGVIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgcGxheWVyLmdldFZpZXdNb2RlKCkgPT09IHBsYXllci5leHBvcnRzLlZpZXdNb2RlLkZ1bGxzY3JlZW4gPyB0aGlzLm9uKCkgOiB0aGlzLm9mZigpO1xuICAgIH07XG5cbiAgICBjb25zdCBmdWxsc2NyZWVuQXZhaWxhYmlsaXR5Q2hhbmdlZEhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICBpc0Z1bGxTY3JlZW5BdmFpbGFibGUoKSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG4gICAgfTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5WaWV3TW9kZUNoYW5nZWQsIGZ1bGxzY3JlZW5TdGF0ZUhhbmRsZXIpO1xuXG4gICAgLy8gQXZhaWxhYmxlIG9ubHkgaW4gb3VyIG5hdGl2ZSBTREtzIGZvciBub3dcbiAgICBpZiAoKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50IGFzIGFueSkuVmlld01vZGVBdmFpbGFiaWxpdHlDaGFuZ2VkKSB7XG4gICAgICBwbGF5ZXIub24oXG4gICAgICAgIChwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudCBhcyBhbnkpLlZpZXdNb2RlQXZhaWxhYmlsaXR5Q2hhbmdlZCxcbiAgICAgICAgZnVsbHNjcmVlbkF2YWlsYWJpbGl0eUNoYW5nZWRIYW5kbGVyLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUoZnVsbHNjcmVlbkF2YWlsYWJpbGl0eUNoYW5nZWRIYW5kbGVyKTtcblxuICAgIHRoaXMub25DbGljay5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgaWYgKCFpc0Z1bGxTY3JlZW5BdmFpbGFibGUoKSkge1xuICAgICAgICBpZiAoY29uc29sZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdGdWxsc2NyZWVuIHVuYXZhaWxhYmxlJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB0YXJnZXRWaWV3TW9kZSA9XG4gICAgICAgIHBsYXllci5nZXRWaWV3TW9kZSgpID09PSBwbGF5ZXIuZXhwb3J0cy5WaWV3TW9kZS5GdWxsc2NyZWVuXG4gICAgICAgICAgPyBwbGF5ZXIuZXhwb3J0cy5WaWV3TW9kZS5JbmxpbmVcbiAgICAgICAgICA6IHBsYXllci5leHBvcnRzLlZpZXdNb2RlLkZ1bGxzY3JlZW47XG5cbiAgICAgIHBsYXllci5zZXRWaWV3TW9kZSh0YXJnZXRWaWV3TW9kZSk7XG4gICAgfSk7XG5cbiAgICAvLyBTdGFydHVwIGluaXRcbiAgICBmdWxsc2NyZWVuQXZhaWxhYmlsaXR5Q2hhbmdlZEhhbmRsZXIoKTtcbiAgICBmdWxsc2NyZWVuU3RhdGVIYW5kbGVyKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7UGxheWJhY2tUb2dnbGVCdXR0b24sIFBsYXliYWNrVG9nZ2xlQnV0dG9uQ29uZmlnfSBmcm9tICcuL3BsYXliYWNrdG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7RE9NfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSwgUGxheWVyRXZlbnRCYXNlLCBXYXJuaW5nRXZlbnQgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIGJ1dHRvbiB0aGF0IG92ZXJsYXlzIHRoZSB2aWRlbyBhbmQgdG9nZ2xlcyBiZXR3ZWVuIHBsYXliYWNrIGFuZCBwYXVzZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEh1Z2VQbGF5YmFja1RvZ2dsZUJ1dHRvbiBleHRlbmRzIFBsYXliYWNrVG9nZ2xlQnV0dG9uIHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFBsYXliYWNrVG9nZ2xlQnV0dG9uQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1odWdlcGxheWJhY2t0b2dnbGVidXR0b24nLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3BsYXlQYXVzZScpLFxuICAgICAgcm9sZTogJ2J1dHRvbicsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgLy8gVXBkYXRlIGJ1dHRvbiBzdGF0ZSB0aHJvdWdoIEFQSSBldmVudHNcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIsIGZhbHNlKTtcblxuICAgIC8vIFNldCBlbnRlckZ1bGxzY3JlZW5PbkluaXRpYWxQbGF5YmFjayBpZiBzZXQgaW4gdGhlIHVpbWFuYWdlciBjb25maWdcbiAgICBpZiAodHlwZW9mIHVpbWFuYWdlci5nZXRDb25maWcoKS5lbnRlckZ1bGxzY3JlZW5PbkluaXRpYWxQbGF5YmFjayA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICB0aGlzLmNvbmZpZy5lbnRlckZ1bGxzY3JlZW5PbkluaXRpYWxQbGF5YmFjayA9IHVpbWFuYWdlci5nZXRDb25maWcoKS5lbnRlckZ1bGxzY3JlZW5PbkluaXRpYWxQbGF5YmFjaztcbiAgICB9XG5cbiAgICBsZXQgdG9nZ2xlUGxheWJhY2sgPSAoKSA9PiB7XG4gICAgICBpZiAocGxheWVyLmlzUGxheWluZygpIHx8IHRoaXMuaXNQbGF5SW5pdGlhdGVkKSB7XG4gICAgICAgIHBsYXllci5wYXVzZSgndWknKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBsYXllci5wbGF5KCd1aScpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBsZXQgdG9nZ2xlRnVsbHNjcmVlbiA9ICgpID0+IHtcbiAgICAgIGlmIChwbGF5ZXIuZ2V0Vmlld01vZGUoKSA9PT0gcGxheWVyLmV4cG9ydHMuVmlld01vZGUuRnVsbHNjcmVlbikge1xuICAgICAgICBwbGF5ZXIuc2V0Vmlld01vZGUocGxheWVyLmV4cG9ydHMuVmlld01vZGUuSW5saW5lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBsYXllci5zZXRWaWV3TW9kZShwbGF5ZXIuZXhwb3J0cy5WaWV3TW9kZS5GdWxsc2NyZWVuKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbGV0IGZpcnN0UGxheSA9IHRydWU7XG4gICAgbGV0IGNsaWNrVGltZSA9IDA7XG4gICAgbGV0IGRvdWJsZUNsaWNrVGltZSA9IDA7XG5cbiAgICAvKlxuICAgICAqIFlvdVR1YmUtc3R5bGUgdG9nZ2xlIGJ1dHRvbiBoYW5kbGluZ1xuICAgICAqXG4gICAgICogVGhlIGdvYWwgaXMgdG8gcHJldmVudCBhIHNob3J0IHBhdXNlIG9yIHBsYXliYWNrIGludGVydmFsIGJldHdlZW4gYSBjbGljaywgdGhhdCB0b2dnbGVzIHBsYXliYWNrLCBhbmQgYVxuICAgICAqIGRvdWJsZSBjbGljaywgdGhhdCB0b2dnbGVzIGZ1bGxzY3JlZW4uIEluIHRoaXMgbmFpdmUgYXBwcm9hY2gsIHRoZSBmaXJzdCBjbGljayB3b3VsZCBlLmcuIHN0YXJ0IHBsYXliYWNrLFxuICAgICAqIHRoZSBzZWNvbmQgY2xpY2sgd291bGQgYmUgZGV0ZWN0ZWQgYXMgZG91YmxlIGNsaWNrIGFuZCB0b2dnbGUgdG8gZnVsbHNjcmVlbiwgYW5kIGFzIHNlY29uZCBub3JtYWwgY2xpY2sgc3RvcFxuICAgICAqIHBsYXliYWNrLCB3aGljaCByZXN1bHRzIGlzIGEgc2hvcnQgcGxheWJhY2sgaW50ZXJ2YWwgd2l0aCBtYXggbGVuZ3RoIG9mIHRoZSBkb3VibGUgY2xpY2sgZGV0ZWN0aW9uXG4gICAgICogcGVyaW9kICh1c3VhbGx5IDUwMG1zKS5cbiAgICAgKlxuICAgICAqIFRvIHNvbHZlIHRoaXMgaXNzdWUsIHdlIGRlZmVyIGhhbmRsaW5nIG9mIHRoZSBmaXJzdCBjbGljayBmb3IgMjAwbXMsIHdoaWNoIGlzIGFsbW9zdCB1bm5vdGljZWFibGUgdG8gdGhlIHVzZXIsXG4gICAgICogYW5kIGp1c3QgdG9nZ2xlIHBsYXliYWNrIGlmIG5vIHNlY29uZCBjbGljayAoZG91YmxlIGNsaWNrKSBoYXMgYmVlbiByZWdpc3RlcmVkIGR1cmluZyB0aGlzIHBlcmlvZC4gSWYgYSBkb3VibGVcbiAgICAgKiBjbGljayBpcyByZWdpc3RlcmVkLCB3ZSBqdXN0IHRvZ2dsZSB0aGUgZnVsbHNjcmVlbi4gSW4gdGhlIGZpcnN0IDIwMG1zLCB1bmRlc2lyZWQgcGxheWJhY2sgY2hhbmdlcyB0aHVzIGNhbm5vdFxuICAgICAqIGhhcHBlbi4gSWYgYSBkb3VibGUgY2xpY2sgaXMgcmVnaXN0ZXJlZCB3aXRoaW4gNTAwbXMsIHdlIHVuZG8gdGhlIHBsYXliYWNrIGNoYW5nZSBhbmQgc3dpdGNoIGZ1bGxzY3JlZW4gbW9kZS5cbiAgICAgKiBJbiB0aGUgZW5kLCB0aGlzIG1ldGhvZCBiYXNpY2FsbHkgaW50cm9kdWNlcyBhIDIwMG1zIG9ic2VydmluZyBpbnRlcnZhbCBpbiB3aGljaCBwbGF5YmFjayBjaGFuZ2VzIGFyZSBwcmV2ZW50ZWRcbiAgICAgKiBpZiBhIGRvdWJsZSBjbGljayBoYXBwZW5zLlxuICAgICAqL1xuICAgIHRoaXMub25DbGljay5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgLy8gRGlyZWN0bHkgc3RhcnQgcGxheWJhY2sgb24gZmlyc3QgY2xpY2sgb2YgdGhlIGJ1dHRvbi5cbiAgICAgIC8vIFRoaXMgaXMgYSByZXF1aXJlZCB3b3JrYXJvdW5kIGZvciBtb2JpbGUgYnJvd3NlcnMgd2hlcmUgdmlkZW8gcGxheWJhY2sgbmVlZHMgdG8gYmUgdHJpZ2dlcmVkIGRpcmVjdGx5XG4gICAgICAvLyBieSB0aGUgdXNlci4gQSBkZWZlcnJlZCBwbGF5YmFjayBzdGFydCB0aHJvdWdoIHRoZSB0aW1lb3V0IGJlbG93IGlzIG5vdCBjb25zaWRlcmVkIGFzIHVzZXIgYWN0aW9uIGFuZFxuICAgICAgLy8gdGhlcmVmb3JlIGlnbm9yZWQgYnkgbW9iaWxlIGJyb3dzZXJzLlxuICAgICAgaWYgKGZpcnN0UGxheSkge1xuICAgICAgICAvLyBUcnkgdG8gc3RhcnQgcGxheWJhY2suIFRoZW4gd2Ugd2FpdCBmb3IgUGxheSBhbmQgb25seSB3aGVuIGl0IGFycml2ZXMsIHdlIGRpc2FibGUgdGhlIGZpcnN0UGxheSBmbGFnLlxuICAgICAgICAvLyBJZiB3ZSBkaXNhYmxlIHRoZSBmbGFnIGhlcmUsIG9uQ2xpY2sgd2FzIHRyaWdnZXJlZCBwcm9ncmFtbWF0aWNhbGx5IGluc3RlYWQgb2YgYnkgYSB1c2VyIGludGVyYWN0aW9uLCBhbmRcbiAgICAgICAgLy8gcGxheWJhY2sgaXMgYmxvY2tlZCAoZS5nLiBvbiBtb2JpbGUgZGV2aWNlcyBkdWUgdG8gdGhlIHByb2dyYW1tYXRpYyBwbGF5KCkgY2FsbCksIHdlIGxvb3NlIHRoZSBjaGFuY2UgdG9cbiAgICAgICAgLy8gZXZlciBzdGFydCBwbGF5YmFjayB0aHJvdWdoIGEgdXNlciBpbnRlcmFjdGlvbiBhZ2FpbiB3aXRoIHRoaXMgYnV0dG9uLlxuICAgICAgICB0b2dnbGVQbGF5YmFjaygpO1xuXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5lbnRlckZ1bGxzY3JlZW5PbkluaXRpYWxQbGF5YmFjaykge1xuICAgICAgICAgIHBsYXllci5zZXRWaWV3TW9kZShwbGF5ZXIuZXhwb3J0cy5WaWV3TW9kZS5GdWxsc2NyZWVuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGV0IG5vdyA9IERhdGUubm93KCk7XG5cbiAgICAgIGlmIChub3cgLSBjbGlja1RpbWUgPCAyMDApIHtcbiAgICAgICAgLy8gV2UgaGF2ZSBhIGRvdWJsZSBjbGljayBpbnNpZGUgdGhlIDIwMG1zIGludGVydmFsLCBqdXN0IHRvZ2dsZSBmdWxsc2NyZWVuIG1vZGVcbiAgICAgICAgdG9nZ2xlRnVsbHNjcmVlbigpO1xuICAgICAgICBkb3VibGVDbGlja1RpbWUgPSBub3c7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAobm93IC0gY2xpY2tUaW1lIDwgNTAwKSB7XG4gICAgICAgIC8vIFdlIGhhdmUgYSBkb3VibGUgY2xpY2sgaW5zaWRlIHRoZSA1MDBtcyBpbnRlcnZhbCwgdW5kbyBwbGF5YmFjayB0b2dnbGUgYW5kIHRvZ2dsZSBmdWxsc2NyZWVuIG1vZGVcbiAgICAgICAgdG9nZ2xlRnVsbHNjcmVlbigpO1xuICAgICAgICB0b2dnbGVQbGF5YmFjaygpO1xuICAgICAgICBkb3VibGVDbGlja1RpbWUgPSBub3c7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2xpY2tUaW1lID0gbm93O1xuXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKERhdGUubm93KCkgLSBkb3VibGVDbGlja1RpbWUgPiAyMDApIHtcbiAgICAgICAgICAvLyBObyBkb3VibGUgY2xpY2sgZGV0ZWN0ZWQsIHNvIHdlIHRvZ2dsZSBwbGF5YmFjayBhbmQgd2FpdCB3aGF0IGhhcHBlbnMgbmV4dFxuICAgICAgICAgIHRvZ2dsZVBsYXliYWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIDIwMCk7XG4gICAgfSk7XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheSwgKCkgPT4ge1xuICAgICAgLy8gUGxheWJhY2sgaGFzIHJlYWxseSBzdGFydGVkLCB3ZSBjYW4gZGlzYWJsZSB0aGUgZmxhZyB0byBzd2l0Y2ggdG8gbm9ybWFsIHRvZ2dsZSBidXR0b24gaGFuZGxpbmdcbiAgICAgIGZpcnN0UGxheSA9IGZhbHNlO1xuICAgIH0pO1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50Lldhcm5pbmcsIChldmVudDogV2FybmluZ0V2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQuY29kZSA9PT0gcGxheWVyLmV4cG9ydHMuV2FybmluZ0NvZGUuUExBWUJBQ0tfQ09VTERfTk9UX0JFX1NUQVJURUQpIHtcbiAgICAgICAgLy8gaWYgcGxheWJhY2sgY291bGQgbm90IGJlIHN0YXJ0ZWQsIHJlc2V0IHRoZSBmaXJzdCBwbGF5IGZsYWcgYXMgd2UgbmVlZCB0aGUgdXNlciBpbnRlcmFjdGlvbiB0byBzdGFydFxuICAgICAgICBmaXJzdFBsYXkgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3Qgc3VwcHJlc3NQbGF5QnV0dG9uVHJhbnNpdGlvbkFuaW1hdGlvbiA9ICgpID0+IHtcbiAgICAgIC8vIERpc2FibGUgdGhlIGN1cnJlbnQgYW5pbWF0aW9uXG4gICAgICB0aGlzLnNldFRyYW5zaXRpb25BbmltYXRpb25zRW5hYmxlZChmYWxzZSk7XG5cbiAgICAgIC8vIEVuYWJsZSB0aGUgdHJhbnNpdGlvbiBhbmltYXRpb25zIGZvciB0aGUgbmV4dCBzdGF0ZSBjaGFuZ2VcbiAgICAgIHRoaXMub25Ub2dnbGUuc3Vic2NyaWJlT25jZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0VHJhbnNpdGlvbkFuaW1hdGlvbnNFbmFibGVkKHRydWUpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIEhpZGUgdGhlIHBsYXkgYnV0dG9uIGFuaW1hdGlvbiB3aGVuIHRoZSBVSSBpcyBsb2FkZWQgKGl0IHNob3VsZCBvbmx5IGJlIGFuaW1hdGVkIG9uIHN0YXRlIGNoYW5nZXMpXG4gICAgc3VwcHJlc3NQbGF5QnV0dG9uVHJhbnNpdGlvbkFuaW1hdGlvbigpO1xuXG4gICAgY29uc3QgaXNBdXRvcGxheUVuYWJsZWQgPSBwbGF5ZXIuZ2V0Q29uZmlnKCkucGxheWJhY2sgJiYgQm9vbGVhbihwbGF5ZXIuZ2V0Q29uZmlnKCkucGxheWJhY2suYXV0b3BsYXkpO1xuICAgIC8vIFdlIG9ubHkga25vdyBpZiBhbiBhdXRvcGxheSBhdHRlbXB0IGlzIHVwY29taW5nIGlmIHRoZSBwbGF5ZXIgaXMgbm90IHlldCByZWFkeS4gSXQgdGhlIHBsYXllciBpcyBhbHJlYWR5IHJlYWR5LFxuICAgIC8vIHRoZSBhdHRlbXB0IG1pZ2h0IGJlIHVwY29taW5nIG9yIG1pZ2h0IGhhdmUgYWxyZWFkeSBoYXBwZW5lZCwgYnV0IHdlIGRvbid0IGhhdmUgdG8gaGFuZGxlIHRoYXQgYmVjYXVzZSB3ZSBjYW5cbiAgICAvLyBzaW1wbHkgcmVseSBvbiBpc1BsYXlpbmcgYW5kIHRoZSBwbGF5IHN0YXRlIGV2ZW50cy5cbiAgICBjb25zdCBpc0F1dG9wbGF5VXBjb21pbmcgPSAhcGxheWVyLmdldFNvdXJjZSgpICYmIGlzQXV0b3BsYXlFbmFibGVkO1xuXG4gICAgLy8gSGlkZSB0aGUgcGxheSBidXR0b24gd2hlbiB0aGUgcGxheWVyIGlzIGFscmVhZHkgcGxheWluZyBvciBhdXRvcGxheSBpcyB1cGNvbWluZ1xuICAgIGlmIChwbGF5ZXIuaXNQbGF5aW5nKCkgfHwgaXNBdXRvcGxheVVwY29taW5nKSB7XG4gICAgICAvLyBIaWRlIHRoZSBwbGF5IGJ1dHRvbiAoc3dpdGNoIHRvIHBsYXlpbmcgc3RhdGUpXG4gICAgICB0aGlzLm9uKCk7XG4gICAgICAvLyBEaXNhYmxlIHRoZSBhbmltYXRpb24gb2YgdGhlIHBsYXlpbmcgc3RhdGUgc3dpdGNoXG4gICAgICBzdXBwcmVzc1BsYXlCdXR0b25UcmFuc2l0aW9uQW5pbWF0aW9uKCk7XG5cbiAgICAgIC8vIFNob3cgdGhlIHBsYXkgYnV0dG9uIHdpdGhvdXQgYW4gYW5pbWF0aW9uIGlmIGEgcGxheSBhdHRlbXB0IGlzIGJsb2NrZWRcbiAgICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5XYXJuaW5nLCAoZXZlbnQ6IFdhcm5pbmdFdmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQuY29kZSA9PT0gcGxheWVyLmV4cG9ydHMuV2FybmluZ0NvZGUuUExBWUJBQ0tfQ09VTERfTk9UX0JFX1NUQVJURUQpIHtcbiAgICAgICAgICBzdXBwcmVzc1BsYXlCdXR0b25UcmFuc2l0aW9uQW5pbWF0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCB0b0RvbUVsZW1lbnQoKTogRE9NIHtcbiAgICBsZXQgYnV0dG9uRWxlbWVudCA9IHN1cGVyLnRvRG9tRWxlbWVudCgpO1xuXG4gICAgLy8gQWRkIGNoaWxkIHRoYXQgY29udGFpbnMgdGhlIHBsYXkgYnV0dG9uIGltYWdlXG4gICAgLy8gU2V0dGluZyB0aGUgaW1hZ2UgZGlyZWN0bHkgb24gdGhlIGJ1dHRvbiBkb2VzIG5vdCB3b3JrIHRvZ2V0aGVyIHdpdGggc2NhbGluZyBhbmltYXRpb25zLCBiZWNhdXNlIHRoZSBidXR0b25cbiAgICAvLyBjYW4gY292ZXIgdGhlIHdob2xlIHZpZGVvIHBsYXllciBhcmUgYW5kIHNjYWxpbmcgd291bGQgZXh0ZW5kIGl0IGJleW9uZC4gQnkgYWRkaW5nIGFuIGlubmVyIGVsZW1lbnQsIGNvbmZpbmVkXG4gICAgLy8gdG8gdGhlIHNpemUgaWYgdGhlIGltYWdlLCBpdCBjYW4gc2NhbGUgaW5zaWRlIHRoZSBwbGF5ZXIgd2l0aG91dCBvdmVyc2hvb3RpbmcuXG4gICAgYnV0dG9uRWxlbWVudC5hcHBlbmQobmV3IERPTSgnZGl2Jywge1xuICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ2ltYWdlJyksXG4gICAgfSkpO1xuXG4gICAgcmV0dXJuIGJ1dHRvbkVsZW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICogRW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgcGxheSBzdGF0ZSB0cmFuc2l0aW9uIGFuaW1hdGlvbnMgb2YgdGhlIHBsYXkgYnV0dG9uIGltYWdlLiBDYW4gYmUgdXNlZCB0byBzdXBwcmVzc1xuICAgKiBhbmltYXRpb25zLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGVuYWJsZWQgdHJ1ZSB0byBlbmFibGUgdGhlIGFuaW1hdGlvbnMgKGRlZmF1bHQpLCBmYWxzZSB0byBkaXNhYmxlIHRoZW1cbiAgICovXG4gIHByb3RlY3RlZCBzZXRUcmFuc2l0aW9uQW5pbWF0aW9uc0VuYWJsZWQoZW5hYmxlZDogYm9vbGVhbik6IHZvaWQge1xuICAgIGNvbnN0IG5vVHJhbnNpdGlvbkFuaW1hdGlvbnNDbGFzcyA9IHRoaXMucHJlZml4Q3NzKCduby10cmFuc2l0aW9uLWFuaW1hdGlvbnMnKTtcblxuICAgIGlmIChlbmFibGVkKSB7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5yZW1vdmVDbGFzcyhub1RyYW5zaXRpb25BbmltYXRpb25zQ2xhc3MpO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMuZ2V0RG9tRWxlbWVudCgpLmhhc0NsYXNzKG5vVHJhbnNpdGlvbkFuaW1hdGlvbnNDbGFzcykpIHtcbiAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmFkZENsYXNzKG5vVHJhbnNpdGlvbkFuaW1hdGlvbnNDbGFzcyk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge0J1dHRvbkNvbmZpZywgQnV0dG9ufSBmcm9tICcuL2J1dHRvbic7XG5pbXBvcnQge0RPTX0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIGJ1dHRvbiB0byBwbGF5L3JlcGxheSBhIHZpZGVvLlxuICovXG5leHBvcnQgY2xhc3MgSHVnZVJlcGxheUJ1dHRvbiBleHRlbmRzIEJ1dHRvbjxCdXR0b25Db25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IEJ1dHRvbkNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktaHVnZXJlcGxheWJ1dHRvbicsXG4gICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcigncmVwbGF5JyksXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMub25DbGljay5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgcGxheWVyLnBsYXkoJ3VpJyk7XG4gICAgfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdG9Eb21FbGVtZW50KCk6IERPTSB7XG4gICAgbGV0IGJ1dHRvbkVsZW1lbnQgPSBzdXBlci50b0RvbUVsZW1lbnQoKTtcblxuICAgIC8vIEFkZCBjaGlsZCB0aGF0IGNvbnRhaW5zIHRoZSBwbGF5IGJ1dHRvbiBpbWFnZVxuICAgIC8vIFNldHRpbmcgdGhlIGltYWdlIGRpcmVjdGx5IG9uIHRoZSBidXR0b24gZG9lcyBub3Qgd29yayB0b2dldGhlciB3aXRoIHNjYWxpbmcgYW5pbWF0aW9ucywgYmVjYXVzZSB0aGUgYnV0dG9uXG4gICAgLy8gY2FuIGNvdmVyIHRoZSB3aG9sZSB2aWRlbyBwbGF5ZXIgYXJlIGFuZCBzY2FsaW5nIHdvdWxkIGV4dGVuZCBpdCBiZXlvbmQuIEJ5IGFkZGluZyBhbiBpbm5lciBlbGVtZW50LCBjb25maW5lZFxuICAgIC8vIHRvIHRoZSBzaXplIGlmIHRoZSBpbWFnZSwgaXQgY2FuIHNjYWxlIGluc2lkZSB0aGUgcGxheWVyIHdpdGhvdXQgb3ZlcnNob290aW5nLlxuICAgIGJ1dHRvbkVsZW1lbnQuYXBwZW5kKG5ldyBET00oJ2RpdicsIHtcbiAgICAgICdjbGFzcyc6IHRoaXMucHJlZml4Q3NzKCdpbWFnZScpLFxuICAgIH0pKTtcblxuICAgIHJldHVybiBidXR0b25FbGVtZW50O1xuICB9XG59IiwiaW1wb3J0IHtMaXN0U2VsZWN0b3IsIExpc3RTZWxlY3RvckNvbmZpZ30gZnJvbSAnLi9saXN0c2VsZWN0b3InO1xuaW1wb3J0IHtET019IGZyb20gJy4uL2RvbSc7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG5leHBvcnQgY2xhc3MgSXRlbVNlbGVjdGlvbkxpc3QgZXh0ZW5kcyBMaXN0U2VsZWN0b3I8TGlzdFNlbGVjdG9yQ29uZmlnPiB7XG5cbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ0xBU1NfU0VMRUNURUQgPSAnc2VsZWN0ZWQnO1xuXG4gIHByaXZhdGUgbGlzdEVsZW1lbnQ6IERPTTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IExpc3RTZWxlY3RvckNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIHRhZzogJ3VsJyxcbiAgICAgIGNzc0NsYXNzOiAndWktaXRlbXNlbGVjdGlvbmxpc3QnLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBpc0FjdGl2ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtcy5sZW5ndGggPiAxO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRvRG9tRWxlbWVudCgpOiBET00ge1xuICAgIGxldCBsaXN0RWxlbWVudCA9IG5ldyBET00oJ3VsJywge1xuICAgICAgJ2lkJzogdGhpcy5jb25maWcuaWQsXG4gICAgICAnY2xhc3MnOiB0aGlzLmdldENzc0NsYXNzZXMoKSxcbiAgICB9KTtcblxuICAgIHRoaXMubGlzdEVsZW1lbnQgPSBsaXN0RWxlbWVudDtcbiAgICB0aGlzLnVwZGF0ZURvbUl0ZW1zKCk7XG5cbiAgICByZXR1cm4gbGlzdEVsZW1lbnQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgdXBkYXRlRG9tSXRlbXMoc2VsZWN0ZWRWYWx1ZTogc3RyaW5nID0gbnVsbCkge1xuICAgIC8vIERlbGV0ZSBhbGwgY2hpbGRyZW5cbiAgICB0aGlzLmxpc3RFbGVtZW50LmVtcHR5KCk7XG5cbiAgICBsZXQgc2VsZWN0ZWRMaXN0SXRlbTogRE9NID0gbnVsbDtcblxuICAgIGNvbnN0IHNlbGVjdEl0ZW0gPSAobGlzdEl0ZW06IERPTSkgPT4ge1xuICAgICAgbGlzdEl0ZW0uYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoSXRlbVNlbGVjdGlvbkxpc3QuQ0xBU1NfU0VMRUNURUQpKTtcbiAgICB9O1xuXG4gICAgY29uc3QgZGVzZWxlY3RJdGVtID0gKGxpc3RJdGVtOiBET00pID0+IHtcbiAgICAgIGxpc3RJdGVtLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4Q3NzKEl0ZW1TZWxlY3Rpb25MaXN0LkNMQVNTX1NFTEVDVEVEKSk7XG4gICAgfTtcblxuICAgIGZvciAobGV0IGl0ZW0gb2YgdGhpcy5pdGVtcykge1xuICAgICAgbGV0IGxpc3RJdGVtID0gbmV3IERPTSgnbGknLCB7XG4gICAgICAgICd0eXBlJzogJ2xpJyxcbiAgICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ3VpLXNlbGVjdGlvbmxpc3RpdGVtJyksXG4gICAgICB9KS5hcHBlbmQobmV3IERPTSgnYScsIHtcbiAgICAgIH0pLmh0bWwoaTE4bi5wZXJmb3JtTG9jYWxpemF0aW9uKGl0ZW0ubGFiZWwpKSk7XG5cbiAgICAgIGlmICghc2VsZWN0ZWRMaXN0SXRlbSkge1xuICAgICAgICBpZiAoc2VsZWN0ZWRWYWx1ZSA9PSBudWxsKSB7IC8vIElmIHRoZXJlIGlzIG5vIHByZS1zZWxlY3RlZCB2YWx1ZSwgc2VsZWN0IHRoZSBmaXJzdCBvbmVcbiAgICAgICAgICBzZWxlY3RlZExpc3RJdGVtID0gbGlzdEl0ZW07XG4gICAgICAgIH0gZWxzZSBpZiAoU3RyaW5nKHNlbGVjdGVkVmFsdWUpID09PSBpdGVtLmtleSkgeyAvLyBjb252ZXJ0IHNlbGVjdGVkVmFsdWUgdG8gc3RyaW5nIHRvIGNhdGNoICdudWxsJy9udWxsIGNhc2VcbiAgICAgICAgICBzZWxlY3RlZExpc3RJdGVtID0gbGlzdEl0ZW07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSGFuZGxlIGxpc3QgaXRlbSBzZWxlY3Rpb25zXG4gICAgICBsaXN0SXRlbS5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIC8vIERlc2VsZWN0IHRoZSBwcmV2aW91cyBpdGVtIChpZiB0aGVyZSB3YXMgYSBzZWxlY3RlZCBpdGVtKVxuICAgICAgICBpZiAoc2VsZWN0ZWRMaXN0SXRlbSkge1xuICAgICAgICAgIGRlc2VsZWN0SXRlbShzZWxlY3RlZExpc3RJdGVtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNlbGVjdCB0aGUgY2xpY2tlZCBpdGVtXG4gICAgICAgIHNlbGVjdGVkTGlzdEl0ZW0gPSBsaXN0SXRlbTtcbiAgICAgICAgc2VsZWN0SXRlbShsaXN0SXRlbSk7XG5cbiAgICAgICAgLy8gRmlyZSB0aGUgZXZlbnRcbiAgICAgICAgdGhpcy5vbkl0ZW1TZWxlY3RlZEV2ZW50KGl0ZW0ua2V5LCBmYWxzZSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gU2VsZWN0IGRlZmF1bHQgaXRlbVxuICAgICAgaWYgKHNlbGVjdGVkTGlzdEl0ZW0pIHtcbiAgICAgICAgc2VsZWN0SXRlbShzZWxlY3RlZExpc3RJdGVtKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5saXN0RWxlbWVudC5hcHBlbmQobGlzdEl0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBvbkl0ZW1BZGRlZEV2ZW50KHZhbHVlOiBzdHJpbmcpIHtcbiAgICBzdXBlci5vbkl0ZW1BZGRlZEV2ZW50KHZhbHVlKTtcbiAgICB0aGlzLnVwZGF0ZURvbUl0ZW1zKHRoaXMuc2VsZWN0ZWRJdGVtKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkl0ZW1SZW1vdmVkRXZlbnQodmFsdWU6IHN0cmluZykge1xuICAgIHN1cGVyLm9uSXRlbVJlbW92ZWRFdmVudCh2YWx1ZSk7XG4gICAgdGhpcy51cGRhdGVEb21JdGVtcyh0aGlzLnNlbGVjdGVkSXRlbSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25JdGVtU2VsZWN0ZWRFdmVudCh2YWx1ZTogc3RyaW5nLCB1cGRhdGVEb21JdGVtczogYm9vbGVhbiA9IHRydWUpIHtcbiAgICBzdXBlci5vbkl0ZW1TZWxlY3RlZEV2ZW50KHZhbHVlKTtcbiAgICBpZiAodXBkYXRlRG9tSXRlbXMpIHtcbiAgICAgIHRoaXMudXBkYXRlRG9tSXRlbXModmFsdWUpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHtDb21wb25lbnRDb25maWcsIENvbXBvbmVudH0gZnJvbSAnLi9jb21wb25lbnQnO1xuaW1wb3J0IHtET019IGZyb20gJy4uL2RvbSc7XG5pbXBvcnQge0V2ZW50RGlzcGF0Y2hlciwgRXZlbnQsIE5vQXJnc30gZnJvbSAnLi4vZXZlbnRkaXNwYXRjaGVyJztcbmltcG9ydCB7IExvY2FsaXphYmxlVGV4dCwgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgYSB7QGxpbmsgTGFiZWx9IGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMYWJlbENvbmZpZyBleHRlbmRzIENvbXBvbmVudENvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgdGV4dCBhcyBzdHJpbmcgb3IgbG9jYWxpemUgY2FsbGJhY2sgb24gdGhlIGxhYmVsLlxuICAgKi9cbiAgdGV4dD86IExvY2FsaXphYmxlVGV4dDtcblxuICAvKipcbiAgICogV0NBRzIwIHN0YW5kYXJkOiBBc3NvY2lhdGUgbGFiZWwgdG8gZm9ybSBjb250cm9sLlxuICAgKi9cbiAgZm9yPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgc2ltcGxlIHRleHQgbGFiZWwuXG4gKlxuICogRE9NIGV4YW1wbGU6XG4gKiA8Y29kZT5cbiAqICAgICA8c3BhbiBjbGFzcz0ndWktbGFiZWwnPi4uLnNvbWUgdGV4dC4uLjwvc3Bhbj5cbiAqIDwvY29kZT5cbiAqL1xuZXhwb3J0IGNsYXNzIExhYmVsPENvbmZpZyBleHRlbmRzIExhYmVsQ29uZmlnPiBleHRlbmRzIENvbXBvbmVudDxDb25maWc+IHtcblxuICBwcml2YXRlIHRleHQ6IExvY2FsaXphYmxlVGV4dDtcblxuICBwcml2YXRlIGxhYmVsRXZlbnRzID0ge1xuICAgIG9uQ2xpY2s6IG5ldyBFdmVudERpc3BhdGNoZXI8TGFiZWw8Q29uZmlnPiwgTm9BcmdzPigpLFxuICAgIG9uVGV4dENoYW5nZWQ6IG5ldyBFdmVudERpc3BhdGNoZXI8TGFiZWw8Q29uZmlnPiwgc3RyaW5nPigpLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29uZmlnID0ge30gYXMgQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktbGFiZWwnLFxuICAgIH0gYXMgQ29uZmlnLCB0aGlzLmNvbmZpZyk7XG4gICAgdGhpcy50ZXh0ID0gdGhpcy5jb25maWcudGV4dDtcbiAgfVxuXG4gIHByb3RlY3RlZCB0b0RvbUVsZW1lbnQoKTogRE9NIHtcbiAgICBjb25zdCB0YWdOYW1lID0gdGhpcy5jb25maWcuZm9yICE9IG51bGwgPyAnbGFiZWwnIDogJ3NwYW4nO1xuXG4gICAgbGV0IGxhYmVsRWxlbWVudCA9IG5ldyBET00odGFnTmFtZSwge1xuICAgICAgJ2lkJzogdGhpcy5jb25maWcuaWQsXG4gICAgICAnZm9yJzogdGhpcy5jb25maWcuZm9yLFxuICAgICAgJ2NsYXNzJzogdGhpcy5nZXRDc3NDbGFzc2VzKCksXG4gICAgfSkuaHRtbChpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24odGhpcy50ZXh0KSk7XG5cbiAgICBsYWJlbEVsZW1lbnQub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5vbkNsaWNrRXZlbnQoKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBsYWJlbEVsZW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB0ZXh0IG9uIHRoaXMgbGFiZWwuXG4gICAqIEBwYXJhbSB0ZXh0XG4gICAqL1xuICBzZXRUZXh0KHRleHQ6IExvY2FsaXphYmxlVGV4dCkge1xuICAgIGlmICh0ZXh0ID09PSB0aGlzLnRleHQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgIGNvbnN0IGxvY2FsaXplZFRleHQgPSBpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24odGV4dCk7XG4gICAgdGhpcy5nZXREb21FbGVtZW50KCkuaHRtbChsb2NhbGl6ZWRUZXh0KTtcbiAgICB0aGlzLm9uVGV4dENoYW5nZWRFdmVudChsb2NhbGl6ZWRUZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB0ZXh0IG9uIHRoaXMgbGFiZWwuXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHRleHQgb24gdGhlIGxhYmVsXG4gICAqL1xuICBnZXRUZXh0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGkxOG4ucGVyZm9ybUxvY2FsaXphdGlvbih0aGlzLnRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyB0aGUgdGV4dCBvbiB0aGlzIGxhYmVsLlxuICAgKi9cbiAgY2xlYXJUZXh0KCkge1xuICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmh0bWwoJycpO1xuICAgIHRoaXMub25UZXh0Q2hhbmdlZEV2ZW50KG51bGwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRlc3RzIGlmIHRoZSBsYWJlbCBpcyBlbXB0eSBhbmQgZG9lcyBub3QgY29udGFpbiBhbnkgdGV4dC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgbGFiZWwgaXMgZW1wdHksIGVsc2UgZmFsc2VcbiAgICovXG4gIGlzRW1wdHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLnRleHQ7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgdGhlIHtAbGluayAjb25DbGlja30gZXZlbnQuXG4gICAqIENhbiBiZSB1c2VkIGJ5IHN1YmNsYXNzZXMgdG8gbGlzdGVuIHRvIHRoaXMgZXZlbnQgd2l0aG91dCBzdWJzY3JpYmluZyBhbiBldmVudCBsaXN0ZW5lciBieSBvdmVyd3JpdGluZyB0aGUgbWV0aG9kXG4gICAqIGFuZCBjYWxsaW5nIHRoZSBzdXBlciBtZXRob2QuXG4gICAqL1xuICBwcm90ZWN0ZWQgb25DbGlja0V2ZW50KCkge1xuICAgIHRoaXMubGFiZWxFdmVudHMub25DbGljay5kaXNwYXRjaCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB0aGUge0BsaW5rICNvbkNsaWNrfSBldmVudC5cbiAgICogQ2FuIGJlIHVzZWQgYnkgc3ViY2xhc3NlcyB0byBsaXN0ZW4gdG8gdGhpcyBldmVudCB3aXRob3V0IHN1YnNjcmliaW5nIGFuIGV2ZW50IGxpc3RlbmVyIGJ5IG92ZXJ3cml0aW5nIHRoZSBtZXRob2RcbiAgICogYW5kIGNhbGxpbmcgdGhlIHN1cGVyIG1ldGhvZC5cbiAgICovXG4gIHByb3RlY3RlZCBvblRleHRDaGFuZ2VkRXZlbnQodGV4dDogc3RyaW5nKSB7XG4gICAgdGhpcy5sYWJlbEV2ZW50cy5vblRleHRDaGFuZ2VkLmRpc3BhdGNoKHRoaXMsIHRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgbGFiZWwgaXMgY2xpY2tlZC5cbiAgICogQHJldHVybnMge0V2ZW50PExhYmVsPExhYmVsQ29uZmlnPiwgTm9BcmdzPn1cbiAgICovXG4gIGdldCBvbkNsaWNrKCk6IEV2ZW50PExhYmVsPExhYmVsQ29uZmlnPiwgTm9BcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMubGFiZWxFdmVudHMub25DbGljay5nZXRFdmVudCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgdGV4dCBvbiB0aGUgbGFiZWwgaXMgY2hhbmdlZC5cbiAgICogQHJldHVybnMge0V2ZW50PExhYmVsPExhYmVsQ29uZmlnPiwgc3RyaW5nPn1cbiAgICovXG4gIGdldCBvblRleHRDaGFuZ2VkKCk6IEV2ZW50PExhYmVsPExhYmVsQ29uZmlnPiwgc3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMubGFiZWxFdmVudHMub25UZXh0Q2hhbmdlZC5nZXRFdmVudCgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBUb2dnbGVCdXR0b24sIFRvZ2dsZUJ1dHRvbkNvbmZpZyB9IGZyb20gJy4vdG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7IExpc3RJdGVtLCBMaXN0U2VsZWN0b3IsIExpc3RTZWxlY3RvckNvbmZpZyB9IGZyb20gJy4vbGlzdHNlbGVjdG9yJztcbmltcG9ydCB7RE9NfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IFVJSW5zdGFuY2VNYW5hZ2VyIH0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IEFycmF5VXRpbHMgfSBmcm9tICcuLi9hcnJheXV0aWxzJztcblxuLyoqXG4gKiBBIGVsZW1lbnQgdG8gc2VsZWN0IGEgc2luZ2xlIGl0ZW0gb3V0IG9mIGEgbGlzdCBvZiBhdmFpbGFibGUgaXRlbXMuXG4gKlxuICogRE9NIGV4YW1wbGU6XG4gKiA8Y29kZT5cbiAqICAgPGRpdiBjbGFzcz0ndWktbGlzdGJveCc+XG4gKiAgICAgPGJ1dHRvbiBjbGFzcz0ndWktbGlzdGJveC1idXR0b24nPmxhYmVsPC9idXR0b24+XG4gKiAgICAgLi4uXG4gKiAgIDwvZGl2XG4gKiA8L2NvZGU+XG4gKi9cbi8vIFRPRE86IGNoYW5nZSBMaXN0U2VsZWN0b3IgdG8gZXh0ZW5kcyBjb250YWluZXIgaW4gdjQgdG8gaW1wcm92ZSB1c2FnZSBvZiBMaXN0Qm94LlxuLy8gICAgICAgQ3VycmVudGx5IHdlIGFyZSBjcmVhdGluZyB0aGUgZG9tIGVsZW1lbnQgb2YgdGhlIGxpc3QgYm94IHdpdGggY2hpbGQgZWxlbWVudHMgbWFudWFsbHkgaGVyZS5cbi8vICAgICAgIEJ1dCB0aGlzIGZ1bmN0aW9uYWxpdHkgaXMgYWxyZWFkeSBjb3ZlcmVkIHdpdGhpbiB0aGUgQ29udGFpbmVyIGNvbXBvbmVudC5cbmV4cG9ydCBjbGFzcyBMaXN0Qm94IGV4dGVuZHMgTGlzdFNlbGVjdG9yPExpc3RTZWxlY3RvckNvbmZpZz4ge1xuICBwcml2YXRlIGxpc3RCb3hFbGVtZW50OiBET007XG4gIHByaXZhdGUgY29tcG9uZW50czogTGlzdEJveEl0ZW1CdXR0b25bXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogTGlzdFNlbGVjdG9yQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1saXN0Ym94JyxcbiAgICB9IGFzIExpc3RTZWxlY3RvckNvbmZpZywgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgcHVibGljIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIC8vIFN1YnNjcmliZSBiZWZvcmUgc3VwZXIgY2FsbCB0byByZWNlaXZlIGluaXRpYWwgZXZlbnRzXG4gICAgdGhpcy5vbkl0ZW1BZGRlZC5zdWJzY3JpYmUodGhpcy5hZGRMaXN0Qm94RG9tSXRlbSk7XG4gICAgdGhpcy5vbkl0ZW1SZW1vdmVkLnN1YnNjcmliZSh0aGlzLnJlbW92ZUxpc3RCb3hEb21JdGVtKTtcbiAgICB0aGlzLm9uSXRlbVNlbGVjdGVkLnN1YnNjcmliZSh0aGlzLnJlZnJlc2hTZWxlY3RlZEl0ZW0pO1xuXG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0b0RvbUVsZW1lbnQoKTogRE9NIHtcbiAgICBsZXQgbGlzdEJveEVsZW1lbnQgPSBuZXcgRE9NKCdkaXYnLCB7XG4gICAgICAnaWQnOiB0aGlzLmNvbmZpZy5pZCxcbiAgICAgICdjbGFzcyc6IHRoaXMuZ2V0Q3NzQ2xhc3NlcygpLFxuICAgIH0pO1xuXG4gICAgdGhpcy5saXN0Qm94RWxlbWVudCA9IGxpc3RCb3hFbGVtZW50O1xuICAgIHRoaXMuY3JlYXRlTGlzdEJveERvbUl0ZW1zKCk7XG4gICAgdGhpcy5yZWZyZXNoU2VsZWN0ZWRJdGVtKCk7XG5cbiAgICByZXR1cm4gbGlzdEJveEVsZW1lbnQ7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUxpc3RCb3hEb21JdGVtcygpIHtcbiAgICAvLyBEZWxldGUgYWxsIGNoaWxkcmVuXG4gICAgdGhpcy5saXN0Qm94RWxlbWVudC5lbXB0eSgpO1xuICAgIHRoaXMuY29tcG9uZW50cyA9IFtdO1xuXG4gICAgLy8gQWRkIHVwZGF0ZWQgY2hpbGRyZW5cbiAgICBmb3IgKGxldCBpdGVtIG9mIHRoaXMuaXRlbXMpIHtcbiAgICAgIHRoaXMuYWRkTGlzdEJveERvbUl0ZW0odGhpcywgaXRlbS5rZXkpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlTGlzdEJveERvbUl0ZW0gPSAoXzogTGlzdEJveCwga2V5OiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLmdldENvbXBvbmVudEZvcktleShrZXkpO1xuICAgIGlmIChjb21wb25lbnQpIHtcbiAgICAgIGNvbXBvbmVudC5nZXREb21FbGVtZW50KCkucmVtb3ZlKCk7XG4gICAgICBBcnJheVV0aWxzLnJlbW92ZSh0aGlzLmNvbXBvbmVudHMsIGNvbXBvbmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgYWRkTGlzdEJveERvbUl0ZW0gPSAoXzogTGlzdEJveCwga2V5OiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLmdldENvbXBvbmVudEZvcktleShrZXkpO1xuICAgIGNvbnN0IG5ld0l0ZW0gPSB0aGlzLmdldEl0ZW1Gb3JLZXkoa2V5KTtcbiAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAvLyBVcGRhdGUgZXhpc3RpbmcgY29tcG9uZW50XG4gICAgICBjb21wb25lbnQuc2V0VGV4dChuZXdJdGVtLmxhYmVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbGlzdEJveEl0ZW1CdXR0b24gPSB0aGlzLmJ1aWxkTGlzdEJveEl0ZW1CdXR0b24obmV3SXRlbSk7XG5cbiAgICAgIGxpc3RCb3hJdGVtQnV0dG9uLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5oYW5kbGVTZWxlY3Rpb25DaGFuZ2UobGlzdEJveEl0ZW1CdXR0b24pO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuY29tcG9uZW50cy5wdXNoKGxpc3RCb3hJdGVtQnV0dG9uKTtcbiAgICAgIHRoaXMubGlzdEJveEVsZW1lbnQuYXBwZW5kKGxpc3RCb3hJdGVtQnV0dG9uLmdldERvbUVsZW1lbnQoKSk7XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgcmVmcmVzaFNlbGVjdGVkSXRlbSA9ICgpID0+IHtcbiAgICAvLyBUaGlzIGdldHMgY2FsbGVkIHR3aWNlIGJlY2F1c2UgdGhlIGZpcnN0IHRpbWUgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIHVzZXIgY2xpY2tzIG9uIHRoZSBMaXN0Qm94SXRlbUJ1dHRvbi4gQW5kIHRoZVxuICAgIC8vIHNlY29uZCBjYWxsIGNvbWVzIGZyb20gdGhlIHBsYXllciBldmVudCB3aGVuIHRoZSBhY3R1YWwgaXRlbSBpcyBzZWxlY3RlZCAoU3VidGl0bGUgLyBBdWRpb1RyYWNrIGluIHRoaXMgY2FzZSkuXG4gICAgLy8gQXMgdGhpcyBpcyBhIGdlbmVyaWMgY29tcG9uZW50IHdlIGNhbid0IHByb2hpYml0IHRoaXMgYmVoYXZpb3VyLiBXZSBuZWVkIHRvIHRyZWF0IHRoaXMgY29tcG9uZW50IGFzIGl0IGFjdHNcbiAgICAvLyBpbmRlcGVuZGVudCBmcm9tIFBsYXllckV2ZW50cyBhbmQgb24gdGhlIG90aGVyIGhhbmQgd2UgbmVlZCB0byByZWFjdCB0byBQbGF5ZXJFdmVudHMgYXMgaXQgY291bGQgYmUgdHJpZ2dlcmVkXG4gICAgLy8gZnJvbSBvdXRzaWRlLlxuXG4gICAgZm9yIChsZXQgaXRlbSBvZiB0aGlzLml0ZW1zKSB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLmdldENvbXBvbmVudEZvcktleShpdGVtLmtleSk7XG4gICAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgIFN0cmluZyhjb21wb25lbnQua2V5KSA9PT0gU3RyaW5nKHRoaXMuc2VsZWN0ZWRJdGVtKSA/IGNvbXBvbmVudC5vbigpIDogY29tcG9uZW50Lm9mZigpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIGJ1aWxkTGlzdEJveEl0ZW1CdXR0b24obGlzdEl0ZW06IExpc3RJdGVtKTogTGlzdEJveEl0ZW1CdXR0b24ge1xuICAgIHJldHVybiBuZXcgTGlzdEJveEl0ZW1CdXR0b24oe1xuICAgICAga2V5OiBsaXN0SXRlbS5rZXksXG4gICAgICB0ZXh0OiBsaXN0SXRlbS5sYWJlbCxcbiAgICAgIGFyaWFMYWJlbDogbGlzdEl0ZW0uYXJpYUxhYmVsLFxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDb21wb25lbnRGb3JLZXkoa2V5OiBzdHJpbmcpOiBMaXN0Qm94SXRlbUJ1dHRvbiB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50cy5maW5kKChjKSA9PiBrZXkgPT09IGMua2V5KTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlU2VsZWN0aW9uQ2hhbmdlID0gKHNlbmRlcjogTGlzdEJveEl0ZW1CdXR0b24pID0+IHtcbiAgICB0aGlzLm9uSXRlbVNlbGVjdGVkRXZlbnQoc2VuZGVyLmtleSk7XG4gIH07XG59XG5cbmludGVyZmFjZSBMaXN0Qm94SXRlbUJ1dHRvbkNvbmZpZyBleHRlbmRzIFRvZ2dsZUJ1dHRvbkNvbmZpZyB7XG4gIC8qKlxuICAgKiBrZXkgdG8gaWRlbnRpZnkgc2VsZWN0ZWQgaXRlbS4gU2ltaWxhciB0byB0aGUgdmFsdWUgYXR0cmlidXRlIG9mIGFuIHNlbGVjdCBvcHRpb24uXG4gICAqL1xuICBrZXk6IHN0cmluZztcbn1cblxuY2xhc3MgTGlzdEJveEl0ZW1CdXR0b24gZXh0ZW5kcyBUb2dnbGVCdXR0b248TGlzdEJveEl0ZW1CdXR0b25Db25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IExpc3RCb3hJdGVtQnV0dG9uQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktbGlzdGJveC1idXR0b24nLFxuICAgICAgb25DbGFzczogJ3NlbGVjdGVkJyxcbiAgICAgIG9mZkNsYXNzOiAnJyxcbiAgICB9IGFzIExpc3RCb3hJdGVtQnV0dG9uQ29uZmlnLCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBnZXQga2V5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICh0aGlzLmNvbmZpZyBhcyBMaXN0Qm94SXRlbUJ1dHRvbkNvbmZpZykua2V5O1xuICB9XG59XG4iLCJpbXBvcnQge0NvbXBvbmVudCwgQ29tcG9uZW50Q29uZmlnfSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQge0V2ZW50RGlzcGF0Y2hlciwgRXZlbnR9IGZyb20gJy4uL2V2ZW50ZGlzcGF0Y2hlcic7XG5pbXBvcnQge0FycmF5VXRpbHN9IGZyb20gJy4uL2FycmF5dXRpbHMnO1xuaW1wb3J0IHsgTG9jYWxpemFibGVUZXh0LCBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEEgbWFwIG9mIGl0ZW1zIChrZXkvdmFsdWUgLT4gbGFiZWx9IGZvciBhIHtAbGluayBMaXN0U2VsZWN0b3J9IGluIGEge0BsaW5rIExpc3RTZWxlY3RvckNvbmZpZ30uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTGlzdEl0ZW0ge1xuICBrZXk6IHN0cmluZztcbiAgbGFiZWw6IExvY2FsaXphYmxlVGV4dDtcbiAgc29ydGVkSW5zZXJ0PzogYm9vbGVhbjtcbiAgYXJpYUxhYmVsPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEZpbHRlciBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIGZpbHRlciBvdXQgbGlzdCBpdGVtcyBhZGRlZCB0aHJvdWdoIHtAbGluayBMaXN0U2VsZWN0b3IuYWRkSXRlbX0uXG4gKlxuICogVGhpcyBpcyBpbnRlbmRlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggc3ViY2xhc3NlcyB0aGF0IHBvcHVsYXRlIHRoZW1zZWx2ZXMgYXV0b21hdGljYWxseVxuICogdmlhIHRoZSBwbGF5ZXIgQVBJLCBlLmcuIHtAbGluayBTdWJ0aXRsZVNlbGVjdEJveH0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTGlzdEl0ZW1GaWx0ZXIge1xuICAvKipcbiAgICogVGFrZXMgYSBsaXN0IGl0ZW0gYW5kIGRlY2lkZXMgd2hldGhlciBpdCBzaG91bGQgcGFzcyBvciBiZSBkaXNjYXJkZWQuXG4gICAqIEBwYXJhbSB7TGlzdEl0ZW19IGxpc3RJdGVtIHRoZSBpdGVtIHRvIGFwcGx5IHRoZSBmaWx0ZXIgdG9cbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgdG8gbGV0IHRoZSBpdGVtIHBhc3MgdGhyb3VnaCB0aGUgZmlsdGVyLCBmYWxzZSB0byBkaXNjYXJkIHRoZSBpdGVtXG4gICAqL1xuICAobGlzdEl0ZW06IExpc3RJdGVtKTogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBUcmFuc2xhdG9yIGZ1bmN0aW9uIHRvIHRyYW5zbGF0ZSBsYWJlbHMgb2YgbGlzdCBpdGVtcyBhZGRlZCB0aHJvdWdoIHtAbGluayBMaXN0U2VsZWN0b3IuYWRkSXRlbX0uXG4gKlxuICogVGhpcyBpcyBpbnRlbmRlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggc3ViY2xhc3NlcyB0aGF0IHBvcHVsYXRlIHRoZW1zZWx2ZXMgYXV0b21hdGljYWxseVxuICogdmlhIHRoZSBwbGF5ZXIgQVBJLCBlLmcuIHtAbGluayBTdWJ0aXRsZVNlbGVjdEJveH0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTGlzdEl0ZW1MYWJlbFRyYW5zbGF0b3Ige1xuICAvKipcbiAgICogVGFrZXMgYSBsaXN0IGl0ZW0sIG9wdGlvbmFsbHkgY2hhbmdlcyB0aGUgbGFiZWwsIGFuZCByZXR1cm5zIHRoZSBuZXcgbGFiZWwuXG4gICAqIEBwYXJhbSB7TGlzdEl0ZW19IGxpc3RJdGVtIHRoZSBpdGVtIHRvIHRyYW5zbGF0ZVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgdHJhbnNsYXRlZCBvciBvcmlnaW5hbCBsYWJlbFxuICAgKi9cbiAgKGxpc3RJdGVtOiBMaXN0SXRlbSk6IHN0cmluZztcbn1cblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgYSB7QGxpbmsgTGlzdFNlbGVjdG9yfS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMaXN0U2VsZWN0b3JDb25maWcgZXh0ZW5kcyBDb21wb25lbnRDb25maWcge1xuICBpdGVtcz86IExpc3RJdGVtW107XG4gIGZpbHRlcj86IExpc3RJdGVtRmlsdGVyO1xuICB0cmFuc2xhdG9yPzogTGlzdEl0ZW1MYWJlbFRyYW5zbGF0b3I7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBMaXN0U2VsZWN0b3I8Q29uZmlnIGV4dGVuZHMgTGlzdFNlbGVjdG9yQ29uZmlnPiBleHRlbmRzIENvbXBvbmVudDxMaXN0U2VsZWN0b3JDb25maWc+IHtcblxuICBwcm90ZWN0ZWQgaXRlbXM6IExpc3RJdGVtW107XG4gIHByb3RlY3RlZCBzZWxlY3RlZEl0ZW06IHN0cmluZztcblxuICBwcml2YXRlIGxpc3RTZWxlY3RvckV2ZW50cyA9IHtcbiAgICBvbkl0ZW1BZGRlZDogbmV3IEV2ZW50RGlzcGF0Y2hlcjxMaXN0U2VsZWN0b3I8Q29uZmlnPiwgc3RyaW5nPigpLFxuICAgIG9uSXRlbVJlbW92ZWQ6IG5ldyBFdmVudERpc3BhdGNoZXI8TGlzdFNlbGVjdG9yPENvbmZpZz4sIHN0cmluZz4oKSxcbiAgICBvbkl0ZW1TZWxlY3RlZDogbmV3IEV2ZW50RGlzcGF0Y2hlcjxMaXN0U2VsZWN0b3I8Q29uZmlnPiwgc3RyaW5nPigpLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogTGlzdFNlbGVjdG9yQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgaXRlbXM6IFtdLFxuICAgICAgY3NzQ2xhc3M6ICd1aS1saXN0c2VsZWN0b3InLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcblxuICAgIHRoaXMuaXRlbXMgPSB0aGlzLmNvbmZpZy5pdGVtcztcbiAgfVxuXG4gIHByaXZhdGUgZ2V0SXRlbUluZGV4KGtleTogc3RyaW5nKTogbnVtYmVyIHtcbiAgICBmb3IgKGxldCBpbmRleCBpbiB0aGlzLml0ZW1zKSB7XG4gICAgICBpZiAoa2V5ID09PSB0aGlzLml0ZW1zW2luZGV4XS5rZXkpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIGN1cnJlbnQgaXRlbXMgb2YgdGhpcyBzZWxlY3Rvci5cbiAgICogKiBAcmV0dXJucyB7TGlzdEl0ZW1bXX1cbiAgICovXG4gIGdldEl0ZW1zKCk6IExpc3RJdGVtW10ge1xuICAgIHJldHVybiB0aGlzLml0ZW1zO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgc3BlY2lmaWVkIGl0ZW0gaXMgcGFydCBvZiB0aGlzIHNlbGVjdG9yLlxuICAgKiBAcGFyYW0ga2V5IHRoZSBrZXkgb2YgdGhlIGl0ZW0gdG8gY2hlY2tcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGl0ZW0gaXMgcGFydCBvZiB0aGlzIHNlbGVjdG9yLCBlbHNlIGZhbHNlXG4gICAqL1xuICBoYXNJdGVtKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SXRlbUluZGV4KGtleSkgPiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGFuIGl0ZW0gdG8gdGhpcyBzZWxlY3RvciBieSBkb2luZyBhIHNvcnRlZCBpbnNlcnQgb3IgYnkgYXBwZW5kaW5nIHRoZSBlbGVtZW50IHRvIHRoZSBlbmQgb2YgdGhlIGxpc3Qgb2YgaXRlbXMuXG4gICAqIElmIGFuIGl0ZW0gd2l0aCB0aGUgc3BlY2lmaWVkIGtleSBhbHJlYWR5IGV4aXN0cywgaXQgaXMgcmVwbGFjZWQuXG4gICAqIEBwYXJhbSBrZXkgdGhlIGtleSBvZiB0aGUgaXRlbSB0byBhZGRcbiAgICogQHBhcmFtIGxhYmVsIHRoZSAoaHVtYW4tcmVhZGFibGUpIGxhYmVsIG9mIHRoZSBpdGVtIHRvIGFkZFxuICAgKiBAcGFyYW0gc29ydGVkSW5zZXJ0IHdoZXRoZXIgdGhlIGl0ZW0gc2hvdWxkIGJlIGFkZGVkIHJlc3BlY3RpbmcgdGhlIG9yZGVyIG9mIGtleXNcbiAgICogQHBhcmFtIGFyaWFMYWJlbCBjdXN0b20gYXJpYSBsYWJlbCBmb3IgdGhlIGxpc3RJdGVtXG4gICAqL1xuICBhZGRJdGVtKGtleTogc3RyaW5nLCBsYWJlbDogTG9jYWxpemFibGVUZXh0LCBzb3J0ZWRJbnNlcnQgPSBmYWxzZSwgYXJpYUxhYmVsID0gJycpIHtcbiAgICBjb25zdCBsaXN0SXRlbSA9IHsga2V5OiBrZXksIGxhYmVsOiBpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24obGFiZWwpLCAuLi4oYXJpYUxhYmVsICYmIHsgYXJpYUxhYmVsIH0pfTtcblxuICAgIC8vIEFwcGx5IGZpbHRlciBmdW5jdGlvblxuICAgIGlmICh0aGlzLmNvbmZpZy5maWx0ZXIgJiYgIXRoaXMuY29uZmlnLmZpbHRlcihsaXN0SXRlbSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBBcHBseSB0cmFuc2xhdG9yIGZ1bmN0aW9uXG4gICAgaWYgKHRoaXMuY29uZmlnLnRyYW5zbGF0b3IpIHtcbiAgICAgIGxpc3RJdGVtLmxhYmVsID0gdGhpcy5jb25maWcudHJhbnNsYXRvcihsaXN0SXRlbSk7XG4gICAgfVxuXG4gICAgLy8gVHJ5IHRvIHJlbW92ZSBrZXkgZmlyc3QgdG8gZ2V0IG92ZXJ3cml0ZSBiZWhhdmlvciBhbmQgYXZvaWQgZHVwbGljYXRlIGtleXNcbiAgICB0aGlzLnJlbW92ZUl0ZW0oa2V5KTsgLy8gVGhpcyB3aWxsIHRyaWdnZXIgYW4gSXRlbVJlbW92ZWQgYW5kIGFuIEl0ZW1BZGRlZCBldmVudFxuXG4gICAgLy8gQWRkIHRoZSBpdGVtIHRvIHRoZSBsaXN0XG4gICAgaWYgKHNvcnRlZEluc2VydCkge1xuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLml0ZW1zLmZpbmRJbmRleChlbnRyeSA9PiBlbnRyeS5rZXkgPiBrZXkpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICB0aGlzLml0ZW1zLnB1c2gobGlzdEl0ZW0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pdGVtcy5zcGxpY2UoaW5kZXgsIDAsIGxpc3RJdGVtKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pdGVtcy5wdXNoKGxpc3RJdGVtKTtcbiAgICB9XG4gICAgdGhpcy5vbkl0ZW1BZGRlZEV2ZW50KGtleSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbiBpdGVtIGZyb20gdGhpcyBzZWxlY3Rvci5cbiAgICogQHBhcmFtIGtleSB0aGUga2V5IG9mIHRoZSBpdGVtIHRvIHJlbW92ZVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiByZW1vdmFsIHdhcyBzdWNjZXNzZnVsLCBmYWxzZSBpZiB0aGUgaXRlbSBpcyBub3QgcGFydCBvZiB0aGlzIHNlbGVjdG9yXG4gICAqL1xuICByZW1vdmVJdGVtKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgbGV0IGluZGV4ID0gdGhpcy5nZXRJdGVtSW5kZXgoa2V5KTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgQXJyYXlVdGlscy5yZW1vdmUodGhpcy5pdGVtcywgdGhpcy5pdGVtc1tpbmRleF0pO1xuICAgICAgdGhpcy5vbkl0ZW1SZW1vdmVkRXZlbnQoa2V5KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWxlY3RzIGFuIGl0ZW0gZnJvbSB0aGUgaXRlbXMgaW4gdGhpcyBzZWxlY3Rvci5cbiAgICogQHBhcmFtIGtleSB0aGUga2V5IG9mIHRoZSBpdGVtIHRvIHNlbGVjdFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpcyB0aGUgc2VsZWN0aW9uIHdhcyBzdWNjZXNzZnVsLCBmYWxzZSBpZiB0aGUgc2VsZWN0ZWQgaXRlbSBpcyBub3QgcGFydCBvZiB0aGUgc2VsZWN0b3JcbiAgICovXG4gIHNlbGVjdEl0ZW0oa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAoa2V5ID09PSB0aGlzLnNlbGVjdGVkSXRlbSkge1xuICAgICAgLy8gaXRlbUNvbmZpZyBpcyBhbHJlYWR5IHNlbGVjdGVkLCBzdXBwcmVzcyBhbnkgZnVydGhlciBhY3Rpb25cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGxldCBpbmRleCA9IHRoaXMuZ2V0SXRlbUluZGV4KGtleSk7XG5cbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgdGhpcy5zZWxlY3RlZEl0ZW0gPSBrZXk7XG4gICAgICB0aGlzLm9uSXRlbVNlbGVjdGVkRXZlbnQoa2V5KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIHNlbGVjdGVkIGl0ZW0uXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBrZXkgb2YgdGhlIHNlbGVjdGVkIGl0ZW0gb3IgbnVsbCBpZiBubyBpdGVtIGlzIHNlbGVjdGVkXG4gICAqL1xuICBnZXRTZWxlY3RlZEl0ZW0oKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRJdGVtO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGl0ZW1zIGZvciB0aGUgZ2l2ZW4ga2V5IG9yIHVuZGVmaW5lZCBpZiBubyBpdGVtIHdpdGggdGhlIGdpdmVuIGtleSBleGlzdHMuXG4gICAqIEBwYXJhbSBrZXkgdGhlIGtleSBvZiB0aGUgaXRlbSB0byByZXR1cm5cbiAgICogQHJldHVybnMge0xpc3RJdGVtfSB0aGUgaXRlbSB3aXRoIHRoZSByZXF1ZXN0ZWQga2V5LiBVbmRlZmluZWQgaWYgbm8gaXRlbSB3aXRoIHRoZSBnaXZlbiBrZXkgZXhpc3RzLlxuICAgKi9cbiAgZ2V0SXRlbUZvcktleShrZXk6IHN0cmluZyk6IExpc3RJdGVtIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtcy5maW5kKChpdGVtKSA9PiBpdGVtLmtleSA9PT0ga2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTeW5jaHJvbml6ZSB0aGUgY3VycmVudCBpdGVtcyBvZiB0aGlzIHNlbGVjdG9yIHdpdGggdGhlIGdpdmVuIG9uZXMuIFRoaXMgd2lsbCByZW1vdmUgYW5kIGFkZCBpdGVtcyBzZWxlY3RpdmVseS5cbiAgICogRm9yIGVhY2ggcmVtb3ZlZCBpdGVtIHRoZSBJdGVtUmVtb3ZlZEV2ZW50IGFuZCBmb3IgZWFjaCBhZGRlZCBpdGVtIHRoZSBJdGVtQWRkZWRFdmVudCB3aWxsIGJlIHRyaWdnZXJlZC4gRmF2b3VyXG4gICAqIHRoaXMgbWV0aG9kIG92ZXIgdXNpbmcgY2xlYXJJdGVtcyBhbmQgYWRkaW5nIGFsbCBpdGVtcyBhZ2FpbiBhZnRlcndhcmRzLlxuICAgKiBAcGFyYW0gbmV3SXRlbXNcbiAgICovXG4gIHN5bmNocm9uaXplSXRlbXMobmV3SXRlbXM6IExpc3RJdGVtW10pOiB2b2lkIHtcbiAgICBuZXdJdGVtc1xuICAgICAgLmZpbHRlcigoaXRlbSkgPT4gIXRoaXMuaGFzSXRlbShpdGVtLmtleSkpXG4gICAgICAuZm9yRWFjaCgoaXRlbSkgPT4gdGhpcy5hZGRJdGVtKGl0ZW0ua2V5LCBpdGVtLmxhYmVsLCBpdGVtLnNvcnRlZEluc2VydCwgaXRlbS5hcmlhTGFiZWwpKTtcblxuICAgIHRoaXMuaXRlbXNcbiAgICAgIC5maWx0ZXIoKGl0ZW0pID0+IG5ld0l0ZW1zLmZpbHRlcigoaSkgPT4gaS5rZXkgPT09IGl0ZW0ua2V5KS5sZW5ndGggPT09IDApXG4gICAgICAuZm9yRWFjaCgoaXRlbSkgPT4gdGhpcy5yZW1vdmVJdGVtKGl0ZW0ua2V5KSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgaXRlbXMgZnJvbSB0aGlzIHNlbGVjdG9yLlxuICAgKi9cbiAgY2xlYXJJdGVtcygpIHtcbiAgICAvLyBsb2NhbCBjb3B5IGZvciBpdGVyYXRpb24gYWZ0ZXIgY2xlYXJcbiAgICBsZXQgaXRlbXMgPSB0aGlzLml0ZW1zO1xuICAgIC8vIGNsZWFyIGl0ZW1zXG4gICAgdGhpcy5pdGVtcyA9IFtdO1xuXG4gICAgLy8gY2xlYXIgdGhlIHNlbGVjdGlvbiBhcyB0aGUgc2VsZWN0ZWQgaXRlbSBpcyBhbHNvIHJlbW92ZWRcbiAgICB0aGlzLnNlbGVjdGVkSXRlbSA9IG51bGw7XG5cbiAgICAvLyBmaXJlIGV2ZW50c1xuICAgIGZvciAobGV0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgIHRoaXMub25JdGVtUmVtb3ZlZEV2ZW50KGl0ZW0ua2V5KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGl0ZW1zIGluIHRoaXMgc2VsZWN0b3IuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBpdGVtQ291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5pdGVtcykubGVuZ3RoO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uSXRlbUFkZGVkRXZlbnQoa2V5OiBzdHJpbmcpIHtcbiAgICB0aGlzLmxpc3RTZWxlY3RvckV2ZW50cy5vbkl0ZW1BZGRlZC5kaXNwYXRjaCh0aGlzLCBrZXkpO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uSXRlbVJlbW92ZWRFdmVudChrZXk6IHN0cmluZykge1xuICAgIHRoaXMubGlzdFNlbGVjdG9yRXZlbnRzLm9uSXRlbVJlbW92ZWQuZGlzcGF0Y2godGhpcywga2V5KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkl0ZW1TZWxlY3RlZEV2ZW50KGtleTogc3RyaW5nKSB7XG4gICAgdGhpcy5saXN0U2VsZWN0b3JFdmVudHMub25JdGVtU2VsZWN0ZWQuZGlzcGF0Y2godGhpcywga2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gYW4gaXRlbSBpcyBhZGRlZCB0byB0aGUgbGlzdCBvZiBpdGVtcy5cbiAgICogQHJldHVybnMge0V2ZW50PExpc3RTZWxlY3RvcjxDb25maWc+LCBzdHJpbmc+fVxuICAgKi9cbiAgZ2V0IG9uSXRlbUFkZGVkKCk6IEV2ZW50PExpc3RTZWxlY3RvcjxDb25maWc+LCBzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5saXN0U2VsZWN0b3JFdmVudHMub25JdGVtQWRkZWQuZ2V0RXZlbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gYW4gaXRlbSBpcyByZW1vdmVkIGZyb20gdGhlIGxpc3Qgb2YgaXRlbXMuXG4gICAqIEByZXR1cm5zIHtFdmVudDxMaXN0U2VsZWN0b3I8Q29uZmlnPiwgc3RyaW5nPn1cbiAgICovXG4gIGdldCBvbkl0ZW1SZW1vdmVkKCk6IEV2ZW50PExpc3RTZWxlY3RvcjxDb25maWc+LCBzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5saXN0U2VsZWN0b3JFdmVudHMub25JdGVtUmVtb3ZlZC5nZXRFdmVudCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiBhbiBpdGVtIGlzIHNlbGVjdGVkIGZyb20gdGhlIGxpc3Qgb2YgaXRlbXMuXG4gICAqIEByZXR1cm5zIHtFdmVudDxMaXN0U2VsZWN0b3I8Q29uZmlnPiwgc3RyaW5nPn1cbiAgICovXG4gIGdldCBvbkl0ZW1TZWxlY3RlZCgpOiBFdmVudDxMaXN0U2VsZWN0b3I8Q29uZmlnPiwgc3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMubGlzdFNlbGVjdG9yRXZlbnRzLm9uSXRlbVNlbGVjdGVkLmdldEV2ZW50KCk7XG4gIH1cbn0iLCJpbXBvcnQge0xhYmVsQ29uZmlnLCBMYWJlbH0gZnJvbSAnLi9sYWJlbCc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcblxuLyoqXG4gKiBFbnVtZXJhdGVzIHRoZSB0eXBlcyBvZiBjb250ZW50IHRoYXQgdGhlIHtAbGluayBNZXRhZGF0YUxhYmVsfSBjYW4gZGlzcGxheS5cbiAqL1xuZXhwb3J0IGVudW0gTWV0YWRhdGFMYWJlbENvbnRlbnQge1xuICAvKipcbiAgICogVGl0bGUgb2YgdGhlIGRhdGEgc291cmNlLlxuICAgKi9cbiAgVGl0bGUsXG4gIC8qKlxuICAgKiBEZXNjcmlwdGlvbiBmbyB0aGUgZGF0YSBzb3VyY2UuXG4gICAqL1xuICBEZXNjcmlwdGlvbixcbn1cblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3Ige0BsaW5rIE1ldGFkYXRhTGFiZWx9LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1ldGFkYXRhTGFiZWxDb25maWcgZXh0ZW5kcyBMYWJlbENvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiBjb250ZW50IHRoYXQgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiB0aGUgbGFiZWwuXG4gICAqL1xuICBjb250ZW50OiBNZXRhZGF0YUxhYmVsQ29udGVudDtcbn1cblxuLyoqXG4gKiBBIGxhYmVsIHRoYXQgY2FuIGJlIGNvbmZpZ3VyZWQgdG8gZGlzcGxheSBjZXJ0YWluIG1ldGFkYXRhLlxuICovXG5leHBvcnQgY2xhc3MgTWV0YWRhdGFMYWJlbCBleHRlbmRzIExhYmVsPE1ldGFkYXRhTGFiZWxDb25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IE1ldGFkYXRhTGFiZWxDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3NlczogWydsYWJlbC1tZXRhZGF0YScsICdsYWJlbC1tZXRhZGF0YS0nICsgTWV0YWRhdGFMYWJlbENvbnRlbnRbY29uZmlnLmNvbnRlbnRdLnRvTG93ZXJDYXNlKCldLFxuICAgIH0gYXMgTWV0YWRhdGFMYWJlbENvbmZpZywgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuICAgIGxldCB1aWNvbmZpZyA9IHVpbWFuYWdlci5nZXRDb25maWcoKTtcblxuICAgIGxldCBpbml0ID0gKCkgPT4ge1xuICAgICAgc3dpdGNoIChjb25maWcuY29udGVudCkge1xuICAgICAgICBjYXNlIE1ldGFkYXRhTGFiZWxDb250ZW50LlRpdGxlOlxuICAgICAgICAgIHRoaXMuc2V0VGV4dCh1aWNvbmZpZy5tZXRhZGF0YS50aXRsZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTWV0YWRhdGFMYWJlbENvbnRlbnQuRGVzY3JpcHRpb246XG4gICAgICAgICAgdGhpcy5zZXRUZXh0KHVpY29uZmlnLm1ldGFkYXRhLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbGV0IHVubG9hZCA9ICgpID0+IHtcbiAgICAgIHRoaXMuc2V0VGV4dChudWxsKTtcbiAgICB9O1xuXG4gICAgLy8gSW5pdCBsYWJlbFxuICAgIGluaXQoKTtcbiAgICAvLyBDbGVhciBsYWJlbHMgd2hlbiBzb3VyY2UgaXMgdW5sb2FkZWRcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU291cmNlVW5sb2FkZWQsIHVubG9hZCk7XG5cbiAgICB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUoaW5pdCk7XG4gIH1cbn0iLCJpbXBvcnQge1RvZ2dsZUJ1dHRvbiwgVG9nZ2xlQnV0dG9uQ29uZmlnfSBmcm9tICcuL3RvZ2dsZWJ1dHRvbic7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBidXR0b24gdGhhdCB0b2dnbGVzIEFwcGxlIG1hY09TIHBpY3R1cmUtaW4tcGljdHVyZSBtb2RlLlxuICovXG5leHBvcnQgY2xhc3MgUGljdHVyZUluUGljdHVyZVRvZ2dsZUJ1dHRvbiBleHRlbmRzIFRvZ2dsZUJ1dHRvbjxUb2dnbGVCdXR0b25Db25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFRvZ2dsZUJ1dHRvbkNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktcGlwdG9nZ2xlYnV0dG9uJyxcbiAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdwaWN0dXJlSW5QaWN0dXJlJyksXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGNvbnN0IGlzUGljdHVyZUluUGljdHVyZUF2YWlsYWJsZSA9ICgpID0+IHtcbiAgICAgIHJldHVybiBwbGF5ZXIuaXNWaWV3TW9kZUF2YWlsYWJsZShwbGF5ZXIuZXhwb3J0cy5WaWV3TW9kZS5QaWN0dXJlSW5QaWN0dXJlKTtcbiAgICB9O1xuXG4gICAgY29uc3QgcGljdHVyZUluUGljdHVyZVN0YXRlSGFuZGxlciA9ICgpID0+IHtcbiAgICAgIHBsYXllci5nZXRWaWV3TW9kZSgpID09PSBwbGF5ZXIuZXhwb3J0cy5WaWV3TW9kZS5QaWN0dXJlSW5QaWN0dXJlID8gdGhpcy5vbigpIDogdGhpcy5vZmYoKTtcbiAgICB9O1xuXG4gICAgY29uc3QgcGljdHVyZUluUGljdHVyZUF2YWlsYWJpbGl0eUNoYW5nZWRIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgaXNQaWN0dXJlSW5QaWN0dXJlQXZhaWxhYmxlKCkgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuICAgIH07XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVmlld01vZGVDaGFuZ2VkLCBwaWN0dXJlSW5QaWN0dXJlU3RhdGVIYW5kbGVyKTtcblxuICAgIC8vIEF2YWlsYWJsZSBvbmx5IGluIG91ciBuYXRpdmUgU0RLcyBmb3Igbm93XG4gICAgaWYgKChwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudCBhcyBhbnkpLlZpZXdNb2RlQXZhaWxhYmlsaXR5Q2hhbmdlZCkge1xuICAgICAgcGxheWVyLm9uKFxuICAgICAgICAocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQgYXMgYW55KS5WaWV3TW9kZUF2YWlsYWJpbGl0eUNoYW5nZWQsXG4gICAgICAgIHBpY3R1cmVJblBpY3R1cmVBdmFpbGFiaWxpdHlDaGFuZ2VkSGFuZGxlcixcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKHBpY3R1cmVJblBpY3R1cmVBdmFpbGFiaWxpdHlDaGFuZ2VkSGFuZGxlcik7XG5cbiAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGlmICghaXNQaWN0dXJlSW5QaWN0dXJlQXZhaWxhYmxlKCkpIHtcbiAgICAgICAgaWYgKGNvbnNvbGUpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnUElQIHVuYXZhaWxhYmxlJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB0YXJnZXRWaWV3TW9kZSA9XG4gICAgICAgIHBsYXllci5nZXRWaWV3TW9kZSgpID09PSBwbGF5ZXIuZXhwb3J0cy5WaWV3TW9kZS5QaWN0dXJlSW5QaWN0dXJlXG4gICAgICAgICAgPyBwbGF5ZXIuZXhwb3J0cy5WaWV3TW9kZS5JbmxpbmVcbiAgICAgICAgICA6IHBsYXllci5leHBvcnRzLlZpZXdNb2RlLlBpY3R1cmVJblBpY3R1cmU7XG5cbiAgICAgIHBsYXllci5zZXRWaWV3TW9kZSh0YXJnZXRWaWV3TW9kZSk7XG4gICAgfSk7XG5cbiAgICAvLyBTdGFydHVwIGluaXRcbiAgICBwaWN0dXJlSW5QaWN0dXJlQXZhaWxhYmlsaXR5Q2hhbmdlZEhhbmRsZXIoKTsgLy8gSGlkZSBidXR0b24gaWYgUElQIG5vdCBhdmFpbGFibGVcbiAgICBwaWN0dXJlSW5QaWN0dXJlU3RhdGVIYW5kbGVyKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7U2VsZWN0Qm94fSBmcm9tICcuL3NlbGVjdGJveCc7XG5pbXBvcnQge0xpc3RTZWxlY3RvckNvbmZpZ30gZnJvbSAnLi9saXN0c2VsZWN0b3InO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEEgc2VsZWN0IGJveCBwcm92aWRpbmcgYSBzZWxlY3Rpb24gb2YgZGlmZmVyZW50IHBsYXliYWNrIHNwZWVkcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFBsYXliYWNrU3BlZWRTZWxlY3RCb3ggZXh0ZW5kcyBTZWxlY3RCb3gge1xuICBwcm90ZWN0ZWQgZGVmYXVsdFBsYXliYWNrU3BlZWRzOiBudW1iZXJbXTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IExpc3RTZWxlY3RvckNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcbiAgICB0aGlzLmRlZmF1bHRQbGF5YmFja1NwZWVkcyA9IFswLjI1LCAwLjUsIDEsIDEuNSwgMl07XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzc2VzOiBbJ3VpLXBsYXliYWNrc3BlZWRzZWxlY3Rib3gnXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5hZGREZWZhdWx0SXRlbXMoKTtcblxuICAgIHRoaXMub25JdGVtU2VsZWN0ZWQuc3Vic2NyaWJlKChzZW5kZXI6IFBsYXliYWNrU3BlZWRTZWxlY3RCb3gsIHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgIHBsYXllci5zZXRQbGF5YmFja1NwZWVkKHBhcnNlRmxvYXQodmFsdWUpKTtcbiAgICAgIHRoaXMuc2VsZWN0SXRlbSh2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBzZXREZWZhdWx0VmFsdWUgPSAoKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCBwbGF5YmFja1NwZWVkID0gcGxheWVyLmdldFBsYXliYWNrU3BlZWQoKTtcbiAgICAgIHRoaXMuc2V0U3BlZWQocGxheWJhY2tTcGVlZCk7XG4gICAgfTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5YmFja1NwZWVkQ2hhbmdlZCwgc2V0RGVmYXVsdFZhbHVlKTtcbiAgICB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUoc2V0RGVmYXVsdFZhbHVlKTtcbiAgfVxuXG4gIHNldFNwZWVkKHNwZWVkOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuc2VsZWN0SXRlbShTdHJpbmcoc3BlZWQpKSkge1xuICAgICAgLy8gYSBwbGF5YmFjayBzcGVlZCB3YXMgc2V0IHdoaWNoIGlzIG5vdCBpbiB0aGUgbGlzdCwgYWRkIGl0IHRvIHRoZSBsaXN0IHRvIHNob3cgaXQgdG8gdGhlIHVzZXJcbiAgICAgIHRoaXMuY2xlYXJJdGVtcygpO1xuICAgICAgdGhpcy5hZGREZWZhdWx0SXRlbXMoW3NwZWVkXSk7XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0oU3RyaW5nKHNwZWVkKSk7XG4gICAgfVxuICB9XG5cbiAgYWRkRGVmYXVsdEl0ZW1zKGN1c3RvbUl0ZW1zOiBudW1iZXJbXSA9IFtdKTogdm9pZCB7XG4gICAgY29uc3Qgc29ydGVkU3BlZWRzID0gdGhpcy5kZWZhdWx0UGxheWJhY2tTcGVlZHMuY29uY2F0KGN1c3RvbUl0ZW1zKS5zb3J0KCk7XG5cbiAgICBzb3J0ZWRTcGVlZHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGlmIChlbGVtZW50ICE9PSAxKSB7XG4gICAgICAgIHRoaXMuYWRkSXRlbShTdHJpbmcoZWxlbWVudCksIGAke2VsZW1lbnR9eGApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5hZGRJdGVtKFN0cmluZyhlbGVtZW50KSwgaTE4bi5nZXRMb2NhbGl6ZXIoJ25vcm1hbCcpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNsZWFySXRlbXMoKTogdm9pZCB7XG4gICAgdGhpcy5pdGVtcyA9IFtdO1xuICAgIHRoaXMuc2VsZWN0ZWRJdGVtID0gbnVsbDtcbiAgfVxufSIsImltcG9ydCB7TGFiZWxDb25maWcsIExhYmVsfSBmcm9tICcuL2xhYmVsJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgTGl2ZVN0cmVhbURldGVjdG9yRXZlbnRBcmdzID0gUGxheWVyVXRpbHMuTGl2ZVN0cmVhbURldGVjdG9yRXZlbnRBcmdzO1xuaW1wb3J0IHtQbGF5ZXJVdGlsc30gZnJvbSAnLi4vcGxheWVydXRpbHMnO1xuaW1wb3J0IHtTdHJpbmdVdGlsc30gZnJvbSAnLi4vc3RyaW5ndXRpbHMnO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbmV4cG9ydCBlbnVtIFBsYXliYWNrVGltZUxhYmVsTW9kZSB7XG4gIC8qKlxuICAgKiBEaXNwbGF5cyB0aGUgY3VycmVudCB0aW1lXG4gICAqL1xuICBDdXJyZW50VGltZSxcbiAgLyoqXG4gICAqIERpc3BsYXlzIHRoZSBkdXJhdGlvbiBvZiB0aGUgY29udGVudFxuICAgKi9cbiAgVG90YWxUaW1lLFxuICAvKipcbiAgICogRGlzcGxheXMgdGhlIGN1cnJlbnQgdGltZSBhbmQgdGhlIGR1cmF0aW9uIG9mIHRoZSBjb250ZW50XG4gICAqIEZvcm1hdDogJHtjdXJyZW50VGltZX0gLyAke3RvdGFsVGltZX1cbiAgICovXG4gIEN1cnJlbnRBbmRUb3RhbFRpbWUsXG4gIC8qKlxuICAgKiBEaXNwbGF5cyB0aGUgcmVtYWluaW5nIHRpbWUgb2YgdGhlIGNvbnRlbnRcbiAgICovXG4gIFJlbWFpbmluZ1RpbWUsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGxheWJhY2tUaW1lTGFiZWxDb25maWcgZXh0ZW5kcyBMYWJlbENvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB3aGljaCB0aW1lIHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gdGhlIGxhYmVsLlxuICAgKiBEZWZhdWx0OiBQbGF5YmFja1RpbWVMYWJlbE1vZGUuQ3VycmVudEFuZFRvdGFsVGltZVxuICAgKi9cbiAgdGltZUxhYmVsTW9kZT86IFBsYXliYWNrVGltZUxhYmVsTW9kZTtcbiAgLyoqXG4gICAqIEJvb2xlYW4gaWYgdGhlIGxhYmVsIHNob3VsZCBiZSBoaWRkZW4gaW4gbGl2ZSBwbGF5YmFja1xuICAgKi9cbiAgaGlkZUluTGl2ZVBsYXliYWNrPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBBIGxhYmVsIHRoYXQgZGlzcGxheSB0aGUgY3VycmVudCBwbGF5YmFjayB0aW1lIGFuZCB0aGUgdG90YWwgdGltZSB0aHJvdWdoIHtAbGluayBQbGF5YmFja1RpbWVMYWJlbCNzZXRUaW1lIHNldFRpbWV9XG4gKiBvciBhbnkgc3RyaW5nIHRocm91Z2gge0BsaW5rIFBsYXliYWNrVGltZUxhYmVsI3NldFRleHQgc2V0VGV4dH0uXG4gKi9cbmV4cG9ydCBjbGFzcyBQbGF5YmFja1RpbWVMYWJlbCBleHRlbmRzIExhYmVsPFBsYXliYWNrVGltZUxhYmVsQ29uZmlnPiB7XG5cbiAgcHJpdmF0ZSB0aW1lRm9ybWF0OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBQbGF5YmFja1RpbWVMYWJlbENvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIDxQbGF5YmFja1RpbWVMYWJlbENvbmZpZz57XG4gICAgICBjc3NDbGFzczogJ3VpLXBsYXliYWNrdGltZWxhYmVsJyxcbiAgICAgIHRpbWVMYWJlbE1vZGU6IFBsYXliYWNrVGltZUxhYmVsTW9kZS5DdXJyZW50QW5kVG90YWxUaW1lLFxuICAgICAgaGlkZUluTGl2ZVBsYXliYWNrOiBmYWxzZSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbGV0IGNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG4gICAgbGV0IGxpdmUgPSBmYWxzZTtcbiAgICBsZXQgbGl2ZUNzc0NsYXNzID0gdGhpcy5wcmVmaXhDc3MoJ3VpLXBsYXliYWNrdGltZWxhYmVsLWxpdmUnKTtcbiAgICBsZXQgbGl2ZUVkZ2VDc3NDbGFzcyA9IHRoaXMucHJlZml4Q3NzKCd1aS1wbGF5YmFja3RpbWVsYWJlbC1saXZlLWVkZ2UnKTtcbiAgICBsZXQgbWluV2lkdGggPSAwO1xuXG4gICAgbGV0IGxpdmVDbGlja0hhbmRsZXIgPSAoKSA9PiB7XG4gICAgICBwbGF5ZXIudGltZVNoaWZ0KDApO1xuICAgIH07XG5cbiAgICBsZXQgdXBkYXRlTGl2ZVN0YXRlID0gKCkgPT4ge1xuICAgICAgLy8gUGxheWVyIGlzIHBsYXlpbmcgYSBsaXZlIHN0cmVhbSB3aGVuIHRoZSBkdXJhdGlvbiBpcyBpbmZpbml0ZVxuICAgICAgbGl2ZSA9IHBsYXllci5pc0xpdmUoKTtcblxuICAgICAgLy8gQXR0YWNoL2RldGFjaCBsaXZlIG1hcmtlciBjbGFzc1xuICAgICAgaWYgKGxpdmUpIHtcbiAgICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuYWRkQ2xhc3MobGl2ZUNzc0NsYXNzKTtcbiAgICAgICAgdGhpcy5zZXRUZXh0KGkxOG4uZ2V0TG9jYWxpemVyKCdsaXZlJykpO1xuICAgICAgICBpZiAoY29uZmlnLmhpZGVJbkxpdmVQbGF5YmFjaykge1xuICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub25DbGljay5zdWJzY3JpYmUobGl2ZUNsaWNrSGFuZGxlcik7XG4gICAgICAgIHVwZGF0ZUxpdmVUaW1lc2hpZnRTdGF0ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3MobGl2ZUNzc0NsYXNzKTtcbiAgICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3MobGl2ZUVkZ2VDc3NDbGFzcyk7XG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICB0aGlzLm9uQ2xpY2sudW5zdWJzY3JpYmUobGl2ZUNsaWNrSGFuZGxlcik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGxldCB1cGRhdGVMaXZlVGltZXNoaWZ0U3RhdGUgPSAoKSA9PiB7XG4gICAgICBpZiAoIWxpdmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcGxheWVyIGlzIG9ubHkgYXQgdGhlIGxpdmUgZWRnZSBpZmYgdGhlIHN0cmVhbSBpcyBub3Qgc2hpZnRlZCBhbmQgaXQgaXMgYWN0dWFsbHkgcGxheWluZyBvciBwbGF5YmFjayBoYXNcbiAgICAgIC8vIG5ldmVyIGJlZW4gc3RhcnRlZCAobWVhbmluZyBpdCBpc24ndCBwYXVzZWQpLiBBIHBsYXllciB0aGF0IGlzIHBhdXNlZCBpcyBhbHdheXMgYmVoaW5kIHRoZSBsaXZlIGVkZ2UuXG4gICAgICAvLyBBbiBleGNlcHRpb24gaXMgbWFkZSBmb3IgbGl2ZSBzdHJlYW1zIHdpdGhvdXQgYSB0aW1lc2hpZnQgd2luZG93LCBiZWNhdXNlIGhlcmUgd2UgXCJzdG9wXCIgcGxheWJhY2sgaW5zdGVhZFxuICAgICAgLy8gb2YgcGF1c2luZyBpdCAoZnJvbSBhIFVJIHBlcnNwZWN0aXZlKSwgc28gd2Uga2VlcCB0aGUgbGl2ZSBlZGdlIGluZGljYXRvciBvbiBiZWNhdXNlIGEgcGxheSB3b3VsZCBhbHdheXNcbiAgICAgIC8vIHJlc3VtZSBhdCB0aGUgbGl2ZSBlZGdlLlxuICAgICAgY29uc3QgaXNUaW1lc2hpZnRlZCA9IHBsYXllci5nZXRUaW1lU2hpZnQoKSA8IDA7XG4gICAgICBjb25zdCBpc1RpbWVzaGlmdEF2YWlsYWJsZSA9IHBsYXllci5nZXRNYXhUaW1lU2hpZnQoKSA8IDA7XG4gICAgICBpZiAoIWlzVGltZXNoaWZ0ZWQgJiYgKCFwbGF5ZXIuaXNQYXVzZWQoKSB8fCAhaXNUaW1lc2hpZnRBdmFpbGFibGUpKSB7XG4gICAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmFkZENsYXNzKGxpdmVFZGdlQ3NzQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3MobGl2ZUVkZ2VDc3NDbGFzcyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGxldCBsaXZlU3RyZWFtRGV0ZWN0b3IgPSBuZXcgUGxheWVyVXRpbHMuTGl2ZVN0cmVhbURldGVjdG9yKHBsYXllciwgdWltYW5hZ2VyKTtcbiAgICBsaXZlU3RyZWFtRGV0ZWN0b3Iub25MaXZlQ2hhbmdlZC5zdWJzY3JpYmUoKHNlbmRlciwgYXJnczogTGl2ZVN0cmVhbURldGVjdG9yRXZlbnRBcmdzKSA9PiB7XG4gICAgICBsaXZlID0gYXJncy5saXZlO1xuICAgICAgdXBkYXRlTGl2ZVN0YXRlKCk7XG4gICAgfSk7XG4gICAgbGl2ZVN0cmVhbURldGVjdG9yLmRldGVjdCgpOyAvLyBJbml0aWFsIGRldGVjdGlvblxuXG4gICAgbGV0IHBsYXliYWNrVGltZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICBpZiAoIWxpdmUgJiYgcGxheWVyLmdldER1cmF0aW9uKCkgIT09IEluZmluaXR5KSB7XG4gICAgICAgIHRoaXMuc2V0VGltZShcbiAgICAgICAgICBQbGF5ZXJVdGlscy5nZXRDdXJyZW50VGltZVJlbGF0aXZlVG9TZWVrYWJsZVJhbmdlKHBsYXllciksXG4gICAgICAgICAgcGxheWVyLmdldER1cmF0aW9uKCkpO1xuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCAnanVtcGluZycgaW4gdGhlIFVJIGJ5IHZhcnlpbmcgbGFiZWwgc2l6ZXMgZHVlIHRvIG5vbi1tb25vc3BhY2VkIGZvbnRzLFxuICAgICAgLy8gd2UgZ3JhZHVhbGx5IGluY3JlYXNlIHRoZSBtaW4td2lkdGggd2l0aCB0aGUgY29udGVudCB0byByZWFjaCBhIHN0YWJsZSBzaXplLlxuICAgICAgbGV0IHdpZHRoID0gdGhpcy5nZXREb21FbGVtZW50KCkud2lkdGgoKTtcbiAgICAgIGlmICh3aWR0aCA+IG1pbldpZHRoKSB7XG4gICAgICAgIG1pbldpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmNzcyh7XG4gICAgICAgICAgJ21pbi13aWR0aCc6IG1pbldpZHRoICsgJ3B4JyxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGxldCB1cGRhdGVUaW1lRm9ybWF0QmFzZWRPbkR1cmF0aW9uID0gKCkgPT4ge1xuICAgICAgLy8gU2V0IHRpbWUgZm9ybWF0IGRlcGVuZGluZyBvbiBzb3VyY2UgZHVyYXRpb25cbiAgICAgIHRoaXMudGltZUZvcm1hdCA9IE1hdGguYWJzKHBsYXllci5pc0xpdmUoKSA/IHBsYXllci5nZXRNYXhUaW1lU2hpZnQoKSA6IHBsYXllci5nZXREdXJhdGlvbigpKSA+PSAzNjAwID9cbiAgICAgIFN0cmluZ1V0aWxzLkZPUk1BVF9ISE1NU1MgOiBTdHJpbmdVdGlscy5GT1JNQVRfTU1TUztcbiAgICAgIHBsYXliYWNrVGltZUhhbmRsZXIoKTtcbiAgICB9O1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlRpbWVDaGFuZ2VkLCBwbGF5YmFja1RpbWVIYW5kbGVyKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUmVhZHksIHVwZGF0ZVRpbWVGb3JtYXRCYXNlZE9uRHVyYXRpb24pO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TZWVrZWQsIHBsYXliYWNrVGltZUhhbmRsZXIpO1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlRpbWVTaGlmdCwgdXBkYXRlTGl2ZVRpbWVzaGlmdFN0YXRlKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVGltZVNoaWZ0ZWQsIHVwZGF0ZUxpdmVUaW1lc2hpZnRTdGF0ZSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXlpbmcsIHVwZGF0ZUxpdmVUaW1lc2hpZnRTdGF0ZSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBhdXNlZCwgdXBkYXRlTGl2ZVRpbWVzaGlmdFN0YXRlKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU3RhbGxTdGFydGVkLCB1cGRhdGVMaXZlVGltZXNoaWZ0U3RhdGUpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TdGFsbEVuZGVkLCB1cGRhdGVMaXZlVGltZXNoaWZ0U3RhdGUpO1xuXG4gICAgbGV0IGluaXQgPSAoKSA9PiB7XG4gICAgICAvLyBSZXNldCBtaW4td2lkdGggd2hlbiBhIG5ldyBzb3VyY2UgaXMgcmVhZHkgKGVzcGVjaWFsbHkgZm9yIHN3aXRjaGluZyBWT0QvTGl2ZSBtb2RlcyB3aGVyZSB0aGUgbGFiZWwgY29udGVudFxuICAgICAgLy8gY2hhbmdlcylcbiAgICAgIG1pbldpZHRoID0gMDtcbiAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmNzcyh7XG4gICAgICAgICdtaW4td2lkdGgnOiBudWxsLFxuICAgICAgfSk7XG5cbiAgICAgIHVwZGF0ZVRpbWVGb3JtYXRCYXNlZE9uRHVyYXRpb24oKTtcbiAgICB9O1xuICAgIHVpbWFuYWdlci5nZXRDb25maWcoKS5ldmVudHMub25VcGRhdGVkLnN1YnNjcmliZShpbml0KTtcblxuICAgIGluaXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBjdXJyZW50IHBsYXliYWNrIHRpbWUgYW5kIHRvdGFsIGR1cmF0aW9uLlxuICAgKiBAcGFyYW0gcGxheWJhY2tTZWNvbmRzIHRoZSBjdXJyZW50IHBsYXliYWNrIHRpbWUgaW4gc2Vjb25kc1xuICAgKiBAcGFyYW0gZHVyYXRpb25TZWNvbmRzIHRoZSB0b3RhbCBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gICAqL1xuICBzZXRUaW1lKHBsYXliYWNrU2Vjb25kczogbnVtYmVyLCBkdXJhdGlvblNlY29uZHM6IG51bWJlcikge1xuICAgIGxldCBjdXJyZW50VGltZSA9IFN0cmluZ1V0aWxzLnNlY29uZHNUb1RpbWUocGxheWJhY2tTZWNvbmRzLCB0aGlzLnRpbWVGb3JtYXQpO1xuICAgIGxldCB0b3RhbFRpbWUgPSBTdHJpbmdVdGlscy5zZWNvbmRzVG9UaW1lKGR1cmF0aW9uU2Vjb25kcywgdGhpcy50aW1lRm9ybWF0KTtcblxuICAgIHN3aXRjaCAoKDxQbGF5YmFja1RpbWVMYWJlbENvbmZpZz50aGlzLmNvbmZpZykudGltZUxhYmVsTW9kZSkge1xuICAgICAgY2FzZSBQbGF5YmFja1RpbWVMYWJlbE1vZGUuQ3VycmVudFRpbWU6XG4gICAgICAgIHRoaXMuc2V0VGV4dChgJHtjdXJyZW50VGltZX1gKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFBsYXliYWNrVGltZUxhYmVsTW9kZS5Ub3RhbFRpbWU6XG4gICAgICAgIHRoaXMuc2V0VGV4dChgJHt0b3RhbFRpbWV9YCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBQbGF5YmFja1RpbWVMYWJlbE1vZGUuQ3VycmVudEFuZFRvdGFsVGltZTpcbiAgICAgICAgdGhpcy5zZXRUZXh0KGAke2N1cnJlbnRUaW1lfSAvICR7dG90YWxUaW1lfWApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgUGxheWJhY2tUaW1lTGFiZWxNb2RlLlJlbWFpbmluZ1RpbWU6XG4gICAgICAgIGxldCByZW1haW5pbmdUaW1lID0gU3RyaW5nVXRpbHMuc2Vjb25kc1RvVGltZShkdXJhdGlvblNlY29uZHMgLSBwbGF5YmFja1NlY29uZHMsIHRoaXMudGltZUZvcm1hdCk7XG4gICAgICAgIHRoaXMuc2V0VGV4dChgJHtyZW1haW5pbmdUaW1lfWApO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgY3VycmVudCB0aW1lIGZvcm1hdFxuICAgKiBAcGFyYW0gdGltZUZvcm1hdCB0aGUgdGltZSBmb3JtYXRcbiAgICovXG4gIHByb3RlY3RlZCBzZXRUaW1lRm9ybWF0KHRpbWVGb3JtYXQ6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMudGltZUZvcm1hdCA9IHRpbWVGb3JtYXQ7XG4gIH1cbn1cbiIsImltcG9ydCB7VG9nZ2xlQnV0dG9uLCBUb2dnbGVCdXR0b25Db25maWd9IGZyb20gJy4vdG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge1BsYXllclV0aWxzfSBmcm9tICcuLi9wbGF5ZXJ1dGlscyc7XG5pbXBvcnQgeyBQbGF5ZXJBUEksIFdhcm5pbmdFdmVudCB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBsYXliYWNrVG9nZ2xlQnV0dG9uQ29uZmlnIGV4dGVuZHMgVG9nZ2xlQnV0dG9uQ29uZmlnIHtcbiAgLyoqXG4gICAqIFNwZWNpZnkgd2hldGhlciB0aGUgcGxheWVyIHNob3VsZCBiZSBzZXQgdG8gZW50ZXIgZnVsbHNjcmVlbiBieSBjbGlja2luZyBvbiB0aGUgcGxheWJhY2sgdG9nZ2xlIGJ1dHRvblxuICAgKiB3aGVuIGluaXRpYXRpbmcgdGhlIGluaXRpYWwgcGxheWJhY2suXG4gICAqIERlZmF1bHQgaXMgZmFsc2UuXG4gICAqL1xuICBlbnRlckZ1bGxzY3JlZW5PbkluaXRpYWxQbGF5YmFjaz86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQSBidXR0b24gdGhhdCB0b2dnbGVzIGJldHdlZW4gcGxheWJhY2sgYW5kIHBhdXNlLlxuICovXG5leHBvcnQgY2xhc3MgUGxheWJhY2tUb2dnbGVCdXR0b24gZXh0ZW5kcyBUb2dnbGVCdXR0b248UGxheWJhY2tUb2dnbGVCdXR0b25Db25maWc+IHtcblxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDTEFTU19TVE9QVE9HR0xFID0gJ3N0b3B0b2dnbGUnO1xuICBwcm90ZWN0ZWQgaXNQbGF5SW5pdGlhdGVkOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogUGxheWJhY2tUb2dnbGVCdXR0b25Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXBsYXliYWNrdG9nZ2xlYnV0dG9uJyxcbiAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdwbGF5JyksXG4gICAgICBvbkFyaWFMYWJlbDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3BhdXNlJyksXG4gICAgICBvZmZBcmlhTGFiZWw6IGkxOG4uZ2V0TG9jYWxpemVyKCdwbGF5JyksXG4gICAgfSwgdGhpcy5jb25maWcpO1xuXG4gICAgdGhpcy5pc1BsYXlJbml0aWF0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlciwgaGFuZGxlQ2xpY2tFdmVudDogYm9vbGVhbiA9IHRydWUpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgLy8gU2V0IGVudGVyRnVsbHNjcmVlbk9uSW5pdGlhbFBsYXliYWNrIGlmIHNldCBpbiB0aGUgdWltYW5hZ2VyIGNvbmZpZ1xuICAgIGlmICh0eXBlb2YgdWltYW5hZ2VyLmdldENvbmZpZygpLmVudGVyRnVsbHNjcmVlbk9uSW5pdGlhbFBsYXliYWNrID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHRoaXMuY29uZmlnLmVudGVyRnVsbHNjcmVlbk9uSW5pdGlhbFBsYXliYWNrID0gdWltYW5hZ2VyLmdldENvbmZpZygpLmVudGVyRnVsbHNjcmVlbk9uSW5pdGlhbFBsYXliYWNrO1xuICAgIH1cblxuICAgIGxldCBpc1NlZWtpbmcgPSBmYWxzZTtcbiAgICBsZXQgZmlyc3RQbGF5ID0gdHJ1ZTtcblxuICAgIC8vIEhhbmRsZXIgdG8gdXBkYXRlIGJ1dHRvbiBzdGF0ZSBiYXNlZCBvbiBwbGF5ZXIgc3RhdGVcbiAgICBsZXQgcGxheWJhY2tTdGF0ZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAvLyBJZiB0aGUgVUkgaXMgY3VycmVudGx5IHNlZWtpbmcsIHBsYXliYWNrIGlzIHRlbXBvcmFyaWx5IHN0b3BwZWQgYnV0IHRoZSBidXR0b25zIHNob3VsZFxuICAgICAgLy8gbm90IHJlZmxlY3QgdGhhdCBhbmQgc3RheSBhcy1pcyAoZS5nIGluZGljYXRlIHBsYXliYWNrIHdoaWxlIHNlZWtpbmcpLlxuICAgICAgaWYgKGlzU2Vla2luZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChwbGF5ZXIuaXNQbGF5aW5nKCkgfHwgdGhpcy5pc1BsYXlJbml0aWF0ZWQpIHtcbiAgICAgICAgdGhpcy5vbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vZmYoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gQ2FsbCBoYW5kbGVyIHVwb24gdGhlc2UgZXZlbnRzXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXksIChlKSA9PiB7XG4gICAgICB0aGlzLmlzUGxheUluaXRpYXRlZCA9IHRydWU7XG4gICAgICBmaXJzdFBsYXkgPSBmYWxzZTtcbiAgICAgIHBsYXliYWNrU3RhdGVIYW5kbGVyKCk7XG4gICAgfSk7XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGF1c2VkLCAoZSkgPT4ge1xuICAgICAgdGhpcy5pc1BsYXlJbml0aWF0ZWQgPSBmYWxzZTtcbiAgICAgIHBsYXliYWNrU3RhdGVIYW5kbGVyKCk7XG4gICAgfSk7XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheWluZywgKGUpID0+IHtcbiAgICAgIHRoaXMuaXNQbGF5SW5pdGlhdGVkID0gZmFsc2U7XG4gICAgICBwbGF5YmFja1N0YXRlSGFuZGxlcigpO1xuICAgIH0pO1xuICAgIC8vIGFmdGVyIHVubG9hZGluZyArIGxvYWRpbmcgYSBuZXcgc291cmNlLCB0aGUgcGxheWVyIG1pZ2h0IGJlIGluIGEgZGlmZmVyZW50IHBsYXlpbmcgc3RhdGUgKGZyb20gcGxheWluZyBpbnRvIHN0b3BwZWQpXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZUxvYWRlZCwgcGxheWJhY2tTdGF0ZUhhbmRsZXIpO1xuICAgIHVpbWFuYWdlci5nZXRDb25maWcoKS5ldmVudHMub25VcGRhdGVkLnN1YnNjcmliZShwbGF5YmFja1N0YXRlSGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZVVubG9hZGVkLCBwbGF5YmFja1N0YXRlSGFuZGxlcik7XG4gICAgLy8gd2hlbiBwbGF5YmFjayBmaW5pc2hlcywgcGxheWVyIHR1cm5zIHRvIHBhdXNlZCBtb2RlXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXliYWNrRmluaXNoZWQsIHBsYXliYWNrU3RhdGVIYW5kbGVyKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQ2FzdFN0YXJ0ZWQsIHBsYXliYWNrU3RhdGVIYW5kbGVyKTtcblxuICAgIC8vIFdoZW4gYSBwbGF5YmFjayBhdHRlbXB0IGlzIHJlamVjdGVkIHdpdGggd2FybmluZyA1MDA4LCB3ZSBzd2l0Y2ggdGhlIGJ1dHRvbiBzdGF0ZSBiYWNrIHRvIG9mZlxuICAgIC8vIFRoaXMgaXMgcmVxdWlyZWQgZm9yIGJsb2NrZWQgYXV0b3BsYXksIGJlY2F1c2UgdGhlcmUgaXMgbm8gUGF1c2VkIGV2ZW50IGluIHN1Y2ggY2FzZVxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5XYXJuaW5nLCAoZXZlbnQ6IFdhcm5pbmdFdmVudCkgPT4ge1xuICAgICAgaWYgKGV2ZW50LmNvZGUgPT09IHBsYXllci5leHBvcnRzLldhcm5pbmdDb2RlLlBMQVlCQUNLX0NPVUxEX05PVF9CRV9TVEFSVEVEKSB7XG4gICAgICAgIHRoaXMuaXNQbGF5SW5pdGlhdGVkID0gZmFsc2U7XG4gICAgICAgIGZpcnN0UGxheSA9IHRydWU7XG4gICAgICAgIHRoaXMub2ZmKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCB1cGRhdGVMaXZlU3RhdGUgPSAoKSA9PiB7XG4gICAgICBjb25zdCBzaG93U3RvcFRvZ2dsZSA9IHBsYXllci5pc0xpdmUoKSAmJiAhUGxheWVyVXRpbHMuaXNUaW1lU2hpZnRBdmFpbGFibGUocGxheWVyKTtcblxuICAgICAgaWYgKHNob3dTdG9wVG9nZ2xlKSB7XG4gICAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKFBsYXliYWNrVG9nZ2xlQnV0dG9uLkNMQVNTX1NUT1BUT0dHTEUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4Q3NzKFBsYXliYWNrVG9nZ2xlQnV0dG9uLkNMQVNTX1NUT1BUT0dHTEUpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRGV0ZWN0IGFic2VuY2Ugb2YgdGltZXNoaWZ0aW5nIG9uIGxpdmUgc3RyZWFtcyBhbmQgYWRkIHRhZ2dpbmcgY2xhc3MgdG8gY29udmVydCBidXR0b24gaWNvbnMgdG8gcGxheS9zdG9wXG4gICAgbGV0IHRpbWVTaGlmdERldGVjdG9yID0gbmV3IFBsYXllclV0aWxzLlRpbWVTaGlmdEF2YWlsYWJpbGl0eURldGVjdG9yKHBsYXllcik7XG4gICAgbGV0IGxpdmVTdHJlYW1EZXRlY3RvciA9IG5ldyBQbGF5ZXJVdGlscy5MaXZlU3RyZWFtRGV0ZWN0b3IocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGltZVNoaWZ0RGV0ZWN0b3Iub25UaW1lU2hpZnRBdmFpbGFiaWxpdHlDaGFuZ2VkLnN1YnNjcmliZSgoKSA9PiB1cGRhdGVMaXZlU3RhdGUoKSk7XG4gICAgbGl2ZVN0cmVhbURldGVjdG9yLm9uTGl2ZUNoYW5nZWQuc3Vic2NyaWJlKCgpID0+IHVwZGF0ZUxpdmVTdGF0ZSgpKTtcblxuICAgIHRpbWVTaGlmdERldGVjdG9yLmRldGVjdCgpOyAvLyBJbml0aWFsIGRldGVjdGlvblxuICAgIGxpdmVTdHJlYW1EZXRlY3Rvci5kZXRlY3QoKTtcblxuICAgIGlmIChoYW5kbGVDbGlja0V2ZW50KSB7XG4gICAgICAvLyBDb250cm9sIHBsYXllciBieSBidXR0b24gZXZlbnRzXG4gICAgICAvLyBXaGVuIGEgYnV0dG9uIGV2ZW50IHRyaWdnZXJzIGEgcGxheWVyIEFQSSBjYWxsLCBldmVudHMgYXJlIGZpcmVkIHdoaWNoIGluIHR1cm4gY2FsbCB0aGUgZXZlbnQgaGFuZGxlclxuICAgICAgLy8gYWJvdmUgdGhhdCB1cGRhdGVkIHRoZSBidXR0b24gc3RhdGUuXG4gICAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgaWYgKHBsYXllci5pc1BsYXlpbmcoKSB8fCB0aGlzLmlzUGxheUluaXRpYXRlZCkge1xuICAgICAgICAgIHBsYXllci5wYXVzZSgndWknKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwbGF5ZXIucGxheSgndWknKTtcblxuICAgICAgICAgIGlmIChmaXJzdFBsYXkgJiYgdGhpcy5jb25maWcuZW50ZXJGdWxsc2NyZWVuT25Jbml0aWFsUGxheWJhY2spIHtcbiAgICAgICAgICAgIHBsYXllci5zZXRWaWV3TW9kZShwbGF5ZXIuZXhwb3J0cy5WaWV3TW9kZS5GdWxsc2NyZWVuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFRyYWNrIFVJIHNlZWtpbmcgc3RhdHVzXG4gICAgdWltYW5hZ2VyLm9uU2Vlay5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgaXNTZWVraW5nID0gdHJ1ZTtcbiAgICB9KTtcbiAgICB1aW1hbmFnZXIub25TZWVrZWQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGlzU2Vla2luZyA9IGZhbHNlO1xuICAgIH0pO1xuXG4gICAgLy8gU3RhcnR1cCBpbml0XG4gICAgcGxheWJhY2tTdGF0ZUhhbmRsZXIoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtDb250YWluZXIsIENvbnRhaW5lckNvbmZpZ30gZnJvbSAnLi9jb250YWluZXInO1xuaW1wb3J0IHtIdWdlUGxheWJhY2tUb2dnbGVCdXR0b259IGZyb20gJy4vaHVnZXBsYXliYWNrdG9nZ2xlYnV0dG9uJztcblxuZXhwb3J0IGludGVyZmFjZSBQbGF5YmFja1RvZ2dsZU92ZXJsYXlDb25maWcgZXh0ZW5kcyBDb250YWluZXJDb25maWcge1xuICAvKipcbiAgICogU3BlY2lmeSB3aGV0aGVyIHRoZSBwbGF5ZXIgc2hvdWxkIGJlIHNldCB0byBlbnRlciBmdWxsc2NyZWVuIGJ5IGNsaWNraW5nIG9uIHRoZSBwbGF5YmFjayB0b2dnbGUgYnV0dG9uXG4gICAqIHdoZW4gaW5pdGlhdGluZyB0aGUgaW5pdGlhbCBwbGF5YmFjay5cbiAgICogRGVmYXVsdCBpcyBmYWxzZS5cbiAgICovXG4gIGVudGVyRnVsbHNjcmVlbk9uSW5pdGlhbFBsYXliYWNrPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBPdmVybGF5cyB0aGUgcGxheWVyIGFuZCBkaXNwbGF5cyBlcnJvciBtZXNzYWdlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFBsYXliYWNrVG9nZ2xlT3ZlcmxheSBleHRlbmRzIENvbnRhaW5lcjxQbGF5YmFja1RvZ2dsZU92ZXJsYXlDb25maWc+IHtcblxuICBwcml2YXRlIHBsYXliYWNrVG9nZ2xlQnV0dG9uOiBIdWdlUGxheWJhY2tUb2dnbGVCdXR0b247XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBQbGF5YmFja1RvZ2dsZU92ZXJsYXlDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLnBsYXliYWNrVG9nZ2xlQnV0dG9uID0gbmV3IEh1Z2VQbGF5YmFja1RvZ2dsZUJ1dHRvbih7XG4gICAgICBlbnRlckZ1bGxzY3JlZW5PbkluaXRpYWxQbGF5YmFjazogQm9vbGVhbihjb25maWcuZW50ZXJGdWxsc2NyZWVuT25Jbml0aWFsUGxheWJhY2spLFxuICAgIH0pO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1wbGF5YmFja3RvZ2dsZS1vdmVybGF5JyxcbiAgICAgIGNvbXBvbmVudHM6IFt0aGlzLnBsYXliYWNrVG9nZ2xlQnV0dG9uXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cbn0iLCJpbXBvcnQge0NvbnRhaW5lckNvbmZpZywgQ29udGFpbmVyfSBmcm9tICcuL2NvbnRhaW5lcic7XG5pbXBvcnQge0NvbXBvbmVudCwgQ29tcG9uZW50Q29uZmlnfSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQge0RPTX0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge1N0cmluZ1V0aWxzfSBmcm9tICcuLi9zdHJpbmd1dGlscyc7XG5pbXBvcnQge0h1Z2VSZXBsYXlCdXR0b259IGZyb20gJy4vaHVnZXJlcGxheWJ1dHRvbic7XG5pbXBvcnQgeyBVSVJlY29tbWVuZGF0aW9uQ29uZmlnIH0gZnJvbSAnLi4vdWljb25maWcnO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcblxuLyoqXG4gKiBPdmVybGF5cyB0aGUgcGxheWVyIGFuZCBkaXNwbGF5cyByZWNvbW1lbmRlZCB2aWRlb3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZWNvbW1lbmRhdGlvbk92ZXJsYXkgZXh0ZW5kcyBDb250YWluZXI8Q29udGFpbmVyQ29uZmlnPiB7XG5cbiAgcHJpdmF0ZSByZXBsYXlCdXR0b246IEh1Z2VSZXBsYXlCdXR0b247XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBDb250YWluZXJDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLnJlcGxheUJ1dHRvbiA9IG5ldyBIdWdlUmVwbGF5QnV0dG9uKCk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXJlY29tbWVuZGF0aW9uLW92ZXJsYXknLFxuICAgICAgaGlkZGVuOiB0cnVlLFxuICAgICAgY29tcG9uZW50czogW3RoaXMucmVwbGF5QnV0dG9uXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbGV0IGNsZWFyUmVjb21tZW5kYXRpb25zID0gKCkgPT4ge1xuICAgICAgZm9yIChsZXQgY29tcG9uZW50IG9mIHRoaXMuZ2V0Q29tcG9uZW50cygpLnNsaWNlKCkpIHtcbiAgICAgICAgaWYgKGNvbXBvbmVudCBpbnN0YW5jZW9mIFJlY29tbWVuZGF0aW9uSXRlbSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlQ29tcG9uZW50KGNvbXBvbmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMudXBkYXRlQ29tcG9uZW50cygpO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoJ3JlY29tbWVuZGF0aW9ucycpKTtcbiAgICB9O1xuXG4gICAgbGV0IHNldHVwUmVjb21tZW5kYXRpb25zID0gKCkgPT4ge1xuICAgICAgY2xlYXJSZWNvbW1lbmRhdGlvbnMoKTtcblxuICAgICAgY29uc3QgcmVjb21tZW5kYXRpb25zID0gdWltYW5hZ2VyLmdldENvbmZpZygpLnJlY29tbWVuZGF0aW9ucztcblxuICAgICAgaWYgKHJlY29tbWVuZGF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxldCBpbmRleCA9IDE7XG4gICAgICAgIGZvciAobGV0IGl0ZW0gb2YgcmVjb21tZW5kYXRpb25zKSB7XG4gICAgICAgICAgdGhpcy5hZGRDb21wb25lbnQobmV3IFJlY29tbWVuZGF0aW9uSXRlbSh7XG4gICAgICAgICAgICBpdGVtQ29uZmlnOiBpdGVtLFxuICAgICAgICAgICAgY3NzQ2xhc3NlczogWydyZWNvbW1lbmRhdGlvbi1pdGVtLScgKyAoaW5kZXgrKyldLFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudHMoKTsgLy8gY3JlYXRlIGNvbnRhaW5lciBET00gZWxlbWVudHNcblxuICAgICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hZGRDbGFzcyh0aGlzLnByZWZpeENzcygncmVjb21tZW5kYXRpb25zJykpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUoc2V0dXBSZWNvbW1lbmRhdGlvbnMpO1xuICAgIC8vIFJlbW92ZSByZWNvbW1lbmRhdGlvbnMgYW5kIGhpZGUgb3ZlcmxheSB3aGVuIHNvdXJjZSBpcyB1bmxvYWRlZFxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VVbmxvYWRlZCwgKCkgPT4ge1xuICAgICAgY2xlYXJSZWNvbW1lbmRhdGlvbnMoKTtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0pO1xuICAgIC8vIERpc3BsYXkgcmVjb21tZW5kYXRpb25zIHdoZW4gcGxheWJhY2sgaGFzIGZpbmlzaGVkXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXliYWNrRmluaXNoZWQsICgpID0+IHtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH0pO1xuICAgIC8vIEhpZGUgcmVjb21tZW5kYXRpb25zIHdoZW4gcGxheWJhY2sgc3RhcnRzLCBlLmcuIGEgcmVzdGFydFxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5LCAoKSA9PiB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9KTtcblxuICAgIC8vIEluaXQgb24gc3RhcnR1cFxuICAgIHNldHVwUmVjb21tZW5kYXRpb25zKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgdGhlIHtAbGluayBSZWNvbW1lbmRhdGlvbkl0ZW19XG4gKi9cbmludGVyZmFjZSBSZWNvbW1lbmRhdGlvbkl0ZW1Db25maWcgZXh0ZW5kcyBDb21wb25lbnRDb25maWcge1xuICBpdGVtQ29uZmlnOiBVSVJlY29tbWVuZGF0aW9uQ29uZmlnO1xufVxuXG4vKipcbiAqIEFuIGl0ZW0gb2YgdGhlIHtAbGluayBSZWNvbW1lbmRhdGlvbk92ZXJsYXl9LiBVc2VkIG9ubHkgaW50ZXJuYWxseSBpbiB7QGxpbmsgUmVjb21tZW5kYXRpb25PdmVybGF5fS5cbiAqL1xuY2xhc3MgUmVjb21tZW5kYXRpb25JdGVtIGV4dGVuZHMgQ29tcG9uZW50PFJlY29tbWVuZGF0aW9uSXRlbUNvbmZpZz4ge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogUmVjb21tZW5kYXRpb25JdGVtQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktcmVjb21tZW5kYXRpb24taXRlbScsXG4gICAgICBpdGVtQ29uZmlnOiBudWxsLCAvLyB0aGlzIG11c3QgYmUgcGFzc2VkIGluIGZyb20gb3V0c2lkZVxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0b0RvbUVsZW1lbnQoKTogRE9NIHtcbiAgICBsZXQgY29uZmlnID0gdGhpcy5jb25maWcuaXRlbUNvbmZpZztcblxuICAgIGxldCBpdGVtRWxlbWVudCA9IG5ldyBET00oJ2EnLCB7XG4gICAgICAnaWQnOiB0aGlzLmNvbmZpZy5pZCxcbiAgICAgICdjbGFzcyc6IHRoaXMuZ2V0Q3NzQ2xhc3NlcygpLFxuICAgICAgJ2hyZWYnOiBjb25maWcudXJsLFxuICAgIH0pLmNzcyh7ICdiYWNrZ3JvdW5kLWltYWdlJzogYHVybCgke2NvbmZpZy50aHVtYm5haWx9KWAgfSk7XG5cbiAgICBsZXQgYmdFbGVtZW50ID0gbmV3IERPTSgnZGl2Jywge1xuICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ2JhY2tncm91bmQnKSxcbiAgICB9KTtcbiAgICBpdGVtRWxlbWVudC5hcHBlbmQoYmdFbGVtZW50KTtcblxuICAgIGxldCB0aXRsZUVsZW1lbnQgPSBuZXcgRE9NKCdzcGFuJywge1xuICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ3RpdGxlJyksXG4gICAgfSkuYXBwZW5kKG5ldyBET00oJ3NwYW4nLCB7XG4gICAgICAnY2xhc3MnOiB0aGlzLnByZWZpeENzcygnaW5uZXJ0aXRsZScpLFxuICAgIH0pLmh0bWwoY29uZmlnLnRpdGxlKSk7XG4gICAgaXRlbUVsZW1lbnQuYXBwZW5kKHRpdGxlRWxlbWVudCk7XG5cbiAgICBsZXQgdGltZUVsZW1lbnQgPSBuZXcgRE9NKCdzcGFuJywge1xuICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ2R1cmF0aW9uJyksXG4gICAgfSkuYXBwZW5kKG5ldyBET00oJ3NwYW4nLCB7XG4gICAgICAnY2xhc3MnOiB0aGlzLnByZWZpeENzcygnaW5uZXJkdXJhdGlvbicpLFxuICAgIH0pLmh0bWwoY29uZmlnLmR1cmF0aW9uID8gU3RyaW5nVXRpbHMuc2Vjb25kc1RvVGltZShjb25maWcuZHVyYXRpb24pIDogJycpKTtcbiAgICBpdGVtRWxlbWVudC5hcHBlbmQodGltZUVsZW1lbnQpO1xuXG4gICAgcmV0dXJuIGl0ZW1FbGVtZW50O1xuICB9XG59IiwiaW1wb3J0IHsgQnV0dG9uQ29uZmlnLCBCdXR0b24gfSBmcm9tICcuL2J1dHRvbic7XG5pbXBvcnQgeyBVSUluc3RhbmNlTWFuYWdlciB9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcbmltcG9ydCB7IFBsYXllclV0aWxzIH0gZnJvbSAnLi4vcGxheWVydXRpbHMnO1xuaW1wb3J0IExpdmVTdHJlYW1EZXRlY3RvckV2ZW50QXJncyA9IFBsYXllclV0aWxzLkxpdmVTdHJlYW1EZXRlY3RvckV2ZW50QXJncztcblxuLyoqXG4gKiBBIGJ1dHRvbiB0byBwbGF5L3JlcGxheSBhIHZpZGVvLlxuICovXG5leHBvcnQgY2xhc3MgUmVwbGF5QnV0dG9uIGV4dGVuZHMgQnV0dG9uPEJ1dHRvbkNvbmZpZz4ge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQnV0dG9uQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1yZXBsYXlidXR0b24nLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3JlcGxheScpLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICBpZiAocGxheWVyLmlzTGl2ZSgpKSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG5cbiAgICBjb25zdCBsaXZlU3RyZWFtRGV0ZWN0b3IgPSBuZXcgUGxheWVyVXRpbHMuTGl2ZVN0cmVhbURldGVjdG9yKHBsYXllciwgdWltYW5hZ2VyKTtcbiAgICBsaXZlU3RyZWFtRGV0ZWN0b3Iub25MaXZlQ2hhbmdlZC5zdWJzY3JpYmUoKHNlbmRlciwgYXJnczogTGl2ZVN0cmVhbURldGVjdG9yRXZlbnRBcmdzKSA9PiB7XG4gICAgICBpZiAoYXJncy5saXZlKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGlmICghcGxheWVyLmhhc0VuZGVkKCkpIHtcbiAgICAgICAgcGxheWVyLnNlZWsoMCk7XG4gICAgICAgIC8vIE5vdCBjYWxsaW5nIGBwbGF5YCB3aWxsIGtlZXAgdGhlIHBsYXkvcGF1c2Ugc3RhdGUgYXMgaXNcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIHBsYXliYWNrIGhhcyBhbHJlYWR5IGVuZGVkLCBjYWxsaW5nIGBwbGF5YCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVzdGFydCBmcm9tIHRoZSBiZWdpbm5pbmdcbiAgICAgICAgcGxheWVyLnBsYXkoJ3VpJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEV4dGVuZGVkUGxheWVyQVBJLCBHcm91cFBsYXliYWNrU3VzcGVuc2lvbiwgR3JvdXBQbGF5YmFja1N1c3BlbnNpb25SZWFzb24gfSBmcm9tICcuLy4uL2dyb3VwcGxheWJhY2thcGknO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBDb21wb25lbnRDb25maWcgfSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBET00gfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHsgRXZlbnQsIEV2ZW50RGlzcGF0Y2hlciwgTm9BcmdzIH0gZnJvbSAnLi4vZXZlbnRkaXNwYXRjaGVyJztcbmltcG9ydCB7IFNlZWtCYXJMYWJlbCB9IGZyb20gJy4vc2Vla2JhcmxhYmVsJztcbmltcG9ydCB7IFVJSW5zdGFuY2VNYW5hZ2VyLCBTZWVrUHJldmlld0FyZ3MgfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgVGltZW91dCB9IGZyb20gJy4uL3RpbWVvdXQnO1xuaW1wb3J0IHsgUGxheWVyVXRpbHMgfSBmcm9tICcuLi9wbGF5ZXJ1dGlscyc7XG5pbXBvcnQgVGltZVNoaWZ0QXZhaWxhYmlsaXR5Q2hhbmdlZEFyZ3MgPSBQbGF5ZXJVdGlscy5UaW1lU2hpZnRBdmFpbGFiaWxpdHlDaGFuZ2VkQXJncztcbmltcG9ydCBMaXZlU3RyZWFtRGV0ZWN0b3JFdmVudEFyZ3MgPSBQbGF5ZXJVdGlscy5MaXZlU3RyZWFtRGV0ZWN0b3JFdmVudEFyZ3M7XG5pbXBvcnQgeyBUaW1lbGluZU1hcmtlciB9IGZyb20gJy4uL3VpY29uZmlnJztcbmltcG9ydCB7IFBsYXllckFQSSwgUGxheWVyRXZlbnRCYXNlIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IFN0cmluZ1V0aWxzIH0gZnJvbSAnLi4vc3RyaW5ndXRpbHMnO1xuaW1wb3J0IHsgU2Vla0JhclR5cGUsIFNlZWtCYXJDb250cm9sbGVyIH0gZnJvbSAnLi9zZWVrYmFyY29udHJvbGxlcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuaW1wb3J0IHsgQnJvd3NlclV0aWxzIH0gZnJvbSAnLi4vYnJvd3NlcnV0aWxzJztcbmltcG9ydCB7IFRpbWVsaW5lTWFya2Vyc0hhbmRsZXIgfSBmcm9tICcuL3RpbWVsaW5lbWFya2Vyc2hhbmRsZXInO1xuaW1wb3J0IHsgZ2V0TWluQnVmZmVyTGV2ZWwgfSBmcm9tICcuL3NlZWtiYXJidWZmZXJsZXZlbCc7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIHRoZSB7QGxpbmsgU2Vla0Jhcn0gY29tcG9uZW50LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlZWtCYXJDb25maWcgZXh0ZW5kcyBDb21wb25lbnRDb25maWcge1xuICAvKipcbiAgICogVGhlIGxhYmVsIGFib3ZlIHRoZSBzZWVrIHBvc2l0aW9uLlxuICAgKi9cbiAgbGFiZWw/OiBTZWVrQmFyTGFiZWw7XG4gIC8qKlxuICAgKiBCYXIgd2lsbCBiZSB2ZXJ0aWNhbCBpbnN0ZWFkIG9mIGhvcml6b250YWwgaWYgc2V0IHRvIHRydWUuXG4gICAqL1xuICB2ZXJ0aWNhbD86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBUaGUgaW50ZXJ2YWwgaW4gbWlsbGlzZWNvbmRzIGluIHdoaWNoIHRoZSBwbGF5YmFjayBwb3NpdGlvbiBvbiB0aGUgc2VlayBiYXIgd2lsbCBiZSB1cGRhdGVkLiBUaGUgc2hvcnRlciB0aGVcbiAgICogaW50ZXJ2YWwsIHRoZSBzbW9vdGhlciBpdCBsb29rcyBhbmQgdGhlIG1vcmUgcmVzb3VyY2UgaW50ZW5zZSBpdCBpcy4gVGhlIHVwZGF0ZSBpbnRlcnZhbCB3aWxsIGJlIGtlcHQgYXMgc3RlYWR5XG4gICAqIGFzIHBvc3NpYmxlIHRvIGF2b2lkIGppdHRlci5cbiAgICogU2V0IHRvIC0xIHRvIGRpc2FibGUgc21vb3RoIHVwZGF0aW5nIGFuZCB1cGRhdGUgaXQgb24gcGxheWVyIFRpbWVDaGFuZ2VkIGV2ZW50cyBpbnN0ZWFkLlxuICAgKiBEZWZhdWx0OiA1MCAoNTBtcyA9IDIwZnBzKS5cbiAgICovXG4gIHNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVJbnRlcnZhbE1zPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBVc2VkIGZvciBzZWVrQmFyIGNvbnRyb2wgaW5jcmVtZW50cyBhbmQgZGVjcmVtZW50c1xuICAgKi9cbiAga2V5U3RlcEluY3JlbWVudHM/OiB7IGxlZnRSaWdodDogbnVtYmVyLCB1cERvd246IG51bWJlciB9O1xuXG4gIC8qKlxuICAgKiBVc2VkIGZvciBzZWVrQmFyIG1hcmtlciBzbmFwcGluZyByYW5nZSBwZXJjZW50YWdlXG4gICAqL1xuICBzbmFwcGluZ1JhbmdlPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGVuYWJsZS9kaXNhYmxlIHNlZWsgcHJldmlld1xuICAgKi9cbiAgZW5hYmxlU2Vla1ByZXZpZXc/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEV2ZW50IGFyZ3VtZW50IGludGVyZmFjZSBmb3IgYSBzZWVrIHByZXZpZXcgZXZlbnQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2Vla1ByZXZpZXdFdmVudEFyZ3MgZXh0ZW5kcyBTZWVrUHJldmlld0FyZ3Mge1xuICAvKipcbiAgICogVGVsbHMgaWYgdGhlIHNlZWsgcHJldmlldyBldmVudCBjb21lcyBmcm9tIGEgc2NydWJiaW5nLlxuICAgKi9cbiAgc2NydWJiaW5nOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlZWtCYXJNYXJrZXIge1xuICBtYXJrZXI6IFRpbWVsaW5lTWFya2VyO1xuICBwb3NpdGlvbjogbnVtYmVyO1xuICBkdXJhdGlvbj86IG51bWJlcjtcbiAgZWxlbWVudD86IERPTTtcbn1cblxuLyoqXG4gKiBBIHNlZWsgYmFyIHRvIHNlZWsgd2l0aGluIHRoZSBwbGF5ZXIncyBtZWRpYS4gSXQgZGlzcGxheXMgdGhlIGN1cnJlbnQgcGxheWJhY2sgcG9zaXRpb24sIGFtb3VudCBvZiBidWZmZWQgZGF0YSwgc2Vla1xuICogdGFyZ2V0LCBhbmQga2VlcHMgc3RhdHVzIGFib3V0IGFuIG9uZ29pbmcgc2Vlay5cbiAqXG4gKiBUaGUgc2VlayBiYXIgZGlzcGxheXMgZGlmZmVyZW50ICdiYXJzJzpcbiAqICAtIHRoZSBwbGF5YmFjayBwb3NpdGlvbiwgaS5lLiB0aGUgcG9zaXRpb24gaW4gdGhlIG1lZGlhIGF0IHdoaWNoIHRoZSBwbGF5ZXIgY3VycmVudCBwbGF5YmFjayBwb2ludGVyIGlzIHBvc2l0aW9uZWRcbiAqICAtIHRoZSBidWZmZXIgcG9zaXRpb24sIHdoaWNoIHVzdWFsbHkgaXMgdGhlIHBsYXliYWNrIHBvc2l0aW9uIHBsdXMgdGhlIHRpbWUgc3BhbiB0aGF0IGlzIGFscmVhZHkgYnVmZmVyZWQgYWhlYWRcbiAqICAtIHRoZSBzZWVrIHBvc2l0aW9uLCB1c2VkIHRvIHByZXZpZXcgdG8gd2hlcmUgaW4gdGhlIHRpbWVsaW5lIGEgc2VlayB3aWxsIGp1bXAgdG9cbiAqL1xuZXhwb3J0IGNsYXNzIFNlZWtCYXIgZXh0ZW5kcyBDb21wb25lbnQ8U2Vla0JhckNvbmZpZz4ge1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgU01PT1RIX1BMQVlCQUNLX1BPU0lUSU9OX1VQREFURV9ESVNBQkxFRCA9IC0xO1xuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIHRoYXQgaXMgYWRkZWQgdG8gdGhlIERPTSBlbGVtZW50IHdoaWxlIHRoZSBzZWVrIGJhciBpcyBpbiAnc2Vla2luZycgc3RhdGUuXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDTEFTU19TRUVLSU5HID0gJ3NlZWtpbmcnO1xuXG4gIHByaXZhdGUgc2Vla0JhcjogRE9NO1xuICBwcml2YXRlIHNlZWtCYXJQbGF5YmFja1Bvc2l0aW9uOiBET007XG4gIHByaXZhdGUgc2Vla0JhclBsYXliYWNrUG9zaXRpb25NYXJrZXI6IERPTTtcbiAgcHJpdmF0ZSBzZWVrQmFyQnVmZmVyUG9zaXRpb246IERPTTtcbiAgcHJpdmF0ZSBzZWVrQmFyU2Vla1Bvc2l0aW9uOiBET007XG4gIHByaXZhdGUgc2Vla0JhckJhY2tkcm9wOiBET007XG5cbiAgcHJpdmF0ZSBsYWJlbDogU2Vla0JhckxhYmVsO1xuXG4gIHByaXZhdGUgc2Vla0Jhck1hcmtlcnNDb250YWluZXI6IERPTTtcbiAgcHJpdmF0ZSB0aW1lbGluZU1hcmtlcnNIYW5kbGVyOiBUaW1lbGluZU1hcmtlcnNIYW5kbGVyO1xuXG4gIHByaXZhdGUgcGxheWVyOiBQbGF5ZXJBUEk7XG5cbiAgcHJvdGVjdGVkIHNlZWtCYXJUeXBlOiBTZWVrQmFyVHlwZTtcblxuICBwcm90ZWN0ZWQgaXNVaVNob3duOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBCdWZmZXIgb2YgdGhlIHRoZSBjdXJyZW50IHBsYXliYWNrIHBvc2l0aW9uLiBUaGUgcG9zaXRpb24gbXVzdCBiZSBidWZmZXJlZCBpbiBjYXNlIHRoZSBlbGVtZW50XG4gICAqIG5lZWRzIHRvIGJlIHJlZnJlc2hlZCB3aXRoIHtAbGluayAjcmVmcmVzaFBsYXliYWNrUG9zaXRpb259LlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgcHJpdmF0ZSBwbGF5YmFja1Bvc2l0aW9uUGVyY2VudGFnZSA9IDA7XG5cbiAgcHJpdmF0ZSBzbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlcjogVGltZW91dDtcbiAgcHJpdmF0ZSBwYXVzZWRUaW1lc2hpZnRVcGRhdGVyOiBUaW1lb3V0O1xuXG4gIHByaXZhdGUgaXNVc2VyU2Vla2luZyA9IGZhbHNlO1xuXG4gIHByaXZhdGUgc2Vla0JhckV2ZW50cyA9IHtcbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGEgc2NydWJiaW5nIHNlZWsgb3BlcmF0aW9uIGlzIHN0YXJ0ZWQuXG4gICAgICovXG4gICAgb25TZWVrOiBuZXcgRXZlbnREaXNwYXRjaGVyPFNlZWtCYXIsIE5vQXJncz4oKSxcbiAgICAvKipcbiAgICAgKiBGaXJlZCBkdXJpbmcgYSBzY3J1YmJpbmcgc2VlayB0byBpbmRpY2F0ZSB0aGF0IHRoZSBzZWVrIHByZXZpZXcgKGkuZS4gdGhlIHZpZGVvIGZyYW1lKSBzaG91bGQgYmUgdXBkYXRlZC5cbiAgICAgKi9cbiAgICBvblNlZWtQcmV2aWV3OiBuZXcgRXZlbnREaXNwYXRjaGVyPFNlZWtCYXIsIFNlZWtQcmV2aWV3RXZlbnRBcmdzPigpLFxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gYSBzY3J1YmJpbmcgc2VlayBoYXMgZmluaXNoZWQgb3Igd2hlbiBhIGRpcmVjdCBzZWVrIGlzIGlzc3VlZC5cbiAgICAgKi9cbiAgICBvblNlZWtlZDogbmV3IEV2ZW50RGlzcGF0Y2hlcjxTZWVrQmFyLCBudW1iZXI+KCksXG4gIH07XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTZWVrQmFyQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgY29uc3Qga2V5U3RlcEluY3JlbWVudHMgPSB0aGlzLmNvbmZpZy5rZXlTdGVwSW5jcmVtZW50cyB8fCB7XG4gICAgICBsZWZ0UmlnaHQ6IDEsXG4gICAgICB1cERvd246IDUsXG4gICAgfTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktc2Vla2JhcicsXG4gICAgICB2ZXJ0aWNhbDogZmFsc2UsXG4gICAgICBzbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlSW50ZXJ2YWxNczogNTAsXG4gICAgICBrZXlTdGVwSW5jcmVtZW50cyxcbiAgICAgIGFyaWFMYWJlbDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3NlZWtCYXInKSxcbiAgICAgIHRhYkluZGV4OiAwLFxuICAgICAgc25hcHBpbmdSYW5nZTogMSxcbiAgICAgIGVuYWJsZVNlZWtQcmV2aWV3OiB0cnVlLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcblxuICAgIHRoaXMubGFiZWwgPSB0aGlzLmNvbmZpZy5sYWJlbDtcbiAgfVxuXG4gIGluaXRpYWxpemUoKTogdm9pZCB7XG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuXG4gICAgaWYgKHRoaXMuaGFzTGFiZWwoKSkge1xuICAgICAgdGhpcy5nZXRMYWJlbCgpLmluaXRpYWxpemUoKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgc2V0QXJpYVNsaWRlck1pbk1heChtaW46IHN0cmluZywgbWF4OiBzdHJpbmcpIHtcbiAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hdHRyKCdhcmlhLXZhbHVlbWluJywgbWluKTtcbiAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hdHRyKCdhcmlhLXZhbHVlbWF4JywgbWF4KTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0QXJpYVNsaWRlclZhbHVlcygpIHtcbiAgICBpZiAodGhpcy5zZWVrQmFyVHlwZSA9PT0gU2Vla0JhclR5cGUuTGl2ZSkge1xuICAgICAgY29uc3QgdGltZXNoaWZ0VmFsdWUgPSBNYXRoLmNlaWwodGhpcy5wbGF5ZXIuZ2V0VGltZVNoaWZ0KCkpLnRvU3RyaW5nKCk7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hdHRyKCdhcmlhLXZhbHVlbm93JywgdGltZXNoaWZ0VmFsdWUpO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuYXR0cignYXJpYS12YWx1ZXRleHQnLCBgJHtpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24oaTE4bi5nZXRMb2NhbGl6ZXIoJ3NlZWtCYXIudGltZXNoaWZ0JykpfSAke2kxOG4ucGVyZm9ybUxvY2FsaXphdGlvbihpMThuLmdldExvY2FsaXplcignc2Vla0Jhci52YWx1ZScpKX06ICR7dGltZXNoaWZ0VmFsdWV9YCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNlZWtCYXJUeXBlID09PSBTZWVrQmFyVHlwZS5Wb2QpIHtcbiAgICAgIGNvbnN0IGFyaWFWYWx1ZVRleHQgPSBgJHtTdHJpbmdVdGlscy5zZWNvbmRzVG9UZXh0KHRoaXMucGxheWVyLmdldEN1cnJlbnRUaW1lKCkpfSAke2kxOG4ucGVyZm9ybUxvY2FsaXphdGlvbihpMThuLmdldExvY2FsaXplcignc2Vla0Jhci5kdXJhdGlvblRleHQnKSl9ICR7U3RyaW5nVXRpbHMuc2Vjb25kc1RvVGV4dCh0aGlzLnBsYXllci5nZXREdXJhdGlvbigpKX1gO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuYXR0cignYXJpYS12YWx1ZW5vdycsIE1hdGguZmxvb3IodGhpcy5wbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKSkudG9TdHJpbmcoKSk7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hdHRyKCdhcmlhLXZhbHVldGV4dCcsIGFyaWFWYWx1ZVRleHQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0UGxheWJhY2tQb3NpdGlvblBlcmNlbnRhZ2UoKTogbnVtYmVyIHtcbiAgICBpZiAodGhpcy5wbGF5ZXIuaXNMaXZlKCkpIHtcbiAgICAgIHJldHVybiAxMDAgLSAoMTAwIC8gdGhpcy5wbGF5ZXIuZ2V0TWF4VGltZVNoaWZ0KCkgKiB0aGlzLnBsYXllci5nZXRUaW1lU2hpZnQoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIDEwMCAvIHRoaXMucGxheWVyLmdldER1cmF0aW9uKCkgKiB0aGlzLmdldFJlbGF0aXZlQ3VycmVudFRpbWUoKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlQnVmZmVyTGV2ZWwocGxheWJhY2tQb3NpdGlvblBlcmNlbnRhZ2U6IG51bWJlcik6IHZvaWQge1xuXG4gICAgbGV0IGJ1ZmZlckxvYWRlZFBlcmNlbnRhZ2VMZXZlbDogbnVtYmVyO1xuICAgIGlmICh0aGlzLnBsYXllci5pc0xpdmUoKSkge1xuICAgICAgLy8gQWx3YXlzIHNob3cgZnVsbCBidWZmZXIgZm9yIGxpdmUgc3RyZWFtc1xuICAgICAgYnVmZmVyTG9hZGVkUGVyY2VudGFnZUxldmVsID0gMTAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBidWZmZXJMb2FkZWRQZXJjZW50YWdlTGV2ZWwgPSBwbGF5YmFja1Bvc2l0aW9uUGVyY2VudGFnZSArIGdldE1pbkJ1ZmZlckxldmVsKHRoaXMucGxheWVyKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldEJ1ZmZlclBvc2l0aW9uKGJ1ZmZlckxvYWRlZFBlcmNlbnRhZ2VMZXZlbCk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIsIGNvbmZpZ3VyZVNlZWs6IGJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMucGxheWVyID0gcGxheWVyO1xuXG4gICAgLy8gQXBwbHkgc2NhbGluZyB0cmFuc2Zvcm0gdG8gdGhlIGJhY2tkcm9wIGJhciB0byBoYXZlIGFsbCBiYXJzIHJlbmRlcmVkIHNpbWlsYXJseVxuICAgIC8vICh0aGUgY2FsbCBtdXN0IGJlIHVwIGhlcmUgdG8gYmUgZXhlY3V0ZWQgZm9yIHRoZSB2b2x1bWUgc2xpZGVyIGFzIHdlbGwpXG4gICAgdGhpcy5zZXRQb3NpdGlvbih0aGlzLnNlZWtCYXJCYWNrZHJvcCwgMTAwKTtcblxuICAgIC8vIEFkZCBzZWVrYmFyIGNvbnRyb2xzIHRvIHRoZSBzZWVrYmFyXG4gICAgY29uc3Qgc2Vla0JhckNvbnRyb2xsZXIgPSBuZXcgU2Vla0JhckNvbnRyb2xsZXIodGhpcy5jb25maWcua2V5U3RlcEluY3JlbWVudHMsIHBsYXllciwgdWltYW5hZ2VyLmdldENvbmZpZygpLnZvbHVtZUNvbnRyb2xsZXIpO1xuXG4gICAgc2Vla0JhckNvbnRyb2xsZXIuc2V0U2Vla0JhckNvbnRyb2xzKHRoaXMuZ2V0RG9tRWxlbWVudCgpLCAoKSA9PiB0aGlzLnNlZWtCYXJUeXBlKTtcblxuICAgIC8vIFRoZSBjb25maWd1cmVTZWVrIGZsYWcgY2FuIGJlIHVzZWQgYnkgc3ViY2xhc3NlcyB0byBkaXNhYmxlIGNvbmZpZ3VyYXRpb24gYXMgc2VlayBiYXIuIEUuZy4gdGhlIHZvbHVtZVxuICAgIC8vIHNsaWRlciBpcyByZXVzaW5nIHRoaXMgY29tcG9uZW50IGJ1dCBhZGRzIGl0cyBvd24gZnVuY3Rpb25hbGl0eSwgYW5kIGRvZXMgbm90IG5lZWQgdGhlIHNlZWsgZnVuY3Rpb25hbGl0eS5cbiAgICAvLyBUaGlzIGlzIGFjdHVhbGx5IGEgaGFjaywgdGhlIHByb3BlciBzb2x1dGlvbiB3b3VsZCBiZSBmb3IgYm90aCBzZWVrIGJhciBhbmQgdm9sdW1lIHNsaWRlcnMgdG8gZXh0ZW5kXG4gICAgLy8gYSBjb21tb24gYmFzZSBzbGlkZXIgY29tcG9uZW50IGFuZCBpbXBsZW1lbnQgdGhlaXIgZnVuY3Rpb25hbGl0eSB0aGVyZS5cbiAgICBpZiAoIWNvbmZpZ3VyZVNlZWspIHtcbiAgICAgIHRoaXMuc2Vla0JhclR5cGUgPSBTZWVrQmFyVHlwZS5Wb2x1bWU7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1aW1hbmFnZXIub25Db250cm9sc1Nob3cuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuaXNVaVNob3duID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIHVpbWFuYWdlci5vbkNvbnRyb2xzSGlkZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5pc1VpU2hvd24gPSBmYWxzZTtcbiAgICB9KTtcblxuICAgIGxldCBpc1BsYXlpbmcgPSBmYWxzZTtcbiAgICBsZXQgc2NydWJiaW5nID0gZmFsc2U7XG4gICAgbGV0IGlzUGxheWVyU2Vla2luZyA9IGZhbHNlO1xuICAgIGxldCBzdXNwZW5zaW9uOiBHcm91cFBsYXliYWNrU3VzcGVuc2lvbiB8IHVuZGVmaW5lZDtcblxuICAgIC8vIFVwZGF0ZSBwbGF5YmFjayBhbmQgYnVmZmVyIHBvc2l0aW9uc1xuICAgIGxldCBwbGF5YmFja1Bvc2l0aW9uSGFuZGxlciA9IChldmVudDogUGxheWVyRXZlbnRCYXNlID0gbnVsbCwgZm9yY2VVcGRhdGU6IGJvb2xlYW4gPSBmYWxzZSkgPT4ge1xuICAgICAgaWYgKHRoaXMuaXNVc2VyU2Vla2luZykge1xuICAgICAgICAvLyBXZSBjYXVnaHQgYSBzZWVrIHByZXZpZXcgc2VlaywgZG8gbm90IHVwZGF0ZSB0aGUgc2Vla2JhclxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBwbGF5YmFja1Bvc2l0aW9uUGVyY2VudGFnZSA9IHRoaXMuZ2V0UGxheWJhY2tQb3NpdGlvblBlcmNlbnRhZ2UoKTtcblxuICAgICAgdGhpcy51cGRhdGVCdWZmZXJMZXZlbChwbGF5YmFja1Bvc2l0aW9uUGVyY2VudGFnZSk7XG5cbiAgICAgIC8vIFRoZSBzZWdtZW50IHJlcXVlc3QgZmluaXNoZWQgaXMgdXNlZCB0byBoZWxwIHRoZSBwbGF5YmFjayBwb3NpdGlvbiBtb3ZlLCB3aGVuIHRoZSBzbW9vdGggcGxheWJhY2sgcG9zaXRpb24gaXMgbm90IGVuYWJsZWQuXG4gICAgICAvLyBBdCB0aGUgc2FtZSB0aW1lIHdoZW4gdGhlIHVzZXIgaXMgc2NydWJiaW5nLCB3ZSBhbHNvIG1vdmUgdGhlIHBvc2l0aW9uIG9mIHRoZSBzZWVrYmFyIHRvIGRpc3BsYXkgYSBwcmV2aWV3IGR1cmluZyBzY3J1YmJpbmcuXG4gICAgICAvLyBXaGVuIHRoZSB1c2VyIGlzIHNjcnViYmluZyB3ZSBkbyBub3QgcmVjb3JkIHRoaXMgYXMgYSB1c2VyIHNlZWsgb3BlcmF0aW9uLCBhcyB0aGUgdXNlciBoYXMgeWV0IHRvIGZpbmlzaCB0aGVpciBzZWVrLFxuICAgICAgLy8gYnV0IHdlIHNob3VsZCBub3QgbW92ZSB0aGUgcGxheWJhY2sgcG9zaXRpb24gdG8gbm90IGNyZWF0ZSBhIGp1bXBpbmcgYmVoYXZpb3VyLlxuICAgICAgaWYgKHNjcnViYmluZyAmJiBldmVudCAmJiBldmVudC50eXBlID09PSBwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TZWdtZW50UmVxdWVzdEZpbmlzaGVkICYmIHBsYXliYWNrUG9zaXRpb25QZXJjZW50YWdlICE9PSB0aGlzLnBsYXliYWNrUG9zaXRpb25QZXJjZW50YWdlKSB7XG4gICAgICAgIHBsYXliYWNrUG9zaXRpb25QZXJjZW50YWdlID0gdGhpcy5wbGF5YmFja1Bvc2l0aW9uUGVyY2VudGFnZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBsYXllci5pc0xpdmUoKSkge1xuICAgICAgICBpZiAocGxheWVyLmdldE1heFRpbWVTaGlmdCgpID09PSAwKSB7XG4gICAgICAgICAgLy8gVGhpcyBjYXNlIG11c3QgYmUgZXhwbGljaXRseSBoYW5kbGVkIHRvIGF2b2lkIGRpdmlzaW9uIGJ5IHplcm9cbiAgICAgICAgICB0aGlzLnNldFBsYXliYWNrUG9zaXRpb24oMTAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIXRoaXMuaXNTZWVraW5nKCkpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0UGxheWJhY2tQb3NpdGlvbihwbGF5YmFja1Bvc2l0aW9uUGVyY2VudGFnZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5zZXRBcmlhU2xpZGVyTWluTWF4KHBsYXllci5nZXRNYXhUaW1lU2hpZnQoKS50b1N0cmluZygpLCAnMCcpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBVcGRhdGUgcGxheWJhY2sgcG9zaXRpb24gb25seSBpbiBwYXVzZWQgc3RhdGUgb3IgaW4gdGhlIGluaXRpYWwgc3RhcnR1cCBzdGF0ZSB3aGVyZSBwbGF5ZXIgaXMgbmVpdGhlclxuICAgICAgICAvLyBwYXVzZWQgbm9yIHBsYXlpbmcuIFBsYXliYWNrIHVwZGF0ZXMgYXJlIGhhbmRsZWQgaW4gdGhlIFRpbWVvdXQgYmVsb3cuXG4gICAgICAgIGNvbnN0IGlzSW5Jbml0aWFsU3RhcnR1cFN0YXRlID0gdGhpcy5jb25maWcuc21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZUludGVydmFsTXMgPT09IFNlZWtCYXIuU01PT1RIX1BMQVlCQUNLX1BPU0lUSU9OX1VQREFURV9ESVNBQkxFRFxuICAgICAgICAgICAgfHwgZm9yY2VVcGRhdGUgfHwgcGxheWVyLmlzUGF1c2VkKCk7XG4gICAgICAgIGNvbnN0IGlzTmVpdGhlclBhdXNlZE5vclBsYXlpbmcgPSBwbGF5ZXIuaXNQYXVzZWQoKSA9PT0gcGxheWVyLmlzUGxheWluZygpO1xuXG4gICAgICAgIGlmICgoaXNJbkluaXRpYWxTdGFydHVwU3RhdGUgfHwgaXNOZWl0aGVyUGF1c2VkTm9yUGxheWluZykgJiYgIXRoaXMuaXNTZWVraW5nKCkpIHtcbiAgICAgICAgICB0aGlzLnNldFBsYXliYWNrUG9zaXRpb24ocGxheWJhY2tQb3NpdGlvblBlcmNlbnRhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRBcmlhU2xpZGVyTWluTWF4KCcwJywgcGxheWVyLmdldER1cmF0aW9uKCkudG9TdHJpbmcoKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzVWlTaG93bikge1xuICAgICAgICB0aGlzLnNldEFyaWFTbGlkZXJWYWx1ZXMoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gVXBkYXRlIHNlZWtiYXIgdXBvbiB0aGVzZSBldmVudHNcbiAgICAvLyBpbml0IHBsYXliYWNrIHBvc2l0aW9uIHdoZW4gdGhlIHBsYXllciBpcyByZWFkeVxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5SZWFkeSwgcGxheWJhY2tQb3NpdGlvbkhhbmRsZXIpO1xuICAgIC8vIHVwZGF0ZSBwbGF5YmFjayBwb3NpdGlvbiB3aGVuIGl0IGNoYW5nZXNcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVGltZUNoYW5nZWQsIHBsYXliYWNrUG9zaXRpb25IYW5kbGVyKTtcbiAgICAvLyB1cGRhdGUgYnVmZmVybGV2ZWwgd2hlbiBidWZmZXJpbmcgaXMgY29tcGxldGVcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU3RhbGxFbmRlZCwgcGxheWJhY2tQb3NpdGlvbkhhbmRsZXIpO1xuICAgIC8vIHVwZGF0ZSBwbGF5YmFjayBwb3NpdGlvbiB3aGVuIGEgdGltZXNoaWZ0IGhhcyBmaW5pc2hlZFxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5UaW1lU2hpZnRlZCwgcGxheWJhY2tQb3NpdGlvbkhhbmRsZXIpO1xuICAgIC8vIHVwZGF0ZSBidWZmZXJsZXZlbCB3aGVuIGEgc2VnbWVudCBoYXMgYmVlbiBkb3dubG9hZGVkXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNlZ21lbnRSZXF1ZXN0RmluaXNoZWQsIHBsYXliYWNrUG9zaXRpb25IYW5kbGVyKTtcblxuICAgIHRoaXMuY29uZmlndXJlTGl2ZVBhdXNlZFRpbWVzaGlmdFVwZGF0ZXIocGxheWVyLCB1aW1hbmFnZXIsIHBsYXliYWNrUG9zaXRpb25IYW5kbGVyKTtcblxuICAgIC8vIFNlZWsgaGFuZGxpbmdcbiAgICBsZXQgb25QbGF5ZXJTZWVrID0gKCkgPT4ge1xuICAgICAgaXNQbGF5ZXJTZWVraW5nID0gdHJ1ZTtcbiAgICAgIHRoaXMuc2V0U2Vla2luZyh0cnVlKTtcbiAgICAgIHNjcnViYmluZyA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBsZXQgb25QbGF5ZXJTZWVrZWQgPSAoZXZlbnQ6IFBsYXllckV2ZW50QmFzZSA9IG51bGwsIGZvcmNlVXBkYXRlOiBib29sZWFuID0gZmFsc2UgKSA9PiB7XG4gICAgICBpc1BsYXllclNlZWtpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuc2V0U2Vla2luZyhmYWxzZSk7XG5cbiAgICAgIC8vIHVwZGF0ZSBwbGF5YmFjayBwb3NpdGlvbiB3aGVuIGEgc2VlayBoYXMgZmluaXNoZWRcbiAgICAgIHBsYXliYWNrUG9zaXRpb25IYW5kbGVyKGV2ZW50LCBmb3JjZVVwZGF0ZSk7XG4gICAgfTtcblxuICAgIGxldCByZXN0b3JlUGxheWluZ1N0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gQ29udGludWUgcGxheWJhY2sgYWZ0ZXIgc2VlayBpZiBwbGF5ZXIgd2FzIHBsYXlpbmcgd2hlbiBzZWVrIHN0YXJ0ZWRcbiAgICAgIGlmIChpc1BsYXlpbmcpIHtcbiAgICAgICAgLy8gdXNlIHRoZSBzYW1lIGlzc3VlciBoZXJlIGFzIGluIHRoZSBwYXVzZSBvbiBzZWVrXG4gICAgICAgIHBsYXllci5wbGF5KCd1aS1zZWVrJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TZWVrLCBvblBsYXllclNlZWspO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TZWVrZWQsIG9uUGxheWVyU2Vla2VkKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVGltZVNoaWZ0LCBvblBsYXllclNlZWspO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5UaW1lU2hpZnRlZCwgb25QbGF5ZXJTZWVrZWQpO1xuXG4gICAgbGV0IGlzR3JvdXBQbGF5YmFja0FQSUF2YWlsYWJsZSA9IChwbGF5ZXI6IFBsYXllckFQSSk6IHBsYXllciBpcyBFeHRlbmRlZFBsYXllckFQSSA9PiB7XG4gICAgICByZXR1cm4gISEocGxheWVyIGFzIEV4dGVuZGVkUGxheWVyQVBJKS5ncm91cFBsYXliYWNrO1xuICAgIH07XG5cbiAgICB0aGlzLm9uU2Vlay5zdWJzY3JpYmUoKHNlbmRlcikgPT4ge1xuICAgICAgLy8gdHJhY2sgc2Vla2luZyBzdGF0dXMgc28gd2UgY2FuIGNhdGNoIGV2ZW50cyBmcm9tIHNlZWsgcHJldmlldyBzZWVrc1xuICAgICAgdGhpcy5pc1VzZXJTZWVraW5nID0gdHJ1ZTtcbiAgICAgIC8vIE5vdGlmeSBVSSBtYW5hZ2VyIG9mIHN0YXJ0ZWQgc2Vla1xuICAgICAgdWltYW5hZ2VyLm9uU2Vlay5kaXNwYXRjaChzZW5kZXIpO1xuXG4gICAgICBpZiAoaXNHcm91cFBsYXliYWNrQVBJQXZhaWxhYmxlKHBsYXllcikgJiYgcGxheWVyLmdyb3VwUGxheWJhY2suaGFzSm9pbmVkKCkgJiYgIXN1c3BlbnNpb24pIHtcbiAgICAgICAgc3VzcGVuc2lvbiA9IHBsYXllci5ncm91cFBsYXliYWNrLmJlZ2luU3VzcGVuc2lvbihHcm91cFBsYXliYWNrU3VzcGVuc2lvblJlYXNvbi5Vc2VySXNTY3J1YmJpbmcpO1xuICAgICAgfVxuXG4gICAgICAvLyBTYXZlIGN1cnJlbnQgcGxheWJhY2sgc3RhdGUgYmVmb3JlIHBlcmZvcm1pbmcgdGhlIHNlZWtcbiAgICAgIGlmICghaXNQbGF5ZXJTZWVraW5nKSB7XG4gICAgICAgIGlzUGxheWluZyA9IHBsYXllci5pc1BsYXlpbmcoKTtcblxuICAgICAgICAvLyBQYXVzZSBwbGF5YmFjayB3aGlsZSBzZWVraW5nXG4gICAgICAgIGlmIChpc1BsYXlpbmcpIHtcbiAgICAgICAgICAvLyB1c2UgYSBkaWZmZXJlbnQgaXNzdWVyIGhlcmUsIGFzIHBsYXkvcGF1c2Ugb24gc2VlayBpcyBub3QgXCJyZWFsbHlcIiB0cmlnZ2VyZCBieSB0aGUgdXNlclxuICAgICAgICAgIHBsYXllci5wYXVzZSgndWktc2VlaycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uU2Vla1ByZXZpZXcuc3Vic2NyaWJlKChzZW5kZXI6IFNlZWtCYXIsIGFyZ3M6IFNlZWtQcmV2aWV3RXZlbnRBcmdzKSA9PiB7XG4gICAgICAvLyBOb3RpZnkgVUkgbWFuYWdlciBvZiBzZWVrIHByZXZpZXdcbiAgICAgIHVpbWFuYWdlci5vblNlZWtQcmV2aWV3LmRpc3BhdGNoKHNlbmRlciwgYXJncyk7XG4gICAgICBzY3J1YmJpbmcgPSBhcmdzLnNjcnViYmluZztcbiAgICB9KTtcblxuICAgIC8vIFNldCBlbmFibGVTZWVrUHJldmlldyBpZiBzZXQgaW4gdGhlIHVpbWFuYWdlciBjb25maWdcbiAgICBpZiAodHlwZW9mIHVpbWFuYWdlci5nZXRDb25maWcoKS5lbmFibGVTZWVrUHJldmlldyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICB0aGlzLmNvbmZpZy5lbmFibGVTZWVrUHJldmlldyA9IHVpbWFuYWdlci5nZXRDb25maWcoKS5lbmFibGVTZWVrUHJldmlldztcbiAgICB9XG5cbiAgICAvLyBSYXRlLWxpbWl0ZWQgc2NydWJiaW5nIHNlZWtcbiAgICBpZiAodGhpcy5jb25maWcuZW5hYmxlU2Vla1ByZXZpZXcpIHtcbiAgICAgIHRoaXMub25TZWVrUHJldmlldy5zdWJzY3JpYmVSYXRlTGltaXRlZCh0aGlzLnNlZWtXaGlsZVNjcnViYmluZywgMjAwKTtcbiAgICB9XG5cbiAgICB0aGlzLm9uU2Vla2VkLnN1YnNjcmliZSgoc2VuZGVyLCBwZXJjZW50YWdlKSA9PiB7XG4gICAgICB0aGlzLmlzVXNlclNlZWtpbmcgPSBmYWxzZTtcblxuICAgICAgLy8gRG8gdGhlIHNlZWtcbiAgICAgIHRoaXMuc2VlayhwZXJjZW50YWdlKTtcblxuICAgICAgLy8gTm90aWZ5IFVJIG1hbmFnZXIgb2YgZmluaXNoZWQgc2Vla1xuICAgICAgdWltYW5hZ2VyLm9uU2Vla2VkLmRpc3BhdGNoKHNlbmRlcik7XG5cbiAgICAgIC8vIENvbnRpbnVlIHBsYXliYWNrIGFmdGVyIHNlZWsgaWYgcGxheWVyIHdhcyBwbGF5aW5nIHdoZW4gc2VlayBzdGFydGVkXG4gICAgICByZXN0b3JlUGxheWluZ1N0YXRlKCk7XG5cbiAgICAgIGlmIChpc0dyb3VwUGxheWJhY2tBUElBdmFpbGFibGUocGxheWVyKSAmJiBwbGF5ZXIuZ3JvdXBQbGF5YmFjay5oYXNKb2luZWQoKSAmJiBzdXNwZW5zaW9uKSB7XG4gICAgICAgIGNvbnN0IHByb3Bvc2VkUGxheWJhY2tUaW1lID0gdGhpcy5nZXRUYXJnZXRTZWVrUG9zaXRpb24ocGVyY2VudGFnZSk7XG4gICAgICAgIHBsYXllci5ncm91cFBsYXliYWNrLmVuZFN1c3BlbnNpb24oc3VzcGVuc2lvbiwgeyBwcm9wb3NlZFBsYXliYWNrVGltZSB9KTtcbiAgICAgICAgc3VzcGVuc2lvbiA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICh0aGlzLmhhc0xhYmVsKCkpIHtcbiAgICAgIC8vIENvbmZpZ3VyZSBhIHNlZWtiYXIgbGFiZWwgdGhhdCBpcyBpbnRlcm5hbCB0byB0aGUgc2Vla2JhcilcbiAgICAgIHRoaXMuZ2V0TGFiZWwoKS5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuICAgIH1cblxuICAgIC8vIEhpZGUgc2Vla2JhciBmb3IgbGl2ZSBzb3VyY2VzIHdpdGhvdXQgdGltZXNoaWZ0XG4gICAgbGV0IGlzTGl2ZSA9IGZhbHNlO1xuICAgIGxldCBoYXNUaW1lU2hpZnQgPSBmYWxzZTtcbiAgICBsZXQgc3dpdGNoVmlzaWJpbGl0eSA9IChpc0xpdmU6IGJvb2xlYW4sIGhhc1RpbWVTaGlmdDogYm9vbGVhbikgPT4ge1xuICAgICAgaWYgKGlzTGl2ZSAmJiAhaGFzVGltZVNoaWZ0KSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB9XG4gICAgICBwbGF5YmFja1Bvc2l0aW9uSGFuZGxlcihudWxsLCB0cnVlKTtcbiAgICAgIHRoaXMucmVmcmVzaFBsYXliYWNrUG9zaXRpb24oKTtcbiAgICB9O1xuICAgIGxldCBsaXZlU3RyZWFtRGV0ZWN0b3IgPSBuZXcgUGxheWVyVXRpbHMuTGl2ZVN0cmVhbURldGVjdG9yKHBsYXllciwgdWltYW5hZ2VyKTtcbiAgICBsaXZlU3RyZWFtRGV0ZWN0b3Iub25MaXZlQ2hhbmdlZC5zdWJzY3JpYmUoKHNlbmRlciwgYXJnczogTGl2ZVN0cmVhbURldGVjdG9yRXZlbnRBcmdzKSA9PiB7XG4gICAgICBpc0xpdmUgPSBhcmdzLmxpdmU7XG4gICAgICBpZiAoaXNMaXZlICYmIHRoaXMuc21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZXIgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVyLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuc2Vla0JhclR5cGUgPSBTZWVrQmFyVHlwZS5MaXZlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZWVrQmFyVHlwZSA9IFNlZWtCYXJUeXBlLlZvZDtcbiAgICAgIH1cbiAgICAgIHN3aXRjaFZpc2liaWxpdHkoaXNMaXZlLCBoYXNUaW1lU2hpZnQpO1xuICAgIH0pO1xuICAgIGxldCB0aW1lU2hpZnREZXRlY3RvciA9IG5ldyBQbGF5ZXJVdGlscy5UaW1lU2hpZnRBdmFpbGFiaWxpdHlEZXRlY3RvcihwbGF5ZXIpO1xuICAgIHRpbWVTaGlmdERldGVjdG9yLm9uVGltZVNoaWZ0QXZhaWxhYmlsaXR5Q2hhbmdlZC5zdWJzY3JpYmUoKHNlbmRlciwgYXJnczogVGltZVNoaWZ0QXZhaWxhYmlsaXR5Q2hhbmdlZEFyZ3MpID0+IHtcbiAgICAgIGhhc1RpbWVTaGlmdCA9IGFyZ3MudGltZVNoaWZ0QXZhaWxhYmxlO1xuICAgICAgc3dpdGNoVmlzaWJpbGl0eShpc0xpdmUsIGhhc1RpbWVTaGlmdCk7XG4gICAgfSk7XG4gICAgLy8gSW5pdGlhbCBkZXRlY3Rpb25cbiAgICBsaXZlU3RyZWFtRGV0ZWN0b3IuZGV0ZWN0KCk7XG4gICAgdGltZVNoaWZ0RGV0ZWN0b3IuZGV0ZWN0KCk7XG5cbiAgICAvLyBSZWZyZXNoIHRoZSBwbGF5YmFjayBwb3NpdGlvbiB3aGVuIHRoZSBwbGF5ZXIgcmVzaXplZCBvciB0aGUgVUkgaXMgY29uZmlndXJlZC4gVGhlIHBsYXliYWNrIHBvc2l0aW9uIG1hcmtlclxuICAgIC8vIGlzIHBvc2l0aW9uZWQgYWJzb2x1dGVseSBhbmQgbXVzdCB0aGVyZWZvcmUgYmUgdXBkYXRlZCB3aGVuIHRoZSBzaXplIG9mIHRoZSBzZWVrYmFyIGNoYW5nZXMuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXllclJlc2l6ZWQsICgpID0+IHtcbiAgICAgIHRoaXMucmVmcmVzaFBsYXliYWNrUG9zaXRpb24oKTtcbiAgICB9KTtcbiAgICAvLyBBZGRpdGlvbmFsbHksIHdoZW4gdGhpcyBjb2RlIGlzIGNhbGxlZCwgdGhlIHNlZWtiYXIgaXMgbm90IHBhcnQgb2YgdGhlIFVJIHlldCBhbmQgdGhlcmVmb3JlIGRvZXMgbm90IGhhdmUgYSBzaXplLFxuICAgIC8vIHJlc3VsdGluZyBpbiBhIHdyb25nIGluaXRpYWwgcG9zaXRpb24gb2YgdGhlIG1hcmtlci4gUmVmcmVzaGluZyBpdCBvbmNlIHRoZSBVSSBpcyBjb25maWd1cmVkIHNvbHZlZCB0aGlzIGlzc3VlLlxuICAgIHVpbWFuYWdlci5vbkNvbmZpZ3VyZWQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMucmVmcmVzaFBsYXliYWNrUG9zaXRpb24oKTtcbiAgICB9KTtcbiAgICAvLyBJdCBjYW4gYWxzbyBoYXBwZW4gd2hlbiBhIG5ldyBzb3VyY2UgaXMgbG9hZGVkXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZUxvYWRlZCwgKCkgPT4ge1xuICAgICAgdGhpcy5yZWZyZXNoUGxheWJhY2tQb3NpdGlvbigpO1xuICAgIH0pO1xuICAgIC8vIEFkZCBtYXJrZXJzIHdoZW4gYSBzb3VyY2UgaXMgbG9hZGVkIG9yIHVwZGF0ZSB3aGVuIGEgbWFya2VyIGlzIGFkZGVkIG9yIHJlbW92ZWRcbiAgICB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgcGxheWJhY2tQb3NpdGlvbkhhbmRsZXIoKTtcbiAgICB9KTtcblxuICAgIC8vIFNldCB0aGUgc25hcHBpbmdSYW5nZSBpZiBzZXQgaW4gdGhlIHVpbWFuYWdlciBjb25maWdcbiAgICBpZiAodHlwZW9mIHVpbWFuYWdlci5nZXRDb25maWcoKS5zZWVrYmFyU25hcHBpbmdSYW5nZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHRoaXMuY29uZmlnLnNuYXBwaW5nUmFuZ2UgPSB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuc2Vla2JhclNuYXBwaW5nUmFuZ2U7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBzZWVrYmFyXG4gICAgcGxheWJhY2tQb3NpdGlvbkhhbmRsZXIoKTsgLy8gU2V0IHRoZSBwbGF5YmFjayBwb3NpdGlvblxuICAgIHRoaXMuc2V0QnVmZmVyUG9zaXRpb24oMCk7XG4gICAgdGhpcy5zZXRTZWVrUG9zaXRpb24oMCk7XG4gICAgaWYgKHRoaXMuY29uZmlnLnNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVJbnRlcnZhbE1zICE9PSBTZWVrQmFyLlNNT09USF9QTEFZQkFDS19QT1NJVElPTl9VUERBVEVfRElTQUJMRUQpIHtcbiAgICAgIHRoaXMuY29uZmlndXJlU21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZXIocGxheWVyLCB1aW1hbmFnZXIpO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgbWFya2Vyc1xuICAgIHRoaXMuaW5pdGlhbGl6ZVRpbWVsaW5lTWFya2VycyhwbGF5ZXIsIHVpbWFuYWdlcik7XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemVUaW1lbGluZU1hcmtlcnMocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBjb25zdCB0aW1lbGluZU1hcmtlckNvbmZpZyA9IHtcbiAgICAgIGNzc1ByZWZpeDogdGhpcy5jb25maWcuY3NzUHJlZml4LFxuICAgICAgc25hcHBpbmdSYW5nZTogdGhpcy5jb25maWcuc25hcHBpbmdSYW5nZSxcbiAgICB9O1xuICAgIHRoaXMudGltZWxpbmVNYXJrZXJzSGFuZGxlciA9IG5ldyBUaW1lbGluZU1hcmtlcnNIYW5kbGVyKHRpbWVsaW5lTWFya2VyQ29uZmlnLCAoKSA9PiB0aGlzLnNlZWtCYXIud2lkdGgoKSwgdGhpcy5zZWVrQmFyTWFya2Vyc0NvbnRhaW5lcik7XG4gICAgdGhpcy50aW1lbGluZU1hcmtlcnNIYW5kbGVyLmluaXRpYWxpemUocGxheWVyLCB1aW1hbmFnZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZWVrV2hpbGVTY3J1YmJpbmcgPSAoc2VuZGVyOiBTZWVrQmFyLCBhcmdzOiBTZWVrUHJldmlld0V2ZW50QXJncykgPT4ge1xuICAgIGlmIChhcmdzLnNjcnViYmluZykge1xuICAgICAgdGhpcy5zZWVrKGFyZ3MucG9zaXRpb24pO1xuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIGdldFRhcmdldFNlZWtQb3NpdGlvbiA9IChwZXJjZW50YWdlOiBudW1iZXIpID0+IHtcbiAgICBsZXQgdGFyZ2V0OiBudW1iZXI7XG4gICAgaWYgKHRoaXMucGxheWVyLmlzTGl2ZSgpKSB7XG4gICAgICBjb25zdCBtYXhUaW1lU2hpZnQgPSB0aGlzLnBsYXllci5nZXRNYXhUaW1lU2hpZnQoKTtcbiAgICAgIHRhcmdldCA9IG1heFRpbWVTaGlmdCAtIChtYXhUaW1lU2hpZnQgKiAocGVyY2VudGFnZSAvIDEwMCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzZWVrYWJsZVJhbmdlU3RhcnQgPSBQbGF5ZXJVdGlscy5nZXRTZWVrYWJsZVJhbmdlU3RhcnQodGhpcy5wbGF5ZXIsIDApO1xuICAgICAgY29uc3QgcmVsYXRpdmVTZWVrVGFyZ2V0ID0gdGhpcy5wbGF5ZXIuZ2V0RHVyYXRpb24oKSAqIChwZXJjZW50YWdlIC8gMTAwKTtcbiAgICAgIHRhcmdldCA9IHJlbGF0aXZlU2Vla1RhcmdldCArIHNlZWthYmxlUmFuZ2VTdGFydDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgcHJpdmF0ZSBzZWVrID0gKHBlcmNlbnRhZ2U6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IHRhcmdldFBsYXliYWNrUG9zaXRpb24gPSB0aGlzLmdldFRhcmdldFNlZWtQb3NpdGlvbihwZXJjZW50YWdlKTtcbiAgICBpZiAodGhpcy5wbGF5ZXIuaXNMaXZlKCkpIHtcbiAgICAgIHRoaXMucGxheWVyLnRpbWVTaGlmdCh0YXJnZXRQbGF5YmFja1Bvc2l0aW9uLCAndWknKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wbGF5ZXIuc2Vlayh0YXJnZXRQbGF5YmFja1Bvc2l0aW9uLCAndWknKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBzZWVrYmFyIHdoaWxlIGEgbGl2ZSBzdHJlYW0gd2l0aCBEVlIgd2luZG93IGlzIHBhdXNlZC5cbiAgICogVGhlIHBsYXliYWNrIHBvc2l0aW9uIHN0YXlzIHN0aWxsIGFuZCB0aGUgcG9zaXRpb24gaW5kaWNhdG9yIHZpc3VhbGx5IG1vdmVzIHRvd2FyZHMgdGhlIGJhY2suXG4gICAqL1xuICBwcml2YXRlIGNvbmZpZ3VyZUxpdmVQYXVzZWRUaW1lc2hpZnRVcGRhdGVyKFxuICAgIHBsYXllcjogUGxheWVyQVBJLFxuICAgIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIsXG4gICAgcGxheWJhY2tQb3NpdGlvbkhhbmRsZXI6ICgpID0+IHZvaWQsXG4gICk6IHZvaWQge1xuICAgIC8vIFJlZ3VsYXJseSB1cGRhdGUgdGhlIHBsYXliYWNrIHBvc2l0aW9uIHdoaWxlIHRoZSB0aW1lb3V0IGlzIGFjdGl2ZVxuICAgIHRoaXMucGF1c2VkVGltZXNoaWZ0VXBkYXRlciA9IG5ldyBUaW1lb3V0KDEwMDAsIHBsYXliYWNrUG9zaXRpb25IYW5kbGVyLCB0cnVlKTtcblxuICAgIC8vIFN0YXJ0IHVwZGF0ZXIgd2hlbiBhIGxpdmUgc3RyZWFtIHdpdGggdGltZXNoaWZ0IHdpbmRvdyBpcyBwYXVzZWRcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGF1c2VkLCAoKSA9PiB7XG4gICAgICBpZiAocGxheWVyLmlzTGl2ZSgpICYmIHBsYXllci5nZXRNYXhUaW1lU2hpZnQoKSA8IDApIHtcbiAgICAgICAgdGhpcy5wYXVzZWRUaW1lc2hpZnRVcGRhdGVyLnN0YXJ0KCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBTdG9wIHVwZGF0ZXIgd2hlbiBwbGF5YmFjayBjb250aW51ZXMgKG5vIG1hdHRlciBpZiB0aGUgdXBkYXRlciB3YXMgc3RhcnRlZCBiZWZvcmUpXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXksICgpID0+IHRoaXMucGF1c2VkVGltZXNoaWZ0VXBkYXRlci5jbGVhcigpKTtcbiAgfVxuXG4gIHByaXZhdGUgY29uZmlndXJlU21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZXIocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICAvKlxuICAgICAqIFBsYXliYWNrIHBvc2l0aW9uIHVwZGF0ZVxuICAgICAqXG4gICAgICogV2UgZG8gbm90IHVwZGF0ZSB0aGUgcG9zaXRpb24gZGlyZWN0bHkgZnJvbSB0aGUgVGltZUNoYW5nZWQgZXZlbnQsIGJlY2F1c2UgaXQgYXJyaXZlcyB2ZXJ5IGppdHRlcnkgYW5kXG4gICAgICogcmVzdWx0cyBpbiBhIGppdHRlcnkgcG9zaXRpb24gaW5kaWNhdG9yIHNpbmNlIHRoZSBDU1MgdHJhbnNpdGlvbiB0aW1lIGlzIHN0YXRpY2FsbHkgc2V0LlxuICAgICAqIFRvIHdvcmsgYXJvdW5kIHRoaXMgaXNzdWUsIHdlIG1haW50YWluIGEgbG9jYWwgcGxheWJhY2sgcG9zaXRpb24gdGhhdCBpcyB1cGRhdGVkIGluIGEgc3RhYmxlIHJlZ3VsYXIgaW50ZXJ2YWxcbiAgICAgKiBhbmQga2VwdCBpbiBzeW5jIHdpdGggdGhlIHBsYXllci5cbiAgICAgKi9cbiAgICBsZXQgY3VycmVudFRpbWVTZWVrQmFyID0gMDtcbiAgICBsZXQgY3VycmVudFRpbWVQbGF5ZXIgPSAwO1xuICAgIGxldCB1cGRhdGVJbnRlcnZhbE1zID0gNTA7XG4gICAgbGV0IGN1cnJlbnRUaW1lVXBkYXRlRGVsdGFTZWNzID0gdXBkYXRlSW50ZXJ2YWxNcyAvIDEwMDA7XG5cbiAgICB0aGlzLnNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVyID0gbmV3IFRpbWVvdXQodXBkYXRlSW50ZXJ2YWxNcywgKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuaXNTZWVraW5nKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjdXJyZW50VGltZVNlZWtCYXIgKz0gY3VycmVudFRpbWVVcGRhdGVEZWx0YVNlY3M7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGN1cnJlbnRUaW1lUGxheWVyID0gdGhpcy5nZXRSZWxhdGl2ZUN1cnJlbnRUaW1lKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBEZXRlY3QgaWYgdGhlIHBsYXllciBoYXMgYmVlbiBkZXN0cm95ZWQgYW5kIHN0b3AgdXBkYXRpbmcgaWYgc29cbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgcGxheWVyLmV4cG9ydHMuUGxheWVyQVBJTm90QXZhaWxhYmxlRXJyb3IpIHtcbiAgICAgICAgICB0aGlzLnNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVyLmNsZWFyKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGUgY3VycmVudCB0aW1lIGNhbm5vdCBiZSByZWFkIGl0IG1ha2VzIG5vIHNlbnNlIHRvIGNvbnRpbnVlXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gU3luYyBjdXJyZW50VGltZSBvZiBzZWVrYmFyIHRvIHBsYXllclxuICAgICAgbGV0IGN1cnJlbnRUaW1lRGVsdGEgPSBjdXJyZW50VGltZVNlZWtCYXIgLSBjdXJyZW50VGltZVBsYXllcjtcbiAgICAgIC8vIElmIHRoZSBkZWx0YSBpcyBsYXJnZXIgdGhhdCAyIHNlY3MsIGRpcmVjdGx5IGp1bXAgdGhlIHNlZWtiYXIgdG8gdGhlXG4gICAgICAvLyBwbGF5ZXIgdGltZSBpbnN0ZWFkIG9mIHNtb290aGx5IGZhc3QgZm9yd2FyZGluZy9yZXdpbmRpbmcuXG4gICAgICBpZiAoTWF0aC5hYnMoY3VycmVudFRpbWVEZWx0YSkgPiAyKSB7XG4gICAgICAgIGN1cnJlbnRUaW1lU2Vla0JhciA9IGN1cnJlbnRUaW1lUGxheWVyO1xuICAgICAgfVxuICAgICAgLy8gSWYgY3VycmVudFRpbWVEZWx0YSBpcyBuZWdhdGl2ZSBhbmQgYmVsb3cgdGhlIGFkanVzdG1lbnQgdGhyZXNob2xkLFxuICAgICAgLy8gdGhlIHBsYXllciBpcyBhaGVhZCBvZiB0aGUgc2Vla2JhciBhbmQgd2UgJ2Zhc3QgZm9yd2FyZCcgdGhlIHNlZWtiYXJcbiAgICAgIGVsc2UgaWYgKGN1cnJlbnRUaW1lRGVsdGEgPD0gLWN1cnJlbnRUaW1lVXBkYXRlRGVsdGFTZWNzKSB7XG4gICAgICAgIGN1cnJlbnRUaW1lU2Vla0JhciArPSBjdXJyZW50VGltZVVwZGF0ZURlbHRhU2VjcztcbiAgICAgIH1cbiAgICAgIC8vIElmIGN1cnJlbnRUaW1lRGVsdGEgaXMgcG9zaXRpdmUgYW5kIGFib3ZlIHRoZSBhZGp1c3RtZW50IHRocmVzaG9sZCxcbiAgICAgIC8vIHRoZSBwbGF5ZXIgaXMgYmVoaW5kIHRoZSBzZWVrYmFyIGFuZCB3ZSAncmV3aW5kJyB0aGUgc2Vla2JhclxuICAgICAgZWxzZSBpZiAoY3VycmVudFRpbWVEZWx0YSA+PSBjdXJyZW50VGltZVVwZGF0ZURlbHRhU2Vjcykge1xuICAgICAgICBjdXJyZW50VGltZVNlZWtCYXIgLT0gY3VycmVudFRpbWVVcGRhdGVEZWx0YVNlY3M7XG4gICAgICB9XG5cbiAgICAgIGxldCBwbGF5YmFja1Bvc2l0aW9uUGVyY2VudGFnZSA9IDEwMCAvIHBsYXllci5nZXREdXJhdGlvbigpICogY3VycmVudFRpbWVTZWVrQmFyO1xuICAgICAgdGhpcy5zZXRQbGF5YmFja1Bvc2l0aW9uKHBsYXliYWNrUG9zaXRpb25QZXJjZW50YWdlKTtcbiAgICB9LCB0cnVlKTtcblxuICAgIGxldCBzdGFydFNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVyID0gKCkgPT4ge1xuICAgICAgaWYgKCFwbGF5ZXIuaXNMaXZlKCkpIHtcbiAgICAgICAgY3VycmVudFRpbWVTZWVrQmFyID0gdGhpcy5nZXRSZWxhdGl2ZUN1cnJlbnRUaW1lKCk7XG4gICAgICAgIHRoaXMuc21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZXIuc3RhcnQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbGV0IHN0b3BTbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlciA9ICgpID0+IHtcbiAgICAgIHRoaXMuc21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZXIuY2xlYXIoKTtcbiAgICB9O1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXksIHN0YXJ0U21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5aW5nLCBzdGFydFNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVyKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGF1c2VkLCBzdG9wU21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5YmFja0ZpbmlzaGVkLCBzdG9wU21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TZWVrZWQsICgpID0+IHtcbiAgICAgIGN1cnJlbnRUaW1lU2Vla0JhciA9IHRoaXMuZ2V0UmVsYXRpdmVDdXJyZW50VGltZSgpO1xuICAgIH0pO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VVbmxvYWRlZCwgc3RvcFNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVyKTtcblxuICAgIGlmIChwbGF5ZXIuaXNQbGF5aW5nKCkpIHtcbiAgICAgIHN0YXJ0U21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZXIoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldFJlbGF0aXZlQ3VycmVudFRpbWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gUGxheWVyVXRpbHMuZ2V0Q3VycmVudFRpbWVSZWxhdGl2ZVRvU2Vla2FibGVSYW5nZSh0aGlzLnBsYXllcik7XG4gIH1cblxuICByZWxlYXNlKCk6IHZvaWQge1xuICAgIHN1cGVyLnJlbGVhc2UoKTtcblxuICAgIGlmICh0aGlzLnNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVyKSB7IC8vIG9iamVjdCBtdXN0IG5vdCBuZWNlc3NhcmlseSBleGlzdCwgZS5nLiBpbiB2b2x1bWUgc2xpZGVyIHN1YmNsYXNzXG4gICAgICB0aGlzLnNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVyLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGF1c2VkVGltZXNoaWZ0VXBkYXRlcikge1xuICAgICAgdGhpcy5wYXVzZWRUaW1lc2hpZnRVcGRhdGVyLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29uZmlnLmVuYWJsZVNlZWtQcmV2aWV3KSB7XG4gICAgICB0aGlzLm9uU2Vla1ByZXZpZXcudW5zdWJzY3JpYmUodGhpcy5zZWVrV2hpbGVTY3J1YmJpbmcpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCB0b0RvbUVsZW1lbnQoKTogRE9NIHtcbiAgICBpZiAodGhpcy5jb25maWcudmVydGljYWwpIHtcbiAgICAgIHRoaXMuY29uZmlnLmNzc0NsYXNzZXMucHVzaCgndmVydGljYWwnKTtcbiAgICB9XG5cbiAgICBsZXQgc2Vla0JhckNvbnRhaW5lciA9IG5ldyBET00oJ2RpdicsIHtcbiAgICAgICdpZCc6IHRoaXMuY29uZmlnLmlkLFxuICAgICAgJ2NsYXNzJzogdGhpcy5nZXRDc3NDbGFzc2VzKCksXG4gICAgICAncm9sZSc6ICdzbGlkZXInLFxuICAgICAgJ2FyaWEtbGFiZWwnOiBpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24odGhpcy5jb25maWcuYXJpYUxhYmVsKSxcbiAgICAgICd0YWJpbmRleCc6IHRoaXMuY29uZmlnLnRhYkluZGV4LnRvU3RyaW5nKCksXG4gICAgfSk7XG5cbiAgICBsZXQgc2Vla0JhciA9IG5ldyBET00oJ2RpdicsIHtcbiAgICAgICdjbGFzcyc6IHRoaXMucHJlZml4Q3NzKCdzZWVrYmFyJyksXG4gICAgfSk7XG4gICAgdGhpcy5zZWVrQmFyID0gc2Vla0JhcjtcblxuICAgIC8vIEluZGljYXRvciB0aGF0IHNob3dzIHRoZSBidWZmZXIgZmlsbCBsZXZlbFxuICAgIGxldCBzZWVrQmFyQnVmZmVyTGV2ZWwgPSBuZXcgRE9NKCdkaXYnLCB7XG4gICAgICAnY2xhc3MnOiB0aGlzLnByZWZpeENzcygnc2Vla2Jhci1idWZmZXJsZXZlbCcpLFxuICAgIH0pO1xuICAgIHRoaXMuc2Vla0JhckJ1ZmZlclBvc2l0aW9uID0gc2Vla0JhckJ1ZmZlckxldmVsO1xuXG4gICAgLy8gSW5kaWNhdG9yIHRoYXQgc2hvd3MgdGhlIGN1cnJlbnQgcGxheWJhY2sgcG9zaXRpb25cbiAgICBsZXQgc2Vla0JhclBsYXliYWNrUG9zaXRpb24gPSBuZXcgRE9NKCdkaXYnLCB7XG4gICAgICAnY2xhc3MnOiB0aGlzLnByZWZpeENzcygnc2Vla2Jhci1wbGF5YmFja3Bvc2l0aW9uJyksXG4gICAgfSk7XG4gICAgdGhpcy5zZWVrQmFyUGxheWJhY2tQb3NpdGlvbiA9IHNlZWtCYXJQbGF5YmFja1Bvc2l0aW9uO1xuXG4gICAgLy8gQSBtYXJrZXIgb2YgdGhlIGN1cnJlbnQgcGxheWJhY2sgcG9zaXRpb24sIGUuZy4gYSBkb3Qgb3IgbGluZVxuICAgIGxldCBzZWVrQmFyUGxheWJhY2tQb3NpdGlvbk1hcmtlciA9IG5ldyBET00oJ2RpdicsIHtcbiAgICAgICdjbGFzcyc6IHRoaXMucHJlZml4Q3NzKCdzZWVrYmFyLXBsYXliYWNrcG9zaXRpb24tbWFya2VyJyksXG4gICAgfSk7XG4gICAgdGhpcy5zZWVrQmFyUGxheWJhY2tQb3NpdGlvbk1hcmtlciA9IHNlZWtCYXJQbGF5YmFja1Bvc2l0aW9uTWFya2VyO1xuXG4gICAgLy8gSW5kaWNhdG9yIHRoYXQgc2hvdyB3aGVyZSBhIHNlZWsgd2lsbCBnbyB0b1xuICAgIGxldCBzZWVrQmFyU2Vla1Bvc2l0aW9uID0gbmV3IERPTSgnZGl2Jywge1xuICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ3NlZWtiYXItc2Vla3Bvc2l0aW9uJyksXG4gICAgfSk7XG4gICAgdGhpcy5zZWVrQmFyU2Vla1Bvc2l0aW9uID0gc2Vla0JhclNlZWtQb3NpdGlvbjtcblxuICAgIC8vIEluZGljYXRvciB0aGF0IHNob3dzIHRoZSBmdWxsIHNlZWtiYXJcbiAgICBsZXQgc2Vla0JhckJhY2tkcm9wID0gbmV3IERPTSgnZGl2Jywge1xuICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ3NlZWtiYXItYmFja2Ryb3AnKSxcbiAgICB9KTtcbiAgICB0aGlzLnNlZWtCYXJCYWNrZHJvcCA9IHNlZWtCYXJCYWNrZHJvcDtcblxuICAgIGxldCBzZWVrQmFyQ2hhcHRlck1hcmtlcnNDb250YWluZXIgPSBuZXcgRE9NKCdkaXYnLCB7XG4gICAgICAnY2xhc3MnOiB0aGlzLnByZWZpeENzcygnc2Vla2Jhci1tYXJrZXJzJyksXG4gICAgfSk7XG4gICAgdGhpcy5zZWVrQmFyTWFya2Vyc0NvbnRhaW5lciA9IHNlZWtCYXJDaGFwdGVyTWFya2Vyc0NvbnRhaW5lcjtcblxuICAgIHNlZWtCYXIuYXBwZW5kKHRoaXMuc2Vla0JhckJhY2tkcm9wLCB0aGlzLnNlZWtCYXJCdWZmZXJQb3NpdGlvbiwgdGhpcy5zZWVrQmFyU2Vla1Bvc2l0aW9uLFxuICAgICAgdGhpcy5zZWVrQmFyUGxheWJhY2tQb3NpdGlvbiwgdGhpcy5zZWVrQmFyTWFya2Vyc0NvbnRhaW5lciwgdGhpcy5zZWVrQmFyUGxheWJhY2tQb3NpdGlvbk1hcmtlcik7XG5cbiAgICBsZXQgc2Vla2luZyA9IGZhbHNlO1xuXG4gICAgLy8gRGVmaW5lIGhhbmRsZXIgZnVuY3Rpb25zIHNvIHdlIGNhbiBhdHRhY2gvcmVtb3ZlIHRoZW0gbGF0ZXJcbiAgICBsZXQgbW91c2VUb3VjaE1vdmVIYW5kbGVyID0gKGU6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50KSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAvLyBBdm9pZCBwcm9wYWdhdGlvbiB0byBWUiBoYW5kbGVyXG4gICAgICBpZiAodGhpcy5wbGF5ZXIudnIgIT0gbnVsbCkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuXG4gICAgICBsZXQgdGFyZ2V0UGVyY2VudGFnZSA9IDEwMCAqIHRoaXMuZ2V0T2Zmc2V0KGUpO1xuICAgICAgdGhpcy5zZXRTZWVrUG9zaXRpb24odGFyZ2V0UGVyY2VudGFnZSk7XG4gICAgICB0aGlzLnNldFBsYXliYWNrUG9zaXRpb24odGFyZ2V0UGVyY2VudGFnZSk7XG4gICAgICB0aGlzLm9uU2Vla1ByZXZpZXdFdmVudCh0YXJnZXRQZXJjZW50YWdlLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgbGV0IG1vdXNlVG91Y2hVcEhhbmRsZXIgPSAoZTogTW91c2VFdmVudCB8IFRvdWNoRXZlbnQpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgLy8gUmVtb3ZlIGhhbmRsZXJzLCBzZWVrIG9wZXJhdGlvbiBpcyBmaW5pc2hlZFxuICAgICAgbmV3IERPTShkb2N1bWVudCkub2ZmKCd0b3VjaG1vdmUgbW91c2Vtb3ZlJywgbW91c2VUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICAgIG5ldyBET00oZG9jdW1lbnQpLm9mZigndG91Y2hlbmQgbW91c2V1cCcsIG1vdXNlVG91Y2hVcEhhbmRsZXIpO1xuXG4gICAgICBsZXQgdGFyZ2V0UGVyY2VudGFnZSA9IDEwMCAqIHRoaXMuZ2V0T2Zmc2V0KGUpO1xuICAgICAgbGV0IHNuYXBwZWRDaGFwdGVyID0gdGhpcy50aW1lbGluZU1hcmtlcnNIYW5kbGVyICYmIHRoaXMudGltZWxpbmVNYXJrZXJzSGFuZGxlci5nZXRNYXJrZXJBdFBvc2l0aW9uKHRhcmdldFBlcmNlbnRhZ2UpO1xuXG4gICAgICB0aGlzLnNldFNlZWtpbmcoZmFsc2UpO1xuICAgICAgc2Vla2luZyA9IGZhbHNlO1xuXG4gICAgICAvLyBGaXJlIHNlZWtlZCBldmVudFxuICAgICAgdGhpcy5vblNlZWtlZEV2ZW50KHNuYXBwZWRDaGFwdGVyID8gc25hcHBlZENoYXB0ZXIucG9zaXRpb24gOiB0YXJnZXRQZXJjZW50YWdlKTtcbiAgICB9O1xuXG4gICAgLy8gQSBzZWVrIGFsd2F5cyBzdGFydCB3aXRoIGEgdG91Y2hzdGFydCBvciBtb3VzZWRvd24gZGlyZWN0bHkgb24gdGhlIHNlZWtiYXIuXG4gICAgLy8gVG8gdHJhY2sgYSBtb3VzZSBzZWVrIGFsc28gb3V0c2lkZSB0aGUgc2Vla2JhciAoZm9yIHRvdWNoIGV2ZW50cyB0aGlzIHdvcmtzIGF1dG9tYXRpY2FsbHkpLFxuICAgIC8vIHNvIHRoZSB1c2VyIGRvZXMgbm90IG5lZWQgdG8gdGFrZSBjYXJlIHRoYXQgdGhlIG1vdXNlIGFsd2F5cyBzdGF5cyBvbiB0aGUgc2Vla2Jhciwgd2UgYXR0YWNoIHRoZSBtb3VzZW1vdmVcbiAgICAvLyBhbmQgbW91c2V1cCBoYW5kbGVycyB0byB0aGUgd2hvbGUgZG9jdW1lbnQuIEEgc2VlayBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgdXNlciBsaWZ0cyB0aGUgbW91c2Uga2V5LlxuICAgIC8vIEEgc2VlayBtb3VzZSBnZXN0dXJlIGlzIHRodXMgYmFzaWNhbGx5IGEgY2xpY2sgd2l0aCBhIGxvbmcgdGltZSBmcmFtZSBiZXR3ZWVuIGRvd24gYW5kIHVwIGV2ZW50cy5cbiAgICBzZWVrQmFyLm9uKCd0b3VjaHN0YXJ0IG1vdXNlZG93bicsIChlOiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCkgPT4ge1xuICAgICAgbGV0IGlzVG91Y2hFdmVudCA9IEJyb3dzZXJVdGlscy5pc1RvdWNoU3VwcG9ydGVkICYmIHRoaXMuaXNUb3VjaEV2ZW50KGUpO1xuXG4gICAgICAvLyBQcmV2ZW50IHNlbGVjdGlvbiBvZiBET00gZWxlbWVudHMgKGFsc28gcHJldmVudHMgbW91c2Vkb3duIGlmIGN1cnJlbnQgZXZlbnQgaXMgdG91Y2hzdGFydClcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW9uIHRvIFZSIGhhbmRsZXJcbiAgICAgIGlmICh0aGlzLnBsYXllci52ciAhPSBudWxsKSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0U2Vla2luZyh0cnVlKTsgLy8gU2V0IHNlZWtpbmcgY2xhc3Mgb24gRE9NIGVsZW1lbnRcbiAgICAgIHNlZWtpbmcgPSB0cnVlOyAvLyBTZXQgc2VlayB0cmFja2luZyBmbGFnXG5cbiAgICAgIC8vIEZpcmUgc2Vla2VkIGV2ZW50XG4gICAgICB0aGlzLm9uU2Vla0V2ZW50KCk7XG5cbiAgICAgIC8vIEFkZCBoYW5kbGVyIHRvIHRyYWNrIHRoZSBzZWVrIG9wZXJhdGlvbiBvdmVyIHRoZSB3aG9sZSBkb2N1bWVudFxuICAgICAgbmV3IERPTShkb2N1bWVudCkub24oaXNUb3VjaEV2ZW50ID8gJ3RvdWNobW92ZScgOiAnbW91c2Vtb3ZlJywgbW91c2VUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICAgIG5ldyBET00oZG9jdW1lbnQpLm9uKGlzVG91Y2hFdmVudCA/ICd0b3VjaGVuZCcgOiAnbW91c2V1cCcsIG1vdXNlVG91Y2hVcEhhbmRsZXIpO1xuICAgIH0pO1xuXG4gICAgLy8gRGlzcGxheSBzZWVrIHRhcmdldCBpbmRpY2F0b3Igd2hlbiBtb3VzZSBob3ZlcnMgb3IgZmluZ2VyIHNsaWRlcyBvdmVyIHNlZWtiYXJcbiAgICBzZWVrQmFyLm9uKCd0b3VjaG1vdmUgbW91c2Vtb3ZlJywgKGU6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50KSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmIChzZWVraW5nKSB7XG4gICAgICAgIG1vdXNlVG91Y2hNb3ZlSGFuZGxlcihlKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHBvc2l0aW9uID0gMTAwICogdGhpcy5nZXRPZmZzZXQoZSk7XG4gICAgICB0aGlzLnNldFNlZWtQb3NpdGlvbihwb3NpdGlvbik7XG5cbiAgICAgIHRoaXMub25TZWVrUHJldmlld0V2ZW50KHBvc2l0aW9uLCBmYWxzZSk7XG5cbiAgICAgIGlmICh0aGlzLmhhc0xhYmVsKCkgJiYgdGhpcy5nZXRMYWJlbCgpLmlzSGlkZGVuKCkpIHtcbiAgICAgICAgdGhpcy5nZXRMYWJlbCgpLnNob3coKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEhpZGUgc2VlayB0YXJnZXQgaW5kaWNhdG9yIHdoZW4gbW91c2Ugb3IgZmluZ2VyIGxlYXZlcyBzZWVrYmFyXG4gICAgc2Vla0Jhci5vbigndG91Y2hlbmQgbW91c2VsZWF2ZScsIChlOiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICB0aGlzLnNldFNlZWtQb3NpdGlvbigwKTtcblxuICAgICAgaWYgKHRoaXMuaGFzTGFiZWwoKSkge1xuICAgICAgICB0aGlzLmdldExhYmVsKCkuaGlkZSgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc2Vla0JhckNvbnRhaW5lci5hcHBlbmQoc2Vla0Jhcik7XG5cbiAgICBpZiAodGhpcy5sYWJlbCkge1xuICAgICAgc2Vla0JhckNvbnRhaW5lci5hcHBlbmQodGhpcy5sYWJlbC5nZXREb21FbGVtZW50KCkpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWVrQmFyQ29udGFpbmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGhvcml6b250YWwgb2Zmc2V0IG9mIGEgbW91c2UvdG91Y2ggZXZlbnQgcG9pbnQgZnJvbSB0aGUgbGVmdCBlZGdlIG9mIHRoZSBzZWVrIGJhci5cbiAgICogQHBhcmFtIGV2ZW50UGFnZVggdGhlIHBhZ2VYIGNvb3JkaW5hdGUgb2YgYW4gZXZlbnQgdG8gY2FsY3VsYXRlIHRoZSBvZmZzZXQgZnJvbVxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBhIG51bWJlciBpbiB0aGUgcmFuZ2Ugb2YgWzAsIDFdLCB3aGVyZSAwIGlzIHRoZSBsZWZ0IGVkZ2UgYW5kIDEgaXMgdGhlIHJpZ2h0IGVkZ2VcbiAgICovXG4gIHByaXZhdGUgZ2V0SG9yaXpvbnRhbE9mZnNldChldmVudFBhZ2VYOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGxldCBlbGVtZW50T2Zmc2V0UHggPSB0aGlzLnNlZWtCYXIub2Zmc2V0KCkubGVmdDtcbiAgICBsZXQgd2lkdGhQeCA9IHRoaXMuc2Vla0Jhci53aWR0aCgpO1xuICAgIGxldCBvZmZzZXRQeCA9IGV2ZW50UGFnZVggLSBlbGVtZW50T2Zmc2V0UHg7XG4gICAgbGV0IG9mZnNldCA9IDEgLyB3aWR0aFB4ICogb2Zmc2V0UHg7XG5cbiAgICByZXR1cm4gdGhpcy5zYW5pdGl6ZU9mZnNldChvZmZzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHZlcnRpY2FsIG9mZnNldCBvZiBhIG1vdXNlL3RvdWNoIGV2ZW50IHBvaW50IGZyb20gdGhlIGJvdHRvbSBlZGdlIG9mIHRoZSBzZWVrIGJhci5cbiAgICogQHBhcmFtIGV2ZW50UGFnZVkgdGhlIHBhZ2VYIGNvb3JkaW5hdGUgb2YgYW4gZXZlbnQgdG8gY2FsY3VsYXRlIHRoZSBvZmZzZXQgZnJvbVxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBhIG51bWJlciBpbiB0aGUgcmFuZ2Ugb2YgWzAsIDFdLCB3aGVyZSAwIGlzIHRoZSBib3R0b20gZWRnZSBhbmQgMSBpcyB0aGUgdG9wIGVkZ2VcbiAgICovXG4gIHByaXZhdGUgZ2V0VmVydGljYWxPZmZzZXQoZXZlbnRQYWdlWTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBsZXQgZWxlbWVudE9mZnNldFB4ID0gdGhpcy5zZWVrQmFyLm9mZnNldCgpLnRvcDtcbiAgICBsZXQgd2lkdGhQeCA9IHRoaXMuc2Vla0Jhci5oZWlnaHQoKTtcbiAgICBsZXQgb2Zmc2V0UHggPSBldmVudFBhZ2VZIC0gZWxlbWVudE9mZnNldFB4O1xuICAgIGxldCBvZmZzZXQgPSAxIC8gd2lkdGhQeCAqIG9mZnNldFB4O1xuXG4gICAgcmV0dXJuIDEgLSB0aGlzLnNhbml0aXplT2Zmc2V0KG9mZnNldCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbW91c2Ugb3IgdG91Y2ggZXZlbnQgb2Zmc2V0IGZvciB0aGUgY3VycmVudCBjb25maWd1cmF0aW9uIChob3Jpem9udGFsIG9yIHZlcnRpY2FsKS5cbiAgICogQHBhcmFtIGUgdGhlIGV2ZW50IHRvIGNhbGN1bGF0ZSB0aGUgb2Zmc2V0IGZyb21cbiAgICogQHJldHVybnMge251bWJlcn0gYSBudW1iZXIgaW4gdGhlIHJhbmdlIG9mIFswLCAxXVxuICAgKiBAc2VlICNnZXRIb3Jpem9udGFsT2Zmc2V0XG4gICAqIEBzZWUgI2dldFZlcnRpY2FsT2Zmc2V0XG4gICAqL1xuICBwcml2YXRlIGdldE9mZnNldChlOiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCk6IG51bWJlciB7XG4gICAgaWYgKEJyb3dzZXJVdGlscy5pc1RvdWNoU3VwcG9ydGVkICYmIHRoaXMuaXNUb3VjaEV2ZW50KGUpKSB7XG4gICAgICBpZiAodGhpcy5jb25maWcudmVydGljYWwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmVydGljYWxPZmZzZXQoZS50eXBlID09PSAndG91Y2hlbmQnID8gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSA6IGUudG91Y2hlc1swXS5wYWdlWSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRIb3Jpem9udGFsT2Zmc2V0KGUudHlwZSA9PT0gJ3RvdWNoZW5kJyA/IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggOiBlLnRvdWNoZXNbMF0ucGFnZVgpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChlIGluc3RhbmNlb2YgTW91c2VFdmVudCkge1xuICAgICAgaWYgKHRoaXMuY29uZmlnLnZlcnRpY2FsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFZlcnRpY2FsT2Zmc2V0KGUucGFnZVkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SG9yaXpvbnRhbE9mZnNldChlLnBhZ2VYKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpZiAoY29uc29sZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ2ludmFsaWQgZXZlbnQnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTYW5pdGl6ZXMgdGhlIG1vdXNlIG9mZnNldCB0byB0aGUgcmFuZ2Ugb2YgWzAsIDFdLlxuICAgKlxuICAgKiBXaGVuIHRyYWNraW5nIHRoZSBtb3VzZSBvdXRzaWRlIHRoZSBzZWVrIGJhciwgdGhlIG9mZnNldCBjYW4gYmUgb3V0c2lkZSB0aGUgZGVzaXJlZCByYW5nZSBhbmQgdGhpcyBtZXRob2RcbiAgICogbGltaXRzIGl0IHRvIHRoZSBkZXNpcmVkIHJhbmdlLiBFLmcuIGEgbW91c2UgZXZlbnQgbGVmdCBvZiB0aGUgbGVmdCBlZGdlIG9mIGEgc2VlayBiYXIgeWllbGRzIGFuIG9mZnNldCBiZWxvd1xuICAgKiB6ZXJvLCBidXQgdG8gZGlzcGxheSB0aGUgc2VlayB0YXJnZXQgb24gdGhlIHNlZWsgYmFyLCB3ZSBuZWVkIHRvIGxpbWl0IGl0IHRvIHplcm8uXG4gICAqXG4gICAqIEBwYXJhbSBvZmZzZXQgdGhlIG9mZnNldCB0byBzYW5pdGl6ZVxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSB0aGUgc2FuaXRpemVkIG9mZnNldC5cbiAgICovXG4gIHByaXZhdGUgc2FuaXRpemVPZmZzZXQob2Zmc2V0OiBudW1iZXIpIHtcbiAgICAvLyBTaW5jZSB3ZSB0cmFjayBtb3VzZSBtb3ZlcyBvdmVyIHRoZSB3aG9sZSBkb2N1bWVudCwgdGhlIHRhcmdldCBjYW4gYmUgb3V0c2lkZSB0aGUgc2VlayByYW5nZSxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byBsaW1pdCBpdCB0byB0aGUgWzAsIDFdIHJhbmdlLlxuICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICBvZmZzZXQgPSAwO1xuICAgIH0gZWxzZSBpZiAob2Zmc2V0ID4gMSkge1xuICAgICAgb2Zmc2V0ID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBvc2l0aW9uIG9mIHRoZSBwbGF5YmFjayBwb3NpdGlvbiBpbmRpY2F0b3IuXG4gICAqIEBwYXJhbSBwZXJjZW50IGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMTAwIGFzIHJldHVybmVkIGJ5IHRoZSBwbGF5ZXJcbiAgICovXG4gIHNldFBsYXliYWNrUG9zaXRpb24ocGVyY2VudDogbnVtYmVyKSB7XG4gICAgdGhpcy5wbGF5YmFja1Bvc2l0aW9uUGVyY2VudGFnZSA9IHBlcmNlbnQ7XG5cbiAgICAvLyBTZXQgcG9zaXRpb24gb2YgdGhlIGJhclxuICAgIHRoaXMuc2V0UG9zaXRpb24odGhpcy5zZWVrQmFyUGxheWJhY2tQb3NpdGlvbiwgcGVyY2VudCk7XG5cbiAgICAvLyBTZXQgcG9zaXRpb24gb2YgdGhlIG1hcmtlclxuICAgIGxldCB0b3RhbFNpemUgPSAodGhpcy5jb25maWcudmVydGljYWwgPyAodGhpcy5zZWVrQmFyLmhlaWdodCgpIC0gdGhpcy5zZWVrQmFyUGxheWJhY2tQb3NpdGlvbk1hcmtlci5oZWlnaHQoKSkgOiB0aGlzLnNlZWtCYXIud2lkdGgoKSk7XG4gICAgbGV0IHB4ID0gKHRvdGFsU2l6ZSkgLyAxMDAgKiBwZXJjZW50O1xuICAgIGlmICh0aGlzLmNvbmZpZy52ZXJ0aWNhbCkge1xuICAgICAgcHggPSB0aGlzLnNlZWtCYXIuaGVpZ2h0KCkgLSBweCAtIHRoaXMuc2Vla0JhclBsYXliYWNrUG9zaXRpb25NYXJrZXIuaGVpZ2h0KCk7XG4gICAgfVxuXG4gICAgbGV0IHN0eWxlID0gdGhpcy5jb25maWcudmVydGljYWwgP1xuICAgICAgLy8gLW1zLXRyYW5zZm9ybSByZXF1aXJlZCBmb3IgSUU5XG4gICAgICAvLyAtd2Via2l0LXRyYW5zZm9ybSByZXF1aXJlZCBmb3IgQW5kcm9pZCA0LjQgV2ViVmlld1xuICAgICAge1xuICAgICAgICAndHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVkoJyArIHB4ICsgJ3B4KScsXG4gICAgICAgICctbXMtdHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVkoJyArIHB4ICsgJ3B4KScsXG4gICAgICAgICctd2Via2l0LXRyYW5zZm9ybSc6ICd0cmFuc2xhdGVZKCcgKyBweCArICdweCknLFxuICAgICAgfSA6XG4gICAgICB7XG4gICAgICAgICd0cmFuc2Zvcm0nOiAndHJhbnNsYXRlWCgnICsgcHggKyAncHgpJyxcbiAgICAgICAgJy1tcy10cmFuc2Zvcm0nOiAndHJhbnNsYXRlWCgnICsgcHggKyAncHgpJyxcbiAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVgoJyArIHB4ICsgJ3B4KScsXG4gICAgICB9O1xuICAgIHRoaXMuc2Vla0JhclBsYXliYWNrUG9zaXRpb25NYXJrZXIuY3NzKHN0eWxlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWZyZXNoZXMgdGhlIHBsYXliYWNrIHBvc2l0aW9uLiBDYW4gYmUgdXNlZCBieSBzdWJjbGFzc2VzIHRvIHJlZnJlc2ggdGhlIHBvc2l0aW9uIHdoZW5cbiAgICogdGhlIHNpemUgb2YgdGhlIGNvbXBvbmVudCBjaGFuZ2VzLlxuICAgKi9cbiAgcHJvdGVjdGVkIHJlZnJlc2hQbGF5YmFja1Bvc2l0aW9uKCkge1xuICAgIHRoaXMuc2V0UGxheWJhY2tQb3NpdGlvbih0aGlzLnBsYXliYWNrUG9zaXRpb25QZXJjZW50YWdlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwb3NpdGlvbiB1bnRpbCB3aGljaCBtZWRpYSBpcyBidWZmZXJlZC5cbiAgICogQHBhcmFtIHBlcmNlbnQgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxMDBcbiAgICovXG4gIHNldEJ1ZmZlclBvc2l0aW9uKHBlcmNlbnQ6IG51bWJlcikge1xuICAgIHRoaXMuc2V0UG9zaXRpb24odGhpcy5zZWVrQmFyQnVmZmVyUG9zaXRpb24sIHBlcmNlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBvc2l0aW9uIHdoZXJlIGEgc2VlaywgaWYgZXhlY3V0ZWQsIHdvdWxkIGp1bXAgdG8uXG4gICAqIEBwYXJhbSBwZXJjZW50IGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMTAwXG4gICAqL1xuICBzZXRTZWVrUG9zaXRpb24ocGVyY2VudDogbnVtYmVyKSB7XG4gICAgdGhpcy5zZXRQb3NpdGlvbih0aGlzLnNlZWtCYXJTZWVrUG9zaXRpb24sIHBlcmNlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgYWN0dWFsIHBvc2l0aW9uICh3aWR0aCBvciBoZWlnaHQpIG9mIGEgRE9NIGVsZW1lbnQgdGhhdCByZXByZXNlbnQgYSBiYXIgaW4gdGhlIHNlZWsgYmFyLlxuICAgKiBAcGFyYW0gZWxlbWVudCB0aGUgZWxlbWVudCB0byBzZXQgdGhlIHBvc2l0aW9uIGZvclxuICAgKiBAcGFyYW0gcGVyY2VudCBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEwMFxuICAgKi9cbiAgcHJpdmF0ZSBzZXRQb3NpdGlvbihlbGVtZW50OiBET00sIHBlcmNlbnQ6IG51bWJlcikge1xuICAgIGxldCBzY2FsZSA9IHBlcmNlbnQgLyAxMDA7XG5cbiAgICAvLyBXaGVuIHRoZSBzY2FsZSBpcyBleGFjdGx5IDEgb3IgdmVyeSBuZWFyIDEgKGFuZCB0aGUgYnJvd3NlciBpbnRlcm5hbGx5IHJvdW5kcyBpdCB0byAxKSwgYnJvd3NlcnMgc2VlbSB0byByZW5kZXJcbiAgICAvLyB0aGUgZWxlbWVudHMgZGlmZmVyZW50bHkgYW5kIHRoZSBoZWlnaHQgZ2V0cyBzbGlnaHRseSBvZmYsIGxlYWRpbmcgdG8gbWlzbWF0Y2hpbmcgaGVpZ2h0cyB3aGVuIGUuZy4gdGhlIGJ1ZmZlclxuICAgIC8vIGxldmVsIGJhciBoYXMgYSB3aWR0aCBvZiAxIGFuZCB0aGUgcGxheWJhY2sgcG9zaXRpb24gYmFyIGhhcyBhIHdpZHRoIDwgMS4gQSBqaXR0ZXJpbmcgYnVmZmVyIGxldmVsIGFyb3VuZCAxXG4gICAgLy8gbGVhZHMgdG8gYW4gZXZlbiB3b3JzZSBmbGlja2VyaW5nIGVmZmVjdC5cbiAgICAvLyBWYXJpb3VzIGNoYW5nZXMgaW4gQ1NTIHN0eWxpbmcgYW5kIERPTSBoaWVyYXJjaHkgZGlkIG5vdCBzb2x2ZSB0aGUgaXNzdWUgc28gdGhlIHdvcmthcm91bmQgaXMgdG8gYXZvaWQgYSBzY2FsZVxuICAgIC8vIG9mIGV4YWN0bHkgMS5cbiAgICBpZiAoc2NhbGUgPj0gMC45OTk5OSAmJiBzY2FsZSA8PSAxLjAwMDAxKSB7XG4gICAgICBzY2FsZSA9IDAuOTk5OTk7XG4gICAgfVxuXG4gICAgbGV0IHN0eWxlID0gdGhpcy5jb25maWcudmVydGljYWwgP1xuICAgICAgLy8gLW1zLXRyYW5zZm9ybSByZXF1aXJlZCBmb3IgSUU5XG4gICAgICAvLyAtd2Via2l0LXRyYW5zZm9ybSByZXF1aXJlZCBmb3IgQW5kcm9pZCA0LjQgV2ViVmlld1xuICAgICAge1xuICAgICAgICAndHJhbnNmb3JtJzogJ3NjYWxlWSgnICsgc2NhbGUgKyAnKScsXG4gICAgICAgICctbXMtdHJhbnNmb3JtJzogJ3NjYWxlWSgnICsgc2NhbGUgKyAnKScsXG4gICAgICAgICctd2Via2l0LXRyYW5zZm9ybSc6ICdzY2FsZVkoJyArIHNjYWxlICsgJyknLFxuICAgICAgfSA6XG4gICAgICB7XG4gICAgICAgICd0cmFuc2Zvcm0nOiAnc2NhbGVYKCcgKyBzY2FsZSArICcpJyxcbiAgICAgICAgJy1tcy10cmFuc2Zvcm0nOiAnc2NhbGVYKCcgKyBzY2FsZSArICcpJyxcbiAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3NjYWxlWCgnICsgc2NhbGUgKyAnKScsXG4gICAgICB9O1xuICAgIGVsZW1lbnQuY3NzKHN0eWxlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdXRzIHRoZSBzZWVrIGJhciBpbnRvIG9yIG91dCBvZiBzZWVraW5nIHN0YXRlIGJ5IGFkZGluZy9yZW1vdmluZyBhIGNsYXNzIHRvIHRoZSBET00gZWxlbWVudC4gVGhpcyBjYW4gYmUgdXNlZFxuICAgKiB0byBhZGp1c3QgdGhlIHN0eWxpbmcgd2hpbGUgc2Vla2luZy5cbiAgICpcbiAgICogQHBhcmFtIHNlZWtpbmcgc2hvdWxkIGJlIHRydWUgd2hlbiBlbnRlcmluZyBzZWVrIHN0YXRlLCBmYWxzZSB3aGVuIGV4aXRpbmcgdGhlIHNlZWsgc3RhdGVcbiAgICovXG4gIHNldFNlZWtpbmcoc2Vla2luZzogYm9vbGVhbikge1xuICAgIGlmIChzZWVraW5nKSB7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hZGRDbGFzcyh0aGlzLnByZWZpeENzcyhTZWVrQmFyLkNMQVNTX1NFRUtJTkcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoU2Vla0Jhci5DTEFTU19TRUVLSU5HKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgc2VlayBiYXIgaXMgY3VycmVudGx5IGluIHRoZSBzZWVrIHN0YXRlLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBpbiBzZWVrIHN0YXRlLCBlbHNlIGZhbHNlXG4gICAqL1xuICBpc1NlZWtpbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmhhc0NsYXNzKHRoaXMucHJlZml4Q3NzKFNlZWtCYXIuQ0xBU1NfU0VFS0lORykpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgc2VlayBiYXIgaGFzIGEge0BsaW5rIFNlZWtCYXJMYWJlbH0uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBzZWVrIGJhciBoYXMgYSBsYWJlbCwgZWxzZSBmYWxzZVxuICAgKi9cbiAgaGFzTGFiZWwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubGFiZWwgIT0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBsYWJlbCBvZiB0aGlzIHNlZWsgYmFyLlxuICAgKiBAcmV0dXJucyB7U2Vla0JhckxhYmVsfSB0aGUgbGFiZWwgaWYgdGhpcyBzZWVrIGJhciBoYXMgYSBsYWJlbCwgZWxzZSBudWxsXG4gICAqL1xuICBnZXRMYWJlbCgpOiBTZWVrQmFyTGFiZWwgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5sYWJlbDtcbiAgfVxuXG4gIHByb3RlY3RlZCBvblNlZWtFdmVudCgpIHtcbiAgICB0aGlzLnNlZWtCYXJFdmVudHMub25TZWVrLmRpc3BhdGNoKHRoaXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uU2Vla1ByZXZpZXdFdmVudChwZXJjZW50YWdlOiBudW1iZXIsIHNjcnViYmluZzogYm9vbGVhbikge1xuICAgIGxldCBzbmFwcGVkTWFya2VyID0gdGhpcy50aW1lbGluZU1hcmtlcnNIYW5kbGVyICYmIHRoaXMudGltZWxpbmVNYXJrZXJzSGFuZGxlci5nZXRNYXJrZXJBdFBvc2l0aW9uKHBlcmNlbnRhZ2UpO1xuXG4gICAgbGV0IHNlZWtQb3NpdGlvblBlcmNlbnRhZ2UgPSBwZXJjZW50YWdlO1xuXG4gICAgaWYgKHNuYXBwZWRNYXJrZXIpIHtcbiAgICAgIGlmIChzbmFwcGVkTWFya2VyLmR1cmF0aW9uID4gMCkge1xuICAgICAgICBpZiAocGVyY2VudGFnZSA8IHNuYXBwZWRNYXJrZXIucG9zaXRpb24pIHtcbiAgICAgICAgICAvLyBTbmFwIHRoZSBwb3NpdGlvbiB0byB0aGUgc3RhcnQgb2YgdGhlIGludGVydmFsIGlmIHRoZSBzZWVrIGlzIHdpdGhpbiB0aGUgbGVmdCBzbmFwIG1hcmdpblxuICAgICAgICAgIC8vIFdlIGtub3cgdGhhdCB3ZSBhcmUgd2l0aGluIGEgc25hcCBtYXJnaW4gd2hlbiB3ZSBhcmUgb3V0c2lkZSB0aGUgbWFya2VyIGludGVydmFsIGJ1dCBzdGlsbFxuICAgICAgICAgIC8vIGhhdmUgYSBzbmFwcGVkTWFya2VyXG4gICAgICAgICAgc2Vla1Bvc2l0aW9uUGVyY2VudGFnZSA9IHNuYXBwZWRNYXJrZXIucG9zaXRpb247XG4gICAgICAgIH0gZWxzZSBpZiAocGVyY2VudGFnZSA+IHNuYXBwZWRNYXJrZXIucG9zaXRpb24gKyBzbmFwcGVkTWFya2VyLmR1cmF0aW9uKSB7XG4gICAgICAgICAgLy8gU25hcCB0aGUgcG9zaXRpb24gdG8gdGhlIGVuZCBvZiB0aGUgaW50ZXJ2YWwgaWYgdGhlIHNlZWsgaXMgd2l0aGluIHRoZSByaWdodCBzbmFwIG1hcmdpblxuICAgICAgICAgIHNlZWtQb3NpdGlvblBlcmNlbnRhZ2UgPSBzbmFwcGVkTWFya2VyLnBvc2l0aW9uICsgc25hcHBlZE1hcmtlci5kdXJhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUG9zaXRpb24gbWFya2VycyBhbHdheXMgc25hcCB0byB0aGVpciBtYXJrZXIgcG9zaXRpb25cbiAgICAgICAgc2Vla1Bvc2l0aW9uUGVyY2VudGFnZSA9IHNuYXBwZWRNYXJrZXIucG9zaXRpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGFiZWwpIHtcbiAgICAgIHRoaXMubGFiZWwuZ2V0RG9tRWxlbWVudCgpLmNzcyh7XG4gICAgICAgICdsZWZ0Jzogc2Vla1Bvc2l0aW9uUGVyY2VudGFnZSArICclJyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuc2Vla0JhckV2ZW50cy5vblNlZWtQcmV2aWV3LmRpc3BhdGNoKHRoaXMsIHtcbiAgICAgIHNjcnViYmluZzogc2NydWJiaW5nLFxuICAgICAgcG9zaXRpb246IHNlZWtQb3NpdGlvblBlcmNlbnRhZ2UsXG4gICAgICBtYXJrZXI6IHNuYXBwZWRNYXJrZXIsXG4gICAgfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25TZWVrZWRFdmVudChwZXJjZW50YWdlOiBudW1iZXIpIHtcbiAgICB0aGlzLnNlZWtCYXJFdmVudHMub25TZWVrZWQuZGlzcGF0Y2godGhpcywgcGVyY2VudGFnZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgZXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIGEgc2NydWJiaW5nIHNlZWsgb3BlcmF0aW9uIGlzIHN0YXJ0ZWQuXG4gICAqIEByZXR1cm5zIHtFdmVudDxTZWVrQmFyLCBOb0FyZ3M+fVxuICAgKi9cbiAgZ2V0IG9uU2VlaygpOiBFdmVudDxTZWVrQmFyLCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5zZWVrQmFyRXZlbnRzLm9uU2Vlay5nZXRFdmVudCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgZHVyaW5nIGEgc2NydWJiaW5nIHNlZWsgKHRvIGluZGljYXRlIHRoYXQgdGhlIHNlZWsgcHJldmlldywgaS5lLiB0aGUgdmlkZW8gZnJhbWUsXG4gICAqIHNob3VsZCBiZSB1cGRhdGVkKSwgb3IgZHVyaW5nIGEgbm9ybWFsIHNlZWsgcHJldmlldyB3aGVuIHRoZSBzZWVrIGJhciBpcyBob3ZlcmVkIChhbmQgdGhlIHNlZWsgdGFyZ2V0LFxuICAgKiBpLmUuIHRoZSBzZWVrIGJhciBsYWJlbCwgc2hvdWxkIGJlIHVwZGF0ZWQpLlxuICAgKiBAcmV0dXJucyB7RXZlbnQ8U2Vla0JhciwgU2Vla1ByZXZpZXdFdmVudEFyZ3M+fVxuICAgKi9cbiAgZ2V0IG9uU2Vla1ByZXZpZXcoKTogRXZlbnQ8U2Vla0JhciwgU2Vla1ByZXZpZXdFdmVudEFyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5zZWVrQmFyRXZlbnRzLm9uU2Vla1ByZXZpZXcuZ2V0RXZlbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gYSBzY3J1YmJpbmcgc2VlayBoYXMgZmluaXNoZWQgb3Igd2hlbiBhIGRpcmVjdCBzZWVrIGlzIGlzc3VlZC5cbiAgICogQHJldHVybnMge0V2ZW50PFNlZWtCYXIsIG51bWJlcj59XG4gICAqL1xuICBnZXQgb25TZWVrZWQoKTogRXZlbnQ8U2Vla0JhciwgbnVtYmVyPiB7XG4gICAgcmV0dXJuIHRoaXMuc2Vla0JhckV2ZW50cy5vblNlZWtlZC5nZXRFdmVudCgpO1xuICB9XG5cblxuICBwcm90ZWN0ZWQgb25TaG93RXZlbnQoKTogdm9pZCB7XG4gICAgc3VwZXIub25TaG93RXZlbnQoKTtcblxuICAgIC8vIFJlZnJlc2ggdGhlIHBvc2l0aW9uIG9mIHRoZSBwbGF5YmFjayBwb3NpdGlvbiB3aGVuIHRoZSBzZWVrIGJhciBiZWNvbWVzIHZpc2libGUuIFRvIGNvcnJlY3RseSBzZXQgdGhlIHBvc2l0aW9uLFxuICAgIC8vIHRoZSBET00gZWxlbWVudCBtdXN0IGJlIGZ1bGx5IGluaXRpYWxpemVkIGFuIGhhdmUgaXRzIHNpemUgY2FsY3VsYXRlZCwgYmVjYXVzZSB0aGUgcG9zaXRpb24gaXMgc2V0IGFzIGFuIGFic29sdXRlXG4gICAgLy8gdmFsdWUgY2FsY3VsYXRlZCBmcm9tIHRoZSBzaXplLiBUaGlzIHJlcXVpcmVkIHNpemUgaXMgbm90IGtub3duIHdoZW4gaXQgaXMgaGlkZGVuLlxuICAgIC8vIEZvciBzdWNoIGNhc2VzLCB3ZSByZWZyZXNoIHRoZSBwb3NpdGlvbiBoZXJlIGluIG9uU2hvdyBiZWNhdXNlIGhlcmUgaXQgaXMgZ3VhcmFudGVlZCB0aGF0IHRoZSBjb21wb25lbnQga25vd3NcbiAgICAvLyBpdHMgc2l6ZSBhbmQgY2FuIHNldCB0aGUgcG9zaXRpb24gY29ycmVjdGx5LlxuICAgIHRoaXMucmVmcmVzaFBsYXliYWNrUG9zaXRpb24oKTtcbiAgfVxuXG4gLyoqXG4gICAqIENoZWNrcyBpZiBUb3VjaEV2ZW50IGlzIHN1cHBvcnRlZC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgVG91Y2hFdmVudCBub3QgdW5kZWZpbmVkLCBlbHNlIGZhbHNlXG4gICAqL1xuICBpc1RvdWNoRXZlbnQoZTogVUlFdmVudCk6IGUgaXMgVG91Y2hFdmVudCB7XG4gICAgcmV0dXJuIHdpbmRvdy5Ub3VjaEV2ZW50ICYmIGUgaW5zdGFuY2VvZiBUb3VjaEV2ZW50O1xuICB9XG59XG4iLCJpbXBvcnQge1BsYXllckFQSX0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1pbkJ1ZmZlckxldmVsKHBsYXllcjogUGxheWVyQVBJKTogbnVtYmVyIHtcblxuICAgIGNvbnN0IHBsYXllckR1cmF0aW9uID0gcGxheWVyLmdldER1cmF0aW9uKCk7XG5cbiAgICBjb25zdCB2aWRlb0J1ZmZlckxlbmd0aCA9IHBsYXllci5nZXRWaWRlb0J1ZmZlckxlbmd0aCgpO1xuICAgIGNvbnN0IGF1ZGlvQnVmZmVyTGVuZ3RoID0gcGxheWVyLmdldEF1ZGlvQnVmZmVyTGVuZ3RoKCk7XG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBidWZmZXIgbGVuZ3RoIHdoaWNoIGlzIHRoZSBzbWFsbGVyIGxlbmd0aCBvZiB0aGUgYXVkaW8gYW5kIHZpZGVvIGJ1ZmZlcnMuIElmIG9uZSBvZiB0aGVzZVxuICAgIC8vIGJ1ZmZlcnMgaXMgbm90IGF2YWlsYWJsZSwgd2Ugc2V0IGl0J3MgdmFsdWUgdG8gTUFYX1ZBTFVFIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBvdGhlciByZWFsIHZhbHVlIGlzIHRha2VuXG4gICAgLy8gYXMgdGhlIGJ1ZmZlciBsZW5ndGguXG4gICAgbGV0IGJ1ZmZlckxlbmd0aCA9IE1hdGgubWluKFxuICAgICAgICB2aWRlb0J1ZmZlckxlbmd0aCAhPSBudWxsID8gdmlkZW9CdWZmZXJMZW5ndGggOiBOdW1iZXIuTUFYX1ZBTFVFLFxuICAgICAgICBhdWRpb0J1ZmZlckxlbmd0aCAhPSBudWxsID8gYXVkaW9CdWZmZXJMZW5ndGggOiBOdW1iZXIuTUFYX1ZBTFVFKTtcbiAgICAvLyBJZiBib3RoIGJ1ZmZlciBsZW5ndGhzIGFyZSBtaXNzaW5nLCB3ZSBzZXQgdGhlIGJ1ZmZlciBsZW5ndGggdG8gemVyb1xuICAgIGlmIChidWZmZXJMZW5ndGggPT09IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgYnVmZmVyTGVuZ3RoID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gMTAwIC8gcGxheWVyRHVyYXRpb24gKiBidWZmZXJMZW5ndGg7XG59XG4iLCJpbXBvcnQgeyBVSVV0aWxzIH0gZnJvbSAnLi4vdWl1dGlscyc7XG5pbXBvcnQgeyBET00gfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IFZvbHVtZUNvbnRyb2xsZXIgfSBmcm9tICcuLi92b2x1bWVjb250cm9sbGVyJztcblxuZXhwb3J0IGVudW0gU2Vla0JhclR5cGUge1xuICBWb2QsXG4gIExpdmUsXG4gIFZvbHVtZSxcbn1cblxuaW50ZXJmYWNlIFJhbmdlIHtcbiAgbWluOiBudW1iZXI7XG4gIG1heDogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgS2V5U3RlcEluY3JlbWVudHNDb25maWcge1xuICBsZWZ0UmlnaHQ6IG51bWJlcjtcbiAgdXBEb3duOiBudW1iZXI7XG59XG5cbmNvbnN0IGNvZXJjZVZhbHVlSW50b1JhbmdlID0gKFxuICB2YWx1ZTogbnVtYmVyLFxuICByYW5nZTogUmFuZ2UsXG4gIGNiOiAodmFsdWU6IG51bWJlcikgPT4gdm9pZCxcbikgPT4ge1xuICBpZiAodmFsdWUgPCByYW5nZS5taW4pIHtcbiAgICBjYihyYW5nZS5taW4pO1xuICB9IGVsc2UgaWYgKHZhbHVlID4gcmFuZ2UubWF4KSB7XG4gICAgY2IocmFuZ2UubWF4KTtcbiAgfSBlbHNlIHtcbiAgICBjYih2YWx1ZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjbGFzcyBTZWVrQmFyQ29udHJvbGxlciB7XG4gIHByb3RlY3RlZCBrZXlTdGVwSW5jcmVtZW50czogS2V5U3RlcEluY3JlbWVudHNDb25maWc7XG4gIHByb3RlY3RlZCBwbGF5ZXI6IFBsYXllckFQSTtcbiAgcHJvdGVjdGVkIHZvbHVtZUNvbnRyb2xsZXI6IFZvbHVtZUNvbnRyb2xsZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAga2V5U3RlcEluY3JlbWVudHM6IEtleVN0ZXBJbmNyZW1lbnRzQ29uZmlnLFxuICAgIHBsYXllcjogUGxheWVyQVBJLFxuICAgIHZvbHVtZUNvbnRyb2xsZXI6IFZvbHVtZUNvbnRyb2xsZXIsXG4gICkge1xuICAgIHRoaXMua2V5U3RlcEluY3JlbWVudHMgPSBrZXlTdGVwSW5jcmVtZW50cztcbiAgICB0aGlzLnBsYXllciA9IHBsYXllcjtcbiAgICB0aGlzLnZvbHVtZUNvbnRyb2xsZXIgPSB2b2x1bWVDb250cm9sbGVyO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFycm93S2V5Q29udHJvbHMoXG4gICAgY3VycmVudFZhbHVlOiBudW1iZXIsXG4gICAgcmFuZ2U6IFJhbmdlLFxuICAgIHZhbHVlVXBkYXRlOiAodmFsdWU6IG51bWJlcikgPT4gdm9pZCxcbiAgKSB7XG4gICAgY29uc3QgY29udHJvbFZhbHVlID0gTWF0aC5mbG9vcihjdXJyZW50VmFsdWUpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6ICgpID0+IGNvZXJjZVZhbHVlSW50b1JhbmdlKGNvbnRyb2xWYWx1ZSAtIHRoaXMua2V5U3RlcEluY3JlbWVudHMubGVmdFJpZ2h0LCByYW5nZSwgdmFsdWVVcGRhdGUpLFxuICAgICAgcmlnaHQ6ICgpID0+IGNvZXJjZVZhbHVlSW50b1JhbmdlKGNvbnRyb2xWYWx1ZSArIHRoaXMua2V5U3RlcEluY3JlbWVudHMubGVmdFJpZ2h0LCByYW5nZSwgdmFsdWVVcGRhdGUpLFxuICAgICAgdXA6ICgpID0+IGNvZXJjZVZhbHVlSW50b1JhbmdlKGNvbnRyb2xWYWx1ZSArIHRoaXMua2V5U3RlcEluY3JlbWVudHMudXBEb3duLCByYW5nZSwgdmFsdWVVcGRhdGUpLFxuICAgICAgZG93bjogKCkgPT4gY29lcmNlVmFsdWVJbnRvUmFuZ2UoY29udHJvbFZhbHVlIC0gdGhpcy5rZXlTdGVwSW5jcmVtZW50cy51cERvd24sIHJhbmdlLCB2YWx1ZVVwZGF0ZSksXG4gICAgICBob21lOiAoKSA9PiBjb2VyY2VWYWx1ZUludG9SYW5nZShyYW5nZS5taW4sIHJhbmdlLCB2YWx1ZVVwZGF0ZSksXG4gICAgICBlbmQ6ICgpID0+IGNvZXJjZVZhbHVlSW50b1JhbmdlKHJhbmdlLm1heCwgcmFuZ2UsIHZhbHVlVXBkYXRlKSxcbiAgICB9O1xuICB9XG5cbiAgcHJvdGVjdGVkIHNlZWtCYXJDb250cm9scyh0eXBlOiBTZWVrQmFyVHlwZSkge1xuICAgIGlmICh0eXBlID09PSBTZWVrQmFyVHlwZS5MaXZlKSB7XG4gICAgICByZXR1cm4gdGhpcy5hcnJvd0tleUNvbnRyb2xzKHRoaXMucGxheWVyLmdldFRpbWVTaGlmdCgpLCB7IG1pbjogdGhpcy5wbGF5ZXIuZ2V0TWF4VGltZVNoaWZ0KCksIG1heDogMCB9LCB0aGlzLnBsYXllci50aW1lU2hpZnQpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gU2Vla0JhclR5cGUuVm9kKSB7XG4gICAgICByZXR1cm4gdGhpcy5hcnJvd0tleUNvbnRyb2xzKHRoaXMucGxheWVyLmdldEN1cnJlbnRUaW1lKCksIHsgbWluOiAwLCBtYXg6IHRoaXMucGxheWVyLmdldER1cmF0aW9uKCkgfSwgdGhpcy5wbGF5ZXIuc2Vlayk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBTZWVrQmFyVHlwZS5Wb2x1bWUgJiYgdGhpcy52b2x1bWVDb250cm9sbGVyICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IHZvbHVtZVRyYW5zaXRpb24gPSB0aGlzLnZvbHVtZUNvbnRyb2xsZXIuc3RhcnRUcmFuc2l0aW9uKCk7XG4gICAgICByZXR1cm4gdGhpcy5hcnJvd0tleUNvbnRyb2xzKHRoaXMucGxheWVyLmdldFZvbHVtZSgpLCB7IG1pbjogMCwgbWF4OiAxMDAgfSwgdm9sdW1lVHJhbnNpdGlvbi5maW5pc2guYmluZCh2b2x1bWVUcmFuc2l0aW9uKSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHNldFNlZWtCYXJDb250cm9scyhkb21FbGVtZW50OiBET00sIHR5cGU6ICgpID0+IFNlZWtCYXJUeXBlKSB7XG4gICAgZG9tRWxlbWVudC5vbigna2V5ZG93bicsIChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBjb250cm9scyA9IHRoaXMuc2Vla0JhckNvbnRyb2xzKHR5cGUoKSk7XG4gICAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgICAgICBjYXNlIFVJVXRpbHMuS2V5Q29kZS5MZWZ0QXJyb3c6IHtcbiAgICAgICAgICBjb250cm9scy5sZWZ0KCk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgVUlVdGlscy5LZXlDb2RlLlJpZ2h0QXJyb3c6IHtcbiAgICAgICAgICBjb250cm9scy5yaWdodCgpO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFVJVXRpbHMuS2V5Q29kZS5VcEFycm93OiB7XG4gICAgICAgICAgY29udHJvbHMudXAoKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBVSVV0aWxzLktleUNvZGUuRG93bkFycm93OiB7XG4gICAgICAgICAgY29udHJvbHMuZG93bigpO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFVJVXRpbHMuS2V5Q29kZS5Ib21lOiB7XG4gICAgICAgICAgY29udHJvbHMuaG9tZSgpO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFVJVXRpbHMuS2V5Q29kZS5FbmQ6IHtcbiAgICAgICAgICBjb250cm9scy5lbmQoKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBVSVV0aWxzLktleUNvZGUuU3BhY2U6IHtcbiAgICAgICAgICB0aGlzLnBsYXllci5pc1BsYXlpbmcoKSA/IHRoaXMucGxheWVyLnBhdXNlKCkgOiB0aGlzLnBsYXllci5wbGF5KCk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0iLCJpbXBvcnQge0NvbnRhaW5lciwgQ29udGFpbmVyQ29uZmlnfSBmcm9tICcuL2NvbnRhaW5lcic7XG5pbXBvcnQge0xhYmVsLCBMYWJlbENvbmZpZ30gZnJvbSAnLi9sYWJlbCc7XG5pbXBvcnQge0NvbXBvbmVudCwgQ29tcG9uZW50Q29uZmlnfSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBVSUluc3RhbmNlTWFuYWdlciB9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge1N0cmluZ1V0aWxzfSBmcm9tICcuLi9zdHJpbmd1dGlscyc7XG5pbXBvcnQge0ltYWdlTG9hZGVyfSBmcm9tICcuLi9pbWFnZWxvYWRlcic7XG5pbXBvcnQge0Nzc1Byb3BlcnRpZXN9IGZyb20gJy4uL2RvbSc7XG5pbXBvcnQgeyBQbGF5ZXJBUEksIFRodW1ibmFpbCB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBTZWVrQmFyLCBTZWVrUHJldmlld0V2ZW50QXJncyB9IGZyb20gJy4vc2Vla2Jhcic7XG5pbXBvcnQgeyBQbGF5ZXJVdGlscyB9IGZyb20gJy4uL3BsYXllcnV0aWxzJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgYSB7QGxpbmsgU2Vla0JhckxhYmVsfS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZWVrQmFyTGFiZWxDb25maWcgZXh0ZW5kcyBDb250YWluZXJDb25maWcge1xuICAvLyBub3RoaW5nIHlldFxufVxuXG4vKipcbiAqIEEgbGFiZWwgZm9yIGEge0BsaW5rIFNlZWtCYXJ9IHRoYXQgY2FuIGRpc3BsYXkgdGhlIHNlZWsgdGFyZ2V0IHRpbWUsIGEgdGh1bWJuYWlsLCBhbmQgdGl0bGUgKGUuZy4gY2hhcHRlciB0aXRsZSkuXG4gKi9cbmV4cG9ydCBjbGFzcyBTZWVrQmFyTGFiZWwgZXh0ZW5kcyBDb250YWluZXI8U2Vla0JhckxhYmVsQ29uZmlnPiB7XG5cbiAgcHJpdmF0ZSB0aW1lTGFiZWw6IExhYmVsPExhYmVsQ29uZmlnPjtcbiAgcHJpdmF0ZSB0aXRsZUxhYmVsOiBMYWJlbDxMYWJlbENvbmZpZz47XG4gIHByaXZhdGUgdGh1bWJuYWlsOiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPjtcblxuICBwcml2YXRlIHRodW1ibmFpbEltYWdlTG9hZGVyOiBJbWFnZUxvYWRlcjtcblxuICBwcml2YXRlIHRpbWVGb3JtYXQ6IHN0cmluZztcblxuICBwcml2YXRlIGFwcGxpZWRNYXJrZXJDc3NDbGFzc2VzOiBzdHJpbmdbXSA9IFtdO1xuICBwcml2YXRlIHBsYXllcjogUGxheWVyQVBJO1xuICBwcml2YXRlIHVpTWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXI7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTZWVrQmFyTGFiZWxDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLnRpbWVMYWJlbCA9IG5ldyBMYWJlbCh7IGNzc0NsYXNzZXM6IFsnc2Vla2Jhci1sYWJlbC10aW1lJ10gfSk7XG4gICAgdGhpcy50aXRsZUxhYmVsID0gbmV3IExhYmVsKHsgY3NzQ2xhc3NlczogWydzZWVrYmFyLWxhYmVsLXRpdGxlJ10gfSk7XG4gICAgdGhpcy50aHVtYm5haWwgPSBuZXcgQ29tcG9uZW50KHsgY3NzQ2xhc3NlczogWydzZWVrYmFyLXRodW1ibmFpbCddLCByb2xlOiAnaW1nJyB9KTtcbiAgICB0aGlzLnRodW1ibmFpbEltYWdlTG9hZGVyID0gbmV3IEltYWdlTG9hZGVyKCk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXNlZWtiYXItbGFiZWwnLFxuICAgICAgY29tcG9uZW50czogW25ldyBDb250YWluZXIoe1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgdGhpcy50aHVtYm5haWwsXG4gICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbdGhpcy50aXRsZUxhYmVsLCB0aGlzLnRpbWVMYWJlbF0sXG4gICAgICAgICAgICBjc3NDbGFzczogJ3NlZWtiYXItbGFiZWwtbWV0YWRhdGEnLFxuICAgICAgICAgIH0pXSxcbiAgICAgICAgY3NzQ2xhc3M6ICdzZWVrYmFyLWxhYmVsLWlubmVyJyxcbiAgICAgIH0pXSxcbiAgICAgIGhpZGRlbjogdHJ1ZSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5wbGF5ZXIgPSBwbGF5ZXI7XG4gICAgdGhpcy51aU1hbmFnZXIgPSB1aW1hbmFnZXI7XG4gICAgdWltYW5hZ2VyLm9uU2Vla1ByZXZpZXcuc3Vic2NyaWJlUmF0ZUxpbWl0ZWQodGhpcy5oYW5kbGVTZWVrUHJldmlldywgMTAwKTtcblxuICAgIGxldCBpbml0ID0gKCkgPT4ge1xuICAgICAgLy8gU2V0IHRpbWUgZm9ybWF0IGRlcGVuZGluZyBvbiBzb3VyY2UgZHVyYXRpb25cbiAgICAgIHRoaXMudGltZUZvcm1hdCA9IE1hdGguYWJzKHBsYXllci5pc0xpdmUoKSA/IHBsYXllci5nZXRNYXhUaW1lU2hpZnQoKSA6IHBsYXllci5nZXREdXJhdGlvbigpKSA+PSAzNjAwID9cbiAgICAgICAgU3RyaW5nVXRpbHMuRk9STUFUX0hITU1TUyA6IFN0cmluZ1V0aWxzLkZPUk1BVF9NTVNTO1xuICAgICAgLy8gU2V0IGluaXRpYWwgc3RhdGUgb2YgdGl0bGUgYW5kIHRodW1ibmFpbCB0byBoYW5kbGUgc291cmNlTG9hZGVkIHdoZW4gc3dpdGNoaW5nIHRvIGEgbGl2ZS1zdHJlYW1cbiAgICAgIHRoaXMuc2V0VGl0bGVUZXh0KG51bGwpO1xuICAgICAgdGhpcy5zZXRUaHVtYm5haWwobnVsbCk7XG4gICAgfTtcblxuICAgIHVpbWFuYWdlci5nZXRDb25maWcoKS5ldmVudHMub25VcGRhdGVkLnN1YnNjcmliZShpbml0KTtcbiAgICBpbml0KCk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZVNlZWtQcmV2aWV3ID0gKHNlbmRlcjogU2Vla0JhciwgYXJnczogU2Vla1ByZXZpZXdFdmVudEFyZ3MpID0+IHtcbiAgICBpZiAodGhpcy5wbGF5ZXIuaXNMaXZlKCkpIHtcbiAgICAgIGxldCBtYXhUaW1lU2hpZnQgPSB0aGlzLnBsYXllci5nZXRNYXhUaW1lU2hpZnQoKTtcbiAgICAgIGxldCB0aW1lU2hpZnRQcmV2aWV3ID0gbWF4VGltZVNoaWZ0IC0gbWF4VGltZVNoaWZ0ICogKGFyZ3MucG9zaXRpb24gLyAxMDApO1xuXG4gICAgICB0aGlzLnNldFRpbWUodGltZVNoaWZ0UHJldmlldyk7XG5cbiAgICAgIC8vIEluIGNhc2Ugb2YgYSBsaXZlIHN0cmVhbSB0aGUgcGxheWVyIGV4cGVjdHMgdGhlIHRpbWUgcGFzc2VkIGludG8gdGhlIGdldFRodW1ibmFpbCBhcyBhIHdhbGxDbG9ja1RpbWUgYW5kIG5vdFxuICAgICAgLy8gYXMgYSByZWxhdGl2ZSB0aW1lU2hpZnQgdmFsdWUuXG4gICAgICBjb25zdCBjb252ZXJ0VGltZVNoaWZ0UHJldmlld1RvV2FsbENsb2NrVGltZSA9ICh0YXJnZXRUaW1lU2hpZnQ6IG51bWJlcik6IG51bWJlciA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUaW1lU2hpZnQgPSB0aGlzLnBsYXllci5nZXRUaW1lU2hpZnQoKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRpbWUgPSB0aGlzLnBsYXllci5nZXRDdXJyZW50VGltZSgpO1xuXG4gICAgICAgIGNvbnN0IHdhbGxDbG9ja1RpbWVPZkxpdmVFZGdlID0gY3VycmVudFRpbWUgLSBjdXJyZW50VGltZVNoaWZ0O1xuICAgICAgICByZXR1cm4gd2FsbENsb2NrVGltZU9mTGl2ZUVkZ2UgKyB0YXJnZXRUaW1lU2hpZnQ7XG4gICAgICB9O1xuXG4gICAgICBjb25zdCB3YWxsQ2xvY2tUaW1lID0gY29udmVydFRpbWVTaGlmdFByZXZpZXdUb1dhbGxDbG9ja1RpbWUodGltZVNoaWZ0UHJldmlldyk7XG4gICAgICB0aGlzLnNldFRodW1ibmFpbCh0aGlzLnBsYXllci5nZXRUaHVtYm5haWwod2FsbENsb2NrVGltZSkpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCB0aW1lID0gdGhpcy5wbGF5ZXIuZ2V0RHVyYXRpb24oKSAqIChhcmdzLnBvc2l0aW9uIC8gMTAwKTtcbiAgICAgIHRoaXMuc2V0VGltZSh0aW1lKTtcblxuICAgICAgY29uc3Qgc2Vla2FibGVSYW5nZVN0YXJ0ID0gUGxheWVyVXRpbHMuZ2V0U2Vla2FibGVSYW5nZVN0YXJ0KHRoaXMucGxheWVyLCAwKTtcbiAgICAgIGNvbnN0IGFic29sdXRlU2Vla1RhcmdldCA9IHRpbWUgKyBzZWVrYWJsZVJhbmdlU3RhcnQ7XG4gICAgICB0aGlzLnNldFRodW1ibmFpbCh0aGlzLnBsYXllci5nZXRUaHVtYm5haWwoYWJzb2x1dGVTZWVrVGFyZ2V0KSk7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MubWFya2VyKSB7XG4gICAgICB0aGlzLnNldFRpdGxlVGV4dChhcmdzLm1hcmtlci5tYXJrZXIudGl0bGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldFRpdGxlVGV4dChudWxsKTtcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgQ1NTIGNsYXNzZXMgZnJvbSBwcmV2aW91cyBtYXJrZXJcbiAgICBpZiAodGhpcy5hcHBsaWVkTWFya2VyQ3NzQ2xhc3Nlcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5yZW1vdmVDbGFzcyh0aGlzLmFwcGxpZWRNYXJrZXJDc3NDbGFzc2VzLmpvaW4oJyAnKSk7XG4gICAgICB0aGlzLmFwcGxpZWRNYXJrZXJDc3NDbGFzc2VzID0gW107XG4gICAgfVxuXG4gICAgLy8gQWRkIENTUyBjbGFzc2VzIG9mIGN1cnJlbnQgbWFya2VyXG4gICAgaWYgKGFyZ3MubWFya2VyKSB7XG4gICAgICBjb25zdCBjc3NDbGFzc2VzID0gKGFyZ3MubWFya2VyLm1hcmtlci5jc3NDbGFzc2VzIHx8IFtdKS5tYXAoY3NzQ2xhc3MgPT4gdGhpcy5wcmVmaXhDc3MoY3NzQ2xhc3MpKTtcbiAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmFkZENsYXNzKGNzc0NsYXNzZXMuam9pbignICcpKTtcbiAgICAgIHRoaXMuYXBwbGllZE1hcmtlckNzc0NsYXNzZXMgPSBjc3NDbGFzc2VzO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogU2V0cyBhcmJpdHJhcnkgdGV4dCBvbiB0aGUgbGFiZWwuXG4gICAqIEBwYXJhbSB0ZXh0IHRoZSB0ZXh0IHRvIHNob3cgb24gdGhlIGxhYmVsXG4gICAqL1xuICBzZXRUZXh0KHRleHQ6IHN0cmluZykge1xuICAgIHRoaXMudGltZUxhYmVsLnNldFRleHQodGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhIHRpbWUgdG8gYmUgZGlzcGxheWVkIG9uIHRoZSBsYWJlbC5cbiAgICogQHBhcmFtIHNlY29uZHMgdGhlIHRpbWUgaW4gc2Vjb25kcyB0byBkaXNwbGF5IG9uIHRoZSBsYWJlbFxuICAgKi9cbiAgc2V0VGltZShzZWNvbmRzOiBudW1iZXIpIHtcbiAgICB0aGlzLnNldFRleHQoU3RyaW5nVXRpbHMuc2Vjb25kc1RvVGltZShzZWNvbmRzLCB0aGlzLnRpbWVGb3JtYXQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB0ZXh0IG9uIHRoZSB0aXRsZSBsYWJlbC5cbiAgICogQHBhcmFtIHRleHQgdGhlIHRleHQgdG8gc2hvdyBvbiB0aGUgbGFiZWxcbiAgICovXG4gIHNldFRpdGxlVGV4dCh0ZXh0ID0gJycpIHtcbiAgICB0aGlzLnRpdGxlTGFiZWwuc2V0VGV4dCh0ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIG9yIHJlbW92ZXMgYSB0aHVtYm5haWwgb24gdGhlIGxhYmVsLlxuICAgKiBAcGFyYW0gdGh1bWJuYWlsIHRoZSB0aHVtYm5haWwgdG8gZGlzcGxheSBvbiB0aGUgbGFiZWwgb3IgbnVsbCB0byByZW1vdmUgYSBkaXNwbGF5ZWQgdGh1bWJuYWlsXG4gICAqL1xuICBzZXRUaHVtYm5haWwodGh1bWJuYWlsOiBUaHVtYm5haWwgPSBudWxsKSB7XG4gICAgbGV0IHRodW1ibmFpbEVsZW1lbnQgPSB0aGlzLnRodW1ibmFpbC5nZXREb21FbGVtZW50KCk7XG5cbiAgICBpZiAodGh1bWJuYWlsID09IG51bGwpIHtcbiAgICAgIHRodW1ibmFpbEVsZW1lbnQuY3NzKHtcbiAgICAgICAgJ2JhY2tncm91bmQtaW1hZ2UnOiBudWxsLFxuICAgICAgICAnZGlzcGxheSc6IG51bGwsXG4gICAgICAgICd3aWR0aCc6IG51bGwsXG4gICAgICAgICdoZWlnaHQnOiBudWxsLFxuICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy8gV2UgdXNlIHRoZSB0aHVtYm5haWwgaW1hZ2UgbG9hZGVyIHRvIG1ha2Ugc3VyZSB0aGUgdGh1bWJuYWlsIGlzIGxvYWRlZCBhbmQgaXQncyBzaXplIGlzIGtub3duIGJlZm9yZSBiZSBjYW5cbiAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgQ1NTIHByb3BlcnRpZXMgYW5kIHNldCB0aGVtIG9uIHRoZSBlbGVtZW50LlxuICAgICAgdGhpcy50aHVtYm5haWxJbWFnZUxvYWRlci5sb2FkKHRodW1ibmFpbC51cmwsICh1cmwsIHdpZHRoLCBoZWlnaHQpID0+IHtcbiAgICAgICAgLy8gY2FuIGJlIGNoZWNrZWQgbGlrZSB0aGF0IGJlY2F1c2UgeC95L3cvaCBhcmUgZWl0aGVyIGFsbCBwcmVzZW50IG9yIG5vbmVcbiAgICAgICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL21lZGlhLWZyYWdzLyNuYW1pbmctc3BhY2VcbiAgICAgICAgaWYgKHRodW1ibmFpbC54ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHVtYm5haWxFbGVtZW50LmNzcyh0aGlzLnRodW1ibmFpbENzc1Nwcml0ZSh0aHVtYm5haWwsIHdpZHRoLCBoZWlnaHQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHVtYm5haWxFbGVtZW50LmNzcyh0aGlzLnRodW1ibmFpbENzc1NpbmdsZUltYWdlKHRodW1ibmFpbCwgd2lkdGgsIGhlaWdodCkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHRodW1ibmFpbENzc1Nwcml0ZSh0aHVtYm5haWw6IFRodW1ibmFpbCwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiBDc3NQcm9wZXJ0aWVzIHtcbiAgICBsZXQgdGh1bWJuYWlsQ291bnRYID0gd2lkdGggLyB0aHVtYm5haWwud2lkdGg7XG4gICAgbGV0IHRodW1ibmFpbENvdW50WSA9IGhlaWdodCAvIHRodW1ibmFpbC5oZWlnaHQ7XG5cbiAgICBsZXQgdGh1bWJuYWlsSW5kZXhYID0gdGh1bWJuYWlsLnggLyB0aHVtYm5haWwud2lkdGg7XG4gICAgbGV0IHRodW1ibmFpbEluZGV4WSA9IHRodW1ibmFpbC55IC8gdGh1bWJuYWlsLmhlaWdodDtcblxuICAgIGxldCBzaXplWCA9IDEwMCAqIHRodW1ibmFpbENvdW50WDtcbiAgICBsZXQgc2l6ZVkgPSAxMDAgKiB0aHVtYm5haWxDb3VudFk7XG5cbiAgICBsZXQgb2Zmc2V0WCA9IDEwMCAqIHRodW1ibmFpbEluZGV4WDtcbiAgICBsZXQgb2Zmc2V0WSA9IDEwMCAqIHRodW1ibmFpbEluZGV4WTtcblxuICAgIGxldCBhc3BlY3RSYXRpbyA9IDEgLyB0aHVtYm5haWwud2lkdGggKiB0aHVtYm5haWwuaGVpZ2h0O1xuXG4gICAgLy8gVGhlIHRodW1ibmFpbCBzaXplIGlzIHNldCBieSBzZXR0aW5nIHRoZSBDU1MgJ3dpZHRoJyBhbmQgJ3BhZGRpbmctYm90dG9tJyBwcm9wZXJ0aWVzLiAncGFkZGluZy1ib3R0b20nIGlzXG4gICAgLy8gdXNlZCBiZWNhdXNlIGl0IGlzIHJlbGF0aXZlIHRvIHRoZSB3aWR0aCBhbmQgY2FuIGJlIHVzZWQgdG8gc2V0IHRoZSBhc3BlY3QgcmF0aW8gb2YgdGhlIHRodW1ibmFpbC5cbiAgICAvLyBBIGRlZmF1bHQgdmFsdWUgZm9yIHdpZHRoIGlzIHNldCBpbiB0aGUgc3R5bGVzaGVldCBhbmQgY2FuIGJlIG92ZXJ3cml0dGVuIGZyb20gdGhlcmUgb3IgYW55d2hlcmUgZWxzZS5cbiAgICByZXR1cm4ge1xuICAgICAgJ2Rpc3BsYXknOiAnaW5oZXJpdCcsXG4gICAgICAnYmFja2dyb3VuZC1pbWFnZSc6IGB1cmwoJHt0aHVtYm5haWwudXJsfSlgLFxuICAgICAgJ3BhZGRpbmctYm90dG9tJzogYCR7MTAwICogYXNwZWN0UmF0aW99JWAsXG4gICAgICAnYmFja2dyb3VuZC1zaXplJzogYCR7c2l6ZVh9JSAke3NpemVZfSVgLFxuICAgICAgJ2JhY2tncm91bmQtcG9zaXRpb24nOiBgLSR7b2Zmc2V0WH0lIC0ke29mZnNldFl9JWAsXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgdGh1bWJuYWlsQ3NzU2luZ2xlSW1hZ2UodGh1bWJuYWlsOiBUaHVtYm5haWwsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogQ3NzUHJvcGVydGllcyB7XG4gICAgbGV0IGFzcGVjdFJhdGlvID0gMSAvIHdpZHRoICogaGVpZ2h0O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICdkaXNwbGF5JzogJ2luaGVyaXQnLFxuICAgICAgJ2JhY2tncm91bmQtaW1hZ2UnOiBgdXJsKCR7dGh1bWJuYWlsLnVybH0pYCxcbiAgICAgICdwYWRkaW5nLWJvdHRvbSc6IGAkezEwMCAqIGFzcGVjdFJhdGlvfSVgLFxuICAgICAgJ2JhY2tncm91bmQtc2l6ZSc6IGAxMDAlIDEwMCVgLFxuICAgICAgJ2JhY2tncm91bmQtcG9zaXRpb24nOiBgMCAwYCxcbiAgICB9O1xuICB9XG5cbiAgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBzdXBlci5yZWxlYXNlKCk7XG5cbiAgICB0aGlzLnVpTWFuYWdlci5vblNlZWtQcmV2aWV3LnVuc3Vic2NyaWJlKHRoaXMuaGFuZGxlU2Vla1ByZXZpZXcpO1xuICB9XG59XG4iLCJpbXBvcnQge0xpc3RTZWxlY3RvciwgTGlzdFNlbGVjdG9yQ29uZmlnfSBmcm9tICcuL2xpc3RzZWxlY3Rvcic7XG5pbXBvcnQge0RPTX0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7IGkxOG4sIExvY2FsaXphYmxlVGV4dCB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIHNpbXBsZSBzZWxlY3QgYm94IHByb3ZpZGluZyB0aGUgcG9zc2liaWxpdHkgdG8gc2VsZWN0IGEgc2luZ2xlIGl0ZW0gb3V0IG9mIGEgbGlzdCBvZiBhdmFpbGFibGUgaXRlbXMuXG4gKlxuICogRE9NIGV4YW1wbGU6XG4gKiA8Y29kZT5cbiAqICAgICA8c2VsZWN0IGNsYXNzPSd1aS1zZWxlY3Rib3gnPlxuICogICAgICAgICA8b3B0aW9uIHZhbHVlPSdrZXknPmxhYmVsPC9vcHRpb24+XG4gKiAgICAgICAgIC4uLlxuICogICAgIDwvc2VsZWN0PlxuICogPC9jb2RlPlxuICovXG5cbmV4cG9ydCBjbGFzcyBTZWxlY3RCb3ggZXh0ZW5kcyBMaXN0U2VsZWN0b3I8TGlzdFNlbGVjdG9yQ29uZmlnPiB7XG5cbiAgcHJpdmF0ZSBzZWxlY3RFbGVtZW50OiBET007XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBMaXN0U2VsZWN0b3JDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXNlbGVjdGJveCcsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRvRG9tRWxlbWVudCgpOiBET00ge1xuICAgIGxldCBzZWxlY3RFbGVtZW50ID0gbmV3IERPTSgnc2VsZWN0Jywge1xuICAgICAgJ2lkJzogdGhpcy5jb25maWcuaWQsXG4gICAgICAnY2xhc3MnOiB0aGlzLmdldENzc0NsYXNzZXMoKSxcbiAgICAgICdhcmlhLWxhYmVsJzogaTE4bi5wZXJmb3JtTG9jYWxpemF0aW9uKHRoaXMuY29uZmlnLmFyaWFMYWJlbCksXG4gICAgfSk7XG5cbiAgICB0aGlzLnNlbGVjdEVsZW1lbnQgPSBzZWxlY3RFbGVtZW50O1xuICAgIHRoaXMudXBkYXRlRG9tSXRlbXMoKTtcblxuICAgIHNlbGVjdEVsZW1lbnQub24oJ2NoYW5nZScsICgpID0+IHtcbiAgICAgIGxldCB2YWx1ZSA9IHNlbGVjdEVsZW1lbnQudmFsKCk7XG4gICAgICB0aGlzLm9uSXRlbVNlbGVjdGVkRXZlbnQodmFsdWUsIGZhbHNlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBzZWxlY3RFbGVtZW50O1xuICB9XG5cbiAgcHJvdGVjdGVkIHVwZGF0ZURvbUl0ZW1zKHNlbGVjdGVkVmFsdWU6IHN0cmluZyA9IG51bGwpIHtcbiAgICAvLyBEZWxldGUgYWxsIGNoaWxkcmVuXG4gICAgdGhpcy5zZWxlY3RFbGVtZW50LmVtcHR5KCk7XG5cbiAgICAvLyBBZGQgdXBkYXRlZCBjaGlsZHJlblxuICAgIGZvciAobGV0IGl0ZW0gb2YgdGhpcy5pdGVtcykge1xuICAgICAgbGV0IG9wdGlvbkVsZW1lbnQgPSBuZXcgRE9NKCdvcHRpb24nLCB7XG4gICAgICAgICd2YWx1ZSc6IFN0cmluZyhpdGVtLmtleSksXG4gICAgICB9KS5odG1sKGkxOG4ucGVyZm9ybUxvY2FsaXphdGlvbihpdGVtLmxhYmVsKSk7XG5cbiAgICAgIGlmIChpdGVtLmtleSA9PT0gU3RyaW5nKHNlbGVjdGVkVmFsdWUpKSB7IC8vIGNvbnZlcnQgc2VsZWN0ZWRWYWx1ZSB0byBzdHJpbmcgdG8gY2F0Y2ggJ251bGwnL251bGwgY2FzZVxuICAgICAgICBvcHRpb25FbGVtZW50LmF0dHIoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2VsZWN0RWxlbWVudC5hcHBlbmQob3B0aW9uRWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIG9uSXRlbUFkZGVkRXZlbnQodmFsdWU6IHN0cmluZykge1xuICAgIHN1cGVyLm9uSXRlbUFkZGVkRXZlbnQodmFsdWUpO1xuICAgIHRoaXMudXBkYXRlRG9tSXRlbXModGhpcy5zZWxlY3RlZEl0ZW0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uSXRlbVJlbW92ZWRFdmVudCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIub25JdGVtUmVtb3ZlZEV2ZW50KHZhbHVlKTtcbiAgICB0aGlzLnVwZGF0ZURvbUl0ZW1zKHRoaXMuc2VsZWN0ZWRJdGVtKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkl0ZW1TZWxlY3RlZEV2ZW50KHZhbHVlOiBzdHJpbmcsIHVwZGF0ZURvbUl0ZW1zOiBib29sZWFuID0gdHJ1ZSkge1xuICAgIHN1cGVyLm9uSXRlbVNlbGVjdGVkRXZlbnQodmFsdWUpO1xuICAgIGlmICh1cGRhdGVEb21JdGVtcykge1xuICAgICAgdGhpcy51cGRhdGVEb21JdGVtcyh2YWx1ZSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBDb250YWluZXIsIENvbnRhaW5lckNvbmZpZyB9IGZyb20gJy4vY29udGFpbmVyJztcbmltcG9ydCB7IFNlbGVjdEJveCB9IGZyb20gJy4vc2VsZWN0Ym94JztcbmltcG9ydCB7IFVJSW5zdGFuY2VNYW5hZ2VyIH0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFRpbWVvdXQgfSBmcm9tICcuLi90aW1lb3V0JztcbmltcG9ydCB7IEV2ZW50LCBFdmVudERpc3BhdGNoZXIsIE5vQXJncyB9IGZyb20gJy4uL2V2ZW50ZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBTZXR0aW5nc1BhbmVsUGFnZSB9IGZyb20gJy4vc2V0dGluZ3NwYW5lbHBhZ2UnO1xuaW1wb3J0IHsgU2V0dGluZ3NQYW5lbEl0ZW0gfSBmcm9tICcuL3NldHRpbmdzcGFuZWxpdGVtJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBDb21wb25lbnQsIENvbXBvbmVudENvbmZpZyB9IGZyb20gJy4vY29tcG9uZW50JztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgYSB7QGxpbmsgU2V0dGluZ3NQYW5lbH0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2V0dGluZ3NQYW5lbENvbmZpZyBleHRlbmRzIENvbnRhaW5lckNvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgZGVsYXkgaW4gbWlsbGlzZWNvbmRzIGFmdGVyIHdoaWNoIHRoZSBzZXR0aW5ncyBwYW5lbCB3aWxsIGJlIGhpZGRlbiB3aGVuIHRoZXJlIGlzIG5vIHVzZXIgaW50ZXJhY3Rpb24uXG4gICAqIFNldCB0byAtMSB0byBkaXNhYmxlIGF1dG9tYXRpYyBoaWRpbmcuXG4gICAqIERlZmF1bHQ6IDMgc2Vjb25kcyAoMzAwMClcbiAgICovXG4gIGhpZGVEZWxheT86IG51bWJlcjtcblxuICAvKipcbiAgICogRmxhZyB0byBzcGVjaWZ5IGlmIHRoZXJlIHNob3VsZCBiZSBhbiBhbmltYXRpb24gd2hlbiBzd2l0Y2hpbmcgU2V0dGluZ3NQYW5lbFBhZ2VzLlxuICAgKiBEZWZhdWx0OiB0cnVlXG4gICAqL1xuICBwYWdlVHJhbnNpdGlvbkFuaW1hdGlvbj86IGJvb2xlYW47XG59XG5cbmVudW0gTmF2aWdhdGlvbkRpcmVjdGlvbiB7XG4gIEZvcndhcmRzLFxuICBCYWNrd2FyZHMsXG59XG5cbi8qKlxuICogQSBwYW5lbCBjb250YWluaW5nIGEgbGlzdCBvZiB7QGxpbmsgU2V0dGluZ3NQYW5lbFBhZ2UgaXRlbXN9LlxuICpcbiAqIFRvIGNvbmZpZ3VyZSBwYWdlcyBqdXN0IHBhc3MgdGhlbSBpbiB0aGUgY29tcG9uZW50cyBhcnJheS5cbiAqXG4gKiBFeGFtcGxlOlxuICogIGxldCBzZXR0aW5nc1BhbmVsID0gbmV3IFNldHRpbmdzUGFuZWwoe1xuICogICAgaGlkZGVuOiB0cnVlLFxuICogIH0pO1xuICpcbiAqICBsZXQgc2V0dGluZ3NQYW5lbFBhZ2UgPSBuZXcgU2V0dGluZ3NQYW5lbFBhZ2Uoe1xuICogICAgY29tcG9uZW50czogW+KApl1cbiAqICB9KTtcbiAqXG4gKiAgbGV0IHNlY29uZFNldHRpbmdzUGFuZWxQYWdlID0gbmV3IFNldHRpbmdzUGFuZWxQYWdlKHtcbiAqICAgIGNvbXBvbmVudHM6IFvigKZdXG4gKiAgfSk7XG4gKlxuICogIHNldHRpbmdzUGFuZWwuYWRkQ29tcG9uZW50KHNldHRpbmdzUGFuZWxQYWdlKTtcbiAqICBzZXR0aW5nc1BhbmVsLmFkZENvbXBvbmVudChzZWNvbmRTZXR0aW5nc1BhbmVsUGFnZSk7XG4gKlxuICogRm9yIGFuIGV4YW1wbGUgaG93IHRvIG5hdmlnYXRlIGJldHdlZW4gcGFnZXMgQHNlZSBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckJ1dHRvblxuICovXG5leHBvcnQgY2xhc3MgU2V0dGluZ3NQYW5lbCBleHRlbmRzIENvbnRhaW5lcjxTZXR0aW5nc1BhbmVsQ29uZmlnPiB7XG5cbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ0xBU1NfQUNUSVZFX1BBR0UgPSAnYWN0aXZlJztcblxuICAvLyBuYXZpZ2F0aW9uIGhhbmRsaW5nXG4gIHByaXZhdGUgYWN0aXZlUGFnZTogU2V0dGluZ3NQYW5lbFBhZ2U7XG4gIHByaXZhdGUgbmF2aWdhdGlvblN0YWNrOiBTZXR0aW5nc1BhbmVsUGFnZVtdID0gW107XG5cbiAgcHJpdmF0ZSBzZXR0aW5nc1BhbmVsRXZlbnRzID0ge1xuICAgIG9uU2V0dGluZ3NTdGF0ZUNoYW5nZWQ6IG5ldyBFdmVudERpc3BhdGNoZXI8U2V0dGluZ3NQYW5lbCwgTm9BcmdzPigpLFxuICB9O1xuXG4gIHByaXZhdGUgaGlkZVRpbWVvdXQ6IFRpbWVvdXQ7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTZXR0aW5nc1BhbmVsQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktc2V0dGluZ3MtcGFuZWwnLFxuICAgICAgaGlkZURlbGF5OiAzMDAwLFxuICAgICAgcGFnZVRyYW5zaXRpb25BbmltYXRpb246IHRydWUsXG4gICAgfSBhcyBTZXR0aW5nc1BhbmVsQ29uZmlnLCB0aGlzLmNvbmZpZyk7XG5cbiAgICB0aGlzLmFjdGl2ZVBhZ2UgPSB0aGlzLmdldFJvb3RQYWdlKCk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbGV0IGNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG5cbiAgICB1aW1hbmFnZXIub25Db250cm9sc0hpZGUuc3Vic2NyaWJlKCgpID0+IHRoaXMuaGlkZUhvdmVyZWRTZWxlY3RCb3hlcygpKTtcblxuICAgIGlmIChjb25maWcuaGlkZURlbGF5ID4gLTEpIHtcbiAgICAgIHRoaXMuaGlkZVRpbWVvdXQgPSBuZXcgVGltZW91dChjb25maWcuaGlkZURlbGF5LCAoKSA9PiB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB0aGlzLmhpZGVIb3ZlcmVkU2VsZWN0Qm94ZXMoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkub24oJ21vdXNlZW50ZXInLCAoKSA9PiB7XG4gICAgICAgIC8vIE9uIG1vdXNlIGVudGVyIGNsZWFyIHRoZSB0aW1lb3V0XG4gICAgICAgIHRoaXMuaGlkZVRpbWVvdXQuY2xlYXIoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkub24oJ21vdXNlbGVhdmUnLCAoKSA9PiB7XG4gICAgICAgIC8vIE9uIG1vdXNlIGxlYXZlIGFjdGl2YXRlIHRoZSB0aW1lb3V0XG4gICAgICAgIHRoaXMuaGlkZVRpbWVvdXQucmVzZXQoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkub24oJ2ZvY3VzaW4nLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuaGlkZVRpbWVvdXQuY2xlYXIoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkub24oJ2ZvY3Vzb3V0JywgKCkgPT4ge1xuICAgICAgICB0aGlzLmhpZGVUaW1lb3V0LnJlc2V0KCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLm9uSGlkZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgaWYgKGNvbmZpZy5oaWRlRGVsYXkgPiAtMSkge1xuICAgICAgICAvLyBDbGVhciB0aW1lb3V0IHdoZW4gaGlkZGVuIGZyb20gb3V0c2lkZVxuICAgICAgICB0aGlzLmhpZGVUaW1lb3V0LmNsZWFyKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNpbmNlIHdlIGRvbid0IHJlc2V0IHRoZSBhY3R1YWwgbmF2aWdhdGlvbiBoZXJlIHdlIG5lZWQgdG8gc2ltdWxhdGUgYSBvbkluYWN0aXZlIGV2ZW50IGluIGNhc2Ugc29tZSBwYW5lbFxuICAgICAgLy8gbmVlZHMgdG8gZG8gc29tZXRoaW5nIHdoZW4gdGhleSBiZWNvbWUgaW52aXNpYmxlIC8gaW5hY3RpdmUuXG4gICAgICB0aGlzLmFjdGl2ZVBhZ2Uub25JbmFjdGl2ZUV2ZW50KCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uU2hvdy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgLy8gUmVzZXQgbmF2aWdhdGlvbiB3aGVuIHRlIHBhbmVsIGdldHMgdmlzaWJsZSB0byBhdm9pZCBhIHdlaXJkIGFuaW1hdGlvbiB3aGVuIGhpZGluZ1xuICAgICAgdGhpcy5yZXNldE5hdmlnYXRpb24odHJ1ZSk7XG4gICAgICAvLyBTaW5jZSB3ZSBkb24ndCBuZWVkIHRvIG5hdmlnYXRlIHRvIHRoZSByb290IHBhZ2UgYWdhaW4gd2UgbmVlZCB0byBmaXJlIHRoZSBvbkFjdGl2ZSBldmVudCB3aGVuIHRoZSBzZXR0aW5nc1xuICAgICAgLy8gcGFuZWwgZ2V0cyB2aXNpYmxlLlxuICAgICAgdGhpcy5hY3RpdmVQYWdlLm9uQWN0aXZlRXZlbnQoKTtcblxuICAgICAgaWYgKGNvbmZpZy5oaWRlRGVsYXkgPiAtMSkge1xuICAgICAgICAvLyBBY3RpdmF0ZSB0aW1lb3V0IHdoZW4gc2hvd25cbiAgICAgICAgdGhpcy5oaWRlVGltZW91dC5zdGFydCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gcGFzcyBldmVudCBmcm9tIHJvb3QgcGFnZSB0aHJvdWdoXG4gICAgdGhpcy5nZXRSb290UGFnZSgpLm9uU2V0dGluZ3NTdGF0ZUNoYW5nZWQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMub25TZXR0aW5nc1N0YXRlQ2hhbmdlZEV2ZW50KCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnVwZGF0ZUFjdGl2ZVBhZ2VDbGFzcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgYWN0aXZlIC8gdmlzaWJsZSBwYWdlXG4gICAqIEByZXR1cm4ge1NldHRpbmdzUGFuZWxQYWdlfVxuICAgKi9cbiAgZ2V0QWN0aXZlUGFnZSgpOiBTZXR0aW5nc1BhbmVsUGFnZSB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlUGFnZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZVxuICAgKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIHNldEFjdGl2ZVBhZ2V9IGluc3RlYWRcbiAgICogQHBhcmFtIGluZGV4XG4gICAqL1xuICBzZXRBY3RpdmVQYWdlSW5kZXgoaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuc2V0QWN0aXZlUGFnZSh0aGlzLmdldFBhZ2VzKClbaW5kZXhdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIHRoZSBwYXNzZWQgcGFnZSB0byB0aGUgbmF2aWdhdGlvbiBzdGFjayBhbmQgbWFrZXMgaXQgdmlzaWJsZS5cbiAgICogVXNlIHtAbGluayBwb3BTZXR0aW5nc1BhbmVsUGFnZX0gdG8gbmF2aWdhdGUgYmFja3dhcmRzLlxuICAgKlxuICAgKiBSZXN1bHRzIGluIG5vLW9wIGlmIHRoZSB0YXJnZXQgcGFnZSBpcyB0aGUgY3VycmVudCBwYWdlLlxuICAgKiBAcGFyYW1zIHBhZ2VcbiAgICovXG4gIHNldEFjdGl2ZVBhZ2UodGFyZ2V0UGFnZTogU2V0dGluZ3NQYW5lbFBhZ2UpOiB2b2lkIHtcbiAgICBpZiAodGFyZ2V0UGFnZSA9PT0gdGhpcy5nZXRBY3RpdmVQYWdlKCkpIHtcbiAgICAgIGNvbnNvbGUud2FybignUGFnZSBpcyBhbHJlYWR5IHRoZSBjdXJyZW50IG9uZSAuLi4gc2tpcHBpbmcgbmF2aWdhdGlvbicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMubmF2aWdhdGVUb1BhZ2UoXG4gICAgICB0YXJnZXRQYWdlLFxuICAgICAgdGhpcy5nZXRBY3RpdmVQYWdlKCksXG4gICAgICBOYXZpZ2F0aW9uRGlyZWN0aW9uLkZvcndhcmRzLFxuICAgICAgISh0aGlzLmNvbmZpZyBhcyBTZXR0aW5nc1BhbmVsQ29uZmlnKS5wYWdlVHJhbnNpdGlvbkFuaW1hdGlvbixcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0cyB0aGUgbmF2aWdhdGlvbiBzdGFjayBieSBuYXZpZ2F0aW5nIGJhY2sgdG8gdGhlIHJvb3QgcGFnZSBhbmQgZGlzcGxheWluZyBpdC5cbiAgICovXG4gIHBvcFRvUm9vdFNldHRpbmdzUGFuZWxQYWdlKCk6IHZvaWQge1xuICAgIHRoaXMucmVzZXROYXZpZ2F0aW9uKCh0aGlzLmNvbmZpZyBhcyBTZXR0aW5nc1BhbmVsQ29uZmlnKS5wYWdlVHJhbnNpdGlvbkFuaW1hdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgY3VycmVudCBwYWdlIGZyb20gdGhlIG5hdmlnYXRpb24gc3RhY2sgYW5kIG1ha2VzIHRoZSBwcmV2aW91cyBvbmUgdmlzaWJsZS5cbiAgICogUmVzdWx0cyBpbiBhIG5vLW9wIGlmIHdlIGFyZSBhbHJlYWR5IG9uIHRoZSByb290IHBhZ2UuXG4gICAqL1xuICBwb3BTZXR0aW5nc1BhbmVsUGFnZSgpIHtcbiAgICBpZiAodGhpcy5uYXZpZ2F0aW9uU3RhY2subGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0FscmVhZHkgb24gdGhlIHJvb3QgcGFnZSAuLi4gc2tpcHBpbmcgbmF2aWdhdGlvbicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCB0YXJnZXRQYWdlID0gdGhpcy5uYXZpZ2F0aW9uU3RhY2tbdGhpcy5uYXZpZ2F0aW9uU3RhY2subGVuZ3RoIC0gMl07XG4gICAgLy8gVGhlIHJvb3QgcGFydCBpc24ndCBwYXJ0IG9mIHRoZSBuYXZpZ2F0aW9uIHN0YWNrIHNvIGhhbmRsZSBpdCBleHBsaWNpdGx5IGhlcmVcbiAgICBpZiAoIXRhcmdldFBhZ2UpIHtcbiAgICAgIHRhcmdldFBhZ2UgPSB0aGlzLmdldFJvb3RQYWdlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5uYXZpZ2F0ZVRvUGFnZShcbiAgICAgIHRhcmdldFBhZ2UsXG4gICAgICB0aGlzLmFjdGl2ZVBhZ2UsXG4gICAgICBOYXZpZ2F0aW9uRGlyZWN0aW9uLkJhY2t3YXJkcyxcbiAgICAgICEodGhpcy5jb25maWcgYXMgU2V0dGluZ3NQYW5lbENvbmZpZykucGFnZVRyYW5zaXRpb25BbmltYXRpb24sXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlcmUgYXJlIGFjdGl2ZSBzZXR0aW5ncyB3aXRoaW4gdGhlIHJvb3QgcGFnZSBvZiB0aGUgc2V0dGluZ3MgcGFuZWwuXG4gICAqIEFuIGFjdGl2ZSBzZXR0aW5nIGlzIGEgc2V0dGluZyB0aGF0IGlzIHZpc2libGUgYW5kIGVuYWJsZWQsIHdoaWNoIHRoZSB1c2VyIGNhbiBpbnRlcmFjdCB3aXRoLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGVyZSBhcmUgYWN0aXZlIHNldHRpbmdzLCBmYWxzZSBpZiB0aGUgcGFuZWwgaXMgZnVuY3Rpb25hbGx5IGVtcHR5IHRvIGEgdXNlclxuICAgKi9cbiAgcm9vdFBhZ2VIYXNBY3RpdmVTZXR0aW5ncygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5nZXRSb290UGFnZSgpLmhhc0FjdGl2ZVNldHRpbmdzKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGFsbCBjb25maWd1cmVkIHBhZ2VzXG4gICAqIEByZXR1cm5zIHtTZXR0aW5nc1BhbmVsUGFnZVtdfVxuICAgKi9cbiAgZ2V0UGFnZXMoKTogU2V0dGluZ3NQYW5lbFBhZ2VbXSB7XG4gICAgcmV0dXJuIDxTZXR0aW5nc1BhbmVsUGFnZVtdPnRoaXMuY29uZmlnLmNvbXBvbmVudHMuZmlsdGVyKGNvbXBvbmVudCA9PiBjb21wb25lbnQgaW5zdGFuY2VvZiBTZXR0aW5nc1BhbmVsUGFnZSk7XG4gIH1cblxuICBnZXQgb25TZXR0aW5nc1N0YXRlQ2hhbmdlZCgpOiBFdmVudDxTZXR0aW5nc1BhbmVsLCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5zZXR0aW5nc1BhbmVsRXZlbnRzLm9uU2V0dGluZ3NTdGF0ZUNoYW5nZWQuZ2V0RXZlbnQoKTtcbiAgfVxuXG4gIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgc3VwZXIucmVsZWFzZSgpO1xuICAgIGlmICh0aGlzLmhpZGVUaW1lb3V0KSB7XG4gICAgICB0aGlzLmhpZGVUaW1lb3V0LmNsZWFyKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gU3VwcG9ydCBhZGRpbmcgc2V0dGluZ3NQYW5lbFBhZ2VzIGFmdGVyIGluaXRpYWxpemF0aW9uXG4gIGFkZENvbXBvbmVudChjb21wb25lbnQ6IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+KSB7XG4gICAgaWYgKHRoaXMuZ2V0UGFnZXMoKS5sZW5ndGggPT09IDAgJiYgY29tcG9uZW50IGluc3RhbmNlb2YgU2V0dGluZ3NQYW5lbFBhZ2UpIHtcbiAgICAgIHRoaXMuYWN0aXZlUGFnZSA9IGNvbXBvbmVudDtcbiAgICB9XG4gICAgc3VwZXIuYWRkQ29tcG9uZW50KGNvbXBvbmVudCk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUFjdGl2ZVBhZ2VDbGFzcygpOiB2b2lkIHtcbiAgICB0aGlzLmdldFBhZ2VzKCkuZm9yRWFjaCgocGFnZTogU2V0dGluZ3NQYW5lbFBhZ2UpID0+IHtcbiAgICAgIGlmIChwYWdlID09PSB0aGlzLmFjdGl2ZVBhZ2UpIHtcbiAgICAgICAgcGFnZS5nZXREb21FbGVtZW50KCkuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoU2V0dGluZ3NQYW5lbC5DTEFTU19BQ1RJVkVfUEFHRSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnZS5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoU2V0dGluZ3NQYW5lbC5DTEFTU19BQ1RJVkVfUEFHRSkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSByZXNldE5hdmlnYXRpb24ocmVzZXROYXZpZ2F0aW9uT25TaG93OiBib29sZWFuKTogdm9pZCB7XG4gICAgY29uc3Qgc291cmNlUGFnZSA9IHRoaXMuZ2V0QWN0aXZlUGFnZSgpO1xuICAgIGNvbnN0IHJvb3RQYWdlID0gdGhpcy5nZXRSb290UGFnZSgpO1xuICAgIGlmIChzb3VyY2VQYWdlKSB7XG4gICAgICAvLyBTaW5jZSB0aGUgb25JbmFjdGl2ZUV2ZW50IHdhcyBhbHJlYWR5IGZpcmVkIGluIHRoZSBvbkhpZGUgd2UgbmVlZCB0byBzdXBwcmVzcyBpdCBoZXJlXG4gICAgICBpZiAoIXJlc2V0TmF2aWdhdGlvbk9uU2hvdykge1xuICAgICAgICBzb3VyY2VQYWdlLm9uSW5hY3RpdmVFdmVudCgpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm5hdmlnYXRpb25TdGFjayA9IFtdO1xuICAgIHRoaXMuYW5pbWF0ZU5hdmlnYXRpb24ocm9vdFBhZ2UsIHNvdXJjZVBhZ2UsIHJlc2V0TmF2aWdhdGlvbk9uU2hvdyk7XG4gICAgdGhpcy5hY3RpdmVQYWdlID0gcm9vdFBhZ2U7XG4gICAgdGhpcy51cGRhdGVBY3RpdmVQYWdlQ2xhc3MoKTtcbiAgfVxuXG4gIHByaXZhdGUgbmF2aWdhdGVUb1BhZ2UoXG4gICAgdGFyZ2V0UGFnZTogU2V0dGluZ3NQYW5lbFBhZ2UsXG4gICAgc291cmNlUGFnZTogU2V0dGluZ3NQYW5lbFBhZ2UsXG4gICAgZGlyZWN0aW9uOiBOYXZpZ2F0aW9uRGlyZWN0aW9uLFxuICAgIHNraXBBbmltYXRpb246IGJvb2xlYW4sXG4gICk6IHZvaWQge1xuICAgIHRoaXMuYWN0aXZlUGFnZSA9IHRhcmdldFBhZ2U7XG5cbiAgICBpZiAoZGlyZWN0aW9uID09PSBOYXZpZ2F0aW9uRGlyZWN0aW9uLkZvcndhcmRzKSB7XG4gICAgICB0aGlzLm5hdmlnYXRpb25TdGFjay5wdXNoKHRhcmdldFBhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5hdmlnYXRpb25TdGFjay5wb3AoKTtcbiAgICB9XG5cbiAgICB0aGlzLmFuaW1hdGVOYXZpZ2F0aW9uKHRhcmdldFBhZ2UsIHNvdXJjZVBhZ2UsIHNraXBBbmltYXRpb24pO1xuXG4gICAgdGhpcy51cGRhdGVBY3RpdmVQYWdlQ2xhc3MoKTtcbiAgICB0YXJnZXRQYWdlLm9uQWN0aXZlRXZlbnQoKTtcbiAgICBzb3VyY2VQYWdlLm9uSW5hY3RpdmVFdmVudCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB0YXJnZXRQYWdlXG4gICAqIEBwYXJhbSBzb3VyY2VQYWdlXG4gICAqIEBwYXJhbSBza2lwQW5pbWF0aW9uIFRoaXMgaXMganVzdCBhbiBpbnRlcm5hbCBmbGFnIGlmIHdlIHdhbnQgdG8gaGF2ZSBhbiBhbmltYXRpb24uIEl0IGlzIHNldCB0cnVlIHdoZW4gd2UgcmVzZXRcbiAgICogdGhlIG5hdmlnYXRpb24gd2l0aGluIHRoZSBvblNob3cgY2FsbGJhY2sgb2YgdGhlIHNldHRpbmdzUGFuZWwuIEluIHRoaXMgY2FzZSB3ZSBkb24ndCB3YW50IGFuIGFjdHVhbCBhbmltYXRpb24gYnV0XG4gICAqIHRoZSByZWNhbGN1bGF0aW9uIG9mIHRoZSBkaW1lbnNpb24gb2YgdGhlIHNldHRpbmdzUGFuZWwuXG4gICAqIFRoaXMgaXMgaW5kZXBlbmRlbnQgb2YgdGhlIHBhZ2VUcmFuc2l0aW9uQW5pbWF0aW9uIGZsYWcuXG4gICAqL1xuICBwcml2YXRlIGFuaW1hdGVOYXZpZ2F0aW9uKHRhcmdldFBhZ2U6IFNldHRpbmdzUGFuZWxQYWdlLCBzb3VyY2VQYWdlOiBTZXR0aW5nc1BhbmVsUGFnZSwgc2tpcEFuaW1hdGlvbjogYm9vbGVhbikge1xuICAgIGlmICghKHRoaXMuY29uZmlnIGFzIFNldHRpbmdzUGFuZWxDb25maWcpLnBhZ2VUcmFuc2l0aW9uQW5pbWF0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc2V0dGluZ3NQYW5lbERvbUVsZW1lbnQgPSB0aGlzLmdldERvbUVsZW1lbnQoKTtcbiAgICBjb25zdCBzZXR0aW5nc1BhbmVsSFRNTEVsZW1lbnQgPSB0aGlzLmdldERvbUVsZW1lbnQoKS5nZXQoMCk7XG5cbiAgICAvLyBnZXQgY3VycmVudCBkaW1lbnNpb25cbiAgICBjb25zdCBzZXR0aW5nc1BhbmVsV2lkdGggPSBzZXR0aW5nc1BhbmVsSFRNTEVsZW1lbnQuc2Nyb2xsV2lkdGg7XG4gICAgY29uc3Qgc2V0dGluZ3NQYW5lbEhlaWdodCA9IHNldHRpbmdzUGFuZWxIVE1MRWxlbWVudC5zY3JvbGxIZWlnaHQ7XG5cbiAgICAvLyBjYWxjdWxhdGUgdGFyZ2V0IHNpemUgb2YgdGhlIHNldHRpbmdzIHBhbmVsXG4gICAgc291cmNlUGFnZS5nZXREb21FbGVtZW50KCkuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5jc3MoeyB3aWR0aDogJycsIGhlaWdodDogJycgfSk7IC8vIGxldCBjc3MgYXV0byBzZXR0aW5ncyBraWNrIGluIGFnYWluXG5cbiAgICBjb25zdCB0YXJnZXRQYWdlSHRtbEVsZW1lbnQgPSB0YXJnZXRQYWdlLmdldERvbUVsZW1lbnQoKS5nZXQoMCk7XG4gICAgLy8gY2xvbmUgdGhlIHRhcmdldFBhZ2UgRE9NIGVsZW1lbnQgc28gdGhhdCB3ZSBjYW4gY2FsY3VsYXRlIHRoZSB3aWR0aCAvIGhlaWdodCBob3cgdGhleSB3aWxsIGJlIGFmdGVyXG4gICAgLy8gc3dpdGNoaW5nIHRoZSBwYWdlLiBXZSBhcmUgdXNpbmcgYSBjbG9uZSB0byBwcmV2ZW50IChtb3N0bHkgc3R5bGluZykgc2lkZS1lZmZlY3RzIG9uIHRoZSByZWFsIERPTSBlbGVtZW50XG4gICAgY29uc3QgY2xvbmUgPSB0YXJnZXRQYWdlSHRtbEVsZW1lbnQuY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxFbGVtZW50O1xuICAgIC8vIGFwcGVuZCB0byBwYXJlbnQgc28gd2UgZ2V0IHRoZSAncmVhbCcgc2l6ZVxuICAgIGNvbnN0IGNvbnRhaW5lcldyYXBwZXIgPSB0YXJnZXRQYWdlSHRtbEVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICBjb250YWluZXJXcmFwcGVyLmFwcGVuZENoaWxkKGNsb25lKTtcbiAgICAvLyBzZXQgY2xvbmUgdmlzaWJsZVxuICAgIGNsb25lLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG4gICAgLy8gY29sbGVjdCB0YXJnZXQgZGltZW5zaW9uXG4gICAgY29uc3QgdGFyZ2V0U2V0dGluZ3NQYW5lbFdpZHRoID0gc2V0dGluZ3NQYW5lbEhUTUxFbGVtZW50LnNjcm9sbFdpZHRoO1xuICAgIGNvbnN0IHRhcmdldFNldHRpbmdzUGFuZWxIZWlnaHQgPSBzZXR0aW5nc1BhbmVsSFRNTEVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuXG4gICAgLy8gcmVtb3ZlIGNsb25lIGZyb20gdGhlIERPTVxuICAgIGNsb25lLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoY2xvbmUpOyAvLyAucmVtb3ZlKCkgaXMgbm90IHdvcmtpbmcgaW4gSUVcbiAgICBzb3VyY2VQYWdlLmdldERvbUVsZW1lbnQoKS5jc3MoJ2Rpc3BsYXknLCAnJyk7XG5cbiAgICAvLyBzZXQgdGhlIHZhbHVlcyBiYWNrIHRvIHRoZSBjdXJyZW50IG9uZXMgdGhhdCB0aGUgYnJvd3NlciBhbmltYXRlcyBpdCAoYnJvd3NlcnMgZG9uJ3QgYW5pbWF0ZSAnYXV0bycgdmFsdWVzKVxuICAgIHNldHRpbmdzUGFuZWxEb21FbGVtZW50LmNzcyh7XG4gICAgICB3aWR0aDogc2V0dGluZ3NQYW5lbFdpZHRoICsgJ3B4JyxcbiAgICAgIGhlaWdodDogc2V0dGluZ3NQYW5lbEhlaWdodCArICdweCcsXG4gICAgfSk7XG5cbiAgICBpZiAoIXNraXBBbmltYXRpb24pIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gZm9yY2UgdGhlIGJyb3dzZXIgdG8gcmVmbG93IGJldHdlZW4gc2V0dGluZyB0aGUgd2lkdGggYW5kIGhlaWdodCB0aGF0IHdlIGFjdHVhbGx5IGdldCBhIGFuaW1hdGlvblxuICAgICAgdGhpcy5mb3JjZUJyb3dzZXJSZWZsb3coKTtcbiAgICB9XG5cbiAgICAvLyBzZXQgdGhlIHZhbHVlcyB0byB0aGUgdGFyZ2V0IGRpbWVuc2lvblxuICAgIHNldHRpbmdzUGFuZWxEb21FbGVtZW50LmNzcyh7XG4gICAgICB3aWR0aDogdGFyZ2V0U2V0dGluZ3NQYW5lbFdpZHRoICsgJ3B4JyxcbiAgICAgIGhlaWdodDogdGFyZ2V0U2V0dGluZ3NQYW5lbEhlaWdodCArICdweCcsXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGZvcmNlQnJvd3NlclJlZmxvdygpOiB2b2lkIHtcbiAgICAvLyBGb3JjZSB0aGUgYnJvd3NlciB0byByZWZsb3cgdGhlIGxheW91dFxuICAgIC8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3BhdWxpcmlzaC81ZDUyZmIwODFiMzU3MGM4MWUzYVxuICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmdldCgwKS5vZmZzZXRMZWZ0O1xuICB9XG5cbiAgLyoqXG4gICAqIEhhY2sgZm9yIElFICsgRmlyZWZveFxuICAgKiB3aGVuIHRoZSBzZXR0aW5ncyBwYW5lbCBmYWRlcyBvdXQgd2hpbGUgYW4gaXRlbSBvZiBhIHNlbGVjdCBib3ggaXMgc3RpbGwgaG92ZXJlZCwgdGhlIHNlbGVjdCBib3ggd2lsbCBub3QgZmFkZSBvdXRcbiAgICogd2hpbGUgdGhlIHNldHRpbmdzIHBhbmVsIGRvZXMuIFRoaXMgd291bGQgbGVhdmUgYSBmbG9hdGluZyBzZWxlY3QgYm94LCB3aGljaCBpcyBqdXN0IHdlaXJkXG4gICAqL1xuICBwcml2YXRlIGhpZGVIb3ZlcmVkU2VsZWN0Qm94ZXMoKTogdm9pZCB7XG4gICAgdGhpcy5nZXRDb21wdXRlZEl0ZW1zKCkuZm9yRWFjaCgoaXRlbTogU2V0dGluZ3NQYW5lbEl0ZW0pID0+IHtcbiAgICAgIGlmIChpdGVtLmlzQWN0aXZlKCkgJiYgKGl0ZW0gYXMgYW55KS5zZXR0aW5nIGluc3RhbmNlb2YgU2VsZWN0Qm94KSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdEJveCA9IChpdGVtIGFzIGFueSkuc2V0dGluZyBhcyBTZWxlY3RCb3g7XG4gICAgICAgIGNvbnN0IG9sZERpc3BsYXkgPSBzZWxlY3RCb3guZ2V0RG9tRWxlbWVudCgpLmNzcygnZGlzcGxheScpO1xuICAgICAgICBpZiAob2xkRGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgICAgICAgLy8gaWYgb2xkRGlzcGxheSBpcyBhbHJlYWR5ICdub25lJywgbm8gbmVlZCB0byBzZXQgdG8gJ25vbmUnIGFnYWluLiBJdCBjb3VsZCBsZWFkIHRvIHJhY2UgY29uZGl0aW9uXG4gICAgICAgICAgLy8gd2hlcmVpbiB0aGUgZGlzcGxheSBpcyBpcnJldmVyc2libHkgc2V0IHRvICdub25lJyB3aGVuIGJyb3dzZXIgdGFiL3dpbmRvdyBpcyBub3QgYWN0aXZlIGJlY2F1c2VcbiAgICAgICAgICAvLyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgaXMgZWl0aGVyIGRlbGF5ZWQgb3IgcGF1c2VkIGluIHNvbWUgYnJvd3NlcnMgaW4gaW5hY3RpdmUgc3RhdGVcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGluZyB0aGUgZGlzcGxheSB0byBub25lIG1hcmtzIHRoZSBzZWxlY3QtYm94IGFzIGluYWN0aXZlLCBzbyBpdCB3aWxsIGJlIGhpZGRlbiB3aXRoIHRoZSByZXN0XG4gICAgICAgIC8vIHdlIGp1c3QgaGF2ZSB0byBtYWtlIHN1cmUgdG8gcmVzZXQgdGhpcyBhcyBzb29uIGFzIHBvc3NpYmxlXG4gICAgICAgIHNlbGVjdEJveC5nZXREb21FbGVtZW50KCkuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgaWYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgc2VsZWN0Qm94LmdldERvbUVsZW1lbnQoKS5jc3MoJ2Rpc3BsYXknLCBvbGREaXNwbGF5KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJRTkgaGFzIG5vIHJlcXVlc3RBbmltYXRpb25GcmFtZSwgc2V0IHRoZSB2YWx1ZSBkaXJlY3RseS4gSXQgaGFzIG5vIG9wdGltaXphdGlvbiBhYm91dCBpZ25vcmluZyBET00tY2hhbmdlc1xuICAgICAgICAgIC8vIGJldHdlZW4gYW5pbWF0aW9uRnJhbWVzXG4gICAgICAgICAgc2VsZWN0Qm94LmdldERvbUVsZW1lbnQoKS5jc3MoJ2Rpc3BsYXknLCBvbGREaXNwbGF5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLy8gY29sbGVjdCBhbGwgaXRlbXMgZnJvbSBhbGwgcGFnZXMgKHNlZSBoaWRlSG92ZXJlZFNlbGVjdEJveGVzKVxuICBwcml2YXRlIGdldENvbXB1dGVkSXRlbXMoKTogU2V0dGluZ3NQYW5lbEl0ZW1bXSB7XG4gICAgY29uc3QgYWxsSXRlbXM6IFNldHRpbmdzUGFuZWxJdGVtW10gPSBbXTtcbiAgICBmb3IgKGxldCBwYWdlIG9mIHRoaXMuZ2V0UGFnZXMoKSkge1xuICAgICAgYWxsSXRlbXMucHVzaCguLi5wYWdlLmdldEl0ZW1zKCkpO1xuICAgIH1cbiAgICByZXR1cm4gYWxsSXRlbXM7XG4gIH1cblxuICBwcml2YXRlIGdldFJvb3RQYWdlKCk6IFNldHRpbmdzUGFuZWxQYWdlIHtcbiAgICByZXR1cm4gdGhpcy5nZXRQYWdlcygpWzBdO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uU2V0dGluZ3NTdGF0ZUNoYW5nZWRFdmVudCgpIHtcbiAgICB0aGlzLnNldHRpbmdzUGFuZWxFdmVudHMub25TZXR0aW5nc1N0YXRlQ2hhbmdlZC5kaXNwYXRjaCh0aGlzKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtDb250YWluZXIsIENvbnRhaW5lckNvbmZpZ30gZnJvbSAnLi9jb250YWluZXInO1xuaW1wb3J0IHtDb21wb25lbnQsIENvbXBvbmVudENvbmZpZ30gZnJvbSAnLi9jb21wb25lbnQnO1xuaW1wb3J0IHtFdmVudCwgRXZlbnREaXNwYXRjaGVyLCBOb0FyZ3N9IGZyb20gJy4uL2V2ZW50ZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBMYWJlbCwgTGFiZWxDb25maWcgfSBmcm9tICcuL2xhYmVsJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge1NlbGVjdEJveH0gZnJvbSAnLi9zZWxlY3Rib3gnO1xuaW1wb3J0IHtMaXN0Qm94fSBmcm9tICcuL2xpc3Rib3gnO1xuaW1wb3J0IHtWaWRlb1F1YWxpdHlTZWxlY3RCb3h9IGZyb20gJy4vdmlkZW9xdWFsaXR5c2VsZWN0Ym94JztcbmltcG9ydCB7QXVkaW9RdWFsaXR5U2VsZWN0Qm94fSBmcm9tICcuL2F1ZGlvcXVhbGl0eXNlbGVjdGJveCc7XG5pbXBvcnQge1BsYXliYWNrU3BlZWRTZWxlY3RCb3h9IGZyb20gJy4vcGxheWJhY2tzcGVlZHNlbGVjdGJveCc7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgTG9jYWxpemFibGVUZXh0IH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEFuIGl0ZW0gZm9yIGEge0BsaW5rIFNldHRpbmdzUGFuZWxQYWdlfSxcbiAqIENvbnRhaW5pbmcgYW4gb3B0aW9uYWwge0BsaW5rIExhYmVsfSBhbmQgYSBjb21wb25lbnQgdGhhdCBjb25maWd1cmVzIGEgc2V0dGluZy5cbiAqIElmIHRoZSBjb21wb25lbnRzIGlzIGEge0BsaW5rIFNlbGVjdEJveH0gaXQgd2lsbCBoYW5kbGUgdGhlIGxvZ2ljIG9mIGRpc3BsYXlpbmcgaXQgb3Igbm90XG4gKi9cbmV4cG9ydCBjbGFzcyBTZXR0aW5nc1BhbmVsSXRlbSBleHRlbmRzIENvbnRhaW5lcjxDb250YWluZXJDb25maWc+IHtcblxuICBwcml2YXRlIGxhYmVsOiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPjtcbiAgcHJpdmF0ZSBzZXR0aW5nOiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPjtcblxuICBwcml2YXRlIHNldHRpbmdzUGFuZWxJdGVtRXZlbnRzID0ge1xuICAgIG9uQWN0aXZlQ2hhbmdlZDogbmV3IEV2ZW50RGlzcGF0Y2hlcjxTZXR0aW5nc1BhbmVsSXRlbSwgTm9BcmdzPigpLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKGxhYmVsOiBMb2NhbGl6YWJsZVRleHQgfCBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPiwgc2V0dGluZzogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4sIGNvbmZpZzogQ29udGFpbmVyQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5zZXR0aW5nID0gc2V0dGluZztcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktc2V0dGluZ3MtcGFuZWwtaXRlbScsXG4gICAgICByb2xlOiAnbWVudWl0ZW0nLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcblxuICAgIGlmIChsYWJlbCAhPT0gbnVsbCkge1xuICAgICAgaWYgKGxhYmVsIGluc3RhbmNlb2YgQ29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGFiZWwgPSBuZXcgTGFiZWwoeyB0ZXh0OiBsYWJlbCwgZm9yOiB0aGlzLnNldHRpbmcuZ2V0Q29uZmlnKCkuaWQgfSBhcyBMYWJlbENvbmZpZyk7XG4gICAgICB9XG4gICAgICB0aGlzLmFkZENvbXBvbmVudCh0aGlzLmxhYmVsKTtcbiAgICB9XG5cbiAgICB0aGlzLmFkZENvbXBvbmVudCh0aGlzLnNldHRpbmcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc2V0dGluZyBpbnN0YW5jZW9mIFNlbGVjdEJveCB8fCB0aGlzLnNldHRpbmcgaW5zdGFuY2VvZiBMaXN0Qm94KSB7XG4gICAgICBsZXQgaGFuZGxlQ29uZmlnSXRlbUNoYW5nZWQgPSAoKSA9PiB7XG4gICAgICAgIGlmICghKHRoaXMuc2V0dGluZyBpbnN0YW5jZW9mIFNlbGVjdEJveCkgJiYgISh0aGlzLnNldHRpbmcgaW5zdGFuY2VvZiBMaXN0Qm94KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgbWluaW11bSBudW1iZXIgb2YgaXRlbXMgdGhhdCBtdXN0IGJlIGF2YWlsYWJsZSBmb3IgdGhlIHNldHRpbmcgdG8gYmUgZGlzcGxheWVkXG4gICAgICAgIC8vIEJ5IGRlZmF1bHQsIGF0IGxlYXN0IHR3byBpdGVtcyBtdXN0IGJlIGF2YWlsYWJsZSwgZWxzZSBhIHNlbGVjdGlvbiBpcyBub3QgcG9zc2libGVcbiAgICAgICAgbGV0IG1pbkl0ZW1zVG9EaXNwbGF5ID0gMjtcbiAgICAgICAgLy8gQXVkaW8vdmlkZW8gcXVhbGl0eSBzZWxlY3QgYm94ZXMgY29udGFpbiBhbiBhZGRpdGlvbmFsICdhdXRvJyBtb2RlLCB3aGljaCBpbiBjb21iaW5hdGlvbiB3aXRoIGEgc2luZ2xlXG4gICAgICAgIC8vIGF2YWlsYWJsZSBxdWFsaXR5IGFsc28gZG9lcyBub3QgbWFrZSBzZW5zZVxuICAgICAgICBpZiAoKHRoaXMuc2V0dGluZyBpbnN0YW5jZW9mIFZpZGVvUXVhbGl0eVNlbGVjdEJveCAmJiB0aGlzLnNldHRpbmcuaGFzQXV0b0l0ZW0oKSlcbiAgICAgICAgICB8fCB0aGlzLnNldHRpbmcgaW5zdGFuY2VvZiBBdWRpb1F1YWxpdHlTZWxlY3RCb3gpIHtcbiAgICAgICAgICBtaW5JdGVtc1RvRGlzcGxheSA9IDM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zZXR0aW5nLml0ZW1Db3VudCgpIDwgbWluSXRlbXNUb0Rpc3BsYXkpIHtcbiAgICAgICAgICAvLyBIaWRlIHRoZSBzZXR0aW5nIGlmIG5vIG1lYW5pbmdmdWwgY2hvaWNlIGlzIGF2YWlsYWJsZVxuICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2V0dGluZyBpbnN0YW5jZW9mIFBsYXliYWNrU3BlZWRTZWxlY3RCb3hcbiAgICAgICAgICAmJiAhdWltYW5hZ2VyLmdldENvbmZpZygpLnBsYXliYWNrU3BlZWRTZWxlY3Rpb25FbmFibGVkKSB7XG4gICAgICAgICAgLy8gSGlkZSB0aGUgUGxheWJhY2tTcGVlZFNlbGVjdEJveCBpZiBkaXNhYmxlZCBpbiBjb25maWdcbiAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFZpc2liaWxpdHkgbWlnaHQgaGF2ZSBjaGFuZ2VkIGFuZCB0aGVyZWZvcmUgdGhlIGFjdGl2ZSBzdGF0ZSBtaWdodCBoYXZlIGNoYW5nZWQgc28gd2UgZmlyZSB0aGUgZXZlbnRcbiAgICAgICAgLy8gVE9ETyBmaXJlIG9ubHkgd2hlbiBzdGF0ZSBoYXMgcmVhbGx5IGNoYW5nZWQgKGUuZy4gY2hlY2sgaWYgdmlzaWJpbGl0eSBoYXMgcmVhbGx5IGNoYW5nZWQpXG4gICAgICAgIHRoaXMub25BY3RpdmVDaGFuZ2VkRXZlbnQoKTtcblxuICAgICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hdHRyKCdhcmlhLWhhc3BvcHVwJywgJ3RydWUnKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuc2V0dGluZy5vbkl0ZW1BZGRlZC5zdWJzY3JpYmUoaGFuZGxlQ29uZmlnSXRlbUNoYW5nZWQpO1xuICAgICAgdGhpcy5zZXR0aW5nLm9uSXRlbVJlbW92ZWQuc3Vic2NyaWJlKGhhbmRsZUNvbmZpZ0l0ZW1DaGFuZ2VkKTtcblxuICAgICAgLy8gSW5pdGlhbGl6ZSBoaWRkZW4gc3RhdGVcbiAgICAgIGhhbmRsZUNvbmZpZ0l0ZW1DaGFuZ2VkKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIHNldHRpbmdzIHBhbmVsIGl0ZW0gaXMgYWN0aXZlLCBpLmUuIHZpc2libGUgYW5kIGVuYWJsZWQgYW5kIGEgdXNlciBjYW4gaW50ZXJhY3Qgd2l0aCBpdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIHBhbmVsIGlzIGFjdGl2ZSwgZWxzZSBmYWxzZVxuICAgKi9cbiAgaXNBY3RpdmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXNTaG93bigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uQWN0aXZlQ2hhbmdlZEV2ZW50KCkge1xuICAgIHRoaXMuc2V0dGluZ3NQYW5lbEl0ZW1FdmVudHMub25BY3RpdmVDaGFuZ2VkLmRpc3BhdGNoKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgJ2FjdGl2ZScgc3RhdGUgb2YgdGhpcyBpdGVtIGNoYW5nZXMuXG4gICAqIEBzZWUgI2lzQWN0aXZlXG4gICAqIEByZXR1cm5zIHtFdmVudDxTZXR0aW5nc1BhbmVsSXRlbSwgTm9BcmdzPn1cbiAgICovXG4gIGdldCBvbkFjdGl2ZUNoYW5nZWQoKTogRXZlbnQ8U2V0dGluZ3NQYW5lbEl0ZW0sIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLnNldHRpbmdzUGFuZWxJdGVtRXZlbnRzLm9uQWN0aXZlQ2hhbmdlZC5nZXRFdmVudCgpO1xuICB9XG59XG4iLCJpbXBvcnQge0NvbnRhaW5lciwgQ29udGFpbmVyQ29uZmlnfSBmcm9tICcuL2NvbnRhaW5lcic7XG5pbXBvcnQge1NldHRpbmdzUGFuZWxJdGVtfSBmcm9tICcuL3NldHRpbmdzcGFuZWxpdGVtJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge0V2ZW50LCBFdmVudERpc3BhdGNoZXIsIE5vQXJnc30gZnJvbSAnLi4vZXZlbnRkaXNwYXRjaGVyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBCcm93c2VyVXRpbHMgfSBmcm9tICcuLi9icm93c2VydXRpbHMnO1xuXG4vKipcbiAqIEEgcGFuZWwgY29udGFpbmluZyBhIGxpc3Qgb2Yge0BsaW5rIFNldHRpbmdzUGFuZWxJdGVtIGl0ZW1zfSB0aGF0IHJlcHJlc2VudCBsYWJlbGxlZCBzZXR0aW5ncy5cbiAqL1xuZXhwb3J0IGNsYXNzIFNldHRpbmdzUGFuZWxQYWdlIGV4dGVuZHMgQ29udGFpbmVyPENvbnRhaW5lckNvbmZpZz4ge1xuXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENMQVNTX0xBU1QgPSAnbGFzdCc7XG5cbiAgcHJpdmF0ZSBzZXR0aW5nc1BhbmVsUGFnZUV2ZW50cyA9IHtcbiAgICBvblNldHRpbmdzU3RhdGVDaGFuZ2VkOiBuZXcgRXZlbnREaXNwYXRjaGVyPFNldHRpbmdzUGFuZWxQYWdlLCBOb0FyZ3M+KCksXG4gICAgb25BY3RpdmU6IG5ldyBFdmVudERpc3BhdGNoZXI8U2V0dGluZ3NQYW5lbFBhZ2UsIE5vQXJncz4oKSxcbiAgICBvbkluYWN0aXZlOiBuZXcgRXZlbnREaXNwYXRjaGVyPFNldHRpbmdzUGFuZWxQYWdlLCBOb0FyZ3M+KCksXG4gIH07XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBDb250YWluZXJDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnPENvbnRhaW5lckNvbmZpZz4oY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXNldHRpbmdzLXBhbmVsLXBhZ2UnLFxuICAgICAgcm9sZTogJ21lbnUnLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICAvLyBGaXJlIGV2ZW50IHdoZW4gdGhlIHN0YXRlIG9mIGEgc2V0dGluZ3MtaXRlbSBoYXMgY2hhbmdlZFxuICAgIGxldCBzZXR0aW5nc1N0YXRlQ2hhbmdlZEhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICB0aGlzLm9uU2V0dGluZ3NTdGF0ZUNoYW5nZWRFdmVudCgpO1xuXG4gICAgICAvLyBBdHRhY2ggbWFya2VyIGNsYXNzIHRvIGxhc3QgdmlzaWJsZSBpdGVtXG4gICAgICBsZXQgbGFzdFNob3duSXRlbSA9IG51bGw7XG4gICAgICBmb3IgKGxldCBjb21wb25lbnQgb2YgdGhpcy5nZXRJdGVtcygpKSB7XG4gICAgICAgIGNvbXBvbmVudC5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoU2V0dGluZ3NQYW5lbFBhZ2UuQ0xBU1NfTEFTVCkpO1xuICAgICAgICBpZiAoY29tcG9uZW50LmlzU2hvd24oKSkge1xuICAgICAgICAgIGxhc3RTaG93bkl0ZW0gPSBjb21wb25lbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsYXN0U2hvd25JdGVtKSB7XG4gICAgICAgIGxhc3RTaG93bkl0ZW0uZ2V0RG9tRWxlbWVudCgpLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKFNldHRpbmdzUGFuZWxQYWdlLkNMQVNTX0xBU1QpKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGZvciAobGV0IGNvbXBvbmVudCBvZiB0aGlzLmdldEl0ZW1zKCkpIHtcbiAgICAgIGNvbXBvbmVudC5vbkFjdGl2ZUNoYW5nZWQuc3Vic2NyaWJlKHNldHRpbmdzU3RhdGVDaGFuZ2VkSGFuZGxlcik7XG4gICAgfVxuICB9XG5cbiAgaGFzQWN0aXZlU2V0dGluZ3MoKTogYm9vbGVhbiB7XG4gICAgZm9yIChsZXQgY29tcG9uZW50IG9mIHRoaXMuZ2V0SXRlbXMoKSkge1xuICAgICAgaWYgKGNvbXBvbmVudC5pc0FjdGl2ZSgpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGdldEl0ZW1zKCk6IFNldHRpbmdzUGFuZWxJdGVtW10ge1xuICAgIHJldHVybiA8U2V0dGluZ3NQYW5lbEl0ZW1bXT50aGlzLmNvbmZpZy5jb21wb25lbnRzLmZpbHRlcihjb21wb25lbnQgPT4gY29tcG9uZW50IGluc3RhbmNlb2YgU2V0dGluZ3NQYW5lbEl0ZW0pO1xuICB9XG5cbiAgb25TZXR0aW5nc1N0YXRlQ2hhbmdlZEV2ZW50KCkge1xuICAgIHRoaXMuc2V0dGluZ3NQYW5lbFBhZ2VFdmVudHMub25TZXR0aW5nc1N0YXRlQ2hhbmdlZC5kaXNwYXRjaCh0aGlzKTtcbiAgfVxuXG4gIGdldCBvblNldHRpbmdzU3RhdGVDaGFuZ2VkKCk6IEV2ZW50PFNldHRpbmdzUGFuZWxQYWdlLCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5zZXR0aW5nc1BhbmVsUGFnZUV2ZW50cy5vblNldHRpbmdzU3RhdGVDaGFuZ2VkLmdldEV2ZW50KCk7XG4gIH1cblxuICBvbkFjdGl2ZUV2ZW50KCkge1xuICAgIGNvbnN0IGFjdGl2ZUl0ZW1zID0gdGhpcy5nZXRJdGVtcygpLmZpbHRlcigoaXRlbSkgPT4gaXRlbS5pc0FjdGl2ZSgpKTtcblxuICAgIHRoaXMuc2V0dGluZ3NQYW5lbFBhZ2VFdmVudHMub25BY3RpdmUuZGlzcGF0Y2godGhpcyk7XG4gICAgLy8gRGlzYWJsZSBmb2N1cyBmb3IgaU9TIGFuZCBpUGFkT1MgMTMuIFRoZXkgb3BlbiBzZWxlY3QgYm94ZXMgYXV0b21hdGljYWxseSBvbiBmb2N1cyBhbmQgd2Ugd2FudCB0byBhdm9pZCB0aGF0LlxuICAgIGlmIChhY3RpdmVJdGVtcy5sZW5ndGggPiAwICYmICFCcm93c2VyVXRpbHMuaXNJT1MgJiYgIShCcm93c2VyVXRpbHMuaXNNYWNJbnRlbCAmJiBCcm93c2VyVXRpbHMuaXNUb3VjaFN1cHBvcnRlZCkpIHtcbiAgICAgIGFjdGl2ZUl0ZW1zWzBdLmdldERvbUVsZW1lbnQoKS5mb2N1c1RvRmlyc3RJbnB1dCgpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBvbkFjdGl2ZSgpOiBFdmVudDxTZXR0aW5nc1BhbmVsUGFnZSwgTm9BcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuc2V0dGluZ3NQYW5lbFBhZ2VFdmVudHMub25BY3RpdmUuZ2V0RXZlbnQoKTtcbiAgfVxuXG4gIG9uSW5hY3RpdmVFdmVudCgpIHtcbiAgICB0aGlzLnNldHRpbmdzUGFuZWxQYWdlRXZlbnRzLm9uSW5hY3RpdmUuZGlzcGF0Y2godGhpcyk7XG4gIH1cblxuICBnZXQgb25JbmFjdGl2ZSgpOiBFdmVudDxTZXR0aW5nc1BhbmVsUGFnZSwgTm9BcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuc2V0dGluZ3NQYW5lbFBhZ2VFdmVudHMub25JbmFjdGl2ZS5nZXRFdmVudCgpO1xuICB9XG59XG4iLCJpbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHtTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckJ1dHRvbiwgU2V0dGluZ3NQYW5lbFBhZ2VOYXZpZ2F0b3JDb25maWd9IGZyb20gJy4vc2V0dGluZ3NwYW5lbHBhZ2VuYXZpZ2F0b3JidXR0b24nO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcblxuZXhwb3J0IGNsYXNzIFNldHRpbmdzUGFuZWxQYWdlQmFja0J1dHRvbiBleHRlbmRzIFNldHRpbmdzUGFuZWxQYWdlTmF2aWdhdG9yQnV0dG9uIHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFNldHRpbmdzUGFuZWxQYWdlTmF2aWdhdG9yQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktc2V0dGluZ3NwYW5lbHBhZ2ViYWNrYnV0dG9uJyxcbiAgICAgIHRleHQ6ICdiYWNrJyxcbiAgICB9IGFzIFNldHRpbmdzUGFuZWxQYWdlTmF2aWdhdG9yQ29uZmlnLCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLnBvcFBhZ2UoKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHtCdXR0b24sIEJ1dHRvbkNvbmZpZ30gZnJvbSAnLi9idXR0b24nO1xuaW1wb3J0IHtTZXR0aW5nc1BhbmVsfSBmcm9tICcuL3NldHRpbmdzcGFuZWwnO1xuaW1wb3J0IHtTZXR0aW5nc1BhbmVsUGFnZX0gZnJvbSAnLi9zZXR0aW5nc3BhbmVscGFnZSc7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi91aW1hbmFnZXInO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIGZvciBhIHtAbGluayBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckJ1dHRvbn1cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckNvbmZpZyBleHRlbmRzIEJ1dHRvbkNvbmZpZyB7XG4gIC8qKlxuICAgKiBDb250YWluZXIgYFNldHRpbmdzUGFuZWxgIHdoZXJlIHRoZSBuYXZpZ2F0aW9uIHRha2VzIHBsYWNlXG4gICAqL1xuICBjb250YWluZXI6IFNldHRpbmdzUGFuZWw7XG4gIC8qKlxuICAgKiBQYWdlIHdoZXJlIHRoZSBidXR0b24gc2hvdWxkIG5hdmlnYXRlIHRvXG4gICAqIElmIGVtcHR5IGl0IHdpbGwgbmF2aWdhdGUgdG8gdGhlIHJvb3QgcGFnZSAobm90IGludGVuZGVkIHRvIHVzZSBhcyBuYXZpZ2F0ZSBiYWNrIGJlaGF2aW9yKVxuICAgKi9cbiAgdGFyZ2V0UGFnZT86IFNldHRpbmdzUGFuZWxQYWdlO1xuXG4gIC8qKlxuICAgKiBXQ0FHMjAgc3RhbmRhcmQ6IEVzdGFibGlzaGVzIHJlbGF0aW9uc2hpcHMgYmV0d2VlbiBvYmplY3RzIGFuZCB0aGVpciBsYWJlbChzKVxuICAgKi9cbiAgYXJpYUxhYmVsbGVkQnk/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQ2FuIGJlIHVzZWQgdG8gbmF2aWdhdGUgYmV0d2VlbiBTZXR0aW5nc1BhbmVsUGFnZXNcbiAqXG4gKiBFeGFtcGxlOlxuICogIGxldCBzZXR0aW5nUGFuZWxOYXZpZ2F0aW9uQnV0dG9uID0gbmV3IFNldHRpbmdzUGFuZWxQYWdlTmF2aWdhdG9yQnV0dG9uKHtcbiAqICAgIGNvbnRhaW5lcjogc2V0dGluZ3NQYW5lbCxcbiAqICAgIHRhcmdldFBhZ2U6IHNldHRpbmdzUGFuZWxQYWdlLFxuICogIH0pO1xuICpcbiAqICBzZXR0aW5nc1BhbmVsUGFnZS5hZGRDb21wb25lbnQoc2V0dGluZ1BhbmVsTmF2aWdhdGlvbkJ1dHRvbik7XG4gKlxuICogRG9uJ3QgZm9yZ2V0IHRvIGFkZCB0aGUgc2V0dGluZ1BhbmVsTmF2aWdhdGlvbkJ1dHRvbiB0byB0aGUgc2V0dGluZ3NQYW5lbFBhZ2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckJ1dHRvbiBleHRlbmRzIEJ1dHRvbjxTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckNvbmZpZz4ge1xuICBwcml2YXRlIHJlYWRvbmx5IGNvbnRhaW5lcjogU2V0dGluZ3NQYW5lbDtcbiAgcHJpdmF0ZSByZWFkb25seSB0YXJnZXRQYWdlPzogU2V0dGluZ3NQYW5lbFBhZ2U7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge30gYXMgU2V0dGluZ3NQYW5lbFBhZ2VOYXZpZ2F0b3JDb25maWcsIHRoaXMuY29uZmlnKTtcblxuICAgIHRoaXMuY29udGFpbmVyID0gKHRoaXMuY29uZmlnIGFzIFNldHRpbmdzUGFuZWxQYWdlTmF2aWdhdG9yQ29uZmlnKS5jb250YWluZXI7XG4gICAgdGhpcy50YXJnZXRQYWdlID0gKHRoaXMuY29uZmlnIGFzIFNldHRpbmdzUGFuZWxQYWdlTmF2aWdhdG9yQ29uZmlnKS50YXJnZXRQYWdlO1xuICB9XG5cbiAgLyoqXG4gICAqIG5hdmlnYXRlIG9uZSBsZXZlbCBiYWNrXG4gICAqL1xuICBwb3BQYWdlKCkge1xuICAgIHRoaXMuY29udGFpbmVyLnBvcFNldHRpbmdzUGFuZWxQYWdlKCk7XG4gIH1cblxuICAvKipcbiAgICogbmF2aWdhdGUgdG8gdGhlIHRhcmdldCBwYWdlXG4gICAqL1xuICBwdXNoVGFyZ2V0UGFnZSgpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5zZXRBY3RpdmVQYWdlKHRoaXMudGFyZ2V0UGFnZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge1NldHRpbmdzUGFuZWxQYWdlTmF2aWdhdG9yQnV0dG9uLCBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckNvbmZpZ30gZnJvbSAnLi9zZXR0aW5nc3BhbmVscGFnZW5hdmlnYXRvcmJ1dHRvbic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuZXhwb3J0IGNsYXNzIFNldHRpbmdzUGFuZWxQYWdlT3BlbkJ1dHRvbiBleHRlbmRzIFNldHRpbmdzUGFuZWxQYWdlTmF2aWdhdG9yQnV0dG9uIHtcbiAgY29uc3RydWN0b3IoY29uZmlnOiBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXNldHRpbmdzcGFuZWxwYWdlb3BlbmJ1dHRvbicsXG4gICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcignb3BlbicpLFxuICAgICAgcm9sZTogJ21lbnVpdGVtJyxcbiAgICB9IGFzIFNldHRpbmdzUGFuZWxQYWdlTmF2aWdhdG9yQ29uZmlnLCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5nZXREb21FbGVtZW50KCkuYXR0cignYXJpYS1oYXNwb3B1cCcsICd0cnVlJyk7XG4gICAgdGhpcy5nZXREb21FbGVtZW50KCkuYXR0cignYXJpYS1vd25zJywgdGhpcy5jb25maWcudGFyZ2V0UGFnZS5nZXRDb25maWcoKS5pZCk7XG5cbiAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMucHVzaFRhcmdldFBhZ2UoKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHtUb2dnbGVCdXR0b24sIFRvZ2dsZUJ1dHRvbkNvbmZpZ30gZnJvbSAnLi90b2dnbGVidXR0b24nO1xuaW1wb3J0IHtTZXR0aW5nc1BhbmVsfSBmcm9tICcuL3NldHRpbmdzcGFuZWwnO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7Q29tcG9uZW50LCBDb21wb25lbnRDb25maWd9IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCB7QXJyYXlVdGlsc30gZnJvbSAnLi4vYXJyYXl1dGlscyc7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgdGhlIHtAbGluayBTZXR0aW5nc1RvZ2dsZUJ1dHRvbn0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2V0dGluZ3NUb2dnbGVCdXR0b25Db25maWcgZXh0ZW5kcyBUb2dnbGVCdXR0b25Db25maWcge1xuICAvKipcbiAgICogVGhlIHNldHRpbmdzIHBhbmVsIHdob3NlIHZpc2liaWxpdHkgdGhlIGJ1dHRvbiBzaG91bGQgdG9nZ2xlLlxuICAgKi9cbiAgc2V0dGluZ3NQYW5lbDogU2V0dGluZ3NQYW5lbDtcblxuICAvKipcbiAgICogRGVjaWRlcyBpZiB0aGUgYnV0dG9uIHNob3VsZCBiZSBhdXRvbWF0aWNhbGx5IGhpZGRlbiB3aGVuIHRoZSBzZXR0aW5ncyBwYW5lbCBkb2VzIG5vdCBjb250YWluIGFueSBhY3RpdmUgc2V0dGluZ3MuXG4gICAqIERlZmF1bHQ6IHRydWVcbiAgICovXG4gIGF1dG9IaWRlV2hlbk5vQWN0aXZlU2V0dGluZ3M/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEEgYnV0dG9uIHRoYXQgdG9nZ2xlcyB2aXNpYmlsaXR5IG9mIGEgc2V0dGluZ3MgcGFuZWwuXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXR0aW5nc1RvZ2dsZUJ1dHRvbiBleHRlbmRzIFRvZ2dsZUJ1dHRvbjxTZXR0aW5nc1RvZ2dsZUJ1dHRvbkNvbmZpZz4ge1xuXG4gIHByaXZhdGUgdmlzaWJsZVNldHRpbmdzUGFuZWxzOiBTZXR0aW5nc1BhbmVsW10gPSBbXTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFNldHRpbmdzVG9nZ2xlQnV0dG9uQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIGlmICghY29uZmlnLnNldHRpbmdzUGFuZWwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgU2V0dGluZ3NQYW5lbCBpcyBtaXNzaW5nJyk7XG4gICAgfVxuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1zZXR0aW5nc3RvZ2dsZWJ1dHRvbicsXG4gICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3MnKSxcbiAgICAgIHNldHRpbmdzUGFuZWw6IG51bGwsXG4gICAgICBhdXRvSGlkZVdoZW5Ob0FjdGl2ZVNldHRpbmdzOiB0cnVlLFxuICAgICAgcm9sZTogJ3BvcC11cCBidXR0b24nLFxuICAgIH0sIDxTZXR0aW5nc1RvZ2dsZUJ1dHRvbkNvbmZpZz50aGlzLmNvbmZpZyk7XG5cbiAgICAvKipcbiAgICAgKiBXQ0FHMjAgc3RhbmRhcmQgZGVmaW5lcyB3aGljaCBwb3B1cCBtZW51IChlbGVtZW50IGlkKSBpcyBvd25lZCBieSB0aGUgYnV0dG9uXG4gICAgICovXG4gICAgdGhpcy5nZXREb21FbGVtZW50KCkuYXR0cignYXJpYS1vd25zJywgY29uZmlnLnNldHRpbmdzUGFuZWwuZ2V0QWN0aXZlUGFnZSgpLmdldENvbmZpZygpLmlkKTtcblxuICAgIC8qKlxuICAgICAqIFdDQUcyMCBzdGFuZGFyZCBkZWZpbmVzIHRoYXQgYSBidXR0b24gaGFzIGEgcG9wdXAgbWVudSBib3VuZCB0byBpdFxuICAgICAqL1xuICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmF0dHIoJ2FyaWEtaGFzcG9wdXAnLCAndHJ1ZScpO1xuXG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbGV0IGNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG4gICAgbGV0IHNldHRpbmdzUGFuZWwgPSBjb25maWcuc2V0dGluZ3NQYW5lbDtcblxuICAgIHRoaXMub25DbGljay5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgLy8gb25seSBoaWRlIG90aGVyIGBTZXR0aW5nc1BhbmVsYHMgaWYgYSBuZXcgb25lIHdpbGwgYmUgb3BlbmVkXG4gICAgICBpZiAoIXNldHRpbmdzUGFuZWwuaXNTaG93bigpKSB7XG4gICAgICAgIC8vIEhpZGUgYWxsIG9wZW4gU2V0dGluZ3NQYW5lbHMgYmVmb3JlIG9wZW5pbmcgdGhpcyBidXR0b24ncyBwYW5lbFxuICAgICAgICAvLyAoV2UgbmVlZCB0byBpdGVyYXRlIGEgY29weSBiZWNhdXNlIGhpZGluZyB0aGVtIHdpbGwgYXV0b21hdGljYWxseSByZW1vdmUgdGhlbXNlbHZlcyBmcm9tIHRoZSBhcnJheVxuICAgICAgICAvLyBkdWUgdG8gdGhlIHN1YnNjcmliZU9uY2UgYWJvdmUpXG4gICAgICAgIHRoaXMudmlzaWJsZVNldHRpbmdzUGFuZWxzLnNsaWNlKCkuZm9yRWFjaChzZXR0aW5nc1BhbmVsID0+IHNldHRpbmdzUGFuZWwuaGlkZSgpKTtcbiAgICAgIH1cbiAgICAgIHNldHRpbmdzUGFuZWwudG9nZ2xlSGlkZGVuKCk7XG4gICAgfSk7XG4gICAgc2V0dGluZ3NQYW5lbC5vblNob3cuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIC8vIFNldCB0b2dnbGUgc3RhdHVzIHRvIG9uIHdoZW4gdGhlIHNldHRpbmdzIHBhbmVsIHNob3dzXG4gICAgICB0aGlzLm9uKCk7XG4gICAgfSk7XG4gICAgc2V0dGluZ3NQYW5lbC5vbkhpZGUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIC8vIFNldCB0b2dnbGUgc3RhdHVzIHRvIG9mZiB3aGVuIHRoZSBzZXR0aW5ncyBwYW5lbCBoaWRlc1xuICAgICAgdGhpcy5vZmYoKTtcbiAgICB9KTtcblxuICAgIC8vIEVuc3VyZSB0aGF0IG9ubHkgb25lIGBTZXR0aW5nUGFuZWxgIGlzIHZpc2libGUgYXQgb25jZVxuICAgIC8vIEtlZXAgdHJhY2sgb2Ygc2hvd24gU2V0dGluZ3NQYW5lbHNcbiAgICB1aW1hbmFnZXIub25Db21wb25lbnRTaG93LnN1YnNjcmliZSgoc2VuZGVyOiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPikgPT4ge1xuICAgICAgaWYgKHNlbmRlciBpbnN0YW5jZW9mIFNldHRpbmdzUGFuZWwpIHtcbiAgICAgICAgdGhpcy52aXNpYmxlU2V0dGluZ3NQYW5lbHMucHVzaChzZW5kZXIpO1xuICAgICAgICBzZW5kZXIub25IaWRlLnN1YnNjcmliZU9uY2UoKCkgPT4gQXJyYXlVdGlscy5yZW1vdmUodGhpcy52aXNpYmxlU2V0dGluZ3NQYW5lbHMsIHNlbmRlcikpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gSGFuZGxlIGF1dG9tYXRpYyBoaWRpbmcgb2YgdGhlIGJ1dHRvbiBpZiB0aGVyZSBhcmUgbm8gc2V0dGluZ3MgZm9yIHRoZSB1c2VyIHRvIGludGVyYWN0IHdpdGhcbiAgICBpZiAoY29uZmlnLmF1dG9IaWRlV2hlbk5vQWN0aXZlU2V0dGluZ3MpIHtcbiAgICAgIC8vIFNldHVwIGhhbmRsZXIgdG8gc2hvdy9oaWRlIGJ1dHRvbiB3aGVuIHRoZSBzZXR0aW5ncyBjaGFuZ2VcbiAgICAgIGxldCBzZXR0aW5nc1BhbmVsSXRlbXNDaGFuZ2VkSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgaWYgKHNldHRpbmdzUGFuZWwucm9vdFBhZ2VIYXNBY3RpdmVTZXR0aW5ncygpKSB7XG4gICAgICAgICAgaWYgKHRoaXMuaXNIaWRkZW4oKSkge1xuICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0aGlzLmlzU2hvd24oKSkge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgLy8gV2lyZSB0aGUgaGFuZGxlciB0byB0aGUgZXZlbnRcbiAgICAgIHNldHRpbmdzUGFuZWwub25TZXR0aW5nc1N0YXRlQ2hhbmdlZC5zdWJzY3JpYmUoc2V0dGluZ3NQYW5lbEl0ZW1zQ2hhbmdlZEhhbmRsZXIpO1xuICAgICAgLy8gQ2FsbCBoYW5kbGVyIGZvciBmaXJzdCBpbml0IGF0IHN0YXJ0dXBcbiAgICAgIHNldHRpbmdzUGFuZWxJdGVtc0NoYW5nZWRIYW5kbGVyKCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge0NvbXBvbmVudCwgQ29tcG9uZW50Q29uZmlnfSBmcm9tICcuL2NvbXBvbmVudCc7XG5cbi8qKlxuICogQSBkdW1teSBjb21wb25lbnQgdGhhdCBqdXN0IHJlc2VydmVzIHNvbWUgc3BhY2UgYW5kIGRvZXMgbm90aGluZyBlbHNlLlxuICovXG5leHBvcnQgY2xhc3MgU3BhY2VyIGV4dGVuZHMgQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4ge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29tcG9uZW50Q29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1zcGFjZXInLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG5cbiAgcHJvdGVjdGVkIG9uU2hvd0V2ZW50KCk6IHZvaWQge1xuICAgIC8vIGRpc2FibGUgZXZlbnQgZmlyaW5nIGJ5IG92ZXJ3cml0aW5nIGFuZCBub3QgY2FsbGluZyBzdXBlclxuICB9XG5cbiAgcHJvdGVjdGVkIG9uSGlkZUV2ZW50KCk6IHZvaWQge1xuICAgIC8vIGRpc2FibGUgZXZlbnQgZmlyaW5nIGJ5IG92ZXJ3cml0aW5nIGFuZCBub3QgY2FsbGluZyBzdXBlclxuICB9XG5cbiAgcHJvdGVjdGVkIG9uSG92ZXJDaGFuZ2VkRXZlbnQoaG92ZXJlZDogYm9vbGVhbik6IHZvaWQge1xuICAgIC8vIGRpc2FibGUgZXZlbnQgZmlyaW5nIGJ5IG92ZXJ3cml0aW5nIGFuZCBub3QgY2FsbGluZyBzdXBlclxuICB9XG59IiwiaW1wb3J0IHtMaXN0Qm94fSBmcm9tICcuL2xpc3Rib3gnO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7U3VidGl0bGVTd2l0Y2hIYW5kbGVyfSBmcm9tICcuLi9zdWJ0aXRsZXV0aWxzJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5cbi8qKlxuICogQSBlbGVtZW50IHRoYXQgaXMgc2ltaWxhciB0byBhIHNlbGVjdCBib3ggd2hlcmUgdGhlIHVzZXIgY2FuIHNlbGVjdCBhIHN1YnRpdGxlXG4gKi9cbmV4cG9ydCBjbGFzcyBTdWJ0aXRsZUxpc3RCb3ggZXh0ZW5kcyBMaXN0Qm94IHtcblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbmV3IFN1YnRpdGxlU3dpdGNoSGFuZGxlcihwbGF5ZXIsIHRoaXMsIHVpbWFuYWdlcik7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbnRhaW5lciwgQ29udGFpbmVyQ29uZmlnIH0gZnJvbSAnLi9jb250YWluZXInO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgTGFiZWwsIExhYmVsQ29uZmlnIH0gZnJvbSAnLi9sYWJlbCc7XG5pbXBvcnQgeyBDb21wb25lbnRDb25maWcsIENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCB7IENvbnRyb2xCYXIgfSBmcm9tICcuL2NvbnRyb2xiYXInO1xuaW1wb3J0IHsgRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnLi4vZXZlbnRkaXNwYXRjaGVyJztcbmltcG9ydCB7IERPTSwgU2l6ZSB9IGZyb20gJy4uL2RvbSc7XG5pbXBvcnQgeyBQbGF5ZXJBUEksIFN1YnRpdGxlQ3VlRXZlbnQgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcbmltcG9ydCB7IFZ0dFV0aWxzIH0gZnJvbSAnLi4vdnR0dXRpbHMnO1xuaW1wb3J0IHsgVlRUUHJvcGVydGllcyB9IGZyb20gJ2JpdG1vdmluLXBsYXllci90eXBlcy9zdWJ0aXRsZXMvdnR0L0FQSSc7XG5cbmludGVyZmFjZSBTdWJ0aXRsZUNyb3BEZXRlY3Rpb25SZXN1bHQge1xuICB0b3A6IGJvb2xlYW47XG4gIHJpZ2h0OiBib29sZWFuO1xuICBib3R0b206IGJvb2xlYW47XG4gIGxlZnQ6IGJvb2xlYW47XG59XG5cbi8qKlxuICogT3ZlcmxheXMgdGhlIHBsYXllciB0byBkaXNwbGF5IHN1YnRpdGxlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFN1YnRpdGxlT3ZlcmxheSBleHRlbmRzIENvbnRhaW5lcjxDb250YWluZXJDb25maWc+IHtcblxuICBwcml2YXRlIHN1YnRpdGxlTWFuYWdlcjogQWN0aXZlU3VidGl0bGVNYW5hZ2VyO1xuICBwcml2YXRlIHByZXZpZXdTdWJ0aXRsZUFjdGl2ZTogYm9vbGVhbjtcbiAgcHJpdmF0ZSBwcmV2aWV3U3VidGl0bGU6IFN1YnRpdGxlTGFiZWw7XG5cbiAgcHJpdmF0ZSBwcmVwcm9jZXNzTGFiZWxFdmVudENhbGxiYWNrID0gbmV3IEV2ZW50RGlzcGF0Y2hlcjxTdWJ0aXRsZUN1ZUV2ZW50LCBTdWJ0aXRsZUxhYmVsPigpO1xuICBwcml2YXRlIHN1YnRpdGxlQ29udGFpbmVyTWFuYWdlcjogU3VidGl0bGVSZWdpb25Db250YWluZXJNYW5hZ2VyO1xuXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENMQVNTX0NPTlRST0xCQVJfVklTSUJMRSA9ICdjb250cm9sYmFyLXZpc2libGUnO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDTEFTU19DRUFfNjA4ID0gJ2NlYTYwOCc7XG5cbiAgLy8gVGhlIG51bWJlciBvZiByb3dzIGluIGEgY2VhNjA4IGdyaWRcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ0VBNjA4X05VTV9ST1dTID0gMTU7XG4gIC8vIFRoZSBudW1iZXIgb2YgY29sdW1ucyBpbiBhIGNlYTYwOCBncmlkXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENFQTYwOF9OVU1fQ09MVU1OUyA9IDMyO1xuICAvLyBUaGUgb2Zmc2V0IGluIHBlcmNlbnQgZm9yIG9uZSByb3cgKHdoaWNoIGlzIGFsc28gdGhlIGhlaWdodCBvZiBhIHJvdylcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ0VBNjA4X1JPV19PRkZTRVQgPSAxMDAgLyBTdWJ0aXRsZU92ZXJsYXkuQ0VBNjA4X05VTV9ST1dTO1xuICAvLyBUaGUgb2Zmc2V0IGluIHBlcmNlbnQgZm9yIG9uZSBjb2x1bW4gKHdoaWNoIGlzIGFsc28gdGhlIHdpZHRoIG9mIGEgY29sdW1uKVxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDRUE2MDhfQ09MVU1OX09GRlNFVCA9IDEwMCAvIFN1YnRpdGxlT3ZlcmxheS5DRUE2MDhfTlVNX0NPTFVNTlM7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBDb250YWluZXJDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLnByZXZpZXdTdWJ0aXRsZUFjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMucHJldmlld1N1YnRpdGxlID0gbmV3IFN1YnRpdGxlTGFiZWwoeyB0ZXh0OiBpMThuLmdldExvY2FsaXplcignc3VidGl0bGUuZXhhbXBsZScpIH0pO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1zdWJ0aXRsZS1vdmVybGF5JyxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbGV0IHN1YnRpdGxlTWFuYWdlciA9IG5ldyBBY3RpdmVTdWJ0aXRsZU1hbmFnZXIoKTtcbiAgICB0aGlzLnN1YnRpdGxlTWFuYWdlciA9IHN1YnRpdGxlTWFuYWdlcjtcblxuICAgIHRoaXMuc3VidGl0bGVDb250YWluZXJNYW5hZ2VyID0gbmV3IFN1YnRpdGxlUmVnaW9uQ29udGFpbmVyTWFuYWdlcih0aGlzKTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5DdWVFbnRlciwgKGV2ZW50OiBTdWJ0aXRsZUN1ZUV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBsYWJlbCA9IHRoaXMuZ2VuZXJhdGVMYWJlbChldmVudCk7XG4gICAgICBzdWJ0aXRsZU1hbmFnZXIuY3VlRW50ZXIoZXZlbnQsIGxhYmVsKTtcblxuICAgICAgdGhpcy5wcmVwcm9jZXNzTGFiZWxFdmVudENhbGxiYWNrLmRpc3BhdGNoKGV2ZW50LCBsYWJlbCk7XG5cbiAgICAgIGlmICh0aGlzLnByZXZpZXdTdWJ0aXRsZUFjdGl2ZSkge1xuICAgICAgICB0aGlzLnN1YnRpdGxlQ29udGFpbmVyTWFuYWdlci5yZW1vdmVMYWJlbCh0aGlzLnByZXZpZXdTdWJ0aXRsZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2hvdygpO1xuXG4gICAgICB0aGlzLnN1YnRpdGxlQ29udGFpbmVyTWFuYWdlci5hZGRMYWJlbChsYWJlbCwgdGhpcy5nZXREb21FbGVtZW50KCkuc2l6ZSgpKTtcbiAgICAgIHRoaXMudXBkYXRlQ29tcG9uZW50cygpO1xuXG4gICAgICBpZiAodWltYW5hZ2VyLmdldENvbmZpZygpLmZvcmNlU3VidGl0bGVzSW50b1ZpZXdDb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVTdWJ0aXRsZUNyb3BwaW5nKGxhYmVsKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5DdWVVcGRhdGUsIChldmVudDogU3VidGl0bGVDdWVFdmVudCkgPT4ge1xuICAgICAgY29uc3QgbGFiZWwgPSB0aGlzLmdlbmVyYXRlTGFiZWwoZXZlbnQpO1xuICAgICAgY29uc3QgbGFiZWxUb1JlcGxhY2UgPSBzdWJ0aXRsZU1hbmFnZXIuY3VlVXBkYXRlKGV2ZW50LCBsYWJlbCk7XG5cbiAgICAgIHRoaXMucHJlcHJvY2Vzc0xhYmVsRXZlbnRDYWxsYmFjay5kaXNwYXRjaChldmVudCwgbGFiZWwpO1xuXG4gICAgICBpZiAobGFiZWxUb1JlcGxhY2UpIHtcbiAgICAgICAgdGhpcy5zdWJ0aXRsZUNvbnRhaW5lck1hbmFnZXIucmVwbGFjZUxhYmVsKGxhYmVsVG9SZXBsYWNlLCBsYWJlbCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZm9yY2VTdWJ0aXRsZXNJbnRvVmlld0NvbnRhaW5lcikge1xuICAgICAgICB0aGlzLmhhbmRsZVN1YnRpdGxlQ3JvcHBpbmcobGFiZWwpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkN1ZUV4aXQsIChldmVudDogU3VidGl0bGVDdWVFdmVudCkgPT4ge1xuICAgICAgbGV0IGxhYmVsVG9SZW1vdmUgPSBzdWJ0aXRsZU1hbmFnZXIuY3VlRXhpdChldmVudCk7XG5cbiAgICAgIGlmIChsYWJlbFRvUmVtb3ZlKSB7XG4gICAgICAgIHRoaXMuc3VidGl0bGVDb250YWluZXJNYW5hZ2VyLnJlbW92ZUxhYmVsKGxhYmVsVG9SZW1vdmUpO1xuICAgICAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudHMoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFzdWJ0aXRsZU1hbmFnZXIuaGFzQ3Vlcykge1xuICAgICAgICBpZiAoIXRoaXMucHJldmlld1N1YnRpdGxlQWN0aXZlKSB7XG4gICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zdWJ0aXRsZUNvbnRhaW5lck1hbmFnZXIuYWRkTGFiZWwodGhpcy5wcmV2aWV3U3VidGl0bGUpO1xuICAgICAgICAgIHRoaXMudXBkYXRlQ29tcG9uZW50cygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBsZXQgc3VidGl0bGVDbGVhckhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIHRoaXMuc3VidGl0bGVDb250YWluZXJNYW5hZ2VyLmNsZWFyKCk7XG4gICAgICBzdWJ0aXRsZU1hbmFnZXIuY2xlYXIoKTtcbiAgICAgIHRoaXMucmVtb3ZlQ29tcG9uZW50cygpO1xuICAgICAgdGhpcy51cGRhdGVDb21wb25lbnRzKCk7XG4gICAgfTtcblxuICAgIGNvbnN0IGNsZWFySW5hY3RpdmVDdWVzID0gKCkgPT4ge1xuICAgICAgY29uc3QgcmVtb3ZlZEFjdGl2ZUN1ZXMgPSBzdWJ0aXRsZU1hbmFnZXIuY2xlYXJJbmFjdGl2ZUN1ZXMocGxheWVyLmdldEN1cnJlbnRUaW1lKCkpO1xuICAgICAgcmVtb3ZlZEFjdGl2ZUN1ZXMuZm9yRWFjaCh0b1JlbW92ZSA9PiB7XG4gICAgICAgIHRoaXMuc3VidGl0bGVDb250YWluZXJNYW5hZ2VyLnJlbW92ZUxhYmVsKHRvUmVtb3ZlLmxhYmVsKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQXVkaW9DaGFuZ2VkLCBzdWJ0aXRsZUNsZWFySGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlN1YnRpdGxlRW5hYmxlZCwgc3VidGl0bGVDbGVhckhhbmRsZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TdWJ0aXRsZURpc2FibGVkLCBzdWJ0aXRsZUNsZWFySGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNlZWtlZCwgY2xlYXJJbmFjdGl2ZUN1ZXMpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5UaW1lU2hpZnRlZCwgY2xlYXJJbmFjdGl2ZUN1ZXMpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5YmFja0ZpbmlzaGVkLCBzdWJ0aXRsZUNsZWFySGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZVVubG9hZGVkLCBzdWJ0aXRsZUNsZWFySGFuZGxlcik7XG5cbiAgICB1aW1hbmFnZXIub25Db21wb25lbnRTaG93LnN1YnNjcmliZSgoY29tcG9uZW50OiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPikgPT4ge1xuICAgICAgaWYgKGNvbXBvbmVudCBpbnN0YW5jZW9mIENvbnRyb2xCYXIpIHtcbiAgICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoU3VidGl0bGVPdmVybGF5LkNMQVNTX0NPTlRST0xCQVJfVklTSUJMRSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHVpbWFuYWdlci5vbkNvbXBvbmVudEhpZGUuc3Vic2NyaWJlKChjb21wb25lbnQ6IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+KSA9PiB7XG4gICAgICBpZiAoY29tcG9uZW50IGluc3RhbmNlb2YgQ29udHJvbEJhcikge1xuICAgICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeENzcyhTdWJ0aXRsZU92ZXJsYXkuQ0xBU1NfQ09OVFJPTEJBUl9WSVNJQkxFKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmNvbmZpZ3VyZUNlYTYwOENhcHRpb25zKHBsYXllciwgdWltYW5hZ2VyKTtcbiAgICAvLyBJbml0XG4gICAgc3VidGl0bGVDbGVhckhhbmRsZXIoKTtcbiAgfVxuXG4gIGRldGVjdENyb3BwZWRTdWJ0aXRsZUxhYmVsKFxuICAgIGxhYmVsRWxlbWVudDogSFRNTEVsZW1lbnQsXG4gICk6IFN1YnRpdGxlQ3JvcERldGVjdGlvblJlc3VsdCB7XG4gICAgY29uc3QgcGFyZW50ID0gdGhpcy5nZXREb21FbGVtZW50KCkuZ2V0KDApO1xuXG4gICAgY29uc3QgY2hpbGRSZWN0ID0gbGFiZWxFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHBhcmVudFJlY3QgPSBwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBjaGlsZFJlY3QudG9wIDwgcGFyZW50UmVjdC50b3AsXG4gICAgICByaWdodDogY2hpbGRSZWN0LnJpZ2h0ID4gcGFyZW50UmVjdC5yaWdodCxcbiAgICAgIGJvdHRvbTogY2hpbGRSZWN0LmJvdHRvbSA+IHBhcmVudFJlY3QuYm90dG9tLFxuICAgICAgbGVmdDogY2hpbGRSZWN0LmxlZnQgPCBwYXJlbnRSZWN0LmxlZnQsXG4gICAgfTtcbiAgfVxuXG4gIGhhbmRsZVN1YnRpdGxlQ3JvcHBpbmcobGFiZWw6IFN1YnRpdGxlTGFiZWwpIHtcbiAgICBjb25zdCBsYWJlbERvbUVsZW1lbnQgPSBsYWJlbC5nZXREb21FbGVtZW50KCk7XG4gICAgY29uc3QgY3JvcERldGVjdGlvbiA9IHRoaXMuZGV0ZWN0Q3JvcHBlZFN1YnRpdGxlTGFiZWwoXG4gICAgICBsYWJlbERvbUVsZW1lbnQuZ2V0KDApLFxuICAgICk7XG5cbiAgICBpZiAoY3JvcERldGVjdGlvbi50b3ApIHtcbiAgICAgIGxhYmVsRG9tRWxlbWVudC5jc3MoJ3RvcCcsICcwJyk7XG4gICAgICBsYWJlbERvbUVsZW1lbnQucmVtb3ZlQ3NzKCdib3R0b20nKTtcbiAgICB9XG5cbiAgICBpZiAoY3JvcERldGVjdGlvbi5yaWdodCkge1xuICAgICAgbGFiZWxEb21FbGVtZW50LmNzcygncmlnaHQnLCAnMCcpO1xuICAgICAgbGFiZWxEb21FbGVtZW50LnJlbW92ZUNzcygnbGVmdCcpO1xuICAgIH1cblxuICAgIGlmIChjcm9wRGV0ZWN0aW9uLmJvdHRvbSkge1xuICAgICAgbGFiZWxEb21FbGVtZW50LmNzcygnYm90dG9tJywgJzAnKTtcbiAgICAgIGxhYmVsRG9tRWxlbWVudC5yZW1vdmVDc3MoJ3RvcCcpO1xuICAgIH1cblxuICAgIGlmIChjcm9wRGV0ZWN0aW9uLmxlZnQpIHtcbiAgICAgIGxhYmVsRG9tRWxlbWVudC5jc3MoJ2xlZnQnLCAnMCcpO1xuICAgICAgbGFiZWxEb21FbGVtZW50LnJlbW92ZUNzcygncmlnaHQnKTtcbiAgICB9XG4gIH1cblxuICBnZW5lcmF0ZUxhYmVsKGV2ZW50OiBTdWJ0aXRsZUN1ZUV2ZW50KTogU3VidGl0bGVMYWJlbCB7XG4gICAgLy8gU2FuaXRpemUgY3VlIGRhdGEgKG11c3QgYmUgZG9uZSBiZWZvcmUgdGhlIGN1ZSBJRCBpcyBnZW5lcmF0ZWQgaW4gc3VidGl0bGVNYW5hZ2VyLmN1ZUVudGVyIC8gdXBkYXRlKVxuICAgIGlmIChldmVudC5wb3NpdGlvbikge1xuICAgICAgLy8gU29tZXRpbWVzIHRoZSBwb3NpdGlvbnMgYXJlIHVuZGVmaW5lZCwgd2UgYXNzdW1lIHRoZW0gdG8gYmUgemVyb1xuICAgICAgZXZlbnQucG9zaXRpb24ucm93ID0gZXZlbnQucG9zaXRpb24ucm93IHx8IDA7XG4gICAgICBldmVudC5wb3NpdGlvbi5jb2x1bW4gPSBldmVudC5wb3NpdGlvbi5jb2x1bW4gfHwgMDtcbiAgICB9XG5cbiAgICBjb25zdCBsYWJlbCA9IG5ldyBTdWJ0aXRsZUxhYmVsKHtcbiAgICAgIC8vIFByZWZlciB0aGUgSFRNTCBzdWJ0aXRsZSB0ZXh0IGlmIHNldCwgZWxzZSB0cnkgZ2VuZXJhdGluZyBhIGltYWdlIHRhZyBhcyBzdHJpbmcgZnJvbSB0aGUgaW1hZ2UgYXR0cmlidXRlLFxuICAgICAgLy8gZWxzZSB1c2UgdGhlIHBsYWluIHRleHRcbiAgICAgIHRleHQ6IGV2ZW50Lmh0bWwgfHwgQWN0aXZlU3VidGl0bGVNYW5hZ2VyLmdlbmVyYXRlSW1hZ2VUYWdUZXh0KGV2ZW50LmltYWdlKSB8fCBldmVudC50ZXh0LFxuICAgICAgdnR0OiBldmVudC52dHQsXG4gICAgICByZWdpb246IGV2ZW50LnJlZ2lvbixcbiAgICAgIHJlZ2lvblN0eWxlOiBldmVudC5yZWdpb25TdHlsZSxcbiAgICB9KTtcblxuICAgIHJldHVybiBsYWJlbDtcbiAgfVxuXG4gIGNvbmZpZ3VyZUNlYTYwOENhcHRpb25zKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgLy8gVGhlIGNhbGN1bGF0ZWQgZm9udCBzaXplXG4gICAgbGV0IGZvbnRTaXplID0gMDtcbiAgICAvLyBUaGUgcmVxdWlyZWQgbGV0dGVyIHNwYWNpbmcgc3ByZWFkIHRoZSB0ZXh0IGNoYXJhY3RlcnMgZXZlbmx5IGFjcm9zcyB0aGUgZ3JpZFxuICAgIGxldCBmb250TGV0dGVyU3BhY2luZyA9IDA7XG4gICAgLy8gRmxhZyB0ZWxsaW5nIGlmIGEgZm9udCBzaXplIGNhbGN1bGF0aW9uIGlzIHJlcXVpcmVkIG9mIGlmIHRoZSBjdXJyZW50IHZhbHVlcyBhcmUgdmFsaWRcbiAgICBsZXQgZm9udFNpemVDYWxjdWxhdGlvblJlcXVpcmVkID0gdHJ1ZTtcbiAgICAvLyBGbGFnIHRlbGxpbmcgaWYgdGhlIENFQS02MDggbW9kZSBpcyBlbmFibGVkXG4gICAgbGV0IGVuYWJsZWQgPSBmYWxzZTtcblxuICAgIGNvbnN0IHVwZGF0ZUNFQTYwOEZvbnRTaXplID0gKCkgPT4ge1xuICAgICAgY29uc3QgZHVtbXlMYWJlbCA9IG5ldyBTdWJ0aXRsZUxhYmVsKHsgdGV4dDogJ1gnIH0pO1xuICAgICAgZHVtbXlMYWJlbC5nZXREb21FbGVtZW50KCkuY3NzKHtcbiAgICAgICAgLy8gQnkgdXNpbmcgYSBsYXJnZSBmb250IHNpemUgd2UgZG8gbm90IG5lZWQgdG8gdXNlIG11bHRpcGxlIGxldHRlcnMgYW5kIGNhbiBnZXQgc3RpbGwgYW5cbiAgICAgICAgLy8gYWNjdXJhdGUgbWVhc3VyZW1lbnQgZXZlbiB0aG91Z2ggdGhlIHJldHVybmVkIHNpemUgaXMgYW4gaW50ZWdlciB2YWx1ZVxuICAgICAgICAnZm9udC1zaXplJzogJzIwMHB4JyxcbiAgICAgICAgJ2xpbmUtaGVpZ2h0JzogJzIwMHB4JyxcbiAgICAgICAgJ3Zpc2liaWxpdHknOiAnaGlkZGVuJyxcbiAgICAgIH0pO1xuICAgICAgdGhpcy5hZGRDb21wb25lbnQoZHVtbXlMYWJlbCk7XG4gICAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudHMoKTtcbiAgICAgIHRoaXMuc2hvdygpO1xuXG4gICAgICBjb25zdCBkdW1teUxhYmVsQ2hhcldpZHRoID0gZHVtbXlMYWJlbC5nZXREb21FbGVtZW50KCkud2lkdGgoKTtcbiAgICAgIGNvbnN0IGR1bW15TGFiZWxDaGFySGVpZ2h0ID0gZHVtbXlMYWJlbC5nZXREb21FbGVtZW50KCkuaGVpZ2h0KCk7XG4gICAgICBjb25zdCBmb250U2l6ZVJhdGlvID0gZHVtbXlMYWJlbENoYXJXaWR0aCAvIGR1bW15TGFiZWxDaGFySGVpZ2h0O1xuXG4gICAgICB0aGlzLnJlbW92ZUNvbXBvbmVudChkdW1teUxhYmVsKTtcbiAgICAgIHRoaXMudXBkYXRlQ29tcG9uZW50cygpO1xuICAgICAgaWYgKCF0aGlzLnN1YnRpdGxlTWFuYWdlci5oYXNDdWVzKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfVxuXG4gICAgICAvLyBXZSBzdWJ0cmFjdCAxcHggaGVyZSB0byBhdm9pZCBsaW5lIGJyZWFrcyBhdCB0aGUgcmlnaHQgYm9yZGVyIG9mIHRoZSBzdWJ0aXRsZSBvdmVybGF5IHRoYXQgY2FuIGhhcHBlblxuICAgICAgLy8gd2hlbiB0ZXh0cyBjb250YWluIHdoaXRlc3BhY2VzLiBJdCdzIHByb2JhYmx5IHNvbWUga2luZCBvZiBwaXhlbCByb3VuZGluZyBpc3N1ZSBpbiB0aGUgYnJvd3NlcidzXG4gICAgICAvLyBsYXlvdXRpbmcsIGJ1dCB0aGUgYWN0dWFsIHJlYXNvbiBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZC4gQWltaW5nIGZvciBhIHRhcmdldCB3aWR0aCAtIDFweCB3b3VsZCB3b3JrIGluXG4gICAgICAvLyBtb3N0IGJyb3dzZXJzLCBidXQgU2FmYXJpIGhhcyBhIFwicXVhbnRpemVkXCIgZm9udCBzaXplIHJlbmRlcmluZyB3aXRoIGh1Z2Ugc3RlcHMgaW4gYmV0d2VlbiBzbyB3ZSBuZWVkXG4gICAgICAvLyB0byBzdWJ0cmFjdCBzb21lIG1vcmUgcGl4ZWxzIHRvIGF2b2lkIGxpbmUgYnJlYWtzIHRoZXJlIGFzIHdlbGwuXG4gICAgICBjb25zdCBzdWJ0aXRsZU92ZXJsYXlXaWR0aCA9IHRoaXMuZ2V0RG9tRWxlbWVudCgpLndpZHRoKCkgLSAxMDtcbiAgICAgIGNvbnN0IHN1YnRpdGxlT3ZlcmxheUhlaWdodCA9IHRoaXMuZ2V0RG9tRWxlbWVudCgpLmhlaWdodCgpO1xuXG4gICAgICAvLyBUaGUgc2l6ZSByYXRpbyBvZiB0aGUgbGV0dGVyIGdyaWRcbiAgICAgIGNvbnN0IGZvbnRHcmlkU2l6ZVJhdGlvID0gKGR1bW15TGFiZWxDaGFyV2lkdGggKiBTdWJ0aXRsZU92ZXJsYXkuQ0VBNjA4X05VTV9DT0xVTU5TKSAvXG4gICAgICAgIChkdW1teUxhYmVsQ2hhckhlaWdodCAqIFN1YnRpdGxlT3ZlcmxheS5DRUE2MDhfTlVNX1JPV1MpO1xuICAgICAgLy8gVGhlIHNpemUgcmF0aW8gb2YgdGhlIGF2YWlsYWJsZSBzcGFjZSBmb3IgdGhlIGdyaWRcbiAgICAgIGNvbnN0IHN1YnRpdGxlT3ZlcmxheVNpemVSYXRpbyA9IHN1YnRpdGxlT3ZlcmxheVdpZHRoIC8gc3VidGl0bGVPdmVybGF5SGVpZ2h0O1xuXG4gICAgICBpZiAoc3VidGl0bGVPdmVybGF5U2l6ZVJhdGlvID4gZm9udEdyaWRTaXplUmF0aW8pIHtcbiAgICAgICAgLy8gV2hlbiB0aGUgYXZhaWxhYmxlIHNwYWNlIGlzIHdpZGVyIHRoYW4gdGhlIHRleHQgZ3JpZCwgdGhlIGZvbnQgc2l6ZSBpcyBzaW1wbHlcbiAgICAgICAgLy8gZGV0ZXJtaW5lZCBieSB0aGUgaGVpZ2h0IG9mIHRoZSBhdmFpbGFibGUgc3BhY2UuXG4gICAgICAgIGZvbnRTaXplID0gc3VidGl0bGVPdmVybGF5SGVpZ2h0IC8gU3VidGl0bGVPdmVybGF5LkNFQTYwOF9OVU1fUk9XUztcblxuICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGFkZGl0aW9uYWwgbGV0dGVyIHNwYWNpbmcgcmVxdWlyZWQgdG8gZXZlbmx5IHNwcmVhZCB0aGUgdGV4dCBhY3Jvc3MgdGhlIGdyaWQncyB3aWR0aFxuICAgICAgICBjb25zdCBncmlkU2xvdFdpZHRoID0gc3VidGl0bGVPdmVybGF5V2lkdGggLyBTdWJ0aXRsZU92ZXJsYXkuQ0VBNjA4X05VTV9DT0xVTU5TO1xuICAgICAgICBjb25zdCBmb250Q2hhcldpZHRoID0gZm9udFNpemUgKiBmb250U2l6ZVJhdGlvO1xuICAgICAgICBmb250TGV0dGVyU3BhY2luZyA9IGdyaWRTbG90V2lkdGggLSBmb250Q2hhcldpZHRoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gV2hlbiB0aGUgYXZhaWxhYmxlIHNwYWNlIGlzIG5vdCB3aWRlIGVub3VnaCwgdGV4dHMgd291bGQgdmVydGljYWxseSBvdmVybGFwIGlmIHdlIHRha2VcbiAgICAgICAgLy8gdGhlIGhlaWdodCBhcyBhIGJhc2UgZm9yIHRoZSBmb250IHNpemUsIHNvIHdlIG5lZWQgdG8gbGltaXQgdGhlIGhlaWdodC4gV2UgZG8gdGhhdFxuICAgICAgICAvLyBieSBkZXRlcm1pbmluZyB0aGUgZm9udCBzaXplIGJ5IHRoZSB3aWR0aCBvZiB0aGUgYXZhaWxhYmxlIHNwYWNlLlxuICAgICAgICBmb250U2l6ZSA9IHN1YnRpdGxlT3ZlcmxheVdpZHRoIC8gU3VidGl0bGVPdmVybGF5LkNFQTYwOF9OVU1fQ09MVU1OUyAvIGZvbnRTaXplUmF0aW87XG4gICAgICAgIGZvbnRMZXR0ZXJTcGFjaW5nID0gMDtcbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIGZvbnQtc2l6ZSBvZiBhbGwgYWN0aXZlIHN1YnRpdGxlIGxhYmVsc1xuICAgICAgZm9yIChsZXQgbGFiZWwgb2YgdGhpcy5nZXRDb21wb25lbnRzKCkpIHtcbiAgICAgICAgaWYgKGxhYmVsIGluc3RhbmNlb2YgU3VidGl0bGVMYWJlbCkge1xuICAgICAgICAgIGxhYmVsLmdldERvbUVsZW1lbnQoKS5jc3Moe1xuICAgICAgICAgICAgJ2ZvbnQtc2l6ZSc6IGAke2ZvbnRTaXplfXB4YCxcbiAgICAgICAgICAgICdsZXR0ZXItc3BhY2luZyc6IGAke2ZvbnRMZXR0ZXJTcGFjaW5nfXB4YCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheWVyUmVzaXplZCwgKCkgPT4ge1xuICAgICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgdXBkYXRlQ0VBNjA4Rm9udFNpemUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvbnRTaXplQ2FsY3VsYXRpb25SZXF1aXJlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnByZXByb2Nlc3NMYWJlbEV2ZW50Q2FsbGJhY2suc3Vic2NyaWJlKChldmVudDogU3VidGl0bGVDdWVFdmVudCwgbGFiZWw6IFN1YnRpdGxlTGFiZWwpID0+IHtcbiAgICAgIGNvbnN0IGlzQ0VBNjA4ID0gZXZlbnQucG9zaXRpb24gIT0gbnVsbDtcbiAgICAgIGlmICghaXNDRUE2MDgpIHtcbiAgICAgICAgLy8gU2tpcCBhbGwgbm9uLUNFQTYwOCBjdWVzXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFlbmFibGVkKSB7XG4gICAgICAgIGVuYWJsZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hZGRDbGFzcyh0aGlzLnByZWZpeENzcyhTdWJ0aXRsZU92ZXJsYXkuQ0xBU1NfQ0VBXzYwOCkpO1xuXG4gICAgICAgIC8vIFdlIGNvbmRpdGlvbmFsbHkgdXBkYXRlIHRoZSBmb250IHNpemUgYnkgdGhpcyBmbGFnIGhlcmUgdG8gYXZvaWQgdXBkYXRpbmcgZXZlcnkgdGltZSBhIHN1YnRpdGxlXG4gICAgICAgIC8vIGlzIGFkZGVkIGludG8gYW4gZW1wdHkgb3ZlcmxheS4gQmVjYXVzZSB3ZSByZXNldCB0aGUgb3ZlcmxheSB3aGVuIGFsbCBzdWJ0aXRsZXMgYXJlIGdvbmUsIHRoaXNcbiAgICAgICAgLy8gd291bGQgdHJpZ2dlciBhbiB1bm5lY2Vzc2FyeSB1cGRhdGUgZXZlcnkgdGltZSwgYnV0IGl0J3Mgb25seSByZXF1aXJlZCB1bmRlciBjZXJ0YWluIGNvbmRpdGlvbnMsXG4gICAgICAgIC8vIGUuZy4gYWZ0ZXIgdGhlIHBsYXllciBzaXplIGhhcyBjaGFuZ2VkLlxuICAgICAgICBpZiAoZm9udFNpemVDYWxjdWxhdGlvblJlcXVpcmVkKSB7XG4gICAgICAgICAgdXBkYXRlQ0VBNjA4Rm9udFNpemUoKTtcbiAgICAgICAgICBmb250U2l6ZUNhbGN1bGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsYWJlbC5nZXREb21FbGVtZW50KCkuY3NzKHtcbiAgICAgICAgJ2xlZnQnOiBgJHtldmVudC5wb3NpdGlvbi5jb2x1bW4gKiBTdWJ0aXRsZU92ZXJsYXkuQ0VBNjA4X0NPTFVNTl9PRkZTRVR9JWAsXG4gICAgICAgICd0b3AnOiBgJHtldmVudC5wb3NpdGlvbi5yb3cgKiBTdWJ0aXRsZU92ZXJsYXkuQ0VBNjA4X1JPV19PRkZTRVR9JWAsXG4gICAgICAgICdmb250LXNpemUnOiBgJHtmb250U2l6ZX1weGAsXG4gICAgICAgICdsZXR0ZXItc3BhY2luZyc6IGAke2ZvbnRMZXR0ZXJTcGFjaW5nfXB4YCxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgY29uc3QgcmVzZXQgPSAoKSA9PiB7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeENzcyhTdWJ0aXRsZU92ZXJsYXkuQ0xBU1NfQ0VBXzYwOCkpO1xuICAgICAgZW5hYmxlZCA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQ3VlRXhpdCwgKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLnN1YnRpdGxlTWFuYWdlci5oYXNDdWVzKSB7XG4gICAgICAgIC8vIERpc2FibGUgQ0VBLTYwOCBtb2RlIHdoZW4gYWxsIHN1YnRpdGxlcyBhcmUgZ29uZSAodG8gYWxsb3cgY29ycmVjdCBmb3JtYXR0aW5nIGFuZFxuICAgICAgICAvLyBkaXNwbGF5IG9mIG90aGVyIHR5cGVzIG9mIHN1YnRpdGxlcywgZS5nLiB0aGUgZm9ybWF0dGluZyBwcmV2aWV3IHN1YnRpdGxlKVxuICAgICAgICByZXNldCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZVVubG9hZGVkLCByZXNldCk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlN1YnRpdGxlRW5hYmxlZCwgcmVzZXQpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TdWJ0aXRsZURpc2FibGVkLCByZXNldCk7XG4gIH1cblxuICBlbmFibGVQcmV2aWV3U3VidGl0bGVMYWJlbCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuc3VidGl0bGVNYW5hZ2VyLmhhc0N1ZXMpIHtcbiAgICAgIHRoaXMucHJldmlld1N1YnRpdGxlQWN0aXZlID0gdHJ1ZTtcbiAgICAgIHRoaXMuc3VidGl0bGVDb250YWluZXJNYW5hZ2VyLmFkZExhYmVsKHRoaXMucHJldmlld1N1YnRpdGxlKTtcbiAgICAgIHRoaXMudXBkYXRlQ29tcG9uZW50cygpO1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlUHJldmlld1N1YnRpdGxlTGFiZWwoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMucHJldmlld1N1YnRpdGxlQWN0aXZlKSB7XG4gICAgICB0aGlzLnByZXZpZXdTdWJ0aXRsZUFjdGl2ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5zdWJ0aXRsZUNvbnRhaW5lck1hbmFnZXIucmVtb3ZlTGFiZWwodGhpcy5wcmV2aWV3U3VidGl0bGUpO1xuICAgICAgdGhpcy51cGRhdGVDb21wb25lbnRzKCk7XG4gICAgfVxuICB9XG59XG5cbmludGVyZmFjZSBBY3RpdmVTdWJ0aXRsZUN1ZSB7XG4gIGV2ZW50OiBTdWJ0aXRsZUN1ZUV2ZW50O1xuICBsYWJlbDogU3VidGl0bGVMYWJlbDtcbn1cblxuaW50ZXJmYWNlIEFjdGl2ZVN1YnRpdGxlQ3VlTWFwIHtcbiAgW2lkOiBzdHJpbmddOiBBY3RpdmVTdWJ0aXRsZUN1ZVtdO1xufVxuXG5pbnRlcmZhY2UgU3VidGl0bGVMYWJlbENvbmZpZyBleHRlbmRzIExhYmVsQ29uZmlnIHtcbiAgdnR0PzogVlRUUHJvcGVydGllcztcbiAgcmVnaW9uPzogc3RyaW5nO1xuICByZWdpb25TdHlsZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFN1YnRpdGxlTGFiZWwgZXh0ZW5kcyBMYWJlbDxTdWJ0aXRsZUxhYmVsQ29uZmlnPiB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTdWJ0aXRsZUxhYmVsQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1zdWJ0aXRsZS1sYWJlbCcsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgZ2V0IHZ0dCgpOiBWVFRQcm9wZXJ0aWVzIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcudnR0O1xuICB9XG5cbiAgZ2V0IHJlZ2lvbigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5yZWdpb247XG4gIH1cblxuICBnZXQgcmVnaW9uU3R5bGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcucmVnaW9uU3R5bGU7XG4gIH1cbn1cblxuY2xhc3MgQWN0aXZlU3VidGl0bGVNYW5hZ2VyIHtcblxuICBwcml2YXRlIGFjdGl2ZVN1YnRpdGxlQ3VlTWFwOiBBY3RpdmVTdWJ0aXRsZUN1ZU1hcDtcbiAgcHJpdmF0ZSBhY3RpdmVTdWJ0aXRsZUN1ZUNvdW50OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5hY3RpdmVTdWJ0aXRsZUN1ZU1hcCA9IHt9O1xuICAgIHRoaXMuYWN0aXZlU3VidGl0bGVDdWVDb3VudCA9IDA7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyBhIHVuaXF1ZSBJRCBmb3IgYSBzdWJ0aXRsZSBjdWUsIHdoaWNoIGlzIG5lZWRlZCB0byBhc3NvY2lhdGUgYW4gQ3VlRW50ZXIgd2l0aCBpdHMgQ3VlRXhpdFxuICAgKiBldmVudCBzbyB3ZSBjYW4gcmVtb3ZlIHRoZSBjb3JyZWN0IHN1YnRpdGxlIGluIEN1ZUV4aXQgd2hlbiBtdWx0aXBsZSBzdWJ0aXRsZXMgYXJlIGFjdGl2ZSBhdCB0aGUgc2FtZSB0aW1lLlxuICAgKiBUaGUgc3RhcnQgdGltZSBwbHVzIHRoZSB0ZXh0IHNob3VsZCBtYWtlIGEgdW5pcXVlIGlkZW50aWZpZXIsIGFuZCBpbiB0aGUgb25seSBjYXNlIHdoZXJlIGEgY29sbGlzaW9uXG4gICAqIGNhbiBoYXBwZW4sIHR3byBzaW1pbGFyIHRleHRzIHdpbGwgYmUgZGlzcGxheWVkIGF0IGEgc2ltaWxhciB0aW1lIGFuZCBhIHNpbWlsYXIgcG9zaXRpb24gKG9yIHdpdGhvdXQgcG9zaXRpb24pLlxuICAgKiBUaGUgc3RhcnQgdGltZSBzaG91bGQgYWx3YXlzIGJlIGtub3duLCBiZWNhdXNlIGl0IGlzIHJlcXVpcmVkIHRvIHNjaGVkdWxlIHRoZSBDdWVFbnRlciBldmVudC4gVGhlIGVuZCB0aW1lXG4gICAqIG11c3Qgbm90IG5lY2Vzc2FyaWx5IGJlIGtub3duIGFuZCB0aGVyZWZvcmUgY2Fubm90IGJlIHVzZWQgZm9yIHRoZSBJRC5cbiAgICogQHBhcmFtIGV2ZW50XG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGNhbGN1bGF0ZUlkKGV2ZW50OiBTdWJ0aXRsZUN1ZUV2ZW50KTogc3RyaW5nIHtcbiAgICBsZXQgaWQgPSBldmVudC5zdGFydCArICctJyArIGV2ZW50LnRleHQ7XG5cbiAgICBpZiAoZXZlbnQucG9zaXRpb24pIHtcbiAgICAgIGlkICs9ICctJyArIGV2ZW50LnBvc2l0aW9uLnJvdyArICctJyArIGV2ZW50LnBvc2l0aW9uLmNvbHVtbjtcbiAgICB9XG5cbiAgICByZXR1cm4gaWQ7XG4gIH1cblxuICBjdWVFbnRlcihldmVudDogU3VidGl0bGVDdWVFdmVudCwgbGFiZWw6IFN1YnRpdGxlTGFiZWwpOiB2b2lkIHtcbiAgICB0aGlzLmFkZEN1ZVRvTWFwKGV2ZW50LCBsYWJlbCk7XG4gIH1cblxuICBjdWVVcGRhdGUoZXZlbnQ6IFN1YnRpdGxlQ3VlRXZlbnQsIGxhYmVsOiBTdWJ0aXRsZUxhYmVsKTogU3VidGl0bGVMYWJlbCB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgbGFiZWxUb1JlcGxhY2UgPSB0aGlzLnBvcEN1ZUZyb21NYXAoZXZlbnQpO1xuXG4gICAgaWYgKGxhYmVsVG9SZXBsYWNlKSB7XG4gICAgICB0aGlzLmFkZEN1ZVRvTWFwKGV2ZW50LCBsYWJlbCk7XG4gICAgICByZXR1cm4gbGFiZWxUb1JlcGxhY2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHByaXZhdGUgYWRkQ3VlVG9NYXAoZXZlbnQ6IFN1YnRpdGxlQ3VlRXZlbnQsIGxhYmVsOiBTdWJ0aXRsZUxhYmVsKTogdm9pZCB7XG4gICAgbGV0IGlkID0gQWN0aXZlU3VidGl0bGVNYW5hZ2VyLmNhbGN1bGF0ZUlkKGV2ZW50KTtcblxuICAgIC8vIENyZWF0ZSBhcnJheSBmb3IgaWQgaWYgaXQgZG9lcyBub3QgZXhpc3RcbiAgICB0aGlzLmFjdGl2ZVN1YnRpdGxlQ3VlTWFwW2lkXSA9IHRoaXMuYWN0aXZlU3VidGl0bGVDdWVNYXBbaWRdIHx8IFtdO1xuXG4gICAgLy8gQWRkIGN1ZVxuICAgIHRoaXMuYWN0aXZlU3VidGl0bGVDdWVNYXBbaWRdLnB1c2goeyBldmVudCwgbGFiZWwgfSk7XG4gICAgdGhpcy5hY3RpdmVTdWJ0aXRsZUN1ZUNvdW50Kys7XG4gIH1cblxuICBwcml2YXRlIHBvcEN1ZUZyb21NYXAoZXZlbnQ6IFN1YnRpdGxlQ3VlRXZlbnQpOiBTdWJ0aXRsZUxhYmVsIHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaWQgPSBBY3RpdmVTdWJ0aXRsZU1hbmFnZXIuY2FsY3VsYXRlSWQoZXZlbnQpO1xuICAgIGxldCBhY3RpdmVTdWJ0aXRsZUN1ZXMgPSB0aGlzLmFjdGl2ZVN1YnRpdGxlQ3VlTWFwW2lkXTtcblxuICAgIGlmIChhY3RpdmVTdWJ0aXRsZUN1ZXMgJiYgYWN0aXZlU3VidGl0bGVDdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIFJlbW92ZSBjdWVcbiAgICAgIC8qIFdlIGFwcGx5IHRoZSBGSUZPIGFwcHJvYWNoIGhlcmUgYW5kIHJlbW92ZSB0aGUgb2xkZXN0IGN1ZSBmcm9tIHRoZSBhc3NvY2lhdGVkIGlkLiBXaGVuIHRoZXJlIGFyZSBtdWx0aXBsZSBjdWVzXG4gICAgICAgKiB3aXRoIHRoZSBzYW1lIGlkLCB0aGVyZSBpcyBubyB3YXkgdG8ga25vdyB3aGljaCBvbmUgb2YgdGhlIGN1ZXMgaXMgdG8gYmUgZGVsZXRlZCwgc28gd2UganVzdCBob3BlIHRoYXQgRklGT1xuICAgICAgICogd29ya3MgZmluZS4gVGhlb3JldGljYWxseSBpdCBjYW4gaGFwcGVuIHRoYXQgdHdvIGN1ZXMgd2l0aCBjb2xsaWRpbmcgaWRzIGFyZSByZW1vdmVkIGF0IGRpZmZlcmVudCB0aW1lcywgaW5cbiAgICAgICAqIHRoZSB3cm9uZyBvcmRlci4gVGhpcyByYXJlIGNhc2UgaGFzIHlldCB0byBiZSBvYnNlcnZlZC4gSWYgaXQgZXZlciBnZXRzIGFuIGlzc3VlLCB3ZSBjYW4gdGFrZSB0aGUgdW5zdGFibGVcbiAgICAgICAqIGN1ZSBlbmQgdGltZSAod2hpY2ggY2FuIGNoYW5nZSBiZXR3ZWVuIEN1ZUVudGVyIGFuZCBDdWVFeGl0IElOIEN1ZVVwZGF0ZSkgYW5kIHVzZSBpdCBhcyBhblxuICAgICAgICogYWRkaXRpb25hbCBoaW50IHRvIHRyeSBhbmQgcmVtb3ZlIHRoZSBjb3JyZWN0IG9uZSBvZiB0aGUgY29sbGlkaW5nIGN1ZXMuXG4gICAgICAgKi9cbiAgICAgIGxldCBhY3RpdmVTdWJ0aXRsZUN1ZSA9IGFjdGl2ZVN1YnRpdGxlQ3Vlcy5zaGlmdCgpO1xuICAgICAgdGhpcy5hY3RpdmVTdWJ0aXRsZUN1ZUNvdW50LS07XG5cbiAgICAgIHJldHVybiBhY3RpdmVTdWJ0aXRsZUN1ZS5sYWJlbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgYWN0aXZlIGN1ZXMgd2hpY2ggZG9uJ3QgZW5jbG9zZSB0aGUgZ2l2ZW4gdGltZVxuICAgKiBAcGFyYW0gdGltZSB0aGUgdGltZSBmb3Igd2hpY2ggc3VidGl0bGVzIHNob3VsZCByZW1haW5cbiAgICovXG4gIHB1YmxpYyBjbGVhckluYWN0aXZlQ3Vlcyh0aW1lOiBudW1iZXIpOiBBY3RpdmVTdWJ0aXRsZUN1ZVtdIHtcbiAgICBjb25zdCByZW1vdmVkQ3VlczogQWN0aXZlU3VidGl0bGVDdWVbXSA9IFtdO1xuICAgIE9iamVjdC5rZXlzKHRoaXMuYWN0aXZlU3VidGl0bGVDdWVNYXApLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGNvbnN0IGFjdGl2ZUN1ZXMgPSB0aGlzLmFjdGl2ZVN1YnRpdGxlQ3VlTWFwW2tleV07XG4gICAgICBhY3RpdmVDdWVzLmZvckVhY2goY3VlID0+IHtcbiAgICAgICAgaWYgKHRpbWUgPCBjdWUuZXZlbnQuc3RhcnQgfHwgdGltZSA+IGN1ZS5ldmVudC5lbmQpIHtcbiAgICAgICAgICB0aGlzLnBvcEN1ZUZyb21NYXAoY3VlLmV2ZW50KTtcbiAgICAgICAgICByZW1vdmVkQ3Vlcy5wdXNoKGN1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiByZW1vdmVkQ3VlcztcbiAgfVxuXG4gIHN0YXRpYyBnZW5lcmF0ZUltYWdlVGFnVGV4dChpbWFnZURhdGE6IHN0cmluZyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKCFpbWFnZURhdGEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpbWdUYWcgPSBuZXcgRE9NKCdpbWcnLCB7XG4gICAgICBzcmM6IGltYWdlRGF0YSxcbiAgICB9KTtcbiAgICBpbWdUYWcuY3NzKCd3aWR0aCcsICcxMDAlJyk7XG4gICAgcmV0dXJuIGltZ1RhZy5nZXQoMCkub3V0ZXJIVE1MOyAvLyByZXR1cm4gdGhlIGh0bWwgYXMgc3RyaW5nXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbGFiZWwgYXNzb2NpYXRlZCB3aXRoIGFuIGFscmVhZHkgYWRkZWQgY3VlLlxuICAgKiBAcGFyYW0gZXZlbnRcbiAgICogQHJldHVybiB7U3VidGl0bGVMYWJlbH1cbiAgICovXG4gIGdldEN1ZXMoZXZlbnQ6IFN1YnRpdGxlQ3VlRXZlbnQpOiBTdWJ0aXRsZUxhYmVsW10gfCB1bmRlZmluZWQge1xuICAgIGxldCBpZCA9IEFjdGl2ZVN1YnRpdGxlTWFuYWdlci5jYWxjdWxhdGVJZChldmVudCk7XG4gICAgbGV0IGFjdGl2ZVN1YnRpdGxlQ3VlcyA9IHRoaXMuYWN0aXZlU3VidGl0bGVDdWVNYXBbaWRdO1xuICAgIGlmIChhY3RpdmVTdWJ0aXRsZUN1ZXMgJiYgYWN0aXZlU3VidGl0bGVDdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBhY3RpdmVTdWJ0aXRsZUN1ZXMubWFwKChjdWUpID0+IGN1ZS5sYWJlbCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIHN1YnRpdGxlIGN1ZSBmcm9tIHRoZSBtYW5hZ2VyIGFuZCByZXR1cm5zIHRoZSBsYWJlbCB0aGF0IHNob3VsZCBiZSByZW1vdmVkIGZyb20gdGhlIHN1YnRpdGxlIG92ZXJsYXksXG4gICAqIG9yIG51bGwgaWYgdGhlcmUgaXMgbm8gYXNzb2NpYXRlZCBsYWJlbCBleGlzdGluZyAoZS5nLiBiZWNhdXNlIGFsbCBsYWJlbHMgaGF2ZSBiZWVuIHtAbGluayAjY2xlYXIgY2xlYXJlZH0uXG4gICAqIEBwYXJhbSBldmVudFxuICAgKiBAcmV0dXJuIHtTdWJ0aXRsZUxhYmVsfG51bGx9XG4gICAqL1xuICBjdWVFeGl0KGV2ZW50OiBTdWJ0aXRsZUN1ZUV2ZW50KTogU3VidGl0bGVMYWJlbCB7XG4gICAgcmV0dXJuIHRoaXMucG9wQ3VlRnJvbU1hcChldmVudCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBzdWJ0aXRsZSBjdWVzLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgY3VlQ291bnQoKTogbnVtYmVyIHtcbiAgICAvLyBXZSBleHBsaWNpdGx5IGNvdW50IHRoZSBjdWVzIHRvIHNhdmUgYW4gQXJyYXkucmVkdWNlIG9uIGV2ZXJ5IGN1ZUNvdW50IGNhbGwgKHdoaWNoIGNhbiBoYXBwZW4gZnJlcXVlbnRseSlcbiAgICByZXR1cm4gdGhpcy5hY3RpdmVTdWJ0aXRsZUN1ZUNvdW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGVyZSBhcmUgYWN0aXZlIHN1YnRpdGxlIGN1ZXMsIGVsc2UgZmFsc2UuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgaGFzQ3VlcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jdWVDb3VudCA+IDA7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgc3VidGl0bGUgY3VlcyBmcm9tIHRoZSBtYW5hZ2VyLlxuICAgKi9cbiAgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5hY3RpdmVTdWJ0aXRsZUN1ZU1hcCA9IHt9O1xuICAgIHRoaXMuYWN0aXZlU3VidGl0bGVDdWVDb3VudCA9IDA7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN1YnRpdGxlUmVnaW9uQ29udGFpbmVyTWFuYWdlciB7XG4gIHByaXZhdGUgc3VidGl0bGVSZWdpb25Db250YWluZXJzOiB7IFtyZWdpb25OYW1lOiBzdHJpbmddOiBTdWJ0aXRsZVJlZ2lvbkNvbnRhaW5lciB9ID0ge307XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBzdWJ0aXRsZU92ZXJsYXkgUmVmZXJlbmNlIHRvIHRoZSBzdWJ0aXRsZSBvdmVybGF5IGZvciBhZGRpbmcgYW5kIHJlbW92aW5nIHRoZSBjb250YWluZXJzLlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzdWJ0aXRsZU92ZXJsYXk6IFN1YnRpdGxlT3ZlcmxheSkge1xuICAgIHRoaXMuc3VidGl0bGVPdmVybGF5ID0gc3VidGl0bGVPdmVybGF5O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRSZWdpb24obGFiZWw6IFN1YnRpdGxlTGFiZWwpOiB7IHJlZ2lvbkNvbnRhaW5lcklkOiBzdHJpbmcsIHJlZ2lvbk5hbWU6IHN0cmluZyB9IHtcbiAgICBpZiAobGFiZWwudnR0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZWdpb25Db250YWluZXJJZDogbGFiZWwudnR0LnJlZ2lvbiAmJiBsYWJlbC52dHQucmVnaW9uLmlkID8gbGFiZWwudnR0LnJlZ2lvbi5pZCA6ICd2dHQnLFxuICAgICAgICByZWdpb25OYW1lOiAndnR0JyxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlZ2lvbkNvbnRhaW5lcklkOiBsYWJlbC5yZWdpb24gfHwgJ2RlZmF1bHQnLFxuICAgICAgcmVnaW9uTmFtZTogbGFiZWwucmVnaW9uIHx8ICdkZWZhdWx0JyxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW5kIHdyYXBzIGEgc3VidGl0bGUgbGFiZWwgaW50byBhIGNvbnRhaW5lciBkaXYgYmFzZWQgb24gdGhlIHN1YnRpdGxlIHJlZ2lvbi5cbiAgICogSWYgdGhlIHN1YnRpdGxlIGhhcyBwb3NpdGlvbmluZyBpbmZvcm1hdGlvbiBpdCBpcyBhZGRlZCB0byB0aGUgY29udGFpbmVyLlxuICAgKiBAcGFyYW0gbGFiZWwgVGhlIHN1YnRpdGxlIGxhYmVsIHRvIHdyYXBcbiAgICovXG4gIGFkZExhYmVsKGxhYmVsOiBTdWJ0aXRsZUxhYmVsLCBvdmVybGF5U2l6ZT86IFNpemUpOiB2b2lkIHtcbiAgICBjb25zdCB7IHJlZ2lvbkNvbnRhaW5lcklkLCByZWdpb25OYW1lIH0gPSB0aGlzLmdldFJlZ2lvbihsYWJlbCk7XG4gICAgY29uc3QgY3NzQ2xhc3NlcyA9IFtgc3VidGl0bGUtcG9zaXRpb24tJHtyZWdpb25OYW1lfWBdO1xuXG4gICAgaWYgKGxhYmVsLnZ0dCAmJiBsYWJlbC52dHQucmVnaW9uKSB7XG4gICAgICBjc3NDbGFzc2VzLnB1c2goYHZ0dC1yZWdpb24tJHtsYWJlbC52dHQucmVnaW9uLmlkfWApO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5zdWJ0aXRsZVJlZ2lvbkNvbnRhaW5lcnNbcmVnaW9uQ29udGFpbmVySWRdKSB7XG4gICAgICBjb25zdCByZWdpb25Db250YWluZXIgPSBuZXcgU3VidGl0bGVSZWdpb25Db250YWluZXIoe1xuICAgICAgICBjc3NDbGFzc2VzLFxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuc3VidGl0bGVSZWdpb25Db250YWluZXJzW3JlZ2lvbkNvbnRhaW5lcklkXSA9IHJlZ2lvbkNvbnRhaW5lcjtcblxuICAgICAgaWYgKGxhYmVsLnJlZ2lvblN0eWxlKSB7XG4gICAgICAgIHJlZ2lvbkNvbnRhaW5lci5nZXREb21FbGVtZW50KCkuYXR0cignc3R5bGUnLCBsYWJlbC5yZWdpb25TdHlsZSk7XG4gICAgICB9IGVsc2UgaWYgKGxhYmVsLnZ0dCAmJiAhbGFiZWwudnR0LnJlZ2lvbikge1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhlcmUgaXMgbm8gcmVnaW9uIHByZXNlbnQgdG8gd3JhcCB0aGUgQ3VlIEJveCwgdGhlIEN1ZSBib3ggYmVjb21lcyB0aGVcbiAgICAgICAgICogcmVnaW9uIGl0c2VsZi4gVGhlcmVmb3JlIHRoZSBwb3NpdGlvbmluZyB2YWx1ZXMgaGF2ZSB0byBjb21lIGZyb20gdGhlIGJveC5cbiAgICAgICAgICovXG4gICAgICAgIHJlZ2lvbkNvbnRhaW5lci5nZXREb21FbGVtZW50KCkuY3NzKCdwb3NpdGlvbicsICdzdGF0aWMnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGdldERvbUVsZW1lbnQgbmVlZHMgdG8gYmUgY2FsbGVkIGF0IGxlYXN0IG9uY2UgdG8gZW5zdXJlIHRoZSBjb21wb25lbnQgZXhpc3RzXG4gICAgICAgIHJlZ2lvbkNvbnRhaW5lci5nZXREb21FbGVtZW50KCk7XG4gICAgICB9XG5cbiAgICAgIGZvciAoY29uc3QgcmVnaW9uQ29udGFpbmVySWQgaW4gdGhpcy5zdWJ0aXRsZVJlZ2lvbkNvbnRhaW5lcnMpIHtcbiAgICAgICAgdGhpcy5zdWJ0aXRsZU92ZXJsYXkuYWRkQ29tcG9uZW50KHRoaXMuc3VidGl0bGVSZWdpb25Db250YWluZXJzW3JlZ2lvbkNvbnRhaW5lcklkXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zdWJ0aXRsZVJlZ2lvbkNvbnRhaW5lcnNbcmVnaW9uQ29udGFpbmVySWRdLmFkZExhYmVsKGxhYmVsLCBvdmVybGF5U2l6ZSk7XG4gIH1cblxuICByZXBsYWNlTGFiZWwocHJldmlvdXNMYWJlbDogU3VidGl0bGVMYWJlbCwgbmV3TGFiZWw6IFN1YnRpdGxlTGFiZWwpOiB2b2lkIHtcbiAgICBjb25zdCB7IHJlZ2lvbkNvbnRhaW5lcklkIH0gPSB0aGlzLmdldFJlZ2lvbihwcmV2aW91c0xhYmVsKTtcblxuICAgIHRoaXMuc3VidGl0bGVSZWdpb25Db250YWluZXJzW3JlZ2lvbkNvbnRhaW5lcklkXS5yZW1vdmVMYWJlbChwcmV2aW91c0xhYmVsKTtcbiAgICB0aGlzLnN1YnRpdGxlUmVnaW9uQ29udGFpbmVyc1tyZWdpb25Db250YWluZXJJZF0uYWRkTGFiZWwobmV3TGFiZWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBzdWJ0aXRsZSBsYWJlbCBmcm9tIGEgY29udGFpbmVyLlxuICAgKi9cbiAgcmVtb3ZlTGFiZWwobGFiZWw6IFN1YnRpdGxlTGFiZWwpOiB2b2lkIHtcbiAgICBsZXQgcmVnaW9uQ29udGFpbmVySWQ7XG5cbiAgICBpZiAobGFiZWwudnR0KSB7XG4gICAgICByZWdpb25Db250YWluZXJJZCA9IGxhYmVsLnZ0dC5yZWdpb24gJiYgbGFiZWwudnR0LnJlZ2lvbi5pZCA/IGxhYmVsLnZ0dC5yZWdpb24uaWQgOiAndnR0JztcbiAgICB9IGVsc2Uge1xuICAgICAgcmVnaW9uQ29udGFpbmVySWQgPSBsYWJlbC5yZWdpb24gfHwgJ2RlZmF1bHQnO1xuICAgIH1cblxuICAgIHRoaXMuc3VidGl0bGVSZWdpb25Db250YWluZXJzW3JlZ2lvbkNvbnRhaW5lcklkXS5yZW1vdmVMYWJlbChsYWJlbCk7XG5cbiAgICAvLyBSZW1vdmUgY29udGFpbmVyIGlmIG5vIG1vcmUgbGFiZWxzIGFyZSBkaXNwbGF5ZWRcbiAgICBpZiAodGhpcy5zdWJ0aXRsZVJlZ2lvbkNvbnRhaW5lcnNbcmVnaW9uQ29udGFpbmVySWRdLmlzRW1wdHkoKSkge1xuICAgICAgdGhpcy5zdWJ0aXRsZU92ZXJsYXkucmVtb3ZlQ29tcG9uZW50KHRoaXMuc3VidGl0bGVSZWdpb25Db250YWluZXJzW3JlZ2lvbkNvbnRhaW5lcklkXSk7XG4gICAgICBkZWxldGUgdGhpcy5zdWJ0aXRsZVJlZ2lvbkNvbnRhaW5lcnNbcmVnaW9uQ29udGFpbmVySWRdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBzdWJ0aXRsZSBjb250YWluZXJzLlxuICAgKi9cbiAgY2xlYXIoKTogdm9pZCB7XG4gICAgZm9yIChjb25zdCByZWdpb25OYW1lIGluIHRoaXMuc3VidGl0bGVSZWdpb25Db250YWluZXJzKSB7XG4gICAgICB0aGlzLnN1YnRpdGxlT3ZlcmxheS5yZW1vdmVDb21wb25lbnQodGhpcy5zdWJ0aXRsZVJlZ2lvbkNvbnRhaW5lcnNbcmVnaW9uTmFtZV0pO1xuICAgIH1cblxuICAgIHRoaXMuc3VidGl0bGVSZWdpb25Db250YWluZXJzID0ge307XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN1YnRpdGxlUmVnaW9uQ29udGFpbmVyIGV4dGVuZHMgQ29udGFpbmVyPENvbnRhaW5lckNvbmZpZz4ge1xuICBwcml2YXRlIGxhYmVsQ291bnQgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29udGFpbmVyQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICdzdWJ0aXRsZS1yZWdpb24tY29udGFpbmVyJyxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBhZGRMYWJlbChsYWJlbFRvQWRkOiBTdWJ0aXRsZUxhYmVsLCBvdmVybGF5U2l6ZT86IFNpemUpIHtcbiAgICB0aGlzLmxhYmVsQ291bnQrKztcblxuICAgIGlmIChsYWJlbFRvQWRkLnZ0dCkge1xuICAgICAgaWYgKGxhYmVsVG9BZGQudnR0LnJlZ2lvbiAmJiBvdmVybGF5U2l6ZSkge1xuICAgICAgICBWdHRVdGlscy5zZXRWdHRSZWdpb25TdHlsZXModGhpcywgbGFiZWxUb0FkZC52dHQucmVnaW9uLCBvdmVybGF5U2l6ZSk7XG4gICAgICB9XG5cbiAgICAgIFZ0dFV0aWxzLnNldFZ0dEN1ZUJveFN0eWxlcyhsYWJlbFRvQWRkLCBvdmVybGF5U2l6ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5hZGRDb21wb25lbnQobGFiZWxUb0FkZCk7XG4gICAgdGhpcy51cGRhdGVDb21wb25lbnRzKCk7XG4gIH1cblxuICByZW1vdmVMYWJlbChsYWJlbFRvUmVtb3ZlOiBTdWJ0aXRsZUxhYmVsKTogdm9pZCB7XG4gICAgdGhpcy5sYWJlbENvdW50LS07XG4gICAgdGhpcy5yZW1vdmVDb21wb25lbnQobGFiZWxUb1JlbW92ZSk7XG4gICAgdGhpcy51cGRhdGVDb21wb25lbnRzKCk7XG4gIH1cblxuICBwdWJsaWMgaXNFbXB0eSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5sYWJlbENvdW50ID09PSAwO1xuICB9XG59XG4iLCJpbXBvcnQge1NlbGVjdEJveH0gZnJvbSAnLi9zZWxlY3Rib3gnO1xuaW1wb3J0IHtMaXN0U2VsZWN0b3JDb25maWd9IGZyb20gJy4vbGlzdHNlbGVjdG9yJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge1N1YnRpdGxlU3dpdGNoSGFuZGxlcn0gZnJvbSAnLi4vc3VidGl0bGV1dGlscyc7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIHNlbGVjdCBib3ggcHJvdmlkaW5nIGEgc2VsZWN0aW9uIGJldHdlZW4gYXZhaWxhYmxlIHN1YnRpdGxlIGFuZCBjYXB0aW9uIHRyYWNrcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFN1YnRpdGxlU2VsZWN0Qm94IGV4dGVuZHMgU2VsZWN0Qm94IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IExpc3RTZWxlY3RvckNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzZXM6IFsndWktc3VidGl0bGVzZWxlY3Rib3gnXSxcbiAgICAgIGFyaWFMYWJlbDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3N1YnRpdGxlLnNlbGVjdCcpLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICBuZXcgU3VidGl0bGVTd2l0Y2hIYW5kbGVyKHBsYXllciwgdGhpcywgdWltYW5hZ2VyKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94LCBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcgfSBmcm9tICcuL3N1YnRpdGxlc2V0dGluZ3NlbGVjdGJveCc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi8uLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi8uLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBzZWxlY3QgYm94IHByb3ZpZGluZyBhIHNlbGVjdGlvbiBvZiBkaWZmZXJlbnQgYmFja2dyb3VuZCBjb2xvcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBCYWNrZ3JvdW5kQ29sb3JTZWxlY3RCb3ggZXh0ZW5kcyBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3gge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzZXM6IFsndWktc3VidGl0bGVzZXR0aW5nc2JhY2tncm91bmRjb2xvcnNlbGVjdGJveCddLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICB0aGlzLmFkZEl0ZW0obnVsbCwgaTE4bi5nZXRMb2NhbGl6ZXIoJ2RlZmF1bHQnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCd3aGl0ZScsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMud2hpdGUnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdibGFjaycsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMuYmxhY2snKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdyZWQnLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLnJlZCcpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ2dyZWVuJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy5ncmVlbicpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ2JsdWUnLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLmJsdWUnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdjeWFuJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy5jeWFuJykpO1xuICAgIHRoaXMuYWRkSXRlbSgneWVsbG93JywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy55ZWxsb3cnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdtYWdlbnRhJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy5tYWdlbnRhJykpO1xuXG4gICAgbGV0IHNldENvbG9yQW5kT3BhY2l0eSA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kQ29sb3IuaXNTZXQoKSAmJiB0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kT3BhY2l0eS5pc1NldCgpKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlT3ZlcmxheUNsYXNzKFxuICAgICAgICAgICdiZ2NvbG9yLScgKyB0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kQ29sb3IudmFsdWUgKyB0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kT3BhY2l0eS52YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRvZ2dsZU92ZXJsYXlDbGFzcyhudWxsKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5vbkl0ZW1TZWxlY3RlZC5zdWJzY3JpYmUoKHNlbmRlciwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmJhY2tncm91bmRDb2xvci52YWx1ZSA9IGtleTtcbiAgICB9KTtcblxuICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmJhY2tncm91bmRDb2xvci5vbkNoYW5nZWQuc3Vic2NyaWJlKChzZW5kZXIsIHByb3BlcnR5KSA9PiB7XG4gICAgICAvLyBDb2xvciBhbmQgb3BhY2l0eSBnbyB0b2dldGhlciwgc28gd2UgbmVlZCB0by4uLlxuICAgICAgaWYgKCF0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kQ29sb3IuaXNTZXQoKSkge1xuICAgICAgICAvLyAuLi4gY2xlYXIgdGhlIG9wYWNpdHkgd2hlbiB0aGUgY29sb3IgaXMgbm90IHNldFxuICAgICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kT3BhY2l0eS5jbGVhcigpO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5zZXR0aW5nc01hbmFnZXIuYmFja2dyb3VuZE9wYWNpdHkuaXNTZXQoKSkge1xuICAgICAgICAvLyAuLi4gc2V0IGFuIG9wYWNpdHkgd2hlbiB0aGUgY29sb3IgaXMgc2V0XG4gICAgICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmJhY2tncm91bmRPcGFjaXR5LnZhbHVlID0gJzEwMCc7XG4gICAgICB9XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0ocHJvcGVydHkudmFsdWUpO1xuICAgICAgc2V0Q29sb3JBbmRPcGFjaXR5KCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kT3BhY2l0eS5vbkNoYW5nZWQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHNldENvbG9yQW5kT3BhY2l0eSgpO1xuICAgIH0pO1xuXG4gICAgLy8gTG9hZCBpbml0aWFsIHZhbHVlXG4gICAgaWYgKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmJhY2tncm91bmRDb2xvci5pc1NldCgpKSB7XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0odGhpcy5zZXR0aW5nc01hbmFnZXIuYmFja2dyb3VuZENvbG9yLnZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCwgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnIH0gZnJvbSAnLi9zdWJ0aXRsZXNldHRpbmdzZWxlY3Rib3gnO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEEgc2VsZWN0IGJveCBwcm92aWRpbmcgYSBzZWxlY3Rpb24gb2YgZGlmZmVyZW50IGJhY2tncm91bmQgb3BhY2l0eS5cbiAqL1xuZXhwb3J0IGNsYXNzIEJhY2tncm91bmRPcGFjaXR5U2VsZWN0Qm94IGV4dGVuZHMgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveENvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzc2VzOiBbJ3VpLXN1YnRpdGxlc2V0dGluZ3NiYWNrZ3JvdW5kb3BhY2l0eXNlbGVjdGJveCddLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICB0aGlzLmFkZEl0ZW0obnVsbCwgaTE4bi5nZXRMb2NhbGl6ZXIoJ2RlZmF1bHQnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCcxMDAnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDEwMCB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCc3NScsIGkxOG4uZ2V0TG9jYWxpemVyKCdwZXJjZW50JywgeyB2YWx1ZTogNzUgfSkpO1xuICAgIHRoaXMuYWRkSXRlbSgnNTAnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDUwIH0pKTtcbiAgICB0aGlzLmFkZEl0ZW0oJzI1JywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiAyNSB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCcwJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiAwIH0pKTtcblxuICAgIHRoaXMub25JdGVtU2VsZWN0ZWQuc3Vic2NyaWJlKChzZW5kZXIsIGtleTogc3RyaW5nKSA9PiB7XG4gICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kT3BhY2l0eS52YWx1ZSA9IGtleTtcblxuICAgICAgLy8gQ29sb3IgYW5kIG9wYWNpdHkgZ28gdG9nZXRoZXIsIHNvIHdlIG5lZWQgdG8uLi5cbiAgICAgIGlmICghdGhpcy5zZXR0aW5nc01hbmFnZXIuYmFja2dyb3VuZE9wYWNpdHkuaXNTZXQoKSkge1xuICAgICAgICAvLyAuLi4gY2xlYXIgdGhlIGNvbG9yIHdoZW4gdGhlIG9wYWNpdHkgaXMgbm90IHNldFxuICAgICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kQ29sb3IuY2xlYXIoKTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuc2V0dGluZ3NNYW5hZ2VyLmJhY2tncm91bmRDb2xvci5pc1NldCgpKSB7XG4gICAgICAgIC8vIC4uLiBzZXQgYSBjb2xvciB3aGVuIHRoZSBvcGFjaXR5IGlzIHNldFxuICAgICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kQ29sb3IudmFsdWUgPSAnYmxhY2snO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gVXBkYXRlIHNlbGVjdGVkIGl0ZW0gd2hlbiB2YWx1ZSBpcyBzZXQgZnJvbSBzb21ld2hlcmUgZWxzZVxuICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmJhY2tncm91bmRPcGFjaXR5Lm9uQ2hhbmdlZC5zdWJzY3JpYmUoKHNlbmRlciwgcHJvcGVydHkpID0+IHtcbiAgICAgIHRoaXMuc2VsZWN0SXRlbShwcm9wZXJ0eS52YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvLyBMb2FkIGluaXRpYWwgdmFsdWVcbiAgICBpZiAodGhpcy5zZXR0aW5nc01hbmFnZXIuYmFja2dyb3VuZE9wYWNpdHkuaXNTZXQoKSkge1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmJhY2tncm91bmRPcGFjaXR5LnZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCwgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnIH0gZnJvbSAnLi9zdWJ0aXRsZXNldHRpbmdzZWxlY3Rib3gnO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEEgc2VsZWN0IGJveCBwcm92aWRpbmcgYSBzZWxlY3Rpb24gb2YgZGlmZmVyZW50IGNoYXJhY3RlciBlZGdlLlxuICovXG5leHBvcnQgY2xhc3MgQ2hhcmFjdGVyRWRnZVNlbGVjdEJveCBleHRlbmRzIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3NlczogWyd1aS1zdWJ0aXRsZXNldHRpbmdzY2hhcmFjdGVyZWRnZXNlbGVjdGJveCddLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICB0aGlzLmFkZEl0ZW0obnVsbCwgaTE4bi5nZXRMb2NhbGl6ZXIoJ2RlZmF1bHQnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdyYWlzZWQnLCBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2UucmFpc2VkJykpO1xuICAgIHRoaXMuYWRkSXRlbSgnZGVwcmVzc2VkJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy5jaGFyYWN0ZXJFZGdlLmRlcHJlc3NlZCcpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ3VuaWZvcm0nLCBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2UudW5pZm9ybScpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ2Ryb3BzaGFkb3dlZCcsIGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZS5kcm9wc2hhZG93ZWQnKSk7XG5cbiAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5jaGFyYWN0ZXJFZGdlLm9uQ2hhbmdlZC5zdWJzY3JpYmUoKHNlbmRlciwgcHJvcGVydHkpID0+IHtcbiAgICAgIGlmIChwcm9wZXJ0eS5pc1NldCgpKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlT3ZlcmxheUNsYXNzKCdjaGFyYWN0ZXJlZGdlLScgKyBwcm9wZXJ0eS52YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRvZ2dsZU92ZXJsYXlDbGFzcyhudWxsKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2VsZWN0IHRoZSBpdGVtIGluIGNhc2UgdGhlIHByb3BlcnR5IHdhcyBzZXQgZnJvbSBvdXRzaWRlXG4gICAgICB0aGlzLnNlbGVjdEl0ZW0ocHJvcGVydHkudmFsdWUpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vbkl0ZW1TZWxlY3RlZC5zdWJzY3JpYmUoKHNlbmRlciwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmNoYXJhY3RlckVkZ2UudmFsdWUgPSBrZXk7XG4gICAgfSk7XG5cbiAgICAvLyBMb2FkIGluaXRpYWwgdmFsdWVcbiAgICBpZiAodGhpcy5zZXR0aW5nc01hbmFnZXIuY2hhcmFjdGVyRWRnZS5pc1NldCgpKSB7XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0odGhpcy5zZXR0aW5nc01hbmFnZXIuY2hhcmFjdGVyRWRnZS52YWx1ZSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3gsIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveENvbmZpZyB9IGZyb20gJy4vc3VidGl0bGVzZXR0aW5nc2VsZWN0Ym94JztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uLy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uLy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIHNlbGVjdCBib3ggcHJvdmlkaW5nIGEgc2VsZWN0aW9uIG9mIGRpZmZlcmVudCBmb250IGNvbG9ycy5cbiAqL1xuZXhwb3J0IGNsYXNzIEZvbnRDb2xvclNlbGVjdEJveCBleHRlbmRzIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3NlczogWyd1aS1zdWJ0aXRsZXNldHRpbmdzZm9udGNvbG9yc2VsZWN0Ym94J10sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMuYWRkSXRlbShudWxsLCBpMThuLmdldExvY2FsaXplcignZGVmYXVsdCcpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ3doaXRlJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy53aGl0ZScpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ2JsYWNrJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy5ibGFjaycpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ3JlZCcsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMucmVkJykpO1xuICAgIHRoaXMuYWRkSXRlbSgnZ3JlZW4nLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLmdyZWVuJykpO1xuICAgIHRoaXMuYWRkSXRlbSgnYmx1ZScsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMuYmx1ZScpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ2N5YW4nLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLmN5YW4nKSk7XG4gICAgdGhpcy5hZGRJdGVtKCd5ZWxsb3cnLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLnllbGxvdycpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ21hZ2VudGEnLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLm1hZ2VudGEnKSk7XG5cbiAgICBsZXQgc2V0Q29sb3JBbmRPcGFjaXR5ID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRDb2xvci5pc1NldCgpICYmIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRPcGFjaXR5LmlzU2V0KCkpIHtcbiAgICAgICAgdGhpcy50b2dnbGVPdmVybGF5Q2xhc3MoXG4gICAgICAgICAgJ2ZvbnRjb2xvci0nICsgdGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udENvbG9yLnZhbHVlICsgdGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udE9wYWNpdHkudmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50b2dnbGVPdmVybGF5Q2xhc3MobnVsbCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMub25JdGVtU2VsZWN0ZWQuc3Vic2NyaWJlKChzZW5kZXIsIGtleTogc3RyaW5nKSA9PiB7XG4gICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5mb250Q29sb3IudmFsdWUgPSBrZXk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5mb250Q29sb3Iub25DaGFuZ2VkLnN1YnNjcmliZSgoc2VuZGVyLCBwcm9wZXJ0eSkgPT4ge1xuICAgICAgLy8gQ29sb3IgYW5kIG9wYWNpdHkgZ28gdG9nZXRoZXIsIHNvIHdlIG5lZWQgdG8uLi5cbiAgICAgIGlmICghdGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udENvbG9yLmlzU2V0KCkpIHtcbiAgICAgICAgLy8gLi4uIGNsZWFyIHRoZSBvcGFjaXR5IHdoZW4gdGhlIGNvbG9yIGlzIG5vdCBzZXRcbiAgICAgICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udE9wYWNpdHkuY2xlYXIoKTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRPcGFjaXR5LmlzU2V0KCkpIHtcbiAgICAgICAgLy8gLi4uIHNldCBhbiBvcGFjaXR5IHdoZW4gdGhlIGNvbG9yIGlzIHNldFxuICAgICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5mb250T3BhY2l0eS52YWx1ZSA9ICcxMDAnO1xuICAgICAgfVxuICAgICAgdGhpcy5zZWxlY3RJdGVtKHByb3BlcnR5LnZhbHVlKTtcbiAgICAgIHNldENvbG9yQW5kT3BhY2l0eSgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udE9wYWNpdHkub25DaGFuZ2VkLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBzZXRDb2xvckFuZE9wYWNpdHkoKTtcbiAgICB9KTtcblxuICAgIC8vIExvYWQgaW5pdGlhbCB2YWx1ZVxuICAgIGlmICh0aGlzLnNldHRpbmdzTWFuYWdlci5mb250Q29sb3IuaXNTZXQoKSkge1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRDb2xvci52YWx1ZSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3gsIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveENvbmZpZyB9IGZyb20gJy4vc3VidGl0bGVzZXR0aW5nc2VsZWN0Ym94JztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uLy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uLy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIHNlbGVjdCBib3ggcHJvdmlkaW5nIGEgc2VsZWN0aW9uIG9mIGRpZmZlcmVudCBmb250IGZhbWlseS5cbiAqL1xuZXhwb3J0IGNsYXNzIEZvbnRGYW1pbHlTZWxlY3RCb3ggZXh0ZW5kcyBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3gge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzZXM6IFsndWktc3VidGl0bGVzZXR0aW5nc2ZvbnRmYW1pbHlzZWxlY3Rib3gnXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5hZGRJdGVtKG51bGwsIGkxOG4uZ2V0TG9jYWxpemVyKCdkZWZhdWx0JykpO1xuICAgIHRoaXMuYWRkSXRlbSgnbW9ub3NwYWNlZHNlcmlmJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5tb25vc3BhY2Vkc2VyaWYnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdwcm9wb3J0aW9uYWxzZXJpZicsIGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkucHJvcG9ydGlvbmFsc2VyaWYnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdtb25vc3BhY2Vkc2Fuc3NlcmlmJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5tb25vc3BhY2Vkc2Fuc3NlcmlmJykpO1xuICAgIHRoaXMuYWRkSXRlbSgncHJvcG9ydGlvbmFsc2Fuc3NlcmlmJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5wcm9wb3J0aW9uYWxzZXJpZicpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ2Nhc3VhbCcsIGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkuY2FzdWFsJykpO1xuICAgIHRoaXMuYWRkSXRlbSgnY3Vyc2l2ZScsIGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkuY3Vyc2l2ZScpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ3NtYWxsY2FwaXRhbCcsIGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkuc21hbGxjYXBpdGFsJykpO1xuXG4gICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udEZhbWlseS5vbkNoYW5nZWQuc3Vic2NyaWJlKChzZW5kZXIsIHByb3BlcnR5KSA9PiB7XG4gICAgICBpZiAocHJvcGVydHkuaXNTZXQoKSkge1xuICAgICAgICB0aGlzLnRvZ2dsZU92ZXJsYXlDbGFzcygnZm9udGZhbWlseS0nICsgcHJvcGVydHkudmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50b2dnbGVPdmVybGF5Q2xhc3MobnVsbCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNlbGVjdCB0aGUgaXRlbSBpbiBjYXNlIHRoZSBwcm9wZXJ0eSB3YXMgc2V0IGZyb20gb3V0c2lkZVxuICAgICAgdGhpcy5zZWxlY3RJdGVtKHByb3BlcnR5LnZhbHVlKTtcbiAgICB9KTtcblxuICAgIHRoaXMub25JdGVtU2VsZWN0ZWQuc3Vic2NyaWJlKChzZW5kZXIsIGtleTogc3RyaW5nKSA9PiB7XG4gICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5mb250RmFtaWx5LnZhbHVlID0ga2V5O1xuICAgIH0pO1xuXG4gICAgLy8gTG9hZCBpbml0aWFsIHZhbHVlXG4gICAgaWYgKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRGYW1pbHkuaXNTZXQoKSkge1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRGYW1pbHkudmFsdWUpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94LCBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcgfSBmcm9tICcuL3N1YnRpdGxlc2V0dGluZ3NlbGVjdGJveCc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi8uLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi8uLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBzZWxlY3QgYm94IHByb3ZpZGluZyBhIHNlbGVjdGlvbiBvZiBkaWZmZXJlbnQgZm9udCBjb2xvcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBGb250T3BhY2l0eVNlbGVjdEJveCBleHRlbmRzIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3NlczogWyd1aS1zdWJ0aXRsZXNldHRpbmdzZm9udG9wYWNpdHlzZWxlY3Rib3gnXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5hZGRJdGVtKG51bGwsIGkxOG4uZ2V0TG9jYWxpemVyKCdkZWZhdWx0JykpO1xuICAgIHRoaXMuYWRkSXRlbSgnMTAwJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiAxMDAgfSkpO1xuICAgIHRoaXMuYWRkSXRlbSgnNzUnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDc1IH0pKTtcbiAgICB0aGlzLmFkZEl0ZW0oJzUwJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiA1MCB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCcyNScsIGkxOG4uZ2V0TG9jYWxpemVyKCdwZXJjZW50JywgeyB2YWx1ZTogMjUgfSkpO1xuXG4gICAgdGhpcy5vbkl0ZW1TZWxlY3RlZC5zdWJzY3JpYmUoKHNlbmRlciwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRPcGFjaXR5LnZhbHVlID0ga2V5O1xuXG4gICAgICAvLyBDb2xvciBhbmQgb3BhY2l0eSBnbyB0b2dldGhlciwgc28gd2UgbmVlZCB0by4uLlxuICAgICAgaWYgKCF0aGlzLnNldHRpbmdzTWFuYWdlci5mb250T3BhY2l0eS5pc1NldCgpKSB7XG4gICAgICAgIC8vIC4uLiBjbGVhciB0aGUgY29sb3Igd2hlbiB0aGUgb3BhY2l0eSBpcyBub3Qgc2V0XG4gICAgICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRDb2xvci5jbGVhcigpO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udENvbG9yLmlzU2V0KCkpIHtcbiAgICAgICAgLy8gLi4uIHNldCBhIGNvbG9yIHdoZW4gdGhlIG9wYWNpdHkgaXMgc2V0XG4gICAgICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRDb2xvci52YWx1ZSA9ICd3aGl0ZSc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBVcGRhdGUgc2VsZWN0ZWQgaXRlbSB3aGVuIHZhbHVlIGlzIHNldCBmcm9tIHNvbWV3aGVyZSBlbHNlXG4gICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udE9wYWNpdHkub25DaGFuZ2VkLnN1YnNjcmliZSgoc2VuZGVyLCBwcm9wZXJ0eSkgPT4ge1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKHByb3BlcnR5LnZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8vIExvYWQgaW5pdGlhbCB2YWx1ZVxuICAgIGlmICh0aGlzLnNldHRpbmdzTWFuYWdlci5mb250T3BhY2l0eS5pc1NldCgpKSB7XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0odGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udE9wYWNpdHkudmFsdWUpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94LCBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcgfSBmcm9tICcuL3N1YnRpdGxlc2V0dGluZ3NlbGVjdGJveCc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi8uLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi8uLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBzZWxlY3QgYm94IHByb3ZpZGluZyBhIHNlbGVjdGlvbiBvZiBkaWZmZXJlbnQgZm9udCBjb2xvcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBGb250U2l6ZVNlbGVjdEJveCBleHRlbmRzIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3NlczogWyd1aS1zdWJ0aXRsZXNldHRpbmdzZm9udHNpemVzZWxlY3Rib3gnXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5hZGRJdGVtKG51bGwsIGkxOG4uZ2V0TG9jYWxpemVyKCdkZWZhdWx0JykpO1xuICAgIHRoaXMuYWRkSXRlbSgnNTAnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDUwIH0pKTtcbiAgICB0aGlzLmFkZEl0ZW0oJzc1JywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiA3NSB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCcxMDAnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDEwMCB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCcxNTAnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDE1MCB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCcyMDAnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDIwMCB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCczMDAnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDMwMCB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCc0MDAnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDQwMCB9KSk7XG5cbiAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5mb250U2l6ZS5vbkNoYW5nZWQuc3Vic2NyaWJlKChzZW5kZXIsIHByb3BlcnR5KSA9PiB7XG4gICAgICBpZiAocHJvcGVydHkuaXNTZXQoKSkge1xuICAgICAgICB0aGlzLnRvZ2dsZU92ZXJsYXlDbGFzcygnZm9udHNpemUtJyArIHByb3BlcnR5LnZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudG9nZ2xlT3ZlcmxheUNsYXNzKG51bGwpO1xuICAgICAgfVxuXG4gICAgICAvLyBTZWxlY3QgdGhlIGl0ZW0gaW4gY2FzZSB0aGUgcHJvcGVydHkgd2FzIHNldCBmcm9tIG91dHNpZGVcbiAgICAgIHRoaXMuc2VsZWN0SXRlbShwcm9wZXJ0eS52YWx1ZSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uSXRlbVNlbGVjdGVkLnN1YnNjcmliZSgoc2VuZGVyLCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udFNpemUudmFsdWUgPSBrZXk7XG4gICAgfSk7XG5cbiAgICAvLyBMb2FkIGluaXRpYWwgdmFsdWVcbiAgICBpZiAodGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udFNpemUuaXNTZXQoKSkge1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRTaXplLnZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7U3VidGl0bGVPdmVybGF5fSBmcm9tICcuLi9zdWJ0aXRsZW92ZXJsYXknO1xuaW1wb3J0IHtMaXN0U2VsZWN0b3JDb25maWd9IGZyb20gJy4uL2xpc3RzZWxlY3Rvcic7XG5pbXBvcnQge1NlbGVjdEJveH0gZnJvbSAnLi4vc2VsZWN0Ym94JztcbmltcG9ydCB7U3VidGl0bGVTZXR0aW5nc01hbmFnZXJ9IGZyb20gJy4vc3VidGl0bGVzZXR0aW5nc21hbmFnZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveENvbmZpZyBleHRlbmRzIExpc3RTZWxlY3RvckNvbmZpZyB7XG4gIG92ZXJsYXk6IFN1YnRpdGxlT3ZlcmxheTtcbiAgc2V0dGluZ3NNYW5hZ2VyOiBTdWJ0aXRsZVNldHRpbmdzTWFuYWdlcjtcbn1cblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgc3VidGl0bGVzIHNldHRpbmdzIHNlbGVjdCBib3hcbiAqKi9cbmV4cG9ydCBjbGFzcyBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3ggZXh0ZW5kcyBTZWxlY3RCb3gge1xuXG4gIHByb3RlY3RlZCBzZXR0aW5nc01hbmFnZXI6IFN1YnRpdGxlU2V0dGluZ3NNYW5hZ2VyO1xuICBwcm90ZWN0ZWQgb3ZlcmxheTogU3VidGl0bGVPdmVybGF5O1xuICBwcml2YXRlIGN1cnJlbnRDc3NDbGFzczogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyID0gY29uZmlnLnNldHRpbmdzTWFuYWdlcjtcbiAgICB0aGlzLm92ZXJsYXkgPSBjb25maWcub3ZlcmxheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgcHJldmlvdXNseSBzZXQgY2xhc3MgYW5kIGFkZHMgdGhlIHBhc3NlZCBpbiBjbGFzcy5cbiAgICogQHBhcmFtIGNzc0NsYXNzIFRoZSBuZXcgY2xhc3MgdG8gcmVwbGFjZSB0aGUgcHJldmlvdXMgY2xhc3Mgd2l0aCBvciBudWxsIHRvIGp1c3QgcmVtb3ZlIHRoZSBwcmV2aW91cyBjbGFzc1xuICAgKi9cbiAgcHJvdGVjdGVkIHRvZ2dsZU92ZXJsYXlDbGFzcyhjc3NDbGFzczogc3RyaW5nKTogdm9pZCB7XG4gICAgLy8gUmVtb3ZlIHByZXZpb3VzIGNsYXNzIGlmIGV4aXN0aW5nXG4gICAgaWYgKHRoaXMuY3VycmVudENzc0NsYXNzKSB7XG4gICAgICB0aGlzLm92ZXJsYXkuZ2V0RG9tRWxlbWVudCgpLnJlbW92ZUNsYXNzKHRoaXMuY3VycmVudENzc0NsYXNzKTtcbiAgICAgIHRoaXMuY3VycmVudENzc0NsYXNzID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBBZGQgbmV3IGNsYXNzIGlmIHNwZWNpZmllZC4gSWYgdGhlIG5ldyBjbGFzcyBpcyBudWxsLCB3ZSBkb24ndCBhZGQgYW55dGhpbmcuXG4gICAgaWYgKGNzc0NsYXNzKSB7XG4gICAgICB0aGlzLmN1cnJlbnRDc3NDbGFzcyA9IHRoaXMucHJlZml4Q3NzKGNzc0NsYXNzKTtcbiAgICAgIHRoaXMub3ZlcmxheS5nZXREb21FbGVtZW50KCkuYWRkQ2xhc3ModGhpcy5jdXJyZW50Q3NzQ2xhc3MpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHtMYWJlbENvbmZpZ30gZnJvbSAnLi4vbGFiZWwnO1xuaW1wb3J0IHtDb250YWluZXIsIENvbnRhaW5lckNvbmZpZ30gZnJvbSAnLi4vY29udGFpbmVyJztcbmltcG9ydCB7RE9NfSBmcm9tICcuLi8uLi9kb20nO1xuaW1wb3J0IHtTZXR0aW5nc1BhbmVsUGFnZU9wZW5CdXR0b259IGZyb20gJy4uL3NldHRpbmdzcGFuZWxwYWdlb3BlbmJ1dHRvbic7XG5pbXBvcnQgeyBMb2NhbGl6YWJsZVRleHQsIGkxOG4gfSBmcm9tICcuLi8uLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3VidGl0bGVTZXR0aW5nc0xhYmVsQ29uZmlnIGV4dGVuZHMgTGFiZWxDb25maWcge1xuICBvcGVuZXI6IFNldHRpbmdzUGFuZWxQYWdlT3BlbkJ1dHRvbjtcbn1cblxuZXhwb3J0IGNsYXNzIFN1YnRpdGxlU2V0dGluZ3NMYWJlbCBleHRlbmRzIENvbnRhaW5lcjxDb250YWluZXJDb25maWc+IHtcblxuICBwcml2YXRlIG9wZW5lcjogU2V0dGluZ3NQYW5lbFBhZ2VPcGVuQnV0dG9uO1xuXG4gIHByaXZhdGUgdGV4dDogTG9jYWxpemFibGVUZXh0O1xuXG4gIHByaXZhdGUgZm9yOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTdWJ0aXRsZVNldHRpbmdzTGFiZWxDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5vcGVuZXIgPSBjb25maWcub3BlbmVyO1xuICAgIHRoaXMudGV4dCA9IGNvbmZpZy50ZXh0O1xuICAgIHRoaXMuZm9yID0gY29uZmlnLmZvcjtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyg8Q29udGFpbmVyQ29uZmlnPmNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1sYWJlbCcsXG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIHRoaXMub3BlbmVyLFxuICAgICAgXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdG9Eb21FbGVtZW50KCk6IERPTSB7XG4gICAgbGV0IGxhYmVsRWxlbWVudCA9IG5ldyBET00oJ2xhYmVsJywge1xuICAgICAgJ2lkJzogdGhpcy5jb25maWcuaWQsXG4gICAgICAnY2xhc3MnOiB0aGlzLmdldENzc0NsYXNzZXMoKSxcbiAgICAgICdmb3InOiB0aGlzLmZvcixcbiAgICB9KS5hcHBlbmQoXG4gICAgICBuZXcgRE9NKCdzcGFuJywge30pLmh0bWwoaTE4bi5wZXJmb3JtTG9jYWxpemF0aW9uKHRoaXMudGV4dCkpLFxuICAgICAgdGhpcy5vcGVuZXIuZ2V0RG9tRWxlbWVudCgpLFxuICAgICk7XG5cbiAgICByZXR1cm4gbGFiZWxFbGVtZW50O1xuICB9XG59XG4iLCJpbXBvcnQge1N0b3JhZ2VVdGlsc30gZnJvbSAnLi4vLi4vc3RvcmFnZXV0aWxzJztcbmltcG9ydCB7Q29tcG9uZW50LCBDb21wb25lbnRDb25maWd9IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQge0V2ZW50RGlzcGF0Y2hlciwgRXZlbnR9IGZyb20gJy4uLy4uL2V2ZW50ZGlzcGF0Y2hlcic7XG5cbmludGVyZmFjZSBTdWJ0aXRsZVNldHRpbmdzIHtcbiAgZm9udENvbG9yPzogc3RyaW5nO1xuICBmb250T3BhY2l0eT86IHN0cmluZztcbiAgZm9udEZhbWlseT86IHN0cmluZztcbiAgZm9udFNpemU/OiBzdHJpbmc7XG4gIGNoYXJhY3RlckVkZ2U/OiBzdHJpbmc7XG4gIGJhY2tncm91bmRDb2xvcj86IHN0cmluZztcbiAgYmFja2dyb3VuZE9wYWNpdHk/OiBzdHJpbmc7XG4gIHdpbmRvd0NvbG9yPzogc3RyaW5nO1xuICB3aW5kb3dPcGFjaXR5Pzogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgUHJvcGVydGllcyB7XG4gIFtuYW1lOiBzdHJpbmddOiBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8c3RyaW5nPjtcbn1cblxuZXhwb3J0IGNsYXNzIFN1YnRpdGxlU2V0dGluZ3NNYW5hZ2VyIHtcblxuICBwcml2YXRlIHVzZXJTZXR0aW5nczogU3VidGl0bGVTZXR0aW5ncztcbiAgcHJpdmF0ZSBsb2NhbFN0b3JhZ2VLZXk6IHN0cmluZztcblxuICBwcml2YXRlIF9wcm9wZXJ0aWVzOiBQcm9wZXJ0aWVzID0ge1xuICAgIGZvbnRDb2xvcjogbmV3IFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxzdHJpbmc+KHRoaXMpLFxuICAgIGZvbnRPcGFjaXR5OiBuZXcgU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PHN0cmluZz4odGhpcyksXG4gICAgZm9udEZhbWlseTogbmV3IFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxzdHJpbmc+KHRoaXMpLFxuICAgIGZvbnRTaXplOiBuZXcgU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PHN0cmluZz4odGhpcyksXG4gICAgY2hhcmFjdGVyRWRnZTogbmV3IFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxzdHJpbmc+KHRoaXMpLFxuICAgIGJhY2tncm91bmRDb2xvcjogbmV3IFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxzdHJpbmc+KHRoaXMpLFxuICAgIGJhY2tncm91bmRPcGFjaXR5OiBuZXcgU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PHN0cmluZz4odGhpcyksXG4gICAgd2luZG93Q29sb3I6IG5ldyBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8c3RyaW5nPih0aGlzKSxcbiAgICB3aW5kb3dPcGFjaXR5OiBuZXcgU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PHN0cmluZz4odGhpcyksXG4gIH07XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy51c2VyU2V0dGluZ3MgPSB7fTtcbiAgICB0aGlzLmxvY2FsU3RvcmFnZUtleSA9IER1bW15Q29tcG9uZW50Lmluc3RhbmNlKCkucHJlZml4Q3NzKCdzdWJ0aXRsZXNldHRpbmdzJyk7XG5cbiAgICBmb3IgKGxldCBwcm9wZXJ0eU5hbWUgaW4gdGhpcy5fcHJvcGVydGllcykge1xuICAgICAgdGhpcy5fcHJvcGVydGllc1twcm9wZXJ0eU5hbWVdLm9uQ2hhbmdlZC5zdWJzY3JpYmUoKHNlbmRlciwgcHJvcGVydHkpID0+IHtcbiAgICAgICAgaWYgKHByb3BlcnR5LmlzU2V0KCkpIHtcbiAgICAgICAgICAoPGFueT50aGlzLnVzZXJTZXR0aW5ncylbcHJvcGVydHlOYW1lXSA9IHByb3BlcnR5LnZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIERlbGV0ZSB0aGUgcHJvcGVydHkgZnJvbSB0aGUgc2V0dGluZ3Mgb2JqZWN0IGlmIHVuc2V0IHRvIGF2b2lkIHNlcmlhbGl6YXRpb24gb2YgbnVsbCB2YWx1ZXNcbiAgICAgICAgICBkZWxldGUgKDxhbnk+dGhpcy51c2VyU2V0dGluZ3MpW3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTYXZlIHRoZSBzZXR0aW5ncyBvYmplY3Qgd2hlbiBhIHByb3BlcnR5IGhhcyBjaGFuZ2VkXG4gICAgICAgIHRoaXMuc2F2ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2FkKCk7XG4gIH1cblxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XG4gICAgZm9yIChsZXQgcHJvcGVydHlOYW1lIGluIHRoaXMuX3Byb3BlcnRpZXMpIHtcbiAgICAgIHRoaXMuX3Byb3BlcnRpZXNbcHJvcGVydHlOYW1lXS5jbGVhcigpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXQgZm9udENvbG9yKCk6IFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5fcHJvcGVydGllcy5mb250Q29sb3I7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGZvbnRPcGFjaXR5KCk6IFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5fcHJvcGVydGllcy5mb250T3BhY2l0eTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZm9udEZhbWlseSgpOiBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb3BlcnRpZXMuZm9udEZhbWlseTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZm9udFNpemUoKTogU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLl9wcm9wZXJ0aWVzLmZvbnRTaXplO1xuICB9XG5cbiAgcHVibGljIGdldCBjaGFyYWN0ZXJFZGdlKCk6IFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5fcHJvcGVydGllcy5jaGFyYWN0ZXJFZGdlO1xuICB9XG5cbiAgcHVibGljIGdldCBiYWNrZ3JvdW5kQ29sb3IoKTogU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLl9wcm9wZXJ0aWVzLmJhY2tncm91bmRDb2xvcjtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgYmFja2dyb3VuZE9wYWNpdHkoKTogU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLl9wcm9wZXJ0aWVzLmJhY2tncm91bmRPcGFjaXR5O1xuICB9XG5cbiAgcHVibGljIGdldCB3aW5kb3dDb2xvcigpOiBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb3BlcnRpZXMud2luZG93Q29sb3I7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHdpbmRvd09wYWNpdHkoKTogU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLl9wcm9wZXJ0aWVzLndpbmRvd09wYWNpdHk7XG4gIH1cblxuICAvKipcbiAgICogU2F2ZXMgdGhlIHNldHRpbmdzIHRvIGxvY2FsIHN0b3JhZ2UuXG4gICAqL1xuICBwdWJsaWMgc2F2ZSgpOiB2b2lkIHtcbiAgICBTdG9yYWdlVXRpbHMuc2V0T2JqZWN0KHRoaXMubG9jYWxTdG9yYWdlS2V5LCB0aGlzLnVzZXJTZXR0aW5ncyk7XG4gIH1cblxuICAvKipcbiAgICogTG9hZHMgdGhlIHNldHRpbmdzIGZyb20gbG9jYWwgc3RvcmFnZVxuICAgKi9cbiAgcHVibGljIGxvYWQoKTogdm9pZCB7XG4gICAgdGhpcy51c2VyU2V0dGluZ3MgPSBTdG9yYWdlVXRpbHMuZ2V0T2JqZWN0PFN1YnRpdGxlU2V0dGluZ3M+KHRoaXMubG9jYWxTdG9yYWdlS2V5KSB8fCB7fTtcblxuICAgIC8vIEFwcGx5IHRoZSBsb2FkZWQgc2V0dGluZ3NcbiAgICBmb3IgKGxldCBwcm9wZXJ0eSBpbiB0aGlzLnVzZXJTZXR0aW5ncykge1xuICAgICAgdGhpcy5fcHJvcGVydGllc1twcm9wZXJ0eV0udmFsdWUgPSAoPGFueT50aGlzLnVzZXJTZXR0aW5ncylbcHJvcGVydHldO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEEgZHVtbXkgY29tcG9uZW50IHdob3NlIHNvbGUgcHVycG9zZSBpcyB0byBleHBvc2UgdGhlIHtAbGluayAjcHJlZml4Q3NzfSBtZXRob2QgdG8gdGhlXG4gKiB7QGxpbmsgU3VidGl0bGVTZXR0aW5nc01hbmFnZXJ9LlxuICovXG5jbGFzcyBEdW1teUNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudDxDb21wb25lbnRDb25maWc+IHtcblxuICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IER1bW15Q29tcG9uZW50O1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5zdGFuY2UoKTogRHVtbXlDb21wb25lbnQge1xuICAgIGlmICghRHVtbXlDb21wb25lbnQuX2luc3RhbmNlKSB7XG4gICAgICBEdW1teUNvbXBvbmVudC5faW5zdGFuY2UgPSBuZXcgRHVtbXlDb21wb25lbnQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gRHVtbXlDb21wb25lbnQuX2luc3RhbmNlO1xuICB9XG5cbiAgcHVibGljIHByZWZpeENzcyhjc3NDbGFzc09ySWQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHN1cGVyLnByZWZpeENzcyhjc3NDbGFzc09ySWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8VD4ge1xuXG4gIHByaXZhdGUgX21hbmFnZXI6IFN1YnRpdGxlU2V0dGluZ3NNYW5hZ2VyO1xuICBwcml2YXRlIF9vbkNoYW5nZWQ6IEV2ZW50RGlzcGF0Y2hlcjxTdWJ0aXRsZVNldHRpbmdzTWFuYWdlciwgU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PFQ+PjtcbiAgcHJpdmF0ZSBfdmFsdWU6IFQ7XG5cbiAgY29uc3RydWN0b3IobWFuYWdlcjogU3VidGl0bGVTZXR0aW5nc01hbmFnZXIpIHtcbiAgICB0aGlzLl9tYW5hZ2VyID0gbWFuYWdlcjtcbiAgICB0aGlzLl9vbkNoYW5nZWQgPSBuZXcgRXZlbnREaXNwYXRjaGVyPFN1YnRpdGxlU2V0dGluZ3NNYW5hZ2VyLCBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8VD4+KCk7XG4gIH1cblxuICBwdWJsaWMgaXNTZXQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlICE9IG51bGw7XG4gIH1cblxuICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5fdmFsdWUgPSBudWxsO1xuICAgIHRoaXMub25DaGFuZ2VkRXZlbnQobnVsbCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHZhbHVlKCk6IFQge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgdmFsdWUodmFsdWU6IFQpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZSA9PT0gJ251bGwnKSB7XG4gICAgICB2YWx1ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLm9uQ2hhbmdlZEV2ZW50KHZhbHVlKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkNoYW5nZWRFdmVudCh2YWx1ZTogVCkge1xuICAgIHRoaXMuX29uQ2hhbmdlZC5kaXNwYXRjaCh0aGlzLl9tYW5hZ2VyLCB0aGlzKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgb25DaGFuZ2VkKCk6IEV2ZW50PFN1YnRpdGxlU2V0dGluZ3NNYW5hZ2VyLCBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8VD4+IHtcbiAgICByZXR1cm4gdGhpcy5fb25DaGFuZ2VkLmdldEV2ZW50KCk7XG4gIH1cbn0iLCJpbXBvcnQge1NldHRpbmdzUGFuZWxQYWdlfSBmcm9tICcuLi9zZXR0aW5nc3BhbmVscGFnZSc7XG5pbXBvcnQge1NldHRpbmdzUGFuZWx9IGZyb20gJy4uL3NldHRpbmdzcGFuZWwnO1xuaW1wb3J0IHtTdWJ0aXRsZU92ZXJsYXl9IGZyb20gJy4uL3N1YnRpdGxlb3ZlcmxheSc7XG5pbXBvcnQge0NvbnRhaW5lckNvbmZpZ30gZnJvbSAnLi4vY29udGFpbmVyJztcbmltcG9ydCB7U3VidGl0bGVTZXR0aW5nc01hbmFnZXJ9IGZyb20gJy4vc3VidGl0bGVzZXR0aW5nc21hbmFnZXInO1xuaW1wb3J0IHtDb21wb25lbnQsIENvbXBvbmVudENvbmZpZ30gZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCB7Rm9udFNpemVTZWxlY3RCb3h9IGZyb20gJy4vZm9udHNpemVzZWxlY3Rib3gnO1xuaW1wb3J0IHtGb250RmFtaWx5U2VsZWN0Qm94fSBmcm9tICcuL2ZvbnRmYW1pbHlzZWxlY3Rib3gnO1xuaW1wb3J0IHtGb250Q29sb3JTZWxlY3RCb3h9IGZyb20gJy4vZm9udGNvbG9yc2VsZWN0Ym94JztcbmltcG9ydCB7Rm9udE9wYWNpdHlTZWxlY3RCb3h9IGZyb20gJy4vZm9udG9wYWNpdHlzZWxlY3Rib3gnO1xuaW1wb3J0IHtDaGFyYWN0ZXJFZGdlU2VsZWN0Qm94fSBmcm9tICcuL2NoYXJhY3RlcmVkZ2VzZWxlY3Rib3gnO1xuaW1wb3J0IHtCYWNrZ3JvdW5kQ29sb3JTZWxlY3RCb3h9IGZyb20gJy4vYmFja2dyb3VuZGNvbG9yc2VsZWN0Ym94JztcbmltcG9ydCB7QmFja2dyb3VuZE9wYWNpdHlTZWxlY3RCb3h9IGZyb20gJy4vYmFja2dyb3VuZG9wYWNpdHlzZWxlY3Rib3gnO1xuaW1wb3J0IHtXaW5kb3dDb2xvclNlbGVjdEJveH0gZnJvbSAnLi93aW5kb3djb2xvcnNlbGVjdGJveCc7XG5pbXBvcnQge1dpbmRvd09wYWNpdHlTZWxlY3RCb3h9IGZyb20gJy4vd2luZG93b3BhY2l0eXNlbGVjdGJveCc7XG5pbXBvcnQge1N1YnRpdGxlU2V0dGluZ3NSZXNldEJ1dHRvbn0gZnJvbSAnLi9zdWJ0aXRsZXNldHRpbmdzcmVzZXRidXR0b24nO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7U2V0dGluZ3NQYW5lbFBhZ2VCYWNrQnV0dG9ufSBmcm9tICcuLi9zZXR0aW5nc3BhbmVscGFnZWJhY2tidXR0b24nO1xuaW1wb3J0IHtTZXR0aW5nc1BhbmVsSXRlbX0gZnJvbSAnLi4vc2V0dGluZ3NwYW5lbGl0ZW0nO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi8uLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3VidGl0bGVTZXR0aW5nc1BhbmVsUGFnZUNvbmZpZyBleHRlbmRzIENvbnRhaW5lckNvbmZpZyB7XG4gIHNldHRpbmdzUGFuZWw6IFNldHRpbmdzUGFuZWw7XG4gIG92ZXJsYXk6IFN1YnRpdGxlT3ZlcmxheTtcbn1cblxuZXhwb3J0IGNsYXNzIFN1YnRpdGxlU2V0dGluZ3NQYW5lbFBhZ2UgZXh0ZW5kcyBTZXR0aW5nc1BhbmVsUGFnZSB7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBvdmVybGF5OiBTdWJ0aXRsZU92ZXJsYXk7XG4gIHByaXZhdGUgcmVhZG9ubHkgc2V0dGluZ3NQYW5lbDogU2V0dGluZ3NQYW5lbDtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFN1YnRpdGxlU2V0dGluZ3NQYW5lbFBhZ2VDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5vdmVybGF5ID0gY29uZmlnLm92ZXJsYXk7XG4gICAgdGhpcy5zZXR0aW5nc1BhbmVsID0gY29uZmlnLnNldHRpbmdzUGFuZWw7XG5cbiAgICBsZXQgbWFuYWdlciA9IG5ldyBTdWJ0aXRsZVNldHRpbmdzTWFuYWdlcigpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY29tcG9uZW50czogPENvbXBvbmVudDxDb21wb25lbnRDb25maWc+W10+W1xuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250LnNpemUnKSwgbmV3IEZvbnRTaXplU2VsZWN0Qm94KHtcbiAgICAgICAgICBvdmVybGF5OiB0aGlzLm92ZXJsYXksIHNldHRpbmdzTWFuYWdlcjogbWFuYWdlcixcbiAgICAgICAgfSkpLFxuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseScpLCBuZXcgRm9udEZhbWlseVNlbGVjdEJveCh7XG4gICAgICAgICAgb3ZlcmxheTogdGhpcy5vdmVybGF5LCBzZXR0aW5nc01hbmFnZXI6IG1hbmFnZXIsXG4gICAgICAgIH0pKSxcbiAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5jb2xvcicpLCBuZXcgRm9udENvbG9yU2VsZWN0Qm94KHtcbiAgICAgICAgICBvdmVybGF5OiB0aGlzLm92ZXJsYXksIHNldHRpbmdzTWFuYWdlcjogbWFuYWdlcixcbiAgICAgICAgfSkpLFxuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250Lm9wYWNpdHknKSwgbmV3IEZvbnRPcGFjaXR5U2VsZWN0Qm94KHtcbiAgICAgICAgICBvdmVybGF5OiB0aGlzLm92ZXJsYXksIHNldHRpbmdzTWFuYWdlcjogbWFuYWdlcixcbiAgICAgICAgfSkpLFxuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy5jaGFyYWN0ZXJFZGdlJyksIG5ldyBDaGFyYWN0ZXJFZGdlU2VsZWN0Qm94KHtcbiAgICAgICAgICBvdmVybGF5OiB0aGlzLm92ZXJsYXksIHNldHRpbmdzTWFuYWdlcjogbWFuYWdlcixcbiAgICAgICAgfSkpLFxuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy5iYWNrZ3JvdW5kLmNvbG9yJyksIG5ldyBCYWNrZ3JvdW5kQ29sb3JTZWxlY3RCb3goe1xuICAgICAgICAgIG92ZXJsYXk6IHRoaXMub3ZlcmxheSwgc2V0dGluZ3NNYW5hZ2VyOiBtYW5hZ2VyLFxuICAgICAgICB9KSksXG4gICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbShpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzLmJhY2tncm91bmQub3BhY2l0eScpLCBuZXcgQmFja2dyb3VuZE9wYWNpdHlTZWxlY3RCb3goe1xuICAgICAgICAgIG92ZXJsYXk6IHRoaXMub3ZlcmxheSwgc2V0dGluZ3NNYW5hZ2VyOiBtYW5hZ2VyLFxuICAgICAgICB9KSksXG4gICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbShpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzLndpbmRvdy5jb2xvcicpLCBuZXcgV2luZG93Q29sb3JTZWxlY3RCb3goe1xuICAgICAgICAgIG92ZXJsYXk6IHRoaXMub3ZlcmxheSwgc2V0dGluZ3NNYW5hZ2VyOiBtYW5hZ2VyLFxuICAgICAgICB9KSksXG4gICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbShpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzLndpbmRvdy5vcGFjaXR5JyksIG5ldyBXaW5kb3dPcGFjaXR5U2VsZWN0Qm94KHtcbiAgICAgICAgICBvdmVybGF5OiB0aGlzLm92ZXJsYXksIHNldHRpbmdzTWFuYWdlcjogbWFuYWdlcixcbiAgICAgICAgfSkpLFxuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0obmV3IFNldHRpbmdzUGFuZWxQYWdlQmFja0J1dHRvbih7XG4gICAgICAgICAgY29udGFpbmVyOiB0aGlzLnNldHRpbmdzUGFuZWwsXG4gICAgICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ2JhY2snKSxcbiAgICAgICAgfSksIG5ldyBTdWJ0aXRsZVNldHRpbmdzUmVzZXRCdXR0b24oe1xuICAgICAgICAgIHNldHRpbmdzTWFuYWdlcjogbWFuYWdlcixcbiAgICAgICAgfSksIHtcbiAgICAgICAgICByb2xlOiAnbWVudWJhcicsXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5vbkFjdGl2ZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5vdmVybGF5LmVuYWJsZVByZXZpZXdTdWJ0aXRsZUxhYmVsKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uSW5hY3RpdmUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMub3ZlcmxheS5yZW1vdmVQcmV2aWV3U3VidGl0bGVMYWJlbCgpO1xuICAgIH0pO1xuICB9XG59IiwiaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7U3VidGl0bGVTZXR0aW5nc01hbmFnZXJ9IGZyb20gJy4vc3VidGl0bGVzZXR0aW5nc21hbmFnZXInO1xuaW1wb3J0IHtCdXR0b24sIEJ1dHRvbkNvbmZpZ30gZnJvbSAnLi4vYnV0dG9uJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN1YnRpdGxlU2V0dGluZ3NSZXNldEJ1dHRvbkNvbmZpZyBleHRlbmRzIEJ1dHRvbkNvbmZpZyB7XG4gIHNldHRpbmdzTWFuYWdlcjogU3VidGl0bGVTZXR0aW5nc01hbmFnZXI7XG59XG5cbi8qKlxuICogQSBidXR0b24gdGhhdCByZXNldHMgYWxsIHN1YnRpdGxlIHNldHRpbmdzIHRvIHRoZWlyIGRlZmF1bHRzLlxuICovXG5leHBvcnQgY2xhc3MgU3VidGl0bGVTZXR0aW5nc1Jlc2V0QnV0dG9uIGV4dGVuZHMgQnV0dG9uPEJ1dHRvbkNvbmZpZz4ge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU3VidGl0bGVTZXR0aW5nc1Jlc2V0QnV0dG9uQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktc3VidGl0bGVzZXR0aW5nc3Jlc2V0YnV0dG9uJyxcbiAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdyZXNldCcpLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICg8U3VidGl0bGVTZXR0aW5nc1Jlc2V0QnV0dG9uQ29uZmlnPnRoaXMuY29uZmlnKS5zZXR0aW5nc01hbmFnZXIucmVzZXQoKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94LCBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcgfSBmcm9tICcuL3N1YnRpdGxlc2V0dGluZ3NlbGVjdGJveCc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi8uLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi8uLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBzZWxlY3QgYm94IHByb3ZpZGluZyBhIHNlbGVjdGlvbiBvZiBkaWZmZXJlbnQgYmFja2dyb3VuZCBjb2xvcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBXaW5kb3dDb2xvclNlbGVjdEJveCBleHRlbmRzIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3NlczogWyd1aS1zdWJ0aXRsZXNldHRpbmdzd2luZG93Y29sb3JzZWxlY3Rib3gnXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5hZGRJdGVtKG51bGwsIGkxOG4uZ2V0TG9jYWxpemVyKCdkZWZhdWx0JykpO1xuICAgIHRoaXMuYWRkSXRlbSgnd2hpdGUnLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLndoaXRlJykpO1xuICAgIHRoaXMuYWRkSXRlbSgnYmxhY2snLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLmJsYWNrJykpO1xuICAgIHRoaXMuYWRkSXRlbSgncmVkJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy5yZWQnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdncmVlbicsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMuZ3JlZW4nKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdibHVlJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy5ibHVlJykpO1xuICAgIHRoaXMuYWRkSXRlbSgnY3lhbicsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMuY3lhbicpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ3llbGxvdycsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMueWVsbG93JykpO1xuICAgIHRoaXMuYWRkSXRlbSgnbWFnZW50YScsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMubWFnZW50YScpKTtcblxuXG5cbiAgICBsZXQgc2V0Q29sb3JBbmRPcGFjaXR5ID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLndpbmRvd0NvbG9yLmlzU2V0KCkgJiYgdGhpcy5zZXR0aW5nc01hbmFnZXIud2luZG93T3BhY2l0eS5pc1NldCgpKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlT3ZlcmxheUNsYXNzKFxuICAgICAgICAgICd3aW5kb3djb2xvci0nICsgdGhpcy5zZXR0aW5nc01hbmFnZXIud2luZG93Q29sb3IudmFsdWUgKyB0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dPcGFjaXR5LnZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudG9nZ2xlT3ZlcmxheUNsYXNzKG51bGwpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLm9uSXRlbVNlbGVjdGVkLnN1YnNjcmliZSgoc2VuZGVyLCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgdGhpcy5zZXR0aW5nc01hbmFnZXIud2luZG93Q29sb3IudmFsdWUgPSBrZXk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dDb2xvci5vbkNoYW5nZWQuc3Vic2NyaWJlKChzZW5kZXIsIHByb3BlcnR5KSA9PiB7XG4gICAgICAvLyBDb2xvciBhbmQgb3BhY2l0eSBnbyB0b2dldGhlciwgc28gd2UgbmVlZCB0by4uLlxuICAgICAgaWYgKCF0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dDb2xvci5pc1NldCgpKSB7XG4gICAgICAgIC8vIC4uLiBjbGVhciB0aGUgb3BhY2l0eSB3aGVuIHRoZSBjb2xvciBpcyBub3Qgc2V0XG4gICAgICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLndpbmRvd09wYWNpdHkuY2xlYXIoKTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuc2V0dGluZ3NNYW5hZ2VyLndpbmRvd09wYWNpdHkuaXNTZXQoKSkge1xuICAgICAgICAvLyAuLi4gc2V0IGFuIG9wYWNpdHkgd2hlbiB0aGUgY29sb3IgaXMgc2V0XG4gICAgICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLndpbmRvd09wYWNpdHkudmFsdWUgPSAnMTAwJztcbiAgICAgIH1cbiAgICAgIHRoaXMuc2VsZWN0SXRlbShwcm9wZXJ0eS52YWx1ZSk7XG4gICAgICBzZXRDb2xvckFuZE9wYWNpdHkoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLndpbmRvd09wYWNpdHkub25DaGFuZ2VkLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBzZXRDb2xvckFuZE9wYWNpdHkoKTtcbiAgICB9KTtcblxuICAgIC8vIExvYWQgaW5pdGlhbCB2YWx1ZVxuICAgIGlmICh0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dDb2xvci5pc1NldCgpKSB7XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0odGhpcy5zZXR0aW5nc01hbmFnZXIud2luZG93Q29sb3IudmFsdWUpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94LCBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcgfSBmcm9tICcuL3N1YnRpdGxlc2V0dGluZ3NlbGVjdGJveCc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi8uLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi8uLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBzZWxlY3QgYm94IHByb3ZpZGluZyBhIHNlbGVjdGlvbiBvZiBkaWZmZXJlbnQgYmFja2dyb3VuZCBvcGFjaXR5LlxuICovXG5leHBvcnQgY2xhc3MgV2luZG93T3BhY2l0eVNlbGVjdEJveCBleHRlbmRzIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3NlczogWyd1aS1zdWJ0aXRsZXNldHRpbmdzd2luZG93b3BhY2l0eXNlbGVjdGJveCddLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICB0aGlzLmFkZEl0ZW0obnVsbCwgaTE4bi5nZXRMb2NhbGl6ZXIoJ2RlZmF1bHQnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCcxMDAnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDEwMCB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCc3NScsIGkxOG4uZ2V0TG9jYWxpemVyKCdwZXJjZW50JywgeyB2YWx1ZTogNzUgfSkpO1xuICAgIHRoaXMuYWRkSXRlbSgnNTAnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDUwIH0pKTtcbiAgICB0aGlzLmFkZEl0ZW0oJzI1JywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiAyNSB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCcwJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiAwIH0pKTtcblxuICAgIHRoaXMub25JdGVtU2VsZWN0ZWQuc3Vic2NyaWJlKChzZW5kZXIsIGtleTogc3RyaW5nKSA9PiB7XG4gICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dPcGFjaXR5LnZhbHVlID0ga2V5O1xuXG4gICAgICAvLyBDb2xvciBhbmQgb3BhY2l0eSBnbyB0b2dldGhlciwgc28gd2UgbmVlZCB0by4uLlxuICAgICAgaWYgKCF0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dPcGFjaXR5LmlzU2V0KCkpIHtcbiAgICAgICAgLy8gLi4uIGNsZWFyIHRoZSBjb2xvciB3aGVuIHRoZSBvcGFjaXR5IGlzIG5vdCBzZXRcbiAgICAgICAgdGhpcy5zZXR0aW5nc01hbmFnZXIud2luZG93Q29sb3IuY2xlYXIoKTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuc2V0dGluZ3NNYW5hZ2VyLndpbmRvd0NvbG9yLmlzU2V0KCkpIHtcbiAgICAgICAgLy8gLi4uIHNldCBhIGNvbG9yIHdoZW4gdGhlIG9wYWNpdHkgaXMgc2V0XG4gICAgICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLndpbmRvd0NvbG9yLnZhbHVlID0gJ2JsYWNrJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFVwZGF0ZSBzZWxlY3RlZCBpdGVtIHdoZW4gdmFsdWUgaXMgc2V0IGZyb20gc29tZXdoZXJlIGVsc2VcbiAgICB0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dPcGFjaXR5Lm9uQ2hhbmdlZC5zdWJzY3JpYmUoKHNlbmRlciwgcHJvcGVydHkpID0+IHtcbiAgICAgIHRoaXMuc2VsZWN0SXRlbShwcm9wZXJ0eS52YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvLyBMb2FkIGluaXRpYWwgdmFsdWVcbiAgICBpZiAodGhpcy5zZXR0aW5nc01hbmFnZXIud2luZG93T3BhY2l0eS5pc1NldCgpKSB7XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0odGhpcy5zZXR0aW5nc01hbmFnZXIud2luZG93T3BhY2l0eS52YWx1ZSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgRE9NIH0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7IENvbXBvbmVudENvbmZpZyB9IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCB7IFRpbWVsaW5lTWFya2VyIH0gZnJvbSAnLi4vdWljb25maWcnO1xuaW1wb3J0IHsgU2Vla0Jhck1hcmtlciB9IGZyb20gJy4vc2Vla2Jhcic7XG5pbXBvcnQgeyBQbGF5ZXJVdGlscyB9IGZyb20gJy4uL3BsYXllcnV0aWxzJztcbmltcG9ydCB7IFRpbWVvdXQgfSBmcm9tICcuLi90aW1lb3V0JztcblxuZXhwb3J0IGludGVyZmFjZSBNYXJrZXJzQ29uZmlnIGV4dGVuZHMgQ29tcG9uZW50Q29uZmlnIHtcbiAgLyoqXG4gICAqIFVzZWQgZm9yIHNlZWtCYXIgbWFya2VyIHNuYXBwaW5nIHJhbmdlIHBlcmNlbnRhZ2VcbiAgICovXG4gIHNuYXBwaW5nUmFuZ2U/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBUaW1lbGluZU1hcmtlcnNIYW5kbGVyIHtcbiAgcHJpdmF0ZSBtYXJrZXJzQ29udGFpbmVyOiBET007XG4gIHByaXZhdGUgdGltZWxpbmVNYXJrZXJzOiBTZWVrQmFyTWFya2VyW107XG4gIHByaXZhdGUgcGxheWVyOiBQbGF5ZXJBUEk7XG4gIHByaXZhdGUgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcjtcbiAgcHJpdmF0ZSBwYXVzZWRUaW1lc2hpZnRVcGRhdGVyOiBUaW1lb3V0O1xuICBwcml2YXRlIGdldFNlZWtCYXJXaWR0aDogKCkgPT4gbnVtYmVyO1xuICBwcm90ZWN0ZWQgY29uZmlnOiBNYXJrZXJzQ29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogTWFya2Vyc0NvbmZpZywgZ2V0U2Vla0JhcldpZHRoOiAoKSA9PiBudW1iZXIsIG1hcmtlcnNDb250YWluZXI6IERPTSkge1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMuZ2V0U2Vla0JhcldpZHRoID0gZ2V0U2Vla0JhcldpZHRoO1xuICAgIHRoaXMubWFya2Vyc0NvbnRhaW5lciA9IG1hcmtlcnNDb250YWluZXI7XG4gICAgdGhpcy50aW1lbGluZU1hcmtlcnMgPSBbXTtcbiAgfVxuXG4gIHB1YmxpYyBpbml0aWFsaXplKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKSB7XG4gICAgdGhpcy5wbGF5ZXIgPSBwbGF5ZXI7XG4gICAgdGhpcy51aW1hbmFnZXIgPSB1aW1hbmFnZXI7XG4gICAgdGhpcy5jb25maWd1cmVNYXJrZXJzKCk7XG4gIH1cblxuICBwcml2YXRlIGNvbmZpZ3VyZU1hcmtlcnMoKTogdm9pZCB7XG4gICAgLy8gUmVtb3ZlIG1hcmtlcnMgd2hlbiB1bmxvYWRlZFxuICAgIHRoaXMucGxheWVyLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU291cmNlVW5sb2FkZWQsICgpID0+IHRoaXMuY2xlYXJNYXJrZXJzKCkpO1xuICAgIHRoaXMucGxheWVyLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQWRCcmVha1N0YXJ0ZWQsICgpID0+IHRoaXMuY2xlYXJNYXJrZXJzKCkpO1xuICAgIHRoaXMucGxheWVyLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQWRCcmVha0ZpbmlzaGVkLCAoKSA9PiB0aGlzLnVwZGF0ZU1hcmtlcnMoKSk7XG4gICAgLy8gVXBkYXRlIG1hcmtlcnMgd2hlbiB0aGUgc2l6ZSBvZiB0aGUgc2Vla2JhciBjaGFuZ2VzXG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5ZXJSZXNpemVkLCAoKSA9PiB0aGlzLnVwZGF0ZU1hcmtlcnNET00oKSk7XG5cbiAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZUxvYWRlZCwgKCkgPT4ge1xuICAgICAgaWYgKHRoaXMucGxheWVyLmlzTGl2ZSgpKSB7XG4gICAgICAgIC8vIFVwZGF0ZSBtYXJrZXIgcG9zaXRpb24gYXMgdGltZXNoaWZ0IHJhbmdlIGNoYW5nZXNcbiAgICAgICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5UaW1lQ2hhbmdlZCwgKCkgPT4gdGhpcy51cGRhdGVNYXJrZXJzKCkpO1xuICAgICAgICAvLyBVcGRhdGUgbWFya2VyIHBvc3Rpb24gd2hlbiBwYXVzZWQgYXMgdGltZXNoaWZ0IHJhbmdlIGNoYW5nZXNcbiAgICAgICAgdGhpcy5jb25maWd1cmVMaXZlUGF1c2VkVGltZXNoaWZ0VXBkYXRlcigoKSA9PiB0aGlzLnVwZGF0ZU1hcmtlcnMoKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy51aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUoKCkgPT4gdGhpcy51cGRhdGVNYXJrZXJzKCkpO1xuICAgIHRoaXMudWltYW5hZ2VyLm9uUmVsZWFzZS5zdWJzY3JpYmUoKCkgPT4gdGhpcy51aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC51bnN1YnNjcmliZSgoKSA9PiB0aGlzLnVwZGF0ZU1hcmtlcnMoKSkpO1xuXG4gICAgLy8gSW5pdCBtYXJrZXJzIGF0IHN0YXJ0dXBcbiAgICB0aGlzLnVwZGF0ZU1hcmtlcnMoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRNYXJrZXJBdFBvc2l0aW9uKHBlcmNlbnRhZ2U6IG51bWJlcik6IFNlZWtCYXJNYXJrZXIgfCBudWxsIHtcbiAgICBjb25zdCBzbmFwcGluZ1JhbmdlID0gdGhpcy5jb25maWcuc25hcHBpbmdSYW5nZTtcblxuICAgIGNvbnN0IG1hdGNoaW5nTWFya2VyID0gdGhpcy50aW1lbGluZU1hcmtlcnMuZmluZChtYXJrZXIgPT4ge1xuICAgICAgY29uc3QgaGFzRHVyYXRpb24gPSBtYXJrZXIuZHVyYXRpb24gPiAwO1xuICAgICAgLy8gSGFuZGxlIGludGVydmFsIG1hcmtlcnNcbiAgICAgIGNvbnN0IGludGVydmFsTWFya2VyTWF0Y2ggPVxuICAgICAgICBoYXNEdXJhdGlvbiAmJlxuICAgICAgICBwZXJjZW50YWdlID49IG1hcmtlci5wb3NpdGlvbiAtIHNuYXBwaW5nUmFuZ2UgJiZcbiAgICAgICAgcGVyY2VudGFnZSA8PSBtYXJrZXIucG9zaXRpb24gKyBtYXJrZXIuZHVyYXRpb24gKyBzbmFwcGluZ1JhbmdlO1xuXG4gICAgICAvLyBIYW5kbGUgcG9zaXRpb24gbWFya2Vyc1xuICAgICAgY29uc3QgcG9zaXRpb25NYXJrZXJNYXRjaCA9XG4gICAgICAgIHBlcmNlbnRhZ2UgPj0gbWFya2VyLnBvc2l0aW9uIC0gc25hcHBpbmdSYW5nZSAmJlxuICAgICAgICBwZXJjZW50YWdlIDw9IG1hcmtlci5wb3NpdGlvbiArIHNuYXBwaW5nUmFuZ2U7XG5cbiAgICAgIHJldHVybiBpbnRlcnZhbE1hcmtlck1hdGNoIHx8IHBvc2l0aW9uTWFya2VyTWF0Y2g7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWF0Y2hpbmdNYXJrZXIgfHwgbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgY2xlYXJNYXJrZXJzKCk6IHZvaWQge1xuICAgIHRoaXMudGltZWxpbmVNYXJrZXJzID0gW107XG4gICAgdGhpcy5tYXJrZXJzQ29udGFpbmVyLmVtcHR5KCk7XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZU1hcmtlckZyb21Db25maWcobWFya2VyOiBUaW1lbGluZU1hcmtlcik6IHZvaWQge1xuICAgIHRoaXMudWltYW5hZ2VyLmdldENvbmZpZygpLm1ldGFkYXRhLm1hcmtlcnMgPSB0aGlzLnVpbWFuYWdlci5nZXRDb25maWcoKS5tZXRhZGF0YS5tYXJrZXJzLmZpbHRlcihfbWFya2VyID0+IG1hcmtlciAhPT0gX21hcmtlcik7XG4gIH1cblxuICBwcml2YXRlIGZpbHRlclJlbW92ZWRNYXJrZXJzKCk6IHZvaWQge1xuICAgIHRoaXMudGltZWxpbmVNYXJrZXJzID0gdGhpcy50aW1lbGluZU1hcmtlcnMuZmlsdGVyKHNlZWtiYXJNYXJrZXIgPT4ge1xuICAgICAgY29uc3QgbWF0Y2hpbmdNYXJrZXIgPSB0aGlzLnVpbWFuYWdlci5nZXRDb25maWcoKS5tZXRhZGF0YS5tYXJrZXJzLmZpbmQoX21hcmtlciA9PiBzZWVrYmFyTWFya2VyLm1hcmtlciA9PT0gX21hcmtlcik7XG4gICAgICBpZiAoIW1hdGNoaW5nTWFya2VyKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTWFya2VyRnJvbURPTShzZWVrYmFyTWFya2VyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaGluZ01hcmtlcjtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlTWFya2VyRnJvbURPTShtYXJrZXI6IFNlZWtCYXJNYXJrZXIpOiB2b2lkIHtcbiAgICBpZiAobWFya2VyLmVsZW1lbnQpIHtcbiAgICAgIG1hcmtlci5lbGVtZW50LnJlbW92ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlTWFya2VycygpOiB2b2lkIHtcbiAgICBpZiAoIXNob3VsZFByb2Nlc3NNYXJrZXJzKHRoaXMucGxheWVyLCB0aGlzLnVpbWFuYWdlcikpIHtcbiAgICAgIHRoaXMuY2xlYXJNYXJrZXJzKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5maWx0ZXJSZW1vdmVkTWFya2VycygpO1xuXG4gICAgdGhpcy51aW1hbmFnZXIuZ2V0Q29uZmlnKCkubWV0YWRhdGEubWFya2Vycy5mb3JFYWNoKG1hcmtlciA9PiB7XG4gICAgICBjb25zdCB7IG1hcmtlclBvc2l0aW9uLCBtYXJrZXJEdXJhdGlvbiB9ID0gZ2V0TWFya2VyUG9zaXRpb25zKHRoaXMucGxheWVyLCBtYXJrZXIpO1xuXG4gICAgICBpZiAoc2hvdWxkUmVtb3ZlTWFya2VyKG1hcmtlclBvc2l0aW9uLCBtYXJrZXJEdXJhdGlvbikpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVNYXJrZXJGcm9tQ29uZmlnKG1hcmtlcik7XG4gICAgICB9IGVsc2UgaWYgKG1hcmtlclBvc2l0aW9uIDw9IDEwMCkge1xuICAgICAgICBjb25zdCBtYXRjaGluZ01hcmtlciA9IHRoaXMudGltZWxpbmVNYXJrZXJzLmZpbmQoc2Vla2Jhck1hcmtlciA9PiBzZWVrYmFyTWFya2VyLm1hcmtlciA9PT0gbWFya2VyKTtcblxuICAgICAgICBpZiAobWF0Y2hpbmdNYXJrZXIpIHtcbiAgICAgICAgICBtYXRjaGluZ01hcmtlci5wb3NpdGlvbiA9IG1hcmtlclBvc2l0aW9uO1xuICAgICAgICAgIG1hdGNoaW5nTWFya2VyLmR1cmF0aW9uID0gbWFya2VyRHVyYXRpb247XG5cbiAgICAgICAgICB0aGlzLnVwZGF0ZU1hcmtlckRPTShtYXRjaGluZ01hcmtlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgbmV3TWFya2VyOiBTZWVrQmFyTWFya2VyID0geyBtYXJrZXIsIHBvc2l0aW9uOiBtYXJrZXJQb3NpdGlvbiwgZHVyYXRpb246IG1hcmtlckR1cmF0aW9uIH07XG4gICAgICAgICAgdGhpcy50aW1lbGluZU1hcmtlcnMucHVzaChuZXdNYXJrZXIpO1xuXG4gICAgICAgICAgdGhpcy5jcmVhdGVNYXJrZXJET00obmV3TWFya2VyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRNYXJrZXJDc3NQcm9wZXJ0aWVzKG1hcmtlcjogU2Vla0Jhck1hcmtlcik6IHsgW3Byb3BlcnR5TmFtZTogc3RyaW5nXTogc3RyaW5nIH0ge1xuICAgIGNvbnN0IHNlZWtCYXJXaWR0aFB4ID0gdGhpcy5nZXRTZWVrQmFyV2lkdGgoKTtcblxuICAgIGNvbnN0IHBvc2l0aW9uSW5QeCA9IChzZWVrQmFyV2lkdGhQeCAvIDEwMCkgKiAobWFya2VyLnBvc2l0aW9uIDwgMCA/IDAgOiBtYXJrZXIucG9zaXRpb24pO1xuICAgIGNvbnN0IGNzc1Byb3BlcnRpZXM6IHsgW3Byb3BlcnR5TmFtZTogc3RyaW5nXTogc3RyaW5nIH0gPSB7XG4gICAgICAndHJhbnNmb3JtJzogYHRyYW5zbGF0ZVgoJHtwb3NpdGlvbkluUHh9cHgpYCxcbiAgICB9O1xuXG4gICAgaWYgKG1hcmtlci5kdXJhdGlvbiA+IDApIHtcbiAgICAgIGNvbnN0IG1hcmtlcldpZHRoUHggPSBNYXRoLnJvdW5kKHNlZWtCYXJXaWR0aFB4IC8gMTAwICogbWFya2VyLmR1cmF0aW9uKTtcbiAgICAgIGNzc1Byb3BlcnRpZXNbJ3dpZHRoJ10gPSBgJHttYXJrZXJXaWR0aFB4fXB4YDtcbiAgICB9XG5cbiAgICByZXR1cm4gY3NzUHJvcGVydGllcztcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlTWFya2VyRE9NKG1hcmtlcjogU2Vla0Jhck1hcmtlcik6IHZvaWQge1xuICAgIG1hcmtlci5lbGVtZW50LmNzcyh0aGlzLmdldE1hcmtlckNzc1Byb3BlcnRpZXMobWFya2VyKSk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZU1hcmtlckRPTShtYXJrZXI6IFNlZWtCYXJNYXJrZXIpOiB2b2lkIHtcbiAgICBjb25zdCBtYXJrZXJDbGFzc2VzID0gWydzZWVrYmFyLW1hcmtlciddLmNvbmNhdChtYXJrZXIubWFya2VyLmNzc0NsYXNzZXMgfHwgW10pXG4gICAgICAubWFwKGNzc0NsYXNzID0+IHRoaXMucHJlZml4Q3NzKGNzc0NsYXNzKSk7XG5cbiAgICBjb25zdCBtYXJrZXJFbGVtZW50ID0gbmV3IERPTSgnZGl2Jywge1xuICAgICAgJ2NsYXNzJzogbWFya2VyQ2xhc3Nlcy5qb2luKCcgJyksXG4gICAgICAnZGF0YS1tYXJrZXItdGltZSc6IFN0cmluZyhtYXJrZXIubWFya2VyLnRpbWUpLFxuICAgICAgJ2RhdGEtbWFya2VyLXRpdGxlJzogU3RyaW5nKG1hcmtlci5tYXJrZXIudGl0bGUpLFxuICAgIH0pLmNzcyh0aGlzLmdldE1hcmtlckNzc1Byb3BlcnRpZXMobWFya2VyKSk7XG5cbiAgICBpZiAobWFya2VyLm1hcmtlci5pbWFnZVVybCkge1xuICAgICAgY29uc3QgcmVtb3ZlSW1hZ2UgPSAoKSA9PiB7XG4gICAgICAgIGltYWdlRWxlbWVudC5yZW1vdmUoKTtcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IGltYWdlRWxlbWVudCA9IG5ldyBET00oJ2ltZycsIHtcbiAgICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ3NlZWtiYXItbWFya2VyLWltYWdlJyksXG4gICAgICAgICdzcmMnOiBtYXJrZXIubWFya2VyLmltYWdlVXJsLFxuICAgICAgfSkub24oJ2Vycm9yJywgcmVtb3ZlSW1hZ2UpO1xuXG4gICAgICBtYXJrZXJFbGVtZW50LmFwcGVuZChpbWFnZUVsZW1lbnQpO1xuICAgIH1cblxuICAgIG1hcmtlci5lbGVtZW50ID0gbWFya2VyRWxlbWVudDtcbiAgICB0aGlzLm1hcmtlcnNDb250YWluZXIuYXBwZW5kKG1hcmtlckVsZW1lbnQpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVNYXJrZXJzRE9NKCk6IHZvaWQge1xuICAgIHRoaXMudGltZWxpbmVNYXJrZXJzLmZvckVhY2gobWFya2VyID0+IHtcbiAgICAgIGlmIChtYXJrZXIuZWxlbWVudCkge1xuICAgICAgICB0aGlzLnVwZGF0ZU1hcmtlckRPTShtYXJrZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jcmVhdGVNYXJrZXJET00obWFya2VyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgY29uZmlndXJlTGl2ZVBhdXNlZFRpbWVzaGlmdFVwZGF0ZXIoXG4gICAgaGFuZGxlcjogKCkgPT4gdm9pZCxcbiAgKTogdm9pZCB7XG4gICAgLy8gUmVndWxhcmx5IHVwZGF0ZSB0aGUgbWFya2VyIHBvc2l0aW9uIHdoaWxlIHRoZSB0aW1lb3V0IGlzIGFjdGl2ZVxuICAgIHRoaXMucGF1c2VkVGltZXNoaWZ0VXBkYXRlciA9IG5ldyBUaW1lb3V0KDEwMDAsIGhhbmRsZXIsIHRydWUpO1xuXG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QYXVzZWQsICgpID0+IHtcbiAgICAgIGlmICh0aGlzLnBsYXllci5pc0xpdmUoKSAmJiB0aGlzLnBsYXllci5nZXRNYXhUaW1lU2hpZnQoKSA8IDApIHtcbiAgICAgICAgdGhpcy5wYXVzZWRUaW1lc2hpZnRVcGRhdGVyLnN0YXJ0KCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBTdG9wIHVwZGF0ZXIgd2hlbiBwbGF5YmFjayBjb250aW51ZXMgKG5vIG1hdHRlciBpZiB0aGUgdXBkYXRlciB3YXMgc3RhcnRlZCBiZWZvcmUpXG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5LCAoKSA9PiB0aGlzLnBhdXNlZFRpbWVzaGlmdFVwZGF0ZXIuY2xlYXIoKSk7XG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5EZXN0cm95LCAoKSA9PiB0aGlzLnBhdXNlZFRpbWVzaGlmdFVwZGF0ZXIuY2xlYXIoKSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgcHJlZml4Q3NzKGNzc0NsYXNzT3JJZDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcuY3NzUHJlZml4ICsgJy0nICsgY3NzQ2xhc3NPcklkO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldE1hcmtlclBvc2l0aW9ucyhwbGF5ZXI6IFBsYXllckFQSSwgbWFya2VyOiBUaW1lbGluZU1hcmtlcikge1xuICBjb25zdCBkdXJhdGlvbiA9IGdldER1cmF0aW9uKHBsYXllcik7XG5cbiAgY29uc3QgbWFya2VyUG9zaXRpb24gPSAxMDAgLyBkdXJhdGlvbiAqIGdldE1hcmtlclRpbWUobWFya2VyLCBwbGF5ZXIsIGR1cmF0aW9uKTsgLy8gY29udmVydCBhYnNvbHV0ZSB0aW1lIHRvIHBlcmNlbnRhZ2VcbiAgbGV0IG1hcmtlckR1cmF0aW9uID0gMTAwIC8gZHVyYXRpb24gKiBtYXJrZXIuZHVyYXRpb247XG5cbiAgaWYgKG1hcmtlclBvc2l0aW9uIDwgMCAmJiAhaXNOYU4obWFya2VyRHVyYXRpb24pKSB7XG4gICAgLy8gU2hyaW5rIG1hcmtlciBkdXJhdGlvbiBmb3Igb24gbGl2ZSBzdHJlYW1zIGFzIHRoZXkgcmVhY2ggZW5kXG4gICAgbWFya2VyRHVyYXRpb24gPSBtYXJrZXJEdXJhdGlvbiArIG1hcmtlclBvc2l0aW9uO1xuICB9XG5cbiAgaWYgKDEwMCAtIG1hcmtlclBvc2l0aW9uIDwgbWFya2VyRHVyYXRpb24pIHtcbiAgICAvLyBTaHJpbmsgbWFya2VyIGlmIGl0IG92ZXJmbG93cyB0aW1lbGluZVxuICAgIG1hcmtlckR1cmF0aW9uID0gMTAwIC0gbWFya2VyUG9zaXRpb247XG4gIH1cblxuICByZXR1cm4geyBtYXJrZXJEdXJhdGlvbiwgbWFya2VyUG9zaXRpb24gfTtcbn1cblxuZnVuY3Rpb24gZ2V0TWFya2VyVGltZShtYXJrZXI6IFRpbWVsaW5lTWFya2VyLCBwbGF5ZXI6IFBsYXllckFQSSwgZHVyYXRpb246IG51bWJlcik6IG51bWJlciB7XG4gIGlmICghcGxheWVyLmlzTGl2ZSgpKSB7XG4gICAgcmV0dXJuIG1hcmtlci50aW1lO1xuICB9XG5cbiAgcmV0dXJuIGR1cmF0aW9uIC0gKFBsYXllclV0aWxzLmdldFNlZWthYmxlUmFuZ2VSZXNwZWN0aW5nTGl2ZShwbGF5ZXIpLmVuZCAtIG1hcmtlci50aW1lKTtcbn1cblxuZnVuY3Rpb24gZ2V0RHVyYXRpb24ocGxheWVyOiBQbGF5ZXJBUEkpOiBudW1iZXIge1xuICBpZiAoIXBsYXllci5pc0xpdmUoKSkge1xuICAgIHJldHVybiBwbGF5ZXIuZ2V0RHVyYXRpb24oKTtcbiAgfVxuICBjb25zdCB7IHN0YXJ0LCBlbmQgfSA9IFBsYXllclV0aWxzLmdldFNlZWthYmxlUmFuZ2VSZXNwZWN0aW5nTGl2ZShwbGF5ZXIpO1xuXG4gIHJldHVybiBlbmQgLSBzdGFydDtcbn1cblxuZnVuY3Rpb24gc2hvdWxkUmVtb3ZlTWFya2VyKG1hcmtlclBvc2l0aW9uOiBudW1iZXIsIG1hcmtlckR1cmF0aW9uOiBudW1iZXIpOiBib29sZWFuIHtcbiAgcmV0dXJuIChtYXJrZXJEdXJhdGlvbiA8IDAgfHwgaXNOYU4obWFya2VyRHVyYXRpb24pKSAmJiBtYXJrZXJQb3NpdGlvbiA8IDA7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFByb2Nlc3NNYXJrZXJzKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogYm9vbGVhbiB7XG4gIC8vIERvbid0IGdlbmVyYXRlIHRpbWVsaW5lIG1hcmtlcnMgaWYgd2UgZG9uJ3QgeWV0IGhhdmUgYSBkdXJhdGlvblxuICAvLyBUaGUgZHVyYXRpb24gY2hlY2sgaXMgZm9yIGJ1Z2d5IHBsYXRmb3JtcyB3aGVyZSB0aGUgZHVyYXRpb24gaXMgbm90IGF2YWlsYWJsZSBpbnN0YW50bHkgKENocm9tZSBvbiBBbmRyb2lkIDQuMylcbiAgY29uc3QgdmFsaWRUb1Byb2Nlc3MgPSBwbGF5ZXIuZ2V0RHVyYXRpb24oKSAhPT0gSW5maW5pdHkgfHwgcGxheWVyLmlzTGl2ZSgpO1xuICBjb25zdCBoYXNNYXJrZXJzID0gdWltYW5hZ2VyLmdldENvbmZpZygpLm1ldGFkYXRhLm1hcmtlcnMubGVuZ3RoID4gMDtcblxuICByZXR1cm4gdmFsaWRUb1Byb2Nlc3MgJiYgaGFzTWFya2Vycztcbn1cbiIsImltcG9ydCB7Q29udGFpbmVyLCBDb250YWluZXJDb25maWd9IGZyb20gJy4vY29udGFpbmVyJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge01ldGFkYXRhTGFiZWwsIE1ldGFkYXRhTGFiZWxDb250ZW50fSBmcm9tICcuL21ldGFkYXRhbGFiZWwnO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgYSB7QGxpbmsgVGl0bGVCYXJ9LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRpdGxlQmFyQ29uZmlnIGV4dGVuZHMgQ29udGFpbmVyQ29uZmlnIHtcbiAgLyoqXG4gICAqIFNwZWNpZmllcyBpZiB0aGUgdGl0bGUgYmFyIHNob3VsZCBzdGF5IGhpZGRlbiB3aGVuIG5vIG1ldGFkYXRhIGxhYmVsIGNvbnRhaW5zIGFueSB0ZXh0LiBEb2VzIG5vdCBtYWtlIGEgbG90XG4gICAqIG9mIHNlbnNlIGlmIHRoZSB0aXRsZSBiYXIgY29udGFpbnMgb3RoZXIgY29tcG9uZW50cyB0aGFuIGp1c3QgTWV0YWRhdGFMYWJlbHMgKGxpa2UgaW4gdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbikuXG4gICAqIERlZmF1bHQ6IGZhbHNlXG4gICAqL1xuICBrZWVwSGlkZGVuV2l0aG91dE1ldGFkYXRhPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBEaXNwbGF5cyBhIHRpdGxlIGJhciBjb250YWluaW5nIGEgbGFiZWwgd2l0aCB0aGUgdGl0bGUgb2YgdGhlIHZpZGVvLlxuICovXG5leHBvcnQgY2xhc3MgVGl0bGVCYXIgZXh0ZW5kcyBDb250YWluZXI8VGl0bGVCYXJDb25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFRpdGxlQmFyQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS10aXRsZWJhcicsXG4gICAgICBoaWRkZW46IHRydWUsXG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIG5ldyBNZXRhZGF0YUxhYmVsKHsgY29udGVudDogTWV0YWRhdGFMYWJlbENvbnRlbnQuVGl0bGUgfSksXG4gICAgICAgIG5ldyBNZXRhZGF0YUxhYmVsKHsgY29udGVudDogTWV0YWRhdGFMYWJlbENvbnRlbnQuRGVzY3JpcHRpb24gfSksXG4gICAgICBdLFxuICAgICAga2VlcEhpZGRlbldpdGhvdXRNZXRhZGF0YTogZmFsc2UsXG4gICAgfSwgPFRpdGxlQmFyQ29uZmlnPnRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICBsZXQgY29uZmlnID0gdGhpcy5nZXRDb25maWcoKTtcbiAgICBsZXQgc2hvdWxkQmVTaG93biA9ICF0aGlzLmlzSGlkZGVuKCk7XG4gICAgbGV0IGhhc01ldGFkYXRhVGV4dCA9IHRydWU7IC8vIEZsYWcgdG8gdHJhY2sgaWYgYW55IG1ldGFkYXRhIGxhYmVsIGNvbnRhaW5zIHRleHRcblxuICAgIGxldCBjaGVja01ldGFkYXRhVGV4dEFuZFVwZGF0ZVZpc2liaWxpdHkgPSAoKSA9PiB7XG4gICAgICBoYXNNZXRhZGF0YVRleHQgPSBmYWxzZTtcblxuICAgICAgLy8gSXRlcmF0ZSB0aHJvdWdoIG1ldGFkYXRhIGxhYmVscyBhbmQgY2hlY2sgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZW0gY29udGFpbnMgdGV4dFxuICAgICAgZm9yIChsZXQgY29tcG9uZW50IG9mIHRoaXMuZ2V0Q29tcG9uZW50cygpKSB7XG4gICAgICAgIGlmIChjb21wb25lbnQgaW5zdGFuY2VvZiBNZXRhZGF0YUxhYmVsKSB7XG4gICAgICAgICAgaWYgKCFjb21wb25lbnQuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICBoYXNNZXRhZGF0YVRleHQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzU2hvd24oKSkge1xuICAgICAgICAvLyBIaWRlIGEgdmlzaWJsZSB0aXRsZWJhciBpZiBpdCBkb2VzIG5vdCBjb250YWluIGFueSB0ZXh0IGFuZCB0aGUgaGlkZGVuIGZsYWcgaXMgc2V0XG4gICAgICAgIGlmIChjb25maWcua2VlcEhpZGRlbldpdGhvdXRNZXRhZGF0YSAmJiAhaGFzTWV0YWRhdGFUZXh0KSB7XG4gICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc2hvdWxkQmVTaG93bikge1xuICAgICAgICAvLyBTaG93IGEgaGlkZGVuIHRpdGxlYmFyIGlmIGl0IHNob3VsZCBhY3R1YWxseSBiZSBzaG93blxuICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gTGlzdGVuIHRvIHRleHQgY2hhbmdlIGV2ZW50cyB0byB1cGRhdGUgdGhlIGhhc01ldGFkYXRhVGV4dCBmbGFnIHdoZW4gdGhlIG1ldGFkYXRhIGR5bmFtaWNhbGx5IGNoYW5nZXNcbiAgICBmb3IgKGxldCBjb21wb25lbnQgb2YgdGhpcy5nZXRDb21wb25lbnRzKCkpIHtcbiAgICAgIGlmIChjb21wb25lbnQgaW5zdGFuY2VvZiBNZXRhZGF0YUxhYmVsKSB7XG4gICAgICAgIGNvbXBvbmVudC5vblRleHRDaGFuZ2VkLnN1YnNjcmliZShjaGVja01ldGFkYXRhVGV4dEFuZFVwZGF0ZVZpc2liaWxpdHkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHVpbWFuYWdlci5vbkNvbnRyb2xzU2hvdy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgc2hvdWxkQmVTaG93biA9IHRydWU7XG4gICAgICBpZiAoIShjb25maWcua2VlcEhpZGRlbldpdGhvdXRNZXRhZGF0YSAmJiAhaGFzTWV0YWRhdGFUZXh0KSkge1xuICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1aW1hbmFnZXIub25Db250cm9sc0hpZGUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHNob3VsZEJlU2hvd24gPSBmYWxzZTtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0pO1xuXG4gICAgLy8gaW5pdFxuICAgIGNoZWNrTWV0YWRhdGFUZXh0QW5kVXBkYXRlVmlzaWJpbGl0eSgpO1xuICB9XG59IiwiaW1wb3J0IHtCdXR0b24sIEJ1dHRvbkNvbmZpZ30gZnJvbSAnLi9idXR0b24nO1xuaW1wb3J0IHtOb0FyZ3MsIEV2ZW50RGlzcGF0Y2hlciwgRXZlbnR9IGZyb20gJy4uL2V2ZW50ZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBVSUluc3RhbmNlTWFuYWdlciB9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgTG9jYWxpemFibGVUZXh0IH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIGZvciBhIHRvZ2dsZSBidXR0b24gY29tcG9uZW50LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRvZ2dsZUJ1dHRvbkNvbmZpZyBleHRlbmRzIEJ1dHRvbkNvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIHRoYXQgbWFya3MgdGhlIG9uLXN0YXRlIG9mIHRoZSBidXR0b24uXG4gICAqL1xuICBvbkNsYXNzPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyB0aGF0IG1hcmtzIHRoZSBvZmYtc3RhdGUgb2YgdGhlIGJ1dHRvbi5cbiAgICovXG4gIG9mZkNsYXNzPzogc3RyaW5nO1xuICAvKipcbiAgICogV0NBRzIwIHN0YW5kYXJkIGZvciBkZWZpbmluZyBpbmZvIGFib3V0IHRoZSBjb21wb25lbnQgKHVzdWFsbHkgdGhlIG5hbWUpXG4gICAqXG4gICAqIEl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSBgb25BcmlhTGFiZWxgIGFuZCBgb2ZmQXJpYUxhYmVsYCBmb3IgdG9nZ2xlIGJ1dHRvbnNcbiAgICogYXMgdGhlIGNvbXBvbmVudCBjYW4gdGhlbiB1cGRhdGUgdGhlbSBhcyB0aGUgYnV0dG9uIGlzIHVzZWQuXG4gICAqXG4gICAqIElmIGJvdGggYGFyaWFMYWJlbGAgYW5kIGBvbkFyaWFMYWJlbGAgYXJlIHNldCwgYG9uQXJpYUxhYmVsYCBpcyB1c2VkLlxuICAgKi9cbiAgYXJpYUxhYmVsPzogTG9jYWxpemFibGVUZXh0O1xuICAvKipcbiAgICogVGhlIGFyaWEgbGFiZWwgdGhhdCBtYXJrcyB0aGUgb24tc3RhdGUgb2YgdGhlIGJ1dHRvbi5cbiAgICovXG4gIG9uQXJpYUxhYmVsPzogTG9jYWxpemFibGVUZXh0O1xuICAvKipcbiAgICogVGhlIGFyaWEgbGFiZWwgdGhhdCBtYXJrcyB0aGUgb2ZmLXN0YXRlIG9mIHRoZSBidXR0b24uXG4gICAqL1xuICBvZmZBcmlhTGFiZWw/OiBMb2NhbGl6YWJsZVRleHQ7XG4gIC8qKlxuICAgKiBUaGUgdGV4dCBhcyBzdHJpbmcgb3IgYXMgbG9jYWxpemUgY2FsbGJhY2sgb24gdGhlIGJ1dHRvbi5cbiAgICovXG4gIHRleHQ/OiBMb2NhbGl6YWJsZVRleHQ7XG59XG5cbi8qKlxuICogQSBidXR0b24gdGhhdCBjYW4gYmUgdG9nZ2xlZCBiZXR3ZWVuICdvbicgYW5kICdvZmYnIHN0YXRlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFRvZ2dsZUJ1dHRvbjxDb25maWcgZXh0ZW5kcyBUb2dnbGVCdXR0b25Db25maWc+IGV4dGVuZHMgQnV0dG9uPENvbmZpZz4ge1xuXG4gIHByaXZhdGUgb25TdGF0ZTogYm9vbGVhbjtcblxuICBwcml2YXRlIHRvZ2dsZUJ1dHRvbkV2ZW50cyA9IHtcbiAgICBvblRvZ2dsZTogbmV3IEV2ZW50RGlzcGF0Y2hlcjxUb2dnbGVCdXR0b248Q29uZmlnPiwgTm9BcmdzPigpLFxuICAgIG9uVG9nZ2xlT246IG5ldyBFdmVudERpc3BhdGNoZXI8VG9nZ2xlQnV0dG9uPENvbmZpZz4sIE5vQXJncz4oKSxcbiAgICBvblRvZ2dsZU9mZjogbmV3IEV2ZW50RGlzcGF0Y2hlcjxUb2dnbGVCdXR0b248Q29uZmlnPiwgTm9BcmdzPigpLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIGNvbnN0IGRlZmF1bHRDb25maWc6IFRvZ2dsZUJ1dHRvbkNvbmZpZyA9IHtcbiAgICAgIGNzc0NsYXNzOiAndWktdG9nZ2xlYnV0dG9uJyxcbiAgICAgIG9uQ2xhc3M6ICdvbicsXG4gICAgICBvZmZDbGFzczogJ29mZicsXG4gICAgfTtcblxuICAgIGlmIChjb25maWcub25BcmlhTGFiZWwpIHtcbiAgICAgIGNvbmZpZy5hcmlhTGFiZWwgPSBjb25maWcub25BcmlhTGFiZWw7XG4gICAgfVxuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywgZGVmYXVsdENvbmZpZyBhcyBDb25maWcsIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5nZXRDb25maWcoKTtcbiAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hZGRDbGFzcyh0aGlzLnByZWZpeENzcyhjb25maWcub2ZmQ2xhc3MpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBidXR0b24gdG8gdGhlICdvbicgc3RhdGUuXG4gICAqL1xuICBvbigpIHtcbiAgICBpZiAodGhpcy5pc09mZigpKSB7XG4gICAgICBjb25zdCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuXG4gICAgICB0aGlzLm9uU3RhdGUgPSB0cnVlO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoY29uZmlnLm9mZkNsYXNzKSk7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hZGRDbGFzcyh0aGlzLnByZWZpeENzcyhjb25maWcub25DbGFzcykpO1xuXG4gICAgICB0aGlzLm9uVG9nZ2xlRXZlbnQoKTtcbiAgICAgIHRoaXMub25Ub2dnbGVPbkV2ZW50KCk7XG5cbiAgICAgIHRoaXMuc2V0QXJpYUF0dHIoJ3ByZXNzZWQnLCAndHJ1ZScpO1xuXG4gICAgICBpZiAodGhpcy5jb25maWcub25BcmlhTGFiZWwpIHtcbiAgICAgICAgdGhpcy5zZXRBcmlhTGFiZWwodGhpcy5jb25maWcub25BcmlhTGFiZWwpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBidXR0b24gdG8gdGhlICdvZmYnIHN0YXRlLlxuICAgKi9cbiAgb2ZmKCkge1xuICAgIGlmICh0aGlzLmlzT24oKSkge1xuICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5nZXRDb25maWcoKTtcblxuICAgICAgdGhpcy5vblN0YXRlID0gZmFsc2U7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeENzcyhjb25maWcub25DbGFzcykpO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoY29uZmlnLm9mZkNsYXNzKSk7XG5cbiAgICAgIHRoaXMub25Ub2dnbGVFdmVudCgpO1xuICAgICAgdGhpcy5vblRvZ2dsZU9mZkV2ZW50KCk7XG5cbiAgICAgIHRoaXMuc2V0QXJpYUF0dHIoJ3ByZXNzZWQnLCAnZmFsc2UnKTtcblxuICAgICAgaWYgKHRoaXMuY29uZmlnLm9mZkFyaWFMYWJlbCkge1xuICAgICAgICB0aGlzLnNldEFyaWFMYWJlbCh0aGlzLmNvbmZpZy5vZmZBcmlhTGFiZWwpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGUgdGhlIGJ1dHRvbiAnb24nIGlmIGl0IGlzICdvZmYnLCBvciAnb2ZmJyBpZiBpdCBpcyAnb24nLlxuICAgKi9cbiAgdG9nZ2xlKCkge1xuICAgIGlmICh0aGlzLmlzT24oKSkge1xuICAgICAgdGhpcy5vZmYoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIHRvZ2dsZSBidXR0b24gaXMgaW4gdGhlICdvbicgc3RhdGUuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIGJ1dHRvbiBpcyAnb24nLCBmYWxzZSBpZiAnb2ZmJ1xuICAgKi9cbiAgaXNPbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5vblN0YXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgdG9nZ2xlIGJ1dHRvbiBpcyBpbiB0aGUgJ29mZicgc3RhdGUuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIGJ1dHRvbiBpcyAnb2ZmJywgZmFsc2UgaWYgJ29uJ1xuICAgKi9cbiAgaXNPZmYoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLmlzT24oKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkNsaWNrRXZlbnQoKSB7XG4gICAgc3VwZXIub25DbGlja0V2ZW50KCk7XG5cbiAgICAvLyBGaXJlIHRoZSB0b2dnbGUgZXZlbnQgdG9nZXRoZXIgd2l0aCB0aGUgY2xpY2sgZXZlbnRcbiAgICAvLyAodGhleSBhcmUgdGVjaG5pY2FsbHkgdGhlIHNhbWUsIG9ubHkgdGhlIHNlbWFudGljcyBhcmUgZGlmZmVyZW50KVxuICAgIHRoaXMub25Ub2dnbGVFdmVudCgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uVG9nZ2xlRXZlbnQoKSB7XG4gICAgdGhpcy50b2dnbGVCdXR0b25FdmVudHMub25Ub2dnbGUuZGlzcGF0Y2godGhpcyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25Ub2dnbGVPbkV2ZW50KCkge1xuICAgIHRoaXMudG9nZ2xlQnV0dG9uRXZlbnRzLm9uVG9nZ2xlT24uZGlzcGF0Y2godGhpcyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25Ub2dnbGVPZmZFdmVudCgpIHtcbiAgICB0aGlzLnRvZ2dsZUJ1dHRvbkV2ZW50cy5vblRvZ2dsZU9mZi5kaXNwYXRjaCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIGJ1dHRvbiBpcyB0b2dnbGVkLlxuICAgKiBAcmV0dXJucyB7RXZlbnQ8VG9nZ2xlQnV0dG9uPENvbmZpZz4sIE5vQXJncz59XG4gICAqL1xuICBnZXQgb25Ub2dnbGUoKTogRXZlbnQ8VG9nZ2xlQnV0dG9uPENvbmZpZz4sIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLnRvZ2dsZUJ1dHRvbkV2ZW50cy5vblRvZ2dsZS5nZXRFdmVudCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgYnV0dG9uIGlzIHRvZ2dsZWQgJ29uJy5cbiAgICogQHJldHVybnMge0V2ZW50PFRvZ2dsZUJ1dHRvbjxDb25maWc+LCBOb0FyZ3M+fVxuICAgKi9cbiAgZ2V0IG9uVG9nZ2xlT24oKTogRXZlbnQ8VG9nZ2xlQnV0dG9uPENvbmZpZz4sIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLnRvZ2dsZUJ1dHRvbkV2ZW50cy5vblRvZ2dsZU9uLmdldEV2ZW50KCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgZXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIHRoZSBidXR0b24gaXMgdG9nZ2xlZCAnb2ZmJy5cbiAgICogQHJldHVybnMge0V2ZW50PFRvZ2dsZUJ1dHRvbjxDb25maWc+LCBOb0FyZ3M+fVxuICAgKi9cbiAgZ2V0IG9uVG9nZ2xlT2ZmKCk6IEV2ZW50PFRvZ2dsZUJ1dHRvbjxDb25maWc+LCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy50b2dnbGVCdXR0b25FdmVudHMub25Ub2dnbGVPZmYuZ2V0RXZlbnQoKTtcbiAgfVxufSIsImltcG9ydCB7Q29tcG9uZW50LCBDb21wb25lbnRDb25maWd9IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCB7RE9NfSBmcm9tICcuLi9kb20nO1xuXG4vKipcbiAqIEFuaW1hdGVkIGFuYWxvZyBUViBzdGF0aWMgbm9pc2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBUdk5vaXNlQ2FudmFzIGV4dGVuZHMgQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4ge1xuXG4gIHByaXZhdGUgY2FudmFzOiBET007XG5cbiAgcHJpdmF0ZSBjYW52YXNFbGVtZW50OiBIVE1MQ2FudmFzRWxlbWVudDtcbiAgcHJpdmF0ZSBjYW52YXNDb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XG4gIHByaXZhdGUgY2FudmFzV2lkdGggPSAxNjA7XG4gIHByaXZhdGUgY2FudmFzSGVpZ2h0ID0gOTA7XG4gIHByaXZhdGUgaW50ZXJmZXJlbmNlSGVpZ2h0ID0gNTA7XG4gIHByaXZhdGUgbGFzdEZyYW1lVXBkYXRlOiBudW1iZXIgPSAwO1xuICBwcml2YXRlIGZyYW1lSW50ZXJ2YWw6IG51bWJlciA9IDYwO1xuICBwcml2YXRlIHVzZUFuaW1hdGlvbkZyYW1lOiBib29sZWFuID0gISF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICBwcml2YXRlIG5vaXNlQW5pbWF0aW9uV2luZG93UG9zOiBudW1iZXI7XG4gIHByaXZhdGUgZnJhbWVVcGRhdGVIYW5kbGVySWQ6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbXBvbmVudENvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktdHZub2lzZWNhbnZhcycsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRvRG9tRWxlbWVudCgpOiBET00ge1xuICAgIHJldHVybiB0aGlzLmNhbnZhcyA9IG5ldyBET00oJ2NhbnZhcycsIHsgJ2NsYXNzJzogdGhpcy5nZXRDc3NDbGFzc2VzKCkgfSk7XG4gIH1cblxuICBzdGFydCgpOiB2b2lkIHtcbiAgICB0aGlzLmNhbnZhc0VsZW1lbnQgPSA8SFRNTENhbnZhc0VsZW1lbnQ+dGhpcy5jYW52YXMuZ2V0KDApO1xuICAgIHRoaXMuY2FudmFzQ29udGV4dCA9IHRoaXMuY2FudmFzRWxlbWVudC5nZXRDb250ZXh0KCcyZCcpO1xuICAgIHRoaXMubm9pc2VBbmltYXRpb25XaW5kb3dQb3MgPSAtdGhpcy5jYW52YXNIZWlnaHQ7XG4gICAgdGhpcy5sYXN0RnJhbWVVcGRhdGUgPSAwO1xuXG4gICAgdGhpcy5jYW52YXNFbGVtZW50LndpZHRoID0gdGhpcy5jYW52YXNXaWR0aDtcbiAgICB0aGlzLmNhbnZhc0VsZW1lbnQuaGVpZ2h0ID0gdGhpcy5jYW52YXNIZWlnaHQ7XG5cbiAgICB0aGlzLnJlbmRlckZyYW1lKCk7XG4gIH1cblxuICBzdG9wKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnVzZUFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmZyYW1lVXBkYXRlSGFuZGxlcklkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZnJhbWVVcGRhdGVIYW5kbGVySWQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyRnJhbWUoKTogdm9pZCB7XG4gICAgLy8gVGhpcyBjb2RlIGhhcyBiZWVuIGNvcGllZCBmcm9tIHRoZSBwbGF5ZXIgY29udHJvbHMuanMgYW5kIHNpbXBsaWZpZWRcblxuICAgIGlmICh0aGlzLmxhc3RGcmFtZVVwZGF0ZSArIHRoaXMuZnJhbWVJbnRlcnZhbCA+IG5ldyBEYXRlKCkuZ2V0VGltZSgpKSB7XG4gICAgICAvLyBJdCdzIHRvbyBlYXJseSB0byByZW5kZXIgdGhlIG5leHQgZnJhbWVcbiAgICAgIHRoaXMuc2NoZWR1bGVOZXh0UmVuZGVyKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGN1cnJlbnRQaXhlbE9mZnNldDtcbiAgICBsZXQgY2FudmFzV2lkdGggPSB0aGlzLmNhbnZhc1dpZHRoO1xuICAgIGxldCBjYW52YXNIZWlnaHQgPSB0aGlzLmNhbnZhc0hlaWdodDtcblxuICAgIC8vIENyZWF0ZSB0ZXh0dXJlXG4gICAgbGV0IG5vaXNlSW1hZ2UgPSB0aGlzLmNhbnZhc0NvbnRleHQuY3JlYXRlSW1hZ2VEYXRhKGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQpO1xuXG4gICAgLy8gRmlsbCB0ZXh0dXJlIHdpdGggbm9pc2VcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGNhbnZhc0hlaWdodDsgeSsrKSB7XG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGNhbnZhc1dpZHRoOyB4KyspIHtcbiAgICAgICAgY3VycmVudFBpeGVsT2Zmc2V0ID0gKGNhbnZhc1dpZHRoICogeSAqIDQpICsgeCAqIDQ7XG4gICAgICAgIG5vaXNlSW1hZ2UuZGF0YVtjdXJyZW50UGl4ZWxPZmZzZXRdID0gTWF0aC5yYW5kb20oKSAqIDI1NTtcbiAgICAgICAgaWYgKHkgPCB0aGlzLm5vaXNlQW5pbWF0aW9uV2luZG93UG9zIHx8IHkgPiB0aGlzLm5vaXNlQW5pbWF0aW9uV2luZG93UG9zICsgdGhpcy5pbnRlcmZlcmVuY2VIZWlnaHQpIHtcbiAgICAgICAgICBub2lzZUltYWdlLmRhdGFbY3VycmVudFBpeGVsT2Zmc2V0XSAqPSAwLjg1O1xuICAgICAgICB9XG4gICAgICAgIG5vaXNlSW1hZ2UuZGF0YVtjdXJyZW50UGl4ZWxPZmZzZXQgKyAxXSA9IG5vaXNlSW1hZ2UuZGF0YVtjdXJyZW50UGl4ZWxPZmZzZXRdO1xuICAgICAgICBub2lzZUltYWdlLmRhdGFbY3VycmVudFBpeGVsT2Zmc2V0ICsgMl0gPSBub2lzZUltYWdlLmRhdGFbY3VycmVudFBpeGVsT2Zmc2V0XTtcbiAgICAgICAgbm9pc2VJbWFnZS5kYXRhW2N1cnJlbnRQaXhlbE9mZnNldCArIDNdID0gNTA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUHV0IHRleHR1cmUgb250byBjYW52YXNcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQucHV0SW1hZ2VEYXRhKG5vaXNlSW1hZ2UsIDAsIDApO1xuXG4gICAgdGhpcy5sYXN0RnJhbWVVcGRhdGUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICB0aGlzLm5vaXNlQW5pbWF0aW9uV2luZG93UG9zICs9IDc7XG4gICAgaWYgKHRoaXMubm9pc2VBbmltYXRpb25XaW5kb3dQb3MgPiBjYW52YXNIZWlnaHQpIHtcbiAgICAgIHRoaXMubm9pc2VBbmltYXRpb25XaW5kb3dQb3MgPSAtY2FudmFzSGVpZ2h0O1xuICAgIH1cblxuICAgIHRoaXMuc2NoZWR1bGVOZXh0UmVuZGVyKCk7XG4gIH1cblxuICBwcml2YXRlIHNjaGVkdWxlTmV4dFJlbmRlcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy51c2VBbmltYXRpb25GcmFtZSkge1xuICAgICAgdGhpcy5mcmFtZVVwZGF0ZUhhbmRsZXJJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5yZW5kZXJGcmFtZS5iaW5kKHRoaXMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mcmFtZVVwZGF0ZUhhbmRsZXJJZCA9IHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMucmVuZGVyRnJhbWUuYmluZCh0aGlzKSwgdGhpcy5mcmFtZUludGVydmFsKTtcbiAgICB9XG4gIH1cbn0iLCJpbXBvcnQge0NvbnRhaW5lckNvbmZpZywgQ29udGFpbmVyfSBmcm9tICcuL2NvbnRhaW5lcic7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHtET019IGZyb20gJy4uL2RvbSc7XG5pbXBvcnQge1RpbWVvdXR9IGZyb20gJy4uL3RpbWVvdXQnO1xuaW1wb3J0IHtQbGF5ZXJVdGlsc30gZnJvbSAnLi4vcGxheWVydXRpbHMnO1xuaW1wb3J0IHsgQ2FuY2VsRXZlbnRBcmdzLCBFdmVudERpc3BhdGNoZXIgfSBmcm9tICcuLi9ldmVudGRpc3BhdGNoZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJLCBQbGF5ZXJSZXNpemVkRXZlbnQgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgYSB7QGxpbmsgVUlDb250YWluZXJ9LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFVJQ29udGFpbmVyQ29uZmlnIGV4dGVuZHMgQ29udGFpbmVyQ29uZmlnIHtcbiAgLyoqXG4gICAqIFRoZSBkZWxheSBpbiBtaWxsaXNlY29uZHMgYWZ0ZXIgd2hpY2ggdGhlIGNvbnRyb2wgYmFyIHdpbGwgYmUgaGlkZGVuIHdoZW4gdGhlcmUgaXMgbm8gdXNlciBpbnRlcmFjdGlvbi5cbiAgICogU2V0IHRvIC0xIGZvciB0aGUgVUkgdG8gYmUgYWx3YXlzIHNob3duLlxuICAgKiBEZWZhdWx0OiA1IHNlY29uZHMgKDUwMDApXG4gICAqL1xuICBoaWRlRGVsYXk/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBwbGF5ZXIgc3RhdGVzIGluIHdoaWNoIHRoZSBVSSB3aWxsIG5vdCBiZSBoaWRkZW4sIG5vIG1hdHRlciB3aGF0IHRoZSB7QGxpbmsgaGlkZURlbGF5fSBpcy5cbiAgICovXG4gIGhpZGVQbGF5ZXJTdGF0ZUV4Y2VwdGlvbnM/OiBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZVtdO1xuICAvKipcbiAgICogVGhlIEhUTUwgZWxlbWVudCBvbiB3aGljaCB1c2VyIGludGVyYWN0aW9uIGV2ZW50cyAoZS5nLiBtb3VzZSBhbmQgdG91Y2ggZXZlbnRzKSB3aWxsIGJlIHRyYWNrZWQgdG8gZGV0ZWN0XG4gICAqIGludGVyYWN0aW9uIHdpdGggdGhlIFVJLiBUaGVzZSBiYXNpY2FsbHkgdHJpZ2dlciBzaG93aW5nIGFuZCBoaWRpbmcgb2YgdGhlIFVJLlxuICAgKiBEZWZhdWx0OiB0aGUgVUkgY29udGFpbmVyIGl0c2VsZlxuICAgKi9cbiAgdXNlckludGVyYWN0aW9uRXZlbnRTb3VyY2U/OiBIVE1MRWxlbWVudDtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBjb250YWluZXIgdGhhdCBjb250YWlucyBhbGwgb2YgdGhlIFVJLiBUaGUgVUlDb250YWluZXIgaXMgcGFzc2VkIHRvIHRoZSB7QGxpbmsgVUlNYW5hZ2VyfSB0byBidWlsZCBhbmRcbiAqIHNldHVwIHRoZSBVSS5cbiAqL1xuZXhwb3J0IGNsYXNzIFVJQ29udGFpbmVyIGV4dGVuZHMgQ29udGFpbmVyPFVJQ29udGFpbmVyQ29uZmlnPiB7XG5cbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgU1RBVEVfUFJFRklYID0gJ3BsYXllci1zdGF0ZS0nO1xuXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEZVTExTQ1JFRU4gPSAnZnVsbHNjcmVlbic7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEJVRkZFUklORyA9ICdidWZmZXJpbmcnO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBSRU1PVEVfQ09OVFJPTCA9ICdyZW1vdGUtY29udHJvbCc7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENPTlRST0xTX1NIT1dOID0gJ2NvbnRyb2xzLXNob3duJztcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ09OVFJPTFNfSElEREVOID0gJ2NvbnRyb2xzLWhpZGRlbic7XG5cbiAgcHJpdmF0ZSB1aUhpZGVUaW1lb3V0OiBUaW1lb3V0O1xuICBwcml2YXRlIHBsYXllclN0YXRlQ2hhbmdlOiBFdmVudERpc3BhdGNoZXI8VUlDb250YWluZXIsIFBsYXllclV0aWxzLlBsYXllclN0YXRlPjtcblxuICBwcml2YXRlIHVzZXJJbnRlcmFjdGlvbkV2ZW50U291cmNlOiBET007XG4gIHByaXZhdGUgdXNlckludGVyYWN0aW9uRXZlbnRzOiB7IG5hbWU6IHN0cmluZywgaGFuZGxlcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdCB9W107XG5cbiAgcHVibGljIGhpZGVVaTogKCkgPT4gdm9pZCA9ICgpID0+IHt9O1xuICBwdWJsaWMgc2hvd1VpOiAoKSA9PiB2b2lkID0gKCkgPT4ge307XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBVSUNvbnRhaW5lckNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCA8VUlDb250YWluZXJDb25maWc+e1xuICAgICAgY3NzQ2xhc3M6ICd1aS11aWNvbnRhaW5lcicsXG4gICAgICByb2xlOiAncmVnaW9uJyxcbiAgICAgIGFyaWFMYWJlbDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3BsYXllcicpLFxuICAgICAgaGlkZURlbGF5OiA1MDAwLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcblxuICAgIHRoaXMucGxheWVyU3RhdGVDaGFuZ2UgPSBuZXcgRXZlbnREaXNwYXRjaGVyPFVJQ29udGFpbmVyLCBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZT4oKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG5cbiAgICBpZiAoY29uZmlnLnVzZXJJbnRlcmFjdGlvbkV2ZW50U291cmNlKSB7XG4gICAgICB0aGlzLnVzZXJJbnRlcmFjdGlvbkV2ZW50U291cmNlID0gbmV3IERPTShjb25maWcudXNlckludGVyYWN0aW9uRXZlbnRTb3VyY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVzZXJJbnRlcmFjdGlvbkV2ZW50U291cmNlID0gdGhpcy5nZXREb21FbGVtZW50KCk7XG4gICAgfVxuXG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMuY29uZmlndXJlVUlTaG93SGlkZShwbGF5ZXIsIHVpbWFuYWdlcik7XG4gICAgdGhpcy5jb25maWd1cmVQbGF5ZXJTdGF0ZXMocGxheWVyLCB1aW1hbmFnZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBjb25maWd1cmVVSVNob3dIaWRlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgbGV0IGNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG5cbiAgICBpZiAoY29uZmlnLmhpZGVEZWxheSA9PT0gLTEpIHtcbiAgICAgIHVpbWFuYWdlci5vbkNvbmZpZ3VyZWQuc3Vic2NyaWJlKCgpID0+IHVpbWFuYWdlci5vbkNvbnRyb2xzU2hvdy5kaXNwYXRjaCh0aGlzKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGlzVWlTaG93biA9IGZhbHNlO1xuICAgIGxldCBpc1NlZWtpbmcgPSBmYWxzZTtcbiAgICBsZXQgaXNGaXJzdFRvdWNoID0gdHJ1ZTtcbiAgICBsZXQgcGxheWVyU3RhdGU6IFBsYXllclV0aWxzLlBsYXllclN0YXRlO1xuXG4gICAgY29uc3QgaGlkaW5nUHJldmVudGVkID0gKCk6IGJvb2xlYW4gPT4ge1xuICAgICAgcmV0dXJuIGNvbmZpZy5oaWRlUGxheWVyU3RhdGVFeGNlcHRpb25zICYmIGNvbmZpZy5oaWRlUGxheWVyU3RhdGVFeGNlcHRpb25zLmluZGV4T2YocGxheWVyU3RhdGUpID4gLTE7XG4gICAgfTtcblxuICAgIHRoaXMuc2hvd1VpID0gKCkgPT4ge1xuICAgICAgaWYgKCFpc1VpU2hvd24pIHtcbiAgICAgICAgLy8gTGV0IHN1YnNjcmliZXJzIGtub3cgdGhhdCB0aGV5IHNob3VsZCByZXZlYWwgdGhlbXNlbHZlc1xuICAgICAgICB1aW1hbmFnZXIub25Db250cm9sc1Nob3cuZGlzcGF0Y2godGhpcyk7XG4gICAgICAgIGlzVWlTaG93biA9IHRydWU7XG4gICAgICB9XG4gICAgICAvLyBEb24ndCB0cmlnZ2VyIHRpbWVvdXQgd2hpbGUgc2Vla2luZyAoaXQgd2lsbCBiZSB0cmlnZ2VyZWQgb25jZSB0aGUgc2VlayBpcyBmaW5pc2hlZCkgb3IgY2FzdGluZ1xuICAgICAgaWYgKCFpc1NlZWtpbmcgJiYgIXBsYXllci5pc0Nhc3RpbmcoKSAmJiAhaGlkaW5nUHJldmVudGVkKCkpIHtcbiAgICAgICAgdGhpcy51aUhpZGVUaW1lb3V0LnN0YXJ0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuaGlkZVVpID0gKCkgPT4ge1xuICAgICAgLy8gSGlkZSB0aGUgVUkgb25seSBpZiBpdCBpcyBzaG93biwgYW5kIGlmIG5vdCBjYXN0aW5nXG4gICAgICBpZiAoaXNVaVNob3duICYmICFwbGF5ZXIuaXNDYXN0aW5nKCkpIHtcbiAgICAgICAgLy8gSXNzdWUgYSBwcmV2aWV3IGV2ZW50IHRvIGNoZWNrIGlmIHdlIGFyZSBnb29kIHRvIGhpZGUgdGhlIGNvbnRyb2xzXG4gICAgICAgIGxldCBwcmV2aWV3SGlkZUV2ZW50QXJncyA9IDxDYW5jZWxFdmVudEFyZ3M+e307XG4gICAgICAgIHVpbWFuYWdlci5vblByZXZpZXdDb250cm9sc0hpZGUuZGlzcGF0Y2godGhpcywgcHJldmlld0hpZGVFdmVudEFyZ3MpO1xuXG4gICAgICAgIGlmICghcHJldmlld0hpZGVFdmVudEFyZ3MuY2FuY2VsKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIHByZXZpZXcgd2Fzbid0IGNhbmNlbGVkLCBsZXQgc3Vic2NyaWJlcnMga25vdyB0aGF0IHRoZXkgc2hvdWxkIG5vdyBoaWRlIHRoZW1zZWx2ZXNcbiAgICAgICAgICB1aW1hbmFnZXIub25Db250cm9sc0hpZGUuZGlzcGF0Y2godGhpcyk7XG4gICAgICAgICAgaXNVaVNob3duID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGhpZGUgcHJldmlldyB3YXMgY2FuY2VsZWQsIGNvbnRpbnVlIHRvIHNob3cgVUlcbiAgICAgICAgICB0aGlzLnNob3dVaSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFRpbWVvdXQgdG8gZGVmZXIgVUkgaGlkaW5nIGJ5IHRoZSBjb25maWd1cmVkIGRlbGF5IHRpbWVcbiAgICB0aGlzLnVpSGlkZVRpbWVvdXQgPSBuZXcgVGltZW91dChjb25maWcuaGlkZURlbGF5LCB0aGlzLmhpZGVVaSk7XG5cbiAgICB0aGlzLnVzZXJJbnRlcmFjdGlvbkV2ZW50cyA9IFt7XG4gICAgICAvLyBPbiB0b3VjaCBkaXNwbGF5cywgdGhlIGZpcnN0IHRvdWNoIHJldmVhbHMgdGhlIFVJXG4gICAgICBuYW1lOiAndG91Y2hlbmQnLFxuICAgICAgaGFuZGxlcjogKGUpID0+IHtcbiAgICAgICAgaWYgKCFpc1VpU2hvd24pIHtcbiAgICAgICAgICAvLyBPbmx5IGlmIHRoZSBVSSBpcyBoaWRkZW4sIHdlIHByZXZlbnQgb3RoZXIgYWN0aW9ucyAoZXhjZXB0IGZvciB0aGUgZmlyc3QgdG91Y2gpIGFuZCByZXZlYWwgdGhlIFVJXG4gICAgICAgICAgLy8gaW5zdGVhZC4gVGhlIGZpcnN0IHRvdWNoIGlzIG5vdCBwcmV2ZW50ZWQgdG8gbGV0IG90aGVyIGxpc3RlbmVycyByZWNlaXZlIHRoZSBldmVudCBhbmQgdHJpZ2dlciBhblxuICAgICAgICAgIC8vIGluaXRpYWwgYWN0aW9uLCBlLmcuIHRoZSBodWdlIHBsYXliYWNrIGJ1dHRvbiBjYW4gZGlyZWN0bHkgc3RhcnQgcGxheWJhY2sgaW5zdGVhZCBvZiByZXF1aXJpbmcgYSBkb3VibGVcbiAgICAgICAgICAvLyB0YXAgd2hpY2ggMS4gcmV2ZWFscyB0aGUgVUkgYW5kIDIuIHN0YXJ0cyBwbGF5YmFjay5cbiAgICAgICAgICBpZiAoaXNGaXJzdFRvdWNoICYmICFwbGF5ZXIuaXNQbGF5aW5nKCkpIHtcbiAgICAgICAgICAgIGlzRmlyc3RUb3VjaCA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuc2hvd1VpKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSwge1xuICAgICAgLy8gV2hlbiB0aGUgbW91c2UgZW50ZXJzLCB3ZSBzaG93IHRoZSBVSVxuICAgICAgbmFtZTogJ21vdXNlZW50ZXInLFxuICAgICAgaGFuZGxlcjogKCkgPT4ge1xuICAgICAgICB0aGlzLnNob3dVaSgpO1xuICAgICAgfSxcbiAgICB9LCB7XG4gICAgICAvLyBXaGVuIHRoZSBtb3VzZSBtb3ZlcyB3aXRoaW4sIHdlIHNob3cgdGhlIFVJXG4gICAgICBuYW1lOiAnbW91c2Vtb3ZlJyxcbiAgICAgIGhhbmRsZXI6ICgpID0+IHtcbiAgICAgICAgdGhpcy5zaG93VWkoKTtcbiAgICAgIH0sXG4gICAgfSwge1xuICAgICAgbmFtZTogJ2ZvY3VzaW4nLFxuICAgICAgaGFuZGxlcjogKCkgPT4ge1xuICAgICAgICB0aGlzLnNob3dVaSgpO1xuICAgICAgfSxcbiAgICB9LCB7XG4gICAgICBuYW1lOiAna2V5ZG93bicsXG4gICAgICBoYW5kbGVyOiAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2hvd1VpKCk7XG4gICAgICB9LFxuICAgIH0sIHtcbiAgICAgIC8vIFdoZW4gdGhlIG1vdXNlIGxlYXZlcywgd2UgY2FuIHByZXBhcmUgdG8gaGlkZSB0aGUgVUksIGV4Y2VwdCBhIHNlZWsgaXMgZ29pbmcgb25cbiAgICAgIG5hbWU6ICdtb3VzZWxlYXZlJyxcbiAgICAgIGhhbmRsZXI6ICgpID0+IHtcbiAgICAgICAgLy8gV2hlbiBhIHNlZWsgaXMgZ29pbmcgb24sIHRoZSBzZWVrIHNjcnViIHBvaW50ZXIgbWF5IGV4aXQgdGhlIFVJIGFyZWEgd2hpbGUgc3RpbGwgc2Vla2luZywgYW5kIHdlIGRvIG5vdFxuICAgICAgICAvLyBoaWRlIHRoZSBVSSBpbiBzdWNoIGNhc2VzXG4gICAgICAgIGlmICghaXNTZWVraW5nICYmICFoaWRpbmdQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgIHRoaXMudWlIaWRlVGltZW91dC5zdGFydCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH1dO1xuXG4gICAgdGhpcy51c2VySW50ZXJhY3Rpb25FdmVudHMuZm9yRWFjaCgoZXZlbnQpID0+IHRoaXMudXNlckludGVyYWN0aW9uRXZlbnRTb3VyY2Uub24oZXZlbnQubmFtZSwgZXZlbnQuaGFuZGxlcikpO1xuXG4gICAgdWltYW5hZ2VyLm9uU2Vlay5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy51aUhpZGVUaW1lb3V0LmNsZWFyKCk7IC8vIERvbid0IGhpZGUgVUkgd2hpbGUgYSBzZWVrIGlzIGluIHByb2dyZXNzXG4gICAgICBpc1NlZWtpbmcgPSB0cnVlO1xuICAgIH0pO1xuICAgIHVpbWFuYWdlci5vblNlZWtlZC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgaXNTZWVraW5nID0gZmFsc2U7XG4gICAgICBpZiAoIWhpZGluZ1ByZXZlbnRlZCgpKSB7XG4gICAgICAgIHRoaXMudWlIaWRlVGltZW91dC5zdGFydCgpOyAvLyBSZS1lbmFibGUgVUkgaGlkZSB0aW1lb3V0IGFmdGVyIGEgc2Vla1xuICAgICAgfVxuICAgIH0pO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5DYXN0U3RhcnRlZCwgKCkgPT4ge1xuICAgICAgdGhpcy5zaG93VWkoKTsgLy8gU2hvdyBVSSB3aGVuIGEgQ2FzdCBzZXNzaW9uIGhhcyBzdGFydGVkIChVSSB3aWxsIHRoZW4gc3RheSBwZXJtYW5lbnRseSBvbiBkdXJpbmcgdGhlIHNlc3Npb24pXG4gICAgfSk7XG4gICAgdGhpcy5wbGF5ZXJTdGF0ZUNoYW5nZS5zdWJzY3JpYmUoKF8sIHN0YXRlKSA9PiB7XG4gICAgICBwbGF5ZXJTdGF0ZSA9IHN0YXRlO1xuICAgICAgaWYgKGhpZGluZ1ByZXZlbnRlZCgpKSB7XG4gICAgICAgIC8vIEVudGVyaW5nIGEgcGxheWVyIHN0YXRlIHRoYXQgcHJldmVudHMgaGlkaW5nIGFuZCBmb3JjZXMgdGhlIGNvbnRyb2xzIHRvIGJlIHNob3duXG4gICAgICAgIHRoaXMudWlIaWRlVGltZW91dC5jbGVhcigpO1xuICAgICAgICB0aGlzLnNob3dVaSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRW50ZXJpbmcgYSBwbGF5ZXIgc3RhdGUgdGhhdCBhbGxvd3MgaGlkaW5nXG4gICAgICAgIHRoaXMudWlIaWRlVGltZW91dC5zdGFydCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBjb25maWd1cmVQbGF5ZXJTdGF0ZXMocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBsZXQgY29udGFpbmVyID0gdGhpcy5nZXREb21FbGVtZW50KCk7XG5cbiAgICAvLyBDb252ZXJ0IHBsYXllciBzdGF0ZXMgaW50byBDU1MgY2xhc3MgbmFtZXNcbiAgICBsZXQgc3RhdGVDbGFzc05hbWVzID0gPGFueT5bXTtcbiAgICBmb3IgKGxldCBzdGF0ZSBpbiBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZSkge1xuICAgICAgaWYgKGlzTmFOKE51bWJlcihzdGF0ZSkpKSB7XG4gICAgICAgIGxldCBlbnVtTmFtZSA9IFBsYXllclV0aWxzLlBsYXllclN0YXRlWzxhbnk+UGxheWVyVXRpbHMuUGxheWVyU3RhdGVbc3RhdGVdXTtcbiAgICAgICAgc3RhdGVDbGFzc05hbWVzW1BsYXllclV0aWxzLlBsYXllclN0YXRlW3N0YXRlXV0gPVxuICAgICAgICAgIHRoaXMucHJlZml4Q3NzKFVJQ29udGFpbmVyLlNUQVRFX1BSRUZJWCArIGVudW1OYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCByZW1vdmVTdGF0ZXMgPSAoKSA9PiB7XG4gICAgICBjb250YWluZXIucmVtb3ZlQ2xhc3Moc3RhdGVDbGFzc05hbWVzW1BsYXllclV0aWxzLlBsYXllclN0YXRlLklkbGVdKTtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDbGFzcyhzdGF0ZUNsYXNzTmFtZXNbUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUHJlcGFyZWRdKTtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDbGFzcyhzdGF0ZUNsYXNzTmFtZXNbUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUGxheWluZ10pO1xuICAgICAgY29udGFpbmVyLnJlbW92ZUNsYXNzKHN0YXRlQ2xhc3NOYW1lc1tQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5QYXVzZWRdKTtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDbGFzcyhzdGF0ZUNsYXNzTmFtZXNbUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuRmluaXNoZWRdKTtcbiAgICB9O1xuXG4gICAgY29uc3QgdXBkYXRlU3RhdGUgPSAoc3RhdGU6IFBsYXllclV0aWxzLlBsYXllclN0YXRlKSA9PiB7XG4gICAgICByZW1vdmVTdGF0ZXMoKTtcbiAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyhzdGF0ZUNsYXNzTmFtZXNbc3RhdGVdKTtcbiAgICAgIHRoaXMucGxheWVyU3RhdGVDaGFuZ2UuZGlzcGF0Y2godGhpcywgc3RhdGUpO1xuICAgIH07XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU291cmNlTG9hZGVkLCAoKSA9PiB7XG4gICAgICB1cGRhdGVTdGF0ZShQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5QcmVwYXJlZCk7XG4gICAgfSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXksICgpID0+IHtcbiAgICAgIHVwZGF0ZVN0YXRlKFBsYXllclV0aWxzLlBsYXllclN0YXRlLlBsYXlpbmcpO1xuICAgIH0pO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5aW5nLCAoKSA9PiB7XG4gICAgICB1cGRhdGVTdGF0ZShQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5QbGF5aW5nKTtcbiAgICB9KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGF1c2VkLCAoKSA9PiB7XG4gICAgICB1cGRhdGVTdGF0ZShQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5QYXVzZWQpO1xuICAgIH0pO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5YmFja0ZpbmlzaGVkLCAoKSA9PiB7XG4gICAgICB1cGRhdGVTdGF0ZShQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5GaW5pc2hlZCk7XG4gICAgfSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZVVubG9hZGVkLCAoKSA9PiB7XG4gICAgICB1cGRhdGVTdGF0ZShQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5JZGxlKTtcbiAgICB9KTtcbiAgICB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdXBkYXRlU3RhdGUoUGxheWVyVXRpbHMuZ2V0U3RhdGUocGxheWVyKSk7XG4gICAgfSk7XG5cbiAgICAvLyBGdWxsc2NyZWVuIG1hcmtlciBjbGFzc1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5WaWV3TW9kZUNoYW5nZWQsICgpID0+IHtcbiAgICAgIGlmIChwbGF5ZXIuZ2V0Vmlld01vZGUoKSA9PT0gcGxheWVyLmV4cG9ydHMuVmlld01vZGUuRnVsbHNjcmVlbikge1xuICAgICAgICBjb250YWluZXIuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoVUlDb250YWluZXIuRlVMTFNDUkVFTikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4Q3NzKFVJQ29udGFpbmVyLkZVTExTQ1JFRU4pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBJbml0IGZ1bGxzY3JlZW4gc3RhdGVcbiAgICBpZiAocGxheWVyLmdldFZpZXdNb2RlKCkgPT09IHBsYXllci5leHBvcnRzLlZpZXdNb2RlLkZ1bGxzY3JlZW4pIHtcbiAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLnByZWZpeENzcyhVSUNvbnRhaW5lci5GVUxMU0NSRUVOKSk7XG4gICAgfVxuXG4gICAgLy8gQnVmZmVyaW5nIG1hcmtlciBjbGFzc1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TdGFsbFN0YXJ0ZWQsICgpID0+IHtcbiAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLnByZWZpeENzcyhVSUNvbnRhaW5lci5CVUZGRVJJTkcpKTtcbiAgICB9KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU3RhbGxFbmRlZCwgKCkgPT4ge1xuICAgICAgY29udGFpbmVyLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4Q3NzKFVJQ29udGFpbmVyLkJVRkZFUklORykpO1xuICAgIH0pO1xuICAgIC8vIEluaXQgYnVmZmVyaW5nIHN0YXRlXG4gICAgaWYgKHBsYXllci5pc1N0YWxsZWQoKSkge1xuICAgICAgY29udGFpbmVyLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKFVJQ29udGFpbmVyLkJVRkZFUklORykpO1xuICAgIH1cblxuICAgIC8vIFJlbW90ZUNvbnRyb2wgbWFya2VyIGNsYXNzXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkNhc3RTdGFydGVkLCAoKSA9PiB7XG4gICAgICBjb250YWluZXIuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoVUlDb250YWluZXIuUkVNT1RFX0NPTlRST0wpKTtcbiAgICB9KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQ2FzdFN0b3BwZWQsICgpID0+IHtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeENzcyhVSUNvbnRhaW5lci5SRU1PVEVfQ09OVFJPTCkpO1xuICAgIH0pO1xuICAgIC8vIEluaXQgUmVtb3RlQ29udHJvbCBzdGF0ZVxuICAgIGlmIChwbGF5ZXIuaXNDYXN0aW5nKCkpIHtcbiAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLnByZWZpeENzcyhVSUNvbnRhaW5lci5SRU1PVEVfQ09OVFJPTCkpO1xuICAgIH1cblxuICAgIC8vIENvbnRyb2xzIHZpc2liaWxpdHkgbWFya2VyIGNsYXNzXG4gICAgdWltYW5hZ2VyLm9uQ29udHJvbHNTaG93LnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBjb250YWluZXIucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoVUlDb250YWluZXIuQ09OVFJPTFNfSElEREVOKSk7XG4gICAgICBjb250YWluZXIuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoVUlDb250YWluZXIuQ09OVFJPTFNfU0hPV04pKTtcbiAgICB9KTtcbiAgICB1aW1hbmFnZXIub25Db250cm9sc0hpZGUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeENzcyhVSUNvbnRhaW5lci5DT05UUk9MU19TSE9XTikpO1xuICAgICAgY29udGFpbmVyLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKFVJQ29udGFpbmVyLkNPTlRST0xTX0hJRERFTikpO1xuICAgIH0pO1xuXG4gICAgLy8gTGF5b3V0IHNpemUgY2xhc3Nlc1xuICAgIGxldCB1cGRhdGVMYXlvdXRTaXplQ2xhc3NlcyA9ICh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgPT4ge1xuICAgICAgY29udGFpbmVyLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4Q3NzKCdsYXlvdXQtbWF4LXdpZHRoLTQwMCcpKTtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeENzcygnbGF5b3V0LW1heC13aWR0aC02MDAnKSk7XG4gICAgICBjb250YWluZXIucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoJ2xheW91dC1tYXgtd2lkdGgtODAwJykpO1xuICAgICAgY29udGFpbmVyLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4Q3NzKCdsYXlvdXQtbWF4LXdpZHRoLTEyMDAnKSk7XG5cbiAgICAgIGlmICh3aWR0aCA8PSA0MDApIHtcbiAgICAgICAgY29udGFpbmVyLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKCdsYXlvdXQtbWF4LXdpZHRoLTQwMCcpKTtcbiAgICAgIH0gZWxzZSBpZiAod2lkdGggPD0gNjAwKSB7XG4gICAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLnByZWZpeENzcygnbGF5b3V0LW1heC13aWR0aC02MDAnKSk7XG4gICAgICB9IGVsc2UgaWYgKHdpZHRoIDw9IDgwMCkge1xuICAgICAgICBjb250YWluZXIuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoJ2xheW91dC1tYXgtd2lkdGgtODAwJykpO1xuICAgICAgfSBlbHNlIGlmICh3aWR0aCA8PSAxMjAwKSB7XG4gICAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLnByZWZpeENzcygnbGF5b3V0LW1heC13aWR0aC0xMjAwJykpO1xuICAgICAgfVxuICAgIH07XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXllclJlc2l6ZWQsIChlOiBQbGF5ZXJSZXNpemVkRXZlbnQpID0+IHtcbiAgICAgIC8vIENvbnZlcnQgc3RyaW5ncyAod2l0aCBcInB4XCIgc3VmZml4KSB0byBpbnRzXG4gICAgICBsZXQgd2lkdGggPSBNYXRoLnJvdW5kKE51bWJlcihlLndpZHRoLnN1YnN0cmluZygwLCBlLndpZHRoLmxlbmd0aCAtIDIpKSk7XG4gICAgICBsZXQgaGVpZ2h0ID0gTWF0aC5yb3VuZChOdW1iZXIoZS5oZWlnaHQuc3Vic3RyaW5nKDAsIGUuaGVpZ2h0Lmxlbmd0aCAtIDIpKSk7XG5cbiAgICAgIHVwZGF0ZUxheW91dFNpemVDbGFzc2VzKHdpZHRoLCBoZWlnaHQpO1xuICAgIH0pO1xuICAgIC8vIEluaXQgbGF5b3V0IHN0YXRlXG4gICAgdXBkYXRlTGF5b3V0U2l6ZUNsYXNzZXMobmV3IERPTShwbGF5ZXIuZ2V0Q29udGFpbmVyKCkpLndpZHRoKCksIG5ldyBET00ocGxheWVyLmdldENvbnRhaW5lcigpKS5oZWlnaHQoKSk7XG4gIH1cblxuICByZWxlYXNlKCk6IHZvaWQge1xuICAgIC8vIEV4cGxpY2l0bHkgdW5zdWJzY3JpYmUgdXNlciBpbnRlcmFjdGlvbiBldmVudCBoYW5kbGVycyBiZWNhdXNlIHRoZXkgY291bGQgYmUgYXR0YWNoZWQgdG8gYW4gZXh0ZXJuYWwgZWxlbWVudFxuICAgIC8vIHRoYXQgaXNuJ3Qgb3duZWQgYnkgdGhlIFVJIGFuZCB0aGVyZWZvcmUgbm90IHJlbW92ZWQgb24gcmVsZWFzZS5cbiAgICBpZiAodGhpcy51c2VySW50ZXJhY3Rpb25FdmVudHMpIHtcbiAgICAgIHRoaXMudXNlckludGVyYWN0aW9uRXZlbnRzLmZvckVhY2goKGV2ZW50KSA9PiB0aGlzLnVzZXJJbnRlcmFjdGlvbkV2ZW50U291cmNlLm9mZihldmVudC5uYW1lLCBldmVudC5oYW5kbGVyKSk7XG4gICAgfVxuXG4gICAgc3VwZXIucmVsZWFzZSgpO1xuXG4gICAgaWYgKHRoaXMudWlIaWRlVGltZW91dCkge1xuICAgICAgdGhpcy51aUhpZGVUaW1lb3V0LmNsZWFyKCk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHRvRG9tRWxlbWVudCgpOiBET00ge1xuICAgIGxldCBjb250YWluZXIgPSBzdXBlci50b0RvbUVsZW1lbnQoKTtcblxuICAgIC8vIERldGVjdCBmbGV4Ym94IHN1cHBvcnQgKG5vdCBzdXBwb3J0ZWQgaW4gSUU5KVxuICAgIGlmIChkb2N1bWVudCAmJiB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLnN0eWxlLmZsZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb250YWluZXIuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoJ2ZsZXhib3gnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLnByZWZpeENzcygnbm8tZmxleGJveCcpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGFpbmVyO1xuICB9XG59XG4iLCJpbXBvcnQge1NlbGVjdEJveH0gZnJvbSAnLi9zZWxlY3Rib3gnO1xuaW1wb3J0IHtMaXN0U2VsZWN0b3JDb25maWd9IGZyb20gJy4vbGlzdHNlbGVjdG9yJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIHNlbGVjdCBib3ggcHJvdmlkaW5nIGEgc2VsZWN0aW9uIGJldHdlZW4gJ2F1dG8nIGFuZCB0aGUgYXZhaWxhYmxlIHZpZGVvIHF1YWxpdGllcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFZpZGVvUXVhbGl0eVNlbGVjdEJveCBleHRlbmRzIFNlbGVjdEJveCB7XG5cbiAgcHJpdmF0ZSBoYXNBdXRvOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogTGlzdFNlbGVjdG9yQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3NlczogWyd1aS12aWRlb3F1YWxpdHlzZWxlY3Rib3gnXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbGV0IHNlbGVjdEN1cnJlbnRWaWRlb1F1YWxpdHkgPSAoKSA9PiB7XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0ocGxheWVyLmdldFZpZGVvUXVhbGl0eSgpLmlkKTtcbiAgICB9O1xuXG4gICAgbGV0IHVwZGF0ZVZpZGVvUXVhbGl0aWVzID0gKCkgPT4ge1xuICAgICAgbGV0IHZpZGVvUXVhbGl0aWVzID0gcGxheWVyLmdldEF2YWlsYWJsZVZpZGVvUXVhbGl0aWVzKCk7XG5cbiAgICAgIHRoaXMuY2xlYXJJdGVtcygpO1xuXG4gICAgICAvLyBQcm9ncmVzc2l2ZSBzdHJlYW1zIGRvIG5vdCBzdXBwb3J0IGF1dG9tYXRpYyBxdWFsaXR5IHNlbGVjdGlvblxuICAgICAgdGhpcy5oYXNBdXRvID0gcGxheWVyLmdldFN0cmVhbVR5cGUoKSAhPT0gJ3Byb2dyZXNzaXZlJztcblxuICAgICAgaWYgKHRoaXMuaGFzQXV0bykge1xuICAgICAgICAvLyBBZGQgZW50cnkgZm9yIGF1dG9tYXRpYyBxdWFsaXR5IHN3aXRjaGluZyAoZGVmYXVsdCBzZXR0aW5nKVxuICAgICAgICB0aGlzLmFkZEl0ZW0oJ2F1dG8nLCBpMThuLmdldExvY2FsaXplcignYXV0bycpKTtcbiAgICAgIH1cblxuICAgICAgLy8gQWRkIHZpZGVvIHF1YWxpdGllc1xuICAgICAgZm9yIChsZXQgdmlkZW9RdWFsaXR5IG9mIHZpZGVvUXVhbGl0aWVzKSB7XG4gICAgICAgIHRoaXMuYWRkSXRlbSh2aWRlb1F1YWxpdHkuaWQsIHZpZGVvUXVhbGl0eS5sYWJlbCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNlbGVjdCBpbml0aWFsIHF1YWxpdHlcbiAgICAgIHNlbGVjdEN1cnJlbnRWaWRlb1F1YWxpdHkoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5vbkl0ZW1TZWxlY3RlZC5zdWJzY3JpYmUoKHNlbmRlcjogVmlkZW9RdWFsaXR5U2VsZWN0Qm94LCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICBwbGF5ZXIuc2V0VmlkZW9RdWFsaXR5KHZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8vIFVwZGF0ZSBxdWFsaXRpZXMgd2hlbiBzb3VyY2UgZ29lcyBhd2F5XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZVVubG9hZGVkLCB1cGRhdGVWaWRlb1F1YWxpdGllcyk7XG4gICAgLy8gVXBkYXRlIHF1YWxpdGllcyB3aGVuIHRoZSBwZXJpb2Qgd2l0aGluIGEgc291cmNlIGNoYW5nZXNcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGVyaW9kU3dpdGNoZWQsIHVwZGF0ZVZpZGVvUXVhbGl0aWVzKTtcbiAgICAvLyBVcGRhdGUgcXVhbGl0eSBzZWxlY3Rpb24gd2hlbiBxdWFsaXR5IGlzIGNoYW5nZWQgKGZyb20gb3V0c2lkZSlcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVmlkZW9RdWFsaXR5Q2hhbmdlZCwgc2VsZWN0Q3VycmVudFZpZGVvUXVhbGl0eSk7XG5cbiAgICBpZiAoKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50IGFzIGFueSkuVmlkZW9RdWFsaXR5QWRkZWQpIHtcbiAgICAgIC8vIFVwZGF0ZSBxdWFsaXRpZXMgd2hlbiB0aGVpciBhdmFpbGFiaWxpdHkgY2hhbmdlZFxuICAgICAgLy8gVE9ETzogcmVtb3ZlIGFueSBjYXN0IGFmdGVyIG5leHQgcGxheWVyIHJlbGVhc2VcbiAgICAgIHBsYXllci5vbigocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQgYXMgYW55KS5WaWRlb1F1YWxpdHlBZGRlZCwgdXBkYXRlVmlkZW9RdWFsaXRpZXMpO1xuICAgICAgcGxheWVyLm9uKChwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudCBhcyBhbnkpLlZpZGVvUXVhbGl0eVJlbW92ZWQsIHVwZGF0ZVZpZGVvUXVhbGl0aWVzKTtcbiAgICB9XG5cbiAgICB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUodXBkYXRlVmlkZW9RdWFsaXRpZXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc2VsZWN0IGJveCBjb250YWlucyBhbiAnYXV0bycgaXRlbSBmb3IgYXV0b21hdGljIHF1YWxpdHkgc2VsZWN0aW9uIG1vZGUuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBoYXNBdXRvSXRlbSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5oYXNBdXRvO1xuICB9XG59IiwiaW1wb3J0IHtDb250YWluZXIsIENvbnRhaW5lckNvbmZpZ30gZnJvbSAnLi9jb250YWluZXInO1xuaW1wb3J0IHtWb2x1bWVTbGlkZXJ9IGZyb20gJy4vdm9sdW1lc2xpZGVyJztcbmltcG9ydCB7Vm9sdW1lVG9nZ2xlQnV0dG9ufSBmcm9tICcuL3ZvbHVtZXRvZ2dsZWJ1dHRvbic7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHtUaW1lb3V0fSBmcm9tICcuLi90aW1lb3V0JztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIGEge0BsaW5rIFZvbHVtZUNvbnRyb2xCdXR0b259LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFZvbHVtZUNvbnRyb2xCdXR0b25Db25maWcgZXh0ZW5kcyBDb250YWluZXJDb25maWcge1xuICAvKipcbiAgICogVGhlIGRlbGF5IGFmdGVyIHdoaWNoIHRoZSB2b2x1bWUgc2xpZGVyIHdpbGwgYmUgaGlkZGVuIHdoZW4gdGhlcmUgaXMgbm8gdXNlciBpbnRlcmFjdGlvbi5cbiAgICogQ2FyZSBtdXN0IGJlIHRha2VuIHRoYXQgdGhlIGRlbGF5IGlzIGxvbmcgZW5vdWdoIHNvIHVzZXJzIGNhbiByZWFjaCB0aGUgc2xpZGVyIGZyb20gdGhlIHRvZ2dsZSBidXR0b24sIGUuZy4gYnlcbiAgICogbW91c2UgbW92ZW1lbnQuIElmIHRoZSBkZWxheSBpcyB0b28gc2hvcnQsIHRoZSBzbGlkZXJzIGRpc2FwcGVhcnMgYmVmb3JlIHRoZSBtb3VzZSBwb2ludGVyIGhhcyByZWFjaGVkIGl0IGFuZFxuICAgKiB0aGUgdXNlciBpcyBub3QgYWJsZSB0byB1c2UgaXQuXG4gICAqIERlZmF1bHQ6IDUwMG1zXG4gICAqL1xuICBoaWRlRGVsYXk/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgaWYgdGhlIHZvbHVtZSBzbGlkZXIgc2hvdWxkIGJlIHZlcnRpY2FsbHkgb3IgaG9yaXpvbnRhbGx5IGFsaWduZWQuXG4gICAqIERlZmF1bHQ6IHRydWVcbiAgICovXG4gIHZlcnRpY2FsPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBBIGNvbXBvc2l0ZSB2b2x1bWUgY29udHJvbCB0aGF0IGNvbnNpc3RzIG9mIGFuZCBpbnRlcm5hbGx5IG1hbmFnZXMgYSB2b2x1bWUgY29udHJvbCBidXR0b24gdGhhdCBjYW4gYmUgdXNlZFxuICogZm9yIG11dGluZywgYW5kIGEgKGRlcGVuZGluZyBvbiB0aGUgQ1NTIHN0eWxlLCBlLmcuIHNsaWRlLW91dCkgdm9sdW1lIGNvbnRyb2wgYmFyLlxuICovXG5leHBvcnQgY2xhc3MgVm9sdW1lQ29udHJvbEJ1dHRvbiBleHRlbmRzIENvbnRhaW5lcjxWb2x1bWVDb250cm9sQnV0dG9uQ29uZmlnPiB7XG5cbiAgcHJpdmF0ZSB2b2x1bWVUb2dnbGVCdXR0b246IFZvbHVtZVRvZ2dsZUJ1dHRvbjtcbiAgcHJpdmF0ZSB2b2x1bWVTbGlkZXI6IFZvbHVtZVNsaWRlcjtcblxuICBwcml2YXRlIHZvbHVtZVNsaWRlckhpZGVUaW1lb3V0OiBUaW1lb3V0O1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogVm9sdW1lQ29udHJvbEJ1dHRvbkNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMudm9sdW1lVG9nZ2xlQnV0dG9uID0gbmV3IFZvbHVtZVRvZ2dsZUJ1dHRvbigpO1xuICAgIHRoaXMudm9sdW1lU2xpZGVyID0gbmV3IFZvbHVtZVNsaWRlcih7XG4gICAgICB2ZXJ0aWNhbDogY29uZmlnLnZlcnRpY2FsICE9IG51bGwgPyBjb25maWcudmVydGljYWwgOiB0cnVlLFxuICAgICAgaGlkZGVuOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS12b2x1bWVjb250cm9sYnV0dG9uJyxcbiAgICAgIGNvbXBvbmVudHM6IFt0aGlzLnZvbHVtZVRvZ2dsZUJ1dHRvbiwgdGhpcy52b2x1bWVTbGlkZXJdLFxuICAgICAgaGlkZURlbGF5OiA1MDAsXG4gICAgfSwgPFZvbHVtZUNvbnRyb2xCdXR0b25Db25maWc+dGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCB2b2x1bWVUb2dnbGVCdXR0b24gPSB0aGlzLmdldFZvbHVtZVRvZ2dsZUJ1dHRvbigpO1xuICAgIGxldCB2b2x1bWVTbGlkZXIgPSB0aGlzLmdldFZvbHVtZVNsaWRlcigpO1xuXG4gICAgdGhpcy52b2x1bWVTbGlkZXJIaWRlVGltZW91dCA9IG5ldyBUaW1lb3V0KHRoaXMuZ2V0Q29uZmlnKCkuaGlkZURlbGF5LCAoKSA9PiB7XG4gICAgICB2b2x1bWVTbGlkZXIuaGlkZSgpO1xuICAgIH0pO1xuXG4gICAgLypcbiAgICAgKiBWb2x1bWUgU2xpZGVyIHZpc2liaWxpdHkgaGFuZGxpbmdcbiAgICAgKlxuICAgICAqIFRoZSB2b2x1bWUgc2xpZGVyIHNoYWxsIGJlIHZpc2libGUgd2hpbGUgdGhlIHVzZXIgaG92ZXJzIHRoZSBtdXRlIHRvZ2dsZSBidXR0b24sIHdoaWxlIHRoZSB1c2VyIGhvdmVycyB0aGVcbiAgICAgKiB2b2x1bWUgc2xpZGVyLCBhbmQgd2hpbGUgdGhlIHVzZXIgc2xpZGVzIHRoZSB2b2x1bWUgc2xpZGVyLiBJZiBub25lIG9mIHRoZXNlIHNpdHVhdGlvbnMgYXJlIHRydWUsIHRoZSBzbGlkZXJcbiAgICAgKiBzaGFsbCBkaXNhcHBlYXIuXG4gICAgICovXG4gICAgbGV0IHZvbHVtZVNsaWRlckhvdmVyZWQgPSBmYWxzZTtcbiAgICB2b2x1bWVUb2dnbGVCdXR0b24uZ2V0RG9tRWxlbWVudCgpLm9uKCdtb3VzZWVudGVyJywgKCkgPT4ge1xuICAgICAgLy8gU2hvdyB2b2x1bWUgc2xpZGVyIHdoZW4gbW91c2UgZW50ZXJzIHRoZSBidXR0b24gYXJlYVxuICAgICAgaWYgKHZvbHVtZVNsaWRlci5pc0hpZGRlbigpKSB7XG4gICAgICAgIHZvbHVtZVNsaWRlci5zaG93KCk7XG4gICAgICB9XG4gICAgICAvLyBBdm9pZCBoaWRpbmcgb2YgdGhlIHNsaWRlciB3aGVuIGJ1dHRvbiBpcyBob3ZlcmVkXG4gICAgICB0aGlzLnZvbHVtZVNsaWRlckhpZGVUaW1lb3V0LmNsZWFyKCk7XG4gICAgfSk7XG4gICAgdm9sdW1lVG9nZ2xlQnV0dG9uLmdldERvbUVsZW1lbnQoKS5vbignbW91c2VsZWF2ZScsICgpID0+IHtcbiAgICAgIC8vIEhpZGUgc2xpZGVyIGRlbGF5ZWQgd2hlbiBidXR0b24gaXMgbGVmdFxuICAgICAgdGhpcy52b2x1bWVTbGlkZXJIaWRlVGltZW91dC5yZXNldCgpO1xuICAgIH0pO1xuICAgIHZvbHVtZVNsaWRlci5nZXREb21FbGVtZW50KCkub24oJ21vdXNlZW50ZXInLCAoKSA9PiB7XG4gICAgICAvLyBXaGVuIHRoZSBzbGlkZXIgaXMgZW50ZXJlZCwgY2FuY2VsIHRoZSBoaWRlIHRpbWVvdXQgYWN0aXZhdGVkIGJ5IGxlYXZpbmcgdGhlIGJ1dHRvblxuICAgICAgdGhpcy52b2x1bWVTbGlkZXJIaWRlVGltZW91dC5jbGVhcigpO1xuICAgICAgdm9sdW1lU2xpZGVySG92ZXJlZCA9IHRydWU7XG4gICAgfSk7XG4gICAgdm9sdW1lU2xpZGVyLmdldERvbUVsZW1lbnQoKS5vbignbW91c2VsZWF2ZScsICgpID0+IHtcbiAgICAgIC8vIFdoZW4gbW91c2UgbGVhdmVzIHRoZSBzbGlkZXIsIG9ubHkgaGlkZSBpdCBpZiB0aGVyZSBpcyBubyBzbGlkZSBvcGVyYXRpb24gaW4gcHJvZ3Jlc3NcbiAgICAgIGlmICh2b2x1bWVTbGlkZXIuaXNTZWVraW5nKCkpIHtcbiAgICAgICAgdGhpcy52b2x1bWVTbGlkZXJIaWRlVGltZW91dC5jbGVhcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy52b2x1bWVTbGlkZXJIaWRlVGltZW91dC5yZXNldCgpO1xuICAgICAgfVxuICAgICAgdm9sdW1lU2xpZGVySG92ZXJlZCA9IGZhbHNlO1xuICAgIH0pO1xuICAgIHZvbHVtZVNsaWRlci5vblNlZWtlZC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgLy8gV2hlbiBhIHNsaWRlIG9wZXJhdGlvbiBpcyBkb25lIGFuZCB0aGUgc2xpZGVyIG5vdCBob3ZlcmVkIChtb3VzZSBvdXRzaWRlIHNsaWRlciksIGhpZGUgc2xpZGVyIGRlbGF5ZWRcbiAgICAgIGlmICghdm9sdW1lU2xpZGVySG92ZXJlZCkge1xuICAgICAgICB0aGlzLnZvbHVtZVNsaWRlckhpZGVUaW1lb3V0LnJlc2V0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZWxlYXNlKCk6IHZvaWQge1xuICAgIHN1cGVyLnJlbGVhc2UoKTtcbiAgICB0aGlzLnZvbHVtZVNsaWRlckhpZGVUaW1lb3V0LmNsZWFyKCk7XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBpbnRlcm5hbGx5IG1hbmFnZWQgdm9sdW1lIHRvZ2dsZSBidXR0b24uXG4gICAqIEByZXR1cm5zIHtWb2x1bWVUb2dnbGVCdXR0b259XG4gICAqL1xuICBnZXRWb2x1bWVUb2dnbGVCdXR0b24oKTogVm9sdW1lVG9nZ2xlQnV0dG9uIHtcbiAgICByZXR1cm4gdGhpcy52b2x1bWVUb2dnbGVCdXR0b247XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBpbnRlcm5hbGx5IG1hbmFnZWQgdm9sdW1lIHNpbGRlci5cbiAgICogQHJldHVybnMge1ZvbHVtZVNsaWRlcn1cbiAgICovXG4gIGdldFZvbHVtZVNsaWRlcigpOiBWb2x1bWVTbGlkZXIge1xuICAgIHJldHVybiB0aGlzLnZvbHVtZVNsaWRlcjtcbiAgfVxufSIsImltcG9ydCB7IFNlZWtCYXIsIFNlZWtCYXJDb25maWcsIFNlZWtQcmV2aWV3RXZlbnRBcmdzIH0gZnJvbSAnLi9zZWVrYmFyJztcbmltcG9ydCB7IFVJSW5zdGFuY2VNYW5hZ2VyIH0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBWb2x1bWVUcmFuc2l0aW9uIH0gZnJvbSAnLi4vdm9sdW1lY29udHJvbGxlcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIGZvciB0aGUge0BsaW5rIFZvbHVtZVNsaWRlcn0gY29tcG9uZW50LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFZvbHVtZVNsaWRlckNvbmZpZyBleHRlbmRzIFNlZWtCYXJDb25maWcge1xuICAvKipcbiAgICogU3BlY2lmaWVzIGlmIHRoZSB2b2x1bWUgc2xpZGVyIHNob3VsZCBiZSBhdXRvbWF0aWNhbGx5IGhpZGRlbiB3aGVuIHZvbHVtZSBjb250cm9sIGlzIHByb2hpYml0ZWQgYnkgdGhlXG4gICAqIGJyb3dzZXIgb3IgcGxhdGZvcm0uIFRoaXMgY3VycmVudGx5IG9ubHkgYXBwbGllcyB0byBpT1MuXG4gICAqIERlZmF1bHQ6IHRydWVcbiAgICovXG4gIGhpZGVJZlZvbHVtZUNvbnRyb2xQcm9oaWJpdGVkPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBBIHNpbXBsZSB2b2x1bWUgc2xpZGVyIGNvbXBvbmVudCB0byBhZGp1c3QgdGhlIHBsYXllcidzIHZvbHVtZSBzZXR0aW5nLlxuICovXG5leHBvcnQgY2xhc3MgVm9sdW1lU2xpZGVyIGV4dGVuZHMgU2Vla0JhciB7XG4gIHByaXZhdGUgdm9sdW1lVHJhbnNpdGlvbjogVm9sdW1lVHJhbnNpdGlvbjtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFZvbHVtZVNsaWRlckNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIDxWb2x1bWVTbGlkZXJDb25maWc+e1xuICAgICAgY3NzQ2xhc3M6ICd1aS12b2x1bWVzbGlkZXInLFxuICAgICAgaGlkZUlmVm9sdW1lQ29udHJvbFByb2hpYml0ZWQ6IHRydWUsXG4gICAgICBhcmlhTGFiZWw6IGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5hdWRpby52b2x1bWUnKSxcbiAgICAgIHRhYkluZGV4OiAwLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0Vm9sdW1lQXJpYVNsaWRlclZhbHVlcyh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5nZXREb21FbGVtZW50KCkuYXR0cignYXJpYS12YWx1ZW5vdycsIE1hdGguY2VpbCh2YWx1ZSkudG9TdHJpbmcoKSk7XG4gICAgdGhpcy5nZXREb21FbGVtZW50KCkuYXR0cignYXJpYS12YWx1ZXRleHQnLCBgJHtpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24oaTE4bi5nZXRMb2NhbGl6ZXIoJ3NlZWtCYXIudmFsdWUnKSl9OiAke01hdGguY2VpbCh2YWx1ZSl9YCk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIsIGZhbHNlKTtcblxuICAgIHRoaXMuc2V0QXJpYVNsaWRlck1pbk1heCgnMCcsICcxMDAnKTtcblxuICAgIGxldCBjb25maWcgPSA8Vm9sdW1lU2xpZGVyQ29uZmlnPnRoaXMuZ2V0Q29uZmlnKCk7XG5cbiAgICBjb25zdCB2b2x1bWVDb250cm9sbGVyID0gdWltYW5hZ2VyLmdldENvbmZpZygpLnZvbHVtZUNvbnRyb2xsZXI7XG5cbiAgICBpZiAoY29uZmlnLmhpZGVJZlZvbHVtZUNvbnRyb2xQcm9oaWJpdGVkICYmICF0aGlzLmRldGVjdFZvbHVtZUNvbnRyb2xBdmFpbGFiaWxpdHkoKSkge1xuICAgICAgdGhpcy5oaWRlKCk7XG5cbiAgICAgIC8vIFdlIGNhbiBqdXN0IHJldHVybiBmcm9tIGhlcmUsIGJlY2F1c2UgdGhlIHVzZXIgd2lsbCBuZXZlciBpbnRlcmFjdCB3aXRoIHRoZSBjb250cm9sIGFuZCBhbnkgY29uZmlndXJlZFxuICAgICAgLy8gZnVuY3Rpb25hbGl0eSB3b3VsZCBvbmx5IGVhdCByZXNvdXJjZXMgZm9yIG5vIHJlYXNvbi5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2b2x1bWVDb250cm9sbGVyLm9uQ2hhbmdlZC5zdWJzY3JpYmUoKF8sIGFyZ3MpID0+IHtcbiAgICAgIGlmIChhcmdzLm11dGVkKSB7XG4gICAgICAgIHRoaXMuc2V0Vm9sdW1lQXJpYVNsaWRlclZhbHVlcygwKTtcbiAgICAgICAgdGhpcy5zZXRQbGF5YmFja1Bvc2l0aW9uKDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRQbGF5YmFja1Bvc2l0aW9uKGFyZ3Mudm9sdW1lKTtcbiAgICAgICAgdGhpcy5zZXRWb2x1bWVBcmlhU2xpZGVyVmFsdWVzKGFyZ3Mudm9sdW1lKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMub25TZWVrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLnZvbHVtZVRyYW5zaXRpb24gPSB2b2x1bWVDb250cm9sbGVyLnN0YXJ0VHJhbnNpdGlvbigpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vblNlZWtQcmV2aWV3LnN1YnNjcmliZVJhdGVMaW1pdGVkKHRoaXMudXBkYXRlVm9sdW1lV2hpbGVTY3J1YmJpbmcsIDUwKTtcbiAgICB0aGlzLm9uU2Vla2VkLnN1YnNjcmliZSgoc2VuZGVyLCBwZXJjZW50YWdlKSA9PiB7XG4gICAgICBpZiAodGhpcy52b2x1bWVUcmFuc2l0aW9uKSB7XG4gICAgICAgIHRoaXMudm9sdW1lVHJhbnNpdGlvbi5maW5pc2gocGVyY2VudGFnZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBVcGRhdGUgdGhlIHZvbHVtZSBzbGlkZXIgbWFya2VyIHdoZW4gdGhlIHBsYXllciByZXNpemVkLCBhIHNvdXJjZSBpcyBsb2FkZWQsXG4gICAgLy8gb3IgdGhlIFVJIGlzIGNvbmZpZ3VyZWQuIENoZWNrIHRoZSBzZWVrYmFyIGZvciBhIGRldGFpbGVkIGRlc2NyaXB0aW9uLlxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5ZXJSZXNpemVkLCAoKSA9PiB7XG4gICAgICB0aGlzLnJlZnJlc2hQbGF5YmFja1Bvc2l0aW9uKCk7XG4gICAgfSk7XG4gICAgdWltYW5hZ2VyLm9uQ29uZmlndXJlZC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5yZWZyZXNoUGxheWJhY2tQb3NpdGlvbigpO1xuICAgIH0pO1xuXG4gICAgdWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMucmVmcmVzaFBsYXliYWNrUG9zaXRpb24oKTtcbiAgICB9KTtcblxuICAgIHVpbWFuYWdlci5vbkNvbXBvbmVudFNob3cuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMucmVmcmVzaFBsYXliYWNrUG9zaXRpb24oKTtcbiAgICB9KTtcbiAgICB1aW1hbmFnZXIub25Db21wb25lbnRIaWRlLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLnJlZnJlc2hQbGF5YmFja1Bvc2l0aW9uKCk7XG4gICAgfSk7XG5cbiAgICAvLyBJbml0IHZvbHVtZSBiYXJcbiAgICB2b2x1bWVDb250cm9sbGVyLm9uQ2hhbmdlZEV2ZW50KCk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVZvbHVtZVdoaWxlU2NydWJiaW5nID0gKHNlbmRlcjogVm9sdW1lU2xpZGVyLCBhcmdzOiBTZWVrUHJldmlld0V2ZW50QXJncykgPT4ge1xuICAgIGlmIChhcmdzLnNjcnViYmluZyAmJiB0aGlzLnZvbHVtZVRyYW5zaXRpb24pIHtcbiAgICAgIHRoaXMudm9sdW1lVHJhbnNpdGlvbi51cGRhdGUoYXJncy5wb3NpdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgZGV0ZWN0Vm9sdW1lQ29udHJvbEF2YWlsYWJpbGl0eSgpOiBib29sZWFuIHtcbiAgICAvKlxuICAgICAqIFwiT24gaU9TIGRldmljZXMsIHRoZSBhdWRpbyBsZXZlbCBpcyBhbHdheXMgdW5kZXIgdGhlIHVzZXLigJlzIHBoeXNpY2FsIGNvbnRyb2wuIFRoZSB2b2x1bWUgcHJvcGVydHkgaXMgbm90XG4gICAgICogc2V0dGFibGUgaW4gSmF2YVNjcmlwdC4gUmVhZGluZyB0aGUgdm9sdW1lIHByb3BlcnR5IGFsd2F5cyByZXR1cm5zIDEuXCJcbiAgICAgKiBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFyeS9jb250ZW50L2RvY3VtZW50YXRpb24vQXVkaW9WaWRlby9Db25jZXB0dWFsL1VzaW5nX0hUTUw1X0F1ZGlvX1ZpZGVvL0RldmljZS1TcGVjaWZpY0NvbnNpZGVyYXRpb25zL0RldmljZS1TcGVjaWZpY0NvbnNpZGVyYXRpb25zLmh0bWxcbiAgICAgKi9cbiAgICAvLyBhcyBtdXRlZCBhdXRvcGxheSBnZXRzIHBhdXNlZCBhcyBzb29uIGFzIHdlIHVubXV0ZSBpdCwgd2UgbWF5IG5vdCB0b3VjaCB0aGUgdm9sdW1lIG9mIHRoZSBhY3R1YWwgcGxheWVyIHNvIHdlXG4gICAgLy8gcHJvYmUgYSBkdW1teSBhdWRpbyBlbGVtZW50XG4gICAgY29uc3QgZHVtbXlWaWRlb0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuICAgIC8vIHRyeSBzZXR0aW5nIHRoZSB2b2x1bWUgdG8gMC43IGFuZCBpZiBpdCdzIHN0aWxsIDEgd2UgYXJlIG9uIGEgdm9sdW1lIGNvbnRyb2wgcmVzdHJpY3RlZCBkZXZpY2VcbiAgICBkdW1teVZpZGVvRWxlbWVudC52b2x1bWUgPSAwLjc7XG4gICAgcmV0dXJuIGR1bW15VmlkZW9FbGVtZW50LnZvbHVtZSAhPT0gMTtcbiAgfVxuXG4gIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgc3VwZXIucmVsZWFzZSgpO1xuXG4gICAgdGhpcy5vblNlZWtQcmV2aWV3LnVuc3Vic2NyaWJlKHRoaXMudXBkYXRlVm9sdW1lV2hpbGVTY3J1YmJpbmcpO1xuICB9XG59XG4iLCJpbXBvcnQge1RvZ2dsZUJ1dHRvbiwgVG9nZ2xlQnV0dG9uQ29uZmlnfSBmcm9tICcuL3RvZ2dsZWJ1dHRvbic7XG5pbXBvcnQgeyBVSUluc3RhbmNlTWFuYWdlciB9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIGJ1dHRvbiB0aGF0IHRvZ2dsZXMgYXVkaW8gbXV0aW5nLlxuICovXG5leHBvcnQgY2xhc3MgVm9sdW1lVG9nZ2xlQnV0dG9uIGV4dGVuZHMgVG9nZ2xlQnV0dG9uPFRvZ2dsZUJ1dHRvbkNvbmZpZz4ge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogVG9nZ2xlQnV0dG9uQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgY29uc3QgZGVmYXVsdENvbmZpZzogVG9nZ2xlQnV0dG9uQ29uZmlnID0ge1xuICAgICAgY3NzQ2xhc3M6ICd1aS12b2x1bWV0b2dnbGVidXR0b24nLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLmF1ZGlvLm11dGUnKSxcbiAgICAgIG9uQ2xhc3M6ICdtdXRlZCcsXG4gICAgICBvZmZDbGFzczogJ3VubXV0ZWQnLFxuICAgICAgYXJpYUxhYmVsOiBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3MuYXVkaW8ubXV0ZScpLFxuICAgIH07XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCBkZWZhdWx0Q29uZmlnLCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgY29uc3Qgdm9sdW1lQ29udHJvbGxlciA9IHVpbWFuYWdlci5nZXRDb25maWcoKS52b2x1bWVDb250cm9sbGVyO1xuXG4gICAgdm9sdW1lQ29udHJvbGxlci5vbkNoYW5nZWQuc3Vic2NyaWJlKChfLCBhcmdzKSA9PiB7XG4gICAgICBpZiAoYXJncy5tdXRlZCkge1xuICAgICAgICB0aGlzLm9uKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9mZigpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB2b2x1bWVMZXZlbFRlbnMgPSBNYXRoLmNlaWwoYXJncy52b2x1bWUgLyAxMCk7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5kYXRhKHRoaXMucHJlZml4Q3NzKCd2b2x1bWUtbGV2ZWwtdGVucycpLCBTdHJpbmcodm9sdW1lTGV2ZWxUZW5zKSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHZvbHVtZUNvbnRyb2xsZXIudG9nZ2xlTXV0ZWQoKTtcbiAgICB9KTtcblxuICAgIC8vIFN0YXJ0dXAgaW5pdFxuICAgIHZvbHVtZUNvbnRyb2xsZXIub25DaGFuZ2VkRXZlbnQoKTtcbiAgfVxufSIsImltcG9ydCB7VG9nZ2xlQnV0dG9uLCBUb2dnbGVCdXR0b25Db25maWd9IGZyb20gJy4vdG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEksIFBsYXllckV2ZW50QmFzZSwgV2FybmluZ0V2ZW50IH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBidXR0b24gdGhhdCB0b2dnbGVzIHRoZSB2aWRlbyB2aWV3IGJldHdlZW4gbm9ybWFsL21vbm8gYW5kIFZSL3N0ZXJlby5cbiAqL1xuZXhwb3J0IGNsYXNzIFZSVG9nZ2xlQnV0dG9uIGV4dGVuZHMgVG9nZ2xlQnV0dG9uPFRvZ2dsZUJ1dHRvbkNvbmZpZz4ge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogVG9nZ2xlQnV0dG9uQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS12cnRvZ2dsZWJ1dHRvbicsXG4gICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcigndnInKSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbGV0IGlzVlJDb25maWd1cmVkID0gKCkgPT4ge1xuICAgICAgLy8gVlIgYXZhaWxhYmlsaXR5IGNhbm5vdCBiZSBjaGVja2VkIHRocm91Z2ggZ2V0VlJTdGF0dXMoKSBiZWNhdXNlIGl0IGlzIGFzeW5jaHJvbm91c2x5IHBvcHVsYXRlZCBhbmQgbm90XG4gICAgICAvLyBhdmFpbGFibGUgYXQgVUkgaW5pdGlhbGl6YXRpb24uIEFzIGFuIGFsdGVybmF0aXZlLCB3ZSBjaGVjayB0aGUgVlIgc2V0dGluZ3MgaW4gdGhlIGNvbmZpZy5cbiAgICAgIC8vIFRPRE8gdXNlIGdldFZSU3RhdHVzKCkgdGhyb3VnaCBpc1ZSU3RlcmVvQXZhaWxhYmxlKCkgb25jZSB0aGUgcGxheWVyIGhhcyBiZWVuIHJld3JpdHRlbiBhbmQgdGhlIHN0YXR1cyBpc1xuICAgICAgLy8gYXZhaWxhYmxlIGluIFJlYWR5XG4gICAgICBjb25zdCBzb3VyY2UgPSBwbGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICByZXR1cm4gc291cmNlICYmIEJvb2xlYW4oc291cmNlLnZyKTtcbiAgICB9O1xuXG4gICAgbGV0IGlzVlJTdGVyZW9BdmFpbGFibGUgPSAoKSA9PiB7XG4gICAgICBjb25zdCBzb3VyY2UgPSBwbGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICByZXR1cm4gcGxheWVyLnZyICYmIEJvb2xlYW4oc291cmNlLnZyKTtcbiAgICB9O1xuXG4gICAgbGV0IHZyU3RhdGVIYW5kbGVyID0gKGV2OiBQbGF5ZXJFdmVudEJhc2UpID0+IHtcbiAgICAgIGlmIChldi50eXBlID09PSBwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5XYXJuaW5nXG4gICAgICAgICYmIChldiBhcyBXYXJuaW5nRXZlbnQpLmNvZGUgIT09IHBsYXllci5leHBvcnRzLldhcm5pbmdDb2RlLlZSX1JFTkRFUklOR19FUlJPUikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1ZSQ29uZmlndXJlZCgpICYmIGlzVlJTdGVyZW9BdmFpbGFibGUoKSkge1xuICAgICAgICB0aGlzLnNob3coKTsgLy8gc2hvdyBidXR0b24gaW4gY2FzZSBpdCBpcyBoaWRkZW5cblxuICAgICAgICBpZiAocGxheWVyLnZyICYmIHBsYXllci52ci5nZXRTdGVyZW8oKSkge1xuICAgICAgICAgIHRoaXMub24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm9mZigpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmhpZGUoKTsgLy8gaGlkZSBidXR0b24gaWYgbm8gc3RlcmVvIG1vZGUgYXZhaWxhYmxlXG4gICAgICB9XG4gICAgfTtcblxuICAgIGxldCB2ckJ1dHRvblZpc2liaWxpdHlIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgaWYgKGlzVlJDb25maWd1cmVkKCkpIHtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlZSU3RlcmVvQ2hhbmdlZCwgdnJTdGF0ZUhhbmRsZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5XYXJuaW5nLCB2clN0YXRlSGFuZGxlcik7XG4gICAgLy8gSGlkZSBidXR0b24gd2hlbiBWUiBzb3VyY2UgZ29lcyBhd2F5XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZVVubG9hZGVkLCB2ckJ1dHRvblZpc2liaWxpdHlIYW5kbGVyKTtcbiAgICB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUodnJCdXR0b25WaXNpYmlsaXR5SGFuZGxlcik7XG5cbiAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGlmICghaXNWUlN0ZXJlb0F2YWlsYWJsZSgpKSB7XG4gICAgICAgIGlmIChjb25zb2xlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ05vIFZSIGNvbnRlbnQnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHBsYXllci52ciAmJiBwbGF5ZXIudnIuZ2V0U3RlcmVvKCkpIHtcbiAgICAgICAgICBwbGF5ZXIudnIuc2V0U3RlcmVvKGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwbGF5ZXIudnIuc2V0U3RlcmVvKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBTZXQgc3RhcnR1cCB2aXNpYmlsaXR5XG4gICAgdnJCdXR0b25WaXNpYmlsaXR5SGFuZGxlcigpO1xuICB9XG59IiwiaW1wb3J0IHtDbGlja092ZXJsYXksIENsaWNrT3ZlcmxheUNvbmZpZ30gZnJvbSAnLi9jbGlja292ZXJsYXknO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgYSB7QGxpbmsgQ2xpY2tPdmVybGF5fS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBXYXRlcm1hcmtDb25maWcgZXh0ZW5kcyBDbGlja092ZXJsYXlDb25maWcge1xuICAvLyBub3RoaW5nIHlldFxufVxuXG4vKipcbiAqIEEgd2F0ZXJtYXJrIG92ZXJsYXkgd2l0aCBhIGNsaWNrYWJsZSBsb2dvLlxuICovXG5leHBvcnQgY2xhc3MgV2F0ZXJtYXJrIGV4dGVuZHMgQ2xpY2tPdmVybGF5IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFdhdGVybWFya0NvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktd2F0ZXJtYXJrJyxcbiAgICAgIHVybDogJ2h0dHA6Ly9iaXRtb3Zpbi5jb20nLFxuICAgICAgcm9sZTogJ2xpbmsnLFxuICAgICAgdGV4dDogJ2xvZ28nLFxuICAgICAgYXJpYUxhYmVsOiBpMThuLmdldExvY2FsaXplcignd2F0ZXJtYXJrTGluaycpLFxuICAgIH0sIDxXYXRlcm1hcmtDb25maWc+dGhpcy5jb25maWcpO1xuICB9XG59IiwiaW1wb3J0IHtWUlRvZ2dsZUJ1dHRvbn0gZnJvbSAnLi9jb21wb25lbnRzL3ZydG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7U2V0dGluZ3NUb2dnbGVCdXR0b259IGZyb20gJy4vY29tcG9uZW50cy9zZXR0aW5nc3RvZ2dsZWJ1dHRvbic7XG5pbXBvcnQge1ZvbHVtZVNsaWRlcn0gZnJvbSAnLi9jb21wb25lbnRzL3ZvbHVtZXNsaWRlcic7XG5pbXBvcnQge1BsYXliYWNrVGltZUxhYmVsLCBQbGF5YmFja1RpbWVMYWJlbE1vZGV9IGZyb20gJy4vY29tcG9uZW50cy9wbGF5YmFja3RpbWVsYWJlbCc7XG5pbXBvcnQge0FpclBsYXlUb2dnbGVCdXR0b259IGZyb20gJy4vY29tcG9uZW50cy9haXJwbGF5dG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7RXJyb3JNZXNzYWdlT3ZlcmxheX0gZnJvbSAnLi9jb21wb25lbnRzL2Vycm9ybWVzc2FnZW92ZXJsYXknO1xuaW1wb3J0IHtDb250cm9sQmFyfSBmcm9tICcuL2NvbXBvbmVudHMvY29udHJvbGJhcic7XG5pbXBvcnQge0Nhc3RUb2dnbGVCdXR0b259IGZyb20gJy4vY29tcG9uZW50cy9jYXN0dG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7RnVsbHNjcmVlblRvZ2dsZUJ1dHRvbn0gZnJvbSAnLi9jb21wb25lbnRzL2Z1bGxzY3JlZW50b2dnbGVidXR0b24nO1xuaW1wb3J0IHtSZWNvbW1lbmRhdGlvbk92ZXJsYXl9IGZyb20gJy4vY29tcG9uZW50cy9yZWNvbW1lbmRhdGlvbm92ZXJsYXknO1xuaW1wb3J0IHtQbGF5YmFja1NwZWVkU2VsZWN0Qm94fSBmcm9tICcuL2NvbXBvbmVudHMvcGxheWJhY2tzcGVlZHNlbGVjdGJveCc7XG5pbXBvcnQge0F1ZGlvUXVhbGl0eVNlbGVjdEJveH0gZnJvbSAnLi9jb21wb25lbnRzL2F1ZGlvcXVhbGl0eXNlbGVjdGJveCc7XG5pbXBvcnQge0Nhc3RTdGF0dXNPdmVybGF5fSBmcm9tICcuL2NvbXBvbmVudHMvY2FzdHN0YXR1c292ZXJsYXknO1xuaW1wb3J0IHtVSUNvbnRhaW5lcn0gZnJvbSAnLi9jb21wb25lbnRzL3VpY29udGFpbmVyJztcbmltcG9ydCB7V2F0ZXJtYXJrfSBmcm9tICcuL2NvbXBvbmVudHMvd2F0ZXJtYXJrJztcbmltcG9ydCB7U3VidGl0bGVPdmVybGF5fSBmcm9tICcuL2NvbXBvbmVudHMvc3VidGl0bGVvdmVybGF5JztcbmltcG9ydCB7U2V0dGluZ3NQYW5lbH0gZnJvbSAnLi9jb21wb25lbnRzL3NldHRpbmdzcGFuZWwnO1xuaW1wb3J0IHtTZWVrQmFyTGFiZWx9IGZyb20gJy4vY29tcG9uZW50cy9zZWVrYmFybGFiZWwnO1xuaW1wb3J0IHtQbGF5YmFja1RvZ2dsZU92ZXJsYXl9IGZyb20gJy4vY29tcG9uZW50cy9wbGF5YmFja3RvZ2dsZW92ZXJsYXknO1xuaW1wb3J0IHtQaWN0dXJlSW5QaWN0dXJlVG9nZ2xlQnV0dG9ufSBmcm9tICcuL2NvbXBvbmVudHMvcGljdHVyZWlucGljdHVyZXRvZ2dsZWJ1dHRvbic7XG5pbXBvcnQge1NwYWNlcn0gZnJvbSAnLi9jb21wb25lbnRzL3NwYWNlcic7XG5pbXBvcnQge0NvbnRhaW5lcn0gZnJvbSAnLi9jb21wb25lbnRzL2NvbnRhaW5lcic7XG5pbXBvcnQge1ZvbHVtZVRvZ2dsZUJ1dHRvbn0gZnJvbSAnLi9jb21wb25lbnRzL3ZvbHVtZXRvZ2dsZWJ1dHRvbic7XG5pbXBvcnQge1BsYXliYWNrVG9nZ2xlQnV0dG9ufSBmcm9tICcuL2NvbXBvbmVudHMvcGxheWJhY2t0b2dnbGVidXR0b24nO1xuaW1wb3J0IHtTZWVrQmFyfSBmcm9tICcuL2NvbXBvbmVudHMvc2Vla2Jhcic7XG5pbXBvcnQge1ZpZGVvUXVhbGl0eVNlbGVjdEJveH0gZnJvbSAnLi9jb21wb25lbnRzL3ZpZGVvcXVhbGl0eXNlbGVjdGJveCc7XG5pbXBvcnQge1VJQ29uZGl0aW9uQ29udGV4dCwgVUlNYW5hZ2VyfSBmcm9tICcuL3VpbWFuYWdlcic7XG5pbXBvcnQge1RpdGxlQmFyfSBmcm9tICcuL2NvbXBvbmVudHMvdGl0bGViYXInO1xuaW1wb3J0IHtCdWZmZXJpbmdPdmVybGF5fSBmcm9tICcuL2NvbXBvbmVudHMvYnVmZmVyaW5nb3ZlcmxheSc7XG5pbXBvcnQge1N1YnRpdGxlTGlzdEJveH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlbGlzdGJveCc7XG5pbXBvcnQge0F1ZGlvVHJhY2tMaXN0Qm94fSBmcm9tICcuL2NvbXBvbmVudHMvYXVkaW90cmFja2xpc3Rib3gnO1xuaW1wb3J0IHtTZXR0aW5nc1BhbmVsSXRlbX0gZnJvbSAnLi9jb21wb25lbnRzL3NldHRpbmdzcGFuZWxpdGVtJztcbmltcG9ydCB7U2V0dGluZ3NQYW5lbFBhZ2V9IGZyb20gJy4vY29tcG9uZW50cy9zZXR0aW5nc3BhbmVscGFnZSc7XG5pbXBvcnQgeyBVSUZhY3RvcnkgfSBmcm9tICcuL3VpZmFjdG9yeSc7XG5pbXBvcnQgeyBVSUNvbmZpZyB9IGZyb20gJy4vdWljb25maWcnO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcblxuZXhwb3J0IG5hbWVzcGFjZSBEZW1vRmFjdG9yeSB7XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkRGVtb1dpdGhTZXBhcmF0ZUF1ZGlvU3VidGl0bGVzQnV0dG9ucyhwbGF5ZXI6IFBsYXllckFQSSwgY29uZmlnOiBVSUNvbmZpZyA9IHt9KTogVUlNYW5hZ2VyIHtcbiAgICAvLyBzaG93IHNtYWxsU2NyZWVuIFVJIG9ubHkgb24gbW9iaWxlL2hhbmRoZWxkIGRldmljZXNcbiAgICBsZXQgc21hbGxTY3JlZW5Td2l0Y2hXaWR0aCA9IDYwMDtcblxuICAgIHJldHVybiBuZXcgVUlNYW5hZ2VyKHBsYXllciwgW3tcbiAgICAgIHVpOiBVSUZhY3RvcnkubW9kZXJuU21hbGxTY3JlZW5BZHNVSSgpLFxuICAgICAgY29uZGl0aW9uOiAoY29udGV4dDogVUlDb25kaXRpb25Db250ZXh0KSA9PiB7XG4gICAgICAgIHJldHVybiBjb250ZXh0LmlzTW9iaWxlICYmIGNvbnRleHQuZG9jdW1lbnRXaWR0aCA8IHNtYWxsU2NyZWVuU3dpdGNoV2lkdGhcbiAgICAgICAgICAmJiBjb250ZXh0LmlzQWQgJiYgY29udGV4dC5hZFJlcXVpcmVzVWk7XG4gICAgICB9LFxuICAgIH0sIHtcbiAgICAgIHVpOiBVSUZhY3RvcnkubW9kZXJuQWRzVUkoKSxcbiAgICAgIGNvbmRpdGlvbjogKGNvbnRleHQ6IFVJQ29uZGl0aW9uQ29udGV4dCkgPT4ge1xuICAgICAgICByZXR1cm4gY29udGV4dC5pc0FkICYmIGNvbnRleHQuYWRSZXF1aXJlc1VpO1xuICAgICAgfSxcbiAgICB9LCB7XG4gICAgICB1aTogVUlGYWN0b3J5Lm1vZGVyblNtYWxsU2NyZWVuVUkoKSxcbiAgICAgIGNvbmRpdGlvbjogKGNvbnRleHQ6IFVJQ29uZGl0aW9uQ29udGV4dCkgPT4ge1xuICAgICAgICByZXR1cm4gY29udGV4dC5pc01vYmlsZSAmJiBjb250ZXh0LmRvY3VtZW50V2lkdGggPCBzbWFsbFNjcmVlblN3aXRjaFdpZHRoO1xuICAgICAgfSxcbiAgICB9LCB7XG4gICAgICB1aTogbW9kZXJuVUlXaXRoU2VwYXJhdGVBdWRpb1N1YnRpdGxlc0J1dHRvbnMoKSxcbiAgICB9XSwgY29uZmlnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vZGVyblVJV2l0aFNlcGFyYXRlQXVkaW9TdWJ0aXRsZXNCdXR0b25zKCkge1xuICAgIGxldCBzdWJ0aXRsZU92ZXJsYXkgPSBuZXcgU3VidGl0bGVPdmVybGF5KCk7XG5cbiAgICBsZXQgc2V0dGluZ3NQYW5lbCA9IG5ldyBTZXR0aW5nc1BhbmVsKHtcbiAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxQYWdlKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oJ1ZpZGVvIFF1YWxpdHknLCBuZXcgVmlkZW9RdWFsaXR5U2VsZWN0Qm94KCkpLFxuICAgICAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKCdTcGVlZCcsIG5ldyBQbGF5YmFja1NwZWVkU2VsZWN0Qm94KCkpLFxuICAgICAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKCdBdWRpbyBRdWFsaXR5JywgbmV3IEF1ZGlvUXVhbGl0eVNlbGVjdEJveCgpKSxcbiAgICAgICAgICBdLFxuICAgICAgICB9KSxcbiAgICAgIF0sXG4gICAgICBoaWRkZW46IHRydWUsXG4gICAgfSk7XG5cbiAgICBsZXQgc3VidGl0bGVMaXN0Qm94ID0gbmV3IFN1YnRpdGxlTGlzdEJveCgpO1xuICAgIGxldCBzdWJ0aXRsZVNldHRpbmdzUGFuZWwgPSBuZXcgU2V0dGluZ3NQYW5lbCh7XG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsUGFnZSh7XG4gICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKG51bGwsIHN1YnRpdGxlTGlzdEJveCksXG4gICAgICAgICAgXSxcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgICAgaGlkZGVuOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgbGV0IGF1ZGlvVHJhY2tMaXN0Qm94ID0gbmV3IEF1ZGlvVHJhY2tMaXN0Qm94KCk7XG4gICAgbGV0IGF1ZGlvVHJhY2tTZXR0aW5nc1BhbmVsID0gbmV3IFNldHRpbmdzUGFuZWwoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbFBhZ2Uoe1xuICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbShudWxsLCBhdWRpb1RyYWNrTGlzdEJveCksXG4gICAgICAgICAgXSxcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgICAgaGlkZGVuOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgbGV0IGNvbnRyb2xCYXIgPSBuZXcgQ29udHJvbEJhcih7XG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIGF1ZGlvVHJhY2tTZXR0aW5nc1BhbmVsLFxuICAgICAgICBzdWJ0aXRsZVNldHRpbmdzUGFuZWwsXG4gICAgICAgIHNldHRpbmdzUGFuZWwsXG4gICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgIG5ldyBQbGF5YmFja1RpbWVMYWJlbCh7IHRpbWVMYWJlbE1vZGU6IFBsYXliYWNrVGltZUxhYmVsTW9kZS5DdXJyZW50VGltZSwgaGlkZUluTGl2ZVBsYXliYWNrOiB0cnVlIH0pLFxuICAgICAgICAgICAgbmV3IFNlZWtCYXIoeyBsYWJlbDogbmV3IFNlZWtCYXJMYWJlbCgpIH0pLFxuICAgICAgICAgICAgbmV3IFBsYXliYWNrVGltZUxhYmVsKHsgdGltZUxhYmVsTW9kZTogUGxheWJhY2tUaW1lTGFiZWxNb2RlLlRvdGFsVGltZSwgY3NzQ2xhc3NlczogWyd0ZXh0LXJpZ2h0J10gfSksXG4gICAgICAgICAgXSxcbiAgICAgICAgICBjc3NDbGFzc2VzOiBbJ2NvbnRyb2xiYXItdG9wJ10sXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICBuZXcgUGxheWJhY2tUb2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgIG5ldyBWb2x1bWVUb2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgIG5ldyBWb2x1bWVTbGlkZXIoKSxcbiAgICAgICAgICAgIG5ldyBTcGFjZXIoKSxcbiAgICAgICAgICAgIG5ldyBQaWN0dXJlSW5QaWN0dXJlVG9nZ2xlQnV0dG9uKCksXG4gICAgICAgICAgICBuZXcgQWlyUGxheVRvZ2dsZUJ1dHRvbigpLFxuICAgICAgICAgICAgbmV3IENhc3RUb2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgIG5ldyBWUlRvZ2dsZUJ1dHRvbigpLFxuICAgICAgICAgICAgbmV3IFNldHRpbmdzVG9nZ2xlQnV0dG9uKHtcbiAgICAgICAgICAgICAgc2V0dGluZ3NQYW5lbDogYXVkaW9UcmFja1NldHRpbmdzUGFuZWwsXG4gICAgICAgICAgICAgIGNzc0NsYXNzOiAndWktYXVkaW90cmFja3NldHRpbmdzdG9nZ2xlYnV0dG9uJyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IFNldHRpbmdzVG9nZ2xlQnV0dG9uKHtcbiAgICAgICAgICAgICAgc2V0dGluZ3NQYW5lbDogc3VidGl0bGVTZXR0aW5nc1BhbmVsLFxuICAgICAgICAgICAgICBjc3NDbGFzczogJ3VpLXN1YnRpdGxlc2V0dGluZ3N0b2dnbGVidXR0b24nLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgU2V0dGluZ3NUb2dnbGVCdXR0b24oeyBzZXR0aW5nc1BhbmVsOiBzZXR0aW5nc1BhbmVsIH0pLFxuICAgICAgICAgICAgbmV3IEZ1bGxzY3JlZW5Ub2dnbGVCdXR0b24oKSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIGNzc0NsYXNzZXM6IFsnY29udHJvbGJhci1ib3R0b20nXSxcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5ldyBVSUNvbnRhaW5lcih7XG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIHN1YnRpdGxlT3ZlcmxheSxcbiAgICAgICAgbmV3IEJ1ZmZlcmluZ092ZXJsYXkoKSxcbiAgICAgICAgbmV3IFBsYXliYWNrVG9nZ2xlT3ZlcmxheSgpLFxuICAgICAgICBuZXcgQ2FzdFN0YXR1c092ZXJsYXkoKSxcbiAgICAgICAgY29udHJvbEJhcixcbiAgICAgICAgbmV3IFRpdGxlQmFyKCksXG4gICAgICAgIG5ldyBSZWNvbW1lbmRhdGlvbk92ZXJsYXkoKSxcbiAgICAgICAgbmV3IFdhdGVybWFyaygpLFxuICAgICAgICBuZXcgRXJyb3JNZXNzYWdlT3ZlcmxheSgpLFxuICAgICAgXSxcbiAgICB9KTtcbiAgfVxufSIsImV4cG9ydCBpbnRlcmZhY2UgT2Zmc2V0IHtcbiAgbGVmdDogbnVtYmVyO1xuICB0b3A6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTaXplIHtcbiAgd2lkdGg6IG51bWJlcjtcbiAgaGVpZ2h0OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3NzUHJvcGVydGllcyB7XG4gIFtwcm9wZXJ0eU5hbWU6IHN0cmluZ106IHN0cmluZztcbn1cblxuLyoqXG4gKiBTaW1wbGUgRE9NIG1hbmlwdWxhdGlvbiBhbmQgRE9NIGVsZW1lbnQgZXZlbnQgaGFuZGxpbmcgbW9kZWxlZCBhZnRlciBqUXVlcnkgKGFzIHJlcGxhY2VtZW50IGZvciBqUXVlcnkpLlxuICpcbiAqIExpa2UgalF1ZXJ5LCBET00gb3BlcmF0ZXMgb24gc2luZ2xlIGVsZW1lbnRzIGFuZCBsaXN0cyBvZiBlbGVtZW50cy4gRm9yIGV4YW1wbGU6IGNyZWF0aW5nIGFuIGVsZW1lbnQgcmV0dXJucyBhIERPTVxuICogaW5zdGFuY2Ugd2l0aCBhIHNpbmdsZSBlbGVtZW50LCBzZWxlY3RpbmcgZWxlbWVudHMgcmV0dXJucyBhIERPTSBpbnN0YW5jZSB3aXRoIHplcm8sIG9uZSwgb3IgbWFueSBlbGVtZW50cy4gU2ltaWxhclxuICogdG8galF1ZXJ5LCBzZXR0ZXJzIHVzdWFsbHkgYWZmZWN0IGFsbCBlbGVtZW50cywgd2hpbGUgZ2V0dGVycyBvcGVyYXRlIG9uIG9ubHkgdGhlIGZpcnN0IGVsZW1lbnQuXG4gKiBBbHNvIHNpbWlsYXIgdG8galF1ZXJ5LCBtb3N0IG1ldGhvZHMgKGV4Y2VwdCBnZXR0ZXJzKSByZXR1cm4gdGhlIERPTSBpbnN0YW5jZSBmYWNpbGl0YXRpbmcgZWFzeSBjaGFpbmluZyBvZiBtZXRob2RcbiAqIGNhbGxzLlxuICpcbiAqIEJ1aWx0IHdpdGggdGhlIGhlbHAgb2Y6IGh0dHA6Ly95b3VtaWdodG5vdG5lZWRqcXVlcnkuY29tL1xuICovXG5leHBvcnQgY2xhc3MgRE9NIHtcblxuICBwcml2YXRlIGRvY3VtZW50OiBEb2N1bWVudDtcblxuICAvKipcbiAgICogVGhlIGxpc3Qgb2YgZWxlbWVudHMgdGhhdCB0aGUgaW5zdGFuY2Ugd3JhcHMuIFRha2UgY2FyZSB0aGF0IG5vdCBhbGwgbWV0aG9kcyBjYW4gb3BlcmF0ZSBvbiB0aGUgd2hvbGUgbGlzdCxcbiAgICogZ2V0dGVycyB1c3VhbGx5IGp1c3Qgd29yayBvbiB0aGUgZmlyc3QgZWxlbWVudC5cbiAgICovXG4gIHByaXZhdGUgZWxlbWVudHM6IEhUTUxFbGVtZW50W107XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBET00gZWxlbWVudC5cbiAgICogQHBhcmFtIHRhZ05hbWUgdGhlIHRhZyBuYW1lIG9mIHRoZSBET00gZWxlbWVudFxuICAgKiBAcGFyYW0gYXR0cmlidXRlcyBhIGxpc3Qgb2YgYXR0cmlidXRlcyBvZiB0aGUgZWxlbWVudFxuICAgKi9cbiAgY29uc3RydWN0b3IodGFnTmFtZTogc3RyaW5nLCBhdHRyaWJ1dGVzOiB7W25hbWU6IHN0cmluZ106IHN0cmluZ30pO1xuICAvKipcbiAgICogU2VsZWN0cyBhbGwgZWxlbWVudHMgZnJvbSB0aGUgRE9NIHRoYXQgbWF0Y2ggdGhlIHNwZWNpZmllZCBzZWxlY3Rvci5cbiAgICogQHBhcmFtIHNlbGVjdG9yIHRoZSBzZWxlY3RvciB0byBtYXRjaCBET00gZWxlbWVudHMgd2l0aFxuICAgKi9cbiAgY29uc3RydWN0b3Ioc2VsZWN0b3I6IHN0cmluZyk7XG4gIC8qKlxuICAgKiBXcmFwcyBhIHBsYWluIEhUTUxFbGVtZW50IHdpdGggYSBET00gaW5zdGFuY2UuXG4gICAqIEBwYXJhbSBlbGVtZW50IHRoZSBIVE1MRWxlbWVudCB0byB3cmFwIHdpdGggRE9NXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50OiBIVE1MRWxlbWVudCk7XG4gIC8qKlxuICAgKiBXcmFwcyBhIGxpc3Qgb2YgcGxhaW4gSFRNTEVsZW1lbnRzIHdpdGggYSBET00gaW5zdGFuY2UuXG4gICAqIEBwYXJhbSBlbGVtZW50cyB0aGUgSFRNTEVsZW1lbnRzIHRvIHdyYXAgd2l0aCBET01cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRzOiBIVE1MRWxlbWVudFtdKTtcbiAgLyoqXG4gICAqIFdyYXBzIHRoZSBkb2N1bWVudCB3aXRoIGEgRE9NIGluc3RhbmNlLiBVc2VmdWwgdG8gYXR0YWNoIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgZG9jdW1lbnQuXG4gICAqIEBwYXJhbSBkb2N1bWVudCB0aGUgZG9jdW1lbnQgdG8gd3JhcFxuICAgKi9cbiAgY29uc3RydWN0b3IoZG9jdW1lbnQ6IERvY3VtZW50KTtcbiAgY29uc3RydWN0b3Ioc29tZXRoaW5nOiBzdHJpbmcgfCBIVE1MRWxlbWVudCB8IEhUTUxFbGVtZW50W10gfCBEb2N1bWVudCwgYXR0cmlidXRlcz86IHtbbmFtZTogc3RyaW5nXTogc3RyaW5nfSkge1xuICAgIHRoaXMuZG9jdW1lbnQgPSBkb2N1bWVudDsgLy8gU2V0IHRoZSBnbG9iYWwgZG9jdW1lbnQgdG8gdGhlIGxvY2FsIGRvY3VtZW50IGZpZWxkXG5cbiAgICBpZiAoc29tZXRoaW5nIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIGlmIChzb21ldGhpbmcubGVuZ3RoID4gMCAmJiBzb21ldGhpbmdbMF0gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICBsZXQgZWxlbWVudHMgPSBzb21ldGhpbmc7XG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoc29tZXRoaW5nIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgIGxldCBlbGVtZW50ID0gc29tZXRoaW5nO1xuICAgICAgdGhpcy5lbGVtZW50cyA9IFtlbGVtZW50XTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc29tZXRoaW5nIGluc3RhbmNlb2YgRG9jdW1lbnQpIHtcbiAgICAgIC8vIFdoZW4gYSBkb2N1bWVudCBpcyBwYXNzZWQgaW4sIHdlIGRvIG5vdCBkbyBhbnl0aGluZyB3aXRoIGl0LCBidXQgYnkgc2V0dGluZyB0aGlzLmVsZW1lbnRzIHRvIG51bGxcbiAgICAgIC8vIHdlIGdpdmUgdGhlIGV2ZW50IGhhbmRsaW5nIG1ldGhvZCBhIG1lYW5zIHRvIGRldGVjdCBpZiB0aGUgZXZlbnRzIHNob3VsZCBiZSByZWdpc3RlcmVkIG9uIHRoZSBkb2N1bWVudFxuICAgICAgLy8gaW5zdGVhZCBvZiBlbGVtZW50cy5cbiAgICAgIHRoaXMuZWxlbWVudHMgPSBudWxsO1xuICAgIH1cbiAgICBlbHNlIGlmIChhdHRyaWJ1dGVzKSB7XG4gICAgICBsZXQgdGFnTmFtZSA9IHNvbWV0aGluZztcbiAgICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcblxuICAgICAgZm9yIChsZXQgYXR0cmlidXRlTmFtZSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGxldCBhdHRyaWJ1dGVWYWx1ZSA9IGF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV07XG4gICAgICAgIGlmIChhdHRyaWJ1dGVWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZWxlbWVudHMgPSBbZWxlbWVudF07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgbGV0IHNlbGVjdG9yID0gc29tZXRoaW5nO1xuICAgICAgdGhpcy5lbGVtZW50cyA9IHRoaXMuZmluZENoaWxkRWxlbWVudHMoc2VsZWN0b3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgdGhhdCB0aGlzIERPTSBpbnN0YW5jZSBjdXJyZW50bHkgaG9sZHMuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IHRoZSBudW1iZXIgb2YgZWxlbWVudHNcbiAgICovXG4gIGdldCBsZW5ndGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50cyA/IHRoaXMuZWxlbWVudHMubGVuZ3RoIDogMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBIVE1MIGVsZW1lbnRzIHRoYXQgdGhpcyBET00gaW5zdGFuY2UgY3VycmVudGx5IGhvbGRzLlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnRbXX0gdGhlIHJhdyBIVE1MIGVsZW1lbnRzXG4gICAqL1xuICBnZXQoKTogSFRNTEVsZW1lbnRbXTtcbiAgLyoqXG4gICAqIEdldHMgYW4gSFRNTCBlbGVtZW50IGZyb20gdGhlIGxpc3QgZWxlbWVudHMgdGhhdCB0aGlzIERPTSBpbnN0YW5jZSBjdXJyZW50bHkgaG9sZHMuXG4gICAqIEBwYXJhbSBpbmRleCBUaGUgemVyby1iYXNlZCBpbmRleCBpbnRvIHRoZSBlbGVtZW50IGxpc3QuIENhbiBiZSBuZWdhdGl2ZSB0byByZXR1cm4gYW4gZWxlbWVudCBmcm9tIHRoZSBlbmQsXG4gICAqICAgIGUuZy4gLTEgcmV0dXJucyB0aGUgbGFzdCBlbGVtZW50LlxuICAgKi9cbiAgZ2V0KGluZGV4OiBudW1iZXIpOiBIVE1MRWxlbWVudDtcbiAgZ2V0KGluZGV4PzogbnVtYmVyKTogSFRNTEVsZW1lbnQgfCBIVE1MRWxlbWVudFtdIHtcbiAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHM7XG4gICAgfSBlbHNlIGlmICghdGhpcy5lbGVtZW50cyB8fCBpbmRleCA+PSB0aGlzLmVsZW1lbnRzLmxlbmd0aCB8fCBpbmRleCA8IC10aGlzLmVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9IGVsc2UgaWYgKGluZGV4IDwgMCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHNbdGhpcy5lbGVtZW50cy5sZW5ndGggLSBpbmRleF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRzW2luZGV4XTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQSBzaG9ydGN1dCBtZXRob2QgZm9yIGl0ZXJhdGluZyBhbGwgZWxlbWVudHMuIFNob3J0cyB0aGlzLmVsZW1lbnRzLmZvckVhY2goLi4uKSB0byB0aGlzLmZvckVhY2goLi4uKS5cbiAgICogQHBhcmFtIGhhbmRsZXIgdGhlIGhhbmRsZXIgdG8gZXhlY3V0ZSBhbiBvcGVyYXRpb24gb24gYW4gZWxlbWVudFxuICAgKi9cbiAgcHJpdmF0ZSBmb3JFYWNoKGhhbmRsZXI6IChlbGVtZW50OiBIVE1MRWxlbWVudCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5lbGVtZW50cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgIGhhbmRsZXIoZWxlbWVudCk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGZpbmRDaGlsZEVsZW1lbnRzT2ZFbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgRG9jdW1lbnQsIHNlbGVjdG9yOiBzdHJpbmcpOiBIVE1MRWxlbWVudFtdIHtcbiAgICBsZXQgY2hpbGRFbGVtZW50cyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG5cbiAgICAvLyBDb252ZXJ0IE5vZGVMaXN0IHRvIEFycmF5XG4gICAgLy8gaHR0cHM6Ly90b2RkbW90dG8uY29tL2EtY29tcHJlaGVuc2l2ZS1kaXZlLWludG8tbm9kZWxpc3RzLWFycmF5cy1jb252ZXJ0aW5nLW5vZGVsaXN0cy1hbmQtdW5kZXJzdGFuZGluZy10aGUtZG9tL1xuICAgIHJldHVybiBbXS5zbGljZS5jYWxsKGNoaWxkRWxlbWVudHMpO1xuICB9XG5cbiAgcHJpdmF0ZSBmaW5kQ2hpbGRFbGVtZW50cyhzZWxlY3Rvcjogc3RyaW5nKTogSFRNTEVsZW1lbnRbXSB7XG4gICAgbGV0IGFsbENoaWxkRWxlbWVudHMgPSA8SFRNTEVsZW1lbnRbXT5bXTtcblxuICAgIGlmICh0aGlzLmVsZW1lbnRzKSB7XG4gICAgICB0aGlzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgYWxsQ2hpbGRFbGVtZW50cyA9IGFsbENoaWxkRWxlbWVudHMuY29uY2F0KHRoaXMuZmluZENoaWxkRWxlbWVudHNPZkVsZW1lbnQoZWxlbWVudCwgc2VsZWN0b3IpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbmRDaGlsZEVsZW1lbnRzT2ZFbGVtZW50KGRvY3VtZW50LCBzZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFsbENoaWxkRWxlbWVudHM7XG4gIH1cblxuICAvKipcbiAgICogRmluZHMgYWxsIGNoaWxkIGVsZW1lbnRzIG9mIGFsbCBlbGVtZW50cyBtYXRjaGluZyB0aGUgc3VwcGxpZWQgc2VsZWN0b3IuXG4gICAqIEBwYXJhbSBzZWxlY3RvciB0aGUgc2VsZWN0b3IgdG8gbWF0Y2ggd2l0aCBjaGlsZCBlbGVtZW50c1xuICAgKiBAcmV0dXJucyB7RE9NfSBhIG5ldyBET00gaW5zdGFuY2UgcmVwcmVzZW50aW5nIGFsbCBtYXRjaGVkIGNoaWxkcmVuXG4gICAqL1xuICBmaW5kKHNlbGVjdG9yOiBzdHJpbmcpOiBET00ge1xuICAgIGxldCBhbGxDaGlsZEVsZW1lbnRzID0gdGhpcy5maW5kQ2hpbGRFbGVtZW50cyhzZWxlY3Rvcik7XG4gICAgcmV0dXJuIG5ldyBET00oYWxsQ2hpbGRFbGVtZW50cyk7XG4gIH1cblxuICAvKipcbiAgICogRm9jdXNlcyB0byB0aGUgZmlyc3QgaW5wdXQgZWxlbWVudFxuICAgKi9cbiAgZm9jdXNUb0ZpcnN0SW5wdXQoKSB7XG4gICAgY29uc3QgaW5wdXRFbGVtZW50cyA9IHRoaXMuZmluZENoaWxkRWxlbWVudHMoJ2J1dHRvbiwgW2hyZWZdLCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgW3RhYmluZGV4XTpub3QoW3RhYmluZGV4PVwiLTFcIl0pJyk7XG5cbiAgICBpZiAoaW5wdXRFbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICBpbnB1dEVsZW1lbnRzWzBdLmZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZvY3VzZXMgdG8gdGhlIGZpcnN0IGlucHV0IGVsZW1lbnRcbiAgICovXG4gIHNjcm9sbFRvKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgdGhpcy5lbGVtZW50c1swXS5zY3JvbGxUbyh4LCB5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIG9mIHRoZSBpbm5lciBIVE1MIGNvbnRlbnQgb2YgdGhlIGZpcnN0IGVsZW1lbnQuXG4gICAqL1xuICBodG1sKCk6IHN0cmluZztcbiAgLyoqXG4gICAqIFNldHMgdGhlIGlubmVyIEhUTUwgY29udGVudCBvZiBhbGwgZWxlbWVudHMuXG4gICAqIEBwYXJhbSBjb250ZW50IGEgc3RyaW5nIG9mIHBsYWluIHRleHQgb3IgSFRNTCBtYXJrdXBcbiAgICovXG4gIGh0bWwoY29udGVudDogc3RyaW5nKTogRE9NO1xuICBodG1sKGNvbnRlbnQ/OiBzdHJpbmcpOiBzdHJpbmcgfCBET00ge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0SHRtbChjb250ZW50KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRIdG1sKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRIdG1sKCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzWzBdLmlubmVySFRNTDtcbiAgfVxuXG4gIHByaXZhdGUgc2V0SHRtbChjb250ZW50OiBzdHJpbmcpOiBET00ge1xuICAgIGlmIChjb250ZW50ID09PSB1bmRlZmluZWQgfHwgY29udGVudCA9PSBudWxsKSB7XG4gICAgICAvLyBTZXQgdG8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIGlubmVySFRNTCBnZXR0aW5nIHNldCB0byAndW5kZWZpbmVkJyAoYWxsIGJyb3dzZXJzKSBvciAnbnVsbCcgKElFOSlcbiAgICAgIGNvbnRlbnQgPSAnJztcbiAgICB9XG5cbiAgICB0aGlzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gY29udGVudDtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyB0aGUgaW5uZXIgSFRNTCBvZiBhbGwgZWxlbWVudHMgKGRlbGV0ZXMgYWxsIGNoaWxkcmVuKS5cbiAgICogQHJldHVybnMge0RPTX1cbiAgICovXG4gIGVtcHR5KCk6IERPTSB7XG4gICAgdGhpcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICBlbGVtZW50LmlubmVySFRNTCA9ICcnO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIGZpcnN0IGZvcm0gZWxlbWVudCwgZS5nLiB0aGUgc2VsZWN0ZWQgdmFsdWUgb2YgYSBzZWxlY3QgYm94IG9yIHRoZSB0ZXh0IGlmIGFuXG4gICAqIGlucHV0IGZpZWxkLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgdmFsdWUgb2YgYSBmb3JtIGVsZW1lbnRcbiAgICovXG4gIHZhbCgpOiBzdHJpbmcge1xuICAgIGxldCBlbGVtZW50ID0gdGhpcy5lbGVtZW50c1swXTtcblxuICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgSFRNTFNlbGVjdEVsZW1lbnQgfHwgZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50LnZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIFRPRE8gYWRkIHN1cHBvcnQgZm9yIG1pc3NpbmcgZm9ybSBlbGVtZW50c1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGB2YWwoKSBub3Qgc3VwcG9ydGVkIGZvciAke3R5cGVvZiBlbGVtZW50fWApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiBhbiBhdHRyaWJ1dGUgb24gdGhlIGZpcnN0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSBhdHRyaWJ1dGVcbiAgICovXG4gIGF0dHIoYXR0cmlidXRlOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsO1xuICAvKipcbiAgICogU2V0cyBhbiBhdHRyaWJ1dGUgb24gYWxsIGVsZW1lbnRzLlxuICAgKiBAcGFyYW0gYXR0cmlidXRlIHRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGVcbiAgICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlXG4gICAqL1xuICBhdHRyKGF0dHJpYnV0ZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogRE9NO1xuICBhdHRyKGF0dHJpYnV0ZTogc3RyaW5nLCB2YWx1ZT86IHN0cmluZyk6IHN0cmluZyB8IG51bGwgfCBET00ge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0QXR0cihhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRBdHRyKGF0dHJpYnV0ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIGF0dHJpYnV0ZSBvZiB0aGUgZWxlbWVudC5cbiAgICogQHBhcmFtIGF0dHJpYnV0ZVxuICAgKi9cbiAgcmVtb3ZlQXR0cihhdHRyaWJ1dGU6IHN0cmluZykge1xuICAgIHRoaXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0QXR0cihhdHRyaWJ1dGU6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzWzBdLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRBdHRyKGF0dHJpYnV0ZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogRE9NIHtcbiAgICB0aGlzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIGEgZGF0YSBlbGVtZW50IG9uIHRoZSBmaXJzdCBlbGVtZW50LlxuICAgKiBAcGFyYW0gZGF0YUF0dHJpYnV0ZSB0aGUgbmFtZSBvZiB0aGUgZGF0YSBhdHRyaWJ1dGUgd2l0aG91dCB0aGUgJ2RhdGEtJyBwcmVmaXhcbiAgICovXG4gIGRhdGEoZGF0YUF0dHJpYnV0ZTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbDtcbiAgLyoqXG4gICAqIFNldHMgYSBkYXRhIGF0dHJpYnV0ZSBvbiBhbGwgZWxlbWVudHMuXG4gICAqIEBwYXJhbSBkYXRhQXR0cmlidXRlIHRoZSBuYW1lIG9mIHRoZSBkYXRhIGF0dHJpYnV0ZSB3aXRob3V0IHRoZSAnZGF0YS0nIHByZWZpeFxuICAgKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIG9mIHRoZSBkYXRhIGF0dHJpYnV0ZVxuICAgKi9cbiAgZGF0YShkYXRhQXR0cmlidXRlOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBET007XG4gIGRhdGEoZGF0YUF0dHJpYnV0ZTogc3RyaW5nLCB2YWx1ZT86IHN0cmluZyk6IHN0cmluZyB8IG51bGwgfCBET00ge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0RGF0YShkYXRhQXR0cmlidXRlLCB2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0RGF0YShkYXRhQXR0cmlidXRlKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldERhdGEoZGF0YUF0dHJpYnV0ZTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHNbMF0uZ2V0QXR0cmlidXRlKCdkYXRhLScgKyBkYXRhQXR0cmlidXRlKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0RGF0YShkYXRhQXR0cmlidXRlOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBET00ge1xuICAgIHRoaXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtJyArIGRhdGFBdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBlbmRzIG9uZSBvciBtb3JlIERPTSBlbGVtZW50cyBhcyBjaGlsZHJlbiB0byBhbGwgZWxlbWVudHMuXG4gICAqIEBwYXJhbSBjaGlsZEVsZW1lbnRzIHRoZSBjaHJpbGQgZWxlbWVudHMgdG8gYXBwZW5kXG4gICAqIEByZXR1cm5zIHtET019XG4gICAqL1xuICBhcHBlbmQoLi4uY2hpbGRFbGVtZW50czogRE9NW10pOiBET00ge1xuICAgIHRoaXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgY2hpbGRFbGVtZW50cy5mb3JFYWNoKChjaGlsZEVsZW1lbnQpID0+IHtcbiAgICAgICAgY2hpbGRFbGVtZW50LmVsZW1lbnRzLmZvckVhY2goKF8sIGluZGV4KSA9PiB7XG4gICAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZEVsZW1lbnQuZWxlbWVudHNbaW5kZXhdKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBlbGVtZW50cyBmcm9tIHRoZSBET00uXG4gICAqL1xuICByZW1vdmUoKTogdm9pZCB7XG4gICAgdGhpcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICBsZXQgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgb2Zmc2V0IG9mIHRoZSBmaXJzdCBlbGVtZW50IGZyb20gdGhlIGRvY3VtZW50J3MgdG9wIGxlZnQgY29ybmVyLlxuICAgKiBAcmV0dXJucyB7T2Zmc2V0fVxuICAgKi9cbiAgb2Zmc2V0KCk6IE9mZnNldCB7XG4gICAgbGV0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnRzWzBdO1xuICAgIGxldCBlbGVtZW50UmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgbGV0IGh0bWxSZWN0ID0gZG9jdW1lbnQuYm9keS5wYXJlbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgLy8gVmlydHVhbCB2aWV3cG9ydCBzY3JvbGwgaGFuZGxpbmcgKGUuZy4gcGluY2ggem9vbWVkIHZpZXdwb3J0cyBpbiBtb2JpbGUgYnJvd3NlcnMgb3IgZGVza3RvcCBDaHJvbWUvRWRnZSlcbiAgICAvLyAnbm9ybWFsJyB6b29tcyBhbmQgdmlydHVhbCB2aWV3cG9ydCB6b29tcyAoYWthIGxheW91dCB2aWV3cG9ydCkgcmVzdWx0IGluIGRpZmZlcmVudFxuICAgIC8vIGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgcmVzdWx0czpcbiAgICAvLyAgLSB3aXRoIG5vcm1hbCBzY3JvbGxzLCB0aGUgY2xpZW50UmVjdCBkZWNyZWFzZXMgd2l0aCBhbiBpbmNyZWFzZSBpbiBzY3JvbGwoVG9wfExlZnQpL3BhZ2UoWHxZKU9mZnNldFxuICAgIC8vICAtIHdpdGggcGluY2ggem9vbSBzY3JvbGxzLCB0aGUgY2xpZW50UmVjdCBzdGF5cyB0aGUgc2FtZSB3aGlsZSBzY3JvbGwvcGFnZU9mZnNldCBjaGFuZ2VzXG4gICAgLy8gVGhpcyBtZWFucywgdGhhdCB0aGUgY29tYmluYXRpb24gb2YgY2xpZW50UmVjdCArIHNjcm9sbC9wYWdlT2Zmc2V0IGRvZXMgbm90IHdvcmsgdG8gY2FsY3VsYXRlIHRoZSBvZmZzZXRcbiAgICAvLyBmcm9tIHRoZSBkb2N1bWVudCdzIHVwcGVyIGxlZnQgb3JpZ2luIHdoZW4gcGluY2ggem9vbSBpcyB1c2VkLlxuICAgIC8vIFRvIHdvcmsgYXJvdW5kIHRoaXMgaXNzdWUsIHdlIGRvIG5vdCB1c2Ugc2Nyb2xsL3BhZ2VPZmZzZXQgYnV0IGdldCB0aGUgY2xpZW50UmVjdCBvZiB0aGUgaHRtbCBlbGVtZW50IGFuZFxuICAgIC8vIHN1YnRyYWN0IGl0IGZyb20gdGhlIGVsZW1lbnQncyByZWN0LCB3aGljaCBhbHdheXMgcmVzdWx0cyBpbiB0aGUgb2Zmc2V0IGZyb20gdGhlIGRvY3VtZW50IG9yaWdpbi5cbiAgICAvLyBOT1RFOiB0aGUgY3VycmVudCB3YXkgb2Ygb2Zmc2V0IGNhbGN1bGF0aW9uIHdhcyBpbXBsZW1lbnRlZCBzcGVjaWZpY2FsbHkgdG8gdHJhY2sgZXZlbnQgcG9zaXRpb25zIG9uIHRoZVxuICAgIC8vIHNlZWsgYmFyLCBhbmQgaXQgbWlnaHQgYnJlYWsgY29tcGF0aWJpbGl0eSB3aXRoIGpRdWVyeSdzIG9mZnNldCgpIG1ldGhvZC4gSWYgdGhpcyBldmVyIHR1cm5zIG91dCB0byBiZSBhXG4gICAgLy8gcHJvYmxlbSwgdGhpcyBtZXRob2Qgc2hvdWxkIGJlIHJldmVydGVkIHRvIHRoZSBvbGQgdmVyc2lvbiBhbmQgdGhlIG9mZnNldCBjYWxjdWxhdGlvbiBtb3ZlZCB0byB0aGUgc2VlayBiYXIuXG5cbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBlbGVtZW50UmVjdC50b3AgLSBodG1sUmVjdC50b3AsXG4gICAgICBsZWZ0OiBlbGVtZW50UmVjdC5sZWZ0IC0gaHRtbFJlY3QubGVmdCxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHdpZHRoIG9mIHRoZSBmaXJzdCBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSB0aGUgd2lkdGggb2YgdGhlIGZpcnN0IGVsZW1lbnRcbiAgICovXG4gIHdpZHRoKCk6IG51bWJlciB7XG4gICAgLy8gVE9ETyBjaGVjayBpZiB0aGlzIGlzIHRoZSBzYW1lIGFzIGpRdWVyeSdzIHdpZHRoKCkgKHByb2JhYmx5IG5vdClcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50c1swXS5vZmZzZXRXaWR0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBoZWlnaHQgb2YgdGhlIGZpcnN0IGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IHRoZSBoZWlnaHQgb2YgdGhlIGZpcnN0IGVsZW1lbnRcbiAgICovXG4gIGhlaWdodCgpOiBudW1iZXIge1xuICAgIC8vIFRPRE8gY2hlY2sgaWYgdGhpcyBpcyB0aGUgc2FtZSBhcyBqUXVlcnkncyBoZWlnaHQoKSAocHJvYmFibHkgbm90KVxuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzWzBdLm9mZnNldEhlaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzaXplIG9mIHRoZSBmaXJzdCBlbGVtZW50LlxuICAgKiBAcmV0dXJuIHtTaXplfSB0aGUgc2l6ZSBvZiB0aGUgZmlyc3QgZWxlbWVudFxuICAgKi9cbiAgc2l6ZSgpOiBTaXplIHtcbiAgICByZXR1cm4geyB3aWR0aDogdGhpcy53aWR0aCgpLCBoZWlnaHQ6IHRoaXMuaGVpZ2h0KCkgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdHRhY2hlcyBhbiBldmVudCBoYW5kbGVyIHRvIG9uZSBvciBtb3JlIGV2ZW50cyBvbiBhbGwgZWxlbWVudHMuXG4gICAqIEBwYXJhbSBldmVudE5hbWUgdGhlIGV2ZW50IG5hbWUgKG9yIG11bHRpcGxlIG5hbWVzIHNlcGFyYXRlZCBieSBzcGFjZSkgdG8gbGlzdGVuIHRvXG4gICAqIEBwYXJhbSBldmVudEhhbmRsZXIgdGhlIGV2ZW50IGhhbmRsZXIgdG8gY2FsbCB3aGVuIHRoZSBldmVudCBmaXJlc1xuICAgKiBAcmV0dXJucyB7RE9NfVxuICAgKi9cbiAgb24oZXZlbnROYW1lOiBzdHJpbmcsIGV2ZW50SGFuZGxlcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdCk6IERPTSB7XG4gICAgbGV0IGV2ZW50cyA9IGV2ZW50TmFtZS5zcGxpdCgnICcpO1xuXG4gICAgZXZlbnRzLmZvckVhY2goKGV2ZW50KSA9PiB7XG4gICAgICBpZiAodGhpcy5lbGVtZW50cyA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZXZlbnRIYW5kbGVyKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGV2ZW50SGFuZGxlcik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbiBldmVudCBoYW5kbGVyIGZyb20gb25lIG9yIG1vcmUgZXZlbnRzIG9uIGFsbCBlbGVtZW50cy5cbiAgICogQHBhcmFtIGV2ZW50TmFtZSB0aGUgZXZlbnQgbmFtZSAob3IgbXVsdGlwbGUgbmFtZXMgc2VwYXJhdGVkIGJ5IHNwYWNlKSB0byByZW1vdmUgdGhlIGhhbmRsZXIgZnJvbVxuICAgKiBAcGFyYW0gZXZlbnRIYW5kbGVyIHRoZSBldmVudCBoYW5kbGVyIHRvIHJlbW92ZVxuICAgKiBAcmV0dXJucyB7RE9NfVxuICAgKi9cbiAgb2ZmKGV2ZW50TmFtZTogc3RyaW5nLCBldmVudEhhbmRsZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3QpOiBET00ge1xuICAgIGxldCBldmVudHMgPSBldmVudE5hbWUuc3BsaXQoJyAnKTtcblxuICAgIGV2ZW50cy5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgICAgaWYgKHRoaXMuZWxlbWVudHMgPT0gbnVsbCkge1xuICAgICAgICB0aGlzLmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGV2ZW50SGFuZGxlcik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBldmVudEhhbmRsZXIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgdGhlIHNwZWNpZmllZCBjbGFzcyhlcykgdG8gYWxsIGVsZW1lbnRzLlxuICAgKiBAcGFyYW0gY2xhc3NOYW1lIHRoZSBjbGFzcyhlcykgdG8gYWRkLCBtdWx0aXBsZSBjbGFzc2VzIHNlcGFyYXRlZCBieSBzcGFjZVxuICAgKiBAcmV0dXJucyB7RE9NfVxuICAgKi9cbiAgYWRkQ2xhc3MoY2xhc3NOYW1lOiBzdHJpbmcpOiBET00ge1xuICAgIHRoaXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XG4gICAgICAgIGNvbnN0IGNsYXNzTmFtZXMgPSBjbGFzc05hbWUuc3BsaXQoJyAnKVxuICAgICAgICAgIC5maWx0ZXIoY2xhc3NOYW1lID0+IGNsYXNzTmFtZS5sZW5ndGggPiAwKTtcblxuICAgICAgICBpZiAoY2xhc3NOYW1lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzTmFtZXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgKz0gJyAnICsgY2xhc3NOYW1lO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlZCB0aGUgc3BlY2lmaWVkIGNsYXNzKGVzKSBmcm9tIGFsbCBlbGVtZW50cy5cbiAgICogQHBhcmFtIGNsYXNzTmFtZSB0aGUgY2xhc3MoZXMpIHRvIHJlbW92ZSwgbXVsdGlwbGUgY2xhc3NlcyBzZXBhcmF0ZWQgYnkgc3BhY2VcbiAgICogQHJldHVybnMge0RPTX1cbiAgICovXG4gIHJlbW92ZUNsYXNzKGNsYXNzTmFtZTogc3RyaW5nKTogRE9NIHtcbiAgICB0aGlzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xuICAgICAgICBjb25zdCBjbGFzc05hbWVzID0gY2xhc3NOYW1lLnNwbGl0KCcgJylcbiAgICAgICAgICAuZmlsdGVyKGNsYXNzTmFtZSA9PiBjbGFzc05hbWUubGVuZ3RoID4gMCk7XG5cbiAgICAgICAgaWYgKGNsYXNzTmFtZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc05hbWVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUucmVwbGFjZShcbiAgICAgICAgICBuZXcgUmVnRXhwKCcoXnxcXFxcYiknICsgY2xhc3NOYW1lLnNwbGl0KCcgJykuam9pbignfCcpICsgJyhcXFxcYnwkKScsICdnaScpLCAnICcpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGFueSBvZiB0aGUgZWxlbWVudHMgaGFzIHRoZSBzcGVjaWZpZWQgY2xhc3MuXG4gICAqIEBwYXJhbSBjbGFzc05hbWUgdGhlIGNsYXNzIG5hbWUgdG8gY2hlY2tcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgb25lIG9mIHRoZSBlbGVtZW50cyBoYXMgdGhlIGNsYXNzIGF0dGFjaGVkLCBlbHNlIGlmIG5vIGVsZW1lbnQgaGFzIGl0IGF0dGFjaGVkXG4gICAqL1xuICBoYXNDbGFzcyhjbGFzc05hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGxldCBoYXNDbGFzcyA9IGZhbHNlO1xuXG4gICAgdGhpcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHtcbiAgICAgICAgICAvLyBTaW5jZSB3ZSBhcmUgaW5zaWRlIGEgaGFuZGxlciwgd2UgY2FuJ3QganVzdCAncmV0dXJuIHRydWUnLiBJbnN0ZWFkLCB3ZSBzYXZlIGl0IHRvIGEgdmFyaWFibGVcbiAgICAgICAgICAvLyBhbmQgcmV0dXJuIGl0IGF0IHRoZSBlbmQgb2YgdGhlIGZ1bmN0aW9uIGJvZHkuXG4gICAgICAgICAgaGFzQ2xhc3MgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKG5ldyBSZWdFeHAoJyhefCApJyArIGNsYXNzTmFtZSArICcoIHwkKScsICdnaScpLnRlc3QoZWxlbWVudC5jbGFzc05hbWUpKSB7XG4gICAgICAgICAgLy8gU2VlIGNvbW1lbnQgYWJvdmVcbiAgICAgICAgICBoYXNDbGFzcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBoYXNDbGFzcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiBhIENTUyBwcm9wZXJ0eSBvZiB0aGUgZmlyc3QgZWxlbWVudC5cbiAgICogQHBhcmFtIHByb3BlcnR5TmFtZSB0aGUgbmFtZSBvZiB0aGUgQ1NTIHByb3BlcnR5IHRvIHJldHJpZXZlIHRoZSB2YWx1ZSBvZlxuICAgKi9cbiAgY3NzKHByb3BlcnR5TmFtZTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbDtcbiAgLyoqXG4gICAqIFNldHMgdGhlIHZhbHVlIG9mIGEgQ1NTIHByb3BlcnR5IG9uIGFsbCBlbGVtZW50cy5cbiAgICogQHBhcmFtIHByb3BlcnR5TmFtZSB0aGUgbmFtZSBvZiB0aGUgQ1NTIHByb3BlcnR5IHRvIHNldCB0aGUgdmFsdWUgZm9yXG4gICAqIEBwYXJhbSB2YWx1ZSB0aGUgdmFsdWUgdG8gc2V0IGZvciB0aGUgZ2l2ZW4gQ1NTIHByb3BlcnR5XG4gICAqL1xuICBjc3MocHJvcGVydHlOYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBET007XG4gIC8qKlxuICAgKiBTZXRzIGEgY29sbGVjdGlvbiBvZiBDU1MgcHJvcGVydGllcyBhbmQgdGhlaXIgdmFsdWVzIG9uIGFsbCBlbGVtZW50cy5cbiAgICogQHBhcmFtIHByb3BlcnR5VmFsdWVDb2xsZWN0aW9uIGFuIG9iamVjdCBjb250YWluaW5nIHBhaXJzIG9mIHByb3BlcnR5IG5hbWVzIGFuZCB0aGVpciB2YWx1ZXNcbiAgICovXG4gIGNzcyhwcm9wZXJ0eVZhbHVlQ29sbGVjdGlvbjogQ3NzUHJvcGVydGllcyk6IERPTTtcbiAgY3NzKHByb3BlcnR5TmFtZU9yQ29sbGVjdGlvbjogc3RyaW5nIHwgQ3NzUHJvcGVydGllcywgdmFsdWU/OiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHwgRE9NIHtcbiAgICBpZiAodHlwZW9mIHByb3BlcnR5TmFtZU9yQ29sbGVjdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxldCBwcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWVPckNvbGxlY3Rpb247XG5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldENzcyhwcm9wZXJ0eU5hbWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDc3MocHJvcGVydHlOYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBsZXQgcHJvcGVydHlWYWx1ZUNvbGxlY3Rpb24gPSBwcm9wZXJ0eU5hbWVPckNvbGxlY3Rpb247XG4gICAgICByZXR1cm4gdGhpcy5zZXRDc3NDb2xsZWN0aW9uKHByb3BlcnR5VmFsdWVDb2xsZWN0aW9uKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbiBpbmxpbmUgQ1NTIHByb3BlcnR5IGlmIGl0IGV4aXN0c1xuICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIHJlbW92ZVxuICAgKiBAcGFyYW0gZWxlbWVudEluZGV4IGluZGV4IG9mIHRoZSBlbGVtZW50IHdob3NlIENTUyBwcm9wZXJ0eSBzaG91bGQgZ2V0IHJlbW92ZWRcbiAgICovXG4gIHJlbW92ZUNzcyhwcm9wZXJ0eU5hbWU6IHN0cmluZywgZWxlbWVudEluZGV4ID0gMCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHNbZWxlbWVudEluZGV4XS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wZXJ0eU5hbWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDc3MocHJvcGVydHlOYW1lOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmVsZW1lbnRzWzBdKVs8YW55PnByb3BlcnR5TmFtZV07XG4gIH1cblxuICBwcml2YXRlIHNldENzcyhwcm9wZXJ0eU5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IERPTSB7XG4gICAgdGhpcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAvLyA8YW55PiBjYXN0IHRvIHJlc29sdmUgVFM3MDE1OiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zNjYyNzExNC8zNzAyNTJcbiAgICAgIGVsZW1lbnQuc3R5bGVbPGFueT5wcm9wZXJ0eU5hbWVdID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwcml2YXRlIHNldENzc0NvbGxlY3Rpb24ocnVsZVZhbHVlQ29sbGVjdGlvbjoge1tydWxlTmFtZTogc3RyaW5nXTogc3RyaW5nfSk6IERPTSB7XG4gICAgdGhpcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zNDQ5MDU3My8zNzAyNTJcbiAgICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgcnVsZVZhbHVlQ29sbGVjdGlvbik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuIiwiaW1wb3J0IHtFcnJvck1lc3NhZ2VNYXAsIEVycm9yTWVzc2FnZVRyYW5zbGF0b3J9IGZyb20gJy4vY29tcG9uZW50cy9lcnJvcm1lc3NhZ2VvdmVybGF5JztcbmltcG9ydCB7IEVycm9yRXZlbnQgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgTW9iaWxlVjNQbGF5ZXJFcnJvckV2ZW50LCBNb2JpbGVWM1NvdXJjZUVycm9yRXZlbnQgfSBmcm9tICcuL21vYmlsZXYzcGxheWVyYXBpJztcblxuZXhwb3J0IG5hbWVzcGFjZSBFcnJvclV0aWxzIHtcblxuICBleHBvcnQgY29uc3QgZGVmYXVsdEVycm9yTWVzc2FnZXM6IEVycm9yTWVzc2FnZU1hcCA9IHtcbiAgICAxMDAwOiAnRXJyb3IgaXMgdW5rbm93bicsXG4gICAgMTAwMTogJ1RoZSBwbGF5ZXIgQVBJIGlzIG5vdCBhdmFpbGFibGUgYWZ0ZXIgYSBjYWxsIHRvIFBsYXllckFQSS5kZXN0cm95LicsXG4gICAgMTEwMDogJ0dlbmVyYWwgc2V0dXAgZXJyb3InLFxuICAgIDExMDE6ICdUaGVyZSB3YXMgYW4gZXJyb3Igd2hlbiBpbnNlcnRpbmcgdGhlIEhUTUwgdmlkZW8gZWxlbWVudCcsXG4gICAgMTEwMjogJ05vIGNvbmZpZ3VyYXRpb24gd2FzIHByb3ZpZGVkJyxcbiAgICAxMTAzOiAnVGhlIGxpY2Vuc2UgaXMgbm90IHZhbGlkJyxcbiAgICAxMTA0OiAnVGhlIHRoZSBkb21haW4tbG9ja2VkIHBsYXllciBpcyBub3QgYXV0aG9yaXplZCB0byBwbGF5YmFjayBvbiB0aGlzIGRvbWFpbicsXG4gICAgMTEwNTogJ1RoZSBkb21haW4gaXMgbm90IGFsbG93bGlzdGVkJyxcbiAgICAxMTA2OiAnVGhlIGxpY2Vuc2Ugc2VydmVyIFVSTCBpcyBpbnZhbGlkJyxcbiAgICAxMTA3OiAnVGhlIGltcHJlc3Npb24gc2VydmVyIFVSTCBpcyBpbnZhbGlkJyxcbiAgICAxMTA4OiAnQ291bGQgbm90IGluaXRpYWxpemUgYSByZW5kZXJpbmcgZW5naW5lJyxcbiAgICAxMTA5OiAnVGhlIHVzZWQgZmxhc2ggdmVyc2lvbiBkb2VzIG5vdCBzdXBwb3J0IHBsYXliYWNrJyxcbiAgICAxMTEwOiAnTmF0aXZlIEZsYXNoIGlzIG5vdCBhdXRob3JpemVkIGJ5IGEgdmFsaWQgQWRvYmUgdG9rZW4nLFxuICAgIDExMTE6ICdGbGFzaCBkb2VzblxcJ3QgaGF2ZSBzdWZmaWNpZW50IHJlc291cmNlcycsXG4gICAgMTExMjogJ0ZsYXNoIGNvbnRhaW5lciBBUEkgbm90IGF2YWlsYWJsZScsXG4gICAgMTExMzogJ1Byb3RvY29sIG5vdCBzdXBwb3J0ZWQuIFRoaXMgc2l0ZSBoYXMgYmVlbiBsb2FkZWQgdXNpbmcgXCJmaWxlXCIgcHJvdG9jb2wsIGJ1dCB1bmZvcnR1bmF0ZWx5IHRoaXMgaXMgbm90IHN1cHBvcnRlZC4gUGxlYXNlIGxvYWQgdGhlIHBhZ2UgdXNpbmcgYSB3ZWIgc2VydmVyICh1c2luZyBodHRwIG9yIGh0dHBzKScsXG4gICAgMTIwMDogJ0dlbmVyYWwgc291cmNlIGVycm9yJyxcbiAgICAxMjAxOiAnTm8gdmFsaWQgc291cmNlIHdhcyBwcm92aWRlZCcsXG4gICAgMTIwMjogJ1RoZSBkb3dubG9hZGVkIG1hbmlmZXN0IGlzIGludmFsaWQnLFxuICAgIDEyMDM6ICdUaGVyZSB3YXMgbm8gdGVjaG5vbG9neSBkZXRlY3RlZCB0byBwbGF5YmFjayB0aGUgcHJvdmlkZWQgc291cmNlJyxcbiAgICAxMjA0OiAnVGhlIHN0cmVhbSB0eXBlIGlzIG5vdCBzdXBwb3J0ZWQnLFxuICAgIDEyMDU6ICdUaGUgZm9yY2VkIHRlY2hub2xvZ3kgaXMgbm90IHN1cHBvcnRlZCcsXG4gICAgMTIwNjogJ05vIHN0cmVhbSBmb3VuZCBmb3Igc3VwcG9ydGVkIHRlY2hub2xvZ2llcy4nLFxuICAgIDEyMDc6ICdUaGUgZG93bmxvYWRlZCBzZWdtZW50IGlzIGVtcHR5JyxcbiAgICAxMjA4OiAnVGhlIG1hbmlmZXN0IGNvdWxkIG5vdCBiZSBsb2FkZWQnLFxuICAgIDEyMDk6ICdQcm9ncmVzc2l2ZSBzdHJlYW0gdHlwZSBub3Qgc3VwcG9ydGVkIG9yIHRoZSBzdHJlYW0gaGFzIGFuIGVycm9yJyxcbiAgICAxMjEwOiAnSExTIHN0cmVhbSBoYXMgYW4gZXJyb3InLFxuICAgIDEyMTE6ICdUaGUgZW5jcnlwdGlvbiBtZXRob2QgaXMgbm90IHN1cHBvcnRlZCcsXG4gICAgMTMwMDogJ0dlbmVyYWwgcGxheWJhY2sgZXJyb3InLFxuICAgIDEzMDE6ICdWaWRlbyBkZWNvZGVyIG9yIGRlbXV4ZXIgaGFkIGFuIGVycm9yIHdpdGggdGhlIGNvbnRlbnQnLFxuICAgIDEzMDI6ICdHZW5lcmFsIGVycm9yIGlmIEZsYXNoIHJlbmRlcmVyIGhhcyBhbiBlcnJvcicsXG4gICAgMTMwMzogJ0ZsYXNoIGRvZXNuXFwndCBoYXZlIHN1ZmZpY2llbnQgcmVzb3VyY2VzJyxcbiAgICAxMzA0OiAnVGhlIHRyYW5zbXV4ZXIgY291bGQgbm90IGJlIGluaXRpYWxpemVkJyxcbiAgICAxNDAwOiAnTmV0d29yayBlcnJvciB3aGlsZSBkb3dubG9hZGluZycsXG4gICAgMTQwMTogJ1RoZSBtYW5pZmVzdCBkb3dubG9hZCB0aW1lZCBvdXQnLFxuICAgIDE0MDI6ICdUaGUgc2VnbWVudCBkb3dubG9hZCB0aW1lZCBvdXQnLFxuICAgIDE0MDM6ICdUaGUgcHJvZ3Jlc3NpdmUgc3RyZWFtIGRvd25sb2FkIHRpbWVkIG91dCcsXG4gICAgMTQwNDogJ1RoZSBDZXJ0aWZpY2F0ZSBjb3VsZCBub3QgYmUgbG9hZGVkJyxcbiAgICAyMDAwOiAnR2VuZXJhbCBEUk0gZXJyb3InLFxuICAgIDIwMDE6ICdSZXF1aXJlZCBEUk0gY29uZmlndXJhdGlvbiBpcyBtaXNzaW5nJyxcbiAgICAyMDAyOiAnVGhlIGxpY2Vuc2luZyBzZXJ2ZXIgVVJMIGlzIG1pc3NpbmcnLFxuICAgIDIwMDM6ICdMaWNlbnNlIHJlcXVlc3QgZmFpbGVkJyxcbiAgICAyMDA0OiAnS2V5IG9yIEtleUlkIGlzIG1pc3NpbmcnLFxuICAgIDIwMDU6ICdLZXkgc2l6ZSBpcyBub3Qgc3VwcG9ydGVkJyxcbiAgICAyMDA2OiAnVW5hYmxlIHRvIGluc3RhbnRpYXRlIGEga2V5IHN5c3RlbSBzdXBwb3J0aW5nIHRoZSByZXF1aXJlZCBjb21iaW5hdGlvbnMnLFxuICAgIDIwMDc6ICdVbmFibGUgdG8gY3JlYXRlIG9yIGluaXRpYWxpemUga2V5IHNlc3Npb24nLFxuICAgIDIwMDg6ICdUaGUgTWVkaWFLZXkgb2JqZWN0IGNvdWxkIG5vdCBiZSBjcmVhdGVkL2luaXRpYWxpemVkJyxcbiAgICAyMDA5OiAnS2V5IGVycm9yJyxcbiAgICAyMDEwOiAnVGhlIGtleSBzeXN0ZW0gaXMgbm90IHN1cHBvcnRlZCcsXG4gICAgMjAxMTogJ1RoZSBjZXJ0aWZpY2F0ZSBpcyBub3QgdmFsaWQnLFxuICAgIDIwMTI6ICdJbnZhbGlkIGhlYWRlciBrZXkvdmFsdWUgcGFpciBmb3IgUGxheVJlYWR5IGxpY2Vuc2UgcmVxdWVzdCcsXG4gICAgMjAxMzogJ0NvbnRlbnQgY2Fubm90IGJlIHBsYXllZCBiYWNrIGJlY2F1c2UgdGhlIG91dHB1dCBpcyByZXN0cmljdGVkIG9uIHRoaXMgbWFjaGluZScsXG4gICAgMjAxNDogJ0RSTSBlcnJvciBmb3IgdGhlIEZsYXNoIHJlbmRlcmVyJyxcbiAgICAyMTAwOiAnR2VuZXJhbCBWUiBlcnJvcicsXG4gICAgMjEwMTogJ1BsYXllciB0ZWNobm9sb2d5IG5vdCBjb21wYXRpYmxlIHdpdGggVlIgcGxheWJhY2snLFxuICAgIDMwMDA6ICdHZW5lcmFsIG1vZHVsZSBlcnJvcicsXG4gICAgMzAwMTogJ1RoZSBkZWZpbml0aW9uIG9mIHRoZSBtb2R1bGUgaXMgaW52YWxpZCAoZS5nLiBpbmNvbXBsZXRlKS4nLFxuICAgIDMwMDI6ICdUaGUgbW9kdWxlIGRlZmluaXRpb24gc3BlY2lmaWVzIGRlcGVuZGVuY2llcyBidXQgdGhlIG1vZHVsZSBpcyBub3QgcHJvdmlkZWQgdmlhIGEgZnVuY3Rpb24gZm9yIGRlZmVycmVkIGxvYWRpbmcuJyxcbiAgICAzMDAzOiAnQSBtb2R1bGUgY2Fubm90IGJlIGxvYWRlZCBiZWNhdXNlIGl0IGhhcyBub3QgYmVlbiBhZGRlZCB0byB0aGUgcGxheWVyIGNvcmUuJyxcbiAgICAzMDA0OiAnQSBtb2R1bGUgY2Fubm90IGJlIGxvYWRlZCBiZWNhdXNlIG9uZSBvciBtb3JlIGRlcGVuZGVuY2llcyBhcmUgbWlzc2luZy4nLFxuICAgIDMxMDA6ICdBbiBBZHZlcnRpc2luZyBtb2R1bGUgZXJyb3IgaGFzIG9jY3VycmVkLiBSZWZlciB0byB0aGUgYXR0YWNoZWQgQWR2ZXJ0aXNpbmdFcnJvci4nLFxuICB9O1xuXG4gIGV4cG9ydCBjb25zdCBkZWZhdWx0TW9iaWxlVjNFcnJvck1lc3NhZ2VUcmFuc2xhdG9yID0gKGVycm9yOiBNb2JpbGVWM1BsYXllckVycm9yRXZlbnQgfCBNb2JpbGVWM1NvdXJjZUVycm9yRXZlbnQpID0+IHtcbiAgICByZXR1cm4gZXJyb3IubWVzc2FnZTtcbiAgfTtcblxuICBleHBvcnQgY29uc3QgZGVmYXVsdFdlYkVycm9yTWVzc2FnZVRyYW5zbGF0b3I6IEVycm9yTWVzc2FnZVRyYW5zbGF0b3IgPSAoZXJyb3I6IEVycm9yRXZlbnQpID0+IHtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBFcnJvclV0aWxzLmRlZmF1bHRFcnJvck1lc3NhZ2VzW2Vycm9yLmNvZGVdO1xuXG4gICAgaWYgKGVycm9yTWVzc2FnZSkge1xuICAgICAgLy8gVXNlIHRoZSBlcnJvciBtZXNzYWdlIHRleHQgaWYgdGhlcmUgaXMgb25lXG4gICAgICByZXR1cm4gYCR7ZXJyb3JNZXNzYWdlfVxcbigke2Vycm9yLm5hbWV9KWA7IC8vIGRlZmF1bHQgZXJyb3IgbWVzc2FnZSBzdHlsZVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGYWxsYmFjayB0byBlcnJvciBjb2RlL25hbWUgaWYgbm8gbWVzc2FnZSBpcyBkZWZpbmVkXG4gICAgICByZXR1cm4gYCR7ZXJyb3IuY29kZX0gJHtlcnJvci5uYW1lfWA7XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IHtBcnJheVV0aWxzfSBmcm9tICcuL2FycmF5dXRpbHMnO1xuaW1wb3J0IHsgVGltZW91dCB9IGZyb20gJy4vdGltZW91dCc7XG4vKipcbiAqIEZ1bmN0aW9uIGludGVyZmFjZSBmb3IgZXZlbnQgbGlzdGVuZXJzIG9uIHRoZSB7QGxpbmsgRXZlbnREaXNwYXRjaGVyfS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFdmVudExpc3RlbmVyPFNlbmRlciwgQXJncz4ge1xuICAoc2VuZGVyOiBTZW5kZXIsIGFyZ3M6IEFyZ3MpOiB2b2lkO1xufVxuXG4vKipcbiAqIEVtcHR5IHR5cGUgZm9yIGNyZWF0aW5nIHtAbGluayBFdmVudERpc3BhdGNoZXIgZXZlbnQgZGlzcGF0Y2hlcnN9IHRoYXQgZG8gbm90IGNhcnJ5IGFueSBhcmd1bWVudHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTm9BcmdzIHtcbn1cblxuLyoqXG4gKiBFdmVudCBhcmdzIGZvciBhbiBldmVudCB0aGF0IGNhbiBiZSBjYW5jZWxlZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDYW5jZWxFdmVudEFyZ3MgZXh0ZW5kcyBOb0FyZ3Mge1xuICAvKipcbiAgICogR2V0cyBvciBzZXRzIGEgZmxhZyB3aGV0aGVyIHRoZSBldmVudCBzaG91bGQgYmUgY2FuY2VsZWQuXG4gICAqL1xuICBjYW5jZWw/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIFB1YmxpYyBpbnRlcmZhY2UgdGhhdCByZXByZXNlbnRzIGFuIGV2ZW50LiBDYW4gYmUgdXNlZCB0byBzdWJzY3JpYmUgdG8gYW5kIHVuc3Vic2NyaWJlIGZyb20gZXZlbnRzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50PFNlbmRlciwgQXJncz4ge1xuICAvKipcbiAgICogU3Vic2NyaWJlcyBhbiBldmVudCBsaXN0ZW5lciB0byB0aGlzIGV2ZW50IGRpc3BhdGNoZXIuXG4gICAqIEBwYXJhbSBsaXN0ZW5lciB0aGUgbGlzdGVuZXIgdG8gYWRkXG4gICAqL1xuICBzdWJzY3JpYmUobGlzdGVuZXI6IEV2ZW50TGlzdGVuZXI8U2VuZGVyLCBBcmdzPik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZXMgYW4gZXZlbnQgbGlzdGVuZXIgdG8gdGhpcyBldmVudCBkaXNwYXRjaGVyIHRoYXQgaXMgb25seSBjYWxsZWQgb25jZS5cbiAgICogQHBhcmFtIGxpc3RlbmVyIHRoZSBsaXN0ZW5lciB0byBhZGRcbiAgICovXG4gIHN1YnNjcmliZU9uY2UobGlzdGVuZXI6IEV2ZW50TGlzdGVuZXI8U2VuZGVyLCBBcmdzPik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZXMgYW4gZXZlbnQgbGlzdGVuZXIgdG8gdGhpcyBldmVudCBkaXNwYXRjaGVyIHRoYXQgd2lsbCBiZSBjYWxsZWQgYXQgYSBsaW1pdGVkIHJhdGUgd2l0aCBhIG1pbmltdW1cbiAgICogaW50ZXJ2YWwgb2YgdGhlIHNwZWNpZmllZCBtaWxsaXNlY29uZHMuXG4gICAqIEBwYXJhbSBsaXN0ZW5lciB0aGUgbGlzdGVuZXIgdG8gYWRkXG4gICAqIEBwYXJhbSByYXRlTXMgdGhlIHJhdGUgaW4gbWlsbGlzZWNvbmRzIHRvIHdoaWNoIGNhbGxpbmcgb2YgdGhlIGxpc3RlbmVycyBzaG91bGQgYmUgbGltaXRlZFxuICAgKi9cbiAgc3Vic2NyaWJlUmF0ZUxpbWl0ZWQobGlzdGVuZXI6IEV2ZW50TGlzdGVuZXI8U2VuZGVyLCBBcmdzPiwgcmF0ZU1zOiBudW1iZXIpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZXMgYSBzdWJzY3JpYmVkIGV2ZW50IGxpc3RlbmVyIGZyb20gdGhpcyBkaXNwYXRjaGVyLlxuICAgKiBAcGFyYW0gbGlzdGVuZXIgdGhlIGxpc3RlbmVyIHRvIHJlbW92ZVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgbGlzdGVuZXIgd2FzIHN1Y2Nlc3NmdWxseSB1bnN1YnNjcmliZWQsIGZhbHNlIGlmIGl0IGlzbid0IHN1YnNjcmliZWQgb24gdGhpc1xuICAgKiAgIGRpc3BhdGNoZXJcbiAgICovXG4gIHVuc3Vic2NyaWJlKGxpc3RlbmVyOiBFdmVudExpc3RlbmVyPFNlbmRlciwgQXJncz4pOiBib29sZWFuO1xufVxuXG4vKipcbiAqIEV2ZW50IGRpc3BhdGNoZXIgdG8gc3Vic2NyaWJlIGFuZCB0cmlnZ2VyIGV2ZW50cy4gRWFjaCBldmVudCBzaG91bGQgaGF2ZSBpdHMgb3duIGRpc3BhdGNoZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBFdmVudERpc3BhdGNoZXI8U2VuZGVyLCBBcmdzPiBpbXBsZW1lbnRzIEV2ZW50PFNlbmRlciwgQXJncz4ge1xuXG4gIHByaXZhdGUgbGlzdGVuZXJzOiBFdmVudExpc3RlbmVyV3JhcHBlcjxTZW5kZXIsIEFyZ3M+W10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGluaGVyaXREb2N9XG4gICAqL1xuICBzdWJzY3JpYmUobGlzdGVuZXI6IEV2ZW50TGlzdGVuZXI8U2VuZGVyLCBBcmdzPikge1xuICAgIHRoaXMubGlzdGVuZXJzLnB1c2gobmV3IEV2ZW50TGlzdGVuZXJXcmFwcGVyKGxpc3RlbmVyKSk7XG4gIH1cblxuICAvKipcbiAgICoge0Bpbmhlcml0RG9jfVxuICAgKi9cbiAgc3Vic2NyaWJlT25jZShsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcjxTZW5kZXIsIEFyZ3M+KSB7XG4gICAgdGhpcy5saXN0ZW5lcnMucHVzaChuZXcgRXZlbnRMaXN0ZW5lcldyYXBwZXIobGlzdGVuZXIsIHRydWUpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGluaGVyaXREb2N9XG4gICAqL1xuICBzdWJzY3JpYmVSYXRlTGltaXRlZChsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcjxTZW5kZXIsIEFyZ3M+LCByYXRlTXM6IG51bWJlcikge1xuICAgIHRoaXMubGlzdGVuZXJzLnB1c2gobmV3IFJhdGVMaW1pdGVkRXZlbnRMaXN0ZW5lcldyYXBwZXIobGlzdGVuZXIsIHJhdGVNcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAaW5oZXJpdERvY31cbiAgICovXG4gIHVuc3Vic2NyaWJlKGxpc3RlbmVyOiBFdmVudExpc3RlbmVyPFNlbmRlciwgQXJncz4pOiBib29sZWFuIHtcbiAgICAvLyBJdGVyYXRlIHRocm91Z2ggbGlzdGVuZXJzLCBjb21wYXJlIHdpdGggcGFyYW1ldGVyLCBhbmQgcmVtb3ZlIGlmIGZvdW5kXG4gICAgLy8gTk9URTogSW4gY2FzZSB3ZSBldmVyIHJlbW92ZSBhbGwgbWF0Y2hpbmcgbGlzdGVuZXJzIGluc3RlYWQgb2YganVzdCB0aGUgZmlyc3QsIHdlIG5lZWQgdG8gcmV2ZXJzZS1pdGVyYXRlIGhlcmVcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgc3Vic2NyaWJlZExpc3RlbmVyID0gdGhpcy5saXN0ZW5lcnNbaV07XG4gICAgICBpZiAoc3Vic2NyaWJlZExpc3RlbmVyLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBzdWJzY3JpYmVkTGlzdGVuZXIuY2xlYXIoKTtcbiAgICAgICAgQXJyYXlVdGlscy5yZW1vdmUodGhpcy5saXN0ZW5lcnMsIHN1YnNjcmliZWRMaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBsaXN0ZW5lcnMgZnJvbSB0aGlzIGRpc3BhdGNoZXIuXG4gICAqL1xuICB1bnN1YnNjcmliZUFsbCgpOiB2b2lkIHtcbiAgICAvLyBJbiBjYXNlIG9mIFJhdGVMaW1pdGVkRXZlbnRMaXN0ZW5lcldyYXBwZXIgd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhhdCB0aGUgdGltZW91dCBjYWxsYmFjayB3b24ndCBiZSBjYWxsZWRcbiAgICBmb3IgKGxldCBsaXN0ZW5lciBvZiB0aGlzLmxpc3RlbmVycykge1xuICAgICAgbGlzdGVuZXIuY2xlYXIoKTtcbiAgICB9XG5cbiAgICB0aGlzLmxpc3RlbmVycyA9IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gZXZlbnQgdG8gYWxsIHN1YnNjcmliZWQgbGlzdGVuZXJzLlxuICAgKiBAcGFyYW0gc2VuZGVyIHRoZSBzb3VyY2Ugb2YgdGhlIGV2ZW50XG4gICAqIEBwYXJhbSBhcmdzIHRoZSBhcmd1bWVudHMgZm9yIHRoZSBldmVudFxuICAgKi9cbiAgZGlzcGF0Y2goc2VuZGVyOiBTZW5kZXIsIGFyZ3M6IEFyZ3MgPSBudWxsKSB7XG4gICAgbGV0IGxpc3RlbmVyc1RvUmVtb3ZlID0gW107XG5cbiAgICAvLyBDYWxsIGV2ZXJ5IGxpc3RlbmVyXG4gICAgLy8gV2UgaXRlcmF0ZSBvdmVyIGEgY29weSBvZiB0aGUgYXJyYXkgb2YgbGlzdGVuZXJzIHRvIGF2b2lkIHRoZSBjYXNlIHdoZXJlIGV2ZW50cyBhcmUgbm90IGZpcmVkIG9uIGxpc3RlbmVycyB3aGVuXG4gICAgLy8gbGlzdGVuZXJzIGFyZSB1bnN1YnNjcmliZWQgZnJvbSB3aXRoaW4gdGhlIGV2ZW50IGhhbmRsZXJzIGR1cmluZyBhIGRpc3BhdGNoIChiZWNhdXNlIHRoZSBpbmRpY2VzIGNoYW5nZSBhbmRcbiAgICAvLyBsaXN0ZW5lcnMgYXJlIHNoaWZ0ZWQgd2l0aGluIHRoZSBhcnJheSkuXG4gICAgLy8gVGhpcyBtZWFucyB0aGF0IGxpc3RlbmVyIHgrMSB3aWxsIHN0aWxsIGJlIGNhbGxlZCBpZiB1bnN1YnNjcmliZWQgZnJvbSB3aXRoaW4gdGhlIGhhbmRsZXIgb2YgbGlzdGVuZXIgeCwgYXMgd2VsbFxuICAgIC8vIGFzIGxpc3RlbmVyIHkrMSB3aWxsIG5vdCBiZSBjYWxsZWQgd2hlbiBzdWJzY3JpYmVkIGZyb20gd2l0aGluIHRoZSBoYW5kbGVyIG9mIGxpc3RlbmVyIHkuXG4gICAgLy8gQXJyYXkuc2xpY2UoMCkgaXMgdGhlIGZhc3Rlc3QgYXJyYXkgY29weSBtZXRob2QgYWNjb3JkaW5nIHRvOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjE1MTQyNTQvMzcwMjUyXG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMuc2xpY2UoMCk7XG4gICAgZm9yIChsZXQgbGlzdGVuZXIgb2YgbGlzdGVuZXJzKSB7XG4gICAgICBsaXN0ZW5lci5maXJlKHNlbmRlciwgYXJncyk7XG5cbiAgICAgIGlmIChsaXN0ZW5lci5pc09uY2UoKSkge1xuICAgICAgICBsaXN0ZW5lcnNUb1JlbW92ZS5wdXNoKGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgb25lLXRpbWUgbGlzdGVuZXJcbiAgICBmb3IgKGxldCBsaXN0ZW5lclRvUmVtb3ZlIG9mIGxpc3RlbmVyc1RvUmVtb3ZlKSB7XG4gICAgICBBcnJheVV0aWxzLnJlbW92ZSh0aGlzLmxpc3RlbmVycywgbGlzdGVuZXJUb1JlbW92ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGV2ZW50IHRoYXQgdGhpcyBkaXNwYXRjaGVyIG1hbmFnZXMgYW5kIG9uIHdoaWNoIGxpc3RlbmVycyBjYW4gc3Vic2NyaWJlIGFuZCB1bnN1YnNjcmliZSBldmVudCBoYW5kbGVycy5cbiAgICogQHJldHVybnMge0V2ZW50fVxuICAgKi9cbiAgZ2V0RXZlbnQoKTogRXZlbnQ8U2VuZGVyLCBBcmdzPiB7XG4gICAgLy8gRm9yIG5vdywganVzdCBjYXN0IHRoZSBldmVudCBkaXNwYXRjaGVyIHRvIHRoZSBldmVudCBpbnRlcmZhY2UuIEF0IHNvbWUgcG9pbnQgaW4gdGhlIGZ1dHVyZSB3aGVuIHRoZVxuICAgIC8vIGNvZGViYXNlIGdyb3dzLCBpdCBtaWdodCBtYWtlIHNlbnNlIHRvIHNwbGl0IHRoZSBkaXNwYXRjaGVyIGludG8gc2VwYXJhdGUgZGlzcGF0Y2hlciBhbmQgZXZlbnQgY2xhc3Nlcy5cbiAgICByZXR1cm4gPEV2ZW50PFNlbmRlciwgQXJncz4+dGhpcztcbiAgfVxufVxuXG4vKipcbiAqIEEgYmFzaWMgZXZlbnQgbGlzdGVuZXIgd3JhcHBlciB0byBtYW5hZ2UgbGlzdGVuZXJzIHdpdGhpbiB0aGUge0BsaW5rIEV2ZW50RGlzcGF0Y2hlcn0uIFRoaXMgaXMgYSAncHJpdmF0ZScgY2xhc3NcbiAqIGZvciBpbnRlcm5hbCBkaXNwYXRjaGVyIHVzZSBhbmQgaXQgaXMgdGhlcmVmb3JlIG5vdCBleHBvcnRlZC5cbiAqL1xuY2xhc3MgRXZlbnRMaXN0ZW5lcldyYXBwZXI8U2VuZGVyLCBBcmdzPiB7XG5cbiAgcHJpdmF0ZSBldmVudExpc3RlbmVyOiBFdmVudExpc3RlbmVyPFNlbmRlciwgQXJncz47XG4gIHByaXZhdGUgb25jZTogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcjxTZW5kZXIsIEFyZ3M+LCBvbmNlOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgICB0aGlzLm9uY2UgPSBvbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHdyYXBwZWQgZXZlbnQgbGlzdGVuZXIuXG4gICAqIEByZXR1cm5zIHtFdmVudExpc3RlbmVyPFNlbmRlciwgQXJncz59XG4gICAqL1xuICBnZXQgbGlzdGVuZXIoKTogRXZlbnRMaXN0ZW5lcjxTZW5kZXIsIEFyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5ldmVudExpc3RlbmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHRoZSB3cmFwcGVkIGV2ZW50IGxpc3RlbmVyIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50cy5cbiAgICogQHBhcmFtIHNlbmRlclxuICAgKiBAcGFyYW0gYXJnc1xuICAgKi9cbiAgZmlyZShzZW5kZXI6IFNlbmRlciwgYXJnczogQXJncykge1xuICAgIHRoaXMuZXZlbnRMaXN0ZW5lcihzZW5kZXIsIGFyZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIGxpc3RlbmVyIGlzIHNjaGVkdWxlZCB0byBiZSBjYWxsZWQgb25seSBvbmNlLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gb25jZSBpZiB0cnVlXG4gICAqL1xuICBpc09uY2UoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMub25jZTtcbiAgfVxuXG4gIGNsZWFyKCk6IHZvaWQge1xuICB9XG59XG5cbmludGVyZmFjZSBFdmVudEF0dHJpYnV0ZXM8U2VuZGVyLCBBcmdzPiB7XG4gIHNlbmRlcjogU2VuZGVyO1xuICBhcmdzOiBBcmdzO1xufVxuXG4vKipcbiAqIEV4dGVuZHMgdGhlIGJhc2ljIHtAbGluayBFdmVudExpc3RlbmVyV3JhcHBlcn0gd2l0aCByYXRlLWxpbWl0aW5nIGZ1bmN0aW9uYWxpdHkuXG4gKi9cbmNsYXNzIFJhdGVMaW1pdGVkRXZlbnRMaXN0ZW5lcldyYXBwZXI8U2VuZGVyLCBBcmdzPiBleHRlbmRzIEV2ZW50TGlzdGVuZXJXcmFwcGVyPFNlbmRlciwgQXJncz4ge1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgcmF0ZU1zOiBudW1iZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgcmF0ZUxpbWl0aW5nRXZlbnRMaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcjxTZW5kZXIsIEFyZ3M+O1xuXG4gIC8vIHNhdmUgbGFzdCBzZWVuIGV2ZW50IGF0dHJpYnV0ZXNcbiAgcHJpdmF0ZSBsYXN0U2VlbkV2ZW50OiBFdmVudEF0dHJpYnV0ZXM8U2VuZGVyLCBBcmdzPjtcblxuICBwcml2YXRlIHJhdGVMaW1pdFRpbW91dDogVGltZW91dDtcblxuICBjb25zdHJ1Y3RvcihsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcjxTZW5kZXIsIEFyZ3M+LCByYXRlTXM6IG51bWJlcikge1xuICAgIHN1cGVyKGxpc3RlbmVyKTsgLy8gc2V0cyB0aGUgZXZlbnQgbGlzdGVuZXIgc2lua1xuXG4gICAgdGhpcy5yYXRlTXMgPSByYXRlTXM7XG5cbiAgICAvLyBzdGFydGluZyBsaW1pdGluZyB0aGUgZXZlbnRzIHRvIHRoZSBnaXZlbiB2YWx1ZVxuICAgIGNvbnN0IHN0YXJ0UmF0ZUxpbWl0aW5nID0gKCkgPT4ge1xuICAgICAgdGhpcy5yYXRlTGltaXRUaW1vdXQuc3RhcnQoKTtcbiAgICB9O1xuXG4gICAgLy8gdGltb3V0IGZvciBsaW1pdGluZyB0aGUgZXZlbnRzXG4gICAgdGhpcy5yYXRlTGltaXRUaW1vdXQgPSBuZXcgVGltZW91dCh0aGlzLnJhdGVNcywgKCkgPT4ge1xuICAgICAgaWYgKHRoaXMubGFzdFNlZW5FdmVudCkge1xuICAgICAgICB0aGlzLmZpcmVTdXBlcih0aGlzLmxhc3RTZWVuRXZlbnQuc2VuZGVyLCB0aGlzLmxhc3RTZWVuRXZlbnQuYXJncyk7XG4gICAgICAgIHN0YXJ0UmF0ZUxpbWl0aW5nKCk7IC8vIHN0YXJ0IHJhdGVMaW1pdGluZyBhZ2FpbiB0byBrZWVwIHJhdGUgbGltaXQgYWN0aXZlIGV2ZW4gYWZ0ZXIgZmlyaW5nIHRoZSBsYXN0IHNlZW4gZXZlbnRcbiAgICAgICAgdGhpcy5sYXN0U2VlbkV2ZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEluIGNhc2UgdGhlIGV2ZW50cyBzdG9wcGluZyBkdXJpbmcgdGhlIHJhdGVMaW1pdGluZyB3ZSBuZWVkIHRvIHRyYWNrIHRoZSBsYXN0IHNlZW4gb25lIGFuZCBkZWxlZ2F0ZSBhZnRlciB0aGVcbiAgICAvLyByYXRlIGxpbWl0aW5nIGlzIGZpbmlzaGVkLiBUaGlzIHByZXZlbnRzIG1pc3NpbmcgdGhlIGxhc3QgdXBkYXRlIGR1ZSB0byB0aGUgcmF0ZSBsaW1pdC5cbiAgICB0aGlzLnJhdGVMaW1pdGluZ0V2ZW50TGlzdGVuZXIgPSAoc2VuZGVyOiBTZW5kZXIsIGFyZ3M6IEFyZ3MpID0+IHtcbiAgICAgIC8vIG9ubHkgZmlyZSBldmVudHMgaWYgdGhlIHJhdGVMaW1pdGluZyBpcyBub3QgcnVubmluZ1xuICAgICAgaWYgKHRoaXMuc2hvdWxkRmlyZUV2ZW50KCkpIHtcbiAgICAgICAgdGhpcy5maXJlU3VwZXIoc2VuZGVyLCBhcmdzKTtcbiAgICAgICAgc3RhcnRSYXRlTGltaXRpbmcoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxhc3RTZWVuRXZlbnQgPSB7XG4gICAgICAgIHNlbmRlcjogc2VuZGVyLFxuICAgICAgICBhcmdzOiBhcmdzLFxuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBzaG91bGRGaXJlRXZlbnQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLnJhdGVMaW1pdFRpbW91dC5pc0FjdGl2ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBmaXJlU3VwZXIoc2VuZGVyOiBTZW5kZXIsIGFyZ3M6IEFyZ3MpIHtcbiAgICAvLyBGaXJlIHRoZSBhY3R1YWwgZXh0ZXJuYWwgZXZlbnQgbGlzdGVuZXJcbiAgICBzdXBlci5maXJlKHNlbmRlciwgYXJncyk7XG4gIH1cblxuICBmaXJlKHNlbmRlcjogU2VuZGVyLCBhcmdzOiBBcmdzKSB7XG4gICAgLy8gRmlyZSB0aGUgaW50ZXJuYWwgcmF0ZS1saW1pdGluZyBsaXN0ZW5lciBpbnN0ZWFkIG9mIHRoZSBleHRlcm5hbCBldmVudCBsaXN0ZW5lclxuICAgIHRoaXMucmF0ZUxpbWl0aW5nRXZlbnRMaXN0ZW5lcihzZW5kZXIsIGFyZ3MpO1xuICB9XG5cbiAgY2xlYXIoKTogdm9pZCB7XG4gICAgc3VwZXIuY2xlYXIoKTtcbiAgICB0aGlzLnJhdGVMaW1pdFRpbW91dC5jbGVhcigpO1xuICB9XG59XG4iLCJjb25zdCBGb2N1c1Zpc2libGVDc3NDbGFzc05hbWUgPSAne3tQUkVGSVh9fS1mb2N1cy12aXNpYmxlJztcblxuZXhwb3J0IGNsYXNzIEZvY3VzVmlzaWJpbGl0eVRyYWNrZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IGV2ZW50SGFuZGxlck1hcDogeyBbZXZlbnROYW1lOiBzdHJpbmddOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0IH07XG4gIHByaXZhdGUgbGFzdEludGVyYWN0aW9uV2FzS2V5Ym9hcmQ6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYml0bW92aW5VaVByZWZpeDogc3RyaW5nKSB7XG4gICAgdGhpcy5ldmVudEhhbmRsZXJNYXAgPSB7XG4gICAgICBtb3VzZWRvd246IHRoaXMub25Nb3VzZU9yUG9pbnRlck9yVG91Y2gsXG4gICAgICBwb2ludGVyZG93bjogdGhpcy5vbk1vdXNlT3JQb2ludGVyT3JUb3VjaCxcbiAgICAgIHRvdWNoc3RhcnQ6IHRoaXMub25Nb3VzZU9yUG9pbnRlck9yVG91Y2gsXG4gICAgICBrZXlkb3duOiB0aGlzLm9uS2V5RG93bixcbiAgICAgIGZvY3VzOiB0aGlzLm9uRm9jdXMsXG4gICAgICBibHVyOiB0aGlzLm9uQmx1cixcbiAgICB9O1xuICAgIHRoaXMucmVnaXN0ZXJFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgcHJpdmF0ZSBvbktleURvd24gPSAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgIGlmIChlLm1ldGFLZXkgfHwgZS5hbHRLZXkgfHwgZS5jdHJsS2V5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5sYXN0SW50ZXJhY3Rpb25XYXNLZXlib2FyZCA9IHRydWU7XG4gIH07XG5cbiAgcHJpdmF0ZSBvbk1vdXNlT3JQb2ludGVyT3JUb3VjaCA9ICgpID0+ICh0aGlzLmxhc3RJbnRlcmFjdGlvbldhc0tleWJvYXJkID0gZmFsc2UpO1xuXG4gIHByaXZhdGUgb25Gb2N1cyA9ICh7IHRhcmdldDogZWxlbWVudCB9OiBGb2N1c0V2ZW50KSA9PiB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5sYXN0SW50ZXJhY3Rpb25XYXNLZXlib2FyZCAmJlxuICAgICAgaXNIdG1sRWxlbWVudChlbGVtZW50KSAmJlxuICAgICAgaXNCaXRtb3ZpblVpKGVsZW1lbnQsIHRoaXMuYml0bW92aW5VaVByZWZpeCkgJiZcbiAgICAgICFlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhGb2N1c1Zpc2libGVDc3NDbGFzc05hbWUpXG4gICAgKSB7XG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoRm9jdXNWaXNpYmxlQ3NzQ2xhc3NOYW1lKTtcbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSBvbkJsdXIgPSAoeyB0YXJnZXQ6IGVsZW1lbnQgfTogRm9jdXNFdmVudCkgPT4ge1xuICAgIGlmIChpc0h0bWxFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoRm9jdXNWaXNpYmxlQ3NzQ2xhc3NOYW1lKTtcbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSByZWdpc3RlckV2ZW50TGlzdGVuZXJzKCk6IHZvaWQge1xuICAgIGZvciAoY29uc3QgZXZlbnQgaW4gdGhpcy5ldmVudEhhbmRsZXJNYXApIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIHRoaXMuZXZlbnRIYW5kbGVyTWFwW2V2ZW50XSwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1bnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKTogdm9pZCB7XG4gICAgZm9yIChjb25zdCBldmVudCBpbiB0aGlzLmV2ZW50SGFuZGxlck1hcCkge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgdGhpcy5ldmVudEhhbmRsZXJNYXBbZXZlbnRdLCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLnVucmVnaXN0ZXJFdmVudExpc3RlbmVycygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzQml0bW92aW5VaShlbGVtZW50OiBFbGVtZW50LCBiaXRtb3ZpblVpUHJlZml4OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIGVsZW1lbnQuaWQuaW5kZXhPZihiaXRtb3ZpblVpUHJlZml4KSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gaXNIdG1sRWxlbWVudChlbGVtZW50OiB1bmtub3duKTogZWxlbWVudCBpcyBIVE1MRWxlbWVudCAmIHsgY2xhc3NMaXN0OiBET01Ub2tlbkxpc3QgfSB7XG4gIHJldHVybiAoXG4gICAgZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmIGVsZW1lbnQuY2xhc3NMaXN0IGluc3RhbmNlb2YgRE9NVG9rZW5MaXN0XG4gICk7XG59XG4iLCJpbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuLyoqXG4gKiBUaGUgR3JvdXAgUGxheWJhY2sgQVBJIG9mZmVycyBjb250cm9sIG92ZXIgc3luY2hyb25pemVkIHBsYXliYWNrIG9mIGEgZ3JvdXAgb2YgY2xpZW50cywgZS5nLiBmb3IgQXBwbGUgU2hhcmVQbGF5XG4gKiBzZXNzaW9ucy5cblxuICogTm90ZTogVGhlIEFQSSBjdXJyZW50bHkgb25seSBjb3ZlcnMgdGhlIGltbWVkaWF0ZSBuZWVkcyBvZiB0aGUgaU9TIFNESyBpbiBjb21iaW5hdGlvbiB3aXRoIG91ciBVSSB3aGljaCBpcyByZWdhcmRpbmdcbiAqIHRlbXBvcmFyaWx5IHN1c3BlbmRpbmcgc3luY2hyb25pemF0aW9uIG9mIHRoZSBwbGF5ZXIgZnJvbSB0aGUgZ3JvdXAuIEJ1dCBpdCBpcyBvcGVuIHRvIGJlIGV4dGVuZGVkIGFzIG5lZWRlZCBpbiB0aGVcbiAqIGZ1dHVyZS5cbiAqL1xuXG4vKipcbiAqIFJlYXNvbiBmb3Igc3VzcGVuZGluZyB0aGUgc3luY2hyb25pemF0aW9uIHdpdGggdGhlIGdyb3VwLlxuICovXG5leHBvcnQgZW51bSBHcm91cFBsYXliYWNrU3VzcGVuc2lvblJlYXNvbiB7XG4gIFVzZXJJc1NjcnViYmluZyA9ICd1c2VySXNTY3J1YmJpbmcnLFxufVxuXG4vKipcbiAqIEEgcmVwcmVzZW50YXRpb24gb2YgYSB0ZW1wb3JhcnkgYnJlYWsgaW4gcGFydGljaXBhdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBHcm91cFBsYXliYWNrU3VzcGVuc2lvbiB7XG4gIC8qKlxuICAgKiBUaGUgcmVhc29uIGZvciB0aGUgc3VzcGVuc2lvbi5cbiAgICovXG4gIHJlYXNvbjogR3JvdXBQbGF5YmFja1N1c3BlbnNpb25SZWFzb247XG5cbiAgLyoqXG4gICAqIEEgdW5pcXVlIGlkZW50aWZpZXIuXG4gICAqL1xuICBpZDogc3RyaW5nO1xufVxuXG4vKipcbiAqIE9wdGlvbnMgdG8gYmUgY29uc2lkZXJlZCB1cG9uIGVuZGluZyBhIHN1c3BlbnNpb24uXG4gKi9cbmludGVyZmFjZSBFbmRHcm91cFBsYXliYWNrU3VzcGVuc2lvbk9wdGlvbnMge1xuICAvKipcbiAgICogQSBwcm9wb3NlZCB0aW1lIGZvciB0aGUgZ3JvdXAgdG8gc2VlayB0by5cbiAgICovXG4gIHByb3Bvc2VkUGxheWJhY2tUaW1lPzogbnVtYmVyO1xufVxuXG4vKipcbiAqIEdyb3VwIFBsYXliYWNrIEFQSSBvZmZlcmluZyBjb250cm9sIG92ZXIgdGhlIHBsYXllcidzIHBhcnRpY2lwYXRpb24gaW4gc3luY2hyb25pemVkIHBsYXliYWNrIG9mIGEgZ3JvdXAgb2YgY2xpZW50cy5cbiAqIEZvciBleGFtcGxlLCBhbiBBcHBsZSBTaGFyZVBsYXkgc2Vzc2lvbi5cbiAqL1xuaW50ZXJmYWNlIEdyb3VwUGxheWJhY2tBUEkge1xuICAvKipcbiAgICogQmVnaW5zIGEgbmV3IHN1c3BlbnNpb24uXG4gICAqXG4gICAqIFRlbXBvcmFyaWx5IHN1c3BlbmRzIHRoZSBsb2NhbCBwbGF5ZXIncyBzeW5jaHJvbml6YXRpb24gd2l0aCB0aGUgZ3JvdXAuIFdoaWxlIHN1c3BlbmRlZCwgYW55IGxvY2FsIHBsYXliYWNrIGNvbnRyb2xcbiAgICogYWN0aW9uIChlLmcuIHBsYXksIHBhdXNlLCBzZWVrKSB3aWxsIG5vdCBiZSBmb3J3YXJkZWQgdG8gdGhlIGdyb3VwIGFuZCBhbnkgYWN0aW9uIG9yaWdpbmF0aW5nIGZyb20gYW5vdGhlciBncm91cFxuICAgKiBwYXJ0aWNpcGFudCB3aWxsIG5vdCBiZSBwZXJmb3JtZWQgb24gdGhlIGxvY2FsIHBsYXllci5cbiAgICpcbiAgICogQHJlbWFya3NcbiAgICogSXQgaXMgcG9zc2libGUgZm9yIG11bHRpcGxlIHN1c3BlbnNpb25zIHRvIGV4aXN0IGV4aXN0IHNpbXVsdGFuZW91c2x5IHdpdGggZGlmZmVyZW50IHN1c3BlbnNpb24gcmVhc29ucy4gVGhlIHBsYXllclxuICAgKiB3aWxsIHJlLXN5bmNocm9uaXplIHdpdGggdGhlIGdyb3VwIG9uY2UgYWxsIGV4aXN0aW5nIHN1c3BlbnNpb25zIGhhdmUgZW5kZWQuXG4gICAqXG4gICAqIEBwYXJhbSByZWFzb24gLSBUaGUgcmVhc29uIGZvciB0aGUgc3VzcGVuc2lvbi5cbiAgICogQHJldHVybnMgQSBzdXNwZW5zaW9uIG9iamVjdC5cbiAgICovXG4gIGJlZ2luU3VzcGVuc2lvbihyZWFzb246IEdyb3VwUGxheWJhY2tTdXNwZW5zaW9uUmVhc29uKTogR3JvdXBQbGF5YmFja1N1c3BlbnNpb247XG5cbiAgLyoqXG4gICAqIEVuZHMgdGhlIGdpdmVuIHN1c3BlbnNpb24uXG4gICAqXG4gICAqIEBwYXJhbSBzdXNwZW5zaW9uIC0gVGhlIHN1c3BlbnNpb24gdG8gYmUgZW5kZWQuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwuIE9wdGlvbnMgdG8gYmUgY29uc2lkZXJlZCB3aGVuIGVuZGluZyB0aGUgc3VzcGVuc2lvbiwgZS5nLiBhIHByb3Bvc2VkIHNlZWsgdGltZSBmb3IgdGhlIGdyb3VwLlxuICAgKi9cbiAgZW5kU3VzcGVuc2lvbihzdXNwZW5zaW9uOiBHcm91cFBsYXliYWNrU3VzcGVuc2lvbiwgb3B0aW9ucz86IEVuZEdyb3VwUGxheWJhY2tTdXNwZW5zaW9uT3B0aW9ucyk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHBsYXllciBpcyBjdXJyZW50bHkgcGFydGljaXBhdGluZyBpbiBhIGdyb3VwIHBsYXliYWNrIHNlc3Npb24uXG4gICAqL1xuICBoYXNKb2luZWQoKTogYm9vbGVhbjtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgcGxheWVyIGlzIGN1cnJlbnRseSBzdXNwZW5kaW5nIHN5bmNocm9uaXphdGlvbiB3aXRoIHRoZSBncm91cC5cbiAgICogQ2FuIG9ubHkgcmV0dXJuIHRydWUgaWYgYGhhc0pvaW5lZCgpYCBhbHNvIGlzIHRydWUuXG4gICAqL1xuICBpc1N1c3BlbmRlZCgpOiBib29sZWFuO1xufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgRXh0ZW5kZWRQbGF5ZXJBUEkgZXh0ZW5kcyBQbGF5ZXJBUEkge1xuICAvKipcbiAgICogR3JvdXAgUGxheWJhY2sgQVBJXG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqIFRoaXMgQVBJIGlzIG9wdGlvbmFsIGFzIG5vdCBldmVyeSBwbGF0Zm9ybSBzdXBwb3J0cyBncm91cCBwbGF5YmFjay5cbiAgICovXG4gIGdyb3VwUGxheWJhY2s/OiBHcm91cFBsYXliYWNrQVBJO1xufVxuIiwiZXhwb3J0IG5hbWVzcGFjZSBHdWlkIHtcblxuICBsZXQgZ3VpZCA9IDE7XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgcmV0dXJuIGd1aWQrKztcbiAgfVxufVxuIiwiaW1wb3J0IHtET019IGZyb20gJy4vZG9tJztcblxuZXhwb3J0IGludGVyZmFjZSBJbWFnZUxvYWRlZENhbGxiYWNrIHtcbiAgKHVybDogc3RyaW5nLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IHZvaWQ7XG59XG5cbmludGVyZmFjZSBJbWFnZUxvYWRlclN0YXRlIHtcbiAgdXJsOiBzdHJpbmc7XG4gIGltYWdlOiBET007XG4gIGxvYWRlZENhbGxiYWNrOiBJbWFnZUxvYWRlZENhbGxiYWNrO1xuICBsb2FkZWQ6IGJvb2xlYW47XG4gIHdpZHRoOiBudW1iZXI7XG4gIGhlaWdodDogbnVtYmVyO1xufVxuXG4vKipcbiAqIFRyYWNrcyB0aGUgbG9hZGluZyBzdGF0ZSBvZiBpbWFnZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbWFnZUxvYWRlciB7XG5cbiAgcHJpdmF0ZSBzdGF0ZTogeyBbdXJsOiBzdHJpbmddOiBJbWFnZUxvYWRlclN0YXRlOyB9ID0ge307XG5cbiAgLyoqXG4gICAqIExvYWRzIGFuIGltYWdlIGFuZCBjYWxsIHRoZSBjYWxsYmFjayBvbmNlIHRoZSBpbWFnZSBpcyBsb2FkZWQuIElmIHRoZSBpbWFnZSBpcyBhbHJlYWR5IGxvYWRlZCwgdGhlIGNhbGxiYWNrXG4gICAqIGlzIGNhbGxlZCBpbW1lZGlhdGVseSwgZWxzZSBpdCBpcyBjYWxsZWQgb25jZSBsb2FkaW5nIGhhcyBmaW5pc2hlZC4gQ2FsbGluZyB0aGlzIG1ldGhvZCBtdWx0aXBsZSB0aW1lcyBmb3IgdGhlXG4gICAqIHNhbWUgaW1hZ2Ugd2hpbGUgaXQgaXMgbG9hZGluZyBjYWxscyBvbmx5IGxldCBjYWxsYmFjayBwYXNzZWQgaW50byB0aGUgbGFzdCBjYWxsLlxuICAgKiBAcGFyYW0gdXJsIFRoZSB1cmwgdG8gdGhlIGltYWdlIHRvIGxvYWRcbiAgICogQHBhcmFtIGxvYWRlZENhbGxiYWNrIFRoZSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSBpbWFnZSBpcyBsb2FkZWRcbiAgICovXG4gIGxvYWQodXJsOiBzdHJpbmcsIGxvYWRlZENhbGxiYWNrOiBJbWFnZUxvYWRlZENhbGxiYWNrKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLnN0YXRlW3VybF0pIHtcbiAgICAgIC8vIFdoZW4gdGhlIGltYWdlIHdhcyBuZXZlciBhdHRlbXB0ZWQgdG8gYmUgbG9hZGVkIGJlZm9yZSwgd2UgY3JlYXRlIGEgc3RhdGUgYW5kIHN0b3JlIGl0IGluIHRoZSBzdGF0ZSBtYXBcbiAgICAgIC8vIGZvciBsYXRlciB1c2Ugd2hlbiB0aGUgc2FtZSBpbWFnZSBpcyByZXF1ZXN0ZWQgdG8gYmUgbG9hZGVkIGFnYWluLlxuICAgICAgbGV0IHN0YXRlOiBJbWFnZUxvYWRlclN0YXRlID0ge1xuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgaW1hZ2U6IG5ldyBET00oJ2ltZycsIHt9KSxcbiAgICAgICAgbG9hZGVkQ2FsbGJhY2s6IGxvYWRlZENhbGxiYWNrLFxuICAgICAgICBsb2FkZWQ6IGZhbHNlLFxuICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgfTtcbiAgICAgIHRoaXMuc3RhdGVbdXJsXSA9IHN0YXRlO1xuXG4gICAgICAvLyBMaXN0ZW4gdG8gdGhlIGxvYWQgZXZlbnQsIHVwZGF0ZSB0aGUgc3RhdGUgYW5kIGNhbGwgdGhlIGNhbGxiYWNrIG9uY2UgdGhlIGltYWdlIGlzIGxvYWRlZFxuICAgICAgc3RhdGUuaW1hZ2Uub24oJ2xvYWQnLCAoZSkgPT4ge1xuICAgICAgICBzdGF0ZS5sb2FkZWQgPSB0cnVlO1xuICAgICAgICBzdGF0ZS53aWR0aCA9ICg8SFRNTEltYWdlRWxlbWVudD5zdGF0ZS5pbWFnZS5nZXQoMCkpLndpZHRoO1xuICAgICAgICBzdGF0ZS5oZWlnaHQgPSAoPEhUTUxJbWFnZUVsZW1lbnQ+c3RhdGUuaW1hZ2UuZ2V0KDApKS5oZWlnaHQ7XG5cbiAgICAgICAgdGhpcy5jYWxsTG9hZGVkQ2FsbGJhY2soc3RhdGUpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFNldCB0aGUgaW1hZ2UgVVJMIHRvIHN0YXJ0IHRoZSBsb2FkaW5nXG4gICAgICBzdGF0ZS5pbWFnZS5hdHRyKCdzcmMnLCBzdGF0ZS51cmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBXZSBoYXZlIGEgc3RhdGUgZm9yIHRoZSByZXF1ZXN0ZWQgaW1hZ2UsIHNvIGl0IGlzIGVpdGhlciBhbHJlYWR5IGxvYWRlZCBvciBjdXJyZW50bHkgbG9hZGluZ1xuICAgICAgbGV0IHN0YXRlID0gdGhpcy5zdGF0ZVt1cmxdO1xuXG4gICAgICAvLyBXZSBvdmVyd3JpdGUgdGhlIGNhbGxiYWNrIHRvIG1ha2Ugc3VyZSB0aGF0IG9ubHkgdGhlIGNhbGxiYWNrIG9mIHRoZSBsYXRlc3QgY2FsbCBnZXRzIGV4ZWN1dGVkLlxuICAgICAgLy8gRWFybGllciBjYWxsYmFja3MgYmVjb21lIGludmFsaWQgb25jZSBhIG5ldyBsb2FkIGNhbGwgYXJyaXZlcywgYW5kIHRoZXkgYXJlIG5vdCBjYWxsZWQgYXMgbG9uZyBhcyB0aGUgaW1hZ2VcbiAgICAgIC8vIGlzIG5vdCBsb2FkZWQuXG4gICAgICBzdGF0ZS5sb2FkZWRDYWxsYmFjayA9IGxvYWRlZENhbGxiYWNrO1xuXG4gICAgICAvLyBXaGVuIHRoZSBpbWFnZSBpcyBhbHJlYWR5IGxvYWRlZCwgd2UgZGlyZWN0bHkgZXhlY3V0ZSB0aGUgY2FsbGJhY2sgaW5zdGVhZCBvZiB3YWl0aW5nIGZvciB0aGUgbG9hZCBldmVudFxuICAgICAgaWYgKHN0YXRlLmxvYWRlZCkge1xuICAgICAgICB0aGlzLmNhbGxMb2FkZWRDYWxsYmFjayhzdGF0ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjYWxsTG9hZGVkQ2FsbGJhY2soc3RhdGU6IEltYWdlTG9hZGVyU3RhdGUpOiB2b2lkIHtcbiAgICBzdGF0ZS5sb2FkZWRDYWxsYmFjayhzdGF0ZS51cmwsIHN0YXRlLndpZHRoLCBzdGF0ZS5oZWlnaHQpO1xuICB9XG59XG4iLCJpbXBvcnQgdm9jYWJ1bGFyeURlIGZyb20gJy4vbGFuZ3VhZ2VzL2RlLmpzb24nO1xuaW1wb3J0IHZvY2FidWxhcnlFbiBmcm9tICcuL2xhbmd1YWdlcy9lbi5qc29uJztcbmltcG9ydCB2b2NhYnVsYXJ5RXMgZnJvbSAnLi9sYW5ndWFnZXMvZXMuanNvbic7XG5pbXBvcnQgeyBMb2NhbGl6YXRpb25Db25maWcgfSBmcm9tICcuLi91aW1hbmFnZXIuanMnO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdFZvY2FidWxhcmllczogVm9jYWJ1bGFyaWVzID0ge1xuICAnZW4nOiB2b2NhYnVsYXJ5RW4sXG4gICdkZSc6IHZvY2FidWxhcnlEZSxcbiAgJ2VzJzogdm9jYWJ1bGFyeUVzLFxufTtcblxuY29uc3QgZGVmYXVsdExvY2FsaXphdGlvbkNvbmZpZzogTG9jYWxpemF0aW9uQ29uZmlnID0ge1xuICBsYW5ndWFnZTogJ2VuJyxcbiAgdm9jYWJ1bGFyaWVzOiBkZWZhdWx0Vm9jYWJ1bGFyaWVzLFxufTtcblxudHlwZSBMb2NhbGl6ZXIgPSAoKSA9PiBzdHJpbmc7XG5leHBvcnQgdHlwZSBMb2NhbGl6YWJsZVRleHQgPSBzdHJpbmcgfCBMb2NhbGl6ZXI7XG5cbmludGVyZmFjZSBWb2NhYnVsYXJ5IHtcbiAgJ3NldHRpbmdzLnZpZGVvLnF1YWxpdHknOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5hdWRpby5xdWFsaXR5Jzogc3RyaW5nO1xuICAnc2V0dGluZ3MuYXVkaW8udHJhY2snOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5hdWRpby5tdXRlJzogc3RyaW5nO1xuICAnc2V0dGluZ3MuYXVkaW8udm9sdW1lJzogc3RyaW5nO1xuICAnc2V0dGluZ3Muc3VidGl0bGVzJzogc3RyaW5nO1xuICAnc2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuY29sb3InOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5vcGFjaXR5Jzogc3RyaW5nO1xuICAnc2V0dGluZ3Muc3VidGl0bGVzLmJhY2tncm91bmQuY29sb3InOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5zdWJ0aXRsZXMuYmFja2dyb3VuZC5vcGFjaXR5Jzogc3RyaW5nO1xuICAnc2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuc2l6ZSc6IHN0cmluZztcbiAgJ3NldHRpbmdzLnN1YnRpdGxlcy5jaGFyYWN0ZXJFZGdlJzogc3RyaW5nO1xuICAnc2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2UucmFpc2VkJzogc3RyaW5nO1xuICAnc2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2UuZGVwcmVzc2VkJzogc3RyaW5nO1xuICAnc2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2UudW5pZm9ybSc6IHN0cmluZztcbiAgJ3NldHRpbmdzLnN1YnRpdGxlcy5jaGFyYWN0ZXJFZGdlLmRyb3BzaGFkb3dlZCc6IHN0cmluZztcbiAgJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseSc6IHN0cmluZztcbiAgJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5tb25vc3BhY2Vkc2VyaWYnOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkucHJvcG9ydGlvbmFsc2VyaWYnOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkubW9ub3NwYWNlZHNhbnNzZXJpZic6IHN0cmluZztcbiAgJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5wcm9wb3J0aW9uYWxzYW5zc2VyaWYnOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkuY2FzdWFsJzogc3RyaW5nO1xuICAnc2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LmN1cnNpdmUnOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkuc21hbGxjYXBpdGFsJzogc3RyaW5nO1xuICAnc2V0dGluZ3Muc3VidGl0bGVzLndpbmRvdy5jb2xvcic6IHN0cmluZztcbiAgJ3NldHRpbmdzLnN1YnRpdGxlcy53aW5kb3cub3BhY2l0eSc6IHN0cmluZztcbiAgJ3BsYXknOiBzdHJpbmc7XG4gICdzZXR0aW5ncy50aW1lLmhvdXJzJzogc3RyaW5nO1xuICAnc2V0dGluZ3MudGltZS5taW51dGVzJzogc3RyaW5nO1xuICAnc2V0dGluZ3MudGltZS5zZWNvbmRzJzogc3RyaW5nO1xuICAnY29sb3JzLndoaXRlJzogc3RyaW5nO1xuICAnY29sb3JzLmJsYWNrJzogc3RyaW5nO1xuICAnY29sb3JzLnJlZCc6IHN0cmluZztcbiAgJ2NvbG9ycy5ncmVlbic6IHN0cmluZztcbiAgJ2NvbG9ycy5ibHVlJzogc3RyaW5nO1xuICAnY29sb3JzLmN5YW4nOiBzdHJpbmc7XG4gICdjb2xvcnMueWVsbG93Jzogc3RyaW5nO1xuICAnY29sb3JzLm1hZ2VudGEnOiBzdHJpbmc7XG4gICdwZXJjZW50Jzogc3RyaW5nO1xuICAnc2V0dGluZ3MnOiBzdHJpbmc7XG4gICdhZHMucmVtYWluaW5nVGltZSc6IHN0cmluZztcbiAgJ3BpY3R1cmVJblBpY3R1cmUnOiBzdHJpbmc7XG4gICdhcHBsZUFpcnBsYXknOiBzdHJpbmc7XG4gICdnb29nbGVDYXN0Jzogc3RyaW5nO1xuICAndnInOiBzdHJpbmc7XG4gICdvZmYnOiBzdHJpbmc7XG4gICdhdXRvJzogc3RyaW5nO1xuICAnYmFjayc6IHN0cmluZztcbiAgJ3Jlc2V0Jzogc3RyaW5nO1xuICAncmVwbGF5Jzogc3RyaW5nO1xuICAnbm9ybWFsJzogc3RyaW5nO1xuICAnZGVmYXVsdCc6IHN0cmluZztcbiAgJ29wZW4nOiBzdHJpbmc7XG4gICdjbG9zZSc6IHN0cmluZztcbiAgJ2Z1bGxzY3JlZW4nOiBzdHJpbmc7XG4gICdzcGVlZCc6IHN0cmluZztcbiAgJ3BsYXlQYXVzZSc6IHN0cmluZztcbiAgJ2xpdmUnOiBzdHJpbmc7XG4gICdzdWJ0aXRsZS5leGFtcGxlJzogc3RyaW5nO1xuICAnc3VidGl0bGUuc2VsZWN0Jzogc3RyaW5nO1xuICAncGxheWluZ09uJzogc3RyaW5nO1xuICAnY29ubmVjdGluZ1RvJzogc3RyaW5nO1xuICAnd2F0ZXJtYXJrTGluayc6IHN0cmluZztcbiAgJ2NvbnRyb2xCYXInOiBzdHJpbmc7XG4gICdwbGF5ZXInOiBzdHJpbmc7XG4gICdzZWVrQmFyJzogc3RyaW5nO1xuICAnc2Vla0Jhci52YWx1ZSc6IHN0cmluZztcbiAgJ3NlZWtCYXIudGltZXNoaWZ0Jzogc3RyaW5nO1xuICAnc2Vla0Jhci5kdXJhdGlvblRleHQnOiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIEN1c3RvbVZvY2FidWxhcnk8Vj4gPSBWICYgUGFydGlhbDxWb2NhYnVsYXJ5PjtcblxuZXhwb3J0IGludGVyZmFjZSBWb2NhYnVsYXJpZXMge1xuICBba2V5OiBzdHJpbmddOiBDdXN0b21Wb2NhYnVsYXJ5PFJlY29yZDxzdHJpbmcsIHN0cmluZz4+O1xufVxuXG5jbGFzcyBJMThuIHtcbiAgcHJpdmF0ZSBsYW5ndWFnZTogc3RyaW5nO1xuICBwcml2YXRlIHZvY2FidWxhcnk6IEN1c3RvbVZvY2FidWxhcnk8UmVjb3JkPHN0cmluZywgc3RyaW5nPj47XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBMb2NhbGl6YXRpb25Db25maWcpIHtcbiAgICB0aGlzLnNldENvbmZpZyhjb25maWcpO1xuICB9XG5cbiAgcHVibGljIHNldENvbmZpZyhjb25maWc6IExvY2FsaXphdGlvbkNvbmZpZykge1xuICAgIGNvbnN0IG1lcmdlZENvbmZpZyA9IHsgLi4uZGVmYXVsdExvY2FsaXphdGlvbkNvbmZpZywgLi4uY29uZmlnIH07XG4gICAgY29uc3QgZGV0ZWN0QnJvd3Nlckxhbmd1YWdlID0gbWVyZ2VkQ29uZmlnLmxhbmd1YWdlID09PSAnYXV0byc7XG4gICAgY29uc3Qgdm9jYWJ1bGFyaWVzID0gdGhpcy5tZXJnZVZvY2FidWxhcmllc1dpdGhEZWZhdWx0Vm9jYWJ1bGFyaWVzKG1lcmdlZENvbmZpZy52b2NhYnVsYXJpZXMpO1xuICAgIHRoaXMuaW5pdGlhbGl6ZUxhbmd1YWdlKG1lcmdlZENvbmZpZy5sYW5ndWFnZSwgZGV0ZWN0QnJvd3Nlckxhbmd1YWdlLCB2b2NhYnVsYXJpZXMpO1xuICAgIHRoaXMuaW5pdGlhbGl6ZVZvY2FidWxhcnkodm9jYWJ1bGFyaWVzKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGNvbnRhaW5zTGFuZ3VhZ2Uodm9jYWJ1bGFyaWVzOiBWb2NhYnVsYXJpZXMsIGxhbmd1YWdlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdm9jYWJ1bGFyaWVzLmhhc093blByb3BlcnR5KGxhbmd1YWdlKTtcbiAgfVxuXG4gIHByaXZhdGUgbWVyZ2VWb2NhYnVsYXJpZXNXaXRoRGVmYXVsdFZvY2FidWxhcmllcyh2b2NhYnVsYXJpZXM6IFZvY2FidWxhcmllcyA9IHt9KSB7XG4gICAgY29uc3QgcmF3Vm9jYWJ1bGFyaWVzOiBWb2NhYnVsYXJpZXMgPSB7IC4uLmRlZmF1bHRWb2NhYnVsYXJpZXMsIC4uLnZvY2FidWxhcmllcyB9O1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhyYXdWb2NhYnVsYXJpZXMpLnJlZHVjZSgobWVyZ2VkVm9jYWJ1bGFyaWVzLCBsYW5ndWFnZSkgPT4ge1xuICAgICAgbGV0IHZvY2FidWxhcnkgPSByYXdWb2NhYnVsYXJpZXNbbGFuZ3VhZ2VdO1xuICAgICAgaWYgKEkxOG4uY29udGFpbnNMYW5ndWFnZShkZWZhdWx0Vm9jYWJ1bGFyaWVzLCBsYW5ndWFnZSkgJiYgSTE4bi5jb250YWluc0xhbmd1YWdlKHZvY2FidWxhcmllcywgbGFuZ3VhZ2UpKSB7XG4gICAgICAgIHZvY2FidWxhcnkgPSB7IC4uLmRlZmF1bHRWb2NhYnVsYXJpZXNbbGFuZ3VhZ2VdLCAuLi52b2NhYnVsYXJpZXNbbGFuZ3VhZ2VdIH07XG4gICAgICB9XG4gICAgICByZXR1cm4geyAuLi5tZXJnZWRWb2NhYnVsYXJpZXMsIFtsYW5ndWFnZV06IHZvY2FidWxhcnkgfTtcbiAgICB9LCB7fSk7XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemVMYW5ndWFnZShcbiAgICBsYW5ndWFnZTogc3RyaW5nLFxuICAgIGJyb3dzZXJMYW5ndWFnZURldGVjdGlvbkVuYWJsZWQ6IGJvb2xlYW4sXG4gICAgdm9jYWJ1bGFyaWVzOiBWb2NhYnVsYXJpZXMsXG4gICkge1xuICAgIGlmIChicm93c2VyTGFuZ3VhZ2VEZXRlY3Rpb25FbmFibGVkKSB7XG4gICAgICBjb25zdCB1c2VyTGFuZ3VhZ2UgPSB3aW5kb3cubmF2aWdhdG9yLmxhbmd1YWdlO1xuXG4gICAgICBpZiAoSTE4bi5jb250YWluc0xhbmd1YWdlKHZvY2FidWxhcmllcywgdXNlckxhbmd1YWdlKSkge1xuICAgICAgICB0aGlzLmxhbmd1YWdlID0gdXNlckxhbmd1YWdlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBzaG9ydGVuZWRVc2VyTGFuZ3VhZ2UgPSB1c2VyTGFuZ3VhZ2Uuc2xpY2UoMCwgMik7XG4gICAgICBpZiAoSTE4bi5jb250YWluc0xhbmd1YWdlKHZvY2FidWxhcmllcywgc2hvcnRlbmVkVXNlckxhbmd1YWdlKSkge1xuICAgICAgICB0aGlzLmxhbmd1YWdlID0gc2hvcnRlbmVkVXNlckxhbmd1YWdlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sYW5ndWFnZSA9IGxhbmd1YWdlO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0aWFsaXplVm9jYWJ1bGFyeSh2b2NhYnVsYXJpZXM6IFZvY2FidWxhcmllcykge1xuICAgIHRoaXMudm9jYWJ1bGFyeSA9IFsnZW4nLCB0aGlzLmxhbmd1YWdlXVxuICAgICAgLnJlZHVjZSgodm9jYWIsIGxhbmcpID0+ICh7IC4uLnZvY2FiLCAuLi4odm9jYWJ1bGFyaWVzW2xhbmddIHx8IHt9KSB9KSwge30pO1xuICB9XG5cbiAgcHJpdmF0ZSByZXBsYWNlVmFyaWFibGVXaXRoUGxhY2Vob2xkZXJJZkV4aXN0cyh0ZXh0OiBzdHJpbmcsIGNvbmZpZzogYW55KSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9IHRleHQubWF0Y2gobmV3IFJlZ0V4cCgne1thLXpBLVowLTldK30nLCAnZycpKTtcbiAgICBpZiAobWF0Y2hlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaGVzXG4gICAgICAubWFwKChtOiBzdHJpbmcpID0+ICh7IG1hdGNoOiBtLCBrZXk6IG0uc2xpY2UoMSwgLTEpIH0pKVxuICAgICAgLnJlZHVjZSgoc3RyLCB7IGtleSwgbWF0Y2ggfSkgPT4gY29uZmlnLmhhc093blByb3BlcnR5KGtleSkgPyBzdHIucmVwbGFjZShtYXRjaCwgY29uZmlnW2tleV0pIDogc3RyLCB0ZXh0KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRMb2NhbGl6ZXI8ViBleHRlbmRzIEN1c3RvbVZvY2FidWxhcnk8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4gPSBDdXN0b21Wb2NhYnVsYXJ5PFJlY29yZDxzdHJpbmcsIHN0cmluZz4+PihcbiAgICBrZXk6IGtleW9mIFYsXG4gICAgY29uZmlnPzogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVtYmVyPixcbiAgKTogTG9jYWxpemVyIHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKGtleSA9PSBudWxsKSB7IC8vIGJlY2F1c2Ugc29tZXRpbWVzIHdlIGNhbGwgdG9Eb21FbGVtZW50KCkgd2l0aG91dCBjb25maWd1cmluZyB0aGUgY29tcG9uZW50IG9yIHNldHRpbmcgdGV4dC4uLlxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgbGV0IHZvY2FidWxhcnlTdHJpbmcgPSB0aGlzLnZvY2FidWxhcnlba2V5IGFzIHN0cmluZ107XG5cbiAgICAgIGlmICh2b2NhYnVsYXJ5U3RyaW5nID09IG51bGwpIHtcbiAgICAgICAgdm9jYWJ1bGFyeVN0cmluZyA9IGtleSBhcyBzdHJpbmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICB2b2NhYnVsYXJ5U3RyaW5nID0gdGhpcy5yZXBsYWNlVmFyaWFibGVXaXRoUGxhY2Vob2xkZXJJZkV4aXN0cyh2b2NhYnVsYXJ5U3RyaW5nLCBjb25maWcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdm9jYWJ1bGFyeVN0cmluZztcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIHBlcmZvcm1Mb2NhbGl6YXRpb24odGV4dDogTG9jYWxpemFibGVUZXh0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0ZXh0ID09PSAnZnVuY3Rpb24nID8gdGV4dCgpIDogdGV4dDtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgaTE4biA9IG5ldyBJMThuKGRlZmF1bHRMb2NhbGl6YXRpb25Db25maWcpO1xuIiwibW9kdWxlLmV4cG9ydHM9e1xuICBcInNldHRpbmdzLnZpZGVvLnF1YWxpdHlcIjogXCJWaWRlb3F1YWxpdMOkdFwiLFxuICBcInNldHRpbmdzLmF1ZGlvLnF1YWxpdHlcIjogXCJBdWRpb3F1YWxpdMOkdFwiLFxuICBcInNldHRpbmdzLmF1ZGlvLnRyYWNrXCI6IFwiQXVkaW9zcHVyXCIsXG4gIFwic3BlZWRcIjogXCJHZXNjaHdpbmRpZ2tlaXRcIixcbiAgXCJwbGF5XCI6IFwiQWJzcGllbGVuXCIsXG4gIFwicGF1c2VcIjogXCJQYXVzZVwiLFxuICBcInBsYXlQYXVzZVwiOiBcIkFic3BpZWxlbi9QYXVzZVwiLFxuICBcIm9wZW5cIjogXCLDtmZmbmVuXCIsXG4gIFwiY2xvc2VcIjogXCJTY2hsaWXDn2VuXCIsXG4gIFwic2V0dGluZ3MuYXVkaW8ubXV0ZVwiOiBcIlN0dW1tc2NoYWx0dW5nXCIsXG4gIFwic2V0dGluZ3MuYXVkaW8udm9sdW1lXCI6IFwiTGF1dHN0w6Rya2VcIixcbiAgXCJwaWN0dXJlSW5QaWN0dXJlXCI6IFwiQmlsZCBpbSBCaWxkXCIsXG4gIFwiYXBwbGVBaXJwbGF5XCI6IFwiQXBwbGUgQWlyUGxheVwiLFxuICBcImdvb2dsZUNhc3RcIjogXCJHb29nbGUgQ2FzdFwiLFxuICBcInZyXCI6IFwiVlJcIixcbiAgXCJzZXR0aW5nc1wiOiBcIkVpbnN0ZWxsdW5nZW5cIixcbiAgXCJmdWxsc2NyZWVuXCI6IFwiVm9sbGJpbGRcIixcbiAgXCJvZmZcIjogXCJhdXNcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXNcIjogXCJVbnRlcnRpdGVsXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuc2l6ZVwiOiBcIkdyw7bDn2VcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHlcIjogXCJTY2hyaWZ0YXJ0XCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuY29sb3JcIjogXCJGYXJiZVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250Lm9wYWNpdHlcIjogXCJEZWNra3JhZnRcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZVwiOiBcIlLDpG5kZXJcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuYmFja2dyb3VuZC5jb2xvclwiOiBcIkhpbnRlcmdydW5kZmFyYmVcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuYmFja2dyb3VuZC5vcGFjaXR5XCI6IFwiSGludGVyZ3J1bmRkZWNra3JhZnRcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMud2luZG93LmNvbG9yXCI6IFwiSGludGVyZ3J1bmRmYXJiZVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy53aW5kb3cub3BhY2l0eVwiOiBcIkhpbnRlcmdydW5kZGVja2tyYWZ0XCIsXG4gIFwic2V0dGluZ3MudGltZS5ob3Vyc1wiOiBcIlN0dW5kZW5cIixcbiAgXCJzZXR0aW5ncy50aW1lLm1pbnV0ZXNcIjogXCJNaW51dGVuXCIsXG4gIFwic2V0dGluZ3MudGltZS5zZWNvbmRzXCI6IFwiU2VrdW5kZW5cIixcbiAgXCJiYWNrXCI6IFwiWnVyw7xja1wiLFxuICBcInJlc2V0XCI6IFwiWnVyw7xja3NldHplblwiLFxuICBcInJlcGxheVwiOiBcIldpZWRlcmhvbGVuXCIsXG4gIFwiYWRzLnJlbWFpbmluZ1RpbWVcIjogXCJEaWVzZSBBbnplaWdlIGVuZGV0IGluIHtyZW1haW5pbmdUaW1lfSBTZWt1bmRlblwiLFxuICBcImRlZmF1bHRcIjogXCJzdGFuZGFyZFwiLFxuICBcImNvbG9ycy53aGl0ZVwiOiBcIndlacOfXCIsXG4gIFwiY29sb3JzLmJsYWNrXCI6IFwic2Nod2FyelwiLFxuICBcImNvbG9ycy5yZWRcIjogXCJyb3RcIixcbiAgXCJjb2xvcnMuZ3JlZW5cIjogXCJncsO8blwiLFxuICBcImNvbG9ycy5ibHVlXCI6IFwiYmxhdVwiLFxuICBcImNvbG9ycy55ZWxsb3dcIjogXCJnZWxiXCIsXG4gIFwic3VidGl0bGUuZXhhbXBsZVwiOiBcIkJlaXNwaWVsIFVudGVydGl0ZWxcIixcbiAgXCJzdWJ0aXRsZS5zZWxlY3RcIjogXCJVbnRlcnRpdGVsIGF1c3fDpGhsZW5cIixcbiAgXCJwbGF5aW5nT25cIjogXCJTcGllbHQgYXVmIDxzdHJvbmc+e2Nhc3REZXZpY2VOYW1lfTwvc3Ryb25nPlwiLFxuICBcImNvbm5lY3RpbmdUb1wiOiBcIlZlcmJpbmR1bmcgbWl0IDxzdHJvbmc+e2Nhc3REZXZpY2VOYW1lfTwvc3Ryb25nPiB3aXJkIGhlcmdlc3RlbGx0Li4uXCIsXG4gIFwid2F0ZXJtYXJrTGlua1wiOiBcIkxpbmsgenVtIEhvbWVwYWdlXCIsXG4gIFwiY29udHJvbEJhclwiOiBcIlZpZGVvcGxheWVyIEtvbnRyb2xsZW5cIixcbiAgXCJwbGF5ZXJcIjogXCJWaWRlbyBwbGF5ZXJcIixcbiAgXCJzZWVrQmFyXCI6IFwiVmlkZW8tVGltZWxpbmVcIixcbiAgXCJzZWVrQmFyLnZhbHVlXCI6IFwiV2VydFwiLFxuICBcInNlZWtCYXIudGltZXNoaWZ0XCI6IFwiVGltZXNoaWZ0XCIsXG4gIFwic2Vla0Jhci5kdXJhdGlvblRleHRcIjogXCJhdXNcIlxufVxuIiwibW9kdWxlLmV4cG9ydHM9e1xuICBcInNldHRpbmdzLnZpZGVvLnF1YWxpdHlcIjogXCJWaWRlbyBRdWFsaXR5XCIsXG4gIFwic2V0dGluZ3MuYXVkaW8ucXVhbGl0eVwiOiBcIkF1ZGlvIFF1YWxpdHlcIixcbiAgXCJzZXR0aW5ncy5hdWRpby50cmFja1wiOiBcIkF1ZGlvIFRyYWNrXCIsXG4gIFwic2V0dGluZ3MuYXVkaW8ubXV0ZVwiIDogXCJNdXRlXCIsXG4gIFwic2V0dGluZ3MuYXVkaW8udm9sdW1lXCIgOiBcIlZvbHVtZVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy53aW5kb3cuY29sb3JcIiA6IFwiV2luZG93IGNvbG9yXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLndpbmRvdy5vcGFjaXR5XCIgOiBcIldpbmRvdyBvcGFjaXR5XCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzXCIgOiBcIlN1YnRpdGxlc1wiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LmNvbG9yXCIgOiBcIkZvbnQgY29sb3JcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5vcGFjaXR5XCIgOiBcIkZvbnQgb3BhY2l0eVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5iYWNrZ3JvdW5kLmNvbG9yXCIgOiBcIkJhY2tncm91bmQgY29sb3JcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuYmFja2dyb3VuZC5vcGFjaXR5XCI6IFwiQmFja2dyb3VuZCBvcGFjaXR5XCIsXG4gIFwiY29sb3JzLndoaXRlXCI6IFwid2hpdGVcIixcbiAgXCJjb2xvcnMuYmxhY2tcIjogXCJibGFja1wiLFxuICBcImNvbG9ycy5yZWRcIjogXCJyZWRcIixcbiAgXCJjb2xvcnMuZ3JlZW5cIjogXCJncmVlblwiLFxuICBcImNvbG9ycy5ibHVlXCI6IFwiYmx1ZVwiLFxuICBcImNvbG9ycy5jeWFuXCI6IFwiY3lhblwiLFxuICBcImNvbG9ycy55ZWxsb3dcIjogXCJ5ZWxsb3dcIixcbiAgXCJjb2xvcnMubWFnZW50YVwiOiBcIm1hZ2VudGFcIixcbiAgXCJwZXJjZW50XCI6IFwie3ZhbHVlfSVcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5zaXplXCI6IFwiRm9udCBzaXplXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2VcIjogXCJDaGFyYWN0ZXIgZWRnZVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5jaGFyYWN0ZXJFZGdlLnJhaXNlZFwiOiBcInJhaXNlZFwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5jaGFyYWN0ZXJFZGdlLmRlcHJlc3NlZFwiOiBcImRlcHJlc3NlZFwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5jaGFyYWN0ZXJFZGdlLnVuaWZvcm1cIjogXCJ1bmlmb3JtXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2UuZHJvcHNoYWRvd2VkXCI6IFwiZHJvcCBzaGFkb3dlZFwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseVwiOiBcIkZvbnQgZmFtaWx5XCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5Lm1vbm9zcGFjZWRzZXJpZlwiOiBcIm1vbm9zcGFjZWQgc2VyaWZcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkucHJvcG9ydGlvbmFsc2VyaWZcIjogXCJwcm9wb3J0aW9uYWwgc2VyaWZcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkubW9ub3NwYWNlZHNhbnNzZXJpZlwiOiBcIm1vbm9zcGFjZWQgc2FucyBzZXJpZlwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5wcm9wb3J0aW9uYWxzYW5zc2VyaWZcIjogXCJwcm9wb3J0aW9uYWwgc2FucyBzZXJpZlwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5jYXN1YWxcIjogXCJjYXN1YWxcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkuY3Vyc2l2ZVwiOiBcImN1cnNpdmVcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkuc21hbGxjYXBpdGFsXCI6IFwic21hbGwgY2FwaXRhbFwiLFxuICBcInNldHRpbmdzLnRpbWUuaG91cnNcIjogXCJIb3Vyc1wiLFxuICBcInNldHRpbmdzLnRpbWUubWludXRlc1wiOiBcIk1pbnV0ZXNcIixcbiAgXCJzZXR0aW5ncy50aW1lLnNlY29uZHNcIjogXCJTZWNvbmRzXCIsXG4gIFwiYWRzLnJlbWFpbmluZ1RpbWVcIjogXCJUaGlzIGFkIHdpbGwgZW5kIGluIHtyZW1haW5pbmdUaW1lfSBzZWNvbmRzLlwiLFxuICBcInNldHRpbmdzXCI6IFwiU2V0dGluZ3NcIixcbiAgXCJmdWxsc2NyZWVuXCIgOiBcIkZ1bGxzY3JlZW5cIixcbiAgXCJzcGVlZFwiOiBcIlNwZWVkXCIsXG4gIFwicGxheVBhdXNlXCIgOiBcIlBsYXkvUGF1c2VcIixcbiAgXCJwbGF5XCI6IFwiUGxheVwiLFxuICBcInBhdXNlXCI6IFwiUGF1c2VcIixcbiAgXCJvcGVuXCI6IFwib3BlblwiLFxuICBcImNsb3NlXCI6IFwiQ2xvc2VcIixcbiAgXCJwaWN0dXJlSW5QaWN0dXJlXCI6IFwiUGljdHVyZS1pbi1QaWN0dXJlXCIsXG4gIFwiYXBwbGVBaXJwbGF5XCIgOiBcIkFwcGxlIEFpclBsYXlcIixcbiAgXCJnb29nbGVDYXN0XCI6IFwiR29vZ2xlIENhc3RcIixcbiAgXCJ2clwiIDogXCJWUlwiLFxuICBcIm9mZlwiOiBcIm9mZlwiLFxuICBcImF1dG9cIjogXCJhdXRvXCIsXG4gIFwiYmFja1wiIDogXCJCYWNrXCIsXG4gIFwicmVzZXRcIjogXCJSZXNldFwiLFxuICBcInJlcGxheVwiOiBcIlJlcGxheVwiLFxuICBcIm5vcm1hbFwiOiBcIm5vcm1hbFwiLFxuICBcImRlZmF1bHRcIjogXCJkZWZhdWx0XCIsXG4gIFwibGl2ZVwiOiBcIkxpdmVcIixcbiAgXCJzdWJ0aXRsZS5leGFtcGxlXCI6IFwiZXhhbXBsZSBzdWJ0aXRsZVwiLFxuICBcInN1YnRpdGxlLnNlbGVjdFwiOiBcIlNlbGVjdCBzdWJ0aXRsZVwiLFxuICBcInBsYXlpbmdPblwiOiBcIlBsYXlpbmcgb24gPHN0cm9uZz57Y2FzdERldmljZU5hbWV9PC9zdHJvbmc+XCIsXG4gIFwiY29ubmVjdGluZ1RvXCI6IFwiQ29ubmVjdGluZyB0byA8c3Ryb25nPntjYXN0RGV2aWNlTmFtZX08L3N0cm9uZz4uLi5cIixcbiAgXCJ3YXRlcm1hcmtMaW5rXCI6IFwiTGluayB0byBIb21lcGFnZVwiLFxuICBcImNvbnRyb2xCYXJcIjogXCJWaWRlbyBwbGF5ZXIgY29udHJvbHNcIixcbiAgXCJwbGF5ZXJcIjogXCJWaWRlbyBwbGF5ZXJcIixcbiAgXCJzZWVrQmFyXCI6IFwiVmlkZW8gdGltZWxpbmVcIixcbiAgXCJzZWVrQmFyLnZhbHVlXCI6IFwiVmFsdWVcIixcbiAgXCJzZWVrQmFyLnRpbWVzaGlmdFwiOiBcIlRpbWVzaGlmdFwiLFxuICBcInNlZWtCYXIuZHVyYXRpb25UZXh0XCI6IFwib3V0IG9mXCJcbn1cbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJzZXR0aW5ncy52aWRlby5xdWFsaXR5XCI6IFwiQ2FsaWRhZCBkZSBWaWRlb1wiLFxuICBcInNldHRpbmdzLmF1ZGlvLnF1YWxpdHlcIjogXCJDYWxpZGFkIGRlIEF1ZGlvXCIsXG4gIFwic2V0dGluZ3MuYXVkaW8udHJhY2tcIjogXCJQaXN0YSBkZSBBdWRpb1wiLFxuICBcInNldHRpbmdzLmF1ZGlvLm11dGVcIiA6IFwiU2lsZW5jaW9cIixcbiAgXCJzZXR0aW5ncy5hdWRpby52b2x1bWVcIiA6IFwiVm9sdW1lblwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy53aW5kb3cuY29sb3JcIiA6IFwiY29sb3IgZGUgVmVudGFuYVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy53aW5kb3cub3BhY2l0eVwiIDogXCJvcGFjaWRhZCBkZSBWZW50YW5hXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzXCIgOiBcIlN1YnTDrXR1bG9zXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuY29sb3JcIiA6IFwiY29sb3IgZGUgRnVlbnRlXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQub3BhY2l0eVwiIDogXCJvcGFjaWRhZCBkZSBGdWVudGVcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuYmFja2dyb3VuZC5jb2xvclwiIDogXCJjb2xvciBkZSBGb25kb1wiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5iYWNrZ3JvdW5kLm9wYWNpdHlcIjogXCJvcGFjaWRhZCBkZSBGb25kb1wiLFxuICBcImNvbG9ycy53aGl0ZVwiOiBcImJsYW5jb1wiLFxuICBcImNvbG9ycy5ibGFja1wiOiBcIm5lZ3JvXCIsXG4gIFwiY29sb3JzLnJlZFwiOiBcInJvam9cIixcbiAgXCJjb2xvcnMuZ3JlZW5cIjogXCJ2ZXJkZVwiLFxuICBcImNvbG9ycy5ibHVlXCI6IFwiYXp1bFwiLFxuICBcImNvbG9ycy5jeWFuXCI6IFwiY2lhblwiLFxuICBcImNvbG9ycy55ZWxsb3dcIjogXCJhbWFyaWxsb1wiLFxuICBcImNvbG9ycy5tYWdlbnRhXCI6IFwibWFnZW50YVwiLFxuICBcInBlcmNlbnRcIjogXCJ7dmFsdWV9JVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LnNpemVcIjogXCJ0YW1hw7FvIGRlIEZ1ZW50ZVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5jaGFyYWN0ZXJFZGdlXCI6IFwiYm9yZGUgZGVsIENhcmFjdGVyXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2UucmFpc2VkXCI6IFwiYWx6YWRvXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2UuZGVwcmVzc2VkXCI6IFwiZGlzY3JldG9cIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZS51bmlmb3JtXCI6IFwidW5pZm9ybWVcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZS5kcm9wc2hhZG93ZWRcIjogXCJzb21icmVhZG9cIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHlcIjogXCJ0aXBvIGRlIEZ1ZW50ZVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5tb25vc3BhY2Vkc2VyaWZcIjogXCJtb25vc3BhY2VkIHNlcmlmXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LnByb3BvcnRpb25hbHNlcmlmXCI6IFwicHJvcG9ydGlvbmFsIHNlcmlmXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5Lm1vbm9zcGFjZWRzYW5zc2VyaWZcIjogXCJtb25vc3BhY2VkIHNhbnMgc2VyaWZcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkucHJvcG9ydGlvbmFsc2Fuc3NlcmlmXCI6IFwicHJvcG9ydGlvbmFsIHNhbnMgc2VyaWZcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkuY2FzdWFsXCI6IFwiY2FzdWFsXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LmN1cnNpdmVcIjogXCJjdXJzaXZhXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LnNtYWxsY2FwaXRhbFwiOiBcInNtYWxsIGNhcGl0YWxcIixcbiAgXCJzZXR0aW5ncy50aW1lLmhvdXJzXCI6IFwiSG9yYXNcIixcbiAgXCJzZXR0aW5ncy50aW1lLm1pbnV0ZXNcIjogXCJNaW51dG9zXCIsXG4gIFwic2V0dGluZ3MudGltZS5zZWNvbmRzXCI6IFwiU2VndW5kb3NcIixcbiAgXCJhZHMucmVtYWluaW5nVGltZVwiOiBcIkVzdGUgYW51bmNpbyBhY2FiYXLDoSBlbiB7cmVtYWluaW5nVGltZX0gc2VndW5kb3MuXCIsXG4gIFwic2V0dGluZ3NcIjogXCJDb25maWd1cmFjacOzblwiLFxuICBcImZ1bGxzY3JlZW5cIiA6IFwiUGFudGFsbGEgQ29tcGxldGFcIixcbiAgXCJzcGVlZFwiOiBcIlZlbG9jaWRhZFwiLFxuICBcInBsYXlQYXVzZVwiIDogXCJSZXByb2R1Y2lyL1BhdXNhXCIsXG4gIFwicGxheVwiOiBcIlJlcHJvZHVjaXJcIixcbiAgXCJwYXVzZVwiOiBcIlBhdXNhXCIsXG4gIFwib3BlblwiOiBcIkFicmlyXCIsXG4gIFwiY2xvc2VcIjogXCJDZXJyYXJcIixcbiAgXCJwaWN0dXJlSW5QaWN0dXJlXCI6IFwiSW1hZ2VuIGVuIEltYWdlblwiLFxuICBcImFwcGxlQWlycGxheVwiIDogXCJBcHBsZSBBaXJQbGF5XCIsXG4gIFwiZ29vZ2xlQ2FzdFwiOiBcIkdvb2dsZSBDYXN0XCIsXG4gIFwidnJcIiA6IFwiVlJcIixcbiAgXCJvZmZcIjogXCJvZmZcIixcbiAgXCJhdXRvXCI6IFwiYXV0b1wiLFxuICBcImJhY2tcIiA6IFwiQXRyw6FzXCIsXG4gIFwicmVzZXRcIjogXCJSZWluaWNpYXJcIixcbiAgXCJyZXBsYXlcIjogXCJSZWJvYmluYXJcIixcbiAgXCJub3JtYWxcIjogXCJub3JtYWxcIixcbiAgXCJkZWZhdWx0XCI6IFwicHJlZGV0ZXJtaW5hZG9cIixcbiAgXCJsaXZlXCI6IFwiRGlyZWN0b1wiLFxuICBcInN1YnRpdGxlLmV4YW1wbGVcIjogXCJFamVtcGxvIGRlIFN1YnTDrXR1bG9cIixcbiAgXCJzdWJ0aXRsZS5zZWxlY3RcIjogXCJTZWxlY2Npb25hciBzdWJ0w610dWxvXCIsXG4gIFwicGxheWluZ09uXCI6IFwiUmVwcm9kdWNpZW5kbyBlbiA8c3Ryb25nPntjYXN0RGV2aWNlTmFtZX08L3N0cm9uZz5cIixcbiAgXCJjb25uZWN0aW5nVG9cIjogXCJDb25lY3RhbmRvIGEgPHN0cm9uZz57Y2FzdERldmljZU5hbWV9PC9zdHJvbmc+Li4uXCIsXG4gIFwid2F0ZXJtYXJrTGlua1wiOiBcIkVubGFjZSBhbCBpbmljaW9cIixcbiAgXCJjb250cm9sQmFyXCI6IFwiQ29udHJvbGVzIGRlbCBSZXByb2R1Y3RvclwiLFxuICBcInBsYXllclwiOiBcIlJlcHJvZHVjdG9yIGRlIFZpZGVvXCIsXG4gIFwic2Vla0JhclwiOiBcIkzDrW5lYSBkZSBUaWVtcG9cIixcbiAgXCJzZWVrQmFyLnZhbHVlXCI6IFwicG9zaWNpw7NuXCIsXG4gIFwic2Vla0Jhci50aW1lc2hpZnRcIjogXCJjYW1iaW8gZGUgcG9zaWNpw7NuXCIsXG4gIFwic2Vla0Jhci5kdXJhdGlvblRleHRcIjogXCJkZVwiXG59IiwiZXhwb3J0IGNvbnN0IHZlcnNpb246IHN0cmluZyA9ICd7e1ZFUlNJT059fSc7XG4vLyBNYW5hZ2VtZW50XG5leHBvcnQgeyBVSU1hbmFnZXIsIFVJSW5zdGFuY2VNYW5hZ2VyIH0gZnJvbSAnLi91aW1hbmFnZXInO1xuLy8gRmFjdG9yaWVzXG5leHBvcnQgeyBVSUZhY3RvcnkgfSBmcm9tICcuL3VpZmFjdG9yeSc7XG5leHBvcnQgeyBEZW1vRmFjdG9yeSB9IGZyb20gJy4vZGVtb2ZhY3RvcnknO1xuLy8gVXRpbHNcbmV4cG9ydCB7IEFycmF5VXRpbHMgfSBmcm9tICcuL2FycmF5dXRpbHMnO1xuZXhwb3J0IHsgU3RyaW5nVXRpbHMgfSBmcm9tICcuL3N0cmluZ3V0aWxzJztcbmV4cG9ydCB7IFBsYXllclV0aWxzIH0gZnJvbSAnLi9wbGF5ZXJ1dGlscyc7XG5leHBvcnQgeyBVSVV0aWxzIH0gZnJvbSAnLi91aXV0aWxzJztcbmV4cG9ydCB7IEJyb3dzZXJVdGlscyB9IGZyb20gJy4vYnJvd3NlcnV0aWxzJztcbmV4cG9ydCB7IFN0b3JhZ2VVdGlscyB9IGZyb20gJy4vc3RvcmFnZXV0aWxzJztcbmV4cG9ydCB7IEVycm9yVXRpbHMgfSBmcm9tICcuL2Vycm9ydXRpbHMnO1xuLy8gTG9jYWxpemF0aW9uXG5leHBvcnQgeyBpMThuIH0gZnJvbSAnLi9sb2NhbGl6YXRpb24vaTE4bic7XG4vLyBTcGF0aWFsIE5hdmlnYXRpb25cbmV4cG9ydCB7IFNwYXRpYWxOYXZpZ2F0aW9uIH0gZnJvbSAnLi9zcGF0aWFsbmF2aWdhdGlvbi9zcGF0aWFsbmF2aWdhdGlvbic7XG5leHBvcnQgeyBOYXZpZ2F0aW9uR3JvdXAgfSBmcm9tICcuL3NwYXRpYWxuYXZpZ2F0aW9uL25hdmlnYXRpb25ncm91cCc7XG5leHBvcnQgeyBSb290TmF2aWdhdGlvbkdyb3VwIH0gZnJvbSAnLi9zcGF0aWFsbmF2aWdhdGlvbi9yb290bmF2aWdhdGlvbmdyb3VwJztcbmV4cG9ydCB7IExpc3ROYXZpZ2F0aW9uR3JvdXAsIExpc3RPcmllbnRhdGlvbiB9IGZyb20gJy4vc3BhdGlhbG5hdmlnYXRpb24vTGlzdE5hdmlnYXRpb25Hcm91cCc7XG4vLyBDb21wb25lbnRzXG5leHBvcnQgeyBCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvYnV0dG9uJztcbmV4cG9ydCB7IENvbnRyb2xCYXIgfSBmcm9tICcuL2NvbXBvbmVudHMvY29udHJvbGJhcic7XG5leHBvcnQgeyBGdWxsc2NyZWVuVG9nZ2xlQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL2Z1bGxzY3JlZW50b2dnbGVidXR0b24nO1xuZXhwb3J0IHsgSHVnZVBsYXliYWNrVG9nZ2xlQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL2h1Z2VwbGF5YmFja3RvZ2dsZWJ1dHRvbic7XG5leHBvcnQgeyBQbGF5YmFja1RpbWVMYWJlbCwgUGxheWJhY2tUaW1lTGFiZWxNb2RlIH0gZnJvbSAnLi9jb21wb25lbnRzL3BsYXliYWNrdGltZWxhYmVsJztcbmV4cG9ydCB7IFBsYXliYWNrVG9nZ2xlQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL3BsYXliYWNrdG9nZ2xlYnV0dG9uJztcbmV4cG9ydCB7IFNlZWtCYXIgfSBmcm9tICcuL2NvbXBvbmVudHMvc2Vla2Jhcic7XG5leHBvcnQgeyBTZWxlY3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvc2VsZWN0Ym94JztcbmV4cG9ydCB7IEl0ZW1TZWxlY3Rpb25MaXN0IH0gZnJvbSAnLi9jb21wb25lbnRzL2l0ZW1zZWxlY3Rpb25saXN0JztcbmV4cG9ydCB7IFNldHRpbmdzUGFuZWwgfSBmcm9tICcuL2NvbXBvbmVudHMvc2V0dGluZ3NwYW5lbCc7XG5leHBvcnQgeyBTZXR0aW5nc1RvZ2dsZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9zZXR0aW5nc3RvZ2dsZWJ1dHRvbic7XG5leHBvcnQgeyBUb2dnbGVCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvdG9nZ2xlYnV0dG9uJztcbmV4cG9ydCB7IFZpZGVvUXVhbGl0eVNlbGVjdEJveCB9IGZyb20gJy4vY29tcG9uZW50cy92aWRlb3F1YWxpdHlzZWxlY3Rib3gnO1xuZXhwb3J0IHsgVm9sdW1lVG9nZ2xlQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL3ZvbHVtZXRvZ2dsZWJ1dHRvbic7XG5leHBvcnQgeyBWUlRvZ2dsZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy92cnRvZ2dsZWJ1dHRvbic7XG5leHBvcnQgeyBXYXRlcm1hcmsgfSBmcm9tICcuL2NvbXBvbmVudHMvd2F0ZXJtYXJrJztcbmV4cG9ydCB7IFVJQ29udGFpbmVyIH0gZnJvbSAnLi9jb21wb25lbnRzL3VpY29udGFpbmVyJztcbmV4cG9ydCB7IENvbnRhaW5lciB9IGZyb20gJy4vY29tcG9uZW50cy9jb250YWluZXInO1xuZXhwb3J0IHsgTGFiZWwgfSBmcm9tICcuL2NvbXBvbmVudHMvbGFiZWwnO1xuZXhwb3J0IHsgQXVkaW9RdWFsaXR5U2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL2F1ZGlvcXVhbGl0eXNlbGVjdGJveCc7XG5leHBvcnQgeyBBdWRpb1RyYWNrU2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL2F1ZGlvdHJhY2tzZWxlY3Rib3gnO1xuZXhwb3J0IHsgQ2FzdFN0YXR1c092ZXJsYXkgfSBmcm9tICcuL2NvbXBvbmVudHMvY2FzdHN0YXR1c292ZXJsYXknO1xuZXhwb3J0IHsgQ2FzdFRvZ2dsZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9jYXN0dG9nZ2xlYnV0dG9uJztcbmV4cG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9jb21wb25lbnQnO1xuZXhwb3J0IHsgRXJyb3JNZXNzYWdlT3ZlcmxheSB9IGZyb20gJy4vY29tcG9uZW50cy9lcnJvcm1lc3NhZ2VvdmVybGF5JztcbmV4cG9ydCB7IFJlY29tbWVuZGF0aW9uT3ZlcmxheSB9IGZyb20gJy4vY29tcG9uZW50cy9yZWNvbW1lbmRhdGlvbm92ZXJsYXknO1xuZXhwb3J0IHsgU2Vla0JhckxhYmVsIH0gZnJvbSAnLi9jb21wb25lbnRzL3NlZWtiYXJsYWJlbCc7XG5leHBvcnQgeyBTdWJ0aXRsZU92ZXJsYXkgfSBmcm9tICcuL2NvbXBvbmVudHMvc3VidGl0bGVvdmVybGF5JztcbmV4cG9ydCB7IFN1YnRpdGxlU2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2VsZWN0Ym94JztcbmV4cG9ydCB7IFRpdGxlQmFyIH0gZnJvbSAnLi9jb21wb25lbnRzL3RpdGxlYmFyJztcbmV4cG9ydCB7IFZvbHVtZUNvbnRyb2xCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvdm9sdW1lY29udHJvbGJ1dHRvbic7XG5leHBvcnQgeyBDbGlja092ZXJsYXkgfSBmcm9tICcuL2NvbXBvbmVudHMvY2xpY2tvdmVybGF5JztcbmV4cG9ydCB7IEFkU2tpcEJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9hZHNraXBidXR0b24nO1xuZXhwb3J0IHsgQWRNZXNzYWdlTGFiZWwgfSBmcm9tICcuL2NvbXBvbmVudHMvYWRtZXNzYWdlbGFiZWwnO1xuZXhwb3J0IHsgQWRDbGlja092ZXJsYXkgfSBmcm9tICcuL2NvbXBvbmVudHMvYWRjbGlja292ZXJsYXknO1xuZXhwb3J0IHsgUGxheWJhY2tTcGVlZFNlbGVjdEJveCB9IGZyb20gJy4vY29tcG9uZW50cy9wbGF5YmFja3NwZWVkc2VsZWN0Ym94JztcbmV4cG9ydCB7IEh1Z2VSZXBsYXlCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvaHVnZXJlcGxheWJ1dHRvbic7XG5leHBvcnQgeyBCdWZmZXJpbmdPdmVybGF5IH0gZnJvbSAnLi9jb21wb25lbnRzL2J1ZmZlcmluZ292ZXJsYXknO1xuZXhwb3J0IHsgQ2FzdFVJQ29udGFpbmVyIH0gZnJvbSAnLi9jb21wb25lbnRzL2Nhc3R1aWNvbnRhaW5lcic7XG5leHBvcnQgeyBQbGF5YmFja1RvZ2dsZU92ZXJsYXkgfSBmcm9tICcuL2NvbXBvbmVudHMvcGxheWJhY2t0b2dnbGVvdmVybGF5JztcbmV4cG9ydCB7IENsb3NlQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL2Nsb3NlYnV0dG9uJztcbmV4cG9ydCB7IE1ldGFkYXRhTGFiZWwsIE1ldGFkYXRhTGFiZWxDb250ZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL21ldGFkYXRhbGFiZWwnO1xuZXhwb3J0IHsgQWlyUGxheVRvZ2dsZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9haXJwbGF5dG9nZ2xlYnV0dG9uJztcbmV4cG9ydCB7IFZvbHVtZVNsaWRlciB9IGZyb20gJy4vY29tcG9uZW50cy92b2x1bWVzbGlkZXInO1xuZXhwb3J0IHsgUGljdHVyZUluUGljdHVyZVRvZ2dsZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9waWN0dXJlaW5waWN0dXJldG9nZ2xlYnV0dG9uJztcbmV4cG9ydCB7IFNwYWNlciB9IGZyb20gJy4vY29tcG9uZW50cy9zcGFjZXInO1xuZXhwb3J0IHsgQmFja2dyb3VuZENvbG9yU2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3MvYmFja2dyb3VuZGNvbG9yc2VsZWN0Ym94JztcbmV4cG9ydCB7IEJhY2tncm91bmRPcGFjaXR5U2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3MvYmFja2dyb3VuZG9wYWNpdHlzZWxlY3Rib3gnO1xuZXhwb3J0IHsgQ2hhcmFjdGVyRWRnZVNlbGVjdEJveCB9IGZyb20gJy4vY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL2NoYXJhY3RlcmVkZ2VzZWxlY3Rib3gnO1xuZXhwb3J0IHsgRm9udENvbG9yU2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3MvZm9udGNvbG9yc2VsZWN0Ym94JztcbmV4cG9ydCB7IEZvbnRGYW1pbHlTZWxlY3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvc3VidGl0bGVzZXR0aW5ncy9mb250ZmFtaWx5c2VsZWN0Ym94JztcbmV4cG9ydCB7IEZvbnRPcGFjaXR5U2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3MvZm9udG9wYWNpdHlzZWxlY3Rib3gnO1xuZXhwb3J0IHsgRm9udFNpemVTZWxlY3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvc3VidGl0bGVzZXR0aW5ncy9mb250c2l6ZXNlbGVjdGJveCc7XG5leHBvcnQgeyBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvc3VidGl0bGVzZXR0aW5ncy9zdWJ0aXRsZXNldHRpbmdzZWxlY3Rib3gnO1xuZXhwb3J0IHsgU3VidGl0bGVTZXR0aW5nc0xhYmVsIH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3Mvc3VidGl0bGVzZXR0aW5nc2xhYmVsJztcbmV4cG9ydCB7IFdpbmRvd0NvbG9yU2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3Mvd2luZG93Y29sb3JzZWxlY3Rib3gnO1xuZXhwb3J0IHsgV2luZG93T3BhY2l0eVNlbGVjdEJveCB9IGZyb20gJy4vY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL3dpbmRvd29wYWNpdHlzZWxlY3Rib3gnO1xuZXhwb3J0IHsgU3VidGl0bGVTZXR0aW5nc1Jlc2V0QnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3Mvc3VidGl0bGVzZXR0aW5nc3Jlc2V0YnV0dG9uJztcbmV4cG9ydCB7IExpc3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvbGlzdGJveCc7XG5leHBvcnQgeyBTdWJ0aXRsZUxpc3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvc3VidGl0bGVsaXN0Ym94JztcbmV4cG9ydCB7IEF1ZGlvVHJhY2tMaXN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL2F1ZGlvdHJhY2tsaXN0Ym94JztcbmV4cG9ydCB7IFNldHRpbmdzUGFuZWxQYWdlIH0gZnJvbSAnLi9jb21wb25lbnRzL3NldHRpbmdzcGFuZWxwYWdlJztcbmV4cG9ydCB7IFNldHRpbmdzUGFuZWxQYWdlQmFja0J1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9zZXR0aW5nc3BhbmVscGFnZWJhY2tidXR0b24nO1xuZXhwb3J0IHsgU2V0dGluZ3NQYW5lbFBhZ2VPcGVuQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL3NldHRpbmdzcGFuZWxwYWdlb3BlbmJ1dHRvbic7XG5leHBvcnQgeyBTdWJ0aXRsZVNldHRpbmdzUGFuZWxQYWdlIH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3Mvc3VidGl0bGVzZXR0aW5nc3BhbmVscGFnZSc7XG5leHBvcnQgeyBTZXR0aW5nc1BhbmVsSXRlbSB9IGZyb20gJy4vY29tcG9uZW50cy9zZXR0aW5nc3BhbmVsaXRlbSc7XG5leHBvcnQgeyBSZXBsYXlCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvcmVwbGF5YnV0dG9uJztcblxuLy8gT2JqZWN0LmFzc2lnbiBwb2x5ZmlsbCBmb3IgRVM1L0lFOVxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZGUvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2Fzc2lnblxuaWYgKHR5cGVvZiBPYmplY3QuYXNzaWduICE9PSAnZnVuY3Rpb24nKSB7XG4gIE9iamVjdC5hc3NpZ24gPSBmdW5jdGlvbih0YXJnZXQ6IGFueSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpZiAodGFyZ2V0ID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdCcpO1xuICAgIH1cblxuICAgIHRhcmdldCA9IE9iamVjdCh0YXJnZXQpO1xuICAgIGZvciAobGV0IGluZGV4ID0gMTsgaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBsZXQgc291cmNlID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgIGlmIChzb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG59IiwiaW1wb3J0IHsgUGxheWVyQVBJLCBQbGF5ZXJFdmVudCwgUGxheWVyRXZlbnRCYXNlLCBQbGF5ZXJFdmVudENhbGxiYWNrIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IFdyYXBwZWRQbGF5ZXIgfSBmcm9tICcuL3VpbWFuYWdlcic7XG5cbmV4cG9ydCBlbnVtIE1vYmlsZVYzUGxheWVyRXZlbnQge1xuICBTb3VyY2VFcnJvciA9ICdzb3VyY2VlcnJvcicsXG4gIFBsYXllckVycm9yID0gJ3BsYXllcmVycm9yJyxcbiAgUGxheWxpc3RUcmFuc2l0aW9uID0gJ3BsYXlsaXN0dHJhbnNpdGlvbicsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9iaWxlVjNQbGF5ZXJFcnJvckV2ZW50IGV4dGVuZHMgUGxheWVyRXZlbnRCYXNlIHtcbiAgY29kZTogbnVtYmVyO1xuICBtZXNzYWdlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9iaWxlVjNTb3VyY2VFcnJvckV2ZW50IGV4dGVuZHMgUGxheWVyRXZlbnRCYXNlIHtcbiAgY29kZTogbnVtYmVyO1xuICBtZXNzYWdlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIE1vYmlsZVYzUGxheWVyRXZlbnRUeXBlID0gUGxheWVyRXZlbnQgfCBNb2JpbGVWM1BsYXllckV2ZW50O1xuXG5leHBvcnQgaW50ZXJmYWNlIE1vYmlsZVYzUGxheWVyQVBJIGV4dGVuZHMgUGxheWVyQVBJIHtcbiAgb24oZXZlbnRUeXBlOiBNb2JpbGVWM1BsYXllckV2ZW50VHlwZSwgY2FsbGJhY2s6IFBsYXllckV2ZW50Q2FsbGJhY2spOiB2b2lkO1xuICBleHBvcnRzOiBQbGF5ZXJBUElbJ2V4cG9ydHMnXSAmIHsgUGxheWVyRXZlbnQ6IE1vYmlsZVYzUGxheWVyRXZlbnRUeXBlIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc01vYmlsZVYzUGxheWVyQVBJKHBsYXllcjogV3JhcHBlZFBsYXllciB8IFBsYXllckFQSSB8IE1vYmlsZVYzUGxheWVyQVBJKTogcGxheWVyIGlzIE1vYmlsZVYzUGxheWVyQVBJIHtcbiAgZm9yIChjb25zdCBrZXkgaW4gTW9iaWxlVjNQbGF5ZXJFdmVudCkge1xuICAgIGlmIChNb2JpbGVWM1BsYXllckV2ZW50Lmhhc093blByb3BlcnR5KGtleSkgJiYgIXBsYXllci5leHBvcnRzLlBsYXllckV2ZW50Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbiIsImltcG9ydCB7RXZlbnQsIEV2ZW50RGlzcGF0Y2hlciwgTm9BcmdzfSBmcm9tICcuL2V2ZW50ZGlzcGF0Y2hlcic7XG5pbXBvcnQge0Jyb3dzZXJVdGlsc30gZnJvbSAnLi9icm93c2VydXRpbHMnO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEksIFRpbWVSYW5nZSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5cbmV4cG9ydCBuYW1lc3BhY2UgUGxheWVyVXRpbHMge1xuXG4gIGV4cG9ydCBlbnVtIFBsYXllclN0YXRlIHtcbiAgICBJZGxlLFxuICAgIFByZXBhcmVkLFxuICAgIFBsYXlpbmcsXG4gICAgUGF1c2VkLFxuICAgIEZpbmlzaGVkLFxuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGlzVGltZVNoaWZ0QXZhaWxhYmxlKHBsYXllcjogUGxheWVyQVBJKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHBsYXllci5pc0xpdmUoKSAmJiBwbGF5ZXIuZ2V0TWF4VGltZVNoaWZ0KCkgIT09IDA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gZ2V0U3RhdGUocGxheWVyOiBQbGF5ZXJBUEkpOiBQbGF5ZXJTdGF0ZSB7XG4gICAgaWYgKHBsYXllci5oYXNFbmRlZCgpKSB7XG4gICAgICByZXR1cm4gUGxheWVyU3RhdGUuRmluaXNoZWQ7XG4gICAgfSBlbHNlIGlmIChwbGF5ZXIuaXNQbGF5aW5nKCkpIHtcbiAgICAgIHJldHVybiBQbGF5ZXJTdGF0ZS5QbGF5aW5nO1xuICAgIH0gZWxzZSBpZiAocGxheWVyLmlzUGF1c2VkKCkpIHtcbiAgICAgIHJldHVybiBQbGF5ZXJTdGF0ZS5QYXVzZWQ7XG4gICAgfSBlbHNlIGlmIChwbGF5ZXIuZ2V0U291cmNlKCkgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFBsYXllclN0YXRlLlByZXBhcmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUGxheWVyU3RhdGUuSWRsZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudFRpbWUgLSBzZWVrYWJsZVJhbmdlLnN0YXJ0LiBUaGlzIGVuc3VyZXMgYSB1c2VyLWZyaWVuZGx5IGN1cnJlbnRUaW1lIGFmdGVyIGEgbGl2ZSBzdHJlYW1cbiAgICogdHJhbnNpdGlvbmVkIHRvIFZvRC5cbiAgICogQHBhcmFtIHBsYXllclxuICAgKi9cbiAgZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbnRUaW1lUmVsYXRpdmVUb1NlZWthYmxlUmFuZ2UocGxheWVyOiBQbGF5ZXJBUEkpOiBudW1iZXIge1xuICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gcGxheWVyLmdldEN1cnJlbnRUaW1lKCk7XG4gICAgaWYgKHBsYXllci5pc0xpdmUoKSkge1xuICAgICAgcmV0dXJuIGN1cnJlbnRUaW1lO1xuICAgIH1cblxuICAgIGNvbnN0IHNlZWthYmxlUmFuZ2VTdGFydCA9IFBsYXllclV0aWxzLmdldFNlZWthYmxlUmFuZ2VTdGFydChwbGF5ZXIsIDApO1xuICAgIHJldHVybiBjdXJyZW50VGltZSAtIHNlZWthYmxlUmFuZ2VTdGFydDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzdGFydCB2YWx1ZSBvZiB0aGUgc2Vla2FibGUgcmFuZ2Ugb3IgdGhlIGRlZmF1bHRWYWx1ZSBpZiBubyBzZWVrYWJsZVJhbmdlIGlzIHByZXNlbnQuXG4gICAqIEZvciBub3cgdGhpcyBoYXBwZW5zIG9ubHkgaW4gY29tYmluYXRpb24gd2l0aCBNb2JpbGUgU0RLcy5cbiAgICpcbiAgICogVE9ETzogcmVtb3ZlIHRoaXMgZnVuY3Rpb24gaW4gbmV4dCBtYWpvciByZWxlYXNlXG4gICAqXG4gICAqIEBwYXJhbSBwbGF5ZXJcbiAgICogQHBhcmFtIGRlZmF1bHRWYWx1ZVxuICAgKi9cbiAgZXhwb3J0IGZ1bmN0aW9uIGdldFNlZWthYmxlUmFuZ2VTdGFydChwbGF5ZXI6IFBsYXllckFQSSwgZGVmYXVsdFZhbHVlOiBudW1iZXIgPSAwKSB7XG4gICAgcmV0dXJuIHBsYXllci5nZXRTZWVrYWJsZVJhbmdlKCkgJiYgcGxheWVyLmdldFNlZWthYmxlUmFuZ2UoKS5zdGFydCB8fCBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyBwbGF5ZXIgc2Vla2FibGUgdGltZSByYW5nZSBmb3IgbGl2ZS5cbiAgICogQXMgdGhlIHBsYXllciByZXR1cm5zIGB7IHN0YXJ0OiAtMSwgZW5kOiAtMSB9YCBmb3IgbGl2ZSBzdHJlYW1zIHdlIG5lZWQgdG8gY2FsY3VsYXRlIHRoZSBgc2Vla2FibGVSYW5nZWAgYmFzZWQgb24gYG1heFRpbWVzaGlmdGAuXG4gICAqXG4gICAqIEBwYXJhbSBwbGF5ZXJcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRTZWVrYWJsZVJhbmdlUmVzcGVjdGluZ0xpdmUocGxheWVyOiBQbGF5ZXJBUEkpOiBUaW1lUmFuZ2Uge1xuICAgIGlmICghcGxheWVyLmlzTGl2ZSgpKSB7XG4gICAgICByZXR1cm4gcGxheWVyLmdldFNlZWthYmxlUmFuZ2UoKTtcbiAgICB9XG5cbiAgICBjb25zdCBjdXJyZW50VGltZXNoaWZ0ID0gLXBsYXllci5nZXRUaW1lU2hpZnQoKTtcbiAgICBjb25zdCBtYXhUaW1lc2hpZnQgPSAtcGxheWVyLmdldE1heFRpbWVTaGlmdCgpO1xuICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gcGxheWVyLmdldEN1cnJlbnRUaW1lKCk7XG5cbiAgICBjb25zdCBlbmQgPSBjdXJyZW50VGltZSArIChjdXJyZW50VGltZXNoaWZ0KTtcbiAgICBjb25zdCBzdGFydCA9IGN1cnJlbnRUaW1lIC0gKG1heFRpbWVzaGlmdCAtIGN1cnJlbnRUaW1lc2hpZnQpO1xuXG4gICAgcmV0dXJuIHsgc3RhcnQsIGVuZCB9O1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBUaW1lU2hpZnRBdmFpbGFiaWxpdHlDaGFuZ2VkQXJncyBleHRlbmRzIE5vQXJncyB7XG4gICAgdGltZVNoaWZ0QXZhaWxhYmxlOiBib29sZWFuO1xuICB9XG5cbiAgZXhwb3J0IGNsYXNzIFRpbWVTaGlmdEF2YWlsYWJpbGl0eURldGVjdG9yIHtcblxuICAgIHByaXZhdGUgcGxheWVyOiBQbGF5ZXJBUEk7XG4gICAgcHJpdmF0ZSB0aW1lU2hpZnRBdmFpbGFibGU6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSB0aW1lU2hpZnRBdmFpbGFiaWxpdHlDaGFuZ2VkRXZlbnQgPSBuZXcgRXZlbnREaXNwYXRjaGVyPFBsYXllckFQSSwgVGltZVNoaWZ0QXZhaWxhYmlsaXR5Q2hhbmdlZEFyZ3M+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihwbGF5ZXI6IFBsYXllckFQSSkge1xuICAgICAgdGhpcy5wbGF5ZXIgPSBwbGF5ZXI7XG4gICAgICB0aGlzLnRpbWVTaGlmdEF2YWlsYWJsZSA9IHVuZGVmaW5lZDtcblxuICAgICAgbGV0IHRpbWVTaGlmdERldGVjdG9yID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmRldGVjdCgpO1xuICAgICAgfTtcbiAgICAgIC8vIFRyeSB0byBkZXRlY3QgdGltZXNoaWZ0IGF2YWlsYWJpbGl0eSB3aGVuIHNvdXJjZSBpcyBsb2FkZWQsIHdoaWNoIHdvcmtzIGZvciBEQVNIIHN0cmVhbXNcbiAgICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VMb2FkZWQsIHRpbWVTaGlmdERldGVjdG9yKTtcbiAgICAgIC8vIFdpdGggSExTL05hdGl2ZVBsYXllciBzdHJlYW1zLCBnZXRNYXhUaW1lU2hpZnQgY2FuIGJlIDAgYmVmb3JlIHRoZSBidWZmZXIgZmlsbHMsIHNvIHdlIG5lZWQgdG8gYWRkaXRpb25hbGx5XG4gICAgICAvLyBjaGVjayB0aW1lc2hpZnQgYXZhaWxhYmlsaXR5IGluIFRpbWVDaGFuZ2VkXG4gICAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVGltZUNoYW5nZWQsIHRpbWVTaGlmdERldGVjdG9yKTtcbiAgICB9XG5cbiAgICBkZXRlY3QoKTogdm9pZCB7XG4gICAgICBpZiAodGhpcy5wbGF5ZXIuaXNMaXZlKCkpIHtcbiAgICAgICAgbGV0IHRpbWVTaGlmdEF2YWlsYWJsZU5vdyA9IFBsYXllclV0aWxzLmlzVGltZVNoaWZ0QXZhaWxhYmxlKHRoaXMucGxheWVyKTtcblxuICAgICAgICAvLyBXaGVuIHRoZSBhdmFpbGFiaWxpdHkgY2hhbmdlcywgd2UgZmlyZSB0aGUgZXZlbnRcbiAgICAgICAgaWYgKHRpbWVTaGlmdEF2YWlsYWJsZU5vdyAhPT0gdGhpcy50aW1lU2hpZnRBdmFpbGFibGUpIHtcbiAgICAgICAgICB0aGlzLnRpbWVTaGlmdEF2YWlsYWJpbGl0eUNoYW5nZWRFdmVudC5kaXNwYXRjaCh0aGlzLnBsYXllciwgeyB0aW1lU2hpZnRBdmFpbGFibGU6IHRpbWVTaGlmdEF2YWlsYWJsZU5vdyB9KTtcbiAgICAgICAgICB0aGlzLnRpbWVTaGlmdEF2YWlsYWJsZSA9IHRpbWVTaGlmdEF2YWlsYWJsZU5vdztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGdldCBvblRpbWVTaGlmdEF2YWlsYWJpbGl0eUNoYW5nZWQoKTogRXZlbnQ8UGxheWVyQVBJLCBUaW1lU2hpZnRBdmFpbGFiaWxpdHlDaGFuZ2VkQXJncz4ge1xuICAgICAgcmV0dXJuIHRoaXMudGltZVNoaWZ0QXZhaWxhYmlsaXR5Q2hhbmdlZEV2ZW50LmdldEV2ZW50KCk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBMaXZlU3RyZWFtRGV0ZWN0b3JFdmVudEFyZ3MgZXh0ZW5kcyBOb0FyZ3Mge1xuICAgIGxpdmU6IGJvb2xlYW47XG4gIH1cblxuICAvKipcbiAgICogRGV0ZWN0cyBjaGFuZ2VzIG9mIHRoZSBzdHJlYW0gdHlwZSwgaS5lLiBjaGFuZ2VzIG9mIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHBsYXllciNpc0xpdmUgbWV0aG9kLlxuICAgKiBOb3JtYWxseSwgYSBzdHJlYW0gY2Fubm90IGNoYW5nZSBpdHMgdHlwZSBkdXJpbmcgcGxheWJhY2ssIGl0J3MgZWl0aGVyIFZPRCBvciBsaXZlLiBEdWUgdG8gYnVncyBvbiBzb21lXG4gICAqIHBsYXRmb3JtcyBvciBicm93c2VycywgaXQgY2FuIHN0aWxsIGNoYW5nZS4gSXQgaXMgdGhlcmVmb3JlIHVucmVsaWFibGUgdG8ganVzdCBjaGVjayAjaXNMaXZlIGFuZCB0aGlzIGRldGVjdG9yXG4gICAqIHNob3VsZCBiZSB1c2VkIGFzIGEgd29ya2Fyb3VuZCBpbnN0ZWFkLlxuICAgKlxuICAgKiBBZGRpdGlvbmFsbHkgc3RhcnRpbmcgd2l0aCBwbGF5ZXIgdjguMTkuMCB3ZSBoYXZlIHRoZSB1c2UtY2FzZSB0aGF0IGEgbGl2ZSBzdHJlYW0gY2hhbmdlcyBpbnRvIGEgdm9kLlxuICAgKiBUaGUgRHVyYXRpb25DaGFuZ2VkIGV2ZW50IGluZGljYXRlcyB0aGlzIHN3aXRjaC5cbiAgICpcbiAgICogS25vd24gY2FzZXM6XG4gICAqXG4gICAqIC0gSExTIFZPRCBvbiBBbmRyb2lkIDQuM1xuICAgKiBWaWRlbyBkdXJhdGlvbiBpcyBpbml0aWFsbHkgJ0luZmluaXR5JyBhbmQgb25seSBnZXRzIGF2YWlsYWJsZSBhZnRlciBwbGF5YmFjayBzdGFydHMsIHNvIHN0cmVhbXMgYXJlIHdyb25nbHlcbiAgICogcmVwb3J0ZWQgYXMgJ2xpdmUnIGJlZm9yZSBwbGF5YmFjayAodGhlIGxpdmUtY2hlY2sgaW4gdGhlIHBsYXllciBjaGVja3MgZm9yIGluZmluaXRlIGR1cmF0aW9uKS5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgc2luY2UgVUkgdjMuOS4wIGluIGNvbWJpbmF0aW9uIHdpdGggcGxheWVyIHY4LjE5LjAgdXNlIFBsYXllckV2ZW50LkR1cmF0aW9uQ2hhbmdlZCBpbnN0ZWFkXG4gICAqXG4gICAqIFRPRE86IHJlbW92ZSB0aGlzIGNsYXNzIGluIG5leHQgbWFqb3IgcmVsZWFzZVxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIExpdmVTdHJlYW1EZXRlY3RvciB7XG5cbiAgICBwcml2YXRlIHBsYXllcjogUGxheWVyQVBJO1xuICAgIHByaXZhdGUgbGl2ZTogYm9vbGVhbjtcbiAgICBwcml2YXRlIGxpdmVDaGFuZ2VkRXZlbnQgPSBuZXcgRXZlbnREaXNwYXRjaGVyPFBsYXllckFQSSwgTGl2ZVN0cmVhbURldGVjdG9yRXZlbnRBcmdzPigpO1xuICAgIHByaXZhdGUgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcjtcblxuICAgIGNvbnN0cnVjdG9yKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKSB7XG4gICAgICB0aGlzLnBsYXllciA9IHBsYXllcjtcbiAgICAgIHRoaXMudWltYW5hZ2VyID0gdWltYW5hZ2VyO1xuICAgICAgdGhpcy5saXZlID0gdW5kZWZpbmVkO1xuXG4gICAgICBsZXQgbGl2ZURldGVjdG9yID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmRldGVjdCgpO1xuICAgICAgfTtcbiAgICAgIHRoaXMudWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKGxpdmVEZXRlY3Rvcik7XG4gICAgICAvLyBSZS1ldmFsdWF0ZSB3aGVuIHBsYXliYWNrIHN0YXJ0c1xuICAgICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXksIGxpdmVEZXRlY3Rvcik7XG5cbiAgICAgIC8vIEhMUyBsaXZlIGRldGVjdGlvbiB3b3JrYXJvdW5kIGZvciBBbmRyb2lkOlxuICAgICAgLy8gQWxzbyByZS1ldmFsdWF0ZSBkdXJpbmcgcGxheWJhY2ssIGJlY2F1c2UgdGhhdCBpcyB3aGVuIHRoZSBsaXZlIGZsYWcgbWlnaHQgY2hhbmdlLlxuICAgICAgLy8gKERvaW5nIGl0IG9ubHkgaW4gQW5kcm9pZCBDaHJvbWUgc2F2ZXMgdW5uZWNlc3Nhcnkgb3ZlcmhlYWQgb24gb3RoZXIgcGxhdGZvcm1zKVxuICAgICAgaWYgKEJyb3dzZXJVdGlscy5pc0FuZHJvaWQgJiYgQnJvd3NlclV0aWxzLmlzQ2hyb21lKSB7XG4gICAgICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5UaW1lQ2hhbmdlZCwgbGl2ZURldGVjdG9yKTtcbiAgICAgIH1cblxuICAgICAgLy8gRHVyYXRpb25DaGFuZ2VkIGV2ZW50IHdhcyBpbnRyb2R1Y2VkIHdpdGggcGxheWVyIHY4LjE5LjBcbiAgICAgIGlmIChwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5EdXJhdGlvbkNoYW5nZWQpIHtcbiAgICAgICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkR1cmF0aW9uQ2hhbmdlZCwgbGl2ZURldGVjdG9yKTtcbiAgICAgIH1cblxuICAgICAgLy8gQWQgdmlkZW8ncyBpc0xpdmUoKSBtaWdodCBiZSBkaWZmZXJlbnQgdGhhbiB0aGUgYWN0dWFsIHZpZGVvJ3MgaXNMaXZlKCkuXG4gICAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQWRCcmVha1N0YXJ0ZWQsIGxpdmVEZXRlY3Rvcik7XG4gICAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQWRCcmVha0ZpbmlzaGVkLCBsaXZlRGV0ZWN0b3IpO1xuICAgIH1cblxuICAgIGRldGVjdCgpOiB2b2lkIHtcbiAgICAgIGxldCBsaXZlTm93ID0gdGhpcy5wbGF5ZXIuaXNMaXZlKCk7XG5cbiAgICAgIC8vIENvbXBhcmUgY3VycmVudCB0byBwcmV2aW91cyBsaXZlIHN0YXRlIGZsYWcgYW5kIGZpcmUgZXZlbnQgd2hlbiBpdCBjaGFuZ2VzLiBTaW5jZSB3ZSBpbml0aWFsaXplIHRoZSBmbGFnXG4gICAgICAvLyB3aXRoIHVuZGVmaW5lZCwgdGhlcmUgaXMgYWx3YXlzIGF0IGxlYXN0IGFuIGluaXRpYWwgZXZlbnQgZmlyZWQgdGhhdCB0ZWxscyBsaXN0ZW5lcnMgdGhlIGxpdmUgc3RhdGUuXG4gICAgICBpZiAobGl2ZU5vdyAhPT0gdGhpcy5saXZlKSB7XG4gICAgICAgIHRoaXMubGl2ZUNoYW5nZWRFdmVudC5kaXNwYXRjaCh0aGlzLnBsYXllciwgeyBsaXZlOiBsaXZlTm93IH0pO1xuICAgICAgICB0aGlzLmxpdmUgPSBsaXZlTm93O1xuICAgICAgfVxuICAgIH1cblxuICAgIGdldCBvbkxpdmVDaGFuZ2VkKCk6IEV2ZW50PFBsYXllckFQSSwgTGl2ZVN0cmVhbURldGVjdG9yRXZlbnRBcmdzPiB7XG4gICAgICByZXR1cm4gdGhpcy5saXZlQ2hhbmdlZEV2ZW50LmdldEV2ZW50KCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBOYXZpZ2F0aW9uR3JvdXAgfSBmcm9tICcuL25hdmlnYXRpb25ncm91cCc7XG5pbXBvcnQgeyBBY3Rpb24sIERpcmVjdGlvbiB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSAnLi4vY29tcG9uZW50cy9jb250YWluZXInO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9jb21wb25lbnQnO1xuXG5leHBvcnQgZW51bSBMaXN0T3JpZW50YXRpb24ge1xuICBIb3Jpem9udGFsID0gJ2hvcml6b250YWwnLFxuICBWZXJ0aWNhbCA9ICd2ZXJ0aWNhbCcsXG59XG5cbmV4cG9ydCBjbGFzcyBMaXN0TmF2aWdhdGlvbkdyb3VwIGV4dGVuZHMgTmF2aWdhdGlvbkdyb3VwIHtcbiAgcHJpdmF0ZSByZWFkb25seSBsaXN0TmF2aWdhdGlvbkRpcmVjdGlvbnM6IERpcmVjdGlvbltdO1xuXG4gIGNvbnN0cnVjdG9yKG9yaWVudGF0aW9uOiBMaXN0T3JpZW50YXRpb24sIGNvbnRhaW5lcjogQ29udGFpbmVyPHVua25vd24+LCAuLi5jb21wb25lbnRzOiBDb21wb25lbnQ8dW5rbm93bj5bXSkge1xuICAgIHN1cGVyKGNvbnRhaW5lciwgLi4uY29tcG9uZW50cyk7XG5cbiAgICBzd2l0Y2ggKG9yaWVudGF0aW9uKSB7XG4gICAgICBjYXNlIExpc3RPcmllbnRhdGlvbi5WZXJ0aWNhbDpcbiAgICAgICAgdGhpcy5saXN0TmF2aWdhdGlvbkRpcmVjdGlvbnMgPSBbRGlyZWN0aW9uLlVQLCBEaXJlY3Rpb24uRE9XTl07XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExpc3RPcmllbnRhdGlvbi5Ib3Jpem9udGFsOlxuICAgICAgICB0aGlzLmxpc3ROYXZpZ2F0aW9uRGlyZWN0aW9ucyA9IFtEaXJlY3Rpb24uTEVGVCwgRGlyZWN0aW9uLlJJR0hUXTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGhhbmRsZUFjdGlvbihhY3Rpb246IEFjdGlvbik6IHZvaWQge1xuICAgIHN1cGVyLmhhbmRsZUFjdGlvbihhY3Rpb24pO1xuXG4gICAgaWYgKGFjdGlvbiA9PT0gQWN0aW9uLlNFTEVDVCkge1xuICAgICAgLy8gY2xvc2UgdGhlIGNvbnRhaW5lciB3aGVuIGEgbGlzdCBlbnRyeSBpcyBzZWxlY3RlZFxuICAgICAgdGhpcy5oYW5kbGVBY3Rpb24oQWN0aW9uLkJBQ0spO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVOYXZpZ2F0aW9uKGRpcmVjdGlvbjogRGlyZWN0aW9uKTogdm9pZCB7XG4gICAgc3VwZXIuaGFuZGxlTmF2aWdhdGlvbihkaXJlY3Rpb24pO1xuXG4gICAgaWYgKCF0aGlzLmxpc3ROYXZpZ2F0aW9uRGlyZWN0aW9ucy5pbmNsdWRlcyhkaXJlY3Rpb24pKSB7XG4gICAgICAvLyBjbG9zZSB0aGUgY29udGFpbmVyIG9uIG5hdmlnYXRpb24gaW5wdXRzIHRoYXQgZG9uJ3QgYWxpZ25cbiAgICAgIC8vIHdpdGggdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBsaXN0XG4gICAgICB0aGlzLmhhbmRsZUFjdGlvbihBY3Rpb24uQkFDSyk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBDb250YWluZXIgfSBmcm9tICcuLi9jb21wb25lbnRzL2NvbnRhaW5lcic7XG5pbXBvcnQgeyBpc0NvbXBvbmVudCwgaXNDb250YWluZXIsIGlzTGlzdEJveCB9IGZyb20gJy4vdHlwZWd1YXJkcyc7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgcmVzb2x2ZXMgYSBjb250YWluZXIgYW5kIHRoZSBjb21wb25lbnRzIGNvbnRhaW5lZCB3aXRoaW4gdGhlbSwgYnVpbGRpbmcgYSBmbGF0IGxpc3Qgb2YgY29tcG9uZW50cy5cbiAqXG4gKiBAcGFyYW0gY29udGFpbmVyIFRoZSBjb250YWluZXIgdG8gZ2V0IHRoZSBjb250YWluZWQgY29tcG9uZW50cyBmcm9tXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVBbGxDb21wb25lbnRzKGNvbnRhaW5lcjogQ29udGFpbmVyPHVua25vd24+KTogQ29tcG9uZW50PHVua25vd24+W10ge1xuICBjb25zdCBjaGlsZENvbXBvbmVudHM6IENvbXBvbmVudDx1bmtub3duPltdID0gW107XG5cbiAgY29udGFpbmVyLmdldENvbXBvbmVudHMoKS5mb3JFYWNoKGNvbnRhaW5lck9yQ29tcG9uZW50ID0+IHtcbiAgICBpZiAoaXNDb250YWluZXIoY29udGFpbmVyT3JDb21wb25lbnQpKSB7XG4gICAgICBjaGlsZENvbXBvbmVudHMucHVzaCguLi5yZXNvbHZlQWxsQ29tcG9uZW50cyhjb250YWluZXJPckNvbXBvbmVudCkpO1xuICAgIH0gZWxzZSBpZiAoaXNDb21wb25lbnQoY29udGFpbmVyT3JDb21wb25lbnQpKSB7XG4gICAgICBjaGlsZENvbXBvbmVudHMucHVzaChjb250YWluZXJPckNvbXBvbmVudCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY2hpbGRDb21wb25lbnRzO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIEhUTUwgZWxlbWVudHMgYXNzb2NpYXRlZCB0byB0aGUgcHJvdmlkZWQgY29tcG9uZW50LlxuICpcbiAqIEBwYXJhbSBjb21wb25lbnQgVGhlIGNvbXBvbmVudCB0byBnZXQgdGhlIEhUTUwgZWxlbWVudHMgZnJvbVxuICovXG5mdW5jdGlvbiB0b0h0bWxFbGVtZW50KGNvbXBvbmVudDogQ29tcG9uZW50PHVua25vd24+KTogSFRNTEVsZW1lbnRbXSB7XG4gIGlmIChpc0xpc3RCb3goY29tcG9uZW50KSkge1xuICAgIHJldHVybiBbXS5zbGljZS5jYWxsKGNvbXBvbmVudC5nZXREb21FbGVtZW50KCkuZ2V0KClbMF0uY2hpbGRyZW4pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb21wb25lbnQuZ2V0RG9tRWxlbWVudCgpLmdldCgpLnNsaWNlKDAsIDEpO1xuICB9XG59XG5cbi8qKlxuICogVGFrZXMgdGhlIHByb3ZpZGVkIGxpc3Qgb2YgY29tcG9uZW50cyBhbmQgZmxhdC1tYXBzIHRoZW0gdG8gYSBsaXN0IG9mIHRoZWlyIHJlc3BlY3RpdmUgSFRNTCBlbGVtZW50cy4gSW4gY2FzZSBhXG4gKiBwcm92aWRlZCBjb21wb25lbnQgaXMgYSBjb250YWluZXIsIHRoZSBjaGlsZHJlbiBvZiB0aGF0IGNvbnRhaW5lciB3aWxsIGJlIHJlc29sdmVkIHJlY3Vyc2l2ZWx5LiBJZ25vcmVzIGNvbXBvbmVudHNcbiAqIHRoYXQgYXJlIGhpZGRlbi5cbiAqXG4gKiBAcGFyYW0gY29tcG9uZW50cyBUaGUgY29tcG9uZW50cyB0byBtYXAgdG8gSFRNTCBlbGVtZW50c1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SHRtbEVsZW1lbnRzRnJvbUNvbXBvbmVudHMoY29tcG9uZW50czogQ29tcG9uZW50PHVua25vd24+W10pOiBIVE1MRWxlbWVudFtdIHtcbiAgY29uc3QgaHRtbEVsZW1lbnRzOiBIVE1MRWxlbWVudFtdID0gW107XG5cbiAgY29tcG9uZW50c1xuICAgIC5maWx0ZXIoY29tcG9uZW50ID0+ICFjb21wb25lbnQuaXNIaWRkZW4oKSlcbiAgICAuZm9yRWFjaChjb21wb25lbnQgPT4ge1xuICAgICAgY29uc3QgZWxlbWVudHNUb0NvbnNpZGVyID0gY29tcG9uZW50IGluc3RhbmNlb2YgQ29udGFpbmVyID8gcmVzb2x2ZUFsbENvbXBvbmVudHMoY29tcG9uZW50KSA6IFtjb21wb25lbnRdO1xuXG4gICAgICBlbGVtZW50c1RvQ29uc2lkZXIuZm9yRWFjaChjb21wb25lbnQgPT4ge1xuICAgICAgICBodG1sRWxlbWVudHMucHVzaCguLi50b0h0bWxFbGVtZW50KGNvbXBvbmVudCkpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgcmV0dXJuIGh0bWxFbGVtZW50cztcbn1cbiIsImltcG9ydCB7IEFjdGlvbiwgRGlyZWN0aW9uLCBLZXlNYXAgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IEJyb3dzZXJVdGlscyB9IGZyb20gJy4uL2Jyb3dzZXJ1dGlscyc7XG5cbmNvbnN0IFRpemVuS2V5TWFwID0ge1xuICBpc0FwcGxpY2FibGU6ICgpID0+IEJyb3dzZXJVdGlscy5pc1RpemVuLFxuICBrZXlDb2Rlczoge1xuICAgIC8vIEQtcGFkIFVwXG4gICAgMzg6IERpcmVjdGlvbi5VUCxcbiAgICAvLyBELXBhZCBEb3duXG4gICAgNDA6IERpcmVjdGlvbi5ET1dOLFxuICAgIC8vIEQtcGFkIExlZnRcbiAgICAzNzogRGlyZWN0aW9uLkxFRlQsXG4gICAgLy8gRC1wYWQgUmlnaHRcbiAgICAzOTogRGlyZWN0aW9uLlJJR0hULFxuICAgIC8vIEQtcGFkIE9LXG4gICAgMTM6IEFjdGlvbi5TRUxFQ1QsXG4gICAgLy8gQmFja1xuICAgIDEwMDA5OiBBY3Rpb24uQkFDSyxcbiAgfSxcbn07XG5cbmNvbnN0IFdlYk9zS2V5TWFwID0ge1xuICBpc0FwcGxpY2FibGU6ICgpID0+IEJyb3dzZXJVdGlscy5pc1dlYk9zLFxuICBrZXlDb2Rlczoge1xuICAgIC8vIEQtcGFkIFVwXG4gICAgMzg6IERpcmVjdGlvbi5VUCxcbiAgICAvLyBELXBhZCBEb3duXG4gICAgNDA6IERpcmVjdGlvbi5ET1dOLFxuICAgIC8vIEQtcGFkIExlZnRcbiAgICAzNzogRGlyZWN0aW9uLkxFRlQsXG4gICAgLy8gRC1wYWQgUmlnaHRcbiAgICAzOTogRGlyZWN0aW9uLlJJR0hULFxuICAgIC8vIEQtcGFkIE9LXG4gICAgMTM6IEFjdGlvbi5TRUxFQ1QsXG4gICAgLy8gQmFja1xuICAgIDQ2MTogQWN0aW9uLkJBQ0ssXG4gIH0sXG59O1xuXG5jb25zdCBQbGF5U3RhdGlvbktleU1hcCA9IHtcbiAgaXNBcHBsaWNhYmxlOiAoKSA9PiBCcm93c2VyVXRpbHMuaXNQbGF5U3RhdGlvbixcbiAga2V5Q29kZXM6IHtcbiAgICAvLyBELXBhZCBVcFxuICAgIDM4OiBEaXJlY3Rpb24uVVAsXG4gICAgLy8gRC1wYWQgRG93blxuICAgIDQwOiBEaXJlY3Rpb24uRE9XTixcbiAgICAvLyBELXBhZCBMZWZ0XG4gICAgMzc6IERpcmVjdGlvbi5MRUZULFxuICAgIC8vIEQtcGFkIFJpZ2h0XG4gICAgMzk6IERpcmVjdGlvbi5SSUdIVCxcbiAgICAvLyBDcm9zc1xuICAgIDEzOiBBY3Rpb24uU0VMRUNULFxuICAgIC8vIENpcmNsZVxuICAgIDI3OiBBY3Rpb24uQkFDSyxcbiAgfSxcbn07XG5cbmNvbnN0IEFuZHJvaWRLZXlNYXAgPSB7XG4gIGlzQXBwbGljYWJsZTogKCkgPT4gQnJvd3NlclV0aWxzLmlzQW5kcm9pZCxcbiAga2V5Q29kZXM6IHtcbiAgICAvLyBELXBhZCBVcFxuICAgIDE5OiBEaXJlY3Rpb24uVVAsXG4gICAgLy8gRC1wYWQgRG93blxuICAgIDIwOiBEaXJlY3Rpb24uRE9XTixcbiAgICAvLyBELXBhZCBMZWZ0XG4gICAgMjE6IERpcmVjdGlvbi5MRUZULFxuICAgIC8vIEQtcGFkIFJpZ2h0XG4gICAgMjI6IERpcmVjdGlvbi5SSUdIVCxcbiAgICAvLyBELXBhZCBDZW50ZXJcbiAgICAyMzogQWN0aW9uLlNFTEVDVCxcbiAgICAvLyBFbnRlclxuICAgIDY2OiBBY3Rpb24uU0VMRUNULFxuICAgIC8vIEJhY2tcbiAgICA0OiBBY3Rpb24uQkFDSyxcbiAgfSxcbn07XG5cbmNvbnN0IEhpc2Vuc2VLZXlNYXAgPSB7XG4gIGlzQXBwbGljYWJsZTogKCkgPT4gQnJvd3NlclV0aWxzLmlzSGlzZW5zZSxcbiAga2V5Q29kZXM6IHtcbiAgICAvLyBELXBhZCBVcFxuICAgIDM4OiBEaXJlY3Rpb24uVVAsXG4gICAgLy8gRC1wYWQgRG93blxuICAgIDQwOiBEaXJlY3Rpb24uRE9XTixcbiAgICAvLyBELXBhZCBMZWZ0XG4gICAgMzc6IERpcmVjdGlvbi5MRUZULFxuICAgIC8vIEQtcGFkIFJpZ2h0XG4gICAgMzk6IERpcmVjdGlvbi5SSUdIVCxcbiAgICAvLyBPS1xuICAgIDEzOiBBY3Rpb24uU0VMRUNULFxuICAgIC8vIEJhY2tcbiAgICA4OiBBY3Rpb24uQkFDSyxcbiAgfSxcbn07XG5cbi8vIERlZmF1bHQga2V5IG1hcCB1c2VkIG9uIGRlc2t0b3BzXG5jb25zdCBEZWZhdWx0S2V5TWFwID0ge1xuICAvLyBBcnJvdyBVcFxuICAzODogRGlyZWN0aW9uLlVQLFxuICAvLyBBcnJvdyBEb3duXG4gIDQwOiBEaXJlY3Rpb24uRE9XTixcbiAgLy8gQXJyb3cgTGVmdFxuICAzNzogRGlyZWN0aW9uLkxFRlQsXG4gIC8vIEFycm93IFJpZ2h0XG4gIDM5OiBEaXJlY3Rpb24uUklHSFQsXG4gIC8vIEVudGVyXG4gIDEzOiBBY3Rpb24uU0VMRUNULFxuICAvLyBFc2NhcGVcbiAgMjc6IEFjdGlvbi5CQUNLLFxufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtYXRjaGluZyBrZXkgbWFwIGZvciB0aGUgY3VycmVudCBwbGF0Zm9ybS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEtleU1hcEZvclBsYXRmb3JtKCk6IEtleU1hcCB7XG4gIGNvbnN0IGFwcGxpY2FibGVLZXlNYXAgPSBbXG4gICAgV2ViT3NLZXlNYXAsXG4gICAgVGl6ZW5LZXlNYXAsXG4gICAgUGxheVN0YXRpb25LZXlNYXAsXG4gICAgSGlzZW5zZUtleU1hcCxcbiAgICBBbmRyb2lkS2V5TWFwLFxuICBdLmZpbmQoa2V5TWFwID0+IGtleU1hcC5pc0FwcGxpY2FibGUoKSk7XG5cbiAgaWYgKGFwcGxpY2FibGVLZXlNYXApIHtcbiAgICByZXR1cm4gYXBwbGljYWJsZUtleU1hcC5rZXlDb2RlcztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gRGVmYXVsdEtleU1hcDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRGlyZWN0aW9uIH0gZnJvbSAnLi90eXBlcyc7XG5cbmludGVyZmFjZSBWZWN0b3Ige1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSB2ZWN0b3IuXG4gKlxuICogQHBhcmFtIHZlY3RvciBUaGUgdmVjdG9yIHRvIGNhbGN1bGF0ZSB0aGUgbGVuZ3RoIG9mXG4gKi9cbmZ1bmN0aW9uIGxlbmd0aCh2ZWN0b3I6IFZlY3Rvcik6IG51bWJlciB7XG4gIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3codmVjdG9yLngsIDIpICsgTWF0aC5wb3codmVjdG9yLnksIDIpKTtcbn1cblxuLyoqXG4gKiBOb3JtYWxpemVzIHRoZSBnaXZlbiB2ZWN0b3IuXG4gKlxuICogQHBhcmFtIHZlY3RvciBUaGUgdmVjdG9yIHRvIG5vcm1hbGl6ZVxuICovXG5mdW5jdGlvbiBub3JtYWxpemUodmVjdG9yOiBWZWN0b3IpOiBWZWN0b3Ige1xuICBjb25zdCBsZW4gPSBsZW5ndGgodmVjdG9yKTtcblxuICByZXR1cm4ge1xuICAgIHg6IHZlY3Rvci54IC8gbGVuLFxuICAgIHk6IHZlY3Rvci55IC8gbGVuLFxuICB9O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IGJldHdlZW4gMiB2ZWN0b3JzLlxuICpcbiAqIEBwYXJhbSBhIFRoZSBmaXJzdCB2ZWN0b3JcbiAqIEBwYXJhbSBiIFRoZSBzZWNvbmQgdmVjdG9yXG4gKi9cbmZ1bmN0aW9uIGRvdFByb2R1Y3QoYTogVmVjdG9yLCBiOiBWZWN0b3IpOiBudW1iZXIge1xuICByZXR1cm4gYS54ICogYi54ICsgYS55ICogYi55O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIDIgcG9pbnRzIHBvaW50ZWQgdG8gYnkgdGhlIHByb3ZpZGVkIHZlY3RvcnMuXG4gKlxuICogQHBhcmFtIGEgVGhlIGZpcnN0IHZlY3RvclxuICogQHBhcmFtIGIgVGhlIHNlY29uZCB2ZWN0b3JcbiAqL1xuZnVuY3Rpb24gZGlzdGFuY2UoYTogVmVjdG9yLCBiOiBWZWN0b3IpOiBudW1iZXIge1xuICByZXR1cm4gbGVuZ3RoKHtcbiAgICB4OiBiLnggLSBhLngsXG4gICAgeTogYi55IC0gYS55LFxuICB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgdmVjdG9yIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlIGNlbnRlciBvZiB0aGUgcHJvdmlkZWQgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBnZXQgdGhlIGNlbnRlciBvZlxuICovXG5mdW5jdGlvbiBnZXRFbGVtZW50VmVjdG9yKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogVmVjdG9yIHtcbiAgY29uc3QgYm91bmRpbmdSZWN0ID0gZ2V0Qm91bmRpbmdSZWN0RnJvbUVsZW1lbnQoZWxlbWVudCk7XG5cbiAgcmV0dXJuIHtcbiAgICB4OiBib3VuZGluZ1JlY3QueCArIGJvdW5kaW5nUmVjdC53aWR0aCAvIDIsXG4gICAgeTogYm91bmRpbmdSZWN0LnkgKyBib3VuZGluZ1JlY3QuaGVpZ2h0IC8gMixcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhbmdsZSBpbiBkZWdyZWVzIGJldHdlZW4gdGhlIHVuaXQgdmVjdG9yIHBvaW50aW5nIGluIHRoZSBnaXZlbiB7RGlyZWN0aW9ufSBhbmQgdGhlIHVuaXQgdmVjdG9yIHRoYXRcbiAqIHBvaW50cyBmcm9tIHRoZSBjdXJyZW50IGVsZW1lbnQgdG8gYW5vdGhlciBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSBhIFRoZSB2ZWN0b3Igb2YgdGhlIGN1cnJlbnQgZWxlbWVudFxuICogQHBhcmFtIGIgVGhlIHZlY3RvciBvZiB0aGUgb3RoZXIgZWxlbWVudFxuICogQHBhcmFtIGRpcmVjdGlvbiBUaGUgZGlyZWN0aW9uIHRvIG1vdmUgYWxvbmdcbiAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlQW5nbGUoYTogVmVjdG9yLCBiOiBWZWN0b3IsIGRpcmVjdGlvbjogRGlyZWN0aW9uKTogbnVtYmVyIHtcbiAgY29uc3QgZGlyZWN0aW9uVmVjdG9yID0ge1xuICAgIHg6IChkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5MRUZUID8gLTEgOiBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5SSUdIVCA/IDEgOiAwKSxcbiAgICB5OiAoZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uVVAgPyAtMSA6IGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLkRPV04gPyAxIDogMCksXG4gIH07XG5cbiAgY29uc3QgZWxlbWVudFZlY3RvciA9IG5vcm1hbGl6ZSh7XG4gICAgeDogYi54IC0gYS54LFxuICAgIHk6IGIueSAtIGEueSxcbiAgfSk7XG5cbiAgY29uc3QgYW5nbGVDb3MgPSBkb3RQcm9kdWN0KGRpcmVjdGlvblZlY3RvciwgZWxlbWVudFZlY3RvcikgLyAobGVuZ3RoKGRpcmVjdGlvblZlY3RvcikgKiBsZW5ndGgoZWxlbWVudFZlY3RvcikpO1xuXG4gIHJldHVybiBNYXRoLmFjb3MoYW5nbGVDb3MpICogMTgwIC8gTWF0aC5QSTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjbG9zZXN0IGVsZW1lbnQgdG8gdGhlIGN1cnJlbnQgZWxlbWVudCB3aGVuIHRyeWluZyB0byBuYXZpZ2F0ZSBpbiB0aGUgcHJvdmlkZWQgZGlyZWN0aW9uLiBSZXR1cm5zXG4gKiB1bmRlZmluZWQsIGlmIHRoZXJlIGlzIG5vdCBlbGVtZW50IGluIHRoZSBnaXZlbiBkaXJlY3Rpb24uXG4gKlxuICogQHBhcmFtIGFjdGl2ZUVsZW1lbnQgVGhlIGN1cnJlbnRseSBzZWxlY3RlZCBlbGVtZW50XG4gKiBAcGFyYW0gZWxlbWVudHMgVGhlIGxpc3Qgb2YgYWxsIGVsZW1lbnRzIHRoYXQgY2FuIGJlIG5hdmlnYXRlZCB0b1xuICogQHBhcmFtIGRpcmVjdGlvbiBUaGUgZGlyZWN0aW9uIGluIHdoaWNoIHRvIG5hdmlnYXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbGVtZW50SW5EaXJlY3Rpb24oXG4gIGFjdGl2ZUVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICBlbGVtZW50czogSFRNTEVsZW1lbnRbXSxcbiAgZGlyZWN0aW9uOiBEaXJlY3Rpb24sXG4pOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gIGlmICghYWN0aXZlRWxlbWVudCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICBjb25zdCBjdXRvZmZBbmdsZSA9IDQ1O1xuICBjb25zdCBhY3RpdmVFbGVtVmVjdG9yID0gZ2V0RWxlbWVudFZlY3RvcihhY3RpdmVFbGVtZW50KTtcblxuICByZXR1cm4gZWxlbWVudHNcbiAgICAvLyBkb24ndCB0YWtlIHRoZSBjdXJyZW50IGVsZW1lbnQgaW50byBhY2NvdW50XG4gICAgLmZpbHRlcihlbGVtID0+IGVsZW0gIT09IGFjdGl2ZUVsZW1lbnQpXG4gICAgLy8gZ2V0IHRoZSBhbmdsZSBiZXR3ZWVuLCBhbmQgZGlzdGFuY2UgdG8gYW55IG90aGVyIGVsZW1lbnQgZnJvbSB0aGUgY3VycmVudCBlbGVtZW50XG4gICAgLm1hcChlbGVtZW50ID0+IHtcbiAgICAgIGNvbnN0IGVsZW1lbnRWZWN0b3IgPSBnZXRFbGVtZW50VmVjdG9yKGVsZW1lbnQpO1xuICAgICAgY29uc3QgZGlzdCA9IGRpc3RhbmNlKGFjdGl2ZUVsZW1WZWN0b3IsIGVsZW1lbnRWZWN0b3IpO1xuICAgICAgY29uc3QgYW5nbGUgPSBjYWxjdWxhdGVBbmdsZShhY3RpdmVFbGVtVmVjdG9yLCBlbGVtZW50VmVjdG9yLCBkaXJlY3Rpb24pO1xuXG4gICAgICByZXR1cm4geyBhbmdsZSwgZGlzdCwgZWxlbWVudCB9O1xuICAgIH0pXG4gICAgLy8gZmlsdGVyIG91dCBhbnkgZWxlbWVudHMgdGhhdCBkb24ndCBhbGlnbiB3aXRoIHRoZSBkaXJlY3Rpb24gd2UncmUgdHJ5aW5nIHRvIG1vdmUgaW5cbiAgICAuZmlsdGVyKCh7IGFuZ2xlIH0pID0+IGFuZ2xlIDw9IGN1dG9mZkFuZ2xlKVxuICAgIC8vIHNvcnQgdGhlIHJlc3VsdGluZyBlbGVtZW50cyBiYXNlZCBvbiB0aGVpciBkaXN0YW5jZSB0byB0aGUgY3VycmVudCBlbGVtZW50IGluIGFzY2VuZGluZyBvcmRlclxuICAgIC5zb3J0KCh7IGFuZ2xlOiBhbmdsZUEsIGRpc3Q6IGRpc3RBIH0sIHsgYW5nbGU6IGFuZ2xlQiwgZGlzdDogZGlzdEIgfSkgPT4gKGFuZ2xlQSAtIGFuZ2xlQikgKyAoZGlzdEEgLSBkaXN0QikpXG4gICAgLy8gcmV0dXJuIHRoZSBlbGVtZW50IGNsb3Nlc3QgdG8gdGhlIGN1cnJlbnQgZWxlbWVudFxuICAgIC5zaGlmdCgpPy5lbGVtZW50O1xufVxuXG4vKipcbiAqIFJldHVybnMgRE9NUmVjdCBsaWtlIG9iamVjdCBjb250YWluaW5nIGhvcml6b250YWwgWCBhbmQgdmVydGljYWwgWSBjb29yZGluYXRlcyBmcm9tIGFuZCBIVE1MRWxlbWVudC5cbiAqIEhhbmRsZXMgdXNlLWNhc2VzIGZvciBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgd2hlbiB0aGUgcmV0dXJuIHR5cGUgY2FuIGJlIGVpdGhlclxuICogYSBDbGllbnRSZWN0IG9yIERPTVJlY3Qgb2JqZWN0IHR5cGUuXG4gKlxuICogQHBhcmFtIGVsZW1lbnQgVGhlIGN1cnJlbnRseSBzZWxlY3RlZCBlbGVtZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRCb3VuZGluZ1JlY3RGcm9tRWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICBjb25zdCBib3VuZGluZ1JlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gIGlmICh0eXBlb2YgYm91bmRpbmdSZWN0LnggIT09ICdudW1iZXInICYmIHR5cGVvZiBib3VuZGluZ1JlY3QueSAhPT0gJ251bWJlcicpIHtcbiAgICBib3VuZGluZ1JlY3QueCA9IGJvdW5kaW5nUmVjdC5sZWZ0O1xuICAgIGJvdW5kaW5nUmVjdC55ID0gYm91bmRpbmdSZWN0LnRvcDtcbiAgfVxuXG4gIHJldHVybiBib3VuZGluZ1JlY3Q7XG59XG5cbiIsImltcG9ydCB7IENvbnRhaW5lciB9IGZyb20gJy4uL2NvbXBvbmVudHMvY29udGFpbmVyJztcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvY29tcG9uZW50JztcbmltcG9ydCB7IGdldEVsZW1lbnRJbkRpcmVjdGlvbiB9IGZyb20gJy4vbmF2aWdhdGlvbmFsZ29yaXRobSc7XG5pbXBvcnQgeyBnZXRIdG1sRWxlbWVudHNGcm9tQ29tcG9uZW50cyB9IGZyb20gJy4vZ2V0aHRtbGVsZW1lbnRzZnJvbWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgTm9kZUV2ZW50U3Vic2NyaWJlciB9IGZyb20gJy4vbm9kZWV2ZW50c3Vic2NyaWJlcic7XG5pbXBvcnQgeyBpc1NldHRpbmdzUGFuZWwgfSBmcm9tICcuL3R5cGVndWFyZHMnO1xuaW1wb3J0IHsgQWN0aW9uLCBBY3Rpb25DYWxsYmFjaywgQ2FsbGJhY2ssIERpcmVjdGlvbiwgTmF2aWdhdGlvbkNhbGxiYWNrIH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogVXNlZCBhcyBwYXJ0IG9mIHNwYXRpYWwgbmF2aWdhdGlvbi4gR3JvdXBzIHRvZ2V0aGVyIGRpZmZlcmVudCBjb21wb25lbnRzIHRvIHdoaWNoIHlvdSBjYW4gbmF2aWdhdGUgdG8sIGluIGEgc2luZ2xlXG4gKiBuYXZpZ2F0aW9uIGdyb3VwLlxuICpcbiAqIFJlc3BvbnNpYmxlIGZvciBmaW5kaW5nIGVsZW1lbnRzIGluIGRpcmVjdGlvbiBvbiBuYXZpZ2F0aW9uIGFuZCBmb3IgdHJhY2tpbmcgYWN0aXZlIGVsZW1lbnQgaW5zaWRlIHRoZSBncm91cC5cbiAqIFRyaWdnZXJzIGJsdXIgYW5kIGZvY3VzIG9uIGVsZW1lbnQgd2hlbiBhY3RpdmUgZWxlbWVudCBpcyBjaGFuZ2VkLCBhcyB3ZWxsIGFzIGNsaWNrIG9uIGVsZW1lbnQgb24gYEFjdGlvbi5TRUxFQ1RgLlxuICogV2lsbCBjYWxsIGBoaWRlVWkoKWAgb24gcGFzc2VkIGluIGNvbnRhaW5lciBpZiBgQWN0aW9uLkJBQ0tgIGlzIGNhbGxlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIE5hdmlnYXRpb25Hcm91cCB7XG4gIHByaXZhdGUgYWN0aXZlRWxlbWVudD86IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIGFjdGl2ZUVsZW1lbnRCZWZvcmVEaXNhYmxlPzogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgcmVhZG9ubHkgY29tcG9uZW50czogQ29tcG9uZW50PHVua25vd24+W107XG4gIHByaXZhdGUgcmVtb3ZlRWxlbWVudEhvdmVyRXZlbnRMaXN0ZW5lcnMgPSAoKSA9PiB7fTtcbiAgcHJpdmF0ZSByZWFkb25seSBldmVudFN1YnNjcmliZXI6IE5vZGVFdmVudFN1YnNjcmliZXI7XG5cbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IGNvbnRhaW5lcjogQ29udGFpbmVyPHVua25vd24+LCAuLi5jb21wb25lbnRzOiBDb21wb25lbnQ8dW5rbm93bj5bXSkge1xuICAgIHRoaXMuY29tcG9uZW50cyA9IGNvbXBvbmVudHM7XG4gICAgdGhpcy5ldmVudFN1YnNjcmliZXIgPSBuZXcgTm9kZUV2ZW50U3Vic2NyaWJlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIElmIG92ZXJ3cml0dGVuLCBhbGxvd3MgdG8gaW1wbGVtZW50IGN1c3RvbSBuYXZpZ2F0aW9uIGJlaGF2aW9yLiBQZXIgZGVmYXVsdCwgdGhlIGludGVybmFsIGhhbmRsZXIgd2lsbCBzdGlsbCBiZVxuICAgKiBleGVjdXRlZC4gVG8gcHJldmVudCBleGVjdXRpb24gb2YgdGhlIGRlZmF1bHQgbmF2aWdhdGlvbiBoYW5kbGVyLCBjYWxsIGBwcmV2ZW50RGVmYXVsdCgpYDtcbiAgICpcbiAgICogQHBhcmFtIGRpcmVjdGlvbiB7RGlyZWN0aW9ufSBUaGUgZGlyZWN0aW9uIHRvIG1vdmUgYWxvbmdcbiAgICogQHBhcmFtIHRhcmdldCB7SFRNTEVsZW1lbnR9IFRoZSB0YXJnZXQgZWxlbWVudCBmb3IgdGhlIGV2ZW50XG4gICAqIEBwYXJhbSBwcmV2ZW50RGVmYXVsdCB7KCkgPT4gdm9pZH0gQSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgd2lsbCBwcmV2ZW50IHRoZSBleGVjdXRpb24gb2YgdGhlIGRlZmF1bHQgaGFuZGxlclxuICAgKi9cbiAgcHVibGljIG9uTmF2aWdhdGlvbj86IE5hdmlnYXRpb25DYWxsYmFjaztcblxuICAvKipcbiAgICogSWYgb3ZlcndyaXR0ZW4sIGFsbG93cyB0byBpbXBsZW1lbnQgY3VzdG9tIGFjdGlvbiBiZWhhdmlvci4gUGVyIGRlZmF1bHQsIHRoZSBpbnRlcm5hbCBoYW5kbGVyIHdpbGwgc3RpbGwgYmVcbiAgICogZXhlY3V0ZWQuIFRvIHByZXZlbnQgZXhlY3V0aW9uIG9mIHRoZSBkZWZhdWx0IGFjdGlvbiBoYW5kbGVyLCBjYWxsIGBwcmV2ZW50RGVmYXVsdCgpYDtcbiAgICpcbiAgICogQHBhcmFtIGFjdGlvbiB7QWN0aW9ufSBUaGUgYWN0aW9uIHRoYXQgd2FzIGNhbGxlZFxuICAgKiBAcGFyYW0gdGFyZ2V0IHtIVE1MRWxlbWVudH0gVGhlIHRhcmdldCBlbGVtZW50IHRoYXQgYWN0aW9uIHdhcyBjYWxsZWQgb25cbiAgICogQHBhcmFtIHByZXZlbnREZWZhdWx0IHsoKSA9PiB2b2lkfSBBIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLCB3aWxsIHByZXZlbnQgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZGVmYXVsdCBoYW5kbGVyXG4gICAqL1xuICBwdWJsaWMgb25BY3Rpb24/OiBBY3Rpb25DYWxsYmFjaztcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYWN0aXZlIEhUTUxFbGVtZW50LlxuICAgKi9cbiAgcHVibGljIGdldEFjdGl2ZUVsZW1lbnQoKTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICBwcml2YXRlIGZvY3VzRWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgIHRoaXMuYmx1ckFjdGl2ZUVsZW1lbnQoKTtcbiAgICB0aGlzLmFjdGl2ZUVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuYWN0aXZlRWxlbWVudC5mb2N1cygpO1xuICB9XG5cbiAgcHJpdmF0ZSBibHVyQWN0aXZlRWxlbWVudCgpOiB2b2lkIHtcbiAgICB0aGlzLmFjdGl2ZUVsZW1lbnQ/LmJsdXIoKTtcbiAgfVxuXG4gIHByaXZhdGUgZm9jdXNGaXJzdEVsZW1lbnQoKTogdm9pZCB7XG4gICAgY29uc3QgZWxlbWVudCA9IGdldEh0bWxFbGVtZW50c0Zyb21Db21wb25lbnRzKHRoaXMuY29tcG9uZW50cylbMF07XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIHRoaXMuZm9jdXNFbGVtZW50KGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBkZWZhdWx0TmF2aWdhdGlvbkhhbmRsZXIoZGlyZWN0aW9uOiBEaXJlY3Rpb24pOiB2b2lkIHtcbiAgICBjb25zdCB0YXJnZXRFbGVtZW50ID0gZ2V0RWxlbWVudEluRGlyZWN0aW9uKFxuICAgICAgdGhpcy5hY3RpdmVFbGVtZW50LFxuICAgICAgZ2V0SHRtbEVsZW1lbnRzRnJvbUNvbXBvbmVudHModGhpcy5jb21wb25lbnRzKSxcbiAgICAgIGRpcmVjdGlvbixcbiAgICApO1xuXG4gICAgaWYgKHRhcmdldEVsZW1lbnQpIHtcbiAgICAgIHRoaXMuZm9jdXNFbGVtZW50KHRhcmdldEVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBkZWZhdWx0QWN0aW9uSGFuZGxlcihhY3Rpb246IEFjdGlvbik6IHZvaWQge1xuICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICBjYXNlKEFjdGlvbi5TRUxFQ1QpOlxuICAgICAgICB0aGlzLmFjdGl2ZUVsZW1lbnQuY2xpY2soKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlKEFjdGlvbi5CQUNLKTpcbiAgICAgICAgdGhpcy5jb250YWluZXIuaGlkZSgpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUlucHV0PFQ+KGRhdGE6IFQsIGRlZmF1bHRIYW5kbGVyOiAoZGF0YTogVCkgPT4gdm9pZCwgdXNlckhhbmRsZXI/OiBDYWxsYmFjazxUPik6IHZvaWQge1xuICAgIGxldCBoYW5kbGVEZWZhdWx0ID0gdHJ1ZTtcbiAgICBjb25zdCBwcmV2ZW50RGVmYXVsdCA9ICgpID0+IChoYW5kbGVEZWZhdWx0ID0gZmFsc2UpO1xuXG4gICAgdXNlckhhbmRsZXI/LihkYXRhLCB0aGlzLmFjdGl2ZUVsZW1lbnQsIHByZXZlbnREZWZhdWx0KTtcblxuICAgIGlmIChoYW5kbGVEZWZhdWx0KSB7XG4gICAgICBkZWZhdWx0SGFuZGxlci5jYWxsKHRoaXMsIGRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGEgbmF2aWdhdGlvbiBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIGRpcmVjdGlvbiBUaGUgZGlyZWN0aW9uIG9mIHRoZSBuYXZpZ2F0aW9uIGV2ZW50XG4gICAqL1xuICBwdWJsaWMgaGFuZGxlTmF2aWdhdGlvbihkaXJlY3Rpb246IERpcmVjdGlvbik6IHZvaWQge1xuICAgIGlmICghdGhpcy5hY3RpdmVFbGVtZW50KSB7XG4gICAgICAvLyBJZiB3ZSBkbyBub3QgaGF2ZSBhbiBhY3RpdmUgZWxlbWVudCwgdGhlIGFjdGl2ZSBlbGVtZW50IGhhcyBiZWVuIGRpc2FibGVkIGJ5IGEgbW91c2VsZWF2ZVxuICAgICAgLy8gZXZlbnQuIFdlIHNob3VsZCBjb250aW51ZSB0aGUgbmF2aWdhdGlvbiBhdCB0aGUgZXhhY3QgcGxhY2Ugd2hlcmUgd2UgbGVmdCBvZmYuXG4gICAgICBpZiAodGhpcy5hY3RpdmVFbGVtZW50QmVmb3JlRGlzYWJsZSkge1xuICAgICAgICB0aGlzLmZvY3VzRWxlbWVudCh0aGlzLmFjdGl2ZUVsZW1lbnRCZWZvcmVEaXNhYmxlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZm9jdXNGaXJzdEVsZW1lbnQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5oYW5kbGVJbnB1dChkaXJlY3Rpb24sIHRoaXMuZGVmYXVsdE5hdmlnYXRpb25IYW5kbGVyLCB0aGlzLm9uTmF2aWdhdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBhbiBhY3Rpb24gZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSBhY3Rpb24gVGhlIGFjdGlvbiBvZiB0aGUgZXZlbnRcbiAgICovXG4gIHB1YmxpYyBoYW5kbGVBY3Rpb24oYWN0aW9uOiBBY3Rpb24pOiB2b2lkIHtcbiAgICB0aGlzLmhhbmRsZUlucHV0KGFjdGlvbiwgdGhpcy5kZWZhdWx0QWN0aW9uSGFuZGxlciwgdGhpcy5vbkFjdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogRGlzYWJsZSBuYXZpZ2F0aW9uIGdyb3VwXG4gICAqXG4gICAqIENhbGwgYmx1ciBvbiBhY3RpdmUgZWxlbWVudCwgc2V0IGFzIHVuZGVmaW5lZCwgYW5kIHRyYWNrIGl0IGFzIGVsZW1lbnQgYmVmb3JlIGRpc2FibGUuXG4gICAqL1xuICBwdWJsaWMgZGlzYWJsZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5hY3RpdmVFbGVtZW50KSB7XG4gICAgICB0aGlzLmFjdGl2ZUVsZW1lbnRCZWZvcmVEaXNhYmxlID0gdGhpcy5hY3RpdmVFbGVtZW50O1xuICAgICAgdGhpcy5ibHVyQWN0aXZlRWxlbWVudCgpO1xuICAgICAgdGhpcy5hY3RpdmVFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFbmFibGUgbmF2aWdhdGlvbiBncm91cFxuICAgKlxuICAgKiBTZXRzIGFjdGl2ZSBlbGVtZW50IHRvIGVpdGhlciBlbGVtZW50IHRoYXQgd2FzIGFjdGl2ZSBiZWZvcmUgZGlzYWJsZSwgb3IgZmlyc3QgZWxlbWVudCBvZiB0cmFja2VkIGVsZW1lbnRzLlxuICAgKiBJZiBpdCBpcyBzZXR0aW5ncyBwYW5lbCwgaXQgd2lsbCBhbHdheXMgZm9jdXMgZmlyc3QgZWxlbWVudCBpbiB0aGUgbGlzdC5cbiAgICovXG4gIHB1YmxpYyBlbmFibGUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuYWN0aXZlRWxlbWVudEJlZm9yZURpc2FibGUgJiYgIWlzU2V0dGluZ3NQYW5lbCh0aGlzLmNvbnRhaW5lcikpIHtcbiAgICAgIHRoaXMuZm9jdXNFbGVtZW50KHRoaXMuYWN0aXZlRWxlbWVudEJlZm9yZURpc2FibGUpO1xuICAgICAgdGhpcy5hY3RpdmVFbGVtZW50QmVmb3JlRGlzYWJsZSA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mb2N1c0ZpcnN0RWxlbWVudCgpO1xuICAgIH1cblxuICAgIHRoaXMudHJhY2tFbGVtZW50SG92ZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVyIGZvciBgbW91c2VlbnRlcmAgb24gdHJhY2tlZCBlbGVtZW50cyB0byBlbnN1cmUgdHJhY2tpbmcgb2YgYWN0aXZlIGVsZW1lbnQgd2lsbCB3b3JrIHRvZ2V0aGVyXG4gICAqIGluIGNvbWJpbmF0aW9uIG9mIHVzaW5nIG1vdXNlIGFuZCBrZXkgZXZlbnRzLlxuICAgKi9cbiAgcHJpdmF0ZSB0cmFja0VsZW1lbnRIb3ZlcigpOiB2b2lkIHtcbiAgICB0aGlzLnJlbW92ZUVsZW1lbnRIb3ZlckV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgICBjb25zdCByZW1vdmVFdmVudExpc3RlbmVyRnVuY3Rpb25zID0gZ2V0SHRtbEVsZW1lbnRzRnJvbUNvbXBvbmVudHModGhpcy5jb21wb25lbnRzKS5tYXAoaHRtbEVsZW0gPT4ge1xuICAgICAgY29uc3QgZW50ZXJMaXN0ZW5lciA9IHRoaXMuZm9jdXNFbGVtZW50LmJpbmQodGhpcywgaHRtbEVsZW0pO1xuICAgICAgY29uc3QgZXhpdExpc3RlbmVyID0gKCkgPT4gdGhpcy5kaXNhYmxlKCk7XG5cbiAgICAgIHRoaXMuZXZlbnRTdWJzY3JpYmVyLm9uKGh0bWxFbGVtLCAnbW91c2VlbnRlcicsIGVudGVyTGlzdGVuZXIpO1xuICAgICAgdGhpcy5ldmVudFN1YnNjcmliZXIub24oaHRtbEVsZW0sICdtb3VzZWxlYXZlJywgZXhpdExpc3RlbmVyKTtcblxuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgdGhpcy5ldmVudFN1YnNjcmliZXIub2ZmKGh0bWxFbGVtLCAnbW91c2VlbnRlcicsIGVudGVyTGlzdGVuZXIpO1xuICAgICAgICB0aGlzLmV2ZW50U3Vic2NyaWJlci5vZmYoaHRtbEVsZW0sICdtb3VzZWxlYXZlJywgZXhpdExpc3RlbmVyKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICB0aGlzLnJlbW92ZUVsZW1lbnRIb3ZlckV2ZW50TGlzdGVuZXJzID0gKCkgPT4gcmVtb3ZlRXZlbnRMaXN0ZW5lckZ1bmN0aW9ucy5mb3JFYWNoKGZuID0+IGZuKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3Bvc2Ugb2YgbmF2aWdhdGlvbiBncm91cFxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgdGhpcy5ldmVudFN1YnNjcmliZXIucmVsZWFzZSgpO1xuICAgIHRoaXMuYWN0aXZlRWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNvbXBvbmVudHMuc3BsaWNlKDAsIHRoaXMuY29tcG9uZW50cy5sZW5ndGgpO1xuICAgIHRoaXMucmVtb3ZlRWxlbWVudEhvdmVyRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxufVxuIiwidHlwZSBMaXN0ZW5lcnMgPSAoW05vZGUsIEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3QsIGJvb2xlYW4gfCBBZGRFdmVudExpc3RlbmVyT3B0aW9uc10pW107XG5cbi8qKlxuICogQWxsb3dzIHRvIHN1YnNjcmliZSB0byBOb2RlIGV2ZW50cy5cbiAqL1xuZXhwb3J0IGNsYXNzIE5vZGVFdmVudFN1YnNjcmliZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IGF0dGFjaGVkTGlzdGVuZXJzOiBNYXA8a2V5b2YgSFRNTEVsZW1lbnRFdmVudE1hcCwgTGlzdGVuZXJzPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmF0dGFjaGVkTGlzdGVuZXJzID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRFdmVudExpc3RlbmVyc09mVHlwZSh0eXBlOiBrZXlvZiBIVE1MRWxlbWVudEV2ZW50TWFwKTogTGlzdGVuZXJzIHtcbiAgICBpZiAoIXRoaXMuYXR0YWNoZWRMaXN0ZW5lcnMuaGFzKHR5cGUpKSB7XG4gICAgICB0aGlzLmF0dGFjaGVkTGlzdGVuZXJzLnNldCh0eXBlLCBbXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuYXR0YWNoZWRMaXN0ZW5lcnMuZ2V0KHR5cGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgdGhlIGdpdmVuIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBub2RlLlxuICAgKlxuICAgKiBAcGFyYW0gbm9kZSBUaGUgbm9kZSB0byByZW1vdmUgdGhlIGV2ZW50IGxpc3RlbmVyIGZyb21cbiAgICogQHBhcmFtIHR5cGUgVGhlIGV2ZW50IHRvIGxpc3RlbiB0b1xuICAgKiBAcGFyYW0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIHRvIHJlbW92ZVxuICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgZXZlbnQgbGlzdGVuZXIgb3B0aW9uc1xuICAgKi9cbiAgcHVibGljIG9uKFxuICAgIG5vZGU6IE5vZGUsXG4gICAgdHlwZToga2V5b2YgSFRNTEVsZW1lbnRFdmVudE1hcCxcbiAgICBsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdCxcbiAgICBvcHRpb25zPzogYm9vbGVhbiB8IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zLFxuICApOiB2b2lkIHtcbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpO1xuICAgIHRoaXMuZ2V0RXZlbnRMaXN0ZW5lcnNPZlR5cGUodHlwZSkucHVzaChbbm9kZSwgbGlzdGVuZXIsIG9wdGlvbnNdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHRoZSBnaXZlbiBldmVudCBsaXN0ZW5lciBmcm9tIHRoZSBub2RlLlxuICAgKlxuICAgKiBAcGFyYW0gbm9kZSBUaGUgbm9kZSB0byBhdHRhY2ggdGhlIGV2ZW50IGxpc3RlbmVyIHRvXG4gICAqIEBwYXJhbSB0eXBlIFRoZSBldmVudCB0byBsaXN0ZW4gdG9cbiAgICogQHBhcmFtIGxpc3RlbmVyIFRoZSBsaXN0ZW5lciB0byBhZGRcbiAgICogQHBhcmFtIG9wdGlvbnMgVGhlIGV2ZW50IGxpc3RlbmVyIG9wdGlvbnNcbiAgICovXG4gIHB1YmxpYyBvZmYoXG4gICAgbm9kZTogTm9kZSxcbiAgICB0eXBlOiBrZXlvZiBIVE1MRWxlbWVudEV2ZW50TWFwLFxuICAgIGxpc3RlbmVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0LFxuICAgIG9wdGlvbnM/OiBib29sZWFuIHwgQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnMsXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGxpc3RlbmVyc09mVHlwZSA9IHRoaXMuZ2V0RXZlbnRMaXN0ZW5lcnNPZlR5cGUodHlwZSk7XG4gICAgY29uc3QgbGlzdGVuZXJJbmRleCA9IGxpc3RlbmVyc09mVHlwZS5maW5kSW5kZXgoKFtvdGhlck5vZGUsIG90aGVyTGlzdGVuZXIsIG90aGVyT3B0aW9uc10pID0+IHtcbiAgICAgIHJldHVybiBvdGhlck5vZGUgPT09IG5vZGUgJiYgb3RoZXJMaXN0ZW5lciA9PT0gbGlzdGVuZXIgJiYgb3RoZXJPcHRpb25zID09PSBvcHRpb25zO1xuICAgIH0pO1xuXG4gICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcblxuICAgIGlmIChsaXN0ZW5lckluZGV4ID4gLTEpIHtcbiAgICAgIGxpc3RlbmVyc09mVHlwZS5zcGxpY2UobGlzdGVuZXJJbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYWxsIGF0dGFjaGVkIGV2ZW50IGxpc3RlbmVycy5cbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIHRoaXMuYXR0YWNoZWRMaXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXJzT2ZUeXBlLCB0eXBlKSA9PiB7XG4gICAgICBsaXN0ZW5lcnNPZlR5cGUuZm9yRWFjaCgoW2VsZW1lbnQsIGxpc3RlbmVyLCBvcHRpb25zXSkgPT4ge1xuICAgICAgICB0aGlzLm9mZihlbGVtZW50LCB0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB0aGlzLmF0dGFjaGVkTGlzdGVuZXJzLmNsZWFyKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE5hdmlnYXRpb25Hcm91cCB9IGZyb20gJy4vbmF2aWdhdGlvbmdyb3VwJztcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvY29tcG9uZW50JztcbmltcG9ydCB7IFVJQ29udGFpbmVyIH0gZnJvbSAnLi4vY29tcG9uZW50cy91aWNvbnRhaW5lcic7XG5pbXBvcnQgeyBBY3Rpb24sIERpcmVjdGlvbiB9IGZyb20gJy4vdHlwZXMnO1xuXG4vKipcbiAqIEV4dGVuZHMgTmF2aWdhdGlvbkdyb3VwIGFuZCBwcm92aWRlcyBhZGRpdGlvbmFsIGxvZ2ljIGZvciBoaWRpbmcgYW5kIHNob3dpbmcgdGhlIFVJIG9uIHRoZSByb290IGNvbnRhaW5lci5cbiAqL1xuZXhwb3J0IGNsYXNzIFJvb3ROYXZpZ2F0aW9uR3JvdXAgZXh0ZW5kcyBOYXZpZ2F0aW9uR3JvdXAge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgY29udGFpbmVyOiBVSUNvbnRhaW5lciwgLi4uZWxlbWVudHM6IENvbXBvbmVudDx1bmtub3duPltdKSB7XG4gICAgc3VwZXIoY29udGFpbmVyLCAuLi5lbGVtZW50cyk7XG4gIH1cblxuICBwdWJsaWMgaGFuZGxlQWN0aW9uKGFjdGlvbjogQWN0aW9uKSB7XG4gICAgdGhpcy5jb250YWluZXIuc2hvd1VpKCk7XG5cbiAgICBzdXBlci5oYW5kbGVBY3Rpb24oYWN0aW9uKTtcbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVOYXZpZ2F0aW9uKGRpcmVjdGlvbjogRGlyZWN0aW9uKSB7XG4gICAgdGhpcy5jb250YWluZXIuc2hvd1VpKCk7XG5cbiAgICBzdXBlci5oYW5kbGVOYXZpZ2F0aW9uKGRpcmVjdGlvbik7XG4gIH1cblxuICBwcm90ZWN0ZWQgZGVmYXVsdEFjdGlvbkhhbmRsZXIoYWN0aW9uOiBBY3Rpb24pOiB2b2lkIHtcbiAgICBpZiAoYWN0aW9uID09PSBBY3Rpb24uQkFDSykge1xuICAgICAgdGhpcy5jb250YWluZXIuaGlkZVVpKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1cGVyLmRlZmF1bHRBY3Rpb25IYW5kbGVyKGFjdGlvbik7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgc3VwZXIucmVsZWFzZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBSb290TmF2aWdhdGlvbkdyb3VwIH0gZnJvbSAnLi9yb290bmF2aWdhdGlvbmdyb3VwJztcbmltcG9ydCB7IE5vZGVFdmVudFN1YnNjcmliZXIgfSBmcm9tICcuL25vZGVldmVudHN1YnNjcmliZXInO1xuaW1wb3J0IHsgQWN0aW9uLCBEaXJlY3Rpb24gfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7Z2V0Qm91bmRpbmdSZWN0RnJvbUVsZW1lbnR9IGZyb20gJy4vbmF2aWdhdGlvbmFsZ29yaXRobSc7XG5cbmNvbnN0IERlZmF1bHRTY3J1YlNwZWVkUGVyY2VudGFnZSA9IDAuMDA1O1xuY29uc3QgU2NydWJTcGVlZENsZWFySW50ZXJ2YWwgPSAxMDA7XG5jb25zdCBTY3J1YlNwZWVkTXVsdGlwbGllciA9IDEuMTtcblxuLyoqXG4gKiBIYW5kbGVzIFNwYXRpYWwgTmF2aWdhdGlvbiBpbnRlcmFjdGlvbiB3aXRoIHRoZSBzZWVrIGJhci4gRW5zdXJlcywgdGhhdCBzZWVrIG9wZXJhdGlvbnMgY2FuIGJlIGV4ZWN1dGVkIGFuZCB0aGF0IHRoZVxuICogc2NydWJiaW5nIHRvb2x0aXAgaXMgc2hvd24gYXMgaWYgdGhlIHVzZXIgc2NydWJiZWQgdXNpbmcgdGhlIG1vdXNlL3RvdWNoc2NyZWVuLlxuICovXG5leHBvcnQgY2xhc3MgU2Vla0JhckhhbmRsZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IGN1cnNvclBvc2l0aW9uID0geyB4OiAwLCB5OiAwfTtcbiAgcHJpdmF0ZSByZWFkb25seSBldmVudFN1YnNjcmliZXI6IE5vZGVFdmVudFN1YnNjcmliZXI7XG4gIHByaXZhdGUgaXNTY3J1YmJpbmcgPSBmYWxzZTtcbiAgcHJpdmF0ZSBzY3J1YlNwZWVkUmVzZXRUaW1lb3V0OiBudW1iZXI7XG4gIHByaXZhdGUgc2NydWJTcGVlZFBlcmNlbnRhZ2UgPSBEZWZhdWx0U2NydWJTcGVlZFBlcmNlbnRhZ2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSByb290TmF2aWdhdGlvbkdyb3VwOiBSb290TmF2aWdhdGlvbkdyb3VwKSB7XG4gICAgdGhpcy5yb290TmF2aWdhdGlvbkdyb3VwLm9uQWN0aW9uID0gdGhpcy5vbkFjdGlvbjtcbiAgICB0aGlzLmV2ZW50U3Vic2NyaWJlciA9IG5ldyBOb2RlRXZlbnRTdWJzY3JpYmVyKCk7XG4gICAgdGhpcy5yb290TmF2aWdhdGlvbkdyb3VwLm9uTmF2aWdhdGlvbiA9IHRoaXMub25OYXZpZ2F0aW9uO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVTY3J1YlNwZWVkUGVyY2VudGFnZSgpOiB2b2lkIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5zY3J1YlNwZWVkUmVzZXRUaW1lb3V0KTtcbiAgICB0aGlzLnNjcnViU3BlZWRQZXJjZW50YWdlICo9IFNjcnViU3BlZWRNdWx0aXBsaWVyO1xuICAgIHRoaXMuc2NydWJTcGVlZFJlc2V0VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KFxuICAgICAgKCkgPT4gdGhpcy5zY3J1YlNwZWVkUGVyY2VudGFnZSA9IERlZmF1bHRTY3J1YlNwZWVkUGVyY2VudGFnZSwgU2NydWJTcGVlZENsZWFySW50ZXJ2YWwsXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0SW5jcmVtZW50KGRpcmVjdGlvbjogRGlyZWN0aW9uLCBzZWVrQmFyV3JhcHBlcjogSFRNTEVsZW1lbnQpOiBudW1iZXIge1xuICAgIHRoaXMudXBkYXRlU2NydWJTcGVlZFBlcmNlbnRhZ2UoKTtcblxuICAgIGNvbnN0IHNlZWtCYXJXaWR0aCA9IHNlZWtCYXJXcmFwcGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuICAgIGNvbnN0IGluY3JlbWVudCA9IHNlZWtCYXJXaWR0aCAqIHRoaXMuc2NydWJTcGVlZFBlcmNlbnRhZ2U7XG5cbiAgICByZXR1cm4gZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uUklHSFQgPyBpbmNyZW1lbnQgOiAtaW5jcmVtZW50O1xuICB9XG5cbiAgcHJpdmF0ZSByZXNldEN1cnNvclBvc2l0aW9uKCk6IHZvaWQge1xuICAgIHRoaXMuY3Vyc29yUG9zaXRpb24ueCA9IDA7XG4gICAgdGhpcy5jdXJzb3JQb3NpdGlvbi55ID0gMDtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlQ3Vyc29yUG9zaXRpb24oZGlyZWN0aW9uOiBEaXJlY3Rpb24sIHNlZWtCYXJXcmFwcGVyOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgIHRoaXMuY3Vyc29yUG9zaXRpb24ueCArPSB0aGlzLmdldEluY3JlbWVudChkaXJlY3Rpb24sIHNlZWtCYXJXcmFwcGVyKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdGlhbGl6ZUN1cnNvclBvc2l0aW9uKHNlZWtCYXJXcmFwcGVyOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgIGNvbnN0IHBsYXliYWNrUG9zaXRpb25NYXJrZXIgPSBnZXRQbGF5YmFja1Bvc2l0aW9uTWFya2VyKHNlZWtCYXJXcmFwcGVyKTtcbiAgICBjb25zdCByZWN0ID0gZ2V0Qm91bmRpbmdSZWN0RnJvbUVsZW1lbnQocGxheWJhY2tQb3NpdGlvbk1hcmtlcik7XG5cblxuICAgIGNvbnN0IHN0YXJ0WCA9IHJlY3QueCArIChyZWN0LndpZHRoIC8gMik7XG4gICAgY29uc3Qgc3RhcnRZID0gcmVjdC55O1xuXG4gICAgdGhpcy5jdXJzb3JQb3NpdGlvbi54ID0gc3RhcnRYO1xuICAgIHRoaXMuY3Vyc29yUG9zaXRpb24ueSA9IHN0YXJ0WTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdGlhbGl6ZU9yVXBkYXRlQ3Vyc29yUG9zaXRpb24oc2Vla0JhcldyYXBwZXI6IEhUTUxFbGVtZW50LCBkaXJlY3Rpb246IERpcmVjdGlvbik6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzU2NydWJiaW5nKSB7XG4gICAgICB0aGlzLnVwZGF0ZUN1cnNvclBvc2l0aW9uKGRpcmVjdGlvbiwgc2Vla0JhcldyYXBwZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmluaXRpYWxpemVDdXJzb3JQb3NpdGlvbihzZWVrQmFyV3JhcHBlcik7XG4gICAgfVxuXG4gICAgdGhpcy5pc1NjcnViYmluZyA9IHRydWU7XG4gIH1cblxuICBwcml2YXRlIGdldEN1cnNvclBvc2l0aW9uTW91c2VFdmVudEluaXQoKTogTW91c2VFdmVudEluaXQge1xuICAgIHJldHVybiB7XG4gICAgICBjbGllbnRYOiB0aGlzLmN1cnNvclBvc2l0aW9uLngsXG4gICAgICBjbGllbnRZOiB0aGlzLmN1cnNvclBvc2l0aW9uLnksXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgZGlzcGF0Y2hNb3VzZU1vdmVFdmVudChzZWVrQmFyOiBFbGVtZW50KTogdm9pZCB7XG4gICAgc2Vla0Jhci5kaXNwYXRjaEV2ZW50KG5ldyBNb3VzZUV2ZW50KCdtb3VzZW1vdmUnLCB0aGlzLmdldEN1cnNvclBvc2l0aW9uTW91c2VFdmVudEluaXQoKSkpO1xuICB9XG5cbiAgcHJpdmF0ZSByZWFkb25seSBvbk5hdmlnYXRpb24gPSAoZGlyZWN0aW9uOiBEaXJlY3Rpb24sIHRhcmdldDogSFRNTEVsZW1lbnQsIHByZXZlbnREZWZhdWx0OiAoKSA9PiB2b2lkKTogdm9pZCA9PiB7XG4gICAgaWYgKCFpc1NlZWtCYXJXcmFwcGVyKHRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uVVAgfHwgZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uRE9XTikge1xuICAgICAgdGhpcy5zdG9wU2Vla2luZyhnZXRTZWVrQmFyKHRhcmdldCkpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5pbml0aWFsaXplT3JVcGRhdGVDdXJzb3JQb3NpdGlvbih0YXJnZXQsIGRpcmVjdGlvbik7XG4gICAgdGhpcy5kaXNwYXRjaE1vdXNlTW92ZUV2ZW50KGdldFNlZWtCYXIodGFyZ2V0KSk7XG5cbiAgICBwcmV2ZW50RGVmYXVsdCgpO1xuICB9O1xuXG4gIHByaXZhdGUgZGlzcGF0Y2hNb3VzZUNsaWNrRXZlbnQoc2Vla0JhcjogRWxlbWVudCk6IHZvaWQge1xuICAgIGNvbnN0IG1vdXNlRG93bkhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICBjb25zdCBtb3VzZUV2ZW50SW5pdCA9IHRoaXMuZ2V0Q3Vyc29yUG9zaXRpb25Nb3VzZUV2ZW50SW5pdCgpO1xuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBNb3VzZUV2ZW50KCdtb3VzZXVwJywgbW91c2VFdmVudEluaXQpKTtcbiAgICAgIHRoaXMuZXZlbnRTdWJzY3JpYmVyLm9mZihzZWVrQmFyLCAnbW91c2Vkb3duJywgbW91c2VEb3duSGFuZGxlcik7XG4gICAgICB0aGlzLnN0b3BTZWVraW5nKHNlZWtCYXIpO1xuICAgIH07XG5cbiAgICB0aGlzLmV2ZW50U3Vic2NyaWJlci5vbihzZWVrQmFyLCAnbW91c2Vkb3duJywgbW91c2VEb3duSGFuZGxlcik7XG4gICAgc2Vla0Jhci5kaXNwYXRjaEV2ZW50KG5ldyBNb3VzZUV2ZW50KCdtb3VzZWRvd24nKSk7XG4gIH1cblxuICBwcml2YXRlIHN0b3BTZWVraW5nKHNlZWtCYXI6IEVsZW1lbnQpOiB2b2lkIHtcbiAgICB0aGlzLnJlc2V0Q3Vyc29yUG9zaXRpb24oKTtcbiAgICB0aGlzLmlzU2NydWJiaW5nID0gZmFsc2U7XG4gICAgdGhpcy5kaXNwYXRjaE1vdXNlTGVhdmVFdmVudChzZWVrQmFyKTtcbiAgfVxuXG4gIHByaXZhdGUgZGlzcGF0Y2hNb3VzZUxlYXZlRXZlbnQoc2Vla0JhcjogRWxlbWVudCk6IHZvaWQge1xuICAgIHNlZWtCYXIuZGlzcGF0Y2hFdmVudChuZXcgTW91c2VFdmVudCgnbW91c2VsZWF2ZScpKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVhZG9ubHkgb25BY3Rpb24gPSAoYWN0aW9uOiBBY3Rpb24sIHRhcmdldDogSFRNTEVsZW1lbnQsIHByZXZlbnREZWZhdWx0OiAoKSA9PiB2b2lkKTogdm9pZCA9PiB7XG4gICAgaWYgKCFpc1NlZWtCYXJXcmFwcGVyKHRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzZWVrQmFyID0gZ2V0U2Vla0Jhcih0YXJnZXQpO1xuXG4gICAgaWYgKGFjdGlvbiA9PT0gQWN0aW9uLlNFTEVDVCAmJiB0aGlzLmlzU2NydWJiaW5nKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoTW91c2VDbGlja0V2ZW50KHNlZWtCYXIpO1xuICAgICAgcHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gQWN0aW9uLkJBQ0spIHtcbiAgICAgIHRoaXMuc3RvcFNlZWtpbmcoc2Vla0Jhcik7XG4gICAgICBwcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogUmVsZWFzZXMgdGhlIFNlZWtCcmFIYW5kbGVyLCBtYWtpbmcgc3VyZSBhbGwgZXZlbnQgc3Vic2NyaWJlcnMgYXJlIHJlbW92ZWQuXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLmV2ZW50U3Vic2NyaWJlci5yZWxlYXNlKCk7XG4gICAgdGhpcy5yb290TmF2aWdhdGlvbkdyb3VwLm9uQWN0aW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucm9vdE5hdmlnYXRpb25Hcm91cC5vbk5hdmlnYXRpb24gPSB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTZWVrQmFyV3JhcHBlcihlbGVtZW50OiBIVE1MRWxlbWVudCk6IGJvb2xlYW4ge1xuICByZXR1cm4gQXJyYXkuZnJvbShlbGVtZW50LmNsYXNzTGlzdCkuZmluZEluZGV4KGNsYXNzTmFtZSA9PiAvLXVpLXNlZWtiYXIkLy50ZXN0KGNsYXNzTmFtZSkpID4gLTE7XG59XG5cbmZ1bmN0aW9uIGdldFNlZWtCYXIoc2Vla0JhcldyYXBwZXI6IEhUTUxFbGVtZW50KTogRWxlbWVudCB7XG4gIHJldHVybiBzZWVrQmFyV3JhcHBlci5jaGlsZHJlbi5pdGVtKDApO1xufVxuXG5mdW5jdGlvbiBnZXRQbGF5YmFja1Bvc2l0aW9uTWFya2VyKHNlZWtCYXJXcmFwcGVyOiBIVE1MRWxlbWVudCk6IEhUTUxFbGVtZW50IHtcbiAgcmV0dXJuIHNlZWtCYXJXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJ1tjbGFzcyo9XCJzZWVrYmFyLXBsYXliYWNrcG9zaXRpb24tbWFya2VyXCJdJyk7XG59XG4iLCJpbXBvcnQgeyBOYXZpZ2F0aW9uR3JvdXAgfSBmcm9tICcuL25hdmlnYXRpb25ncm91cCc7XG5pbXBvcnQgeyBSb290TmF2aWdhdGlvbkdyb3VwIH0gZnJvbSAnLi9yb290bmF2aWdhdGlvbmdyb3VwJztcbmltcG9ydCB7IE5vZGVFdmVudFN1YnNjcmliZXIgfSBmcm9tICcuL25vZGVldmVudHN1YnNjcmliZXInO1xuaW1wb3J0IHsgU2Vla0JhckhhbmRsZXIgfSBmcm9tICcuL3NlZWtiYXJoYW5kbGVyJztcbmltcG9ydCB7IGdldEtleU1hcEZvclBsYXRmb3JtIH0gZnJvbSAnLi9rZXltYXAnO1xuaW1wb3J0IHsgQWN0aW9uLCBEaXJlY3Rpb24sIEtleU1hcCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgaXNBY3Rpb24sIGlzRGlyZWN0aW9uIH0gZnJvbSAnLi90eXBlZ3VhcmRzJztcblxuLyoqXG4gKiBTcGF0aWFsTmF2aWdhdGlvbiBrZWVwcyB0cmFjayBvZiBhbGwgbmF2aWdhdGlvbiBncm91cHMsIGFuZCB1cGRhdGVzIHRoZSBhY3RpdmUgbmF2aWdhdGlvbiBncm91cCB3aGVuIHZpc2liaWxpdHlcbiAqIGNoYW5nZXMgb24gZ3JvdXAgY29udGFpbmVyLlxuICpcbiAqIEl0IGxpc3RlbnMgdG8ga2V5IGV2ZW50cywgYW5kIHRyaWdnZXJzIGVpdGhlciBoYW5kbGVOYXZpZ2F0aW9uIG9yIGhhbmRsZUFjdGlvbiBvbiB0aGUgYWN0aXZlIGdyb3VwLlxuICogU2Vla0JhckhhbmRsZXIgd2lsbCBnZXQgaW5zdGFudGlhdGVkIHdpdGggcm9vdCBuYXZpZ2F0aW9uIGdyb3VwIGFuZCBkaXNwb3NlZCBvbiByZWxlYXNlIG9mIHRoZSBzcGF0aWFsIG5hdmlnYXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBTcGF0aWFsTmF2aWdhdGlvbiB7XG4gIHByaXZhdGUgdW5zdWJzY3JpYmVWaXNpYmlsaXR5Q2hhbmdlc0ZuczogKCgpID0+IHZvaWQpW107XG4gIHByaXZhdGUgcmVhZG9ubHkgbmF2aWdhdGlvbkdyb3VwczogTmF2aWdhdGlvbkdyb3VwW10gPSBbXTtcbiAgcHJpdmF0ZSByZWFkb25seSBhY3RpdmVOYXZpZ2F0aW9uR3JvdXBzOiBOYXZpZ2F0aW9uR3JvdXBbXTtcbiAgcHJpdmF0ZSByZWFkb25seSBldmVudFN1YnNjcmliZXI6IE5vZGVFdmVudFN1YnNjcmliZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgc2Vla0JhckhhbmRsZXI6IFNlZWtCYXJIYW5kbGVyO1xuICBwcml2YXRlIHJlYWRvbmx5IGtleU1hcDogS2V5TWFwO1xuXG4gIGNvbnN0cnVjdG9yKHJvb3ROYXZpZ2F0aW9uR3JvdXA6IFJvb3ROYXZpZ2F0aW9uR3JvdXAsIC4uLm5hdmlnYXRpb25Hcm91cHM6IE5hdmlnYXRpb25Hcm91cFtdKSB7XG4gICAgdGhpcy5zZWVrQmFySGFuZGxlciA9IG5ldyBTZWVrQmFySGFuZGxlcihyb290TmF2aWdhdGlvbkdyb3VwKTtcblxuICAgIHRoaXMuYWN0aXZlTmF2aWdhdGlvbkdyb3VwcyA9IFtdO1xuICAgIHRoaXMudW5zdWJzY3JpYmVWaXNpYmlsaXR5Q2hhbmdlc0ZucyA9IFtdO1xuICAgIHRoaXMuZXZlbnRTdWJzY3JpYmVyID0gbmV3IE5vZGVFdmVudFN1YnNjcmliZXIoKTtcbiAgICB0aGlzLm5hdmlnYXRpb25Hcm91cHMgPSBbcm9vdE5hdmlnYXRpb25Hcm91cCwgLi4ubmF2aWdhdGlvbkdyb3Vwc107XG4gICAgdGhpcy5rZXlNYXAgPSBnZXRLZXlNYXBGb3JQbGF0Zm9ybSgpO1xuXG4gICAgdGhpcy5zdWJzY3JpYmVUb05hdmlnYXRpb25Hcm91cFZpc2liaWxpdHlDaGFuZ2VzKCk7XG4gICAgdGhpcy5hdHRhY2hLZXlFdmVudEhhbmRsZXIoKTtcbiAgICB0aGlzLmVuYWJsZURlZmF1bHROYXZpZ2F0aW9uR3JvdXAoKTtcbiAgfVxuXG4gIHByaXZhdGUgYXR0YWNoS2V5RXZlbnRIYW5kbGVyKCk6IHZvaWQge1xuICAgIHRoaXMuZXZlbnRTdWJzY3JpYmVyLm9uKGRvY3VtZW50LCAna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RXZlbnQsIHRydWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBvblNob3cgPSAoZ3JvdXA6IE5hdmlnYXRpb25Hcm91cCk6IHZvaWQgPT4ge1xuICAgIHRoaXMuYWN0aXZlTmF2aWdhdGlvbkdyb3Vwcy5wdXNoKGdyb3VwKTtcbiAgICB0aGlzLnVwZGF0ZUVuYWJsZWROYXZpZ2F0aW9uR3JvdXAoKTtcbiAgfTtcblxuICBwcml2YXRlIG9uSGlkZSA9IChncm91cDogTmF2aWdhdGlvbkdyb3VwKTogdm9pZCA9PiB7XG4gICAgY29uc3QgZ3JvdXBJbmRleCA9IHRoaXMuYWN0aXZlTmF2aWdhdGlvbkdyb3Vwcy5maW5kSW5kZXgob3RoZXIgPT4gb3RoZXIgPT09IGdyb3VwKTtcblxuICAgIGlmIChncm91cEluZGV4ID4gLTEpIHtcbiAgICAgIGdyb3VwLmRpc2FibGUoKTtcbiAgICAgIHRoaXMuYWN0aXZlTmF2aWdhdGlvbkdyb3Vwcy5zcGxpY2UoZ3JvdXBJbmRleCwgMSk7XG4gICAgICB0aGlzLnVwZGF0ZUVuYWJsZWROYXZpZ2F0aW9uR3JvdXAoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZXMgdG8gb25IaWRlIGFuZCBvblNob3cgb24gYWxsIG5hdmlnYXRpb24gZ3JvdXBzIGNvbnRhaW5lcnMgYXMgU3BhdGlhbCBuYXZpZ2F0aW9uIHRyYWNrcyBhY3RpdmUgbmF2aWdhdGlvblxuICAgKiBncm91cCBiYXNlZCBvbiB0aGVpciBjb250YWluZXIgdmlzaWJpbGl0eS5cbiAgICovXG4gIHByaXZhdGUgc3Vic2NyaWJlVG9OYXZpZ2F0aW9uR3JvdXBWaXNpYmlsaXR5Q2hhbmdlcygpOiB2b2lkIHtcbiAgICB0aGlzLm5hdmlnYXRpb25Hcm91cHMuZm9yRWFjaChncm91cCA9PiB7XG4gICAgICBjb25zdCBvblNob3dIYW5kbGVyID0gKCkgPT4gdGhpcy5vblNob3coZ3JvdXApO1xuICAgICAgY29uc3Qgb25IaWRlSGFuZGxlciA9ICgpID0+IHRoaXMub25IaWRlKGdyb3VwKTtcblxuICAgICAgZ3JvdXAuY29udGFpbmVyLm9uU2hvdy5zdWJzY3JpYmUob25TaG93SGFuZGxlcik7XG4gICAgICBncm91cC5jb250YWluZXIub25IaWRlLnN1YnNjcmliZShvbkhpZGVIYW5kbGVyKTtcblxuICAgICAgdGhpcy51bnN1YnNjcmliZVZpc2liaWxpdHlDaGFuZ2VzRm5zLnB1c2goXG4gICAgICAgICgpID0+IGdyb3VwLmNvbnRhaW5lci5vblNob3cudW5zdWJzY3JpYmUob25TaG93SGFuZGxlciksXG4gICAgICAgICgpID0+IGdyb3VwLmNvbnRhaW5lci5vbkhpZGUudW5zdWJzY3JpYmUob25IaWRlSGFuZGxlciksXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSB1bnN1YnNjcmliZUZyb21OYXZpZ2F0aW9uR3JvdXBWaXNpYmlsaXR5Q2hhbmdlcygpOiB2b2lkIHtcbiAgICB0aGlzLnVuc3Vic2NyaWJlVmlzaWJpbGl0eUNoYW5nZXNGbnMuZm9yRWFjaCh1bnN1YiA9PiB1bnN1YigpKTtcbiAgICB0aGlzLnVuc3Vic2NyaWJlVmlzaWJpbGl0eUNoYW5nZXNGbnMgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJdCB3aWxsIGVuYWJsZSBncm91cCBvZiB3aGljaCBjb250YWluZXIgaXMgY3VycmVudGx5IHNob3duXG4gICAqIElmIHRoZXJlIGFyZSBubyBncm91cHMgd2l0aCBjb250YWluZXJzIHRoYXQgYXJlIGN1cnJlbnRseSB2aXNpYmxlLCBpdCB3aWxsIGVuYWJsZSByb290IG5hdmlnYXRpb24gZ3JvdXBcbiAgICovXG4gIHByaXZhdGUgZW5hYmxlRGVmYXVsdE5hdmlnYXRpb25Hcm91cCgpOiB2b2lkIHtcbiAgICBjb25zdCBpc1Nob3duID0gKGdyb3VwOiBOYXZpZ2F0aW9uR3JvdXApID0+IGdyb3VwLmNvbnRhaW5lci5pc1Nob3duKCk7XG4gICAgY29uc3QgZ3JvdXBUb0VuYWJsZSA9IHRoaXMubmF2aWdhdGlvbkdyb3Vwcy5maW5kKGlzU2hvd24pID8/IHRoaXMubmF2aWdhdGlvbkdyb3Vwc1swXTtcblxuICAgIGlmIChncm91cFRvRW5hYmxlKSB7XG4gICAgICB0aGlzLmFjdGl2ZU5hdmlnYXRpb25Hcm91cHMucHVzaChncm91cFRvRW5hYmxlKTtcbiAgICAgIHRoaXMudXBkYXRlRW5hYmxlZE5hdmlnYXRpb25Hcm91cCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNhYmxlcyBuYXZpZ2F0aW9uIGdyb3VwcyB0aGF0IGFyZSBubyBsb25nZXIgYWN0aXZlIGFuZCBjYWxscyBlbmFibGUgb24gbGFzdCBwdXNoZWQgbmF2aWdhdGlvbiBncm91cFxuICAgKi9cbiAgcHJpdmF0ZSB1cGRhdGVFbmFibGVkTmF2aWdhdGlvbkdyb3VwKCk6IHZvaWQge1xuICAgIHRoaXMuYWN0aXZlTmF2aWdhdGlvbkdyb3Vwcy5mb3JFYWNoKChncm91cCwgaWR4KSA9PiB7XG4gICAgICBpZiAoaWR4IDwgdGhpcy5hY3RpdmVOYXZpZ2F0aW9uR3JvdXBzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgZ3JvdXAuZGlzYWJsZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ3JvdXAuZW5hYmxlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBjdXJyZW50bHkgYWN0aXZlIG5hdmlnYXRpb24gZ3JvdXBcbiAgICovXG4gIHB1YmxpYyBnZXRBY3RpdmVOYXZpZ2F0aW9uR3JvdXAoKTogTmF2aWdhdGlvbkdyb3VwIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmVOYXZpZ2F0aW9uR3JvdXBzW3RoaXMuYWN0aXZlTmF2aWdhdGlvbkdyb3Vwcy5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYga2V5Ym9hcmQgZXZlbnQga2V5Y29kZSBpcyB0cmFja2VkIGVpdGhlciBhcyBEaXJlY3Rpb24gb3IgQWN0aW9uIGFuZCBjYWxscyBhcHByb3ByaWF0ZSBoYW5kbGVyIG9uIGFjdGl2ZVxuICAgKiBuYXZpZ2F0aW9uIGdyb3VwXG4gICAqXG4gICAqIEBwYXJhbSBlIHtLZXlib2FyZEV2ZW50fVxuICAgKi9cbiAgcHJpdmF0ZSBoYW5kbGVLZXlFdmVudCA9IChlOiBLZXlib2FyZEV2ZW50KTogdm9pZCA9PiB7XG4gICAgY29uc3QgZXZlbnQ6IERpcmVjdGlvbiB8IEFjdGlvbiB8IHVuZGVmaW5lZCA9IHRoaXMua2V5TWFwW2dldEtleUNvZGUoZSldO1xuXG4gICAgY29uc3QgYWN0aXZlID0gdGhpcy5nZXRBY3RpdmVOYXZpZ2F0aW9uR3JvdXAoKTtcbiAgICBpZiAoIWFjdGl2ZSB8fCAhYWN0aXZlLmNvbnRhaW5lciB8fCBhY3RpdmUuY29udGFpbmVyLmlzSGlkZGVuKCkgfHwgYWN0aXZlLmNvbnRhaW5lci5pc0Rpc2FibGVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXJlY3Rpb24oZXZlbnQpKSB7XG4gICAgICBhY3RpdmUuaGFuZGxlTmF2aWdhdGlvbihldmVudCk7XG5cbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICAgIGlmIChpc0FjdGlvbihldmVudCkpIHtcbiAgICAgIGFjdGl2ZS5oYW5kbGVBY3Rpb24oZXZlbnQpO1xuXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRGlzcG9zZSBvZiBTcGF0aWFsTmF2aWdhdGlvblxuICAgKlxuICAgKiBSZW1vdmUgYWxsIGV2ZW50IGhhbmRsZXJzLCByZWxlYXNlIHNlZWtiYXIgaGFuZGxlciBhbmQgcmVsZWFzZSBhbGwgbmF2aWdhdGlvbiBncm91cHMuXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLnVuc3Vic2NyaWJlRnJvbU5hdmlnYXRpb25Hcm91cFZpc2liaWxpdHlDaGFuZ2VzKCk7XG4gICAgdGhpcy5ldmVudFN1YnNjcmliZXIucmVsZWFzZSgpO1xuICAgIHRoaXMubmF2aWdhdGlvbkdyb3Vwcy5mb3JFYWNoKGdyb3VwID0+IGdyb3VwLnJlbGVhc2UoKSk7XG4gICAgdGhpcy5zZWVrQmFySGFuZGxlci5yZWxlYXNlKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0S2V5Q29kZShldmVudDogS2V5Ym9hcmRFdmVudCk6IG51bWJlciB7XG4gIHJldHVybiBldmVudC5rZXlDb2RlO1xufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9jb21wb25lbnQnO1xuaW1wb3J0IHsgU2V0dGluZ3NQYW5lbCB9IGZyb20gJy4uL2NvbXBvbmVudHMvc2V0dGluZ3NwYW5lbCc7XG5pbXBvcnQgeyBDb250YWluZXIgfSBmcm9tICcuLi9jb21wb25lbnRzL2NvbnRhaW5lcic7XG5pbXBvcnQgeyBMaXN0Qm94IH0gZnJvbSAnLi4vY29tcG9uZW50cy9saXN0Ym94JztcbmltcG9ydCB7IEFjdGlvbiwgRGlyZWN0aW9uIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NldHRpbmdzUGFuZWwoY29tcG9uZW50OiBDb21wb25lbnQ8dW5rbm93bj4pOiBjb21wb25lbnQgaXMgU2V0dGluZ3NQYW5lbCB7XG4gIHJldHVybiBjb21wb25lbnQgaW5zdGFuY2VvZiBTZXR0aW5nc1BhbmVsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb21wb25lbnQob2JqOiB1bmtub3duKTogb2JqIGlzIENvbXBvbmVudDx1bmtub3duPiB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgb2JqICE9PSB1bmRlZmluZWQgJiYgb2JqIGluc3RhbmNlb2YgQ29tcG9uZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb250YWluZXIob2JqOiB1bmtub3duKTogb2JqIGlzIENvbnRhaW5lcjx1bmtub3duPiB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgb2JqICE9PSB1bmRlZmluZWQgJiYgb2JqIGluc3RhbmNlb2YgQ29udGFpbmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNMaXN0Qm94KG9iajogdW5rbm93bik6IG9iaiBpcyBMaXN0Qm94IHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIExpc3RCb3g7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RpcmVjdGlvbihkaXJlY3Rpb246IHVua25vd24pOiBkaXJlY3Rpb24gaXMgRGlyZWN0aW9uIHtcbiAgcmV0dXJuIHR5cGVvZiBkaXJlY3Rpb24gPT09ICdzdHJpbmcnICYmIE9iamVjdC52YWx1ZXM8c3RyaW5nPihEaXJlY3Rpb24pLmluY2x1ZGVzKGRpcmVjdGlvbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0FjdGlvbihhY3Rpb246IHVua25vd24pOiBhY3Rpb24gaXMgQWN0aW9uIHtcbiAgcmV0dXJuIHR5cGVvZiBhY3Rpb24gPT09ICdzdHJpbmcnICYmIE9iamVjdC52YWx1ZXM8c3RyaW5nPihBY3Rpb24pLmluY2x1ZGVzKGFjdGlvbik7XG59XG4iLCJleHBvcnQgdHlwZSBDYWxsYmFjazxUPiA9IChkYXRhOiBULCB0YXJnZXQ6IEhUTUxFbGVtZW50LCBwcmV2ZW50RGVmYXVsdDogKCkgPT4gdm9pZCkgPT4gdm9pZDtcbmV4cG9ydCB0eXBlIE5hdmlnYXRpb25DYWxsYmFjayA9IENhbGxiYWNrPERpcmVjdGlvbj47XG5leHBvcnQgdHlwZSBBY3Rpb25DYWxsYmFjayA9IENhbGxiYWNrPEFjdGlvbj47XG5leHBvcnQgdHlwZSBLZXlNYXAgPSB7XG4gIFtrZXlDb2RlOiBudW1iZXJdOiBBY3Rpb24gfCBEaXJlY3Rpb247XG59O1xuXG5leHBvcnQgZW51bSBEaXJlY3Rpb24ge1xuICBVUCA9ICd1cCcsXG4gIERPV04gPSAnZG93bicsXG4gIExFRlQgPSAnbGVmdCcsXG4gIFJJR0hUID0gJ3JpZ2h0Jyxcbn1cblxuZXhwb3J0IGVudW0gQWN0aW9uIHtcbiAgU0VMRUNUID0gJ3NlbGVjdCcsXG4gIEJBQ0sgPSAnYmFjaycsXG59XG4iLCJleHBvcnQgbmFtZXNwYWNlIFN0b3JhZ2VVdGlscyB7XG4gIGxldCBoYXNMb2NhbFN0b3JhZ2VDYWNoZTogYm9vbGVhbjtcblxuICBleHBvcnQgZnVuY3Rpb24gaGFzTG9jYWxTdG9yYWdlKCk6IGJvb2xlYW4ge1xuICAgIGlmIChoYXNMb2NhbFN0b3JhZ2VDYWNoZSkge1xuICAgICAgcmV0dXJuIGhhc0xvY2FsU3RvcmFnZUNhY2hlO1xuICAgIH1cblxuICAgIC8vIGhhc0xvY2FsU3RvcmFnZSBpcyB1c2VkIHRvIHNhZmVseSBlbnN1cmUgd2UgY2FuIHVzZSBsb2NhbFN0b3JhZ2VcbiAgICAvLyB0YWtlbiBmcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XZWJfU3RvcmFnZV9BUEkvVXNpbmdfdGhlX1dlYl9TdG9yYWdlX0FQSSNGZWF0dXJlLWRldGVjdGluZ19sb2NhbFN0b3JhZ2VcbiAgICBsZXQgc3RvcmFnZTogYW55ID0geyBsZW5ndGg6IDAgfTtcbiAgICB0cnkge1xuICAgICAgc3RvcmFnZSA9IHdpbmRvd1snbG9jYWxTdG9yYWdlJ107XG4gICAgICBsZXQgeCA9ICdfX3N0b3JhZ2VfdGVzdF9fJztcbiAgICAgIHN0b3JhZ2Uuc2V0SXRlbSh4LCB4KTtcbiAgICAgIHN0b3JhZ2UucmVtb3ZlSXRlbSh4KTtcbiAgICAgIGhhc0xvY2FsU3RvcmFnZUNhY2hlID0gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgIGhhc0xvY2FsU3RvcmFnZUNhY2hlID0gZSBpbnN0YW5jZW9mIERPTUV4Y2VwdGlvbiAmJiAoXG4gICAgICAgICAgLy8gZXZlcnl0aGluZyBleGNlcHQgRmlyZWZveFxuICAgICAgICBlLmNvZGUgPT09IDIyIHx8XG4gICAgICAgIC8vIEZpcmVmb3hcbiAgICAgICAgZS5jb2RlID09PSAxMDE0IHx8XG4gICAgICAgIC8vIHRlc3QgbmFtZSBmaWVsZCB0b28sIGJlY2F1c2UgY29kZSBtaWdodCBub3QgYmUgcHJlc2VudFxuICAgICAgICAvLyBldmVyeXRoaW5nIGV4Y2VwdCBGaXJlZm94XG4gICAgICAgIGUubmFtZSA9PT0gJ1F1b3RhRXhjZWVkZWRFcnJvcicgfHxcbiAgICAgICAgLy8gRmlyZWZveFxuICAgICAgICBlLm5hbWUgPT09ICdOU19FUlJPUl9ET01fUVVPVEFfUkVBQ0hFRCcpICYmXG4gICAgICAgIC8vIGFja25vd2xlZGdlIFF1b3RhRXhjZWVkZWRFcnJvciBvbmx5IGlmIHRoZXJlJ3Mgc29tZXRoaW5nIGFscmVhZHkgc3RvcmVkXG4gICAgICAgIHN0b3JhZ2UubGVuZ3RoICE9PSAwO1xuICAgIH1cbiAgICByZXR1cm4gaGFzTG9jYWxTdG9yYWdlQ2FjaGU7XG4gIH1cblxuICAvKipcbiAgICogU3RvcmVzIGEgc3RyaW5nIGl0ZW0gaW50byBsb2NhbFN0b3JhZ2UuXG4gICAqIEBwYXJhbSBrZXkgdGhlIGl0ZW0ncyBrZXlcbiAgICogQHBhcmFtIGRhdGEgdGhlIGl0ZW0ncyBkYXRhXG4gICAqL1xuICBleHBvcnQgZnVuY3Rpb24gc2V0SXRlbShrZXk6IHN0cmluZywgZGF0YTogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKFN0b3JhZ2VVdGlscy5oYXNMb2NhbFN0b3JhZ2UoKSkge1xuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgZGF0YSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYW4gaXRlbSdzIHN0cmluZyB2YWx1ZSBmcm9tIHRoZSBsb2NhbFN0b3JhZ2UuXG4gICAqIEBwYXJhbSBrZXkgdGhlIGtleSB0byBsb29rIHVwIGl0cyBhc3NvY2lhdGVkIHZhbHVlXG4gICAqIEByZXR1cm4ge3N0cmluZyB8IG51bGx9IFJldHVybnMgdGhlIHN0cmluZyBpZiBmb3VuZCwgbnVsbCBpZiB0aGVyZSBpcyBubyBkYXRhIHN0b3JlZCBmb3IgdGhlIGtleVxuICAgKi9cbiAgZXhwb3J0IGZ1bmN0aW9uIGdldEl0ZW0oa2V5OiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgICBpZiAoU3RvcmFnZVV0aWxzLmhhc0xvY2FsU3RvcmFnZSgpKSB7XG4gICAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9yZXMgYW4gb2JqZWN0IGludG8gbG9jYWxTdG9yYWdlLiBUaGUgb2JqZWN0IHdpbGwgYmUgc2VyaWFsaXplZCB0byBKU09OLiBUaGUgZm9sbG93aW5nIHR5cGVzIGFyZSBzdXBwb3J0ZWRcbiAgICogaW4gYWRkaXRpb24gdG8gdGhlIGRlZmF1bHQgdHlwZXM6XG4gICAqICAtIENvbG9yVXRpbHMuQ29sb3JcbiAgICpcbiAgICogQHBhcmFtIGtleSB0aGUga2V5IHRvIHN0b3JlIHRoZSBkYXRhIHRvXG4gICAqIEBwYXJhbSBkYXRhIHRoZSBvYmplY3QgdG8gc3RvcmVcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBzZXRPYmplY3Q8VD4oa2V5OiBzdHJpbmcsIGRhdGE6IFQpOiB2b2lkIHtcbiAgICBpZiAoU3RvcmFnZVV0aWxzLmhhc0xvY2FsU3RvcmFnZSgpKSB7XG4gICAgICBsZXQganNvbiA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgICAgc2V0SXRlbShrZXksIGpzb24pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGFuIG9iamVjdCBmb3IgdGhlIGdpdmVuIGtleSBmcm9tIGxvY2FsU3RvcmFnZS4gVGhlIG9iamVjdCB3aWxsIGJlIGRlc2VyaWFsaXplZCBmcm9tIEpTT04uIEJlc2lkZSB0aGVcbiAgICogZGVmYXVsdCB0eXBlcywgdGhlIGZvbGxvd2luZyB0eXBlcyBhcmUgc3VwcG9ydGVkOlxuICAgKiAgLSBDb2xvclV0aWxzLkNvbG9yXG4gICAqXG4gICAqIEBwYXJhbSBrZXkgdGhlIGtleSB0byBsb29rIHVwIGl0cyBhc3NvY2lhdGVkIG9iamVjdFxuICAgKiBAcmV0dXJuIHthbnl9IFJldHVybnMgdGhlIG9iamVjdCBpZiBmb3VuZCwgbnVsbCBvdGhlcndpc2VcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRPYmplY3Q8VD4oa2V5OiBzdHJpbmcpOiBUIHtcbiAgICBpZiAoU3RvcmFnZVV0aWxzLmhhc0xvY2FsU3RvcmFnZSgpKSB7XG4gICAgICBsZXQganNvbiA9IGdldEl0ZW0oa2V5KTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBsZXQgb2JqZWN0ID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICAgICAgcmV0dXJuIDxUPm9iamVjdDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbmV4cG9ydCBuYW1lc3BhY2UgU3RyaW5nVXRpbHMge1xuXG4gIGV4cG9ydCBsZXQgRk9STUFUX0hITU1TUzogc3RyaW5nID0gJ2hoOm1tOnNzJztcbiAgZXhwb3J0IGxldCBGT1JNQVRfTU1TUzogc3RyaW5nID0gJ21tOnNzJztcblxuICAvKipcbiAgICogRm9ybWF0cyBhIG51bWJlciBvZiBzZWNvbmRzIGludG8gYSB0aW1lIHN0cmluZyB3aXRoIHRoZSBwYXR0ZXJuIGhoOm1tOnNzLlxuICAgKlxuICAgKiBAcGFyYW0gdG90YWxTZWNvbmRzIHRoZSB0b3RhbCBudW1iZXIgb2Ygc2Vjb25kcyB0byBmb3JtYXQgdG8gc3RyaW5nXG4gICAqIEBwYXJhbSBmb3JtYXQgdGhlIHRpbWUgZm9ybWF0IHRvIG91dHB1dCAoZGVmYXVsdDogaGg6bW06c3MpXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBmb3JtYXR0ZWQgdGltZSBzdHJpbmdcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBzZWNvbmRzVG9UaW1lKHRvdGFsU2Vjb25kczogbnVtYmVyLCBmb3JtYXQ6IHN0cmluZyA9IEZPUk1BVF9ISE1NU1MpOiBzdHJpbmcge1xuICAgIGxldCBpc05lZ2F0aXZlID0gdG90YWxTZWNvbmRzIDwgMDtcblxuICAgIGlmIChpc05lZ2F0aXZlKSB7XG4gICAgICAvLyBJZiB0aGUgdGltZSBpcyBuZWdhdGl2ZSwgd2UgbWFrZSBpdCBwb3NpdGl2ZSBmb3IgdGhlIGNhbGN1bGF0aW9uIGJlbG93XG4gICAgICAvLyAoZWxzZSB3ZSdkIGdldCBhbGwgbmVnYXRpdmUgbnVtYmVycykgYW5kIHJlYXR0YWNoIHRoZSBuZWdhdGl2ZSBzaWduIGxhdGVyLlxuICAgICAgdG90YWxTZWNvbmRzID0gLXRvdGFsU2Vjb25kcztcbiAgICB9XG5cbiAgICAvLyBTcGxpdCBpbnRvIHNlcGFyYXRlIHRpbWUgcGFydHNcbiAgICBsZXQgaG91cnMgPSBNYXRoLmZsb29yKHRvdGFsU2Vjb25kcyAvIDM2MDApO1xuICAgIGxldCBtaW51dGVzID0gTWF0aC5mbG9vcih0b3RhbFNlY29uZHMgLyA2MCkgLSBob3VycyAqIDYwO1xuICAgIGxldCBzZWNvbmRzID0gTWF0aC5mbG9vcih0b3RhbFNlY29uZHMpICUgNjA7XG5cbiAgICByZXR1cm4gKGlzTmVnYXRpdmUgPyAnLScgOiAnJykgKyBmb3JtYXRcbiAgICAgICAgLnJlcGxhY2UoJ2hoJywgbGVmdFBhZFdpdGhaZXJvcyhob3VycywgMikpXG4gICAgICAgIC5yZXBsYWNlKCdtbScsIGxlZnRQYWRXaXRoWmVyb3MobWludXRlcywgMikpXG4gICAgICAgIC5yZXBsYWNlKCdzcycsIGxlZnRQYWRXaXRoWmVyb3Moc2Vjb25kcywgMikpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHNlY29uZHNUb1RleHQodG90YWxTZWNvbmRzOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IGlzTmVnYXRpdmUgPSB0b3RhbFNlY29uZHMgPCAwO1xuXG4gICAgaWYgKGlzTmVnYXRpdmUpIHtcbiAgICAgIC8vIElmIHRoZSB0aW1lIGlzIG5lZ2F0aXZlLCB3ZSBtYWtlIGl0IHBvc2l0aXZlIGZvciB0aGUgY2FsY3VsYXRpb24gYmVsb3dcbiAgICAgIC8vIChlbHNlIHdlJ2QgZ2V0IGFsbCBuZWdhdGl2ZSBudW1iZXJzKSBhbmQgcmVhdHRhY2ggdGhlIG5lZ2F0aXZlIHNpZ24gbGF0ZXIuXG4gICAgICB0b3RhbFNlY29uZHMgPSAtdG90YWxTZWNvbmRzO1xuICAgIH1cblxuICAgIC8vIFNwbGl0IGludG8gc2VwYXJhdGUgdGltZSBwYXJ0c1xuICAgIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcih0b3RhbFNlY29uZHMgLyAzNjAwKTtcbiAgICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcih0b3RhbFNlY29uZHMgLyA2MCkgLSBob3VycyAqIDYwO1xuICAgIGNvbnN0IHNlY29uZHMgPSBNYXRoLmZsb29yKHRvdGFsU2Vjb25kcykgJSA2MDtcblxuICAgIHJldHVybiAoaXNOZWdhdGl2ZSA/ICctJyA6ICcnKSArXG4gICAgKGhvdXJzICE9PSAwID8gYCR7bGVmdFBhZFdpdGhaZXJvcyhob3VycywgMil9ICR7aTE4bi5wZXJmb3JtTG9jYWxpemF0aW9uKGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy50aW1lLmhvdXJzJykpfSBgIDogJycpICtcbiAgICAobWludXRlcyAhPT0gMCA/IGAke2xlZnRQYWRXaXRoWmVyb3MobWludXRlcywgMil9ICR7aTE4bi5wZXJmb3JtTG9jYWxpemF0aW9uKGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy50aW1lLm1pbnV0ZXMnKSl9IGAgOiAnJykgK1xuICAgIGAke2xlZnRQYWRXaXRoWmVyb3Moc2Vjb25kcywgMil9ICR7aTE4bi5wZXJmb3JtTG9jYWxpemF0aW9uKGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy50aW1lLnNlY29uZHMnKSl9YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIG51bWJlciB0byBhIHN0cmluZyBhbmQgbGVmdC1wYWRzIGl0IHdpdGggemVyb3MgdG8gdGhlIHNwZWNpZmllZCBsZW5ndGguXG4gICAqIEV4YW1wbGU6IGxlZnRQYWRXaXRoWmVyb3MoMTIzLCA1KSA9PiAnMDAxMjMnXG4gICAqXG4gICAqIEBwYXJhbSBudW0gdGhlIG51bWJlciB0byBjb252ZXJ0IHRvIHN0cmluZyBhbmQgcGFkIHdpdGggemVyb3NcbiAgICogQHBhcmFtIGxlbmd0aCB0aGUgZGVzaXJlZCBsZW5ndGggb2YgdGhlIHBhZGRlZCBzdHJpbmdcbiAgICogQHJldHVybnMge3N0cmluZ30gdGhlIHBhZGRlZCBudW1iZXIgYXMgc3RyaW5nXG4gICAqL1xuICBmdW5jdGlvbiBsZWZ0UGFkV2l0aFplcm9zKG51bTogbnVtYmVyIHwgc3RyaW5nLCBsZW5ndGg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgbGV0IHRleHQgPSBudW0gKyAnJztcbiAgICBsZXQgcGFkZGluZyA9ICcwMDAwMDAwMDAwJy5zdWJzdHIoMCwgbGVuZ3RoIC0gdGV4dC5sZW5ndGgpO1xuICAgIHJldHVybiBwYWRkaW5nICsgdGV4dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaWxscyBvdXQgcGxhY2Vob2xkZXJzIGluIGFuIGFkIG1lc3NhZ2UuXG4gICAqXG4gICAqIEhhcyB0aGUgcGxhY2Vob2xkZXJzICd7cmVtYWluaW5nVGltZVtmb3JtYXRTdHJpbmddfScsICd7cGxheWVkVGltZVtmb3JtYXRTdHJpbmddfScgYW5kXG4gICAqICd7YWREdXJhdGlvbltmb3JtYXRTdHJpbmddfScsIHdoaWNoIGFyZSByZXBsYWNlZCBieSB0aGUgcmVtYWluaW5nIHRpbWUgdW50aWwgdGhlIGFkIGNhbiBiZSBza2lwcGVkLCB0aGUgY3VycmVudFxuICAgKiB0aW1lIG9yIHRoZSBhZCBkdXJhdGlvbi4gVGhlIGZvcm1hdCBzdHJpbmcgaXMgb3B0aW9uYWwuIElmIG5vdCBzcGVjaWZpZWQsIHRoZSBwbGFjZWhvbGRlciBpcyByZXBsYWNlZCBieSB0aGUgdGltZVxuICAgKiBpbiBzZWNvbmRzLiBJZiBzcGVjaWZpZWQsIGl0IG11c3QgYmUgb2YgdGhlIGZvbGxvd2luZyBmb3JtYXQ6XG4gICAqIC0gJWQgLSBJbnNlcnRzIHRoZSB0aW1lIGFzIGFuIGludGVnZXIuXG4gICAqIC0gJTBOZCAtIEluc2VydHMgdGhlIHRpbWUgYXMgYW4gaW50ZWdlciB3aXRoIGxlYWRpbmcgemVyb2VzLCBpZiB0aGUgbGVuZ3RoIG9mIHRoZSB0aW1lIHN0cmluZyBpcyBzbWFsbGVyIHRoYW4gTi5cbiAgICogLSAlZiAtIEluc2VydHMgdGhlIHRpbWUgYXMgYSBmbG9hdC5cbiAgICogLSAlME5mIC0gSW5zZXJ0cyB0aGUgdGltZSBhcyBhIGZsb2F0IHdpdGggbGVhZGluZyB6ZXJvZXMuXG4gICAqIC0gJS5NZiAtIEluc2VydHMgdGhlIHRpbWUgYXMgYSBmbG9hdCB3aXRoIE0gZGVjaW1hbCBwbGFjZXMuIENhbiBiZSBjb21iaW5lZCB3aXRoICUwTmYsIGUuZy4gJTA0LjJmICh0aGUgdGltZVxuICAgKiAxMC4xMjMgd291bGQgYmUgcHJpbnRlZCBhcyAwMDEwLjEyKS5cbiAgICogLSAlaGg6bW06c3NcbiAgICogLSAlbW06c3NcbiAgICpcbiAgICogRXhhbXBsZXM6XG4gICAqIC0geyB0ZXh0OiAnQWQ6IHtyZW1haW5pbmdUaW1lJW1tOnNzfSBzZWNzJyB9XG4gICAqIEFuIGlucHV0IHZhbHVlIG9mIDEwMCB3b3VsZCBiZSBkaXNwbGF5ZWQgYXM6ICdBZDogMDE6NDAgc2VjcydcbiAgICogLSB7IHRleHQ6ICdBZDoge3JlbWFpbmluZ1RpbWUlZn0gc2VjcycgfVxuICAgKiBBbiBpbnB1dCB2YWx1ZSBvZiAxMDAgd291bGQgYmUgZGlzcGxheWVkIGFzOiAnQWQ6IDEwMC4wIHNlY3MnXG4gICAqXG4gICAqIEBwYXJhbSBhZE1lc3NhZ2UgYW4gYWQgbWVzc2FnZSB3aXRoIG9wdGlvbmFsIHBsYWNlaG9sZGVycyB0byBmaWxsXG4gICAqIEBwYXJhbSBza2lwT2Zmc2V0IGlmIHNwZWNpZmllZCwge3JlbWFpbmluZ1RpbWV9IHdpbGwgYmUgZmlsbGVkIHdpdGggdGhlIHJlbWFpbmluZyB0aW1lIHVudGlsIHRoZSBhZCBjYW4gYmUgc2tpcHBlZFxuICAgKiBAcGFyYW0gcGxheWVyIHRoZSBwbGF5ZXIgdG8gZ2V0IHRoZSB0aW1lIGRhdGEgZnJvbVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgYWQgbWVzc2FnZSB3aXRoIGZpbGxlZCBwbGFjZWhvbGRlcnNcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiByZXBsYWNlQWRNZXNzYWdlUGxhY2Vob2xkZXJzKGFkTWVzc2FnZTogc3RyaW5nLCBza2lwT2Zmc2V0OiBudW1iZXIsIHBsYXllcjogUGxheWVyQVBJKSB7XG4gICAgbGV0IGFkTWVzc2FnZVBsYWNlaG9sZGVyUmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgJ1xcXFx7KHJlbWFpbmluZ1RpbWV8cGxheWVkVGltZXxhZER1cmF0aW9uKSh9fCUoKDBbMS05XVxcXFxkKihcXFxcLlxcXFxkKyhkfGYpfGR8Zil8XFxcXC5cXFxcZCtmfGR8Zil8aGg6bW06c3N8bW06c3MpfSknLFxuICAgICAgJ2cnLFxuICAgICk7XG5cbiAgICByZXR1cm4gYWRNZXNzYWdlLnJlcGxhY2UoYWRNZXNzYWdlUGxhY2Vob2xkZXJSZWdleCwgKGZvcm1hdFN0cmluZykgPT4ge1xuICAgICAgbGV0IHRpbWUgPSAwO1xuICAgICAgaWYgKGZvcm1hdFN0cmluZy5pbmRleE9mKCdyZW1haW5pbmdUaW1lJykgPiAtMSkge1xuICAgICAgICBpZiAoc2tpcE9mZnNldCkge1xuICAgICAgICAgIHRpbWUgPSBNYXRoLmNlaWwoc2tpcE9mZnNldCAtIHBsYXllci5nZXRDdXJyZW50VGltZSgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lID0gcGxheWVyLmdldER1cmF0aW9uKCkgLSBwbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChmb3JtYXRTdHJpbmcuaW5kZXhPZigncGxheWVkVGltZScpID4gLTEpIHtcbiAgICAgICAgdGltZSA9IHBsYXllci5nZXRDdXJyZW50VGltZSgpO1xuICAgICAgfSBlbHNlIGlmIChmb3JtYXRTdHJpbmcuaW5kZXhPZignYWREdXJhdGlvbicpID4gLTEpIHtcbiAgICAgICAgdGltZSA9IHBsYXllci5nZXREdXJhdGlvbigpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZvcm1hdE51bWJlcihNYXRoLnJvdW5kKHRpbWUpLCBmb3JtYXRTdHJpbmcpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0TnVtYmVyKHRpbWU6IG51bWJlciwgZm9ybWF0OiBzdHJpbmcpIHtcbiAgICBsZXQgZm9ybWF0U3RyaW5nVmFsaWRhdGlvblJlZ2V4ID0gLyUoKDBbMS05XVxcZCooXFwuXFxkKyhkfGYpfGR8Zil8XFwuXFxkK2Z8ZHxmKXxoaDptbTpzc3xtbTpzcykvO1xuICAgIGxldCBsZWFkaW5nWmVyb2VzUmVnZXggPSAvKCUwWzEtOV1cXGQqKSg/PShcXC5cXGQrZnxmfGQpKS87XG4gICAgbGV0IGRlY2ltYWxQbGFjZXNSZWdleCA9IC9cXC5cXGQqKD89ZikvO1xuXG4gICAgaWYgKCFmb3JtYXRTdHJpbmdWYWxpZGF0aW9uUmVnZXgudGVzdChmb3JtYXQpKSB7XG4gICAgICAvLyBJZiB0aGUgZm9ybWF0IGlzIGludmFsaWQsIHdlIHNldCBhIGRlZmF1bHQgZmFsbGJhY2sgZm9ybWF0XG4gICAgICBmb3JtYXQgPSAnJWQnO1xuICAgIH1cblxuICAgIC8vIERldGVybWluZSB0aGUgbnVtYmVyIG9mIGxlYWRpbmcgemVyb3NcbiAgICBsZXQgbGVhZGluZ1plcm9lcyA9IDA7XG4gICAgbGV0IGxlYWRpbmdaZXJvZXNNYXRjaGVzID0gZm9ybWF0Lm1hdGNoKGxlYWRpbmdaZXJvZXNSZWdleCk7XG4gICAgaWYgKGxlYWRpbmdaZXJvZXNNYXRjaGVzKSB7XG4gICAgICBsZWFkaW5nWmVyb2VzID0gcGFyc2VJbnQobGVhZGluZ1plcm9lc01hdGNoZXNbMF0uc3Vic3RyaW5nKDIpKTtcbiAgICB9XG5cbiAgICAvLyBEZXRlcm1pbmUgdGhlIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlc1xuICAgIGxldCBudW1EZWNpbWFsUGxhY2VzID0gbnVsbDtcbiAgICBsZXQgZGVjaW1hbFBsYWNlc01hdGNoZXMgPSBmb3JtYXQubWF0Y2goZGVjaW1hbFBsYWNlc1JlZ2V4KTtcbiAgICBpZiAoZGVjaW1hbFBsYWNlc01hdGNoZXMgJiYgIWlzTmFOKHBhcnNlSW50KGRlY2ltYWxQbGFjZXNNYXRjaGVzWzBdLnN1YnN0cmluZygxKSkpKSB7XG4gICAgICBudW1EZWNpbWFsUGxhY2VzID0gcGFyc2VJbnQoZGVjaW1hbFBsYWNlc01hdGNoZXNbMF0uc3Vic3RyaW5nKDEpKTtcbiAgICAgIGlmIChudW1EZWNpbWFsUGxhY2VzID4gMjApIHtcbiAgICAgICAgbnVtRGVjaW1hbFBsYWNlcyA9IDIwO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZsb2F0IGZvcm1hdFxuICAgIGlmIChmb3JtYXQuaW5kZXhPZignZicpID4gLTEpIHtcbiAgICAgIGxldCB0aW1lU3RyaW5nID0gJyc7XG5cbiAgICAgIGlmIChudW1EZWNpbWFsUGxhY2VzICE9PSBudWxsKSB7XG4gICAgICAgIC8vIEFwcGx5IGZpeGVkIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlc1xuICAgICAgICB0aW1lU3RyaW5nID0gdGltZS50b0ZpeGVkKG51bURlY2ltYWxQbGFjZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGltZVN0cmluZyA9ICcnICsgdGltZTtcbiAgICAgIH1cblxuICAgICAgLy8gQXBwbHkgbGVhZGluZyB6ZXJvc1xuICAgICAgaWYgKHRpbWVTdHJpbmcuaW5kZXhPZignLicpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIGxlZnRQYWRXaXRoWmVyb3ModGltZVN0cmluZywgdGltZVN0cmluZy5sZW5ndGggKyAobGVhZGluZ1plcm9lcyAtIHRpbWVTdHJpbmcuaW5kZXhPZignLicpKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbGVmdFBhZFdpdGhaZXJvcyh0aW1lU3RyaW5nLCBsZWFkaW5nWmVyb2VzKTtcbiAgICAgIH1cblxuICAgIH1cbiAgICAvLyBUaW1lIGZvcm1hdFxuICAgIGVsc2UgaWYgKGZvcm1hdC5pbmRleE9mKCc6JykgPiAtMSkge1xuICAgICAgbGV0IHRvdGFsU2Vjb25kcyA9IE1hdGguY2VpbCh0aW1lKTtcblxuICAgICAgLy8gaGg6bW06c3MgZm9ybWF0XG4gICAgICBpZiAoZm9ybWF0LmluZGV4T2YoJ2hoJykgPiAtMSkge1xuICAgICAgICByZXR1cm4gc2Vjb25kc1RvVGltZSh0b3RhbFNlY29uZHMpO1xuICAgICAgfVxuICAgICAgLy8gbW06c3MgZm9ybWF0XG4gICAgICBlbHNlIHtcbiAgICAgICAgbGV0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKHRvdGFsU2Vjb25kcyAvIDYwKTtcbiAgICAgICAgbGV0IHNlY29uZHMgPSB0b3RhbFNlY29uZHMgJSA2MDtcblxuICAgICAgICByZXR1cm4gbGVmdFBhZFdpdGhaZXJvcyhtaW51dGVzLCAyKSArICc6JyArIGxlZnRQYWRXaXRoWmVyb3Moc2Vjb25kcywgMik7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIEludGVnZXIgZm9ybWF0XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gbGVmdFBhZFdpdGhaZXJvcyhNYXRoLmNlaWwodGltZSksIGxlYWRpbmdaZXJvZXMpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgTGlzdEl0ZW0sIExpc3RTZWxlY3RvciwgTGlzdFNlbGVjdG9yQ29uZmlnIH0gZnJvbSAnLi9jb21wb25lbnRzL2xpc3RzZWxlY3Rvcic7XG5pbXBvcnQgeyBVSUluc3RhbmNlTWFuYWdlciB9IGZyb20gJy4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSwgU3VidGl0bGVFdmVudCwgU3VidGl0bGVUcmFjayB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogSGVscGVyIGNsYXNzIHRvIGhhbmRsZSBhbGwgc3VidGl0bGUgcmVsYXRlZCBldmVudHNcbiAqXG4gKiBUaGlzIGNsYXNzIGxpc3RlbnMgdG8gcGxheWVyIGV2ZW50cyBhcyB3ZWxsIGFzIHRoZSBgTGlzdFNlbGVjdG9yYCBldmVudCBpZiBzZWxlY3Rpb24gY2hhbmdlZFxuICovXG5leHBvcnQgY2xhc3MgU3VidGl0bGVTd2l0Y2hIYW5kbGVyIHtcblxuICBwcml2YXRlIHN0YXRpYyBTVUJUSVRMRVNfT0ZGX0tFWTogc3RyaW5nID0gJ251bGwnO1xuXG4gIHByaXZhdGUgcGxheWVyOiBQbGF5ZXJBUEk7XG4gIHByaXZhdGUgbGlzdEVsZW1lbnQ6IExpc3RTZWxlY3RvcjxMaXN0U2VsZWN0b3JDb25maWc+O1xuICBwcml2YXRlIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXI7XG5cbiAgY29uc3RydWN0b3IocGxheWVyOiBQbGF5ZXJBUEksIGVsZW1lbnQ6IExpc3RTZWxlY3RvcjxMaXN0U2VsZWN0b3JDb25maWc+LCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKSB7XG4gICAgdGhpcy5wbGF5ZXIgPSBwbGF5ZXI7XG4gICAgdGhpcy5saXN0RWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy51aW1hbmFnZXIgPSB1aW1hbmFnZXI7XG5cbiAgICB0aGlzLmJpbmRTZWxlY3Rpb25FdmVudCgpO1xuICAgIHRoaXMuYmluZFBsYXllckV2ZW50cygpO1xuICAgIHRoaXMucmVmcmVzaFN1YnRpdGxlcygpO1xuICB9XG5cbiAgcHJpdmF0ZSBiaW5kU2VsZWN0aW9uRXZlbnQoKTogdm9pZCB7XG4gICAgdGhpcy5saXN0RWxlbWVudC5vbkl0ZW1TZWxlY3RlZC5zdWJzY3JpYmUoKF8sIHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgIC8vIFRPRE8gYWRkIHN1cHBvcnQgZm9yIG11bHRpcGxlIGNvbmN1cnJlbnQgc3VidGl0bGUgc2VsZWN0aW9uc1xuICAgICAgaWYgKHZhbHVlID09PSBTdWJ0aXRsZVN3aXRjaEhhbmRsZXIuU1VCVElUTEVTX09GRl9LRVkpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFN1YnRpdGxlID0gdGhpcy5wbGF5ZXIuc3VidGl0bGVzLmxpc3QoKS5maWx0ZXIoKHN1YnRpdGxlKSA9PiBzdWJ0aXRsZS5lbmFibGVkKS5wb3AoKTtcbiAgICAgICAgaWYgKGN1cnJlbnRTdWJ0aXRsZSkge1xuICAgICAgICAgIHRoaXMucGxheWVyLnN1YnRpdGxlcy5kaXNhYmxlKGN1cnJlbnRTdWJ0aXRsZS5pZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGxheWVyLnN1YnRpdGxlcy5lbmFibGUodmFsdWUsIHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBiaW5kUGxheWVyRXZlbnRzKCk6IHZvaWQge1xuICAgIHRoaXMucGxheWVyLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU3VidGl0bGVBZGRlZCwgdGhpcy5hZGRTdWJ0aXRsZSk7XG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TdWJ0aXRsZUVuYWJsZWQsIHRoaXMuc2VsZWN0Q3VycmVudFN1YnRpdGxlKTtcbiAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlN1YnRpdGxlRGlzYWJsZWQsIHRoaXMuc2VsZWN0Q3VycmVudFN1YnRpdGxlKTtcbiAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlN1YnRpdGxlUmVtb3ZlZCwgdGhpcy5yZW1vdmVTdWJ0aXRsZSk7XG4gICAgLy8gVXBkYXRlIHN1YnRpdGxlcyB3aGVuIHNvdXJjZSBnb2VzIGF3YXlcbiAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZVVubG9hZGVkLCB0aGlzLmNsZWFyU3VidGl0bGVzKTtcbiAgICAvLyBVcGRhdGUgc3VidGl0bGVzIHdoZW4gdGhlIHBlcmlvZCB3aXRoaW4gYSBzb3VyY2UgY2hhbmdlc1xuICAgIHRoaXMucGxheWVyLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGVyaW9kU3dpdGNoZWQsIHRoaXMucmVmcmVzaFN1YnRpdGxlcyk7XG4gICAgdGhpcy51aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUodGhpcy5yZWZyZXNoU3VidGl0bGVzKTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkU3VidGl0bGUgPSAoZXZlbnQ6IFN1YnRpdGxlRXZlbnQpID0+IHtcbiAgICBjb25zdCBzdWJ0aXRsZSA9IGV2ZW50LnN1YnRpdGxlO1xuICAgIGlmICghdGhpcy5saXN0RWxlbWVudC5oYXNJdGVtKHN1YnRpdGxlLmlkKSkge1xuICAgICAgdGhpcy5saXN0RWxlbWVudC5hZGRJdGVtKHN1YnRpdGxlLmlkLCBzdWJ0aXRsZS5sYWJlbCk7XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgcmVtb3ZlU3VidGl0bGUgPSAoZXZlbnQ6IFN1YnRpdGxlRXZlbnQpID0+IHtcbiAgICBjb25zdCBzdWJ0aXRsZSA9IGV2ZW50LnN1YnRpdGxlO1xuICAgIGlmICh0aGlzLmxpc3RFbGVtZW50Lmhhc0l0ZW0oc3VidGl0bGUuaWQpKSB7XG4gICAgICB0aGlzLmxpc3RFbGVtZW50LnJlbW92ZUl0ZW0oc3VidGl0bGUuaWQpO1xuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIHNlbGVjdEN1cnJlbnRTdWJ0aXRsZSA9ICgpID0+IHtcbiAgICBpZiAoIXRoaXMucGxheWVyLnN1YnRpdGxlcykge1xuICAgICAgLy8gU3VidGl0bGVzIEFQSSBub3QgYXZhaWxhYmxlICh5ZXQpXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGN1cnJlbnRTdWJ0aXRsZSA9IHRoaXMucGxheWVyLnN1YnRpdGxlcy5saXN0KCkuZmlsdGVyKChzdWJ0aXRsZSkgPT4gc3VidGl0bGUuZW5hYmxlZCkucG9wKCk7XG4gICAgdGhpcy5saXN0RWxlbWVudC5zZWxlY3RJdGVtKGN1cnJlbnRTdWJ0aXRsZSA/IGN1cnJlbnRTdWJ0aXRsZS5pZCA6IFN1YnRpdGxlU3dpdGNoSGFuZGxlci5TVUJUSVRMRVNfT0ZGX0tFWSk7XG4gIH07XG5cbiAgcHJpdmF0ZSBjbGVhclN1YnRpdGxlcyA9ICgpID0+IHtcbiAgICB0aGlzLmxpc3RFbGVtZW50LmNsZWFySXRlbXMoKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVmcmVzaFN1YnRpdGxlcyA9ICgpID0+IHtcbiAgICBpZiAoIXRoaXMucGxheWVyLnN1YnRpdGxlcykge1xuICAgICAgLy8gU3VidGl0bGVzIEFQSSBub3QgYXZhaWxhYmxlICh5ZXQpXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgb2ZmTGlzdEl0ZW06IExpc3RJdGVtID0ge1xuICAgICAga2V5OiBTdWJ0aXRsZVN3aXRjaEhhbmRsZXIuU1VCVElUTEVTX09GRl9LRVksXG4gICAgICBsYWJlbDogaTE4bi5nZXRMb2NhbGl6ZXIoJ29mZicpLFxuICAgIH07XG5cbiAgICBjb25zdCBzdWJ0aXRsZXMgPSB0aGlzLnBsYXllci5zdWJ0aXRsZXMubGlzdCgpO1xuICAgIGNvbnN0IHN1YnRpdGxlVG9MaXN0SXRlbSA9IChzdWJ0aXRsZTogU3VidGl0bGVUcmFjayk6IExpc3RJdGVtID0+IHtcbiAgICAgIHJldHVybiB7IGtleTogc3VidGl0bGUuaWQsIGxhYmVsOiBzdWJ0aXRsZS5sYWJlbCB9O1xuICAgIH07XG5cbiAgICB0aGlzLmxpc3RFbGVtZW50LnN5bmNocm9uaXplSXRlbXMoW1xuICAgICAgb2ZmTGlzdEl0ZW0sIC4uLnN1YnRpdGxlcy5tYXAoc3VidGl0bGVUb0xpc3RJdGVtKSxcbiAgICBdKTtcbiAgICB0aGlzLnNlbGVjdEN1cnJlbnRTdWJ0aXRsZSgpO1xuICB9O1xufVxuIiwiLy8gVE9ETyBjaGFuZ2UgdG8gaW50ZXJuYWwgKG5vdCBleHBvcnRlZCkgY2xhc3MsIGhvdyB0byB1c2UgaW4gb3RoZXIgZmlsZXM/XG4vKipcbiAqIEV4ZWN1dGVzIGEgY2FsbGJhY2sgYWZ0ZXIgYSBzcGVjaWZpZWQgYW1vdW50IG9mIHRpbWUsIG9wdGlvbmFsbHkgcmVwZWF0ZWRseSB1bnRpbCBzdG9wcGVkLlxuICovXG5leHBvcnQgY2xhc3MgVGltZW91dCB7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBkZWxheTogbnVtYmVyO1xuICBwcml2YXRlIHJlYWRvbmx5IGNhbGxiYWNrOiAoKSA9PiB2b2lkO1xuICBwcml2YXRlIHJlYWRvbmx5IHJlcGVhdDogYm9vbGVhbjtcbiAgLy8gVGhlcmUncyB0d28gc2V0VGltZW91dCBkZWNsYXJhdGlvbnMsIG9uZSBvbiBXaW5kb3cgd2hpY2ggcmV0dXJucyB0eXBlIFwibnVtYmVyXCIgYW5kIG9uZSBpbiBOb2RlSlMgd2hpY2ggcmV0dXJuc1xuICAvLyB0eXBlIFwiVGltZXJcIi4gRm9yIHVua25vd24gcmVhc29ucyBidWlsZHMgb24gSmVua2lucyBmYWlsIGR1ZSB0byBhIHR5cGUgbWlzbWF0Y2ggd2hlbiB3ZSB1c2UgdHlwZSBcIm51bWJlclwiIGhlcmUsXG4gIC8vIGFsdGhvdWdoIGl0IHdvcmtzIG9uIG90aGVyIHBsYXRmb3JtcyAoZS5nLiBXaW5kb3dzLCBDb2Rlc2hpcCkuXG4gIC8vIFRvIHdvcmsgYXJvdW5kIHRoZSBpc3N1ZSB3ZSB1c2UgdHlwZSBcImFueVwiLiBUaGUgdHlwZSBkb2VzIG5vdCBtYXR0ZXIgYW55d2F5IGJlY2F1c2Ugd2UncmUgbm90IHdvcmtpbmcgd2l0aFxuICAvLyB0aGlzIHZhbHVlIGV4Y2VwdCBwcm92aWRpbmcgaXQgdG8gY2xlYXJUaW1lb3V0LlxuICBwcml2YXRlIHRpbWVvdXRPckludGVydmFsSWQ6IGFueTtcbiAgcHJpdmF0ZSBhY3RpdmU6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgdGltZW91dCBjYWxsYmFjayBoYW5kbGVyLlxuICAgKiBAcGFyYW0gZGVsYXkgdGhlIGRlbGF5IGluIG1pbGxpc2Vjb25kcyBhZnRlciB3aGljaCB0aGUgY2FsbGJhY2sgc2hvdWxkIGJlIGV4ZWN1dGVkXG4gICAqIEBwYXJhbSBjYWxsYmFjayB0aGUgY2FsbGJhY2sgdG8gZXhlY3V0ZSBhZnRlciB0aGUgZGVsYXkgdGltZVxuICAgKiBAcGFyYW0gcmVwZWF0IGlmIHRydWUsIGNhbGwgdGhlIGNhbGxiYWNrIHJlcGVhdGVkbHkgaW4gZGVsYXkgaW50ZXJ2YWxzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkZWxheTogbnVtYmVyLCBjYWxsYmFjazogKCkgPT4gdm9pZCwgcmVwZWF0OiBib29sZWFuID0gZmFsc2UpIHtcbiAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMucmVwZWF0ID0gcmVwZWF0O1xuICAgIHRoaXMudGltZW91dE9ySW50ZXJ2YWxJZCA9IDA7XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIHRpbWVvdXQgYW5kIGNhbGxzIHRoZSBjYWxsYmFjayB3aGVuIHRoZSB0aW1lb3V0IGRlbGF5IGhhcyBwYXNzZWQuXG4gICAqIEByZXR1cm5zIHtUaW1lb3V0fSB0aGUgY3VycmVudCB0aW1lb3V0IChzbyB0aGUgc3RhcnQgY2FsbCBjYW4gYmUgY2hhaW5lZCB0byB0aGUgY29uc3RydWN0b3IpXG4gICAqL1xuICBzdGFydCgpOiB0aGlzIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIHRoZSB0aW1lb3V0LiBUaGUgY2FsbGJhY2sgd2lsbCBub3QgYmUgY2FsbGVkIGlmIGNsZWFyIGlzIGNhbGxlZCBkdXJpbmcgdGhlIHRpbWVvdXQuXG4gICAqL1xuICBjbGVhcigpOiB2b2lkIHtcbiAgICB0aGlzLmNsZWFySW50ZXJuYWwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldHMgdGhlIHBhc3NlZCB0aW1lb3V0IGRlbGF5IHRvIHplcm8uIENhbiBiZSB1c2VkIHRvIGRlZmVyIHRoZSBjYWxsaW5nIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIHJlc2V0KCk6IHZvaWQge1xuICAgIHRoaXMuY2xlYXJJbnRlcm5hbCgpO1xuXG4gICAgaWYgKHRoaXMucmVwZWF0KSB7XG4gICAgICB0aGlzLnRpbWVvdXRPckludGVydmFsSWQgPSBzZXRJbnRlcnZhbCh0aGlzLmNhbGxiYWNrLCB0aGlzLmRlbGF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50aW1lb3V0T3JJbnRlcnZhbElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2FsbGJhY2soKTtcbiAgICAgIH0sIHRoaXMuZGVsYXkpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gIH1cblxuICBpc0FjdGl2ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmU7XG4gIH1cblxuICBwcml2YXRlIGNsZWFySW50ZXJuYWwoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMucmVwZWF0KSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMudGltZW91dE9ySW50ZXJ2YWxJZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRPckludGVydmFsSWQpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59IiwiaW1wb3J0IHsgR29CYWNrQnV0dG9uIH0gZnJvbSAnLi8uLi9jdXN0b20vdHMvY29tcG9uZW50cy9nb2JhY2tidXR0b24nO1xuaW1wb3J0IHsgUmFkaW9Nb2RlVG9nZ2xlQnV0dG9uIH0gZnJvbSAnLi8uLi9jdXN0b20vdHMvY29tcG9uZW50cy9yYWRpb21vZGUvcmFkaW9tb2RldG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7IFBsYXliYWNrSnVtcENvbnRyb2xzT3ZlcmxheSB9IGZyb20gJy4uL2N1c3RvbS90cy9jb21wb25lbnRzL3BsYXliYWNranVtcG92ZXJsYXknO1xuaW1wb3J0IHsgU3VidGl0bGVPdmVybGF5IH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlb3ZlcmxheSc7XG5pbXBvcnQgeyBTZXR0aW5nc1BhbmVsUGFnZSB9IGZyb20gJy4vY29tcG9uZW50cy9zZXR0aW5nc3BhbmVscGFnZSc7XG5pbXBvcnQgeyBTZXR0aW5nc1BhbmVsSXRlbSB9IGZyb20gJy4vY29tcG9uZW50cy9zZXR0aW5nc3BhbmVsaXRlbSc7XG5pbXBvcnQgeyBWaWRlb1F1YWxpdHlTZWxlY3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvdmlkZW9xdWFsaXR5c2VsZWN0Ym94JztcbmltcG9ydCB7IFBsYXliYWNrU3BlZWRTZWxlY3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvcGxheWJhY2tzcGVlZHNlbGVjdGJveCc7XG5pbXBvcnQgeyBBdWRpb1RyYWNrU2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL2F1ZGlvdHJhY2tzZWxlY3Rib3gnO1xuaW1wb3J0IHsgQXVkaW9RdWFsaXR5U2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL2F1ZGlvcXVhbGl0eXNlbGVjdGJveCc7XG5pbXBvcnQgeyBTZXR0aW5nc1BhbmVsIH0gZnJvbSAnLi9jb21wb25lbnRzL3NldHRpbmdzcGFuZWwnO1xuaW1wb3J0IHsgU3VidGl0bGVTZXR0aW5nc1BhbmVsUGFnZSB9IGZyb20gJy4vY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL3N1YnRpdGxlc2V0dGluZ3NwYW5lbHBhZ2UnO1xuaW1wb3J0IHsgU2V0dGluZ3NQYW5lbFBhZ2VPcGVuQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL3NldHRpbmdzcGFuZWxwYWdlb3BlbmJ1dHRvbic7XG5pbXBvcnQgeyBTdWJ0aXRsZVNldHRpbmdzTGFiZWwgfSBmcm9tICcuL2NvbXBvbmVudHMvc3VidGl0bGVzZXR0aW5ncy9zdWJ0aXRsZXNldHRpbmdzbGFiZWwnO1xuaW1wb3J0IHsgU3VidGl0bGVTZWxlY3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvc3VidGl0bGVzZWxlY3Rib3gnO1xuaW1wb3J0IHsgQ29udHJvbEJhciB9IGZyb20gJy4vY29tcG9uZW50cy9jb250cm9sYmFyJztcbmltcG9ydCB7IENvbnRhaW5lciB9IGZyb20gJy4vY29tcG9uZW50cy9jb250YWluZXInO1xuaW1wb3J0IHsgUGxheWJhY2tUaW1lTGFiZWwsIFBsYXliYWNrVGltZUxhYmVsTW9kZSB9IGZyb20gJy4vY29tcG9uZW50cy9wbGF5YmFja3RpbWVsYWJlbCc7XG5pbXBvcnQgeyBTZWVrQmFyIH0gZnJvbSAnLi9jb21wb25lbnRzL3NlZWtiYXInO1xuaW1wb3J0IHsgU2Vla0JhckxhYmVsIH0gZnJvbSAnLi9jb21wb25lbnRzL3NlZWtiYXJsYWJlbCc7XG5pbXBvcnQgeyBQbGF5YmFja1RvZ2dsZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9wbGF5YmFja3RvZ2dsZWJ1dHRvbic7XG5pbXBvcnQgeyBWb2x1bWVUb2dnbGVCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvdm9sdW1ldG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7IFZvbHVtZVNsaWRlciB9IGZyb20gJy4vY29tcG9uZW50cy92b2x1bWVzbGlkZXInO1xuaW1wb3J0IHsgU3BhY2VyIH0gZnJvbSAnLi9jb21wb25lbnRzL3NwYWNlcic7XG5pbXBvcnQgeyBQaWN0dXJlSW5QaWN0dXJlVG9nZ2xlQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL3BpY3R1cmVpbnBpY3R1cmV0b2dnbGVidXR0b24nO1xuaW1wb3J0IHsgQWlyUGxheVRvZ2dsZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9haXJwbGF5dG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7IENhc3RUb2dnbGVCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvY2FzdHRvZ2dsZWJ1dHRvbic7XG5pbXBvcnQgeyBWUlRvZ2dsZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy92cnRvZ2dsZWJ1dHRvbic7XG5pbXBvcnQgeyBTZXR0aW5nc1RvZ2dsZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9zZXR0aW5nc3RvZ2dsZWJ1dHRvbic7XG5pbXBvcnQgeyBGdWxsc2NyZWVuVG9nZ2xlQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL2Z1bGxzY3JlZW50b2dnbGVidXR0b24nO1xuaW1wb3J0IHsgVUlDb250YWluZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvdWljb250YWluZXInO1xuaW1wb3J0IHsgQnVmZmVyaW5nT3ZlcmxheSB9IGZyb20gJy4vY29tcG9uZW50cy9idWZmZXJpbmdvdmVybGF5JztcbmltcG9ydCB7IFBsYXliYWNrVG9nZ2xlT3ZlcmxheSB9IGZyb20gJy4vY29tcG9uZW50cy9wbGF5YmFja3RvZ2dsZW92ZXJsYXknO1xuaW1wb3J0IHsgQ2FzdFN0YXR1c092ZXJsYXkgfSBmcm9tICcuL2NvbXBvbmVudHMvY2FzdHN0YXR1c292ZXJsYXknO1xuaW1wb3J0IHsgVGl0bGVCYXIgfSBmcm9tICcuL2NvbXBvbmVudHMvdGl0bGViYXInO1xuaW1wb3J0IHsgUmVjb21tZW5kYXRpb25PdmVybGF5IH0gZnJvbSAnLi9jb21wb25lbnRzL3JlY29tbWVuZGF0aW9ub3ZlcmxheSc7XG5pbXBvcnQgeyBXYXRlcm1hcmsgfSBmcm9tICcuL2NvbXBvbmVudHMvd2F0ZXJtYXJrJztcbmltcG9ydCB7IEVycm9yTWVzc2FnZU92ZXJsYXkgfSBmcm9tICcuL2NvbXBvbmVudHMvZXJyb3JtZXNzYWdlb3ZlcmxheSc7XG5pbXBvcnQgeyBBZENsaWNrT3ZlcmxheSB9IGZyb20gJy4vY29tcG9uZW50cy9hZGNsaWNrb3ZlcmxheSc7XG5pbXBvcnQgeyBBZE1lc3NhZ2VMYWJlbCB9IGZyb20gJy4vY29tcG9uZW50cy9hZG1lc3NhZ2VsYWJlbCc7XG5pbXBvcnQgeyBBZFNraXBCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvYWRza2lwYnV0dG9uJztcbmltcG9ydCB7IENsb3NlQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL2Nsb3NlYnV0dG9uJztcbmltcG9ydCB7IE1ldGFkYXRhTGFiZWwsIE1ldGFkYXRhTGFiZWxDb250ZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL21ldGFkYXRhbGFiZWwnO1xuaW1wb3J0IHsgUGxheWVyVXRpbHMgfSBmcm9tICcuL3BsYXllcnV0aWxzJztcbmltcG9ydCB7IExhYmVsIH0gZnJvbSAnLi9jb21wb25lbnRzL2xhYmVsJztcbmltcG9ydCB7IENhc3RVSUNvbnRhaW5lciB9IGZyb20gJy4vY29tcG9uZW50cy9jYXN0dWljb250YWluZXInO1xuaW1wb3J0IHsgVUlDb25kaXRpb25Db250ZXh0LCBVSU1hbmFnZXIgfSBmcm9tICcuL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBVSUNvbmZpZyB9IGZyb20gJy4vdWljb25maWcnO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuL2xvY2FsaXphdGlvbi9pMThuJztcbmltcG9ydCB7IFN1YnRpdGxlTGlzdEJveCB9IGZyb20gJy4vY29tcG9uZW50cy9zdWJ0aXRsZWxpc3Rib3gnO1xuaW1wb3J0IHsgQXVkaW9UcmFja0xpc3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvYXVkaW90cmFja2xpc3Rib3gnO1xuaW1wb3J0IHsgU3BhdGlhbE5hdmlnYXRpb24gfSBmcm9tICcuL3NwYXRpYWxuYXZpZ2F0aW9uL3NwYXRpYWxuYXZpZ2F0aW9uJztcbmltcG9ydCB7IFJvb3ROYXZpZ2F0aW9uR3JvdXAgfSBmcm9tICcuL3NwYXRpYWxuYXZpZ2F0aW9uL3Jvb3RuYXZpZ2F0aW9uZ3JvdXAnO1xuaW1wb3J0IHsgTGlzdE5hdmlnYXRpb25Hcm91cCwgTGlzdE9yaWVudGF0aW9uIH0gZnJvbSAnLi9zcGF0aWFsbmF2aWdhdGlvbi9MaXN0TmF2aWdhdGlvbkdyb3VwJztcblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICBiaXRtb3ZpbjogYW55O1xuICB9XG59XG5cbmxldCB1aU1hbmFnZXI6IFVJTWFuYWdlcjtcbmxldCBwbGF5ZXJBcGk6IFBsYXllckFQSTtcbmxldCB1aUNvbmZpZzogVUlDb25maWc7XG5cbmV4cG9ydCBuYW1lc3BhY2UgVUlGYWN0b3J5IHtcbiAgZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkRGVmYXVsdFVJKFxuICAgIHBsYXllcjogUGxheWVyQVBJLFxuICAgIGNvbmZpZzogVUlDb25maWcgPSB7fSxcbiAgKTogVUlNYW5hZ2VyIHtcbiAgICByZXR1cm4gVUlGYWN0b3J5LmJ1aWxkTW9kZXJuVUkocGxheWVyLCBjb25maWcpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkRGVmYXVsdFNtYWxsU2NyZWVuVUkoXG4gICAgcGxheWVyOiBQbGF5ZXJBUEksXG4gICAgY29uZmlnOiBVSUNvbmZpZyA9IHt9LFxuICApOiBVSU1hbmFnZXIge1xuICAgIHVpQ29uZmlnID0gY29uZmlnO1xuICAgIHBsYXllckFwaSA9IHBsYXllcjtcbiAgICB1aU1hbmFnZXIgPSBVSUZhY3RvcnkuYnVpbGRNb2Rlcm5TbWFsbFNjcmVlblVJKHBsYXllciwgY29uZmlnKTtcbiAgICByZXR1cm4gdWlNYW5hZ2VyO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkRGVmYXVsdENhc3RSZWNlaXZlclVJKFxuICAgIHBsYXllcjogUGxheWVyQVBJLFxuICAgIGNvbmZpZzogVUlDb25maWcgPSB7fSxcbiAgKTogVUlNYW5hZ2VyIHtcbiAgICByZXR1cm4gVUlGYWN0b3J5LmJ1aWxkTW9kZXJuQ2FzdFJlY2VpdmVyVUkocGxheWVyLCBjb25maWcpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkRGVmYXVsdFR2VUkoXG4gICAgcGxheWVyOiBQbGF5ZXJBUEksXG4gICAgY29uZmlnOiBVSUNvbmZpZyA9IHt9LFxuICApOiBVSU1hbmFnZXIge1xuICAgIHJldHVybiBVSUZhY3RvcnkuYnVpbGRNb2Rlcm5UdlVJKHBsYXllciwgY29uZmlnKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBtb2Rlcm5VSSgpIHtcbiAgICBsZXQgc3VidGl0bGVPdmVybGF5ID0gbmV3IFN1YnRpdGxlT3ZlcmxheSgpO1xuXG4gICAgbGV0IG1haW5TZXR0aW5nc1BhbmVsUGFnZSA9IG5ldyBTZXR0aW5nc1BhbmVsUGFnZSh7XG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbShcbiAgICAgICAgICBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3MudmlkZW8ucXVhbGl0eScpLFxuICAgICAgICAgIG5ldyBWaWRlb1F1YWxpdHlTZWxlY3RCb3goKSxcbiAgICAgICAgKSxcbiAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKFxuICAgICAgICAgIGkxOG4uZ2V0TG9jYWxpemVyKCdzcGVlZCcpLFxuICAgICAgICAgIG5ldyBQbGF5YmFja1NwZWVkU2VsZWN0Qm94KCksXG4gICAgICAgICksXG4gICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbShcbiAgICAgICAgICBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3MuYXVkaW8udHJhY2snKSxcbiAgICAgICAgICBuZXcgQXVkaW9UcmFja1NlbGVjdEJveCgpLFxuICAgICAgICApLFxuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oXG4gICAgICAgICAgaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLmF1ZGlvLnF1YWxpdHknKSxcbiAgICAgICAgICBuZXcgQXVkaW9RdWFsaXR5U2VsZWN0Qm94KCksXG4gICAgICAgICksXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgbGV0IHNldHRpbmdzUGFuZWwgPSBuZXcgU2V0dGluZ3NQYW5lbCh7XG4gICAgICBjb21wb25lbnRzOiBbbWFpblNldHRpbmdzUGFuZWxQYWdlXSxcbiAgICAgIGhpZGRlbjogdHJ1ZSxcbiAgICB9KTtcblxuICAgIGxldCBzdWJ0aXRsZVNldHRpbmdzUGFuZWxQYWdlID0gbmV3IFN1YnRpdGxlU2V0dGluZ3NQYW5lbFBhZ2Uoe1xuICAgICAgc2V0dGluZ3NQYW5lbDogc2V0dGluZ3NQYW5lbCxcbiAgICAgIG92ZXJsYXk6IHN1YnRpdGxlT3ZlcmxheSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHN1YnRpdGxlU2VsZWN0Qm94ID0gbmV3IFN1YnRpdGxlU2VsZWN0Qm94KCk7XG5cbiAgICBsZXQgc3VidGl0bGVTZXR0aW5nc09wZW5CdXR0b24gPSBuZXcgU2V0dGluZ3NQYW5lbFBhZ2VPcGVuQnV0dG9uKHtcbiAgICAgIHRhcmdldFBhZ2U6IHN1YnRpdGxlU2V0dGluZ3NQYW5lbFBhZ2UsXG4gICAgICBjb250YWluZXI6IHNldHRpbmdzUGFuZWwsXG4gICAgICBhcmlhTGFiZWw6IGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMnKSxcbiAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdvcGVuJyksXG4gICAgfSk7XG5cbiAgICBtYWluU2V0dGluZ3NQYW5lbFBhZ2UuYWRkQ29tcG9uZW50KFxuICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKFxuICAgICAgICBuZXcgU3VidGl0bGVTZXR0aW5nc0xhYmVsKHtcbiAgICAgICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzJyksXG4gICAgICAgICAgb3BlbmVyOiBzdWJ0aXRsZVNldHRpbmdzT3BlbkJ1dHRvbixcbiAgICAgICAgfSksXG4gICAgICAgIHN1YnRpdGxlU2VsZWN0Qm94LFxuICAgICAgICB7XG4gICAgICAgICAgcm9sZTogJ21lbnViYXInLFxuICAgICAgICB9LFxuICAgICAgKSxcbiAgICApO1xuXG4gICAgc2V0dGluZ3NQYW5lbC5hZGRDb21wb25lbnQoc3VidGl0bGVTZXR0aW5nc1BhbmVsUGFnZSk7XG5cbiAgICBsZXQgY29udHJvbEJhciA9IG5ldyBDb250cm9sQmFyKHtcbiAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgc2V0dGluZ3NQYW5lbCxcbiAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgbmV3IFBsYXliYWNrVGltZUxhYmVsKHtcbiAgICAgICAgICAgICAgdGltZUxhYmVsTW9kZTogUGxheWJhY2tUaW1lTGFiZWxNb2RlLkN1cnJlbnRUaW1lLFxuICAgICAgICAgICAgICBoaWRlSW5MaXZlUGxheWJhY2s6IHRydWUsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBTZWVrQmFyKHsgbGFiZWw6IG5ldyBTZWVrQmFyTGFiZWwoKSB9KSxcbiAgICAgICAgICAgIG5ldyBQbGF5YmFja1RpbWVMYWJlbCh7XG4gICAgICAgICAgICAgIHRpbWVMYWJlbE1vZGU6IFBsYXliYWNrVGltZUxhYmVsTW9kZS5Ub3RhbFRpbWUsXG4gICAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsndGV4dC1yaWdodCddLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgXSxcbiAgICAgICAgICBjc3NDbGFzc2VzOiBbJ2NvbnRyb2xiYXItdG9wJ10sXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICBuZXcgUGxheWJhY2tUb2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgIG5ldyBWb2x1bWVUb2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgIG5ldyBWb2x1bWVTbGlkZXIoKSxcbiAgICAgICAgICAgIG5ldyBTcGFjZXIoKSxcbiAgICAgICAgICAgIG5ldyBQaWN0dXJlSW5QaWN0dXJlVG9nZ2xlQnV0dG9uKCksXG4gICAgICAgICAgICBuZXcgQWlyUGxheVRvZ2dsZUJ1dHRvbigpLFxuICAgICAgICAgICAgbmV3IENhc3RUb2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgIG5ldyBSYWRpb01vZGVUb2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgIG5ldyBWUlRvZ2dsZUJ1dHRvbigpLFxuICAgICAgICAgICAgbmV3IFNldHRpbmdzVG9nZ2xlQnV0dG9uKHsgc2V0dGluZ3NQYW5lbDogc2V0dGluZ3NQYW5lbCB9KSxcbiAgICAgICAgICAgIG5ldyBGdWxsc2NyZWVuVG9nZ2xlQnV0dG9uKCksXG4gICAgICAgICAgXSxcbiAgICAgICAgICBjc3NDbGFzc2VzOiBbJ2NvbnRyb2xiYXItYm90dG9tJ10sXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIHJldHVybiBuZXcgVUlDb250YWluZXIoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBzdWJ0aXRsZU92ZXJsYXksXG4gICAgICAgIG5ldyBCdWZmZXJpbmdPdmVybGF5KCksXG4gICAgICAgIG5ldyBQbGF5YmFja1RvZ2dsZU92ZXJsYXkoKSxcbiAgICAgICAgbmV3IFBsYXliYWNrSnVtcENvbnRyb2xzT3ZlcmxheSgpLFxuICAgICAgICBuZXcgQ2FzdFN0YXR1c092ZXJsYXkoKSxcbiAgICAgICAgY29udHJvbEJhcixcbiAgICAgICAgbmV3IFRpdGxlQmFyKCksXG4gICAgICAgIG5ldyBSZWNvbW1lbmRhdGlvbk92ZXJsYXkoKSxcbiAgICAgICAgbmV3IFdhdGVybWFyaygpLFxuICAgICAgICBuZXcgRXJyb3JNZXNzYWdlT3ZlcmxheSgpLFxuICAgICAgXSxcbiAgICAgIGhpZGVEZWxheTogMjAwMCxcbiAgICAgIGhpZGVQbGF5ZXJTdGF0ZUV4Y2VwdGlvbnM6IFtcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUHJlcGFyZWQsXG4gICAgICAgIFBsYXllclV0aWxzLlBsYXllclN0YXRlLlBhdXNlZCxcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuRmluaXNoZWQsXG4gICAgICBdLFxuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIG1vZGVybkFkc1VJKCkge1xuICAgIHJldHVybiBuZXcgVUlDb250YWluZXIoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBuZXcgQnVmZmVyaW5nT3ZlcmxheSgpLFxuICAgICAgICBuZXcgQWRDbGlja092ZXJsYXkoKSxcbiAgICAgICAgbmV3IFBsYXliYWNrVG9nZ2xlT3ZlcmxheSgpLFxuICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICBuZXcgQWRNZXNzYWdlTGFiZWwoe1xuICAgICAgICAgICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcignYWRzLnJlbWFpbmluZ1RpbWUnKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IEFkU2tpcEJ1dHRvbigpLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgY3NzQ2xhc3M6ICd1aS1hZHMtc3RhdHVzJyxcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBDb250cm9sQmFyKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICAgIG5ldyBQbGF5YmFja1RvZ2dsZUJ1dHRvbigpLFxuICAgICAgICAgICAgICAgIG5ldyBWb2x1bWVUb2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgICAgICBuZXcgVm9sdW1lU2xpZGVyKCksXG4gICAgICAgICAgICAgICAgbmV3IFNwYWNlcigpLFxuICAgICAgICAgICAgICAgIG5ldyBGdWxsc2NyZWVuVG9nZ2xlQnV0dG9uKCksXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnY29udHJvbGJhci1ib3R0b20nXSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICAgIGNzc0NsYXNzZXM6IFsndWktc2tpbi1hZHMnXSxcbiAgICAgIGhpZGVEZWxheTogMjAwMCxcbiAgICAgIGhpZGVQbGF5ZXJTdGF0ZUV4Y2VwdGlvbnM6IFtcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUHJlcGFyZWQsXG4gICAgICAgIFBsYXllclV0aWxzLlBsYXllclN0YXRlLlBhdXNlZCxcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuRmluaXNoZWQsXG4gICAgICBdLFxuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIG1vZGVyblNtYWxsU2NyZWVuVUkoKSB7XG4gICAgbGV0IHN1YnRpdGxlT3ZlcmxheSA9IG5ldyBTdWJ0aXRsZU92ZXJsYXkoKTtcblxuICAgIGxldCBtYWluU2V0dGluZ3NQYW5lbFBhZ2UgPSBuZXcgU2V0dGluZ3NQYW5lbFBhZ2Uoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oXG4gICAgICAgICAgaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnZpZGVvLnF1YWxpdHknKSxcbiAgICAgICAgICBuZXcgVmlkZW9RdWFsaXR5U2VsZWN0Qm94KCksXG4gICAgICAgICksXG4gICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbShcbiAgICAgICAgICBpMThuLmdldExvY2FsaXplcignc3BlZWQnKSxcbiAgICAgICAgICBuZXcgUGxheWJhY2tTcGVlZFNlbGVjdEJveCgpLFxuICAgICAgICApLFxuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oXG4gICAgICAgICAgaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLmF1ZGlvLnRyYWNrJyksXG4gICAgICAgICAgbmV3IEF1ZGlvVHJhY2tTZWxlY3RCb3goKSxcbiAgICAgICAgKSxcbiAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKFxuICAgICAgICAgIGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5hdWRpby5xdWFsaXR5JyksXG4gICAgICAgICAgbmV3IEF1ZGlvUXVhbGl0eVNlbGVjdEJveCgpLFxuICAgICAgICApLFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIGxldCBzZXR0aW5nc1BhbmVsID0gbmV3IFNldHRpbmdzUGFuZWwoe1xuICAgICAgY29tcG9uZW50czogW21haW5TZXR0aW5nc1BhbmVsUGFnZV0sXG4gICAgICBoaWRkZW46IHRydWUsXG4gICAgICBwYWdlVHJhbnNpdGlvbkFuaW1hdGlvbjogZmFsc2UsXG4gICAgICBoaWRlRGVsYXk6IC0xLFxuICAgIH0pO1xuXG4gICAgbGV0IHN1YnRpdGxlU2V0dGluZ3NQYW5lbFBhZ2UgPSBuZXcgU3VidGl0bGVTZXR0aW5nc1BhbmVsUGFnZSh7XG4gICAgICBzZXR0aW5nc1BhbmVsOiBzZXR0aW5nc1BhbmVsLFxuICAgICAgb3ZlcmxheTogc3VidGl0bGVPdmVybGF5LFxuICAgIH0pO1xuXG4gICAgbGV0IHN1YnRpdGxlU2V0dGluZ3NPcGVuQnV0dG9uID0gbmV3IFNldHRpbmdzUGFuZWxQYWdlT3BlbkJ1dHRvbih7XG4gICAgICB0YXJnZXRQYWdlOiBzdWJ0aXRsZVNldHRpbmdzUGFuZWxQYWdlLFxuICAgICAgY29udGFpbmVyOiBzZXR0aW5nc1BhbmVsLFxuICAgICAgYXJpYUxhYmVsOiBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzJyksXG4gICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcignb3BlbicpLFxuICAgIH0pO1xuXG4gICAgY29uc3Qgc3VidGl0bGVTZWxlY3RCb3ggPSBuZXcgU3VidGl0bGVTZWxlY3RCb3goKTtcblxuICAgIG1haW5TZXR0aW5nc1BhbmVsUGFnZS5hZGRDb21wb25lbnQoXG4gICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oXG4gICAgICAgIG5ldyBTdWJ0aXRsZVNldHRpbmdzTGFiZWwoe1xuICAgICAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMnKSxcbiAgICAgICAgICBvcGVuZXI6IHN1YnRpdGxlU2V0dGluZ3NPcGVuQnV0dG9uLFxuICAgICAgICB9KSxcbiAgICAgICAgc3VidGl0bGVTZWxlY3RCb3gsXG4gICAgICAgIHtcbiAgICAgICAgICByb2xlOiAnbWVudWJhcicsXG4gICAgICAgIH0sXG4gICAgICApLFxuICAgICk7XG5cbiAgICBzZXR0aW5nc1BhbmVsLmFkZENvbXBvbmVudChzdWJ0aXRsZVNldHRpbmdzUGFuZWxQYWdlKTtcblxuICAgIHNldHRpbmdzUGFuZWwuYWRkQ29tcG9uZW50KG5ldyBDbG9zZUJ1dHRvbih7IHRhcmdldDogc2V0dGluZ3NQYW5lbCB9KSk7XG4gICAgc3VidGl0bGVTZXR0aW5nc1BhbmVsUGFnZS5hZGRDb21wb25lbnQoXG4gICAgICBuZXcgQ2xvc2VCdXR0b24oeyB0YXJnZXQ6IHNldHRpbmdzUGFuZWwgfSksXG4gICAgKTtcblxuICAgIGxldCBjb250cm9sQmFyID0gbmV3IENvbnRyb2xCYXIoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICBuZXcgUGxheWJhY2tUaW1lTGFiZWwoe1xuICAgICAgICAgICAgICB0aW1lTGFiZWxNb2RlOiBQbGF5YmFja1RpbWVMYWJlbE1vZGUuQ3VycmVudFRpbWUsXG4gICAgICAgICAgICAgIGhpZGVJbkxpdmVQbGF5YmFjazogdHJ1ZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IFNlZWtCYXIoeyBsYWJlbDogbmV3IFNlZWtCYXJMYWJlbCgpIH0pLFxuICAgICAgICAgICAgbmV3IFBsYXliYWNrVGltZUxhYmVsKHtcbiAgICAgICAgICAgICAgdGltZUxhYmVsTW9kZTogUGxheWJhY2tUaW1lTGFiZWxNb2RlLlRvdGFsVGltZSxcbiAgICAgICAgICAgICAgY3NzQ2xhc3NlczogWyd0ZXh0LXJpZ2h0J10sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBGdWxsc2NyZWVuVG9nZ2xlQnV0dG9uKHtcbiAgICAgICAgICAgICAgY3NzQ2xhc3NlczogWydjb250cm9sYmFyLWZ1bGxzY3JlZW4tdG9nZ2xlLWJ1dHRvbiddLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgXSxcbiAgICAgICAgICBjc3NDbGFzc2VzOiBbJ2NvbnRyb2xiYXItdG9wJ10sXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIHJldHVybiBuZXcgVUlDb250YWluZXIoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBzdWJ0aXRsZU92ZXJsYXksXG4gICAgICAgIG5ldyBCdWZmZXJpbmdPdmVybGF5KCksXG4gICAgICAgIG5ldyBDYXN0U3RhdHVzT3ZlcmxheSgpLFxuICAgICAgICBuZXcgUGxheWJhY2tUb2dnbGVPdmVybGF5KCksXG4gICAgICAgIG5ldyBQbGF5YmFja0p1bXBDb250cm9sc092ZXJsYXkoKSxcbiAgICAgICAgbmV3IFJlY29tbWVuZGF0aW9uT3ZlcmxheSgpLFxuICAgICAgICBjb250cm9sQmFyLFxuICAgICAgICBuZXcgVGl0bGVCYXIoe1xuICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgIG5ldyBHb0JhY2tCdXR0b24oKSxcbiAgICAgICAgICAgIG5ldyBNZXRhZGF0YUxhYmVsKHsgY29udGVudDogTWV0YWRhdGFMYWJlbENvbnRlbnQuVGl0bGUgfSksXG4gICAgICAgICAgICBuZXcgQ2FzdFRvZ2dsZUJ1dHRvbigpLFxuICAgICAgICAgICAgbmV3IFZSVG9nZ2xlQnV0dG9uKCksXG4gICAgICAgICAgICBuZXcgUGljdHVyZUluUGljdHVyZVRvZ2dsZUJ1dHRvbigpLFxuICAgICAgICAgICAgbmV3IEFpclBsYXlUb2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgIG5ldyBSYWRpb01vZGVUb2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nc1RvZ2dsZUJ1dHRvbih7IHNldHRpbmdzUGFuZWw6IHNldHRpbmdzUGFuZWwgfSksXG4gICAgICAgICAgXSxcbiAgICAgICAgfSksXG4gICAgICAgIHNldHRpbmdzUGFuZWwsXG4gICAgICAgIG5ldyBXYXRlcm1hcmsoKSxcbiAgICAgICAgbmV3IEVycm9yTWVzc2FnZU92ZXJsYXkoKSxcbiAgICAgIF0sXG4gICAgICBjc3NDbGFzc2VzOiBbJ3VpLXNraW4tc21hbGxzY3JlZW4nXSxcbiAgICAgIGhpZGVEZWxheTogMjAwMCxcbiAgICAgIGhpZGVQbGF5ZXJTdGF0ZUV4Y2VwdGlvbnM6IFtcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUHJlcGFyZWQsXG4gICAgICAgIFBsYXllclV0aWxzLlBsYXllclN0YXRlLlBhdXNlZCxcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuRmluaXNoZWQsXG4gICAgICBdLFxuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIG1vZGVyblNtYWxsU2NyZWVuQWRzVUkoKSB7XG4gICAgcmV0dXJuIG5ldyBVSUNvbnRhaW5lcih7XG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIG5ldyBCdWZmZXJpbmdPdmVybGF5KCksXG4gICAgICAgIG5ldyBBZENsaWNrT3ZlcmxheSgpLFxuICAgICAgICBuZXcgUGxheWJhY2tUb2dnbGVPdmVybGF5KCksXG4gICAgICAgIG5ldyBUaXRsZUJhcih7XG4gICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgLy8gZHVtbXkgbGFiZWwgd2l0aCBubyBjb250ZW50IHRvIG1vdmUgYnV0dG9ucyB0byB0aGUgcmlnaHRcbiAgICAgICAgICAgIG5ldyBMYWJlbCh7IGNzc0NsYXNzOiAnbGFiZWwtbWV0YWRhdGEtdGl0bGUnIH0pLFxuICAgICAgICAgICAgbmV3IEZ1bGxzY3JlZW5Ub2dnbGVCdXR0b24oKSxcbiAgICAgICAgICBdLFxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgbmV3IEFkTWVzc2FnZUxhYmVsKHsgdGV4dDogJ0FkOiB7cmVtYWluaW5nVGltZX0gc2VjcycgfSksXG4gICAgICAgICAgICBuZXcgQWRTa2lwQnV0dG9uKCksXG4gICAgICAgICAgXSxcbiAgICAgICAgICBjc3NDbGFzczogJ3VpLWFkcy1zdGF0dXMnLFxuICAgICAgICB9KSxcbiAgICAgIF0sXG4gICAgICBjc3NDbGFzc2VzOiBbJ3VpLXNraW4tYWRzJywgJ3VpLXNraW4tc21hbGxzY3JlZW4nXSxcbiAgICAgIGhpZGVEZWxheTogMjAwMCxcbiAgICAgIGhpZGVQbGF5ZXJTdGF0ZUV4Y2VwdGlvbnM6IFtcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUHJlcGFyZWQsXG4gICAgICAgIFBsYXllclV0aWxzLlBsYXllclN0YXRlLlBhdXNlZCxcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuRmluaXNoZWQsXG4gICAgICBdLFxuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIG1vZGVybkNhc3RSZWNlaXZlclVJKCkge1xuICAgIGxldCBjb250cm9sQmFyID0gbmV3IENvbnRyb2xCYXIoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICBuZXcgUGxheWJhY2tUaW1lTGFiZWwoe1xuICAgICAgICAgICAgICB0aW1lTGFiZWxNb2RlOiBQbGF5YmFja1RpbWVMYWJlbE1vZGUuQ3VycmVudFRpbWUsXG4gICAgICAgICAgICAgIGhpZGVJbkxpdmVQbGF5YmFjazogdHJ1ZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IFNlZWtCYXIoeyBzbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlSW50ZXJ2YWxNczogLTEgfSksXG4gICAgICAgICAgICBuZXcgUGxheWJhY2tUaW1lTGFiZWwoe1xuICAgICAgICAgICAgICB0aW1lTGFiZWxNb2RlOiBQbGF5YmFja1RpbWVMYWJlbE1vZGUuVG90YWxUaW1lLFxuICAgICAgICAgICAgICBjc3NDbGFzc2VzOiBbJ3RleHQtcmlnaHQnXSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgY3NzQ2xhc3NlczogWydjb250cm9sYmFyLXRvcCddLFxuICAgICAgICB9KSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmV3IENhc3RVSUNvbnRhaW5lcih7XG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIG5ldyBTdWJ0aXRsZU92ZXJsYXkoKSxcbiAgICAgICAgbmV3IEJ1ZmZlcmluZ092ZXJsYXkoKSxcbiAgICAgICAgbmV3IFBsYXliYWNrVG9nZ2xlT3ZlcmxheSgpLFxuICAgICAgICBuZXcgV2F0ZXJtYXJrKCksXG4gICAgICAgIGNvbnRyb2xCYXIsXG4gICAgICAgIG5ldyBUaXRsZUJhcih7IGtlZXBIaWRkZW5XaXRob3V0TWV0YWRhdGE6IHRydWUgfSksXG4gICAgICAgIG5ldyBFcnJvck1lc3NhZ2VPdmVybGF5KCksXG4gICAgICBdLFxuICAgICAgY3NzQ2xhc3NlczogWyd1aS1za2luLWNhc3QtcmVjZWl2ZXInXSxcbiAgICAgIGhpZGVEZWxheTogMjAwMCxcbiAgICAgIGhpZGVQbGF5ZXJTdGF0ZUV4Y2VwdGlvbnM6IFtcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUHJlcGFyZWQsXG4gICAgICAgIFBsYXllclV0aWxzLlBsYXllclN0YXRlLlBhdXNlZCxcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuRmluaXNoZWQsXG4gICAgICBdLFxuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTW9kZXJuVUkoXG4gICAgcGxheWVyOiBQbGF5ZXJBUEksXG4gICAgY29uZmlnOiBVSUNvbmZpZyA9IHt9LFxuICApOiBVSU1hbmFnZXIge1xuICAgIC8vIHNob3cgc21hbGxTY3JlZW4gVUkgb25seSBvbiBtb2JpbGUvaGFuZGhlbGQgZGV2aWNlc1xuICAgIGxldCBzbWFsbFNjcmVlblN3aXRjaFdpZHRoID0gNjAwO1xuXG4gICAgcmV0dXJuIG5ldyBVSU1hbmFnZXIoXG4gICAgICBwbGF5ZXIsXG4gICAgICBbXG4gICAgICAgIHtcbiAgICAgICAgICB1aTogbW9kZXJuU21hbGxTY3JlZW5BZHNVSSgpLFxuICAgICAgICAgIGNvbmRpdGlvbjogKGNvbnRleHQ6IFVJQ29uZGl0aW9uQ29udGV4dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgY29udGV4dC5pc01vYmlsZSAmJlxuICAgICAgICAgICAgICBjb250ZXh0LmRvY3VtZW50V2lkdGggPCBzbWFsbFNjcmVlblN3aXRjaFdpZHRoICYmXG4gICAgICAgICAgICAgIGNvbnRleHQuaXNBZCAmJlxuICAgICAgICAgICAgICBjb250ZXh0LmFkUmVxdWlyZXNVaVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdWk6IG1vZGVybkFkc1VJKCksXG4gICAgICAgICAgY29uZGl0aW9uOiAoY29udGV4dDogVUlDb25kaXRpb25Db250ZXh0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5pc0FkICYmIGNvbnRleHQuYWRSZXF1aXJlc1VpO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB1aTogbW9kZXJuU21hbGxTY3JlZW5VSSgpLFxuICAgICAgICAgIGNvbmRpdGlvbjogKGNvbnRleHQ6IFVJQ29uZGl0aW9uQ29udGV4dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgIWNvbnRleHQuaXNBZCAmJlxuICAgICAgICAgICAgICAhY29udGV4dC5hZFJlcXVpcmVzVWkgJiZcbiAgICAgICAgICAgICAgY29udGV4dC5pc01vYmlsZSAmJlxuICAgICAgICAgICAgICBjb250ZXh0LmRvY3VtZW50V2lkdGggPCBzbWFsbFNjcmVlblN3aXRjaFdpZHRoXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB1aTogbW9kZXJuVUkoKSxcbiAgICAgICAgICBjb25kaXRpb246IChjb250ZXh0OiBVSUNvbmRpdGlvbkNvbnRleHQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAhY29udGV4dC5pc0FkICYmICFjb250ZXh0LmFkUmVxdWlyZXNVaTtcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIGNvbmZpZyxcbiAgICApO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTW9kZXJuU21hbGxTY3JlZW5VSShcbiAgICBwbGF5ZXI6IFBsYXllckFQSSxcbiAgICBjb25maWc6IFVJQ29uZmlnID0ge30sXG4gICk6IFVJTWFuYWdlciB7XG4gICAgaWYgKHdpbmRvdy5iaXRtb3Zpbi5jdXN0b21NZXNzYWdlSGFuZGxlcikge1xuICAgICAgd2luZG93LmJpdG1vdmluLmN1c3RvbU1lc3NhZ2VIYW5kbGVyLm9uKFxuICAgICAgICAncmFkaW9Nb2RlQ2hhbmdlZCcsXG4gICAgICAgIChkYXRhPzogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBhY3RpdmF0ZWQgfSA9IEpTT04ucGFyc2UoZGF0YSkgfHwgeyBhY3RpdmF0ZWQ6IGZhbHNlIH07XG4gICAgICAgICAgdWlNYW5hZ2VyLnJlbGVhc2UoKTtcblxuICAgICAgICAgIHVpTWFuYWdlciA9IGFjdGl2YXRlZFxuICAgICAgICAgICAgPyBVSUZhY3RvcnkuYnVpbGRNb2Rlcm5SYWRpb01vZGVVSShwbGF5ZXIsIHVpQ29uZmlnKVxuICAgICAgICAgICAgOiBVSUZhY3RvcnkuYnVpbGRNb2Rlcm5TbWFsbFNjcmVlblVJKHBsYXllciwgdWlDb25maWcpO1xuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFVJTWFuYWdlcihcbiAgICAgIHBsYXllcixcbiAgICAgIFtcbiAgICAgICAge1xuICAgICAgICAgIHVpOiBtb2Rlcm5TbWFsbFNjcmVlbkFkc1VJKCksXG4gICAgICAgICAgY29uZGl0aW9uOiAoY29udGV4dDogVUlDb25kaXRpb25Db250ZXh0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5pc0FkICYmIGNvbnRleHQuYWRSZXF1aXJlc1VpO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB1aTogbW9kZXJuU21hbGxTY3JlZW5VSSgpLFxuICAgICAgICAgIGNvbmRpdGlvbjogKGNvbnRleHQ6IFVJQ29uZGl0aW9uQ29udGV4dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICFjb250ZXh0LmlzQWQgJiYgIWNvbnRleHQuYWRSZXF1aXJlc1VpO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgY29uZmlnLFxuICAgICk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gYnVpbGRNb2Rlcm5DYXN0UmVjZWl2ZXJVSShcbiAgICBwbGF5ZXI6IFBsYXllckFQSSxcbiAgICBjb25maWc6IFVJQ29uZmlnID0ge30sXG4gICk6IFVJTWFuYWdlciB7XG4gICAgcmV0dXJuIG5ldyBVSU1hbmFnZXIocGxheWVyLCBtb2Rlcm5DYXN0UmVjZWl2ZXJVSSgpLCBjb25maWcpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTW9kZXJuVHZVSShcbiAgICBwbGF5ZXI6IFBsYXllckFQSSxcbiAgICBjb25maWc6IFVJQ29uZmlnID0ge30sXG4gICk6IFVJTWFuYWdlciB7XG4gICAgcmV0dXJuIG5ldyBVSU1hbmFnZXIoXG4gICAgICBwbGF5ZXIsXG4gICAgICBbXG4gICAgICAgIHtcbiAgICAgICAgICAuLi5tb2Rlcm5UdlVJKCksXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgY29uZmlnLFxuICAgICk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gbW9kZXJuVHZVSSgpIHtcbiAgICBjb25zdCBzdWJ0aXRsZUxpc3RCb3ggPSBuZXcgU3VidGl0bGVMaXN0Qm94KCk7XG4gICAgY29uc3Qgc3VidGl0bGVMaXN0UGFuZWwgPSBuZXcgU2V0dGluZ3NQYW5lbCh7XG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsUGFnZSh7XG4gICAgICAgICAgY29tcG9uZW50czogW25ldyBTZXR0aW5nc1BhbmVsSXRlbShudWxsLCBzdWJ0aXRsZUxpc3RCb3gpXSxcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgICAgaGlkZGVuOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgY29uc3QgYXVkaW9UcmFja0xpc3RCb3ggPSBuZXcgQXVkaW9UcmFja0xpc3RCb3goKTtcbiAgICBjb25zdCBhdWRpb1RyYWNrTGlzdFBhbmVsID0gbmV3IFNldHRpbmdzUGFuZWwoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbFBhZ2Uoe1xuICAgICAgICAgIGNvbXBvbmVudHM6IFtuZXcgU2V0dGluZ3NQYW5lbEl0ZW0obnVsbCwgYXVkaW9UcmFja0xpc3RCb3gpXSxcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgICAgaGlkZGVuOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgY29uc3Qgc2Vla0JhciA9IG5ldyBTZWVrQmFyKHsgbGFiZWw6IG5ldyBTZWVrQmFyTGFiZWwoKSB9KTtcbiAgICBjb25zdCBwbGF5YmFja1RvZ2dsZU92ZXJsYXkgPSBuZXcgUGxheWJhY2tUb2dnbGVPdmVybGF5KCk7XG4gICAgY29uc3Qgc3VidGl0bGVUb2dnbGVCdXR0b24gPSBuZXcgU2V0dGluZ3NUb2dnbGVCdXR0b24oe1xuICAgICAgc2V0dGluZ3NQYW5lbDogc3VidGl0bGVMaXN0UGFuZWwsXG4gICAgICBhdXRvSGlkZVdoZW5Ob0FjdGl2ZVNldHRpbmdzOiB0cnVlLFxuICAgICAgY3NzQ2xhc3M6ICd1aS1zdWJ0aXRsZXNldHRpbmdzdG9nZ2xlYnV0dG9uJyxcbiAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMnKSxcbiAgICB9KTtcbiAgICBjb25zdCBhdWRpb1RvZ2dsZUJ1dHRvbiA9IG5ldyBTZXR0aW5nc1RvZ2dsZUJ1dHRvbih7XG4gICAgICBzZXR0aW5nc1BhbmVsOiBhdWRpb1RyYWNrTGlzdFBhbmVsLFxuICAgICAgYXV0b0hpZGVXaGVuTm9BY3RpdmVTZXR0aW5nczogdHJ1ZSxcbiAgICAgIGNzc0NsYXNzOiAndWktYXVkaW90cmFja3NldHRpbmdzdG9nZ2xlYnV0dG9uJyxcbiAgICAgIGFyaWFMYWJlbDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLmF1ZGlvLnRyYWNrJyksXG4gICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3MuYXVkaW8udHJhY2snKSxcbiAgICB9KTtcbiAgICBjb25zdCB1aUNvbnRhaW5lciA9IG5ldyBVSUNvbnRhaW5lcih7XG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIG5ldyBTdWJ0aXRsZU92ZXJsYXkoKSxcbiAgICAgICAgbmV3IEJ1ZmZlcmluZ092ZXJsYXkoKSxcbiAgICAgICAgcGxheWJhY2tUb2dnbGVPdmVybGF5LFxuICAgICAgICBuZXcgQ29udHJvbEJhcih7XG4gICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAgICBuZXcgUGxheWJhY2tUaW1lTGFiZWwoe1xuICAgICAgICAgICAgICAgICAgdGltZUxhYmVsTW9kZTogUGxheWJhY2tUaW1lTGFiZWxNb2RlLkN1cnJlbnRUaW1lLFxuICAgICAgICAgICAgICAgICAgaGlkZUluTGl2ZVBsYXliYWNrOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHNlZWtCYXIsXG4gICAgICAgICAgICAgICAgbmV3IFBsYXliYWNrVGltZUxhYmVsKHtcbiAgICAgICAgICAgICAgICAgIHRpbWVMYWJlbE1vZGU6IFBsYXliYWNrVGltZUxhYmVsTW9kZS5SZW1haW5pbmdUaW1lLFxuICAgICAgICAgICAgICAgICAgY3NzQ2xhc3NlczogWyd0ZXh0LXJpZ2h0J10sXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnY29udHJvbGJhci10b3AnXSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgVGl0bGVCYXIoe1xuICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgICAgbmV3IE1ldGFkYXRhTGFiZWwoeyBjb250ZW50OiBNZXRhZGF0YUxhYmVsQ29udGVudC5UaXRsZSB9KSxcbiAgICAgICAgICAgICAgICBzdWJ0aXRsZVRvZ2dsZUJ1dHRvbixcbiAgICAgICAgICAgICAgICBhdWRpb1RvZ2dsZUJ1dHRvbixcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgY3NzQ2xhc3NlczogWyd1aS10aXRsZWJhci10b3AnXSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAgICBuZXcgTWV0YWRhdGFMYWJlbCh7XG4gICAgICAgICAgICAgICAgICBjb250ZW50OiBNZXRhZGF0YUxhYmVsQ29udGVudC5EZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBzdWJ0aXRsZUxpc3RQYW5lbCxcbiAgICAgICAgICAgICAgICBhdWRpb1RyYWNrTGlzdFBhbmVsLFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBjc3NDbGFzc2VzOiBbJ3VpLXRpdGxlYmFyLWJvdHRvbSddLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgXSxcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBSZWNvbW1lbmRhdGlvbk92ZXJsYXkoKSxcbiAgICAgICAgbmV3IEVycm9yTWVzc2FnZU92ZXJsYXkoKSxcbiAgICAgIF0sXG4gICAgICBjc3NDbGFzc2VzOiBbJ3VpLXNraW4tdHYnXSxcbiAgICAgIGhpZGVEZWxheTogMjAwMCxcbiAgICAgIGhpZGVQbGF5ZXJTdGF0ZUV4Y2VwdGlvbnM6IFtcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUHJlcGFyZWQsXG4gICAgICAgIFBsYXllclV0aWxzLlBsYXllclN0YXRlLlBhdXNlZCxcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuRmluaXNoZWQsXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgY29uc3Qgc3BhdGlhbE5hdmlnYXRpb24gPSBuZXcgU3BhdGlhbE5hdmlnYXRpb24oXG4gICAgICBuZXcgUm9vdE5hdmlnYXRpb25Hcm91cChcbiAgICAgICAgdWlDb250YWluZXIsXG4gICAgICAgIHBsYXliYWNrVG9nZ2xlT3ZlcmxheSxcbiAgICAgICAgc2Vla0JhcixcbiAgICAgICAgYXVkaW9Ub2dnbGVCdXR0b24sXG4gICAgICAgIHN1YnRpdGxlVG9nZ2xlQnV0dG9uLFxuICAgICAgKSxcbiAgICAgIG5ldyBMaXN0TmF2aWdhdGlvbkdyb3VwKFxuICAgICAgICBMaXN0T3JpZW50YXRpb24uVmVydGljYWwsXG4gICAgICAgIHN1YnRpdGxlTGlzdFBhbmVsLFxuICAgICAgICBzdWJ0aXRsZUxpc3RCb3gsXG4gICAgICApLFxuICAgICAgbmV3IExpc3ROYXZpZ2F0aW9uR3JvdXAoXG4gICAgICAgIExpc3RPcmllbnRhdGlvbi5WZXJ0aWNhbCxcbiAgICAgICAgYXVkaW9UcmFja0xpc3RQYW5lbCxcbiAgICAgICAgYXVkaW9UcmFja0xpc3RCb3gsXG4gICAgICApLFxuICAgICk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdWk6IHVpQ29udGFpbmVyLFxuICAgICAgc3BhdGlhbE5hdmlnYXRpb246IHNwYXRpYWxOYXZpZ2F0aW9uLFxuICAgIH07XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gbW9kZXJuUmFkaW9Nb2RlVWkoKSB7XG4gICAgcmV0dXJuIG5ldyBVSUNvbnRhaW5lcih7XG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIG5ldyBDb250cm9sQmFyKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICAgIG5ldyBQbGF5YmFja1RvZ2dsZUJ1dHRvbigpLFxuICAgICAgICAgICAgICAgIG5ldyBTZWVrQmFyKHsgbGFiZWw6IG5ldyBTZWVrQmFyTGFiZWwoKSB9KSxcbiAgICAgICAgICAgICAgICBuZXcgUmFkaW9Nb2RlVG9nZ2xlQnV0dG9uKCksXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnY29udHJvbGJhci10b3AnXSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICAgIGNzc0NsYXNzZXM6IFsndWktc2tpbi1yYWRpbyddLFxuICAgICAgaGlkZURlbGF5OiAtMSxcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBidWlsZE1vZGVyblJhZGlvTW9kZVVJKFxuICAgIHBsYXllcjogUGxheWVyQVBJLFxuICAgIGNvbmZpZzogVUlDb25maWcgPSB7fSxcbiAgKTogVUlNYW5hZ2VyIHtcbiAgICByZXR1cm4gbmV3IFVJTWFuYWdlcihcbiAgICAgIHBsYXllcixcbiAgICAgIFtcbiAgICAgICAge1xuICAgICAgICAgIHVpOiBtb2Rlcm5SYWRpb01vZGVVaSgpLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIGNvbmZpZyxcbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQge1VJQ29udGFpbmVyfSBmcm9tICcuL2NvbXBvbmVudHMvdWljb250YWluZXInO1xuaW1wb3J0IHtET019IGZyb20gJy4vZG9tJztcbmltcG9ydCB7Q29tcG9uZW50LCBDb21wb25lbnRDb25maWd9IGZyb20gJy4vY29tcG9uZW50cy9jb21wb25lbnQnO1xuaW1wb3J0IHtDb250YWluZXJ9IGZyb20gJy4vY29tcG9uZW50cy9jb250YWluZXInO1xuaW1wb3J0IHsgU2Vla0JhciwgU2Vla0Jhck1hcmtlciB9IGZyb20gJy4vY29tcG9uZW50cy9zZWVrYmFyJztcbmltcG9ydCB7Tm9BcmdzLCBFdmVudERpc3BhdGNoZXIsIENhbmNlbEV2ZW50QXJnc30gZnJvbSAnLi9ldmVudGRpc3BhdGNoZXInO1xuaW1wb3J0IHtVSVV0aWxzfSBmcm9tICcuL3VpdXRpbHMnO1xuaW1wb3J0IHtBcnJheVV0aWxzfSBmcm9tICcuL2FycmF5dXRpbHMnO1xuaW1wb3J0IHtCcm93c2VyVXRpbHN9IGZyb20gJy4vYnJvd3NlcnV0aWxzJztcbmltcG9ydCB7IFRpbWVsaW5lTWFya2VyLCBVSUNvbmZpZyB9IGZyb20gJy4vdWljb25maWcnO1xuaW1wb3J0IHsgUGxheWVyQVBJLCBQbGF5ZXJFdmVudENhbGxiYWNrLCBQbGF5ZXJFdmVudEJhc2UsIFBsYXllckV2ZW50LCBBZEV2ZW50LCBMaW5lYXJBZCB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBWb2x1bWVDb250cm9sbGVyIH0gZnJvbSAnLi92b2x1bWVjb250cm9sbGVyJztcbmltcG9ydCB7IGkxOG4sIEN1c3RvbVZvY2FidWxhcnksIFZvY2FidWxhcmllcyB9IGZyb20gJy4vbG9jYWxpemF0aW9uL2kxOG4nO1xuaW1wb3J0IHsgRm9jdXNWaXNpYmlsaXR5VHJhY2tlciB9IGZyb20gJy4vZm9jdXN2aXNpYmlsaXR5dHJhY2tlcic7XG5pbXBvcnQgeyBpc01vYmlsZVYzUGxheWVyQVBJLCBNb2JpbGVWM1BsYXllckFQSSwgTW9iaWxlVjNQbGF5ZXJFdmVudCB9IGZyb20gJy4vbW9iaWxldjNwbGF5ZXJhcGknO1xuaW1wb3J0IHsgU3BhdGlhbE5hdmlnYXRpb24gfSBmcm9tICcuL3NwYXRpYWxuYXZpZ2F0aW9uL3NwYXRpYWxuYXZpZ2F0aW9uJztcblxuZXhwb3J0IGludGVyZmFjZSBMb2NhbGl6YXRpb25Db25maWcge1xuICAvKipcbiAgICogU2V0cyB0aGUgZGVzaXJlZCBsYW5ndWFnZSwgYW5kIGZhbGxzIGJhY2sgdG8gJ2VuJyBpZiB0aGVyZSBpcyBubyB2b2NhYnVsYXJ5IGZvciB0aGUgZGVzaXJlZCBsYW5ndWFnZS4gU2V0dGluZyBpdFxuICAgKiB0byBcImF1dG9cIiB3aWxsIGVuYWJsZSBsYW5ndWFnZSBkZXRlY3Rpb24gZnJvbSB0aGUgYnJvd3NlcidzIGxvY2FsZS5cbiAgICovXG4gIGxhbmd1YWdlPzogJ2F1dG8nIHwgJ2VuJyB8ICdkZScgfCBzdHJpbmc7XG4gIC8qKlxuICAgKiBBIG1hcCBvZiBgbGFuZ3VhZ2VgIHRvIHtAbGluayBDdXN0b21Wb2NhYnVsYXJ5fSBkZWZpbml0aW9ucy4gQ2FuIGJlIHVzZWQgdG8gb3ZlcndyaXRlIGRlZmF1bHQgdHJhbnNsYXRpb25zIGFuZCBhZGRcbiAgICogY3VzdG9tIHN0cmluZ3Mgb3IgYWRkaXRpb25hbCBsYW5ndWFnZXMuXG4gICAqL1xuICB2b2NhYnVsYXJpZXM/OiBWb2NhYnVsYXJpZXM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW50ZXJuYWxVSUNvbmZpZyBleHRlbmRzIFVJQ29uZmlnIHtcbiAgZXZlbnRzOiB7XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgY29uZmlndXJhdGlvbiBoYXMgYmVlbiB1cGRhdGVkL2NoYW5nZWQuXG4gICAgICovXG4gICAgb25VcGRhdGVkOiBFdmVudERpc3BhdGNoZXI8VUlNYW5hZ2VyLCB2b2lkPjtcbiAgfTtcbiAgdm9sdW1lQ29udHJvbGxlcjogVm9sdW1lQ29udHJvbGxlcjtcbn1cblxuLyoqXG4gKiBUaGUgY29udGV4dCB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIGEge0BsaW5rIFVJQ29uZGl0aW9uUmVzb2x2ZXJ9IHRvIGRldGVybWluZSBpZiBpdCdzIGNvbmRpdGlvbnMgZnVsZmlsIHRoZSBjb250ZXh0LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFVJQ29uZGl0aW9uQ29udGV4dCB7XG4gIC8qKlxuICAgKiBUZWxscyBpZiB0aGUgcGxheWVyIGlzIGxvYWRpbmcgb3IgcGxheWluZyBhbiBhZC5cbiAgICovXG4gIGlzQWQ6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBUZWxscyBpZiB0aGUgY3VycmVudCBhZCByZXF1aXJlcyBhbiBleHRlcm5hbCBVSSwgaWYge0BsaW5rICNpc0FkfSBpcyB0cnVlLlxuICAgKi9cbiAgYWRSZXF1aXJlc1VpOiBib29sZWFuO1xuICAvKipcbiAgICogVGVsbHMgaWYgdGhlIHBsYXllciBpcyBjdXJyZW50bHkgaW4gZnVsbHNjcmVlbiBtb2RlLlxuICAgKi9cbiAgaXNGdWxsc2NyZWVuOiBib29sZWFuO1xuICAvKipcbiAgICogVGVsbHMgaWYgdGhlIFVJIGlzIHJ1bm5pbmcgaW4gYSBtb2JpbGUgYnJvd3Nlci5cbiAgICovXG4gIGlzTW9iaWxlOiBib29sZWFuO1xuICAvKipcbiAgICogVGVsbHMgaWYgdGhlIHBsYXllciBpcyBpbiBwbGF5aW5nIG9yIHBhdXNlZCBzdGF0ZS5cbiAgICovXG4gIGlzUGxheWluZzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFRoZSB3aWR0aCBvZiB0aGUgcGxheWVyL1VJIGVsZW1lbnQuXG4gICAqL1xuICB3aWR0aDogbnVtYmVyO1xuICAvKipcbiAgICogVGhlIHdpZHRoIG9mIHRoZSBkb2N1bWVudCB3aGVyZSB0aGUgcGxheWVyL1VJIGlzIGVtYmVkZGVkIGluLlxuICAgKi9cbiAgZG9jdW1lbnRXaWR0aDogbnVtYmVyO1xufVxuXG4vKipcbiAqIFJlc29sdmVzIHRoZSBjb25kaXRpb25zIG9mIGl0cyBhc3NvY2lhdGVkIFVJIGluIGEge0BsaW5rIFVJVmFyaWFudH0gdXBvbiBhIHtAbGluayBVSUNvbmRpdGlvbkNvbnRleHR9IGFuZCBkZWNpZGVzXG4gKiBpZiB0aGUgVUkgc2hvdWxkIGJlIGRpc3BsYXllZC4gSWYgaXQgcmV0dXJucyB0cnVlLCB0aGUgVUkgaXMgYSBjYW5kaWRhdGUgZm9yIGRpc3BsYXk7IGlmIGl0IHJldHVybnMgZmFsc2UsIGl0IHdpbGxcbiAqIG5vdCBiZSBkaXNwbGF5ZWQgaW4gdGhlIGdpdmVuIGNvbnRleHQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVUlDb25kaXRpb25SZXNvbHZlciB7XG4gIChjb250ZXh0OiBVSUNvbmRpdGlvbkNvbnRleHQpOiBib29sZWFuO1xufVxuXG4vKipcbiAqIEFzc29jaWF0ZXMgYSBVSSBpbnN0YW5jZSB3aXRoIGFuIG9wdGlvbmFsIHtAbGluayBVSUNvbmRpdGlvblJlc29sdmVyfSB0aGF0IGRldGVybWluZXMgaWYgdGhlIFVJIHNob3VsZCBiZSBkaXNwbGF5ZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVUlWYXJpYW50IHtcbiAgdWk6IFVJQ29udGFpbmVyO1xuICBjb25kaXRpb24/OiBVSUNvbmRpdGlvblJlc29sdmVyO1xuICBzcGF0aWFsTmF2aWdhdGlvbj86IFNwYXRpYWxOYXZpZ2F0aW9uO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjdGl2ZVVpQ2hhbmdlZEFyZ3MgZXh0ZW5kcyBOb0FyZ3Mge1xuICAvKipcbiAgICogVGhlIHByZXZpb3VzbHkgYWN0aXZlIHtAbGluayBVSUluc3RhbmNlTWFuYWdlcn0gcHJpb3IgdG8gdGhlIHtAbGluayBVSU1hbmFnZXJ9IHN3aXRjaGluZyB0byBhIGRpZmZlcmVudCBVSSB2YXJpYW50LlxuICAgKi9cbiAgcHJldmlvdXNVaTogVUlJbnN0YW5jZU1hbmFnZXI7XG4gIC8qKlxuICAgKiBUaGUgY3VycmVudGx5IGFjdGl2ZSB7QGxpbmsgVUlJbnN0YW5jZU1hbmFnZXJ9LlxuICAgKi9cbiAgY3VycmVudFVpOiBVSUluc3RhbmNlTWFuYWdlcjtcbn1cblxuZXhwb3J0IGNsYXNzIFVJTWFuYWdlciB7XG5cbiAgcHJpdmF0ZSBwbGF5ZXI6IFBsYXllckFQSTtcbiAgcHJpdmF0ZSB1aUNvbnRhaW5lckVsZW1lbnQ6IERPTTtcbiAgcHJpdmF0ZSB1aVZhcmlhbnRzOiBVSVZhcmlhbnRbXTtcbiAgcHJpdmF0ZSB1aUluc3RhbmNlTWFuYWdlcnM6IEludGVybmFsVUlJbnN0YW5jZU1hbmFnZXJbXTtcbiAgcHJpdmF0ZSBjdXJyZW50VWk6IEludGVybmFsVUlJbnN0YW5jZU1hbmFnZXI7XG4gIHByaXZhdGUgY29uZmlnOiBJbnRlcm5hbFVJQ29uZmlnOyAvLyBDb25qdW5jdGlvbiBvZiBwcm92aWRlZCB1aUNvbmZpZyBhbmQgc291cmNlQ29uZmlnIGZyb20gdGhlIHBsYXllclxuICBwcml2YXRlIG1hbmFnZXJQbGF5ZXJXcmFwcGVyOiBQbGF5ZXJXcmFwcGVyO1xuICBwcml2YXRlIGZvY3VzVmlzaWJpbGl0eVRyYWNrZXI6IEZvY3VzVmlzaWJpbGl0eVRyYWNrZXI7XG5cbiAgcHJpdmF0ZSBldmVudHMgPSB7XG4gICAgb25VaVZhcmlhbnRSZXNvbHZlOiBuZXcgRXZlbnREaXNwYXRjaGVyPFVJTWFuYWdlciwgVUlDb25kaXRpb25Db250ZXh0PigpLFxuICAgIG9uQWN0aXZlVWlDaGFuZ2VkOiBuZXcgRXZlbnREaXNwYXRjaGVyPFVJTWFuYWdlciwgQWN0aXZlVWlDaGFuZ2VkQXJncz4oKSxcbiAgfTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIFVJIG1hbmFnZXIgd2l0aCBhIHNpbmdsZSBVSSB2YXJpYW50IHRoYXQgd2lsbCBiZSBwZXJtYW5lbnRseSBzaG93bi5cbiAgICogQHBhcmFtIHBsYXllciB0aGUgYXNzb2NpYXRlZCBwbGF5ZXIgb2YgdGhpcyBVSVxuICAgKiBAcGFyYW0gdWkgdGhlIFVJIHRvIGFkZCB0byB0aGUgcGxheWVyXG4gICAqIEBwYXJhbSB1aWNvbmZpZyBvcHRpb25hbCBVSSBjb25maWd1cmF0aW9uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwbGF5ZXI6IFBsYXllckFQSSwgdWk6IFVJQ29udGFpbmVyLCB1aWNvbmZpZz86IFVJQ29uZmlnKTtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBVSSBtYW5hZ2VyIHdpdGggYSBsaXN0IG9mIFVJIHZhcmlhbnRzIHRoYXQgd2lsbCBiZSBkeW5hbWljYWxseSBzZWxlY3RlZCBhbmQgc3dpdGNoZWQgYWNjb3JkaW5nIHRvXG4gICAqIHRoZSBjb250ZXh0IG9mIHRoZSBVSS5cbiAgICpcbiAgICogRXZlcnkgdGltZSB0aGUgVUkgY29udGV4dCBjaGFuZ2VzLCB0aGUgY29uZGl0aW9ucyBvZiB0aGUgVUkgdmFyaWFudHMgd2lsbCBiZSBzZXF1ZW50aWFsbHkgcmVzb2x2ZWQgYW5kIHRoZSBmaXJzdFxuICAgKiBVSSwgd2hvc2UgY29uZGl0aW9uIGV2YWx1YXRlcyB0byB0cnVlLCB3aWxsIGJlIHNlbGVjdGVkIGFuZCBkaXNwbGF5ZWQuIFRoZSBsYXN0IHZhcmlhbnQgaW4gdGhlIGxpc3QgbWlnaHQgb21pdCB0aGVcbiAgICogY29uZGl0aW9uIHJlc29sdmVyIGFuZCB3aWxsIGJlIHNlbGVjdGVkIGFzIGRlZmF1bHQvZmFsbGJhY2sgVUkgd2hlbiBhbGwgb3RoZXIgY29uZGl0aW9ucyBmYWlsLiBJZiB0aGVyZSBpcyBub1xuICAgKiBmYWxsYmFjayBVSSBhbmQgYWxsIGNvbmRpdGlvbnMgZmFpbCwgbm8gVUkgd2lsbCBiZSBkaXNwbGF5ZWQuXG4gICAqXG4gICAqIEBwYXJhbSBwbGF5ZXIgdGhlIGFzc29jaWF0ZWQgcGxheWVyIG9mIHRoaXMgVUlcbiAgICogQHBhcmFtIHVpVmFyaWFudHMgYSBsaXN0IG9mIFVJIHZhcmlhbnRzIHRoYXQgd2lsbCBiZSBkeW5hbWljYWxseSBzd2l0Y2hlZFxuICAgKiBAcGFyYW0gdWljb25maWcgb3B0aW9uYWwgVUkgY29uZmlndXJhdGlvblxuICAgKi9cbiAgY29uc3RydWN0b3IocGxheWVyOiBQbGF5ZXJBUEksIHVpVmFyaWFudHM6IFVJVmFyaWFudFtdLCB1aWNvbmZpZz86IFVJQ29uZmlnKTtcbiAgY29uc3RydWN0b3IocGxheWVyOiBQbGF5ZXJBUEksIHBsYXllclVpT3JVaVZhcmlhbnRzOiBVSUNvbnRhaW5lciB8IFVJVmFyaWFudFtdLCB1aWNvbmZpZzogVUlDb25maWcgPSB7fSkge1xuICAgIGlmIChwbGF5ZXJVaU9yVWlWYXJpYW50cyBpbnN0YW5jZW9mIFVJQ29udGFpbmVyKSB7XG4gICAgICAvLyBTaW5nbGUtVUkgY29uc3RydWN0b3IgaGFzIGJlZW4gY2FsbGVkLCB0cmFuc2Zvcm0gYXJndW1lbnRzIHRvIFVJVmFyaWFudFtdIHNpZ25hdHVyZVxuICAgICAgbGV0IHBsYXllclVpID0gPFVJQ29udGFpbmVyPnBsYXllclVpT3JVaVZhcmlhbnRzO1xuICAgICAgbGV0IHVpVmFyaWFudHMgPSBbXTtcblxuICAgICAgLy8gQWRkIHRoZSBkZWZhdWx0IHBsYXllciBVSVxuICAgICAgdWlWYXJpYW50cy5wdXNoKHsgdWk6IHBsYXllclVpIH0pO1xuXG4gICAgICB0aGlzLnVpVmFyaWFudHMgPSB1aVZhcmlhbnRzO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIERlZmF1bHQgY29uc3RydWN0b3IgKFVJVmFyaWFudFtdKSBoYXMgYmVlbiBjYWxsZWRcbiAgICAgIHRoaXMudWlWYXJpYW50cyA9IDxVSVZhcmlhbnRbXT5wbGF5ZXJVaU9yVWlWYXJpYW50cztcbiAgICB9XG5cbiAgICB0aGlzLnBsYXllciA9IHBsYXllcjtcbiAgICB0aGlzLm1hbmFnZXJQbGF5ZXJXcmFwcGVyID0gbmV3IFBsYXllcldyYXBwZXIocGxheWVyKTtcblxuICAgIC8vIGVuc3VyZSB0aGF0IGF0IGxlYXN0IHRoZSBtZXRhZGF0YSBvYmplY3QgZG9lcyBleGlzdCBpbiB0aGUgdWljb25maWdcbiAgICB1aWNvbmZpZy5tZXRhZGF0YSA9IHVpY29uZmlnLm1ldGFkYXRhID8gdWljb25maWcubWV0YWRhdGEgOiB7fTtcblxuICAgIHRoaXMuY29uZmlnID0ge1xuICAgICAgcGxheWJhY2tTcGVlZFNlbGVjdGlvbkVuYWJsZWQ6IHRydWUsIC8vIFN3aXRjaCBvbiBzcGVlZCBzZWxlY3RvciBieSBkZWZhdWx0XG4gICAgICBhdXRvVWlWYXJpYW50UmVzb2x2ZTogdHJ1ZSwgLy8gU3dpdGNoIG9uIGF1dG8gVUkgcmVzb2x2aW5nIGJ5IGRlZmF1bHRcbiAgICAgIGRpc2FibGVBdXRvSGlkZVdoZW5Ib3ZlcmVkOiBmYWxzZSwgLy8gRGlzYWJsZSBhdXRvIGhpZGUgd2hlbiBVSSBpcyBob3ZlcmVkXG4gICAgICBlbmFibGVTZWVrUHJldmlldzogdHJ1ZSxcbiAgICAgIC4uLnVpY29uZmlnLFxuICAgICAgZXZlbnRzOiB7XG4gICAgICAgIG9uVXBkYXRlZDogbmV3IEV2ZW50RGlzcGF0Y2hlcjxVSU1hbmFnZXIsIHZvaWQ+KCksXG4gICAgICB9LFxuICAgICAgdm9sdW1lQ29udHJvbGxlcjogbmV3IFZvbHVtZUNvbnRyb2xsZXIodGhpcy5tYW5hZ2VyUGxheWVyV3JhcHBlci5nZXRQbGF5ZXIoKSksXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdhdGhlcnMgY29uZmlndXJhdGlvbiBkYXRhIGZyb20gdGhlIFVJIGNvbmZpZyBhbmQgcGxheWVyIHNvdXJjZSBjb25maWcgYW5kIGNyZWF0ZXMgYSBtZXJnZWQgVUkgY29uZmlnXG4gICAgICogdGhhdCBpcyB1c2VkIHRocm91Z2hvdXQgdGhlIFVJIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZUNvbmZpZyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHBsYXllclNvdXJjZUNvbmZpZyA9IHBsYXllci5nZXRTb3VyY2UoKSB8fCB7fTtcbiAgICAgIHRoaXMuY29uZmlnLm1ldGFkYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh1aWNvbmZpZy5tZXRhZGF0YSB8fCB7fSkpO1xuXG4gICAgICAvLyBFeHRyYWN0IHRoZSBVSS1yZWxhdGVkIGNvbmZpZyBwcm9wZXJ0aWVzIGZyb20gdGhlIHNvdXJjZSBjb25maWdcbiAgICAgIGNvbnN0IHBsYXllclNvdXJjZVVpQ29uZmlnOiBVSUNvbmZpZyA9IHtcbiAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAvLyBUT0RPIG1vdmUgbWV0YWRhdGEgaW50byBzb3VyY2UubWV0YWRhdGEgbmFtZXNwYWNlIGluIHBsYXllciB2OFxuICAgICAgICAgIHRpdGxlOiBwbGF5ZXJTb3VyY2VDb25maWcudGl0bGUsXG4gICAgICAgICAgZGVzY3JpcHRpb246IHBsYXllclNvdXJjZUNvbmZpZy5kZXNjcmlwdGlvbixcbiAgICAgICAgICBtYXJrZXJzOiAocGxheWVyU291cmNlQ29uZmlnIGFzIGFueSkubWFya2VycyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVjb21tZW5kYXRpb25zOiAocGxheWVyU291cmNlQ29uZmlnIGFzIGFueSkucmVjb21tZW5kYXRpb25zLFxuICAgICAgfTtcblxuICAgICAgLy8gUGxheWVyIHNvdXJjZSBjb25maWcgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIHRoZSBVSSBjb25maWcsIGJlY2F1c2UgdGhlIGNvbmZpZyBpbiB0aGUgc291cmNlIGlzIGF0dGFjaGVkXG4gICAgICAvLyB0byBhIHNvdXJjZSB3aGljaCBjaGFuZ2VzIHdpdGggZXZlcnkgcGxheWVyLmxvYWQsIHdoZXJlYXMgdGhlIFVJIGNvbmZpZyBzdGF5cyB0aGUgc2FtZSBmb3IgdGhlIHdob2xlXG4gICAgICAvLyBsaWZldGltZSBvZiB0aGUgcGxheWVyIGluc3RhbmNlLlxuICAgICAgdGhpcy5jb25maWcubWV0YWRhdGEudGl0bGUgPSBwbGF5ZXJTb3VyY2VVaUNvbmZpZy5tZXRhZGF0YS50aXRsZSB8fCB1aWNvbmZpZy5tZXRhZGF0YS50aXRsZTtcbiAgICAgIHRoaXMuY29uZmlnLm1ldGFkYXRhLmRlc2NyaXB0aW9uID0gcGxheWVyU291cmNlVWlDb25maWcubWV0YWRhdGEuZGVzY3JpcHRpb24gfHwgdWljb25maWcubWV0YWRhdGEuZGVzY3JpcHRpb247XG4gICAgICB0aGlzLmNvbmZpZy5tZXRhZGF0YS5tYXJrZXJzID0gcGxheWVyU291cmNlVWlDb25maWcubWV0YWRhdGEubWFya2VycyB8fCB1aWNvbmZpZy5tZXRhZGF0YS5tYXJrZXJzIHx8IFtdO1xuICAgICAgdGhpcy5jb25maWcucmVjb21tZW5kYXRpb25zID0gcGxheWVyU291cmNlVWlDb25maWcucmVjb21tZW5kYXRpb25zIHx8IHVpY29uZmlnLnJlY29tbWVuZGF0aW9ucyB8fCBbXTtcbiAgICB9O1xuXG4gICAgdXBkYXRlQ29uZmlnKCk7XG5cbiAgICAvLyBVcGRhdGUgdGhlIHNvdXJjZSBjb25maWd1cmF0aW9uIHdoZW4gYSBuZXcgc291cmNlIGlzIGxvYWRlZCBhbmQgZGlzcGF0Y2ggb25VcGRhdGVkXG4gICAgY29uc3QgdXBkYXRlU291cmNlID0gKCkgPT4ge1xuICAgICAgdXBkYXRlQ29uZmlnKCk7XG4gICAgICB0aGlzLmNvbmZpZy5ldmVudHMub25VcGRhdGVkLmRpc3BhdGNoKHRoaXMpO1xuICAgIH07XG5cbiAgICBjb25zdCB3cmFwcGVkUGxheWVyID0gdGhpcy5tYW5hZ2VyUGxheWVyV3JhcHBlci5nZXRQbGF5ZXIoKTtcblxuICAgIHdyYXBwZWRQbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VMb2FkZWQsIHVwZGF0ZVNvdXJjZSk7XG5cbiAgICAvLyBUaGUgUGxheWxpc3RUcmFuc2l0aW9uIGV2ZW50IGlzIG9ubHkgYXZhaWxhYmxlIG9uIE1vYmlsZSB2MyBmb3Igbm93LlxuICAgIC8vIFRoaXMgZXZlbnQgaXMgZmlyZWQgd2hlbiBhIG5ldyBzb3VyY2UgYmVjb21lcyBhY3RpdmUgaW4gdGhlIHBsYXllci5cbiAgICBpZiAoaXNNb2JpbGVWM1BsYXllckFQSSh3cmFwcGVkUGxheWVyKSkge1xuICAgICAgd3JhcHBlZFBsYXllci5vbihNb2JpbGVWM1BsYXllckV2ZW50LlBsYXlsaXN0VHJhbnNpdGlvbiwgdXBkYXRlU291cmNlKTtcbiAgICB9XG5cbiAgICBpZiAodWljb25maWcuY29udGFpbmVyKSB7XG4gICAgICAvLyBVbmZvcnR1bmF0ZWx5IFwidWlDb250YWluZXJFbGVtZW50ID0gbmV3IERPTShjb25maWcuY29udGFpbmVyKVwiIHdpbGwgbm90IGFjY2VwdCB0aGUgY29udGFpbmVyIHdpdGhcbiAgICAgIC8vIHN0cmluZ3xIVE1MRWxlbWVudCB0eXBlIGRpcmVjdGx5LCBhbHRob3VnaCBpdCBhY2NlcHRzIGJvdGggdHlwZXMsIHNvIHdlIG5lZWQgdG8gc3BpdCB0aGVzZSB0d28gY2FzZXMgdXAgaGVyZS5cbiAgICAgIC8vIFRPRE8gY2hlY2sgaW4gdXBjb21pbmcgVFMgdmVyc2lvbnMgaWYgdGhlIGNvbnRhaW5lciBjYW4gYmUgcGFzc2VkIGluIGRpcmVjdGx5LCBvciBmaXggdGhlIGNvbnN0cnVjdG9yXG4gICAgICB0aGlzLnVpQ29udGFpbmVyRWxlbWVudCA9IHVpY29uZmlnLmNvbnRhaW5lciBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ID9cbiAgICAgICAgbmV3IERPTSh1aWNvbmZpZy5jb250YWluZXIpIDogbmV3IERPTSh1aWNvbmZpZy5jb250YWluZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVpQ29udGFpbmVyRWxlbWVudCA9IG5ldyBET00ocGxheWVyLmdldENvbnRhaW5lcigpKTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgVUkgaW5zdGFuY2UgbWFuYWdlcnMgZm9yIHRoZSBVSSB2YXJpYW50c1xuICAgIC8vIFRoZSBpbnN0YW5jZSBtYW5hZ2VycyBtYXAgdG8gdGhlIGNvcnJlc3BvbmRpbmcgVUkgdmFyaWFudHMgYnkgdGhlaXIgYXJyYXkgaW5kZXhcbiAgICB0aGlzLnVpSW5zdGFuY2VNYW5hZ2VycyA9IFtdO1xuICAgIGxldCB1aVZhcmlhbnRzV2l0aG91dENvbmRpdGlvbiA9IFtdO1xuICAgIGZvciAobGV0IHVpVmFyaWFudCBvZiB0aGlzLnVpVmFyaWFudHMpIHtcbiAgICAgIGlmICh1aVZhcmlhbnQuY29uZGl0aW9uID09IG51bGwpIHtcbiAgICAgICAgLy8gQ29sbGVjdCB2YXJpYW50cyB3aXRob3V0IGNvbmRpdGlvbnMgZm9yIGVycm9yIGNoZWNraW5nXG4gICAgICAgIHVpVmFyaWFudHNXaXRob3V0Q29uZGl0aW9uLnB1c2godWlWYXJpYW50KTtcbiAgICAgIH1cbiAgICAgIC8vIENyZWF0ZSB0aGUgaW5zdGFuY2UgbWFuYWdlciBmb3IgYSBVSSB2YXJpYW50XG4gICAgICB0aGlzLnVpSW5zdGFuY2VNYW5hZ2Vycy5wdXNoKG5ldyBJbnRlcm5hbFVJSW5zdGFuY2VNYW5hZ2VyKFxuICAgICAgICBwbGF5ZXIsXG4gICAgICAgIHVpVmFyaWFudC51aSxcbiAgICAgICAgdGhpcy5jb25maWcsXG4gICAgICAgIHVpVmFyaWFudC5zcGF0aWFsTmF2aWdhdGlvbixcbiAgICAgICkpO1xuICAgIH1cbiAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGVyZSBpcyBvbmx5IG9uZSBVSSB2YXJpYW50IHdpdGhvdXQgYSBjb25kaXRpb25cbiAgICAvLyBJdCBkb2VzIG5vdCBtYWtlIHNlbnNlIHRvIGhhdmUgbXVsdGlwbGUgdmFyaWFudHMgd2l0aG91dCBjb25kaXRpb24sIGJlY2F1c2Ugb25seSB0aGUgZmlyc3Qgb25lIGluIHRoZSBsaXN0XG4gICAgLy8gKHRoZSBvbmUgd2l0aCB0aGUgbG93ZXN0IGluZGV4KSB3aWxsIGV2ZXIgYmUgc2VsZWN0ZWQuXG4gICAgaWYgKHVpVmFyaWFudHNXaXRob3V0Q29uZGl0aW9uLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRocm93IEVycm9yKCdUb28gbWFueSBVSXMgd2l0aG91dCBhIGNvbmRpdGlvbjogWW91IGNhbm5vdCBoYXZlIG1vcmUgdGhhbiBvbmUgZGVmYXVsdCBVSScpO1xuICAgIH1cbiAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgZGVmYXVsdCBVSSB2YXJpYW50LCBpZiBkZWZpbmVkLCBpcyBhdCB0aGUgZW5kIG9mIHRoZSBsaXN0IChsYXN0IGluZGV4KVxuICAgIC8vIElmIGl0IGNvbWVzIGVhcmxpZXIsIHRoZSB2YXJpYW50cyB3aXRoIGNvbmRpdGlvbnMgdGhhdCBjb21lIGFmdGVyd2FyZHMgd2lsbCBuZXZlciBiZSBzZWxlY3RlZCBiZWNhdXNlIHRoZVxuICAgIC8vIGRlZmF1bHQgdmFyaWFudCB3aXRob3V0IGEgY29uZGl0aW9uIGFsd2F5cyBldmFsdWF0ZXMgdG8gJ3RydWUnXG4gICAgaWYgKHVpVmFyaWFudHNXaXRob3V0Q29uZGl0aW9uLmxlbmd0aCA+IDBcbiAgICAgICYmIHVpVmFyaWFudHNXaXRob3V0Q29uZGl0aW9uWzBdICE9PSB0aGlzLnVpVmFyaWFudHNbdGhpcy51aVZhcmlhbnRzLmxlbmd0aCAtIDFdKSB7XG4gICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBVSSB2YXJpYW50IG9yZGVyOiB0aGUgZGVmYXVsdCBVSSAod2l0aG91dCBjb25kaXRpb24pIG11c3QgYmUgYXQgdGhlIGVuZCBvZiB0aGUgbGlzdCcpO1xuICAgIH1cblxuICAgIGxldCBhZFN0YXJ0ZWRFdmVudDogQWRFdmVudCA9IG51bGw7IC8vIGtlZXAgdGhlIGV2ZW50IHN0b3JlZCBoZXJlIGR1cmluZyBhZCBwbGF5YmFja1xuXG4gICAgLy8gRHluYW1pY2FsbHkgc2VsZWN0IGEgVUkgdmFyaWFudCB0aGF0IG1hdGNoZXMgdGhlIGN1cnJlbnQgVUkgY29uZGl0aW9uLlxuICAgIGxldCByZXNvbHZlVWlWYXJpYW50ID0gKGV2ZW50OiBQbGF5ZXJFdmVudEJhc2UpID0+IHtcbiAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBBZFN0YXJ0ZWQgZXZlbnQgZGF0YSBpcyBwZXJzaXN0ZWQgdGhyb3VnaCBhZCBwbGF5YmFjayBpbiBjYXNlIG90aGVyIGV2ZW50cyBoYXBwZW5cbiAgICAgIC8vIGluIHRoZSBtZWFudGltZSwgZS5nLiBwbGF5ZXIgcmVzaXplLiBXZSBuZWVkIHRvIHN0b3JlIHRoaXMgZGF0YSBiZWNhdXNlIHRoZXJlIGlzIG5vIG90aGVyIHdheSB0byBmaW5kIG91dFxuICAgICAgLy8gYWQgZGV0YWlscyB3aGlsZSBhbiBhZCBpcyBwbGF5aW5nIChpbiB2OC4wIGF0IGxlYXN0OyBmcm9tIHY4LjEgdGhlcmUgd2lsbCBiZSBhZHMuZ2V0QWN0aXZlQWQoKSkuXG4gICAgICAvLyBFeGlzdGluZyBldmVudCBkYXRhIHNpZ25hbHMgdGhhdCBhbiBhZCBpcyBjdXJyZW50bHkgYWN0aXZlIChpbnN0ZWFkIG9mIGFkcy5pc0xpbmVhckFkQWN0aXZlKCkpLlxuICAgICAgaWYgKGV2ZW50ICE9IG51bGwpIHtcbiAgICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICAgICAgLy8gVGhlIGFkcyBVSSBpcyBzaG93biB1cG9uIHRoZSBmaXJzdCBBZFN0YXJ0ZWQgZXZlbnQuIFN1YnNlcXVlbnQgQWRTdGFydGVkIGV2ZW50cyB3aXRoaW4gYW4gYWQgYnJlYWtcbiAgICAgICAgICAvLyB3aWxsIG5vdCBjaGFuZ2UgdGhlIGNvbmRpdGlvbiBjb250ZXh0IGFuZCB0aHVzIG5vdCBsZWFkIHRvIHVuZGVzaXJlZCBVSSB2YXJpYW50IHJlc29sdmluZy5cbiAgICAgICAgICAvLyBUaGUgYWRzIFVJIGlzIHNob3duIHVwb24gQWRTdGFydGVkIGluc3RlYWQgb2YgQWRCcmVha1N0YXJ0ZWQgYmVjYXVzZSB0aGVyZSBjYW4gYmUgYSBsb2FkaW5nIGRlbGF5XG4gICAgICAgICAgLy8gYmV0d2VlbiB0aGVzZSB0d28gZXZlbnRzIGluIHRoZSBwbGF5ZXIsIGFuZCB0aGUgQWRCcmVha1N0YXJ0ZWQgZXZlbnQgZG9lcyBub3QgY2FycnkgYW55IG1ldGFkYXRhIHRvXG4gICAgICAgICAgLy8gaW5pdGlhbGl6ZSB0aGUgYWRzIFVJLCBzbyBpdCB3b3VsZCBiZSByZW5kZXJlZCBpbiBhbiB1bmluaXRpYWxpemVkIHN0YXRlIGZvciBhIGNlcnRhaW4gYW1vdW50IG9mIHRpbWUuXG4gICAgICAgICAgLy8gVE9ETyBzaG93IGFkcyBVSSB1cG9uIEFkQnJlYWtTdGFydGVkIGFuZCBkaXNwbGF5IGxvYWRpbmcgb3ZlcmxheSBiZXR3ZWVuIEFkQnJlYWtTdGFydGVkIGFuZCBmaXJzdCBBZFN0YXJ0ZWRcbiAgICAgICAgICAvLyBUT0RPIGRpc3BsYXkgbG9hZGluZyBvdmVybGF5IGJldHdlZW4gQWRGaW5pc2hlZCBhbmQgbmV4dCBBZFN0YXJ0ZWRcbiAgICAgICAgICBjYXNlIHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkU3RhcnRlZDpcbiAgICAgICAgICAgIGFkU3RhcnRlZEV2ZW50ID0gZXZlbnQgYXMgQWRFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIC8vIFRoZSBhZHMgVUkgaXMgaGlkZGVuIG9ubHkgd2hlbiB0aGUgYWQgYnJlYWsgaXMgZmluaXNoZWQsIGkuZS4gbm90IG9uIEFkRmluaXNoZWQgZXZlbnRzLiBUaGlzIHdheSB3ZSBrZWVwXG4gICAgICAgICAgLy8gdGhlIGFkcyBVSSB2YXJpYW50IGFjdGl2ZSB0aHJvdWdob3V0IGFuIGFkIGJyZWFrLCBhcyByZWFjdGluZyB0byBBZEZpbmlzaGVkIHdvdWxkIGxlYWQgdG8gdW5kZXNpcmVkIFVJXG4gICAgICAgICAgLy8gdmFyaWFudCBzd2l0Y2hpbmcgYmV0d2VlbiB0d28gYWRzIGluIGFuIGFkIGJyZWFrLCBlLmcuIGFkcyBVSSAtPiBBZEZpbmlzaGVkIC0+IGNvbnRlbnQgVUkgLT5cbiAgICAgICAgICAvLyBBZFN0YXJ0ZWQgLT4gYWRzIFVJLlxuICAgICAgICAgIGNhc2UgcGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQWRCcmVha0ZpbmlzaGVkOlxuICAgICAgICAgICAgYWRTdGFydGVkRXZlbnQgPSBudWxsO1xuICAgICAgICAgICAgLy8gV2hlbiBzd2l0Y2hpbmcgdG8gYSB2YXJpYW50IGZvciB0aGUgZmlyc3QgdGltZSwgYSBjb25maWcuZXZlbnRzLm9uVXBkYXRlZCBldmVudCBpcyBmaXJlZCB0byB0cmlnZ2VyIGEgVUlcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBvZiB0aGUgbmV3IHZhcmlhbnQsIGJlY2F1c2UgbW9zdCBjb21wb25lbnRzIHN1YnNjcmliZSB0byB0aGlzIGV2ZW50IHRvIHVwZGF0ZSB0aGVtc2VsdmVzLiBXaGVuXG4gICAgICAgICAgICAvLyBzd2l0Y2hpbmcgdG8gdGhlIGFkcyBVSSBvbiB0aGUgZmlyc3QgQWRTdGFydGVkLCBhbGwgVUkgdmFyaWFudHMgdXBkYXRlIHRoZW1zZWx2ZXMgd2l0aCB0aGUgYWQgZGF0YSwgc29cbiAgICAgICAgICAgIC8vIHdoZW4gc3dpdGNoaW5nIGJhY2sgdG8gdGhlIFwibm9ybWFsXCIgVUkgaXQgd2lsbCBjYXJyeSBwcm9wZXJ0aWVzIG9mIHRoZSBhZCBpbnN0ZWFkIG9mIHRoZSBtYWluIGNvbnRlbnQuXG4gICAgICAgICAgICAvLyBXZSB0aHVzIGZpcmUgdGhpcyBldmVudCBoZXJlIHRvIGZvcmNlIGFuIFVJIHVwZGF0ZSB3aXRoIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBtYWluIGNvbnRlbnQuIFRoaXMgaXNcbiAgICAgICAgICAgIC8vIGJhc2ljYWxseSBhIGhhY2sgYmVjYXVzZSB0aGUgY29uZmlnLmV2ZW50cy5vblVwZGF0ZWQgZXZlbnQgaXMgYWJ1c2VkIGluIG1hbnkgcGxhY2VzIGFuZCBub3QganVzdCB1c2VkXG4gICAgICAgICAgICAvLyBmb3IgY29uZmlnIHVwZGF0ZXMgKGUuZy4gYWRkaW5nIGEgbWFya2VyIHRvIHRoZSBzZWVrYmFyKS5cbiAgICAgICAgICAgIC8vIFRPRE8gaW50cm9kdWNlIGFuIGV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgcGxheWJhY2sgY29udGVudCBpcyB1cGRhdGVkLCBhIHN3aXRjaCB0by9mcm9tIGFkc1xuICAgICAgICAgICAgdGhpcy5jb25maWcuZXZlbnRzLm9uVXBkYXRlZC5kaXNwYXRjaCh0aGlzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIC8vIFdoZW4gYSBuZXcgc291cmNlIGlzIGxvYWRlZCBkdXJpbmcgYWQgcGxheWJhY2ssIHRoZXJlIHdpbGwgYmUgbm8gQWQoQnJlYWspRmluaXNoZWQgZXZlbnRcbiAgICAgICAgICBjYXNlIHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZUxvYWRlZDpcbiAgICAgICAgICBjYXNlIHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZVVubG9hZGVkOlxuICAgICAgICAgICAgYWRTdGFydGVkRXZlbnQgPSBudWxsO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRGV0ZWN0IGlmIGFuIGFkIGhhcyBzdGFydGVkXG4gICAgICBsZXQgaXNBZCA9IGFkU3RhcnRlZEV2ZW50ICE9IG51bGw7XG4gICAgICBsZXQgYWRSZXF1aXJlc1VpID0gZmFsc2U7XG4gICAgICBpZiAoaXNBZCkge1xuICAgICAgICBsZXQgYWQgPSBhZFN0YXJ0ZWRFdmVudC5hZDtcbiAgICAgICAgLy8gZm9yIG5vdyBvbmx5IGxpbmVhciBhZHMgY2FuIHJlcXVlc3QgYSBVSVxuICAgICAgICBpZiAoYWQuaXNMaW5lYXIpIHtcbiAgICAgICAgICBsZXQgbGluZWFyQWQgPSBhZCBhcyBMaW5lYXJBZDtcbiAgICAgICAgICBhZFJlcXVpcmVzVWkgPSBsaW5lYXJBZC51aUNvbmZpZyAmJiBsaW5lYXJBZC51aUNvbmZpZy5yZXF1ZXN0c1VpIHx8IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhZFJlcXVpcmVzVWkpIHtcbiAgICAgICAgLy8gd2UgZGlzcGF0Y2ggb25VcGRhdGVkIGV2ZW50IGJlY2F1c2UgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGFkQnJlYWtzIGZvciBzYW1lIHBvc2l0aW9uXG4gICAgICAgIC8vIGBQbGF5YCBhbmQgYFBsYXlpbmdgIGV2ZW50cyB3aWxsIG5vdCBiZSBkaXNwYXRjaGVkIHdoaWNoIHdpbGwgY2F1c2UgYFBsYXliYWNrQnV0dG9uYCBzdGF0ZVxuICAgICAgICAvLyB0byBiZSBvdXQgb2Ygc3luY1xuICAgICAgICB0aGlzLmNvbmZpZy5ldmVudHMub25VcGRhdGVkLmRpc3BhdGNoKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlc29sdmVVaVZhcmlhbnQoe1xuICAgICAgICBpc0FkOiBpc0FkLFxuICAgICAgICBhZFJlcXVpcmVzVWk6IGFkUmVxdWlyZXNVaSxcbiAgICAgIH0sIChjb250ZXh0KSA9PiB7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgYW4gYWQgVUksIHdlIG5lZWQgdG8gcmVsYXkgdGhlIHNhdmVkIE9OX0FEX1NUQVJURUQgZXZlbnQgZGF0YSBzbyBhZCBjb21wb25lbnRzIGNhbiBjb25maWd1cmVcbiAgICAgICAgLy8gdGhlbXNlbHZlcyBmb3IgdGhlIGN1cnJlbnQgYWQuXG4gICAgICAgIGlmIChjb250ZXh0LmlzQWQpIHtcbiAgICAgICAgICAvKiBSZWxheSB0aGUgT05fQURfU1RBUlRFRCBldmVudCB0byB0aGUgYWRzIFVJXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBCZWNhdXNlIHRoZSBhZHMgVUkgaXMgaW5pdGlhbGl6ZWQgaW4gdGhlIE9OX0FEX1NUQVJURUQgaGFuZGxlciwgaS5lLiB3aGVuIHRoZSBPTl9BRF9TVEFSVEVEIGV2ZW50IGhhc1xuICAgICAgICAgICAqIGFscmVhZHkgYmVlbiBmaXJlZCwgY29tcG9uZW50cyBpbiB0aGUgYWRzIFVJIHRoYXQgbGlzdGVuIGZvciB0aGUgT05fQURfU1RBUlRFRCBldmVudCBuZXZlciByZWNlaXZlIGl0LlxuICAgICAgICAgICAqIFNpbmNlIHRoaXMgY2FuIGJyZWFrIGZ1bmN0aW9uYWxpdHkgb2YgY29tcG9uZW50cyB0aGF0IHJlbHkgb24gdGhpcyBldmVudCwgd2UgcmVsYXkgdGhlIGV2ZW50IHRvIHRoZVxuICAgICAgICAgICAqIGFkcyBVSSBjb21wb25lbnRzIHdpdGggdGhlIGZvbGxvd2luZyBjYWxsLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHRoaXMuY3VycmVudFVpLmdldFdyYXBwZWRQbGF5ZXIoKS5maXJlRXZlbnRJblVJKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQWRTdGFydGVkLCBhZFN0YXJ0ZWRFdmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBMaXN0ZW4gdG8gdGhlIGZvbGxvd2luZyBldmVudHMgdG8gdHJpZ2dlciBVSSB2YXJpYW50IHJlc29sdXRpb25cbiAgICBpZiAodGhpcy5jb25maWcuYXV0b1VpVmFyaWFudFJlc29sdmUpIHtcbiAgICAgIHRoaXMubWFuYWdlclBsYXllcldyYXBwZXIuZ2V0UGxheWVyKCkub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VMb2FkZWQsIHJlc29sdmVVaVZhcmlhbnQpO1xuICAgICAgdGhpcy5tYW5hZ2VyUGxheWVyV3JhcHBlci5nZXRQbGF5ZXIoKS5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZVVubG9hZGVkLCByZXNvbHZlVWlWYXJpYW50KTtcbiAgICAgIHRoaXMubWFuYWdlclBsYXllcldyYXBwZXIuZ2V0UGxheWVyKCkub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5LCByZXNvbHZlVWlWYXJpYW50KTtcbiAgICAgIHRoaXMubWFuYWdlclBsYXllcldyYXBwZXIuZ2V0UGxheWVyKCkub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QYXVzZWQsIHJlc29sdmVVaVZhcmlhbnQpO1xuICAgICAgdGhpcy5tYW5hZ2VyUGxheWVyV3JhcHBlci5nZXRQbGF5ZXIoKS5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkU3RhcnRlZCwgcmVzb2x2ZVVpVmFyaWFudCk7XG4gICAgICB0aGlzLm1hbmFnZXJQbGF5ZXJXcmFwcGVyLmdldFBsYXllcigpLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQWRCcmVha0ZpbmlzaGVkLCByZXNvbHZlVWlWYXJpYW50KTtcbiAgICAgIHRoaXMubWFuYWdlclBsYXllcldyYXBwZXIuZ2V0UGxheWVyKCkub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5ZXJSZXNpemVkLCByZXNvbHZlVWlWYXJpYW50KTtcbiAgICAgIHRoaXMubWFuYWdlclBsYXllcldyYXBwZXIuZ2V0UGxheWVyKCkub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5WaWV3TW9kZUNoYW5nZWQsIHJlc29sdmVVaVZhcmlhbnQpO1xuICAgIH1cblxuICAgIHRoaXMuZm9jdXNWaXNpYmlsaXR5VHJhY2tlciA9IG5ldyBGb2N1c1Zpc2liaWxpdHlUcmFja2VyKCd7e1BSRUZJWH19Jyk7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBVSVxuICAgIHJlc29sdmVVaVZhcmlhbnQobnVsbCk7XG4gIH1cblxuICAvKipcbiAgICogRXhwb3NlcyBpMThuLmdldExvY2FsaXplcigpIGZ1bmN0aW9uXG4gICAqIEByZXR1cm5zIHtJMThuQXBpLmdldExvY2FsaXplcigpfVxuICAgKi9cbiAgc3RhdGljIGxvY2FsaXplPFYgZXh0ZW5kcyBDdXN0b21Wb2NhYnVsYXJ5PFJlY29yZDxzdHJpbmcsIHN0cmluZz4+PihrZXk6IGtleW9mIFYpIHtcbiAgICByZXR1cm4gaTE4bi5nZXRMb2NhbGl6ZXIoa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm92aWRlIGNvbmZpZ3VyYXRpb24gdG8gc3VwcG9ydCBDdXN0b20gVUkgbGFuZ3VhZ2VzXG4gICAqIGRlZmF1bHQgbGFuZ3VhZ2U6ICdlbidcbiAgICovXG4gIHN0YXRpYyBzZXRMb2NhbGl6YXRpb25Db25maWcobG9jYWxpemF0aW9uQ29uZmlnOiBMb2NhbGl6YXRpb25Db25maWcpIHtcbiAgICBpMThuLnNldENvbmZpZyhsb2NhbGl6YXRpb25Db25maWcpO1xuICB9XG5cbiAgZ2V0Q29uZmlnKCk6IFVJQ29uZmlnIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWc7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbGlzdCBvZiBVSSB2YXJpYW50cyBhcyBwYXNzZWQgaW50byB0aGUgY29uc3RydWN0b3Igb2Yge0BsaW5rIFVJTWFuYWdlcn0uXG4gICAqIEByZXR1cm5zIHtVSVZhcmlhbnRbXX0gdGhlIGxpc3Qgb2YgYXZhaWxhYmxlIFVJIHZhcmlhbnRzXG4gICAqL1xuICBnZXRVaVZhcmlhbnRzKCk6IFVJVmFyaWFudFtdIHtcbiAgICByZXR1cm4gdGhpcy51aVZhcmlhbnRzO1xuICB9XG5cbiAgLyoqXG4gICAqIFN3aXRjaGVzIHRvIGEgVUkgdmFyaWFudCBmcm9tIHRoZSBsaXN0IHJldHVybmVkIGJ5IHtAbGluayBnZXRVaVZhcmlhbnRzfS5cbiAgICogQHBhcmFtIHtVSVZhcmlhbnR9IHVpVmFyaWFudCB0aGUgVUkgdmFyaWFudCB0byBzd2l0Y2ggdG9cbiAgICogQHBhcmFtIHsoKSA9PiB2b2lkfSBvblNob3cgYSBjYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIGp1c3QgYmVmb3JlIHRoZSBuZXcgVUkgdmFyaWFudCBpcyBzaG93blxuICAgKi9cbiAgc3dpdGNoVG9VaVZhcmlhbnQodWlWYXJpYW50OiBVSVZhcmlhbnQsIG9uU2hvdz86ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICBsZXQgdWlWYXJpYW50SW5kZXggPSB0aGlzLnVpVmFyaWFudHMuaW5kZXhPZih1aVZhcmlhbnQpO1xuXG4gICAgY29uc3QgcHJldmlvdXNVaSA9IHRoaXMuY3VycmVudFVpO1xuICAgIGNvbnN0IG5leHRVaTogSW50ZXJuYWxVSUluc3RhbmNlTWFuYWdlciA9IHRoaXMudWlJbnN0YW5jZU1hbmFnZXJzW3VpVmFyaWFudEluZGV4XTtcbiAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIFVJIHZhcmlhbnQgaXMgY2hhbmdpbmdcbiAgICAvLyBPbmx5IGlmIHRoZSBVSSB2YXJpYW50IGlzIGNoYW5naW5nLCB3ZSBuZWVkIHRvIGRvIHNvbWUgc3R1ZmYuIEVsc2Ugd2UganVzdCBsZWF2ZSBldmVyeXRoaW5nIGFzLWlzLlxuICAgIGlmIChuZXh0VWkgPT09IHRoaXMuY3VycmVudFVpKSB7XG4gICAgICByZXR1cm47XG4gICAgICAvLyBjb25zb2xlLmxvZygnc3dpdGNoZWQgZnJvbSAnLCB0aGlzLmN1cnJlbnRVaSA/IHRoaXMuY3VycmVudFVpLmdldFVJKCkgOiAnbm9uZScsXG4gICAgICAvLyAgICcgdG8gJywgbmV4dFVpID8gbmV4dFVpLmdldFVJKCkgOiAnbm9uZScpO1xuICAgIH1cblxuICAgIC8vIEhpZGUgdGhlIGN1cnJlbnRseSBhY3RpdmUgVUkgdmFyaWFudFxuICAgIGlmICh0aGlzLmN1cnJlbnRVaSkge1xuICAgICAgdGhpcy5jdXJyZW50VWkuZ2V0VUkoKS5oaWRlKCk7XG4gICAgfVxuXG4gICAgLy8gQXNzaWduIHRoZSBuZXcgVUkgdmFyaWFudCBhcyBjdXJyZW50IFVJXG4gICAgdGhpcy5jdXJyZW50VWkgPSBuZXh0VWk7XG5cbiAgICAvLyBXaGVuIHdlIHN3aXRjaCB0byBhIGRpZmZlcmVudCBVSSBpbnN0YW5jZSwgdGhlcmUncyBzb21lIGFkZGl0aW9uYWwgc3R1ZmYgdG8gbWFuYWdlLiBJZiB3ZSBkbyBub3Qgc3dpdGNoXG4gICAgLy8gdG8gYW4gaW5zdGFuY2UsIHdlJ3JlIGRvbmUgaGVyZS5cbiAgICBpZiAodGhpcy5jdXJyZW50VWkgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBBZGQgdGhlIFVJIHRvIHRoZSBET00gKGFuZCBjb25maWd1cmUgaXQpIHRoZSBmaXJzdCB0aW1lIGl0IGlzIHNlbGVjdGVkXG4gICAgaWYgKCF0aGlzLmN1cnJlbnRVaS5pc0NvbmZpZ3VyZWQoKSkge1xuICAgICAgdGhpcy5hZGRVaSh0aGlzLmN1cnJlbnRVaSk7XG4gICAgICAvLyBlbnN1cmUgdGhhdCB0aGUgaW50ZXJuYWwgc3RhdGUgaXMgcmVhZHkgZm9yIHRoZSB1cGNvbWluZyBzaG93IGNhbGxcbiAgICAgIGlmICghdGhpcy5jdXJyZW50VWkuZ2V0VUkoKS5pc0hpZGRlbigpKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFVpLmdldFVJKCkuaGlkZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob25TaG93KSB7XG4gICAgICBvblNob3coKTtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50VWkuZ2V0VUkoKS5zaG93KCk7XG4gICAgdGhpcy5ldmVudHMub25BY3RpdmVVaUNoYW5nZWQuZGlzcGF0Y2godGhpcywgeyBwcmV2aW91c1VpLCBjdXJyZW50VWk6IG5leHRVaSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VycyBhIFVJIHZhcmlhbnQgc3dpdGNoIGFzIHRyaWdnZXJlZCBieSBldmVudHMgd2hlbiBhdXRvbWF0aWMgc3dpdGNoaW5nIGlzIGVuYWJsZWQuIEl0IGFsbG93cyB0byBvdmVyd3JpdGVcbiAgICogcHJvcGVydGllcyBvZiB0aGUge0BsaW5rIFVJQ29uZGl0aW9uQ29udGV4dH0uXG4gICAqIEBwYXJhbSB7UGFydGlhbDxVSUNvbmRpdGlvbkNvbnRleHQ+fSBjb250ZXh0IGFuIG9wdGlvbmFsIHNldCBvZiBwcm9wZXJ0aWVzIHRoYXQgb3ZlcndyaXRlIHByb3BlcnRpZXMgb2YgdGhlXG4gICAqICAgYXV0b21hdGljYWxseSBkZXRlcm1pbmVkIGNvbnRleHRcbiAgICogQHBhcmFtIHsoY29udGV4dDogVUlDb25kaXRpb25Db250ZXh0KSA9PiB2b2lkfSBvblNob3cgYSBjYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIGp1c3QgYmVmb3JlIHRoZSBuZXcgVUkgdmFyaWFudFxuICAgKiAgIGlzIHNob3duIChpZiBhIHN3aXRjaCBpcyBoYXBwZW5pbmcpXG4gICAqL1xuICByZXNvbHZlVWlWYXJpYW50KGNvbnRleHQ6IFBhcnRpYWw8VUlDb25kaXRpb25Db250ZXh0PiA9IHt9LCBvblNob3c/OiAoY29udGV4dDogVUlDb25kaXRpb25Db250ZXh0KSA9PiB2b2lkKTogdm9pZCB7XG4gICAgLy8gRGV0ZXJtaW5lIHRoZSBjdXJyZW50IGNvbnRleHQgZm9yIHdoaWNoIHRoZSBVSSB2YXJpYW50IHdpbGwgYmUgcmVzb2x2ZWRcbiAgICBjb25zdCBkZWZhdWx0Q29udGV4dDogVUlDb25kaXRpb25Db250ZXh0ID0ge1xuICAgICAgaXNBZDogZmFsc2UsXG4gICAgICBhZFJlcXVpcmVzVWk6IGZhbHNlLFxuICAgICAgaXNGdWxsc2NyZWVuOiB0aGlzLnBsYXllci5nZXRWaWV3TW9kZSgpID09PSB0aGlzLnBsYXllci5leHBvcnRzLlZpZXdNb2RlLkZ1bGxzY3JlZW4sXG4gICAgICBpc01vYmlsZTogQnJvd3NlclV0aWxzLmlzTW9iaWxlLFxuICAgICAgaXNQbGF5aW5nOiB0aGlzLnBsYXllci5pc1BsYXlpbmcoKSxcbiAgICAgIHdpZHRoOiB0aGlzLnVpQ29udGFpbmVyRWxlbWVudC53aWR0aCgpLFxuICAgICAgZG9jdW1lbnRXaWR0aDogZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCxcbiAgICB9O1xuXG4gICAgLy8gT3ZlcndyaXRlIHByb3BlcnRpZXMgb2YgdGhlIGRlZmF1bHQgY29udGV4dCB3aXRoIHBhc3NlZCBpbiBjb250ZXh0IHByb3BlcnRpZXNcbiAgICBjb25zdCBzd2l0Y2hpbmdDb250ZXh0ID0geyAuLi5kZWZhdWx0Q29udGV4dCwgLi4uY29udGV4dCB9O1xuXG4gICAgLy8gRmlyZSB0aGUgZXZlbnQgYW5kIGFsbG93IG1vZGlmaWNhdGlvbiBvZiB0aGUgY29udGV4dCBiZWZvcmUgaXQgaXMgdXNlZCB0byByZXNvbHZlIHRoZSBVSSB2YXJpYW50XG4gICAgdGhpcy5ldmVudHMub25VaVZhcmlhbnRSZXNvbHZlLmRpc3BhdGNoKHRoaXMsIHN3aXRjaGluZ0NvbnRleHQpO1xuXG4gICAgbGV0IG5leHRVaVZhcmlhbnQ6IFVJVmFyaWFudCA9IG51bGw7XG5cbiAgICAvLyBTZWxlY3QgbmV3IFVJIHZhcmlhbnRcbiAgICAvLyBJZiBubyB2YXJpYW50IGNvbmRpdGlvbiBpcyBmdWxmaWxsZWQsIHdlIHN3aXRjaCB0byAqbm8qIFVJXG4gICAgZm9yIChsZXQgdWlWYXJpYW50IG9mIHRoaXMudWlWYXJpYW50cykge1xuICAgICAgY29uc3QgbWF0Y2hlc0NvbmRpdGlvbiA9IHVpVmFyaWFudC5jb25kaXRpb24gPT0gbnVsbCB8fCB1aVZhcmlhbnQuY29uZGl0aW9uKHN3aXRjaGluZ0NvbnRleHQpID09PSB0cnVlO1xuICAgICAgaWYgKG5leHRVaVZhcmlhbnQgPT0gbnVsbCAmJiBtYXRjaGVzQ29uZGl0aW9uKSB7XG4gICAgICAgIG5leHRVaVZhcmlhbnQgPSB1aVZhcmlhbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBoaWRlIGFsbCBVSXMgYmVzaWRlcyB0aGUgb25lIHdoaWNoIHNob3VsZCBiZSBhY3RpdmVcbiAgICAgICAgdWlWYXJpYW50LnVpLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnN3aXRjaFRvVWlWYXJpYW50KG5leHRVaVZhcmlhbnQsICgpID0+IHtcbiAgICAgIGlmIChvblNob3cpIHtcbiAgICAgICAgb25TaG93KHN3aXRjaGluZ0NvbnRleHQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRVaSh1aTogSW50ZXJuYWxVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIGxldCBkb20gPSB1aS5nZXRVSSgpLmdldERvbUVsZW1lbnQoKTtcbiAgICBsZXQgcGxheWVyID0gdWkuZ2V0V3JhcHBlZFBsYXllcigpO1xuXG4gICAgdWkuY29uZmlndXJlQ29udHJvbHMoKTtcbiAgICAvKiBBcHBlbmQgdGhlIFVJIERPTSBhZnRlciBjb25maWd1cmF0aW9uIHRvIGF2b2lkIENTUyB0cmFuc2l0aW9ucyBhdCBpbml0aWFsaXphdGlvblxuICAgICAqIEV4YW1wbGU6IENvbXBvbmVudHMgYXJlIGhpZGRlbiBkdXJpbmcgY29uZmlndXJhdGlvbiBhbmQgdGhlc2UgaGlkZXMgbWF5IHRyaWdnZXIgQ1NTIHRyYW5zaXRpb25zIHRoYXQgYXJlXG4gICAgICogdW5kZXNpcmFibGUgYXQgdGhpcyB0aW1lLiAqL1xuICAgIHRoaXMudWlDb250YWluZXJFbGVtZW50LmFwcGVuZChkb20pO1xuXG4gICAgLy8gV2hlbiB0aGUgVUkgaXMgbG9hZGVkIGFmdGVyIGEgc291cmNlIHdhcyBsb2FkZWQsIHdlIG5lZWQgdG8gdGVsbCB0aGUgY29tcG9uZW50cyB0byBpbml0aWFsaXplIHRoZW1zZWx2ZXNcbiAgICBpZiAocGxheWVyLmdldFNvdXJjZSgpKSB7XG4gICAgICB0aGlzLmNvbmZpZy5ldmVudHMub25VcGRhdGVkLmRpc3BhdGNoKHRoaXMpO1xuICAgIH1cblxuICAgIC8vIEZpcmUgb25Db25maWd1cmVkIGFmdGVyIFVJIERPTSBlbGVtZW50cyBhcmUgc3VjY2Vzc2Z1bGx5IGFkZGVkLiBXaGVuIGZpcmVkIGltbWVkaWF0ZWx5LCB0aGUgRE9NIGVsZW1lbnRzXG4gICAgLy8gbWlnaHQgbm90IGJlIGZ1bGx5IGNvbmZpZ3VyZWQgYW5kIGUuZy4gZG8gbm90IGhhdmUgYSBzaXplLlxuICAgIC8vIGh0dHBzOi8vc3dpemVjLmNvbS9ibG9nL2hvdy10by1wcm9wZXJseS13YWl0LWZvci1kb20tZWxlbWVudHMtdG8tc2hvdy11cC1pbi1tb2Rlcm4tYnJvd3NlcnMvc3dpemVjLzY2NjNcbiAgICBpZiAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHsgdWkub25Db25maWd1cmVkLmRpc3BhdGNoKHVpLmdldFVJKCkpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSUU5IGZhbGxiYWNrXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHsgdWkub25Db25maWd1cmVkLmRpc3BhdGNoKHVpLmdldFVJKCkpOyB9LCAwKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlbGVhc2VVaSh1aTogSW50ZXJuYWxVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHVpLnJlbGVhc2VDb250cm9scygpO1xuXG4gICAgY29uc3QgdWlDb250YWluZXIgPSB1aS5nZXRVSSgpO1xuICAgIGlmICh1aUNvbnRhaW5lci5oYXNEb21FbGVtZW50KCkpIHtcbiAgICAgIHVpQ29udGFpbmVyLmdldERvbUVsZW1lbnQoKS5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICB1aS5jbGVhckV2ZW50SGFuZGxlcnMoKTtcbiAgfVxuXG4gIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgZm9yIChsZXQgdWlJbnN0YW5jZU1hbmFnZXIgb2YgdGhpcy51aUluc3RhbmNlTWFuYWdlcnMpIHtcbiAgICAgIHRoaXMucmVsZWFzZVVpKHVpSW5zdGFuY2VNYW5hZ2VyKTtcbiAgICB9XG4gICAgdGhpcy5tYW5hZ2VyUGxheWVyV3JhcHBlci5jbGVhckV2ZW50SGFuZGxlcnMoKTtcbiAgICB0aGlzLmZvY3VzVmlzaWJpbGl0eVRyYWNrZXIucmVsZWFzZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIGp1c3QgYmVmb3JlIFVJIHZhcmlhbnRzIGFyZSBhYm91dCB0byBiZSByZXNvbHZlZCBhbmQgdGhlIFVJIHZhcmlhbnQgaXMgcG9zc2libHkgc3dpdGNoZWQuIEl0IGlzIGZpcmVkIHdoZW5cbiAgICogdGhlIHN3aXRjaCBpcyB0cmlnZ2VyZWQgZnJvbSBhbiBhdXRvbWF0aWMgc3dpdGNoIGFuZCB3aGVuIGNhbGxpbmcge0BsaW5rIHJlc29sdmVVaVZhcmlhbnR9LlxuICAgKiBDYW4gYmUgdXNlZCB0byBtb2RpZnkgdGhlIHtAbGluayBVSUNvbmRpdGlvbkNvbnRleHR9IGJlZm9yZSByZXNvbHZpbmcgaXMgZG9uZS5cbiAgICogQHJldHVybnMge0V2ZW50RGlzcGF0Y2hlcjxVSU1hbmFnZXIsIFVJQ29uZGl0aW9uQ29udGV4dD59XG4gICAqL1xuICBnZXQgb25VaVZhcmlhbnRSZXNvbHZlKCk6IEV2ZW50RGlzcGF0Y2hlcjxVSU1hbmFnZXIsIFVJQ29uZGl0aW9uQ29udGV4dD4ge1xuICAgIHJldHVybiB0aGlzLmV2ZW50cy5vblVpVmFyaWFudFJlc29sdmU7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgYWZ0ZXIgdGhlIFVJTWFuYWdlciBoYXMgc3dpdGNoZWQgdG8gYSBkaWZmZXJlbnQgVUkgdmFyaWFudC5cbiAgICogQHJldHVybnMge0V2ZW50RGlzcGF0Y2hlcjxVSU1hbmFnZXIsIEFjdGl2ZVVpQ2hhbmdlZEFyZ3M+fVxuICAgKi9cbiAgZ2V0IG9uQWN0aXZlVWlDaGFuZ2VkKCk6IEV2ZW50RGlzcGF0Y2hlcjxVSU1hbmFnZXIsIEFjdGl2ZVVpQ2hhbmdlZEFyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5ldmVudHMub25BY3RpdmVVaUNoYW5nZWQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgYWN0aXZlIHtAbGluayBVSUluc3RhbmNlTWFuYWdlcn0uXG4gICAqL1xuICBnZXQgYWN0aXZlVWkoKTogVUlJbnN0YW5jZU1hbmFnZXIge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRVaTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBsaXN0IG9mIGFsbCBhZGRlZCBtYXJrZXJzIGluIHVuZGVmaW5lZCBvcmRlci5cbiAgICovXG4gIGdldFRpbWVsaW5lTWFya2VycygpOiBUaW1lbGluZU1hcmtlcltdIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcubWV0YWRhdGEubWFya2VycztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgbWFya2VyIHRvIHRoZSB0aW1lbGluZS4gRG9lcyBub3QgY2hlY2sgZm9yIGR1cGxpY2F0ZXMvb3ZlcmxhcHMgYXQgdGhlIGB0aW1lYC5cbiAgICovXG4gIGFkZFRpbWVsaW5lTWFya2VyKHRpbWVsaW5lTWFya2VyOiBUaW1lbGluZU1hcmtlcik6IHZvaWQge1xuICAgIHRoaXMuY29uZmlnLm1ldGFkYXRhLm1hcmtlcnMucHVzaCh0aW1lbGluZU1hcmtlcik7XG4gICAgdGhpcy5jb25maWcuZXZlbnRzLm9uVXBkYXRlZC5kaXNwYXRjaCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgbWFya2VyIGZyb20gdGhlIHRpbWVsaW5lIChieSByZWZlcmVuY2UpIGFuZCByZXR1cm5zIGB0cnVlYCBpZiB0aGUgbWFya2VyIGhhc1xuICAgKiBiZWVuIHBhcnQgb2YgdGhlIHRpbWVsaW5lIGFuZCBzdWNjZXNzZnVsbHkgcmVtb3ZlZCwgb3IgYGZhbHNlYCBpZiB0aGUgbWFya2VyIGNvdWxkIG5vdFxuICAgKiBiZSBmb3VuZCBhbmQgdGh1cyBub3QgcmVtb3ZlZC5cbiAgICovXG4gIHJlbW92ZVRpbWVsaW5lTWFya2VyKHRpbWVsaW5lTWFya2VyOiBUaW1lbGluZU1hcmtlcik6IGJvb2xlYW4ge1xuICAgIGlmIChBcnJheVV0aWxzLnJlbW92ZSh0aGlzLmNvbmZpZy5tZXRhZGF0YS5tYXJrZXJzLCB0aW1lbGluZU1hcmtlcikgPT09IHRpbWVsaW5lTWFya2VyKSB7XG4gICAgICB0aGlzLmNvbmZpZy5ldmVudHMub25VcGRhdGVkLmRpc3BhdGNoKHRoaXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2Vla1ByZXZpZXdBcmdzIGV4dGVuZHMgTm9BcmdzIHtcbiAgLyoqXG4gICAqIFRoZSB0aW1lbGluZSBwb3NpdGlvbiBpbiBwZXJjZW50IHdoZXJlIHRoZSBldmVudCBvcmlnaW5hdGVzIGZyb20uXG4gICAqL1xuICBwb3NpdGlvbjogbnVtYmVyO1xuICAvKipcbiAgICogVGhlIHRpbWVsaW5lIG1hcmtlciBhc3NvY2lhdGVkIHdpdGggdGhlIGN1cnJlbnQgcG9zaXRpb24sIGlmIGV4aXN0aW5nLlxuICAgKi9cbiAgbWFya2VyPzogU2Vla0Jhck1hcmtlcjtcbn1cblxuLyoqXG4gKiBFbmNhcHN1bGF0ZXMgZnVuY3Rpb25hbGl0eSB0byBtYW5hZ2UgYSBVSSBpbnN0YW5jZS4gVXNlZCBieSB0aGUge0BsaW5rIFVJTWFuYWdlcn0gdG8gbWFuYWdlIG11bHRpcGxlIFVJIGluc3RhbmNlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFVJSW5zdGFuY2VNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBwbGF5ZXJXcmFwcGVyOiBQbGF5ZXJXcmFwcGVyO1xuICBwcml2YXRlIHVpOiBVSUNvbnRhaW5lcjtcbiAgcHJpdmF0ZSBjb25maWc6IEludGVybmFsVUlDb25maWc7XG4gIHByb3RlY3RlZCBzcGF0aWFsTmF2aWdhdGlvbj86IFNwYXRpYWxOYXZpZ2F0aW9uO1xuXG4gIHByaXZhdGUgZXZlbnRzID0ge1xuICAgIG9uQ29uZmlndXJlZDogbmV3IEV2ZW50RGlzcGF0Y2hlcjxVSUNvbnRhaW5lciwgTm9BcmdzPigpLFxuICAgIG9uU2VlazogbmV3IEV2ZW50RGlzcGF0Y2hlcjxTZWVrQmFyLCBOb0FyZ3M+KCksXG4gICAgb25TZWVrUHJldmlldzogbmV3IEV2ZW50RGlzcGF0Y2hlcjxTZWVrQmFyLCBTZWVrUHJldmlld0FyZ3M+KCksXG4gICAgb25TZWVrZWQ6IG5ldyBFdmVudERpc3BhdGNoZXI8U2Vla0JhciwgTm9BcmdzPigpLFxuICAgIG9uQ29tcG9uZW50U2hvdzogbmV3IEV2ZW50RGlzcGF0Y2hlcjxDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPiwgTm9BcmdzPigpLFxuICAgIG9uQ29tcG9uZW50SGlkZTogbmV3IEV2ZW50RGlzcGF0Y2hlcjxDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPiwgTm9BcmdzPigpLFxuICAgIG9uQ29udHJvbHNTaG93OiBuZXcgRXZlbnREaXNwYXRjaGVyPFVJQ29udGFpbmVyLCBOb0FyZ3M+KCksXG4gICAgb25QcmV2aWV3Q29udHJvbHNIaWRlOiBuZXcgRXZlbnREaXNwYXRjaGVyPFVJQ29udGFpbmVyLCBDYW5jZWxFdmVudEFyZ3M+KCksXG4gICAgb25Db250cm9sc0hpZGU6IG5ldyBFdmVudERpc3BhdGNoZXI8VUlDb250YWluZXIsIE5vQXJncz4oKSxcbiAgICBvblJlbGVhc2U6IG5ldyBFdmVudERpc3BhdGNoZXI8VUlDb250YWluZXIsIE5vQXJncz4oKSxcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXI6IFBsYXllckFQSSwgdWk6IFVJQ29udGFpbmVyLCBjb25maWc6IEludGVybmFsVUlDb25maWcsIHNwYXRpYWxOYXZpZ2F0aW9uPzogU3BhdGlhbE5hdmlnYXRpb24pIHtcbiAgICB0aGlzLnBsYXllcldyYXBwZXIgPSBuZXcgUGxheWVyV3JhcHBlcihwbGF5ZXIpO1xuICAgIHRoaXMudWkgPSB1aTtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICB0aGlzLnNwYXRpYWxOYXZpZ2F0aW9uID0gc3BhdGlhbE5hdmlnYXRpb247XG4gIH1cblxuICBnZXRDb25maWcoKTogSW50ZXJuYWxVSUNvbmZpZyB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnO1xuICB9XG5cbiAgZ2V0VUkoKTogVUlDb250YWluZXIge1xuICAgIHJldHVybiB0aGlzLnVpO1xuICB9XG5cbiAgZ2V0UGxheWVyKCk6IFBsYXllckFQSSB7XG4gICAgcmV0dXJuIHRoaXMucGxheWVyV3JhcHBlci5nZXRQbGF5ZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB3aGVuIHRoZSBVSSBpcyBmdWxseSBjb25maWd1cmVkIGFuZCBhZGRlZCB0byB0aGUgRE9NLlxuICAgKiBAcmV0dXJucyB7RXZlbnREaXNwYXRjaGVyfVxuICAgKi9cbiAgZ2V0IG9uQ29uZmlndXJlZCgpOiBFdmVudERpc3BhdGNoZXI8VUlDb250YWluZXIsIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLmV2ZW50cy5vbkNvbmZpZ3VyZWQ7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiBhIHNlZWsgc3RhcnRzLlxuICAgKiBAcmV0dXJucyB7RXZlbnREaXNwYXRjaGVyfVxuICAgKi9cbiAgZ2V0IG9uU2VlaygpOiBFdmVudERpc3BhdGNoZXI8U2Vla0JhciwgTm9BcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRzLm9uU2VlaztcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB3aGVuIHRoZSBzZWVrIHRpbWVsaW5lIGlzIHNjcnViYmVkLlxuICAgKiBAcmV0dXJucyB7RXZlbnREaXNwYXRjaGVyfVxuICAgKi9cbiAgZ2V0IG9uU2Vla1ByZXZpZXcoKTogRXZlbnREaXNwYXRjaGVyPFNlZWtCYXIsIFNlZWtQcmV2aWV3QXJncz4ge1xuICAgIHJldHVybiB0aGlzLmV2ZW50cy5vblNlZWtQcmV2aWV3O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHdoZW4gYSBzZWVrIGlzIGZpbmlzaGVkLlxuICAgKiBAcmV0dXJucyB7RXZlbnREaXNwYXRjaGVyfVxuICAgKi9cbiAgZ2V0IG9uU2Vla2VkKCk6IEV2ZW50RGlzcGF0Y2hlcjxTZWVrQmFyLCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5ldmVudHMub25TZWVrZWQ7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiBhIGNvbXBvbmVudCBpcyBzaG93aW5nLlxuICAgKiBAcmV0dXJucyB7RXZlbnREaXNwYXRjaGVyfVxuICAgKi9cbiAgZ2V0IG9uQ29tcG9uZW50U2hvdygpOiBFdmVudERpc3BhdGNoZXI8Q29tcG9uZW50PENvbXBvbmVudENvbmZpZz4sIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLmV2ZW50cy5vbkNvbXBvbmVudFNob3c7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiBhIGNvbXBvbmVudCBpcyBoaWRpbmcuXG4gICAqIEByZXR1cm5zIHtFdmVudERpc3BhdGNoZXJ9XG4gICAqL1xuICBnZXQgb25Db21wb25lbnRIaWRlKCk6IEV2ZW50RGlzcGF0Y2hlcjxDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPiwgTm9BcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRzLm9uQ29tcG9uZW50SGlkZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB3aGVuIHRoZSBVSSBjb250cm9scyBhcmUgc2hvd2luZy5cbiAgICogQHJldHVybnMge0V2ZW50RGlzcGF0Y2hlcn1cbiAgICovXG4gIGdldCBvbkNvbnRyb2xzU2hvdygpOiBFdmVudERpc3BhdGNoZXI8VUlDb250YWluZXIsIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLmV2ZW50cy5vbkNvbnRyb2xzU2hvdztcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyBiZWZvcmUgdGhlIFVJIGNvbnRyb2xzIGFyZSBoaWRpbmcgdG8gY2hlY2sgaWYgdGhleSBhcmUgYWxsb3dlZCB0byBoaWRlLlxuICAgKiBAcmV0dXJucyB7RXZlbnREaXNwYXRjaGVyfVxuICAgKi9cbiAgZ2V0IG9uUHJldmlld0NvbnRyb2xzSGlkZSgpOiBFdmVudERpc3BhdGNoZXI8VUlDb250YWluZXIsIENhbmNlbEV2ZW50QXJncz4ge1xuICAgIHJldHVybiB0aGlzLmV2ZW50cy5vblByZXZpZXdDb250cm9sc0hpZGU7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiB0aGUgVUkgY29udHJvbHMgYXJlIGhpZGluZy5cbiAgICogQHJldHVybnMge0V2ZW50RGlzcGF0Y2hlcn1cbiAgICovXG4gIGdldCBvbkNvbnRyb2xzSGlkZSgpOiBFdmVudERpc3BhdGNoZXI8VUlDb250YWluZXIsIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLmV2ZW50cy5vbkNvbnRyb2xzSGlkZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB3aGVuIHRoZSBVSSBjb250cm9scyBhcmUgcmVsZWFzZWQuXG4gICAqIEByZXR1cm5zIHtFdmVudERpc3BhdGNoZXJ9XG4gICAqL1xuICBnZXQgb25SZWxlYXNlKCk6IEV2ZW50RGlzcGF0Y2hlcjxVSUNvbnRhaW5lciwgTm9BcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRzLm9uUmVsZWFzZTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjbGVhckV2ZW50SGFuZGxlcnMoKTogdm9pZCB7XG4gICAgdGhpcy5wbGF5ZXJXcmFwcGVyLmNsZWFyRXZlbnRIYW5kbGVycygpO1xuXG4gICAgbGV0IGV2ZW50cyA9IDxhbnk+dGhpcy5ldmVudHM7IC8vIGF2b2lkIFRTNzAxN1xuICAgIGZvciAobGV0IGV2ZW50IGluIGV2ZW50cykge1xuICAgICAgbGV0IGRpc3BhdGNoZXIgPSA8RXZlbnREaXNwYXRjaGVyPE9iamVjdCwgT2JqZWN0Pj5ldmVudHNbZXZlbnRdO1xuICAgICAgZGlzcGF0Y2hlci51bnN1YnNjcmliZUFsbCgpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEV4dGVuZHMgdGhlIHtAbGluayBVSUluc3RhbmNlTWFuYWdlcn0gZm9yIGludGVybmFsIHVzZSBpbiB0aGUge0BsaW5rIFVJTWFuYWdlcn0gYW5kIHByb3ZpZGVzIGFjY2VzcyB0byBmdW5jdGlvbmFsaXR5XG4gKiB0aGF0IGNvbXBvbmVudHMgcmVjZWl2aW5nIGEgcmVmZXJlbmNlIHRvIHRoZSB7QGxpbmsgVUlJbnN0YW5jZU1hbmFnZXJ9IHNob3VsZCBub3QgaGF2ZSBhY2Nlc3MgdG8uXG4gKi9cbmNsYXNzIEludGVybmFsVUlJbnN0YW5jZU1hbmFnZXIgZXh0ZW5kcyBVSUluc3RhbmNlTWFuYWdlciB7XG5cbiAgcHJpdmF0ZSBjb25maWd1cmVkOiBib29sZWFuO1xuICBwcml2YXRlIHJlbGVhc2VkOiBib29sZWFuO1xuXG4gIGdldFdyYXBwZWRQbGF5ZXIoKTogV3JhcHBlZFBsYXllciB7XG4gICAgLy8gVE9ETyBmaW5kIGEgbm9uLWhhY2t5IHdheSB0byBwcm92aWRlIHRoZSBXcmFwcGVkUGxheWVyIHRvIHRoZSBVSU1hbmFnZXIgd2l0aG91dCBleHBvcnRpbmcgaXRcbiAgICAvLyBnZXRQbGF5ZXIoKSBhY3R1YWxseSByZXR1cm5zIHRoZSBXcmFwcGVkUGxheWVyIGJ1dCBpdHMgcmV0dXJuIHR5cGUgaXMgc2V0IHRvIFBsYXllciBzbyB0aGUgV3JhcHBlZFBsYXllciBkb2VzXG4gICAgLy8gbm90IG5lZWQgdG8gYmUgZXhwb3J0ZWRcbiAgICByZXR1cm4gPFdyYXBwZWRQbGF5ZXI+dGhpcy5nZXRQbGF5ZXIoKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZUNvbnRyb2xzKCk6IHZvaWQge1xuICAgIHRoaXMuY29uZmlndXJlQ29udHJvbHNUcmVlKHRoaXMuZ2V0VUkoKSk7XG4gICAgdGhpcy5jb25maWd1cmVkID0gdHJ1ZTtcbiAgfVxuXG4gIGlzQ29uZmlndXJlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmVkO1xuICB9XG5cbiAgcHJpdmF0ZSBjb25maWd1cmVDb250cm9sc1RyZWUoY29tcG9uZW50OiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPikge1xuICAgIGxldCBjb25maWd1cmVkQ29tcG9uZW50czogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz5bXSA9IFtdO1xuXG4gICAgVUlVdGlscy50cmF2ZXJzZVRyZWUoY29tcG9uZW50LCAoY29tcG9uZW50KSA9PiB7XG4gICAgICAvLyBGaXJzdCwgY2hlY2sgaWYgd2UgaGF2ZSBhbHJlYWR5IGNvbmZpZ3VyZWQgYSBjb21wb25lbnQsIGFuZCB0aHJvdyBhbiBlcnJvciBpZiB3ZSBkaWQuIE11bHRpcGxlIGNvbmZpZ3VyYXRpb25cbiAgICAgIC8vIG9mIHRoZSBzYW1lIGNvbXBvbmVudCBsZWFkcyB0byB1bmV4cGVjdGVkIFVJIGJlaGF2aW9yLiBBbHNvLCBhIGNvbXBvbmVudCB0aGF0IGlzIGluIHRoZSBVSSB0cmVlIG11bHRpcGxlXG4gICAgICAvLyB0aW1lcyBoaW50cyBhdCBhIHdyb25nIFVJIHN0cnVjdHVyZS5cbiAgICAgIC8vIFdlIGNvdWxkIGp1c3Qgc2tpcCBjb25maWd1cmF0aW9uIGluIHN1Y2ggYSBjYXNlIGFuZCBub3QgdGhyb3cgYW4gZXhjZXB0aW9uLCBidXQgZW5mb3JjaW5nIGEgY2xlYW4gVUkgdHJlZVxuICAgICAgLy8gc2VlbXMgbGlrZSB0aGUgYmV0dGVyIGNob2ljZS5cbiAgICAgIGZvciAobGV0IGNvbmZpZ3VyZWRDb21wb25lbnQgb2YgY29uZmlndXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgaWYgKGNvbmZpZ3VyZWRDb21wb25lbnQgPT09IGNvbXBvbmVudCkge1xuICAgICAgICAgIC8vIFdyaXRlIHRoZSBjb21wb25lbnQgdG8gdGhlIGNvbnNvbGUgdG8gc2ltcGxpZnkgaWRlbnRpZmljYXRpb24gb2YgdGhlIGN1bHByaXRcbiAgICAgICAgICAvLyAoZS5nLiBieSBpbnNwZWN0aW5nIHRoZSBjb25maWcpXG4gICAgICAgICAgaWYgKGNvbnNvbGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBpbiBVSSB0cmVlJywgY29tcG9uZW50KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBBZGRpdGlvbmFsbHkgdGhyb3cgYW4gZXJyb3IsIGJlY2F1c2UgdGhpcyBjYXNlIG11c3Qgbm90IGhhcHBlbiBhbmQgbGVhZHMgdG8gdW5leHBlY3RlZCBVSSBiZWhhdmlvci5cbiAgICAgICAgICB0aHJvdyBFcnJvcignQ2lyY3VsYXIgcmVmZXJlbmNlIGluIFVJIHRyZWU6ICcgKyBjb21wb25lbnQuY29uc3RydWN0b3IubmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29tcG9uZW50LmluaXRpYWxpemUoKTtcbiAgICAgIGNvbXBvbmVudC5jb25maWd1cmUodGhpcy5nZXRQbGF5ZXIoKSwgdGhpcyk7XG4gICAgICBjb25maWd1cmVkQ29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgfSk7XG4gIH1cblxuICByZWxlYXNlQ29udHJvbHMoKTogdm9pZCB7XG4gICAgLy8gRG8gbm90IGNhbGwgcmVsZWFzZSBtZXRob2RzIGlmIHRoZSBjb21wb25lbnRzIGhhdmUgbmV2ZXIgYmVlbiBjb25maWd1cmVkOyB0aGlzIGNhbiByZXN1bHQgaW4gZXhjZXB0aW9uc1xuICAgIGlmICh0aGlzLmNvbmZpZ3VyZWQpIHtcbiAgICAgIHRoaXMub25SZWxlYXNlLmRpc3BhdGNoKHRoaXMuZ2V0VUkoKSk7XG4gICAgICB0aGlzLnJlbGVhc2VDb250cm9sc1RyZWUodGhpcy5nZXRVSSgpKTtcbiAgICAgIHRoaXMuY29uZmlndXJlZCA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLnNwYXRpYWxOYXZpZ2F0aW9uPy5yZWxlYXNlKCk7XG4gICAgdGhpcy5yZWxlYXNlZCA9IHRydWU7XG4gIH1cblxuICBpc1JlbGVhc2VkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnJlbGVhc2VkO1xuICB9XG5cbiAgcHJpdmF0ZSByZWxlYXNlQ29udHJvbHNUcmVlKGNvbXBvbmVudDogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4pIHtcbiAgICBjb21wb25lbnQucmVsZWFzZSgpO1xuXG4gICAgaWYgKGNvbXBvbmVudCBpbnN0YW5jZW9mIENvbnRhaW5lcikge1xuICAgICAgZm9yIChsZXQgY2hpbGRDb21wb25lbnQgb2YgY29tcG9uZW50LmdldENvbXBvbmVudHMoKSkge1xuICAgICAgICB0aGlzLnJlbGVhc2VDb250cm9sc1RyZWUoY2hpbGRDb21wb25lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNsZWFyRXZlbnRIYW5kbGVycygpOiB2b2lkIHtcbiAgICBzdXBlci5jbGVhckV2ZW50SGFuZGxlcnMoKTtcbiAgfVxufVxuXG4vKipcbiAqIEV4dGVuZGVkIGludGVyZmFjZSBvZiB0aGUge0BsaW5rIFBsYXllcn0gZm9yIHVzZSBpbiB0aGUgVUkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgV3JhcHBlZFBsYXllciBleHRlbmRzIFBsYXllckFQSSB7XG4gIC8qKlxuICAgKiBGaXJlcyBhbiBldmVudCBvbiB0aGUgcGxheWVyIHRoYXQgdGFyZ2V0cyBhbGwgaGFuZGxlcnMgaW4gdGhlIFVJIGJ1dCBuZXZlciBlbnRlcnMgdGhlIHJlYWwgcGxheWVyLlxuICAgKiBAcGFyYW0gZXZlbnQgdGhlIGV2ZW50IHRvIGZpcmVcbiAgICogQHBhcmFtIGRhdGEgZGF0YSB0byBzZW5kIHdpdGggdGhlIGV2ZW50XG4gICAqL1xuICBmaXJlRXZlbnRJblVJKGV2ZW50OiBQbGF5ZXJFdmVudCwgZGF0YToge30pOiB2b2lkO1xufVxuXG4vKipcbiAqIFdyYXBzIHRoZSBwbGF5ZXIgdG8gdHJhY2sgZXZlbnQgaGFuZGxlcnMgYW5kIHByb3ZpZGUgYSBzaW1wbGUgbWV0aG9kIHRvIHJlbW92ZSBhbGwgcmVnaXN0ZXJlZCBldmVudFxuICogaGFuZGxlcnMgZnJvbSB0aGUgcGxheWVyLlxuICovXG5leHBvcnQgY2xhc3MgUGxheWVyV3JhcHBlciB7XG5cbiAgcHJpdmF0ZSBwbGF5ZXI6IFBsYXllckFQSTtcbiAgcHJpdmF0ZSB3cmFwcGVyOiBXcmFwcGVkUGxheWVyO1xuXG4gIHByaXZhdGUgZXZlbnRIYW5kbGVyczogeyBbZXZlbnRUeXBlOiBzdHJpbmddOiBQbGF5ZXJFdmVudENhbGxiYWNrW107IH0gPSB7fTtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXI6IFBsYXllckFQSSkge1xuICAgIHRoaXMucGxheWVyID0gcGxheWVyO1xuXG4gICAgLy8gQ29sbGVjdCBhbGwgbWVtYmVycyBvZiB0aGUgcGxheWVyIChwdWJsaWMgQVBJIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgb2YgdGhlIHBsYXllcilcbiAgICBjb25zdCBvYmplY3RQcm90b1Byb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPYmplY3QuZ2V0UHJvdG90eXBlT2Yoe30pKTtcbiAgICBjb25zdCBuYW1lc1RvSWdub3JlID0gWydjb25zdHJ1Y3RvcicsIC4uLm9iamVjdFByb3RvUHJvcGVydHlOYW1lc107XG4gICAgY29uc3QgbWVtYmVycyA9IGdldEFsbFByb3BlcnR5TmFtZXMocGxheWVyKS5maWx0ZXIobmFtZSA9PiBuYW1lc1RvSWdub3JlLmluZGV4T2YobmFtZSkgPT09IC0xKTtcbiAgICAvLyBTcGxpdCB0aGUgbWVtYmVycyBpbnRvIG1ldGhvZHMgYW5kIHByb3BlcnRpZXNcbiAgICBsZXQgbWV0aG9kcyA9IDxhbnlbXT5bXTtcbiAgICBsZXQgcHJvcGVydGllcyA9IDxhbnlbXT5bXTtcblxuICAgIGZvciAobGV0IG1lbWJlciBvZiBtZW1iZXJzKSB7XG4gICAgICBpZiAodHlwZW9mICg8YW55PnBsYXllcilbbWVtYmVyXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBtZXRob2RzLnB1c2gobWVtYmVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb3BlcnRpZXMucHVzaChtZW1iZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENyZWF0ZSB3cmFwcGVyIG9iamVjdFxuICAgIGxldCB3cmFwcGVyID0gPGFueT57fTtcblxuICAgIC8vIEFkZCBmdW5jdGlvbiB3cmFwcGVycyBmb3IgYWxsIEFQSSBtZXRob2RzIHRoYXQgZG8gbm90aGluZyBidXQgY2FsbGluZyB0aGUgYmFzZSBtZXRob2Qgb24gdGhlIHBsYXllclxuICAgIGZvciAobGV0IG1ldGhvZCBvZiBtZXRob2RzKSB7XG4gICAgICB3cmFwcGVyW21ldGhvZF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2NhbGxlZCAnICsgbWVtYmVyKTsgLy8gdHJhY2sgbWV0aG9kIGNhbGxzIG9uIHRoZSBwbGF5ZXJcbiAgICAgICAgcmV0dXJuICg8YW55PnBsYXllcilbbWV0aG9kXS5hcHBseShwbGF5ZXIsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEFkZCBhbGwgcHVibGljIHByb3BlcnRpZXMgb2YgdGhlIHBsYXllciB0byB0aGUgd3JhcHBlclxuICAgIGZvciAobGV0IHByb3BlcnR5IG9mIHByb3BlcnRpZXMpIHtcbiAgICAgIC8vIEdldCBhbiBldmVudHVhbGx5IGV4aXN0aW5nIHByb3BlcnR5IGRlc2NyaXB0b3IgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIHBsYWluIHByb3BlcnRpZXMgYW5kIHByb3BlcnRpZXMgd2l0aFxuICAgICAgLy8gZ2V0dGVycy9zZXR0ZXJzLlxuICAgICAgY29uc3QgcHJvcGVydHlEZXNjcmlwdG9yID0gKCh0YXJnZXQ6IFBsYXllckFQSSkgPT4ge1xuICAgICAgICB3aGlsZSAodGFyZ2V0KSB7XG4gICAgICAgICAgY29uc3QgcHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5KTtcbiAgICAgICAgICBpZiAocHJvcGVydHlEZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvcGVydHlEZXNjcmlwdG9yO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgUHJvcGVydHlEZXNjcmlwdG9yIGV4aXN0cyBvbiBhIGNoaWxkIHByb3RvdHlwZSBpbiBjYXNlIHdlIGhhdmUgYW4gaW5oZXJpdGFuY2Ugb2YgdGhlIHBsYXllclxuICAgICAgICAgIHRhcmdldCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICB9KShwbGF5ZXIpO1xuXG4gICAgICAvLyBJZiB0aGUgcHJvcGVydHkgaGFzIGdldHRlcnMvc2V0dGVycywgd3JhcCB0aGVtIGFjY29yZGluZ2x5Li4uXG4gICAgICBpZiAocHJvcGVydHlEZXNjcmlwdG9yICYmIChwcm9wZXJ0eURlc2NyaXB0b3IuZ2V0IHx8IHByb3BlcnR5RGVzY3JpcHRvci5zZXQpKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3cmFwcGVyLCBwcm9wZXJ0eSwge1xuICAgICAgICAgIGdldDogKCkgPT4gcHJvcGVydHlEZXNjcmlwdG9yLmdldC5jYWxsKHBsYXllciksXG4gICAgICAgICAgc2V0OiAodmFsdWU6IGFueSkgPT4gcHJvcGVydHlEZXNjcmlwdG9yLnNldC5jYWxsKHBsYXllciwgdmFsdWUpLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8vIC4uLiBlbHNlIGp1c3QgdHJhbnNmZXIgdGhlIHByb3BlcnR5IHRvIHRoZSB3cmFwcGVyXG4gICAgICBlbHNlIHtcbiAgICAgICAgd3JhcHBlcltwcm9wZXJ0eV0gPSAoPGFueT5wbGF5ZXIpW3Byb3BlcnR5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFeHBsaWNpdGx5IGFkZCBhIHdyYXBwZXIgbWV0aG9kIGZvciAnb24nIHRoYXQgYWRkcyBhZGRlZCBldmVudCBoYW5kbGVycyB0byB0aGUgZXZlbnQgbGlzdFxuICAgIHdyYXBwZXIub24gPSAoZXZlbnRUeXBlOiBQbGF5ZXJFdmVudCwgY2FsbGJhY2s6IFBsYXllckV2ZW50Q2FsbGJhY2spID0+IHtcbiAgICAgIHBsYXllci5vbihldmVudFR5cGUsIGNhbGxiYWNrKTtcblxuICAgICAgaWYgKCF0aGlzLmV2ZW50SGFuZGxlcnNbZXZlbnRUeXBlXSkge1xuICAgICAgICB0aGlzLmV2ZW50SGFuZGxlcnNbZXZlbnRUeXBlXSA9IFtdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmV2ZW50SGFuZGxlcnNbZXZlbnRUeXBlXS5wdXNoKGNhbGxiYWNrKTtcblxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfTtcblxuICAgIC8vIEV4cGxpY2l0bHkgYWRkIGEgd3JhcHBlciBtZXRob2QgZm9yICdvZmYnIHRoYXQgcmVtb3ZlcyByZW1vdmVkIGV2ZW50IGhhbmRsZXJzIGZyb20gdGhlIGV2ZW50IGxpc3RcbiAgICB3cmFwcGVyLm9mZiA9IChldmVudFR5cGU6IFBsYXllckV2ZW50LCBjYWxsYmFjazogUGxheWVyRXZlbnRDYWxsYmFjaykgPT4ge1xuICAgICAgcGxheWVyLm9mZihldmVudFR5cGUsIGNhbGxiYWNrKTtcblxuICAgICAgaWYgKHRoaXMuZXZlbnRIYW5kbGVyc1tldmVudFR5cGVdKSB7XG4gICAgICAgIEFycmF5VXRpbHMucmVtb3ZlKHRoaXMuZXZlbnRIYW5kbGVyc1tldmVudFR5cGVdLCBjYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH07XG5cbiAgICB3cmFwcGVyLmZpcmVFdmVudEluVUkgPSAoZXZlbnQ6IFBsYXllckV2ZW50LCBkYXRhOiB7fSkgPT4ge1xuICAgICAgaWYgKHRoaXMuZXZlbnRIYW5kbGVyc1tldmVudF0pIHsgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGhhbmRsZXJzIGZvciB0aGlzIGV2ZW50IHJlZ2lzdGVyZWRcbiAgICAgICAgLy8gRXh0ZW5kIHRoZSBkYXRhIG9iamVjdCB3aXRoIGRlZmF1bHQgdmFsdWVzIHRvIGNvbnZlcnQgaXQgdG8gYSB7QGxpbmsgUGxheWVyRXZlbnRCYXNlfSBvYmplY3QuXG4gICAgICAgIGxldCBwbGF5ZXJFdmVudERhdGEgPSA8UGxheWVyRXZlbnRCYXNlPk9iamVjdC5hc3NpZ24oe30sIHtcbiAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgdHlwZTogZXZlbnQsXG4gICAgICAgICAgLy8gQWRkIGEgbWFya2VyIHByb3BlcnR5IHNvIHRoZSBVSSBjYW4gZGV0ZWN0IFVJLWludGVybmFsIHBsYXllciBldmVudHNcbiAgICAgICAgICB1aVNvdXJjZWQ6IHRydWUsXG4gICAgICAgIH0sIGRhdGEpO1xuXG4gICAgICAgIC8vIEV4ZWN1dGUgdGhlIHJlZ2lzdGVyZWQgY2FsbGJhY2tzXG4gICAgICAgIGZvciAobGV0IGNhbGxiYWNrIG9mIHRoaXMuZXZlbnRIYW5kbGVyc1tldmVudF0pIHtcbiAgICAgICAgICBjYWxsYmFjayhwbGF5ZXJFdmVudERhdGEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMud3JhcHBlciA9IDxXcmFwcGVkUGxheWVyPndyYXBwZXI7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHdyYXBwZWQgcGxheWVyIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIG9uIHBsYWNlIG9mIHRoZSBub3JtYWwgcGxheWVyIG9iamVjdC5cbiAgICogQHJldHVybnMge1dyYXBwZWRQbGF5ZXJ9IGEgd3JhcHBlZCBwbGF5ZXJcbiAgICovXG4gIGdldFBsYXllcigpOiBXcmFwcGVkUGxheWVyIHtcbiAgICByZXR1cm4gdGhpcy53cmFwcGVyO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyBhbGwgcmVnaXN0ZXJlZCBldmVudCBoYW5kbGVycyBmcm9tIHRoZSBwbGF5ZXIgdGhhdCB3ZXJlIGFkZGVkIHRocm91Z2ggdGhlIHdyYXBwZWQgcGxheWVyLlxuICAgKi9cbiAgY2xlYXJFdmVudEhhbmRsZXJzKCk6IHZvaWQge1xuICAgIHRyeSB7XG4gICAgICAvLyBDYWxsIHRoZSBwbGF5ZXIgQVBJIHRvIGNoZWNrIGlmIHRoZSBpbnN0YW5jZSBpcyBzdGlsbCB2YWxpZCBvciBhbHJlYWR5IGRlc3Ryb3llZC5cbiAgICAgIC8vIFRoaXMgY2FuIGJlIGFueSBjYWxsIHRocm93aW5nIHRoZSBQbGF5ZXJBUElOb3RBdmFpbGFibGVFcnJvciB3aGVuIHRoZSBwbGF5ZXIgaW5zdGFuY2UgaXMgZGVzdHJveWVkLlxuICAgICAgdGhpcy5wbGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyQVBJTm90QXZhaWxhYmxlRXJyb3IpIHtcbiAgICAgICAgLy8gV2UgaGF2ZSBkZXRlY3RlZCB0aGF0IHRoZSBwbGF5ZXIgaW5zdGFuY2UgaXMgYWxyZWFkeSBkZXN0cm95ZWQsIHNvIHdlIGNsZWFyIHRoZSBldmVudCBoYW5kbGVycyB0byBhdm9pZFxuICAgICAgICAvLyBldmVudCBoYW5kbGVyIHVuc3Vic2NyaXB0aW9uIGF0dGVtcHRzICh3aGljaCB3b3VsZCByZXN1bHQgaW4gUGxheWVyQVBJTm90QXZhaWxhYmxlRXJyb3IgZXJyb3JzKS5cbiAgICAgICAgdGhpcy5ldmVudEhhbmRsZXJzID0ge307XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgZXZlbnRUeXBlIGluIHRoaXMuZXZlbnRIYW5kbGVycykge1xuICAgICAgZm9yIChsZXQgY2FsbGJhY2sgb2YgdGhpcy5ldmVudEhhbmRsZXJzW2V2ZW50VHlwZV0pIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIub2ZmKGV2ZW50VHlwZSBhcyBQbGF5ZXJFdmVudCwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRBbGxQcm9wZXJ0eU5hbWVzKHRhcmdldDogT2JqZWN0KTogc3RyaW5nW10ge1xuICBsZXQgbmFtZXM6IHN0cmluZ1tdID0gW107XG5cbiAgd2hpbGUgKHRhcmdldCkge1xuICAgIGNvbnN0IG5ld05hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KS5maWx0ZXIobmFtZSA9PiBuYW1lcy5pbmRleE9mKG5hbWUpID09PSAtMSk7XG4gICAgbmFtZXMgPSBuYW1lcy5jb25jYXQobmV3TmFtZXMpO1xuICAgIC8vIGdvIHVwIHByb3RvdHlwZSBjaGFpblxuICAgIHRhcmdldCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpO1xuICB9XG5cbiAgcmV0dXJuIG5hbWVzO1xufVxuIiwiaW1wb3J0IHtDb21wb25lbnQsIENvbXBvbmVudENvbmZpZ30gZnJvbSAnLi9jb21wb25lbnRzL2NvbXBvbmVudCc7XG5pbXBvcnQge0NvbnRhaW5lcn0gZnJvbSAnLi9jb21wb25lbnRzL2NvbnRhaW5lcic7XG5cbmV4cG9ydCBuYW1lc3BhY2UgVUlVdGlscyB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgVHJlZVRyYXZlcnNhbENhbGxiYWNrIHtcbiAgICAoY29tcG9uZW50OiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPiwgcGFyZW50PzogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4pOiB2b2lkO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHRyYXZlcnNlVHJlZShjb21wb25lbnQ6IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+LCB2aXNpdDogVHJlZVRyYXZlcnNhbENhbGxiYWNrKTogdm9pZCB7XG4gICAgbGV0IHJlY3Vyc2l2ZVRyZWVXYWxrZXIgPSAoY29tcG9uZW50OiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPiwgcGFyZW50PzogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4pID0+IHtcbiAgICAgIHZpc2l0KGNvbXBvbmVudCwgcGFyZW50KTtcblxuICAgICAgLy8gSWYgdGhlIGN1cnJlbnQgY29tcG9uZW50IGlzIGEgY29udGFpbmVyLCB2aXNpdCBpdCdzIGNoaWxkcmVuXG4gICAgICBpZiAoY29tcG9uZW50IGluc3RhbmNlb2YgQ29udGFpbmVyKSB7XG4gICAgICAgIGZvciAobGV0IGNoaWxkQ29tcG9uZW50IG9mIGNvbXBvbmVudC5nZXRDb21wb25lbnRzKCkpIHtcbiAgICAgICAgICByZWN1cnNpdmVUcmVlV2Fsa2VyKGNoaWxkQ29tcG9uZW50LCBjb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFdhbGsgYW5kIGNvbmZpZ3VyZSB0aGUgY29tcG9uZW50IHRyZWVcbiAgICByZWN1cnNpdmVUcmVlV2Fsa2VyKGNvbXBvbmVudCk7XG4gIH1cblxuICAvLyBGcm9tOiBodHRwczovL2dpdGh1Yi5jb20vbmZyaWVuZC90cy1rZXljb2RlLWVudW0vYmxvYi9tYXN0ZXIvS2V5LmVudW0udHNcbiAgZXhwb3J0IGVudW0gS2V5Q29kZSB7XG4gICAgTGVmdEFycm93ID0gMzcsXG4gICAgVXBBcnJvdyA9IDM4LFxuICAgIFJpZ2h0QXJyb3cgPSAzOSxcbiAgICBEb3duQXJyb3cgPSA0MCxcbiAgICBTcGFjZSA9IDMyLFxuICAgIEVuZCA9IDM1LFxuICAgIEhvbWUgPSAzNixcbiAgfVxufVxuIiwiaW1wb3J0IHsgRXZlbnQsIEV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJy4vZXZlbnRkaXNwYXRjaGVyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVm9sdW1lU2V0dGluZ0NoYW5nZWRBcmdzIHtcbiAgdm9sdW1lOiBudW1iZXI7XG4gIG11dGVkOiBib29sZWFuO1xufVxuXG4vKipcbiAqIENhbiBiZSB1c2VkIHRvIGNlbnRyYWxseSBtYW5hZ2UgYW5kIGNvbnRyb2wgdGhlIHZvbHVtZSBhbmQgbXV0ZSBzdGF0ZSBvZiB0aGUgcGxheWVyIGZyb20gbXVsdGlwbGUgY29tcG9uZW50cy5cbiAqL1xuZXhwb3J0IGNsYXNzIFZvbHVtZUNvbnRyb2xsZXIge1xuXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGlzc3Vlck5hbWUgPSAndWktdm9sdW1lY29udHJvbGxlcic7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBldmVudHMgPSB7XG4gICAgb25DaGFuZ2VkOiBuZXcgRXZlbnREaXNwYXRjaGVyPFZvbHVtZUNvbnRyb2xsZXIsIFZvbHVtZVNldHRpbmdDaGFuZ2VkQXJncz4oKSxcbiAgfTtcblxuICBwcml2YXRlIHN0b3JlZFZvbHVtZTogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcGxheWVyOiBQbGF5ZXJBUEkpIHtcbiAgICB0aGlzLnN0b3JlVm9sdW1lKCk7XG5cbiAgICBjb25zdCBoYW5kbGVyID0gKCkgPT4ge1xuICAgICAgdGhpcy5vbkNoYW5nZWRFdmVudCgpO1xuICAgIH07XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU291cmNlTG9hZGVkLCBoYW5kbGVyKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVm9sdW1lQ2hhbmdlZCwgaGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50Lk11dGVkLCBoYW5kbGVyKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVW5tdXRlZCwgaGFuZGxlcik7XG4gIH1cblxuICBzZXRWb2x1bWUodm9sdW1lOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnBsYXllci5zZXRWb2x1bWUodm9sdW1lLCBWb2x1bWVDb250cm9sbGVyLmlzc3Vlck5hbWUpO1xuICB9XG5cbiAgZ2V0Vm9sdW1lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMucGxheWVyLmdldFZvbHVtZSgpO1xuICB9XG5cbiAgc2V0TXV0ZWQobXV0ZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAobXV0ZWQpIHtcbiAgICAgIHRoaXMucGxheWVyLm11dGUoVm9sdW1lQ29udHJvbGxlci5pc3N1ZXJOYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wbGF5ZXIudW5tdXRlKFZvbHVtZUNvbnRyb2xsZXIuaXNzdWVyTmFtZSk7XG4gICAgfVxuICB9XG5cbiAgdG9nZ2xlTXV0ZWQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNNdXRlZCgpIHx8IHRoaXMuZ2V0Vm9sdW1lKCkgPT09IDApIHtcbiAgICAgIC8vIFVubXV0aW5nIGZyb20gdGhlIG11dGUgb3IgemVyby12b2x1bWUgc3RhdGUgcmVjYWxscyB0aGUgcHJldmlvdXNseSBzYXZlZCB2b2x1bWUgc2V0dGluZy4gU2V0dGluZyB0aGVcbiAgICAgIC8vIHZvbHVtZSBhdXRvbWF0aWNhbGx5IHVubXV0ZXMgdGhlIHBsYXllciBpbiB2Ny5cbiAgICAgIHRoaXMucmVjYWxsVm9sdW1lKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0TXV0ZWQodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgaXNNdXRlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXIuaXNNdXRlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3JlcyAoc2F2ZXMpIHRoZSBjdXJyZW50IHZvbHVtZSBzbyBpdCBjYW4gbGF0ZXIgYmUgcmVzdG9yZWQgd2l0aCB7QGxpbmsgcmVjYWxsVm9sdW1lfS5cbiAgICovXG4gIHN0b3JlVm9sdW1lKCk6IHZvaWQge1xuICAgIHRoaXMuc3RvcmVkVm9sdW1lID0gdGhpcy5nZXRWb2x1bWUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWNhbGxzIChzZXRzKSB0aGUgdm9sdW1lIHByZXZpb3VzbHkgc3RvcmVkIHdpdGgge0BsaW5rIHN0b3JlVm9sdW1lfS5cbiAgICovXG4gIHJlY2FsbFZvbHVtZSgpOiB2b2lkIHtcbiAgICB0aGlzLnNldE11dGVkKHRoaXMuc3RvcmVkVm9sdW1lID09PSAwKTtcbiAgICB0aGlzLnNldFZvbHVtZSh0aGlzLnN0b3JlZFZvbHVtZSk7XG4gIH1cblxuICBzdGFydFRyYW5zaXRpb24oKTogVm9sdW1lVHJhbnNpdGlvbiB7XG4gICAgcmV0dXJuIG5ldyBWb2x1bWVUcmFuc2l0aW9uKHRoaXMpO1xuICB9XG5cbiAgb25DaGFuZ2VkRXZlbnQoKSB7XG4gICAgY29uc3QgcGxheWVyTXV0ZWQgPSB0aGlzLmlzTXV0ZWQoKTtcbiAgICBjb25zdCBwbGF5ZXJWb2x1bWUgPSB0aGlzLmdldFZvbHVtZSgpO1xuXG4gICAgY29uc3QgdWlNdXRlZCA9IHBsYXllck11dGVkIHx8IHBsYXllclZvbHVtZSA9PT0gMDtcbiAgICBjb25zdCB1aVZvbHVtZSA9IHBsYXllck11dGVkID8gMCA6IHBsYXllclZvbHVtZTtcblxuICAgIHRoaXMuc3RvcmVWb2x1bWUoKTtcblxuICAgIHRoaXMuZXZlbnRzLm9uQ2hhbmdlZC5kaXNwYXRjaCh0aGlzLCB7IHZvbHVtZTogdWlWb2x1bWUsIG11dGVkOiB1aU11dGVkIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgdm9sdW1lIHNldHRpbmdzIGhhdmUgY2hhbmdlZC5cbiAgICovXG4gIGdldCBvbkNoYW5nZWQoKTogRXZlbnQ8Vm9sdW1lQ29udHJvbGxlciwgVm9sdW1lU2V0dGluZ0NoYW5nZWRBcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRzLm9uQ2hhbmdlZC5nZXRFdmVudCgpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWb2x1bWVUcmFuc2l0aW9uIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbnRyb2xsZXI6IFZvbHVtZUNvbnRyb2xsZXIpIHtcbiAgICAvLyBTdG9yZSB0aGUgdm9sdW1lIGF0IHRoZSBiZWdpbm5pbmcgb2YgYSB2b2x1bWUgY2hhbmdlIHNvIHdlIGNhbiByZWNhbGwgaXQgbGF0ZXIgaW4gY2FzZSB3ZSBzZXQgdGhlIHZvbHVtZSB0b1xuICAgIC8vIHplcm8gYW5kIGFjdHVhbGx5IG11dGUgdGhlIHBsYXllci5cbiAgICBjb250cm9sbGVyLnN0b3JlVm9sdW1lKCk7XG4gIH1cblxuICB1cGRhdGUodm9sdW1lOiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyBVcGRhdGUgdGhlIHZvbHVtZSB3aGlsZSB0cmFuc2l0aW9uaW5nIHNvIHRoZSB1c2VyIGhhcyBhIFwibGl2ZSBwcmV2aWV3XCIgb2YgdGhlIGRlc2lyZWQgdGFyZ2V0IHZvbHVtZVxuICAgIHRoaXMuY29udHJvbGxlci5zZXRNdXRlZChmYWxzZSk7XG4gICAgdGhpcy5jb250cm9sbGVyLnNldFZvbHVtZSh2b2x1bWUpO1xuICB9XG5cbiAgZmluaXNoKHZvbHVtZTogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHZvbHVtZSA9PT0gMCkge1xuICAgICAgLy8gV2hlbiB0aGUgdm9sdW1lIGlzIHplcm8gd2UgZXNzZW50aWFsbHkgbXV0ZSB0aGUgdm9sdW1lIHNvIHdlIHJlY2FsbCB0aGUgdm9sdW1lIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGVcbiAgICAgIC8vIHRyYW5zaXRpb24gYW5kIG11dGUgdGhlIHBsYXllciBpbnN0ZWFkLiBSZWNhbGxpbmcgaXMgbmVjZXNzYXJ5IHRvIHJldHVybiB0byB0aGUgYWN0dWFsIGF1ZGlvIHZvbHVtZVxuICAgICAgLy8gd2hlbiB1bm11dGluZy5cbiAgICAgIC8vIFdlIG11c3QgZmlyc3QgcmVjYWxsIHRoZSB2b2x1bWUgYW5kIHRoZW4gbXV0ZSwgYmVjYXVzZSByZWNhbGxpbmcgc2V0cyB0aGUgdm9sdW1lIG9uIHRoZSBwbGF5ZXJcbiAgICAgIC8vIGFuZCBzZXR0aW5nIGEgcGxheWVyIHZvbHVtZSA+IDAgdW5tdXRlcyB0aGUgcGxheWVyIGluIHY3LlxuICAgICAgdGhpcy5jb250cm9sbGVyLnJlY2FsbFZvbHVtZSgpO1xuICAgICAgdGhpcy5jb250cm9sbGVyLnNldE11dGVkKHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbnRyb2xsZXIuc2V0TXV0ZWQoZmFsc2UpO1xuICAgICAgdGhpcy5jb250cm9sbGVyLnNldFZvbHVtZSh2b2x1bWUpO1xuICAgICAgdGhpcy5jb250cm9sbGVyLnN0b3JlVm9sdW1lKCk7XG4gICAgfVxuICB9XG59IiwiaW1wb3J0IHsgU3VidGl0bGVSZWdpb25Db250YWluZXIsIFN1YnRpdGxlTGFiZWwgfSBmcm9tICcuL2NvbXBvbmVudHMvc3VidGl0bGVvdmVybGF5JztcbmltcG9ydCB7IFZUVFByb3BlcnRpZXMsIFZUVFJlZ2lvblByb3BlcnRpZXMgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXIvdHlwZXMvc3VidGl0bGVzL3Z0dC9BUEknO1xuaW1wb3J0IHsgRE9NLCBTaXplIH0gZnJvbSAnLi9kb20nO1xuXG4vLyBPdXIgZGVmYXVsdCBoZWlnaHQgb2YgYSBsaW5lXG5jb25zdCBsaW5lSGVpZ2h0ID0gMjg7XG5cbi8vIERlZmF1bHQgcmVsYXRpdmUgbGluZSBoZWlnaHRcbmNvbnN0IGxpbmVIZWlnaHRQZXJjZW50ID0gNTtcbmxldCBsaW5lQ291bnQ6IG51bWJlciA9IDE7XG5cbmNvbnN0IGRlZmF1bHRMaW5lTnVtYmVyID0gMjE7IC8vIE91ciBkZWZhdWx0IGFtb3VudCBvZiBsaW5lc1xuXG5lbnVtIERpcmVjdGlvbiB7XG4gIFRvcCA9ICd0b3AnLFxuICBCb3R0b20gPSAnYm90dG9tJyxcbiAgTGVmdCA9ICdsZWZ0JyxcbiAgUmlnaHQgPSAncmlnaHQnLFxufVxuXG5lbnVtIFZ0dFZlcnRpY2FsV3JpdGluZyB7XG4gIEdyb3dpbmdSaWdodCA9ICdscicsXG4gIEdyb3dpbmdMZWZ0ID0gJ3JsJyxcbn1cblxudHlwZSBWZXJ0aWNhbFdyaXRpbmdEaXJlY3Rpb24gPSBEaXJlY3Rpb24uTGVmdCB8IERpcmVjdGlvbi5SaWdodDtcblxuY29uc3QgRGlyZWN0aW9uUGFpciA9IG5ldyBNYXA8RGlyZWN0aW9uLCBEaXJlY3Rpb24+KFtcbiAgW0RpcmVjdGlvbi5Ub3AsIERpcmVjdGlvbi5Cb3R0b21dLFxuICBbRGlyZWN0aW9uLkJvdHRvbSwgRGlyZWN0aW9uLlRvcF0sXG4gIFtEaXJlY3Rpb24uTGVmdCwgRGlyZWN0aW9uLlJpZ2h0XSxcbiAgW0RpcmVjdGlvbi5SaWdodCwgRGlyZWN0aW9uLkxlZnRdLFxuXSk7XG5cbi8qKlxuICogU2V0cyB0aGUgZGVmYXVsdCBzdGFuZGFyZGl6ZWQgc3R5bGVzIGZvciB0aGUgQ3VlIEJveFxuICogaHR0cHM6Ly93My5vcmcvVFIvd2VidnR0MS8jYXBwbHlpbmctY3NzLXByb3BlcnRpZXNcbiAqL1xuY29uc3Qgc2V0RGVmYXVsdFZ0dFN0eWxlcyA9IChjdWVDb250YWluZXJEb206IERPTSwgdnR0OiBWVFRQcm9wZXJ0aWVzKSA9PiB7XG4gIGlmICh2dHQucmVnaW9uKSB7XG4gICAgY3VlQ29udGFpbmVyRG9tLmNzcygncG9zaXRpb24nLCAncmVsYXRpdmUnKTtcbiAgICBjdWVDb250YWluZXJEb20uY3NzKCd1bmljb2RlLWJpZGknLCAncGxhaW50ZXh0Jyk7XG4gIH0gZWxzZSB7XG4gICAgY3VlQ29udGFpbmVyRG9tLmNzcygncG9zaXRpb24nLCAnYWJzb2x1dGUnKTtcbiAgICBjdWVDb250YWluZXJEb20uY3NzKCdvdmVyZmxvdy13cmFwJywgJ2JyZWFrLXdvcmQnKTtcbiAgICBjdWVDb250YWluZXJEb20uY3NzKCdvdmVyZmxvdycsICdoaWRkZW4nKTtcbiAgICBjdWVDb250YWluZXJEb20uY3NzKCdmbGV4LWZsb3cnLCAnY29sdW1uJyk7XG4gIH1cbiAgY3VlQ29udGFpbmVyRG9tLmNzcygnZGlzcGxheScsICdpbmxpbmUtZmxleCcpO1xufTtcblxuLyoqXG4gKiBBbGlnbiB0aGUgQ3VlIEJveCdzIGxpbmVcbiAqIGh0dHBzOi8vdzMub3JnL1RSL3dlYnZ0dDEvI3dlYnZ0dC1jdWUtbGluZS1hbGlnbm1lbnRcbiAqL1xuY29uc3Qgc2V0VnR0TGluZUFsaWduID0gKFxuICBjdWVDb250YWluZXJEb206IERPTSxcbiAgeyBsaW5lQWxpZ24gfTogVlRUUHJvcGVydGllcyxcbiAgZGlyZWN0aW9uOiBEaXJlY3Rpb24sXG4gIHJlbGF0aXZlQ3VlQm94UG9zaXRpb246IG51bWJlcikgPT4ge1xuICBzd2l0Y2ggKGxpbmVBbGlnbikge1xuICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICBzZXRDc3NGb3JDZW50ZXJMaW5lQWxpZ24oXG4gICAgICAgIGN1ZUNvbnRhaW5lckRvbSwgZGlyZWN0aW9uLCByZWxhdGl2ZUN1ZUJveFBvc2l0aW9uKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2VuZCc6XG4gICAgICBzZXRDc3NGb3JFbmRMaW5lQWxpZ24oXG4gICAgICAgIGN1ZUNvbnRhaW5lckRvbSwgZGlyZWN0aW9uLCByZWxhdGl2ZUN1ZUJveFBvc2l0aW9uKTtcbiAgfVxufTtcblxuLyoqXG4gKiBEZWZpbmVzIHRoZSBsaW5lIHBvc2l0aW9uaW5nIG9mIHRoZSBDdWUgQm94XG4gKiBodHRwczovL3czLm9yZy9UUi93ZWJ2dHQxLyN3ZWJ2dHQtY3VlLWxpbmVcbiAqL1xuY29uc3Qgc2V0VnR0TGluZSA9IChcbiAgY3VlQ29udGFpbmVyRG9tOiBET00sXG4gIHZ0dDogVlRUUHJvcGVydGllcyxcbiAgZGlyZWN0aW9uOiBEaXJlY3Rpb24sXG4gIHN1YnRpdGxlT3ZlckxheVNpemU6IFNpemUsXG4pID0+IHtcbiAgY29uc3Qgb3ZlcmxheVJlZmVyZW5jZUVkZ2UgPSBEaXJlY3Rpb25QYWlyLmdldChkaXJlY3Rpb24pO1xuICBpZiAodnR0LmxpbmUgPT09ICdhdXRvJyAmJiB2dHQudmVydGljYWwpIHtcbiAgICBjdWVDb250YWluZXJEb20uY3NzKG92ZXJsYXlSZWZlcmVuY2VFZGdlLCAnMCcpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodnR0LmxpbmUgPT09ICdhdXRvJyAmJiAhdnR0LnZlcnRpY2FsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IHJlbGF0aXZlTGluZVBvc2l0aW9uID0gcGFyc2VGbG9hdCh2dHQubGluZSBhcyBzdHJpbmcpO1xuXG4gIGlmICh2dHQuc25hcFRvTGluZXMpIHtcbiAgICBsZXQgdGFyZ2V0TGluZSA9IE51bWJlcih2dHQubGluZSk7XG4gICAgaWYgKHRhcmdldExpbmUgPCAwKSB7XG4gICAgICB0YXJnZXRMaW5lID0gZGVmYXVsdExpbmVOdW1iZXIgKyB0YXJnZXRMaW5lO1xuICAgIH1cblxuICAgIGNvbnN0IGxpbmVIZWlnaHQgPSBzdWJ0aXRsZU92ZXJMYXlTaXplLmhlaWdodCAvIGRlZmF1bHRMaW5lTnVtYmVyO1xuICAgIGNvbnN0IGFic29sdXRlTGluZVBvc2l0aW9uID0gbGluZUhlaWdodCAqIHRhcmdldExpbmU7XG4gICAgcmVsYXRpdmVMaW5lUG9zaXRpb24gPSAoMTAwICogYWJzb2x1dGVMaW5lUG9zaXRpb24pIC8gc3VidGl0bGVPdmVyTGF5U2l6ZS5oZWlnaHQ7XG4gIH1cblxuICBpZiAodnR0LmxpbmVBbGlnbiAhPT0gJ2VuZCcpXG4gICAgY3VlQ29udGFpbmVyRG9tLmNzcyhcbiAgICAgIG92ZXJsYXlSZWZlcmVuY2VFZGdlLCBgJHtyZWxhdGl2ZUxpbmVQb3NpdGlvbn0lYCk7XG4gIHNldFZ0dExpbmVBbGlnbihjdWVDb250YWluZXJEb20sIHZ0dCwgZGlyZWN0aW9uLCByZWxhdGl2ZUxpbmVQb3NpdGlvbik7XG59O1xuXG4vKipcbiAqIERlZmluZXMgdGhlIHdyaXRpbmcgZGlyZWN0aW9uIG9mIHRoZSBDdWUgQm94XG4gKiBodHRwczovL3czLm9yZy9UUi93ZWJ2dHQxLyN3ZWJ2dHQtY3VlLXdyaXRpbmctZGlyZWN0aW9uXG4gKi9cbmNvbnN0IHNldFZ0dFdyaXRpbmdEaXJlY3Rpb25BbmRDdWVCb3hQb3NpdGlvbmluZyA9IChcbiAgY3VlQ29udGFpbmVyRG9tOiBET00sIHZ0dDogVlRUUHJvcGVydGllcyxcbiAgc3VidGl0bGVPdmVybGF5U2l6ZTogU2l6ZSxcbikgPT4ge1xuICBzd2l0Y2ggKHZ0dC52ZXJ0aWNhbCkge1xuICBjYXNlICcnOlxuICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoJ3dyaXRpbmctbW9kZScsICdob3Jpem9udGFsLXRiJyk7XG4gICAgY3VlQ29udGFpbmVyRG9tLmNzcyhEaXJlY3Rpb24uQm90dG9tLCAnMCcpO1xuICAgIHNldFZ0dExpbmUoY3VlQ29udGFpbmVyRG9tLCB2dHQsIERpcmVjdGlvbi5Cb3R0b20sIHN1YnRpdGxlT3ZlcmxheVNpemUpO1xuICAgIGJyZWFrO1xuICBjYXNlIFZ0dFZlcnRpY2FsV3JpdGluZy5Hcm93aW5nUmlnaHQ6XG4gICAgc2V0Q3VlQm94UG9zaXRpb25Gb3JWZXJ0aWNhbFdyaXRpbmcoXG4gICAgICBjdWVDb250YWluZXJEb20sIERpcmVjdGlvbi5SaWdodCwgdnR0LCBzdWJ0aXRsZU92ZXJsYXlTaXplKTtcbiAgICBicmVhaztcbiAgY2FzZSBWdHRWZXJ0aWNhbFdyaXRpbmcuR3Jvd2luZ0xlZnQ6XG4gICAgc2V0Q3VlQm94UG9zaXRpb25Gb3JWZXJ0aWNhbFdyaXRpbmcoXG4gICAgICBjdWVDb250YWluZXJEb20sIERpcmVjdGlvbi5MZWZ0LCB2dHQsIHN1YnRpdGxlT3ZlcmxheVNpemUpO1xuICAgIGJyZWFrO1xuICB9XG59O1xuXG5jb25zdCBzZXRDdWVCb3hQb3NpdGlvbkZvclZlcnRpY2FsV3JpdGluZyA9IChcbiAgY3VlQ29udGFpbmVyRG9tOiBET00sXG4gIGRpcmVjdGlvbjogVmVydGljYWxXcml0aW5nRGlyZWN0aW9uLFxuICB2dHQ6IFZUVFByb3BlcnRpZXMsXG4gIHN1YnRpdGxlT3ZlcmxheVNpemU6IFNpemUsXG4pID0+IHtcbiAgICBjb25zdCB3cml0aW5nTW9kZSA9IGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLlJpZ2h0ID9cbiAgICAgICd2ZXJ0aWNhbC1scicgOiAndmVydGljYWwtcmwnO1xuXG4gICAgY3VlQ29udGFpbmVyRG9tLmNzcygnd3JpdGluZy1tb2RlJywgd3JpdGluZ01vZGUpO1xuICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoRGlyZWN0aW9uLlRvcCwgJzAnKTtcbiAgICBzZXRWdHRMaW5lKGN1ZUNvbnRhaW5lckRvbSwgdnR0LCBkaXJlY3Rpb24sIHN1YnRpdGxlT3ZlcmxheVNpemUpO1xufTtcblxuLyoqXG4gKiBEZWZpbmVzIHRoZSBDdWUgcG9zaXRpb24gYWxpZ25tZW50XG4gKiBodHRwczovL3czLm9yZy9UUi93ZWJ2dHQxLyN3ZWJ2dHQtY3VlLXBvc2l0aW9uLWFsaWdubWVudFxuICovXG5jb25zdCBzZXRWdHRQb3NpdGlvbkFsaWduID0gKGN1ZUNvbnRhaW5lckRvbTogRE9NLCB2dHQ6IFZUVFByb3BlcnRpZXMsIGRpcmVjdGlvbjogRGlyZWN0aW9uKSA9PiB7XG4gIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93ZWJ2dHQxLyN3ZWJ2dHQtY3VlLXBvc2l0aW9uXG4gIGlmICh2dHQucG9zaXRpb24gPT09ICdhdXRvJykge1xuICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoZGlyZWN0aW9uLCAnMCcpO1xuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAodnR0LnBvc2l0aW9uQWxpZ24pIHtcbiAgICAgIGNhc2UgJ2xpbmUtbGVmdCc6XG4gICAgICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoZGlyZWN0aW9uLCBgJHt2dHQucG9zaXRpb259JWApO1xuICAgICAgICBjdWVDb250YWluZXJEb20uY3NzKERpcmVjdGlvblBhaXIuZ2V0KGRpcmVjdGlvbiksICdhdXRvJyk7XG4gICAgICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoJ2p1c3RpZnktY29udGVudCcsICdmbGV4LXN0YXJ0Jyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgY3VlQ29udGFpbmVyRG9tLmNzcyhkaXJlY3Rpb24sIGAke3Z0dC5wb3NpdGlvbiAtIHZ0dC5zaXplIC8gMn0lYCk7XG4gICAgICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoRGlyZWN0aW9uUGFpci5nZXQoZGlyZWN0aW9uKSwgJ2F1dG8nKTtcbiAgICAgICAgY3VlQ29udGFpbmVyRG9tLmNzcygnanVzdGlmeS1jb250ZW50JywgJ2NlbnRlcicpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2xpbmUtcmlnaHQnOlxuICAgICAgICBjdWVDb250YWluZXJEb20uY3NzKGRpcmVjdGlvbiwgJ2F1dG8nKTtcbiAgICAgICAgY3VlQ29udGFpbmVyRG9tLmNzcyhEaXJlY3Rpb25QYWlyLmdldChkaXJlY3Rpb24pLCBgJHsxMDAgLSB2dHQucG9zaXRpb259JWApO1xuICAgICAgICBjdWVDb250YWluZXJEb20uY3NzKCdqdXN0aWZ5LWNvbnRlbnQnLCAnZmxleC1lbmQnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjdWVDb250YWluZXJEb20uY3NzKGRpcmVjdGlvbiwgYCR7dnR0LnBvc2l0aW9ufSVgKTtcbiAgICAgICAgY3VlQ29udGFpbmVyRG9tLmNzcygnanVzdGlmeS1jb250ZW50JywgJ2ZsZXgtc3RhcnQnKTtcbiAgICB9XG4gIH1cbn07XG5cbmNvbnN0IGNvdW50TGluZXMgPSAoaW5uZXJIdG1sOiBzdHJpbmcpID0+XG4gIGlubmVySHRtbC5zcGxpdCgnPGJyIC8+JykubGVuZ3RoO1xuXG5jb25zdCBzZXRDc3NGb3JDZW50ZXJMaW5lQWxpZ24gPSAoXG4gIGN1ZUNvbnRhaW5lckRvbTogRE9NLFxuICBkaXJlY3Rpb246IERpcmVjdGlvbixcbiAgcmVsYXRpdmVDdWVCb3hQb3NpdGlvbjogbnVtYmVyKSA9PiB7XG4gIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgY2FzZSBEaXJlY3Rpb24uQm90dG9tOlxuICAgICAgY3VlQ29udGFpbmVyRG9tLmNzcygndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZVkoLTUwJSknKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgRGlyZWN0aW9uLkxlZnQ6XG4gICAgICBjdWVDb250YWluZXJEb20uY3NzKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlWCg1MCUpJyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIERpcmVjdGlvbi5SaWdodDpcbiAgICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGVYKC01MCUpJyk7XG4gICAgICBicmVhaztcbiAgfVxufTtcblxuY29uc3Qgc2V0Q3NzRm9yRW5kTGluZUFsaWduID0gKFxuICBjdWVDb250YWluZXJEb206IERPTSxcbiAgZGlyZWN0aW9uOiBEaXJlY3Rpb24sXG4gIG9mZnNldDogbnVtYmVyKSA9PiB7XG4gICAgICBjb25zdCBvcG9zaXRlVG9PdmVybGF5UmVmZXJlbmNlRWRnZSA9IGRpcmVjdGlvbjtcbiAgICAgIGN1ZUNvbnRhaW5lckRvbS5jc3Mob3Bvc2l0ZVRvT3ZlcmxheVJlZmVyZW5jZUVkZ2UsIGAkezEwMCAtIG9mZnNldH0lYCk7XG59O1xuXG5leHBvcnQgbmFtZXNwYWNlIFZ0dFV0aWxzIHtcbiAgZXhwb3J0IGNvbnN0IHNldFZ0dEN1ZUJveFN0eWxlcyA9IChcbiAgICBjdWVDb250YWluZXI6IFN1YnRpdGxlTGFiZWwsXG4gICAgc3VidGl0bGVPdmVybGF5U2l6ZTogU2l6ZSxcbiAgKSA9PiB7XG4gICAgY29uc3QgdnR0ID0gY3VlQ29udGFpbmVyLnZ0dDtcbiAgICBjb25zdCBjdWVDb250YWluZXJEb20gPSBjdWVDb250YWluZXIuZ2V0RG9tRWxlbWVudCgpO1xuXG5cbiAgICBzZXREZWZhdWx0VnR0U3R5bGVzKGN1ZUNvbnRhaW5lckRvbSwgdnR0KTtcblxuICAgIGxpbmVDb3VudCA9IGNvdW50TGluZXMoY3VlQ29udGFpbmVyLmdldFRleHQoKSk7XG4gICAgc2V0VnR0V3JpdGluZ0RpcmVjdGlvbkFuZEN1ZUJveFBvc2l0aW9uaW5nKGN1ZUNvbnRhaW5lckRvbSwgdnR0LCBzdWJ0aXRsZU92ZXJsYXlTaXplKTtcblxuICAgIC8vIGh0dHBzOi8vdzMub3JnL1RSL3dlYnZ0dDEvI3dlYnZ0dC1jdWUtdGV4dC1hbGlnbm1lbnRcbiAgICBjb25zdCB0ZXh0QWxpZ24gPSB2dHQuYWxpZ24gPT09ICdtaWRkbGUnID8gJ2NlbnRlcicgOiB2dHQuYWxpZ247XG4gICAgY3VlQ29udGFpbmVyRG9tLmNzcygndGV4dC1hbGlnbicsIHRleHRBbGlnbik7XG5cbiAgICAvLyBodHRwczovL3czLm9yZy9UUi93ZWJ2dHQxLyN3ZWJ2dHQtY3VlLXNpemVcbiAgICBjb25zdCBjb250YWluZXJTaXplID0gdnR0LnNpemU7XG4gICAgaWYgKHZ0dC52ZXJ0aWNhbCA9PT0gJycpIHtcbiAgICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoJ3dpZHRoJywgYCR7Y29udGFpbmVyU2l6ZX0lYCk7XG4gICAgICBzZXRWdHRQb3NpdGlvbkFsaWduKGN1ZUNvbnRhaW5lckRvbSwgdnR0LCBEaXJlY3Rpb24uTGVmdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoJ2hlaWdodCcsIGAke2NvbnRhaW5lclNpemV9JWApO1xuICAgICAgc2V0VnR0UG9zaXRpb25BbGlnbihjdWVDb250YWluZXJEb20sIHZ0dCwgRGlyZWN0aW9uLlRvcCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKiBodHRwczovL3d3dy53My5vcmcvVFIvd2VidnR0MS8jcmVnaW9uc1xuICAgKiAgaHR0cHM6Ly93d3cuc3BlZWNocGFkLmNvbS9jYXB0aW9ucy93ZWJ2dHQjdG9jXzE2XG4gICAqL1xuICBleHBvcnQgY29uc3Qgc2V0VnR0UmVnaW9uU3R5bGVzID0gKFxuICAgIHJlZ2lvbkNvbnRhaW5lcjogU3VidGl0bGVSZWdpb25Db250YWluZXIsXG4gICAgcmVnaW9uOiBWVFRSZWdpb25Qcm9wZXJ0aWVzLFxuICAgIG92ZXJsYXlTaXplOiBTaXplLFxuICApID0+IHtcbiAgICBjb25zdCByZWdpb25Db250YWluZXJEb20gPSByZWdpb25Db250YWluZXIuZ2V0RG9tRWxlbWVudCgpO1xuICAgIGNvbnN0IHJlZ2lvblBvc2l0aW9uWCA9IG92ZXJsYXlTaXplLndpZHRoICogcmVnaW9uLnZpZXdwb3J0QW5jaG9yWCAvIDEwMCAtICgob3ZlcmxheVNpemUud2lkdGggKiByZWdpb24ud2lkdGggLyAxMDApICogcmVnaW9uLnJlZ2lvbkFuY2hvclggLyAxMDApO1xuICAgIGNvbnN0IHJlZ2lvblBvc2l0aW9uWSA9IG92ZXJsYXlTaXplLmhlaWdodCAqIHJlZ2lvbi52aWV3cG9ydEFuY2hvclkgLyAxMDAgLSAoKHJlZ2lvbi5saW5lcyAqIGxpbmVIZWlnaHQpICogcmVnaW9uLnJlZ2lvbkFuY2hvclkgLyAxMDApO1xuICAgIHJlZ2lvbkNvbnRhaW5lckRvbS5jc3MoJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJyk7XG4gICAgcmVnaW9uQ29udGFpbmVyRG9tLmNzcygnb3ZlcmZsb3cnLCAnaGlkZGVuJyk7XG4gICAgcmVnaW9uQ29udGFpbmVyRG9tLmNzcygnd2lkdGgnLCBgJHtyZWdpb24ud2lkdGh9JWApO1xuICAgIHJlZ2lvbkNvbnRhaW5lckRvbS5jc3MoRGlyZWN0aW9uLkxlZnQsIGAke3JlZ2lvblBvc2l0aW9uWH1weGApO1xuICAgIHJlZ2lvbkNvbnRhaW5lckRvbS5jc3MoRGlyZWN0aW9uLlJpZ2h0LCAndW5zZXQnKTtcbiAgICByZWdpb25Db250YWluZXJEb20uY3NzKERpcmVjdGlvbi5Ub3AsIGAke3JlZ2lvblBvc2l0aW9uWX1weGApO1xuICAgIHJlZ2lvbkNvbnRhaW5lckRvbS5jc3MoRGlyZWN0aW9uLkJvdHRvbSwgJ3Vuc2V0Jyk7XG4gICAgcmVnaW9uQ29udGFpbmVyRG9tLmNzcygnaGVpZ2h0JywgYCR7cmVnaW9uLmxpbmVzICogbGluZUhlaWdodH1weGApO1xuICB9O1xufVxuIl19
