{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/custom/ts/components/gobackbutton.ts","src/custom/ts/components/playbackjumpbutton.ts","src/custom/ts/components/playbackjumpoverlay.ts","src/custom/ts/components/radiomode/radiomodetogglebutton.ts","src/ts/arrayutils.ts","src/ts/audiotrackutils.ts","src/ts/browserutils.ts","src/ts/components/adclickoverlay.ts","src/ts/components/admessagelabel.ts","src/ts/components/adskipbutton.ts","src/ts/components/airplaytogglebutton.ts","src/ts/components/audioqualityselectbox.ts","src/ts/components/audiotracklistbox.ts","src/ts/components/audiotrackselectbox.ts","src/ts/components/bufferingoverlay.ts","src/ts/components/button.ts","src/ts/components/caststatusoverlay.ts","src/ts/components/casttogglebutton.ts","src/ts/components/castuicontainer.ts","src/ts/components/clickoverlay.ts","src/ts/components/closebutton.ts","src/ts/components/component.ts","src/ts/components/container.ts","src/ts/components/controlbar.ts","src/ts/components/errormessageoverlay.ts","src/ts/components/fullscreentogglebutton.ts","src/ts/components/hugeplaybacktogglebutton.ts","src/ts/components/hugereplaybutton.ts","src/ts/components/itemselectionlist.ts","src/ts/components/label.ts","src/ts/components/listbox.ts","src/ts/components/listselector.ts","src/ts/components/metadatalabel.ts","src/ts/components/pictureinpicturetogglebutton.ts","src/ts/components/playbackspeedselectbox.ts","src/ts/components/playbacktimelabel.ts","src/ts/components/playbacktogglebutton.ts","src/ts/components/playbacktoggleoverlay.ts","src/ts/components/recommendationoverlay.ts","src/ts/components/replaybutton.ts","src/ts/components/seekbar.ts","src/ts/components/seekbarbufferlevel.ts","src/ts/components/seekbarcontroller.ts","src/ts/components/seekbarlabel.ts","src/ts/components/selectbox.ts","src/ts/components/settingspanel.ts","src/ts/components/settingspanelitem.ts","src/ts/components/settingspanelpage.ts","src/ts/components/settingspanelpagebackbutton.ts","src/ts/components/settingspanelpagenavigatorbutton.ts","src/ts/components/settingspanelpageopenbutton.ts","src/ts/components/settingstogglebutton.ts","src/ts/components/spacer.ts","src/ts/components/subtitlelistbox.ts","src/ts/components/subtitleoverlay.ts","src/ts/components/subtitleselectbox.ts","src/ts/components/subtitlesettings/backgroundcolorselectbox.ts","src/ts/components/subtitlesettings/backgroundopacityselectbox.ts","src/ts/components/subtitlesettings/characteredgeselectbox.ts","src/ts/components/subtitlesettings/fontcolorselectbox.ts","src/ts/components/subtitlesettings/fontfamilyselectbox.ts","src/ts/components/subtitlesettings/fontopacityselectbox.ts","src/ts/components/subtitlesettings/fontsizeselectbox.ts","src/ts/components/subtitlesettings/subtitlesettingselectbox.ts","src/ts/components/subtitlesettings/subtitlesettingslabel.ts","src/ts/components/subtitlesettings/subtitlesettingsmanager.ts","src/ts/components/subtitlesettings/subtitlesettingspanelpage.ts","src/ts/components/subtitlesettings/subtitlesettingsresetbutton.ts","src/ts/components/subtitlesettings/windowcolorselectbox.ts","src/ts/components/subtitlesettings/windowopacityselectbox.ts","src/ts/components/timelinemarkershandler.ts","src/ts/components/titlebar.ts","src/ts/components/togglebutton.ts","src/ts/components/tvnoisecanvas.ts","src/ts/components/uicontainer.ts","src/ts/components/videoqualityselectbox.ts","src/ts/components/volumecontrolbutton.ts","src/ts/components/volumeslider.ts","src/ts/components/volumetogglebutton.ts","src/ts/components/vrtogglebutton.ts","src/ts/components/watermark.ts","src/ts/demofactory.ts","src/ts/dom.ts","src/ts/errorutils.ts","src/ts/eventdispatcher.ts","src/ts/focusvisibilitytracker.ts","src/ts/groupplaybackapi.ts","src/ts/guid.ts","src/ts/imageloader.ts","src/ts/localization/i18n.ts","src/ts/localization/languages/de.json","src/ts/localization/languages/en.json","src/ts/localization/languages/es.json","src/ts/main.ts","src/ts/mobilev3playerapi.ts","src/ts/playerutils.ts","src/ts/spatialnavigation/ListNavigationGroup.ts","src/ts/spatialnavigation/gethtmlelementsfromcomponents.ts","src/ts/spatialnavigation/keymap.ts","src/ts/spatialnavigation/navigationalgorithm.ts","src/ts/spatialnavigation/navigationgroup.ts","src/ts/spatialnavigation/nodeeventsubscriber.ts","src/ts/spatialnavigation/rootnavigationgroup.ts","src/ts/spatialnavigation/seekbarhandler.ts","src/ts/spatialnavigation/spatialnavigation.ts","src/ts/spatialnavigation/typeguards.ts","src/ts/spatialnavigation/types.ts","src/ts/storageutils.ts","src/ts/stringutils.ts","src/ts/subtitleutils.ts","src/ts/timeout.ts","src/ts/uifactory.ts","src/ts/uimanager.ts","src/ts/uiutils.ts","src/ts/volumecontroller.ts","src/ts/vttutils.ts"],"names":["f","g","exports","module","define","amd","window","global","self","this","bitmovin","playerui","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_super","button_1","GoBackButton","Button","__extends","prototype","configure","player","uimanager","_this","onClick","subscribe","customMessageHandler","sendAsynchronous","on","PlayerEvent","ViewModeChanged","getViewMode","hide","show","config","error","defaultConfig","cssClasses","text","ariaLabel","mergeConfig","i18n_1","playerutils_1","PlaybackJumpButtons","liveStreamDetector","PlayerUtils","LiveStreamDetector","onLiveChanged","sender","args","isLive","onControlsShow","onControlsHide","detect","currentTime","getCurrentTime","duration","getDuration","newTime","skipTime","Math","max","min","seek","cssClass","PlaybackForwardButton","__assign","i18n","getLocalizer","PlaybackRewindButton","container_1","playbackjumpbutton_1","PlaybackJumpControlsOverlay","Container","forwardButton","rewindButton","components","togglebutton_1","RadioModeToggleButton","ToggleButton","initialState","active","JSON","stringify","activated","ArrayUtils","remove","array","item","index","indexOf","splice","AudioTrackSwitchHandler","element","addAudioTrack","event","audioTrack","track","listElement","hasItem","id","addItem","label","removeAudioTrack","removeItem","selectCurrentAudioTrack","currentAudioTrack","getAudio","selectItem","refreshAudioTracks","audioTracks","getAvailableAudio","synchronizeItems","map","key","bindSelectionEvent","bindPlayerEvents","onItemSelected","_","value","setAudio","AudioChanged","SourceUnloaded","PeriodSwitched","AudioAdded","AudioRemoved","getConfig","events","onUpdated","BrowserUtils","Object","defineProperty","windowExists","navigator","userAgent","test","isHisense","platform","includes","maxTouchPoints","msMaxTouchPoints","clickoverlay_1","AdClickOverlay","ClickOverlay","adFinishedHandler","setUrl","clickThroughCallback","AdStarted","ad","clickThroughUrl","clickThroughUrlOpened","AdFinished","AdSkipped","AdError","pause","label_1","stringutils_1","AdMessageLabel","Label","adEndHandler","off","TimeChanged","updateMessageHandler","setText","StringUtils","replaceAdMessagePlaceholders","performLocalization","uiConfig","message","AdSkipButton","updateSkipMessageHandler","untilSkippableMessage","skippableMessage","skipOffset","disable","enable","skippableAfter","ads","skip","AirPlayToggleButton","airPlayAvailableHandler","isAirplayAvailable","showAirplayTargetPicker","console","log","airPlayChangedHandler","isAirplayActive","AirplayAvailable","AirplayChanged","selectbox_1","AudioQualitySelectBox","SelectBox","updateAudioQualities","audioQualities","getAvailableAudioQualities","clearItems","_i","audioQualities_1","audioQuality","selectCurrentAudioQuality","getAudioQuality","setAudioQuality","AudioQualityChanged","AudioQualityAdded","AudioQualityRemoved","listbox_1","audiotrackutils_1","AudioTrackListBox","ListBox","AudioTrackSelectBox","component_1","timeout_1","BufferingOverlay","showOverlay","overlayShowTimeout","start","hideOverlay","clear","Timeout","showDelayMs","StallStarted","StallEnded","Play","Playing","Paused","Seek","Seeked","TimeShift","TimeShifted","isStalled","indicators","Component","tag","role","hidden","dom_1","eventdispatcher_1","toDomElement","buttonElementAttributes","aria-label","class","getCssClasses","type","aria-pressed","tabindex","tabIndex","toString","buttonElement","DOM","append","prefixCss","html","onClickEvent","getDomElement","find","buttonEvents","dispatch","getEvent","EventDispatcher","CastStatusOverlay","CastWaitingForDevice","castDeviceName","castPayload","deviceName","statusLabel","CastStarted","CastStopped","CastToggleButton","isCastAvailable","isCasting","castStop","castVideo","uicontainer_1","CastUIContainer","UIContainer","isUiShown","showUi","castUiHideTimeout","hideDelay","showUiPermanently","showUiWithTimeout","isPlaying","release","initialize","url","data","open","getUrl","undefined","CloseButton","target","guid_1","disabled","isHidden","isDisabled","onShow","onComponentShow","onHide","onComponentHide","onHoverChangedEvent","hasDomElement","Boolean","setAriaLabel","setAriaAttr","name","attr","concat","defaults","base","assign","css","join","trim","cssClassOrId","cssPrefix","addClass","CLASS_HIDDEN","onHideEvent","removeClass","onShowEvent","isShown","toggleHidden","CLASS_DISABLED","onDisabledEvent","onEnabledEvent","isEnabled","isHovered","hovered","componentEvents","onEnabled","onDisabled","onHoverChanged","Guid","next","arrayutils_1","addComponent","component","push","componentsToAdd","removeComponent","componentsToRemove","getComponents","removeComponents","_a","slice","updateComponents","shift","innerContainerElement","containerElement","innerContainer","initialComponent","uiutils_1","spacer_1","browserutils_1","settingspanel_1","ControlBar","hoverStackCount","isSettingsPanelShown","disableAutoHideWhenHovered","isMobile","UIUtils","traverseTree","Spacer","SettingsPanel","onPreviewControlsHide","cancel","tvnoisecanvas_1","errorutils_1","mobilev3playerapi_1","gobackbutton_1","ErrorMessageOverlay","errorEventHandler","handleErrorMessage","customizedMessage","errorMessages","customMessage","messages","display","isMobileV3PlayerAPI","MobileV3PlayerEvent","PlayerError","ErrorUtils","defaultMobileV3ErrorMessageTranslator","SourceError","defaultWebErrorMessageTranslator","SourceLoaded","tvNoiseBackground","stop","errorMessage","errorLabel","TvNoiseCanvas","FullscreenToggleButton","fullscreenStateHandler","ViewMode","Fullscreen","fullscreenAvailabilityChangedHandler","isFullScreenAvailable","isViewModeAvailable","ViewModeAvailabilityChanged","targetViewMode","Inline","setViewMode","playbacktogglebutton_1","HugePlaybackToggleButton","PlaybackToggleButton","togglePlayback","isPlayInitiated","play","toggleFullscreen","suppressPlayButtonTransitionAnimation","setTransitionAnimationsEnabled","onToggle","subscribeOnce","firstPlay","enterFullscreenOnInitialPlayback","clickTime","doubleClickTime","isAutoplayEnabled","now","Date","setTimeout","Warning","WarningCode","PLAYBACK_COULD_NOT_BE_STARTED","playback","autoplay","isAutoplayUpcoming","getSource","enabled","noTransitionAnimationsClass","hasClass","HugeReplayButton","listselector_1","ItemSelectionList","ListSelector","isActive","items","updateDomItems","selectedValue","selectedListItem","empty","listItem","CLASS_SELECTED","deselectItem","this_1","String","onItemSelectedEvent","onItemAddedEvent","selectedItem","onItemRemovedEvent","tagName","for","labelElement","localizedText","onTextChangedEvent","getText","clearText","isEmpty","labelEvents","onTextChanged","onItemAdded","addListBoxDomItem","onItemRemoved","removeListBoxDomItem","refreshSelectedItem","listBoxElement","createListBoxDomItems","buildListBoxItemButton","ListBoxItemButton","getComponentForKey","c","listBoxItemButton_1","newItem","getItemForKey","handleSelectionChange","onClass","offClass","getItemIndex","parseInt","getItems","sortedInsert","filter","translator","findIndex","entry","getSelectedItem","newItems","forEach","items_1","itemCount","keys","listSelectorEvents","MetadataLabelContent","MetadataLabel","init","content","Title","uiconfig","metadata","title","Description","description","toLowerCase","PictureInPictureToggleButton","pictureInPictureStateHandler","PictureInPicture","pictureInPictureAvailabilityChangedHandler","isPictureInPictureAvailable","PlaybackSpeedSelectBox","setDefaultValue","playbackSpeed","getPlaybackSpeed","setSpeed","addDefaultItems","setPlaybackSpeed","parseFloat","PlaybackSpeedChanged","speed","customItems","defaultPlaybackSpeeds","sort","PlaybackTimeLabelMode","PlaybackTimeLabel","minWidth","min-width","updateTimeFormatBasedOnDuration","live","liveCssClass","liveEdgeCssClass","liveClickHandler","timeShift","updateLiveTimeshiftState","isTimeshifted","isTimeshiftAvailable","getTimeShift","getMaxTimeShift","isPaused","playbackTimeHandler","hideInLivePlayback","unsubscribe","Infinity","setTime","getCurrentTimeRelativeToSeekableRange","width","timeFormat","abs","FORMAT_HHMMSS","FORMAT_MMSS","Ready","playbackSeconds","durationSeconds","secondsToTime","totalTime","timeLabelMode","CurrentTime","TotalTime","CurrentAndTotalTime","RemainingTime","remainingTime","setTimeFormat","handleClickEvent","playbackStateHandler","isSeeking","updateLiveState","isTimeShiftAvailable","CLASS_STOPTOGGLE","timeShiftDetector","PlaybackFinished","TimeShiftAvailabilityDetector","onTimeShiftAvailabilityChanged","onSeek","onSeeked","onAriaLabel","offAriaLabel","hugeplaybacktogglebutton_1","PlaybackToggleOverlay","playbackToggleButton","hugereplaybutton_1","RecommendationOverlay","setupRecommendations","clearRecommendations","recommendations","recommendations_1","RecommendationItem","itemConfig","replayButton","itemElement","href","background-image","thumbnail","bgElement","titleElement","timeElement","ReplayButton","hasEnded","groupplaybackapi_1","seekbarcontroller_1","timelinemarkershandler_1","seekbarbufferlevel_1","SeekBar","hasLabel","getLabel","setAriaSliderMinMax","setAriaSliderValues","ariaValueText","seekBarType","SeekBarType","Live","timeshiftValue","ceil","Vod","secondsToText","floor","getPlaybackPositionPercentage","getRelativeCurrentTime","updateBufferLevel","playbackPositionPercentage","bufferLoadedPercentageLevel","getMinBufferLevel","setBufferPosition","configureSeek","scrubbing","isPlayerSeeking","suspension","playbackPositionHandler","isGroupPlaybackAPIAvailable","hasTimeShift","switchVisibility","setPosition","seekBarBackdrop","SeekBarController","keyStepIncrements","volumeController","setSeekBarControls","forceUpdate","isUserSeeking","SegmentRequestFinished","setPlaybackPosition","isInInitialStartupState","smoothPlaybackPositionUpdateIntervalMs","SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED","isNeitherPausedNorPlaying","configureLivePausedTimeshiftUpdater","onPlayerSeek","setSeeking","onPlayerSeeked","groupPlayback","hasJoined","beginSuspension","GroupPlaybackSuspensionReason","UserIsScrubbing","onSeekPreview","enableSeekPreview","subscribeRateLimited","seekWhileScrubbing","percentage","proposedPlaybackTime","getTargetSeekPosition","endSuspension","refreshPlaybackPosition","smoothPlaybackPositionUpdater","timeShiftAvailable","PlayerResized","onConfigured","seekbarSnappingRange","snappingRange","setSeekPosition","configureSmoothPlaybackPositionUpdater","initializeTimelineMarkers","Volume","timelineMarkerConfig","timelineMarkersHandler","TimelineMarkersHandler","seekBar","seekBarMarkersContainer","pausedTimeshiftUpdater","startSmoothPlaybackPositionUpdater","currentTimeSeekBar","stopSmoothPlaybackPositionUpdater","currentTimePlayer","updateIntervalMs","PlayerAPINotAvailableError","currentTimeDelta","seekBarContainer","vertical","seekBarBufferLevel","seekBarPlaybackPosition","seekBarBufferPosition","seekBarPlaybackPositionMarker","seekBarSeekPosition","seekBarChapterMarkersContainer","seeking","mouseTouchMoveHandler","preventDefault","vr","stopPropagation","targetPercentage","getOffset","onSeekPreviewEvent","mouseTouchUpHandler","document","snappedChapter","getMarkerAtPosition","onSeekedEvent","position","isTouchEvent","isTouchSupported","onSeekEvent","getHorizontalOffset","eventPageX","elementOffsetPx","offset","left","widthPx","sanitizeOffset","getVerticalOffset","eventPageY","top","height","changedTouches","touches","pageY","pageX","MouseEvent","warn","percent","px","style","transform","-ms-transform","-webkit-transform","scale","CLASS_SEEKING","seekBarEvents","snappedMarker","seekPositionPercentage","marker","TouchEvent","seekableRangeStart","maxTimeShift","getSeekableRangeStart","targetPlaybackPosition","leftRight","upDown","playerDuration","videoBufferLength","getVideoBufferLength","audioBufferLength","getAudioBufferLength","bufferLength","Number","MAX_VALUE","coerceValueIntoRange","range","cb","arrowKeyControls","currentValue","valueUpdate","controlValue","right","up","down","home","end","seekBarControls","volumeTransition","startTransition","getVolume","finish","bind","domElement","controls","keyCode","KeyCode","LeftArrow","RightArrow","UpArrow","DownArrow","Home","End","Space","imageloader_1","SeekBarLabel","setTitleText","setThumbnail","uiManager","handleSeekPreview","timeLabel","seconds","titleLabel","thumbnailElement","thumbnailImageLoader","load","x","thumbnailCssSprite","thumbnailCssSingleImage","sizeX","sizeY","offsetX","offsetY","y","aspectRatio","padding-bottom","background-size","background-position","appliedMarkerCssClasses","targetTimeShift","currentTimeShift","timeShiftPreview","wallClockTime","getThumbnail","time","ImageLoader","selectElement","val","optionElement","NavigationDirection","settingspanelpage_1","hideHoveredSelectBoxes","hideTimeout","reset","activePage","onInactiveEvent","resetNavigation","onActiveEvent","getRootPage","onSettingsStateChanged","onSettingsStateChangedEvent","updateActivePageClass","getActivePage","setActivePageIndex","setActivePage","getPages","targetPage","navigateToPage","Forwards","pageTransitionAnimation","popToRootSettingsPanelPage","popSettingsPanelPage","navigationStack","Backwards","rootPageHasActiveSettings","hasActiveSettings","SettingsPanelPage","settingsPanelEvents","page","CLASS_ACTIVE_PAGE","resetNavigationOnShow","sourcePage","rootPage","animateNavigation","direction","skipAnimation","pop","settingsPanelDomElement","settingsPanelWidth","settingsPanelHeight","clone","targetSettingsPanelHeight","settingsPanelHTMLElement","get","scrollWidth","scrollHeight","targetPageHtmlElement","cloneNode","parentNode","appendChild","targetSettingsPanelWidth","parentElement","removeChild","forceBrowserReflow","offsetLeft","getComputedItems","selectBox_1","oldDisplay_1","setting","requestAnimationFrame","allItems","apply","videoqualityselectbox_1","audioqualityselectbox_1","playbackspeedselectbox_1","SettingsPanelItem","handleConfigItemChanged","minItemsToDisplay","VideoQualitySelectBox","hasAutoItem","playbackSpeedSelectionEnabled","onActiveChangedEvent","settingsPanelItemEvents","onActiveChanged","settingspanelitem_1","settingsStateChangedHandler","lastShownItem","CLASS_LAST","settingsPanelPageEvents","activeItems","onActive","isIOS","isMacIntel","focusToFirstInput","onInactive","settingspanelpagenavigatorbutton_1","SettingsPanelPageBackButton","SettingsPanelPageNavigatorButton","popPage","container","pushTargetPage","SettingsPanelPageOpenButton","SettingsToggleButton","settingsPanel","visibleSettingsPanels","autoHideWhenNoActiveSettings","settingsPanelItemsChangedHandler","subtitleutils_1","SubtitleListBox","SubtitleSwitchHandler","controlbar_1","vttutils_1","SubtitleOverlay","subtitleClearHandler","subtitleContainerManager","subtitleManager","clearInactiveCues","toRemove","removeLabel","ActiveSubtitleManager","SubtitleRegionContainerManager","CueEnter","generateLabel","cueEnter","preprocessLabelEventCallback","previewSubtitleActive","previewSubtitle","addLabel","size","forceSubtitlesIntoViewContainer","handleSubtitleCropping","CueUpdate","labelToReplace","cueUpdate","replaceLabel","CueExit","labelToRemove","cueExit","hasCues","SubtitleEnabled","SubtitleDisabled","CLASS_CONTROLBAR_VISIBLE","configureCea608Captions","detectCroppedSubtitleLabel","parent","childRect","getBoundingClientRect","parentRect","bottom","labelDomElement","cropDetection","removeCss","row","column","SubtitleLabel","generateImageTagText","image","vtt","region","regionStyle","updateCEA608FontSize","dummyLabel","font-size","line-height","visibility","dummyLabelCharWidth","dummyLabelCharHeight","fontSizeRatio","subtitleOverlayWidth","subtitleOverlayHeight","fontLetterSpacing","CEA608_NUM_COLUMNS","CEA608_NUM_ROWS","fontSize","letter-spacing","CLASS_CEA_608","fontSizeCalculationRequired","CEA608_COLUMN_OFFSET","CEA608_ROW_OFFSET","enablePreviewSubtitleLabel","removePreviewSubtitleLabel","calculateId","addCueToMap","popCueFromMap","activeSubtitleCueMap","activeSubtitleCueCount","activeSubtitleCues","activeSubtitleCue","removedCues","cue","imageData","imgTag","src","outerHTML","getCues","cueCount","getRegion","regionContainerId","regionName","overlaySize","subtitleRegionContainers","regionContainerId_1","regionContainer","SubtitleRegionContainer","subtitleOverlay","previousLabel","newLabel","labelToAdd","labelCount","VttUtils","setVttRegionStyles","setVttCueBoxStyles","SubtitleSelectBox","subtitlesettingselectbox_1","BackgroundColorSelectBox","SubtitleSettingSelectBox","setColorAndOpacity","settingsManager","backgroundColor","isSet","backgroundOpacity","toggleOverlayClass","onChanged","property","BackgroundOpacitySelectBox","CharacterEdgeSelectBox","characterEdge","FontColorSelectBox","fontColor","fontOpacity","FontFamilySelectBox","fontFamily","FontOpacitySelectBox","FontSizeSelectBox","currentCssClass","overlay","SubtitleSettingsLabel","opener","storageutils_1","SubtitleSettingsManager","propertyName","_properties","SubtitleSettingsProperty","windowColor","windowOpacity","userSettings","localStorageKey","DummyComponent","instance","save","StorageUtils","setObject","getObject","_instance","_value","onChangedEvent","_onChanged","_manager","manager","subtitlesettingsmanager_1","fontsizeselectbox_1","fontfamilyselectbox_1","fontcolorselectbox_1","fontopacityselectbox_1","characteredgeselectbox_1","backgroundcolorselectbox_1","backgroundopacityselectbox_1","windowcolorselectbox_1","windowopacityselectbox_1","subtitlesettingsresetbutton_1","settingspanelpagebackbutton_1","SubtitleSettingsPanelPage","WindowColorSelectBox","WindowOpacitySelectBox","SubtitleSettingsResetButton","getSeekBarWidth","markersContainer","timelineMarkers","configureMarkers","clearMarkers","AdBreakStarted","AdBreakFinished","updateMarkers","updateMarkersDOM","onRelease","intervalMarkerMatch","positionMarkerMatch","removeMarkerFromConfig","markers","_marker","filterRemovedMarkers","seekbarMarker","matchingMarker","removeMarkerFromDOM","shouldProcessMarkers","validToProcess","hasMarkers","markerPosition","markerDuration","getSeekableRangeRespectingLive","isNaN","updateMarkerDOM","newMarker","createMarkerDOM","getMarkerCssProperties","seekBarWidthPx","positionInPx","cssProperties","markerWidthPx","round","imageElement_1","markerClasses","markerElement","data-marker-time","data-marker-title","imageUrl","handler","Destroy","metadatalabel_1","TitleBar","shouldBeShown","hasMetadataText","checkMetadataTextAndUpdateVisibility","keepHiddenWithoutMetadata","isOff","onState","onToggleEvent","onToggleOnEvent","isOn","onToggleOffEvent","toggle","toggleButtonEvents","onToggleOn","onToggleOff","canvas","canvasElement","canvasContext","getContext","noiseAnimationWindowPos","canvasHeight","lastFrameUpdate","canvasWidth","renderFrame","useAnimationFrame","cancelAnimationFrame","clearTimeout","frameUpdateHandlerId","frameInterval","getTime","currentPixelOffset","noiseImage","createImageData","random","interferenceHeight","putImageData","scheduleNextRender","userInteractionEventSource","configureUIShowHide","configurePlayerStates","isFirstTouch","playerState","hidingPrevented","hidePlayerStateExceptions","uiHideTimeout","hideUi","previewHideEventArgs","userInteractionEvents","playerStateChange","state","enumName","stateClassNames","PlayerState","STATE_PREFIX","updateState","removeStates","updateLayoutSizeClasses","Idle","Prepared","Finished","getState","FULLSCREEN","BUFFERING","REMOTE_CONTROL","CONTROLS_HIDDEN","CONTROLS_SHOWN","substring","getContainer","createElement","flex","updateVideoQualities","videoQualities","getAvailableVideoQualities","hasAuto","getStreamType","videoQualities_1","videoQuality","selectCurrentVideoQuality","getVideoQuality","setVideoQuality","VideoQualityChanged","VideoQualityAdded","VideoQualityRemoved","volumeslider_1","volumetogglebutton_1","VolumeControlButton","volumeToggleButton","getVolumeToggleButton","volumeSlider","getVolumeSlider","volumeSliderHovered","volumeSliderHideTimeout","VolumeToggleButton","VolumeSlider","seekbar_1","setVolumeAriaSliderValues","hideIfVolumeControlProhibited","detectVolumeControlAvailability","muted","volume","updateVolumeWhileScrubbing","dummyVideoElement","update","volumeLevelTens","toggleMuted","VRToggleButton","vrStateHandler","ev","VR_RENDERING_ERROR","isVRConfigured","isVRStereoAvailable","getStereo","vrButtonVisibilityHandler","source","VRStereoChanged","setStereo","Watermark","vrtogglebutton_1","settingstogglebutton_1","playbacktimelabel_1","airplaytogglebutton_1","errormessageoverlay_1","casttogglebutton_1","fullscreentogglebutton_1","recommendationoverlay_1","caststatusoverlay_1","watermark_1","subtitleoverlay_1","seekbarlabel_1","playbacktoggleoverlay_1","pictureinpicturetogglebutton_1","uimanager_1","titlebar_1","bufferingoverlay_1","subtitlelistbox_1","audiotracklistbox_1","uifactory_1","DemoFactory","buildDemoWithSeparateAudioSubtitlesButtons","subtitleListBox","audioTrackListBox","UIManager","ui","UIFactory","modernSmallScreenAdsUI","condition","context","documentWidth","isAd","adRequiresUi","modernAdsUI","modernSmallScreenUI","radioModeAvailable","subtitleSettingsPanel","audioTrackSettingsPanel","controlBar","something","attributes","Array","HTMLElement","elements","Document","attributeName","attributeValue","setAttribute","findChildElements","findChildElementsOfElement","selector","childElements","querySelectorAll","allChildElements","inputElements","focus","scrollTo","arguments","setHtml","getHtml","innerHTML","HTMLSelectElement","HTMLInputElement","attribute","setAttr","getAttr","removeAttr","removeAttribute","getAttribute","dataAttribute","setData","getData","childElement","elementRect","htmlRect","body","offsetWidth","offsetHeight","eventName","eventHandler","split","addEventListener","removeEventListener","className","classNames","classList","add","replace","RegExp","contains","propertyNameOrCollection","setCss","getCss","setCssCollection","elementIndex","removeProperty","getComputedStyle","ruleValueCollection","defaultErrorMessages","1000","1001","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1200","1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1300","1301","1302","1303","1304","1400","1401","1402","1403","1404","2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014","2100","2101","3000","3001","3002","3003","3004","3100","listeners","listener","EventListenerWrapper","rateMs","RateLimitedEventListenerWrapper","subscribedListener","unsubscribeAll","listenersToRemove","listeners_1","fire","isOnce","listenersToRemove_1","eventListener","once","shouldFireEvent","rateLimitTimout","fireSuper","rateLimitingEventListener","startRateLimiting","lastSeenEvent","FocusVisibleCssClassName","FocusVisibilityTracker","bitmovinUiPrefix","lastInteractionWasKeyboard","onKeyDown","metaKey","altKey","ctrlKey","onMouseOrPointerOrTouch","onFocus","isHtmlElement","onBlur","eventHandlerMap","mousedown","pointerdown","touchstart","keydown","blur","registerEventListeners","DOMTokenList","event_1","unregisterEventListeners","event_2","guid","loadedCallback","state_1","loaded","callLoadedCallback","de_json_1","__importDefault","en_json_1","es_json_1","defaultLocalizationConfig","defaultVocabularies","en","default","de","es","language","vocabularies","I18n","setConfig","mergedConfig","detectBrowserLanguage","mergeVocabulariesWithDefaultVocabularies","initializeLanguage","initializeVocabulary","containsLanguage","hasOwnProperty","rawVocabularies","reduce","mergedVocabularies","vocabulary","browserLanguageDetectionEnabled","userLanguage","shortenedUserLanguage","vocab","lang","replaceVariableWithPlaceholderIfExists","matches","match","m","str","vocabularyString","settings.video.quality","settings.audio.quality","settings.audio.track","playPause","close","settings.audio.mute","settings.audio.volume","pictureInPicture","appleAirplay","googleCast","settings","fullscreen","settings.subtitles","settings.subtitles.font.size","settings.subtitles.font.family","settings.subtitles.font.color","settings.subtitles.font.opacity","settings.subtitles.characterEdge","settings.subtitles.background.color","settings.subtitles.background.opacity","settings.subtitles.window.color","settings.subtitles.window.opacity","settings.time.hours","settings.time.minutes","settings.time.seconds","back","replay","ads.remainingTime","colors.white","colors.black","colors.red","colors.green","colors.blue","colors.yellow","subtitle.example","subtitle.select","playingOn","connectingTo","watermarkLink","seekBar.value","seekBar.timeshift","seekBar.durationText","colors.cyan","colors.magenta","settings.subtitles.characterEdge.raised","settings.subtitles.characterEdge.depressed","settings.subtitles.characterEdge.uniform","settings.subtitles.characterEdge.dropshadowed","settings.subtitles.font.family.monospacedserif","settings.subtitles.font.family.proportionalserif","settings.subtitles.font.family.monospacedsansserif","settings.subtitles.font.family.proportionalsansserif","settings.subtitles.font.family.casual","settings.subtitles.font.family.cursive","settings.subtitles.font.family.smallcapital","auto","normal","version","enumerable","UIInstanceManager","demofactory_1","spatialnavigation_1","navigationgroup_1","SpatialNavigation","rootnavigationgroup_1","NavigationGroup","ListNavigationGroup_1","RootNavigationGroup","ListNavigationGroup","ListOrientation","itemselectionlist_1","audiotrackselectbox_1","subtitleselectbox_1","volumecontrolbutton_1","adskipbutton_1","admessagelabel_1","adclickoverlay_1","castuicontainer_1","closebutton_1","subtitlesettingslabel_1","settingspanelpageopenbutton_1","subtitlesettingspanelpage_1","replaybutton_1","TypeError","timeShiftAvailabilityChangedEvent","liveDetector","liveChangedEvent","isAndroid","isChrome","DurationChanged","defaultValue","getSeekableRange","currentTimeshift","maxTimeshift","timeShiftAvailableNow","liveNow","types_1","handleAction","action","Action","SELECT","BACK","handleNavigation","listNavigationDirections","orientation","__spreadArray","Vertical","Direction","UP","DOWN","Horizontal","LEFT","RIGHT","typeguards_1","getHtmlElementsFromComponents","htmlElements","resolveAllComponents","childComponents","containerOrComponent","isContainer","isComponent","isListBox","children","TizenKeyMap","isApplicable","isTizen","keyCodes","38","40","37","39","13","10009","WebOsKeyMap","isWebOs","461","PlayStationKeyMap","isPlayStation","27","AndroidKeyMap","19","20","21","22","23","66","4","HisenseKeyMap","8","DefaultKeyMap","getKeyMapForPlatform","applicableKeyMap","keyMap","vector","sqrt","pow","getElementVector","boundingRect","getBoundingRectFromElement","calculateAngle","b","directionVector","len","elementVector","angleCos","acos","PI","getElementInDirection","activeElement","activeElemVector","elem","dist","angle","_b","angleA","distA","navigationalgorithm_1","gethtmlelementsfromcomponents_1","nodeeventsubscriber_1","removeElementHoverEventListeners","eventSubscriber","NodeEventSubscriber","getActiveElement","focusElement","blurActiveElement","focusFirstElement","defaultNavigationHandler","targetElement","defaultActionHandler","click","handleInput","defaultHandler","userHandler","handleDefault","onNavigation","activeElementBeforeDisable","onAction","isSettingsPanel","trackElementHover","removeEventListenerFunctions","htmlElem","exitListener","enterListener","fn","attachedListeners","Map","getEventListenersOfType","has","set","node","options","listenersOfType","listenerIndex","otherNode","otherListener","otherOptions","SeekBarHandler","rootNavigationGroup","cursorPosition","isScrubbing","scrubSpeedPercentage","isSeekBarWrapper","stopSeeking","getSeekBar","initializeOrUpdateCursorPosition","dispatchMouseMoveEvent","dispatchMouseClickEvent","from","seekBarWrapper","updateScrubSpeedPercentage","scrubSpeedResetTimeout","getIncrement","increment","resetCursorPosition","updateCursorPosition","initializeCursorPosition","playbackPositionMarker","querySelector","rect","startX","startY","getCursorPositionMouseEventInit","clientX","clientY","dispatchEvent","mouseDownHandler","mouseEventInit","dispatchMouseLeaveEvent","seekbarhandler_1","keymap_1","navigationGroups","group","activeNavigationGroups","updateEnabledNavigationGroup","groupIndex","other","handleKeyEvent","getActiveNavigationGroup","isDirection","isAction","seekBarHandler","unsubscribeVisibilityChangesFns","subscribeToNavigationGroupVisibilityChanges","attachKeyEventHandler","enableDefaultNavigationGroup","onShowHandler","onHideHandler","unsubscribeFromNavigationGroupVisibilityChanges","unsub","groupToEnable","idx","obj","values","hasLocalStorageCache","setItem","hasLocalStorage","localStorage","getItem","storage","DOMException","json","parse","totalSeconds","format","isNegative","hours","minutes","leftPadWithZeros","num","substr","adMessage","adMessagePlaceholderRegex","formatString","leadingZeroes","numDecimalPlaces","leadingZeroesMatches","decimalPlacesMatches","timeString","toFixed","currentSubtitle","SUBTITLES_OFF_KEY","subtitles","list","subtitle","SubtitleAdded","addSubtitle","selectCurrentSubtitle","SubtitleRemoved","removeSubtitle","clearSubtitles","refreshSubtitles","offListItem","delay","callback","repeat","timeoutOrIntervalId","clearInternal","setInterval","clearInterval","radiomodetogglebutton_1","playbackjumpoverlay_1","modernUI","mainSettingsPanelPage","subtitleSettingsPanelPage","subtitleSelectBox","subtitleSettingsOpenButton","containerComponents","titleBarComponents","modernCastReceiverUI","modernTvUI","subtitleListPanel","audioTrackListPanel","playbackToggleOverlay","subtitleToggleButton","audioToggleButton","uiContainer","spatialNavigation","modernRadioModeUI","buildDefaultUI","buildModernUI","buildDefaultSmallScreenUI","buildModernSmallScreenUI","buildDefaultCastReceiverUI","buildModernCastReceiverUI","buildDefaultTvUI","buildModernTvUI","isRadioModeActive","isRadioModeAvailable","buildModernRadioModeUI","volumecontroller_1","focusvisibilitytracker_1","playerUiOrUiVariants","onUiVariantResolve","onActiveUiChanged","uiVariants","managerPlayerWrapper","PlayerWrapper","autoUiVariantResolve","VolumeController","getPlayer","available","resolveUiVariant","updateConfig","playerSourceConfig","playerSourceUiConfig","updateSource","wrappedPlayer","uiVariantsWithoutCondition","PlaylistTransition","uiContainerElement","uiInstanceManagers","uiVariant","InternalUIInstanceManager","adStartedEvent","isLinear","requestsUi","currentUi","getWrappedPlayer","fireEventInUI","focusVisibilityTracker","localize","setLocalizationConfig","localizationConfig","getUiVariants","switchToUiVariant","uiVariantIndex","previousUi","nextUi","getUI","isConfigured","addUi","defaultContext","isFullscreen","clientWidth","switchingContext","nextUiVariant","matchesCondition","dom","configureControls","releaseUi","releaseControls","clearEventHandlers","uiInstanceManager","getTimelineMarkers","addTimelineMarker","timelineMarker","removeTimelineMarker","playerWrapper","configureControlsTree","configured","configuredComponents","configuredComponents_1","constructor","releaseControlsTree","released","isReleased","childComponent","wrapper","eventHandlers","eventType","objectProtoPropertyNames","getOwnPropertyNames","getPrototypeOf","namesToIgnore","methods","properties","members_1","names","newNames","member","methods_1","method","properties_1","propertyDescriptor","propertyDescriptor_1","getOwnPropertyDescriptor","playerEventData","timestamp","uiSourced","visit","recursiveTreeWalker","setVolume","issuerName","setMuted","mute","unmute","isMuted","recallVolume","storeVolume","storedVolume","VolumeTransition","playerMuted","playerVolume","uiMuted","uiVolume","VolumeChanged","Muted","Unmuted","controller","setCueBoxPositionForVerticalWriting","cueContainerDom","subtitleOverlaySize","writingMode","Right","Top","setVttLine","setVttPositionAlign","positionAlign","DirectionPair","VttVerticalWriting","defaultLineNumber","Bottom","Left","setVttLineAlign","relativeCueBoxPosition","lineAlign","setCssForCenterLineAlign","subtitleOverLaySize","targetLine","relativeLinePosition","overlayReferenceEdge","line","snapToLines","cueContainer","GrowingRight","GrowingLeft","textAlign","align","containerSize","regionContainerDom","regionPositionX","viewportAnchorX","regionAnchorX","regionPositionY","viewportAnchorY","lines","regionAnchorY"],"mappings":"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","file":"bitmovinplayer-ui.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { PlayerAPI, PlayerEvent } from 'bitmovin-player';\nimport { Button, ButtonConfig } from '../../../ts/components/button';\nimport { UIInstanceManager } from '../../../ts/uimanager';\n\ndeclare const window: any;\n\ninterface GoBackButtonConfig extends ButtonConfig {\n  error?: boolean;\n}\n\nexport class GoBackButton extends Button<ButtonConfig> {\n  constructor(config: GoBackButtonConfig = { error: false }) {\n    super(config);\n\n    const defaultConfig: ButtonConfig = {\n      cssClasses: config.error ? ['ui-gobackbutton', 'ui-gobackbutton-error'] : ['ui-gobackbutton'],\n      text: 'Go Back',\n      ariaLabel: 'Go Back',\n    };\n\n    this.config = this.mergeConfig(config, defaultConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      window.bitmovin.customMessageHandler.sendAsynchronous('goBack');\n    });\n\n    player.on(player.exports.PlayerEvent.ViewModeChanged, () => {\n      player.getViewMode() === 'fullscreen' ? this.hide() : this.show();\n    });\n  }\n}\n","import { Button, ButtonConfig } from '../../../ts/components/button';\nimport { UIInstanceManager } from '../../../ts/uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../../ts/localization/i18n';\nimport { PlayerUtils } from '../../../ts/playerutils';\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\n\nexport interface PlaybackJumpButtonsConfig extends ButtonConfig {\n  skipTime: number; // in seconds\n}\n\nexport class PlaybackJumpButtons extends Button<PlaybackJumpButtonsConfig> {\n\n  constructor(config: PlaybackJumpButtonsConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbackjumpbuttons',\n      text: config.text,\n      ariaLabel: config.ariaLabel,\n      skipTime: 0,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(\n      player,\n      uimanager,\n    );\n    liveStreamDetector.onLiveChanged.subscribe(\n      (sender, args: LiveStreamDetectorEventArgs) => {\n        if (player.isLive()) {\n          this.hide();\n        } else {\n          uimanager.onControlsShow.subscribe(() => {\n            this.show();\n          });\n\n          uimanager.onControlsHide.subscribe(() => {\n            this.hide();\n          });\n        }\n      },\n    );\n    liveStreamDetector.detect();\n\n    this.onClick.subscribe(() => {\n      const currentTime = player.getCurrentTime();\n      const duration = player.getDuration();\n\n      if (!player.isLive()) {\n        let newTime = currentTime + this.config.skipTime;\n        newTime = Math.max(0, Math.min(newTime, duration));\n        player.seek(newTime, 'ui');\n      }\n    });\n  }\n}\n\nexport class PlaybackForwardButton extends PlaybackJumpButtons {\n  constructor(config: PlaybackJumpButtonsConfig) {\n    super({\n      ...config,\n      cssClass: 'ui-playbackforwardbutton',\n      text: i18n.getLocalizer('forward'),\n      ariaLabel: i18n.getLocalizer('forward'),\n    });\n  }\n}\n\nexport class PlaybackRewindButton extends PlaybackJumpButtons {\n  constructor(config: PlaybackJumpButtonsConfig) {\n    super({\n      ...config,\n      cssClass: 'ui-playbackrewindbutton',\n      text: i18n.getLocalizer('rewind'),\n      ariaLabel: i18n.getLocalizer('rewind'),\n    });\n  }\n}\n","import {Container, ContainerConfig} from '../../../ts/components/container';\nimport {PlaybackForwardButton, PlaybackRewindButton} from './playbackjumpbutton';\n\nexport interface PlaybackJumpControlsOverlayConfig extends ContainerConfig {}\n\n/**\n * Overlay containing the playback forward and rewind buttons.\n */\nexport class PlaybackJumpControlsOverlay extends Container<PlaybackJumpControlsOverlayConfig> {\n\n  private forwardButton: PlaybackForwardButton;\n  private rewindButton: PlaybackRewindButton;\n\n  constructor(config: PlaybackJumpControlsOverlayConfig = {}) {\n    super(config);\n\n    this.forwardButton = new PlaybackForwardButton({ skipTime: 10 });\n    this.rewindButton = new PlaybackRewindButton({ skipTime: -10 });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbackforward-overlay',\n      components: [this.forwardButton, this.rewindButton],\n    }, this.config);\n  }\n}\n","import { PlayerAPI } from 'bitmovin-player';\nimport { ToggleButton, ToggleButtonConfig } from '../../../../ts/components/togglebutton';\nimport { UIInstanceManager } from '../../../../ts/uimanager';\n\ndeclare const window: any;\n\nexport interface RadioModeToggleButtonConfig extends ToggleButtonConfig {\n  /**\n   * Decides the initial state of the toggle button\n   * Default: false\n   */\n  active: boolean;\n}\n\nexport class RadioModeToggleButton extends ToggleButton<RadioModeToggleButtonConfig> {\n  constructor(config: RadioModeToggleButtonConfig) {\n    super(config);\n\n    const defaultConfig: RadioModeToggleButtonConfig = {\n      cssClass: config.active ? 'ui-closebutton' : 'ui-radiomodetogglebutton',\n      text: 'Radio Mode',\n      ariaLabel: 'Radio Mode',\n      active: false,\n    };\n\n    this.config = this.mergeConfig(config, defaultConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      const initialState = this.config.active;\n      if (window.bitmovin.customMessageHandler) {\n        window.bitmovin.customMessageHandler.sendAsynchronous(\n          'radioModeChanged',\n          JSON.stringify({\n            initialState,\n            activated: !this.config.active,\n          }),\n        );\n      }\n    });\n  }\n}\n","export namespace ArrayUtils {\n  /**\n   * Removes an item from an array.\n   * @param array the array that may contain the item to remove\n   * @param item the item to remove from the array\n   * @returns {any} the removed item or null if it wasn't part of the array\n   */\n  export function remove<T>(array: T[], item: T): T | null {\n    let index = array.indexOf(item);\n\n    if (index > -1) {\n      return array.splice(index, 1)[0];\n    } else {\n      return null;\n    }\n  }\n}\n","import { ListItem, ListSelector, ListSelectorConfig } from './components/listselector';\nimport { UIInstanceManager } from './uimanager';\nimport { AudioTrackEvent, PlayerAPI, AudioTrack } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\n/**\n * Helper class to handle all audio tracks related events\n *\n * This class listens to player events as well as the `ListSelector` event if selection changed\n */\nexport class AudioTrackSwitchHandler {\n\n  private player: PlayerAPI;\n  private listElement: ListSelector<ListSelectorConfig>;\n  private uimanager: UIInstanceManager;\n\n  constructor(player: PlayerAPI, element: ListSelector<ListSelectorConfig>, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.listElement = element;\n    this.uimanager = uimanager;\n\n    this.bindSelectionEvent();\n    this.bindPlayerEvents();\n    this.refreshAudioTracks();\n  }\n\n  private bindSelectionEvent(): void {\n    this.listElement.onItemSelected.subscribe((_, value: string) => {\n      this.player.setAudio(value);\n    });\n  }\n\n  private bindPlayerEvents(): void {\n    // Update selection when selected track has changed\n    this.player.on(this.player.exports.PlayerEvent.AudioChanged, this.selectCurrentAudioTrack);\n    // Update tracks when source goes away\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.refreshAudioTracks);\n    // Update tracks when the period within a source changes\n    this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshAudioTracks);\n    // Update tracks when a track is added or removed\n    this.player.on(this.player.exports.PlayerEvent.AudioAdded, this.addAudioTrack);\n    this.player.on(this.player.exports.PlayerEvent.AudioRemoved, this.removeAudioTrack);\n    this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshAudioTracks);\n  }\n\n  private addAudioTrack = (event: AudioTrackEvent) => {\n    const audioTrack = event.track;\n    if (!this.listElement.hasItem(audioTrack.id)) {\n      this.listElement.addItem(audioTrack.id, i18n.getLocalizer(audioTrack.label), true);\n    }\n  };\n\n  private removeAudioTrack = (event: AudioTrackEvent) => {\n    const audioTrack = event.track;\n    if (this.listElement.hasItem(audioTrack.id)) {\n      this.listElement.removeItem(audioTrack.id);\n    }\n  };\n\n  private selectCurrentAudioTrack = () => {\n    let currentAudioTrack = this.player.getAudio();\n\n    // HLS streams don't always provide this, so we have to check\n    if (currentAudioTrack) {\n      this.listElement.selectItem(currentAudioTrack.id);\n    }\n  };\n\n  private refreshAudioTracks = () => {\n    const audioTracks = this.player.getAvailableAudio();\n    const audioTrackToListItem = (audioTrack: AudioTrack): ListItem => {\n      return { key: audioTrack.id, label: audioTrack.label };\n    };\n\n    this.listElement.synchronizeItems(audioTracks.map(audioTrackToListItem));\n    this.selectCurrentAudioTrack();\n  };\n}\n","declare global {\n  interface Navigator {\n    msMaxTouchPoints?: number;\n  }\n}\n\nexport class BrowserUtils {\n  // isMobile only needs to be evaluated once (it cannot change during a browser session)\n  // Mobile detection according to Mozilla recommendation: \"In summary, we recommend looking for the string “Mobi”\n  // anywhere in the User Agent to detect a mobile device.\"\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n  static get isMobile(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Mobi/.test(navigator.userAgent);\n  }\n\n  static get isChrome(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Chrome/.test(navigator.userAgent);\n  }\n\n  static get isAndroid(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Android/.test(navigator.userAgent) && !this.isHisense;\n  }\n\n  static get isIOS(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /iPad|iPhone|iPod/.test(navigator.userAgent);\n  }\n\n  static get isMacIntel(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && navigator.platform === 'MacIntel';\n  }\n\n  static get isHisense(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Hisense/.test(navigator.userAgent);\n  }\n\n  static get isPlayStation(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /PlayStation/i.test(navigator.userAgent);\n  }\n\n  static get isWebOs(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return (\n      navigator &&\n      navigator.userAgent &&\n      (navigator.userAgent.includes('Web0S') || navigator.userAgent.includes('NetCast'))\n    );\n  }\n\n  static get isTizen(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Tizen/.test(navigator.userAgent);\n  }\n\n  // https://hacks.mozilla.org/2013/04/detecting-touch-its-the-why-not-the-how/\n  static get isTouchSupported() {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return 'ontouchstart' in window || navigator && navigator.userAgent && (navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0);\n  }\n\n  private static windowExists(): boolean {\n    return typeof window !== 'undefined';\n  }\n}\n","import { ClickOverlay } from './clickoverlay';\nimport { UIInstanceManager } from '../uimanager';\nimport { Ad, AdEvent, PlayerAPI } from 'bitmovin-player';\n\n/**\n * A simple click capture overlay for clickThroughUrls of ads.\n */\nexport class AdClickOverlay extends ClickOverlay {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let clickThroughCallback: () => void = null;\n\n    player.on(player.exports.PlayerEvent.AdStarted, (event: AdEvent) => {\n      let ad = event.ad;\n      this.setUrl(ad.clickThroughUrl);\n      clickThroughCallback = ad.clickThroughUrlOpened;\n    });\n\n    // Clear click-through URL when ad has finished\n    let adFinishedHandler = () => {\n      this.setUrl(null);\n    };\n\n    player.on(player.exports.PlayerEvent.AdFinished, adFinishedHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adFinishedHandler);\n    player.on(player.exports.PlayerEvent.AdError, adFinishedHandler);\n\n    this.onClick.subscribe(() => {\n      // Pause the ad when overlay is clicked\n      player.pause('ui-ad-click-overlay');\n\n      if (clickThroughCallback) {\n        clickThroughCallback();\n      }\n    });\n  }\n}\n","import {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport { AdEvent, LinearAd, PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A label that displays a message about a running ad, optionally with a countdown.\n */\nexport class AdMessageLabel extends Label<LabelConfig> {\n\n  constructor(config: LabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-label-ad-message',\n      text: i18n.getLocalizer('ads.remainingTime') ,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let text = config.text;\n\n    let updateMessageHandler = () => {\n      this.setText(StringUtils.replaceAdMessagePlaceholders(i18n.performLocalization(text), null, player));\n    };\n\n    let adStartHandler = (event: AdEvent) => {\n      let uiConfig = (event.ad as LinearAd).uiConfig;\n      text = uiConfig && uiConfig.message || config.text;\n\n      updateMessageHandler();\n\n      player.on(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);\n    };\n\n    let adEndHandler = () => {\n      player.off(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);\n    };\n\n    player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdError, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);\n  }\n}","import { ButtonConfig, Button } from './button';\nimport { UIInstanceManager } from '../uimanager';\nimport { StringUtils } from '../stringutils';\nimport { AdEvent, LinearAd, PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for the {@link AdSkipButton}.\n */\nexport interface AdSkipButtonConfig extends ButtonConfig {\n  /**\n   * Message which gets displayed during the countdown is active.\n   * Supported placeholders: look at {@link StringUtils.replaceAdMessagePlaceholders}\n   */\n  untilSkippableMessage?: string;\n  /**\n   * Message displayed when the ad is skippable.\n   * Supported placeholders: look at {@link StringUtils.replaceAdMessagePlaceholders}\n   */\n  skippableMessage?: string;\n}\n\n/**\n * A button that is displayed during ads and can be used to skip the ad.\n */\nexport class AdSkipButton extends Button<AdSkipButtonConfig> {\n\n  constructor(config: AdSkipButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <AdSkipButtonConfig>{\n      cssClass: 'ui-button-ad-skip',\n      untilSkippableMessage: 'Skip ad in {remainingTime}',\n      skippableMessage: 'Skip ad',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let untilSkippableMessage = config.untilSkippableMessage;\n    let skippableMessage = config.skippableMessage;\n    let skipOffset = -1;\n\n    let updateSkipMessageHandler = () => {\n      this.show();\n\n      // Update the skip message on the button\n      if (player.getCurrentTime() < skipOffset) {\n        this.setText(StringUtils.replaceAdMessagePlaceholders(untilSkippableMessage, skipOffset, player));\n        this.disable();\n      } else {\n        this.setText(skippableMessage);\n        this.enable();\n      }\n    };\n\n    let adStartHandler = (event: AdEvent) => {\n      let ad = event.ad as LinearAd;\n      skipOffset = ad.skippableAfter;\n      untilSkippableMessage = ad.uiConfig && ad.uiConfig.untilSkippableMessage || config.untilSkippableMessage;\n      skippableMessage = ad.uiConfig && ad.uiConfig.skippableMessage || config.skippableMessage;\n\n      // Display this button only if ad is skippable.\n      // Non-skippable ads will return -1 for skippableAfter for player version < v8.3.0.\n      if (typeof skipOffset === 'number' && skipOffset >= 0) {\n        updateSkipMessageHandler();\n        player.on(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);\n      } else {\n        this.hide();\n      }\n    };\n\n    let adEndHandler = () => {\n      player.off(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);\n    };\n\n    player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdError, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);\n\n    this.onClick.subscribe(() => {\n      // Try to skip the ad (this only works if it is skippable so we don't need to take extra care of that here)\n      player.ads.skip();\n    });\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles Apple AirPlay.\n */\nexport class AirPlayToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-airplaytogglebutton',\n      text: i18n.getLocalizer('appleAirplay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    if (!player.isAirplayAvailable) {\n      // If the player does not support Airplay (player 7.0), we just hide this component and skip configuration\n      this.hide();\n      return;\n    }\n\n    this.onClick.subscribe(() => {\n      if (player.isAirplayAvailable()) {\n        player.showAirplayTargetPicker();\n      } else {\n        if (console) {\n          console.log('AirPlay unavailable');\n        }\n      }\n    });\n\n    const airPlayAvailableHandler = () => {\n      if (player.isAirplayAvailable()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    const airPlayChangedHandler = () => {\n      if (player.isAirplayActive()) {\n        this.on();\n      } else {\n        this.off();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.AirplayAvailable, airPlayAvailableHandler);\n    player.on(player.exports.PlayerEvent.AirplayChanged, airPlayChangedHandler);\n\n    // Startup init\n    airPlayAvailableHandler(); // Hide button if AirPlay is not available\n    airPlayChangedHandler();\n  }\n}","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between 'auto' and the available audio qualities.\n */\nexport class AudioQualitySelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-audioqualityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let selectCurrentAudioQuality = () => {\n      this.selectItem(player.getAudioQuality().id);\n    };\n\n    let updateAudioQualities = () => {\n      let audioQualities = player.getAvailableAudioQualities();\n\n      this.clearItems();\n\n      // Add entry for automatic quality switching (default setting)\n      this.addItem('auto', i18n.getLocalizer('auto'));\n\n      // Add audio qualities\n      for (let audioQuality of audioQualities) {\n        this.addItem(audioQuality.id, audioQuality.label);\n      }\n\n      // Select initial quality\n      selectCurrentAudioQuality();\n    };\n\n    this.onItemSelected.subscribe((sender: AudioQualitySelectBox, value: string) => {\n      player.setAudioQuality(value);\n    });\n\n    // Update qualities when audio track has changed\n    player.on(player.exports.PlayerEvent.AudioChanged, updateAudioQualities);\n    // Update qualities when source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, updateAudioQualities);\n    // Update qualities when the period within a source changes\n    player.on(player.exports.PlayerEvent.PeriodSwitched, updateAudioQualities);\n    // Update quality selection when quality is changed (from outside)\n    player.on(player.exports.PlayerEvent.AudioQualityChanged, selectCurrentAudioQuality);\n    if ((player.exports.PlayerEvent as any).AudioQualityAdded) {\n      // Update qualities when their availability changed\n      // TODO: remove any cast after next player release\n      player.on((player.exports.PlayerEvent as any).AudioQualityAdded, updateAudioQualities);\n      player.on((player.exports.PlayerEvent as any).AudioQualityRemoved, updateAudioQualities);\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(updateAudioQualities);\n  }\n}","import {ListBox} from './listbox';\nimport {UIInstanceManager} from '../uimanager';\nimport {AudioTrackSwitchHandler} from '../audiotrackutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A element that is similar to a select box where the user can select a subtitle\n */\nexport class AudioTrackListBox extends ListBox {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n    new AudioTrackSwitchHandler(player, this, uimanager);\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport {AudioTrackSwitchHandler} from '../audiotrackutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A select box providing a selection between available audio tracks (e.g. different languages).\n */\nexport class AudioTrackSelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-audiotrackselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new AudioTrackSwitchHandler(player, this, uimanager);\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {Component, ComponentConfig} from './component';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for the {@link BufferingOverlay} component.\n */\nexport interface BufferingOverlayConfig extends ContainerConfig {\n  /**\n   * Delay in milliseconds after which the buffering overlay will be displayed. Useful to bypass short stalls without\n   * displaying the overlay. Set to 0 to display the overlay instantly.\n   * Default: 1000ms (1 second)\n   */\n  showDelayMs?: number;\n}\n\n/**\n * Overlays the player and displays a buffering indicator.\n */\nexport class BufferingOverlay extends Container<BufferingOverlayConfig> {\n\n  private indicators: Component<ComponentConfig>[];\n\n  constructor(config: BufferingOverlayConfig = {}) {\n    super(config);\n\n    this.indicators = [\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),\n    ];\n\n    this.config = this.mergeConfig(config, <BufferingOverlayConfig>{\n      cssClass: 'ui-buffering-overlay',\n      hidden: true,\n      components: this.indicators,\n      showDelayMs: 1000,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    let overlayShowTimeout = new Timeout(config.showDelayMs, () => {\n      this.show();\n    });\n\n    let showOverlay = () => {\n      overlayShowTimeout.start();\n    };\n\n    let hideOverlay = () => {\n      overlayShowTimeout.clear();\n      this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.StallStarted, showOverlay);\n    player.on(player.exports.PlayerEvent.StallEnded, hideOverlay);\n    player.on(player.exports.PlayerEvent.Play, showOverlay);\n    player.on(player.exports.PlayerEvent.Playing, hideOverlay);\n    player.on(player.exports.PlayerEvent.Paused, hideOverlay);\n    player.on(player.exports.PlayerEvent.Seek, showOverlay);\n    player.on(player.exports.PlayerEvent.Seeked, hideOverlay);\n    player.on(player.exports.PlayerEvent.TimeShift, showOverlay);\n    player.on(player.exports.PlayerEvent.TimeShifted, hideOverlay);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, hideOverlay);\n\n    // Show overlay if player is already stalled at init\n    if (player.isStalled()) {\n      this.show();\n    }\n  }\n}\n","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {EventDispatcher, NoArgs, Event} from '../eventdispatcher';\nimport { LocalizableText , i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Button} component.\n */\nexport interface ButtonConfig extends ComponentConfig {\n  /**\n   * The text as string or localize callback on the button.\n   */\n  text?: LocalizableText;\n}\n\n/**\n * A simple clickable button.\n */\nexport class Button<Config extends ButtonConfig> extends Component<Config> {\n\n  private buttonEvents = {\n    onClick: new EventDispatcher<Button<Config>, NoArgs>(),\n  };\n\n  constructor(config: Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-button',\n      role: 'button',\n      tabIndex: 0,\n    } as Config, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    const buttonElementAttributes: { [name: string]: string } = {\n      'id': this.config.id,\n      'aria-label': i18n.performLocalization(this.config.ariaLabel || this.config.text),\n      'class': this.getCssClasses(),\n      'type' : 'button',\n      /**\n      * WCAG20 standard to display if a button is pressed or not\n      */\n      'aria-pressed': 'false',\n      'tabindex': this.config.tabIndex.toString(),\n    };\n\n    if (this.config.role != null) {\n      buttonElementAttributes['role'] = this.config.role;\n    }\n\n    // Create the button element with the text label\n    let buttonElement = new DOM('button', buttonElementAttributes).append(new DOM('span', {\n      'class': this.prefixCss('label'),\n    }).html(i18n.performLocalization(this.config.text)));\n\n    // Listen for the click event on the button element and trigger the corresponding event on the button component\n    buttonElement.on('click', () => {\n      this.onClickEvent();\n    });\n\n    return buttonElement;\n  }\n\n  /**\n   * Sets text on the label of the button.\n   * @param text the text to put into the label of the button\n   */\n  setText(text: LocalizableText): void {\n    this.getDomElement().find('.' + this.prefixCss('label')).html(i18n.performLocalization(text));\n  }\n\n  protected onClickEvent() {\n    this.buttonEvents.onClick.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the button is clicked.\n   * @returns {Event<Button<Config>, NoArgs>}\n   */\n  get onClick(): Event<Button<Config>, NoArgs> {\n    return this.buttonEvents.onClick.getEvent();\n  }\n}\n","import {ContainerConfig, Container} from './container';\nimport {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport { CastStartedEvent, CastWaitingForDeviceEvent, PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Overlays the player and displays the status of a Cast session.\n */\nexport class CastStatusOverlay extends Container<ContainerConfig> {\n\n  private statusLabel: Label<LabelConfig>;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.statusLabel = new Label<LabelConfig>({ cssClass: 'ui-cast-status-label' });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-cast-status-overlay',\n      components: [this.statusLabel],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    player.on(player.exports.PlayerEvent.CastWaitingForDevice,\n      (event: CastWaitingForDeviceEvent) => {\n        this.show();\n        // Get device name and update status text while connecting\n        let castDeviceName = event.castPayload.deviceName;\n        this.statusLabel.setText(i18n.getLocalizer('connectingTo', { castDeviceName }));\n      });\n    player.on(player.exports.PlayerEvent.CastStarted, (event: CastStartedEvent) => {\n      // Session is started or resumed\n      // For cases when a session is resumed, we do not receive the previous events and therefore show the status panel\n      // here too\n      this.show();\n      let castDeviceName = event.deviceName;\n      this.statusLabel.setText(i18n.getLocalizer('playingOn', { castDeviceName }));\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, (event) => {\n      // Cast session gone, hide the status panel\n      this.hide();\n    });\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles casting to a Cast receiver.\n */\nexport class CastToggleButton extends ToggleButton<ToggleButtonConfig> {\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(\n      config,\n      {\n        cssClass: 'ui-casttogglebutton',\n        text: i18n.getLocalizer('googleCast'),\n      },\n      this.config,\n    );\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      if (!player.isCastAvailable()) {\n        player.castVideo();\n        if (console) {\n          console.log('Cast unavailable');\n        }\n        return;\n      }\n\n      if (player.isCasting()) {\n        player.castStop();\n      } else {\n        player.castVideo();\n      }\n    });\n\n    // Toggle button 'on' state\n    player.on(player.exports.PlayerEvent.CastWaitingForDevice, () => {\n      this.on();\n    });\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      // When a session is resumed, there is no CastStart event, so we also need to toggle here for such cases\n      this.on();\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, () => {\n      this.off();\n    });\n\n    // Startup init\n    if (player.isCasting()) {\n      this.on();\n    }\n  }\n}\n","import {UIContainer, UIContainerConfig} from './uicontainer';\nimport {UIInstanceManager} from '../uimanager';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * The base container for Cast receivers that contains all of the UI and takes care that the UI is shown on\n * certain playback events.\n */\nexport class CastUIContainer extends UIContainer {\n\n  private castUiHideTimeout: Timeout;\n\n  constructor(config: UIContainerConfig) {\n    super(config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    /*\n     * Show UI on Cast devices at certain playback events\n     *\n     * Since a Cast receiver does not have a direct HCI, we show the UI on certain playback events to give the user\n     * a chance to see on the screen what's going on, e.g. on play/pause or a seek the UI is shown and the user can\n     * see the current time and position on the seek bar.\n     * The UI is shown permanently while playback is paused, otherwise hides automatically after the configured\n     * hide delay time.\n     */\n\n    let isUiShown = false;\n\n    let hideUi = () => {\n      uimanager.onControlsHide.dispatch(this);\n      isUiShown = false;\n    };\n\n    this.castUiHideTimeout = new Timeout(config.hideDelay, hideUi);\n\n    let showUi = () => {\n      if (!isUiShown) {\n        uimanager.onControlsShow.dispatch(this);\n        isUiShown = true;\n      }\n    };\n\n    let showUiPermanently = () => {\n      showUi();\n      this.castUiHideTimeout.clear();\n    };\n\n    let showUiWithTimeout = () => {\n      showUi();\n      this.castUiHideTimeout.start();\n    };\n\n    let showUiAfterSeek = () => {\n      if (player.isPlaying()) {\n        showUiWithTimeout();\n      } else {\n        showUiPermanently();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.Play, showUiWithTimeout);\n    player.on(player.exports.PlayerEvent.Paused, showUiPermanently);\n    player.on(player.exports.PlayerEvent.Seek, showUiPermanently);\n    player.on(player.exports.PlayerEvent.Seeked, showUiAfterSeek);\n\n    uimanager.getConfig().events.onUpdated.subscribe(showUiWithTimeout);\n  }\n\n  release(): void {\n    super.release();\n    this.castUiHideTimeout.clear();\n  }\n}","import {Button, ButtonConfig} from './button';\n\n/**\n * Configuration interface for a {@link ClickOverlay}.\n */\nexport interface ClickOverlayConfig extends ButtonConfig {\n  /**\n   * The url to open when the overlay is clicked. Set to null to disable the click handler.\n   */\n  url?: string;\n}\n\n/**\n * A click overlay that opens an url in a new tab if clicked.\n */\nexport class ClickOverlay extends Button<ClickOverlayConfig> {\n\n  constructor(config: ClickOverlayConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-clickoverlay',\n      role: this.config.role,\n    }, <ClickOverlayConfig>this.config);\n  }\n\n  initialize(): void {\n    super.initialize();\n\n    this.setUrl((<ClickOverlayConfig>this.config).url);\n    let element = this.getDomElement();\n    element.on('click', () => {\n      if (element.data('url')) {\n        window.open(element.data('url'), '_blank');\n      }\n    });\n  }\n\n  /**\n   * Gets the URL that should be followed when the watermark is clicked.\n   * @returns {string} the watermark URL\n   */\n  getUrl(): string {\n    return this.getDomElement().data('url');\n  }\n\n  setUrl(url: string): void {\n    if (url === undefined || url == null) {\n      url = '';\n    }\n    this.getDomElement().data('url', url);\n  }\n}","import {ButtonConfig, Button} from './button';\nimport {UIInstanceManager} from '../uimanager';\nimport {Component, ComponentConfig} from './component';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link CloseButton}.\n */\nexport interface CloseButtonConfig extends ButtonConfig {\n  /**\n   * The component that should be closed when the button is clicked.\n   */\n  target: Component<ComponentConfig>;\n}\n\n/**\n * A button that closes (hides) a configured component.\n */\nexport class CloseButton extends Button<CloseButtonConfig> {\n\n  constructor(config: CloseButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-closebutton',\n      text: i18n.getLocalizer('close'),\n    } as CloseButtonConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    this.onClick.subscribe(() => {\n      config.target.hide();\n    });\n  }\n}","import {Guid} from '../guid';\nimport {DOM} from '../dom';\nimport {EventDispatcher, NoArgs, Event} from '../eventdispatcher';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n, LocalizableText } from '../localization/i18n';\n\n/**\n * Base configuration interface for a component.\n * Should be extended by components that want to add additional configuration options.\n */\nexport interface ComponentConfig {\n  /**\n   * The HTML tag name of the component.\n   * Default: 'div'\n   */\n  tag?: string;\n  /**\n   * The HTML ID of the component.\n   * Default: automatically generated with pattern 'ui-id-{guid}'.\n   */\n  id?: string;\n\n  /**\n   * A prefix to prepend all CSS classes with.\n   */\n  cssPrefix?: string;\n\n  /**\n   * The CSS classes of the component. This is usually the class from where the component takes its styling.\n   */\n  cssClass?: string; // 'class' is a reserved keyword, so we need to make the name more complicated\n\n  /**\n   * Additional CSS classes of the component.\n   */\n  cssClasses?: string[];\n\n  /**\n   * Specifies if the component should be hidden at startup.\n   * Default: false\n   */\n  hidden?: boolean;\n\n  /**\n   * Specifies if the component is enabled (interactive) or not.\n   * Default: false\n   */\n  disabled?: boolean;\n\n  /**\n   * Specifies the component role for WCAG20 standard\n   */\n  role?: string;\n\n  /**\n   * WCAG20 requirement for screen reader navigation\n   */\n  tabIndex?: number;\n\n  /**\n   * WCAG20 standard for defining info about the component (usually the name)\n   */\n  ariaLabel?: LocalizableText;\n}\n\nexport interface ComponentHoverChangedEventArgs extends NoArgs {\n  /**\n   * True is the component is hovered, else false.\n   */\n  hovered: boolean;\n}\n\n/**\n * The base class of the UI framework.\n * Each component must extend this class and optionally the config interface.\n */\nexport class Component<Config extends ComponentConfig> {\n\n  /**\n   * The classname that is attached to the element when it is in the hidden state.\n   * @type {string}\n   */\n  private static readonly CLASS_HIDDEN = 'hidden';\n\n  /**\n   * The classname that is attached to the element when it is in the disabled state.\n   * @type {string}\n   */\n  private static readonly CLASS_DISABLED = 'disabled';\n\n  /**\n   * Configuration object of this component.\n   */\n  protected config: Config;\n\n  /**\n   * The component's DOM element.\n   */\n  private element: DOM;\n\n  /**\n   * Flag that keeps track of the hidden state.\n   */\n  private hidden: boolean;\n\n  /**\n   * Flat that keeps track of the disabled state.\n   */\n  private disabled: boolean;\n\n  /**\n   * Flag that keeps track of the hover state.\n   */\n  private hovered: boolean;\n\n  /**\n   * The list of events that this component offers. These events should always be private and only directly\n   * accessed from within the implementing component.\n   *\n   * Because TypeScript does not support private properties with the same name on different class hierarchy levels\n   * (i.e. superclass and subclass cannot contain a private property with the same name), the default naming\n   * convention for the event list of a component that should be followed by subclasses is the concatenation of the\n   * camel-cased class name + 'Events' (e.g. SubClass extends Component => subClassEvents).\n   * See {@link #componentEvents} for an example.\n   *\n   * Event properties should be named in camel case with an 'on' prefix and in the present tense. Async events may\n   * have a start event (when the operation starts) in the present tense, and must have an end event (when the\n   * operation ends) in the past tense (or present tense in special cases (e.g. onStart/onStarted or onPlay/onPlaying).\n   * See {@link #componentEvents#onShow} for an example.\n   *\n   * Each event should be accompanied with a protected method named by the convention eventName + 'Event'\n   * (e.g. onStartEvent), that actually triggers the event by calling {@link EventDispatcher#dispatch dispatch} and\n   * passing a reference to the component as first parameter. Components should always trigger their events with these\n   * methods. Implementing this pattern gives subclasses means to directly listen to the events by overriding the\n   * method (and saving the overhead of passing a handler to the event dispatcher) and more importantly to trigger\n   * these events without having access to the private event list.\n   * See {@link #onShow} for an example.\n   *\n   * To provide external code the possibility to listen to this component's events (subscribe, unsubscribe, etc.),\n   * each event should also be accompanied by a public getter function with the same name as the event's property,\n   * that returns the {@link Event} obtained from the event dispatcher by calling {@link EventDispatcher#getEvent}.\n   * See {@link #onShow} for an example.\n   *\n   * Full example for an event representing an example action in a example component:\n   *\n   * <code>\n   * // Define an example component class with an example event\n   * class ExampleComponent extends Component<ComponentConfig> {\n     *\n     *     private exampleComponentEvents = {\n     *         onExampleAction: new EventDispatcher<ExampleComponent, NoArgs>()\n     *     }\n     *\n     *     // constructor and other stuff...\n     *\n     *     protected onExampleActionEvent() {\n     *        this.exampleComponentEvents.onExampleAction.dispatch(this);\n     *    }\n     *\n     *    get onExampleAction(): Event<ExampleComponent, NoArgs> {\n     *        return this.exampleComponentEvents.onExampleAction.getEvent();\n     *    }\n     * }\n   *\n   * // Create an instance of the component somewhere\n   * var exampleComponentInstance = new ExampleComponent();\n   *\n   * // Subscribe to the example event on the component\n   * exampleComponentInstance.onExampleAction.subscribe(function (sender: ExampleComponent) {\n     *     console.log('onExampleAction of ' + sender + ' has fired!');\n     * });\n   * </code>\n   */\n  private componentEvents = {\n    onShow: new EventDispatcher<Component<Config>, NoArgs>(),\n    onHide: new EventDispatcher<Component<Config>, NoArgs>(),\n    onHoverChanged: new EventDispatcher<Component<Config>, ComponentHoverChangedEventArgs>(),\n    onEnabled: new EventDispatcher<Component<Config>, NoArgs>(),\n    onDisabled: new EventDispatcher<Component<Config>, NoArgs>(),\n  };\n\n  /**\n   * Constructs a component with an optionally supplied config. All subclasses must call the constructor of their\n   * superclass and then merge their configuration into the component's configuration.\n   * @param config the configuration for the component\n   */\n  constructor(config: ComponentConfig = {}) {\n    // Create the configuration for this component\n    this.config = <Config>this.mergeConfig(config, {\n      tag: 'div',\n      id: '{{PREFIX}}-id-' + Guid.next(),\n      cssPrefix: '{{PREFIX}}',\n      cssClass: 'ui-component',\n      cssClasses: [],\n      hidden: false,\n      disabled: false,\n    }, {});\n  }\n\n  /**\n   * Initializes the component, e.g. by applying config settings.\n   * This method must not be called from outside the UI framework.\n   *\n   * This method is automatically called by the {@link UIInstanceManager}. If the component is an inner component of\n   * some component, and thus encapsulated abd managed internally and never directly exposed to the UIManager,\n   * this method must be called from the managing component's {@link #initialize} method.\n   */\n  initialize(): void {\n    this.hidden = this.config.hidden;\n    this.disabled = this.config.disabled;\n\n    // Hide the component at initialization if it is configured to be hidden\n    if (this.isHidden()) {\n      this.hidden = false; // Set flag to false for the following hide() call to work (hide() checks the flag)\n      this.hide();\n    }\n\n    // Disable the component at initialization if it is configured to be disabled\n    if (this.isDisabled()) {\n      this.disabled = false; // Set flag to false for the following disable() call to work (disable() checks the flag)\n      this.disable();\n    }\n  }\n\n  /**\n   * Configures the component for the supplied Player and UIInstanceManager. This is the place where all the magic\n   * happens, where components typically subscribe and react to events (on their DOM element, the Player, or the\n   * UIInstanceManager), and basically everything that makes them interactive.\n   * This method is called only once, when the UIManager initializes the UI.\n   *\n   * Subclasses usually overwrite this method to add their own functionality.\n   *\n   * @param player the player which this component controls\n   * @param uimanager the UIInstanceManager that manages this component\n   */\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    this.onShow.subscribe(() => {\n      uimanager.onComponentShow.dispatch(this);\n    });\n    this.onHide.subscribe(() => {\n      uimanager.onComponentHide.dispatch(this);\n    });\n\n    // Track the hovered state of the element\n    this.getDomElement().on('mouseenter', () => {\n      this.onHoverChangedEvent(true);\n    });\n    this.getDomElement().on('mouseleave', () => {\n      this.onHoverChangedEvent(false);\n    });\n  }\n\n  /**\n   * Releases all resources and dependencies that the component holds. Player, DOM, and UIManager events are\n   * automatically removed during release and do not explicitly need to be removed here.\n   * This method is called by the UIManager when it releases the UI.\n   *\n   * Subclasses that need to release resources should override this method and call super.release().\n   */\n  release(): void {\n    // Nothing to do here, override where necessary\n  }\n\n  /**\n   * Generate the DOM element for this component.\n   *\n   * Subclasses usually overwrite this method to extend or replace the DOM element with their own design.\n   */\n  protected toDomElement(): DOM {\n    let element = new DOM(this.config.tag, {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'role': this.config.role,\n    });\n\n    return element;\n  }\n\n  /**\n   * Returns the DOM element of this component. Creates the DOM element if it does not yet exist.\n   *\n   * Should not be overwritten by subclasses.\n   *\n   * @returns {DOM}\n   */\n  getDomElement(): DOM {\n    if (!this.element) {\n      this.element = this.toDomElement();\n    }\n\n    return this.element;\n  }\n\n  /**\n   * Checks if this component has a DOM element.\n   */\n  hasDomElement(): boolean {\n    return Boolean(this.element);\n  }\n\n  setAriaLabel(label: LocalizableText): void {\n    this.setAriaAttr('label', i18n.performLocalization(label));\n  }\n\n  setAriaAttr(name: string, value: string) {\n    this.getDomElement().attr(`aria-${name}`, value);\n  }\n\n  /**\n   * Merges a configuration with a default configuration and a base configuration from the superclass.\n   *\n   * @param config the configuration settings for the components, as usually passed to the constructor\n   * @param defaults a default configuration for settings that are not passed with the configuration\n   * @param base configuration inherited from a superclass\n   * @returns {Config}\n   */\n  protected mergeConfig<Config>(config: Config, defaults: Config, base: Config): Config {\n    // Extend default config with supplied config\n    let merged = Object.assign({}, base, defaults, config);\n\n    // Return the extended config\n    return merged;\n  }\n\n  /**\n   * Helper method that returns a string of all CSS classes of the component.\n   *\n   * @returns {string}\n   */\n  protected getCssClasses(): string {\n    // Merge all CSS classes into single array\n    let flattenedArray = [this.config.cssClass].concat(this.config.cssClasses);\n    // Prefix classes\n    flattenedArray = flattenedArray.map((css) => {\n      return this.prefixCss(css);\n    });\n    // Join array values into a string\n    let flattenedString = flattenedArray.join(' ');\n    // Return trimmed string to prevent whitespace at the end from the join operation\n    return flattenedString.trim();\n  }\n\n  protected prefixCss(cssClassOrId: string): string {\n    return this.config.cssPrefix + '-' + cssClassOrId;\n  }\n\n  /**\n   * Returns the configuration object of the component.\n   * @returns {Config}\n   */\n  public getConfig(): Config {\n    return this.config;\n  }\n\n  /**\n   * Hides the component if shown.\n   * This method basically transfers the component into the hidden state. Actual hiding is done via CSS.\n   */\n  hide() {\n    if (!this.hidden) {\n      this.hidden = true;\n      this.getDomElement().addClass(this.prefixCss(Component.CLASS_HIDDEN));\n      this.onHideEvent();\n    }\n  }\n\n  /**\n   * Shows the component if hidden.\n   */\n  show() {\n    if (this.hidden) {\n      this.getDomElement().removeClass(this.prefixCss(Component.CLASS_HIDDEN));\n      this.hidden = false;\n      this.onShowEvent();\n    }\n  }\n\n  /**\n   * Determines if the component is hidden.\n   * @returns {boolean} true if the component is hidden, else false\n   */\n  isHidden(): boolean {\n    return this.hidden;\n  }\n\n  /**\n   * Determines if the component is shown.\n   * @returns {boolean} true if the component is visible, else false\n   */\n  isShown(): boolean {\n    return !this.isHidden();\n  }\n\n  /**\n   * Toggles the hidden state by hiding the component if it is shown, or showing it if hidden.\n   */\n  toggleHidden() {\n    if (this.isHidden()) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Disables the component.\n   * This method basically transfers the component into the disabled state. Actual disabling is done via CSS or child\n   * components. (e.g. Button needs to unsubscribe click listeners)\n   */\n  disable(): void {\n    if (!this.disabled) {\n      this.disabled = true;\n      this.getDomElement().addClass(this.prefixCss(Component.CLASS_DISABLED));\n      this.onDisabledEvent();\n    }\n  }\n\n  /**\n   * Enables the component.\n   * This method basically transfers the component into the enabled state. Actual enabling is done via CSS or child\n   * components. (e.g. Button needs to subscribe click listeners)\n   */\n  enable(): void {\n    if (this.disabled) {\n      this.getDomElement().removeClass(this.prefixCss(Component.CLASS_DISABLED));\n      this.disabled = false;\n      this.onEnabledEvent();\n    }\n  }\n\n  /**\n   * Determines if the component is disabled.\n   * @returns {boolean} true if the component is disabled, else false\n   */\n  isDisabled(): boolean {\n    return this.disabled;\n  }\n\n  /**\n   * Determines if the component is enabled.\n   * @returns {boolean} true if the component is enabled, else false\n   */\n  isEnabled(): boolean {\n    return !this.isDisabled();\n  }\n\n  /**\n   * Determines if the component is currently hovered.\n   * @returns {boolean} true if the component is hovered, else false\n   */\n  isHovered(): boolean {\n    return this.hovered;\n  }\n\n  /**\n   * Fires the onShow event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onShowEvent(): void {\n    this.componentEvents.onShow.dispatch(this);\n  }\n\n  /**\n   * Fires the onHide event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onHideEvent(): void {\n    this.componentEvents.onHide.dispatch(this);\n  }\n\n  /**\n   * Fires the onEnabled event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onEnabledEvent(): void {\n    this.componentEvents.onEnabled.dispatch(this);\n  }\n\n  /**\n   * Fires the onDisabled event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onDisabledEvent(): void {\n    this.componentEvents.onDisabled.dispatch(this);\n  }\n\n  /**\n   * Fires the onHoverChanged event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onHoverChangedEvent(hovered: boolean): void {\n    this.hovered = hovered;\n    this.componentEvents.onHoverChanged.dispatch(this, { hovered: hovered });\n  }\n\n  /**\n   * Gets the event that is fired when the component is showing.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onShow(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onShow.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is hiding.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onHide(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onHide.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is enabling.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onEnabled(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onEnabled.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is disabling.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onDisabled(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onDisabled.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component's hover-state is changing.\n   * @returns {Event<Component<Config>, ComponentHoverChangedEventArgs>}\n   */\n  get onHoverChanged(): Event<Component<Config>, ComponentHoverChangedEventArgs> {\n    return this.componentEvents.onHoverChanged.getEvent();\n  }\n}","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {ArrayUtils} from '../arrayutils';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Container}.\n */\nexport interface ContainerConfig extends ComponentConfig {\n  /**\n   * Child components of the container.\n   */\n  components?: Component<ComponentConfig>[];\n}\n\n/**\n * A container component that can contain a collection of child components.\n * Components can be added at construction time through the {@link ContainerConfig#components} setting, or later\n * through the {@link Container#addComponent} method. The UIManager automatically takes care of all components, i.e. it\n * initializes and configures them automatically.\n *\n * In the DOM, the container consists of an outer <div> (that can be configured by the config) and an inner wrapper\n * <div> that contains the components. This double-<div>-structure is often required to achieve many advanced effects\n * in CSS and/or JS, e.g. animations and certain formatting with absolute positioning.\n *\n * DOM example:\n * <code>\n *     <div class='ui-container'>\n *         <div class='container-wrapper'>\n *             ... child components ...\n *         </div>\n *     </div>\n * </code>\n */\nexport class Container<Config extends ContainerConfig> extends Component<Config> {\n\n  /**\n   * A reference to the inner element that contains the components of the container.\n   */\n  private innerContainerElement: DOM;\n  private componentsToAdd: Component<ComponentConfig>[];\n  private componentsToRemove: Component<ComponentConfig>[];\n\n  constructor(config: Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-container',\n      components: [],\n    } as Config, this.config);\n\n    this.componentsToAdd = [];\n    this.componentsToRemove = [];\n  }\n\n  /**\n   * Adds a child component to the container.\n   * @param component the component to add\n   */\n  addComponent(component: Component<ComponentConfig>) {\n    this.config.components.push(component);\n    this.componentsToAdd.push(component);\n  }\n\n  /**\n   * Removes a child component from the container.\n   * @param component the component to remove\n   * @returns {boolean} true if the component has been removed, false if it is not contained in this container\n   */\n  removeComponent(component: Component<ComponentConfig>): boolean {\n    if (ArrayUtils.remove(this.config.components, component) != null) {\n      this.componentsToRemove.push(component);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Gets an array of all child components in this container.\n   * @returns {Component<ComponentConfig>[]}\n   */\n  getComponents(): Component<ComponentConfig>[] {\n    return this.config.components;\n  }\n\n  /**\n   * Removes all child components from the container.\n   */\n  removeComponents(): void {\n    for (let component of this.getComponents().slice()) {\n      this.removeComponent(component);\n    }\n  }\n\n  /**\n   * Updates the DOM of the container with the current components.\n   */\n  protected updateComponents(): void {\n    /* We cannot just clear the container to remove all elements and then re-add those that should stay, because\n     * IE looses the innerHTML of unattached elements, leading to empty elements within the container (e.g. missing\n     * subtitle text in SubtitleLabel).\n     * Instead, we keep a list of elements to add and remove, leaving remaining elements alone. By keeping them in\n     * the DOM, their content gets preserved in all browsers.\n     */\n    let component;\n\n    while (component = this.componentsToRemove.shift()) {\n      component.getDomElement().remove();\n    }\n\n    while (component = this.componentsToAdd.shift()) {\n      this.innerContainerElement.append(component.getDomElement());\n    }\n  }\n\n  protected toDomElement(): DOM {\n    // Create the container element (the outer <div>)\n    let containerElement = new DOM(this.config.tag, {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'role': this.config.role,\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\n    });\n\n    // Create the inner container element (the inner <div>) that will contain the components\n    let innerContainer = new DOM(this.config.tag, {\n      'class': this.prefixCss('container-wrapper'),\n    });\n    this.innerContainerElement = innerContainer;\n\n    for (let initialComponent of this.config.components) {\n      this.componentsToAdd.push(initialComponent);\n    }\n    this.updateComponents();\n\n    containerElement.append(innerContainer);\n\n    return containerElement;\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {UIUtils} from '../uiutils';\nimport {Spacer} from './spacer';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\nimport { BrowserUtils } from '../browserutils';\nimport {Component, ComponentConfig} from './component';\nimport {SettingsPanel} from './settingspanel';\n\n/**\n * Configuration interface for the {@link ControlBar}.\n */\nexport interface ControlBarConfig extends ContainerConfig {\n  // nothing yet\n}\n\n/**\n * A container for main player control components, e.g. play toggle button, seek bar, volume control, fullscreen toggle\n * button.\n */\nexport class ControlBar extends Container<ControlBarConfig> {\n\n  constructor(config: ControlBarConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-controlbar',\n      hidden: true,\n      role: 'region',\n      ariaLabel: i18n.getLocalizer('controlBar'),\n    }, <ControlBarConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    // Counts how many components are hovered and block hiding of the control bar\n    let hoverStackCount = 0;\n    let isSettingsPanelShown = false;\n\n    // only enabling this for non-mobile platforms without touch input. enabling this\n    // for touch devices causes the UI to not disappear after hideDelay seconds.\n    // Instead, it will stay visible until another manual interaction is performed.\n    if (uimanager.getConfig().disableAutoHideWhenHovered && !BrowserUtils.isMobile) {\n      // Track hover status of child components\n      UIUtils.traverseTree(this, (component) => {\n        // Do not track hover status of child containers or spacers, only of 'real' controls\n        if (component instanceof Container || component instanceof Spacer) {\n          return;\n        }\n\n        // Subscribe hover event and keep a count of the number of hovered children\n        component.onHoverChanged.subscribe((_, args) => {\n          if (args.hovered) {\n            hoverStackCount++;\n          } else {\n            hoverStackCount--;\n          }\n        });\n      });\n    }\n\n    if (BrowserUtils.isMobile) {\n      uimanager.onComponentShow.subscribe((component: Component<ComponentConfig>) => {\n        if (component instanceof SettingsPanel) {\n          isSettingsPanelShown = true;\n        }\n      });\n\n      uimanager.onComponentHide.subscribe((component: Component<ComponentConfig>) => {\n        if (component instanceof SettingsPanel) {\n          isSettingsPanelShown = false;\n        }\n      });\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      this.show();\n    });\n\n    uimanager.onPreviewControlsHide.subscribe((sender, args) => {\n      // Cancel the hide event if hovered child components block hiding or if the settings panel is active on mobile.\n      args.cancel = args.cancel || (hoverStackCount > 0 || isSettingsPanelShown);\n    });\n\n    uimanager.onControlsHide.subscribe(() => {\n      this.hide();\n    });\n  }\n}\n","import {ContainerConfig, Container} from './container';\nimport {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {TvNoiseCanvas} from './tvnoisecanvas';\nimport { ErrorUtils } from '../errorutils';\nimport { ErrorEvent, PlayerAPI, PlayerEventBase } from 'bitmovin-player';\nimport {\n  isMobileV3PlayerAPI,\n  MobileV3PlayerAPI, MobileV3PlayerErrorEvent, MobileV3PlayerEvent, MobileV3SourceErrorEvent,\n} from '../mobilev3playerapi';\nimport { GoBackButton } from '../../custom/ts/components/gobackbutton';\n\nexport interface ErrorMessageTranslator {\n  (error: ErrorEvent | MobileV3PlayerErrorEvent): string;\n}\n\nexport interface ErrorMessageMap {\n  [code: number]: string | ErrorMessageTranslator;\n}\n\n/**\n * Configuration interface for the {@link ErrorMessageOverlay}.\n */\nexport interface ErrorMessageOverlayConfig extends ContainerConfig {\n  /**\n   * Allows overwriting of the error messages displayed in the overlay for customization and localization.\n   * This is either a function that receives any {@link ErrorEvent} as parameter and translates error messages,\n   * or a map of error codes that overwrites specific error messages with a plain string or a function that\n   * receives the {@link ErrorEvent} as parameter and returns a customized string.\n   * The translation functions can be used to extract data (e.g. parameters) from the original error message.\n   *\n   * Example 1 (catch-all translation function):\n   * <code>\n   * errorMessageOverlayConfig = {\n   *   messages: function(error) {\n   *     switch (error.code) {\n   *       // Overwrite error 1000 'Unknown error'\n   *       case 1000:\n   *         return 'Houston, we have a problem'\n   *\n   *       // Transform error 1201 'The downloaded manifest is invalid' to uppercase\n   *       case 1201:\n   *         var description = ErrorUtils.defaultErrorMessages[error.code];\n   *         return description.toUpperCase();\n   *\n   *       // Customize error 1207 'The manifest could not be loaded'\n   *       case 1207:\n   *         var statusCode = error.data.statusCode;\n   *         return 'Manifest loading failed with HTTP error ' + statusCode;\n   *     }\n   *     // Return unmodified error message for all other errors\n   *     return error.message;\n   *   }\n   * };\n   * </code>\n   *\n   * Example 2 (translating specific errors):\n   * <code>\n   * errorMessageOverlayConfig = {\n   *   messages: {\n   *     // Overwrite error 1000 'Unknown error'\n   *     1000: 'Houston, we have a problem',\n   *\n   *     // Transform error 1201 'Unsupported manifest format' to uppercase\n   *     1201: function(error) {\n   *       var description = ErrorUtils.defaultErrorMessages[error.code];\n   *       return description.toUpperCase();\n   *     },\n   *\n   *     // Customize error 1207 'The manifest could not be loaded'\n   *     1207: function(error) {\n   *       var statusCode = error.data.statusCode;\n   *       return 'Manifest loading failed with HTTP error ' + statusCode;\n   *     }\n   *   }\n   * };\n   * </code>\n   */\n  messages?: ErrorMessageMap | ErrorMessageTranslator;\n}\n\n/**\n * Overlays the player and displays error messages.\n */\nexport class ErrorMessageOverlay extends Container<ErrorMessageOverlayConfig> {\n\n  private errorLabel: Label<LabelConfig>;\n  private tvNoiseBackground: TvNoiseCanvas;\n\n  constructor(config: ErrorMessageOverlayConfig = {}) {\n    super(config);\n\n    this.errorLabel = new Label<LabelConfig>({ cssClass: 'ui-errormessage-label' });\n    this.tvNoiseBackground = new TvNoiseCanvas();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-errormessage-overlay',\n      components: [this.tvNoiseBackground, this.errorLabel, new GoBackButton({ error: true })],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI | MobileV3PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    const handleErrorMessage = (\n      event: ErrorEvent | MobileV3SourceErrorEvent | MobileV3PlayerErrorEvent,\n      message: string,\n    ) => {\n      const customizedMessage = customizeErrorMessage(uimanager.getConfig().errorMessages || config.messages, event);\n      if (customizedMessage) {\n        message = customizedMessage;\n      }\n\n      this.display(message);\n    };\n\n    if (isMobileV3PlayerAPI(player)) {\n      const errorEventHandler = (event: MobileV3SourceErrorEvent | MobileV3PlayerErrorEvent) => {\n        const message = ErrorUtils.defaultMobileV3ErrorMessageTranslator(event);\n        handleErrorMessage(event, message);\n      };\n\n      player.on(MobileV3PlayerEvent.PlayerError, errorEventHandler);\n      player.on(MobileV3PlayerEvent.SourceError, errorEventHandler);\n    } else {\n      player.on(player.exports.PlayerEvent.Error, (event: ErrorEvent) => {\n        let message = ErrorUtils.defaultWebErrorMessageTranslator(event);\n        handleErrorMessage(event, message);\n      });\n    }\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, (event: PlayerEventBase) => {\n      if (this.isShown()) {\n        this.tvNoiseBackground.stop();\n        this.hide();\n      }\n    });\n  }\n\n  display(errorMessage: string): void {\n    this.errorLabel.setText(errorMessage);\n    this.tvNoiseBackground.start();\n    this.show();\n  }\n\n  release(): void {\n    super.release();\n\n    // Canvas rendering must be explicitly stopped, else it just continues forever and hogs resources\n    this.tvNoiseBackground.stop();\n  }\n}\n\nfunction customizeErrorMessage(\n  errorMessages: ErrorMessageTranslator | ErrorMessageMap,\n  event: ErrorEvent | MobileV3PlayerErrorEvent | MobileV3SourceErrorEvent,\n): string | undefined {\n  if (!errorMessages) {\n    return undefined;\n  }\n\n  // Process message vocabularies\n  if (typeof errorMessages === 'function') {\n    // Translation function for all errors\n    return errorMessages(event);\n  }\n  if (errorMessages[event.code]) {\n    // It's not a translation function, so it must be a map of strings or translation functions\n    const customMessage = errorMessages[event.code];\n\n    return typeof customMessage === 'string' ? customMessage : customMessage(event);\n  }\n}\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles the player between windowed and fullscreen view.\n */\nexport class FullscreenToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-fullscreentogglebutton',\n      text: i18n.getLocalizer('fullscreen'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const isFullScreenAvailable = () => {\n      return player.isViewModeAvailable(player.exports.ViewMode.Fullscreen);\n    };\n\n    const fullscreenStateHandler = () => {\n      player.getViewMode() === player.exports.ViewMode.Fullscreen ? this.on() : this.off();\n    };\n\n    const fullscreenAvailabilityChangedHandler = () => {\n      isFullScreenAvailable() ? this.show() : this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.ViewModeChanged, fullscreenStateHandler);\n\n    // Available only in our native SDKs for now\n    if ((player.exports.PlayerEvent as any).ViewModeAvailabilityChanged) {\n      player.on(\n        (player.exports.PlayerEvent as any).ViewModeAvailabilityChanged,\n        fullscreenAvailabilityChangedHandler,\n      );\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(fullscreenAvailabilityChangedHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isFullScreenAvailable()) {\n        if (console) {\n          console.log('Fullscreen unavailable');\n        }\n        return;\n      }\n\n      const targetViewMode =\n        player.getViewMode() === player.exports.ViewMode.Fullscreen\n          ? player.exports.ViewMode.Inline\n          : player.exports.ViewMode.Fullscreen;\n\n      player.setViewMode(targetViewMode);\n    });\n\n    // Startup init\n    fullscreenAvailabilityChangedHandler();\n    fullscreenStateHandler();\n  }\n}\n","import {PlaybackToggleButton, PlaybackToggleButtonConfig} from './playbacktogglebutton';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI, PlayerEventBase, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that overlays the video and toggles between playback and pause.\n */\nexport class HugePlaybackToggleButton extends PlaybackToggleButton {\n\n  constructor(config: PlaybackToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-hugeplaybacktogglebutton',\n      text: i18n.getLocalizer('playPause'),\n      role: 'button',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // Update button state through API events\n    super.configure(player, uimanager, false);\n\n    // Set enterFullscreenOnInitialPlayback if set in the uimanager config\n    if (typeof uimanager.getConfig().enterFullscreenOnInitialPlayback === 'boolean') {\n      this.config.enterFullscreenOnInitialPlayback = uimanager.getConfig().enterFullscreenOnInitialPlayback;\n    }\n\n    let togglePlayback = () => {\n      if (player.isPlaying() || this.isPlayInitiated) {\n        player.pause('ui');\n      } else {\n        player.play('ui');\n      }\n    };\n\n    let toggleFullscreen = () => {\n      if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n        player.setViewMode(player.exports.ViewMode.Inline);\n      } else {\n        player.setViewMode(player.exports.ViewMode.Fullscreen);\n      }\n    };\n\n    let firstPlay = true;\n    let clickTime = 0;\n    let doubleClickTime = 0;\n\n    /*\n     * YouTube-style toggle button handling\n     *\n     * The goal is to prevent a short pause or playback interval between a click, that toggles playback, and a\n     * double click, that toggles fullscreen. In this naive approach, the first click would e.g. start playback,\n     * the second click would be detected as double click and toggle to fullscreen, and as second normal click stop\n     * playback, which results is a short playback interval with max length of the double click detection\n     * period (usually 500ms).\n     *\n     * To solve this issue, we defer handling of the first click for 200ms, which is almost unnoticeable to the user,\n     * and just toggle playback if no second click (double click) has been registered during this period. If a double\n     * click is registered, we just toggle the fullscreen. In the first 200ms, undesired playback changes thus cannot\n     * happen. If a double click is registered within 500ms, we undo the playback change and switch fullscreen mode.\n     * In the end, this method basically introduces a 200ms observing interval in which playback changes are prevented\n     * if a double click happens.\n     */\n    this.onClick.subscribe(() => {\n      // Directly start playback on first click of the button.\n      // This is a required workaround for mobile browsers where video playback needs to be triggered directly\n      // by the user. A deferred playback start through the timeout below is not considered as user action and\n      // therefore ignored by mobile browsers.\n      if (firstPlay) {\n        // Try to start playback. Then we wait for Play and only when it arrives, we disable the firstPlay flag.\n        // If we disable the flag here, onClick was triggered programmatically instead of by a user interaction, and\n        // playback is blocked (e.g. on mobile devices due to the programmatic play() call), we loose the chance to\n        // ever start playback through a user interaction again with this button.\n        togglePlayback();\n\n        if (this.config.enterFullscreenOnInitialPlayback) {\n          player.setViewMode(player.exports.ViewMode.Fullscreen);\n        }\n\n        return;\n      }\n\n      let now = Date.now();\n\n      if (now - clickTime < 200) {\n        // We have a double click inside the 200ms interval, just toggle fullscreen mode\n        toggleFullscreen();\n        doubleClickTime = now;\n        return;\n      } else if (now - clickTime < 500) {\n        // We have a double click inside the 500ms interval, undo playback toggle and toggle fullscreen mode\n        toggleFullscreen();\n        togglePlayback();\n        doubleClickTime = now;\n        return;\n      }\n\n      clickTime = now;\n\n      setTimeout(() => {\n        if (Date.now() - doubleClickTime > 200) {\n          // No double click detected, so we toggle playback and wait what happens next\n          togglePlayback();\n        }\n      }, 200);\n    });\n\n    player.on(player.exports.PlayerEvent.Play, () => {\n      // Playback has really started, we can disable the flag to switch to normal toggle button handling\n      firstPlay = false;\n    });\n\n    player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n      if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n        // if playback could not be started, reset the first play flag as we need the user interaction to start\n        firstPlay = true;\n      }\n    });\n\n    const suppressPlayButtonTransitionAnimation = () => {\n      // Disable the current animation\n      this.setTransitionAnimationsEnabled(false);\n\n      // Enable the transition animations for the next state change\n      this.onToggle.subscribeOnce(() => {\n        this.setTransitionAnimationsEnabled(true);\n      });\n    };\n\n    // Hide the play button animation when the UI is loaded (it should only be animated on state changes)\n    suppressPlayButtonTransitionAnimation();\n\n    const isAutoplayEnabled = player.getConfig().playback && Boolean(player.getConfig().playback.autoplay);\n    // We only know if an autoplay attempt is upcoming if the player is not yet ready. It the player is already ready,\n    // the attempt might be upcoming or might have already happened, but we don't have to handle that because we can\n    // simply rely on isPlaying and the play state events.\n    const isAutoplayUpcoming = !player.getSource() && isAutoplayEnabled;\n\n    // Hide the play button when the player is already playing or autoplay is upcoming\n    if (player.isPlaying() || isAutoplayUpcoming) {\n      // Hide the play button (switch to playing state)\n      this.on();\n      // Disable the animation of the playing state switch\n      suppressPlayButtonTransitionAnimation();\n\n      // Show the play button without an animation if a play attempt is blocked\n      player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n        if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n          suppressPlayButtonTransitionAnimation();\n        }\n      });\n    }\n  }\n\n  protected toDomElement(): DOM {\n    let buttonElement = super.toDomElement();\n\n    // Add child that contains the play button image\n    // Setting the image directly on the button does not work together with scaling animations, because the button\n    // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined\n    // to the size if the image, it can scale inside the player without overshooting.\n    buttonElement.append(new DOM('div', {\n      'class': this.prefixCss('image'),\n    }));\n\n    return buttonElement;\n  }\n\n  /**\n   * Enables or disables the play state transition animations of the play button image. Can be used to suppress\n   * animations.\n   * @param {boolean} enabled true to enable the animations (default), false to disable them\n   */\n  protected setTransitionAnimationsEnabled(enabled: boolean): void {\n    const noTransitionAnimationsClass = this.prefixCss('no-transition-animations');\n\n    if (enabled) {\n      this.getDomElement().removeClass(noTransitionAnimationsClass);\n    } else if (!this.getDomElement().hasClass(noTransitionAnimationsClass)) {\n      this.getDomElement().addClass(noTransitionAnimationsClass);\n    }\n  }\n}\n","import {ButtonConfig, Button} from './button';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button to play/replay a video.\n */\nexport class HugeReplayButton extends Button<ButtonConfig> {\n\n  constructor(config: ButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-hugereplaybutton',\n      text: i18n.getLocalizer('replay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      player.play('ui');\n    });\n  }\n\n  protected toDomElement(): DOM {\n    let buttonElement = super.toDomElement();\n\n    // Add child that contains the play button image\n    // Setting the image directly on the button does not work together with scaling animations, because the button\n    // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined\n    // to the size if the image, it can scale inside the player without overshooting.\n    buttonElement.append(new DOM('div', {\n      'class': this.prefixCss('image'),\n    }));\n\n    return buttonElement;\n  }\n}","import {ListSelector, ListSelectorConfig} from './listselector';\nimport {DOM} from '../dom';\nimport { i18n } from '../localization/i18n';\n\nexport class ItemSelectionList extends ListSelector<ListSelectorConfig> {\n\n  private static readonly CLASS_SELECTED = 'selected';\n\n  private listElement: DOM;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      tag: 'ul',\n      cssClass: 'ui-itemselectionlist',\n    }, this.config);\n  }\n\n  protected isActive(): boolean {\n    return this.items.length > 1;\n  }\n\n  protected toDomElement(): DOM {\n    let listElement = new DOM('ul', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    });\n\n    this.listElement = listElement;\n    this.updateDomItems();\n\n    return listElement;\n  }\n\n  protected updateDomItems(selectedValue: string = null) {\n    // Delete all children\n    this.listElement.empty();\n\n    let selectedListItem: DOM = null;\n\n    const selectItem = (listItem: DOM) => {\n      listItem.addClass(this.prefixCss(ItemSelectionList.CLASS_SELECTED));\n    };\n\n    const deselectItem = (listItem: DOM) => {\n      listItem.removeClass(this.prefixCss(ItemSelectionList.CLASS_SELECTED));\n    };\n\n    for (let item of this.items) {\n      let listItem = new DOM('li', {\n        'type': 'li',\n        'class': this.prefixCss('ui-selectionlistitem'),\n      }).append(new DOM('a', {\n      }).html(i18n.performLocalization(item.label)));\n\n      if (!selectedListItem) {\n        if (selectedValue == null) { // If there is no pre-selected value, select the first one\n          selectedListItem = listItem;\n        } else if (String(selectedValue) === item.key) { // convert selectedValue to string to catch 'null'/null case\n          selectedListItem = listItem;\n        }\n      }\n\n      // Handle list item selections\n      listItem.on('click', () => {\n        // Deselect the previous item (if there was a selected item)\n        if (selectedListItem) {\n          deselectItem(selectedListItem);\n        }\n\n        // Select the clicked item\n        selectedListItem = listItem;\n        selectItem(listItem);\n\n        // Fire the event\n        this.onItemSelectedEvent(item.key, false);\n      });\n\n      // Select default item\n      if (selectedListItem) {\n        selectItem(selectedListItem);\n      }\n\n      this.listElement.append(listItem);\n    }\n  }\n\n  protected onItemAddedEvent(value: string) {\n    super.onItemAddedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemRemovedEvent(value: string) {\n    super.onItemRemovedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemSelectedEvent(value: string, updateDomItems: boolean = true) {\n    super.onItemSelectedEvent(value);\n    if (updateDomItems) {\n      this.updateDomItems(value);\n    }\n  }\n}\n","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {EventDispatcher, Event, NoArgs} from '../eventdispatcher';\nimport { LocalizableText, i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Label} component.\n */\nexport interface LabelConfig extends ComponentConfig {\n  /**\n   * The text as string or localize callback on the label.\n   */\n  text?: LocalizableText;\n\n  /**\n   * WCAG20 standard: Associate label to form control.\n   */\n  for?: string;\n}\n\n/**\n * A simple text label.\n *\n * DOM example:\n * <code>\n *     <span class='ui-label'>...some text...</span>\n * </code>\n */\nexport class Label<Config extends LabelConfig> extends Component<Config> {\n\n  private text: LocalizableText;\n\n  private labelEvents = {\n    onClick: new EventDispatcher<Label<Config>, NoArgs>(),\n    onTextChanged: new EventDispatcher<Label<Config>, string>(),\n  };\n\n  constructor(config: Config = {} as Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-label',\n    } as Config, this.config);\n    this.text = this.config.text;\n  }\n\n  protected toDomElement(): DOM {\n    const tagName = this.config.for != null ? 'label' : 'span';\n\n    let labelElement = new DOM(tagName, {\n      'id': this.config.id,\n      'for': this.config.for,\n      'class': this.getCssClasses(),\n    }).html(i18n.performLocalization(this.text));\n\n    labelElement.on('click', () => {\n      this.onClickEvent();\n    });\n\n    return labelElement;\n  }\n\n  /**\n   * Set the text on this label.\n   * @param text\n   */\n  setText(text: LocalizableText) {\n    if (text === this.text) {\n      return;\n    }\n\n    this.text = text;\n    const localizedText = i18n.performLocalization(text);\n    this.getDomElement().html(localizedText);\n    this.onTextChangedEvent(localizedText);\n  }\n\n  /**\n   * Gets the text on this label.\n   * @return {string} The text on the label\n   */\n  getText(): string {\n    return i18n.performLocalization(this.text);\n  }\n\n  /**\n   * Clears the text on this label.\n   */\n  clearText() {\n    this.getDomElement().html('');\n    this.onTextChangedEvent(null);\n  }\n\n  /**\n   * Tests if the label is empty and does not contain any text.\n   * @return {boolean} True if the label is empty, else false\n   */\n  isEmpty(): boolean {\n    return !this.text;\n  }\n\n  /**\n   * Fires the {@link #onClick} event.\n   * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method\n   * and calling the super method.\n   */\n  protected onClickEvent() {\n    this.labelEvents.onClick.dispatch(this);\n  }\n\n  /**\n   * Fires the {@link #onClick} event.\n   * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method\n   * and calling the super method.\n   */\n  protected onTextChangedEvent(text: string) {\n    this.labelEvents.onTextChanged.dispatch(this, text);\n  }\n\n  /**\n   * Gets the event that is fired when the label is clicked.\n   * @returns {Event<Label<LabelConfig>, NoArgs>}\n   */\n  get onClick(): Event<Label<LabelConfig>, NoArgs> {\n    return this.labelEvents.onClick.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the text on the label is changed.\n   * @returns {Event<Label<LabelConfig>, string>}\n   */\n  get onTextChanged(): Event<Label<LabelConfig>, string> {\n    return this.labelEvents.onTextChanged.getEvent();\n  }\n}\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\nimport { ListItem, ListSelector, ListSelectorConfig } from './listselector';\nimport {DOM} from '../dom';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\nimport { ArrayUtils } from '../arrayutils';\n\n/**\n * A element to select a single item out of a list of available items.\n *\n * DOM example:\n * <code>\n *   <div class='ui-listbox'>\n *     <button class='ui-listbox-button'>label</button>\n *     ...\n *   </div\n * </code>\n */\n// TODO: change ListSelector to extends container in v4 to improve usage of ListBox.\n//       Currently we are creating the dom element of the list box with child elements manually here.\n//       But this functionality is already covered within the Container component.\nexport class ListBox extends ListSelector<ListSelectorConfig> {\n  private listBoxElement: DOM;\n  private components: ListBoxItemButton[] = [];\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-listbox',\n    } as ListSelectorConfig, this.config);\n  }\n\n  public configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // Subscribe before super call to receive initial events\n    this.onItemAdded.subscribe(this.addListBoxDomItem);\n    this.onItemRemoved.subscribe(this.removeListBoxDomItem);\n    this.onItemSelected.subscribe(this.refreshSelectedItem);\n\n    super.configure(player, uimanager);\n  }\n\n  protected toDomElement(): DOM {\n    let listBoxElement = new DOM('div', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    });\n\n    this.listBoxElement = listBoxElement;\n    this.createListBoxDomItems();\n    this.refreshSelectedItem();\n\n    return listBoxElement;\n  }\n\n  private createListBoxDomItems() {\n    // Delete all children\n    this.listBoxElement.empty();\n    this.components = [];\n\n    // Add updated children\n    for (let item of this.items) {\n      this.addListBoxDomItem(this, item.key);\n    }\n  }\n\n  private removeListBoxDomItem = (_: ListBox, key: string) => {\n    const component = this.getComponentForKey(key);\n    if (component) {\n      component.getDomElement().remove();\n      ArrayUtils.remove(this.components, component);\n    }\n  };\n\n  private addListBoxDomItem = (_: ListBox, key: string) => {\n    const component = this.getComponentForKey(key);\n    const newItem = this.getItemForKey(key);\n    if (component) {\n      // Update existing component\n      component.setText(newItem.label);\n    } else {\n      const listBoxItemButton = this.buildListBoxItemButton(newItem);\n\n      listBoxItemButton.onClick.subscribe(() => {\n        this.handleSelectionChange(listBoxItemButton);\n      });\n\n      this.components.push(listBoxItemButton);\n      this.listBoxElement.append(listBoxItemButton.getDomElement());\n    }\n  };\n\n  private refreshSelectedItem = () => {\n    // This gets called twice because the first time is triggered when the user clicks on the ListBoxItemButton. And the\n    // second call comes from the player event when the actual item is selected (Subtitle / AudioTrack in this case).\n    // As this is a generic component we can't prohibit this behaviour. We need to treat this component as it acts\n    // independent from PlayerEvents and on the other hand we need to react to PlayerEvents as it could be triggered\n    // from outside.\n\n    for (let item of this.items) {\n      const component = this.getComponentForKey(item.key);\n      if (component) {\n        String(component.key) === String(this.selectedItem) ? component.on() : component.off();\n      }\n    }\n  };\n\n  private buildListBoxItemButton(listItem: ListItem): ListBoxItemButton {\n    return new ListBoxItemButton({\n      key: listItem.key,\n      text: listItem.label,\n      ariaLabel: listItem.ariaLabel,\n    });\n  }\n\n  private getComponentForKey(key: string): ListBoxItemButton {\n    return this.components.find((c) => key === c.key);\n  }\n\n  private handleSelectionChange = (sender: ListBoxItemButton) => {\n    this.onItemSelectedEvent(sender.key);\n  };\n}\n\ninterface ListBoxItemButtonConfig extends ToggleButtonConfig {\n  /**\n   * key to identify selected item. Similar to the value attribute of an select option.\n   */\n  key: string;\n}\n\nclass ListBoxItemButton extends ToggleButton<ListBoxItemButtonConfig> {\n\n  constructor(config: ListBoxItemButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-listbox-button',\n      onClass: 'selected',\n      offClass: '',\n    } as ListBoxItemButtonConfig, this.config);\n  }\n\n  get key(): string {\n    return (this.config as ListBoxItemButtonConfig).key;\n  }\n}\n","import {Component, ComponentConfig} from './component';\nimport {EventDispatcher, Event} from '../eventdispatcher';\nimport {ArrayUtils} from '../arrayutils';\nimport { LocalizableText, i18n } from '../localization/i18n';\n\n/**\n * A map of items (key/value -> label} for a {@link ListSelector} in a {@link ListSelectorConfig}.\n */\nexport interface ListItem {\n  key: string;\n  label: LocalizableText;\n  sortedInsert?: boolean;\n  ariaLabel?: string;\n}\n\n/**\n * Filter function that can be used to filter out list items added through {@link ListSelector.addItem}.\n *\n * This is intended to be used in conjunction with subclasses that populate themselves automatically\n * via the player API, e.g. {@link SubtitleSelectBox}.\n */\nexport interface ListItemFilter {\n  /**\n   * Takes a list item and decides whether it should pass or be discarded.\n   * @param {ListItem} listItem the item to apply the filter to\n   * @returns {boolean} true to let the item pass through the filter, false to discard the item\n   */\n  (listItem: ListItem): boolean;\n}\n\n/**\n * Translator function to translate labels of list items added through {@link ListSelector.addItem}.\n *\n * This is intended to be used in conjunction with subclasses that populate themselves automatically\n * via the player API, e.g. {@link SubtitleSelectBox}.\n */\nexport interface ListItemLabelTranslator {\n  /**\n   * Takes a list item, optionally changes the label, and returns the new label.\n   * @param {ListItem} listItem the item to translate\n   * @returns {string} the translated or original label\n   */\n  (listItem: ListItem): string;\n}\n\n/**\n * Configuration interface for a {@link ListSelector}.\n */\nexport interface ListSelectorConfig extends ComponentConfig {\n  items?: ListItem[];\n  filter?: ListItemFilter;\n  translator?: ListItemLabelTranslator;\n}\n\nexport abstract class ListSelector<Config extends ListSelectorConfig> extends Component<ListSelectorConfig> {\n\n  protected items: ListItem[];\n  protected selectedItem: string;\n\n  private listSelectorEvents = {\n    onItemAdded: new EventDispatcher<ListSelector<Config>, string>(),\n    onItemRemoved: new EventDispatcher<ListSelector<Config>, string>(),\n    onItemSelected: new EventDispatcher<ListSelector<Config>, string>(),\n  };\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      items: [],\n      cssClass: 'ui-listselector',\n    }, this.config);\n\n    this.items = this.config.items;\n  }\n\n  private getItemIndex(key: string): number {\n    for (let index in this.items) {\n      if (key === this.items[index].key) {\n        return parseInt(index);\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Returns all current items of this selector.\n   * * @returns {ListItem[]}\n   */\n  getItems(): ListItem[] {\n    return this.items;\n  }\n\n  /**\n   * Checks if the specified item is part of this selector.\n   * @param key the key of the item to check\n   * @returns {boolean} true if the item is part of this selector, else false\n   */\n  hasItem(key: string): boolean {\n    return this.getItemIndex(key) > -1;\n  }\n\n  /**\n   * Adds an item to this selector by doing a sorted insert or by appending the element to the end of the list of items.\n   * If an item with the specified key already exists, it is replaced.\n   * @param key the key of the item to add\n   * @param label the (human-readable) label of the item to add\n   * @param sortedInsert whether the item should be added respecting the order of keys\n   * @param ariaLabel custom aria label for the listItem\n   */\n  addItem(key: string, label: LocalizableText, sortedInsert = false, ariaLabel = '') {\n    const listItem = { key: key, label: i18n.performLocalization(label), ...(ariaLabel && { ariaLabel })};\n\n    // Apply filter function\n    if (this.config.filter && !this.config.filter(listItem)) {\n      return;\n    }\n\n    // Apply translator function\n    if (this.config.translator) {\n      listItem.label = this.config.translator(listItem);\n    }\n\n    // Try to remove key first to get overwrite behavior and avoid duplicate keys\n    this.removeItem(key); // This will trigger an ItemRemoved and an ItemAdded event\n\n    // Add the item to the list\n    if (sortedInsert) {\n      const index = this.items.findIndex(entry => entry.key > key);\n      if (index < 0) {\n        this.items.push(listItem);\n      } else {\n        this.items.splice(index, 0, listItem);\n      }\n    } else {\n      this.items.push(listItem);\n    }\n    this.onItemAddedEvent(key);\n  }\n\n  /**\n   * Removes an item from this selector.\n   * @param key the key of the item to remove\n   * @returns {boolean} true if removal was successful, false if the item is not part of this selector\n   */\n  removeItem(key: string): boolean {\n    let index = this.getItemIndex(key);\n    if (index > -1) {\n      ArrayUtils.remove(this.items, this.items[index]);\n      this.onItemRemovedEvent(key);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Selects an item from the items in this selector.\n   * @param key the key of the item to select\n   * @returns {boolean} true is the selection was successful, false if the selected item is not part of the selector\n   */\n  selectItem(key: string): boolean {\n    if (key === this.selectedItem) {\n      // itemConfig is already selected, suppress any further action\n      return true;\n    }\n\n    let index = this.getItemIndex(key);\n\n    if (index > -1) {\n      this.selectedItem = key;\n      this.onItemSelectedEvent(key);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns the key of the selected item.\n   * @returns {string} the key of the selected item or null if no item is selected\n   */\n  getSelectedItem(): string | null {\n    return this.selectedItem;\n  }\n\n  /**\n   * Returns the items for the given key or undefined if no item with the given key exists.\n   * @param key the key of the item to return\n   * @returns {ListItem} the item with the requested key. Undefined if no item with the given key exists.\n   */\n  getItemForKey(key: string): ListItem {\n    return this.items.find((item) => item.key === key);\n  }\n\n  /**\n   * Synchronize the current items of this selector with the given ones. This will remove and add items selectively.\n   * For each removed item the ItemRemovedEvent and for each added item the ItemAddedEvent will be triggered. Favour\n   * this method over using clearItems and adding all items again afterwards.\n   * @param newItems\n   */\n  synchronizeItems(newItems: ListItem[]): void {\n    newItems\n      .filter((item) => !this.hasItem(item.key))\n      .forEach((item) => this.addItem(item.key, item.label, item.sortedInsert, item.ariaLabel));\n\n    this.items\n      .filter((item) => newItems.filter((i) => i.key === item.key).length === 0)\n      .forEach((item) => this.removeItem(item.key));\n  }\n\n  /**\n   * Removes all items from this selector.\n   */\n  clearItems() {\n    // local copy for iteration after clear\n    let items = this.items;\n    // clear items\n    this.items = [];\n\n    // clear the selection as the selected item is also removed\n    this.selectedItem = null;\n\n    // fire events\n    for (let item of items) {\n      this.onItemRemovedEvent(item.key);\n    }\n  }\n\n  /**\n   * Returns the number of items in this selector.\n   * @returns {number}\n   */\n  itemCount(): number {\n    return Object.keys(this.items).length;\n  }\n\n  protected onItemAddedEvent(key: string) {\n    this.listSelectorEvents.onItemAdded.dispatch(this, key);\n  }\n\n  protected onItemRemovedEvent(key: string) {\n    this.listSelectorEvents.onItemRemoved.dispatch(this, key);\n  }\n\n  protected onItemSelectedEvent(key: string) {\n    this.listSelectorEvents.onItemSelected.dispatch(this, key);\n  }\n\n  /**\n   * Gets the event that is fired when an item is added to the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemAdded(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemAdded.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when an item is removed from the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemRemoved(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemRemoved.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when an item is selected from the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemSelected(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemSelected.getEvent();\n  }\n}","import {LabelConfig, Label} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Enumerates the types of content that the {@link MetadataLabel} can display.\n */\nexport enum MetadataLabelContent {\n  /**\n   * Title of the data source.\n   */\n  Title,\n  /**\n   * Description fo the data source.\n   */\n  Description,\n}\n\n/**\n * Configuration interface for {@link MetadataLabel}.\n */\nexport interface MetadataLabelConfig extends LabelConfig {\n  /**\n   * The type of content that should be displayed in the label.\n   */\n  content: MetadataLabelContent;\n}\n\n/**\n * A label that can be configured to display certain metadata.\n */\nexport class MetadataLabel extends Label<MetadataLabelConfig> {\n\n  constructor(config: MetadataLabelConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['label-metadata', 'label-metadata-' + MetadataLabelContent[config.content].toLowerCase()],\n    } as MetadataLabelConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let uiconfig = uimanager.getConfig();\n\n    let init = () => {\n      switch (config.content) {\n        case MetadataLabelContent.Title:\n          this.setText(uiconfig.metadata.title);\n          break;\n        case MetadataLabelContent.Description:\n          this.setText(uiconfig.metadata.description);\n          break;\n      }\n    };\n\n    let unload = () => {\n      this.setText(null);\n    };\n\n    // Init label\n    init();\n    // Clear labels when source is unloaded\n    player.on(player.exports.PlayerEvent.SourceUnloaded, unload);\n\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles Apple macOS picture-in-picture mode.\n */\nexport class PictureInPictureToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-piptogglebutton',\n      text: i18n.getLocalizer('pictureInPicture'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const isPictureInPictureAvailable = () => {\n      return player.isViewModeAvailable(player.exports.ViewMode.PictureInPicture);\n    };\n\n    const pictureInPictureStateHandler = () => {\n      player.getViewMode() === player.exports.ViewMode.PictureInPicture ? this.on() : this.off();\n    };\n\n    const pictureInPictureAvailabilityChangedHandler = () => {\n      isPictureInPictureAvailable() ? this.show() : this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.ViewModeChanged, pictureInPictureStateHandler);\n\n    // Available only in our native SDKs for now\n    if ((player.exports.PlayerEvent as any).ViewModeAvailabilityChanged) {\n      player.on(\n        (player.exports.PlayerEvent as any).ViewModeAvailabilityChanged,\n        pictureInPictureAvailabilityChangedHandler,\n      );\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(pictureInPictureAvailabilityChangedHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isPictureInPictureAvailable()) {\n        if (console) {\n          console.log('PIP unavailable');\n        }\n        return;\n      }\n\n      const targetViewMode =\n        player.getViewMode() === player.exports.ViewMode.PictureInPicture\n          ? player.exports.ViewMode.Inline\n          : player.exports.ViewMode.PictureInPicture;\n\n      player.setViewMode(targetViewMode);\n    });\n\n    // Startup init\n    pictureInPictureAvailabilityChangedHandler(); // Hide button if PIP not available\n    pictureInPictureStateHandler();\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection of different playback speeds.\n */\nexport class PlaybackSpeedSelectBox extends SelectBox {\n  protected defaultPlaybackSpeeds: number[];\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n    this.defaultPlaybackSpeeds = [0.25, 0.5, 1, 1.5, 2];\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-playbackspeedselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addDefaultItems();\n\n    this.onItemSelected.subscribe((sender: PlaybackSpeedSelectBox, value: string) => {\n      player.setPlaybackSpeed(parseFloat(value));\n      this.selectItem(value);\n    });\n\n    const setDefaultValue = (): void => {\n      const playbackSpeed = player.getPlaybackSpeed();\n      this.setSpeed(playbackSpeed);\n    };\n\n    player.on(player.exports.PlayerEvent.PlaybackSpeedChanged, setDefaultValue);\n    uimanager.getConfig().events.onUpdated.subscribe(setDefaultValue);\n  }\n\n  setSpeed(speed: number): void {\n    if (!this.selectItem(String(speed))) {\n      // a playback speed was set which is not in the list, add it to the list to show it to the user\n      this.clearItems();\n      this.addDefaultItems([speed]);\n      this.selectItem(String(speed));\n    }\n  }\n\n  addDefaultItems(customItems: number[] = []): void {\n    const sortedSpeeds = this.defaultPlaybackSpeeds.concat(customItems).sort();\n\n    sortedSpeeds.forEach(element => {\n      if (element !== 1) {\n        this.addItem(String(element), `${element}x`);\n      } else {\n        this.addItem(String(element), i18n.getLocalizer('normal'));\n      }\n    });\n  }\n\n  clearItems(): void {\n    this.items = [];\n    this.selectedItem = null;\n  }\n}","import {LabelConfig, Label} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\nimport {PlayerUtils} from '../playerutils';\nimport {StringUtils} from '../stringutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\nexport enum PlaybackTimeLabelMode {\n  /**\n   * Displays the current time\n   */\n  CurrentTime,\n  /**\n   * Displays the duration of the content\n   */\n  TotalTime,\n  /**\n   * Displays the current time and the duration of the content\n   * Format: ${currentTime} / ${totalTime}\n   */\n  CurrentAndTotalTime,\n  /**\n   * Displays the remaining time of the content\n   */\n  RemainingTime,\n}\n\nexport interface PlaybackTimeLabelConfig extends LabelConfig {\n  /**\n   * The type of which time should be displayed in the label.\n   * Default: PlaybackTimeLabelMode.CurrentAndTotalTime\n   */\n  timeLabelMode?: PlaybackTimeLabelMode;\n  /**\n   * Boolean if the label should be hidden in live playback\n   */\n  hideInLivePlayback?: boolean;\n}\n\n/**\n * A label that display the current playback time and the total time through {@link PlaybackTimeLabel#setTime setTime}\n * or any string through {@link PlaybackTimeLabel#setText setText}.\n */\nexport class PlaybackTimeLabel extends Label<PlaybackTimeLabelConfig> {\n\n  private timeFormat: string;\n\n  constructor(config: PlaybackTimeLabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <PlaybackTimeLabelConfig>{\n      cssClass: 'ui-playbacktimelabel',\n      timeLabelMode: PlaybackTimeLabelMode.CurrentAndTotalTime,\n      hideInLivePlayback: false,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let live = false;\n    let liveCssClass = this.prefixCss('ui-playbacktimelabel-live');\n    let liveEdgeCssClass = this.prefixCss('ui-playbacktimelabel-live-edge');\n    let minWidth = 0;\n\n    let liveClickHandler = () => {\n      player.timeShift(0);\n    };\n\n    let updateLiveState = () => {\n      // Player is playing a live stream when the duration is infinite\n      live = player.isLive();\n\n      // Attach/detach live marker class\n      if (live) {\n        this.getDomElement().addClass(liveCssClass);\n        this.setText(i18n.getLocalizer('live'));\n        if (config.hideInLivePlayback) {\n          this.hide();\n        }\n        this.onClick.subscribe(liveClickHandler);\n        updateLiveTimeshiftState();\n      } else {\n        this.getDomElement().removeClass(liveCssClass);\n        this.getDomElement().removeClass(liveEdgeCssClass);\n        this.show();\n        this.onClick.unsubscribe(liveClickHandler);\n      }\n    };\n\n    let updateLiveTimeshiftState = () => {\n      if (!live) {\n        return;\n      }\n\n      // The player is only at the live edge iff the stream is not shifted and it is actually playing or playback has\n      // never been started (meaning it isn't paused). A player that is paused is always behind the live edge.\n      // An exception is made for live streams without a timeshift window, because here we \"stop\" playback instead\n      // of pausing it (from a UI perspective), so we keep the live edge indicator on because a play would always\n      // resume at the live edge.\n      const isTimeshifted = player.getTimeShift() < 0;\n      const isTimeshiftAvailable = player.getMaxTimeShift() < 0;\n      if (!isTimeshifted && (!player.isPaused() || !isTimeshiftAvailable)) {\n        this.getDomElement().addClass(liveEdgeCssClass);\n      } else {\n        this.getDomElement().removeClass(liveEdgeCssClass);\n      }\n    };\n\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      live = args.live;\n      updateLiveState();\n    });\n    liveStreamDetector.detect(); // Initial detection\n\n    let playbackTimeHandler = () => {\n      if (!live && player.getDuration() !== Infinity) {\n        this.setTime(\n          PlayerUtils.getCurrentTimeRelativeToSeekableRange(player),\n          player.getDuration());\n      }\n\n      // To avoid 'jumping' in the UI by varying label sizes due to non-monospaced fonts,\n      // we gradually increase the min-width with the content to reach a stable size.\n      let width = this.getDomElement().width();\n      if (width > minWidth) {\n        minWidth = width;\n        this.getDomElement().css({\n          'min-width': minWidth + 'px',\n        });\n      }\n    };\n\n    let updateTimeFormatBasedOnDuration = () => {\n      // Set time format depending on source duration\n      this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?\n      StringUtils.FORMAT_HHMMSS : StringUtils.FORMAT_MMSS;\n      playbackTimeHandler();\n    };\n\n    player.on(player.exports.PlayerEvent.TimeChanged, playbackTimeHandler);\n    player.on(player.exports.PlayerEvent.Ready, updateTimeFormatBasedOnDuration);\n    player.on(player.exports.PlayerEvent.Seeked, playbackTimeHandler);\n\n    player.on(player.exports.PlayerEvent.TimeShift, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.TimeShifted, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.Playing, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.Paused, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.StallStarted, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.StallEnded, updateLiveTimeshiftState);\n\n    let init = () => {\n      // Reset min-width when a new source is ready (especially for switching VOD/Live modes where the label content\n      // changes)\n      minWidth = 0;\n      this.getDomElement().css({\n        'min-width': null,\n      });\n\n      updateTimeFormatBasedOnDuration();\n    };\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n\n    init();\n  }\n\n  /**\n   * Sets the current playback time and total duration.\n   * @param playbackSeconds the current playback time in seconds\n   * @param durationSeconds the total duration in seconds\n   */\n  setTime(playbackSeconds: number, durationSeconds: number) {\n    let currentTime = StringUtils.secondsToTime(playbackSeconds, this.timeFormat);\n    let totalTime = StringUtils.secondsToTime(durationSeconds, this.timeFormat);\n\n    switch ((<PlaybackTimeLabelConfig>this.config).timeLabelMode) {\n      case PlaybackTimeLabelMode.CurrentTime:\n        this.setText(`${currentTime}`);\n        break;\n      case PlaybackTimeLabelMode.TotalTime:\n        this.setText(`${totalTime}`);\n        break;\n      case PlaybackTimeLabelMode.CurrentAndTotalTime:\n        this.setText(`${currentTime} / ${totalTime}`);\n        break;\n      case PlaybackTimeLabelMode.RemainingTime:\n        let remainingTime = StringUtils.secondsToTime(durationSeconds - playbackSeconds, this.timeFormat);\n        this.setText(`${remainingTime}`);\n        break;\n    }\n  }\n\n  /**\n   * Sets the current time format\n   * @param timeFormat the time format\n   */\n  protected setTimeFormat(timeFormat: string): void {\n    this.timeFormat = timeFormat;\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport {PlayerUtils} from '../playerutils';\nimport { PlayerAPI, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\nexport interface PlaybackToggleButtonConfig extends ToggleButtonConfig {\n  /**\n   * Specify whether the player should be set to enter fullscreen by clicking on the playback toggle button\n   * when initiating the initial playback.\n   * Default is false.\n   */\n  enterFullscreenOnInitialPlayback?: boolean;\n}\n\n/**\n * A button that toggles between playback and pause.\n */\nexport class PlaybackToggleButton extends ToggleButton<PlaybackToggleButtonConfig> {\n\n  private static readonly CLASS_STOPTOGGLE = 'stoptoggle';\n  protected isPlayInitiated: boolean;\n\n  constructor(config: PlaybackToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbacktogglebutton',\n      text: i18n.getLocalizer('play'),\n      onAriaLabel: i18n.getLocalizer('pause'),\n      offAriaLabel: i18n.getLocalizer('play'),\n    }, this.config);\n\n    this.isPlayInitiated = false;\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager, handleClickEvent: boolean = true): void {\n    super.configure(player, uimanager);\n\n    // Set enterFullscreenOnInitialPlayback if set in the uimanager config\n    if (typeof uimanager.getConfig().enterFullscreenOnInitialPlayback === 'boolean') {\n      this.config.enterFullscreenOnInitialPlayback = uimanager.getConfig().enterFullscreenOnInitialPlayback;\n    }\n\n    let isSeeking = false;\n    let firstPlay = true;\n\n    // Handler to update button state based on player state\n    let playbackStateHandler = () => {\n      // If the UI is currently seeking, playback is temporarily stopped but the buttons should\n      // not reflect that and stay as-is (e.g indicate playback while seeking).\n      if (isSeeking) {\n        return;\n      }\n\n      if (player.isPlaying() || this.isPlayInitiated) {\n        this.on();\n      } else {\n        this.off();\n      }\n    };\n\n    // Call handler upon these events\n    player.on(player.exports.PlayerEvent.Play, (e) => {\n      this.isPlayInitiated = true;\n      firstPlay = false;\n      playbackStateHandler();\n    });\n\n    player.on(player.exports.PlayerEvent.Paused, (e) => {\n      this.isPlayInitiated = false;\n      playbackStateHandler();\n    });\n\n    player.on(player.exports.PlayerEvent.Playing, (e) => {\n      this.isPlayInitiated = false;\n      playbackStateHandler();\n    });\n    // after unloading + loading a new source, the player might be in a different playing state (from playing into stopped)\n    player.on(player.exports.PlayerEvent.SourceLoaded, playbackStateHandler);\n    uimanager.getConfig().events.onUpdated.subscribe(playbackStateHandler);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, playbackStateHandler);\n    // when playback finishes, player turns to paused mode\n    player.on(player.exports.PlayerEvent.PlaybackFinished, playbackStateHandler);\n    player.on(player.exports.PlayerEvent.CastStarted, playbackStateHandler);\n\n    // When a playback attempt is rejected with warning 5008, we switch the button state back to off\n    // This is required for blocked autoplay, because there is no Paused event in such case\n    player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n      if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n        this.isPlayInitiated = false;\n        firstPlay = true;\n        this.off();\n      }\n    });\n\n    const updateLiveState = () => {\n      const showStopToggle = player.isLive() && !PlayerUtils.isTimeShiftAvailable(player);\n\n      if (showStopToggle) {\n        this.getDomElement().addClass(this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));\n      } else {\n        this.getDomElement().removeClass(this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));\n      }\n    };\n\n    // Detect absence of timeshifting on live streams and add tagging class to convert button icons to play/stop\n    let timeShiftDetector = new PlayerUtils.TimeShiftAvailabilityDetector(player);\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n\n    timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe(() => updateLiveState());\n    liveStreamDetector.onLiveChanged.subscribe(() => updateLiveState());\n\n    timeShiftDetector.detect(); // Initial detection\n    liveStreamDetector.detect();\n\n    if (handleClickEvent) {\n      // Control player by button events\n      // When a button event triggers a player API call, events are fired which in turn call the event handler\n      // above that updated the button state.\n      this.onClick.subscribe(() => {\n        if (player.isPlaying() || this.isPlayInitiated) {\n          player.pause('ui');\n        } else {\n          player.play('ui');\n\n          if (firstPlay && this.config.enterFullscreenOnInitialPlayback) {\n            player.setViewMode(player.exports.ViewMode.Fullscreen);\n          }\n        }\n      });\n    }\n\n    // Track UI seeking status\n    uimanager.onSeek.subscribe(() => {\n      isSeeking = true;\n    });\n    uimanager.onSeeked.subscribe(() => {\n      isSeeking = false;\n    });\n\n    // Startup init\n    playbackStateHandler();\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {HugePlaybackToggleButton} from './hugeplaybacktogglebutton';\n\nexport interface PlaybackToggleOverlayConfig extends ContainerConfig {\n  /**\n   * Specify whether the player should be set to enter fullscreen by clicking on the playback toggle button\n   * when initiating the initial playback.\n   * Default is false.\n   */\n  enterFullscreenOnInitialPlayback?: boolean;\n}\n\n/**\n * Overlays the player and displays error messages.\n */\nexport class PlaybackToggleOverlay extends Container<PlaybackToggleOverlayConfig> {\n\n  private playbackToggleButton: HugePlaybackToggleButton;\n\n  constructor(config: PlaybackToggleOverlayConfig = {}) {\n    super(config);\n\n    this.playbackToggleButton = new HugePlaybackToggleButton({\n      enterFullscreenOnInitialPlayback: Boolean(config.enterFullscreenOnInitialPlayback),\n    });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbacktoggle-overlay',\n      components: [this.playbackToggleButton],\n    }, this.config);\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {Component, ComponentConfig} from './component';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport {HugeReplayButton} from './hugereplaybutton';\nimport { UIRecommendationConfig } from '../uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Overlays the player and displays recommended videos.\n */\nexport class RecommendationOverlay extends Container<ContainerConfig> {\n\n  private replayButton: HugeReplayButton;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.replayButton = new HugeReplayButton();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-recommendation-overlay',\n      hidden: true,\n      components: [this.replayButton],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let clearRecommendations = () => {\n      for (let component of this.getComponents().slice()) {\n        if (component instanceof RecommendationItem) {\n          this.removeComponent(component);\n        }\n      }\n      this.updateComponents();\n      this.getDomElement().removeClass(this.prefixCss('recommendations'));\n    };\n\n    let setupRecommendations = () => {\n      clearRecommendations();\n\n      const recommendations = uimanager.getConfig().recommendations;\n\n      if (recommendations.length > 0) {\n        let index = 1;\n        for (let item of recommendations) {\n          this.addComponent(new RecommendationItem({\n            itemConfig: item,\n            cssClasses: ['recommendation-item-' + (index++)],\n          }));\n        }\n        this.updateComponents(); // create container DOM elements\n\n        this.getDomElement().addClass(this.prefixCss('recommendations'));\n      }\n    };\n\n    uimanager.getConfig().events.onUpdated.subscribe(setupRecommendations);\n    // Remove recommendations and hide overlay when source is unloaded\n    player.on(player.exports.PlayerEvent.SourceUnloaded, () => {\n      clearRecommendations();\n      this.hide();\n    });\n    // Display recommendations when playback has finished\n    player.on(player.exports.PlayerEvent.PlaybackFinished, () => {\n      this.show();\n    });\n    // Hide recommendations when playback starts, e.g. a restart\n    player.on(player.exports.PlayerEvent.Play, () => {\n      this.hide();\n    });\n\n    // Init on startup\n    setupRecommendations();\n  }\n}\n\n/**\n * Configuration interface for the {@link RecommendationItem}\n */\ninterface RecommendationItemConfig extends ComponentConfig {\n  itemConfig: UIRecommendationConfig;\n}\n\n/**\n * An item of the {@link RecommendationOverlay}. Used only internally in {@link RecommendationOverlay}.\n */\nclass RecommendationItem extends Component<RecommendationItemConfig> {\n\n  constructor(config: RecommendationItemConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-recommendation-item',\n      itemConfig: null, // this must be passed in from outside\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let config = this.config.itemConfig;\n\n    let itemElement = new DOM('a', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'href': config.url,\n    }).css({ 'background-image': `url(${config.thumbnail})` });\n\n    let bgElement = new DOM('div', {\n      'class': this.prefixCss('background'),\n    });\n    itemElement.append(bgElement);\n\n    let titleElement = new DOM('span', {\n      'class': this.prefixCss('title'),\n    }).append(new DOM('span', {\n      'class': this.prefixCss('innertitle'),\n    }).html(config.title));\n    itemElement.append(titleElement);\n\n    let timeElement = new DOM('span', {\n      'class': this.prefixCss('duration'),\n    }).append(new DOM('span', {\n      'class': this.prefixCss('innerduration'),\n    }).html(config.duration ? StringUtils.secondsToTime(config.duration) : ''));\n    itemElement.append(timeElement);\n\n    return itemElement;\n  }\n}","import { ButtonConfig, Button } from './button';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\nimport { PlayerUtils } from '../playerutils';\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\n\n/**\n * A button to play/replay a video.\n */\nexport class ReplayButton extends Button<ButtonConfig> {\n\n  constructor(config: ButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-replaybutton',\n      text: i18n.getLocalizer('replay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    if (player.isLive()) {\n      this.hide();\n    }\n\n    const liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      if (args.live) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    });\n\n    this.onClick.subscribe(() => {\n      if (!player.hasEnded()) {\n        player.seek(0);\n        // Not calling `play` will keep the play/pause state as is\n      } else {\n        // If playback has already ended, calling `play` will automatically restart from the beginning\n        player.play('ui');\n      }\n    });\n  }\n}\n","import { ExtendedPlayerAPI, GroupPlaybackSuspension, GroupPlaybackSuspensionReason } from './../groupplaybackapi';\nimport { Component, ComponentConfig } from './component';\nimport { DOM } from '../dom';\nimport { Event, EventDispatcher, NoArgs } from '../eventdispatcher';\nimport { SeekBarLabel } from './seekbarlabel';\nimport { UIInstanceManager, SeekPreviewArgs } from '../uimanager';\nimport { Timeout } from '../timeout';\nimport { PlayerUtils } from '../playerutils';\nimport TimeShiftAvailabilityChangedArgs = PlayerUtils.TimeShiftAvailabilityChangedArgs;\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\nimport { TimelineMarker } from '../uiconfig';\nimport { PlayerAPI, PlayerEventBase } from 'bitmovin-player';\nimport { StringUtils } from '../stringutils';\nimport { SeekBarType, SeekBarController } from './seekbarcontroller';\nimport { i18n } from '../localization/i18n';\nimport { BrowserUtils } from '../browserutils';\nimport { TimelineMarkersHandler } from './timelinemarkershandler';\nimport { getMinBufferLevel } from './seekbarbufferlevel';\n\n/**\n * Configuration interface for the {@link SeekBar} component.\n */\nexport interface SeekBarConfig extends ComponentConfig {\n  /**\n   * The label above the seek position.\n   */\n  label?: SeekBarLabel;\n  /**\n   * Bar will be vertical instead of horizontal if set to true.\n   */\n  vertical?: boolean;\n  /**\n   * The interval in milliseconds in which the playback position on the seek bar will be updated. The shorter the\n   * interval, the smoother it looks and the more resource intense it is. The update interval will be kept as steady\n   * as possible to avoid jitter.\n   * Set to -1 to disable smooth updating and update it on player TimeChanged events instead.\n   * Default: 50 (50ms = 20fps).\n   */\n  smoothPlaybackPositionUpdateIntervalMs?: number;\n\n  /**\n   * Used for seekBar control increments and decrements\n   */\n  keyStepIncrements?: { leftRight: number, upDown: number };\n\n  /**\n   * Used for seekBar marker snapping range percentage\n   */\n  snappingRange?: number;\n\n  /**\n   * Used to enable/disable seek preview\n   */\n  enableSeekPreview?: boolean;\n}\n\n/**\n * Event argument interface for a seek preview event.\n */\nexport interface SeekPreviewEventArgs extends SeekPreviewArgs {\n  /**\n   * Tells if the seek preview event comes from a scrubbing.\n   */\n  scrubbing: boolean;\n}\n\nexport interface SeekBarMarker {\n  marker: TimelineMarker;\n  position: number;\n  duration?: number;\n  element?: DOM;\n}\n\n/**\n * A seek bar to seek within the player's media. It displays the current playback position, amount of buffed data, seek\n * target, and keeps status about an ongoing seek.\n *\n * The seek bar displays different 'bars':\n *  - the playback position, i.e. the position in the media at which the player current playback pointer is positioned\n *  - the buffer position, which usually is the playback position plus the time span that is already buffered ahead\n *  - the seek position, used to preview to where in the timeline a seek will jump to\n */\nexport class SeekBar extends Component<SeekBarConfig> {\n\n  public static readonly SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED = -1;\n\n  /**\n   * The CSS class that is added to the DOM element while the seek bar is in 'seeking' state.\n   */\n  private static readonly CLASS_SEEKING = 'seeking';\n\n  private seekBar: DOM;\n  private seekBarPlaybackPosition: DOM;\n  private seekBarPlaybackPositionMarker: DOM;\n  private seekBarBufferPosition: DOM;\n  private seekBarSeekPosition: DOM;\n  private seekBarBackdrop: DOM;\n\n  private label: SeekBarLabel;\n\n  private seekBarMarkersContainer: DOM;\n  private timelineMarkersHandler: TimelineMarkersHandler;\n\n  private player: PlayerAPI;\n\n  protected seekBarType: SeekBarType;\n\n  protected isUiShown: boolean;\n\n  /**\n   * Buffer of the the current playback position. The position must be buffered in case the element\n   * needs to be refreshed with {@link #refreshPlaybackPosition}.\n   * @type {number}\n   */\n  private playbackPositionPercentage = 0;\n\n  private smoothPlaybackPositionUpdater: Timeout;\n  private pausedTimeshiftUpdater: Timeout;\n\n  private isUserSeeking = false;\n\n  private seekBarEvents = {\n    /**\n     * Fired when a scrubbing seek operation is started.\n     */\n    onSeek: new EventDispatcher<SeekBar, NoArgs>(),\n    /**\n     * Fired during a scrubbing seek to indicate that the seek preview (i.e. the video frame) should be updated.\n     */\n    onSeekPreview: new EventDispatcher<SeekBar, SeekPreviewEventArgs>(),\n    /**\n     * Fired when a scrubbing seek has finished or when a direct seek is issued.\n     */\n    onSeeked: new EventDispatcher<SeekBar, number>(),\n  };\n\n  constructor(config: SeekBarConfig = {}) {\n    super(config);\n\n    const keyStepIncrements = this.config.keyStepIncrements || {\n      leftRight: 1,\n      upDown: 5,\n    };\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-seekbar',\n      vertical: false,\n      smoothPlaybackPositionUpdateIntervalMs: 50,\n      keyStepIncrements,\n      ariaLabel: i18n.getLocalizer('seekBar'),\n      tabIndex: 0,\n      snappingRange: 1,\n      enableSeekPreview: true,\n    }, this.config);\n\n    this.label = this.config.label;\n  }\n\n  initialize(): void {\n    super.initialize();\n\n    if (this.hasLabel()) {\n      this.getLabel().initialize();\n    }\n  }\n\n  protected setAriaSliderMinMax(min: string, max: string) {\n    this.getDomElement().attr('aria-valuemin', min);\n    this.getDomElement().attr('aria-valuemax', max);\n  }\n\n  private setAriaSliderValues() {\n    if (this.seekBarType === SeekBarType.Live) {\n      const timeshiftValue = Math.ceil(this.player.getTimeShift()).toString();\n      this.getDomElement().attr('aria-valuenow', timeshiftValue);\n      this.getDomElement().attr('aria-valuetext', `${i18n.performLocalization(i18n.getLocalizer('seekBar.timeshift'))} ${i18n.performLocalization(i18n.getLocalizer('seekBar.value'))}: ${timeshiftValue}`);\n    } else if (this.seekBarType === SeekBarType.Vod) {\n      const ariaValueText = `${StringUtils.secondsToText(this.player.getCurrentTime())} ${i18n.performLocalization(i18n.getLocalizer('seekBar.durationText'))} ${StringUtils.secondsToText(this.player.getDuration())}`;\n      this.getDomElement().attr('aria-valuenow', Math.floor(this.player.getCurrentTime()).toString());\n      this.getDomElement().attr('aria-valuetext', ariaValueText);\n    }\n  }\n\n  private getPlaybackPositionPercentage(): number {\n    if (this.player.isLive()) {\n      return 100 - (100 / this.player.getMaxTimeShift() * this.player.getTimeShift());\n    }\n\n    return 100 / this.player.getDuration() * this.getRelativeCurrentTime();\n  }\n\n  private updateBufferLevel(playbackPositionPercentage: number): void {\n\n    let bufferLoadedPercentageLevel: number;\n    if (this.player.isLive()) {\n      // Always show full buffer for live streams\n      bufferLoadedPercentageLevel = 100;\n    } else {\n      bufferLoadedPercentageLevel = playbackPositionPercentage + getMinBufferLevel(this.player);\n    }\n\n    this.setBufferPosition(bufferLoadedPercentageLevel);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager, configureSeek: boolean = true): void {\n    super.configure(player, uimanager);\n\n    this.player = player;\n\n    // Apply scaling transform to the backdrop bar to have all bars rendered similarly\n    // (the call must be up here to be executed for the volume slider as well)\n    this.setPosition(this.seekBarBackdrop, 100);\n\n    // Add seekbar controls to the seekbar\n    const seekBarController = new SeekBarController(this.config.keyStepIncrements, player, uimanager.getConfig().volumeController);\n\n    seekBarController.setSeekBarControls(this.getDomElement(), () => this.seekBarType);\n\n    // The configureSeek flag can be used by subclasses to disable configuration as seek bar. E.g. the volume\n    // slider is reusing this component but adds its own functionality, and does not need the seek functionality.\n    // This is actually a hack, the proper solution would be for both seek bar and volume sliders to extend\n    // a common base slider component and implement their functionality there.\n    if (!configureSeek) {\n      this.seekBarType = SeekBarType.Volume;\n\n      return;\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      this.isUiShown = true;\n    });\n\n    uimanager.onControlsHide.subscribe(() => {\n      this.isUiShown = false;\n    });\n\n    let isPlaying = false;\n    let scrubbing = false;\n    let isPlayerSeeking = false;\n    let suspension: GroupPlaybackSuspension | undefined;\n\n    // Update playback and buffer positions\n    let playbackPositionHandler = (event: PlayerEventBase = null, forceUpdate: boolean = false) => {\n      if (this.isUserSeeking) {\n        // We caught a seek preview seek, do not update the seekbar\n        return;\n      }\n\n      let playbackPositionPercentage = this.getPlaybackPositionPercentage();\n\n      this.updateBufferLevel(playbackPositionPercentage);\n\n      // The segment request finished is used to help the playback position move, when the smooth playback position is not enabled.\n      // At the same time when the user is scrubbing, we also move the position of the seekbar to display a preview during scrubbing.\n      // When the user is scrubbing we do not record this as a user seek operation, as the user has yet to finish their seek,\n      // but we should not move the playback position to not create a jumping behaviour.\n      if (scrubbing && event && event.type === player.exports.PlayerEvent.SegmentRequestFinished && playbackPositionPercentage !== this.playbackPositionPercentage) {\n        playbackPositionPercentage = this.playbackPositionPercentage;\n      }\n\n      if (player.isLive()) {\n        if (player.getMaxTimeShift() === 0) {\n          // This case must be explicitly handled to avoid division by zero\n          this.setPlaybackPosition(100);\n        } else {\n          if (!this.isSeeking()) {\n            this.setPlaybackPosition(playbackPositionPercentage);\n          }\n\n          this.setAriaSliderMinMax(player.getMaxTimeShift().toString(), '0');\n        }\n      } else {\n        // Update playback position only in paused state or in the initial startup state where player is neither\n        // paused nor playing. Playback updates are handled in the Timeout below.\n        const isInInitialStartupState = this.config.smoothPlaybackPositionUpdateIntervalMs === SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED\n            || forceUpdate || player.isPaused();\n        const isNeitherPausedNorPlaying = player.isPaused() === player.isPlaying();\n\n        if ((isInInitialStartupState || isNeitherPausedNorPlaying) && !this.isSeeking()) {\n          this.setPlaybackPosition(playbackPositionPercentage);\n        }\n\n        this.setAriaSliderMinMax('0', player.getDuration().toString());\n      }\n\n      if (this.isUiShown) {\n        this.setAriaSliderValues();\n      }\n    };\n\n    // Update seekbar upon these events\n    // init playback position when the player is ready\n    player.on(player.exports.PlayerEvent.Ready, playbackPositionHandler);\n    // update playback position when it changes\n    player.on(player.exports.PlayerEvent.TimeChanged, playbackPositionHandler);\n    // update bufferlevel when buffering is complete\n    player.on(player.exports.PlayerEvent.StallEnded, playbackPositionHandler);\n    // update playback position when a timeshift has finished\n    player.on(player.exports.PlayerEvent.TimeShifted, playbackPositionHandler);\n    // update bufferlevel when a segment has been downloaded\n    player.on(player.exports.PlayerEvent.SegmentRequestFinished, playbackPositionHandler);\n\n    this.configureLivePausedTimeshiftUpdater(player, uimanager, playbackPositionHandler);\n\n    // Seek handling\n    let onPlayerSeek = () => {\n      isPlayerSeeking = true;\n      this.setSeeking(true);\n      scrubbing = false;\n    };\n\n    let onPlayerSeeked = (event: PlayerEventBase = null, forceUpdate: boolean = false ) => {\n      isPlayerSeeking = false;\n      this.setSeeking(false);\n\n      // update playback position when a seek has finished\n      playbackPositionHandler(event, forceUpdate);\n    };\n\n    let restorePlayingState = function () {\n      // Continue playback after seek if player was playing when seek started\n      if (isPlaying) {\n        // use the same issuer here as in the pause on seek\n        player.play('ui-seek');\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.Seek, onPlayerSeek);\n    player.on(player.exports.PlayerEvent.Seeked, onPlayerSeeked);\n    player.on(player.exports.PlayerEvent.TimeShift, onPlayerSeek);\n    player.on(player.exports.PlayerEvent.TimeShifted, onPlayerSeeked);\n\n    let isGroupPlaybackAPIAvailable = (player: PlayerAPI): player is ExtendedPlayerAPI => {\n      return !!(player as ExtendedPlayerAPI).groupPlayback;\n    };\n\n    this.onSeek.subscribe((sender) => {\n      // track seeking status so we can catch events from seek preview seeks\n      this.isUserSeeking = true;\n      // Notify UI manager of started seek\n      uimanager.onSeek.dispatch(sender);\n\n      if (isGroupPlaybackAPIAvailable(player) && player.groupPlayback.hasJoined() && !suspension) {\n        suspension = player.groupPlayback.beginSuspension(GroupPlaybackSuspensionReason.UserIsScrubbing);\n      }\n\n      // Save current playback state before performing the seek\n      if (!isPlayerSeeking) {\n        isPlaying = player.isPlaying();\n\n        // Pause playback while seeking\n        if (isPlaying) {\n          // use a different issuer here, as play/pause on seek is not \"really\" triggerd by the user\n          player.pause('ui-seek');\n        }\n      }\n    });\n\n    this.onSeekPreview.subscribe((sender: SeekBar, args: SeekPreviewEventArgs) => {\n      // Notify UI manager of seek preview\n      uimanager.onSeekPreview.dispatch(sender, args);\n      scrubbing = args.scrubbing;\n    });\n\n    // Set enableSeekPreview if set in the uimanager config\n    if (typeof uimanager.getConfig().enableSeekPreview === 'boolean') {\n      this.config.enableSeekPreview = uimanager.getConfig().enableSeekPreview;\n    }\n\n    // Rate-limited scrubbing seek\n    if (this.config.enableSeekPreview) {\n      this.onSeekPreview.subscribeRateLimited(this.seekWhileScrubbing, 200);\n    }\n\n    this.onSeeked.subscribe((sender, percentage) => {\n      this.isUserSeeking = false;\n\n      // Do the seek\n      this.seek(percentage);\n\n      // Notify UI manager of finished seek\n      uimanager.onSeeked.dispatch(sender);\n\n      // Continue playback after seek if player was playing when seek started\n      restorePlayingState();\n\n      if (isGroupPlaybackAPIAvailable(player) && player.groupPlayback.hasJoined() && suspension) {\n        const proposedPlaybackTime = this.getTargetSeekPosition(percentage);\n        player.groupPlayback.endSuspension(suspension, { proposedPlaybackTime });\n        suspension = undefined;\n      }\n    });\n\n    if (this.hasLabel()) {\n      // Configure a seekbar label that is internal to the seekbar)\n      this.getLabel().configure(player, uimanager);\n    }\n\n    // Hide seekbar for live sources without timeshift\n    let isLive = false;\n    let hasTimeShift = false;\n    let switchVisibility = (isLive: boolean, hasTimeShift: boolean) => {\n      if (isLive && !hasTimeShift) {\n        this.hide();\n      } else {\n        this.show();\n      }\n      playbackPositionHandler(null, true);\n      this.refreshPlaybackPosition();\n    };\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      isLive = args.live;\n      if (isLive && this.smoothPlaybackPositionUpdater != null) {\n        this.smoothPlaybackPositionUpdater.clear();\n        this.seekBarType = SeekBarType.Live;\n      } else {\n        this.seekBarType = SeekBarType.Vod;\n      }\n      switchVisibility(isLive, hasTimeShift);\n    });\n    let timeShiftDetector = new PlayerUtils.TimeShiftAvailabilityDetector(player);\n    timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe((sender, args: TimeShiftAvailabilityChangedArgs) => {\n      hasTimeShift = args.timeShiftAvailable;\n      switchVisibility(isLive, hasTimeShift);\n    });\n    // Initial detection\n    liveStreamDetector.detect();\n    timeShiftDetector.detect();\n\n    // Refresh the playback position when the player resized or the UI is configured. The playback position marker\n    // is positioned absolutely and must therefore be updated when the size of the seekbar changes.\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      this.refreshPlaybackPosition();\n    });\n    // Additionally, when this code is called, the seekbar is not part of the UI yet and therefore does not have a size,\n    // resulting in a wrong initial position of the marker. Refreshing it once the UI is configured solved this issue.\n    uimanager.onConfigured.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n    // It can also happen when a new source is loaded\n    player.on(player.exports.PlayerEvent.SourceLoaded, () => {\n      this.refreshPlaybackPosition();\n    });\n    // Add markers when a source is loaded or update when a marker is added or removed\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      playbackPositionHandler();\n    });\n\n    // Set the snappingRange if set in the uimanager config\n    if (typeof uimanager.getConfig().seekbarSnappingRange === 'number') {\n      this.config.snappingRange = uimanager.getConfig().seekbarSnappingRange;\n    }\n\n    // Initialize seekbar\n    playbackPositionHandler(); // Set the playback position\n    this.setBufferPosition(0);\n    this.setSeekPosition(0);\n    if (this.config.smoothPlaybackPositionUpdateIntervalMs !== SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED) {\n      this.configureSmoothPlaybackPositionUpdater(player, uimanager);\n    }\n\n    // Initialize markers\n    this.initializeTimelineMarkers(player, uimanager);\n  }\n\n  private initializeTimelineMarkers(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    const timelineMarkerConfig = {\n      cssPrefix: this.config.cssPrefix,\n      snappingRange: this.config.snappingRange,\n    };\n    this.timelineMarkersHandler = new TimelineMarkersHandler(timelineMarkerConfig, () => this.seekBar.width(), this.seekBarMarkersContainer);\n    this.timelineMarkersHandler.initialize(player, uimanager);\n  }\n\n  private seekWhileScrubbing = (sender: SeekBar, args: SeekPreviewEventArgs) => {\n    if (args.scrubbing) {\n      this.seek(args.position);\n    }\n  };\n\n  private getTargetSeekPosition = (percentage: number) => {\n    let target: number;\n    if (this.player.isLive()) {\n      const maxTimeShift = this.player.getMaxTimeShift();\n      target = maxTimeShift - (maxTimeShift * (percentage / 100));\n    } else {\n      const seekableRangeStart = PlayerUtils.getSeekableRangeStart(this.player, 0);\n      const relativeSeekTarget = this.player.getDuration() * (percentage / 100);\n      target = relativeSeekTarget + seekableRangeStart;\n    }\n\n    return target;\n  }\n\n  private seek = (percentage: number) => {\n    const targetPlaybackPosition = this.getTargetSeekPosition(percentage);\n    if (this.player.isLive()) {\n      this.player.timeShift(targetPlaybackPosition, 'ui');\n    } else {\n      this.player.seek(targetPlaybackPosition, 'ui');\n    }\n  };\n\n  /**\n   * Update seekbar while a live stream with DVR window is paused.\n   * The playback position stays still and the position indicator visually moves towards the back.\n   */\n  private configureLivePausedTimeshiftUpdater(\n    player: PlayerAPI,\n    uimanager: UIInstanceManager,\n    playbackPositionHandler: () => void,\n  ): void {\n    // Regularly update the playback position while the timeout is active\n    this.pausedTimeshiftUpdater = new Timeout(1000, playbackPositionHandler, true);\n\n    // Start updater when a live stream with timeshift window is paused\n    player.on(player.exports.PlayerEvent.Paused, () => {\n      if (player.isLive() && player.getMaxTimeShift() < 0) {\n        this.pausedTimeshiftUpdater.start();\n      }\n    });\n\n    // Stop updater when playback continues (no matter if the updater was started before)\n    player.on(player.exports.PlayerEvent.Play, () => this.pausedTimeshiftUpdater.clear());\n  }\n\n  private configureSmoothPlaybackPositionUpdater(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    /*\n     * Playback position update\n     *\n     * We do not update the position directly from the TimeChanged event, because it arrives very jittery and\n     * results in a jittery position indicator since the CSS transition time is statically set.\n     * To work around this issue, we maintain a local playback position that is updated in a stable regular interval\n     * and kept in sync with the player.\n     */\n    let currentTimeSeekBar = 0;\n    let currentTimePlayer = 0;\n    let updateIntervalMs = 50;\n    let currentTimeUpdateDeltaSecs = updateIntervalMs / 1000;\n\n    this.smoothPlaybackPositionUpdater = new Timeout(updateIntervalMs, () => {\n      if (this.isSeeking()) {\n        return;\n      }\n\n      currentTimeSeekBar += currentTimeUpdateDeltaSecs;\n\n      try {\n        currentTimePlayer = this.getRelativeCurrentTime();\n      } catch (error) {\n        // Detect if the player has been destroyed and stop updating if so\n        if (error instanceof player.exports.PlayerAPINotAvailableError) {\n          this.smoothPlaybackPositionUpdater.clear();\n        }\n\n        // If the current time cannot be read it makes no sense to continue\n        return;\n      }\n\n      // Sync currentTime of seekbar to player\n      let currentTimeDelta = currentTimeSeekBar - currentTimePlayer;\n      // If the delta is larger that 2 secs, directly jump the seekbar to the\n      // player time instead of smoothly fast forwarding/rewinding.\n      if (Math.abs(currentTimeDelta) > 2) {\n        currentTimeSeekBar = currentTimePlayer;\n      }\n      // If currentTimeDelta is negative and below the adjustment threshold,\n      // the player is ahead of the seekbar and we 'fast forward' the seekbar\n      else if (currentTimeDelta <= -currentTimeUpdateDeltaSecs) {\n        currentTimeSeekBar += currentTimeUpdateDeltaSecs;\n      }\n      // If currentTimeDelta is positive and above the adjustment threshold,\n      // the player is behind the seekbar and we 'rewind' the seekbar\n      else if (currentTimeDelta >= currentTimeUpdateDeltaSecs) {\n        currentTimeSeekBar -= currentTimeUpdateDeltaSecs;\n      }\n\n      let playbackPositionPercentage = 100 / player.getDuration() * currentTimeSeekBar;\n      this.setPlaybackPosition(playbackPositionPercentage);\n    }, true);\n\n    let startSmoothPlaybackPositionUpdater = () => {\n      if (!player.isLive()) {\n        currentTimeSeekBar = this.getRelativeCurrentTime();\n        this.smoothPlaybackPositionUpdater.start();\n      }\n    };\n\n    let stopSmoothPlaybackPositionUpdater = () => {\n      this.smoothPlaybackPositionUpdater.clear();\n    };\n\n    player.on(player.exports.PlayerEvent.Play, startSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Playing, startSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Paused, stopSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.PlaybackFinished, stopSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Seeked, () => {\n      currentTimeSeekBar = this.getRelativeCurrentTime();\n    });\n    player.on(player.exports.PlayerEvent.SourceUnloaded, stopSmoothPlaybackPositionUpdater);\n\n    if (player.isPlaying()) {\n      startSmoothPlaybackPositionUpdater();\n    }\n  }\n\n  private getRelativeCurrentTime(): number {\n    return PlayerUtils.getCurrentTimeRelativeToSeekableRange(this.player);\n  }\n\n  release(): void {\n    super.release();\n\n    if (this.smoothPlaybackPositionUpdater) { // object must not necessarily exist, e.g. in volume slider subclass\n      this.smoothPlaybackPositionUpdater.clear();\n    }\n\n    if (this.pausedTimeshiftUpdater) {\n      this.pausedTimeshiftUpdater.clear();\n    }\n\n    if (this.config.enableSeekPreview) {\n      this.onSeekPreview.unsubscribe(this.seekWhileScrubbing);\n    }\n  }\n\n  protected toDomElement(): DOM {\n    if (this.config.vertical) {\n      this.config.cssClasses.push('vertical');\n    }\n\n    let seekBarContainer = new DOM('div', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'role': 'slider',\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\n      'tabindex': this.config.tabIndex.toString(),\n    });\n\n    let seekBar = new DOM('div', {\n      'class': this.prefixCss('seekbar'),\n    });\n    this.seekBar = seekBar;\n\n    // Indicator that shows the buffer fill level\n    let seekBarBufferLevel = new DOM('div', {\n      'class': this.prefixCss('seekbar-bufferlevel'),\n    });\n    this.seekBarBufferPosition = seekBarBufferLevel;\n\n    // Indicator that shows the current playback position\n    let seekBarPlaybackPosition = new DOM('div', {\n      'class': this.prefixCss('seekbar-playbackposition'),\n    });\n    this.seekBarPlaybackPosition = seekBarPlaybackPosition;\n\n    // A marker of the current playback position, e.g. a dot or line\n    let seekBarPlaybackPositionMarker = new DOM('div', {\n      'class': this.prefixCss('seekbar-playbackposition-marker'),\n    });\n    this.seekBarPlaybackPositionMarker = seekBarPlaybackPositionMarker;\n\n    // Indicator that show where a seek will go to\n    let seekBarSeekPosition = new DOM('div', {\n      'class': this.prefixCss('seekbar-seekposition'),\n    });\n    this.seekBarSeekPosition = seekBarSeekPosition;\n\n    // Indicator that shows the full seekbar\n    let seekBarBackdrop = new DOM('div', {\n      'class': this.prefixCss('seekbar-backdrop'),\n    });\n    this.seekBarBackdrop = seekBarBackdrop;\n\n    let seekBarChapterMarkersContainer = new DOM('div', {\n      'class': this.prefixCss('seekbar-markers'),\n    });\n    this.seekBarMarkersContainer = seekBarChapterMarkersContainer;\n\n    seekBar.append(this.seekBarBackdrop, this.seekBarBufferPosition, this.seekBarSeekPosition,\n      this.seekBarPlaybackPosition, this.seekBarMarkersContainer, this.seekBarPlaybackPositionMarker);\n\n    let seeking = false;\n\n    // Define handler functions so we can attach/remove them later\n    let mouseTouchMoveHandler = (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n      // Avoid propagation to VR handler\n      if (this.player.vr != null) {\n        e.stopPropagation();\n      }\n\n      let targetPercentage = 100 * this.getOffset(e);\n      this.setSeekPosition(targetPercentage);\n      this.setPlaybackPosition(targetPercentage);\n      this.onSeekPreviewEvent(targetPercentage, true);\n    };\n\n    let mouseTouchUpHandler = (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      // Remove handlers, seek operation is finished\n      new DOM(document).off('touchmove mousemove', mouseTouchMoveHandler);\n      new DOM(document).off('touchend mouseup', mouseTouchUpHandler);\n\n      let targetPercentage = 100 * this.getOffset(e);\n      let snappedChapter = this.timelineMarkersHandler && this.timelineMarkersHandler.getMarkerAtPosition(targetPercentage);\n\n      this.setSeeking(false);\n      seeking = false;\n\n      // Fire seeked event\n      this.onSeekedEvent(snappedChapter ? snappedChapter.position : targetPercentage);\n    };\n\n    // A seek always start with a touchstart or mousedown directly on the seekbar.\n    // To track a mouse seek also outside the seekbar (for touch events this works automatically),\n    // so the user does not need to take care that the mouse always stays on the seekbar, we attach the mousemove\n    // and mouseup handlers to the whole document. A seek is triggered when the user lifts the mouse key.\n    // A seek mouse gesture is thus basically a click with a long time frame between down and up events.\n    seekBar.on('touchstart mousedown', (e: MouseEvent | TouchEvent) => {\n      let isTouchEvent = BrowserUtils.isTouchSupported && this.isTouchEvent(e);\n\n      // Prevent selection of DOM elements (also prevents mousedown if current event is touchstart)\n      e.preventDefault();\n      // Avoid propagation to VR handler\n      if (this.player.vr != null) {\n        e.stopPropagation();\n      }\n\n      this.setSeeking(true); // Set seeking class on DOM element\n      seeking = true; // Set seek tracking flag\n\n      // Fire seeked event\n      this.onSeekEvent();\n\n      // Add handler to track the seek operation over the whole document\n      new DOM(document).on(isTouchEvent ? 'touchmove' : 'mousemove', mouseTouchMoveHandler);\n      new DOM(document).on(isTouchEvent ? 'touchend' : 'mouseup', mouseTouchUpHandler);\n    });\n\n    // Display seek target indicator when mouse hovers or finger slides over seekbar\n    seekBar.on('touchmove mousemove', (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      if (seeking) {\n        mouseTouchMoveHandler(e);\n      }\n\n      let position = 100 * this.getOffset(e);\n      this.setSeekPosition(position);\n\n      this.onSeekPreviewEvent(position, false);\n\n      if (this.hasLabel() && this.getLabel().isHidden()) {\n        this.getLabel().show();\n      }\n    });\n\n    // Hide seek target indicator when mouse or finger leaves seekbar\n    seekBar.on('touchend mouseleave', (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      this.setSeekPosition(0);\n\n      if (this.hasLabel()) {\n        this.getLabel().hide();\n      }\n    });\n\n    seekBarContainer.append(seekBar);\n\n    if (this.label) {\n      seekBarContainer.append(this.label.getDomElement());\n    }\n\n    return seekBarContainer;\n  }\n\n  /**\n   * Gets the horizontal offset of a mouse/touch event point from the left edge of the seek bar.\n   * @param eventPageX the pageX coordinate of an event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1], where 0 is the left edge and 1 is the right edge\n   */\n  private getHorizontalOffset(eventPageX: number): number {\n    let elementOffsetPx = this.seekBar.offset().left;\n    let widthPx = this.seekBar.width();\n    let offsetPx = eventPageX - elementOffsetPx;\n    let offset = 1 / widthPx * offsetPx;\n\n    return this.sanitizeOffset(offset);\n  }\n\n  /**\n   * Gets the vertical offset of a mouse/touch event point from the bottom edge of the seek bar.\n   * @param eventPageY the pageX coordinate of an event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1], where 0 is the bottom edge and 1 is the top edge\n   */\n  private getVerticalOffset(eventPageY: number): number {\n    let elementOffsetPx = this.seekBar.offset().top;\n    let widthPx = this.seekBar.height();\n    let offsetPx = eventPageY - elementOffsetPx;\n    let offset = 1 / widthPx * offsetPx;\n\n    return 1 - this.sanitizeOffset(offset);\n  }\n\n  /**\n   * Gets the mouse or touch event offset for the current configuration (horizontal or vertical).\n   * @param e the event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1]\n   * @see #getHorizontalOffset\n   * @see #getVerticalOffset\n   */\n  private getOffset(e: MouseEvent | TouchEvent): number {\n    if (BrowserUtils.isTouchSupported && this.isTouchEvent(e)) {\n      if (this.config.vertical) {\n        return this.getVerticalOffset(e.type === 'touchend' ? e.changedTouches[0].pageY : e.touches[0].pageY);\n      } else {\n        return this.getHorizontalOffset(e.type === 'touchend' ? e.changedTouches[0].pageX : e.touches[0].pageX);\n      }\n    }\n    else if (e instanceof MouseEvent) {\n      if (this.config.vertical) {\n        return this.getVerticalOffset(e.pageY);\n      } else {\n        return this.getHorizontalOffset(e.pageX);\n      }\n    }\n    else {\n      if (console) {\n        console.warn('invalid event');\n      }\n      return 0;\n    }\n  }\n\n  /**\n   * Sanitizes the mouse offset to the range of [0, 1].\n   *\n   * When tracking the mouse outside the seek bar, the offset can be outside the desired range and this method\n   * limits it to the desired range. E.g. a mouse event left of the left edge of a seek bar yields an offset below\n   * zero, but to display the seek target on the seek bar, we need to limit it to zero.\n   *\n   * @param offset the offset to sanitize\n   * @returns {number} the sanitized offset.\n   */\n  private sanitizeOffset(offset: number) {\n    // Since we track mouse moves over the whole document, the target can be outside the seek range,\n    // and we need to limit it to the [0, 1] range.\n    if (offset < 0) {\n      offset = 0;\n    } else if (offset > 1) {\n      offset = 1;\n    }\n\n    return offset;\n  }\n\n  /**\n   * Sets the position of the playback position indicator.\n   * @param percent a number between 0 and 100 as returned by the player\n   */\n  setPlaybackPosition(percent: number) {\n    this.playbackPositionPercentage = percent;\n\n    // Set position of the bar\n    this.setPosition(this.seekBarPlaybackPosition, percent);\n\n    // Set position of the marker\n    let totalSize = (this.config.vertical ? (this.seekBar.height() - this.seekBarPlaybackPositionMarker.height()) : this.seekBar.width());\n    let px = (totalSize) / 100 * percent;\n    if (this.config.vertical) {\n      px = this.seekBar.height() - px - this.seekBarPlaybackPositionMarker.height();\n    }\n\n    let style = this.config.vertical ?\n      // -ms-transform required for IE9\n      // -webkit-transform required for Android 4.4 WebView\n      {\n        'transform': 'translateY(' + px + 'px)',\n        '-ms-transform': 'translateY(' + px + 'px)',\n        '-webkit-transform': 'translateY(' + px + 'px)',\n      } :\n      {\n        'transform': 'translateX(' + px + 'px)',\n        '-ms-transform': 'translateX(' + px + 'px)',\n        '-webkit-transform': 'translateX(' + px + 'px)',\n      };\n    this.seekBarPlaybackPositionMarker.css(style);\n  }\n\n  /**\n   * Refreshes the playback position. Can be used by subclasses to refresh the position when\n   * the size of the component changes.\n   */\n  protected refreshPlaybackPosition() {\n    this.setPlaybackPosition(this.playbackPositionPercentage);\n  }\n\n  /**\n   * Sets the position until which media is buffered.\n   * @param percent a number between 0 and 100\n   */\n  setBufferPosition(percent: number) {\n    this.setPosition(this.seekBarBufferPosition, percent);\n  }\n\n  /**\n   * Sets the position where a seek, if executed, would jump to.\n   * @param percent a number between 0 and 100\n   */\n  setSeekPosition(percent: number) {\n    this.setPosition(this.seekBarSeekPosition, percent);\n  }\n\n  /**\n   * Set the actual position (width or height) of a DOM element that represent a bar in the seek bar.\n   * @param element the element to set the position for\n   * @param percent a number between 0 and 100\n   */\n  private setPosition(element: DOM, percent: number) {\n    let scale = percent / 100;\n\n    // When the scale is exactly 1 or very near 1 (and the browser internally rounds it to 1), browsers seem to render\n    // the elements differently and the height gets slightly off, leading to mismatching heights when e.g. the buffer\n    // level bar has a width of 1 and the playback position bar has a width < 1. A jittering buffer level around 1\n    // leads to an even worse flickering effect.\n    // Various changes in CSS styling and DOM hierarchy did not solve the issue so the workaround is to avoid a scale\n    // of exactly 1.\n    if (scale >= 0.99999 && scale <= 1.00001) {\n      scale = 0.99999;\n    }\n\n    let style = this.config.vertical ?\n      // -ms-transform required for IE9\n      // -webkit-transform required for Android 4.4 WebView\n      {\n        'transform': 'scaleY(' + scale + ')',\n        '-ms-transform': 'scaleY(' + scale + ')',\n        '-webkit-transform': 'scaleY(' + scale + ')',\n      } :\n      {\n        'transform': 'scaleX(' + scale + ')',\n        '-ms-transform': 'scaleX(' + scale + ')',\n        '-webkit-transform': 'scaleX(' + scale + ')',\n      };\n    element.css(style);\n  }\n\n  /**\n   * Puts the seek bar into or out of seeking state by adding/removing a class to the DOM element. This can be used\n   * to adjust the styling while seeking.\n   *\n   * @param seeking should be true when entering seek state, false when exiting the seek state\n   */\n  setSeeking(seeking: boolean) {\n    if (seeking) {\n      this.getDomElement().addClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n    } else {\n      this.getDomElement().removeClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n    }\n  }\n\n  /**\n   * Checks if the seek bar is currently in the seek state.\n   * @returns {boolean} true if in seek state, else false\n   */\n  isSeeking(): boolean {\n    return this.getDomElement().hasClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n  }\n\n  /**\n   * Checks if the seek bar has a {@link SeekBarLabel}.\n   * @returns {boolean} true if the seek bar has a label, else false\n   */\n  hasLabel(): boolean {\n    return this.label != null;\n  }\n\n  /**\n   * Gets the label of this seek bar.\n   * @returns {SeekBarLabel} the label if this seek bar has a label, else null\n   */\n  getLabel(): SeekBarLabel | null {\n    return this.label;\n  }\n\n  protected onSeekEvent() {\n    this.seekBarEvents.onSeek.dispatch(this);\n  }\n\n  protected onSeekPreviewEvent(percentage: number, scrubbing: boolean) {\n    let snappedMarker = this.timelineMarkersHandler && this.timelineMarkersHandler.getMarkerAtPosition(percentage);\n\n    let seekPositionPercentage = percentage;\n\n    if (snappedMarker) {\n      if (snappedMarker.duration > 0) {\n        if (percentage < snappedMarker.position) {\n          // Snap the position to the start of the interval if the seek is within the left snap margin\n          // We know that we are within a snap margin when we are outside the marker interval but still\n          // have a snappedMarker\n          seekPositionPercentage = snappedMarker.position;\n        } else if (percentage > snappedMarker.position + snappedMarker.duration) {\n          // Snap the position to the end of the interval if the seek is within the right snap margin\n          seekPositionPercentage = snappedMarker.position + snappedMarker.duration;\n        }\n      } else {\n        // Position markers always snap to their marker position\n        seekPositionPercentage = snappedMarker.position;\n      }\n    }\n\n    if (this.label) {\n      this.label.getDomElement().css({\n        'left': seekPositionPercentage + '%',\n      });\n    }\n\n    this.seekBarEvents.onSeekPreview.dispatch(this, {\n      scrubbing: scrubbing,\n      position: seekPositionPercentage,\n      marker: snappedMarker,\n    });\n  }\n\n  protected onSeekedEvent(percentage: number) {\n    this.seekBarEvents.onSeeked.dispatch(this, percentage);\n  }\n\n  /**\n   * Gets the event that is fired when a scrubbing seek operation is started.\n   * @returns {Event<SeekBar, NoArgs>}\n   */\n  get onSeek(): Event<SeekBar, NoArgs> {\n    return this.seekBarEvents.onSeek.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired during a scrubbing seek (to indicate that the seek preview, i.e. the video frame,\n   * should be updated), or during a normal seek preview when the seek bar is hovered (and the seek target,\n   * i.e. the seek bar label, should be updated).\n   * @returns {Event<SeekBar, SeekPreviewEventArgs>}\n   */\n  get onSeekPreview(): Event<SeekBar, SeekPreviewEventArgs> {\n    return this.seekBarEvents.onSeekPreview.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when a scrubbing seek has finished or when a direct seek is issued.\n   * @returns {Event<SeekBar, number>}\n   */\n  get onSeeked(): Event<SeekBar, number> {\n    return this.seekBarEvents.onSeeked.getEvent();\n  }\n\n\n  protected onShowEvent(): void {\n    super.onShowEvent();\n\n    // Refresh the position of the playback position when the seek bar becomes visible. To correctly set the position,\n    // the DOM element must be fully initialized an have its size calculated, because the position is set as an absolute\n    // value calculated from the size. This required size is not known when it is hidden.\n    // For such cases, we refresh the position here in onShow because here it is guaranteed that the component knows\n    // its size and can set the position correctly.\n    this.refreshPlaybackPosition();\n  }\n\n /**\n   * Checks if TouchEvent is supported.\n   * @returns {boolean} true if TouchEvent not undefined, else false\n   */\n  isTouchEvent(e: UIEvent): e is TouchEvent {\n    return window.TouchEvent && e instanceof TouchEvent;\n  }\n}\n","import {PlayerAPI} from 'bitmovin-player';\n\nexport function getMinBufferLevel(player: PlayerAPI): number {\n\n    const playerDuration = player.getDuration();\n\n    const videoBufferLength = player.getVideoBufferLength();\n    const audioBufferLength = player.getAudioBufferLength();\n    // Calculate the buffer length which is the smaller length of the audio and video buffers. If one of these\n    // buffers is not available, we set it's value to MAX_VALUE to make sure that the other real value is taken\n    // as the buffer length.\n    let bufferLength = Math.min(\n        videoBufferLength != null ? videoBufferLength : Number.MAX_VALUE,\n        audioBufferLength != null ? audioBufferLength : Number.MAX_VALUE);\n    // If both buffer lengths are missing, we set the buffer length to zero\n    if (bufferLength === Number.MAX_VALUE) {\n        bufferLength = 0;\n    }\n\n    return 100 / playerDuration * bufferLength;\n}\n","import { UIUtils } from '../uiutils';\nimport { DOM } from '../dom';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { VolumeController } from '../volumecontroller';\n\nexport enum SeekBarType {\n  Vod,\n  Live,\n  Volume,\n}\n\ninterface Range {\n  min: number;\n  max: number;\n}\n\ninterface KeyStepIncrementsConfig {\n  leftRight: number;\n  upDown: number;\n}\n\nconst coerceValueIntoRange = (\n  value: number,\n  range: Range,\n  cb: (value: number) => void,\n) => {\n  if (value < range.min) {\n    cb(range.min);\n  } else if (value > range.max) {\n    cb(range.max);\n  } else {\n    cb(value);\n  }\n};\n\nexport class SeekBarController {\n  protected keyStepIncrements: KeyStepIncrementsConfig;\n  protected player: PlayerAPI;\n  protected volumeController: VolumeController;\n\n  constructor(\n    keyStepIncrements: KeyStepIncrementsConfig,\n    player: PlayerAPI,\n    volumeController: VolumeController,\n  ) {\n    this.keyStepIncrements = keyStepIncrements;\n    this.player = player;\n    this.volumeController = volumeController;\n  }\n\n  protected arrowKeyControls(\n    currentValue: number,\n    range: Range,\n    valueUpdate: (value: number) => void,\n  ) {\n    const controlValue = Math.floor(currentValue);\n\n    return {\n      left: () => coerceValueIntoRange(controlValue - this.keyStepIncrements.leftRight, range, valueUpdate),\n      right: () => coerceValueIntoRange(controlValue + this.keyStepIncrements.leftRight, range, valueUpdate),\n      up: () => coerceValueIntoRange(controlValue + this.keyStepIncrements.upDown, range, valueUpdate),\n      down: () => coerceValueIntoRange(controlValue - this.keyStepIncrements.upDown, range, valueUpdate),\n      home: () => coerceValueIntoRange(range.min, range, valueUpdate),\n      end: () => coerceValueIntoRange(range.max, range, valueUpdate),\n    };\n  }\n\n  protected seekBarControls(type: SeekBarType) {\n    if (type === SeekBarType.Live) {\n      return this.arrowKeyControls(this.player.getTimeShift(), { min: this.player.getMaxTimeShift(), max: 0 }, this.player.timeShift);\n    } else if (type === SeekBarType.Vod) {\n      return this.arrowKeyControls(this.player.getCurrentTime(), { min: 0, max: this.player.getDuration() }, this.player.seek);\n    } else if (type === SeekBarType.Volume && this.volumeController != null) {\n      const volumeTransition = this.volumeController.startTransition();\n      return this.arrowKeyControls(this.player.getVolume(), { min: 0, max: 100 }, volumeTransition.finish.bind(volumeTransition));\n    }\n  }\n\n  public setSeekBarControls(domElement: DOM, type: () => SeekBarType) {\n    domElement.on('keydown', (e: KeyboardEvent) => {\n      const controls = this.seekBarControls(type());\n      switch (e.keyCode) {\n        case UIUtils.KeyCode.LeftArrow: {\n          controls.left();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.RightArrow: {\n          controls.right();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.UpArrow: {\n          controls.up();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.DownArrow: {\n          controls.down();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.Home: {\n          controls.home();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.End: {\n          controls.end();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.Space: {\n          this.player.isPlaying() ? this.player.pause() : this.player.play();\n          e.preventDefault();\n          break;\n        }\n      }\n    });\n  }\n}","import {Container, ContainerConfig} from './container';\nimport {Label, LabelConfig} from './label';\nimport {Component, ComponentConfig} from './component';\nimport { UIInstanceManager } from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport {ImageLoader} from '../imageloader';\nimport {CssProperties} from '../dom';\nimport { PlayerAPI, Thumbnail } from 'bitmovin-player';\nimport { SeekBar, SeekPreviewEventArgs } from './seekbar';\nimport { PlayerUtils } from '../playerutils';\n\n/**\n * Configuration interface for a {@link SeekBarLabel}.\n */\nexport interface SeekBarLabelConfig extends ContainerConfig {\n  // nothing yet\n}\n\n/**\n * A label for a {@link SeekBar} that can display the seek target time, a thumbnail, and title (e.g. chapter title).\n */\nexport class SeekBarLabel extends Container<SeekBarLabelConfig> {\n\n  private timeLabel: Label<LabelConfig>;\n  private titleLabel: Label<LabelConfig>;\n  private thumbnail: Component<ComponentConfig>;\n\n  private thumbnailImageLoader: ImageLoader;\n\n  private timeFormat: string;\n\n  private appliedMarkerCssClasses: string[] = [];\n  private player: PlayerAPI;\n  private uiManager: UIInstanceManager;\n\n  constructor(config: SeekBarLabelConfig = {}) {\n    super(config);\n\n    this.timeLabel = new Label({ cssClasses: ['seekbar-label-time'] });\n    this.titleLabel = new Label({ cssClasses: ['seekbar-label-title'] });\n    this.thumbnail = new Component({ cssClasses: ['seekbar-thumbnail'], role: 'img' });\n    this.thumbnailImageLoader = new ImageLoader();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-seekbar-label',\n      components: [new Container({\n        components: [\n          this.thumbnail,\n          new Container({\n            components: [this.titleLabel, this.timeLabel],\n            cssClass: 'seekbar-label-metadata',\n          })],\n        cssClass: 'seekbar-label-inner',\n      })],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.player = player;\n    this.uiManager = uimanager;\n    uimanager.onSeekPreview.subscribeRateLimited(this.handleSeekPreview, 100);\n\n    let init = () => {\n      // Set time format depending on source duration\n      this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?\n        StringUtils.FORMAT_HHMMSS : StringUtils.FORMAT_MMSS;\n      // Set initial state of title and thumbnail to handle sourceLoaded when switching to a live-stream\n      this.setTitleText(null);\n      this.setThumbnail(null);\n    };\n\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n    init();\n  }\n\n  private handleSeekPreview = (sender: SeekBar, args: SeekPreviewEventArgs) => {\n    if (this.player.isLive()) {\n      let maxTimeShift = this.player.getMaxTimeShift();\n      let timeShiftPreview = maxTimeShift - maxTimeShift * (args.position / 100);\n\n      this.setTime(timeShiftPreview);\n\n      // In case of a live stream the player expects the time passed into the getThumbnail as a wallClockTime and not\n      // as a relative timeShift value.\n      const convertTimeShiftPreviewToWallClockTime = (targetTimeShift: number): number => {\n        const currentTimeShift = this.player.getTimeShift();\n        const currentTime = this.player.getCurrentTime();\n\n        const wallClockTimeOfLiveEdge = currentTime - currentTimeShift;\n        return wallClockTimeOfLiveEdge + targetTimeShift;\n      };\n\n      const wallClockTime = convertTimeShiftPreviewToWallClockTime(timeShiftPreview);\n      this.setThumbnail(this.player.getThumbnail(wallClockTime));\n\n    } else {\n      let time = this.player.getDuration() * (args.position / 100);\n      this.setTime(time);\n\n      const seekableRangeStart = PlayerUtils.getSeekableRangeStart(this.player, 0);\n      const absoluteSeekTarget = time + seekableRangeStart;\n      this.setThumbnail(this.player.getThumbnail(absoluteSeekTarget));\n    }\n\n    if (args.marker) {\n      this.setTitleText(args.marker.marker.title);\n    } else {\n      this.setTitleText(null);\n    }\n\n    // Remove CSS classes from previous marker\n    if (this.appliedMarkerCssClasses.length > 0) {\n      this.getDomElement().removeClass(this.appliedMarkerCssClasses.join(' '));\n      this.appliedMarkerCssClasses = [];\n    }\n\n    // Add CSS classes of current marker\n    if (args.marker) {\n      const cssClasses = (args.marker.marker.cssClasses || []).map(cssClass => this.prefixCss(cssClass));\n      this.getDomElement().addClass(cssClasses.join(' '));\n      this.appliedMarkerCssClasses = cssClasses;\n    }\n  };\n\n  /**\n   * Sets arbitrary text on the label.\n   * @param text the text to show on the label\n   */\n  setText(text: string) {\n    this.timeLabel.setText(text);\n  }\n\n  /**\n   * Sets a time to be displayed on the label.\n   * @param seconds the time in seconds to display on the label\n   */\n  setTime(seconds: number) {\n    this.setText(StringUtils.secondsToTime(seconds, this.timeFormat));\n  }\n\n  /**\n   * Sets the text on the title label.\n   * @param text the text to show on the label\n   */\n  setTitleText(text = '') {\n    this.titleLabel.setText(text);\n  }\n\n  /**\n   * Sets or removes a thumbnail on the label.\n   * @param thumbnail the thumbnail to display on the label or null to remove a displayed thumbnail\n   */\n  setThumbnail(thumbnail: Thumbnail = null) {\n    let thumbnailElement = this.thumbnail.getDomElement();\n\n    if (thumbnail == null) {\n      thumbnailElement.css({\n        'background-image': null,\n        'display': null,\n        'width': null,\n        'height': null,\n      });\n    }\n    else {\n      // We use the thumbnail image loader to make sure the thumbnail is loaded and it's size is known before be can\n      // calculate the CSS properties and set them on the element.\n      this.thumbnailImageLoader.load(thumbnail.url, (url, width, height) => {\n        // can be checked like that because x/y/w/h are either all present or none\n        // https://www.w3.org/TR/media-frags/#naming-space\n        if (thumbnail.x !== undefined) {\n          thumbnailElement.css(this.thumbnailCssSprite(thumbnail, width, height));\n        } else {\n          thumbnailElement.css(this.thumbnailCssSingleImage(thumbnail, width, height));\n        }\n      });\n    }\n  }\n\n  private thumbnailCssSprite(thumbnail: Thumbnail, width: number, height: number): CssProperties {\n    let thumbnailCountX = width / thumbnail.width;\n    let thumbnailCountY = height / thumbnail.height;\n\n    let thumbnailIndexX = thumbnail.x / thumbnail.width;\n    let thumbnailIndexY = thumbnail.y / thumbnail.height;\n\n    let sizeX = 100 * thumbnailCountX;\n    let sizeY = 100 * thumbnailCountY;\n\n    let offsetX = 100 * thumbnailIndexX;\n    let offsetY = 100 * thumbnailIndexY;\n\n    let aspectRatio = 1 / thumbnail.width * thumbnail.height;\n\n    // The thumbnail size is set by setting the CSS 'width' and 'padding-bottom' properties. 'padding-bottom' is\n    // used because it is relative to the width and can be used to set the aspect ratio of the thumbnail.\n    // A default value for width is set in the stylesheet and can be overwritten from there or anywhere else.\n    return {\n      'display': 'inherit',\n      'background-image': `url(${thumbnail.url})`,\n      'padding-bottom': `${100 * aspectRatio}%`,\n      'background-size': `${sizeX}% ${sizeY}%`,\n      'background-position': `-${offsetX}% -${offsetY}%`,\n    };\n  }\n\n  private thumbnailCssSingleImage(thumbnail: Thumbnail, width: number, height: number): CssProperties {\n    let aspectRatio = 1 / width * height;\n\n    return {\n      'display': 'inherit',\n      'background-image': `url(${thumbnail.url})`,\n      'padding-bottom': `${100 * aspectRatio}%`,\n      'background-size': `100% 100%`,\n      'background-position': `0 0`,\n    };\n  }\n\n  release(): void {\n    super.release();\n\n    this.uiManager.onSeekPreview.unsubscribe(this.handleSeekPreview);\n  }\n}\n","import {ListSelector, ListSelectorConfig} from './listselector';\nimport {DOM} from '../dom';\nimport { i18n, LocalizableText } from '../localization/i18n';\n\n/**\n * A simple select box providing the possibility to select a single item out of a list of available items.\n *\n * DOM example:\n * <code>\n *     <select class='ui-selectbox'>\n *         <option value='key'>label</option>\n *         ...\n *     </select>\n * </code>\n */\n\nexport class SelectBox extends ListSelector<ListSelectorConfig> {\n\n  private selectElement: DOM;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-selectbox',\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let selectElement = new DOM('select', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\n    });\n\n    this.selectElement = selectElement;\n    this.updateDomItems();\n\n    selectElement.on('change', () => {\n      let value = selectElement.val();\n      this.onItemSelectedEvent(value, false);\n    });\n\n    return selectElement;\n  }\n\n  protected updateDomItems(selectedValue: string = null) {\n    // Delete all children\n    this.selectElement.empty();\n\n    // Add updated children\n    for (let item of this.items) {\n      let optionElement = new DOM('option', {\n        'value': String(item.key),\n      }).html(i18n.performLocalization(item.label));\n\n      if (item.key === String(selectedValue)) { // convert selectedValue to string to catch 'null'/null case\n        optionElement.attr('selected', 'selected');\n      }\n\n      this.selectElement.append(optionElement);\n    }\n  }\n\n  protected onItemAddedEvent(value: string) {\n    super.onItemAddedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemRemovedEvent(value: string) {\n    super.onItemRemovedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemSelectedEvent(value: string, updateDomItems: boolean = true) {\n    super.onItemSelectedEvent(value);\n    if (updateDomItems) {\n      this.updateDomItems(value);\n    }\n  }\n}\n","import { Container, ContainerConfig } from './container';\nimport { SelectBox } from './selectbox';\nimport { UIInstanceManager } from '../uimanager';\nimport { Timeout } from '../timeout';\nimport { Event, EventDispatcher, NoArgs } from '../eventdispatcher';\nimport { SettingsPanelPage } from './settingspanelpage';\nimport { SettingsPanelItem } from './settingspanelitem';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { Component, ComponentConfig } from './component';\n\n/**\n * Configuration interface for a {@link SettingsPanel}.\n */\nexport interface SettingsPanelConfig extends ContainerConfig {\n  /**\n   * The delay in milliseconds after which the settings panel will be hidden when there is no user interaction.\n   * Set to -1 to disable automatic hiding.\n   * Default: 3 seconds (3000)\n   */\n  hideDelay?: number;\n\n  /**\n   * Flag to specify if there should be an animation when switching SettingsPanelPages.\n   * Default: true\n   */\n  pageTransitionAnimation?: boolean;\n}\n\nenum NavigationDirection {\n  Forwards,\n  Backwards,\n}\n\n/**\n * A panel containing a list of {@link SettingsPanelPage items}.\n *\n * To configure pages just pass them in the components array.\n *\n * Example:\n *  let settingsPanel = new SettingsPanel({\n *    hidden: true,\n *  });\n *\n *  let settingsPanelPage = new SettingsPanelPage({\n *    components: […]\n *  });\n *\n *  let secondSettingsPanelPage = new SettingsPanelPage({\n *    components: […]\n *  });\n *\n *  settingsPanel.addComponent(settingsPanelPage);\n *  settingsPanel.addComponent(secondSettingsPanelPage);\n *\n * For an example how to navigate between pages @see SettingsPanelPageNavigatorButton\n */\nexport class SettingsPanel extends Container<SettingsPanelConfig> {\n\n  private static readonly CLASS_ACTIVE_PAGE = 'active';\n\n  // navigation handling\n  private activePage: SettingsPanelPage;\n  private navigationStack: SettingsPanelPage[] = [];\n\n  private settingsPanelEvents = {\n    onSettingsStateChanged: new EventDispatcher<SettingsPanel, NoArgs>(),\n  };\n\n  private hideTimeout: Timeout;\n\n  constructor(config: SettingsPanelConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settings-panel',\n      hideDelay: 3000,\n      pageTransitionAnimation: true,\n    } as SettingsPanelConfig, this.config);\n\n    this.activePage = this.getRootPage();\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    uimanager.onControlsHide.subscribe(() => this.hideHoveredSelectBoxes());\n\n    if (config.hideDelay > -1) {\n      this.hideTimeout = new Timeout(config.hideDelay, () => {\n        this.hide();\n        this.hideHoveredSelectBoxes();\n      });\n      this.getDomElement().on('mouseenter', () => {\n        // On mouse enter clear the timeout\n        this.hideTimeout.clear();\n      });\n      this.getDomElement().on('mouseleave', () => {\n        // On mouse leave activate the timeout\n        this.hideTimeout.reset();\n      });\n      this.getDomElement().on('focusin', () => {\n        this.hideTimeout.clear();\n      });\n      this.getDomElement().on('focusout', () => {\n        this.hideTimeout.reset();\n      });\n    }\n\n    this.onHide.subscribe(() => {\n      if (config.hideDelay > -1) {\n        // Clear timeout when hidden from outside\n        this.hideTimeout.clear();\n      }\n\n      // Since we don't reset the actual navigation here we need to simulate a onInactive event in case some panel\n      // needs to do something when they become invisible / inactive.\n      this.activePage.onInactiveEvent();\n    });\n\n    this.onShow.subscribe(() => {\n      // Reset navigation when te panel gets visible to avoid a weird animation when hiding\n      this.resetNavigation(true);\n      // Since we don't need to navigate to the root page again we need to fire the onActive event when the settings\n      // panel gets visible.\n      this.activePage.onActiveEvent();\n\n      if (config.hideDelay > -1) {\n        // Activate timeout when shown\n        this.hideTimeout.start();\n      }\n    });\n\n    // pass event from root page through\n    this.getRootPage().onSettingsStateChanged.subscribe(() => {\n      this.onSettingsStateChangedEvent();\n    });\n\n    this.updateActivePageClass();\n  }\n\n  /**\n   * Returns the current active / visible page\n   * @return {SettingsPanelPage}\n   */\n  getActivePage(): SettingsPanelPage {\n    return this.activePage;\n  }\n\n  /**\n   * Sets the\n   * @deprecated Use {@link setActivePage} instead\n   * @param index\n   */\n  setActivePageIndex(index: number): void {\n    this.setActivePage(this.getPages()[index]);\n  }\n\n  /**\n   * Adds the passed page to the navigation stack and makes it visible.\n   * Use {@link popSettingsPanelPage} to navigate backwards.\n   *\n   * Results in no-op if the target page is the current page.\n   * @params page\n   */\n  setActivePage(targetPage: SettingsPanelPage): void {\n    if (targetPage === this.getActivePage()) {\n      console.warn('Page is already the current one ... skipping navigation');\n      return;\n    }\n\n    this.navigateToPage(\n      targetPage,\n      this.getActivePage(),\n      NavigationDirection.Forwards,\n      !(this.config as SettingsPanelConfig).pageTransitionAnimation,\n    );\n  }\n\n  /**\n   * Resets the navigation stack by navigating back to the root page and displaying it.\n   */\n  popToRootSettingsPanelPage(): void {\n    this.resetNavigation((this.config as SettingsPanelConfig).pageTransitionAnimation);\n  }\n\n  /**\n   * Removes the current page from the navigation stack and makes the previous one visible.\n   * Results in a no-op if we are already on the root page.\n   */\n  popSettingsPanelPage() {\n    if (this.navigationStack.length === 0) {\n      console.warn('Already on the root page ... skipping navigation');\n      return;\n    }\n\n    let targetPage = this.navigationStack[this.navigationStack.length - 2];\n    // The root part isn't part of the navigation stack so handle it explicitly here\n    if (!targetPage) {\n      targetPage = this.getRootPage();\n    }\n\n    this.navigateToPage(\n      targetPage,\n      this.activePage,\n      NavigationDirection.Backwards,\n      !(this.config as SettingsPanelConfig).pageTransitionAnimation,\n    );\n  }\n\n  /**\n   * Checks if there are active settings within the root page of the settings panel.\n   * An active setting is a setting that is visible and enabled, which the user can interact with.\n   * @returns {boolean} true if there are active settings, false if the panel is functionally empty to a user\n   */\n  rootPageHasActiveSettings(): boolean {\n    return this.getRootPage().hasActiveSettings();\n  }\n\n  /**\n   * Return all configured pages\n   * @returns {SettingsPanelPage[]}\n   */\n  getPages(): SettingsPanelPage[] {\n    return <SettingsPanelPage[]>this.config.components.filter(component => component instanceof SettingsPanelPage);\n  }\n\n  get onSettingsStateChanged(): Event<SettingsPanel, NoArgs> {\n    return this.settingsPanelEvents.onSettingsStateChanged.getEvent();\n  }\n\n  release(): void {\n    super.release();\n    if (this.hideTimeout) {\n      this.hideTimeout.clear();\n    }\n  }\n\n  // Support adding settingsPanelPages after initialization\n  addComponent(component: Component<ComponentConfig>) {\n    if (this.getPages().length === 0 && component instanceof SettingsPanelPage) {\n      this.activePage = component;\n    }\n    super.addComponent(component);\n  }\n\n  private updateActivePageClass(): void {\n    this.getPages().forEach((page: SettingsPanelPage) => {\n      if (page === this.activePage) {\n        page.getDomElement().addClass(this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));\n      } else {\n        page.getDomElement().removeClass(this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));\n      }\n    });\n  }\n\n  private resetNavigation(resetNavigationOnShow: boolean): void {\n    const sourcePage = this.getActivePage();\n    const rootPage = this.getRootPage();\n    if (sourcePage) {\n      // Since the onInactiveEvent was already fired in the onHide we need to suppress it here\n      if (!resetNavigationOnShow) {\n        sourcePage.onInactiveEvent();\n      }\n    }\n    this.navigationStack = [];\n    this.animateNavigation(rootPage, sourcePage, resetNavigationOnShow);\n    this.activePage = rootPage;\n    this.updateActivePageClass();\n  }\n\n  private navigateToPage(\n    targetPage: SettingsPanelPage,\n    sourcePage: SettingsPanelPage,\n    direction: NavigationDirection,\n    skipAnimation: boolean,\n  ): void {\n    this.activePage = targetPage;\n\n    if (direction === NavigationDirection.Forwards) {\n      this.navigationStack.push(targetPage);\n    } else {\n      this.navigationStack.pop();\n    }\n\n    this.animateNavigation(targetPage, sourcePage, skipAnimation);\n\n    this.updateActivePageClass();\n    targetPage.onActiveEvent();\n    sourcePage.onInactiveEvent();\n  }\n\n  /**\n   * @param targetPage\n   * @param sourcePage\n   * @param skipAnimation This is just an internal flag if we want to have an animation. It is set true when we reset\n   * the navigation within the onShow callback of the settingsPanel. In this case we don't want an actual animation but\n   * the recalculation of the dimension of the settingsPanel.\n   * This is independent of the pageTransitionAnimation flag.\n   */\n  private animateNavigation(targetPage: SettingsPanelPage, sourcePage: SettingsPanelPage, skipAnimation: boolean) {\n    if (!(this.config as SettingsPanelConfig).pageTransitionAnimation) {\n      return;\n    }\n\n    const settingsPanelDomElement = this.getDomElement();\n    const settingsPanelHTMLElement = this.getDomElement().get(0);\n\n    // get current dimension\n    const settingsPanelWidth = settingsPanelHTMLElement.scrollWidth;\n    const settingsPanelHeight = settingsPanelHTMLElement.scrollHeight;\n\n    // calculate target size of the settings panel\n    sourcePage.getDomElement().css('display', 'none');\n    this.getDomElement().css({ width: '', height: '' }); // let css auto settings kick in again\n\n    const targetPageHtmlElement = targetPage.getDomElement().get(0);\n    // clone the targetPage DOM element so that we can calculate the width / height how they will be after\n    // switching the page. We are using a clone to prevent (mostly styling) side-effects on the real DOM element\n    const clone = targetPageHtmlElement.cloneNode(true) as HTMLElement;\n    // append to parent so we get the 'real' size\n    const containerWrapper = targetPageHtmlElement.parentNode;\n    containerWrapper.appendChild(clone);\n    // set clone visible\n    clone.style.display = 'block';\n\n    // collect target dimension\n    const targetSettingsPanelWidth = settingsPanelHTMLElement.scrollWidth;\n    const targetSettingsPanelHeight = settingsPanelHTMLElement.scrollHeight;\n\n    // remove clone from the DOM\n    clone.parentElement.removeChild(clone); // .remove() is not working in IE\n    sourcePage.getDomElement().css('display', '');\n\n    // set the values back to the current ones that the browser animates it (browsers don't animate 'auto' values)\n    settingsPanelDomElement.css({\n      width: settingsPanelWidth + 'px',\n      height: settingsPanelHeight + 'px',\n    });\n\n    if (!skipAnimation) {\n      // We need to force the browser to reflow between setting the width and height that we actually get a animation\n      this.forceBrowserReflow();\n    }\n\n    // set the values to the target dimension\n    settingsPanelDomElement.css({\n      width: targetSettingsPanelWidth + 'px',\n      height: targetSettingsPanelHeight + 'px',\n    });\n  }\n\n  private forceBrowserReflow(): void {\n    // Force the browser to reflow the layout\n    // https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    this.getDomElement().get(0).offsetLeft;\n  }\n\n  /**\n   * Hack for IE + Firefox\n   * when the settings panel fades out while an item of a select box is still hovered, the select box will not fade out\n   * while the settings panel does. This would leave a floating select box, which is just weird\n   */\n  private hideHoveredSelectBoxes(): void {\n    this.getComputedItems().forEach((item: SettingsPanelItem) => {\n      if (item.isActive() && (item as any).setting instanceof SelectBox) {\n        const selectBox = (item as any).setting as SelectBox;\n        const oldDisplay = selectBox.getDomElement().css('display');\n        if (oldDisplay === 'none') {\n          // if oldDisplay is already 'none', no need to set to 'none' again. It could lead to race condition\n          // wherein the display is irreversibly set to 'none' when browser tab/window is not active because\n          // requestAnimationFrame is either delayed or paused in some browsers in inactive state\n          return;\n        }\n\n        // updating the display to none marks the select-box as inactive, so it will be hidden with the rest\n        // we just have to make sure to reset this as soon as possible\n        selectBox.getDomElement().css('display', 'none');\n        if (window.requestAnimationFrame) {\n          requestAnimationFrame(() => {\n            selectBox.getDomElement().css('display', oldDisplay);\n          });\n        } else {\n          // IE9 has no requestAnimationFrame, set the value directly. It has no optimization about ignoring DOM-changes\n          // between animationFrames\n          selectBox.getDomElement().css('display', oldDisplay);\n        }\n      }\n    });\n  }\n\n  // collect all items from all pages (see hideHoveredSelectBoxes)\n  private getComputedItems(): SettingsPanelItem[] {\n    const allItems: SettingsPanelItem[] = [];\n    for (let page of this.getPages()) {\n      allItems.push(...page.getItems());\n    }\n    return allItems;\n  }\n\n  private getRootPage(): SettingsPanelPage {\n    return this.getPages()[0];\n  }\n\n  protected onSettingsStateChangedEvent() {\n    this.settingsPanelEvents.onSettingsStateChanged.dispatch(this);\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {Component, ComponentConfig} from './component';\nimport {Event, EventDispatcher, NoArgs} from '../eventdispatcher';\nimport { Label, LabelConfig } from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {SelectBox} from './selectbox';\nimport {ListBox} from './listbox';\nimport {VideoQualitySelectBox} from './videoqualityselectbox';\nimport {AudioQualitySelectBox} from './audioqualityselectbox';\nimport {PlaybackSpeedSelectBox} from './playbackspeedselectbox';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { LocalizableText } from '../localization/i18n';\n\n/**\n * An item for a {@link SettingsPanelPage},\n * Containing an optional {@link Label} and a component that configures a setting.\n * If the components is a {@link SelectBox} it will handle the logic of displaying it or not\n */\nexport class SettingsPanelItem extends Container<ContainerConfig> {\n\n  private label: Component<ComponentConfig>;\n  private setting: Component<ComponentConfig>;\n\n  private settingsPanelItemEvents = {\n    onActiveChanged: new EventDispatcher<SettingsPanelItem, NoArgs>(),\n  };\n\n  constructor(label: LocalizableText | Component<ComponentConfig>, setting: Component<ComponentConfig>, config: ContainerConfig = {}) {\n    super(config);\n\n    this.setting = setting;\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settings-panel-item',\n      role: 'menuitem',\n    }, this.config);\n\n    if (label !== null) {\n      if (label instanceof Component) {\n        this.label = label;\n      } else {\n        this.label = new Label({ text: label, for: this.setting.getConfig().id } as LabelConfig);\n      }\n      this.addComponent(this.label);\n    }\n\n    this.addComponent(this.setting);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    if (this.setting instanceof SelectBox || this.setting instanceof ListBox) {\n      let handleConfigItemChanged = () => {\n        if (!(this.setting instanceof SelectBox) && !(this.setting instanceof ListBox)) {\n          return;\n        }\n        // The minimum number of items that must be available for the setting to be displayed\n        // By default, at least two items must be available, else a selection is not possible\n        let minItemsToDisplay = 2;\n        // Audio/video quality select boxes contain an additional 'auto' mode, which in combination with a single\n        // available quality also does not make sense\n        if ((this.setting instanceof VideoQualitySelectBox && this.setting.hasAutoItem())\n          || this.setting instanceof AudioQualitySelectBox) {\n          minItemsToDisplay = 3;\n        }\n\n        if (this.setting.itemCount() < minItemsToDisplay) {\n          // Hide the setting if no meaningful choice is available\n          this.hide();\n        } else if (this.setting instanceof PlaybackSpeedSelectBox\n          && !uimanager.getConfig().playbackSpeedSelectionEnabled) {\n          // Hide the PlaybackSpeedSelectBox if disabled in config\n          this.hide();\n        } else {\n          this.show();\n        }\n\n        // Visibility might have changed and therefore the active state might have changed so we fire the event\n        // TODO fire only when state has really changed (e.g. check if visibility has really changed)\n        this.onActiveChangedEvent();\n\n        this.getDomElement().attr('aria-haspopup', 'true');\n      };\n\n      this.setting.onItemAdded.subscribe(handleConfigItemChanged);\n      this.setting.onItemRemoved.subscribe(handleConfigItemChanged);\n\n      // Initialize hidden state\n      handleConfigItemChanged();\n    }\n  }\n\n  /**\n   * Checks if this settings panel item is active, i.e. visible and enabled and a user can interact with it.\n   * @returns {boolean} true if the panel is active, else false\n   */\n  isActive(): boolean {\n    return this.isShown();\n  }\n\n  protected onActiveChangedEvent() {\n    this.settingsPanelItemEvents.onActiveChanged.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the 'active' state of this item changes.\n   * @see #isActive\n   * @returns {Event<SettingsPanelItem, NoArgs>}\n   */\n  get onActiveChanged(): Event<SettingsPanelItem, NoArgs> {\n    return this.settingsPanelItemEvents.onActiveChanged.getEvent();\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {SettingsPanelItem} from './settingspanelitem';\nimport {UIInstanceManager} from '../uimanager';\nimport {Event, EventDispatcher, NoArgs} from '../eventdispatcher';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { BrowserUtils } from '../browserutils';\n\n/**\n * A panel containing a list of {@link SettingsPanelItem items} that represent labelled settings.\n */\nexport class SettingsPanelPage extends Container<ContainerConfig> {\n\n  private static readonly CLASS_LAST = 'last';\n\n  private settingsPanelPageEvents = {\n    onSettingsStateChanged: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n    onActive: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n    onInactive: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n  };\n\n  constructor(config: ContainerConfig) {\n    super(config);\n\n    this.config = this.mergeConfig<ContainerConfig>(config, {\n      cssClass: 'ui-settings-panel-page',\n      role: 'menu',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    // Fire event when the state of a settings-item has changed\n    let settingsStateChangedHandler = () => {\n      this.onSettingsStateChangedEvent();\n\n      // Attach marker class to last visible item\n      let lastShownItem = null;\n      for (let component of this.getItems()) {\n        component.getDomElement().removeClass(this.prefixCss(SettingsPanelPage.CLASS_LAST));\n        if (component.isShown()) {\n          lastShownItem = component;\n        }\n      }\n      if (lastShownItem) {\n        lastShownItem.getDomElement().addClass(this.prefixCss(SettingsPanelPage.CLASS_LAST));\n      }\n    };\n    for (let component of this.getItems()) {\n      component.onActiveChanged.subscribe(settingsStateChangedHandler);\n    }\n  }\n\n  hasActiveSettings(): boolean {\n    for (let component of this.getItems()) {\n      if (component.isActive()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getItems(): SettingsPanelItem[] {\n    return <SettingsPanelItem[]>this.config.components.filter(component => component instanceof SettingsPanelItem);\n  }\n\n  onSettingsStateChangedEvent() {\n    this.settingsPanelPageEvents.onSettingsStateChanged.dispatch(this);\n  }\n\n  get onSettingsStateChanged(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onSettingsStateChanged.getEvent();\n  }\n\n  onActiveEvent() {\n    const activeItems = this.getItems().filter((item) => item.isActive());\n\n    this.settingsPanelPageEvents.onActive.dispatch(this);\n    // Disable focus for iOS and iPadOS 13. They open select boxes automatically on focus and we want to avoid that.\n    if (activeItems.length > 0 && !BrowserUtils.isIOS && !(BrowserUtils.isMacIntel && BrowserUtils.isTouchSupported)) {\n      activeItems[0].getDomElement().focusToFirstInput();\n    }\n  }\n\n  get onActive(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onActive.getEvent();\n  }\n\n  onInactiveEvent() {\n    this.settingsPanelPageEvents.onInactive.dispatch(this);\n  }\n\n  get onInactive(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onInactive.getEvent();\n  }\n}\n","import {UIInstanceManager} from '../uimanager';\nimport {SettingsPanelPageNavigatorButton, SettingsPanelPageNavigatorConfig} from './settingspanelpagenavigatorbutton';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport class SettingsPanelPageBackButton extends SettingsPanelPageNavigatorButton {\n\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingspanelpagebackbutton',\n      text: 'back',\n    } as SettingsPanelPageNavigatorConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      this.popPage();\n    });\n  }\n}\n","import {Button, ButtonConfig} from './button';\nimport {SettingsPanel} from './settingspanel';\nimport {SettingsPanelPage} from './settingspanelpage';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\n\n/**\n * Configuration interface for a {@link SettingsPanelPageNavigatorButton}\n */\nexport interface SettingsPanelPageNavigatorConfig extends ButtonConfig {\n  /**\n   * Container `SettingsPanel` where the navigation takes place\n   */\n  container: SettingsPanel;\n  /**\n   * Page where the button should navigate to\n   * If empty it will navigate to the root page (not intended to use as navigate back behavior)\n   */\n  targetPage?: SettingsPanelPage;\n\n  /**\n   * WCAG20 standard: Establishes relationships between objects and their label(s)\n   */\n  ariaLabelledBy?: string;\n}\n\n/**\n * Can be used to navigate between SettingsPanelPages\n *\n * Example:\n *  let settingPanelNavigationButton = new SettingsPanelPageNavigatorButton({\n *    container: settingsPanel,\n *    targetPage: settingsPanelPage,\n *  });\n *\n *  settingsPanelPage.addComponent(settingPanelNavigationButton);\n *\n * Don't forget to add the settingPanelNavigationButton to the settingsPanelPage.\n */\nexport class SettingsPanelPageNavigatorButton extends Button<SettingsPanelPageNavigatorConfig> {\n  private readonly container: SettingsPanel;\n  private readonly targetPage?: SettingsPanelPage;\n\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n    this.config = this.mergeConfig(config, {} as SettingsPanelPageNavigatorConfig, this.config);\n\n    this.container = (this.config as SettingsPanelPageNavigatorConfig).container;\n    this.targetPage = (this.config as SettingsPanelPageNavigatorConfig).targetPage;\n  }\n\n  /**\n   * navigate one level back\n   */\n  popPage() {\n    this.container.popSettingsPanelPage();\n  }\n\n  /**\n   * navigate to the target page\n   */\n  pushTargetPage() {\n    this.container.setActivePage(this.targetPage);\n  }\n}\n","import {UIInstanceManager} from '../uimanager';\nimport {SettingsPanelPageNavigatorButton, SettingsPanelPageNavigatorConfig} from './settingspanelpagenavigatorbutton';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\nexport class SettingsPanelPageOpenButton extends SettingsPanelPageNavigatorButton {\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingspanelpageopenbutton',\n      text: i18n.getLocalizer('open'),\n      role: 'menuitem',\n    } as SettingsPanelPageNavigatorConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.getDomElement().attr('aria-haspopup', 'true');\n    this.getDomElement().attr('aria-owns', this.config.targetPage.getConfig().id);\n\n    this.onClick.subscribe(() => {\n      this.pushTargetPage();\n    });\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {SettingsPanel} from './settingspanel';\nimport {UIInstanceManager} from '../uimanager';\nimport {Component, ComponentConfig} from './component';\nimport {ArrayUtils} from '../arrayutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link SettingsToggleButton}.\n */\nexport interface SettingsToggleButtonConfig extends ToggleButtonConfig {\n  /**\n   * The settings panel whose visibility the button should toggle.\n   */\n  settingsPanel: SettingsPanel;\n\n  /**\n   * Decides if the button should be automatically hidden when the settings panel does not contain any active settings.\n   * Default: true\n   */\n  autoHideWhenNoActiveSettings?: boolean;\n}\n\n/**\n * A button that toggles visibility of a settings panel.\n */\nexport class SettingsToggleButton extends ToggleButton<SettingsToggleButtonConfig> {\n\n  private visibleSettingsPanels: SettingsPanel[] = [];\n\n  constructor(config: SettingsToggleButtonConfig) {\n    super(config);\n\n    if (!config.settingsPanel) {\n      throw new Error('Required SettingsPanel is missing');\n    }\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingstogglebutton',\n      text: i18n.getLocalizer('settings'),\n      settingsPanel: null,\n      autoHideWhenNoActiveSettings: true,\n      role: 'pop-up button',\n    }, <SettingsToggleButtonConfig>this.config);\n\n    /**\n     * WCAG20 standard defines which popup menu (element id) is owned by the button\n     */\n    this.getDomElement().attr('aria-owns', config.settingsPanel.getActivePage().getConfig().id);\n\n    /**\n     * WCAG20 standard defines that a button has a popup menu bound to it\n     */\n    this.getDomElement().attr('aria-haspopup', 'true');\n\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let settingsPanel = config.settingsPanel;\n\n    this.onClick.subscribe(() => {\n      // only hide other `SettingsPanel`s if a new one will be opened\n      if (!settingsPanel.isShown()) {\n        // Hide all open SettingsPanels before opening this button's panel\n        // (We need to iterate a copy because hiding them will automatically remove themselves from the array\n        // due to the subscribeOnce above)\n        this.visibleSettingsPanels.slice().forEach(settingsPanel => settingsPanel.hide());\n      }\n      settingsPanel.toggleHidden();\n    });\n    settingsPanel.onShow.subscribe(() => {\n      // Set toggle status to on when the settings panel shows\n      this.on();\n    });\n    settingsPanel.onHide.subscribe(() => {\n      // Set toggle status to off when the settings panel hides\n      this.off();\n    });\n\n    // Ensure that only one `SettingPanel` is visible at once\n    // Keep track of shown SettingsPanels\n    uimanager.onComponentShow.subscribe((sender: Component<ComponentConfig>) => {\n      if (sender instanceof SettingsPanel) {\n        this.visibleSettingsPanels.push(sender);\n        sender.onHide.subscribeOnce(() => ArrayUtils.remove(this.visibleSettingsPanels, sender));\n      }\n    });\n\n    // Handle automatic hiding of the button if there are no settings for the user to interact with\n    if (config.autoHideWhenNoActiveSettings) {\n      // Setup handler to show/hide button when the settings change\n      let settingsPanelItemsChangedHandler = () => {\n        if (settingsPanel.rootPageHasActiveSettings()) {\n          if (this.isHidden()) {\n            this.show();\n          }\n        } else {\n          if (this.isShown()) {\n            this.hide();\n          }\n        }\n      };\n      // Wire the handler to the event\n      settingsPanel.onSettingsStateChanged.subscribe(settingsPanelItemsChangedHandler);\n      // Call handler for first init at startup\n      settingsPanelItemsChangedHandler();\n    }\n  }\n}\n","import {Component, ComponentConfig} from './component';\n\n/**\n * A dummy component that just reserves some space and does nothing else.\n */\nexport class Spacer extends Component<ComponentConfig> {\n\n  constructor(config: ComponentConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-spacer',\n    }, this.config);\n  }\n\n\n  protected onShowEvent(): void {\n    // disable event firing by overwriting and not calling super\n  }\n\n  protected onHideEvent(): void {\n    // disable event firing by overwriting and not calling super\n  }\n\n  protected onHoverChangedEvent(hovered: boolean): void {\n    // disable event firing by overwriting and not calling super\n  }\n}","import {ListBox} from './listbox';\nimport {UIInstanceManager} from '../uimanager';\nimport {SubtitleSwitchHandler} from '../subtitleutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A element that is similar to a select box where the user can select a subtitle\n */\nexport class SubtitleListBox extends ListBox {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new SubtitleSwitchHandler(player, this, uimanager);\n  }\n}\n","import { Container, ContainerConfig } from './container';\nimport { UIInstanceManager } from '../uimanager';\nimport { Label, LabelConfig } from './label';\nimport { ComponentConfig, Component } from './component';\nimport { ControlBar } from './controlbar';\nimport { EventDispatcher } from '../eventdispatcher';\nimport { DOM, Size } from '../dom';\nimport { PlayerAPI, SubtitleCueEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\nimport { VttUtils } from '../vttutils';\nimport { VTTProperties } from 'bitmovin-player/types/subtitles/vtt/API';\n\ninterface SubtitleCropDetectionResult {\n  top: boolean;\n  right: boolean;\n  bottom: boolean;\n  left: boolean;\n}\n\n/**\n * Overlays the player to display subtitles.\n */\nexport class SubtitleOverlay extends Container<ContainerConfig> {\n\n  private subtitleManager: ActiveSubtitleManager;\n  private previewSubtitleActive: boolean;\n  private previewSubtitle: SubtitleLabel;\n\n  private preprocessLabelEventCallback = new EventDispatcher<SubtitleCueEvent, SubtitleLabel>();\n  private subtitleContainerManager: SubtitleRegionContainerManager;\n\n  private static readonly CLASS_CONTROLBAR_VISIBLE = 'controlbar-visible';\n  private static readonly CLASS_CEA_608 = 'cea608';\n\n  // The number of rows in a cea608 grid\n  private static readonly CEA608_NUM_ROWS = 15;\n  // The number of columns in a cea608 grid\n  private static readonly CEA608_NUM_COLUMNS = 32;\n  // The offset in percent for one row (which is also the height of a row)\n  private static readonly CEA608_ROW_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_ROWS;\n  // The offset in percent for one column (which is also the width of a column)\n  private static readonly CEA608_COLUMN_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_COLUMNS;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.previewSubtitleActive = false;\n    this.previewSubtitle = new SubtitleLabel({ text: i18n.getLocalizer('subtitle.example') });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitle-overlay',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let subtitleManager = new ActiveSubtitleManager();\n    this.subtitleManager = subtitleManager;\n\n    this.subtitleContainerManager = new SubtitleRegionContainerManager(this);\n\n    player.on(player.exports.PlayerEvent.CueEnter, (event: SubtitleCueEvent) => {\n      const label = this.generateLabel(event);\n      subtitleManager.cueEnter(event, label);\n\n      this.preprocessLabelEventCallback.dispatch(event, label);\n\n      if (this.previewSubtitleActive) {\n        this.subtitleContainerManager.removeLabel(this.previewSubtitle);\n      }\n\n      this.show();\n\n      this.subtitleContainerManager.addLabel(label, this.getDomElement().size());\n      this.updateComponents();\n\n      if (uimanager.getConfig().forceSubtitlesIntoViewContainer) {\n        this.handleSubtitleCropping(label);\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.CueUpdate, (event: SubtitleCueEvent) => {\n      const label = this.generateLabel(event);\n      const labelToReplace = subtitleManager.cueUpdate(event, label);\n\n      this.preprocessLabelEventCallback.dispatch(event, label);\n\n      if (labelToReplace) {\n        this.subtitleContainerManager.replaceLabel(labelToReplace, label);\n      }\n\n      if (uimanager.getConfig().forceSubtitlesIntoViewContainer) {\n        this.handleSubtitleCropping(label);\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.CueExit, (event: SubtitleCueEvent) => {\n      let labelToRemove = subtitleManager.cueExit(event);\n\n      if (labelToRemove) {\n        this.subtitleContainerManager.removeLabel(labelToRemove);\n        this.updateComponents();\n      }\n\n      if (!subtitleManager.hasCues) {\n        if (!this.previewSubtitleActive) {\n          this.hide();\n        } else {\n          this.subtitleContainerManager.addLabel(this.previewSubtitle);\n          this.updateComponents();\n        }\n      }\n    });\n\n    let subtitleClearHandler = () => {\n      this.hide();\n      this.subtitleContainerManager.clear();\n      subtitleManager.clear();\n      this.removeComponents();\n      this.updateComponents();\n    };\n\n    const clearInactiveCues = () => {\n      const removedActiveCues = subtitleManager.clearInactiveCues(player.getCurrentTime());\n      removedActiveCues.forEach(toRemove => {\n        this.subtitleContainerManager.removeLabel(toRemove.label);\n      });\n    };\n\n    player.on(player.exports.PlayerEvent.AudioChanged, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SubtitleEnabled, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SubtitleDisabled, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.Seeked, clearInactiveCues);\n    player.on(player.exports.PlayerEvent.TimeShifted, clearInactiveCues);\n    player.on(player.exports.PlayerEvent.PlaybackFinished, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, subtitleClearHandler);\n\n    uimanager.onComponentShow.subscribe((component: Component<ComponentConfig>) => {\n      if (component instanceof ControlBar) {\n        this.getDomElement().addClass(this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));\n      }\n    });\n    uimanager.onComponentHide.subscribe((component: Component<ComponentConfig>) => {\n      if (component instanceof ControlBar) {\n        this.getDomElement().removeClass(this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));\n      }\n    });\n\n    this.configureCea608Captions(player, uimanager);\n    // Init\n    subtitleClearHandler();\n  }\n\n  detectCroppedSubtitleLabel(\n    labelElement: HTMLElement,\n  ): SubtitleCropDetectionResult {\n    const parent = this.getDomElement().get(0);\n\n    const childRect = labelElement.getBoundingClientRect();\n    const parentRect = parent.getBoundingClientRect();\n\n    return {\n      top: childRect.top < parentRect.top,\n      right: childRect.right > parentRect.right,\n      bottom: childRect.bottom > parentRect.bottom,\n      left: childRect.left < parentRect.left,\n    };\n  }\n\n  handleSubtitleCropping(label: SubtitleLabel) {\n    const labelDomElement = label.getDomElement();\n    const cropDetection = this.detectCroppedSubtitleLabel(\n      labelDomElement.get(0),\n    );\n\n    if (cropDetection.top) {\n      labelDomElement.css('top', '0');\n      labelDomElement.removeCss('bottom');\n    }\n\n    if (cropDetection.right) {\n      labelDomElement.css('right', '0');\n      labelDomElement.removeCss('left');\n    }\n\n    if (cropDetection.bottom) {\n      labelDomElement.css('bottom', '0');\n      labelDomElement.removeCss('top');\n    }\n\n    if (cropDetection.left) {\n      labelDomElement.css('left', '0');\n      labelDomElement.removeCss('right');\n    }\n  }\n\n  generateLabel(event: SubtitleCueEvent): SubtitleLabel {\n    // Sanitize cue data (must be done before the cue ID is generated in subtitleManager.cueEnter / update)\n    if (event.position) {\n      // Sometimes the positions are undefined, we assume them to be zero\n      event.position.row = event.position.row || 0;\n      event.position.column = event.position.column || 0;\n    }\n\n    const label = new SubtitleLabel({\n      // Prefer the HTML subtitle text if set, else try generating a image tag as string from the image attribute,\n      // else use the plain text\n      text: event.html || ActiveSubtitleManager.generateImageTagText(event.image) || event.text,\n      vtt: event.vtt,\n      region: event.region,\n      regionStyle: event.regionStyle,\n    });\n\n    return label;\n  }\n\n  configureCea608Captions(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // The calculated font size\n    let fontSize = 0;\n    // The required letter spacing spread the text characters evenly across the grid\n    let fontLetterSpacing = 0;\n    // Flag telling if a font size calculation is required of if the current values are valid\n    let fontSizeCalculationRequired = true;\n    // Flag telling if the CEA-608 mode is enabled\n    let enabled = false;\n\n    const updateCEA608FontSize = () => {\n      const dummyLabel = new SubtitleLabel({ text: 'X' });\n      dummyLabel.getDomElement().css({\n        // By using a large font size we do not need to use multiple letters and can get still an\n        // accurate measurement even though the returned size is an integer value\n        'font-size': '200px',\n        'line-height': '200px',\n        'visibility': 'hidden',\n      });\n      this.addComponent(dummyLabel);\n      this.updateComponents();\n      this.show();\n\n      const dummyLabelCharWidth = dummyLabel.getDomElement().width();\n      const dummyLabelCharHeight = dummyLabel.getDomElement().height();\n      const fontSizeRatio = dummyLabelCharWidth / dummyLabelCharHeight;\n\n      this.removeComponent(dummyLabel);\n      this.updateComponents();\n      if (!this.subtitleManager.hasCues) {\n        this.hide();\n      }\n\n      // We subtract 1px here to avoid line breaks at the right border of the subtitle overlay that can happen\n      // when texts contain whitespaces. It's probably some kind of pixel rounding issue in the browser's\n      // layouting, but the actual reason could not be determined. Aiming for a target width - 1px would work in\n      // most browsers, but Safari has a \"quantized\" font size rendering with huge steps in between so we need\n      // to subtract some more pixels to avoid line breaks there as well.\n      const subtitleOverlayWidth = this.getDomElement().width() - 10;\n      const subtitleOverlayHeight = this.getDomElement().height();\n\n      // The size ratio of the letter grid\n      const fontGridSizeRatio = (dummyLabelCharWidth * SubtitleOverlay.CEA608_NUM_COLUMNS) /\n        (dummyLabelCharHeight * SubtitleOverlay.CEA608_NUM_ROWS);\n      // The size ratio of the available space for the grid\n      const subtitleOverlaySizeRatio = subtitleOverlayWidth / subtitleOverlayHeight;\n\n      if (subtitleOverlaySizeRatio > fontGridSizeRatio) {\n        // When the available space is wider than the text grid, the font size is simply\n        // determined by the height of the available space.\n        fontSize = subtitleOverlayHeight / SubtitleOverlay.CEA608_NUM_ROWS;\n\n        // Calculate the additional letter spacing required to evenly spread the text across the grid's width\n        const gridSlotWidth = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS;\n        const fontCharWidth = fontSize * fontSizeRatio;\n        fontLetterSpacing = gridSlotWidth - fontCharWidth;\n      } else {\n        // When the available space is not wide enough, texts would vertically overlap if we take\n        // the height as a base for the font size, so we need to limit the height. We do that\n        // by determining the font size by the width of the available space.\n        fontSize = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS / fontSizeRatio;\n        fontLetterSpacing = 0;\n      }\n\n      // Update font-size of all active subtitle labels\n      for (let label of this.getComponents()) {\n        if (label instanceof SubtitleLabel) {\n          label.getDomElement().css({\n            'font-size': `${fontSize}px`,\n            'letter-spacing': `${fontLetterSpacing}px`,\n          });\n        }\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      if (enabled) {\n        updateCEA608FontSize();\n      } else {\n        fontSizeCalculationRequired = true;\n      }\n    });\n\n    this.preprocessLabelEventCallback.subscribe((event: SubtitleCueEvent, label: SubtitleLabel) => {\n      const isCEA608 = event.position != null;\n      if (!isCEA608) {\n        // Skip all non-CEA608 cues\n        return;\n      }\n\n      if (!enabled) {\n        enabled = true;\n        this.getDomElement().addClass(this.prefixCss(SubtitleOverlay.CLASS_CEA_608));\n\n        // We conditionally update the font size by this flag here to avoid updating every time a subtitle\n        // is added into an empty overlay. Because we reset the overlay when all subtitles are gone, this\n        // would trigger an unnecessary update every time, but it's only required under certain conditions,\n        // e.g. after the player size has changed.\n        if (fontSizeCalculationRequired) {\n          updateCEA608FontSize();\n          fontSizeCalculationRequired = false;\n        }\n      }\n\n      label.getDomElement().css({\n        'left': `${event.position.column * SubtitleOverlay.CEA608_COLUMN_OFFSET}%`,\n        'top': `${event.position.row * SubtitleOverlay.CEA608_ROW_OFFSET}%`,\n        'font-size': `${fontSize}px`,\n        'letter-spacing': `${fontLetterSpacing}px`,\n      });\n    });\n\n    const reset = () => {\n      this.getDomElement().removeClass(this.prefixCss(SubtitleOverlay.CLASS_CEA_608));\n      enabled = false;\n    };\n\n    player.on(player.exports.PlayerEvent.CueExit, () => {\n      if (!this.subtitleManager.hasCues) {\n        // Disable CEA-608 mode when all subtitles are gone (to allow correct formatting and\n        // display of other types of subtitles, e.g. the formatting preview subtitle)\n        reset();\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.SourceUnloaded, reset);\n    player.on(player.exports.PlayerEvent.SubtitleEnabled, reset);\n    player.on(player.exports.PlayerEvent.SubtitleDisabled, reset);\n  }\n\n  enablePreviewSubtitleLabel(): void {\n    if (!this.subtitleManager.hasCues) {\n      this.previewSubtitleActive = true;\n      this.subtitleContainerManager.addLabel(this.previewSubtitle);\n      this.updateComponents();\n      this.show();\n    }\n  }\n\n  removePreviewSubtitleLabel(): void {\n    if (this.previewSubtitleActive) {\n      this.previewSubtitleActive = false;\n      this.subtitleContainerManager.removeLabel(this.previewSubtitle);\n      this.updateComponents();\n    }\n  }\n}\n\ninterface ActiveSubtitleCue {\n  event: SubtitleCueEvent;\n  label: SubtitleLabel;\n}\n\ninterface ActiveSubtitleCueMap {\n  [id: string]: ActiveSubtitleCue[];\n}\n\ninterface SubtitleLabelConfig extends LabelConfig {\n  vtt?: VTTProperties;\n  region?: string;\n  regionStyle?: string;\n}\n\nexport class SubtitleLabel extends Label<SubtitleLabelConfig> {\n\n  constructor(config: SubtitleLabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitle-label',\n    }, this.config);\n  }\n\n  get vtt(): VTTProperties {\n    return this.config.vtt;\n  }\n\n  get region(): string {\n    return this.config.region;\n  }\n\n  get regionStyle(): string {\n    return this.config.regionStyle;\n  }\n}\n\nclass ActiveSubtitleManager {\n\n  private activeSubtitleCueMap: ActiveSubtitleCueMap;\n  private activeSubtitleCueCount: number;\n\n  constructor() {\n    this.activeSubtitleCueMap = {};\n    this.activeSubtitleCueCount = 0;\n  }\n\n  /**\n   * Calculates a unique ID for a subtitle cue, which is needed to associate an CueEnter with its CueExit\n   * event so we can remove the correct subtitle in CueExit when multiple subtitles are active at the same time.\n   * The start time plus the text should make a unique identifier, and in the only case where a collision\n   * can happen, two similar texts will be displayed at a similar time and a similar position (or without position).\n   * The start time should always be known, because it is required to schedule the CueEnter event. The end time\n   * must not necessarily be known and therefore cannot be used for the ID.\n   * @param event\n   * @return {string}\n   */\n  private static calculateId(event: SubtitleCueEvent): string {\n    let id = event.start + '-' + event.text;\n\n    if (event.position) {\n      id += '-' + event.position.row + '-' + event.position.column;\n    }\n\n    return id;\n  }\n\n  cueEnter(event: SubtitleCueEvent, label: SubtitleLabel): void {\n    this.addCueToMap(event, label);\n  }\n\n  cueUpdate(event: SubtitleCueEvent, label: SubtitleLabel): SubtitleLabel | undefined {\n    const labelToReplace = this.popCueFromMap(event);\n\n    if (labelToReplace) {\n      this.addCueToMap(event, label);\n      return labelToReplace;\n    }\n\n    return undefined;\n  }\n\n  private addCueToMap(event: SubtitleCueEvent, label: SubtitleLabel): void {\n    let id = ActiveSubtitleManager.calculateId(event);\n\n    // Create array for id if it does not exist\n    this.activeSubtitleCueMap[id] = this.activeSubtitleCueMap[id] || [];\n\n    // Add cue\n    this.activeSubtitleCueMap[id].push({ event, label });\n    this.activeSubtitleCueCount++;\n  }\n\n  private popCueFromMap(event: SubtitleCueEvent): SubtitleLabel | undefined {\n    let id = ActiveSubtitleManager.calculateId(event);\n    let activeSubtitleCues = this.activeSubtitleCueMap[id];\n\n    if (activeSubtitleCues && activeSubtitleCues.length > 0) {\n      // Remove cue\n      /* We apply the FIFO approach here and remove the oldest cue from the associated id. When there are multiple cues\n       * with the same id, there is no way to know which one of the cues is to be deleted, so we just hope that FIFO\n       * works fine. Theoretically it can happen that two cues with colliding ids are removed at different times, in\n       * the wrong order. This rare case has yet to be observed. If it ever gets an issue, we can take the unstable\n       * cue end time (which can change between CueEnter and CueExit IN CueUpdate) and use it as an\n       * additional hint to try and remove the correct one of the colliding cues.\n       */\n      let activeSubtitleCue = activeSubtitleCues.shift();\n      this.activeSubtitleCueCount--;\n\n      return activeSubtitleCue.label;\n    }\n  }\n\n  /**\n   * Removes all active cues which don't enclose the given time\n   * @param time the time for which subtitles should remain\n   */\n  public clearInactiveCues(time: number): ActiveSubtitleCue[] {\n    const removedCues: ActiveSubtitleCue[] = [];\n    Object.keys(this.activeSubtitleCueMap).forEach(key => {\n      const activeCues = this.activeSubtitleCueMap[key];\n      activeCues.forEach(cue => {\n        if (time < cue.event.start || time > cue.event.end) {\n          this.popCueFromMap(cue.event);\n          removedCues.push(cue);\n        }\n      });\n    });\n    return removedCues;\n  }\n\n  static generateImageTagText(imageData: string): string | undefined {\n    if (!imageData) {\n      return;\n    }\n\n    const imgTag = new DOM('img', {\n      src: imageData,\n    });\n    imgTag.css('width', '100%');\n    return imgTag.get(0).outerHTML; // return the html as string\n  }\n\n  /**\n   * Returns the label associated with an already added cue.\n   * @param event\n   * @return {SubtitleLabel}\n   */\n  getCues(event: SubtitleCueEvent): SubtitleLabel[] | undefined {\n    let id = ActiveSubtitleManager.calculateId(event);\n    let activeSubtitleCues = this.activeSubtitleCueMap[id];\n    if (activeSubtitleCues && activeSubtitleCues.length > 0) {\n      return activeSubtitleCues.map((cue) => cue.label);\n    }\n  }\n\n  /**\n   * Removes the subtitle cue from the manager and returns the label that should be removed from the subtitle overlay,\n   * or null if there is no associated label existing (e.g. because all labels have been {@link #clear cleared}.\n   * @param event\n   * @return {SubtitleLabel|null}\n   */\n  cueExit(event: SubtitleCueEvent): SubtitleLabel {\n    return this.popCueFromMap(event);\n  }\n\n  /**\n   * Returns the number of active subtitle cues.\n   * @return {number}\n   */\n  get cueCount(): number {\n    // We explicitly count the cues to save an Array.reduce on every cueCount call (which can happen frequently)\n    return this.activeSubtitleCueCount;\n  }\n\n  /**\n   * Returns true if there are active subtitle cues, else false.\n   * @return {boolean}\n   */\n  get hasCues(): boolean {\n    return this.cueCount > 0;\n  }\n\n  /**\n   * Removes all subtitle cues from the manager.\n   */\n  clear(): void {\n    this.activeSubtitleCueMap = {};\n    this.activeSubtitleCueCount = 0;\n  }\n}\n\nexport class SubtitleRegionContainerManager {\n  private subtitleRegionContainers: { [regionName: string]: SubtitleRegionContainer } = {};\n\n  /**\n   * @param subtitleOverlay Reference to the subtitle overlay for adding and removing the containers.\n   */\n  constructor(private subtitleOverlay: SubtitleOverlay) {\n    this.subtitleOverlay = subtitleOverlay;\n  }\n\n  private getRegion(label: SubtitleLabel): { regionContainerId: string, regionName: string } {\n    if (label.vtt) {\n      return {\n        regionContainerId: label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt',\n        regionName: 'vtt',\n      };\n    }\n\n    return {\n      regionContainerId: label.region || 'default',\n      regionName: label.region || 'default',\n    };\n  }\n\n  /**\n   * Creates and wraps a subtitle label into a container div based on the subtitle region.\n   * If the subtitle has positioning information it is added to the container.\n   * @param label The subtitle label to wrap\n   */\n  addLabel(label: SubtitleLabel, overlaySize?: Size): void {\n    const { regionContainerId, regionName } = this.getRegion(label);\n    const cssClasses = [`subtitle-position-${regionName}`];\n\n    if (label.vtt && label.vtt.region) {\n      cssClasses.push(`vtt-region-${label.vtt.region.id}`);\n    }\n\n    if (!this.subtitleRegionContainers[regionContainerId]) {\n      const regionContainer = new SubtitleRegionContainer({\n        cssClasses,\n      });\n\n      this.subtitleRegionContainers[regionContainerId] = regionContainer;\n\n      if (label.regionStyle) {\n        regionContainer.getDomElement().attr('style', label.regionStyle);\n      } else if (label.vtt && !label.vtt.region) {\n        /**\n         * If there is no region present to wrap the Cue Box, the Cue box becomes the\n         * region itself. Therefore the positioning values have to come from the box.\n         */\n        regionContainer.getDomElement().css('position', 'static');\n      } else {\n        // getDomElement needs to be called at least once to ensure the component exists\n        regionContainer.getDomElement();\n      }\n\n      for (const regionContainerId in this.subtitleRegionContainers) {\n        this.subtitleOverlay.addComponent(this.subtitleRegionContainers[regionContainerId]);\n      }\n    }\n\n    this.subtitleRegionContainers[regionContainerId].addLabel(label, overlaySize);\n  }\n\n  replaceLabel(previousLabel: SubtitleLabel, newLabel: SubtitleLabel): void {\n    const { regionContainerId } = this.getRegion(previousLabel);\n\n    this.subtitleRegionContainers[regionContainerId].removeLabel(previousLabel);\n    this.subtitleRegionContainers[regionContainerId].addLabel(newLabel);\n  }\n\n  /**\n   * Removes a subtitle label from a container.\n   */\n  removeLabel(label: SubtitleLabel): void {\n    let regionContainerId;\n\n    if (label.vtt) {\n      regionContainerId = label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt';\n    } else {\n      regionContainerId = label.region || 'default';\n    }\n\n    this.subtitleRegionContainers[regionContainerId].removeLabel(label);\n\n    // Remove container if no more labels are displayed\n    if (this.subtitleRegionContainers[regionContainerId].isEmpty()) {\n      this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionContainerId]);\n      delete this.subtitleRegionContainers[regionContainerId];\n    }\n  }\n\n  /**\n   * Removes all subtitle containers.\n   */\n  clear(): void {\n    for (const regionName in this.subtitleRegionContainers) {\n      this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionName]);\n    }\n\n    this.subtitleRegionContainers = {};\n  }\n}\n\nexport class SubtitleRegionContainer extends Container<ContainerConfig> {\n  private labelCount = 0;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'subtitle-region-container',\n    }, this.config);\n  }\n\n  addLabel(labelToAdd: SubtitleLabel, overlaySize?: Size) {\n    this.labelCount++;\n\n    if (labelToAdd.vtt) {\n      if (labelToAdd.vtt.region && overlaySize) {\n        VttUtils.setVttRegionStyles(this, labelToAdd.vtt.region, overlaySize);\n      }\n\n      VttUtils.setVttCueBoxStyles(labelToAdd, overlaySize);\n    }\n\n    this.addComponent(labelToAdd);\n    this.updateComponents();\n  }\n\n  removeLabel(labelToRemove: SubtitleLabel): void {\n    this.labelCount--;\n    this.removeComponent(labelToRemove);\n    this.updateComponents();\n  }\n\n  public isEmpty(): boolean {\n    return this.labelCount === 0;\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport {SubtitleSwitchHandler} from '../subtitleutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between available subtitle and caption tracks.\n */\nexport class SubtitleSelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitleselectbox'],\n      ariaLabel: i18n.getLocalizer('subtitle.select'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new SubtitleSwitchHandler(player, this, uimanager);\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background colors.\n */\nexport class BackgroundColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsbackgroundcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.backgroundColor.isSet() && this.settingsManager.backgroundOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'bgcolor-' + this.settingsManager.backgroundColor.value + this.settingsManager.backgroundOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.backgroundColor.value = key;\n    });\n\n    this.settingsManager.backgroundColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.backgroundColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.backgroundOpacity.clear();\n      } else if (!this.settingsManager.backgroundOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.backgroundOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.backgroundOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.backgroundColor.isSet()) {\n      this.selectItem(this.settingsManager.backgroundColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background opacity.\n */\nexport class BackgroundOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsbackgroundopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n    this.addItem('0', i18n.getLocalizer('percent', { value: 0 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.backgroundOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.backgroundOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.backgroundColor.clear();\n      } else if (!this.settingsManager.backgroundColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.backgroundColor.value = 'black';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.backgroundOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.backgroundOpacity.isSet()) {\n      this.selectItem(this.settingsManager.backgroundOpacity.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different character edge.\n */\nexport class CharacterEdgeSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingscharacteredgeselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('raised', i18n.getLocalizer('settings.subtitles.characterEdge.raised'));\n    this.addItem('depressed', i18n.getLocalizer('settings.subtitles.characterEdge.depressed'));\n    this.addItem('uniform', i18n.getLocalizer('settings.subtitles.characterEdge.uniform'));\n    this.addItem('dropshadowed', i18n.getLocalizer('settings.subtitles.characterEdge.dropshadowed'));\n\n    this.settingsManager.characterEdge.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('characteredge-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.characterEdge.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.characterEdge.isSet()) {\n      this.selectItem(this.settingsManager.characterEdge.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.fontColor.isSet() && this.settingsManager.fontOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'fontcolor-' + this.settingsManager.fontColor.value + this.settingsManager.fontOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontColor.value = key;\n    });\n\n    this.settingsManager.fontColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.fontColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.fontOpacity.clear();\n      } else if (!this.settingsManager.fontOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.fontOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.fontOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontColor.isSet()) {\n      this.selectItem(this.settingsManager.fontColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font family.\n */\nexport class FontFamilySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontfamilyselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('monospacedserif', i18n.getLocalizer('settings.subtitles.font.family.monospacedserif'));\n    this.addItem('proportionalserif', i18n.getLocalizer('settings.subtitles.font.family.proportionalserif'));\n    this.addItem('monospacedsansserif', i18n.getLocalizer('settings.subtitles.font.family.monospacedsansserif'));\n    this.addItem('proportionalsansserif', i18n.getLocalizer('settings.subtitles.font.family.proportionalserif'));\n    this.addItem('casual', i18n.getLocalizer('settings.subtitles.font.family.casual'));\n    this.addItem('cursive', i18n.getLocalizer('settings.subtitles.font.family.cursive'));\n    this.addItem('smallcapital', i18n.getLocalizer('settings.subtitles.font.family.smallcapital'));\n\n    this.settingsManager.fontFamily.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('fontfamily-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontFamily.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontFamily.isSet()) {\n      this.selectItem(this.settingsManager.fontFamily.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.fontOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.fontColor.clear();\n      } else if (!this.settingsManager.fontColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.fontColor.value = 'white';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.fontOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontOpacity.isSet()) {\n      this.selectItem(this.settingsManager.fontOpacity.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontSizeSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontsizeselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('150', i18n.getLocalizer('percent', { value: 150 }));\n    this.addItem('200', i18n.getLocalizer('percent', { value: 200 }));\n    this.addItem('300', i18n.getLocalizer('percent', { value: 300 }));\n    this.addItem('400', i18n.getLocalizer('percent', { value: 400 }));\n\n    this.settingsManager.fontSize.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('fontsize-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontSize.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontSize.isSet()) {\n      this.selectItem(this.settingsManager.fontSize.value);\n    }\n  }\n}\n","import {SubtitleOverlay} from '../subtitleoverlay';\nimport {ListSelectorConfig} from '../listselector';\nimport {SelectBox} from '../selectbox';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\n\nexport interface SubtitleSettingSelectBoxConfig extends ListSelectorConfig {\n  overlay: SubtitleOverlay;\n  settingsManager: SubtitleSettingsManager;\n}\n\n/**\n * Base class for all subtitles settings select box\n **/\nexport class SubtitleSettingSelectBox extends SelectBox {\n\n  protected settingsManager: SubtitleSettingsManager;\n  protected overlay: SubtitleOverlay;\n  private currentCssClass: string;\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.settingsManager = config.settingsManager;\n    this.overlay = config.overlay;\n  }\n\n  /**\n   * Removes a previously set class and adds the passed in class.\n   * @param cssClass The new class to replace the previous class with or null to just remove the previous class\n   */\n  protected toggleOverlayClass(cssClass: string): void {\n    // Remove previous class if existing\n    if (this.currentCssClass) {\n      this.overlay.getDomElement().removeClass(this.currentCssClass);\n      this.currentCssClass = null;\n    }\n\n    // Add new class if specified. If the new class is null, we don't add anything.\n    if (cssClass) {\n      this.currentCssClass = this.prefixCss(cssClass);\n      this.overlay.getDomElement().addClass(this.currentCssClass);\n    }\n  }\n}\n","import {LabelConfig} from '../label';\nimport {Container, ContainerConfig} from '../container';\nimport {DOM} from '../../dom';\nimport {SettingsPanelPageOpenButton} from '../settingspanelpageopenbutton';\nimport { LocalizableText, i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsLabelConfig extends LabelConfig {\n  opener: SettingsPanelPageOpenButton;\n}\n\nexport class SubtitleSettingsLabel extends Container<ContainerConfig> {\n\n  private opener: SettingsPanelPageOpenButton;\n\n  private text: LocalizableText;\n\n  private for: string;\n\n  constructor(config: SubtitleSettingsLabelConfig) {\n    super(config);\n\n    this.opener = config.opener;\n    this.text = config.text;\n    this.for = config.for;\n\n    this.config = this.mergeConfig(<ContainerConfig>config, {\n      cssClass: 'ui-label',\n      components: [\n        this.opener,\n      ],\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let labelElement = new DOM('label', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'for': this.for,\n    }).append(\n      new DOM('span', {}).html(i18n.performLocalization(this.text)),\n      this.opener.getDomElement(),\n    );\n\n    return labelElement;\n  }\n}\n","import {StorageUtils} from '../../storageutils';\nimport {Component, ComponentConfig} from '../component';\nimport {EventDispatcher, Event} from '../../eventdispatcher';\n\ninterface SubtitleSettings {\n  fontColor?: string;\n  fontOpacity?: string;\n  fontFamily?: string;\n  fontSize?: string;\n  characterEdge?: string;\n  backgroundColor?: string;\n  backgroundOpacity?: string;\n  windowColor?: string;\n  windowOpacity?: string;\n}\n\ninterface Properties {\n  [name: string]: SubtitleSettingsProperty<string>;\n}\n\nexport class SubtitleSettingsManager {\n\n  private userSettings: SubtitleSettings;\n  private localStorageKey: string;\n\n  private _properties: Properties = {\n    fontColor: new SubtitleSettingsProperty<string>(this),\n    fontOpacity: new SubtitleSettingsProperty<string>(this),\n    fontFamily: new SubtitleSettingsProperty<string>(this),\n    fontSize: new SubtitleSettingsProperty<string>(this),\n    characterEdge: new SubtitleSettingsProperty<string>(this),\n    backgroundColor: new SubtitleSettingsProperty<string>(this),\n    backgroundOpacity: new SubtitleSettingsProperty<string>(this),\n    windowColor: new SubtitleSettingsProperty<string>(this),\n    windowOpacity: new SubtitleSettingsProperty<string>(this),\n  };\n\n  constructor() {\n    this.userSettings = {};\n    this.localStorageKey = DummyComponent.instance().prefixCss('subtitlesettings');\n\n    for (let propertyName in this._properties) {\n      this._properties[propertyName].onChanged.subscribe((sender, property) => {\n        if (property.isSet()) {\n          (<any>this.userSettings)[propertyName] = property.value;\n        } else {\n          // Delete the property from the settings object if unset to avoid serialization of null values\n          delete (<any>this.userSettings)[propertyName];\n        }\n\n        // Save the settings object when a property has changed\n        this.save();\n      });\n    }\n\n    this.load();\n  }\n\n  public reset(): void {\n    for (let propertyName in this._properties) {\n      this._properties[propertyName].clear();\n    }\n  }\n\n  public get fontColor(): SubtitleSettingsProperty<string> {\n    return this._properties.fontColor;\n  }\n\n  public get fontOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.fontOpacity;\n  }\n\n  public get fontFamily(): SubtitleSettingsProperty<string> {\n    return this._properties.fontFamily;\n  }\n\n  public get fontSize(): SubtitleSettingsProperty<string> {\n    return this._properties.fontSize;\n  }\n\n  public get characterEdge(): SubtitleSettingsProperty<string> {\n    return this._properties.characterEdge;\n  }\n\n  public get backgroundColor(): SubtitleSettingsProperty<string> {\n    return this._properties.backgroundColor;\n  }\n\n  public get backgroundOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.backgroundOpacity;\n  }\n\n  public get windowColor(): SubtitleSettingsProperty<string> {\n    return this._properties.windowColor;\n  }\n\n  public get windowOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.windowOpacity;\n  }\n\n  /**\n   * Saves the settings to local storage.\n   */\n  public save(): void {\n    StorageUtils.setObject(this.localStorageKey, this.userSettings);\n  }\n\n  /**\n   * Loads the settings from local storage\n   */\n  public load(): void {\n    this.userSettings = StorageUtils.getObject<SubtitleSettings>(this.localStorageKey) || {};\n\n    // Apply the loaded settings\n    for (let property in this.userSettings) {\n      this._properties[property].value = (<any>this.userSettings)[property];\n    }\n  }\n}\n\n/**\n * A dummy component whose sole purpose is to expose the {@link #prefixCss} method to the\n * {@link SubtitleSettingsManager}.\n */\nclass DummyComponent extends Component<ComponentConfig> {\n\n  private static _instance: DummyComponent;\n\n  public static instance(): DummyComponent {\n    if (!DummyComponent._instance) {\n      DummyComponent._instance = new DummyComponent();\n    }\n\n    return DummyComponent._instance;\n  }\n\n  public prefixCss(cssClassOrId: string): string {\n    return super.prefixCss(cssClassOrId);\n  }\n}\n\nexport class SubtitleSettingsProperty<T> {\n\n  private _manager: SubtitleSettingsManager;\n  private _onChanged: EventDispatcher<SubtitleSettingsManager, SubtitleSettingsProperty<T>>;\n  private _value: T;\n\n  constructor(manager: SubtitleSettingsManager) {\n    this._manager = manager;\n    this._onChanged = new EventDispatcher<SubtitleSettingsManager, SubtitleSettingsProperty<T>>();\n  }\n\n  public isSet(): boolean {\n    return this._value != null;\n  }\n\n  public clear(): void {\n    this._value = null;\n    this.onChangedEvent(null);\n  }\n\n  public get value(): T {\n    return this._value;\n  }\n\n  public set value(value: T) {\n    if (typeof value === 'string' && value === 'null') {\n      value = null;\n    }\n\n    this._value = value;\n    this.onChangedEvent(value);\n  }\n\n  protected onChangedEvent(value: T) {\n    this._onChanged.dispatch(this._manager, this);\n  }\n\n  public get onChanged(): Event<SubtitleSettingsManager, SubtitleSettingsProperty<T>> {\n    return this._onChanged.getEvent();\n  }\n}","import {SettingsPanelPage} from '../settingspanelpage';\nimport {SettingsPanel} from '../settingspanel';\nimport {SubtitleOverlay} from '../subtitleoverlay';\nimport {ContainerConfig} from '../container';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\nimport {Component, ComponentConfig} from '../component';\nimport {FontSizeSelectBox} from './fontsizeselectbox';\nimport {FontFamilySelectBox} from './fontfamilyselectbox';\nimport {FontColorSelectBox} from './fontcolorselectbox';\nimport {FontOpacitySelectBox} from './fontopacityselectbox';\nimport {CharacterEdgeSelectBox} from './characteredgeselectbox';\nimport {BackgroundColorSelectBox} from './backgroundcolorselectbox';\nimport {BackgroundOpacitySelectBox} from './backgroundopacityselectbox';\nimport {WindowColorSelectBox} from './windowcolorselectbox';\nimport {WindowOpacitySelectBox} from './windowopacityselectbox';\nimport {SubtitleSettingsResetButton} from './subtitlesettingsresetbutton';\nimport {UIInstanceManager} from '../../uimanager';\nimport {SettingsPanelPageBackButton} from '../settingspanelpagebackbutton';\nimport {SettingsPanelItem} from '../settingspanelitem';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsPanelPageConfig extends ContainerConfig {\n  settingsPanel: SettingsPanel;\n  overlay: SubtitleOverlay;\n}\n\nexport class SubtitleSettingsPanelPage extends SettingsPanelPage {\n\n  private readonly overlay: SubtitleOverlay;\n  private readonly settingsPanel: SettingsPanel;\n\n  constructor(config: SubtitleSettingsPanelPageConfig) {\n    super(config);\n\n    this.overlay = config.overlay;\n    this.settingsPanel = config.settingsPanel;\n\n    let manager = new SubtitleSettingsManager();\n\n    this.config = this.mergeConfig(config, {\n      components: <Component<ComponentConfig>[]>[\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.size'), new FontSizeSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.family'), new FontFamilySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.color'), new FontColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.opacity'), new FontOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.characterEdge'), new CharacterEdgeSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.background.color'), new BackgroundColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.background.opacity'), new BackgroundOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.window.color'), new WindowColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.window.opacity'), new WindowOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(new SettingsPanelPageBackButton({\n          container: this.settingsPanel,\n          text: i18n.getLocalizer('back'),\n        }), new SubtitleSettingsResetButton({\n          settingsManager: manager,\n        }), {\n          role: 'menubar',\n        }),\n      ],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onActive.subscribe(() => {\n      this.overlay.enablePreviewSubtitleLabel();\n    });\n\n    this.onInactive.subscribe(() => {\n      this.overlay.removePreviewSubtitleLabel();\n    });\n  }\n}","import {UIInstanceManager} from '../../uimanager';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\nimport {Button, ButtonConfig} from '../button';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsResetButtonConfig extends ButtonConfig {\n  settingsManager: SubtitleSettingsManager;\n}\n\n/**\n * A button that resets all subtitle settings to their defaults.\n */\nexport class SubtitleSettingsResetButton extends Button<ButtonConfig> {\n\n  constructor(config: SubtitleSettingsResetButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitlesettingsresetbutton',\n      text: i18n.getLocalizer('reset'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      (<SubtitleSettingsResetButtonConfig>this.config).settingsManager.reset();\n    });\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background colors.\n */\nexport class WindowColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingswindowcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.windowColor.isSet() && this.settingsManager.windowOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'windowcolor-' + this.settingsManager.windowColor.value + this.settingsManager.windowOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.windowColor.value = key;\n    });\n\n    this.settingsManager.windowColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.windowColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.windowOpacity.clear();\n      } else if (!this.settingsManager.windowOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.windowOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.windowOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.windowColor.isSet()) {\n      this.selectItem(this.settingsManager.windowColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background opacity.\n */\nexport class WindowOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingswindowopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n    this.addItem('0', i18n.getLocalizer('percent', { value: 0 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.windowOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.windowOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.windowColor.clear();\n      } else if (!this.settingsManager.windowColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.windowColor.value = 'black';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.windowOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.windowOpacity.isSet()) {\n      this.selectItem(this.settingsManager.windowOpacity.value);\n    }\n  }\n}\n","import { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\nimport { DOM } from '../dom';\nimport { ComponentConfig } from './component';\nimport { TimelineMarker } from '../uiconfig';\nimport { SeekBarMarker } from './seekbar';\nimport { PlayerUtils } from '../playerutils';\nimport { Timeout } from '../timeout';\n\nexport interface MarkersConfig extends ComponentConfig {\n  /**\n   * Used for seekBar marker snapping range percentage\n   */\n  snappingRange?: number;\n}\n\nexport class TimelineMarkersHandler {\n  private markersContainer: DOM;\n  private timelineMarkers: SeekBarMarker[];\n  private player: PlayerAPI;\n  private uimanager: UIInstanceManager;\n  private pausedTimeshiftUpdater: Timeout;\n  private getSeekBarWidth: () => number;\n  protected config: MarkersConfig;\n\n  constructor(config: MarkersConfig, getSeekBarWidth: () => number, markersContainer: DOM) {\n    this.config = config;\n    this.getSeekBarWidth = getSeekBarWidth;\n    this.markersContainer = markersContainer;\n    this.timelineMarkers = [];\n  }\n\n  public initialize(player: PlayerAPI, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.uimanager = uimanager;\n    this.configureMarkers();\n  }\n\n  private configureMarkers(): void {\n    // Remove markers when unloaded\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, () => this.clearMarkers());\n    this.player.on(this.player.exports.PlayerEvent.AdBreakStarted, () => this.clearMarkers());\n    this.player.on(this.player.exports.PlayerEvent.AdBreakFinished, () => this.updateMarkers());\n    // Update markers when the size of the seekbar changes\n    this.player.on(this.player.exports.PlayerEvent.PlayerResized, () => this.updateMarkersDOM());\n\n    this.player.on(this.player.exports.PlayerEvent.SourceLoaded, () => {\n      if (this.player.isLive()) {\n        // Update marker position as timeshift range changes\n        this.player.on(this.player.exports.PlayerEvent.TimeChanged, () => this.updateMarkers());\n        // Update marker postion when paused as timeshift range changes\n        this.configureLivePausedTimeshiftUpdater(() => this.updateMarkers());\n      }\n    });\n    this.uimanager.getConfig().events.onUpdated.subscribe(() => this.updateMarkers());\n    this.uimanager.onRelease.subscribe(() => this.uimanager.getConfig().events.onUpdated.unsubscribe(() => this.updateMarkers()));\n\n    // Init markers at startup\n    this.updateMarkers();\n  }\n\n  public getMarkerAtPosition(percentage: number): SeekBarMarker | null {\n    const snappingRange = this.config.snappingRange;\n\n    const matchingMarker = this.timelineMarkers.find(marker => {\n      const hasDuration = marker.duration > 0;\n      // Handle interval markers\n      const intervalMarkerMatch =\n        hasDuration &&\n        percentage >= marker.position - snappingRange &&\n        percentage <= marker.position + marker.duration + snappingRange;\n\n      // Handle position markers\n      const positionMarkerMatch =\n        percentage >= marker.position - snappingRange &&\n        percentage <= marker.position + snappingRange;\n\n      return intervalMarkerMatch || positionMarkerMatch;\n    });\n\n    return matchingMarker || null;\n  }\n\n  private clearMarkers(): void {\n    this.timelineMarkers = [];\n    this.markersContainer.empty();\n  }\n\n  private removeMarkerFromConfig(marker: TimelineMarker): void {\n    this.uimanager.getConfig().metadata.markers = this.uimanager.getConfig().metadata.markers.filter(_marker => marker !== _marker);\n  }\n\n  private filterRemovedMarkers(): void {\n    this.timelineMarkers = this.timelineMarkers.filter(seekbarMarker => {\n      const matchingMarker = this.uimanager.getConfig().metadata.markers.find(_marker => seekbarMarker.marker === _marker);\n      if (!matchingMarker) {\n        this.removeMarkerFromDOM(seekbarMarker);\n      }\n      return matchingMarker;\n    });\n  }\n\n  private removeMarkerFromDOM(marker: SeekBarMarker): void {\n    if (marker.element) {\n      marker.element.remove();\n    }\n  }\n\n  private updateMarkers(): void {\n    if (!shouldProcessMarkers(this.player, this.uimanager)) {\n      this.clearMarkers();\n      return;\n    }\n\n    this.filterRemovedMarkers();\n\n    this.uimanager.getConfig().metadata.markers.forEach(marker => {\n      const { markerPosition, markerDuration } = getMarkerPositions(this.player, marker);\n\n      if (shouldRemoveMarker(markerPosition, markerDuration)) {\n        this.removeMarkerFromConfig(marker);\n      } else if (markerPosition <= 100) {\n        const matchingMarker = this.timelineMarkers.find(seekbarMarker => seekbarMarker.marker === marker);\n\n        if (matchingMarker) {\n          matchingMarker.position = markerPosition;\n          matchingMarker.duration = markerDuration;\n\n          this.updateMarkerDOM(matchingMarker);\n        } else {\n          const newMarker: SeekBarMarker = { marker, position: markerPosition, duration: markerDuration };\n          this.timelineMarkers.push(newMarker);\n\n          this.createMarkerDOM(newMarker);\n        }\n      }\n    });\n  }\n\n  private getMarkerCssProperties(marker: SeekBarMarker): { [propertyName: string]: string } {\n    const seekBarWidthPx = this.getSeekBarWidth();\n\n    const positionInPx = (seekBarWidthPx / 100) * (marker.position < 0 ? 0 : marker.position);\n    const cssProperties: { [propertyName: string]: string } = {\n      'transform': `translateX(${positionInPx}px)`,\n    };\n\n    if (marker.duration > 0) {\n      const markerWidthPx = Math.round(seekBarWidthPx / 100 * marker.duration);\n      cssProperties['width'] = `${markerWidthPx}px`;\n    }\n\n    return cssProperties;\n  }\n\n  private updateMarkerDOM(marker: SeekBarMarker): void {\n    marker.element.css(this.getMarkerCssProperties(marker));\n  }\n\n  private createMarkerDOM(marker: SeekBarMarker): void {\n    const markerClasses = ['seekbar-marker'].concat(marker.marker.cssClasses || [])\n      .map(cssClass => this.prefixCss(cssClass));\n\n    const markerElement = new DOM('div', {\n      'class': markerClasses.join(' '),\n      'data-marker-time': String(marker.marker.time),\n      'data-marker-title': String(marker.marker.title),\n    }).css(this.getMarkerCssProperties(marker));\n\n    if (marker.marker.imageUrl) {\n      const removeImage = () => {\n        imageElement.remove();\n      };\n\n      const imageElement = new DOM('img', {\n        'class': this.prefixCss('seekbar-marker-image'),\n        'src': marker.marker.imageUrl,\n      }).on('error', removeImage);\n\n      markerElement.append(imageElement);\n    }\n\n    marker.element = markerElement;\n    this.markersContainer.append(markerElement);\n  }\n\n  private updateMarkersDOM(): void {\n    this.timelineMarkers.forEach(marker => {\n      if (marker.element) {\n        this.updateMarkerDOM(marker);\n      } else {\n        this.createMarkerDOM(marker);\n      }\n    });\n  }\n\n  private configureLivePausedTimeshiftUpdater(\n    handler: () => void,\n  ): void {\n    // Regularly update the marker position while the timeout is active\n    this.pausedTimeshiftUpdater = new Timeout(1000, handler, true);\n\n    this.player.on(this.player.exports.PlayerEvent.Paused, () => {\n      if (this.player.isLive() && this.player.getMaxTimeShift() < 0) {\n        this.pausedTimeshiftUpdater.start();\n      }\n    });\n\n    // Stop updater when playback continues (no matter if the updater was started before)\n    this.player.on(this.player.exports.PlayerEvent.Play, () => this.pausedTimeshiftUpdater.clear());\n    this.player.on(this.player.exports.PlayerEvent.Destroy, () => this.pausedTimeshiftUpdater.clear());\n  }\n\n  protected prefixCss(cssClassOrId: string): string {\n    return this.config.cssPrefix + '-' + cssClassOrId;\n  }\n}\n\nfunction getMarkerPositions(player: PlayerAPI, marker: TimelineMarker) {\n  const duration = getDuration(player);\n\n  const markerPosition = 100 / duration * getMarkerTime(marker, player, duration); // convert absolute time to percentage\n  let markerDuration = 100 / duration * marker.duration;\n\n  if (markerPosition < 0 && !isNaN(markerDuration)) {\n    // Shrink marker duration for on live streams as they reach end\n    markerDuration = markerDuration + markerPosition;\n  }\n\n  if (100 - markerPosition < markerDuration) {\n    // Shrink marker if it overflows timeline\n    markerDuration = 100 - markerPosition;\n  }\n\n  return { markerDuration, markerPosition };\n}\n\nfunction getMarkerTime(marker: TimelineMarker, player: PlayerAPI, duration: number): number {\n  if (!player.isLive()) {\n    return marker.time;\n  }\n\n  return duration - (PlayerUtils.getSeekableRangeRespectingLive(player).end - marker.time);\n}\n\nfunction getDuration(player: PlayerAPI): number {\n  if (!player.isLive()) {\n    return player.getDuration();\n  }\n  const { start, end } = PlayerUtils.getSeekableRangeRespectingLive(player);\n\n  return end - start;\n}\n\nfunction shouldRemoveMarker(markerPosition: number, markerDuration: number): boolean {\n  return (markerDuration < 0 || isNaN(markerDuration)) && markerPosition < 0;\n}\n\nfunction shouldProcessMarkers(player: PlayerAPI, uimanager: UIInstanceManager): boolean {\n  // Don't generate timeline markers if we don't yet have a duration\n  // The duration check is for buggy platforms where the duration is not available instantly (Chrome on Android 4.3)\n  const validToProcess = player.getDuration() !== Infinity || player.isLive();\n  const hasMarkers = uimanager.getConfig().metadata.markers.length > 0;\n\n  return validToProcess && hasMarkers;\n}\n","import {Container, ContainerConfig} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {MetadataLabel, MetadataLabelContent} from './metadatalabel';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for a {@link TitleBar}.\n */\nexport interface TitleBarConfig extends ContainerConfig {\n  /**\n   * Specifies if the title bar should stay hidden when no metadata label contains any text. Does not make a lot\n   * of sense if the title bar contains other components than just MetadataLabels (like in the default configuration).\n   * Default: false\n   */\n  keepHiddenWithoutMetadata?: boolean;\n}\n\n/**\n * Displays a title bar containing a label with the title of the video.\n */\nexport class TitleBar extends Container<TitleBarConfig> {\n\n  constructor(config: TitleBarConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-titlebar',\n      hidden: true,\n      components: [\n        new MetadataLabel({ content: MetadataLabelContent.Title }),\n        new MetadataLabel({ content: MetadataLabelContent.Description }),\n      ],\n      keepHiddenWithoutMetadata: false,\n    }, <TitleBarConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let shouldBeShown = !this.isHidden();\n    let hasMetadataText = true; // Flag to track if any metadata label contains text\n\n    let checkMetadataTextAndUpdateVisibility = () => {\n      hasMetadataText = false;\n\n      // Iterate through metadata labels and check if at least one of them contains text\n      for (let component of this.getComponents()) {\n        if (component instanceof MetadataLabel) {\n          if (!component.isEmpty()) {\n            hasMetadataText = true;\n            break;\n          }\n        }\n      }\n\n      if (this.isShown()) {\n        // Hide a visible titlebar if it does not contain any text and the hidden flag is set\n        if (config.keepHiddenWithoutMetadata && !hasMetadataText) {\n          this.hide();\n        }\n      } else if (shouldBeShown) {\n        // Show a hidden titlebar if it should actually be shown\n        this.show();\n      }\n    };\n\n    // Listen to text change events to update the hasMetadataText flag when the metadata dynamically changes\n    for (let component of this.getComponents()) {\n      if (component instanceof MetadataLabel) {\n        component.onTextChanged.subscribe(checkMetadataTextAndUpdateVisibility);\n      }\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      shouldBeShown = true;\n      if (!(config.keepHiddenWithoutMetadata && !hasMetadataText)) {\n        this.show();\n      }\n    });\n    uimanager.onControlsHide.subscribe(() => {\n      shouldBeShown = false;\n      this.hide();\n    });\n\n    // init\n    checkMetadataTextAndUpdateVisibility();\n  }\n}","import {Button, ButtonConfig} from './button';\nimport {NoArgs, EventDispatcher, Event} from '../eventdispatcher';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { LocalizableText } from '../localization/i18n';\n\n/**\n * Configuration interface for a toggle button component.\n */\nexport interface ToggleButtonConfig extends ButtonConfig {\n  /**\n   * The CSS class that marks the on-state of the button.\n   */\n  onClass?: string;\n  /**\n   * The CSS class that marks the off-state of the button.\n   */\n  offClass?: string;\n  /**\n   * WCAG20 standard for defining info about the component (usually the name)\n   *\n   * It is recommended to use `onAriaLabel` and `offAriaLabel` for toggle buttons\n   * as the component can then update them as the button is used.\n   *\n   * If both `ariaLabel` and `onAriaLabel` are set, `onAriaLabel` is used.\n   */\n  ariaLabel?: LocalizableText;\n  /**\n   * The aria label that marks the on-state of the button.\n   */\n  onAriaLabel?: LocalizableText;\n  /**\n   * The aria label that marks the off-state of the button.\n   */\n  offAriaLabel?: LocalizableText;\n  /**\n   * The text as string or as localize callback on the button.\n   */\n  text?: LocalizableText;\n}\n\n/**\n * A button that can be toggled between 'on' and 'off' states.\n */\nexport class ToggleButton<Config extends ToggleButtonConfig> extends Button<Config> {\n\n  private onState: boolean;\n\n  private toggleButtonEvents = {\n    onToggle: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n    onToggleOn: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n    onToggleOff: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n  };\n\n  constructor(config: Config) {\n    super(config);\n\n    const defaultConfig: ToggleButtonConfig = {\n      cssClass: 'ui-togglebutton',\n      onClass: 'on',\n      offClass: 'off',\n    };\n\n    if (config.onAriaLabel) {\n      config.ariaLabel = config.onAriaLabel;\n    }\n\n    this.config = this.mergeConfig(config, defaultConfig as Config, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n    const config = this.getConfig();\n    this.getDomElement().addClass(this.prefixCss(config.offClass));\n  }\n\n  /**\n   * Toggles the button to the 'on' state.\n   */\n  on() {\n    if (this.isOff()) {\n      const config = this.getConfig();\n\n      this.onState = true;\n      this.getDomElement().removeClass(this.prefixCss(config.offClass));\n      this.getDomElement().addClass(this.prefixCss(config.onClass));\n\n      this.onToggleEvent();\n      this.onToggleOnEvent();\n\n      this.setAriaAttr('pressed', 'true');\n\n      if (this.config.onAriaLabel) {\n        this.setAriaLabel(this.config.onAriaLabel);\n      }\n    }\n  }\n\n  /**\n   * Toggles the button to the 'off' state.\n   */\n  off() {\n    if (this.isOn()) {\n      const config = this.getConfig();\n\n      this.onState = false;\n      this.getDomElement().removeClass(this.prefixCss(config.onClass));\n      this.getDomElement().addClass(this.prefixCss(config.offClass));\n\n      this.onToggleEvent();\n      this.onToggleOffEvent();\n\n      this.setAriaAttr('pressed', 'false');\n\n      if (this.config.offAriaLabel) {\n        this.setAriaLabel(this.config.offAriaLabel);\n      }\n    }\n  }\n\n  /**\n   * Toggle the button 'on' if it is 'off', or 'off' if it is 'on'.\n   */\n  toggle() {\n    if (this.isOn()) {\n      this.off();\n    } else {\n      this.on();\n    }\n  }\n\n  /**\n   * Checks if the toggle button is in the 'on' state.\n   * @returns {boolean} true if button is 'on', false if 'off'\n   */\n  isOn(): boolean {\n    return this.onState;\n  }\n\n  /**\n   * Checks if the toggle button is in the 'off' state.\n   * @returns {boolean} true if button is 'off', false if 'on'\n   */\n  isOff(): boolean {\n    return !this.isOn();\n  }\n\n  protected onClickEvent() {\n    super.onClickEvent();\n\n    // Fire the toggle event together with the click event\n    // (they are technically the same, only the semantics are different)\n    this.onToggleEvent();\n  }\n\n  protected onToggleEvent() {\n    this.toggleButtonEvents.onToggle.dispatch(this);\n  }\n\n  protected onToggleOnEvent() {\n    this.toggleButtonEvents.onToggleOn.dispatch(this);\n  }\n\n  protected onToggleOffEvent() {\n    this.toggleButtonEvents.onToggleOff.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggle(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggle.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled 'on'.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggleOn(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggleOn.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled 'off'.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggleOff(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggleOff.getEvent();\n  }\n}","import {Component, ComponentConfig} from './component';\nimport {DOM} from '../dom';\n\n/**\n * Animated analog TV static noise.\n */\nexport class TvNoiseCanvas extends Component<ComponentConfig> {\n\n  private canvas: DOM;\n\n  private canvasElement: HTMLCanvasElement;\n  private canvasContext: CanvasRenderingContext2D;\n  private canvasWidth = 160;\n  private canvasHeight = 90;\n  private interferenceHeight = 50;\n  private lastFrameUpdate: number = 0;\n  private frameInterval: number = 60;\n  private useAnimationFrame: boolean = !!window.requestAnimationFrame;\n  private noiseAnimationWindowPos: number;\n  private frameUpdateHandlerId: number;\n\n  constructor(config: ComponentConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-tvnoisecanvas',\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    return this.canvas = new DOM('canvas', { 'class': this.getCssClasses() });\n  }\n\n  start(): void {\n    this.canvasElement = <HTMLCanvasElement>this.canvas.get(0);\n    this.canvasContext = this.canvasElement.getContext('2d');\n    this.noiseAnimationWindowPos = -this.canvasHeight;\n    this.lastFrameUpdate = 0;\n\n    this.canvasElement.width = this.canvasWidth;\n    this.canvasElement.height = this.canvasHeight;\n\n    this.renderFrame();\n  }\n\n  stop(): void {\n    if (this.useAnimationFrame) {\n      cancelAnimationFrame(this.frameUpdateHandlerId);\n    } else {\n      clearTimeout(this.frameUpdateHandlerId);\n    }\n  }\n\n  private renderFrame(): void {\n    // This code has been copied from the player controls.js and simplified\n\n    if (this.lastFrameUpdate + this.frameInterval > new Date().getTime()) {\n      // It's too early to render the next frame\n      this.scheduleNextRender();\n      return;\n    }\n\n    let currentPixelOffset;\n    let canvasWidth = this.canvasWidth;\n    let canvasHeight = this.canvasHeight;\n\n    // Create texture\n    let noiseImage = this.canvasContext.createImageData(canvasWidth, canvasHeight);\n\n    // Fill texture with noise\n    for (let y = 0; y < canvasHeight; y++) {\n      for (let x = 0; x < canvasWidth; x++) {\n        currentPixelOffset = (canvasWidth * y * 4) + x * 4;\n        noiseImage.data[currentPixelOffset] = Math.random() * 255;\n        if (y < this.noiseAnimationWindowPos || y > this.noiseAnimationWindowPos + this.interferenceHeight) {\n          noiseImage.data[currentPixelOffset] *= 0.85;\n        }\n        noiseImage.data[currentPixelOffset + 1] = noiseImage.data[currentPixelOffset];\n        noiseImage.data[currentPixelOffset + 2] = noiseImage.data[currentPixelOffset];\n        noiseImage.data[currentPixelOffset + 3] = 50;\n      }\n    }\n\n    // Put texture onto canvas\n    this.canvasContext.putImageData(noiseImage, 0, 0);\n\n    this.lastFrameUpdate = new Date().getTime();\n    this.noiseAnimationWindowPos += 7;\n    if (this.noiseAnimationWindowPos > canvasHeight) {\n      this.noiseAnimationWindowPos = -canvasHeight;\n    }\n\n    this.scheduleNextRender();\n  }\n\n  private scheduleNextRender(): void {\n    if (this.useAnimationFrame) {\n      this.frameUpdateHandlerId = window.requestAnimationFrame(this.renderFrame.bind(this));\n    } else {\n      this.frameUpdateHandlerId = window.setTimeout(this.renderFrame.bind(this), this.frameInterval);\n    }\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {DOM} from '../dom';\nimport {Timeout} from '../timeout';\nimport {PlayerUtils} from '../playerutils';\nimport { CancelEventArgs, EventDispatcher } from '../eventdispatcher';\nimport { PlayerAPI, PlayerResizedEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link UIContainer}.\n */\nexport interface UIContainerConfig extends ContainerConfig {\n  /**\n   * The delay in milliseconds after which the control bar will be hidden when there is no user interaction.\n   * Set to -1 for the UI to be always shown.\n   * Default: 5 seconds (5000)\n   */\n  hideDelay?: number;\n  /**\n   * An array of player states in which the UI will not be hidden, no matter what the {@link hideDelay} is.\n   */\n  hidePlayerStateExceptions?: PlayerUtils.PlayerState[];\n  /**\n   * The HTML element on which user interaction events (e.g. mouse and touch events) will be tracked to detect\n   * interaction with the UI. These basically trigger showing and hiding of the UI.\n   * Default: the UI container itself\n   */\n  userInteractionEventSource?: HTMLElement;\n}\n\n/**\n * The base container that contains all of the UI. The UIContainer is passed to the {@link UIManager} to build and\n * setup the UI.\n */\nexport class UIContainer extends Container<UIContainerConfig> {\n\n  private static readonly STATE_PREFIX = 'player-state-';\n\n  private static readonly FULLSCREEN = 'fullscreen';\n  private static readonly BUFFERING = 'buffering';\n  private static readonly REMOTE_CONTROL = 'remote-control';\n  private static readonly CONTROLS_SHOWN = 'controls-shown';\n  private static readonly CONTROLS_HIDDEN = 'controls-hidden';\n\n  private uiHideTimeout: Timeout;\n  private playerStateChange: EventDispatcher<UIContainer, PlayerUtils.PlayerState>;\n\n  private userInteractionEventSource: DOM;\n  private userInteractionEvents: { name: string, handler: EventListenerOrEventListenerObject }[];\n\n  public hideUi: () => void = () => {};\n  public showUi: () => void = () => {};\n\n  constructor(config: UIContainerConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <UIContainerConfig>{\n      cssClass: 'ui-uicontainer',\n      role: 'region',\n      ariaLabel: i18n.getLocalizer('player'),\n      hideDelay: 5000,\n    }, this.config);\n\n    this.playerStateChange = new EventDispatcher<UIContainer, PlayerUtils.PlayerState>();\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    const config = this.getConfig();\n\n    if (config.userInteractionEventSource) {\n      this.userInteractionEventSource = new DOM(config.userInteractionEventSource);\n    } else {\n      this.userInteractionEventSource = this.getDomElement();\n    }\n\n    super.configure(player, uimanager);\n\n    this.configureUIShowHide(player, uimanager);\n    this.configurePlayerStates(player, uimanager);\n  }\n\n  private configureUIShowHide(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    let config = this.getConfig();\n\n    if (config.hideDelay === -1) {\n      uimanager.onConfigured.subscribe(() => uimanager.onControlsShow.dispatch(this));\n      return;\n    }\n\n    let isUiShown = false;\n    let isSeeking = false;\n    let isFirstTouch = true;\n    let playerState: PlayerUtils.PlayerState;\n\n    const hidingPrevented = (): boolean => {\n      return config.hidePlayerStateExceptions && config.hidePlayerStateExceptions.indexOf(playerState) > -1;\n    };\n\n    this.showUi = () => {\n      if (!isUiShown) {\n        // Let subscribers know that they should reveal themselves\n        uimanager.onControlsShow.dispatch(this);\n        isUiShown = true;\n      }\n      // Don't trigger timeout while seeking (it will be triggered once the seek is finished) or casting\n      if (!isSeeking && !player.isCasting() && !hidingPrevented()) {\n        this.uiHideTimeout.start();\n      }\n    };\n\n    this.hideUi = () => {\n      // Hide the UI only if it is shown, and if not casting\n      if (isUiShown && !player.isCasting()) {\n        // Issue a preview event to check if we are good to hide the controls\n        let previewHideEventArgs = <CancelEventArgs>{};\n        uimanager.onPreviewControlsHide.dispatch(this, previewHideEventArgs);\n\n        if (!previewHideEventArgs.cancel) {\n          // If the preview wasn't canceled, let subscribers know that they should now hide themselves\n          uimanager.onControlsHide.dispatch(this);\n          isUiShown = false;\n        } else {\n          // If the hide preview was canceled, continue to show UI\n          this.showUi();\n        }\n      }\n    };\n\n    // Timeout to defer UI hiding by the configured delay time\n    this.uiHideTimeout = new Timeout(config.hideDelay, this.hideUi);\n\n    this.userInteractionEvents = [{\n      // On touch displays, the first touch reveals the UI\n      name: 'touchend',\n      handler: (e) => {\n        if (!isUiShown) {\n          // Only if the UI is hidden, we prevent other actions (except for the first touch) and reveal the UI\n          // instead. The first touch is not prevented to let other listeners receive the event and trigger an\n          // initial action, e.g. the huge playback button can directly start playback instead of requiring a double\n          // tap which 1. reveals the UI and 2. starts playback.\n          if (isFirstTouch && !player.isPlaying()) {\n            isFirstTouch = false;\n          } else {\n            e.preventDefault();\n          }\n          this.showUi();\n        }\n      },\n    }, {\n      // When the mouse enters, we show the UI\n      name: 'mouseenter',\n      handler: () => {\n        this.showUi();\n      },\n    }, {\n      // When the mouse moves within, we show the UI\n      name: 'mousemove',\n      handler: () => {\n        this.showUi();\n      },\n    }, {\n      name: 'focusin',\n      handler: () => {\n        this.showUi();\n      },\n    }, {\n      name: 'keydown',\n      handler: () => {\n        this.showUi();\n      },\n    }, {\n      // When the mouse leaves, we can prepare to hide the UI, except a seek is going on\n      name: 'mouseleave',\n      handler: () => {\n        // When a seek is going on, the seek scrub pointer may exit the UI area while still seeking, and we do not\n        // hide the UI in such cases\n        if (!isSeeking && !hidingPrevented()) {\n          this.uiHideTimeout.start();\n        }\n      },\n    }];\n\n    this.userInteractionEvents.forEach((event) => this.userInteractionEventSource.on(event.name, event.handler));\n\n    uimanager.onSeek.subscribe(() => {\n      this.uiHideTimeout.clear(); // Don't hide UI while a seek is in progress\n      isSeeking = true;\n    });\n    uimanager.onSeeked.subscribe(() => {\n      isSeeking = false;\n      if (!hidingPrevented()) {\n        this.uiHideTimeout.start(); // Re-enable UI hide timeout after a seek\n      }\n    });\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      this.showUi(); // Show UI when a Cast session has started (UI will then stay permanently on during the session)\n    });\n    this.playerStateChange.subscribe((_, state) => {\n      playerState = state;\n      if (hidingPrevented()) {\n        // Entering a player state that prevents hiding and forces the controls to be shown\n        this.uiHideTimeout.clear();\n        this.showUi();\n      } else {\n        // Entering a player state that allows hiding\n        this.uiHideTimeout.start();\n      }\n    });\n  }\n\n  private configurePlayerStates(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    let container = this.getDomElement();\n\n    // Convert player states into CSS class names\n    let stateClassNames = <any>[];\n    for (let state in PlayerUtils.PlayerState) {\n      if (isNaN(Number(state))) {\n        let enumName = PlayerUtils.PlayerState[<any>PlayerUtils.PlayerState[state]];\n        stateClassNames[PlayerUtils.PlayerState[state]] =\n          this.prefixCss(UIContainer.STATE_PREFIX + enumName.toLowerCase());\n      }\n    }\n\n    let removeStates = () => {\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Idle]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Prepared]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Playing]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Paused]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Finished]);\n    };\n\n    const updateState = (state: PlayerUtils.PlayerState) => {\n      removeStates();\n      container.addClass(stateClassNames[state]);\n      this.playerStateChange.dispatch(this, state);\n    };\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, () => {\n      updateState(PlayerUtils.PlayerState.Prepared);\n    });\n    player.on(player.exports.PlayerEvent.Play, () => {\n      updateState(PlayerUtils.PlayerState.Playing);\n    });\n    player.on(player.exports.PlayerEvent.Playing, () => {\n      updateState(PlayerUtils.PlayerState.Playing);\n    });\n    player.on(player.exports.PlayerEvent.Paused, () => {\n      updateState(PlayerUtils.PlayerState.Paused);\n    });\n    player.on(player.exports.PlayerEvent.PlaybackFinished, () => {\n      updateState(PlayerUtils.PlayerState.Finished);\n    });\n    player.on(player.exports.PlayerEvent.SourceUnloaded, () => {\n      updateState(PlayerUtils.PlayerState.Idle);\n    });\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      updateState(PlayerUtils.getState(player));\n    });\n\n    // Fullscreen marker class\n    player.on(player.exports.PlayerEvent.ViewModeChanged, () => {\n      if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n        container.addClass(this.prefixCss(UIContainer.FULLSCREEN));\n      } else {\n        container.removeClass(this.prefixCss(UIContainer.FULLSCREEN));\n      }\n    });\n    // Init fullscreen state\n    if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n      container.addClass(this.prefixCss(UIContainer.FULLSCREEN));\n    }\n\n    // Buffering marker class\n    player.on(player.exports.PlayerEvent.StallStarted, () => {\n      container.addClass(this.prefixCss(UIContainer.BUFFERING));\n    });\n    player.on(player.exports.PlayerEvent.StallEnded, () => {\n      container.removeClass(this.prefixCss(UIContainer.BUFFERING));\n    });\n    // Init buffering state\n    if (player.isStalled()) {\n      container.addClass(this.prefixCss(UIContainer.BUFFERING));\n    }\n\n    // RemoteControl marker class\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      container.addClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, () => {\n      container.removeClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    });\n    // Init RemoteControl state\n    if (player.isCasting()) {\n      container.addClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    }\n\n    // Controls visibility marker class\n    uimanager.onControlsShow.subscribe(() => {\n      container.removeClass(this.prefixCss(UIContainer.CONTROLS_HIDDEN));\n      container.addClass(this.prefixCss(UIContainer.CONTROLS_SHOWN));\n    });\n    uimanager.onControlsHide.subscribe(() => {\n      container.removeClass(this.prefixCss(UIContainer.CONTROLS_SHOWN));\n      container.addClass(this.prefixCss(UIContainer.CONTROLS_HIDDEN));\n    });\n\n    // Layout size classes\n    let updateLayoutSizeClasses = (width: number, height: number) => {\n      container.removeClass(this.prefixCss('layout-max-width-400'));\n      container.removeClass(this.prefixCss('layout-max-width-600'));\n      container.removeClass(this.prefixCss('layout-max-width-800'));\n      container.removeClass(this.prefixCss('layout-max-width-1200'));\n\n      if (width <= 400) {\n        container.addClass(this.prefixCss('layout-max-width-400'));\n      } else if (width <= 600) {\n        container.addClass(this.prefixCss('layout-max-width-600'));\n      } else if (width <= 800) {\n        container.addClass(this.prefixCss('layout-max-width-800'));\n      } else if (width <= 1200) {\n        container.addClass(this.prefixCss('layout-max-width-1200'));\n      }\n    };\n    player.on(player.exports.PlayerEvent.PlayerResized, (e: PlayerResizedEvent) => {\n      // Convert strings (with \"px\" suffix) to ints\n      let width = Math.round(Number(e.width.substring(0, e.width.length - 2)));\n      let height = Math.round(Number(e.height.substring(0, e.height.length - 2)));\n\n      updateLayoutSizeClasses(width, height);\n    });\n    // Init layout state\n    updateLayoutSizeClasses(new DOM(player.getContainer()).width(), new DOM(player.getContainer()).height());\n  }\n\n  release(): void {\n    // Explicitly unsubscribe user interaction event handlers because they could be attached to an external element\n    // that isn't owned by the UI and therefore not removed on release.\n    if (this.userInteractionEvents) {\n      this.userInteractionEvents.forEach((event) => this.userInteractionEventSource.off(event.name, event.handler));\n    }\n\n    super.release();\n\n    if (this.uiHideTimeout) {\n      this.uiHideTimeout.clear();\n    }\n  }\n\n  protected toDomElement(): DOM {\n    let container = super.toDomElement();\n\n    // Detect flexbox support (not supported in IE9)\n    if (document && typeof document.createElement('p').style.flex !== 'undefined') {\n      container.addClass(this.prefixCss('flexbox'));\n    } else {\n      container.addClass(this.prefixCss('no-flexbox'));\n    }\n\n    return container;\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between 'auto' and the available video qualities.\n */\nexport class VideoQualitySelectBox extends SelectBox {\n\n  private hasAuto: boolean;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-videoqualityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let selectCurrentVideoQuality = () => {\n      this.selectItem(player.getVideoQuality().id);\n    };\n\n    let updateVideoQualities = () => {\n      let videoQualities = player.getAvailableVideoQualities();\n\n      this.clearItems();\n\n      // Progressive streams do not support automatic quality selection\n      this.hasAuto = player.getStreamType() !== 'progressive';\n\n      if (this.hasAuto) {\n        // Add entry for automatic quality switching (default setting)\n        this.addItem('auto', i18n.getLocalizer('auto'));\n      }\n\n      // Add video qualities\n      for (let videoQuality of videoQualities) {\n        this.addItem(videoQuality.id, videoQuality.label);\n      }\n\n      // Select initial quality\n      selectCurrentVideoQuality();\n    };\n\n    this.onItemSelected.subscribe((sender: VideoQualitySelectBox, value: string) => {\n      player.setVideoQuality(value);\n    });\n\n    // Update qualities when source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, updateVideoQualities);\n    // Update qualities when the period within a source changes\n    player.on(player.exports.PlayerEvent.PeriodSwitched, updateVideoQualities);\n    // Update quality selection when quality is changed (from outside)\n    player.on(player.exports.PlayerEvent.VideoQualityChanged, selectCurrentVideoQuality);\n\n    if ((player.exports.PlayerEvent as any).VideoQualityAdded) {\n      // Update qualities when their availability changed\n      // TODO: remove any cast after next player release\n      player.on((player.exports.PlayerEvent as any).VideoQualityAdded, updateVideoQualities);\n      player.on((player.exports.PlayerEvent as any).VideoQualityRemoved, updateVideoQualities);\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(updateVideoQualities);\n  }\n\n  /**\n   * Returns true if the select box contains an 'auto' item for automatic quality selection mode.\n   * @return {boolean}\n   */\n  hasAutoItem(): boolean {\n    return this.hasAuto;\n  }\n}","import {Container, ContainerConfig} from './container';\nimport {VolumeSlider} from './volumeslider';\nimport {VolumeToggleButton} from './volumetogglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for a {@link VolumeControlButton}.\n */\nexport interface VolumeControlButtonConfig extends ContainerConfig {\n  /**\n   * The delay after which the volume slider will be hidden when there is no user interaction.\n   * Care must be taken that the delay is long enough so users can reach the slider from the toggle button, e.g. by\n   * mouse movement. If the delay is too short, the sliders disappears before the mouse pointer has reached it and\n   * the user is not able to use it.\n   * Default: 500ms\n   */\n  hideDelay?: number;\n  /**\n   * Specifies if the volume slider should be vertically or horizontally aligned.\n   * Default: true\n   */\n  vertical?: boolean;\n}\n\n/**\n * A composite volume control that consists of and internally manages a volume control button that can be used\n * for muting, and a (depending on the CSS style, e.g. slide-out) volume control bar.\n */\nexport class VolumeControlButton extends Container<VolumeControlButtonConfig> {\n\n  private volumeToggleButton: VolumeToggleButton;\n  private volumeSlider: VolumeSlider;\n\n  private volumeSliderHideTimeout: Timeout;\n\n  constructor(config: VolumeControlButtonConfig = {}) {\n    super(config);\n\n    this.volumeToggleButton = new VolumeToggleButton();\n    this.volumeSlider = new VolumeSlider({\n      vertical: config.vertical != null ? config.vertical : true,\n      hidden: true,\n    });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-volumecontrolbutton',\n      components: [this.volumeToggleButton, this.volumeSlider],\n      hideDelay: 500,\n    }, <VolumeControlButtonConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let volumeToggleButton = this.getVolumeToggleButton();\n    let volumeSlider = this.getVolumeSlider();\n\n    this.volumeSliderHideTimeout = new Timeout(this.getConfig().hideDelay, () => {\n      volumeSlider.hide();\n    });\n\n    /*\n     * Volume Slider visibility handling\n     *\n     * The volume slider shall be visible while the user hovers the mute toggle button, while the user hovers the\n     * volume slider, and while the user slides the volume slider. If none of these situations are true, the slider\n     * shall disappear.\n     */\n    let volumeSliderHovered = false;\n    volumeToggleButton.getDomElement().on('mouseenter', () => {\n      // Show volume slider when mouse enters the button area\n      if (volumeSlider.isHidden()) {\n        volumeSlider.show();\n      }\n      // Avoid hiding of the slider when button is hovered\n      this.volumeSliderHideTimeout.clear();\n    });\n    volumeToggleButton.getDomElement().on('mouseleave', () => {\n      // Hide slider delayed when button is left\n      this.volumeSliderHideTimeout.reset();\n    });\n    volumeSlider.getDomElement().on('mouseenter', () => {\n      // When the slider is entered, cancel the hide timeout activated by leaving the button\n      this.volumeSliderHideTimeout.clear();\n      volumeSliderHovered = true;\n    });\n    volumeSlider.getDomElement().on('mouseleave', () => {\n      // When mouse leaves the slider, only hide it if there is no slide operation in progress\n      if (volumeSlider.isSeeking()) {\n        this.volumeSliderHideTimeout.clear();\n      } else {\n        this.volumeSliderHideTimeout.reset();\n      }\n      volumeSliderHovered = false;\n    });\n    volumeSlider.onSeeked.subscribe(() => {\n      // When a slide operation is done and the slider not hovered (mouse outside slider), hide slider delayed\n      if (!volumeSliderHovered) {\n        this.volumeSliderHideTimeout.reset();\n      }\n    });\n  }\n\n  release(): void {\n    super.release();\n    this.volumeSliderHideTimeout.clear();\n  }\n\n  /**\n   * Provides access to the internally managed volume toggle button.\n   * @returns {VolumeToggleButton}\n   */\n  getVolumeToggleButton(): VolumeToggleButton {\n    return this.volumeToggleButton;\n  }\n\n  /**\n   * Provides access to the internally managed volume silder.\n   * @returns {VolumeSlider}\n   */\n  getVolumeSlider(): VolumeSlider {\n    return this.volumeSlider;\n  }\n}","import { SeekBar, SeekBarConfig, SeekPreviewEventArgs } from './seekbar';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { VolumeTransition } from '../volumecontroller';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link VolumeSlider} component.\n */\nexport interface VolumeSliderConfig extends SeekBarConfig {\n  /**\n   * Specifies if the volume slider should be automatically hidden when volume control is prohibited by the\n   * browser or platform. This currently only applies to iOS.\n   * Default: true\n   */\n  hideIfVolumeControlProhibited?: boolean;\n}\n\n/**\n * A simple volume slider component to adjust the player's volume setting.\n */\nexport class VolumeSlider extends SeekBar {\n  private volumeTransition: VolumeTransition;\n\n  constructor(config: VolumeSliderConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <VolumeSliderConfig>{\n      cssClass: 'ui-volumeslider',\n      hideIfVolumeControlProhibited: true,\n      ariaLabel: i18n.getLocalizer('settings.audio.volume'),\n      tabIndex: 0,\n    }, this.config);\n  }\n\n  private setVolumeAriaSliderValues(value: number) {\n    this.getDomElement().attr('aria-valuenow', Math.ceil(value).toString());\n    this.getDomElement().attr('aria-valuetext', `${i18n.performLocalization(i18n.getLocalizer('seekBar.value'))}: ${Math.ceil(value)}`);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager, false);\n\n    this.setAriaSliderMinMax('0', '100');\n\n    let config = <VolumeSliderConfig>this.getConfig();\n\n    const volumeController = uimanager.getConfig().volumeController;\n\n    if (config.hideIfVolumeControlProhibited && !this.detectVolumeControlAvailability()) {\n      this.hide();\n\n      // We can just return from here, because the user will never interact with the control and any configured\n      // functionality would only eat resources for no reason.\n      return;\n    }\n\n    volumeController.onChanged.subscribe((_, args) => {\n      if (args.muted) {\n        this.setVolumeAriaSliderValues(0);\n        this.setPlaybackPosition(0);\n      } else {\n        this.setPlaybackPosition(args.volume);\n        this.setVolumeAriaSliderValues(args.volume);\n      }\n    });\n\n    this.onSeek.subscribe(() => {\n      this.volumeTransition = volumeController.startTransition();\n    });\n\n    this.onSeekPreview.subscribeRateLimited(this.updateVolumeWhileScrubbing, 50);\n    this.onSeeked.subscribe((sender, percentage) => {\n      if (this.volumeTransition) {\n        this.volumeTransition.finish(percentage);\n      }\n    });\n\n    // Update the volume slider marker when the player resized, a source is loaded,\n    // or the UI is configured. Check the seekbar for a detailed description.\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      this.refreshPlaybackPosition();\n    });\n    uimanager.onConfigured.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    uimanager.onComponentShow.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n    uimanager.onComponentHide.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    // Init volume bar\n    volumeController.onChangedEvent();\n  }\n\n  private updateVolumeWhileScrubbing = (sender: VolumeSlider, args: SeekPreviewEventArgs) => {\n    if (args.scrubbing && this.volumeTransition) {\n      this.volumeTransition.update(args.position);\n    }\n  };\n\n  private detectVolumeControlAvailability(): boolean {\n    /*\n     * \"On iOS devices, the audio level is always under the user’s physical control. The volume property is not\n     * settable in JavaScript. Reading the volume property always returns 1.\"\n     * https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html\n     */\n    // as muted autoplay gets paused as soon as we unmute it, we may not touch the volume of the actual player so we\n    // probe a dummy audio element\n    const dummyVideoElement = document.createElement('video');\n    // try setting the volume to 0.7 and if it's still 1 we are on a volume control restricted device\n    dummyVideoElement.volume = 0.7;\n    return dummyVideoElement.volume !== 1;\n  }\n\n  release(): void {\n    super.release();\n\n    this.onSeekPreview.unsubscribe(this.updateVolumeWhileScrubbing);\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles audio muting.\n */\nexport class VolumeToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    const defaultConfig: ToggleButtonConfig = {\n      cssClass: 'ui-volumetogglebutton',\n      text: i18n.getLocalizer('settings.audio.mute'),\n      onClass: 'muted',\n      offClass: 'unmuted',\n      ariaLabel: i18n.getLocalizer('settings.audio.mute'),\n    };\n\n    this.config = this.mergeConfig(config, defaultConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const volumeController = uimanager.getConfig().volumeController;\n\n    volumeController.onChanged.subscribe((_, args) => {\n      if (args.muted) {\n        this.on();\n      } else {\n        this.off();\n      }\n\n      const volumeLevelTens = Math.ceil(args.volume / 10);\n      this.getDomElement().data(this.prefixCss('volume-level-tens'), String(volumeLevelTens));\n    });\n\n    this.onClick.subscribe(() => {\n      volumeController.toggleMuted();\n    });\n\n    // Startup init\n    volumeController.onChangedEvent();\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI, PlayerEventBase, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles the video view between normal/mono and VR/stereo.\n */\nexport class VRToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-vrtogglebutton',\n      text: i18n.getLocalizer('vr'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let isVRConfigured = () => {\n      // VR availability cannot be checked through getVRStatus() because it is asynchronously populated and not\n      // available at UI initialization. As an alternative, we check the VR settings in the config.\n      // TODO use getVRStatus() through isVRStereoAvailable() once the player has been rewritten and the status is\n      // available in Ready\n      const source = player.getSource();\n      return source && Boolean(source.vr);\n    };\n\n    let isVRStereoAvailable = () => {\n      const source = player.getSource();\n      return player.vr && Boolean(source.vr);\n    };\n\n    let vrStateHandler = (ev: PlayerEventBase) => {\n      if (ev.type === player.exports.PlayerEvent.Warning\n        && (ev as WarningEvent).code !== player.exports.WarningCode.VR_RENDERING_ERROR) {\n        return;\n      }\n\n      if (isVRConfigured() && isVRStereoAvailable()) {\n        this.show(); // show button in case it is hidden\n\n        if (player.vr && player.vr.getStereo()) {\n          this.on();\n        } else {\n          this.off();\n        }\n      } else {\n        this.hide(); // hide button if no stereo mode available\n      }\n    };\n\n    let vrButtonVisibilityHandler = () => {\n      if (isVRConfigured()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.VRStereoChanged, vrStateHandler);\n    player.on(player.exports.PlayerEvent.Warning, vrStateHandler);\n    // Hide button when VR source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, vrButtonVisibilityHandler);\n    uimanager.getConfig().events.onUpdated.subscribe(vrButtonVisibilityHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isVRStereoAvailable()) {\n        if (console) {\n          console.log('No VR content');\n        }\n      } else {\n        if (player.vr && player.vr.getStereo()) {\n          player.vr.setStereo(false);\n        } else {\n          player.vr.setStereo(true);\n        }\n      }\n    });\n\n    // Set startup visibility\n    vrButtonVisibilityHandler();\n  }\n}","import {ClickOverlay, ClickOverlayConfig} from './clickoverlay';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link ClickOverlay}.\n */\nexport interface WatermarkConfig extends ClickOverlayConfig {\n  // nothing yet\n}\n\n/**\n * A watermark overlay with a clickable logo.\n */\nexport class Watermark extends ClickOverlay {\n\n  constructor(config: WatermarkConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-watermark',\n      url: 'http://bitmovin.com',\n      role: 'link',\n      text: 'logo',\n      ariaLabel: i18n.getLocalizer('watermarkLink'),\n    }, <WatermarkConfig>this.config);\n  }\n}","import {VRToggleButton} from './components/vrtogglebutton';\nimport {SettingsToggleButton} from './components/settingstogglebutton';\nimport {VolumeSlider} from './components/volumeslider';\nimport {PlaybackTimeLabel, PlaybackTimeLabelMode} from './components/playbacktimelabel';\nimport {AirPlayToggleButton} from './components/airplaytogglebutton';\nimport {ErrorMessageOverlay} from './components/errormessageoverlay';\nimport {ControlBar} from './components/controlbar';\nimport {CastToggleButton} from './components/casttogglebutton';\nimport {FullscreenToggleButton} from './components/fullscreentogglebutton';\nimport {RecommendationOverlay} from './components/recommendationoverlay';\nimport {PlaybackSpeedSelectBox} from './components/playbackspeedselectbox';\nimport {AudioQualitySelectBox} from './components/audioqualityselectbox';\nimport {CastStatusOverlay} from './components/caststatusoverlay';\nimport {UIContainer} from './components/uicontainer';\nimport {Watermark} from './components/watermark';\nimport {SubtitleOverlay} from './components/subtitleoverlay';\nimport {SettingsPanel} from './components/settingspanel';\nimport {SeekBarLabel} from './components/seekbarlabel';\nimport {PlaybackToggleOverlay} from './components/playbacktoggleoverlay';\nimport {PictureInPictureToggleButton} from './components/pictureinpicturetogglebutton';\nimport {Spacer} from './components/spacer';\nimport {Container} from './components/container';\nimport {VolumeToggleButton} from './components/volumetogglebutton';\nimport {PlaybackToggleButton} from './components/playbacktogglebutton';\nimport {SeekBar} from './components/seekbar';\nimport {VideoQualitySelectBox} from './components/videoqualityselectbox';\nimport {UIConditionContext, UIManager} from './uimanager';\nimport {TitleBar} from './components/titlebar';\nimport {BufferingOverlay} from './components/bufferingoverlay';\nimport {SubtitleListBox} from './components/subtitlelistbox';\nimport {AudioTrackListBox} from './components/audiotracklistbox';\nimport {SettingsPanelItem} from './components/settingspanelitem';\nimport {SettingsPanelPage} from './components/settingspanelpage';\nimport { UIFactory } from './uifactory';\nimport { UIConfig } from './uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport namespace DemoFactory {\n\n  export function buildDemoWithSeparateAudioSubtitlesButtons(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    // show smallScreen UI only on mobile/handheld devices\n    let smallScreenSwitchWidth = 600;\n\n    return new UIManager(player, [{\n      ui: UIFactory.modernSmallScreenAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth\n          && context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: UIFactory.modernAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: UIFactory.modernSmallScreenUI({ radioModeAvailable: false }),\n      condition: (context: UIConditionContext) => {\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth;\n      },\n    }, {\n      ui: modernUIWithSeparateAudioSubtitlesButtons(),\n    }], config);\n  }\n\n  function modernUIWithSeparateAudioSubtitlesButtons() {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let settingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem('Video Quality', new VideoQualitySelectBox()),\n            new SettingsPanelItem('Speed', new PlaybackSpeedSelectBox()),\n            new SettingsPanelItem('Audio Quality', new AudioQualitySelectBox()),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let subtitleListBox = new SubtitleListBox();\n    let subtitleSettingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem(null, subtitleListBox),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let audioTrackListBox = new AudioTrackListBox();\n    let audioTrackSettingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem(null, audioTrackListBox),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let controlBar = new ControlBar({\n      components: [\n        audioTrackSettingsPanel,\n        subtitleSettingsPanel,\n        settingsPanel,\n        new Container({\n          components: [\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n        new Container({\n          components: [\n            new PlaybackToggleButton(),\n            new VolumeToggleButton(),\n            new VolumeSlider(),\n            new Spacer(),\n            new PictureInPictureToggleButton(),\n            new AirPlayToggleButton(),\n            new CastToggleButton(),\n            new VRToggleButton(),\n            new SettingsToggleButton({\n              settingsPanel: audioTrackSettingsPanel,\n              cssClass: 'ui-audiotracksettingstogglebutton',\n            }),\n            new SettingsToggleButton({\n              settingsPanel: subtitleSettingsPanel,\n              cssClass: 'ui-subtitlesettingstogglebutton',\n            }),\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\n            new FullscreenToggleButton(),\n          ],\n          cssClasses: ['controlbar-bottom'],\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new CastStatusOverlay(),\n        controlBar,\n        new TitleBar(),\n        new RecommendationOverlay(),\n        new Watermark(),\n        new ErrorMessageOverlay(),\n      ],\n    });\n  }\n}","export interface Offset {\n  left: number;\n  top: number;\n}\n\nexport interface Size {\n  width: number;\n  height: number;\n}\n\nexport interface CssProperties {\n  [propertyName: string]: string;\n}\n\n/**\n * Simple DOM manipulation and DOM element event handling modeled after jQuery (as replacement for jQuery).\n *\n * Like jQuery, DOM operates on single elements and lists of elements. For example: creating an element returns a DOM\n * instance with a single element, selecting elements returns a DOM instance with zero, one, or many elements. Similar\n * to jQuery, setters usually affect all elements, while getters operate on only the first element.\n * Also similar to jQuery, most methods (except getters) return the DOM instance facilitating easy chaining of method\n * calls.\n *\n * Built with the help of: http://youmightnotneedjquery.com/\n */\nexport class DOM {\n\n  private document: Document;\n\n  /**\n   * The list of elements that the instance wraps. Take care that not all methods can operate on the whole list,\n   * getters usually just work on the first element.\n   */\n  private elements: HTMLElement[];\n\n  /**\n   * Creates a DOM element.\n   * @param tagName the tag name of the DOM element\n   * @param attributes a list of attributes of the element\n   */\n  constructor(tagName: string, attributes: {[name: string]: string});\n  /**\n   * Selects all elements from the DOM that match the specified selector.\n   * @param selector the selector to match DOM elements with\n   */\n  constructor(selector: string);\n  /**\n   * Wraps a plain HTMLElement with a DOM instance.\n   * @param element the HTMLElement to wrap with DOM\n   */\n  constructor(element: HTMLElement);\n  /**\n   * Wraps a list of plain HTMLElements with a DOM instance.\n   * @param elements the HTMLElements to wrap with DOM\n   */\n  constructor(elements: HTMLElement[]);\n  /**\n   * Wraps the document with a DOM instance. Useful to attach event listeners to the document.\n   * @param document the document to wrap\n   */\n  constructor(document: Document);\n  constructor(something: string | HTMLElement | HTMLElement[] | Document, attributes?: {[name: string]: string}) {\n    this.document = document; // Set the global document to the local document field\n\n    if (something instanceof Array) {\n      if (something.length > 0 && something[0] instanceof HTMLElement) {\n        let elements = something;\n        this.elements = elements;\n      }\n    }\n    else if (something instanceof HTMLElement) {\n      let element = something;\n      this.elements = [element];\n    }\n    else if (something instanceof Document) {\n      // When a document is passed in, we do not do anything with it, but by setting this.elements to null\n      // we give the event handling method a means to detect if the events should be registered on the document\n      // instead of elements.\n      this.elements = null;\n    }\n    else if (attributes) {\n      let tagName = something;\n      let element = document.createElement(tagName);\n\n      for (let attributeName in attributes) {\n        let attributeValue = attributes[attributeName];\n        if (attributeValue != null) {\n          element.setAttribute(attributeName, attributeValue);\n        }\n      }\n\n      this.elements = [element];\n    }\n    else {\n      let selector = something;\n      this.elements = this.findChildElements(selector);\n    }\n  }\n\n  /**\n   * Gets the number of elements that this DOM instance currently holds.\n   * @returns {number} the number of elements\n   */\n  get length(): number {\n    return this.elements ? this.elements.length : 0;\n  }\n\n  /**\n   * Gets the HTML elements that this DOM instance currently holds.\n   * @returns {HTMLElement[]} the raw HTML elements\n   */\n  get(): HTMLElement[];\n  /**\n   * Gets an HTML element from the list elements that this DOM instance currently holds.\n   * @param index The zero-based index into the element list. Can be negative to return an element from the end,\n   *    e.g. -1 returns the last element.\n   */\n  get(index: number): HTMLElement;\n  get(index?: number): HTMLElement | HTMLElement[] {\n    if (index === undefined) {\n      return this.elements;\n    } else if (!this.elements || index >= this.elements.length || index < -this.elements.length) {\n      return undefined;\n    } else if (index < 0) {\n      return this.elements[this.elements.length - index];\n    } else {\n      return this.elements[index];\n    }\n  }\n\n  /**\n   * A shortcut method for iterating all elements. Shorts this.elements.forEach(...) to this.forEach(...).\n   * @param handler the handler to execute an operation on an element\n   */\n  private forEach(handler: (element: HTMLElement) => void): void {\n    if (!this.elements) {\n      return;\n    }\n    this.elements.forEach((element) => {\n      handler(element);\n    });\n  }\n\n  private findChildElementsOfElement(element: HTMLElement | Document, selector: string): HTMLElement[] {\n    let childElements = element.querySelectorAll(selector);\n\n    // Convert NodeList to Array\n    // https://toddmotto.com/a-comprehensive-dive-into-nodelists-arrays-converting-nodelists-and-understanding-the-dom/\n    return [].slice.call(childElements);\n  }\n\n  private findChildElements(selector: string): HTMLElement[] {\n    let allChildElements = <HTMLElement[]>[];\n\n    if (this.elements) {\n      this.forEach((element) => {\n        allChildElements = allChildElements.concat(this.findChildElementsOfElement(element, selector));\n      });\n    }\n    else {\n      return this.findChildElementsOfElement(document, selector);\n    }\n\n    return allChildElements;\n  }\n\n  /**\n   * Finds all child elements of all elements matching the supplied selector.\n   * @param selector the selector to match with child elements\n   * @returns {DOM} a new DOM instance representing all matched children\n   */\n  find(selector: string): DOM {\n    let allChildElements = this.findChildElements(selector);\n    return new DOM(allChildElements);\n  }\n\n  /**\n   * Focuses to the first input element\n   */\n  focusToFirstInput() {\n    const inputElements = this.findChildElements('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n\n    if (inputElements.length > 0) {\n      inputElements[0].focus();\n    }\n  }\n\n  /**\n   * Focuses to the first input element\n   */\n  scrollTo(x: number, y: number) {\n    this.elements[0].scrollTo(x, y);\n  }\n\n  /**\n   * Returns a string of the inner HTML content of the first element.\n   */\n  html(): string;\n  /**\n   * Sets the inner HTML content of all elements.\n   * @param content a string of plain text or HTML markup\n   */\n  html(content: string): DOM;\n  html(content?: string): string | DOM {\n    if (arguments.length > 0) {\n      return this.setHtml(content);\n    }\n    else {\n      return this.getHtml();\n    }\n  }\n\n  private getHtml(): string | null {\n    return this.elements[0].innerHTML;\n  }\n\n  private setHtml(content: string): DOM {\n    if (content === undefined || content == null) {\n      // Set to empty string to avoid innerHTML getting set to 'undefined' (all browsers) or 'null' (IE9)\n      content = '';\n    }\n\n    this.forEach((element) => {\n      element.innerHTML = content;\n    });\n\n    return this;\n  }\n\n  /**\n   * Clears the inner HTML of all elements (deletes all children).\n   * @returns {DOM}\n   */\n  empty(): DOM {\n    this.forEach((element) => {\n      element.innerHTML = '';\n    });\n    return this;\n  }\n\n  /**\n   * Returns the current value of the first form element, e.g. the selected value of a select box or the text if an\n   * input field.\n   * @returns {string} the value of a form element\n   */\n  val(): string {\n    let element = this.elements[0];\n\n    if (element instanceof HTMLSelectElement || element instanceof HTMLInputElement) {\n      return element.value;\n    }\n    else {\n      // TODO add support for missing form elements\n      throw new Error(`val() not supported for ${typeof element}`);\n    }\n  }\n\n  /**\n   * Returns the value of an attribute on the first element.\n   * @param attribute\n   */\n  attr(attribute: string): string | null;\n  /**\n   * Sets an attribute on all elements.\n   * @param attribute the name of the attribute\n   * @param value the value of the attribute\n   */\n  attr(attribute: string, value: string): DOM;\n  attr(attribute: string, value?: string): string | null | DOM {\n    if (arguments.length > 1) {\n      return this.setAttr(attribute, value);\n    }\n    else {\n      return this.getAttr(attribute);\n    }\n  }\n\n  /**\n   * Removes the attribute of the element.\n   * @param attribute\n   */\n  removeAttr(attribute: string) {\n    this.forEach((element) => {\n      element.removeAttribute(attribute);\n    });\n  }\n\n  private getAttr(attribute: string): string | null {\n    return this.elements[0].getAttribute(attribute);\n  }\n\n  private setAttr(attribute: string, value: string): DOM {\n    this.forEach((element) => {\n      element.setAttribute(attribute, value);\n    });\n    return this;\n  }\n\n  /**\n   * Returns the value of a data element on the first element.\n   * @param dataAttribute the name of the data attribute without the 'data-' prefix\n   */\n  data(dataAttribute: string): string | null;\n  /**\n   * Sets a data attribute on all elements.\n   * @param dataAttribute the name of the data attribute without the 'data-' prefix\n   * @param value the value of the data attribute\n   */\n  data(dataAttribute: string, value: string): DOM;\n  data(dataAttribute: string, value?: string): string | null | DOM {\n    if (arguments.length > 1) {\n      return this.setData(dataAttribute, value);\n    }\n    else {\n      return this.getData(dataAttribute);\n    }\n  }\n\n  private getData(dataAttribute: string): string | null {\n    return this.elements[0].getAttribute('data-' + dataAttribute);\n  }\n\n  private setData(dataAttribute: string, value: string): DOM {\n    this.forEach((element) => {\n      element.setAttribute('data-' + dataAttribute, value);\n    });\n    return this;\n  }\n\n  /**\n   * Appends one or more DOM elements as children to all elements.\n   * @param childElements the chrild elements to append\n   * @returns {DOM}\n   */\n  append(...childElements: DOM[]): DOM {\n    this.forEach((element) => {\n      childElements.forEach((childElement) => {\n        childElement.elements.forEach((_, index) => {\n          element.appendChild(childElement.elements[index]);\n        });\n      });\n    });\n    return this;\n  }\n\n  /**\n   * Removes all elements from the DOM.\n   */\n  remove(): void {\n    this.forEach((element) => {\n      let parent = element.parentNode;\n      if (parent) {\n        parent.removeChild(element);\n      }\n    });\n  }\n\n  /**\n   * Returns the offset of the first element from the document's top left corner.\n   * @returns {Offset}\n   */\n  offset(): Offset {\n    let element = this.elements[0];\n    let elementRect = element.getBoundingClientRect();\n    let htmlRect = document.body.parentElement.getBoundingClientRect();\n\n    // Virtual viewport scroll handling (e.g. pinch zoomed viewports in mobile browsers or desktop Chrome/Edge)\n    // 'normal' zooms and virtual viewport zooms (aka layout viewport) result in different\n    // element.getBoundingClientRect() results:\n    //  - with normal scrolls, the clientRect decreases with an increase in scroll(Top|Left)/page(X|Y)Offset\n    //  - with pinch zoom scrolls, the clientRect stays the same while scroll/pageOffset changes\n    // This means, that the combination of clientRect + scroll/pageOffset does not work to calculate the offset\n    // from the document's upper left origin when pinch zoom is used.\n    // To work around this issue, we do not use scroll/pageOffset but get the clientRect of the html element and\n    // subtract it from the element's rect, which always results in the offset from the document origin.\n    // NOTE: the current way of offset calculation was implemented specifically to track event positions on the\n    // seek bar, and it might break compatibility with jQuery's offset() method. If this ever turns out to be a\n    // problem, this method should be reverted to the old version and the offset calculation moved to the seek bar.\n\n    return {\n      top: elementRect.top - htmlRect.top,\n      left: elementRect.left - htmlRect.left,\n    };\n  }\n\n  /**\n   * Returns the width of the first element.\n   * @returns {number} the width of the first element\n   */\n  width(): number {\n    // TODO check if this is the same as jQuery's width() (probably not)\n    return this.elements[0].offsetWidth;\n  }\n\n  /**\n   * Returns the height of the first element.\n   * @returns {number} the height of the first element\n   */\n  height(): number {\n    // TODO check if this is the same as jQuery's height() (probably not)\n    return this.elements[0].offsetHeight;\n  }\n\n  /**\n   * Returns the size of the first element.\n   * @return {Size} the size of the first element\n   */\n  size(): Size {\n    return { width: this.width(), height: this.height() };\n  }\n\n  /**\n   * Attaches an event handler to one or more events on all elements.\n   * @param eventName the event name (or multiple names separated by space) to listen to\n   * @param eventHandler the event handler to call when the event fires\n   * @returns {DOM}\n   */\n  on(eventName: string, eventHandler: EventListenerOrEventListenerObject): DOM {\n    let events = eventName.split(' ');\n\n    events.forEach((event) => {\n      if (this.elements == null) {\n        this.document.addEventListener(event, eventHandler);\n      }\n      else {\n        this.forEach((element) => {\n          element.addEventListener(event, eventHandler);\n        });\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Removes an event handler from one or more events on all elements.\n   * @param eventName the event name (or multiple names separated by space) to remove the handler from\n   * @param eventHandler the event handler to remove\n   * @returns {DOM}\n   */\n  off(eventName: string, eventHandler: EventListenerOrEventListenerObject): DOM {\n    let events = eventName.split(' ');\n\n    events.forEach((event) => {\n      if (this.elements == null) {\n        this.document.removeEventListener(event, eventHandler);\n      }\n      else {\n        this.forEach((element) => {\n          element.removeEventListener(event, eventHandler);\n        });\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Adds the specified class(es) to all elements.\n   * @param className the class(es) to add, multiple classes separated by space\n   * @returns {DOM}\n   */\n  addClass(className: string): DOM {\n    this.forEach((element) => {\n      if (element.classList) {\n        const classNames = className.split(' ')\n          .filter(className => className.length > 0);\n\n        if (classNames.length > 0) {\n          element.classList.add(...classNames);\n        }\n      }\n      else {\n        element.className += ' ' + className;\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Removed the specified class(es) from all elements.\n   * @param className the class(es) to remove, multiple classes separated by space\n   * @returns {DOM}\n   */\n  removeClass(className: string): DOM {\n    this.forEach((element) => {\n      if (element.classList) {\n        const classNames = className.split(' ')\n          .filter(className => className.length > 0);\n\n        if (classNames.length > 0) {\n          element.classList.remove(...classNames);\n        }\n      }\n      else {\n        element.className = element.className.replace(\n          new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Checks if any of the elements has the specified class.\n   * @param className the class name to check\n   * @returns {boolean} true if one of the elements has the class attached, else if no element has it attached\n   */\n  hasClass(className: string): boolean {\n    let hasClass = false;\n\n    this.forEach((element) => {\n      if (element.classList) {\n        if (element.classList.contains(className)) {\n          // Since we are inside a handler, we can't just 'return true'. Instead, we save it to a variable\n          // and return it at the end of the function body.\n          hasClass = true;\n        }\n      }\n      else {\n        if (new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className)) {\n          // See comment above\n          hasClass = true;\n        }\n      }\n    });\n\n    return hasClass;\n  }\n\n  /**\n   * Returns the value of a CSS property of the first element.\n   * @param propertyName the name of the CSS property to retrieve the value of\n   */\n  css(propertyName: string): string | null;\n  /**\n   * Sets the value of a CSS property on all elements.\n   * @param propertyName the name of the CSS property to set the value for\n   * @param value the value to set for the given CSS property\n   */\n  css(propertyName: string, value: string): DOM;\n  /**\n   * Sets a collection of CSS properties and their values on all elements.\n   * @param propertyValueCollection an object containing pairs of property names and their values\n   */\n  css(propertyValueCollection: CssProperties): DOM;\n  css(propertyNameOrCollection: string | CssProperties, value?: string): string | null | DOM {\n    if (typeof propertyNameOrCollection === 'string') {\n      let propertyName = propertyNameOrCollection;\n\n      if (arguments.length === 2) {\n        return this.setCss(propertyName, value);\n      }\n      else {\n        return this.getCss(propertyName);\n      }\n    }\n    else {\n      let propertyValueCollection = propertyNameOrCollection;\n      return this.setCssCollection(propertyValueCollection);\n    }\n  }\n\n  /**\n   * Removes an inline CSS property if it exists\n   * @param propertyName name of the property to remove\n   * @param elementIndex index of the element whose CSS property should get removed\n   */\n  removeCss(propertyName: string, elementIndex = 0): string {\n    return this.elements[elementIndex].style.removeProperty(propertyName);\n  }\n\n  private getCss(propertyName: string): string | null {\n    return getComputedStyle(this.elements[0])[<any>propertyName];\n  }\n\n  private setCss(propertyName: string, value: string): DOM {\n    this.forEach((element) => {\n      // <any> cast to resolve TS7015: http://stackoverflow.com/a/36627114/370252\n      element.style[<any>propertyName] = value;\n    });\n    return this;\n  }\n\n  private setCssCollection(ruleValueCollection: {[ruleName: string]: string}): DOM {\n    this.forEach((element) => {\n      // http://stackoverflow.com/a/34490573/370252\n      Object.assign(element.style, ruleValueCollection);\n    });\n\n    return this;\n  }\n}\n","import {ErrorMessageMap, ErrorMessageTranslator} from './components/errormessageoverlay';\nimport { ErrorEvent } from 'bitmovin-player';\nimport { MobileV3PlayerErrorEvent, MobileV3SourceErrorEvent } from './mobilev3playerapi';\n\nexport namespace ErrorUtils {\n\n  export const defaultErrorMessages: ErrorMessageMap = {\n    1000: 'Error is unknown',\n    1001: 'The player API is not available after a call to PlayerAPI.destroy.',\n    1100: 'General setup error',\n    1101: 'There was an error when inserting the HTML video element',\n    1102: 'No configuration was provided',\n    1103: 'The license is not valid',\n    1104: 'The the domain-locked player is not authorized to playback on this domain',\n    1105: 'The domain is not allowlisted',\n    1106: 'The license server URL is invalid',\n    1107: 'The impression server URL is invalid',\n    1108: 'Could not initialize a rendering engine',\n    1109: 'The used flash version does not support playback',\n    1110: 'Native Flash is not authorized by a valid Adobe token',\n    1111: 'Flash doesn\\'t have sufficient resources',\n    1112: 'Flash container API not available',\n    1113: 'Protocol not supported. This site has been loaded using \"file\" protocol, but unfortunately this is not supported. Please load the page using a web server (using http or https)',\n    1200: 'General source error',\n    1201: 'No valid source was provided',\n    1202: 'The downloaded manifest is invalid',\n    1203: 'There was no technology detected to playback the provided source',\n    1204: 'The stream type is not supported',\n    1205: 'The forced technology is not supported',\n    1206: 'No stream found for supported technologies.',\n    1207: 'The downloaded segment is empty',\n    1208: 'The manifest could not be loaded',\n    1209: 'Progressive stream type not supported or the stream has an error',\n    1210: 'HLS stream has an error',\n    1211: 'The encryption method is not supported',\n    1300: 'General playback error',\n    1301: 'Video decoder or demuxer had an error with the content',\n    1302: 'General error if Flash renderer has an error',\n    1303: 'Flash doesn\\'t have sufficient resources',\n    1304: 'The transmuxer could not be initialized',\n    1400: 'Network error while downloading',\n    1401: 'The manifest download timed out',\n    1402: 'The segment download timed out',\n    1403: 'The progressive stream download timed out',\n    1404: 'The Certificate could not be loaded',\n    2000: 'General DRM error',\n    2001: 'Required DRM configuration is missing',\n    2002: 'The licensing server URL is missing',\n    2003: 'License request failed',\n    2004: 'Key or KeyId is missing',\n    2005: 'Key size is not supported',\n    2006: 'Unable to instantiate a key system supporting the required combinations',\n    2007: 'Unable to create or initialize key session',\n    2008: 'The MediaKey object could not be created/initialized',\n    2009: 'Key error',\n    2010: 'The key system is not supported',\n    2011: 'The certificate is not valid',\n    2012: 'Invalid header key/value pair for PlayReady license request',\n    2013: 'Content cannot be played back because the output is restricted on this machine',\n    2014: 'DRM error for the Flash renderer',\n    2100: 'General VR error',\n    2101: 'Player technology not compatible with VR playback',\n    3000: 'General module error',\n    3001: 'The definition of the module is invalid (e.g. incomplete).',\n    3002: 'The module definition specifies dependencies but the module is not provided via a function for deferred loading.',\n    3003: 'A module cannot be loaded because it has not been added to the player core.',\n    3004: 'A module cannot be loaded because one or more dependencies are missing.',\n    3100: 'An Advertising module error has occurred. Refer to the attached AdvertisingError.',\n  };\n\n  export const defaultMobileV3ErrorMessageTranslator = (error: MobileV3PlayerErrorEvent | MobileV3SourceErrorEvent) => {\n    return error.message;\n  };\n\n  export const defaultWebErrorMessageTranslator: ErrorMessageTranslator = (error: ErrorEvent) => {\n    const errorMessage = ErrorUtils.defaultErrorMessages[error.code];\n\n    if (errorMessage) {\n      // Use the error message text if there is one\n      return `${errorMessage}\\n(${error.name})`; // default error message style\n    } else {\n      // Fallback to error code/name if no message is defined\n      return `${error.code} ${error.name}`;\n    }\n  };\n}\n","import {ArrayUtils} from './arrayutils';\nimport { Timeout } from './timeout';\n/**\n * Function interface for event listeners on the {@link EventDispatcher}.\n */\nexport interface EventListener<Sender, Args> {\n  (sender: Sender, args: Args): void;\n}\n\n/**\n * Empty type for creating {@link EventDispatcher event dispatchers} that do not carry any arguments.\n */\nexport interface NoArgs {\n}\n\n/**\n * Event args for an event that can be canceled.\n */\nexport interface CancelEventArgs extends NoArgs {\n  /**\n   * Gets or sets a flag whether the event should be canceled.\n   */\n  cancel?: boolean;\n}\n\n/**\n * Public interface that represents an event. Can be used to subscribe to and unsubscribe from events.\n */\nexport interface Event<Sender, Args> {\n  /**\n   * Subscribes an event listener to this event dispatcher.\n   * @param listener the listener to add\n   */\n  subscribe(listener: EventListener<Sender, Args>): void;\n\n  /**\n   * Subscribes an event listener to this event dispatcher that is only called once.\n   * @param listener the listener to add\n   */\n  subscribeOnce(listener: EventListener<Sender, Args>): void;\n\n  /**\n   * Subscribes an event listener to this event dispatcher that will be called at a limited rate with a minimum\n   * interval of the specified milliseconds.\n   * @param listener the listener to add\n   * @param rateMs the rate in milliseconds to which calling of the listeners should be limited\n   */\n  subscribeRateLimited(listener: EventListener<Sender, Args>, rateMs: number): void;\n\n  /**\n   * Unsubscribes a subscribed event listener from this dispatcher.\n   * @param listener the listener to remove\n   * @returns {boolean} true if the listener was successfully unsubscribed, false if it isn't subscribed on this\n   *   dispatcher\n   */\n  unsubscribe(listener: EventListener<Sender, Args>): boolean;\n}\n\n/**\n * Event dispatcher to subscribe and trigger events. Each event should have its own dispatcher.\n */\nexport class EventDispatcher<Sender, Args> implements Event<Sender, Args> {\n\n  private listeners: EventListenerWrapper<Sender, Args>[] = [];\n\n  constructor() {\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribe(listener: EventListener<Sender, Args>) {\n    this.listeners.push(new EventListenerWrapper(listener));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribeOnce(listener: EventListener<Sender, Args>) {\n    this.listeners.push(new EventListenerWrapper(listener, true));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribeRateLimited(listener: EventListener<Sender, Args>, rateMs: number) {\n    this.listeners.push(new RateLimitedEventListenerWrapper(listener, rateMs));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  unsubscribe(listener: EventListener<Sender, Args>): boolean {\n    // Iterate through listeners, compare with parameter, and remove if found\n    // NOTE: In case we ever remove all matching listeners instead of just the first, we need to reverse-iterate here\n    for (let i = 0; i < this.listeners.length; i++) {\n      let subscribedListener = this.listeners[i];\n      if (subscribedListener.listener === listener) {\n        subscribedListener.clear();\n        ArrayUtils.remove(this.listeners, subscribedListener);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Removes all listeners from this dispatcher.\n   */\n  unsubscribeAll(): void {\n    // In case of RateLimitedEventListenerWrapper we need to make sure that the timeout callback won't be called\n    for (let listener of this.listeners) {\n      listener.clear();\n    }\n\n    this.listeners = [];\n  }\n\n  /**\n   * Dispatches an event to all subscribed listeners.\n   * @param sender the source of the event\n   * @param args the arguments for the event\n   */\n  dispatch(sender: Sender, args: Args = null) {\n    let listenersToRemove = [];\n\n    // Call every listener\n    // We iterate over a copy of the array of listeners to avoid the case where events are not fired on listeners when\n    // listeners are unsubscribed from within the event handlers during a dispatch (because the indices change and\n    // listeners are shifted within the array).\n    // This means that listener x+1 will still be called if unsubscribed from within the handler of listener x, as well\n    // as listener y+1 will not be called when subscribed from within the handler of listener y.\n    // Array.slice(0) is the fastest array copy method according to: https://stackoverflow.com/a/21514254/370252\n    const listeners = this.listeners.slice(0);\n    for (let listener of listeners) {\n      listener.fire(sender, args);\n\n      if (listener.isOnce()) {\n        listenersToRemove.push(listener);\n      }\n    }\n\n    // Remove one-time listener\n    for (let listenerToRemove of listenersToRemove) {\n      ArrayUtils.remove(this.listeners, listenerToRemove);\n    }\n  }\n\n  /**\n   * Returns the event that this dispatcher manages and on which listeners can subscribe and unsubscribe event handlers.\n   * @returns {Event}\n   */\n  getEvent(): Event<Sender, Args> {\n    // For now, just cast the event dispatcher to the event interface. At some point in the future when the\n    // codebase grows, it might make sense to split the dispatcher into separate dispatcher and event classes.\n    return <Event<Sender, Args>>this;\n  }\n}\n\n/**\n * A basic event listener wrapper to manage listeners within the {@link EventDispatcher}. This is a 'private' class\n * for internal dispatcher use and it is therefore not exported.\n */\nclass EventListenerWrapper<Sender, Args> {\n\n  private eventListener: EventListener<Sender, Args>;\n  private once: boolean;\n\n  constructor(listener: EventListener<Sender, Args>, once: boolean = false) {\n    this.eventListener = listener;\n    this.once = once;\n  }\n\n  /**\n   * Returns the wrapped event listener.\n   * @returns {EventListener<Sender, Args>}\n   */\n  get listener(): EventListener<Sender, Args> {\n    return this.eventListener;\n  }\n\n  /**\n   * Fires the wrapped event listener with the given arguments.\n   * @param sender\n   * @param args\n   */\n  fire(sender: Sender, args: Args) {\n    this.eventListener(sender, args);\n  }\n\n  /**\n   * Checks if this listener is scheduled to be called only once.\n   * @returns {boolean} once if true\n   */\n  isOnce(): boolean {\n    return this.once;\n  }\n\n  clear(): void {\n  }\n}\n\ninterface EventAttributes<Sender, Args> {\n  sender: Sender;\n  args: Args;\n}\n\n/**\n * Extends the basic {@link EventListenerWrapper} with rate-limiting functionality.\n */\nclass RateLimitedEventListenerWrapper<Sender, Args> extends EventListenerWrapper<Sender, Args> {\n\n  private readonly rateMs: number;\n  private readonly rateLimitingEventListener: EventListener<Sender, Args>;\n\n  // save last seen event attributes\n  private lastSeenEvent: EventAttributes<Sender, Args>;\n\n  private rateLimitTimout: Timeout;\n\n  constructor(listener: EventListener<Sender, Args>, rateMs: number) {\n    super(listener); // sets the event listener sink\n\n    this.rateMs = rateMs;\n\n    // starting limiting the events to the given value\n    const startRateLimiting = () => {\n      this.rateLimitTimout.start();\n    };\n\n    // timout for limiting the events\n    this.rateLimitTimout = new Timeout(this.rateMs, () => {\n      if (this.lastSeenEvent) {\n        this.fireSuper(this.lastSeenEvent.sender, this.lastSeenEvent.args);\n        startRateLimiting(); // start rateLimiting again to keep rate limit active even after firing the last seen event\n        this.lastSeenEvent = null;\n      }\n    });\n\n    // In case the events stopping during the rateLimiting we need to track the last seen one and delegate after the\n    // rate limiting is finished. This prevents missing the last update due to the rate limit.\n    this.rateLimitingEventListener = (sender: Sender, args: Args) => {\n      // only fire events if the rateLimiting is not running\n      if (this.shouldFireEvent()) {\n        this.fireSuper(sender, args);\n        startRateLimiting();\n        return;\n      }\n\n      this.lastSeenEvent = {\n        sender: sender,\n        args: args,\n      };\n    };\n  }\n\n  private shouldFireEvent(): boolean {\n    return !this.rateLimitTimout.isActive();\n  }\n\n  private fireSuper(sender: Sender, args: Args) {\n    // Fire the actual external event listener\n    super.fire(sender, args);\n  }\n\n  fire(sender: Sender, args: Args) {\n    // Fire the internal rate-limiting listener instead of the external event listener\n    this.rateLimitingEventListener(sender, args);\n  }\n\n  clear(): void {\n    super.clear();\n    this.rateLimitTimout.clear();\n  }\n}\n","const FocusVisibleCssClassName = '{{PREFIX}}-focus-visible';\n\nexport class FocusVisibilityTracker {\n  private readonly eventHandlerMap: { [eventName: string]: EventListenerOrEventListenerObject };\n  private lastInteractionWasKeyboard: boolean = true;\n\n  constructor(private bitmovinUiPrefix: string) {\n    this.eventHandlerMap = {\n      mousedown: this.onMouseOrPointerOrTouch,\n      pointerdown: this.onMouseOrPointerOrTouch,\n      touchstart: this.onMouseOrPointerOrTouch,\n      keydown: this.onKeyDown,\n      focus: this.onFocus,\n      blur: this.onBlur,\n    };\n    this.registerEventListeners();\n  }\n\n  private onKeyDown = (e: KeyboardEvent) => {\n    if (e.metaKey || e.altKey || e.ctrlKey) {\n      return;\n    }\n\n    this.lastInteractionWasKeyboard = true;\n  };\n\n  private onMouseOrPointerOrTouch = () => (this.lastInteractionWasKeyboard = false);\n\n  private onFocus = ({ target: element }: FocusEvent) => {\n    if (\n      this.lastInteractionWasKeyboard &&\n      isHtmlElement(element) &&\n      isBitmovinUi(element, this.bitmovinUiPrefix) &&\n      !element.classList.contains(FocusVisibleCssClassName)\n    ) {\n      element.classList.add(FocusVisibleCssClassName);\n    }\n  };\n\n  private onBlur = ({ target: element }: FocusEvent) => {\n    if (isHtmlElement(element)) {\n      element.classList.remove(FocusVisibleCssClassName);\n    }\n  };\n\n  private registerEventListeners(): void {\n    for (const event in this.eventHandlerMap) {\n      document.addEventListener(event, this.eventHandlerMap[event], true);\n    }\n  }\n\n  private unregisterEventListeners(): void {\n    for (const event in this.eventHandlerMap) {\n      document.removeEventListener(event, this.eventHandlerMap[event], true);\n    }\n  }\n\n  public release(): void {\n    this.unregisterEventListeners();\n  }\n}\n\nfunction isBitmovinUi(element: Element, bitmovinUiPrefix: string): boolean {\n  return element.id.indexOf(bitmovinUiPrefix) === 0;\n}\n\nfunction isHtmlElement(element: unknown): element is HTMLElement & { classList: DOMTokenList } {\n  return (\n    element instanceof HTMLElement && element.classList instanceof DOMTokenList\n  );\n}\n","import { PlayerAPI } from 'bitmovin-player';\n/**\n * The Group Playback API offers control over synchronized playback of a group of clients, e.g. for Apple SharePlay\n * sessions.\n\n * Note: The API currently only covers the immediate needs of the iOS SDK in combination with our UI which is regarding\n * temporarily suspending synchronization of the player from the group. But it is open to be extended as needed in the\n * future.\n */\n\n/**\n * Reason for suspending the synchronization with the group.\n */\nexport enum GroupPlaybackSuspensionReason {\n  UserIsScrubbing = 'userIsScrubbing',\n}\n\n/**\n * A representation of a temporary break in participation.\n */\nexport interface GroupPlaybackSuspension {\n  /**\n   * The reason for the suspension.\n   */\n  reason: GroupPlaybackSuspensionReason;\n\n  /**\n   * A unique identifier.\n   */\n  id: string;\n}\n\n/**\n * Options to be considered upon ending a suspension.\n */\ninterface EndGroupPlaybackSuspensionOptions {\n  /**\n   * A proposed time for the group to seek to.\n   */\n  proposedPlaybackTime?: number;\n}\n\n/**\n * Group Playback API offering control over the player's participation in synchronized playback of a group of clients.\n * For example, an Apple SharePlay session.\n */\ninterface GroupPlaybackAPI {\n  /**\n   * Begins a new suspension.\n   *\n   * Temporarily suspends the local player's synchronization with the group. While suspended, any local playback control\n   * action (e.g. play, pause, seek) will not be forwarded to the group and any action originating from another group\n   * participant will not be performed on the local player.\n   *\n   * @remarks\n   * It is possible for multiple suspensions to exist exist simultaneously with different suspension reasons. The player\n   * will re-synchronize with the group once all existing suspensions have ended.\n   *\n   * @param reason - The reason for the suspension.\n   * @returns A suspension object.\n   */\n  beginSuspension(reason: GroupPlaybackSuspensionReason): GroupPlaybackSuspension;\n\n  /**\n   * Ends the given suspension.\n   *\n   * @param suspension - The suspension to be ended.\n   * @param options - Optional. Options to be considered when ending the suspension, e.g. a proposed seek time for the group.\n   */\n  endSuspension(suspension: GroupPlaybackSuspension, options?: EndGroupPlaybackSuspensionOptions): void;\n\n  /**\n   * Whether the player is currently participating in a group playback session.\n   */\n  hasJoined(): boolean;\n\n  /**\n   * Whether the player is currently suspending synchronization with the group.\n   * Can only return true if `hasJoined()` also is true.\n   */\n  isSuspended(): boolean;\n}\n\n\nexport interface ExtendedPlayerAPI extends PlayerAPI {\n  /**\n   * Group Playback API\n   *\n   * @remarks\n   * This API is optional as not every platform supports group playback.\n   */\n  groupPlayback?: GroupPlaybackAPI;\n}\n","export namespace Guid {\n\n  let guid = 1;\n\n  export function next() {\n    return guid++;\n  }\n}\n","import {DOM} from './dom';\n\nexport interface ImageLoadedCallback {\n  (url: string, width: number, height: number): void;\n}\n\ninterface ImageLoaderState {\n  url: string;\n  image: DOM;\n  loadedCallback: ImageLoadedCallback;\n  loaded: boolean;\n  width: number;\n  height: number;\n}\n\n/**\n * Tracks the loading state of images.\n */\nexport class ImageLoader {\n\n  private state: { [url: string]: ImageLoaderState; } = {};\n\n  /**\n   * Loads an image and call the callback once the image is loaded. If the image is already loaded, the callback\n   * is called immediately, else it is called once loading has finished. Calling this method multiple times for the\n   * same image while it is loading calls only let callback passed into the last call.\n   * @param url The url to the image to load\n   * @param loadedCallback The callback that is called when the image is loaded\n   */\n  load(url: string, loadedCallback: ImageLoadedCallback): void {\n    if (!this.state[url]) {\n      // When the image was never attempted to be loaded before, we create a state and store it in the state map\n      // for later use when the same image is requested to be loaded again.\n      let state: ImageLoaderState = {\n        url: url,\n        image: new DOM('img', {}),\n        loadedCallback: loadedCallback,\n        loaded: false,\n        width: 0,\n        height: 0,\n      };\n      this.state[url] = state;\n\n      // Listen to the load event, update the state and call the callback once the image is loaded\n      state.image.on('load', (e) => {\n        state.loaded = true;\n        state.width = (<HTMLImageElement>state.image.get(0)).width;\n        state.height = (<HTMLImageElement>state.image.get(0)).height;\n\n        this.callLoadedCallback(state);\n      });\n\n      // Set the image URL to start the loading\n      state.image.attr('src', state.url);\n    } else {\n      // We have a state for the requested image, so it is either already loaded or currently loading\n      let state = this.state[url];\n\n      // We overwrite the callback to make sure that only the callback of the latest call gets executed.\n      // Earlier callbacks become invalid once a new load call arrives, and they are not called as long as the image\n      // is not loaded.\n      state.loadedCallback = loadedCallback;\n\n      // When the image is already loaded, we directly execute the callback instead of waiting for the load event\n      if (state.loaded) {\n        this.callLoadedCallback(state);\n      }\n    }\n  }\n\n  private callLoadedCallback(state: ImageLoaderState): void {\n    state.loadedCallback(state.url, state.width, state.height);\n  }\n}\n","import vocabularyDe from './languages/de.json';\nimport vocabularyEn from './languages/en.json';\nimport vocabularyEs from './languages/es.json';\nimport { LocalizationConfig } from '../uimanager.js';\n\nexport const defaultVocabularies: Vocabularies = {\n  'en': vocabularyEn,\n  'de': vocabularyDe,\n  'es': vocabularyEs,\n};\n\nconst defaultLocalizationConfig: LocalizationConfig = {\n  language: 'en',\n  vocabularies: defaultVocabularies,\n};\n\ntype Localizer = () => string;\nexport type LocalizableText = string | Localizer;\n\ninterface Vocabulary {\n  'settings.video.quality': string;\n  'settings.audio.quality': string;\n  'settings.audio.track': string;\n  'settings.audio.mute': string;\n  'settings.audio.volume': string;\n  'settings.subtitles': string;\n  'settings.subtitles.font.color': string;\n  'settings.subtitles.font.opacity': string;\n  'settings.subtitles.background.color': string;\n  'settings.subtitles.background.opacity': string;\n  'settings.subtitles.font.size': string;\n  'settings.subtitles.characterEdge': string;\n  'settings.subtitles.characterEdge.raised': string;\n  'settings.subtitles.characterEdge.depressed': string;\n  'settings.subtitles.characterEdge.uniform': string;\n  'settings.subtitles.characterEdge.dropshadowed': string;\n  'settings.subtitles.font.family': string;\n  'settings.subtitles.font.family.monospacedserif': string;\n  'settings.subtitles.font.family.proportionalserif': string;\n  'settings.subtitles.font.family.monospacedsansserif': string;\n  'settings.subtitles.font.family.proportionalsansserif': string;\n  'settings.subtitles.font.family.casual': string;\n  'settings.subtitles.font.family.cursive': string;\n  'settings.subtitles.font.family.smallcapital': string;\n  'settings.subtitles.window.color': string;\n  'settings.subtitles.window.opacity': string;\n  'play': string;\n  'settings.time.hours': string;\n  'settings.time.minutes': string;\n  'settings.time.seconds': string;\n  'colors.white': string;\n  'colors.black': string;\n  'colors.red': string;\n  'colors.green': string;\n  'colors.blue': string;\n  'colors.cyan': string;\n  'colors.yellow': string;\n  'colors.magenta': string;\n  'percent': string;\n  'settings': string;\n  'ads.remainingTime': string;\n  'pictureInPicture': string;\n  'appleAirplay': string;\n  'googleCast': string;\n  'vr': string;\n  'off': string;\n  'auto': string;\n  'back': string;\n  'reset': string;\n  'replay': string;\n  'normal': string;\n  'default': string;\n  'open': string;\n  'close': string;\n  'fullscreen': string;\n  'speed': string;\n  'playPause': string;\n  'live': string;\n  'subtitle.example': string;\n  'subtitle.select': string;\n  'playingOn': string;\n  'connectingTo': string;\n  'watermarkLink': string;\n  'controlBar': string;\n  'player': string;\n  'seekBar': string;\n  'seekBar.value': string;\n  'seekBar.timeshift': string;\n  'seekBar.durationText': string;\n}\n\nexport type CustomVocabulary<V> = V & Partial<Vocabulary>;\n\nexport interface Vocabularies {\n  [key: string]: CustomVocabulary<Record<string, string>>;\n}\n\nclass I18n {\n  private language: string;\n  private vocabulary: CustomVocabulary<Record<string, string>>;\n\n  constructor(config: LocalizationConfig) {\n    this.setConfig(config);\n  }\n\n  public setConfig(config: LocalizationConfig) {\n    const mergedConfig = { ...defaultLocalizationConfig, ...config };\n    const detectBrowserLanguage = mergedConfig.language === 'auto';\n    const vocabularies = this.mergeVocabulariesWithDefaultVocabularies(mergedConfig.vocabularies);\n    this.initializeLanguage(mergedConfig.language, detectBrowserLanguage, vocabularies);\n    this.initializeVocabulary(vocabularies);\n  }\n\n  private static containsLanguage(vocabularies: Vocabularies, language: string) {\n    return vocabularies.hasOwnProperty(language);\n  }\n\n  private mergeVocabulariesWithDefaultVocabularies(vocabularies: Vocabularies = {}) {\n    const rawVocabularies: Vocabularies = { ...defaultVocabularies, ...vocabularies };\n    return Object.keys(rawVocabularies).reduce((mergedVocabularies, language) => {\n      let vocabulary = rawVocabularies[language];\n      if (I18n.containsLanguage(defaultVocabularies, language) && I18n.containsLanguage(vocabularies, language)) {\n        vocabulary = { ...defaultVocabularies[language], ...vocabularies[language] };\n      }\n      return { ...mergedVocabularies, [language]: vocabulary };\n    }, {});\n  }\n\n  private initializeLanguage(\n    language: string,\n    browserLanguageDetectionEnabled: boolean,\n    vocabularies: Vocabularies,\n  ) {\n    if (browserLanguageDetectionEnabled) {\n      const userLanguage = window.navigator.language;\n\n      if (I18n.containsLanguage(vocabularies, userLanguage)) {\n        this.language = userLanguage;\n        return;\n      }\n      const shortenedUserLanguage = userLanguage.slice(0, 2);\n      if (I18n.containsLanguage(vocabularies, shortenedUserLanguage)) {\n        this.language = shortenedUserLanguage;\n        return;\n      }\n    }\n\n    this.language = language;\n  }\n\n  private initializeVocabulary(vocabularies: Vocabularies) {\n    this.vocabulary = ['en', this.language]\n      .reduce((vocab, lang) => ({ ...vocab, ...(vocabularies[lang] || {}) }), {});\n  }\n\n  private replaceVariableWithPlaceholderIfExists(text: string, config: any) {\n    const matches = text.match(new RegExp('{[a-zA-Z0-9]+}', 'g'));\n    if (matches.length === 0) {\n      return text;\n    }\n\n    return matches\n      .map((m: string) => ({ match: m, key: m.slice(1, -1) }))\n      .reduce((str, { key, match }) => config.hasOwnProperty(key) ? str.replace(match, config[key]) : str, text);\n  }\n\n  public getLocalizer<V extends CustomVocabulary<Record<string, string>> = CustomVocabulary<Record<string, string>>>(\n    key: keyof V,\n    config?: Record<string, string | number>,\n  ): Localizer {\n    return () => {\n      if (key == null) { // because sometimes we call toDomElement() without configuring the component or setting text...\n        return undefined;\n      }\n      let vocabularyString = this.vocabulary[key as string];\n\n      if (vocabularyString == null) {\n        vocabularyString = key as string;\n      }\n\n      if (config != null) {\n        vocabularyString = this.replaceVariableWithPlaceholderIfExists(vocabularyString, config);\n      }\n\n      return vocabularyString;\n    };\n  }\n\n  public performLocalization(text: LocalizableText) {\n    return typeof text === 'function' ? text() : text;\n  }\n}\n\nexport const i18n = new I18n(defaultLocalizationConfig);\n","module.exports={\n  \"settings.video.quality\": \"Videoqualität\",\n  \"settings.audio.quality\": \"Audioqualität\",\n  \"settings.audio.track\": \"Audiospur\",\n  \"speed\": \"Geschwindigkeit\",\n  \"play\": \"Abspielen\",\n  \"pause\": \"Pause\",\n  \"playPause\": \"Abspielen/Pause\",\n  \"open\": \"öffnen\",\n  \"close\": \"Schließen\",\n  \"settings.audio.mute\": \"Stummschaltung\",\n  \"settings.audio.volume\": \"Lautstärke\",\n  \"pictureInPicture\": \"Bild im Bild\",\n  \"appleAirplay\": \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\": \"VR\",\n  \"settings\": \"Einstellungen\",\n  \"fullscreen\": \"Vollbild\",\n  \"off\": \"aus\",\n  \"settings.subtitles\": \"Untertitel\",\n  \"settings.subtitles.font.size\": \"Größe\",\n  \"settings.subtitles.font.family\": \"Schriftart\",\n  \"settings.subtitles.font.color\": \"Farbe\",\n  \"settings.subtitles.font.opacity\": \"Deckkraft\",\n  \"settings.subtitles.characterEdge\": \"Ränder\",\n  \"settings.subtitles.background.color\": \"Hintergrundfarbe\",\n  \"settings.subtitles.background.opacity\": \"Hintergrunddeckkraft\",\n  \"settings.subtitles.window.color\": \"Hintergrundfarbe\",\n  \"settings.subtitles.window.opacity\": \"Hintergrunddeckkraft\",\n  \"settings.time.hours\": \"Stunden\",\n  \"settings.time.minutes\": \"Minuten\",\n  \"settings.time.seconds\": \"Sekunden\",\n  \"back\": \"Zurück\",\n  \"reset\": \"Zurücksetzen\",\n  \"replay\": \"Wiederholen\",\n  \"ads.remainingTime\": \"Diese Anzeige endet in {remainingTime} Sekunden\",\n  \"default\": \"standard\",\n  \"colors.white\": \"weiß\",\n  \"colors.black\": \"schwarz\",\n  \"colors.red\": \"rot\",\n  \"colors.green\": \"grün\",\n  \"colors.blue\": \"blau\",\n  \"colors.yellow\": \"gelb\",\n  \"subtitle.example\": \"Beispiel Untertitel\",\n  \"subtitle.select\": \"Untertitel auswählen\",\n  \"playingOn\": \"Spielt auf <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Verbindung mit <strong>{castDeviceName}</strong> wird hergestellt...\",\n  \"watermarkLink\": \"Link zum Homepage\",\n  \"controlBar\": \"Videoplayer Kontrollen\",\n  \"player\": \"Video player\",\n  \"seekBar\": \"Video-Timeline\",\n  \"seekBar.value\": \"Wert\",\n  \"seekBar.timeshift\": \"Timeshift\",\n  \"seekBar.durationText\": \"aus\"\n}\n","module.exports={\n  \"settings.video.quality\": \"Video Quality\",\n  \"settings.audio.quality\": \"Audio Quality\",\n  \"settings.audio.track\": \"Audio Track\",\n  \"settings.audio.mute\" : \"Mute\",\n  \"settings.audio.volume\" : \"Volume\",\n  \"settings.subtitles.window.color\" : \"Window color\",\n  \"settings.subtitles.window.opacity\" : \"Window opacity\",\n  \"settings.subtitles\" : \"Subtitles\",\n  \"settings.subtitles.font.color\" : \"Font color\",\n  \"settings.subtitles.font.opacity\" : \"Font opacity\",\n  \"settings.subtitles.background.color\" : \"Background color\",\n  \"settings.subtitles.background.opacity\": \"Background opacity\",\n  \"colors.white\": \"white\",\n  \"colors.black\": \"black\",\n  \"colors.red\": \"red\",\n  \"colors.green\": \"green\",\n  \"colors.blue\": \"blue\",\n  \"colors.cyan\": \"cyan\",\n  \"colors.yellow\": \"yellow\",\n  \"colors.magenta\": \"magenta\",\n  \"percent\": \"{value}%\",\n  \"settings.subtitles.font.size\": \"Font size\",\n  \"settings.subtitles.characterEdge\": \"Character edge\",\n  \"settings.subtitles.characterEdge.raised\": \"raised\",\n  \"settings.subtitles.characterEdge.depressed\": \"depressed\",\n  \"settings.subtitles.characterEdge.uniform\": \"uniform\",\n  \"settings.subtitles.characterEdge.dropshadowed\": \"drop shadowed\",\n  \"settings.subtitles.font.family\": \"Font family\",\n  \"settings.subtitles.font.family.monospacedserif\": \"monospaced serif\",\n  \"settings.subtitles.font.family.proportionalserif\": \"proportional serif\",\n  \"settings.subtitles.font.family.monospacedsansserif\": \"monospaced sans serif\",\n  \"settings.subtitles.font.family.proportionalsansserif\": \"proportional sans serif\",\n  \"settings.subtitles.font.family.casual\": \"casual\",\n  \"settings.subtitles.font.family.cursive\": \"cursive\",\n  \"settings.subtitles.font.family.smallcapital\": \"small capital\",\n  \"settings.time.hours\": \"Hours\",\n  \"settings.time.minutes\": \"Minutes\",\n  \"settings.time.seconds\": \"Seconds\",\n  \"ads.remainingTime\": \"This ad will end in {remainingTime} seconds.\",\n  \"settings\": \"Settings\",\n  \"fullscreen\" : \"Fullscreen\",\n  \"speed\": \"Speed\",\n  \"playPause\" : \"Play/Pause\",\n  \"play\": \"Play\",\n  \"pause\": \"Pause\",\n  \"open\": \"open\",\n  \"close\": \"Close\",\n  \"pictureInPicture\": \"Picture-in-Picture\",\n  \"appleAirplay\" : \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\" : \"VR\",\n  \"off\": \"off\",\n  \"auto\": \"auto\",\n  \"back\" : \"Back\",\n  \"reset\": \"Reset\",\n  \"replay\": \"Replay\",\n  \"normal\": \"normal\",\n  \"default\": \"default\",\n  \"live\": \"Live\",\n  \"subtitle.example\": \"example subtitle\",\n  \"subtitle.select\": \"Select subtitle\",\n  \"playingOn\": \"Playing on <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Connecting to <strong>{castDeviceName}</strong>...\",\n  \"watermarkLink\": \"Link to Homepage\",\n  \"controlBar\": \"Video player controls\",\n  \"player\": \"Video player\",\n  \"seekBar\": \"Video timeline\",\n  \"seekBar.value\": \"Value\",\n  \"seekBar.timeshift\": \"Timeshift\",\n  \"seekBar.durationText\": \"out of\"\n}\n","module.exports={\n  \"settings.video.quality\": \"Calidad de Video\",\n  \"settings.audio.quality\": \"Calidad de Audio\",\n  \"settings.audio.track\": \"Pista de Audio\",\n  \"settings.audio.mute\" : \"Silencio\",\n  \"settings.audio.volume\" : \"Volumen\",\n  \"settings.subtitles.window.color\" : \"color de Ventana\",\n  \"settings.subtitles.window.opacity\" : \"opacidad de Ventana\",\n  \"settings.subtitles\" : \"Subtítulos\",\n  \"settings.subtitles.font.color\" : \"color de Fuente\",\n  \"settings.subtitles.font.opacity\" : \"opacidad de Fuente\",\n  \"settings.subtitles.background.color\" : \"color de Fondo\",\n  \"settings.subtitles.background.opacity\": \"opacidad de Fondo\",\n  \"colors.white\": \"blanco\",\n  \"colors.black\": \"negro\",\n  \"colors.red\": \"rojo\",\n  \"colors.green\": \"verde\",\n  \"colors.blue\": \"azul\",\n  \"colors.cyan\": \"cian\",\n  \"colors.yellow\": \"amarillo\",\n  \"colors.magenta\": \"magenta\",\n  \"percent\": \"{value}%\",\n  \"settings.subtitles.font.size\": \"tamaño de Fuente\",\n  \"settings.subtitles.characterEdge\": \"borde del Caracter\",\n  \"settings.subtitles.characterEdge.raised\": \"alzado\",\n  \"settings.subtitles.characterEdge.depressed\": \"discreto\",\n  \"settings.subtitles.characterEdge.uniform\": \"uniforme\",\n  \"settings.subtitles.characterEdge.dropshadowed\": \"sombreado\",\n  \"settings.subtitles.font.family\": \"tipo de Fuente\",\n  \"settings.subtitles.font.family.monospacedserif\": \"monospaced serif\",\n  \"settings.subtitles.font.family.proportionalserif\": \"proportional serif\",\n  \"settings.subtitles.font.family.monospacedsansserif\": \"monospaced sans serif\",\n  \"settings.subtitles.font.family.proportionalsansserif\": \"proportional sans serif\",\n  \"settings.subtitles.font.family.casual\": \"casual\",\n  \"settings.subtitles.font.family.cursive\": \"cursiva\",\n  \"settings.subtitles.font.family.smallcapital\": \"small capital\",\n  \"settings.time.hours\": \"Horas\",\n  \"settings.time.minutes\": \"Minutos\",\n  \"settings.time.seconds\": \"Segundos\",\n  \"ads.remainingTime\": \"Este anuncio acabará en {remainingTime} segundos.\",\n  \"settings\": \"Configuración\",\n  \"fullscreen\" : \"Pantalla Completa\",\n  \"speed\": \"Velocidad\",\n  \"playPause\" : \"Reproducir/Pausa\",\n  \"play\": \"Reproducir\",\n  \"pause\": \"Pausa\",\n  \"open\": \"Abrir\",\n  \"close\": \"Cerrar\",\n  \"pictureInPicture\": \"Imagen en Imagen\",\n  \"appleAirplay\" : \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\" : \"VR\",\n  \"off\": \"off\",\n  \"auto\": \"auto\",\n  \"back\" : \"Atrás\",\n  \"reset\": \"Reiniciar\",\n  \"replay\": \"Rebobinar\",\n  \"normal\": \"normal\",\n  \"default\": \"predeterminado\",\n  \"live\": \"Directo\",\n  \"subtitle.example\": \"Ejemplo de Subtítulo\",\n  \"subtitle.select\": \"Seleccionar subtítulo\",\n  \"playingOn\": \"Reproduciendo en <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Conectando a <strong>{castDeviceName}</strong>...\",\n  \"watermarkLink\": \"Enlace al inicio\",\n  \"controlBar\": \"Controles del Reproductor\",\n  \"player\": \"Reproductor de Video\",\n  \"seekBar\": \"Línea de Tiempo\",\n  \"seekBar.value\": \"posición\",\n  \"seekBar.timeshift\": \"cambio de posición\",\n  \"seekBar.durationText\": \"de\"\n}","export const version: string = '{{VERSION}}';\n// Management\nexport { UIManager, UIInstanceManager } from './uimanager';\n// Factories\nexport { UIFactory } from './uifactory';\nexport { DemoFactory } from './demofactory';\n// Utils\nexport { ArrayUtils } from './arrayutils';\nexport { StringUtils } from './stringutils';\nexport { PlayerUtils } from './playerutils';\nexport { UIUtils } from './uiutils';\nexport { BrowserUtils } from './browserutils';\nexport { StorageUtils } from './storageutils';\nexport { ErrorUtils } from './errorutils';\n// Localization\nexport { i18n } from './localization/i18n';\n// Spatial Navigation\nexport { SpatialNavigation } from './spatialnavigation/spatialnavigation';\nexport { NavigationGroup } from './spatialnavigation/navigationgroup';\nexport { RootNavigationGroup } from './spatialnavigation/rootnavigationgroup';\nexport { ListNavigationGroup, ListOrientation } from './spatialnavigation/ListNavigationGroup';\n// Components\nexport { Button } from './components/button';\nexport { ControlBar } from './components/controlbar';\nexport { FullscreenToggleButton } from './components/fullscreentogglebutton';\nexport { HugePlaybackToggleButton } from './components/hugeplaybacktogglebutton';\nexport { PlaybackTimeLabel, PlaybackTimeLabelMode } from './components/playbacktimelabel';\nexport { PlaybackToggleButton } from './components/playbacktogglebutton';\nexport { SeekBar } from './components/seekbar';\nexport { SelectBox } from './components/selectbox';\nexport { ItemSelectionList } from './components/itemselectionlist';\nexport { SettingsPanel } from './components/settingspanel';\nexport { SettingsToggleButton } from './components/settingstogglebutton';\nexport { ToggleButton } from './components/togglebutton';\nexport { VideoQualitySelectBox } from './components/videoqualityselectbox';\nexport { VolumeToggleButton } from './components/volumetogglebutton';\nexport { VRToggleButton } from './components/vrtogglebutton';\nexport { Watermark } from './components/watermark';\nexport { UIContainer } from './components/uicontainer';\nexport { Container } from './components/container';\nexport { Label } from './components/label';\nexport { AudioQualitySelectBox } from './components/audioqualityselectbox';\nexport { AudioTrackSelectBox } from './components/audiotrackselectbox';\nexport { CastStatusOverlay } from './components/caststatusoverlay';\nexport { CastToggleButton } from './components/casttogglebutton';\nexport { Component } from './components/component';\nexport { ErrorMessageOverlay } from './components/errormessageoverlay';\nexport { RecommendationOverlay } from './components/recommendationoverlay';\nexport { SeekBarLabel } from './components/seekbarlabel';\nexport { SubtitleOverlay } from './components/subtitleoverlay';\nexport { SubtitleSelectBox } from './components/subtitleselectbox';\nexport { TitleBar } from './components/titlebar';\nexport { VolumeControlButton } from './components/volumecontrolbutton';\nexport { ClickOverlay } from './components/clickoverlay';\nexport { AdSkipButton } from './components/adskipbutton';\nexport { AdMessageLabel } from './components/admessagelabel';\nexport { AdClickOverlay } from './components/adclickoverlay';\nexport { PlaybackSpeedSelectBox } from './components/playbackspeedselectbox';\nexport { HugeReplayButton } from './components/hugereplaybutton';\nexport { BufferingOverlay } from './components/bufferingoverlay';\nexport { CastUIContainer } from './components/castuicontainer';\nexport { PlaybackToggleOverlay } from './components/playbacktoggleoverlay';\nexport { CloseButton } from './components/closebutton';\nexport { MetadataLabel, MetadataLabelContent } from './components/metadatalabel';\nexport { AirPlayToggleButton } from './components/airplaytogglebutton';\nexport { VolumeSlider } from './components/volumeslider';\nexport { PictureInPictureToggleButton } from './components/pictureinpicturetogglebutton';\nexport { Spacer } from './components/spacer';\nexport { BackgroundColorSelectBox } from './components/subtitlesettings/backgroundcolorselectbox';\nexport { BackgroundOpacitySelectBox } from './components/subtitlesettings/backgroundopacityselectbox';\nexport { CharacterEdgeSelectBox } from './components/subtitlesettings/characteredgeselectbox';\nexport { FontColorSelectBox } from './components/subtitlesettings/fontcolorselectbox';\nexport { FontFamilySelectBox } from './components/subtitlesettings/fontfamilyselectbox';\nexport { FontOpacitySelectBox } from './components/subtitlesettings/fontopacityselectbox';\nexport { FontSizeSelectBox } from './components/subtitlesettings/fontsizeselectbox';\nexport { SubtitleSettingSelectBox } from './components/subtitlesettings/subtitlesettingselectbox';\nexport { SubtitleSettingsLabel } from './components/subtitlesettings/subtitlesettingslabel';\nexport { WindowColorSelectBox } from './components/subtitlesettings/windowcolorselectbox';\nexport { WindowOpacitySelectBox } from './components/subtitlesettings/windowopacityselectbox';\nexport { SubtitleSettingsResetButton } from './components/subtitlesettings/subtitlesettingsresetbutton';\nexport { ListBox } from './components/listbox';\nexport { SubtitleListBox } from './components/subtitlelistbox';\nexport { AudioTrackListBox } from './components/audiotracklistbox';\nexport { SettingsPanelPage } from './components/settingspanelpage';\nexport { SettingsPanelPageBackButton } from './components/settingspanelpagebackbutton';\nexport { SettingsPanelPageOpenButton } from './components/settingspanelpageopenbutton';\nexport { SubtitleSettingsPanelPage } from './components/subtitlesettings/subtitlesettingspanelpage';\nexport { SettingsPanelItem } from './components/settingspanelitem';\nexport { ReplayButton } from './components/replaybutton';\n\n// Object.assign polyfill for ES5/IE9\n// https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nif (typeof Object.assign !== 'function') {\n  Object.assign = function(target: any) {\n    'use strict';\n    if (target == null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    target = Object(target);\n    for (let index = 1; index < arguments.length; index++) {\n      let source = arguments[index];\n      if (source != null) {\n        for (let key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n}","import { PlayerAPI, PlayerEvent, PlayerEventBase, PlayerEventCallback } from 'bitmovin-player';\nimport { WrappedPlayer } from './uimanager';\n\nexport enum MobileV3PlayerEvent {\n  SourceError = 'sourceerror',\n  PlayerError = 'playererror',\n  PlaylistTransition = 'playlisttransition',\n}\n\nexport interface MobileV3PlayerErrorEvent extends PlayerEventBase {\n  code: number;\n  message: string;\n}\n\nexport interface MobileV3SourceErrorEvent extends PlayerEventBase {\n  code: number;\n  message: string;\n}\n\nexport type MobileV3PlayerEventType = PlayerEvent | MobileV3PlayerEvent;\n\nexport interface MobileV3PlayerAPI extends PlayerAPI {\n  on(eventType: MobileV3PlayerEventType, callback: PlayerEventCallback): void;\n  exports: PlayerAPI['exports'] & { PlayerEvent: MobileV3PlayerEventType };\n}\n\nexport function isMobileV3PlayerAPI(player: WrappedPlayer | PlayerAPI | MobileV3PlayerAPI): player is MobileV3PlayerAPI {\n  for (const key in MobileV3PlayerEvent) {\n    if (MobileV3PlayerEvent.hasOwnProperty(key) && !player.exports.PlayerEvent.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import {Event, EventDispatcher, NoArgs} from './eventdispatcher';\nimport {BrowserUtils} from './browserutils';\nimport { UIInstanceManager } from './uimanager';\nimport { PlayerAPI, TimeRange } from 'bitmovin-player';\n\nexport namespace PlayerUtils {\n\n  export enum PlayerState {\n    Idle,\n    Prepared,\n    Playing,\n    Paused,\n    Finished,\n  }\n\n  export function isTimeShiftAvailable(player: PlayerAPI): boolean {\n    return player.isLive() && player.getMaxTimeShift() !== 0;\n  }\n\n  export function getState(player: PlayerAPI): PlayerState {\n    if (player.hasEnded()) {\n      return PlayerState.Finished;\n    } else if (player.isPlaying()) {\n      return PlayerState.Playing;\n    } else if (player.isPaused()) {\n      return PlayerState.Paused;\n    } else if (player.getSource() != null) {\n      return PlayerState.Prepared;\n    } else {\n      return PlayerState.Idle;\n    }\n  }\n\n  /**\n   * Returns the currentTime - seekableRange.start. This ensures a user-friendly currentTime after a live stream\n   * transitioned to VoD.\n   * @param player\n   */\n  export function getCurrentTimeRelativeToSeekableRange(player: PlayerAPI): number {\n    const currentTime = player.getCurrentTime();\n    if (player.isLive()) {\n      return currentTime;\n    }\n\n    const seekableRangeStart = PlayerUtils.getSeekableRangeStart(player, 0);\n    return currentTime - seekableRangeStart;\n  }\n\n  /**\n   * Returns the start value of the seekable range or the defaultValue if no seekableRange is present.\n   * For now this happens only in combination with Mobile SDKs.\n   *\n   * TODO: remove this function in next major release\n   *\n   * @param player\n   * @param defaultValue\n   */\n  export function getSeekableRangeStart(player: PlayerAPI, defaultValue: number = 0) {\n    return player.getSeekableRange() && player.getSeekableRange().start || defaultValue;\n  }\n\n  /**\n   * Calculates player seekable time range for live.\n   * As the player returns `{ start: -1, end: -1 }` for live streams we need to calculate the `seekableRange` based on `maxTimeshift`.\n   *\n   * @param player\n   */\n  export function getSeekableRangeRespectingLive(player: PlayerAPI): TimeRange {\n    if (!player.isLive()) {\n      return player.getSeekableRange();\n    }\n\n    const currentTimeshift = -player.getTimeShift();\n    const maxTimeshift = -player.getMaxTimeShift();\n    const currentTime = player.getCurrentTime();\n\n    const end = currentTime + (currentTimeshift);\n    const start = currentTime - (maxTimeshift - currentTimeshift);\n\n    return { start, end };\n  }\n\n  export interface TimeShiftAvailabilityChangedArgs extends NoArgs {\n    timeShiftAvailable: boolean;\n  }\n\n  export class TimeShiftAvailabilityDetector {\n\n    private player: PlayerAPI;\n    private timeShiftAvailable: boolean;\n    private timeShiftAvailabilityChangedEvent = new EventDispatcher<PlayerAPI, TimeShiftAvailabilityChangedArgs>();\n\n    constructor(player: PlayerAPI) {\n      this.player = player;\n      this.timeShiftAvailable = undefined;\n\n      let timeShiftDetector = () => {\n        this.detect();\n      };\n      // Try to detect timeshift availability when source is loaded, which works for DASH streams\n      player.on(player.exports.PlayerEvent.SourceLoaded, timeShiftDetector);\n      // With HLS/NativePlayer streams, getMaxTimeShift can be 0 before the buffer fills, so we need to additionally\n      // check timeshift availability in TimeChanged\n      player.on(player.exports.PlayerEvent.TimeChanged, timeShiftDetector);\n    }\n\n    detect(): void {\n      if (this.player.isLive()) {\n        let timeShiftAvailableNow = PlayerUtils.isTimeShiftAvailable(this.player);\n\n        // When the availability changes, we fire the event\n        if (timeShiftAvailableNow !== this.timeShiftAvailable) {\n          this.timeShiftAvailabilityChangedEvent.dispatch(this.player, { timeShiftAvailable: timeShiftAvailableNow });\n          this.timeShiftAvailable = timeShiftAvailableNow;\n        }\n      }\n    }\n\n    get onTimeShiftAvailabilityChanged(): Event<PlayerAPI, TimeShiftAvailabilityChangedArgs> {\n      return this.timeShiftAvailabilityChangedEvent.getEvent();\n    }\n  }\n\n  export interface LiveStreamDetectorEventArgs extends NoArgs {\n    live: boolean;\n  }\n\n  /**\n   * Detects changes of the stream type, i.e. changes of the return value of the player#isLive method.\n   * Normally, a stream cannot change its type during playback, it's either VOD or live. Due to bugs on some\n   * platforms or browsers, it can still change. It is therefore unreliable to just check #isLive and this detector\n   * should be used as a workaround instead.\n   *\n   * Additionally starting with player v8.19.0 we have the use-case that a live stream changes into a vod.\n   * The DurationChanged event indicates this switch.\n   *\n   * Known cases:\n   *\n   * - HLS VOD on Android 4.3\n   * Video duration is initially 'Infinity' and only gets available after playback starts, so streams are wrongly\n   * reported as 'live' before playback (the live-check in the player checks for infinite duration).\n   *\n   * @deprecated since UI v3.9.0 in combination with player v8.19.0 use PlayerEvent.DurationChanged instead\n   *\n   * TODO: remove this class in next major release\n   */\n  export class LiveStreamDetector {\n\n    private player: PlayerAPI;\n    private live: boolean;\n    private liveChangedEvent = new EventDispatcher<PlayerAPI, LiveStreamDetectorEventArgs>();\n    private uimanager: UIInstanceManager;\n\n    constructor(player: PlayerAPI, uimanager: UIInstanceManager) {\n      this.player = player;\n      this.uimanager = uimanager;\n      this.live = undefined;\n\n      let liveDetector = () => {\n        this.detect();\n      };\n      this.uimanager.getConfig().events.onUpdated.subscribe(liveDetector);\n      // Re-evaluate when playback starts\n      player.on(player.exports.PlayerEvent.Play, liveDetector);\n\n      // HLS live detection workaround for Android:\n      // Also re-evaluate during playback, because that is when the live flag might change.\n      // (Doing it only in Android Chrome saves unnecessary overhead on other platforms)\n      if (BrowserUtils.isAndroid && BrowserUtils.isChrome) {\n        player.on(player.exports.PlayerEvent.TimeChanged, liveDetector);\n      }\n\n      // DurationChanged event was introduced with player v8.19.0\n      if (player.exports.PlayerEvent.DurationChanged) {\n        player.on(player.exports.PlayerEvent.DurationChanged, liveDetector);\n      }\n\n      // Ad video's isLive() might be different than the actual video's isLive().\n      player.on(player.exports.PlayerEvent.AdBreakStarted, liveDetector);\n      player.on(player.exports.PlayerEvent.AdBreakFinished, liveDetector);\n    }\n\n    detect(): void {\n      let liveNow = this.player.isLive();\n\n      // Compare current to previous live state flag and fire event when it changes. Since we initialize the flag\n      // with undefined, there is always at least an initial event fired that tells listeners the live state.\n      if (liveNow !== this.live) {\n        this.liveChangedEvent.dispatch(this.player, { live: liveNow });\n        this.live = liveNow;\n      }\n    }\n\n    get onLiveChanged(): Event<PlayerAPI, LiveStreamDetectorEventArgs> {\n      return this.liveChangedEvent.getEvent();\n    }\n  }\n}\n","import { NavigationGroup } from './navigationgroup';\nimport { Action, Direction } from './types';\nimport { Container } from '../components/container';\nimport { Component } from '../components/component';\n\nexport enum ListOrientation {\n  Horizontal = 'horizontal',\n  Vertical = 'vertical',\n}\n\nexport class ListNavigationGroup extends NavigationGroup {\n  private readonly listNavigationDirections: Direction[];\n\n  constructor(orientation: ListOrientation, container: Container<unknown>, ...components: Component<unknown>[]) {\n    super(container, ...components);\n\n    switch (orientation) {\n      case ListOrientation.Vertical:\n        this.listNavigationDirections = [Direction.UP, Direction.DOWN];\n        break;\n\n      case ListOrientation.Horizontal:\n        this.listNavigationDirections = [Direction.LEFT, Direction.RIGHT];\n        break;\n    }\n  }\n\n  public handleAction(action: Action): void {\n    super.handleAction(action);\n\n    if (action === Action.SELECT) {\n      // close the container when a list entry is selected\n      this.handleAction(Action.BACK);\n    }\n  }\n\n  public handleNavigation(direction: Direction): void {\n    super.handleNavigation(direction);\n\n    if (!this.listNavigationDirections.includes(direction)) {\n      // close the container on navigation inputs that don't align\n      // with the orientation of the list\n      this.handleAction(Action.BACK);\n    }\n  }\n}\n","import { Component } from '../components/component';\nimport { Container } from '../components/container';\nimport { isComponent, isContainer, isListBox } from './typeguards';\n\n/**\n * Recursively resolves a container and the components contained within them, building a flat list of components.\n *\n * @param container The container to get the contained components from\n */\nfunction resolveAllComponents(container: Container<unknown>): Component<unknown>[] {\n  const childComponents: Component<unknown>[] = [];\n\n  container.getComponents().forEach(containerOrComponent => {\n    if (isContainer(containerOrComponent)) {\n      childComponents.push(...resolveAllComponents(containerOrComponent));\n    } else if (isComponent(containerOrComponent)) {\n      childComponents.push(containerOrComponent);\n    }\n  });\n\n  return childComponents;\n}\n\n/**\n * Returns the HTML elements associated to the provided component.\n *\n * @param component The component to get the HTML elements from\n */\nfunction toHtmlElement(component: Component<unknown>): HTMLElement[] {\n  if (isListBox(component)) {\n    return [].slice.call(component.getDomElement().get()[0].children);\n  } else {\n    return component.getDomElement().get().slice(0, 1);\n  }\n}\n\n/**\n * Takes the provided list of components and flat-maps them to a list of their respective HTML elements. In case a\n * provided component is a container, the children of that container will be resolved recursively. Ignores components\n * that are hidden.\n *\n * @param components The components to map to HTML elements\n */\nexport function getHtmlElementsFromComponents(components: Component<unknown>[]): HTMLElement[] {\n  const htmlElements: HTMLElement[] = [];\n\n  components\n    .filter(component => !component.isHidden())\n    .forEach(component => {\n      const elementsToConsider = component instanceof Container ? resolveAllComponents(component) : [component];\n\n      elementsToConsider.forEach(component => {\n        htmlElements.push(...toHtmlElement(component));\n      });\n    });\n\n  return htmlElements;\n}\n","import { Action, Direction, KeyMap } from './types';\nimport { BrowserUtils } from '../browserutils';\n\nconst TizenKeyMap = {\n  isApplicable: () => BrowserUtils.isTizen,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // D-pad OK\n    13: Action.SELECT,\n    // Back\n    10009: Action.BACK,\n  },\n};\n\nconst WebOsKeyMap = {\n  isApplicable: () => BrowserUtils.isWebOs,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // D-pad OK\n    13: Action.SELECT,\n    // Back\n    461: Action.BACK,\n  },\n};\n\nconst PlayStationKeyMap = {\n  isApplicable: () => BrowserUtils.isPlayStation,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // Cross\n    13: Action.SELECT,\n    // Circle\n    27: Action.BACK,\n  },\n};\n\nconst AndroidKeyMap = {\n  isApplicable: () => BrowserUtils.isAndroid,\n  keyCodes: {\n    // D-pad Up\n    19: Direction.UP,\n    // D-pad Down\n    20: Direction.DOWN,\n    // D-pad Left\n    21: Direction.LEFT,\n    // D-pad Right\n    22: Direction.RIGHT,\n    // D-pad Center\n    23: Action.SELECT,\n    // Enter\n    66: Action.SELECT,\n    // Back\n    4: Action.BACK,\n  },\n};\n\nconst HisenseKeyMap = {\n  isApplicable: () => BrowserUtils.isHisense,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // OK\n    13: Action.SELECT,\n    // Back\n    8: Action.BACK,\n  },\n};\n\n// Default key map used on desktops\nconst DefaultKeyMap = {\n  // Arrow Up\n  38: Direction.UP,\n  // Arrow Down\n  40: Direction.DOWN,\n  // Arrow Left\n  37: Direction.LEFT,\n  // Arrow Right\n  39: Direction.RIGHT,\n  // Enter\n  13: Action.SELECT,\n  // Escape\n  27: Action.BACK,\n};\n\n/**\n * Returns the matching key map for the current platform.\n */\nexport function getKeyMapForPlatform(): KeyMap {\n  const applicableKeyMap = [\n    WebOsKeyMap,\n    TizenKeyMap,\n    PlayStationKeyMap,\n    HisenseKeyMap,\n    AndroidKeyMap,\n  ].find(keyMap => keyMap.isApplicable());\n\n  if (applicableKeyMap) {\n    return applicableKeyMap.keyCodes;\n  } else {\n    return DefaultKeyMap;\n  }\n}\n","import { Direction } from './types';\n\ninterface Vector {\n  x: number;\n  y: number;\n}\n\n/**\n * Calculates the length of a vector.\n *\n * @param vector The vector to calculate the length of\n */\nfunction length(vector: Vector): number {\n  return Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));\n}\n\n/**\n * Normalizes the given vector.\n *\n * @param vector The vector to normalize\n */\nfunction normalize(vector: Vector): Vector {\n  const len = length(vector);\n\n  return {\n    x: vector.x / len,\n    y: vector.y / len,\n  };\n}\n\n/**\n * Calculates the dot product between 2 vectors.\n *\n * @param a The first vector\n * @param b The second vector\n */\nfunction dotProduct(a: Vector, b: Vector): number {\n  return a.x * b.x + a.y * b.y;\n}\n\n/**\n * Calculates the distance between the 2 points pointed to by the provided vectors.\n *\n * @param a The first vector\n * @param b The second vector\n */\nfunction distance(a: Vector, b: Vector): number {\n  return length({\n    x: b.x - a.x,\n    y: b.y - a.y,\n  });\n}\n\n/**\n * Returns a vector that corresponds to the center of the provided element.\n *\n * @param element The element to get the center of\n */\nfunction getElementVector(element: HTMLElement): Vector {\n  const boundingRect = getBoundingRectFromElement(element);\n\n  return {\n    x: boundingRect.x + boundingRect.width / 2,\n    y: boundingRect.y + boundingRect.height / 2,\n  };\n}\n\n/**\n * Returns the angle in degrees between the unit vector pointing in the given {Direction} and the unit vector that\n * points from the current element to another element.\n *\n * @param a The vector of the current element\n * @param b The vector of the other element\n * @param direction The direction to move along\n */\nfunction calculateAngle(a: Vector, b: Vector, direction: Direction): number {\n  const directionVector = {\n    x: (direction === Direction.LEFT ? -1 : direction === Direction.RIGHT ? 1 : 0),\n    y: (direction === Direction.UP ? -1 : direction === Direction.DOWN ? 1 : 0),\n  };\n\n  const elementVector = normalize({\n    x: b.x - a.x,\n    y: b.y - a.y,\n  });\n\n  const angleCos = dotProduct(directionVector, elementVector) / (length(directionVector) * length(elementVector));\n\n  return Math.acos(angleCos) * 180 / Math.PI;\n}\n\n/**\n * Returns the closest element to the current element when trying to navigate in the provided direction. Returns\n * undefined, if there is not element in the given direction.\n *\n * @param activeElement The currently selected element\n * @param elements The list of all elements that can be navigated to\n * @param direction The direction in which to navigate\n */\nexport function getElementInDirection(\n  activeElement: HTMLElement,\n  elements: HTMLElement[],\n  direction: Direction,\n): HTMLElement | undefined {\n  if (!activeElement) return undefined;\n\n  const cutoffAngle = 45;\n  const activeElemVector = getElementVector(activeElement);\n\n  return elements\n    // don't take the current element into account\n    .filter(elem => elem !== activeElement)\n    // get the angle between, and distance to any other element from the current element\n    .map(element => {\n      const elementVector = getElementVector(element);\n      const dist = distance(activeElemVector, elementVector);\n      const angle = calculateAngle(activeElemVector, elementVector, direction);\n\n      return { angle, dist, element };\n    })\n    // filter out any elements that don't align with the direction we're trying to move in\n    .filter(({ angle }) => angle <= cutoffAngle)\n    // sort the resulting elements based on their distance to the current element in ascending order\n    .sort(({ angle: angleA, dist: distA }, { angle: angleB, dist: distB }) => (angleA - angleB) + (distA - distB))\n    // return the element closest to the current element\n    .shift()?.element;\n}\n\n/**\n * Returns DOMRect like object containing horizontal X and vertical Y coordinates from and HTMLElement.\n * Handles use-cases for getBoundingClientRect when the return type can be either\n * a ClientRect or DOMRect object type.\n *\n * @param element The currently selected element\n */\nexport function getBoundingRectFromElement(element: HTMLElement) {\n  const boundingRect = element.getBoundingClientRect();\n\n  if (typeof boundingRect.x !== 'number' && typeof boundingRect.y !== 'number') {\n    boundingRect.x = boundingRect.left;\n    boundingRect.y = boundingRect.top;\n  }\n\n  return boundingRect;\n}\n\n","import { Container } from '../components/container';\nimport { Component } from '../components/component';\nimport { getElementInDirection } from './navigationalgorithm';\nimport { getHtmlElementsFromComponents } from './gethtmlelementsfromcomponents';\nimport { NodeEventSubscriber } from './nodeeventsubscriber';\nimport { isSettingsPanel } from './typeguards';\nimport { Action, ActionCallback, Callback, Direction, NavigationCallback } from './types';\n\n/**\n * Used as part of spatial navigation. Groups together different components to which you can navigate to, in a single\n * navigation group.\n *\n * Responsible for finding elements in direction on navigation and for tracking active element inside the group.\n * Triggers blur and focus on element when active element is changed, as well as click on element on `Action.SELECT`.\n * Will call `hideUi()` on passed in container if `Action.BACK` is called.\n */\nexport class NavigationGroup {\n  private activeElement?: HTMLElement;\n  private activeElementBeforeDisable?: HTMLElement;\n  private readonly components: Component<unknown>[];\n  private removeElementHoverEventListeners = () => {};\n  private readonly eventSubscriber: NodeEventSubscriber;\n\n  constructor(public readonly container: Container<unknown>, ...components: Component<unknown>[]) {\n    this.components = components;\n    this.eventSubscriber = new NodeEventSubscriber();\n  }\n\n  /**\n   * If overwritten, allows to implement custom navigation behavior. Per default, the internal handler will still be\n   * executed. To prevent execution of the default navigation handler, call `preventDefault()`;\n   *\n   * @param direction {Direction} The direction to move along\n   * @param target {HTMLElement} The target element for the event\n   * @param preventDefault {() => void} A function that, when called, will prevent the execution of the default handler\n   */\n  public onNavigation?: NavigationCallback;\n\n  /**\n   * If overwritten, allows to implement custom action behavior. Per default, the internal handler will still be\n   * executed. To prevent execution of the default action handler, call `preventDefault()`;\n   *\n   * @param action {Action} The action that was called\n   * @param target {HTMLElement} The target element that action was called on\n   * @param preventDefault {() => void} A function that, when called, will prevent the execution of the default handler\n   */\n  public onAction?: ActionCallback;\n\n  /**\n   * Returns the active HTMLElement.\n   */\n  public getActiveElement(): HTMLElement | undefined {\n    return this.activeElement;\n  }\n\n  private focusElement(element: HTMLElement): void {\n    this.blurActiveElement();\n    this.activeElement = element;\n    this.activeElement.focus();\n  }\n\n  private blurActiveElement(): void {\n    this.activeElement?.blur();\n  }\n\n  private focusFirstElement(): void {\n    const element = getHtmlElementsFromComponents(this.components)[0];\n    if (element) {\n      this.focusElement(element);\n    }\n  }\n\n  protected defaultNavigationHandler(direction: Direction): void {\n    const targetElement = getElementInDirection(\n      this.activeElement,\n      getHtmlElementsFromComponents(this.components),\n      direction,\n    );\n\n    if (targetElement) {\n      this.focusElement(targetElement);\n    }\n  }\n\n  protected defaultActionHandler(action: Action): void {\n    switch (action) {\n      case(Action.SELECT):\n        this.activeElement.click();\n        break;\n      case(Action.BACK):\n        this.container.hide();\n        break;\n    }\n  }\n\n  private handleInput<T>(data: T, defaultHandler: (data: T) => void, userHandler?: Callback<T>): void {\n    let handleDefault = true;\n    const preventDefault = () => (handleDefault = false);\n\n    userHandler?.(data, this.activeElement, preventDefault);\n\n    if (handleDefault) {\n      defaultHandler.call(this, data);\n    }\n  }\n\n  /**\n   * Handles a navigation event.\n   *\n   * @param direction The direction of the navigation event\n   */\n  public handleNavigation(direction: Direction): void {\n    if (!this.activeElement) {\n      // If we do not have an active element, the active element has been disabled by a mouseleave\n      // event. We should continue the navigation at the exact place where we left off.\n      if (this.activeElementBeforeDisable) {\n        this.focusElement(this.activeElementBeforeDisable);\n      } else {\n        this.focusFirstElement();\n      }\n      return;\n    }\n    this.handleInput(direction, this.defaultNavigationHandler, this.onNavigation);\n  }\n\n  /**\n   * Handles an action event.\n   *\n   * @param action The action of the event\n   */\n  public handleAction(action: Action): void {\n    this.handleInput(action, this.defaultActionHandler, this.onAction);\n  }\n\n  /**\n   * Disable navigation group\n   *\n   * Call blur on active element, set as undefined, and track it as element before disable.\n   */\n  public disable(): void {\n    if (this.activeElement) {\n      this.activeElementBeforeDisable = this.activeElement;\n      this.blurActiveElement();\n      this.activeElement = undefined;\n    }\n  }\n\n  /**\n   * Enable navigation group\n   *\n   * Sets active element to either element that was active before disable, or first element of tracked elements.\n   * If it is settings panel, it will always focus first element in the list.\n   */\n  public enable(): void {\n    if (this.activeElementBeforeDisable && !isSettingsPanel(this.container)) {\n      this.focusElement(this.activeElementBeforeDisable);\n      this.activeElementBeforeDisable = undefined;\n    } else {\n      this.focusFirstElement();\n    }\n\n    this.trackElementHover();\n  }\n\n  /**\n   * Adds event listener for `mouseenter` on tracked elements to ensure tracking of active element will work together\n   * in combination of using mouse and key events.\n   */\n  private trackElementHover(): void {\n    this.removeElementHoverEventListeners();\n\n    const removeEventListenerFunctions = getHtmlElementsFromComponents(this.components).map(htmlElem => {\n      const enterListener = this.focusElement.bind(this, htmlElem);\n      const exitListener = () => this.disable();\n\n      this.eventSubscriber.on(htmlElem, 'mouseenter', enterListener);\n      this.eventSubscriber.on(htmlElem, 'mouseleave', exitListener);\n\n      return () => {\n        this.eventSubscriber.off(htmlElem, 'mouseenter', enterListener);\n        this.eventSubscriber.off(htmlElem, 'mouseleave', exitListener);\n      };\n    });\n\n    this.removeElementHoverEventListeners = () => removeEventListenerFunctions.forEach(fn => fn());\n  }\n\n  /**\n   * Dispose of navigation group\n   */\n  public release(): void {\n    this.eventSubscriber.release();\n    this.activeElement = undefined;\n    this.components.splice(0, this.components.length);\n    this.removeElementHoverEventListeners();\n  }\n}\n","type Listeners = ([Node, EventListenerOrEventListenerObject, boolean | AddEventListenerOptions])[];\n\n/**\n * Allows to subscribe to Node events.\n */\nexport class NodeEventSubscriber {\n  private readonly attachedListeners: Map<keyof HTMLElementEventMap, Listeners>;\n\n  constructor() {\n    this.attachedListeners = new Map();\n  }\n\n  private getEventListenersOfType(type: keyof HTMLElementEventMap): Listeners {\n    if (!this.attachedListeners.has(type)) {\n      this.attachedListeners.set(type, []);\n    }\n\n    return this.attachedListeners.get(type);\n  }\n\n  /**\n   * Adds the given event listener to the node.\n   *\n   * @param node The node to remove the event listener from\n   * @param type The event to listen to\n   * @param listener The listener to remove\n   * @param options The event listener options\n   */\n  public on(\n    node: Node,\n    type: keyof HTMLElementEventMap,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void {\n    node.addEventListener(type, listener, options);\n    this.getEventListenersOfType(type).push([node, listener, options]);\n  }\n\n  /**\n   * Removes the given event listener from the node.\n   *\n   * @param node The node to attach the event listener to\n   * @param type The event to listen to\n   * @param listener The listener to add\n   * @param options The event listener options\n   */\n  public off(\n    node: Node,\n    type: keyof HTMLElementEventMap,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void {\n    const listenersOfType = this.getEventListenersOfType(type);\n    const listenerIndex = listenersOfType.findIndex(([otherNode, otherListener, otherOptions]) => {\n      return otherNode === node && otherListener === listener && otherOptions === options;\n    });\n\n    node.removeEventListener(type, listener, options);\n\n    if (listenerIndex > -1) {\n      listenersOfType.splice(listenerIndex, 1);\n    }\n  }\n\n  /**\n   * Removes all attached event listeners.\n   */\n  public release(): void {\n    this.attachedListeners.forEach((listenersOfType, type) => {\n      listenersOfType.forEach(([element, listener, options]) => {\n        this.off(element, type, listener, options);\n      });\n    });\n    this.attachedListeners.clear();\n  }\n}\n","import { NavigationGroup } from './navigationgroup';\nimport { Component } from '../components/component';\nimport { UIContainer } from '../components/uicontainer';\nimport { Action, Direction } from './types';\n\n/**\n * Extends NavigationGroup and provides additional logic for hiding and showing the UI on the root container.\n */\nexport class RootNavigationGroup extends NavigationGroup {\n  constructor(public readonly container: UIContainer, ...elements: Component<unknown>[]) {\n    super(container, ...elements);\n  }\n\n  public handleAction(action: Action) {\n    this.container.showUi();\n\n    super.handleAction(action);\n  }\n\n  public handleNavigation(direction: Direction) {\n    this.container.showUi();\n\n    super.handleNavigation(direction);\n  }\n\n  protected defaultActionHandler(action: Action): void {\n    if (action === Action.BACK) {\n      this.container.hideUi();\n    } else {\n      super.defaultActionHandler(action);\n    }\n  }\n\n  public release(): void {\n    super.release();\n  }\n}\n","import { RootNavigationGroup } from './rootnavigationgroup';\nimport { NodeEventSubscriber } from './nodeeventsubscriber';\nimport { Action, Direction } from './types';\nimport {getBoundingRectFromElement} from './navigationalgorithm';\n\nconst DefaultScrubSpeedPercentage = 0.005;\nconst ScrubSpeedClearInterval = 100;\nconst ScrubSpeedMultiplier = 1.1;\n\n/**\n * Handles Spatial Navigation interaction with the seek bar. Ensures, that seek operations can be executed and that the\n * scrubbing tooltip is shown as if the user scrubbed using the mouse/touchscreen.\n */\nexport class SeekBarHandler {\n  private readonly cursorPosition = { x: 0, y: 0};\n  private readonly eventSubscriber: NodeEventSubscriber;\n  private isScrubbing = false;\n  private scrubSpeedResetTimeout: number;\n  private scrubSpeedPercentage = DefaultScrubSpeedPercentage;\n\n  constructor(private readonly rootNavigationGroup: RootNavigationGroup) {\n    this.rootNavigationGroup.onAction = this.onAction;\n    this.eventSubscriber = new NodeEventSubscriber();\n    this.rootNavigationGroup.onNavigation = this.onNavigation;\n  }\n\n  private updateScrubSpeedPercentage(): void {\n    clearTimeout(this.scrubSpeedResetTimeout);\n    this.scrubSpeedPercentage *= ScrubSpeedMultiplier;\n    this.scrubSpeedResetTimeout = window.setTimeout(\n      () => this.scrubSpeedPercentage = DefaultScrubSpeedPercentage, ScrubSpeedClearInterval,\n    );\n  }\n\n  private getIncrement(direction: Direction, seekBarWrapper: HTMLElement): number {\n    this.updateScrubSpeedPercentage();\n\n    const seekBarWidth = seekBarWrapper.getBoundingClientRect().width;\n    const increment = seekBarWidth * this.scrubSpeedPercentage;\n\n    return direction === Direction.RIGHT ? increment : -increment;\n  }\n\n  private resetCursorPosition(): void {\n    this.cursorPosition.x = 0;\n    this.cursorPosition.y = 0;\n  }\n\n  private updateCursorPosition(direction: Direction, seekBarWrapper: HTMLElement): void {\n    this.cursorPosition.x += this.getIncrement(direction, seekBarWrapper);\n  }\n\n  private initializeCursorPosition(seekBarWrapper: HTMLElement): void {\n    const playbackPositionMarker = getPlaybackPositionMarker(seekBarWrapper);\n    const rect = getBoundingRectFromElement(playbackPositionMarker);\n\n\n    const startX = rect.x + (rect.width / 2);\n    const startY = rect.y;\n\n    this.cursorPosition.x = startX;\n    this.cursorPosition.y = startY;\n  }\n\n  private initializeOrUpdateCursorPosition(seekBarWrapper: HTMLElement, direction: Direction): void {\n    if (this.isScrubbing) {\n      this.updateCursorPosition(direction, seekBarWrapper);\n    } else {\n      this.initializeCursorPosition(seekBarWrapper);\n    }\n\n    this.isScrubbing = true;\n  }\n\n  private getCursorPositionMouseEventInit(): MouseEventInit {\n    return {\n      clientX: this.cursorPosition.x,\n      clientY: this.cursorPosition.y,\n    };\n  }\n\n  private dispatchMouseMoveEvent(seekBar: Element): void {\n    seekBar.dispatchEvent(new MouseEvent('mousemove', this.getCursorPositionMouseEventInit()));\n  }\n\n  private readonly onNavigation = (direction: Direction, target: HTMLElement, preventDefault: () => void): void => {\n    if (!isSeekBarWrapper(target)) {\n      return;\n    }\n\n    if (direction === Direction.UP || direction === Direction.DOWN) {\n      this.stopSeeking(getSeekBar(target));\n\n      return;\n    }\n\n    this.initializeOrUpdateCursorPosition(target, direction);\n    this.dispatchMouseMoveEvent(getSeekBar(target));\n\n    preventDefault();\n  };\n\n  private dispatchMouseClickEvent(seekBar: Element): void {\n    const mouseDownHandler = () => {\n      const mouseEventInit = this.getCursorPositionMouseEventInit();\n\n      document.dispatchEvent(new MouseEvent('mouseup', mouseEventInit));\n      this.eventSubscriber.off(seekBar, 'mousedown', mouseDownHandler);\n      this.stopSeeking(seekBar);\n    };\n\n    this.eventSubscriber.on(seekBar, 'mousedown', mouseDownHandler);\n    seekBar.dispatchEvent(new MouseEvent('mousedown'));\n  }\n\n  private stopSeeking(seekBar: Element): void {\n    this.resetCursorPosition();\n    this.isScrubbing = false;\n    this.dispatchMouseLeaveEvent(seekBar);\n  }\n\n  private dispatchMouseLeaveEvent(seekBar: Element): void {\n    seekBar.dispatchEvent(new MouseEvent('mouseleave'));\n  }\n\n  private readonly onAction = (action: Action, target: HTMLElement, preventDefault: () => void): void => {\n    if (!isSeekBarWrapper(target)) {\n      return;\n    }\n\n    const seekBar = getSeekBar(target);\n\n    if (action === Action.SELECT && this.isScrubbing) {\n      this.dispatchMouseClickEvent(seekBar);\n      preventDefault();\n    } else if (action === Action.BACK) {\n      this.stopSeeking(seekBar);\n      preventDefault();\n    }\n  };\n\n  /**\n   * Releases the SeekBraHandler, making sure all event subscribers are removed.\n   */\n  public release(): void {\n    this.eventSubscriber.release();\n    this.rootNavigationGroup.onAction = undefined;\n    this.rootNavigationGroup.onNavigation = undefined;\n  }\n}\n\nfunction isSeekBarWrapper(element: HTMLElement): boolean {\n  return Array.from(element.classList).findIndex(className => /-ui-seekbar$/.test(className)) > -1;\n}\n\nfunction getSeekBar(seekBarWrapper: HTMLElement): Element {\n  return seekBarWrapper.children.item(0);\n}\n\nfunction getPlaybackPositionMarker(seekBarWrapper: HTMLElement): HTMLElement {\n  return seekBarWrapper.querySelector('[class*=\"seekbar-playbackposition-marker\"]');\n}\n","import { NavigationGroup } from './navigationgroup';\nimport { RootNavigationGroup } from './rootnavigationgroup';\nimport { NodeEventSubscriber } from './nodeeventsubscriber';\nimport { SeekBarHandler } from './seekbarhandler';\nimport { getKeyMapForPlatform } from './keymap';\nimport { Action, Direction, KeyMap } from './types';\nimport { isAction, isDirection } from './typeguards';\n\n/**\n * SpatialNavigation keeps track of all navigation groups, and updates the active navigation group when visibility\n * changes on group container.\n *\n * It listens to key events, and triggers either handleNavigation or handleAction on the active group.\n * SeekBarHandler will get instantiated with root navigation group and disposed on release of the spatial navigation.\n */\nexport class SpatialNavigation {\n  private unsubscribeVisibilityChangesFns: (() => void)[];\n  private readonly navigationGroups: NavigationGroup[] = [];\n  private readonly activeNavigationGroups: NavigationGroup[];\n  private readonly eventSubscriber: NodeEventSubscriber;\n  private readonly seekBarHandler: SeekBarHandler;\n  private readonly keyMap: KeyMap;\n\n  constructor(rootNavigationGroup: RootNavigationGroup, ...navigationGroups: NavigationGroup[]) {\n    this.seekBarHandler = new SeekBarHandler(rootNavigationGroup);\n\n    this.activeNavigationGroups = [];\n    this.unsubscribeVisibilityChangesFns = [];\n    this.eventSubscriber = new NodeEventSubscriber();\n    this.navigationGroups = [rootNavigationGroup, ...navigationGroups];\n    this.keyMap = getKeyMapForPlatform();\n\n    this.subscribeToNavigationGroupVisibilityChanges();\n    this.attachKeyEventHandler();\n    this.enableDefaultNavigationGroup();\n  }\n\n  private attachKeyEventHandler(): void {\n    this.eventSubscriber.on(document, 'keydown', this.handleKeyEvent, true);\n  }\n\n  private onShow = (group: NavigationGroup): void => {\n    this.activeNavigationGroups.push(group);\n    this.updateEnabledNavigationGroup();\n  };\n\n  private onHide = (group: NavigationGroup): void => {\n    const groupIndex = this.activeNavigationGroups.findIndex(other => other === group);\n\n    if (groupIndex > -1) {\n      group.disable();\n      this.activeNavigationGroups.splice(groupIndex, 1);\n      this.updateEnabledNavigationGroup();\n    }\n  };\n\n  /**\n   * Subscribes to onHide and onShow on all navigation groups containers as Spatial navigation tracks active navigation\n   * group based on their container visibility.\n   */\n  private subscribeToNavigationGroupVisibilityChanges(): void {\n    this.navigationGroups.forEach(group => {\n      const onShowHandler = () => this.onShow(group);\n      const onHideHandler = () => this.onHide(group);\n\n      group.container.onShow.subscribe(onShowHandler);\n      group.container.onHide.subscribe(onHideHandler);\n\n      this.unsubscribeVisibilityChangesFns.push(\n        () => group.container.onShow.unsubscribe(onShowHandler),\n        () => group.container.onHide.unsubscribe(onHideHandler),\n      );\n    });\n  }\n\n  private unsubscribeFromNavigationGroupVisibilityChanges(): void {\n    this.unsubscribeVisibilityChangesFns.forEach(unsub => unsub());\n    this.unsubscribeVisibilityChangesFns = [];\n  }\n\n  /**\n   * It will enable group of which container is currently shown\n   * If there are no groups with containers that are currently visible, it will enable root navigation group\n   */\n  private enableDefaultNavigationGroup(): void {\n    const isShown = (group: NavigationGroup) => group.container.isShown();\n    const groupToEnable = this.navigationGroups.find(isShown) ?? this.navigationGroups[0];\n\n    if (groupToEnable) {\n      this.activeNavigationGroups.push(groupToEnable);\n      this.updateEnabledNavigationGroup();\n    }\n  }\n\n  /**\n   * Disables navigation groups that are no longer active and calls enable on last pushed navigation group\n   */\n  private updateEnabledNavigationGroup(): void {\n    this.activeNavigationGroups.forEach((group, idx) => {\n      if (idx < this.activeNavigationGroups.length - 1) {\n        group.disable();\n      } else {\n        group.enable();\n      }\n    });\n  }\n\n  /**\n   * Returns currently active navigation group\n   */\n  public getActiveNavigationGroup(): NavigationGroup | undefined {\n    return this.activeNavigationGroups[this.activeNavigationGroups.length - 1];\n  }\n\n  /**\n   * Checks if keyboard event keycode is tracked either as Direction or Action and calls appropriate handler on active\n   * navigation group\n   *\n   * @param e {KeyboardEvent}\n   */\n  private handleKeyEvent = (e: KeyboardEvent): void => {\n    const event: Direction | Action | undefined = this.keyMap[getKeyCode(e)];\n\n    const active = this.getActiveNavigationGroup();\n    if (!active || !active.container || active.container.isHidden() || active.container.isDisabled()) {\n      return;\n    }\n\n    if (isDirection(event)) {\n      active.handleNavigation(event);\n\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    if (isAction(event)) {\n      active.handleAction(event);\n\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  };\n\n  /**\n   * Dispose of SpatialNavigation\n   *\n   * Remove all event handlers, release seekbar handler and release all navigation groups.\n   */\n  public release(): void {\n    this.unsubscribeFromNavigationGroupVisibilityChanges();\n    this.eventSubscriber.release();\n    this.navigationGroups.forEach(group => group.release());\n    this.seekBarHandler.release();\n  }\n}\n\nfunction getKeyCode(event: KeyboardEvent): number {\n  return event.keyCode;\n}\n","import { Component } from '../components/component';\nimport { SettingsPanel } from '../components/settingspanel';\nimport { Container } from '../components/container';\nimport { ListBox } from '../components/listbox';\nimport { Action, Direction } from './types';\n\nexport function isSettingsPanel(component: Component<unknown>): component is SettingsPanel {\n  return component instanceof SettingsPanel;\n}\n\nexport function isComponent(obj: unknown): obj is Component<unknown> {\n  return obj !== null && obj !== undefined && obj instanceof Component;\n}\n\nexport function isContainer(obj: unknown): obj is Container<unknown> {\n  return obj !== null && obj !== undefined && obj instanceof Container;\n}\n\nexport function isListBox(obj: unknown): obj is ListBox {\n  return obj instanceof ListBox;\n}\n\nexport function isDirection(direction: unknown): direction is Direction {\n  return typeof direction === 'string' && Object.values<string>(Direction).includes(direction);\n}\n\nexport function isAction(action: unknown): action is Action {\n  return typeof action === 'string' && Object.values<string>(Action).includes(action);\n}\n","export type Callback<T> = (data: T, target: HTMLElement, preventDefault: () => void) => void;\nexport type NavigationCallback = Callback<Direction>;\nexport type ActionCallback = Callback<Action>;\nexport type KeyMap = {\n  [keyCode: number]: Action | Direction;\n};\n\nexport enum Direction {\n  UP = 'up',\n  DOWN = 'down',\n  LEFT = 'left',\n  RIGHT = 'right',\n}\n\nexport enum Action {\n  SELECT = 'select',\n  BACK = 'back',\n}\n","export namespace StorageUtils {\n  let hasLocalStorageCache: boolean;\n\n  export function hasLocalStorage(): boolean {\n    if (hasLocalStorageCache) {\n      return hasLocalStorageCache;\n    }\n\n    // hasLocalStorage is used to safely ensure we can use localStorage\n    // taken from https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage\n    let storage: any = { length: 0 };\n    try {\n      storage = window['localStorage'];\n      let x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      hasLocalStorageCache = true;\n    }\n    catch (e) {\n      hasLocalStorageCache = e instanceof DOMException && (\n          // everything except Firefox\n        e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === 'QuotaExceededError' ||\n        // Firefox\n        e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n        // acknowledge QuotaExceededError only if there's something already stored\n        storage.length !== 0;\n    }\n    return hasLocalStorageCache;\n  }\n\n  /**\n   * Stores a string item into localStorage.\n   * @param key the item's key\n   * @param data the item's data\n   */\n  export function setItem(key: string, data: string): void {\n    if (StorageUtils.hasLocalStorage()) {\n      window.localStorage.setItem(key, data);\n    }\n  }\n\n  /**\n   * Gets an item's string value from the localStorage.\n   * @param key the key to look up its associated value\n   * @return {string | null} Returns the string if found, null if there is no data stored for the key\n   */\n  export function getItem(key: string): string | null {\n    if (StorageUtils.hasLocalStorage()) {\n      return window.localStorage.getItem(key);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Stores an object into localStorage. The object will be serialized to JSON. The following types are supported\n   * in addition to the default types:\n   *  - ColorUtils.Color\n   *\n   * @param key the key to store the data to\n   * @param data the object to store\n   */\n  export function setObject<T>(key: string, data: T): void {\n    if (StorageUtils.hasLocalStorage()) {\n      let json = JSON.stringify(data);\n      setItem(key, json);\n    }\n  }\n\n  /**\n   * Gets an object for the given key from localStorage. The object will be deserialized from JSON. Beside the\n   * default types, the following types are supported:\n   *  - ColorUtils.Color\n   *\n   * @param key the key to look up its associated object\n   * @return {any} Returns the object if found, null otherwise\n   */\n  export function getObject<T>(key: string): T {\n    if (StorageUtils.hasLocalStorage()) {\n      let json = getItem(key);\n\n      if (key) {\n        let object = JSON.parse(json);\n        return <T>object;\n      }\n    }\n    return null;\n  }\n}\n","import { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\nexport namespace StringUtils {\n\n  export let FORMAT_HHMMSS: string = 'hh:mm:ss';\n  export let FORMAT_MMSS: string = 'mm:ss';\n\n  /**\n   * Formats a number of seconds into a time string with the pattern hh:mm:ss.\n   *\n   * @param totalSeconds the total number of seconds to format to string\n   * @param format the time format to output (default: hh:mm:ss)\n   * @returns {string} the formatted time string\n   */\n  export function secondsToTime(totalSeconds: number, format: string = FORMAT_HHMMSS): string {\n    let isNegative = totalSeconds < 0;\n\n    if (isNegative) {\n      // If the time is negative, we make it positive for the calculation below\n      // (else we'd get all negative numbers) and reattach the negative sign later.\n      totalSeconds = -totalSeconds;\n    }\n\n    // Split into separate time parts\n    let hours = Math.floor(totalSeconds / 3600);\n    let minutes = Math.floor(totalSeconds / 60) - hours * 60;\n    let seconds = Math.floor(totalSeconds) % 60;\n\n    return (isNegative ? '-' : '') + format\n        .replace('hh', leftPadWithZeros(hours, 2))\n        .replace('mm', leftPadWithZeros(minutes, 2))\n        .replace('ss', leftPadWithZeros(seconds, 2));\n  }\n\n  export function secondsToText(totalSeconds: number): string {\n    const isNegative = totalSeconds < 0;\n\n    if (isNegative) {\n      // If the time is negative, we make it positive for the calculation below\n      // (else we'd get all negative numbers) and reattach the negative sign later.\n      totalSeconds = -totalSeconds;\n    }\n\n    // Split into separate time parts\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor(totalSeconds / 60) - hours * 60;\n    const seconds = Math.floor(totalSeconds) % 60;\n\n    return (isNegative ? '-' : '') +\n    (hours !== 0 ? `${leftPadWithZeros(hours, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.hours'))} ` : '') +\n    (minutes !== 0 ? `${leftPadWithZeros(minutes, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.minutes'))} ` : '') +\n    `${leftPadWithZeros(seconds, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.seconds'))}`;\n  }\n\n  /**\n   * Converts a number to a string and left-pads it with zeros to the specified length.\n   * Example: leftPadWithZeros(123, 5) => '00123'\n   *\n   * @param num the number to convert to string and pad with zeros\n   * @param length the desired length of the padded string\n   * @returns {string} the padded number as string\n   */\n  function leftPadWithZeros(num: number | string, length: number): string {\n    let text = num + '';\n    let padding = '0000000000'.substr(0, length - text.length);\n    return padding + text;\n  }\n\n  /**\n   * Fills out placeholders in an ad message.\n   *\n   * Has the placeholders '{remainingTime[formatString]}', '{playedTime[formatString]}' and\n   * '{adDuration[formatString]}', which are replaced by the remaining time until the ad can be skipped, the current\n   * time or the ad duration. The format string is optional. If not specified, the placeholder is replaced by the time\n   * in seconds. If specified, it must be of the following format:\n   * - %d - Inserts the time as an integer.\n   * - %0Nd - Inserts the time as an integer with leading zeroes, if the length of the time string is smaller than N.\n   * - %f - Inserts the time as a float.\n   * - %0Nf - Inserts the time as a float with leading zeroes.\n   * - %.Mf - Inserts the time as a float with M decimal places. Can be combined with %0Nf, e.g. %04.2f (the time\n   * 10.123 would be printed as 0010.12).\n   * - %hh:mm:ss\n   * - %mm:ss\n   *\n   * Examples:\n   * - { text: 'Ad: {remainingTime%mm:ss} secs' }\n   * An input value of 100 would be displayed as: 'Ad: 01:40 secs'\n   * - { text: 'Ad: {remainingTime%f} secs' }\n   * An input value of 100 would be displayed as: 'Ad: 100.0 secs'\n   *\n   * @param adMessage an ad message with optional placeholders to fill\n   * @param skipOffset if specified, {remainingTime} will be filled with the remaining time until the ad can be skipped\n   * @param player the player to get the time data from\n   * @returns {string} the ad message with filled placeholders\n   */\n  export function replaceAdMessagePlaceholders(adMessage: string, skipOffset: number, player: PlayerAPI) {\n    let adMessagePlaceholderRegex = new RegExp(\n      '\\\\{(remainingTime|playedTime|adDuration)(}|%((0[1-9]\\\\d*(\\\\.\\\\d+(d|f)|d|f)|\\\\.\\\\d+f|d|f)|hh:mm:ss|mm:ss)})',\n      'g',\n    );\n\n    return adMessage.replace(adMessagePlaceholderRegex, (formatString) => {\n      let time = 0;\n      if (formatString.indexOf('remainingTime') > -1) {\n        if (skipOffset) {\n          time = Math.ceil(skipOffset - player.getCurrentTime());\n        } else {\n          time = player.getDuration() - player.getCurrentTime();\n        }\n      } else if (formatString.indexOf('playedTime') > -1) {\n        time = player.getCurrentTime();\n      } else if (formatString.indexOf('adDuration') > -1) {\n        time = player.getDuration();\n      }\n      return formatNumber(Math.round(time), formatString);\n    });\n  }\n\n  function formatNumber(time: number, format: string) {\n    let formatStringValidationRegex = /%((0[1-9]\\d*(\\.\\d+(d|f)|d|f)|\\.\\d+f|d|f)|hh:mm:ss|mm:ss)/;\n    let leadingZeroesRegex = /(%0[1-9]\\d*)(?=(\\.\\d+f|f|d))/;\n    let decimalPlacesRegex = /\\.\\d*(?=f)/;\n\n    if (!formatStringValidationRegex.test(format)) {\n      // If the format is invalid, we set a default fallback format\n      format = '%d';\n    }\n\n    // Determine the number of leading zeros\n    let leadingZeroes = 0;\n    let leadingZeroesMatches = format.match(leadingZeroesRegex);\n    if (leadingZeroesMatches) {\n      leadingZeroes = parseInt(leadingZeroesMatches[0].substring(2));\n    }\n\n    // Determine the number of decimal places\n    let numDecimalPlaces = null;\n    let decimalPlacesMatches = format.match(decimalPlacesRegex);\n    if (decimalPlacesMatches && !isNaN(parseInt(decimalPlacesMatches[0].substring(1)))) {\n      numDecimalPlaces = parseInt(decimalPlacesMatches[0].substring(1));\n      if (numDecimalPlaces > 20) {\n        numDecimalPlaces = 20;\n      }\n    }\n\n    // Float format\n    if (format.indexOf('f') > -1) {\n      let timeString = '';\n\n      if (numDecimalPlaces !== null) {\n        // Apply fixed number of decimal places\n        timeString = time.toFixed(numDecimalPlaces);\n      } else {\n        timeString = '' + time;\n      }\n\n      // Apply leading zeros\n      if (timeString.indexOf('.') > -1) {\n        return leftPadWithZeros(timeString, timeString.length + (leadingZeroes - timeString.indexOf('.')));\n      } else {\n        return leftPadWithZeros(timeString, leadingZeroes);\n      }\n\n    }\n    // Time format\n    else if (format.indexOf(':') > -1) {\n      let totalSeconds = Math.ceil(time);\n\n      // hh:mm:ss format\n      if (format.indexOf('hh') > -1) {\n        return secondsToTime(totalSeconds);\n      }\n      // mm:ss format\n      else {\n        let minutes = Math.floor(totalSeconds / 60);\n        let seconds = totalSeconds % 60;\n\n        return leftPadWithZeros(minutes, 2) + ':' + leftPadWithZeros(seconds, 2);\n      }\n    }\n    // Integer format\n    else {\n      return leftPadWithZeros(Math.ceil(time), leadingZeroes);\n    }\n  }\n}\n","import { ListItem, ListSelector, ListSelectorConfig } from './components/listselector';\nimport { UIInstanceManager } from './uimanager';\nimport { PlayerAPI, SubtitleEvent, SubtitleTrack } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\n/**\n * Helper class to handle all subtitle related events\n *\n * This class listens to player events as well as the `ListSelector` event if selection changed\n */\nexport class SubtitleSwitchHandler {\n\n  private static SUBTITLES_OFF_KEY: string = 'null';\n\n  private player: PlayerAPI;\n  private listElement: ListSelector<ListSelectorConfig>;\n  private uimanager: UIInstanceManager;\n\n  constructor(player: PlayerAPI, element: ListSelector<ListSelectorConfig>, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.listElement = element;\n    this.uimanager = uimanager;\n\n    this.bindSelectionEvent();\n    this.bindPlayerEvents();\n    this.refreshSubtitles();\n  }\n\n  private bindSelectionEvent(): void {\n    this.listElement.onItemSelected.subscribe((_, value: string) => {\n      // TODO add support for multiple concurrent subtitle selections\n      if (value === SubtitleSwitchHandler.SUBTITLES_OFF_KEY) {\n        const currentSubtitle = this.player.subtitles.list().filter((subtitle) => subtitle.enabled).pop();\n        if (currentSubtitle) {\n          this.player.subtitles.disable(currentSubtitle.id);\n        }\n      } else {\n        this.player.subtitles.enable(value, true);\n      }\n    });\n  }\n\n  private bindPlayerEvents(): void {\n    this.player.on(this.player.exports.PlayerEvent.SubtitleAdded, this.addSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleEnabled, this.selectCurrentSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleDisabled, this.selectCurrentSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleRemoved, this.removeSubtitle);\n    // Update subtitles when source goes away\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.clearSubtitles);\n    // Update subtitles when the period within a source changes\n    this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshSubtitles);\n    this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshSubtitles);\n  }\n\n  private addSubtitle = (event: SubtitleEvent) => {\n    const subtitle = event.subtitle;\n    if (!this.listElement.hasItem(subtitle.id)) {\n      this.listElement.addItem(subtitle.id, subtitle.label);\n    }\n  };\n\n  private removeSubtitle = (event: SubtitleEvent) => {\n    const subtitle = event.subtitle;\n    if (this.listElement.hasItem(subtitle.id)) {\n      this.listElement.removeItem(subtitle.id);\n    }\n  };\n\n  private selectCurrentSubtitle = () => {\n    if (!this.player.subtitles) {\n      // Subtitles API not available (yet)\n      return;\n    }\n\n    let currentSubtitle = this.player.subtitles.list().filter((subtitle) => subtitle.enabled).pop();\n    this.listElement.selectItem(currentSubtitle ? currentSubtitle.id : SubtitleSwitchHandler.SUBTITLES_OFF_KEY);\n  };\n\n  private clearSubtitles = () => {\n    this.listElement.clearItems();\n  }\n\n  private refreshSubtitles = () => {\n    if (!this.player.subtitles) {\n      // Subtitles API not available (yet)\n      return;\n    }\n\n    const offListItem: ListItem = {\n      key: SubtitleSwitchHandler.SUBTITLES_OFF_KEY,\n      label: i18n.getLocalizer('off'),\n    };\n\n    const subtitles = this.player.subtitles.list();\n    const subtitleToListItem = (subtitle: SubtitleTrack): ListItem => {\n      return { key: subtitle.id, label: subtitle.label };\n    };\n\n    this.listElement.synchronizeItems([\n      offListItem, ...subtitles.map(subtitleToListItem),\n    ]);\n    this.selectCurrentSubtitle();\n  };\n}\n","// TODO change to internal (not exported) class, how to use in other files?\n/**\n * Executes a callback after a specified amount of time, optionally repeatedly until stopped.\n */\nexport class Timeout {\n\n  private readonly delay: number;\n  private readonly callback: () => void;\n  private readonly repeat: boolean;\n  // There's two setTimeout declarations, one on Window which returns type \"number\" and one in NodeJS which returns\n  // type \"Timer\". For unknown reasons builds on Jenkins fail due to a type mismatch when we use type \"number\" here,\n  // although it works on other platforms (e.g. Windows, Codeship).\n  // To work around the issue we use type \"any\". The type does not matter anyway because we're not working with\n  // this value except providing it to clearTimeout.\n  private timeoutOrIntervalId: any;\n  private active: boolean;\n\n  /**\n   * Creates a new timeout callback handler.\n   * @param delay the delay in milliseconds after which the callback should be executed\n   * @param callback the callback to execute after the delay time\n   * @param repeat if true, call the callback repeatedly in delay intervals\n   */\n  constructor(delay: number, callback: () => void, repeat: boolean = false) {\n    this.delay = delay;\n    this.callback = callback;\n    this.repeat = repeat;\n    this.timeoutOrIntervalId = 0;\n    this.active = false;\n  }\n\n  /**\n   * Starts the timeout and calls the callback when the timeout delay has passed.\n   * @returns {Timeout} the current timeout (so the start call can be chained to the constructor)\n   */\n  start(): this {\n    this.reset();\n    return this;\n  }\n\n  /**\n   * Clears the timeout. The callback will not be called if clear is called during the timeout.\n   */\n  clear(): void {\n    this.clearInternal();\n  }\n\n  /**\n   * Resets the passed timeout delay to zero. Can be used to defer the calling of the callback.\n   */\n  reset(): void {\n    this.clearInternal();\n\n    if (this.repeat) {\n      this.timeoutOrIntervalId = setInterval(this.callback, this.delay);\n    } else {\n      this.timeoutOrIntervalId = setTimeout(() => {\n        this.active = false;\n        this.callback();\n      }, this.delay);\n    }\n    this.active = true;\n  }\n\n  isActive(): boolean {\n    return this.active;\n  }\n\n  private clearInternal(): void {\n    if (this.repeat) {\n      clearInterval(this.timeoutOrIntervalId);\n    } else {\n      clearTimeout(this.timeoutOrIntervalId);\n    }\n    this.active = false;\n  }\n}","import { GoBackButton } from './../custom/ts/components/gobackbutton';\nimport { ResetButton } from './../custom/ts/components/resetbutton';\nimport { RadioModeToggleButton } from './../custom/ts/components/radiomode/radiomodetogglebutton';\nimport { PlaybackJumpControlsOverlay } from '../custom/ts/components/playbackjumpoverlay';\nimport { SubtitleOverlay } from './components/subtitleoverlay';\nimport { SettingsPanelPage } from './components/settingspanelpage';\nimport { SettingsPanelItem } from './components/settingspanelitem';\nimport { VideoQualitySelectBox } from './components/videoqualityselectbox';\nimport { PlaybackSpeedSelectBox } from './components/playbackspeedselectbox';\nimport { AudioTrackSelectBox } from './components/audiotrackselectbox';\nimport { AudioQualitySelectBox } from './components/audioqualityselectbox';\nimport { SettingsPanel } from './components/settingspanel';\nimport { SubtitleSettingsPanelPage } from './components/subtitlesettings/subtitlesettingspanelpage';\nimport { SettingsPanelPageOpenButton } from './components/settingspanelpageopenbutton';\nimport { SubtitleSettingsLabel } from './components/subtitlesettings/subtitlesettingslabel';\nimport { SubtitleSelectBox } from './components/subtitleselectbox';\nimport { ControlBar } from './components/controlbar';\nimport { Container } from './components/container';\nimport {\n  PlaybackTimeLabel,\n  PlaybackTimeLabelMode,\n} from './components/playbacktimelabel';\nimport { SeekBar } from './components/seekbar';\nimport { SeekBarLabel } from './components/seekbarlabel';\nimport { PlaybackToggleButton } from './components/playbacktogglebutton';\nimport { VolumeToggleButton } from './components/volumetogglebutton';\nimport { VolumeSlider } from './components/volumeslider';\nimport { Spacer } from './components/spacer';\nimport { PictureInPictureToggleButton } from './components/pictureinpicturetogglebutton';\nimport { AirPlayToggleButton } from './components/airplaytogglebutton';\nimport { CastToggleButton } from './components/casttogglebutton';\nimport { VRToggleButton } from './components/vrtogglebutton';\nimport { SettingsToggleButton } from './components/settingstogglebutton';\nimport { FullscreenToggleButton } from './components/fullscreentogglebutton';\nimport { UIContainer } from './components/uicontainer';\nimport { BufferingOverlay } from './components/bufferingoverlay';\nimport { PlaybackToggleOverlay } from './components/playbacktoggleoverlay';\nimport { CastStatusOverlay } from './components/caststatusoverlay';\nimport { TitleBar } from './components/titlebar';\nimport { RecommendationOverlay } from './components/recommendationoverlay';\nimport { Watermark } from './components/watermark';\nimport { ErrorMessageOverlay } from './components/errormessageoverlay';\nimport { AdClickOverlay } from './components/adclickoverlay';\nimport { AdMessageLabel } from './components/admessagelabel';\nimport { AdSkipButton } from './components/adskipbutton';\nimport { CloseButton } from './components/closebutton';\nimport {\n  MetadataLabel,\n  MetadataLabelContent,\n} from './components/metadatalabel';\nimport { PlayerUtils } from './playerutils';\nimport { Label } from './components/label';\nimport { CastUIContainer } from './components/castuicontainer';\nimport { UIConditionContext, UIManager } from './uimanager';\nimport { UIConfig } from './uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\nimport { SubtitleListBox } from './components/subtitlelistbox';\nimport { AudioTrackListBox } from './components/audiotracklistbox';\nimport { SpatialNavigation } from './spatialnavigation/spatialnavigation';\nimport { RootNavigationGroup } from './spatialnavigation/rootnavigationgroup';\nimport {\n  ListNavigationGroup,\n  ListOrientation,\n} from './spatialnavigation/ListNavigationGroup';\n\ndeclare global {\n  interface Window {\n    bitmovin: any;\n  }\n}\n\nlet uiManager: UIManager;\nlet playerApi: PlayerAPI;\nlet uiConfig: UIConfig;\n\nexport namespace UIFactory {\n  export function buildDefaultUI(\n    player: PlayerAPI,\n    config: UIConfig = {},\n  ): UIManager {\n    return UIFactory.buildModernUI(player, config);\n  }\n\n  export function buildDefaultSmallScreenUI(\n    player: PlayerAPI,\n    config: UIConfig = {},\n  ): UIManager {\n    uiConfig = config;\n    playerApi = player;\n    uiManager = UIFactory.buildModernSmallScreenUI(player, config);\n    return uiManager;\n  }\n\n  export function buildDefaultCastReceiverUI(\n    player: PlayerAPI,\n    config: UIConfig = {},\n  ): UIManager {\n    return UIFactory.buildModernCastReceiverUI(player, config);\n  }\n\n  export function buildDefaultTvUI(\n    player: PlayerAPI,\n    config: UIConfig = {},\n  ): UIManager {\n    return UIFactory.buildModernTvUI(player, config);\n  }\n\n  export function modernUI({ radioModeAvailable }: { radioModeAvailable: boolean }) {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let mainSettingsPanelPage = new SettingsPanelPage({\n      components: [\n        new SettingsPanelItem(\n          i18n.getLocalizer('settings.video.quality'),\n          new VideoQualitySelectBox(),\n        ),\n        new SettingsPanelItem(\n          i18n.getLocalizer('speed'),\n          new PlaybackSpeedSelectBox(),\n        ),\n        new SettingsPanelItem(\n          i18n.getLocalizer('settings.audio.track'),\n          new AudioTrackSelectBox(),\n        ),\n        new SettingsPanelItem(\n          i18n.getLocalizer('settings.audio.quality'),\n          new AudioQualitySelectBox(),\n        ),\n      ],\n    });\n\n    let settingsPanel = new SettingsPanel({\n      components: [mainSettingsPanelPage],\n      hidden: true,\n    });\n\n    let subtitleSettingsPanelPage = new SubtitleSettingsPanelPage({\n      settingsPanel: settingsPanel,\n      overlay: subtitleOverlay,\n    });\n\n    const subtitleSelectBox = new SubtitleSelectBox();\n\n    let subtitleSettingsOpenButton = new SettingsPanelPageOpenButton({\n      targetPage: subtitleSettingsPanelPage,\n      container: settingsPanel,\n      ariaLabel: i18n.getLocalizer('settings.subtitles'),\n      text: i18n.getLocalizer('open'),\n    });\n\n    mainSettingsPanelPage.addComponent(\n      new SettingsPanelItem(\n        new SubtitleSettingsLabel({\n          text: i18n.getLocalizer('settings.subtitles'),\n          opener: subtitleSettingsOpenButton,\n        }),\n        subtitleSelectBox,\n        {\n          role: 'menubar',\n        },\n      ),\n    );\n\n    settingsPanel.addComponent(subtitleSettingsPanelPage);\n\n    let containerComponents = [\n      new PlaybackToggleButton(),\n      new VolumeToggleButton(),\n      new VolumeSlider(),\n      new Spacer(),\n      new PictureInPictureToggleButton(),\n      new AirPlayToggleButton(),\n      new CastToggleButton(),\n      new VRToggleButton(),\n      new SettingsToggleButton({ settingsPanel: settingsPanel }),\n      new FullscreenToggleButton(),\n    ];\n\n    if (radioModeAvailable) {\n      containerComponents.splice(7, 0, new RadioModeToggleButton({ active: false }));\n    }\n\n    let controlBar = new ControlBar({\n      components: [\n        settingsPanel,\n        new Container({\n          components: [\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.CurrentTime,\n              hideInLivePlayback: true,\n            }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.TotalTime,\n              cssClasses: ['text-right'],\n            }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n        new Container({\n          components: containerComponents,\n          cssClasses: ['controlbar-bottom'],\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new PlaybackJumpControlsOverlay(),\n        new CastStatusOverlay(),\n        controlBar,\n        new TitleBar(),\n        new RecommendationOverlay(),\n        new Watermark(),\n        new ErrorMessageOverlay(),\n      ],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernAdsUI() {\n    return new UIContainer({\n      components: [\n        new BufferingOverlay(),\n        new AdClickOverlay(),\n        new PlaybackToggleOverlay(),\n        new Container({\n          components: [\n            new AdMessageLabel({\n              text: i18n.getLocalizer('ads.remainingTime'),\n            }),\n            new AdSkipButton(),\n          ],\n          cssClass: 'ui-ads-status',\n        }),\n        new ControlBar({\n          components: [\n            new Container({\n              components: [\n                new PlaybackToggleButton(),\n                new VolumeToggleButton(),\n                new VolumeSlider(),\n                new Spacer(),\n                new FullscreenToggleButton(),\n              ],\n              cssClasses: ['controlbar-bottom'],\n            }),\n          ],\n        }),\n      ],\n      cssClasses: ['ui-skin-ads'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernSmallScreenUI({ radioModeAvailable }: { radioModeAvailable: boolean }) {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let mainSettingsPanelPage = new SettingsPanelPage({\n      components: [\n        new SettingsPanelItem(\n          i18n.getLocalizer('settings.video.quality'),\n          new VideoQualitySelectBox(),\n        ),\n        new SettingsPanelItem(\n          i18n.getLocalizer('speed'),\n          new PlaybackSpeedSelectBox(),\n        ),\n        new SettingsPanelItem(\n          i18n.getLocalizer('settings.audio.track'),\n          new AudioTrackSelectBox(),\n        ),\n        new SettingsPanelItem(\n          i18n.getLocalizer('settings.audio.quality'),\n          new AudioQualitySelectBox(),\n        ),\n      ],\n    });\n\n    let settingsPanel = new SettingsPanel({\n      components: [mainSettingsPanelPage],\n      hidden: true,\n      pageTransitionAnimation: false,\n      hideDelay: -1,\n    });\n\n    let subtitleSettingsPanelPage = new SubtitleSettingsPanelPage({\n      settingsPanel: settingsPanel,\n      overlay: subtitleOverlay,\n    });\n\n    let subtitleSettingsOpenButton = new SettingsPanelPageOpenButton({\n      targetPage: subtitleSettingsPanelPage,\n      container: settingsPanel,\n      ariaLabel: i18n.getLocalizer('settings.subtitles'),\n      text: i18n.getLocalizer('open'),\n    });\n\n    const subtitleSelectBox = new SubtitleSelectBox();\n\n    mainSettingsPanelPage.addComponent(\n      new SettingsPanelItem(\n        new SubtitleSettingsLabel({\n          text: i18n.getLocalizer('settings.subtitles'),\n          opener: subtitleSettingsOpenButton,\n        }),\n        subtitleSelectBox,\n        {\n          role: 'menubar',\n        },\n      ),\n    );\n\n    settingsPanel.addComponent(subtitleSettingsPanelPage);\n\n    settingsPanel.addComponent(new CloseButton({ target: settingsPanel }));\n    subtitleSettingsPanelPage.addComponent(\n      new CloseButton({ target: settingsPanel }),\n    );\n\n    let controlBar = new ControlBar({\n      components: [\n        new Container({\n          components: [\n            /* new ResetButton({\n              text: i18n.getLocalizer('restartbutton'),\n              cssClasses: ['ui-skin-radio'],\n            }), */\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.CurrentTime,\n              hideInLivePlayback: true,\n            }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.TotalTime,\n              cssClasses: ['text-right'],\n            }),\n            new FullscreenToggleButton({\n              cssClasses: ['controlbar-fullscreen-toggle-button'],\n            }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n      ],\n    });\n\n    let titleBarComponents = [\n      new GoBackButton(),\n      new MetadataLabel({ content: MetadataLabelContent.Title }),\n      new CastToggleButton(),\n      new VRToggleButton(),\n      new PictureInPictureToggleButton(),\n      new AirPlayToggleButton(),\n      new SettingsToggleButton({ settingsPanel: settingsPanel }),\n    ];\n\n    if (radioModeAvailable) {\n      titleBarComponents.splice(5, 0, new RadioModeToggleButton({ active: false }));\n    }\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new CastStatusOverlay(),\n        new PlaybackToggleOverlay(),\n        new PlaybackJumpControlsOverlay(),\n        new RecommendationOverlay(),\n        controlBar,\n        new TitleBar({\n          components: titleBarComponents,\n        }),\n        settingsPanel,\n        new Watermark(),\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: ['ui-skin-smallscreen'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernSmallScreenAdsUI() {\n    return new UIContainer({\n      components: [\n        new BufferingOverlay(),\n        new AdClickOverlay(),\n        new PlaybackToggleOverlay(),\n        new TitleBar({\n          components: [\n            // dummy label with no content to move buttons to the right\n            new Label({ cssClass: 'label-metadata-title' }),\n            new FullscreenToggleButton(),\n          ],\n        }),\n        new Container({\n          components: [\n            new AdMessageLabel({ text: 'Ad: {remainingTime} secs' }),\n            new AdSkipButton(),\n          ],\n          cssClass: 'ui-ads-status',\n        }),\n      ],\n      cssClasses: ['ui-skin-ads', 'ui-skin-smallscreen'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernCastReceiverUI() {\n    let controlBar = new ControlBar({\n      components: [\n        new Container({\n          components: [\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.CurrentTime,\n              hideInLivePlayback: true,\n            }),\n            new SeekBar({ smoothPlaybackPositionUpdateIntervalMs: -1 }),\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.TotalTime,\n              cssClasses: ['text-right'],\n            }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n      ],\n    });\n\n    return new CastUIContainer({\n      components: [\n        new SubtitleOverlay(),\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new Watermark(),\n        controlBar,\n        new TitleBar({ keepHiddenWithoutMetadata: true }),\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: ['ui-skin-cast-receiver'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function buildModernUI(\n    player: PlayerAPI,\n    config: UIConfig = {},\n  ): UIManager {\n    // show smallScreen UI only on mobile/handheld devices\n    let smallScreenSwitchWidth = 600;\n\n    return new UIManager(\n      player,\n      [\n        {\n          ui: modernRadioModeUI(),\n          condition: (context: UIConditionContext) => {\n            return !context.isAd && !context.adRequiresUi && context.isRadioModeActive;\n          },\n        },\n        {\n          ui: modernSmallScreenAdsUI(),\n          condition: (context: UIConditionContext) => {\n            return (\n              context.isMobile &&\n              context.documentWidth < smallScreenSwitchWidth &&\n              context.isAd &&\n              context.adRequiresUi\n            );\n          },\n        },\n        {\n          ui: modernAdsUI(),\n          condition: (context: UIConditionContext) => {\n            return context.isAd && context.adRequiresUi;\n          },\n        },\n        {\n          ui: modernSmallScreenUI({ radioModeAvailable: true }),\n          condition: (context: UIConditionContext) => {\n            return (\n              !context.isAd &&\n              !context.adRequiresUi &&\n              context.isMobile &&\n              context.documentWidth < smallScreenSwitchWidth &&\n              !context.isRadioModeActive &&\n              context.isRadioModeAvailable\n            );\n          },\n        },\n        {\n          ui: modernSmallScreenUI({ radioModeAvailable: false }),\n          condition: (context: UIConditionContext) => {\n            return (\n              !context.isAd &&\n              !context.adRequiresUi &&\n              context.isMobile &&\n              context.documentWidth < smallScreenSwitchWidth &&\n              !context.isRadioModeActive &&\n              !context.isRadioModeAvailable\n            );\n          },\n        },\n        {\n          ui: modernUI({ radioModeAvailable: true }),\n          condition: (context: UIConditionContext) => {\n            return !context.isAd && !context.adRequiresUi && !context.isRadioModeActive && context.isRadioModeAvailable;\n          },\n        },\n        {\n          ui: modernUI({ radioModeAvailable: false }),\n          condition: (context: UIConditionContext) => {\n            return !context.isAd && !context.adRequiresUi && !context.isRadioModeActive && !context.isRadioModeAvailable;\n          },\n        },\n      ],\n      config,\n    );\n  }\n\n  export function buildModernSmallScreenUI(\n    player: PlayerAPI,\n    config: UIConfig = {},\n  ): UIManager {\n    return new UIManager(\n      player,\n      [\n        {\n          ui: modernRadioModeUI(),\n          condition: (context: UIConditionContext) => {\n            return !context.isAd && !context.adRequiresUi && context.isRadioModeActive;\n          },\n        },\n        {\n          ui: modernSmallScreenAdsUI(),\n          condition: (context: UIConditionContext) => {\n            return context.isAd && context.adRequiresUi;\n          },\n        },\n        {\n          ui: modernSmallScreenUI({ radioModeAvailable: true }),\n          condition: (context: UIConditionContext) => {\n            return !context.isAd && !context.adRequiresUi && !context.isRadioModeActive && context.isRadioModeAvailable;\n          },\n        },\n        {\n          ui: modernSmallScreenUI({ radioModeAvailable: false }),\n          condition: (context: UIConditionContext) => {\n            return !context.isAd && !context.adRequiresUi && !context.isRadioModeActive && !context.isRadioModeAvailable;\n          },\n        },\n      ],\n      config,\n    );\n  }\n\n  export function buildModernCastReceiverUI(\n    player: PlayerAPI,\n    config: UIConfig = {},\n  ): UIManager {\n    return new UIManager(player, modernCastReceiverUI(), config);\n  }\n\n  export function buildModernTvUI(\n    player: PlayerAPI,\n    config: UIConfig = {},\n  ): UIManager {\n    return new UIManager(\n      player,\n      [\n        {\n          ...modernTvUI(),\n        },\n      ],\n      config,\n    );\n  }\n\n  export function modernTvUI() {\n    const subtitleListBox = new SubtitleListBox();\n    const subtitleListPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [new SettingsPanelItem(null, subtitleListBox)],\n        }),\n      ],\n      hidden: true,\n    });\n\n    const audioTrackListBox = new AudioTrackListBox();\n    const audioTrackListPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [new SettingsPanelItem(null, audioTrackListBox)],\n        }),\n      ],\n      hidden: true,\n    });\n\n    const seekBar = new SeekBar({ label: new SeekBarLabel() });\n    const playbackToggleOverlay = new PlaybackToggleOverlay();\n    const subtitleToggleButton = new SettingsToggleButton({\n      settingsPanel: subtitleListPanel,\n      autoHideWhenNoActiveSettings: true,\n      cssClass: 'ui-subtitlesettingstogglebutton',\n      text: i18n.getLocalizer('settings.subtitles'),\n    });\n    const audioToggleButton = new SettingsToggleButton({\n      settingsPanel: audioTrackListPanel,\n      autoHideWhenNoActiveSettings: true,\n      cssClass: 'ui-audiotracksettingstogglebutton',\n      ariaLabel: i18n.getLocalizer('settings.audio.track'),\n      text: i18n.getLocalizer('settings.audio.track'),\n    });\n    const uiContainer = new UIContainer({\n      components: [\n        new SubtitleOverlay(),\n        new BufferingOverlay(),\n        playbackToggleOverlay,\n        new ControlBar({\n          components: [\n            new Container({\n              components: [\n                new PlaybackTimeLabel({\n                  timeLabelMode: PlaybackTimeLabelMode.CurrentTime,\n                  hideInLivePlayback: true,\n                }),\n                seekBar,\n                new PlaybackTimeLabel({\n                  timeLabelMode: PlaybackTimeLabelMode.RemainingTime,\n                  cssClasses: ['text-right'],\n                }),\n              ],\n              cssClasses: ['controlbar-top'],\n            }),\n          ],\n        }),\n        new TitleBar({\n          components: [\n            new Container({\n              components: [\n                new MetadataLabel({ content: MetadataLabelContent.Title }),\n                subtitleToggleButton,\n                audioToggleButton,\n              ],\n              cssClasses: ['ui-titlebar-top'],\n            }),\n            new Container({\n              components: [\n                new MetadataLabel({\n                  content: MetadataLabelContent.Description,\n                }),\n                subtitleListPanel,\n                audioTrackListPanel,\n              ],\n              cssClasses: ['ui-titlebar-bottom'],\n            }),\n          ],\n        }),\n        new RecommendationOverlay(),\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: ['ui-skin-tv'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n\n    const spatialNavigation = new SpatialNavigation(\n      new RootNavigationGroup(\n        uiContainer,\n        playbackToggleOverlay,\n        seekBar,\n        audioToggleButton,\n        subtitleToggleButton,\n      ),\n      new ListNavigationGroup(\n        ListOrientation.Vertical,\n        subtitleListPanel,\n        subtitleListBox,\n      ),\n      new ListNavigationGroup(\n        ListOrientation.Vertical,\n        audioTrackListPanel,\n        audioTrackListBox,\n      ),\n    );\n\n    return {\n      ui: uiContainer,\n      spatialNavigation: spatialNavigation,\n    };\n  }\n\n  export function modernRadioModeUI() {\n    return new UIContainer({\n      components: [\n        new ControlBar({\n          components: [\n            new Container({\n              components: [\n                new PlaybackToggleButton(),\n                new SeekBar({ label: new SeekBarLabel() }),\n                new RadioModeToggleButton({ active: true }),\n              ],\n              cssClasses: ['controlbar-top'],\n            }),\n          ],\n        }),\n      ],\n      cssClasses: ['ui-skin-radio'],\n      hideDelay: -1,\n    });\n  }\n\n  export function buildModernRadioModeUI(\n    player: PlayerAPI,\n    config: UIConfig = {},\n  ): UIManager {\n    return new UIManager(\n      player,\n      [\n        {\n          ui: modernRadioModeUI(),\n        },\n      ],\n      config,\n    );\n  }\n}\n","import {UIContainer} from './components/uicontainer';\nimport {DOM} from './dom';\nimport {Component, ComponentConfig} from './components/component';\nimport {Container} from './components/container';\nimport { SeekBar, SeekBarMarker } from './components/seekbar';\nimport {NoArgs, EventDispatcher, CancelEventArgs} from './eventdispatcher';\nimport {UIUtils} from './uiutils';\nimport {ArrayUtils} from './arrayutils';\nimport {BrowserUtils} from './browserutils';\nimport { TimelineMarker, UIConfig } from './uiconfig';\nimport { PlayerAPI, PlayerEventCallback, PlayerEventBase, PlayerEvent, AdEvent, LinearAd } from 'bitmovin-player';\nimport { VolumeController } from './volumecontroller';\nimport { i18n, CustomVocabulary, Vocabularies } from './localization/i18n';\nimport { FocusVisibilityTracker } from './focusvisibilitytracker';\nimport { isMobileV3PlayerAPI, MobileV3PlayerAPI, MobileV3PlayerEvent } from './mobilev3playerapi';\nimport { SpatialNavigation } from './spatialnavigation/spatialnavigation';\n\nexport interface LocalizationConfig {\n  /**\n   * Sets the desired language, and falls back to 'en' if there is no vocabulary for the desired language. Setting it\n   * to \"auto\" will enable language detection from the browser's locale.\n   */\n  language?: 'auto' | 'en' | 'de' | string;\n  /**\n   * A map of `language` to {@link CustomVocabulary} definitions. Can be used to overwrite default translations and add\n   * custom strings or additional languages.\n   */\n  vocabularies?: Vocabularies;\n}\n\nexport interface InternalUIConfig extends UIConfig {\n  events: {\n    /**\n     * Fires when the configuration has been updated/changed.\n     */\n    onUpdated: EventDispatcher<UIManager, void>;\n  };\n  volumeController: VolumeController;\n}\n\n/**\n * The context that will be passed to a {@link UIConditionResolver} to determine if it's conditions fulfil the context.\n */\nexport interface UIConditionContext {\n  /**\n   * Tells if the player is loading or playing an ad.\n   */\n  isAd: boolean;\n  /**\n   * Tells if the current ad requires an external UI, if {@link #isAd} is true.\n   */\n  adRequiresUi: boolean;\n  /**\n   * Tells if the player is currently in fullscreen mode.\n   */\n  isFullscreen: boolean;\n  /**\n   * Tells if the UI is running in a mobile browser.\n   */\n  isMobile: boolean;\n  /**\n   * Tells if the player is in playing or paused state.\n   */\n  isPlaying: boolean;\n  /**\n   * The width of the player/UI element.\n   */\n  width: number;\n  /**\n   * The width of the document where the player/UI is embedded in.\n   */\n  documentWidth: number;\n  /**\n   * Tells if the radio mode is activated or not\n   */\n  isRadioModeActive: boolean;\n  /**\n   * Tells if the radio mode is available or not\n   */\n  isRadioModeAvailable: boolean;\n}\n\n/**\n * Resolves the conditions of its associated UI in a {@link UIVariant} upon a {@link UIConditionContext} and decides\n * if the UI should be displayed. If it returns true, the UI is a candidate for display; if it returns false, it will\n * not be displayed in the given context.\n */\nexport interface UIConditionResolver {\n  (context: UIConditionContext): boolean;\n}\n\n/**\n * Associates a UI instance with an optional {@link UIConditionResolver} that determines if the UI should be displayed.\n */\nexport interface UIVariant {\n  ui: UIContainer;\n  condition?: UIConditionResolver;\n  spatialNavigation?: SpatialNavigation;\n}\n\nexport interface ActiveUiChangedArgs extends NoArgs {\n  /**\n   * The previously active {@link UIInstanceManager} prior to the {@link UIManager} switching to a different UI variant.\n   */\n  previousUi: UIInstanceManager;\n  /**\n   * The currently active {@link UIInstanceManager}.\n   */\n  currentUi: UIInstanceManager;\n}\n\nexport class UIManager {\n\n  private player: PlayerAPI;\n  private uiContainerElement: DOM;\n  private uiVariants: UIVariant[];\n  private uiInstanceManagers: InternalUIInstanceManager[];\n  private currentUi: InternalUIInstanceManager;\n  private config: InternalUIConfig; // Conjunction of provided uiConfig and sourceConfig from the player\n  private managerPlayerWrapper: PlayerWrapper;\n  private focusVisibilityTracker: FocusVisibilityTracker;\n  private isRadioModeActive: boolean;\n  private isRadioModeAvailable: boolean;\n\n  private events = {\n    onUiVariantResolve: new EventDispatcher<UIManager, UIConditionContext>(),\n    onActiveUiChanged: new EventDispatcher<UIManager, ActiveUiChangedArgs>(),\n  };\n\n  /**\n   * Creates a UI manager with a single UI variant that will be permanently shown.\n   * @param player the associated player of this UI\n   * @param ui the UI to add to the player\n   * @param uiconfig optional UI configuration\n   */\n  constructor(player: PlayerAPI, ui: UIContainer, uiconfig?: UIConfig);\n  /**\n   * Creates a UI manager with a list of UI variants that will be dynamically selected and switched according to\n   * the context of the UI.\n   *\n   * Every time the UI context changes, the conditions of the UI variants will be sequentially resolved and the first\n   * UI, whose condition evaluates to true, will be selected and displayed. The last variant in the list might omit the\n   * condition resolver and will be selected as default/fallback UI when all other conditions fail. If there is no\n   * fallback UI and all conditions fail, no UI will be displayed.\n   *\n   * @param player the associated player of this UI\n   * @param uiVariants a list of UI variants that will be dynamically switched\n   * @param uiconfig optional UI configuration\n   */\n  constructor(player: PlayerAPI, uiVariants: UIVariant[], uiconfig?: UIConfig);\n  constructor(player: PlayerAPI, playerUiOrUiVariants: UIContainer | UIVariant[], uiconfig: UIConfig = {}) {\n    if (playerUiOrUiVariants instanceof UIContainer) {\n      // Single-UI constructor has been called, transform arguments to UIVariant[] signature\n      let playerUi = <UIContainer>playerUiOrUiVariants;\n      let uiVariants = [];\n\n      // Add the default player UI\n      uiVariants.push({ ui: playerUi });\n\n      this.uiVariants = uiVariants;\n    }\n    else {\n      // Default constructor (UIVariant[]) has been called\n      this.uiVariants = <UIVariant[]>playerUiOrUiVariants;\n    }\n\n    this.player = player;\n    this.managerPlayerWrapper = new PlayerWrapper(player);\n\n    // ensure that at least the metadata object does exist in the uiconfig\n    uiconfig.metadata = uiconfig.metadata ? uiconfig.metadata : {};\n\n    this.config = {\n      playbackSpeedSelectionEnabled: true, // Switch on speed selector by default\n      autoUiVariantResolve: true, // Switch on auto UI resolving by default\n      disableAutoHideWhenHovered: false, // Disable auto hide when UI is hovered\n      enableSeekPreview: true,\n      ...uiconfig,\n      events: {\n        onUpdated: new EventDispatcher<UIManager, void>(),\n      },\n      volumeController: new VolumeController(this.managerPlayerWrapper.getPlayer()),\n    };\n    try {\n      if (window.bitmovin.customMessageHandler) {\n        window.bitmovin.customMessageHandler.on(\n          'globalRadioModeChanged',\n          (data: string) => {\n            const { activated, available } = JSON.parse(data);\n            this.isRadioModeActive = activated;\n            this.isRadioModeAvailable = available;\n\n            this.resolveUiVariant({ isRadioModeActive: activated, isRadioModeAvailable: available });\n          },\n        );\n      }\n    } catch (error) { }\n\n    /**\n     * Gathers configuration data from the UI config and player source config and creates a merged UI config\n     * that is used throughout the UI instance.\n     */\n    const updateConfig = () => {\n      const playerSourceConfig = player.getSource() || {};\n      this.config.metadata = JSON.parse(JSON.stringify(uiconfig.metadata || {}));\n\n      // Extract the UI-related config properties from the source config\n      const playerSourceUiConfig: UIConfig = {\n        metadata: {\n          // TODO move metadata into source.metadata namespace in player v8\n          title: playerSourceConfig.title,\n          description: playerSourceConfig.description,\n          markers: (playerSourceConfig as any).markers,\n        },\n        recommendations: (playerSourceConfig as any).recommendations,\n      };\n\n      // Player source config takes precedence over the UI config, because the config in the source is attached\n      // to a source which changes with every player.load, whereas the UI config stays the same for the whole\n      // lifetime of the player instance.\n      this.config.metadata.title = playerSourceUiConfig.metadata.title || uiconfig.metadata.title;\n      this.config.metadata.description = playerSourceUiConfig.metadata.description || uiconfig.metadata.description;\n      this.config.metadata.markers = playerSourceUiConfig.metadata.markers || uiconfig.metadata.markers || [];\n      this.config.recommendations = playerSourceUiConfig.recommendations || uiconfig.recommendations || [];\n    };\n\n    updateConfig();\n\n    // Update the source configuration when a new source is loaded and dispatch onUpdated\n    const updateSource = () => {\n      updateConfig();\n      this.config.events.onUpdated.dispatch(this);\n    };\n\n    const wrappedPlayer = this.managerPlayerWrapper.getPlayer();\n\n    wrappedPlayer.on(this.player.exports.PlayerEvent.SourceLoaded, updateSource);\n\n    // The PlaylistTransition event is only available on Mobile v3 for now.\n    // This event is fired when a new source becomes active in the player.\n    if (isMobileV3PlayerAPI(wrappedPlayer)) {\n      wrappedPlayer.on(MobileV3PlayerEvent.PlaylistTransition, updateSource);\n    }\n\n    if (uiconfig.container) {\n      // Unfortunately \"uiContainerElement = new DOM(config.container)\" will not accept the container with\n      // string|HTMLElement type directly, although it accepts both types, so we need to spit these two cases up here.\n      // TODO check in upcoming TS versions if the container can be passed in directly, or fix the constructor\n      this.uiContainerElement = uiconfig.container instanceof HTMLElement ?\n        new DOM(uiconfig.container) : new DOM(uiconfig.container);\n    } else {\n      this.uiContainerElement = new DOM(player.getContainer());\n    }\n\n    // Create UI instance managers for the UI variants\n    // The instance managers map to the corresponding UI variants by their array index\n    this.uiInstanceManagers = [];\n    let uiVariantsWithoutCondition = [];\n    for (let uiVariant of this.uiVariants) {\n      if (uiVariant.condition == null) {\n        // Collect variants without conditions for error checking\n        uiVariantsWithoutCondition.push(uiVariant);\n      }\n      // Create the instance manager for a UI variant\n      this.uiInstanceManagers.push(new InternalUIInstanceManager(\n        player,\n        uiVariant.ui,\n        this.config,\n        uiVariant.spatialNavigation,\n      ));\n    }\n    // Make sure that there is only one UI variant without a condition\n    // It does not make sense to have multiple variants without condition, because only the first one in the list\n    // (the one with the lowest index) will ever be selected.\n    if (uiVariantsWithoutCondition.length > 1) {\n      throw Error('Too many UIs without a condition: You cannot have more than one default UI');\n    }\n    // Make sure that the default UI variant, if defined, is at the end of the list (last index)\n    // If it comes earlier, the variants with conditions that come afterwards will never be selected because the\n    // default variant without a condition always evaluates to 'true'\n    if (uiVariantsWithoutCondition.length > 0\n      && uiVariantsWithoutCondition[0] !== this.uiVariants[this.uiVariants.length - 1]) {\n      throw Error('Invalid UI variant order: the default UI (without condition) must be at the end of the list');\n    }\n\n    let adStartedEvent: AdEvent = null; // keep the event stored here during ad playback\n\n    // Dynamically select a UI variant that matches the current UI condition.\n    let resolveUiVariant = (event: PlayerEventBase) => {\n      // Make sure that the AdStarted event data is persisted through ad playback in case other events happen\n      // in the meantime, e.g. player resize. We need to store this data because there is no other way to find out\n      // ad details while an ad is playing (in v8.0 at least; from v8.1 there will be ads.getActiveAd()).\n      // Existing event data signals that an ad is currently active (instead of ads.isLinearAdActive()).\n      if (event != null) {\n        switch (event.type) {\n          // The ads UI is shown upon the first AdStarted event. Subsequent AdStarted events within an ad break\n          // will not change the condition context and thus not lead to undesired UI variant resolving.\n          // The ads UI is shown upon AdStarted instead of AdBreakStarted because there can be a loading delay\n          // between these two events in the player, and the AdBreakStarted event does not carry any metadata to\n          // initialize the ads UI, so it would be rendered in an uninitialized state for a certain amount of time.\n          // TODO show ads UI upon AdBreakStarted and display loading overlay between AdBreakStarted and first AdStarted\n          // TODO display loading overlay between AdFinished and next AdStarted\n          case player.exports.PlayerEvent.AdStarted:\n            adStartedEvent = event as AdEvent;\n            break;\n          // The ads UI is hidden only when the ad break is finished, i.e. not on AdFinished events. This way we keep\n          // the ads UI variant active throughout an ad break, as reacting to AdFinished would lead to undesired UI\n          // variant switching between two ads in an ad break, e.g. ads UI -> AdFinished -> content UI ->\n          // AdStarted -> ads UI.\n          case player.exports.PlayerEvent.AdBreakFinished:\n            adStartedEvent = null;\n            // When switching to a variant for the first time, a config.events.onUpdated event is fired to trigger a UI\n            // update of the new variant, because most components subscribe to this event to update themselves. When\n            // switching to the ads UI on the first AdStarted, all UI variants update themselves with the ad data, so\n            // when switching back to the \"normal\" UI it will carry properties of the ad instead of the main content.\n            // We thus fire this event here to force an UI update with the properties of the main content. This is\n            // basically a hack because the config.events.onUpdated event is abused in many places and not just used\n            // for config updates (e.g. adding a marker to the seekbar).\n            // TODO introduce an event that is fired when the playback content is updated, a switch to/from ads\n            this.config.events.onUpdated.dispatch(this);\n            break;\n          // When a new source is loaded during ad playback, there will be no Ad(Break)Finished event\n          case player.exports.PlayerEvent.SourceLoaded:\n          case player.exports.PlayerEvent.SourceUnloaded:\n            adStartedEvent = null;\n            break;\n        }\n      }\n\n      // Detect if an ad has started\n      let isAd = adStartedEvent != null;\n      let adRequiresUi = false;\n      if (isAd) {\n        let ad = adStartedEvent.ad;\n        // for now only linear ads can request a UI\n        if (ad.isLinear) {\n          let linearAd = ad as LinearAd;\n          adRequiresUi = linearAd.uiConfig && linearAd.uiConfig.requestsUi || false;\n        }\n      }\n\n      if (adRequiresUi) {\n        // we dispatch onUpdated event because if there are multiple adBreaks for same position\n        // `Play` and `Playing` events will not be dispatched which will cause `PlaybackButton` state\n        // to be out of sync\n        this.config.events.onUpdated.dispatch(this);\n      }\n\n      this.resolveUiVariant({\n        isAd: isAd,\n        adRequiresUi: adRequiresUi,\n        isRadioModeActive: this.isRadioModeActive,\n        isRadioModeAvailable: this.isRadioModeAvailable,\n      }, (context) => {\n        // If this is an ad UI, we need to relay the saved ON_AD_STARTED event data so ad components can configure\n        // themselves for the current ad.\n        if (context.isAd) {\n          /* Relay the ON_AD_STARTED event to the ads UI\n           *\n           * Because the ads UI is initialized in the ON_AD_STARTED handler, i.e. when the ON_AD_STARTED event has\n           * already been fired, components in the ads UI that listen for the ON_AD_STARTED event never receive it.\n           * Since this can break functionality of components that rely on this event, we relay the event to the\n           * ads UI components with the following call.\n           */\n          this.currentUi.getWrappedPlayer().fireEventInUI(this.player.exports.PlayerEvent.AdStarted, adStartedEvent);\n        }\n      });\n    };\n\n    // Listen to the following events to trigger UI variant resolution\n    if (this.config.autoUiVariantResolve) {\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.SourceLoaded, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.SourceUnloaded, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.Play, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.Paused, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.AdStarted, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.AdBreakFinished, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.PlayerResized, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.ViewModeChanged, resolveUiVariant);\n    }\n\n    this.focusVisibilityTracker = new FocusVisibilityTracker('{{PREFIX}}');\n\n    // Initialize the UI\n    resolveUiVariant(null);\n  }\n\n  /**\n   * Exposes i18n.getLocalizer() function\n   * @returns {I18nApi.getLocalizer()}\n   */\n  static localize<V extends CustomVocabulary<Record<string, string>>>(key: keyof V) {\n    return i18n.getLocalizer(key);\n  }\n\n  /**\n   * Provide configuration to support Custom UI languages\n   * default language: 'en'\n   */\n  static setLocalizationConfig(localizationConfig: LocalizationConfig) {\n    i18n.setConfig(localizationConfig);\n  }\n\n  getConfig(): UIConfig {\n    return this.config;\n  }\n\n  /**\n   * Returns the list of UI variants as passed into the constructor of {@link UIManager}.\n   * @returns {UIVariant[]} the list of available UI variants\n   */\n  getUiVariants(): UIVariant[] {\n    return this.uiVariants;\n  }\n\n  /**\n   * Switches to a UI variant from the list returned by {@link getUiVariants}.\n   * @param {UIVariant} uiVariant the UI variant to switch to\n   * @param {() => void} onShow a callback that is executed just before the new UI variant is shown\n   */\n  switchToUiVariant(uiVariant: UIVariant, onShow?: () => void): void {\n    let uiVariantIndex = this.uiVariants.indexOf(uiVariant);\n\n    const previousUi = this.currentUi;\n    const nextUi: InternalUIInstanceManager = this.uiInstanceManagers[uiVariantIndex];\n    // Determine if the UI variant is changing\n    // Only if the UI variant is changing, we need to do some stuff. Else we just leave everything as-is.\n    if (nextUi === this.currentUi) {\n      return;\n      // console.log('switched from ', this.currentUi ? this.currentUi.getUI() : 'none',\n      //   ' to ', nextUi ? nextUi.getUI() : 'none');\n    }\n\n    // Hide the currently active UI variant\n    if (this.currentUi) {\n      this.currentUi.getUI().hide();\n    }\n\n    // Assign the new UI variant as current UI\n    this.currentUi = nextUi;\n\n    // When we switch to a different UI instance, there's some additional stuff to manage. If we do not switch\n    // to an instance, we're done here.\n    if (this.currentUi == null) {\n      return;\n    }\n    // Add the UI to the DOM (and configure it) the first time it is selected\n    if (!this.currentUi.isConfigured()) {\n      this.addUi(this.currentUi);\n      // ensure that the internal state is ready for the upcoming show call\n      if (!this.currentUi.getUI().isHidden()) {\n        this.currentUi.getUI().hide();\n      }\n    }\n    if (onShow) {\n      onShow();\n    }\n    this.currentUi.getUI().show();\n    this.events.onActiveUiChanged.dispatch(this, { previousUi, currentUi: nextUi });\n  }\n\n  /**\n   * Triggers a UI variant switch as triggered by events when automatic switching is enabled. It allows to overwrite\n   * properties of the {@link UIConditionContext}.\n   * @param {Partial<UIConditionContext>} context an optional set of properties that overwrite properties of the\n   *   automatically determined context\n   * @param {(context: UIConditionContext) => void} onShow a callback that is executed just before the new UI variant\n   *   is shown (if a switch is happening)\n   */\n  resolveUiVariant(context: Partial<UIConditionContext> = {}, onShow?: (context: UIConditionContext) => void): void {\n    // Determine the current context for which the UI variant will be resolved\n    const defaultContext: UIConditionContext = {\n      isAd: false,\n      adRequiresUi: false,\n      isFullscreen: this.player.getViewMode() === this.player.exports.ViewMode.Fullscreen,\n      isMobile: BrowserUtils.isMobile,\n      isPlaying: this.player.isPlaying(),\n      width: this.uiContainerElement.width(),\n      documentWidth: document.body.clientWidth,\n      isRadioModeActive: false,\n      isRadioModeAvailable: false,\n    };\n\n    // Overwrite properties of the default context with passed in context properties\n    const switchingContext = { ...defaultContext, ...context };\n\n    // Fire the event and allow modification of the context before it is used to resolve the UI variant\n    this.events.onUiVariantResolve.dispatch(this, switchingContext);\n\n    let nextUiVariant: UIVariant = null;\n\n    // Select new UI variant\n    // If no variant condition is fulfilled, we switch to *no* UI\n    for (let uiVariant of this.uiVariants) {\n      const matchesCondition = uiVariant.condition == null || uiVariant.condition(switchingContext) === true;\n      if (nextUiVariant == null && matchesCondition) {\n        nextUiVariant = uiVariant;\n      } else {\n        // hide all UIs besides the one which should be active\n        uiVariant.ui.hide();\n      }\n    }\n\n    this.switchToUiVariant(nextUiVariant, () => {\n      if (onShow) {\n        onShow(switchingContext);\n      }\n    });\n  }\n\n  private addUi(ui: InternalUIInstanceManager): void {\n    let dom = ui.getUI().getDomElement();\n    let player = ui.getWrappedPlayer();\n\n    ui.configureControls();\n    /* Append the UI DOM after configuration to avoid CSS transitions at initialization\n     * Example: Components are hidden during configuration and these hides may trigger CSS transitions that are\n     * undesirable at this time. */\n    this.uiContainerElement.append(dom);\n\n    // When the UI is loaded after a source was loaded, we need to tell the components to initialize themselves\n    if (player.getSource()) {\n      this.config.events.onUpdated.dispatch(this);\n    }\n\n    // Fire onConfigured after UI DOM elements are successfully added. When fired immediately, the DOM elements\n    // might not be fully configured and e.g. do not have a size.\n    // https://swizec.com/blog/how-to-properly-wait-for-dom-elements-to-show-up-in-modern-browsers/swizec/6663\n    if (window.requestAnimationFrame) {\n      requestAnimationFrame(() => { ui.onConfigured.dispatch(ui.getUI()); });\n    } else {\n      // IE9 fallback\n      setTimeout(() => { ui.onConfigured.dispatch(ui.getUI()); }, 0);\n    }\n  }\n\n  private releaseUi(ui: InternalUIInstanceManager): void {\n    ui.releaseControls();\n\n    const uiContainer = ui.getUI();\n    if (uiContainer.hasDomElement()) {\n      uiContainer.getDomElement().remove();\n    }\n\n    ui.clearEventHandlers();\n  }\n\n  release(): void {\n    for (let uiInstanceManager of this.uiInstanceManagers) {\n      this.releaseUi(uiInstanceManager);\n    }\n    this.managerPlayerWrapper.clearEventHandlers();\n    this.focusVisibilityTracker.release();\n  }\n\n  /**\n   * Fires just before UI variants are about to be resolved and the UI variant is possibly switched. It is fired when\n   * the switch is triggered from an automatic switch and when calling {@link resolveUiVariant}.\n   * Can be used to modify the {@link UIConditionContext} before resolving is done.\n   * @returns {EventDispatcher<UIManager, UIConditionContext>}\n   */\n  get onUiVariantResolve(): EventDispatcher<UIManager, UIConditionContext> {\n    return this.events.onUiVariantResolve;\n  }\n\n  /**\n   * Fires after the UIManager has switched to a different UI variant.\n   * @returns {EventDispatcher<UIManager, ActiveUiChangedArgs>}\n   */\n  get onActiveUiChanged(): EventDispatcher<UIManager, ActiveUiChangedArgs> {\n    return this.events.onActiveUiChanged;\n  }\n\n  /**\n   * The current active {@link UIInstanceManager}.\n   */\n  get activeUi(): UIInstanceManager {\n    return this.currentUi;\n  }\n\n  /**\n   * Returns the list of all added markers in undefined order.\n   */\n  getTimelineMarkers(): TimelineMarker[] {\n    return this.config.metadata.markers;\n  }\n\n  /**\n   * Adds a marker to the timeline. Does not check for duplicates/overlaps at the `time`.\n   */\n  addTimelineMarker(timelineMarker: TimelineMarker): void {\n    this.config.metadata.markers.push(timelineMarker);\n    this.config.events.onUpdated.dispatch(this);\n  }\n\n  /**\n   * Removes a marker from the timeline (by reference) and returns `true` if the marker has\n   * been part of the timeline and successfully removed, or `false` if the marker could not\n   * be found and thus not removed.\n   */\n  removeTimelineMarker(timelineMarker: TimelineMarker): boolean {\n    if (ArrayUtils.remove(this.config.metadata.markers, timelineMarker) === timelineMarker) {\n      this.config.events.onUpdated.dispatch(this);\n      return true;\n    }\n\n    return false;\n  }\n}\n\nexport interface SeekPreviewArgs extends NoArgs {\n  /**\n   * The timeline position in percent where the event originates from.\n   */\n  position: number;\n  /**\n   * The timeline marker associated with the current position, if existing.\n   */\n  marker?: SeekBarMarker;\n}\n\n/**\n * Encapsulates functionality to manage a UI instance. Used by the {@link UIManager} to manage multiple UI instances.\n */\nexport class UIInstanceManager {\n  private playerWrapper: PlayerWrapper;\n  private ui: UIContainer;\n  private config: InternalUIConfig;\n  protected spatialNavigation?: SpatialNavigation;\n\n  private events = {\n    onConfigured: new EventDispatcher<UIContainer, NoArgs>(),\n    onSeek: new EventDispatcher<SeekBar, NoArgs>(),\n    onSeekPreview: new EventDispatcher<SeekBar, SeekPreviewArgs>(),\n    onSeeked: new EventDispatcher<SeekBar, NoArgs>(),\n    onComponentShow: new EventDispatcher<Component<ComponentConfig>, NoArgs>(),\n    onComponentHide: new EventDispatcher<Component<ComponentConfig>, NoArgs>(),\n    onControlsShow: new EventDispatcher<UIContainer, NoArgs>(),\n    onPreviewControlsHide: new EventDispatcher<UIContainer, CancelEventArgs>(),\n    onControlsHide: new EventDispatcher<UIContainer, NoArgs>(),\n    onRelease: new EventDispatcher<UIContainer, NoArgs>(),\n  };\n\n  constructor(player: PlayerAPI, ui: UIContainer, config: InternalUIConfig, spatialNavigation?: SpatialNavigation) {\n    this.playerWrapper = new PlayerWrapper(player);\n    this.ui = ui;\n    this.config = config;\n    this.spatialNavigation = spatialNavigation;\n  }\n\n  getConfig(): InternalUIConfig {\n    return this.config;\n  }\n\n  getUI(): UIContainer {\n    return this.ui;\n  }\n\n  getPlayer(): PlayerAPI {\n    return this.playerWrapper.getPlayer();\n  }\n\n  /**\n   * Fires when the UI is fully configured and added to the DOM.\n   * @returns {EventDispatcher}\n   */\n  get onConfigured(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onConfigured;\n  }\n\n  /**\n   * Fires when a seek starts.\n   * @returns {EventDispatcher}\n   */\n  get onSeek(): EventDispatcher<SeekBar, NoArgs> {\n    return this.events.onSeek;\n  }\n\n  /**\n   * Fires when the seek timeline is scrubbed.\n   * @returns {EventDispatcher}\n   */\n  get onSeekPreview(): EventDispatcher<SeekBar, SeekPreviewArgs> {\n    return this.events.onSeekPreview;\n  }\n\n  /**\n   * Fires when a seek is finished.\n   * @returns {EventDispatcher}\n   */\n  get onSeeked(): EventDispatcher<SeekBar, NoArgs> {\n    return this.events.onSeeked;\n  }\n\n  /**\n   * Fires when a component is showing.\n   * @returns {EventDispatcher}\n   */\n  get onComponentShow(): EventDispatcher<Component<ComponentConfig>, NoArgs> {\n    return this.events.onComponentShow;\n  }\n\n  /**\n   * Fires when a component is hiding.\n   * @returns {EventDispatcher}\n   */\n  get onComponentHide(): EventDispatcher<Component<ComponentConfig>, NoArgs> {\n    return this.events.onComponentHide;\n  }\n\n  /**\n   * Fires when the UI controls are showing.\n   * @returns {EventDispatcher}\n   */\n  get onControlsShow(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onControlsShow;\n  }\n\n  /**\n   * Fires before the UI controls are hiding to check if they are allowed to hide.\n   * @returns {EventDispatcher}\n   */\n  get onPreviewControlsHide(): EventDispatcher<UIContainer, CancelEventArgs> {\n    return this.events.onPreviewControlsHide;\n  }\n\n  /**\n   * Fires when the UI controls are hiding.\n   * @returns {EventDispatcher}\n   */\n  get onControlsHide(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onControlsHide;\n  }\n\n  /**\n   * Fires when the UI controls are released.\n   * @returns {EventDispatcher}\n   */\n  get onRelease(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onRelease;\n  }\n\n  protected clearEventHandlers(): void {\n    this.playerWrapper.clearEventHandlers();\n\n    let events = <any>this.events; // avoid TS7017\n    for (let event in events) {\n      let dispatcher = <EventDispatcher<Object, Object>>events[event];\n      dispatcher.unsubscribeAll();\n    }\n  }\n}\n\n/**\n * Extends the {@link UIInstanceManager} for internal use in the {@link UIManager} and provides access to functionality\n * that components receiving a reference to the {@link UIInstanceManager} should not have access to.\n */\nclass InternalUIInstanceManager extends UIInstanceManager {\n\n  private configured: boolean;\n  private released: boolean;\n\n  getWrappedPlayer(): WrappedPlayer {\n    // TODO find a non-hacky way to provide the WrappedPlayer to the UIManager without exporting it\n    // getPlayer() actually returns the WrappedPlayer but its return type is set to Player so the WrappedPlayer does\n    // not need to be exported\n    return <WrappedPlayer>this.getPlayer();\n  }\n\n  configureControls(): void {\n    this.configureControlsTree(this.getUI());\n    this.configured = true;\n  }\n\n  isConfigured(): boolean {\n    return this.configured;\n  }\n\n  private configureControlsTree(component: Component<ComponentConfig>) {\n    let configuredComponents: Component<ComponentConfig>[] = [];\n\n    UIUtils.traverseTree(component, (component) => {\n      // First, check if we have already configured a component, and throw an error if we did. Multiple configuration\n      // of the same component leads to unexpected UI behavior. Also, a component that is in the UI tree multiple\n      // times hints at a wrong UI structure.\n      // We could just skip configuration in such a case and not throw an exception, but enforcing a clean UI tree\n      // seems like the better choice.\n      for (let configuredComponent of configuredComponents) {\n        if (configuredComponent === component) {\n          // Write the component to the console to simplify identification of the culprit\n          // (e.g. by inspecting the config)\n          if (console) {\n            console.error('Circular reference in UI tree', component);\n          }\n\n          // Additionally throw an error, because this case must not happen and leads to unexpected UI behavior.\n          throw Error('Circular reference in UI tree: ' + component.constructor.name);\n        }\n      }\n\n      component.initialize();\n      component.configure(this.getPlayer(), this);\n      configuredComponents.push(component);\n    });\n  }\n\n  releaseControls(): void {\n    // Do not call release methods if the components have never been configured; this can result in exceptions\n    if (this.configured) {\n      this.onRelease.dispatch(this.getUI());\n      this.releaseControlsTree(this.getUI());\n      this.configured = false;\n    }\n    this.spatialNavigation?.release();\n    this.released = true;\n  }\n\n  isReleased(): boolean {\n    return this.released;\n  }\n\n  private releaseControlsTree(component: Component<ComponentConfig>) {\n    component.release();\n\n    if (component instanceof Container) {\n      for (let childComponent of component.getComponents()) {\n        this.releaseControlsTree(childComponent);\n      }\n    }\n  }\n\n  clearEventHandlers(): void {\n    super.clearEventHandlers();\n  }\n}\n\n/**\n * Extended interface of the {@link Player} for use in the UI.\n */\nexport interface WrappedPlayer extends PlayerAPI {\n  /**\n   * Fires an event on the player that targets all handlers in the UI but never enters the real player.\n   * @param event the event to fire\n   * @param data data to send with the event\n   */\n  fireEventInUI(event: PlayerEvent, data: {}): void;\n}\n\n/**\n * Wraps the player to track event handlers and provide a simple method to remove all registered event\n * handlers from the player.\n */\nexport class PlayerWrapper {\n\n  private player: PlayerAPI;\n  private wrapper: WrappedPlayer;\n\n  private eventHandlers: { [eventType: string]: PlayerEventCallback[]; } = {};\n\n  constructor(player: PlayerAPI) {\n    this.player = player;\n\n    // Collect all members of the player (public API methods and properties of the player)\n    const objectProtoPropertyNames = Object.getOwnPropertyNames(Object.getPrototypeOf({}));\n    const namesToIgnore = ['constructor', ...objectProtoPropertyNames];\n    const members = getAllPropertyNames(player).filter(name => namesToIgnore.indexOf(name) === -1);\n    // Split the members into methods and properties\n    let methods = <any[]>[];\n    let properties = <any[]>[];\n\n    for (let member of members) {\n      if (typeof (<any>player)[member] === 'function') {\n        methods.push(member);\n      } else {\n        properties.push(member);\n      }\n    }\n\n    // Create wrapper object\n    let wrapper = <any>{};\n\n    // Add function wrappers for all API methods that do nothing but calling the base method on the player\n    for (let method of methods) {\n      wrapper[method] = function() {\n        // console.log('called ' + member); // track method calls on the player\n        return (<any>player)[method].apply(player, arguments);\n      };\n    }\n\n    // Add all public properties of the player to the wrapper\n    for (let property of properties) {\n      // Get an eventually existing property descriptor to differentiate between plain properties and properties with\n      // getters/setters.\n      const propertyDescriptor = ((target: PlayerAPI) => {\n        while (target) {\n          const propertyDescriptor = Object.getOwnPropertyDescriptor(target, property);\n          if (propertyDescriptor) {\n            return propertyDescriptor;\n          }\n          // Check if the PropertyDescriptor exists on a child prototype in case we have an inheritance of the player\n          target = Object.getPrototypeOf(target);\n        }\n      })(player);\n\n      // If the property has getters/setters, wrap them accordingly...\n      if (propertyDescriptor && (propertyDescriptor.get || propertyDescriptor.set)) {\n        Object.defineProperty(wrapper, property, {\n          get: () => propertyDescriptor.get.call(player),\n          set: (value: any) => propertyDescriptor.set.call(player, value),\n        });\n      }\n      // ... else just transfer the property to the wrapper\n      else {\n        wrapper[property] = (<any>player)[property];\n      }\n    }\n\n    // Explicitly add a wrapper method for 'on' that adds added event handlers to the event list\n    wrapper.on = (eventType: PlayerEvent, callback: PlayerEventCallback) => {\n      player.on(eventType, callback);\n\n      if (!this.eventHandlers[eventType]) {\n        this.eventHandlers[eventType] = [];\n      }\n\n      this.eventHandlers[eventType].push(callback);\n\n      return wrapper;\n    };\n\n    // Explicitly add a wrapper method for 'off' that removes removed event handlers from the event list\n    wrapper.off = (eventType: PlayerEvent, callback: PlayerEventCallback) => {\n      player.off(eventType, callback);\n\n      if (this.eventHandlers[eventType]) {\n        ArrayUtils.remove(this.eventHandlers[eventType], callback);\n      }\n\n      return wrapper;\n    };\n\n    wrapper.fireEventInUI = (event: PlayerEvent, data: {}) => {\n      if (this.eventHandlers[event]) { // check if there are handlers for this event registered\n        // Extend the data object with default values to convert it to a {@link PlayerEventBase} object.\n        let playerEventData = <PlayerEventBase>Object.assign({}, {\n          timestamp: Date.now(),\n          type: event,\n          // Add a marker property so the UI can detect UI-internal player events\n          uiSourced: true,\n        }, data);\n\n        // Execute the registered callbacks\n        for (let callback of this.eventHandlers[event]) {\n          callback(playerEventData);\n        }\n      }\n    };\n\n    this.wrapper = <WrappedPlayer>wrapper;\n  }\n\n  /**\n   * Returns a wrapped player object that can be used on place of the normal player object.\n   * @returns {WrappedPlayer} a wrapped player\n   */\n  getPlayer(): WrappedPlayer {\n    return this.wrapper;\n  }\n\n  /**\n   * Clears all registered event handlers from the player that were added through the wrapped player.\n   */\n  clearEventHandlers(): void {\n    try {\n      // Call the player API to check if the instance is still valid or already destroyed.\n      // This can be any call throwing the PlayerAPINotAvailableError when the player instance is destroyed.\n      this.player.getSource();\n    } catch (error) {\n      if (error instanceof this.player.exports.PlayerAPINotAvailableError) {\n        // We have detected that the player instance is already destroyed, so we clear the event handlers to avoid\n        // event handler unsubscription attempts (which would result in PlayerAPINotAvailableError errors).\n        this.eventHandlers = {};\n      }\n    }\n\n    for (let eventType in this.eventHandlers) {\n      for (let callback of this.eventHandlers[eventType]) {\n        this.player.off(eventType as PlayerEvent, callback);\n      }\n    }\n  }\n}\n\nfunction getAllPropertyNames(target: Object): string[] {\n  let names: string[] = [];\n\n  while (target) {\n    const newNames = Object.getOwnPropertyNames(target).filter(name => names.indexOf(name) === -1);\n    names = names.concat(newNames);\n    // go up prototype chain\n    target = Object.getPrototypeOf(target);\n  }\n\n  return names;\n}\n","import {Component, ComponentConfig} from './components/component';\nimport {Container} from './components/container';\n\nexport namespace UIUtils {\n  export interface TreeTraversalCallback {\n    (component: Component<ComponentConfig>, parent?: Component<ComponentConfig>): void;\n  }\n\n  export function traverseTree(component: Component<ComponentConfig>, visit: TreeTraversalCallback): void {\n    let recursiveTreeWalker = (component: Component<ComponentConfig>, parent?: Component<ComponentConfig>) => {\n      visit(component, parent);\n\n      // If the current component is a container, visit it's children\n      if (component instanceof Container) {\n        for (let childComponent of component.getComponents()) {\n          recursiveTreeWalker(childComponent, component);\n        }\n      }\n    };\n\n    // Walk and configure the component tree\n    recursiveTreeWalker(component);\n  }\n\n  // From: https://github.com/nfriend/ts-keycode-enum/blob/master/Key.enum.ts\n  export enum KeyCode {\n    LeftArrow = 37,\n    UpArrow = 38,\n    RightArrow = 39,\n    DownArrow = 40,\n    Space = 32,\n    End = 35,\n    Home = 36,\n  }\n}\n","import { Event, EventDispatcher } from './eventdispatcher';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport interface VolumeSettingChangedArgs {\n  volume: number;\n  muted: boolean;\n}\n\n/**\n * Can be used to centrally manage and control the volume and mute state of the player from multiple components.\n */\nexport class VolumeController {\n\n  private static readonly issuerName = 'ui-volumecontroller';\n\n  private readonly events = {\n    onChanged: new EventDispatcher<VolumeController, VolumeSettingChangedArgs>(),\n  };\n\n  private storedVolume: number;\n\n  constructor(private readonly player: PlayerAPI) {\n    this.storeVolume();\n\n    const handler = () => {\n      this.onChangedEvent();\n    };\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, handler);\n    player.on(player.exports.PlayerEvent.VolumeChanged, handler);\n    player.on(player.exports.PlayerEvent.Muted, handler);\n    player.on(player.exports.PlayerEvent.Unmuted, handler);\n  }\n\n  setVolume(volume: number): void {\n    this.player.setVolume(volume, VolumeController.issuerName);\n  }\n\n  getVolume(): number {\n    return this.player.getVolume();\n  }\n\n  setMuted(muted: boolean): void {\n    if (muted) {\n      this.player.mute(VolumeController.issuerName);\n    } else {\n      this.player.unmute(VolumeController.issuerName);\n    }\n  }\n\n  toggleMuted(): void {\n    if (this.isMuted() || this.getVolume() === 0) {\n      // Unmuting from the mute or zero-volume state recalls the previously saved volume setting. Setting the\n      // volume automatically unmutes the player in v7.\n      this.recallVolume();\n    } else {\n      this.setMuted(true);\n    }\n  }\n\n  isMuted(): boolean {\n    return this.player.isMuted();\n  }\n\n  /**\n   * Stores (saves) the current volume so it can later be restored with {@link recallVolume}.\n   */\n  storeVolume(): void {\n    this.storedVolume = this.getVolume();\n  }\n\n  /**\n   * Recalls (sets) the volume previously stored with {@link storeVolume}.\n   */\n  recallVolume(): void {\n    this.setMuted(this.storedVolume === 0);\n    this.setVolume(this.storedVolume);\n  }\n\n  startTransition(): VolumeTransition {\n    return new VolumeTransition(this);\n  }\n\n  onChangedEvent() {\n    const playerMuted = this.isMuted();\n    const playerVolume = this.getVolume();\n\n    const uiMuted = playerMuted || playerVolume === 0;\n    const uiVolume = playerMuted ? 0 : playerVolume;\n\n    this.storeVolume();\n\n    this.events.onChanged.dispatch(this, { volume: uiVolume, muted: uiMuted });\n  }\n\n  /**\n   * Gets the event that is fired when the volume settings have changed.\n   */\n  get onChanged(): Event<VolumeController, VolumeSettingChangedArgs> {\n    return this.events.onChanged.getEvent();\n  }\n}\n\nexport class VolumeTransition {\n\n  constructor(private controller: VolumeController) {\n    // Store the volume at the beginning of a volume change so we can recall it later in case we set the volume to\n    // zero and actually mute the player.\n    controller.storeVolume();\n  }\n\n  update(volume: number): void {\n    // Update the volume while transitioning so the user has a \"live preview\" of the desired target volume\n    this.controller.setMuted(false);\n    this.controller.setVolume(volume);\n  }\n\n  finish(volume: number): void {\n    if (volume === 0) {\n      // When the volume is zero we essentially mute the volume so we recall the volume from the beginning of the\n      // transition and mute the player instead. Recalling is necessary to return to the actual audio volume\n      // when unmuting.\n      // We must first recall the volume and then mute, because recalling sets the volume on the player\n      // and setting a player volume > 0 unmutes the player in v7.\n      this.controller.recallVolume();\n      this.controller.setMuted(true);\n    } else {\n      this.controller.setMuted(false);\n      this.controller.setVolume(volume);\n      this.controller.storeVolume();\n    }\n  }\n}","import { SubtitleRegionContainer, SubtitleLabel } from './components/subtitleoverlay';\nimport { VTTProperties, VTTRegionProperties } from 'bitmovin-player/types/subtitles/vtt/API';\nimport { DOM, Size } from './dom';\n\n// Our default height of a line\nconst lineHeight = 28;\n\n// Default relative line height\nconst lineHeightPercent = 5;\nlet lineCount: number = 1;\n\nconst defaultLineNumber = 21; // Our default amount of lines\n\nenum Direction {\n  Top = 'top',\n  Bottom = 'bottom',\n  Left = 'left',\n  Right = 'right',\n}\n\nenum VttVerticalWriting {\n  GrowingRight = 'lr',\n  GrowingLeft = 'rl',\n}\n\ntype VerticalWritingDirection = Direction.Left | Direction.Right;\n\nconst DirectionPair = new Map<Direction, Direction>([\n  [Direction.Top, Direction.Bottom],\n  [Direction.Bottom, Direction.Top],\n  [Direction.Left, Direction.Right],\n  [Direction.Right, Direction.Left],\n]);\n\n/**\n * Sets the default standardized styles for the Cue Box\n * https://w3.org/TR/webvtt1/#applying-css-properties\n */\nconst setDefaultVttStyles = (cueContainerDom: DOM, vtt: VTTProperties) => {\n  if (vtt.region) {\n    cueContainerDom.css('position', 'relative');\n    cueContainerDom.css('unicode-bidi', 'plaintext');\n  } else {\n    cueContainerDom.css('position', 'absolute');\n    cueContainerDom.css('overflow-wrap', 'break-word');\n    cueContainerDom.css('overflow', 'hidden');\n    cueContainerDom.css('flex-flow', 'column');\n  }\n  cueContainerDom.css('display', 'inline-flex');\n};\n\n/**\n * Align the Cue Box's line\n * https://w3.org/TR/webvtt1/#webvtt-cue-line-alignment\n */\nconst setVttLineAlign = (\n  cueContainerDom: DOM,\n  { lineAlign }: VTTProperties,\n  direction: Direction,\n  relativeCueBoxPosition: number) => {\n  switch (lineAlign) {\n    case 'center':\n      setCssForCenterLineAlign(\n        cueContainerDom, direction, relativeCueBoxPosition);\n      break;\n    case 'end':\n      setCssForEndLineAlign(\n        cueContainerDom, direction, relativeCueBoxPosition);\n  }\n};\n\n/**\n * Defines the line positioning of the Cue Box\n * https://w3.org/TR/webvtt1/#webvtt-cue-line\n */\nconst setVttLine = (\n  cueContainerDom: DOM,\n  vtt: VTTProperties,\n  direction: Direction,\n  subtitleOverLaySize: Size,\n) => {\n  const overlayReferenceEdge = DirectionPair.get(direction);\n  if (vtt.line === 'auto' && vtt.vertical) {\n    cueContainerDom.css(overlayReferenceEdge, '0');\n    return;\n  }\n  if (vtt.line === 'auto' && !vtt.vertical) {\n    return;\n  }\n\n  let relativeLinePosition = parseFloat(vtt.line as string);\n\n  if (vtt.snapToLines) {\n    let targetLine = Number(vtt.line);\n    if (targetLine < 0) {\n      targetLine = defaultLineNumber + targetLine;\n    }\n\n    const lineHeight = subtitleOverLaySize.height / defaultLineNumber;\n    const absoluteLinePosition = lineHeight * targetLine;\n    relativeLinePosition = (100 * absoluteLinePosition) / subtitleOverLaySize.height;\n  }\n\n  if (vtt.lineAlign !== 'end')\n    cueContainerDom.css(\n      overlayReferenceEdge, `${relativeLinePosition}%`);\n  setVttLineAlign(cueContainerDom, vtt, direction, relativeLinePosition);\n};\n\n/**\n * Defines the writing direction of the Cue Box\n * https://w3.org/TR/webvtt1/#webvtt-cue-writing-direction\n */\nconst setVttWritingDirectionAndCueBoxPositioning = (\n  cueContainerDom: DOM, vtt: VTTProperties,\n  subtitleOverlaySize: Size,\n) => {\n  switch (vtt.vertical) {\n  case '':\n    cueContainerDom.css('writing-mode', 'horizontal-tb');\n    cueContainerDom.css(Direction.Bottom, '0');\n    setVttLine(cueContainerDom, vtt, Direction.Bottom, subtitleOverlaySize);\n    break;\n  case VttVerticalWriting.GrowingRight:\n    setCueBoxPositionForVerticalWriting(\n      cueContainerDom, Direction.Right, vtt, subtitleOverlaySize);\n    break;\n  case VttVerticalWriting.GrowingLeft:\n    setCueBoxPositionForVerticalWriting(\n      cueContainerDom, Direction.Left, vtt, subtitleOverlaySize);\n    break;\n  }\n};\n\nconst setCueBoxPositionForVerticalWriting = (\n  cueContainerDom: DOM,\n  direction: VerticalWritingDirection,\n  vtt: VTTProperties,\n  subtitleOverlaySize: Size,\n) => {\n    const writingMode = direction === Direction.Right ?\n      'vertical-lr' : 'vertical-rl';\n\n    cueContainerDom.css('writing-mode', writingMode);\n    cueContainerDom.css(Direction.Top, '0');\n    setVttLine(cueContainerDom, vtt, direction, subtitleOverlaySize);\n};\n\n/**\n * Defines the Cue position alignment\n * https://w3.org/TR/webvtt1/#webvtt-cue-position-alignment\n */\nconst setVttPositionAlign = (cueContainerDom: DOM, vtt: VTTProperties, direction: Direction) => {\n  // https://www.w3.org/TR/webvtt1/#webvtt-cue-position\n  if (vtt.position === 'auto') {\n    cueContainerDom.css(direction, '0');\n  } else {\n    switch (vtt.positionAlign) {\n      case 'line-left':\n        cueContainerDom.css(direction, `${vtt.position}%`);\n        cueContainerDom.css(DirectionPair.get(direction), 'auto');\n        cueContainerDom.css('justify-content', 'flex-start');\n        break;\n      case 'center':\n        cueContainerDom.css(direction, `${vtt.position - vtt.size / 2}%`);\n        cueContainerDom.css(DirectionPair.get(direction), 'auto');\n        cueContainerDom.css('justify-content', 'center');\n        break;\n      case 'line-right':\n        cueContainerDom.css(direction, 'auto');\n        cueContainerDom.css(DirectionPair.get(direction), `${100 - vtt.position}%`);\n        cueContainerDom.css('justify-content', 'flex-end');\n        break;\n      default:\n        cueContainerDom.css(direction, `${vtt.position}%`);\n        cueContainerDom.css('justify-content', 'flex-start');\n    }\n  }\n};\n\nconst countLines = (innerHtml: string) =>\n  innerHtml.split('<br />').length;\n\nconst setCssForCenterLineAlign = (\n  cueContainerDom: DOM,\n  direction: Direction,\n  relativeCueBoxPosition: number) => {\n  switch (direction) {\n    case Direction.Bottom:\n      cueContainerDom.css('transform', 'translateY(-50%)');\n      break;\n    case Direction.Left:\n      cueContainerDom.css('transform', 'translateX(50%)');\n      break;\n    case Direction.Right:\n      cueContainerDom.css('transform', 'translateX(-50%)');\n      break;\n  }\n};\n\nconst setCssForEndLineAlign = (\n  cueContainerDom: DOM,\n  direction: Direction,\n  offset: number) => {\n      const opositeToOverlayReferenceEdge = direction;\n      cueContainerDom.css(opositeToOverlayReferenceEdge, `${100 - offset}%`);\n};\n\nexport namespace VttUtils {\n  export const setVttCueBoxStyles = (\n    cueContainer: SubtitleLabel,\n    subtitleOverlaySize: Size,\n  ) => {\n    const vtt = cueContainer.vtt;\n    const cueContainerDom = cueContainer.getDomElement();\n\n\n    setDefaultVttStyles(cueContainerDom, vtt);\n\n    lineCount = countLines(cueContainer.getText());\n    setVttWritingDirectionAndCueBoxPositioning(cueContainerDom, vtt, subtitleOverlaySize);\n\n    // https://w3.org/TR/webvtt1/#webvtt-cue-text-alignment\n    const textAlign = vtt.align === 'middle' ? 'center' : vtt.align;\n    cueContainerDom.css('text-align', textAlign);\n\n    // https://w3.org/TR/webvtt1/#webvtt-cue-size\n    const containerSize = vtt.size;\n    if (vtt.vertical === '') {\n      cueContainerDom.css('width', `${containerSize}%`);\n      setVttPositionAlign(cueContainerDom, vtt, Direction.Left);\n    } else {\n      cueContainerDom.css('height', `${containerSize}%`);\n      setVttPositionAlign(cueContainerDom, vtt, Direction.Top);\n    }\n  };\n\n  /** https://www.w3.org/TR/webvtt1/#regions\n   *  https://www.speechpad.com/captions/webvtt#toc_16\n   */\n  export const setVttRegionStyles = (\n    regionContainer: SubtitleRegionContainer,\n    region: VTTRegionProperties,\n    overlaySize: Size,\n  ) => {\n    const regionContainerDom = regionContainer.getDomElement();\n    const regionPositionX = overlaySize.width * region.viewportAnchorX / 100 - ((overlaySize.width * region.width / 100) * region.regionAnchorX / 100);\n    const regionPositionY = overlaySize.height * region.viewportAnchorY / 100 - ((region.lines * lineHeight) * region.regionAnchorY / 100);\n    regionContainerDom.css('position', 'absolute');\n    regionContainerDom.css('overflow', 'hidden');\n    regionContainerDom.css('width', `${region.width}%`);\n    regionContainerDom.css(Direction.Left, `${regionPositionX}px`);\n    regionContainerDom.css(Direction.Right, 'unset');\n    regionContainerDom.css(Direction.Top, `${regionPositionY}px`);\n    regionContainerDom.css(Direction.Bottom, 'unset');\n    regionContainerDom.css('height', `${region.lines * lineHeight}px`);\n  };\n}\n"]}