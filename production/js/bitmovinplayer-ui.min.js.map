{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/custom/ts/components/gobackbutton.ts","src/custom/ts/components/playbackjumpbutton.ts","src/custom/ts/components/playbackjumpoverlay.ts","src/custom/ts/components/quanteecconsumptions.ts","src/custom/ts/components/radiomode/radiomodetogglebutton.ts","src/ts/arrayutils.ts","src/ts/audiotrackutils.ts","src/ts/browserutils.ts","src/ts/components/adclickoverlay.ts","src/ts/components/admessagelabel.ts","src/ts/components/adskipbutton.ts","src/ts/components/airplaytogglebutton.ts","src/ts/components/audioqualityselectbox.ts","src/ts/components/audiotracklistbox.ts","src/ts/components/audiotrackselectbox.ts","src/ts/components/bufferingoverlay.ts","src/ts/components/button.ts","src/ts/components/caststatusoverlay.ts","src/ts/components/casttogglebutton.ts","src/ts/components/castuicontainer.ts","src/ts/components/clickoverlay.ts","src/ts/components/closebutton.ts","src/ts/components/component.ts","src/ts/components/container.ts","src/ts/components/controlbar.ts","src/ts/components/errormessageoverlay.ts","src/ts/components/fullscreentogglebutton.ts","src/ts/components/hugeplaybacktogglebutton.ts","src/ts/components/hugereplaybutton.ts","src/ts/components/itemselectionlist.ts","src/ts/components/label.ts","src/ts/components/listbox.ts","src/ts/components/listselector.ts","src/ts/components/metadatalabel.ts","src/ts/components/pictureinpicturetogglebutton.ts","src/ts/components/playbackspeedselectbox.ts","src/ts/components/playbacktimelabel.ts","src/ts/components/playbacktogglebutton.ts","src/ts/components/playbacktoggleoverlay.ts","src/ts/components/recommendationoverlay.ts","src/ts/components/replaybutton.ts","src/ts/components/seekbar.ts","src/ts/components/seekbarbufferlevel.ts","src/ts/components/seekbarcontroller.ts","src/ts/components/seekbarlabel.ts","src/ts/components/selectbox.ts","src/ts/components/settingspanel.ts","src/ts/components/settingspanelitem.ts","src/ts/components/settingspanelpage.ts","src/ts/components/settingspanelpagebackbutton.ts","src/ts/components/settingspanelpagenavigatorbutton.ts","src/ts/components/settingspanelpageopenbutton.ts","src/ts/components/settingstogglebutton.ts","src/ts/components/spacer.ts","src/ts/components/subtitlelistbox.ts","src/ts/components/subtitleoverlay.ts","src/ts/components/subtitleselectbox.ts","src/ts/components/subtitlesettings/backgroundcolorselectbox.ts","src/ts/components/subtitlesettings/backgroundopacityselectbox.ts","src/ts/components/subtitlesettings/characteredgeselectbox.ts","src/ts/components/subtitlesettings/fontcolorselectbox.ts","src/ts/components/subtitlesettings/fontfamilyselectbox.ts","src/ts/components/subtitlesettings/fontopacityselectbox.ts","src/ts/components/subtitlesettings/fontsizeselectbox.ts","src/ts/components/subtitlesettings/subtitlesettingselectbox.ts","src/ts/components/subtitlesettings/subtitlesettingslabel.ts","src/ts/components/subtitlesettings/subtitlesettingsmanager.ts","src/ts/components/subtitlesettings/subtitlesettingspanelpage.ts","src/ts/components/subtitlesettings/subtitlesettingsresetbutton.ts","src/ts/components/subtitlesettings/windowcolorselectbox.ts","src/ts/components/subtitlesettings/windowopacityselectbox.ts","src/ts/components/timelinemarkershandler.ts","src/ts/components/titlebar.ts","src/ts/components/togglebutton.ts","src/ts/components/tvnoisecanvas.ts","src/ts/components/uicontainer.ts","src/ts/components/videoqualityselectbox.ts","src/ts/components/volumecontrolbutton.ts","src/ts/components/volumeslider.ts","src/ts/components/volumetogglebutton.ts","src/ts/components/vrtogglebutton.ts","src/ts/components/watermark.ts","src/ts/demofactory.ts","src/ts/dom.ts","src/ts/errorutils.ts","src/ts/eventdispatcher.ts","src/ts/focusvisibilitytracker.ts","src/ts/groupplaybackapi.ts","src/ts/guid.ts","src/ts/imageloader.ts","src/ts/localization/i18n.ts","src/ts/localization/languages/de.json","src/ts/localization/languages/en.json","src/ts/localization/languages/es.json","src/ts/main.ts","src/ts/mobilev3playerapi.ts","src/ts/playerutils.ts","src/ts/spatialnavigation/ListNavigationGroup.ts","src/ts/spatialnavigation/gethtmlelementsfromcomponents.ts","src/ts/spatialnavigation/keymap.ts","src/ts/spatialnavigation/navigationalgorithm.ts","src/ts/spatialnavigation/navigationgroup.ts","src/ts/spatialnavigation/nodeeventsubscriber.ts","src/ts/spatialnavigation/rootnavigationgroup.ts","src/ts/spatialnavigation/seekbarhandler.ts","src/ts/spatialnavigation/spatialnavigation.ts","src/ts/spatialnavigation/typeguards.ts","src/ts/spatialnavigation/types.ts","src/ts/storageutils.ts","src/ts/stringutils.ts","src/ts/subtitleutils.ts","src/ts/timeout.ts","src/ts/uifactory.ts","src/ts/uimanager.ts","src/ts/uiutils.ts","src/ts/volumecontroller.ts","src/ts/vttutils.ts"],"names":["f","g","exports","module","define","amd","window","global","self","this","bitmovin","playerui","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_super","button_1","GoBackButton","Button","__extends","prototype","configure","player","uimanager","_this","onClick","subscribe","customMessageHandler","sendAsynchronous","on","PlayerEvent","ViewModeChanged","getViewMode","hide","show","config","error","defaultConfig","cssClasses","text","ariaLabel","mergeConfig","i18n_1","playerutils_1","PlaybackJumpButtons","liveStreamDetector","PlayerUtils","LiveStreamDetector","onLiveChanged","sender","args","isLive","onControlsShow","onControlsHide","detect","currentTime","getCurrentTime","duration","getDuration","newTime","skipTime","Math","max","min","seek","cssClass","PlaybackForwardButton","__assign","i18n","getLocalizer","PlaybackRewindButton","container_1","playbackjumpbutton_1","PlaybackJumpControlsOverlay","Container","forwardButton","rewindButton","components","QuanteecConsumptions","isQuanteecDisplayed","togglebutton_1","RadioModeToggleButton","ToggleButton","initialState","active","JSON","stringify","activated","isRadioModeActive","ArrayUtils","remove","array","item","index","indexOf","splice","AudioTrackSwitchHandler","element","addAudioTrack","event","audioTrack","track","listElement","hasItem","id","addItem","label","removeAudioTrack","removeItem","selectCurrentAudioTrack","currentAudioTrack","getAudio","selectItem","refreshAudioTracks","audioTracks","getAvailableAudio","synchronizeItems","map","key","bindSelectionEvent","bindPlayerEvents","onItemSelected","_","value","setAudio","AudioChanged","SourceUnloaded","PeriodSwitched","AudioAdded","AudioRemoved","getConfig","events","onUpdated","BrowserUtils","Object","defineProperty","windowExists","navigator","userAgent","test","isHisense","platform","includes","maxTouchPoints","msMaxTouchPoints","clickoverlay_1","AdClickOverlay","ClickOverlay","adFinishedHandler","setUrl","clickThroughCallback","AdStarted","ad","clickThroughUrl","clickThroughUrlOpened","AdFinished","AdSkipped","AdError","pause","label_1","stringutils_1","AdMessageLabel","Label","adEndHandler","off","TimeChanged","updateMessageHandler","setText","StringUtils","replaceAdMessagePlaceholders","performLocalization","uiConfig","message","AdSkipButton","updateSkipMessageHandler","untilSkippableMessage","skippableMessage","skipOffset","disable","enable","skippableAfter","ads","skip","AirPlayToggleButton","airPlayAvailableHandler","isAirplayAvailable","showAirplayTargetPicker","console","log","airPlayChangedHandler","isAirplayActive","AirplayAvailable","AirplayChanged","selectbox_1","AudioQualitySelectBox","SelectBox","updateAudioQualities","audioQualities","getAvailableAudioQualities","clearItems","_i","audioQualities_1","audioQuality","selectCurrentAudioQuality","getAudioQuality","setAudioQuality","AudioQualityChanged","AudioQualityAdded","AudioQualityRemoved","listbox_1","audiotrackutils_1","AudioTrackListBox","ListBox","AudioTrackSelectBox","component_1","timeout_1","BufferingOverlay","showOverlay","overlayShowTimeout","start","hideOverlay","clear","Timeout","showDelayMs","StallStarted","StallEnded","Play","Playing","Paused","Seek","Seeked","TimeShift","TimeShifted","isStalled","indicators","Component","tag","role","hidden","dom_1","eventdispatcher_1","toDomElement","buttonElementAttributes","aria-label","class","getCssClasses","type","aria-pressed","tabindex","tabIndex","toString","buttonElement","DOM","append","prefixCss","html","onClickEvent","getDomElement","find","buttonEvents","dispatch","getEvent","EventDispatcher","CastStatusOverlay","CastWaitingForDevice","castDeviceName","castPayload","deviceName","statusLabel","CastStarted","CastStopped","CastToggleButton","isCastAvailable","isCasting","castStop","castVideo","uicontainer_1","CastUIContainer","UIContainer","isUiShown","showUi","castUiHideTimeout","hideDelay","showUiPermanently","showUiWithTimeout","isPlaying","release","initialize","url","data","open","getUrl","undefined","CloseButton","target","guid_1","disabled","isHidden","isDisabled","onShow","onComponentShow","onHide","onComponentHide","onHoverChangedEvent","hasDomElement","Boolean","setAriaLabel","setAriaAttr","name","attr","concat","defaults","base","assign","css","join","trim","cssClassOrId","cssPrefix","addClass","CLASS_HIDDEN","onHideEvent","removeClass","onShowEvent","isShown","toggleHidden","CLASS_DISABLED","onDisabledEvent","onEnabledEvent","isEnabled","isHovered","hovered","componentEvents","onEnabled","onDisabled","onHoverChanged","Guid","next","arrayutils_1","addComponent","component","push","componentsToAdd","removeComponent","componentsToRemove","getComponents","removeComponents","_a","slice","updateComponents","shift","innerContainerElement","containerElement","innerContainer","initialComponent","uiutils_1","spacer_1","browserutils_1","settingspanel_1","ControlBar","hoverStackCount","isSettingsPanelShown","disableAutoHideWhenHovered","isMobile","UIUtils","traverseTree","Spacer","SettingsPanel","onPreviewControlsHide","cancel","tvnoisecanvas_1","errorutils_1","mobilev3playerapi_1","gobackbutton_1","ErrorMessageOverlay","errorEventHandler","handleErrorMessage","customizedMessage","errorMessages","customMessage","messages","display","isMobileV3PlayerAPI","MobileV3PlayerEvent","PlayerError","ErrorUtils","defaultMobileV3ErrorMessageTranslator","SourceError","defaultWebErrorMessageTranslator","SourceLoaded","tvNoiseBackground","stop","errorMessage","errorLabel","TvNoiseCanvas","FullscreenToggleButton","fullscreenStateHandler","ViewMode","Fullscreen","fullscreenAvailabilityChangedHandler","isFullScreenAvailable","isViewModeAvailable","ViewModeAvailabilityChanged","targetViewMode","Inline","setViewMode","playbacktogglebutton_1","HugePlaybackToggleButton","PlaybackToggleButton","togglePlayback","isPlayInitiated","play","toggleFullscreen","suppressPlayButtonTransitionAnimation","setTransitionAnimationsEnabled","onToggle","subscribeOnce","firstPlay","enterFullscreenOnInitialPlayback","clickTime","doubleClickTime","isAutoplayEnabled","now","Date","setTimeout","Warning","WarningCode","PLAYBACK_COULD_NOT_BE_STARTED","playback","autoplay","isAutoplayUpcoming","getSource","enabled","noTransitionAnimationsClass","hasClass","HugeReplayButton","listselector_1","ItemSelectionList","ListSelector","isActive","items","updateDomItems","selectedValue","selectedListItem","empty","listItem","CLASS_SELECTED","deselectItem","this_1","String","onItemSelectedEvent","onItemAddedEvent","selectedItem","onItemRemovedEvent","tagName","for","labelElement","localizedText","onTextChangedEvent","getText","clearText","isEmpty","labelEvents","onTextChanged","onItemAdded","addListBoxDomItem","onItemRemoved","removeListBoxDomItem","refreshSelectedItem","listBoxElement","createListBoxDomItems","buildListBoxItemButton","ListBoxItemButton","getComponentForKey","c","listBoxItemButton_1","newItem","getItemForKey","handleSelectionChange","onClass","offClass","getItemIndex","parseInt","getItems","sortedInsert","filter","translator","findIndex","entry","getSelectedItem","newItems","forEach","items_1","itemCount","keys","listSelectorEvents","MetadataLabelContent","MetadataLabel","init","content","Title","uiconfig","metadata","title","Description","description","toLowerCase","PictureInPictureToggleButton","pictureInPictureStateHandler","PictureInPicture","pictureInPictureAvailabilityChangedHandler","isPictureInPictureAvailable","PlaybackSpeedSelectBox","setDefaultValue","playbackSpeed","getPlaybackSpeed","setSpeed","addDefaultItems","setPlaybackSpeed","parseFloat","PlaybackSpeedChanged","speed","customItems","defaultPlaybackSpeeds","sort","PlaybackTimeLabelMode","PlaybackTimeLabel","minWidth","min-width","updateTimeFormatBasedOnDuration","live","liveCssClass","liveEdgeCssClass","liveClickHandler","timeShift","updateLiveTimeshiftState","isTimeshifted","isTimeshiftAvailable","getTimeShift","getMaxTimeShift","isPaused","playbackTimeHandler","hideInLivePlayback","unsubscribe","Infinity","setTime","getCurrentTimeRelativeToSeekableRange","width","timeFormat","abs","FORMAT_HHMMSS","FORMAT_MMSS","Ready","playbackSeconds","durationSeconds","secondsToTime","totalTime","timeLabelMode","CurrentTime","TotalTime","CurrentAndTotalTime","RemainingTime","remainingTime","setTimeFormat","handleClickEvent","playbackStateHandler","isSeeking","updateLiveState","isTimeShiftAvailable","CLASS_STOPTOGGLE","timeShiftDetector","PlaybackFinished","TimeShiftAvailabilityDetector","onTimeShiftAvailabilityChanged","onSeek","onSeeked","onAriaLabel","offAriaLabel","hugeplaybacktogglebutton_1","PlaybackToggleOverlay","playbackToggleButton","hugereplaybutton_1","RecommendationOverlay","setupRecommendations","clearRecommendations","recommendations","recommendations_1","RecommendationItem","itemConfig","replayButton","itemElement","href","background-image","thumbnail","bgElement","titleElement","timeElement","ReplayButton","hasEnded","groupplaybackapi_1","seekbarcontroller_1","timelinemarkershandler_1","seekbarbufferlevel_1","SeekBar","hasLabel","getLabel","setAriaSliderMinMax","setAriaSliderValues","ariaValueText","seekBarType","SeekBarType","Live","timeshiftValue","ceil","Vod","secondsToText","floor","getPlaybackPositionPercentage","getRelativeCurrentTime","updateBufferLevel","playbackPositionPercentage","bufferLoadedPercentageLevel","getMinBufferLevel","setBufferPosition","configureSeek","scrubbing","isPlayerSeeking","suspension","playbackPositionHandler","isGroupPlaybackAPIAvailable","hasTimeShift","switchVisibility","setPosition","seekBarBackdrop","SeekBarController","keyStepIncrements","volumeController","setSeekBarControls","forceUpdate","isUserSeeking","SegmentRequestFinished","setPlaybackPosition","isInInitialStartupState","smoothPlaybackPositionUpdateIntervalMs","SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED","isNeitherPausedNorPlaying","configureLivePausedTimeshiftUpdater","onPlayerSeek","setSeeking","onPlayerSeeked","groupPlayback","hasJoined","beginSuspension","GroupPlaybackSuspensionReason","UserIsScrubbing","onSeekPreview","enableSeekPreview","subscribeRateLimited","seekWhileScrubbing","percentage","proposedPlaybackTime","getTargetSeekPosition","endSuspension","refreshPlaybackPosition","smoothPlaybackPositionUpdater","timeShiftAvailable","PlayerResized","onConfigured","seekbarSnappingRange","snappingRange","setSeekPosition","configureSmoothPlaybackPositionUpdater","initializeTimelineMarkers","Volume","timelineMarkerConfig","timelineMarkersHandler","TimelineMarkersHandler","seekBar","seekBarMarkersContainer","pausedTimeshiftUpdater","startSmoothPlaybackPositionUpdater","currentTimeSeekBar","stopSmoothPlaybackPositionUpdater","currentTimePlayer","updateIntervalMs","PlayerAPINotAvailableError","currentTimeDelta","seekBarContainer","vertical","seekBarBufferLevel","seekBarPlaybackPosition","seekBarBufferPosition","seekBarPlaybackPositionMarker","seekBarSeekPosition","seekBarChapterMarkersContainer","seeking","mouseTouchMoveHandler","preventDefault","vr","stopPropagation","targetPercentage","getOffset","onSeekPreviewEvent","mouseTouchUpHandler","document","snappedChapter","getMarkerAtPosition","onSeekedEvent","position","isTouchEvent","isTouchSupported","onSeekEvent","getHorizontalOffset","eventPageX","elementOffsetPx","offset","left","widthPx","sanitizeOffset","getVerticalOffset","eventPageY","top","height","changedTouches","touches","pageY","pageX","MouseEvent","warn","percent","px","style","transform","-ms-transform","-webkit-transform","scale","CLASS_SEEKING","seekBarEvents","snappedMarker","seekPositionPercentage","marker","TouchEvent","seekableRangeStart","maxTimeShift","getSeekableRangeStart","targetPlaybackPosition","leftRight","upDown","playerDuration","videoBufferLength","getVideoBufferLength","audioBufferLength","getAudioBufferLength","bufferLength","Number","MAX_VALUE","coerceValueIntoRange","range","cb","arrowKeyControls","currentValue","valueUpdate","controlValue","right","up","down","home","end","seekBarControls","volumeTransition","startTransition","getVolume","finish","bind","domElement","controls","keyCode","KeyCode","LeftArrow","RightArrow","UpArrow","DownArrow","Home","End","Space","imageloader_1","SeekBarLabel","setTitleText","setThumbnail","uiManager","handleSeekPreview","timeLabel","seconds","titleLabel","thumbnailElement","thumbnailImageLoader","load","x","thumbnailCssSprite","thumbnailCssSingleImage","sizeX","sizeY","offsetX","offsetY","y","aspectRatio","padding-bottom","background-size","background-position","appliedMarkerCssClasses","targetTimeShift","currentTimeShift","timeShiftPreview","wallClockTime","getThumbnail","time","ImageLoader","selectElement","val","optionElement","NavigationDirection","settingspanelpage_1","hideHoveredSelectBoxes","hideTimeout","reset","activePage","onInactiveEvent","resetNavigation","onActiveEvent","getRootPage","onSettingsStateChanged","onSettingsStateChangedEvent","updateActivePageClass","getActivePage","setActivePageIndex","setActivePage","getPages","targetPage","navigateToPage","Forwards","pageTransitionAnimation","popToRootSettingsPanelPage","popSettingsPanelPage","navigationStack","Backwards","rootPageHasActiveSettings","hasActiveSettings","SettingsPanelPage","settingsPanelEvents","page","CLASS_ACTIVE_PAGE","resetNavigationOnShow","sourcePage","rootPage","animateNavigation","direction","skipAnimation","pop","settingsPanelDomElement","settingsPanelWidth","settingsPanelHeight","clone","targetSettingsPanelHeight","settingsPanelHTMLElement","get","scrollWidth","scrollHeight","targetPageHtmlElement","cloneNode","parentNode","appendChild","targetSettingsPanelWidth","parentElement","removeChild","forceBrowserReflow","offsetLeft","getComputedItems","selectBox_1","oldDisplay_1","setting","requestAnimationFrame","allItems","apply","videoqualityselectbox_1","audioqualityselectbox_1","playbackspeedselectbox_1","SettingsPanelItem","handleConfigItemChanged","minItemsToDisplay","VideoQualitySelectBox","hasAutoItem","playbackSpeedSelectionEnabled","onActiveChangedEvent","settingsPanelItemEvents","onActiveChanged","settingspanelitem_1","settingsStateChangedHandler","lastShownItem","CLASS_LAST","settingsPanelPageEvents","activeItems","onActive","isIOS","isMacIntel","focusToFirstInput","onInactive","settingspanelpagenavigatorbutton_1","SettingsPanelPageBackButton","SettingsPanelPageNavigatorButton","popPage","container","pushTargetPage","SettingsPanelPageOpenButton","SettingsToggleButton","settingsPanel","visibleSettingsPanels","autoHideWhenNoActiveSettings","settingsPanelItemsChangedHandler","subtitleutils_1","SubtitleListBox","SubtitleSwitchHandler","controlbar_1","vttutils_1","SubtitleOverlay","subtitleClearHandler","subtitleContainerManager","subtitleManager","clearInactiveCues","toRemove","removeLabel","ActiveSubtitleManager","SubtitleRegionContainerManager","CueEnter","generateLabel","cueEnter","preprocessLabelEventCallback","previewSubtitleActive","previewSubtitle","addLabel","size","forceSubtitlesIntoViewContainer","handleSubtitleCropping","CueUpdate","labelToReplace","cueUpdate","replaceLabel","CueExit","labelToRemove","cueExit","hasCues","SubtitleEnabled","SubtitleDisabled","CLASS_CONTROLBAR_VISIBLE","configureCea608Captions","detectCroppedSubtitleLabel","parent","childRect","getBoundingClientRect","parentRect","bottom","labelDomElement","cropDetection","removeCss","row","column","SubtitleLabel","generateImageTagText","image","vtt","region","regionStyle","updateCEA608FontSize","dummyLabel","font-size","line-height","visibility","dummyLabelCharWidth","dummyLabelCharHeight","fontSizeRatio","subtitleOverlayWidth","subtitleOverlayHeight","fontLetterSpacing","CEA608_NUM_COLUMNS","CEA608_NUM_ROWS","fontSize","letter-spacing","CLASS_CEA_608","fontSizeCalculationRequired","CEA608_COLUMN_OFFSET","CEA608_ROW_OFFSET","enablePreviewSubtitleLabel","removePreviewSubtitleLabel","calculateId","addCueToMap","popCueFromMap","activeSubtitleCueMap","activeSubtitleCueCount","activeSubtitleCues","activeSubtitleCue","removedCues","cue","imageData","imgTag","src","outerHTML","getCues","cueCount","getRegion","regionContainerId","regionName","overlaySize","subtitleRegionContainers","regionContainerId_1","regionContainer","SubtitleRegionContainer","subtitleOverlay","previousLabel","newLabel","labelToAdd","labelCount","VttUtils","setVttRegionStyles","setVttCueBoxStyles","SubtitleSelectBox","subtitlesettingselectbox_1","BackgroundColorSelectBox","SubtitleSettingSelectBox","setColorAndOpacity","settingsManager","backgroundColor","isSet","backgroundOpacity","toggleOverlayClass","onChanged","property","BackgroundOpacitySelectBox","CharacterEdgeSelectBox","characterEdge","FontColorSelectBox","fontColor","fontOpacity","FontFamilySelectBox","fontFamily","FontOpacitySelectBox","FontSizeSelectBox","currentCssClass","overlay","SubtitleSettingsLabel","opener","storageutils_1","SubtitleSettingsManager","propertyName","_properties","SubtitleSettingsProperty","windowColor","windowOpacity","userSettings","localStorageKey","DummyComponent","instance","save","StorageUtils","setObject","getObject","_instance","_value","onChangedEvent","_onChanged","_manager","manager","subtitlesettingsmanager_1","fontsizeselectbox_1","fontfamilyselectbox_1","fontcolorselectbox_1","fontopacityselectbox_1","characteredgeselectbox_1","backgroundcolorselectbox_1","backgroundopacityselectbox_1","windowcolorselectbox_1","windowopacityselectbox_1","subtitlesettingsresetbutton_1","settingspanelpagebackbutton_1","SubtitleSettingsPanelPage","WindowColorSelectBox","WindowOpacitySelectBox","SubtitleSettingsResetButton","getSeekBarWidth","markersContainer","timelineMarkers","configureMarkers","clearMarkers","AdBreakStarted","AdBreakFinished","updateMarkers","updateMarkersDOM","onRelease","intervalMarkerMatch","positionMarkerMatch","removeMarkerFromConfig","markers","_marker","filterRemovedMarkers","seekbarMarker","matchingMarker","removeMarkerFromDOM","shouldProcessMarkers","validToProcess","hasMarkers","markerPosition","markerDuration","getSeekableRangeRespectingLive","isNaN","updateMarkerDOM","newMarker","createMarkerDOM","getMarkerCssProperties","seekBarWidthPx","positionInPx","cssProperties","markerWidthPx","round","imageElement_1","markerClasses","markerElement","data-marker-time","data-marker-title","imageUrl","handler","Destroy","metadatalabel_1","TitleBar","shouldBeShown","hasMetadataText","checkMetadataTextAndUpdateVisibility","keepHiddenWithoutMetadata","isOff","onState","onToggleEvent","onToggleOnEvent","isOn","onToggleOffEvent","toggle","toggleButtonEvents","onToggleOn","onToggleOff","canvas","canvasElement","canvasContext","getContext","noiseAnimationWindowPos","canvasHeight","lastFrameUpdate","canvasWidth","renderFrame","useAnimationFrame","cancelAnimationFrame","clearTimeout","frameUpdateHandlerId","frameInterval","getTime","currentPixelOffset","noiseImage","createImageData","random","interferenceHeight","putImageData","scheduleNextRender","userInteractionEventSource","configureUIShowHide","configurePlayerStates","isFirstTouch","playerState","hidingPrevented","hidePlayerStateExceptions","uiHideTimeout","hideUi","previewHideEventArgs","userInteractionEvents","playerStateChange","state","enumName","stateClassNames","PlayerState","STATE_PREFIX","updateState","removeStates","updateLayoutSizeClasses","Idle","Prepared","Finished","getState","FULLSCREEN","BUFFERING","REMOTE_CONTROL","CONTROLS_HIDDEN","CONTROLS_SHOWN","substring","getContainer","createElement","flex","updateVideoQualities","videoQualities","getAvailableVideoQualities","hasAuto","getStreamType","videoQualities_1","videoQuality","selectCurrentVideoQuality","getVideoQuality","setVideoQuality","VideoQualityChanged","VideoQualityAdded","VideoQualityRemoved","volumeslider_1","volumetogglebutton_1","VolumeControlButton","volumeToggleButton","getVolumeToggleButton","volumeSlider","getVolumeSlider","volumeSliderHovered","volumeSliderHideTimeout","VolumeToggleButton","VolumeSlider","seekbar_1","setVolumeAriaSliderValues","hideIfVolumeControlProhibited","detectVolumeControlAvailability","muted","volume","updateVolumeWhileScrubbing","dummyVideoElement","update","volumeLevelTens","toggleMuted","VRToggleButton","vrStateHandler","ev","VR_RENDERING_ERROR","isVRConfigured","isVRStereoAvailable","getStereo","vrButtonVisibilityHandler","source","VRStereoChanged","setStereo","Watermark","vrtogglebutton_1","settingstogglebutton_1","playbacktimelabel_1","airplaytogglebutton_1","errormessageoverlay_1","casttogglebutton_1","fullscreentogglebutton_1","recommendationoverlay_1","caststatusoverlay_1","subtitleoverlay_1","seekbarlabel_1","playbacktoggleoverlay_1","pictureinpicturetogglebutton_1","uimanager_1","titlebar_1","bufferingoverlay_1","subtitlelistbox_1","audiotracklistbox_1","uifactory_1","DemoFactory","buildDemoWithSeparateAudioSubtitlesButtons","subtitleListBox","audioTrackListBox","UIManager","ui","UIFactory","modernSmallScreenAdsUI","condition","context","documentWidth","isAd","adRequiresUi","modernAdsUI","modernSmallScreenUI","radioModeAvailable","subtitleSettingsPanel","audioTrackSettingsPanel","controlBar","something","attributes","Array","HTMLElement","elements","Document","attributeName","attributeValue","setAttribute","findChildElements","findChildElementsOfElement","selector","childElements","querySelectorAll","allChildElements","inputElements","focus","scrollTo","arguments","setHtml","getHtml","innerHTML","HTMLSelectElement","HTMLInputElement","attribute","setAttr","getAttr","removeAttr","removeAttribute","getAttribute","dataAttribute","setData","getData","childElement","elementRect","htmlRect","body","offsetWidth","offsetHeight","eventName","eventHandler","split","addEventListener","removeEventListener","className","classNames","classList","add","replace","RegExp","contains","propertyNameOrCollection","setCss","getCss","setCssCollection","elementIndex","removeProperty","getComputedStyle","ruleValueCollection","defaultErrorMessages","1000","1001","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1200","1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1300","1301","1302","1303","1304","1400","1401","1402","1403","1404","2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014","2100","2101","3000","3001","3002","3003","3004","3100","listeners","listener","EventListenerWrapper","rateMs","RateLimitedEventListenerWrapper","subscribedListener","unsubscribeAll","listenersToRemove","listeners_1","fire","isOnce","listenersToRemove_1","eventListener","once","shouldFireEvent","rateLimitTimout","fireSuper","rateLimitingEventListener","startRateLimiting","lastSeenEvent","FocusVisibleCssClassName","FocusVisibilityTracker","bitmovinUiPrefix","lastInteractionWasKeyboard","onKeyDown","metaKey","altKey","ctrlKey","onMouseOrPointerOrTouch","onFocus","isHtmlElement","onBlur","eventHandlerMap","mousedown","pointerdown","touchstart","keydown","blur","registerEventListeners","DOMTokenList","event_1","unregisterEventListeners","event_2","guid","loadedCallback","state_1","loaded","callLoadedCallback","de_json_1","__importDefault","en_json_1","es_json_1","defaultLocalizationConfig","defaultVocabularies","en","default","de","es","language","vocabularies","I18n","setConfig","mergedConfig","detectBrowserLanguage","mergeVocabulariesWithDefaultVocabularies","initializeLanguage","initializeVocabulary","containsLanguage","hasOwnProperty","rawVocabularies","reduce","mergedVocabularies","vocabulary","browserLanguageDetectionEnabled","userLanguage","shortenedUserLanguage","vocab","lang","replaceVariableWithPlaceholderIfExists","matches","match","m","str","vocabularyString","settings.video.quality","settings.audio.quality","settings.audio.track","playPause","close","settings.audio.mute","settings.audio.volume","pictureInPicture","appleAirplay","googleCast","settings","fullscreen","settings.subtitles","settings.subtitles.font.size","settings.subtitles.font.family","settings.subtitles.font.color","settings.subtitles.font.opacity","settings.subtitles.characterEdge","settings.subtitles.background.color","settings.subtitles.background.opacity","settings.subtitles.window.color","settings.subtitles.window.opacity","settings.time.hours","settings.time.minutes","settings.time.seconds","back","replay","ads.remainingTime","colors.white","colors.black","colors.red","colors.green","colors.blue","colors.yellow","subtitle.example","subtitle.select","playingOn","connectingTo","watermarkLink","seekBar.value","seekBar.timeshift","seekBar.durationText","colors.cyan","colors.magenta","settings.subtitles.characterEdge.raised","settings.subtitles.characterEdge.depressed","settings.subtitles.characterEdge.uniform","settings.subtitles.characterEdge.dropshadowed","settings.subtitles.font.family.monospacedserif","settings.subtitles.font.family.proportionalserif","settings.subtitles.font.family.monospacedsansserif","settings.subtitles.font.family.proportionalsansserif","settings.subtitles.font.family.casual","settings.subtitles.font.family.cursive","settings.subtitles.font.family.smallcapital","auto","normal","version","enumerable","UIInstanceManager","demofactory_1","spatialnavigation_1","navigationgroup_1","SpatialNavigation","rootnavigationgroup_1","NavigationGroup","ListNavigationGroup_1","RootNavigationGroup","ListNavigationGroup","ListOrientation","itemselectionlist_1","watermark_1","audiotrackselectbox_1","subtitleselectbox_1","volumecontrolbutton_1","adskipbutton_1","admessagelabel_1","adclickoverlay_1","castuicontainer_1","closebutton_1","subtitlesettingslabel_1","settingspanelpageopenbutton_1","subtitlesettingspanelpage_1","replaybutton_1","isRadioModeAvailable","set","CustomEvent","detail","dispatchEvent","TypeError","timeShiftAvailabilityChangedEvent","liveDetector","liveChangedEvent","isAndroid","isChrome","DurationChanged","defaultValue","getSeekableRange","currentTimeshift","maxTimeshift","timeShiftAvailableNow","liveNow","types_1","handleAction","action","Action","SELECT","BACK","handleNavigation","listNavigationDirections","orientation","__spreadArray","Vertical","Direction","UP","DOWN","Horizontal","LEFT","RIGHT","typeguards_1","getHtmlElementsFromComponents","htmlElements","resolveAllComponents","childComponents","containerOrComponent","isContainer","isComponent","isListBox","children","TizenKeyMap","isApplicable","isTizen","keyCodes","38","40","37","39","13","10009","WebOsKeyMap","isWebOs","461","PlayStationKeyMap","isPlayStation","27","AndroidKeyMap","19","20","21","22","23","66","4","HisenseKeyMap","8","DefaultKeyMap","getKeyMapForPlatform","applicableKeyMap","keyMap","vector","sqrt","pow","getElementVector","boundingRect","getBoundingRectFromElement","calculateAngle","b","directionVector","len","elementVector","angleCos","acos","PI","getElementInDirection","activeElement","activeElemVector","elem","dist","angle","_b","angleA","distA","navigationalgorithm_1","gethtmlelementsfromcomponents_1","nodeeventsubscriber_1","removeElementHoverEventListeners","eventSubscriber","NodeEventSubscriber","getActiveElement","focusElement","blurActiveElement","focusFirstElement","defaultNavigationHandler","targetElement","defaultActionHandler","click","handleInput","defaultHandler","userHandler","handleDefault","onNavigation","activeElementBeforeDisable","onAction","isSettingsPanel","trackElementHover","removeEventListenerFunctions","htmlElem","exitListener","enterListener","fn","attachedListeners","Map","getEventListenersOfType","has","node","options","listenersOfType","listenerIndex","otherNode","otherListener","otherOptions","SeekBarHandler","rootNavigationGroup","cursorPosition","isScrubbing","scrubSpeedPercentage","isSeekBarWrapper","stopSeeking","getSeekBar","initializeOrUpdateCursorPosition","dispatchMouseMoveEvent","dispatchMouseClickEvent","from","seekBarWrapper","updateScrubSpeedPercentage","scrubSpeedResetTimeout","getIncrement","increment","resetCursorPosition","updateCursorPosition","initializeCursorPosition","playbackPositionMarker","querySelector","rect","startX","startY","getCursorPositionMouseEventInit","clientX","clientY","mouseDownHandler","mouseEventInit","dispatchMouseLeaveEvent","seekbarhandler_1","keymap_1","navigationGroups","group","activeNavigationGroups","updateEnabledNavigationGroup","groupIndex","other","handleKeyEvent","getActiveNavigationGroup","isDirection","isAction","seekBarHandler","unsubscribeVisibilityChangesFns","subscribeToNavigationGroupVisibilityChanges","attachKeyEventHandler","enableDefaultNavigationGroup","onShowHandler","onHideHandler","unsubscribeFromNavigationGroupVisibilityChanges","unsub","groupToEnable","idx","obj","values","hasLocalStorageCache","setItem","hasLocalStorage","localStorage","getItem","storage","DOMException","json","parse","totalSeconds","format","isNegative","hours","minutes","leftPadWithZeros","num","substr","adMessage","adMessagePlaceholderRegex","formatString","leadingZeroes","numDecimalPlaces","leadingZeroesMatches","decimalPlacesMatches","timeString","toFixed","currentSubtitle","SUBTITLES_OFF_KEY","subtitles","list","subtitle","SubtitleAdded","addSubtitle","selectCurrentSubtitle","SubtitleRemoved","removeSubtitle","clearSubtitles","refreshSubtitles","offListItem","delay","callback","repeat","timeoutOrIntervalId","clearInternal","setInterval","clearInterval","radiomodetogglebutton_1","quanteecconsumptions_1","playbackjumpoverlay_1","modernUI","mainSettingsPanelPage","subtitleSettingsPanelPage","subtitleSelectBox","subtitleSettingsOpenButton","containerComponents","titleBarComponents","isBrowser","modernCastReceiverUI","modernTvUI","subtitleListPanel","audioTrackListPanel","playbackToggleOverlay","subtitleToggleButton","audioToggleButton","uiContainer","spatialNavigation","modernRadioModeUI","buildDefaultUI","buildModernUI","buildDefaultSmallScreenUI","buildModernSmallScreenUI","buildDefaultCastReceiverUI","buildModernCastReceiverUI","buildDefaultTvUI","buildModernTvUI","buildModernRadioModeUI","volumecontroller_1","focusvisibilitytracker_1","playerUiOrUiVariants","onUiVariantResolve","onActiveUiChanged","handleIsRadioModeActiveChange","handleIsRadioModeAvailableChange","uiVariants","managerPlayerWrapper","PlayerWrapper","autoUiVariantResolve","VolumeController","getPlayer","available","resolveUiVariant","updateConfig","playerSourceConfig","playerSourceUiConfig","updateSource","wrappedPlayer","uiVariantsWithoutCondition","PlaylistTransition","uiContainerElement","uiInstanceManagers","uiVariant","InternalUIInstanceManager","adStartedEvent","isLinear","requestsUi","currentUi","getWrappedPlayer","fireEventInUI","focusVisibilityTracker","localize","setLocalizationConfig","localizationConfig","getUiVariants","switchToUiVariant","uiVariantIndex","previousUi","nextUi","getUI","isConfigured","addUi","defaultContext","isFullscreen","clientWidth","switchingContext","nextUiVariant","matchesCondition","dom","configureControls","releaseUi","releaseControls","clearEventHandlers","uiInstanceManager","getTimelineMarkers","addTimelineMarker","timelineMarker","removeTimelineMarker","destroy","playerWrapper","configureControlsTree","configured","configuredComponents","configuredComponents_1","constructor","releaseControlsTree","released","isReleased","childComponent","wrapper","eventHandlers","eventType","objectProtoPropertyNames","getOwnPropertyNames","getPrototypeOf","namesToIgnore","methods","properties","members_1","names","newNames","member","methods_1","method","properties_1","propertyDescriptor","propertyDescriptor_1","getOwnPropertyDescriptor","playerEventData","timestamp","uiSourced","visit","recursiveTreeWalker","setVolume","issuerName","setMuted","mute","unmute","isMuted","recallVolume","storeVolume","storedVolume","VolumeTransition","playerMuted","playerVolume","uiMuted","uiVolume","VolumeChanged","Muted","Unmuted","controller","setCueBoxPositionForVerticalWriting","cueContainerDom","subtitleOverlaySize","writingMode","Right","Top","setVttLine","setVttPositionAlign","positionAlign","DirectionPair","VttVerticalWriting","defaultLineNumber","Bottom","Left","setVttLineAlign","relativeCueBoxPosition","lineAlign","setCssForCenterLineAlign","subtitleOverLaySize","targetLine","relativeLinePosition","overlayReferenceEdge","line","snapToLines","cueContainer","GrowingRight","GrowingLeft","textAlign","align","containerSize","regionContainerDom","regionPositionX","viewportAnchorX","regionAnchorX","regionPositionY","viewportAnchorY","lines","regionAnchorY"],"mappings":"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","file":"bitmovinplayer-ui.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { PlayerAPI, PlayerEvent } from 'bitmovin-player';\nimport { Button, ButtonConfig } from '../../../ts/components/button';\nimport { UIInstanceManager } from '../../../ts/uimanager';\n\ndeclare const window: any;\n\ninterface GoBackButtonConfig extends ButtonConfig {\n  error?: boolean;\n}\n\nexport class GoBackButton extends Button<ButtonConfig> {\n  constructor(config: GoBackButtonConfig = { error: false }) {\n    super(config);\n\n    const defaultConfig: ButtonConfig = {\n      cssClasses: config.error ? ['ui-gobackbutton', 'ui-gobackbutton-error'] : ['ui-gobackbutton'],\n      text: 'Go Back',\n      ariaLabel: 'Go Back',\n    };\n\n    this.config = this.mergeConfig(config, defaultConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      window.bitmovin.customMessageHandler.sendAsynchronous('goBack');\n    });\n\n    player.on(player.exports.PlayerEvent.ViewModeChanged, () => {\n      player.getViewMode() === 'fullscreen' ? this.hide() : this.show();\n    });\n  }\n}\n","import { Button, ButtonConfig } from '../../../ts/components/button';\nimport { UIInstanceManager } from '../../../ts/uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../../ts/localization/i18n';\nimport { PlayerUtils } from '../../../ts/playerutils';\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\n\nexport interface PlaybackJumpButtonsConfig extends ButtonConfig {\n  skipTime: number; // in seconds\n}\n\nexport class PlaybackJumpButtons extends Button<PlaybackJumpButtonsConfig> {\n\n  constructor(config: PlaybackJumpButtonsConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbackjumpbuttons',\n      text: config.text,\n      ariaLabel: config.ariaLabel,\n      skipTime: 0,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(\n      player,\n      uimanager,\n    );\n    liveStreamDetector.onLiveChanged.subscribe(\n      (sender, args: LiveStreamDetectorEventArgs) => {\n        if (player.isLive()) {\n          this.hide();\n        } else {\n          uimanager.onControlsShow.subscribe(() => {\n            this.show();\n          });\n\n          uimanager.onControlsHide.subscribe(() => {\n            this.hide();\n          });\n        }\n      },\n    );\n    liveStreamDetector.detect();\n\n    this.onClick.subscribe(() => {\n      const currentTime = player.getCurrentTime();\n      const duration = player.getDuration();\n\n      if (!player.isLive()) {\n        let newTime = currentTime + this.config.skipTime;\n        newTime = Math.max(0, Math.min(newTime, duration));\n        player.seek(newTime, 'ui');\n      }\n    });\n  }\n}\n\nexport class PlaybackForwardButton extends PlaybackJumpButtons {\n  constructor(config: PlaybackJumpButtonsConfig) {\n    super({\n      ...config,\n      cssClass: 'ui-playbackforwardbutton',\n      text: i18n.getLocalizer('forward'),\n      ariaLabel: i18n.getLocalizer('forward'),\n    });\n  }\n}\n\nexport class PlaybackRewindButton extends PlaybackJumpButtons {\n  constructor(config: PlaybackJumpButtonsConfig) {\n    super({\n      ...config,\n      cssClass: 'ui-playbackrewindbutton',\n      text: i18n.getLocalizer('rewind'),\n      ariaLabel: i18n.getLocalizer('rewind'),\n    });\n  }\n}\n","import {Container, ContainerConfig} from '../../../ts/components/container';\nimport {PlaybackForwardButton, PlaybackRewindButton} from './playbackjumpbutton';\n\nexport interface PlaybackJumpControlsOverlayConfig extends ContainerConfig {}\n\n/**\n * Overlay containing the playback forward and rewind buttons.\n */\nexport class PlaybackJumpControlsOverlay extends Container<PlaybackJumpControlsOverlayConfig> {\n\n  private forwardButton: PlaybackForwardButton;\n  private rewindButton: PlaybackRewindButton;\n\n  constructor(config: PlaybackJumpControlsOverlayConfig = {}) {\n    super(config);\n\n    this.forwardButton = new PlaybackForwardButton({ skipTime: 10 });\n    this.rewindButton = new PlaybackRewindButton({ skipTime: -10 });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbackforward-overlay',\n      components: [this.forwardButton, this.rewindButton],\n    }, this.config);\n  }\n}\n","import { PlayerAPI, PlayerEvent } from 'bitmovin-player';\nimport { Button, ButtonConfig } from '../../../ts/components/button';\nimport { UIInstanceManager } from '../../../ts/uimanager';\n\ndeclare const window: any;\n\ninterface QuanteecConsumptionsConfig extends ButtonConfig {\n}\n\nexport class QuanteecConsumptions extends Button<ButtonConfig> {\n  constructor(config: QuanteecConsumptionsConfig = {}) {\n    super(config);\n\n    const defaultConfig: ButtonConfig = {\n      cssClass: 'ui-quanteecconsumptions',\n      text: 'Get Quanteec consumptions',\n      ariaLabel: 'Get Quanteec consumptions',\n    };\n\n    this.config = this.mergeConfig(config, defaultConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      // web handle\n      window.isQuanteecDisplayed = !window.isQuanteecDisplayed;\n    });\n  }\n}\n","import { PlayerAPI } from 'bitmovin-player';\nimport { ToggleButton, ToggleButtonConfig } from '../../../../ts/components/togglebutton';\nimport { UIInstanceManager } from '../../../../ts/uimanager';\n\ndeclare const window: any;\n\nexport interface RadioModeToggleButtonConfig extends ToggleButtonConfig {\n  /**\n   * Decides the initial state of the toggle button\n   * Default: false\n   */\n  active: boolean;\n}\n\nexport class RadioModeToggleButton extends ToggleButton<RadioModeToggleButtonConfig> {\n  constructor(config: RadioModeToggleButtonConfig) {\n    super(config);\n\n    const defaultConfig: RadioModeToggleButtonConfig = {\n      cssClass: config.active ? 'ui-closebutton' : 'ui-radiomodetogglebutton',\n      text: 'Radio Mode',\n      ariaLabel: 'Radio Mode',\n      active: false,\n    };\n\n    this.config = this.mergeConfig(config, defaultConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      // Mobile\n      const initialState = this.config.active;\n      if (window.bitmovin.customMessageHandler) {\n        window.bitmovin.customMessageHandler.sendAsynchronous(\n          'radioModeChanged',\n          JSON.stringify({\n            initialState,\n            activated: !this.config.active,\n          }),\n        );\n      }\n\n      // Web\n      window.isRadioModeActive = !window.isRadioModeActive;\n    });\n  }\n}\n","export namespace ArrayUtils {\n  /**\n   * Removes an item from an array.\n   * @param array the array that may contain the item to remove\n   * @param item the item to remove from the array\n   * @returns {any} the removed item or null if it wasn't part of the array\n   */\n  export function remove<T>(array: T[], item: T): T | null {\n    let index = array.indexOf(item);\n\n    if (index > -1) {\n      return array.splice(index, 1)[0];\n    } else {\n      return null;\n    }\n  }\n}\n","import { ListItem, ListSelector, ListSelectorConfig } from './components/listselector';\nimport { UIInstanceManager } from './uimanager';\nimport { AudioTrackEvent, PlayerAPI, AudioTrack } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\n/**\n * Helper class to handle all audio tracks related events\n *\n * This class listens to player events as well as the `ListSelector` event if selection changed\n */\nexport class AudioTrackSwitchHandler {\n\n  private player: PlayerAPI;\n  private listElement: ListSelector<ListSelectorConfig>;\n  private uimanager: UIInstanceManager;\n\n  constructor(player: PlayerAPI, element: ListSelector<ListSelectorConfig>, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.listElement = element;\n    this.uimanager = uimanager;\n\n    this.bindSelectionEvent();\n    this.bindPlayerEvents();\n    this.refreshAudioTracks();\n  }\n\n  private bindSelectionEvent(): void {\n    this.listElement.onItemSelected.subscribe((_, value: string) => {\n      this.player.setAudio(value);\n    });\n  }\n\n  private bindPlayerEvents(): void {\n    // Update selection when selected track has changed\n    this.player.on(this.player.exports.PlayerEvent.AudioChanged, this.selectCurrentAudioTrack);\n    // Update tracks when source goes away\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.refreshAudioTracks);\n    // Update tracks when the period within a source changes\n    this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshAudioTracks);\n    // Update tracks when a track is added or removed\n    this.player.on(this.player.exports.PlayerEvent.AudioAdded, this.addAudioTrack);\n    this.player.on(this.player.exports.PlayerEvent.AudioRemoved, this.removeAudioTrack);\n    this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshAudioTracks);\n  }\n\n  private addAudioTrack = (event: AudioTrackEvent) => {\n    const audioTrack = event.track;\n    if (!this.listElement.hasItem(audioTrack.id)) {\n      this.listElement.addItem(audioTrack.id, i18n.getLocalizer(audioTrack.label), true);\n    }\n  };\n\n  private removeAudioTrack = (event: AudioTrackEvent) => {\n    const audioTrack = event.track;\n    if (this.listElement.hasItem(audioTrack.id)) {\n      this.listElement.removeItem(audioTrack.id);\n    }\n  };\n\n  private selectCurrentAudioTrack = () => {\n    let currentAudioTrack = this.player.getAudio();\n\n    // HLS streams don't always provide this, so we have to check\n    if (currentAudioTrack) {\n      this.listElement.selectItem(currentAudioTrack.id);\n    }\n  };\n\n  private refreshAudioTracks = () => {\n    const audioTracks = this.player.getAvailableAudio();\n    const audioTrackToListItem = (audioTrack: AudioTrack): ListItem => {\n      return { key: audioTrack.id, label: audioTrack.label };\n    };\n\n    this.listElement.synchronizeItems(audioTracks.map(audioTrackToListItem));\n    this.selectCurrentAudioTrack();\n  };\n}\n","declare global {\n  interface Navigator {\n    msMaxTouchPoints?: number;\n  }\n}\n\nexport class BrowserUtils {\n  // isMobile only needs to be evaluated once (it cannot change during a browser session)\n  // Mobile detection according to Mozilla recommendation: \"In summary, we recommend looking for the string “Mobi”\n  // anywhere in the User Agent to detect a mobile device.\"\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n  static get isMobile(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Mobi/.test(navigator.userAgent);\n  }\n\n  static get isChrome(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Chrome/.test(navigator.userAgent);\n  }\n\n  static get isAndroid(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Android/.test(navigator.userAgent) && !this.isHisense;\n  }\n\n  static get isIOS(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /iPad|iPhone|iPod/.test(navigator.userAgent);\n  }\n\n  static get isMacIntel(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && navigator.platform === 'MacIntel';\n  }\n\n  static get isHisense(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Hisense/.test(navigator.userAgent);\n  }\n\n  static get isPlayStation(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /PlayStation/i.test(navigator.userAgent);\n  }\n\n  static get isWebOs(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return (\n      navigator &&\n      navigator.userAgent &&\n      (navigator.userAgent.includes('Web0S') || navigator.userAgent.includes('NetCast'))\n    );\n  }\n\n  static get isTizen(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Tizen/.test(navigator.userAgent);\n  }\n\n  // https://hacks.mozilla.org/2013/04/detecting-touch-its-the-why-not-the-how/\n  static get isTouchSupported() {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return 'ontouchstart' in window || navigator && navigator.userAgent && (navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0);\n  }\n\n  private static windowExists(): boolean {\n    return typeof window !== 'undefined';\n  }\n}\n","import { ClickOverlay } from './clickoverlay';\nimport { UIInstanceManager } from '../uimanager';\nimport { Ad, AdEvent, PlayerAPI } from 'bitmovin-player';\n\n/**\n * A simple click capture overlay for clickThroughUrls of ads.\n */\nexport class AdClickOverlay extends ClickOverlay {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let clickThroughCallback: () => void = null;\n\n    player.on(player.exports.PlayerEvent.AdStarted, (event: AdEvent) => {\n      let ad = event.ad;\n      this.setUrl(ad.clickThroughUrl);\n      clickThroughCallback = ad.clickThroughUrlOpened;\n    });\n\n    // Clear click-through URL when ad has finished\n    let adFinishedHandler = () => {\n      this.setUrl(null);\n    };\n\n    player.on(player.exports.PlayerEvent.AdFinished, adFinishedHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adFinishedHandler);\n    player.on(player.exports.PlayerEvent.AdError, adFinishedHandler);\n\n    this.onClick.subscribe(() => {\n      // Pause the ad when overlay is clicked\n      player.pause('ui-ad-click-overlay');\n\n      if (clickThroughCallback) {\n        clickThroughCallback();\n      }\n    });\n  }\n}\n","import {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport { AdEvent, LinearAd, PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A label that displays a message about a running ad, optionally with a countdown.\n */\nexport class AdMessageLabel extends Label<LabelConfig> {\n\n  constructor(config: LabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-label-ad-message',\n      text: i18n.getLocalizer('ads.remainingTime') ,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let text = config.text;\n\n    let updateMessageHandler = () => {\n      this.setText(StringUtils.replaceAdMessagePlaceholders(i18n.performLocalization(text), null, player));\n    };\n\n    let adStartHandler = (event: AdEvent) => {\n      let uiConfig = (event.ad as LinearAd).uiConfig;\n      text = uiConfig && uiConfig.message || config.text;\n\n      updateMessageHandler();\n\n      player.on(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);\n    };\n\n    let adEndHandler = () => {\n      player.off(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);\n    };\n\n    player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdError, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);\n  }\n}","import { ButtonConfig, Button } from './button';\nimport { UIInstanceManager } from '../uimanager';\nimport { StringUtils } from '../stringutils';\nimport { AdEvent, LinearAd, PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for the {@link AdSkipButton}.\n */\nexport interface AdSkipButtonConfig extends ButtonConfig {\n  /**\n   * Message which gets displayed during the countdown is active.\n   * Supported placeholders: look at {@link StringUtils.replaceAdMessagePlaceholders}\n   */\n  untilSkippableMessage?: string;\n  /**\n   * Message displayed when the ad is skippable.\n   * Supported placeholders: look at {@link StringUtils.replaceAdMessagePlaceholders}\n   */\n  skippableMessage?: string;\n}\n\n/**\n * A button that is displayed during ads and can be used to skip the ad.\n */\nexport class AdSkipButton extends Button<AdSkipButtonConfig> {\n\n  constructor(config: AdSkipButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <AdSkipButtonConfig>{\n      cssClass: 'ui-button-ad-skip',\n      untilSkippableMessage: 'Skip ad in {remainingTime}',\n      skippableMessage: 'Skip ad',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let untilSkippableMessage = config.untilSkippableMessage;\n    let skippableMessage = config.skippableMessage;\n    let skipOffset = -1;\n\n    let updateSkipMessageHandler = () => {\n      this.show();\n\n      // Update the skip message on the button\n      if (player.getCurrentTime() < skipOffset) {\n        this.setText(StringUtils.replaceAdMessagePlaceholders(untilSkippableMessage, skipOffset, player));\n        this.disable();\n      } else {\n        this.setText(skippableMessage);\n        this.enable();\n      }\n    };\n\n    let adStartHandler = (event: AdEvent) => {\n      let ad = event.ad as LinearAd;\n      skipOffset = ad.skippableAfter;\n      untilSkippableMessage = ad.uiConfig && ad.uiConfig.untilSkippableMessage || config.untilSkippableMessage;\n      skippableMessage = ad.uiConfig && ad.uiConfig.skippableMessage || config.skippableMessage;\n\n      // Display this button only if ad is skippable.\n      // Non-skippable ads will return -1 for skippableAfter for player version < v8.3.0.\n      if (typeof skipOffset === 'number' && skipOffset >= 0) {\n        updateSkipMessageHandler();\n        player.on(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);\n      } else {\n        this.hide();\n      }\n    };\n\n    let adEndHandler = () => {\n      player.off(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);\n    };\n\n    player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdError, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);\n\n    this.onClick.subscribe(() => {\n      // Try to skip the ad (this only works if it is skippable so we don't need to take extra care of that here)\n      player.ads.skip();\n    });\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles Apple AirPlay.\n */\nexport class AirPlayToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-airplaytogglebutton',\n      text: i18n.getLocalizer('appleAirplay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    if (!player.isAirplayAvailable) {\n      // If the player does not support Airplay (player 7.0), we just hide this component and skip configuration\n      this.hide();\n      return;\n    }\n\n    this.onClick.subscribe(() => {\n      if (player.isAirplayAvailable()) {\n        player.showAirplayTargetPicker();\n      } else {\n        if (console) {\n          console.log('AirPlay unavailable');\n        }\n      }\n    });\n\n    const airPlayAvailableHandler = () => {\n      if (player.isAirplayAvailable()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    const airPlayChangedHandler = () => {\n      if (player.isAirplayActive()) {\n        this.on();\n      } else {\n        this.off();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.AirplayAvailable, airPlayAvailableHandler);\n    player.on(player.exports.PlayerEvent.AirplayChanged, airPlayChangedHandler);\n\n    // Startup init\n    airPlayAvailableHandler(); // Hide button if AirPlay is not available\n    airPlayChangedHandler();\n  }\n}","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between 'auto' and the available audio qualities.\n */\nexport class AudioQualitySelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-audioqualityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let selectCurrentAudioQuality = () => {\n      this.selectItem(player.getAudioQuality().id);\n    };\n\n    let updateAudioQualities = () => {\n      let audioQualities = player.getAvailableAudioQualities();\n\n      this.clearItems();\n\n      // Add entry for automatic quality switching (default setting)\n      this.addItem('auto', i18n.getLocalizer('auto'));\n\n      // Add audio qualities\n      for (let audioQuality of audioQualities) {\n        this.addItem(audioQuality.id, audioQuality.label);\n      }\n\n      // Select initial quality\n      selectCurrentAudioQuality();\n    };\n\n    this.onItemSelected.subscribe((sender: AudioQualitySelectBox, value: string) => {\n      player.setAudioQuality(value);\n    });\n\n    // Update qualities when audio track has changed\n    player.on(player.exports.PlayerEvent.AudioChanged, updateAudioQualities);\n    // Update qualities when source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, updateAudioQualities);\n    // Update qualities when the period within a source changes\n    player.on(player.exports.PlayerEvent.PeriodSwitched, updateAudioQualities);\n    // Update quality selection when quality is changed (from outside)\n    player.on(player.exports.PlayerEvent.AudioQualityChanged, selectCurrentAudioQuality);\n    if ((player.exports.PlayerEvent as any).AudioQualityAdded) {\n      // Update qualities when their availability changed\n      // TODO: remove any cast after next player release\n      player.on((player.exports.PlayerEvent as any).AudioQualityAdded, updateAudioQualities);\n      player.on((player.exports.PlayerEvent as any).AudioQualityRemoved, updateAudioQualities);\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(updateAudioQualities);\n  }\n}","import {ListBox} from './listbox';\nimport {UIInstanceManager} from '../uimanager';\nimport {AudioTrackSwitchHandler} from '../audiotrackutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A element that is similar to a select box where the user can select a subtitle\n */\nexport class AudioTrackListBox extends ListBox {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n    new AudioTrackSwitchHandler(player, this, uimanager);\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport {AudioTrackSwitchHandler} from '../audiotrackutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A select box providing a selection between available audio tracks (e.g. different languages).\n */\nexport class AudioTrackSelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-audiotrackselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new AudioTrackSwitchHandler(player, this, uimanager);\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {Component, ComponentConfig} from './component';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for the {@link BufferingOverlay} component.\n */\nexport interface BufferingOverlayConfig extends ContainerConfig {\n  /**\n   * Delay in milliseconds after which the buffering overlay will be displayed. Useful to bypass short stalls without\n   * displaying the overlay. Set to 0 to display the overlay instantly.\n   * Default: 1000ms (1 second)\n   */\n  showDelayMs?: number;\n}\n\n/**\n * Overlays the player and displays a buffering indicator.\n */\nexport class BufferingOverlay extends Container<BufferingOverlayConfig> {\n\n  private indicators: Component<ComponentConfig>[];\n\n  constructor(config: BufferingOverlayConfig = {}) {\n    super(config);\n\n    this.indicators = [\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),\n    ];\n\n    this.config = this.mergeConfig(config, <BufferingOverlayConfig>{\n      cssClass: 'ui-buffering-overlay',\n      hidden: true,\n      components: this.indicators,\n      showDelayMs: 1000,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    let overlayShowTimeout = new Timeout(config.showDelayMs, () => {\n      this.show();\n    });\n\n    let showOverlay = () => {\n      overlayShowTimeout.start();\n    };\n\n    let hideOverlay = () => {\n      overlayShowTimeout.clear();\n      this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.StallStarted, showOverlay);\n    player.on(player.exports.PlayerEvent.StallEnded, hideOverlay);\n    player.on(player.exports.PlayerEvent.Play, showOverlay);\n    player.on(player.exports.PlayerEvent.Playing, hideOverlay);\n    player.on(player.exports.PlayerEvent.Paused, hideOverlay);\n    player.on(player.exports.PlayerEvent.Seek, showOverlay);\n    player.on(player.exports.PlayerEvent.Seeked, hideOverlay);\n    player.on(player.exports.PlayerEvent.TimeShift, showOverlay);\n    player.on(player.exports.PlayerEvent.TimeShifted, hideOverlay);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, hideOverlay);\n\n    // Show overlay if player is already stalled at init\n    if (player.isStalled()) {\n      this.show();\n    }\n  }\n}\n","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {EventDispatcher, NoArgs, Event} from '../eventdispatcher';\nimport { LocalizableText , i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Button} component.\n */\nexport interface ButtonConfig extends ComponentConfig {\n  /**\n   * The text as string or localize callback on the button.\n   */\n  text?: LocalizableText;\n}\n\n/**\n * A simple clickable button.\n */\nexport class Button<Config extends ButtonConfig> extends Component<Config> {\n\n  private buttonEvents = {\n    onClick: new EventDispatcher<Button<Config>, NoArgs>(),\n  };\n\n  constructor(config: Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-button',\n      role: 'button',\n      tabIndex: 0,\n    } as Config, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    const buttonElementAttributes: { [name: string]: string } = {\n      'id': this.config.id,\n      'aria-label': i18n.performLocalization(this.config.ariaLabel || this.config.text),\n      'class': this.getCssClasses(),\n      'type' : 'button',\n      /**\n      * WCAG20 standard to display if a button is pressed or not\n      */\n      'aria-pressed': 'false',\n      'tabindex': this.config.tabIndex.toString(),\n    };\n\n    if (this.config.role != null) {\n      buttonElementAttributes['role'] = this.config.role;\n    }\n\n    // Create the button element with the text label\n    let buttonElement = new DOM('button', buttonElementAttributes).append(new DOM('span', {\n      'class': this.prefixCss('label'),\n    }).html(i18n.performLocalization(this.config.text)));\n\n    // Listen for the click event on the button element and trigger the corresponding event on the button component\n    buttonElement.on('click', () => {\n      this.onClickEvent();\n    });\n\n    return buttonElement;\n  }\n\n  /**\n   * Sets text on the label of the button.\n   * @param text the text to put into the label of the button\n   */\n  setText(text: LocalizableText): void {\n    this.getDomElement().find('.' + this.prefixCss('label')).html(i18n.performLocalization(text));\n  }\n\n  protected onClickEvent() {\n    this.buttonEvents.onClick.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the button is clicked.\n   * @returns {Event<Button<Config>, NoArgs>}\n   */\n  get onClick(): Event<Button<Config>, NoArgs> {\n    return this.buttonEvents.onClick.getEvent();\n  }\n}\n","import {ContainerConfig, Container} from './container';\nimport {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport { CastStartedEvent, CastWaitingForDeviceEvent, PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Overlays the player and displays the status of a Cast session.\n */\nexport class CastStatusOverlay extends Container<ContainerConfig> {\n\n  private statusLabel: Label<LabelConfig>;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.statusLabel = new Label<LabelConfig>({ cssClass: 'ui-cast-status-label' });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-cast-status-overlay',\n      components: [this.statusLabel],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    player.on(player.exports.PlayerEvent.CastWaitingForDevice,\n      (event: CastWaitingForDeviceEvent) => {\n        this.show();\n        // Get device name and update status text while connecting\n        let castDeviceName = event.castPayload.deviceName;\n        this.statusLabel.setText(i18n.getLocalizer('connectingTo', { castDeviceName }));\n      });\n    player.on(player.exports.PlayerEvent.CastStarted, (event: CastStartedEvent) => {\n      // Session is started or resumed\n      // For cases when a session is resumed, we do not receive the previous events and therefore show the status panel\n      // here too\n      this.show();\n      let castDeviceName = event.deviceName;\n      this.statusLabel.setText(i18n.getLocalizer('playingOn', { castDeviceName }));\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, (event) => {\n      // Cast session gone, hide the status panel\n      this.hide();\n    });\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles casting to a Cast receiver.\n */\nexport class CastToggleButton extends ToggleButton<ToggleButtonConfig> {\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(\n      config,\n      {\n        cssClass: 'ui-casttogglebutton',\n        text: i18n.getLocalizer('googleCast'),\n      },\n      this.config,\n    );\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      if (!player.isCastAvailable()) {\n        player.castVideo();\n        if (console) {\n          console.log('Cast unavailable');\n        }\n        return;\n      }\n\n      if (player.isCasting()) {\n        player.castStop();\n      } else {\n        player.castVideo();\n      }\n    });\n\n    // Toggle button 'on' state\n    player.on(player.exports.PlayerEvent.CastWaitingForDevice, () => {\n      this.on();\n    });\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      // When a session is resumed, there is no CastStart event, so we also need to toggle here for such cases\n      this.on();\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, () => {\n      this.off();\n    });\n\n    // Startup init\n    if (player.isCasting()) {\n      this.on();\n    }\n  }\n}\n","import {UIContainer, UIContainerConfig} from './uicontainer';\nimport {UIInstanceManager} from '../uimanager';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * The base container for Cast receivers that contains all of the UI and takes care that the UI is shown on\n * certain playback events.\n */\nexport class CastUIContainer extends UIContainer {\n\n  private castUiHideTimeout: Timeout;\n\n  constructor(config: UIContainerConfig) {\n    super(config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    /*\n     * Show UI on Cast devices at certain playback events\n     *\n     * Since a Cast receiver does not have a direct HCI, we show the UI on certain playback events to give the user\n     * a chance to see on the screen what's going on, e.g. on play/pause or a seek the UI is shown and the user can\n     * see the current time and position on the seek bar.\n     * The UI is shown permanently while playback is paused, otherwise hides automatically after the configured\n     * hide delay time.\n     */\n\n    let isUiShown = false;\n\n    let hideUi = () => {\n      uimanager.onControlsHide.dispatch(this);\n      isUiShown = false;\n    };\n\n    this.castUiHideTimeout = new Timeout(config.hideDelay, hideUi);\n\n    let showUi = () => {\n      if (!isUiShown) {\n        uimanager.onControlsShow.dispatch(this);\n        isUiShown = true;\n      }\n    };\n\n    let showUiPermanently = () => {\n      showUi();\n      this.castUiHideTimeout.clear();\n    };\n\n    let showUiWithTimeout = () => {\n      showUi();\n      this.castUiHideTimeout.start();\n    };\n\n    let showUiAfterSeek = () => {\n      if (player.isPlaying()) {\n        showUiWithTimeout();\n      } else {\n        showUiPermanently();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.Play, showUiWithTimeout);\n    player.on(player.exports.PlayerEvent.Paused, showUiPermanently);\n    player.on(player.exports.PlayerEvent.Seek, showUiPermanently);\n    player.on(player.exports.PlayerEvent.Seeked, showUiAfterSeek);\n\n    uimanager.getConfig().events.onUpdated.subscribe(showUiWithTimeout);\n  }\n\n  release(): void {\n    super.release();\n    this.castUiHideTimeout.clear();\n  }\n}","import {Button, ButtonConfig} from './button';\n\n/**\n * Configuration interface for a {@link ClickOverlay}.\n */\nexport interface ClickOverlayConfig extends ButtonConfig {\n  /**\n   * The url to open when the overlay is clicked. Set to null to disable the click handler.\n   */\n  url?: string;\n}\n\n/**\n * A click overlay that opens an url in a new tab if clicked.\n */\nexport class ClickOverlay extends Button<ClickOverlayConfig> {\n\n  constructor(config: ClickOverlayConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-clickoverlay',\n      role: this.config.role,\n    }, <ClickOverlayConfig>this.config);\n  }\n\n  initialize(): void {\n    super.initialize();\n\n    this.setUrl((<ClickOverlayConfig>this.config).url);\n    let element = this.getDomElement();\n    element.on('click', () => {\n      if (element.data('url')) {\n        window.open(element.data('url'), '_blank');\n      }\n    });\n  }\n\n  /**\n   * Gets the URL that should be followed when the watermark is clicked.\n   * @returns {string} the watermark URL\n   */\n  getUrl(): string {\n    return this.getDomElement().data('url');\n  }\n\n  setUrl(url: string): void {\n    if (url === undefined || url == null) {\n      url = '';\n    }\n    this.getDomElement().data('url', url);\n  }\n}","import {ButtonConfig, Button} from './button';\nimport {UIInstanceManager} from '../uimanager';\nimport {Component, ComponentConfig} from './component';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link CloseButton}.\n */\nexport interface CloseButtonConfig extends ButtonConfig {\n  /**\n   * The component that should be closed when the button is clicked.\n   */\n  target: Component<ComponentConfig>;\n}\n\n/**\n * A button that closes (hides) a configured component.\n */\nexport class CloseButton extends Button<CloseButtonConfig> {\n\n  constructor(config: CloseButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-closebutton',\n      text: i18n.getLocalizer('close'),\n    } as CloseButtonConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    this.onClick.subscribe(() => {\n      config.target.hide();\n    });\n  }\n}","import {Guid} from '../guid';\nimport {DOM} from '../dom';\nimport {EventDispatcher, NoArgs, Event} from '../eventdispatcher';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n, LocalizableText } from '../localization/i18n';\n\n/**\n * Base configuration interface for a component.\n * Should be extended by components that want to add additional configuration options.\n */\nexport interface ComponentConfig {\n  /**\n   * The HTML tag name of the component.\n   * Default: 'div'\n   */\n  tag?: string;\n  /**\n   * The HTML ID of the component.\n   * Default: automatically generated with pattern 'ui-id-{guid}'.\n   */\n  id?: string;\n\n  /**\n   * A prefix to prepend all CSS classes with.\n   */\n  cssPrefix?: string;\n\n  /**\n   * The CSS classes of the component. This is usually the class from where the component takes its styling.\n   */\n  cssClass?: string; // 'class' is a reserved keyword, so we need to make the name more complicated\n\n  /**\n   * Additional CSS classes of the component.\n   */\n  cssClasses?: string[];\n\n  /**\n   * Specifies if the component should be hidden at startup.\n   * Default: false\n   */\n  hidden?: boolean;\n\n  /**\n   * Specifies if the component is enabled (interactive) or not.\n   * Default: false\n   */\n  disabled?: boolean;\n\n  /**\n   * Specifies the component role for WCAG20 standard\n   */\n  role?: string;\n\n  /**\n   * WCAG20 requirement for screen reader navigation\n   */\n  tabIndex?: number;\n\n  /**\n   * WCAG20 standard for defining info about the component (usually the name)\n   */\n  ariaLabel?: LocalizableText;\n}\n\nexport interface ComponentHoverChangedEventArgs extends NoArgs {\n  /**\n   * True is the component is hovered, else false.\n   */\n  hovered: boolean;\n}\n\n/**\n * The base class of the UI framework.\n * Each component must extend this class and optionally the config interface.\n */\nexport class Component<Config extends ComponentConfig> {\n\n  /**\n   * The classname that is attached to the element when it is in the hidden state.\n   * @type {string}\n   */\n  private static readonly CLASS_HIDDEN = 'hidden';\n\n  /**\n   * The classname that is attached to the element when it is in the disabled state.\n   * @type {string}\n   */\n  private static readonly CLASS_DISABLED = 'disabled';\n\n  /**\n   * Configuration object of this component.\n   */\n  protected config: Config;\n\n  /**\n   * The component's DOM element.\n   */\n  private element: DOM;\n\n  /**\n   * Flag that keeps track of the hidden state.\n   */\n  private hidden: boolean;\n\n  /**\n   * Flat that keeps track of the disabled state.\n   */\n  private disabled: boolean;\n\n  /**\n   * Flag that keeps track of the hover state.\n   */\n  private hovered: boolean;\n\n  /**\n   * The list of events that this component offers. These events should always be private and only directly\n   * accessed from within the implementing component.\n   *\n   * Because TypeScript does not support private properties with the same name on different class hierarchy levels\n   * (i.e. superclass and subclass cannot contain a private property with the same name), the default naming\n   * convention for the event list of a component that should be followed by subclasses is the concatenation of the\n   * camel-cased class name + 'Events' (e.g. SubClass extends Component => subClassEvents).\n   * See {@link #componentEvents} for an example.\n   *\n   * Event properties should be named in camel case with an 'on' prefix and in the present tense. Async events may\n   * have a start event (when the operation starts) in the present tense, and must have an end event (when the\n   * operation ends) in the past tense (or present tense in special cases (e.g. onStart/onStarted or onPlay/onPlaying).\n   * See {@link #componentEvents#onShow} for an example.\n   *\n   * Each event should be accompanied with a protected method named by the convention eventName + 'Event'\n   * (e.g. onStartEvent), that actually triggers the event by calling {@link EventDispatcher#dispatch dispatch} and\n   * passing a reference to the component as first parameter. Components should always trigger their events with these\n   * methods. Implementing this pattern gives subclasses means to directly listen to the events by overriding the\n   * method (and saving the overhead of passing a handler to the event dispatcher) and more importantly to trigger\n   * these events without having access to the private event list.\n   * See {@link #onShow} for an example.\n   *\n   * To provide external code the possibility to listen to this component's events (subscribe, unsubscribe, etc.),\n   * each event should also be accompanied by a public getter function with the same name as the event's property,\n   * that returns the {@link Event} obtained from the event dispatcher by calling {@link EventDispatcher#getEvent}.\n   * See {@link #onShow} for an example.\n   *\n   * Full example for an event representing an example action in a example component:\n   *\n   * <code>\n   * // Define an example component class with an example event\n   * class ExampleComponent extends Component<ComponentConfig> {\n     *\n     *     private exampleComponentEvents = {\n     *         onExampleAction: new EventDispatcher<ExampleComponent, NoArgs>()\n     *     }\n     *\n     *     // constructor and other stuff...\n     *\n     *     protected onExampleActionEvent() {\n     *        this.exampleComponentEvents.onExampleAction.dispatch(this);\n     *    }\n     *\n     *    get onExampleAction(): Event<ExampleComponent, NoArgs> {\n     *        return this.exampleComponentEvents.onExampleAction.getEvent();\n     *    }\n     * }\n   *\n   * // Create an instance of the component somewhere\n   * var exampleComponentInstance = new ExampleComponent();\n   *\n   * // Subscribe to the example event on the component\n   * exampleComponentInstance.onExampleAction.subscribe(function (sender: ExampleComponent) {\n     *     console.log('onExampleAction of ' + sender + ' has fired!');\n     * });\n   * </code>\n   */\n  private componentEvents = {\n    onShow: new EventDispatcher<Component<Config>, NoArgs>(),\n    onHide: new EventDispatcher<Component<Config>, NoArgs>(),\n    onHoverChanged: new EventDispatcher<Component<Config>, ComponentHoverChangedEventArgs>(),\n    onEnabled: new EventDispatcher<Component<Config>, NoArgs>(),\n    onDisabled: new EventDispatcher<Component<Config>, NoArgs>(),\n  };\n\n  /**\n   * Constructs a component with an optionally supplied config. All subclasses must call the constructor of their\n   * superclass and then merge their configuration into the component's configuration.\n   * @param config the configuration for the component\n   */\n  constructor(config: ComponentConfig = {}) {\n    // Create the configuration for this component\n    this.config = <Config>this.mergeConfig(config, {\n      tag: 'div',\n      id: '{{PREFIX}}-id-' + Guid.next(),\n      cssPrefix: '{{PREFIX}}',\n      cssClass: 'ui-component',\n      cssClasses: [],\n      hidden: false,\n      disabled: false,\n    }, {});\n  }\n\n  /**\n   * Initializes the component, e.g. by applying config settings.\n   * This method must not be called from outside the UI framework.\n   *\n   * This method is automatically called by the {@link UIInstanceManager}. If the component is an inner component of\n   * some component, and thus encapsulated abd managed internally and never directly exposed to the UIManager,\n   * this method must be called from the managing component's {@link #initialize} method.\n   */\n  initialize(): void {\n    this.hidden = this.config.hidden;\n    this.disabled = this.config.disabled;\n\n    // Hide the component at initialization if it is configured to be hidden\n    if (this.isHidden()) {\n      this.hidden = false; // Set flag to false for the following hide() call to work (hide() checks the flag)\n      this.hide();\n    }\n\n    // Disable the component at initialization if it is configured to be disabled\n    if (this.isDisabled()) {\n      this.disabled = false; // Set flag to false for the following disable() call to work (disable() checks the flag)\n      this.disable();\n    }\n  }\n\n  /**\n   * Configures the component for the supplied Player and UIInstanceManager. This is the place where all the magic\n   * happens, where components typically subscribe and react to events (on their DOM element, the Player, or the\n   * UIInstanceManager), and basically everything that makes them interactive.\n   * This method is called only once, when the UIManager initializes the UI.\n   *\n   * Subclasses usually overwrite this method to add their own functionality.\n   *\n   * @param player the player which this component controls\n   * @param uimanager the UIInstanceManager that manages this component\n   */\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    this.onShow.subscribe(() => {\n      uimanager.onComponentShow.dispatch(this);\n    });\n    this.onHide.subscribe(() => {\n      uimanager.onComponentHide.dispatch(this);\n    });\n\n    // Track the hovered state of the element\n    this.getDomElement().on('mouseenter', () => {\n      this.onHoverChangedEvent(true);\n    });\n    this.getDomElement().on('mouseleave', () => {\n      this.onHoverChangedEvent(false);\n    });\n  }\n\n  /**\n   * Releases all resources and dependencies that the component holds. Player, DOM, and UIManager events are\n   * automatically removed during release and do not explicitly need to be removed here.\n   * This method is called by the UIManager when it releases the UI.\n   *\n   * Subclasses that need to release resources should override this method and call super.release().\n   */\n  release(): void {\n    // Nothing to do here, override where necessary\n  }\n\n  /**\n   * Generate the DOM element for this component.\n   *\n   * Subclasses usually overwrite this method to extend or replace the DOM element with their own design.\n   */\n  protected toDomElement(): DOM {\n    let element = new DOM(this.config.tag, {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'role': this.config.role,\n    });\n\n    return element;\n  }\n\n  /**\n   * Returns the DOM element of this component. Creates the DOM element if it does not yet exist.\n   *\n   * Should not be overwritten by subclasses.\n   *\n   * @returns {DOM}\n   */\n  getDomElement(): DOM {\n    if (!this.element) {\n      this.element = this.toDomElement();\n    }\n\n    return this.element;\n  }\n\n  /**\n   * Checks if this component has a DOM element.\n   */\n  hasDomElement(): boolean {\n    return Boolean(this.element);\n  }\n\n  setAriaLabel(label: LocalizableText): void {\n    this.setAriaAttr('label', i18n.performLocalization(label));\n  }\n\n  setAriaAttr(name: string, value: string) {\n    this.getDomElement().attr(`aria-${name}`, value);\n  }\n\n  /**\n   * Merges a configuration with a default configuration and a base configuration from the superclass.\n   *\n   * @param config the configuration settings for the components, as usually passed to the constructor\n   * @param defaults a default configuration for settings that are not passed with the configuration\n   * @param base configuration inherited from a superclass\n   * @returns {Config}\n   */\n  protected mergeConfig<Config>(config: Config, defaults: Config, base: Config): Config {\n    // Extend default config with supplied config\n    let merged = Object.assign({}, base, defaults, config);\n\n    // Return the extended config\n    return merged;\n  }\n\n  /**\n   * Helper method that returns a string of all CSS classes of the component.\n   *\n   * @returns {string}\n   */\n  protected getCssClasses(): string {\n    // Merge all CSS classes into single array\n    let flattenedArray = [this.config.cssClass].concat(this.config.cssClasses);\n    // Prefix classes\n    flattenedArray = flattenedArray.map((css) => {\n      return this.prefixCss(css);\n    });\n    // Join array values into a string\n    let flattenedString = flattenedArray.join(' ');\n    // Return trimmed string to prevent whitespace at the end from the join operation\n    return flattenedString.trim();\n  }\n\n  protected prefixCss(cssClassOrId: string): string {\n    return this.config.cssPrefix + '-' + cssClassOrId;\n  }\n\n  /**\n   * Returns the configuration object of the component.\n   * @returns {Config}\n   */\n  public getConfig(): Config {\n    return this.config;\n  }\n\n  /**\n   * Hides the component if shown.\n   * This method basically transfers the component into the hidden state. Actual hiding is done via CSS.\n   */\n  hide() {\n    if (!this.hidden) {\n      this.hidden = true;\n      this.getDomElement().addClass(this.prefixCss(Component.CLASS_HIDDEN));\n      this.onHideEvent();\n    }\n  }\n\n  /**\n   * Shows the component if hidden.\n   */\n  show() {\n    if (this.hidden) {\n      this.getDomElement().removeClass(this.prefixCss(Component.CLASS_HIDDEN));\n      this.hidden = false;\n      this.onShowEvent();\n    }\n  }\n\n  /**\n   * Determines if the component is hidden.\n   * @returns {boolean} true if the component is hidden, else false\n   */\n  isHidden(): boolean {\n    return this.hidden;\n  }\n\n  /**\n   * Determines if the component is shown.\n   * @returns {boolean} true if the component is visible, else false\n   */\n  isShown(): boolean {\n    return !this.isHidden();\n  }\n\n  /**\n   * Toggles the hidden state by hiding the component if it is shown, or showing it if hidden.\n   */\n  toggleHidden() {\n    if (this.isHidden()) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Disables the component.\n   * This method basically transfers the component into the disabled state. Actual disabling is done via CSS or child\n   * components. (e.g. Button needs to unsubscribe click listeners)\n   */\n  disable(): void {\n    if (!this.disabled) {\n      this.disabled = true;\n      this.getDomElement().addClass(this.prefixCss(Component.CLASS_DISABLED));\n      this.onDisabledEvent();\n    }\n  }\n\n  /**\n   * Enables the component.\n   * This method basically transfers the component into the enabled state. Actual enabling is done via CSS or child\n   * components. (e.g. Button needs to subscribe click listeners)\n   */\n  enable(): void {\n    if (this.disabled) {\n      this.getDomElement().removeClass(this.prefixCss(Component.CLASS_DISABLED));\n      this.disabled = false;\n      this.onEnabledEvent();\n    }\n  }\n\n  /**\n   * Determines if the component is disabled.\n   * @returns {boolean} true if the component is disabled, else false\n   */\n  isDisabled(): boolean {\n    return this.disabled;\n  }\n\n  /**\n   * Determines if the component is enabled.\n   * @returns {boolean} true if the component is enabled, else false\n   */\n  isEnabled(): boolean {\n    return !this.isDisabled();\n  }\n\n  /**\n   * Determines if the component is currently hovered.\n   * @returns {boolean} true if the component is hovered, else false\n   */\n  isHovered(): boolean {\n    return this.hovered;\n  }\n\n  /**\n   * Fires the onShow event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onShowEvent(): void {\n    this.componentEvents.onShow.dispatch(this);\n  }\n\n  /**\n   * Fires the onHide event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onHideEvent(): void {\n    this.componentEvents.onHide.dispatch(this);\n  }\n\n  /**\n   * Fires the onEnabled event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onEnabledEvent(): void {\n    this.componentEvents.onEnabled.dispatch(this);\n  }\n\n  /**\n   * Fires the onDisabled event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onDisabledEvent(): void {\n    this.componentEvents.onDisabled.dispatch(this);\n  }\n\n  /**\n   * Fires the onHoverChanged event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onHoverChangedEvent(hovered: boolean): void {\n    this.hovered = hovered;\n    this.componentEvents.onHoverChanged.dispatch(this, { hovered: hovered });\n  }\n\n  /**\n   * Gets the event that is fired when the component is showing.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onShow(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onShow.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is hiding.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onHide(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onHide.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is enabling.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onEnabled(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onEnabled.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is disabling.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onDisabled(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onDisabled.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component's hover-state is changing.\n   * @returns {Event<Component<Config>, ComponentHoverChangedEventArgs>}\n   */\n  get onHoverChanged(): Event<Component<Config>, ComponentHoverChangedEventArgs> {\n    return this.componentEvents.onHoverChanged.getEvent();\n  }\n}","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {ArrayUtils} from '../arrayutils';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Container}.\n */\nexport interface ContainerConfig extends ComponentConfig {\n  /**\n   * Child components of the container.\n   */\n  components?: Component<ComponentConfig>[];\n}\n\n/**\n * A container component that can contain a collection of child components.\n * Components can be added at construction time through the {@link ContainerConfig#components} setting, or later\n * through the {@link Container#addComponent} method. The UIManager automatically takes care of all components, i.e. it\n * initializes and configures them automatically.\n *\n * In the DOM, the container consists of an outer <div> (that can be configured by the config) and an inner wrapper\n * <div> that contains the components. This double-<div>-structure is often required to achieve many advanced effects\n * in CSS and/or JS, e.g. animations and certain formatting with absolute positioning.\n *\n * DOM example:\n * <code>\n *     <div class='ui-container'>\n *         <div class='container-wrapper'>\n *             ... child components ...\n *         </div>\n *     </div>\n * </code>\n */\nexport class Container<Config extends ContainerConfig> extends Component<Config> {\n\n  /**\n   * A reference to the inner element that contains the components of the container.\n   */\n  private innerContainerElement: DOM;\n  private componentsToAdd: Component<ComponentConfig>[];\n  private componentsToRemove: Component<ComponentConfig>[];\n\n  constructor(config: Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-container',\n      components: [],\n    } as Config, this.config);\n\n    this.componentsToAdd = [];\n    this.componentsToRemove = [];\n  }\n\n  /**\n   * Adds a child component to the container.\n   * @param component the component to add\n   */\n  addComponent(component: Component<ComponentConfig>) {\n    this.config.components.push(component);\n    this.componentsToAdd.push(component);\n  }\n\n  /**\n   * Removes a child component from the container.\n   * @param component the component to remove\n   * @returns {boolean} true if the component has been removed, false if it is not contained in this container\n   */\n  removeComponent(component: Component<ComponentConfig>): boolean {\n    if (ArrayUtils.remove(this.config.components, component) != null) {\n      this.componentsToRemove.push(component);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Gets an array of all child components in this container.\n   * @returns {Component<ComponentConfig>[]}\n   */\n  getComponents(): Component<ComponentConfig>[] {\n    return this.config.components;\n  }\n\n  /**\n   * Removes all child components from the container.\n   */\n  removeComponents(): void {\n    for (let component of this.getComponents().slice()) {\n      this.removeComponent(component);\n    }\n  }\n\n  /**\n   * Updates the DOM of the container with the current components.\n   */\n  protected updateComponents(): void {\n    /* We cannot just clear the container to remove all elements and then re-add those that should stay, because\n     * IE looses the innerHTML of unattached elements, leading to empty elements within the container (e.g. missing\n     * subtitle text in SubtitleLabel).\n     * Instead, we keep a list of elements to add and remove, leaving remaining elements alone. By keeping them in\n     * the DOM, their content gets preserved in all browsers.\n     */\n    let component;\n\n    while (component = this.componentsToRemove.shift()) {\n      component.getDomElement().remove();\n    }\n\n    while (component = this.componentsToAdd.shift()) {\n      this.innerContainerElement.append(component.getDomElement());\n    }\n  }\n\n  protected toDomElement(): DOM {\n    // Create the container element (the outer <div>)\n    let containerElement = new DOM(this.config.tag, {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'role': this.config.role,\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\n    });\n\n    // Create the inner container element (the inner <div>) that will contain the components\n    let innerContainer = new DOM(this.config.tag, {\n      'class': this.prefixCss('container-wrapper'),\n    });\n    this.innerContainerElement = innerContainer;\n\n    for (let initialComponent of this.config.components) {\n      this.componentsToAdd.push(initialComponent);\n    }\n    this.updateComponents();\n\n    containerElement.append(innerContainer);\n\n    return containerElement;\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {UIUtils} from '../uiutils';\nimport {Spacer} from './spacer';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\nimport { BrowserUtils } from '../browserutils';\nimport {Component, ComponentConfig} from './component';\nimport {SettingsPanel} from './settingspanel';\n\n/**\n * Configuration interface for the {@link ControlBar}.\n */\nexport interface ControlBarConfig extends ContainerConfig {\n  // nothing yet\n}\n\n/**\n * A container for main player control components, e.g. play toggle button, seek bar, volume control, fullscreen toggle\n * button.\n */\nexport class ControlBar extends Container<ControlBarConfig> {\n\n  constructor(config: ControlBarConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-controlbar',\n      hidden: true,\n      role: 'region',\n      ariaLabel: i18n.getLocalizer('controlBar'),\n    }, <ControlBarConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    // Counts how many components are hovered and block hiding of the control bar\n    let hoverStackCount = 0;\n    let isSettingsPanelShown = false;\n\n    // only enabling this for non-mobile platforms without touch input. enabling this\n    // for touch devices causes the UI to not disappear after hideDelay seconds.\n    // Instead, it will stay visible until another manual interaction is performed.\n    if (uimanager.getConfig().disableAutoHideWhenHovered && !BrowserUtils.isMobile) {\n      // Track hover status of child components\n      UIUtils.traverseTree(this, (component) => {\n        // Do not track hover status of child containers or spacers, only of 'real' controls\n        if (component instanceof Container || component instanceof Spacer) {\n          return;\n        }\n\n        // Subscribe hover event and keep a count of the number of hovered children\n        component.onHoverChanged.subscribe((_, args) => {\n          if (args.hovered) {\n            hoverStackCount++;\n          } else {\n            hoverStackCount--;\n          }\n        });\n      });\n    }\n\n    if (BrowserUtils.isMobile) {\n      uimanager.onComponentShow.subscribe((component: Component<ComponentConfig>) => {\n        if (component instanceof SettingsPanel) {\n          isSettingsPanelShown = true;\n        }\n      });\n\n      uimanager.onComponentHide.subscribe((component: Component<ComponentConfig>) => {\n        if (component instanceof SettingsPanel) {\n          isSettingsPanelShown = false;\n        }\n      });\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      this.show();\n    });\n\n    uimanager.onPreviewControlsHide.subscribe((sender, args) => {\n      // Cancel the hide event if hovered child components block hiding or if the settings panel is active on mobile.\n      args.cancel = args.cancel || (hoverStackCount > 0 || isSettingsPanelShown);\n    });\n\n    uimanager.onControlsHide.subscribe(() => {\n      this.hide();\n    });\n  }\n}\n","import {ContainerConfig, Container} from './container';\nimport {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {TvNoiseCanvas} from './tvnoisecanvas';\nimport { ErrorUtils } from '../errorutils';\nimport { ErrorEvent, PlayerAPI, PlayerEventBase } from 'bitmovin-player';\nimport {\n  isMobileV3PlayerAPI,\n  MobileV3PlayerAPI, MobileV3PlayerErrorEvent, MobileV3PlayerEvent, MobileV3SourceErrorEvent,\n} from '../mobilev3playerapi';\nimport { GoBackButton } from '../../custom/ts/components/gobackbutton';\n\nexport interface ErrorMessageTranslator {\n  (error: ErrorEvent | MobileV3PlayerErrorEvent): string;\n}\n\nexport interface ErrorMessageMap {\n  [code: number]: string | ErrorMessageTranslator;\n}\n\n/**\n * Configuration interface for the {@link ErrorMessageOverlay}.\n */\nexport interface ErrorMessageOverlayConfig extends ContainerConfig {\n  /**\n   * Allows overwriting of the error messages displayed in the overlay for customization and localization.\n   * This is either a function that receives any {@link ErrorEvent} as parameter and translates error messages,\n   * or a map of error codes that overwrites specific error messages with a plain string or a function that\n   * receives the {@link ErrorEvent} as parameter and returns a customized string.\n   * The translation functions can be used to extract data (e.g. parameters) from the original error message.\n   *\n   * Example 1 (catch-all translation function):\n   * <code>\n   * errorMessageOverlayConfig = {\n   *   messages: function(error) {\n   *     switch (error.code) {\n   *       // Overwrite error 1000 'Unknown error'\n   *       case 1000:\n   *         return 'Houston, we have a problem'\n   *\n   *       // Transform error 1201 'The downloaded manifest is invalid' to uppercase\n   *       case 1201:\n   *         var description = ErrorUtils.defaultErrorMessages[error.code];\n   *         return description.toUpperCase();\n   *\n   *       // Customize error 1207 'The manifest could not be loaded'\n   *       case 1207:\n   *         var statusCode = error.data.statusCode;\n   *         return 'Manifest loading failed with HTTP error ' + statusCode;\n   *     }\n   *     // Return unmodified error message for all other errors\n   *     return error.message;\n   *   }\n   * };\n   * </code>\n   *\n   * Example 2 (translating specific errors):\n   * <code>\n   * errorMessageOverlayConfig = {\n   *   messages: {\n   *     // Overwrite error 1000 'Unknown error'\n   *     1000: 'Houston, we have a problem',\n   *\n   *     // Transform error 1201 'Unsupported manifest format' to uppercase\n   *     1201: function(error) {\n   *       var description = ErrorUtils.defaultErrorMessages[error.code];\n   *       return description.toUpperCase();\n   *     },\n   *\n   *     // Customize error 1207 'The manifest could not be loaded'\n   *     1207: function(error) {\n   *       var statusCode = error.data.statusCode;\n   *       return 'Manifest loading failed with HTTP error ' + statusCode;\n   *     }\n   *   }\n   * };\n   * </code>\n   */\n  messages?: ErrorMessageMap | ErrorMessageTranslator;\n}\n\n/**\n * Overlays the player and displays error messages.\n */\nexport class ErrorMessageOverlay extends Container<ErrorMessageOverlayConfig> {\n\n  private errorLabel: Label<LabelConfig>;\n  private tvNoiseBackground: TvNoiseCanvas;\n\n  constructor(config: ErrorMessageOverlayConfig = {}) {\n    super(config);\n\n    this.errorLabel = new Label<LabelConfig>({ cssClass: 'ui-errormessage-label' });\n    this.tvNoiseBackground = new TvNoiseCanvas();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-errormessage-overlay',\n      components: [this.tvNoiseBackground, this.errorLabel, new GoBackButton({ error: true })],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI | MobileV3PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    const handleErrorMessage = (\n      event: ErrorEvent | MobileV3SourceErrorEvent | MobileV3PlayerErrorEvent,\n      message: string,\n    ) => {\n      const customizedMessage = customizeErrorMessage(uimanager.getConfig().errorMessages || config.messages, event);\n      if (customizedMessage) {\n        message = customizedMessage;\n      }\n\n      this.display(message);\n    };\n\n    if (isMobileV3PlayerAPI(player)) {\n      const errorEventHandler = (event: MobileV3SourceErrorEvent | MobileV3PlayerErrorEvent) => {\n        const message = ErrorUtils.defaultMobileV3ErrorMessageTranslator(event);\n        handleErrorMessage(event, message);\n      };\n\n      player.on(MobileV3PlayerEvent.PlayerError, errorEventHandler);\n      player.on(MobileV3PlayerEvent.SourceError, errorEventHandler);\n    } else {\n      player.on(player.exports.PlayerEvent.Error, (event: ErrorEvent) => {\n        let message = ErrorUtils.defaultWebErrorMessageTranslator(event);\n        handleErrorMessage(event, message);\n      });\n    }\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, (event: PlayerEventBase) => {\n      if (this.isShown()) {\n        this.tvNoiseBackground.stop();\n        this.hide();\n      }\n    });\n  }\n\n  display(errorMessage: string): void {\n    this.errorLabel.setText(errorMessage);\n    this.tvNoiseBackground.start();\n    this.show();\n  }\n\n  release(): void {\n    super.release();\n\n    // Canvas rendering must be explicitly stopped, else it just continues forever and hogs resources\n    this.tvNoiseBackground.stop();\n  }\n}\n\nfunction customizeErrorMessage(\n  errorMessages: ErrorMessageTranslator | ErrorMessageMap,\n  event: ErrorEvent | MobileV3PlayerErrorEvent | MobileV3SourceErrorEvent,\n): string | undefined {\n  if (!errorMessages) {\n    return undefined;\n  }\n\n  // Process message vocabularies\n  if (typeof errorMessages === 'function') {\n    // Translation function for all errors\n    return errorMessages(event);\n  }\n  if (errorMessages[event.code]) {\n    // It's not a translation function, so it must be a map of strings or translation functions\n    const customMessage = errorMessages[event.code];\n\n    return typeof customMessage === 'string' ? customMessage : customMessage(event);\n  }\n}\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles the player between windowed and fullscreen view.\n */\nexport class FullscreenToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-fullscreentogglebutton',\n      text: i18n.getLocalizer('fullscreen'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const isFullScreenAvailable = () => {\n      return player.isViewModeAvailable(player.exports.ViewMode.Fullscreen);\n    };\n\n    const fullscreenStateHandler = () => {\n      player.getViewMode() === player.exports.ViewMode.Fullscreen ? this.on() : this.off();\n    };\n\n    const fullscreenAvailabilityChangedHandler = () => {\n      isFullScreenAvailable() ? this.show() : this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.ViewModeChanged, fullscreenStateHandler);\n\n    // Available only in our native SDKs for now\n    if ((player.exports.PlayerEvent as any).ViewModeAvailabilityChanged) {\n      player.on(\n        (player.exports.PlayerEvent as any).ViewModeAvailabilityChanged,\n        fullscreenAvailabilityChangedHandler,\n      );\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(fullscreenAvailabilityChangedHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isFullScreenAvailable()) {\n        if (console) {\n          console.log('Fullscreen unavailable');\n        }\n        return;\n      }\n\n      const targetViewMode =\n        player.getViewMode() === player.exports.ViewMode.Fullscreen\n          ? player.exports.ViewMode.Inline\n          : player.exports.ViewMode.Fullscreen;\n\n      player.setViewMode(targetViewMode);\n    });\n\n    // Startup init\n    fullscreenAvailabilityChangedHandler();\n    fullscreenStateHandler();\n  }\n}\n","import {PlaybackToggleButton, PlaybackToggleButtonConfig} from './playbacktogglebutton';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI, PlayerEventBase, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that overlays the video and toggles between playback and pause.\n */\nexport class HugePlaybackToggleButton extends PlaybackToggleButton {\n\n  constructor(config: PlaybackToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-hugeplaybacktogglebutton',\n      text: i18n.getLocalizer('playPause'),\n      role: 'button',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // Update button state through API events\n    super.configure(player, uimanager, false);\n\n    // Set enterFullscreenOnInitialPlayback if set in the uimanager config\n    if (typeof uimanager.getConfig().enterFullscreenOnInitialPlayback === 'boolean') {\n      this.config.enterFullscreenOnInitialPlayback = uimanager.getConfig().enterFullscreenOnInitialPlayback;\n    }\n\n    let togglePlayback = () => {\n      if (player.isPlaying() || this.isPlayInitiated) {\n        player.pause('ui');\n      } else {\n        player.play('ui');\n      }\n    };\n\n    let toggleFullscreen = () => {\n      if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n        player.setViewMode(player.exports.ViewMode.Inline);\n      } else {\n        player.setViewMode(player.exports.ViewMode.Fullscreen);\n      }\n    };\n\n    let firstPlay = true;\n    let clickTime = 0;\n    let doubleClickTime = 0;\n\n    /*\n     * YouTube-style toggle button handling\n     *\n     * The goal is to prevent a short pause or playback interval between a click, that toggles playback, and a\n     * double click, that toggles fullscreen. In this naive approach, the first click would e.g. start playback,\n     * the second click would be detected as double click and toggle to fullscreen, and as second normal click stop\n     * playback, which results is a short playback interval with max length of the double click detection\n     * period (usually 500ms).\n     *\n     * To solve this issue, we defer handling of the first click for 200ms, which is almost unnoticeable to the user,\n     * and just toggle playback if no second click (double click) has been registered during this period. If a double\n     * click is registered, we just toggle the fullscreen. In the first 200ms, undesired playback changes thus cannot\n     * happen. If a double click is registered within 500ms, we undo the playback change and switch fullscreen mode.\n     * In the end, this method basically introduces a 200ms observing interval in which playback changes are prevented\n     * if a double click happens.\n     */\n    this.onClick.subscribe(() => {\n      // Directly start playback on first click of the button.\n      // This is a required workaround for mobile browsers where video playback needs to be triggered directly\n      // by the user. A deferred playback start through the timeout below is not considered as user action and\n      // therefore ignored by mobile browsers.\n      if (firstPlay) {\n        // Try to start playback. Then we wait for Play and only when it arrives, we disable the firstPlay flag.\n        // If we disable the flag here, onClick was triggered programmatically instead of by a user interaction, and\n        // playback is blocked (e.g. on mobile devices due to the programmatic play() call), we loose the chance to\n        // ever start playback through a user interaction again with this button.\n        togglePlayback();\n\n        if (this.config.enterFullscreenOnInitialPlayback) {\n          player.setViewMode(player.exports.ViewMode.Fullscreen);\n        }\n\n        return;\n      }\n\n      let now = Date.now();\n\n      if (now - clickTime < 200) {\n        // We have a double click inside the 200ms interval, just toggle fullscreen mode\n        toggleFullscreen();\n        doubleClickTime = now;\n        return;\n      } else if (now - clickTime < 500) {\n        // We have a double click inside the 500ms interval, undo playback toggle and toggle fullscreen mode\n        toggleFullscreen();\n        togglePlayback();\n        doubleClickTime = now;\n        return;\n      }\n\n      clickTime = now;\n\n      setTimeout(() => {\n        if (Date.now() - doubleClickTime > 200) {\n          // No double click detected, so we toggle playback and wait what happens next\n          togglePlayback();\n        }\n      }, 200);\n    });\n\n    player.on(player.exports.PlayerEvent.Play, () => {\n      // Playback has really started, we can disable the flag to switch to normal toggle button handling\n      firstPlay = false;\n    });\n\n    player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n      if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n        // if playback could not be started, reset the first play flag as we need the user interaction to start\n        firstPlay = true;\n      }\n    });\n\n    const suppressPlayButtonTransitionAnimation = () => {\n      // Disable the current animation\n      this.setTransitionAnimationsEnabled(false);\n\n      // Enable the transition animations for the next state change\n      this.onToggle.subscribeOnce(() => {\n        this.setTransitionAnimationsEnabled(true);\n      });\n    };\n\n    // Hide the play button animation when the UI is loaded (it should only be animated on state changes)\n    suppressPlayButtonTransitionAnimation();\n\n    const isAutoplayEnabled = player.getConfig().playback && Boolean(player.getConfig().playback.autoplay);\n    // We only know if an autoplay attempt is upcoming if the player is not yet ready. It the player is already ready,\n    // the attempt might be upcoming or might have already happened, but we don't have to handle that because we can\n    // simply rely on isPlaying and the play state events.\n    const isAutoplayUpcoming = !player.getSource() && isAutoplayEnabled;\n\n    // Hide the play button when the player is already playing or autoplay is upcoming\n    if (player.isPlaying() || isAutoplayUpcoming) {\n      // Hide the play button (switch to playing state)\n      this.on();\n      // Disable the animation of the playing state switch\n      suppressPlayButtonTransitionAnimation();\n\n      // Show the play button without an animation if a play attempt is blocked\n      player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n        if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n          suppressPlayButtonTransitionAnimation();\n        }\n      });\n    }\n  }\n\n  protected toDomElement(): DOM {\n    let buttonElement = super.toDomElement();\n\n    // Add child that contains the play button image\n    // Setting the image directly on the button does not work together with scaling animations, because the button\n    // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined\n    // to the size if the image, it can scale inside the player without overshooting.\n    buttonElement.append(new DOM('div', {\n      'class': this.prefixCss('image'),\n    }));\n\n    return buttonElement;\n  }\n\n  /**\n   * Enables or disables the play state transition animations of the play button image. Can be used to suppress\n   * animations.\n   * @param {boolean} enabled true to enable the animations (default), false to disable them\n   */\n  protected setTransitionAnimationsEnabled(enabled: boolean): void {\n    const noTransitionAnimationsClass = this.prefixCss('no-transition-animations');\n\n    if (enabled) {\n      this.getDomElement().removeClass(noTransitionAnimationsClass);\n    } else if (!this.getDomElement().hasClass(noTransitionAnimationsClass)) {\n      this.getDomElement().addClass(noTransitionAnimationsClass);\n    }\n  }\n}\n","import {ButtonConfig, Button} from './button';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button to play/replay a video.\n */\nexport class HugeReplayButton extends Button<ButtonConfig> {\n\n  constructor(config: ButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-hugereplaybutton',\n      text: i18n.getLocalizer('replay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      player.play('ui');\n    });\n  }\n\n  protected toDomElement(): DOM {\n    let buttonElement = super.toDomElement();\n\n    // Add child that contains the play button image\n    // Setting the image directly on the button does not work together with scaling animations, because the button\n    // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined\n    // to the size if the image, it can scale inside the player without overshooting.\n    buttonElement.append(new DOM('div', {\n      'class': this.prefixCss('image'),\n    }));\n\n    return buttonElement;\n  }\n}","import {ListSelector, ListSelectorConfig} from './listselector';\nimport {DOM} from '../dom';\nimport { i18n } from '../localization/i18n';\n\nexport class ItemSelectionList extends ListSelector<ListSelectorConfig> {\n\n  private static readonly CLASS_SELECTED = 'selected';\n\n  private listElement: DOM;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      tag: 'ul',\n      cssClass: 'ui-itemselectionlist',\n    }, this.config);\n  }\n\n  protected isActive(): boolean {\n    return this.items.length > 1;\n  }\n\n  protected toDomElement(): DOM {\n    let listElement = new DOM('ul', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    });\n\n    this.listElement = listElement;\n    this.updateDomItems();\n\n    return listElement;\n  }\n\n  protected updateDomItems(selectedValue: string = null) {\n    // Delete all children\n    this.listElement.empty();\n\n    let selectedListItem: DOM = null;\n\n    const selectItem = (listItem: DOM) => {\n      listItem.addClass(this.prefixCss(ItemSelectionList.CLASS_SELECTED));\n    };\n\n    const deselectItem = (listItem: DOM) => {\n      listItem.removeClass(this.prefixCss(ItemSelectionList.CLASS_SELECTED));\n    };\n\n    for (let item of this.items) {\n      let listItem = new DOM('li', {\n        'type': 'li',\n        'class': this.prefixCss('ui-selectionlistitem'),\n      }).append(new DOM('a', {\n      }).html(i18n.performLocalization(item.label)));\n\n      if (!selectedListItem) {\n        if (selectedValue == null) { // If there is no pre-selected value, select the first one\n          selectedListItem = listItem;\n        } else if (String(selectedValue) === item.key) { // convert selectedValue to string to catch 'null'/null case\n          selectedListItem = listItem;\n        }\n      }\n\n      // Handle list item selections\n      listItem.on('click', () => {\n        // Deselect the previous item (if there was a selected item)\n        if (selectedListItem) {\n          deselectItem(selectedListItem);\n        }\n\n        // Select the clicked item\n        selectedListItem = listItem;\n        selectItem(listItem);\n\n        // Fire the event\n        this.onItemSelectedEvent(item.key, false);\n      });\n\n      // Select default item\n      if (selectedListItem) {\n        selectItem(selectedListItem);\n      }\n\n      this.listElement.append(listItem);\n    }\n  }\n\n  protected onItemAddedEvent(value: string) {\n    super.onItemAddedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemRemovedEvent(value: string) {\n    super.onItemRemovedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemSelectedEvent(value: string, updateDomItems: boolean = true) {\n    super.onItemSelectedEvent(value);\n    if (updateDomItems) {\n      this.updateDomItems(value);\n    }\n  }\n}\n","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {EventDispatcher, Event, NoArgs} from '../eventdispatcher';\nimport { LocalizableText, i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Label} component.\n */\nexport interface LabelConfig extends ComponentConfig {\n  /**\n   * The text as string or localize callback on the label.\n   */\n  text?: LocalizableText;\n\n  /**\n   * WCAG20 standard: Associate label to form control.\n   */\n  for?: string;\n}\n\n/**\n * A simple text label.\n *\n * DOM example:\n * <code>\n *     <span class='ui-label'>...some text...</span>\n * </code>\n */\nexport class Label<Config extends LabelConfig> extends Component<Config> {\n\n  private text: LocalizableText;\n\n  private labelEvents = {\n    onClick: new EventDispatcher<Label<Config>, NoArgs>(),\n    onTextChanged: new EventDispatcher<Label<Config>, string>(),\n  };\n\n  constructor(config: Config = {} as Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-label',\n    } as Config, this.config);\n    this.text = this.config.text;\n  }\n\n  protected toDomElement(): DOM {\n    const tagName = this.config.for != null ? 'label' : 'span';\n\n    let labelElement = new DOM(tagName, {\n      'id': this.config.id,\n      'for': this.config.for,\n      'class': this.getCssClasses(),\n    }).html(i18n.performLocalization(this.text));\n\n    labelElement.on('click', () => {\n      this.onClickEvent();\n    });\n\n    return labelElement;\n  }\n\n  /**\n   * Set the text on this label.\n   * @param text\n   */\n  setText(text: LocalizableText) {\n    if (text === this.text) {\n      return;\n    }\n\n    this.text = text;\n    const localizedText = i18n.performLocalization(text);\n    this.getDomElement().html(localizedText);\n    this.onTextChangedEvent(localizedText);\n  }\n\n  /**\n   * Gets the text on this label.\n   * @return {string} The text on the label\n   */\n  getText(): string {\n    return i18n.performLocalization(this.text);\n  }\n\n  /**\n   * Clears the text on this label.\n   */\n  clearText() {\n    this.getDomElement().html('');\n    this.onTextChangedEvent(null);\n  }\n\n  /**\n   * Tests if the label is empty and does not contain any text.\n   * @return {boolean} True if the label is empty, else false\n   */\n  isEmpty(): boolean {\n    return !this.text;\n  }\n\n  /**\n   * Fires the {@link #onClick} event.\n   * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method\n   * and calling the super method.\n   */\n  protected onClickEvent() {\n    this.labelEvents.onClick.dispatch(this);\n  }\n\n  /**\n   * Fires the {@link #onClick} event.\n   * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method\n   * and calling the super method.\n   */\n  protected onTextChangedEvent(text: string) {\n    this.labelEvents.onTextChanged.dispatch(this, text);\n  }\n\n  /**\n   * Gets the event that is fired when the label is clicked.\n   * @returns {Event<Label<LabelConfig>, NoArgs>}\n   */\n  get onClick(): Event<Label<LabelConfig>, NoArgs> {\n    return this.labelEvents.onClick.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the text on the label is changed.\n   * @returns {Event<Label<LabelConfig>, string>}\n   */\n  get onTextChanged(): Event<Label<LabelConfig>, string> {\n    return this.labelEvents.onTextChanged.getEvent();\n  }\n}\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\nimport { ListItem, ListSelector, ListSelectorConfig } from './listselector';\nimport {DOM} from '../dom';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\nimport { ArrayUtils } from '../arrayutils';\n\n/**\n * A element to select a single item out of a list of available items.\n *\n * DOM example:\n * <code>\n *   <div class='ui-listbox'>\n *     <button class='ui-listbox-button'>label</button>\n *     ...\n *   </div\n * </code>\n */\n// TODO: change ListSelector to extends container in v4 to improve usage of ListBox.\n//       Currently we are creating the dom element of the list box with child elements manually here.\n//       But this functionality is already covered within the Container component.\nexport class ListBox extends ListSelector<ListSelectorConfig> {\n  private listBoxElement: DOM;\n  private components: ListBoxItemButton[] = [];\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-listbox',\n    } as ListSelectorConfig, this.config);\n  }\n\n  public configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // Subscribe before super call to receive initial events\n    this.onItemAdded.subscribe(this.addListBoxDomItem);\n    this.onItemRemoved.subscribe(this.removeListBoxDomItem);\n    this.onItemSelected.subscribe(this.refreshSelectedItem);\n\n    super.configure(player, uimanager);\n  }\n\n  protected toDomElement(): DOM {\n    let listBoxElement = new DOM('div', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    });\n\n    this.listBoxElement = listBoxElement;\n    this.createListBoxDomItems();\n    this.refreshSelectedItem();\n\n    return listBoxElement;\n  }\n\n  private createListBoxDomItems() {\n    // Delete all children\n    this.listBoxElement.empty();\n    this.components = [];\n\n    // Add updated children\n    for (let item of this.items) {\n      this.addListBoxDomItem(this, item.key);\n    }\n  }\n\n  private removeListBoxDomItem = (_: ListBox, key: string) => {\n    const component = this.getComponentForKey(key);\n    if (component) {\n      component.getDomElement().remove();\n      ArrayUtils.remove(this.components, component);\n    }\n  };\n\n  private addListBoxDomItem = (_: ListBox, key: string) => {\n    const component = this.getComponentForKey(key);\n    const newItem = this.getItemForKey(key);\n    if (component) {\n      // Update existing component\n      component.setText(newItem.label);\n    } else {\n      const listBoxItemButton = this.buildListBoxItemButton(newItem);\n\n      listBoxItemButton.onClick.subscribe(() => {\n        this.handleSelectionChange(listBoxItemButton);\n      });\n\n      this.components.push(listBoxItemButton);\n      this.listBoxElement.append(listBoxItemButton.getDomElement());\n    }\n  };\n\n  private refreshSelectedItem = () => {\n    // This gets called twice because the first time is triggered when the user clicks on the ListBoxItemButton. And the\n    // second call comes from the player event when the actual item is selected (Subtitle / AudioTrack in this case).\n    // As this is a generic component we can't prohibit this behaviour. We need to treat this component as it acts\n    // independent from PlayerEvents and on the other hand we need to react to PlayerEvents as it could be triggered\n    // from outside.\n\n    for (let item of this.items) {\n      const component = this.getComponentForKey(item.key);\n      if (component) {\n        String(component.key) === String(this.selectedItem) ? component.on() : component.off();\n      }\n    }\n  };\n\n  private buildListBoxItemButton(listItem: ListItem): ListBoxItemButton {\n    return new ListBoxItemButton({\n      key: listItem.key,\n      text: listItem.label,\n      ariaLabel: listItem.ariaLabel,\n    });\n  }\n\n  private getComponentForKey(key: string): ListBoxItemButton {\n    return this.components.find((c) => key === c.key);\n  }\n\n  private handleSelectionChange = (sender: ListBoxItemButton) => {\n    this.onItemSelectedEvent(sender.key);\n  };\n}\n\ninterface ListBoxItemButtonConfig extends ToggleButtonConfig {\n  /**\n   * key to identify selected item. Similar to the value attribute of an select option.\n   */\n  key: string;\n}\n\nclass ListBoxItemButton extends ToggleButton<ListBoxItemButtonConfig> {\n\n  constructor(config: ListBoxItemButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-listbox-button',\n      onClass: 'selected',\n      offClass: '',\n    } as ListBoxItemButtonConfig, this.config);\n  }\n\n  get key(): string {\n    return (this.config as ListBoxItemButtonConfig).key;\n  }\n}\n","import {Component, ComponentConfig} from './component';\nimport {EventDispatcher, Event} from '../eventdispatcher';\nimport {ArrayUtils} from '../arrayutils';\nimport { LocalizableText, i18n } from '../localization/i18n';\n\n/**\n * A map of items (key/value -> label} for a {@link ListSelector} in a {@link ListSelectorConfig}.\n */\nexport interface ListItem {\n  key: string;\n  label: LocalizableText;\n  sortedInsert?: boolean;\n  ariaLabel?: string;\n}\n\n/**\n * Filter function that can be used to filter out list items added through {@link ListSelector.addItem}.\n *\n * This is intended to be used in conjunction with subclasses that populate themselves automatically\n * via the player API, e.g. {@link SubtitleSelectBox}.\n */\nexport interface ListItemFilter {\n  /**\n   * Takes a list item and decides whether it should pass or be discarded.\n   * @param {ListItem} listItem the item to apply the filter to\n   * @returns {boolean} true to let the item pass through the filter, false to discard the item\n   */\n  (listItem: ListItem): boolean;\n}\n\n/**\n * Translator function to translate labels of list items added through {@link ListSelector.addItem}.\n *\n * This is intended to be used in conjunction with subclasses that populate themselves automatically\n * via the player API, e.g. {@link SubtitleSelectBox}.\n */\nexport interface ListItemLabelTranslator {\n  /**\n   * Takes a list item, optionally changes the label, and returns the new label.\n   * @param {ListItem} listItem the item to translate\n   * @returns {string} the translated or original label\n   */\n  (listItem: ListItem): string;\n}\n\n/**\n * Configuration interface for a {@link ListSelector}.\n */\nexport interface ListSelectorConfig extends ComponentConfig {\n  items?: ListItem[];\n  filter?: ListItemFilter;\n  translator?: ListItemLabelTranslator;\n}\n\nexport abstract class ListSelector<Config extends ListSelectorConfig> extends Component<ListSelectorConfig> {\n\n  protected items: ListItem[];\n  protected selectedItem: string;\n\n  private listSelectorEvents = {\n    onItemAdded: new EventDispatcher<ListSelector<Config>, string>(),\n    onItemRemoved: new EventDispatcher<ListSelector<Config>, string>(),\n    onItemSelected: new EventDispatcher<ListSelector<Config>, string>(),\n  };\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      items: [],\n      cssClass: 'ui-listselector',\n    }, this.config);\n\n    this.items = this.config.items;\n  }\n\n  private getItemIndex(key: string): number {\n    for (let index in this.items) {\n      if (key === this.items[index].key) {\n        return parseInt(index);\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Returns all current items of this selector.\n   * * @returns {ListItem[]}\n   */\n  getItems(): ListItem[] {\n    return this.items;\n  }\n\n  /**\n   * Checks if the specified item is part of this selector.\n   * @param key the key of the item to check\n   * @returns {boolean} true if the item is part of this selector, else false\n   */\n  hasItem(key: string): boolean {\n    return this.getItemIndex(key) > -1;\n  }\n\n  /**\n   * Adds an item to this selector by doing a sorted insert or by appending the element to the end of the list of items.\n   * If an item with the specified key already exists, it is replaced.\n   * @param key the key of the item to add\n   * @param label the (human-readable) label of the item to add\n   * @param sortedInsert whether the item should be added respecting the order of keys\n   * @param ariaLabel custom aria label for the listItem\n   */\n  addItem(key: string, label: LocalizableText, sortedInsert = false, ariaLabel = '') {\n    const listItem = { key: key, label: i18n.performLocalization(label), ...(ariaLabel && { ariaLabel })};\n\n    // Apply filter function\n    if (this.config.filter && !this.config.filter(listItem)) {\n      return;\n    }\n\n    // Apply translator function\n    if (this.config.translator) {\n      listItem.label = this.config.translator(listItem);\n    }\n\n    // Try to remove key first to get overwrite behavior and avoid duplicate keys\n    this.removeItem(key); // This will trigger an ItemRemoved and an ItemAdded event\n\n    // Add the item to the list\n    if (sortedInsert) {\n      const index = this.items.findIndex(entry => entry.key > key);\n      if (index < 0) {\n        this.items.push(listItem);\n      } else {\n        this.items.splice(index, 0, listItem);\n      }\n    } else {\n      this.items.push(listItem);\n    }\n    this.onItemAddedEvent(key);\n  }\n\n  /**\n   * Removes an item from this selector.\n   * @param key the key of the item to remove\n   * @returns {boolean} true if removal was successful, false if the item is not part of this selector\n   */\n  removeItem(key: string): boolean {\n    let index = this.getItemIndex(key);\n    if (index > -1) {\n      ArrayUtils.remove(this.items, this.items[index]);\n      this.onItemRemovedEvent(key);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Selects an item from the items in this selector.\n   * @param key the key of the item to select\n   * @returns {boolean} true is the selection was successful, false if the selected item is not part of the selector\n   */\n  selectItem(key: string): boolean {\n    if (key === this.selectedItem) {\n      // itemConfig is already selected, suppress any further action\n      return true;\n    }\n\n    let index = this.getItemIndex(key);\n\n    if (index > -1) {\n      this.selectedItem = key;\n      this.onItemSelectedEvent(key);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns the key of the selected item.\n   * @returns {string} the key of the selected item or null if no item is selected\n   */\n  getSelectedItem(): string | null {\n    return this.selectedItem;\n  }\n\n  /**\n   * Returns the items for the given key or undefined if no item with the given key exists.\n   * @param key the key of the item to return\n   * @returns {ListItem} the item with the requested key. Undefined if no item with the given key exists.\n   */\n  getItemForKey(key: string): ListItem {\n    return this.items.find((item) => item.key === key);\n  }\n\n  /**\n   * Synchronize the current items of this selector with the given ones. This will remove and add items selectively.\n   * For each removed item the ItemRemovedEvent and for each added item the ItemAddedEvent will be triggered. Favour\n   * this method over using clearItems and adding all items again afterwards.\n   * @param newItems\n   */\n  synchronizeItems(newItems: ListItem[]): void {\n    newItems\n      .filter((item) => !this.hasItem(item.key))\n      .forEach((item) => this.addItem(item.key, item.label, item.sortedInsert, item.ariaLabel));\n\n    this.items\n      .filter((item) => newItems.filter((i) => i.key === item.key).length === 0)\n      .forEach((item) => this.removeItem(item.key));\n  }\n\n  /**\n   * Removes all items from this selector.\n   */\n  clearItems() {\n    // local copy for iteration after clear\n    let items = this.items;\n    // clear items\n    this.items = [];\n\n    // clear the selection as the selected item is also removed\n    this.selectedItem = null;\n\n    // fire events\n    for (let item of items) {\n      this.onItemRemovedEvent(item.key);\n    }\n  }\n\n  /**\n   * Returns the number of items in this selector.\n   * @returns {number}\n   */\n  itemCount(): number {\n    return Object.keys(this.items).length;\n  }\n\n  protected onItemAddedEvent(key: string) {\n    this.listSelectorEvents.onItemAdded.dispatch(this, key);\n  }\n\n  protected onItemRemovedEvent(key: string) {\n    this.listSelectorEvents.onItemRemoved.dispatch(this, key);\n  }\n\n  protected onItemSelectedEvent(key: string) {\n    this.listSelectorEvents.onItemSelected.dispatch(this, key);\n  }\n\n  /**\n   * Gets the event that is fired when an item is added to the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemAdded(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemAdded.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when an item is removed from the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemRemoved(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemRemoved.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when an item is selected from the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemSelected(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemSelected.getEvent();\n  }\n}","import {LabelConfig, Label} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Enumerates the types of content that the {@link MetadataLabel} can display.\n */\nexport enum MetadataLabelContent {\n  /**\n   * Title of the data source.\n   */\n  Title,\n  /**\n   * Description fo the data source.\n   */\n  Description,\n}\n\n/**\n * Configuration interface for {@link MetadataLabel}.\n */\nexport interface MetadataLabelConfig extends LabelConfig {\n  /**\n   * The type of content that should be displayed in the label.\n   */\n  content: MetadataLabelContent;\n}\n\n/**\n * A label that can be configured to display certain metadata.\n */\nexport class MetadataLabel extends Label<MetadataLabelConfig> {\n\n  constructor(config: MetadataLabelConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['label-metadata', 'label-metadata-' + MetadataLabelContent[config.content].toLowerCase()],\n    } as MetadataLabelConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let uiconfig = uimanager.getConfig();\n\n    let init = () => {\n      switch (config.content) {\n        case MetadataLabelContent.Title:\n          this.setText(uiconfig.metadata.title);\n          break;\n        case MetadataLabelContent.Description:\n          this.setText(uiconfig.metadata.description);\n          break;\n      }\n    };\n\n    let unload = () => {\n      this.setText(null);\n    };\n\n    // Init label\n    init();\n    // Clear labels when source is unloaded\n    player.on(player.exports.PlayerEvent.SourceUnloaded, unload);\n\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles Apple macOS picture-in-picture mode.\n */\nexport class PictureInPictureToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-piptogglebutton',\n      text: i18n.getLocalizer('pictureInPicture'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const isPictureInPictureAvailable = () => {\n      return player.isViewModeAvailable(player.exports.ViewMode.PictureInPicture);\n    };\n\n    const pictureInPictureStateHandler = () => {\n      player.getViewMode() === player.exports.ViewMode.PictureInPicture ? this.on() : this.off();\n    };\n\n    const pictureInPictureAvailabilityChangedHandler = () => {\n      isPictureInPictureAvailable() ? this.show() : this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.ViewModeChanged, pictureInPictureStateHandler);\n\n    // Available only in our native SDKs for now\n    if ((player.exports.PlayerEvent as any).ViewModeAvailabilityChanged) {\n      player.on(\n        (player.exports.PlayerEvent as any).ViewModeAvailabilityChanged,\n        pictureInPictureAvailabilityChangedHandler,\n      );\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(pictureInPictureAvailabilityChangedHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isPictureInPictureAvailable()) {\n        if (console) {\n          console.log('PIP unavailable');\n        }\n        return;\n      }\n\n      const targetViewMode =\n        player.getViewMode() === player.exports.ViewMode.PictureInPicture\n          ? player.exports.ViewMode.Inline\n          : player.exports.ViewMode.PictureInPicture;\n\n      player.setViewMode(targetViewMode);\n    });\n\n    // Startup init\n    pictureInPictureAvailabilityChangedHandler(); // Hide button if PIP not available\n    pictureInPictureStateHandler();\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection of different playback speeds.\n */\nexport class PlaybackSpeedSelectBox extends SelectBox {\n  protected defaultPlaybackSpeeds: number[];\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n    this.defaultPlaybackSpeeds = [0.25, 0.5, 1, 1.5, 2];\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-playbackspeedselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addDefaultItems();\n\n    this.onItemSelected.subscribe((sender: PlaybackSpeedSelectBox, value: string) => {\n      player.setPlaybackSpeed(parseFloat(value));\n      this.selectItem(value);\n    });\n\n    const setDefaultValue = (): void => {\n      const playbackSpeed = player.getPlaybackSpeed();\n      this.setSpeed(playbackSpeed);\n    };\n\n    player.on(player.exports.PlayerEvent.PlaybackSpeedChanged, setDefaultValue);\n    uimanager.getConfig().events.onUpdated.subscribe(setDefaultValue);\n  }\n\n  setSpeed(speed: number): void {\n    if (!this.selectItem(String(speed))) {\n      // a playback speed was set which is not in the list, add it to the list to show it to the user\n      this.clearItems();\n      this.addDefaultItems([speed]);\n      this.selectItem(String(speed));\n    }\n  }\n\n  addDefaultItems(customItems: number[] = []): void {\n    const sortedSpeeds = this.defaultPlaybackSpeeds.concat(customItems).sort();\n\n    sortedSpeeds.forEach(element => {\n      if (element !== 1) {\n        this.addItem(String(element), `${element}x`);\n      } else {\n        this.addItem(String(element), i18n.getLocalizer('normal'));\n      }\n    });\n  }\n\n  clearItems(): void {\n    this.items = [];\n    this.selectedItem = null;\n  }\n}","import {LabelConfig, Label} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\nimport {PlayerUtils} from '../playerutils';\nimport {StringUtils} from '../stringutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\nexport enum PlaybackTimeLabelMode {\n  /**\n   * Displays the current time\n   */\n  CurrentTime,\n  /**\n   * Displays the duration of the content\n   */\n  TotalTime,\n  /**\n   * Displays the current time and the duration of the content\n   * Format: ${currentTime} / ${totalTime}\n   */\n  CurrentAndTotalTime,\n  /**\n   * Displays the remaining time of the content\n   */\n  RemainingTime,\n}\n\nexport interface PlaybackTimeLabelConfig extends LabelConfig {\n  /**\n   * The type of which time should be displayed in the label.\n   * Default: PlaybackTimeLabelMode.CurrentAndTotalTime\n   */\n  timeLabelMode?: PlaybackTimeLabelMode;\n  /**\n   * Boolean if the label should be hidden in live playback\n   */\n  hideInLivePlayback?: boolean;\n}\n\n/**\n * A label that display the current playback time and the total time through {@link PlaybackTimeLabel#setTime setTime}\n * or any string through {@link PlaybackTimeLabel#setText setText}.\n */\nexport class PlaybackTimeLabel extends Label<PlaybackTimeLabelConfig> {\n\n  private timeFormat: string;\n\n  constructor(config: PlaybackTimeLabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <PlaybackTimeLabelConfig>{\n      cssClass: 'ui-playbacktimelabel',\n      timeLabelMode: PlaybackTimeLabelMode.CurrentAndTotalTime,\n      hideInLivePlayback: false,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let live = false;\n    let liveCssClass = this.prefixCss('ui-playbacktimelabel-live');\n    let liveEdgeCssClass = this.prefixCss('ui-playbacktimelabel-live-edge');\n    let minWidth = 0;\n\n    let liveClickHandler = () => {\n      player.timeShift(0);\n    };\n\n    let updateLiveState = () => {\n      // Player is playing a live stream when the duration is infinite\n      live = player.isLive();\n\n      // Attach/detach live marker class\n      if (live) {\n        this.getDomElement().addClass(liveCssClass);\n        this.setText(i18n.getLocalizer('live'));\n        if (config.hideInLivePlayback) {\n          this.hide();\n        }\n        this.onClick.subscribe(liveClickHandler);\n        updateLiveTimeshiftState();\n      } else {\n        this.getDomElement().removeClass(liveCssClass);\n        this.getDomElement().removeClass(liveEdgeCssClass);\n        this.show();\n        this.onClick.unsubscribe(liveClickHandler);\n      }\n    };\n\n    let updateLiveTimeshiftState = () => {\n      if (!live) {\n        return;\n      }\n\n      // The player is only at the live edge iff the stream is not shifted and it is actually playing or playback has\n      // never been started (meaning it isn't paused). A player that is paused is always behind the live edge.\n      // An exception is made for live streams without a timeshift window, because here we \"stop\" playback instead\n      // of pausing it (from a UI perspective), so we keep the live edge indicator on because a play would always\n      // resume at the live edge.\n      const isTimeshifted = player.getTimeShift() < 0;\n      const isTimeshiftAvailable = player.getMaxTimeShift() < 0;\n      if (!isTimeshifted && (!player.isPaused() || !isTimeshiftAvailable)) {\n        this.getDomElement().addClass(liveEdgeCssClass);\n      } else {\n        this.getDomElement().removeClass(liveEdgeCssClass);\n      }\n    };\n\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      live = args.live;\n      updateLiveState();\n    });\n    liveStreamDetector.detect(); // Initial detection\n\n    let playbackTimeHandler = () => {\n      if (!live && player.getDuration() !== Infinity) {\n        this.setTime(\n          PlayerUtils.getCurrentTimeRelativeToSeekableRange(player),\n          player.getDuration());\n      }\n\n      // To avoid 'jumping' in the UI by varying label sizes due to non-monospaced fonts,\n      // we gradually increase the min-width with the content to reach a stable size.\n      let width = this.getDomElement().width();\n      if (width > minWidth) {\n        minWidth = width;\n        this.getDomElement().css({\n          'min-width': minWidth + 'px',\n        });\n      }\n    };\n\n    let updateTimeFormatBasedOnDuration = () => {\n      // Set time format depending on source duration\n      this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?\n      StringUtils.FORMAT_HHMMSS : StringUtils.FORMAT_MMSS;\n      playbackTimeHandler();\n    };\n\n    player.on(player.exports.PlayerEvent.TimeChanged, playbackTimeHandler);\n    player.on(player.exports.PlayerEvent.Ready, updateTimeFormatBasedOnDuration);\n    player.on(player.exports.PlayerEvent.Seeked, playbackTimeHandler);\n\n    player.on(player.exports.PlayerEvent.TimeShift, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.TimeShifted, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.Playing, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.Paused, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.StallStarted, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.StallEnded, updateLiveTimeshiftState);\n\n    let init = () => {\n      // Reset min-width when a new source is ready (especially for switching VOD/Live modes where the label content\n      // changes)\n      minWidth = 0;\n      this.getDomElement().css({\n        'min-width': null,\n      });\n\n      updateTimeFormatBasedOnDuration();\n    };\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n\n    init();\n  }\n\n  /**\n   * Sets the current playback time and total duration.\n   * @param playbackSeconds the current playback time in seconds\n   * @param durationSeconds the total duration in seconds\n   */\n  setTime(playbackSeconds: number, durationSeconds: number) {\n    let currentTime = StringUtils.secondsToTime(playbackSeconds, this.timeFormat);\n    let totalTime = StringUtils.secondsToTime(durationSeconds, this.timeFormat);\n\n    switch ((<PlaybackTimeLabelConfig>this.config).timeLabelMode) {\n      case PlaybackTimeLabelMode.CurrentTime:\n        this.setText(`${currentTime}`);\n        break;\n      case PlaybackTimeLabelMode.TotalTime:\n        this.setText(`${totalTime}`);\n        break;\n      case PlaybackTimeLabelMode.CurrentAndTotalTime:\n        this.setText(`${currentTime} / ${totalTime}`);\n        break;\n      case PlaybackTimeLabelMode.RemainingTime:\n        let remainingTime = StringUtils.secondsToTime(durationSeconds - playbackSeconds, this.timeFormat);\n        this.setText(`${remainingTime}`);\n        break;\n    }\n  }\n\n  /**\n   * Sets the current time format\n   * @param timeFormat the time format\n   */\n  protected setTimeFormat(timeFormat: string): void {\n    this.timeFormat = timeFormat;\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport {PlayerUtils} from '../playerutils';\nimport { PlayerAPI, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\nexport interface PlaybackToggleButtonConfig extends ToggleButtonConfig {\n  /**\n   * Specify whether the player should be set to enter fullscreen by clicking on the playback toggle button\n   * when initiating the initial playback.\n   * Default is false.\n   */\n  enterFullscreenOnInitialPlayback?: boolean;\n}\n\n/**\n * A button that toggles between playback and pause.\n */\nexport class PlaybackToggleButton extends ToggleButton<PlaybackToggleButtonConfig> {\n\n  private static readonly CLASS_STOPTOGGLE = 'stoptoggle';\n  protected isPlayInitiated: boolean;\n\n  constructor(config: PlaybackToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbacktogglebutton',\n      text: i18n.getLocalizer('play'),\n      onAriaLabel: i18n.getLocalizer('pause'),\n      offAriaLabel: i18n.getLocalizer('play'),\n    }, this.config);\n\n    this.isPlayInitiated = false;\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager, handleClickEvent: boolean = true): void {\n    super.configure(player, uimanager);\n\n    // Set enterFullscreenOnInitialPlayback if set in the uimanager config\n    if (typeof uimanager.getConfig().enterFullscreenOnInitialPlayback === 'boolean') {\n      this.config.enterFullscreenOnInitialPlayback = uimanager.getConfig().enterFullscreenOnInitialPlayback;\n    }\n\n    let isSeeking = false;\n    let firstPlay = true;\n\n    // Handler to update button state based on player state\n    let playbackStateHandler = () => {\n      // If the UI is currently seeking, playback is temporarily stopped but the buttons should\n      // not reflect that and stay as-is (e.g indicate playback while seeking).\n      if (isSeeking) {\n        return;\n      }\n\n      if (player.isPlaying() || this.isPlayInitiated) {\n        this.on();\n      } else {\n        this.off();\n      }\n    };\n\n    // Call handler upon these events\n    player.on(player.exports.PlayerEvent.Play, (e) => {\n      this.isPlayInitiated = true;\n      firstPlay = false;\n      playbackStateHandler();\n    });\n\n    player.on(player.exports.PlayerEvent.Paused, (e) => {\n      this.isPlayInitiated = false;\n      playbackStateHandler();\n    });\n\n    player.on(player.exports.PlayerEvent.Playing, (e) => {\n      this.isPlayInitiated = false;\n      playbackStateHandler();\n    });\n    // after unloading + loading a new source, the player might be in a different playing state (from playing into stopped)\n    player.on(player.exports.PlayerEvent.SourceLoaded, playbackStateHandler);\n    uimanager.getConfig().events.onUpdated.subscribe(playbackStateHandler);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, playbackStateHandler);\n    // when playback finishes, player turns to paused mode\n    player.on(player.exports.PlayerEvent.PlaybackFinished, playbackStateHandler);\n    player.on(player.exports.PlayerEvent.CastStarted, playbackStateHandler);\n\n    // When a playback attempt is rejected with warning 5008, we switch the button state back to off\n    // This is required for blocked autoplay, because there is no Paused event in such case\n    player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n      if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n        this.isPlayInitiated = false;\n        firstPlay = true;\n        this.off();\n      }\n    });\n\n    const updateLiveState = () => {\n      const showStopToggle = player.isLive() && !PlayerUtils.isTimeShiftAvailable(player);\n\n      if (showStopToggle) {\n        this.getDomElement().addClass(this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));\n      } else {\n        this.getDomElement().removeClass(this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));\n      }\n    };\n\n    // Detect absence of timeshifting on live streams and add tagging class to convert button icons to play/stop\n    let timeShiftDetector = new PlayerUtils.TimeShiftAvailabilityDetector(player);\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n\n    timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe(() => updateLiveState());\n    liveStreamDetector.onLiveChanged.subscribe(() => updateLiveState());\n\n    timeShiftDetector.detect(); // Initial detection\n    liveStreamDetector.detect();\n\n    if (handleClickEvent) {\n      // Control player by button events\n      // When a button event triggers a player API call, events are fired which in turn call the event handler\n      // above that updated the button state.\n      this.onClick.subscribe(() => {\n        if (player.isPlaying() || this.isPlayInitiated) {\n          player.pause('ui');\n        } else {\n          player.play('ui');\n\n          if (firstPlay && this.config.enterFullscreenOnInitialPlayback) {\n            player.setViewMode(player.exports.ViewMode.Fullscreen);\n          }\n        }\n      });\n    }\n\n    // Track UI seeking status\n    uimanager.onSeek.subscribe(() => {\n      isSeeking = true;\n    });\n    uimanager.onSeeked.subscribe(() => {\n      isSeeking = false;\n    });\n\n    // Startup init\n    playbackStateHandler();\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {HugePlaybackToggleButton} from './hugeplaybacktogglebutton';\n\nexport interface PlaybackToggleOverlayConfig extends ContainerConfig {\n  /**\n   * Specify whether the player should be set to enter fullscreen by clicking on the playback toggle button\n   * when initiating the initial playback.\n   * Default is false.\n   */\n  enterFullscreenOnInitialPlayback?: boolean;\n}\n\n/**\n * Overlays the player and displays error messages.\n */\nexport class PlaybackToggleOverlay extends Container<PlaybackToggleOverlayConfig> {\n\n  private playbackToggleButton: HugePlaybackToggleButton;\n\n  constructor(config: PlaybackToggleOverlayConfig = {}) {\n    super(config);\n\n    this.playbackToggleButton = new HugePlaybackToggleButton({\n      enterFullscreenOnInitialPlayback: Boolean(config.enterFullscreenOnInitialPlayback),\n    });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbacktoggle-overlay',\n      components: [this.playbackToggleButton],\n    }, this.config);\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {Component, ComponentConfig} from './component';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport {HugeReplayButton} from './hugereplaybutton';\nimport { UIRecommendationConfig } from '../uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Overlays the player and displays recommended videos.\n */\nexport class RecommendationOverlay extends Container<ContainerConfig> {\n\n  private replayButton: HugeReplayButton;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.replayButton = new HugeReplayButton();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-recommendation-overlay',\n      hidden: true,\n      components: [this.replayButton],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let clearRecommendations = () => {\n      for (let component of this.getComponents().slice()) {\n        if (component instanceof RecommendationItem) {\n          this.removeComponent(component);\n        }\n      }\n      this.updateComponents();\n      this.getDomElement().removeClass(this.prefixCss('recommendations'));\n    };\n\n    let setupRecommendations = () => {\n      clearRecommendations();\n\n      const recommendations = uimanager.getConfig().recommendations;\n\n      if (recommendations.length > 0) {\n        let index = 1;\n        for (let item of recommendations) {\n          this.addComponent(new RecommendationItem({\n            itemConfig: item,\n            cssClasses: ['recommendation-item-' + (index++)],\n          }));\n        }\n        this.updateComponents(); // create container DOM elements\n\n        this.getDomElement().addClass(this.prefixCss('recommendations'));\n      }\n    };\n\n    uimanager.getConfig().events.onUpdated.subscribe(setupRecommendations);\n    // Remove recommendations and hide overlay when source is unloaded\n    player.on(player.exports.PlayerEvent.SourceUnloaded, () => {\n      clearRecommendations();\n      this.hide();\n    });\n    // Display recommendations when playback has finished\n    player.on(player.exports.PlayerEvent.PlaybackFinished, () => {\n      this.show();\n    });\n    // Hide recommendations when playback starts, e.g. a restart\n    player.on(player.exports.PlayerEvent.Play, () => {\n      this.hide();\n    });\n\n    // Init on startup\n    setupRecommendations();\n  }\n}\n\n/**\n * Configuration interface for the {@link RecommendationItem}\n */\ninterface RecommendationItemConfig extends ComponentConfig {\n  itemConfig: UIRecommendationConfig;\n}\n\n/**\n * An item of the {@link RecommendationOverlay}. Used only internally in {@link RecommendationOverlay}.\n */\nclass RecommendationItem extends Component<RecommendationItemConfig> {\n\n  constructor(config: RecommendationItemConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-recommendation-item',\n      itemConfig: null, // this must be passed in from outside\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let config = this.config.itemConfig;\n\n    let itemElement = new DOM('a', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'href': config.url,\n    }).css({ 'background-image': `url(${config.thumbnail})` });\n\n    let bgElement = new DOM('div', {\n      'class': this.prefixCss('background'),\n    });\n    itemElement.append(bgElement);\n\n    let titleElement = new DOM('span', {\n      'class': this.prefixCss('title'),\n    }).append(new DOM('span', {\n      'class': this.prefixCss('innertitle'),\n    }).html(config.title));\n    itemElement.append(titleElement);\n\n    let timeElement = new DOM('span', {\n      'class': this.prefixCss('duration'),\n    }).append(new DOM('span', {\n      'class': this.prefixCss('innerduration'),\n    }).html(config.duration ? StringUtils.secondsToTime(config.duration) : ''));\n    itemElement.append(timeElement);\n\n    return itemElement;\n  }\n}","import { ButtonConfig, Button } from './button';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\nimport { PlayerUtils } from '../playerutils';\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\n\n/**\n * A button to play/replay a video.\n */\nexport class ReplayButton extends Button<ButtonConfig> {\n\n  constructor(config: ButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-replaybutton',\n      text: i18n.getLocalizer('replay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    if (player.isLive()) {\n      this.hide();\n    }\n\n    const liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      if (args.live) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    });\n\n    this.onClick.subscribe(() => {\n      if (!player.hasEnded()) {\n        player.seek(0);\n        // Not calling `play` will keep the play/pause state as is\n      } else {\n        // If playback has already ended, calling `play` will automatically restart from the beginning\n        player.play('ui');\n      }\n    });\n  }\n}\n","import { ExtendedPlayerAPI, GroupPlaybackSuspension, GroupPlaybackSuspensionReason } from './../groupplaybackapi';\nimport { Component, ComponentConfig } from './component';\nimport { DOM } from '../dom';\nimport { Event, EventDispatcher, NoArgs } from '../eventdispatcher';\nimport { SeekBarLabel } from './seekbarlabel';\nimport { UIInstanceManager, SeekPreviewArgs } from '../uimanager';\nimport { Timeout } from '../timeout';\nimport { PlayerUtils } from '../playerutils';\nimport TimeShiftAvailabilityChangedArgs = PlayerUtils.TimeShiftAvailabilityChangedArgs;\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\nimport { TimelineMarker } from '../uiconfig';\nimport { PlayerAPI, PlayerEventBase } from 'bitmovin-player';\nimport { StringUtils } from '../stringutils';\nimport { SeekBarType, SeekBarController } from './seekbarcontroller';\nimport { i18n } from '../localization/i18n';\nimport { BrowserUtils } from '../browserutils';\nimport { TimelineMarkersHandler } from './timelinemarkershandler';\nimport { getMinBufferLevel } from './seekbarbufferlevel';\n\n/**\n * Configuration interface for the {@link SeekBar} component.\n */\nexport interface SeekBarConfig extends ComponentConfig {\n  /**\n   * The label above the seek position.\n   */\n  label?: SeekBarLabel;\n  /**\n   * Bar will be vertical instead of horizontal if set to true.\n   */\n  vertical?: boolean;\n  /**\n   * The interval in milliseconds in which the playback position on the seek bar will be updated. The shorter the\n   * interval, the smoother it looks and the more resource intense it is. The update interval will be kept as steady\n   * as possible to avoid jitter.\n   * Set to -1 to disable smooth updating and update it on player TimeChanged events instead.\n   * Default: 50 (50ms = 20fps).\n   */\n  smoothPlaybackPositionUpdateIntervalMs?: number;\n\n  /**\n   * Used for seekBar control increments and decrements\n   */\n  keyStepIncrements?: { leftRight: number, upDown: number };\n\n  /**\n   * Used for seekBar marker snapping range percentage\n   */\n  snappingRange?: number;\n\n  /**\n   * Used to enable/disable seek preview\n   */\n  enableSeekPreview?: boolean;\n}\n\n/**\n * Event argument interface for a seek preview event.\n */\nexport interface SeekPreviewEventArgs extends SeekPreviewArgs {\n  /**\n   * Tells if the seek preview event comes from a scrubbing.\n   */\n  scrubbing: boolean;\n}\n\nexport interface SeekBarMarker {\n  marker: TimelineMarker;\n  position: number;\n  duration?: number;\n  element?: DOM;\n}\n\n/**\n * A seek bar to seek within the player's media. It displays the current playback position, amount of buffed data, seek\n * target, and keeps status about an ongoing seek.\n *\n * The seek bar displays different 'bars':\n *  - the playback position, i.e. the position in the media at which the player current playback pointer is positioned\n *  - the buffer position, which usually is the playback position plus the time span that is already buffered ahead\n *  - the seek position, used to preview to where in the timeline a seek will jump to\n */\nexport class SeekBar extends Component<SeekBarConfig> {\n\n  public static readonly SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED = -1;\n\n  /**\n   * The CSS class that is added to the DOM element while the seek bar is in 'seeking' state.\n   */\n  private static readonly CLASS_SEEKING = 'seeking';\n\n  private seekBar: DOM;\n  private seekBarPlaybackPosition: DOM;\n  private seekBarPlaybackPositionMarker: DOM;\n  private seekBarBufferPosition: DOM;\n  private seekBarSeekPosition: DOM;\n  private seekBarBackdrop: DOM;\n\n  private label: SeekBarLabel;\n\n  private seekBarMarkersContainer: DOM;\n  private timelineMarkersHandler: TimelineMarkersHandler;\n\n  private player: PlayerAPI;\n\n  protected seekBarType: SeekBarType;\n\n  protected isUiShown: boolean;\n\n  /**\n   * Buffer of the the current playback position. The position must be buffered in case the element\n   * needs to be refreshed with {@link #refreshPlaybackPosition}.\n   * @type {number}\n   */\n  private playbackPositionPercentage = 0;\n\n  private smoothPlaybackPositionUpdater: Timeout;\n  private pausedTimeshiftUpdater: Timeout;\n\n  private isUserSeeking = false;\n\n  private seekBarEvents = {\n    /**\n     * Fired when a scrubbing seek operation is started.\n     */\n    onSeek: new EventDispatcher<SeekBar, NoArgs>(),\n    /**\n     * Fired during a scrubbing seek to indicate that the seek preview (i.e. the video frame) should be updated.\n     */\n    onSeekPreview: new EventDispatcher<SeekBar, SeekPreviewEventArgs>(),\n    /**\n     * Fired when a scrubbing seek has finished or when a direct seek is issued.\n     */\n    onSeeked: new EventDispatcher<SeekBar, number>(),\n  };\n\n  constructor(config: SeekBarConfig = {}) {\n    super(config);\n\n    const keyStepIncrements = this.config.keyStepIncrements || {\n      leftRight: 1,\n      upDown: 5,\n    };\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-seekbar',\n      vertical: false,\n      smoothPlaybackPositionUpdateIntervalMs: 50,\n      keyStepIncrements,\n      ariaLabel: i18n.getLocalizer('seekBar'),\n      tabIndex: 0,\n      snappingRange: 1,\n      enableSeekPreview: true,\n    }, this.config);\n\n    this.label = this.config.label;\n  }\n\n  initialize(): void {\n    super.initialize();\n\n    if (this.hasLabel()) {\n      this.getLabel().initialize();\n    }\n  }\n\n  protected setAriaSliderMinMax(min: string, max: string) {\n    this.getDomElement().attr('aria-valuemin', min);\n    this.getDomElement().attr('aria-valuemax', max);\n  }\n\n  private setAriaSliderValues() {\n    if (this.seekBarType === SeekBarType.Live) {\n      const timeshiftValue = Math.ceil(this.player.getTimeShift()).toString();\n      this.getDomElement().attr('aria-valuenow', timeshiftValue);\n      this.getDomElement().attr('aria-valuetext', `${i18n.performLocalization(i18n.getLocalizer('seekBar.timeshift'))} ${i18n.performLocalization(i18n.getLocalizer('seekBar.value'))}: ${timeshiftValue}`);\n    } else if (this.seekBarType === SeekBarType.Vod) {\n      const ariaValueText = `${StringUtils.secondsToText(this.player.getCurrentTime())} ${i18n.performLocalization(i18n.getLocalizer('seekBar.durationText'))} ${StringUtils.secondsToText(this.player.getDuration())}`;\n      this.getDomElement().attr('aria-valuenow', Math.floor(this.player.getCurrentTime()).toString());\n      this.getDomElement().attr('aria-valuetext', ariaValueText);\n    }\n  }\n\n  private getPlaybackPositionPercentage(): number {\n    if (this.player.isLive()) {\n      return 100 - (100 / this.player.getMaxTimeShift() * this.player.getTimeShift());\n    }\n\n    return 100 / this.player.getDuration() * this.getRelativeCurrentTime();\n  }\n\n  private updateBufferLevel(playbackPositionPercentage: number): void {\n\n    let bufferLoadedPercentageLevel: number;\n    if (this.player.isLive()) {\n      // Always show full buffer for live streams\n      bufferLoadedPercentageLevel = 100;\n    } else {\n      bufferLoadedPercentageLevel = playbackPositionPercentage + getMinBufferLevel(this.player);\n    }\n\n    this.setBufferPosition(bufferLoadedPercentageLevel);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager, configureSeek: boolean = true): void {\n    super.configure(player, uimanager);\n\n    this.player = player;\n\n    // Apply scaling transform to the backdrop bar to have all bars rendered similarly\n    // (the call must be up here to be executed for the volume slider as well)\n    this.setPosition(this.seekBarBackdrop, 100);\n\n    // Add seekbar controls to the seekbar\n    const seekBarController = new SeekBarController(this.config.keyStepIncrements, player, uimanager.getConfig().volumeController);\n\n    seekBarController.setSeekBarControls(this.getDomElement(), () => this.seekBarType);\n\n    // The configureSeek flag can be used by subclasses to disable configuration as seek bar. E.g. the volume\n    // slider is reusing this component but adds its own functionality, and does not need the seek functionality.\n    // This is actually a hack, the proper solution would be for both seek bar and volume sliders to extend\n    // a common base slider component and implement their functionality there.\n    if (!configureSeek) {\n      this.seekBarType = SeekBarType.Volume;\n\n      return;\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      this.isUiShown = true;\n    });\n\n    uimanager.onControlsHide.subscribe(() => {\n      this.isUiShown = false;\n    });\n\n    let isPlaying = false;\n    let scrubbing = false;\n    let isPlayerSeeking = false;\n    let suspension: GroupPlaybackSuspension | undefined;\n\n    // Update playback and buffer positions\n    let playbackPositionHandler = (event: PlayerEventBase = null, forceUpdate: boolean = false) => {\n      if (this.isUserSeeking) {\n        // We caught a seek preview seek, do not update the seekbar\n        return;\n      }\n\n      let playbackPositionPercentage = this.getPlaybackPositionPercentage();\n\n      this.updateBufferLevel(playbackPositionPercentage);\n\n      // The segment request finished is used to help the playback position move, when the smooth playback position is not enabled.\n      // At the same time when the user is scrubbing, we also move the position of the seekbar to display a preview during scrubbing.\n      // When the user is scrubbing we do not record this as a user seek operation, as the user has yet to finish their seek,\n      // but we should not move the playback position to not create a jumping behaviour.\n      if (scrubbing && event && event.type === player.exports.PlayerEvent.SegmentRequestFinished && playbackPositionPercentage !== this.playbackPositionPercentage) {\n        playbackPositionPercentage = this.playbackPositionPercentage;\n      }\n\n      if (player.isLive()) {\n        if (player.getMaxTimeShift() === 0) {\n          // This case must be explicitly handled to avoid division by zero\n          this.setPlaybackPosition(100);\n        } else {\n          if (!this.isSeeking()) {\n            this.setPlaybackPosition(playbackPositionPercentage);\n          }\n\n          this.setAriaSliderMinMax(player.getMaxTimeShift().toString(), '0');\n        }\n      } else {\n        // Update playback position only in paused state or in the initial startup state where player is neither\n        // paused nor playing. Playback updates are handled in the Timeout below.\n        const isInInitialStartupState = this.config.smoothPlaybackPositionUpdateIntervalMs === SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED\n            || forceUpdate || player.isPaused();\n        const isNeitherPausedNorPlaying = player.isPaused() === player.isPlaying();\n\n        if ((isInInitialStartupState || isNeitherPausedNorPlaying) && !this.isSeeking()) {\n          this.setPlaybackPosition(playbackPositionPercentage);\n        }\n\n        this.setAriaSliderMinMax('0', player.getDuration().toString());\n      }\n\n      if (this.isUiShown) {\n        this.setAriaSliderValues();\n      }\n    };\n\n    // Update seekbar upon these events\n    // init playback position when the player is ready\n    player.on(player.exports.PlayerEvent.Ready, playbackPositionHandler);\n    // update playback position when it changes\n    player.on(player.exports.PlayerEvent.TimeChanged, playbackPositionHandler);\n    // update bufferlevel when buffering is complete\n    player.on(player.exports.PlayerEvent.StallEnded, playbackPositionHandler);\n    // update playback position when a timeshift has finished\n    player.on(player.exports.PlayerEvent.TimeShifted, playbackPositionHandler);\n    // update bufferlevel when a segment has been downloaded\n    player.on(player.exports.PlayerEvent.SegmentRequestFinished, playbackPositionHandler);\n\n    this.configureLivePausedTimeshiftUpdater(player, uimanager, playbackPositionHandler);\n\n    // Seek handling\n    let onPlayerSeek = () => {\n      isPlayerSeeking = true;\n      this.setSeeking(true);\n      scrubbing = false;\n    };\n\n    let onPlayerSeeked = (event: PlayerEventBase = null, forceUpdate: boolean = false ) => {\n      isPlayerSeeking = false;\n      this.setSeeking(false);\n\n      // update playback position when a seek has finished\n      playbackPositionHandler(event, forceUpdate);\n    };\n\n    let restorePlayingState = function () {\n      // Continue playback after seek if player was playing when seek started\n      if (isPlaying) {\n        // use the same issuer here as in the pause on seek\n        player.play('ui-seek');\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.Seek, onPlayerSeek);\n    player.on(player.exports.PlayerEvent.Seeked, onPlayerSeeked);\n    player.on(player.exports.PlayerEvent.TimeShift, onPlayerSeek);\n    player.on(player.exports.PlayerEvent.TimeShifted, onPlayerSeeked);\n\n    let isGroupPlaybackAPIAvailable = (player: PlayerAPI): player is ExtendedPlayerAPI => {\n      return !!(player as ExtendedPlayerAPI).groupPlayback;\n    };\n\n    this.onSeek.subscribe((sender) => {\n      // track seeking status so we can catch events from seek preview seeks\n      this.isUserSeeking = true;\n      // Notify UI manager of started seek\n      uimanager.onSeek.dispatch(sender);\n\n      if (isGroupPlaybackAPIAvailable(player) && player.groupPlayback.hasJoined() && !suspension) {\n        suspension = player.groupPlayback.beginSuspension(GroupPlaybackSuspensionReason.UserIsScrubbing);\n      }\n\n      // Save current playback state before performing the seek\n      if (!isPlayerSeeking) {\n        isPlaying = player.isPlaying();\n\n        // Pause playback while seeking\n        if (isPlaying) {\n          // use a different issuer here, as play/pause on seek is not \"really\" triggerd by the user\n          player.pause('ui-seek');\n        }\n      }\n    });\n\n    this.onSeekPreview.subscribe((sender: SeekBar, args: SeekPreviewEventArgs) => {\n      // Notify UI manager of seek preview\n      uimanager.onSeekPreview.dispatch(sender, args);\n      scrubbing = args.scrubbing;\n    });\n\n    // Set enableSeekPreview if set in the uimanager config\n    if (typeof uimanager.getConfig().enableSeekPreview === 'boolean') {\n      this.config.enableSeekPreview = uimanager.getConfig().enableSeekPreview;\n    }\n\n    // Rate-limited scrubbing seek\n    if (this.config.enableSeekPreview) {\n      this.onSeekPreview.subscribeRateLimited(this.seekWhileScrubbing, 200);\n    }\n\n    this.onSeeked.subscribe((sender, percentage) => {\n      this.isUserSeeking = false;\n\n      // Do the seek\n      this.seek(percentage);\n\n      // Notify UI manager of finished seek\n      uimanager.onSeeked.dispatch(sender);\n\n      // Continue playback after seek if player was playing when seek started\n      restorePlayingState();\n\n      if (isGroupPlaybackAPIAvailable(player) && player.groupPlayback.hasJoined() && suspension) {\n        const proposedPlaybackTime = this.getTargetSeekPosition(percentage);\n        player.groupPlayback.endSuspension(suspension, { proposedPlaybackTime });\n        suspension = undefined;\n      }\n    });\n\n    if (this.hasLabel()) {\n      // Configure a seekbar label that is internal to the seekbar)\n      this.getLabel().configure(player, uimanager);\n    }\n\n    // Hide seekbar for live sources without timeshift\n    let isLive = false;\n    let hasTimeShift = false;\n    let switchVisibility = (isLive: boolean, hasTimeShift: boolean) => {\n      if (isLive && !hasTimeShift) {\n        this.hide();\n      } else {\n        this.show();\n      }\n      playbackPositionHandler(null, true);\n      this.refreshPlaybackPosition();\n    };\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      isLive = args.live;\n      if (isLive && this.smoothPlaybackPositionUpdater != null) {\n        this.smoothPlaybackPositionUpdater.clear();\n        this.seekBarType = SeekBarType.Live;\n      } else {\n        this.seekBarType = SeekBarType.Vod;\n      }\n      switchVisibility(isLive, hasTimeShift);\n    });\n    let timeShiftDetector = new PlayerUtils.TimeShiftAvailabilityDetector(player);\n    timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe((sender, args: TimeShiftAvailabilityChangedArgs) => {\n      hasTimeShift = args.timeShiftAvailable;\n      switchVisibility(isLive, hasTimeShift);\n    });\n    // Initial detection\n    liveStreamDetector.detect();\n    timeShiftDetector.detect();\n\n    // Refresh the playback position when the player resized or the UI is configured. The playback position marker\n    // is positioned absolutely and must therefore be updated when the size of the seekbar changes.\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      this.refreshPlaybackPosition();\n    });\n    // Additionally, when this code is called, the seekbar is not part of the UI yet and therefore does not have a size,\n    // resulting in a wrong initial position of the marker. Refreshing it once the UI is configured solved this issue.\n    uimanager.onConfigured.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n    // It can also happen when a new source is loaded\n    player.on(player.exports.PlayerEvent.SourceLoaded, () => {\n      this.refreshPlaybackPosition();\n    });\n    // Add markers when a source is loaded or update when a marker is added or removed\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      playbackPositionHandler();\n    });\n\n    // Set the snappingRange if set in the uimanager config\n    if (typeof uimanager.getConfig().seekbarSnappingRange === 'number') {\n      this.config.snappingRange = uimanager.getConfig().seekbarSnappingRange;\n    }\n\n    // Initialize seekbar\n    playbackPositionHandler(); // Set the playback position\n    this.setBufferPosition(0);\n    this.setSeekPosition(0);\n    if (this.config.smoothPlaybackPositionUpdateIntervalMs !== SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED) {\n      this.configureSmoothPlaybackPositionUpdater(player, uimanager);\n    }\n\n    // Initialize markers\n    this.initializeTimelineMarkers(player, uimanager);\n  }\n\n  private initializeTimelineMarkers(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    const timelineMarkerConfig = {\n      cssPrefix: this.config.cssPrefix,\n      snappingRange: this.config.snappingRange,\n    };\n    this.timelineMarkersHandler = new TimelineMarkersHandler(timelineMarkerConfig, () => this.seekBar.width(), this.seekBarMarkersContainer);\n    this.timelineMarkersHandler.initialize(player, uimanager);\n  }\n\n  private seekWhileScrubbing = (sender: SeekBar, args: SeekPreviewEventArgs) => {\n    if (args.scrubbing) {\n      this.seek(args.position);\n    }\n  };\n\n  private getTargetSeekPosition = (percentage: number) => {\n    let target: number;\n    if (this.player.isLive()) {\n      const maxTimeShift = this.player.getMaxTimeShift();\n      target = maxTimeShift - (maxTimeShift * (percentage / 100));\n    } else {\n      const seekableRangeStart = PlayerUtils.getSeekableRangeStart(this.player, 0);\n      const relativeSeekTarget = this.player.getDuration() * (percentage / 100);\n      target = relativeSeekTarget + seekableRangeStart;\n    }\n\n    return target;\n  }\n\n  private seek = (percentage: number) => {\n    const targetPlaybackPosition = this.getTargetSeekPosition(percentage);\n    if (this.player.isLive()) {\n      this.player.timeShift(targetPlaybackPosition, 'ui');\n    } else {\n      this.player.seek(targetPlaybackPosition, 'ui');\n    }\n  };\n\n  /**\n   * Update seekbar while a live stream with DVR window is paused.\n   * The playback position stays still and the position indicator visually moves towards the back.\n   */\n  private configureLivePausedTimeshiftUpdater(\n    player: PlayerAPI,\n    uimanager: UIInstanceManager,\n    playbackPositionHandler: () => void,\n  ): void {\n    // Regularly update the playback position while the timeout is active\n    this.pausedTimeshiftUpdater = new Timeout(1000, playbackPositionHandler, true);\n\n    // Start updater when a live stream with timeshift window is paused\n    player.on(player.exports.PlayerEvent.Paused, () => {\n      if (player.isLive() && player.getMaxTimeShift() < 0) {\n        this.pausedTimeshiftUpdater.start();\n      }\n    });\n\n    // Stop updater when playback continues (no matter if the updater was started before)\n    player.on(player.exports.PlayerEvent.Play, () => this.pausedTimeshiftUpdater.clear());\n  }\n\n  private configureSmoothPlaybackPositionUpdater(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    /*\n     * Playback position update\n     *\n     * We do not update the position directly from the TimeChanged event, because it arrives very jittery and\n     * results in a jittery position indicator since the CSS transition time is statically set.\n     * To work around this issue, we maintain a local playback position that is updated in a stable regular interval\n     * and kept in sync with the player.\n     */\n    let currentTimeSeekBar = 0;\n    let currentTimePlayer = 0;\n    let updateIntervalMs = 50;\n    let currentTimeUpdateDeltaSecs = updateIntervalMs / 1000;\n\n    this.smoothPlaybackPositionUpdater = new Timeout(updateIntervalMs, () => {\n      if (this.isSeeking()) {\n        return;\n      }\n\n      currentTimeSeekBar += currentTimeUpdateDeltaSecs;\n\n      try {\n        currentTimePlayer = this.getRelativeCurrentTime();\n      } catch (error) {\n        // Detect if the player has been destroyed and stop updating if so\n        if (error instanceof player.exports.PlayerAPINotAvailableError) {\n          this.smoothPlaybackPositionUpdater.clear();\n        }\n\n        // If the current time cannot be read it makes no sense to continue\n        return;\n      }\n\n      // Sync currentTime of seekbar to player\n      let currentTimeDelta = currentTimeSeekBar - currentTimePlayer;\n      // If the delta is larger that 2 secs, directly jump the seekbar to the\n      // player time instead of smoothly fast forwarding/rewinding.\n      if (Math.abs(currentTimeDelta) > 2) {\n        currentTimeSeekBar = currentTimePlayer;\n      }\n      // If currentTimeDelta is negative and below the adjustment threshold,\n      // the player is ahead of the seekbar and we 'fast forward' the seekbar\n      else if (currentTimeDelta <= -currentTimeUpdateDeltaSecs) {\n        currentTimeSeekBar += currentTimeUpdateDeltaSecs;\n      }\n      // If currentTimeDelta is positive and above the adjustment threshold,\n      // the player is behind the seekbar and we 'rewind' the seekbar\n      else if (currentTimeDelta >= currentTimeUpdateDeltaSecs) {\n        currentTimeSeekBar -= currentTimeUpdateDeltaSecs;\n      }\n\n      let playbackPositionPercentage = 100 / player.getDuration() * currentTimeSeekBar;\n      this.setPlaybackPosition(playbackPositionPercentage);\n    }, true);\n\n    let startSmoothPlaybackPositionUpdater = () => {\n      if (!player.isLive()) {\n        currentTimeSeekBar = this.getRelativeCurrentTime();\n        this.smoothPlaybackPositionUpdater.start();\n      }\n    };\n\n    let stopSmoothPlaybackPositionUpdater = () => {\n      this.smoothPlaybackPositionUpdater.clear();\n    };\n\n    player.on(player.exports.PlayerEvent.Play, startSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Playing, startSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Paused, stopSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.PlaybackFinished, stopSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Seeked, () => {\n      currentTimeSeekBar = this.getRelativeCurrentTime();\n    });\n    player.on(player.exports.PlayerEvent.SourceUnloaded, stopSmoothPlaybackPositionUpdater);\n\n    if (player.isPlaying()) {\n      startSmoothPlaybackPositionUpdater();\n    }\n  }\n\n  private getRelativeCurrentTime(): number {\n    return PlayerUtils.getCurrentTimeRelativeToSeekableRange(this.player);\n  }\n\n  release(): void {\n    super.release();\n\n    if (this.smoothPlaybackPositionUpdater) { // object must not necessarily exist, e.g. in volume slider subclass\n      this.smoothPlaybackPositionUpdater.clear();\n    }\n\n    if (this.pausedTimeshiftUpdater) {\n      this.pausedTimeshiftUpdater.clear();\n    }\n\n    if (this.config.enableSeekPreview) {\n      this.onSeekPreview.unsubscribe(this.seekWhileScrubbing);\n    }\n  }\n\n  protected toDomElement(): DOM {\n    if (this.config.vertical) {\n      this.config.cssClasses.push('vertical');\n    }\n\n    let seekBarContainer = new DOM('div', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'role': 'slider',\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\n      'tabindex': this.config.tabIndex.toString(),\n    });\n\n    let seekBar = new DOM('div', {\n      'class': this.prefixCss('seekbar'),\n    });\n    this.seekBar = seekBar;\n\n    // Indicator that shows the buffer fill level\n    let seekBarBufferLevel = new DOM('div', {\n      'class': this.prefixCss('seekbar-bufferlevel'),\n    });\n    this.seekBarBufferPosition = seekBarBufferLevel;\n\n    // Indicator that shows the current playback position\n    let seekBarPlaybackPosition = new DOM('div', {\n      'class': this.prefixCss('seekbar-playbackposition'),\n    });\n    this.seekBarPlaybackPosition = seekBarPlaybackPosition;\n\n    // A marker of the current playback position, e.g. a dot or line\n    let seekBarPlaybackPositionMarker = new DOM('div', {\n      'class': this.prefixCss('seekbar-playbackposition-marker'),\n    });\n    this.seekBarPlaybackPositionMarker = seekBarPlaybackPositionMarker;\n\n    // Indicator that show where a seek will go to\n    let seekBarSeekPosition = new DOM('div', {\n      'class': this.prefixCss('seekbar-seekposition'),\n    });\n    this.seekBarSeekPosition = seekBarSeekPosition;\n\n    // Indicator that shows the full seekbar\n    let seekBarBackdrop = new DOM('div', {\n      'class': this.prefixCss('seekbar-backdrop'),\n    });\n    this.seekBarBackdrop = seekBarBackdrop;\n\n    let seekBarChapterMarkersContainer = new DOM('div', {\n      'class': this.prefixCss('seekbar-markers'),\n    });\n    this.seekBarMarkersContainer = seekBarChapterMarkersContainer;\n\n    seekBar.append(this.seekBarBackdrop, this.seekBarBufferPosition, this.seekBarSeekPosition,\n      this.seekBarPlaybackPosition, this.seekBarMarkersContainer, this.seekBarPlaybackPositionMarker);\n\n    let seeking = false;\n\n    // Define handler functions so we can attach/remove them later\n    let mouseTouchMoveHandler = (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n      // Avoid propagation to VR handler\n      if (this.player.vr != null) {\n        e.stopPropagation();\n      }\n\n      let targetPercentage = 100 * this.getOffset(e);\n      this.setSeekPosition(targetPercentage);\n      this.setPlaybackPosition(targetPercentage);\n      this.onSeekPreviewEvent(targetPercentage, true);\n    };\n\n    let mouseTouchUpHandler = (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      // Remove handlers, seek operation is finished\n      new DOM(document).off('touchmove mousemove', mouseTouchMoveHandler);\n      new DOM(document).off('touchend mouseup', mouseTouchUpHandler);\n\n      let targetPercentage = 100 * this.getOffset(e);\n      let snappedChapter = this.timelineMarkersHandler && this.timelineMarkersHandler.getMarkerAtPosition(targetPercentage);\n\n      this.setSeeking(false);\n      seeking = false;\n\n      // Fire seeked event\n      this.onSeekedEvent(snappedChapter ? snappedChapter.position : targetPercentage);\n    };\n\n    // A seek always start with a touchstart or mousedown directly on the seekbar.\n    // To track a mouse seek also outside the seekbar (for touch events this works automatically),\n    // so the user does not need to take care that the mouse always stays on the seekbar, we attach the mousemove\n    // and mouseup handlers to the whole document. A seek is triggered when the user lifts the mouse key.\n    // A seek mouse gesture is thus basically a click with a long time frame between down and up events.\n    seekBar.on('touchstart mousedown', (e: MouseEvent | TouchEvent) => {\n      let isTouchEvent = BrowserUtils.isTouchSupported && this.isTouchEvent(e);\n\n      // Prevent selection of DOM elements (also prevents mousedown if current event is touchstart)\n      e.preventDefault();\n      // Avoid propagation to VR handler\n      if (this.player.vr != null) {\n        e.stopPropagation();\n      }\n\n      this.setSeeking(true); // Set seeking class on DOM element\n      seeking = true; // Set seek tracking flag\n\n      // Fire seeked event\n      this.onSeekEvent();\n\n      // Add handler to track the seek operation over the whole document\n      new DOM(document).on(isTouchEvent ? 'touchmove' : 'mousemove', mouseTouchMoveHandler);\n      new DOM(document).on(isTouchEvent ? 'touchend' : 'mouseup', mouseTouchUpHandler);\n    });\n\n    // Display seek target indicator when mouse hovers or finger slides over seekbar\n    seekBar.on('touchmove mousemove', (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      if (seeking) {\n        mouseTouchMoveHandler(e);\n      }\n\n      let position = 100 * this.getOffset(e);\n      this.setSeekPosition(position);\n\n      this.onSeekPreviewEvent(position, false);\n\n      if (this.hasLabel() && this.getLabel().isHidden()) {\n        this.getLabel().show();\n      }\n    });\n\n    // Hide seek target indicator when mouse or finger leaves seekbar\n    seekBar.on('touchend mouseleave', (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      this.setSeekPosition(0);\n\n      if (this.hasLabel()) {\n        this.getLabel().hide();\n      }\n    });\n\n    seekBarContainer.append(seekBar);\n\n    if (this.label) {\n      seekBarContainer.append(this.label.getDomElement());\n    }\n\n    return seekBarContainer;\n  }\n\n  /**\n   * Gets the horizontal offset of a mouse/touch event point from the left edge of the seek bar.\n   * @param eventPageX the pageX coordinate of an event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1], where 0 is the left edge and 1 is the right edge\n   */\n  private getHorizontalOffset(eventPageX: number): number {\n    let elementOffsetPx = this.seekBar.offset().left;\n    let widthPx = this.seekBar.width();\n    let offsetPx = eventPageX - elementOffsetPx;\n    let offset = 1 / widthPx * offsetPx;\n\n    return this.sanitizeOffset(offset);\n  }\n\n  /**\n   * Gets the vertical offset of a mouse/touch event point from the bottom edge of the seek bar.\n   * @param eventPageY the pageX coordinate of an event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1], where 0 is the bottom edge and 1 is the top edge\n   */\n  private getVerticalOffset(eventPageY: number): number {\n    let elementOffsetPx = this.seekBar.offset().top;\n    let widthPx = this.seekBar.height();\n    let offsetPx = eventPageY - elementOffsetPx;\n    let offset = 1 / widthPx * offsetPx;\n\n    return 1 - this.sanitizeOffset(offset);\n  }\n\n  /**\n   * Gets the mouse or touch event offset for the current configuration (horizontal or vertical).\n   * @param e the event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1]\n   * @see #getHorizontalOffset\n   * @see #getVerticalOffset\n   */\n  private getOffset(e: MouseEvent | TouchEvent): number {\n    if (BrowserUtils.isTouchSupported && this.isTouchEvent(e)) {\n      if (this.config.vertical) {\n        return this.getVerticalOffset(e.type === 'touchend' ? e.changedTouches[0].pageY : e.touches[0].pageY);\n      } else {\n        return this.getHorizontalOffset(e.type === 'touchend' ? e.changedTouches[0].pageX : e.touches[0].pageX);\n      }\n    }\n    else if (e instanceof MouseEvent) {\n      if (this.config.vertical) {\n        return this.getVerticalOffset(e.pageY);\n      } else {\n        return this.getHorizontalOffset(e.pageX);\n      }\n    }\n    else {\n      if (console) {\n        console.warn('invalid event');\n      }\n      return 0;\n    }\n  }\n\n  /**\n   * Sanitizes the mouse offset to the range of [0, 1].\n   *\n   * When tracking the mouse outside the seek bar, the offset can be outside the desired range and this method\n   * limits it to the desired range. E.g. a mouse event left of the left edge of a seek bar yields an offset below\n   * zero, but to display the seek target on the seek bar, we need to limit it to zero.\n   *\n   * @param offset the offset to sanitize\n   * @returns {number} the sanitized offset.\n   */\n  private sanitizeOffset(offset: number) {\n    // Since we track mouse moves over the whole document, the target can be outside the seek range,\n    // and we need to limit it to the [0, 1] range.\n    if (offset < 0) {\n      offset = 0;\n    } else if (offset > 1) {\n      offset = 1;\n    }\n\n    return offset;\n  }\n\n  /**\n   * Sets the position of the playback position indicator.\n   * @param percent a number between 0 and 100 as returned by the player\n   */\n  setPlaybackPosition(percent: number) {\n    this.playbackPositionPercentage = percent;\n\n    // Set position of the bar\n    this.setPosition(this.seekBarPlaybackPosition, percent);\n\n    // Set position of the marker\n    let totalSize = (this.config.vertical ? (this.seekBar.height() - this.seekBarPlaybackPositionMarker.height()) : this.seekBar.width());\n    let px = (totalSize) / 100 * percent;\n    if (this.config.vertical) {\n      px = this.seekBar.height() - px - this.seekBarPlaybackPositionMarker.height();\n    }\n\n    let style = this.config.vertical ?\n      // -ms-transform required for IE9\n      // -webkit-transform required for Android 4.4 WebView\n      {\n        'transform': 'translateY(' + px + 'px)',\n        '-ms-transform': 'translateY(' + px + 'px)',\n        '-webkit-transform': 'translateY(' + px + 'px)',\n      } :\n      {\n        'transform': 'translateX(' + px + 'px)',\n        '-ms-transform': 'translateX(' + px + 'px)',\n        '-webkit-transform': 'translateX(' + px + 'px)',\n      };\n    this.seekBarPlaybackPositionMarker.css(style);\n  }\n\n  /**\n   * Refreshes the playback position. Can be used by subclasses to refresh the position when\n   * the size of the component changes.\n   */\n  protected refreshPlaybackPosition() {\n    this.setPlaybackPosition(this.playbackPositionPercentage);\n  }\n\n  /**\n   * Sets the position until which media is buffered.\n   * @param percent a number between 0 and 100\n   */\n  setBufferPosition(percent: number) {\n    this.setPosition(this.seekBarBufferPosition, percent);\n  }\n\n  /**\n   * Sets the position where a seek, if executed, would jump to.\n   * @param percent a number between 0 and 100\n   */\n  setSeekPosition(percent: number) {\n    this.setPosition(this.seekBarSeekPosition, percent);\n  }\n\n  /**\n   * Set the actual position (width or height) of a DOM element that represent a bar in the seek bar.\n   * @param element the element to set the position for\n   * @param percent a number between 0 and 100\n   */\n  private setPosition(element: DOM, percent: number) {\n    let scale = percent / 100;\n\n    // When the scale is exactly 1 or very near 1 (and the browser internally rounds it to 1), browsers seem to render\n    // the elements differently and the height gets slightly off, leading to mismatching heights when e.g. the buffer\n    // level bar has a width of 1 and the playback position bar has a width < 1. A jittering buffer level around 1\n    // leads to an even worse flickering effect.\n    // Various changes in CSS styling and DOM hierarchy did not solve the issue so the workaround is to avoid a scale\n    // of exactly 1.\n    if (scale >= 0.99999 && scale <= 1.00001) {\n      scale = 0.99999;\n    }\n\n    let style = this.config.vertical ?\n      // -ms-transform required for IE9\n      // -webkit-transform required for Android 4.4 WebView\n      {\n        'transform': 'scaleY(' + scale + ')',\n        '-ms-transform': 'scaleY(' + scale + ')',\n        '-webkit-transform': 'scaleY(' + scale + ')',\n      } :\n      {\n        'transform': 'scaleX(' + scale + ')',\n        '-ms-transform': 'scaleX(' + scale + ')',\n        '-webkit-transform': 'scaleX(' + scale + ')',\n      };\n    element.css(style);\n  }\n\n  /**\n   * Puts the seek bar into or out of seeking state by adding/removing a class to the DOM element. This can be used\n   * to adjust the styling while seeking.\n   *\n   * @param seeking should be true when entering seek state, false when exiting the seek state\n   */\n  setSeeking(seeking: boolean) {\n    if (seeking) {\n      this.getDomElement().addClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n    } else {\n      this.getDomElement().removeClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n    }\n  }\n\n  /**\n   * Checks if the seek bar is currently in the seek state.\n   * @returns {boolean} true if in seek state, else false\n   */\n  isSeeking(): boolean {\n    return this.getDomElement().hasClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n  }\n\n  /**\n   * Checks if the seek bar has a {@link SeekBarLabel}.\n   * @returns {boolean} true if the seek bar has a label, else false\n   */\n  hasLabel(): boolean {\n    return this.label != null;\n  }\n\n  /**\n   * Gets the label of this seek bar.\n   * @returns {SeekBarLabel} the label if this seek bar has a label, else null\n   */\n  getLabel(): SeekBarLabel | null {\n    return this.label;\n  }\n\n  protected onSeekEvent() {\n    this.seekBarEvents.onSeek.dispatch(this);\n  }\n\n  protected onSeekPreviewEvent(percentage: number, scrubbing: boolean) {\n    let snappedMarker = this.timelineMarkersHandler && this.timelineMarkersHandler.getMarkerAtPosition(percentage);\n\n    let seekPositionPercentage = percentage;\n\n    if (snappedMarker) {\n      if (snappedMarker.duration > 0) {\n        if (percentage < snappedMarker.position) {\n          // Snap the position to the start of the interval if the seek is within the left snap margin\n          // We know that we are within a snap margin when we are outside the marker interval but still\n          // have a snappedMarker\n          seekPositionPercentage = snappedMarker.position;\n        } else if (percentage > snappedMarker.position + snappedMarker.duration) {\n          // Snap the position to the end of the interval if the seek is within the right snap margin\n          seekPositionPercentage = snappedMarker.position + snappedMarker.duration;\n        }\n      } else {\n        // Position markers always snap to their marker position\n        seekPositionPercentage = snappedMarker.position;\n      }\n    }\n\n    if (this.label) {\n      this.label.getDomElement().css({\n        'left': seekPositionPercentage + '%',\n      });\n    }\n\n    this.seekBarEvents.onSeekPreview.dispatch(this, {\n      scrubbing: scrubbing,\n      position: seekPositionPercentage,\n      marker: snappedMarker,\n    });\n  }\n\n  protected onSeekedEvent(percentage: number) {\n    this.seekBarEvents.onSeeked.dispatch(this, percentage);\n  }\n\n  /**\n   * Gets the event that is fired when a scrubbing seek operation is started.\n   * @returns {Event<SeekBar, NoArgs>}\n   */\n  get onSeek(): Event<SeekBar, NoArgs> {\n    return this.seekBarEvents.onSeek.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired during a scrubbing seek (to indicate that the seek preview, i.e. the video frame,\n   * should be updated), or during a normal seek preview when the seek bar is hovered (and the seek target,\n   * i.e. the seek bar label, should be updated).\n   * @returns {Event<SeekBar, SeekPreviewEventArgs>}\n   */\n  get onSeekPreview(): Event<SeekBar, SeekPreviewEventArgs> {\n    return this.seekBarEvents.onSeekPreview.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when a scrubbing seek has finished or when a direct seek is issued.\n   * @returns {Event<SeekBar, number>}\n   */\n  get onSeeked(): Event<SeekBar, number> {\n    return this.seekBarEvents.onSeeked.getEvent();\n  }\n\n\n  protected onShowEvent(): void {\n    super.onShowEvent();\n\n    // Refresh the position of the playback position when the seek bar becomes visible. To correctly set the position,\n    // the DOM element must be fully initialized an have its size calculated, because the position is set as an absolute\n    // value calculated from the size. This required size is not known when it is hidden.\n    // For such cases, we refresh the position here in onShow because here it is guaranteed that the component knows\n    // its size and can set the position correctly.\n    this.refreshPlaybackPosition();\n  }\n\n /**\n   * Checks if TouchEvent is supported.\n   * @returns {boolean} true if TouchEvent not undefined, else false\n   */\n  isTouchEvent(e: UIEvent): e is TouchEvent {\n    return window.TouchEvent && e instanceof TouchEvent;\n  }\n}\n","import {PlayerAPI} from 'bitmovin-player';\n\nexport function getMinBufferLevel(player: PlayerAPI): number {\n\n    const playerDuration = player.getDuration();\n\n    const videoBufferLength = player.getVideoBufferLength();\n    const audioBufferLength = player.getAudioBufferLength();\n    // Calculate the buffer length which is the smaller length of the audio and video buffers. If one of these\n    // buffers is not available, we set it's value to MAX_VALUE to make sure that the other real value is taken\n    // as the buffer length.\n    let bufferLength = Math.min(\n        videoBufferLength != null ? videoBufferLength : Number.MAX_VALUE,\n        audioBufferLength != null ? audioBufferLength : Number.MAX_VALUE);\n    // If both buffer lengths are missing, we set the buffer length to zero\n    if (bufferLength === Number.MAX_VALUE) {\n        bufferLength = 0;\n    }\n\n    return 100 / playerDuration * bufferLength;\n}\n","import { UIUtils } from '../uiutils';\nimport { DOM } from '../dom';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { VolumeController } from '../volumecontroller';\n\nexport enum SeekBarType {\n  Vod,\n  Live,\n  Volume,\n}\n\ninterface Range {\n  min: number;\n  max: number;\n}\n\ninterface KeyStepIncrementsConfig {\n  leftRight: number;\n  upDown: number;\n}\n\nconst coerceValueIntoRange = (\n  value: number,\n  range: Range,\n  cb: (value: number) => void,\n) => {\n  if (value < range.min) {\n    cb(range.min);\n  } else if (value > range.max) {\n    cb(range.max);\n  } else {\n    cb(value);\n  }\n};\n\nexport class SeekBarController {\n  protected keyStepIncrements: KeyStepIncrementsConfig;\n  protected player: PlayerAPI;\n  protected volumeController: VolumeController;\n\n  constructor(\n    keyStepIncrements: KeyStepIncrementsConfig,\n    player: PlayerAPI,\n    volumeController: VolumeController,\n  ) {\n    this.keyStepIncrements = keyStepIncrements;\n    this.player = player;\n    this.volumeController = volumeController;\n  }\n\n  protected arrowKeyControls(\n    currentValue: number,\n    range: Range,\n    valueUpdate: (value: number) => void,\n  ) {\n    const controlValue = Math.floor(currentValue);\n\n    return {\n      left: () => coerceValueIntoRange(controlValue - this.keyStepIncrements.leftRight, range, valueUpdate),\n      right: () => coerceValueIntoRange(controlValue + this.keyStepIncrements.leftRight, range, valueUpdate),\n      up: () => coerceValueIntoRange(controlValue + this.keyStepIncrements.upDown, range, valueUpdate),\n      down: () => coerceValueIntoRange(controlValue - this.keyStepIncrements.upDown, range, valueUpdate),\n      home: () => coerceValueIntoRange(range.min, range, valueUpdate),\n      end: () => coerceValueIntoRange(range.max, range, valueUpdate),\n    };\n  }\n\n  protected seekBarControls(type: SeekBarType) {\n    if (type === SeekBarType.Live) {\n      return this.arrowKeyControls(this.player.getTimeShift(), { min: this.player.getMaxTimeShift(), max: 0 }, this.player.timeShift);\n    } else if (type === SeekBarType.Vod) {\n      return this.arrowKeyControls(this.player.getCurrentTime(), { min: 0, max: this.player.getDuration() }, this.player.seek);\n    } else if (type === SeekBarType.Volume && this.volumeController != null) {\n      const volumeTransition = this.volumeController.startTransition();\n      return this.arrowKeyControls(this.player.getVolume(), { min: 0, max: 100 }, volumeTransition.finish.bind(volumeTransition));\n    }\n  }\n\n  public setSeekBarControls(domElement: DOM, type: () => SeekBarType) {\n    domElement.on('keydown', (e: KeyboardEvent) => {\n      const controls = this.seekBarControls(type());\n      switch (e.keyCode) {\n        case UIUtils.KeyCode.LeftArrow: {\n          controls.left();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.RightArrow: {\n          controls.right();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.UpArrow: {\n          controls.up();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.DownArrow: {\n          controls.down();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.Home: {\n          controls.home();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.End: {\n          controls.end();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.Space: {\n          this.player.isPlaying() ? this.player.pause() : this.player.play();\n          e.preventDefault();\n          break;\n        }\n      }\n    });\n  }\n}","import {Container, ContainerConfig} from './container';\nimport {Label, LabelConfig} from './label';\nimport {Component, ComponentConfig} from './component';\nimport { UIInstanceManager } from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport {ImageLoader} from '../imageloader';\nimport {CssProperties} from '../dom';\nimport { PlayerAPI, Thumbnail } from 'bitmovin-player';\nimport { SeekBar, SeekPreviewEventArgs } from './seekbar';\nimport { PlayerUtils } from '../playerutils';\n\n/**\n * Configuration interface for a {@link SeekBarLabel}.\n */\nexport interface SeekBarLabelConfig extends ContainerConfig {\n  // nothing yet\n}\n\n/**\n * A label for a {@link SeekBar} that can display the seek target time, a thumbnail, and title (e.g. chapter title).\n */\nexport class SeekBarLabel extends Container<SeekBarLabelConfig> {\n\n  private timeLabel: Label<LabelConfig>;\n  private titleLabel: Label<LabelConfig>;\n  private thumbnail: Component<ComponentConfig>;\n\n  private thumbnailImageLoader: ImageLoader;\n\n  private timeFormat: string;\n\n  private appliedMarkerCssClasses: string[] = [];\n  private player: PlayerAPI;\n  private uiManager: UIInstanceManager;\n\n  constructor(config: SeekBarLabelConfig = {}) {\n    super(config);\n\n    this.timeLabel = new Label({ cssClasses: ['seekbar-label-time'] });\n    this.titleLabel = new Label({ cssClasses: ['seekbar-label-title'] });\n    this.thumbnail = new Component({ cssClasses: ['seekbar-thumbnail'], role: 'img' });\n    this.thumbnailImageLoader = new ImageLoader();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-seekbar-label',\n      components: [new Container({\n        components: [\n          this.thumbnail,\n          new Container({\n            components: [this.titleLabel, this.timeLabel],\n            cssClass: 'seekbar-label-metadata',\n          })],\n        cssClass: 'seekbar-label-inner',\n      })],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.player = player;\n    this.uiManager = uimanager;\n    uimanager.onSeekPreview.subscribeRateLimited(this.handleSeekPreview, 100);\n\n    let init = () => {\n      // Set time format depending on source duration\n      this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?\n        StringUtils.FORMAT_HHMMSS : StringUtils.FORMAT_MMSS;\n      // Set initial state of title and thumbnail to handle sourceLoaded when switching to a live-stream\n      this.setTitleText(null);\n      this.setThumbnail(null);\n    };\n\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n    init();\n  }\n\n  private handleSeekPreview = (sender: SeekBar, args: SeekPreviewEventArgs) => {\n    if (this.player.isLive()) {\n      let maxTimeShift = this.player.getMaxTimeShift();\n      let timeShiftPreview = maxTimeShift - maxTimeShift * (args.position / 100);\n\n      this.setTime(timeShiftPreview);\n\n      // In case of a live stream the player expects the time passed into the getThumbnail as a wallClockTime and not\n      // as a relative timeShift value.\n      const convertTimeShiftPreviewToWallClockTime = (targetTimeShift: number): number => {\n        const currentTimeShift = this.player.getTimeShift();\n        const currentTime = this.player.getCurrentTime();\n\n        const wallClockTimeOfLiveEdge = currentTime - currentTimeShift;\n        return wallClockTimeOfLiveEdge + targetTimeShift;\n      };\n\n      const wallClockTime = convertTimeShiftPreviewToWallClockTime(timeShiftPreview);\n      this.setThumbnail(this.player.getThumbnail(wallClockTime));\n\n    } else {\n      let time = this.player.getDuration() * (args.position / 100);\n      this.setTime(time);\n\n      const seekableRangeStart = PlayerUtils.getSeekableRangeStart(this.player, 0);\n      const absoluteSeekTarget = time + seekableRangeStart;\n      this.setThumbnail(this.player.getThumbnail(absoluteSeekTarget));\n    }\n\n    if (args.marker) {\n      this.setTitleText(args.marker.marker.title);\n    } else {\n      this.setTitleText(null);\n    }\n\n    // Remove CSS classes from previous marker\n    if (this.appliedMarkerCssClasses.length > 0) {\n      this.getDomElement().removeClass(this.appliedMarkerCssClasses.join(' '));\n      this.appliedMarkerCssClasses = [];\n    }\n\n    // Add CSS classes of current marker\n    if (args.marker) {\n      const cssClasses = (args.marker.marker.cssClasses || []).map(cssClass => this.prefixCss(cssClass));\n      this.getDomElement().addClass(cssClasses.join(' '));\n      this.appliedMarkerCssClasses = cssClasses;\n    }\n  };\n\n  /**\n   * Sets arbitrary text on the label.\n   * @param text the text to show on the label\n   */\n  setText(text: string) {\n    this.timeLabel.setText(text);\n  }\n\n  /**\n   * Sets a time to be displayed on the label.\n   * @param seconds the time in seconds to display on the label\n   */\n  setTime(seconds: number) {\n    this.setText(StringUtils.secondsToTime(seconds, this.timeFormat));\n  }\n\n  /**\n   * Sets the text on the title label.\n   * @param text the text to show on the label\n   */\n  setTitleText(text = '') {\n    this.titleLabel.setText(text);\n  }\n\n  /**\n   * Sets or removes a thumbnail on the label.\n   * @param thumbnail the thumbnail to display on the label or null to remove a displayed thumbnail\n   */\n  setThumbnail(thumbnail: Thumbnail = null) {\n    let thumbnailElement = this.thumbnail.getDomElement();\n\n    if (thumbnail == null) {\n      thumbnailElement.css({\n        'background-image': null,\n        'display': null,\n        'width': null,\n        'height': null,\n      });\n    }\n    else {\n      // We use the thumbnail image loader to make sure the thumbnail is loaded and it's size is known before be can\n      // calculate the CSS properties and set them on the element.\n      this.thumbnailImageLoader.load(thumbnail.url, (url, width, height) => {\n        // can be checked like that because x/y/w/h are either all present or none\n        // https://www.w3.org/TR/media-frags/#naming-space\n        if (thumbnail.x !== undefined) {\n          thumbnailElement.css(this.thumbnailCssSprite(thumbnail, width, height));\n        } else {\n          thumbnailElement.css(this.thumbnailCssSingleImage(thumbnail, width, height));\n        }\n      });\n    }\n  }\n\n  private thumbnailCssSprite(thumbnail: Thumbnail, width: number, height: number): CssProperties {\n    let thumbnailCountX = width / thumbnail.width;\n    let thumbnailCountY = height / thumbnail.height;\n\n    let thumbnailIndexX = thumbnail.x / thumbnail.width;\n    let thumbnailIndexY = thumbnail.y / thumbnail.height;\n\n    let sizeX = 100 * thumbnailCountX;\n    let sizeY = 100 * thumbnailCountY;\n\n    let offsetX = 100 * thumbnailIndexX;\n    let offsetY = 100 * thumbnailIndexY;\n\n    let aspectRatio = 1 / thumbnail.width * thumbnail.height;\n\n    // The thumbnail size is set by setting the CSS 'width' and 'padding-bottom' properties. 'padding-bottom' is\n    // used because it is relative to the width and can be used to set the aspect ratio of the thumbnail.\n    // A default value for width is set in the stylesheet and can be overwritten from there or anywhere else.\n    return {\n      'display': 'inherit',\n      'background-image': `url(${thumbnail.url})`,\n      'padding-bottom': `${100 * aspectRatio}%`,\n      'background-size': `${sizeX}% ${sizeY}%`,\n      'background-position': `-${offsetX}% -${offsetY}%`,\n    };\n  }\n\n  private thumbnailCssSingleImage(thumbnail: Thumbnail, width: number, height: number): CssProperties {\n    let aspectRatio = 1 / width * height;\n\n    return {\n      'display': 'inherit',\n      'background-image': `url(${thumbnail.url})`,\n      'padding-bottom': `${100 * aspectRatio}%`,\n      'background-size': `100% 100%`,\n      'background-position': `0 0`,\n    };\n  }\n\n  release(): void {\n    super.release();\n\n    this.uiManager.onSeekPreview.unsubscribe(this.handleSeekPreview);\n  }\n}\n","import {ListSelector, ListSelectorConfig} from './listselector';\nimport {DOM} from '../dom';\nimport { i18n, LocalizableText } from '../localization/i18n';\n\n/**\n * A simple select box providing the possibility to select a single item out of a list of available items.\n *\n * DOM example:\n * <code>\n *     <select class='ui-selectbox'>\n *         <option value='key'>label</option>\n *         ...\n *     </select>\n * </code>\n */\n\nexport class SelectBox extends ListSelector<ListSelectorConfig> {\n\n  private selectElement: DOM;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-selectbox',\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let selectElement = new DOM('select', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\n    });\n\n    this.selectElement = selectElement;\n    this.updateDomItems();\n\n    selectElement.on('change', () => {\n      let value = selectElement.val();\n      this.onItemSelectedEvent(value, false);\n    });\n\n    return selectElement;\n  }\n\n  protected updateDomItems(selectedValue: string = null) {\n    // Delete all children\n    this.selectElement.empty();\n\n    // Add updated children\n    for (let item of this.items) {\n      let optionElement = new DOM('option', {\n        'value': String(item.key),\n      }).html(i18n.performLocalization(item.label));\n\n      if (item.key === String(selectedValue)) { // convert selectedValue to string to catch 'null'/null case\n        optionElement.attr('selected', 'selected');\n      }\n\n      this.selectElement.append(optionElement);\n    }\n  }\n\n  protected onItemAddedEvent(value: string) {\n    super.onItemAddedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemRemovedEvent(value: string) {\n    super.onItemRemovedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemSelectedEvent(value: string, updateDomItems: boolean = true) {\n    super.onItemSelectedEvent(value);\n    if (updateDomItems) {\n      this.updateDomItems(value);\n    }\n  }\n}\n","import { Container, ContainerConfig } from './container';\nimport { SelectBox } from './selectbox';\nimport { UIInstanceManager } from '../uimanager';\nimport { Timeout } from '../timeout';\nimport { Event, EventDispatcher, NoArgs } from '../eventdispatcher';\nimport { SettingsPanelPage } from './settingspanelpage';\nimport { SettingsPanelItem } from './settingspanelitem';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { Component, ComponentConfig } from './component';\n\n/**\n * Configuration interface for a {@link SettingsPanel}.\n */\nexport interface SettingsPanelConfig extends ContainerConfig {\n  /**\n   * The delay in milliseconds after which the settings panel will be hidden when there is no user interaction.\n   * Set to -1 to disable automatic hiding.\n   * Default: 3 seconds (3000)\n   */\n  hideDelay?: number;\n\n  /**\n   * Flag to specify if there should be an animation when switching SettingsPanelPages.\n   * Default: true\n   */\n  pageTransitionAnimation?: boolean;\n}\n\nenum NavigationDirection {\n  Forwards,\n  Backwards,\n}\n\n/**\n * A panel containing a list of {@link SettingsPanelPage items}.\n *\n * To configure pages just pass them in the components array.\n *\n * Example:\n *  let settingsPanel = new SettingsPanel({\n *    hidden: true,\n *  });\n *\n *  let settingsPanelPage = new SettingsPanelPage({\n *    components: […]\n *  });\n *\n *  let secondSettingsPanelPage = new SettingsPanelPage({\n *    components: […]\n *  });\n *\n *  settingsPanel.addComponent(settingsPanelPage);\n *  settingsPanel.addComponent(secondSettingsPanelPage);\n *\n * For an example how to navigate between pages @see SettingsPanelPageNavigatorButton\n */\nexport class SettingsPanel extends Container<SettingsPanelConfig> {\n\n  private static readonly CLASS_ACTIVE_PAGE = 'active';\n\n  // navigation handling\n  private activePage: SettingsPanelPage;\n  private navigationStack: SettingsPanelPage[] = [];\n\n  private settingsPanelEvents = {\n    onSettingsStateChanged: new EventDispatcher<SettingsPanel, NoArgs>(),\n  };\n\n  private hideTimeout: Timeout;\n\n  constructor(config: SettingsPanelConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settings-panel',\n      hideDelay: 3000,\n      pageTransitionAnimation: true,\n    } as SettingsPanelConfig, this.config);\n\n    this.activePage = this.getRootPage();\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    uimanager.onControlsHide.subscribe(() => this.hideHoveredSelectBoxes());\n\n    if (config.hideDelay > -1) {\n      this.hideTimeout = new Timeout(config.hideDelay, () => {\n        this.hide();\n        this.hideHoveredSelectBoxes();\n      });\n      this.getDomElement().on('mouseenter', () => {\n        // On mouse enter clear the timeout\n        this.hideTimeout.clear();\n      });\n      this.getDomElement().on('mouseleave', () => {\n        // On mouse leave activate the timeout\n        this.hideTimeout.reset();\n      });\n      this.getDomElement().on('focusin', () => {\n        this.hideTimeout.clear();\n      });\n      this.getDomElement().on('focusout', () => {\n        this.hideTimeout.reset();\n      });\n    }\n\n    this.onHide.subscribe(() => {\n      if (config.hideDelay > -1) {\n        // Clear timeout when hidden from outside\n        this.hideTimeout.clear();\n      }\n\n      // Since we don't reset the actual navigation here we need to simulate a onInactive event in case some panel\n      // needs to do something when they become invisible / inactive.\n      this.activePage.onInactiveEvent();\n    });\n\n    this.onShow.subscribe(() => {\n      // Reset navigation when te panel gets visible to avoid a weird animation when hiding\n      this.resetNavigation(true);\n      // Since we don't need to navigate to the root page again we need to fire the onActive event when the settings\n      // panel gets visible.\n      this.activePage.onActiveEvent();\n\n      if (config.hideDelay > -1) {\n        // Activate timeout when shown\n        this.hideTimeout.start();\n      }\n    });\n\n    // pass event from root page through\n    this.getRootPage().onSettingsStateChanged.subscribe(() => {\n      this.onSettingsStateChangedEvent();\n    });\n\n    this.updateActivePageClass();\n  }\n\n  /**\n   * Returns the current active / visible page\n   * @return {SettingsPanelPage}\n   */\n  getActivePage(): SettingsPanelPage {\n    return this.activePage;\n  }\n\n  /**\n   * Sets the\n   * @deprecated Use {@link setActivePage} instead\n   * @param index\n   */\n  setActivePageIndex(index: number): void {\n    this.setActivePage(this.getPages()[index]);\n  }\n\n  /**\n   * Adds the passed page to the navigation stack and makes it visible.\n   * Use {@link popSettingsPanelPage} to navigate backwards.\n   *\n   * Results in no-op if the target page is the current page.\n   * @params page\n   */\n  setActivePage(targetPage: SettingsPanelPage): void {\n    if (targetPage === this.getActivePage()) {\n      console.warn('Page is already the current one ... skipping navigation');\n      return;\n    }\n\n    this.navigateToPage(\n      targetPage,\n      this.getActivePage(),\n      NavigationDirection.Forwards,\n      !(this.config as SettingsPanelConfig).pageTransitionAnimation,\n    );\n  }\n\n  /**\n   * Resets the navigation stack by navigating back to the root page and displaying it.\n   */\n  popToRootSettingsPanelPage(): void {\n    this.resetNavigation((this.config as SettingsPanelConfig).pageTransitionAnimation);\n  }\n\n  /**\n   * Removes the current page from the navigation stack and makes the previous one visible.\n   * Results in a no-op if we are already on the root page.\n   */\n  popSettingsPanelPage() {\n    if (this.navigationStack.length === 0) {\n      console.warn('Already on the root page ... skipping navigation');\n      return;\n    }\n\n    let targetPage = this.navigationStack[this.navigationStack.length - 2];\n    // The root part isn't part of the navigation stack so handle it explicitly here\n    if (!targetPage) {\n      targetPage = this.getRootPage();\n    }\n\n    this.navigateToPage(\n      targetPage,\n      this.activePage,\n      NavigationDirection.Backwards,\n      !(this.config as SettingsPanelConfig).pageTransitionAnimation,\n    );\n  }\n\n  /**\n   * Checks if there are active settings within the root page of the settings panel.\n   * An active setting is a setting that is visible and enabled, which the user can interact with.\n   * @returns {boolean} true if there are active settings, false if the panel is functionally empty to a user\n   */\n  rootPageHasActiveSettings(): boolean {\n    return this.getRootPage().hasActiveSettings();\n  }\n\n  /**\n   * Return all configured pages\n   * @returns {SettingsPanelPage[]}\n   */\n  getPages(): SettingsPanelPage[] {\n    return <SettingsPanelPage[]>this.config.components.filter(component => component instanceof SettingsPanelPage);\n  }\n\n  get onSettingsStateChanged(): Event<SettingsPanel, NoArgs> {\n    return this.settingsPanelEvents.onSettingsStateChanged.getEvent();\n  }\n\n  release(): void {\n    super.release();\n    if (this.hideTimeout) {\n      this.hideTimeout.clear();\n    }\n  }\n\n  // Support adding settingsPanelPages after initialization\n  addComponent(component: Component<ComponentConfig>) {\n    if (this.getPages().length === 0 && component instanceof SettingsPanelPage) {\n      this.activePage = component;\n    }\n    super.addComponent(component);\n  }\n\n  private updateActivePageClass(): void {\n    this.getPages().forEach((page: SettingsPanelPage) => {\n      if (page === this.activePage) {\n        page.getDomElement().addClass(this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));\n      } else {\n        page.getDomElement().removeClass(this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));\n      }\n    });\n  }\n\n  private resetNavigation(resetNavigationOnShow: boolean): void {\n    const sourcePage = this.getActivePage();\n    const rootPage = this.getRootPage();\n    if (sourcePage) {\n      // Since the onInactiveEvent was already fired in the onHide we need to suppress it here\n      if (!resetNavigationOnShow) {\n        sourcePage.onInactiveEvent();\n      }\n    }\n    this.navigationStack = [];\n    this.animateNavigation(rootPage, sourcePage, resetNavigationOnShow);\n    this.activePage = rootPage;\n    this.updateActivePageClass();\n  }\n\n  private navigateToPage(\n    targetPage: SettingsPanelPage,\n    sourcePage: SettingsPanelPage,\n    direction: NavigationDirection,\n    skipAnimation: boolean,\n  ): void {\n    this.activePage = targetPage;\n\n    if (direction === NavigationDirection.Forwards) {\n      this.navigationStack.push(targetPage);\n    } else {\n      this.navigationStack.pop();\n    }\n\n    this.animateNavigation(targetPage, sourcePage, skipAnimation);\n\n    this.updateActivePageClass();\n    targetPage.onActiveEvent();\n    sourcePage.onInactiveEvent();\n  }\n\n  /**\n   * @param targetPage\n   * @param sourcePage\n   * @param skipAnimation This is just an internal flag if we want to have an animation. It is set true when we reset\n   * the navigation within the onShow callback of the settingsPanel. In this case we don't want an actual animation but\n   * the recalculation of the dimension of the settingsPanel.\n   * This is independent of the pageTransitionAnimation flag.\n   */\n  private animateNavigation(targetPage: SettingsPanelPage, sourcePage: SettingsPanelPage, skipAnimation: boolean) {\n    if (!(this.config as SettingsPanelConfig).pageTransitionAnimation) {\n      return;\n    }\n\n    const settingsPanelDomElement = this.getDomElement();\n    const settingsPanelHTMLElement = this.getDomElement().get(0);\n\n    // get current dimension\n    const settingsPanelWidth = settingsPanelHTMLElement.scrollWidth;\n    const settingsPanelHeight = settingsPanelHTMLElement.scrollHeight;\n\n    // calculate target size of the settings panel\n    sourcePage.getDomElement().css('display', 'none');\n    this.getDomElement().css({ width: '', height: '' }); // let css auto settings kick in again\n\n    const targetPageHtmlElement = targetPage.getDomElement().get(0);\n    // clone the targetPage DOM element so that we can calculate the width / height how they will be after\n    // switching the page. We are using a clone to prevent (mostly styling) side-effects on the real DOM element\n    const clone = targetPageHtmlElement.cloneNode(true) as HTMLElement;\n    // append to parent so we get the 'real' size\n    const containerWrapper = targetPageHtmlElement.parentNode;\n    containerWrapper.appendChild(clone);\n    // set clone visible\n    clone.style.display = 'block';\n\n    // collect target dimension\n    const targetSettingsPanelWidth = settingsPanelHTMLElement.scrollWidth;\n    const targetSettingsPanelHeight = settingsPanelHTMLElement.scrollHeight;\n\n    // remove clone from the DOM\n    clone.parentElement.removeChild(clone); // .remove() is not working in IE\n    sourcePage.getDomElement().css('display', '');\n\n    // set the values back to the current ones that the browser animates it (browsers don't animate 'auto' values)\n    settingsPanelDomElement.css({\n      width: settingsPanelWidth + 'px',\n      height: settingsPanelHeight + 'px',\n    });\n\n    if (!skipAnimation) {\n      // We need to force the browser to reflow between setting the width and height that we actually get a animation\n      this.forceBrowserReflow();\n    }\n\n    // set the values to the target dimension\n    settingsPanelDomElement.css({\n      width: targetSettingsPanelWidth + 'px',\n      height: targetSettingsPanelHeight + 'px',\n    });\n  }\n\n  private forceBrowserReflow(): void {\n    // Force the browser to reflow the layout\n    // https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    this.getDomElement().get(0).offsetLeft;\n  }\n\n  /**\n   * Hack for IE + Firefox\n   * when the settings panel fades out while an item of a select box is still hovered, the select box will not fade out\n   * while the settings panel does. This would leave a floating select box, which is just weird\n   */\n  private hideHoveredSelectBoxes(): void {\n    this.getComputedItems().forEach((item: SettingsPanelItem) => {\n      if (item.isActive() && (item as any).setting instanceof SelectBox) {\n        const selectBox = (item as any).setting as SelectBox;\n        const oldDisplay = selectBox.getDomElement().css('display');\n        if (oldDisplay === 'none') {\n          // if oldDisplay is already 'none', no need to set to 'none' again. It could lead to race condition\n          // wherein the display is irreversibly set to 'none' when browser tab/window is not active because\n          // requestAnimationFrame is either delayed or paused in some browsers in inactive state\n          return;\n        }\n\n        // updating the display to none marks the select-box as inactive, so it will be hidden with the rest\n        // we just have to make sure to reset this as soon as possible\n        selectBox.getDomElement().css('display', 'none');\n        if (window.requestAnimationFrame) {\n          requestAnimationFrame(() => {\n            selectBox.getDomElement().css('display', oldDisplay);\n          });\n        } else {\n          // IE9 has no requestAnimationFrame, set the value directly. It has no optimization about ignoring DOM-changes\n          // between animationFrames\n          selectBox.getDomElement().css('display', oldDisplay);\n        }\n      }\n    });\n  }\n\n  // collect all items from all pages (see hideHoveredSelectBoxes)\n  private getComputedItems(): SettingsPanelItem[] {\n    const allItems: SettingsPanelItem[] = [];\n    for (let page of this.getPages()) {\n      allItems.push(...page.getItems());\n    }\n    return allItems;\n  }\n\n  private getRootPage(): SettingsPanelPage {\n    return this.getPages()[0];\n  }\n\n  protected onSettingsStateChangedEvent() {\n    this.settingsPanelEvents.onSettingsStateChanged.dispatch(this);\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {Component, ComponentConfig} from './component';\nimport {Event, EventDispatcher, NoArgs} from '../eventdispatcher';\nimport { Label, LabelConfig } from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {SelectBox} from './selectbox';\nimport {ListBox} from './listbox';\nimport {VideoQualitySelectBox} from './videoqualityselectbox';\nimport {AudioQualitySelectBox} from './audioqualityselectbox';\nimport {PlaybackSpeedSelectBox} from './playbackspeedselectbox';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { LocalizableText } from '../localization/i18n';\n\n/**\n * An item for a {@link SettingsPanelPage},\n * Containing an optional {@link Label} and a component that configures a setting.\n * If the components is a {@link SelectBox} it will handle the logic of displaying it or not\n */\nexport class SettingsPanelItem extends Container<ContainerConfig> {\n\n  private label: Component<ComponentConfig>;\n  private setting: Component<ComponentConfig>;\n\n  private settingsPanelItemEvents = {\n    onActiveChanged: new EventDispatcher<SettingsPanelItem, NoArgs>(),\n  };\n\n  constructor(label: LocalizableText | Component<ComponentConfig>, setting: Component<ComponentConfig>, config: ContainerConfig = {}) {\n    super(config);\n\n    this.setting = setting;\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settings-panel-item',\n      role: 'menuitem',\n    }, this.config);\n\n    if (label !== null) {\n      if (label instanceof Component) {\n        this.label = label;\n      } else {\n        this.label = new Label({ text: label, for: this.setting.getConfig().id } as LabelConfig);\n      }\n      this.addComponent(this.label);\n    }\n\n    this.addComponent(this.setting);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    if (this.setting instanceof SelectBox || this.setting instanceof ListBox) {\n      let handleConfigItemChanged = () => {\n        if (!(this.setting instanceof SelectBox) && !(this.setting instanceof ListBox)) {\n          return;\n        }\n        // The minimum number of items that must be available for the setting to be displayed\n        // By default, at least two items must be available, else a selection is not possible\n        let minItemsToDisplay = 2;\n        // Audio/video quality select boxes contain an additional 'auto' mode, which in combination with a single\n        // available quality also does not make sense\n        if ((this.setting instanceof VideoQualitySelectBox && this.setting.hasAutoItem())\n          || this.setting instanceof AudioQualitySelectBox) {\n          minItemsToDisplay = 3;\n        }\n\n        if (this.setting.itemCount() < minItemsToDisplay) {\n          // Hide the setting if no meaningful choice is available\n          this.hide();\n        } else if (this.setting instanceof PlaybackSpeedSelectBox\n          && !uimanager.getConfig().playbackSpeedSelectionEnabled) {\n          // Hide the PlaybackSpeedSelectBox if disabled in config\n          this.hide();\n        } else {\n          this.show();\n        }\n\n        // Visibility might have changed and therefore the active state might have changed so we fire the event\n        // TODO fire only when state has really changed (e.g. check if visibility has really changed)\n        this.onActiveChangedEvent();\n\n        this.getDomElement().attr('aria-haspopup', 'true');\n      };\n\n      this.setting.onItemAdded.subscribe(handleConfigItemChanged);\n      this.setting.onItemRemoved.subscribe(handleConfigItemChanged);\n\n      // Initialize hidden state\n      handleConfigItemChanged();\n    }\n  }\n\n  /**\n   * Checks if this settings panel item is active, i.e. visible and enabled and a user can interact with it.\n   * @returns {boolean} true if the panel is active, else false\n   */\n  isActive(): boolean {\n    return this.isShown();\n  }\n\n  protected onActiveChangedEvent() {\n    this.settingsPanelItemEvents.onActiveChanged.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the 'active' state of this item changes.\n   * @see #isActive\n   * @returns {Event<SettingsPanelItem, NoArgs>}\n   */\n  get onActiveChanged(): Event<SettingsPanelItem, NoArgs> {\n    return this.settingsPanelItemEvents.onActiveChanged.getEvent();\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {SettingsPanelItem} from './settingspanelitem';\nimport {UIInstanceManager} from '../uimanager';\nimport {Event, EventDispatcher, NoArgs} from '../eventdispatcher';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { BrowserUtils } from '../browserutils';\n\n/**\n * A panel containing a list of {@link SettingsPanelItem items} that represent labelled settings.\n */\nexport class SettingsPanelPage extends Container<ContainerConfig> {\n\n  private static readonly CLASS_LAST = 'last';\n\n  private settingsPanelPageEvents = {\n    onSettingsStateChanged: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n    onActive: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n    onInactive: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n  };\n\n  constructor(config: ContainerConfig) {\n    super(config);\n\n    this.config = this.mergeConfig<ContainerConfig>(config, {\n      cssClass: 'ui-settings-panel-page',\n      role: 'menu',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    // Fire event when the state of a settings-item has changed\n    let settingsStateChangedHandler = () => {\n      this.onSettingsStateChangedEvent();\n\n      // Attach marker class to last visible item\n      let lastShownItem = null;\n      for (let component of this.getItems()) {\n        component.getDomElement().removeClass(this.prefixCss(SettingsPanelPage.CLASS_LAST));\n        if (component.isShown()) {\n          lastShownItem = component;\n        }\n      }\n      if (lastShownItem) {\n        lastShownItem.getDomElement().addClass(this.prefixCss(SettingsPanelPage.CLASS_LAST));\n      }\n    };\n    for (let component of this.getItems()) {\n      component.onActiveChanged.subscribe(settingsStateChangedHandler);\n    }\n  }\n\n  hasActiveSettings(): boolean {\n    for (let component of this.getItems()) {\n      if (component.isActive()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getItems(): SettingsPanelItem[] {\n    return <SettingsPanelItem[]>this.config.components.filter(component => component instanceof SettingsPanelItem);\n  }\n\n  onSettingsStateChangedEvent() {\n    this.settingsPanelPageEvents.onSettingsStateChanged.dispatch(this);\n  }\n\n  get onSettingsStateChanged(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onSettingsStateChanged.getEvent();\n  }\n\n  onActiveEvent() {\n    const activeItems = this.getItems().filter((item) => item.isActive());\n\n    this.settingsPanelPageEvents.onActive.dispatch(this);\n    // Disable focus for iOS and iPadOS 13. They open select boxes automatically on focus and we want to avoid that.\n    if (activeItems.length > 0 && !BrowserUtils.isIOS && !(BrowserUtils.isMacIntel && BrowserUtils.isTouchSupported)) {\n      activeItems[0].getDomElement().focusToFirstInput();\n    }\n  }\n\n  get onActive(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onActive.getEvent();\n  }\n\n  onInactiveEvent() {\n    this.settingsPanelPageEvents.onInactive.dispatch(this);\n  }\n\n  get onInactive(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onInactive.getEvent();\n  }\n}\n","import {UIInstanceManager} from '../uimanager';\nimport {SettingsPanelPageNavigatorButton, SettingsPanelPageNavigatorConfig} from './settingspanelpagenavigatorbutton';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport class SettingsPanelPageBackButton extends SettingsPanelPageNavigatorButton {\n\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingspanelpagebackbutton',\n      text: 'back',\n    } as SettingsPanelPageNavigatorConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      this.popPage();\n    });\n  }\n}\n","import {Button, ButtonConfig} from './button';\nimport {SettingsPanel} from './settingspanel';\nimport {SettingsPanelPage} from './settingspanelpage';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\n\n/**\n * Configuration interface for a {@link SettingsPanelPageNavigatorButton}\n */\nexport interface SettingsPanelPageNavigatorConfig extends ButtonConfig {\n  /**\n   * Container `SettingsPanel` where the navigation takes place\n   */\n  container: SettingsPanel;\n  /**\n   * Page where the button should navigate to\n   * If empty it will navigate to the root page (not intended to use as navigate back behavior)\n   */\n  targetPage?: SettingsPanelPage;\n\n  /**\n   * WCAG20 standard: Establishes relationships between objects and their label(s)\n   */\n  ariaLabelledBy?: string;\n}\n\n/**\n * Can be used to navigate between SettingsPanelPages\n *\n * Example:\n *  let settingPanelNavigationButton = new SettingsPanelPageNavigatorButton({\n *    container: settingsPanel,\n *    targetPage: settingsPanelPage,\n *  });\n *\n *  settingsPanelPage.addComponent(settingPanelNavigationButton);\n *\n * Don't forget to add the settingPanelNavigationButton to the settingsPanelPage.\n */\nexport class SettingsPanelPageNavigatorButton extends Button<SettingsPanelPageNavigatorConfig> {\n  private readonly container: SettingsPanel;\n  private readonly targetPage?: SettingsPanelPage;\n\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n    this.config = this.mergeConfig(config, {} as SettingsPanelPageNavigatorConfig, this.config);\n\n    this.container = (this.config as SettingsPanelPageNavigatorConfig).container;\n    this.targetPage = (this.config as SettingsPanelPageNavigatorConfig).targetPage;\n  }\n\n  /**\n   * navigate one level back\n   */\n  popPage() {\n    this.container.popSettingsPanelPage();\n  }\n\n  /**\n   * navigate to the target page\n   */\n  pushTargetPage() {\n    this.container.setActivePage(this.targetPage);\n  }\n}\n","import {UIInstanceManager} from '../uimanager';\nimport {SettingsPanelPageNavigatorButton, SettingsPanelPageNavigatorConfig} from './settingspanelpagenavigatorbutton';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\nexport class SettingsPanelPageOpenButton extends SettingsPanelPageNavigatorButton {\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingspanelpageopenbutton',\n      text: i18n.getLocalizer('open'),\n      role: 'menuitem',\n    } as SettingsPanelPageNavigatorConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.getDomElement().attr('aria-haspopup', 'true');\n    this.getDomElement().attr('aria-owns', this.config.targetPage.getConfig().id);\n\n    this.onClick.subscribe(() => {\n      this.pushTargetPage();\n    });\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {SettingsPanel} from './settingspanel';\nimport {UIInstanceManager} from '../uimanager';\nimport {Component, ComponentConfig} from './component';\nimport {ArrayUtils} from '../arrayutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link SettingsToggleButton}.\n */\nexport interface SettingsToggleButtonConfig extends ToggleButtonConfig {\n  /**\n   * The settings panel whose visibility the button should toggle.\n   */\n  settingsPanel: SettingsPanel;\n\n  /**\n   * Decides if the button should be automatically hidden when the settings panel does not contain any active settings.\n   * Default: true\n   */\n  autoHideWhenNoActiveSettings?: boolean;\n}\n\n/**\n * A button that toggles visibility of a settings panel.\n */\nexport class SettingsToggleButton extends ToggleButton<SettingsToggleButtonConfig> {\n\n  private visibleSettingsPanels: SettingsPanel[] = [];\n\n  constructor(config: SettingsToggleButtonConfig) {\n    super(config);\n\n    if (!config.settingsPanel) {\n      throw new Error('Required SettingsPanel is missing');\n    }\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingstogglebutton',\n      text: i18n.getLocalizer('settings'),\n      settingsPanel: null,\n      autoHideWhenNoActiveSettings: true,\n      role: 'pop-up button',\n    }, <SettingsToggleButtonConfig>this.config);\n\n    /**\n     * WCAG20 standard defines which popup menu (element id) is owned by the button\n     */\n    this.getDomElement().attr('aria-owns', config.settingsPanel.getActivePage().getConfig().id);\n\n    /**\n     * WCAG20 standard defines that a button has a popup menu bound to it\n     */\n    this.getDomElement().attr('aria-haspopup', 'true');\n\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let settingsPanel = config.settingsPanel;\n\n    this.onClick.subscribe(() => {\n      // only hide other `SettingsPanel`s if a new one will be opened\n      if (!settingsPanel.isShown()) {\n        // Hide all open SettingsPanels before opening this button's panel\n        // (We need to iterate a copy because hiding them will automatically remove themselves from the array\n        // due to the subscribeOnce above)\n        this.visibleSettingsPanels.slice().forEach(settingsPanel => settingsPanel.hide());\n      }\n      settingsPanel.toggleHidden();\n    });\n    settingsPanel.onShow.subscribe(() => {\n      // Set toggle status to on when the settings panel shows\n      this.on();\n    });\n    settingsPanel.onHide.subscribe(() => {\n      // Set toggle status to off when the settings panel hides\n      this.off();\n    });\n\n    // Ensure that only one `SettingPanel` is visible at once\n    // Keep track of shown SettingsPanels\n    uimanager.onComponentShow.subscribe((sender: Component<ComponentConfig>) => {\n      if (sender instanceof SettingsPanel) {\n        this.visibleSettingsPanels.push(sender);\n        sender.onHide.subscribeOnce(() => ArrayUtils.remove(this.visibleSettingsPanels, sender));\n      }\n    });\n\n    // Handle automatic hiding of the button if there are no settings for the user to interact with\n    if (config.autoHideWhenNoActiveSettings) {\n      // Setup handler to show/hide button when the settings change\n      let settingsPanelItemsChangedHandler = () => {\n        if (settingsPanel.rootPageHasActiveSettings()) {\n          if (this.isHidden()) {\n            this.show();\n          }\n        } else {\n          if (this.isShown()) {\n            this.hide();\n          }\n        }\n      };\n      // Wire the handler to the event\n      settingsPanel.onSettingsStateChanged.subscribe(settingsPanelItemsChangedHandler);\n      // Call handler for first init at startup\n      settingsPanelItemsChangedHandler();\n    }\n  }\n}\n","import {Component, ComponentConfig} from './component';\n\n/**\n * A dummy component that just reserves some space and does nothing else.\n */\nexport class Spacer extends Component<ComponentConfig> {\n\n  constructor(config: ComponentConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-spacer',\n    }, this.config);\n  }\n\n\n  protected onShowEvent(): void {\n    // disable event firing by overwriting and not calling super\n  }\n\n  protected onHideEvent(): void {\n    // disable event firing by overwriting and not calling super\n  }\n\n  protected onHoverChangedEvent(hovered: boolean): void {\n    // disable event firing by overwriting and not calling super\n  }\n}","import {ListBox} from './listbox';\nimport {UIInstanceManager} from '../uimanager';\nimport {SubtitleSwitchHandler} from '../subtitleutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A element that is similar to a select box where the user can select a subtitle\n */\nexport class SubtitleListBox extends ListBox {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new SubtitleSwitchHandler(player, this, uimanager);\n  }\n}\n","import { Container, ContainerConfig } from './container';\nimport { UIInstanceManager } from '../uimanager';\nimport { Label, LabelConfig } from './label';\nimport { ComponentConfig, Component } from './component';\nimport { ControlBar } from './controlbar';\nimport { EventDispatcher } from '../eventdispatcher';\nimport { DOM, Size } from '../dom';\nimport { PlayerAPI, SubtitleCueEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\nimport { VttUtils } from '../vttutils';\nimport { VTTProperties } from 'bitmovin-player/types/subtitles/vtt/API';\n\ninterface SubtitleCropDetectionResult {\n  top: boolean;\n  right: boolean;\n  bottom: boolean;\n  left: boolean;\n}\n\n/**\n * Overlays the player to display subtitles.\n */\nexport class SubtitleOverlay extends Container<ContainerConfig> {\n\n  private subtitleManager: ActiveSubtitleManager;\n  private previewSubtitleActive: boolean;\n  private previewSubtitle: SubtitleLabel;\n\n  private preprocessLabelEventCallback = new EventDispatcher<SubtitleCueEvent, SubtitleLabel>();\n  private subtitleContainerManager: SubtitleRegionContainerManager;\n\n  private static readonly CLASS_CONTROLBAR_VISIBLE = 'controlbar-visible';\n  private static readonly CLASS_CEA_608 = 'cea608';\n\n  // The number of rows in a cea608 grid\n  private static readonly CEA608_NUM_ROWS = 15;\n  // The number of columns in a cea608 grid\n  private static readonly CEA608_NUM_COLUMNS = 32;\n  // The offset in percent for one row (which is also the height of a row)\n  private static readonly CEA608_ROW_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_ROWS;\n  // The offset in percent for one column (which is also the width of a column)\n  private static readonly CEA608_COLUMN_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_COLUMNS;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.previewSubtitleActive = false;\n    this.previewSubtitle = new SubtitleLabel({ text: i18n.getLocalizer('subtitle.example') });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitle-overlay',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let subtitleManager = new ActiveSubtitleManager();\n    this.subtitleManager = subtitleManager;\n\n    this.subtitleContainerManager = new SubtitleRegionContainerManager(this);\n\n    player.on(player.exports.PlayerEvent.CueEnter, (event: SubtitleCueEvent) => {\n      const label = this.generateLabel(event);\n      subtitleManager.cueEnter(event, label);\n\n      this.preprocessLabelEventCallback.dispatch(event, label);\n\n      if (this.previewSubtitleActive) {\n        this.subtitleContainerManager.removeLabel(this.previewSubtitle);\n      }\n\n      this.show();\n\n      this.subtitleContainerManager.addLabel(label, this.getDomElement().size());\n      this.updateComponents();\n\n      if (uimanager.getConfig().forceSubtitlesIntoViewContainer) {\n        this.handleSubtitleCropping(label);\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.CueUpdate, (event: SubtitleCueEvent) => {\n      const label = this.generateLabel(event);\n      const labelToReplace = subtitleManager.cueUpdate(event, label);\n\n      this.preprocessLabelEventCallback.dispatch(event, label);\n\n      if (labelToReplace) {\n        this.subtitleContainerManager.replaceLabel(labelToReplace, label);\n      }\n\n      if (uimanager.getConfig().forceSubtitlesIntoViewContainer) {\n        this.handleSubtitleCropping(label);\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.CueExit, (event: SubtitleCueEvent) => {\n      let labelToRemove = subtitleManager.cueExit(event);\n\n      if (labelToRemove) {\n        this.subtitleContainerManager.removeLabel(labelToRemove);\n        this.updateComponents();\n      }\n\n      if (!subtitleManager.hasCues) {\n        if (!this.previewSubtitleActive) {\n          this.hide();\n        } else {\n          this.subtitleContainerManager.addLabel(this.previewSubtitle);\n          this.updateComponents();\n        }\n      }\n    });\n\n    let subtitleClearHandler = () => {\n      this.hide();\n      this.subtitleContainerManager.clear();\n      subtitleManager.clear();\n      this.removeComponents();\n      this.updateComponents();\n    };\n\n    const clearInactiveCues = () => {\n      const removedActiveCues = subtitleManager.clearInactiveCues(player.getCurrentTime());\n      removedActiveCues.forEach(toRemove => {\n        this.subtitleContainerManager.removeLabel(toRemove.label);\n      });\n    };\n\n    player.on(player.exports.PlayerEvent.AudioChanged, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SubtitleEnabled, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SubtitleDisabled, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.Seeked, clearInactiveCues);\n    player.on(player.exports.PlayerEvent.TimeShifted, clearInactiveCues);\n    player.on(player.exports.PlayerEvent.PlaybackFinished, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, subtitleClearHandler);\n\n    uimanager.onComponentShow.subscribe((component: Component<ComponentConfig>) => {\n      if (component instanceof ControlBar) {\n        this.getDomElement().addClass(this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));\n      }\n    });\n    uimanager.onComponentHide.subscribe((component: Component<ComponentConfig>) => {\n      if (component instanceof ControlBar) {\n        this.getDomElement().removeClass(this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));\n      }\n    });\n\n    this.configureCea608Captions(player, uimanager);\n    // Init\n    subtitleClearHandler();\n  }\n\n  detectCroppedSubtitleLabel(\n    labelElement: HTMLElement,\n  ): SubtitleCropDetectionResult {\n    const parent = this.getDomElement().get(0);\n\n    const childRect = labelElement.getBoundingClientRect();\n    const parentRect = parent.getBoundingClientRect();\n\n    return {\n      top: childRect.top < parentRect.top,\n      right: childRect.right > parentRect.right,\n      bottom: childRect.bottom > parentRect.bottom,\n      left: childRect.left < parentRect.left,\n    };\n  }\n\n  handleSubtitleCropping(label: SubtitleLabel) {\n    const labelDomElement = label.getDomElement();\n    const cropDetection = this.detectCroppedSubtitleLabel(\n      labelDomElement.get(0),\n    );\n\n    if (cropDetection.top) {\n      labelDomElement.css('top', '0');\n      labelDomElement.removeCss('bottom');\n    }\n\n    if (cropDetection.right) {\n      labelDomElement.css('right', '0');\n      labelDomElement.removeCss('left');\n    }\n\n    if (cropDetection.bottom) {\n      labelDomElement.css('bottom', '0');\n      labelDomElement.removeCss('top');\n    }\n\n    if (cropDetection.left) {\n      labelDomElement.css('left', '0');\n      labelDomElement.removeCss('right');\n    }\n  }\n\n  generateLabel(event: SubtitleCueEvent): SubtitleLabel {\n    // Sanitize cue data (must be done before the cue ID is generated in subtitleManager.cueEnter / update)\n    if (event.position) {\n      // Sometimes the positions are undefined, we assume them to be zero\n      event.position.row = event.position.row || 0;\n      event.position.column = event.position.column || 0;\n    }\n\n    const label = new SubtitleLabel({\n      // Prefer the HTML subtitle text if set, else try generating a image tag as string from the image attribute,\n      // else use the plain text\n      text: event.html || ActiveSubtitleManager.generateImageTagText(event.image) || event.text,\n      vtt: event.vtt,\n      region: event.region,\n      regionStyle: event.regionStyle,\n    });\n\n    return label;\n  }\n\n  configureCea608Captions(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // The calculated font size\n    let fontSize = 0;\n    // The required letter spacing spread the text characters evenly across the grid\n    let fontLetterSpacing = 0;\n    // Flag telling if a font size calculation is required of if the current values are valid\n    let fontSizeCalculationRequired = true;\n    // Flag telling if the CEA-608 mode is enabled\n    let enabled = false;\n\n    const updateCEA608FontSize = () => {\n      const dummyLabel = new SubtitleLabel({ text: 'X' });\n      dummyLabel.getDomElement().css({\n        // By using a large font size we do not need to use multiple letters and can get still an\n        // accurate measurement even though the returned size is an integer value\n        'font-size': '200px',\n        'line-height': '200px',\n        'visibility': 'hidden',\n      });\n      this.addComponent(dummyLabel);\n      this.updateComponents();\n      this.show();\n\n      const dummyLabelCharWidth = dummyLabel.getDomElement().width();\n      const dummyLabelCharHeight = dummyLabel.getDomElement().height();\n      const fontSizeRatio = dummyLabelCharWidth / dummyLabelCharHeight;\n\n      this.removeComponent(dummyLabel);\n      this.updateComponents();\n      if (!this.subtitleManager.hasCues) {\n        this.hide();\n      }\n\n      // We subtract 1px here to avoid line breaks at the right border of the subtitle overlay that can happen\n      // when texts contain whitespaces. It's probably some kind of pixel rounding issue in the browser's\n      // layouting, but the actual reason could not be determined. Aiming for a target width - 1px would work in\n      // most browsers, but Safari has a \"quantized\" font size rendering with huge steps in between so we need\n      // to subtract some more pixels to avoid line breaks there as well.\n      const subtitleOverlayWidth = this.getDomElement().width() - 10;\n      const subtitleOverlayHeight = this.getDomElement().height();\n\n      // The size ratio of the letter grid\n      const fontGridSizeRatio = (dummyLabelCharWidth * SubtitleOverlay.CEA608_NUM_COLUMNS) /\n        (dummyLabelCharHeight * SubtitleOverlay.CEA608_NUM_ROWS);\n      // The size ratio of the available space for the grid\n      const subtitleOverlaySizeRatio = subtitleOverlayWidth / subtitleOverlayHeight;\n\n      if (subtitleOverlaySizeRatio > fontGridSizeRatio) {\n        // When the available space is wider than the text grid, the font size is simply\n        // determined by the height of the available space.\n        fontSize = subtitleOverlayHeight / SubtitleOverlay.CEA608_NUM_ROWS;\n\n        // Calculate the additional letter spacing required to evenly spread the text across the grid's width\n        const gridSlotWidth = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS;\n        const fontCharWidth = fontSize * fontSizeRatio;\n        fontLetterSpacing = gridSlotWidth - fontCharWidth;\n      } else {\n        // When the available space is not wide enough, texts would vertically overlap if we take\n        // the height as a base for the font size, so we need to limit the height. We do that\n        // by determining the font size by the width of the available space.\n        fontSize = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS / fontSizeRatio;\n        fontLetterSpacing = 0;\n      }\n\n      // Update font-size of all active subtitle labels\n      for (let label of this.getComponents()) {\n        if (label instanceof SubtitleLabel) {\n          label.getDomElement().css({\n            'font-size': `${fontSize}px`,\n            'letter-spacing': `${fontLetterSpacing}px`,\n          });\n        }\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      if (enabled) {\n        updateCEA608FontSize();\n      } else {\n        fontSizeCalculationRequired = true;\n      }\n    });\n\n    this.preprocessLabelEventCallback.subscribe((event: SubtitleCueEvent, label: SubtitleLabel) => {\n      const isCEA608 = event.position != null;\n      if (!isCEA608) {\n        // Skip all non-CEA608 cues\n        return;\n      }\n\n      if (!enabled) {\n        enabled = true;\n        this.getDomElement().addClass(this.prefixCss(SubtitleOverlay.CLASS_CEA_608));\n\n        // We conditionally update the font size by this flag here to avoid updating every time a subtitle\n        // is added into an empty overlay. Because we reset the overlay when all subtitles are gone, this\n        // would trigger an unnecessary update every time, but it's only required under certain conditions,\n        // e.g. after the player size has changed.\n        if (fontSizeCalculationRequired) {\n          updateCEA608FontSize();\n          fontSizeCalculationRequired = false;\n        }\n      }\n\n      label.getDomElement().css({\n        'left': `${event.position.column * SubtitleOverlay.CEA608_COLUMN_OFFSET}%`,\n        'top': `${event.position.row * SubtitleOverlay.CEA608_ROW_OFFSET}%`,\n        'font-size': `${fontSize}px`,\n        'letter-spacing': `${fontLetterSpacing}px`,\n      });\n    });\n\n    const reset = () => {\n      this.getDomElement().removeClass(this.prefixCss(SubtitleOverlay.CLASS_CEA_608));\n      enabled = false;\n    };\n\n    player.on(player.exports.PlayerEvent.CueExit, () => {\n      if (!this.subtitleManager.hasCues) {\n        // Disable CEA-608 mode when all subtitles are gone (to allow correct formatting and\n        // display of other types of subtitles, e.g. the formatting preview subtitle)\n        reset();\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.SourceUnloaded, reset);\n    player.on(player.exports.PlayerEvent.SubtitleEnabled, reset);\n    player.on(player.exports.PlayerEvent.SubtitleDisabled, reset);\n  }\n\n  enablePreviewSubtitleLabel(): void {\n    if (!this.subtitleManager.hasCues) {\n      this.previewSubtitleActive = true;\n      this.subtitleContainerManager.addLabel(this.previewSubtitle);\n      this.updateComponents();\n      this.show();\n    }\n  }\n\n  removePreviewSubtitleLabel(): void {\n    if (this.previewSubtitleActive) {\n      this.previewSubtitleActive = false;\n      this.subtitleContainerManager.removeLabel(this.previewSubtitle);\n      this.updateComponents();\n    }\n  }\n}\n\ninterface ActiveSubtitleCue {\n  event: SubtitleCueEvent;\n  label: SubtitleLabel;\n}\n\ninterface ActiveSubtitleCueMap {\n  [id: string]: ActiveSubtitleCue[];\n}\n\ninterface SubtitleLabelConfig extends LabelConfig {\n  vtt?: VTTProperties;\n  region?: string;\n  regionStyle?: string;\n}\n\nexport class SubtitleLabel extends Label<SubtitleLabelConfig> {\n\n  constructor(config: SubtitleLabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitle-label',\n    }, this.config);\n  }\n\n  get vtt(): VTTProperties {\n    return this.config.vtt;\n  }\n\n  get region(): string {\n    return this.config.region;\n  }\n\n  get regionStyle(): string {\n    return this.config.regionStyle;\n  }\n}\n\nclass ActiveSubtitleManager {\n\n  private activeSubtitleCueMap: ActiveSubtitleCueMap;\n  private activeSubtitleCueCount: number;\n\n  constructor() {\n    this.activeSubtitleCueMap = {};\n    this.activeSubtitleCueCount = 0;\n  }\n\n  /**\n   * Calculates a unique ID for a subtitle cue, which is needed to associate an CueEnter with its CueExit\n   * event so we can remove the correct subtitle in CueExit when multiple subtitles are active at the same time.\n   * The start time plus the text should make a unique identifier, and in the only case where a collision\n   * can happen, two similar texts will be displayed at a similar time and a similar position (or without position).\n   * The start time should always be known, because it is required to schedule the CueEnter event. The end time\n   * must not necessarily be known and therefore cannot be used for the ID.\n   * @param event\n   * @return {string}\n   */\n  private static calculateId(event: SubtitleCueEvent): string {\n    let id = event.start + '-' + event.text;\n\n    if (event.position) {\n      id += '-' + event.position.row + '-' + event.position.column;\n    }\n\n    return id;\n  }\n\n  cueEnter(event: SubtitleCueEvent, label: SubtitleLabel): void {\n    this.addCueToMap(event, label);\n  }\n\n  cueUpdate(event: SubtitleCueEvent, label: SubtitleLabel): SubtitleLabel | undefined {\n    const labelToReplace = this.popCueFromMap(event);\n\n    if (labelToReplace) {\n      this.addCueToMap(event, label);\n      return labelToReplace;\n    }\n\n    return undefined;\n  }\n\n  private addCueToMap(event: SubtitleCueEvent, label: SubtitleLabel): void {\n    let id = ActiveSubtitleManager.calculateId(event);\n\n    // Create array for id if it does not exist\n    this.activeSubtitleCueMap[id] = this.activeSubtitleCueMap[id] || [];\n\n    // Add cue\n    this.activeSubtitleCueMap[id].push({ event, label });\n    this.activeSubtitleCueCount++;\n  }\n\n  private popCueFromMap(event: SubtitleCueEvent): SubtitleLabel | undefined {\n    let id = ActiveSubtitleManager.calculateId(event);\n    let activeSubtitleCues = this.activeSubtitleCueMap[id];\n\n    if (activeSubtitleCues && activeSubtitleCues.length > 0) {\n      // Remove cue\n      /* We apply the FIFO approach here and remove the oldest cue from the associated id. When there are multiple cues\n       * with the same id, there is no way to know which one of the cues is to be deleted, so we just hope that FIFO\n       * works fine. Theoretically it can happen that two cues with colliding ids are removed at different times, in\n       * the wrong order. This rare case has yet to be observed. If it ever gets an issue, we can take the unstable\n       * cue end time (which can change between CueEnter and CueExit IN CueUpdate) and use it as an\n       * additional hint to try and remove the correct one of the colliding cues.\n       */\n      let activeSubtitleCue = activeSubtitleCues.shift();\n      this.activeSubtitleCueCount--;\n\n      return activeSubtitleCue.label;\n    }\n  }\n\n  /**\n   * Removes all active cues which don't enclose the given time\n   * @param time the time for which subtitles should remain\n   */\n  public clearInactiveCues(time: number): ActiveSubtitleCue[] {\n    const removedCues: ActiveSubtitleCue[] = [];\n    Object.keys(this.activeSubtitleCueMap).forEach(key => {\n      const activeCues = this.activeSubtitleCueMap[key];\n      activeCues.forEach(cue => {\n        if (time < cue.event.start || time > cue.event.end) {\n          this.popCueFromMap(cue.event);\n          removedCues.push(cue);\n        }\n      });\n    });\n    return removedCues;\n  }\n\n  static generateImageTagText(imageData: string): string | undefined {\n    if (!imageData) {\n      return;\n    }\n\n    const imgTag = new DOM('img', {\n      src: imageData,\n    });\n    imgTag.css('width', '100%');\n    return imgTag.get(0).outerHTML; // return the html as string\n  }\n\n  /**\n   * Returns the label associated with an already added cue.\n   * @param event\n   * @return {SubtitleLabel}\n   */\n  getCues(event: SubtitleCueEvent): SubtitleLabel[] | undefined {\n    let id = ActiveSubtitleManager.calculateId(event);\n    let activeSubtitleCues = this.activeSubtitleCueMap[id];\n    if (activeSubtitleCues && activeSubtitleCues.length > 0) {\n      return activeSubtitleCues.map((cue) => cue.label);\n    }\n  }\n\n  /**\n   * Removes the subtitle cue from the manager and returns the label that should be removed from the subtitle overlay,\n   * or null if there is no associated label existing (e.g. because all labels have been {@link #clear cleared}.\n   * @param event\n   * @return {SubtitleLabel|null}\n   */\n  cueExit(event: SubtitleCueEvent): SubtitleLabel {\n    return this.popCueFromMap(event);\n  }\n\n  /**\n   * Returns the number of active subtitle cues.\n   * @return {number}\n   */\n  get cueCount(): number {\n    // We explicitly count the cues to save an Array.reduce on every cueCount call (which can happen frequently)\n    return this.activeSubtitleCueCount;\n  }\n\n  /**\n   * Returns true if there are active subtitle cues, else false.\n   * @return {boolean}\n   */\n  get hasCues(): boolean {\n    return this.cueCount > 0;\n  }\n\n  /**\n   * Removes all subtitle cues from the manager.\n   */\n  clear(): void {\n    this.activeSubtitleCueMap = {};\n    this.activeSubtitleCueCount = 0;\n  }\n}\n\nexport class SubtitleRegionContainerManager {\n  private subtitleRegionContainers: { [regionName: string]: SubtitleRegionContainer } = {};\n\n  /**\n   * @param subtitleOverlay Reference to the subtitle overlay for adding and removing the containers.\n   */\n  constructor(private subtitleOverlay: SubtitleOverlay) {\n    this.subtitleOverlay = subtitleOverlay;\n  }\n\n  private getRegion(label: SubtitleLabel): { regionContainerId: string, regionName: string } {\n    if (label.vtt) {\n      return {\n        regionContainerId: label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt',\n        regionName: 'vtt',\n      };\n    }\n\n    return {\n      regionContainerId: label.region || 'default',\n      regionName: label.region || 'default',\n    };\n  }\n\n  /**\n   * Creates and wraps a subtitle label into a container div based on the subtitle region.\n   * If the subtitle has positioning information it is added to the container.\n   * @param label The subtitle label to wrap\n   */\n  addLabel(label: SubtitleLabel, overlaySize?: Size): void {\n    const { regionContainerId, regionName } = this.getRegion(label);\n    const cssClasses = [`subtitle-position-${regionName}`];\n\n    if (label.vtt && label.vtt.region) {\n      cssClasses.push(`vtt-region-${label.vtt.region.id}`);\n    }\n\n    if (!this.subtitleRegionContainers[regionContainerId]) {\n      const regionContainer = new SubtitleRegionContainer({\n        cssClasses,\n      });\n\n      this.subtitleRegionContainers[regionContainerId] = regionContainer;\n\n      if (label.regionStyle) {\n        regionContainer.getDomElement().attr('style', label.regionStyle);\n      } else if (label.vtt && !label.vtt.region) {\n        /**\n         * If there is no region present to wrap the Cue Box, the Cue box becomes the\n         * region itself. Therefore the positioning values have to come from the box.\n         */\n        regionContainer.getDomElement().css('position', 'static');\n      } else {\n        // getDomElement needs to be called at least once to ensure the component exists\n        regionContainer.getDomElement();\n      }\n\n      for (const regionContainerId in this.subtitleRegionContainers) {\n        this.subtitleOverlay.addComponent(this.subtitleRegionContainers[regionContainerId]);\n      }\n    }\n\n    this.subtitleRegionContainers[regionContainerId].addLabel(label, overlaySize);\n  }\n\n  replaceLabel(previousLabel: SubtitleLabel, newLabel: SubtitleLabel): void {\n    const { regionContainerId } = this.getRegion(previousLabel);\n\n    this.subtitleRegionContainers[regionContainerId].removeLabel(previousLabel);\n    this.subtitleRegionContainers[regionContainerId].addLabel(newLabel);\n  }\n\n  /**\n   * Removes a subtitle label from a container.\n   */\n  removeLabel(label: SubtitleLabel): void {\n    let regionContainerId;\n\n    if (label.vtt) {\n      regionContainerId = label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt';\n    } else {\n      regionContainerId = label.region || 'default';\n    }\n\n    this.subtitleRegionContainers[regionContainerId].removeLabel(label);\n\n    // Remove container if no more labels are displayed\n    if (this.subtitleRegionContainers[regionContainerId].isEmpty()) {\n      this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionContainerId]);\n      delete this.subtitleRegionContainers[regionContainerId];\n    }\n  }\n\n  /**\n   * Removes all subtitle containers.\n   */\n  clear(): void {\n    for (const regionName in this.subtitleRegionContainers) {\n      this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionName]);\n    }\n\n    this.subtitleRegionContainers = {};\n  }\n}\n\nexport class SubtitleRegionContainer extends Container<ContainerConfig> {\n  private labelCount = 0;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'subtitle-region-container',\n    }, this.config);\n  }\n\n  addLabel(labelToAdd: SubtitleLabel, overlaySize?: Size) {\n    this.labelCount++;\n\n    if (labelToAdd.vtt) {\n      if (labelToAdd.vtt.region && overlaySize) {\n        VttUtils.setVttRegionStyles(this, labelToAdd.vtt.region, overlaySize);\n      }\n\n      VttUtils.setVttCueBoxStyles(labelToAdd, overlaySize);\n    }\n\n    this.addComponent(labelToAdd);\n    this.updateComponents();\n  }\n\n  removeLabel(labelToRemove: SubtitleLabel): void {\n    this.labelCount--;\n    this.removeComponent(labelToRemove);\n    this.updateComponents();\n  }\n\n  public isEmpty(): boolean {\n    return this.labelCount === 0;\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport {SubtitleSwitchHandler} from '../subtitleutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between available subtitle and caption tracks.\n */\nexport class SubtitleSelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitleselectbox'],\n      ariaLabel: i18n.getLocalizer('subtitle.select'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new SubtitleSwitchHandler(player, this, uimanager);\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background colors.\n */\nexport class BackgroundColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsbackgroundcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.backgroundColor.isSet() && this.settingsManager.backgroundOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'bgcolor-' + this.settingsManager.backgroundColor.value + this.settingsManager.backgroundOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.backgroundColor.value = key;\n    });\n\n    this.settingsManager.backgroundColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.backgroundColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.backgroundOpacity.clear();\n      } else if (!this.settingsManager.backgroundOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.backgroundOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.backgroundOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.backgroundColor.isSet()) {\n      this.selectItem(this.settingsManager.backgroundColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background opacity.\n */\nexport class BackgroundOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsbackgroundopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n    this.addItem('0', i18n.getLocalizer('percent', { value: 0 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.backgroundOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.backgroundOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.backgroundColor.clear();\n      } else if (!this.settingsManager.backgroundColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.backgroundColor.value = 'black';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.backgroundOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.backgroundOpacity.isSet()) {\n      this.selectItem(this.settingsManager.backgroundOpacity.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different character edge.\n */\nexport class CharacterEdgeSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingscharacteredgeselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('raised', i18n.getLocalizer('settings.subtitles.characterEdge.raised'));\n    this.addItem('depressed', i18n.getLocalizer('settings.subtitles.characterEdge.depressed'));\n    this.addItem('uniform', i18n.getLocalizer('settings.subtitles.characterEdge.uniform'));\n    this.addItem('dropshadowed', i18n.getLocalizer('settings.subtitles.characterEdge.dropshadowed'));\n\n    this.settingsManager.characterEdge.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('characteredge-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.characterEdge.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.characterEdge.isSet()) {\n      this.selectItem(this.settingsManager.characterEdge.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.fontColor.isSet() && this.settingsManager.fontOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'fontcolor-' + this.settingsManager.fontColor.value + this.settingsManager.fontOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontColor.value = key;\n    });\n\n    this.settingsManager.fontColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.fontColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.fontOpacity.clear();\n      } else if (!this.settingsManager.fontOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.fontOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.fontOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontColor.isSet()) {\n      this.selectItem(this.settingsManager.fontColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font family.\n */\nexport class FontFamilySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontfamilyselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('monospacedserif', i18n.getLocalizer('settings.subtitles.font.family.monospacedserif'));\n    this.addItem('proportionalserif', i18n.getLocalizer('settings.subtitles.font.family.proportionalserif'));\n    this.addItem('monospacedsansserif', i18n.getLocalizer('settings.subtitles.font.family.monospacedsansserif'));\n    this.addItem('proportionalsansserif', i18n.getLocalizer('settings.subtitles.font.family.proportionalserif'));\n    this.addItem('casual', i18n.getLocalizer('settings.subtitles.font.family.casual'));\n    this.addItem('cursive', i18n.getLocalizer('settings.subtitles.font.family.cursive'));\n    this.addItem('smallcapital', i18n.getLocalizer('settings.subtitles.font.family.smallcapital'));\n\n    this.settingsManager.fontFamily.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('fontfamily-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontFamily.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontFamily.isSet()) {\n      this.selectItem(this.settingsManager.fontFamily.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.fontOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.fontColor.clear();\n      } else if (!this.settingsManager.fontColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.fontColor.value = 'white';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.fontOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontOpacity.isSet()) {\n      this.selectItem(this.settingsManager.fontOpacity.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontSizeSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontsizeselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('150', i18n.getLocalizer('percent', { value: 150 }));\n    this.addItem('200', i18n.getLocalizer('percent', { value: 200 }));\n    this.addItem('300', i18n.getLocalizer('percent', { value: 300 }));\n    this.addItem('400', i18n.getLocalizer('percent', { value: 400 }));\n\n    this.settingsManager.fontSize.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('fontsize-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontSize.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontSize.isSet()) {\n      this.selectItem(this.settingsManager.fontSize.value);\n    }\n  }\n}\n","import {SubtitleOverlay} from '../subtitleoverlay';\nimport {ListSelectorConfig} from '../listselector';\nimport {SelectBox} from '../selectbox';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\n\nexport interface SubtitleSettingSelectBoxConfig extends ListSelectorConfig {\n  overlay: SubtitleOverlay;\n  settingsManager: SubtitleSettingsManager;\n}\n\n/**\n * Base class for all subtitles settings select box\n **/\nexport class SubtitleSettingSelectBox extends SelectBox {\n\n  protected settingsManager: SubtitleSettingsManager;\n  protected overlay: SubtitleOverlay;\n  private currentCssClass: string;\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.settingsManager = config.settingsManager;\n    this.overlay = config.overlay;\n  }\n\n  /**\n   * Removes a previously set class and adds the passed in class.\n   * @param cssClass The new class to replace the previous class with or null to just remove the previous class\n   */\n  protected toggleOverlayClass(cssClass: string): void {\n    // Remove previous class if existing\n    if (this.currentCssClass) {\n      this.overlay.getDomElement().removeClass(this.currentCssClass);\n      this.currentCssClass = null;\n    }\n\n    // Add new class if specified. If the new class is null, we don't add anything.\n    if (cssClass) {\n      this.currentCssClass = this.prefixCss(cssClass);\n      this.overlay.getDomElement().addClass(this.currentCssClass);\n    }\n  }\n}\n","import {LabelConfig} from '../label';\nimport {Container, ContainerConfig} from '../container';\nimport {DOM} from '../../dom';\nimport {SettingsPanelPageOpenButton} from '../settingspanelpageopenbutton';\nimport { LocalizableText, i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsLabelConfig extends LabelConfig {\n  opener: SettingsPanelPageOpenButton;\n}\n\nexport class SubtitleSettingsLabel extends Container<ContainerConfig> {\n\n  private opener: SettingsPanelPageOpenButton;\n\n  private text: LocalizableText;\n\n  private for: string;\n\n  constructor(config: SubtitleSettingsLabelConfig) {\n    super(config);\n\n    this.opener = config.opener;\n    this.text = config.text;\n    this.for = config.for;\n\n    this.config = this.mergeConfig(<ContainerConfig>config, {\n      cssClass: 'ui-label',\n      components: [\n        this.opener,\n      ],\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let labelElement = new DOM('label', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'for': this.for,\n    }).append(\n      new DOM('span', {}).html(i18n.performLocalization(this.text)),\n      this.opener.getDomElement(),\n    );\n\n    return labelElement;\n  }\n}\n","import {StorageUtils} from '../../storageutils';\nimport {Component, ComponentConfig} from '../component';\nimport {EventDispatcher, Event} from '../../eventdispatcher';\n\ninterface SubtitleSettings {\n  fontColor?: string;\n  fontOpacity?: string;\n  fontFamily?: string;\n  fontSize?: string;\n  characterEdge?: string;\n  backgroundColor?: string;\n  backgroundOpacity?: string;\n  windowColor?: string;\n  windowOpacity?: string;\n}\n\ninterface Properties {\n  [name: string]: SubtitleSettingsProperty<string>;\n}\n\nexport class SubtitleSettingsManager {\n\n  private userSettings: SubtitleSettings;\n  private localStorageKey: string;\n\n  private _properties: Properties = {\n    fontColor: new SubtitleSettingsProperty<string>(this),\n    fontOpacity: new SubtitleSettingsProperty<string>(this),\n    fontFamily: new SubtitleSettingsProperty<string>(this),\n    fontSize: new SubtitleSettingsProperty<string>(this),\n    characterEdge: new SubtitleSettingsProperty<string>(this),\n    backgroundColor: new SubtitleSettingsProperty<string>(this),\n    backgroundOpacity: new SubtitleSettingsProperty<string>(this),\n    windowColor: new SubtitleSettingsProperty<string>(this),\n    windowOpacity: new SubtitleSettingsProperty<string>(this),\n  };\n\n  constructor() {\n    this.userSettings = {};\n    this.localStorageKey = DummyComponent.instance().prefixCss('subtitlesettings');\n\n    for (let propertyName in this._properties) {\n      this._properties[propertyName].onChanged.subscribe((sender, property) => {\n        if (property.isSet()) {\n          (<any>this.userSettings)[propertyName] = property.value;\n        } else {\n          // Delete the property from the settings object if unset to avoid serialization of null values\n          delete (<any>this.userSettings)[propertyName];\n        }\n\n        // Save the settings object when a property has changed\n        this.save();\n      });\n    }\n\n    this.load();\n  }\n\n  public reset(): void {\n    for (let propertyName in this._properties) {\n      this._properties[propertyName].clear();\n    }\n  }\n\n  public get fontColor(): SubtitleSettingsProperty<string> {\n    return this._properties.fontColor;\n  }\n\n  public get fontOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.fontOpacity;\n  }\n\n  public get fontFamily(): SubtitleSettingsProperty<string> {\n    return this._properties.fontFamily;\n  }\n\n  public get fontSize(): SubtitleSettingsProperty<string> {\n    return this._properties.fontSize;\n  }\n\n  public get characterEdge(): SubtitleSettingsProperty<string> {\n    return this._properties.characterEdge;\n  }\n\n  public get backgroundColor(): SubtitleSettingsProperty<string> {\n    return this._properties.backgroundColor;\n  }\n\n  public get backgroundOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.backgroundOpacity;\n  }\n\n  public get windowColor(): SubtitleSettingsProperty<string> {\n    return this._properties.windowColor;\n  }\n\n  public get windowOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.windowOpacity;\n  }\n\n  /**\n   * Saves the settings to local storage.\n   */\n  public save(): void {\n    StorageUtils.setObject(this.localStorageKey, this.userSettings);\n  }\n\n  /**\n   * Loads the settings from local storage\n   */\n  public load(): void {\n    this.userSettings = StorageUtils.getObject<SubtitleSettings>(this.localStorageKey) || {};\n\n    // Apply the loaded settings\n    for (let property in this.userSettings) {\n      this._properties[property].value = (<any>this.userSettings)[property];\n    }\n  }\n}\n\n/**\n * A dummy component whose sole purpose is to expose the {@link #prefixCss} method to the\n * {@link SubtitleSettingsManager}.\n */\nclass DummyComponent extends Component<ComponentConfig> {\n\n  private static _instance: DummyComponent;\n\n  public static instance(): DummyComponent {\n    if (!DummyComponent._instance) {\n      DummyComponent._instance = new DummyComponent();\n    }\n\n    return DummyComponent._instance;\n  }\n\n  public prefixCss(cssClassOrId: string): string {\n    return super.prefixCss(cssClassOrId);\n  }\n}\n\nexport class SubtitleSettingsProperty<T> {\n\n  private _manager: SubtitleSettingsManager;\n  private _onChanged: EventDispatcher<SubtitleSettingsManager, SubtitleSettingsProperty<T>>;\n  private _value: T;\n\n  constructor(manager: SubtitleSettingsManager) {\n    this._manager = manager;\n    this._onChanged = new EventDispatcher<SubtitleSettingsManager, SubtitleSettingsProperty<T>>();\n  }\n\n  public isSet(): boolean {\n    return this._value != null;\n  }\n\n  public clear(): void {\n    this._value = null;\n    this.onChangedEvent(null);\n  }\n\n  public get value(): T {\n    return this._value;\n  }\n\n  public set value(value: T) {\n    if (typeof value === 'string' && value === 'null') {\n      value = null;\n    }\n\n    this._value = value;\n    this.onChangedEvent(value);\n  }\n\n  protected onChangedEvent(value: T) {\n    this._onChanged.dispatch(this._manager, this);\n  }\n\n  public get onChanged(): Event<SubtitleSettingsManager, SubtitleSettingsProperty<T>> {\n    return this._onChanged.getEvent();\n  }\n}","import {SettingsPanelPage} from '../settingspanelpage';\nimport {SettingsPanel} from '../settingspanel';\nimport {SubtitleOverlay} from '../subtitleoverlay';\nimport {ContainerConfig} from '../container';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\nimport {Component, ComponentConfig} from '../component';\nimport {FontSizeSelectBox} from './fontsizeselectbox';\nimport {FontFamilySelectBox} from './fontfamilyselectbox';\nimport {FontColorSelectBox} from './fontcolorselectbox';\nimport {FontOpacitySelectBox} from './fontopacityselectbox';\nimport {CharacterEdgeSelectBox} from './characteredgeselectbox';\nimport {BackgroundColorSelectBox} from './backgroundcolorselectbox';\nimport {BackgroundOpacitySelectBox} from './backgroundopacityselectbox';\nimport {WindowColorSelectBox} from './windowcolorselectbox';\nimport {WindowOpacitySelectBox} from './windowopacityselectbox';\nimport {SubtitleSettingsResetButton} from './subtitlesettingsresetbutton';\nimport {UIInstanceManager} from '../../uimanager';\nimport {SettingsPanelPageBackButton} from '../settingspanelpagebackbutton';\nimport {SettingsPanelItem} from '../settingspanelitem';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsPanelPageConfig extends ContainerConfig {\n  settingsPanel: SettingsPanel;\n  overlay: SubtitleOverlay;\n}\n\nexport class SubtitleSettingsPanelPage extends SettingsPanelPage {\n\n  private readonly overlay: SubtitleOverlay;\n  private readonly settingsPanel: SettingsPanel;\n\n  constructor(config: SubtitleSettingsPanelPageConfig) {\n    super(config);\n\n    this.overlay = config.overlay;\n    this.settingsPanel = config.settingsPanel;\n\n    let manager = new SubtitleSettingsManager();\n\n    this.config = this.mergeConfig(config, {\n      components: <Component<ComponentConfig>[]>[\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.size'), new FontSizeSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.family'), new FontFamilySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.color'), new FontColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.opacity'), new FontOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.characterEdge'), new CharacterEdgeSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.background.color'), new BackgroundColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.background.opacity'), new BackgroundOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.window.color'), new WindowColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.window.opacity'), new WindowOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(new SettingsPanelPageBackButton({\n          container: this.settingsPanel,\n          text: i18n.getLocalizer('back'),\n        }), new SubtitleSettingsResetButton({\n          settingsManager: manager,\n        }), {\n          role: 'menubar',\n        }),\n      ],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onActive.subscribe(() => {\n      this.overlay.enablePreviewSubtitleLabel();\n    });\n\n    this.onInactive.subscribe(() => {\n      this.overlay.removePreviewSubtitleLabel();\n    });\n  }\n}","import {UIInstanceManager} from '../../uimanager';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\nimport {Button, ButtonConfig} from '../button';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsResetButtonConfig extends ButtonConfig {\n  settingsManager: SubtitleSettingsManager;\n}\n\n/**\n * A button that resets all subtitle settings to their defaults.\n */\nexport class SubtitleSettingsResetButton extends Button<ButtonConfig> {\n\n  constructor(config: SubtitleSettingsResetButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitlesettingsresetbutton',\n      text: i18n.getLocalizer('reset'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      (<SubtitleSettingsResetButtonConfig>this.config).settingsManager.reset();\n    });\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background colors.\n */\nexport class WindowColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingswindowcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.windowColor.isSet() && this.settingsManager.windowOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'windowcolor-' + this.settingsManager.windowColor.value + this.settingsManager.windowOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.windowColor.value = key;\n    });\n\n    this.settingsManager.windowColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.windowColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.windowOpacity.clear();\n      } else if (!this.settingsManager.windowOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.windowOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.windowOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.windowColor.isSet()) {\n      this.selectItem(this.settingsManager.windowColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background opacity.\n */\nexport class WindowOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingswindowopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n    this.addItem('0', i18n.getLocalizer('percent', { value: 0 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.windowOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.windowOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.windowColor.clear();\n      } else if (!this.settingsManager.windowColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.windowColor.value = 'black';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.windowOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.windowOpacity.isSet()) {\n      this.selectItem(this.settingsManager.windowOpacity.value);\n    }\n  }\n}\n","import { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\nimport { DOM } from '../dom';\nimport { ComponentConfig } from './component';\nimport { TimelineMarker } from '../uiconfig';\nimport { SeekBarMarker } from './seekbar';\nimport { PlayerUtils } from '../playerutils';\nimport { Timeout } from '../timeout';\n\nexport interface MarkersConfig extends ComponentConfig {\n  /**\n   * Used for seekBar marker snapping range percentage\n   */\n  snappingRange?: number;\n}\n\nexport class TimelineMarkersHandler {\n  private markersContainer: DOM;\n  private timelineMarkers: SeekBarMarker[];\n  private player: PlayerAPI;\n  private uimanager: UIInstanceManager;\n  private pausedTimeshiftUpdater: Timeout;\n  private getSeekBarWidth: () => number;\n  protected config: MarkersConfig;\n\n  constructor(config: MarkersConfig, getSeekBarWidth: () => number, markersContainer: DOM) {\n    this.config = config;\n    this.getSeekBarWidth = getSeekBarWidth;\n    this.markersContainer = markersContainer;\n    this.timelineMarkers = [];\n  }\n\n  public initialize(player: PlayerAPI, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.uimanager = uimanager;\n    this.configureMarkers();\n  }\n\n  private configureMarkers(): void {\n    // Remove markers when unloaded\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, () => this.clearMarkers());\n    this.player.on(this.player.exports.PlayerEvent.AdBreakStarted, () => this.clearMarkers());\n    this.player.on(this.player.exports.PlayerEvent.AdBreakFinished, () => this.updateMarkers());\n    // Update markers when the size of the seekbar changes\n    this.player.on(this.player.exports.PlayerEvent.PlayerResized, () => this.updateMarkersDOM());\n\n    this.player.on(this.player.exports.PlayerEvent.SourceLoaded, () => {\n      if (this.player.isLive()) {\n        // Update marker position as timeshift range changes\n        this.player.on(this.player.exports.PlayerEvent.TimeChanged, () => this.updateMarkers());\n        // Update marker postion when paused as timeshift range changes\n        this.configureLivePausedTimeshiftUpdater(() => this.updateMarkers());\n      }\n    });\n    this.uimanager.getConfig().events.onUpdated.subscribe(() => this.updateMarkers());\n    this.uimanager.onRelease.subscribe(() => this.uimanager.getConfig().events.onUpdated.unsubscribe(() => this.updateMarkers()));\n\n    // Init markers at startup\n    this.updateMarkers();\n  }\n\n  public getMarkerAtPosition(percentage: number): SeekBarMarker | null {\n    const snappingRange = this.config.snappingRange;\n\n    const matchingMarker = this.timelineMarkers.find(marker => {\n      const hasDuration = marker.duration > 0;\n      // Handle interval markers\n      const intervalMarkerMatch =\n        hasDuration &&\n        percentage >= marker.position - snappingRange &&\n        percentage <= marker.position + marker.duration + snappingRange;\n\n      // Handle position markers\n      const positionMarkerMatch =\n        percentage >= marker.position - snappingRange &&\n        percentage <= marker.position + snappingRange;\n\n      return intervalMarkerMatch || positionMarkerMatch;\n    });\n\n    return matchingMarker || null;\n  }\n\n  private clearMarkers(): void {\n    this.timelineMarkers = [];\n    this.markersContainer.empty();\n  }\n\n  private removeMarkerFromConfig(marker: TimelineMarker): void {\n    this.uimanager.getConfig().metadata.markers = this.uimanager.getConfig().metadata.markers.filter(_marker => marker !== _marker);\n  }\n\n  private filterRemovedMarkers(): void {\n    this.timelineMarkers = this.timelineMarkers.filter(seekbarMarker => {\n      const matchingMarker = this.uimanager.getConfig().metadata.markers.find(_marker => seekbarMarker.marker === _marker);\n      if (!matchingMarker) {\n        this.removeMarkerFromDOM(seekbarMarker);\n      }\n      return matchingMarker;\n    });\n  }\n\n  private removeMarkerFromDOM(marker: SeekBarMarker): void {\n    if (marker.element) {\n      marker.element.remove();\n    }\n  }\n\n  private updateMarkers(): void {\n    if (!shouldProcessMarkers(this.player, this.uimanager)) {\n      this.clearMarkers();\n      return;\n    }\n\n    this.filterRemovedMarkers();\n\n    this.uimanager.getConfig().metadata.markers.forEach(marker => {\n      const { markerPosition, markerDuration } = getMarkerPositions(this.player, marker);\n\n      if (shouldRemoveMarker(markerPosition, markerDuration)) {\n        this.removeMarkerFromConfig(marker);\n      } else if (markerPosition <= 100) {\n        const matchingMarker = this.timelineMarkers.find(seekbarMarker => seekbarMarker.marker === marker);\n\n        if (matchingMarker) {\n          matchingMarker.position = markerPosition;\n          matchingMarker.duration = markerDuration;\n\n          this.updateMarkerDOM(matchingMarker);\n        } else {\n          const newMarker: SeekBarMarker = { marker, position: markerPosition, duration: markerDuration };\n          this.timelineMarkers.push(newMarker);\n\n          this.createMarkerDOM(newMarker);\n        }\n      }\n    });\n  }\n\n  private getMarkerCssProperties(marker: SeekBarMarker): { [propertyName: string]: string } {\n    const seekBarWidthPx = this.getSeekBarWidth();\n\n    const positionInPx = (seekBarWidthPx / 100) * (marker.position < 0 ? 0 : marker.position);\n    const cssProperties: { [propertyName: string]: string } = {\n      'transform': `translateX(${positionInPx}px)`,\n    };\n\n    if (marker.duration > 0) {\n      const markerWidthPx = Math.round(seekBarWidthPx / 100 * marker.duration);\n      cssProperties['width'] = `${markerWidthPx}px`;\n    }\n\n    return cssProperties;\n  }\n\n  private updateMarkerDOM(marker: SeekBarMarker): void {\n    marker.element.css(this.getMarkerCssProperties(marker));\n  }\n\n  private createMarkerDOM(marker: SeekBarMarker): void {\n    const markerClasses = ['seekbar-marker'].concat(marker.marker.cssClasses || [])\n      .map(cssClass => this.prefixCss(cssClass));\n\n    const markerElement = new DOM('div', {\n      'class': markerClasses.join(' '),\n      'data-marker-time': String(marker.marker.time),\n      'data-marker-title': String(marker.marker.title),\n    }).css(this.getMarkerCssProperties(marker));\n\n    if (marker.marker.imageUrl) {\n      const removeImage = () => {\n        imageElement.remove();\n      };\n\n      const imageElement = new DOM('img', {\n        'class': this.prefixCss('seekbar-marker-image'),\n        'src': marker.marker.imageUrl,\n      }).on('error', removeImage);\n\n      markerElement.append(imageElement);\n    }\n\n    marker.element = markerElement;\n    this.markersContainer.append(markerElement);\n  }\n\n  private updateMarkersDOM(): void {\n    this.timelineMarkers.forEach(marker => {\n      if (marker.element) {\n        this.updateMarkerDOM(marker);\n      } else {\n        this.createMarkerDOM(marker);\n      }\n    });\n  }\n\n  private configureLivePausedTimeshiftUpdater(\n    handler: () => void,\n  ): void {\n    // Regularly update the marker position while the timeout is active\n    this.pausedTimeshiftUpdater = new Timeout(1000, handler, true);\n\n    this.player.on(this.player.exports.PlayerEvent.Paused, () => {\n      if (this.player.isLive() && this.player.getMaxTimeShift() < 0) {\n        this.pausedTimeshiftUpdater.start();\n      }\n    });\n\n    // Stop updater when playback continues (no matter if the updater was started before)\n    this.player.on(this.player.exports.PlayerEvent.Play, () => this.pausedTimeshiftUpdater.clear());\n    this.player.on(this.player.exports.PlayerEvent.Destroy, () => this.pausedTimeshiftUpdater.clear());\n  }\n\n  protected prefixCss(cssClassOrId: string): string {\n    return this.config.cssPrefix + '-' + cssClassOrId;\n  }\n}\n\nfunction getMarkerPositions(player: PlayerAPI, marker: TimelineMarker) {\n  const duration = getDuration(player);\n\n  const markerPosition = 100 / duration * getMarkerTime(marker, player, duration); // convert absolute time to percentage\n  let markerDuration = 100 / duration * marker.duration;\n\n  if (markerPosition < 0 && !isNaN(markerDuration)) {\n    // Shrink marker duration for on live streams as they reach end\n    markerDuration = markerDuration + markerPosition;\n  }\n\n  if (100 - markerPosition < markerDuration) {\n    // Shrink marker if it overflows timeline\n    markerDuration = 100 - markerPosition;\n  }\n\n  return { markerDuration, markerPosition };\n}\n\nfunction getMarkerTime(marker: TimelineMarker, player: PlayerAPI, duration: number): number {\n  if (!player.isLive()) {\n    return marker.time;\n  }\n\n  return duration - (PlayerUtils.getSeekableRangeRespectingLive(player).end - marker.time);\n}\n\nfunction getDuration(player: PlayerAPI): number {\n  if (!player.isLive()) {\n    return player.getDuration();\n  }\n  const { start, end } = PlayerUtils.getSeekableRangeRespectingLive(player);\n\n  return end - start;\n}\n\nfunction shouldRemoveMarker(markerPosition: number, markerDuration: number): boolean {\n  return (markerDuration < 0 || isNaN(markerDuration)) && markerPosition < 0;\n}\n\nfunction shouldProcessMarkers(player: PlayerAPI, uimanager: UIInstanceManager): boolean {\n  // Don't generate timeline markers if we don't yet have a duration\n  // The duration check is for buggy platforms where the duration is not available instantly (Chrome on Android 4.3)\n  const validToProcess = player.getDuration() !== Infinity || player.isLive();\n  const hasMarkers = uimanager.getConfig().metadata.markers.length > 0;\n\n  return validToProcess && hasMarkers;\n}\n","import {Container, ContainerConfig} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {MetadataLabel, MetadataLabelContent} from './metadatalabel';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for a {@link TitleBar}.\n */\nexport interface TitleBarConfig extends ContainerConfig {\n  /**\n   * Specifies if the title bar should stay hidden when no metadata label contains any text. Does not make a lot\n   * of sense if the title bar contains other components than just MetadataLabels (like in the default configuration).\n   * Default: false\n   */\n  keepHiddenWithoutMetadata?: boolean;\n}\n\n/**\n * Displays a title bar containing a label with the title of the video.\n */\nexport class TitleBar extends Container<TitleBarConfig> {\n\n  constructor(config: TitleBarConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-titlebar',\n      hidden: true,\n      components: [\n        new MetadataLabel({ content: MetadataLabelContent.Title }),\n        new MetadataLabel({ content: MetadataLabelContent.Description }),\n      ],\n      keepHiddenWithoutMetadata: false,\n    }, <TitleBarConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let shouldBeShown = !this.isHidden();\n    let hasMetadataText = true; // Flag to track if any metadata label contains text\n\n    let checkMetadataTextAndUpdateVisibility = () => {\n      hasMetadataText = false;\n\n      // Iterate through metadata labels and check if at least one of them contains text\n      for (let component of this.getComponents()) {\n        if (component instanceof MetadataLabel) {\n          if (!component.isEmpty()) {\n            hasMetadataText = true;\n            break;\n          }\n        }\n      }\n\n      if (this.isShown()) {\n        // Hide a visible titlebar if it does not contain any text and the hidden flag is set\n        if (config.keepHiddenWithoutMetadata && !hasMetadataText) {\n          this.hide();\n        }\n      } else if (shouldBeShown) {\n        // Show a hidden titlebar if it should actually be shown\n        this.show();\n      }\n    };\n\n    // Listen to text change events to update the hasMetadataText flag when the metadata dynamically changes\n    for (let component of this.getComponents()) {\n      if (component instanceof MetadataLabel) {\n        component.onTextChanged.subscribe(checkMetadataTextAndUpdateVisibility);\n      }\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      shouldBeShown = true;\n      if (!(config.keepHiddenWithoutMetadata && !hasMetadataText)) {\n        this.show();\n      }\n    });\n    uimanager.onControlsHide.subscribe(() => {\n      shouldBeShown = false;\n      this.hide();\n    });\n\n    // init\n    checkMetadataTextAndUpdateVisibility();\n  }\n}","import {Button, ButtonConfig} from './button';\nimport {NoArgs, EventDispatcher, Event} from '../eventdispatcher';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { LocalizableText } from '../localization/i18n';\n\n/**\n * Configuration interface for a toggle button component.\n */\nexport interface ToggleButtonConfig extends ButtonConfig {\n  /**\n   * The CSS class that marks the on-state of the button.\n   */\n  onClass?: string;\n  /**\n   * The CSS class that marks the off-state of the button.\n   */\n  offClass?: string;\n  /**\n   * WCAG20 standard for defining info about the component (usually the name)\n   *\n   * It is recommended to use `onAriaLabel` and `offAriaLabel` for toggle buttons\n   * as the component can then update them as the button is used.\n   *\n   * If both `ariaLabel` and `onAriaLabel` are set, `onAriaLabel` is used.\n   */\n  ariaLabel?: LocalizableText;\n  /**\n   * The aria label that marks the on-state of the button.\n   */\n  onAriaLabel?: LocalizableText;\n  /**\n   * The aria label that marks the off-state of the button.\n   */\n  offAriaLabel?: LocalizableText;\n  /**\n   * The text as string or as localize callback on the button.\n   */\n  text?: LocalizableText;\n}\n\n/**\n * A button that can be toggled between 'on' and 'off' states.\n */\nexport class ToggleButton<Config extends ToggleButtonConfig> extends Button<Config> {\n\n  private onState: boolean;\n\n  private toggleButtonEvents = {\n    onToggle: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n    onToggleOn: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n    onToggleOff: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n  };\n\n  constructor(config: Config) {\n    super(config);\n\n    const defaultConfig: ToggleButtonConfig = {\n      cssClass: 'ui-togglebutton',\n      onClass: 'on',\n      offClass: 'off',\n    };\n\n    if (config.onAriaLabel) {\n      config.ariaLabel = config.onAriaLabel;\n    }\n\n    this.config = this.mergeConfig(config, defaultConfig as Config, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n    const config = this.getConfig();\n    this.getDomElement().addClass(this.prefixCss(config.offClass));\n  }\n\n  /**\n   * Toggles the button to the 'on' state.\n   */\n  on() {\n    if (this.isOff()) {\n      const config = this.getConfig();\n\n      this.onState = true;\n      this.getDomElement().removeClass(this.prefixCss(config.offClass));\n      this.getDomElement().addClass(this.prefixCss(config.onClass));\n\n      this.onToggleEvent();\n      this.onToggleOnEvent();\n\n      this.setAriaAttr('pressed', 'true');\n\n      if (this.config.onAriaLabel) {\n        this.setAriaLabel(this.config.onAriaLabel);\n      }\n    }\n  }\n\n  /**\n   * Toggles the button to the 'off' state.\n   */\n  off() {\n    if (this.isOn()) {\n      const config = this.getConfig();\n\n      this.onState = false;\n      this.getDomElement().removeClass(this.prefixCss(config.onClass));\n      this.getDomElement().addClass(this.prefixCss(config.offClass));\n\n      this.onToggleEvent();\n      this.onToggleOffEvent();\n\n      this.setAriaAttr('pressed', 'false');\n\n      if (this.config.offAriaLabel) {\n        this.setAriaLabel(this.config.offAriaLabel);\n      }\n    }\n  }\n\n  /**\n   * Toggle the button 'on' if it is 'off', or 'off' if it is 'on'.\n   */\n  toggle() {\n    if (this.isOn()) {\n      this.off();\n    } else {\n      this.on();\n    }\n  }\n\n  /**\n   * Checks if the toggle button is in the 'on' state.\n   * @returns {boolean} true if button is 'on', false if 'off'\n   */\n  isOn(): boolean {\n    return this.onState;\n  }\n\n  /**\n   * Checks if the toggle button is in the 'off' state.\n   * @returns {boolean} true if button is 'off', false if 'on'\n   */\n  isOff(): boolean {\n    return !this.isOn();\n  }\n\n  protected onClickEvent() {\n    super.onClickEvent();\n\n    // Fire the toggle event together with the click event\n    // (they are technically the same, only the semantics are different)\n    this.onToggleEvent();\n  }\n\n  protected onToggleEvent() {\n    this.toggleButtonEvents.onToggle.dispatch(this);\n  }\n\n  protected onToggleOnEvent() {\n    this.toggleButtonEvents.onToggleOn.dispatch(this);\n  }\n\n  protected onToggleOffEvent() {\n    this.toggleButtonEvents.onToggleOff.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggle(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggle.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled 'on'.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggleOn(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggleOn.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled 'off'.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggleOff(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggleOff.getEvent();\n  }\n}","import {Component, ComponentConfig} from './component';\nimport {DOM} from '../dom';\n\n/**\n * Animated analog TV static noise.\n */\nexport class TvNoiseCanvas extends Component<ComponentConfig> {\n\n  private canvas: DOM;\n\n  private canvasElement: HTMLCanvasElement;\n  private canvasContext: CanvasRenderingContext2D;\n  private canvasWidth = 160;\n  private canvasHeight = 90;\n  private interferenceHeight = 50;\n  private lastFrameUpdate: number = 0;\n  private frameInterval: number = 60;\n  private useAnimationFrame: boolean = !!window.requestAnimationFrame;\n  private noiseAnimationWindowPos: number;\n  private frameUpdateHandlerId: number;\n\n  constructor(config: ComponentConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-tvnoisecanvas',\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    return this.canvas = new DOM('canvas', { 'class': this.getCssClasses() });\n  }\n\n  start(): void {\n    this.canvasElement = <HTMLCanvasElement>this.canvas.get(0);\n    this.canvasContext = this.canvasElement.getContext('2d');\n    this.noiseAnimationWindowPos = -this.canvasHeight;\n    this.lastFrameUpdate = 0;\n\n    this.canvasElement.width = this.canvasWidth;\n    this.canvasElement.height = this.canvasHeight;\n\n    this.renderFrame();\n  }\n\n  stop(): void {\n    if (this.useAnimationFrame) {\n      cancelAnimationFrame(this.frameUpdateHandlerId);\n    } else {\n      clearTimeout(this.frameUpdateHandlerId);\n    }\n  }\n\n  private renderFrame(): void {\n    // This code has been copied from the player controls.js and simplified\n\n    if (this.lastFrameUpdate + this.frameInterval > new Date().getTime()) {\n      // It's too early to render the next frame\n      this.scheduleNextRender();\n      return;\n    }\n\n    let currentPixelOffset;\n    let canvasWidth = this.canvasWidth;\n    let canvasHeight = this.canvasHeight;\n\n    // Create texture\n    let noiseImage = this.canvasContext.createImageData(canvasWidth, canvasHeight);\n\n    // Fill texture with noise\n    for (let y = 0; y < canvasHeight; y++) {\n      for (let x = 0; x < canvasWidth; x++) {\n        currentPixelOffset = (canvasWidth * y * 4) + x * 4;\n        noiseImage.data[currentPixelOffset] = Math.random() * 255;\n        if (y < this.noiseAnimationWindowPos || y > this.noiseAnimationWindowPos + this.interferenceHeight) {\n          noiseImage.data[currentPixelOffset] *= 0.85;\n        }\n        noiseImage.data[currentPixelOffset + 1] = noiseImage.data[currentPixelOffset];\n        noiseImage.data[currentPixelOffset + 2] = noiseImage.data[currentPixelOffset];\n        noiseImage.data[currentPixelOffset + 3] = 50;\n      }\n    }\n\n    // Put texture onto canvas\n    this.canvasContext.putImageData(noiseImage, 0, 0);\n\n    this.lastFrameUpdate = new Date().getTime();\n    this.noiseAnimationWindowPos += 7;\n    if (this.noiseAnimationWindowPos > canvasHeight) {\n      this.noiseAnimationWindowPos = -canvasHeight;\n    }\n\n    this.scheduleNextRender();\n  }\n\n  private scheduleNextRender(): void {\n    if (this.useAnimationFrame) {\n      this.frameUpdateHandlerId = window.requestAnimationFrame(this.renderFrame.bind(this));\n    } else {\n      this.frameUpdateHandlerId = window.setTimeout(this.renderFrame.bind(this), this.frameInterval);\n    }\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {DOM} from '../dom';\nimport {Timeout} from '../timeout';\nimport {PlayerUtils} from '../playerutils';\nimport { CancelEventArgs, EventDispatcher } from '../eventdispatcher';\nimport { PlayerAPI, PlayerResizedEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link UIContainer}.\n */\nexport interface UIContainerConfig extends ContainerConfig {\n  /**\n   * The delay in milliseconds after which the control bar will be hidden when there is no user interaction.\n   * Set to -1 for the UI to be always shown.\n   * Default: 5 seconds (5000)\n   */\n  hideDelay?: number;\n  /**\n   * An array of player states in which the UI will not be hidden, no matter what the {@link hideDelay} is.\n   */\n  hidePlayerStateExceptions?: PlayerUtils.PlayerState[];\n  /**\n   * The HTML element on which user interaction events (e.g. mouse and touch events) will be tracked to detect\n   * interaction with the UI. These basically trigger showing and hiding of the UI.\n   * Default: the UI container itself\n   */\n  userInteractionEventSource?: HTMLElement;\n}\n\n/**\n * The base container that contains all of the UI. The UIContainer is passed to the {@link UIManager} to build and\n * setup the UI.\n */\nexport class UIContainer extends Container<UIContainerConfig> {\n\n  private static readonly STATE_PREFIX = 'player-state-';\n\n  private static readonly FULLSCREEN = 'fullscreen';\n  private static readonly BUFFERING = 'buffering';\n  private static readonly REMOTE_CONTROL = 'remote-control';\n  private static readonly CONTROLS_SHOWN = 'controls-shown';\n  private static readonly CONTROLS_HIDDEN = 'controls-hidden';\n\n  private uiHideTimeout: Timeout;\n  private playerStateChange: EventDispatcher<UIContainer, PlayerUtils.PlayerState>;\n\n  private userInteractionEventSource: DOM;\n  private userInteractionEvents: { name: string, handler: EventListenerOrEventListenerObject }[];\n\n  public hideUi: () => void = () => {};\n  public showUi: () => void = () => {};\n\n  constructor(config: UIContainerConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <UIContainerConfig>{\n      cssClass: 'ui-uicontainer',\n      role: 'region',\n      ariaLabel: i18n.getLocalizer('player'),\n      hideDelay: 5000,\n    }, this.config);\n\n    this.playerStateChange = new EventDispatcher<UIContainer, PlayerUtils.PlayerState>();\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    const config = this.getConfig();\n\n    if (config.userInteractionEventSource) {\n      this.userInteractionEventSource = new DOM(config.userInteractionEventSource);\n    } else {\n      this.userInteractionEventSource = this.getDomElement();\n    }\n\n    super.configure(player, uimanager);\n\n    this.configureUIShowHide(player, uimanager);\n    this.configurePlayerStates(player, uimanager);\n  }\n\n  private configureUIShowHide(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    let config = this.getConfig();\n\n    if (config.hideDelay === -1) {\n      uimanager.onConfigured.subscribe(() => uimanager.onControlsShow.dispatch(this));\n      return;\n    }\n\n    let isUiShown = false;\n    let isSeeking = false;\n    let isFirstTouch = true;\n    let playerState: PlayerUtils.PlayerState;\n\n    const hidingPrevented = (): boolean => {\n      return config.hidePlayerStateExceptions && config.hidePlayerStateExceptions.indexOf(playerState) > -1;\n    };\n\n    this.showUi = () => {\n      if (!isUiShown) {\n        // Let subscribers know that they should reveal themselves\n        uimanager.onControlsShow.dispatch(this);\n        isUiShown = true;\n      }\n      // Don't trigger timeout while seeking (it will be triggered once the seek is finished) or casting\n      if (!isSeeking && !player.isCasting() && !hidingPrevented()) {\n        this.uiHideTimeout.start();\n      }\n    };\n\n    this.hideUi = () => {\n      // Hide the UI only if it is shown, and if not casting\n      if (isUiShown && !player.isCasting()) {\n        // Issue a preview event to check if we are good to hide the controls\n        let previewHideEventArgs = <CancelEventArgs>{};\n        uimanager.onPreviewControlsHide.dispatch(this, previewHideEventArgs);\n\n        if (!previewHideEventArgs.cancel) {\n          // If the preview wasn't canceled, let subscribers know that they should now hide themselves\n          uimanager.onControlsHide.dispatch(this);\n          isUiShown = false;\n        } else {\n          // If the hide preview was canceled, continue to show UI\n          this.showUi();\n        }\n      }\n    };\n\n    // Timeout to defer UI hiding by the configured delay time\n    this.uiHideTimeout = new Timeout(config.hideDelay, this.hideUi);\n\n    this.userInteractionEvents = [{\n      // On touch displays, the first touch reveals the UI\n      name: 'touchend',\n      handler: (e) => {\n        if (!isUiShown) {\n          // Only if the UI is hidden, we prevent other actions (except for the first touch) and reveal the UI\n          // instead. The first touch is not prevented to let other listeners receive the event and trigger an\n          // initial action, e.g. the huge playback button can directly start playback instead of requiring a double\n          // tap which 1. reveals the UI and 2. starts playback.\n          if (isFirstTouch && !player.isPlaying()) {\n            isFirstTouch = false;\n          } else {\n            e.preventDefault();\n          }\n          this.showUi();\n        }\n      },\n    }, {\n      // When the mouse enters, we show the UI\n      name: 'mouseenter',\n      handler: () => {\n        this.showUi();\n      },\n    }, {\n      // When the mouse moves within, we show the UI\n      name: 'mousemove',\n      handler: () => {\n        this.showUi();\n      },\n    }, {\n      name: 'focusin',\n      handler: () => {\n        this.showUi();\n      },\n    }, {\n      name: 'keydown',\n      handler: () => {\n        this.showUi();\n      },\n    }, {\n      // When the mouse leaves, we can prepare to hide the UI, except a seek is going on\n      name: 'mouseleave',\n      handler: () => {\n        // When a seek is going on, the seek scrub pointer may exit the UI area while still seeking, and we do not\n        // hide the UI in such cases\n        if (!isSeeking && !hidingPrevented()) {\n          this.uiHideTimeout.start();\n        }\n      },\n    }];\n\n    this.userInteractionEvents.forEach((event) => this.userInteractionEventSource.on(event.name, event.handler));\n\n    uimanager.onSeek.subscribe(() => {\n      this.uiHideTimeout.clear(); // Don't hide UI while a seek is in progress\n      isSeeking = true;\n    });\n    uimanager.onSeeked.subscribe(() => {\n      isSeeking = false;\n      if (!hidingPrevented()) {\n        this.uiHideTimeout.start(); // Re-enable UI hide timeout after a seek\n      }\n    });\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      this.showUi(); // Show UI when a Cast session has started (UI will then stay permanently on during the session)\n    });\n    this.playerStateChange.subscribe((_, state) => {\n      playerState = state;\n      if (hidingPrevented()) {\n        // Entering a player state that prevents hiding and forces the controls to be shown\n        this.uiHideTimeout.clear();\n        this.showUi();\n      } else {\n        // Entering a player state that allows hiding\n        this.uiHideTimeout.start();\n      }\n    });\n  }\n\n  private configurePlayerStates(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    let container = this.getDomElement();\n\n    // Convert player states into CSS class names\n    let stateClassNames = <any>[];\n    for (let state in PlayerUtils.PlayerState) {\n      if (isNaN(Number(state))) {\n        let enumName = PlayerUtils.PlayerState[<any>PlayerUtils.PlayerState[state]];\n        stateClassNames[PlayerUtils.PlayerState[state]] =\n          this.prefixCss(UIContainer.STATE_PREFIX + enumName.toLowerCase());\n      }\n    }\n\n    let removeStates = () => {\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Idle]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Prepared]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Playing]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Paused]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Finished]);\n    };\n\n    const updateState = (state: PlayerUtils.PlayerState) => {\n      removeStates();\n      container.addClass(stateClassNames[state]);\n      this.playerStateChange.dispatch(this, state);\n    };\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, () => {\n      updateState(PlayerUtils.PlayerState.Prepared);\n    });\n    player.on(player.exports.PlayerEvent.Play, () => {\n      updateState(PlayerUtils.PlayerState.Playing);\n    });\n    player.on(player.exports.PlayerEvent.Playing, () => {\n      updateState(PlayerUtils.PlayerState.Playing);\n    });\n    player.on(player.exports.PlayerEvent.Paused, () => {\n      updateState(PlayerUtils.PlayerState.Paused);\n    });\n    player.on(player.exports.PlayerEvent.PlaybackFinished, () => {\n      updateState(PlayerUtils.PlayerState.Finished);\n    });\n    player.on(player.exports.PlayerEvent.SourceUnloaded, () => {\n      updateState(PlayerUtils.PlayerState.Idle);\n    });\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      updateState(PlayerUtils.getState(player));\n    });\n\n    // Fullscreen marker class\n    player.on(player.exports.PlayerEvent.ViewModeChanged, () => {\n      if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n        container.addClass(this.prefixCss(UIContainer.FULLSCREEN));\n      } else {\n        container.removeClass(this.prefixCss(UIContainer.FULLSCREEN));\n      }\n    });\n    // Init fullscreen state\n    if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n      container.addClass(this.prefixCss(UIContainer.FULLSCREEN));\n    }\n\n    // Buffering marker class\n    player.on(player.exports.PlayerEvent.StallStarted, () => {\n      container.addClass(this.prefixCss(UIContainer.BUFFERING));\n    });\n    player.on(player.exports.PlayerEvent.StallEnded, () => {\n      container.removeClass(this.prefixCss(UIContainer.BUFFERING));\n    });\n    // Init buffering state\n    if (player.isStalled()) {\n      container.addClass(this.prefixCss(UIContainer.BUFFERING));\n    }\n\n    // RemoteControl marker class\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      container.addClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, () => {\n      container.removeClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    });\n    // Init RemoteControl state\n    if (player.isCasting()) {\n      container.addClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    }\n\n    // Controls visibility marker class\n    uimanager.onControlsShow.subscribe(() => {\n      container.removeClass(this.prefixCss(UIContainer.CONTROLS_HIDDEN));\n      container.addClass(this.prefixCss(UIContainer.CONTROLS_SHOWN));\n    });\n    uimanager.onControlsHide.subscribe(() => {\n      container.removeClass(this.prefixCss(UIContainer.CONTROLS_SHOWN));\n      container.addClass(this.prefixCss(UIContainer.CONTROLS_HIDDEN));\n    });\n\n    // Layout size classes\n    let updateLayoutSizeClasses = (width: number, height: number) => {\n      container.removeClass(this.prefixCss('layout-max-width-400'));\n      container.removeClass(this.prefixCss('layout-max-width-600'));\n      container.removeClass(this.prefixCss('layout-max-width-800'));\n      container.removeClass(this.prefixCss('layout-max-width-1200'));\n\n      if (width <= 400) {\n        container.addClass(this.prefixCss('layout-max-width-400'));\n      } else if (width <= 600) {\n        container.addClass(this.prefixCss('layout-max-width-600'));\n      } else if (width <= 800) {\n        container.addClass(this.prefixCss('layout-max-width-800'));\n      } else if (width <= 1200) {\n        container.addClass(this.prefixCss('layout-max-width-1200'));\n      }\n    };\n    player.on(player.exports.PlayerEvent.PlayerResized, (e: PlayerResizedEvent) => {\n      // Convert strings (with \"px\" suffix) to ints\n      let width = Math.round(Number(e.width.substring(0, e.width.length - 2)));\n      let height = Math.round(Number(e.height.substring(0, e.height.length - 2)));\n\n      updateLayoutSizeClasses(width, height);\n    });\n    // Init layout state\n    updateLayoutSizeClasses(new DOM(player.getContainer()).width(), new DOM(player.getContainer()).height());\n  }\n\n  release(): void {\n    // Explicitly unsubscribe user interaction event handlers because they could be attached to an external element\n    // that isn't owned by the UI and therefore not removed on release.\n    if (this.userInteractionEvents) {\n      this.userInteractionEvents.forEach((event) => this.userInteractionEventSource.off(event.name, event.handler));\n    }\n\n    super.release();\n\n    if (this.uiHideTimeout) {\n      this.uiHideTimeout.clear();\n    }\n  }\n\n  protected toDomElement(): DOM {\n    let container = super.toDomElement();\n\n    // Detect flexbox support (not supported in IE9)\n    if (document && typeof document.createElement('p').style.flex !== 'undefined') {\n      container.addClass(this.prefixCss('flexbox'));\n    } else {\n      container.addClass(this.prefixCss('no-flexbox'));\n    }\n\n    return container;\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between 'auto' and the available video qualities.\n */\nexport class VideoQualitySelectBox extends SelectBox {\n\n  private hasAuto: boolean;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-videoqualityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let selectCurrentVideoQuality = () => {\n      this.selectItem(player.getVideoQuality().id);\n    };\n\n    let updateVideoQualities = () => {\n      let videoQualities = player.getAvailableVideoQualities();\n\n      this.clearItems();\n\n      // Progressive streams do not support automatic quality selection\n      this.hasAuto = player.getStreamType() !== 'progressive';\n\n      if (this.hasAuto) {\n        // Add entry for automatic quality switching (default setting)\n        this.addItem('auto', i18n.getLocalizer('auto'));\n      }\n\n      // Add video qualities\n      for (let videoQuality of videoQualities) {\n        this.addItem(videoQuality.id, videoQuality.label);\n      }\n\n      // Select initial quality\n      selectCurrentVideoQuality();\n    };\n\n    this.onItemSelected.subscribe((sender: VideoQualitySelectBox, value: string) => {\n      player.setVideoQuality(value);\n    });\n\n    // Update qualities when source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, updateVideoQualities);\n    // Update qualities when the period within a source changes\n    player.on(player.exports.PlayerEvent.PeriodSwitched, updateVideoQualities);\n    // Update quality selection when quality is changed (from outside)\n    player.on(player.exports.PlayerEvent.VideoQualityChanged, selectCurrentVideoQuality);\n\n    if ((player.exports.PlayerEvent as any).VideoQualityAdded) {\n      // Update qualities when their availability changed\n      // TODO: remove any cast after next player release\n      player.on((player.exports.PlayerEvent as any).VideoQualityAdded, updateVideoQualities);\n      player.on((player.exports.PlayerEvent as any).VideoQualityRemoved, updateVideoQualities);\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(updateVideoQualities);\n  }\n\n  /**\n   * Returns true if the select box contains an 'auto' item for automatic quality selection mode.\n   * @return {boolean}\n   */\n  hasAutoItem(): boolean {\n    return this.hasAuto;\n  }\n}","import {Container, ContainerConfig} from './container';\nimport {VolumeSlider} from './volumeslider';\nimport {VolumeToggleButton} from './volumetogglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for a {@link VolumeControlButton}.\n */\nexport interface VolumeControlButtonConfig extends ContainerConfig {\n  /**\n   * The delay after which the volume slider will be hidden when there is no user interaction.\n   * Care must be taken that the delay is long enough so users can reach the slider from the toggle button, e.g. by\n   * mouse movement. If the delay is too short, the sliders disappears before the mouse pointer has reached it and\n   * the user is not able to use it.\n   * Default: 500ms\n   */\n  hideDelay?: number;\n  /**\n   * Specifies if the volume slider should be vertically or horizontally aligned.\n   * Default: true\n   */\n  vertical?: boolean;\n}\n\n/**\n * A composite volume control that consists of and internally manages a volume control button that can be used\n * for muting, and a (depending on the CSS style, e.g. slide-out) volume control bar.\n */\nexport class VolumeControlButton extends Container<VolumeControlButtonConfig> {\n\n  private volumeToggleButton: VolumeToggleButton;\n  private volumeSlider: VolumeSlider;\n\n  private volumeSliderHideTimeout: Timeout;\n\n  constructor(config: VolumeControlButtonConfig = {}) {\n    super(config);\n\n    this.volumeToggleButton = new VolumeToggleButton();\n    this.volumeSlider = new VolumeSlider({\n      vertical: config.vertical != null ? config.vertical : true,\n      hidden: true,\n    });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-volumecontrolbutton',\n      components: [this.volumeToggleButton, this.volumeSlider],\n      hideDelay: 500,\n    }, <VolumeControlButtonConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let volumeToggleButton = this.getVolumeToggleButton();\n    let volumeSlider = this.getVolumeSlider();\n\n    this.volumeSliderHideTimeout = new Timeout(this.getConfig().hideDelay, () => {\n      volumeSlider.hide();\n    });\n\n    /*\n     * Volume Slider visibility handling\n     *\n     * The volume slider shall be visible while the user hovers the mute toggle button, while the user hovers the\n     * volume slider, and while the user slides the volume slider. If none of these situations are true, the slider\n     * shall disappear.\n     */\n    let volumeSliderHovered = false;\n    volumeToggleButton.getDomElement().on('mouseenter', () => {\n      // Show volume slider when mouse enters the button area\n      if (volumeSlider.isHidden()) {\n        volumeSlider.show();\n      }\n      // Avoid hiding of the slider when button is hovered\n      this.volumeSliderHideTimeout.clear();\n    });\n    volumeToggleButton.getDomElement().on('mouseleave', () => {\n      // Hide slider delayed when button is left\n      this.volumeSliderHideTimeout.reset();\n    });\n    volumeSlider.getDomElement().on('mouseenter', () => {\n      // When the slider is entered, cancel the hide timeout activated by leaving the button\n      this.volumeSliderHideTimeout.clear();\n      volumeSliderHovered = true;\n    });\n    volumeSlider.getDomElement().on('mouseleave', () => {\n      // When mouse leaves the slider, only hide it if there is no slide operation in progress\n      if (volumeSlider.isSeeking()) {\n        this.volumeSliderHideTimeout.clear();\n      } else {\n        this.volumeSliderHideTimeout.reset();\n      }\n      volumeSliderHovered = false;\n    });\n    volumeSlider.onSeeked.subscribe(() => {\n      // When a slide operation is done and the slider not hovered (mouse outside slider), hide slider delayed\n      if (!volumeSliderHovered) {\n        this.volumeSliderHideTimeout.reset();\n      }\n    });\n  }\n\n  release(): void {\n    super.release();\n    this.volumeSliderHideTimeout.clear();\n  }\n\n  /**\n   * Provides access to the internally managed volume toggle button.\n   * @returns {VolumeToggleButton}\n   */\n  getVolumeToggleButton(): VolumeToggleButton {\n    return this.volumeToggleButton;\n  }\n\n  /**\n   * Provides access to the internally managed volume silder.\n   * @returns {VolumeSlider}\n   */\n  getVolumeSlider(): VolumeSlider {\n    return this.volumeSlider;\n  }\n}","import { SeekBar, SeekBarConfig, SeekPreviewEventArgs } from './seekbar';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { VolumeTransition } from '../volumecontroller';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link VolumeSlider} component.\n */\nexport interface VolumeSliderConfig extends SeekBarConfig {\n  /**\n   * Specifies if the volume slider should be automatically hidden when volume control is prohibited by the\n   * browser or platform. This currently only applies to iOS.\n   * Default: true\n   */\n  hideIfVolumeControlProhibited?: boolean;\n}\n\n/**\n * A simple volume slider component to adjust the player's volume setting.\n */\nexport class VolumeSlider extends SeekBar {\n  private volumeTransition: VolumeTransition;\n\n  constructor(config: VolumeSliderConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <VolumeSliderConfig>{\n      cssClass: 'ui-volumeslider',\n      hideIfVolumeControlProhibited: true,\n      ariaLabel: i18n.getLocalizer('settings.audio.volume'),\n      tabIndex: 0,\n    }, this.config);\n  }\n\n  private setVolumeAriaSliderValues(value: number) {\n    this.getDomElement().attr('aria-valuenow', Math.ceil(value).toString());\n    this.getDomElement().attr('aria-valuetext', `${i18n.performLocalization(i18n.getLocalizer('seekBar.value'))}: ${Math.ceil(value)}`);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager, false);\n\n    this.setAriaSliderMinMax('0', '100');\n\n    let config = <VolumeSliderConfig>this.getConfig();\n\n    const volumeController = uimanager.getConfig().volumeController;\n\n    if (config.hideIfVolumeControlProhibited && !this.detectVolumeControlAvailability()) {\n      this.hide();\n\n      // We can just return from here, because the user will never interact with the control and any configured\n      // functionality would only eat resources for no reason.\n      return;\n    }\n\n    volumeController.onChanged.subscribe((_, args) => {\n      if (args.muted) {\n        this.setVolumeAriaSliderValues(0);\n        this.setPlaybackPosition(0);\n      } else {\n        this.setPlaybackPosition(args.volume);\n        this.setVolumeAriaSliderValues(args.volume);\n      }\n    });\n\n    this.onSeek.subscribe(() => {\n      this.volumeTransition = volumeController.startTransition();\n    });\n\n    this.onSeekPreview.subscribeRateLimited(this.updateVolumeWhileScrubbing, 50);\n    this.onSeeked.subscribe((sender, percentage) => {\n      if (this.volumeTransition) {\n        this.volumeTransition.finish(percentage);\n      }\n    });\n\n    // Update the volume slider marker when the player resized, a source is loaded,\n    // or the UI is configured. Check the seekbar for a detailed description.\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      this.refreshPlaybackPosition();\n    });\n    uimanager.onConfigured.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    uimanager.onComponentShow.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n    uimanager.onComponentHide.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    // Init volume bar\n    volumeController.onChangedEvent();\n  }\n\n  private updateVolumeWhileScrubbing = (sender: VolumeSlider, args: SeekPreviewEventArgs) => {\n    if (args.scrubbing && this.volumeTransition) {\n      this.volumeTransition.update(args.position);\n    }\n  };\n\n  private detectVolumeControlAvailability(): boolean {\n    /*\n     * \"On iOS devices, the audio level is always under the user’s physical control. The volume property is not\n     * settable in JavaScript. Reading the volume property always returns 1.\"\n     * https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html\n     */\n    // as muted autoplay gets paused as soon as we unmute it, we may not touch the volume of the actual player so we\n    // probe a dummy audio element\n    const dummyVideoElement = document.createElement('video');\n    // try setting the volume to 0.7 and if it's still 1 we are on a volume control restricted device\n    dummyVideoElement.volume = 0.7;\n    return dummyVideoElement.volume !== 1;\n  }\n\n  release(): void {\n    super.release();\n\n    this.onSeekPreview.unsubscribe(this.updateVolumeWhileScrubbing);\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles audio muting.\n */\nexport class VolumeToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    const defaultConfig: ToggleButtonConfig = {\n      cssClass: 'ui-volumetogglebutton',\n      text: i18n.getLocalizer('settings.audio.mute'),\n      onClass: 'muted',\n      offClass: 'unmuted',\n      ariaLabel: i18n.getLocalizer('settings.audio.mute'),\n    };\n\n    this.config = this.mergeConfig(config, defaultConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const volumeController = uimanager.getConfig().volumeController;\n\n    volumeController.onChanged.subscribe((_, args) => {\n      if (args.muted) {\n        this.on();\n      } else {\n        this.off();\n      }\n\n      const volumeLevelTens = Math.ceil(args.volume / 10);\n      this.getDomElement().data(this.prefixCss('volume-level-tens'), String(volumeLevelTens));\n    });\n\n    this.onClick.subscribe(() => {\n      volumeController.toggleMuted();\n    });\n\n    // Startup init\n    volumeController.onChangedEvent();\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI, PlayerEventBase, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles the video view between normal/mono and VR/stereo.\n */\nexport class VRToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-vrtogglebutton',\n      text: i18n.getLocalizer('vr'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let isVRConfigured = () => {\n      // VR availability cannot be checked through getVRStatus() because it is asynchronously populated and not\n      // available at UI initialization. As an alternative, we check the VR settings in the config.\n      // TODO use getVRStatus() through isVRStereoAvailable() once the player has been rewritten and the status is\n      // available in Ready\n      const source = player.getSource();\n      return source && Boolean(source.vr);\n    };\n\n    let isVRStereoAvailable = () => {\n      const source = player.getSource();\n      return player.vr && Boolean(source.vr);\n    };\n\n    let vrStateHandler = (ev: PlayerEventBase) => {\n      if (ev.type === player.exports.PlayerEvent.Warning\n        && (ev as WarningEvent).code !== player.exports.WarningCode.VR_RENDERING_ERROR) {\n        return;\n      }\n\n      if (isVRConfigured() && isVRStereoAvailable()) {\n        this.show(); // show button in case it is hidden\n\n        if (player.vr && player.vr.getStereo()) {\n          this.on();\n        } else {\n          this.off();\n        }\n      } else {\n        this.hide(); // hide button if no stereo mode available\n      }\n    };\n\n    let vrButtonVisibilityHandler = () => {\n      if (isVRConfigured()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.VRStereoChanged, vrStateHandler);\n    player.on(player.exports.PlayerEvent.Warning, vrStateHandler);\n    // Hide button when VR source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, vrButtonVisibilityHandler);\n    uimanager.getConfig().events.onUpdated.subscribe(vrButtonVisibilityHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isVRStereoAvailable()) {\n        if (console) {\n          console.log('No VR content');\n        }\n      } else {\n        if (player.vr && player.vr.getStereo()) {\n          player.vr.setStereo(false);\n        } else {\n          player.vr.setStereo(true);\n        }\n      }\n    });\n\n    // Set startup visibility\n    vrButtonVisibilityHandler();\n  }\n}","import {ClickOverlay, ClickOverlayConfig} from './clickoverlay';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link ClickOverlay}.\n */\nexport interface WatermarkConfig extends ClickOverlayConfig {\n  // nothing yet\n}\n\n/**\n * A watermark overlay with a clickable logo.\n */\nexport class Watermark extends ClickOverlay {\n\n  constructor(config: WatermarkConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-watermark',\n      url: 'http://bitmovin.com',\n      role: 'link',\n      text: 'logo',\n      ariaLabel: i18n.getLocalizer('watermarkLink'),\n    }, <WatermarkConfig>this.config);\n  }\n}","import {VRToggleButton} from './components/vrtogglebutton';\nimport {SettingsToggleButton} from './components/settingstogglebutton';\nimport {VolumeSlider} from './components/volumeslider';\nimport {PlaybackTimeLabel, PlaybackTimeLabelMode} from './components/playbacktimelabel';\nimport {AirPlayToggleButton} from './components/airplaytogglebutton';\nimport {ErrorMessageOverlay} from './components/errormessageoverlay';\nimport {ControlBar} from './components/controlbar';\nimport {CastToggleButton} from './components/casttogglebutton';\nimport {FullscreenToggleButton} from './components/fullscreentogglebutton';\nimport {RecommendationOverlay} from './components/recommendationoverlay';\nimport {PlaybackSpeedSelectBox} from './components/playbackspeedselectbox';\nimport {AudioQualitySelectBox} from './components/audioqualityselectbox';\nimport {CastStatusOverlay} from './components/caststatusoverlay';\nimport {UIContainer} from './components/uicontainer';\nimport {Watermark} from './components/watermark';\nimport {SubtitleOverlay} from './components/subtitleoverlay';\nimport {SettingsPanel} from './components/settingspanel';\nimport {SeekBarLabel} from './components/seekbarlabel';\nimport {PlaybackToggleOverlay} from './components/playbacktoggleoverlay';\nimport {PictureInPictureToggleButton} from './components/pictureinpicturetogglebutton';\nimport {Spacer} from './components/spacer';\nimport {Container} from './components/container';\nimport {VolumeToggleButton} from './components/volumetogglebutton';\nimport {PlaybackToggleButton} from './components/playbacktogglebutton';\nimport {SeekBar} from './components/seekbar';\nimport {VideoQualitySelectBox} from './components/videoqualityselectbox';\nimport {UIConditionContext, UIManager} from './uimanager';\nimport {TitleBar} from './components/titlebar';\nimport {BufferingOverlay} from './components/bufferingoverlay';\nimport {SubtitleListBox} from './components/subtitlelistbox';\nimport {AudioTrackListBox} from './components/audiotracklistbox';\nimport {SettingsPanelItem} from './components/settingspanelitem';\nimport {SettingsPanelPage} from './components/settingspanelpage';\nimport { UIFactory } from './uifactory';\nimport { UIConfig } from './uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport namespace DemoFactory {\n\n  export function buildDemoWithSeparateAudioSubtitlesButtons(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    // show smallScreen UI only on mobile/handheld devices\n    let smallScreenSwitchWidth = 600;\n\n    return new UIManager(player, [{\n      ui: UIFactory.modernSmallScreenAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth\n          && context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: UIFactory.modernAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: UIFactory.modernSmallScreenUI({ radioModeAvailable: false }),\n      condition: (context: UIConditionContext) => {\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth;\n      },\n    }, {\n      ui: modernUIWithSeparateAudioSubtitlesButtons(),\n    }], config);\n  }\n\n  function modernUIWithSeparateAudioSubtitlesButtons() {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let settingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem('Video Quality', new VideoQualitySelectBox()),\n            new SettingsPanelItem('Speed', new PlaybackSpeedSelectBox()),\n            new SettingsPanelItem('Audio Quality', new AudioQualitySelectBox()),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let subtitleListBox = new SubtitleListBox();\n    let subtitleSettingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem(null, subtitleListBox),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let audioTrackListBox = new AudioTrackListBox();\n    let audioTrackSettingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem(null, audioTrackListBox),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let controlBar = new ControlBar({\n      components: [\n        audioTrackSettingsPanel,\n        subtitleSettingsPanel,\n        settingsPanel,\n        new Container({\n          components: [\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n        new Container({\n          components: [\n            new PlaybackToggleButton(),\n            new VolumeToggleButton(),\n            new VolumeSlider(),\n            new Spacer(),\n            new PictureInPictureToggleButton(),\n            new AirPlayToggleButton(),\n            new CastToggleButton(),\n            new VRToggleButton(),\n            new SettingsToggleButton({\n              settingsPanel: audioTrackSettingsPanel,\n              cssClass: 'ui-audiotracksettingstogglebutton',\n            }),\n            new SettingsToggleButton({\n              settingsPanel: subtitleSettingsPanel,\n              cssClass: 'ui-subtitlesettingstogglebutton',\n            }),\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\n            new FullscreenToggleButton(),\n          ],\n          cssClasses: ['controlbar-bottom'],\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new CastStatusOverlay(),\n        controlBar,\n        new TitleBar(),\n        new RecommendationOverlay(),\n        new ErrorMessageOverlay(),\n      ],\n    });\n  }\n}\n","export interface Offset {\n  left: number;\n  top: number;\n}\n\nexport interface Size {\n  width: number;\n  height: number;\n}\n\nexport interface CssProperties {\n  [propertyName: string]: string;\n}\n\n/**\n * Simple DOM manipulation and DOM element event handling modeled after jQuery (as replacement for jQuery).\n *\n * Like jQuery, DOM operates on single elements and lists of elements. For example: creating an element returns a DOM\n * instance with a single element, selecting elements returns a DOM instance with zero, one, or many elements. Similar\n * to jQuery, setters usually affect all elements, while getters operate on only the first element.\n * Also similar to jQuery, most methods (except getters) return the DOM instance facilitating easy chaining of method\n * calls.\n *\n * Built with the help of: http://youmightnotneedjquery.com/\n */\nexport class DOM {\n\n  private document: Document;\n\n  /**\n   * The list of elements that the instance wraps. Take care that not all methods can operate on the whole list,\n   * getters usually just work on the first element.\n   */\n  private elements: HTMLElement[];\n\n  /**\n   * Creates a DOM element.\n   * @param tagName the tag name of the DOM element\n   * @param attributes a list of attributes of the element\n   */\n  constructor(tagName: string, attributes: {[name: string]: string});\n  /**\n   * Selects all elements from the DOM that match the specified selector.\n   * @param selector the selector to match DOM elements with\n   */\n  constructor(selector: string);\n  /**\n   * Wraps a plain HTMLElement with a DOM instance.\n   * @param element the HTMLElement to wrap with DOM\n   */\n  constructor(element: HTMLElement);\n  /**\n   * Wraps a list of plain HTMLElements with a DOM instance.\n   * @param elements the HTMLElements to wrap with DOM\n   */\n  constructor(elements: HTMLElement[]);\n  /**\n   * Wraps the document with a DOM instance. Useful to attach event listeners to the document.\n   * @param document the document to wrap\n   */\n  constructor(document: Document);\n  constructor(something: string | HTMLElement | HTMLElement[] | Document, attributes?: {[name: string]: string}) {\n    this.document = document; // Set the global document to the local document field\n\n    if (something instanceof Array) {\n      if (something.length > 0 && something[0] instanceof HTMLElement) {\n        let elements = something;\n        this.elements = elements;\n      }\n    }\n    else if (something instanceof HTMLElement) {\n      let element = something;\n      this.elements = [element];\n    }\n    else if (something instanceof Document) {\n      // When a document is passed in, we do not do anything with it, but by setting this.elements to null\n      // we give the event handling method a means to detect if the events should be registered on the document\n      // instead of elements.\n      this.elements = null;\n    }\n    else if (attributes) {\n      let tagName = something;\n      let element = document.createElement(tagName);\n\n      for (let attributeName in attributes) {\n        let attributeValue = attributes[attributeName];\n        if (attributeValue != null) {\n          element.setAttribute(attributeName, attributeValue);\n        }\n      }\n\n      this.elements = [element];\n    }\n    else {\n      let selector = something;\n      this.elements = this.findChildElements(selector);\n    }\n  }\n\n  /**\n   * Gets the number of elements that this DOM instance currently holds.\n   * @returns {number} the number of elements\n   */\n  get length(): number {\n    return this.elements ? this.elements.length : 0;\n  }\n\n  /**\n   * Gets the HTML elements that this DOM instance currently holds.\n   * @returns {HTMLElement[]} the raw HTML elements\n   */\n  get(): HTMLElement[];\n  /**\n   * Gets an HTML element from the list elements that this DOM instance currently holds.\n   * @param index The zero-based index into the element list. Can be negative to return an element from the end,\n   *    e.g. -1 returns the last element.\n   */\n  get(index: number): HTMLElement;\n  get(index?: number): HTMLElement | HTMLElement[] {\n    if (index === undefined) {\n      return this.elements;\n    } else if (!this.elements || index >= this.elements.length || index < -this.elements.length) {\n      return undefined;\n    } else if (index < 0) {\n      return this.elements[this.elements.length - index];\n    } else {\n      return this.elements[index];\n    }\n  }\n\n  /**\n   * A shortcut method for iterating all elements. Shorts this.elements.forEach(...) to this.forEach(...).\n   * @param handler the handler to execute an operation on an element\n   */\n  private forEach(handler: (element: HTMLElement) => void): void {\n    if (!this.elements) {\n      return;\n    }\n    this.elements.forEach((element) => {\n      handler(element);\n    });\n  }\n\n  private findChildElementsOfElement(element: HTMLElement | Document, selector: string): HTMLElement[] {\n    let childElements = element.querySelectorAll(selector);\n\n    // Convert NodeList to Array\n    // https://toddmotto.com/a-comprehensive-dive-into-nodelists-arrays-converting-nodelists-and-understanding-the-dom/\n    return [].slice.call(childElements);\n  }\n\n  private findChildElements(selector: string): HTMLElement[] {\n    let allChildElements = <HTMLElement[]>[];\n\n    if (this.elements) {\n      this.forEach((element) => {\n        allChildElements = allChildElements.concat(this.findChildElementsOfElement(element, selector));\n      });\n    }\n    else {\n      return this.findChildElementsOfElement(document, selector);\n    }\n\n    return allChildElements;\n  }\n\n  /**\n   * Finds all child elements of all elements matching the supplied selector.\n   * @param selector the selector to match with child elements\n   * @returns {DOM} a new DOM instance representing all matched children\n   */\n  find(selector: string): DOM {\n    let allChildElements = this.findChildElements(selector);\n    return new DOM(allChildElements);\n  }\n\n  /**\n   * Focuses to the first input element\n   */\n  focusToFirstInput() {\n    const inputElements = this.findChildElements('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n\n    if (inputElements.length > 0) {\n      inputElements[0].focus();\n    }\n  }\n\n  /**\n   * Focuses to the first input element\n   */\n  scrollTo(x: number, y: number) {\n    this.elements[0].scrollTo(x, y);\n  }\n\n  /**\n   * Returns a string of the inner HTML content of the first element.\n   */\n  html(): string;\n  /**\n   * Sets the inner HTML content of all elements.\n   * @param content a string of plain text or HTML markup\n   */\n  html(content: string): DOM;\n  html(content?: string): string | DOM {\n    if (arguments.length > 0) {\n      return this.setHtml(content);\n    }\n    else {\n      return this.getHtml();\n    }\n  }\n\n  private getHtml(): string | null {\n    return this.elements[0].innerHTML;\n  }\n\n  private setHtml(content: string): DOM {\n    if (content === undefined || content == null) {\n      // Set to empty string to avoid innerHTML getting set to 'undefined' (all browsers) or 'null' (IE9)\n      content = '';\n    }\n\n    this.forEach((element) => {\n      element.innerHTML = content;\n    });\n\n    return this;\n  }\n\n  /**\n   * Clears the inner HTML of all elements (deletes all children).\n   * @returns {DOM}\n   */\n  empty(): DOM {\n    this.forEach((element) => {\n      element.innerHTML = '';\n    });\n    return this;\n  }\n\n  /**\n   * Returns the current value of the first form element, e.g. the selected value of a select box or the text if an\n   * input field.\n   * @returns {string} the value of a form element\n   */\n  val(): string {\n    let element = this.elements[0];\n\n    if (element instanceof HTMLSelectElement || element instanceof HTMLInputElement) {\n      return element.value;\n    }\n    else {\n      // TODO add support for missing form elements\n      throw new Error(`val() not supported for ${typeof element}`);\n    }\n  }\n\n  /**\n   * Returns the value of an attribute on the first element.\n   * @param attribute\n   */\n  attr(attribute: string): string | null;\n  /**\n   * Sets an attribute on all elements.\n   * @param attribute the name of the attribute\n   * @param value the value of the attribute\n   */\n  attr(attribute: string, value: string): DOM;\n  attr(attribute: string, value?: string): string | null | DOM {\n    if (arguments.length > 1) {\n      return this.setAttr(attribute, value);\n    }\n    else {\n      return this.getAttr(attribute);\n    }\n  }\n\n  /**\n   * Removes the attribute of the element.\n   * @param attribute\n   */\n  removeAttr(attribute: string) {\n    this.forEach((element) => {\n      element.removeAttribute(attribute);\n    });\n  }\n\n  private getAttr(attribute: string): string | null {\n    return this.elements[0].getAttribute(attribute);\n  }\n\n  private setAttr(attribute: string, value: string): DOM {\n    this.forEach((element) => {\n      element.setAttribute(attribute, value);\n    });\n    return this;\n  }\n\n  /**\n   * Returns the value of a data element on the first element.\n   * @param dataAttribute the name of the data attribute without the 'data-' prefix\n   */\n  data(dataAttribute: string): string | null;\n  /**\n   * Sets a data attribute on all elements.\n   * @param dataAttribute the name of the data attribute without the 'data-' prefix\n   * @param value the value of the data attribute\n   */\n  data(dataAttribute: string, value: string): DOM;\n  data(dataAttribute: string, value?: string): string | null | DOM {\n    if (arguments.length > 1) {\n      return this.setData(dataAttribute, value);\n    }\n    else {\n      return this.getData(dataAttribute);\n    }\n  }\n\n  private getData(dataAttribute: string): string | null {\n    return this.elements[0].getAttribute('data-' + dataAttribute);\n  }\n\n  private setData(dataAttribute: string, value: string): DOM {\n    this.forEach((element) => {\n      element.setAttribute('data-' + dataAttribute, value);\n    });\n    return this;\n  }\n\n  /**\n   * Appends one or more DOM elements as children to all elements.\n   * @param childElements the chrild elements to append\n   * @returns {DOM}\n   */\n  append(...childElements: DOM[]): DOM {\n    this.forEach((element) => {\n      childElements.forEach((childElement) => {\n        childElement.elements.forEach((_, index) => {\n          element.appendChild(childElement.elements[index]);\n        });\n      });\n    });\n    return this;\n  }\n\n  /**\n   * Removes all elements from the DOM.\n   */\n  remove(): void {\n    this.forEach((element) => {\n      let parent = element.parentNode;\n      if (parent) {\n        parent.removeChild(element);\n      }\n    });\n  }\n\n  /**\n   * Returns the offset of the first element from the document's top left corner.\n   * @returns {Offset}\n   */\n  offset(): Offset {\n    let element = this.elements[0];\n    let elementRect = element.getBoundingClientRect();\n    let htmlRect = document.body.parentElement.getBoundingClientRect();\n\n    // Virtual viewport scroll handling (e.g. pinch zoomed viewports in mobile browsers or desktop Chrome/Edge)\n    // 'normal' zooms and virtual viewport zooms (aka layout viewport) result in different\n    // element.getBoundingClientRect() results:\n    //  - with normal scrolls, the clientRect decreases with an increase in scroll(Top|Left)/page(X|Y)Offset\n    //  - with pinch zoom scrolls, the clientRect stays the same while scroll/pageOffset changes\n    // This means, that the combination of clientRect + scroll/pageOffset does not work to calculate the offset\n    // from the document's upper left origin when pinch zoom is used.\n    // To work around this issue, we do not use scroll/pageOffset but get the clientRect of the html element and\n    // subtract it from the element's rect, which always results in the offset from the document origin.\n    // NOTE: the current way of offset calculation was implemented specifically to track event positions on the\n    // seek bar, and it might break compatibility with jQuery's offset() method. If this ever turns out to be a\n    // problem, this method should be reverted to the old version and the offset calculation moved to the seek bar.\n\n    return {\n      top: elementRect.top - htmlRect.top,\n      left: elementRect.left - htmlRect.left,\n    };\n  }\n\n  /**\n   * Returns the width of the first element.\n   * @returns {number} the width of the first element\n   */\n  width(): number {\n    // TODO check if this is the same as jQuery's width() (probably not)\n    return this.elements[0].offsetWidth;\n  }\n\n  /**\n   * Returns the height of the first element.\n   * @returns {number} the height of the first element\n   */\n  height(): number {\n    // TODO check if this is the same as jQuery's height() (probably not)\n    return this.elements[0].offsetHeight;\n  }\n\n  /**\n   * Returns the size of the first element.\n   * @return {Size} the size of the first element\n   */\n  size(): Size {\n    return { width: this.width(), height: this.height() };\n  }\n\n  /**\n   * Attaches an event handler to one or more events on all elements.\n   * @param eventName the event name (or multiple names separated by space) to listen to\n   * @param eventHandler the event handler to call when the event fires\n   * @returns {DOM}\n   */\n  on(eventName: string, eventHandler: EventListenerOrEventListenerObject): DOM {\n    let events = eventName.split(' ');\n\n    events.forEach((event) => {\n      if (this.elements == null) {\n        this.document.addEventListener(event, eventHandler);\n      }\n      else {\n        this.forEach((element) => {\n          element.addEventListener(event, eventHandler);\n        });\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Removes an event handler from one or more events on all elements.\n   * @param eventName the event name (or multiple names separated by space) to remove the handler from\n   * @param eventHandler the event handler to remove\n   * @returns {DOM}\n   */\n  off(eventName: string, eventHandler: EventListenerOrEventListenerObject): DOM {\n    let events = eventName.split(' ');\n\n    events.forEach((event) => {\n      if (this.elements == null) {\n        this.document.removeEventListener(event, eventHandler);\n      }\n      else {\n        this.forEach((element) => {\n          element.removeEventListener(event, eventHandler);\n        });\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Adds the specified class(es) to all elements.\n   * @param className the class(es) to add, multiple classes separated by space\n   * @returns {DOM}\n   */\n  addClass(className: string): DOM {\n    this.forEach((element) => {\n      if (element.classList) {\n        const classNames = className.split(' ')\n          .filter(className => className.length > 0);\n\n        if (classNames.length > 0) {\n          element.classList.add(...classNames);\n        }\n      }\n      else {\n        element.className += ' ' + className;\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Removed the specified class(es) from all elements.\n   * @param className the class(es) to remove, multiple classes separated by space\n   * @returns {DOM}\n   */\n  removeClass(className: string): DOM {\n    this.forEach((element) => {\n      if (element.classList) {\n        const classNames = className.split(' ')\n          .filter(className => className.length > 0);\n\n        if (classNames.length > 0) {\n          element.classList.remove(...classNames);\n        }\n      }\n      else {\n        element.className = element.className.replace(\n          new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Checks if any of the elements has the specified class.\n   * @param className the class name to check\n   * @returns {boolean} true if one of the elements has the class attached, else if no element has it attached\n   */\n  hasClass(className: string): boolean {\n    let hasClass = false;\n\n    this.forEach((element) => {\n      if (element.classList) {\n        if (element.classList.contains(className)) {\n          // Since we are inside a handler, we can't just 'return true'. Instead, we save it to a variable\n          // and return it at the end of the function body.\n          hasClass = true;\n        }\n      }\n      else {\n        if (new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className)) {\n          // See comment above\n          hasClass = true;\n        }\n      }\n    });\n\n    return hasClass;\n  }\n\n  /**\n   * Returns the value of a CSS property of the first element.\n   * @param propertyName the name of the CSS property to retrieve the value of\n   */\n  css(propertyName: string): string | null;\n  /**\n   * Sets the value of a CSS property on all elements.\n   * @param propertyName the name of the CSS property to set the value for\n   * @param value the value to set for the given CSS property\n   */\n  css(propertyName: string, value: string): DOM;\n  /**\n   * Sets a collection of CSS properties and their values on all elements.\n   * @param propertyValueCollection an object containing pairs of property names and their values\n   */\n  css(propertyValueCollection: CssProperties): DOM;\n  css(propertyNameOrCollection: string | CssProperties, value?: string): string | null | DOM {\n    if (typeof propertyNameOrCollection === 'string') {\n      let propertyName = propertyNameOrCollection;\n\n      if (arguments.length === 2) {\n        return this.setCss(propertyName, value);\n      }\n      else {\n        return this.getCss(propertyName);\n      }\n    }\n    else {\n      let propertyValueCollection = propertyNameOrCollection;\n      return this.setCssCollection(propertyValueCollection);\n    }\n  }\n\n  /**\n   * Removes an inline CSS property if it exists\n   * @param propertyName name of the property to remove\n   * @param elementIndex index of the element whose CSS property should get removed\n   */\n  removeCss(propertyName: string, elementIndex = 0): string {\n    return this.elements[elementIndex].style.removeProperty(propertyName);\n  }\n\n  private getCss(propertyName: string): string | null {\n    return getComputedStyle(this.elements[0])[<any>propertyName];\n  }\n\n  private setCss(propertyName: string, value: string): DOM {\n    this.forEach((element) => {\n      // <any> cast to resolve TS7015: http://stackoverflow.com/a/36627114/370252\n      element.style[<any>propertyName] = value;\n    });\n    return this;\n  }\n\n  private setCssCollection(ruleValueCollection: {[ruleName: string]: string}): DOM {\n    this.forEach((element) => {\n      // http://stackoverflow.com/a/34490573/370252\n      Object.assign(element.style, ruleValueCollection);\n    });\n\n    return this;\n  }\n}\n","import {ErrorMessageMap, ErrorMessageTranslator} from './components/errormessageoverlay';\nimport { ErrorEvent } from 'bitmovin-player';\nimport { MobileV3PlayerErrorEvent, MobileV3SourceErrorEvent } from './mobilev3playerapi';\n\nexport namespace ErrorUtils {\n\n  export const defaultErrorMessages: ErrorMessageMap = {\n    1000: 'Error is unknown',\n    1001: 'The player API is not available after a call to PlayerAPI.destroy.',\n    1100: 'General setup error',\n    1101: 'There was an error when inserting the HTML video element',\n    1102: 'No configuration was provided',\n    1103: 'The license is not valid',\n    1104: 'The the domain-locked player is not authorized to playback on this domain',\n    1105: 'The domain is not allowlisted',\n    1106: 'The license server URL is invalid',\n    1107: 'The impression server URL is invalid',\n    1108: 'Could not initialize a rendering engine',\n    1109: 'The used flash version does not support playback',\n    1110: 'Native Flash is not authorized by a valid Adobe token',\n    1111: 'Flash doesn\\'t have sufficient resources',\n    1112: 'Flash container API not available',\n    1113: 'Protocol not supported. This site has been loaded using \"file\" protocol, but unfortunately this is not supported. Please load the page using a web server (using http or https)',\n    1200: 'General source error',\n    1201: 'No valid source was provided',\n    1202: 'The downloaded manifest is invalid',\n    1203: 'There was no technology detected to playback the provided source',\n    1204: 'The stream type is not supported',\n    1205: 'The forced technology is not supported',\n    1206: 'No stream found for supported technologies.',\n    1207: 'The downloaded segment is empty',\n    1208: 'The manifest could not be loaded',\n    1209: 'Progressive stream type not supported or the stream has an error',\n    1210: 'HLS stream has an error',\n    1211: 'The encryption method is not supported',\n    1300: 'General playback error',\n    1301: 'Video decoder or demuxer had an error with the content',\n    1302: 'General error if Flash renderer has an error',\n    1303: 'Flash doesn\\'t have sufficient resources',\n    1304: 'The transmuxer could not be initialized',\n    1400: 'Network error while downloading',\n    1401: 'The manifest download timed out',\n    1402: 'The segment download timed out',\n    1403: 'The progressive stream download timed out',\n    1404: 'The Certificate could not be loaded',\n    2000: 'General DRM error',\n    2001: 'Required DRM configuration is missing',\n    2002: 'The licensing server URL is missing',\n    2003: 'License request failed',\n    2004: 'Key or KeyId is missing',\n    2005: 'Key size is not supported',\n    2006: 'Unable to instantiate a key system supporting the required combinations',\n    2007: 'Unable to create or initialize key session',\n    2008: 'The MediaKey object could not be created/initialized',\n    2009: 'Key error',\n    2010: 'The key system is not supported',\n    2011: 'The certificate is not valid',\n    2012: 'Invalid header key/value pair for PlayReady license request',\n    2013: 'Content cannot be played back because the output is restricted on this machine',\n    2014: 'DRM error for the Flash renderer',\n    2100: 'General VR error',\n    2101: 'Player technology not compatible with VR playback',\n    3000: 'General module error',\n    3001: 'The definition of the module is invalid (e.g. incomplete).',\n    3002: 'The module definition specifies dependencies but the module is not provided via a function for deferred loading.',\n    3003: 'A module cannot be loaded because it has not been added to the player core.',\n    3004: 'A module cannot be loaded because one or more dependencies are missing.',\n    3100: 'An Advertising module error has occurred. Refer to the attached AdvertisingError.',\n  };\n\n  export const defaultMobileV3ErrorMessageTranslator = (error: MobileV3PlayerErrorEvent | MobileV3SourceErrorEvent) => {\n    return error.message;\n  };\n\n  export const defaultWebErrorMessageTranslator: ErrorMessageTranslator = (error: ErrorEvent) => {\n    const errorMessage = ErrorUtils.defaultErrorMessages[error.code];\n\n    if (errorMessage) {\n      // Use the error message text if there is one\n      return `${errorMessage}\\n(${error.name})`; // default error message style\n    } else {\n      // Fallback to error code/name if no message is defined\n      return `${error.code} ${error.name}`;\n    }\n  };\n}\n","import {ArrayUtils} from './arrayutils';\nimport { Timeout } from './timeout';\n/**\n * Function interface for event listeners on the {@link EventDispatcher}.\n */\nexport interface EventListener<Sender, Args> {\n  (sender: Sender, args: Args): void;\n}\n\n/**\n * Empty type for creating {@link EventDispatcher event dispatchers} that do not carry any arguments.\n */\nexport interface NoArgs {\n}\n\n/**\n * Event args for an event that can be canceled.\n */\nexport interface CancelEventArgs extends NoArgs {\n  /**\n   * Gets or sets a flag whether the event should be canceled.\n   */\n  cancel?: boolean;\n}\n\n/**\n * Public interface that represents an event. Can be used to subscribe to and unsubscribe from events.\n */\nexport interface Event<Sender, Args> {\n  /**\n   * Subscribes an event listener to this event dispatcher.\n   * @param listener the listener to add\n   */\n  subscribe(listener: EventListener<Sender, Args>): void;\n\n  /**\n   * Subscribes an event listener to this event dispatcher that is only called once.\n   * @param listener the listener to add\n   */\n  subscribeOnce(listener: EventListener<Sender, Args>): void;\n\n  /**\n   * Subscribes an event listener to this event dispatcher that will be called at a limited rate with a minimum\n   * interval of the specified milliseconds.\n   * @param listener the listener to add\n   * @param rateMs the rate in milliseconds to which calling of the listeners should be limited\n   */\n  subscribeRateLimited(listener: EventListener<Sender, Args>, rateMs: number): void;\n\n  /**\n   * Unsubscribes a subscribed event listener from this dispatcher.\n   * @param listener the listener to remove\n   * @returns {boolean} true if the listener was successfully unsubscribed, false if it isn't subscribed on this\n   *   dispatcher\n   */\n  unsubscribe(listener: EventListener<Sender, Args>): boolean;\n}\n\n/**\n * Event dispatcher to subscribe and trigger events. Each event should have its own dispatcher.\n */\nexport class EventDispatcher<Sender, Args> implements Event<Sender, Args> {\n\n  private listeners: EventListenerWrapper<Sender, Args>[] = [];\n\n  constructor() {\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribe(listener: EventListener<Sender, Args>) {\n    this.listeners.push(new EventListenerWrapper(listener));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribeOnce(listener: EventListener<Sender, Args>) {\n    this.listeners.push(new EventListenerWrapper(listener, true));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribeRateLimited(listener: EventListener<Sender, Args>, rateMs: number) {\n    this.listeners.push(new RateLimitedEventListenerWrapper(listener, rateMs));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  unsubscribe(listener: EventListener<Sender, Args>): boolean {\n    // Iterate through listeners, compare with parameter, and remove if found\n    // NOTE: In case we ever remove all matching listeners instead of just the first, we need to reverse-iterate here\n    for (let i = 0; i < this.listeners.length; i++) {\n      let subscribedListener = this.listeners[i];\n      if (subscribedListener.listener === listener) {\n        subscribedListener.clear();\n        ArrayUtils.remove(this.listeners, subscribedListener);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Removes all listeners from this dispatcher.\n   */\n  unsubscribeAll(): void {\n    // In case of RateLimitedEventListenerWrapper we need to make sure that the timeout callback won't be called\n    for (let listener of this.listeners) {\n      listener.clear();\n    }\n\n    this.listeners = [];\n  }\n\n  /**\n   * Dispatches an event to all subscribed listeners.\n   * @param sender the source of the event\n   * @param args the arguments for the event\n   */\n  dispatch(sender: Sender, args: Args = null) {\n    let listenersToRemove = [];\n\n    // Call every listener\n    // We iterate over a copy of the array of listeners to avoid the case where events are not fired on listeners when\n    // listeners are unsubscribed from within the event handlers during a dispatch (because the indices change and\n    // listeners are shifted within the array).\n    // This means that listener x+1 will still be called if unsubscribed from within the handler of listener x, as well\n    // as listener y+1 will not be called when subscribed from within the handler of listener y.\n    // Array.slice(0) is the fastest array copy method according to: https://stackoverflow.com/a/21514254/370252\n    const listeners = this.listeners.slice(0);\n    for (let listener of listeners) {\n      listener.fire(sender, args);\n\n      if (listener.isOnce()) {\n        listenersToRemove.push(listener);\n      }\n    }\n\n    // Remove one-time listener\n    for (let listenerToRemove of listenersToRemove) {\n      ArrayUtils.remove(this.listeners, listenerToRemove);\n    }\n  }\n\n  /**\n   * Returns the event that this dispatcher manages and on which listeners can subscribe and unsubscribe event handlers.\n   * @returns {Event}\n   */\n  getEvent(): Event<Sender, Args> {\n    // For now, just cast the event dispatcher to the event interface. At some point in the future when the\n    // codebase grows, it might make sense to split the dispatcher into separate dispatcher and event classes.\n    return <Event<Sender, Args>>this;\n  }\n}\n\n/**\n * A basic event listener wrapper to manage listeners within the {@link EventDispatcher}. This is a 'private' class\n * for internal dispatcher use and it is therefore not exported.\n */\nclass EventListenerWrapper<Sender, Args> {\n\n  private eventListener: EventListener<Sender, Args>;\n  private once: boolean;\n\n  constructor(listener: EventListener<Sender, Args>, once: boolean = false) {\n    this.eventListener = listener;\n    this.once = once;\n  }\n\n  /**\n   * Returns the wrapped event listener.\n   * @returns {EventListener<Sender, Args>}\n   */\n  get listener(): EventListener<Sender, Args> {\n    return this.eventListener;\n  }\n\n  /**\n   * Fires the wrapped event listener with the given arguments.\n   * @param sender\n   * @param args\n   */\n  fire(sender: Sender, args: Args) {\n    this.eventListener(sender, args);\n  }\n\n  /**\n   * Checks if this listener is scheduled to be called only once.\n   * @returns {boolean} once if true\n   */\n  isOnce(): boolean {\n    return this.once;\n  }\n\n  clear(): void {\n  }\n}\n\ninterface EventAttributes<Sender, Args> {\n  sender: Sender;\n  args: Args;\n}\n\n/**\n * Extends the basic {@link EventListenerWrapper} with rate-limiting functionality.\n */\nclass RateLimitedEventListenerWrapper<Sender, Args> extends EventListenerWrapper<Sender, Args> {\n\n  private readonly rateMs: number;\n  private readonly rateLimitingEventListener: EventListener<Sender, Args>;\n\n  // save last seen event attributes\n  private lastSeenEvent: EventAttributes<Sender, Args>;\n\n  private rateLimitTimout: Timeout;\n\n  constructor(listener: EventListener<Sender, Args>, rateMs: number) {\n    super(listener); // sets the event listener sink\n\n    this.rateMs = rateMs;\n\n    // starting limiting the events to the given value\n    const startRateLimiting = () => {\n      this.rateLimitTimout.start();\n    };\n\n    // timout for limiting the events\n    this.rateLimitTimout = new Timeout(this.rateMs, () => {\n      if (this.lastSeenEvent) {\n        this.fireSuper(this.lastSeenEvent.sender, this.lastSeenEvent.args);\n        startRateLimiting(); // start rateLimiting again to keep rate limit active even after firing the last seen event\n        this.lastSeenEvent = null;\n      }\n    });\n\n    // In case the events stopping during the rateLimiting we need to track the last seen one and delegate after the\n    // rate limiting is finished. This prevents missing the last update due to the rate limit.\n    this.rateLimitingEventListener = (sender: Sender, args: Args) => {\n      // only fire events if the rateLimiting is not running\n      if (this.shouldFireEvent()) {\n        this.fireSuper(sender, args);\n        startRateLimiting();\n        return;\n      }\n\n      this.lastSeenEvent = {\n        sender: sender,\n        args: args,\n      };\n    };\n  }\n\n  private shouldFireEvent(): boolean {\n    return !this.rateLimitTimout.isActive();\n  }\n\n  private fireSuper(sender: Sender, args: Args) {\n    // Fire the actual external event listener\n    super.fire(sender, args);\n  }\n\n  fire(sender: Sender, args: Args) {\n    // Fire the internal rate-limiting listener instead of the external event listener\n    this.rateLimitingEventListener(sender, args);\n  }\n\n  clear(): void {\n    super.clear();\n    this.rateLimitTimout.clear();\n  }\n}\n","const FocusVisibleCssClassName = '{{PREFIX}}-focus-visible';\n\nexport class FocusVisibilityTracker {\n  private readonly eventHandlerMap: { [eventName: string]: EventListenerOrEventListenerObject };\n  private lastInteractionWasKeyboard: boolean = true;\n\n  constructor(private bitmovinUiPrefix: string) {\n    this.eventHandlerMap = {\n      mousedown: this.onMouseOrPointerOrTouch,\n      pointerdown: this.onMouseOrPointerOrTouch,\n      touchstart: this.onMouseOrPointerOrTouch,\n      keydown: this.onKeyDown,\n      focus: this.onFocus,\n      blur: this.onBlur,\n    };\n    this.registerEventListeners();\n  }\n\n  private onKeyDown = (e: KeyboardEvent) => {\n    if (e.metaKey || e.altKey || e.ctrlKey) {\n      return;\n    }\n\n    this.lastInteractionWasKeyboard = true;\n  };\n\n  private onMouseOrPointerOrTouch = () => (this.lastInteractionWasKeyboard = false);\n\n  private onFocus = ({ target: element }: FocusEvent) => {\n    if (\n      this.lastInteractionWasKeyboard &&\n      isHtmlElement(element) &&\n      isBitmovinUi(element, this.bitmovinUiPrefix) &&\n      !element.classList.contains(FocusVisibleCssClassName)\n    ) {\n      element.classList.add(FocusVisibleCssClassName);\n    }\n  };\n\n  private onBlur = ({ target: element }: FocusEvent) => {\n    if (isHtmlElement(element)) {\n      element.classList.remove(FocusVisibleCssClassName);\n    }\n  };\n\n  private registerEventListeners(): void {\n    for (const event in this.eventHandlerMap) {\n      document.addEventListener(event, this.eventHandlerMap[event], true);\n    }\n  }\n\n  private unregisterEventListeners(): void {\n    for (const event in this.eventHandlerMap) {\n      document.removeEventListener(event, this.eventHandlerMap[event], true);\n    }\n  }\n\n  public release(): void {\n    this.unregisterEventListeners();\n  }\n}\n\nfunction isBitmovinUi(element: Element, bitmovinUiPrefix: string): boolean {\n  return element.id.indexOf(bitmovinUiPrefix) === 0;\n}\n\nfunction isHtmlElement(element: unknown): element is HTMLElement & { classList: DOMTokenList } {\n  return (\n    element instanceof HTMLElement && element.classList instanceof DOMTokenList\n  );\n}\n","import { PlayerAPI } from 'bitmovin-player';\n/**\n * The Group Playback API offers control over synchronized playback of a group of clients, e.g. for Apple SharePlay\n * sessions.\n\n * Note: The API currently only covers the immediate needs of the iOS SDK in combination with our UI which is regarding\n * temporarily suspending synchronization of the player from the group. But it is open to be extended as needed in the\n * future.\n */\n\n/**\n * Reason for suspending the synchronization with the group.\n */\nexport enum GroupPlaybackSuspensionReason {\n  UserIsScrubbing = 'userIsScrubbing',\n}\n\n/**\n * A representation of a temporary break in participation.\n */\nexport interface GroupPlaybackSuspension {\n  /**\n   * The reason for the suspension.\n   */\n  reason: GroupPlaybackSuspensionReason;\n\n  /**\n   * A unique identifier.\n   */\n  id: string;\n}\n\n/**\n * Options to be considered upon ending a suspension.\n */\ninterface EndGroupPlaybackSuspensionOptions {\n  /**\n   * A proposed time for the group to seek to.\n   */\n  proposedPlaybackTime?: number;\n}\n\n/**\n * Group Playback API offering control over the player's participation in synchronized playback of a group of clients.\n * For example, an Apple SharePlay session.\n */\ninterface GroupPlaybackAPI {\n  /**\n   * Begins a new suspension.\n   *\n   * Temporarily suspends the local player's synchronization with the group. While suspended, any local playback control\n   * action (e.g. play, pause, seek) will not be forwarded to the group and any action originating from another group\n   * participant will not be performed on the local player.\n   *\n   * @remarks\n   * It is possible for multiple suspensions to exist exist simultaneously with different suspension reasons. The player\n   * will re-synchronize with the group once all existing suspensions have ended.\n   *\n   * @param reason - The reason for the suspension.\n   * @returns A suspension object.\n   */\n  beginSuspension(reason: GroupPlaybackSuspensionReason): GroupPlaybackSuspension;\n\n  /**\n   * Ends the given suspension.\n   *\n   * @param suspension - The suspension to be ended.\n   * @param options - Optional. Options to be considered when ending the suspension, e.g. a proposed seek time for the group.\n   */\n  endSuspension(suspension: GroupPlaybackSuspension, options?: EndGroupPlaybackSuspensionOptions): void;\n\n  /**\n   * Whether the player is currently participating in a group playback session.\n   */\n  hasJoined(): boolean;\n\n  /**\n   * Whether the player is currently suspending synchronization with the group.\n   * Can only return true if `hasJoined()` also is true.\n   */\n  isSuspended(): boolean;\n}\n\n\nexport interface ExtendedPlayerAPI extends PlayerAPI {\n  /**\n   * Group Playback API\n   *\n   * @remarks\n   * This API is optional as not every platform supports group playback.\n   */\n  groupPlayback?: GroupPlaybackAPI;\n}\n","export namespace Guid {\n\n  let guid = 1;\n\n  export function next() {\n    return guid++;\n  }\n}\n","import {DOM} from './dom';\n\nexport interface ImageLoadedCallback {\n  (url: string, width: number, height: number): void;\n}\n\ninterface ImageLoaderState {\n  url: string;\n  image: DOM;\n  loadedCallback: ImageLoadedCallback;\n  loaded: boolean;\n  width: number;\n  height: number;\n}\n\n/**\n * Tracks the loading state of images.\n */\nexport class ImageLoader {\n\n  private state: { [url: string]: ImageLoaderState; } = {};\n\n  /**\n   * Loads an image and call the callback once the image is loaded. If the image is already loaded, the callback\n   * is called immediately, else it is called once loading has finished. Calling this method multiple times for the\n   * same image while it is loading calls only let callback passed into the last call.\n   * @param url The url to the image to load\n   * @param loadedCallback The callback that is called when the image is loaded\n   */\n  load(url: string, loadedCallback: ImageLoadedCallback): void {\n    if (!this.state[url]) {\n      // When the image was never attempted to be loaded before, we create a state and store it in the state map\n      // for later use when the same image is requested to be loaded again.\n      let state: ImageLoaderState = {\n        url: url,\n        image: new DOM('img', {}),\n        loadedCallback: loadedCallback,\n        loaded: false,\n        width: 0,\n        height: 0,\n      };\n      this.state[url] = state;\n\n      // Listen to the load event, update the state and call the callback once the image is loaded\n      state.image.on('load', (e) => {\n        state.loaded = true;\n        state.width = (<HTMLImageElement>state.image.get(0)).width;\n        state.height = (<HTMLImageElement>state.image.get(0)).height;\n\n        this.callLoadedCallback(state);\n      });\n\n      // Set the image URL to start the loading\n      state.image.attr('src', state.url);\n    } else {\n      // We have a state for the requested image, so it is either already loaded or currently loading\n      let state = this.state[url];\n\n      // We overwrite the callback to make sure that only the callback of the latest call gets executed.\n      // Earlier callbacks become invalid once a new load call arrives, and they are not called as long as the image\n      // is not loaded.\n      state.loadedCallback = loadedCallback;\n\n      // When the image is already loaded, we directly execute the callback instead of waiting for the load event\n      if (state.loaded) {\n        this.callLoadedCallback(state);\n      }\n    }\n  }\n\n  private callLoadedCallback(state: ImageLoaderState): void {\n    state.loadedCallback(state.url, state.width, state.height);\n  }\n}\n","import vocabularyDe from './languages/de.json';\nimport vocabularyEn from './languages/en.json';\nimport vocabularyEs from './languages/es.json';\nimport { LocalizationConfig } from '../uimanager.js';\n\nexport const defaultVocabularies: Vocabularies = {\n  'en': vocabularyEn,\n  'de': vocabularyDe,\n  'es': vocabularyEs,\n};\n\nconst defaultLocalizationConfig: LocalizationConfig = {\n  language: 'en',\n  vocabularies: defaultVocabularies,\n};\n\ntype Localizer = () => string;\nexport type LocalizableText = string | Localizer;\n\ninterface Vocabulary {\n  'settings.video.quality': string;\n  'settings.audio.quality': string;\n  'settings.audio.track': string;\n  'settings.audio.mute': string;\n  'settings.audio.volume': string;\n  'settings.subtitles': string;\n  'settings.subtitles.font.color': string;\n  'settings.subtitles.font.opacity': string;\n  'settings.subtitles.background.color': string;\n  'settings.subtitles.background.opacity': string;\n  'settings.subtitles.font.size': string;\n  'settings.subtitles.characterEdge': string;\n  'settings.subtitles.characterEdge.raised': string;\n  'settings.subtitles.characterEdge.depressed': string;\n  'settings.subtitles.characterEdge.uniform': string;\n  'settings.subtitles.characterEdge.dropshadowed': string;\n  'settings.subtitles.font.family': string;\n  'settings.subtitles.font.family.monospacedserif': string;\n  'settings.subtitles.font.family.proportionalserif': string;\n  'settings.subtitles.font.family.monospacedsansserif': string;\n  'settings.subtitles.font.family.proportionalsansserif': string;\n  'settings.subtitles.font.family.casual': string;\n  'settings.subtitles.font.family.cursive': string;\n  'settings.subtitles.font.family.smallcapital': string;\n  'settings.subtitles.window.color': string;\n  'settings.subtitles.window.opacity': string;\n  'play': string;\n  'settings.time.hours': string;\n  'settings.time.minutes': string;\n  'settings.time.seconds': string;\n  'colors.white': string;\n  'colors.black': string;\n  'colors.red': string;\n  'colors.green': string;\n  'colors.blue': string;\n  'colors.cyan': string;\n  'colors.yellow': string;\n  'colors.magenta': string;\n  'percent': string;\n  'settings': string;\n  'ads.remainingTime': string;\n  'pictureInPicture': string;\n  'appleAirplay': string;\n  'googleCast': string;\n  'vr': string;\n  'off': string;\n  'auto': string;\n  'back': string;\n  'reset': string;\n  'replay': string;\n  'normal': string;\n  'default': string;\n  'open': string;\n  'close': string;\n  'fullscreen': string;\n  'speed': string;\n  'playPause': string;\n  'live': string;\n  'subtitle.example': string;\n  'subtitle.select': string;\n  'playingOn': string;\n  'connectingTo': string;\n  'watermarkLink': string;\n  'controlBar': string;\n  'player': string;\n  'seekBar': string;\n  'seekBar.value': string;\n  'seekBar.timeshift': string;\n  'seekBar.durationText': string;\n}\n\nexport type CustomVocabulary<V> = V & Partial<Vocabulary>;\n\nexport interface Vocabularies {\n  [key: string]: CustomVocabulary<Record<string, string>>;\n}\n\nclass I18n {\n  private language: string;\n  private vocabulary: CustomVocabulary<Record<string, string>>;\n\n  constructor(config: LocalizationConfig) {\n    this.setConfig(config);\n  }\n\n  public setConfig(config: LocalizationConfig) {\n    const mergedConfig = { ...defaultLocalizationConfig, ...config };\n    const detectBrowserLanguage = mergedConfig.language === 'auto';\n    const vocabularies = this.mergeVocabulariesWithDefaultVocabularies(mergedConfig.vocabularies);\n    this.initializeLanguage(mergedConfig.language, detectBrowserLanguage, vocabularies);\n    this.initializeVocabulary(vocabularies);\n  }\n\n  private static containsLanguage(vocabularies: Vocabularies, language: string) {\n    return vocabularies.hasOwnProperty(language);\n  }\n\n  private mergeVocabulariesWithDefaultVocabularies(vocabularies: Vocabularies = {}) {\n    const rawVocabularies: Vocabularies = { ...defaultVocabularies, ...vocabularies };\n    return Object.keys(rawVocabularies).reduce((mergedVocabularies, language) => {\n      let vocabulary = rawVocabularies[language];\n      if (I18n.containsLanguage(defaultVocabularies, language) && I18n.containsLanguage(vocabularies, language)) {\n        vocabulary = { ...defaultVocabularies[language], ...vocabularies[language] };\n      }\n      return { ...mergedVocabularies, [language]: vocabulary };\n    }, {});\n  }\n\n  private initializeLanguage(\n    language: string,\n    browserLanguageDetectionEnabled: boolean,\n    vocabularies: Vocabularies,\n  ) {\n    if (browserLanguageDetectionEnabled) {\n      const userLanguage = window.navigator.language;\n\n      if (I18n.containsLanguage(vocabularies, userLanguage)) {\n        this.language = userLanguage;\n        return;\n      }\n      const shortenedUserLanguage = userLanguage.slice(0, 2);\n      if (I18n.containsLanguage(vocabularies, shortenedUserLanguage)) {\n        this.language = shortenedUserLanguage;\n        return;\n      }\n    }\n\n    this.language = language;\n  }\n\n  private initializeVocabulary(vocabularies: Vocabularies) {\n    this.vocabulary = ['en', this.language]\n      .reduce((vocab, lang) => ({ ...vocab, ...(vocabularies[lang] || {}) }), {});\n  }\n\n  private replaceVariableWithPlaceholderIfExists(text: string, config: any) {\n    const matches = text.match(new RegExp('{[a-zA-Z0-9]+}', 'g'));\n    if (matches.length === 0) {\n      return text;\n    }\n\n    return matches\n      .map((m: string) => ({ match: m, key: m.slice(1, -1) }))\n      .reduce((str, { key, match }) => config.hasOwnProperty(key) ? str.replace(match, config[key]) : str, text);\n  }\n\n  public getLocalizer<V extends CustomVocabulary<Record<string, string>> = CustomVocabulary<Record<string, string>>>(\n    key: keyof V,\n    config?: Record<string, string | number>,\n  ): Localizer {\n    return () => {\n      if (key == null) { // because sometimes we call toDomElement() without configuring the component or setting text...\n        return undefined;\n      }\n      let vocabularyString = this.vocabulary[key as string];\n\n      if (vocabularyString == null) {\n        vocabularyString = key as string;\n      }\n\n      if (config != null) {\n        vocabularyString = this.replaceVariableWithPlaceholderIfExists(vocabularyString, config);\n      }\n\n      return vocabularyString;\n    };\n  }\n\n  public performLocalization(text: LocalizableText) {\n    return typeof text === 'function' ? text() : text;\n  }\n}\n\nexport const i18n = new I18n(defaultLocalizationConfig);\n","module.exports={\n  \"settings.video.quality\": \"Videoqualität\",\n  \"settings.audio.quality\": \"Audioqualität\",\n  \"settings.audio.track\": \"Audiospur\",\n  \"speed\": \"Geschwindigkeit\",\n  \"play\": \"Abspielen\",\n  \"pause\": \"Pause\",\n  \"playPause\": \"Abspielen/Pause\",\n  \"open\": \"öffnen\",\n  \"close\": \"Schließen\",\n  \"settings.audio.mute\": \"Stummschaltung\",\n  \"settings.audio.volume\": \"Lautstärke\",\n  \"pictureInPicture\": \"Bild im Bild\",\n  \"appleAirplay\": \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\": \"VR\",\n  \"settings\": \"Einstellungen\",\n  \"fullscreen\": \"Vollbild\",\n  \"off\": \"aus\",\n  \"settings.subtitles\": \"Untertitel\",\n  \"settings.subtitles.font.size\": \"Größe\",\n  \"settings.subtitles.font.family\": \"Schriftart\",\n  \"settings.subtitles.font.color\": \"Farbe\",\n  \"settings.subtitles.font.opacity\": \"Deckkraft\",\n  \"settings.subtitles.characterEdge\": \"Ränder\",\n  \"settings.subtitles.background.color\": \"Hintergrundfarbe\",\n  \"settings.subtitles.background.opacity\": \"Hintergrunddeckkraft\",\n  \"settings.subtitles.window.color\": \"Hintergrundfarbe\",\n  \"settings.subtitles.window.opacity\": \"Hintergrunddeckkraft\",\n  \"settings.time.hours\": \"Stunden\",\n  \"settings.time.minutes\": \"Minuten\",\n  \"settings.time.seconds\": \"Sekunden\",\n  \"back\": \"Zurück\",\n  \"reset\": \"Zurücksetzen\",\n  \"replay\": \"Wiederholen\",\n  \"ads.remainingTime\": \"Diese Anzeige endet in {remainingTime} Sekunden\",\n  \"default\": \"standard\",\n  \"colors.white\": \"weiß\",\n  \"colors.black\": \"schwarz\",\n  \"colors.red\": \"rot\",\n  \"colors.green\": \"grün\",\n  \"colors.blue\": \"blau\",\n  \"colors.yellow\": \"gelb\",\n  \"subtitle.example\": \"Beispiel Untertitel\",\n  \"subtitle.select\": \"Untertitel auswählen\",\n  \"playingOn\": \"Spielt auf <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Verbindung mit <strong>{castDeviceName}</strong> wird hergestellt...\",\n  \"watermarkLink\": \"Link zum Homepage\",\n  \"controlBar\": \"Videoplayer Kontrollen\",\n  \"player\": \"Video player\",\n  \"seekBar\": \"Video-Timeline\",\n  \"seekBar.value\": \"Wert\",\n  \"seekBar.timeshift\": \"Timeshift\",\n  \"seekBar.durationText\": \"aus\"\n}\n","module.exports={\n  \"settings.video.quality\": \"Video Quality\",\n  \"settings.audio.quality\": \"Audio Quality\",\n  \"settings.audio.track\": \"Audio Track\",\n  \"settings.audio.mute\" : \"Mute\",\n  \"settings.audio.volume\" : \"Volume\",\n  \"settings.subtitles.window.color\" : \"Window color\",\n  \"settings.subtitles.window.opacity\" : \"Window opacity\",\n  \"settings.subtitles\" : \"Subtitles\",\n  \"settings.subtitles.font.color\" : \"Font color\",\n  \"settings.subtitles.font.opacity\" : \"Font opacity\",\n  \"settings.subtitles.background.color\" : \"Background color\",\n  \"settings.subtitles.background.opacity\": \"Background opacity\",\n  \"colors.white\": \"white\",\n  \"colors.black\": \"black\",\n  \"colors.red\": \"red\",\n  \"colors.green\": \"green\",\n  \"colors.blue\": \"blue\",\n  \"colors.cyan\": \"cyan\",\n  \"colors.yellow\": \"yellow\",\n  \"colors.magenta\": \"magenta\",\n  \"percent\": \"{value}%\",\n  \"settings.subtitles.font.size\": \"Font size\",\n  \"settings.subtitles.characterEdge\": \"Character edge\",\n  \"settings.subtitles.characterEdge.raised\": \"raised\",\n  \"settings.subtitles.characterEdge.depressed\": \"depressed\",\n  \"settings.subtitles.characterEdge.uniform\": \"uniform\",\n  \"settings.subtitles.characterEdge.dropshadowed\": \"drop shadowed\",\n  \"settings.subtitles.font.family\": \"Font family\",\n  \"settings.subtitles.font.family.monospacedserif\": \"monospaced serif\",\n  \"settings.subtitles.font.family.proportionalserif\": \"proportional serif\",\n  \"settings.subtitles.font.family.monospacedsansserif\": \"monospaced sans serif\",\n  \"settings.subtitles.font.family.proportionalsansserif\": \"proportional sans serif\",\n  \"settings.subtitles.font.family.casual\": \"casual\",\n  \"settings.subtitles.font.family.cursive\": \"cursive\",\n  \"settings.subtitles.font.family.smallcapital\": \"small capital\",\n  \"settings.time.hours\": \"Hours\",\n  \"settings.time.minutes\": \"Minutes\",\n  \"settings.time.seconds\": \"Seconds\",\n  \"ads.remainingTime\": \"This ad will end in {remainingTime} seconds.\",\n  \"settings\": \"Settings\",\n  \"fullscreen\" : \"Fullscreen\",\n  \"speed\": \"Speed\",\n  \"playPause\" : \"Play/Pause\",\n  \"play\": \"Play\",\n  \"pause\": \"Pause\",\n  \"open\": \"open\",\n  \"close\": \"Close\",\n  \"pictureInPicture\": \"Picture-in-Picture\",\n  \"appleAirplay\" : \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\" : \"VR\",\n  \"off\": \"off\",\n  \"auto\": \"auto\",\n  \"back\" : \"Back\",\n  \"reset\": \"Reset\",\n  \"replay\": \"Replay\",\n  \"normal\": \"normal\",\n  \"default\": \"default\",\n  \"live\": \"Live\",\n  \"subtitle.example\": \"example subtitle\",\n  \"subtitle.select\": \"Select subtitle\",\n  \"playingOn\": \"Playing on <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Connecting to <strong>{castDeviceName}</strong>...\",\n  \"watermarkLink\": \"Link to Homepage\",\n  \"controlBar\": \"Video player controls\",\n  \"player\": \"Video player\",\n  \"seekBar\": \"Video timeline\",\n  \"seekBar.value\": \"Value\",\n  \"seekBar.timeshift\": \"Timeshift\",\n  \"seekBar.durationText\": \"out of\"\n}\n","module.exports={\n  \"settings.video.quality\": \"Calidad de Video\",\n  \"settings.audio.quality\": \"Calidad de Audio\",\n  \"settings.audio.track\": \"Pista de Audio\",\n  \"settings.audio.mute\" : \"Silencio\",\n  \"settings.audio.volume\" : \"Volumen\",\n  \"settings.subtitles.window.color\" : \"color de Ventana\",\n  \"settings.subtitles.window.opacity\" : \"opacidad de Ventana\",\n  \"settings.subtitles\" : \"Subtítulos\",\n  \"settings.subtitles.font.color\" : \"color de Fuente\",\n  \"settings.subtitles.font.opacity\" : \"opacidad de Fuente\",\n  \"settings.subtitles.background.color\" : \"color de Fondo\",\n  \"settings.subtitles.background.opacity\": \"opacidad de Fondo\",\n  \"colors.white\": \"blanco\",\n  \"colors.black\": \"negro\",\n  \"colors.red\": \"rojo\",\n  \"colors.green\": \"verde\",\n  \"colors.blue\": \"azul\",\n  \"colors.cyan\": \"cian\",\n  \"colors.yellow\": \"amarillo\",\n  \"colors.magenta\": \"magenta\",\n  \"percent\": \"{value}%\",\n  \"settings.subtitles.font.size\": \"tamaño de Fuente\",\n  \"settings.subtitles.characterEdge\": \"borde del Caracter\",\n  \"settings.subtitles.characterEdge.raised\": \"alzado\",\n  \"settings.subtitles.characterEdge.depressed\": \"discreto\",\n  \"settings.subtitles.characterEdge.uniform\": \"uniforme\",\n  \"settings.subtitles.characterEdge.dropshadowed\": \"sombreado\",\n  \"settings.subtitles.font.family\": \"tipo de Fuente\",\n  \"settings.subtitles.font.family.monospacedserif\": \"monospaced serif\",\n  \"settings.subtitles.font.family.proportionalserif\": \"proportional serif\",\n  \"settings.subtitles.font.family.monospacedsansserif\": \"monospaced sans serif\",\n  \"settings.subtitles.font.family.proportionalsansserif\": \"proportional sans serif\",\n  \"settings.subtitles.font.family.casual\": \"casual\",\n  \"settings.subtitles.font.family.cursive\": \"cursiva\",\n  \"settings.subtitles.font.family.smallcapital\": \"small capital\",\n  \"settings.time.hours\": \"Horas\",\n  \"settings.time.minutes\": \"Minutos\",\n  \"settings.time.seconds\": \"Segundos\",\n  \"ads.remainingTime\": \"Este anuncio acabará en {remainingTime} segundos.\",\n  \"settings\": \"Configuración\",\n  \"fullscreen\" : \"Pantalla Completa\",\n  \"speed\": \"Velocidad\",\n  \"playPause\" : \"Reproducir/Pausa\",\n  \"play\": \"Reproducir\",\n  \"pause\": \"Pausa\",\n  \"open\": \"Abrir\",\n  \"close\": \"Cerrar\",\n  \"pictureInPicture\": \"Imagen en Imagen\",\n  \"appleAirplay\" : \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\" : \"VR\",\n  \"off\": \"off\",\n  \"auto\": \"auto\",\n  \"back\" : \"Atrás\",\n  \"reset\": \"Reiniciar\",\n  \"replay\": \"Rebobinar\",\n  \"normal\": \"normal\",\n  \"default\": \"predeterminado\",\n  \"live\": \"Directo\",\n  \"subtitle.example\": \"Ejemplo de Subtítulo\",\n  \"subtitle.select\": \"Seleccionar subtítulo\",\n  \"playingOn\": \"Reproduciendo en <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Conectando a <strong>{castDeviceName}</strong>...\",\n  \"watermarkLink\": \"Enlace al inicio\",\n  \"controlBar\": \"Controles del Reproductor\",\n  \"player\": \"Reproductor de Video\",\n  \"seekBar\": \"Línea de Tiempo\",\n  \"seekBar.value\": \"posición\",\n  \"seekBar.timeshift\": \"cambio de posición\",\n  \"seekBar.durationText\": \"de\"\n}","export const version: string = '{{VERSION}}';\n// Management\nexport { UIManager, UIInstanceManager } from './uimanager';\n// Factories\nexport { UIFactory } from './uifactory';\nexport { DemoFactory } from './demofactory';\n// Utils\nexport { ArrayUtils } from './arrayutils';\nexport { StringUtils } from './stringutils';\nexport { PlayerUtils } from './playerutils';\nexport { UIUtils } from './uiutils';\nexport { BrowserUtils } from './browserutils';\nexport { StorageUtils } from './storageutils';\nexport { ErrorUtils } from './errorutils';\n// Localization\nexport { i18n } from './localization/i18n';\n// Spatial Navigation\nexport { SpatialNavigation } from './spatialnavigation/spatialnavigation';\nexport { NavigationGroup } from './spatialnavigation/navigationgroup';\nexport { RootNavigationGroup } from './spatialnavigation/rootnavigationgroup';\nexport {\n  ListNavigationGroup,\n  ListOrientation,\n} from './spatialnavigation/ListNavigationGroup';\n// Components\nexport { Button } from './components/button';\nexport { ControlBar } from './components/controlbar';\nexport { FullscreenToggleButton } from './components/fullscreentogglebutton';\nexport { HugePlaybackToggleButton } from './components/hugeplaybacktogglebutton';\nexport {\n  PlaybackTimeLabel,\n  PlaybackTimeLabelMode,\n} from './components/playbacktimelabel';\nexport { PlaybackToggleButton } from './components/playbacktogglebutton';\nexport { SeekBar } from './components/seekbar';\nexport { SelectBox } from './components/selectbox';\nexport { ItemSelectionList } from './components/itemselectionlist';\nexport { SettingsPanel } from './components/settingspanel';\nexport { SettingsToggleButton } from './components/settingstogglebutton';\nexport { ToggleButton } from './components/togglebutton';\nexport { VideoQualitySelectBox } from './components/videoqualityselectbox';\nexport { VolumeToggleButton } from './components/volumetogglebutton';\nexport { VRToggleButton } from './components/vrtogglebutton';\nexport { Watermark } from './components/watermark';\nexport { UIContainer } from './components/uicontainer';\nexport { Container } from './components/container';\nexport { Label } from './components/label';\nexport { AudioQualitySelectBox } from './components/audioqualityselectbox';\nexport { AudioTrackSelectBox } from './components/audiotrackselectbox';\nexport { CastStatusOverlay } from './components/caststatusoverlay';\nexport { CastToggleButton } from './components/casttogglebutton';\nexport { Component } from './components/component';\nexport { ErrorMessageOverlay } from './components/errormessageoverlay';\nexport { RecommendationOverlay } from './components/recommendationoverlay';\nexport { SeekBarLabel } from './components/seekbarlabel';\nexport { SubtitleOverlay } from './components/subtitleoverlay';\nexport { SubtitleSelectBox } from './components/subtitleselectbox';\nexport { TitleBar } from './components/titlebar';\nexport { VolumeControlButton } from './components/volumecontrolbutton';\nexport { ClickOverlay } from './components/clickoverlay';\nexport { AdSkipButton } from './components/adskipbutton';\nexport { AdMessageLabel } from './components/admessagelabel';\nexport { AdClickOverlay } from './components/adclickoverlay';\nexport { PlaybackSpeedSelectBox } from './components/playbackspeedselectbox';\nexport { HugeReplayButton } from './components/hugereplaybutton';\nexport { BufferingOverlay } from './components/bufferingoverlay';\nexport { CastUIContainer } from './components/castuicontainer';\nexport { PlaybackToggleOverlay } from './components/playbacktoggleoverlay';\nexport { CloseButton } from './components/closebutton';\nexport {\n  MetadataLabel,\n  MetadataLabelContent,\n} from './components/metadatalabel';\nexport { AirPlayToggleButton } from './components/airplaytogglebutton';\nexport { VolumeSlider } from './components/volumeslider';\nexport { PictureInPictureToggleButton } from './components/pictureinpicturetogglebutton';\nexport { Spacer } from './components/spacer';\nexport { BackgroundColorSelectBox } from './components/subtitlesettings/backgroundcolorselectbox';\nexport { BackgroundOpacitySelectBox } from './components/subtitlesettings/backgroundopacityselectbox';\nexport { CharacterEdgeSelectBox } from './components/subtitlesettings/characteredgeselectbox';\nexport { FontColorSelectBox } from './components/subtitlesettings/fontcolorselectbox';\nexport { FontFamilySelectBox } from './components/subtitlesettings/fontfamilyselectbox';\nexport { FontOpacitySelectBox } from './components/subtitlesettings/fontopacityselectbox';\nexport { FontSizeSelectBox } from './components/subtitlesettings/fontsizeselectbox';\nexport { SubtitleSettingSelectBox } from './components/subtitlesettings/subtitlesettingselectbox';\nexport { SubtitleSettingsLabel } from './components/subtitlesettings/subtitlesettingslabel';\nexport { WindowColorSelectBox } from './components/subtitlesettings/windowcolorselectbox';\nexport { WindowOpacitySelectBox } from './components/subtitlesettings/windowopacityselectbox';\nexport { SubtitleSettingsResetButton } from './components/subtitlesettings/subtitlesettingsresetbutton';\nexport { ListBox } from './components/listbox';\nexport { SubtitleListBox } from './components/subtitlelistbox';\nexport { AudioTrackListBox } from './components/audiotracklistbox';\nexport { SettingsPanelPage } from './components/settingspanelpage';\nexport { SettingsPanelPageBackButton } from './components/settingspanelpagebackbutton';\nexport { SettingsPanelPageOpenButton } from './components/settingspanelpageopenbutton';\nexport { SubtitleSettingsPanelPage } from './components/subtitlesettings/subtitlesettingspanelpage';\nexport { SettingsPanelItem } from './components/settingspanelitem';\nexport { ReplayButton } from './components/replaybutton';\n\ndeclare global {\n  interface Window {\n    isRadioModeActive: boolean | null;\n    isRadioModeAvailable: boolean | null;\n    isQuanteecDisplayed:  boolean | null;\n  }\n}\n\nconst state = {\n  isRadioModeActive: null as boolean | null,\n  isRadioModeAvailable: null as boolean | null,\n  isQuanteecDisplayed: null as boolean | null,\n};\n\nif (typeof window.isRadioModeActive === 'undefined') {\n  Object.defineProperty(window, 'isRadioModeActive', {\n    get() {\n      return state.isRadioModeActive;\n    },\n    set(value) {\n      state.isRadioModeActive = value;\n      const event = new CustomEvent('isRadioModeActiveChange', {\n        detail: value,\n      });\n      window.dispatchEvent(event);\n    },\n  });\n}\n\nif (typeof window.isRadioModeAvailable === 'undefined') {\n  Object.defineProperty(window, 'isRadioModeAvailable', {\n    get() {\n      return state.isRadioModeAvailable;\n    },\n    set(value) {\n      state.isRadioModeAvailable = value;\n      const event = new CustomEvent('isRadioModeAvailableChange', {\n        detail: value,\n      });\n      window.dispatchEvent(event);\n    },\n  });\n}\n\nif (typeof window.isQuanteecDisplayed === 'undefined') {\n  Object.defineProperty(window, 'isQuanteecDisplayed', {\n    get() {\n      return state.isQuanteecDisplayed;\n    },\n    set(value) {\n      state.isQuanteecDisplayed = value;\n      const event = new CustomEvent('isQuanteecDisplayedChange', {\n        detail: value,\n      });\n      window.dispatchEvent(event);\n    },\n  });\n}\n\n// Object.assign polyfill for ES5/IE9\n// https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nif (typeof Object.assign !== 'function') {\n  Object.assign = function (target: any) {\n    'use strict';\n    if (target == null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    target = Object(target);\n    for (let index = 1; index < arguments.length; index++) {\n      let source = arguments[index];\n      if (source != null) {\n        for (let key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n}\n","import { PlayerAPI, PlayerEvent, PlayerEventBase, PlayerEventCallback } from 'bitmovin-player';\nimport { WrappedPlayer } from './uimanager';\n\nexport enum MobileV3PlayerEvent {\n  SourceError = 'sourceerror',\n  PlayerError = 'playererror',\n  PlaylistTransition = 'playlisttransition',\n}\n\nexport interface MobileV3PlayerErrorEvent extends PlayerEventBase {\n  code: number;\n  message: string;\n}\n\nexport interface MobileV3SourceErrorEvent extends PlayerEventBase {\n  code: number;\n  message: string;\n}\n\nexport type MobileV3PlayerEventType = PlayerEvent | MobileV3PlayerEvent;\n\nexport interface MobileV3PlayerAPI extends PlayerAPI {\n  on(eventType: MobileV3PlayerEventType, callback: PlayerEventCallback): void;\n  exports: PlayerAPI['exports'] & { PlayerEvent: MobileV3PlayerEventType };\n}\n\nexport function isMobileV3PlayerAPI(player: WrappedPlayer | PlayerAPI | MobileV3PlayerAPI): player is MobileV3PlayerAPI {\n  for (const key in MobileV3PlayerEvent) {\n    if (MobileV3PlayerEvent.hasOwnProperty(key) && !player.exports.PlayerEvent.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import {Event, EventDispatcher, NoArgs} from './eventdispatcher';\nimport {BrowserUtils} from './browserutils';\nimport { UIInstanceManager } from './uimanager';\nimport { PlayerAPI, TimeRange } from 'bitmovin-player';\n\nexport namespace PlayerUtils {\n\n  export enum PlayerState {\n    Idle,\n    Prepared,\n    Playing,\n    Paused,\n    Finished,\n  }\n\n  export function isTimeShiftAvailable(player: PlayerAPI): boolean {\n    return player.isLive() && player.getMaxTimeShift() !== 0;\n  }\n\n  export function getState(player: PlayerAPI): PlayerState {\n    if (player.hasEnded()) {\n      return PlayerState.Finished;\n    } else if (player.isPlaying()) {\n      return PlayerState.Playing;\n    } else if (player.isPaused()) {\n      return PlayerState.Paused;\n    } else if (player.getSource() != null) {\n      return PlayerState.Prepared;\n    } else {\n      return PlayerState.Idle;\n    }\n  }\n\n  /**\n   * Returns the currentTime - seekableRange.start. This ensures a user-friendly currentTime after a live stream\n   * transitioned to VoD.\n   * @param player\n   */\n  export function getCurrentTimeRelativeToSeekableRange(player: PlayerAPI): number {\n    const currentTime = player.getCurrentTime();\n    if (player.isLive()) {\n      return currentTime;\n    }\n\n    const seekableRangeStart = PlayerUtils.getSeekableRangeStart(player, 0);\n    return currentTime - seekableRangeStart;\n  }\n\n  /**\n   * Returns the start value of the seekable range or the defaultValue if no seekableRange is present.\n   * For now this happens only in combination with Mobile SDKs.\n   *\n   * TODO: remove this function in next major release\n   *\n   * @param player\n   * @param defaultValue\n   */\n  export function getSeekableRangeStart(player: PlayerAPI, defaultValue: number = 0) {\n    return player.getSeekableRange() && player.getSeekableRange().start || defaultValue;\n  }\n\n  /**\n   * Calculates player seekable time range for live.\n   * As the player returns `{ start: -1, end: -1 }` for live streams we need to calculate the `seekableRange` based on `maxTimeshift`.\n   *\n   * @param player\n   */\n  export function getSeekableRangeRespectingLive(player: PlayerAPI): TimeRange {\n    if (!player.isLive()) {\n      return player.getSeekableRange();\n    }\n\n    const currentTimeshift = -player.getTimeShift();\n    const maxTimeshift = -player.getMaxTimeShift();\n    const currentTime = player.getCurrentTime();\n\n    const end = currentTime + (currentTimeshift);\n    const start = currentTime - (maxTimeshift - currentTimeshift);\n\n    return { start, end };\n  }\n\n  export interface TimeShiftAvailabilityChangedArgs extends NoArgs {\n    timeShiftAvailable: boolean;\n  }\n\n  export class TimeShiftAvailabilityDetector {\n\n    private player: PlayerAPI;\n    private timeShiftAvailable: boolean;\n    private timeShiftAvailabilityChangedEvent = new EventDispatcher<PlayerAPI, TimeShiftAvailabilityChangedArgs>();\n\n    constructor(player: PlayerAPI) {\n      this.player = player;\n      this.timeShiftAvailable = undefined;\n\n      let timeShiftDetector = () => {\n        this.detect();\n      };\n      // Try to detect timeshift availability when source is loaded, which works for DASH streams\n      player.on(player.exports.PlayerEvent.SourceLoaded, timeShiftDetector);\n      // With HLS/NativePlayer streams, getMaxTimeShift can be 0 before the buffer fills, so we need to additionally\n      // check timeshift availability in TimeChanged\n      player.on(player.exports.PlayerEvent.TimeChanged, timeShiftDetector);\n    }\n\n    detect(): void {\n      if (this.player.isLive()) {\n        let timeShiftAvailableNow = PlayerUtils.isTimeShiftAvailable(this.player);\n\n        // When the availability changes, we fire the event\n        if (timeShiftAvailableNow !== this.timeShiftAvailable) {\n          this.timeShiftAvailabilityChangedEvent.dispatch(this.player, { timeShiftAvailable: timeShiftAvailableNow });\n          this.timeShiftAvailable = timeShiftAvailableNow;\n        }\n      }\n    }\n\n    get onTimeShiftAvailabilityChanged(): Event<PlayerAPI, TimeShiftAvailabilityChangedArgs> {\n      return this.timeShiftAvailabilityChangedEvent.getEvent();\n    }\n  }\n\n  export interface LiveStreamDetectorEventArgs extends NoArgs {\n    live: boolean;\n  }\n\n  /**\n   * Detects changes of the stream type, i.e. changes of the return value of the player#isLive method.\n   * Normally, a stream cannot change its type during playback, it's either VOD or live. Due to bugs on some\n   * platforms or browsers, it can still change. It is therefore unreliable to just check #isLive and this detector\n   * should be used as a workaround instead.\n   *\n   * Additionally starting with player v8.19.0 we have the use-case that a live stream changes into a vod.\n   * The DurationChanged event indicates this switch.\n   *\n   * Known cases:\n   *\n   * - HLS VOD on Android 4.3\n   * Video duration is initially 'Infinity' and only gets available after playback starts, so streams are wrongly\n   * reported as 'live' before playback (the live-check in the player checks for infinite duration).\n   *\n   * @deprecated since UI v3.9.0 in combination with player v8.19.0 use PlayerEvent.DurationChanged instead\n   *\n   * TODO: remove this class in next major release\n   */\n  export class LiveStreamDetector {\n\n    private player: PlayerAPI;\n    private live: boolean;\n    private liveChangedEvent = new EventDispatcher<PlayerAPI, LiveStreamDetectorEventArgs>();\n    private uimanager: UIInstanceManager;\n\n    constructor(player: PlayerAPI, uimanager: UIInstanceManager) {\n      this.player = player;\n      this.uimanager = uimanager;\n      this.live = undefined;\n\n      let liveDetector = () => {\n        this.detect();\n      };\n      this.uimanager.getConfig().events.onUpdated.subscribe(liveDetector);\n      // Re-evaluate when playback starts\n      player.on(player.exports.PlayerEvent.Play, liveDetector);\n\n      // HLS live detection workaround for Android:\n      // Also re-evaluate during playback, because that is when the live flag might change.\n      // (Doing it only in Android Chrome saves unnecessary overhead on other platforms)\n      if (BrowserUtils.isAndroid && BrowserUtils.isChrome) {\n        player.on(player.exports.PlayerEvent.TimeChanged, liveDetector);\n      }\n\n      // DurationChanged event was introduced with player v8.19.0\n      if (player.exports.PlayerEvent.DurationChanged) {\n        player.on(player.exports.PlayerEvent.DurationChanged, liveDetector);\n      }\n\n      // Ad video's isLive() might be different than the actual video's isLive().\n      player.on(player.exports.PlayerEvent.AdBreakStarted, liveDetector);\n      player.on(player.exports.PlayerEvent.AdBreakFinished, liveDetector);\n    }\n\n    detect(): void {\n      let liveNow = this.player.isLive();\n\n      // Compare current to previous live state flag and fire event when it changes. Since we initialize the flag\n      // with undefined, there is always at least an initial event fired that tells listeners the live state.\n      if (liveNow !== this.live) {\n        this.liveChangedEvent.dispatch(this.player, { live: liveNow });\n        this.live = liveNow;\n      }\n    }\n\n    get onLiveChanged(): Event<PlayerAPI, LiveStreamDetectorEventArgs> {\n      return this.liveChangedEvent.getEvent();\n    }\n  }\n}\n","import { NavigationGroup } from './navigationgroup';\nimport { Action, Direction } from './types';\nimport { Container } from '../components/container';\nimport { Component } from '../components/component';\n\nexport enum ListOrientation {\n  Horizontal = 'horizontal',\n  Vertical = 'vertical',\n}\n\nexport class ListNavigationGroup extends NavigationGroup {\n  private readonly listNavigationDirections: Direction[];\n\n  constructor(orientation: ListOrientation, container: Container<unknown>, ...components: Component<unknown>[]) {\n    super(container, ...components);\n\n    switch (orientation) {\n      case ListOrientation.Vertical:\n        this.listNavigationDirections = [Direction.UP, Direction.DOWN];\n        break;\n\n      case ListOrientation.Horizontal:\n        this.listNavigationDirections = [Direction.LEFT, Direction.RIGHT];\n        break;\n    }\n  }\n\n  public handleAction(action: Action): void {\n    super.handleAction(action);\n\n    if (action === Action.SELECT) {\n      // close the container when a list entry is selected\n      this.handleAction(Action.BACK);\n    }\n  }\n\n  public handleNavigation(direction: Direction): void {\n    super.handleNavigation(direction);\n\n    if (!this.listNavigationDirections.includes(direction)) {\n      // close the container on navigation inputs that don't align\n      // with the orientation of the list\n      this.handleAction(Action.BACK);\n    }\n  }\n}\n","import { Component } from '../components/component';\nimport { Container } from '../components/container';\nimport { isComponent, isContainer, isListBox } from './typeguards';\n\n/**\n * Recursively resolves a container and the components contained within them, building a flat list of components.\n *\n * @param container The container to get the contained components from\n */\nfunction resolveAllComponents(container: Container<unknown>): Component<unknown>[] {\n  const childComponents: Component<unknown>[] = [];\n\n  container.getComponents().forEach(containerOrComponent => {\n    if (isContainer(containerOrComponent)) {\n      childComponents.push(...resolveAllComponents(containerOrComponent));\n    } else if (isComponent(containerOrComponent)) {\n      childComponents.push(containerOrComponent);\n    }\n  });\n\n  return childComponents;\n}\n\n/**\n * Returns the HTML elements associated to the provided component.\n *\n * @param component The component to get the HTML elements from\n */\nfunction toHtmlElement(component: Component<unknown>): HTMLElement[] {\n  if (isListBox(component)) {\n    return [].slice.call(component.getDomElement().get()[0].children);\n  } else {\n    return component.getDomElement().get().slice(0, 1);\n  }\n}\n\n/**\n * Takes the provided list of components and flat-maps them to a list of their respective HTML elements. In case a\n * provided component is a container, the children of that container will be resolved recursively. Ignores components\n * that are hidden.\n *\n * @param components The components to map to HTML elements\n */\nexport function getHtmlElementsFromComponents(components: Component<unknown>[]): HTMLElement[] {\n  const htmlElements: HTMLElement[] = [];\n\n  components\n    .filter(component => !component.isHidden())\n    .forEach(component => {\n      const elementsToConsider = component instanceof Container ? resolveAllComponents(component) : [component];\n\n      elementsToConsider.forEach(component => {\n        htmlElements.push(...toHtmlElement(component));\n      });\n    });\n\n  return htmlElements;\n}\n","import { Action, Direction, KeyMap } from './types';\nimport { BrowserUtils } from '../browserutils';\n\nconst TizenKeyMap = {\n  isApplicable: () => BrowserUtils.isTizen,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // D-pad OK\n    13: Action.SELECT,\n    // Back\n    10009: Action.BACK,\n  },\n};\n\nconst WebOsKeyMap = {\n  isApplicable: () => BrowserUtils.isWebOs,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // D-pad OK\n    13: Action.SELECT,\n    // Back\n    461: Action.BACK,\n  },\n};\n\nconst PlayStationKeyMap = {\n  isApplicable: () => BrowserUtils.isPlayStation,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // Cross\n    13: Action.SELECT,\n    // Circle\n    27: Action.BACK,\n  },\n};\n\nconst AndroidKeyMap = {\n  isApplicable: () => BrowserUtils.isAndroid,\n  keyCodes: {\n    // D-pad Up\n    19: Direction.UP,\n    // D-pad Down\n    20: Direction.DOWN,\n    // D-pad Left\n    21: Direction.LEFT,\n    // D-pad Right\n    22: Direction.RIGHT,\n    // D-pad Center\n    23: Action.SELECT,\n    // Enter\n    66: Action.SELECT,\n    // Back\n    4: Action.BACK,\n  },\n};\n\nconst HisenseKeyMap = {\n  isApplicable: () => BrowserUtils.isHisense,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // OK\n    13: Action.SELECT,\n    // Back\n    8: Action.BACK,\n  },\n};\n\n// Default key map used on desktops\nconst DefaultKeyMap = {\n  // Arrow Up\n  38: Direction.UP,\n  // Arrow Down\n  40: Direction.DOWN,\n  // Arrow Left\n  37: Direction.LEFT,\n  // Arrow Right\n  39: Direction.RIGHT,\n  // Enter\n  13: Action.SELECT,\n  // Escape\n  27: Action.BACK,\n};\n\n/**\n * Returns the matching key map for the current platform.\n */\nexport function getKeyMapForPlatform(): KeyMap {\n  const applicableKeyMap = [\n    WebOsKeyMap,\n    TizenKeyMap,\n    PlayStationKeyMap,\n    HisenseKeyMap,\n    AndroidKeyMap,\n  ].find(keyMap => keyMap.isApplicable());\n\n  if (applicableKeyMap) {\n    return applicableKeyMap.keyCodes;\n  } else {\n    return DefaultKeyMap;\n  }\n}\n","import { Direction } from './types';\n\ninterface Vector {\n  x: number;\n  y: number;\n}\n\n/**\n * Calculates the length of a vector.\n *\n * @param vector The vector to calculate the length of\n */\nfunction length(vector: Vector): number {\n  return Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));\n}\n\n/**\n * Normalizes the given vector.\n *\n * @param vector The vector to normalize\n */\nfunction normalize(vector: Vector): Vector {\n  const len = length(vector);\n\n  return {\n    x: vector.x / len,\n    y: vector.y / len,\n  };\n}\n\n/**\n * Calculates the dot product between 2 vectors.\n *\n * @param a The first vector\n * @param b The second vector\n */\nfunction dotProduct(a: Vector, b: Vector): number {\n  return a.x * b.x + a.y * b.y;\n}\n\n/**\n * Calculates the distance between the 2 points pointed to by the provided vectors.\n *\n * @param a The first vector\n * @param b The second vector\n */\nfunction distance(a: Vector, b: Vector): number {\n  return length({\n    x: b.x - a.x,\n    y: b.y - a.y,\n  });\n}\n\n/**\n * Returns a vector that corresponds to the center of the provided element.\n *\n * @param element The element to get the center of\n */\nfunction getElementVector(element: HTMLElement): Vector {\n  const boundingRect = getBoundingRectFromElement(element);\n\n  return {\n    x: boundingRect.x + boundingRect.width / 2,\n    y: boundingRect.y + boundingRect.height / 2,\n  };\n}\n\n/**\n * Returns the angle in degrees between the unit vector pointing in the given {Direction} and the unit vector that\n * points from the current element to another element.\n *\n * @param a The vector of the current element\n * @param b The vector of the other element\n * @param direction The direction to move along\n */\nfunction calculateAngle(a: Vector, b: Vector, direction: Direction): number {\n  const directionVector = {\n    x: (direction === Direction.LEFT ? -1 : direction === Direction.RIGHT ? 1 : 0),\n    y: (direction === Direction.UP ? -1 : direction === Direction.DOWN ? 1 : 0),\n  };\n\n  const elementVector = normalize({\n    x: b.x - a.x,\n    y: b.y - a.y,\n  });\n\n  const angleCos = dotProduct(directionVector, elementVector) / (length(directionVector) * length(elementVector));\n\n  return Math.acos(angleCos) * 180 / Math.PI;\n}\n\n/**\n * Returns the closest element to the current element when trying to navigate in the provided direction. Returns\n * undefined, if there is not element in the given direction.\n *\n * @param activeElement The currently selected element\n * @param elements The list of all elements that can be navigated to\n * @param direction The direction in which to navigate\n */\nexport function getElementInDirection(\n  activeElement: HTMLElement,\n  elements: HTMLElement[],\n  direction: Direction,\n): HTMLElement | undefined {\n  if (!activeElement) return undefined;\n\n  const cutoffAngle = 45;\n  const activeElemVector = getElementVector(activeElement);\n\n  return elements\n    // don't take the current element into account\n    .filter(elem => elem !== activeElement)\n    // get the angle between, and distance to any other element from the current element\n    .map(element => {\n      const elementVector = getElementVector(element);\n      const dist = distance(activeElemVector, elementVector);\n      const angle = calculateAngle(activeElemVector, elementVector, direction);\n\n      return { angle, dist, element };\n    })\n    // filter out any elements that don't align with the direction we're trying to move in\n    .filter(({ angle }) => angle <= cutoffAngle)\n    // sort the resulting elements based on their distance to the current element in ascending order\n    .sort(({ angle: angleA, dist: distA }, { angle: angleB, dist: distB }) => (angleA - angleB) + (distA - distB))\n    // return the element closest to the current element\n    .shift()?.element;\n}\n\n/**\n * Returns DOMRect like object containing horizontal X and vertical Y coordinates from and HTMLElement.\n * Handles use-cases for getBoundingClientRect when the return type can be either\n * a ClientRect or DOMRect object type.\n *\n * @param element The currently selected element\n */\nexport function getBoundingRectFromElement(element: HTMLElement) {\n  const boundingRect = element.getBoundingClientRect();\n\n  if (typeof boundingRect.x !== 'number' && typeof boundingRect.y !== 'number') {\n    boundingRect.x = boundingRect.left;\n    boundingRect.y = boundingRect.top;\n  }\n\n  return boundingRect;\n}\n\n","import { Container } from '../components/container';\nimport { Component } from '../components/component';\nimport { getElementInDirection } from './navigationalgorithm';\nimport { getHtmlElementsFromComponents } from './gethtmlelementsfromcomponents';\nimport { NodeEventSubscriber } from './nodeeventsubscriber';\nimport { isSettingsPanel } from './typeguards';\nimport { Action, ActionCallback, Callback, Direction, NavigationCallback } from './types';\n\n/**\n * Used as part of spatial navigation. Groups together different components to which you can navigate to, in a single\n * navigation group.\n *\n * Responsible for finding elements in direction on navigation and for tracking active element inside the group.\n * Triggers blur and focus on element when active element is changed, as well as click on element on `Action.SELECT`.\n * Will call `hideUi()` on passed in container if `Action.BACK` is called.\n */\nexport class NavigationGroup {\n  private activeElement?: HTMLElement;\n  private activeElementBeforeDisable?: HTMLElement;\n  private readonly components: Component<unknown>[];\n  private removeElementHoverEventListeners = () => {};\n  private readonly eventSubscriber: NodeEventSubscriber;\n\n  constructor(public readonly container: Container<unknown>, ...components: Component<unknown>[]) {\n    this.components = components;\n    this.eventSubscriber = new NodeEventSubscriber();\n  }\n\n  /**\n   * If overwritten, allows to implement custom navigation behavior. Per default, the internal handler will still be\n   * executed. To prevent execution of the default navigation handler, call `preventDefault()`;\n   *\n   * @param direction {Direction} The direction to move along\n   * @param target {HTMLElement} The target element for the event\n   * @param preventDefault {() => void} A function that, when called, will prevent the execution of the default handler\n   */\n  public onNavigation?: NavigationCallback;\n\n  /**\n   * If overwritten, allows to implement custom action behavior. Per default, the internal handler will still be\n   * executed. To prevent execution of the default action handler, call `preventDefault()`;\n   *\n   * @param action {Action} The action that was called\n   * @param target {HTMLElement} The target element that action was called on\n   * @param preventDefault {() => void} A function that, when called, will prevent the execution of the default handler\n   */\n  public onAction?: ActionCallback;\n\n  /**\n   * Returns the active HTMLElement.\n   */\n  public getActiveElement(): HTMLElement | undefined {\n    return this.activeElement;\n  }\n\n  private focusElement(element: HTMLElement): void {\n    this.blurActiveElement();\n    this.activeElement = element;\n    this.activeElement.focus();\n  }\n\n  private blurActiveElement(): void {\n    this.activeElement?.blur();\n  }\n\n  private focusFirstElement(): void {\n    const element = getHtmlElementsFromComponents(this.components)[0];\n    if (element) {\n      this.focusElement(element);\n    }\n  }\n\n  protected defaultNavigationHandler(direction: Direction): void {\n    const targetElement = getElementInDirection(\n      this.activeElement,\n      getHtmlElementsFromComponents(this.components),\n      direction,\n    );\n\n    if (targetElement) {\n      this.focusElement(targetElement);\n    }\n  }\n\n  protected defaultActionHandler(action: Action): void {\n    switch (action) {\n      case(Action.SELECT):\n        this.activeElement.click();\n        break;\n      case(Action.BACK):\n        this.container.hide();\n        break;\n    }\n  }\n\n  private handleInput<T>(data: T, defaultHandler: (data: T) => void, userHandler?: Callback<T>): void {\n    let handleDefault = true;\n    const preventDefault = () => (handleDefault = false);\n\n    userHandler?.(data, this.activeElement, preventDefault);\n\n    if (handleDefault) {\n      defaultHandler.call(this, data);\n    }\n  }\n\n  /**\n   * Handles a navigation event.\n   *\n   * @param direction The direction of the navigation event\n   */\n  public handleNavigation(direction: Direction): void {\n    if (!this.activeElement) {\n      // If we do not have an active element, the active element has been disabled by a mouseleave\n      // event. We should continue the navigation at the exact place where we left off.\n      if (this.activeElementBeforeDisable) {\n        this.focusElement(this.activeElementBeforeDisable);\n      } else {\n        this.focusFirstElement();\n      }\n      return;\n    }\n    this.handleInput(direction, this.defaultNavigationHandler, this.onNavigation);\n  }\n\n  /**\n   * Handles an action event.\n   *\n   * @param action The action of the event\n   */\n  public handleAction(action: Action): void {\n    this.handleInput(action, this.defaultActionHandler, this.onAction);\n  }\n\n  /**\n   * Disable navigation group\n   *\n   * Call blur on active element, set as undefined, and track it as element before disable.\n   */\n  public disable(): void {\n    if (this.activeElement) {\n      this.activeElementBeforeDisable = this.activeElement;\n      this.blurActiveElement();\n      this.activeElement = undefined;\n    }\n  }\n\n  /**\n   * Enable navigation group\n   *\n   * Sets active element to either element that was active before disable, or first element of tracked elements.\n   * If it is settings panel, it will always focus first element in the list.\n   */\n  public enable(): void {\n    if (this.activeElementBeforeDisable && !isSettingsPanel(this.container)) {\n      this.focusElement(this.activeElementBeforeDisable);\n      this.activeElementBeforeDisable = undefined;\n    } else {\n      this.focusFirstElement();\n    }\n\n    this.trackElementHover();\n  }\n\n  /**\n   * Adds event listener for `mouseenter` on tracked elements to ensure tracking of active element will work together\n   * in combination of using mouse and key events.\n   */\n  private trackElementHover(): void {\n    this.removeElementHoverEventListeners();\n\n    const removeEventListenerFunctions = getHtmlElementsFromComponents(this.components).map(htmlElem => {\n      const enterListener = this.focusElement.bind(this, htmlElem);\n      const exitListener = () => this.disable();\n\n      this.eventSubscriber.on(htmlElem, 'mouseenter', enterListener);\n      this.eventSubscriber.on(htmlElem, 'mouseleave', exitListener);\n\n      return () => {\n        this.eventSubscriber.off(htmlElem, 'mouseenter', enterListener);\n        this.eventSubscriber.off(htmlElem, 'mouseleave', exitListener);\n      };\n    });\n\n    this.removeElementHoverEventListeners = () => removeEventListenerFunctions.forEach(fn => fn());\n  }\n\n  /**\n   * Dispose of navigation group\n   */\n  public release(): void {\n    this.eventSubscriber.release();\n    this.activeElement = undefined;\n    this.components.splice(0, this.components.length);\n    this.removeElementHoverEventListeners();\n  }\n}\n","type Listeners = ([Node, EventListenerOrEventListenerObject, boolean | AddEventListenerOptions])[];\n\n/**\n * Allows to subscribe to Node events.\n */\nexport class NodeEventSubscriber {\n  private readonly attachedListeners: Map<keyof HTMLElementEventMap, Listeners>;\n\n  constructor() {\n    this.attachedListeners = new Map();\n  }\n\n  private getEventListenersOfType(type: keyof HTMLElementEventMap): Listeners {\n    if (!this.attachedListeners.has(type)) {\n      this.attachedListeners.set(type, []);\n    }\n\n    return this.attachedListeners.get(type);\n  }\n\n  /**\n   * Adds the given event listener to the node.\n   *\n   * @param node The node to remove the event listener from\n   * @param type The event to listen to\n   * @param listener The listener to remove\n   * @param options The event listener options\n   */\n  public on(\n    node: Node,\n    type: keyof HTMLElementEventMap,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void {\n    node.addEventListener(type, listener, options);\n    this.getEventListenersOfType(type).push([node, listener, options]);\n  }\n\n  /**\n   * Removes the given event listener from the node.\n   *\n   * @param node The node to attach the event listener to\n   * @param type The event to listen to\n   * @param listener The listener to add\n   * @param options The event listener options\n   */\n  public off(\n    node: Node,\n    type: keyof HTMLElementEventMap,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void {\n    const listenersOfType = this.getEventListenersOfType(type);\n    const listenerIndex = listenersOfType.findIndex(([otherNode, otherListener, otherOptions]) => {\n      return otherNode === node && otherListener === listener && otherOptions === options;\n    });\n\n    node.removeEventListener(type, listener, options);\n\n    if (listenerIndex > -1) {\n      listenersOfType.splice(listenerIndex, 1);\n    }\n  }\n\n  /**\n   * Removes all attached event listeners.\n   */\n  public release(): void {\n    this.attachedListeners.forEach((listenersOfType, type) => {\n      listenersOfType.forEach(([element, listener, options]) => {\n        this.off(element, type, listener, options);\n      });\n    });\n    this.attachedListeners.clear();\n  }\n}\n","import { NavigationGroup } from './navigationgroup';\nimport { Component } from '../components/component';\nimport { UIContainer } from '../components/uicontainer';\nimport { Action, Direction } from './types';\n\n/**\n * Extends NavigationGroup and provides additional logic for hiding and showing the UI on the root container.\n */\nexport class RootNavigationGroup extends NavigationGroup {\n  constructor(public readonly container: UIContainer, ...elements: Component<unknown>[]) {\n    super(container, ...elements);\n  }\n\n  public handleAction(action: Action) {\n    this.container.showUi();\n\n    super.handleAction(action);\n  }\n\n  public handleNavigation(direction: Direction) {\n    this.container.showUi();\n\n    super.handleNavigation(direction);\n  }\n\n  protected defaultActionHandler(action: Action): void {\n    if (action === Action.BACK) {\n      this.container.hideUi();\n    } else {\n      super.defaultActionHandler(action);\n    }\n  }\n\n  public release(): void {\n    super.release();\n  }\n}\n","import { RootNavigationGroup } from './rootnavigationgroup';\nimport { NodeEventSubscriber } from './nodeeventsubscriber';\nimport { Action, Direction } from './types';\nimport {getBoundingRectFromElement} from './navigationalgorithm';\n\nconst DefaultScrubSpeedPercentage = 0.005;\nconst ScrubSpeedClearInterval = 100;\nconst ScrubSpeedMultiplier = 1.1;\n\n/**\n * Handles Spatial Navigation interaction with the seek bar. Ensures, that seek operations can be executed and that the\n * scrubbing tooltip is shown as if the user scrubbed using the mouse/touchscreen.\n */\nexport class SeekBarHandler {\n  private readonly cursorPosition = { x: 0, y: 0};\n  private readonly eventSubscriber: NodeEventSubscriber;\n  private isScrubbing = false;\n  private scrubSpeedResetTimeout: number;\n  private scrubSpeedPercentage = DefaultScrubSpeedPercentage;\n\n  constructor(private readonly rootNavigationGroup: RootNavigationGroup) {\n    this.rootNavigationGroup.onAction = this.onAction;\n    this.eventSubscriber = new NodeEventSubscriber();\n    this.rootNavigationGroup.onNavigation = this.onNavigation;\n  }\n\n  private updateScrubSpeedPercentage(): void {\n    clearTimeout(this.scrubSpeedResetTimeout);\n    this.scrubSpeedPercentage *= ScrubSpeedMultiplier;\n    this.scrubSpeedResetTimeout = window.setTimeout(\n      () => this.scrubSpeedPercentage = DefaultScrubSpeedPercentage, ScrubSpeedClearInterval,\n    );\n  }\n\n  private getIncrement(direction: Direction, seekBarWrapper: HTMLElement): number {\n    this.updateScrubSpeedPercentage();\n\n    const seekBarWidth = seekBarWrapper.getBoundingClientRect().width;\n    const increment = seekBarWidth * this.scrubSpeedPercentage;\n\n    return direction === Direction.RIGHT ? increment : -increment;\n  }\n\n  private resetCursorPosition(): void {\n    this.cursorPosition.x = 0;\n    this.cursorPosition.y = 0;\n  }\n\n  private updateCursorPosition(direction: Direction, seekBarWrapper: HTMLElement): void {\n    this.cursorPosition.x += this.getIncrement(direction, seekBarWrapper);\n  }\n\n  private initializeCursorPosition(seekBarWrapper: HTMLElement): void {\n    const playbackPositionMarker = getPlaybackPositionMarker(seekBarWrapper);\n    const rect = getBoundingRectFromElement(playbackPositionMarker);\n\n\n    const startX = rect.x + (rect.width / 2);\n    const startY = rect.y;\n\n    this.cursorPosition.x = startX;\n    this.cursorPosition.y = startY;\n  }\n\n  private initializeOrUpdateCursorPosition(seekBarWrapper: HTMLElement, direction: Direction): void {\n    if (this.isScrubbing) {\n      this.updateCursorPosition(direction, seekBarWrapper);\n    } else {\n      this.initializeCursorPosition(seekBarWrapper);\n    }\n\n    this.isScrubbing = true;\n  }\n\n  private getCursorPositionMouseEventInit(): MouseEventInit {\n    return {\n      clientX: this.cursorPosition.x,\n      clientY: this.cursorPosition.y,\n    };\n  }\n\n  private dispatchMouseMoveEvent(seekBar: Element): void {\n    seekBar.dispatchEvent(new MouseEvent('mousemove', this.getCursorPositionMouseEventInit()));\n  }\n\n  private readonly onNavigation = (direction: Direction, target: HTMLElement, preventDefault: () => void): void => {\n    if (!isSeekBarWrapper(target)) {\n      return;\n    }\n\n    if (direction === Direction.UP || direction === Direction.DOWN) {\n      this.stopSeeking(getSeekBar(target));\n\n      return;\n    }\n\n    this.initializeOrUpdateCursorPosition(target, direction);\n    this.dispatchMouseMoveEvent(getSeekBar(target));\n\n    preventDefault();\n  };\n\n  private dispatchMouseClickEvent(seekBar: Element): void {\n    const mouseDownHandler = () => {\n      const mouseEventInit = this.getCursorPositionMouseEventInit();\n\n      document.dispatchEvent(new MouseEvent('mouseup', mouseEventInit));\n      this.eventSubscriber.off(seekBar, 'mousedown', mouseDownHandler);\n      this.stopSeeking(seekBar);\n    };\n\n    this.eventSubscriber.on(seekBar, 'mousedown', mouseDownHandler);\n    seekBar.dispatchEvent(new MouseEvent('mousedown'));\n  }\n\n  private stopSeeking(seekBar: Element): void {\n    this.resetCursorPosition();\n    this.isScrubbing = false;\n    this.dispatchMouseLeaveEvent(seekBar);\n  }\n\n  private dispatchMouseLeaveEvent(seekBar: Element): void {\n    seekBar.dispatchEvent(new MouseEvent('mouseleave'));\n  }\n\n  private readonly onAction = (action: Action, target: HTMLElement, preventDefault: () => void): void => {\n    if (!isSeekBarWrapper(target)) {\n      return;\n    }\n\n    const seekBar = getSeekBar(target);\n\n    if (action === Action.SELECT && this.isScrubbing) {\n      this.dispatchMouseClickEvent(seekBar);\n      preventDefault();\n    } else if (action === Action.BACK) {\n      this.stopSeeking(seekBar);\n      preventDefault();\n    }\n  };\n\n  /**\n   * Releases the SeekBraHandler, making sure all event subscribers are removed.\n   */\n  public release(): void {\n    this.eventSubscriber.release();\n    this.rootNavigationGroup.onAction = undefined;\n    this.rootNavigationGroup.onNavigation = undefined;\n  }\n}\n\nfunction isSeekBarWrapper(element: HTMLElement): boolean {\n  return Array.from(element.classList).findIndex(className => /-ui-seekbar$/.test(className)) > -1;\n}\n\nfunction getSeekBar(seekBarWrapper: HTMLElement): Element {\n  return seekBarWrapper.children.item(0);\n}\n\nfunction getPlaybackPositionMarker(seekBarWrapper: HTMLElement): HTMLElement {\n  return seekBarWrapper.querySelector('[class*=\"seekbar-playbackposition-marker\"]');\n}\n","import { NavigationGroup } from './navigationgroup';\nimport { RootNavigationGroup } from './rootnavigationgroup';\nimport { NodeEventSubscriber } from './nodeeventsubscriber';\nimport { SeekBarHandler } from './seekbarhandler';\nimport { getKeyMapForPlatform } from './keymap';\nimport { Action, Direction, KeyMap } from './types';\nimport { isAction, isDirection } from './typeguards';\n\n/**\n * SpatialNavigation keeps track of all navigation groups, and updates the active navigation group when visibility\n * changes on group container.\n *\n * It listens to key events, and triggers either handleNavigation or handleAction on the active group.\n * SeekBarHandler will get instantiated with root navigation group and disposed on release of the spatial navigation.\n */\nexport class SpatialNavigation {\n  private unsubscribeVisibilityChangesFns: (() => void)[];\n  private readonly navigationGroups: NavigationGroup[] = [];\n  private readonly activeNavigationGroups: NavigationGroup[];\n  private readonly eventSubscriber: NodeEventSubscriber;\n  private readonly seekBarHandler: SeekBarHandler;\n  private readonly keyMap: KeyMap;\n\n  constructor(rootNavigationGroup: RootNavigationGroup, ...navigationGroups: NavigationGroup[]) {\n    this.seekBarHandler = new SeekBarHandler(rootNavigationGroup);\n\n    this.activeNavigationGroups = [];\n    this.unsubscribeVisibilityChangesFns = [];\n    this.eventSubscriber = new NodeEventSubscriber();\n    this.navigationGroups = [rootNavigationGroup, ...navigationGroups];\n    this.keyMap = getKeyMapForPlatform();\n\n    this.subscribeToNavigationGroupVisibilityChanges();\n    this.attachKeyEventHandler();\n    this.enableDefaultNavigationGroup();\n  }\n\n  private attachKeyEventHandler(): void {\n    this.eventSubscriber.on(document, 'keydown', this.handleKeyEvent, true);\n  }\n\n  private onShow = (group: NavigationGroup): void => {\n    this.activeNavigationGroups.push(group);\n    this.updateEnabledNavigationGroup();\n  };\n\n  private onHide = (group: NavigationGroup): void => {\n    const groupIndex = this.activeNavigationGroups.findIndex(other => other === group);\n\n    if (groupIndex > -1) {\n      group.disable();\n      this.activeNavigationGroups.splice(groupIndex, 1);\n      this.updateEnabledNavigationGroup();\n    }\n  };\n\n  /**\n   * Subscribes to onHide and onShow on all navigation groups containers as Spatial navigation tracks active navigation\n   * group based on their container visibility.\n   */\n  private subscribeToNavigationGroupVisibilityChanges(): void {\n    this.navigationGroups.forEach(group => {\n      const onShowHandler = () => this.onShow(group);\n      const onHideHandler = () => this.onHide(group);\n\n      group.container.onShow.subscribe(onShowHandler);\n      group.container.onHide.subscribe(onHideHandler);\n\n      this.unsubscribeVisibilityChangesFns.push(\n        () => group.container.onShow.unsubscribe(onShowHandler),\n        () => group.container.onHide.unsubscribe(onHideHandler),\n      );\n    });\n  }\n\n  private unsubscribeFromNavigationGroupVisibilityChanges(): void {\n    this.unsubscribeVisibilityChangesFns.forEach(unsub => unsub());\n    this.unsubscribeVisibilityChangesFns = [];\n  }\n\n  /**\n   * It will enable group of which container is currently shown\n   * If there are no groups with containers that are currently visible, it will enable root navigation group\n   */\n  private enableDefaultNavigationGroup(): void {\n    const isShown = (group: NavigationGroup) => group.container.isShown();\n    const groupToEnable = this.navigationGroups.find(isShown) ?? this.navigationGroups[0];\n\n    if (groupToEnable) {\n      this.activeNavigationGroups.push(groupToEnable);\n      this.updateEnabledNavigationGroup();\n    }\n  }\n\n  /**\n   * Disables navigation groups that are no longer active and calls enable on last pushed navigation group\n   */\n  private updateEnabledNavigationGroup(): void {\n    this.activeNavigationGroups.forEach((group, idx) => {\n      if (idx < this.activeNavigationGroups.length - 1) {\n        group.disable();\n      } else {\n        group.enable();\n      }\n    });\n  }\n\n  /**\n   * Returns currently active navigation group\n   */\n  public getActiveNavigationGroup(): NavigationGroup | undefined {\n    return this.activeNavigationGroups[this.activeNavigationGroups.length - 1];\n  }\n\n  /**\n   * Checks if keyboard event keycode is tracked either as Direction or Action and calls appropriate handler on active\n   * navigation group\n   *\n   * @param e {KeyboardEvent}\n   */\n  private handleKeyEvent = (e: KeyboardEvent): void => {\n    const event: Direction | Action | undefined = this.keyMap[getKeyCode(e)];\n\n    const active = this.getActiveNavigationGroup();\n    if (!active || !active.container || active.container.isHidden() || active.container.isDisabled()) {\n      return;\n    }\n\n    if (isDirection(event)) {\n      active.handleNavigation(event);\n\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    if (isAction(event)) {\n      active.handleAction(event);\n\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  };\n\n  /**\n   * Dispose of SpatialNavigation\n   *\n   * Remove all event handlers, release seekbar handler and release all navigation groups.\n   */\n  public release(): void {\n    this.unsubscribeFromNavigationGroupVisibilityChanges();\n    this.eventSubscriber.release();\n    this.navigationGroups.forEach(group => group.release());\n    this.seekBarHandler.release();\n  }\n}\n\nfunction getKeyCode(event: KeyboardEvent): number {\n  return event.keyCode;\n}\n","import { Component } from '../components/component';\nimport { SettingsPanel } from '../components/settingspanel';\nimport { Container } from '../components/container';\nimport { ListBox } from '../components/listbox';\nimport { Action, Direction } from './types';\n\nexport function isSettingsPanel(component: Component<unknown>): component is SettingsPanel {\n  return component instanceof SettingsPanel;\n}\n\nexport function isComponent(obj: unknown): obj is Component<unknown> {\n  return obj !== null && obj !== undefined && obj instanceof Component;\n}\n\nexport function isContainer(obj: unknown): obj is Container<unknown> {\n  return obj !== null && obj !== undefined && obj instanceof Container;\n}\n\nexport function isListBox(obj: unknown): obj is ListBox {\n  return obj instanceof ListBox;\n}\n\nexport function isDirection(direction: unknown): direction is Direction {\n  return typeof direction === 'string' && Object.values<string>(Direction).includes(direction);\n}\n\nexport function isAction(action: unknown): action is Action {\n  return typeof action === 'string' && Object.values<string>(Action).includes(action);\n}\n","export type Callback<T> = (data: T, target: HTMLElement, preventDefault: () => void) => void;\nexport type NavigationCallback = Callback<Direction>;\nexport type ActionCallback = Callback<Action>;\nexport type KeyMap = {\n  [keyCode: number]: Action | Direction;\n};\n\nexport enum Direction {\n  UP = 'up',\n  DOWN = 'down',\n  LEFT = 'left',\n  RIGHT = 'right',\n}\n\nexport enum Action {\n  SELECT = 'select',\n  BACK = 'back',\n}\n","export namespace StorageUtils {\n  let hasLocalStorageCache: boolean;\n\n  export function hasLocalStorage(): boolean {\n    if (hasLocalStorageCache) {\n      return hasLocalStorageCache;\n    }\n\n    // hasLocalStorage is used to safely ensure we can use localStorage\n    // taken from https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage\n    let storage: any = { length: 0 };\n    try {\n      storage = window['localStorage'];\n      let x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      hasLocalStorageCache = true;\n    }\n    catch (e) {\n      hasLocalStorageCache = e instanceof DOMException && (\n          // everything except Firefox\n        e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === 'QuotaExceededError' ||\n        // Firefox\n        e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n        // acknowledge QuotaExceededError only if there's something already stored\n        storage.length !== 0;\n    }\n    return hasLocalStorageCache;\n  }\n\n  /**\n   * Stores a string item into localStorage.\n   * @param key the item's key\n   * @param data the item's data\n   */\n  export function setItem(key: string, data: string): void {\n    if (StorageUtils.hasLocalStorage()) {\n      window.localStorage.setItem(key, data);\n    }\n  }\n\n  /**\n   * Gets an item's string value from the localStorage.\n   * @param key the key to look up its associated value\n   * @return {string | null} Returns the string if found, null if there is no data stored for the key\n   */\n  export function getItem(key: string): string | null {\n    if (StorageUtils.hasLocalStorage()) {\n      return window.localStorage.getItem(key);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Stores an object into localStorage. The object will be serialized to JSON. The following types are supported\n   * in addition to the default types:\n   *  - ColorUtils.Color\n   *\n   * @param key the key to store the data to\n   * @param data the object to store\n   */\n  export function setObject<T>(key: string, data: T): void {\n    if (StorageUtils.hasLocalStorage()) {\n      let json = JSON.stringify(data);\n      setItem(key, json);\n    }\n  }\n\n  /**\n   * Gets an object for the given key from localStorage. The object will be deserialized from JSON. Beside the\n   * default types, the following types are supported:\n   *  - ColorUtils.Color\n   *\n   * @param key the key to look up its associated object\n   * @return {any} Returns the object if found, null otherwise\n   */\n  export function getObject<T>(key: string): T {\n    if (StorageUtils.hasLocalStorage()) {\n      let json = getItem(key);\n\n      if (key) {\n        let object = JSON.parse(json);\n        return <T>object;\n      }\n    }\n    return null;\n  }\n}\n","import { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\nexport namespace StringUtils {\n\n  export let FORMAT_HHMMSS: string = 'hh:mm:ss';\n  export let FORMAT_MMSS: string = 'mm:ss';\n\n  /**\n   * Formats a number of seconds into a time string with the pattern hh:mm:ss.\n   *\n   * @param totalSeconds the total number of seconds to format to string\n   * @param format the time format to output (default: hh:mm:ss)\n   * @returns {string} the formatted time string\n   */\n  export function secondsToTime(totalSeconds: number, format: string = FORMAT_HHMMSS): string {\n    let isNegative = totalSeconds < 0;\n\n    if (isNegative) {\n      // If the time is negative, we make it positive for the calculation below\n      // (else we'd get all negative numbers) and reattach the negative sign later.\n      totalSeconds = -totalSeconds;\n    }\n\n    // Split into separate time parts\n    let hours = Math.floor(totalSeconds / 3600);\n    let minutes = Math.floor(totalSeconds / 60) - hours * 60;\n    let seconds = Math.floor(totalSeconds) % 60;\n\n    return (isNegative ? '-' : '') + format\n        .replace('hh', leftPadWithZeros(hours, 2))\n        .replace('mm', leftPadWithZeros(minutes, 2))\n        .replace('ss', leftPadWithZeros(seconds, 2));\n  }\n\n  export function secondsToText(totalSeconds: number): string {\n    const isNegative = totalSeconds < 0;\n\n    if (isNegative) {\n      // If the time is negative, we make it positive for the calculation below\n      // (else we'd get all negative numbers) and reattach the negative sign later.\n      totalSeconds = -totalSeconds;\n    }\n\n    // Split into separate time parts\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor(totalSeconds / 60) - hours * 60;\n    const seconds = Math.floor(totalSeconds) % 60;\n\n    return (isNegative ? '-' : '') +\n    (hours !== 0 ? `${leftPadWithZeros(hours, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.hours'))} ` : '') +\n    (minutes !== 0 ? `${leftPadWithZeros(minutes, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.minutes'))} ` : '') +\n    `${leftPadWithZeros(seconds, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.seconds'))}`;\n  }\n\n  /**\n   * Converts a number to a string and left-pads it with zeros to the specified length.\n   * Example: leftPadWithZeros(123, 5) => '00123'\n   *\n   * @param num the number to convert to string and pad with zeros\n   * @param length the desired length of the padded string\n   * @returns {string} the padded number as string\n   */\n  function leftPadWithZeros(num: number | string, length: number): string {\n    let text = num + '';\n    let padding = '0000000000'.substr(0, length - text.length);\n    return padding + text;\n  }\n\n  /**\n   * Fills out placeholders in an ad message.\n   *\n   * Has the placeholders '{remainingTime[formatString]}', '{playedTime[formatString]}' and\n   * '{adDuration[formatString]}', which are replaced by the remaining time until the ad can be skipped, the current\n   * time or the ad duration. The format string is optional. If not specified, the placeholder is replaced by the time\n   * in seconds. If specified, it must be of the following format:\n   * - %d - Inserts the time as an integer.\n   * - %0Nd - Inserts the time as an integer with leading zeroes, if the length of the time string is smaller than N.\n   * - %f - Inserts the time as a float.\n   * - %0Nf - Inserts the time as a float with leading zeroes.\n   * - %.Mf - Inserts the time as a float with M decimal places. Can be combined with %0Nf, e.g. %04.2f (the time\n   * 10.123 would be printed as 0010.12).\n   * - %hh:mm:ss\n   * - %mm:ss\n   *\n   * Examples:\n   * - { text: 'Ad: {remainingTime%mm:ss} secs' }\n   * An input value of 100 would be displayed as: 'Ad: 01:40 secs'\n   * - { text: 'Ad: {remainingTime%f} secs' }\n   * An input value of 100 would be displayed as: 'Ad: 100.0 secs'\n   *\n   * @param adMessage an ad message with optional placeholders to fill\n   * @param skipOffset if specified, {remainingTime} will be filled with the remaining time until the ad can be skipped\n   * @param player the player to get the time data from\n   * @returns {string} the ad message with filled placeholders\n   */\n  export function replaceAdMessagePlaceholders(adMessage: string, skipOffset: number, player: PlayerAPI) {\n    let adMessagePlaceholderRegex = new RegExp(\n      '\\\\{(remainingTime|playedTime|adDuration)(}|%((0[1-9]\\\\d*(\\\\.\\\\d+(d|f)|d|f)|\\\\.\\\\d+f|d|f)|hh:mm:ss|mm:ss)})',\n      'g',\n    );\n\n    return adMessage.replace(adMessagePlaceholderRegex, (formatString) => {\n      let time = 0;\n      if (formatString.indexOf('remainingTime') > -1) {\n        if (skipOffset) {\n          time = Math.ceil(skipOffset - player.getCurrentTime());\n        } else {\n          time = player.getDuration() - player.getCurrentTime();\n        }\n      } else if (formatString.indexOf('playedTime') > -1) {\n        time = player.getCurrentTime();\n      } else if (formatString.indexOf('adDuration') > -1) {\n        time = player.getDuration();\n      }\n      return formatNumber(Math.round(time), formatString);\n    });\n  }\n\n  function formatNumber(time: number, format: string) {\n    let formatStringValidationRegex = /%((0[1-9]\\d*(\\.\\d+(d|f)|d|f)|\\.\\d+f|d|f)|hh:mm:ss|mm:ss)/;\n    let leadingZeroesRegex = /(%0[1-9]\\d*)(?=(\\.\\d+f|f|d))/;\n    let decimalPlacesRegex = /\\.\\d*(?=f)/;\n\n    if (!formatStringValidationRegex.test(format)) {\n      // If the format is invalid, we set a default fallback format\n      format = '%d';\n    }\n\n    // Determine the number of leading zeros\n    let leadingZeroes = 0;\n    let leadingZeroesMatches = format.match(leadingZeroesRegex);\n    if (leadingZeroesMatches) {\n      leadingZeroes = parseInt(leadingZeroesMatches[0].substring(2));\n    }\n\n    // Determine the number of decimal places\n    let numDecimalPlaces = null;\n    let decimalPlacesMatches = format.match(decimalPlacesRegex);\n    if (decimalPlacesMatches && !isNaN(parseInt(decimalPlacesMatches[0].substring(1)))) {\n      numDecimalPlaces = parseInt(decimalPlacesMatches[0].substring(1));\n      if (numDecimalPlaces > 20) {\n        numDecimalPlaces = 20;\n      }\n    }\n\n    // Float format\n    if (format.indexOf('f') > -1) {\n      let timeString = '';\n\n      if (numDecimalPlaces !== null) {\n        // Apply fixed number of decimal places\n        timeString = time.toFixed(numDecimalPlaces);\n      } else {\n        timeString = '' + time;\n      }\n\n      // Apply leading zeros\n      if (timeString.indexOf('.') > -1) {\n        return leftPadWithZeros(timeString, timeString.length + (leadingZeroes - timeString.indexOf('.')));\n      } else {\n        return leftPadWithZeros(timeString, leadingZeroes);\n      }\n\n    }\n    // Time format\n    else if (format.indexOf(':') > -1) {\n      let totalSeconds = Math.ceil(time);\n\n      // hh:mm:ss format\n      if (format.indexOf('hh') > -1) {\n        return secondsToTime(totalSeconds);\n      }\n      // mm:ss format\n      else {\n        let minutes = Math.floor(totalSeconds / 60);\n        let seconds = totalSeconds % 60;\n\n        return leftPadWithZeros(minutes, 2) + ':' + leftPadWithZeros(seconds, 2);\n      }\n    }\n    // Integer format\n    else {\n      return leftPadWithZeros(Math.ceil(time), leadingZeroes);\n    }\n  }\n}\n","import { ListItem, ListSelector, ListSelectorConfig } from './components/listselector';\nimport { UIInstanceManager } from './uimanager';\nimport { PlayerAPI, SubtitleEvent, SubtitleTrack } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\n/**\n * Helper class to handle all subtitle related events\n *\n * This class listens to player events as well as the `ListSelector` event if selection changed\n */\nexport class SubtitleSwitchHandler {\n\n  private static SUBTITLES_OFF_KEY: string = 'null';\n\n  private player: PlayerAPI;\n  private listElement: ListSelector<ListSelectorConfig>;\n  private uimanager: UIInstanceManager;\n\n  constructor(player: PlayerAPI, element: ListSelector<ListSelectorConfig>, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.listElement = element;\n    this.uimanager = uimanager;\n\n    this.bindSelectionEvent();\n    this.bindPlayerEvents();\n    this.refreshSubtitles();\n  }\n\n  private bindSelectionEvent(): void {\n    this.listElement.onItemSelected.subscribe((_, value: string) => {\n      // TODO add support for multiple concurrent subtitle selections\n      if (value === SubtitleSwitchHandler.SUBTITLES_OFF_KEY) {\n        const currentSubtitle = this.player.subtitles.list().filter((subtitle) => subtitle.enabled).pop();\n        if (currentSubtitle) {\n          this.player.subtitles.disable(currentSubtitle.id);\n        }\n      } else {\n        this.player.subtitles.enable(value, true);\n      }\n    });\n  }\n\n  private bindPlayerEvents(): void {\n    this.player.on(this.player.exports.PlayerEvent.SubtitleAdded, this.addSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleEnabled, this.selectCurrentSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleDisabled, this.selectCurrentSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleRemoved, this.removeSubtitle);\n    // Update subtitles when source goes away\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.clearSubtitles);\n    // Update subtitles when the period within a source changes\n    this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshSubtitles);\n    this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshSubtitles);\n  }\n\n  private addSubtitle = (event: SubtitleEvent) => {\n    const subtitle = event.subtitle;\n    if (!this.listElement.hasItem(subtitle.id)) {\n      this.listElement.addItem(subtitle.id, subtitle.label);\n    }\n  };\n\n  private removeSubtitle = (event: SubtitleEvent) => {\n    const subtitle = event.subtitle;\n    if (this.listElement.hasItem(subtitle.id)) {\n      this.listElement.removeItem(subtitle.id);\n    }\n  };\n\n  private selectCurrentSubtitle = () => {\n    if (!this.player.subtitles) {\n      // Subtitles API not available (yet)\n      return;\n    }\n\n    let currentSubtitle = this.player.subtitles.list().filter((subtitle) => subtitle.enabled).pop();\n    this.listElement.selectItem(currentSubtitle ? currentSubtitle.id : SubtitleSwitchHandler.SUBTITLES_OFF_KEY);\n  };\n\n  private clearSubtitles = () => {\n    this.listElement.clearItems();\n  }\n\n  private refreshSubtitles = () => {\n    if (!this.player.subtitles) {\n      // Subtitles API not available (yet)\n      return;\n    }\n\n    const offListItem: ListItem = {\n      key: SubtitleSwitchHandler.SUBTITLES_OFF_KEY,\n      label: i18n.getLocalizer('off'),\n    };\n\n    const subtitles = this.player.subtitles.list();\n    const subtitleToListItem = (subtitle: SubtitleTrack): ListItem => {\n      return { key: subtitle.id, label: subtitle.label };\n    };\n\n    this.listElement.synchronizeItems([\n      offListItem, ...subtitles.map(subtitleToListItem),\n    ]);\n    this.selectCurrentSubtitle();\n  };\n}\n","// TODO change to internal (not exported) class, how to use in other files?\n/**\n * Executes a callback after a specified amount of time, optionally repeatedly until stopped.\n */\nexport class Timeout {\n\n  private readonly delay: number;\n  private readonly callback: () => void;\n  private readonly repeat: boolean;\n  // There's two setTimeout declarations, one on Window which returns type \"number\" and one in NodeJS which returns\n  // type \"Timer\". For unknown reasons builds on Jenkins fail due to a type mismatch when we use type \"number\" here,\n  // although it works on other platforms (e.g. Windows, Codeship).\n  // To work around the issue we use type \"any\". The type does not matter anyway because we're not working with\n  // this value except providing it to clearTimeout.\n  private timeoutOrIntervalId: any;\n  private active: boolean;\n\n  /**\n   * Creates a new timeout callback handler.\n   * @param delay the delay in milliseconds after which the callback should be executed\n   * @param callback the callback to execute after the delay time\n   * @param repeat if true, call the callback repeatedly in delay intervals\n   */\n  constructor(delay: number, callback: () => void, repeat: boolean = false) {\n    this.delay = delay;\n    this.callback = callback;\n    this.repeat = repeat;\n    this.timeoutOrIntervalId = 0;\n    this.active = false;\n  }\n\n  /**\n   * Starts the timeout and calls the callback when the timeout delay has passed.\n   * @returns {Timeout} the current timeout (so the start call can be chained to the constructor)\n   */\n  start(): this {\n    this.reset();\n    return this;\n  }\n\n  /**\n   * Clears the timeout. The callback will not be called if clear is called during the timeout.\n   */\n  clear(): void {\n    this.clearInternal();\n  }\n\n  /**\n   * Resets the passed timeout delay to zero. Can be used to defer the calling of the callback.\n   */\n  reset(): void {\n    this.clearInternal();\n\n    if (this.repeat) {\n      this.timeoutOrIntervalId = setInterval(this.callback, this.delay);\n    } else {\n      this.timeoutOrIntervalId = setTimeout(() => {\n        this.active = false;\n        this.callback();\n      }, this.delay);\n    }\n    this.active = true;\n  }\n\n  isActive(): boolean {\n    return this.active;\n  }\n\n  private clearInternal(): void {\n    if (this.repeat) {\n      clearInterval(this.timeoutOrIntervalId);\n    } else {\n      clearTimeout(this.timeoutOrIntervalId);\n    }\n    this.active = false;\n  }\n}","import { GoBackButton } from './../custom/ts/components/gobackbutton';\nimport { ResetButton } from './../custom/ts/components/resetbutton';\nimport { RadioModeToggleButton } from './../custom/ts/components/radiomode/radiomodetogglebutton';\nimport { QuanteecConsumptions } from './../custom/ts/components/quanteecconsumptions';\n\nimport { PlaybackJumpControlsOverlay } from '../custom/ts/components/playbackjumpoverlay';\nimport { SubtitleOverlay } from './components/subtitleoverlay';\nimport { SettingsPanelPage } from './components/settingspanelpage';\nimport { SettingsPanelItem } from './components/settingspanelitem';\nimport { VideoQualitySelectBox } from './components/videoqualityselectbox';\nimport { PlaybackSpeedSelectBox } from './components/playbackspeedselectbox';\nimport { AudioTrackSelectBox } from './components/audiotrackselectbox';\nimport { AudioQualitySelectBox } from './components/audioqualityselectbox';\nimport { SettingsPanel } from './components/settingspanel';\nimport { SubtitleSettingsPanelPage } from './components/subtitlesettings/subtitlesettingspanelpage';\nimport { SettingsPanelPageOpenButton } from './components/settingspanelpageopenbutton';\nimport { SubtitleSettingsLabel } from './components/subtitlesettings/subtitlesettingslabel';\nimport { SubtitleSelectBox } from './components/subtitleselectbox';\nimport { ControlBar } from './components/controlbar';\nimport { Container } from './components/container';\nimport {\n  PlaybackTimeLabel,\n  PlaybackTimeLabelMode,\n} from './components/playbacktimelabel';\nimport { SeekBar } from './components/seekbar';\nimport { SeekBarLabel } from './components/seekbarlabel';\nimport { PlaybackToggleButton } from './components/playbacktogglebutton';\nimport { VolumeToggleButton } from './components/volumetogglebutton';\nimport { VolumeSlider } from './components/volumeslider';\nimport { Spacer } from './components/spacer';\nimport { PictureInPictureToggleButton } from './components/pictureinpicturetogglebutton';\nimport { AirPlayToggleButton } from './components/airplaytogglebutton';\nimport { CastToggleButton } from './components/casttogglebutton';\nimport { VRToggleButton } from './components/vrtogglebutton';\nimport { SettingsToggleButton } from './components/settingstogglebutton';\nimport { FullscreenToggleButton } from './components/fullscreentogglebutton';\nimport { UIContainer } from './components/uicontainer';\nimport { BufferingOverlay } from './components/bufferingoverlay';\nimport { PlaybackToggleOverlay } from './components/playbacktoggleoverlay';\nimport { CastStatusOverlay } from './components/caststatusoverlay';\nimport { TitleBar } from './components/titlebar';\nimport { RecommendationOverlay } from './components/recommendationoverlay';\nimport { Watermark } from './components/watermark';\nimport { ErrorMessageOverlay } from './components/errormessageoverlay';\nimport { AdClickOverlay } from './components/adclickoverlay';\nimport { AdMessageLabel } from './components/admessagelabel';\nimport { AdSkipButton } from './components/adskipbutton';\nimport { CloseButton } from './components/closebutton';\n\nimport {\n  MetadataLabel,\n  MetadataLabelContent,\n} from './components/metadatalabel';\nimport { PlayerUtils } from './playerutils';\nimport { Label } from './components/label';\nimport { CastUIContainer } from './components/castuicontainer';\nimport { UIConditionContext, UIManager } from './uimanager';\nimport { UIConfig } from './uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\nimport { SubtitleListBox } from './components/subtitlelistbox';\nimport { AudioTrackListBox } from './components/audiotracklistbox';\nimport { SpatialNavigation } from './spatialnavigation/spatialnavigation';\nimport { RootNavigationGroup } from './spatialnavigation/rootnavigationgroup';\nimport {\n  ListNavigationGroup,\n  ListOrientation,\n} from './spatialnavigation/ListNavigationGroup';\n\ndeclare global {\n  interface Window {\n    bitmovin: any;\n  }\n}\n\nlet uiManager: UIManager;\nlet playerApi: PlayerAPI;\nlet uiConfig: UIConfig;\n\nexport namespace UIFactory {\n  export function buildDefaultUI(\n    player: PlayerAPI,\n    config: UIConfig = {},\n  ): UIManager {\n    return UIFactory.buildModernUI(player, config);\n  }\n\n  export function buildDefaultSmallScreenUI(\n    player: PlayerAPI,\n    config: UIConfig = {},\n  ): UIManager {\n    uiConfig = config;\n    playerApi = player;\n    uiManager = UIFactory.buildModernSmallScreenUI(player, config);\n    return uiManager;\n  }\n\n  export function buildDefaultCastReceiverUI(\n    player: PlayerAPI,\n    config: UIConfig = {},\n  ): UIManager {\n    return UIFactory.buildModernCastReceiverUI(player, config);\n  }\n\n  export function buildDefaultTvUI(\n    player: PlayerAPI,\n    config: UIConfig = {},\n  ): UIManager {\n    return UIFactory.buildModernTvUI(player, config);\n  }\n\n  export function modernUI({\n    radioModeAvailable,\n  }: {\n    radioModeAvailable: boolean;\n  }) {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let mainSettingsPanelPage = new SettingsPanelPage({\n      components: [\n        new SettingsPanelItem(\n          i18n.getLocalizer('settings.video.quality'),\n          new VideoQualitySelectBox(),\n        ),\n        new SettingsPanelItem(\n          i18n.getLocalizer('speed'),\n          new PlaybackSpeedSelectBox(),\n        ),\n        new SettingsPanelItem(\n          i18n.getLocalizer('settings.audio.track'),\n          new AudioTrackSelectBox(),\n        ),\n        new SettingsPanelItem(\n          i18n.getLocalizer('settings.audio.quality'),\n          new AudioQualitySelectBox(),\n        ),\n      ],\n    });\n\n    let settingsPanel = new SettingsPanel({\n      components: [mainSettingsPanelPage],\n      hidden: true,\n    });\n\n    let subtitleSettingsPanelPage = new SubtitleSettingsPanelPage({\n      settingsPanel: settingsPanel,\n      overlay: subtitleOverlay,\n    });\n\n    const subtitleSelectBox = new SubtitleSelectBox();\n\n    let subtitleSettingsOpenButton = new SettingsPanelPageOpenButton({\n      targetPage: subtitleSettingsPanelPage,\n      container: settingsPanel,\n      ariaLabel: i18n.getLocalizer('settings.subtitles'),\n      text: i18n.getLocalizer('open'),\n    });\n\n    mainSettingsPanelPage.addComponent(\n      new SettingsPanelItem(\n        new SubtitleSettingsLabel({\n          text: i18n.getLocalizer('settings.subtitles'),\n          opener: subtitleSettingsOpenButton,\n        }),\n        subtitleSelectBox,\n        {\n          role: 'menubar',\n        },\n      ),\n    );\n\n    settingsPanel.addComponent(subtitleSettingsPanelPage);\n\n    let containerComponents = [\n      new PlaybackToggleButton(),\n      new VolumeToggleButton(),\n      new VolumeSlider(),\n      new Spacer(),\n      new PictureInPictureToggleButton(),\n      new AirPlayToggleButton(),\n      new CastToggleButton(),\n      new VRToggleButton(),\n      new QuanteecConsumptions(),\n      new SettingsToggleButton({ settingsPanel: settingsPanel }),\n      new FullscreenToggleButton(),\n    ];\n\n    if (radioModeAvailable) {\n      containerComponents.splice(\n        7,\n        0,\n        new RadioModeToggleButton({ active: false }),\n      );\n    }\n\n    let controlBar = new ControlBar({\n      components: [\n        settingsPanel,\n        new Container({\n          components: [\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.CurrentTime,\n              hideInLivePlayback: true,\n            }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.TotalTime,\n              cssClasses: ['text-right'],\n            }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n        new Container({\n          components: containerComponents,\n          cssClasses: ['controlbar-bottom'],\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new PlaybackJumpControlsOverlay(),\n        new CastStatusOverlay(),\n        controlBar,\n        new TitleBar(),\n        new RecommendationOverlay(),\n        new ErrorMessageOverlay(),\n      ],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernAdsUI() {\n    return new UIContainer({\n      components: [\n        new BufferingOverlay(),\n        new AdClickOverlay(),\n        new PlaybackToggleOverlay(),\n        new Container({\n          components: [\n            new AdMessageLabel({\n              text: i18n.getLocalizer('ads.remainingTime'),\n            }),\n            new AdSkipButton(),\n          ],\n          cssClass: 'ui-ads-status',\n        }),\n        new ControlBar({\n          components: [\n            new Container({\n              components: [\n                new PlaybackToggleButton(),\n                new VolumeToggleButton(),\n                new VolumeSlider(),\n                new Spacer(),\n                new FullscreenToggleButton(),\n              ],\n              cssClasses: ['controlbar-bottom'],\n            }),\n          ],\n        }),\n      ],\n      cssClasses: ['ui-skin-ads'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernSmallScreenUI({\n    radioModeAvailable,\n  }: {\n    radioModeAvailable: boolean;\n  }) {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let mainSettingsPanelPage = new SettingsPanelPage({\n      components: [\n        new SettingsPanelItem(\n          i18n.getLocalizer('settings.video.quality'),\n          new VideoQualitySelectBox(),\n        ),\n        new SettingsPanelItem(\n          i18n.getLocalizer('speed'),\n          new PlaybackSpeedSelectBox(),\n        ),\n        new SettingsPanelItem(\n          i18n.getLocalizer('settings.audio.track'),\n          new AudioTrackSelectBox(),\n        ),\n        new SettingsPanelItem(\n          i18n.getLocalizer('settings.audio.quality'),\n          new AudioQualitySelectBox(),\n        ),\n      ],\n    });\n\n    let settingsPanel = new SettingsPanel({\n      components: [mainSettingsPanelPage],\n      hidden: true,\n      pageTransitionAnimation: false,\n      hideDelay: -1,\n    });\n\n    let subtitleSettingsPanelPage = new SubtitleSettingsPanelPage({\n      settingsPanel: settingsPanel,\n      overlay: subtitleOverlay,\n    });\n\n    let subtitleSettingsOpenButton = new SettingsPanelPageOpenButton({\n      targetPage: subtitleSettingsPanelPage,\n      container: settingsPanel,\n      ariaLabel: i18n.getLocalizer('settings.subtitles'),\n      text: i18n.getLocalizer('open'),\n    });\n\n    const subtitleSelectBox = new SubtitleSelectBox();\n\n    mainSettingsPanelPage.addComponent(\n      new SettingsPanelItem(\n        new SubtitleSettingsLabel({\n          text: i18n.getLocalizer('settings.subtitles'),\n          opener: subtitleSettingsOpenButton,\n        }),\n        subtitleSelectBox,\n        {\n          role: 'menubar',\n        },\n      ),\n    );\n\n    settingsPanel.addComponent(subtitleSettingsPanelPage);\n\n    settingsPanel.addComponent(new CloseButton({ target: settingsPanel }));\n    subtitleSettingsPanelPage.addComponent(\n      new CloseButton({ target: settingsPanel }),\n    );\n\n    let controlBar = new ControlBar({\n      components: [\n        new Container({\n          components: [\n            /* new ResetButton({\n              text: i18n.getLocalizer('restartbutton'),\n              cssClasses: ['ui-skin-radio'],\n            }), */\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.CurrentTime,\n              hideInLivePlayback: true,\n            }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.TotalTime,\n              cssClasses: ['text-right'],\n            }),\n            new FullscreenToggleButton({\n              cssClasses: ['controlbar-fullscreen-toggle-button'],\n            }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n      ],\n    });\n\n    let titleBarComponents = [];\n    const isBrowser = !window.bitmovin.customMessageHandler;\n\n    if (!isBrowser) {\n      titleBarComponents.push(new GoBackButton());\n    } else {\n      titleBarComponents.push(new QuanteecConsumptions());\n    }\n\n    titleBarComponents = [\n      ...titleBarComponents,\n      new MetadataLabel({ content: MetadataLabelContent.Title }),\n      new CastToggleButton(),\n      new VRToggleButton(),\n      new PictureInPictureToggleButton(),\n      new AirPlayToggleButton(),\n      new SettingsToggleButton({ settingsPanel: settingsPanel }),\n    ];\n\n    if (radioModeAvailable) {\n      titleBarComponents.splice(\n        !isBrowser ? 5 : 4,\n        0,\n        new RadioModeToggleButton({ active: false }),\n      );\n    }\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new CastStatusOverlay(),\n        new PlaybackToggleOverlay(),\n        new PlaybackJumpControlsOverlay(),\n        new RecommendationOverlay(),\n        controlBar,\n        new TitleBar({\n          components: titleBarComponents,\n        }),\n        settingsPanel,\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: ['ui-skin-smallscreen'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernSmallScreenAdsUI() {\n    return new UIContainer({\n      components: [\n        new BufferingOverlay(),\n        new AdClickOverlay(),\n        new PlaybackToggleOverlay(),\n        new TitleBar({\n          components: [\n            // dummy label with no content to move buttons to the right\n            new Label({ cssClass: 'label-metadata-title' }),\n            new FullscreenToggleButton(),\n          ],\n        }),\n        new Container({\n          components: [\n            new AdMessageLabel({ text: 'Ad: {remainingTime} secs' }),\n            new AdSkipButton(),\n          ],\n          cssClass: 'ui-ads-status',\n        }),\n      ],\n      cssClasses: ['ui-skin-ads', 'ui-skin-smallscreen'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernCastReceiverUI() {\n    let controlBar = new ControlBar({\n      components: [\n        new Container({\n          components: [\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.CurrentTime,\n              hideInLivePlayback: true,\n            }),\n            new SeekBar({ smoothPlaybackPositionUpdateIntervalMs: -1 }),\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.TotalTime,\n              cssClasses: ['text-right'],\n            }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n      ],\n    });\n\n    return new CastUIContainer({\n      components: [\n        new SubtitleOverlay(),\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        controlBar,\n        new TitleBar({ keepHiddenWithoutMetadata: true }),\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: ['ui-skin-cast-receiver'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function buildModernUI(\n    player: PlayerAPI,\n    config: UIConfig = {},\n  ): UIManager {\n    // show smallScreen UI only on mobile/handheld devices\n    let smallScreenSwitchWidth = 600;\n\n    return new UIManager(\n      player,\n      [\n        {\n          ui: modernRadioModeUI(),\n          condition: (context: UIConditionContext) => {\n            return !context.isAd && !context.adRequiresUi && context.isRadioModeActive;\n          },\n        },\n        {\n          ui: modernSmallScreenAdsUI(),\n          condition: (context: UIConditionContext) => {\n            return (\n              context.isMobile &&\n              context.documentWidth < smallScreenSwitchWidth &&\n              context.isAd &&\n              context.adRequiresUi\n            );\n          },\n        },\n        {\n          ui: modernAdsUI(),\n          condition: (context: UIConditionContext) => {\n            return context.isAd && context.adRequiresUi;\n          },\n        },\n        {\n          ui: modernSmallScreenUI({ radioModeAvailable: true }),\n          condition: (context: UIConditionContext) => {\n            return (\n              !context.isAd &&\n              !context.adRequiresUi &&\n              context.isMobile &&\n              context.documentWidth < smallScreenSwitchWidth &&\n              !context.isRadioModeActive &&\n              context.isRadioModeAvailable\n            );\n          },\n        },\n        {\n          ui: modernSmallScreenUI({ radioModeAvailable: false }),\n          condition: (context: UIConditionContext) => {\n            return (\n              !context.isAd &&\n              !context.adRequiresUi &&\n              context.isMobile &&\n              context.documentWidth < smallScreenSwitchWidth &&\n              !context.isRadioModeActive &&\n              !context.isRadioModeAvailable\n            );\n          },\n        },\n        {\n          ui: modernUI({ radioModeAvailable: true }),\n          condition: (context: UIConditionContext) => {\n            return !context.isAd && !context.adRequiresUi && !context.isRadioModeActive && context.isRadioModeAvailable;\n          },\n        },\n        {\n          ui: modernUI({ radioModeAvailable: false }),\n          condition: (context: UIConditionContext) => {\n            return !context.isAd && !context.adRequiresUi && !context.isRadioModeActive && !context.isRadioModeAvailable;\n          },\n        },\n      ],\n      config,\n    );\n  }\n\n  export function buildModernSmallScreenUI(\n    player: PlayerAPI,\n    config: UIConfig = {},\n  ): UIManager {\n    return new UIManager(\n      player,\n      [\n        {\n          ui: modernRadioModeUI(),\n          condition: (context: UIConditionContext) => {\n            return !context.isAd && !context.adRequiresUi && context.isRadioModeActive;\n          },\n        },\n        {\n          ui: modernSmallScreenAdsUI(),\n          condition: (context: UIConditionContext) => {\n            return context.isAd && context.adRequiresUi;\n          },\n        },\n        {\n          ui: modernSmallScreenUI({ radioModeAvailable: true }),\n          condition: (context: UIConditionContext) => {\n            return !context.isAd && !context.adRequiresUi && !context.isRadioModeActive && context.isRadioModeAvailable;\n          },\n        },\n        {\n          ui: modernSmallScreenUI({ radioModeAvailable: false }),\n          condition: (context: UIConditionContext) => {\n            return !context.isAd && !context.adRequiresUi && !context.isRadioModeActive && !context.isRadioModeAvailable;\n          },\n        },\n      ],\n      config,\n    );\n  }\n\n  export function buildModernCastReceiverUI(\n    player: PlayerAPI,\n    config: UIConfig = {},\n  ): UIManager {\n    return new UIManager(player, modernCastReceiverUI(), config);\n  }\n\n  export function buildModernTvUI(\n    player: PlayerAPI,\n    config: UIConfig = {},\n  ): UIManager {\n    return new UIManager(\n      player,\n      [\n        {\n          ...modernTvUI(),\n        },\n      ],\n      config,\n    );\n  }\n\n  export function modernTvUI() {\n    const subtitleListBox = new SubtitleListBox();\n    const subtitleListPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [new SettingsPanelItem(null, subtitleListBox)],\n        }),\n      ],\n      hidden: true,\n    });\n\n    const audioTrackListBox = new AudioTrackListBox();\n    const audioTrackListPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [new SettingsPanelItem(null, audioTrackListBox)],\n        }),\n      ],\n      hidden: true,\n    });\n\n    const seekBar = new SeekBar({ label: new SeekBarLabel() });\n    const playbackToggleOverlay = new PlaybackToggleOverlay();\n    const subtitleToggleButton = new SettingsToggleButton({\n      settingsPanel: subtitleListPanel,\n      autoHideWhenNoActiveSettings: true,\n      cssClass: 'ui-subtitlesettingstogglebutton',\n      text: i18n.getLocalizer('settings.subtitles'),\n    });\n    const audioToggleButton = new SettingsToggleButton({\n      settingsPanel: audioTrackListPanel,\n      autoHideWhenNoActiveSettings: true,\n      cssClass: 'ui-audiotracksettingstogglebutton',\n      ariaLabel: i18n.getLocalizer('settings.audio.track'),\n      text: i18n.getLocalizer('settings.audio.track'),\n    });\n    const uiContainer = new UIContainer({\n      components: [\n        new SubtitleOverlay(),\n        new BufferingOverlay(),\n        playbackToggleOverlay,\n        new ControlBar({\n          components: [\n            new Container({\n              components: [\n                new PlaybackTimeLabel({\n                  timeLabelMode: PlaybackTimeLabelMode.CurrentTime,\n                  hideInLivePlayback: true,\n                }),\n                seekBar,\n                new PlaybackTimeLabel({\n                  timeLabelMode: PlaybackTimeLabelMode.RemainingTime,\n                  cssClasses: ['text-right'],\n                }),\n              ],\n              cssClasses: ['controlbar-top'],\n            }),\n          ],\n        }),\n        new TitleBar({\n          components: [\n            new Container({\n              components: [\n                new MetadataLabel({ content: MetadataLabelContent.Title }),\n                subtitleToggleButton,\n                audioToggleButton,\n              ],\n              cssClasses: ['ui-titlebar-top'],\n            }),\n            new Container({\n              components: [\n                new MetadataLabel({\n                  content: MetadataLabelContent.Description,\n                }),\n                subtitleListPanel,\n                audioTrackListPanel,\n              ],\n              cssClasses: ['ui-titlebar-bottom'],\n            }),\n          ],\n        }),\n        new RecommendationOverlay(),\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: ['ui-skin-tv'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n\n    const spatialNavigation = new SpatialNavigation(\n      new RootNavigationGroup(\n        uiContainer,\n        playbackToggleOverlay,\n        seekBar,\n        audioToggleButton,\n        subtitleToggleButton,\n      ),\n      new ListNavigationGroup(\n        ListOrientation.Vertical,\n        subtitleListPanel,\n        subtitleListBox,\n      ),\n      new ListNavigationGroup(\n        ListOrientation.Vertical,\n        audioTrackListPanel,\n        audioTrackListBox,\n      ),\n    );\n\n    return {\n      ui: uiContainer,\n      spatialNavigation: spatialNavigation,\n    };\n  }\n\n  export function modernRadioModeUI() {\n    return new UIContainer({\n      components: [\n        new ControlBar({\n          components: [\n            new Container({\n              components: [\n                new PlaybackToggleButton(),\n                new SeekBar({ label: new SeekBarLabel() }),\n                new RadioModeToggleButton({ active: true }),\n              ],\n              cssClasses: ['controlbar-top'],\n            }),\n          ],\n        }),\n      ],\n      cssClasses: ['ui-skin-radio'],\n      hideDelay: -1,\n    });\n  }\n\n  export function buildModernRadioModeUI(\n    player: PlayerAPI,\n    config: UIConfig = {},\n  ): UIManager {\n    return new UIManager(\n      player,\n      [\n        {\n          ui: modernRadioModeUI(),\n        },\n      ],\n      config,\n    );\n  }\n}\n","import {UIContainer} from './components/uicontainer';\nimport {DOM} from './dom';\nimport {Component, ComponentConfig} from './components/component';\nimport {Container} from './components/container';\nimport { SeekBar, SeekBarMarker } from './components/seekbar';\nimport {NoArgs, EventDispatcher, CancelEventArgs} from './eventdispatcher';\nimport {UIUtils} from './uiutils';\nimport {ArrayUtils} from './arrayutils';\nimport {BrowserUtils} from './browserutils';\nimport { TimelineMarker, UIConfig } from './uiconfig';\nimport { PlayerAPI, PlayerEventCallback, PlayerEventBase, PlayerEvent, AdEvent, LinearAd } from 'bitmovin-player';\nimport { VolumeController } from './volumecontroller';\nimport { i18n, CustomVocabulary, Vocabularies } from './localization/i18n';\nimport { FocusVisibilityTracker } from './focusvisibilitytracker';\nimport { isMobileV3PlayerAPI, MobileV3PlayerAPI, MobileV3PlayerEvent } from './mobilev3playerapi';\nimport { SpatialNavigation } from './spatialnavigation/spatialnavigation';\n\nexport interface LocalizationConfig {\n  /**\n   * Sets the desired language, and falls back to 'en' if there is no vocabulary for the desired language. Setting it\n   * to \"auto\" will enable language detection from the browser's locale.\n   */\n  language?: 'auto' | 'en' | 'de' | string;\n  /**\n   * A map of `language` to {@link CustomVocabulary} definitions. Can be used to overwrite default translations and add\n   * custom strings or additional languages.\n   */\n  vocabularies?: Vocabularies;\n}\n\nexport interface InternalUIConfig extends UIConfig {\n  events: {\n    /**\n     * Fires when the configuration has been updated/changed.\n     */\n    onUpdated: EventDispatcher<UIManager, void>;\n  };\n  volumeController: VolumeController;\n}\n\n/**\n * The context that will be passed to a {@link UIConditionResolver} to determine if it's conditions fulfil the context.\n */\nexport interface UIConditionContext {\n  /**\n   * Tells if the player is loading or playing an ad.\n   */\n  isAd: boolean;\n  /**\n   * Tells if the current ad requires an external UI, if {@link #isAd} is true.\n   */\n  adRequiresUi: boolean;\n  /**\n   * Tells if the player is currently in fullscreen mode.\n   */\n  isFullscreen: boolean;\n  /**\n   * Tells if the UI is running in a mobile browser.\n   */\n  isMobile: boolean;\n  /**\n   * Tells if the player is in playing or paused state.\n   */\n  isPlaying: boolean;\n  /**\n   * The width of the player/UI element.\n   */\n  width: number;\n  /**\n   * The width of the document where the player/UI is embedded in.\n   */\n  documentWidth: number;\n  /**\n   * Tells if the radio mode is activated or not\n   */\n  isRadioModeActive: boolean;\n  /**\n   * Tells if the radio mode is available or not\n   */\n  isRadioModeAvailable: boolean;\n}\n\n/**\n * Resolves the conditions of its associated UI in a {@link UIVariant} upon a {@link UIConditionContext} and decides\n * if the UI should be displayed. If it returns true, the UI is a candidate for display; if it returns false, it will\n * not be displayed in the given context.\n */\nexport interface UIConditionResolver {\n  (context: UIConditionContext): boolean;\n}\n\n/**\n * Associates a UI instance with an optional {@link UIConditionResolver} that determines if the UI should be displayed.\n */\nexport interface UIVariant {\n  ui: UIContainer;\n  condition?: UIConditionResolver;\n  spatialNavigation?: SpatialNavigation;\n}\n\nexport interface ActiveUiChangedArgs extends NoArgs {\n  /**\n   * The previously active {@link UIInstanceManager} prior to the {@link UIManager} switching to a different UI variant.\n   */\n  previousUi: UIInstanceManager;\n  /**\n   * The currently active {@link UIInstanceManager}.\n   */\n  currentUi: UIInstanceManager;\n}\n\nexport class UIManager {\n\n  private player: PlayerAPI;\n  private uiContainerElement: DOM;\n  private uiVariants: UIVariant[];\n  private uiInstanceManagers: InternalUIInstanceManager[];\n  private currentUi: InternalUIInstanceManager;\n  private config: InternalUIConfig; // Conjunction of provided uiConfig and sourceConfig from the player\n  private managerPlayerWrapper: PlayerWrapper;\n  private focusVisibilityTracker: FocusVisibilityTracker;\n  private isRadioModeActive: boolean;\n  private isRadioModeAvailable: boolean;\n\n  private events = {\n    onUiVariantResolve: new EventDispatcher<UIManager, UIConditionContext>(),\n    onActiveUiChanged: new EventDispatcher<UIManager, ActiveUiChangedArgs>(),\n  };\n\n  /**\n   * Creates a UI manager with a single UI variant that will be permanently shown.\n   * @param player the associated player of this UI\n   * @param ui the UI to add to the player\n   * @param uiconfig optional UI configuration\n   */\n  constructor(player: PlayerAPI, ui: UIContainer, uiconfig?: UIConfig);\n  /**\n   * Creates a UI manager with a list of UI variants that will be dynamically selected and switched according to\n   * the context of the UI.\n   *\n   * Every time the UI context changes, the conditions of the UI variants will be sequentially resolved and the first\n   * UI, whose condition evaluates to true, will be selected and displayed. The last variant in the list might omit the\n   * condition resolver and will be selected as default/fallback UI when all other conditions fail. If there is no\n   * fallback UI and all conditions fail, no UI will be displayed.\n   *\n   * @param player the associated player of this UI\n   * @param uiVariants a list of UI variants that will be dynamically switched\n   * @param uiconfig optional UI configuration\n   */\n  constructor(player: PlayerAPI, uiVariants: UIVariant[], uiconfig?: UIConfig);\n  constructor(player: PlayerAPI, playerUiOrUiVariants: UIContainer | UIVariant[], uiconfig: UIConfig = {}) {\n    this.isRadioModeActive = window.isRadioModeActive;\n    this.isRadioModeAvailable = window.isRadioModeAvailable;\n\n    if (playerUiOrUiVariants instanceof UIContainer) {\n      // Single-UI constructor has been called, transform arguments to UIVariant[] signature\n      let playerUi = <UIContainer>playerUiOrUiVariants;\n      let uiVariants = [];\n\n      // Add the default player UI\n      uiVariants.push({ ui: playerUi });\n\n      this.uiVariants = uiVariants;\n    } else {\n      // Default constructor (UIVariant[]) has been called\n      this.uiVariants = <UIVariant[]>playerUiOrUiVariants;\n    }\n\n    this.player = player;\n    this.managerPlayerWrapper = new PlayerWrapper(player);\n\n    // ensure that at least the metadata object does exist in the uiconfig\n    uiconfig.metadata = uiconfig.metadata ? uiconfig.metadata : {};\n\n    this.config = {\n      playbackSpeedSelectionEnabled: true, // Switch on speed selector by default\n      autoUiVariantResolve: true, // Switch on auto UI resolving by default\n      disableAutoHideWhenHovered: false, // Disable auto hide when UI is hovered\n      enableSeekPreview: true,\n      ...uiconfig,\n      events: {\n        onUpdated: new EventDispatcher<UIManager, void>(),\n      },\n      volumeController: new VolumeController(\n        this.managerPlayerWrapper.getPlayer(),\n      ),\n    };\n    try {\n      // Mobile\n      if (window.bitmovin.customMessageHandler) {\n        window.bitmovin.customMessageHandler.on(\n          'globalRadioModeChanged',\n          (data: string) => {\n            const { activated, available } = JSON.parse(data);\n            this.isRadioModeActive = activated;\n            this.isRadioModeAvailable = available;\n\n            this.resolveUiVariant({\n              isRadioModeActive: activated,\n              isRadioModeAvailable: available,\n            });\n          },\n        );\n      }\n      // Web\n\n      window.addEventListener('isRadioModeActiveChange', this.handleIsRadioModeActiveChange);\n      window.addEventListener('isRadioModeAvailableChange', this.handleIsRadioModeAvailableChange);\n    } catch (error) {}\n\n    /**\n     * Gathers configuration data from the UI config and player source config and creates a merged UI config\n     * that is used throughout the UI instance.\n     */\n    const updateConfig = () => {\n      const playerSourceConfig = player.getSource() || {};\n      this.config.metadata = JSON.parse(\n        JSON.stringify(uiconfig.metadata || {}),\n      );\n\n      // Extract the UI-related config properties from the source config\n      const playerSourceUiConfig: UIConfig = {\n        metadata: {\n          // TODO move metadata into source.metadata namespace in player v8\n          title: playerSourceConfig.title,\n          description: playerSourceConfig.description,\n          markers: (playerSourceConfig as any).markers,\n        },\n        recommendations: (playerSourceConfig as any).recommendations,\n      };\n\n      // Player source config takes precedence over the UI config, because the config in the source is attached\n      // to a source which changes with every player.load, whereas the UI config stays the same for the whole\n      // lifetime of the player instance.\n      this.config.metadata.title =\n        playerSourceUiConfig.metadata.title || uiconfig.metadata.title;\n      this.config.metadata.description =\n        playerSourceUiConfig.metadata.description ||\n        uiconfig.metadata.description;\n      this.config.metadata.markers =\n        playerSourceUiConfig.metadata.markers ||\n        uiconfig.metadata.markers ||\n        [];\n      this.config.recommendations =\n        playerSourceUiConfig.recommendations || uiconfig.recommendations || [];\n    };\n\n    updateConfig();\n\n    // Update the source configuration when a new source is loaded and dispatch onUpdated\n    const updateSource = () => {\n      updateConfig();\n      this.config.events.onUpdated.dispatch(this);\n    };\n\n    const wrappedPlayer = this.managerPlayerWrapper.getPlayer();\n\n    wrappedPlayer.on(\n      this.player.exports.PlayerEvent.SourceLoaded,\n      updateSource,\n    );\n\n    // The PlaylistTransition event is only available on Mobile v3 for now.\n    // This event is fired when a new source becomes active in the player.\n    if (isMobileV3PlayerAPI(wrappedPlayer)) {\n      wrappedPlayer.on(MobileV3PlayerEvent.PlaylistTransition, updateSource);\n    }\n\n    if (uiconfig.container) {\n      // Unfortunately \"uiContainerElement = new DOM(config.container)\" will not accept the container with\n      // string|HTMLElement type directly, although it accepts both types, so we need to spit these two cases up here.\n      // TODO check in upcoming TS versions if the container can be passed in directly, or fix the constructor\n      this.uiContainerElement =\n        uiconfig.container instanceof HTMLElement\n          ? new DOM(uiconfig.container)\n          : new DOM(uiconfig.container);\n    } else {\n      this.uiContainerElement = new DOM(player.getContainer());\n    }\n\n    // Create UI instance managers for the UI variants\n    // The instance managers map to the corresponding UI variants by their array index\n    this.uiInstanceManagers = [];\n    let uiVariantsWithoutCondition = [];\n    for (let uiVariant of this.uiVariants) {\n      if (uiVariant.condition == null) {\n        // Collect variants without conditions for error checking\n        uiVariantsWithoutCondition.push(uiVariant);\n      }\n      // Create the instance manager for a UI variant\n      this.uiInstanceManagers.push(\n        new InternalUIInstanceManager(\n          player,\n          uiVariant.ui,\n          this.config,\n          uiVariant.spatialNavigation,\n        ),\n      );\n    }\n    // Make sure that there is only one UI variant without a condition\n    // It does not make sense to have multiple variants without condition, because only the first one in the list\n    // (the one with the lowest index) will ever be selected.\n    if (uiVariantsWithoutCondition.length > 1) {\n      throw Error(\n        'Too many UIs without a condition: You cannot have more than one default UI',\n      );\n    }\n    // Make sure that the default UI variant, if defined, is at the end of the list (last index)\n    // If it comes earlier, the variants with conditions that come afterwards will never be selected because the\n    // default variant without a condition always evaluates to 'true'\n    if (\n      uiVariantsWithoutCondition.length > 0 &&\n      uiVariantsWithoutCondition[0] !==\n        this.uiVariants[this.uiVariants.length - 1]\n    ) {\n      throw Error(\n        'Invalid UI variant order: the default UI (without condition) must be at the end of the list',\n      );\n    }\n\n    let adStartedEvent: AdEvent = null; // keep the event stored here during ad playback\n\n    // Dynamically select a UI variant that matches the current UI condition.\n    let resolveUiVariant = (event: PlayerEventBase) => {\n      // Make sure that the AdStarted event data is persisted through ad playback in case other events happen\n      // in the meantime, e.g. player resize. We need to store this data because there is no other way to find out\n      // ad details while an ad is playing (in v8.0 at least; from v8.1 there will be ads.getActiveAd()).\n      // Existing event data signals that an ad is currently active (instead of ads.isLinearAdActive()).\n      if (event != null) {\n        switch (event.type) {\n          // The ads UI is shown upon the first AdStarted event. Subsequent AdStarted events within an ad break\n          // will not change the condition context and thus not lead to undesired UI variant resolving.\n          // The ads UI is shown upon AdStarted instead of AdBreakStarted because there can be a loading delay\n          // between these two events in the player, and the AdBreakStarted event does not carry any metadata to\n          // initialize the ads UI, so it would be rendered in an uninitialized state for a certain amount of time.\n          // TODO show ads UI upon AdBreakStarted and display loading overlay between AdBreakStarted and first AdStarted\n          // TODO display loading overlay between AdFinished and next AdStarted\n          case player.exports.PlayerEvent.AdStarted:\n            adStartedEvent = event as AdEvent;\n            break;\n          // The ads UI is hidden only when the ad break is finished, i.e. not on AdFinished events. This way we keep\n          // the ads UI variant active throughout an ad break, as reacting to AdFinished would lead to undesired UI\n          // variant switching between two ads in an ad break, e.g. ads UI -> AdFinished -> content UI ->\n          // AdStarted -> ads UI.\n          case player.exports.PlayerEvent.AdBreakFinished:\n            adStartedEvent = null;\n            // When switching to a variant for the first time, a config.events.onUpdated event is fired to trigger a UI\n            // update of the new variant, because most components subscribe to this event to update themselves. When\n            // switching to the ads UI on the first AdStarted, all UI variants update themselves with the ad data, so\n            // when switching back to the \"normal\" UI it will carry properties of the ad instead of the main content.\n            // We thus fire this event here to force an UI update with the properties of the main content. This is\n            // basically a hack because the config.events.onUpdated event is abused in many places and not just used\n            // for config updates (e.g. adding a marker to the seekbar).\n            // TODO introduce an event that is fired when the playback content is updated, a switch to/from ads\n            this.config.events.onUpdated.dispatch(this);\n            break;\n          // When a new source is loaded during ad playback, there will be no Ad(Break)Finished event\n          case player.exports.PlayerEvent.SourceLoaded:\n          case player.exports.PlayerEvent.SourceUnloaded:\n            adStartedEvent = null;\n            break;\n        }\n      }\n\n      // Detect if an ad has started\n      let isAd = adStartedEvent != null;\n      let adRequiresUi = false;\n      if (isAd) {\n        let ad = adStartedEvent.ad;\n        // for now only linear ads can request a UI\n        if (ad.isLinear) {\n          let linearAd = ad as LinearAd;\n          adRequiresUi =\n            (linearAd.uiConfig && linearAd.uiConfig.requestsUi) || false;\n        }\n      }\n\n      if (adRequiresUi) {\n        // we dispatch onUpdated event because if there are multiple adBreaks for same position\n        // `Play` and `Playing` events will not be dispatched which will cause `PlaybackButton` state\n        // to be out of sync\n        this.config.events.onUpdated.dispatch(this);\n      }\n\n      this.resolveUiVariant(\n        {\n          isAd: isAd,\n          adRequiresUi: adRequiresUi,\n          isRadioModeActive: this.isRadioModeActive,\n          isRadioModeAvailable: this.isRadioModeAvailable,\n        },\n        (context) => {\n          // If this is an ad UI, we need to relay the saved ON_AD_STARTED event data so ad components can configure\n          // themselves for the current ad.\n          if (context.isAd) {\n            /* Relay the ON_AD_STARTED event to the ads UI\n             *\n             * Because the ads UI is initialized in the ON_AD_STARTED handler, i.e. when the ON_AD_STARTED event has\n             * already been fired, components in the ads UI that listen for the ON_AD_STARTED event never receive it.\n             * Since this can break functionality of components that rely on this event, we relay the event to the\n             * ads UI components with the following call.\n             */\n            this.currentUi\n              .getWrappedPlayer()\n              .fireEventInUI(\n                this.player.exports.PlayerEvent.AdStarted,\n                adStartedEvent,\n              );\n          }\n        },\n      );\n    };\n\n    // Listen to the following events to trigger UI variant resolution\n    if (this.config.autoUiVariantResolve) {\n      this.managerPlayerWrapper\n        .getPlayer()\n        .on(this.player.exports.PlayerEvent.SourceLoaded, resolveUiVariant);\n      this.managerPlayerWrapper\n        .getPlayer()\n        .on(this.player.exports.PlayerEvent.SourceUnloaded, resolveUiVariant);\n      this.managerPlayerWrapper\n        .getPlayer()\n        .on(this.player.exports.PlayerEvent.Play, resolveUiVariant);\n      this.managerPlayerWrapper\n        .getPlayer()\n        .on(this.player.exports.PlayerEvent.Paused, resolveUiVariant);\n      this.managerPlayerWrapper\n        .getPlayer()\n        .on(this.player.exports.PlayerEvent.AdStarted, resolveUiVariant);\n      this.managerPlayerWrapper\n        .getPlayer()\n        .on(this.player.exports.PlayerEvent.AdBreakFinished, resolveUiVariant);\n      this.managerPlayerWrapper\n        .getPlayer()\n        .on(this.player.exports.PlayerEvent.PlayerResized, resolveUiVariant);\n      this.managerPlayerWrapper\n        .getPlayer()\n        .on(this.player.exports.PlayerEvent.ViewModeChanged, resolveUiVariant);\n    }\n\n    this.focusVisibilityTracker = new FocusVisibilityTracker('{{PREFIX}}');\n\n    // Initialize the UI\n    resolveUiVariant(null);\n  }\n\n  /**\n   * Exposes i18n.getLocalizer() function\n   * @returns {I18nApi.getLocalizer()}\n   */\n  static localize<V extends CustomVocabulary<Record<string, string>>>(key: keyof V) {\n    return i18n.getLocalizer(key);\n  }\n\n  /**\n   * Provide configuration to support Custom UI languages\n   * default language: 'en'\n   */\n  static setLocalizationConfig(localizationConfig: LocalizationConfig) {\n    i18n.setConfig(localizationConfig);\n  }\n\n  handleIsRadioModeActiveChange = (\n    event: CustomEvent<boolean | null>,\n  ) => {\n    this.isRadioModeActive = event.detail;\n  };\n\n  handleIsRadioModeAvailableChange = (\n    event: CustomEvent<boolean | null>,\n  ) => {\n    this.isRadioModeAvailable = event.detail;\n  };\n\n  getConfig(): UIConfig {\n    return this.config;\n  }\n\n  /**\n   * Returns the list of UI variants as passed into the constructor of {@link UIManager}.\n   * @returns {UIVariant[]} the list of available UI variants\n   */\n  getUiVariants(): UIVariant[] {\n    return this.uiVariants;\n  }\n\n  /**\n   * Switches to a UI variant from the list returned by {@link getUiVariants}.\n   * @param {UIVariant} uiVariant the UI variant to switch to\n   * @param {() => void} onShow a callback that is executed just before the new UI variant is shown\n   */\n  switchToUiVariant(uiVariant: UIVariant, onShow?: () => void): void {\n    let uiVariantIndex = this.uiVariants.indexOf(uiVariant);\n\n    const previousUi = this.currentUi;\n    const nextUi: InternalUIInstanceManager = this.uiInstanceManagers[uiVariantIndex];\n    // Determine if the UI variant is changing\n    // Only if the UI variant is changing, we need to do some stuff. Else we just leave everything as-is.\n    if (nextUi === this.currentUi) {\n      return;\n      // console.log('switched from ', this.currentUi ? this.currentUi.getUI() : 'none',\n      //   ' to ', nextUi ? nextUi.getUI() : 'none');\n    }\n\n    // Hide the currently active UI variant\n    if (this.currentUi) {\n      this.currentUi.getUI().hide();\n    }\n\n    // Assign the new UI variant as current UI\n    this.currentUi = nextUi;\n\n    // When we switch to a different UI instance, there's some additional stuff to manage. If we do not switch\n    // to an instance, we're done here.\n    if (this.currentUi == null) {\n      return;\n    }\n    // Add the UI to the DOM (and configure it) the first time it is selected\n    if (!this.currentUi.isConfigured()) {\n      this.addUi(this.currentUi);\n      // ensure that the internal state is ready for the upcoming show call\n      if (!this.currentUi.getUI().isHidden()) {\n        this.currentUi.getUI().hide();\n      }\n    }\n    if (onShow) {\n      onShow();\n    }\n    this.currentUi.getUI().show();\n    this.events.onActiveUiChanged.dispatch(this, { previousUi, currentUi: nextUi });\n  }\n\n  /**\n   * Triggers a UI variant switch as triggered by events when automatic switching is enabled. It allows to overwrite\n   * properties of the {@link UIConditionContext}.\n   * @param {Partial<UIConditionContext>} context an optional set of properties that overwrite properties of the\n   *   automatically determined context\n   * @param {(context: UIConditionContext) => void} onShow a callback that is executed just before the new UI variant\n   *   is shown (if a switch is happening)\n   */\n  resolveUiVariant(context: Partial<UIConditionContext> = {}, onShow?: (context: UIConditionContext) => void): void {\n    // Determine the current context for which the UI variant will be resolved\n    const defaultContext: UIConditionContext = {\n      isAd: false,\n      adRequiresUi: false,\n      isFullscreen: this.player.getViewMode() === this.player.exports.ViewMode.Fullscreen,\n      isMobile: BrowserUtils.isMobile,\n      isPlaying: this.player.isPlaying(),\n      width: this.uiContainerElement.width(),\n      documentWidth: document.body.clientWidth,\n      isRadioModeActive: false,\n      isRadioModeAvailable: false,\n    };\n\n    // Overwrite properties of the default context with passed in context properties\n    const switchingContext = { ...defaultContext, ...context };\n\n    // Fire the event and allow modification of the context before it is used to resolve the UI variant\n    this.events.onUiVariantResolve.dispatch(this, switchingContext);\n\n    let nextUiVariant: UIVariant = null;\n\n    // Select new UI variant\n    // If no variant condition is fulfilled, we switch to *no* UI\n    for (let uiVariant of this.uiVariants) {\n      const matchesCondition = uiVariant.condition == null || uiVariant.condition(switchingContext) === true;\n      if (nextUiVariant == null && matchesCondition) {\n        nextUiVariant = uiVariant;\n      } else {\n        // hide all UIs besides the one which should be active\n        uiVariant.ui.hide();\n      }\n    }\n\n    this.switchToUiVariant(nextUiVariant, () => {\n      if (onShow) {\n        onShow(switchingContext);\n      }\n    });\n  }\n\n  private addUi(ui: InternalUIInstanceManager): void {\n    let dom = ui.getUI().getDomElement();\n    let player = ui.getWrappedPlayer();\n\n    ui.configureControls();\n    /* Append the UI DOM after configuration to avoid CSS transitions at initialization\n     * Example: Components are hidden during configuration and these hides may trigger CSS transitions that are\n     * undesirable at this time. */\n    this.uiContainerElement.append(dom);\n\n    // When the UI is loaded after a source was loaded, we need to tell the components to initialize themselves\n    if (player.getSource()) {\n      this.config.events.onUpdated.dispatch(this);\n    }\n\n    // Fire onConfigured after UI DOM elements are successfully added. When fired immediately, the DOM elements\n    // might not be fully configured and e.g. do not have a size.\n    // https://swizec.com/blog/how-to-properly-wait-for-dom-elements-to-show-up-in-modern-browsers/swizec/6663\n    if (window.requestAnimationFrame) {\n      requestAnimationFrame(() => { ui.onConfigured.dispatch(ui.getUI()); });\n    } else {\n      // IE9 fallback\n      setTimeout(() => { ui.onConfigured.dispatch(ui.getUI()); }, 0);\n    }\n  }\n\n  private releaseUi(ui: InternalUIInstanceManager): void {\n    ui.releaseControls();\n\n    const uiContainer = ui.getUI();\n    if (uiContainer.hasDomElement()) {\n      uiContainer.getDomElement().remove();\n    }\n\n    ui.clearEventHandlers();\n  }\n\n  release(): void {\n    for (let uiInstanceManager of this.uiInstanceManagers) {\n      this.releaseUi(uiInstanceManager);\n    }\n    this.managerPlayerWrapper.clearEventHandlers();\n    this.focusVisibilityTracker.release();\n  }\n\n  /**\n   * Fires just before UI variants are about to be resolved and the UI variant is possibly switched. It is fired when\n   * the switch is triggered from an automatic switch and when calling {@link resolveUiVariant}.\n   * Can be used to modify the {@link UIConditionContext} before resolving is done.\n   * @returns {EventDispatcher<UIManager, UIConditionContext>}\n   */\n  get onUiVariantResolve(): EventDispatcher<UIManager, UIConditionContext> {\n    return this.events.onUiVariantResolve;\n  }\n\n  /**\n   * Fires after the UIManager has switched to a different UI variant.\n   * @returns {EventDispatcher<UIManager, ActiveUiChangedArgs>}\n   */\n  get onActiveUiChanged(): EventDispatcher<UIManager, ActiveUiChangedArgs> {\n    return this.events.onActiveUiChanged;\n  }\n\n  /**\n   * The current active {@link UIInstanceManager}.\n   */\n  get activeUi(): UIInstanceManager {\n    return this.currentUi;\n  }\n\n  /**\n   * Returns the list of all added markers in undefined order.\n   */\n  getTimelineMarkers(): TimelineMarker[] {\n    return this.config.metadata.markers;\n  }\n\n  /**\n   * Adds a marker to the timeline. Does not check for duplicates/overlaps at the `time`.\n   */\n  addTimelineMarker(timelineMarker: TimelineMarker): void {\n    this.config.metadata.markers.push(timelineMarker);\n    this.config.events.onUpdated.dispatch(this);\n  }\n\n  /**\n   * Removes a marker from the timeline (by reference) and returns `true` if the marker has\n   * been part of the timeline and successfully removed, or `false` if the marker could not\n   * be found and thus not removed.\n   */\n  removeTimelineMarker(timelineMarker: TimelineMarker): boolean {\n    if (ArrayUtils.remove(this.config.metadata.markers, timelineMarker) === timelineMarker) {\n      this.config.events.onUpdated.dispatch(this);\n      return true;\n    }\n\n    return false;\n  }\n\n  destroy() {\n    window.removeEventListener('isRadioModeActiveChange', this.handleIsRadioModeActiveChange);\n    window.removeEventListener('isRadioModeAvailableChange', this.handleIsRadioModeAvailableChange);\n  }\n}\n\nexport interface SeekPreviewArgs extends NoArgs {\n  /**\n   * The timeline position in percent where the event originates from.\n   */\n  position: number;\n  /**\n   * The timeline marker associated with the current position, if existing.\n   */\n  marker?: SeekBarMarker;\n}\n\n/**\n * Encapsulates functionality to manage a UI instance. Used by the {@link UIManager} to manage multiple UI instances.\n */\nexport class UIInstanceManager {\n  private playerWrapper: PlayerWrapper;\n  private ui: UIContainer;\n  private config: InternalUIConfig;\n  protected spatialNavigation?: SpatialNavigation;\n\n  private events = {\n    onConfigured: new EventDispatcher<UIContainer, NoArgs>(),\n    onSeek: new EventDispatcher<SeekBar, NoArgs>(),\n    onSeekPreview: new EventDispatcher<SeekBar, SeekPreviewArgs>(),\n    onSeeked: new EventDispatcher<SeekBar, NoArgs>(),\n    onComponentShow: new EventDispatcher<Component<ComponentConfig>, NoArgs>(),\n    onComponentHide: new EventDispatcher<Component<ComponentConfig>, NoArgs>(),\n    onControlsShow: new EventDispatcher<UIContainer, NoArgs>(),\n    onPreviewControlsHide: new EventDispatcher<UIContainer, CancelEventArgs>(),\n    onControlsHide: new EventDispatcher<UIContainer, NoArgs>(),\n    onRelease: new EventDispatcher<UIContainer, NoArgs>(),\n  };\n\n  constructor(player: PlayerAPI, ui: UIContainer, config: InternalUIConfig, spatialNavigation?: SpatialNavigation) {\n    this.playerWrapper = new PlayerWrapper(player);\n    this.ui = ui;\n    this.config = config;\n    this.spatialNavigation = spatialNavigation;\n  }\n\n  getConfig(): InternalUIConfig {\n    return this.config;\n  }\n\n  getUI(): UIContainer {\n    return this.ui;\n  }\n\n  getPlayer(): PlayerAPI {\n    return this.playerWrapper.getPlayer();\n  }\n\n  /**\n   * Fires when the UI is fully configured and added to the DOM.\n   * @returns {EventDispatcher}\n   */\n  get onConfigured(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onConfigured;\n  }\n\n  /**\n   * Fires when a seek starts.\n   * @returns {EventDispatcher}\n   */\n  get onSeek(): EventDispatcher<SeekBar, NoArgs> {\n    return this.events.onSeek;\n  }\n\n  /**\n   * Fires when the seek timeline is scrubbed.\n   * @returns {EventDispatcher}\n   */\n  get onSeekPreview(): EventDispatcher<SeekBar, SeekPreviewArgs> {\n    return this.events.onSeekPreview;\n  }\n\n  /**\n   * Fires when a seek is finished.\n   * @returns {EventDispatcher}\n   */\n  get onSeeked(): EventDispatcher<SeekBar, NoArgs> {\n    return this.events.onSeeked;\n  }\n\n  /**\n   * Fires when a component is showing.\n   * @returns {EventDispatcher}\n   */\n  get onComponentShow(): EventDispatcher<Component<ComponentConfig>, NoArgs> {\n    return this.events.onComponentShow;\n  }\n\n  /**\n   * Fires when a component is hiding.\n   * @returns {EventDispatcher}\n   */\n  get onComponentHide(): EventDispatcher<Component<ComponentConfig>, NoArgs> {\n    return this.events.onComponentHide;\n  }\n\n  /**\n   * Fires when the UI controls are showing.\n   * @returns {EventDispatcher}\n   */\n  get onControlsShow(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onControlsShow;\n  }\n\n  /**\n   * Fires before the UI controls are hiding to check if they are allowed to hide.\n   * @returns {EventDispatcher}\n   */\n  get onPreviewControlsHide(): EventDispatcher<UIContainer, CancelEventArgs> {\n    return this.events.onPreviewControlsHide;\n  }\n\n  /**\n   * Fires when the UI controls are hiding.\n   * @returns {EventDispatcher}\n   */\n  get onControlsHide(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onControlsHide;\n  }\n\n  /**\n   * Fires when the UI controls are released.\n   * @returns {EventDispatcher}\n   */\n  get onRelease(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onRelease;\n  }\n\n  protected clearEventHandlers(): void {\n    this.playerWrapper.clearEventHandlers();\n\n    let events = <any>this.events; // avoid TS7017\n    for (let event in events) {\n      let dispatcher = <EventDispatcher<Object, Object>>events[event];\n      dispatcher.unsubscribeAll();\n    }\n  }\n}\n\n/**\n * Extends the {@link UIInstanceManager} for internal use in the {@link UIManager} and provides access to functionality\n * that components receiving a reference to the {@link UIInstanceManager} should not have access to.\n */\nclass InternalUIInstanceManager extends UIInstanceManager {\n\n  private configured: boolean;\n  private released: boolean;\n\n  getWrappedPlayer(): WrappedPlayer {\n    // TODO find a non-hacky way to provide the WrappedPlayer to the UIManager without exporting it\n    // getPlayer() actually returns the WrappedPlayer but its return type is set to Player so the WrappedPlayer does\n    // not need to be exported\n    return <WrappedPlayer>this.getPlayer();\n  }\n\n  configureControls(): void {\n    this.configureControlsTree(this.getUI());\n    this.configured = true;\n  }\n\n  isConfigured(): boolean {\n    return this.configured;\n  }\n\n  private configureControlsTree(component: Component<ComponentConfig>) {\n    let configuredComponents: Component<ComponentConfig>[] = [];\n\n    UIUtils.traverseTree(component, (component) => {\n      // First, check if we have already configured a component, and throw an error if we did. Multiple configuration\n      // of the same component leads to unexpected UI behavior. Also, a component that is in the UI tree multiple\n      // times hints at a wrong UI structure.\n      // We could just skip configuration in such a case and not throw an exception, but enforcing a clean UI tree\n      // seems like the better choice.\n      for (let configuredComponent of configuredComponents) {\n        if (configuredComponent === component) {\n          // Write the component to the console to simplify identification of the culprit\n          // (e.g. by inspecting the config)\n          if (console) {\n            console.error('Circular reference in UI tree', component);\n          }\n\n          // Additionally throw an error, because this case must not happen and leads to unexpected UI behavior.\n          throw Error('Circular reference in UI tree: ' + component.constructor.name);\n        }\n      }\n\n      component.initialize();\n      component.configure(this.getPlayer(), this);\n      configuredComponents.push(component);\n    });\n  }\n\n  releaseControls(): void {\n    // Do not call release methods if the components have never been configured; this can result in exceptions\n    if (this.configured) {\n      this.onRelease.dispatch(this.getUI());\n      this.releaseControlsTree(this.getUI());\n      this.configured = false;\n    }\n    this.spatialNavigation?.release();\n    this.released = true;\n  }\n\n  isReleased(): boolean {\n    return this.released;\n  }\n\n  private releaseControlsTree(component: Component<ComponentConfig>) {\n    component.release();\n\n    if (component instanceof Container) {\n      for (let childComponent of component.getComponents()) {\n        this.releaseControlsTree(childComponent);\n      }\n    }\n  }\n\n  clearEventHandlers(): void {\n    super.clearEventHandlers();\n  }\n}\n\n/**\n * Extended interface of the {@link Player} for use in the UI.\n */\nexport interface WrappedPlayer extends PlayerAPI {\n  /**\n   * Fires an event on the player that targets all handlers in the UI but never enters the real player.\n   * @param event the event to fire\n   * @param data data to send with the event\n   */\n  fireEventInUI(event: PlayerEvent, data: {}): void;\n}\n\n/**\n * Wraps the player to track event handlers and provide a simple method to remove all registered event\n * handlers from the player.\n */\nexport class PlayerWrapper {\n\n  private player: PlayerAPI;\n  private wrapper: WrappedPlayer;\n\n  private eventHandlers: { [eventType: string]: PlayerEventCallback[]; } = {};\n\n  constructor(player: PlayerAPI) {\n    this.player = player;\n\n    // Collect all members of the player (public API methods and properties of the player)\n    const objectProtoPropertyNames = Object.getOwnPropertyNames(Object.getPrototypeOf({}));\n    const namesToIgnore = ['constructor', ...objectProtoPropertyNames];\n    const members = getAllPropertyNames(player).filter(name => namesToIgnore.indexOf(name) === -1);\n    // Split the members into methods and properties\n    let methods = <any[]>[];\n    let properties = <any[]>[];\n\n    for (let member of members) {\n      if (typeof (<any>player)[member] === 'function') {\n        methods.push(member);\n      } else {\n        properties.push(member);\n      }\n    }\n\n    // Create wrapper object\n    let wrapper = <any>{};\n\n    // Add function wrappers for all API methods that do nothing but calling the base method on the player\n    for (let method of methods) {\n      wrapper[method] = function() {\n        // console.log('called ' + member); // track method calls on the player\n        return (<any>player)[method].apply(player, arguments);\n      };\n    }\n\n    // Add all public properties of the player to the wrapper\n    for (let property of properties) {\n      // Get an eventually existing property descriptor to differentiate between plain properties and properties with\n      // getters/setters.\n      const propertyDescriptor = ((target: PlayerAPI) => {\n        while (target) {\n          const propertyDescriptor = Object.getOwnPropertyDescriptor(target, property);\n          if (propertyDescriptor) {\n            return propertyDescriptor;\n          }\n          // Check if the PropertyDescriptor exists on a child prototype in case we have an inheritance of the player\n          target = Object.getPrototypeOf(target);\n        }\n      })(player);\n\n      // If the property has getters/setters, wrap them accordingly...\n      if (propertyDescriptor && (propertyDescriptor.get || propertyDescriptor.set)) {\n        Object.defineProperty(wrapper, property, {\n          get: () => propertyDescriptor.get.call(player),\n          set: (value: any) => propertyDescriptor.set.call(player, value),\n        });\n      }\n      // ... else just transfer the property to the wrapper\n      else {\n        wrapper[property] = (<any>player)[property];\n      }\n    }\n\n    // Explicitly add a wrapper method for 'on' that adds added event handlers to the event list\n    wrapper.on = (eventType: PlayerEvent, callback: PlayerEventCallback) => {\n      player.on(eventType, callback);\n\n      if (!this.eventHandlers[eventType]) {\n        this.eventHandlers[eventType] = [];\n      }\n\n      this.eventHandlers[eventType].push(callback);\n\n      return wrapper;\n    };\n\n    // Explicitly add a wrapper method for 'off' that removes removed event handlers from the event list\n    wrapper.off = (eventType: PlayerEvent, callback: PlayerEventCallback) => {\n      player.off(eventType, callback);\n\n      if (this.eventHandlers[eventType]) {\n        ArrayUtils.remove(this.eventHandlers[eventType], callback);\n      }\n\n      return wrapper;\n    };\n\n    wrapper.fireEventInUI = (event: PlayerEvent, data: {}) => {\n      if (this.eventHandlers[event]) { // check if there are handlers for this event registered\n        // Extend the data object with default values to convert it to a {@link PlayerEventBase} object.\n        let playerEventData = <PlayerEventBase>Object.assign({}, {\n          timestamp: Date.now(),\n          type: event,\n          // Add a marker property so the UI can detect UI-internal player events\n          uiSourced: true,\n        }, data);\n\n        // Execute the registered callbacks\n        for (let callback of this.eventHandlers[event]) {\n          callback(playerEventData);\n        }\n      }\n    };\n\n    this.wrapper = <WrappedPlayer>wrapper;\n  }\n\n  /**\n   * Returns a wrapped player object that can be used on place of the normal player object.\n   * @returns {WrappedPlayer} a wrapped player\n   */\n  getPlayer(): WrappedPlayer {\n    return this.wrapper;\n  }\n\n  /**\n   * Clears all registered event handlers from the player that were added through the wrapped player.\n   */\n  clearEventHandlers(): void {\n    try {\n      // Call the player API to check if the instance is still valid or already destroyed.\n      // This can be any call throwing the PlayerAPINotAvailableError when the player instance is destroyed.\n      this.player.getSource();\n    } catch (error) {\n      if (error instanceof this.player.exports.PlayerAPINotAvailableError) {\n        // We have detected that the player instance is already destroyed, so we clear the event handlers to avoid\n        // event handler unsubscription attempts (which would result in PlayerAPINotAvailableError errors).\n        this.eventHandlers = {};\n      }\n    }\n\n    for (let eventType in this.eventHandlers) {\n      for (let callback of this.eventHandlers[eventType]) {\n        this.player.off(eventType as PlayerEvent, callback);\n      }\n    }\n  }\n}\n\nfunction getAllPropertyNames(target: Object): string[] {\n  let names: string[] = [];\n\n  while (target) {\n    const newNames = Object.getOwnPropertyNames(target).filter(name => names.indexOf(name) === -1);\n    names = names.concat(newNames);\n    // go up prototype chain\n    target = Object.getPrototypeOf(target);\n  }\n\n  return names;\n}\n","import {Component, ComponentConfig} from './components/component';\nimport {Container} from './components/container';\n\nexport namespace UIUtils {\n  export interface TreeTraversalCallback {\n    (component: Component<ComponentConfig>, parent?: Component<ComponentConfig>): void;\n  }\n\n  export function traverseTree(component: Component<ComponentConfig>, visit: TreeTraversalCallback): void {\n    let recursiveTreeWalker = (component: Component<ComponentConfig>, parent?: Component<ComponentConfig>) => {\n      visit(component, parent);\n\n      // If the current component is a container, visit it's children\n      if (component instanceof Container) {\n        for (let childComponent of component.getComponents()) {\n          recursiveTreeWalker(childComponent, component);\n        }\n      }\n    };\n\n    // Walk and configure the component tree\n    recursiveTreeWalker(component);\n  }\n\n  // From: https://github.com/nfriend/ts-keycode-enum/blob/master/Key.enum.ts\n  export enum KeyCode {\n    LeftArrow = 37,\n    UpArrow = 38,\n    RightArrow = 39,\n    DownArrow = 40,\n    Space = 32,\n    End = 35,\n    Home = 36,\n  }\n}\n","import { Event, EventDispatcher } from './eventdispatcher';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport interface VolumeSettingChangedArgs {\n  volume: number;\n  muted: boolean;\n}\n\n/**\n * Can be used to centrally manage and control the volume and mute state of the player from multiple components.\n */\nexport class VolumeController {\n\n  private static readonly issuerName = 'ui-volumecontroller';\n\n  private readonly events = {\n    onChanged: new EventDispatcher<VolumeController, VolumeSettingChangedArgs>(),\n  };\n\n  private storedVolume: number;\n\n  constructor(private readonly player: PlayerAPI) {\n    this.storeVolume();\n\n    const handler = () => {\n      this.onChangedEvent();\n    };\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, handler);\n    player.on(player.exports.PlayerEvent.VolumeChanged, handler);\n    player.on(player.exports.PlayerEvent.Muted, handler);\n    player.on(player.exports.PlayerEvent.Unmuted, handler);\n  }\n\n  setVolume(volume: number): void {\n    this.player.setVolume(volume, VolumeController.issuerName);\n  }\n\n  getVolume(): number {\n    return this.player.getVolume();\n  }\n\n  setMuted(muted: boolean): void {\n    if (muted) {\n      this.player.mute(VolumeController.issuerName);\n    } else {\n      this.player.unmute(VolumeController.issuerName);\n    }\n  }\n\n  toggleMuted(): void {\n    if (this.isMuted() || this.getVolume() === 0) {\n      // Unmuting from the mute or zero-volume state recalls the previously saved volume setting. Setting the\n      // volume automatically unmutes the player in v7.\n      this.recallVolume();\n    } else {\n      this.setMuted(true);\n    }\n  }\n\n  isMuted(): boolean {\n    return this.player.isMuted();\n  }\n\n  /**\n   * Stores (saves) the current volume so it can later be restored with {@link recallVolume}.\n   */\n  storeVolume(): void {\n    this.storedVolume = this.getVolume();\n  }\n\n  /**\n   * Recalls (sets) the volume previously stored with {@link storeVolume}.\n   */\n  recallVolume(): void {\n    this.setMuted(this.storedVolume === 0);\n    this.setVolume(this.storedVolume);\n  }\n\n  startTransition(): VolumeTransition {\n    return new VolumeTransition(this);\n  }\n\n  onChangedEvent() {\n    const playerMuted = this.isMuted();\n    const playerVolume = this.getVolume();\n\n    const uiMuted = playerMuted || playerVolume === 0;\n    const uiVolume = playerMuted ? 0 : playerVolume;\n\n    this.storeVolume();\n\n    this.events.onChanged.dispatch(this, { volume: uiVolume, muted: uiMuted });\n  }\n\n  /**\n   * Gets the event that is fired when the volume settings have changed.\n   */\n  get onChanged(): Event<VolumeController, VolumeSettingChangedArgs> {\n    return this.events.onChanged.getEvent();\n  }\n}\n\nexport class VolumeTransition {\n\n  constructor(private controller: VolumeController) {\n    // Store the volume at the beginning of a volume change so we can recall it later in case we set the volume to\n    // zero and actually mute the player.\n    controller.storeVolume();\n  }\n\n  update(volume: number): void {\n    // Update the volume while transitioning so the user has a \"live preview\" of the desired target volume\n    this.controller.setMuted(false);\n    this.controller.setVolume(volume);\n  }\n\n  finish(volume: number): void {\n    if (volume === 0) {\n      // When the volume is zero we essentially mute the volume so we recall the volume from the beginning of the\n      // transition and mute the player instead. Recalling is necessary to return to the actual audio volume\n      // when unmuting.\n      // We must first recall the volume and then mute, because recalling sets the volume on the player\n      // and setting a player volume > 0 unmutes the player in v7.\n      this.controller.recallVolume();\n      this.controller.setMuted(true);\n    } else {\n      this.controller.setMuted(false);\n      this.controller.setVolume(volume);\n      this.controller.storeVolume();\n    }\n  }\n}","import { SubtitleRegionContainer, SubtitleLabel } from './components/subtitleoverlay';\nimport { VTTProperties, VTTRegionProperties } from 'bitmovin-player/types/subtitles/vtt/API';\nimport { DOM, Size } from './dom';\n\n// Our default height of a line\nconst lineHeight = 28;\n\n// Default relative line height\nconst lineHeightPercent = 5;\nlet lineCount: number = 1;\n\nconst defaultLineNumber = 21; // Our default amount of lines\n\nenum Direction {\n  Top = 'top',\n  Bottom = 'bottom',\n  Left = 'left',\n  Right = 'right',\n}\n\nenum VttVerticalWriting {\n  GrowingRight = 'lr',\n  GrowingLeft = 'rl',\n}\n\ntype VerticalWritingDirection = Direction.Left | Direction.Right;\n\nconst DirectionPair = new Map<Direction, Direction>([\n  [Direction.Top, Direction.Bottom],\n  [Direction.Bottom, Direction.Top],\n  [Direction.Left, Direction.Right],\n  [Direction.Right, Direction.Left],\n]);\n\n/**\n * Sets the default standardized styles for the Cue Box\n * https://w3.org/TR/webvtt1/#applying-css-properties\n */\nconst setDefaultVttStyles = (cueContainerDom: DOM, vtt: VTTProperties) => {\n  if (vtt.region) {\n    cueContainerDom.css('position', 'relative');\n    cueContainerDom.css('unicode-bidi', 'plaintext');\n  } else {\n    cueContainerDom.css('position', 'absolute');\n    cueContainerDom.css('overflow-wrap', 'break-word');\n    cueContainerDom.css('overflow', 'hidden');\n    cueContainerDom.css('flex-flow', 'column');\n  }\n  cueContainerDom.css('display', 'inline-flex');\n};\n\n/**\n * Align the Cue Box's line\n * https://w3.org/TR/webvtt1/#webvtt-cue-line-alignment\n */\nconst setVttLineAlign = (\n  cueContainerDom: DOM,\n  { lineAlign }: VTTProperties,\n  direction: Direction,\n  relativeCueBoxPosition: number) => {\n  switch (lineAlign) {\n    case 'center':\n      setCssForCenterLineAlign(\n        cueContainerDom, direction, relativeCueBoxPosition);\n      break;\n    case 'end':\n      setCssForEndLineAlign(\n        cueContainerDom, direction, relativeCueBoxPosition);\n  }\n};\n\n/**\n * Defines the line positioning of the Cue Box\n * https://w3.org/TR/webvtt1/#webvtt-cue-line\n */\nconst setVttLine = (\n  cueContainerDom: DOM,\n  vtt: VTTProperties,\n  direction: Direction,\n  subtitleOverLaySize: Size,\n) => {\n  const overlayReferenceEdge = DirectionPair.get(direction);\n  if (vtt.line === 'auto' && vtt.vertical) {\n    cueContainerDom.css(overlayReferenceEdge, '0');\n    return;\n  }\n  if (vtt.line === 'auto' && !vtt.vertical) {\n    return;\n  }\n\n  let relativeLinePosition = parseFloat(vtt.line as string);\n\n  if (vtt.snapToLines) {\n    let targetLine = Number(vtt.line);\n    if (targetLine < 0) {\n      targetLine = defaultLineNumber + targetLine;\n    }\n\n    const lineHeight = subtitleOverLaySize.height / defaultLineNumber;\n    const absoluteLinePosition = lineHeight * targetLine;\n    relativeLinePosition = (100 * absoluteLinePosition) / subtitleOverLaySize.height;\n  }\n\n  if (vtt.lineAlign !== 'end')\n    cueContainerDom.css(\n      overlayReferenceEdge, `${relativeLinePosition}%`);\n  setVttLineAlign(cueContainerDom, vtt, direction, relativeLinePosition);\n};\n\n/**\n * Defines the writing direction of the Cue Box\n * https://w3.org/TR/webvtt1/#webvtt-cue-writing-direction\n */\nconst setVttWritingDirectionAndCueBoxPositioning = (\n  cueContainerDom: DOM, vtt: VTTProperties,\n  subtitleOverlaySize: Size,\n) => {\n  switch (vtt.vertical) {\n  case '':\n    cueContainerDom.css('writing-mode', 'horizontal-tb');\n    cueContainerDom.css(Direction.Bottom, '0');\n    setVttLine(cueContainerDom, vtt, Direction.Bottom, subtitleOverlaySize);\n    break;\n  case VttVerticalWriting.GrowingRight:\n    setCueBoxPositionForVerticalWriting(\n      cueContainerDom, Direction.Right, vtt, subtitleOverlaySize);\n    break;\n  case VttVerticalWriting.GrowingLeft:\n    setCueBoxPositionForVerticalWriting(\n      cueContainerDom, Direction.Left, vtt, subtitleOverlaySize);\n    break;\n  }\n};\n\nconst setCueBoxPositionForVerticalWriting = (\n  cueContainerDom: DOM,\n  direction: VerticalWritingDirection,\n  vtt: VTTProperties,\n  subtitleOverlaySize: Size,\n) => {\n    const writingMode = direction === Direction.Right ?\n      'vertical-lr' : 'vertical-rl';\n\n    cueContainerDom.css('writing-mode', writingMode);\n    cueContainerDom.css(Direction.Top, '0');\n    setVttLine(cueContainerDom, vtt, direction, subtitleOverlaySize);\n};\n\n/**\n * Defines the Cue position alignment\n * https://w3.org/TR/webvtt1/#webvtt-cue-position-alignment\n */\nconst setVttPositionAlign = (cueContainerDom: DOM, vtt: VTTProperties, direction: Direction) => {\n  // https://www.w3.org/TR/webvtt1/#webvtt-cue-position\n  if (vtt.position === 'auto') {\n    cueContainerDom.css(direction, '0');\n  } else {\n    switch (vtt.positionAlign) {\n      case 'line-left':\n        cueContainerDom.css(direction, `${vtt.position}%`);\n        cueContainerDom.css(DirectionPair.get(direction), 'auto');\n        cueContainerDom.css('justify-content', 'flex-start');\n        break;\n      case 'center':\n        cueContainerDom.css(direction, `${vtt.position - vtt.size / 2}%`);\n        cueContainerDom.css(DirectionPair.get(direction), 'auto');\n        cueContainerDom.css('justify-content', 'center');\n        break;\n      case 'line-right':\n        cueContainerDom.css(direction, 'auto');\n        cueContainerDom.css(DirectionPair.get(direction), `${100 - vtt.position}%`);\n        cueContainerDom.css('justify-content', 'flex-end');\n        break;\n      default:\n        cueContainerDom.css(direction, `${vtt.position}%`);\n        cueContainerDom.css('justify-content', 'flex-start');\n    }\n  }\n};\n\nconst countLines = (innerHtml: string) =>\n  innerHtml.split('<br />').length;\n\nconst setCssForCenterLineAlign = (\n  cueContainerDom: DOM,\n  direction: Direction,\n  relativeCueBoxPosition: number) => {\n  switch (direction) {\n    case Direction.Bottom:\n      cueContainerDom.css('transform', 'translateY(-50%)');\n      break;\n    case Direction.Left:\n      cueContainerDom.css('transform', 'translateX(50%)');\n      break;\n    case Direction.Right:\n      cueContainerDom.css('transform', 'translateX(-50%)');\n      break;\n  }\n};\n\nconst setCssForEndLineAlign = (\n  cueContainerDom: DOM,\n  direction: Direction,\n  offset: number) => {\n      const opositeToOverlayReferenceEdge = direction;\n      cueContainerDom.css(opositeToOverlayReferenceEdge, `${100 - offset}%`);\n};\n\nexport namespace VttUtils {\n  export const setVttCueBoxStyles = (\n    cueContainer: SubtitleLabel,\n    subtitleOverlaySize: Size,\n  ) => {\n    const vtt = cueContainer.vtt;\n    const cueContainerDom = cueContainer.getDomElement();\n\n\n    setDefaultVttStyles(cueContainerDom, vtt);\n\n    lineCount = countLines(cueContainer.getText());\n    setVttWritingDirectionAndCueBoxPositioning(cueContainerDom, vtt, subtitleOverlaySize);\n\n    // https://w3.org/TR/webvtt1/#webvtt-cue-text-alignment\n    const textAlign = vtt.align === 'middle' ? 'center' : vtt.align;\n    cueContainerDom.css('text-align', textAlign);\n\n    // https://w3.org/TR/webvtt1/#webvtt-cue-size\n    const containerSize = vtt.size;\n    if (vtt.vertical === '') {\n      cueContainerDom.css('width', `${containerSize}%`);\n      setVttPositionAlign(cueContainerDom, vtt, Direction.Left);\n    } else {\n      cueContainerDom.css('height', `${containerSize}%`);\n      setVttPositionAlign(cueContainerDom, vtt, Direction.Top);\n    }\n  };\n\n  /** https://www.w3.org/TR/webvtt1/#regions\n   *  https://www.speechpad.com/captions/webvtt#toc_16\n   */\n  export const setVttRegionStyles = (\n    regionContainer: SubtitleRegionContainer,\n    region: VTTRegionProperties,\n    overlaySize: Size,\n  ) => {\n    const regionContainerDom = regionContainer.getDomElement();\n    const regionPositionX = overlaySize.width * region.viewportAnchorX / 100 - ((overlaySize.width * region.width / 100) * region.regionAnchorX / 100);\n    const regionPositionY = overlaySize.height * region.viewportAnchorY / 100 - ((region.lines * lineHeight) * region.regionAnchorY / 100);\n    regionContainerDom.css('position', 'absolute');\n    regionContainerDom.css('overflow', 'hidden');\n    regionContainerDom.css('width', `${region.width}%`);\n    regionContainerDom.css(Direction.Left, `${regionPositionX}px`);\n    regionContainerDom.css(Direction.Right, 'unset');\n    regionContainerDom.css(Direction.Top, `${regionPositionY}px`);\n    regionContainerDom.css(Direction.Bottom, 'unset');\n    regionContainerDom.css('height', `${region.lines * lineHeight}px`);\n  };\n}\n"]}