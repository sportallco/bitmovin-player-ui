(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}(g.bitmovin || (g.bitmovin = {})).playerui = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoBackButton = void 0;
var button_1 = require("../../../ts/components/button");
var GoBackButton = /** @class */ (function (_super) {
    __extends(GoBackButton, _super);
    function GoBackButton(config) {
        if (config === void 0) { config = { error: false }; }
        var _this = _super.call(this, config) || this;
        var defaultConfig = {
            cssClasses: config.error ? ['ui-gobackbutton', 'ui-gobackbutton-error'] : ['ui-gobackbutton'],
            text: 'Go Back',
            ariaLabel: 'Go Back',
        };
        _this.config = _this.mergeConfig(config, defaultConfig, _this.config);
        return _this;
    }
    GoBackButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.onClick.subscribe(function () {
            window.bitmovin.customMessageHandler.sendAsynchronous('goBack');
        });
        player.on(player.exports.PlayerEvent.ViewModeChanged, function () {
            player.getViewMode() === 'fullscreen' ? _this.hide() : _this.show();
        });
    };
    return GoBackButton;
}(button_1.Button));
exports.GoBackButton = GoBackButton;

},{"../../../ts/components/button":17}],2:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackRewindButton = exports.PlaybackForwardButton = exports.PlaybackJumpButtons = void 0;
var button_1 = require("../../../ts/components/button");
var i18n_1 = require("../../../ts/localization/i18n");
var playerutils_1 = require("../../../ts/playerutils");
var PlaybackJumpButtons = /** @class */ (function (_super) {
    __extends(PlaybackJumpButtons, _super);
    function PlaybackJumpButtons(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-playbackjumpbuttons',
            text: config.text,
            ariaLabel: config.ariaLabel,
            skipTime: 0,
        }, _this.config);
        return _this;
    }
    PlaybackJumpButtons.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var liveStreamDetector = new playerutils_1.PlayerUtils.LiveStreamDetector(player, uimanager);
        liveStreamDetector.onLiveChanged.subscribe(function (sender, args) {
            if (player.isLive()) {
                _this.hide();
            }
            else {
                uimanager.onControlsShow.subscribe(function () {
                    _this.show();
                });
                uimanager.onControlsHide.subscribe(function () {
                    _this.hide();
                });
            }
        });
        liveStreamDetector.detect();
        this.onClick.subscribe(function () {
            var currentTime = player.getCurrentTime();
            var duration = player.getDuration();
            if (!player.isLive()) {
                var newTime = currentTime + _this.config.skipTime;
                newTime = Math.max(0, Math.min(newTime, duration));
                player.seek(newTime, 'ui');
            }
        });
    };
    return PlaybackJumpButtons;
}(button_1.Button));
exports.PlaybackJumpButtons = PlaybackJumpButtons;
var PlaybackForwardButton = /** @class */ (function (_super) {
    __extends(PlaybackForwardButton, _super);
    function PlaybackForwardButton(config) {
        return _super.call(this, __assign(__assign({}, config), { cssClass: 'ui-playbackforwardbutton', text: i18n_1.i18n.getLocalizer('forward'), ariaLabel: i18n_1.i18n.getLocalizer('forward') })) || this;
    }
    return PlaybackForwardButton;
}(PlaybackJumpButtons));
exports.PlaybackForwardButton = PlaybackForwardButton;
var PlaybackRewindButton = /** @class */ (function (_super) {
    __extends(PlaybackRewindButton, _super);
    function PlaybackRewindButton(config) {
        return _super.call(this, __assign(__assign({}, config), { cssClass: 'ui-playbackrewindbutton', text: i18n_1.i18n.getLocalizer('rewind'), ariaLabel: i18n_1.i18n.getLocalizer('rewind') })) || this;
    }
    return PlaybackRewindButton;
}(PlaybackJumpButtons));
exports.PlaybackRewindButton = PlaybackRewindButton;

},{"../../../ts/components/button":17,"../../../ts/localization/i18n":94,"../../../ts/playerutils":101}],3:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackJumpControlsOverlay = void 0;
var container_1 = require("../../../ts/components/container");
var playbackjumpbutton_1 = require("./playbackjumpbutton");
/**
 * Overlay containing the playback forward and rewind buttons.
 */
var PlaybackJumpControlsOverlay = /** @class */ (function (_super) {
    __extends(PlaybackJumpControlsOverlay, _super);
    function PlaybackJumpControlsOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.forwardButton = new playbackjumpbutton_1.PlaybackForwardButton({ skipTime: 10 });
        _this.rewindButton = new playbackjumpbutton_1.PlaybackRewindButton({ skipTime: -10 });
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-playbackforward-overlay',
            components: [_this.forwardButton, _this.rewindButton],
        }, _this.config);
        return _this;
    }
    return PlaybackJumpControlsOverlay;
}(container_1.Container));
exports.PlaybackJumpControlsOverlay = PlaybackJumpControlsOverlay;

},{"../../../ts/components/container":24,"./playbackjumpbutton":2}],4:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuanteecConsumptions = void 0;
var button_1 = require("../../../ts/components/button");
var QuanteecConsumptions = /** @class */ (function (_super) {
    __extends(QuanteecConsumptions, _super);
    function QuanteecConsumptions(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        var defaultConfig = {
            cssClass: 'ui-quanteecconsumptions',
            text: 'Get Quanteec consumptions',
            ariaLabel: 'Get Quanteec consumptions',
        };
        _this.config = _this.mergeConfig(config, defaultConfig, _this.config);
        return _this;
    }
    QuanteecConsumptions.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        this.onClick.subscribe(function () {
            // web handle
            window.isQuanteecDisplayed = !window.isQuanteecDisplayed;
        });
    };
    return QuanteecConsumptions;
}(button_1.Button));
exports.QuanteecConsumptions = QuanteecConsumptions;

},{"../../../ts/components/button":17}],5:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RadioModeToggleButton = void 0;
var togglebutton_1 = require("../../../../ts/components/togglebutton");
var RadioModeToggleButton = /** @class */ (function (_super) {
    __extends(RadioModeToggleButton, _super);
    function RadioModeToggleButton(config) {
        var _this = _super.call(this, config) || this;
        var defaultConfig = {
            cssClass: config.active ? 'ui-closebutton' : 'ui-radiomodetogglebutton',
            text: 'Radio Mode',
            ariaLabel: 'Radio Mode',
            active: false,
        };
        _this.config = _this.mergeConfig(config, defaultConfig, _this.config);
        return _this;
    }
    RadioModeToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.onClick.subscribe(function () {
            // Mobile
            var initialState = _this.config.active;
            if (window.bitmovin.customMessageHandler) {
                window.bitmovin.customMessageHandler.sendAsynchronous('radioModeChanged', JSON.stringify({
                    initialState: initialState,
                    activated: !_this.config.active,
                }));
            }
            // Web
            window.isRadioModeActive = !window.isRadioModeActive;
        });
    };
    return RadioModeToggleButton;
}(togglebutton_1.ToggleButton));
exports.RadioModeToggleButton = RadioModeToggleButton;

},{"../../../../ts/components/togglebutton":77}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayUtils = void 0;
/**
 * @category Utils
 */
var ArrayUtils;
(function (ArrayUtils) {
    /**
     * Removes an item from an array.
     * @param array the array that may contain the item to remove
     * @param item the item to remove from the array
     * @returns {any} the removed item or null if it wasn't part of the array
     */
    function remove(array, item) {
        var index = array.indexOf(item);
        if (index > -1) {
            return array.splice(index, 1)[0];
        }
        else {
            return null;
        }
    }
    ArrayUtils.remove = remove;
})(ArrayUtils = exports.ArrayUtils || (exports.ArrayUtils = {}));

},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioTrackSwitchHandler = void 0;
var i18n_1 = require("./localization/i18n");
/**
 * Helper class to handle all audio tracks related events
 *
 * This class listens to player events as well as the `ListSelector` event if selection changed
 *
 * @category Utils
 */
var AudioTrackSwitchHandler = /** @class */ (function () {
    function AudioTrackSwitchHandler(player, element, uimanager) {
        var _this = this;
        this.addAudioTrack = function (event) {
            var audioTrack = event.track;
            if (!_this.listElement.hasItem(audioTrack.id)) {
                _this.listElement.addItem(audioTrack.id, i18n_1.i18n.getLocalizer(audioTrack.label), true);
            }
        };
        this.removeAudioTrack = function (event) {
            var audioTrack = event.track;
            if (_this.listElement.hasItem(audioTrack.id)) {
                _this.listElement.removeItem(audioTrack.id);
            }
        };
        this.selectCurrentAudioTrack = function () {
            var currentAudioTrack = _this.player.getAudio();
            // HLS streams don't always provide this, so we have to check
            if (currentAudioTrack) {
                _this.listElement.selectItem(currentAudioTrack.id);
            }
        };
        this.refreshAudioTracks = function () {
            var audioTracks = _this.player.getAvailableAudio();
            var audioTrackToListItem = function (audioTrack) {
                return { key: audioTrack.id, label: audioTrack.label };
            };
            _this.listElement.synchronizeItems(audioTracks.map(audioTrackToListItem));
            _this.selectCurrentAudioTrack();
        };
        this.player = player;
        this.listElement = element;
        this.uimanager = uimanager;
        this.bindSelectionEvent();
        this.bindPlayerEvents();
        this.refreshAudioTracks();
    }
    AudioTrackSwitchHandler.prototype.bindSelectionEvent = function () {
        var _this = this;
        this.listElement.onItemSelected.subscribe(function (_, value) {
            _this.player.setAudio(value);
        });
    };
    AudioTrackSwitchHandler.prototype.bindPlayerEvents = function () {
        // Update selection when selected track has changed
        this.player.on(this.player.exports.PlayerEvent.AudioChanged, this.selectCurrentAudioTrack);
        // Update tracks when source goes away
        this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.refreshAudioTracks);
        // Update tracks when the period within a source changes
        this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshAudioTracks);
        // Update tracks when a track is added or removed
        this.player.on(this.player.exports.PlayerEvent.AudioAdded, this.addAudioTrack);
        this.player.on(this.player.exports.PlayerEvent.AudioRemoved, this.removeAudioTrack);
        this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshAudioTracks);
    };
    return AudioTrackSwitchHandler;
}());
exports.AudioTrackSwitchHandler = AudioTrackSwitchHandler;

},{"./localization/i18n":94}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserUtils = void 0;
/**
 * @category Utils
 */
var BrowserUtils = /** @class */ (function () {
    function BrowserUtils() {
    }
    Object.defineProperty(BrowserUtils, "isMobile", {
        // isMobile only needs to be evaluated once (it cannot change during a browser session)
        // Mobile detection according to Mozilla recommendation: "In summary, we recommend looking for the string “Mobi”
        // anywhere in the User Agent to detect a mobile device."
        // https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && /Mobi/.test(navigator.userAgent);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isChrome", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && /Chrome/.test(navigator.userAgent);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isAndroid", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && /Android/.test(navigator.userAgent) && !this.isHisense;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isIOS", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && /iPad|iPhone|iPod/.test(navigator.userAgent);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isMacIntel", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && navigator.platform === 'MacIntel';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isHisense", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && /Hisense/.test(navigator.userAgent);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isPlayStation", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && /PlayStation/i.test(navigator.userAgent);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isWebOs", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return (navigator &&
                navigator.userAgent &&
                (navigator.userAgent.includes('Web0S') || navigator.userAgent.includes('NetCast')));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isTizen", {
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return navigator && navigator.userAgent && /Tizen/.test(navigator.userAgent);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BrowserUtils, "isTouchSupported", {
        // https://hacks.mozilla.org/2013/04/detecting-touch-its-the-why-not-the-how/
        get: function () {
            if (!this.windowExists()) {
                return false;
            }
            return 'ontouchstart' in window || navigator && navigator.userAgent && (navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0);
        },
        enumerable: false,
        configurable: true
    });
    BrowserUtils.windowExists = function () {
        return typeof window !== 'undefined';
    };
    return BrowserUtils;
}());
exports.BrowserUtils = BrowserUtils;

},{}],9:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdClickOverlay = void 0;
var clickoverlay_1 = require("./clickoverlay");
/**
 * A simple click capture overlay for clickThroughUrls of ads.
 *
 * @category Components
 */
var AdClickOverlay = /** @class */ (function (_super) {
    __extends(AdClickOverlay, _super);
    function AdClickOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            acceptsTouchWithUiHidden: true,
        }, _this.config);
        return _this;
    }
    AdClickOverlay.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var clickThroughCallback = null;
        player.on(player.exports.PlayerEvent.AdStarted, function (event) {
            var ad = event.ad;
            _this.setUrl(ad.clickThroughUrl);
            clickThroughCallback = ad.clickThroughUrlOpened;
        });
        // Clear click-through URL when ad has finished
        var adFinishedHandler = function () {
            _this.setUrl(null);
        };
        player.on(player.exports.PlayerEvent.AdFinished, adFinishedHandler);
        player.on(player.exports.PlayerEvent.AdSkipped, adFinishedHandler);
        player.on(player.exports.PlayerEvent.AdError, adFinishedHandler);
        this.onClick.subscribe(function () {
            // Pause the ad when overlay is clicked
            player.pause('ui-ad-click-overlay');
            if (clickThroughCallback) {
                clickThroughCallback();
            }
        });
    };
    return AdClickOverlay;
}(clickoverlay_1.ClickOverlay));
exports.AdClickOverlay = AdClickOverlay;

},{"./clickoverlay":21}],10:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdMessageLabel = void 0;
var label_1 = require("./label");
var stringutils_1 = require("../stringutils");
var i18n_1 = require("../localization/i18n");
/**
 * A label that displays a message about a running ad, optionally with a countdown.
 *
 * @category Components
 */
var AdMessageLabel = /** @class */ (function (_super) {
    __extends(AdMessageLabel, _super);
    function AdMessageLabel(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-label-ad-message',
            text: i18n_1.i18n.getLocalizer('ads.remainingTime'),
        }, _this.config);
        return _this;
    }
    AdMessageLabel.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var text = config.text;
        var updateMessageHandler = function () {
            _this.setText(stringutils_1.StringUtils.replaceAdMessagePlaceholders(i18n_1.i18n.performLocalization(text), null, player));
        };
        var adStartHandler = function (event) {
            var uiConfig = event.ad.uiConfig;
            text = uiConfig && uiConfig.message || config.text;
            updateMessageHandler();
            player.on(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);
        };
        var adEndHandler = function () {
            player.off(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);
        };
        player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);
        player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);
        player.on(player.exports.PlayerEvent.AdError, adEndHandler);
        player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);
    };
    return AdMessageLabel;
}(label_1.Label));
exports.AdMessageLabel = AdMessageLabel;

},{"../localization/i18n":94,"../stringutils":114,"./label":33}],11:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdSkipButton = void 0;
var button_1 = require("./button");
var stringutils_1 = require("../stringutils");
/**
 * A button that is displayed during ads and can be used to skip the ad.
 *
 * @category Buttons
 */
var AdSkipButton = /** @class */ (function (_super) {
    __extends(AdSkipButton, _super);
    function AdSkipButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-button-ad-skip',
            untilSkippableMessage: 'Skip ad in {remainingTime}',
            skippableMessage: 'Skip ad',
            acceptsTouchWithUiHidden: true,
        }, _this.config);
        return _this;
    }
    AdSkipButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var untilSkippableMessage = config.untilSkippableMessage;
        var skippableMessage = config.skippableMessage;
        var skipOffset = -1;
        var updateSkipMessageHandler = function () {
            _this.show();
            // Update the skip message on the button
            if (player.getCurrentTime() < skipOffset) {
                _this.setText(stringutils_1.StringUtils.replaceAdMessagePlaceholders(untilSkippableMessage, skipOffset, player));
                _this.disable();
            }
            else {
                _this.setText(skippableMessage);
                _this.enable();
            }
        };
        var adStartHandler = function (event) {
            var ad = event.ad;
            skipOffset = ad.skippableAfter;
            untilSkippableMessage = ad.uiConfig && ad.uiConfig.untilSkippableMessage || config.untilSkippableMessage;
            skippableMessage = ad.uiConfig && ad.uiConfig.skippableMessage || config.skippableMessage;
            // Display this button only if ad is skippable.
            // Non-skippable ads will return -1 for skippableAfter for player version < v8.3.0.
            if (typeof skipOffset === 'number' && skipOffset >= 0) {
                updateSkipMessageHandler();
                player.on(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);
            }
            else {
                _this.hide();
            }
        };
        var adEndHandler = function () {
            player.off(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);
        };
        player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);
        player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);
        player.on(player.exports.PlayerEvent.AdError, adEndHandler);
        player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);
        this.onClick.subscribe(function () {
            // Try to skip the ad (this only works if it is skippable so we don't need to take extra care of that here)
            player.ads.skip();
        });
    };
    return AdSkipButton;
}(button_1.Button));
exports.AdSkipButton = AdSkipButton;

},{"../stringutils":114,"./button":17}],12:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AirPlayToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles Apple AirPlay.
 *
 * @category Buttons
 */
var AirPlayToggleButton = /** @class */ (function (_super) {
    __extends(AirPlayToggleButton, _super);
    function AirPlayToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-airplaytogglebutton',
            text: i18n_1.i18n.getLocalizer('appleAirplay'),
        }, _this.config);
        return _this;
    }
    AirPlayToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        if (!player.isAirplayAvailable) {
            // If the player does not support Airplay (player 7.0), we just hide this component and skip configuration
            this.hide();
            return;
        }
        this.onClick.subscribe(function () {
            if (player.isAirplayAvailable()) {
                player.showAirplayTargetPicker();
            }
            else {
                if (console) {
                    console.log('AirPlay unavailable');
                }
            }
        });
        var airPlayAvailableHandler = function () {
            if (player.isAirplayAvailable()) {
                _this.show();
            }
            else {
                _this.hide();
            }
        };
        var airPlayChangedHandler = function () {
            if (player.isAirplayActive()) {
                _this.on();
            }
            else {
                _this.off();
            }
        };
        player.on(player.exports.PlayerEvent.AirplayAvailable, airPlayAvailableHandler);
        player.on(player.exports.PlayerEvent.AirplayChanged, airPlayChangedHandler);
        // Startup init
        airPlayAvailableHandler(); // Hide button if AirPlay is not available
        airPlayChangedHandler();
    };
    return AirPlayToggleButton;
}(togglebutton_1.ToggleButton));
exports.AirPlayToggleButton = AirPlayToggleButton;

},{"../localization/i18n":94,"./togglebutton":77}],13:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioQualitySelectBox = void 0;
var selectbox_1 = require("./selectbox");
var i18n_1 = require("../localization/i18n");
/**
 * A select box providing a selection between 'auto' and the available audio qualities.
 *
 * @category Components
 */
var AudioQualitySelectBox = /** @class */ (function (_super) {
    __extends(AudioQualitySelectBox, _super);
    function AudioQualitySelectBox(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-audioqualityselectbox'],
        }, _this.config);
        return _this;
    }
    AudioQualitySelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var selectCurrentAudioQuality = function () {
            _this.selectItem(player.getAudioQuality().id);
        };
        var updateAudioQualities = function () {
            var audioQualities = player.getAvailableAudioQualities();
            _this.clearItems();
            // Add entry for automatic quality switching (default setting)
            _this.addItem('auto', i18n_1.i18n.getLocalizer('auto'));
            // Add audio qualities
            for (var _i = 0, audioQualities_1 = audioQualities; _i < audioQualities_1.length; _i++) {
                var audioQuality = audioQualities_1[_i];
                _this.addItem(audioQuality.id, audioQuality.label);
            }
            // Select initial quality
            selectCurrentAudioQuality();
        };
        this.onItemSelected.subscribe(function (sender, value) {
            player.setAudioQuality(value);
        });
        // Update qualities when audio track has changed
        player.on(player.exports.PlayerEvent.AudioChanged, updateAudioQualities);
        // Update qualities when source goes away
        player.on(player.exports.PlayerEvent.SourceUnloaded, updateAudioQualities);
        // Update qualities when the period within a source changes
        player.on(player.exports.PlayerEvent.PeriodSwitched, updateAudioQualities);
        // Update quality selection when quality is changed (from outside)
        player.on(player.exports.PlayerEvent.AudioQualityChanged, selectCurrentAudioQuality);
        if (player.exports.PlayerEvent.AudioQualityAdded) {
            // Update qualities when their availability changed
            // TODO: remove any cast after next player release
            player.on(player.exports.PlayerEvent.AudioQualityAdded, updateAudioQualities);
            player.on(player.exports.PlayerEvent.AudioQualityRemoved, updateAudioQualities);
        }
        uimanager.getConfig().events.onUpdated.subscribe(updateAudioQualities);
    };
    return AudioQualitySelectBox;
}(selectbox_1.SelectBox));
exports.AudioQualitySelectBox = AudioQualitySelectBox;

},{"../localization/i18n":94,"./selectbox":49}],14:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioTrackListBox = void 0;
var listbox_1 = require("./listbox");
var audiotrackutils_1 = require("../audiotrackutils");
/**
 * A element that is similar to a select box where the user can select a subtitle
 *
 * @category Components
 */
var AudioTrackListBox = /** @class */ (function (_super) {
    __extends(AudioTrackListBox, _super);
    function AudioTrackListBox() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AudioTrackListBox.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        new audiotrackutils_1.AudioTrackSwitchHandler(player, this, uimanager);
    };
    return AudioTrackListBox;
}(listbox_1.ListBox));
exports.AudioTrackListBox = AudioTrackListBox;

},{"../audiotrackutils":7,"./listbox":34}],15:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioTrackSelectBox = void 0;
var selectbox_1 = require("./selectbox");
var audiotrackutils_1 = require("../audiotrackutils");
/**
 * A select box providing a selection between available audio tracks (e.g. different languages).
 *
 * @category Components
 */
var AudioTrackSelectBox = /** @class */ (function (_super) {
    __extends(AudioTrackSelectBox, _super);
    function AudioTrackSelectBox(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-audiotrackselectbox'],
        }, _this.config);
        return _this;
    }
    AudioTrackSelectBox.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        new audiotrackutils_1.AudioTrackSwitchHandler(player, this, uimanager);
    };
    return AudioTrackSelectBox;
}(selectbox_1.SelectBox));
exports.AudioTrackSelectBox = AudioTrackSelectBox;

},{"../audiotrackutils":7,"./selectbox":49}],16:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BufferingOverlay = void 0;
var container_1 = require("./container");
var component_1 = require("./component");
var timeout_1 = require("../timeout");
/**
 * Overlays the player and displays a buffering indicator.
 *
 * @category Components
 */
var BufferingOverlay = /** @class */ (function (_super) {
    __extends(BufferingOverlay, _super);
    function BufferingOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.indicators = [
            new component_1.Component({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),
            new component_1.Component({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),
            new component_1.Component({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),
        ];
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-buffering-overlay',
            hidden: true,
            components: _this.indicators,
            showDelayMs: 1000,
        }, _this.config);
        return _this;
    }
    BufferingOverlay.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var overlayShowTimeout = new timeout_1.Timeout(config.showDelayMs, function () {
            _this.show();
        });
        var showOverlay = function () {
            overlayShowTimeout.start();
        };
        var hideOverlay = function () {
            overlayShowTimeout.clear();
            _this.hide();
        };
        player.on(player.exports.PlayerEvent.StallStarted, showOverlay);
        player.on(player.exports.PlayerEvent.StallEnded, hideOverlay);
        player.on(player.exports.PlayerEvent.Play, showOverlay);
        player.on(player.exports.PlayerEvent.Playing, hideOverlay);
        player.on(player.exports.PlayerEvent.Paused, hideOverlay);
        player.on(player.exports.PlayerEvent.Seek, showOverlay);
        player.on(player.exports.PlayerEvent.Seeked, hideOverlay);
        player.on(player.exports.PlayerEvent.TimeShift, showOverlay);
        player.on(player.exports.PlayerEvent.TimeShifted, hideOverlay);
        player.on(player.exports.PlayerEvent.SourceUnloaded, hideOverlay);
        // Show overlay if player is already stalled at init
        if (player.isStalled()) {
            this.show();
        }
    };
    return BufferingOverlay;
}(container_1.Container));
exports.BufferingOverlay = BufferingOverlay;

},{"../timeout":116,"./component":23,"./container":24}],17:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Button = void 0;
var component_1 = require("./component");
var dom_1 = require("../dom");
var eventdispatcher_1 = require("../eventdispatcher");
var i18n_1 = require("../localization/i18n");
/**
 * A simple clickable button.
 *
 * @category Components
 */
var Button = /** @class */ (function (_super) {
    __extends(Button, _super);
    function Button(config) {
        var _this = _super.call(this, config) || this;
        _this.buttonEvents = {
            onClick: new eventdispatcher_1.EventDispatcher(),
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-button',
            role: 'button',
            tabIndex: 0,
            acceptsTouchWithUiHidden: false,
        }, _this.config);
        return _this;
    }
    Button.prototype.toDomElement = function () {
        var _this = this;
        var buttonElementAttributes = {
            'id': this.config.id,
            'aria-label': i18n_1.i18n.performLocalization(this.config.ariaLabel || this.config.text),
            'class': this.getCssClasses(),
            'type': 'button',
            /**
            * WCAG20 standard to display if a button is pressed or not
            */
            'aria-pressed': 'false',
            'tabindex': this.config.tabIndex.toString(),
        };
        if (this.config.role != null) {
            buttonElementAttributes['role'] = this.config.role;
        }
        // Create the button element with the text label
        var buttonElement = new dom_1.DOM('button', buttonElementAttributes, this).append(new dom_1.DOM('span', {
            'class': this.prefixCss('label'),
        }).html(i18n_1.i18n.performLocalization(this.config.text)));
        // Listen for the click event on the button element and trigger the corresponding event on the button component
        buttonElement.on('click', function () {
            _this.onClickEvent();
        });
        return buttonElement;
    };
    /**
     * Sets text on the label of the button.
     * @param text the text to put into the label of the button
     */
    Button.prototype.setText = function (text) {
        this.getDomElement().find('.' + this.prefixCss('label')).html(i18n_1.i18n.performLocalization(text));
    };
    Button.prototype.onClickEvent = function () {
        this.buttonEvents.onClick.dispatch(this);
    };
    Object.defineProperty(Button.prototype, "onClick", {
        /**
         * Gets the event that is fired when the button is clicked.
         * @returns {Event<Button<Config>, NoArgs>}
         */
        get: function () {
            return this.buttonEvents.onClick.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    return Button;
}(component_1.Component));
exports.Button = Button;

},{"../dom":87,"../eventdispatcher":89,"../localization/i18n":94,"./component":23}],18:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CastStatusOverlay = void 0;
var container_1 = require("./container");
var label_1 = require("./label");
var i18n_1 = require("../localization/i18n");
/**
 * Overlays the player and displays the status of a Cast session.
 *
 * @category Components
 */
var CastStatusOverlay = /** @class */ (function (_super) {
    __extends(CastStatusOverlay, _super);
    function CastStatusOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.statusLabel = new label_1.Label({ cssClass: 'ui-cast-status-label' });
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-cast-status-overlay',
            components: [_this.statusLabel],
            hidden: true,
        }, _this.config);
        return _this;
    }
    CastStatusOverlay.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        player.on(player.exports.PlayerEvent.CastWaitingForDevice, function (event) {
            _this.show();
            // Get device name and update status text while connecting
            var castDeviceName = event.castPayload.deviceName;
            _this.statusLabel.setText(i18n_1.i18n.getLocalizer('connectingTo', { castDeviceName: castDeviceName }));
        });
        player.on(player.exports.PlayerEvent.CastStarted, function (event) {
            // Session is started or resumed
            // For cases when a session is resumed, we do not receive the previous events and therefore show the status panel
            // here too
            _this.show();
            var castDeviceName = event.deviceName;
            _this.statusLabel.setText(i18n_1.i18n.getLocalizer('playingOn', { castDeviceName: castDeviceName }));
        });
        player.on(player.exports.PlayerEvent.CastStopped, function (event) {
            // Cast session gone, hide the status panel
            _this.hide();
        });
    };
    return CastStatusOverlay;
}(container_1.Container));
exports.CastStatusOverlay = CastStatusOverlay;

},{"../localization/i18n":94,"./container":24,"./label":33}],19:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CastToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles casting to a Cast receiver.
 *
 * @category Buttons
 */
var CastToggleButton = /** @class */ (function (_super) {
    __extends(CastToggleButton, _super);
    function CastToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-casttogglebutton',
            text: i18n_1.i18n.getLocalizer('googleCast'),
        }, _this.config);
        return _this;
    }
    CastToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.onClick.subscribe(function () {
            if (!player.isCastAvailable()) {
                player.castVideo();
                if (console) {
                    console.log('Cast unavailable');
                }
                return;
            }
            if (player.isCasting()) {
                player.castStop();
            }
            else {
                player.castVideo();
            }
        });
        // Toggle button 'on' state
        player.on(player.exports.PlayerEvent.CastWaitingForDevice, function () {
            _this.on();
        });
        player.on(player.exports.PlayerEvent.CastStarted, function () {
            // When a session is resumed, there is no CastStart event, so we also need to toggle here for such cases
            _this.on();
        });
        player.on(player.exports.PlayerEvent.CastStopped, function () {
            _this.off();
        });
        // Startup init
        if (player.isCasting()) {
            this.on();
        }
    };
    return CastToggleButton;
}(togglebutton_1.ToggleButton));
exports.CastToggleButton = CastToggleButton;

},{"../localization/i18n":94,"./togglebutton":77}],20:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CastUIContainer = void 0;
var uicontainer_1 = require("./uicontainer");
var timeout_1 = require("../timeout");
/**
 * The base container for Cast receivers that contains all of the UI and takes care that the UI is shown on
 * certain playback events.
 *
 * @category Containers
 */
var CastUIContainer = /** @class */ (function (_super) {
    __extends(CastUIContainer, _super);
    function CastUIContainer(config) {
        return _super.call(this, config) || this;
    }
    CastUIContainer.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        /*
         * Show UI on Cast devices at certain playback events
         *
         * Since a Cast receiver does not have a direct HCI, we show the UI on certain playback events to give the user
         * a chance to see on the screen what's going on, e.g. on play/pause or a seek the UI is shown and the user can
         * see the current time and position on the seek bar.
         * The UI is shown permanently while playback is paused, otherwise hides automatically after the configured
         * hide delay time.
         */
        var isUiShown = false;
        var hideUi = function () {
            uimanager.onControlsHide.dispatch(_this);
            isUiShown = false;
        };
        this.castUiHideTimeout = new timeout_1.Timeout(config.hideDelay, hideUi);
        var showUi = function () {
            if (!isUiShown) {
                uimanager.onControlsShow.dispatch(_this);
                isUiShown = true;
            }
        };
        var showUiPermanently = function () {
            showUi();
            _this.castUiHideTimeout.clear();
        };
        var showUiWithTimeout = function () {
            showUi();
            _this.castUiHideTimeout.start();
        };
        var showUiAfterSeek = function () {
            if (player.isPlaying()) {
                showUiWithTimeout();
            }
            else {
                showUiPermanently();
            }
        };
        player.on(player.exports.PlayerEvent.Play, showUiWithTimeout);
        player.on(player.exports.PlayerEvent.Paused, showUiPermanently);
        player.on(player.exports.PlayerEvent.Seek, showUiPermanently);
        player.on(player.exports.PlayerEvent.Seeked, showUiAfterSeek);
        uimanager.getConfig().events.onUpdated.subscribe(showUiWithTimeout);
    };
    CastUIContainer.prototype.release = function () {
        _super.prototype.release.call(this);
        this.castUiHideTimeout.clear();
    };
    return CastUIContainer;
}(uicontainer_1.UIContainer));
exports.CastUIContainer = CastUIContainer;

},{"../timeout":116,"./uicontainer":79}],21:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClickOverlay = void 0;
var button_1 = require("./button");
/**
 * A click overlay that opens an url in a new tab if clicked.
 *
 * @category Components
 */
var ClickOverlay = /** @class */ (function (_super) {
    __extends(ClickOverlay, _super);
    function ClickOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-clickoverlay',
            role: _this.config.role,
        }, _this.config);
        return _this;
    }
    ClickOverlay.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.setUrl(this.config.url);
        var element = this.getDomElement();
        element.on('click', function () {
            if (element.data('url')) {
                window.open(element.data('url'), '_blank');
            }
        });
    };
    /**
     * Gets the URL that should be followed when the watermark is clicked.
     * @returns {string} the watermark URL
     */
    ClickOverlay.prototype.getUrl = function () {
        return this.getDomElement().data('url');
    };
    ClickOverlay.prototype.setUrl = function (url) {
        if (url === undefined || url == null) {
            url = '';
        }
        this.getDomElement().data('url', url);
    };
    return ClickOverlay;
}(button_1.Button));
exports.ClickOverlay = ClickOverlay;

},{"./button":17}],22:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloseButton = void 0;
var button_1 = require("./button");
var i18n_1 = require("../localization/i18n");
/**
 * A button that closes (hides) a configured component.
 *
 * @category Buttons
 */
var CloseButton = /** @class */ (function (_super) {
    __extends(CloseButton, _super);
    function CloseButton(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-closebutton',
            text: i18n_1.i18n.getLocalizer('close'),
        }, _this.config);
        return _this;
    }
    CloseButton.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        this.onClick.subscribe(function () {
            config.target.hide();
        });
    };
    return CloseButton;
}(button_1.Button));
exports.CloseButton = CloseButton;

},{"../localization/i18n":94,"./button":17}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Component = exports.ViewMode = void 0;
var guid_1 = require("../guid");
var dom_1 = require("../dom");
var eventdispatcher_1 = require("../eventdispatcher");
var i18n_1 = require("../localization/i18n");
var ViewMode;
(function (ViewMode) {
    /**
     * Indicates that the component has entered a view mode where it must stay visible. Auto-hiding of this component
     * must be disabled as long as it resides in this state.
     */
    ViewMode["Persistent"] = "persistent";
    /**
     * The control can be hidden at any time.
     */
    ViewMode["Temporary"] = "temporary";
})(ViewMode = exports.ViewMode || (exports.ViewMode = {}));
/**
 * The base class of the UI framework.
 * Each component must extend this class and optionally the config interface.
 *
 * @category Components
 */
var Component = exports.Component = /** @class */ (function () {
    /**
     * Constructs a component with an optionally supplied config. All subclasses must call the constructor of their
     * superclass and then merge their configuration into the component's configuration.
     * @param config the configuration for the component
     */
    function Component(config) {
        if (config === void 0) { config = {}; }
        /**
         * The list of events that this component offers. These events should always be private and only directly
         * accessed from within the implementing component.
         *
         * Because TypeScript does not support private properties with the same name on different class hierarchy levels
         * (i.e. superclass and subclass cannot contain a private property with the same name), the default naming
         * convention for the event list of a component that should be followed by subclasses is the concatenation of the
         * camel-cased class name + 'Events' (e.g. SubClass extends Component => subClassEvents).
         * See {@link #componentEvents} for an example.
         *
         * Event properties should be named in camel case with an 'on' prefix and in the present tense. Async events may
         * have a start event (when the operation starts) in the present tense, and must have an end event (when the
         * operation ends) in the past tense (or present tense in special cases (e.g. onStart/onStarted or onPlay/onPlaying).
         * See {@link #componentEvents#onShow} for an example.
         *
         * Each event should be accompanied with a protected method named by the convention eventName + 'Event'
         * (e.g. onStartEvent), that actually triggers the event by calling {@link EventDispatcher#dispatch dispatch} and
         * passing a reference to the component as first parameter. Components should always trigger their events with these
         * methods. Implementing this pattern gives subclasses means to directly listen to the events by overriding the
         * method (and saving the overhead of passing a handler to the event dispatcher) and more importantly to trigger
         * these events without having access to the private event list.
         * See {@link #onShow} for an example.
         *
         * To provide external code the possibility to listen to this component's events (subscribe, unsubscribe, etc.),
         * each event should also be accompanied by a public getter function with the same name as the event's property,
         * that returns the {@link Event} obtained from the event dispatcher by calling {@link EventDispatcher#getEvent}.
         * See {@link #onShow} for an example.
         *
         * Full example for an event representing an example action in a example component:
         *
         * <code>
         * // Define an example component class with an example event
         * class ExampleComponent extends Component<ComponentConfig> {
           *
           *     private exampleComponentEvents = {
           *         onExampleAction: new EventDispatcher<ExampleComponent, NoArgs>()
           *     }
           *
           *     // constructor and other stuff...
           *
           *     protected onExampleActionEvent() {
           *        this.exampleComponentEvents.onExampleAction.dispatch(this);
           *    }
           *
           *    get onExampleAction(): Event<ExampleComponent, NoArgs> {
           *        return this.exampleComponentEvents.onExampleAction.getEvent();
           *    }
           * }
         *
         * // Create an instance of the component somewhere
         * var exampleComponentInstance = new ExampleComponent();
         *
         * // Subscribe to the example event on the component
         * exampleComponentInstance.onExampleAction.subscribe(function (sender: ExampleComponent) {
           *     console.log('onExampleAction of ' + sender + ' has fired!');
           * });
         * </code>
         */
        this.componentEvents = {
            onShow: new eventdispatcher_1.EventDispatcher(),
            onHide: new eventdispatcher_1.EventDispatcher(),
            onViewModeChanged: new eventdispatcher_1.EventDispatcher(),
            onHoverChanged: new eventdispatcher_1.EventDispatcher(),
            onEnabled: new eventdispatcher_1.EventDispatcher(),
            onDisabled: new eventdispatcher_1.EventDispatcher(),
        };
        // Create the configuration for this component
        this.config = this.mergeConfig(config, {
            tag: 'div',
            id: 'bmpui-id-' + guid_1.Guid.next(),
            cssPrefix: 'bmpui',
            cssClass: 'ui-component',
            cssClasses: [],
            hidden: false,
            disabled: false,
        }, {});
        this.viewMode = ViewMode.Temporary;
    }
    /**
     * Initializes the component, e.g. by applying config settings.
     * This method must not be called from outside the UI framework.
     *
     * This method is automatically called by the {@link UIInstanceManager}. If the component is an inner component of
     * some component, and thus encapsulated abd managed internally and never directly exposed to the UIManager,
     * this method must be called from the managing component's {@link #initialize} method.
     */
    Component.prototype.initialize = function () {
        this.hidden = this.config.hidden;
        this.disabled = this.config.disabled;
        // Hide the component at initialization if it is configured to be hidden
        if (this.isHidden()) {
            this.hidden = false; // Set flag to false for the following hide() call to work (hide() checks the flag)
            this.hide();
        }
        // Disable the component at initialization if it is configured to be disabled
        if (this.isDisabled()) {
            this.disabled = false; // Set flag to false for the following disable() call to work (disable() checks the flag)
            this.disable();
        }
    };
    /**
     * Configures the component for the supplied Player and UIInstanceManager. This is the place where all the magic
     * happens, where components typically subscribe and react to events (on their DOM element, the Player, or the
     * UIInstanceManager), and basically everything that makes them interactive.
     * This method is called only once, when the UIManager initializes the UI.
     *
     * Subclasses usually overwrite this method to add their own functionality.
     *
     * @param player the player which this component controls
     * @param uimanager the UIInstanceManager that manages this component
     */
    Component.prototype.configure = function (player, uimanager) {
        var _this = this;
        this.onShow.subscribe(function () { return uimanager.onComponentShow.dispatch(_this); });
        this.onHide.subscribe(function () { return uimanager.onComponentHide.dispatch(_this); });
        this.onViewModeChanged.subscribe(function (_, args) { return uimanager.onComponentViewModeChanged.dispatch(_this, args); });
        // Track the hovered state of the element
        this.getDomElement().on('mouseenter', function () { return _this.onHoverChangedEvent(true); });
        this.getDomElement().on('mouseleave', function () { return _this.onHoverChangedEvent(false); });
    };
    /**
     * Releases all resources and dependencies that the component holds. Player, DOM, and UIManager events are
     * automatically removed during release and do not explicitly need to be removed here.
     * This method is called by the UIManager when it releases the UI.
     *
     * Subclasses that need to release resources should override this method and call super.release().
     */
    Component.prototype.release = function () {
        // Nothing to do here, override where necessary
    };
    /**
     * Generate the DOM element for this component.
     *
     * Subclasses usually overwrite this method to extend or replace the DOM element with their own design.
     */
    Component.prototype.toDomElement = function () {
        var element = new dom_1.DOM(this.config.tag, {
            'id': this.config.id,
            'class': this.getCssClasses(),
            'role': this.config.role,
        }, this);
        return element;
    };
    /**
     * Returns the DOM element of this component. Creates the DOM element if it does not yet exist.
     *
     * Should not be overwritten by subclasses.
     *
     * @returns {DOM}
     */
    Component.prototype.getDomElement = function () {
        if (!this.element) {
            this.element = this.toDomElement();
        }
        return this.element;
    };
    /**
     * Checks if this component has a DOM element.
     */
    Component.prototype.hasDomElement = function () {
        return Boolean(this.element);
    };
    Component.prototype.setAriaLabel = function (label) {
        this.setAriaAttr('label', i18n_1.i18n.performLocalization(label));
    };
    Component.prototype.setAriaAttr = function (name, value) {
        this.getDomElement().attr("aria-".concat(name), value);
    };
    /**
     * Merges a configuration with a default configuration and a base configuration from the superclass.
     *
     * @param config the configuration settings for the components, as usually passed to the constructor
     * @param defaults a default configuration for settings that are not passed with the configuration
     * @param base configuration inherited from a superclass
     * @returns {Config}
     */
    Component.prototype.mergeConfig = function (config, defaults, base) {
        // Extend default config with supplied config
        var merged = Object.assign({}, base, defaults, config);
        // Return the extended config
        return merged;
    };
    /**
     * Helper method that returns a string of all CSS classes of the component.
     *
     * @returns {string}
     */
    Component.prototype.getCssClasses = function () {
        var _this = this;
        // Merge all CSS classes into single array
        var flattenedArray = [this.config.cssClass].concat(this.config.cssClasses);
        // Prefix classes
        flattenedArray = flattenedArray.map(function (css) {
            return _this.prefixCss(css);
        });
        // Join array values into a string
        var flattenedString = flattenedArray.join(' ');
        // Return trimmed string to prevent whitespace at the end from the join operation
        return flattenedString.trim();
    };
    Component.prototype.prefixCss = function (cssClassOrId) {
        return this.config.cssPrefix + '-' + cssClassOrId;
    };
    /**
     * Returns the configuration object of the component.
     * @returns {Config}
     */
    Component.prototype.getConfig = function () {
        return this.config;
    };
    /**
     * Hides the component if shown.
     * This method basically transfers the component into the hidden state. Actual hiding is done via CSS.
     */
    Component.prototype.hide = function () {
        if (!this.hidden) {
            this.hidden = true;
            this.getDomElement().addClass(this.prefixCss(Component.CLASS_HIDDEN));
            this.onHideEvent();
        }
    };
    /**
     * Shows the component if hidden.
     */
    Component.prototype.show = function () {
        if (this.hidden) {
            this.getDomElement().removeClass(this.prefixCss(Component.CLASS_HIDDEN));
            this.hidden = false;
            this.onShowEvent();
        }
    };
    /**
     * Determines if the component is hidden.
     * @returns {boolean} true if the component is hidden, else false
     */
    Component.prototype.isHidden = function () {
        return this.hidden;
    };
    /**
     * Determines if the component is shown.
     * @returns {boolean} true if the component is visible, else false
     */
    Component.prototype.isShown = function () {
        return !this.isHidden();
    };
    /**
     * Toggles the hidden state by hiding the component if it is shown, or showing it if hidden.
     */
    Component.prototype.toggleHidden = function () {
        if (this.isHidden()) {
            this.show();
        }
        else {
            this.hide();
        }
    };
    /**
     * Disables the component.
     * This method basically transfers the component into the disabled state. Actual disabling is done via CSS or child
     * components. (e.g. Button needs to unsubscribe click listeners)
     */
    Component.prototype.disable = function () {
        if (!this.disabled) {
            this.disabled = true;
            this.getDomElement().addClass(this.prefixCss(Component.CLASS_DISABLED));
            this.onDisabledEvent();
        }
    };
    /**
     * Enables the component.
     * This method basically transfers the component into the enabled state. Actual enabling is done via CSS or child
     * components. (e.g. Button needs to subscribe click listeners)
     */
    Component.prototype.enable = function () {
        if (this.disabled) {
            this.getDomElement().removeClass(this.prefixCss(Component.CLASS_DISABLED));
            this.disabled = false;
            this.onEnabledEvent();
        }
    };
    /**
     * Determines if the component is disabled.
     * @returns {boolean} true if the component is disabled, else false
     */
    Component.prototype.isDisabled = function () {
        return this.disabled;
    };
    /**
     * Determines if the component is enabled.
     * @returns {boolean} true if the component is enabled, else false
     */
    Component.prototype.isEnabled = function () {
        return !this.isDisabled();
    };
    /**
     * Determines if the component is currently hovered.
     * @returns {boolean} true if the component is hovered, else false
     */
    Component.prototype.isHovered = function () {
        return this.hovered;
    };
    /**
     * Fires the onShow event.
     * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
     */
    Component.prototype.onShowEvent = function () {
        this.componentEvents.onShow.dispatch(this);
    };
    /**
     * Fires the onHide event.
     * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
     */
    Component.prototype.onHideEvent = function () {
        this.componentEvents.onHide.dispatch(this);
    };
    /**
     * Fires the onEnabled event.
     * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
     */
    Component.prototype.onEnabledEvent = function () {
        this.componentEvents.onEnabled.dispatch(this);
    };
    /**
     * Fires the onDisabled event.
     * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
     */
    Component.prototype.onDisabledEvent = function () {
        this.componentEvents.onDisabled.dispatch(this);
    };
    /**
     * Fires the onViewModeChanged event.
     * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
     */
    Component.prototype.onViewModeChangedEvent = function (mode) {
        if (this.viewMode === mode) {
            return;
        }
        this.viewMode = mode;
        this.componentEvents.onViewModeChanged.dispatch(this, { mode: mode });
    };
    /**
     * Fires the onHoverChanged event.
     * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
     */
    Component.prototype.onHoverChangedEvent = function (hovered) {
        this.hovered = hovered;
        this.componentEvents.onHoverChanged.dispatch(this, { hovered: hovered });
    };
    Object.defineProperty(Component.prototype, "onShow", {
        /**
         * Gets the event that is fired when the component is showing.
         * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
         * @returns {Event<Component<Config>, NoArgs>}
         */
        get: function () {
            return this.componentEvents.onShow.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "onHide", {
        /**
         * Gets the event that is fired when the component is hiding.
         * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
         * @returns {Event<Component<Config>, NoArgs>}
         */
        get: function () {
            return this.componentEvents.onHide.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "onEnabled", {
        /**
         * Gets the event that is fired when the component is enabling.
         * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
         * @returns {Event<Component<Config>, NoArgs>}
         */
        get: function () {
            return this.componentEvents.onEnabled.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "onDisabled", {
        /**
         * Gets the event that is fired when the component is disabling.
         * See the detailed explanation on event architecture on the {@link #componentEvents events list}.
         * @returns {Event<Component<Config>, NoArgs>}
         */
        get: function () {
            return this.componentEvents.onDisabled.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "onHoverChanged", {
        /**
         * Gets the event that is fired when the component's hover-state is changing.
         * @returns {Event<Component<Config>, ComponentHoverChangedEventArgs>}
         */
        get: function () {
            return this.componentEvents.onHoverChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "onViewModeChanged", {
        /**
         * Gets the event that is fired when the `ViewMode` of this component has changed.
         * @returns {Event<Component<Config>, ViewModeChangedEventArgs>}
         */
        get: function () {
            return this.componentEvents.onViewModeChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    /**
     * The classname that is attached to the element when it is in the hidden state.
     * @type {string}
     */
    Component.CLASS_HIDDEN = 'hidden';
    /**
     * The classname that is attached to the element when it is in the disabled state.
     * @type {string}
     */
    Component.CLASS_DISABLED = 'disabled';
    return Component;
}());

},{"../dom":87,"../eventdispatcher":89,"../guid":92,"../localization/i18n":94}],24:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Container = void 0;
var component_1 = require("./component");
var dom_1 = require("../dom");
var arrayutils_1 = require("../arrayutils");
var i18n_1 = require("../localization/i18n");
/**
 * A container component that can contain a collection of child components.
 * Components can be added at construction time through the {@link ContainerConfig#components} setting, or later
 * through the {@link Container#addComponent} method. The UIManager automatically takes care of all components, i.e. it
 * initializes and configures them automatically.
 *
 * In the DOM, the container consists of an outer <div> (that can be configured by the config) and an inner wrapper
 * <div> that contains the components. This double-<div>-structure is often required to achieve many advanced effects
 * in CSS and/or JS, e.g. animations and certain formatting with absolute positioning.
 *
 * DOM example:
 * <code>
 *     <div class='ui-container'>
 *         <div class='container-wrapper'>
 *             ... child components ...
 *         </div>
 *     </div>
 * </code>
 *
 * @category Components
 */
var Container = /** @class */ (function (_super) {
    __extends(Container, _super);
    function Container(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-container',
            components: [],
        }, _this.config);
        _this.componentsToAdd = [];
        _this.componentsToRemove = [];
        _this.componentsInPersistentViewMode = 0;
        return _this;
    }
    /**
     * Adds a child component to the container.
     * @param component the component to add
     */
    Container.prototype.addComponent = function (component) {
        this.config.components.push(component);
        this.componentsToAdd.push(component);
    };
    /**
     * Removes a child component from the container.
     * @param component the component to remove
     * @returns {boolean} true if the component has been removed, false if it is not contained in this container
     */
    Container.prototype.removeComponent = function (component) {
        if (arrayutils_1.ArrayUtils.remove(this.config.components, component) != null) {
            this.componentsToRemove.push(component);
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * Gets an array of all child components in this container.
     * @returns {Component<ComponentConfig>[]}
     */
    Container.prototype.getComponents = function () {
        return this.config.components;
    };
    /**
     * Removes all child components from the container.
     */
    Container.prototype.removeComponents = function () {
        for (var _i = 0, _a = this.getComponents().slice(); _i < _a.length; _i++) {
            var component = _a[_i];
            this.removeComponent(component);
        }
    };
    /**
     * Updates the DOM of the container with the current components.
     */
    Container.prototype.updateComponents = function () {
        /* We cannot just clear the container to remove all elements and then re-add those that should stay, because
         * IE looses the innerHTML of unattached elements, leading to empty elements within the container (e.g. missing
         * subtitle text in SubtitleLabel).
         * Instead, we keep a list of elements to add and remove, leaving remaining elements alone. By keeping them in
         * the DOM, their content gets preserved in all browsers.
         */
        var component;
        while (component = this.componentsToRemove.shift()) {
            component.getDomElement().remove();
        }
        while (component = this.componentsToAdd.shift()) {
            this.innerContainerElement.append(component.getDomElement());
        }
    };
    Container.prototype.toDomElement = function () {
        // Create the container element (the outer <div>)
        var containerElement = new dom_1.DOM(this.config.tag, {
            'id': this.config.id,
            'class': this.getCssClasses(),
            'role': this.config.role,
            'aria-label': i18n_1.i18n.performLocalization(this.config.ariaLabel),
        }, this);
        // Create the inner container element (the inner <div>) that will contain the components
        var innerContainer = new dom_1.DOM(this.config.tag, {
            'class': this.prefixCss('container-wrapper'),
        });
        this.innerContainerElement = innerContainer;
        for (var _i = 0, _a = this.config.components; _i < _a.length; _i++) {
            var initialComponent = _a[_i];
            this.componentsToAdd.push(initialComponent);
        }
        this.updateComponents();
        containerElement.append(innerContainer);
        return containerElement;
    };
    Container.prototype.suspendHideTimeout = function () {
        // to be implemented in subclass
    };
    Container.prototype.resumeHideTimeout = function () {
        // to be implemented in subclass
    };
    Container.prototype.trackComponentViewMode = function (mode) {
        if (mode === component_1.ViewMode.Persistent) {
            this.componentsInPersistentViewMode++;
        }
        else if (mode === component_1.ViewMode.Temporary) {
            this.componentsInPersistentViewMode = Math.max(this.componentsInPersistentViewMode - 1, 0);
        }
        if (this.componentsInPersistentViewMode > 0) {
            // There is at least one component that must not be hidden,
            // therefore the hide timeout must be suspended
            this.suspendHideTimeout();
        }
        else {
            this.resumeHideTimeout();
        }
    };
    return Container;
}(component_1.Component));
exports.Container = Container;

},{"../arrayutils":6,"../dom":87,"../localization/i18n":94,"./component":23}],25:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControlBar = void 0;
var container_1 = require("./container");
var uiutils_1 = require("../uiutils");
var spacer_1 = require("./spacer");
var i18n_1 = require("../localization/i18n");
var browserutils_1 = require("../browserutils");
var settingspanel_1 = require("./settingspanel");
/**
 * A container for main player control components, e.g. play toggle button, seek bar, volume control, fullscreen toggle
 * button.
 *
 * @category Components
 */
var ControlBar = /** @class */ (function (_super) {
    __extends(ControlBar, _super);
    function ControlBar(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-controlbar',
            hidden: true,
            role: 'region',
            ariaLabel: i18n_1.i18n.getLocalizer('controlBar'),
        }, _this.config);
        return _this;
    }
    ControlBar.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        // Counts how many components are hovered and block hiding of the control bar
        var hoverStackCount = 0;
        var isSettingsPanelShown = false;
        // Only enabling this for platforms without touch input.
        // Enabling this for touch devices causes the UI to not disappear after hideDelay seconds,
        // because `mouseleave` event is not emitted.
        // Instead, it will stay visible until another manual interaction is performed.
        if (uimanager.getConfig().disableAutoHideWhenHovered && !browserutils_1.BrowserUtils.isTouchSupported) {
            // Track hover status of child components
            uiutils_1.UIUtils.traverseTree(this, function (component) {
                // Do not track hover status of child containers or spacers, only of 'real' controls
                if (component instanceof container_1.Container || component instanceof spacer_1.Spacer) {
                    return;
                }
                // Subscribe hover event and keep a count of the number of hovered children
                component.onHoverChanged.subscribe(function (_, args) {
                    if (args.hovered) {
                        hoverStackCount++;
                    }
                    else {
                        hoverStackCount--;
                    }
                });
            });
        }
        if (browserutils_1.BrowserUtils.isMobile) {
            uimanager.onComponentShow.subscribe(function (component) {
                if (component instanceof settingspanel_1.SettingsPanel) {
                    isSettingsPanelShown = true;
                }
            });
            uimanager.onComponentHide.subscribe(function (component) {
                if (component instanceof settingspanel_1.SettingsPanel) {
                    isSettingsPanelShown = false;
                }
            });
        }
        uimanager.onControlsShow.subscribe(function () {
            _this.show();
        });
        uimanager.onPreviewControlsHide.subscribe(function (sender, args) {
            // Cancel the hide event if hovered child components block hiding or if the settings panel is active on mobile.
            args.cancel = args.cancel || (hoverStackCount > 0 || isSettingsPanelShown);
        });
        uimanager.onControlsHide.subscribe(function () {
            _this.hide();
        });
    };
    return ControlBar;
}(container_1.Container));
exports.ControlBar = ControlBar;

},{"../browserutils":8,"../localization/i18n":94,"../uiutils":120,"./container":24,"./settingspanel":50,"./spacer":57}],26:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.EcoModeContainer = void 0;
var i18n_1 = require("../localization/i18n");
var container_1 = require("./container");
var ecomodetogglebutton_1 = require("./ecomodetogglebutton");
var label_1 = require("./label");
var settingspanelitem_1 = require("./settingspanelitem");
/**
 * @category Containers
 */
var EcoModeContainer = /** @class */ (function (_super) {
    __extends(EcoModeContainer, _super);
    function EcoModeContainer(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.savedEmissons = 0;
        var ecoModeToggleButton = new ecomodetogglebutton_1.EcoModeToggleButton();
        var labelEcoMode = new label_1.Label({
            text: i18n_1.i18n.getLocalizer('ecoMode.title'),
            for: ecoModeToggleButton.getConfig().id,
            id: 'ecomodelabel',
        });
        _this.emissionsSavedLabel = new label_1.Label({
            text: "".concat(_this.savedEmissons.toFixed(4), " gCO2"),
            cssClass: 'ui-label-savedEnergy',
        });
        _this.ecoModeToggleButtonItem = new settingspanelitem_1.SettingsPanelItem(labelEcoMode, ecoModeToggleButton);
        _this.ecoModeSavedEmissionsItem = new settingspanelitem_1.SettingsPanelItem('Saved Emissions', _this.emissionsSavedLabel, {
            hidden: true,
        });
        _this.addComponent(_this.ecoModeToggleButtonItem);
        _this.addComponent(_this.ecoModeSavedEmissionsItem);
        ecoModeToggleButton.onToggleOn.subscribe(function () {
            _this.ecoModeSavedEmissionsItem.show();
            _this.onToggleCallback();
        });
        ecoModeToggleButton.onToggleOff.subscribe(function () {
            _this.ecoModeSavedEmissionsItem.hide();
            _this.onToggleCallback();
        });
        return _this;
    }
    EcoModeContainer.prototype.setOnToggleCallback = function (callback) {
        this.onToggleCallback = callback;
    };
    EcoModeContainer.prototype.configure = function (player) {
        var _this = this;
        player.on(player.exports.PlayerEvent.SegmentPlayback, function (segment) {
            if (!segment.mimeType.includes('video')) {
                return;
            }
            var _a = segment.mediaInfo, height = _a.height, width = _a.width, bitrate = _a.bitrate, frameRate = _a.frameRate;
            var _b = _this.getMaxQualityAvailable(player.getAvailableVideoQualities()), maxHeight = _b.height, maxBitrate = _b.bitrate, maxWidth = _b.width;
            var currentEnergyKwh = _this.calculateEnergyConsumption(frameRate, height, width, bitrate, segment.duration);
            var maxEnergyKwh = _this.calculateEnergyConsumption(frameRate, maxHeight, maxWidth, maxBitrate, segment.duration);
            if (_this.ecoModeSavedEmissionsItem.isShown()) {
                _this.updateSavedEmissions(currentEnergyKwh, maxEnergyKwh, _this.emissionsSavedLabel);
            }
        });
    };
    EcoModeContainer.prototype.updateSavedEmissions = function (currentEnergyConsuption, maxEnergyConsuption, emissionsSavedLabel) {
        // 475 is the average carbon intensity of all countries in gCO2/kWh
        var averageCarbonIntensity = 475;
        this.currentEnergyEmission = currentEnergyConsuption * averageCarbonIntensity;
        var maxEnergyEmisson = maxEnergyConsuption * averageCarbonIntensity;
        this.savedEmissons += maxEnergyEmisson - this.currentEnergyEmission;
        emissionsSavedLabel.setText(this.savedEmissons.toFixed(4) + ' gCO2');
    };
    /**
     * The calculations are based on the following paper: https://arxiv.org/pdf/2210.05444.pdf
     */
    EcoModeContainer.prototype.calculateEnergyConsumption = function (fps, height, width, bitrate, duration) {
        var fpsWeight = 0.035;
        var pixeldWeight = 5.76e-9;
        var birateWeight = 6.97e-6;
        var constantOffset = 8.52;
        var bitrateInternetWeight = 3.24e-5;
        var internetConnectionOffset = 1.15;
        var videoCodec = 4.16;
        var energyConsumptionW = fpsWeight * fps +
            pixeldWeight * height * width +
            (birateWeight + bitrateInternetWeight) * (bitrate / 1000) +
            videoCodec +
            constantOffset +
            internetConnectionOffset;
        // Convert energy consumption from Watts (W) to Kilowatt-hours (kWh) for the given time duration of the segment
        var energyConsumptionKwh = (energyConsumptionW * duration) / 3.6e6;
        return energyConsumptionKwh;
    };
    EcoModeContainer.prototype.getMaxQualityAvailable = function (availableVideoQualities) {
        var sortedQualities = availableVideoQualities.sort(function (a, b) { return a.bitrate - b.bitrate; });
        return sortedQualities[sortedQualities.length - 1];
    };
    return EcoModeContainer;
}(container_1.Container));
exports.EcoModeContainer = EcoModeContainer;

},{"../localization/i18n":94,"./container":24,"./ecomodetogglebutton":27,"./label":33,"./settingspanelitem":51}],27:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.EcoModeToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var i18n_1 = require("../localization/i18n");
/**
 * @category Buttons
 */
var EcoModeToggleButton = /** @class */ (function (_super) {
    __extends(EcoModeToggleButton, _super);
    function EcoModeToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        var defaultConfig = {
            text: i18n_1.i18n.getLocalizer('ecoMode'),
            cssClass: 'ui-ecomodetogglebutton',
            onClass: 'on',
            offClass: 'off',
            ariaLabel: i18n_1.i18n.getLocalizer('ecoMode'),
        };
        _this.config = _this.mergeConfig(config, defaultConfig, _this.config);
        return _this;
    }
    EcoModeToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        if (this.areAdaptationApisAvailable(player)) {
            this.onClick.subscribe(function () {
                _this.toggle();
            });
            this.onToggleOn.subscribe(function () {
                _this.enableEcoMode(player);
                player.setVideoQuality('auto');
            });
            this.onToggleOff.subscribe(function () {
                _this.disableEcoMode(player);
            });
            player.on(player.exports.PlayerEvent.VideoQualityChanged, function (quality) {
                if (quality.targetQuality.id !== 'auto') {
                    _this.off();
                    _this.disableEcoMode(player);
                }
            });
        }
        else {
            _super.prototype.disable.call(this);
        }
    };
    EcoModeToggleButton.prototype.areAdaptationApisAvailable = function (player) {
        var isGetConfigAvailable = Boolean(player.adaptation.getConfig && typeof player.adaptation.getConfig === 'function');
        var isSetConfigAvailable = Boolean(player.adaptation.setConfig && typeof player.adaptation.setConfig === 'function');
        return Boolean(player.adaptation && isGetConfigAvailable && isSetConfigAvailable);
    };
    EcoModeToggleButton.prototype.enableEcoMode = function (player) {
        this.adaptationConfig = player.adaptation.getConfig();
        var codec = player.getAvailableVideoQualities()[0].codec;
        if (codec.includes('avc')) {
            player.adaptation.setConfig({
                resolution: { maxSelectableVideoHeight: 720 },
                limitToPlayerSize: true,
            });
        }
        if (codec.includes('hvc') || codec.includes('hev')) {
            player.adaptation.setConfig({
                resolution: { maxSelectableVideoHeight: 1080 },
                limitToPlayerSize: true,
            });
        }
        if (codec.includes('av1') || codec.includes('av01')) {
            player.adaptation.setConfig({
                resolution: { maxSelectableVideoHeight: 1440 },
                limitToPlayerSize: true,
            });
        }
    };
    EcoModeToggleButton.prototype.disableEcoMode = function (player) {
        player.adaptation.setConfig(this.adaptationConfig);
    };
    return EcoModeToggleButton;
}(togglebutton_1.ToggleButton));
exports.EcoModeToggleButton = EcoModeToggleButton;

},{"../localization/i18n":94,"./togglebutton":77}],28:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorMessageOverlay = void 0;
var container_1 = require("./container");
var label_1 = require("./label");
var tvnoisecanvas_1 = require("./tvnoisecanvas");
var errorutils_1 = require("../errorutils");
var mobilev3playerapi_1 = require("../mobilev3playerapi");
var gobackbutton_1 = require("../../custom/ts/components/gobackbutton");
/**
 * Overlays the player and displays error messages.
 *
 * @category Components
 */
var ErrorMessageOverlay = /** @class */ (function (_super) {
    __extends(ErrorMessageOverlay, _super);
    function ErrorMessageOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.errorLabel = new label_1.Label({ cssClass: 'ui-errormessage-label' });
        _this.tvNoiseBackground = new tvnoisecanvas_1.TvNoiseCanvas();
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-errormessage-overlay',
            components: [_this.tvNoiseBackground, _this.errorLabel, new gobackbutton_1.GoBackButton({ error: true })],
            hidden: true,
        }, _this.config);
        return _this;
    }
    ErrorMessageOverlay.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var handleErrorMessage = function (event, message) {
            var customizedMessage = customizeErrorMessage(uimanager.getConfig().errorMessages || config.messages, event);
            if (customizedMessage) {
                message = customizedMessage;
            }
            _this.display(message);
        };
        if ((0, mobilev3playerapi_1.isMobileV3PlayerAPI)(player)) {
            var errorEventHandler = function (event) {
                var message = errorutils_1.ErrorUtils.defaultMobileV3ErrorMessageTranslator(event);
                handleErrorMessage(event, message);
            };
            player.on(mobilev3playerapi_1.MobileV3PlayerEvent.PlayerError, errorEventHandler);
            player.on(mobilev3playerapi_1.MobileV3PlayerEvent.SourceError, errorEventHandler);
        }
        else {
            player.on(player.exports.PlayerEvent.Error, function (event) {
                var message = errorutils_1.ErrorUtils.defaultWebErrorMessageTranslator(event);
                handleErrorMessage(event, message);
            });
        }
        player.on(player.exports.PlayerEvent.SourceLoaded, function (event) {
            if (_this.isShown()) {
                _this.tvNoiseBackground.stop();
                _this.hide();
            }
        });
    };
    ErrorMessageOverlay.prototype.display = function (errorMessage) {
        this.errorLabel.setText(errorMessage);
        this.tvNoiseBackground.start();
        this.show();
    };
    ErrorMessageOverlay.prototype.release = function () {
        _super.prototype.release.call(this);
        // Canvas rendering must be explicitly stopped, else it just continues forever and hogs resources
        this.tvNoiseBackground.stop();
    };
    return ErrorMessageOverlay;
}(container_1.Container));
exports.ErrorMessageOverlay = ErrorMessageOverlay;
function customizeErrorMessage(errorMessages, event) {
    if (!errorMessages) {
        return undefined;
    }
    // Process message vocabularies
    if (typeof errorMessages === 'function') {
        // Translation function for all errors
        return errorMessages(event);
    }
    if (errorMessages[event.code]) {
        // It's not a translation function, so it must be a map of strings or translation functions
        var customMessage = errorMessages[event.code];
        return typeof customMessage === 'string' ? customMessage : customMessage(event);
    }
}

},{"../../custom/ts/components/gobackbutton":1,"../errorutils":88,"../mobilev3playerapi":100,"./container":24,"./label":33,"./tvnoisecanvas":78}],29:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FullscreenToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles the player between windowed and fullscreen view.
 *
 * @category Buttons
 */
var FullscreenToggleButton = /** @class */ (function (_super) {
    __extends(FullscreenToggleButton, _super);
    function FullscreenToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-fullscreentogglebutton',
            text: i18n_1.i18n.getLocalizer('fullscreen'),
        }, _this.config);
        return _this;
    }
    FullscreenToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var isFullScreenAvailable = function () {
            return player.isViewModeAvailable(player.exports.ViewMode.Fullscreen);
        };
        var fullscreenStateHandler = function () {
            player.getViewMode() === player.exports.ViewMode.Fullscreen ? _this.on() : _this.off();
        };
        var fullscreenAvailabilityChangedHandler = function () {
            isFullScreenAvailable() ? _this.show() : _this.hide();
        };
        player.on(player.exports.PlayerEvent.ViewModeChanged, fullscreenStateHandler);
        // Available only in our native SDKs for now
        if (player.exports.PlayerEvent.ViewModeAvailabilityChanged) {
            player.on(player.exports.PlayerEvent.ViewModeAvailabilityChanged, fullscreenAvailabilityChangedHandler);
        }
        uimanager.getConfig().events.onUpdated.subscribe(fullscreenAvailabilityChangedHandler);
        this.onClick.subscribe(function () {
            if (!isFullScreenAvailable()) {
                if (console) {
                    console.log('Fullscreen unavailable');
                }
                return;
            }
            var targetViewMode = player.getViewMode() === player.exports.ViewMode.Fullscreen
                ? player.exports.ViewMode.Inline
                : player.exports.ViewMode.Fullscreen;
            player.setViewMode(targetViewMode);
        });
        // Startup init
        fullscreenAvailabilityChangedHandler();
        fullscreenStateHandler();
    };
    return FullscreenToggleButton;
}(togglebutton_1.ToggleButton));
exports.FullscreenToggleButton = FullscreenToggleButton;

},{"../localization/i18n":94,"./togglebutton":77}],30:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.HugePlaybackToggleButton = void 0;
var playbacktogglebutton_1 = require("./playbacktogglebutton");
var dom_1 = require("../dom");
var i18n_1 = require("../localization/i18n");
/**
 * A button that overlays the video and toggles between playback and pause.
 *
 * @category Buttons
 */
var HugePlaybackToggleButton = /** @class */ (function (_super) {
    __extends(HugePlaybackToggleButton, _super);
    function HugePlaybackToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-hugeplaybacktogglebutton',
            text: i18n_1.i18n.getLocalizer('playPause'),
            role: 'button',
        }, _this.config);
        return _this;
    }
    HugePlaybackToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        // Update button state through API events
        _super.prototype.configure.call(this, player, uimanager, false);
        // Set enterFullscreenOnInitialPlayback if set in the uimanager config
        if (typeof uimanager.getConfig().enterFullscreenOnInitialPlayback === 'boolean') {
            this.config.enterFullscreenOnInitialPlayback = uimanager.getConfig().enterFullscreenOnInitialPlayback;
        }
        var togglePlayback = function () {
            if (player.isPlaying() || _this.isPlayInitiated) {
                player.pause('ui');
            }
            else {
                player.play('ui');
            }
        };
        var toggleFullscreen = function () {
            if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {
                player.setViewMode(player.exports.ViewMode.Inline);
            }
            else {
                player.setViewMode(player.exports.ViewMode.Fullscreen);
            }
        };
        var firstPlay = true;
        var clickTime = 0;
        var doubleClickTime = 0;
        /*
         * YouTube-style toggle button handling
         *
         * The goal is to prevent a short pause or playback interval between a click, that toggles playback, and a
         * double click, that toggles fullscreen. In this naive approach, the first click would e.g. start playback,
         * the second click would be detected as double click and toggle to fullscreen, and as second normal click stop
         * playback, which results is a short playback interval with max length of the double click detection
         * period (usually 500ms).
         *
         * To solve this issue, we defer handling of the first click for 200ms, which is almost unnoticeable to the user,
         * and just toggle playback if no second click (double click) has been registered during this period. If a double
         * click is registered, we just toggle the fullscreen. In the first 200ms, undesired playback changes thus cannot
         * happen. If a double click is registered within 500ms, we undo the playback change and switch fullscreen mode.
         * In the end, this method basically introduces a 200ms observing interval in which playback changes are prevented
         * if a double click happens.
         */
        this.onClick.subscribe(function () {
            // Directly start playback on first click of the button.
            // This is a required workaround for mobile browsers where video playback needs to be triggered directly
            // by the user. A deferred playback start through the timeout below is not considered as user action and
            // therefore ignored by mobile browsers.
            if (firstPlay) {
                // Try to start playback. Then we wait for Play and only when it arrives, we disable the firstPlay flag.
                // If we disable the flag here, onClick was triggered programmatically instead of by a user interaction, and
                // playback is blocked (e.g. on mobile devices due to the programmatic play() call), we loose the chance to
                // ever start playback through a user interaction again with this button.
                togglePlayback();
                if (_this.config.enterFullscreenOnInitialPlayback) {
                    player.setViewMode(player.exports.ViewMode.Fullscreen);
                }
                return;
            }
            var now = Date.now();
            if (now - clickTime < 200) {
                // We have a double click inside the 200ms interval, just toggle fullscreen mode
                toggleFullscreen();
                doubleClickTime = now;
                return;
            }
            else if (now - clickTime < 500) {
                // We have a double click inside the 500ms interval, undo playback toggle and toggle fullscreen mode
                toggleFullscreen();
                togglePlayback();
                doubleClickTime = now;
                return;
            }
            clickTime = now;
            setTimeout(function () {
                if (Date.now() - doubleClickTime > 200) {
                    // No double click detected, so we toggle playback and wait what happens next
                    togglePlayback();
                }
            }, 200);
        });
        player.on(player.exports.PlayerEvent.Play, function () {
            // Playback has really started, we can disable the flag to switch to normal toggle button handling
            firstPlay = false;
        });
        player.on(player.exports.PlayerEvent.Warning, function (event) {
            if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {
                // if playback could not be started, reset the first play flag as we need the user interaction to start
                firstPlay = true;
            }
        });
        var suppressPlayButtonTransitionAnimation = function () {
            // Disable the current animation
            _this.setTransitionAnimationsEnabled(false);
            // Enable the transition animations for the next state change
            _this.onToggle.subscribeOnce(function () {
                _this.setTransitionAnimationsEnabled(true);
            });
        };
        // Hide the play button animation when the UI is loaded (it should only be animated on state changes)
        suppressPlayButtonTransitionAnimation();
        var isAutoplayEnabled = player.getConfig().playback && Boolean(player.getConfig().playback.autoplay);
        // We only know if an autoplay attempt is upcoming if the player is not yet ready. It the player is already ready,
        // the attempt might be upcoming or might have already happened, but we don't have to handle that because we can
        // simply rely on isPlaying and the play state events.
        var isAutoplayUpcoming = !player.getSource() && isAutoplayEnabled;
        // Hide the play button when the player is already playing or autoplay is upcoming
        if (player.isPlaying() || isAutoplayUpcoming) {
            // Hide the play button (switch to playing state)
            this.on();
            // Disable the animation of the playing state switch
            suppressPlayButtonTransitionAnimation();
            // Show the play button without an animation if a play attempt is blocked
            player.on(player.exports.PlayerEvent.Warning, function (event) {
                if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {
                    suppressPlayButtonTransitionAnimation();
                }
            });
        }
    };
    HugePlaybackToggleButton.prototype.toDomElement = function () {
        var buttonElement = _super.prototype.toDomElement.call(this);
        // Add child that contains the play button image
        // Setting the image directly on the button does not work together with scaling animations, because the button
        // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined
        // to the size if the image, it can scale inside the player without overshooting.
        buttonElement.append(new dom_1.DOM('div', {
            'class': this.prefixCss('image'),
        }));
        return buttonElement;
    };
    /**
     * Enables or disables the play state transition animations of the play button image. Can be used to suppress
     * animations.
     * @param {boolean} enabled true to enable the animations (default), false to disable them
     */
    HugePlaybackToggleButton.prototype.setTransitionAnimationsEnabled = function (enabled) {
        var noTransitionAnimationsClass = this.prefixCss('no-transition-animations');
        if (enabled) {
            this.getDomElement().removeClass(noTransitionAnimationsClass);
        }
        else if (!this.getDomElement().hasClass(noTransitionAnimationsClass)) {
            this.getDomElement().addClass(noTransitionAnimationsClass);
        }
    };
    return HugePlaybackToggleButton;
}(playbacktogglebutton_1.PlaybackToggleButton));
exports.HugePlaybackToggleButton = HugePlaybackToggleButton;

},{"../dom":87,"../localization/i18n":94,"./playbacktogglebutton":40}],31:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.HugeReplayButton = void 0;
var button_1 = require("./button");
var dom_1 = require("../dom");
var i18n_1 = require("../localization/i18n");
/**
 * A button to play/replay a video.
 *
 * @category Buttons
 */
var HugeReplayButton = /** @class */ (function (_super) {
    __extends(HugeReplayButton, _super);
    function HugeReplayButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-hugereplaybutton',
            text: i18n_1.i18n.getLocalizer('replay'),
        }, _this.config);
        return _this;
    }
    HugeReplayButton.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        this.onClick.subscribe(function () {
            player.play('ui');
        });
    };
    HugeReplayButton.prototype.toDomElement = function () {
        var buttonElement = _super.prototype.toDomElement.call(this);
        // Add child that contains the play button image
        // Setting the image directly on the button does not work together with scaling animations, because the button
        // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined
        // to the size if the image, it can scale inside the player without overshooting.
        buttonElement.append(new dom_1.DOM('div', {
            'class': this.prefixCss('image'),
        }));
        return buttonElement;
    };
    return HugeReplayButton;
}(button_1.Button));
exports.HugeReplayButton = HugeReplayButton;

},{"../dom":87,"../localization/i18n":94,"./button":17}],32:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemSelectionList = void 0;
var listselector_1 = require("./listselector");
var dom_1 = require("../dom");
var i18n_1 = require("../localization/i18n");
/**
 * @category Components
 */
var ItemSelectionList = exports.ItemSelectionList = /** @class */ (function (_super) {
    __extends(ItemSelectionList, _super);
    function ItemSelectionList(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            tag: 'ul',
            cssClass: 'ui-itemselectionlist',
        }, _this.config);
        return _this;
    }
    ItemSelectionList.prototype.isActive = function () {
        return this.items.length > 1;
    };
    ItemSelectionList.prototype.toDomElement = function () {
        var listElement = new dom_1.DOM('ul', {
            'id': this.config.id,
            'class': this.getCssClasses(),
        }, this);
        this.listElement = listElement;
        this.updateDomItems();
        return listElement;
    };
    ItemSelectionList.prototype.updateDomItems = function (selectedValue) {
        var _this = this;
        if (selectedValue === void 0) { selectedValue = null; }
        // Delete all children
        this.listElement.empty();
        var selectedListItem = null;
        var selectItem = function (listItem) {
            listItem.addClass(_this.prefixCss(ItemSelectionList.CLASS_SELECTED));
        };
        var deselectItem = function (listItem) {
            listItem.removeClass(_this.prefixCss(ItemSelectionList.CLASS_SELECTED));
        };
        var _loop_1 = function (item) {
            var listItem = new dom_1.DOM('li', {
                'type': 'li',
                'class': this_1.prefixCss('ui-selectionlistitem'),
            }).append(new dom_1.DOM('a', {}).html(i18n_1.i18n.performLocalization(item.label)));
            if (!selectedListItem) {
                if (selectedValue == null) { // If there is no pre-selected value, select the first one
                    selectedListItem = listItem;
                }
                else if (String(selectedValue) === item.key) { // convert selectedValue to string to catch 'null'/null case
                    selectedListItem = listItem;
                }
            }
            // Handle list item selections
            listItem.on('click', function () {
                // Deselect the previous item (if there was a selected item)
                if (selectedListItem) {
                    deselectItem(selectedListItem);
                }
                // Select the clicked item
                selectedListItem = listItem;
                selectItem(listItem);
                // Fire the event
                _this.onItemSelectedEvent(item.key, false);
            });
            // Select default item
            if (selectedListItem) {
                selectItem(selectedListItem);
            }
            this_1.listElement.append(listItem);
        };
        var this_1 = this;
        for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
            var item = _a[_i];
            _loop_1(item);
        }
    };
    ItemSelectionList.prototype.onItemAddedEvent = function (value) {
        _super.prototype.onItemAddedEvent.call(this, value);
        this.updateDomItems(this.selectedItem);
    };
    ItemSelectionList.prototype.onItemRemovedEvent = function (value) {
        _super.prototype.onItemRemovedEvent.call(this, value);
        this.updateDomItems(this.selectedItem);
    };
    ItemSelectionList.prototype.onItemSelectedEvent = function (value, updateDomItems) {
        if (updateDomItems === void 0) { updateDomItems = true; }
        _super.prototype.onItemSelectedEvent.call(this, value);
        if (updateDomItems) {
            this.updateDomItems(value);
        }
    };
    ItemSelectionList.CLASS_SELECTED = 'selected';
    return ItemSelectionList;
}(listselector_1.ListSelector));

},{"../dom":87,"../localization/i18n":94,"./listselector":35}],33:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Label = void 0;
var component_1 = require("./component");
var dom_1 = require("../dom");
var eventdispatcher_1 = require("../eventdispatcher");
var i18n_1 = require("../localization/i18n");
/**
 * A simple text label.
 *
 * DOM example:
 * <code>
 *     <span class='ui-label'>...some text...</span>
 * </code>
 *
 * @category Components
 */
var Label = /** @class */ (function (_super) {
    __extends(Label, _super);
    function Label(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.labelEvents = {
            onClick: new eventdispatcher_1.EventDispatcher(),
            onTextChanged: new eventdispatcher_1.EventDispatcher(),
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-label',
        }, _this.config);
        _this.text = _this.config.text;
        return _this;
    }
    Label.prototype.toDomElement = function () {
        var _this = this;
        var tagName = this.config.for != null ? 'label' : 'span';
        var labelElement = new dom_1.DOM(tagName, {
            'id': this.config.id,
            'for': this.config.for,
            'class': this.getCssClasses(),
        }, this).html(i18n_1.i18n.performLocalization(this.text));
        labelElement.on('click', function () {
            _this.onClickEvent();
        });
        return labelElement;
    };
    /**
     * Set the text on this label.
     * @param text
     */
    Label.prototype.setText = function (text) {
        if (text === this.text) {
            return;
        }
        this.text = text;
        var localizedText = i18n_1.i18n.performLocalization(text);
        this.getDomElement().html(localizedText);
        this.onTextChangedEvent(localizedText);
    };
    /**
     * Gets the text on this label.
     * @return {string} The text on the label
     */
    Label.prototype.getText = function () {
        return i18n_1.i18n.performLocalization(this.text);
    };
    /**
     * Clears the text on this label.
     */
    Label.prototype.clearText = function () {
        this.getDomElement().html('');
        this.onTextChangedEvent(null);
    };
    /**
     * Tests if the label is empty and does not contain any text.
     * @return {boolean} True if the label is empty, else false
     */
    Label.prototype.isEmpty = function () {
        return !this.text;
    };
    /**
     * Fires the {@link #onClick} event.
     * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method
     * and calling the super method.
     */
    Label.prototype.onClickEvent = function () {
        this.labelEvents.onClick.dispatch(this);
    };
    /**
     * Fires the {@link #onClick} event.
     * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method
     * and calling the super method.
     */
    Label.prototype.onTextChangedEvent = function (text) {
        this.labelEvents.onTextChanged.dispatch(this, text);
    };
    Object.defineProperty(Label.prototype, "onClick", {
        /**
         * Gets the event that is fired when the label is clicked.
         * @returns {Event<Label<LabelConfig>, NoArgs>}
         */
        get: function () {
            return this.labelEvents.onClick.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "onTextChanged", {
        /**
         * Gets the event that is fired when the text on the label is changed.
         * @returns {Event<Label<LabelConfig>, string>}
         */
        get: function () {
            return this.labelEvents.onTextChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    return Label;
}(component_1.Component));
exports.Label = Label;

},{"../dom":87,"../eventdispatcher":89,"../localization/i18n":94,"./component":23}],34:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListBox = void 0;
var togglebutton_1 = require("./togglebutton");
var listselector_1 = require("./listselector");
var dom_1 = require("../dom");
var arrayutils_1 = require("../arrayutils");
/**
 * A element to select a single item out of a list of available items.
 *
 * DOM example:
 * <code>
 *   <div class='ui-listbox'>
 *     <button class='ui-listbox-button'>label</button>
 *     ...
 *   </div
 * </code>
 *
 * @category Components
 */
// TODO: change ListSelector to extends container in v4 to improve usage of ListBox.
//       Currently we are creating the dom element of the list box with child elements manually here.
//       But this functionality is already covered within the Container component.
var ListBox = /** @class */ (function (_super) {
    __extends(ListBox, _super);
    function ListBox(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.components = [];
        _this.removeListBoxDomItem = function (_, key) {
            var component = _this.getComponentForKey(key);
            if (component) {
                component.getDomElement().remove();
                arrayutils_1.ArrayUtils.remove(_this.components, component);
            }
        };
        _this.addListBoxDomItem = function (_, key) {
            var component = _this.getComponentForKey(key);
            var newItem = _this.getItemForKey(key);
            if (component) {
                // Update existing component
                component.setText(newItem.label);
            }
            else {
                var listBoxItemButton_1 = _this.buildListBoxItemButton(newItem);
                listBoxItemButton_1.onClick.subscribe(function () {
                    _this.handleSelectionChange(listBoxItemButton_1);
                });
                _this.components.push(listBoxItemButton_1);
                _this.listBoxElement.append(listBoxItemButton_1.getDomElement());
            }
        };
        _this.refreshSelectedItem = function () {
            // This gets called twice because the first time is triggered when the user clicks on the ListBoxItemButton. And the
            // second call comes from the player event when the actual item is selected (Subtitle / AudioTrack in this case).
            // As this is a generic component we can't prohibit this behaviour. We need to treat this component as it acts
            // independent from PlayerEvents and on the other hand we need to react to PlayerEvents as it could be triggered
            // from outside.
            for (var _i = 0, _a = _this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                var component = _this.getComponentForKey(item.key);
                if (component) {
                    String(component.key) === String(_this.selectedItem) ? component.on() : component.off();
                }
            }
        };
        _this.handleSelectionChange = function (sender) {
            _this.onItemSelectedEvent(sender.key);
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-listbox',
        }, _this.config);
        return _this;
    }
    ListBox.prototype.configure = function (player, uimanager) {
        // Subscribe before super call to receive initial events
        this.onItemAdded.subscribe(this.addListBoxDomItem);
        this.onItemRemoved.subscribe(this.removeListBoxDomItem);
        this.onItemSelected.subscribe(this.refreshSelectedItem);
        _super.prototype.configure.call(this, player, uimanager);
    };
    ListBox.prototype.toDomElement = function () {
        var listBoxElement = new dom_1.DOM('div', {
            'id': this.config.id,
            'class': this.getCssClasses(),
        }, this);
        this.listBoxElement = listBoxElement;
        this.createListBoxDomItems();
        this.refreshSelectedItem();
        return listBoxElement;
    };
    ListBox.prototype.createListBoxDomItems = function () {
        // Delete all children
        this.listBoxElement.empty();
        this.components = [];
        // Add updated children
        for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
            var item = _a[_i];
            this.addListBoxDomItem(this, item.key);
        }
    };
    ListBox.prototype.buildListBoxItemButton = function (listItem) {
        return new ListBoxItemButton({
            key: listItem.key,
            text: listItem.label,
            ariaLabel: listItem.ariaLabel,
        });
    };
    ListBox.prototype.getComponentForKey = function (key) {
        return this.components.find(function (c) { return key === c.key; });
    };
    return ListBox;
}(listselector_1.ListSelector));
exports.ListBox = ListBox;
var ListBoxItemButton = /** @class */ (function (_super) {
    __extends(ListBoxItemButton, _super);
    function ListBoxItemButton(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-listbox-button',
            onClass: 'selected',
            offClass: '',
        }, _this.config);
        return _this;
    }
    Object.defineProperty(ListBoxItemButton.prototype, "key", {
        get: function () {
            return this.config.key;
        },
        enumerable: false,
        configurable: true
    });
    return ListBoxItemButton;
}(togglebutton_1.ToggleButton));

},{"../arrayutils":6,"../dom":87,"./listselector":35,"./togglebutton":77}],35:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListSelector = void 0;
var component_1 = require("./component");
var eventdispatcher_1 = require("../eventdispatcher");
var arrayutils_1 = require("../arrayutils");
var i18n_1 = require("../localization/i18n");
var ListSelector = /** @class */ (function (_super) {
    __extends(ListSelector, _super);
    function ListSelector(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.listSelectorEvents = {
            onItemAdded: new eventdispatcher_1.EventDispatcher(),
            onItemRemoved: new eventdispatcher_1.EventDispatcher(),
            onItemSelected: new eventdispatcher_1.EventDispatcher(),
        };
        _this.config = _this.mergeConfig(config, {
            items: [],
            cssClass: 'ui-listselector',
        }, _this.config);
        _this.items = _this.config.items;
        return _this;
    }
    ListSelector.prototype.getItemIndex = function (key) {
        for (var index in this.items) {
            if (key === this.items[index].key) {
                return parseInt(index);
            }
        }
        return -1;
    };
    /**
     * Returns all current items of this selector.
     * * @returns {ListItem[]}
     */
    ListSelector.prototype.getItems = function () {
        return this.items;
    };
    /**
     * Checks if the specified item is part of this selector.
     * @param key the key of the item to check
     * @returns {boolean} true if the item is part of this selector, else false
     */
    ListSelector.prototype.hasItem = function (key) {
        return this.getItemIndex(key) > -1;
    };
    /**
     * Adds an item to this selector by doing a sorted insert or by appending the element to the end of the list of items.
     * If an item with the specified key already exists, it is replaced.
     * @param key the key of the item to add
     * @param label the (human-readable) label of the item to add
     * @param sortedInsert whether the item should be added respecting the order of keys
     * @param ariaLabel custom aria label for the listItem
     */
    ListSelector.prototype.addItem = function (key, label, sortedInsert, ariaLabel) {
        if (sortedInsert === void 0) { sortedInsert = false; }
        if (ariaLabel === void 0) { ariaLabel = ''; }
        var listItem = __assign({ key: key, label: i18n_1.i18n.performLocalization(label) }, (ariaLabel && { ariaLabel: ariaLabel }));
        // Apply filter function
        if (this.config.filter && !this.config.filter(listItem)) {
            return;
        }
        // Apply translator function
        if (this.config.translator) {
            listItem.label = this.config.translator(listItem);
        }
        // Try to remove key first to get overwrite behavior and avoid duplicate keys
        this.removeItem(key); // This will trigger an ItemRemoved and an ItemAdded event
        // Add the item to the list
        if (sortedInsert) {
            var index = this.items.findIndex(function (entry) { return entry.key > key; });
            if (index < 0) {
                this.items.push(listItem);
            }
            else {
                this.items.splice(index, 0, listItem);
            }
        }
        else {
            this.items.push(listItem);
        }
        this.onItemAddedEvent(key);
    };
    /**
     * Removes an item from this selector.
     * @param key the key of the item to remove
     * @returns {boolean} true if removal was successful, false if the item is not part of this selector
     */
    ListSelector.prototype.removeItem = function (key) {
        var index = this.getItemIndex(key);
        if (index > -1) {
            arrayutils_1.ArrayUtils.remove(this.items, this.items[index]);
            this.onItemRemovedEvent(key);
            return true;
        }
        return false;
    };
    /**
     * Selects an item from the items in this selector.
     * @param key the key of the item to select
     * @returns {boolean} true is the selection was successful, false if the selected item is not part of the selector
     */
    ListSelector.prototype.selectItem = function (key) {
        if (key === this.selectedItem) {
            // itemConfig is already selected, suppress any further action
            return true;
        }
        var index = this.getItemIndex(key);
        if (index > -1) {
            this.selectedItem = key;
            this.onItemSelectedEvent(key);
            return true;
        }
        return false;
    };
    /**
     * Returns the key of the selected item.
     * @returns {string} the key of the selected item or null if no item is selected
     */
    ListSelector.prototype.getSelectedItem = function () {
        return this.selectedItem;
    };
    /**
     * Returns the items for the given key or undefined if no item with the given key exists.
     * @param key the key of the item to return
     * @returns {ListItem} the item with the requested key. Undefined if no item with the given key exists.
     */
    ListSelector.prototype.getItemForKey = function (key) {
        return this.items.find(function (item) { return item.key === key; });
    };
    /**
     * Synchronize the current items of this selector with the given ones. This will remove and add items selectively.
     * For each removed item the ItemRemovedEvent and for each added item the ItemAddedEvent will be triggered. Favour
     * this method over using clearItems and adding all items again afterwards.
     * @param newItems
     */
    ListSelector.prototype.synchronizeItems = function (newItems) {
        var _this = this;
        newItems
            .filter(function (item) { return !_this.hasItem(item.key); })
            .forEach(function (item) { return _this.addItem(item.key, item.label, item.sortedInsert, item.ariaLabel); });
        this.items
            .filter(function (item) { return newItems.filter(function (i) { return i.key === item.key; }).length === 0; })
            .forEach(function (item) { return _this.removeItem(item.key); });
    };
    /**
     * Removes all items from this selector.
     */
    ListSelector.prototype.clearItems = function () {
        // local copy for iteration after clear
        var items = this.items;
        // clear items
        this.items = [];
        // clear the selection as the selected item is also removed
        this.selectedItem = null;
        // fire events
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            this.onItemRemovedEvent(item.key);
        }
    };
    /**
     * Returns the number of items in this selector.
     * @returns {number}
     */
    ListSelector.prototype.itemCount = function () {
        return Object.keys(this.items).length;
    };
    ListSelector.prototype.onItemAddedEvent = function (key) {
        this.listSelectorEvents.onItemAdded.dispatch(this, key);
    };
    ListSelector.prototype.onItemRemovedEvent = function (key) {
        this.listSelectorEvents.onItemRemoved.dispatch(this, key);
    };
    ListSelector.prototype.onItemSelectedEvent = function (key) {
        this.listSelectorEvents.onItemSelected.dispatch(this, key);
    };
    Object.defineProperty(ListSelector.prototype, "onItemAdded", {
        /**
         * Gets the event that is fired when an item is added to the list of items.
         * @returns {Event<ListSelector<Config>, string>}
         */
        get: function () {
            return this.listSelectorEvents.onItemAdded.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListSelector.prototype, "onItemRemoved", {
        /**
         * Gets the event that is fired when an item is removed from the list of items.
         * @returns {Event<ListSelector<Config>, string>}
         */
        get: function () {
            return this.listSelectorEvents.onItemRemoved.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListSelector.prototype, "onItemSelected", {
        /**
         * Gets the event that is fired when an item is selected from the list of items.
         * @returns {Event<ListSelector<Config>, string>}
         */
        get: function () {
            return this.listSelectorEvents.onItemSelected.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    return ListSelector;
}(component_1.Component));
exports.ListSelector = ListSelector;

},{"../arrayutils":6,"../eventdispatcher":89,"../localization/i18n":94,"./component":23}],36:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataLabel = exports.MetadataLabelContent = void 0;
var label_1 = require("./label");
/**
 * Enumerates the types of content that the {@link MetadataLabel} can display.
 */
var MetadataLabelContent;
(function (MetadataLabelContent) {
    /**
     * Title of the data source.
     */
    MetadataLabelContent[MetadataLabelContent["Title"] = 0] = "Title";
    /**
     * Description fo the data source.
     */
    MetadataLabelContent[MetadataLabelContent["Description"] = 1] = "Description";
})(MetadataLabelContent = exports.MetadataLabelContent || (exports.MetadataLabelContent = {}));
/**
 * A label that can be configured to display certain metadata.
 *
 * @category Labels
 */
var MetadataLabel = /** @class */ (function (_super) {
    __extends(MetadataLabel, _super);
    function MetadataLabel(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['label-metadata', 'label-metadata-' + MetadataLabelContent[config.content].toLowerCase()],
        }, _this.config);
        return _this;
    }
    MetadataLabel.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var uiconfig = uimanager.getConfig();
        var init = function () {
            switch (config.content) {
                case MetadataLabelContent.Title:
                    _this.setText(uiconfig.metadata.title);
                    break;
                case MetadataLabelContent.Description:
                    _this.setText(uiconfig.metadata.description);
                    break;
            }
        };
        var unload = function () {
            _this.setText(null);
        };
        // Init label
        init();
        // Clear labels when source is unloaded
        player.on(player.exports.PlayerEvent.SourceUnloaded, unload);
        uimanager.getConfig().events.onUpdated.subscribe(init);
    };
    return MetadataLabel;
}(label_1.Label));
exports.MetadataLabel = MetadataLabel;

},{"./label":33}],37:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PictureInPictureToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles Apple macOS picture-in-picture mode.
 *
 * @category Buttons
 */
var PictureInPictureToggleButton = /** @class */ (function (_super) {
    __extends(PictureInPictureToggleButton, _super);
    function PictureInPictureToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-piptogglebutton',
            text: i18n_1.i18n.getLocalizer('pictureInPicture'),
        }, _this.config);
        return _this;
    }
    PictureInPictureToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var isPictureInPictureAvailable = function () {
            return player.isViewModeAvailable(player.exports.ViewMode.PictureInPicture);
        };
        var pictureInPictureStateHandler = function () {
            player.getViewMode() === player.exports.ViewMode.PictureInPicture ? _this.on() : _this.off();
        };
        var pictureInPictureAvailabilityChangedHandler = function () {
            isPictureInPictureAvailable() ? _this.show() : _this.hide();
        };
        player.on(player.exports.PlayerEvent.ViewModeChanged, pictureInPictureStateHandler);
        // Available only in our native SDKs for now
        if (player.exports.PlayerEvent.ViewModeAvailabilityChanged) {
            player.on(player.exports.PlayerEvent.ViewModeAvailabilityChanged, pictureInPictureAvailabilityChangedHandler);
        }
        uimanager.getConfig().events.onUpdated.subscribe(pictureInPictureAvailabilityChangedHandler);
        this.onClick.subscribe(function () {
            if (!isPictureInPictureAvailable()) {
                if (console) {
                    console.log('PIP unavailable');
                }
                return;
            }
            var targetViewMode = player.getViewMode() === player.exports.ViewMode.PictureInPicture
                ? player.exports.ViewMode.Inline
                : player.exports.ViewMode.PictureInPicture;
            player.setViewMode(targetViewMode);
        });
        // Startup init
        pictureInPictureAvailabilityChangedHandler(); // Hide button if PIP not available
        pictureInPictureStateHandler();
    };
    return PictureInPictureToggleButton;
}(togglebutton_1.ToggleButton));
exports.PictureInPictureToggleButton = PictureInPictureToggleButton;

},{"../localization/i18n":94,"./togglebutton":77}],38:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackSpeedSelectBox = void 0;
var selectbox_1 = require("./selectbox");
var i18n_1 = require("../localization/i18n");
/**
 * A select box providing a selection of different playback speeds.
 *
 * @category Components
 */
var PlaybackSpeedSelectBox = /** @class */ (function (_super) {
    __extends(PlaybackSpeedSelectBox, _super);
    function PlaybackSpeedSelectBox(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.defaultPlaybackSpeeds = [0.25, 0.5, 1, 1.5, 2];
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-playbackspeedselectbox'],
        }, _this.config);
        return _this;
    }
    PlaybackSpeedSelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addDefaultItems();
        this.onItemSelected.subscribe(function (sender, value) {
            player.setPlaybackSpeed(parseFloat(value));
            _this.selectItem(value);
        });
        var setDefaultValue = function () {
            var playbackSpeed = player.getPlaybackSpeed();
            _this.setSpeed(playbackSpeed);
        };
        player.on(player.exports.PlayerEvent.PlaybackSpeedChanged, setDefaultValue);
        uimanager.getConfig().events.onUpdated.subscribe(setDefaultValue);
    };
    PlaybackSpeedSelectBox.prototype.setSpeed = function (speed) {
        if (!this.selectItem(String(speed))) {
            // a playback speed was set which is not in the list, add it to the list to show it to the user
            this.clearItems();
            this.addDefaultItems([speed]);
            this.selectItem(String(speed));
        }
    };
    PlaybackSpeedSelectBox.prototype.addDefaultItems = function (customItems) {
        var _this = this;
        if (customItems === void 0) { customItems = []; }
        var sortedSpeeds = this.defaultPlaybackSpeeds.concat(customItems).sort();
        sortedSpeeds.forEach(function (element) {
            if (element !== 1) {
                _this.addItem(String(element), "".concat(element, "x"));
            }
            else {
                _this.addItem(String(element), i18n_1.i18n.getLocalizer('normal'));
            }
        });
    };
    PlaybackSpeedSelectBox.prototype.clearItems = function () {
        this.items = [];
        this.selectedItem = null;
    };
    return PlaybackSpeedSelectBox;
}(selectbox_1.SelectBox));
exports.PlaybackSpeedSelectBox = PlaybackSpeedSelectBox;

},{"../localization/i18n":94,"./selectbox":49}],39:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackTimeLabel = exports.PlaybackTimeLabelMode = void 0;
var label_1 = require("./label");
var playerutils_1 = require("../playerutils");
var stringutils_1 = require("../stringutils");
var i18n_1 = require("../localization/i18n");
var PlaybackTimeLabelMode;
(function (PlaybackTimeLabelMode) {
    /**
     * Displays the current time
     */
    PlaybackTimeLabelMode[PlaybackTimeLabelMode["CurrentTime"] = 0] = "CurrentTime";
    /**
     * Displays the duration of the content
     */
    PlaybackTimeLabelMode[PlaybackTimeLabelMode["TotalTime"] = 1] = "TotalTime";
    /**
     * Displays the current time and the duration of the content
     * Format: ${currentTime} / ${totalTime}
     */
    PlaybackTimeLabelMode[PlaybackTimeLabelMode["CurrentAndTotalTime"] = 2] = "CurrentAndTotalTime";
    /**
     * Displays the remaining time of the content
     */
    PlaybackTimeLabelMode[PlaybackTimeLabelMode["RemainingTime"] = 3] = "RemainingTime";
})(PlaybackTimeLabelMode = exports.PlaybackTimeLabelMode || (exports.PlaybackTimeLabelMode = {}));
/**
 * A label that display the current playback time and the total time through {@link PlaybackTimeLabel#setTime setTime}
 * or any string through {@link PlaybackTimeLabel#setText setText}.
 *
 * @category Labels
 */
var PlaybackTimeLabel = /** @class */ (function (_super) {
    __extends(PlaybackTimeLabel, _super);
    function PlaybackTimeLabel(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-playbacktimelabel',
            timeLabelMode: PlaybackTimeLabelMode.CurrentAndTotalTime,
            hideInLivePlayback: false,
        }, _this.config);
        return _this;
    }
    PlaybackTimeLabel.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var live = false;
        var liveCssClass = this.prefixCss('ui-playbacktimelabel-live');
        var liveEdgeCssClass = this.prefixCss('ui-playbacktimelabel-live-edge');
        var minWidth = 0;
        var liveClickHandler = function () {
            player.timeShift(0);
        };
        var updateLiveState = function () {
            // Player is playing a live stream when the duration is infinite
            live = player.isLive();
            // Attach/detach live marker class
            if (live) {
                _this.getDomElement().addClass(liveCssClass);
                _this.setText(i18n_1.i18n.getLocalizer('live'));
                if (config.hideInLivePlayback) {
                    _this.hide();
                }
                _this.onClick.subscribe(liveClickHandler);
                updateLiveTimeshiftState();
            }
            else {
                _this.getDomElement().removeClass(liveCssClass);
                _this.getDomElement().removeClass(liveEdgeCssClass);
                _this.show();
                _this.onClick.unsubscribe(liveClickHandler);
            }
        };
        var updateLiveTimeshiftState = function () {
            if (!live) {
                return;
            }
            // The player is only at the live edge iff the stream is not shifted and it is actually playing or playback has
            // never been started (meaning it isn't paused). A player that is paused is always behind the live edge.
            // An exception is made for live streams without a timeshift window, because here we "stop" playback instead
            // of pausing it (from a UI perspective), so we keep the live edge indicator on because a play would always
            // resume at the live edge.
            var isTimeshifted = player.getTimeShift() < 0;
            var isTimeshiftAvailable = player.getMaxTimeShift() < 0;
            if (!isTimeshifted && (!player.isPaused() || !isTimeshiftAvailable)) {
                _this.getDomElement().addClass(liveEdgeCssClass);
            }
            else {
                _this.getDomElement().removeClass(liveEdgeCssClass);
            }
        };
        var liveStreamDetector = new playerutils_1.PlayerUtils.LiveStreamDetector(player, uimanager);
        liveStreamDetector.onLiveChanged.subscribe(function (sender, args) {
            live = args.live;
            updateLiveState();
        });
        liveStreamDetector.detect(); // Initial detection
        var playbackTimeHandler = function () {
            if (!live && player.getDuration() !== Infinity) {
                _this.setTime(playerutils_1.PlayerUtils.getCurrentTimeRelativeToSeekableRange(player), player.getDuration());
            }
            // To avoid 'jumping' in the UI by varying label sizes due to non-monospaced fonts,
            // we gradually increase the min-width with the content to reach a stable size.
            var width = _this.getDomElement().width();
            if (width > minWidth) {
                minWidth = width;
                _this.getDomElement().css({
                    'min-width': minWidth + 'px',
                });
            }
        };
        var updateTimeFormatBasedOnDuration = function () {
            // Set time format depending on source duration
            _this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?
                stringutils_1.StringUtils.FORMAT_HHMMSS : stringutils_1.StringUtils.FORMAT_MMSS;
            playbackTimeHandler();
        };
        player.on(player.exports.PlayerEvent.TimeChanged, playbackTimeHandler);
        player.on(player.exports.PlayerEvent.Ready, updateTimeFormatBasedOnDuration);
        player.on(player.exports.PlayerEvent.Seeked, playbackTimeHandler);
        player.on(player.exports.PlayerEvent.TimeShift, updateLiveTimeshiftState);
        player.on(player.exports.PlayerEvent.TimeShifted, updateLiveTimeshiftState);
        player.on(player.exports.PlayerEvent.Playing, updateLiveTimeshiftState);
        player.on(player.exports.PlayerEvent.Paused, updateLiveTimeshiftState);
        player.on(player.exports.PlayerEvent.StallStarted, updateLiveTimeshiftState);
        player.on(player.exports.PlayerEvent.StallEnded, updateLiveTimeshiftState);
        var init = function () {
            // Reset min-width when a new source is ready (especially for switching VOD/Live modes where the label content
            // changes)
            minWidth = 0;
            _this.getDomElement().css({
                'min-width': null,
            });
            updateTimeFormatBasedOnDuration();
        };
        uimanager.getConfig().events.onUpdated.subscribe(init);
        init();
    };
    /**
     * Sets the current playback time and total duration.
     * @param playbackSeconds the current playback time in seconds
     * @param durationSeconds the total duration in seconds
     */
    PlaybackTimeLabel.prototype.setTime = function (playbackSeconds, durationSeconds) {
        var currentTime = stringutils_1.StringUtils.secondsToTime(playbackSeconds, this.timeFormat);
        var totalTime = stringutils_1.StringUtils.secondsToTime(durationSeconds, this.timeFormat);
        switch (this.config.timeLabelMode) {
            case PlaybackTimeLabelMode.CurrentTime:
                this.setText("".concat(currentTime));
                break;
            case PlaybackTimeLabelMode.TotalTime:
                this.setText("".concat(totalTime));
                break;
            case PlaybackTimeLabelMode.CurrentAndTotalTime:
                this.setText("".concat(currentTime, " / ").concat(totalTime));
                break;
            case PlaybackTimeLabelMode.RemainingTime:
                var remainingTime = stringutils_1.StringUtils.secondsToTime(durationSeconds - playbackSeconds, this.timeFormat);
                this.setText("".concat(remainingTime));
                break;
        }
    };
    /**
     * Sets the current time format
     * @param timeFormat the time format
     */
    PlaybackTimeLabel.prototype.setTimeFormat = function (timeFormat) {
        this.timeFormat = timeFormat;
    };
    return PlaybackTimeLabel;
}(label_1.Label));
exports.PlaybackTimeLabel = PlaybackTimeLabel;

},{"../localization/i18n":94,"../playerutils":101,"../stringutils":114,"./label":33}],40:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var playerutils_1 = require("../playerutils");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles between playback and pause.
 *
 * @category Buttons
 */
var PlaybackToggleButton = exports.PlaybackToggleButton = /** @class */ (function (_super) {
    __extends(PlaybackToggleButton, _super);
    function PlaybackToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-playbacktogglebutton',
            text: i18n_1.i18n.getLocalizer('play'),
            onAriaLabel: i18n_1.i18n.getLocalizer('pause'),
            offAriaLabel: i18n_1.i18n.getLocalizer('play'),
        }, _this.config);
        _this.isPlayInitiated = false;
        return _this;
    }
    PlaybackToggleButton.prototype.configure = function (player, uimanager, handleClickEvent) {
        var _this = this;
        if (handleClickEvent === void 0) { handleClickEvent = true; }
        _super.prototype.configure.call(this, player, uimanager);
        // Set enterFullscreenOnInitialPlayback if set in the uimanager config
        if (typeof uimanager.getConfig().enterFullscreenOnInitialPlayback === 'boolean') {
            this.config.enterFullscreenOnInitialPlayback = uimanager.getConfig().enterFullscreenOnInitialPlayback;
        }
        var isSeeking = false;
        var firstPlay = true;
        // Handler to update button state based on player state
        var playbackStateHandler = function () {
            // If the UI is currently seeking, playback is temporarily stopped but the buttons should
            // not reflect that and stay as-is (e.g indicate playback while seeking).
            if (isSeeking) {
                return;
            }
            if (player.isPlaying() || _this.isPlayInitiated) {
                _this.on();
            }
            else {
                _this.off();
            }
        };
        // Call handler upon these events
        player.on(player.exports.PlayerEvent.Play, function (e) {
            _this.isPlayInitiated = true;
            firstPlay = false;
            playbackStateHandler();
        });
        player.on(player.exports.PlayerEvent.Paused, function (e) {
            _this.isPlayInitiated = false;
            playbackStateHandler();
        });
        player.on(player.exports.PlayerEvent.Playing, function (e) {
            _this.isPlayInitiated = false;
            playbackStateHandler();
        });
        // after unloading + loading a new source, the player might be in a different playing state (from playing into stopped)
        player.on(player.exports.PlayerEvent.SourceLoaded, playbackStateHandler);
        uimanager.getConfig().events.onUpdated.subscribe(playbackStateHandler);
        player.on(player.exports.PlayerEvent.SourceUnloaded, playbackStateHandler);
        // when playback finishes, player turns to paused mode
        player.on(player.exports.PlayerEvent.PlaybackFinished, playbackStateHandler);
        player.on(player.exports.PlayerEvent.CastStarted, playbackStateHandler);
        // When a playback attempt is rejected with warning 5008, we switch the button state back to off
        // This is required for blocked autoplay, because there is no Paused event in such case
        player.on(player.exports.PlayerEvent.Warning, function (event) {
            if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {
                _this.isPlayInitiated = false;
                firstPlay = true;
                _this.off();
            }
        });
        var updateLiveState = function () {
            var showStopToggle = player.isLive() && !playerutils_1.PlayerUtils.isTimeShiftAvailable(player);
            if (showStopToggle) {
                _this.getDomElement().addClass(_this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));
            }
            else {
                _this.getDomElement().removeClass(_this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));
            }
        };
        // Detect absence of timeshifting on live streams and add tagging class to convert button icons to play/stop
        var timeShiftDetector = new playerutils_1.PlayerUtils.TimeShiftAvailabilityDetector(player);
        var liveStreamDetector = new playerutils_1.PlayerUtils.LiveStreamDetector(player, uimanager);
        timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe(function () { return updateLiveState(); });
        liveStreamDetector.onLiveChanged.subscribe(function () { return updateLiveState(); });
        timeShiftDetector.detect(); // Initial detection
        liveStreamDetector.detect();
        if (handleClickEvent) {
            // Control player by button events
            // When a button event triggers a player API call, events are fired which in turn call the event handler
            // above that updated the button state.
            this.onClick.subscribe(function () {
                if (player.isPlaying() || _this.isPlayInitiated) {
                    player.pause('ui');
                }
                else {
                    player.play('ui');
                    if (firstPlay && _this.config.enterFullscreenOnInitialPlayback) {
                        player.setViewMode(player.exports.ViewMode.Fullscreen);
                    }
                }
            });
        }
        // Track UI seeking status
        uimanager.onSeek.subscribe(function () {
            isSeeking = true;
        });
        uimanager.onSeeked.subscribe(function () {
            isSeeking = false;
        });
        // Startup init
        playbackStateHandler();
    };
    PlaybackToggleButton.CLASS_STOPTOGGLE = 'stoptoggle';
    return PlaybackToggleButton;
}(togglebutton_1.ToggleButton));

},{"../localization/i18n":94,"../playerutils":101,"./togglebutton":77}],41:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackToggleOverlay = void 0;
var container_1 = require("./container");
var hugeplaybacktogglebutton_1 = require("./hugeplaybacktogglebutton");
/**
 * Overlays the player and displays error messages.
 *
 * @category Components
 */
var PlaybackToggleOverlay = /** @class */ (function (_super) {
    __extends(PlaybackToggleOverlay, _super);
    function PlaybackToggleOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.playbackToggleButton = new hugeplaybacktogglebutton_1.HugePlaybackToggleButton({
            enterFullscreenOnInitialPlayback: Boolean(config.enterFullscreenOnInitialPlayback),
        });
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-playbacktoggle-overlay',
            components: [_this.playbackToggleButton],
        }, _this.config);
        return _this;
    }
    return PlaybackToggleOverlay;
}(container_1.Container));
exports.PlaybackToggleOverlay = PlaybackToggleOverlay;

},{"./container":24,"./hugeplaybacktogglebutton":30}],42:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuickSeekButton = void 0;
var button_1 = require("./button");
var i18n_1 = require("../localization/i18n");
var playerutils_1 = require("../playerutils");
/**
 * @category Buttons
 */
var QuickSeekButton = /** @class */ (function (_super) {
    __extends(QuickSeekButton, _super);
    function QuickSeekButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.onSeek = function (event) {
            _this.currentSeekTarget = event.seekTarget;
        };
        _this.onSeekedOrTimeShifted = function () {
            _this.currentSeekTarget = null;
        };
        _this.onTimeShift = function (event) {
            _this.currentSeekTarget = _this.player.getTimeShift() + (event.target - event.position);
        };
        _this.currentSeekTarget = null;
        _this.config = _this.mergeConfig(config, {
            seekSeconds: -10,
            cssClass: 'ui-quickseekbutton',
        }, _this.config);
        var seekDirection = _this.config.seekSeconds < 0 ? 'rewind' : 'forward';
        _this.config.text = _this.config.text || i18n_1.i18n.getLocalizer("quickseek.".concat(seekDirection));
        _this.config.ariaLabel = _this.config.ariaLabel || i18n_1.i18n.getLocalizer("quickseek.".concat(seekDirection));
        _this.getDomElement().data(_this.prefixCss('seek-direction'), seekDirection);
        return _this;
    }
    QuickSeekButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.player = player;
        var isLive;
        var hasTimeShift;
        var switchVisibility = function (isLive, hasTimeShift) {
            if (isLive && !hasTimeShift) {
                _this.hide();
            }
            else {
                _this.show();
            }
        };
        var timeShiftDetector = new playerutils_1.PlayerUtils.TimeShiftAvailabilityDetector(player);
        timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe(function (sender, args) {
            hasTimeShift = args.timeShiftAvailable;
            switchVisibility(isLive, hasTimeShift);
        });
        var liveStreamDetector = new playerutils_1.PlayerUtils.LiveStreamDetector(player, uimanager);
        liveStreamDetector.onLiveChanged.subscribe(function (sender, args) {
            isLive = args.live;
            switchVisibility(isLive, hasTimeShift);
        });
        // Initial detection
        timeShiftDetector.detect();
        liveStreamDetector.detect();
        this.onClick.subscribe(function () {
            if (isLive && !hasTimeShift) {
                // If no DVR window is available, the button should be hidden anyway, so this is to be absolutely sure
                return;
            }
            if (isLive && _this.config.seekSeconds > 0 && player.getTimeShift() === 0) {
                // Don't do anything if the player is already on the live edge
                return;
            }
            var currentPosition = _this.currentSeekTarget !== null
                ? _this.currentSeekTarget
                : isLive
                    ? player.getTimeShift()
                    : player.getCurrentTime();
            var newSeekTime = currentPosition + _this.config.seekSeconds;
            if (isLive) {
                var clampedValue = playerutils_1.PlayerUtils.clampValueToRange(newSeekTime, player.getMaxTimeShift(), 0);
                player.timeShift(clampedValue);
            }
            else {
                var clampedValue = playerutils_1.PlayerUtils.clampValueToRange(newSeekTime, 0, player.getDuration());
                player.seek(clampedValue);
            }
        });
        this.player.on(this.player.exports.PlayerEvent.Seek, this.onSeek);
        this.player.on(this.player.exports.PlayerEvent.Seeked, this.onSeekedOrTimeShifted);
        this.player.on(this.player.exports.PlayerEvent.TimeShift, this.onTimeShift);
        this.player.on(this.player.exports.PlayerEvent.TimeShifted, this.onSeekedOrTimeShifted);
    };
    QuickSeekButton.prototype.release = function () {
        this.player.off(this.player.exports.PlayerEvent.Seek, this.onSeek);
        this.player.off(this.player.exports.PlayerEvent.Seeked, this.onSeekedOrTimeShifted);
        this.player.off(this.player.exports.PlayerEvent.TimeShift, this.onTimeShift);
        this.player.off(this.player.exports.PlayerEvent.TimeShifted, this.onSeekedOrTimeShifted);
        this.currentSeekTarget = null;
        this.player = null;
    };
    return QuickSeekButton;
}(button_1.Button));
exports.QuickSeekButton = QuickSeekButton;

},{"../localization/i18n":94,"../playerutils":101,"./button":17}],43:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecommendationOverlay = void 0;
var container_1 = require("./container");
var component_1 = require("./component");
var dom_1 = require("../dom");
var stringutils_1 = require("../stringutils");
var hugereplaybutton_1 = require("./hugereplaybutton");
/**
 * Overlays the player and displays recommended videos.
 *
 * @category Containers
 */
var RecommendationOverlay = /** @class */ (function (_super) {
    __extends(RecommendationOverlay, _super);
    function RecommendationOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.replayButton = new hugereplaybutton_1.HugeReplayButton();
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-recommendation-overlay',
            hidden: true,
            components: [_this.replayButton],
        }, _this.config);
        return _this;
    }
    RecommendationOverlay.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var clearRecommendations = function () {
            for (var _i = 0, _a = _this.getComponents().slice(); _i < _a.length; _i++) {
                var component = _a[_i];
                if (component instanceof RecommendationItem) {
                    _this.removeComponent(component);
                }
            }
            _this.updateComponents();
            _this.getDomElement().removeClass(_this.prefixCss('recommendations'));
        };
        var setupRecommendations = function () {
            clearRecommendations();
            var recommendations = uimanager.getConfig().recommendations;
            if (recommendations.length > 0) {
                var index = 1;
                for (var _i = 0, recommendations_1 = recommendations; _i < recommendations_1.length; _i++) {
                    var item = recommendations_1[_i];
                    _this.addComponent(new RecommendationItem({
                        itemConfig: item,
                        cssClasses: ['recommendation-item-' + (index++)],
                    }));
                }
                _this.updateComponents(); // create container DOM elements
                _this.getDomElement().addClass(_this.prefixCss('recommendations'));
            }
        };
        uimanager.getConfig().events.onUpdated.subscribe(setupRecommendations);
        // Remove recommendations and hide overlay when source is unloaded
        player.on(player.exports.PlayerEvent.SourceUnloaded, function () {
            clearRecommendations();
            _this.hide();
        });
        // Display recommendations when playback has finished
        player.on(player.exports.PlayerEvent.PlaybackFinished, function () {
            _this.show();
        });
        // Hide recommendations when playback starts, e.g. a restart
        player.on(player.exports.PlayerEvent.Play, function () {
            _this.hide();
        });
        // Init on startup
        setupRecommendations();
    };
    return RecommendationOverlay;
}(container_1.Container));
exports.RecommendationOverlay = RecommendationOverlay;
/**
 * An item of the {@link RecommendationOverlay}. Used only internally in {@link RecommendationOverlay}.
 */
var RecommendationItem = /** @class */ (function (_super) {
    __extends(RecommendationItem, _super);
    function RecommendationItem(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-recommendation-item',
            itemConfig: null, // this must be passed in from outside
        }, _this.config);
        return _this;
    }
    RecommendationItem.prototype.toDomElement = function () {
        var config = this.config.itemConfig;
        var itemElement = new dom_1.DOM('a', {
            'id': this.config.id,
            'class': this.getCssClasses(),
            'href': config.url,
        }, this).css({ 'background-image': "url(".concat(config.thumbnail, ")") });
        var bgElement = new dom_1.DOM('div', {
            'class': this.prefixCss('background'),
        });
        itemElement.append(bgElement);
        var titleElement = new dom_1.DOM('span', {
            'class': this.prefixCss('title'),
        }).append(new dom_1.DOM('span', {
            'class': this.prefixCss('innertitle'),
        }).html(config.title));
        itemElement.append(titleElement);
        var timeElement = new dom_1.DOM('span', {
            'class': this.prefixCss('duration'),
        }).append(new dom_1.DOM('span', {
            'class': this.prefixCss('innerduration'),
        }).html(config.duration ? stringutils_1.StringUtils.secondsToTime(config.duration) : ''));
        itemElement.append(timeElement);
        return itemElement;
    };
    return RecommendationItem;
}(component_1.Component));

},{"../dom":87,"../stringutils":114,"./component":23,"./container":24,"./hugereplaybutton":31}],44:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReplayButton = void 0;
var button_1 = require("./button");
var i18n_1 = require("../localization/i18n");
var playerutils_1 = require("../playerutils");
/**
 * A button to play/replay a video.
 *
 * @category Buttons
 */
var ReplayButton = /** @class */ (function (_super) {
    __extends(ReplayButton, _super);
    function ReplayButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-replaybutton',
            text: i18n_1.i18n.getLocalizer('replay'),
            ariaLabel: i18n_1.i18n.getLocalizer('replay'),
        }, _this.config);
        return _this;
    }
    ReplayButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        if (player.isLive()) {
            this.hide();
        }
        var liveStreamDetector = new playerutils_1.PlayerUtils.LiveStreamDetector(player, uimanager);
        liveStreamDetector.onLiveChanged.subscribe(function (sender, args) {
            if (args.live) {
                _this.hide();
            }
            else {
                _this.show();
            }
        });
        this.onClick.subscribe(function () {
            if (!player.hasEnded()) {
                player.seek(0);
                // Not calling `play` will keep the play/pause state as is
            }
            else {
                // If playback has already ended, calling `play` will automatically restart from the beginning
                player.play('ui');
            }
        });
    };
    return ReplayButton;
}(button_1.Button));
exports.ReplayButton = ReplayButton;

},{"../localization/i18n":94,"../playerutils":101,"./button":17}],45:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeekBar = void 0;
var groupplaybackapi_1 = require("./../groupplaybackapi");
var component_1 = require("./component");
var dom_1 = require("../dom");
var eventdispatcher_1 = require("../eventdispatcher");
var timeout_1 = require("../timeout");
var playerutils_1 = require("../playerutils");
var stringutils_1 = require("../stringutils");
var seekbarcontroller_1 = require("./seekbarcontroller");
var i18n_1 = require("../localization/i18n");
var browserutils_1 = require("../browserutils");
var timelinemarkershandler_1 = require("./timelinemarkershandler");
var seekbarbufferlevel_1 = require("./seekbarbufferlevel");
/**
 * A seek bar to seek within the player's media. It displays the current playback position, amount of buffed data, seek
 * target, and keeps status about an ongoing seek.
 *
 * The seek bar displays different 'bars':
 *  - the playback position, i.e. the position in the media at which the player current playback pointer is positioned
 *  - the buffer position, which usually is the playback position plus the time span that is already buffered ahead
 *  - the seek position, used to preview to where in the timeline a seek will jump to
 *
 *  @category Components
 */
var SeekBar = exports.SeekBar = /** @class */ (function (_super) {
    __extends(SeekBar, _super);
    function SeekBar(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        /**
         * Buffer of the the current playback position. The position must be buffered in case the element
         * needs to be refreshed with {@link #refreshPlaybackPosition}.
         * @type {number}
         */
        _this.playbackPositionPercentage = 0;
        _this.isUserSeeking = false;
        _this.seekBarEvents = {
            /**
             * Fired when a scrubbing seek operation is started.
             */
            onSeek: new eventdispatcher_1.EventDispatcher(),
            /**
             * Fired during a scrubbing seek to indicate that the seek preview (i.e. the video frame) should be updated.
             */
            onSeekPreview: new eventdispatcher_1.EventDispatcher(),
            /**
             * Fired when a scrubbing seek has finished or when a direct seek is issued.
             */
            onSeeked: new eventdispatcher_1.EventDispatcher(),
        };
        _this.seekWhileScrubbing = function (sender, args) {
            if (args.scrubbing) {
                _this.seek(args.position);
            }
        };
        _this.getTargetSeekPosition = function (percentage) {
            var target;
            if (_this.player.isLive()) {
                var maxTimeShift = _this.player.getMaxTimeShift();
                target = maxTimeShift - (maxTimeShift * (percentage / 100));
            }
            else {
                var seekableRangeStart = playerutils_1.PlayerUtils.getSeekableRangeStart(_this.player, 0);
                var relativeSeekTarget = _this.player.getDuration() * (percentage / 100);
                target = relativeSeekTarget + seekableRangeStart;
            }
            return target;
        };
        _this.seek = function (percentage) {
            var targetPlaybackPosition = _this.getTargetSeekPosition(percentage);
            if (_this.player.isLive()) {
                _this.player.timeShift(targetPlaybackPosition, 'ui');
            }
            else {
                _this.player.seek(targetPlaybackPosition, 'ui');
            }
        };
        var keyStepIncrements = _this.config.keyStepIncrements || {
            leftRight: 1,
            upDown: 5,
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-seekbar',
            vertical: false,
            smoothPlaybackPositionUpdateIntervalMs: 50,
            keyStepIncrements: keyStepIncrements,
            ariaLabel: i18n_1.i18n.getLocalizer('seekBar'),
            tabIndex: 0,
            snappingRange: 1,
            enableSeekPreview: true,
            snappingEnabled: true,
        }, _this.config);
        _this.label = _this.config.label;
        return _this;
    }
    SeekBar.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        if (this.hasLabel()) {
            this.getLabel().initialize();
        }
    };
    SeekBar.prototype.setAriaSliderMinMax = function (min, max) {
        this.getDomElement().attr('aria-valuemin', min);
        this.getDomElement().attr('aria-valuemax', max);
    };
    SeekBar.prototype.setAriaSliderValues = function () {
        if (this.seekBarType === seekbarcontroller_1.SeekBarType.Live) {
            var timeshiftValue = Math.ceil(this.player.getTimeShift()).toString();
            this.getDomElement().attr('aria-valuenow', timeshiftValue);
            this.getDomElement().attr('aria-valuetext', "".concat(i18n_1.i18n.performLocalization(i18n_1.i18n.getLocalizer('seekBar.timeshift')), " ").concat(i18n_1.i18n.performLocalization(i18n_1.i18n.getLocalizer('seekBar.value')), ": ").concat(timeshiftValue));
        }
        else if (this.seekBarType === seekbarcontroller_1.SeekBarType.Vod) {
            var ariaValueText = "".concat(stringutils_1.StringUtils.secondsToText(this.player.getCurrentTime()), " ").concat(i18n_1.i18n.performLocalization(i18n_1.i18n.getLocalizer('seekBar.durationText')), " ").concat(stringutils_1.StringUtils.secondsToText(this.player.getDuration()));
            this.getDomElement().attr('aria-valuenow', Math.floor(this.player.getCurrentTime()).toString());
            this.getDomElement().attr('aria-valuetext', ariaValueText);
        }
    };
    SeekBar.prototype.getPlaybackPositionPercentage = function () {
        if (this.player.isLive()) {
            return 100 - (100 / this.player.getMaxTimeShift() * this.player.getTimeShift());
        }
        return 100 / this.player.getDuration() * this.getRelativeCurrentTime();
    };
    SeekBar.prototype.updateBufferLevel = function (playbackPositionPercentage) {
        var bufferLoadedPercentageLevel;
        if (this.player.isLive()) {
            // Always show full buffer for live streams
            bufferLoadedPercentageLevel = 100;
        }
        else {
            bufferLoadedPercentageLevel = playbackPositionPercentage + (0, seekbarbufferlevel_1.getMinBufferLevel)(this.player);
        }
        this.setBufferPosition(bufferLoadedPercentageLevel);
    };
    SeekBar.prototype.configure = function (player, uimanager, configureSeek) {
        var _this = this;
        if (configureSeek === void 0) { configureSeek = true; }
        _super.prototype.configure.call(this, player, uimanager);
        this.player = player;
        // Apply scaling transform to the backdrop bar to have all bars rendered similarly
        // (the call must be up here to be executed for the volume slider as well)
        this.setPosition(this.seekBarBackdrop, 100);
        // Add seekbar controls to the seekbar
        var seekBarController = new seekbarcontroller_1.SeekBarController(this.config.keyStepIncrements, player, uimanager.getConfig().volumeController);
        seekBarController.setSeekBarControls(this.getDomElement(), function () { return _this.seekBarType; });
        // The configureSeek flag can be used by subclasses to disable configuration as seek bar. E.g. the volume
        // slider is reusing this component but adds its own functionality, and does not need the seek functionality.
        // This is actually a hack, the proper solution would be for both seek bar and volume sliders to extend
        // a common base slider component and implement their functionality there.
        if (!configureSeek) {
            this.seekBarType = seekbarcontroller_1.SeekBarType.Volume;
            return;
        }
        uimanager.onControlsShow.subscribe(function () {
            _this.isUiShown = true;
        });
        uimanager.onControlsHide.subscribe(function () {
            _this.isUiShown = false;
        });
        var isPlaying = false;
        var scrubbing = false;
        var isPlayerSeeking = false;
        var suspension;
        // Update playback and buffer positions
        var playbackPositionHandler = function (event, forceUpdate) {
            if (event === void 0) { event = null; }
            if (forceUpdate === void 0) { forceUpdate = false; }
            if (_this.isUserSeeking) {
                // We caught a seek preview seek, do not update the seekbar
                return;
            }
            var playbackPositionPercentage = _this.getPlaybackPositionPercentage();
            _this.updateBufferLevel(playbackPositionPercentage);
            // The segment request finished is used to help the playback position move, when the smooth playback position is not enabled.
            // At the same time when the user is scrubbing, we also move the position of the seekbar to display a preview during scrubbing.
            // When the user is scrubbing we do not record this as a user seek operation, as the user has yet to finish their seek,
            // but we should not move the playback position to not create a jumping behaviour.
            if (scrubbing && event && event.type === player.exports.PlayerEvent.SegmentRequestFinished && playbackPositionPercentage !== _this.playbackPositionPercentage) {
                playbackPositionPercentage = _this.playbackPositionPercentage;
            }
            if (player.isLive()) {
                if (player.getMaxTimeShift() === 0) {
                    // This case must be explicitly handled to avoid division by zero
                    _this.setPlaybackPosition(100);
                }
                else {
                    if (!_this.isSeeking()) {
                        _this.setPlaybackPosition(playbackPositionPercentage);
                    }
                    _this.setAriaSliderMinMax(player.getMaxTimeShift().toString(), '0');
                }
            }
            else {
                // Update playback position only in paused state or in the initial startup state where player is neither
                // paused nor playing. Playback updates are handled in the Timeout below.
                var isInInitialStartupState = _this.config.smoothPlaybackPositionUpdateIntervalMs === SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED
                    || forceUpdate || player.isPaused();
                var isNeitherPausedNorPlaying = player.isPaused() === player.isPlaying();
                if ((isInInitialStartupState || isNeitherPausedNorPlaying) && !_this.isSeeking()) {
                    _this.setPlaybackPosition(playbackPositionPercentage);
                }
                _this.setAriaSliderMinMax('0', player.getDuration().toString());
            }
            if (_this.isUiShown) {
                _this.setAriaSliderValues();
            }
        };
        // Update seekbar upon these events
        // init playback position when the player is ready
        player.on(player.exports.PlayerEvent.Ready, playbackPositionHandler);
        // update playback position when it changes
        player.on(player.exports.PlayerEvent.TimeChanged, playbackPositionHandler);
        // update bufferlevel when buffering is complete
        player.on(player.exports.PlayerEvent.StallEnded, playbackPositionHandler);
        // update playback position when a timeshift has finished
        player.on(player.exports.PlayerEvent.TimeShifted, playbackPositionHandler);
        // update bufferlevel when a segment has been downloaded
        player.on(player.exports.PlayerEvent.SegmentRequestFinished, playbackPositionHandler);
        this.configureLivePausedTimeshiftUpdater(player, uimanager, playbackPositionHandler);
        // Seek handling
        var onPlayerSeek = function () {
            isPlayerSeeking = true;
            _this.setSeeking(true);
            scrubbing = false;
        };
        var onPlayerSeeked = function (event, forceUpdate) {
            if (event === void 0) { event = null; }
            if (forceUpdate === void 0) { forceUpdate = false; }
            isPlayerSeeking = false;
            _this.setSeeking(false);
            // update playback position when a seek has finished
            playbackPositionHandler(event, forceUpdate);
        };
        var restorePlayingState = function () {
            // Continue playback after seek if player was playing when seek started
            if (isPlaying) {
                // use the same issuer here as in the pause on seek
                player.play('ui-seek');
            }
        };
        player.on(player.exports.PlayerEvent.Seek, onPlayerSeek);
        player.on(player.exports.PlayerEvent.Seeked, onPlayerSeeked);
        player.on(player.exports.PlayerEvent.TimeShift, onPlayerSeek);
        player.on(player.exports.PlayerEvent.TimeShifted, onPlayerSeeked);
        var isGroupPlaybackAPIAvailable = function (player) {
            return !!player.groupPlayback;
        };
        this.onSeek.subscribe(function (sender) {
            // track seeking status so we can catch events from seek preview seeks
            _this.isUserSeeking = true;
            // Notify UI manager of started seek
            uimanager.onSeek.dispatch(sender);
            if (isGroupPlaybackAPIAvailable(player) && player.groupPlayback.hasJoined() && !suspension) {
                suspension = player.groupPlayback.beginSuspension(groupplaybackapi_1.GroupPlaybackSuspensionReason.UserIsScrubbing);
            }
            // Save current playback state before performing the seek
            if (!isPlayerSeeking) {
                isPlaying = player.isPlaying();
                // Pause playback while seeking
                if (isPlaying) {
                    // use a different issuer here, as play/pause on seek is not "really" triggerd by the user
                    player.pause('ui-seek');
                }
            }
        });
        this.onSeekPreview.subscribe(function (sender, args) {
            // Notify UI manager of seek preview
            uimanager.onSeekPreview.dispatch(sender, args);
            scrubbing = args.scrubbing;
        });
        // Set enableSeekPreview if set in the uimanager config
        if (typeof uimanager.getConfig().enableSeekPreview === 'boolean') {
            this.config.enableSeekPreview = uimanager.getConfig().enableSeekPreview;
        }
        // Rate-limited scrubbing seek
        if (this.config.enableSeekPreview) {
            this.onSeekPreview.subscribeRateLimited(this.seekWhileScrubbing, 200);
        }
        this.onSeeked.subscribe(function (sender, percentage) {
            _this.isUserSeeking = false;
            // Do the seek
            _this.seek(percentage);
            // Notify UI manager of finished seek
            uimanager.onSeeked.dispatch(sender);
            // Continue playback after seek if player was playing when seek started
            restorePlayingState();
            if (isGroupPlaybackAPIAvailable(player) && player.groupPlayback.hasJoined() && suspension) {
                var proposedPlaybackTime = _this.getTargetSeekPosition(percentage);
                player.groupPlayback.endSuspension(suspension, { proposedPlaybackTime: proposedPlaybackTime });
                suspension = undefined;
            }
        });
        if (this.hasLabel()) {
            // Configure a seekbar label that is internal to the seekbar)
            this.getLabel().configure(player, uimanager);
        }
        // Hide seekbar for live sources without timeshift
        var isLive = false;
        var hasTimeShift = false;
        var switchVisibility = function (isLive, hasTimeShift) {
            if (isLive && !hasTimeShift) {
                _this.hide();
            }
            else {
                _this.show();
            }
            playbackPositionHandler(null, true);
            _this.refreshPlaybackPosition();
        };
        var liveStreamDetector = new playerutils_1.PlayerUtils.LiveStreamDetector(player, uimanager);
        liveStreamDetector.onLiveChanged.subscribe(function (sender, args) {
            isLive = args.live;
            if (isLive && _this.smoothPlaybackPositionUpdater != null) {
                _this.smoothPlaybackPositionUpdater.clear();
                _this.seekBarType = seekbarcontroller_1.SeekBarType.Live;
            }
            else {
                _this.seekBarType = seekbarcontroller_1.SeekBarType.Vod;
            }
            switchVisibility(isLive, hasTimeShift);
        });
        var timeShiftDetector = new playerutils_1.PlayerUtils.TimeShiftAvailabilityDetector(player);
        timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe(function (sender, args) {
            hasTimeShift = args.timeShiftAvailable;
            switchVisibility(isLive, hasTimeShift);
        });
        // Initial detection
        liveStreamDetector.detect();
        timeShiftDetector.detect();
        // Refresh the playback position when the player resized or the UI is configured. The playback position marker
        // is positioned absolutely and must therefore be updated when the size of the seekbar changes.
        player.on(player.exports.PlayerEvent.PlayerResized, function () {
            _this.refreshPlaybackPosition();
        });
        // Additionally, when this code is called, the seekbar is not part of the UI yet and therefore does not have a size,
        // resulting in a wrong initial position of the marker. Refreshing it once the UI is configured solved this issue.
        uimanager.onConfigured.subscribe(function () {
            _this.refreshPlaybackPosition();
        });
        // It can also happen when a new source is loaded
        player.on(player.exports.PlayerEvent.SourceLoaded, function () {
            _this.refreshPlaybackPosition();
        });
        // Add markers when a source is loaded or update when a marker is added or removed
        uimanager.getConfig().events.onUpdated.subscribe(function () {
            playbackPositionHandler();
        });
        // Set the snappingRange if set in the uimanager config
        if (typeof uimanager.getConfig().seekbarSnappingRange === 'number') {
            this.config.snappingRange = uimanager.getConfig().seekbarSnappingRange;
        }
        if (typeof uimanager.getConfig().seekbarSnappingEnabled === 'boolean') {
            this.config.snappingEnabled = uimanager.getConfig().seekbarSnappingEnabled;
        }
        // Initialize seekbar
        playbackPositionHandler(); // Set the playback position
        this.setBufferPosition(0);
        this.setSeekPosition(0);
        if (this.config.smoothPlaybackPositionUpdateIntervalMs !== SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED) {
            this.configureSmoothPlaybackPositionUpdater(player, uimanager);
        }
        // Initialize markers
        this.initializeTimelineMarkers(player, uimanager);
    };
    SeekBar.prototype.initializeTimelineMarkers = function (player, uimanager) {
        var _this = this;
        var timelineMarkerConfig = {
            cssPrefix: this.config.cssPrefix,
            snappingRange: this.config.snappingRange,
        };
        this.timelineMarkersHandler = new timelinemarkershandler_1.TimelineMarkersHandler(timelineMarkerConfig, function () { return _this.seekBar.width(); }, this.seekBarMarkersContainer);
        this.timelineMarkersHandler.initialize(player, uimanager);
    };
    /**
     * Update seekbar while a live stream with DVR window is paused.
     * The playback position stays still and the position indicator visually moves towards the back.
     */
    SeekBar.prototype.configureLivePausedTimeshiftUpdater = function (player, uimanager, playbackPositionHandler) {
        var _this = this;
        // Regularly update the playback position while the timeout is active
        this.pausedTimeshiftUpdater = new timeout_1.Timeout(1000, playbackPositionHandler, true);
        // Start updater when a live stream with timeshift window is paused
        player.on(player.exports.PlayerEvent.Paused, function () {
            if (player.isLive() && player.getMaxTimeShift() < 0) {
                _this.pausedTimeshiftUpdater.start();
            }
        });
        // Stop updater when playback continues (no matter if the updater was started before)
        player.on(player.exports.PlayerEvent.Play, function () { return _this.pausedTimeshiftUpdater.clear(); });
    };
    SeekBar.prototype.configureSmoothPlaybackPositionUpdater = function (player, uimanager) {
        var _this = this;
        /*
         * Playback position update
         *
         * We do not update the position directly from the TimeChanged event, because it arrives very jittery and
         * results in a jittery position indicator since the CSS transition time is statically set.
         * To work around this issue, we maintain a local playback position that is updated in a stable regular interval
         * and kept in sync with the player.
         */
        var currentTimeSeekBar = 0;
        var currentTimePlayer = 0;
        var updateIntervalMs = 50;
        var currentTimeUpdateDeltaSecs = updateIntervalMs / 1000;
        this.smoothPlaybackPositionUpdater = new timeout_1.Timeout(updateIntervalMs, function () {
            if (_this.isSeeking()) {
                return;
            }
            currentTimeSeekBar += currentTimeUpdateDeltaSecs;
            try {
                currentTimePlayer = _this.getRelativeCurrentTime();
            }
            catch (error) {
                // Detect if the player has been destroyed and stop updating if so
                if (error instanceof player.exports.PlayerAPINotAvailableError) {
                    _this.smoothPlaybackPositionUpdater.clear();
                }
                // If the current time cannot be read it makes no sense to continue
                return;
            }
            // Sync currentTime of seekbar to player
            var currentTimeDelta = currentTimeSeekBar - currentTimePlayer;
            // If the delta is larger that 2 secs, directly jump the seekbar to the
            // player time instead of smoothly fast forwarding/rewinding.
            if (Math.abs(currentTimeDelta) > 2) {
                currentTimeSeekBar = currentTimePlayer;
            }
            // If currentTimeDelta is negative and below the adjustment threshold,
            // the player is ahead of the seekbar and we 'fast forward' the seekbar
            else if (currentTimeDelta <= -currentTimeUpdateDeltaSecs) {
                currentTimeSeekBar += currentTimeUpdateDeltaSecs;
            }
            // If currentTimeDelta is positive and above the adjustment threshold,
            // the player is behind the seekbar and we 'rewind' the seekbar
            else if (currentTimeDelta >= currentTimeUpdateDeltaSecs) {
                currentTimeSeekBar -= currentTimeUpdateDeltaSecs;
            }
            var playbackPositionPercentage = 100 / player.getDuration() * currentTimeSeekBar;
            _this.setPlaybackPosition(playbackPositionPercentage);
        }, true);
        var startSmoothPlaybackPositionUpdater = function () {
            if (!player.isLive()) {
                currentTimeSeekBar = _this.getRelativeCurrentTime();
                _this.smoothPlaybackPositionUpdater.start();
            }
        };
        var stopSmoothPlaybackPositionUpdater = function () {
            _this.smoothPlaybackPositionUpdater.clear();
        };
        player.on(player.exports.PlayerEvent.Play, startSmoothPlaybackPositionUpdater);
        player.on(player.exports.PlayerEvent.Playing, startSmoothPlaybackPositionUpdater);
        player.on(player.exports.PlayerEvent.Paused, stopSmoothPlaybackPositionUpdater);
        player.on(player.exports.PlayerEvent.PlaybackFinished, stopSmoothPlaybackPositionUpdater);
        player.on(player.exports.PlayerEvent.Seeked, function () {
            currentTimeSeekBar = _this.getRelativeCurrentTime();
        });
        player.on(player.exports.PlayerEvent.SourceUnloaded, stopSmoothPlaybackPositionUpdater);
        if (player.isPlaying()) {
            startSmoothPlaybackPositionUpdater();
        }
    };
    SeekBar.prototype.getRelativeCurrentTime = function () {
        return playerutils_1.PlayerUtils.getCurrentTimeRelativeToSeekableRange(this.player);
    };
    SeekBar.prototype.release = function () {
        _super.prototype.release.call(this);
        if (this.smoothPlaybackPositionUpdater) { // object must not necessarily exist, e.g. in volume slider subclass
            this.smoothPlaybackPositionUpdater.clear();
        }
        if (this.pausedTimeshiftUpdater) {
            this.pausedTimeshiftUpdater.clear();
        }
        if (this.config.enableSeekPreview) {
            this.onSeekPreview.unsubscribe(this.seekWhileScrubbing);
        }
    };
    SeekBar.prototype.toDomElement = function () {
        var _this = this;
        if (this.config.vertical) {
            this.config.cssClasses.push('vertical');
        }
        var seekBarContainer = new dom_1.DOM('div', {
            'id': this.config.id,
            'class': this.getCssClasses(),
            'role': 'slider',
            'aria-label': i18n_1.i18n.performLocalization(this.config.ariaLabel),
            'tabindex': this.config.tabIndex.toString(),
        }, this);
        var seekBar = new dom_1.DOM('div', {
            'class': this.prefixCss('seekbar'),
        });
        this.seekBar = seekBar;
        // Indicator that shows the buffer fill level
        var seekBarBufferLevel = new dom_1.DOM('div', {
            'class': this.prefixCss('seekbar-bufferlevel'),
        });
        this.seekBarBufferPosition = seekBarBufferLevel;
        // Indicator that shows the current playback position
        var seekBarPlaybackPosition = new dom_1.DOM('div', {
            'class': this.prefixCss('seekbar-playbackposition'),
        });
        this.seekBarPlaybackPosition = seekBarPlaybackPosition;
        // A marker of the current playback position, e.g. a dot or line
        var seekBarPlaybackPositionMarker = new dom_1.DOM('div', {
            'class': this.prefixCss('seekbar-playbackposition-marker'),
        });
        this.seekBarPlaybackPositionMarker = seekBarPlaybackPositionMarker;
        // Indicator that show where a seek will go to
        var seekBarSeekPosition = new dom_1.DOM('div', {
            'class': this.prefixCss('seekbar-seekposition'),
        });
        this.seekBarSeekPosition = seekBarSeekPosition;
        // Indicator that shows the full seekbar
        var seekBarBackdrop = new dom_1.DOM('div', {
            'class': this.prefixCss('seekbar-backdrop'),
        });
        this.seekBarBackdrop = seekBarBackdrop;
        var seekBarChapterMarkersContainer = new dom_1.DOM('div', {
            'class': this.prefixCss('seekbar-markers'),
        });
        this.seekBarMarkersContainer = seekBarChapterMarkersContainer;
        seekBar.append(this.seekBarBackdrop, this.seekBarBufferPosition, this.seekBarSeekPosition, this.seekBarPlaybackPosition, this.seekBarMarkersContainer, this.seekBarPlaybackPositionMarker);
        var seeking = false;
        // Define handler functions so we can attach/remove them later
        var mouseTouchMoveHandler = function (e) {
            e.preventDefault();
            // Avoid propagation to VR handler
            if (_this.player.vr != null) {
                e.stopPropagation();
            }
            var targetPercentage = 100 * _this.getOffset(e);
            _this.setSeekPosition(targetPercentage);
            _this.setPlaybackPosition(targetPercentage);
            _this.onSeekPreviewEvent(targetPercentage, true);
        };
        var mouseTouchUpHandler = function (e) {
            var _a;
            e.preventDefault();
            // Remove handlers, seek operation is finished
            new dom_1.DOM(document).off('touchmove mousemove', mouseTouchMoveHandler);
            new dom_1.DOM(document).off('touchend mouseup', mouseTouchUpHandler);
            var targetPercentage = 100 * _this.getOffset(e);
            if (_this.config.snappingEnabled) {
                var matchingMarker = (_a = _this.timelineMarkersHandler) === null || _a === void 0 ? void 0 : _a.getMarkerAtPosition(targetPercentage);
                targetPercentage = matchingMarker ? matchingMarker.position : targetPercentage;
            }
            _this.setSeeking(false);
            seeking = false;
            // Fire seeked event
            _this.onSeekedEvent(targetPercentage);
        };
        // A seek always start with a touchstart or mousedown directly on the seekbar.
        // To track a mouse seek also outside the seekbar (for touch events this works automatically),
        // so the user does not need to take care that the mouse always stays on the seekbar, we attach the mousemove
        // and mouseup handlers to the whole document. A seek is triggered when the user lifts the mouse key.
        // A seek mouse gesture is thus basically a click with a long time frame between down and up events.
        seekBar.on('touchstart mousedown', function (e) {
            var isTouchEvent = browserutils_1.BrowserUtils.isTouchSupported && _this.isTouchEvent(e);
            // Prevent selection of DOM elements (also prevents mousedown if current event is touchstart)
            e.preventDefault();
            // Avoid propagation to VR handler
            if (_this.player.vr != null) {
                e.stopPropagation();
            }
            _this.setSeeking(true); // Set seeking class on DOM element
            seeking = true; // Set seek tracking flag
            // Fire seeked event
            _this.onSeekEvent();
            // Add handler to track the seek operation over the whole document
            new dom_1.DOM(document).on(isTouchEvent ? 'touchmove' : 'mousemove', mouseTouchMoveHandler);
            new dom_1.DOM(document).on(isTouchEvent ? 'touchend' : 'mouseup', mouseTouchUpHandler);
        });
        // Display seek target indicator when mouse hovers or finger slides over seekbar
        seekBar.on('touchmove mousemove', function (e) {
            e.preventDefault();
            if (seeking) {
                mouseTouchMoveHandler(e);
            }
            var position = 100 * _this.getOffset(e);
            _this.setSeekPosition(position);
            _this.onSeekPreviewEvent(position, false);
            if (_this.hasLabel() && _this.getLabel().isHidden()) {
                _this.getLabel().show();
            }
        });
        // Hide seek target indicator when mouse or finger leaves seekbar
        seekBar.on('touchend mouseleave', function (e) {
            e.preventDefault();
            _this.setSeekPosition(0);
            if (_this.hasLabel()) {
                _this.getLabel().hide();
            }
        });
        seekBarContainer.append(seekBar);
        if (this.label) {
            seekBarContainer.append(this.label.getDomElement());
        }
        return seekBarContainer;
    };
    /**
     * Gets the horizontal offset of a mouse/touch event point from the left edge of the seek bar.
     * @param eventPageX the pageX coordinate of an event to calculate the offset from
     * @returns {number} a number in the range of [0, 1], where 0 is the left edge and 1 is the right edge
     */
    SeekBar.prototype.getHorizontalOffset = function (eventPageX) {
        var elementOffsetPx = this.seekBar.offset().left;
        var widthPx = this.seekBar.width();
        var offsetPx = eventPageX - elementOffsetPx;
        var offset = 1 / widthPx * offsetPx;
        return this.sanitizeOffset(offset);
    };
    /**
     * Gets the vertical offset of a mouse/touch event point from the bottom edge of the seek bar.
     * @param eventPageY the pageX coordinate of an event to calculate the offset from
     * @returns {number} a number in the range of [0, 1], where 0 is the bottom edge and 1 is the top edge
     */
    SeekBar.prototype.getVerticalOffset = function (eventPageY) {
        var elementOffsetPx = this.seekBar.offset().top;
        var widthPx = this.seekBar.height();
        var offsetPx = eventPageY - elementOffsetPx;
        var offset = 1 / widthPx * offsetPx;
        return 1 - this.sanitizeOffset(offset);
    };
    /**
     * Gets the mouse or touch event offset for the current configuration (horizontal or vertical).
     * @param e the event to calculate the offset from
     * @returns {number} a number in the range of [0, 1]
     * @see #getHorizontalOffset
     * @see #getVerticalOffset
     */
    SeekBar.prototype.getOffset = function (e) {
        if (browserutils_1.BrowserUtils.isTouchSupported && this.isTouchEvent(e)) {
            if (this.config.vertical) {
                return this.getVerticalOffset(e.type === 'touchend' ? e.changedTouches[0].pageY : e.touches[0].pageY);
            }
            else {
                return this.getHorizontalOffset(e.type === 'touchend' ? e.changedTouches[0].pageX : e.touches[0].pageX);
            }
        }
        else if (e instanceof MouseEvent) {
            if (this.config.vertical) {
                return this.getVerticalOffset(e.pageY);
            }
            else {
                return this.getHorizontalOffset(e.pageX);
            }
        }
        else {
            if (console) {
                console.warn('invalid event');
            }
            return 0;
        }
    };
    /**
     * Sanitizes the mouse offset to the range of [0, 1].
     *
     * When tracking the mouse outside the seek bar, the offset can be outside the desired range and this method
     * limits it to the desired range. E.g. a mouse event left of the left edge of a seek bar yields an offset below
     * zero, but to display the seek target on the seek bar, we need to limit it to zero.
     *
     * @param offset the offset to sanitize
     * @returns {number} the sanitized offset.
     */
    SeekBar.prototype.sanitizeOffset = function (offset) {
        // Since we track mouse moves over the whole document, the target can be outside the seek range,
        // and we need to limit it to the [0, 1] range.
        if (offset < 0) {
            offset = 0;
        }
        else if (offset > 1) {
            offset = 1;
        }
        return offset;
    };
    /**
     * Sets the position of the playback position indicator.
     * @param percent a number between 0 and 100 as returned by the player
     */
    SeekBar.prototype.setPlaybackPosition = function (percent) {
        this.playbackPositionPercentage = percent;
        // Set position of the bar
        this.setPosition(this.seekBarPlaybackPosition, percent);
        // Set position of the marker
        var totalSize = (this.config.vertical ? (this.seekBar.height() - this.seekBarPlaybackPositionMarker.height()) : this.seekBar.width());
        var px = (totalSize) / 100 * percent;
        if (this.config.vertical) {
            px = this.seekBar.height() - px - this.seekBarPlaybackPositionMarker.height();
        }
        var style = this.config.vertical ?
            // -ms-transform required for IE9
            // -webkit-transform required for Android 4.4 WebView
            {
                'transform': 'translateY(' + px + 'px)',
                '-ms-transform': 'translateY(' + px + 'px)',
                '-webkit-transform': 'translateY(' + px + 'px)',
            } :
            {
                'transform': 'translateX(' + px + 'px)',
                '-ms-transform': 'translateX(' + px + 'px)',
                '-webkit-transform': 'translateX(' + px + 'px)',
            };
        this.seekBarPlaybackPositionMarker.css(style);
    };
    /**
     * Refreshes the playback position. Can be used by subclasses to refresh the position when
     * the size of the component changes.
     */
    SeekBar.prototype.refreshPlaybackPosition = function () {
        this.setPlaybackPosition(this.playbackPositionPercentage);
    };
    /**
     * Sets the position until which media is buffered.
     * @param percent a number between 0 and 100
     */
    SeekBar.prototype.setBufferPosition = function (percent) {
        this.setPosition(this.seekBarBufferPosition, percent);
    };
    /**
     * Sets the position where a seek, if executed, would jump to.
     * @param percent a number between 0 and 100
     */
    SeekBar.prototype.setSeekPosition = function (percent) {
        this.setPosition(this.seekBarSeekPosition, percent);
    };
    /**
     * Set the actual position (width or height) of a DOM element that represent a bar in the seek bar.
     * @param element the element to set the position for
     * @param percent a number between 0 and 100
     */
    SeekBar.prototype.setPosition = function (element, percent) {
        var scale = percent / 100;
        // When the scale is exactly 1 or very near 1 (and the browser internally rounds it to 1), browsers seem to render
        // the elements differently and the height gets slightly off, leading to mismatching heights when e.g. the buffer
        // level bar has a width of 1 and the playback position bar has a width < 1. A jittering buffer level around 1
        // leads to an even worse flickering effect.
        // Various changes in CSS styling and DOM hierarchy did not solve the issue so the workaround is to avoid a scale
        // of exactly 1.
        if (scale >= 0.99999 && scale <= 1.00001) {
            scale = 0.99999;
        }
        var style = this.config.vertical ?
            // -ms-transform required for IE9
            // -webkit-transform required for Android 4.4 WebView
            {
                'transform': 'scaleY(' + scale + ')',
                '-ms-transform': 'scaleY(' + scale + ')',
                '-webkit-transform': 'scaleY(' + scale + ')',
            } :
            {
                'transform': 'scaleX(' + scale + ')',
                '-ms-transform': 'scaleX(' + scale + ')',
                '-webkit-transform': 'scaleX(' + scale + ')',
            };
        element.css(style);
    };
    /**
     * Puts the seek bar into or out of seeking state by adding/removing a class to the DOM element. This can be used
     * to adjust the styling while seeking.
     *
     * @param seeking should be true when entering seek state, false when exiting the seek state
     */
    SeekBar.prototype.setSeeking = function (seeking) {
        if (seeking) {
            this.getDomElement().addClass(this.prefixCss(SeekBar.CLASS_SEEKING));
        }
        else {
            this.getDomElement().removeClass(this.prefixCss(SeekBar.CLASS_SEEKING));
        }
    };
    /**
     * Checks if the seek bar is currently in the seek state.
     * @returns {boolean} true if in seek state, else false
     */
    SeekBar.prototype.isSeeking = function () {
        return this.getDomElement().hasClass(this.prefixCss(SeekBar.CLASS_SEEKING));
    };
    /**
     * Checks if the seek bar has a {@link SeekBarLabel}.
     * @returns {boolean} true if the seek bar has a label, else false
     */
    SeekBar.prototype.hasLabel = function () {
        return this.label != null;
    };
    /**
     * Gets the label of this seek bar.
     * @returns {SeekBarLabel} the label if this seek bar has a label, else null
     */
    SeekBar.prototype.getLabel = function () {
        return this.label;
    };
    SeekBar.prototype.onSeekEvent = function () {
        this.seekBarEvents.onSeek.dispatch(this);
    };
    SeekBar.prototype.onSeekPreviewEvent = function (percentage, scrubbing) {
        var snappedMarker = this.timelineMarkersHandler && this.timelineMarkersHandler.getMarkerAtPosition(percentage);
        var seekPositionPercentage = percentage;
        if (snappedMarker) {
            if (snappedMarker.duration > 0) {
                if (percentage < snappedMarker.position) {
                    // Snap the position to the start of the interval if the seek is within the left snap margin
                    // We know that we are within a snap margin when we are outside the marker interval but still
                    // have a snappedMarker
                    seekPositionPercentage = snappedMarker.position;
                }
                else if (percentage > snappedMarker.position + snappedMarker.duration) {
                    // Snap the position to the end of the interval if the seek is within the right snap margin
                    seekPositionPercentage = snappedMarker.position + snappedMarker.duration;
                }
            }
            else {
                // Position markers always snap to their marker position
                seekPositionPercentage = snappedMarker.position;
            }
        }
        if (this.label) {
            this.label.getDomElement().css({
                'left': seekPositionPercentage + '%',
            });
        }
        this.seekBarEvents.onSeekPreview.dispatch(this, {
            scrubbing: scrubbing,
            position: seekPositionPercentage,
            marker: snappedMarker,
        });
    };
    SeekBar.prototype.onSeekedEvent = function (percentage) {
        this.seekBarEvents.onSeeked.dispatch(this, percentage);
    };
    Object.defineProperty(SeekBar.prototype, "onSeek", {
        /**
         * Gets the event that is fired when a scrubbing seek operation is started.
         * @returns {Event<SeekBar, NoArgs>}
         */
        get: function () {
            return this.seekBarEvents.onSeek.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SeekBar.prototype, "onSeekPreview", {
        /**
         * Gets the event that is fired during a scrubbing seek (to indicate that the seek preview, i.e. the video frame,
         * should be updated), or during a normal seek preview when the seek bar is hovered (and the seek target,
         * i.e. the seek bar label, should be updated).
         * @returns {Event<SeekBar, SeekPreviewEventArgs>}
         */
        get: function () {
            return this.seekBarEvents.onSeekPreview.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SeekBar.prototype, "onSeeked", {
        /**
         * Gets the event that is fired when a scrubbing seek has finished or when a direct seek is issued.
         * @returns {Event<SeekBar, number>}
         */
        get: function () {
            return this.seekBarEvents.onSeeked.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    SeekBar.prototype.onShowEvent = function () {
        _super.prototype.onShowEvent.call(this);
        // Refresh the position of the playback position when the seek bar becomes visible. To correctly set the position,
        // the DOM element must be fully initialized an have its size calculated, because the position is set as an absolute
        // value calculated from the size. This required size is not known when it is hidden.
        // For such cases, we refresh the position here in onShow because here it is guaranteed that the component knows
        // its size and can set the position correctly.
        this.refreshPlaybackPosition();
    };
    /**
      * Checks if TouchEvent is supported.
      * @returns {boolean} true if TouchEvent not undefined, else false
      */
    SeekBar.prototype.isTouchEvent = function (e) {
        return window.TouchEvent && e instanceof TouchEvent;
    };
    SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED = -1;
    /**
     * The CSS class that is added to the DOM element while the seek bar is in 'seeking' state.
     */
    SeekBar.CLASS_SEEKING = 'seeking';
    return SeekBar;
}(component_1.Component));

},{"../browserutils":8,"../dom":87,"../eventdispatcher":89,"../localization/i18n":94,"../playerutils":101,"../stringutils":114,"../timeout":116,"./../groupplaybackapi":91,"./component":23,"./seekbarbufferlevel":46,"./seekbarcontroller":47,"./timelinemarkershandler":75}],46:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMinBufferLevel = void 0;
function getMinBufferLevel(player) {
    var playerDuration = player.getDuration();
    var videoBufferLength = player.getVideoBufferLength();
    var audioBufferLength = player.getAudioBufferLength();
    // Calculate the buffer length which is the smaller length of the audio and video buffers. If one of these
    // buffers is not available, we set it's value to MAX_VALUE to make sure that the other real value is taken
    // as the buffer length.
    var bufferLength = Math.min(videoBufferLength != null ? videoBufferLength : Number.MAX_VALUE, audioBufferLength != null ? audioBufferLength : Number.MAX_VALUE);
    // If both buffer lengths are missing, we set the buffer length to zero
    if (bufferLength === Number.MAX_VALUE) {
        bufferLength = 0;
    }
    return 100 / playerDuration * bufferLength;
}
exports.getMinBufferLevel = getMinBufferLevel;

},{}],47:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeekBarController = exports.SeekBarType = void 0;
var uiutils_1 = require("../uiutils");
var SeekBarType;
(function (SeekBarType) {
    SeekBarType[SeekBarType["Vod"] = 0] = "Vod";
    SeekBarType[SeekBarType["Live"] = 1] = "Live";
    SeekBarType[SeekBarType["Volume"] = 2] = "Volume";
})(SeekBarType = exports.SeekBarType || (exports.SeekBarType = {}));
var coerceValueIntoRange = function (value, range, cb) {
    if (value < range.min) {
        cb(range.min);
    }
    else if (value > range.max) {
        cb(range.max);
    }
    else {
        cb(value);
    }
};
/**
 * @category Utils
 */
var SeekBarController = /** @class */ (function () {
    function SeekBarController(keyStepIncrements, player, volumeController) {
        this.keyStepIncrements = keyStepIncrements;
        this.player = player;
        this.volumeController = volumeController;
    }
    SeekBarController.prototype.arrowKeyControls = function (currentValue, range, valueUpdate) {
        var _this = this;
        var controlValue = Math.floor(currentValue);
        return {
            left: function () { return coerceValueIntoRange(controlValue - _this.keyStepIncrements.leftRight, range, valueUpdate); },
            right: function () { return coerceValueIntoRange(controlValue + _this.keyStepIncrements.leftRight, range, valueUpdate); },
            up: function () { return coerceValueIntoRange(controlValue + _this.keyStepIncrements.upDown, range, valueUpdate); },
            down: function () { return coerceValueIntoRange(controlValue - _this.keyStepIncrements.upDown, range, valueUpdate); },
            home: function () { return coerceValueIntoRange(range.min, range, valueUpdate); },
            end: function () { return coerceValueIntoRange(range.max, range, valueUpdate); },
        };
    };
    SeekBarController.prototype.seekBarControls = function (type) {
        if (type === SeekBarType.Live) {
            return this.arrowKeyControls(this.player.getTimeShift(), { min: this.player.getMaxTimeShift(), max: 0 }, this.player.timeShift);
        }
        else if (type === SeekBarType.Vod) {
            return this.arrowKeyControls(this.player.getCurrentTime(), { min: 0, max: this.player.getDuration() }, this.player.seek);
        }
        else if (type === SeekBarType.Volume && this.volumeController != null) {
            var volumeTransition = this.volumeController.startTransition();
            return this.arrowKeyControls(this.player.getVolume(), { min: 0, max: 100 }, volumeTransition.finish.bind(volumeTransition));
        }
    };
    SeekBarController.prototype.setSeekBarControls = function (domElement, type) {
        var _this = this;
        domElement.on('keydown', function (e) {
            var controls = _this.seekBarControls(type());
            switch (e.keyCode) {
                case uiutils_1.UIUtils.KeyCode.LeftArrow: {
                    controls.left();
                    e.preventDefault();
                    break;
                }
                case uiutils_1.UIUtils.KeyCode.RightArrow: {
                    controls.right();
                    e.preventDefault();
                    break;
                }
                case uiutils_1.UIUtils.KeyCode.UpArrow: {
                    controls.up();
                    e.preventDefault();
                    break;
                }
                case uiutils_1.UIUtils.KeyCode.DownArrow: {
                    controls.down();
                    e.preventDefault();
                    break;
                }
                case uiutils_1.UIUtils.KeyCode.Home: {
                    controls.home();
                    e.preventDefault();
                    break;
                }
                case uiutils_1.UIUtils.KeyCode.End: {
                    controls.end();
                    e.preventDefault();
                    break;
                }
                case uiutils_1.UIUtils.KeyCode.Space: {
                    _this.player.isPlaying() ? _this.player.pause() : _this.player.play();
                    e.preventDefault();
                    break;
                }
            }
        });
    };
    return SeekBarController;
}());
exports.SeekBarController = SeekBarController;

},{"../uiutils":120}],48:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeekBarLabel = void 0;
var container_1 = require("./container");
var label_1 = require("./label");
var component_1 = require("./component");
var stringutils_1 = require("../stringutils");
var imageloader_1 = require("../imageloader");
var playerutils_1 = require("../playerutils");
/**
 * A label for a {@link SeekBar} that can display the seek target time, a thumbnail, and title (e.g. chapter title).
 *
 * @category Components
 */
var SeekBarLabel = /** @class */ (function (_super) {
    __extends(SeekBarLabel, _super);
    function SeekBarLabel(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.appliedMarkerCssClasses = [];
        _this.handleSeekPreview = function (sender, args) {
            if (_this.player.isLive()) {
                var maxTimeShift = _this.player.getMaxTimeShift();
                var timeShiftPreview = maxTimeShift - maxTimeShift * (args.position / 100);
                _this.setTime(timeShiftPreview);
                // In case of a live stream the player expects the time passed into the getThumbnail as a wallClockTime and not
                // as a relative timeShift value.
                var convertTimeShiftPreviewToWallClockTime = function (targetTimeShift) {
                    var currentTimeShift = _this.player.getTimeShift();
                    var currentTime = _this.player.getCurrentTime();
                    var wallClockTimeOfLiveEdge = currentTime - currentTimeShift;
                    return wallClockTimeOfLiveEdge + targetTimeShift;
                };
                var wallClockTime = convertTimeShiftPreviewToWallClockTime(timeShiftPreview);
                _this.setThumbnail(_this.player.getThumbnail(wallClockTime));
            }
            else {
                var time = _this.player.getDuration() * (args.position / 100);
                _this.setTime(time);
                var seekableRangeStart = playerutils_1.PlayerUtils.getSeekableRangeStart(_this.player, 0);
                var absoluteSeekTarget = time + seekableRangeStart;
                _this.setThumbnail(_this.player.getThumbnail(absoluteSeekTarget));
            }
            if (args.marker) {
                _this.setTitleText(args.marker.marker.title);
            }
            else {
                _this.setTitleText(null);
            }
            // Remove CSS classes from previous marker
            if (_this.appliedMarkerCssClasses.length > 0) {
                _this.getDomElement().removeClass(_this.appliedMarkerCssClasses.join(' '));
                _this.appliedMarkerCssClasses = [];
            }
            // Add CSS classes of current marker
            if (args.marker) {
                var cssClasses = (args.marker.marker.cssClasses || []).map(function (cssClass) { return _this.prefixCss(cssClass); });
                _this.getDomElement().addClass(cssClasses.join(' '));
                _this.appliedMarkerCssClasses = cssClasses;
            }
        };
        _this.timeLabel = new label_1.Label({ cssClasses: ['seekbar-label-time'] });
        _this.titleLabel = new label_1.Label({ cssClasses: ['seekbar-label-title'] });
        _this.thumbnail = new component_1.Component({ cssClasses: ['seekbar-thumbnail'], role: 'img' });
        _this.thumbnailImageLoader = new imageloader_1.ImageLoader();
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-seekbar-label',
            components: [new container_1.Container({
                    components: [
                        _this.thumbnail,
                        new container_1.Container({
                            components: [_this.titleLabel, _this.timeLabel],
                            cssClass: 'seekbar-label-metadata',
                        })
                    ],
                    cssClass: 'seekbar-label-inner',
                })],
            hidden: true,
        }, _this.config);
        return _this;
    }
    SeekBarLabel.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.player = player;
        this.uiManager = uimanager;
        uimanager.onSeekPreview.subscribeRateLimited(this.handleSeekPreview, 100);
        var init = function () {
            // Set time format depending on source duration
            _this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?
                stringutils_1.StringUtils.FORMAT_HHMMSS : stringutils_1.StringUtils.FORMAT_MMSS;
            // Set initial state of title and thumbnail to handle sourceLoaded when switching to a live-stream
            _this.setTitleText(null);
            _this.setThumbnail(null);
        };
        uimanager.getConfig().events.onUpdated.subscribe(init);
        init();
    };
    /**
     * Sets arbitrary text on the label.
     * @param text the text to show on the label
     */
    SeekBarLabel.prototype.setText = function (text) {
        this.timeLabel.setText(text);
    };
    /**
     * Sets a time to be displayed on the label.
     * @param seconds the time in seconds to display on the label
     */
    SeekBarLabel.prototype.setTime = function (seconds) {
        this.setText(stringutils_1.StringUtils.secondsToTime(seconds, this.timeFormat));
    };
    /**
     * Sets the text on the title label.
     * @param text the text to show on the label
     */
    SeekBarLabel.prototype.setTitleText = function (text) {
        if (text === void 0) { text = ''; }
        this.titleLabel.setText(text);
    };
    /**
     * Sets or removes a thumbnail on the label.
     * @param thumbnail the thumbnail to display on the label or null to remove a displayed thumbnail
     */
    SeekBarLabel.prototype.setThumbnail = function (thumbnail) {
        var _this = this;
        if (thumbnail === void 0) { thumbnail = null; }
        var thumbnailElement = this.thumbnail.getDomElement();
        if (thumbnail == null) {
            thumbnailElement.css({
                'background-image': null,
                'display': null,
                'width': null,
                'height': null,
            });
        }
        else {
            // We use the thumbnail image loader to make sure the thumbnail is loaded and it's size is known before be can
            // calculate the CSS properties and set them on the element.
            this.thumbnailImageLoader.load(thumbnail.url, function (url, width, height) {
                // can be checked like that because x/y/w/h are either all present or none
                // https://www.w3.org/TR/media-frags/#naming-space
                if (thumbnail.x !== undefined) {
                    thumbnailElement.css(_this.thumbnailCssSprite(thumbnail, width, height));
                }
                else {
                    thumbnailElement.css(_this.thumbnailCssSingleImage(thumbnail, width, height));
                }
            });
        }
    };
    SeekBarLabel.prototype.thumbnailCssSprite = function (thumbnail, width, height) {
        var thumbnailCountX = width / thumbnail.width;
        var thumbnailCountY = height / thumbnail.height;
        var thumbnailIndexX = thumbnail.x / thumbnail.width;
        var thumbnailIndexY = thumbnail.y / thumbnail.height;
        var sizeX = 100 * thumbnailCountX;
        var sizeY = 100 * thumbnailCountY;
        var offsetX = 100 * thumbnailIndexX;
        var offsetY = 100 * thumbnailIndexY;
        var aspectRatio = 1 / thumbnail.width * thumbnail.height;
        // The thumbnail size is set by setting the CSS 'width' and 'padding-bottom' properties. 'padding-bottom' is
        // used because it is relative to the width and can be used to set the aspect ratio of the thumbnail.
        // A default value for width is set in the stylesheet and can be overwritten from there or anywhere else.
        return {
            'display': 'inherit',
            'background-image': "url(".concat(thumbnail.url, ")"),
            'padding-bottom': "".concat(100 * aspectRatio, "%"),
            'background-size': "".concat(sizeX, "% ").concat(sizeY, "%"),
            'background-position': "-".concat(offsetX, "% -").concat(offsetY, "%"),
        };
    };
    SeekBarLabel.prototype.thumbnailCssSingleImage = function (thumbnail, width, height) {
        var aspectRatio = 1 / width * height;
        return {
            'display': 'inherit',
            'background-image': "url(".concat(thumbnail.url, ")"),
            'padding-bottom': "".concat(100 * aspectRatio, "%"),
            'background-size': "100% 100%",
            'background-position': "0 0",
        };
    };
    SeekBarLabel.prototype.release = function () {
        _super.prototype.release.call(this);
        this.uiManager.onSeekPreview.unsubscribe(this.handleSeekPreview);
    };
    return SeekBarLabel;
}(container_1.Container));
exports.SeekBarLabel = SeekBarLabel;

},{"../imageloader":93,"../playerutils":101,"../stringutils":114,"./component":23,"./container":24,"./label":33}],49:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectBox = void 0;
var listselector_1 = require("./listselector");
var dom_1 = require("../dom");
var i18n_1 = require("../localization/i18n");
var playerutils_1 = require("../playerutils");
var component_1 = require("./component");
var DocumentDropdownClosedEvents = [
    'mousemove',
    'mouseenter',
    'mouseleave',
    'touchstart',
    'touchmove',
    'touchend',
    'pointermove',
    'click',
    'keydown',
    'keypress',
    'keyup',
    'blur',
];
var SelectDropdownClosedEvents = [
    'change',
    'keyup',
    'mouseup',
];
var DropdownOpenedEvents = [
    ['click', function () { return true; }],
    ['keydown', function (event) { return [' ', 'ArrowUp', 'ArrowDown'].includes(event.key); }],
    ['mousedown', function () { return true; }],
];
var Timeout = 100;
/**
 * A simple select box providing the possibility to select a single item out of a list of available items.
 *
 * DOM example:
 * <code>
 *     <select class='ui-selectbox'>
 *         <option value='key'>label</option>
 *         ...
 *     </select>
 * </code>
 *
 * @category Components
 */
var SelectBox = /** @class */ (function (_super) {
    __extends(SelectBox, _super);
    function SelectBox(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.dropdownCloseListenerTimeoutId = 0;
        _this.removeDropdownCloseListeners = function () { };
        _this.removeDropdownOpenedListeners = function () { };
        _this.onChange = function () {
            var value = _this.selectElement.val();
            _this.onItemSelectedEvent(value, false);
        };
        _this.closeDropdown = function () {
            var select = _this.getSelectElement();
            if (select === undefined) {
                return;
            }
            select.blur();
        };
        _this.onPlayerStateChange = function (_, state) {
            if ([playerutils_1.PlayerUtils.PlayerState.Idle, playerutils_1.PlayerUtils.PlayerState.Finished].includes(state)) {
                _this.closeDropdown();
            }
        };
        _this.onDropdownOpened = function () {
            clearTimeout(_this.dropdownCloseListenerTimeoutId);
            _this.dropdownCloseListenerTimeoutId = window.setTimeout(function () { return _this.addDropdownCloseListeners(); }, Timeout);
            _this.onViewModeChangedEvent(component_1.ViewMode.Persistent);
        };
        _this.onDropdownClosed = function () {
            clearTimeout(_this.dropdownCloseListenerTimeoutId);
            _this.removeDropdownCloseListeners();
            _this.onViewModeChangedEvent(component_1.ViewMode.Temporary);
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-selectbox',
        }, _this.config);
        return _this;
    }
    SelectBox.prototype.toDomElement = function () {
        this.selectElement = new dom_1.DOM('select', {
            'id': this.config.id,
            'class': this.getCssClasses(),
            'aria-label': i18n_1.i18n.performLocalization(this.config.ariaLabel),
        }, this);
        this.onDisabled.subscribe(this.closeDropdown);
        this.onHide.subscribe(this.closeDropdown);
        this.addDropdownOpenedListeners();
        this.updateDomItems();
        this.selectElement.on('change', this.onChange);
        return this.selectElement;
    };
    SelectBox.prototype.configure = function (player, uimanager) {
        var _a;
        _super.prototype.configure.call(this, player, uimanager);
        this.uiContainer = uimanager.getUI();
        (_a = this.uiContainer) === null || _a === void 0 ? void 0 : _a.onPlayerStateChange().subscribe(this.onPlayerStateChange);
    };
    SelectBox.prototype.getSelectElement = function () {
        var _a, _b;
        return (_b = (_a = this.selectElement) === null || _a === void 0 ? void 0 : _a.get()) === null || _b === void 0 ? void 0 : _b[0];
    };
    SelectBox.prototype.updateDomItems = function (selectedValue) {
        if (selectedValue === void 0) { selectedValue = null; }
        if (this.selectElement === undefined) {
            return;
        }
        // Delete all children
        this.selectElement.empty();
        // Add updated children
        for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
            var item = _a[_i];
            var optionElement = new dom_1.DOM('option', {
                'value': String(item.key),
            }).html(i18n_1.i18n.performLocalization(item.label));
            if (item.key === String(selectedValue)) { // convert selectedValue to string to catch 'null'/null case
                optionElement.attr('selected', 'selected');
            }
            this.selectElement.append(optionElement);
        }
    };
    SelectBox.prototype.onItemAddedEvent = function (value) {
        _super.prototype.onItemAddedEvent.call(this, value);
        this.updateDomItems(this.selectedItem);
    };
    SelectBox.prototype.onItemRemovedEvent = function (value) {
        _super.prototype.onItemRemovedEvent.call(this, value);
        this.updateDomItems(this.selectedItem);
    };
    SelectBox.prototype.onItemSelectedEvent = function (value, updateDomItems) {
        if (updateDomItems === void 0) { updateDomItems = true; }
        _super.prototype.onItemSelectedEvent.call(this, value);
        if (updateDomItems) {
            this.updateDomItems(value);
        }
    };
    SelectBox.prototype.addDropdownCloseListeners = function () {
        var _this = this;
        this.removeDropdownCloseListeners();
        clearTimeout(this.dropdownCloseListenerTimeoutId);
        DocumentDropdownClosedEvents.forEach(function (event) { return document.addEventListener(event, _this.onDropdownClosed, true); });
        SelectDropdownClosedEvents.forEach(function (event) { return _this.selectElement.on(event, _this.onDropdownClosed, true); });
        this.removeDropdownCloseListeners = function () {
            DocumentDropdownClosedEvents.forEach(function (event) { return document.removeEventListener(event, _this.onDropdownClosed, true); });
            SelectDropdownClosedEvents.forEach(function (event) { return _this.selectElement.off(event, _this.onDropdownClosed, true); });
        };
    };
    SelectBox.prototype.addDropdownOpenedListeners = function () {
        var _this = this;
        var removeListenerFunctions = [];
        this.removeDropdownOpenedListeners();
        var _loop_1 = function (event_1, filter) {
            var listener = function (event) {
                if (filter(event)) {
                    _this.onDropdownOpened();
                }
            };
            removeListenerFunctions.push(function () { return _this.selectElement.off(event_1, listener, true); });
            this_1.selectElement.on(event_1, listener, true);
        };
        var this_1 = this;
        for (var _i = 0, DropdownOpenedEvents_1 = DropdownOpenedEvents; _i < DropdownOpenedEvents_1.length; _i++) {
            var _a = DropdownOpenedEvents_1[_i], event_1 = _a[0], filter = _a[1];
            _loop_1(event_1, filter);
        }
        this.removeDropdownOpenedListeners = function () {
            for (var _i = 0, removeListenerFunctions_1 = removeListenerFunctions; _i < removeListenerFunctions_1.length; _i++) {
                var remove = removeListenerFunctions_1[_i];
                remove();
            }
        };
    };
    SelectBox.prototype.release = function () {
        _super.prototype.release.call(this);
        this.removeDropdownCloseListeners();
        this.removeDropdownOpenedListeners();
        clearTimeout(this.dropdownCloseListenerTimeoutId);
    };
    return SelectBox;
}(listselector_1.ListSelector));
exports.SelectBox = SelectBox;

},{"../dom":87,"../localization/i18n":94,"../playerutils":101,"./component":23,"./listselector":35}],50:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsPanel = void 0;
var container_1 = require("./container");
var selectbox_1 = require("./selectbox");
var timeout_1 = require("../timeout");
var eventdispatcher_1 = require("../eventdispatcher");
var settingspanelpage_1 = require("./settingspanelpage");
var NavigationDirection;
(function (NavigationDirection) {
    NavigationDirection[NavigationDirection["Forwards"] = 0] = "Forwards";
    NavigationDirection[NavigationDirection["Backwards"] = 1] = "Backwards";
})(NavigationDirection || (NavigationDirection = {}));
/**
 * A panel containing a list of {@link SettingsPanelPage items}.
 *
 * To configure pages just pass them in the components array.
 *
 * Example:
 *  let settingsPanel = new SettingsPanel({
 *    hidden: true,
 *  });
 *
 *  let settingsPanelPage = new SettingsPanelPage({
 *    components: […]
 *  });
 *
 *  let secondSettingsPanelPage = new SettingsPanelPage({
 *    components: […]
 *  });
 *
 *  settingsPanel.addComponent(settingsPanelPage);
 *  settingsPanel.addComponent(secondSettingsPanelPage);
 *
 * For an example how to navigate between pages @see SettingsPanelPageNavigatorButton
 *
 * @category Components
 */
var SettingsPanel = exports.SettingsPanel = /** @class */ (function (_super) {
    __extends(SettingsPanel, _super);
    function SettingsPanel(config) {
        var _this = _super.call(this, config) || this;
        _this.navigationStack = [];
        _this.settingsPanelEvents = {
            onSettingsStateChanged: new eventdispatcher_1.EventDispatcher(),
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-settings-panel',
            hideDelay: 3000,
            pageTransitionAnimation: true,
        }, _this.config);
        _this.activePage = _this.getRootPage();
        return _this;
    }
    SettingsPanel.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        uimanager.onControlsHide.subscribe(function () { return _this.hideHoveredSelectBoxes(); });
        uimanager.onComponentViewModeChanged.subscribe(function (_, _a) {
            var mode = _a.mode;
            return _this.trackComponentViewMode(mode);
        });
        if (config.hideDelay > -1) {
            this.hideTimeout = new timeout_1.Timeout(config.hideDelay, function () {
                _this.hide();
                _this.hideHoveredSelectBoxes();
            });
            this.getDomElement().on('mouseenter', function () {
                // On mouse enter clear the timeout
                _this.hideTimeout.clear();
            });
            this.getDomElement().on('mouseleave', function () {
                // On mouse leave activate the timeout
                _this.hideTimeout.reset();
            });
            this.getDomElement().on('focusin', function () {
                _this.hideTimeout.clear();
            });
            this.getDomElement().on('focusout', function () {
                _this.hideTimeout.reset();
            });
        }
        this.onHide.subscribe(function () {
            if (config.hideDelay > -1) {
                // Clear timeout when hidden from outside
                _this.hideTimeout.clear();
            }
            // Since we don't reset the actual navigation here we need to simulate a onInactive event in case some panel
            // needs to do something when they become invisible / inactive.
            _this.activePage.onInactiveEvent();
        });
        this.onShow.subscribe(function () {
            // Reset navigation when te panel gets visible to avoid a weird animation when hiding
            _this.resetNavigation(true);
            // Since we don't need to navigate to the root page again we need to fire the onActive event when the settings
            // panel gets visible.
            _this.activePage.onActiveEvent();
            if (config.hideDelay > -1) {
                // Activate timeout when shown
                _this.hideTimeout.start();
            }
        });
        // pass event from root page through
        this.getRootPage().onSettingsStateChanged.subscribe(function () {
            _this.onSettingsStateChangedEvent();
        });
        this.updateActivePageClass();
    };
    /**
     * Returns the current active / visible page
     * @return {SettingsPanelPage}
     */
    SettingsPanel.prototype.getActivePage = function () {
        return this.activePage;
    };
    /**
     * Sets the
     * @deprecated Use {@link setActivePage} instead
     * @param index
     */
    SettingsPanel.prototype.setActivePageIndex = function (index) {
        this.setActivePage(this.getPages()[index]);
    };
    /**
     * Adds the passed page to the navigation stack and makes it visible.
     * Use {@link popSettingsPanelPage} to navigate backwards.
     *
     * Results in no-op if the target page is the current page.
     * @param targetPage
     */
    SettingsPanel.prototype.setActivePage = function (targetPage) {
        if (targetPage === this.getActivePage()) {
            console.warn('Page is already the current one ... skipping navigation');
            return;
        }
        this.navigateToPage(targetPage, this.getActivePage(), NavigationDirection.Forwards, !this.config.pageTransitionAnimation);
    };
    /**
     * Resets the navigation stack by navigating back to the root page and displaying it.
     */
    SettingsPanel.prototype.popToRootSettingsPanelPage = function () {
        this.resetNavigation(this.config.pageTransitionAnimation);
    };
    /**
     * Removes the current page from the navigation stack and makes the previous one visible.
     * Results in a no-op if we are already on the root page.
     */
    SettingsPanel.prototype.popSettingsPanelPage = function () {
        if (this.navigationStack.length === 0) {
            console.warn('Already on the root page ... skipping navigation');
            return;
        }
        var targetPage = this.navigationStack[this.navigationStack.length - 2];
        // The root part isn't part of the navigation stack so handle it explicitly here
        if (!targetPage) {
            targetPage = this.getRootPage();
        }
        this.navigateToPage(targetPage, this.activePage, NavigationDirection.Backwards, !this.config.pageTransitionAnimation);
    };
    /**
     * Checks if there are active settings within the root page of the settings panel.
     * An active setting is a setting that is visible and enabled, which the user can interact with.
     * @returns {boolean} true if there are active settings, false if the panel is functionally empty to a user
     */
    SettingsPanel.prototype.rootPageHasActiveSettings = function () {
        return this.getRootPage().hasActiveSettings();
    };
    /**
     * Return all configured pages
     * @returns {SettingsPanelPage[]}
     */
    SettingsPanel.prototype.getPages = function () {
        return this.config.components.filter(function (component) { return component instanceof settingspanelpage_1.SettingsPanelPage; });
    };
    Object.defineProperty(SettingsPanel.prototype, "onSettingsStateChanged", {
        get: function () {
            return this.settingsPanelEvents.onSettingsStateChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    SettingsPanel.prototype.release = function () {
        _super.prototype.release.call(this);
        if (this.hideTimeout) {
            this.hideTimeout.clear();
        }
    };
    // Support adding settingsPanelPages after initialization
    SettingsPanel.prototype.addComponent = function (component) {
        if (this.getPages().length === 0 && component instanceof settingspanelpage_1.SettingsPanelPage) {
            this.activePage = component;
        }
        _super.prototype.addComponent.call(this, component);
    };
    SettingsPanel.prototype.suspendHideTimeout = function () {
        this.hideTimeout.suspend();
    };
    SettingsPanel.prototype.resumeHideTimeout = function () {
        this.hideTimeout.resume(true);
    };
    SettingsPanel.prototype.updateActivePageClass = function () {
        var _this = this;
        this.getPages().forEach(function (page) {
            if (page === _this.activePage) {
                page.getDomElement().addClass(_this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));
            }
            else {
                page.getDomElement().removeClass(_this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));
            }
        });
    };
    SettingsPanel.prototype.resetNavigation = function (resetNavigationOnShow) {
        var sourcePage = this.getActivePage();
        var rootPage = this.getRootPage();
        if (sourcePage) {
            // Since the onInactiveEvent was already fired in the onHide we need to suppress it here
            if (!resetNavigationOnShow) {
                sourcePage.onInactiveEvent();
            }
        }
        this.navigationStack = [];
        this.animateNavigation(rootPage, sourcePage, resetNavigationOnShow);
        this.activePage = rootPage;
        this.updateActivePageClass();
    };
    SettingsPanel.prototype.navigateToPage = function (targetPage, sourcePage, direction, skipAnimation) {
        this.activePage = targetPage;
        if (direction === NavigationDirection.Forwards) {
            this.navigationStack.push(targetPage);
        }
        else {
            this.navigationStack.pop();
        }
        this.animateNavigation(targetPage, sourcePage, skipAnimation);
        this.updateActivePageClass();
        targetPage.onActiveEvent();
        sourcePage.onInactiveEvent();
    };
    /**
     * @param targetPage
     * @param sourcePage
     * @param skipAnimation This is just an internal flag if we want to have an animation. It is set true when we reset
     * the navigation within the onShow callback of the settingsPanel. In this case we don't want an actual animation but
     * the recalculation of the dimension of the settingsPanel.
     * This is independent of the pageTransitionAnimation flag.
     */
    SettingsPanel.prototype.animateNavigation = function (targetPage, sourcePage, skipAnimation) {
        if (!this.config.pageTransitionAnimation) {
            return;
        }
        var settingsPanelDomElement = this.getDomElement();
        var settingsPanelHTMLElement = this.getDomElement().get(0);
        // get current dimension
        var settingsPanelWidth = settingsPanelHTMLElement.scrollWidth;
        var settingsPanelHeight = settingsPanelHTMLElement.scrollHeight;
        // calculate target size of the settings panel
        sourcePage.getDomElement().css('display', 'none');
        this.getDomElement().css({ width: '', height: '' }); // let css auto settings kick in again
        var targetPageHtmlElement = targetPage.getDomElement().get(0);
        // clone the targetPage DOM element so that we can calculate the width / height how they will be after
        // switching the page. We are using a clone to prevent (mostly styling) side-effects on the real DOM element
        var clone = targetPageHtmlElement.cloneNode(true);
        // append to parent so we get the 'real' size
        var containerWrapper = targetPageHtmlElement.parentNode;
        containerWrapper.appendChild(clone);
        // set clone visible
        clone.style.display = 'block';
        // collect target dimension
        var targetSettingsPanelWidth = settingsPanelHTMLElement.scrollWidth;
        var targetSettingsPanelHeight = settingsPanelHTMLElement.scrollHeight;
        // remove clone from the DOM
        clone.parentElement.removeChild(clone); // .remove() is not working in IE
        sourcePage.getDomElement().css('display', '');
        // set the values back to the current ones that the browser animates it (browsers don't animate 'auto' values)
        settingsPanelDomElement.css({
            width: settingsPanelWidth + 'px',
            height: settingsPanelHeight + 'px',
        });
        if (!skipAnimation) {
            // We need to force the browser to reflow between setting the width and height that we actually get a animation
            this.forceBrowserReflow();
        }
        // set the values to the target dimension
        settingsPanelDomElement.css({
            width: targetSettingsPanelWidth + 'px',
            height: targetSettingsPanelHeight + 'px',
        });
    };
    SettingsPanel.prototype.forceBrowserReflow = function () {
        // Force the browser to reflow the layout
        // https://gist.github.com/paulirish/5d52fb081b3570c81e3a
        this.getDomElement().get(0).offsetLeft;
    };
    /**
     * Workaround for IE, Firefox and Safari
     * when the settings panel fades out while an item of a select box is still hovered, the select box will not fade out
     * while the settings panel does. This would leave a floating select box, which is just weird
     */
    SettingsPanel.prototype.hideHoveredSelectBoxes = function () {
        this.getComputedItems()
            .map(function (item) { return item['setting']; })
            .filter(function (component) { return component instanceof selectbox_1.SelectBox; })
            .forEach(function (selectBox) { return selectBox.closeDropdown(); });
    };
    // collect all items from all pages (see hideHoveredSelectBoxes)
    SettingsPanel.prototype.getComputedItems = function () {
        var allItems = [];
        for (var _i = 0, _a = this.getPages(); _i < _a.length; _i++) {
            var page = _a[_i];
            allItems.push.apply(allItems, page.getItems());
        }
        return allItems;
    };
    SettingsPanel.prototype.getRootPage = function () {
        return this.getPages()[0];
    };
    SettingsPanel.prototype.onSettingsStateChangedEvent = function () {
        this.settingsPanelEvents.onSettingsStateChanged.dispatch(this);
    };
    SettingsPanel.CLASS_ACTIVE_PAGE = 'active';
    return SettingsPanel;
}(container_1.Container));

},{"../eventdispatcher":89,"../timeout":116,"./container":24,"./selectbox":49,"./settingspanelpage":52}],51:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsPanelItem = void 0;
var container_1 = require("./container");
var component_1 = require("./component");
var eventdispatcher_1 = require("../eventdispatcher");
var label_1 = require("./label");
var selectbox_1 = require("./selectbox");
var listbox_1 = require("./listbox");
var videoqualityselectbox_1 = require("./videoqualityselectbox");
var audioqualityselectbox_1 = require("./audioqualityselectbox");
var playbackspeedselectbox_1 = require("./playbackspeedselectbox");
/**
 * An item for a {@link SettingsPanelPage},
 * Containing an optional {@link Label} and a component that configures a setting.
 * If the components is a {@link SelectBox} it will handle the logic of displaying it or not
 *
 * @category Components
 */
var SettingsPanelItem = /** @class */ (function (_super) {
    __extends(SettingsPanelItem, _super);
    function SettingsPanelItem(label, setting, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.settingsPanelItemEvents = {
            onActiveChanged: new eventdispatcher_1.EventDispatcher(),
        };
        _this.setting = setting;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-settings-panel-item',
            role: 'menuitem',
        }, _this.config);
        if (label !== null) {
            if (label instanceof component_1.Component) {
                _this.label = label;
            }
            else {
                _this.label = new label_1.Label({ text: label, for: _this.setting.getConfig().id });
            }
            _this.addComponent(_this.label);
        }
        _this.addComponent(_this.setting);
        return _this;
    }
    SettingsPanelItem.prototype.configure = function (player, uimanager) {
        var _this = this;
        if (this.setting instanceof selectbox_1.SelectBox || this.setting instanceof listbox_1.ListBox) {
            var handleConfigItemChanged = function () {
                if (!(_this.setting instanceof selectbox_1.SelectBox) && !(_this.setting instanceof listbox_1.ListBox)) {
                    return;
                }
                // The minimum number of items that must be available for the setting to be displayed
                // By default, at least two items must be available, else a selection is not possible
                var minItemsToDisplay = 2;
                // Audio/video quality select boxes contain an additional 'auto' mode, which in combination with a single
                // available quality also does not make sense
                if ((_this.setting instanceof videoqualityselectbox_1.VideoQualitySelectBox && _this.setting.hasAutoItem())
                    || _this.setting instanceof audioqualityselectbox_1.AudioQualitySelectBox) {
                    minItemsToDisplay = 3;
                }
                if (_this.setting.itemCount() < minItemsToDisplay) {
                    // Hide the setting if no meaningful choice is available
                    _this.hide();
                }
                else if (_this.setting instanceof playbackspeedselectbox_1.PlaybackSpeedSelectBox
                    && !uimanager.getConfig().playbackSpeedSelectionEnabled) {
                    // Hide the PlaybackSpeedSelectBox if disabled in config
                    _this.hide();
                }
                else {
                    _this.show();
                }
                // Visibility might have changed and therefore the active state might have changed so we fire the event
                // TODO fire only when state has really changed (e.g. check if visibility has really changed)
                _this.onActiveChangedEvent();
                _this.getDomElement().attr('aria-haspopup', 'true');
            };
            this.setting.onItemAdded.subscribe(handleConfigItemChanged);
            this.setting.onItemRemoved.subscribe(handleConfigItemChanged);
            // Initialize hidden state
            handleConfigItemChanged();
        }
    };
    /**
     * Checks if this settings panel item is active, i.e. visible and enabled and a user can interact with it.
     * @returns {boolean} true if the panel is active, else false
     */
    SettingsPanelItem.prototype.isActive = function () {
        return this.isShown();
    };
    SettingsPanelItem.prototype.onActiveChangedEvent = function () {
        this.settingsPanelItemEvents.onActiveChanged.dispatch(this);
    };
    Object.defineProperty(SettingsPanelItem.prototype, "onActiveChanged", {
        /**
         * Gets the event that is fired when the 'active' state of this item changes.
         * @see #isActive
         * @returns {Event<SettingsPanelItem, NoArgs>}
         */
        get: function () {
            return this.settingsPanelItemEvents.onActiveChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    return SettingsPanelItem;
}(container_1.Container));
exports.SettingsPanelItem = SettingsPanelItem;

},{"../eventdispatcher":89,"./audioqualityselectbox":13,"./component":23,"./container":24,"./label":33,"./listbox":34,"./playbackspeedselectbox":38,"./selectbox":49,"./videoqualityselectbox":80}],52:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsPanelPage = void 0;
var container_1 = require("./container");
var settingspanelitem_1 = require("./settingspanelitem");
var eventdispatcher_1 = require("../eventdispatcher");
var browserutils_1 = require("../browserutils");
/**
 * A panel containing a list of {@link SettingsPanelItem items} that represent labelled settings.
 *
 * @category Components
 */
var SettingsPanelPage = exports.SettingsPanelPage = /** @class */ (function (_super) {
    __extends(SettingsPanelPage, _super);
    function SettingsPanelPage(config) {
        var _this = _super.call(this, config) || this;
        _this.settingsPanelPageEvents = {
            onSettingsStateChanged: new eventdispatcher_1.EventDispatcher(),
            onActive: new eventdispatcher_1.EventDispatcher(),
            onInactive: new eventdispatcher_1.EventDispatcher(),
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-settings-panel-page',
            role: 'menu',
        }, _this.config);
        return _this;
    }
    SettingsPanelPage.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        // Fire event when the state of a settings-item has changed
        var settingsStateChangedHandler = function () {
            _this.onSettingsStateChangedEvent();
            // Attach marker class to last visible item
            var lastShownItem = null;
            for (var _i = 0, _a = _this.getItems(); _i < _a.length; _i++) {
                var component = _a[_i];
                component.getDomElement().removeClass(_this.prefixCss(SettingsPanelPage.CLASS_LAST));
                if (component.isShown()) {
                    lastShownItem = component;
                }
            }
            if (lastShownItem) {
                lastShownItem.getDomElement().addClass(_this.prefixCss(SettingsPanelPage.CLASS_LAST));
            }
        };
        for (var _i = 0, _a = this.getItems(); _i < _a.length; _i++) {
            var component = _a[_i];
            component.onActiveChanged.subscribe(settingsStateChangedHandler);
        }
    };
    SettingsPanelPage.prototype.hasActiveSettings = function () {
        for (var _i = 0, _a = this.getItems(); _i < _a.length; _i++) {
            var component = _a[_i];
            if (component.isActive()) {
                return true;
            }
        }
        return false;
    };
    SettingsPanelPage.prototype.getItems = function () {
        return this.config.components.filter(function (component) { return component instanceof settingspanelitem_1.SettingsPanelItem; });
    };
    SettingsPanelPage.prototype.onSettingsStateChangedEvent = function () {
        this.settingsPanelPageEvents.onSettingsStateChanged.dispatch(this);
    };
    Object.defineProperty(SettingsPanelPage.prototype, "onSettingsStateChanged", {
        get: function () {
            return this.settingsPanelPageEvents.onSettingsStateChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    SettingsPanelPage.prototype.onActiveEvent = function () {
        var activeItems = this.getItems().filter(function (item) { return item.isActive(); });
        this.settingsPanelPageEvents.onActive.dispatch(this);
        // Disable focus for iOS and iPadOS 13. They open select boxes automatically on focus and we want to avoid that.
        if (activeItems.length > 0 && !browserutils_1.BrowserUtils.isIOS && !(browserutils_1.BrowserUtils.isMacIntel && browserutils_1.BrowserUtils.isTouchSupported)) {
            activeItems[0].getDomElement().focusToFirstInput();
        }
    };
    Object.defineProperty(SettingsPanelPage.prototype, "onActive", {
        get: function () {
            return this.settingsPanelPageEvents.onActive.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    SettingsPanelPage.prototype.onInactiveEvent = function () {
        this.settingsPanelPageEvents.onInactive.dispatch(this);
    };
    Object.defineProperty(SettingsPanelPage.prototype, "onInactive", {
        get: function () {
            return this.settingsPanelPageEvents.onInactive.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    SettingsPanelPage.CLASS_LAST = 'last';
    return SettingsPanelPage;
}(container_1.Container));

},{"../browserutils":8,"../eventdispatcher":89,"./container":24,"./settingspanelitem":51}],53:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsPanelPageBackButton = void 0;
var settingspanelpagenavigatorbutton_1 = require("./settingspanelpagenavigatorbutton");
/**
 * @category Buttons
 */
var SettingsPanelPageBackButton = /** @class */ (function (_super) {
    __extends(SettingsPanelPageBackButton, _super);
    function SettingsPanelPageBackButton(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-settingspanelpagebackbutton',
            text: 'back',
        }, _this.config);
        return _this;
    }
    SettingsPanelPageBackButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.onClick.subscribe(function () {
            _this.popPage();
        });
    };
    return SettingsPanelPageBackButton;
}(settingspanelpagenavigatorbutton_1.SettingsPanelPageNavigatorButton));
exports.SettingsPanelPageBackButton = SettingsPanelPageBackButton;

},{"./settingspanelpagenavigatorbutton":54}],54:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsPanelPageNavigatorButton = void 0;
var button_1 = require("./button");
/**
 * Can be used to navigate between SettingsPanelPages
 *
 * Example:
 *  let settingPanelNavigationButton = new SettingsPanelPageNavigatorButton({
 *    container: settingsPanel,
 *    targetPage: settingsPanelPage,
 *  });
 *
 *  settingsPanelPage.addComponent(settingPanelNavigationButton);
 *
 * Don't forget to add the settingPanelNavigationButton to the settingsPanelPage.
 *
 * @category Buttons
 */
var SettingsPanelPageNavigatorButton = /** @class */ (function (_super) {
    __extends(SettingsPanelPageNavigatorButton, _super);
    function SettingsPanelPageNavigatorButton(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {}, _this.config);
        _this.container = _this.config.container;
        _this.targetPage = _this.config.targetPage;
        return _this;
    }
    /**
     * navigate one level back
     */
    SettingsPanelPageNavigatorButton.prototype.popPage = function () {
        this.container.popSettingsPanelPage();
    };
    /**
     * navigate to the target page
     */
    SettingsPanelPageNavigatorButton.prototype.pushTargetPage = function () {
        this.container.setActivePage(this.targetPage);
    };
    return SettingsPanelPageNavigatorButton;
}(button_1.Button));
exports.SettingsPanelPageNavigatorButton = SettingsPanelPageNavigatorButton;

},{"./button":17}],55:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsPanelPageOpenButton = void 0;
var settingspanelpagenavigatorbutton_1 = require("./settingspanelpagenavigatorbutton");
var i18n_1 = require("../localization/i18n");
/**
 * @category Buttons
 */
var SettingsPanelPageOpenButton = /** @class */ (function (_super) {
    __extends(SettingsPanelPageOpenButton, _super);
    function SettingsPanelPageOpenButton(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-settingspanelpageopenbutton',
            text: i18n_1.i18n.getLocalizer('open'),
            role: 'menuitem',
        }, _this.config);
        return _this;
    }
    SettingsPanelPageOpenButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.getDomElement().attr('aria-haspopup', 'true');
        this.getDomElement().attr('aria-owns', this.config.targetPage.getConfig().id);
        this.onClick.subscribe(function () {
            _this.pushTargetPage();
        });
    };
    return SettingsPanelPageOpenButton;
}(settingspanelpagenavigatorbutton_1.SettingsPanelPageNavigatorButton));
exports.SettingsPanelPageOpenButton = SettingsPanelPageOpenButton;

},{"../localization/i18n":94,"./settingspanelpagenavigatorbutton":54}],56:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var settingspanel_1 = require("./settingspanel");
var arrayutils_1 = require("../arrayutils");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles visibility of a settings panel.
 *
 * @category Buttons
 */
var SettingsToggleButton = /** @class */ (function (_super) {
    __extends(SettingsToggleButton, _super);
    function SettingsToggleButton(config) {
        var _this = _super.call(this, config) || this;
        _this.visibleSettingsPanels = [];
        if (!config.settingsPanel) {
            throw new Error('Required SettingsPanel is missing');
        }
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-settingstogglebutton',
            text: i18n_1.i18n.getLocalizer('settings'),
            settingsPanel: null,
            autoHideWhenNoActiveSettings: true,
            role: 'pop-up button',
        }, _this.config);
        /**
         * WCAG20 standard defines which popup menu (element id) is owned by the button
         */
        _this.getDomElement().attr('aria-owns', config.settingsPanel.getActivePage().getConfig().id);
        /**
         * WCAG20 standard defines that a button has a popup menu bound to it
         */
        _this.getDomElement().attr('aria-haspopup', 'true');
        return _this;
    }
    SettingsToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var settingsPanel = config.settingsPanel;
        this.onClick.subscribe(function () {
            // only hide other `SettingsPanel`s if a new one will be opened
            if (!settingsPanel.isShown()) {
                // Hide all open SettingsPanels before opening this button's panel
                // (We need to iterate a copy because hiding them will automatically remove themselves from the array
                // due to the subscribeOnce above)
                _this.visibleSettingsPanels.slice().forEach(function (settingsPanel) { return settingsPanel.hide(); });
            }
            settingsPanel.toggleHidden();
        });
        settingsPanel.onShow.subscribe(function () {
            // Set toggle status to on when the settings panel shows
            _this.on();
        });
        settingsPanel.onHide.subscribe(function () {
            // Set toggle status to off when the settings panel hides
            _this.off();
        });
        // Ensure that only one `SettingPanel` is visible at once
        // Keep track of shown SettingsPanels
        uimanager.onComponentShow.subscribe(function (sender) {
            if (sender instanceof settingspanel_1.SettingsPanel) {
                _this.visibleSettingsPanels.push(sender);
                sender.onHide.subscribeOnce(function () { return arrayutils_1.ArrayUtils.remove(_this.visibleSettingsPanels, sender); });
            }
        });
        // Handle automatic hiding of the button if there are no settings for the user to interact with
        if (config.autoHideWhenNoActiveSettings) {
            // Setup handler to show/hide button when the settings change
            var settingsPanelItemsChangedHandler = function () {
                if (settingsPanel.rootPageHasActiveSettings()) {
                    if (_this.isHidden()) {
                        _this.show();
                    }
                }
                else {
                    if (_this.isShown()) {
                        _this.hide();
                    }
                }
            };
            // Wire the handler to the event
            settingsPanel.onSettingsStateChanged.subscribe(settingsPanelItemsChangedHandler);
            // Call handler for first init at startup
            settingsPanelItemsChangedHandler();
        }
    };
    return SettingsToggleButton;
}(togglebutton_1.ToggleButton));
exports.SettingsToggleButton = SettingsToggleButton;

},{"../arrayutils":6,"../localization/i18n":94,"./settingspanel":50,"./togglebutton":77}],57:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Spacer = void 0;
var component_1 = require("./component");
/**
 * A dummy component that just reserves some space and does nothing else.
 *
 * @category Components
 */
var Spacer = /** @class */ (function (_super) {
    __extends(Spacer, _super);
    function Spacer(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-spacer',
        }, _this.config);
        return _this;
    }
    Spacer.prototype.onShowEvent = function () {
        // disable event firing by overwriting and not calling super
    };
    Spacer.prototype.onHideEvent = function () {
        // disable event firing by overwriting and not calling super
    };
    Spacer.prototype.onHoverChangedEvent = function (hovered) {
        // disable event firing by overwriting and not calling super
    };
    return Spacer;
}(component_1.Component));
exports.Spacer = Spacer;

},{"./component":23}],58:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleListBox = void 0;
var listbox_1 = require("./listbox");
var subtitleutils_1 = require("../subtitleutils");
/**
 * A element that is similar to a select box where the user can select a subtitle
 *
 * @category Components
 */
var SubtitleListBox = /** @class */ (function (_super) {
    __extends(SubtitleListBox, _super);
    function SubtitleListBox() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SubtitleListBox.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        new subtitleutils_1.SubtitleSwitchHandler(player, this, uimanager);
    };
    return SubtitleListBox;
}(listbox_1.ListBox));
exports.SubtitleListBox = SubtitleListBox;

},{"../subtitleutils":115,"./listbox":34}],59:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleRegionContainer = exports.SubtitleRegionContainerManager = exports.SubtitleLabel = exports.SubtitleOverlay = void 0;
var container_1 = require("./container");
var label_1 = require("./label");
var controlbar_1 = require("./controlbar");
var eventdispatcher_1 = require("../eventdispatcher");
var dom_1 = require("../dom");
var i18n_1 = require("../localization/i18n");
var vttutils_1 = require("../vttutils");
/**
 * Overlays the player to display subtitles.
 *
 * @category Components
 */
var SubtitleOverlay = exports.SubtitleOverlay = /** @class */ (function (_super) {
    __extends(SubtitleOverlay, _super);
    function SubtitleOverlay(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.preprocessLabelEventCallback = new eventdispatcher_1.EventDispatcher();
        _this.previewSubtitleActive = false;
        _this.previewSubtitle = new SubtitleLabel({ text: i18n_1.i18n.getLocalizer('subtitle.example') });
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-subtitle-overlay',
        }, _this.config);
        return _this;
    }
    SubtitleOverlay.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var subtitleManager = new ActiveSubtitleManager();
        this.subtitleManager = subtitleManager;
        this.subtitleContainerManager = new SubtitleRegionContainerManager(this);
        player.on(player.exports.PlayerEvent.CueEnter, function (event) {
            var label = _this.generateLabel(event);
            subtitleManager.cueEnter(event, label);
            _this.preprocessLabelEventCallback.dispatch(event, label);
            if (_this.previewSubtitleActive) {
                _this.subtitleContainerManager.removeLabel(_this.previewSubtitle);
            }
            _this.show();
            _this.subtitleContainerManager.addLabel(label, _this.getDomElement().size());
            _this.updateComponents();
            if (uimanager.getConfig().forceSubtitlesIntoViewContainer) {
                _this.handleSubtitleCropping(label);
            }
        });
        player.on(player.exports.PlayerEvent.CueUpdate, function (event) {
            var label = _this.generateLabel(event);
            var labelToReplace = subtitleManager.cueUpdate(event, label);
            _this.preprocessLabelEventCallback.dispatch(event, label);
            if (labelToReplace) {
                _this.subtitleContainerManager.replaceLabel(labelToReplace, label);
            }
            if (uimanager.getConfig().forceSubtitlesIntoViewContainer) {
                _this.handleSubtitleCropping(label);
            }
        });
        player.on(player.exports.PlayerEvent.CueExit, function (event) {
            var labelToRemove = subtitleManager.cueExit(event);
            if (labelToRemove) {
                _this.subtitleContainerManager.removeLabel(labelToRemove);
                _this.updateComponents();
            }
            if (!subtitleManager.hasCues) {
                if (!_this.previewSubtitleActive) {
                    _this.hide();
                }
                else {
                    _this.subtitleContainerManager.addLabel(_this.previewSubtitle);
                    _this.updateComponents();
                }
            }
        });
        var subtitleClearHandler = function () {
            _this.hide();
            _this.subtitleContainerManager.clear();
            subtitleManager.clear();
            _this.removeComponents();
            _this.updateComponents();
        };
        var clearInactiveCues = function () {
            var removedActiveCues = subtitleManager.clearInactiveCues(player.getCurrentTime());
            removedActiveCues.forEach(function (toRemove) {
                _this.subtitleContainerManager.removeLabel(toRemove.label);
            });
        };
        player.on(player.exports.PlayerEvent.AudioChanged, subtitleClearHandler);
        player.on(player.exports.PlayerEvent.SubtitleDisabled, subtitleClearHandler);
        player.on(player.exports.PlayerEvent.Seeked, clearInactiveCues);
        player.on(player.exports.PlayerEvent.TimeShifted, clearInactiveCues);
        player.on(player.exports.PlayerEvent.PlaybackFinished, subtitleClearHandler);
        player.on(player.exports.PlayerEvent.SourceUnloaded, subtitleClearHandler);
        uimanager.onComponentShow.subscribe(function (component) {
            if (component instanceof controlbar_1.ControlBar) {
                _this.getDomElement().addClass(_this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));
            }
        });
        uimanager.onComponentHide.subscribe(function (component) {
            if (component instanceof controlbar_1.ControlBar) {
                _this.getDomElement().removeClass(_this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));
            }
        });
        this.configureCea608Captions(player, uimanager);
        // Init
        subtitleClearHandler();
    };
    SubtitleOverlay.prototype.detectCroppedSubtitleLabel = function (labelElement) {
        var parent = this.getDomElement().get(0);
        var childRect = labelElement.getBoundingClientRect();
        var parentRect = parent.getBoundingClientRect();
        return {
            top: childRect.top < parentRect.top,
            right: childRect.right > parentRect.right,
            bottom: childRect.bottom > parentRect.bottom,
            left: childRect.left < parentRect.left,
        };
    };
    SubtitleOverlay.prototype.handleSubtitleCropping = function (label) {
        var labelDomElement = label.getDomElement();
        var cropDetection = this.detectCroppedSubtitleLabel(labelDomElement.get(0));
        if (cropDetection.top) {
            labelDomElement.css('top', '0');
            labelDomElement.removeCss('bottom');
        }
        if (cropDetection.right) {
            labelDomElement.css('right', '0');
            labelDomElement.removeCss('left');
        }
        if (cropDetection.bottom) {
            labelDomElement.css('bottom', '0');
            labelDomElement.removeCss('top');
        }
        if (cropDetection.left) {
            labelDomElement.css('left', '0');
            labelDomElement.removeCss('right');
        }
    };
    SubtitleOverlay.prototype.generateLabel = function (event) {
        // Sanitize cue data (must be done before the cue ID is generated in subtitleManager.cueEnter / update)
        if (event.position) {
            // Sometimes the positions are undefined, we assume them to be zero
            event.position.row = event.position.row || 0;
            event.position.column = event.position.column || 0;
        }
        var label = new SubtitleLabel({
            // Prefer the HTML subtitle text if set, else try generating a image tag as string from the image attribute,
            // else use the plain text
            text: event.html || ActiveSubtitleManager.generateImageTagText(event.image) || event.text,
            vtt: event.vtt,
            region: event.region,
            regionStyle: event.regionStyle,
        });
        return label;
    };
    SubtitleOverlay.prototype.configureCea608Captions = function (player, uimanager) {
        var _this = this;
        // The calculated font size
        var fontSize = 0;
        // The required letter spacing spread the text characters evenly across the grid
        var fontLetterSpacing = 0;
        // Flag telling if a font size calculation is required of if the current values are valid
        var fontSizeCalculationRequired = true;
        // Flag telling if the CEA-608 mode is enabled
        var enabled = false;
        var updateCEA608FontSize = function () {
            var dummyLabel = new SubtitleLabel({ text: 'X' });
            dummyLabel.getDomElement().css({
                // By using a large font size we do not need to use multiple letters and can get still an
                // accurate measurement even though the returned size is an integer value
                'font-size': '200px',
                'line-height': '200px',
                'visibility': 'hidden',
            });
            _this.addComponent(dummyLabel);
            _this.updateComponents();
            _this.show();
            var dummyLabelCharWidth = dummyLabel.getDomElement().width();
            var dummyLabelCharHeight = dummyLabel.getDomElement().height();
            var fontSizeRatio = dummyLabelCharWidth / dummyLabelCharHeight;
            _this.removeComponent(dummyLabel);
            _this.updateComponents();
            if (!_this.subtitleManager.hasCues) {
                _this.hide();
            }
            // We subtract 1px here to avoid line breaks at the right border of the subtitle overlay that can happen
            // when texts contain whitespaces. It's probably some kind of pixel rounding issue in the browser's
            // layouting, but the actual reason could not be determined. Aiming for a target width - 1px would work in
            // most browsers, but Safari has a "quantized" font size rendering with huge steps in between so we need
            // to subtract some more pixels to avoid line breaks there as well.
            var subtitleOverlayWidth = _this.getDomElement().width() - 10;
            var subtitleOverlayHeight = _this.getDomElement().height();
            // The size ratio of the letter grid
            var fontGridSizeRatio = (dummyLabelCharWidth * SubtitleOverlay.CEA608_NUM_COLUMNS) /
                (dummyLabelCharHeight * SubtitleOverlay.CEA608_NUM_ROWS);
            // The size ratio of the available space for the grid
            var subtitleOverlaySizeRatio = subtitleOverlayWidth / subtitleOverlayHeight;
            if (subtitleOverlaySizeRatio > fontGridSizeRatio) {
                // When the available space is wider than the text grid, the font size is simply
                // determined by the height of the available space.
                fontSize = subtitleOverlayHeight / SubtitleOverlay.CEA608_NUM_ROWS;
                // Calculate the additional letter spacing required to evenly spread the text across the grid's width
                var gridSlotWidth = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS;
                var fontCharWidth = fontSize * fontSizeRatio;
                fontLetterSpacing = gridSlotWidth - fontCharWidth;
            }
            else {
                // When the available space is not wide enough, texts would vertically overlap if we take
                // the height as a base for the font size, so we need to limit the height. We do that
                // by determining the font size by the width of the available space.
                fontSize = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS / fontSizeRatio;
                fontLetterSpacing = 0;
            }
            // Update font-size of all active subtitle labels
            for (var _i = 0, _a = _this.getComponents(); _i < _a.length; _i++) {
                var label = _a[_i];
                if (label instanceof SubtitleLabel) {
                    label.getDomElement().css({
                        'font-size': "".concat(fontSize, "px"),
                        'letter-spacing': "".concat(fontLetterSpacing, "px"),
                    });
                }
            }
        };
        player.on(player.exports.PlayerEvent.PlayerResized, function () {
            if (enabled) {
                updateCEA608FontSize();
            }
            else {
                fontSizeCalculationRequired = true;
            }
        });
        this.preprocessLabelEventCallback.subscribe(function (event, label) {
            var isCEA608 = event.position != null;
            if (!isCEA608) {
                // Skip all non-CEA608 cues
                return;
            }
            if (!enabled) {
                enabled = true;
                _this.getDomElement().addClass(_this.prefixCss(SubtitleOverlay.CLASS_CEA_608));
                // We conditionally update the font size by this flag here to avoid updating every time a subtitle
                // is added into an empty overlay. Because we reset the overlay when all subtitles are gone, this
                // would trigger an unnecessary update every time, but it's only required under certain conditions,
                // e.g. after the player size has changed.
                if (fontSizeCalculationRequired) {
                    updateCEA608FontSize();
                    fontSizeCalculationRequired = false;
                }
            }
            label.getDomElement().css({
                'left': "".concat(event.position.column * SubtitleOverlay.CEA608_COLUMN_OFFSET, "%"),
                'top': "".concat(event.position.row * SubtitleOverlay.CEA608_ROW_OFFSET, "%"),
                'font-size': "".concat(fontSize, "px"),
                'letter-spacing': "".concat(fontLetterSpacing, "px"),
            });
        });
        var reset = function () {
            _this.getDomElement().removeClass(_this.prefixCss(SubtitleOverlay.CLASS_CEA_608));
            enabled = false;
        };
        player.on(player.exports.PlayerEvent.CueExit, function () {
            if (!_this.subtitleManager.hasCues) {
                // Disable CEA-608 mode when all subtitles are gone (to allow correct formatting and
                // display of other types of subtitles, e.g. the formatting preview subtitle)
                reset();
            }
        });
        player.on(player.exports.PlayerEvent.SourceUnloaded, reset);
        player.on(player.exports.PlayerEvent.SubtitleEnabled, reset);
        player.on(player.exports.PlayerEvent.SubtitleDisabled, reset);
    };
    SubtitleOverlay.prototype.enablePreviewSubtitleLabel = function () {
        if (!this.subtitleManager.hasCues) {
            this.previewSubtitleActive = true;
            this.subtitleContainerManager.addLabel(this.previewSubtitle);
            this.updateComponents();
            this.show();
        }
    };
    SubtitleOverlay.prototype.removePreviewSubtitleLabel = function () {
        if (this.previewSubtitleActive) {
            this.previewSubtitleActive = false;
            this.subtitleContainerManager.removeLabel(this.previewSubtitle);
            this.updateComponents();
        }
    };
    SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE = 'controlbar-visible';
    SubtitleOverlay.CLASS_CEA_608 = 'cea608';
    // The number of rows in a cea608 grid
    SubtitleOverlay.CEA608_NUM_ROWS = 15;
    // The number of columns in a cea608 grid
    SubtitleOverlay.CEA608_NUM_COLUMNS = 32;
    // The offset in percent for one row (which is also the height of a row)
    SubtitleOverlay.CEA608_ROW_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_ROWS;
    // The offset in percent for one column (which is also the width of a column)
    SubtitleOverlay.CEA608_COLUMN_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_COLUMNS;
    return SubtitleOverlay;
}(container_1.Container));
var SubtitleLabel = /** @class */ (function (_super) {
    __extends(SubtitleLabel, _super);
    function SubtitleLabel(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-subtitle-label',
        }, _this.config);
        return _this;
    }
    Object.defineProperty(SubtitleLabel.prototype, "vtt", {
        get: function () {
            return this.config.vtt;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleLabel.prototype, "region", {
        get: function () {
            return this.config.region;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleLabel.prototype, "regionStyle", {
        get: function () {
            return this.config.regionStyle;
        },
        enumerable: false,
        configurable: true
    });
    return SubtitleLabel;
}(label_1.Label));
exports.SubtitleLabel = SubtitleLabel;
var ActiveSubtitleManager = /** @class */ (function () {
    function ActiveSubtitleManager() {
        this.activeSubtitleCueMap = {};
        this.activeSubtitleCueCount = 0;
    }
    /**
     * Calculates a unique ID for a subtitle cue, which is needed to associate an CueEnter with its CueExit
     * event so we can remove the correct subtitle in CueExit when multiple subtitles are active at the same time.
     * The start time plus the text should make a unique identifier, and in the only case where a collision
     * can happen, two similar texts will be displayed at a similar time and a similar position (or without position).
     * The start time should always be known, because it is required to schedule the CueEnter event. The end time
     * must not necessarily be known and therefore cannot be used for the ID.
     * @param event
     * @return {string}
     */
    ActiveSubtitleManager.calculateId = function (event) {
        var id = event.start + '-' + event.text;
        if (event.position) {
            id += '-' + event.position.row + '-' + event.position.column;
        }
        return id;
    };
    ActiveSubtitleManager.prototype.cueEnter = function (event, label) {
        this.addCueToMap(event, label);
    };
    ActiveSubtitleManager.prototype.cueUpdate = function (event, label) {
        var labelToReplace = this.popCueFromMap(event);
        if (labelToReplace) {
            this.addCueToMap(event, label);
            return labelToReplace;
        }
        return undefined;
    };
    ActiveSubtitleManager.prototype.addCueToMap = function (event, label) {
        var id = ActiveSubtitleManager.calculateId(event);
        // Create array for id if it does not exist
        this.activeSubtitleCueMap[id] = this.activeSubtitleCueMap[id] || [];
        // Add cue
        this.activeSubtitleCueMap[id].push({ event: event, label: label });
        this.activeSubtitleCueCount++;
    };
    ActiveSubtitleManager.prototype.popCueFromMap = function (event) {
        var id = ActiveSubtitleManager.calculateId(event);
        var activeSubtitleCues = this.activeSubtitleCueMap[id];
        if (activeSubtitleCues && activeSubtitleCues.length > 0) {
            // Remove cue
            /* We apply the FIFO approach here and remove the oldest cue from the associated id. When there are multiple cues
             * with the same id, there is no way to know which one of the cues is to be deleted, so we just hope that FIFO
             * works fine. Theoretically it can happen that two cues with colliding ids are removed at different times, in
             * the wrong order. This rare case has yet to be observed. If it ever gets an issue, we can take the unstable
             * cue end time (which can change between CueEnter and CueExit IN CueUpdate) and use it as an
             * additional hint to try and remove the correct one of the colliding cues.
             */
            var activeSubtitleCue = activeSubtitleCues.shift();
            this.activeSubtitleCueCount--;
            return activeSubtitleCue.label;
        }
    };
    /**
     * Removes all active cues which don't enclose the given time
     * @param time the time for which subtitles should remain
     */
    ActiveSubtitleManager.prototype.clearInactiveCues = function (time) {
        var _this = this;
        var removedCues = [];
        Object.keys(this.activeSubtitleCueMap).forEach(function (key) {
            var activeCues = _this.activeSubtitleCueMap[key];
            activeCues.forEach(function (cue) {
                if (time < cue.event.start || time > cue.event.end) {
                    _this.popCueFromMap(cue.event);
                    removedCues.push(cue);
                }
            });
        });
        return removedCues;
    };
    ActiveSubtitleManager.generateImageTagText = function (imageData) {
        if (!imageData) {
            return;
        }
        var imgTag = new dom_1.DOM('img', {
            src: imageData,
        });
        imgTag.css('width', '100%');
        return imgTag.get(0).outerHTML; // return the html as string
    };
    /**
     * Returns the label associated with an already added cue.
     * @param event
     * @return {SubtitleLabel}
     */
    ActiveSubtitleManager.prototype.getCues = function (event) {
        var id = ActiveSubtitleManager.calculateId(event);
        var activeSubtitleCues = this.activeSubtitleCueMap[id];
        if (activeSubtitleCues && activeSubtitleCues.length > 0) {
            return activeSubtitleCues.map(function (cue) { return cue.label; });
        }
    };
    /**
     * Removes the subtitle cue from the manager and returns the label that should be removed from the subtitle overlay,
     * or null if there is no associated label existing (e.g. because all labels have been {@link #clear cleared}.
     * @param event
     * @return {SubtitleLabel|null}
     */
    ActiveSubtitleManager.prototype.cueExit = function (event) {
        return this.popCueFromMap(event);
    };
    Object.defineProperty(ActiveSubtitleManager.prototype, "cueCount", {
        /**
         * Returns the number of active subtitle cues.
         * @return {number}
         */
        get: function () {
            // We explicitly count the cues to save an Array.reduce on every cueCount call (which can happen frequently)
            return this.activeSubtitleCueCount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ActiveSubtitleManager.prototype, "hasCues", {
        /**
         * Returns true if there are active subtitle cues, else false.
         * @return {boolean}
         */
        get: function () {
            return this.cueCount > 0;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Removes all subtitle cues from the manager.
     */
    ActiveSubtitleManager.prototype.clear = function () {
        this.activeSubtitleCueMap = {};
        this.activeSubtitleCueCount = 0;
    };
    return ActiveSubtitleManager;
}());
var SubtitleRegionContainerManager = /** @class */ (function () {
    /**
     * @param subtitleOverlay Reference to the subtitle overlay for adding and removing the containers.
     */
    function SubtitleRegionContainerManager(subtitleOverlay) {
        this.subtitleOverlay = subtitleOverlay;
        this.subtitleRegionContainers = {};
        this.subtitleOverlay = subtitleOverlay;
    }
    SubtitleRegionContainerManager.prototype.getRegion = function (label) {
        if (label.vtt) {
            return {
                regionContainerId: label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt',
                regionName: 'vtt',
            };
        }
        return {
            regionContainerId: label.region || 'default',
            regionName: label.region || 'default',
        };
    };
    /**
     * Creates and wraps a subtitle label into a container div based on the subtitle region.
     * If the subtitle has positioning information it is added to the container.
     * @param label The subtitle label to wrap
     */
    SubtitleRegionContainerManager.prototype.addLabel = function (label, overlaySize) {
        var _a = this.getRegion(label), regionContainerId = _a.regionContainerId, regionName = _a.regionName;
        var cssClasses = ["subtitle-position-".concat(regionName)];
        if (label.vtt && label.vtt.region) {
            cssClasses.push("vtt-region-".concat(label.vtt.region.id));
        }
        if (!this.subtitleRegionContainers[regionContainerId]) {
            var regionContainer = new SubtitleRegionContainer({
                cssClasses: cssClasses,
            });
            this.subtitleRegionContainers[regionContainerId] = regionContainer;
            if (label.regionStyle) {
                regionContainer.getDomElement().attr('style', label.regionStyle);
            }
            else if (label.vtt && !label.vtt.region) {
                /**
                 * If there is no region present to wrap the Cue Box, the Cue box becomes the
                 * region itself. Therefore the positioning values have to come from the box.
                 */
                regionContainer.getDomElement().css('position', 'static');
            }
            else {
                // getDomElement needs to be called at least once to ensure the component exists
                regionContainer.getDomElement();
            }
            for (var regionContainerId_1 in this.subtitleRegionContainers) {
                this.subtitleOverlay.addComponent(this.subtitleRegionContainers[regionContainerId_1]);
            }
        }
        this.subtitleRegionContainers[regionContainerId].addLabel(label, overlaySize);
    };
    SubtitleRegionContainerManager.prototype.replaceLabel = function (previousLabel, newLabel) {
        var regionContainerId = this.getRegion(previousLabel).regionContainerId;
        this.subtitleRegionContainers[regionContainerId].removeLabel(previousLabel);
        this.subtitleRegionContainers[regionContainerId].addLabel(newLabel);
    };
    /**
     * Removes a subtitle label from a container.
     */
    SubtitleRegionContainerManager.prototype.removeLabel = function (label) {
        var regionContainerId;
        if (label.vtt) {
            regionContainerId = label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt';
        }
        else {
            regionContainerId = label.region || 'default';
        }
        this.subtitleRegionContainers[regionContainerId].removeLabel(label);
        // Remove container if no more labels are displayed
        if (this.subtitleRegionContainers[regionContainerId].isEmpty()) {
            this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionContainerId]);
            delete this.subtitleRegionContainers[regionContainerId];
        }
    };
    /**
     * Removes all subtitle containers.
     */
    SubtitleRegionContainerManager.prototype.clear = function () {
        for (var regionName in this.subtitleRegionContainers) {
            this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionName]);
        }
        this.subtitleRegionContainers = {};
    };
    return SubtitleRegionContainerManager;
}());
exports.SubtitleRegionContainerManager = SubtitleRegionContainerManager;
var SubtitleRegionContainer = /** @class */ (function (_super) {
    __extends(SubtitleRegionContainer, _super);
    function SubtitleRegionContainer(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.labelCount = 0;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'subtitle-region-container',
        }, _this.config);
        return _this;
    }
    SubtitleRegionContainer.prototype.addLabel = function (labelToAdd, overlaySize) {
        this.labelCount++;
        if (labelToAdd.vtt) {
            if (labelToAdd.vtt.region && overlaySize) {
                vttutils_1.VttUtils.setVttRegionStyles(this, labelToAdd.vtt.region, overlaySize);
            }
            vttutils_1.VttUtils.setVttCueBoxStyles(labelToAdd, overlaySize);
        }
        this.addComponent(labelToAdd);
        this.updateComponents();
    };
    SubtitleRegionContainer.prototype.removeLabel = function (labelToRemove) {
        this.labelCount--;
        this.removeComponent(labelToRemove);
        this.updateComponents();
    };
    SubtitleRegionContainer.prototype.isEmpty = function () {
        return this.labelCount === 0;
    };
    return SubtitleRegionContainer;
}(container_1.Container));
exports.SubtitleRegionContainer = SubtitleRegionContainer;

},{"../dom":87,"../eventdispatcher":89,"../localization/i18n":94,"../vttutils":122,"./container":24,"./controlbar":25,"./label":33}],60:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleSelectBox = void 0;
var selectbox_1 = require("./selectbox");
var subtitleutils_1 = require("../subtitleutils");
var i18n_1 = require("../localization/i18n");
/**
 * A select box providing a selection between available subtitle and caption tracks.
 *
 * @category Components
 */
var SubtitleSelectBox = /** @class */ (function (_super) {
    __extends(SubtitleSelectBox, _super);
    function SubtitleSelectBox(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitleselectbox'],
            ariaLabel: i18n_1.i18n.getLocalizer('subtitle.select'),
        }, _this.config);
        return _this;
    }
    SubtitleSelectBox.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        new subtitleutils_1.SubtitleSwitchHandler(player, this, uimanager);
    };
    return SubtitleSelectBox;
}(selectbox_1.SelectBox));
exports.SubtitleSelectBox = SubtitleSelectBox;

},{"../localization/i18n":94,"../subtitleutils":115,"./selectbox":49}],61:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackgroundColorSelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different background colors.
 *
 * @category Components
 */
var BackgroundColorSelectBox = /** @class */ (function (_super) {
    __extends(BackgroundColorSelectBox, _super);
    function BackgroundColorSelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingsbackgroundcolorselectbox'],
        }, _this.config);
        return _this;
    }
    BackgroundColorSelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('white', i18n_1.i18n.getLocalizer('colors.white'));
        this.addItem('black', i18n_1.i18n.getLocalizer('colors.black'));
        this.addItem('red', i18n_1.i18n.getLocalizer('colors.red'));
        this.addItem('green', i18n_1.i18n.getLocalizer('colors.green'));
        this.addItem('blue', i18n_1.i18n.getLocalizer('colors.blue'));
        this.addItem('cyan', i18n_1.i18n.getLocalizer('colors.cyan'));
        this.addItem('yellow', i18n_1.i18n.getLocalizer('colors.yellow'));
        this.addItem('magenta', i18n_1.i18n.getLocalizer('colors.magenta'));
        var setColorAndOpacity = function () {
            if (_this.settingsManager.backgroundColor.isSet() && _this.settingsManager.backgroundOpacity.isSet()) {
                _this.toggleOverlayClass('bgcolor-' + _this.settingsManager.backgroundColor.value + _this.settingsManager.backgroundOpacity.value);
            }
            else {
                _this.toggleOverlayClass(null);
            }
        };
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.backgroundColor.value = key;
        });
        this.settingsManager.backgroundColor.onChanged.subscribe(function (sender, property) {
            // Color and opacity go together, so we need to...
            if (!_this.settingsManager.backgroundColor.isSet()) {
                // ... clear the opacity when the color is not set
                _this.settingsManager.backgroundOpacity.clear();
            }
            else if (!_this.settingsManager.backgroundOpacity.isSet()) {
                // ... set an opacity when the color is set
                _this.settingsManager.backgroundOpacity.value = '100';
            }
            _this.selectItem(property.value);
            setColorAndOpacity();
        });
        this.settingsManager.backgroundOpacity.onChanged.subscribe(function () {
            setColorAndOpacity();
        });
        // Load initial value
        if (this.settingsManager.backgroundColor.isSet()) {
            this.selectItem(this.settingsManager.backgroundColor.value);
        }
    };
    return BackgroundColorSelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.BackgroundColorSelectBox = BackgroundColorSelectBox;

},{"../../localization/i18n":94,"./subtitlesettingselectbox":68}],62:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackgroundOpacitySelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different background opacity.
 *
 * @category Components
 */
var BackgroundOpacitySelectBox = /** @class */ (function (_super) {
    __extends(BackgroundOpacitySelectBox, _super);
    function BackgroundOpacitySelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingsbackgroundopacityselectbox'],
        }, _this.config);
        return _this;
    }
    BackgroundOpacitySelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('100', i18n_1.i18n.getLocalizer('percent', { value: 100 }));
        this.addItem('75', i18n_1.i18n.getLocalizer('percent', { value: 75 }));
        this.addItem('50', i18n_1.i18n.getLocalizer('percent', { value: 50 }));
        this.addItem('25', i18n_1.i18n.getLocalizer('percent', { value: 25 }));
        this.addItem('0', i18n_1.i18n.getLocalizer('percent', { value: 0 }));
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.backgroundOpacity.value = key;
            // Color and opacity go together, so we need to...
            if (!_this.settingsManager.backgroundOpacity.isSet()) {
                // ... clear the color when the opacity is not set
                _this.settingsManager.backgroundColor.clear();
            }
            else if (!_this.settingsManager.backgroundColor.isSet()) {
                // ... set a color when the opacity is set
                _this.settingsManager.backgroundColor.value = 'black';
            }
        });
        // Update selected item when value is set from somewhere else
        this.settingsManager.backgroundOpacity.onChanged.subscribe(function (sender, property) {
            _this.selectItem(property.value);
        });
        // Load initial value
        if (this.settingsManager.backgroundOpacity.isSet()) {
            this.selectItem(this.settingsManager.backgroundOpacity.value);
        }
    };
    return BackgroundOpacitySelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.BackgroundOpacitySelectBox = BackgroundOpacitySelectBox;

},{"../../localization/i18n":94,"./subtitlesettingselectbox":68}],63:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CharacterEdgeSelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different character edge.
 *
 * @category Components
 */
var CharacterEdgeSelectBox = /** @class */ (function (_super) {
    __extends(CharacterEdgeSelectBox, _super);
    function CharacterEdgeSelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingscharacteredgeselectbox'],
        }, _this.config);
        return _this;
    }
    CharacterEdgeSelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('raised', i18n_1.i18n.getLocalizer('settings.subtitles.characterEdge.raised'));
        this.addItem('depressed', i18n_1.i18n.getLocalizer('settings.subtitles.characterEdge.depressed'));
        this.addItem('uniform', i18n_1.i18n.getLocalizer('settings.subtitles.characterEdge.uniform'));
        this.addItem('dropshadowed', i18n_1.i18n.getLocalizer('settings.subtitles.characterEdge.dropshadowed'));
        this.settingsManager.characterEdge.onChanged.subscribe(function (sender, property) {
            if (property.isSet()) {
                _this.toggleOverlayClass('characteredge-' + property.value);
            }
            else {
                _this.toggleOverlayClass(null);
            }
            // Select the item in case the property was set from outside
            _this.selectItem(property.value);
        });
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.characterEdge.value = key;
        });
        // Load initial value
        if (this.settingsManager.characterEdge.isSet()) {
            this.selectItem(this.settingsManager.characterEdge.value);
        }
    };
    return CharacterEdgeSelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.CharacterEdgeSelectBox = CharacterEdgeSelectBox;

},{"../../localization/i18n":94,"./subtitlesettingselectbox":68}],64:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FontColorSelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different font colors.
 *
 * @category Components
 */
var FontColorSelectBox = /** @class */ (function (_super) {
    __extends(FontColorSelectBox, _super);
    function FontColorSelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingsfontcolorselectbox'],
        }, _this.config);
        return _this;
    }
    FontColorSelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('white', i18n_1.i18n.getLocalizer('colors.white'));
        this.addItem('black', i18n_1.i18n.getLocalizer('colors.black'));
        this.addItem('red', i18n_1.i18n.getLocalizer('colors.red'));
        this.addItem('green', i18n_1.i18n.getLocalizer('colors.green'));
        this.addItem('blue', i18n_1.i18n.getLocalizer('colors.blue'));
        this.addItem('cyan', i18n_1.i18n.getLocalizer('colors.cyan'));
        this.addItem('yellow', i18n_1.i18n.getLocalizer('colors.yellow'));
        this.addItem('magenta', i18n_1.i18n.getLocalizer('colors.magenta'));
        var setColorAndOpacity = function () {
            if (_this.settingsManager.fontColor.isSet() && _this.settingsManager.fontOpacity.isSet()) {
                _this.toggleOverlayClass('fontcolor-' + _this.settingsManager.fontColor.value + _this.settingsManager.fontOpacity.value);
            }
            else {
                _this.toggleOverlayClass(null);
            }
        };
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.fontColor.value = key;
        });
        this.settingsManager.fontColor.onChanged.subscribe(function (sender, property) {
            // Color and opacity go together, so we need to...
            if (!_this.settingsManager.fontColor.isSet()) {
                // ... clear the opacity when the color is not set
                _this.settingsManager.fontOpacity.clear();
            }
            else if (!_this.settingsManager.fontOpacity.isSet()) {
                // ... set an opacity when the color is set
                _this.settingsManager.fontOpacity.value = '100';
            }
            _this.selectItem(property.value);
            setColorAndOpacity();
        });
        this.settingsManager.fontOpacity.onChanged.subscribe(function () {
            setColorAndOpacity();
        });
        // Load initial value
        if (this.settingsManager.fontColor.isSet()) {
            this.selectItem(this.settingsManager.fontColor.value);
        }
    };
    return FontColorSelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.FontColorSelectBox = FontColorSelectBox;

},{"../../localization/i18n":94,"./subtitlesettingselectbox":68}],65:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FontFamilySelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different font family.
 *
 * @category Components
 */
var FontFamilySelectBox = /** @class */ (function (_super) {
    __extends(FontFamilySelectBox, _super);
    function FontFamilySelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingsfontfamilyselectbox'],
        }, _this.config);
        return _this;
    }
    FontFamilySelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('monospacedserif', i18n_1.i18n.getLocalizer('settings.subtitles.font.family.monospacedserif'));
        this.addItem('proportionalserif', i18n_1.i18n.getLocalizer('settings.subtitles.font.family.proportionalserif'));
        this.addItem('monospacedsansserif', i18n_1.i18n.getLocalizer('settings.subtitles.font.family.monospacedsansserif'));
        this.addItem('proportionalsansserif', i18n_1.i18n.getLocalizer('settings.subtitles.font.family.proportionalsansserif'));
        this.addItem('casual', i18n_1.i18n.getLocalizer('settings.subtitles.font.family.casual'));
        this.addItem('cursive', i18n_1.i18n.getLocalizer('settings.subtitles.font.family.cursive'));
        this.addItem('smallcapital', i18n_1.i18n.getLocalizer('settings.subtitles.font.family.smallcapital'));
        this.settingsManager.fontFamily.onChanged.subscribe(function (sender, property) {
            if (property.isSet()) {
                _this.toggleOverlayClass('fontfamily-' + property.value);
            }
            else {
                _this.toggleOverlayClass(null);
            }
            // Select the item in case the property was set from outside
            _this.selectItem(property.value);
        });
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.fontFamily.value = key;
        });
        // Load initial value
        if (this.settingsManager.fontFamily.isSet()) {
            this.selectItem(this.settingsManager.fontFamily.value);
        }
    };
    return FontFamilySelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.FontFamilySelectBox = FontFamilySelectBox;

},{"../../localization/i18n":94,"./subtitlesettingselectbox":68}],66:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FontOpacitySelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different font colors.
 *
 * @category Components
 */
var FontOpacitySelectBox = /** @class */ (function (_super) {
    __extends(FontOpacitySelectBox, _super);
    function FontOpacitySelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingsfontopacityselectbox'],
        }, _this.config);
        return _this;
    }
    FontOpacitySelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('100', i18n_1.i18n.getLocalizer('percent', { value: 100 }));
        this.addItem('75', i18n_1.i18n.getLocalizer('percent', { value: 75 }));
        this.addItem('50', i18n_1.i18n.getLocalizer('percent', { value: 50 }));
        this.addItem('25', i18n_1.i18n.getLocalizer('percent', { value: 25 }));
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.fontOpacity.value = key;
            // Color and opacity go together, so we need to...
            if (!_this.settingsManager.fontOpacity.isSet()) {
                // ... clear the color when the opacity is not set
                _this.settingsManager.fontColor.clear();
            }
            else if (!_this.settingsManager.fontColor.isSet()) {
                // ... set a color when the opacity is set
                _this.settingsManager.fontColor.value = 'white';
            }
        });
        // Update selected item when value is set from somewhere else
        this.settingsManager.fontOpacity.onChanged.subscribe(function (sender, property) {
            _this.selectItem(property.value);
        });
        // Load initial value
        if (this.settingsManager.fontOpacity.isSet()) {
            this.selectItem(this.settingsManager.fontOpacity.value);
        }
    };
    return FontOpacitySelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.FontOpacitySelectBox = FontOpacitySelectBox;

},{"../../localization/i18n":94,"./subtitlesettingselectbox":68}],67:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FontSizeSelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different font colors.
 *
 * @category Components
 */
var FontSizeSelectBox = /** @class */ (function (_super) {
    __extends(FontSizeSelectBox, _super);
    function FontSizeSelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingsfontsizeselectbox'],
        }, _this.config);
        return _this;
    }
    FontSizeSelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('50', i18n_1.i18n.getLocalizer('percent', { value: 50 }));
        this.addItem('75', i18n_1.i18n.getLocalizer('percent', { value: 75 }));
        this.addItem('100', i18n_1.i18n.getLocalizer('percent', { value: 100 }));
        this.addItem('150', i18n_1.i18n.getLocalizer('percent', { value: 150 }));
        this.addItem('200', i18n_1.i18n.getLocalizer('percent', { value: 200 }));
        this.addItem('300', i18n_1.i18n.getLocalizer('percent', { value: 300 }));
        this.addItem('400', i18n_1.i18n.getLocalizer('percent', { value: 400 }));
        this.settingsManager.fontSize.onChanged.subscribe(function (sender, property) {
            if (property.isSet()) {
                _this.toggleOverlayClass('fontsize-' + property.value);
            }
            else {
                _this.toggleOverlayClass(null);
            }
            // Select the item in case the property was set from outside
            _this.selectItem(property.value);
        });
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.fontSize.value = key;
        });
        // Load initial value
        if (this.settingsManager.fontSize.isSet()) {
            this.selectItem(this.settingsManager.fontSize.value);
        }
    };
    return FontSizeSelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.FontSizeSelectBox = FontSizeSelectBox;

},{"../../localization/i18n":94,"./subtitlesettingselectbox":68}],68:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleSettingSelectBox = void 0;
var selectbox_1 = require("../selectbox");
/**
 * Base class for all subtitles settings select box
 *
 * @category Components
 **/
var SubtitleSettingSelectBox = /** @class */ (function (_super) {
    __extends(SubtitleSettingSelectBox, _super);
    function SubtitleSettingSelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.overlay = config.overlay;
        return _this;
    }
    /**
     * Removes a previously set class and adds the passed in class.
     * @param cssClass The new class to replace the previous class with or null to just remove the previous class
     */
    SubtitleSettingSelectBox.prototype.toggleOverlayClass = function (cssClass) {
        // Remove previous class if existing
        if (this.currentCssClass) {
            this.overlay.getDomElement().removeClass(this.currentCssClass);
            this.currentCssClass = null;
        }
        // Add new class if specified. If the new class is null, we don't add anything.
        if (cssClass) {
            this.currentCssClass = this.prefixCss(cssClass);
            this.overlay.getDomElement().addClass(this.currentCssClass);
        }
    };
    SubtitleSettingSelectBox.prototype.configure = function (player, uimanager) {
        this.settingsManager = uimanager.getSubtitleSettingsManager();
    };
    return SubtitleSettingSelectBox;
}(selectbox_1.SelectBox));
exports.SubtitleSettingSelectBox = SubtitleSettingSelectBox;

},{"../selectbox":49}],69:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleSettingsLabel = void 0;
var container_1 = require("../container");
var dom_1 = require("../../dom");
var i18n_1 = require("../../localization/i18n");
/**
 * @category Components
 */
var SubtitleSettingsLabel = /** @class */ (function (_super) {
    __extends(SubtitleSettingsLabel, _super);
    function SubtitleSettingsLabel(config) {
        var _this = _super.call(this, config) || this;
        _this.opener = config.opener;
        _this.text = config.text;
        _this.for = config.for;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-label',
            components: [
                _this.opener,
            ],
        }, _this.config);
        return _this;
    }
    SubtitleSettingsLabel.prototype.toDomElement = function () {
        var labelElement = new dom_1.DOM('label', {
            'id': this.config.id,
            'class': this.getCssClasses(),
            'for': this.for,
        }, this).append(new dom_1.DOM('span', {}).html(i18n_1.i18n.performLocalization(this.text)), this.opener.getDomElement());
        return labelElement;
    };
    return SubtitleSettingsLabel;
}(container_1.Container));
exports.SubtitleSettingsLabel = SubtitleSettingsLabel;

},{"../../dom":87,"../../localization/i18n":94,"../container":24}],70:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleSettingsProperty = exports.SubtitleSettingsManager = void 0;
var storageutils_1 = require("../../storageutils");
var component_1 = require("../component");
var eventdispatcher_1 = require("../../eventdispatcher");
/**
 * @category Utils
 */
var SubtitleSettingsManager = /** @class */ (function () {
    function SubtitleSettingsManager() {
        this._properties = {
            fontColor: new SubtitleSettingsProperty(this),
            fontOpacity: new SubtitleSettingsProperty(this),
            fontFamily: new SubtitleSettingsProperty(this),
            fontSize: new SubtitleSettingsProperty(this),
            characterEdge: new SubtitleSettingsProperty(this),
            backgroundColor: new SubtitleSettingsProperty(this),
            backgroundOpacity: new SubtitleSettingsProperty(this),
            windowColor: new SubtitleSettingsProperty(this),
            windowOpacity: new SubtitleSettingsProperty(this),
        };
        this.userSettings = {};
        this.localStorageKey =
            DummyComponent.instance().prefixCss('subtitlesettings');
    }
    SubtitleSettingsManager.prototype.reset = function () {
        for (var propertyName in this._properties) {
            this._properties[propertyName].clear();
        }
    };
    Object.defineProperty(SubtitleSettingsManager.prototype, "fontColor", {
        get: function () {
            return this._properties.fontColor;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "fontOpacity", {
        get: function () {
            return this._properties.fontOpacity;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "fontFamily", {
        get: function () {
            return this._properties.fontFamily;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "fontSize", {
        get: function () {
            return this._properties.fontSize;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "characterEdge", {
        get: function () {
            return this._properties.characterEdge;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "backgroundColor", {
        get: function () {
            return this._properties.backgroundColor;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "backgroundOpacity", {
        get: function () {
            return this._properties.backgroundOpacity;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "windowColor", {
        get: function () {
            return this._properties.windowColor;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SubtitleSettingsManager.prototype, "windowOpacity", {
        get: function () {
            return this._properties.windowOpacity;
        },
        enumerable: false,
        configurable: true
    });
    SubtitleSettingsManager.prototype.initialize = function () {
        var _this = this;
        var _loop_1 = function (propertyName) {
            this_1._properties[propertyName].onChanged.subscribe(function (sender, property) {
                if (property.isSet()) {
                    _this.userSettings[propertyName] = property.value;
                }
                else {
                    // Delete the property from the settings object if unset to avoid serialization of null values
                    delete _this.userSettings[propertyName];
                }
                // Save the settings object when a property has changed
                _this.save();
            });
        };
        var this_1 = this;
        for (var propertyName in this._properties) {
            _loop_1(propertyName);
        }
        this.load();
    };
    /**
     * Saves the settings to local storage.
     */
    SubtitleSettingsManager.prototype.save = function () {
        storageutils_1.StorageUtils.setObject(this.localStorageKey, this.userSettings);
    };
    /**
     * Loads the settings from local storage
     */
    SubtitleSettingsManager.prototype.load = function () {
        this.userSettings =
            storageutils_1.StorageUtils.getObject(this.localStorageKey) || {};
        // Apply the loaded settings
        for (var property in this.userSettings) {
            this._properties[property].value = this.userSettings[property];
        }
    };
    return SubtitleSettingsManager;
}());
exports.SubtitleSettingsManager = SubtitleSettingsManager;
/**
 * A dummy component whose sole purpose is to expose the {@link #prefixCss} method to the
 * {@link SubtitleSettingsManager}.
 */
var DummyComponent = /** @class */ (function (_super) {
    __extends(DummyComponent, _super);
    function DummyComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DummyComponent.instance = function () {
        if (!DummyComponent._instance) {
            DummyComponent._instance = new DummyComponent();
        }
        return DummyComponent._instance;
    };
    DummyComponent.prototype.prefixCss = function (cssClassOrId) {
        return _super.prototype.prefixCss.call(this, cssClassOrId);
    };
    return DummyComponent;
}(component_1.Component));
var SubtitleSettingsProperty = /** @class */ (function () {
    function SubtitleSettingsProperty(manager) {
        this._manager = manager;
        this._onChanged = new eventdispatcher_1.EventDispatcher();
    }
    SubtitleSettingsProperty.prototype.isSet = function () {
        return this._value != null;
    };
    SubtitleSettingsProperty.prototype.clear = function () {
        this._value = null;
        this.onChangedEvent(null);
    };
    Object.defineProperty(SubtitleSettingsProperty.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            if (typeof value === 'string' && value === 'null') {
                value = null;
            }
            this._value = value;
            this.onChangedEvent(value);
        },
        enumerable: false,
        configurable: true
    });
    SubtitleSettingsProperty.prototype.onChangedEvent = function (value) {
        this._onChanged.dispatch(this._manager, this);
    };
    Object.defineProperty(SubtitleSettingsProperty.prototype, "onChanged", {
        get: function () {
            return this._onChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    return SubtitleSettingsProperty;
}());
exports.SubtitleSettingsProperty = SubtitleSettingsProperty;

},{"../../eventdispatcher":89,"../../storageutils":113,"../component":23}],71:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleSettingsPanelPage = void 0;
var settingspanelpage_1 = require("../settingspanelpage");
var fontsizeselectbox_1 = require("./fontsizeselectbox");
var fontfamilyselectbox_1 = require("./fontfamilyselectbox");
var fontcolorselectbox_1 = require("./fontcolorselectbox");
var fontopacityselectbox_1 = require("./fontopacityselectbox");
var characteredgeselectbox_1 = require("./characteredgeselectbox");
var backgroundcolorselectbox_1 = require("./backgroundcolorselectbox");
var backgroundopacityselectbox_1 = require("./backgroundopacityselectbox");
var windowcolorselectbox_1 = require("./windowcolorselectbox");
var windowopacityselectbox_1 = require("./windowopacityselectbox");
var subtitlesettingsresetbutton_1 = require("./subtitlesettingsresetbutton");
var settingspanelpagebackbutton_1 = require("../settingspanelpagebackbutton");
var settingspanelitem_1 = require("../settingspanelitem");
var i18n_1 = require("../../localization/i18n");
/**
 * @category Components
 */
var SubtitleSettingsPanelPage = /** @class */ (function (_super) {
    __extends(SubtitleSettingsPanelPage, _super);
    function SubtitleSettingsPanelPage(config) {
        var _this = _super.call(this, config) || this;
        _this.overlay = config.overlay;
        _this.settingsPanel = config.settingsPanel;
        _this.config = _this.mergeConfig(config, {
            components: [
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.font.size'), new fontsizeselectbox_1.FontSizeSelectBox({
                    overlay: _this.overlay,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.font.family'), new fontfamilyselectbox_1.FontFamilySelectBox({
                    overlay: _this.overlay,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.font.color'), new fontcolorselectbox_1.FontColorSelectBox({
                    overlay: _this.overlay,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.font.opacity'), new fontopacityselectbox_1.FontOpacitySelectBox({
                    overlay: _this.overlay,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.characterEdge'), new characteredgeselectbox_1.CharacterEdgeSelectBox({
                    overlay: _this.overlay,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.background.color'), new backgroundcolorselectbox_1.BackgroundColorSelectBox({
                    overlay: _this.overlay,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.background.opacity'), new backgroundopacityselectbox_1.BackgroundOpacitySelectBox({
                    overlay: _this.overlay,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.window.color'), new windowcolorselectbox_1.WindowColorSelectBox({
                    overlay: _this.overlay,
                })),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.subtitles.window.opacity'), new windowopacityselectbox_1.WindowOpacitySelectBox({
                    overlay: _this.overlay,
                })),
                new settingspanelitem_1.SettingsPanelItem(new settingspanelpagebackbutton_1.SettingsPanelPageBackButton({
                    container: _this.settingsPanel,
                    text: i18n_1.i18n.getLocalizer('back'),
                }), new subtitlesettingsresetbutton_1.SubtitleSettingsResetButton({}), {
                    role: 'menubar',
                }),
            ],
        }, _this.config);
        return _this;
    }
    SubtitleSettingsPanelPage.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.onActive.subscribe(function () {
            _this.overlay.enablePreviewSubtitleLabel();
        });
        this.onInactive.subscribe(function () {
            _this.overlay.removePreviewSubtitleLabel();
        });
    };
    return SubtitleSettingsPanelPage;
}(settingspanelpage_1.SettingsPanelPage));
exports.SubtitleSettingsPanelPage = SubtitleSettingsPanelPage;

},{"../../localization/i18n":94,"../settingspanelitem":51,"../settingspanelpage":52,"../settingspanelpagebackbutton":53,"./backgroundcolorselectbox":61,"./backgroundopacityselectbox":62,"./characteredgeselectbox":63,"./fontcolorselectbox":64,"./fontfamilyselectbox":65,"./fontopacityselectbox":66,"./fontsizeselectbox":67,"./subtitlesettingsresetbutton":72,"./windowcolorselectbox":73,"./windowopacityselectbox":74}],72:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleSettingsResetButton = void 0;
var button_1 = require("../button");
var i18n_1 = require("../../localization/i18n");
/**
 * A button that resets all subtitle settings to their defaults.
 *
 * @category Buttons
 */
var SubtitleSettingsResetButton = /** @class */ (function (_super) {
    __extends(SubtitleSettingsResetButton, _super);
    function SubtitleSettingsResetButton(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-subtitlesettingsresetbutton',
            text: i18n_1.i18n.getLocalizer('reset'),
        }, _this.config);
        return _this;
    }
    SubtitleSettingsResetButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.settingsManager = uimanager.getSubtitleSettingsManager();
        this.onClick.subscribe(function () {
            _this.settingsManager.reset();
        });
    };
    return SubtitleSettingsResetButton;
}(button_1.Button));
exports.SubtitleSettingsResetButton = SubtitleSettingsResetButton;

},{"../../localization/i18n":94,"../button":17}],73:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowColorSelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different background colors.
 *
 * @category Components
 */
var WindowColorSelectBox = /** @class */ (function (_super) {
    __extends(WindowColorSelectBox, _super);
    function WindowColorSelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingswindowcolorselectbox'],
        }, _this.config);
        return _this;
    }
    WindowColorSelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('white', i18n_1.i18n.getLocalizer('colors.white'));
        this.addItem('black', i18n_1.i18n.getLocalizer('colors.black'));
        this.addItem('red', i18n_1.i18n.getLocalizer('colors.red'));
        this.addItem('green', i18n_1.i18n.getLocalizer('colors.green'));
        this.addItem('blue', i18n_1.i18n.getLocalizer('colors.blue'));
        this.addItem('cyan', i18n_1.i18n.getLocalizer('colors.cyan'));
        this.addItem('yellow', i18n_1.i18n.getLocalizer('colors.yellow'));
        this.addItem('magenta', i18n_1.i18n.getLocalizer('colors.magenta'));
        var setColorAndOpacity = function () {
            if (_this.settingsManager.windowColor.isSet() && _this.settingsManager.windowOpacity.isSet()) {
                _this.toggleOverlayClass('windowcolor-' + _this.settingsManager.windowColor.value + _this.settingsManager.windowOpacity.value);
            }
            else {
                _this.toggleOverlayClass(null);
            }
        };
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.windowColor.value = key;
        });
        this.settingsManager.windowColor.onChanged.subscribe(function (sender, property) {
            // Color and opacity go together, so we need to...
            if (!_this.settingsManager.windowColor.isSet()) {
                // ... clear the opacity when the color is not set
                _this.settingsManager.windowOpacity.clear();
            }
            else if (!_this.settingsManager.windowOpacity.isSet()) {
                // ... set an opacity when the color is set
                _this.settingsManager.windowOpacity.value = '100';
            }
            _this.selectItem(property.value);
            setColorAndOpacity();
        });
        this.settingsManager.windowOpacity.onChanged.subscribe(function () {
            setColorAndOpacity();
        });
        // Load initial value
        if (this.settingsManager.windowColor.isSet()) {
            this.selectItem(this.settingsManager.windowColor.value);
        }
    };
    return WindowColorSelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.WindowColorSelectBox = WindowColorSelectBox;

},{"../../localization/i18n":94,"./subtitlesettingselectbox":68}],74:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowOpacitySelectBox = void 0;
var subtitlesettingselectbox_1 = require("./subtitlesettingselectbox");
var i18n_1 = require("../../localization/i18n");
/**
 * A select box providing a selection of different background opacity.
 *
 * @category Components
 */
var WindowOpacitySelectBox = /** @class */ (function (_super) {
    __extends(WindowOpacitySelectBox, _super);
    function WindowOpacitySelectBox(config) {
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-subtitlesettingswindowopacityselectbox'],
        }, _this.config);
        return _this;
    }
    WindowOpacitySelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        this.addItem(null, i18n_1.i18n.getLocalizer('default'));
        this.addItem('100', i18n_1.i18n.getLocalizer('percent', { value: 100 }));
        this.addItem('75', i18n_1.i18n.getLocalizer('percent', { value: 75 }));
        this.addItem('50', i18n_1.i18n.getLocalizer('percent', { value: 50 }));
        this.addItem('25', i18n_1.i18n.getLocalizer('percent', { value: 25 }));
        this.addItem('0', i18n_1.i18n.getLocalizer('percent', { value: 0 }));
        this.onItemSelected.subscribe(function (sender, key) {
            _this.settingsManager.windowOpacity.value = key;
            // Color and opacity go together, so we need to...
            if (!_this.settingsManager.windowOpacity.isSet()) {
                // ... clear the color when the opacity is not set
                _this.settingsManager.windowColor.clear();
            }
            else if (!_this.settingsManager.windowColor.isSet()) {
                // ... set a color when the opacity is set
                _this.settingsManager.windowColor.value = 'black';
            }
        });
        // Update selected item when value is set from somewhere else
        this.settingsManager.windowOpacity.onChanged.subscribe(function (sender, property) {
            _this.selectItem(property.value);
        });
        // Load initial value
        if (this.settingsManager.windowOpacity.isSet()) {
            this.selectItem(this.settingsManager.windowOpacity.value);
        }
    };
    return WindowOpacitySelectBox;
}(subtitlesettingselectbox_1.SubtitleSettingSelectBox));
exports.WindowOpacitySelectBox = WindowOpacitySelectBox;

},{"../../localization/i18n":94,"./subtitlesettingselectbox":68}],75:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimelineMarkersHandler = void 0;
var dom_1 = require("../dom");
var playerutils_1 = require("../playerutils");
var timeout_1 = require("../timeout");
var TimelineMarkersHandler = /** @class */ (function () {
    function TimelineMarkersHandler(config, getSeekBarWidth, markersContainer) {
        this.config = config;
        this.getSeekBarWidth = getSeekBarWidth;
        this.markersContainer = markersContainer;
        this.timelineMarkers = [];
    }
    TimelineMarkersHandler.prototype.initialize = function (player, uimanager) {
        this.player = player;
        this.uimanager = uimanager;
        this.configureMarkers();
    };
    TimelineMarkersHandler.prototype.configureMarkers = function () {
        var _this = this;
        // Remove markers when unloaded
        this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, function () { return _this.clearMarkers(); });
        this.player.on(this.player.exports.PlayerEvent.AdBreakStarted, function () { return _this.clearMarkers(); });
        this.player.on(this.player.exports.PlayerEvent.AdBreakFinished, function () { return _this.updateMarkers(); });
        // Update markers when the size of the seekbar changes
        this.player.on(this.player.exports.PlayerEvent.PlayerResized, function () { return _this.updateMarkersDOM(); });
        this.player.on(this.player.exports.PlayerEvent.SourceLoaded, function () {
            if (_this.player.isLive()) {
                // Update marker position as timeshift range changes
                _this.player.on(_this.player.exports.PlayerEvent.TimeChanged, function () { return _this.updateMarkers(); });
                // Update marker postion when paused as timeshift range changes
                _this.configureLivePausedTimeshiftUpdater(function () { return _this.updateMarkers(); });
            }
        });
        this.uimanager.getConfig().events.onUpdated.subscribe(function () { return _this.updateMarkers(); });
        this.uimanager.onRelease.subscribe(function () { return _this.uimanager.getConfig().events.onUpdated.unsubscribe(function () { return _this.updateMarkers(); }); });
        // Init markers at startup
        this.updateMarkers();
    };
    TimelineMarkersHandler.prototype.getMarkerAtPosition = function (percentage) {
        var snappingRange = this.config.snappingRange;
        var matchingMarker = this.timelineMarkers.find(function (marker) {
            var hasDuration = marker.duration > 0;
            // Handle interval markers
            var intervalMarkerMatch = hasDuration &&
                percentage >= marker.position - snappingRange &&
                percentage <= marker.position + marker.duration + snappingRange;
            // Handle position markers
            var positionMarkerMatch = percentage >= marker.position - snappingRange &&
                percentage <= marker.position + snappingRange;
            return intervalMarkerMatch || positionMarkerMatch;
        });
        return matchingMarker || null;
    };
    TimelineMarkersHandler.prototype.clearMarkers = function () {
        this.timelineMarkers = [];
        this.markersContainer.empty();
    };
    TimelineMarkersHandler.prototype.removeMarkerFromConfig = function (marker) {
        this.uimanager.getConfig().metadata.markers = this.uimanager.getConfig().metadata.markers.filter(function (_marker) { return marker !== _marker; });
    };
    TimelineMarkersHandler.prototype.filterRemovedMarkers = function () {
        var _this = this;
        this.timelineMarkers = this.timelineMarkers.filter(function (seekbarMarker) {
            var matchingMarker = _this.uimanager.getConfig().metadata.markers.find(function (_marker) { return seekbarMarker.marker === _marker; });
            if (!matchingMarker) {
                _this.removeMarkerFromDOM(seekbarMarker);
            }
            return matchingMarker;
        });
    };
    TimelineMarkersHandler.prototype.removeMarkerFromDOM = function (marker) {
        if (marker.element) {
            marker.element.remove();
        }
    };
    TimelineMarkersHandler.prototype.updateMarkers = function () {
        var _this = this;
        if (!shouldProcessMarkers(this.player, this.uimanager)) {
            this.clearMarkers();
            return;
        }
        this.filterRemovedMarkers();
        this.uimanager.getConfig().metadata.markers.forEach(function (marker) {
            var _a = getMarkerPositions(_this.player, marker), markerPosition = _a.markerPosition, markerDuration = _a.markerDuration;
            if (shouldRemoveMarker(markerPosition, markerDuration)) {
                _this.removeMarkerFromConfig(marker);
            }
            else if (markerPosition <= 100) {
                var matchingMarker = _this.timelineMarkers.find(function (seekbarMarker) { return seekbarMarker.marker === marker; });
                if (matchingMarker) {
                    matchingMarker.position = markerPosition;
                    matchingMarker.duration = markerDuration;
                    _this.updateMarkerDOM(matchingMarker);
                }
                else {
                    var newMarker = { marker: marker, position: markerPosition, duration: markerDuration };
                    _this.timelineMarkers.push(newMarker);
                    _this.createMarkerDOM(newMarker);
                }
            }
        });
    };
    TimelineMarkersHandler.prototype.getMarkerCssProperties = function (marker) {
        var seekBarWidthPx = this.getSeekBarWidth();
        var positionInPx = (seekBarWidthPx / 100) * (marker.position < 0 ? 0 : marker.position);
        var cssProperties = {
            'transform': "translateX(".concat(positionInPx, "px)"),
        };
        if (marker.duration > 0) {
            var markerWidthPx = Math.round(seekBarWidthPx / 100 * marker.duration);
            cssProperties['width'] = "".concat(markerWidthPx, "px");
        }
        return cssProperties;
    };
    TimelineMarkersHandler.prototype.updateMarkerDOM = function (marker) {
        marker.element.css(this.getMarkerCssProperties(marker));
    };
    TimelineMarkersHandler.prototype.createMarkerDOM = function (marker) {
        var _this = this;
        var markerClasses = ['seekbar-marker'].concat(marker.marker.cssClasses || [])
            .map(function (cssClass) { return _this.prefixCss(cssClass); });
        var markerElement = new dom_1.DOM('div', {
            'class': markerClasses.join(' '),
            'data-marker-time': String(marker.marker.time),
            'data-marker-title': String(marker.marker.title),
        }).css(this.getMarkerCssProperties(marker));
        if (marker.marker.imageUrl) {
            var removeImage = function () {
                imageElement_1.remove();
            };
            var imageElement_1 = new dom_1.DOM('img', {
                'class': this.prefixCss('seekbar-marker-image'),
                'src': marker.marker.imageUrl,
            }).on('error', removeImage);
            markerElement.append(imageElement_1);
        }
        marker.element = markerElement;
        this.markersContainer.append(markerElement);
    };
    TimelineMarkersHandler.prototype.updateMarkersDOM = function () {
        var _this = this;
        this.timelineMarkers.forEach(function (marker) {
            if (marker.element) {
                _this.updateMarkerDOM(marker);
            }
            else {
                _this.createMarkerDOM(marker);
            }
        });
    };
    TimelineMarkersHandler.prototype.configureLivePausedTimeshiftUpdater = function (handler) {
        var _this = this;
        // Regularly update the marker position while the timeout is active
        this.pausedTimeshiftUpdater = new timeout_1.Timeout(1000, handler, true);
        this.player.on(this.player.exports.PlayerEvent.Paused, function () {
            if (_this.player.isLive() && _this.player.getMaxTimeShift() < 0) {
                _this.pausedTimeshiftUpdater.start();
            }
        });
        // Stop updater when playback continues (no matter if the updater was started before)
        this.player.on(this.player.exports.PlayerEvent.Play, function () { return _this.pausedTimeshiftUpdater.clear(); });
        this.player.on(this.player.exports.PlayerEvent.Destroy, function () { return _this.pausedTimeshiftUpdater.clear(); });
    };
    TimelineMarkersHandler.prototype.prefixCss = function (cssClassOrId) {
        return this.config.cssPrefix + '-' + cssClassOrId;
    };
    return TimelineMarkersHandler;
}());
exports.TimelineMarkersHandler = TimelineMarkersHandler;
function getMarkerPositions(player, marker) {
    var duration = getDuration(player);
    var markerPosition = 100 / duration * getMarkerTime(marker, player, duration); // convert absolute time to percentage
    var markerDuration = 100 / duration * marker.duration;
    if (markerPosition < 0 && !isNaN(markerDuration)) {
        // Shrink marker duration for on live streams as they reach end
        markerDuration = markerDuration + markerPosition;
    }
    if (100 - markerPosition < markerDuration) {
        // Shrink marker if it overflows timeline
        markerDuration = 100 - markerPosition;
    }
    return { markerDuration: markerDuration, markerPosition: markerPosition };
}
function getMarkerTime(marker, player, duration) {
    if (!player.isLive()) {
        return marker.time;
    }
    return duration - (playerutils_1.PlayerUtils.getSeekableRangeRespectingLive(player).end - marker.time);
}
function getDuration(player) {
    if (!player.isLive()) {
        return player.getDuration();
    }
    var _a = playerutils_1.PlayerUtils.getSeekableRangeRespectingLive(player), start = _a.start, end = _a.end;
    return end - start;
}
function shouldRemoveMarker(markerPosition, markerDuration) {
    return (markerDuration < 0 || isNaN(markerDuration)) && markerPosition < 0;
}
function shouldProcessMarkers(player, uimanager) {
    // Don't generate timeline markers if we don't yet have a duration
    // The duration check is for buggy platforms where the duration is not available instantly (Chrome on Android 4.3)
    var validToProcess = player.getDuration() !== Infinity || player.isLive();
    var hasMarkers = uimanager.getConfig().metadata.markers.length > 0;
    return validToProcess && hasMarkers;
}

},{"../dom":87,"../playerutils":101,"../timeout":116}],76:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TitleBar = void 0;
var container_1 = require("./container");
var metadatalabel_1 = require("./metadatalabel");
/**
 * Displays a title bar containing a label with the title of the video.
 *
 * @category Components
 */
var TitleBar = /** @class */ (function (_super) {
    __extends(TitleBar, _super);
    function TitleBar(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-titlebar',
            hidden: true,
            components: [
                new metadatalabel_1.MetadataLabel({ content: metadatalabel_1.MetadataLabelContent.Title }),
                new metadatalabel_1.MetadataLabel({ content: metadatalabel_1.MetadataLabelContent.Description }),
            ],
            keepHiddenWithoutMetadata: false,
        }, _this.config);
        return _this;
    }
    TitleBar.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        var shouldBeShown = !this.isHidden();
        var hasMetadataText = true; // Flag to track if any metadata label contains text
        var checkMetadataTextAndUpdateVisibility = function () {
            hasMetadataText = false;
            // Iterate through metadata labels and check if at least one of them contains text
            for (var _i = 0, _a = _this.getComponents(); _i < _a.length; _i++) {
                var component = _a[_i];
                if (component instanceof metadatalabel_1.MetadataLabel) {
                    if (!component.isEmpty()) {
                        hasMetadataText = true;
                        break;
                    }
                }
            }
            if (_this.isShown()) {
                // Hide a visible titlebar if it does not contain any text and the hidden flag is set
                if (config.keepHiddenWithoutMetadata && !hasMetadataText) {
                    _this.hide();
                }
            }
            else if (shouldBeShown) {
                // Show a hidden titlebar if it should actually be shown
                _this.show();
            }
        };
        // Listen to text change events to update the hasMetadataText flag when the metadata dynamically changes
        for (var _i = 0, _a = this.getComponents(); _i < _a.length; _i++) {
            var component = _a[_i];
            if (component instanceof metadatalabel_1.MetadataLabel) {
                component.onTextChanged.subscribe(checkMetadataTextAndUpdateVisibility);
            }
        }
        uimanager.onControlsShow.subscribe(function () {
            shouldBeShown = true;
            if (!(config.keepHiddenWithoutMetadata && !hasMetadataText)) {
                _this.show();
            }
        });
        uimanager.onControlsHide.subscribe(function () {
            shouldBeShown = false;
            _this.hide();
        });
        // init
        checkMetadataTextAndUpdateVisibility();
    };
    return TitleBar;
}(container_1.Container));
exports.TitleBar = TitleBar;

},{"./container":24,"./metadatalabel":36}],77:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToggleButton = void 0;
var button_1 = require("./button");
var eventdispatcher_1 = require("../eventdispatcher");
/**
 * A button that can be toggled between 'on' and 'off' states.
 *
 * @category Components
 */
var ToggleButton = /** @class */ (function (_super) {
    __extends(ToggleButton, _super);
    function ToggleButton(config) {
        var _this = _super.call(this, config) || this;
        _this.toggleButtonEvents = {
            onToggle: new eventdispatcher_1.EventDispatcher(),
            onToggleOn: new eventdispatcher_1.EventDispatcher(),
            onToggleOff: new eventdispatcher_1.EventDispatcher(),
        };
        var defaultConfig = {
            cssClass: 'ui-togglebutton',
            onClass: 'on',
            offClass: 'off',
        };
        if (config.onAriaLabel) {
            config.ariaLabel = config.onAriaLabel;
        }
        _this.config = _this.mergeConfig(config, defaultConfig, _this.config);
        return _this;
    }
    ToggleButton.prototype.configure = function (player, uimanager) {
        _super.prototype.configure.call(this, player, uimanager);
        var config = this.getConfig();
        this.getDomElement().addClass(this.prefixCss(config.offClass));
    };
    /**
     * Toggles the button to the 'on' state.
     */
    ToggleButton.prototype.on = function () {
        if (this.isOff()) {
            var config = this.getConfig();
            this.onState = true;
            this.getDomElement().removeClass(this.prefixCss(config.offClass));
            this.getDomElement().addClass(this.prefixCss(config.onClass));
            this.onToggleEvent();
            this.onToggleOnEvent();
            this.setAriaAttr('pressed', 'true');
            if (this.config.onAriaLabel) {
                this.setAriaLabel(this.config.onAriaLabel);
            }
        }
    };
    /**
     * Toggles the button to the 'off' state.
     */
    ToggleButton.prototype.off = function () {
        if (this.isOn()) {
            var config = this.getConfig();
            this.onState = false;
            this.getDomElement().removeClass(this.prefixCss(config.onClass));
            this.getDomElement().addClass(this.prefixCss(config.offClass));
            this.onToggleEvent();
            this.onToggleOffEvent();
            this.setAriaAttr('pressed', 'false');
            if (this.config.offAriaLabel) {
                this.setAriaLabel(this.config.offAriaLabel);
            }
        }
    };
    /**
     * Toggle the button 'on' if it is 'off', or 'off' if it is 'on'.
     */
    ToggleButton.prototype.toggle = function () {
        if (this.isOn()) {
            this.off();
        }
        else {
            this.on();
        }
    };
    /**
     * Checks if the toggle button is in the 'on' state.
     * @returns {boolean} true if button is 'on', false if 'off'
     */
    ToggleButton.prototype.isOn = function () {
        return this.onState;
    };
    /**
     * Checks if the toggle button is in the 'off' state.
     * @returns {boolean} true if button is 'off', false if 'on'
     */
    ToggleButton.prototype.isOff = function () {
        return !this.isOn();
    };
    ToggleButton.prototype.onClickEvent = function () {
        _super.prototype.onClickEvent.call(this);
        // Fire the toggle event together with the click event
        // (they are technically the same, only the semantics are different)
        this.onToggleEvent();
    };
    ToggleButton.prototype.onToggleEvent = function () {
        this.toggleButtonEvents.onToggle.dispatch(this);
    };
    ToggleButton.prototype.onToggleOnEvent = function () {
        this.toggleButtonEvents.onToggleOn.dispatch(this);
    };
    ToggleButton.prototype.onToggleOffEvent = function () {
        this.toggleButtonEvents.onToggleOff.dispatch(this);
    };
    Object.defineProperty(ToggleButton.prototype, "onToggle", {
        /**
         * Gets the event that is fired when the button is toggled.
         * @returns {Event<ToggleButton<Config>, NoArgs>}
         */
        get: function () {
            return this.toggleButtonEvents.onToggle.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToggleButton.prototype, "onToggleOn", {
        /**
         * Gets the event that is fired when the button is toggled 'on'.
         * @returns {Event<ToggleButton<Config>, NoArgs>}
         */
        get: function () {
            return this.toggleButtonEvents.onToggleOn.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToggleButton.prototype, "onToggleOff", {
        /**
         * Gets the event that is fired when the button is toggled 'off'.
         * @returns {Event<ToggleButton<Config>, NoArgs>}
         */
        get: function () {
            return this.toggleButtonEvents.onToggleOff.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    return ToggleButton;
}(button_1.Button));
exports.ToggleButton = ToggleButton;

},{"../eventdispatcher":89,"./button":17}],78:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TvNoiseCanvas = void 0;
var component_1 = require("./component");
var dom_1 = require("../dom");
/**
 * Animated analog TV static noise.
 *
 * @category Components
 */
var TvNoiseCanvas = /** @class */ (function (_super) {
    __extends(TvNoiseCanvas, _super);
    function TvNoiseCanvas(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.canvasWidth = 160;
        _this.canvasHeight = 90;
        _this.interferenceHeight = 50;
        _this.lastFrameUpdate = 0;
        _this.frameInterval = 60;
        _this.useAnimationFrame = !!window.requestAnimationFrame;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-tvnoisecanvas',
        }, _this.config);
        return _this;
    }
    TvNoiseCanvas.prototype.toDomElement = function () {
        return this.canvas = new dom_1.DOM('canvas', { 'class': this.getCssClasses() }, this);
    };
    TvNoiseCanvas.prototype.start = function () {
        this.canvasElement = this.canvas.get(0);
        this.canvasContext = this.canvasElement.getContext('2d');
        this.noiseAnimationWindowPos = -this.canvasHeight;
        this.lastFrameUpdate = 0;
        this.canvasElement.width = this.canvasWidth;
        this.canvasElement.height = this.canvasHeight;
        this.renderFrame();
    };
    TvNoiseCanvas.prototype.stop = function () {
        if (this.useAnimationFrame) {
            cancelAnimationFrame(this.frameUpdateHandlerId);
        }
        else {
            clearTimeout(this.frameUpdateHandlerId);
        }
    };
    TvNoiseCanvas.prototype.renderFrame = function () {
        // This code has been copied from the player controls.js and simplified
        if (this.lastFrameUpdate + this.frameInterval > new Date().getTime()) {
            // It's too early to render the next frame
            this.scheduleNextRender();
            return;
        }
        var currentPixelOffset;
        var canvasWidth = this.canvasWidth;
        var canvasHeight = this.canvasHeight;
        // Create texture
        var noiseImage = this.canvasContext.createImageData(canvasWidth, canvasHeight);
        // Fill texture with noise
        for (var y = 0; y < canvasHeight; y++) {
            for (var x = 0; x < canvasWidth; x++) {
                currentPixelOffset = (canvasWidth * y * 4) + x * 4;
                noiseImage.data[currentPixelOffset] = Math.random() * 255;
                if (y < this.noiseAnimationWindowPos || y > this.noiseAnimationWindowPos + this.interferenceHeight) {
                    noiseImage.data[currentPixelOffset] *= 0.85;
                }
                noiseImage.data[currentPixelOffset + 1] = noiseImage.data[currentPixelOffset];
                noiseImage.data[currentPixelOffset + 2] = noiseImage.data[currentPixelOffset];
                noiseImage.data[currentPixelOffset + 3] = 50;
            }
        }
        // Put texture onto canvas
        this.canvasContext.putImageData(noiseImage, 0, 0);
        this.lastFrameUpdate = new Date().getTime();
        this.noiseAnimationWindowPos += 7;
        if (this.noiseAnimationWindowPos > canvasHeight) {
            this.noiseAnimationWindowPos = -canvasHeight;
        }
        this.scheduleNextRender();
    };
    TvNoiseCanvas.prototype.scheduleNextRender = function () {
        if (this.useAnimationFrame) {
            this.frameUpdateHandlerId = window.requestAnimationFrame(this.renderFrame.bind(this));
        }
        else {
            this.frameUpdateHandlerId = window.setTimeout(this.renderFrame.bind(this), this.frameInterval);
        }
    };
    return TvNoiseCanvas;
}(component_1.Component));
exports.TvNoiseCanvas = TvNoiseCanvas;

},{"../dom":87,"./component":23}],79:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.UIContainer = void 0;
var container_1 = require("./container");
var dom_1 = require("../dom");
var timeout_1 = require("../timeout");
var playerutils_1 = require("../playerutils");
var eventdispatcher_1 = require("../eventdispatcher");
var i18n_1 = require("../localization/i18n");
var button_1 = require("./button");
/**
 * The base container that contains all of the UI. The UIContainer is passed to the {@link UIManager} to build and
 * setup the UI.
 *
 * @category Containers
 */
var UIContainer = exports.UIContainer = /** @class */ (function (_super) {
    __extends(UIContainer, _super);
    function UIContainer(config) {
        var _this = _super.call(this, config) || this;
        _this.hideUi = function () { };
        _this.showUi = function () { };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-uicontainer',
            role: 'region',
            ariaLabel: i18n_1.i18n.getLocalizer('player'),
            hideDelay: 5000,
            hideImmediatelyOnMouseLeave: false,
        }, _this.config);
        _this.playerStateChange = new eventdispatcher_1.EventDispatcher();
        _this.hidingPrevented = function () { return false; };
        return _this;
    }
    UIContainer.prototype.configure = function (player, uimanager) {
        var config = this.getConfig();
        if (config.userInteractionEventSource) {
            this.userInteractionEventSource = new dom_1.DOM(config.userInteractionEventSource);
        }
        else {
            this.userInteractionEventSource = this.getDomElement();
        }
        _super.prototype.configure.call(this, player, uimanager);
        this.configureUIShowHide(player, uimanager);
        this.configurePlayerStates(player, uimanager);
    };
    UIContainer.prototype.configureUIShowHide = function (player, uimanager) {
        var _this = this;
        var config = this.getConfig();
        if (config.hideDelay === -1) {
            uimanager.onConfigured.subscribe(function () { return uimanager.onControlsShow.dispatch(_this); });
            return;
        }
        var isUiShown = false;
        var isSeeking = false;
        var isFirstTouch = true;
        var playerState;
        this.hidingPrevented = function () {
            return config.hidePlayerStateExceptions && config.hidePlayerStateExceptions.indexOf(playerState) > -1;
        };
        this.showUi = function () {
            if (!isUiShown) {
                // Let subscribers know that they should reveal themselves
                uimanager.onControlsShow.dispatch(_this);
                isUiShown = true;
            }
            // Don't trigger timeout while seeking (it will be triggered once the seek is finished) or casting
            if (!isSeeking && !player.isCasting() && !_this.hidingPrevented()) {
                _this.uiHideTimeout.start();
            }
        };
        this.hideUi = function () {
            // Hide the UI only if it is shown, and if not casting
            if (isUiShown && !player.isCasting()) {
                // Issue a preview event to check if we are good to hide the controls
                var previewHideEventArgs = {};
                uimanager.onPreviewControlsHide.dispatch(_this, previewHideEventArgs);
                if (!previewHideEventArgs.cancel) {
                    // If the preview wasn't canceled, let subscribers know that they should now hide themselves
                    uimanager.onControlsHide.dispatch(_this);
                    isUiShown = false;
                }
                else {
                    // If the hide preview was canceled, continue to show UI
                    _this.showUi();
                }
            }
        };
        // Timeout to defer UI hiding by the configured delay time
        this.uiHideTimeout = new timeout_1.Timeout(config.hideDelay, this.hideUi);
        this.userInteractionEvents = [{
                // On touch displays, the first touch reveals the UI
                name: 'touchend',
                handler: function (e) {
                    var shouldPreventDefault = (function (e) {
                        var findButtonComponent = (function (element) {
                            if (!element
                                || element === _this.userInteractionEventSource.get(0)
                                || element.component instanceof UIContainer) {
                                return null;
                            }
                            if (element.component && element.component instanceof button_1.Button) {
                                return element.component;
                            }
                            else {
                                return findButtonComponent(element.parentElement);
                            }
                        });
                        var buttonComponent = findButtonComponent(e.target);
                        return !(buttonComponent && buttonComponent.getConfig().acceptsTouchWithUiHidden);
                    });
                    if (!isUiShown) {
                        // Only if the UI is hidden, we prevent other actions (except for the first touch) and reveal the UI
                        // instead. The first touch is not prevented to let other listeners receive the event and trigger an
                        // initial action, e.g. the huge playback button can directly start playback instead of requiring a double
                        // tap which 1. reveals the UI and 2. starts playback.
                        if (isFirstTouch && !player.isPlaying()) {
                            isFirstTouch = false;
                        }
                        else {
                            // On touch input devices, the first touch is expected to display the UI controls and not be propagated to
                            // other components.
                            // When buttons are always visible this causes UX problems, as the first touch is not recognized.
                            // This is the case for the {@link AdSkipButton} and {@link AdClickOverlay}.
                            // To prevent UX issues where the buttons need to be touched twice, we do not prevent the first touch event.
                            if (shouldPreventDefault(e)) {
                                e.preventDefault();
                            }
                        }
                        _this.showUi();
                    }
                },
            }, {
                // When the mouse enters, we show the UI
                name: 'mouseenter',
                handler: function () {
                    _this.showUi();
                },
            }, {
                // When the mouse moves within, we show the UI
                name: 'mousemove',
                handler: function () {
                    _this.showUi();
                },
            }, {
                name: 'focusin',
                handler: function () {
                    _this.showUi();
                },
            }, {
                name: 'keydown',
                handler: function () {
                    _this.showUi();
                },
            }, {
                // When the mouse leaves, we can prepare to hide the UI, except a seek is going on
                name: 'mouseleave',
                handler: function () {
                    // When a seek is going on, the seek scrub pointer may exit the UI area while still seeking, and we do not
                    // hide the UI in such cases
                    if (!isSeeking && !_this.hidingPrevented()) {
                        if (_this.config.hideImmediatelyOnMouseLeave) {
                            _this.hideUi();
                        }
                        else {
                            _this.uiHideTimeout.start();
                        }
                    }
                },
            }];
        this.userInteractionEvents.forEach(function (event) { return _this.userInteractionEventSource.on(event.name, event.handler); });
        uimanager.onSeek.subscribe(function () {
            _this.uiHideTimeout.clear(); // Don't hide UI while a seek is in progress
            isSeeking = true;
        });
        uimanager.onSeeked.subscribe(function () {
            isSeeking = false;
            if (!_this.hidingPrevented()) {
                _this.uiHideTimeout.start(); // Re-enable UI hide timeout after a seek
            }
        });
        uimanager.onComponentViewModeChanged.subscribe(function (_, _a) {
            var mode = _a.mode;
            return _this.trackComponentViewMode(mode);
        });
        player.on(player.exports.PlayerEvent.CastStarted, function () {
            _this.showUi(); // Show UI when a Cast session has started (UI will then stay permanently on during the session)
        });
        this.playerStateChange.subscribe(function (_, state) {
            playerState = state;
            if (_this.hidingPrevented()) {
                // Entering a player state that prevents hiding and forces the controls to be shown
                _this.uiHideTimeout.clear();
                _this.showUi();
            }
            else {
                // Entering a player state that allows hiding
                _this.uiHideTimeout.start();
            }
        });
    };
    UIContainer.prototype.configurePlayerStates = function (player, uimanager) {
        var _this = this;
        var container = this.getDomElement();
        // Convert player states into CSS class names
        var stateClassNames = [];
        for (var state in playerutils_1.PlayerUtils.PlayerState) {
            if (isNaN(Number(state))) {
                var enumName = playerutils_1.PlayerUtils.PlayerState[playerutils_1.PlayerUtils.PlayerState[state]];
                stateClassNames[playerutils_1.PlayerUtils.PlayerState[state]] =
                    this.prefixCss(UIContainer.STATE_PREFIX + enumName.toLowerCase());
            }
        }
        var removeStates = function () {
            container.removeClass(stateClassNames[playerutils_1.PlayerUtils.PlayerState.Idle]);
            container.removeClass(stateClassNames[playerutils_1.PlayerUtils.PlayerState.Prepared]);
            container.removeClass(stateClassNames[playerutils_1.PlayerUtils.PlayerState.Playing]);
            container.removeClass(stateClassNames[playerutils_1.PlayerUtils.PlayerState.Paused]);
            container.removeClass(stateClassNames[playerutils_1.PlayerUtils.PlayerState.Finished]);
        };
        var updateState = function (state) {
            removeStates();
            container.addClass(stateClassNames[state]);
            _this.playerStateChange.dispatch(_this, state);
        };
        player.on(player.exports.PlayerEvent.SourceLoaded, function () {
            updateState(playerutils_1.PlayerUtils.PlayerState.Prepared);
        });
        player.on(player.exports.PlayerEvent.Play, function () {
            updateState(playerutils_1.PlayerUtils.PlayerState.Playing);
        });
        player.on(player.exports.PlayerEvent.Playing, function () {
            updateState(playerutils_1.PlayerUtils.PlayerState.Playing);
        });
        player.on(player.exports.PlayerEvent.Paused, function () {
            updateState(playerutils_1.PlayerUtils.PlayerState.Paused);
        });
        player.on(player.exports.PlayerEvent.PlaybackFinished, function () {
            updateState(playerutils_1.PlayerUtils.PlayerState.Finished);
        });
        player.on(player.exports.PlayerEvent.SourceUnloaded, function () {
            updateState(playerutils_1.PlayerUtils.PlayerState.Idle);
        });
        uimanager.getConfig().events.onUpdated.subscribe(function () {
            updateState(playerutils_1.PlayerUtils.getState(player));
        });
        // Fullscreen marker class
        player.on(player.exports.PlayerEvent.ViewModeChanged, function () {
            if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {
                container.addClass(_this.prefixCss(UIContainer.FULLSCREEN));
            }
            else {
                container.removeClass(_this.prefixCss(UIContainer.FULLSCREEN));
            }
        });
        // Init fullscreen state
        if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {
            container.addClass(this.prefixCss(UIContainer.FULLSCREEN));
        }
        // Buffering marker class
        player.on(player.exports.PlayerEvent.StallStarted, function () {
            container.addClass(_this.prefixCss(UIContainer.BUFFERING));
        });
        player.on(player.exports.PlayerEvent.StallEnded, function () {
            container.removeClass(_this.prefixCss(UIContainer.BUFFERING));
        });
        // Init buffering state
        if (player.isStalled()) {
            container.addClass(this.prefixCss(UIContainer.BUFFERING));
        }
        // RemoteControl marker class
        player.on(player.exports.PlayerEvent.CastStarted, function () {
            container.addClass(_this.prefixCss(UIContainer.REMOTE_CONTROL));
        });
        player.on(player.exports.PlayerEvent.CastStopped, function () {
            container.removeClass(_this.prefixCss(UIContainer.REMOTE_CONTROL));
        });
        // Init RemoteControl state
        if (player.isCasting()) {
            container.addClass(this.prefixCss(UIContainer.REMOTE_CONTROL));
        }
        // Controls visibility marker class
        uimanager.onControlsShow.subscribe(function () {
            container.removeClass(_this.prefixCss(UIContainer.CONTROLS_HIDDEN));
            container.addClass(_this.prefixCss(UIContainer.CONTROLS_SHOWN));
        });
        uimanager.onControlsHide.subscribe(function () {
            container.removeClass(_this.prefixCss(UIContainer.CONTROLS_SHOWN));
            container.addClass(_this.prefixCss(UIContainer.CONTROLS_HIDDEN));
        });
        // Layout size classes
        var updateLayoutSizeClasses = function (width, height) {
            container.removeClass(_this.prefixCss('layout-max-width-400'));
            container.removeClass(_this.prefixCss('layout-max-width-600'));
            container.removeClass(_this.prefixCss('layout-max-width-800'));
            container.removeClass(_this.prefixCss('layout-max-width-1200'));
            if (width <= 400) {
                container.addClass(_this.prefixCss('layout-max-width-400'));
            }
            else if (width <= 600) {
                container.addClass(_this.prefixCss('layout-max-width-600'));
            }
            else if (width <= 800) {
                container.addClass(_this.prefixCss('layout-max-width-800'));
            }
            else if (width <= 1200) {
                container.addClass(_this.prefixCss('layout-max-width-1200'));
            }
        };
        player.on(player.exports.PlayerEvent.PlayerResized, function (e) {
            // Convert strings (with "px" suffix) to ints
            var width = Math.round(Number(e.width.substring(0, e.width.length - 2)));
            var height = Math.round(Number(e.height.substring(0, e.height.length - 2)));
            updateLayoutSizeClasses(width, height);
        });
        // Init layout state
        updateLayoutSizeClasses(new dom_1.DOM(player.getContainer()).width(), new dom_1.DOM(player.getContainer()).height());
    };
    UIContainer.prototype.release = function () {
        var _this = this;
        // Explicitly unsubscribe user interaction event handlers because they could be attached to an external element
        // that isn't owned by the UI and therefore not removed on release.
        if (this.userInteractionEvents) {
            this.userInteractionEvents.forEach(function (event) { return _this.userInteractionEventSource.off(event.name, event.handler); });
        }
        _super.prototype.release.call(this);
        if (this.uiHideTimeout) {
            this.uiHideTimeout.clear();
        }
    };
    UIContainer.prototype.onPlayerStateChange = function () {
        return this.playerStateChange.getEvent();
    };
    UIContainer.prototype.suspendHideTimeout = function () {
        this.uiHideTimeout.suspend();
    };
    UIContainer.prototype.resumeHideTimeout = function () {
        this.uiHideTimeout.resume(!this.hidingPrevented());
    };
    UIContainer.prototype.toDomElement = function () {
        var container = _super.prototype.toDomElement.call(this);
        // Detect flexbox support (not supported in IE9)
        if (document && typeof document.createElement('p').style.flex !== 'undefined') {
            container.addClass(this.prefixCss('flexbox'));
        }
        else {
            container.addClass(this.prefixCss('no-flexbox'));
        }
        return container;
    };
    UIContainer.STATE_PREFIX = 'player-state-';
    UIContainer.FULLSCREEN = 'fullscreen';
    UIContainer.BUFFERING = 'buffering';
    UIContainer.REMOTE_CONTROL = 'remote-control';
    UIContainer.CONTROLS_SHOWN = 'controls-shown';
    UIContainer.CONTROLS_HIDDEN = 'controls-hidden';
    return UIContainer;
}(container_1.Container));

},{"../dom":87,"../eventdispatcher":89,"../localization/i18n":94,"../playerutils":101,"../timeout":116,"./button":17,"./container":24}],80:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoQualitySelectBox = void 0;
var selectbox_1 = require("./selectbox");
var i18n_1 = require("../localization/i18n");
/**
 * A select box providing a selection between 'auto' and the available video qualities.
 *
 * @category Components
 */
var VideoQualitySelectBox = /** @class */ (function (_super) {
    __extends(VideoQualitySelectBox, _super);
    function VideoQualitySelectBox(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClasses: ['ui-videoqualityselectbox'],
        }, _this.config);
        return _this;
    }
    VideoQualitySelectBox.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var selectCurrentVideoQuality = function () {
            _this.selectItem(player.getVideoQuality().id);
        };
        var updateVideoQualities = function () {
            var videoQualities = player.getAvailableVideoQualities();
            _this.clearItems();
            // Progressive streams do not support automatic quality selection
            _this.hasAuto = player.getStreamType() !== 'progressive';
            if (_this.hasAuto) {
                // Add entry for automatic quality switching (default setting)
                _this.addItem('auto', i18n_1.i18n.getLocalizer('auto'));
            }
            // Add video qualities
            for (var _i = 0, videoQualities_1 = videoQualities; _i < videoQualities_1.length; _i++) {
                var videoQuality = videoQualities_1[_i];
                _this.addItem(videoQuality.id, videoQuality.label);
            }
            // Select initial quality
            selectCurrentVideoQuality();
        };
        this.onItemSelected.subscribe(function (sender, value) {
            player.setVideoQuality(value);
        });
        // Update qualities when source goes away
        player.on(player.exports.PlayerEvent.SourceUnloaded, updateVideoQualities);
        // Update qualities when the period within a source changes
        player.on(player.exports.PlayerEvent.PeriodSwitched, updateVideoQualities);
        // Update quality selection when quality is changed (from outside)
        player.on(player.exports.PlayerEvent.VideoQualityChanged, selectCurrentVideoQuality);
        if (player.exports.PlayerEvent.VideoQualityAdded) {
            // Update qualities when their availability changed
            // TODO: remove any cast after next player release
            player.on(player.exports.PlayerEvent.VideoQualityAdded, updateVideoQualities);
            player.on(player.exports.PlayerEvent.VideoQualityRemoved, updateVideoQualities);
        }
        uimanager.getConfig().events.onUpdated.subscribe(updateVideoQualities);
    };
    /**
     * Returns true if the select box contains an 'auto' item for automatic quality selection mode.
     * @return {boolean}
     */
    VideoQualitySelectBox.prototype.hasAutoItem = function () {
        return this.hasAuto;
    };
    return VideoQualitySelectBox;
}(selectbox_1.SelectBox));
exports.VideoQualitySelectBox = VideoQualitySelectBox;

},{"../localization/i18n":94,"./selectbox":49}],81:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeControlButton = void 0;
var container_1 = require("./container");
var volumeslider_1 = require("./volumeslider");
var volumetogglebutton_1 = require("./volumetogglebutton");
var timeout_1 = require("../timeout");
/**
 * A composite volume control that consists of and internally manages a volume control button that can be used
 * for muting, and a (depending on the CSS style, e.g. slide-out) volume control bar.
 *
 * @category Buttons
 */
var VolumeControlButton = /** @class */ (function (_super) {
    __extends(VolumeControlButton, _super);
    function VolumeControlButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.volumeToggleButton = new volumetogglebutton_1.VolumeToggleButton();
        _this.volumeSlider = new volumeslider_1.VolumeSlider({
            vertical: config.vertical != null ? config.vertical : true,
            hidden: true,
        });
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-volumecontrolbutton',
            components: [_this.volumeToggleButton, _this.volumeSlider],
            hideDelay: 500,
        }, _this.config);
        return _this;
    }
    VolumeControlButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var volumeToggleButton = this.getVolumeToggleButton();
        var volumeSlider = this.getVolumeSlider();
        this.volumeSliderHideTimeout = new timeout_1.Timeout(this.getConfig().hideDelay, function () {
            volumeSlider.hide();
        });
        /*
         * Volume Slider visibility handling
         *
         * The volume slider shall be visible while the user hovers the mute toggle button, while the user hovers the
         * volume slider, and while the user slides the volume slider. If none of these situations are true, the slider
         * shall disappear.
         */
        var volumeSliderHovered = false;
        volumeToggleButton.getDomElement().on('mouseenter', function () {
            // Show volume slider when mouse enters the button area
            if (volumeSlider.isHidden()) {
                volumeSlider.show();
            }
            // Avoid hiding of the slider when button is hovered
            _this.volumeSliderHideTimeout.clear();
        });
        volumeToggleButton.getDomElement().on('mouseleave', function () {
            // Hide slider delayed when button is left
            _this.volumeSliderHideTimeout.reset();
        });
        volumeSlider.getDomElement().on('mouseenter', function () {
            // When the slider is entered, cancel the hide timeout activated by leaving the button
            _this.volumeSliderHideTimeout.clear();
            volumeSliderHovered = true;
        });
        volumeSlider.getDomElement().on('mouseleave', function () {
            // When mouse leaves the slider, only hide it if there is no slide operation in progress
            if (volumeSlider.isSeeking()) {
                _this.volumeSliderHideTimeout.clear();
            }
            else {
                _this.volumeSliderHideTimeout.reset();
            }
            volumeSliderHovered = false;
        });
        volumeSlider.onSeeked.subscribe(function () {
            // When a slide operation is done and the slider not hovered (mouse outside slider), hide slider delayed
            if (!volumeSliderHovered) {
                _this.volumeSliderHideTimeout.reset();
            }
        });
    };
    VolumeControlButton.prototype.release = function () {
        _super.prototype.release.call(this);
        this.volumeSliderHideTimeout.clear();
    };
    /**
     * Provides access to the internally managed volume toggle button.
     * @returns {VolumeToggleButton}
     */
    VolumeControlButton.prototype.getVolumeToggleButton = function () {
        return this.volumeToggleButton;
    };
    /**
     * Provides access to the internally managed volume silder.
     * @returns {VolumeSlider}
     */
    VolumeControlButton.prototype.getVolumeSlider = function () {
        return this.volumeSlider;
    };
    return VolumeControlButton;
}(container_1.Container));
exports.VolumeControlButton = VolumeControlButton;

},{"../timeout":116,"./container":24,"./volumeslider":82,"./volumetogglebutton":83}],82:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeSlider = void 0;
var seekbar_1 = require("./seekbar");
var i18n_1 = require("../localization/i18n");
/**
 * A simple volume slider component to adjust the player's volume setting.
 *
 * @category Components
 */
var VolumeSlider = /** @class */ (function (_super) {
    __extends(VolumeSlider, _super);
    function VolumeSlider(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.updateVolumeWhileScrubbing = function (sender, args) {
            if (args.scrubbing && _this.volumeTransition) {
                _this.volumeTransition.update(args.position);
            }
        };
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-volumeslider',
            hideIfVolumeControlProhibited: true,
            ariaLabel: i18n_1.i18n.getLocalizer('settings.audio.volume'),
            tabIndex: 0,
        }, _this.config);
        return _this;
    }
    VolumeSlider.prototype.setVolumeAriaSliderValues = function (value) {
        this.getDomElement().attr('aria-valuenow', Math.ceil(value).toString());
        this.getDomElement().attr('aria-valuetext', "".concat(i18n_1.i18n.performLocalization(i18n_1.i18n.getLocalizer('seekBar.value')), ": ").concat(Math.ceil(value)));
    };
    VolumeSlider.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager, false);
        this.setAriaSliderMinMax('0', '100');
        var config = this.getConfig();
        var volumeController = uimanager.getConfig().volumeController;
        if (config.hideIfVolumeControlProhibited && !this.detectVolumeControlAvailability()) {
            this.hide();
            // We can just return from here, because the user will never interact with the control and any configured
            // functionality would only eat resources for no reason.
            return;
        }
        volumeController.onChanged.subscribe(function (_, args) {
            if (args.muted) {
                _this.setVolumeAriaSliderValues(0);
                _this.setPlaybackPosition(0);
            }
            else {
                _this.setPlaybackPosition(args.volume);
                _this.setVolumeAriaSliderValues(args.volume);
            }
        });
        this.onSeek.subscribe(function () {
            _this.volumeTransition = volumeController.startTransition();
        });
        this.onSeekPreview.subscribeRateLimited(this.updateVolumeWhileScrubbing, 50);
        this.onSeeked.subscribe(function (sender, percentage) {
            if (_this.volumeTransition) {
                _this.volumeTransition.finish(percentage);
            }
        });
        // Update the volume slider marker when the player resized, a source is loaded,
        // or the UI is configured. Check the seekbar for a detailed description.
        player.on(player.exports.PlayerEvent.PlayerResized, function () {
            _this.refreshPlaybackPosition();
        });
        uimanager.onConfigured.subscribe(function () {
            _this.refreshPlaybackPosition();
        });
        uimanager.getConfig().events.onUpdated.subscribe(function () {
            _this.refreshPlaybackPosition();
        });
        uimanager.onComponentShow.subscribe(function () {
            _this.refreshPlaybackPosition();
        });
        uimanager.onComponentHide.subscribe(function () {
            _this.refreshPlaybackPosition();
        });
        // Init volume bar
        volumeController.onChangedEvent();
    };
    VolumeSlider.prototype.detectVolumeControlAvailability = function () {
        /*
         * "On iOS devices, the audio level is always under the user’s physical control. The volume property is not
         * settable in JavaScript. Reading the volume property always returns 1."
         * https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html
         */
        // as muted autoplay gets paused as soon as we unmute it, we may not touch the volume of the actual player so we
        // probe a dummy audio element
        var dummyVideoElement = document.createElement('video');
        // try setting the volume to 0.7 and if it's still 1 we are on a volume control restricted device
        dummyVideoElement.volume = 0.7;
        return dummyVideoElement.volume !== 1;
    };
    VolumeSlider.prototype.release = function () {
        _super.prototype.release.call(this);
        this.onSeekPreview.unsubscribe(this.updateVolumeWhileScrubbing);
    };
    return VolumeSlider;
}(seekbar_1.SeekBar));
exports.VolumeSlider = VolumeSlider;

},{"../localization/i18n":94,"./seekbar":45}],83:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles audio muting.
 *
 * @category Buttons
 */
var VolumeToggleButton = /** @class */ (function (_super) {
    __extends(VolumeToggleButton, _super);
    function VolumeToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        var defaultConfig = {
            cssClass: 'ui-volumetogglebutton',
            text: i18n_1.i18n.getLocalizer('settings.audio.mute'),
            onClass: 'muted',
            offClass: 'unmuted',
            ariaLabel: i18n_1.i18n.getLocalizer('settings.audio.mute'),
        };
        _this.config = _this.mergeConfig(config, defaultConfig, _this.config);
        return _this;
    }
    VolumeToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var volumeController = uimanager.getConfig().volumeController;
        volumeController.onChanged.subscribe(function (_, args) {
            if (args.muted) {
                _this.on();
            }
            else {
                _this.off();
            }
            var volumeLevelTens = Math.ceil(args.volume / 10);
            _this.getDomElement().data(_this.prefixCss('volume-level-tens'), String(volumeLevelTens));
        });
        this.onClick.subscribe(function () {
            volumeController.toggleMuted();
        });
        // Startup init
        volumeController.onChangedEvent();
    };
    return VolumeToggleButton;
}(togglebutton_1.ToggleButton));
exports.VolumeToggleButton = VolumeToggleButton;

},{"../localization/i18n":94,"./togglebutton":77}],84:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.VRToggleButton = void 0;
var togglebutton_1 = require("./togglebutton");
var i18n_1 = require("../localization/i18n");
/**
 * A button that toggles the video view between normal/mono and VR/stereo.
 *
 * @category Buttons
 */
var VRToggleButton = /** @class */ (function (_super) {
    __extends(VRToggleButton, _super);
    function VRToggleButton(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.config = _this.mergeConfig(config, {
            cssClass: 'ui-vrtogglebutton',
            text: i18n_1.i18n.getLocalizer('vr'),
        }, _this.config);
        return _this;
    }
    VRToggleButton.prototype.configure = function (player, uimanager) {
        var _this = this;
        _super.prototype.configure.call(this, player, uimanager);
        var isVRConfigured = function () {
            // VR availability cannot be checked through getVRStatus() because it is asynchronously populated and not
            // available at UI initialization. As an alternative, we check the VR settings in the config.
            // TODO use getVRStatus() through isVRStereoAvailable() once the player has been rewritten and the status is
            // available in Ready
            var source = player.getSource();
            return source && Boolean(source.vr);
        };
        var isVRStereoAvailable = function () {
            var source = player.getSource();
            return player.vr && Boolean(source.vr);
        };
        var vrStateHandler = function (ev) {
            if (ev.type === player.exports.PlayerEvent.Warning
                && ev.code !== player.exports.WarningCode.VR_RENDERING_ERROR) {
                return;
            }
            if (isVRConfigured() && isVRStereoAvailable()) {
                _this.show(); // show button in case it is hidden
                if (player.vr && player.vr.getStereo()) {
                    _this.on();
                }
                else {
                    _this.off();
                }
            }
            else {
                _this.hide(); // hide button if no stereo mode available
            }
        };
        var vrButtonVisibilityHandler = function () {
            if (isVRConfigured()) {
                _this.show();
            }
            else {
                _this.hide();
            }
        };
        player.on(player.exports.PlayerEvent.VRStereoChanged, vrStateHandler);
        player.on(player.exports.PlayerEvent.Warning, vrStateHandler);
        // Hide button when VR source goes away
        player.on(player.exports.PlayerEvent.SourceUnloaded, vrButtonVisibilityHandler);
        uimanager.getConfig().events.onUpdated.subscribe(vrButtonVisibilityHandler);
        this.onClick.subscribe(function () {
            if (!isVRStereoAvailable()) {
                if (console) {
                    console.log('No VR content');
                }
            }
            else {
                if (player.vr && player.vr.getStereo()) {
                    player.vr.setStereo(false);
                }
                else {
                    player.vr.setStereo(true);
                }
            }
        });
        // Set startup visibility
        vrButtonVisibilityHandler();
    };
    return VRToggleButton;
}(togglebutton_1.ToggleButton));
exports.VRToggleButton = VRToggleButton;

},{"../localization/i18n":94,"./togglebutton":77}],85:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Watermark = void 0;
var clickoverlay_1 = require("./clickoverlay");
/**
 * A watermark overlay with a clickable logo.
 *
 * @category Components
 */
var Watermark = /** @class */ (function (_super) {
    __extends(Watermark, _super);
    function Watermark(config) {
        if (config === void 0) { config = {}; }
        return _super.call(this, config) || this;
        /* this.config = this.mergeConfig(config, {
          cssClass: 'ui-watermark',
          url: 'http://bitmovin.com',
          role: 'link',
          text: 'logo',
          ariaLabel: i18n.getLocalizer('watermarkLink'),
        }, <WatermarkConfig>this.config); */
    }
    return Watermark;
}(clickoverlay_1.ClickOverlay));
exports.Watermark = Watermark;

},{"./clickoverlay":21}],86:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DemoFactory = void 0;
var vrtogglebutton_1 = require("./components/vrtogglebutton");
var settingstogglebutton_1 = require("./components/settingstogglebutton");
var volumeslider_1 = require("./components/volumeslider");
var playbacktimelabel_1 = require("./components/playbacktimelabel");
var airplaytogglebutton_1 = require("./components/airplaytogglebutton");
var errormessageoverlay_1 = require("./components/errormessageoverlay");
var controlbar_1 = require("./components/controlbar");
var casttogglebutton_1 = require("./components/casttogglebutton");
var fullscreentogglebutton_1 = require("./components/fullscreentogglebutton");
var recommendationoverlay_1 = require("./components/recommendationoverlay");
var playbackspeedselectbox_1 = require("./components/playbackspeedselectbox");
var audioqualityselectbox_1 = require("./components/audioqualityselectbox");
var caststatusoverlay_1 = require("./components/caststatusoverlay");
var uicontainer_1 = require("./components/uicontainer");
var subtitleoverlay_1 = require("./components/subtitleoverlay");
var settingspanel_1 = require("./components/settingspanel");
var seekbarlabel_1 = require("./components/seekbarlabel");
var playbacktoggleoverlay_1 = require("./components/playbacktoggleoverlay");
var pictureinpicturetogglebutton_1 = require("./components/pictureinpicturetogglebutton");
var spacer_1 = require("./components/spacer");
var container_1 = require("./components/container");
var volumetogglebutton_1 = require("./components/volumetogglebutton");
var playbacktogglebutton_1 = require("./components/playbacktogglebutton");
var seekbar_1 = require("./components/seekbar");
var videoqualityselectbox_1 = require("./components/videoqualityselectbox");
var uimanager_1 = require("./uimanager");
var titlebar_1 = require("./components/titlebar");
var bufferingoverlay_1 = require("./components/bufferingoverlay");
var subtitlelistbox_1 = require("./components/subtitlelistbox");
var audiotracklistbox_1 = require("./components/audiotracklistbox");
var settingspanelitem_1 = require("./components/settingspanelitem");
var settingspanelpage_1 = require("./components/settingspanelpage");
var uifactory_1 = require("./uifactory");
var main_1 = require("./main");
var DemoFactory;
(function (DemoFactory) {
    function buildDemoWithSeparateAudioSubtitlesButtons(player, config) {
        if (config === void 0) { config = {}; }
        // show smallScreen UI only on mobile/handheld devices
        var smallScreenSwitchWidth = 600;
        return new uimanager_1.UIManager(player, [{
                ui: uifactory_1.UIFactory.modernSmallScreenAdsUI(),
                condition: function (context) {
                    return context.isMobile && context.documentWidth < smallScreenSwitchWidth
                        && context.isAd && context.adRequiresUi;
                },
            }, {
                ui: uifactory_1.UIFactory.modernAdsUI(),
                condition: function (context) {
                    return context.isAd && context.adRequiresUi;
                },
            }, {
                ui: uifactory_1.UIFactory.modernSmallScreenUI({ radioModeAvailable: false }),
                condition: function (context) {
                    return context.isMobile && context.documentWidth < smallScreenSwitchWidth;
                },
            }, {
                ui: modernUIWithSeparateAudioSubtitlesButtons(),
            }], config);
    }
    DemoFactory.buildDemoWithSeparateAudioSubtitlesButtons = buildDemoWithSeparateAudioSubtitlesButtons;
    function modernUIWithSeparateAudioSubtitlesButtons() {
        var subtitleOverlay = new subtitleoverlay_1.SubtitleOverlay();
        var settingsPanel = new settingspanel_1.SettingsPanel({
            components: [
                new settingspanelpage_1.SettingsPanelPage({
                    components: [
                        new settingspanelitem_1.SettingsPanelItem('Video Quality', new videoqualityselectbox_1.VideoQualitySelectBox()),
                        new settingspanelitem_1.SettingsPanelItem('Speed', new playbackspeedselectbox_1.PlaybackSpeedSelectBox()),
                        new settingspanelitem_1.SettingsPanelItem('Audio Quality', new audioqualityselectbox_1.AudioQualitySelectBox()),
                    ],
                }),
            ],
            hidden: true,
        });
        var subtitleListBox = new subtitlelistbox_1.SubtitleListBox();
        var subtitleSettingsPanel = new settingspanel_1.SettingsPanel({
            components: [
                new settingspanelpage_1.SettingsPanelPage({
                    components: [
                        new settingspanelitem_1.SettingsPanelItem(null, subtitleListBox),
                    ],
                }),
            ],
            hidden: true,
        });
        var audioTrackListBox = new audiotracklistbox_1.AudioTrackListBox();
        var audioTrackSettingsPanel = new settingspanel_1.SettingsPanel({
            components: [
                new settingspanelpage_1.SettingsPanelPage({
                    components: [
                        new settingspanelitem_1.SettingsPanelItem(null, audioTrackListBox),
                    ],
                }),
            ],
            hidden: true,
        });
        var controlBar = new controlbar_1.ControlBar({
            components: [
                audioTrackSettingsPanel,
                subtitleSettingsPanel,
                settingsPanel,
                new container_1.Container({
                    components: [
                        new playbacktimelabel_1.PlaybackTimeLabel({ timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),
                        new seekbar_1.SeekBar({ label: new seekbarlabel_1.SeekBarLabel() }),
                        new playbacktimelabel_1.PlaybackTimeLabel({ timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),
                    ],
                    cssClasses: ['controlbar-top'],
                }),
                new container_1.Container({
                    components: [
                        new playbacktogglebutton_1.PlaybackToggleButton(),
                        new main_1.QuickSeekButton({ seekSeconds: -10 }),
                        new main_1.QuickSeekButton({ seekSeconds: 10 }),
                        new volumetogglebutton_1.VolumeToggleButton(),
                        new volumeslider_1.VolumeSlider(),
                        new spacer_1.Spacer(),
                        new pictureinpicturetogglebutton_1.PictureInPictureToggleButton(),
                        new airplaytogglebutton_1.AirPlayToggleButton(),
                        new casttogglebutton_1.CastToggleButton(),
                        new vrtogglebutton_1.VRToggleButton(),
                        new settingstogglebutton_1.SettingsToggleButton({
                            settingsPanel: audioTrackSettingsPanel,
                            cssClass: 'ui-audiotracksettingstogglebutton',
                        }),
                        new settingstogglebutton_1.SettingsToggleButton({
                            settingsPanel: subtitleSettingsPanel,
                            cssClass: 'ui-subtitlesettingstogglebutton',
                        }),
                        new settingstogglebutton_1.SettingsToggleButton({ settingsPanel: settingsPanel }),
                        new fullscreentogglebutton_1.FullscreenToggleButton(),
                    ],
                    cssClasses: ['controlbar-bottom'],
                }),
            ],
        });
        return new uicontainer_1.UIContainer({
            components: [
                subtitleOverlay,
                new bufferingoverlay_1.BufferingOverlay(),
                new playbacktoggleoverlay_1.PlaybackToggleOverlay(),
                new caststatusoverlay_1.CastStatusOverlay(),
                controlBar,
                new titlebar_1.TitleBar(),
                new recommendationoverlay_1.RecommendationOverlay(),
                new errormessageoverlay_1.ErrorMessageOverlay(),
            ],
        });
    }
})(DemoFactory = exports.DemoFactory || (exports.DemoFactory = {}));

},{"./components/airplaytogglebutton":12,"./components/audioqualityselectbox":13,"./components/audiotracklistbox":14,"./components/bufferingoverlay":16,"./components/caststatusoverlay":18,"./components/casttogglebutton":19,"./components/container":24,"./components/controlbar":25,"./components/errormessageoverlay":28,"./components/fullscreentogglebutton":29,"./components/pictureinpicturetogglebutton":37,"./components/playbackspeedselectbox":38,"./components/playbacktimelabel":39,"./components/playbacktogglebutton":40,"./components/playbacktoggleoverlay":41,"./components/recommendationoverlay":43,"./components/seekbar":45,"./components/seekbarlabel":48,"./components/settingspanel":50,"./components/settingspanelitem":51,"./components/settingspanelpage":52,"./components/settingstogglebutton":56,"./components/spacer":57,"./components/subtitlelistbox":58,"./components/subtitleoverlay":59,"./components/titlebar":76,"./components/uicontainer":79,"./components/videoqualityselectbox":80,"./components/volumeslider":82,"./components/volumetogglebutton":83,"./components/vrtogglebutton":84,"./main":99,"./uifactory":118,"./uimanager":119}],87:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DOM = void 0;
/**
 * Simple DOM manipulation and DOM element event handling modeled after jQuery (as replacement for jQuery).
 *
 * Like jQuery, DOM operates on single elements and lists of elements. For example: creating an element returns a DOM
 * instance with a single element, selecting elements returns a DOM instance with zero, one, or many elements. Similar
 * to jQuery, setters usually affect all elements, while getters operate on only the first element.
 * Also similar to jQuery, most methods (except getters) return the DOM instance facilitating easy chaining of method
 * calls.
 *
 * Built with the help of: http://youmightnotneedjquery.com/
 */
var DOM = /** @class */ (function () {
    function DOM(something, attributes, component) {
        this.document = document; // Set the global document to the local document field
        if (something instanceof Array) {
            if (something.length > 0 && something[0] instanceof HTMLElement) {
                var elements = something;
                this.elements = elements;
            }
        }
        else if (something instanceof HTMLElement) {
            var element = something;
            this.elements = [element];
        }
        else if (something instanceof Document) {
            // When a document is passed in, we do not do anything with it, but by setting this.elements to null
            // we give the event handling method a means to detect if the events should be registered on the document
            // instead of elements.
            this.elements = null;
        }
        else if (attributes) {
            var tagName = something;
            var element = document.createElement(tagName);
            for (var attributeName in attributes) {
                var attributeValue = attributes[attributeName];
                if (attributeValue != null) {
                    element.setAttribute(attributeName, attributeValue);
                }
            }
            if (component) {
                element.component = component;
            }
            this.elements = [element];
        }
        else {
            var selector = something;
            this.elements = this.findChildElements(selector);
        }
    }
    Object.defineProperty(DOM.prototype, "length", {
        /**
         * Gets the number of elements that this DOM instance currently holds.
         * @returns {number} the number of elements
         */
        get: function () {
            return this.elements ? this.elements.length : 0;
        },
        enumerable: false,
        configurable: true
    });
    DOM.prototype.get = function (index) {
        if (index === undefined) {
            return this.elements;
        }
        else if (!this.elements || index >= this.elements.length || index < -this.elements.length) {
            return undefined;
        }
        else if (index < 0) {
            return this.elements[this.elements.length - index];
        }
        else {
            return this.elements[index];
        }
    };
    /**
     * A shortcut method for iterating all elements. Shorts this.elements.forEach(...) to this.forEach(...).
     * @param handler the handler to execute an operation on an element
     */
    DOM.prototype.forEach = function (handler) {
        if (!this.elements) {
            return;
        }
        this.elements.forEach(function (element) {
            handler(element);
        });
    };
    DOM.prototype.findChildElementsOfElement = function (element, selector) {
        var childElements = element.querySelectorAll(selector);
        // Convert NodeList to Array
        // https://toddmotto.com/a-comprehensive-dive-into-nodelists-arrays-converting-nodelists-and-understanding-the-dom/
        return [].slice.call(childElements);
    };
    DOM.prototype.findChildElements = function (selector) {
        var _this = this;
        var allChildElements = [];
        if (this.elements) {
            this.forEach(function (element) {
                allChildElements = allChildElements.concat(_this.findChildElementsOfElement(element, selector));
            });
        }
        else {
            return this.findChildElementsOfElement(document, selector);
        }
        return allChildElements;
    };
    /**
     * Finds all child elements of all elements matching the supplied selector.
     * @param selector the selector to match with child elements
     * @returns {DOM} a new DOM instance representing all matched children
     */
    DOM.prototype.find = function (selector) {
        var allChildElements = this.findChildElements(selector);
        return new DOM(allChildElements);
    };
    /**
     * Focuses to the first input element
     */
    DOM.prototype.focusToFirstInput = function () {
        var inputElements = this.findChildElements('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
        if (inputElements.length > 0) {
            inputElements[0].focus();
        }
    };
    /**
     * Focuses to the first input element
     */
    DOM.prototype.scrollTo = function (x, y) {
        this.elements[0].scrollTo(x, y);
    };
    DOM.prototype.html = function (content) {
        if (arguments.length > 0) {
            return this.setHtml(content);
        }
        else {
            return this.getHtml();
        }
    };
    DOM.prototype.getHtml = function () {
        return this.elements[0].innerHTML;
    };
    DOM.prototype.setHtml = function (content) {
        if (content === undefined || content == null) {
            // Set to empty string to avoid innerHTML getting set to 'undefined' (all browsers) or 'null' (IE9)
            content = '';
        }
        this.forEach(function (element) {
            element.innerHTML = content;
        });
        return this;
    };
    /**
     * Clears the inner HTML of all elements (deletes all children).
     * @returns {DOM}
     */
    DOM.prototype.empty = function () {
        this.forEach(function (element) {
            element.innerHTML = '';
        });
        return this;
    };
    /**
     * Returns the current value of the first form element, e.g. the selected value of a select box or the text if an
     * input field.
     * @returns {string} the value of a form element
     */
    DOM.prototype.val = function () {
        var element = this.elements[0];
        if (element instanceof HTMLSelectElement || element instanceof HTMLInputElement) {
            return element.value;
        }
        else {
            // TODO add support for missing form elements
            throw new Error("val() not supported for ".concat(typeof element));
        }
    };
    DOM.prototype.attr = function (attribute, value) {
        if (arguments.length > 1) {
            return this.setAttr(attribute, value);
        }
        else {
            return this.getAttr(attribute);
        }
    };
    /**
     * Removes the attribute of the element.
     * @param attribute
     */
    DOM.prototype.removeAttr = function (attribute) {
        this.forEach(function (element) {
            element.removeAttribute(attribute);
        });
    };
    DOM.prototype.getAttr = function (attribute) {
        return this.elements[0].getAttribute(attribute);
    };
    DOM.prototype.setAttr = function (attribute, value) {
        this.forEach(function (element) {
            element.setAttribute(attribute, value);
        });
        return this;
    };
    DOM.prototype.data = function (dataAttribute, value) {
        if (arguments.length > 1) {
            return this.setData(dataAttribute, value);
        }
        else {
            return this.getData(dataAttribute);
        }
    };
    DOM.prototype.getData = function (dataAttribute) {
        return this.elements[0].getAttribute('data-' + dataAttribute);
    };
    DOM.prototype.setData = function (dataAttribute, value) {
        this.forEach(function (element) {
            element.setAttribute('data-' + dataAttribute, value);
        });
        return this;
    };
    /**
     * Appends one or more DOM elements as children to all elements.
     * @param childElements the chrild elements to append
     * @returns {DOM}
     */
    DOM.prototype.append = function () {
        var childElements = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            childElements[_i] = arguments[_i];
        }
        this.forEach(function (element) {
            childElements.forEach(function (childElement) {
                childElement.elements.forEach(function (_, index) {
                    element.appendChild(childElement.elements[index]);
                });
            });
        });
        return this;
    };
    /**
     * Removes all elements from the DOM.
     */
    DOM.prototype.remove = function () {
        this.forEach(function (element) {
            var parent = element.parentNode;
            if (parent) {
                parent.removeChild(element);
            }
        });
    };
    /**
     * Returns the offset of the first element from the document's top left corner.
     * @returns {Offset}
     */
    DOM.prototype.offset = function () {
        var element = this.elements[0];
        var elementRect = element.getBoundingClientRect();
        var htmlRect = document.body.parentElement.getBoundingClientRect();
        // Virtual viewport scroll handling (e.g. pinch zoomed viewports in mobile browsers or desktop Chrome/Edge)
        // 'normal' zooms and virtual viewport zooms (aka layout viewport) result in different
        // element.getBoundingClientRect() results:
        //  - with normal scrolls, the clientRect decreases with an increase in scroll(Top|Left)/page(X|Y)Offset
        //  - with pinch zoom scrolls, the clientRect stays the same while scroll/pageOffset changes
        // This means, that the combination of clientRect + scroll/pageOffset does not work to calculate the offset
        // from the document's upper left origin when pinch zoom is used.
        // To work around this issue, we do not use scroll/pageOffset but get the clientRect of the html element and
        // subtract it from the element's rect, which always results in the offset from the document origin.
        // NOTE: the current way of offset calculation was implemented specifically to track event positions on the
        // seek bar, and it might break compatibility with jQuery's offset() method. If this ever turns out to be a
        // problem, this method should be reverted to the old version and the offset calculation moved to the seek bar.
        return {
            top: elementRect.top - htmlRect.top,
            left: elementRect.left - htmlRect.left,
        };
    };
    /**
     * Returns the width of the first element.
     * @returns {number} the width of the first element
     */
    DOM.prototype.width = function () {
        // TODO check if this is the same as jQuery's width() (probably not)
        return this.elements[0].offsetWidth;
    };
    /**
     * Returns the height of the first element.
     * @returns {number} the height of the first element
     */
    DOM.prototype.height = function () {
        // TODO check if this is the same as jQuery's height() (probably not)
        return this.elements[0].offsetHeight;
    };
    /**
     * Returns the size of the first element.
     * @return {Size} the size of the first element
     */
    DOM.prototype.size = function () {
        return { width: this.width(), height: this.height() };
    };
    /**
     * Attaches an event handler to one or more events on all elements.
     * @param eventName the event name (or multiple names separated by space) to listen to
     * @param eventHandler the event handler to call when the event fires
     * @param options the options for this event handler
     * @returns {DOM}
     */
    DOM.prototype.on = function (eventName, eventHandler, options) {
        var _this = this;
        var events = eventName.split(' ');
        events.forEach(function (event) {
            if (_this.elements == null) {
                _this.document.addEventListener(event, eventHandler, options);
            }
            else {
                _this.forEach(function (element) {
                    element.addEventListener(event, eventHandler, options);
                });
            }
        });
        return this;
    };
    /**
     * Removes an event handler from one or more events on all elements.
     * @param eventName the event name (or multiple names separated by space) to remove the handler from
     * @param eventHandler the event handler to remove
     * @param options the options for this event handler
     * @returns {DOM}
     */
    DOM.prototype.off = function (eventName, eventHandler, options) {
        var _this = this;
        var events = eventName.split(' ');
        events.forEach(function (event) {
            if (_this.elements == null) {
                _this.document.removeEventListener(event, eventHandler, options);
            }
            else {
                _this.forEach(function (element) {
                    element.removeEventListener(event, eventHandler, options);
                });
            }
        });
        return this;
    };
    /**
     * Adds the specified class(es) to all elements.
     * @param className the class(es) to add, multiple classes separated by space
     * @returns {DOM}
     */
    DOM.prototype.addClass = function (className) {
        this.forEach(function (element) {
            var _a;
            if (element.classList) {
                var classNames = className.split(' ')
                    .filter(function (className) { return className.length > 0; });
                if (classNames.length > 0) {
                    (_a = element.classList).add.apply(_a, classNames);
                }
            }
            else {
                element.className += ' ' + className;
            }
        });
        return this;
    };
    /**
     * Removed the specified class(es) from all elements.
     * @param className the class(es) to remove, multiple classes separated by space
     * @returns {DOM}
     */
    DOM.prototype.removeClass = function (className) {
        this.forEach(function (element) {
            var _a;
            if (element.classList) {
                var classNames = className.split(' ')
                    .filter(function (className) { return className.length > 0; });
                if (classNames.length > 0) {
                    (_a = element.classList).remove.apply(_a, classNames);
                }
            }
            else {
                element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
            }
        });
        return this;
    };
    /**
     * Checks if any of the elements has the specified class.
     * @param className the class name to check
     * @returns {boolean} true if one of the elements has the class attached, else if no element has it attached
     */
    DOM.prototype.hasClass = function (className) {
        var hasClass = false;
        this.forEach(function (element) {
            if (element.classList) {
                if (element.classList.contains(className)) {
                    // Since we are inside a handler, we can't just 'return true'. Instead, we save it to a variable
                    // and return it at the end of the function body.
                    hasClass = true;
                }
            }
            else {
                if (new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className)) {
                    // See comment above
                    hasClass = true;
                }
            }
        });
        return hasClass;
    };
    DOM.prototype.css = function (propertyNameOrCollection, value) {
        if (typeof propertyNameOrCollection === 'string') {
            var propertyName = propertyNameOrCollection;
            if (arguments.length === 2) {
                return this.setCss(propertyName, value);
            }
            else {
                return this.getCss(propertyName);
            }
        }
        else {
            var propertyValueCollection = propertyNameOrCollection;
            return this.setCssCollection(propertyValueCollection);
        }
    };
    /**
     * Removes an inline CSS property if it exists
     * @param propertyName name of the property to remove
     * @param elementIndex index of the element whose CSS property should get removed
     */
    DOM.prototype.removeCss = function (propertyName, elementIndex) {
        if (elementIndex === void 0) { elementIndex = 0; }
        return this.elements[elementIndex].style.removeProperty(propertyName);
    };
    DOM.prototype.getCss = function (propertyName) {
        return getComputedStyle(this.elements[0])[propertyName];
    };
    DOM.prototype.setCss = function (propertyName, value) {
        this.forEach(function (element) {
            // <any> cast to resolve TS7015: http://stackoverflow.com/a/36627114/370252
            element.style[propertyName] = value;
        });
        return this;
    };
    DOM.prototype.setCssCollection = function (ruleValueCollection) {
        this.forEach(function (element) {
            // http://stackoverflow.com/a/34490573/370252
            Object.assign(element.style, ruleValueCollection);
        });
        return this;
    };
    return DOM;
}());
exports.DOM = DOM;

},{}],88:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorUtils = void 0;
/**
 * @category Utils
 */
var ErrorUtils;
(function (ErrorUtils) {
    ErrorUtils.defaultErrorMessages = {
        1000: 'Error is unknown',
        1001: 'The player API is not available after a call to PlayerAPI.destroy.',
        1100: 'General setup error',
        1101: 'There was an error when inserting the HTML video element',
        1102: 'No configuration was provided',
        1103: 'The license is not valid',
        1104: 'The the domain-locked player is not authorized to playback on this domain',
        1105: 'The domain is not allowlisted',
        1106: 'The license server URL is invalid',
        1107: 'The impression server URL is invalid',
        1108: 'Could not initialize a rendering engine',
        1109: 'The used flash version does not support playback',
        1110: 'Native Flash is not authorized by a valid Adobe token',
        1111: 'Flash doesn\'t have sufficient resources',
        1112: 'Flash container API not available',
        1113: 'Protocol not supported. This site has been loaded using "file" protocol, but unfortunately this is not supported. Please load the page using a web server (using http or https)',
        1200: 'General source error',
        1201: 'No valid source was provided',
        1202: 'The downloaded manifest is invalid',
        1203: 'There was no technology detected to playback the provided source',
        1204: 'The stream type is not supported',
        1205: 'The forced technology is not supported',
        1206: 'No stream found for supported technologies.',
        1207: 'The downloaded segment is empty',
        1208: 'The manifest could not be loaded',
        1209: 'Progressive stream type not supported or the stream has an error',
        1210: 'HLS stream has an error',
        1211: 'The encryption method is not supported',
        1300: 'General playback error',
        1301: 'Video decoder or demuxer had an error with the content',
        1302: 'General error if Flash renderer has an error',
        1303: 'Flash doesn\'t have sufficient resources',
        1304: 'The transmuxer could not be initialized',
        1400: 'Network error while downloading',
        1401: 'The manifest download timed out',
        1402: 'The segment download timed out',
        1403: 'The progressive stream download timed out',
        1404: 'The Certificate could not be loaded',
        2000: 'General DRM error',
        2001: 'Required DRM configuration is missing',
        2002: 'The licensing server URL is missing',
        2003: 'License request failed',
        2004: 'Key or KeyId is missing',
        2005: 'Key size is not supported',
        2006: 'Unable to instantiate a key system supporting the required combinations',
        2007: 'Unable to create or initialize key session',
        2008: 'The MediaKey object could not be created/initialized',
        2009: 'Key error',
        2010: 'The key system is not supported',
        2011: 'The certificate is not valid',
        2012: 'Invalid header key/value pair for PlayReady license request',
        2013: 'Content cannot be played back because the output is restricted on this machine',
        2014: 'DRM error for the Flash renderer',
        2100: 'General VR error',
        2101: 'Player technology not compatible with VR playback',
        3000: 'General module error',
        3001: 'The definition of the module is invalid (e.g. incomplete).',
        3002: 'The module definition specifies dependencies but the module is not provided via a function for deferred loading.',
        3003: 'A module cannot be loaded because it has not been added to the player core.',
        3004: 'A module cannot be loaded because one or more dependencies are missing.',
        3100: 'An Advertising module error has occurred. Refer to the attached AdvertisingError.',
    };
    ErrorUtils.defaultMobileV3ErrorMessageTranslator = function (error) {
        return error.message;
    };
    ErrorUtils.defaultWebErrorMessageTranslator = function (error) {
        var errorMessage = ErrorUtils.defaultErrorMessages[error.code];
        if (errorMessage) {
            // Use the error message text if there is one
            return "".concat(errorMessage, "\n(").concat(error.name, ")"); // default error message style
        }
        else {
            // Fallback to error code/name if no message is defined
            return "".concat(error.code, " ").concat(error.name);
        }
    };
})(ErrorUtils = exports.ErrorUtils || (exports.ErrorUtils = {}));

},{}],89:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventDispatcher = void 0;
var arrayutils_1 = require("./arrayutils");
var timeout_1 = require("./timeout");
/**
 * Event dispatcher to subscribe and trigger events. Each event should have its own dispatcher.
 */
var EventDispatcher = /** @class */ (function () {
    function EventDispatcher() {
        this.listeners = [];
    }
    /**
     * {@inheritDoc}
     */
    EventDispatcher.prototype.subscribe = function (listener) {
        this.listeners.push(new EventListenerWrapper(listener));
    };
    /**
     * {@inheritDoc}
     */
    EventDispatcher.prototype.subscribeOnce = function (listener) {
        this.listeners.push(new EventListenerWrapper(listener, true));
    };
    /**
     * {@inheritDoc}
     */
    EventDispatcher.prototype.subscribeRateLimited = function (listener, rateMs) {
        this.listeners.push(new RateLimitedEventListenerWrapper(listener, rateMs));
    };
    /**
     * {@inheritDoc}
     */
    EventDispatcher.prototype.unsubscribe = function (listener) {
        // Iterate through listeners, compare with parameter, and remove if found
        // NOTE: In case we ever remove all matching listeners instead of just the first, we need to reverse-iterate here
        for (var i = 0; i < this.listeners.length; i++) {
            var subscribedListener = this.listeners[i];
            if (subscribedListener.listener === listener) {
                subscribedListener.clear();
                arrayutils_1.ArrayUtils.remove(this.listeners, subscribedListener);
                return true;
            }
        }
        return false;
    };
    /**
     * Removes all listeners from this dispatcher.
     */
    EventDispatcher.prototype.unsubscribeAll = function () {
        // In case of RateLimitedEventListenerWrapper we need to make sure that the timeout callback won't be called
        for (var _i = 0, _a = this.listeners; _i < _a.length; _i++) {
            var listener = _a[_i];
            listener.clear();
        }
        this.listeners = [];
    };
    /**
     * Dispatches an event to all subscribed listeners.
     * @param sender the source of the event
     * @param args the arguments for the event
     */
    EventDispatcher.prototype.dispatch = function (sender, args) {
        if (args === void 0) { args = null; }
        var listenersToRemove = [];
        // Call every listener
        // We iterate over a copy of the array of listeners to avoid the case where events are not fired on listeners when
        // listeners are unsubscribed from within the event handlers during a dispatch (because the indices change and
        // listeners are shifted within the array).
        // This means that listener x+1 will still be called if unsubscribed from within the handler of listener x, as well
        // as listener y+1 will not be called when subscribed from within the handler of listener y.
        // Array.slice(0) is the fastest array copy method according to: https://stackoverflow.com/a/21514254/370252
        var listeners = this.listeners.slice(0);
        for (var _i = 0, listeners_1 = listeners; _i < listeners_1.length; _i++) {
            var listener = listeners_1[_i];
            listener.fire(sender, args);
            if (listener.isOnce()) {
                listenersToRemove.push(listener);
            }
        }
        // Remove one-time listener
        for (var _a = 0, listenersToRemove_1 = listenersToRemove; _a < listenersToRemove_1.length; _a++) {
            var listenerToRemove = listenersToRemove_1[_a];
            arrayutils_1.ArrayUtils.remove(this.listeners, listenerToRemove);
        }
    };
    /**
     * Returns the event that this dispatcher manages and on which listeners can subscribe and unsubscribe event handlers.
     * @returns {Event}
     */
    EventDispatcher.prototype.getEvent = function () {
        // For now, just cast the event dispatcher to the event interface. At some point in the future when the
        // codebase grows, it might make sense to split the dispatcher into separate dispatcher and event classes.
        return this;
    };
    return EventDispatcher;
}());
exports.EventDispatcher = EventDispatcher;
/**
 * A basic event listener wrapper to manage listeners within the {@link EventDispatcher}. This is a 'private' class
 * for internal dispatcher use and it is therefore not exported.
 */
var EventListenerWrapper = /** @class */ (function () {
    function EventListenerWrapper(listener, once) {
        if (once === void 0) { once = false; }
        this.eventListener = listener;
        this.once = once;
    }
    Object.defineProperty(EventListenerWrapper.prototype, "listener", {
        /**
         * Returns the wrapped event listener.
         * @returns {EventListener<Sender, Args>}
         */
        get: function () {
            return this.eventListener;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Fires the wrapped event listener with the given arguments.
     * @param sender
     * @param args
     */
    EventListenerWrapper.prototype.fire = function (sender, args) {
        this.eventListener(sender, args);
    };
    /**
     * Checks if this listener is scheduled to be called only once.
     * @returns {boolean} once if true
     */
    EventListenerWrapper.prototype.isOnce = function () {
        return this.once;
    };
    EventListenerWrapper.prototype.clear = function () {
    };
    return EventListenerWrapper;
}());
/**
 * Extends the basic {@link EventListenerWrapper} with rate-limiting functionality.
 */
var RateLimitedEventListenerWrapper = /** @class */ (function (_super) {
    __extends(RateLimitedEventListenerWrapper, _super);
    function RateLimitedEventListenerWrapper(listener, rateMs) {
        var _this = _super.call(this, listener) || this;
        _this.rateMs = rateMs;
        // starting limiting the events to the given value
        var startRateLimiting = function () {
            _this.rateLimitTimout.start();
        };
        // timout for limiting the events
        _this.rateLimitTimout = new timeout_1.Timeout(_this.rateMs, function () {
            if (_this.lastSeenEvent) {
                _this.fireSuper(_this.lastSeenEvent.sender, _this.lastSeenEvent.args);
                startRateLimiting(); // start rateLimiting again to keep rate limit active even after firing the last seen event
                _this.lastSeenEvent = null;
            }
        });
        // In case the events stopping during the rateLimiting we need to track the last seen one and delegate after the
        // rate limiting is finished. This prevents missing the last update due to the rate limit.
        _this.rateLimitingEventListener = function (sender, args) {
            // only fire events if the rateLimiting is not running
            if (_this.shouldFireEvent()) {
                _this.fireSuper(sender, args);
                startRateLimiting();
                return;
            }
            _this.lastSeenEvent = {
                sender: sender,
                args: args,
            };
        };
        return _this;
    }
    RateLimitedEventListenerWrapper.prototype.shouldFireEvent = function () {
        return !this.rateLimitTimout.isActive();
    };
    RateLimitedEventListenerWrapper.prototype.fireSuper = function (sender, args) {
        // Fire the actual external event listener
        _super.prototype.fire.call(this, sender, args);
    };
    RateLimitedEventListenerWrapper.prototype.fire = function (sender, args) {
        // Fire the internal rate-limiting listener instead of the external event listener
        this.rateLimitingEventListener(sender, args);
    };
    RateLimitedEventListenerWrapper.prototype.clear = function () {
        _super.prototype.clear.call(this);
        this.rateLimitTimout.clear();
    };
    return RateLimitedEventListenerWrapper;
}(EventListenerWrapper));

},{"./arrayutils":6,"./timeout":116}],90:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FocusVisibilityTracker = void 0;
var FocusVisibleCssClassName = 'bmpui-focus-visible';
var FocusVisibilityTracker = /** @class */ (function () {
    function FocusVisibilityTracker(bitmovinUiPrefix) {
        var _this = this;
        this.bitmovinUiPrefix = bitmovinUiPrefix;
        this.lastInteractionWasKeyboard = true;
        this.onKeyDown = function (e) {
            if (e.metaKey || e.altKey || e.ctrlKey) {
                return;
            }
            _this.lastInteractionWasKeyboard = true;
        };
        this.onMouseOrPointerOrTouch = function () { return (_this.lastInteractionWasKeyboard = false); };
        this.onFocus = function (_a) {
            var element = _a.target;
            if (_this.lastInteractionWasKeyboard &&
                isHtmlElement(element) &&
                isBitmovinUi(element, _this.bitmovinUiPrefix) &&
                !element.classList.contains(FocusVisibleCssClassName)) {
                element.classList.add(FocusVisibleCssClassName);
            }
        };
        this.onBlur = function (_a) {
            var element = _a.target;
            if (isHtmlElement(element)) {
                element.classList.remove(FocusVisibleCssClassName);
            }
        };
        this.eventHandlerMap = {
            mousedown: this.onMouseOrPointerOrTouch,
            pointerdown: this.onMouseOrPointerOrTouch,
            touchstart: this.onMouseOrPointerOrTouch,
            keydown: this.onKeyDown,
            focus: this.onFocus,
            blur: this.onBlur,
        };
        this.registerEventListeners();
    }
    FocusVisibilityTracker.prototype.registerEventListeners = function () {
        for (var event_1 in this.eventHandlerMap) {
            document.addEventListener(event_1, this.eventHandlerMap[event_1], true);
        }
    };
    FocusVisibilityTracker.prototype.unregisterEventListeners = function () {
        for (var event_2 in this.eventHandlerMap) {
            document.removeEventListener(event_2, this.eventHandlerMap[event_2], true);
        }
    };
    FocusVisibilityTracker.prototype.release = function () {
        this.unregisterEventListeners();
    };
    return FocusVisibilityTracker;
}());
exports.FocusVisibilityTracker = FocusVisibilityTracker;
function isBitmovinUi(element, bitmovinUiPrefix) {
    return element.id.indexOf(bitmovinUiPrefix) === 0;
}
function isHtmlElement(element) {
    return (element instanceof HTMLElement && element.classList instanceof DOMTokenList);
}

},{}],91:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupPlaybackSuspensionReason = void 0;
/**
 * The Group Playback API offers control over synchronized playback of a group of clients, e.g. for Apple SharePlay
 * sessions.

 * Note: The API currently only covers the immediate needs of the iOS SDK in combination with our UI which is regarding
 * temporarily suspending synchronization of the player from the group. But it is open to be extended as needed in the
 * future.
 */
/**
 * Reason for suspending the synchronization with the group.
 */
var GroupPlaybackSuspensionReason;
(function (GroupPlaybackSuspensionReason) {
    GroupPlaybackSuspensionReason["UserIsScrubbing"] = "userIsScrubbing";
})(GroupPlaybackSuspensionReason = exports.GroupPlaybackSuspensionReason || (exports.GroupPlaybackSuspensionReason = {}));

},{}],92:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Guid = void 0;
var Guid;
(function (Guid) {
    var guid = 1;
    function next() {
        return guid++;
    }
    Guid.next = next;
})(Guid = exports.Guid || (exports.Guid = {}));

},{}],93:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageLoader = void 0;
var dom_1 = require("./dom");
/**
 * Tracks the loading state of images.
 */
var ImageLoader = /** @class */ (function () {
    function ImageLoader() {
        this.state = {};
    }
    /**
     * Loads an image and call the callback once the image is loaded. If the image is already loaded, the callback
     * is called immediately, else it is called once loading has finished. Calling this method multiple times for the
     * same image while it is loading calls only let callback passed into the last call.
     * @param url The url to the image to load
     * @param loadedCallback The callback that is called when the image is loaded
     */
    ImageLoader.prototype.load = function (url, loadedCallback) {
        var _this = this;
        if (!this.state[url]) {
            // When the image was never attempted to be loaded before, we create a state and store it in the state map
            // for later use when the same image is requested to be loaded again.
            var state_1 = {
                url: url,
                image: new dom_1.DOM('img', {}),
                loadedCallback: loadedCallback,
                loaded: false,
                width: 0,
                height: 0,
            };
            this.state[url] = state_1;
            // Listen to the load event, update the state and call the callback once the image is loaded
            state_1.image.on('load', function (e) {
                state_1.loaded = true;
                state_1.width = state_1.image.get(0).width;
                state_1.height = state_1.image.get(0).height;
                _this.callLoadedCallback(state_1);
            });
            // Set the image URL to start the loading
            state_1.image.attr('src', state_1.url);
        }
        else {
            // We have a state for the requested image, so it is either already loaded or currently loading
            var state = this.state[url];
            // We overwrite the callback to make sure that only the callback of the latest call gets executed.
            // Earlier callbacks become invalid once a new load call arrives, and they are not called as long as the image
            // is not loaded.
            state.loadedCallback = loadedCallback;
            // When the image is already loaded, we directly execute the callback instead of waiting for the load event
            if (state.loaded) {
                this.callLoadedCallback(state);
            }
        }
    };
    ImageLoader.prototype.callLoadedCallback = function (state) {
        state.loadedCallback(state.url, state.width, state.height);
    };
    return ImageLoader;
}());
exports.ImageLoader = ImageLoader;

},{"./dom":87}],94:[function(require,module,exports){
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.i18n = exports.I18n = exports.defaultVocabularies = void 0;
var de_json_1 = __importDefault(require("./languages/de.json"));
var en_json_1 = __importDefault(require("./languages/en.json"));
var es_json_1 = __importDefault(require("./languages/es.json"));
var nl_json_1 = __importDefault(require("./languages/nl.json"));
exports.defaultVocabularies = {
    'en': en_json_1.default,
    'de': de_json_1.default,
    'es': es_json_1.default,
    'nl': nl_json_1.default,
};
var defaultLocalizationConfig = {
    language: 'en',
    vocabularies: exports.defaultVocabularies,
};
/**
 * @category Localization
 */
var I18n = /** @class */ (function () {
    function I18n(config) {
        this.setConfig(config);
    }
    I18n.prototype.setConfig = function (config) {
        var mergedConfig = __assign(__assign({}, defaultLocalizationConfig), config);
        var detectBrowserLanguage = mergedConfig.language === 'auto';
        var vocabularies = this.mergeVocabulariesWithDefaultVocabularies(mergedConfig.vocabularies);
        this.initializeLanguage(mergedConfig.language, detectBrowserLanguage, vocabularies);
        this.initializeVocabulary(vocabularies);
    };
    I18n.containsLanguage = function (vocabularies, language) {
        return vocabularies.hasOwnProperty(language);
    };
    I18n.prototype.mergeVocabulariesWithDefaultVocabularies = function (vocabularies) {
        if (vocabularies === void 0) { vocabularies = {}; }
        var rawVocabularies = __assign(__assign({}, exports.defaultVocabularies), vocabularies);
        return Object.keys(rawVocabularies).reduce(function (mergedVocabularies, language) {
            var _a;
            var vocabulary = rawVocabularies[language];
            if (I18n.containsLanguage(exports.defaultVocabularies, language) && I18n.containsLanguage(vocabularies, language)) {
                vocabulary = __assign(__assign({}, exports.defaultVocabularies[language]), vocabularies[language]);
            }
            return __assign(__assign({}, mergedVocabularies), (_a = {}, _a[language] = vocabulary, _a));
        }, {});
    };
    I18n.prototype.initializeLanguage = function (language, browserLanguageDetectionEnabled, vocabularies) {
        if (browserLanguageDetectionEnabled) {
            var userLanguage = window.navigator.language;
            if (I18n.containsLanguage(vocabularies, userLanguage)) {
                this.language = userLanguage;
                return;
            }
            var shortenedUserLanguage = userLanguage.slice(0, 2);
            if (I18n.containsLanguage(vocabularies, shortenedUserLanguage)) {
                this.language = shortenedUserLanguage;
                return;
            }
        }
        this.language = language;
    };
    I18n.prototype.initializeVocabulary = function (vocabularies) {
        this.vocabulary = ['en', this.language]
            .reduce(function (vocab, lang) { return (__assign(__assign({}, vocab), (vocabularies[lang] || {}))); }, {});
    };
    I18n.prototype.replaceVariableWithPlaceholderIfExists = function (text, config) {
        var matches = text.match(new RegExp('{[a-zA-Z0-9]+}', 'g'));
        if (matches.length === 0) {
            return text;
        }
        return matches
            .map(function (m) { return ({ match: m, key: m.slice(1, -1) }); })
            .reduce(function (str, _a) {
            var key = _a.key, match = _a.match;
            return config.hasOwnProperty(key) ? str.replace(match, config[key]) : str;
        }, text);
    };
    I18n.prototype.getLocalizer = function (key, config) {
        var _this = this;
        return function () {
            if (key == null) { // because sometimes we call toDomElement() without configuring the component or setting text...
                return undefined;
            }
            var vocabularyString = _this.vocabulary[key];
            if (vocabularyString == null) {
                vocabularyString = key;
            }
            if (config != null) {
                vocabularyString = _this.replaceVariableWithPlaceholderIfExists(vocabularyString, config);
            }
            return vocabularyString;
        };
    };
    I18n.prototype.performLocalization = function (text) {
        return typeof text === 'function' ? text() : text;
    };
    return I18n;
}());
exports.I18n = I18n;
/**
 * @category Localization
 */
exports.i18n = new I18n(defaultLocalizationConfig);

},{"./languages/de.json":95,"./languages/en.json":96,"./languages/es.json":97,"./languages/nl.json":98}],95:[function(require,module,exports){
module.exports={
  "settings.video.quality": "Videoqualität",
  "settings.audio.quality": "Audioqualität",
  "settings.audio.track": "Audiospur",
  "speed": "Geschwindigkeit",
  "play": "Abspielen",
  "pause": "Pause",
  "playPause": "Abspielen/Pause",
  "open": "öffnen",
  "close": "Schließen",
  "settings.audio.mute": "Stummschaltung",
  "settings.audio.volume": "Lautstärke",
  "pictureInPicture": "Bild im Bild",
  "appleAirplay": "Apple AirPlay",
  "googleCast": "Google Cast",
  "vr": "VR",
  "settings": "Einstellungen",
  "fullscreen": "Vollbild",
  "off": "aus",
  "settings.subtitles": "Untertitel",
  "settings.subtitles.font.size": "Größe",
  "settings.subtitles.font.family": "Schriftart",
  "settings.subtitles.font.color": "Farbe",
  "settings.subtitles.font.opacity": "Deckkraft",
  "settings.subtitles.characterEdge": "Ränder",
  "settings.subtitles.background.color": "Hintergrundfarbe",
  "settings.subtitles.background.opacity": "Hintergrunddeckkraft",
  "settings.subtitles.window.color": "Hintergrundfarbe",
  "settings.subtitles.window.opacity": "Hintergrunddeckkraft",
  "settings.time.hours": "Stunden",
  "settings.time.minutes": "Minuten",
  "settings.time.seconds": "Sekunden",
  "back": "Zurück",
  "reset": "Zurücksetzen",
  "replay": "Wiederholen",
  "ads.remainingTime": "Diese Anzeige endet in {remainingTime} Sekunden",
  "default": "standard",
  "colors.white": "weiß",
  "colors.black": "schwarz",
  "colors.red": "rot",
  "colors.green": "grün",
  "colors.blue": "blau",
  "colors.yellow": "gelb",
  "subtitle.example": "Beispiel Untertitel",
  "subtitle.select": "Untertitel auswählen",
  "playingOn": "Spielt auf <strong>{castDeviceName}</strong>",
  "connectingTo": "Verbindung mit <strong>{castDeviceName}</strong> wird hergestellt...",
  "watermarkLink": "Link zum Homepage",
  "controlBar": "Videoplayer Kontrollen",
  "player": "Video player",
  "seekBar": "Video-Timeline",
  "seekBar.value": "Wert",
  "seekBar.timeshift": "Timeshift",
  "seekBar.durationText": "aus",
  "quickseek.forward": "Vor",
  "quickseek.rewind": "Zurück",
  "ecoMode": "ecoMode",
  "ecoMode.title":"Eco Mode"
}

},{}],96:[function(require,module,exports){
module.exports={
  "settings.video.quality": "Video Quality",
  "settings.audio.quality": "Audio Quality",
  "settings.audio.track": "Audio Track",
  "settings.audio.mute" : "Mute",
  "settings.audio.volume" : "Volume",
  "settings.subtitles.window.color" : "Window color",
  "settings.subtitles.window.opacity" : "Window opacity",
  "settings.subtitles" : "Subtitles",
  "settings.subtitles.font.color" : "Font color",
  "settings.subtitles.font.opacity" : "Font opacity",
  "settings.subtitles.background.color" : "Background color",
  "settings.subtitles.background.opacity": "Background opacity",
  "colors.white": "white",
  "colors.black": "black",
  "colors.red": "red",
  "colors.green": "green",
  "colors.blue": "blue",
  "colors.cyan": "cyan",
  "colors.yellow": "yellow",
  "colors.magenta": "magenta",
  "percent": "{value}%",
  "settings.subtitles.font.size": "Font size",
  "settings.subtitles.characterEdge": "Character edge",
  "settings.subtitles.characterEdge.raised": "raised",
  "settings.subtitles.characterEdge.depressed": "depressed",
  "settings.subtitles.characterEdge.uniform": "uniform",
  "settings.subtitles.characterEdge.dropshadowed": "drop shadowed",
  "settings.subtitles.font.family": "Font family",
  "settings.subtitles.font.family.monospacedserif": "monospaced serif",
  "settings.subtitles.font.family.proportionalserif": "proportional serif",
  "settings.subtitles.font.family.monospacedsansserif": "monospaced sans serif",
  "settings.subtitles.font.family.proportionalsansserif": "proportional sans serif",
  "settings.subtitles.font.family.casual": "casual",
  "settings.subtitles.font.family.cursive": "cursive",
  "settings.subtitles.font.family.smallcapital": "small capital",
  "settings.time.hours": "Hours",
  "settings.time.minutes": "Minutes",
  "settings.time.seconds": "Seconds",
  "ads.remainingTime": "This ad will end in {remainingTime} seconds.",
  "settings": "Settings",
  "fullscreen" : "Fullscreen",
  "speed": "Speed",
  "playPause" : "Play/Pause",
  "play": "Play",
  "pause": "Pause",
  "open": "open",
  "close": "Close",
  "pictureInPicture": "Picture-in-Picture",
  "appleAirplay" : "Apple AirPlay",
  "googleCast": "Google Cast",
  "vr" : "VR",
  "off": "off",
  "auto": "auto",
  "ecoMode": "ecoMode",
  "ecoMode.title":"Eco Mode",
  "back" : "Back",
  "reset": "Reset",
  "replay": "Replay",
  "normal": "normal",
  "default": "default",
  "live": "Live",
  "subtitle.example": "example subtitle",
  "subtitle.select": "Select subtitle",
  "playingOn": "Playing on <strong>{castDeviceName}</strong>",
  "connectingTo": "Connecting to <strong>{castDeviceName}</strong>...",
  "watermarkLink": "Link to Homepage",
  "controlBar": "Video player controls",
  "player": "Video player",
  "seekBar": "Video timeline",
  "seekBar.value": "Value",
  "seekBar.timeshift": "Timeshift",
  "seekBar.durationText": "out of",
  "quickseek.forward": "Fast Forward",
  "quickseek.rewind": "Rewind"
}

},{}],97:[function(require,module,exports){
module.exports={
  "settings.video.quality": "Calidad de Video",
  "settings.audio.quality": "Calidad de Audio",
  "settings.audio.track": "Pista de Audio",
  "settings.audio.mute" : "Silencio",
  "settings.audio.volume" : "Volumen",
  "settings.subtitles.window.color" : "color de Ventana",
  "settings.subtitles.window.opacity" : "opacidad de Ventana",
  "settings.subtitles" : "Subtítulos",
  "settings.subtitles.font.color" : "color de Fuente",
  "settings.subtitles.font.opacity" : "opacidad de Fuente",
  "settings.subtitles.background.color" : "color de Fondo",
  "settings.subtitles.background.opacity": "opacidad de Fondo",
  "colors.white": "blanco",
  "colors.black": "negro",
  "colors.red": "rojo",
  "colors.green": "verde",
  "colors.blue": "azul",
  "colors.cyan": "cian",
  "colors.yellow": "amarillo",
  "colors.magenta": "magenta",
  "percent": "{value}%",
  "settings.subtitles.font.size": "tamaño de Fuente",
  "settings.subtitles.characterEdge": "borde del Caracter",
  "settings.subtitles.characterEdge.raised": "alzado",
  "settings.subtitles.characterEdge.depressed": "discreto",
  "settings.subtitles.characterEdge.uniform": "uniforme",
  "settings.subtitles.characterEdge.dropshadowed": "sombreado",
  "settings.subtitles.font.family": "tipo de Fuente",
  "settings.subtitles.font.family.monospacedserif": "monospaced serif",
  "settings.subtitles.font.family.proportionalserif": "proportional serif",
  "settings.subtitles.font.family.monospacedsansserif": "monospaced sans serif",
  "settings.subtitles.font.family.proportionalsansserif": "proportional sans serif",
  "settings.subtitles.font.family.casual": "casual",
  "settings.subtitles.font.family.cursive": "cursiva",
  "settings.subtitles.font.family.smallcapital": "small capital",
  "settings.time.hours": "Horas",
  "settings.time.minutes": "Minutos",
  "settings.time.seconds": "Segundos",
  "ads.remainingTime": "Este anuncio acabará en {remainingTime} segundos.",
  "settings": "Configuración",
  "fullscreen" : "Pantalla Completa",
  "speed": "Velocidad",
  "playPause" : "Reproducir/Pausa",
  "play": "Reproducir",
  "pause": "Pausa",
  "open": "Abrir",
  "close": "Cerrar",
  "pictureInPicture": "Imagen en Imagen",
  "appleAirplay" : "Apple AirPlay",
  "googleCast": "Google Cast",
  "vr" : "VR",
  "off": "off",
  "auto": "auto",
  "ecoMode": "ecoMode",
  "ecoMode.title": "Eco Mode",
  "back" : "Atrás",
  "reset": "Reiniciar",
  "replay": "Rebobinar",
  "normal": "normal",
  "default": "predeterminado",
  "live": "Directo",
  "subtitle.example": "Ejemplo de Subtítulo",
  "subtitle.select": "Seleccionar subtítulo",
  "playingOn": "Reproduciendo en <strong>{castDeviceName}</strong>",
  "connectingTo": "Conectando a <strong>{castDeviceName}</strong>...",
  "watermarkLink": "Enlace al inicio",
  "controlBar": "Controles del Reproductor",
  "player": "Reproductor de Video",
  "seekBar": "Línea de Tiempo",
  "seekBar.value": "posición",
  "seekBar.timeshift": "cambio de posición",
  "seekBar.durationText": "de",
  "quickseek.forward": "Adelantar",
  "quickseek.rewind": "Rebobinar"
}
},{}],98:[function(require,module,exports){
module.exports={
  "settings.video.quality": "Videokwaliteit",
  "settings.audio.quality": "Audiokwaliteit",
  "settings.audio.track": "Audiospoor",
  "settings.audio.mute": "Dempen",
  "settings.audio.volume": "Volume",
  "settings.subtitles.window.color": "Vensterkleur",
  "settings.subtitles.window.opacity": "Venster doorzichtigheid",
  "settings.subtitles": "Ondertiteling",
  "settings.subtitles.font.color": "Lettertype kleur",
  "settings.subtitles.font.opacity": "Lettertype doorzichtigheid",
  "settings.subtitles.background.color": "Achtergrondkleur",
  "settings.subtitles.background.opacity": "Achtergrond doorzichtigheid",
  "colors.white": "wit",
  "colors.black": "zwart",
  "colors.red": "rood",
  "colors.green": "groen",
  "colors.blue": "blauw",
  "colors.cyan": "cyaan",
  "colors.yellow": "geel",
  "colors.magenta": "magenta",
  "percent": "{value}%",
  "settings.subtitles.font.size": "Lettertype grootte",
  "settings.subtitles.characterEdge": "Lettertype rand",
  "settings.subtitles.characterEdge.raised": "verhoogd",
  "settings.subtitles.characterEdge.depressed": "verlaagd",
  "settings.subtitles.characterEdge.uniform": "uniform",
  "settings.subtitles.characterEdge.dropshadowed": "schaduw",
  "settings.subtitles.font.family": "Standaard lettertype",
  "settings.subtitles.font.family.monospacedserif": "monospace serif",
  "settings.subtitles.font.family.proportionalserif": "proportioneel serif",
  "settings.subtitles.font.family.monospacedsansserif": "monospace sans-serif",
  "settings.subtitles.font.family.proportionalsansserif": "proportioneel sans-serif",
  "settings.subtitles.font.family.casual": "casual",
  "settings.subtitles.font.family.cursive": "cursief",
  "settings.subtitles.font.family.smallcapital": "kleine hoofdletters",
  "settings.time.hours": "Uren",
  "settings.time.minutes": "Minuten",
  "settings.time.seconds": "Seconden",
  "ads.remainingTime": "Deze advertentie eindigt in {remainingTime} seconden.",
  "settings": "Instellingen",
  "fullscreen": "Volledig scherm",
  "speed": "Snelheid",
  "playPause": "Afspelen/Pauzeren",
  "play": "Afspelen",
  "pause": "Pauzeren",
  "open": "Openen",
  "close": "Sluiten",
  "pictureInPicture": "Picture-in-Picture",
  "appleAirplay": "Apple AirPlay",
  "googleCast": "Google Cast",
  "vr": "VR",
  "off": "uit",
  "auto": "automatisch",
  "ecoMode": "Eco-modus",
  "ecoMode.title": "Eco-modus",
  "back": "Terug",
  "reset": "Reset",
  "replay": "Opnieuw afspelen",
  "normal": "normaal",
  "default": "standaard",
  "live": "Live",
  "subtitle.example": "voorbeeld ondertiteling",
  "subtitle.select": "Selecteer ondertiteling",
  "playingOn": "Speelt af op <strong>{castDeviceName}</strong>",
  "connectingTo": "Verbinden met <strong>{castDeviceName}</strong>...",
  "watermarkLink": "Link naar homepage",
  "controlBar": "Videospeler bediening",
  "player": "Videospeler",
  "seekBar": "Video tijdlijn",
  "seekBar.value": "Waarde",
  "seekBar.timeshift": "Tijdverschuiving",
  "seekBar.durationText": "van",
  "quickseek.forward": "Vooruitspoelen",
  "quickseek.rewind": "Terugspoelen"
}
},{}],99:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClickOverlay = exports.VolumeControlButton = exports.TitleBar = exports.SubtitleSelectBox = exports.SubtitleOverlay = exports.SeekBarLabel = exports.RecommendationOverlay = exports.ErrorMessageOverlay = exports.Component = exports.CastToggleButton = exports.CastStatusOverlay = exports.AudioTrackSelectBox = exports.AudioQualitySelectBox = exports.Label = exports.Container = exports.UIContainer = exports.Watermark = exports.VRToggleButton = exports.VolumeToggleButton = exports.VideoQualitySelectBox = exports.ToggleButton = exports.SettingsToggleButton = exports.SettingsPanel = exports.ItemSelectionList = exports.SelectBox = exports.SeekBar = exports.PlaybackToggleButton = exports.PlaybackTimeLabelMode = exports.PlaybackTimeLabel = exports.HugePlaybackToggleButton = exports.FullscreenToggleButton = exports.ControlBar = exports.Button = exports.ListOrientation = exports.ListNavigationGroup = exports.RootNavigationGroup = exports.NavigationGroup = exports.SpatialNavigation = exports.I18n = exports.i18n = exports.ErrorUtils = exports.StorageUtils = exports.BrowserUtils = exports.UIUtils = exports.PlayerUtils = exports.StringUtils = exports.ArrayUtils = exports.DemoFactory = exports.UIFactory = exports.version = void 0;
exports.ListSelector = exports.QuickSeekButton = exports.ReplayButton = exports.SettingsPanelItem = exports.SubtitleSettingsPanelPage = exports.SettingsPanelPageOpenButton = exports.SettingsPanelPageBackButton = exports.SettingsPanelPage = exports.AudioTrackListBox = exports.SubtitleListBox = exports.ListBox = exports.SubtitleSettingsResetButton = exports.WindowOpacitySelectBox = exports.WindowColorSelectBox = exports.SubtitleSettingsLabel = exports.SubtitleSettingSelectBox = exports.FontSizeSelectBox = exports.FontOpacitySelectBox = exports.FontFamilySelectBox = exports.FontColorSelectBox = exports.CharacterEdgeSelectBox = exports.BackgroundOpacitySelectBox = exports.BackgroundColorSelectBox = exports.Spacer = exports.PictureInPictureToggleButton = exports.VolumeSlider = exports.AirPlayToggleButton = exports.MetadataLabelContent = exports.MetadataLabel = exports.CloseButton = exports.PlaybackToggleOverlay = exports.CastUIContainer = exports.BufferingOverlay = exports.HugeReplayButton = exports.PlaybackSpeedSelectBox = exports.AdClickOverlay = exports.AdMessageLabel = exports.AdSkipButton = void 0;
exports.version = '3.73.0';
// Management
__exportStar(require("./uimanager"), exports);
__exportStar(require("./uiconfig"), exports);
// Factories
var uifactory_1 = require("./uifactory");
Object.defineProperty(exports, "UIFactory", { enumerable: true, get: function () { return uifactory_1.UIFactory; } });
var demofactory_1 = require("./demofactory");
Object.defineProperty(exports, "DemoFactory", { enumerable: true, get: function () { return demofactory_1.DemoFactory; } });
// Utils
var arrayutils_1 = require("./arrayutils");
Object.defineProperty(exports, "ArrayUtils", { enumerable: true, get: function () { return arrayutils_1.ArrayUtils; } });
var stringutils_1 = require("./stringutils");
Object.defineProperty(exports, "StringUtils", { enumerable: true, get: function () { return stringutils_1.StringUtils; } });
var playerutils_1 = require("./playerutils");
Object.defineProperty(exports, "PlayerUtils", { enumerable: true, get: function () { return playerutils_1.PlayerUtils; } });
var uiutils_1 = require("./uiutils");
Object.defineProperty(exports, "UIUtils", { enumerable: true, get: function () { return uiutils_1.UIUtils; } });
var browserutils_1 = require("./browserutils");
Object.defineProperty(exports, "BrowserUtils", { enumerable: true, get: function () { return browserutils_1.BrowserUtils; } });
var storageutils_1 = require("./storageutils");
Object.defineProperty(exports, "StorageUtils", { enumerable: true, get: function () { return storageutils_1.StorageUtils; } });
var errorutils_1 = require("./errorutils");
Object.defineProperty(exports, "ErrorUtils", { enumerable: true, get: function () { return errorutils_1.ErrorUtils; } });
// Localization
var i18n_1 = require("./localization/i18n");
Object.defineProperty(exports, "i18n", { enumerable: true, get: function () { return i18n_1.i18n; } });
Object.defineProperty(exports, "I18n", { enumerable: true, get: function () { return i18n_1.I18n; } });
// Spatial Navigation
var spatialnavigation_1 = require("./spatialnavigation/spatialnavigation");
Object.defineProperty(exports, "SpatialNavigation", { enumerable: true, get: function () { return spatialnavigation_1.SpatialNavigation; } });
var navigationgroup_1 = require("./spatialnavigation/navigationgroup");
Object.defineProperty(exports, "NavigationGroup", { enumerable: true, get: function () { return navigationgroup_1.NavigationGroup; } });
var rootnavigationgroup_1 = require("./spatialnavigation/rootnavigationgroup");
Object.defineProperty(exports, "RootNavigationGroup", { enumerable: true, get: function () { return rootnavigationgroup_1.RootNavigationGroup; } });
var ListNavigationGroup_1 = require("./spatialnavigation/ListNavigationGroup");
Object.defineProperty(exports, "ListNavigationGroup", { enumerable: true, get: function () { return ListNavigationGroup_1.ListNavigationGroup; } });
Object.defineProperty(exports, "ListOrientation", { enumerable: true, get: function () { return ListNavigationGroup_1.ListOrientation; } });
// Components
var button_1 = require("./components/button");
Object.defineProperty(exports, "Button", { enumerable: true, get: function () { return button_1.Button; } });
var controlbar_1 = require("./components/controlbar");
Object.defineProperty(exports, "ControlBar", { enumerable: true, get: function () { return controlbar_1.ControlBar; } });
var fullscreentogglebutton_1 = require("./components/fullscreentogglebutton");
Object.defineProperty(exports, "FullscreenToggleButton", { enumerable: true, get: function () { return fullscreentogglebutton_1.FullscreenToggleButton; } });
var hugeplaybacktogglebutton_1 = require("./components/hugeplaybacktogglebutton");
Object.defineProperty(exports, "HugePlaybackToggleButton", { enumerable: true, get: function () { return hugeplaybacktogglebutton_1.HugePlaybackToggleButton; } });
var playbacktimelabel_1 = require("./components/playbacktimelabel");
Object.defineProperty(exports, "PlaybackTimeLabel", { enumerable: true, get: function () { return playbacktimelabel_1.PlaybackTimeLabel; } });
Object.defineProperty(exports, "PlaybackTimeLabelMode", { enumerable: true, get: function () { return playbacktimelabel_1.PlaybackTimeLabelMode; } });
var playbacktogglebutton_1 = require("./components/playbacktogglebutton");
Object.defineProperty(exports, "PlaybackToggleButton", { enumerable: true, get: function () { return playbacktogglebutton_1.PlaybackToggleButton; } });
var seekbar_1 = require("./components/seekbar");
Object.defineProperty(exports, "SeekBar", { enumerable: true, get: function () { return seekbar_1.SeekBar; } });
var selectbox_1 = require("./components/selectbox");
Object.defineProperty(exports, "SelectBox", { enumerable: true, get: function () { return selectbox_1.SelectBox; } });
var itemselectionlist_1 = require("./components/itemselectionlist");
Object.defineProperty(exports, "ItemSelectionList", { enumerable: true, get: function () { return itemselectionlist_1.ItemSelectionList; } });
var settingspanel_1 = require("./components/settingspanel");
Object.defineProperty(exports, "SettingsPanel", { enumerable: true, get: function () { return settingspanel_1.SettingsPanel; } });
var settingstogglebutton_1 = require("./components/settingstogglebutton");
Object.defineProperty(exports, "SettingsToggleButton", { enumerable: true, get: function () { return settingstogglebutton_1.SettingsToggleButton; } });
var togglebutton_1 = require("./components/togglebutton");
Object.defineProperty(exports, "ToggleButton", { enumerable: true, get: function () { return togglebutton_1.ToggleButton; } });
var videoqualityselectbox_1 = require("./components/videoqualityselectbox");
Object.defineProperty(exports, "VideoQualitySelectBox", { enumerable: true, get: function () { return videoqualityselectbox_1.VideoQualitySelectBox; } });
var volumetogglebutton_1 = require("./components/volumetogglebutton");
Object.defineProperty(exports, "VolumeToggleButton", { enumerable: true, get: function () { return volumetogglebutton_1.VolumeToggleButton; } });
var vrtogglebutton_1 = require("./components/vrtogglebutton");
Object.defineProperty(exports, "VRToggleButton", { enumerable: true, get: function () { return vrtogglebutton_1.VRToggleButton; } });
var watermark_1 = require("./components/watermark");
Object.defineProperty(exports, "Watermark", { enumerable: true, get: function () { return watermark_1.Watermark; } });
var uicontainer_1 = require("./components/uicontainer");
Object.defineProperty(exports, "UIContainer", { enumerable: true, get: function () { return uicontainer_1.UIContainer; } });
var container_1 = require("./components/container");
Object.defineProperty(exports, "Container", { enumerable: true, get: function () { return container_1.Container; } });
var label_1 = require("./components/label");
Object.defineProperty(exports, "Label", { enumerable: true, get: function () { return label_1.Label; } });
var audioqualityselectbox_1 = require("./components/audioqualityselectbox");
Object.defineProperty(exports, "AudioQualitySelectBox", { enumerable: true, get: function () { return audioqualityselectbox_1.AudioQualitySelectBox; } });
var audiotrackselectbox_1 = require("./components/audiotrackselectbox");
Object.defineProperty(exports, "AudioTrackSelectBox", { enumerable: true, get: function () { return audiotrackselectbox_1.AudioTrackSelectBox; } });
var caststatusoverlay_1 = require("./components/caststatusoverlay");
Object.defineProperty(exports, "CastStatusOverlay", { enumerable: true, get: function () { return caststatusoverlay_1.CastStatusOverlay; } });
var casttogglebutton_1 = require("./components/casttogglebutton");
Object.defineProperty(exports, "CastToggleButton", { enumerable: true, get: function () { return casttogglebutton_1.CastToggleButton; } });
var component_1 = require("./components/component");
Object.defineProperty(exports, "Component", { enumerable: true, get: function () { return component_1.Component; } });
var errormessageoverlay_1 = require("./components/errormessageoverlay");
Object.defineProperty(exports, "ErrorMessageOverlay", { enumerable: true, get: function () { return errormessageoverlay_1.ErrorMessageOverlay; } });
var recommendationoverlay_1 = require("./components/recommendationoverlay");
Object.defineProperty(exports, "RecommendationOverlay", { enumerable: true, get: function () { return recommendationoverlay_1.RecommendationOverlay; } });
var seekbarlabel_1 = require("./components/seekbarlabel");
Object.defineProperty(exports, "SeekBarLabel", { enumerable: true, get: function () { return seekbarlabel_1.SeekBarLabel; } });
var subtitleoverlay_1 = require("./components/subtitleoverlay");
Object.defineProperty(exports, "SubtitleOverlay", { enumerable: true, get: function () { return subtitleoverlay_1.SubtitleOverlay; } });
var subtitleselectbox_1 = require("./components/subtitleselectbox");
Object.defineProperty(exports, "SubtitleSelectBox", { enumerable: true, get: function () { return subtitleselectbox_1.SubtitleSelectBox; } });
var titlebar_1 = require("./components/titlebar");
Object.defineProperty(exports, "TitleBar", { enumerable: true, get: function () { return titlebar_1.TitleBar; } });
var volumecontrolbutton_1 = require("./components/volumecontrolbutton");
Object.defineProperty(exports, "VolumeControlButton", { enumerable: true, get: function () { return volumecontrolbutton_1.VolumeControlButton; } });
var clickoverlay_1 = require("./components/clickoverlay");
Object.defineProperty(exports, "ClickOverlay", { enumerable: true, get: function () { return clickoverlay_1.ClickOverlay; } });
var adskipbutton_1 = require("./components/adskipbutton");
Object.defineProperty(exports, "AdSkipButton", { enumerable: true, get: function () { return adskipbutton_1.AdSkipButton; } });
var admessagelabel_1 = require("./components/admessagelabel");
Object.defineProperty(exports, "AdMessageLabel", { enumerable: true, get: function () { return admessagelabel_1.AdMessageLabel; } });
var adclickoverlay_1 = require("./components/adclickoverlay");
Object.defineProperty(exports, "AdClickOverlay", { enumerable: true, get: function () { return adclickoverlay_1.AdClickOverlay; } });
var playbackspeedselectbox_1 = require("./components/playbackspeedselectbox");
Object.defineProperty(exports, "PlaybackSpeedSelectBox", { enumerable: true, get: function () { return playbackspeedselectbox_1.PlaybackSpeedSelectBox; } });
var hugereplaybutton_1 = require("./components/hugereplaybutton");
Object.defineProperty(exports, "HugeReplayButton", { enumerable: true, get: function () { return hugereplaybutton_1.HugeReplayButton; } });
var bufferingoverlay_1 = require("./components/bufferingoverlay");
Object.defineProperty(exports, "BufferingOverlay", { enumerable: true, get: function () { return bufferingoverlay_1.BufferingOverlay; } });
var castuicontainer_1 = require("./components/castuicontainer");
Object.defineProperty(exports, "CastUIContainer", { enumerable: true, get: function () { return castuicontainer_1.CastUIContainer; } });
var playbacktoggleoverlay_1 = require("./components/playbacktoggleoverlay");
Object.defineProperty(exports, "PlaybackToggleOverlay", { enumerable: true, get: function () { return playbacktoggleoverlay_1.PlaybackToggleOverlay; } });
var closebutton_1 = require("./components/closebutton");
Object.defineProperty(exports, "CloseButton", { enumerable: true, get: function () { return closebutton_1.CloseButton; } });
var metadatalabel_1 = require("./components/metadatalabel");
Object.defineProperty(exports, "MetadataLabel", { enumerable: true, get: function () { return metadatalabel_1.MetadataLabel; } });
Object.defineProperty(exports, "MetadataLabelContent", { enumerable: true, get: function () { return metadatalabel_1.MetadataLabelContent; } });
var airplaytogglebutton_1 = require("./components/airplaytogglebutton");
Object.defineProperty(exports, "AirPlayToggleButton", { enumerable: true, get: function () { return airplaytogglebutton_1.AirPlayToggleButton; } });
var volumeslider_1 = require("./components/volumeslider");
Object.defineProperty(exports, "VolumeSlider", { enumerable: true, get: function () { return volumeslider_1.VolumeSlider; } });
var pictureinpicturetogglebutton_1 = require("./components/pictureinpicturetogglebutton");
Object.defineProperty(exports, "PictureInPictureToggleButton", { enumerable: true, get: function () { return pictureinpicturetogglebutton_1.PictureInPictureToggleButton; } });
var spacer_1 = require("./components/spacer");
Object.defineProperty(exports, "Spacer", { enumerable: true, get: function () { return spacer_1.Spacer; } });
var backgroundcolorselectbox_1 = require("./components/subtitlesettings/backgroundcolorselectbox");
Object.defineProperty(exports, "BackgroundColorSelectBox", { enumerable: true, get: function () { return backgroundcolorselectbox_1.BackgroundColorSelectBox; } });
var backgroundopacityselectbox_1 = require("./components/subtitlesettings/backgroundopacityselectbox");
Object.defineProperty(exports, "BackgroundOpacitySelectBox", { enumerable: true, get: function () { return backgroundopacityselectbox_1.BackgroundOpacitySelectBox; } });
var characteredgeselectbox_1 = require("./components/subtitlesettings/characteredgeselectbox");
Object.defineProperty(exports, "CharacterEdgeSelectBox", { enumerable: true, get: function () { return characteredgeselectbox_1.CharacterEdgeSelectBox; } });
var fontcolorselectbox_1 = require("./components/subtitlesettings/fontcolorselectbox");
Object.defineProperty(exports, "FontColorSelectBox", { enumerable: true, get: function () { return fontcolorselectbox_1.FontColorSelectBox; } });
var fontfamilyselectbox_1 = require("./components/subtitlesettings/fontfamilyselectbox");
Object.defineProperty(exports, "FontFamilySelectBox", { enumerable: true, get: function () { return fontfamilyselectbox_1.FontFamilySelectBox; } });
var fontopacityselectbox_1 = require("./components/subtitlesettings/fontopacityselectbox");
Object.defineProperty(exports, "FontOpacitySelectBox", { enumerable: true, get: function () { return fontopacityselectbox_1.FontOpacitySelectBox; } });
var fontsizeselectbox_1 = require("./components/subtitlesettings/fontsizeselectbox");
Object.defineProperty(exports, "FontSizeSelectBox", { enumerable: true, get: function () { return fontsizeselectbox_1.FontSizeSelectBox; } });
var subtitlesettingselectbox_1 = require("./components/subtitlesettings/subtitlesettingselectbox");
Object.defineProperty(exports, "SubtitleSettingSelectBox", { enumerable: true, get: function () { return subtitlesettingselectbox_1.SubtitleSettingSelectBox; } });
var subtitlesettingslabel_1 = require("./components/subtitlesettings/subtitlesettingslabel");
Object.defineProperty(exports, "SubtitleSettingsLabel", { enumerable: true, get: function () { return subtitlesettingslabel_1.SubtitleSettingsLabel; } });
var windowcolorselectbox_1 = require("./components/subtitlesettings/windowcolorselectbox");
Object.defineProperty(exports, "WindowColorSelectBox", { enumerable: true, get: function () { return windowcolorselectbox_1.WindowColorSelectBox; } });
var windowopacityselectbox_1 = require("./components/subtitlesettings/windowopacityselectbox");
Object.defineProperty(exports, "WindowOpacitySelectBox", { enumerable: true, get: function () { return windowopacityselectbox_1.WindowOpacitySelectBox; } });
var subtitlesettingsresetbutton_1 = require("./components/subtitlesettings/subtitlesettingsresetbutton");
Object.defineProperty(exports, "SubtitleSettingsResetButton", { enumerable: true, get: function () { return subtitlesettingsresetbutton_1.SubtitleSettingsResetButton; } });
var listbox_1 = require("./components/listbox");
Object.defineProperty(exports, "ListBox", { enumerable: true, get: function () { return listbox_1.ListBox; } });
var subtitlelistbox_1 = require("./components/subtitlelistbox");
Object.defineProperty(exports, "SubtitleListBox", { enumerable: true, get: function () { return subtitlelistbox_1.SubtitleListBox; } });
var audiotracklistbox_1 = require("./components/audiotracklistbox");
Object.defineProperty(exports, "AudioTrackListBox", { enumerable: true, get: function () { return audiotracklistbox_1.AudioTrackListBox; } });
var settingspanelpage_1 = require("./components/settingspanelpage");
Object.defineProperty(exports, "SettingsPanelPage", { enumerable: true, get: function () { return settingspanelpage_1.SettingsPanelPage; } });
var settingspanelpagebackbutton_1 = require("./components/settingspanelpagebackbutton");
Object.defineProperty(exports, "SettingsPanelPageBackButton", { enumerable: true, get: function () { return settingspanelpagebackbutton_1.SettingsPanelPageBackButton; } });
var settingspanelpageopenbutton_1 = require("./components/settingspanelpageopenbutton");
Object.defineProperty(exports, "SettingsPanelPageOpenButton", { enumerable: true, get: function () { return settingspanelpageopenbutton_1.SettingsPanelPageOpenButton; } });
var subtitlesettingspanelpage_1 = require("./components/subtitlesettings/subtitlesettingspanelpage");
Object.defineProperty(exports, "SubtitleSettingsPanelPage", { enumerable: true, get: function () { return subtitlesettingspanelpage_1.SubtitleSettingsPanelPage; } });
var settingspanelitem_1 = require("./components/settingspanelitem");
Object.defineProperty(exports, "SettingsPanelItem", { enumerable: true, get: function () { return settingspanelitem_1.SettingsPanelItem; } });
var replaybutton_1 = require("./components/replaybutton");
Object.defineProperty(exports, "ReplayButton", { enumerable: true, get: function () { return replaybutton_1.ReplayButton; } });
var quickseekbutton_1 = require("./components/quickseekbutton");
Object.defineProperty(exports, "QuickSeekButton", { enumerable: true, get: function () { return quickseekbutton_1.QuickSeekButton; } });
var listselector_1 = require("./components/listselector");
Object.defineProperty(exports, "ListSelector", { enumerable: true, get: function () { return listselector_1.ListSelector; } });
var state = {
    isRadioModeActive: null,
    isRadioModeAvailable: null,
    isQuanteecDisplayed: null,
};
if (typeof window.isRadioModeActive === 'undefined') {
    Object.defineProperty(window, 'isRadioModeActive', {
        get: function () {
            return state.isRadioModeActive;
        },
        set: function (value) {
            state.isRadioModeActive = value;
            var event = new CustomEvent('isRadioModeActiveChange', {
                detail: value,
            });
            window.dispatchEvent(event);
        },
    });
}
if (typeof window.isRadioModeAvailable === 'undefined') {
    Object.defineProperty(window, 'isRadioModeAvailable', {
        get: function () {
            return state.isRadioModeAvailable;
        },
        set: function (value) {
            state.isRadioModeAvailable = value;
            var event = new CustomEvent('isRadioModeAvailableChange', {
                detail: value,
            });
            window.dispatchEvent(event);
        },
    });
}
if (typeof window.isQuanteecDisplayed === 'undefined') {
    Object.defineProperty(window, 'isQuanteecDisplayed', {
        get: function () {
            return state.isQuanteecDisplayed;
        },
        set: function (value) {
            state.isQuanteecDisplayed = value;
            var event = new CustomEvent('isQuanteecDisplayedChange', {
                detail: value,
            });
            window.dispatchEvent(event);
        },
    });
}
// Object.assign polyfill for ES5/IE9
// https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
if (typeof Object.assign !== 'function') {
    Object.assign = function (target) {
        'use strict';
        if (target == null) {
            throw new TypeError('Cannot convert undefined or null to object');
        }
        target = Object(target);
        for (var index = 1; index < arguments.length; index++) {
            var source = arguments[index];
            if (source != null) {
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
        }
        return target;
    };
}

},{"./arrayutils":6,"./browserutils":8,"./components/adclickoverlay":9,"./components/admessagelabel":10,"./components/adskipbutton":11,"./components/airplaytogglebutton":12,"./components/audioqualityselectbox":13,"./components/audiotracklistbox":14,"./components/audiotrackselectbox":15,"./components/bufferingoverlay":16,"./components/button":17,"./components/caststatusoverlay":18,"./components/casttogglebutton":19,"./components/castuicontainer":20,"./components/clickoverlay":21,"./components/closebutton":22,"./components/component":23,"./components/container":24,"./components/controlbar":25,"./components/errormessageoverlay":28,"./components/fullscreentogglebutton":29,"./components/hugeplaybacktogglebutton":30,"./components/hugereplaybutton":31,"./components/itemselectionlist":32,"./components/label":33,"./components/listbox":34,"./components/listselector":35,"./components/metadatalabel":36,"./components/pictureinpicturetogglebutton":37,"./components/playbackspeedselectbox":38,"./components/playbacktimelabel":39,"./components/playbacktogglebutton":40,"./components/playbacktoggleoverlay":41,"./components/quickseekbutton":42,"./components/recommendationoverlay":43,"./components/replaybutton":44,"./components/seekbar":45,"./components/seekbarlabel":48,"./components/selectbox":49,"./components/settingspanel":50,"./components/settingspanelitem":51,"./components/settingspanelpage":52,"./components/settingspanelpagebackbutton":53,"./components/settingspanelpageopenbutton":55,"./components/settingstogglebutton":56,"./components/spacer":57,"./components/subtitlelistbox":58,"./components/subtitleoverlay":59,"./components/subtitleselectbox":60,"./components/subtitlesettings/backgroundcolorselectbox":61,"./components/subtitlesettings/backgroundopacityselectbox":62,"./components/subtitlesettings/characteredgeselectbox":63,"./components/subtitlesettings/fontcolorselectbox":64,"./components/subtitlesettings/fontfamilyselectbox":65,"./components/subtitlesettings/fontopacityselectbox":66,"./components/subtitlesettings/fontsizeselectbox":67,"./components/subtitlesettings/subtitlesettingselectbox":68,"./components/subtitlesettings/subtitlesettingslabel":69,"./components/subtitlesettings/subtitlesettingspanelpage":71,"./components/subtitlesettings/subtitlesettingsresetbutton":72,"./components/subtitlesettings/windowcolorselectbox":73,"./components/subtitlesettings/windowopacityselectbox":74,"./components/titlebar":76,"./components/togglebutton":77,"./components/uicontainer":79,"./components/videoqualityselectbox":80,"./components/volumecontrolbutton":81,"./components/volumeslider":82,"./components/volumetogglebutton":83,"./components/vrtogglebutton":84,"./components/watermark":85,"./demofactory":86,"./errorutils":88,"./localization/i18n":94,"./playerutils":101,"./spatialnavigation/ListNavigationGroup":102,"./spatialnavigation/navigationgroup":106,"./spatialnavigation/rootnavigationgroup":108,"./spatialnavigation/spatialnavigation":110,"./storageutils":113,"./stringutils":114,"./uiconfig":117,"./uifactory":118,"./uimanager":119,"./uiutils":120}],100:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isMobileV3PlayerAPI = exports.MobileV3PlayerEvent = void 0;
var MobileV3PlayerEvent;
(function (MobileV3PlayerEvent) {
    MobileV3PlayerEvent["SourceError"] = "sourceerror";
    MobileV3PlayerEvent["PlayerError"] = "playererror";
    MobileV3PlayerEvent["PlaylistTransition"] = "playlisttransition";
})(MobileV3PlayerEvent = exports.MobileV3PlayerEvent || (exports.MobileV3PlayerEvent = {}));
function isMobileV3PlayerAPI(player) {
    for (var key in MobileV3PlayerEvent) {
        if (MobileV3PlayerEvent.hasOwnProperty(key) && !player.exports.PlayerEvent.hasOwnProperty(key)) {
            return false;
        }
    }
    return true;
}
exports.isMobileV3PlayerAPI = isMobileV3PlayerAPI;

},{}],101:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerUtils = void 0;
var eventdispatcher_1 = require("./eventdispatcher");
var browserutils_1 = require("./browserutils");
/**
 * @category Utils
 */
var PlayerUtils;
(function (PlayerUtils) {
    var PlayerState;
    (function (PlayerState) {
        PlayerState[PlayerState["Idle"] = 0] = "Idle";
        PlayerState[PlayerState["Prepared"] = 1] = "Prepared";
        PlayerState[PlayerState["Playing"] = 2] = "Playing";
        PlayerState[PlayerState["Paused"] = 3] = "Paused";
        PlayerState[PlayerState["Finished"] = 4] = "Finished";
    })(PlayerState = PlayerUtils.PlayerState || (PlayerUtils.PlayerState = {}));
    function isTimeShiftAvailable(player) {
        return player.isLive() && player.getMaxTimeShift() !== 0;
    }
    PlayerUtils.isTimeShiftAvailable = isTimeShiftAvailable;
    function getState(player) {
        if (player.hasEnded()) {
            return PlayerState.Finished;
        }
        else if (player.isPlaying()) {
            return PlayerState.Playing;
        }
        else if (player.isPaused()) {
            return PlayerState.Paused;
        }
        else if (player.getSource() != null) {
            return PlayerState.Prepared;
        }
        else {
            return PlayerState.Idle;
        }
    }
    PlayerUtils.getState = getState;
    /**
     * Returns the currentTime - seekableRange.start. This ensures a user-friendly currentTime after a live stream
     * transitioned to VoD.
     * @param player
     */
    function getCurrentTimeRelativeToSeekableRange(player) {
        var currentTime = player.getCurrentTime();
        if (player.isLive()) {
            return currentTime;
        }
        var seekableRangeStart = PlayerUtils.getSeekableRangeStart(player, 0);
        return currentTime - seekableRangeStart;
    }
    PlayerUtils.getCurrentTimeRelativeToSeekableRange = getCurrentTimeRelativeToSeekableRange;
    /**
     * Returns the start value of the seekable range or the defaultValue if no seekableRange is present.
     * For now this happens only in combination with Mobile SDKs.
     *
     * TODO: remove this function in next major release
     *
     * @param player
     * @param defaultValue
     */
    function getSeekableRangeStart(player, defaultValue) {
        if (defaultValue === void 0) { defaultValue = 0; }
        return player.getSeekableRange() && player.getSeekableRange().start || defaultValue;
    }
    PlayerUtils.getSeekableRangeStart = getSeekableRangeStart;
    /**
     * Calculates player seekable time range for live.
     * As the player returns `{ start: -1, end: -1 }` for live streams we need to calculate the `seekableRange` based on `maxTimeshift`.
     *
     * @param player
     */
    function getSeekableRangeRespectingLive(player) {
        if (!player.isLive()) {
            return player.getSeekableRange();
        }
        var currentTimeshift = -player.getTimeShift();
        var maxTimeshift = -player.getMaxTimeShift();
        var currentTime = player.getCurrentTime();
        var end = currentTime + (currentTimeshift);
        var start = currentTime - (maxTimeshift - currentTimeshift);
        return { start: start, end: end };
    }
    PlayerUtils.getSeekableRangeRespectingLive = getSeekableRangeRespectingLive;
    var TimeShiftAvailabilityDetector = /** @class */ (function () {
        function TimeShiftAvailabilityDetector(player) {
            var _this = this;
            this.timeShiftAvailabilityChangedEvent = new eventdispatcher_1.EventDispatcher();
            this.player = player;
            this.timeShiftAvailable = undefined;
            var timeShiftDetector = function () {
                _this.detect();
            };
            // Try to detect timeshift availability when source is loaded, which works for DASH streams
            player.on(player.exports.PlayerEvent.SourceLoaded, timeShiftDetector);
            // With HLS/NativePlayer streams, getMaxTimeShift can be 0 before the buffer fills, so we need to additionally
            // check timeshift availability in TimeChanged
            player.on(player.exports.PlayerEvent.TimeChanged, timeShiftDetector);
        }
        TimeShiftAvailabilityDetector.prototype.detect = function () {
            if (this.player.isLive()) {
                var timeShiftAvailableNow = PlayerUtils.isTimeShiftAvailable(this.player);
                // When the availability changes, we fire the event
                if (timeShiftAvailableNow !== this.timeShiftAvailable) {
                    this.timeShiftAvailabilityChangedEvent.dispatch(this.player, { timeShiftAvailable: timeShiftAvailableNow });
                    this.timeShiftAvailable = timeShiftAvailableNow;
                }
            }
        };
        Object.defineProperty(TimeShiftAvailabilityDetector.prototype, "onTimeShiftAvailabilityChanged", {
            get: function () {
                return this.timeShiftAvailabilityChangedEvent.getEvent();
            },
            enumerable: false,
            configurable: true
        });
        return TimeShiftAvailabilityDetector;
    }());
    PlayerUtils.TimeShiftAvailabilityDetector = TimeShiftAvailabilityDetector;
    /**
     * Detects changes of the stream type, i.e. changes of the return value of the player#isLive method.
     * Normally, a stream cannot change its type during playback, it's either VOD or live. Due to bugs on some
     * platforms or browsers, it can still change. It is therefore unreliable to just check #isLive and this detector
     * should be used as a workaround instead.
     *
     * Additionally starting with player v8.19.0 we have the use-case that a live stream changes into a vod.
     * The DurationChanged event indicates this switch.
     *
     * Known cases:
     *
     * - HLS VOD on Android 4.3
     * Video duration is initially 'Infinity' and only gets available after playback starts, so streams are wrongly
     * reported as 'live' before playback (the live-check in the player checks for infinite duration).
     *
     * @deprecated since UI v3.9.0 in combination with player v8.19.0 use PlayerEvent.DurationChanged instead
     *
     * TODO: remove this class in next major release
     */
    var LiveStreamDetector = /** @class */ (function () {
        function LiveStreamDetector(player, uimanager) {
            var _this = this;
            this.liveChangedEvent = new eventdispatcher_1.EventDispatcher();
            this.player = player;
            this.uimanager = uimanager;
            this.live = undefined;
            var liveDetector = function () {
                _this.detect();
            };
            this.uimanager.getConfig().events.onUpdated.subscribe(liveDetector);
            // Re-evaluate when playback starts
            player.on(player.exports.PlayerEvent.Play, liveDetector);
            // HLS live detection workaround for Android:
            // Also re-evaluate during playback, because that is when the live flag might change.
            // (Doing it only in Android Chrome saves unnecessary overhead on other platforms)
            if (browserutils_1.BrowserUtils.isAndroid && browserutils_1.BrowserUtils.isChrome) {
                player.on(player.exports.PlayerEvent.TimeChanged, liveDetector);
            }
            // DurationChanged event was introduced with player v8.19.0
            if (player.exports.PlayerEvent.DurationChanged) {
                player.on(player.exports.PlayerEvent.DurationChanged, liveDetector);
            }
            // Ad video's isLive() might be different than the actual video's isLive().
            player.on(player.exports.PlayerEvent.AdBreakStarted, liveDetector);
            player.on(player.exports.PlayerEvent.AdBreakFinished, liveDetector);
        }
        LiveStreamDetector.prototype.detect = function () {
            var liveNow = this.player.isLive();
            // Compare current to previous live state flag and fire event when it changes. Since we initialize the flag
            // with undefined, there is always at least an initial event fired that tells listeners the live state.
            if (liveNow !== this.live) {
                this.liveChangedEvent.dispatch(this.player, { live: liveNow });
                this.live = liveNow;
            }
        };
        Object.defineProperty(LiveStreamDetector.prototype, "onLiveChanged", {
            get: function () {
                return this.liveChangedEvent.getEvent();
            },
            enumerable: false,
            configurable: true
        });
        return LiveStreamDetector;
    }());
    PlayerUtils.LiveStreamDetector = LiveStreamDetector;
    function clampValueToRange(value, boundary1, boundary2) {
        var lowerBoundary = Math.min(boundary1, boundary2);
        var upperBoundary = Math.max(boundary1, boundary2);
        return Math.min(Math.max(value, lowerBoundary), upperBoundary);
    }
    PlayerUtils.clampValueToRange = clampValueToRange;
})(PlayerUtils = exports.PlayerUtils || (exports.PlayerUtils = {}));

},{"./browserutils":8,"./eventdispatcher":89}],102:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListNavigationGroup = exports.ListOrientation = void 0;
var navigationgroup_1 = require("./navigationgroup");
var types_1 = require("./types");
var ListOrientation;
(function (ListOrientation) {
    ListOrientation["Horizontal"] = "horizontal";
    ListOrientation["Vertical"] = "vertical";
})(ListOrientation = exports.ListOrientation || (exports.ListOrientation = {}));
/**
 * @category Components
 */
var ListNavigationGroup = /** @class */ (function (_super) {
    __extends(ListNavigationGroup, _super);
    function ListNavigationGroup(orientation, container) {
        var components = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            components[_i - 2] = arguments[_i];
        }
        var _this = _super.apply(this, __spreadArray([container], components, false)) || this;
        switch (orientation) {
            case ListOrientation.Vertical:
                _this.listNavigationDirections = [types_1.Direction.UP, types_1.Direction.DOWN];
                break;
            case ListOrientation.Horizontal:
                _this.listNavigationDirections = [types_1.Direction.LEFT, types_1.Direction.RIGHT];
                break;
        }
        return _this;
    }
    ListNavigationGroup.prototype.handleAction = function (action) {
        _super.prototype.handleAction.call(this, action);
        if (action === types_1.Action.SELECT) {
            // close the container when a list entry is selected
            this.handleAction(types_1.Action.BACK);
        }
    };
    ListNavigationGroup.prototype.handleNavigation = function (direction) {
        _super.prototype.handleNavigation.call(this, direction);
        if (!this.listNavigationDirections.includes(direction)) {
            // close the container on navigation inputs that don't align
            // with the orientation of the list
            this.handleAction(types_1.Action.BACK);
        }
    };
    return ListNavigationGroup;
}(navigationgroup_1.NavigationGroup));
exports.ListNavigationGroup = ListNavigationGroup;

},{"./navigationgroup":106,"./types":112}],103:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHtmlElementsFromComponents = void 0;
var container_1 = require("../components/container");
var typeguards_1 = require("./typeguards");
/**
 * Recursively resolves a container and the components contained within them, building a flat list of components.
 *
 * @param container The container to get the contained components from
 */
function resolveAllComponents(container) {
    var childComponents = [];
    container.getComponents().forEach(function (containerOrComponent) {
        if ((0, typeguards_1.isContainer)(containerOrComponent)) {
            childComponents.push.apply(childComponents, resolveAllComponents(containerOrComponent));
        }
        else if ((0, typeguards_1.isComponent)(containerOrComponent)) {
            childComponents.push(containerOrComponent);
        }
    });
    return childComponents;
}
/**
 * Returns the HTML elements associated to the provided component.
 *
 * @param component The component to get the HTML elements from
 */
function toHtmlElement(component) {
    if ((0, typeguards_1.isListBox)(component)) {
        return [].slice.call(component.getDomElement().get()[0].children);
    }
    else {
        return component.getDomElement().get().slice(0, 1);
    }
}
/**
 * Takes the provided list of components and flat-maps them to a list of their respective HTML elements. In case a
 * provided component is a container, the children of that container will be resolved recursively. Ignores components
 * that are hidden.
 *
 * @param components The components to map to HTML elements
 */
function getHtmlElementsFromComponents(components) {
    var htmlElements = [];
    components
        .filter(function (component) { return !component.isHidden(); })
        .forEach(function (component) {
        var elementsToConsider = component instanceof container_1.Container ? resolveAllComponents(component) : [component];
        elementsToConsider.forEach(function (component) {
            htmlElements.push.apply(htmlElements, toHtmlElement(component));
        });
    });
    return htmlElements;
}
exports.getHtmlElementsFromComponents = getHtmlElementsFromComponents;

},{"../components/container":24,"./typeguards":111}],104:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getKeyMapForPlatform = void 0;
var types_1 = require("./types");
var browserutils_1 = require("../browserutils");
var TizenKeyMap = {
    isApplicable: function () { return browserutils_1.BrowserUtils.isTizen; },
    keyCodes: {
        // D-pad Up
        38: types_1.Direction.UP,
        // D-pad Down
        40: types_1.Direction.DOWN,
        // D-pad Left
        37: types_1.Direction.LEFT,
        // D-pad Right
        39: types_1.Direction.RIGHT,
        // D-pad OK
        13: types_1.Action.SELECT,
        // Back
        10009: types_1.Action.BACK,
    },
};
var WebOsKeyMap = {
    isApplicable: function () { return browserutils_1.BrowserUtils.isWebOs; },
    keyCodes: {
        // D-pad Up
        38: types_1.Direction.UP,
        // D-pad Down
        40: types_1.Direction.DOWN,
        // D-pad Left
        37: types_1.Direction.LEFT,
        // D-pad Right
        39: types_1.Direction.RIGHT,
        // D-pad OK
        13: types_1.Action.SELECT,
        // Back
        461: types_1.Action.BACK,
    },
};
var PlayStationKeyMap = {
    isApplicable: function () { return browserutils_1.BrowserUtils.isPlayStation; },
    keyCodes: {
        // D-pad Up
        38: types_1.Direction.UP,
        // D-pad Down
        40: types_1.Direction.DOWN,
        // D-pad Left
        37: types_1.Direction.LEFT,
        // D-pad Right
        39: types_1.Direction.RIGHT,
        // Cross
        13: types_1.Action.SELECT,
        // Circle
        27: types_1.Action.BACK,
    },
};
var AndroidKeyMap = {
    isApplicable: function () { return browserutils_1.BrowserUtils.isAndroid; },
    keyCodes: {
        // D-pad Up
        19: types_1.Direction.UP,
        // D-pad Down
        20: types_1.Direction.DOWN,
        // D-pad Left
        21: types_1.Direction.LEFT,
        // D-pad Right
        22: types_1.Direction.RIGHT,
        // D-pad Center
        23: types_1.Action.SELECT,
        // Enter
        66: types_1.Action.SELECT,
        // Back
        4: types_1.Action.BACK,
    },
};
var HisenseKeyMap = {
    isApplicable: function () { return browserutils_1.BrowserUtils.isHisense; },
    keyCodes: {
        // D-pad Up
        38: types_1.Direction.UP,
        // D-pad Down
        40: types_1.Direction.DOWN,
        // D-pad Left
        37: types_1.Direction.LEFT,
        // D-pad Right
        39: types_1.Direction.RIGHT,
        // OK
        13: types_1.Action.SELECT,
        // Back
        8: types_1.Action.BACK,
    },
};
// Default key map used on desktops
var DefaultKeyMap = {
    // Arrow Up
    38: types_1.Direction.UP,
    // Arrow Down
    40: types_1.Direction.DOWN,
    // Arrow Left
    37: types_1.Direction.LEFT,
    // Arrow Right
    39: types_1.Direction.RIGHT,
    // Enter
    13: types_1.Action.SELECT,
    // Escape
    27: types_1.Action.BACK,
};
/**
 * Returns the matching key map for the current platform.
 */
function getKeyMapForPlatform() {
    var applicableKeyMap = [
        WebOsKeyMap,
        TizenKeyMap,
        PlayStationKeyMap,
        HisenseKeyMap,
        AndroidKeyMap,
    ].find(function (keyMap) { return keyMap.isApplicable(); });
    if (applicableKeyMap) {
        return applicableKeyMap.keyCodes;
    }
    else {
        return DefaultKeyMap;
    }
}
exports.getKeyMapForPlatform = getKeyMapForPlatform;

},{"../browserutils":8,"./types":112}],105:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBoundingRectFromElement = exports.getElementInDirection = void 0;
var types_1 = require("./types");
/**
 * Calculates the length of a vector.
 *
 * @param vector The vector to calculate the length of
 */
function length(vector) {
    return Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));
}
/**
 * Normalizes the given vector.
 *
 * @param vector The vector to normalize
 */
function normalize(vector) {
    var len = length(vector);
    return {
        x: vector.x / len,
        y: vector.y / len,
    };
}
/**
 * Calculates the dot product between 2 vectors.
 *
 * @param a The first vector
 * @param b The second vector
 */
function dotProduct(a, b) {
    return a.x * b.x + a.y * b.y;
}
/**
 * Calculates the distance between the 2 points pointed to by the provided vectors.
 *
 * @param a The first vector
 * @param b The second vector
 */
function distance(a, b) {
    return length({
        x: b.x - a.x,
        y: b.y - a.y,
    });
}
/**
 * Returns a vector that corresponds to the center of the provided element.
 *
 * @param element The element to get the center of
 */
function getElementVector(element) {
    var boundingRect = getBoundingRectFromElement(element);
    return {
        x: boundingRect.x + boundingRect.width / 2,
        y: boundingRect.y + boundingRect.height / 2,
    };
}
/**
 * Returns the angle in degrees between the unit vector pointing in the given {Direction} and the unit vector that
 * points from the current element to another element.
 *
 * @param a The vector of the current element
 * @param b The vector of the other element
 * @param direction The direction to move along
 */
function calculateAngle(a, b, direction) {
    var directionVector = {
        x: (direction === types_1.Direction.LEFT ? -1 : direction === types_1.Direction.RIGHT ? 1 : 0),
        y: (direction === types_1.Direction.UP ? -1 : direction === types_1.Direction.DOWN ? 1 : 0),
    };
    var elementVector = normalize({
        x: b.x - a.x,
        y: b.y - a.y,
    });
    var angleCos = dotProduct(directionVector, elementVector) / (length(directionVector) * length(elementVector));
    return Math.acos(angleCos) * 180 / Math.PI;
}
/**
 * Returns the closest element to the current element when trying to navigate in the provided direction. Returns
 * undefined, if there is not element in the given direction.
 *
 * @param activeElement The currently selected element
 * @param elements The list of all elements that can be navigated to
 * @param direction The direction in which to navigate
 */
function getElementInDirection(activeElement, elements, direction) {
    var _a;
    if (!activeElement)
        return undefined;
    var cutoffAngle = 45;
    var activeElemVector = getElementVector(activeElement);
    return (_a = elements
        // don't take the current element into account
        .filter(function (elem) { return elem !== activeElement; })
        // get the angle between, and distance to any other element from the current element
        .map(function (element) {
        var elementVector = getElementVector(element);
        var dist = distance(activeElemVector, elementVector);
        var angle = calculateAngle(activeElemVector, elementVector, direction);
        return { angle: angle, dist: dist, element: element };
    })
        // filter out any elements that don't align with the direction we're trying to move in
        .filter(function (_a) {
        var angle = _a.angle;
        return angle <= cutoffAngle;
    })
        // sort the resulting elements based on their distance to the current element in ascending order
        .sort(function (_a, _b) {
        var angleA = _a.angle, distA = _a.dist;
        var angleB = _b.angle, distB = _b.dist;
        return (angleA - angleB) + (distA - distB);
    })
        // return the element closest to the current element
        .shift()) === null || _a === void 0 ? void 0 : _a.element;
}
exports.getElementInDirection = getElementInDirection;
/**
 * Returns DOMRect like object containing horizontal X and vertical Y coordinates from and HTMLElement.
 * Handles use-cases for getBoundingClientRect when the return type can be either
 * a ClientRect or DOMRect object type.
 *
 * @param element The currently selected element
 */
function getBoundingRectFromElement(element) {
    var boundingRect = element.getBoundingClientRect();
    if (typeof boundingRect.x !== 'number' && typeof boundingRect.y !== 'number') {
        boundingRect.x = boundingRect.left;
        boundingRect.y = boundingRect.top;
    }
    return boundingRect;
}
exports.getBoundingRectFromElement = getBoundingRectFromElement;

},{"./types":112}],106:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NavigationGroup = void 0;
var navigationalgorithm_1 = require("./navigationalgorithm");
var gethtmlelementsfromcomponents_1 = require("./gethtmlelementsfromcomponents");
var nodeeventsubscriber_1 = require("./nodeeventsubscriber");
var typeguards_1 = require("./typeguards");
var types_1 = require("./types");
/**
 * Used as part of spatial navigation. Groups together different components to which you can navigate to, in a single
 * navigation group.
 *
 * Responsible for finding elements in direction on navigation and for tracking active element inside the group.
 * Triggers blur and focus on element when active element is changed, as well as click on element on `Action.SELECT`.
 * Will call `hideUi()` on passed in container if `Action.BACK` is called.
 *
 * @category Components
 */
var NavigationGroup = /** @class */ (function () {
    function NavigationGroup(container) {
        var components = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            components[_i - 1] = arguments[_i];
        }
        this.container = container;
        this.removeElementHoverEventListeners = function () { };
        this.components = components;
        this.eventSubscriber = new nodeeventsubscriber_1.NodeEventSubscriber();
    }
    /**
     * Returns the active HTMLElement.
     */
    NavigationGroup.prototype.getActiveElement = function () {
        return this.activeElement;
    };
    NavigationGroup.prototype.focusElement = function (element) {
        this.blurActiveElement();
        this.activeElement = element;
        this.activeElement.focus();
    };
    NavigationGroup.prototype.blurActiveElement = function () {
        var _a;
        (_a = this.activeElement) === null || _a === void 0 ? void 0 : _a.blur();
    };
    NavigationGroup.prototype.focusFirstElement = function () {
        var element = (0, gethtmlelementsfromcomponents_1.getHtmlElementsFromComponents)(this.components)[0];
        if (element) {
            this.focusElement(element);
        }
    };
    NavigationGroup.prototype.defaultNavigationHandler = function (direction) {
        var targetElement = (0, navigationalgorithm_1.getElementInDirection)(this.activeElement, (0, gethtmlelementsfromcomponents_1.getHtmlElementsFromComponents)(this.components), direction);
        if (targetElement) {
            this.focusElement(targetElement);
        }
    };
    NavigationGroup.prototype.defaultActionHandler = function (action) {
        switch (action) {
            case (types_1.Action.SELECT):
                this.activeElement.click();
                break;
            case (types_1.Action.BACK):
                this.container.hide();
                break;
        }
    };
    NavigationGroup.prototype.handleInput = function (data, defaultHandler, userHandler) {
        var handleDefault = true;
        var preventDefault = function () { return (handleDefault = false); };
        userHandler === null || userHandler === void 0 ? void 0 : userHandler(data, this.activeElement, preventDefault);
        if (handleDefault) {
            defaultHandler.call(this, data);
        }
    };
    /**
     * Handles a navigation event.
     *
     * @param direction The direction of the navigation event
     */
    NavigationGroup.prototype.handleNavigation = function (direction) {
        if (!this.activeElement) {
            // If we do not have an active element, the active element has been disabled by a mouseleave
            // event. We should continue the navigation at the exact place where we left off.
            if (this.activeElementBeforeDisable) {
                this.focusElement(this.activeElementBeforeDisable);
            }
            else {
                this.focusFirstElement();
            }
            return;
        }
        this.handleInput(direction, this.defaultNavigationHandler, this.onNavigation);
    };
    /**
     * Handles an action event.
     *
     * @param action The action of the event
     */
    NavigationGroup.prototype.handleAction = function (action) {
        this.handleInput(action, this.defaultActionHandler, this.onAction);
    };
    /**
     * Disable navigation group
     *
     * Call blur on active element, set as undefined, and track it as element before disable.
     */
    NavigationGroup.prototype.disable = function () {
        if (this.activeElement) {
            this.activeElementBeforeDisable = this.activeElement;
            this.blurActiveElement();
            this.activeElement = undefined;
        }
    };
    /**
     * Enable navigation group
     *
     * Sets active element to either element that was active before disable, or first element of tracked elements.
     * If it is settings panel, it will always focus first element in the list.
     */
    NavigationGroup.prototype.enable = function () {
        if (this.activeElementBeforeDisable && !(0, typeguards_1.isSettingsPanel)(this.container)) {
            this.focusElement(this.activeElementBeforeDisable);
            this.activeElementBeforeDisable = undefined;
        }
        else {
            this.focusFirstElement();
        }
        this.trackElementHover();
    };
    /**
     * Adds event listener for `mouseenter` on tracked elements to ensure tracking of active element will work together
     * in combination of using mouse and key events.
     */
    NavigationGroup.prototype.trackElementHover = function () {
        var _this = this;
        this.removeElementHoverEventListeners();
        var removeEventListenerFunctions = (0, gethtmlelementsfromcomponents_1.getHtmlElementsFromComponents)(this.components).map(function (htmlElem) {
            var enterListener = _this.focusElement.bind(_this, htmlElem);
            var exitListener = function () { return _this.disable(); };
            _this.eventSubscriber.on(htmlElem, 'mouseenter', enterListener);
            _this.eventSubscriber.on(htmlElem, 'mouseleave', exitListener);
            return function () {
                _this.eventSubscriber.off(htmlElem, 'mouseenter', enterListener);
                _this.eventSubscriber.off(htmlElem, 'mouseleave', exitListener);
            };
        });
        this.removeElementHoverEventListeners = function () { return removeEventListenerFunctions.forEach(function (fn) { return fn(); }); };
    };
    /**
     * Dispose of navigation group
     */
    NavigationGroup.prototype.release = function () {
        this.eventSubscriber.release();
        this.activeElement = undefined;
        this.components.splice(0, this.components.length);
        this.removeElementHoverEventListeners();
    };
    return NavigationGroup;
}());
exports.NavigationGroup = NavigationGroup;

},{"./gethtmlelementsfromcomponents":103,"./navigationalgorithm":105,"./nodeeventsubscriber":107,"./typeguards":111,"./types":112}],107:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeEventSubscriber = void 0;
/**
 * Allows to subscribe to Node events.
 */
var NodeEventSubscriber = /** @class */ (function () {
    function NodeEventSubscriber() {
        this.attachedListeners = new Map();
    }
    NodeEventSubscriber.prototype.getEventListenersOfType = function (type) {
        if (!this.attachedListeners.has(type)) {
            this.attachedListeners.set(type, []);
        }
        return this.attachedListeners.get(type);
    };
    /**
     * Adds the given event listener to the node.
     *
     * @param node The node to remove the event listener from
     * @param type The event to listen to
     * @param listener The listener to remove
     * @param options The event listener options
     */
    NodeEventSubscriber.prototype.on = function (node, type, listener, options) {
        node.addEventListener(type, listener, options);
        this.getEventListenersOfType(type).push([node, listener, options]);
    };
    /**
     * Removes the given event listener from the node.
     *
     * @param node The node to attach the event listener to
     * @param type The event to listen to
     * @param listener The listener to add
     * @param options The event listener options
     */
    NodeEventSubscriber.prototype.off = function (node, type, listener, options) {
        var listenersOfType = this.getEventListenersOfType(type);
        var listenerIndex = listenersOfType.findIndex(function (_a) {
            var otherNode = _a[0], otherListener = _a[1], otherOptions = _a[2];
            return otherNode === node && otherListener === listener && otherOptions === options;
        });
        node.removeEventListener(type, listener, options);
        if (listenerIndex > -1) {
            listenersOfType.splice(listenerIndex, 1);
        }
    };
    /**
     * Removes all attached event listeners.
     */
    NodeEventSubscriber.prototype.release = function () {
        var _this = this;
        this.attachedListeners.forEach(function (listenersOfType, type) {
            listenersOfType.forEach(function (_a) {
                var element = _a[0], listener = _a[1], options = _a[2];
                _this.off(element, type, listener, options);
            });
        });
        this.attachedListeners.clear();
    };
    return NodeEventSubscriber;
}());
exports.NodeEventSubscriber = NodeEventSubscriber;

},{}],108:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RootNavigationGroup = void 0;
var navigationgroup_1 = require("./navigationgroup");
var types_1 = require("./types");
/**
 * Extends NavigationGroup and provides additional logic for hiding and showing the UI on the root container.
 *
 * @category Components
 */
var RootNavigationGroup = /** @class */ (function (_super) {
    __extends(RootNavigationGroup, _super);
    function RootNavigationGroup(container) {
        var elements = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            elements[_i - 1] = arguments[_i];
        }
        var _this = _super.apply(this, __spreadArray([container], elements, false)) || this;
        _this.container = container;
        return _this;
    }
    RootNavigationGroup.prototype.handleAction = function (action) {
        this.container.showUi();
        _super.prototype.handleAction.call(this, action);
    };
    RootNavigationGroup.prototype.handleNavigation = function (direction) {
        this.container.showUi();
        _super.prototype.handleNavigation.call(this, direction);
    };
    RootNavigationGroup.prototype.defaultActionHandler = function (action) {
        if (action === types_1.Action.BACK) {
            this.container.hideUi();
        }
        else {
            _super.prototype.defaultActionHandler.call(this, action);
        }
    };
    RootNavigationGroup.prototype.release = function () {
        _super.prototype.release.call(this);
    };
    return RootNavigationGroup;
}(navigationgroup_1.NavigationGroup));
exports.RootNavigationGroup = RootNavigationGroup;

},{"./navigationgroup":106,"./types":112}],109:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeekBarHandler = void 0;
var nodeeventsubscriber_1 = require("./nodeeventsubscriber");
var types_1 = require("./types");
var navigationalgorithm_1 = require("./navigationalgorithm");
var DefaultScrubSpeedPercentage = 0.005;
var ScrubSpeedClearInterval = 100;
var ScrubSpeedMultiplier = 1.1;
/**
 * Handles Spatial Navigation interaction with the seek bar. Ensures, that seek operations can be executed and that the
 * scrubbing tooltip is shown as if the user scrubbed using the mouse/touchscreen.
 */
var SeekBarHandler = /** @class */ (function () {
    function SeekBarHandler(rootNavigationGroup) {
        var _this = this;
        this.rootNavigationGroup = rootNavigationGroup;
        this.cursorPosition = { x: 0, y: 0 };
        this.isScrubbing = false;
        this.scrubSpeedPercentage = DefaultScrubSpeedPercentage;
        this.onNavigation = function (direction, target, preventDefault) {
            if (!isSeekBarWrapper(target)) {
                return;
            }
            if (direction === types_1.Direction.UP || direction === types_1.Direction.DOWN) {
                _this.stopSeeking(getSeekBar(target));
                return;
            }
            _this.initializeOrUpdateCursorPosition(target, direction);
            _this.dispatchMouseMoveEvent(getSeekBar(target));
            preventDefault();
        };
        this.onAction = function (action, target, preventDefault) {
            if (!isSeekBarWrapper(target)) {
                return;
            }
            var seekBar = getSeekBar(target);
            if (action === types_1.Action.SELECT && _this.isScrubbing) {
                _this.dispatchMouseClickEvent(seekBar);
                preventDefault();
            }
            else if (action === types_1.Action.BACK) {
                _this.stopSeeking(seekBar);
                preventDefault();
            }
        };
        this.rootNavigationGroup.onAction = this.onAction;
        this.eventSubscriber = new nodeeventsubscriber_1.NodeEventSubscriber();
        this.rootNavigationGroup.onNavigation = this.onNavigation;
    }
    SeekBarHandler.prototype.updateScrubSpeedPercentage = function () {
        var _this = this;
        clearTimeout(this.scrubSpeedResetTimeout);
        this.scrubSpeedPercentage *= ScrubSpeedMultiplier;
        this.scrubSpeedResetTimeout = window.setTimeout(function () { return _this.scrubSpeedPercentage = DefaultScrubSpeedPercentage; }, ScrubSpeedClearInterval);
    };
    SeekBarHandler.prototype.getIncrement = function (direction, seekBarWrapper) {
        this.updateScrubSpeedPercentage();
        var seekBarWidth = seekBarWrapper.getBoundingClientRect().width;
        var increment = seekBarWidth * this.scrubSpeedPercentage;
        return direction === types_1.Direction.RIGHT ? increment : -increment;
    };
    SeekBarHandler.prototype.resetCursorPosition = function () {
        this.cursorPosition.x = 0;
        this.cursorPosition.y = 0;
    };
    SeekBarHandler.prototype.updateCursorPosition = function (direction, seekBarWrapper) {
        this.cursorPosition.x += this.getIncrement(direction, seekBarWrapper);
    };
    SeekBarHandler.prototype.initializeCursorPosition = function (seekBarWrapper) {
        var playbackPositionMarker = getPlaybackPositionMarker(seekBarWrapper);
        var rect = (0, navigationalgorithm_1.getBoundingRectFromElement)(playbackPositionMarker);
        var startX = rect.x + (rect.width / 2);
        var startY = rect.y;
        this.cursorPosition.x = startX;
        this.cursorPosition.y = startY;
    };
    SeekBarHandler.prototype.initializeOrUpdateCursorPosition = function (seekBarWrapper, direction) {
        if (this.isScrubbing) {
            this.updateCursorPosition(direction, seekBarWrapper);
        }
        else {
            this.initializeCursorPosition(seekBarWrapper);
        }
        this.isScrubbing = true;
    };
    SeekBarHandler.prototype.getCursorPositionMouseEventInit = function () {
        return {
            clientX: this.cursorPosition.x,
            clientY: this.cursorPosition.y,
        };
    };
    SeekBarHandler.prototype.dispatchMouseMoveEvent = function (seekBar) {
        seekBar.dispatchEvent(new MouseEvent('mousemove', this.getCursorPositionMouseEventInit()));
    };
    SeekBarHandler.prototype.dispatchMouseClickEvent = function (seekBar) {
        var _this = this;
        var mouseDownHandler = function () {
            var mouseEventInit = _this.getCursorPositionMouseEventInit();
            document.dispatchEvent(new MouseEvent('mouseup', mouseEventInit));
            _this.eventSubscriber.off(seekBar, 'mousedown', mouseDownHandler);
            _this.stopSeeking(seekBar);
        };
        this.eventSubscriber.on(seekBar, 'mousedown', mouseDownHandler);
        seekBar.dispatchEvent(new MouseEvent('mousedown'));
    };
    SeekBarHandler.prototype.stopSeeking = function (seekBar) {
        this.resetCursorPosition();
        this.isScrubbing = false;
        this.dispatchMouseLeaveEvent(seekBar);
    };
    SeekBarHandler.prototype.dispatchMouseLeaveEvent = function (seekBar) {
        seekBar.dispatchEvent(new MouseEvent('mouseleave'));
    };
    /**
     * Releases the SeekBraHandler, making sure all event subscribers are removed.
     */
    SeekBarHandler.prototype.release = function () {
        this.eventSubscriber.release();
        this.rootNavigationGroup.onAction = undefined;
        this.rootNavigationGroup.onNavigation = undefined;
    };
    return SeekBarHandler;
}());
exports.SeekBarHandler = SeekBarHandler;
function isSeekBarWrapper(element) {
    return Array.from(element.classList).findIndex(function (className) { return /-ui-seekbar$/.test(className); }) > -1;
}
function getSeekBar(seekBarWrapper) {
    return seekBarWrapper.children.item(0);
}
function getPlaybackPositionMarker(seekBarWrapper) {
    return seekBarWrapper.querySelector('[class*="seekbar-playbackposition-marker"]');
}

},{"./navigationalgorithm":105,"./nodeeventsubscriber":107,"./types":112}],110:[function(require,module,exports){
"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpatialNavigation = void 0;
var nodeeventsubscriber_1 = require("./nodeeventsubscriber");
var seekbarhandler_1 = require("./seekbarhandler");
var keymap_1 = require("./keymap");
var typeguards_1 = require("./typeguards");
/**
 * SpatialNavigation keeps track of all navigation groups, and updates the active navigation group when visibility
 * changes on group container.
 *
 * It listens to key events, and triggers either handleNavigation or handleAction on the active group.
 * SeekBarHandler will get instantiated with root navigation group and disposed on release of the spatial navigation.
 */
var SpatialNavigation = /** @class */ (function () {
    function SpatialNavigation(rootNavigationGroup) {
        var navigationGroups = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            navigationGroups[_i - 1] = arguments[_i];
        }
        var _this = this;
        this.navigationGroups = [];
        this.onShow = function (group) {
            _this.activeNavigationGroups.push(group);
            _this.updateEnabledNavigationGroup();
        };
        this.onHide = function (group) {
            var groupIndex = _this.activeNavigationGroups.findIndex(function (other) { return other === group; });
            if (groupIndex > -1) {
                group.disable();
                _this.activeNavigationGroups.splice(groupIndex, 1);
                _this.updateEnabledNavigationGroup();
            }
        };
        /**
         * Checks if keyboard event keycode is tracked either as Direction or Action and calls appropriate handler on active
         * navigation group
         *
         * @param e {KeyboardEvent}
         */
        this.handleKeyEvent = function (e) {
            var event = _this.keyMap[getKeyCode(e)];
            var active = _this.getActiveNavigationGroup();
            if (!active || !active.container || active.container.isHidden() || active.container.isDisabled()) {
                return;
            }
            if ((0, typeguards_1.isDirection)(event)) {
                active.handleNavigation(event);
                e.preventDefault();
                e.stopPropagation();
            }
            if ((0, typeguards_1.isAction)(event)) {
                active.handleAction(event);
                e.preventDefault();
                e.stopPropagation();
            }
        };
        this.seekBarHandler = new seekbarhandler_1.SeekBarHandler(rootNavigationGroup);
        this.activeNavigationGroups = [];
        this.unsubscribeVisibilityChangesFns = [];
        this.eventSubscriber = new nodeeventsubscriber_1.NodeEventSubscriber();
        this.navigationGroups = __spreadArray([rootNavigationGroup], navigationGroups, true);
        this.keyMap = (0, keymap_1.getKeyMapForPlatform)();
        this.subscribeToNavigationGroupVisibilityChanges();
        this.attachKeyEventHandler();
        this.enableDefaultNavigationGroup();
    }
    SpatialNavigation.prototype.attachKeyEventHandler = function () {
        this.eventSubscriber.on(document, 'keydown', this.handleKeyEvent, true);
    };
    /**
     * Subscribes to onHide and onShow on all navigation groups containers as Spatial navigation tracks active navigation
     * group based on their container visibility.
     */
    SpatialNavigation.prototype.subscribeToNavigationGroupVisibilityChanges = function () {
        var _this = this;
        this.navigationGroups.forEach(function (group) {
            var onShowHandler = function () { return _this.onShow(group); };
            var onHideHandler = function () { return _this.onHide(group); };
            group.container.onShow.subscribe(onShowHandler);
            group.container.onHide.subscribe(onHideHandler);
            _this.unsubscribeVisibilityChangesFns.push(function () { return group.container.onShow.unsubscribe(onShowHandler); }, function () { return group.container.onHide.unsubscribe(onHideHandler); });
        });
    };
    SpatialNavigation.prototype.unsubscribeFromNavigationGroupVisibilityChanges = function () {
        this.unsubscribeVisibilityChangesFns.forEach(function (unsub) { return unsub(); });
        this.unsubscribeVisibilityChangesFns = [];
    };
    /**
     * It will enable group of which container is currently shown
     * If there are no groups with containers that are currently visible, it will enable root navigation group
     */
    SpatialNavigation.prototype.enableDefaultNavigationGroup = function () {
        var _a;
        var isShown = function (group) { return group.container.isShown(); };
        var groupToEnable = (_a = this.navigationGroups.find(isShown)) !== null && _a !== void 0 ? _a : this.navigationGroups[0];
        if (groupToEnable) {
            this.activeNavigationGroups.push(groupToEnable);
            this.updateEnabledNavigationGroup();
        }
    };
    /**
     * Disables navigation groups that are no longer active and calls enable on last pushed navigation group
     */
    SpatialNavigation.prototype.updateEnabledNavigationGroup = function () {
        var _this = this;
        this.activeNavigationGroups.forEach(function (group, idx) {
            if (idx < _this.activeNavigationGroups.length - 1) {
                group.disable();
            }
            else {
                group.enable();
            }
        });
    };
    /**
     * Returns currently active navigation group
     */
    SpatialNavigation.prototype.getActiveNavigationGroup = function () {
        return this.activeNavigationGroups[this.activeNavigationGroups.length - 1];
    };
    /**
     * Dispose of SpatialNavigation
     *
     * Remove all event handlers, release seekbar handler and release all navigation groups.
     */
    SpatialNavigation.prototype.release = function () {
        this.unsubscribeFromNavigationGroupVisibilityChanges();
        this.eventSubscriber.release();
        this.navigationGroups.forEach(function (group) { return group.release(); });
        this.seekBarHandler.release();
    };
    return SpatialNavigation;
}());
exports.SpatialNavigation = SpatialNavigation;
function getKeyCode(event) {
    return event.keyCode;
}

},{"./keymap":104,"./nodeeventsubscriber":107,"./seekbarhandler":109,"./typeguards":111}],111:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAction = exports.isDirection = exports.isListBox = exports.isContainer = exports.isComponent = exports.isSettingsPanel = void 0;
var component_1 = require("../components/component");
var settingspanel_1 = require("../components/settingspanel");
var container_1 = require("../components/container");
var listbox_1 = require("../components/listbox");
var types_1 = require("./types");
function isSettingsPanel(component) {
    return component instanceof settingspanel_1.SettingsPanel;
}
exports.isSettingsPanel = isSettingsPanel;
function isComponent(obj) {
    return obj !== null && obj !== undefined && obj instanceof component_1.Component;
}
exports.isComponent = isComponent;
function isContainer(obj) {
    return obj !== null && obj !== undefined && obj instanceof container_1.Container;
}
exports.isContainer = isContainer;
function isListBox(obj) {
    return obj instanceof listbox_1.ListBox;
}
exports.isListBox = isListBox;
function isDirection(direction) {
    return typeof direction === 'string' && Object.values(types_1.Direction).includes(direction);
}
exports.isDirection = isDirection;
function isAction(action) {
    return typeof action === 'string' && Object.values(types_1.Action).includes(action);
}
exports.isAction = isAction;

},{"../components/component":23,"../components/container":24,"../components/listbox":34,"../components/settingspanel":50,"./types":112}],112:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Action = exports.Direction = void 0;
var Direction;
(function (Direction) {
    Direction["UP"] = "up";
    Direction["DOWN"] = "down";
    Direction["LEFT"] = "left";
    Direction["RIGHT"] = "right";
})(Direction = exports.Direction || (exports.Direction = {}));
var Action;
(function (Action) {
    Action["SELECT"] = "select";
    Action["BACK"] = "back";
})(Action = exports.Action || (exports.Action = {}));

},{}],113:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageUtils = void 0;
/**
 * @category Utils
 */
var StorageUtils;
(function (StorageUtils) {
    var disableStorageApi;
    function setStorageApiDisabled(uiConfig) {
        disableStorageApi = uiConfig.disableStorageApi;
    }
    StorageUtils.setStorageApiDisabled = setStorageApiDisabled;
    function shouldUseLocalStorage() {
        try {
            return (!disableStorageApi &&
                window.localStorage &&
                typeof localStorage.getItem === 'function' &&
                typeof localStorage.setItem === 'function');
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Stores a string item into localStorage.
     * @param key the item's key
     * @param data the item's data
     */
    function setItem(key, data) {
        if (shouldUseLocalStorage()) {
            try {
                window.localStorage.setItem(key, data);
            }
            catch (e) {
                console.debug("Failed to set storage item ".concat(key), e);
            }
        }
    }
    StorageUtils.setItem = setItem;
    /**
     * Gets an item's string value from the localStorage.
     * @param key the key to look up its associated value
     * @return {string | null} Returns the string if found, null if there is no data stored for the key
     */
    function getItem(key) {
        if (shouldUseLocalStorage()) {
            try {
                return window.localStorage.getItem(key);
            }
            catch (e) {
                console.debug("Failed to get storage item ".concat(key), e);
            }
        }
        return null;
    }
    StorageUtils.getItem = getItem;
    /**
     * Stores an object into localStorage. The object will be serialized to JSON. The following types are supported
     * in addition to the default types:
     *  - ColorUtils.Color
     *
     * @param key the key to store the data to
     * @param data the object to store
     */
    function setObject(key, data) {
        var json = JSON.stringify(data);
        setItem(key, json);
    }
    StorageUtils.setObject = setObject;
    /**
     * Gets an object for the given key from localStorage. The object will be deserialized from JSON. Beside the
     * default types, the following types are supported:
     *  - ColorUtils.Color
     *
     * @param key the key to look up its associated object
     * @return {any} Returns the object if found, null otherwise
     */
    function getObject(key) {
        var json = getItem(key);
        if (json) {
            var object = JSON.parse(json);
            return object;
        }
        return null;
    }
    StorageUtils.getObject = getObject;
})(StorageUtils = exports.StorageUtils || (exports.StorageUtils = {}));

},{}],114:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringUtils = void 0;
var i18n_1 = require("./localization/i18n");
/**
 * @category Utils
 */
var StringUtils;
(function (StringUtils) {
    StringUtils.FORMAT_HHMMSS = 'hh:mm:ss';
    StringUtils.FORMAT_MMSS = 'mm:ss';
    /**
     * Formats a number of seconds into a time string with the pattern hh:mm:ss.
     *
     * @param totalSeconds the total number of seconds to format to string
     * @param format the time format to output (default: hh:mm:ss)
     * @returns {string} the formatted time string
     */
    function secondsToTime(totalSeconds, format) {
        if (format === void 0) { format = StringUtils.FORMAT_HHMMSS; }
        var isNegative = totalSeconds < 0;
        if (isNegative) {
            // If the time is negative, we make it positive for the calculation below
            // (else we'd get all negative numbers) and reattach the negative sign later.
            totalSeconds = -totalSeconds;
        }
        // Split into separate time parts
        var hours = Math.floor(totalSeconds / 3600);
        var minutes = Math.floor(totalSeconds / 60) - hours * 60;
        var seconds = Math.floor(totalSeconds) % 60;
        return (isNegative ? '-' : '') + format
            .replace('hh', leftPadWithZeros(hours, 2))
            .replace('mm', leftPadWithZeros(minutes, 2))
            .replace('ss', leftPadWithZeros(seconds, 2));
    }
    StringUtils.secondsToTime = secondsToTime;
    function secondsToText(totalSeconds) {
        var isNegative = totalSeconds < 0;
        if (isNegative) {
            // If the time is negative, we make it positive for the calculation below
            // (else we'd get all negative numbers) and reattach the negative sign later.
            totalSeconds = -totalSeconds;
        }
        // Split into separate time parts
        var hours = Math.floor(totalSeconds / 3600);
        var minutes = Math.floor(totalSeconds / 60) - hours * 60;
        var seconds = Math.floor(totalSeconds) % 60;
        return (isNegative ? '-' : '') +
            (hours !== 0 ? "".concat(leftPadWithZeros(hours, 2), " ").concat(i18n_1.i18n.performLocalization(i18n_1.i18n.getLocalizer('settings.time.hours')), " ") : '') +
            (minutes !== 0 ? "".concat(leftPadWithZeros(minutes, 2), " ").concat(i18n_1.i18n.performLocalization(i18n_1.i18n.getLocalizer('settings.time.minutes')), " ") : '') +
            "".concat(leftPadWithZeros(seconds, 2), " ").concat(i18n_1.i18n.performLocalization(i18n_1.i18n.getLocalizer('settings.time.seconds')));
    }
    StringUtils.secondsToText = secondsToText;
    /**
     * Converts a number to a string and left-pads it with zeros to the specified length.
     * Example: leftPadWithZeros(123, 5) => '00123'
     *
     * @param num the number to convert to string and pad with zeros
     * @param length the desired length of the padded string
     * @returns {string} the padded number as string
     */
    function leftPadWithZeros(num, length) {
        var text = num + '';
        var padding = '0000000000'.substr(0, length - text.length);
        return padding + text;
    }
    /**
     * Fills out placeholders in an ad message.
     *
     * Has the placeholders '{remainingTime[formatString]}', '{playedTime[formatString]}',
     * '{adDuration[formatString]}' and {adBreakRemainingTime[formatString]}, which are replaced by the remaining time until the ad can be skipped, the current
     * time or the ad duration. The format string is optional. If not specified, the placeholder is replaced by the time
     * in seconds. If specified, it must be of the following format:
     * - %d - Inserts the time as an integer.
     * - %0Nd - Inserts the time as an integer with leading zeroes, if the length of the time string is smaller than N.
     * - %f - Inserts the time as a float.
     * - %0Nf - Inserts the time as a float with leading zeroes.
     * - %.Mf - Inserts the time as a float with M decimal places. Can be combined with %0Nf, e.g. %04.2f (the time
     * 10.123 would be printed as 0010.12).
     * - %hh:mm:ss
     * - %mm:ss
     *
     * Examples:
     * - { text: 'Ad: {remainingTime%mm:ss} secs' }
     * An input value of 100 would be displayed as: 'Ad: 01:40 secs'
     * - { text: 'Ad: {remainingTime%f} secs' }
     * An input value of 100 would be displayed as: 'Ad: 100.0 secs'
     * - { text: 'Adbreak: {adBreakRemainingTime%f} secs' }
     * Adbreak with 2 ads each 50 seconds would be displayed as: 'Ad: 100.0 secs'
     *
     * @param adMessage an ad message with optional placeholders to fill
     * @param skipOffset if specified, {remainingTime} will be filled with the remaining time until the ad can be skipped
     * @param player the player to get the time data from
     * @returns {string} the ad message with filled placeholders
     */
    function replaceAdMessagePlaceholders(adMessage, skipOffset, player) {
        var adMessagePlaceholderRegex = new RegExp('\\{(remainingTime|playedTime|adDuration|adBreakRemainingTime)(}|%((0[1-9]\\d*(\\.\\d+(d|f)|d|f)|\\.\\d+f|d|f)|hh:mm:ss|mm:ss)})', 'g');
        return adMessage.replace(adMessagePlaceholderRegex, function (formatString) {
            var time = 0;
            if (formatString.indexOf('remainingTime') > -1) {
                if (skipOffset) {
                    time = Math.ceil(skipOffset - player.getCurrentTime());
                }
                else {
                    time = player.getDuration() - player.getCurrentTime();
                }
            }
            else if (formatString.indexOf('playedTime') > -1) {
                time = player.getCurrentTime();
            }
            else if (formatString.indexOf('adDuration') > -1) {
                time = player.getDuration();
            }
            else if (formatString.indexOf('adBreakRemainingTime') > -1) { // To display the remaining time in the ad break as opposed to in the ad
                time = 0;
                // compute list of ads and calculate duration of remaining ads based on index of active ad
                if (player.ads.isLinearAdActive()) {
                    var isActiveAd = function (ad) { return player.ads.getActiveAd().id === ad.id; };
                    var indexOfActiveAd = player.ads.getActiveAdBreak().ads.findIndex(isActiveAd);
                    var duration = player.ads.getActiveAdBreak().ads
                        .slice(indexOfActiveAd)
                        .reduce(function (total, ad) { return total + (ad.isLinear ? ad.duration : 0); }, 0);
                    // And remaning ads duration minus time played
                    time = duration - player.getCurrentTime();
                }
            }
            return formatNumber(Math.round(time), formatString);
        });
    }
    StringUtils.replaceAdMessagePlaceholders = replaceAdMessagePlaceholders;
    function formatNumber(time, format) {
        var formatStringValidationRegex = /%((0[1-9]\d*(\.\d+(d|f)|d|f)|\.\d+f|d|f)|hh:mm:ss|mm:ss)/;
        var leadingZeroesRegex = /(%0[1-9]\d*)(?=(\.\d+f|f|d))/;
        var decimalPlacesRegex = /\.\d*(?=f)/;
        if (!formatStringValidationRegex.test(format)) {
            // If the format is invalid, we set a default fallback format
            format = '%d';
        }
        // Determine the number of leading zeros
        var leadingZeroes = 0;
        var leadingZeroesMatches = format.match(leadingZeroesRegex);
        if (leadingZeroesMatches) {
            leadingZeroes = parseInt(leadingZeroesMatches[0].substring(2));
        }
        // Determine the number of decimal places
        var numDecimalPlaces = null;
        var decimalPlacesMatches = format.match(decimalPlacesRegex);
        if (decimalPlacesMatches && !isNaN(parseInt(decimalPlacesMatches[0].substring(1)))) {
            numDecimalPlaces = parseInt(decimalPlacesMatches[0].substring(1));
            if (numDecimalPlaces > 20) {
                numDecimalPlaces = 20;
            }
        }
        // Float format
        if (format.indexOf('f') > -1) {
            var timeString = '';
            if (numDecimalPlaces !== null) {
                // Apply fixed number of decimal places
                timeString = time.toFixed(numDecimalPlaces);
            }
            else {
                timeString = '' + time;
            }
            // Apply leading zeros
            if (timeString.indexOf('.') > -1) {
                return leftPadWithZeros(timeString, timeString.length + (leadingZeroes - timeString.indexOf('.')));
            }
            else {
                return leftPadWithZeros(timeString, leadingZeroes);
            }
        }
        // Time format
        else if (format.indexOf(':') > -1) {
            var totalSeconds = Math.ceil(time);
            // hh:mm:ss format
            if (format.indexOf('hh') > -1) {
                return secondsToTime(totalSeconds);
            }
            // mm:ss format
            else {
                var minutes = Math.floor(totalSeconds / 60);
                var seconds = totalSeconds % 60;
                return leftPadWithZeros(minutes, 2) + ':' + leftPadWithZeros(seconds, 2);
            }
        }
        // Integer format
        else {
            return leftPadWithZeros(Math.ceil(time), leadingZeroes);
        }
    }
})(StringUtils = exports.StringUtils || (exports.StringUtils = {}));

},{"./localization/i18n":94}],115:[function(require,module,exports){
"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleSwitchHandler = void 0;
var i18n_1 = require("./localization/i18n");
/**
 * Helper class to handle all subtitle related events
 *
 * This class listens to player events as well as the `ListSelector` event if selection changed
 *
 * @category Utils
 */
var SubtitleSwitchHandler = exports.SubtitleSwitchHandler = /** @class */ (function () {
    function SubtitleSwitchHandler(player, element, uimanager) {
        var _this = this;
        this.addSubtitle = function (event) {
            var subtitle = event.subtitle;
            if (!_this.listElement.hasItem(subtitle.id)) {
                _this.listElement.addItem(subtitle.id, subtitle.label);
            }
        };
        this.removeSubtitle = function (event) {
            var subtitle = event.subtitle;
            if (_this.listElement.hasItem(subtitle.id)) {
                _this.listElement.removeItem(subtitle.id);
            }
        };
        this.selectCurrentSubtitle = function () {
            if (!_this.player.subtitles) {
                // Subtitles API not available (yet)
                return;
            }
            var currentSubtitle = _this.player.subtitles.list().filter(function (subtitle) { return subtitle.enabled; }).pop();
            _this.listElement.selectItem(currentSubtitle ? currentSubtitle.id : SubtitleSwitchHandler.SUBTITLES_OFF_KEY);
        };
        this.clearSubtitles = function () {
            _this.listElement.clearItems();
        };
        this.refreshSubtitles = function () {
            if (!_this.player.subtitles) {
                // Subtitles API not available (yet)
                return;
            }
            var offListItem = {
                key: SubtitleSwitchHandler.SUBTITLES_OFF_KEY,
                label: i18n_1.i18n.getLocalizer('off'),
            };
            var subtitles = _this.player.subtitles.list();
            var subtitleToListItem = function (subtitle) {
                return { key: subtitle.id, label: subtitle.label };
            };
            _this.listElement.synchronizeItems(__spreadArray([
                offListItem
            ], subtitles.map(subtitleToListItem), true));
            _this.selectCurrentSubtitle();
        };
        this.player = player;
        this.listElement = element;
        this.uimanager = uimanager;
        this.bindSelectionEvent();
        this.bindPlayerEvents();
        this.refreshSubtitles();
    }
    SubtitleSwitchHandler.prototype.bindSelectionEvent = function () {
        var _this = this;
        this.listElement.onItemSelected.subscribe(function (_, value) {
            // TODO add support for multiple concurrent subtitle selections
            if (value === SubtitleSwitchHandler.SUBTITLES_OFF_KEY) {
                var currentSubtitle = _this.player.subtitles.list().filter(function (subtitle) { return subtitle.enabled; }).pop();
                if (currentSubtitle) {
                    _this.player.subtitles.disable(currentSubtitle.id);
                }
            }
            else {
                _this.player.subtitles.enable(value, true);
            }
        });
    };
    SubtitleSwitchHandler.prototype.bindPlayerEvents = function () {
        this.player.on(this.player.exports.PlayerEvent.SubtitleAdded, this.addSubtitle);
        this.player.on(this.player.exports.PlayerEvent.SubtitleEnabled, this.selectCurrentSubtitle);
        this.player.on(this.player.exports.PlayerEvent.SubtitleDisabled, this.selectCurrentSubtitle);
        this.player.on(this.player.exports.PlayerEvent.SubtitleRemoved, this.removeSubtitle);
        // Update subtitles when source goes away
        this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.clearSubtitles);
        // Update subtitles when the period within a source changes
        this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshSubtitles);
        this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshSubtitles);
    };
    SubtitleSwitchHandler.SUBTITLES_OFF_KEY = 'null';
    return SubtitleSwitchHandler;
}());

},{"./localization/i18n":94}],116:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Timeout = void 0;
// TODO change to internal (not exported) class, how to use in other files?
/**
 * Executes a callback after a specified amount of time, optionally repeatedly until stopped.
 */
var Timeout = /** @class */ (function () {
    /**
     * Creates a new timeout callback handler.
     * @param delay the delay in milliseconds after which the callback should be executed
     * @param callback the callback to execute after the delay time
     * @param repeat if true, call the callback repeatedly in delay intervals
     */
    function Timeout(delay, callback, repeat) {
        if (repeat === void 0) { repeat = false; }
        this.delay = delay;
        this.callback = callback;
        this.repeat = repeat;
        this.timeoutOrIntervalId = 0;
        this.active = false;
        this.suspended = false;
    }
    /**
     * Starts the timeout and calls the callback when the timeout delay has passed. Has no effect when the timeout is
     * suspended.
     * @returns {Timeout} the current timeout (so the start call can be chained to the constructor)
     */
    Timeout.prototype.start = function () {
        this.reset();
        return this;
    };
    /**
     * Clears the timeout. The callback will not be called if clear is called during the timeout.
     */
    Timeout.prototype.clear = function () {
        this.clearInternal();
    };
    /**
     * Suspends the timeout. The callback will not be called and calls to `start` and `reset` will be ignored until the
     * timeout is resumed.
     */
    Timeout.prototype.suspend = function () {
        this.suspended = true;
        this.clearInternal();
        return this;
    };
    /**
     * Resumes the timeout.
     * @param reset whether to reset the timeout after resuming
     */
    Timeout.prototype.resume = function (reset) {
        this.suspended = false;
        if (reset) {
            this.reset();
        }
        return this;
    };
    /**
     * Resets the passed timeout delay to zero. Can be used to defer the calling of the callback. Has no effect if the
     * timeout is suspended.
     */
    Timeout.prototype.reset = function () {
        var _this = this;
        this.clearInternal();
        if (this.suspended) {
            return;
        }
        if (this.repeat) {
            this.timeoutOrIntervalId = setInterval(this.callback, this.delay);
        }
        else {
            this.timeoutOrIntervalId = setTimeout(function () {
                _this.active = false;
                _this.callback();
            }, this.delay);
        }
        this.active = true;
    };
    Timeout.prototype.isActive = function () {
        return this.active;
    };
    Timeout.prototype.clearInternal = function () {
        if (this.repeat) {
            clearInterval(this.timeoutOrIntervalId);
        }
        else {
            clearTimeout(this.timeoutOrIntervalId);
        }
        this.active = false;
    };
    return Timeout;
}());
exports.Timeout = Timeout;

},{}],117:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],118:[function(require,module,exports){
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UIFactory = void 0;
var gobackbutton_1 = require("./../custom/ts/components/gobackbutton");
var radiomodetogglebutton_1 = require("./../custom/ts/components/radiomode/radiomodetogglebutton");
var quanteecconsumptions_1 = require("./../custom/ts/components/quanteecconsumptions");
var playbackjumpoverlay_1 = require("../custom/ts/components/playbackjumpoverlay");
var subtitleoverlay_1 = require("./components/subtitleoverlay");
var settingspanelpage_1 = require("./components/settingspanelpage");
var settingspanelitem_1 = require("./components/settingspanelitem");
var videoqualityselectbox_1 = require("./components/videoqualityselectbox");
var playbackspeedselectbox_1 = require("./components/playbackspeedselectbox");
var audiotrackselectbox_1 = require("./components/audiotrackselectbox");
var audioqualityselectbox_1 = require("./components/audioqualityselectbox");
var settingspanel_1 = require("./components/settingspanel");
var subtitlesettingspanelpage_1 = require("./components/subtitlesettings/subtitlesettingspanelpage");
var settingspanelpageopenbutton_1 = require("./components/settingspanelpageopenbutton");
var subtitlesettingslabel_1 = require("./components/subtitlesettings/subtitlesettingslabel");
var subtitleselectbox_1 = require("./components/subtitleselectbox");
var controlbar_1 = require("./components/controlbar");
var container_1 = require("./components/container");
var playbacktimelabel_1 = require("./components/playbacktimelabel");
var seekbar_1 = require("./components/seekbar");
var seekbarlabel_1 = require("./components/seekbarlabel");
var playbacktogglebutton_1 = require("./components/playbacktogglebutton");
var volumetogglebutton_1 = require("./components/volumetogglebutton");
var volumeslider_1 = require("./components/volumeslider");
var spacer_1 = require("./components/spacer");
var pictureinpicturetogglebutton_1 = require("./components/pictureinpicturetogglebutton");
var airplaytogglebutton_1 = require("./components/airplaytogglebutton");
var casttogglebutton_1 = require("./components/casttogglebutton");
var vrtogglebutton_1 = require("./components/vrtogglebutton");
var settingstogglebutton_1 = require("./components/settingstogglebutton");
var fullscreentogglebutton_1 = require("./components/fullscreentogglebutton");
var uicontainer_1 = require("./components/uicontainer");
var bufferingoverlay_1 = require("./components/bufferingoverlay");
var playbacktoggleoverlay_1 = require("./components/playbacktoggleoverlay");
var caststatusoverlay_1 = require("./components/caststatusoverlay");
var titlebar_1 = require("./components/titlebar");
var recommendationoverlay_1 = require("./components/recommendationoverlay");
var errormessageoverlay_1 = require("./components/errormessageoverlay");
var adclickoverlay_1 = require("./components/adclickoverlay");
var admessagelabel_1 = require("./components/admessagelabel");
var adskipbutton_1 = require("./components/adskipbutton");
var closebutton_1 = require("./components/closebutton");
var metadatalabel_1 = require("./components/metadatalabel");
var playerutils_1 = require("./playerutils");
var label_1 = require("./components/label");
var castuicontainer_1 = require("./components/castuicontainer");
var uimanager_1 = require("./uimanager");
var i18n_1 = require("./localization/i18n");
var subtitlelistbox_1 = require("./components/subtitlelistbox");
var audiotracklistbox_1 = require("./components/audiotracklistbox");
var spatialnavigation_1 = require("./spatialnavigation/spatialnavigation");
var rootnavigationgroup_1 = require("./spatialnavigation/rootnavigationgroup");
var ListNavigationGroup_1 = require("./spatialnavigation/ListNavigationGroup");
var ecomodecontainer_1 = require("./components/ecomodecontainer");
var uiManager;
var playerApi;
var uiConfig;
var UIFactory;
(function (UIFactory) {
    function buildDefaultUI(player, config) {
        if (config === void 0) { config = {}; }
        return UIFactory.buildModernUI(player, config);
    }
    UIFactory.buildDefaultUI = buildDefaultUI;
    function buildDefaultSmallScreenUI(player, config) {
        if (config === void 0) { config = {}; }
        uiConfig = config;
        playerApi = player;
        uiManager = UIFactory.buildModernSmallScreenUI(player, config);
        return uiManager;
    }
    UIFactory.buildDefaultSmallScreenUI = buildDefaultSmallScreenUI;
    function buildDefaultCastReceiverUI(player, config) {
        if (config === void 0) { config = {}; }
        return UIFactory.buildModernCastReceiverUI(player, config);
    }
    UIFactory.buildDefaultCastReceiverUI = buildDefaultCastReceiverUI;
    function buildDefaultTvUI(player, config) {
        if (config === void 0) { config = {}; }
        return UIFactory.buildModernTvUI(player, config);
    }
    UIFactory.buildDefaultTvUI = buildDefaultTvUI;
    function modernUI(_a) {
        var ecoMode = _a.ecoMode, radioModeAvailable = _a.radioModeAvailable;
        var subtitleOverlay = new subtitleoverlay_1.SubtitleOverlay();
        var mainSettingsPanelPage;
        var components = [
            new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.video.quality'), new videoqualityselectbox_1.VideoQualitySelectBox()),
            new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('speed'), new playbackspeedselectbox_1.PlaybackSpeedSelectBox()),
            new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.audio.track'), new audiotrackselectbox_1.AudioTrackSelectBox()),
            new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.audio.quality'), new audioqualityselectbox_1.AudioQualitySelectBox()),
        ];
        if (ecoMode) {
            var ecoModeContainer = new ecomodecontainer_1.EcoModeContainer();
            ecoModeContainer.setOnToggleCallback(function () {
                // forces the browser to re-calculate the height of the settings panel when adding/removing elements
                settingsPanel.getDomElement().css({ width: '', height: '' });
            });
            components.unshift(ecoModeContainer);
        }
        mainSettingsPanelPage = new settingspanelpage_1.SettingsPanelPage({
            components: components,
        });
        var settingsPanel = new settingspanel_1.SettingsPanel({
            components: [mainSettingsPanelPage],
            hidden: true,
        });
        var subtitleSettingsPanelPage = new subtitlesettingspanelpage_1.SubtitleSettingsPanelPage({
            settingsPanel: settingsPanel,
            overlay: subtitleOverlay,
        });
        var subtitleSelectBox = new subtitleselectbox_1.SubtitleSelectBox();
        var subtitleSettingsOpenButton = new settingspanelpageopenbutton_1.SettingsPanelPageOpenButton({
            targetPage: subtitleSettingsPanelPage,
            container: settingsPanel,
            ariaLabel: i18n_1.i18n.getLocalizer('settings.subtitles'),
            text: i18n_1.i18n.getLocalizer('open'),
        });
        mainSettingsPanelPage.addComponent(new settingspanelitem_1.SettingsPanelItem(new subtitlesettingslabel_1.SubtitleSettingsLabel({
            text: i18n_1.i18n.getLocalizer('settings.subtitles'),
            opener: subtitleSettingsOpenButton,
        }), subtitleSelectBox, {
            role: 'menubar',
        }));
        settingsPanel.addComponent(subtitleSettingsPanelPage);
        var containerComponents = [
            new playbacktogglebutton_1.PlaybackToggleButton(),
            new volumetogglebutton_1.VolumeToggleButton(),
            new volumeslider_1.VolumeSlider(),
            new spacer_1.Spacer(),
            new pictureinpicturetogglebutton_1.PictureInPictureToggleButton(),
            new airplaytogglebutton_1.AirPlayToggleButton(),
            new casttogglebutton_1.CastToggleButton(),
            new vrtogglebutton_1.VRToggleButton(),
            new quanteecconsumptions_1.QuanteecConsumptions(),
            new settingstogglebutton_1.SettingsToggleButton({ settingsPanel: settingsPanel }),
            new fullscreentogglebutton_1.FullscreenToggleButton(),
        ];
        if (radioModeAvailable) {
            containerComponents.splice(7, 0, new radiomodetogglebutton_1.RadioModeToggleButton({ active: false }));
        }
        var controlBar = new controlbar_1.ControlBar({
            components: [
                settingsPanel,
                new container_1.Container({
                    components: [
                        new playbacktimelabel_1.PlaybackTimeLabel({
                            timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.CurrentTime,
                            hideInLivePlayback: true,
                        }),
                        new seekbar_1.SeekBar({ label: new seekbarlabel_1.SeekBarLabel() }),
                        new playbacktimelabel_1.PlaybackTimeLabel({
                            timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.TotalTime,
                            cssClasses: ['text-right'],
                        }),
                    ],
                    cssClasses: ['controlbar-top'],
                }),
                new container_1.Container({
                    components: containerComponents,
                    cssClasses: ['controlbar-bottom'],
                }),
            ],
        });
        return new uicontainer_1.UIContainer({
            components: [
                subtitleOverlay,
                new bufferingoverlay_1.BufferingOverlay(),
                new playbacktoggleoverlay_1.PlaybackToggleOverlay(),
                new playbackjumpoverlay_1.PlaybackJumpControlsOverlay(),
                new caststatusoverlay_1.CastStatusOverlay(),
                controlBar,
                new titlebar_1.TitleBar(),
                new recommendationoverlay_1.RecommendationOverlay(),
                new errormessageoverlay_1.ErrorMessageOverlay(),
            ],
            hideDelay: 2000,
            hidePlayerStateExceptions: [
                playerutils_1.PlayerUtils.PlayerState.Prepared,
                playerutils_1.PlayerUtils.PlayerState.Paused,
                playerutils_1.PlayerUtils.PlayerState.Finished,
            ],
        });
    }
    UIFactory.modernUI = modernUI;
    function modernAdsUI() {
        return new uicontainer_1.UIContainer({
            components: [
                new bufferingoverlay_1.BufferingOverlay(),
                new adclickoverlay_1.AdClickOverlay(),
                new playbacktoggleoverlay_1.PlaybackToggleOverlay(),
                new container_1.Container({
                    components: [new admessagelabel_1.AdMessageLabel({ text: i18n_1.i18n.getLocalizer('ads.remainingTime') }), new adskipbutton_1.AdSkipButton()],
                    cssClass: 'ui-ads-status',
                }),
                new controlbar_1.ControlBar({
                    components: [
                        new container_1.Container({
                            components: [
                                new playbacktogglebutton_1.PlaybackToggleButton(),
                                new volumetogglebutton_1.VolumeToggleButton(),
                                new volumeslider_1.VolumeSlider(),
                                new spacer_1.Spacer(),
                                new fullscreentogglebutton_1.FullscreenToggleButton(),
                            ],
                            cssClasses: ['controlbar-bottom'],
                        }),
                    ],
                }),
            ],
            cssClasses: ['ui-skin-ads'],
            hideDelay: 2000,
            hidePlayerStateExceptions: [
                playerutils_1.PlayerUtils.PlayerState.Prepared,
                playerutils_1.PlayerUtils.PlayerState.Paused,
                playerutils_1.PlayerUtils.PlayerState.Finished,
            ],
        });
    }
    UIFactory.modernAdsUI = modernAdsUI;
    function modernSmallScreenUI(_a) {
        var radioModeAvailable = _a.radioModeAvailable;
        var subtitleOverlay = new subtitleoverlay_1.SubtitleOverlay();
        var mainSettingsPanelPage = new settingspanelpage_1.SettingsPanelPage({
            components: [
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.video.quality'), new videoqualityselectbox_1.VideoQualitySelectBox()),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('speed'), new playbackspeedselectbox_1.PlaybackSpeedSelectBox()),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.audio.track'), new audiotrackselectbox_1.AudioTrackSelectBox()),
                new settingspanelitem_1.SettingsPanelItem(i18n_1.i18n.getLocalizer('settings.audio.quality'), new audioqualityselectbox_1.AudioQualitySelectBox()),
            ],
        });
        var settingsPanel = new settingspanel_1.SettingsPanel({
            components: [mainSettingsPanelPage],
            hidden: true,
            pageTransitionAnimation: false,
            hideDelay: -1,
        });
        var subtitleSettingsPanelPage = new subtitlesettingspanelpage_1.SubtitleSettingsPanelPage({
            settingsPanel: settingsPanel,
            overlay: subtitleOverlay,
        });
        var subtitleSettingsOpenButton = new settingspanelpageopenbutton_1.SettingsPanelPageOpenButton({
            targetPage: subtitleSettingsPanelPage,
            container: settingsPanel,
            ariaLabel: i18n_1.i18n.getLocalizer('settings.subtitles'),
            text: i18n_1.i18n.getLocalizer('open'),
        });
        var subtitleSelectBox = new subtitleselectbox_1.SubtitleSelectBox();
        mainSettingsPanelPage.addComponent(new settingspanelitem_1.SettingsPanelItem(new subtitlesettingslabel_1.SubtitleSettingsLabel({
            text: i18n_1.i18n.getLocalizer('settings.subtitles'),
            opener: subtitleSettingsOpenButton,
        }), subtitleSelectBox, {
            role: 'menubar',
        }));
        settingsPanel.addComponent(subtitleSettingsPanelPage);
        settingsPanel.addComponent(new closebutton_1.CloseButton({ target: settingsPanel }));
        subtitleSettingsPanelPage.addComponent(new closebutton_1.CloseButton({ target: settingsPanel }));
        var controlBar = new controlbar_1.ControlBar({
            components: [
                new container_1.Container({
                    components: [
                        new playbacktimelabel_1.PlaybackTimeLabel({
                            timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.CurrentTime,
                            hideInLivePlayback: true,
                        }),
                        new seekbar_1.SeekBar({ label: new seekbarlabel_1.SeekBarLabel() }),
                        new playbacktimelabel_1.PlaybackTimeLabel({
                            timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.TotalTime,
                            cssClasses: ['text-right'],
                        }),
                        new fullscreentogglebutton_1.FullscreenToggleButton({
                            cssClasses: ['controlbar-fullscreen-toggle-button'],
                        }),
                    ],
                    cssClasses: ['controlbar-top'],
                }),
            ],
        });
        var titleBarComponents = [];
        var isBrowser = !window.bitmovin.customMessageHandler;
        if (!isBrowser) {
            titleBarComponents.push(new gobackbutton_1.GoBackButton());
        }
        else {
            titleBarComponents.push(new quanteecconsumptions_1.QuanteecConsumptions());
        }
        titleBarComponents = __spreadArray(__spreadArray([], titleBarComponents, true), [
            new metadatalabel_1.MetadataLabel({ content: metadatalabel_1.MetadataLabelContent.Title }),
            new casttogglebutton_1.CastToggleButton(),
            new vrtogglebutton_1.VRToggleButton(),
            new pictureinpicturetogglebutton_1.PictureInPictureToggleButton(),
            new airplaytogglebutton_1.AirPlayToggleButton(),
            new settingstogglebutton_1.SettingsToggleButton({ settingsPanel: settingsPanel }),
        ], false);
        if (radioModeAvailable) {
            titleBarComponents.splice(!isBrowser ? 5 : 4, 0, new radiomodetogglebutton_1.RadioModeToggleButton({ active: false }));
        }
        return new uicontainer_1.UIContainer({
            components: [
                subtitleOverlay,
                new bufferingoverlay_1.BufferingOverlay(),
                new caststatusoverlay_1.CastStatusOverlay(),
                new playbacktoggleoverlay_1.PlaybackToggleOverlay(),
                new playbackjumpoverlay_1.PlaybackJumpControlsOverlay(),
                new recommendationoverlay_1.RecommendationOverlay(),
                controlBar,
                new titlebar_1.TitleBar({
                    components: titleBarComponents,
                }),
                settingsPanel,
                new errormessageoverlay_1.ErrorMessageOverlay(),
            ],
            cssClasses: ['ui-skin-smallscreen'],
            hideDelay: 2000,
            hidePlayerStateExceptions: [
                playerutils_1.PlayerUtils.PlayerState.Prepared,
                playerutils_1.PlayerUtils.PlayerState.Paused,
                playerutils_1.PlayerUtils.PlayerState.Finished,
            ],
        });
    }
    UIFactory.modernSmallScreenUI = modernSmallScreenUI;
    function modernSmallScreenAdsUI() {
        return new uicontainer_1.UIContainer({
            components: [
                new bufferingoverlay_1.BufferingOverlay(),
                new adclickoverlay_1.AdClickOverlay(),
                new playbacktoggleoverlay_1.PlaybackToggleOverlay(),
                new titlebar_1.TitleBar({
                    components: [
                        // dummy label with no content to move buttons to the right
                        new label_1.Label({ cssClass: 'label-metadata-title' }),
                        new fullscreentogglebutton_1.FullscreenToggleButton(),
                    ],
                }),
                new container_1.Container({
                    components: [new admessagelabel_1.AdMessageLabel({ text: 'Ad: {remainingTime} secs' }), new adskipbutton_1.AdSkipButton()],
                    cssClass: 'ui-ads-status',
                }),
            ],
            cssClasses: ['ui-skin-ads', 'ui-skin-smallscreen'],
            hideDelay: 2000,
            hidePlayerStateExceptions: [
                playerutils_1.PlayerUtils.PlayerState.Prepared,
                playerutils_1.PlayerUtils.PlayerState.Paused,
                playerutils_1.PlayerUtils.PlayerState.Finished,
            ],
        });
    }
    UIFactory.modernSmallScreenAdsUI = modernSmallScreenAdsUI;
    function modernCastReceiverUI() {
        var controlBar = new controlbar_1.ControlBar({
            components: [
                new container_1.Container({
                    components: [
                        new playbacktimelabel_1.PlaybackTimeLabel({
                            timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.CurrentTime,
                            hideInLivePlayback: true,
                        }),
                        new seekbar_1.SeekBar({ smoothPlaybackPositionUpdateIntervalMs: -1 }),
                        new playbacktimelabel_1.PlaybackTimeLabel({
                            timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.TotalTime,
                            cssClasses: ['text-right'],
                        }),
                    ],
                    cssClasses: ['controlbar-top'],
                }),
            ],
        });
        return new castuicontainer_1.CastUIContainer({
            components: [
                new subtitleoverlay_1.SubtitleOverlay(),
                new bufferingoverlay_1.BufferingOverlay(),
                new playbacktoggleoverlay_1.PlaybackToggleOverlay(),
                controlBar,
                new titlebar_1.TitleBar({ keepHiddenWithoutMetadata: true }),
                new errormessageoverlay_1.ErrorMessageOverlay(),
            ],
            cssClasses: ['ui-skin-cast-receiver'],
            hideDelay: 2000,
            hidePlayerStateExceptions: [
                playerutils_1.PlayerUtils.PlayerState.Prepared,
                playerutils_1.PlayerUtils.PlayerState.Paused,
                playerutils_1.PlayerUtils.PlayerState.Finished,
            ],
        });
    }
    UIFactory.modernCastReceiverUI = modernCastReceiverUI;
    function buildModernUI(player, config) {
        if (config === void 0) { config = {}; }
        // show smallScreen UI only on mobile/handheld devices
        var smallScreenSwitchWidth = 600;
        return new uimanager_1.UIManager(player, [
            {
                ui: modernRadioModeUI(),
                condition: function (context) {
                    return !context.isAd && !context.adRequiresUi && context.isRadioModeActive;
                },
            },
            {
                ui: modernSmallScreenAdsUI(),
                condition: function (context) {
                    return (context.isMobile && context.documentWidth < smallScreenSwitchWidth && context.isAd && context.adRequiresUi);
                },
            },
            {
                ui: modernAdsUI(),
                condition: function (context) {
                    return context.isAd && context.adRequiresUi;
                },
            },
            {
                ui: modernSmallScreenUI({ radioModeAvailable: true }),
                condition: function (context) {
                    return (!context.isAd &&
                        !context.adRequiresUi &&
                        context.isMobile &&
                        context.documentWidth < smallScreenSwitchWidth &&
                        !context.isRadioModeActive &&
                        context.isRadioModeAvailable);
                },
            },
            {
                ui: modernSmallScreenUI({ radioModeAvailable: false }),
                condition: function (context) {
                    return (!context.isAd &&
                        !context.adRequiresUi &&
                        context.isMobile &&
                        context.documentWidth < smallScreenSwitchWidth &&
                        !context.isRadioModeActive &&
                        !context.isRadioModeAvailable);
                },
            },
            {
                ui: modernUI(__assign(__assign({}, config), { radioModeAvailable: true })),
                condition: function (context) {
                    return !context.isAd && !context.adRequiresUi && !context.isRadioModeActive && context.isRadioModeAvailable;
                },
            },
            {
                ui: modernUI(__assign(__assign({}, config), { radioModeAvailable: false })),
                condition: function (context) {
                    return !context.isAd && !context.adRequiresUi && !context.isRadioModeActive && !context.isRadioModeAvailable;
                },
            },
        ], config);
    }
    UIFactory.buildModernUI = buildModernUI;
    function buildModernSmallScreenUI(player, config) {
        if (config === void 0) { config = {}; }
        return new uimanager_1.UIManager(player, [
            {
                ui: modernRadioModeUI(),
                condition: function (context) {
                    return !context.isAd && !context.adRequiresUi && context.isRadioModeActive;
                },
            },
            {
                ui: modernSmallScreenAdsUI(),
                condition: function (context) {
                    return context.isAd && context.adRequiresUi;
                },
            },
            {
                ui: modernSmallScreenUI({ radioModeAvailable: true }),
                condition: function (context) {
                    return !context.isAd && !context.adRequiresUi && !context.isRadioModeActive && context.isRadioModeAvailable;
                },
            },
            {
                ui: modernSmallScreenUI({ radioModeAvailable: false }),
                condition: function (context) {
                    return !context.isAd && !context.adRequiresUi && !context.isRadioModeActive && !context.isRadioModeAvailable;
                },
            },
        ], config);
    }
    UIFactory.buildModernSmallScreenUI = buildModernSmallScreenUI;
    function buildModernCastReceiverUI(player, config) {
        if (config === void 0) { config = {}; }
        return new uimanager_1.UIManager(player, modernCastReceiverUI(), config);
    }
    UIFactory.buildModernCastReceiverUI = buildModernCastReceiverUI;
    function buildModernTvUI(player, config) {
        if (config === void 0) { config = {}; }
        return new uimanager_1.UIManager(player, [
            __assign({}, modernTvUI()),
        ], config);
    }
    UIFactory.buildModernTvUI = buildModernTvUI;
    function modernTvUI() {
        var subtitleListBox = new subtitlelistbox_1.SubtitleListBox();
        var subtitleListPanel = new settingspanel_1.SettingsPanel({
            components: [
                new settingspanelpage_1.SettingsPanelPage({
                    components: [new settingspanelitem_1.SettingsPanelItem(null, subtitleListBox)],
                }),
            ],
            hidden: true,
        });
        var audioTrackListBox = new audiotracklistbox_1.AudioTrackListBox();
        var audioTrackListPanel = new settingspanel_1.SettingsPanel({
            components: [
                new settingspanelpage_1.SettingsPanelPage({
                    components: [new settingspanelitem_1.SettingsPanelItem(null, audioTrackListBox)],
                }),
            ],
            hidden: true,
        });
        var seekBar = new seekbar_1.SeekBar({ label: new seekbarlabel_1.SeekBarLabel() });
        var playbackToggleOverlay = new playbacktoggleoverlay_1.PlaybackToggleOverlay();
        var subtitleToggleButton = new settingstogglebutton_1.SettingsToggleButton({
            settingsPanel: subtitleListPanel,
            autoHideWhenNoActiveSettings: true,
            cssClass: 'ui-subtitlesettingstogglebutton',
            text: i18n_1.i18n.getLocalizer('settings.subtitles'),
        });
        var audioToggleButton = new settingstogglebutton_1.SettingsToggleButton({
            settingsPanel: audioTrackListPanel,
            autoHideWhenNoActiveSettings: true,
            cssClass: 'ui-audiotracksettingstogglebutton',
            ariaLabel: i18n_1.i18n.getLocalizer('settings.audio.track'),
            text: i18n_1.i18n.getLocalizer('settings.audio.track'),
        });
        var uiContainer = new uicontainer_1.UIContainer({
            components: [
                new subtitleoverlay_1.SubtitleOverlay(),
                new bufferingoverlay_1.BufferingOverlay(),
                playbackToggleOverlay,
                new controlbar_1.ControlBar({
                    components: [
                        new container_1.Container({
                            components: [
                                new playbacktimelabel_1.PlaybackTimeLabel({
                                    timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.CurrentTime,
                                    hideInLivePlayback: true,
                                }),
                                seekBar,
                                new playbacktimelabel_1.PlaybackTimeLabel({
                                    timeLabelMode: playbacktimelabel_1.PlaybackTimeLabelMode.RemainingTime,
                                    cssClasses: ['text-right'],
                                }),
                            ],
                            cssClasses: ['controlbar-top'],
                        }),
                    ],
                }),
                new titlebar_1.TitleBar({
                    components: [
                        new container_1.Container({
                            components: [
                                new metadatalabel_1.MetadataLabel({ content: metadatalabel_1.MetadataLabelContent.Title }),
                                subtitleToggleButton,
                                audioToggleButton,
                            ],
                            cssClasses: ['ui-titlebar-top'],
                        }),
                        new container_1.Container({
                            components: [
                                new metadatalabel_1.MetadataLabel({
                                    content: metadatalabel_1.MetadataLabelContent.Description,
                                }),
                                subtitleListPanel,
                                audioTrackListPanel,
                            ],
                            cssClasses: ['ui-titlebar-bottom'],
                        }),
                    ],
                }),
                new recommendationoverlay_1.RecommendationOverlay(),
                new errormessageoverlay_1.ErrorMessageOverlay(),
            ],
            cssClasses: ['ui-skin-tv'],
            hideDelay: 2000,
            hidePlayerStateExceptions: [
                playerutils_1.PlayerUtils.PlayerState.Prepared,
                playerutils_1.PlayerUtils.PlayerState.Paused,
                playerutils_1.PlayerUtils.PlayerState.Finished,
            ],
        });
        var spatialNavigation = new spatialnavigation_1.SpatialNavigation(new rootnavigationgroup_1.RootNavigationGroup(uiContainer, playbackToggleOverlay, seekBar, audioToggleButton, subtitleToggleButton), new ListNavigationGroup_1.ListNavigationGroup(ListNavigationGroup_1.ListOrientation.Vertical, subtitleListPanel, subtitleListBox), new ListNavigationGroup_1.ListNavigationGroup(ListNavigationGroup_1.ListOrientation.Vertical, audioTrackListPanel, audioTrackListBox));
        return {
            ui: uiContainer,
            spatialNavigation: spatialNavigation,
        };
    }
    UIFactory.modernTvUI = modernTvUI;
    function modernRadioModeUI() {
        return new uicontainer_1.UIContainer({
            components: [
                new controlbar_1.ControlBar({
                    components: [
                        new container_1.Container({
                            components: [
                                new playbacktogglebutton_1.PlaybackToggleButton(),
                                new seekbar_1.SeekBar({ label: new seekbarlabel_1.SeekBarLabel() }),
                                new radiomodetogglebutton_1.RadioModeToggleButton({ active: true }),
                            ],
                            cssClasses: ['controlbar-top'],
                        }),
                    ],
                }),
            ],
            cssClasses: ['ui-skin-radio'],
            hideDelay: -1,
        });
    }
    UIFactory.modernRadioModeUI = modernRadioModeUI;
    function buildModernRadioModeUI(player, config) {
        if (config === void 0) { config = {}; }
        return new uimanager_1.UIManager(player, [
            {
                ui: modernRadioModeUI(),
            },
        ], config);
    }
    UIFactory.buildModernRadioModeUI = buildModernRadioModeUI;
})(UIFactory = exports.UIFactory || (exports.UIFactory = {}));

},{"../custom/ts/components/playbackjumpoverlay":3,"./../custom/ts/components/gobackbutton":1,"./../custom/ts/components/quanteecconsumptions":4,"./../custom/ts/components/radiomode/radiomodetogglebutton":5,"./components/adclickoverlay":9,"./components/admessagelabel":10,"./components/adskipbutton":11,"./components/airplaytogglebutton":12,"./components/audioqualityselectbox":13,"./components/audiotracklistbox":14,"./components/audiotrackselectbox":15,"./components/bufferingoverlay":16,"./components/caststatusoverlay":18,"./components/casttogglebutton":19,"./components/castuicontainer":20,"./components/closebutton":22,"./components/container":24,"./components/controlbar":25,"./components/ecomodecontainer":26,"./components/errormessageoverlay":28,"./components/fullscreentogglebutton":29,"./components/label":33,"./components/metadatalabel":36,"./components/pictureinpicturetogglebutton":37,"./components/playbackspeedselectbox":38,"./components/playbacktimelabel":39,"./components/playbacktogglebutton":40,"./components/playbacktoggleoverlay":41,"./components/recommendationoverlay":43,"./components/seekbar":45,"./components/seekbarlabel":48,"./components/settingspanel":50,"./components/settingspanelitem":51,"./components/settingspanelpage":52,"./components/settingspanelpageopenbutton":55,"./components/settingstogglebutton":56,"./components/spacer":57,"./components/subtitlelistbox":58,"./components/subtitleoverlay":59,"./components/subtitleselectbox":60,"./components/subtitlesettings/subtitlesettingslabel":69,"./components/subtitlesettings/subtitlesettingspanelpage":71,"./components/titlebar":76,"./components/uicontainer":79,"./components/videoqualityselectbox":80,"./components/volumeslider":82,"./components/volumetogglebutton":83,"./components/vrtogglebutton":84,"./localization/i18n":94,"./playerutils":101,"./spatialnavigation/ListNavigationGroup":102,"./spatialnavigation/rootnavigationgroup":108,"./spatialnavigation/spatialnavigation":110,"./uimanager":119}],119:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerWrapper = exports.UIInstanceManager = exports.UIManager = void 0;
var uicontainer_1 = require("./components/uicontainer");
var dom_1 = require("./dom");
var container_1 = require("./components/container");
var eventdispatcher_1 = require("./eventdispatcher");
var uiutils_1 = require("./uiutils");
var arrayutils_1 = require("./arrayutils");
var browserutils_1 = require("./browserutils");
var volumecontroller_1 = require("./volumecontroller");
var i18n_1 = require("./localization/i18n");
var focusvisibilitytracker_1 = require("./focusvisibilitytracker");
var mobilev3playerapi_1 = require("./mobilev3playerapi");
var subtitlesettingsmanager_1 = require("./components/subtitlesettings/subtitlesettingsmanager");
var storageutils_1 = require("./storageutils");
var UIManager = /** @class */ (function () {
    function UIManager(player, playerUiOrUiVariants, uiconfig) {
        if (uiconfig === void 0) { uiconfig = {}; }
        var _this = this;
        this.events = {
            onUiVariantResolve: new eventdispatcher_1.EventDispatcher(),
            onActiveUiChanged: new eventdispatcher_1.EventDispatcher(),
        };
        this.handleIsRadioModeActiveChange = function (event) {
            _this.isRadioModeActive = event.detail;
        };
        this.handleIsRadioModeAvailableChange = function (event) {
            _this.isRadioModeAvailable = event.detail;
        };
        this.isRadioModeActive = window.isRadioModeActive;
        this.isRadioModeAvailable = window.isRadioModeAvailable;
        if (playerUiOrUiVariants instanceof uicontainer_1.UIContainer) {
            // Single-UI constructor has been called, transform arguments to UIVariant[] signature
            var playerUi = playerUiOrUiVariants;
            var uiVariants = [];
            // Add the default player UI
            uiVariants.push({ ui: playerUi });
            this.uiVariants = uiVariants;
        }
        else {
            // Default constructor (UIVariant[]) has been called
            this.uiVariants = playerUiOrUiVariants;
        }
        this.subtitleSettingsManager = new subtitlesettingsmanager_1.SubtitleSettingsManager();
        this.player = player;
        this.managerPlayerWrapper = new PlayerWrapper(player);
        // ensure that at least the metadata object does exist in the uiconfig
        uiconfig.metadata = uiconfig.metadata ? uiconfig.metadata : {};
        this.config = __assign(__assign({ playbackSpeedSelectionEnabled: true, autoUiVariantResolve: true, disableAutoHideWhenHovered: false, enableSeekPreview: true }, uiconfig), { events: {
                onUpdated: new eventdispatcher_1.EventDispatcher(),
            }, volumeController: new volumecontroller_1.VolumeController(this.managerPlayerWrapper.getPlayer()) });
        try {
            // Mobile
            if (window.bitmovin.customMessageHandler) {
                window.bitmovin.customMessageHandler.on('globalRadioModeChanged', function (data) {
                    var _a = JSON.parse(data), activated = _a.activated, available = _a.available;
                    _this.isRadioModeActive = activated;
                    _this.isRadioModeAvailable = available;
                    _this.resolveUiVariant({
                        isRadioModeActive: activated,
                        isRadioModeAvailable: available,
                    });
                });
            }
            // Web
            window.addEventListener('isRadioModeActiveChange', this.handleIsRadioModeActiveChange);
            window.addEventListener('isRadioModeAvailableChange', this.handleIsRadioModeAvailableChange);
        }
        catch (error) { }
        /**
         * Gathers configuration data from the UI config and player source config and creates a merged UI config
         * that is used throughout the UI instance.
         */
        var updateConfig = function () {
            var playerSourceConfig = player.getSource() || {};
            _this.config.metadata = JSON.parse(JSON.stringify(uiconfig.metadata || {}));
            // Extract the UI-related config properties from the source config
            var playerSourceUiConfig = {
                metadata: {
                    // TODO move metadata into source.metadata namespace in player v8
                    title: playerSourceConfig.title,
                    description: playerSourceConfig.description,
                    markers: playerSourceConfig.markers,
                },
                recommendations: playerSourceConfig.recommendations,
            };
            // Player source config takes precedence over the UI config, because the config in the source is attached
            // to a source which changes with every player.load, whereas the UI config stays the same for the whole
            // lifetime of the player instance.
            _this.config.metadata.title =
                playerSourceUiConfig.metadata.title || uiconfig.metadata.title;
            _this.config.metadata.description =
                playerSourceUiConfig.metadata.description ||
                    uiconfig.metadata.description;
            _this.config.metadata.markers =
                playerSourceUiConfig.metadata.markers ||
                    uiconfig.metadata.markers ||
                    [];
            _this.config.recommendations =
                playerSourceUiConfig.recommendations || uiconfig.recommendations || [];
            _this.config.metadata.title = playerSourceUiConfig.metadata.title || uiconfig.metadata.title;
            _this.config.metadata.description = playerSourceUiConfig.metadata.description || uiconfig.metadata.description;
            _this.config.metadata.markers = playerSourceUiConfig.metadata.markers || uiconfig.metadata.markers || [];
            _this.config.recommendations = playerSourceUiConfig.recommendations || uiconfig.recommendations || [];
            storageutils_1.StorageUtils.setStorageApiDisabled(uiconfig);
        };
        updateConfig();
        this.subtitleSettingsManager.initialize();
        // Update the source configuration when a new source is loaded and dispatch onUpdated
        var updateSource = function () {
            updateConfig();
            _this.config.events.onUpdated.dispatch(_this);
        };
        var wrappedPlayer = this.managerPlayerWrapper.getPlayer();
        wrappedPlayer.on(this.player.exports.PlayerEvent.SourceLoaded, updateSource);
        // The PlaylistTransition event is only available on Mobile v3 for now.
        // This event is fired when a new source becomes active in the player.
        if ((0, mobilev3playerapi_1.isMobileV3PlayerAPI)(wrappedPlayer)) {
            wrappedPlayer.on(mobilev3playerapi_1.MobileV3PlayerEvent.PlaylistTransition, updateSource);
        }
        if (uiconfig.container) {
            // Unfortunately "uiContainerElement = new DOM(config.container)" will not accept the container with
            // string|HTMLElement type directly, although it accepts both types, so we need to spit these two cases up here.
            // TODO check in upcoming TS versions if the container can be passed in directly, or fix the constructor
            this.uiContainerElement =
                uiconfig.container instanceof HTMLElement
                    ? new dom_1.DOM(uiconfig.container)
                    : new dom_1.DOM(uiconfig.container);
        }
        else {
            this.uiContainerElement = new dom_1.DOM(player.getContainer());
        }
        // Create UI instance managers for the UI variants
        // The instance managers map to the corresponding UI variants by their array index
        this.uiInstanceManagers = [];
        var uiVariantsWithoutCondition = [];
        for (var _i = 0, _a = this.uiVariants; _i < _a.length; _i++) {
            var uiVariant = _a[_i];
            if (uiVariant.condition == null) {
                // Collect variants without conditions for error checking
                uiVariantsWithoutCondition.push(uiVariant);
            }
            // Create the instance manager for a UI variant
            this.uiInstanceManagers.push(new InternalUIInstanceManager(player, uiVariant.ui, this.config, this.subtitleSettingsManager, uiVariant.spatialNavigation));
        }
        // Make sure that there is only one UI variant without a condition
        // It does not make sense to have multiple variants without condition, because only the first one in the list
        // (the one with the lowest index) will ever be selected.
        if (uiVariantsWithoutCondition.length > 1) {
            throw Error('Too many UIs without a condition: You cannot have more than one default UI');
        }
        // Make sure that the default UI variant, if defined, is at the end of the list (last index)
        // If it comes earlier, the variants with conditions that come afterwards will never be selected because the
        // default variant without a condition always evaluates to 'true'
        if (uiVariantsWithoutCondition.length > 0 &&
            uiVariantsWithoutCondition[0] !==
                this.uiVariants[this.uiVariants.length - 1]) {
            throw Error('Invalid UI variant order: the default UI (without condition) must be at the end of the list');
        }
        var adStartedEvent = null; // keep the event stored here during ad playback
        // Dynamically select a UI variant that matches the current UI condition.
        var resolveUiVariant = function (event) {
            // Make sure that the AdStarted event data is persisted through ad playback in case other events happen
            // in the meantime, e.g. player resize. We need to store this data because there is no other way to find out
            // ad details while an ad is playing (in v8.0 at least; from v8.1 there will be ads.getActiveAd()).
            // Existing event data signals that an ad is currently active (instead of ads.isLinearAdActive()).
            if (event != null) {
                switch (event.type) {
                    // The ads UI is shown upon the first AdStarted event. Subsequent AdStarted events within an ad break
                    // will not change the condition context and thus not lead to undesired UI variant resolving.
                    // The ads UI is shown upon AdStarted instead of AdBreakStarted because there can be a loading delay
                    // between these two events in the player, and the AdBreakStarted event does not carry any metadata to
                    // initialize the ads UI, so it would be rendered in an uninitialized state for a certain amount of time.
                    // TODO show ads UI upon AdBreakStarted and display loading overlay between AdBreakStarted and first AdStarted
                    // TODO display loading overlay between AdFinished and next AdStarted
                    case player.exports.PlayerEvent.AdStarted:
                        adStartedEvent = event;
                        break;
                    // The ads UI is hidden only when the ad break is finished, i.e. not on AdFinished events. This way we keep
                    // the ads UI variant active throughout an ad break, as reacting to AdFinished would lead to undesired UI
                    // variant switching between two ads in an ad break, e.g. ads UI -> AdFinished -> content UI ->
                    // AdStarted -> ads UI.
                    case player.exports.PlayerEvent.AdBreakFinished:
                        adStartedEvent = null;
                        // When switching to a variant for the first time, a config.events.onUpdated event is fired to trigger a UI
                        // update of the new variant, because most components subscribe to this event to update themselves. When
                        // switching to the ads UI on the first AdStarted, all UI variants update themselves with the ad data, so
                        // when switching back to the "normal" UI it will carry properties of the ad instead of the main content.
                        // We thus fire this event here to force an UI update with the properties of the main content. This is
                        // basically a hack because the config.events.onUpdated event is abused in many places and not just used
                        // for config updates (e.g. adding a marker to the seekbar).
                        // TODO introduce an event that is fired when the playback content is updated, a switch to/from ads
                        _this.config.events.onUpdated.dispatch(_this);
                        break;
                    // When a new source is loaded during ad playback, there will be no Ad(Break)Finished event
                    case player.exports.PlayerEvent.SourceLoaded:
                    case player.exports.PlayerEvent.SourceUnloaded:
                        adStartedEvent = null;
                        break;
                }
            }
            // Detect if an ad has started
            var isAd = adStartedEvent != null;
            var adRequiresUi = false;
            if (isAd) {
                var ad = adStartedEvent.ad;
                // for now only linear ads can request a UI
                if (ad.isLinear) {
                    var linearAd = ad;
                    adRequiresUi =
                        (linearAd.uiConfig && linearAd.uiConfig.requestsUi) || false;
                }
            }
            if (adRequiresUi) {
                // we dispatch onUpdated event because if there are multiple adBreaks for same position
                // `Play` and `Playing` events will not be dispatched which will cause `PlaybackButton` state
                // to be out of sync
                _this.config.events.onUpdated.dispatch(_this);
            }
            _this.resolveUiVariant({
                isAd: isAd,
                adRequiresUi: adRequiresUi,
                isRadioModeActive: _this.isRadioModeActive,
                isRadioModeAvailable: _this.isRadioModeAvailable,
            }, function (context) {
                // If this is an ad UI, we need to relay the saved ON_AD_STARTED event data so ad components can configure
                // themselves for the current ad.
                if (context.isAd) {
                    /* Relay the ON_AD_STARTED event to the ads UI
                     *
                     * Because the ads UI is initialized in the ON_AD_STARTED handler, i.e. when the ON_AD_STARTED event has
                     * already been fired, components in the ads UI that listen for the ON_AD_STARTED event never receive it.
                     * Since this can break functionality of components that rely on this event, we relay the event to the
                     * ads UI components with the following call.
                     */
                    _this.currentUi
                        .getWrappedPlayer()
                        .fireEventInUI(_this.player.exports.PlayerEvent.AdStarted, adStartedEvent);
                }
            });
        };
        // Listen to the following events to trigger UI variant resolution
        if (this.config.autoUiVariantResolve) {
            this.managerPlayerWrapper
                .getPlayer()
                .on(this.player.exports.PlayerEvent.SourceLoaded, resolveUiVariant);
            this.managerPlayerWrapper
                .getPlayer()
                .on(this.player.exports.PlayerEvent.SourceUnloaded, resolveUiVariant);
            this.managerPlayerWrapper
                .getPlayer()
                .on(this.player.exports.PlayerEvent.Play, resolveUiVariant);
            this.managerPlayerWrapper
                .getPlayer()
                .on(this.player.exports.PlayerEvent.Paused, resolveUiVariant);
            this.managerPlayerWrapper
                .getPlayer()
                .on(this.player.exports.PlayerEvent.AdStarted, resolveUiVariant);
            this.managerPlayerWrapper
                .getPlayer()
                .on(this.player.exports.PlayerEvent.AdBreakFinished, resolveUiVariant);
            this.managerPlayerWrapper
                .getPlayer()
                .on(this.player.exports.PlayerEvent.PlayerResized, resolveUiVariant);
            this.managerPlayerWrapper
                .getPlayer()
                .on(this.player.exports.PlayerEvent.ViewModeChanged, resolveUiVariant);
        }
        this.focusVisibilityTracker = new focusvisibilitytracker_1.FocusVisibilityTracker('bmpui');
        // Initialize the UI
        resolveUiVariant(null);
    }
    /**
     * Exposes i18n.getLocalizer() function
     * @returns {I18nApi.getLocalizer()}
     */
    UIManager.localize = function (key) {
        return i18n_1.i18n.getLocalizer(key);
    };
    /**
     * Provide configuration to support Custom UI languages
     * default language: 'en'
     */
    UIManager.setLocalizationConfig = function (localizationConfig) {
        i18n_1.i18n.setConfig(localizationConfig);
    };
    UIManager.prototype.getSubtitleSettingsManager = function () {
        return this.subtitleSettingsManager;
    };
    UIManager.prototype.getConfig = function () {
        return this.config;
    };
    /**
     * Returns the list of UI variants as passed into the constructor of {@link UIManager}.
     * @returns {UIVariant[]} the list of available UI variants
     */
    UIManager.prototype.getUiVariants = function () {
        return this.uiVariants;
    };
    /**
     * Switches to a UI variant from the list returned by {@link getUiVariants}.
     * @param {UIVariant} uiVariant the UI variant to switch to
     * @param {() => void} onShow a callback that is executed just before the new UI variant is shown
     */
    UIManager.prototype.switchToUiVariant = function (uiVariant, onShow) {
        var uiVariantIndex = this.uiVariants.indexOf(uiVariant);
        var previousUi = this.currentUi;
        var nextUi = this.uiInstanceManagers[uiVariantIndex];
        // Determine if the UI variant is changing
        // Only if the UI variant is changing, we need to do some stuff. Else we just leave everything as-is.
        if (nextUi === this.currentUi) {
            return;
            // console.log('switched from ', this.currentUi ? this.currentUi.getUI() : 'none',
            //   ' to ', nextUi ? nextUi.getUI() : 'none');
        }
        // Hide the currently active UI variant
        if (this.currentUi) {
            this.currentUi.getUI().hide();
        }
        // Assign the new UI variant as current UI
        this.currentUi = nextUi;
        // When we switch to a different UI instance, there's some additional stuff to manage. If we do not switch
        // to an instance, we're done here.
        if (this.currentUi == null) {
            return;
        }
        // Add the UI to the DOM (and configure it) the first time it is selected
        if (!this.currentUi.isConfigured()) {
            this.addUi(this.currentUi);
            // ensure that the internal state is ready for the upcoming show call
            if (!this.currentUi.getUI().isHidden()) {
                this.currentUi.getUI().hide();
            }
        }
        if (onShow) {
            onShow();
        }
        this.currentUi.getUI().show();
        this.events.onActiveUiChanged.dispatch(this, { previousUi: previousUi, currentUi: nextUi });
    };
    /**
     * Triggers a UI variant switch as triggered by events when automatic switching is enabled. It allows to overwrite
     * properties of the {@link UIConditionContext}.
     * @param {Partial<UIConditionContext>} context an optional set of properties that overwrite properties of the
     *   automatically determined context
     * @param {(context: UIConditionContext) => void} onShow a callback that is executed just before the new UI variant
     *   is shown (if a switch is happening)
     */
    UIManager.prototype.resolveUiVariant = function (context, onShow) {
        if (context === void 0) { context = {}; }
        // Determine the current context for which the UI variant will be resolved
        var defaultContext = {
            isAd: false,
            adRequiresUi: false,
            isFullscreen: this.player.getViewMode() === this.player.exports.ViewMode.Fullscreen,
            isMobile: browserutils_1.BrowserUtils.isMobile,
            isPlaying: this.player.isPlaying(),
            width: this.uiContainerElement.width(),
            documentWidth: document.body.clientWidth,
            isRadioModeActive: false,
            isRadioModeAvailable: false,
        };
        // Overwrite properties of the default context with passed in context properties
        var switchingContext = __assign(__assign({}, defaultContext), context);
        // Fire the event and allow modification of the context before it is used to resolve the UI variant
        this.events.onUiVariantResolve.dispatch(this, switchingContext);
        var nextUiVariant = null;
        // Select new UI variant
        // If no variant condition is fulfilled, we switch to *no* UI
        for (var _i = 0, _a = this.uiVariants; _i < _a.length; _i++) {
            var uiVariant = _a[_i];
            var matchesCondition = uiVariant.condition == null || uiVariant.condition(switchingContext) === true;
            if (nextUiVariant == null && matchesCondition) {
                nextUiVariant = uiVariant;
            }
            else {
                // hide all UIs besides the one which should be active
                uiVariant.ui.hide();
            }
        }
        this.switchToUiVariant(nextUiVariant, function () {
            if (onShow) {
                onShow(switchingContext);
            }
        });
    };
    UIManager.prototype.addUi = function (ui) {
        var dom = ui.getUI().getDomElement();
        var player = ui.getWrappedPlayer();
        ui.configureControls();
        /* Append the UI DOM after configuration to avoid CSS transitions at initialization
         * Example: Components are hidden during configuration and these hides may trigger CSS transitions that are
         * undesirable at this time. */
        this.uiContainerElement.append(dom);
        // When the UI is loaded after a source was loaded, we need to tell the components to initialize themselves
        if (player.getSource()) {
            this.config.events.onUpdated.dispatch(this);
        }
        // Fire onConfigured after UI DOM elements are successfully added. When fired immediately, the DOM elements
        // might not be fully configured and e.g. do not have a size.
        // https://swizec.com/blog/how-to-properly-wait-for-dom-elements-to-show-up-in-modern-browsers/swizec/6663
        if (window.requestAnimationFrame) {
            requestAnimationFrame(function () { ui.onConfigured.dispatch(ui.getUI()); });
        }
        else {
            // IE9 fallback
            setTimeout(function () { ui.onConfigured.dispatch(ui.getUI()); }, 0);
        }
    };
    UIManager.prototype.releaseUi = function (ui) {
        ui.releaseControls();
        var uiContainer = ui.getUI();
        if (uiContainer.hasDomElement()) {
            uiContainer.getDomElement().remove();
        }
        ui.clearEventHandlers();
    };
    UIManager.prototype.release = function () {
        for (var _i = 0, _a = this.uiInstanceManagers; _i < _a.length; _i++) {
            var uiInstanceManager = _a[_i];
            this.releaseUi(uiInstanceManager);
        }
        this.managerPlayerWrapper.clearEventHandlers();
        this.focusVisibilityTracker.release();
    };
    Object.defineProperty(UIManager.prototype, "onUiVariantResolve", {
        /**
         * Fires just before UI variants are about to be resolved and the UI variant is possibly switched. It is fired when
         * the switch is triggered from an automatic switch and when calling {@link resolveUiVariant}.
         * Can be used to modify the {@link UIConditionContext} before resolving is done.
         * @returns {EventDispatcher<UIManager, UIConditionContext>}
         */
        get: function () {
            return this.events.onUiVariantResolve;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIManager.prototype, "onActiveUiChanged", {
        /**
         * Fires after the UIManager has switched to a different UI variant.
         * @returns {EventDispatcher<UIManager, ActiveUiChangedArgs>}
         */
        get: function () {
            return this.events.onActiveUiChanged;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIManager.prototype, "activeUi", {
        /**
         * The current active {@link UIInstanceManager}.
         */
        get: function () {
            return this.currentUi;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns the list of all added markers in undefined order.
     */
    UIManager.prototype.getTimelineMarkers = function () {
        return this.config.metadata.markers;
    };
    /**
     * Adds a marker to the timeline. Does not check for duplicates/overlaps at the `time`.
     */
    UIManager.prototype.addTimelineMarker = function (timelineMarker) {
        this.config.metadata.markers.push(timelineMarker);
        this.config.events.onUpdated.dispatch(this);
    };
    /**
     * Removes a marker from the timeline (by reference) and returns `true` if the marker has
     * been part of the timeline and successfully removed, or `false` if the marker could not
     * be found and thus not removed.
     */
    UIManager.prototype.removeTimelineMarker = function (timelineMarker) {
        if (arrayutils_1.ArrayUtils.remove(this.config.metadata.markers, timelineMarker) === timelineMarker) {
            this.config.events.onUpdated.dispatch(this);
            return true;
        }
        return false;
    };
    UIManager.prototype.destroy = function () {
        window.removeEventListener('isRadioModeActiveChange', this.handleIsRadioModeActiveChange);
        window.removeEventListener('isRadioModeAvailableChange', this.handleIsRadioModeAvailableChange);
    };
    return UIManager;
}());
exports.UIManager = UIManager;
/**
 * Encapsulates functionality to manage a UI instance. Used by the {@link UIManager} to manage multiple UI instances.
 */
var UIInstanceManager = /** @class */ (function () {
    function UIInstanceManager(player, ui, config, subtitleSettingsManager, spatialNavigation) {
        this.events = {
            onConfigured: new eventdispatcher_1.EventDispatcher(),
            onSeek: new eventdispatcher_1.EventDispatcher(),
            onSeekPreview: new eventdispatcher_1.EventDispatcher(),
            onSeeked: new eventdispatcher_1.EventDispatcher(),
            onComponentShow: new eventdispatcher_1.EventDispatcher(),
            onComponentHide: new eventdispatcher_1.EventDispatcher(),
            onComponentViewModeChanged: new eventdispatcher_1.EventDispatcher(),
            onControlsShow: new eventdispatcher_1.EventDispatcher(),
            onPreviewControlsHide: new eventdispatcher_1.EventDispatcher(),
            onControlsHide: new eventdispatcher_1.EventDispatcher(),
            onRelease: new eventdispatcher_1.EventDispatcher(),
        };
        this.playerWrapper = new PlayerWrapper(player);
        this.ui = ui;
        this.config = config;
        this.subtitleSettingsManager = subtitleSettingsManager;
        this.spatialNavigation = spatialNavigation;
    }
    UIInstanceManager.prototype.getSubtitleSettingsManager = function () {
        return this.subtitleSettingsManager;
    };
    UIInstanceManager.prototype.getConfig = function () {
        return this.config;
    };
    UIInstanceManager.prototype.getUI = function () {
        return this.ui;
    };
    UIInstanceManager.prototype.getPlayer = function () {
        return this.playerWrapper.getPlayer();
    };
    Object.defineProperty(UIInstanceManager.prototype, "onConfigured", {
        /**
         * Fires when the UI is fully configured and added to the DOM.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onConfigured;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onSeek", {
        /**
         * Fires when a seek starts.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onSeek;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onSeekPreview", {
        /**
         * Fires when the seek timeline is scrubbed.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onSeekPreview;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onSeeked", {
        /**
         * Fires when a seek is finished.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onSeeked;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onComponentShow", {
        /**
         * Fires when a component is showing.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onComponentShow;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onComponentHide", {
        /**
         * Fires when a component is hiding.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onComponentHide;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onControlsShow", {
        /**
         * Fires when the UI controls are showing.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onControlsShow;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onPreviewControlsHide", {
        /**
         * Fires before the UI controls are hiding to check if they are allowed to hide.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onPreviewControlsHide;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onControlsHide", {
        /**
         * Fires when the UI controls are hiding.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onControlsHide;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onRelease", {
        /**
         * Fires when the UI controls are released.
         * @returns {EventDispatcher}
         */
        get: function () {
            return this.events.onRelease;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UIInstanceManager.prototype, "onComponentViewModeChanged", {
        get: function () {
            return this.events.onComponentViewModeChanged;
        },
        enumerable: false,
        configurable: true
    });
    UIInstanceManager.prototype.clearEventHandlers = function () {
        this.playerWrapper.clearEventHandlers();
        var events = this.events; // avoid TS7017
        for (var event_1 in events) {
            var dispatcher = events[event_1];
            dispatcher.unsubscribeAll();
        }
    };
    return UIInstanceManager;
}());
exports.UIInstanceManager = UIInstanceManager;
/**
 * Extends the {@link UIInstanceManager} for internal use in the {@link UIManager} and provides access to functionality
 * that components receiving a reference to the {@link UIInstanceManager} should not have access to.
 */
var InternalUIInstanceManager = /** @class */ (function (_super) {
    __extends(InternalUIInstanceManager, _super);
    function InternalUIInstanceManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InternalUIInstanceManager.prototype.getWrappedPlayer = function () {
        // TODO find a non-hacky way to provide the WrappedPlayer to the UIManager without exporting it
        // getPlayer() actually returns the WrappedPlayer but its return type is set to Player so the WrappedPlayer does
        // not need to be exported
        return this.getPlayer();
    };
    InternalUIInstanceManager.prototype.configureControls = function () {
        this.configureControlsTree(this.getUI());
        this.configured = true;
    };
    InternalUIInstanceManager.prototype.isConfigured = function () {
        return this.configured;
    };
    InternalUIInstanceManager.prototype.configureControlsTree = function (component) {
        var _this = this;
        var configuredComponents = [];
        uiutils_1.UIUtils.traverseTree(component, function (component) {
            // First, check if we have already configured a component, and throw an error if we did. Multiple configuration
            // of the same component leads to unexpected UI behavior. Also, a component that is in the UI tree multiple
            // times hints at a wrong UI structure.
            // We could just skip configuration in such a case and not throw an exception, but enforcing a clean UI tree
            // seems like the better choice.
            for (var _i = 0, configuredComponents_1 = configuredComponents; _i < configuredComponents_1.length; _i++) {
                var configuredComponent = configuredComponents_1[_i];
                if (configuredComponent === component) {
                    // Write the component to the console to simplify identification of the culprit
                    // (e.g. by inspecting the config)
                    if (console) {
                        console.error('Circular reference in UI tree', component);
                    }
                    // Additionally throw an error, because this case must not happen and leads to unexpected UI behavior.
                    throw Error('Circular reference in UI tree: ' + component.constructor.name);
                }
            }
            component.initialize();
            component.configure(_this.getPlayer(), _this);
            configuredComponents.push(component);
        });
    };
    InternalUIInstanceManager.prototype.releaseControls = function () {
        var _a;
        // Do not call release methods if the components have never been configured; this can result in exceptions
        if (this.configured) {
            this.onRelease.dispatch(this.getUI());
            this.releaseControlsTree(this.getUI());
            this.configured = false;
        }
        (_a = this.spatialNavigation) === null || _a === void 0 ? void 0 : _a.release();
        this.released = true;
    };
    InternalUIInstanceManager.prototype.isReleased = function () {
        return this.released;
    };
    InternalUIInstanceManager.prototype.releaseControlsTree = function (component) {
        component.release();
        if (component instanceof container_1.Container) {
            for (var _i = 0, _a = component.getComponents(); _i < _a.length; _i++) {
                var childComponent = _a[_i];
                this.releaseControlsTree(childComponent);
            }
        }
    };
    InternalUIInstanceManager.prototype.clearEventHandlers = function () {
        _super.prototype.clearEventHandlers.call(this);
    };
    return InternalUIInstanceManager;
}(UIInstanceManager));
/**
 * Wraps the player to track event handlers and provide a simple method to remove all registered event
 * handlers from the player.
 *
 * @category Utils
 */
var PlayerWrapper = /** @class */ (function () {
    function PlayerWrapper(player) {
        var _this = this;
        this.eventHandlers = {};
        this.player = player;
        // Collect all members of the player (public API methods and properties of the player)
        var objectProtoPropertyNames = Object.getOwnPropertyNames(Object.getPrototypeOf({}));
        var namesToIgnore = __spreadArray(['constructor'], objectProtoPropertyNames, true);
        var members = getAllPropertyNames(player).filter(function (name) { return namesToIgnore.indexOf(name) === -1; });
        // Split the members into methods and properties
        var methods = [];
        var properties = [];
        for (var _i = 0, members_1 = members; _i < members_1.length; _i++) {
            var member = members_1[_i];
            if (typeof player[member] === 'function') {
                methods.push(member);
            }
            else {
                properties.push(member);
            }
        }
        // Create wrapper object
        var wrapper = {};
        var _loop_1 = function (method) {
            wrapper[method] = function () {
                // console.log('called ' + member); // track method calls on the player
                return player[method].apply(player, arguments);
            };
        };
        // Add function wrappers for all API methods that do nothing but calling the base method on the player
        for (var _a = 0, methods_1 = methods; _a < methods_1.length; _a++) {
            var method = methods_1[_a];
            _loop_1(method);
        }
        var _loop_2 = function (property) {
            // Get an eventually existing property descriptor to differentiate between plain properties and properties with
            // getters/setters.
            var propertyDescriptor = (function (target) {
                while (target) {
                    var propertyDescriptor_1 = Object.getOwnPropertyDescriptor(target, property);
                    if (propertyDescriptor_1) {
                        return propertyDescriptor_1;
                    }
                    // Check if the PropertyDescriptor exists on a child prototype in case we have an inheritance of the player
                    target = Object.getPrototypeOf(target);
                }
            })(player);
            // If the property has getters/setters, wrap them accordingly...
            if (propertyDescriptor && (propertyDescriptor.get || propertyDescriptor.set)) {
                Object.defineProperty(wrapper, property, {
                    get: function () { return propertyDescriptor.get.call(player); },
                    set: function (value) { return propertyDescriptor.set.call(player, value); },
                });
            }
            // ... else just transfer the property to the wrapper
            else {
                wrapper[property] = player[property];
            }
        };
        // Add all public properties of the player to the wrapper
        for (var _b = 0, properties_1 = properties; _b < properties_1.length; _b++) {
            var property = properties_1[_b];
            _loop_2(property);
        }
        // Explicitly add a wrapper method for 'on' that adds added event handlers to the event list
        wrapper.on = function (eventType, callback) {
            player.on(eventType, callback);
            if (!_this.eventHandlers[eventType]) {
                _this.eventHandlers[eventType] = [];
            }
            _this.eventHandlers[eventType].push(callback);
            return wrapper;
        };
        // Explicitly add a wrapper method for 'off' that removes removed event handlers from the event list
        wrapper.off = function (eventType, callback) {
            player.off(eventType, callback);
            if (_this.eventHandlers[eventType]) {
                arrayutils_1.ArrayUtils.remove(_this.eventHandlers[eventType], callback);
            }
            return wrapper;
        };
        wrapper.fireEventInUI = function (event, data) {
            if (_this.eventHandlers[event]) { // check if there are handlers for this event registered
                // Extend the data object with default values to convert it to a {@link PlayerEventBase} object.
                var playerEventData = Object.assign({}, {
                    timestamp: Date.now(),
                    type: event,
                    // Add a marker property so the UI can detect UI-internal player events
                    uiSourced: true,
                }, data);
                // Execute the registered callbacks
                for (var _i = 0, _a = _this.eventHandlers[event]; _i < _a.length; _i++) {
                    var callback = _a[_i];
                    callback(playerEventData);
                }
            }
        };
        this.wrapper = wrapper;
    }
    /**
     * Returns a wrapped player object that can be used on place of the normal player object.
     * @returns {WrappedPlayer} a wrapped player
     */
    PlayerWrapper.prototype.getPlayer = function () {
        return this.wrapper;
    };
    /**
     * Clears all registered event handlers from the player that were added through the wrapped player.
     */
    PlayerWrapper.prototype.clearEventHandlers = function () {
        try {
            // Call the player API to check if the instance is still valid or already destroyed.
            // This can be any call throwing the PlayerAPINotAvailableError when the player instance is destroyed.
            this.player.getSource();
        }
        catch (error) {
            if (error instanceof this.player.exports.PlayerAPINotAvailableError) {
                // We have detected that the player instance is already destroyed, so we clear the event handlers to avoid
                // event handler unsubscription attempts (which would result in PlayerAPINotAvailableError errors).
                this.eventHandlers = {};
            }
        }
        for (var eventType in this.eventHandlers) {
            for (var _i = 0, _a = this.eventHandlers[eventType]; _i < _a.length; _i++) {
                var callback = _a[_i];
                this.player.off(eventType, callback);
            }
        }
    };
    return PlayerWrapper;
}());
exports.PlayerWrapper = PlayerWrapper;
function getAllPropertyNames(target) {
    var names = [];
    while (target) {
        var newNames = Object.getOwnPropertyNames(target).filter(function (name) { return names.indexOf(name) === -1; });
        names = names.concat(newNames);
        // go up prototype chain
        target = Object.getPrototypeOf(target);
    }
    return names;
}

},{"./arrayutils":6,"./browserutils":8,"./components/container":24,"./components/subtitlesettings/subtitlesettingsmanager":70,"./components/uicontainer":79,"./dom":87,"./eventdispatcher":89,"./focusvisibilitytracker":90,"./localization/i18n":94,"./mobilev3playerapi":100,"./storageutils":113,"./uiutils":120,"./volumecontroller":121}],120:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UIUtils = void 0;
var container_1 = require("./components/container");
/**
 * @category Utils
 */
var UIUtils;
(function (UIUtils) {
    function traverseTree(component, visit) {
        var recursiveTreeWalker = function (component, parent) {
            visit(component, parent);
            // If the current component is a container, visit it's children
            if (component instanceof container_1.Container) {
                for (var _i = 0, _a = component.getComponents(); _i < _a.length; _i++) {
                    var childComponent = _a[_i];
                    recursiveTreeWalker(childComponent, component);
                }
            }
        };
        // Walk and configure the component tree
        recursiveTreeWalker(component);
    }
    UIUtils.traverseTree = traverseTree;
    // From: https://github.com/nfriend/ts-keycode-enum/blob/master/Key.enum.ts
    var KeyCode;
    (function (KeyCode) {
        KeyCode[KeyCode["LeftArrow"] = 37] = "LeftArrow";
        KeyCode[KeyCode["UpArrow"] = 38] = "UpArrow";
        KeyCode[KeyCode["RightArrow"] = 39] = "RightArrow";
        KeyCode[KeyCode["DownArrow"] = 40] = "DownArrow";
        KeyCode[KeyCode["Space"] = 32] = "Space";
        KeyCode[KeyCode["End"] = 35] = "End";
        KeyCode[KeyCode["Home"] = 36] = "Home";
    })(KeyCode = UIUtils.KeyCode || (UIUtils.KeyCode = {}));
})(UIUtils = exports.UIUtils || (exports.UIUtils = {}));

},{"./components/container":24}],121:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeTransition = exports.VolumeController = void 0;
var eventdispatcher_1 = require("./eventdispatcher");
/**
 * Can be used to centrally manage and control the volume and mute state of the player from multiple components.
 */
var VolumeController = exports.VolumeController = /** @class */ (function () {
    function VolumeController(player) {
        var _this = this;
        this.player = player;
        this.events = {
            onChanged: new eventdispatcher_1.EventDispatcher(),
        };
        this.storeVolume();
        var handler = function () {
            _this.onChangedEvent();
        };
        player.on(player.exports.PlayerEvent.SourceLoaded, handler);
        player.on(player.exports.PlayerEvent.VolumeChanged, handler);
        player.on(player.exports.PlayerEvent.Muted, handler);
        player.on(player.exports.PlayerEvent.Unmuted, handler);
    }
    VolumeController.prototype.setVolume = function (volume) {
        this.player.setVolume(volume, VolumeController.issuerName);
    };
    VolumeController.prototype.getVolume = function () {
        return this.player.getVolume();
    };
    VolumeController.prototype.setMuted = function (muted) {
        if (muted) {
            this.player.mute(VolumeController.issuerName);
        }
        else {
            this.player.unmute(VolumeController.issuerName);
        }
    };
    VolumeController.prototype.toggleMuted = function () {
        if (this.isMuted() || this.getVolume() === 0) {
            // Unmuting from the mute or zero-volume state recalls the previously saved volume setting. Setting the
            // volume automatically unmutes the player in v7.
            this.recallVolume();
        }
        else {
            this.setMuted(true);
        }
    };
    VolumeController.prototype.isMuted = function () {
        return this.player.isMuted();
    };
    /**
     * Stores (saves) the current volume so it can later be restored with {@link recallVolume}.
     */
    VolumeController.prototype.storeVolume = function () {
        this.storedVolume = this.getVolume();
    };
    /**
     * Recalls (sets) the volume previously stored with {@link storeVolume}.
     */
    VolumeController.prototype.recallVolume = function () {
        this.setMuted(this.storedVolume === 0);
        this.setVolume(this.storedVolume);
    };
    VolumeController.prototype.startTransition = function () {
        return new VolumeTransition(this);
    };
    VolumeController.prototype.onChangedEvent = function () {
        var playerMuted = this.isMuted();
        var playerVolume = this.getVolume();
        var uiMuted = playerMuted || playerVolume === 0;
        var uiVolume = playerMuted ? 0 : playerVolume;
        this.storeVolume();
        this.events.onChanged.dispatch(this, { volume: uiVolume, muted: uiMuted });
    };
    Object.defineProperty(VolumeController.prototype, "onChanged", {
        /**
         * Gets the event that is fired when the volume settings have changed.
         */
        get: function () {
            return this.events.onChanged.getEvent();
        },
        enumerable: false,
        configurable: true
    });
    VolumeController.issuerName = 'ui-volumecontroller';
    return VolumeController;
}());
var VolumeTransition = /** @class */ (function () {
    function VolumeTransition(controller) {
        this.controller = controller;
        // Store the volume at the beginning of a volume change so we can recall it later in case we set the volume to
        // zero and actually mute the player.
        controller.storeVolume();
    }
    VolumeTransition.prototype.update = function (volume) {
        // Update the volume while transitioning so the user has a "live preview" of the desired target volume
        this.controller.setMuted(false);
        this.controller.setVolume(volume);
    };
    VolumeTransition.prototype.finish = function (volume) {
        if (volume === 0) {
            // When the volume is zero we essentially mute the volume so we recall the volume from the beginning of the
            // transition and mute the player instead. Recalling is necessary to return to the actual audio volume
            // when unmuting.
            // We must first recall the volume and then mute, because recalling sets the volume on the player
            // and setting a player volume > 0 unmutes the player in v7.
            this.controller.recallVolume();
            this.controller.setMuted(true);
        }
        else {
            this.controller.setMuted(false);
            this.controller.setVolume(volume);
            this.controller.storeVolume();
        }
    };
    return VolumeTransition;
}());
exports.VolumeTransition = VolumeTransition;

},{"./eventdispatcher":89}],122:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VttUtils = void 0;
// Our default height of a line
var lineHeight = 28;
// Default relative line height
var lineHeightPercent = 5;
var lineCount = 1;
var defaultLineNumber = 21; // Our default amount of lines
var Direction;
(function (Direction) {
    Direction["Top"] = "top";
    Direction["Bottom"] = "bottom";
    Direction["Left"] = "left";
    Direction["Right"] = "right";
})(Direction || (Direction = {}));
var VttVerticalWriting;
(function (VttVerticalWriting) {
    VttVerticalWriting["GrowingRight"] = "lr";
    VttVerticalWriting["GrowingLeft"] = "rl";
})(VttVerticalWriting || (VttVerticalWriting = {}));
var DirectionPair = new Map([
    [Direction.Top, Direction.Bottom],
    [Direction.Bottom, Direction.Top],
    [Direction.Left, Direction.Right],
    [Direction.Right, Direction.Left],
]);
/**
 * Sets the default standardized styles for the Cue Box
 * https://w3.org/TR/webvtt1/#applying-css-properties
 */
var setDefaultVttStyles = function (cueContainerDom, vtt) {
    if (vtt.region) {
        cueContainerDom.css('position', 'relative');
        cueContainerDom.css('unicode-bidi', 'plaintext');
    }
    else {
        cueContainerDom.css('position', 'absolute');
        cueContainerDom.css('overflow-wrap', 'break-word');
        cueContainerDom.css('overflow', 'hidden');
        cueContainerDom.css('flex-flow', 'column');
    }
    cueContainerDom.css('display', 'inline-flex');
};
/**
 * Align the Cue Box's line
 * https://w3.org/TR/webvtt1/#webvtt-cue-line-alignment
 */
var setVttLineAlign = function (cueContainerDom, _a, direction, relativeCueBoxPosition) {
    var lineAlign = _a.lineAlign;
    switch (lineAlign) {
        case 'center':
            setCssForCenterLineAlign(cueContainerDom, direction, relativeCueBoxPosition);
            break;
        case 'end':
            setCssForEndLineAlign(cueContainerDom, direction, relativeCueBoxPosition);
    }
};
/**
 * Defines the line positioning of the Cue Box
 * https://w3.org/TR/webvtt1/#webvtt-cue-line
 */
var setVttLine = function (cueContainerDom, vtt, direction, subtitleOverLaySize) {
    var overlayReferenceEdge = DirectionPair.get(direction);
    if (vtt.line === 'auto' && vtt.vertical) {
        cueContainerDom.css(overlayReferenceEdge, '0');
        return;
    }
    if (vtt.line === 'auto' && !vtt.vertical) {
        return;
    }
    var relativeLinePosition = parseFloat(vtt.line);
    if (vtt.snapToLines) {
        var targetLine = Number(vtt.line);
        if (targetLine < 0) {
            targetLine = defaultLineNumber + targetLine;
        }
        var lineHeight_1 = subtitleOverLaySize.height / defaultLineNumber;
        var absoluteLinePosition = lineHeight_1 * targetLine;
        relativeLinePosition = (100 * absoluteLinePosition) / subtitleOverLaySize.height;
    }
    if (vtt.lineAlign !== 'end')
        cueContainerDom.css(overlayReferenceEdge, "".concat(relativeLinePosition, "%"));
    setVttLineAlign(cueContainerDom, vtt, direction, relativeLinePosition);
};
/**
 * Defines the writing direction of the Cue Box
 * https://w3.org/TR/webvtt1/#webvtt-cue-writing-direction
 */
var setVttWritingDirectionAndCueBoxPositioning = function (cueContainerDom, vtt, subtitleOverlaySize) {
    switch (vtt.vertical) {
        case '':
            cueContainerDom.css('writing-mode', 'horizontal-tb');
            cueContainerDom.css(Direction.Bottom, '0');
            setVttLine(cueContainerDom, vtt, Direction.Bottom, subtitleOverlaySize);
            break;
        case VttVerticalWriting.GrowingRight:
            setCueBoxPositionForVerticalWriting(cueContainerDom, Direction.Right, vtt, subtitleOverlaySize);
            break;
        case VttVerticalWriting.GrowingLeft:
            setCueBoxPositionForVerticalWriting(cueContainerDom, Direction.Left, vtt, subtitleOverlaySize);
            break;
    }
};
var setCueBoxPositionForVerticalWriting = function (cueContainerDom, direction, vtt, subtitleOverlaySize) {
    var writingMode = direction === Direction.Right ?
        'vertical-lr' : 'vertical-rl';
    cueContainerDom.css('writing-mode', writingMode);
    cueContainerDom.css(Direction.Top, '0');
    setVttLine(cueContainerDom, vtt, direction, subtitleOverlaySize);
};
/**
 * Defines the Cue position alignment
 * https://w3.org/TR/webvtt1/#webvtt-cue-position-alignment
 */
var setVttPositionAlign = function (cueContainerDom, vtt, direction) {
    // https://www.w3.org/TR/webvtt1/#webvtt-cue-position
    if (vtt.position === 'auto') {
        cueContainerDom.css(direction, '0');
    }
    else {
        switch (vtt.positionAlign) {
            case 'line-left':
                cueContainerDom.css(direction, "".concat(vtt.position, "%"));
                cueContainerDom.css(DirectionPair.get(direction), 'auto');
                cueContainerDom.css('justify-content', 'flex-start');
                break;
            case 'center':
                cueContainerDom.css(direction, "".concat(vtt.position - vtt.size / 2, "%"));
                cueContainerDom.css(DirectionPair.get(direction), 'auto');
                cueContainerDom.css('justify-content', 'center');
                break;
            case 'line-right':
                cueContainerDom.css(direction, 'auto');
                cueContainerDom.css(DirectionPair.get(direction), "".concat(100 - vtt.position, "%"));
                cueContainerDom.css('justify-content', 'flex-end');
                break;
            default:
                cueContainerDom.css(direction, "".concat(vtt.position, "%"));
                cueContainerDom.css('justify-content', 'flex-start');
        }
    }
};
var countLines = function (innerHtml) {
    return innerHtml.split('<br />').length;
};
var setCssForCenterLineAlign = function (cueContainerDom, direction, relativeCueBoxPosition) {
    switch (direction) {
        case Direction.Bottom:
            cueContainerDom.css('transform', 'translateY(-50%)');
            break;
        case Direction.Left:
            cueContainerDom.css('transform', 'translateX(50%)');
            break;
        case Direction.Right:
            cueContainerDom.css('transform', 'translateX(-50%)');
            break;
    }
};
var setCssForEndLineAlign = function (cueContainerDom, direction, offset) {
    var opositeToOverlayReferenceEdge = direction;
    cueContainerDom.css(opositeToOverlayReferenceEdge, "".concat(100 - offset, "%"));
};
/**
 * @category Utils
 */
var VttUtils;
(function (VttUtils) {
    VttUtils.setVttCueBoxStyles = function (cueContainer, subtitleOverlaySize) {
        var vtt = cueContainer.vtt;
        var cueContainerDom = cueContainer.getDomElement();
        setDefaultVttStyles(cueContainerDom, vtt);
        lineCount = countLines(cueContainer.getText());
        setVttWritingDirectionAndCueBoxPositioning(cueContainerDom, vtt, subtitleOverlaySize);
        // https://w3.org/TR/webvtt1/#webvtt-cue-text-alignment
        var textAlign = vtt.align === 'middle' ? 'center' : vtt.align;
        cueContainerDom.css('text-align', textAlign);
        // https://w3.org/TR/webvtt1/#webvtt-cue-size
        var containerSize = vtt.size;
        if (vtt.vertical === '') {
            cueContainerDom.css('width', "".concat(containerSize, "%"));
            setVttPositionAlign(cueContainerDom, vtt, Direction.Left);
        }
        else {
            cueContainerDom.css('height', "".concat(containerSize, "%"));
            setVttPositionAlign(cueContainerDom, vtt, Direction.Top);
        }
    };
    /** https://www.w3.org/TR/webvtt1/#regions
     *  https://www.speechpad.com/captions/webvtt#toc_16
     */
    VttUtils.setVttRegionStyles = function (regionContainer, region, overlaySize) {
        var regionContainerDom = regionContainer.getDomElement();
        var regionPositionX = overlaySize.width * region.viewportAnchorX / 100 - ((overlaySize.width * region.width / 100) * region.regionAnchorX / 100);
        var regionPositionY = overlaySize.height * region.viewportAnchorY / 100 - ((region.lines * lineHeight) * region.regionAnchorY / 100);
        regionContainerDom.css('position', 'absolute');
        regionContainerDom.css('overflow', 'hidden');
        regionContainerDom.css('width', "".concat(region.width, "%"));
        regionContainerDom.css(Direction.Left, "".concat(regionPositionX, "px"));
        regionContainerDom.css(Direction.Right, 'unset');
        regionContainerDom.css(Direction.Top, "".concat(regionPositionY, "px"));
        regionContainerDom.css(Direction.Bottom, 'unset');
        regionContainerDom.css('height', "".concat(region.lines * lineHeight, "px"));
    };
})(VttUtils = exports.VttUtils || (exports.VttUtils = {}));

},{}]},{},[99])(99)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvY3VzdG9tL3RzL2NvbXBvbmVudHMvZ29iYWNrYnV0dG9uLnRzIiwic3JjL2N1c3RvbS90cy9jb21wb25lbnRzL3BsYXliYWNranVtcGJ1dHRvbi50cyIsInNyYy9jdXN0b20vdHMvY29tcG9uZW50cy9wbGF5YmFja2p1bXBvdmVybGF5LnRzIiwic3JjL2N1c3RvbS90cy9jb21wb25lbnRzL3F1YW50ZWVjY29uc3VtcHRpb25zLnRzIiwic3JjL2N1c3RvbS90cy9jb21wb25lbnRzL3JhZGlvbW9kZS9yYWRpb21vZGV0b2dnbGVidXR0b24udHMiLCJzcmMvdHMvYXJyYXl1dGlscy50cyIsInNyYy90cy9hdWRpb3RyYWNrdXRpbHMudHMiLCJzcmMvdHMvYnJvd3NlcnV0aWxzLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvYWRjbGlja292ZXJsYXkudHMiLCJzcmMvdHMvY29tcG9uZW50cy9hZG1lc3NhZ2VsYWJlbC50cyIsInNyYy90cy9jb21wb25lbnRzL2Fkc2tpcGJ1dHRvbi50cyIsInNyYy90cy9jb21wb25lbnRzL2FpcnBsYXl0b2dnbGVidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy9hdWRpb3F1YWxpdHlzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9hdWRpb3RyYWNrbGlzdGJveC50cyIsInNyYy90cy9jb21wb25lbnRzL2F1ZGlvdHJhY2tzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9idWZmZXJpbmdvdmVybGF5LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvYnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvY2FzdHN0YXR1c292ZXJsYXkudHMiLCJzcmMvdHMvY29tcG9uZW50cy9jYXN0dG9nZ2xlYnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvY2FzdHVpY29udGFpbmVyLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvY2xpY2tvdmVybGF5LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvY2xvc2VidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy9jb21wb25lbnQudHMiLCJzcmMvdHMvY29tcG9uZW50cy9jb250YWluZXIudHMiLCJzcmMvdHMvY29tcG9uZW50cy9jb250cm9sYmFyLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvZWNvbW9kZWNvbnRhaW5lci50cyIsInNyYy90cy9jb21wb25lbnRzL2Vjb21vZGV0b2dnbGVidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy9lcnJvcm1lc3NhZ2VvdmVybGF5LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvZnVsbHNjcmVlbnRvZ2dsZWJ1dHRvbi50cyIsInNyYy90cy9jb21wb25lbnRzL2h1Z2VwbGF5YmFja3RvZ2dsZWJ1dHRvbi50cyIsInNyYy90cy9jb21wb25lbnRzL2h1Z2VyZXBsYXlidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy9pdGVtc2VsZWN0aW9ubGlzdC50cyIsInNyYy90cy9jb21wb25lbnRzL2xhYmVsLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvbGlzdGJveC50cyIsInNyYy90cy9jb21wb25lbnRzL2xpc3RzZWxlY3Rvci50cyIsInNyYy90cy9jb21wb25lbnRzL21ldGFkYXRhbGFiZWwudHMiLCJzcmMvdHMvY29tcG9uZW50cy9waWN0dXJlaW5waWN0dXJldG9nZ2xlYnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvcGxheWJhY2tzcGVlZHNlbGVjdGJveC50cyIsInNyYy90cy9jb21wb25lbnRzL3BsYXliYWNrdGltZWxhYmVsLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvcGxheWJhY2t0b2dnbGVidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy9wbGF5YmFja3RvZ2dsZW92ZXJsYXkudHMiLCJzcmMvdHMvY29tcG9uZW50cy9xdWlja3NlZWtidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy9yZWNvbW1lbmRhdGlvbm92ZXJsYXkudHMiLCJzcmMvdHMvY29tcG9uZW50cy9yZXBsYXlidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy9zZWVrYmFyLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc2Vla2JhcmJ1ZmZlcmxldmVsLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc2Vla2JhcmNvbnRyb2xsZXIudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zZWVrYmFybGFiZWwudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zZXR0aW5nc3BhbmVsLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc2V0dGluZ3NwYW5lbGl0ZW0udHMiLCJzcmMvdHMvY29tcG9uZW50cy9zZXR0aW5nc3BhbmVscGFnZS50cyIsInNyYy90cy9jb21wb25lbnRzL3NldHRpbmdzcGFuZWxwYWdlYmFja2J1dHRvbi50cyIsInNyYy90cy9jb21wb25lbnRzL3NldHRpbmdzcGFuZWxwYWdlbmF2aWdhdG9yYnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc2V0dGluZ3NwYW5lbHBhZ2VvcGVuYnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc2V0dGluZ3N0b2dnbGVidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy9zcGFjZXIudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zdWJ0aXRsZWxpc3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zdWJ0aXRsZW92ZXJsYXkudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zdWJ0aXRsZXNlbGVjdGJveC50cyIsInNyYy90cy9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3MvYmFja2dyb3VuZGNvbG9yc2VsZWN0Ym94LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc3VidGl0bGVzZXR0aW5ncy9iYWNrZ3JvdW5kb3BhY2l0eXNlbGVjdGJveC50cyIsInNyYy90cy9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3MvY2hhcmFjdGVyZWRnZXNlbGVjdGJveC50cyIsInNyYy90cy9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3MvZm9udGNvbG9yc2VsZWN0Ym94LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc3VidGl0bGVzZXR0aW5ncy9mb250ZmFtaWx5c2VsZWN0Ym94LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc3VidGl0bGVzZXR0aW5ncy9mb250b3BhY2l0eXNlbGVjdGJveC50cyIsInNyYy90cy9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3MvZm9udHNpemVzZWxlY3Rib3gudHMiLCJzcmMvdHMvY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL3N1YnRpdGxlc2V0dGluZ3NlbGVjdGJveC50cyIsInNyYy90cy9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3Mvc3VidGl0bGVzZXR0aW5nc2xhYmVsLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc3VidGl0bGVzZXR0aW5ncy9zdWJ0aXRsZXNldHRpbmdzbWFuYWdlci50cyIsInNyYy90cy9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3Mvc3VidGl0bGVzZXR0aW5nc3BhbmVscGFnZS50cyIsInNyYy90cy9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3Mvc3VidGl0bGVzZXR0aW5nc3Jlc2V0YnV0dG9uLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvc3VidGl0bGVzZXR0aW5ncy93aW5kb3djb2xvcnNlbGVjdGJveC50cyIsInNyYy90cy9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3Mvd2luZG93b3BhY2l0eXNlbGVjdGJveC50cyIsInNyYy90cy9jb21wb25lbnRzL3RpbWVsaW5lbWFya2Vyc2hhbmRsZXIudHMiLCJzcmMvdHMvY29tcG9uZW50cy90aXRsZWJhci50cyIsInNyYy90cy9jb21wb25lbnRzL3RvZ2dsZWJ1dHRvbi50cyIsInNyYy90cy9jb21wb25lbnRzL3R2bm9pc2VjYW52YXMudHMiLCJzcmMvdHMvY29tcG9uZW50cy91aWNvbnRhaW5lci50cyIsInNyYy90cy9jb21wb25lbnRzL3ZpZGVvcXVhbGl0eXNlbGVjdGJveC50cyIsInNyYy90cy9jb21wb25lbnRzL3ZvbHVtZWNvbnRyb2xidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy92b2x1bWVzbGlkZXIudHMiLCJzcmMvdHMvY29tcG9uZW50cy92b2x1bWV0b2dnbGVidXR0b24udHMiLCJzcmMvdHMvY29tcG9uZW50cy92cnRvZ2dsZWJ1dHRvbi50cyIsInNyYy90cy9jb21wb25lbnRzL3dhdGVybWFyay50cyIsInNyYy90cy9kZW1vZmFjdG9yeS50cyIsInNyYy90cy9kb20udHMiLCJzcmMvdHMvZXJyb3J1dGlscy50cyIsInNyYy90cy9ldmVudGRpc3BhdGNoZXIudHMiLCJzcmMvdHMvZm9jdXN2aXNpYmlsaXR5dHJhY2tlci50cyIsInNyYy90cy9ncm91cHBsYXliYWNrYXBpLnRzIiwic3JjL3RzL2d1aWQudHMiLCJzcmMvdHMvaW1hZ2Vsb2FkZXIudHMiLCJzcmMvdHMvbG9jYWxpemF0aW9uL2kxOG4udHMiLCJzcmMvdHMvbG9jYWxpemF0aW9uL2xhbmd1YWdlcy9kZS5qc29uIiwic3JjL3RzL2xvY2FsaXphdGlvbi9sYW5ndWFnZXMvZW4uanNvbiIsInNyYy90cy9sb2NhbGl6YXRpb24vbGFuZ3VhZ2VzL2VzLmpzb24iLCJzcmMvdHMvbG9jYWxpemF0aW9uL2xhbmd1YWdlcy9ubC5qc29uIiwic3JjL3RzL21haW4udHMiLCJzcmMvdHMvbW9iaWxldjNwbGF5ZXJhcGkudHMiLCJzcmMvdHMvcGxheWVydXRpbHMudHMiLCJzcmMvdHMvc3BhdGlhbG5hdmlnYXRpb24vTGlzdE5hdmlnYXRpb25Hcm91cC50cyIsInNyYy90cy9zcGF0aWFsbmF2aWdhdGlvbi9nZXRodG1sZWxlbWVudHNmcm9tY29tcG9uZW50cy50cyIsInNyYy90cy9zcGF0aWFsbmF2aWdhdGlvbi9rZXltYXAudHMiLCJzcmMvdHMvc3BhdGlhbG5hdmlnYXRpb24vbmF2aWdhdGlvbmFsZ29yaXRobS50cyIsInNyYy90cy9zcGF0aWFsbmF2aWdhdGlvbi9uYXZpZ2F0aW9uZ3JvdXAudHMiLCJzcmMvdHMvc3BhdGlhbG5hdmlnYXRpb24vbm9kZWV2ZW50c3Vic2NyaWJlci50cyIsInNyYy90cy9zcGF0aWFsbmF2aWdhdGlvbi9yb290bmF2aWdhdGlvbmdyb3VwLnRzIiwic3JjL3RzL3NwYXRpYWxuYXZpZ2F0aW9uL3NlZWtiYXJoYW5kbGVyLnRzIiwic3JjL3RzL3NwYXRpYWxuYXZpZ2F0aW9uL3NwYXRpYWxuYXZpZ2F0aW9uLnRzIiwic3JjL3RzL3NwYXRpYWxuYXZpZ2F0aW9uL3R5cGVndWFyZHMudHMiLCJzcmMvdHMvc3BhdGlhbG5hdmlnYXRpb24vdHlwZXMudHMiLCJzcmMvdHMvc3RvcmFnZXV0aWxzLnRzIiwic3JjL3RzL3N0cmluZ3V0aWxzLnRzIiwic3JjL3RzL3N1YnRpdGxldXRpbHMudHMiLCJzcmMvdHMvdGltZW91dC50cyIsInNyYy90cy91aWZhY3RvcnkudHMiLCJzcmMvdHMvdWltYW5hZ2VyLnRzIiwic3JjL3RzL3VpdXRpbHMudHMiLCJzcmMvdHMvdm9sdW1lY29udHJvbGxlci50cyIsInNyYy90cy92dHR1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0NBLHdEQUFxRTtBQVNyRTtJQUFrQyxnQ0FBb0I7SUFDcEQsc0JBQVksTUFBNkM7UUFBN0MsdUJBQUEsRUFBQSxXQUErQixLQUFLLEVBQUUsS0FBSyxFQUFFO1FBQXpELFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBU2Q7UUFQQyxJQUFNLGFBQWEsR0FBaUI7WUFDbEMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQztZQUM3RixJQUFJLEVBQUUsU0FBUztZQUNmLFNBQVMsRUFBRSxTQUFTO1NBQ3JCLENBQUM7UUFFRixLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMzRWEsUUFBQSxPQUFPLEdBQVcsYUFBYSxDQUFDO0FBQzdDLGFBQWE7QUFDYiw4Q0FBNEI7QUFDNUIsNkNBQTJCO0FBQzNCLFlBQVk7QUFDWix5Q0FBd0M7QUFBL0Isc0dBQUEsU0FBUyxPQUFBO0FBQ2xCLDZDQUE0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QUNqRCxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxVQUFHLGVBQWUsT0FBSSxDQUFDLENBQUM7UUFDOUQsa0JBQWtCLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDbEQsa0JBQWtCLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxVQUFHLE1BQU0sQ0FBQyxLQUFLLEdBQUcsVUFBVSxPQUFJLENBQUMsQ0FBQztJQUNyRSxDQUFDLENBQUM7QUFDSixDQUFDLEVBakRnQixRQUFRLEdBQVIsZ0JBQVEsS0FBUixnQkFBUSxRQWlEeEIiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiaW1wb3J0IHsgUGxheWVyQVBJLCBQbGF5ZXJFdmVudCB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBCdXR0b24sIEJ1dHRvbkNvbmZpZyB9IGZyb20gJy4uLy4uLy4uL3RzL2NvbXBvbmVudHMvYnV0dG9uJztcbmltcG9ydCB7IFVJSW5zdGFuY2VNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vLi4vdHMvdWltYW5hZ2VyJztcblxuZGVjbGFyZSBjb25zdCB3aW5kb3c6IGFueTtcblxuaW50ZXJmYWNlIEdvQmFja0J1dHRvbkNvbmZpZyBleHRlbmRzIEJ1dHRvbkNvbmZpZyB7XG4gIGVycm9yPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIEdvQmFja0J1dHRvbiBleHRlbmRzIEJ1dHRvbjxCdXR0b25Db25maWc+IHtcbiAgY29uc3RydWN0b3IoY29uZmlnOiBHb0JhY2tCdXR0b25Db25maWcgPSB7IGVycm9yOiBmYWxzZSB9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIGNvbnN0IGRlZmF1bHRDb25maWc6IEJ1dHRvbkNvbmZpZyA9IHtcbiAgICAgIGNzc0NsYXNzZXM6IGNvbmZpZy5lcnJvciA/IFsndWktZ29iYWNrYnV0dG9uJywgJ3VpLWdvYmFja2J1dHRvbi1lcnJvciddIDogWyd1aS1nb2JhY2tidXR0b24nXSxcbiAgICAgIHRleHQ6ICdHbyBCYWNrJyxcbiAgICAgIGFyaWFMYWJlbDogJ0dvIEJhY2snLFxuICAgIH07XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCBkZWZhdWx0Q29uZmlnLCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB3aW5kb3cuYml0bW92aW4uY3VzdG9tTWVzc2FnZUhhbmRsZXIuc2VuZEFzeW5jaHJvbm91cygnZ29CYWNrJyk7XG4gICAgfSk7XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVmlld01vZGVDaGFuZ2VkLCAoKSA9PiB7XG4gICAgICBwbGF5ZXIuZ2V0Vmlld01vZGUoKSA9PT0gJ2Z1bGxzY3JlZW4nID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3coKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQnV0dG9uLCBCdXR0b25Db25maWcgfSBmcm9tICcuLi8uLi8uLi90cy9jb21wb25lbnRzL2J1dHRvbic7XG5pbXBvcnQgeyBVSUluc3RhbmNlTWFuYWdlciB9IGZyb20gJy4uLy4uLy4uL3RzL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uLy4uLy4uL3RzL2xvY2FsaXphdGlvbi9pMThuJztcbmltcG9ydCB7IFBsYXllclV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vdHMvcGxheWVydXRpbHMnO1xuaW1wb3J0IExpdmVTdHJlYW1EZXRlY3RvckV2ZW50QXJncyA9IFBsYXllclV0aWxzLkxpdmVTdHJlYW1EZXRlY3RvckV2ZW50QXJncztcblxuZXhwb3J0IGludGVyZmFjZSBQbGF5YmFja0p1bXBCdXR0b25zQ29uZmlnIGV4dGVuZHMgQnV0dG9uQ29uZmlnIHtcbiAgc2tpcFRpbWU6IG51bWJlcjsgLy8gaW4gc2Vjb25kc1xufVxuXG5leHBvcnQgY2xhc3MgUGxheWJhY2tKdW1wQnV0dG9ucyBleHRlbmRzIEJ1dHRvbjxQbGF5YmFja0p1bXBCdXR0b25zQ29uZmlnPiB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBQbGF5YmFja0p1bXBCdXR0b25zQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktcGxheWJhY2tqdW1wYnV0dG9ucycsXG4gICAgICB0ZXh0OiBjb25maWcudGV4dCxcbiAgICAgIGFyaWFMYWJlbDogY29uZmlnLmFyaWFMYWJlbCxcbiAgICAgIHNraXBUaW1lOiAwLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICBsZXQgbGl2ZVN0cmVhbURldGVjdG9yID0gbmV3IFBsYXllclV0aWxzLkxpdmVTdHJlYW1EZXRlY3RvcihcbiAgICAgIHBsYXllcixcbiAgICAgIHVpbWFuYWdlcixcbiAgICApO1xuICAgIGxpdmVTdHJlYW1EZXRlY3Rvci5vbkxpdmVDaGFuZ2VkLnN1YnNjcmliZShcbiAgICAgIChzZW5kZXIsIGFyZ3M6IExpdmVTdHJlYW1EZXRlY3RvckV2ZW50QXJncykgPT4ge1xuICAgICAgICBpZiAocGxheWVyLmlzTGl2ZSgpKSB7XG4gICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdWltYW5hZ2VyLm9uQ29udHJvbHNTaG93LnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHVpbWFuYWdlci5vbkNvbnRyb2xzSGlkZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgKTtcbiAgICBsaXZlU3RyZWFtRGV0ZWN0b3IuZGV0ZWN0KCk7XG5cbiAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gcGxheWVyLmdldEN1cnJlbnRUaW1lKCk7XG4gICAgICBjb25zdCBkdXJhdGlvbiA9IHBsYXllci5nZXREdXJhdGlvbigpO1xuXG4gICAgICBpZiAoIXBsYXllci5pc0xpdmUoKSkge1xuICAgICAgICBsZXQgbmV3VGltZSA9IGN1cnJlbnRUaW1lICsgdGhpcy5jb25maWcuc2tpcFRpbWU7XG4gICAgICAgIG5ld1RpbWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihuZXdUaW1lLCBkdXJhdGlvbikpO1xuICAgICAgICBwbGF5ZXIuc2VlayhuZXdUaW1lLCAndWknKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUGxheWJhY2tGb3J3YXJkQnV0dG9uIGV4dGVuZHMgUGxheWJhY2tKdW1wQnV0dG9ucyB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogUGxheWJhY2tKdW1wQnV0dG9uc0NvbmZpZykge1xuICAgIHN1cGVyKHtcbiAgICAgIC4uLmNvbmZpZyxcbiAgICAgIGNzc0NsYXNzOiAndWktcGxheWJhY2tmb3J3YXJkYnV0dG9uJyxcbiAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdmb3J3YXJkJyksXG4gICAgICBhcmlhTGFiZWw6IGkxOG4uZ2V0TG9jYWxpemVyKCdmb3J3YXJkJyksXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFBsYXliYWNrUmV3aW5kQnV0dG9uIGV4dGVuZHMgUGxheWJhY2tKdW1wQnV0dG9ucyB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogUGxheWJhY2tKdW1wQnV0dG9uc0NvbmZpZykge1xuICAgIHN1cGVyKHtcbiAgICAgIC4uLmNvbmZpZyxcbiAgICAgIGNzc0NsYXNzOiAndWktcGxheWJhY2tyZXdpbmRidXR0b24nLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3Jld2luZCcpLFxuICAgICAgYXJpYUxhYmVsOiBpMThuLmdldExvY2FsaXplcigncmV3aW5kJyksXG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7Q29udGFpbmVyLCBDb250YWluZXJDb25maWd9IGZyb20gJy4uLy4uLy4uL3RzL2NvbXBvbmVudHMvY29udGFpbmVyJztcbmltcG9ydCB7UGxheWJhY2tGb3J3YXJkQnV0dG9uLCBQbGF5YmFja1Jld2luZEJ1dHRvbn0gZnJvbSAnLi9wbGF5YmFja2p1bXBidXR0b24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBsYXliYWNrSnVtcENvbnRyb2xzT3ZlcmxheUNvbmZpZyBleHRlbmRzIENvbnRhaW5lckNvbmZpZyB7fVxuXG4vKipcbiAqIE92ZXJsYXkgY29udGFpbmluZyB0aGUgcGxheWJhY2sgZm9yd2FyZCBhbmQgcmV3aW5kIGJ1dHRvbnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBQbGF5YmFja0p1bXBDb250cm9sc092ZXJsYXkgZXh0ZW5kcyBDb250YWluZXI8UGxheWJhY2tKdW1wQ29udHJvbHNPdmVybGF5Q29uZmlnPiB7XG5cbiAgcHJpdmF0ZSBmb3J3YXJkQnV0dG9uOiBQbGF5YmFja0ZvcndhcmRCdXR0b247XG4gIHByaXZhdGUgcmV3aW5kQnV0dG9uOiBQbGF5YmFja1Jld2luZEJ1dHRvbjtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFBsYXliYWNrSnVtcENvbnRyb2xzT3ZlcmxheUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuZm9yd2FyZEJ1dHRvbiA9IG5ldyBQbGF5YmFja0ZvcndhcmRCdXR0b24oeyBza2lwVGltZTogMTAgfSk7XG4gICAgdGhpcy5yZXdpbmRCdXR0b24gPSBuZXcgUGxheWJhY2tSZXdpbmRCdXR0b24oeyBza2lwVGltZTogLTEwIH0pO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1wbGF5YmFja2ZvcndhcmQtb3ZlcmxheScsXG4gICAgICBjb21wb25lbnRzOiBbdGhpcy5mb3J3YXJkQnV0dG9uLCB0aGlzLnJld2luZEJ1dHRvbl0sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQbGF5ZXJBUEksIFBsYXllckV2ZW50IH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IEJ1dHRvbiwgQnV0dG9uQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vdHMvY29tcG9uZW50cy9idXR0b24nO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi8uLi8uLi90cy91aW1hbmFnZXInO1xuXG5kZWNsYXJlIGNvbnN0IHdpbmRvdzogYW55O1xuXG5pbnRlcmZhY2UgUXVhbnRlZWNDb25zdW1wdGlvbnNDb25maWcgZXh0ZW5kcyBCdXR0b25Db25maWcge1xufVxuXG5leHBvcnQgY2xhc3MgUXVhbnRlZWNDb25zdW1wdGlvbnMgZXh0ZW5kcyBCdXR0b248QnV0dG9uQ29uZmlnPiB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogUXVhbnRlZWNDb25zdW1wdGlvbnNDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICBjb25zdCBkZWZhdWx0Q29uZmlnOiBCdXR0b25Db25maWcgPSB7XG4gICAgICBjc3NDbGFzczogJ3VpLXF1YW50ZWVjY29uc3VtcHRpb25zJyxcbiAgICAgIHRleHQ6ICdHZXQgUXVhbnRlZWMgY29uc3VtcHRpb25zJyxcbiAgICAgIGFyaWFMYWJlbDogJ0dldCBRdWFudGVlYyBjb25zdW1wdGlvbnMnLFxuICAgIH07XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCBkZWZhdWx0Q29uZmlnLCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAvLyB3ZWIgaGFuZGxlXG4gICAgICB3aW5kb3cuaXNRdWFudGVlY0Rpc3BsYXllZCA9ICF3aW5kb3cuaXNRdWFudGVlY0Rpc3BsYXllZDtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IFRvZ2dsZUJ1dHRvbiwgVG9nZ2xlQnV0dG9uQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vLi4vdHMvY29tcG9uZW50cy90b2dnbGVidXR0b24nO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi8uLi8uLi8uLi90cy91aW1hbmFnZXInO1xuXG5kZWNsYXJlIGNvbnN0IHdpbmRvdzogYW55O1xuXG5leHBvcnQgaW50ZXJmYWNlIFJhZGlvTW9kZVRvZ2dsZUJ1dHRvbkNvbmZpZyBleHRlbmRzIFRvZ2dsZUJ1dHRvbkNvbmZpZyB7XG4gIC8qKlxuICAgKiBEZWNpZGVzIHRoZSBpbml0aWFsIHN0YXRlIG9mIHRoZSB0b2dnbGUgYnV0dG9uXG4gICAqIERlZmF1bHQ6IGZhbHNlXG4gICAqL1xuICBhY3RpdmU6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBSYWRpb01vZGVUb2dnbGVCdXR0b24gZXh0ZW5kcyBUb2dnbGVCdXR0b248UmFkaW9Nb2RlVG9nZ2xlQnV0dG9uQ29uZmlnPiB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogUmFkaW9Nb2RlVG9nZ2xlQnV0dG9uQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIGNvbnN0IGRlZmF1bHRDb25maWc6IFJhZGlvTW9kZVRvZ2dsZUJ1dHRvbkNvbmZpZyA9IHtcbiAgICAgIGNzc0NsYXNzOiBjb25maWcuYWN0aXZlID8gJ3VpLWNsb3NlYnV0dG9uJyA6ICd1aS1yYWRpb21vZGV0b2dnbGVidXR0b24nLFxuICAgICAgdGV4dDogJ1JhZGlvIE1vZGUnLFxuICAgICAgYXJpYUxhYmVsOiAnUmFkaW8gTW9kZScsXG4gICAgICBhY3RpdmU6IGZhbHNlLFxuICAgIH07XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCBkZWZhdWx0Q29uZmlnLCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAvLyBNb2JpbGVcbiAgICAgIGNvbnN0IGluaXRpYWxTdGF0ZSA9IHRoaXMuY29uZmlnLmFjdGl2ZTtcbiAgICAgIGlmICh3aW5kb3cuYml0bW92aW4uY3VzdG9tTWVzc2FnZUhhbmRsZXIpIHtcbiAgICAgICAgd2luZG93LmJpdG1vdmluLmN1c3RvbU1lc3NhZ2VIYW5kbGVyLnNlbmRBc3luY2hyb25vdXMoXG4gICAgICAgICAgJ3JhZGlvTW9kZUNoYW5nZWQnLFxuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIGluaXRpYWxTdGF0ZSxcbiAgICAgICAgICAgIGFjdGl2YXRlZDogIXRoaXMuY29uZmlnLmFjdGl2ZSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2ViXG4gICAgICB3aW5kb3cuaXNSYWRpb01vZGVBY3RpdmUgPSAhd2luZG93LmlzUmFkaW9Nb2RlQWN0aXZlO1xuICAgIH0pO1xuICB9XG59XG4iLCIvKipcbiAqIEBjYXRlZ29yeSBVdGlsc1xuICovXG5leHBvcnQgbmFtZXNwYWNlIEFycmF5VXRpbHMge1xuICAvKipcbiAgICogUmVtb3ZlcyBhbiBpdGVtIGZyb20gYW4gYXJyYXkuXG4gICAqIEBwYXJhbSBhcnJheSB0aGUgYXJyYXkgdGhhdCBtYXkgY29udGFpbiB0aGUgaXRlbSB0byByZW1vdmVcbiAgICogQHBhcmFtIGl0ZW0gdGhlIGl0ZW0gdG8gcmVtb3ZlIGZyb20gdGhlIGFycmF5XG4gICAqIEByZXR1cm5zIHthbnl9IHRoZSByZW1vdmVkIGl0ZW0gb3IgbnVsbCBpZiBpdCB3YXNuJ3QgcGFydCBvZiB0aGUgYXJyYXlcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiByZW1vdmU8VD4oYXJyYXk6IFRbXSwgaXRlbTogVCk6IFQgfCBudWxsIHtcbiAgICBsZXQgaW5kZXggPSBhcnJheS5pbmRleE9mKGl0ZW0pO1xuXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHJldHVybiBhcnJheS5zcGxpY2UoaW5kZXgsIDEpWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IExpc3RJdGVtLCBMaXN0U2VsZWN0b3IsIExpc3RTZWxlY3RvckNvbmZpZyB9IGZyb20gJy4vY29tcG9uZW50cy9saXN0c2VsZWN0b3InO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBBdWRpb1RyYWNrRXZlbnQsIFBsYXllckFQSSwgQXVkaW9UcmFjayB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogSGVscGVyIGNsYXNzIHRvIGhhbmRsZSBhbGwgYXVkaW8gdHJhY2tzIHJlbGF0ZWQgZXZlbnRzXG4gKlxuICogVGhpcyBjbGFzcyBsaXN0ZW5zIHRvIHBsYXllciBldmVudHMgYXMgd2VsbCBhcyB0aGUgYExpc3RTZWxlY3RvcmAgZXZlbnQgaWYgc2VsZWN0aW9uIGNoYW5nZWRcbiAqXG4gKiBAY2F0ZWdvcnkgVXRpbHNcbiAqL1xuZXhwb3J0IGNsYXNzIEF1ZGlvVHJhY2tTd2l0Y2hIYW5kbGVyIHtcblxuICBwcml2YXRlIHBsYXllcjogUGxheWVyQVBJO1xuICBwcml2YXRlIGxpc3RFbGVtZW50OiBMaXN0U2VsZWN0b3I8TGlzdFNlbGVjdG9yQ29uZmlnPjtcbiAgcHJpdmF0ZSB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyO1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllcjogUGxheWVyQVBJLCBlbGVtZW50OiBMaXN0U2VsZWN0b3I8TGlzdFNlbGVjdG9yQ29uZmlnPiwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcikge1xuICAgIHRoaXMucGxheWVyID0gcGxheWVyO1xuICAgIHRoaXMubGlzdEVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMudWltYW5hZ2VyID0gdWltYW5hZ2VyO1xuXG4gICAgdGhpcy5iaW5kU2VsZWN0aW9uRXZlbnQoKTtcbiAgICB0aGlzLmJpbmRQbGF5ZXJFdmVudHMoKTtcbiAgICB0aGlzLnJlZnJlc2hBdWRpb1RyYWNrcygpO1xuICB9XG5cbiAgcHJpdmF0ZSBiaW5kU2VsZWN0aW9uRXZlbnQoKTogdm9pZCB7XG4gICAgdGhpcy5saXN0RWxlbWVudC5vbkl0ZW1TZWxlY3RlZC5zdWJzY3JpYmUoKF8sIHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgIHRoaXMucGxheWVyLnNldEF1ZGlvKHZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgYmluZFBsYXllckV2ZW50cygpOiB2b2lkIHtcbiAgICAvLyBVcGRhdGUgc2VsZWN0aW9uIHdoZW4gc2VsZWN0ZWQgdHJhY2sgaGFzIGNoYW5nZWRcbiAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkF1ZGlvQ2hhbmdlZCwgdGhpcy5zZWxlY3RDdXJyZW50QXVkaW9UcmFjayk7XG4gICAgLy8gVXBkYXRlIHRyYWNrcyB3aGVuIHNvdXJjZSBnb2VzIGF3YXlcbiAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZVVubG9hZGVkLCB0aGlzLnJlZnJlc2hBdWRpb1RyYWNrcyk7XG4gICAgLy8gVXBkYXRlIHRyYWNrcyB3aGVuIHRoZSBwZXJpb2Qgd2l0aGluIGEgc291cmNlIGNoYW5nZXNcbiAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBlcmlvZFN3aXRjaGVkLCB0aGlzLnJlZnJlc2hBdWRpb1RyYWNrcyk7XG4gICAgLy8gVXBkYXRlIHRyYWNrcyB3aGVuIGEgdHJhY2sgaXMgYWRkZWQgb3IgcmVtb3ZlZFxuICAgIHRoaXMucGxheWVyLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQXVkaW9BZGRlZCwgdGhpcy5hZGRBdWRpb1RyYWNrKTtcbiAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkF1ZGlvUmVtb3ZlZCwgdGhpcy5yZW1vdmVBdWRpb1RyYWNrKTtcbiAgICB0aGlzLnVpbWFuYWdlci5nZXRDb25maWcoKS5ldmVudHMub25VcGRhdGVkLnN1YnNjcmliZSh0aGlzLnJlZnJlc2hBdWRpb1RyYWNrcyk7XG4gIH1cblxuICBwcml2YXRlIGFkZEF1ZGlvVHJhY2sgPSAoZXZlbnQ6IEF1ZGlvVHJhY2tFdmVudCkgPT4ge1xuICAgIGNvbnN0IGF1ZGlvVHJhY2sgPSBldmVudC50cmFjaztcbiAgICBpZiAoIXRoaXMubGlzdEVsZW1lbnQuaGFzSXRlbShhdWRpb1RyYWNrLmlkKSkge1xuICAgICAgdGhpcy5saXN0RWxlbWVudC5hZGRJdGVtKGF1ZGlvVHJhY2suaWQsIGkxOG4uZ2V0TG9jYWxpemVyKGF1ZGlvVHJhY2subGFiZWwpLCB0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSByZW1vdmVBdWRpb1RyYWNrID0gKGV2ZW50OiBBdWRpb1RyYWNrRXZlbnQpID0+IHtcbiAgICBjb25zdCBhdWRpb1RyYWNrID0gZXZlbnQudHJhY2s7XG4gICAgaWYgKHRoaXMubGlzdEVsZW1lbnQuaGFzSXRlbShhdWRpb1RyYWNrLmlkKSkge1xuICAgICAgdGhpcy5saXN0RWxlbWVudC5yZW1vdmVJdGVtKGF1ZGlvVHJhY2suaWQpO1xuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIHNlbGVjdEN1cnJlbnRBdWRpb1RyYWNrID0gKCkgPT4ge1xuICAgIGxldCBjdXJyZW50QXVkaW9UcmFjayA9IHRoaXMucGxheWVyLmdldEF1ZGlvKCk7XG5cbiAgICAvLyBITFMgc3RyZWFtcyBkb24ndCBhbHdheXMgcHJvdmlkZSB0aGlzLCBzbyB3ZSBoYXZlIHRvIGNoZWNrXG4gICAgaWYgKGN1cnJlbnRBdWRpb1RyYWNrKSB7XG4gICAgICB0aGlzLmxpc3RFbGVtZW50LnNlbGVjdEl0ZW0oY3VycmVudEF1ZGlvVHJhY2suaWQpO1xuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIHJlZnJlc2hBdWRpb1RyYWNrcyA9ICgpID0+IHtcbiAgICBjb25zdCBhdWRpb1RyYWNrcyA9IHRoaXMucGxheWVyLmdldEF2YWlsYWJsZUF1ZGlvKCk7XG4gICAgY29uc3QgYXVkaW9UcmFja1RvTGlzdEl0ZW0gPSAoYXVkaW9UcmFjazogQXVkaW9UcmFjayk6IExpc3RJdGVtID0+IHtcbiAgICAgIHJldHVybiB7IGtleTogYXVkaW9UcmFjay5pZCwgbGFiZWw6IGF1ZGlvVHJhY2subGFiZWwgfTtcbiAgICB9O1xuXG4gICAgdGhpcy5saXN0RWxlbWVudC5zeW5jaHJvbml6ZUl0ZW1zKGF1ZGlvVHJhY2tzLm1hcChhdWRpb1RyYWNrVG9MaXN0SXRlbSkpO1xuICAgIHRoaXMuc2VsZWN0Q3VycmVudEF1ZGlvVHJhY2soKTtcbiAgfTtcbn1cbiIsImRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIE5hdmlnYXRvciB7XG4gICAgbXNNYXhUb3VjaFBvaW50cz86IG51bWJlcjtcbiAgfVxufVxuXG4vKipcbiAqIEBjYXRlZ29yeSBVdGlsc1xuICovXG5leHBvcnQgY2xhc3MgQnJvd3NlclV0aWxzIHtcbiAgLy8gaXNNb2JpbGUgb25seSBuZWVkcyB0byBiZSBldmFsdWF0ZWQgb25jZSAoaXQgY2Fubm90IGNoYW5nZSBkdXJpbmcgYSBicm93c2VyIHNlc3Npb24pXG4gIC8vIE1vYmlsZSBkZXRlY3Rpb24gYWNjb3JkaW5nIHRvIE1vemlsbGEgcmVjb21tZW5kYXRpb246IFwiSW4gc3VtbWFyeSwgd2UgcmVjb21tZW5kIGxvb2tpbmcgZm9yIHRoZSBzdHJpbmcg4oCcTW9iaeKAnVxuICAvLyBhbnl3aGVyZSBpbiB0aGUgVXNlciBBZ2VudCB0byBkZXRlY3QgYSBtb2JpbGUgZGV2aWNlLlwiXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvQnJvd3Nlcl9kZXRlY3Rpb25fdXNpbmdfdGhlX3VzZXJfYWdlbnRcbiAgc3RhdGljIGdldCBpc01vYmlsZSgpOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMud2luZG93RXhpc3RzKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIC9Nb2JpLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICB9XG5cbiAgc3RhdGljIGdldCBpc0Nocm9tZSgpOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMud2luZG93RXhpc3RzKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIC9DaHJvbWUvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGlzQW5kcm9pZCgpOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMud2luZG93RXhpc3RzKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIC9BbmRyb2lkLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICYmICF0aGlzLmlzSGlzZW5zZTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgaXNJT1MoKTogYm9vbGVhbiB7XG4gICAgaWYgKCF0aGlzLndpbmRvd0V4aXN0cygpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiAvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgaXNNYWNJbnRlbCgpOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMud2luZG93RXhpc3RzKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci5wbGF0Zm9ybSA9PT0gJ01hY0ludGVsJztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgaXNIaXNlbnNlKCk6IGJvb2xlYW4ge1xuICAgIGlmICghdGhpcy53aW5kb3dFeGlzdHMoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgL0hpc2Vuc2UvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGlzUGxheVN0YXRpb24oKTogYm9vbGVhbiB7XG4gICAgaWYgKCF0aGlzLndpbmRvd0V4aXN0cygpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiAvUGxheVN0YXRpb24vaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICB9XG5cbiAgc3RhdGljIGdldCBpc1dlYk9zKCk6IGJvb2xlYW4ge1xuICAgIGlmICghdGhpcy53aW5kb3dFeGlzdHMoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgbmF2aWdhdG9yICYmXG4gICAgICBuYXZpZ2F0b3IudXNlckFnZW50ICYmXG4gICAgICAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnV2ViMFMnKSB8fCBuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKCdOZXRDYXN0JykpXG4gICAgKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgaXNUaXplbigpOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMud2luZG93RXhpc3RzKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIC9UaXplbi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgfVxuXG4gIC8vIGh0dHBzOi8vaGFja3MubW96aWxsYS5vcmcvMjAxMy8wNC9kZXRlY3RpbmctdG91Y2gtaXRzLXRoZS13aHktbm90LXRoZS1ob3cvXG4gIHN0YXRpYyBnZXQgaXNUb3VjaFN1cHBvcnRlZCgpIHtcbiAgICBpZiAoIXRoaXMud2luZG93RXhpc3RzKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiAobmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMCB8fCBuYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cyA+IDApO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgd2luZG93RXhpc3RzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ2xpY2tPdmVybGF5LCBDbGlja092ZXJsYXlDb25maWcgfSBmcm9tICcuL2NsaWNrb3ZlcmxheSc7XG5pbXBvcnQgeyBVSUluc3RhbmNlTWFuYWdlciB9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBBZCwgQWRFdmVudCwgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcblxuLyoqXG4gKiBBIHNpbXBsZSBjbGljayBjYXB0dXJlIG92ZXJsYXkgZm9yIGNsaWNrVGhyb3VnaFVybHMgb2YgYWRzLlxuICpcbiAqIEBjYXRlZ29yeSBDb21wb25lbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBBZENsaWNrT3ZlcmxheSBleHRlbmRzIENsaWNrT3ZlcmxheSB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQ2xpY2tPdmVybGF5Q29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgYWNjZXB0c1RvdWNoV2l0aFVpSGlkZGVuOiB0cnVlLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICBsZXQgY2xpY2tUaHJvdWdoQ2FsbGJhY2s6ICgpID0+IHZvaWQgPSBudWxsO1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkU3RhcnRlZCwgKGV2ZW50OiBBZEV2ZW50KSA9PiB7XG4gICAgICBsZXQgYWQgPSBldmVudC5hZDtcbiAgICAgIHRoaXMuc2V0VXJsKGFkLmNsaWNrVGhyb3VnaFVybCk7XG4gICAgICBjbGlja1Rocm91Z2hDYWxsYmFjayA9IGFkLmNsaWNrVGhyb3VnaFVybE9wZW5lZDtcbiAgICB9KTtcblxuICAgIC8vIENsZWFyIGNsaWNrLXRocm91Z2ggVVJMIHdoZW4gYWQgaGFzIGZpbmlzaGVkXG4gICAgbGV0IGFkRmluaXNoZWRIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgdGhpcy5zZXRVcmwobnVsbCk7XG4gICAgfTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BZEZpbmlzaGVkLCBhZEZpbmlzaGVkSGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkU2tpcHBlZCwgYWRGaW5pc2hlZEhhbmRsZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BZEVycm9yLCBhZEZpbmlzaGVkSGFuZGxlcik7XG5cbiAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIC8vIFBhdXNlIHRoZSBhZCB3aGVuIG92ZXJsYXkgaXMgY2xpY2tlZFxuICAgICAgcGxheWVyLnBhdXNlKCd1aS1hZC1jbGljay1vdmVybGF5Jyk7XG5cbiAgICAgIGlmIChjbGlja1Rocm91Z2hDYWxsYmFjaykge1xuICAgICAgICBjbGlja1Rocm91Z2hDYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQge0xhYmVsLCBMYWJlbENvbmZpZ30gZnJvbSAnLi9sYWJlbCc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHtTdHJpbmdVdGlsc30gZnJvbSAnLi4vc3RyaW5ndXRpbHMnO1xuaW1wb3J0IHsgQWRFdmVudCwgTGluZWFyQWQsIFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEEgbGFiZWwgdGhhdCBkaXNwbGF5cyBhIG1lc3NhZ2UgYWJvdXQgYSBydW5uaW5nIGFkLCBvcHRpb25hbGx5IHdpdGggYSBjb3VudGRvd24uXG4gKlxuICogQGNhdGVnb3J5IENvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGNsYXNzIEFkTWVzc2FnZUxhYmVsIGV4dGVuZHMgTGFiZWw8TGFiZWxDb25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IExhYmVsQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1sYWJlbC1hZC1tZXNzYWdlJyxcbiAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdhZHMucmVtYWluaW5nVGltZScpICxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbGV0IGNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG4gICAgbGV0IHRleHQgPSBjb25maWcudGV4dDtcblxuICAgIGxldCB1cGRhdGVNZXNzYWdlSGFuZGxlciA9ICgpID0+IHtcbiAgICAgIHRoaXMuc2V0VGV4dChTdHJpbmdVdGlscy5yZXBsYWNlQWRNZXNzYWdlUGxhY2Vob2xkZXJzKGkxOG4ucGVyZm9ybUxvY2FsaXphdGlvbih0ZXh0KSwgbnVsbCwgcGxheWVyKSk7XG4gICAgfTtcblxuICAgIGxldCBhZFN0YXJ0SGFuZGxlciA9IChldmVudDogQWRFdmVudCkgPT4ge1xuICAgICAgbGV0IHVpQ29uZmlnID0gKGV2ZW50LmFkIGFzIExpbmVhckFkKS51aUNvbmZpZztcbiAgICAgIHRleHQgPSB1aUNvbmZpZyAmJiB1aUNvbmZpZy5tZXNzYWdlIHx8IGNvbmZpZy50ZXh0O1xuXG4gICAgICB1cGRhdGVNZXNzYWdlSGFuZGxlcigpO1xuXG4gICAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVGltZUNoYW5nZWQsIHVwZGF0ZU1lc3NhZ2VIYW5kbGVyKTtcbiAgICB9O1xuXG4gICAgbGV0IGFkRW5kSGFuZGxlciA9ICgpID0+IHtcbiAgICAgIHBsYXllci5vZmYocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVGltZUNoYW5nZWQsIHVwZGF0ZU1lc3NhZ2VIYW5kbGVyKTtcbiAgICB9O1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkU3RhcnRlZCwgYWRTdGFydEhhbmRsZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BZFNraXBwZWQsIGFkRW5kSGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkRXJyb3IsIGFkRW5kSGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkRmluaXNoZWQsIGFkRW5kSGFuZGxlcik7XG4gIH1cbn0iLCJpbXBvcnQgeyBCdXR0b25Db25maWcsIEJ1dHRvbiB9IGZyb20gJy4vYnV0dG9uJztcbmltcG9ydCB7IFVJSW5zdGFuY2VNYW5hZ2VyIH0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFN0cmluZ1V0aWxzIH0gZnJvbSAnLi4vc3RyaW5ndXRpbHMnO1xuaW1wb3J0IHsgQWRFdmVudCwgTGluZWFyQWQsIFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIHRoZSB7QGxpbmsgQWRTa2lwQnV0dG9ufS5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29uZmlnc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEFkU2tpcEJ1dHRvbkNvbmZpZyBleHRlbmRzIEJ1dHRvbkNvbmZpZyB7XG4gIC8qKlxuICAgKiBNZXNzYWdlIHdoaWNoIGdldHMgZGlzcGxheWVkIGR1cmluZyB0aGUgY291bnRkb3duIGlzIGFjdGl2ZS5cbiAgICogU3VwcG9ydGVkIHBsYWNlaG9sZGVyczogbG9vayBhdCB7QGxpbmsgU3RyaW5nVXRpbHMucmVwbGFjZUFkTWVzc2FnZVBsYWNlaG9sZGVyc31cbiAgICovXG4gIHVudGlsU2tpcHBhYmxlTWVzc2FnZT86IHN0cmluZztcbiAgLyoqXG4gICAqIE1lc3NhZ2UgZGlzcGxheWVkIHdoZW4gdGhlIGFkIGlzIHNraXBwYWJsZS5cbiAgICogU3VwcG9ydGVkIHBsYWNlaG9sZGVyczogbG9vayBhdCB7QGxpbmsgU3RyaW5nVXRpbHMucmVwbGFjZUFkTWVzc2FnZVBsYWNlaG9sZGVyc31cbiAgICovXG4gIHNraXBwYWJsZU1lc3NhZ2U/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQSBidXR0b24gdGhhdCBpcyBkaXNwbGF5ZWQgZHVyaW5nIGFkcyBhbmQgY2FuIGJlIHVzZWQgdG8gc2tpcCB0aGUgYWQuXG4gKlxuICogQGNhdGVnb3J5IEJ1dHRvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIEFkU2tpcEJ1dHRvbiBleHRlbmRzIEJ1dHRvbjxBZFNraXBCdXR0b25Db25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IEFkU2tpcEJ1dHRvbkNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIDxBZFNraXBCdXR0b25Db25maWc+e1xuICAgICAgY3NzQ2xhc3M6ICd1aS1idXR0b24tYWQtc2tpcCcsXG4gICAgICB1bnRpbFNraXBwYWJsZU1lc3NhZ2U6ICdTa2lwIGFkIGluIHtyZW1haW5pbmdUaW1lfScsXG4gICAgICBza2lwcGFibGVNZXNzYWdlOiAnU2tpcCBhZCcsXG4gICAgICBhY2NlcHRzVG91Y2hXaXRoVWlIaWRkZW46IHRydWUsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuICAgIGxldCB1bnRpbFNraXBwYWJsZU1lc3NhZ2UgPSBjb25maWcudW50aWxTa2lwcGFibGVNZXNzYWdlO1xuICAgIGxldCBza2lwcGFibGVNZXNzYWdlID0gY29uZmlnLnNraXBwYWJsZU1lc3NhZ2U7XG4gICAgbGV0IHNraXBPZmZzZXQgPSAtMTtcblxuICAgIGxldCB1cGRhdGVTa2lwTWVzc2FnZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICB0aGlzLnNob3coKTtcblxuICAgICAgLy8gVXBkYXRlIHRoZSBza2lwIG1lc3NhZ2Ugb24gdGhlIGJ1dHRvblxuICAgICAgaWYgKHBsYXllci5nZXRDdXJyZW50VGltZSgpIDwgc2tpcE9mZnNldCkge1xuICAgICAgICB0aGlzLnNldFRleHQoU3RyaW5nVXRpbHMucmVwbGFjZUFkTWVzc2FnZVBsYWNlaG9sZGVycyh1bnRpbFNraXBwYWJsZU1lc3NhZ2UsIHNraXBPZmZzZXQsIHBsYXllcikpO1xuICAgICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2V0VGV4dChza2lwcGFibGVNZXNzYWdlKTtcbiAgICAgICAgdGhpcy5lbmFibGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbGV0IGFkU3RhcnRIYW5kbGVyID0gKGV2ZW50OiBBZEV2ZW50KSA9PiB7XG4gICAgICBsZXQgYWQgPSBldmVudC5hZCBhcyBMaW5lYXJBZDtcbiAgICAgIHNraXBPZmZzZXQgPSBhZC5za2lwcGFibGVBZnRlcjtcbiAgICAgIHVudGlsU2tpcHBhYmxlTWVzc2FnZSA9IGFkLnVpQ29uZmlnICYmIGFkLnVpQ29uZmlnLnVudGlsU2tpcHBhYmxlTWVzc2FnZSB8fCBjb25maWcudW50aWxTa2lwcGFibGVNZXNzYWdlO1xuICAgICAgc2tpcHBhYmxlTWVzc2FnZSA9IGFkLnVpQ29uZmlnICYmIGFkLnVpQ29uZmlnLnNraXBwYWJsZU1lc3NhZ2UgfHwgY29uZmlnLnNraXBwYWJsZU1lc3NhZ2U7XG5cbiAgICAgIC8vIERpc3BsYXkgdGhpcyBidXR0b24gb25seSBpZiBhZCBpcyBza2lwcGFibGUuXG4gICAgICAvLyBOb24tc2tpcHBhYmxlIGFkcyB3aWxsIHJldHVybiAtMSBmb3Igc2tpcHBhYmxlQWZ0ZXIgZm9yIHBsYXllciB2ZXJzaW9uIDwgdjguMy4wLlxuICAgICAgaWYgKHR5cGVvZiBza2lwT2Zmc2V0ID09PSAnbnVtYmVyJyAmJiBza2lwT2Zmc2V0ID49IDApIHtcbiAgICAgICAgdXBkYXRlU2tpcE1lc3NhZ2VIYW5kbGVyKCk7XG4gICAgICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5UaW1lQ2hhbmdlZCwgdXBkYXRlU2tpcE1lc3NhZ2VIYW5kbGVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBsZXQgYWRFbmRIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgcGxheWVyLm9mZihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5UaW1lQ2hhbmdlZCwgdXBkYXRlU2tpcE1lc3NhZ2VIYW5kbGVyKTtcbiAgICB9O1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkU3RhcnRlZCwgYWRTdGFydEhhbmRsZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BZFNraXBwZWQsIGFkRW5kSGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkRXJyb3IsIGFkRW5kSGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkRmluaXNoZWQsIGFkRW5kSGFuZGxlcik7XG5cbiAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIC8vIFRyeSB0byBza2lwIHRoZSBhZCAodGhpcyBvbmx5IHdvcmtzIGlmIGl0IGlzIHNraXBwYWJsZSBzbyB3ZSBkb24ndCBuZWVkIHRvIHRha2UgZXh0cmEgY2FyZSBvZiB0aGF0IGhlcmUpXG4gICAgICBwbGF5ZXIuYWRzLnNraXAoKTtcbiAgICB9KTtcbiAgfVxufSIsImltcG9ydCB7VG9nZ2xlQnV0dG9uLCBUb2dnbGVCdXR0b25Db25maWd9IGZyb20gJy4vdG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIGJ1dHRvbiB0aGF0IHRvZ2dsZXMgQXBwbGUgQWlyUGxheS5cbiAqXG4gKiBAY2F0ZWdvcnkgQnV0dG9uc1xuICovXG5leHBvcnQgY2xhc3MgQWlyUGxheVRvZ2dsZUJ1dHRvbiBleHRlbmRzIFRvZ2dsZUJ1dHRvbjxUb2dnbGVCdXR0b25Db25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFRvZ2dsZUJ1dHRvbkNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktYWlycGxheXRvZ2dsZWJ1dHRvbicsXG4gICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcignYXBwbGVBaXJwbGF5JyksXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGlmICghcGxheWVyLmlzQWlycGxheUF2YWlsYWJsZSkge1xuICAgICAgLy8gSWYgdGhlIHBsYXllciBkb2VzIG5vdCBzdXBwb3J0IEFpcnBsYXkgKHBsYXllciA3LjApLCB3ZSBqdXN0IGhpZGUgdGhpcyBjb21wb25lbnQgYW5kIHNraXAgY29uZmlndXJhdGlvblxuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBpZiAocGxheWVyLmlzQWlycGxheUF2YWlsYWJsZSgpKSB7XG4gICAgICAgIHBsYXllci5zaG93QWlycGxheVRhcmdldFBpY2tlcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGNvbnNvbGUpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnQWlyUGxheSB1bmF2YWlsYWJsZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBhaXJQbGF5QXZhaWxhYmxlSGFuZGxlciA9ICgpID0+IHtcbiAgICAgIGlmIChwbGF5ZXIuaXNBaXJwbGF5QXZhaWxhYmxlKCkpIHtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgYWlyUGxheUNoYW5nZWRIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgaWYgKHBsYXllci5pc0FpcnBsYXlBY3RpdmUoKSkge1xuICAgICAgICB0aGlzLm9uKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9mZigpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQWlycGxheUF2YWlsYWJsZSwgYWlyUGxheUF2YWlsYWJsZUhhbmRsZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BaXJwbGF5Q2hhbmdlZCwgYWlyUGxheUNoYW5nZWRIYW5kbGVyKTtcblxuICAgIC8vIFN0YXJ0dXAgaW5pdFxuICAgIGFpclBsYXlBdmFpbGFibGVIYW5kbGVyKCk7IC8vIEhpZGUgYnV0dG9uIGlmIEFpclBsYXkgaXMgbm90IGF2YWlsYWJsZVxuICAgIGFpclBsYXlDaGFuZ2VkSGFuZGxlcigpO1xuICB9XG59IiwiaW1wb3J0IHtTZWxlY3RCb3h9IGZyb20gJy4vc2VsZWN0Ym94JztcbmltcG9ydCB7TGlzdFNlbGVjdG9yQ29uZmlnfSBmcm9tICcuL2xpc3RzZWxlY3Rvcic7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBzZWxlY3QgYm94IHByb3ZpZGluZyBhIHNlbGVjdGlvbiBiZXR3ZWVuICdhdXRvJyBhbmQgdGhlIGF2YWlsYWJsZSBhdWRpbyBxdWFsaXRpZXMuXG4gKlxuICogQGNhdGVnb3J5IENvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGNsYXNzIEF1ZGlvUXVhbGl0eVNlbGVjdEJveCBleHRlbmRzIFNlbGVjdEJveCB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBMaXN0U2VsZWN0b3JDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzc2VzOiBbJ3VpLWF1ZGlvcXVhbGl0eXNlbGVjdGJveCddLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICBsZXQgc2VsZWN0Q3VycmVudEF1ZGlvUXVhbGl0eSA9ICgpID0+IHtcbiAgICAgIHRoaXMuc2VsZWN0SXRlbShwbGF5ZXIuZ2V0QXVkaW9RdWFsaXR5KCkuaWQpO1xuICAgIH07XG5cbiAgICBsZXQgdXBkYXRlQXVkaW9RdWFsaXRpZXMgPSAoKSA9PiB7XG4gICAgICBsZXQgYXVkaW9RdWFsaXRpZXMgPSBwbGF5ZXIuZ2V0QXZhaWxhYmxlQXVkaW9RdWFsaXRpZXMoKTtcblxuICAgICAgdGhpcy5jbGVhckl0ZW1zKCk7XG5cbiAgICAgIC8vIEFkZCBlbnRyeSBmb3IgYXV0b21hdGljIHF1YWxpdHkgc3dpdGNoaW5nIChkZWZhdWx0IHNldHRpbmcpXG4gICAgICB0aGlzLmFkZEl0ZW0oJ2F1dG8nLCBpMThuLmdldExvY2FsaXplcignYXV0bycpKTtcblxuICAgICAgLy8gQWRkIGF1ZGlvIHF1YWxpdGllc1xuICAgICAgZm9yIChsZXQgYXVkaW9RdWFsaXR5IG9mIGF1ZGlvUXVhbGl0aWVzKSB7XG4gICAgICAgIHRoaXMuYWRkSXRlbShhdWRpb1F1YWxpdHkuaWQsIGF1ZGlvUXVhbGl0eS5sYWJlbCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNlbGVjdCBpbml0aWFsIHF1YWxpdHlcbiAgICAgIHNlbGVjdEN1cnJlbnRBdWRpb1F1YWxpdHkoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5vbkl0ZW1TZWxlY3RlZC5zdWJzY3JpYmUoKHNlbmRlcjogQXVkaW9RdWFsaXR5U2VsZWN0Qm94LCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICBwbGF5ZXIuc2V0QXVkaW9RdWFsaXR5KHZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8vIFVwZGF0ZSBxdWFsaXRpZXMgd2hlbiBhdWRpbyB0cmFjayBoYXMgY2hhbmdlZFxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BdWRpb0NoYW5nZWQsIHVwZGF0ZUF1ZGlvUXVhbGl0aWVzKTtcbiAgICAvLyBVcGRhdGUgcXVhbGl0aWVzIHdoZW4gc291cmNlIGdvZXMgYXdheVxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VVbmxvYWRlZCwgdXBkYXRlQXVkaW9RdWFsaXRpZXMpO1xuICAgIC8vIFVwZGF0ZSBxdWFsaXRpZXMgd2hlbiB0aGUgcGVyaW9kIHdpdGhpbiBhIHNvdXJjZSBjaGFuZ2VzXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBlcmlvZFN3aXRjaGVkLCB1cGRhdGVBdWRpb1F1YWxpdGllcyk7XG4gICAgLy8gVXBkYXRlIHF1YWxpdHkgc2VsZWN0aW9uIHdoZW4gcXVhbGl0eSBpcyBjaGFuZ2VkIChmcm9tIG91dHNpZGUpXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkF1ZGlvUXVhbGl0eUNoYW5nZWQsIHNlbGVjdEN1cnJlbnRBdWRpb1F1YWxpdHkpO1xuICAgIGlmICgocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQgYXMgYW55KS5BdWRpb1F1YWxpdHlBZGRlZCkge1xuICAgICAgLy8gVXBkYXRlIHF1YWxpdGllcyB3aGVuIHRoZWlyIGF2YWlsYWJpbGl0eSBjaGFuZ2VkXG4gICAgICAvLyBUT0RPOiByZW1vdmUgYW55IGNhc3QgYWZ0ZXIgbmV4dCBwbGF5ZXIgcmVsZWFzZVxuICAgICAgcGxheWVyLm9uKChwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudCBhcyBhbnkpLkF1ZGlvUXVhbGl0eUFkZGVkLCB1cGRhdGVBdWRpb1F1YWxpdGllcyk7XG4gICAgICBwbGF5ZXIub24oKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50IGFzIGFueSkuQXVkaW9RdWFsaXR5UmVtb3ZlZCwgdXBkYXRlQXVkaW9RdWFsaXRpZXMpO1xuICAgIH1cblxuICAgIHVpbWFuYWdlci5nZXRDb25maWcoKS5ldmVudHMub25VcGRhdGVkLnN1YnNjcmliZSh1cGRhdGVBdWRpb1F1YWxpdGllcyk7XG4gIH1cbn0iLCJpbXBvcnQge0xpc3RCb3h9IGZyb20gJy4vbGlzdGJveCc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHtBdWRpb1RyYWNrU3dpdGNoSGFuZGxlcn0gZnJvbSAnLi4vYXVkaW90cmFja3V0aWxzJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5cbi8qKlxuICogQSBlbGVtZW50IHRoYXQgaXMgc2ltaWxhciB0byBhIHNlbGVjdCBib3ggd2hlcmUgdGhlIHVzZXIgY2FuIHNlbGVjdCBhIHN1YnRpdGxlXG4gKlxuICogQGNhdGVnb3J5IENvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGNsYXNzIEF1ZGlvVHJhY2tMaXN0Qm94IGV4dGVuZHMgTGlzdEJveCB7XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcbiAgICBuZXcgQXVkaW9UcmFja1N3aXRjaEhhbmRsZXIocGxheWVyLCB0aGlzLCB1aW1hbmFnZXIpO1xuICB9XG59XG4iLCJpbXBvcnQge1NlbGVjdEJveH0gZnJvbSAnLi9zZWxlY3Rib3gnO1xuaW1wb3J0IHtMaXN0U2VsZWN0b3JDb25maWd9IGZyb20gJy4vbGlzdHNlbGVjdG9yJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge0F1ZGlvVHJhY2tTd2l0Y2hIYW5kbGVyfSBmcm9tICcuLi9hdWRpb3RyYWNrdXRpbHMnO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcblxuLyoqXG4gKiBBIHNlbGVjdCBib3ggcHJvdmlkaW5nIGEgc2VsZWN0aW9uIGJldHdlZW4gYXZhaWxhYmxlIGF1ZGlvIHRyYWNrcyAoZS5nLiBkaWZmZXJlbnQgbGFuZ3VhZ2VzKS5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29tcG9uZW50c1xuICovXG5leHBvcnQgY2xhc3MgQXVkaW9UcmFja1NlbGVjdEJveCBleHRlbmRzIFNlbGVjdEJveCB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBMaXN0U2VsZWN0b3JDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzc2VzOiBbJ3VpLWF1ZGlvdHJhY2tzZWxlY3Rib3gnXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbmV3IEF1ZGlvVHJhY2tTd2l0Y2hIYW5kbGVyKHBsYXllciwgdGhpcywgdWltYW5hZ2VyKTtcbiAgfVxufSIsImltcG9ydCB7Q29udGFpbmVyQ29uZmlnLCBDb250YWluZXJ9IGZyb20gJy4vY29udGFpbmVyJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge0NvbXBvbmVudCwgQ29tcG9uZW50Q29uZmlnfSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQge1RpbWVvdXR9IGZyb20gJy4uL3RpbWVvdXQnO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgdGhlIHtAbGluayBCdWZmZXJpbmdPdmVybGF5fSBjb21wb25lbnQuXG4gKlxuICogQGNhdGVnb3J5IENvbmZpZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCdWZmZXJpbmdPdmVybGF5Q29uZmlnIGV4dGVuZHMgQ29udGFpbmVyQ29uZmlnIHtcbiAgLyoqXG4gICAqIERlbGF5IGluIG1pbGxpc2Vjb25kcyBhZnRlciB3aGljaCB0aGUgYnVmZmVyaW5nIG92ZXJsYXkgd2lsbCBiZSBkaXNwbGF5ZWQuIFVzZWZ1bCB0byBieXBhc3Mgc2hvcnQgc3RhbGxzIHdpdGhvdXRcbiAgICogZGlzcGxheWluZyB0aGUgb3ZlcmxheS4gU2V0IHRvIDAgdG8gZGlzcGxheSB0aGUgb3ZlcmxheSBpbnN0YW50bHkuXG4gICAqIERlZmF1bHQ6IDEwMDBtcyAoMSBzZWNvbmQpXG4gICAqL1xuICBzaG93RGVsYXlNcz86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBPdmVybGF5cyB0aGUgcGxheWVyIGFuZCBkaXNwbGF5cyBhIGJ1ZmZlcmluZyBpbmRpY2F0b3IuXG4gKlxuICogQGNhdGVnb3J5IENvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGNsYXNzIEJ1ZmZlcmluZ092ZXJsYXkgZXh0ZW5kcyBDb250YWluZXI8QnVmZmVyaW5nT3ZlcmxheUNvbmZpZz4ge1xuXG4gIHByaXZhdGUgaW5kaWNhdG9yczogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz5bXTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IEJ1ZmZlcmluZ092ZXJsYXlDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmluZGljYXRvcnMgPSBbXG4gICAgICBuZXcgQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4oeyB0YWc6ICdkaXYnLCBjc3NDbGFzczogJ3VpLWJ1ZmZlcmluZy1vdmVybGF5LWluZGljYXRvcicsIHJvbGU6ICdpbWcnIH0pLFxuICAgICAgbmV3IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+KHsgdGFnOiAnZGl2JywgY3NzQ2xhc3M6ICd1aS1idWZmZXJpbmctb3ZlcmxheS1pbmRpY2F0b3InLCByb2xlOiAnaW1nJyB9KSxcbiAgICAgIG5ldyBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPih7IHRhZzogJ2RpdicsIGNzc0NsYXNzOiAndWktYnVmZmVyaW5nLW92ZXJsYXktaW5kaWNhdG9yJywgcm9sZTogJ2ltZycgfSksXG4gICAgXTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIDxCdWZmZXJpbmdPdmVybGF5Q29uZmlnPntcbiAgICAgIGNzc0NsYXNzOiAndWktYnVmZmVyaW5nLW92ZXJsYXknLFxuICAgICAgaGlkZGVuOiB0cnVlLFxuICAgICAgY29tcG9uZW50czogdGhpcy5pbmRpY2F0b3JzLFxuICAgICAgc2hvd0RlbGF5TXM6IDEwMDAsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuXG4gICAgbGV0IG92ZXJsYXlTaG93VGltZW91dCA9IG5ldyBUaW1lb3V0KGNvbmZpZy5zaG93RGVsYXlNcywgKCkgPT4ge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfSk7XG5cbiAgICBsZXQgc2hvd092ZXJsYXkgPSAoKSA9PiB7XG4gICAgICBvdmVybGF5U2hvd1RpbWVvdXQuc3RhcnQoKTtcbiAgICB9O1xuXG4gICAgbGV0IGhpZGVPdmVybGF5ID0gKCkgPT4ge1xuICAgICAgb3ZlcmxheVNob3dUaW1lb3V0LmNsZWFyKCk7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9O1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlN0YWxsU3RhcnRlZCwgc2hvd092ZXJsYXkpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TdGFsbEVuZGVkLCBoaWRlT3ZlcmxheSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXksIHNob3dPdmVybGF5KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheWluZywgaGlkZU92ZXJsYXkpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QYXVzZWQsIGhpZGVPdmVybGF5KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU2Vlaywgc2hvd092ZXJsYXkpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TZWVrZWQsIGhpZGVPdmVybGF5KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVGltZVNoaWZ0LCBzaG93T3ZlcmxheSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlRpbWVTaGlmdGVkLCBoaWRlT3ZlcmxheSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZVVubG9hZGVkLCBoaWRlT3ZlcmxheSk7XG5cbiAgICAvLyBTaG93IG92ZXJsYXkgaWYgcGxheWVyIGlzIGFscmVhZHkgc3RhbGxlZCBhdCBpbml0XG4gICAgaWYgKHBsYXllci5pc1N0YWxsZWQoKSkge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge0NvbXBvbmVudENvbmZpZywgQ29tcG9uZW50fSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQge0RPTX0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7RXZlbnREaXNwYXRjaGVyLCBOb0FyZ3MsIEV2ZW50fSBmcm9tICcuLi9ldmVudGRpc3BhdGNoZXInO1xuaW1wb3J0IHsgTG9jYWxpemFibGVUZXh0ICwgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgYSB7QGxpbmsgQnV0dG9ufSBjb21wb25lbnQuXG4gKlxuICogQGNhdGVnb3J5IENvbmZpZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCdXR0b25Db25maWcgZXh0ZW5kcyBDb21wb25lbnRDb25maWcge1xuICAvKipcbiAgICogVGhlIHRleHQgYXMgc3RyaW5nIG9yIGxvY2FsaXplIGNhbGxiYWNrIG9uIHRoZSBidXR0b24uXG4gICAqL1xuICB0ZXh0PzogTG9jYWxpemFibGVUZXh0O1xuICAvKipcbiAgICogV0NBRzIwIHN0YW5kYXJkIGZvciBkZWZpbmluZyBpbmZvIGFib3V0IHRoZSBjb21wb25lbnQgKHVzdWFsbHkgdGhlIG5hbWUpXG4gICAqL1xuICBhcmlhTGFiZWw/OiBMb2NhbGl6YWJsZVRleHQ7XG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBmaXJzdCB0b3VjaCBldmVudCByZWNlaXZlZCBieSB0aGUge0BsaW5rIFVJQ29udGFpbmVyfSBzaG91bGQgYmUgcHJldmVudGVkIG9yIG5vdC5cbiAgICpcbiAgICogRGVmYXVsdDogZmFsc2VcbiAgICovXG4gIGFjY2VwdHNUb3VjaFdpdGhVaUhpZGRlbj86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQSBzaW1wbGUgY2xpY2thYmxlIGJ1dHRvbi5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29tcG9uZW50c1xuICovXG5leHBvcnQgY2xhc3MgQnV0dG9uPENvbmZpZyBleHRlbmRzIEJ1dHRvbkNvbmZpZz4gZXh0ZW5kcyBDb21wb25lbnQ8Q29uZmlnPiB7XG5cbiAgcHJpdmF0ZSBidXR0b25FdmVudHMgPSB7XG4gICAgb25DbGljazogbmV3IEV2ZW50RGlzcGF0Y2hlcjxCdXR0b248Q29uZmlnPiwgTm9BcmdzPigpLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktYnV0dG9uJyxcbiAgICAgIHJvbGU6ICdidXR0b24nLFxuICAgICAgdGFiSW5kZXg6IDAsXG4gICAgICBhY2NlcHRzVG91Y2hXaXRoVWlIaWRkZW46IGZhbHNlLFxuICAgIH0gYXMgQ29uZmlnLCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdG9Eb21FbGVtZW50KCk6IERPTSB7XG4gICAgY29uc3QgYnV0dG9uRWxlbWVudEF0dHJpYnV0ZXM6IHsgW25hbWU6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICAgICAgJ2lkJzogdGhpcy5jb25maWcuaWQsXG4gICAgICAnYXJpYS1sYWJlbCc6IGkxOG4ucGVyZm9ybUxvY2FsaXphdGlvbih0aGlzLmNvbmZpZy5hcmlhTGFiZWwgfHwgdGhpcy5jb25maWcudGV4dCksXG4gICAgICAnY2xhc3MnOiB0aGlzLmdldENzc0NsYXNzZXMoKSxcbiAgICAgICd0eXBlJyA6ICdidXR0b24nLFxuICAgICAgLyoqXG4gICAgICAqIFdDQUcyMCBzdGFuZGFyZCB0byBkaXNwbGF5IGlmIGEgYnV0dG9uIGlzIHByZXNzZWQgb3Igbm90XG4gICAgICAqL1xuICAgICAgJ2FyaWEtcHJlc3NlZCc6ICdmYWxzZScsXG4gICAgICAndGFiaW5kZXgnOiB0aGlzLmNvbmZpZy50YWJJbmRleC50b1N0cmluZygpLFxuICAgIH07XG5cbiAgICBpZiAodGhpcy5jb25maWcucm9sZSAhPSBudWxsKSB7XG4gICAgICBidXR0b25FbGVtZW50QXR0cmlidXRlc1sncm9sZSddID0gdGhpcy5jb25maWcucm9sZTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgdGhlIGJ1dHRvbiBlbGVtZW50IHdpdGggdGhlIHRleHQgbGFiZWxcbiAgICBsZXQgYnV0dG9uRWxlbWVudCA9IG5ldyBET00oJ2J1dHRvbicsIGJ1dHRvbkVsZW1lbnRBdHRyaWJ1dGVzLCB0aGlzKS5hcHBlbmQobmV3IERPTSgnc3BhbicsIHtcbiAgICAgICdjbGFzcyc6IHRoaXMucHJlZml4Q3NzKCdsYWJlbCcpLFxuICAgIH0pLmh0bWwoaTE4bi5wZXJmb3JtTG9jYWxpemF0aW9uKHRoaXMuY29uZmlnLnRleHQpKSk7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHRoZSBjbGljayBldmVudCBvbiB0aGUgYnV0dG9uIGVsZW1lbnQgYW5kIHRyaWdnZXIgdGhlIGNvcnJlc3BvbmRpbmcgZXZlbnQgb24gdGhlIGJ1dHRvbiBjb21wb25lbnRcbiAgICBidXR0b25FbGVtZW50Lm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgIHRoaXMub25DbGlja0V2ZW50KCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYnV0dG9uRWxlbWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRleHQgb24gdGhlIGxhYmVsIG9mIHRoZSBidXR0b24uXG4gICAqIEBwYXJhbSB0ZXh0IHRoZSB0ZXh0IHRvIHB1dCBpbnRvIHRoZSBsYWJlbCBvZiB0aGUgYnV0dG9uXG4gICAqL1xuICBzZXRUZXh0KHRleHQ6IExvY2FsaXphYmxlVGV4dCk6IHZvaWQge1xuICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmZpbmQoJy4nICsgdGhpcy5wcmVmaXhDc3MoJ2xhYmVsJykpLmh0bWwoaTE4bi5wZXJmb3JtTG9jYWxpemF0aW9uKHRleHQpKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkNsaWNrRXZlbnQoKSB7XG4gICAgdGhpcy5idXR0b25FdmVudHMub25DbGljay5kaXNwYXRjaCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkLlxuICAgKiBAcmV0dXJucyB7RXZlbnQ8QnV0dG9uPENvbmZpZz4sIE5vQXJncz59XG4gICAqL1xuICBnZXQgb25DbGljaygpOiBFdmVudDxCdXR0b248Q29uZmlnPiwgTm9BcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuYnV0dG9uRXZlbnRzLm9uQ2xpY2suZ2V0RXZlbnQoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtDb250YWluZXJDb25maWcsIENvbnRhaW5lcn0gZnJvbSAnLi9jb250YWluZXInO1xuaW1wb3J0IHtMYWJlbCwgTGFiZWxDb25maWd9IGZyb20gJy4vbGFiZWwnO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IENhc3RTdGFydGVkRXZlbnQsIENhc3RXYWl0aW5nRm9yRGV2aWNlRXZlbnQsIFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIE92ZXJsYXlzIHRoZSBwbGF5ZXIgYW5kIGRpc3BsYXlzIHRoZSBzdGF0dXMgb2YgYSBDYXN0IHNlc3Npb24uXG4gKlxuICogQGNhdGVnb3J5IENvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGNsYXNzIENhc3RTdGF0dXNPdmVybGF5IGV4dGVuZHMgQ29udGFpbmVyPENvbnRhaW5lckNvbmZpZz4ge1xuXG4gIHByaXZhdGUgc3RhdHVzTGFiZWw6IExhYmVsPExhYmVsQ29uZmlnPjtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbnRhaW5lckNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuc3RhdHVzTGFiZWwgPSBuZXcgTGFiZWw8TGFiZWxDb25maWc+KHsgY3NzQ2xhc3M6ICd1aS1jYXN0LXN0YXR1cy1sYWJlbCcgfSk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLWNhc3Qtc3RhdHVzLW92ZXJsYXknLFxuICAgICAgY29tcG9uZW50czogW3RoaXMuc3RhdHVzTGFiZWxdLFxuICAgICAgaGlkZGVuOiB0cnVlLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQ2FzdFdhaXRpbmdGb3JEZXZpY2UsXG4gICAgICAoZXZlbnQ6IENhc3RXYWl0aW5nRm9yRGV2aWNlRXZlbnQpID0+IHtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgIC8vIEdldCBkZXZpY2UgbmFtZSBhbmQgdXBkYXRlIHN0YXR1cyB0ZXh0IHdoaWxlIGNvbm5lY3RpbmdcbiAgICAgICAgbGV0IGNhc3REZXZpY2VOYW1lID0gZXZlbnQuY2FzdFBheWxvYWQuZGV2aWNlTmFtZTtcbiAgICAgICAgdGhpcy5zdGF0dXNMYWJlbC5zZXRUZXh0KGkxOG4uZ2V0TG9jYWxpemVyKCdjb25uZWN0aW5nVG8nLCB7IGNhc3REZXZpY2VOYW1lIH0pKTtcbiAgICAgIH0pO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5DYXN0U3RhcnRlZCwgKGV2ZW50OiBDYXN0U3RhcnRlZEV2ZW50KSA9PiB7XG4gICAgICAvLyBTZXNzaW9uIGlzIHN0YXJ0ZWQgb3IgcmVzdW1lZFxuICAgICAgLy8gRm9yIGNhc2VzIHdoZW4gYSBzZXNzaW9uIGlzIHJlc3VtZWQsIHdlIGRvIG5vdCByZWNlaXZlIHRoZSBwcmV2aW91cyBldmVudHMgYW5kIHRoZXJlZm9yZSBzaG93IHRoZSBzdGF0dXMgcGFuZWxcbiAgICAgIC8vIGhlcmUgdG9vXG4gICAgICB0aGlzLnNob3coKTtcbiAgICAgIGxldCBjYXN0RGV2aWNlTmFtZSA9IGV2ZW50LmRldmljZU5hbWU7XG4gICAgICB0aGlzLnN0YXR1c0xhYmVsLnNldFRleHQoaTE4bi5nZXRMb2NhbGl6ZXIoJ3BsYXlpbmdPbicsIHsgY2FzdERldmljZU5hbWUgfSkpO1xuICAgIH0pO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5DYXN0U3RvcHBlZCwgKGV2ZW50KSA9PiB7XG4gICAgICAvLyBDYXN0IHNlc3Npb24gZ29uZSwgaGlkZSB0aGUgc3RhdHVzIHBhbmVsXG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9KTtcbiAgfVxufSIsImltcG9ydCB7VG9nZ2xlQnV0dG9uLCBUb2dnbGVCdXR0b25Db25maWd9IGZyb20gJy4vdG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIGJ1dHRvbiB0aGF0IHRvZ2dsZXMgY2FzdGluZyB0byBhIENhc3QgcmVjZWl2ZXIuXG4gKlxuICogQGNhdGVnb3J5IEJ1dHRvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIENhc3RUb2dnbGVCdXR0b24gZXh0ZW5kcyBUb2dnbGVCdXR0b248VG9nZ2xlQnV0dG9uQ29uZmlnPiB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogVG9nZ2xlQnV0dG9uQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKFxuICAgICAgY29uZmlnLFxuICAgICAge1xuICAgICAgICBjc3NDbGFzczogJ3VpLWNhc3R0b2dnbGVidXR0b24nLFxuICAgICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcignZ29vZ2xlQ2FzdCcpLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29uZmlnLFxuICAgICk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBpZiAoIXBsYXllci5pc0Nhc3RBdmFpbGFibGUoKSkge1xuICAgICAgICBwbGF5ZXIuY2FzdFZpZGVvKCk7XG4gICAgICAgIGlmIChjb25zb2xlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ0Nhc3QgdW5hdmFpbGFibGUnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChwbGF5ZXIuaXNDYXN0aW5nKCkpIHtcbiAgICAgICAgcGxheWVyLmNhc3RTdG9wKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwbGF5ZXIuY2FzdFZpZGVvKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBUb2dnbGUgYnV0dG9uICdvbicgc3RhdGVcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQ2FzdFdhaXRpbmdGb3JEZXZpY2UsICgpID0+IHtcbiAgICAgIHRoaXMub24oKTtcbiAgICB9KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQ2FzdFN0YXJ0ZWQsICgpID0+IHtcbiAgICAgIC8vIFdoZW4gYSBzZXNzaW9uIGlzIHJlc3VtZWQsIHRoZXJlIGlzIG5vIENhc3RTdGFydCBldmVudCwgc28gd2UgYWxzbyBuZWVkIHRvIHRvZ2dsZSBoZXJlIGZvciBzdWNoIGNhc2VzXG4gICAgICB0aGlzLm9uKCk7XG4gICAgfSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkNhc3RTdG9wcGVkLCAoKSA9PiB7XG4gICAgICB0aGlzLm9mZigpO1xuICAgIH0pO1xuXG4gICAgLy8gU3RhcnR1cCBpbml0XG4gICAgaWYgKHBsYXllci5pc0Nhc3RpbmcoKSkge1xuICAgICAgdGhpcy5vbigpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHtVSUNvbnRhaW5lciwgVUlDb250YWluZXJDb25maWd9IGZyb20gJy4vdWljb250YWluZXInO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7VGltZW91dH0gZnJvbSAnLi4vdGltZW91dCc7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuXG4vKipcbiAqIFRoZSBiYXNlIGNvbnRhaW5lciBmb3IgQ2FzdCByZWNlaXZlcnMgdGhhdCBjb250YWlucyBhbGwgb2YgdGhlIFVJIGFuZCB0YWtlcyBjYXJlIHRoYXQgdGhlIFVJIGlzIHNob3duIG9uXG4gKiBjZXJ0YWluIHBsYXliYWNrIGV2ZW50cy5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29udGFpbmVyc1xuICovXG5leHBvcnQgY2xhc3MgQ2FzdFVJQ29udGFpbmVyIGV4dGVuZHMgVUlDb250YWluZXIge1xuXG4gIHByaXZhdGUgY2FzdFVpSGlkZVRpbWVvdXQ6IFRpbWVvdXQ7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBVSUNvbnRhaW5lckNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbGV0IGNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG5cbiAgICAvKlxuICAgICAqIFNob3cgVUkgb24gQ2FzdCBkZXZpY2VzIGF0IGNlcnRhaW4gcGxheWJhY2sgZXZlbnRzXG4gICAgICpcbiAgICAgKiBTaW5jZSBhIENhc3QgcmVjZWl2ZXIgZG9lcyBub3QgaGF2ZSBhIGRpcmVjdCBIQ0ksIHdlIHNob3cgdGhlIFVJIG9uIGNlcnRhaW4gcGxheWJhY2sgZXZlbnRzIHRvIGdpdmUgdGhlIHVzZXJcbiAgICAgKiBhIGNoYW5jZSB0byBzZWUgb24gdGhlIHNjcmVlbiB3aGF0J3MgZ29pbmcgb24sIGUuZy4gb24gcGxheS9wYXVzZSBvciBhIHNlZWsgdGhlIFVJIGlzIHNob3duIGFuZCB0aGUgdXNlciBjYW5cbiAgICAgKiBzZWUgdGhlIGN1cnJlbnQgdGltZSBhbmQgcG9zaXRpb24gb24gdGhlIHNlZWsgYmFyLlxuICAgICAqIFRoZSBVSSBpcyBzaG93biBwZXJtYW5lbnRseSB3aGlsZSBwbGF5YmFjayBpcyBwYXVzZWQsIG90aGVyd2lzZSBoaWRlcyBhdXRvbWF0aWNhbGx5IGFmdGVyIHRoZSBjb25maWd1cmVkXG4gICAgICogaGlkZSBkZWxheSB0aW1lLlxuICAgICAqL1xuXG4gICAgbGV0IGlzVWlTaG93biA9IGZhbHNlO1xuXG4gICAgbGV0IGhpZGVVaSA9ICgpID0+IHtcbiAgICAgIHVpbWFuYWdlci5vbkNvbnRyb2xzSGlkZS5kaXNwYXRjaCh0aGlzKTtcbiAgICAgIGlzVWlTaG93biA9IGZhbHNlO1xuICAgIH07XG5cbiAgICB0aGlzLmNhc3RVaUhpZGVUaW1lb3V0ID0gbmV3IFRpbWVvdXQoY29uZmlnLmhpZGVEZWxheSwgaGlkZVVpKTtcblxuICAgIGxldCBzaG93VWkgPSAoKSA9PiB7XG4gICAgICBpZiAoIWlzVWlTaG93bikge1xuICAgICAgICB1aW1hbmFnZXIub25Db250cm9sc1Nob3cuZGlzcGF0Y2godGhpcyk7XG4gICAgICAgIGlzVWlTaG93biA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGxldCBzaG93VWlQZXJtYW5lbnRseSA9ICgpID0+IHtcbiAgICAgIHNob3dVaSgpO1xuICAgICAgdGhpcy5jYXN0VWlIaWRlVGltZW91dC5jbGVhcigpO1xuICAgIH07XG5cbiAgICBsZXQgc2hvd1VpV2l0aFRpbWVvdXQgPSAoKSA9PiB7XG4gICAgICBzaG93VWkoKTtcbiAgICAgIHRoaXMuY2FzdFVpSGlkZVRpbWVvdXQuc3RhcnQoKTtcbiAgICB9O1xuXG4gICAgbGV0IHNob3dVaUFmdGVyU2VlayA9ICgpID0+IHtcbiAgICAgIGlmIChwbGF5ZXIuaXNQbGF5aW5nKCkpIHtcbiAgICAgICAgc2hvd1VpV2l0aFRpbWVvdXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNob3dVaVBlcm1hbmVudGx5KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5LCBzaG93VWlXaXRoVGltZW91dCk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBhdXNlZCwgc2hvd1VpUGVybWFuZW50bHkpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TZWVrLCBzaG93VWlQZXJtYW5lbnRseSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNlZWtlZCwgc2hvd1VpQWZ0ZXJTZWVrKTtcblxuICAgIHVpbWFuYWdlci5nZXRDb25maWcoKS5ldmVudHMub25VcGRhdGVkLnN1YnNjcmliZShzaG93VWlXaXRoVGltZW91dCk7XG4gIH1cblxuICByZWxlYXNlKCk6IHZvaWQge1xuICAgIHN1cGVyLnJlbGVhc2UoKTtcbiAgICB0aGlzLmNhc3RVaUhpZGVUaW1lb3V0LmNsZWFyKCk7XG4gIH1cbn0iLCJpbXBvcnQge0J1dHRvbiwgQnV0dG9uQ29uZmlnfSBmcm9tICcuL2J1dHRvbic7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIGEge0BsaW5rIENsaWNrT3ZlcmxheX0uXG4gKlxuICogQGNhdGVnb3J5IENvbmZpZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDbGlja092ZXJsYXlDb25maWcgZXh0ZW5kcyBCdXR0b25Db25maWcge1xuICAvKipcbiAgICogVGhlIHVybCB0byBvcGVuIHdoZW4gdGhlIG92ZXJsYXkgaXMgY2xpY2tlZC4gU2V0IHRvIG51bGwgdG8gZGlzYWJsZSB0aGUgY2xpY2sgaGFuZGxlci5cbiAgICovXG4gIHVybD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBBIGNsaWNrIG92ZXJsYXkgdGhhdCBvcGVucyBhbiB1cmwgaW4gYSBuZXcgdGFiIGlmIGNsaWNrZWQuXG4gKlxuICogQGNhdGVnb3J5IENvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGNsYXNzIENsaWNrT3ZlcmxheSBleHRlbmRzIEJ1dHRvbjxDbGlja092ZXJsYXlDb25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IENsaWNrT3ZlcmxheUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktY2xpY2tvdmVybGF5JyxcbiAgICAgIHJvbGU6IHRoaXMuY29uZmlnLnJvbGUsXG4gICAgfSwgPENsaWNrT3ZlcmxheUNvbmZpZz50aGlzLmNvbmZpZyk7XG4gIH1cblxuICBpbml0aWFsaXplKCk6IHZvaWQge1xuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcblxuICAgIHRoaXMuc2V0VXJsKCg8Q2xpY2tPdmVybGF5Q29uZmlnPnRoaXMuY29uZmlnKS51cmwpO1xuICAgIGxldCBlbGVtZW50ID0gdGhpcy5nZXREb21FbGVtZW50KCk7XG4gICAgZWxlbWVudC5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICBpZiAoZWxlbWVudC5kYXRhKCd1cmwnKSkge1xuICAgICAgICB3aW5kb3cub3BlbihlbGVtZW50LmRhdGEoJ3VybCcpLCAnX2JsYW5rJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgVVJMIHRoYXQgc2hvdWxkIGJlIGZvbGxvd2VkIHdoZW4gdGhlIHdhdGVybWFyayBpcyBjbGlja2VkLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgd2F0ZXJtYXJrIFVSTFxuICAgKi9cbiAgZ2V0VXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmRhdGEoJ3VybCcpO1xuICB9XG5cbiAgc2V0VXJsKHVybDogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHVybCA9PT0gdW5kZWZpbmVkIHx8IHVybCA9PSBudWxsKSB7XG4gICAgICB1cmwgPSAnJztcbiAgICB9XG4gICAgdGhpcy5nZXREb21FbGVtZW50KCkuZGF0YSgndXJsJywgdXJsKTtcbiAgfVxufSIsImltcG9ydCB7QnV0dG9uQ29uZmlnLCBCdXR0b259IGZyb20gJy4vYnV0dG9uJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge0NvbXBvbmVudCwgQ29tcG9uZW50Q29uZmlnfSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgdGhlIHtAbGluayBDbG9zZUJ1dHRvbn0uXG4gKlxuICogQGNhdGVnb3J5IENvbmZpZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDbG9zZUJ1dHRvbkNvbmZpZyBleHRlbmRzIEJ1dHRvbkNvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHRoYXQgc2hvdWxkIGJlIGNsb3NlZCB3aGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZC5cbiAgICovXG4gIHRhcmdldDogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz47XG59XG5cbi8qKlxuICogQSBidXR0b24gdGhhdCBjbG9zZXMgKGhpZGVzKSBhIGNvbmZpZ3VyZWQgY29tcG9uZW50LlxuICpcbiAqIEBjYXRlZ29yeSBCdXR0b25zXG4gKi9cbmV4cG9ydCBjbGFzcyBDbG9zZUJ1dHRvbiBleHRlbmRzIEJ1dHRvbjxDbG9zZUJ1dHRvbkNvbmZpZz4ge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQ2xvc2VCdXR0b25Db25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1jbG9zZWJ1dHRvbicsXG4gICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcignY2xvc2UnKSxcbiAgICB9IGFzIENsb3NlQnV0dG9uQ29uZmlnLCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbGV0IGNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG5cbiAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGNvbmZpZy50YXJnZXQuaGlkZSgpO1xuICAgIH0pO1xuICB9XG59IiwiaW1wb3J0IHtHdWlkfSBmcm9tICcuLi9ndWlkJztcbmltcG9ydCB7RE9NfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHtFdmVudERpc3BhdGNoZXIsIE5vQXJncywgRXZlbnR9IGZyb20gJy4uL2V2ZW50ZGlzcGF0Y2hlcic7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4sIExvY2FsaXphYmxlVGV4dCB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBCYXNlIGNvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIGZvciBhIGNvbXBvbmVudC5cbiAqIFNob3VsZCBiZSBleHRlbmRlZCBieSBjb21wb25lbnRzIHRoYXQgd2FudCB0byBhZGQgYWRkaXRpb25hbCBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gKlxuICogQGNhdGVnb3J5IENvbmZpZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb21wb25lbnRDb25maWcge1xuICAvKipcbiAgICogVGhlIEhUTUwgdGFnIG5hbWUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICogRGVmYXVsdDogJ2RpdidcbiAgICovXG4gIHRhZz86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBIVE1MIElEIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIERlZmF1bHQ6IGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIHdpdGggcGF0dGVybiAndWktaWQte2d1aWR9Jy5cbiAgICovXG4gIGlkPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBIHByZWZpeCB0byBwcmVwZW5kIGFsbCBDU1MgY2xhc3NlcyB3aXRoLlxuICAgKi9cbiAgY3NzUHJlZml4Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzZXMgb2YgdGhlIGNvbXBvbmVudC4gVGhpcyBpcyB1c3VhbGx5IHRoZSBjbGFzcyBmcm9tIHdoZXJlIHRoZSBjb21wb25lbnQgdGFrZXMgaXRzIHN0eWxpbmcuXG4gICAqL1xuICBjc3NDbGFzcz86IHN0cmluZzsgLy8gJ2NsYXNzJyBpcyBhIHJlc2VydmVkIGtleXdvcmQsIHNvIHdlIG5lZWQgdG8gbWFrZSB0aGUgbmFtZSBtb3JlIGNvbXBsaWNhdGVkXG5cbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgQ1NTIGNsYXNzZXMgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNzc0NsYXNzZXM/OiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogU3BlY2lmaWVzIGlmIHRoZSBjb21wb25lbnQgc2hvdWxkIGJlIGhpZGRlbiBhdCBzdGFydHVwLlxuICAgKiBEZWZhdWx0OiBmYWxzZVxuICAgKi9cbiAgaGlkZGVuPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogU3BlY2lmaWVzIGlmIHRoZSBjb21wb25lbnQgaXMgZW5hYmxlZCAoaW50ZXJhY3RpdmUpIG9yIG5vdC5cbiAgICogRGVmYXVsdDogZmFsc2VcbiAgICovXG4gIGRpc2FibGVkPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSBjb21wb25lbnQgcm9sZSBmb3IgV0NBRzIwIHN0YW5kYXJkXG4gICAqL1xuICByb2xlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBXQ0FHMjAgcmVxdWlyZW1lbnQgZm9yIHNjcmVlbiByZWFkZXIgbmF2aWdhdGlvblxuICAgKi9cbiAgdGFiSW5kZXg/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFdDQUcyMCBzdGFuZGFyZCBmb3IgZGVmaW5pbmcgaW5mbyBhYm91dCB0aGUgY29tcG9uZW50ICh1c3VhbGx5IHRoZSBuYW1lKVxuICAgKi9cbiAgYXJpYUxhYmVsPzogTG9jYWxpemFibGVUZXh0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBvbmVudEhvdmVyQ2hhbmdlZEV2ZW50QXJncyBleHRlbmRzIE5vQXJncyB7XG4gIC8qKlxuICAgKiBUcnVlIGlzIHRoZSBjb21wb25lbnQgaXMgaG92ZXJlZCwgZWxzZSBmYWxzZS5cbiAgICovXG4gIGhvdmVyZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBlbnVtIFZpZXdNb2RlIHtcbiAgLyoqXG4gICAqIEluZGljYXRlcyB0aGF0IHRoZSBjb21wb25lbnQgaGFzIGVudGVyZWQgYSB2aWV3IG1vZGUgd2hlcmUgaXQgbXVzdCBzdGF5IHZpc2libGUuIEF1dG8taGlkaW5nIG9mIHRoaXMgY29tcG9uZW50XG4gICAqIG11c3QgYmUgZGlzYWJsZWQgYXMgbG9uZyBhcyBpdCByZXNpZGVzIGluIHRoaXMgc3RhdGUuXG4gICAqL1xuICBQZXJzaXN0ZW50ID0gJ3BlcnNpc3RlbnQnLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udHJvbCBjYW4gYmUgaGlkZGVuIGF0IGFueSB0aW1lLlxuICAgKi9cbiAgVGVtcG9yYXJ5ID0gJ3RlbXBvcmFyeScsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmlld01vZGVDaGFuZ2VkRXZlbnRBcmdzIGV4dGVuZHMgTm9BcmdzIHtcbiAgLyoqXG4gICAqIFRoZSBgVmlld01vZGVgIHRoZSBjb250cm9sIGlzIGN1cnJlbnRseSBpbi5cbiAgICovXG4gIG1vZGU6IFZpZXdNb2RlO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGNsYXNzIG9mIHRoZSBVSSBmcmFtZXdvcmsuXG4gKiBFYWNoIGNvbXBvbmVudCBtdXN0IGV4dGVuZCB0aGlzIGNsYXNzIGFuZCBvcHRpb25hbGx5IHRoZSBjb25maWcgaW50ZXJmYWNlLlxuICpcbiAqIEBjYXRlZ29yeSBDb21wb25lbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21wb25lbnQ8Q29uZmlnIGV4dGVuZHMgQ29tcG9uZW50Q29uZmlnPiB7XG5cbiAgLyoqXG4gICAqIFRoZSBjbGFzc25hbWUgdGhhdCBpcyBhdHRhY2hlZCB0byB0aGUgZWxlbWVudCB3aGVuIGl0IGlzIGluIHRoZSBoaWRkZW4gc3RhdGUuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDTEFTU19ISURERU4gPSAnaGlkZGVuJztcblxuICAvKipcbiAgICogVGhlIGNsYXNzbmFtZSB0aGF0IGlzIGF0dGFjaGVkIHRvIHRoZSBlbGVtZW50IHdoZW4gaXQgaXMgaW4gdGhlIGRpc2FibGVkIHN0YXRlLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ0xBU1NfRElTQUJMRUQgPSAnZGlzYWJsZWQnO1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIG9iamVjdCBvZiB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHByb3RlY3RlZCBjb25maWc6IENvbmZpZztcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCdzIERPTSBlbGVtZW50LlxuICAgKi9cbiAgcHJpdmF0ZSBlbGVtZW50OiBET007XG5cbiAgLyoqXG4gICAqIEZsYWcgdGhhdCBrZWVwcyB0cmFjayBvZiB0aGUgaGlkZGVuIHN0YXRlLlxuICAgKi9cbiAgcHJpdmF0ZSBoaWRkZW46IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEZsYXQgdGhhdCBrZWVwcyB0cmFjayBvZiB0aGUgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBwcml2YXRlIGRpc2FibGVkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBGbGFnIHRoYXQga2VlcHMgdHJhY2sgb2YgdGhlIGhvdmVyIHN0YXRlLlxuICAgKi9cbiAgcHJpdmF0ZSBob3ZlcmVkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCB2aWV3IG1vZGUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIHByaXZhdGUgdmlld01vZGU6IFZpZXdNb2RlO1xuXG4gIC8qKlxuICAgKiBUaGUgbGlzdCBvZiBldmVudHMgdGhhdCB0aGlzIGNvbXBvbmVudCBvZmZlcnMuIFRoZXNlIGV2ZW50cyBzaG91bGQgYWx3YXlzIGJlIHByaXZhdGUgYW5kIG9ubHkgZGlyZWN0bHlcbiAgICogYWNjZXNzZWQgZnJvbSB3aXRoaW4gdGhlIGltcGxlbWVudGluZyBjb21wb25lbnQuXG4gICAqXG4gICAqIEJlY2F1c2UgVHlwZVNjcmlwdCBkb2VzIG5vdCBzdXBwb3J0IHByaXZhdGUgcHJvcGVydGllcyB3aXRoIHRoZSBzYW1lIG5hbWUgb24gZGlmZmVyZW50IGNsYXNzIGhpZXJhcmNoeSBsZXZlbHNcbiAgICogKGkuZS4gc3VwZXJjbGFzcyBhbmQgc3ViY2xhc3MgY2Fubm90IGNvbnRhaW4gYSBwcml2YXRlIHByb3BlcnR5IHdpdGggdGhlIHNhbWUgbmFtZSksIHRoZSBkZWZhdWx0IG5hbWluZ1xuICAgKiBjb252ZW50aW9uIGZvciB0aGUgZXZlbnQgbGlzdCBvZiBhIGNvbXBvbmVudCB0aGF0IHNob3VsZCBiZSBmb2xsb3dlZCBieSBzdWJjbGFzc2VzIGlzIHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZVxuICAgKiBjYW1lbC1jYXNlZCBjbGFzcyBuYW1lICsgJ0V2ZW50cycgKGUuZy4gU3ViQ2xhc3MgZXh0ZW5kcyBDb21wb25lbnQgPT4gc3ViQ2xhc3NFdmVudHMpLlxuICAgKiBTZWUge0BsaW5rICNjb21wb25lbnRFdmVudHN9IGZvciBhbiBleGFtcGxlLlxuICAgKlxuICAgKiBFdmVudCBwcm9wZXJ0aWVzIHNob3VsZCBiZSBuYW1lZCBpbiBjYW1lbCBjYXNlIHdpdGggYW4gJ29uJyBwcmVmaXggYW5kIGluIHRoZSBwcmVzZW50IHRlbnNlLiBBc3luYyBldmVudHMgbWF5XG4gICAqIGhhdmUgYSBzdGFydCBldmVudCAod2hlbiB0aGUgb3BlcmF0aW9uIHN0YXJ0cykgaW4gdGhlIHByZXNlbnQgdGVuc2UsIGFuZCBtdXN0IGhhdmUgYW4gZW5kIGV2ZW50ICh3aGVuIHRoZVxuICAgKiBvcGVyYXRpb24gZW5kcykgaW4gdGhlIHBhc3QgdGVuc2UgKG9yIHByZXNlbnQgdGVuc2UgaW4gc3BlY2lhbCBjYXNlcyAoZS5nLiBvblN0YXJ0L29uU3RhcnRlZCBvciBvblBsYXkvb25QbGF5aW5nKS5cbiAgICogU2VlIHtAbGluayAjY29tcG9uZW50RXZlbnRzI29uU2hvd30gZm9yIGFuIGV4YW1wbGUuXG4gICAqXG4gICAqIEVhY2ggZXZlbnQgc2hvdWxkIGJlIGFjY29tcGFuaWVkIHdpdGggYSBwcm90ZWN0ZWQgbWV0aG9kIG5hbWVkIGJ5IHRoZSBjb252ZW50aW9uIGV2ZW50TmFtZSArICdFdmVudCdcbiAgICogKGUuZy4gb25TdGFydEV2ZW50KSwgdGhhdCBhY3R1YWxseSB0cmlnZ2VycyB0aGUgZXZlbnQgYnkgY2FsbGluZyB7QGxpbmsgRXZlbnREaXNwYXRjaGVyI2Rpc3BhdGNoIGRpc3BhdGNofSBhbmRcbiAgICogcGFzc2luZyBhIHJlZmVyZW5jZSB0byB0aGUgY29tcG9uZW50IGFzIGZpcnN0IHBhcmFtZXRlci4gQ29tcG9uZW50cyBzaG91bGQgYWx3YXlzIHRyaWdnZXIgdGhlaXIgZXZlbnRzIHdpdGggdGhlc2VcbiAgICogbWV0aG9kcy4gSW1wbGVtZW50aW5nIHRoaXMgcGF0dGVybiBnaXZlcyBzdWJjbGFzc2VzIG1lYW5zIHRvIGRpcmVjdGx5IGxpc3RlbiB0byB0aGUgZXZlbnRzIGJ5IG92ZXJyaWRpbmcgdGhlXG4gICAqIG1ldGhvZCAoYW5kIHNhdmluZyB0aGUgb3ZlcmhlYWQgb2YgcGFzc2luZyBhIGhhbmRsZXIgdG8gdGhlIGV2ZW50IGRpc3BhdGNoZXIpIGFuZCBtb3JlIGltcG9ydGFudGx5IHRvIHRyaWdnZXJcbiAgICogdGhlc2UgZXZlbnRzIHdpdGhvdXQgaGF2aW5nIGFjY2VzcyB0byB0aGUgcHJpdmF0ZSBldmVudCBsaXN0LlxuICAgKiBTZWUge0BsaW5rICNvblNob3d9IGZvciBhbiBleGFtcGxlLlxuICAgKlxuICAgKiBUbyBwcm92aWRlIGV4dGVybmFsIGNvZGUgdGhlIHBvc3NpYmlsaXR5IHRvIGxpc3RlbiB0byB0aGlzIGNvbXBvbmVudCdzIGV2ZW50cyAoc3Vic2NyaWJlLCB1bnN1YnNjcmliZSwgZXRjLiksXG4gICAqIGVhY2ggZXZlbnQgc2hvdWxkIGFsc28gYmUgYWNjb21wYW5pZWQgYnkgYSBwdWJsaWMgZ2V0dGVyIGZ1bmN0aW9uIHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQncyBwcm9wZXJ0eSxcbiAgICogdGhhdCByZXR1cm5zIHRoZSB7QGxpbmsgRXZlbnR9IG9idGFpbmVkIGZyb20gdGhlIGV2ZW50IGRpc3BhdGNoZXIgYnkgY2FsbGluZyB7QGxpbmsgRXZlbnREaXNwYXRjaGVyI2dldEV2ZW50fS5cbiAgICogU2VlIHtAbGluayAjb25TaG93fSBmb3IgYW4gZXhhbXBsZS5cbiAgICpcbiAgICogRnVsbCBleGFtcGxlIGZvciBhbiBldmVudCByZXByZXNlbnRpbmcgYW4gZXhhbXBsZSBhY3Rpb24gaW4gYSBleGFtcGxlIGNvbXBvbmVudDpcbiAgICpcbiAgICogPGNvZGU+XG4gICAqIC8vIERlZmluZSBhbiBleGFtcGxlIGNvbXBvbmVudCBjbGFzcyB3aXRoIGFuIGV4YW1wbGUgZXZlbnRcbiAgICogY2xhc3MgRXhhbXBsZUNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudDxDb21wb25lbnRDb25maWc+IHtcbiAgICAgKlxuICAgICAqICAgICBwcml2YXRlIGV4YW1wbGVDb21wb25lbnRFdmVudHMgPSB7XG4gICAgICogICAgICAgICBvbkV4YW1wbGVBY3Rpb246IG5ldyBFdmVudERpc3BhdGNoZXI8RXhhbXBsZUNvbXBvbmVudCwgTm9BcmdzPigpXG4gICAgICogICAgIH1cbiAgICAgKlxuICAgICAqICAgICAvLyBjb25zdHJ1Y3RvciBhbmQgb3RoZXIgc3R1ZmYuLi5cbiAgICAgKlxuICAgICAqICAgICBwcm90ZWN0ZWQgb25FeGFtcGxlQWN0aW9uRXZlbnQoKSB7XG4gICAgICogICAgICAgIHRoaXMuZXhhbXBsZUNvbXBvbmVudEV2ZW50cy5vbkV4YW1wbGVBY3Rpb24uZGlzcGF0Y2godGhpcyk7XG4gICAgICogICAgfVxuICAgICAqXG4gICAgICogICAgZ2V0IG9uRXhhbXBsZUFjdGlvbigpOiBFdmVudDxFeGFtcGxlQ29tcG9uZW50LCBOb0FyZ3M+IHtcbiAgICAgKiAgICAgICAgcmV0dXJuIHRoaXMuZXhhbXBsZUNvbXBvbmVudEV2ZW50cy5vbkV4YW1wbGVBY3Rpb24uZ2V0RXZlbnQoKTtcbiAgICAgKiAgICB9XG4gICAgICogfVxuICAgKlxuICAgKiAvLyBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhlIGNvbXBvbmVudCBzb21ld2hlcmVcbiAgICogdmFyIGV4YW1wbGVDb21wb25lbnRJbnN0YW5jZSA9IG5ldyBFeGFtcGxlQ29tcG9uZW50KCk7XG4gICAqXG4gICAqIC8vIFN1YnNjcmliZSB0byB0aGUgZXhhbXBsZSBldmVudCBvbiB0aGUgY29tcG9uZW50XG4gICAqIGV4YW1wbGVDb21wb25lbnRJbnN0YW5jZS5vbkV4YW1wbGVBY3Rpb24uc3Vic2NyaWJlKGZ1bmN0aW9uIChzZW5kZXI6IEV4YW1wbGVDb21wb25lbnQpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ29uRXhhbXBsZUFjdGlvbiBvZiAnICsgc2VuZGVyICsgJyBoYXMgZmlyZWQhJyk7XG4gICAgICogfSk7XG4gICAqIDwvY29kZT5cbiAgICovXG4gIHByaXZhdGUgY29tcG9uZW50RXZlbnRzID0ge1xuICAgIG9uU2hvdzogbmV3IEV2ZW50RGlzcGF0Y2hlcjxDb21wb25lbnQ8Q29uZmlnPiwgTm9BcmdzPigpLFxuICAgIG9uSGlkZTogbmV3IEV2ZW50RGlzcGF0Y2hlcjxDb21wb25lbnQ8Q29uZmlnPiwgTm9BcmdzPigpLFxuICAgIG9uVmlld01vZGVDaGFuZ2VkOiBuZXcgRXZlbnREaXNwYXRjaGVyPENvbXBvbmVudDxDb25maWc+LCBWaWV3TW9kZUNoYW5nZWRFdmVudEFyZ3M+KCksXG4gICAgb25Ib3ZlckNoYW5nZWQ6IG5ldyBFdmVudERpc3BhdGNoZXI8Q29tcG9uZW50PENvbmZpZz4sIENvbXBvbmVudEhvdmVyQ2hhbmdlZEV2ZW50QXJncz4oKSxcbiAgICBvbkVuYWJsZWQ6IG5ldyBFdmVudERpc3BhdGNoZXI8Q29tcG9uZW50PENvbmZpZz4sIE5vQXJncz4oKSxcbiAgICBvbkRpc2FibGVkOiBuZXcgRXZlbnREaXNwYXRjaGVyPENvbXBvbmVudDxDb25maWc+LCBOb0FyZ3M+KCksXG4gIH07XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBjb21wb25lbnQgd2l0aCBhbiBvcHRpb25hbGx5IHN1cHBsaWVkIGNvbmZpZy4gQWxsIHN1YmNsYXNzZXMgbXVzdCBjYWxsIHRoZSBjb25zdHJ1Y3RvciBvZiB0aGVpclxuICAgKiBzdXBlcmNsYXNzIGFuZCB0aGVuIG1lcmdlIHRoZWlyIGNvbmZpZ3VyYXRpb24gaW50byB0aGUgY29tcG9uZW50J3MgY29uZmlndXJhdGlvbi5cbiAgICogQHBhcmFtIGNvbmZpZyB0aGUgY29uZmlndXJhdGlvbiBmb3IgdGhlIGNvbXBvbmVudFxuICAgKi9cbiAgY29uc3RydWN0b3IoY29uZmlnOiBDb21wb25lbnRDb25maWcgPSB7fSkge1xuICAgIC8vIENyZWF0ZSB0aGUgY29uZmlndXJhdGlvbiBmb3IgdGhpcyBjb21wb25lbnRcbiAgICB0aGlzLmNvbmZpZyA9IDxDb25maWc+dGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIHRhZzogJ2RpdicsXG4gICAgICBpZDogJ3t7UFJFRklYfX0taWQtJyArIEd1aWQubmV4dCgpLFxuICAgICAgY3NzUHJlZml4OiAne3tQUkVGSVh9fScsXG4gICAgICBjc3NDbGFzczogJ3VpLWNvbXBvbmVudCcsXG4gICAgICBjc3NDbGFzc2VzOiBbXSxcbiAgICAgIGhpZGRlbjogZmFsc2UsXG4gICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgfSwge30pO1xuICAgIHRoaXMudmlld01vZGUgPSBWaWV3TW9kZS5UZW1wb3Jhcnk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGNvbXBvbmVudCwgZS5nLiBieSBhcHBseWluZyBjb25maWcgc2V0dGluZ3MuXG4gICAqIFRoaXMgbWV0aG9kIG11c3Qgbm90IGJlIGNhbGxlZCBmcm9tIG91dHNpZGUgdGhlIFVJIGZyYW1ld29yay5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgYXV0b21hdGljYWxseSBjYWxsZWQgYnkgdGhlIHtAbGluayBVSUluc3RhbmNlTWFuYWdlcn0uIElmIHRoZSBjb21wb25lbnQgaXMgYW4gaW5uZXIgY29tcG9uZW50IG9mXG4gICAqIHNvbWUgY29tcG9uZW50LCBhbmQgdGh1cyBlbmNhcHN1bGF0ZWQgYWJkIG1hbmFnZWQgaW50ZXJuYWxseSBhbmQgbmV2ZXIgZGlyZWN0bHkgZXhwb3NlZCB0byB0aGUgVUlNYW5hZ2VyLFxuICAgKiB0aGlzIG1ldGhvZCBtdXN0IGJlIGNhbGxlZCBmcm9tIHRoZSBtYW5hZ2luZyBjb21wb25lbnQncyB7QGxpbmsgI2luaXRpYWxpemV9IG1ldGhvZC5cbiAgICovXG4gIGluaXRpYWxpemUoKTogdm9pZCB7XG4gICAgdGhpcy5oaWRkZW4gPSB0aGlzLmNvbmZpZy5oaWRkZW47XG4gICAgdGhpcy5kaXNhYmxlZCA9IHRoaXMuY29uZmlnLmRpc2FibGVkO1xuXG4gICAgLy8gSGlkZSB0aGUgY29tcG9uZW50IGF0IGluaXRpYWxpemF0aW9uIGlmIGl0IGlzIGNvbmZpZ3VyZWQgdG8gYmUgaGlkZGVuXG4gICAgaWYgKHRoaXMuaXNIaWRkZW4oKSkge1xuICAgICAgdGhpcy5oaWRkZW4gPSBmYWxzZTsgLy8gU2V0IGZsYWcgdG8gZmFsc2UgZm9yIHRoZSBmb2xsb3dpbmcgaGlkZSgpIGNhbGwgdG8gd29yayAoaGlkZSgpIGNoZWNrcyB0aGUgZmxhZylcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cblxuICAgIC8vIERpc2FibGUgdGhlIGNvbXBvbmVudCBhdCBpbml0aWFsaXphdGlvbiBpZiBpdCBpcyBjb25maWd1cmVkIHRvIGJlIGRpc2FibGVkXG4gICAgaWYgKHRoaXMuaXNEaXNhYmxlZCgpKSB7XG4gICAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7IC8vIFNldCBmbGFnIHRvIGZhbHNlIGZvciB0aGUgZm9sbG93aW5nIGRpc2FibGUoKSBjYWxsIHRvIHdvcmsgKGRpc2FibGUoKSBjaGVja3MgdGhlIGZsYWcpXG4gICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29uZmlndXJlcyB0aGUgY29tcG9uZW50IGZvciB0aGUgc3VwcGxpZWQgUGxheWVyIGFuZCBVSUluc3RhbmNlTWFuYWdlci4gVGhpcyBpcyB0aGUgcGxhY2Ugd2hlcmUgYWxsIHRoZSBtYWdpY1xuICAgKiBoYXBwZW5zLCB3aGVyZSBjb21wb25lbnRzIHR5cGljYWxseSBzdWJzY3JpYmUgYW5kIHJlYWN0IHRvIGV2ZW50cyAob24gdGhlaXIgRE9NIGVsZW1lbnQsIHRoZSBQbGF5ZXIsIG9yIHRoZVxuICAgKiBVSUluc3RhbmNlTWFuYWdlciksIGFuZCBiYXNpY2FsbHkgZXZlcnl0aGluZyB0aGF0IG1ha2VzIHRoZW0gaW50ZXJhY3RpdmUuXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBvbmx5IG9uY2UsIHdoZW4gdGhlIFVJTWFuYWdlciBpbml0aWFsaXplcyB0aGUgVUkuXG4gICAqXG4gICAqIFN1YmNsYXNzZXMgdXN1YWxseSBvdmVyd3JpdGUgdGhpcyBtZXRob2QgdG8gYWRkIHRoZWlyIG93biBmdW5jdGlvbmFsaXR5LlxuICAgKlxuICAgKiBAcGFyYW0gcGxheWVyIHRoZSBwbGF5ZXIgd2hpY2ggdGhpcyBjb21wb25lbnQgY29udHJvbHNcbiAgICogQHBhcmFtIHVpbWFuYWdlciB0aGUgVUlJbnN0YW5jZU1hbmFnZXIgdGhhdCBtYW5hZ2VzIHRoaXMgY29tcG9uZW50XG4gICAqL1xuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICB0aGlzLm9uU2hvdy5zdWJzY3JpYmUoKCkgPT4gdWltYW5hZ2VyLm9uQ29tcG9uZW50U2hvdy5kaXNwYXRjaCh0aGlzKSk7XG4gICAgdGhpcy5vbkhpZGUuc3Vic2NyaWJlKCgpID0+IHVpbWFuYWdlci5vbkNvbXBvbmVudEhpZGUuZGlzcGF0Y2godGhpcykpO1xuICAgIHRoaXMub25WaWV3TW9kZUNoYW5nZWQuc3Vic2NyaWJlKChfLCBhcmdzKSA9PiB1aW1hbmFnZXIub25Db21wb25lbnRWaWV3TW9kZUNoYW5nZWQuZGlzcGF0Y2godGhpcywgYXJncykpO1xuXG4gICAgLy8gVHJhY2sgdGhlIGhvdmVyZWQgc3RhdGUgb2YgdGhlIGVsZW1lbnRcbiAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5vbignbW91c2VlbnRlcicsICgpID0+IHRoaXMub25Ib3ZlckNoYW5nZWRFdmVudCh0cnVlKSk7XG4gICAgdGhpcy5nZXREb21FbGVtZW50KCkub24oJ21vdXNlbGVhdmUnLCAoKSA9PiB0aGlzLm9uSG92ZXJDaGFuZ2VkRXZlbnQoZmFsc2UpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWxlYXNlcyBhbGwgcmVzb3VyY2VzIGFuZCBkZXBlbmRlbmNpZXMgdGhhdCB0aGUgY29tcG9uZW50IGhvbGRzLiBQbGF5ZXIsIERPTSwgYW5kIFVJTWFuYWdlciBldmVudHMgYXJlXG4gICAqIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBkdXJpbmcgcmVsZWFzZSBhbmQgZG8gbm90IGV4cGxpY2l0bHkgbmVlZCB0byBiZSByZW1vdmVkIGhlcmUuXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBieSB0aGUgVUlNYW5hZ2VyIHdoZW4gaXQgcmVsZWFzZXMgdGhlIFVJLlxuICAgKlxuICAgKiBTdWJjbGFzc2VzIHRoYXQgbmVlZCB0byByZWxlYXNlIHJlc291cmNlcyBzaG91bGQgb3ZlcnJpZGUgdGhpcyBtZXRob2QgYW5kIGNhbGwgc3VwZXIucmVsZWFzZSgpLlxuICAgKi9cbiAgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICAvLyBOb3RoaW5nIHRvIGRvIGhlcmUsIG92ZXJyaWRlIHdoZXJlIG5lY2Vzc2FyeVxuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIHRoZSBET00gZWxlbWVudCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqXG4gICAqIFN1YmNsYXNzZXMgdXN1YWxseSBvdmVyd3JpdGUgdGhpcyBtZXRob2QgdG8gZXh0ZW5kIG9yIHJlcGxhY2UgdGhlIERPTSBlbGVtZW50IHdpdGggdGhlaXIgb3duIGRlc2lnbi5cbiAgICovXG4gIHByb3RlY3RlZCB0b0RvbUVsZW1lbnQoKTogRE9NIHtcbiAgICBsZXQgZWxlbWVudCA9IG5ldyBET00odGhpcy5jb25maWcudGFnLCB7XG4gICAgICAnaWQnOiB0aGlzLmNvbmZpZy5pZCxcbiAgICAgICdjbGFzcyc6IHRoaXMuZ2V0Q3NzQ2xhc3NlcygpLFxuICAgICAgJ3JvbGUnOiB0aGlzLmNvbmZpZy5yb2xlLFxuICAgIH0sIHRoaXMpO1xuXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgRE9NIGVsZW1lbnQgb2YgdGhpcyBjb21wb25lbnQuIENyZWF0ZXMgdGhlIERPTSBlbGVtZW50IGlmIGl0IGRvZXMgbm90IHlldCBleGlzdC5cbiAgICpcbiAgICogU2hvdWxkIG5vdCBiZSBvdmVyd3JpdHRlbiBieSBzdWJjbGFzc2VzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7RE9NfVxuICAgKi9cbiAgZ2V0RG9tRWxlbWVudCgpOiBET00ge1xuICAgIGlmICghdGhpcy5lbGVtZW50KSB7XG4gICAgICB0aGlzLmVsZW1lbnQgPSB0aGlzLnRvRG9tRWxlbWVudCgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmVsZW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgY29tcG9uZW50IGhhcyBhIERPTSBlbGVtZW50LlxuICAgKi9cbiAgaGFzRG9tRWxlbWVudCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLmVsZW1lbnQpO1xuICB9XG5cbiAgc2V0QXJpYUxhYmVsKGxhYmVsOiBMb2NhbGl6YWJsZVRleHQpOiB2b2lkIHtcbiAgICB0aGlzLnNldEFyaWFBdHRyKCdsYWJlbCcsIGkxOG4ucGVyZm9ybUxvY2FsaXphdGlvbihsYWJlbCkpO1xuICB9XG5cbiAgc2V0QXJpYUF0dHIobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5nZXREb21FbGVtZW50KCkuYXR0cihgYXJpYS0ke25hbWV9YCwgdmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1lcmdlcyBhIGNvbmZpZ3VyYXRpb24gd2l0aCBhIGRlZmF1bHQgY29uZmlndXJhdGlvbiBhbmQgYSBiYXNlIGNvbmZpZ3VyYXRpb24gZnJvbSB0aGUgc3VwZXJjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIGNvbmZpZyB0aGUgY29uZmlndXJhdGlvbiBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudHMsIGFzIHVzdWFsbHkgcGFzc2VkIHRvIHRoZSBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gZGVmYXVsdHMgYSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gZm9yIHNldHRpbmdzIHRoYXQgYXJlIG5vdCBwYXNzZWQgd2l0aCB0aGUgY29uZmlndXJhdGlvblxuICAgKiBAcGFyYW0gYmFzZSBjb25maWd1cmF0aW9uIGluaGVyaXRlZCBmcm9tIGEgc3VwZXJjbGFzc1xuICAgKiBAcmV0dXJucyB7Q29uZmlnfVxuICAgKi9cbiAgcHJvdGVjdGVkIG1lcmdlQ29uZmlnPENvbmZpZz4oY29uZmlnOiBDb25maWcsIGRlZmF1bHRzOiBDb25maWcsIGJhc2U6IENvbmZpZyk6IENvbmZpZyB7XG4gICAgLy8gRXh0ZW5kIGRlZmF1bHQgY29uZmlnIHdpdGggc3VwcGxpZWQgY29uZmlnXG4gICAgbGV0IG1lcmdlZCA9IE9iamVjdC5hc3NpZ24oe30sIGJhc2UsIGRlZmF1bHRzLCBjb25maWcpO1xuXG4gICAgLy8gUmV0dXJuIHRoZSBleHRlbmRlZCBjb25maWdcbiAgICByZXR1cm4gbWVyZ2VkO1xuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBtZXRob2QgdGhhdCByZXR1cm5zIGEgc3RyaW5nIG9mIGFsbCBDU1MgY2xhc3NlcyBvZiB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgcHJvdGVjdGVkIGdldENzc0NsYXNzZXMoKTogc3RyaW5nIHtcbiAgICAvLyBNZXJnZSBhbGwgQ1NTIGNsYXNzZXMgaW50byBzaW5nbGUgYXJyYXlcbiAgICBsZXQgZmxhdHRlbmVkQXJyYXkgPSBbdGhpcy5jb25maWcuY3NzQ2xhc3NdLmNvbmNhdCh0aGlzLmNvbmZpZy5jc3NDbGFzc2VzKTtcbiAgICAvLyBQcmVmaXggY2xhc3Nlc1xuICAgIGZsYXR0ZW5lZEFycmF5ID0gZmxhdHRlbmVkQXJyYXkubWFwKChjc3MpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLnByZWZpeENzcyhjc3MpO1xuICAgIH0pO1xuICAgIC8vIEpvaW4gYXJyYXkgdmFsdWVzIGludG8gYSBzdHJpbmdcbiAgICBsZXQgZmxhdHRlbmVkU3RyaW5nID0gZmxhdHRlbmVkQXJyYXkuam9pbignICcpO1xuICAgIC8vIFJldHVybiB0cmltbWVkIHN0cmluZyB0byBwcmV2ZW50IHdoaXRlc3BhY2UgYXQgdGhlIGVuZCBmcm9tIHRoZSBqb2luIG9wZXJhdGlvblxuICAgIHJldHVybiBmbGF0dGVuZWRTdHJpbmcudHJpbSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHByZWZpeENzcyhjc3NDbGFzc09ySWQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLmNzc1ByZWZpeCArICctJyArIGNzc0NsYXNzT3JJZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBAcmV0dXJucyB7Q29uZmlnfVxuICAgKi9cbiAgcHVibGljIGdldENvbmZpZygpOiBDb25maWcge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZztcbiAgfVxuXG4gIC8qKlxuICAgKiBIaWRlcyB0aGUgY29tcG9uZW50IGlmIHNob3duLlxuICAgKiBUaGlzIG1ldGhvZCBiYXNpY2FsbHkgdHJhbnNmZXJzIHRoZSBjb21wb25lbnQgaW50byB0aGUgaGlkZGVuIHN0YXRlLiBBY3R1YWwgaGlkaW5nIGlzIGRvbmUgdmlhIENTUy5cbiAgICovXG4gIGhpZGUoKSB7XG4gICAgaWYgKCF0aGlzLmhpZGRlbikge1xuICAgICAgdGhpcy5oaWRkZW4gPSB0cnVlO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoQ29tcG9uZW50LkNMQVNTX0hJRERFTikpO1xuICAgICAgdGhpcy5vbkhpZGVFdmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93cyB0aGUgY29tcG9uZW50IGlmIGhpZGRlbi5cbiAgICovXG4gIHNob3coKSB7XG4gICAgaWYgKHRoaXMuaGlkZGVuKSB7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeENzcyhDb21wb25lbnQuQ0xBU1NfSElEREVOKSk7XG4gICAgICB0aGlzLmhpZGRlbiA9IGZhbHNlO1xuICAgICAgdGhpcy5vblNob3dFdmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBjb21wb25lbnQgaXMgaGlkZGVuLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgY29tcG9uZW50IGlzIGhpZGRlbiwgZWxzZSBmYWxzZVxuICAgKi9cbiAgaXNIaWRkZW4oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaGlkZGVuO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIGNvbXBvbmVudCBpcyBzaG93bi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGNvbXBvbmVudCBpcyB2aXNpYmxlLCBlbHNlIGZhbHNlXG4gICAqL1xuICBpc1Nob3duKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5pc0hpZGRlbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIGhpZGRlbiBzdGF0ZSBieSBoaWRpbmcgdGhlIGNvbXBvbmVudCBpZiBpdCBpcyBzaG93biwgb3Igc2hvd2luZyBpdCBpZiBoaWRkZW4uXG4gICAqL1xuICB0b2dnbGVIaWRkZW4oKSB7XG4gICAgaWYgKHRoaXMuaXNIaWRkZW4oKSkge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNhYmxlcyB0aGUgY29tcG9uZW50LlxuICAgKiBUaGlzIG1ldGhvZCBiYXNpY2FsbHkgdHJhbnNmZXJzIHRoZSBjb21wb25lbnQgaW50byB0aGUgZGlzYWJsZWQgc3RhdGUuIEFjdHVhbCBkaXNhYmxpbmcgaXMgZG9uZSB2aWEgQ1NTIG9yIGNoaWxkXG4gICAqIGNvbXBvbmVudHMuIChlLmcuIEJ1dHRvbiBuZWVkcyB0byB1bnN1YnNjcmliZSBjbGljayBsaXN0ZW5lcnMpXG4gICAqL1xuICBkaXNhYmxlKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5kaXNhYmxlZCA9IHRydWU7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hZGRDbGFzcyh0aGlzLnByZWZpeENzcyhDb21wb25lbnQuQ0xBU1NfRElTQUJMRUQpKTtcbiAgICAgIHRoaXMub25EaXNhYmxlZEV2ZW50KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgdGhlIGNvbXBvbmVudC5cbiAgICogVGhpcyBtZXRob2QgYmFzaWNhbGx5IHRyYW5zZmVycyB0aGUgY29tcG9uZW50IGludG8gdGhlIGVuYWJsZWQgc3RhdGUuIEFjdHVhbCBlbmFibGluZyBpcyBkb25lIHZpYSBDU1Mgb3IgY2hpbGRcbiAgICogY29tcG9uZW50cy4gKGUuZy4gQnV0dG9uIG5lZWRzIHRvIHN1YnNjcmliZSBjbGljayBsaXN0ZW5lcnMpXG4gICAqL1xuICBlbmFibGUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4Q3NzKENvbXBvbmVudC5DTEFTU19ESVNBQkxFRCkpO1xuICAgICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5vbkVuYWJsZWRFdmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQsIGVsc2UgZmFsc2VcbiAgICovXG4gIGlzRGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZGlzYWJsZWQ7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgY29tcG9uZW50IGlzIGVuYWJsZWQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBjb21wb25lbnQgaXMgZW5hYmxlZCwgZWxzZSBmYWxzZVxuICAgKi9cbiAgaXNFbmFibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5pc0Rpc2FibGVkKCk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgY29tcG9uZW50IGlzIGN1cnJlbnRseSBob3ZlcmVkLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgY29tcG9uZW50IGlzIGhvdmVyZWQsIGVsc2UgZmFsc2VcbiAgICovXG4gIGlzSG92ZXJlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5ob3ZlcmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHRoZSBvblNob3cgZXZlbnQuXG4gICAqIFNlZSB0aGUgZGV0YWlsZWQgZXhwbGFuYXRpb24gb24gZXZlbnQgYXJjaGl0ZWN0dXJlIG9uIHRoZSB7QGxpbmsgI2NvbXBvbmVudEV2ZW50cyBldmVudHMgbGlzdH0uXG4gICAqL1xuICBwcm90ZWN0ZWQgb25TaG93RXZlbnQoKTogdm9pZCB7XG4gICAgdGhpcy5jb21wb25lbnRFdmVudHMub25TaG93LmRpc3BhdGNoKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHRoZSBvbkhpZGUgZXZlbnQuXG4gICAqIFNlZSB0aGUgZGV0YWlsZWQgZXhwbGFuYXRpb24gb24gZXZlbnQgYXJjaGl0ZWN0dXJlIG9uIHRoZSB7QGxpbmsgI2NvbXBvbmVudEV2ZW50cyBldmVudHMgbGlzdH0uXG4gICAqL1xuICBwcm90ZWN0ZWQgb25IaWRlRXZlbnQoKTogdm9pZCB7XG4gICAgdGhpcy5jb21wb25lbnRFdmVudHMub25IaWRlLmRpc3BhdGNoKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHRoZSBvbkVuYWJsZWQgZXZlbnQuXG4gICAqIFNlZSB0aGUgZGV0YWlsZWQgZXhwbGFuYXRpb24gb24gZXZlbnQgYXJjaGl0ZWN0dXJlIG9uIHRoZSB7QGxpbmsgI2NvbXBvbmVudEV2ZW50cyBldmVudHMgbGlzdH0uXG4gICAqL1xuICBwcm90ZWN0ZWQgb25FbmFibGVkRXZlbnQoKTogdm9pZCB7XG4gICAgdGhpcy5jb21wb25lbnRFdmVudHMub25FbmFibGVkLmRpc3BhdGNoKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHRoZSBvbkRpc2FibGVkIGV2ZW50LlxuICAgKiBTZWUgdGhlIGRldGFpbGVkIGV4cGxhbmF0aW9uIG9uIGV2ZW50IGFyY2hpdGVjdHVyZSBvbiB0aGUge0BsaW5rICNjb21wb25lbnRFdmVudHMgZXZlbnRzIGxpc3R9LlxuICAgKi9cbiAgcHJvdGVjdGVkIG9uRGlzYWJsZWRFdmVudCgpOiB2b2lkIHtcbiAgICB0aGlzLmNvbXBvbmVudEV2ZW50cy5vbkRpc2FibGVkLmRpc3BhdGNoKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHRoZSBvblZpZXdNb2RlQ2hhbmdlZCBldmVudC5cbiAgICogU2VlIHRoZSBkZXRhaWxlZCBleHBsYW5hdGlvbiBvbiBldmVudCBhcmNoaXRlY3R1cmUgb24gdGhlIHtAbGluayAjY29tcG9uZW50RXZlbnRzIGV2ZW50cyBsaXN0fS5cbiAgICovXG4gIHByb3RlY3RlZCBvblZpZXdNb2RlQ2hhbmdlZEV2ZW50KG1vZGU6IFZpZXdNb2RlKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudmlld01vZGUgPT09IG1vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnZpZXdNb2RlID0gbW9kZTtcbiAgICB0aGlzLmNvbXBvbmVudEV2ZW50cy5vblZpZXdNb2RlQ2hhbmdlZC5kaXNwYXRjaCh0aGlzLCB7IG1vZGUgfSk7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgdGhlIG9uSG92ZXJDaGFuZ2VkIGV2ZW50LlxuICAgKiBTZWUgdGhlIGRldGFpbGVkIGV4cGxhbmF0aW9uIG9uIGV2ZW50IGFyY2hpdGVjdHVyZSBvbiB0aGUge0BsaW5rICNjb21wb25lbnRFdmVudHMgZXZlbnRzIGxpc3R9LlxuICAgKi9cbiAgcHJvdGVjdGVkIG9uSG92ZXJDaGFuZ2VkRXZlbnQoaG92ZXJlZDogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuaG92ZXJlZCA9IGhvdmVyZWQ7XG4gICAgdGhpcy5jb21wb25lbnRFdmVudHMub25Ib3ZlckNoYW5nZWQuZGlzcGF0Y2godGhpcywgeyBob3ZlcmVkOiBob3ZlcmVkIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIHNob3dpbmcuXG4gICAqIFNlZSB0aGUgZGV0YWlsZWQgZXhwbGFuYXRpb24gb24gZXZlbnQgYXJjaGl0ZWN0dXJlIG9uIHRoZSB7QGxpbmsgI2NvbXBvbmVudEV2ZW50cyBldmVudHMgbGlzdH0uXG4gICAqIEByZXR1cm5zIHtFdmVudDxDb21wb25lbnQ8Q29uZmlnPiwgTm9BcmdzPn1cbiAgICovXG4gIGdldCBvblNob3coKTogRXZlbnQ8Q29tcG9uZW50PENvbmZpZz4sIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudEV2ZW50cy5vblNob3cuZ2V0RXZlbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBoaWRpbmcuXG4gICAqIFNlZSB0aGUgZGV0YWlsZWQgZXhwbGFuYXRpb24gb24gZXZlbnQgYXJjaGl0ZWN0dXJlIG9uIHRoZSB7QGxpbmsgI2NvbXBvbmVudEV2ZW50cyBldmVudHMgbGlzdH0uXG4gICAqIEByZXR1cm5zIHtFdmVudDxDb21wb25lbnQ8Q29uZmlnPiwgTm9BcmdzPn1cbiAgICovXG4gIGdldCBvbkhpZGUoKTogRXZlbnQ8Q29tcG9uZW50PENvbmZpZz4sIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudEV2ZW50cy5vbkhpZGUuZ2V0RXZlbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBlbmFibGluZy5cbiAgICogU2VlIHRoZSBkZXRhaWxlZCBleHBsYW5hdGlvbiBvbiBldmVudCBhcmNoaXRlY3R1cmUgb24gdGhlIHtAbGluayAjY29tcG9uZW50RXZlbnRzIGV2ZW50cyBsaXN0fS5cbiAgICogQHJldHVybnMge0V2ZW50PENvbXBvbmVudDxDb25maWc+LCBOb0FyZ3M+fVxuICAgKi9cbiAgZ2V0IG9uRW5hYmxlZCgpOiBFdmVudDxDb21wb25lbnQ8Q29uZmlnPiwgTm9BcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50RXZlbnRzLm9uRW5hYmxlZC5nZXRFdmVudCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGRpc2FibGluZy5cbiAgICogU2VlIHRoZSBkZXRhaWxlZCBleHBsYW5hdGlvbiBvbiBldmVudCBhcmNoaXRlY3R1cmUgb24gdGhlIHtAbGluayAjY29tcG9uZW50RXZlbnRzIGV2ZW50cyBsaXN0fS5cbiAgICogQHJldHVybnMge0V2ZW50PENvbXBvbmVudDxDb25maWc+LCBOb0FyZ3M+fVxuICAgKi9cbiAgZ2V0IG9uRGlzYWJsZWQoKTogRXZlbnQ8Q29tcG9uZW50PENvbmZpZz4sIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudEV2ZW50cy5vbkRpc2FibGVkLmdldEV2ZW50KCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgZXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQncyBob3Zlci1zdGF0ZSBpcyBjaGFuZ2luZy5cbiAgICogQHJldHVybnMge0V2ZW50PENvbXBvbmVudDxDb25maWc+LCBDb21wb25lbnRIb3ZlckNoYW5nZWRFdmVudEFyZ3M+fVxuICAgKi9cbiAgZ2V0IG9uSG92ZXJDaGFuZ2VkKCk6IEV2ZW50PENvbXBvbmVudDxDb25maWc+LCBDb21wb25lbnRIb3ZlckNoYW5nZWRFdmVudEFyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnRFdmVudHMub25Ib3ZlckNoYW5nZWQuZ2V0RXZlbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIGBWaWV3TW9kZWAgb2YgdGhpcyBjb21wb25lbnQgaGFzIGNoYW5nZWQuXG4gICAqIEByZXR1cm5zIHtFdmVudDxDb21wb25lbnQ8Q29uZmlnPiwgVmlld01vZGVDaGFuZ2VkRXZlbnRBcmdzPn1cbiAgICovXG4gIGdldCBvblZpZXdNb2RlQ2hhbmdlZCgpOiBFdmVudDxDb21wb25lbnQ8Q29uZmlnPiwgVmlld01vZGVDaGFuZ2VkRXZlbnRBcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50RXZlbnRzLm9uVmlld01vZGVDaGFuZ2VkLmdldEV2ZW50KCk7XG4gIH1cbn0iLCJpbXBvcnQgeyBDb21wb25lbnRDb25maWcsIENvbXBvbmVudCwgVmlld01vZGVDaGFuZ2VkRXZlbnRBcmdzLCBWaWV3TW9kZSB9IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCB7RE9NfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHtBcnJheVV0aWxzfSBmcm9tICcuLi9hcnJheXV0aWxzJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIGEge0BsaW5rIENvbnRhaW5lcn0uXG4gKlxuICogQGNhdGVnb3J5IENvbmZpZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb250YWluZXJDb25maWcgZXh0ZW5kcyBDb21wb25lbnRDb25maWcge1xuICAvKipcbiAgICogQ2hpbGQgY29tcG9uZW50cyBvZiB0aGUgY29udGFpbmVyLlxuICAgKi9cbiAgY29tcG9uZW50cz86IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+W107XG59XG5cbi8qKlxuICogQSBjb250YWluZXIgY29tcG9uZW50IHRoYXQgY2FuIGNvbnRhaW4gYSBjb2xsZWN0aW9uIG9mIGNoaWxkIGNvbXBvbmVudHMuXG4gKiBDb21wb25lbnRzIGNhbiBiZSBhZGRlZCBhdCBjb25zdHJ1Y3Rpb24gdGltZSB0aHJvdWdoIHRoZSB7QGxpbmsgQ29udGFpbmVyQ29uZmlnI2NvbXBvbmVudHN9IHNldHRpbmcsIG9yIGxhdGVyXG4gKiB0aHJvdWdoIHRoZSB7QGxpbmsgQ29udGFpbmVyI2FkZENvbXBvbmVudH0gbWV0aG9kLiBUaGUgVUlNYW5hZ2VyIGF1dG9tYXRpY2FsbHkgdGFrZXMgY2FyZSBvZiBhbGwgY29tcG9uZW50cywgaS5lLiBpdFxuICogaW5pdGlhbGl6ZXMgYW5kIGNvbmZpZ3VyZXMgdGhlbSBhdXRvbWF0aWNhbGx5LlxuICpcbiAqIEluIHRoZSBET00sIHRoZSBjb250YWluZXIgY29uc2lzdHMgb2YgYW4gb3V0ZXIgPGRpdj4gKHRoYXQgY2FuIGJlIGNvbmZpZ3VyZWQgYnkgdGhlIGNvbmZpZykgYW5kIGFuIGlubmVyIHdyYXBwZXJcbiAqIDxkaXY+IHRoYXQgY29udGFpbnMgdGhlIGNvbXBvbmVudHMuIFRoaXMgZG91YmxlLTxkaXY+LXN0cnVjdHVyZSBpcyBvZnRlbiByZXF1aXJlZCB0byBhY2hpZXZlIG1hbnkgYWR2YW5jZWQgZWZmZWN0c1xuICogaW4gQ1NTIGFuZC9vciBKUywgZS5nLiBhbmltYXRpb25zIGFuZCBjZXJ0YWluIGZvcm1hdHRpbmcgd2l0aCBhYnNvbHV0ZSBwb3NpdGlvbmluZy5cbiAqXG4gKiBET00gZXhhbXBsZTpcbiAqIDxjb2RlPlxuICogICAgIDxkaXYgY2xhc3M9J3VpLWNvbnRhaW5lcic+XG4gKiAgICAgICAgIDxkaXYgY2xhc3M9J2NvbnRhaW5lci13cmFwcGVyJz5cbiAqICAgICAgICAgICAgIC4uLiBjaGlsZCBjb21wb25lbnRzIC4uLlxuICogICAgICAgICA8L2Rpdj5cbiAqICAgICA8L2Rpdj5cbiAqIDwvY29kZT5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29tcG9uZW50c1xuICovXG5leHBvcnQgY2xhc3MgQ29udGFpbmVyPENvbmZpZyBleHRlbmRzIENvbnRhaW5lckNvbmZpZz4gZXh0ZW5kcyBDb21wb25lbnQ8Q29uZmlnPiB7XG5cbiAgLyoqXG4gICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBpbm5lciBlbGVtZW50IHRoYXQgY29udGFpbnMgdGhlIGNvbXBvbmVudHMgb2YgdGhlIGNvbnRhaW5lci5cbiAgICovXG4gIHByaXZhdGUgaW5uZXJDb250YWluZXJFbGVtZW50OiBET007XG4gIHByaXZhdGUgY29tcG9uZW50c1RvQWRkOiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPltdO1xuICBwcml2YXRlIGNvbXBvbmVudHNUb1JlbW92ZTogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz5bXTtcbiAgcHJpdmF0ZSBjb21wb25lbnRzSW5QZXJzaXN0ZW50Vmlld01vZGU6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLWNvbnRhaW5lcicsXG4gICAgICBjb21wb25lbnRzOiBbXSxcbiAgICB9IGFzIENvbmZpZywgdGhpcy5jb25maWcpO1xuXG4gICAgdGhpcy5jb21wb25lbnRzVG9BZGQgPSBbXTtcbiAgICB0aGlzLmNvbXBvbmVudHNUb1JlbW92ZSA9IFtdO1xuICAgIHRoaXMuY29tcG9uZW50c0luUGVyc2lzdGVudFZpZXdNb2RlID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY2hpbGQgY29tcG9uZW50IHRvIHRoZSBjb250YWluZXIuXG4gICAqIEBwYXJhbSBjb21wb25lbnQgdGhlIGNvbXBvbmVudCB0byBhZGRcbiAgICovXG4gIGFkZENvbXBvbmVudChjb21wb25lbnQ6IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+KSB7XG4gICAgdGhpcy5jb25maWcuY29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgdGhpcy5jb21wb25lbnRzVG9BZGQucHVzaChjb21wb25lbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBjaGlsZCBjb21wb25lbnQgZnJvbSB0aGUgY29udGFpbmVyLlxuICAgKiBAcGFyYW0gY29tcG9uZW50IHRoZSBjb21wb25lbnQgdG8gcmVtb3ZlXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gcmVtb3ZlZCwgZmFsc2UgaWYgaXQgaXMgbm90IGNvbnRhaW5lZCBpbiB0aGlzIGNvbnRhaW5lclxuICAgKi9cbiAgcmVtb3ZlQ29tcG9uZW50KGNvbXBvbmVudDogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4pOiBib29sZWFuIHtcbiAgICBpZiAoQXJyYXlVdGlscy5yZW1vdmUodGhpcy5jb25maWcuY29tcG9uZW50cywgY29tcG9uZW50KSAhPSBudWxsKSB7XG4gICAgICB0aGlzLmNvbXBvbmVudHNUb1JlbW92ZS5wdXNoKGNvbXBvbmVudCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGFuIGFycmF5IG9mIGFsbCBjaGlsZCBjb21wb25lbnRzIGluIHRoaXMgY29udGFpbmVyLlxuICAgKiBAcmV0dXJucyB7Q29tcG9uZW50PENvbXBvbmVudENvbmZpZz5bXX1cbiAgICovXG4gIGdldENvbXBvbmVudHMoKTogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz5bXSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLmNvbXBvbmVudHM7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgY2hpbGQgY29tcG9uZW50cyBmcm9tIHRoZSBjb250YWluZXIuXG4gICAqL1xuICByZW1vdmVDb21wb25lbnRzKCk6IHZvaWQge1xuICAgIGZvciAobGV0IGNvbXBvbmVudCBvZiB0aGlzLmdldENvbXBvbmVudHMoKS5zbGljZSgpKSB7XG4gICAgICB0aGlzLnJlbW92ZUNvbXBvbmVudChjb21wb25lbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBET00gb2YgdGhlIGNvbnRhaW5lciB3aXRoIHRoZSBjdXJyZW50IGNvbXBvbmVudHMuXG4gICAqL1xuICBwcm90ZWN0ZWQgdXBkYXRlQ29tcG9uZW50cygpOiB2b2lkIHtcbiAgICAvKiBXZSBjYW5ub3QganVzdCBjbGVhciB0aGUgY29udGFpbmVyIHRvIHJlbW92ZSBhbGwgZWxlbWVudHMgYW5kIHRoZW4gcmUtYWRkIHRob3NlIHRoYXQgc2hvdWxkIHN0YXksIGJlY2F1c2VcbiAgICAgKiBJRSBsb29zZXMgdGhlIGlubmVySFRNTCBvZiB1bmF0dGFjaGVkIGVsZW1lbnRzLCBsZWFkaW5nIHRvIGVtcHR5IGVsZW1lbnRzIHdpdGhpbiB0aGUgY29udGFpbmVyIChlLmcuIG1pc3NpbmdcbiAgICAgKiBzdWJ0aXRsZSB0ZXh0IGluIFN1YnRpdGxlTGFiZWwpLlxuICAgICAqIEluc3RlYWQsIHdlIGtlZXAgYSBsaXN0IG9mIGVsZW1lbnRzIHRvIGFkZCBhbmQgcmVtb3ZlLCBsZWF2aW5nIHJlbWFpbmluZyBlbGVtZW50cyBhbG9uZS4gQnkga2VlcGluZyB0aGVtIGluXG4gICAgICogdGhlIERPTSwgdGhlaXIgY29udGVudCBnZXRzIHByZXNlcnZlZCBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICovXG4gICAgbGV0IGNvbXBvbmVudDtcblxuICAgIHdoaWxlIChjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudHNUb1JlbW92ZS5zaGlmdCgpKSB7XG4gICAgICBjb21wb25lbnQuZ2V0RG9tRWxlbWVudCgpLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIHdoaWxlIChjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudHNUb0FkZC5zaGlmdCgpKSB7XG4gICAgICB0aGlzLmlubmVyQ29udGFpbmVyRWxlbWVudC5hcHBlbmQoY29tcG9uZW50LmdldERvbUVsZW1lbnQoKSk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHRvRG9tRWxlbWVudCgpOiBET00ge1xuICAgIC8vIENyZWF0ZSB0aGUgY29udGFpbmVyIGVsZW1lbnQgKHRoZSBvdXRlciA8ZGl2PilcbiAgICBsZXQgY29udGFpbmVyRWxlbWVudCA9IG5ldyBET00odGhpcy5jb25maWcudGFnLCB7XG4gICAgICAnaWQnOiB0aGlzLmNvbmZpZy5pZCxcbiAgICAgICdjbGFzcyc6IHRoaXMuZ2V0Q3NzQ2xhc3NlcygpLFxuICAgICAgJ3JvbGUnOiB0aGlzLmNvbmZpZy5yb2xlLFxuICAgICAgJ2FyaWEtbGFiZWwnOiBpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24odGhpcy5jb25maWcuYXJpYUxhYmVsKSxcbiAgICB9LCB0aGlzKTtcblxuICAgIC8vIENyZWF0ZSB0aGUgaW5uZXIgY29udGFpbmVyIGVsZW1lbnQgKHRoZSBpbm5lciA8ZGl2PikgdGhhdCB3aWxsIGNvbnRhaW4gdGhlIGNvbXBvbmVudHNcbiAgICBsZXQgaW5uZXJDb250YWluZXIgPSBuZXcgRE9NKHRoaXMuY29uZmlnLnRhZywge1xuICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ2NvbnRhaW5lci13cmFwcGVyJyksXG4gICAgfSk7XG4gICAgdGhpcy5pbm5lckNvbnRhaW5lckVsZW1lbnQgPSBpbm5lckNvbnRhaW5lcjtcblxuICAgIGZvciAobGV0IGluaXRpYWxDb21wb25lbnQgb2YgdGhpcy5jb25maWcuY29tcG9uZW50cykge1xuICAgICAgdGhpcy5jb21wb25lbnRzVG9BZGQucHVzaChpbml0aWFsQ29tcG9uZW50KTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVDb21wb25lbnRzKCk7XG5cbiAgICBjb250YWluZXJFbGVtZW50LmFwcGVuZChpbm5lckNvbnRhaW5lcik7XG5cbiAgICByZXR1cm4gY29udGFpbmVyRWxlbWVudDtcbiAgfVxuXG4gIHByb3RlY3RlZCBzdXNwZW5kSGlkZVRpbWVvdXQoKTogdm9pZCB7XG4gICAgLy8gdG8gYmUgaW1wbGVtZW50ZWQgaW4gc3ViY2xhc3NcbiAgfVxuXG4gIHByb3RlY3RlZCByZXN1bWVIaWRlVGltZW91dCgpOiB2b2lkIHtcbiAgICAvLyB0byBiZSBpbXBsZW1lbnRlZCBpbiBzdWJjbGFzc1xuICB9XG5cbiAgcHJvdGVjdGVkIHRyYWNrQ29tcG9uZW50Vmlld01vZGUobW9kZTogVmlld01vZGUpIHtcbiAgICBpZiAobW9kZSA9PT0gVmlld01vZGUuUGVyc2lzdGVudCkge1xuICAgICAgdGhpcy5jb21wb25lbnRzSW5QZXJzaXN0ZW50Vmlld01vZGUrKztcbiAgICB9IGVsc2UgaWYgKG1vZGUgPT09IFZpZXdNb2RlLlRlbXBvcmFyeSkge1xuICAgICAgdGhpcy5jb21wb25lbnRzSW5QZXJzaXN0ZW50Vmlld01vZGUgPSBNYXRoLm1heCh0aGlzLmNvbXBvbmVudHNJblBlcnNpc3RlbnRWaWV3TW9kZSAtIDEsIDApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNvbXBvbmVudHNJblBlcnNpc3RlbnRWaWV3TW9kZSA+IDApIHtcbiAgICAgIC8vIFRoZXJlIGlzIGF0IGxlYXN0IG9uZSBjb21wb25lbnQgdGhhdCBtdXN0IG5vdCBiZSBoaWRkZW4sXG4gICAgICAvLyB0aGVyZWZvcmUgdGhlIGhpZGUgdGltZW91dCBtdXN0IGJlIHN1c3BlbmRlZFxuICAgICAgdGhpcy5zdXNwZW5kSGlkZVRpbWVvdXQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZXN1bWVIaWRlVGltZW91dCgpO1xuICAgIH1cbiAgfVxufSIsImltcG9ydCB7Q29udGFpbmVyQ29uZmlnLCBDb250YWluZXJ9IGZyb20gJy4vY29udGFpbmVyJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge1VJVXRpbHN9IGZyb20gJy4uL3VpdXRpbHMnO1xuaW1wb3J0IHtTcGFjZXJ9IGZyb20gJy4vc3BhY2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuaW1wb3J0IHsgQnJvd3NlclV0aWxzIH0gZnJvbSAnLi4vYnJvd3NlcnV0aWxzJztcbmltcG9ydCB7Q29tcG9uZW50LCBDb21wb25lbnRDb25maWd9IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCB7U2V0dGluZ3NQYW5lbH0gZnJvbSAnLi9zZXR0aW5nc3BhbmVsJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgdGhlIHtAbGluayBDb250cm9sQmFyfS5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29uZmlnc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbnRyb2xCYXJDb25maWcgZXh0ZW5kcyBDb250YWluZXJDb25maWcge1xuICAvLyBub3RoaW5nIHlldFxufVxuXG4vKipcbiAqIEEgY29udGFpbmVyIGZvciBtYWluIHBsYXllciBjb250cm9sIGNvbXBvbmVudHMsIGUuZy4gcGxheSB0b2dnbGUgYnV0dG9uLCBzZWVrIGJhciwgdm9sdW1lIGNvbnRyb2wsIGZ1bGxzY3JlZW4gdG9nZ2xlXG4gKiBidXR0b24uXG4gKlxuICogQGNhdGVnb3J5IENvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGNsYXNzIENvbnRyb2xCYXIgZXh0ZW5kcyBDb250YWluZXI8Q29udHJvbEJhckNvbmZpZz4ge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29udHJvbEJhckNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLWNvbnRyb2xiYXInLFxuICAgICAgaGlkZGVuOiB0cnVlLFxuICAgICAgcm9sZTogJ3JlZ2lvbicsXG4gICAgICBhcmlhTGFiZWw6IGkxOG4uZ2V0TG9jYWxpemVyKCdjb250cm9sQmFyJyksXG4gICAgfSwgPENvbnRyb2xCYXJDb25maWc+dGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIC8vIENvdW50cyBob3cgbWFueSBjb21wb25lbnRzIGFyZSBob3ZlcmVkIGFuZCBibG9jayBoaWRpbmcgb2YgdGhlIGNvbnRyb2wgYmFyXG4gICAgbGV0IGhvdmVyU3RhY2tDb3VudCA9IDA7XG4gICAgbGV0IGlzU2V0dGluZ3NQYW5lbFNob3duID0gZmFsc2U7XG5cbiAgICAvLyBPbmx5IGVuYWJsaW5nIHRoaXMgZm9yIHBsYXRmb3JtcyB3aXRob3V0IHRvdWNoIGlucHV0LlxuICAgIC8vIEVuYWJsaW5nIHRoaXMgZm9yIHRvdWNoIGRldmljZXMgY2F1c2VzIHRoZSBVSSB0byBub3QgZGlzYXBwZWFyIGFmdGVyIGhpZGVEZWxheSBzZWNvbmRzLFxuICAgIC8vIGJlY2F1c2UgYG1vdXNlbGVhdmVgIGV2ZW50IGlzIG5vdCBlbWl0dGVkLlxuICAgIC8vIEluc3RlYWQsIGl0IHdpbGwgc3RheSB2aXNpYmxlIHVudGlsIGFub3RoZXIgbWFudWFsIGludGVyYWN0aW9uIGlzIHBlcmZvcm1lZC5cbiAgICBpZiAodWltYW5hZ2VyLmdldENvbmZpZygpLmRpc2FibGVBdXRvSGlkZVdoZW5Ib3ZlcmVkICYmICFCcm93c2VyVXRpbHMuaXNUb3VjaFN1cHBvcnRlZCkge1xuICAgICAgLy8gVHJhY2sgaG92ZXIgc3RhdHVzIG9mIGNoaWxkIGNvbXBvbmVudHNcbiAgICAgIFVJVXRpbHMudHJhdmVyc2VUcmVlKHRoaXMsIChjb21wb25lbnQpID0+IHtcbiAgICAgICAgLy8gRG8gbm90IHRyYWNrIGhvdmVyIHN0YXR1cyBvZiBjaGlsZCBjb250YWluZXJzIG9yIHNwYWNlcnMsIG9ubHkgb2YgJ3JlYWwnIGNvbnRyb2xzXG4gICAgICAgIGlmIChjb21wb25lbnQgaW5zdGFuY2VvZiBDb250YWluZXIgfHwgY29tcG9uZW50IGluc3RhbmNlb2YgU3BhY2VyKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3Vic2NyaWJlIGhvdmVyIGV2ZW50IGFuZCBrZWVwIGEgY291bnQgb2YgdGhlIG51bWJlciBvZiBob3ZlcmVkIGNoaWxkcmVuXG4gICAgICAgIGNvbXBvbmVudC5vbkhvdmVyQ2hhbmdlZC5zdWJzY3JpYmUoKF8sIGFyZ3MpID0+IHtcbiAgICAgICAgICBpZiAoYXJncy5ob3ZlcmVkKSB7XG4gICAgICAgICAgICBob3ZlclN0YWNrQ291bnQrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaG92ZXJTdGFja0NvdW50LS07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChCcm93c2VyVXRpbHMuaXNNb2JpbGUpIHtcbiAgICAgIHVpbWFuYWdlci5vbkNvbXBvbmVudFNob3cuc3Vic2NyaWJlKChjb21wb25lbnQ6IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+KSA9PiB7XG4gICAgICAgIGlmIChjb21wb25lbnQgaW5zdGFuY2VvZiBTZXR0aW5nc1BhbmVsKSB7XG4gICAgICAgICAgaXNTZXR0aW5nc1BhbmVsU2hvd24gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdWltYW5hZ2VyLm9uQ29tcG9uZW50SGlkZS5zdWJzY3JpYmUoKGNvbXBvbmVudDogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4pID0+IHtcbiAgICAgICAgaWYgKGNvbXBvbmVudCBpbnN0YW5jZW9mIFNldHRpbmdzUGFuZWwpIHtcbiAgICAgICAgICBpc1NldHRpbmdzUGFuZWxTaG93biA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB1aW1hbmFnZXIub25Db250cm9sc1Nob3cuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH0pO1xuXG4gICAgdWltYW5hZ2VyLm9uUHJldmlld0NvbnRyb2xzSGlkZS5zdWJzY3JpYmUoKHNlbmRlciwgYXJncykgPT4ge1xuICAgICAgLy8gQ2FuY2VsIHRoZSBoaWRlIGV2ZW50IGlmIGhvdmVyZWQgY2hpbGQgY29tcG9uZW50cyBibG9jayBoaWRpbmcgb3IgaWYgdGhlIHNldHRpbmdzIHBhbmVsIGlzIGFjdGl2ZSBvbiBtb2JpbGUuXG4gICAgICBhcmdzLmNhbmNlbCA9IGFyZ3MuY2FuY2VsIHx8IChob3ZlclN0YWNrQ291bnQgPiAwIHx8IGlzU2V0dGluZ3NQYW5lbFNob3duKTtcbiAgICB9KTtcblxuICAgIHVpbWFuYWdlci5vbkNvbnRyb2xzSGlkZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBsYXllckFQSSwgU2VnbWVudFBsYXliYWNrRXZlbnQsIFZpZGVvUXVhbGl0eSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XHJcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XHJcbmltcG9ydCB7IENvbnRhaW5lciwgQ29udGFpbmVyQ29uZmlnIH0gZnJvbSAnLi9jb250YWluZXInO1xyXG5pbXBvcnQgeyBFY29Nb2RlVG9nZ2xlQnV0dG9uIH0gZnJvbSAnLi9lY29tb2RldG9nZ2xlYnV0dG9uJztcclxuaW1wb3J0IHsgTGFiZWwsIExhYmVsQ29uZmlnIH0gZnJvbSAnLi9sYWJlbCc7XHJcbmltcG9ydCB7IFNldHRpbmdzUGFuZWxJdGVtIH0gZnJvbSAnLi9zZXR0aW5nc3BhbmVsaXRlbSc7XHJcblxyXG4vKipcclxuICogQGNhdGVnb3J5IENvbnRhaW5lcnNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBFY29Nb2RlQ29udGFpbmVyIGV4dGVuZHMgQ29udGFpbmVyPENvbnRhaW5lckNvbmZpZz4ge1xyXG4gIHByaXZhdGUgZWNvTW9kZVNhdmVkRW1pc3Npb25zSXRlbTogU2V0dGluZ3NQYW5lbEl0ZW07XHJcbiAgcHJpdmF0ZSBlY29Nb2RlVG9nZ2xlQnV0dG9uSXRlbTogU2V0dGluZ3NQYW5lbEl0ZW07XHJcbiAgcHJpdmF0ZSBlbWlzc2lvbnNTYXZlZExhYmVsOiBMYWJlbDxMYWJlbENvbmZpZz47XHJcbiAgcHJpdmF0ZSBzYXZlZEVtaXNzb25zID0gMDtcclxuICBwcml2YXRlIGN1cnJlbnRFbmVyZ3lFbWlzc2lvbjogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbnRhaW5lckNvbmZpZyA9IHt9KSB7XHJcbiAgICBzdXBlcihjb25maWcpO1xyXG5cclxuICAgIGNvbnN0IGVjb01vZGVUb2dnbGVCdXR0b24gPSBuZXcgRWNvTW9kZVRvZ2dsZUJ1dHRvbigpO1xyXG4gICAgY29uc3QgbGFiZWxFY29Nb2RlID0gbmV3IExhYmVsKHtcclxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ2Vjb01vZGUudGl0bGUnKSxcclxuICAgICAgZm9yOiBlY29Nb2RlVG9nZ2xlQnV0dG9uLmdldENvbmZpZygpLmlkLFxyXG4gICAgICBpZDogJ2Vjb21vZGVsYWJlbCcsXHJcbiAgICB9KTtcclxuICAgIHRoaXMuZW1pc3Npb25zU2F2ZWRMYWJlbCA9IG5ldyBMYWJlbCh7XHJcbiAgICAgIHRleHQ6IGAke3RoaXMuc2F2ZWRFbWlzc29ucy50b0ZpeGVkKDQpfSBnQ08yYCxcclxuICAgICAgY3NzQ2xhc3M6ICd1aS1sYWJlbC1zYXZlZEVuZXJneScsXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmVjb01vZGVUb2dnbGVCdXR0b25JdGVtID0gbmV3IFNldHRpbmdzUGFuZWxJdGVtKGxhYmVsRWNvTW9kZSwgZWNvTW9kZVRvZ2dsZUJ1dHRvbik7XHJcbiAgICB0aGlzLmVjb01vZGVTYXZlZEVtaXNzaW9uc0l0ZW0gPSBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oJ1NhdmVkIEVtaXNzaW9ucycsIHRoaXMuZW1pc3Npb25zU2F2ZWRMYWJlbCwge1xyXG4gICAgICBoaWRkZW46IHRydWUsXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmFkZENvbXBvbmVudCh0aGlzLmVjb01vZGVUb2dnbGVCdXR0b25JdGVtKTtcclxuICAgIHRoaXMuYWRkQ29tcG9uZW50KHRoaXMuZWNvTW9kZVNhdmVkRW1pc3Npb25zSXRlbSk7XHJcblxyXG4gICAgZWNvTW9kZVRvZ2dsZUJ1dHRvbi5vblRvZ2dsZU9uLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgIHRoaXMuZWNvTW9kZVNhdmVkRW1pc3Npb25zSXRlbS5zaG93KCk7XHJcbiAgICAgIHRoaXMub25Ub2dnbGVDYWxsYmFjaygpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZWNvTW9kZVRvZ2dsZUJ1dHRvbi5vblRvZ2dsZU9mZi5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICB0aGlzLmVjb01vZGVTYXZlZEVtaXNzaW9uc0l0ZW0uaGlkZSgpO1xyXG4gICAgICB0aGlzLm9uVG9nZ2xlQ2FsbGJhY2soKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBvblRvZ2dsZUNhbGxiYWNrOiAoKSA9PiB2b2lkO1xyXG5cclxuICBwdWJsaWMgc2V0T25Ub2dnbGVDYWxsYmFjayhjYWxsYmFjazogKCkgPT4gdm9pZCkge1xyXG4gICAgdGhpcy5vblRvZ2dsZUNhbGxiYWNrID0gY2FsbGJhY2s7XHJcbiAgfVxyXG5cclxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEkpOiB2b2lkIHtcclxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TZWdtZW50UGxheWJhY2ssIChzZWdtZW50OiBTZWdtZW50UGxheWJhY2tFdmVudCkgPT4ge1xyXG4gICAgICBpZiAoIXNlZ21lbnQubWltZVR5cGUuaW5jbHVkZXMoJ3ZpZGVvJykpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHsgaGVpZ2h0LCB3aWR0aCwgYml0cmF0ZSwgZnJhbWVSYXRlIH0gPSBzZWdtZW50Lm1lZGlhSW5mbztcclxuICAgICAgY29uc3Qge1xyXG4gICAgICAgIGhlaWdodDogbWF4SGVpZ2h0LFxyXG4gICAgICAgIGJpdHJhdGU6IG1heEJpdHJhdGUsXHJcbiAgICAgICAgd2lkdGg6IG1heFdpZHRoLFxyXG4gICAgICB9ID0gdGhpcy5nZXRNYXhRdWFsaXR5QXZhaWxhYmxlKHBsYXllci5nZXRBdmFpbGFibGVWaWRlb1F1YWxpdGllcygpKTtcclxuXHJcbiAgICAgIGNvbnN0IGN1cnJlbnRFbmVyZ3lLd2ggPSB0aGlzLmNhbGN1bGF0ZUVuZXJneUNvbnN1bXB0aW9uKGZyYW1lUmF0ZSwgaGVpZ2h0LCB3aWR0aCwgYml0cmF0ZSwgc2VnbWVudC5kdXJhdGlvbik7XHJcblxyXG4gICAgICBjb25zdCBtYXhFbmVyZ3lLd2ggPSB0aGlzLmNhbGN1bGF0ZUVuZXJneUNvbnN1bXB0aW9uKFxyXG4gICAgICAgIGZyYW1lUmF0ZSxcclxuICAgICAgICBtYXhIZWlnaHQsXHJcbiAgICAgICAgbWF4V2lkdGgsXHJcbiAgICAgICAgbWF4Qml0cmF0ZSxcclxuICAgICAgICBzZWdtZW50LmR1cmF0aW9uLFxyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKHRoaXMuZWNvTW9kZVNhdmVkRW1pc3Npb25zSXRlbS5pc1Nob3duKCkpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZVNhdmVkRW1pc3Npb25zKGN1cnJlbnRFbmVyZ3lLd2gsIG1heEVuZXJneUt3aCwgdGhpcy5lbWlzc2lvbnNTYXZlZExhYmVsKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVTYXZlZEVtaXNzaW9ucyhcclxuICAgIGN1cnJlbnRFbmVyZ3lDb25zdXB0aW9uOiBudW1iZXIsXHJcbiAgICBtYXhFbmVyZ3lDb25zdXB0aW9uOiBudW1iZXIsXHJcbiAgICBlbWlzc2lvbnNTYXZlZExhYmVsOiBMYWJlbDxMYWJlbENvbmZpZz4sXHJcbiAgKSB7XHJcbiAgICAvLyA0NzUgaXMgdGhlIGF2ZXJhZ2UgY2FyYm9uIGludGVuc2l0eSBvZiBhbGwgY291bnRyaWVzIGluIGdDTzIva1doXHJcbiAgICBjb25zdCBhdmVyYWdlQ2FyYm9uSW50ZW5zaXR5ID0gNDc1O1xyXG5cclxuICAgIHRoaXMuY3VycmVudEVuZXJneUVtaXNzaW9uID0gY3VycmVudEVuZXJneUNvbnN1cHRpb24gKiBhdmVyYWdlQ2FyYm9uSW50ZW5zaXR5O1xyXG4gICAgY29uc3QgbWF4RW5lcmd5RW1pc3NvbiA9IG1heEVuZXJneUNvbnN1cHRpb24gKiBhdmVyYWdlQ2FyYm9uSW50ZW5zaXR5O1xyXG4gICAgdGhpcy5zYXZlZEVtaXNzb25zICs9IG1heEVuZXJneUVtaXNzb24gLSB0aGlzLmN1cnJlbnRFbmVyZ3lFbWlzc2lvbjtcclxuICAgIGVtaXNzaW9uc1NhdmVkTGFiZWwuc2V0VGV4dCh0aGlzLnNhdmVkRW1pc3NvbnMudG9GaXhlZCg0KSArICcgZ0NPMicpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGNhbGN1bGF0aW9ucyBhcmUgYmFzZWQgb24gdGhlIGZvbGxvd2luZyBwYXBlcjogaHR0cHM6Ly9hcnhpdi5vcmcvcGRmLzIyMTAuMDU0NDQucGRmXHJcbiAgICovXHJcbiAgY2FsY3VsYXRlRW5lcmd5Q29uc3VtcHRpb24oZnBzOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBiaXRyYXRlOiBudW1iZXIsIGR1cmF0aW9uOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgY29uc3QgZnBzV2VpZ2h0ID0gMC4wMzU7XHJcbiAgICBjb25zdCBwaXhlbGRXZWlnaHQgPSA1Ljc2ZS05O1xyXG4gICAgY29uc3QgYmlyYXRlV2VpZ2h0ID0gNi45N2UtNjtcclxuICAgIGNvbnN0IGNvbnN0YW50T2Zmc2V0ID0gOC41MjtcclxuICAgIGNvbnN0IGJpdHJhdGVJbnRlcm5ldFdlaWdodCA9IDMuMjRlLTU7XHJcbiAgICBjb25zdCBpbnRlcm5ldENvbm5lY3Rpb25PZmZzZXQgPSAxLjE1O1xyXG4gICAgY29uc3QgdmlkZW9Db2RlYyA9IDQuMTY7XHJcblxyXG4gICAgY29uc3QgZW5lcmd5Q29uc3VtcHRpb25XID1cclxuICAgICAgZnBzV2VpZ2h0ICogZnBzICtcclxuICAgICAgcGl4ZWxkV2VpZ2h0ICogaGVpZ2h0ICogd2lkdGggK1xyXG4gICAgICAoYmlyYXRlV2VpZ2h0ICsgYml0cmF0ZUludGVybmV0V2VpZ2h0KSAqIChiaXRyYXRlIC8gMTAwMCkgK1xyXG4gICAgICB2aWRlb0NvZGVjICtcclxuICAgICAgY29uc3RhbnRPZmZzZXQgK1xyXG4gICAgICBpbnRlcm5ldENvbm5lY3Rpb25PZmZzZXQ7XHJcblxyXG4gICAgLy8gQ29udmVydCBlbmVyZ3kgY29uc3VtcHRpb24gZnJvbSBXYXR0cyAoVykgdG8gS2lsb3dhdHQtaG91cnMgKGtXaCkgZm9yIHRoZSBnaXZlbiB0aW1lIGR1cmF0aW9uIG9mIHRoZSBzZWdtZW50XHJcbiAgICBjb25zdCBlbmVyZ3lDb25zdW1wdGlvbkt3aCA9IChlbmVyZ3lDb25zdW1wdGlvblcgKiBkdXJhdGlvbikgLyAzLjZlNjtcclxuXHJcbiAgICByZXR1cm4gZW5lcmd5Q29uc3VtcHRpb25Ld2g7XHJcbiAgfVxyXG4gIGdldE1heFF1YWxpdHlBdmFpbGFibGUoYXZhaWxhYmxlVmlkZW9RdWFsaXRpZXM6IFZpZGVvUXVhbGl0eVtdKSB7XHJcbiAgICBjb25zdCBzb3J0ZWRRdWFsaXRpZXMgPSBhdmFpbGFibGVWaWRlb1F1YWxpdGllcy5zb3J0KChhLCBiKSA9PiBhLmJpdHJhdGUgLSBiLmJpdHJhdGUpO1xyXG4gICAgcmV0dXJuIHNvcnRlZFF1YWxpdGllc1tzb3J0ZWRRdWFsaXRpZXMubGVuZ3RoIC0gMV07XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IFRvZ2dsZUJ1dHRvbiwgVG9nZ2xlQnV0dG9uQ29uZmlnIH0gZnJvbSAnLi90b2dnbGVidXR0b24nO1xyXG5pbXBvcnQgeyBVSUluc3RhbmNlTWFuYWdlciB9IGZyb20gJy4uL3VpbWFuYWdlcic7XHJcbmltcG9ydCB7IER5bmFtaWNBZGFwdGF0aW9uQ29uZmlnLCBQbGF5ZXJBUEksIFZpZGVvUXVhbGl0eUNoYW5nZWRFdmVudCB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XHJcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XHJcblxyXG4vKipcclxuICogQGNhdGVnb3J5IEJ1dHRvbnNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBFY29Nb2RlVG9nZ2xlQnV0dG9uIGV4dGVuZHMgVG9nZ2xlQnV0dG9uPFRvZ2dsZUJ1dHRvbkNvbmZpZz4ge1xyXG4gIHByaXZhdGUgYWRhcHRhdGlvbkNvbmZpZzogRHluYW1pY0FkYXB0YXRpb25Db25maWc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogVG9nZ2xlQnV0dG9uQ29uZmlnID0ge30pIHtcclxuICAgIHN1cGVyKGNvbmZpZyk7XHJcblxyXG4gICAgY29uc3QgZGVmYXVsdENvbmZpZzogVG9nZ2xlQnV0dG9uQ29uZmlnID0ge1xyXG4gICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcignZWNvTW9kZScpLFxyXG4gICAgICBjc3NDbGFzczogJ3VpLWVjb21vZGV0b2dnbGVidXR0b24nLFxyXG4gICAgICBvbkNsYXNzOiAnb24nLFxyXG4gICAgICBvZmZDbGFzczogJ29mZicsXHJcbiAgICAgIGFyaWFMYWJlbDogaTE4bi5nZXRMb2NhbGl6ZXIoJ2Vjb01vZGUnKSxcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywgZGVmYXVsdENvbmZpZywgdGhpcy5jb25maWcpO1xyXG4gIH1cclxuXHJcbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XHJcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xyXG5cclxuICAgIGlmICh0aGlzLmFyZUFkYXB0YXRpb25BcGlzQXZhaWxhYmxlKHBsYXllcikpIHtcclxuICAgICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy50b2dnbGUoKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLm9uVG9nZ2xlT24uc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICB0aGlzLmVuYWJsZUVjb01vZGUocGxheWVyKTtcclxuICAgICAgICBwbGF5ZXIuc2V0VmlkZW9RdWFsaXR5KCdhdXRvJyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy5vblRvZ2dsZU9mZi5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuZGlzYWJsZUVjb01vZGUocGxheWVyKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVmlkZW9RdWFsaXR5Q2hhbmdlZCwgKHF1YWxpdHk6IFZpZGVvUXVhbGl0eUNoYW5nZWRFdmVudCkgPT4ge1xyXG4gICAgICAgIGlmIChxdWFsaXR5LnRhcmdldFF1YWxpdHkuaWQgIT09ICdhdXRvJykge1xyXG4gICAgICAgICAgdGhpcy5vZmYoKTtcclxuICAgICAgICAgIHRoaXMuZGlzYWJsZUVjb01vZGUocGxheWVyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3VwZXIuZGlzYWJsZSgpO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXJlQWRhcHRhdGlvbkFwaXNBdmFpbGFibGUocGxheWVyOiBQbGF5ZXJBUEkpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IGlzR2V0Q29uZmlnQXZhaWxhYmxlID0gQm9vbGVhbihwbGF5ZXIuYWRhcHRhdGlvbi5nZXRDb25maWcgJiYgdHlwZW9mIHBsYXllci5hZGFwdGF0aW9uLmdldENvbmZpZyA9PT0gJ2Z1bmN0aW9uJyk7XHJcbiAgICBjb25zdCBpc1NldENvbmZpZ0F2YWlsYWJsZSA9IEJvb2xlYW4ocGxheWVyLmFkYXB0YXRpb24uc2V0Q29uZmlnICYmIHR5cGVvZiBwbGF5ZXIuYWRhcHRhdGlvbi5zZXRDb25maWcgPT09ICdmdW5jdGlvbicpO1xyXG5cclxuICAgIHJldHVybiBCb29sZWFuKHBsYXllci5hZGFwdGF0aW9uICYmIGlzR2V0Q29uZmlnQXZhaWxhYmxlICYmIGlzU2V0Q29uZmlnQXZhaWxhYmxlKTtcclxuICB9XHJcblxyXG4gIGVuYWJsZUVjb01vZGUocGxheWVyOiBQbGF5ZXJBUEkpOiB2b2lkIHtcclxuICAgIHRoaXMuYWRhcHRhdGlvbkNvbmZpZyA9IHBsYXllci5hZGFwdGF0aW9uLmdldENvbmZpZygpO1xyXG4gICAgY29uc3QgY29kZWMgPSBwbGF5ZXIuZ2V0QXZhaWxhYmxlVmlkZW9RdWFsaXRpZXMoKVswXS5jb2RlYztcclxuXHJcbiAgICBpZiAoY29kZWMuaW5jbHVkZXMoJ2F2YycpKSB7XHJcbiAgICAgIHBsYXllci5hZGFwdGF0aW9uLnNldENvbmZpZyh7XHJcbiAgICAgICAgcmVzb2x1dGlvbjogeyBtYXhTZWxlY3RhYmxlVmlkZW9IZWlnaHQ6IDcyMCB9LFxyXG4gICAgICAgIGxpbWl0VG9QbGF5ZXJTaXplOiB0cnVlLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChjb2RlYy5pbmNsdWRlcygnaHZjJykgfHwgY29kZWMuaW5jbHVkZXMoJ2hldicpKSB7XHJcbiAgICAgIHBsYXllci5hZGFwdGF0aW9uLnNldENvbmZpZyh7XHJcbiAgICAgICAgcmVzb2x1dGlvbjogeyBtYXhTZWxlY3RhYmxlVmlkZW9IZWlnaHQ6IDEwODAgfSxcclxuICAgICAgICBsaW1pdFRvUGxheWVyU2l6ZTogdHJ1ZSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoY29kZWMuaW5jbHVkZXMoJ2F2MScpIHx8IGNvZGVjLmluY2x1ZGVzKCdhdjAxJykpIHtcclxuICAgICAgcGxheWVyLmFkYXB0YXRpb24uc2V0Q29uZmlnKHtcclxuICAgICAgICByZXNvbHV0aW9uOiB7IG1heFNlbGVjdGFibGVWaWRlb0hlaWdodDogMTQ0MCB9LFxyXG4gICAgICAgIGxpbWl0VG9QbGF5ZXJTaXplOiB0cnVlLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRpc2FibGVFY29Nb2RlKHBsYXllcjogUGxheWVyQVBJKTogdm9pZCB7XHJcbiAgICBwbGF5ZXIuYWRhcHRhdGlvbi5zZXRDb25maWcodGhpcy5hZGFwdGF0aW9uQ29uZmlnKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHtDb250YWluZXJDb25maWcsIENvbnRhaW5lcn0gZnJvbSAnLi9jb250YWluZXInO1xuaW1wb3J0IHtMYWJlbCwgTGFiZWxDb25maWd9IGZyb20gJy4vbGFiZWwnO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7VHZOb2lzZUNhbnZhc30gZnJvbSAnLi90dm5vaXNlY2FudmFzJztcbmltcG9ydCB7IEVycm9yVXRpbHMgfSBmcm9tICcuLi9lcnJvcnV0aWxzJztcbmltcG9ydCB7IEVycm9yRXZlbnQsIFBsYXllckFQSSwgUGxheWVyRXZlbnRCYXNlIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7XG4gIGlzTW9iaWxlVjNQbGF5ZXJBUEksXG4gIE1vYmlsZVYzUGxheWVyQVBJLCBNb2JpbGVWM1BsYXllckVycm9yRXZlbnQsIE1vYmlsZVYzUGxheWVyRXZlbnQsIE1vYmlsZVYzU291cmNlRXJyb3JFdmVudCxcbn0gZnJvbSAnLi4vbW9iaWxldjNwbGF5ZXJhcGknO1xuaW1wb3J0IHsgR29CYWNrQnV0dG9uIH0gZnJvbSAnLi4vLi4vY3VzdG9tL3RzL2NvbXBvbmVudHMvZ29iYWNrYnV0dG9uJztcblxuZXhwb3J0IGludGVyZmFjZSBFcnJvck1lc3NhZ2VUcmFuc2xhdG9yIHtcbiAgKGVycm9yOiBFcnJvckV2ZW50IHwgTW9iaWxlVjNQbGF5ZXJFcnJvckV2ZW50KTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yTWVzc2FnZU1hcCB7XG4gIFtjb2RlOiBudW1iZXJdOiBzdHJpbmcgfCBFcnJvck1lc3NhZ2VUcmFuc2xhdG9yO1xufVxuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIGZvciB0aGUge0BsaW5rIEVycm9yTWVzc2FnZU92ZXJsYXl9LlxuICpcbiAqIEBjYXRlZ29yeSBDb25maWdzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRXJyb3JNZXNzYWdlT3ZlcmxheUNvbmZpZyBleHRlbmRzIENvbnRhaW5lckNvbmZpZyB7XG4gIC8qKlxuICAgKiBBbGxvd3Mgb3ZlcndyaXRpbmcgb2YgdGhlIGVycm9yIG1lc3NhZ2VzIGRpc3BsYXllZCBpbiB0aGUgb3ZlcmxheSBmb3IgY3VzdG9taXphdGlvbiBhbmQgbG9jYWxpemF0aW9uLlxuICAgKiBUaGlzIGlzIGVpdGhlciBhIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgYW55IHtAbGluayBFcnJvckV2ZW50fSBhcyBwYXJhbWV0ZXIgYW5kIHRyYW5zbGF0ZXMgZXJyb3IgbWVzc2FnZXMsXG4gICAqIG9yIGEgbWFwIG9mIGVycm9yIGNvZGVzIHRoYXQgb3ZlcndyaXRlcyBzcGVjaWZpYyBlcnJvciBtZXNzYWdlcyB3aXRoIGEgcGxhaW4gc3RyaW5nIG9yIGEgZnVuY3Rpb24gdGhhdFxuICAgKiByZWNlaXZlcyB0aGUge0BsaW5rIEVycm9yRXZlbnR9IGFzIHBhcmFtZXRlciBhbmQgcmV0dXJucyBhIGN1c3RvbWl6ZWQgc3RyaW5nLlxuICAgKiBUaGUgdHJhbnNsYXRpb24gZnVuY3Rpb25zIGNhbiBiZSB1c2VkIHRvIGV4dHJhY3QgZGF0YSAoZS5nLiBwYXJhbWV0ZXJzKSBmcm9tIHRoZSBvcmlnaW5hbCBlcnJvciBtZXNzYWdlLlxuICAgKlxuICAgKiBFeGFtcGxlIDEgKGNhdGNoLWFsbCB0cmFuc2xhdGlvbiBmdW5jdGlvbik6XG4gICAqIDxjb2RlPlxuICAgKiBlcnJvck1lc3NhZ2VPdmVybGF5Q29uZmlnID0ge1xuICAgKiAgIG1lc3NhZ2VzOiBmdW5jdGlvbihlcnJvcikge1xuICAgKiAgICAgc3dpdGNoIChlcnJvci5jb2RlKSB7XG4gICAqICAgICAgIC8vIE92ZXJ3cml0ZSBlcnJvciAxMDAwICdVbmtub3duIGVycm9yJ1xuICAgKiAgICAgICBjYXNlIDEwMDA6XG4gICAqICAgICAgICAgcmV0dXJuICdIb3VzdG9uLCB3ZSBoYXZlIGEgcHJvYmxlbSdcbiAgICpcbiAgICogICAgICAgLy8gVHJhbnNmb3JtIGVycm9yIDEyMDEgJ1RoZSBkb3dubG9hZGVkIG1hbmlmZXN0IGlzIGludmFsaWQnIHRvIHVwcGVyY2FzZVxuICAgKiAgICAgICBjYXNlIDEyMDE6XG4gICAqICAgICAgICAgdmFyIGRlc2NyaXB0aW9uID0gRXJyb3JVdGlscy5kZWZhdWx0RXJyb3JNZXNzYWdlc1tlcnJvci5jb2RlXTtcbiAgICogICAgICAgICByZXR1cm4gZGVzY3JpcHRpb24udG9VcHBlckNhc2UoKTtcbiAgICpcbiAgICogICAgICAgLy8gQ3VzdG9taXplIGVycm9yIDEyMDcgJ1RoZSBtYW5pZmVzdCBjb3VsZCBub3QgYmUgbG9hZGVkJ1xuICAgKiAgICAgICBjYXNlIDEyMDc6XG4gICAqICAgICAgICAgdmFyIHN0YXR1c0NvZGUgPSBlcnJvci5kYXRhLnN0YXR1c0NvZGU7XG4gICAqICAgICAgICAgcmV0dXJuICdNYW5pZmVzdCBsb2FkaW5nIGZhaWxlZCB3aXRoIEhUVFAgZXJyb3IgJyArIHN0YXR1c0NvZGU7XG4gICAqICAgICB9XG4gICAqICAgICAvLyBSZXR1cm4gdW5tb2RpZmllZCBlcnJvciBtZXNzYWdlIGZvciBhbGwgb3RoZXIgZXJyb3JzXG4gICAqICAgICByZXR1cm4gZXJyb3IubWVzc2FnZTtcbiAgICogICB9XG4gICAqIH07XG4gICAqIDwvY29kZT5cbiAgICpcbiAgICogRXhhbXBsZSAyICh0cmFuc2xhdGluZyBzcGVjaWZpYyBlcnJvcnMpOlxuICAgKiA8Y29kZT5cbiAgICogZXJyb3JNZXNzYWdlT3ZlcmxheUNvbmZpZyA9IHtcbiAgICogICBtZXNzYWdlczoge1xuICAgKiAgICAgLy8gT3ZlcndyaXRlIGVycm9yIDEwMDAgJ1Vua25vd24gZXJyb3InXG4gICAqICAgICAxMDAwOiAnSG91c3Rvbiwgd2UgaGF2ZSBhIHByb2JsZW0nLFxuICAgKlxuICAgKiAgICAgLy8gVHJhbnNmb3JtIGVycm9yIDEyMDEgJ1Vuc3VwcG9ydGVkIG1hbmlmZXN0IGZvcm1hdCcgdG8gdXBwZXJjYXNlXG4gICAqICAgICAxMjAxOiBmdW5jdGlvbihlcnJvcikge1xuICAgKiAgICAgICB2YXIgZGVzY3JpcHRpb24gPSBFcnJvclV0aWxzLmRlZmF1bHRFcnJvck1lc3NhZ2VzW2Vycm9yLmNvZGVdO1xuICAgKiAgICAgICByZXR1cm4gZGVzY3JpcHRpb24udG9VcHBlckNhc2UoKTtcbiAgICogICAgIH0sXG4gICAqXG4gICAqICAgICAvLyBDdXN0b21pemUgZXJyb3IgMTIwNyAnVGhlIG1hbmlmZXN0IGNvdWxkIG5vdCBiZSBsb2FkZWQnXG4gICAqICAgICAxMjA3OiBmdW5jdGlvbihlcnJvcikge1xuICAgKiAgICAgICB2YXIgc3RhdHVzQ29kZSA9IGVycm9yLmRhdGEuc3RhdHVzQ29kZTtcbiAgICogICAgICAgcmV0dXJuICdNYW5pZmVzdCBsb2FkaW5nIGZhaWxlZCB3aXRoIEhUVFAgZXJyb3IgJyArIHN0YXR1c0NvZGU7XG4gICAqICAgICB9XG4gICAqICAgfVxuICAgKiB9O1xuICAgKiA8L2NvZGU+XG4gICAqL1xuICBtZXNzYWdlcz86IEVycm9yTWVzc2FnZU1hcCB8IEVycm9yTWVzc2FnZVRyYW5zbGF0b3I7XG59XG5cbi8qKlxuICogT3ZlcmxheXMgdGhlIHBsYXllciBhbmQgZGlzcGxheXMgZXJyb3IgbWVzc2FnZXMuXG4gKlxuICogQGNhdGVnb3J5IENvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGNsYXNzIEVycm9yTWVzc2FnZU92ZXJsYXkgZXh0ZW5kcyBDb250YWluZXI8RXJyb3JNZXNzYWdlT3ZlcmxheUNvbmZpZz4ge1xuXG4gIHByaXZhdGUgZXJyb3JMYWJlbDogTGFiZWw8TGFiZWxDb25maWc+O1xuICBwcml2YXRlIHR2Tm9pc2VCYWNrZ3JvdW5kOiBUdk5vaXNlQ2FudmFzO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogRXJyb3JNZXNzYWdlT3ZlcmxheUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuZXJyb3JMYWJlbCA9IG5ldyBMYWJlbDxMYWJlbENvbmZpZz4oeyBjc3NDbGFzczogJ3VpLWVycm9ybWVzc2FnZS1sYWJlbCcgfSk7XG4gICAgdGhpcy50dk5vaXNlQmFja2dyb3VuZCA9IG5ldyBUdk5vaXNlQ2FudmFzKCk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLWVycm9ybWVzc2FnZS1vdmVybGF5JyxcbiAgICAgIGNvbXBvbmVudHM6IFt0aGlzLnR2Tm9pc2VCYWNrZ3JvdW5kLCB0aGlzLmVycm9yTGFiZWwsIG5ldyBHb0JhY2tCdXR0b24oeyBlcnJvcjogdHJ1ZSB9KV0sXG4gICAgICBoaWRkZW46IHRydWUsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJIHwgTW9iaWxlVjNQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbGV0IGNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG5cbiAgICBjb25zdCBoYW5kbGVFcnJvck1lc3NhZ2UgPSAoXG4gICAgICBldmVudDogRXJyb3JFdmVudCB8IE1vYmlsZVYzU291cmNlRXJyb3JFdmVudCB8IE1vYmlsZVYzUGxheWVyRXJyb3JFdmVudCxcbiAgICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICApID0+IHtcbiAgICAgIGNvbnN0IGN1c3RvbWl6ZWRNZXNzYWdlID0gY3VzdG9taXplRXJyb3JNZXNzYWdlKHVpbWFuYWdlci5nZXRDb25maWcoKS5lcnJvck1lc3NhZ2VzIHx8IGNvbmZpZy5tZXNzYWdlcywgZXZlbnQpO1xuICAgICAgaWYgKGN1c3RvbWl6ZWRNZXNzYWdlKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBjdXN0b21pemVkTWVzc2FnZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5kaXNwbGF5KG1lc3NhZ2UpO1xuICAgIH07XG5cbiAgICBpZiAoaXNNb2JpbGVWM1BsYXllckFQSShwbGF5ZXIpKSB7XG4gICAgICBjb25zdCBlcnJvckV2ZW50SGFuZGxlciA9IChldmVudDogTW9iaWxlVjNTb3VyY2VFcnJvckV2ZW50IHwgTW9iaWxlVjNQbGF5ZXJFcnJvckV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBFcnJvclV0aWxzLmRlZmF1bHRNb2JpbGVWM0Vycm9yTWVzc2FnZVRyYW5zbGF0b3IoZXZlbnQpO1xuICAgICAgICBoYW5kbGVFcnJvck1lc3NhZ2UoZXZlbnQsIG1lc3NhZ2UpO1xuICAgICAgfTtcblxuICAgICAgcGxheWVyLm9uKE1vYmlsZVYzUGxheWVyRXZlbnQuUGxheWVyRXJyb3IsIGVycm9yRXZlbnRIYW5kbGVyKTtcbiAgICAgIHBsYXllci5vbihNb2JpbGVWM1BsYXllckV2ZW50LlNvdXJjZUVycm9yLCBlcnJvckV2ZW50SGFuZGxlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5FcnJvciwgKGV2ZW50OiBFcnJvckV2ZW50KSA9PiB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gRXJyb3JVdGlscy5kZWZhdWx0V2ViRXJyb3JNZXNzYWdlVHJhbnNsYXRvcihldmVudCk7XG4gICAgICAgIGhhbmRsZUVycm9yTWVzc2FnZShldmVudCwgbWVzc2FnZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU291cmNlTG9hZGVkLCAoZXZlbnQ6IFBsYXllckV2ZW50QmFzZSkgPT4ge1xuICAgICAgaWYgKHRoaXMuaXNTaG93bigpKSB7XG4gICAgICAgIHRoaXMudHZOb2lzZUJhY2tncm91bmQuc3RvcCgpO1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGRpc3BsYXkoZXJyb3JNZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmVycm9yTGFiZWwuc2V0VGV4dChlcnJvck1lc3NhZ2UpO1xuICAgIHRoaXMudHZOb2lzZUJhY2tncm91bmQuc3RhcnQoKTtcbiAgICB0aGlzLnNob3coKTtcbiAgfVxuXG4gIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgc3VwZXIucmVsZWFzZSgpO1xuXG4gICAgLy8gQ2FudmFzIHJlbmRlcmluZyBtdXN0IGJlIGV4cGxpY2l0bHkgc3RvcHBlZCwgZWxzZSBpdCBqdXN0IGNvbnRpbnVlcyBmb3JldmVyIGFuZCBob2dzIHJlc291cmNlc1xuICAgIHRoaXMudHZOb2lzZUJhY2tncm91bmQuc3RvcCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGN1c3RvbWl6ZUVycm9yTWVzc2FnZShcbiAgZXJyb3JNZXNzYWdlczogRXJyb3JNZXNzYWdlVHJhbnNsYXRvciB8IEVycm9yTWVzc2FnZU1hcCxcbiAgZXZlbnQ6IEVycm9yRXZlbnQgfCBNb2JpbGVWM1BsYXllckVycm9yRXZlbnQgfCBNb2JpbGVWM1NvdXJjZUVycm9yRXZlbnQsXG4pOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICBpZiAoIWVycm9yTWVzc2FnZXMpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgLy8gUHJvY2VzcyBtZXNzYWdlIHZvY2FidWxhcmllc1xuICBpZiAodHlwZW9mIGVycm9yTWVzc2FnZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBUcmFuc2xhdGlvbiBmdW5jdGlvbiBmb3IgYWxsIGVycm9yc1xuICAgIHJldHVybiBlcnJvck1lc3NhZ2VzKGV2ZW50KTtcbiAgfVxuICBpZiAoZXJyb3JNZXNzYWdlc1tldmVudC5jb2RlXSkge1xuICAgIC8vIEl0J3Mgbm90IGEgdHJhbnNsYXRpb24gZnVuY3Rpb24sIHNvIGl0IG11c3QgYmUgYSBtYXAgb2Ygc3RyaW5ncyBvciB0cmFuc2xhdGlvbiBmdW5jdGlvbnNcbiAgICBjb25zdCBjdXN0b21NZXNzYWdlID0gZXJyb3JNZXNzYWdlc1tldmVudC5jb2RlXTtcblxuICAgIHJldHVybiB0eXBlb2YgY3VzdG9tTWVzc2FnZSA9PT0gJ3N0cmluZycgPyBjdXN0b21NZXNzYWdlIDogY3VzdG9tTWVzc2FnZShldmVudCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFRvZ2dsZUJ1dHRvbiwgVG9nZ2xlQnV0dG9uQ29uZmlnIH0gZnJvbSAnLi90b2dnbGVidXR0b24nO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBidXR0b24gdGhhdCB0b2dnbGVzIHRoZSBwbGF5ZXIgYmV0d2VlbiB3aW5kb3dlZCBhbmQgZnVsbHNjcmVlbiB2aWV3LlxuICpcbiAqIEBjYXRlZ29yeSBCdXR0b25zXG4gKi9cbmV4cG9ydCBjbGFzcyBGdWxsc2NyZWVuVG9nZ2xlQnV0dG9uIGV4dGVuZHMgVG9nZ2xlQnV0dG9uPFRvZ2dsZUJ1dHRvbkNvbmZpZz4ge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogVG9nZ2xlQnV0dG9uQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1mdWxsc2NyZWVudG9nZ2xlYnV0dG9uJyxcbiAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdmdWxsc2NyZWVuJyksXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGNvbnN0IGlzRnVsbFNjcmVlbkF2YWlsYWJsZSA9ICgpID0+IHtcbiAgICAgIHJldHVybiBwbGF5ZXIuaXNWaWV3TW9kZUF2YWlsYWJsZShwbGF5ZXIuZXhwb3J0cy5WaWV3TW9kZS5GdWxsc2NyZWVuKTtcbiAgICB9O1xuXG4gICAgY29uc3QgZnVsbHNjcmVlblN0YXRlSGFuZGxlciA9ICgpID0+IHtcbiAgICAgIHBsYXllci5nZXRWaWV3TW9kZSgpID09PSBwbGF5ZXIuZXhwb3J0cy5WaWV3TW9kZS5GdWxsc2NyZWVuID8gdGhpcy5vbigpIDogdGhpcy5vZmYoKTtcbiAgICB9O1xuXG4gICAgY29uc3QgZnVsbHNjcmVlbkF2YWlsYWJpbGl0eUNoYW5nZWRIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgaXNGdWxsU2NyZWVuQXZhaWxhYmxlKCkgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuICAgIH07XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVmlld01vZGVDaGFuZ2VkLCBmdWxsc2NyZWVuU3RhdGVIYW5kbGVyKTtcblxuICAgIC8vIEF2YWlsYWJsZSBvbmx5IGluIG91ciBuYXRpdmUgU0RLcyBmb3Igbm93XG4gICAgaWYgKChwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudCBhcyBhbnkpLlZpZXdNb2RlQXZhaWxhYmlsaXR5Q2hhbmdlZCkge1xuICAgICAgcGxheWVyLm9uKFxuICAgICAgICAocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQgYXMgYW55KS5WaWV3TW9kZUF2YWlsYWJpbGl0eUNoYW5nZWQsXG4gICAgICAgIGZ1bGxzY3JlZW5BdmFpbGFiaWxpdHlDaGFuZ2VkSGFuZGxlcixcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKGZ1bGxzY3JlZW5BdmFpbGFiaWxpdHlDaGFuZ2VkSGFuZGxlcik7XG5cbiAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGlmICghaXNGdWxsU2NyZWVuQXZhaWxhYmxlKCkpIHtcbiAgICAgICAgaWYgKGNvbnNvbGUpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnRnVsbHNjcmVlbiB1bmF2YWlsYWJsZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdGFyZ2V0Vmlld01vZGUgPVxuICAgICAgICBwbGF5ZXIuZ2V0Vmlld01vZGUoKSA9PT0gcGxheWVyLmV4cG9ydHMuVmlld01vZGUuRnVsbHNjcmVlblxuICAgICAgICAgID8gcGxheWVyLmV4cG9ydHMuVmlld01vZGUuSW5saW5lXG4gICAgICAgICAgOiBwbGF5ZXIuZXhwb3J0cy5WaWV3TW9kZS5GdWxsc2NyZWVuO1xuXG4gICAgICBwbGF5ZXIuc2V0Vmlld01vZGUodGFyZ2V0Vmlld01vZGUpO1xuICAgIH0pO1xuXG4gICAgLy8gU3RhcnR1cCBpbml0XG4gICAgZnVsbHNjcmVlbkF2YWlsYWJpbGl0eUNoYW5nZWRIYW5kbGVyKCk7XG4gICAgZnVsbHNjcmVlblN0YXRlSGFuZGxlcigpO1xuICB9XG59XG4iLCJpbXBvcnQge1BsYXliYWNrVG9nZ2xlQnV0dG9uLCBQbGF5YmFja1RvZ2dsZUJ1dHRvbkNvbmZpZ30gZnJvbSAnLi9wbGF5YmFja3RvZ2dsZWJ1dHRvbic7XG5pbXBvcnQge0RPTX0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEksIFBsYXllckV2ZW50QmFzZSwgV2FybmluZ0V2ZW50IH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBidXR0b24gdGhhdCBvdmVybGF5cyB0aGUgdmlkZW8gYW5kIHRvZ2dsZXMgYmV0d2VlbiBwbGF5YmFjayBhbmQgcGF1c2UuXG4gKlxuICogQGNhdGVnb3J5IEJ1dHRvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIEh1Z2VQbGF5YmFja1RvZ2dsZUJ1dHRvbiBleHRlbmRzIFBsYXliYWNrVG9nZ2xlQnV0dG9uIHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFBsYXliYWNrVG9nZ2xlQnV0dG9uQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1odWdlcGxheWJhY2t0b2dnbGVidXR0b24nLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3BsYXlQYXVzZScpLFxuICAgICAgcm9sZTogJ2J1dHRvbicsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgLy8gVXBkYXRlIGJ1dHRvbiBzdGF0ZSB0aHJvdWdoIEFQSSBldmVudHNcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIsIGZhbHNlKTtcblxuICAgIC8vIFNldCBlbnRlckZ1bGxzY3JlZW5PbkluaXRpYWxQbGF5YmFjayBpZiBzZXQgaW4gdGhlIHVpbWFuYWdlciBjb25maWdcbiAgICBpZiAodHlwZW9mIHVpbWFuYWdlci5nZXRDb25maWcoKS5lbnRlckZ1bGxzY3JlZW5PbkluaXRpYWxQbGF5YmFjayA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICB0aGlzLmNvbmZpZy5lbnRlckZ1bGxzY3JlZW5PbkluaXRpYWxQbGF5YmFjayA9IHVpbWFuYWdlci5nZXRDb25maWcoKS5lbnRlckZ1bGxzY3JlZW5PbkluaXRpYWxQbGF5YmFjaztcbiAgICB9XG5cbiAgICBsZXQgdG9nZ2xlUGxheWJhY2sgPSAoKSA9PiB7XG4gICAgICBpZiAocGxheWVyLmlzUGxheWluZygpIHx8IHRoaXMuaXNQbGF5SW5pdGlhdGVkKSB7XG4gICAgICAgIHBsYXllci5wYXVzZSgndWknKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBsYXllci5wbGF5KCd1aScpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBsZXQgdG9nZ2xlRnVsbHNjcmVlbiA9ICgpID0+IHtcbiAgICAgIGlmIChwbGF5ZXIuZ2V0Vmlld01vZGUoKSA9PT0gcGxheWVyLmV4cG9ydHMuVmlld01vZGUuRnVsbHNjcmVlbikge1xuICAgICAgICBwbGF5ZXIuc2V0Vmlld01vZGUocGxheWVyLmV4cG9ydHMuVmlld01vZGUuSW5saW5lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBsYXllci5zZXRWaWV3TW9kZShwbGF5ZXIuZXhwb3J0cy5WaWV3TW9kZS5GdWxsc2NyZWVuKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbGV0IGZpcnN0UGxheSA9IHRydWU7XG4gICAgbGV0IGNsaWNrVGltZSA9IDA7XG4gICAgbGV0IGRvdWJsZUNsaWNrVGltZSA9IDA7XG5cbiAgICAvKlxuICAgICAqIFlvdVR1YmUtc3R5bGUgdG9nZ2xlIGJ1dHRvbiBoYW5kbGluZ1xuICAgICAqXG4gICAgICogVGhlIGdvYWwgaXMgdG8gcHJldmVudCBhIHNob3J0IHBhdXNlIG9yIHBsYXliYWNrIGludGVydmFsIGJldHdlZW4gYSBjbGljaywgdGhhdCB0b2dnbGVzIHBsYXliYWNrLCBhbmQgYVxuICAgICAqIGRvdWJsZSBjbGljaywgdGhhdCB0b2dnbGVzIGZ1bGxzY3JlZW4uIEluIHRoaXMgbmFpdmUgYXBwcm9hY2gsIHRoZSBmaXJzdCBjbGljayB3b3VsZCBlLmcuIHN0YXJ0IHBsYXliYWNrLFxuICAgICAqIHRoZSBzZWNvbmQgY2xpY2sgd291bGQgYmUgZGV0ZWN0ZWQgYXMgZG91YmxlIGNsaWNrIGFuZCB0b2dnbGUgdG8gZnVsbHNjcmVlbiwgYW5kIGFzIHNlY29uZCBub3JtYWwgY2xpY2sgc3RvcFxuICAgICAqIHBsYXliYWNrLCB3aGljaCByZXN1bHRzIGlzIGEgc2hvcnQgcGxheWJhY2sgaW50ZXJ2YWwgd2l0aCBtYXggbGVuZ3RoIG9mIHRoZSBkb3VibGUgY2xpY2sgZGV0ZWN0aW9uXG4gICAgICogcGVyaW9kICh1c3VhbGx5IDUwMG1zKS5cbiAgICAgKlxuICAgICAqIFRvIHNvbHZlIHRoaXMgaXNzdWUsIHdlIGRlZmVyIGhhbmRsaW5nIG9mIHRoZSBmaXJzdCBjbGljayBmb3IgMjAwbXMsIHdoaWNoIGlzIGFsbW9zdCB1bm5vdGljZWFibGUgdG8gdGhlIHVzZXIsXG4gICAgICogYW5kIGp1c3QgdG9nZ2xlIHBsYXliYWNrIGlmIG5vIHNlY29uZCBjbGljayAoZG91YmxlIGNsaWNrKSBoYXMgYmVlbiByZWdpc3RlcmVkIGR1cmluZyB0aGlzIHBlcmlvZC4gSWYgYSBkb3VibGVcbiAgICAgKiBjbGljayBpcyByZWdpc3RlcmVkLCB3ZSBqdXN0IHRvZ2dsZSB0aGUgZnVsbHNjcmVlbi4gSW4gdGhlIGZpcnN0IDIwMG1zLCB1bmRlc2lyZWQgcGxheWJhY2sgY2hhbmdlcyB0aHVzIGNhbm5vdFxuICAgICAqIGhhcHBlbi4gSWYgYSBkb3VibGUgY2xpY2sgaXMgcmVnaXN0ZXJlZCB3aXRoaW4gNTAwbXMsIHdlIHVuZG8gdGhlIHBsYXliYWNrIGNoYW5nZSBhbmQgc3dpdGNoIGZ1bGxzY3JlZW4gbW9kZS5cbiAgICAgKiBJbiB0aGUgZW5kLCB0aGlzIG1ldGhvZCBiYXNpY2FsbHkgaW50cm9kdWNlcyBhIDIwMG1zIG9ic2VydmluZyBpbnRlcnZhbCBpbiB3aGljaCBwbGF5YmFjayBjaGFuZ2VzIGFyZSBwcmV2ZW50ZWRcbiAgICAgKiBpZiBhIGRvdWJsZSBjbGljayBoYXBwZW5zLlxuICAgICAqL1xuICAgIHRoaXMub25DbGljay5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgLy8gRGlyZWN0bHkgc3RhcnQgcGxheWJhY2sgb24gZmlyc3QgY2xpY2sgb2YgdGhlIGJ1dHRvbi5cbiAgICAgIC8vIFRoaXMgaXMgYSByZXF1aXJlZCB3b3JrYXJvdW5kIGZvciBtb2JpbGUgYnJvd3NlcnMgd2hlcmUgdmlkZW8gcGxheWJhY2sgbmVlZHMgdG8gYmUgdHJpZ2dlcmVkIGRpcmVjdGx5XG4gICAgICAvLyBieSB0aGUgdXNlci4gQSBkZWZlcnJlZCBwbGF5YmFjayBzdGFydCB0aHJvdWdoIHRoZSB0aW1lb3V0IGJlbG93IGlzIG5vdCBjb25zaWRlcmVkIGFzIHVzZXIgYWN0aW9uIGFuZFxuICAgICAgLy8gdGhlcmVmb3JlIGlnbm9yZWQgYnkgbW9iaWxlIGJyb3dzZXJzLlxuICAgICAgaWYgKGZpcnN0UGxheSkge1xuICAgICAgICAvLyBUcnkgdG8gc3RhcnQgcGxheWJhY2suIFRoZW4gd2Ugd2FpdCBmb3IgUGxheSBhbmQgb25seSB3aGVuIGl0IGFycml2ZXMsIHdlIGRpc2FibGUgdGhlIGZpcnN0UGxheSBmbGFnLlxuICAgICAgICAvLyBJZiB3ZSBkaXNhYmxlIHRoZSBmbGFnIGhlcmUsIG9uQ2xpY2sgd2FzIHRyaWdnZXJlZCBwcm9ncmFtbWF0aWNhbGx5IGluc3RlYWQgb2YgYnkgYSB1c2VyIGludGVyYWN0aW9uLCBhbmRcbiAgICAgICAgLy8gcGxheWJhY2sgaXMgYmxvY2tlZCAoZS5nLiBvbiBtb2JpbGUgZGV2aWNlcyBkdWUgdG8gdGhlIHByb2dyYW1tYXRpYyBwbGF5KCkgY2FsbCksIHdlIGxvb3NlIHRoZSBjaGFuY2UgdG9cbiAgICAgICAgLy8gZXZlciBzdGFydCBwbGF5YmFjayB0aHJvdWdoIGEgdXNlciBpbnRlcmFjdGlvbiBhZ2FpbiB3aXRoIHRoaXMgYnV0dG9uLlxuICAgICAgICB0b2dnbGVQbGF5YmFjaygpO1xuXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5lbnRlckZ1bGxzY3JlZW5PbkluaXRpYWxQbGF5YmFjaykge1xuICAgICAgICAgIHBsYXllci5zZXRWaWV3TW9kZShwbGF5ZXIuZXhwb3J0cy5WaWV3TW9kZS5GdWxsc2NyZWVuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGV0IG5vdyA9IERhdGUubm93KCk7XG5cbiAgICAgIGlmIChub3cgLSBjbGlja1RpbWUgPCAyMDApIHtcbiAgICAgICAgLy8gV2UgaGF2ZSBhIGRvdWJsZSBjbGljayBpbnNpZGUgdGhlIDIwMG1zIGludGVydmFsLCBqdXN0IHRvZ2dsZSBmdWxsc2NyZWVuIG1vZGVcbiAgICAgICAgdG9nZ2xlRnVsbHNjcmVlbigpO1xuICAgICAgICBkb3VibGVDbGlja1RpbWUgPSBub3c7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAobm93IC0gY2xpY2tUaW1lIDwgNTAwKSB7XG4gICAgICAgIC8vIFdlIGhhdmUgYSBkb3VibGUgY2xpY2sgaW5zaWRlIHRoZSA1MDBtcyBpbnRlcnZhbCwgdW5kbyBwbGF5YmFjayB0b2dnbGUgYW5kIHRvZ2dsZSBmdWxsc2NyZWVuIG1vZGVcbiAgICAgICAgdG9nZ2xlRnVsbHNjcmVlbigpO1xuICAgICAgICB0b2dnbGVQbGF5YmFjaygpO1xuICAgICAgICBkb3VibGVDbGlja1RpbWUgPSBub3c7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2xpY2tUaW1lID0gbm93O1xuXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKERhdGUubm93KCkgLSBkb3VibGVDbGlja1RpbWUgPiAyMDApIHtcbiAgICAgICAgICAvLyBObyBkb3VibGUgY2xpY2sgZGV0ZWN0ZWQsIHNvIHdlIHRvZ2dsZSBwbGF5YmFjayBhbmQgd2FpdCB3aGF0IGhhcHBlbnMgbmV4dFxuICAgICAgICAgIHRvZ2dsZVBsYXliYWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIDIwMCk7XG4gICAgfSk7XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheSwgKCkgPT4ge1xuICAgICAgLy8gUGxheWJhY2sgaGFzIHJlYWxseSBzdGFydGVkLCB3ZSBjYW4gZGlzYWJsZSB0aGUgZmxhZyB0byBzd2l0Y2ggdG8gbm9ybWFsIHRvZ2dsZSBidXR0b24gaGFuZGxpbmdcbiAgICAgIGZpcnN0UGxheSA9IGZhbHNlO1xuICAgIH0pO1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50Lldhcm5pbmcsIChldmVudDogV2FybmluZ0V2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQuY29kZSA9PT0gcGxheWVyLmV4cG9ydHMuV2FybmluZ0NvZGUuUExBWUJBQ0tfQ09VTERfTk9UX0JFX1NUQVJURUQpIHtcbiAgICAgICAgLy8gaWYgcGxheWJhY2sgY291bGQgbm90IGJlIHN0YXJ0ZWQsIHJlc2V0IHRoZSBmaXJzdCBwbGF5IGZsYWcgYXMgd2UgbmVlZCB0aGUgdXNlciBpbnRlcmFjdGlvbiB0byBzdGFydFxuICAgICAgICBmaXJzdFBsYXkgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3Qgc3VwcHJlc3NQbGF5QnV0dG9uVHJhbnNpdGlvbkFuaW1hdGlvbiA9ICgpID0+IHtcbiAgICAgIC8vIERpc2FibGUgdGhlIGN1cnJlbnQgYW5pbWF0aW9uXG4gICAgICB0aGlzLnNldFRyYW5zaXRpb25BbmltYXRpb25zRW5hYmxlZChmYWxzZSk7XG5cbiAgICAgIC8vIEVuYWJsZSB0aGUgdHJhbnNpdGlvbiBhbmltYXRpb25zIGZvciB0aGUgbmV4dCBzdGF0ZSBjaGFuZ2VcbiAgICAgIHRoaXMub25Ub2dnbGUuc3Vic2NyaWJlT25jZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0VHJhbnNpdGlvbkFuaW1hdGlvbnNFbmFibGVkKHRydWUpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIEhpZGUgdGhlIHBsYXkgYnV0dG9uIGFuaW1hdGlvbiB3aGVuIHRoZSBVSSBpcyBsb2FkZWQgKGl0IHNob3VsZCBvbmx5IGJlIGFuaW1hdGVkIG9uIHN0YXRlIGNoYW5nZXMpXG4gICAgc3VwcHJlc3NQbGF5QnV0dG9uVHJhbnNpdGlvbkFuaW1hdGlvbigpO1xuXG4gICAgY29uc3QgaXNBdXRvcGxheUVuYWJsZWQgPSBwbGF5ZXIuZ2V0Q29uZmlnKCkucGxheWJhY2sgJiYgQm9vbGVhbihwbGF5ZXIuZ2V0Q29uZmlnKCkucGxheWJhY2suYXV0b3BsYXkpO1xuICAgIC8vIFdlIG9ubHkga25vdyBpZiBhbiBhdXRvcGxheSBhdHRlbXB0IGlzIHVwY29taW5nIGlmIHRoZSBwbGF5ZXIgaXMgbm90IHlldCByZWFkeS4gSXQgdGhlIHBsYXllciBpcyBhbHJlYWR5IHJlYWR5LFxuICAgIC8vIHRoZSBhdHRlbXB0IG1pZ2h0IGJlIHVwY29taW5nIG9yIG1pZ2h0IGhhdmUgYWxyZWFkeSBoYXBwZW5lZCwgYnV0IHdlIGRvbid0IGhhdmUgdG8gaGFuZGxlIHRoYXQgYmVjYXVzZSB3ZSBjYW5cbiAgICAvLyBzaW1wbHkgcmVseSBvbiBpc1BsYXlpbmcgYW5kIHRoZSBwbGF5IHN0YXRlIGV2ZW50cy5cbiAgICBjb25zdCBpc0F1dG9wbGF5VXBjb21pbmcgPSAhcGxheWVyLmdldFNvdXJjZSgpICYmIGlzQXV0b3BsYXlFbmFibGVkO1xuXG4gICAgLy8gSGlkZSB0aGUgcGxheSBidXR0b24gd2hlbiB0aGUgcGxheWVyIGlzIGFscmVhZHkgcGxheWluZyBvciBhdXRvcGxheSBpcyB1cGNvbWluZ1xuICAgIGlmIChwbGF5ZXIuaXNQbGF5aW5nKCkgfHwgaXNBdXRvcGxheVVwY29taW5nKSB7XG4gICAgICAvLyBIaWRlIHRoZSBwbGF5IGJ1dHRvbiAoc3dpdGNoIHRvIHBsYXlpbmcgc3RhdGUpXG4gICAgICB0aGlzLm9uKCk7XG4gICAgICAvLyBEaXNhYmxlIHRoZSBhbmltYXRpb24gb2YgdGhlIHBsYXlpbmcgc3RhdGUgc3dpdGNoXG4gICAgICBzdXBwcmVzc1BsYXlCdXR0b25UcmFuc2l0aW9uQW5pbWF0aW9uKCk7XG5cbiAgICAgIC8vIFNob3cgdGhlIHBsYXkgYnV0dG9uIHdpdGhvdXQgYW4gYW5pbWF0aW9uIGlmIGEgcGxheSBhdHRlbXB0IGlzIGJsb2NrZWRcbiAgICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5XYXJuaW5nLCAoZXZlbnQ6IFdhcm5pbmdFdmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQuY29kZSA9PT0gcGxheWVyLmV4cG9ydHMuV2FybmluZ0NvZGUuUExBWUJBQ0tfQ09VTERfTk9UX0JFX1NUQVJURUQpIHtcbiAgICAgICAgICBzdXBwcmVzc1BsYXlCdXR0b25UcmFuc2l0aW9uQW5pbWF0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCB0b0RvbUVsZW1lbnQoKTogRE9NIHtcbiAgICBsZXQgYnV0dG9uRWxlbWVudCA9IHN1cGVyLnRvRG9tRWxlbWVudCgpO1xuXG4gICAgLy8gQWRkIGNoaWxkIHRoYXQgY29udGFpbnMgdGhlIHBsYXkgYnV0dG9uIGltYWdlXG4gICAgLy8gU2V0dGluZyB0aGUgaW1hZ2UgZGlyZWN0bHkgb24gdGhlIGJ1dHRvbiBkb2VzIG5vdCB3b3JrIHRvZ2V0aGVyIHdpdGggc2NhbGluZyBhbmltYXRpb25zLCBiZWNhdXNlIHRoZSBidXR0b25cbiAgICAvLyBjYW4gY292ZXIgdGhlIHdob2xlIHZpZGVvIHBsYXllciBhcmUgYW5kIHNjYWxpbmcgd291bGQgZXh0ZW5kIGl0IGJleW9uZC4gQnkgYWRkaW5nIGFuIGlubmVyIGVsZW1lbnQsIGNvbmZpbmVkXG4gICAgLy8gdG8gdGhlIHNpemUgaWYgdGhlIGltYWdlLCBpdCBjYW4gc2NhbGUgaW5zaWRlIHRoZSBwbGF5ZXIgd2l0aG91dCBvdmVyc2hvb3RpbmcuXG4gICAgYnV0dG9uRWxlbWVudC5hcHBlbmQobmV3IERPTSgnZGl2Jywge1xuICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ2ltYWdlJyksXG4gICAgfSkpO1xuXG4gICAgcmV0dXJuIGJ1dHRvbkVsZW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICogRW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgcGxheSBzdGF0ZSB0cmFuc2l0aW9uIGFuaW1hdGlvbnMgb2YgdGhlIHBsYXkgYnV0dG9uIGltYWdlLiBDYW4gYmUgdXNlZCB0byBzdXBwcmVzc1xuICAgKiBhbmltYXRpb25zLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGVuYWJsZWQgdHJ1ZSB0byBlbmFibGUgdGhlIGFuaW1hdGlvbnMgKGRlZmF1bHQpLCBmYWxzZSB0byBkaXNhYmxlIHRoZW1cbiAgICovXG4gIHByb3RlY3RlZCBzZXRUcmFuc2l0aW9uQW5pbWF0aW9uc0VuYWJsZWQoZW5hYmxlZDogYm9vbGVhbik6IHZvaWQge1xuICAgIGNvbnN0IG5vVHJhbnNpdGlvbkFuaW1hdGlvbnNDbGFzcyA9IHRoaXMucHJlZml4Q3NzKCduby10cmFuc2l0aW9uLWFuaW1hdGlvbnMnKTtcblxuICAgIGlmIChlbmFibGVkKSB7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5yZW1vdmVDbGFzcyhub1RyYW5zaXRpb25BbmltYXRpb25zQ2xhc3MpO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMuZ2V0RG9tRWxlbWVudCgpLmhhc0NsYXNzKG5vVHJhbnNpdGlvbkFuaW1hdGlvbnNDbGFzcykpIHtcbiAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmFkZENsYXNzKG5vVHJhbnNpdGlvbkFuaW1hdGlvbnNDbGFzcyk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge0J1dHRvbkNvbmZpZywgQnV0dG9ufSBmcm9tICcuL2J1dHRvbic7XG5pbXBvcnQge0RPTX0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIGJ1dHRvbiB0byBwbGF5L3JlcGxheSBhIHZpZGVvLlxuICpcbiAqIEBjYXRlZ29yeSBCdXR0b25zXG4gKi9cbmV4cG9ydCBjbGFzcyBIdWdlUmVwbGF5QnV0dG9uIGV4dGVuZHMgQnV0dG9uPEJ1dHRvbkNvbmZpZz4ge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQnV0dG9uQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1odWdlcmVwbGF5YnV0dG9uJyxcbiAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdyZXBsYXknKSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBwbGF5ZXIucGxheSgndWknKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0b0RvbUVsZW1lbnQoKTogRE9NIHtcbiAgICBsZXQgYnV0dG9uRWxlbWVudCA9IHN1cGVyLnRvRG9tRWxlbWVudCgpO1xuXG4gICAgLy8gQWRkIGNoaWxkIHRoYXQgY29udGFpbnMgdGhlIHBsYXkgYnV0dG9uIGltYWdlXG4gICAgLy8gU2V0dGluZyB0aGUgaW1hZ2UgZGlyZWN0bHkgb24gdGhlIGJ1dHRvbiBkb2VzIG5vdCB3b3JrIHRvZ2V0aGVyIHdpdGggc2NhbGluZyBhbmltYXRpb25zLCBiZWNhdXNlIHRoZSBidXR0b25cbiAgICAvLyBjYW4gY292ZXIgdGhlIHdob2xlIHZpZGVvIHBsYXllciBhcmUgYW5kIHNjYWxpbmcgd291bGQgZXh0ZW5kIGl0IGJleW9uZC4gQnkgYWRkaW5nIGFuIGlubmVyIGVsZW1lbnQsIGNvbmZpbmVkXG4gICAgLy8gdG8gdGhlIHNpemUgaWYgdGhlIGltYWdlLCBpdCBjYW4gc2NhbGUgaW5zaWRlIHRoZSBwbGF5ZXIgd2l0aG91dCBvdmVyc2hvb3RpbmcuXG4gICAgYnV0dG9uRWxlbWVudC5hcHBlbmQobmV3IERPTSgnZGl2Jywge1xuICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ2ltYWdlJyksXG4gICAgfSkpO1xuXG4gICAgcmV0dXJuIGJ1dHRvbkVsZW1lbnQ7XG4gIH1cbn0iLCJpbXBvcnQge0xpc3RTZWxlY3RvciwgTGlzdFNlbGVjdG9yQ29uZmlnfSBmcm9tICcuL2xpc3RzZWxlY3Rvcic7XG5pbXBvcnQge0RPTX0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQGNhdGVnb3J5IENvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGNsYXNzIEl0ZW1TZWxlY3Rpb25MaXN0IGV4dGVuZHMgTGlzdFNlbGVjdG9yPExpc3RTZWxlY3RvckNvbmZpZz4ge1xuXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENMQVNTX1NFTEVDVEVEID0gJ3NlbGVjdGVkJztcblxuICBwcml2YXRlIGxpc3RFbGVtZW50OiBET007XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBMaXN0U2VsZWN0b3JDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICB0YWc6ICd1bCcsXG4gICAgICBjc3NDbGFzczogJ3VpLWl0ZW1zZWxlY3Rpb25saXN0JyxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgaXNBY3RpdmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXMubGVuZ3RoID4gMTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0b0RvbUVsZW1lbnQoKTogRE9NIHtcbiAgICBsZXQgbGlzdEVsZW1lbnQgPSBuZXcgRE9NKCd1bCcsIHtcbiAgICAgICdpZCc6IHRoaXMuY29uZmlnLmlkLFxuICAgICAgJ2NsYXNzJzogdGhpcy5nZXRDc3NDbGFzc2VzKCksXG4gICAgfSwgdGhpcyk7XG5cbiAgICB0aGlzLmxpc3RFbGVtZW50ID0gbGlzdEVsZW1lbnQ7XG4gICAgdGhpcy51cGRhdGVEb21JdGVtcygpO1xuXG4gICAgcmV0dXJuIGxpc3RFbGVtZW50O1xuICB9XG5cbiAgcHJvdGVjdGVkIHVwZGF0ZURvbUl0ZW1zKHNlbGVjdGVkVmFsdWU6IHN0cmluZyA9IG51bGwpIHtcbiAgICAvLyBEZWxldGUgYWxsIGNoaWxkcmVuXG4gICAgdGhpcy5saXN0RWxlbWVudC5lbXB0eSgpO1xuXG4gICAgbGV0IHNlbGVjdGVkTGlzdEl0ZW06IERPTSA9IG51bGw7XG5cbiAgICBjb25zdCBzZWxlY3RJdGVtID0gKGxpc3RJdGVtOiBET00pID0+IHtcbiAgICAgIGxpc3RJdGVtLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKEl0ZW1TZWxlY3Rpb25MaXN0LkNMQVNTX1NFTEVDVEVEKSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGRlc2VsZWN0SXRlbSA9IChsaXN0SXRlbTogRE9NKSA9PiB7XG4gICAgICBsaXN0SXRlbS5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeENzcyhJdGVtU2VsZWN0aW9uTGlzdC5DTEFTU19TRUxFQ1RFRCkpO1xuICAgIH07XG5cbiAgICBmb3IgKGxldCBpdGVtIG9mIHRoaXMuaXRlbXMpIHtcbiAgICAgIGxldCBsaXN0SXRlbSA9IG5ldyBET00oJ2xpJywge1xuICAgICAgICAndHlwZSc6ICdsaScsXG4gICAgICAgICdjbGFzcyc6IHRoaXMucHJlZml4Q3NzKCd1aS1zZWxlY3Rpb25saXN0aXRlbScpLFxuICAgICAgfSkuYXBwZW5kKG5ldyBET00oJ2EnLCB7XG4gICAgICB9KS5odG1sKGkxOG4ucGVyZm9ybUxvY2FsaXphdGlvbihpdGVtLmxhYmVsKSkpO1xuXG4gICAgICBpZiAoIXNlbGVjdGVkTGlzdEl0ZW0pIHtcbiAgICAgICAgaWYgKHNlbGVjdGVkVmFsdWUgPT0gbnVsbCkgeyAvLyBJZiB0aGVyZSBpcyBubyBwcmUtc2VsZWN0ZWQgdmFsdWUsIHNlbGVjdCB0aGUgZmlyc3Qgb25lXG4gICAgICAgICAgc2VsZWN0ZWRMaXN0SXRlbSA9IGxpc3RJdGVtO1xuICAgICAgICB9IGVsc2UgaWYgKFN0cmluZyhzZWxlY3RlZFZhbHVlKSA9PT0gaXRlbS5rZXkpIHsgLy8gY29udmVydCBzZWxlY3RlZFZhbHVlIHRvIHN0cmluZyB0byBjYXRjaCAnbnVsbCcvbnVsbCBjYXNlXG4gICAgICAgICAgc2VsZWN0ZWRMaXN0SXRlbSA9IGxpc3RJdGVtO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEhhbmRsZSBsaXN0IGl0ZW0gc2VsZWN0aW9uc1xuICAgICAgbGlzdEl0ZW0ub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAvLyBEZXNlbGVjdCB0aGUgcHJldmlvdXMgaXRlbSAoaWYgdGhlcmUgd2FzIGEgc2VsZWN0ZWQgaXRlbSlcbiAgICAgICAgaWYgKHNlbGVjdGVkTGlzdEl0ZW0pIHtcbiAgICAgICAgICBkZXNlbGVjdEl0ZW0oc2VsZWN0ZWRMaXN0SXRlbSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZWxlY3QgdGhlIGNsaWNrZWQgaXRlbVxuICAgICAgICBzZWxlY3RlZExpc3RJdGVtID0gbGlzdEl0ZW07XG4gICAgICAgIHNlbGVjdEl0ZW0obGlzdEl0ZW0pO1xuXG4gICAgICAgIC8vIEZpcmUgdGhlIGV2ZW50XG4gICAgICAgIHRoaXMub25JdGVtU2VsZWN0ZWRFdmVudChpdGVtLmtleSwgZmFsc2UpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFNlbGVjdCBkZWZhdWx0IGl0ZW1cbiAgICAgIGlmIChzZWxlY3RlZExpc3RJdGVtKSB7XG4gICAgICAgIHNlbGVjdEl0ZW0oc2VsZWN0ZWRMaXN0SXRlbSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGlzdEVsZW1lbnQuYXBwZW5kKGxpc3RJdGVtKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgb25JdGVtQWRkZWRFdmVudCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIub25JdGVtQWRkZWRFdmVudCh2YWx1ZSk7XG4gICAgdGhpcy51cGRhdGVEb21JdGVtcyh0aGlzLnNlbGVjdGVkSXRlbSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25JdGVtUmVtb3ZlZEV2ZW50KHZhbHVlOiBzdHJpbmcpIHtcbiAgICBzdXBlci5vbkl0ZW1SZW1vdmVkRXZlbnQodmFsdWUpO1xuICAgIHRoaXMudXBkYXRlRG9tSXRlbXModGhpcy5zZWxlY3RlZEl0ZW0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uSXRlbVNlbGVjdGVkRXZlbnQodmFsdWU6IHN0cmluZywgdXBkYXRlRG9tSXRlbXM6IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgc3VwZXIub25JdGVtU2VsZWN0ZWRFdmVudCh2YWx1ZSk7XG4gICAgaWYgKHVwZGF0ZURvbUl0ZW1zKSB7XG4gICAgICB0aGlzLnVwZGF0ZURvbUl0ZW1zKHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7Q29tcG9uZW50Q29uZmlnLCBDb21wb25lbnR9IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCB7RE9NfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHtFdmVudERpc3BhdGNoZXIsIEV2ZW50LCBOb0FyZ3N9IGZyb20gJy4uL2V2ZW50ZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBMb2NhbGl6YWJsZVRleHQsIGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIGEge0BsaW5rIExhYmVsfSBjb21wb25lbnQuXG4gKlxuICogQGNhdGVnb3J5IENvbmZpZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMYWJlbENvbmZpZyBleHRlbmRzIENvbXBvbmVudENvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgdGV4dCBhcyBzdHJpbmcgb3IgbG9jYWxpemUgY2FsbGJhY2sgb24gdGhlIGxhYmVsLlxuICAgKi9cbiAgdGV4dD86IExvY2FsaXphYmxlVGV4dDtcblxuICAvKipcbiAgICogV0NBRzIwIHN0YW5kYXJkOiBBc3NvY2lhdGUgbGFiZWwgdG8gZm9ybSBjb250cm9sLlxuICAgKi9cbiAgZm9yPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgc2ltcGxlIHRleHQgbGFiZWwuXG4gKlxuICogRE9NIGV4YW1wbGU6XG4gKiA8Y29kZT5cbiAqICAgICA8c3BhbiBjbGFzcz0ndWktbGFiZWwnPi4uLnNvbWUgdGV4dC4uLjwvc3Bhbj5cbiAqIDwvY29kZT5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29tcG9uZW50c1xuICovXG5leHBvcnQgY2xhc3MgTGFiZWw8Q29uZmlnIGV4dGVuZHMgTGFiZWxDb25maWc+IGV4dGVuZHMgQ29tcG9uZW50PENvbmZpZz4ge1xuXG4gIHByaXZhdGUgdGV4dDogTG9jYWxpemFibGVUZXh0O1xuXG4gIHByaXZhdGUgbGFiZWxFdmVudHMgPSB7XG4gICAgb25DbGljazogbmV3IEV2ZW50RGlzcGF0Y2hlcjxMYWJlbDxDb25maWc+LCBOb0FyZ3M+KCksXG4gICAgb25UZXh0Q2hhbmdlZDogbmV3IEV2ZW50RGlzcGF0Y2hlcjxMYWJlbDxDb25maWc+LCBzdHJpbmc+KCksXG4gIH07XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBDb25maWcgPSB7fSBhcyBDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1sYWJlbCcsXG4gICAgfSBhcyBDb25maWcsIHRoaXMuY29uZmlnKTtcbiAgICB0aGlzLnRleHQgPSB0aGlzLmNvbmZpZy50ZXh0O1xuICB9XG5cbiAgcHJvdGVjdGVkIHRvRG9tRWxlbWVudCgpOiBET00ge1xuICAgIGNvbnN0IHRhZ05hbWUgPSB0aGlzLmNvbmZpZy5mb3IgIT0gbnVsbCA/ICdsYWJlbCcgOiAnc3Bhbic7XG5cbiAgICBsZXQgbGFiZWxFbGVtZW50ID0gbmV3IERPTSh0YWdOYW1lLCB7XG4gICAgICAnaWQnOiB0aGlzLmNvbmZpZy5pZCxcbiAgICAgICdmb3InOiB0aGlzLmNvbmZpZy5mb3IsXG4gICAgICAnY2xhc3MnOiB0aGlzLmdldENzc0NsYXNzZXMoKSxcbiAgICB9LCB0aGlzKS5odG1sKGkxOG4ucGVyZm9ybUxvY2FsaXphdGlvbih0aGlzLnRleHQpKTtcblxuICAgIGxhYmVsRWxlbWVudC5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLm9uQ2xpY2tFdmVudCgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGxhYmVsRWxlbWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHRleHQgb24gdGhpcyBsYWJlbC5cbiAgICogQHBhcmFtIHRleHRcbiAgICovXG4gIHNldFRleHQodGV4dDogTG9jYWxpemFibGVUZXh0KSB7XG4gICAgaWYgKHRleHQgPT09IHRoaXMudGV4dCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgY29uc3QgbG9jYWxpemVkVGV4dCA9IGkxOG4ucGVyZm9ybUxvY2FsaXphdGlvbih0ZXh0KTtcbiAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5odG1sKGxvY2FsaXplZFRleHQpO1xuICAgIHRoaXMub25UZXh0Q2hhbmdlZEV2ZW50KGxvY2FsaXplZFRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHRleHQgb24gdGhpcyBsYWJlbC5cbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgdGV4dCBvbiB0aGUgbGFiZWxcbiAgICovXG4gIGdldFRleHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gaTE4bi5wZXJmb3JtTG9jYWxpemF0aW9uKHRoaXMudGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIHRoZSB0ZXh0IG9uIHRoaXMgbGFiZWwuXG4gICAqL1xuICBjbGVhclRleHQoKSB7XG4gICAgdGhpcy5nZXREb21FbGVtZW50KCkuaHRtbCgnJyk7XG4gICAgdGhpcy5vblRleHRDaGFuZ2VkRXZlbnQobnVsbCk7XG4gIH1cblxuICAvKipcbiAgICogVGVzdHMgaWYgdGhlIGxhYmVsIGlzIGVtcHR5IGFuZCBkb2VzIG5vdCBjb250YWluIGFueSB0ZXh0LlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBsYWJlbCBpcyBlbXB0eSwgZWxzZSBmYWxzZVxuICAgKi9cbiAgaXNFbXB0eSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMudGV4dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB0aGUge0BsaW5rICNvbkNsaWNrfSBldmVudC5cbiAgICogQ2FuIGJlIHVzZWQgYnkgc3ViY2xhc3NlcyB0byBsaXN0ZW4gdG8gdGhpcyBldmVudCB3aXRob3V0IHN1YnNjcmliaW5nIGFuIGV2ZW50IGxpc3RlbmVyIGJ5IG92ZXJ3cml0aW5nIHRoZSBtZXRob2RcbiAgICogYW5kIGNhbGxpbmcgdGhlIHN1cGVyIG1ldGhvZC5cbiAgICovXG4gIHByb3RlY3RlZCBvbkNsaWNrRXZlbnQoKSB7XG4gICAgdGhpcy5sYWJlbEV2ZW50cy5vbkNsaWNrLmRpc3BhdGNoKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHRoZSB7QGxpbmsgI29uQ2xpY2t9IGV2ZW50LlxuICAgKiBDYW4gYmUgdXNlZCBieSBzdWJjbGFzc2VzIHRvIGxpc3RlbiB0byB0aGlzIGV2ZW50IHdpdGhvdXQgc3Vic2NyaWJpbmcgYW4gZXZlbnQgbGlzdGVuZXIgYnkgb3ZlcndyaXRpbmcgdGhlIG1ldGhvZFxuICAgKiBhbmQgY2FsbGluZyB0aGUgc3VwZXIgbWV0aG9kLlxuICAgKi9cbiAgcHJvdGVjdGVkIG9uVGV4dENoYW5nZWRFdmVudCh0ZXh0OiBzdHJpbmcpIHtcbiAgICB0aGlzLmxhYmVsRXZlbnRzLm9uVGV4dENoYW5nZWQuZGlzcGF0Y2godGhpcywgdGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgZXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIHRoZSBsYWJlbCBpcyBjbGlja2VkLlxuICAgKiBAcmV0dXJucyB7RXZlbnQ8TGFiZWw8TGFiZWxDb25maWc+LCBOb0FyZ3M+fVxuICAgKi9cbiAgZ2V0IG9uQ2xpY2soKTogRXZlbnQ8TGFiZWw8TGFiZWxDb25maWc+LCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5sYWJlbEV2ZW50cy5vbkNsaWNrLmdldEV2ZW50KCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgZXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIHRoZSB0ZXh0IG9uIHRoZSBsYWJlbCBpcyBjaGFuZ2VkLlxuICAgKiBAcmV0dXJucyB7RXZlbnQ8TGFiZWw8TGFiZWxDb25maWc+LCBzdHJpbmc+fVxuICAgKi9cbiAgZ2V0IG9uVGV4dENoYW5nZWQoKTogRXZlbnQ8TGFiZWw8TGFiZWxDb25maWc+LCBzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5sYWJlbEV2ZW50cy5vblRleHRDaGFuZ2VkLmdldEV2ZW50KCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFRvZ2dsZUJ1dHRvbiwgVG9nZ2xlQnV0dG9uQ29uZmlnIH0gZnJvbSAnLi90b2dnbGVidXR0b24nO1xuaW1wb3J0IHsgTGlzdEl0ZW0sIExpc3RTZWxlY3RvciwgTGlzdFNlbGVjdG9yQ29uZmlnIH0gZnJvbSAnLi9saXN0c2VsZWN0b3InO1xuaW1wb3J0IHtET019IGZyb20gJy4uL2RvbSc7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgQXJyYXlVdGlscyB9IGZyb20gJy4uL2FycmF5dXRpbHMnO1xuXG4vKipcbiAqIEEgZWxlbWVudCB0byBzZWxlY3QgYSBzaW5nbGUgaXRlbSBvdXQgb2YgYSBsaXN0IG9mIGF2YWlsYWJsZSBpdGVtcy5cbiAqXG4gKiBET00gZXhhbXBsZTpcbiAqIDxjb2RlPlxuICogICA8ZGl2IGNsYXNzPSd1aS1saXN0Ym94Jz5cbiAqICAgICA8YnV0dG9uIGNsYXNzPSd1aS1saXN0Ym94LWJ1dHRvbic+bGFiZWw8L2J1dHRvbj5cbiAqICAgICAuLi5cbiAqICAgPC9kaXZcbiAqIDwvY29kZT5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29tcG9uZW50c1xuICovXG4vLyBUT0RPOiBjaGFuZ2UgTGlzdFNlbGVjdG9yIHRvIGV4dGVuZHMgY29udGFpbmVyIGluIHY0IHRvIGltcHJvdmUgdXNhZ2Ugb2YgTGlzdEJveC5cbi8vICAgICAgIEN1cnJlbnRseSB3ZSBhcmUgY3JlYXRpbmcgdGhlIGRvbSBlbGVtZW50IG9mIHRoZSBsaXN0IGJveCB3aXRoIGNoaWxkIGVsZW1lbnRzIG1hbnVhbGx5IGhlcmUuXG4vLyAgICAgICBCdXQgdGhpcyBmdW5jdGlvbmFsaXR5IGlzIGFscmVhZHkgY292ZXJlZCB3aXRoaW4gdGhlIENvbnRhaW5lciBjb21wb25lbnQuXG5leHBvcnQgY2xhc3MgTGlzdEJveCBleHRlbmRzIExpc3RTZWxlY3RvcjxMaXN0U2VsZWN0b3JDb25maWc+IHtcbiAgcHJpdmF0ZSBsaXN0Qm94RWxlbWVudDogRE9NO1xuICBwcml2YXRlIGNvbXBvbmVudHM6IExpc3RCb3hJdGVtQnV0dG9uW10gPSBbXTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IExpc3RTZWxlY3RvckNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktbGlzdGJveCcsXG4gICAgfSBhcyBMaXN0U2VsZWN0b3JDb25maWcsIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIHB1YmxpYyBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICAvLyBTdWJzY3JpYmUgYmVmb3JlIHN1cGVyIGNhbGwgdG8gcmVjZWl2ZSBpbml0aWFsIGV2ZW50c1xuICAgIHRoaXMub25JdGVtQWRkZWQuc3Vic2NyaWJlKHRoaXMuYWRkTGlzdEJveERvbUl0ZW0pO1xuICAgIHRoaXMub25JdGVtUmVtb3ZlZC5zdWJzY3JpYmUodGhpcy5yZW1vdmVMaXN0Qm94RG9tSXRlbSk7XG4gICAgdGhpcy5vbkl0ZW1TZWxlY3RlZC5zdWJzY3JpYmUodGhpcy5yZWZyZXNoU2VsZWN0ZWRJdGVtKTtcblxuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG4gIH1cblxuICBwcm90ZWN0ZWQgdG9Eb21FbGVtZW50KCk6IERPTSB7XG4gICAgbGV0IGxpc3RCb3hFbGVtZW50ID0gbmV3IERPTSgnZGl2Jywge1xuICAgICAgJ2lkJzogdGhpcy5jb25maWcuaWQsXG4gICAgICAnY2xhc3MnOiB0aGlzLmdldENzc0NsYXNzZXMoKSxcbiAgICB9LCB0aGlzKTtcblxuICAgIHRoaXMubGlzdEJveEVsZW1lbnQgPSBsaXN0Qm94RWxlbWVudDtcbiAgICB0aGlzLmNyZWF0ZUxpc3RCb3hEb21JdGVtcygpO1xuICAgIHRoaXMucmVmcmVzaFNlbGVjdGVkSXRlbSgpO1xuXG4gICAgcmV0dXJuIGxpc3RCb3hFbGVtZW50O1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVMaXN0Qm94RG9tSXRlbXMoKSB7XG4gICAgLy8gRGVsZXRlIGFsbCBjaGlsZHJlblxuICAgIHRoaXMubGlzdEJveEVsZW1lbnQuZW1wdHkoKTtcbiAgICB0aGlzLmNvbXBvbmVudHMgPSBbXTtcblxuICAgIC8vIEFkZCB1cGRhdGVkIGNoaWxkcmVuXG4gICAgZm9yIChsZXQgaXRlbSBvZiB0aGlzLml0ZW1zKSB7XG4gICAgICB0aGlzLmFkZExpc3RCb3hEb21JdGVtKHRoaXMsIGl0ZW0ua2V5KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZUxpc3RCb3hEb21JdGVtID0gKF86IExpc3RCb3gsIGtleTogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5nZXRDb21wb25lbnRGb3JLZXkoa2V5KTtcbiAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICBjb21wb25lbnQuZ2V0RG9tRWxlbWVudCgpLnJlbW92ZSgpO1xuICAgICAgQXJyYXlVdGlscy5yZW1vdmUodGhpcy5jb21wb25lbnRzLCBjb21wb25lbnQpO1xuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIGFkZExpc3RCb3hEb21JdGVtID0gKF86IExpc3RCb3gsIGtleTogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5nZXRDb21wb25lbnRGb3JLZXkoa2V5KTtcbiAgICBjb25zdCBuZXdJdGVtID0gdGhpcy5nZXRJdGVtRm9yS2V5KGtleSk7XG4gICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgLy8gVXBkYXRlIGV4aXN0aW5nIGNvbXBvbmVudFxuICAgICAgY29tcG9uZW50LnNldFRleHQobmV3SXRlbS5sYWJlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGxpc3RCb3hJdGVtQnV0dG9uID0gdGhpcy5idWlsZExpc3RCb3hJdGVtQnV0dG9uKG5ld0l0ZW0pO1xuXG4gICAgICBsaXN0Qm94SXRlbUJ1dHRvbi5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuaGFuZGxlU2VsZWN0aW9uQ2hhbmdlKGxpc3RCb3hJdGVtQnV0dG9uKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLmNvbXBvbmVudHMucHVzaChsaXN0Qm94SXRlbUJ1dHRvbik7XG4gICAgICB0aGlzLmxpc3RCb3hFbGVtZW50LmFwcGVuZChsaXN0Qm94SXRlbUJ1dHRvbi5nZXREb21FbGVtZW50KCkpO1xuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIHJlZnJlc2hTZWxlY3RlZEl0ZW0gPSAoKSA9PiB7XG4gICAgLy8gVGhpcyBnZXRzIGNhbGxlZCB0d2ljZSBiZWNhdXNlIHRoZSBmaXJzdCB0aW1lIGlzIHRyaWdnZXJlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiB0aGUgTGlzdEJveEl0ZW1CdXR0b24uIEFuZCB0aGVcbiAgICAvLyBzZWNvbmQgY2FsbCBjb21lcyBmcm9tIHRoZSBwbGF5ZXIgZXZlbnQgd2hlbiB0aGUgYWN0dWFsIGl0ZW0gaXMgc2VsZWN0ZWQgKFN1YnRpdGxlIC8gQXVkaW9UcmFjayBpbiB0aGlzIGNhc2UpLlxuICAgIC8vIEFzIHRoaXMgaXMgYSBnZW5lcmljIGNvbXBvbmVudCB3ZSBjYW4ndCBwcm9oaWJpdCB0aGlzIGJlaGF2aW91ci4gV2UgbmVlZCB0byB0cmVhdCB0aGlzIGNvbXBvbmVudCBhcyBpdCBhY3RzXG4gICAgLy8gaW5kZXBlbmRlbnQgZnJvbSBQbGF5ZXJFdmVudHMgYW5kIG9uIHRoZSBvdGhlciBoYW5kIHdlIG5lZWQgdG8gcmVhY3QgdG8gUGxheWVyRXZlbnRzIGFzIGl0IGNvdWxkIGJlIHRyaWdnZXJlZFxuICAgIC8vIGZyb20gb3V0c2lkZS5cblxuICAgIGZvciAobGV0IGl0ZW0gb2YgdGhpcy5pdGVtcykge1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5nZXRDb21wb25lbnRGb3JLZXkoaXRlbS5rZXkpO1xuICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICBTdHJpbmcoY29tcG9uZW50LmtleSkgPT09IFN0cmluZyh0aGlzLnNlbGVjdGVkSXRlbSkgPyBjb21wb25lbnQub24oKSA6IGNvbXBvbmVudC5vZmYoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSBidWlsZExpc3RCb3hJdGVtQnV0dG9uKGxpc3RJdGVtOiBMaXN0SXRlbSk6IExpc3RCb3hJdGVtQnV0dG9uIHtcbiAgICByZXR1cm4gbmV3IExpc3RCb3hJdGVtQnV0dG9uKHtcbiAgICAgIGtleTogbGlzdEl0ZW0ua2V5LFxuICAgICAgdGV4dDogbGlzdEl0ZW0ubGFiZWwsXG4gICAgICBhcmlhTGFiZWw6IGxpc3RJdGVtLmFyaWFMYWJlbCxcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q29tcG9uZW50Rm9yS2V5KGtleTogc3RyaW5nKTogTGlzdEJveEl0ZW1CdXR0b24ge1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudHMuZmluZCgoYykgPT4ga2V5ID09PSBjLmtleSk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZVNlbGVjdGlvbkNoYW5nZSA9IChzZW5kZXI6IExpc3RCb3hJdGVtQnV0dG9uKSA9PiB7XG4gICAgdGhpcy5vbkl0ZW1TZWxlY3RlZEV2ZW50KHNlbmRlci5rZXkpO1xuICB9O1xufVxuXG5pbnRlcmZhY2UgTGlzdEJveEl0ZW1CdXR0b25Db25maWcgZXh0ZW5kcyBUb2dnbGVCdXR0b25Db25maWcge1xuICAvKipcbiAgICoga2V5IHRvIGlkZW50aWZ5IHNlbGVjdGVkIGl0ZW0uIFNpbWlsYXIgdG8gdGhlIHZhbHVlIGF0dHJpYnV0ZSBvZiBhbiBzZWxlY3Qgb3B0aW9uLlxuICAgKi9cbiAga2V5OiBzdHJpbmc7XG59XG5cbmNsYXNzIExpc3RCb3hJdGVtQnV0dG9uIGV4dGVuZHMgVG9nZ2xlQnV0dG9uPExpc3RCb3hJdGVtQnV0dG9uQ29uZmlnPiB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBMaXN0Qm94SXRlbUJ1dHRvbkNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLWxpc3Rib3gtYnV0dG9uJyxcbiAgICAgIG9uQ2xhc3M6ICdzZWxlY3RlZCcsXG4gICAgICBvZmZDbGFzczogJycsXG4gICAgfSBhcyBMaXN0Qm94SXRlbUJ1dHRvbkNvbmZpZywgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgZ2V0IGtleSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAodGhpcy5jb25maWcgYXMgTGlzdEJveEl0ZW1CdXR0b25Db25maWcpLmtleTtcbiAgfVxufVxuIiwiaW1wb3J0IHtDb21wb25lbnQsIENvbXBvbmVudENvbmZpZ30gZnJvbSAnLi9jb21wb25lbnQnO1xuaW1wb3J0IHtFdmVudERpc3BhdGNoZXIsIEV2ZW50fSBmcm9tICcuLi9ldmVudGRpc3BhdGNoZXInO1xuaW1wb3J0IHtBcnJheVV0aWxzfSBmcm9tICcuLi9hcnJheXV0aWxzJztcbmltcG9ydCB7IExvY2FsaXphYmxlVGV4dCwgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIG1hcCBvZiBpdGVtcyAoa2V5L3ZhbHVlIC0+IGxhYmVsfSBmb3IgYSB7QGxpbmsgTGlzdFNlbGVjdG9yfSBpbiBhIHtAbGluayBMaXN0U2VsZWN0b3JDb25maWd9LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIExpc3RJdGVtIHtcbiAga2V5OiBzdHJpbmc7XG4gIGxhYmVsOiBMb2NhbGl6YWJsZVRleHQ7XG4gIHNvcnRlZEluc2VydD86IGJvb2xlYW47XG4gIGFyaWFMYWJlbD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBGaWx0ZXIgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBmaWx0ZXIgb3V0IGxpc3QgaXRlbXMgYWRkZWQgdGhyb3VnaCB7QGxpbmsgTGlzdFNlbGVjdG9yLmFkZEl0ZW19LlxuICpcbiAqIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHN1YmNsYXNzZXMgdGhhdCBwb3B1bGF0ZSB0aGVtc2VsdmVzIGF1dG9tYXRpY2FsbHlcbiAqIHZpYSB0aGUgcGxheWVyIEFQSSwgZS5nLiB7QGxpbmsgU3VidGl0bGVTZWxlY3RCb3h9LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIExpc3RJdGVtRmlsdGVyIHtcbiAgLyoqXG4gICAqIFRha2VzIGEgbGlzdCBpdGVtIGFuZCBkZWNpZGVzIHdoZXRoZXIgaXQgc2hvdWxkIHBhc3Mgb3IgYmUgZGlzY2FyZGVkLlxuICAgKiBAcGFyYW0ge0xpc3RJdGVtfSBsaXN0SXRlbSB0aGUgaXRlbSB0byBhcHBseSB0aGUgZmlsdGVyIHRvXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIHRvIGxldCB0aGUgaXRlbSBwYXNzIHRocm91Z2ggdGhlIGZpbHRlciwgZmFsc2UgdG8gZGlzY2FyZCB0aGUgaXRlbVxuICAgKi9cbiAgKGxpc3RJdGVtOiBMaXN0SXRlbSk6IGJvb2xlYW47XG59XG5cbi8qKlxuICogVHJhbnNsYXRvciBmdW5jdGlvbiB0byB0cmFuc2xhdGUgbGFiZWxzIG9mIGxpc3QgaXRlbXMgYWRkZWQgdGhyb3VnaCB7QGxpbmsgTGlzdFNlbGVjdG9yLmFkZEl0ZW19LlxuICpcbiAqIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHN1YmNsYXNzZXMgdGhhdCBwb3B1bGF0ZSB0aGVtc2VsdmVzIGF1dG9tYXRpY2FsbHlcbiAqIHZpYSB0aGUgcGxheWVyIEFQSSwgZS5nLiB7QGxpbmsgU3VidGl0bGVTZWxlY3RCb3h9LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIExpc3RJdGVtTGFiZWxUcmFuc2xhdG9yIHtcbiAgLyoqXG4gICAqIFRha2VzIGEgbGlzdCBpdGVtLCBvcHRpb25hbGx5IGNoYW5nZXMgdGhlIGxhYmVsLCBhbmQgcmV0dXJucyB0aGUgbmV3IGxhYmVsLlxuICAgKiBAcGFyYW0ge0xpc3RJdGVtfSBsaXN0SXRlbSB0aGUgaXRlbSB0byB0cmFuc2xhdGVcbiAgICogQHJldHVybnMge3N0cmluZ30gdGhlIHRyYW5zbGF0ZWQgb3Igb3JpZ2luYWwgbGFiZWxcbiAgICovXG4gIChsaXN0SXRlbTogTGlzdEl0ZW0pOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIGEge0BsaW5rIExpc3RTZWxlY3Rvcn0uXG4gKlxuICogQGNhdGVnb3J5IENvbmZpZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMaXN0U2VsZWN0b3JDb25maWcgZXh0ZW5kcyBDb21wb25lbnRDb25maWcge1xuICBpdGVtcz86IExpc3RJdGVtW107XG4gIGZpbHRlcj86IExpc3RJdGVtRmlsdGVyO1xuICB0cmFuc2xhdG9yPzogTGlzdEl0ZW1MYWJlbFRyYW5zbGF0b3I7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBMaXN0U2VsZWN0b3I8Q29uZmlnIGV4dGVuZHMgTGlzdFNlbGVjdG9yQ29uZmlnPiBleHRlbmRzIENvbXBvbmVudDxMaXN0U2VsZWN0b3JDb25maWc+IHtcblxuICBwcm90ZWN0ZWQgaXRlbXM6IExpc3RJdGVtW107XG4gIHByb3RlY3RlZCBzZWxlY3RlZEl0ZW06IHN0cmluZztcblxuICBwcml2YXRlIGxpc3RTZWxlY3RvckV2ZW50cyA9IHtcbiAgICBvbkl0ZW1BZGRlZDogbmV3IEV2ZW50RGlzcGF0Y2hlcjxMaXN0U2VsZWN0b3I8Q29uZmlnPiwgc3RyaW5nPigpLFxuICAgIG9uSXRlbVJlbW92ZWQ6IG5ldyBFdmVudERpc3BhdGNoZXI8TGlzdFNlbGVjdG9yPENvbmZpZz4sIHN0cmluZz4oKSxcbiAgICBvbkl0ZW1TZWxlY3RlZDogbmV3IEV2ZW50RGlzcGF0Y2hlcjxMaXN0U2VsZWN0b3I8Q29uZmlnPiwgc3RyaW5nPigpLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogTGlzdFNlbGVjdG9yQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgaXRlbXM6IFtdLFxuICAgICAgY3NzQ2xhc3M6ICd1aS1saXN0c2VsZWN0b3InLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcblxuICAgIHRoaXMuaXRlbXMgPSB0aGlzLmNvbmZpZy5pdGVtcztcbiAgfVxuXG4gIHByaXZhdGUgZ2V0SXRlbUluZGV4KGtleTogc3RyaW5nKTogbnVtYmVyIHtcbiAgICBmb3IgKGxldCBpbmRleCBpbiB0aGlzLml0ZW1zKSB7XG4gICAgICBpZiAoa2V5ID09PSB0aGlzLml0ZW1zW2luZGV4XS5rZXkpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIGN1cnJlbnQgaXRlbXMgb2YgdGhpcyBzZWxlY3Rvci5cbiAgICogKiBAcmV0dXJucyB7TGlzdEl0ZW1bXX1cbiAgICovXG4gIGdldEl0ZW1zKCk6IExpc3RJdGVtW10ge1xuICAgIHJldHVybiB0aGlzLml0ZW1zO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgc3BlY2lmaWVkIGl0ZW0gaXMgcGFydCBvZiB0aGlzIHNlbGVjdG9yLlxuICAgKiBAcGFyYW0ga2V5IHRoZSBrZXkgb2YgdGhlIGl0ZW0gdG8gY2hlY2tcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGl0ZW0gaXMgcGFydCBvZiB0aGlzIHNlbGVjdG9yLCBlbHNlIGZhbHNlXG4gICAqL1xuICBoYXNJdGVtKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SXRlbUluZGV4KGtleSkgPiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGFuIGl0ZW0gdG8gdGhpcyBzZWxlY3RvciBieSBkb2luZyBhIHNvcnRlZCBpbnNlcnQgb3IgYnkgYXBwZW5kaW5nIHRoZSBlbGVtZW50IHRvIHRoZSBlbmQgb2YgdGhlIGxpc3Qgb2YgaXRlbXMuXG4gICAqIElmIGFuIGl0ZW0gd2l0aCB0aGUgc3BlY2lmaWVkIGtleSBhbHJlYWR5IGV4aXN0cywgaXQgaXMgcmVwbGFjZWQuXG4gICAqIEBwYXJhbSBrZXkgdGhlIGtleSBvZiB0aGUgaXRlbSB0byBhZGRcbiAgICogQHBhcmFtIGxhYmVsIHRoZSAoaHVtYW4tcmVhZGFibGUpIGxhYmVsIG9mIHRoZSBpdGVtIHRvIGFkZFxuICAgKiBAcGFyYW0gc29ydGVkSW5zZXJ0IHdoZXRoZXIgdGhlIGl0ZW0gc2hvdWxkIGJlIGFkZGVkIHJlc3BlY3RpbmcgdGhlIG9yZGVyIG9mIGtleXNcbiAgICogQHBhcmFtIGFyaWFMYWJlbCBjdXN0b20gYXJpYSBsYWJlbCBmb3IgdGhlIGxpc3RJdGVtXG4gICAqL1xuICBhZGRJdGVtKGtleTogc3RyaW5nLCBsYWJlbDogTG9jYWxpemFibGVUZXh0LCBzb3J0ZWRJbnNlcnQgPSBmYWxzZSwgYXJpYUxhYmVsID0gJycpIHtcbiAgICBjb25zdCBsaXN0SXRlbSA9IHsga2V5OiBrZXksIGxhYmVsOiBpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24obGFiZWwpLCAuLi4oYXJpYUxhYmVsICYmIHsgYXJpYUxhYmVsIH0pfTtcblxuICAgIC8vIEFwcGx5IGZpbHRlciBmdW5jdGlvblxuICAgIGlmICh0aGlzLmNvbmZpZy5maWx0ZXIgJiYgIXRoaXMuY29uZmlnLmZpbHRlcihsaXN0SXRlbSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBBcHBseSB0cmFuc2xhdG9yIGZ1bmN0aW9uXG4gICAgaWYgKHRoaXMuY29uZmlnLnRyYW5zbGF0b3IpIHtcbiAgICAgIGxpc3RJdGVtLmxhYmVsID0gdGhpcy5jb25maWcudHJhbnNsYXRvcihsaXN0SXRlbSk7XG4gICAgfVxuXG4gICAgLy8gVHJ5IHRvIHJlbW92ZSBrZXkgZmlyc3QgdG8gZ2V0IG92ZXJ3cml0ZSBiZWhhdmlvciBhbmQgYXZvaWQgZHVwbGljYXRlIGtleXNcbiAgICB0aGlzLnJlbW92ZUl0ZW0oa2V5KTsgLy8gVGhpcyB3aWxsIHRyaWdnZXIgYW4gSXRlbVJlbW92ZWQgYW5kIGFuIEl0ZW1BZGRlZCBldmVudFxuXG4gICAgLy8gQWRkIHRoZSBpdGVtIHRvIHRoZSBsaXN0XG4gICAgaWYgKHNvcnRlZEluc2VydCkge1xuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLml0ZW1zLmZpbmRJbmRleChlbnRyeSA9PiBlbnRyeS5rZXkgPiBrZXkpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICB0aGlzLml0ZW1zLnB1c2gobGlzdEl0ZW0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pdGVtcy5zcGxpY2UoaW5kZXgsIDAsIGxpc3RJdGVtKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pdGVtcy5wdXNoKGxpc3RJdGVtKTtcbiAgICB9XG4gICAgdGhpcy5vbkl0ZW1BZGRlZEV2ZW50KGtleSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbiBpdGVtIGZyb20gdGhpcyBzZWxlY3Rvci5cbiAgICogQHBhcmFtIGtleSB0aGUga2V5IG9mIHRoZSBpdGVtIHRvIHJlbW92ZVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiByZW1vdmFsIHdhcyBzdWNjZXNzZnVsLCBmYWxzZSBpZiB0aGUgaXRlbSBpcyBub3QgcGFydCBvZiB0aGlzIHNlbGVjdG9yXG4gICAqL1xuICByZW1vdmVJdGVtKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgbGV0IGluZGV4ID0gdGhpcy5nZXRJdGVtSW5kZXgoa2V5KTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgQXJyYXlVdGlscy5yZW1vdmUodGhpcy5pdGVtcywgdGhpcy5pdGVtc1tpbmRleF0pO1xuICAgICAgdGhpcy5vbkl0ZW1SZW1vdmVkRXZlbnQoa2V5KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWxlY3RzIGFuIGl0ZW0gZnJvbSB0aGUgaXRlbXMgaW4gdGhpcyBzZWxlY3Rvci5cbiAgICogQHBhcmFtIGtleSB0aGUga2V5IG9mIHRoZSBpdGVtIHRvIHNlbGVjdFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpcyB0aGUgc2VsZWN0aW9uIHdhcyBzdWNjZXNzZnVsLCBmYWxzZSBpZiB0aGUgc2VsZWN0ZWQgaXRlbSBpcyBub3QgcGFydCBvZiB0aGUgc2VsZWN0b3JcbiAgICovXG4gIHNlbGVjdEl0ZW0oa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAoa2V5ID09PSB0aGlzLnNlbGVjdGVkSXRlbSkge1xuICAgICAgLy8gaXRlbUNvbmZpZyBpcyBhbHJlYWR5IHNlbGVjdGVkLCBzdXBwcmVzcyBhbnkgZnVydGhlciBhY3Rpb25cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGxldCBpbmRleCA9IHRoaXMuZ2V0SXRlbUluZGV4KGtleSk7XG5cbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgdGhpcy5zZWxlY3RlZEl0ZW0gPSBrZXk7XG4gICAgICB0aGlzLm9uSXRlbVNlbGVjdGVkRXZlbnQoa2V5KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIHNlbGVjdGVkIGl0ZW0uXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBrZXkgb2YgdGhlIHNlbGVjdGVkIGl0ZW0gb3IgbnVsbCBpZiBubyBpdGVtIGlzIHNlbGVjdGVkXG4gICAqL1xuICBnZXRTZWxlY3RlZEl0ZW0oKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRJdGVtO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGl0ZW1zIGZvciB0aGUgZ2l2ZW4ga2V5IG9yIHVuZGVmaW5lZCBpZiBubyBpdGVtIHdpdGggdGhlIGdpdmVuIGtleSBleGlzdHMuXG4gICAqIEBwYXJhbSBrZXkgdGhlIGtleSBvZiB0aGUgaXRlbSB0byByZXR1cm5cbiAgICogQHJldHVybnMge0xpc3RJdGVtfSB0aGUgaXRlbSB3aXRoIHRoZSByZXF1ZXN0ZWQga2V5LiBVbmRlZmluZWQgaWYgbm8gaXRlbSB3aXRoIHRoZSBnaXZlbiBrZXkgZXhpc3RzLlxuICAgKi9cbiAgZ2V0SXRlbUZvcktleShrZXk6IHN0cmluZyk6IExpc3RJdGVtIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtcy5maW5kKChpdGVtKSA9PiBpdGVtLmtleSA9PT0ga2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTeW5jaHJvbml6ZSB0aGUgY3VycmVudCBpdGVtcyBvZiB0aGlzIHNlbGVjdG9yIHdpdGggdGhlIGdpdmVuIG9uZXMuIFRoaXMgd2lsbCByZW1vdmUgYW5kIGFkZCBpdGVtcyBzZWxlY3RpdmVseS5cbiAgICogRm9yIGVhY2ggcmVtb3ZlZCBpdGVtIHRoZSBJdGVtUmVtb3ZlZEV2ZW50IGFuZCBmb3IgZWFjaCBhZGRlZCBpdGVtIHRoZSBJdGVtQWRkZWRFdmVudCB3aWxsIGJlIHRyaWdnZXJlZC4gRmF2b3VyXG4gICAqIHRoaXMgbWV0aG9kIG92ZXIgdXNpbmcgY2xlYXJJdGVtcyBhbmQgYWRkaW5nIGFsbCBpdGVtcyBhZ2FpbiBhZnRlcndhcmRzLlxuICAgKiBAcGFyYW0gbmV3SXRlbXNcbiAgICovXG4gIHN5bmNocm9uaXplSXRlbXMobmV3SXRlbXM6IExpc3RJdGVtW10pOiB2b2lkIHtcbiAgICBuZXdJdGVtc1xuICAgICAgLmZpbHRlcigoaXRlbSkgPT4gIXRoaXMuaGFzSXRlbShpdGVtLmtleSkpXG4gICAgICAuZm9yRWFjaCgoaXRlbSkgPT4gdGhpcy5hZGRJdGVtKGl0ZW0ua2V5LCBpdGVtLmxhYmVsLCBpdGVtLnNvcnRlZEluc2VydCwgaXRlbS5hcmlhTGFiZWwpKTtcblxuICAgIHRoaXMuaXRlbXNcbiAgICAgIC5maWx0ZXIoKGl0ZW0pID0+IG5ld0l0ZW1zLmZpbHRlcigoaSkgPT4gaS5rZXkgPT09IGl0ZW0ua2V5KS5sZW5ndGggPT09IDApXG4gICAgICAuZm9yRWFjaCgoaXRlbSkgPT4gdGhpcy5yZW1vdmVJdGVtKGl0ZW0ua2V5KSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgaXRlbXMgZnJvbSB0aGlzIHNlbGVjdG9yLlxuICAgKi9cbiAgY2xlYXJJdGVtcygpIHtcbiAgICAvLyBsb2NhbCBjb3B5IGZvciBpdGVyYXRpb24gYWZ0ZXIgY2xlYXJcbiAgICBsZXQgaXRlbXMgPSB0aGlzLml0ZW1zO1xuICAgIC8vIGNsZWFyIGl0ZW1zXG4gICAgdGhpcy5pdGVtcyA9IFtdO1xuXG4gICAgLy8gY2xlYXIgdGhlIHNlbGVjdGlvbiBhcyB0aGUgc2VsZWN0ZWQgaXRlbSBpcyBhbHNvIHJlbW92ZWRcbiAgICB0aGlzLnNlbGVjdGVkSXRlbSA9IG51bGw7XG5cbiAgICAvLyBmaXJlIGV2ZW50c1xuICAgIGZvciAobGV0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgIHRoaXMub25JdGVtUmVtb3ZlZEV2ZW50KGl0ZW0ua2V5KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGl0ZW1zIGluIHRoaXMgc2VsZWN0b3IuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBpdGVtQ291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5pdGVtcykubGVuZ3RoO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uSXRlbUFkZGVkRXZlbnQoa2V5OiBzdHJpbmcpIHtcbiAgICB0aGlzLmxpc3RTZWxlY3RvckV2ZW50cy5vbkl0ZW1BZGRlZC5kaXNwYXRjaCh0aGlzLCBrZXkpO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uSXRlbVJlbW92ZWRFdmVudChrZXk6IHN0cmluZykge1xuICAgIHRoaXMubGlzdFNlbGVjdG9yRXZlbnRzLm9uSXRlbVJlbW92ZWQuZGlzcGF0Y2godGhpcywga2V5KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkl0ZW1TZWxlY3RlZEV2ZW50KGtleTogc3RyaW5nKSB7XG4gICAgdGhpcy5saXN0U2VsZWN0b3JFdmVudHMub25JdGVtU2VsZWN0ZWQuZGlzcGF0Y2godGhpcywga2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gYW4gaXRlbSBpcyBhZGRlZCB0byB0aGUgbGlzdCBvZiBpdGVtcy5cbiAgICogQHJldHVybnMge0V2ZW50PExpc3RTZWxlY3RvcjxDb25maWc+LCBzdHJpbmc+fVxuICAgKi9cbiAgZ2V0IG9uSXRlbUFkZGVkKCk6IEV2ZW50PExpc3RTZWxlY3RvcjxDb25maWc+LCBzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5saXN0U2VsZWN0b3JFdmVudHMub25JdGVtQWRkZWQuZ2V0RXZlbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gYW4gaXRlbSBpcyByZW1vdmVkIGZyb20gdGhlIGxpc3Qgb2YgaXRlbXMuXG4gICAqIEByZXR1cm5zIHtFdmVudDxMaXN0U2VsZWN0b3I8Q29uZmlnPiwgc3RyaW5nPn1cbiAgICovXG4gIGdldCBvbkl0ZW1SZW1vdmVkKCk6IEV2ZW50PExpc3RTZWxlY3RvcjxDb25maWc+LCBzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5saXN0U2VsZWN0b3JFdmVudHMub25JdGVtUmVtb3ZlZC5nZXRFdmVudCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiBhbiBpdGVtIGlzIHNlbGVjdGVkIGZyb20gdGhlIGxpc3Qgb2YgaXRlbXMuXG4gICAqIEByZXR1cm5zIHtFdmVudDxMaXN0U2VsZWN0b3I8Q29uZmlnPiwgc3RyaW5nPn1cbiAgICovXG4gIGdldCBvbkl0ZW1TZWxlY3RlZCgpOiBFdmVudDxMaXN0U2VsZWN0b3I8Q29uZmlnPiwgc3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMubGlzdFNlbGVjdG9yRXZlbnRzLm9uSXRlbVNlbGVjdGVkLmdldEV2ZW50KCk7XG4gIH1cbn0iLCJpbXBvcnQge0xhYmVsQ29uZmlnLCBMYWJlbH0gZnJvbSAnLi9sYWJlbCc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcblxuLyoqXG4gKiBFbnVtZXJhdGVzIHRoZSB0eXBlcyBvZiBjb250ZW50IHRoYXQgdGhlIHtAbGluayBNZXRhZGF0YUxhYmVsfSBjYW4gZGlzcGxheS5cbiAqL1xuZXhwb3J0IGVudW0gTWV0YWRhdGFMYWJlbENvbnRlbnQge1xuICAvKipcbiAgICogVGl0bGUgb2YgdGhlIGRhdGEgc291cmNlLlxuICAgKi9cbiAgVGl0bGUsXG4gIC8qKlxuICAgKiBEZXNjcmlwdGlvbiBmbyB0aGUgZGF0YSBzb3VyY2UuXG4gICAqL1xuICBEZXNjcmlwdGlvbixcbn1cblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3Ige0BsaW5rIE1ldGFkYXRhTGFiZWx9LlxuICpcbiAqIEBjYXRlZ29yeSBDb25maWdzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWV0YWRhdGFMYWJlbENvbmZpZyBleHRlbmRzIExhYmVsQ29uZmlnIHtcbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIGNvbnRlbnQgdGhhdCBzaG91bGQgYmUgZGlzcGxheWVkIGluIHRoZSBsYWJlbC5cbiAgICovXG4gIGNvbnRlbnQ6IE1ldGFkYXRhTGFiZWxDb250ZW50O1xufVxuXG4vKipcbiAqIEEgbGFiZWwgdGhhdCBjYW4gYmUgY29uZmlndXJlZCB0byBkaXNwbGF5IGNlcnRhaW4gbWV0YWRhdGEuXG4gKlxuICogQGNhdGVnb3J5IExhYmVsc1xuICovXG5leHBvcnQgY2xhc3MgTWV0YWRhdGFMYWJlbCBleHRlbmRzIExhYmVsPE1ldGFkYXRhTGFiZWxDb25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IE1ldGFkYXRhTGFiZWxDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3NlczogWydsYWJlbC1tZXRhZGF0YScsICdsYWJlbC1tZXRhZGF0YS0nICsgTWV0YWRhdGFMYWJlbENvbnRlbnRbY29uZmlnLmNvbnRlbnRdLnRvTG93ZXJDYXNlKCldLFxuICAgIH0gYXMgTWV0YWRhdGFMYWJlbENvbmZpZywgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuICAgIGxldCB1aWNvbmZpZyA9IHVpbWFuYWdlci5nZXRDb25maWcoKTtcblxuICAgIGxldCBpbml0ID0gKCkgPT4ge1xuICAgICAgc3dpdGNoIChjb25maWcuY29udGVudCkge1xuICAgICAgICBjYXNlIE1ldGFkYXRhTGFiZWxDb250ZW50LlRpdGxlOlxuICAgICAgICAgIHRoaXMuc2V0VGV4dCh1aWNvbmZpZy5tZXRhZGF0YS50aXRsZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTWV0YWRhdGFMYWJlbENvbnRlbnQuRGVzY3JpcHRpb246XG4gICAgICAgICAgdGhpcy5zZXRUZXh0KHVpY29uZmlnLm1ldGFkYXRhLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbGV0IHVubG9hZCA9ICgpID0+IHtcbiAgICAgIHRoaXMuc2V0VGV4dChudWxsKTtcbiAgICB9O1xuXG4gICAgLy8gSW5pdCBsYWJlbFxuICAgIGluaXQoKTtcbiAgICAvLyBDbGVhciBsYWJlbHMgd2hlbiBzb3VyY2UgaXMgdW5sb2FkZWRcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU291cmNlVW5sb2FkZWQsIHVubG9hZCk7XG5cbiAgICB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUoaW5pdCk7XG4gIH1cbn0iLCJpbXBvcnQge1RvZ2dsZUJ1dHRvbiwgVG9nZ2xlQnV0dG9uQ29uZmlnfSBmcm9tICcuL3RvZ2dsZWJ1dHRvbic7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBidXR0b24gdGhhdCB0b2dnbGVzIEFwcGxlIG1hY09TIHBpY3R1cmUtaW4tcGljdHVyZSBtb2RlLlxuICpcbiAqIEBjYXRlZ29yeSBCdXR0b25zXG4gKi9cbmV4cG9ydCBjbGFzcyBQaWN0dXJlSW5QaWN0dXJlVG9nZ2xlQnV0dG9uIGV4dGVuZHMgVG9nZ2xlQnV0dG9uPFRvZ2dsZUJ1dHRvbkNvbmZpZz4ge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogVG9nZ2xlQnV0dG9uQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1waXB0b2dnbGVidXR0b24nLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3BpY3R1cmVJblBpY3R1cmUnKSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgY29uc3QgaXNQaWN0dXJlSW5QaWN0dXJlQXZhaWxhYmxlID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIHBsYXllci5pc1ZpZXdNb2RlQXZhaWxhYmxlKHBsYXllci5leHBvcnRzLlZpZXdNb2RlLlBpY3R1cmVJblBpY3R1cmUpO1xuICAgIH07XG5cbiAgICBjb25zdCBwaWN0dXJlSW5QaWN0dXJlU3RhdGVIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgcGxheWVyLmdldFZpZXdNb2RlKCkgPT09IHBsYXllci5leHBvcnRzLlZpZXdNb2RlLlBpY3R1cmVJblBpY3R1cmUgPyB0aGlzLm9uKCkgOiB0aGlzLm9mZigpO1xuICAgIH07XG5cbiAgICBjb25zdCBwaWN0dXJlSW5QaWN0dXJlQXZhaWxhYmlsaXR5Q2hhbmdlZEhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICBpc1BpY3R1cmVJblBpY3R1cmVBdmFpbGFibGUoKSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG4gICAgfTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5WaWV3TW9kZUNoYW5nZWQsIHBpY3R1cmVJblBpY3R1cmVTdGF0ZUhhbmRsZXIpO1xuXG4gICAgLy8gQXZhaWxhYmxlIG9ubHkgaW4gb3VyIG5hdGl2ZSBTREtzIGZvciBub3dcbiAgICBpZiAoKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50IGFzIGFueSkuVmlld01vZGVBdmFpbGFiaWxpdHlDaGFuZ2VkKSB7XG4gICAgICBwbGF5ZXIub24oXG4gICAgICAgIChwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudCBhcyBhbnkpLlZpZXdNb2RlQXZhaWxhYmlsaXR5Q2hhbmdlZCxcbiAgICAgICAgcGljdHVyZUluUGljdHVyZUF2YWlsYWJpbGl0eUNoYW5nZWRIYW5kbGVyLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUocGljdHVyZUluUGljdHVyZUF2YWlsYWJpbGl0eUNoYW5nZWRIYW5kbGVyKTtcblxuICAgIHRoaXMub25DbGljay5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgaWYgKCFpc1BpY3R1cmVJblBpY3R1cmVBdmFpbGFibGUoKSkge1xuICAgICAgICBpZiAoY29uc29sZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdQSVAgdW5hdmFpbGFibGUnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRhcmdldFZpZXdNb2RlID1cbiAgICAgICAgcGxheWVyLmdldFZpZXdNb2RlKCkgPT09IHBsYXllci5leHBvcnRzLlZpZXdNb2RlLlBpY3R1cmVJblBpY3R1cmVcbiAgICAgICAgICA/IHBsYXllci5leHBvcnRzLlZpZXdNb2RlLklubGluZVxuICAgICAgICAgIDogcGxheWVyLmV4cG9ydHMuVmlld01vZGUuUGljdHVyZUluUGljdHVyZTtcblxuICAgICAgcGxheWVyLnNldFZpZXdNb2RlKHRhcmdldFZpZXdNb2RlKTtcbiAgICB9KTtcblxuICAgIC8vIFN0YXJ0dXAgaW5pdFxuICAgIHBpY3R1cmVJblBpY3R1cmVBdmFpbGFiaWxpdHlDaGFuZ2VkSGFuZGxlcigpOyAvLyBIaWRlIGJ1dHRvbiBpZiBQSVAgbm90IGF2YWlsYWJsZVxuICAgIHBpY3R1cmVJblBpY3R1cmVTdGF0ZUhhbmRsZXIoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtTZWxlY3RCb3h9IGZyb20gJy4vc2VsZWN0Ym94JztcbmltcG9ydCB7TGlzdFNlbGVjdG9yQ29uZmlnfSBmcm9tICcuL2xpc3RzZWxlY3Rvcic7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBzZWxlY3QgYm94IHByb3ZpZGluZyBhIHNlbGVjdGlvbiBvZiBkaWZmZXJlbnQgcGxheWJhY2sgc3BlZWRzLlxuICpcbiAqIEBjYXRlZ29yeSBDb21wb25lbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBQbGF5YmFja1NwZWVkU2VsZWN0Qm94IGV4dGVuZHMgU2VsZWN0Qm94IHtcbiAgcHJvdGVjdGVkIGRlZmF1bHRQbGF5YmFja1NwZWVkczogbnVtYmVyW107XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBMaXN0U2VsZWN0b3JDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG4gICAgdGhpcy5kZWZhdWx0UGxheWJhY2tTcGVlZHMgPSBbMC4yNSwgMC41LCAxLCAxLjUsIDJdO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3NlczogWyd1aS1wbGF5YmFja3NwZWVkc2VsZWN0Ym94J10sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMuYWRkRGVmYXVsdEl0ZW1zKCk7XG5cbiAgICB0aGlzLm9uSXRlbVNlbGVjdGVkLnN1YnNjcmliZSgoc2VuZGVyOiBQbGF5YmFja1NwZWVkU2VsZWN0Qm94LCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICBwbGF5ZXIuc2V0UGxheWJhY2tTcGVlZChwYXJzZUZsb2F0KHZhbHVlKSk7XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0odmFsdWUpO1xuICAgIH0pO1xuXG4gICAgY29uc3Qgc2V0RGVmYXVsdFZhbHVlID0gKCk6IHZvaWQgPT4ge1xuICAgICAgY29uc3QgcGxheWJhY2tTcGVlZCA9IHBsYXllci5nZXRQbGF5YmFja1NwZWVkKCk7XG4gICAgICB0aGlzLnNldFNwZWVkKHBsYXliYWNrU3BlZWQpO1xuICAgIH07XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheWJhY2tTcGVlZENoYW5nZWQsIHNldERlZmF1bHRWYWx1ZSk7XG4gICAgdWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKHNldERlZmF1bHRWYWx1ZSk7XG4gIH1cblxuICBzZXRTcGVlZChzcGVlZDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLnNlbGVjdEl0ZW0oU3RyaW5nKHNwZWVkKSkpIHtcbiAgICAgIC8vIGEgcGxheWJhY2sgc3BlZWQgd2FzIHNldCB3aGljaCBpcyBub3QgaW4gdGhlIGxpc3QsIGFkZCBpdCB0byB0aGUgbGlzdCB0byBzaG93IGl0IHRvIHRoZSB1c2VyXG4gICAgICB0aGlzLmNsZWFySXRlbXMoKTtcbiAgICAgIHRoaXMuYWRkRGVmYXVsdEl0ZW1zKFtzcGVlZF0pO1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKFN0cmluZyhzcGVlZCkpO1xuICAgIH1cbiAgfVxuXG4gIGFkZERlZmF1bHRJdGVtcyhjdXN0b21JdGVtczogbnVtYmVyW10gPSBbXSk6IHZvaWQge1xuICAgIGNvbnN0IHNvcnRlZFNwZWVkcyA9IHRoaXMuZGVmYXVsdFBsYXliYWNrU3BlZWRzLmNvbmNhdChjdXN0b21JdGVtcykuc29ydCgpO1xuXG4gICAgc29ydGVkU3BlZWRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICBpZiAoZWxlbWVudCAhPT0gMSkge1xuICAgICAgICB0aGlzLmFkZEl0ZW0oU3RyaW5nKGVsZW1lbnQpLCBgJHtlbGVtZW50fXhgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYWRkSXRlbShTdHJpbmcoZWxlbWVudCksIGkxOG4uZ2V0TG9jYWxpemVyKCdub3JtYWwnKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjbGVhckl0ZW1zKCk6IHZvaWQge1xuICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAgICB0aGlzLnNlbGVjdGVkSXRlbSA9IG51bGw7XG4gIH1cbn0iLCJpbXBvcnQge0xhYmVsQ29uZmlnLCBMYWJlbH0gZnJvbSAnLi9sYWJlbCc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IExpdmVTdHJlYW1EZXRlY3RvckV2ZW50QXJncyA9IFBsYXllclV0aWxzLkxpdmVTdHJlYW1EZXRlY3RvckV2ZW50QXJncztcbmltcG9ydCB7UGxheWVyVXRpbHN9IGZyb20gJy4uL3BsYXllcnV0aWxzJztcbmltcG9ydCB7U3RyaW5nVXRpbHN9IGZyb20gJy4uL3N0cmluZ3V0aWxzJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG5leHBvcnQgZW51bSBQbGF5YmFja1RpbWVMYWJlbE1vZGUge1xuICAvKipcbiAgICogRGlzcGxheXMgdGhlIGN1cnJlbnQgdGltZVxuICAgKi9cbiAgQ3VycmVudFRpbWUsXG4gIC8qKlxuICAgKiBEaXNwbGF5cyB0aGUgZHVyYXRpb24gb2YgdGhlIGNvbnRlbnRcbiAgICovXG4gIFRvdGFsVGltZSxcbiAgLyoqXG4gICAqIERpc3BsYXlzIHRoZSBjdXJyZW50IHRpbWUgYW5kIHRoZSBkdXJhdGlvbiBvZiB0aGUgY29udGVudFxuICAgKiBGb3JtYXQ6ICR7Y3VycmVudFRpbWV9IC8gJHt0b3RhbFRpbWV9XG4gICAqL1xuICBDdXJyZW50QW5kVG90YWxUaW1lLFxuICAvKipcbiAgICogRGlzcGxheXMgdGhlIHJlbWFpbmluZyB0aW1lIG9mIHRoZSBjb250ZW50XG4gICAqL1xuICBSZW1haW5pbmdUaW1lLFxufVxuXG4vKipcbiAqIEBjYXRlZ29yeSBDb25maWdzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGxheWJhY2tUaW1lTGFiZWxDb25maWcgZXh0ZW5kcyBMYWJlbENvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB3aGljaCB0aW1lIHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gdGhlIGxhYmVsLlxuICAgKiBEZWZhdWx0OiBQbGF5YmFja1RpbWVMYWJlbE1vZGUuQ3VycmVudEFuZFRvdGFsVGltZVxuICAgKi9cbiAgdGltZUxhYmVsTW9kZT86IFBsYXliYWNrVGltZUxhYmVsTW9kZTtcbiAgLyoqXG4gICAqIEJvb2xlYW4gaWYgdGhlIGxhYmVsIHNob3VsZCBiZSBoaWRkZW4gaW4gbGl2ZSBwbGF5YmFja1xuICAgKi9cbiAgaGlkZUluTGl2ZVBsYXliYWNrPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBBIGxhYmVsIHRoYXQgZGlzcGxheSB0aGUgY3VycmVudCBwbGF5YmFjayB0aW1lIGFuZCB0aGUgdG90YWwgdGltZSB0aHJvdWdoIHtAbGluayBQbGF5YmFja1RpbWVMYWJlbCNzZXRUaW1lIHNldFRpbWV9XG4gKiBvciBhbnkgc3RyaW5nIHRocm91Z2gge0BsaW5rIFBsYXliYWNrVGltZUxhYmVsI3NldFRleHQgc2V0VGV4dH0uXG4gKlxuICogQGNhdGVnb3J5IExhYmVsc1xuICovXG5leHBvcnQgY2xhc3MgUGxheWJhY2tUaW1lTGFiZWwgZXh0ZW5kcyBMYWJlbDxQbGF5YmFja1RpbWVMYWJlbENvbmZpZz4ge1xuXG4gIHByaXZhdGUgdGltZUZvcm1hdDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogUGxheWJhY2tUaW1lTGFiZWxDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCA8UGxheWJhY2tUaW1lTGFiZWxDb25maWc+e1xuICAgICAgY3NzQ2xhc3M6ICd1aS1wbGF5YmFja3RpbWVsYWJlbCcsXG4gICAgICB0aW1lTGFiZWxNb2RlOiBQbGF5YmFja1RpbWVMYWJlbE1vZGUuQ3VycmVudEFuZFRvdGFsVGltZSxcbiAgICAgIGhpZGVJbkxpdmVQbGF5YmFjazogZmFsc2UsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuICAgIGxldCBsaXZlID0gZmFsc2U7XG4gICAgbGV0IGxpdmVDc3NDbGFzcyA9IHRoaXMucHJlZml4Q3NzKCd1aS1wbGF5YmFja3RpbWVsYWJlbC1saXZlJyk7XG4gICAgbGV0IGxpdmVFZGdlQ3NzQ2xhc3MgPSB0aGlzLnByZWZpeENzcygndWktcGxheWJhY2t0aW1lbGFiZWwtbGl2ZS1lZGdlJyk7XG4gICAgbGV0IG1pbldpZHRoID0gMDtcblxuICAgIGxldCBsaXZlQ2xpY2tIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgcGxheWVyLnRpbWVTaGlmdCgwKTtcbiAgICB9O1xuXG4gICAgbGV0IHVwZGF0ZUxpdmVTdGF0ZSA9ICgpID0+IHtcbiAgICAgIC8vIFBsYXllciBpcyBwbGF5aW5nIGEgbGl2ZSBzdHJlYW0gd2hlbiB0aGUgZHVyYXRpb24gaXMgaW5maW5pdGVcbiAgICAgIGxpdmUgPSBwbGF5ZXIuaXNMaXZlKCk7XG5cbiAgICAgIC8vIEF0dGFjaC9kZXRhY2ggbGl2ZSBtYXJrZXIgY2xhc3NcbiAgICAgIGlmIChsaXZlKSB7XG4gICAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmFkZENsYXNzKGxpdmVDc3NDbGFzcyk7XG4gICAgICAgIHRoaXMuc2V0VGV4dChpMThuLmdldExvY2FsaXplcignbGl2ZScpKTtcbiAgICAgICAgaWYgKGNvbmZpZy5oaWRlSW5MaXZlUGxheWJhY2spIHtcbiAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKGxpdmVDbGlja0hhbmRsZXIpO1xuICAgICAgICB1cGRhdGVMaXZlVGltZXNoaWZ0U3RhdGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLnJlbW92ZUNsYXNzKGxpdmVDc3NDbGFzcyk7XG4gICAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLnJlbW92ZUNsYXNzKGxpdmVFZGdlQ3NzQ2xhc3MpO1xuICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgdGhpcy5vbkNsaWNrLnVuc3Vic2NyaWJlKGxpdmVDbGlja0hhbmRsZXIpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBsZXQgdXBkYXRlTGl2ZVRpbWVzaGlmdFN0YXRlID0gKCkgPT4ge1xuICAgICAgaWYgKCFsaXZlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHBsYXllciBpcyBvbmx5IGF0IHRoZSBsaXZlIGVkZ2UgaWZmIHRoZSBzdHJlYW0gaXMgbm90IHNoaWZ0ZWQgYW5kIGl0IGlzIGFjdHVhbGx5IHBsYXlpbmcgb3IgcGxheWJhY2sgaGFzXG4gICAgICAvLyBuZXZlciBiZWVuIHN0YXJ0ZWQgKG1lYW5pbmcgaXQgaXNuJ3QgcGF1c2VkKS4gQSBwbGF5ZXIgdGhhdCBpcyBwYXVzZWQgaXMgYWx3YXlzIGJlaGluZCB0aGUgbGl2ZSBlZGdlLlxuICAgICAgLy8gQW4gZXhjZXB0aW9uIGlzIG1hZGUgZm9yIGxpdmUgc3RyZWFtcyB3aXRob3V0IGEgdGltZXNoaWZ0IHdpbmRvdywgYmVjYXVzZSBoZXJlIHdlIFwic3RvcFwiIHBsYXliYWNrIGluc3RlYWRcbiAgICAgIC8vIG9mIHBhdXNpbmcgaXQgKGZyb20gYSBVSSBwZXJzcGVjdGl2ZSksIHNvIHdlIGtlZXAgdGhlIGxpdmUgZWRnZSBpbmRpY2F0b3Igb24gYmVjYXVzZSBhIHBsYXkgd291bGQgYWx3YXlzXG4gICAgICAvLyByZXN1bWUgYXQgdGhlIGxpdmUgZWRnZS5cbiAgICAgIGNvbnN0IGlzVGltZXNoaWZ0ZWQgPSBwbGF5ZXIuZ2V0VGltZVNoaWZ0KCkgPCAwO1xuICAgICAgY29uc3QgaXNUaW1lc2hpZnRBdmFpbGFibGUgPSBwbGF5ZXIuZ2V0TWF4VGltZVNoaWZ0KCkgPCAwO1xuICAgICAgaWYgKCFpc1RpbWVzaGlmdGVkICYmICghcGxheWVyLmlzUGF1c2VkKCkgfHwgIWlzVGltZXNoaWZ0QXZhaWxhYmxlKSkge1xuICAgICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hZGRDbGFzcyhsaXZlRWRnZUNzc0NsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLnJlbW92ZUNsYXNzKGxpdmVFZGdlQ3NzQ2xhc3MpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBsZXQgbGl2ZVN0cmVhbURldGVjdG9yID0gbmV3IFBsYXllclV0aWxzLkxpdmVTdHJlYW1EZXRlY3RvcihwbGF5ZXIsIHVpbWFuYWdlcik7XG4gICAgbGl2ZVN0cmVhbURldGVjdG9yLm9uTGl2ZUNoYW5nZWQuc3Vic2NyaWJlKChzZW5kZXIsIGFyZ3M6IExpdmVTdHJlYW1EZXRlY3RvckV2ZW50QXJncykgPT4ge1xuICAgICAgbGl2ZSA9IGFyZ3MubGl2ZTtcbiAgICAgIHVwZGF0ZUxpdmVTdGF0ZSgpO1xuICAgIH0pO1xuICAgIGxpdmVTdHJlYW1EZXRlY3Rvci5kZXRlY3QoKTsgLy8gSW5pdGlhbCBkZXRlY3Rpb25cblxuICAgIGxldCBwbGF5YmFja1RpbWVIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgaWYgKCFsaXZlICYmIHBsYXllci5nZXREdXJhdGlvbigpICE9PSBJbmZpbml0eSkge1xuICAgICAgICB0aGlzLnNldFRpbWUoXG4gICAgICAgICAgUGxheWVyVXRpbHMuZ2V0Q3VycmVudFRpbWVSZWxhdGl2ZVRvU2Vla2FibGVSYW5nZShwbGF5ZXIpLFxuICAgICAgICAgIHBsYXllci5nZXREdXJhdGlvbigpKTtcbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgJ2p1bXBpbmcnIGluIHRoZSBVSSBieSB2YXJ5aW5nIGxhYmVsIHNpemVzIGR1ZSB0byBub24tbW9ub3NwYWNlZCBmb250cyxcbiAgICAgIC8vIHdlIGdyYWR1YWxseSBpbmNyZWFzZSB0aGUgbWluLXdpZHRoIHdpdGggdGhlIGNvbnRlbnQgdG8gcmVhY2ggYSBzdGFibGUgc2l6ZS5cbiAgICAgIGxldCB3aWR0aCA9IHRoaXMuZ2V0RG9tRWxlbWVudCgpLndpZHRoKCk7XG4gICAgICBpZiAod2lkdGggPiBtaW5XaWR0aCkge1xuICAgICAgICBtaW5XaWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5jc3Moe1xuICAgICAgICAgICdtaW4td2lkdGgnOiBtaW5XaWR0aCArICdweCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBsZXQgdXBkYXRlVGltZUZvcm1hdEJhc2VkT25EdXJhdGlvbiA9ICgpID0+IHtcbiAgICAgIC8vIFNldCB0aW1lIGZvcm1hdCBkZXBlbmRpbmcgb24gc291cmNlIGR1cmF0aW9uXG4gICAgICB0aGlzLnRpbWVGb3JtYXQgPSBNYXRoLmFicyhwbGF5ZXIuaXNMaXZlKCkgPyBwbGF5ZXIuZ2V0TWF4VGltZVNoaWZ0KCkgOiBwbGF5ZXIuZ2V0RHVyYXRpb24oKSkgPj0gMzYwMCA/XG4gICAgICBTdHJpbmdVdGlscy5GT1JNQVRfSEhNTVNTIDogU3RyaW5nVXRpbHMuRk9STUFUX01NU1M7XG4gICAgICBwbGF5YmFja1RpbWVIYW5kbGVyKCk7XG4gICAgfTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5UaW1lQ2hhbmdlZCwgcGxheWJhY2tUaW1lSGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlJlYWR5LCB1cGRhdGVUaW1lRm9ybWF0QmFzZWRPbkR1cmF0aW9uKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU2Vla2VkLCBwbGF5YmFja1RpbWVIYW5kbGVyKTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5UaW1lU2hpZnQsIHVwZGF0ZUxpdmVUaW1lc2hpZnRTdGF0ZSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlRpbWVTaGlmdGVkLCB1cGRhdGVMaXZlVGltZXNoaWZ0U3RhdGUpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5aW5nLCB1cGRhdGVMaXZlVGltZXNoaWZ0U3RhdGUpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QYXVzZWQsIHVwZGF0ZUxpdmVUaW1lc2hpZnRTdGF0ZSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlN0YWxsU3RhcnRlZCwgdXBkYXRlTGl2ZVRpbWVzaGlmdFN0YXRlKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU3RhbGxFbmRlZCwgdXBkYXRlTGl2ZVRpbWVzaGlmdFN0YXRlKTtcblxuICAgIGxldCBpbml0ID0gKCkgPT4ge1xuICAgICAgLy8gUmVzZXQgbWluLXdpZHRoIHdoZW4gYSBuZXcgc291cmNlIGlzIHJlYWR5IChlc3BlY2lhbGx5IGZvciBzd2l0Y2hpbmcgVk9EL0xpdmUgbW9kZXMgd2hlcmUgdGhlIGxhYmVsIGNvbnRlbnRcbiAgICAgIC8vIGNoYW5nZXMpXG4gICAgICBtaW5XaWR0aCA9IDA7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5jc3Moe1xuICAgICAgICAnbWluLXdpZHRoJzogbnVsbCxcbiAgICAgIH0pO1xuXG4gICAgICB1cGRhdGVUaW1lRm9ybWF0QmFzZWRPbkR1cmF0aW9uKCk7XG4gICAgfTtcbiAgICB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUoaW5pdCk7XG5cbiAgICBpbml0KCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgY3VycmVudCBwbGF5YmFjayB0aW1lIGFuZCB0b3RhbCBkdXJhdGlvbi5cbiAgICogQHBhcmFtIHBsYXliYWNrU2Vjb25kcyB0aGUgY3VycmVudCBwbGF5YmFjayB0aW1lIGluIHNlY29uZHNcbiAgICogQHBhcmFtIGR1cmF0aW9uU2Vjb25kcyB0aGUgdG90YWwgZHVyYXRpb24gaW4gc2Vjb25kc1xuICAgKi9cbiAgc2V0VGltZShwbGF5YmFja1NlY29uZHM6IG51bWJlciwgZHVyYXRpb25TZWNvbmRzOiBudW1iZXIpIHtcbiAgICBsZXQgY3VycmVudFRpbWUgPSBTdHJpbmdVdGlscy5zZWNvbmRzVG9UaW1lKHBsYXliYWNrU2Vjb25kcywgdGhpcy50aW1lRm9ybWF0KTtcbiAgICBsZXQgdG90YWxUaW1lID0gU3RyaW5nVXRpbHMuc2Vjb25kc1RvVGltZShkdXJhdGlvblNlY29uZHMsIHRoaXMudGltZUZvcm1hdCk7XG5cbiAgICBzd2l0Y2ggKCg8UGxheWJhY2tUaW1lTGFiZWxDb25maWc+dGhpcy5jb25maWcpLnRpbWVMYWJlbE1vZGUpIHtcbiAgICAgIGNhc2UgUGxheWJhY2tUaW1lTGFiZWxNb2RlLkN1cnJlbnRUaW1lOlxuICAgICAgICB0aGlzLnNldFRleHQoYCR7Y3VycmVudFRpbWV9YCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBQbGF5YmFja1RpbWVMYWJlbE1vZGUuVG90YWxUaW1lOlxuICAgICAgICB0aGlzLnNldFRleHQoYCR7dG90YWxUaW1lfWApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgUGxheWJhY2tUaW1lTGFiZWxNb2RlLkN1cnJlbnRBbmRUb3RhbFRpbWU6XG4gICAgICAgIHRoaXMuc2V0VGV4dChgJHtjdXJyZW50VGltZX0gLyAke3RvdGFsVGltZX1gKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFBsYXliYWNrVGltZUxhYmVsTW9kZS5SZW1haW5pbmdUaW1lOlxuICAgICAgICBsZXQgcmVtYWluaW5nVGltZSA9IFN0cmluZ1V0aWxzLnNlY29uZHNUb1RpbWUoZHVyYXRpb25TZWNvbmRzIC0gcGxheWJhY2tTZWNvbmRzLCB0aGlzLnRpbWVGb3JtYXQpO1xuICAgICAgICB0aGlzLnNldFRleHQoYCR7cmVtYWluaW5nVGltZX1gKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGN1cnJlbnQgdGltZSBmb3JtYXRcbiAgICogQHBhcmFtIHRpbWVGb3JtYXQgdGhlIHRpbWUgZm9ybWF0XG4gICAqL1xuICBwcm90ZWN0ZWQgc2V0VGltZUZvcm1hdCh0aW1lRm9ybWF0OiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnRpbWVGb3JtYXQgPSB0aW1lRm9ybWF0O1xuICB9XG59XG4iLCJpbXBvcnQge1RvZ2dsZUJ1dHRvbiwgVG9nZ2xlQnV0dG9uQ29uZmlnfSBmcm9tICcuL3RvZ2dsZWJ1dHRvbic7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHtQbGF5ZXJVdGlsc30gZnJvbSAnLi4vcGxheWVydXRpbHMnO1xuaW1wb3J0IHsgUGxheWVyQVBJLCBXYXJuaW5nRXZlbnQgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBAY2F0ZWdvcnkgQ29uZmlnc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFBsYXliYWNrVG9nZ2xlQnV0dG9uQ29uZmlnIGV4dGVuZHMgVG9nZ2xlQnV0dG9uQ29uZmlnIHtcbiAgLyoqXG4gICAqIFNwZWNpZnkgd2hldGhlciB0aGUgcGxheWVyIHNob3VsZCBiZSBzZXQgdG8gZW50ZXIgZnVsbHNjcmVlbiBieSBjbGlja2luZyBvbiB0aGUgcGxheWJhY2sgdG9nZ2xlIGJ1dHRvblxuICAgKiB3aGVuIGluaXRpYXRpbmcgdGhlIGluaXRpYWwgcGxheWJhY2suXG4gICAqIERlZmF1bHQgaXMgZmFsc2UuXG4gICAqL1xuICBlbnRlckZ1bGxzY3JlZW5PbkluaXRpYWxQbGF5YmFjaz86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQSBidXR0b24gdGhhdCB0b2dnbGVzIGJldHdlZW4gcGxheWJhY2sgYW5kIHBhdXNlLlxuICpcbiAqIEBjYXRlZ29yeSBCdXR0b25zXG4gKi9cbmV4cG9ydCBjbGFzcyBQbGF5YmFja1RvZ2dsZUJ1dHRvbiBleHRlbmRzIFRvZ2dsZUJ1dHRvbjxQbGF5YmFja1RvZ2dsZUJ1dHRvbkNvbmZpZz4ge1xuXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENMQVNTX1NUT1BUT0dHTEUgPSAnc3RvcHRvZ2dsZSc7XG4gIHByb3RlY3RlZCBpc1BsYXlJbml0aWF0ZWQ6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBQbGF5YmFja1RvZ2dsZUJ1dHRvbkNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktcGxheWJhY2t0b2dnbGVidXR0b24nLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3BsYXknKSxcbiAgICAgIG9uQXJpYUxhYmVsOiBpMThuLmdldExvY2FsaXplcigncGF1c2UnKSxcbiAgICAgIG9mZkFyaWFMYWJlbDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3BsYXknKSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG5cbiAgICB0aGlzLmlzUGxheUluaXRpYXRlZCA9IGZhbHNlO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyLCBoYW5kbGVDbGlja0V2ZW50OiBib29sZWFuID0gdHJ1ZSk6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICAvLyBTZXQgZW50ZXJGdWxsc2NyZWVuT25Jbml0aWFsUGxheWJhY2sgaWYgc2V0IGluIHRoZSB1aW1hbmFnZXIgY29uZmlnXG4gICAgaWYgKHR5cGVvZiB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZW50ZXJGdWxsc2NyZWVuT25Jbml0aWFsUGxheWJhY2sgPT09ICdib29sZWFuJykge1xuICAgICAgdGhpcy5jb25maWcuZW50ZXJGdWxsc2NyZWVuT25Jbml0aWFsUGxheWJhY2sgPSB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZW50ZXJGdWxsc2NyZWVuT25Jbml0aWFsUGxheWJhY2s7XG4gICAgfVxuXG4gICAgbGV0IGlzU2Vla2luZyA9IGZhbHNlO1xuICAgIGxldCBmaXJzdFBsYXkgPSB0cnVlO1xuXG4gICAgLy8gSGFuZGxlciB0byB1cGRhdGUgYnV0dG9uIHN0YXRlIGJhc2VkIG9uIHBsYXllciBzdGF0ZVxuICAgIGxldCBwbGF5YmFja1N0YXRlSGFuZGxlciA9ICgpID0+IHtcbiAgICAgIC8vIElmIHRoZSBVSSBpcyBjdXJyZW50bHkgc2Vla2luZywgcGxheWJhY2sgaXMgdGVtcG9yYXJpbHkgc3RvcHBlZCBidXQgdGhlIGJ1dHRvbnMgc2hvdWxkXG4gICAgICAvLyBub3QgcmVmbGVjdCB0aGF0IGFuZCBzdGF5IGFzLWlzIChlLmcgaW5kaWNhdGUgcGxheWJhY2sgd2hpbGUgc2Vla2luZykuXG4gICAgICBpZiAoaXNTZWVraW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHBsYXllci5pc1BsYXlpbmcoKSB8fCB0aGlzLmlzUGxheUluaXRpYXRlZCkge1xuICAgICAgICB0aGlzLm9uKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9mZigpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBDYWxsIGhhbmRsZXIgdXBvbiB0aGVzZSBldmVudHNcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheSwgKGUpID0+IHtcbiAgICAgIHRoaXMuaXNQbGF5SW5pdGlhdGVkID0gdHJ1ZTtcbiAgICAgIGZpcnN0UGxheSA9IGZhbHNlO1xuICAgICAgcGxheWJhY2tTdGF0ZUhhbmRsZXIoKTtcbiAgICB9KTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QYXVzZWQsIChlKSA9PiB7XG4gICAgICB0aGlzLmlzUGxheUluaXRpYXRlZCA9IGZhbHNlO1xuICAgICAgcGxheWJhY2tTdGF0ZUhhbmRsZXIoKTtcbiAgICB9KTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5aW5nLCAoZSkgPT4ge1xuICAgICAgdGhpcy5pc1BsYXlJbml0aWF0ZWQgPSBmYWxzZTtcbiAgICAgIHBsYXliYWNrU3RhdGVIYW5kbGVyKCk7XG4gICAgfSk7XG4gICAgLy8gYWZ0ZXIgdW5sb2FkaW5nICsgbG9hZGluZyBhIG5ldyBzb3VyY2UsIHRoZSBwbGF5ZXIgbWlnaHQgYmUgaW4gYSBkaWZmZXJlbnQgcGxheWluZyBzdGF0ZSAoZnJvbSBwbGF5aW5nIGludG8gc3RvcHBlZClcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU291cmNlTG9hZGVkLCBwbGF5YmFja1N0YXRlSGFuZGxlcik7XG4gICAgdWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKHBsYXliYWNrU3RhdGVIYW5kbGVyKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU291cmNlVW5sb2FkZWQsIHBsYXliYWNrU3RhdGVIYW5kbGVyKTtcbiAgICAvLyB3aGVuIHBsYXliYWNrIGZpbmlzaGVzLCBwbGF5ZXIgdHVybnMgdG8gcGF1c2VkIG1vZGVcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheWJhY2tGaW5pc2hlZCwgcGxheWJhY2tTdGF0ZUhhbmRsZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5DYXN0U3RhcnRlZCwgcGxheWJhY2tTdGF0ZUhhbmRsZXIpO1xuXG4gICAgLy8gV2hlbiBhIHBsYXliYWNrIGF0dGVtcHQgaXMgcmVqZWN0ZWQgd2l0aCB3YXJuaW5nIDUwMDgsIHdlIHN3aXRjaCB0aGUgYnV0dG9uIHN0YXRlIGJhY2sgdG8gb2ZmXG4gICAgLy8gVGhpcyBpcyByZXF1aXJlZCBmb3IgYmxvY2tlZCBhdXRvcGxheSwgYmVjYXVzZSB0aGVyZSBpcyBubyBQYXVzZWQgZXZlbnQgaW4gc3VjaCBjYXNlXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50Lldhcm5pbmcsIChldmVudDogV2FybmluZ0V2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQuY29kZSA9PT0gcGxheWVyLmV4cG9ydHMuV2FybmluZ0NvZGUuUExBWUJBQ0tfQ09VTERfTk9UX0JFX1NUQVJURUQpIHtcbiAgICAgICAgdGhpcy5pc1BsYXlJbml0aWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgZmlyc3RQbGF5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vZmYoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IHVwZGF0ZUxpdmVTdGF0ZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHNob3dTdG9wVG9nZ2xlID0gcGxheWVyLmlzTGl2ZSgpICYmICFQbGF5ZXJVdGlscy5pc1RpbWVTaGlmdEF2YWlsYWJsZShwbGF5ZXIpO1xuXG4gICAgICBpZiAoc2hvd1N0b3BUb2dnbGUpIHtcbiAgICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoUGxheWJhY2tUb2dnbGVCdXR0b24uQ0xBU1NfU1RPUFRPR0dMRSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoUGxheWJhY2tUb2dnbGVCdXR0b24uQ0xBU1NfU1RPUFRPR0dMRSkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBEZXRlY3QgYWJzZW5jZSBvZiB0aW1lc2hpZnRpbmcgb24gbGl2ZSBzdHJlYW1zIGFuZCBhZGQgdGFnZ2luZyBjbGFzcyB0byBjb252ZXJ0IGJ1dHRvbiBpY29ucyB0byBwbGF5L3N0b3BcbiAgICBsZXQgdGltZVNoaWZ0RGV0ZWN0b3IgPSBuZXcgUGxheWVyVXRpbHMuVGltZVNoaWZ0QXZhaWxhYmlsaXR5RGV0ZWN0b3IocGxheWVyKTtcbiAgICBsZXQgbGl2ZVN0cmVhbURldGVjdG9yID0gbmV3IFBsYXllclV0aWxzLkxpdmVTdHJlYW1EZXRlY3RvcihwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICB0aW1lU2hpZnREZXRlY3Rvci5vblRpbWVTaGlmdEF2YWlsYWJpbGl0eUNoYW5nZWQuc3Vic2NyaWJlKCgpID0+IHVwZGF0ZUxpdmVTdGF0ZSgpKTtcbiAgICBsaXZlU3RyZWFtRGV0ZWN0b3Iub25MaXZlQ2hhbmdlZC5zdWJzY3JpYmUoKCkgPT4gdXBkYXRlTGl2ZVN0YXRlKCkpO1xuXG4gICAgdGltZVNoaWZ0RGV0ZWN0b3IuZGV0ZWN0KCk7IC8vIEluaXRpYWwgZGV0ZWN0aW9uXG4gICAgbGl2ZVN0cmVhbURldGVjdG9yLmRldGVjdCgpO1xuXG4gICAgaWYgKGhhbmRsZUNsaWNrRXZlbnQpIHtcbiAgICAgIC8vIENvbnRyb2wgcGxheWVyIGJ5IGJ1dHRvbiBldmVudHNcbiAgICAgIC8vIFdoZW4gYSBidXR0b24gZXZlbnQgdHJpZ2dlcnMgYSBwbGF5ZXIgQVBJIGNhbGwsIGV2ZW50cyBhcmUgZmlyZWQgd2hpY2ggaW4gdHVybiBjYWxsIHRoZSBldmVudCBoYW5kbGVyXG4gICAgICAvLyBhYm92ZSB0aGF0IHVwZGF0ZWQgdGhlIGJ1dHRvbiBzdGF0ZS5cbiAgICAgIHRoaXMub25DbGljay5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICBpZiAocGxheWVyLmlzUGxheWluZygpIHx8IHRoaXMuaXNQbGF5SW5pdGlhdGVkKSB7XG4gICAgICAgICAgcGxheWVyLnBhdXNlKCd1aScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBsYXllci5wbGF5KCd1aScpO1xuXG4gICAgICAgICAgaWYgKGZpcnN0UGxheSAmJiB0aGlzLmNvbmZpZy5lbnRlckZ1bGxzY3JlZW5PbkluaXRpYWxQbGF5YmFjaykge1xuICAgICAgICAgICAgcGxheWVyLnNldFZpZXdNb2RlKHBsYXllci5leHBvcnRzLlZpZXdNb2RlLkZ1bGxzY3JlZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVHJhY2sgVUkgc2Vla2luZyBzdGF0dXNcbiAgICB1aW1hbmFnZXIub25TZWVrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBpc1NlZWtpbmcgPSB0cnVlO1xuICAgIH0pO1xuICAgIHVpbWFuYWdlci5vblNlZWtlZC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgaXNTZWVraW5nID0gZmFsc2U7XG4gICAgfSk7XG5cbiAgICAvLyBTdGFydHVwIGluaXRcbiAgICBwbGF5YmFja1N0YXRlSGFuZGxlcigpO1xuICB9XG59XG4iLCJpbXBvcnQge0NvbnRhaW5lciwgQ29udGFpbmVyQ29uZmlnfSBmcm9tICcuL2NvbnRhaW5lcic7XG5pbXBvcnQge0h1Z2VQbGF5YmFja1RvZ2dsZUJ1dHRvbn0gZnJvbSAnLi9odWdlcGxheWJhY2t0b2dnbGVidXR0b24nO1xuXG4vKipcbiAqIEBjYXRlZ29yeSBDb25maWdzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGxheWJhY2tUb2dnbGVPdmVybGF5Q29uZmlnIGV4dGVuZHMgQ29udGFpbmVyQ29uZmlnIHtcbiAgLyoqXG4gICAqIFNwZWNpZnkgd2hldGhlciB0aGUgcGxheWVyIHNob3VsZCBiZSBzZXQgdG8gZW50ZXIgZnVsbHNjcmVlbiBieSBjbGlja2luZyBvbiB0aGUgcGxheWJhY2sgdG9nZ2xlIGJ1dHRvblxuICAgKiB3aGVuIGluaXRpYXRpbmcgdGhlIGluaXRpYWwgcGxheWJhY2suXG4gICAqIERlZmF1bHQgaXMgZmFsc2UuXG4gICAqL1xuICBlbnRlckZ1bGxzY3JlZW5PbkluaXRpYWxQbGF5YmFjaz86IGJvb2xlYW47XG59XG5cbi8qKlxuICogT3ZlcmxheXMgdGhlIHBsYXllciBhbmQgZGlzcGxheXMgZXJyb3IgbWVzc2FnZXMuXG4gKlxuICogQGNhdGVnb3J5IENvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGNsYXNzIFBsYXliYWNrVG9nZ2xlT3ZlcmxheSBleHRlbmRzIENvbnRhaW5lcjxQbGF5YmFja1RvZ2dsZU92ZXJsYXlDb25maWc+IHtcblxuICBwcml2YXRlIHBsYXliYWNrVG9nZ2xlQnV0dG9uOiBIdWdlUGxheWJhY2tUb2dnbGVCdXR0b247XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBQbGF5YmFja1RvZ2dsZU92ZXJsYXlDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLnBsYXliYWNrVG9nZ2xlQnV0dG9uID0gbmV3IEh1Z2VQbGF5YmFja1RvZ2dsZUJ1dHRvbih7XG4gICAgICBlbnRlckZ1bGxzY3JlZW5PbkluaXRpYWxQbGF5YmFjazogQm9vbGVhbihjb25maWcuZW50ZXJGdWxsc2NyZWVuT25Jbml0aWFsUGxheWJhY2spLFxuICAgIH0pO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1wbGF5YmFja3RvZ2dsZS1vdmVybGF5JyxcbiAgICAgIGNvbXBvbmVudHM6IFt0aGlzLnBsYXliYWNrVG9nZ2xlQnV0dG9uXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cbn0iLCJpbXBvcnQgeyBCdXR0b24sIEJ1dHRvbkNvbmZpZyB9IGZyb20gJy4vYnV0dG9uJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5pbXBvcnQgeyBQbGF5ZXJBUEksIFNlZWtFdmVudCwgVGltZVNoaWZ0RXZlbnQgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyVXRpbHMgfSBmcm9tICcuLi9wbGF5ZXJ1dGlscyc7XG5cbi8qKlxuICogQGNhdGVnb3J5IENvbmZpZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBRdWlja1NlZWtCdXR0b25Db25maWcgZXh0ZW5kcyBCdXR0b25Db25maWcge1xuICAvKipcbiAgICogU3BlY2lmeSBob3cgbWFueSBzZWNvbmRzIHRoZSBwbGF5ZXIgc2hvdWxkIHNlZWsgZm9yd2FyZC9iYWNrd2FyZHMgaW4gdGhlIHN0cmVhbS5cbiAgICogTmVnYXRpdmUgdmFsdWVzIG1lYW4gYSBiYWNrd2FyZHMgc2VlaywgcG9zaXRpdmUgdmFsdWVzIG1lYW4gYSBmb3J3YXJkIHNlZWsuXG4gICAqIERlZmF1bHQgaXMgLTEwLlxuICAgKi9cbiAgc2Vla1NlY29uZHM/OiBudW1iZXI7XG59XG5cbi8qKlxuICogQGNhdGVnb3J5IEJ1dHRvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIFF1aWNrU2Vla0J1dHRvbiBleHRlbmRzIEJ1dHRvbjxRdWlja1NlZWtCdXR0b25Db25maWc+IHtcbiAgcHJpdmF0ZSBjdXJyZW50U2Vla1RhcmdldDogbnVtYmVyIHwgbnVsbDtcbiAgcHJpdmF0ZSBwbGF5ZXI6IFBsYXllckFQSTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFF1aWNrU2Vla0J1dHRvbkNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcbiAgICB0aGlzLmN1cnJlbnRTZWVrVGFyZ2V0ID0gbnVsbDtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhcbiAgICAgIGNvbmZpZyxcbiAgICAgIHtcbiAgICAgICAgc2Vla1NlY29uZHM6IC0xMCxcbiAgICAgICAgY3NzQ2xhc3M6ICd1aS1xdWlja3NlZWtidXR0b24nLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29uZmlnLFxuICAgICk7XG5cbiAgICBjb25zdCBzZWVrRGlyZWN0aW9uID0gdGhpcy5jb25maWcuc2Vla1NlY29uZHMgPCAwID8gJ3Jld2luZCcgOiAnZm9yd2FyZCc7XG5cbiAgICB0aGlzLmNvbmZpZy50ZXh0ID0gdGhpcy5jb25maWcudGV4dCB8fCBpMThuLmdldExvY2FsaXplcihgcXVpY2tzZWVrLiR7c2Vla0RpcmVjdGlvbn1gKTtcbiAgICB0aGlzLmNvbmZpZy5hcmlhTGFiZWwgPSB0aGlzLmNvbmZpZy5hcmlhTGFiZWwgfHwgaTE4bi5nZXRMb2NhbGl6ZXIoYHF1aWNrc2Vlay4ke3NlZWtEaXJlY3Rpb259YCk7XG5cbiAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5kYXRhKHRoaXMucHJlZml4Q3NzKCdzZWVrLWRpcmVjdGlvbicpLCBzZWVrRGlyZWN0aW9uKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG4gICAgdGhpcy5wbGF5ZXIgPSBwbGF5ZXI7XG5cbiAgICBsZXQgaXNMaXZlOiBib29sZWFuO1xuICAgIGxldCBoYXNUaW1lU2hpZnQ6IGJvb2xlYW47XG5cbiAgICBjb25zdCBzd2l0Y2hWaXNpYmlsaXR5ID0gKGlzTGl2ZTogYm9vbGVhbiwgaGFzVGltZVNoaWZ0OiBib29sZWFuKSA9PiB7XG4gICAgICBpZiAoaXNMaXZlICYmICFoYXNUaW1lU2hpZnQpIHtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgdGltZVNoaWZ0RGV0ZWN0b3IgPSBuZXcgUGxheWVyVXRpbHMuVGltZVNoaWZ0QXZhaWxhYmlsaXR5RGV0ZWN0b3IocGxheWVyKTtcbiAgICB0aW1lU2hpZnREZXRlY3Rvci5vblRpbWVTaGlmdEF2YWlsYWJpbGl0eUNoYW5nZWQuc3Vic2NyaWJlKFxuICAgICAgKHNlbmRlciwgYXJnczogUGxheWVyVXRpbHMuVGltZVNoaWZ0QXZhaWxhYmlsaXR5Q2hhbmdlZEFyZ3MpID0+IHtcbiAgICAgICAgaGFzVGltZVNoaWZ0ID0gYXJncy50aW1lU2hpZnRBdmFpbGFibGU7XG4gICAgICAgIHN3aXRjaFZpc2liaWxpdHkoaXNMaXZlLCBoYXNUaW1lU2hpZnQpO1xuICAgICAgfSxcbiAgICApO1xuXG4gICAgbGV0IGxpdmVTdHJlYW1EZXRlY3RvciA9IG5ldyBQbGF5ZXJVdGlscy5MaXZlU3RyZWFtRGV0ZWN0b3IocGxheWVyLCB1aW1hbmFnZXIpO1xuICAgIGxpdmVTdHJlYW1EZXRlY3Rvci5vbkxpdmVDaGFuZ2VkLnN1YnNjcmliZSgoc2VuZGVyLCBhcmdzOiBQbGF5ZXJVdGlscy5MaXZlU3RyZWFtRGV0ZWN0b3JFdmVudEFyZ3MpID0+IHtcbiAgICAgIGlzTGl2ZSA9IGFyZ3MubGl2ZTtcbiAgICAgIHN3aXRjaFZpc2liaWxpdHkoaXNMaXZlLCBoYXNUaW1lU2hpZnQpO1xuICAgIH0pO1xuXG4gICAgLy8gSW5pdGlhbCBkZXRlY3Rpb25cbiAgICB0aW1lU2hpZnREZXRlY3Rvci5kZXRlY3QoKTtcbiAgICBsaXZlU3RyZWFtRGV0ZWN0b3IuZGV0ZWN0KCk7XG5cbiAgICB0aGlzLm9uQ2xpY2suc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGlmIChpc0xpdmUgJiYgIWhhc1RpbWVTaGlmdCkge1xuICAgICAgICAvLyBJZiBubyBEVlIgd2luZG93IGlzIGF2YWlsYWJsZSwgdGhlIGJ1dHRvbiBzaG91bGQgYmUgaGlkZGVuIGFueXdheSwgc28gdGhpcyBpcyB0byBiZSBhYnNvbHV0ZWx5IHN1cmVcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNMaXZlICYmIHRoaXMuY29uZmlnLnNlZWtTZWNvbmRzID4gMCAmJiBwbGF5ZXIuZ2V0VGltZVNoaWZ0KCkgPT09IDApIHtcbiAgICAgICAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgdGhlIHBsYXllciBpcyBhbHJlYWR5IG9uIHRoZSBsaXZlIGVkZ2VcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjdXJyZW50UG9zaXRpb24gPVxuICAgICAgICB0aGlzLmN1cnJlbnRTZWVrVGFyZ2V0ICE9PSBudWxsXG4gICAgICAgICAgPyB0aGlzLmN1cnJlbnRTZWVrVGFyZ2V0XG4gICAgICAgICAgOiBpc0xpdmVcbiAgICAgICAgICAgID8gcGxheWVyLmdldFRpbWVTaGlmdCgpXG4gICAgICAgICAgICA6IHBsYXllci5nZXRDdXJyZW50VGltZSgpO1xuXG4gICAgICBjb25zdCBuZXdTZWVrVGltZSA9IGN1cnJlbnRQb3NpdGlvbiArIHRoaXMuY29uZmlnLnNlZWtTZWNvbmRzO1xuXG4gICAgICBpZiAoaXNMaXZlKSB7XG4gICAgICAgIGNvbnN0IGNsYW1wZWRWYWx1ZSA9IFBsYXllclV0aWxzLmNsYW1wVmFsdWVUb1JhbmdlKG5ld1NlZWtUaW1lLCBwbGF5ZXIuZ2V0TWF4VGltZVNoaWZ0KCksIDApO1xuICAgICAgICBwbGF5ZXIudGltZVNoaWZ0KGNsYW1wZWRWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBjbGFtcGVkVmFsdWUgPSBQbGF5ZXJVdGlscy5jbGFtcFZhbHVlVG9SYW5nZShuZXdTZWVrVGltZSwgMCwgcGxheWVyLmdldER1cmF0aW9uKCkpO1xuICAgICAgICBwbGF5ZXIuc2VlayhjbGFtcGVkVmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TZWVrLCB0aGlzLm9uU2Vlayk7XG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TZWVrZWQsIHRoaXMub25TZWVrZWRPclRpbWVTaGlmdGVkKTtcbiAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlRpbWVTaGlmdCwgdGhpcy5vblRpbWVTaGlmdCk7XG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5UaW1lU2hpZnRlZCwgdGhpcy5vblNlZWtlZE9yVGltZVNoaWZ0ZWQpO1xuICB9XG5cbiAgcHJpdmF0ZSBvblNlZWsgPSAoZXZlbnQ6IFNlZWtFdmVudCk6IHZvaWQgPT4ge1xuICAgIHRoaXMuY3VycmVudFNlZWtUYXJnZXQgPSBldmVudC5zZWVrVGFyZ2V0O1xuICB9O1xuXG4gIHByaXZhdGUgb25TZWVrZWRPclRpbWVTaGlmdGVkID0gKCkgPT4ge1xuICAgIHRoaXMuY3VycmVudFNlZWtUYXJnZXQgPSBudWxsO1xuICB9O1xuXG4gIHByaXZhdGUgb25UaW1lU2hpZnQgPSAoZXZlbnQ6IFRpbWVTaGlmdEV2ZW50KTogdm9pZCA9PiB7XG4gICAgdGhpcy5jdXJyZW50U2Vla1RhcmdldCA9IHRoaXMucGxheWVyLmdldFRpbWVTaGlmdCgpICsgKGV2ZW50LnRhcmdldCAtIGV2ZW50LnBvc2l0aW9uKTtcbiAgfVxuXG4gIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgdGhpcy5wbGF5ZXIub2ZmKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU2VlaywgdGhpcy5vblNlZWspO1xuICAgIHRoaXMucGxheWVyLm9mZih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNlZWtlZCwgdGhpcy5vblNlZWtlZE9yVGltZVNoaWZ0ZWQpO1xuICAgIHRoaXMucGxheWVyLm9mZih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlRpbWVTaGlmdCwgdGhpcy5vblRpbWVTaGlmdCk7XG4gICAgdGhpcy5wbGF5ZXIub2ZmKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVGltZVNoaWZ0ZWQsIHRoaXMub25TZWVrZWRPclRpbWVTaGlmdGVkKTtcbiAgICB0aGlzLmN1cnJlbnRTZWVrVGFyZ2V0ID0gbnVsbDtcbiAgICB0aGlzLnBsYXllciA9IG51bGw7XG4gIH1cbn1cbiIsImltcG9ydCB7Q29udGFpbmVyQ29uZmlnLCBDb250YWluZXJ9IGZyb20gJy4vY29udGFpbmVyJztcbmltcG9ydCB7Q29tcG9uZW50LCBDb21wb25lbnRDb25maWd9IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCB7RE9NfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7U3RyaW5nVXRpbHN9IGZyb20gJy4uL3N0cmluZ3V0aWxzJztcbmltcG9ydCB7SHVnZVJlcGxheUJ1dHRvbn0gZnJvbSAnLi9odWdlcmVwbGF5YnV0dG9uJztcbmltcG9ydCB7IFVJUmVjb21tZW5kYXRpb25Db25maWcgfSBmcm9tICcuLi91aWNvbmZpZyc7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuXG4vKipcbiAqIE92ZXJsYXlzIHRoZSBwbGF5ZXIgYW5kIGRpc3BsYXlzIHJlY29tbWVuZGVkIHZpZGVvcy5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29udGFpbmVyc1xuICovXG5leHBvcnQgY2xhc3MgUmVjb21tZW5kYXRpb25PdmVybGF5IGV4dGVuZHMgQ29udGFpbmVyPENvbnRhaW5lckNvbmZpZz4ge1xuXG4gIHByaXZhdGUgcmVwbGF5QnV0dG9uOiBIdWdlUmVwbGF5QnV0dG9uO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29udGFpbmVyQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5yZXBsYXlCdXR0b24gPSBuZXcgSHVnZVJlcGxheUJ1dHRvbigpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1yZWNvbW1lbmRhdGlvbi1vdmVybGF5JyxcbiAgICAgIGhpZGRlbjogdHJ1ZSxcbiAgICAgIGNvbXBvbmVudHM6IFt0aGlzLnJlcGxheUJ1dHRvbl0sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBjbGVhclJlY29tbWVuZGF0aW9ucyA9ICgpID0+IHtcbiAgICAgIGZvciAobGV0IGNvbXBvbmVudCBvZiB0aGlzLmdldENvbXBvbmVudHMoKS5zbGljZSgpKSB7XG4gICAgICAgIGlmIChjb21wb25lbnQgaW5zdGFuY2VvZiBSZWNvbW1lbmRhdGlvbkl0ZW0pIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUNvbXBvbmVudChjb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudHMoKTtcbiAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4Q3NzKCdyZWNvbW1lbmRhdGlvbnMnKSk7XG4gICAgfTtcblxuICAgIGxldCBzZXR1cFJlY29tbWVuZGF0aW9ucyA9ICgpID0+IHtcbiAgICAgIGNsZWFyUmVjb21tZW5kYXRpb25zKCk7XG5cbiAgICAgIGNvbnN0IHJlY29tbWVuZGF0aW9ucyA9IHVpbWFuYWdlci5nZXRDb25maWcoKS5yZWNvbW1lbmRhdGlvbnM7XG5cbiAgICAgIGlmIChyZWNvbW1lbmRhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgaW5kZXggPSAxO1xuICAgICAgICBmb3IgKGxldCBpdGVtIG9mIHJlY29tbWVuZGF0aW9ucykge1xuICAgICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KG5ldyBSZWNvbW1lbmRhdGlvbkl0ZW0oe1xuICAgICAgICAgICAgaXRlbUNvbmZpZzogaXRlbSxcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsncmVjb21tZW5kYXRpb24taXRlbS0nICsgKGluZGV4KyspXSxcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVDb21wb25lbnRzKCk7IC8vIGNyZWF0ZSBjb250YWluZXIgRE9NIGVsZW1lbnRzXG5cbiAgICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoJ3JlY29tbWVuZGF0aW9ucycpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKHNldHVwUmVjb21tZW5kYXRpb25zKTtcbiAgICAvLyBSZW1vdmUgcmVjb21tZW5kYXRpb25zIGFuZCBoaWRlIG92ZXJsYXkgd2hlbiBzb3VyY2UgaXMgdW5sb2FkZWRcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU291cmNlVW5sb2FkZWQsICgpID0+IHtcbiAgICAgIGNsZWFyUmVjb21tZW5kYXRpb25zKCk7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9KTtcbiAgICAvLyBEaXNwbGF5IHJlY29tbWVuZGF0aW9ucyB3aGVuIHBsYXliYWNrIGhhcyBmaW5pc2hlZFxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5YmFja0ZpbmlzaGVkLCAoKSA9PiB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9KTtcbiAgICAvLyBIaWRlIHJlY29tbWVuZGF0aW9ucyB3aGVuIHBsYXliYWNrIHN0YXJ0cywgZS5nLiBhIHJlc3RhcnRcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheSwgKCkgPT4ge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfSk7XG5cbiAgICAvLyBJbml0IG9uIHN0YXJ0dXBcbiAgICBzZXR1cFJlY29tbWVuZGF0aW9ucygpO1xuICB9XG59XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIHRoZSB7QGxpbmsgUmVjb21tZW5kYXRpb25JdGVtfVxuICovXG5pbnRlcmZhY2UgUmVjb21tZW5kYXRpb25JdGVtQ29uZmlnIGV4dGVuZHMgQ29tcG9uZW50Q29uZmlnIHtcbiAgaXRlbUNvbmZpZzogVUlSZWNvbW1lbmRhdGlvbkNvbmZpZztcbn1cblxuLyoqXG4gKiBBbiBpdGVtIG9mIHRoZSB7QGxpbmsgUmVjb21tZW5kYXRpb25PdmVybGF5fS4gVXNlZCBvbmx5IGludGVybmFsbHkgaW4ge0BsaW5rIFJlY29tbWVuZGF0aW9uT3ZlcmxheX0uXG4gKi9cbmNsYXNzIFJlY29tbWVuZGF0aW9uSXRlbSBleHRlbmRzIENvbXBvbmVudDxSZWNvbW1lbmRhdGlvbkl0ZW1Db25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFJlY29tbWVuZGF0aW9uSXRlbUNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXJlY29tbWVuZGF0aW9uLWl0ZW0nLFxuICAgICAgaXRlbUNvbmZpZzogbnVsbCwgLy8gdGhpcyBtdXN0IGJlIHBhc3NlZCBpbiBmcm9tIG91dHNpZGVcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdG9Eb21FbGVtZW50KCk6IERPTSB7XG4gICAgbGV0IGNvbmZpZyA9IHRoaXMuY29uZmlnLml0ZW1Db25maWc7XG5cbiAgICBsZXQgaXRlbUVsZW1lbnQgPSBuZXcgRE9NKCdhJywge1xuICAgICAgJ2lkJzogdGhpcy5jb25maWcuaWQsXG4gICAgICAnY2xhc3MnOiB0aGlzLmdldENzc0NsYXNzZXMoKSxcbiAgICAgICdocmVmJzogY29uZmlnLnVybCxcbiAgICB9LCB0aGlzKS5jc3MoeyAnYmFja2dyb3VuZC1pbWFnZSc6IGB1cmwoJHtjb25maWcudGh1bWJuYWlsfSlgIH0pO1xuXG4gICAgbGV0IGJnRWxlbWVudCA9IG5ldyBET00oJ2RpdicsIHtcbiAgICAgICdjbGFzcyc6IHRoaXMucHJlZml4Q3NzKCdiYWNrZ3JvdW5kJyksXG4gICAgfSk7XG4gICAgaXRlbUVsZW1lbnQuYXBwZW5kKGJnRWxlbWVudCk7XG5cbiAgICBsZXQgdGl0bGVFbGVtZW50ID0gbmV3IERPTSgnc3BhbicsIHtcbiAgICAgICdjbGFzcyc6IHRoaXMucHJlZml4Q3NzKCd0aXRsZScpLFxuICAgIH0pLmFwcGVuZChuZXcgRE9NKCdzcGFuJywge1xuICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ2lubmVydGl0bGUnKSxcbiAgICB9KS5odG1sKGNvbmZpZy50aXRsZSkpO1xuICAgIGl0ZW1FbGVtZW50LmFwcGVuZCh0aXRsZUVsZW1lbnQpO1xuXG4gICAgbGV0IHRpbWVFbGVtZW50ID0gbmV3IERPTSgnc3BhbicsIHtcbiAgICAgICdjbGFzcyc6IHRoaXMucHJlZml4Q3NzKCdkdXJhdGlvbicpLFxuICAgIH0pLmFwcGVuZChuZXcgRE9NKCdzcGFuJywge1xuICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ2lubmVyZHVyYXRpb24nKSxcbiAgICB9KS5odG1sKGNvbmZpZy5kdXJhdGlvbiA/IFN0cmluZ1V0aWxzLnNlY29uZHNUb1RpbWUoY29uZmlnLmR1cmF0aW9uKSA6ICcnKSk7XG4gICAgaXRlbUVsZW1lbnQuYXBwZW5kKHRpbWVFbGVtZW50KTtcblxuICAgIHJldHVybiBpdGVtRWxlbWVudDtcbiAgfVxufSIsImltcG9ydCB7IEJ1dHRvbkNvbmZpZywgQnV0dG9uIH0gZnJvbSAnLi9idXR0b24nO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5pbXBvcnQgeyBQbGF5ZXJVdGlscyB9IGZyb20gJy4uL3BsYXllcnV0aWxzJztcbmltcG9ydCBMaXZlU3RyZWFtRGV0ZWN0b3JFdmVudEFyZ3MgPSBQbGF5ZXJVdGlscy5MaXZlU3RyZWFtRGV0ZWN0b3JFdmVudEFyZ3M7XG5cbi8qKlxuICogQSBidXR0b24gdG8gcGxheS9yZXBsYXkgYSB2aWRlby5cbiAqXG4gKiBAY2F0ZWdvcnkgQnV0dG9uc1xuICovXG5leHBvcnQgY2xhc3MgUmVwbGF5QnV0dG9uIGV4dGVuZHMgQnV0dG9uPEJ1dHRvbkNvbmZpZz4ge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQnV0dG9uQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1yZXBsYXlidXR0b24nLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3JlcGxheScpLFxuICAgICAgYXJpYUxhYmVsOiBpMThuLmdldExvY2FsaXplcigncmVwbGF5JyksXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGlmIChwbGF5ZXIuaXNMaXZlKCkpIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cblxuICAgIGNvbnN0IGxpdmVTdHJlYW1EZXRlY3RvciA9IG5ldyBQbGF5ZXJVdGlscy5MaXZlU3RyZWFtRGV0ZWN0b3IocGxheWVyLCB1aW1hbmFnZXIpO1xuICAgIGxpdmVTdHJlYW1EZXRlY3Rvci5vbkxpdmVDaGFuZ2VkLnN1YnNjcmliZSgoc2VuZGVyLCBhcmdzOiBMaXZlU3RyZWFtRGV0ZWN0b3JFdmVudEFyZ3MpID0+IHtcbiAgICAgIGlmIChhcmdzLmxpdmUpIHtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMub25DbGljay5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgaWYgKCFwbGF5ZXIuaGFzRW5kZWQoKSkge1xuICAgICAgICBwbGF5ZXIuc2VlaygwKTtcbiAgICAgICAgLy8gTm90IGNhbGxpbmcgYHBsYXlgIHdpbGwga2VlcCB0aGUgcGxheS9wYXVzZSBzdGF0ZSBhcyBpc1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgcGxheWJhY2sgaGFzIGFscmVhZHkgZW5kZWQsIGNhbGxpbmcgYHBsYXlgIHdpbGwgYXV0b21hdGljYWxseSByZXN0YXJ0IGZyb20gdGhlIGJlZ2lubmluZ1xuICAgICAgICBwbGF5ZXIucGxheSgndWknKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRXh0ZW5kZWRQbGF5ZXJBUEksIEdyb3VwUGxheWJhY2tTdXNwZW5zaW9uLCBHcm91cFBsYXliYWNrU3VzcGVuc2lvblJlYXNvbiB9IGZyb20gJy4vLi4vZ3JvdXBwbGF5YmFja2FwaSc7XG5pbXBvcnQgeyBDb21wb25lbnQsIENvbXBvbmVudENvbmZpZyB9IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCB7IERPTSB9IGZyb20gJy4uL2RvbSc7XG5pbXBvcnQgeyBFdmVudCwgRXZlbnREaXNwYXRjaGVyLCBOb0FyZ3MgfSBmcm9tICcuLi9ldmVudGRpc3BhdGNoZXInO1xuaW1wb3J0IHsgU2Vla0JhckxhYmVsIH0gZnJvbSAnLi9zZWVrYmFybGFiZWwnO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIsIFNlZWtQcmV2aWV3QXJncyB9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBUaW1lb3V0IH0gZnJvbSAnLi4vdGltZW91dCc7XG5pbXBvcnQgeyBQbGF5ZXJVdGlscyB9IGZyb20gJy4uL3BsYXllcnV0aWxzJztcbmltcG9ydCBUaW1lU2hpZnRBdmFpbGFiaWxpdHlDaGFuZ2VkQXJncyA9IFBsYXllclV0aWxzLlRpbWVTaGlmdEF2YWlsYWJpbGl0eUNoYW5nZWRBcmdzO1xuaW1wb3J0IExpdmVTdHJlYW1EZXRlY3RvckV2ZW50QXJncyA9IFBsYXllclV0aWxzLkxpdmVTdHJlYW1EZXRlY3RvckV2ZW50QXJncztcbmltcG9ydCB7IFRpbWVsaW5lTWFya2VyIH0gZnJvbSAnLi4vdWljb25maWcnO1xuaW1wb3J0IHsgUGxheWVyQVBJLCBQbGF5ZXJFdmVudEJhc2UgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgU3RyaW5nVXRpbHMgfSBmcm9tICcuLi9zdHJpbmd1dGlscyc7XG5pbXBvcnQgeyBTZWVrQmFyVHlwZSwgU2Vla0JhckNvbnRyb2xsZXIgfSBmcm9tICcuL3NlZWtiYXJjb250cm9sbGVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5pbXBvcnQgeyBCcm93c2VyVXRpbHMgfSBmcm9tICcuLi9icm93c2VydXRpbHMnO1xuaW1wb3J0IHsgVGltZWxpbmVNYXJrZXJzSGFuZGxlciB9IGZyb20gJy4vdGltZWxpbmVtYXJrZXJzaGFuZGxlcic7XG5pbXBvcnQgeyBnZXRNaW5CdWZmZXJMZXZlbCB9IGZyb20gJy4vc2Vla2JhcmJ1ZmZlcmxldmVsJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgdGhlIHtAbGluayBTZWVrQmFyfSBjb21wb25lbnQuXG4gKlxuICogQGNhdGVnb3J5IENvbmZpZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZWVrQmFyQ29uZmlnIGV4dGVuZHMgQ29tcG9uZW50Q29uZmlnIHtcbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBhYm92ZSB0aGUgc2VlayBwb3NpdGlvbi5cbiAgICovXG4gIGxhYmVsPzogU2Vla0JhckxhYmVsO1xuICAvKipcbiAgICogQmFyIHdpbGwgYmUgdmVydGljYWwgaW5zdGVhZCBvZiBob3Jpem9udGFsIGlmIHNldCB0byB0cnVlLlxuICAgKi9cbiAgdmVydGljYWw/OiBib29sZWFuO1xuICAvKipcbiAgICogVGhlIGludGVydmFsIGluIG1pbGxpc2Vjb25kcyBpbiB3aGljaCB0aGUgcGxheWJhY2sgcG9zaXRpb24gb24gdGhlIHNlZWsgYmFyIHdpbGwgYmUgdXBkYXRlZC4gVGhlIHNob3J0ZXIgdGhlXG4gICAqIGludGVydmFsLCB0aGUgc21vb3RoZXIgaXQgbG9va3MgYW5kIHRoZSBtb3JlIHJlc291cmNlIGludGVuc2UgaXQgaXMuIFRoZSB1cGRhdGUgaW50ZXJ2YWwgd2lsbCBiZSBrZXB0IGFzIHN0ZWFkeVxuICAgKiBhcyBwb3NzaWJsZSB0byBhdm9pZCBqaXR0ZXIuXG4gICAqIFNldCB0byAtMSB0byBkaXNhYmxlIHNtb290aCB1cGRhdGluZyBhbmQgdXBkYXRlIGl0IG9uIHBsYXllciBUaW1lQ2hhbmdlZCBldmVudHMgaW5zdGVhZC5cbiAgICogRGVmYXVsdDogNTAgKDUwbXMgPSAyMGZwcykuXG4gICAqL1xuICBzbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlSW50ZXJ2YWxNcz86IG51bWJlcjtcblxuICAvKipcbiAgICogVXNlZCBmb3Igc2Vla0JhciBjb250cm9sIGluY3JlbWVudHMgYW5kIGRlY3JlbWVudHNcbiAgICovXG4gIGtleVN0ZXBJbmNyZW1lbnRzPzogeyBsZWZ0UmlnaHQ6IG51bWJlciwgdXBEb3duOiBudW1iZXIgfTtcblxuICAvKipcbiAgICogVXNlZCB0byBlbmFibGUvZGlzYWJsZSBzbmFwcGluZyB0byBtYXJrZXJzIG9uIHRoZSBzZWVrIGJhciB3aGVuIHNlZWtpbmcgbmVhciB0aGVtLlxuICAgKiBEZWZhdWx0OiB0cnVlXG4gICAqL1xuICBzbmFwcGluZ0VuYWJsZWQ/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRvbGVyYW5jZSBmb3Igc25hcHBpbmcgdG8gbWFya2VycywgaWYgc25hcHBpbmcgdG8gc2VlayBiYXIgbWFya2VycyBpcyBlbmFibGVkLlxuICAgKi9cbiAgc25hcHBpbmdSYW5nZT86IG51bWJlcjtcblxuICAvKipcbiAgICogVXNlZCB0byBlbmFibGUvZGlzYWJsZSBzZWVrIHByZXZpZXdcbiAgICovXG4gIGVuYWJsZVNlZWtQcmV2aWV3PzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBFdmVudCBhcmd1bWVudCBpbnRlcmZhY2UgZm9yIGEgc2VlayBwcmV2aWV3IGV2ZW50LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlZWtQcmV2aWV3RXZlbnRBcmdzIGV4dGVuZHMgU2Vla1ByZXZpZXdBcmdzIHtcbiAgLyoqXG4gICAqIFRlbGxzIGlmIHRoZSBzZWVrIHByZXZpZXcgZXZlbnQgY29tZXMgZnJvbSBhIHNjcnViYmluZy5cbiAgICovXG4gIHNjcnViYmluZzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBAY2F0ZWdvcnkgQ29tcG9uZW50c1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlZWtCYXJNYXJrZXIge1xuICBtYXJrZXI6IFRpbWVsaW5lTWFya2VyO1xuICBwb3NpdGlvbjogbnVtYmVyO1xuICBkdXJhdGlvbj86IG51bWJlcjtcbiAgZWxlbWVudD86IERPTTtcbn1cblxuLyoqXG4gKiBBIHNlZWsgYmFyIHRvIHNlZWsgd2l0aGluIHRoZSBwbGF5ZXIncyBtZWRpYS4gSXQgZGlzcGxheXMgdGhlIGN1cnJlbnQgcGxheWJhY2sgcG9zaXRpb24sIGFtb3VudCBvZiBidWZmZWQgZGF0YSwgc2Vla1xuICogdGFyZ2V0LCBhbmQga2VlcHMgc3RhdHVzIGFib3V0IGFuIG9uZ29pbmcgc2Vlay5cbiAqXG4gKiBUaGUgc2VlayBiYXIgZGlzcGxheXMgZGlmZmVyZW50ICdiYXJzJzpcbiAqICAtIHRoZSBwbGF5YmFjayBwb3NpdGlvbiwgaS5lLiB0aGUgcG9zaXRpb24gaW4gdGhlIG1lZGlhIGF0IHdoaWNoIHRoZSBwbGF5ZXIgY3VycmVudCBwbGF5YmFjayBwb2ludGVyIGlzIHBvc2l0aW9uZWRcbiAqICAtIHRoZSBidWZmZXIgcG9zaXRpb24sIHdoaWNoIHVzdWFsbHkgaXMgdGhlIHBsYXliYWNrIHBvc2l0aW9uIHBsdXMgdGhlIHRpbWUgc3BhbiB0aGF0IGlzIGFscmVhZHkgYnVmZmVyZWQgYWhlYWRcbiAqICAtIHRoZSBzZWVrIHBvc2l0aW9uLCB1c2VkIHRvIHByZXZpZXcgdG8gd2hlcmUgaW4gdGhlIHRpbWVsaW5lIGEgc2VlayB3aWxsIGp1bXAgdG9cbiAqXG4gKiAgQGNhdGVnb3J5IENvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGNsYXNzIFNlZWtCYXIgZXh0ZW5kcyBDb21wb25lbnQ8U2Vla0JhckNvbmZpZz4ge1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgU01PT1RIX1BMQVlCQUNLX1BPU0lUSU9OX1VQREFURV9ESVNBQkxFRCA9IC0xO1xuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIHRoYXQgaXMgYWRkZWQgdG8gdGhlIERPTSBlbGVtZW50IHdoaWxlIHRoZSBzZWVrIGJhciBpcyBpbiAnc2Vla2luZycgc3RhdGUuXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDTEFTU19TRUVLSU5HID0gJ3NlZWtpbmcnO1xuXG4gIHByaXZhdGUgc2Vla0JhcjogRE9NO1xuICBwcml2YXRlIHNlZWtCYXJQbGF5YmFja1Bvc2l0aW9uOiBET007XG4gIHByaXZhdGUgc2Vla0JhclBsYXliYWNrUG9zaXRpb25NYXJrZXI6IERPTTtcbiAgcHJpdmF0ZSBzZWVrQmFyQnVmZmVyUG9zaXRpb246IERPTTtcbiAgcHJpdmF0ZSBzZWVrQmFyU2Vla1Bvc2l0aW9uOiBET007XG4gIHByaXZhdGUgc2Vla0JhckJhY2tkcm9wOiBET007XG5cbiAgcHJpdmF0ZSBsYWJlbDogU2Vla0JhckxhYmVsO1xuXG4gIHByaXZhdGUgc2Vla0Jhck1hcmtlcnNDb250YWluZXI6IERPTTtcbiAgcHJpdmF0ZSB0aW1lbGluZU1hcmtlcnNIYW5kbGVyOiBUaW1lbGluZU1hcmtlcnNIYW5kbGVyO1xuXG4gIHByaXZhdGUgcGxheWVyOiBQbGF5ZXJBUEk7XG5cbiAgcHJvdGVjdGVkIHNlZWtCYXJUeXBlOiBTZWVrQmFyVHlwZTtcblxuICBwcm90ZWN0ZWQgaXNVaVNob3duOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBCdWZmZXIgb2YgdGhlIHRoZSBjdXJyZW50IHBsYXliYWNrIHBvc2l0aW9uLiBUaGUgcG9zaXRpb24gbXVzdCBiZSBidWZmZXJlZCBpbiBjYXNlIHRoZSBlbGVtZW50XG4gICAqIG5lZWRzIHRvIGJlIHJlZnJlc2hlZCB3aXRoIHtAbGluayAjcmVmcmVzaFBsYXliYWNrUG9zaXRpb259LlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgcHJpdmF0ZSBwbGF5YmFja1Bvc2l0aW9uUGVyY2VudGFnZSA9IDA7XG5cbiAgcHJpdmF0ZSBzbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlcjogVGltZW91dDtcbiAgcHJpdmF0ZSBwYXVzZWRUaW1lc2hpZnRVcGRhdGVyOiBUaW1lb3V0O1xuXG4gIHByaXZhdGUgaXNVc2VyU2Vla2luZyA9IGZhbHNlO1xuXG4gIHByaXZhdGUgc2Vla0JhckV2ZW50cyA9IHtcbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGEgc2NydWJiaW5nIHNlZWsgb3BlcmF0aW9uIGlzIHN0YXJ0ZWQuXG4gICAgICovXG4gICAgb25TZWVrOiBuZXcgRXZlbnREaXNwYXRjaGVyPFNlZWtCYXIsIE5vQXJncz4oKSxcbiAgICAvKipcbiAgICAgKiBGaXJlZCBkdXJpbmcgYSBzY3J1YmJpbmcgc2VlayB0byBpbmRpY2F0ZSB0aGF0IHRoZSBzZWVrIHByZXZpZXcgKGkuZS4gdGhlIHZpZGVvIGZyYW1lKSBzaG91bGQgYmUgdXBkYXRlZC5cbiAgICAgKi9cbiAgICBvblNlZWtQcmV2aWV3OiBuZXcgRXZlbnREaXNwYXRjaGVyPFNlZWtCYXIsIFNlZWtQcmV2aWV3RXZlbnRBcmdzPigpLFxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gYSBzY3J1YmJpbmcgc2VlayBoYXMgZmluaXNoZWQgb3Igd2hlbiBhIGRpcmVjdCBzZWVrIGlzIGlzc3VlZC5cbiAgICAgKi9cbiAgICBvblNlZWtlZDogbmV3IEV2ZW50RGlzcGF0Y2hlcjxTZWVrQmFyLCBudW1iZXI+KCksXG4gIH07XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTZWVrQmFyQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgY29uc3Qga2V5U3RlcEluY3JlbWVudHMgPSB0aGlzLmNvbmZpZy5rZXlTdGVwSW5jcmVtZW50cyB8fCB7XG4gICAgICBsZWZ0UmlnaHQ6IDEsXG4gICAgICB1cERvd246IDUsXG4gICAgfTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktc2Vla2JhcicsXG4gICAgICB2ZXJ0aWNhbDogZmFsc2UsXG4gICAgICBzbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlSW50ZXJ2YWxNczogNTAsXG4gICAgICBrZXlTdGVwSW5jcmVtZW50cyxcbiAgICAgIGFyaWFMYWJlbDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3NlZWtCYXInKSxcbiAgICAgIHRhYkluZGV4OiAwLFxuICAgICAgc25hcHBpbmdSYW5nZTogMSxcbiAgICAgIGVuYWJsZVNlZWtQcmV2aWV3OiB0cnVlLFxuICAgICAgc25hcHBpbmdFbmFibGVkOiB0cnVlLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcblxuICAgIHRoaXMubGFiZWwgPSB0aGlzLmNvbmZpZy5sYWJlbDtcbiAgfVxuXG4gIGluaXRpYWxpemUoKTogdm9pZCB7XG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuXG4gICAgaWYgKHRoaXMuaGFzTGFiZWwoKSkge1xuICAgICAgdGhpcy5nZXRMYWJlbCgpLmluaXRpYWxpemUoKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgc2V0QXJpYVNsaWRlck1pbk1heChtaW46IHN0cmluZywgbWF4OiBzdHJpbmcpIHtcbiAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hdHRyKCdhcmlhLXZhbHVlbWluJywgbWluKTtcbiAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hdHRyKCdhcmlhLXZhbHVlbWF4JywgbWF4KTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0QXJpYVNsaWRlclZhbHVlcygpIHtcbiAgICBpZiAodGhpcy5zZWVrQmFyVHlwZSA9PT0gU2Vla0JhclR5cGUuTGl2ZSkge1xuICAgICAgY29uc3QgdGltZXNoaWZ0VmFsdWUgPSBNYXRoLmNlaWwodGhpcy5wbGF5ZXIuZ2V0VGltZVNoaWZ0KCkpLnRvU3RyaW5nKCk7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hdHRyKCdhcmlhLXZhbHVlbm93JywgdGltZXNoaWZ0VmFsdWUpO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuYXR0cignYXJpYS12YWx1ZXRleHQnLCBgJHtpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24oaTE4bi5nZXRMb2NhbGl6ZXIoJ3NlZWtCYXIudGltZXNoaWZ0JykpfSAke2kxOG4ucGVyZm9ybUxvY2FsaXphdGlvbihpMThuLmdldExvY2FsaXplcignc2Vla0Jhci52YWx1ZScpKX06ICR7dGltZXNoaWZ0VmFsdWV9YCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNlZWtCYXJUeXBlID09PSBTZWVrQmFyVHlwZS5Wb2QpIHtcbiAgICAgIGNvbnN0IGFyaWFWYWx1ZVRleHQgPSBgJHtTdHJpbmdVdGlscy5zZWNvbmRzVG9UZXh0KHRoaXMucGxheWVyLmdldEN1cnJlbnRUaW1lKCkpfSAke2kxOG4ucGVyZm9ybUxvY2FsaXphdGlvbihpMThuLmdldExvY2FsaXplcignc2Vla0Jhci5kdXJhdGlvblRleHQnKSl9ICR7U3RyaW5nVXRpbHMuc2Vjb25kc1RvVGV4dCh0aGlzLnBsYXllci5nZXREdXJhdGlvbigpKX1gO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuYXR0cignYXJpYS12YWx1ZW5vdycsIE1hdGguZmxvb3IodGhpcy5wbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKSkudG9TdHJpbmcoKSk7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hdHRyKCdhcmlhLXZhbHVldGV4dCcsIGFyaWFWYWx1ZVRleHQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0UGxheWJhY2tQb3NpdGlvblBlcmNlbnRhZ2UoKTogbnVtYmVyIHtcbiAgICBpZiAodGhpcy5wbGF5ZXIuaXNMaXZlKCkpIHtcbiAgICAgIHJldHVybiAxMDAgLSAoMTAwIC8gdGhpcy5wbGF5ZXIuZ2V0TWF4VGltZVNoaWZ0KCkgKiB0aGlzLnBsYXllci5nZXRUaW1lU2hpZnQoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIDEwMCAvIHRoaXMucGxheWVyLmdldER1cmF0aW9uKCkgKiB0aGlzLmdldFJlbGF0aXZlQ3VycmVudFRpbWUoKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlQnVmZmVyTGV2ZWwocGxheWJhY2tQb3NpdGlvblBlcmNlbnRhZ2U6IG51bWJlcik6IHZvaWQge1xuXG4gICAgbGV0IGJ1ZmZlckxvYWRlZFBlcmNlbnRhZ2VMZXZlbDogbnVtYmVyO1xuICAgIGlmICh0aGlzLnBsYXllci5pc0xpdmUoKSkge1xuICAgICAgLy8gQWx3YXlzIHNob3cgZnVsbCBidWZmZXIgZm9yIGxpdmUgc3RyZWFtc1xuICAgICAgYnVmZmVyTG9hZGVkUGVyY2VudGFnZUxldmVsID0gMTAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBidWZmZXJMb2FkZWRQZXJjZW50YWdlTGV2ZWwgPSBwbGF5YmFja1Bvc2l0aW9uUGVyY2VudGFnZSArIGdldE1pbkJ1ZmZlckxldmVsKHRoaXMucGxheWVyKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldEJ1ZmZlclBvc2l0aW9uKGJ1ZmZlckxvYWRlZFBlcmNlbnRhZ2VMZXZlbCk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIsIGNvbmZpZ3VyZVNlZWs6IGJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMucGxheWVyID0gcGxheWVyO1xuXG4gICAgLy8gQXBwbHkgc2NhbGluZyB0cmFuc2Zvcm0gdG8gdGhlIGJhY2tkcm9wIGJhciB0byBoYXZlIGFsbCBiYXJzIHJlbmRlcmVkIHNpbWlsYXJseVxuICAgIC8vICh0aGUgY2FsbCBtdXN0IGJlIHVwIGhlcmUgdG8gYmUgZXhlY3V0ZWQgZm9yIHRoZSB2b2x1bWUgc2xpZGVyIGFzIHdlbGwpXG4gICAgdGhpcy5zZXRQb3NpdGlvbih0aGlzLnNlZWtCYXJCYWNrZHJvcCwgMTAwKTtcblxuICAgIC8vIEFkZCBzZWVrYmFyIGNvbnRyb2xzIHRvIHRoZSBzZWVrYmFyXG4gICAgY29uc3Qgc2Vla0JhckNvbnRyb2xsZXIgPSBuZXcgU2Vla0JhckNvbnRyb2xsZXIodGhpcy5jb25maWcua2V5U3RlcEluY3JlbWVudHMsIHBsYXllciwgdWltYW5hZ2VyLmdldENvbmZpZygpLnZvbHVtZUNvbnRyb2xsZXIpO1xuXG4gICAgc2Vla0JhckNvbnRyb2xsZXIuc2V0U2Vla0JhckNvbnRyb2xzKHRoaXMuZ2V0RG9tRWxlbWVudCgpLCAoKSA9PiB0aGlzLnNlZWtCYXJUeXBlKTtcblxuICAgIC8vIFRoZSBjb25maWd1cmVTZWVrIGZsYWcgY2FuIGJlIHVzZWQgYnkgc3ViY2xhc3NlcyB0byBkaXNhYmxlIGNvbmZpZ3VyYXRpb24gYXMgc2VlayBiYXIuIEUuZy4gdGhlIHZvbHVtZVxuICAgIC8vIHNsaWRlciBpcyByZXVzaW5nIHRoaXMgY29tcG9uZW50IGJ1dCBhZGRzIGl0cyBvd24gZnVuY3Rpb25hbGl0eSwgYW5kIGRvZXMgbm90IG5lZWQgdGhlIHNlZWsgZnVuY3Rpb25hbGl0eS5cbiAgICAvLyBUaGlzIGlzIGFjdHVhbGx5IGEgaGFjaywgdGhlIHByb3BlciBzb2x1dGlvbiB3b3VsZCBiZSBmb3IgYm90aCBzZWVrIGJhciBhbmQgdm9sdW1lIHNsaWRlcnMgdG8gZXh0ZW5kXG4gICAgLy8gYSBjb21tb24gYmFzZSBzbGlkZXIgY29tcG9uZW50IGFuZCBpbXBsZW1lbnQgdGhlaXIgZnVuY3Rpb25hbGl0eSB0aGVyZS5cbiAgICBpZiAoIWNvbmZpZ3VyZVNlZWspIHtcbiAgICAgIHRoaXMuc2Vla0JhclR5cGUgPSBTZWVrQmFyVHlwZS5Wb2x1bWU7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1aW1hbmFnZXIub25Db250cm9sc1Nob3cuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuaXNVaVNob3duID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIHVpbWFuYWdlci5vbkNvbnRyb2xzSGlkZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5pc1VpU2hvd24gPSBmYWxzZTtcbiAgICB9KTtcblxuICAgIGxldCBpc1BsYXlpbmcgPSBmYWxzZTtcbiAgICBsZXQgc2NydWJiaW5nID0gZmFsc2U7XG4gICAgbGV0IGlzUGxheWVyU2Vla2luZyA9IGZhbHNlO1xuICAgIGxldCBzdXNwZW5zaW9uOiBHcm91cFBsYXliYWNrU3VzcGVuc2lvbiB8IHVuZGVmaW5lZDtcblxuICAgIC8vIFVwZGF0ZSBwbGF5YmFjayBhbmQgYnVmZmVyIHBvc2l0aW9uc1xuICAgIGxldCBwbGF5YmFja1Bvc2l0aW9uSGFuZGxlciA9IChldmVudDogUGxheWVyRXZlbnRCYXNlID0gbnVsbCwgZm9yY2VVcGRhdGU6IGJvb2xlYW4gPSBmYWxzZSkgPT4ge1xuICAgICAgaWYgKHRoaXMuaXNVc2VyU2Vla2luZykge1xuICAgICAgICAvLyBXZSBjYXVnaHQgYSBzZWVrIHByZXZpZXcgc2VlaywgZG8gbm90IHVwZGF0ZSB0aGUgc2Vla2JhclxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBwbGF5YmFja1Bvc2l0aW9uUGVyY2VudGFnZSA9IHRoaXMuZ2V0UGxheWJhY2tQb3NpdGlvblBlcmNlbnRhZ2UoKTtcblxuICAgICAgdGhpcy51cGRhdGVCdWZmZXJMZXZlbChwbGF5YmFja1Bvc2l0aW9uUGVyY2VudGFnZSk7XG5cbiAgICAgIC8vIFRoZSBzZWdtZW50IHJlcXVlc3QgZmluaXNoZWQgaXMgdXNlZCB0byBoZWxwIHRoZSBwbGF5YmFjayBwb3NpdGlvbiBtb3ZlLCB3aGVuIHRoZSBzbW9vdGggcGxheWJhY2sgcG9zaXRpb24gaXMgbm90IGVuYWJsZWQuXG4gICAgICAvLyBBdCB0aGUgc2FtZSB0aW1lIHdoZW4gdGhlIHVzZXIgaXMgc2NydWJiaW5nLCB3ZSBhbHNvIG1vdmUgdGhlIHBvc2l0aW9uIG9mIHRoZSBzZWVrYmFyIHRvIGRpc3BsYXkgYSBwcmV2aWV3IGR1cmluZyBzY3J1YmJpbmcuXG4gICAgICAvLyBXaGVuIHRoZSB1c2VyIGlzIHNjcnViYmluZyB3ZSBkbyBub3QgcmVjb3JkIHRoaXMgYXMgYSB1c2VyIHNlZWsgb3BlcmF0aW9uLCBhcyB0aGUgdXNlciBoYXMgeWV0IHRvIGZpbmlzaCB0aGVpciBzZWVrLFxuICAgICAgLy8gYnV0IHdlIHNob3VsZCBub3QgbW92ZSB0aGUgcGxheWJhY2sgcG9zaXRpb24gdG8gbm90IGNyZWF0ZSBhIGp1bXBpbmcgYmVoYXZpb3VyLlxuICAgICAgaWYgKHNjcnViYmluZyAmJiBldmVudCAmJiBldmVudC50eXBlID09PSBwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TZWdtZW50UmVxdWVzdEZpbmlzaGVkICYmIHBsYXliYWNrUG9zaXRpb25QZXJjZW50YWdlICE9PSB0aGlzLnBsYXliYWNrUG9zaXRpb25QZXJjZW50YWdlKSB7XG4gICAgICAgIHBsYXliYWNrUG9zaXRpb25QZXJjZW50YWdlID0gdGhpcy5wbGF5YmFja1Bvc2l0aW9uUGVyY2VudGFnZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBsYXllci5pc0xpdmUoKSkge1xuICAgICAgICBpZiAocGxheWVyLmdldE1heFRpbWVTaGlmdCgpID09PSAwKSB7XG4gICAgICAgICAgLy8gVGhpcyBjYXNlIG11c3QgYmUgZXhwbGljaXRseSBoYW5kbGVkIHRvIGF2b2lkIGRpdmlzaW9uIGJ5IHplcm9cbiAgICAgICAgICB0aGlzLnNldFBsYXliYWNrUG9zaXRpb24oMTAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIXRoaXMuaXNTZWVraW5nKCkpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0UGxheWJhY2tQb3NpdGlvbihwbGF5YmFja1Bvc2l0aW9uUGVyY2VudGFnZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5zZXRBcmlhU2xpZGVyTWluTWF4KHBsYXllci5nZXRNYXhUaW1lU2hpZnQoKS50b1N0cmluZygpLCAnMCcpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBVcGRhdGUgcGxheWJhY2sgcG9zaXRpb24gb25seSBpbiBwYXVzZWQgc3RhdGUgb3IgaW4gdGhlIGluaXRpYWwgc3RhcnR1cCBzdGF0ZSB3aGVyZSBwbGF5ZXIgaXMgbmVpdGhlclxuICAgICAgICAvLyBwYXVzZWQgbm9yIHBsYXlpbmcuIFBsYXliYWNrIHVwZGF0ZXMgYXJlIGhhbmRsZWQgaW4gdGhlIFRpbWVvdXQgYmVsb3cuXG4gICAgICAgIGNvbnN0IGlzSW5Jbml0aWFsU3RhcnR1cFN0YXRlID0gdGhpcy5jb25maWcuc21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZUludGVydmFsTXMgPT09IFNlZWtCYXIuU01PT1RIX1BMQVlCQUNLX1BPU0lUSU9OX1VQREFURV9ESVNBQkxFRFxuICAgICAgICAgICAgfHwgZm9yY2VVcGRhdGUgfHwgcGxheWVyLmlzUGF1c2VkKCk7XG4gICAgICAgIGNvbnN0IGlzTmVpdGhlclBhdXNlZE5vclBsYXlpbmcgPSBwbGF5ZXIuaXNQYXVzZWQoKSA9PT0gcGxheWVyLmlzUGxheWluZygpO1xuXG4gICAgICAgIGlmICgoaXNJbkluaXRpYWxTdGFydHVwU3RhdGUgfHwgaXNOZWl0aGVyUGF1c2VkTm9yUGxheWluZykgJiYgIXRoaXMuaXNTZWVraW5nKCkpIHtcbiAgICAgICAgICB0aGlzLnNldFBsYXliYWNrUG9zaXRpb24ocGxheWJhY2tQb3NpdGlvblBlcmNlbnRhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRBcmlhU2xpZGVyTWluTWF4KCcwJywgcGxheWVyLmdldER1cmF0aW9uKCkudG9TdHJpbmcoKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzVWlTaG93bikge1xuICAgICAgICB0aGlzLnNldEFyaWFTbGlkZXJWYWx1ZXMoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gVXBkYXRlIHNlZWtiYXIgdXBvbiB0aGVzZSBldmVudHNcbiAgICAvLyBpbml0IHBsYXliYWNrIHBvc2l0aW9uIHdoZW4gdGhlIHBsYXllciBpcyByZWFkeVxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5SZWFkeSwgcGxheWJhY2tQb3NpdGlvbkhhbmRsZXIpO1xuICAgIC8vIHVwZGF0ZSBwbGF5YmFjayBwb3NpdGlvbiB3aGVuIGl0IGNoYW5nZXNcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVGltZUNoYW5nZWQsIHBsYXliYWNrUG9zaXRpb25IYW5kbGVyKTtcbiAgICAvLyB1cGRhdGUgYnVmZmVybGV2ZWwgd2hlbiBidWZmZXJpbmcgaXMgY29tcGxldGVcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU3RhbGxFbmRlZCwgcGxheWJhY2tQb3NpdGlvbkhhbmRsZXIpO1xuICAgIC8vIHVwZGF0ZSBwbGF5YmFjayBwb3NpdGlvbiB3aGVuIGEgdGltZXNoaWZ0IGhhcyBmaW5pc2hlZFxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5UaW1lU2hpZnRlZCwgcGxheWJhY2tQb3NpdGlvbkhhbmRsZXIpO1xuICAgIC8vIHVwZGF0ZSBidWZmZXJsZXZlbCB3aGVuIGEgc2VnbWVudCBoYXMgYmVlbiBkb3dubG9hZGVkXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNlZ21lbnRSZXF1ZXN0RmluaXNoZWQsIHBsYXliYWNrUG9zaXRpb25IYW5kbGVyKTtcblxuICAgIHRoaXMuY29uZmlndXJlTGl2ZVBhdXNlZFRpbWVzaGlmdFVwZGF0ZXIocGxheWVyLCB1aW1hbmFnZXIsIHBsYXliYWNrUG9zaXRpb25IYW5kbGVyKTtcblxuICAgIC8vIFNlZWsgaGFuZGxpbmdcbiAgICBsZXQgb25QbGF5ZXJTZWVrID0gKCkgPT4ge1xuICAgICAgaXNQbGF5ZXJTZWVraW5nID0gdHJ1ZTtcbiAgICAgIHRoaXMuc2V0U2Vla2luZyh0cnVlKTtcbiAgICAgIHNjcnViYmluZyA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBsZXQgb25QbGF5ZXJTZWVrZWQgPSAoZXZlbnQ6IFBsYXllckV2ZW50QmFzZSA9IG51bGwsIGZvcmNlVXBkYXRlOiBib29sZWFuID0gZmFsc2UgKSA9PiB7XG4gICAgICBpc1BsYXllclNlZWtpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuc2V0U2Vla2luZyhmYWxzZSk7XG5cbiAgICAgIC8vIHVwZGF0ZSBwbGF5YmFjayBwb3NpdGlvbiB3aGVuIGEgc2VlayBoYXMgZmluaXNoZWRcbiAgICAgIHBsYXliYWNrUG9zaXRpb25IYW5kbGVyKGV2ZW50LCBmb3JjZVVwZGF0ZSk7XG4gICAgfTtcblxuICAgIGxldCByZXN0b3JlUGxheWluZ1N0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gQ29udGludWUgcGxheWJhY2sgYWZ0ZXIgc2VlayBpZiBwbGF5ZXIgd2FzIHBsYXlpbmcgd2hlbiBzZWVrIHN0YXJ0ZWRcbiAgICAgIGlmIChpc1BsYXlpbmcpIHtcbiAgICAgICAgLy8gdXNlIHRoZSBzYW1lIGlzc3VlciBoZXJlIGFzIGluIHRoZSBwYXVzZSBvbiBzZWVrXG4gICAgICAgIHBsYXllci5wbGF5KCd1aS1zZWVrJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TZWVrLCBvblBsYXllclNlZWspO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TZWVrZWQsIG9uUGxheWVyU2Vla2VkKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVGltZVNoaWZ0LCBvblBsYXllclNlZWspO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5UaW1lU2hpZnRlZCwgb25QbGF5ZXJTZWVrZWQpO1xuXG4gICAgbGV0IGlzR3JvdXBQbGF5YmFja0FQSUF2YWlsYWJsZSA9IChwbGF5ZXI6IFBsYXllckFQSSk6IHBsYXllciBpcyBFeHRlbmRlZFBsYXllckFQSSA9PiB7XG4gICAgICByZXR1cm4gISEocGxheWVyIGFzIEV4dGVuZGVkUGxheWVyQVBJKS5ncm91cFBsYXliYWNrO1xuICAgIH07XG5cbiAgICB0aGlzLm9uU2Vlay5zdWJzY3JpYmUoKHNlbmRlcikgPT4ge1xuICAgICAgLy8gdHJhY2sgc2Vla2luZyBzdGF0dXMgc28gd2UgY2FuIGNhdGNoIGV2ZW50cyBmcm9tIHNlZWsgcHJldmlldyBzZWVrc1xuICAgICAgdGhpcy5pc1VzZXJTZWVraW5nID0gdHJ1ZTtcbiAgICAgIC8vIE5vdGlmeSBVSSBtYW5hZ2VyIG9mIHN0YXJ0ZWQgc2Vla1xuICAgICAgdWltYW5hZ2VyLm9uU2Vlay5kaXNwYXRjaChzZW5kZXIpO1xuXG4gICAgICBpZiAoaXNHcm91cFBsYXliYWNrQVBJQXZhaWxhYmxlKHBsYXllcikgJiYgcGxheWVyLmdyb3VwUGxheWJhY2suaGFzSm9pbmVkKCkgJiYgIXN1c3BlbnNpb24pIHtcbiAgICAgICAgc3VzcGVuc2lvbiA9IHBsYXllci5ncm91cFBsYXliYWNrLmJlZ2luU3VzcGVuc2lvbihHcm91cFBsYXliYWNrU3VzcGVuc2lvblJlYXNvbi5Vc2VySXNTY3J1YmJpbmcpO1xuICAgICAgfVxuXG4gICAgICAvLyBTYXZlIGN1cnJlbnQgcGxheWJhY2sgc3RhdGUgYmVmb3JlIHBlcmZvcm1pbmcgdGhlIHNlZWtcbiAgICAgIGlmICghaXNQbGF5ZXJTZWVraW5nKSB7XG4gICAgICAgIGlzUGxheWluZyA9IHBsYXllci5pc1BsYXlpbmcoKTtcblxuICAgICAgICAvLyBQYXVzZSBwbGF5YmFjayB3aGlsZSBzZWVraW5nXG4gICAgICAgIGlmIChpc1BsYXlpbmcpIHtcbiAgICAgICAgICAvLyB1c2UgYSBkaWZmZXJlbnQgaXNzdWVyIGhlcmUsIGFzIHBsYXkvcGF1c2Ugb24gc2VlayBpcyBub3QgXCJyZWFsbHlcIiB0cmlnZ2VyZCBieSB0aGUgdXNlclxuICAgICAgICAgIHBsYXllci5wYXVzZSgndWktc2VlaycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uU2Vla1ByZXZpZXcuc3Vic2NyaWJlKChzZW5kZXI6IFNlZWtCYXIsIGFyZ3M6IFNlZWtQcmV2aWV3RXZlbnRBcmdzKSA9PiB7XG4gICAgICAvLyBOb3RpZnkgVUkgbWFuYWdlciBvZiBzZWVrIHByZXZpZXdcbiAgICAgIHVpbWFuYWdlci5vblNlZWtQcmV2aWV3LmRpc3BhdGNoKHNlbmRlciwgYXJncyk7XG4gICAgICBzY3J1YmJpbmcgPSBhcmdzLnNjcnViYmluZztcbiAgICB9KTtcblxuICAgIC8vIFNldCBlbmFibGVTZWVrUHJldmlldyBpZiBzZXQgaW4gdGhlIHVpbWFuYWdlciBjb25maWdcbiAgICBpZiAodHlwZW9mIHVpbWFuYWdlci5nZXRDb25maWcoKS5lbmFibGVTZWVrUHJldmlldyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICB0aGlzLmNvbmZpZy5lbmFibGVTZWVrUHJldmlldyA9IHVpbWFuYWdlci5nZXRDb25maWcoKS5lbmFibGVTZWVrUHJldmlldztcbiAgICB9XG5cbiAgICAvLyBSYXRlLWxpbWl0ZWQgc2NydWJiaW5nIHNlZWtcbiAgICBpZiAodGhpcy5jb25maWcuZW5hYmxlU2Vla1ByZXZpZXcpIHtcbiAgICAgIHRoaXMub25TZWVrUHJldmlldy5zdWJzY3JpYmVSYXRlTGltaXRlZCh0aGlzLnNlZWtXaGlsZVNjcnViYmluZywgMjAwKTtcbiAgICB9XG5cbiAgICB0aGlzLm9uU2Vla2VkLnN1YnNjcmliZSgoc2VuZGVyLCBwZXJjZW50YWdlKSA9PiB7XG4gICAgICB0aGlzLmlzVXNlclNlZWtpbmcgPSBmYWxzZTtcblxuICAgICAgLy8gRG8gdGhlIHNlZWtcbiAgICAgIHRoaXMuc2VlayhwZXJjZW50YWdlKTtcblxuICAgICAgLy8gTm90aWZ5IFVJIG1hbmFnZXIgb2YgZmluaXNoZWQgc2Vla1xuICAgICAgdWltYW5hZ2VyLm9uU2Vla2VkLmRpc3BhdGNoKHNlbmRlcik7XG5cbiAgICAgIC8vIENvbnRpbnVlIHBsYXliYWNrIGFmdGVyIHNlZWsgaWYgcGxheWVyIHdhcyBwbGF5aW5nIHdoZW4gc2VlayBzdGFydGVkXG4gICAgICByZXN0b3JlUGxheWluZ1N0YXRlKCk7XG5cbiAgICAgIGlmIChpc0dyb3VwUGxheWJhY2tBUElBdmFpbGFibGUocGxheWVyKSAmJiBwbGF5ZXIuZ3JvdXBQbGF5YmFjay5oYXNKb2luZWQoKSAmJiBzdXNwZW5zaW9uKSB7XG4gICAgICAgIGNvbnN0IHByb3Bvc2VkUGxheWJhY2tUaW1lID0gdGhpcy5nZXRUYXJnZXRTZWVrUG9zaXRpb24ocGVyY2VudGFnZSk7XG4gICAgICAgIHBsYXllci5ncm91cFBsYXliYWNrLmVuZFN1c3BlbnNpb24oc3VzcGVuc2lvbiwgeyBwcm9wb3NlZFBsYXliYWNrVGltZSB9KTtcbiAgICAgICAgc3VzcGVuc2lvbiA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICh0aGlzLmhhc0xhYmVsKCkpIHtcbiAgICAgIC8vIENvbmZpZ3VyZSBhIHNlZWtiYXIgbGFiZWwgdGhhdCBpcyBpbnRlcm5hbCB0byB0aGUgc2Vla2JhcilcbiAgICAgIHRoaXMuZ2V0TGFiZWwoKS5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuICAgIH1cblxuICAgIC8vIEhpZGUgc2Vla2JhciBmb3IgbGl2ZSBzb3VyY2VzIHdpdGhvdXQgdGltZXNoaWZ0XG4gICAgbGV0IGlzTGl2ZSA9IGZhbHNlO1xuICAgIGxldCBoYXNUaW1lU2hpZnQgPSBmYWxzZTtcbiAgICBsZXQgc3dpdGNoVmlzaWJpbGl0eSA9IChpc0xpdmU6IGJvb2xlYW4sIGhhc1RpbWVTaGlmdDogYm9vbGVhbikgPT4ge1xuICAgICAgaWYgKGlzTGl2ZSAmJiAhaGFzVGltZVNoaWZ0KSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB9XG4gICAgICBwbGF5YmFja1Bvc2l0aW9uSGFuZGxlcihudWxsLCB0cnVlKTtcbiAgICAgIHRoaXMucmVmcmVzaFBsYXliYWNrUG9zaXRpb24oKTtcbiAgICB9O1xuICAgIGxldCBsaXZlU3RyZWFtRGV0ZWN0b3IgPSBuZXcgUGxheWVyVXRpbHMuTGl2ZVN0cmVhbURldGVjdG9yKHBsYXllciwgdWltYW5hZ2VyKTtcbiAgICBsaXZlU3RyZWFtRGV0ZWN0b3Iub25MaXZlQ2hhbmdlZC5zdWJzY3JpYmUoKHNlbmRlciwgYXJnczogTGl2ZVN0cmVhbURldGVjdG9yRXZlbnRBcmdzKSA9PiB7XG4gICAgICBpc0xpdmUgPSBhcmdzLmxpdmU7XG4gICAgICBpZiAoaXNMaXZlICYmIHRoaXMuc21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZXIgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVyLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuc2Vla0JhclR5cGUgPSBTZWVrQmFyVHlwZS5MaXZlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZWVrQmFyVHlwZSA9IFNlZWtCYXJUeXBlLlZvZDtcbiAgICAgIH1cbiAgICAgIHN3aXRjaFZpc2liaWxpdHkoaXNMaXZlLCBoYXNUaW1lU2hpZnQpO1xuICAgIH0pO1xuICAgIGxldCB0aW1lU2hpZnREZXRlY3RvciA9IG5ldyBQbGF5ZXJVdGlscy5UaW1lU2hpZnRBdmFpbGFiaWxpdHlEZXRlY3RvcihwbGF5ZXIpO1xuICAgIHRpbWVTaGlmdERldGVjdG9yLm9uVGltZVNoaWZ0QXZhaWxhYmlsaXR5Q2hhbmdlZC5zdWJzY3JpYmUoKHNlbmRlciwgYXJnczogVGltZVNoaWZ0QXZhaWxhYmlsaXR5Q2hhbmdlZEFyZ3MpID0+IHtcbiAgICAgIGhhc1RpbWVTaGlmdCA9IGFyZ3MudGltZVNoaWZ0QXZhaWxhYmxlO1xuICAgICAgc3dpdGNoVmlzaWJpbGl0eShpc0xpdmUsIGhhc1RpbWVTaGlmdCk7XG4gICAgfSk7XG4gICAgLy8gSW5pdGlhbCBkZXRlY3Rpb25cbiAgICBsaXZlU3RyZWFtRGV0ZWN0b3IuZGV0ZWN0KCk7XG4gICAgdGltZVNoaWZ0RGV0ZWN0b3IuZGV0ZWN0KCk7XG5cbiAgICAvLyBSZWZyZXNoIHRoZSBwbGF5YmFjayBwb3NpdGlvbiB3aGVuIHRoZSBwbGF5ZXIgcmVzaXplZCBvciB0aGUgVUkgaXMgY29uZmlndXJlZC4gVGhlIHBsYXliYWNrIHBvc2l0aW9uIG1hcmtlclxuICAgIC8vIGlzIHBvc2l0aW9uZWQgYWJzb2x1dGVseSBhbmQgbXVzdCB0aGVyZWZvcmUgYmUgdXBkYXRlZCB3aGVuIHRoZSBzaXplIG9mIHRoZSBzZWVrYmFyIGNoYW5nZXMuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXllclJlc2l6ZWQsICgpID0+IHtcbiAgICAgIHRoaXMucmVmcmVzaFBsYXliYWNrUG9zaXRpb24oKTtcbiAgICB9KTtcbiAgICAvLyBBZGRpdGlvbmFsbHksIHdoZW4gdGhpcyBjb2RlIGlzIGNhbGxlZCwgdGhlIHNlZWtiYXIgaXMgbm90IHBhcnQgb2YgdGhlIFVJIHlldCBhbmQgdGhlcmVmb3JlIGRvZXMgbm90IGhhdmUgYSBzaXplLFxuICAgIC8vIHJlc3VsdGluZyBpbiBhIHdyb25nIGluaXRpYWwgcG9zaXRpb24gb2YgdGhlIG1hcmtlci4gUmVmcmVzaGluZyBpdCBvbmNlIHRoZSBVSSBpcyBjb25maWd1cmVkIHNvbHZlZCB0aGlzIGlzc3VlLlxuICAgIHVpbWFuYWdlci5vbkNvbmZpZ3VyZWQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMucmVmcmVzaFBsYXliYWNrUG9zaXRpb24oKTtcbiAgICB9KTtcbiAgICAvLyBJdCBjYW4gYWxzbyBoYXBwZW4gd2hlbiBhIG5ldyBzb3VyY2UgaXMgbG9hZGVkXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZUxvYWRlZCwgKCkgPT4ge1xuICAgICAgdGhpcy5yZWZyZXNoUGxheWJhY2tQb3NpdGlvbigpO1xuICAgIH0pO1xuICAgIC8vIEFkZCBtYXJrZXJzIHdoZW4gYSBzb3VyY2UgaXMgbG9hZGVkIG9yIHVwZGF0ZSB3aGVuIGEgbWFya2VyIGlzIGFkZGVkIG9yIHJlbW92ZWRcbiAgICB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgcGxheWJhY2tQb3NpdGlvbkhhbmRsZXIoKTtcbiAgICB9KTtcblxuICAgIC8vIFNldCB0aGUgc25hcHBpbmdSYW5nZSBpZiBzZXQgaW4gdGhlIHVpbWFuYWdlciBjb25maWdcbiAgICBpZiAodHlwZW9mIHVpbWFuYWdlci5nZXRDb25maWcoKS5zZWVrYmFyU25hcHBpbmdSYW5nZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHRoaXMuY29uZmlnLnNuYXBwaW5nUmFuZ2UgPSB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuc2Vla2JhclNuYXBwaW5nUmFuZ2U7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuc2Vla2JhclNuYXBwaW5nRW5hYmxlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICB0aGlzLmNvbmZpZy5zbmFwcGluZ0VuYWJsZWQgPSB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuc2Vla2JhclNuYXBwaW5nRW5hYmxlZDtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXplIHNlZWtiYXJcbiAgICBwbGF5YmFja1Bvc2l0aW9uSGFuZGxlcigpOyAvLyBTZXQgdGhlIHBsYXliYWNrIHBvc2l0aW9uXG4gICAgdGhpcy5zZXRCdWZmZXJQb3NpdGlvbigwKTtcbiAgICB0aGlzLnNldFNlZWtQb3NpdGlvbigwKTtcbiAgICBpZiAodGhpcy5jb25maWcuc21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZUludGVydmFsTXMgIT09IFNlZWtCYXIuU01PT1RIX1BMQVlCQUNLX1BPU0lUSU9OX1VQREFURV9ESVNBQkxFRCkge1xuICAgICAgdGhpcy5jb25maWd1cmVTbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlcihwbGF5ZXIsIHVpbWFuYWdlcik7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBtYXJrZXJzXG4gICAgdGhpcy5pbml0aWFsaXplVGltZWxpbmVNYXJrZXJzKHBsYXllciwgdWltYW5hZ2VyKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdGlhbGl6ZVRpbWVsaW5lTWFya2VycyhwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIGNvbnN0IHRpbWVsaW5lTWFya2VyQ29uZmlnID0ge1xuICAgICAgY3NzUHJlZml4OiB0aGlzLmNvbmZpZy5jc3NQcmVmaXgsXG4gICAgICBzbmFwcGluZ1JhbmdlOiB0aGlzLmNvbmZpZy5zbmFwcGluZ1JhbmdlLFxuICAgIH07XG4gICAgdGhpcy50aW1lbGluZU1hcmtlcnNIYW5kbGVyID0gbmV3IFRpbWVsaW5lTWFya2Vyc0hhbmRsZXIodGltZWxpbmVNYXJrZXJDb25maWcsICgpID0+IHRoaXMuc2Vla0Jhci53aWR0aCgpLCB0aGlzLnNlZWtCYXJNYXJrZXJzQ29udGFpbmVyKTtcbiAgICB0aGlzLnRpbWVsaW5lTWFya2Vyc0hhbmRsZXIuaW5pdGlhbGl6ZShwbGF5ZXIsIHVpbWFuYWdlcik7XG4gIH1cblxuICBwcml2YXRlIHNlZWtXaGlsZVNjcnViYmluZyA9IChzZW5kZXI6IFNlZWtCYXIsIGFyZ3M6IFNlZWtQcmV2aWV3RXZlbnRBcmdzKSA9PiB7XG4gICAgaWYgKGFyZ3Muc2NydWJiaW5nKSB7XG4gICAgICB0aGlzLnNlZWsoYXJncy5wb3NpdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgZ2V0VGFyZ2V0U2Vla1Bvc2l0aW9uID0gKHBlcmNlbnRhZ2U6IG51bWJlcikgPT4ge1xuICAgIGxldCB0YXJnZXQ6IG51bWJlcjtcbiAgICBpZiAodGhpcy5wbGF5ZXIuaXNMaXZlKCkpIHtcbiAgICAgIGNvbnN0IG1heFRpbWVTaGlmdCA9IHRoaXMucGxheWVyLmdldE1heFRpbWVTaGlmdCgpO1xuICAgICAgdGFyZ2V0ID0gbWF4VGltZVNoaWZ0IC0gKG1heFRpbWVTaGlmdCAqIChwZXJjZW50YWdlIC8gMTAwKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNlZWthYmxlUmFuZ2VTdGFydCA9IFBsYXllclV0aWxzLmdldFNlZWthYmxlUmFuZ2VTdGFydCh0aGlzLnBsYXllciwgMCk7XG4gICAgICBjb25zdCByZWxhdGl2ZVNlZWtUYXJnZXQgPSB0aGlzLnBsYXllci5nZXREdXJhdGlvbigpICogKHBlcmNlbnRhZ2UgLyAxMDApO1xuICAgICAgdGFyZ2V0ID0gcmVsYXRpdmVTZWVrVGFyZ2V0ICsgc2Vla2FibGVSYW5nZVN0YXJ0O1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICBwcml2YXRlIHNlZWsgPSAocGVyY2VudGFnZTogbnVtYmVyKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0UGxheWJhY2tQb3NpdGlvbiA9IHRoaXMuZ2V0VGFyZ2V0U2Vla1Bvc2l0aW9uKHBlcmNlbnRhZ2UpO1xuICAgIGlmICh0aGlzLnBsYXllci5pc0xpdmUoKSkge1xuICAgICAgdGhpcy5wbGF5ZXIudGltZVNoaWZ0KHRhcmdldFBsYXliYWNrUG9zaXRpb24sICd1aScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBsYXllci5zZWVrKHRhcmdldFBsYXliYWNrUG9zaXRpb24sICd1aScpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogVXBkYXRlIHNlZWtiYXIgd2hpbGUgYSBsaXZlIHN0cmVhbSB3aXRoIERWUiB3aW5kb3cgaXMgcGF1c2VkLlxuICAgKiBUaGUgcGxheWJhY2sgcG9zaXRpb24gc3RheXMgc3RpbGwgYW5kIHRoZSBwb3NpdGlvbiBpbmRpY2F0b3IgdmlzdWFsbHkgbW92ZXMgdG93YXJkcyB0aGUgYmFjay5cbiAgICovXG4gIHByaXZhdGUgY29uZmlndXJlTGl2ZVBhdXNlZFRpbWVzaGlmdFVwZGF0ZXIoXG4gICAgcGxheWVyOiBQbGF5ZXJBUEksXG4gICAgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcixcbiAgICBwbGF5YmFja1Bvc2l0aW9uSGFuZGxlcjogKCkgPT4gdm9pZCxcbiAgKTogdm9pZCB7XG4gICAgLy8gUmVndWxhcmx5IHVwZGF0ZSB0aGUgcGxheWJhY2sgcG9zaXRpb24gd2hpbGUgdGhlIHRpbWVvdXQgaXMgYWN0aXZlXG4gICAgdGhpcy5wYXVzZWRUaW1lc2hpZnRVcGRhdGVyID0gbmV3IFRpbWVvdXQoMTAwMCwgcGxheWJhY2tQb3NpdGlvbkhhbmRsZXIsIHRydWUpO1xuXG4gICAgLy8gU3RhcnQgdXBkYXRlciB3aGVuIGEgbGl2ZSBzdHJlYW0gd2l0aCB0aW1lc2hpZnQgd2luZG93IGlzIHBhdXNlZFxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QYXVzZWQsICgpID0+IHtcbiAgICAgIGlmIChwbGF5ZXIuaXNMaXZlKCkgJiYgcGxheWVyLmdldE1heFRpbWVTaGlmdCgpIDwgMCkge1xuICAgICAgICB0aGlzLnBhdXNlZFRpbWVzaGlmdFVwZGF0ZXIuc3RhcnQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFN0b3AgdXBkYXRlciB3aGVuIHBsYXliYWNrIGNvbnRpbnVlcyAobm8gbWF0dGVyIGlmIHRoZSB1cGRhdGVyIHdhcyBzdGFydGVkIGJlZm9yZSlcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheSwgKCkgPT4gdGhpcy5wYXVzZWRUaW1lc2hpZnRVcGRhdGVyLmNsZWFyKCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBjb25maWd1cmVTbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlcihwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIC8qXG4gICAgICogUGxheWJhY2sgcG9zaXRpb24gdXBkYXRlXG4gICAgICpcbiAgICAgKiBXZSBkbyBub3QgdXBkYXRlIHRoZSBwb3NpdGlvbiBkaXJlY3RseSBmcm9tIHRoZSBUaW1lQ2hhbmdlZCBldmVudCwgYmVjYXVzZSBpdCBhcnJpdmVzIHZlcnkgaml0dGVyeSBhbmRcbiAgICAgKiByZXN1bHRzIGluIGEgaml0dGVyeSBwb3NpdGlvbiBpbmRpY2F0b3Igc2luY2UgdGhlIENTUyB0cmFuc2l0aW9uIHRpbWUgaXMgc3RhdGljYWxseSBzZXQuXG4gICAgICogVG8gd29yayBhcm91bmQgdGhpcyBpc3N1ZSwgd2UgbWFpbnRhaW4gYSBsb2NhbCBwbGF5YmFjayBwb3NpdGlvbiB0aGF0IGlzIHVwZGF0ZWQgaW4gYSBzdGFibGUgcmVndWxhciBpbnRlcnZhbFxuICAgICAqIGFuZCBrZXB0IGluIHN5bmMgd2l0aCB0aGUgcGxheWVyLlxuICAgICAqL1xuICAgIGxldCBjdXJyZW50VGltZVNlZWtCYXIgPSAwO1xuICAgIGxldCBjdXJyZW50VGltZVBsYXllciA9IDA7XG4gICAgbGV0IHVwZGF0ZUludGVydmFsTXMgPSA1MDtcbiAgICBsZXQgY3VycmVudFRpbWVVcGRhdGVEZWx0YVNlY3MgPSB1cGRhdGVJbnRlcnZhbE1zIC8gMTAwMDtcblxuICAgIHRoaXMuc21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZXIgPSBuZXcgVGltZW91dCh1cGRhdGVJbnRlcnZhbE1zLCAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5pc1NlZWtpbmcoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnRUaW1lU2Vla0JhciArPSBjdXJyZW50VGltZVVwZGF0ZURlbHRhU2VjcztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgY3VycmVudFRpbWVQbGF5ZXIgPSB0aGlzLmdldFJlbGF0aXZlQ3VycmVudFRpbWUoKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIERldGVjdCBpZiB0aGUgcGxheWVyIGhhcyBiZWVuIGRlc3Ryb3llZCBhbmQgc3RvcCB1cGRhdGluZyBpZiBzb1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJBUElOb3RBdmFpbGFibGVFcnJvcikge1xuICAgICAgICAgIHRoaXMuc21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZXIuY2xlYXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRoZSBjdXJyZW50IHRpbWUgY2Fubm90IGJlIHJlYWQgaXQgbWFrZXMgbm8gc2Vuc2UgdG8gY29udGludWVcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBTeW5jIGN1cnJlbnRUaW1lIG9mIHNlZWtiYXIgdG8gcGxheWVyXG4gICAgICBsZXQgY3VycmVudFRpbWVEZWx0YSA9IGN1cnJlbnRUaW1lU2Vla0JhciAtIGN1cnJlbnRUaW1lUGxheWVyO1xuICAgICAgLy8gSWYgdGhlIGRlbHRhIGlzIGxhcmdlciB0aGF0IDIgc2VjcywgZGlyZWN0bHkganVtcCB0aGUgc2Vla2JhciB0byB0aGVcbiAgICAgIC8vIHBsYXllciB0aW1lIGluc3RlYWQgb2Ygc21vb3RobHkgZmFzdCBmb3J3YXJkaW5nL3Jld2luZGluZy5cbiAgICAgIGlmIChNYXRoLmFicyhjdXJyZW50VGltZURlbHRhKSA+IDIpIHtcbiAgICAgICAgY3VycmVudFRpbWVTZWVrQmFyID0gY3VycmVudFRpbWVQbGF5ZXI7XG4gICAgICB9XG4gICAgICAvLyBJZiBjdXJyZW50VGltZURlbHRhIGlzIG5lZ2F0aXZlIGFuZCBiZWxvdyB0aGUgYWRqdXN0bWVudCB0aHJlc2hvbGQsXG4gICAgICAvLyB0aGUgcGxheWVyIGlzIGFoZWFkIG9mIHRoZSBzZWVrYmFyIGFuZCB3ZSAnZmFzdCBmb3J3YXJkJyB0aGUgc2Vla2JhclxuICAgICAgZWxzZSBpZiAoY3VycmVudFRpbWVEZWx0YSA8PSAtY3VycmVudFRpbWVVcGRhdGVEZWx0YVNlY3MpIHtcbiAgICAgICAgY3VycmVudFRpbWVTZWVrQmFyICs9IGN1cnJlbnRUaW1lVXBkYXRlRGVsdGFTZWNzO1xuICAgICAgfVxuICAgICAgLy8gSWYgY3VycmVudFRpbWVEZWx0YSBpcyBwb3NpdGl2ZSBhbmQgYWJvdmUgdGhlIGFkanVzdG1lbnQgdGhyZXNob2xkLFxuICAgICAgLy8gdGhlIHBsYXllciBpcyBiZWhpbmQgdGhlIHNlZWtiYXIgYW5kIHdlICdyZXdpbmQnIHRoZSBzZWVrYmFyXG4gICAgICBlbHNlIGlmIChjdXJyZW50VGltZURlbHRhID49IGN1cnJlbnRUaW1lVXBkYXRlRGVsdGFTZWNzKSB7XG4gICAgICAgIGN1cnJlbnRUaW1lU2Vla0JhciAtPSBjdXJyZW50VGltZVVwZGF0ZURlbHRhU2VjcztcbiAgICAgIH1cblxuICAgICAgbGV0IHBsYXliYWNrUG9zaXRpb25QZXJjZW50YWdlID0gMTAwIC8gcGxheWVyLmdldER1cmF0aW9uKCkgKiBjdXJyZW50VGltZVNlZWtCYXI7XG4gICAgICB0aGlzLnNldFBsYXliYWNrUG9zaXRpb24ocGxheWJhY2tQb3NpdGlvblBlcmNlbnRhZ2UpO1xuICAgIH0sIHRydWUpO1xuXG4gICAgbGV0IHN0YXJ0U21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZXIgPSAoKSA9PiB7XG4gICAgICBpZiAoIXBsYXllci5pc0xpdmUoKSkge1xuICAgICAgICBjdXJyZW50VGltZVNlZWtCYXIgPSB0aGlzLmdldFJlbGF0aXZlQ3VycmVudFRpbWUoKTtcbiAgICAgICAgdGhpcy5zbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlci5zdGFydCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBsZXQgc3RvcFNtb290aFBsYXliYWNrUG9zaXRpb25VcGRhdGVyID0gKCkgPT4ge1xuICAgICAgdGhpcy5zbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlci5jbGVhcigpO1xuICAgIH07XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheSwgc3RhcnRTbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXlpbmcsIHN0YXJ0U21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QYXVzZWQsIHN0b3BTbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXliYWNrRmluaXNoZWQsIHN0b3BTbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNlZWtlZCwgKCkgPT4ge1xuICAgICAgY3VycmVudFRpbWVTZWVrQmFyID0gdGhpcy5nZXRSZWxhdGl2ZUN1cnJlbnRUaW1lKCk7XG4gICAgfSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZVVubG9hZGVkLCBzdG9wU21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZXIpO1xuXG4gICAgaWYgKHBsYXllci5pc1BsYXlpbmcoKSkge1xuICAgICAgc3RhcnRTbW9vdGhQbGF5YmFja1Bvc2l0aW9uVXBkYXRlcigpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0UmVsYXRpdmVDdXJyZW50VGltZSgpOiBudW1iZXIge1xuICAgIHJldHVybiBQbGF5ZXJVdGlscy5nZXRDdXJyZW50VGltZVJlbGF0aXZlVG9TZWVrYWJsZVJhbmdlKHRoaXMucGxheWVyKTtcbiAgfVxuXG4gIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgc3VwZXIucmVsZWFzZSgpO1xuXG4gICAgaWYgKHRoaXMuc21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZXIpIHsgLy8gb2JqZWN0IG11c3Qgbm90IG5lY2Vzc2FyaWx5IGV4aXN0LCBlLmcuIGluIHZvbHVtZSBzbGlkZXIgc3ViY2xhc3NcbiAgICAgIHRoaXMuc21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZXIuY2xlYXIoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wYXVzZWRUaW1lc2hpZnRVcGRhdGVyKSB7XG4gICAgICB0aGlzLnBhdXNlZFRpbWVzaGlmdFVwZGF0ZXIuY2xlYXIoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb25maWcuZW5hYmxlU2Vla1ByZXZpZXcpIHtcbiAgICAgIHRoaXMub25TZWVrUHJldmlldy51bnN1YnNjcmliZSh0aGlzLnNlZWtXaGlsZVNjcnViYmluZyk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHRvRG9tRWxlbWVudCgpOiBET00ge1xuICAgIGlmICh0aGlzLmNvbmZpZy52ZXJ0aWNhbCkge1xuICAgICAgdGhpcy5jb25maWcuY3NzQ2xhc3Nlcy5wdXNoKCd2ZXJ0aWNhbCcpO1xuICAgIH1cblxuICAgIGxldCBzZWVrQmFyQ29udGFpbmVyID0gbmV3IERPTSgnZGl2Jywge1xuICAgICAgJ2lkJzogdGhpcy5jb25maWcuaWQsXG4gICAgICAnY2xhc3MnOiB0aGlzLmdldENzc0NsYXNzZXMoKSxcbiAgICAgICdyb2xlJzogJ3NsaWRlcicsXG4gICAgICAnYXJpYS1sYWJlbCc6IGkxOG4ucGVyZm9ybUxvY2FsaXphdGlvbih0aGlzLmNvbmZpZy5hcmlhTGFiZWwpLFxuICAgICAgJ3RhYmluZGV4JzogdGhpcy5jb25maWcudGFiSW5kZXgudG9TdHJpbmcoKSxcbiAgICB9LCB0aGlzKTtcblxuICAgIGxldCBzZWVrQmFyID0gbmV3IERPTSgnZGl2Jywge1xuICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ3NlZWtiYXInKSxcbiAgICB9KTtcbiAgICB0aGlzLnNlZWtCYXIgPSBzZWVrQmFyO1xuXG4gICAgLy8gSW5kaWNhdG9yIHRoYXQgc2hvd3MgdGhlIGJ1ZmZlciBmaWxsIGxldmVsXG4gICAgbGV0IHNlZWtCYXJCdWZmZXJMZXZlbCA9IG5ldyBET00oJ2RpdicsIHtcbiAgICAgICdjbGFzcyc6IHRoaXMucHJlZml4Q3NzKCdzZWVrYmFyLWJ1ZmZlcmxldmVsJyksXG4gICAgfSk7XG4gICAgdGhpcy5zZWVrQmFyQnVmZmVyUG9zaXRpb24gPSBzZWVrQmFyQnVmZmVyTGV2ZWw7XG5cbiAgICAvLyBJbmRpY2F0b3IgdGhhdCBzaG93cyB0aGUgY3VycmVudCBwbGF5YmFjayBwb3NpdGlvblxuICAgIGxldCBzZWVrQmFyUGxheWJhY2tQb3NpdGlvbiA9IG5ldyBET00oJ2RpdicsIHtcbiAgICAgICdjbGFzcyc6IHRoaXMucHJlZml4Q3NzKCdzZWVrYmFyLXBsYXliYWNrcG9zaXRpb24nKSxcbiAgICB9KTtcbiAgICB0aGlzLnNlZWtCYXJQbGF5YmFja1Bvc2l0aW9uID0gc2Vla0JhclBsYXliYWNrUG9zaXRpb247XG5cbiAgICAvLyBBIG1hcmtlciBvZiB0aGUgY3VycmVudCBwbGF5YmFjayBwb3NpdGlvbiwgZS5nLiBhIGRvdCBvciBsaW5lXG4gICAgbGV0IHNlZWtCYXJQbGF5YmFja1Bvc2l0aW9uTWFya2VyID0gbmV3IERPTSgnZGl2Jywge1xuICAgICAgJ2NsYXNzJzogdGhpcy5wcmVmaXhDc3MoJ3NlZWtiYXItcGxheWJhY2twb3NpdGlvbi1tYXJrZXInKSxcbiAgICB9KTtcbiAgICB0aGlzLnNlZWtCYXJQbGF5YmFja1Bvc2l0aW9uTWFya2VyID0gc2Vla0JhclBsYXliYWNrUG9zaXRpb25NYXJrZXI7XG5cbiAgICAvLyBJbmRpY2F0b3IgdGhhdCBzaG93IHdoZXJlIGEgc2VlayB3aWxsIGdvIHRvXG4gICAgbGV0IHNlZWtCYXJTZWVrUG9zaXRpb24gPSBuZXcgRE9NKCdkaXYnLCB7XG4gICAgICAnY2xhc3MnOiB0aGlzLnByZWZpeENzcygnc2Vla2Jhci1zZWVrcG9zaXRpb24nKSxcbiAgICB9KTtcbiAgICB0aGlzLnNlZWtCYXJTZWVrUG9zaXRpb24gPSBzZWVrQmFyU2Vla1Bvc2l0aW9uO1xuXG4gICAgLy8gSW5kaWNhdG9yIHRoYXQgc2hvd3MgdGhlIGZ1bGwgc2Vla2JhclxuICAgIGxldCBzZWVrQmFyQmFja2Ryb3AgPSBuZXcgRE9NKCdkaXYnLCB7XG4gICAgICAnY2xhc3MnOiB0aGlzLnByZWZpeENzcygnc2Vla2Jhci1iYWNrZHJvcCcpLFxuICAgIH0pO1xuICAgIHRoaXMuc2Vla0JhckJhY2tkcm9wID0gc2Vla0JhckJhY2tkcm9wO1xuXG4gICAgbGV0IHNlZWtCYXJDaGFwdGVyTWFya2Vyc0NvbnRhaW5lciA9IG5ldyBET00oJ2RpdicsIHtcbiAgICAgICdjbGFzcyc6IHRoaXMucHJlZml4Q3NzKCdzZWVrYmFyLW1hcmtlcnMnKSxcbiAgICB9KTtcbiAgICB0aGlzLnNlZWtCYXJNYXJrZXJzQ29udGFpbmVyID0gc2Vla0JhckNoYXB0ZXJNYXJrZXJzQ29udGFpbmVyO1xuXG4gICAgc2Vla0Jhci5hcHBlbmQodGhpcy5zZWVrQmFyQmFja2Ryb3AsIHRoaXMuc2Vla0JhckJ1ZmZlclBvc2l0aW9uLCB0aGlzLnNlZWtCYXJTZWVrUG9zaXRpb24sXG4gICAgICB0aGlzLnNlZWtCYXJQbGF5YmFja1Bvc2l0aW9uLCB0aGlzLnNlZWtCYXJNYXJrZXJzQ29udGFpbmVyLCB0aGlzLnNlZWtCYXJQbGF5YmFja1Bvc2l0aW9uTWFya2VyKTtcblxuICAgIGxldCBzZWVraW5nID0gZmFsc2U7XG5cbiAgICAvLyBEZWZpbmUgaGFuZGxlciBmdW5jdGlvbnMgc28gd2UgY2FuIGF0dGFjaC9yZW1vdmUgdGhlbSBsYXRlclxuICAgIGxldCBtb3VzZVRvdWNoTW92ZUhhbmRsZXIgPSAoZTogTW91c2VFdmVudCB8IFRvdWNoRXZlbnQpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW9uIHRvIFZSIGhhbmRsZXJcbiAgICAgIGlmICh0aGlzLnBsYXllci52ciAhPSBudWxsKSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIGxldCB0YXJnZXRQZXJjZW50YWdlID0gMTAwICogdGhpcy5nZXRPZmZzZXQoZSk7XG4gICAgICB0aGlzLnNldFNlZWtQb3NpdGlvbih0YXJnZXRQZXJjZW50YWdlKTtcbiAgICAgIHRoaXMuc2V0UGxheWJhY2tQb3NpdGlvbih0YXJnZXRQZXJjZW50YWdlKTtcbiAgICAgIHRoaXMub25TZWVrUHJldmlld0V2ZW50KHRhcmdldFBlcmNlbnRhZ2UsIHRydWUpO1xuICAgIH07XG5cbiAgICBsZXQgbW91c2VUb3VjaFVwSGFuZGxlciA9IChlOiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAvLyBSZW1vdmUgaGFuZGxlcnMsIHNlZWsgb3BlcmF0aW9uIGlzIGZpbmlzaGVkXG4gICAgICBuZXcgRE9NKGRvY3VtZW50KS5vZmYoJ3RvdWNobW92ZSBtb3VzZW1vdmUnLCBtb3VzZVRvdWNoTW92ZUhhbmRsZXIpO1xuICAgICAgbmV3IERPTShkb2N1bWVudCkub2ZmKCd0b3VjaGVuZCBtb3VzZXVwJywgbW91c2VUb3VjaFVwSGFuZGxlcik7XG5cbiAgICAgIGxldCB0YXJnZXRQZXJjZW50YWdlID0gMTAwICogdGhpcy5nZXRPZmZzZXQoZSk7XG5cbiAgICAgIGlmICh0aGlzLmNvbmZpZy5zbmFwcGluZ0VuYWJsZWQpIHtcbiAgICAgICAgY29uc3QgbWF0Y2hpbmdNYXJrZXIgPSB0aGlzLnRpbWVsaW5lTWFya2Vyc0hhbmRsZXI/LmdldE1hcmtlckF0UG9zaXRpb24odGFyZ2V0UGVyY2VudGFnZSk7XG4gICAgICAgIHRhcmdldFBlcmNlbnRhZ2UgPSBtYXRjaGluZ01hcmtlciA/IG1hdGNoaW5nTWFya2VyLnBvc2l0aW9uIDogdGFyZ2V0UGVyY2VudGFnZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRTZWVraW5nKGZhbHNlKTtcbiAgICAgIHNlZWtpbmcgPSBmYWxzZTtcblxuICAgICAgLy8gRmlyZSBzZWVrZWQgZXZlbnRcbiAgICAgIHRoaXMub25TZWVrZWRFdmVudCh0YXJnZXRQZXJjZW50YWdlKTtcbiAgICB9O1xuXG4gICAgLy8gQSBzZWVrIGFsd2F5cyBzdGFydCB3aXRoIGEgdG91Y2hzdGFydCBvciBtb3VzZWRvd24gZGlyZWN0bHkgb24gdGhlIHNlZWtiYXIuXG4gICAgLy8gVG8gdHJhY2sgYSBtb3VzZSBzZWVrIGFsc28gb3V0c2lkZSB0aGUgc2Vla2JhciAoZm9yIHRvdWNoIGV2ZW50cyB0aGlzIHdvcmtzIGF1dG9tYXRpY2FsbHkpLFxuICAgIC8vIHNvIHRoZSB1c2VyIGRvZXMgbm90IG5lZWQgdG8gdGFrZSBjYXJlIHRoYXQgdGhlIG1vdXNlIGFsd2F5cyBzdGF5cyBvbiB0aGUgc2Vla2Jhciwgd2UgYXR0YWNoIHRoZSBtb3VzZW1vdmVcbiAgICAvLyBhbmQgbW91c2V1cCBoYW5kbGVycyB0byB0aGUgd2hvbGUgZG9jdW1lbnQuIEEgc2VlayBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgdXNlciBsaWZ0cyB0aGUgbW91c2Uga2V5LlxuICAgIC8vIEEgc2VlayBtb3VzZSBnZXN0dXJlIGlzIHRodXMgYmFzaWNhbGx5IGEgY2xpY2sgd2l0aCBhIGxvbmcgdGltZSBmcmFtZSBiZXR3ZWVuIGRvd24gYW5kIHVwIGV2ZW50cy5cbiAgICBzZWVrQmFyLm9uKCd0b3VjaHN0YXJ0IG1vdXNlZG93bicsIChlOiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCkgPT4ge1xuICAgICAgbGV0IGlzVG91Y2hFdmVudCA9IEJyb3dzZXJVdGlscy5pc1RvdWNoU3VwcG9ydGVkICYmIHRoaXMuaXNUb3VjaEV2ZW50KGUpO1xuXG4gICAgICAvLyBQcmV2ZW50IHNlbGVjdGlvbiBvZiBET00gZWxlbWVudHMgKGFsc28gcHJldmVudHMgbW91c2Vkb3duIGlmIGN1cnJlbnQgZXZlbnQgaXMgdG91Y2hzdGFydClcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW9uIHRvIFZSIGhhbmRsZXJcbiAgICAgIGlmICh0aGlzLnBsYXllci52ciAhPSBudWxsKSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0U2Vla2luZyh0cnVlKTsgLy8gU2V0IHNlZWtpbmcgY2xhc3Mgb24gRE9NIGVsZW1lbnRcbiAgICAgIHNlZWtpbmcgPSB0cnVlOyAvLyBTZXQgc2VlayB0cmFja2luZyBmbGFnXG5cbiAgICAgIC8vIEZpcmUgc2Vla2VkIGV2ZW50XG4gICAgICB0aGlzLm9uU2Vla0V2ZW50KCk7XG5cbiAgICAgIC8vIEFkZCBoYW5kbGVyIHRvIHRyYWNrIHRoZSBzZWVrIG9wZXJhdGlvbiBvdmVyIHRoZSB3aG9sZSBkb2N1bWVudFxuICAgICAgbmV3IERPTShkb2N1bWVudCkub24oaXNUb3VjaEV2ZW50ID8gJ3RvdWNobW92ZScgOiAnbW91c2Vtb3ZlJywgbW91c2VUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICAgIG5ldyBET00oZG9jdW1lbnQpLm9uKGlzVG91Y2hFdmVudCA/ICd0b3VjaGVuZCcgOiAnbW91c2V1cCcsIG1vdXNlVG91Y2hVcEhhbmRsZXIpO1xuICAgIH0pO1xuXG4gICAgLy8gRGlzcGxheSBzZWVrIHRhcmdldCBpbmRpY2F0b3Igd2hlbiBtb3VzZSBob3ZlcnMgb3IgZmluZ2VyIHNsaWRlcyBvdmVyIHNlZWtiYXJcbiAgICBzZWVrQmFyLm9uKCd0b3VjaG1vdmUgbW91c2Vtb3ZlJywgKGU6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50KSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmIChzZWVraW5nKSB7XG4gICAgICAgIG1vdXNlVG91Y2hNb3ZlSGFuZGxlcihlKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHBvc2l0aW9uID0gMTAwICogdGhpcy5nZXRPZmZzZXQoZSk7XG4gICAgICB0aGlzLnNldFNlZWtQb3NpdGlvbihwb3NpdGlvbik7XG5cbiAgICAgIHRoaXMub25TZWVrUHJldmlld0V2ZW50KHBvc2l0aW9uLCBmYWxzZSk7XG5cbiAgICAgIGlmICh0aGlzLmhhc0xhYmVsKCkgJiYgdGhpcy5nZXRMYWJlbCgpLmlzSGlkZGVuKCkpIHtcbiAgICAgICAgdGhpcy5nZXRMYWJlbCgpLnNob3coKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEhpZGUgc2VlayB0YXJnZXQgaW5kaWNhdG9yIHdoZW4gbW91c2Ugb3IgZmluZ2VyIGxlYXZlcyBzZWVrYmFyXG4gICAgc2Vla0Jhci5vbigndG91Y2hlbmQgbW91c2VsZWF2ZScsIChlOiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICB0aGlzLnNldFNlZWtQb3NpdGlvbigwKTtcblxuICAgICAgaWYgKHRoaXMuaGFzTGFiZWwoKSkge1xuICAgICAgICB0aGlzLmdldExhYmVsKCkuaGlkZSgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc2Vla0JhckNvbnRhaW5lci5hcHBlbmQoc2Vla0Jhcik7XG5cbiAgICBpZiAodGhpcy5sYWJlbCkge1xuICAgICAgc2Vla0JhckNvbnRhaW5lci5hcHBlbmQodGhpcy5sYWJlbC5nZXREb21FbGVtZW50KCkpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWVrQmFyQ29udGFpbmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGhvcml6b250YWwgb2Zmc2V0IG9mIGEgbW91c2UvdG91Y2ggZXZlbnQgcG9pbnQgZnJvbSB0aGUgbGVmdCBlZGdlIG9mIHRoZSBzZWVrIGJhci5cbiAgICogQHBhcmFtIGV2ZW50UGFnZVggdGhlIHBhZ2VYIGNvb3JkaW5hdGUgb2YgYW4gZXZlbnQgdG8gY2FsY3VsYXRlIHRoZSBvZmZzZXQgZnJvbVxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBhIG51bWJlciBpbiB0aGUgcmFuZ2Ugb2YgWzAsIDFdLCB3aGVyZSAwIGlzIHRoZSBsZWZ0IGVkZ2UgYW5kIDEgaXMgdGhlIHJpZ2h0IGVkZ2VcbiAgICovXG4gIHByaXZhdGUgZ2V0SG9yaXpvbnRhbE9mZnNldChldmVudFBhZ2VYOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGxldCBlbGVtZW50T2Zmc2V0UHggPSB0aGlzLnNlZWtCYXIub2Zmc2V0KCkubGVmdDtcbiAgICBsZXQgd2lkdGhQeCA9IHRoaXMuc2Vla0Jhci53aWR0aCgpO1xuICAgIGxldCBvZmZzZXRQeCA9IGV2ZW50UGFnZVggLSBlbGVtZW50T2Zmc2V0UHg7XG4gICAgbGV0IG9mZnNldCA9IDEgLyB3aWR0aFB4ICogb2Zmc2V0UHg7XG5cbiAgICByZXR1cm4gdGhpcy5zYW5pdGl6ZU9mZnNldChvZmZzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHZlcnRpY2FsIG9mZnNldCBvZiBhIG1vdXNlL3RvdWNoIGV2ZW50IHBvaW50IGZyb20gdGhlIGJvdHRvbSBlZGdlIG9mIHRoZSBzZWVrIGJhci5cbiAgICogQHBhcmFtIGV2ZW50UGFnZVkgdGhlIHBhZ2VYIGNvb3JkaW5hdGUgb2YgYW4gZXZlbnQgdG8gY2FsY3VsYXRlIHRoZSBvZmZzZXQgZnJvbVxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBhIG51bWJlciBpbiB0aGUgcmFuZ2Ugb2YgWzAsIDFdLCB3aGVyZSAwIGlzIHRoZSBib3R0b20gZWRnZSBhbmQgMSBpcyB0aGUgdG9wIGVkZ2VcbiAgICovXG4gIHByaXZhdGUgZ2V0VmVydGljYWxPZmZzZXQoZXZlbnRQYWdlWTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBsZXQgZWxlbWVudE9mZnNldFB4ID0gdGhpcy5zZWVrQmFyLm9mZnNldCgpLnRvcDtcbiAgICBsZXQgd2lkdGhQeCA9IHRoaXMuc2Vla0Jhci5oZWlnaHQoKTtcbiAgICBsZXQgb2Zmc2V0UHggPSBldmVudFBhZ2VZIC0gZWxlbWVudE9mZnNldFB4O1xuICAgIGxldCBvZmZzZXQgPSAxIC8gd2lkdGhQeCAqIG9mZnNldFB4O1xuXG4gICAgcmV0dXJuIDEgLSB0aGlzLnNhbml0aXplT2Zmc2V0KG9mZnNldCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbW91c2Ugb3IgdG91Y2ggZXZlbnQgb2Zmc2V0IGZvciB0aGUgY3VycmVudCBjb25maWd1cmF0aW9uIChob3Jpem9udGFsIG9yIHZlcnRpY2FsKS5cbiAgICogQHBhcmFtIGUgdGhlIGV2ZW50IHRvIGNhbGN1bGF0ZSB0aGUgb2Zmc2V0IGZyb21cbiAgICogQHJldHVybnMge251bWJlcn0gYSBudW1iZXIgaW4gdGhlIHJhbmdlIG9mIFswLCAxXVxuICAgKiBAc2VlICNnZXRIb3Jpem9udGFsT2Zmc2V0XG4gICAqIEBzZWUgI2dldFZlcnRpY2FsT2Zmc2V0XG4gICAqL1xuICBwcml2YXRlIGdldE9mZnNldChlOiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCk6IG51bWJlciB7XG4gICAgaWYgKEJyb3dzZXJVdGlscy5pc1RvdWNoU3VwcG9ydGVkICYmIHRoaXMuaXNUb3VjaEV2ZW50KGUpKSB7XG4gICAgICBpZiAodGhpcy5jb25maWcudmVydGljYWwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmVydGljYWxPZmZzZXQoZS50eXBlID09PSAndG91Y2hlbmQnID8gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSA6IGUudG91Y2hlc1swXS5wYWdlWSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRIb3Jpem9udGFsT2Zmc2V0KGUudHlwZSA9PT0gJ3RvdWNoZW5kJyA/IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggOiBlLnRvdWNoZXNbMF0ucGFnZVgpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChlIGluc3RhbmNlb2YgTW91c2VFdmVudCkge1xuICAgICAgaWYgKHRoaXMuY29uZmlnLnZlcnRpY2FsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFZlcnRpY2FsT2Zmc2V0KGUucGFnZVkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SG9yaXpvbnRhbE9mZnNldChlLnBhZ2VYKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpZiAoY29uc29sZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ2ludmFsaWQgZXZlbnQnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTYW5pdGl6ZXMgdGhlIG1vdXNlIG9mZnNldCB0byB0aGUgcmFuZ2Ugb2YgWzAsIDFdLlxuICAgKlxuICAgKiBXaGVuIHRyYWNraW5nIHRoZSBtb3VzZSBvdXRzaWRlIHRoZSBzZWVrIGJhciwgdGhlIG9mZnNldCBjYW4gYmUgb3V0c2lkZSB0aGUgZGVzaXJlZCByYW5nZSBhbmQgdGhpcyBtZXRob2RcbiAgICogbGltaXRzIGl0IHRvIHRoZSBkZXNpcmVkIHJhbmdlLiBFLmcuIGEgbW91c2UgZXZlbnQgbGVmdCBvZiB0aGUgbGVmdCBlZGdlIG9mIGEgc2VlayBiYXIgeWllbGRzIGFuIG9mZnNldCBiZWxvd1xuICAgKiB6ZXJvLCBidXQgdG8gZGlzcGxheSB0aGUgc2VlayB0YXJnZXQgb24gdGhlIHNlZWsgYmFyLCB3ZSBuZWVkIHRvIGxpbWl0IGl0IHRvIHplcm8uXG4gICAqXG4gICAqIEBwYXJhbSBvZmZzZXQgdGhlIG9mZnNldCB0byBzYW5pdGl6ZVxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSB0aGUgc2FuaXRpemVkIG9mZnNldC5cbiAgICovXG4gIHByaXZhdGUgc2FuaXRpemVPZmZzZXQob2Zmc2V0OiBudW1iZXIpIHtcbiAgICAvLyBTaW5jZSB3ZSB0cmFjayBtb3VzZSBtb3ZlcyBvdmVyIHRoZSB3aG9sZSBkb2N1bWVudCwgdGhlIHRhcmdldCBjYW4gYmUgb3V0c2lkZSB0aGUgc2VlayByYW5nZSxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byBsaW1pdCBpdCB0byB0aGUgWzAsIDFdIHJhbmdlLlxuICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICBvZmZzZXQgPSAwO1xuICAgIH0gZWxzZSBpZiAob2Zmc2V0ID4gMSkge1xuICAgICAgb2Zmc2V0ID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBvc2l0aW9uIG9mIHRoZSBwbGF5YmFjayBwb3NpdGlvbiBpbmRpY2F0b3IuXG4gICAqIEBwYXJhbSBwZXJjZW50IGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMTAwIGFzIHJldHVybmVkIGJ5IHRoZSBwbGF5ZXJcbiAgICovXG4gIHNldFBsYXliYWNrUG9zaXRpb24ocGVyY2VudDogbnVtYmVyKSB7XG4gICAgdGhpcy5wbGF5YmFja1Bvc2l0aW9uUGVyY2VudGFnZSA9IHBlcmNlbnQ7XG5cbiAgICAvLyBTZXQgcG9zaXRpb24gb2YgdGhlIGJhclxuICAgIHRoaXMuc2V0UG9zaXRpb24odGhpcy5zZWVrQmFyUGxheWJhY2tQb3NpdGlvbiwgcGVyY2VudCk7XG5cbiAgICAvLyBTZXQgcG9zaXRpb24gb2YgdGhlIG1hcmtlclxuICAgIGxldCB0b3RhbFNpemUgPSAodGhpcy5jb25maWcudmVydGljYWwgPyAodGhpcy5zZWVrQmFyLmhlaWdodCgpIC0gdGhpcy5zZWVrQmFyUGxheWJhY2tQb3NpdGlvbk1hcmtlci5oZWlnaHQoKSkgOiB0aGlzLnNlZWtCYXIud2lkdGgoKSk7XG4gICAgbGV0IHB4ID0gKHRvdGFsU2l6ZSkgLyAxMDAgKiBwZXJjZW50O1xuICAgIGlmICh0aGlzLmNvbmZpZy52ZXJ0aWNhbCkge1xuICAgICAgcHggPSB0aGlzLnNlZWtCYXIuaGVpZ2h0KCkgLSBweCAtIHRoaXMuc2Vla0JhclBsYXliYWNrUG9zaXRpb25NYXJrZXIuaGVpZ2h0KCk7XG4gICAgfVxuXG4gICAgbGV0IHN0eWxlID0gdGhpcy5jb25maWcudmVydGljYWwgP1xuICAgICAgLy8gLW1zLXRyYW5zZm9ybSByZXF1aXJlZCBmb3IgSUU5XG4gICAgICAvLyAtd2Via2l0LXRyYW5zZm9ybSByZXF1aXJlZCBmb3IgQW5kcm9pZCA0LjQgV2ViVmlld1xuICAgICAge1xuICAgICAgICAndHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVkoJyArIHB4ICsgJ3B4KScsXG4gICAgICAgICctbXMtdHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVkoJyArIHB4ICsgJ3B4KScsXG4gICAgICAgICctd2Via2l0LXRyYW5zZm9ybSc6ICd0cmFuc2xhdGVZKCcgKyBweCArICdweCknLFxuICAgICAgfSA6XG4gICAgICB7XG4gICAgICAgICd0cmFuc2Zvcm0nOiAndHJhbnNsYXRlWCgnICsgcHggKyAncHgpJyxcbiAgICAgICAgJy1tcy10cmFuc2Zvcm0nOiAndHJhbnNsYXRlWCgnICsgcHggKyAncHgpJyxcbiAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVgoJyArIHB4ICsgJ3B4KScsXG4gICAgICB9O1xuICAgIHRoaXMuc2Vla0JhclBsYXliYWNrUG9zaXRpb25NYXJrZXIuY3NzKHN0eWxlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWZyZXNoZXMgdGhlIHBsYXliYWNrIHBvc2l0aW9uLiBDYW4gYmUgdXNlZCBieSBzdWJjbGFzc2VzIHRvIHJlZnJlc2ggdGhlIHBvc2l0aW9uIHdoZW5cbiAgICogdGhlIHNpemUgb2YgdGhlIGNvbXBvbmVudCBjaGFuZ2VzLlxuICAgKi9cbiAgcHJvdGVjdGVkIHJlZnJlc2hQbGF5YmFja1Bvc2l0aW9uKCkge1xuICAgIHRoaXMuc2V0UGxheWJhY2tQb3NpdGlvbih0aGlzLnBsYXliYWNrUG9zaXRpb25QZXJjZW50YWdlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwb3NpdGlvbiB1bnRpbCB3aGljaCBtZWRpYSBpcyBidWZmZXJlZC5cbiAgICogQHBhcmFtIHBlcmNlbnQgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxMDBcbiAgICovXG4gIHNldEJ1ZmZlclBvc2l0aW9uKHBlcmNlbnQ6IG51bWJlcikge1xuICAgIHRoaXMuc2V0UG9zaXRpb24odGhpcy5zZWVrQmFyQnVmZmVyUG9zaXRpb24sIHBlcmNlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBvc2l0aW9uIHdoZXJlIGEgc2VlaywgaWYgZXhlY3V0ZWQsIHdvdWxkIGp1bXAgdG8uXG4gICAqIEBwYXJhbSBwZXJjZW50IGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMTAwXG4gICAqL1xuICBzZXRTZWVrUG9zaXRpb24ocGVyY2VudDogbnVtYmVyKSB7XG4gICAgdGhpcy5zZXRQb3NpdGlvbih0aGlzLnNlZWtCYXJTZWVrUG9zaXRpb24sIHBlcmNlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgYWN0dWFsIHBvc2l0aW9uICh3aWR0aCBvciBoZWlnaHQpIG9mIGEgRE9NIGVsZW1lbnQgdGhhdCByZXByZXNlbnQgYSBiYXIgaW4gdGhlIHNlZWsgYmFyLlxuICAgKiBAcGFyYW0gZWxlbWVudCB0aGUgZWxlbWVudCB0byBzZXQgdGhlIHBvc2l0aW9uIGZvclxuICAgKiBAcGFyYW0gcGVyY2VudCBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEwMFxuICAgKi9cbiAgcHJpdmF0ZSBzZXRQb3NpdGlvbihlbGVtZW50OiBET00sIHBlcmNlbnQ6IG51bWJlcikge1xuICAgIGxldCBzY2FsZSA9IHBlcmNlbnQgLyAxMDA7XG5cbiAgICAvLyBXaGVuIHRoZSBzY2FsZSBpcyBleGFjdGx5IDEgb3IgdmVyeSBuZWFyIDEgKGFuZCB0aGUgYnJvd3NlciBpbnRlcm5hbGx5IHJvdW5kcyBpdCB0byAxKSwgYnJvd3NlcnMgc2VlbSB0byByZW5kZXJcbiAgICAvLyB0aGUgZWxlbWVudHMgZGlmZmVyZW50bHkgYW5kIHRoZSBoZWlnaHQgZ2V0cyBzbGlnaHRseSBvZmYsIGxlYWRpbmcgdG8gbWlzbWF0Y2hpbmcgaGVpZ2h0cyB3aGVuIGUuZy4gdGhlIGJ1ZmZlclxuICAgIC8vIGxldmVsIGJhciBoYXMgYSB3aWR0aCBvZiAxIGFuZCB0aGUgcGxheWJhY2sgcG9zaXRpb24gYmFyIGhhcyBhIHdpZHRoIDwgMS4gQSBqaXR0ZXJpbmcgYnVmZmVyIGxldmVsIGFyb3VuZCAxXG4gICAgLy8gbGVhZHMgdG8gYW4gZXZlbiB3b3JzZSBmbGlja2VyaW5nIGVmZmVjdC5cbiAgICAvLyBWYXJpb3VzIGNoYW5nZXMgaW4gQ1NTIHN0eWxpbmcgYW5kIERPTSBoaWVyYXJjaHkgZGlkIG5vdCBzb2x2ZSB0aGUgaXNzdWUgc28gdGhlIHdvcmthcm91bmQgaXMgdG8gYXZvaWQgYSBzY2FsZVxuICAgIC8vIG9mIGV4YWN0bHkgMS5cbiAgICBpZiAoc2NhbGUgPj0gMC45OTk5OSAmJiBzY2FsZSA8PSAxLjAwMDAxKSB7XG4gICAgICBzY2FsZSA9IDAuOTk5OTk7XG4gICAgfVxuXG4gICAgbGV0IHN0eWxlID0gdGhpcy5jb25maWcudmVydGljYWwgP1xuICAgICAgLy8gLW1zLXRyYW5zZm9ybSByZXF1aXJlZCBmb3IgSUU5XG4gICAgICAvLyAtd2Via2l0LXRyYW5zZm9ybSByZXF1aXJlZCBmb3IgQW5kcm9pZCA0LjQgV2ViVmlld1xuICAgICAge1xuICAgICAgICAndHJhbnNmb3JtJzogJ3NjYWxlWSgnICsgc2NhbGUgKyAnKScsXG4gICAgICAgICctbXMtdHJhbnNmb3JtJzogJ3NjYWxlWSgnICsgc2NhbGUgKyAnKScsXG4gICAgICAgICctd2Via2l0LXRyYW5zZm9ybSc6ICdzY2FsZVkoJyArIHNjYWxlICsgJyknLFxuICAgICAgfSA6XG4gICAgICB7XG4gICAgICAgICd0cmFuc2Zvcm0nOiAnc2NhbGVYKCcgKyBzY2FsZSArICcpJyxcbiAgICAgICAgJy1tcy10cmFuc2Zvcm0nOiAnc2NhbGVYKCcgKyBzY2FsZSArICcpJyxcbiAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3NjYWxlWCgnICsgc2NhbGUgKyAnKScsXG4gICAgICB9O1xuICAgIGVsZW1lbnQuY3NzKHN0eWxlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdXRzIHRoZSBzZWVrIGJhciBpbnRvIG9yIG91dCBvZiBzZWVraW5nIHN0YXRlIGJ5IGFkZGluZy9yZW1vdmluZyBhIGNsYXNzIHRvIHRoZSBET00gZWxlbWVudC4gVGhpcyBjYW4gYmUgdXNlZFxuICAgKiB0byBhZGp1c3QgdGhlIHN0eWxpbmcgd2hpbGUgc2Vla2luZy5cbiAgICpcbiAgICogQHBhcmFtIHNlZWtpbmcgc2hvdWxkIGJlIHRydWUgd2hlbiBlbnRlcmluZyBzZWVrIHN0YXRlLCBmYWxzZSB3aGVuIGV4aXRpbmcgdGhlIHNlZWsgc3RhdGVcbiAgICovXG4gIHNldFNlZWtpbmcoc2Vla2luZzogYm9vbGVhbikge1xuICAgIGlmIChzZWVraW5nKSB7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hZGRDbGFzcyh0aGlzLnByZWZpeENzcyhTZWVrQmFyLkNMQVNTX1NFRUtJTkcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoU2Vla0Jhci5DTEFTU19TRUVLSU5HKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgc2VlayBiYXIgaXMgY3VycmVudGx5IGluIHRoZSBzZWVrIHN0YXRlLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBpbiBzZWVrIHN0YXRlLCBlbHNlIGZhbHNlXG4gICAqL1xuICBpc1NlZWtpbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmhhc0NsYXNzKHRoaXMucHJlZml4Q3NzKFNlZWtCYXIuQ0xBU1NfU0VFS0lORykpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgc2VlayBiYXIgaGFzIGEge0BsaW5rIFNlZWtCYXJMYWJlbH0uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBzZWVrIGJhciBoYXMgYSBsYWJlbCwgZWxzZSBmYWxzZVxuICAgKi9cbiAgaGFzTGFiZWwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubGFiZWwgIT0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBsYWJlbCBvZiB0aGlzIHNlZWsgYmFyLlxuICAgKiBAcmV0dXJucyB7U2Vla0JhckxhYmVsfSB0aGUgbGFiZWwgaWYgdGhpcyBzZWVrIGJhciBoYXMgYSBsYWJlbCwgZWxzZSBudWxsXG4gICAqL1xuICBnZXRMYWJlbCgpOiBTZWVrQmFyTGFiZWwgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5sYWJlbDtcbiAgfVxuXG4gIHByb3RlY3RlZCBvblNlZWtFdmVudCgpIHtcbiAgICB0aGlzLnNlZWtCYXJFdmVudHMub25TZWVrLmRpc3BhdGNoKHRoaXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uU2Vla1ByZXZpZXdFdmVudChwZXJjZW50YWdlOiBudW1iZXIsIHNjcnViYmluZzogYm9vbGVhbikge1xuICAgIGxldCBzbmFwcGVkTWFya2VyID0gdGhpcy50aW1lbGluZU1hcmtlcnNIYW5kbGVyICYmIHRoaXMudGltZWxpbmVNYXJrZXJzSGFuZGxlci5nZXRNYXJrZXJBdFBvc2l0aW9uKHBlcmNlbnRhZ2UpO1xuXG4gICAgbGV0IHNlZWtQb3NpdGlvblBlcmNlbnRhZ2UgPSBwZXJjZW50YWdlO1xuXG4gICAgaWYgKHNuYXBwZWRNYXJrZXIpIHtcbiAgICAgIGlmIChzbmFwcGVkTWFya2VyLmR1cmF0aW9uID4gMCkge1xuICAgICAgICBpZiAocGVyY2VudGFnZSA8IHNuYXBwZWRNYXJrZXIucG9zaXRpb24pIHtcbiAgICAgICAgICAvLyBTbmFwIHRoZSBwb3NpdGlvbiB0byB0aGUgc3RhcnQgb2YgdGhlIGludGVydmFsIGlmIHRoZSBzZWVrIGlzIHdpdGhpbiB0aGUgbGVmdCBzbmFwIG1hcmdpblxuICAgICAgICAgIC8vIFdlIGtub3cgdGhhdCB3ZSBhcmUgd2l0aGluIGEgc25hcCBtYXJnaW4gd2hlbiB3ZSBhcmUgb3V0c2lkZSB0aGUgbWFya2VyIGludGVydmFsIGJ1dCBzdGlsbFxuICAgICAgICAgIC8vIGhhdmUgYSBzbmFwcGVkTWFya2VyXG4gICAgICAgICAgc2Vla1Bvc2l0aW9uUGVyY2VudGFnZSA9IHNuYXBwZWRNYXJrZXIucG9zaXRpb247XG4gICAgICAgIH0gZWxzZSBpZiAocGVyY2VudGFnZSA+IHNuYXBwZWRNYXJrZXIucG9zaXRpb24gKyBzbmFwcGVkTWFya2VyLmR1cmF0aW9uKSB7XG4gICAgICAgICAgLy8gU25hcCB0aGUgcG9zaXRpb24gdG8gdGhlIGVuZCBvZiB0aGUgaW50ZXJ2YWwgaWYgdGhlIHNlZWsgaXMgd2l0aGluIHRoZSByaWdodCBzbmFwIG1hcmdpblxuICAgICAgICAgIHNlZWtQb3NpdGlvblBlcmNlbnRhZ2UgPSBzbmFwcGVkTWFya2VyLnBvc2l0aW9uICsgc25hcHBlZE1hcmtlci5kdXJhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUG9zaXRpb24gbWFya2VycyBhbHdheXMgc25hcCB0byB0aGVpciBtYXJrZXIgcG9zaXRpb25cbiAgICAgICAgc2Vla1Bvc2l0aW9uUGVyY2VudGFnZSA9IHNuYXBwZWRNYXJrZXIucG9zaXRpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGFiZWwpIHtcbiAgICAgIHRoaXMubGFiZWwuZ2V0RG9tRWxlbWVudCgpLmNzcyh7XG4gICAgICAgICdsZWZ0Jzogc2Vla1Bvc2l0aW9uUGVyY2VudGFnZSArICclJyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuc2Vla0JhckV2ZW50cy5vblNlZWtQcmV2aWV3LmRpc3BhdGNoKHRoaXMsIHtcbiAgICAgIHNjcnViYmluZzogc2NydWJiaW5nLFxuICAgICAgcG9zaXRpb246IHNlZWtQb3NpdGlvblBlcmNlbnRhZ2UsXG4gICAgICBtYXJrZXI6IHNuYXBwZWRNYXJrZXIsXG4gICAgfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25TZWVrZWRFdmVudChwZXJjZW50YWdlOiBudW1iZXIpIHtcbiAgICB0aGlzLnNlZWtCYXJFdmVudHMub25TZWVrZWQuZGlzcGF0Y2godGhpcywgcGVyY2VudGFnZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgZXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIGEgc2NydWJiaW5nIHNlZWsgb3BlcmF0aW9uIGlzIHN0YXJ0ZWQuXG4gICAqIEByZXR1cm5zIHtFdmVudDxTZWVrQmFyLCBOb0FyZ3M+fVxuICAgKi9cbiAgZ2V0IG9uU2VlaygpOiBFdmVudDxTZWVrQmFyLCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5zZWVrQmFyRXZlbnRzLm9uU2Vlay5nZXRFdmVudCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgZHVyaW5nIGEgc2NydWJiaW5nIHNlZWsgKHRvIGluZGljYXRlIHRoYXQgdGhlIHNlZWsgcHJldmlldywgaS5lLiB0aGUgdmlkZW8gZnJhbWUsXG4gICAqIHNob3VsZCBiZSB1cGRhdGVkKSwgb3IgZHVyaW5nIGEgbm9ybWFsIHNlZWsgcHJldmlldyB3aGVuIHRoZSBzZWVrIGJhciBpcyBob3ZlcmVkIChhbmQgdGhlIHNlZWsgdGFyZ2V0LFxuICAgKiBpLmUuIHRoZSBzZWVrIGJhciBsYWJlbCwgc2hvdWxkIGJlIHVwZGF0ZWQpLlxuICAgKiBAcmV0dXJucyB7RXZlbnQ8U2Vla0JhciwgU2Vla1ByZXZpZXdFdmVudEFyZ3M+fVxuICAgKi9cbiAgZ2V0IG9uU2Vla1ByZXZpZXcoKTogRXZlbnQ8U2Vla0JhciwgU2Vla1ByZXZpZXdFdmVudEFyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5zZWVrQmFyRXZlbnRzLm9uU2Vla1ByZXZpZXcuZ2V0RXZlbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gYSBzY3J1YmJpbmcgc2VlayBoYXMgZmluaXNoZWQgb3Igd2hlbiBhIGRpcmVjdCBzZWVrIGlzIGlzc3VlZC5cbiAgICogQHJldHVybnMge0V2ZW50PFNlZWtCYXIsIG51bWJlcj59XG4gICAqL1xuICBnZXQgb25TZWVrZWQoKTogRXZlbnQ8U2Vla0JhciwgbnVtYmVyPiB7XG4gICAgcmV0dXJuIHRoaXMuc2Vla0JhckV2ZW50cy5vblNlZWtlZC5nZXRFdmVudCgpO1xuICB9XG5cblxuICBwcm90ZWN0ZWQgb25TaG93RXZlbnQoKTogdm9pZCB7XG4gICAgc3VwZXIub25TaG93RXZlbnQoKTtcblxuICAgIC8vIFJlZnJlc2ggdGhlIHBvc2l0aW9uIG9mIHRoZSBwbGF5YmFjayBwb3NpdGlvbiB3aGVuIHRoZSBzZWVrIGJhciBiZWNvbWVzIHZpc2libGUuIFRvIGNvcnJlY3RseSBzZXQgdGhlIHBvc2l0aW9uLFxuICAgIC8vIHRoZSBET00gZWxlbWVudCBtdXN0IGJlIGZ1bGx5IGluaXRpYWxpemVkIGFuIGhhdmUgaXRzIHNpemUgY2FsY3VsYXRlZCwgYmVjYXVzZSB0aGUgcG9zaXRpb24gaXMgc2V0IGFzIGFuIGFic29sdXRlXG4gICAgLy8gdmFsdWUgY2FsY3VsYXRlZCBmcm9tIHRoZSBzaXplLiBUaGlzIHJlcXVpcmVkIHNpemUgaXMgbm90IGtub3duIHdoZW4gaXQgaXMgaGlkZGVuLlxuICAgIC8vIEZvciBzdWNoIGNhc2VzLCB3ZSByZWZyZXNoIHRoZSBwb3NpdGlvbiBoZXJlIGluIG9uU2hvdyBiZWNhdXNlIGhlcmUgaXQgaXMgZ3VhcmFudGVlZCB0aGF0IHRoZSBjb21wb25lbnQga25vd3NcbiAgICAvLyBpdHMgc2l6ZSBhbmQgY2FuIHNldCB0aGUgcG9zaXRpb24gY29ycmVjdGx5LlxuICAgIHRoaXMucmVmcmVzaFBsYXliYWNrUG9zaXRpb24oKTtcbiAgfVxuXG4gLyoqXG4gICAqIENoZWNrcyBpZiBUb3VjaEV2ZW50IGlzIHN1cHBvcnRlZC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgVG91Y2hFdmVudCBub3QgdW5kZWZpbmVkLCBlbHNlIGZhbHNlXG4gICAqL1xuICBpc1RvdWNoRXZlbnQoZTogVUlFdmVudCk6IGUgaXMgVG91Y2hFdmVudCB7XG4gICAgcmV0dXJuIHdpbmRvdy5Ub3VjaEV2ZW50ICYmIGUgaW5zdGFuY2VvZiBUb3VjaEV2ZW50O1xuICB9XG59XG4iLCJpbXBvcnQge1BsYXllckFQSX0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1pbkJ1ZmZlckxldmVsKHBsYXllcjogUGxheWVyQVBJKTogbnVtYmVyIHtcblxuICAgIGNvbnN0IHBsYXllckR1cmF0aW9uID0gcGxheWVyLmdldER1cmF0aW9uKCk7XG5cbiAgICBjb25zdCB2aWRlb0J1ZmZlckxlbmd0aCA9IHBsYXllci5nZXRWaWRlb0J1ZmZlckxlbmd0aCgpO1xuICAgIGNvbnN0IGF1ZGlvQnVmZmVyTGVuZ3RoID0gcGxheWVyLmdldEF1ZGlvQnVmZmVyTGVuZ3RoKCk7XG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBidWZmZXIgbGVuZ3RoIHdoaWNoIGlzIHRoZSBzbWFsbGVyIGxlbmd0aCBvZiB0aGUgYXVkaW8gYW5kIHZpZGVvIGJ1ZmZlcnMuIElmIG9uZSBvZiB0aGVzZVxuICAgIC8vIGJ1ZmZlcnMgaXMgbm90IGF2YWlsYWJsZSwgd2Ugc2V0IGl0J3MgdmFsdWUgdG8gTUFYX1ZBTFVFIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBvdGhlciByZWFsIHZhbHVlIGlzIHRha2VuXG4gICAgLy8gYXMgdGhlIGJ1ZmZlciBsZW5ndGguXG4gICAgbGV0IGJ1ZmZlckxlbmd0aCA9IE1hdGgubWluKFxuICAgICAgICB2aWRlb0J1ZmZlckxlbmd0aCAhPSBudWxsID8gdmlkZW9CdWZmZXJMZW5ndGggOiBOdW1iZXIuTUFYX1ZBTFVFLFxuICAgICAgICBhdWRpb0J1ZmZlckxlbmd0aCAhPSBudWxsID8gYXVkaW9CdWZmZXJMZW5ndGggOiBOdW1iZXIuTUFYX1ZBTFVFKTtcbiAgICAvLyBJZiBib3RoIGJ1ZmZlciBsZW5ndGhzIGFyZSBtaXNzaW5nLCB3ZSBzZXQgdGhlIGJ1ZmZlciBsZW5ndGggdG8gemVyb1xuICAgIGlmIChidWZmZXJMZW5ndGggPT09IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgYnVmZmVyTGVuZ3RoID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gMTAwIC8gcGxheWVyRHVyYXRpb24gKiBidWZmZXJMZW5ndGg7XG59XG4iLCJpbXBvcnQgeyBVSVV0aWxzIH0gZnJvbSAnLi4vdWl1dGlscyc7XG5pbXBvcnQgeyBET00gfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IFZvbHVtZUNvbnRyb2xsZXIgfSBmcm9tICcuLi92b2x1bWVjb250cm9sbGVyJztcblxuZXhwb3J0IGVudW0gU2Vla0JhclR5cGUge1xuICBWb2QsXG4gIExpdmUsXG4gIFZvbHVtZSxcbn1cblxuaW50ZXJmYWNlIFJhbmdlIHtcbiAgbWluOiBudW1iZXI7XG4gIG1heDogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgS2V5U3RlcEluY3JlbWVudHNDb25maWcge1xuICBsZWZ0UmlnaHQ6IG51bWJlcjtcbiAgdXBEb3duOiBudW1iZXI7XG59XG5cbmNvbnN0IGNvZXJjZVZhbHVlSW50b1JhbmdlID0gKFxuICB2YWx1ZTogbnVtYmVyLFxuICByYW5nZTogUmFuZ2UsXG4gIGNiOiAodmFsdWU6IG51bWJlcikgPT4gdm9pZCxcbikgPT4ge1xuICBpZiAodmFsdWUgPCByYW5nZS5taW4pIHtcbiAgICBjYihyYW5nZS5taW4pO1xuICB9IGVsc2UgaWYgKHZhbHVlID4gcmFuZ2UubWF4KSB7XG4gICAgY2IocmFuZ2UubWF4KTtcbiAgfSBlbHNlIHtcbiAgICBjYih2YWx1ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogQGNhdGVnb3J5IFV0aWxzXG4gKi9cbmV4cG9ydCBjbGFzcyBTZWVrQmFyQ29udHJvbGxlciB7XG4gIHByb3RlY3RlZCBrZXlTdGVwSW5jcmVtZW50czogS2V5U3RlcEluY3JlbWVudHNDb25maWc7XG4gIHByb3RlY3RlZCBwbGF5ZXI6IFBsYXllckFQSTtcbiAgcHJvdGVjdGVkIHZvbHVtZUNvbnRyb2xsZXI6IFZvbHVtZUNvbnRyb2xsZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAga2V5U3RlcEluY3JlbWVudHM6IEtleVN0ZXBJbmNyZW1lbnRzQ29uZmlnLFxuICAgIHBsYXllcjogUGxheWVyQVBJLFxuICAgIHZvbHVtZUNvbnRyb2xsZXI6IFZvbHVtZUNvbnRyb2xsZXIsXG4gICkge1xuICAgIHRoaXMua2V5U3RlcEluY3JlbWVudHMgPSBrZXlTdGVwSW5jcmVtZW50cztcbiAgICB0aGlzLnBsYXllciA9IHBsYXllcjtcbiAgICB0aGlzLnZvbHVtZUNvbnRyb2xsZXIgPSB2b2x1bWVDb250cm9sbGVyO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFycm93S2V5Q29udHJvbHMoXG4gICAgY3VycmVudFZhbHVlOiBudW1iZXIsXG4gICAgcmFuZ2U6IFJhbmdlLFxuICAgIHZhbHVlVXBkYXRlOiAodmFsdWU6IG51bWJlcikgPT4gdm9pZCxcbiAgKSB7XG4gICAgY29uc3QgY29udHJvbFZhbHVlID0gTWF0aC5mbG9vcihjdXJyZW50VmFsdWUpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6ICgpID0+IGNvZXJjZVZhbHVlSW50b1JhbmdlKGNvbnRyb2xWYWx1ZSAtIHRoaXMua2V5U3RlcEluY3JlbWVudHMubGVmdFJpZ2h0LCByYW5nZSwgdmFsdWVVcGRhdGUpLFxuICAgICAgcmlnaHQ6ICgpID0+IGNvZXJjZVZhbHVlSW50b1JhbmdlKGNvbnRyb2xWYWx1ZSArIHRoaXMua2V5U3RlcEluY3JlbWVudHMubGVmdFJpZ2h0LCByYW5nZSwgdmFsdWVVcGRhdGUpLFxuICAgICAgdXA6ICgpID0+IGNvZXJjZVZhbHVlSW50b1JhbmdlKGNvbnRyb2xWYWx1ZSArIHRoaXMua2V5U3RlcEluY3JlbWVudHMudXBEb3duLCByYW5nZSwgdmFsdWVVcGRhdGUpLFxuICAgICAgZG93bjogKCkgPT4gY29lcmNlVmFsdWVJbnRvUmFuZ2UoY29udHJvbFZhbHVlIC0gdGhpcy5rZXlTdGVwSW5jcmVtZW50cy51cERvd24sIHJhbmdlLCB2YWx1ZVVwZGF0ZSksXG4gICAgICBob21lOiAoKSA9PiBjb2VyY2VWYWx1ZUludG9SYW5nZShyYW5nZS5taW4sIHJhbmdlLCB2YWx1ZVVwZGF0ZSksXG4gICAgICBlbmQ6ICgpID0+IGNvZXJjZVZhbHVlSW50b1JhbmdlKHJhbmdlLm1heCwgcmFuZ2UsIHZhbHVlVXBkYXRlKSxcbiAgICB9O1xuICB9XG5cbiAgcHJvdGVjdGVkIHNlZWtCYXJDb250cm9scyh0eXBlOiBTZWVrQmFyVHlwZSkge1xuICAgIGlmICh0eXBlID09PSBTZWVrQmFyVHlwZS5MaXZlKSB7XG4gICAgICByZXR1cm4gdGhpcy5hcnJvd0tleUNvbnRyb2xzKHRoaXMucGxheWVyLmdldFRpbWVTaGlmdCgpLCB7IG1pbjogdGhpcy5wbGF5ZXIuZ2V0TWF4VGltZVNoaWZ0KCksIG1heDogMCB9LCB0aGlzLnBsYXllci50aW1lU2hpZnQpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gU2Vla0JhclR5cGUuVm9kKSB7XG4gICAgICByZXR1cm4gdGhpcy5hcnJvd0tleUNvbnRyb2xzKHRoaXMucGxheWVyLmdldEN1cnJlbnRUaW1lKCksIHsgbWluOiAwLCBtYXg6IHRoaXMucGxheWVyLmdldER1cmF0aW9uKCkgfSwgdGhpcy5wbGF5ZXIuc2Vlayk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBTZWVrQmFyVHlwZS5Wb2x1bWUgJiYgdGhpcy52b2x1bWVDb250cm9sbGVyICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IHZvbHVtZVRyYW5zaXRpb24gPSB0aGlzLnZvbHVtZUNvbnRyb2xsZXIuc3RhcnRUcmFuc2l0aW9uKCk7XG4gICAgICByZXR1cm4gdGhpcy5hcnJvd0tleUNvbnRyb2xzKHRoaXMucGxheWVyLmdldFZvbHVtZSgpLCB7IG1pbjogMCwgbWF4OiAxMDAgfSwgdm9sdW1lVHJhbnNpdGlvbi5maW5pc2guYmluZCh2b2x1bWVUcmFuc2l0aW9uKSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHNldFNlZWtCYXJDb250cm9scyhkb21FbGVtZW50OiBET00sIHR5cGU6ICgpID0+IFNlZWtCYXJUeXBlKSB7XG4gICAgZG9tRWxlbWVudC5vbigna2V5ZG93bicsIChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBjb250cm9scyA9IHRoaXMuc2Vla0JhckNvbnRyb2xzKHR5cGUoKSk7XG4gICAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgICAgICBjYXNlIFVJVXRpbHMuS2V5Q29kZS5MZWZ0QXJyb3c6IHtcbiAgICAgICAgICBjb250cm9scy5sZWZ0KCk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgVUlVdGlscy5LZXlDb2RlLlJpZ2h0QXJyb3c6IHtcbiAgICAgICAgICBjb250cm9scy5yaWdodCgpO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFVJVXRpbHMuS2V5Q29kZS5VcEFycm93OiB7XG4gICAgICAgICAgY29udHJvbHMudXAoKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBVSVV0aWxzLktleUNvZGUuRG93bkFycm93OiB7XG4gICAgICAgICAgY29udHJvbHMuZG93bigpO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFVJVXRpbHMuS2V5Q29kZS5Ib21lOiB7XG4gICAgICAgICAgY29udHJvbHMuaG9tZSgpO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFVJVXRpbHMuS2V5Q29kZS5FbmQ6IHtcbiAgICAgICAgICBjb250cm9scy5lbmQoKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBVSVV0aWxzLktleUNvZGUuU3BhY2U6IHtcbiAgICAgICAgICB0aGlzLnBsYXllci5pc1BsYXlpbmcoKSA/IHRoaXMucGxheWVyLnBhdXNlKCkgOiB0aGlzLnBsYXllci5wbGF5KCk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0iLCJpbXBvcnQge0NvbnRhaW5lciwgQ29udGFpbmVyQ29uZmlnfSBmcm9tICcuL2NvbnRhaW5lcic7XG5pbXBvcnQge0xhYmVsLCBMYWJlbENvbmZpZ30gZnJvbSAnLi9sYWJlbCc7XG5pbXBvcnQge0NvbXBvbmVudCwgQ29tcG9uZW50Q29uZmlnfSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBVSUluc3RhbmNlTWFuYWdlciB9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge1N0cmluZ1V0aWxzfSBmcm9tICcuLi9zdHJpbmd1dGlscyc7XG5pbXBvcnQge0ltYWdlTG9hZGVyfSBmcm9tICcuLi9pbWFnZWxvYWRlcic7XG5pbXBvcnQge0Nzc1Byb3BlcnRpZXN9IGZyb20gJy4uL2RvbSc7XG5pbXBvcnQgeyBQbGF5ZXJBUEksIFRodW1ibmFpbCB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBTZWVrQmFyLCBTZWVrUHJldmlld0V2ZW50QXJncyB9IGZyb20gJy4vc2Vla2Jhcic7XG5pbXBvcnQgeyBQbGF5ZXJVdGlscyB9IGZyb20gJy4uL3BsYXllcnV0aWxzJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgYSB7QGxpbmsgU2Vla0JhckxhYmVsfS5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29uZmlnc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlZWtCYXJMYWJlbENvbmZpZyBleHRlbmRzIENvbnRhaW5lckNvbmZpZyB7XG4gIC8vIG5vdGhpbmcgeWV0XG59XG5cbi8qKlxuICogQSBsYWJlbCBmb3IgYSB7QGxpbmsgU2Vla0Jhcn0gdGhhdCBjYW4gZGlzcGxheSB0aGUgc2VlayB0YXJnZXQgdGltZSwgYSB0aHVtYm5haWwsIGFuZCB0aXRsZSAoZS5nLiBjaGFwdGVyIHRpdGxlKS5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29tcG9uZW50c1xuICovXG5leHBvcnQgY2xhc3MgU2Vla0JhckxhYmVsIGV4dGVuZHMgQ29udGFpbmVyPFNlZWtCYXJMYWJlbENvbmZpZz4ge1xuXG4gIHByaXZhdGUgdGltZUxhYmVsOiBMYWJlbDxMYWJlbENvbmZpZz47XG4gIHByaXZhdGUgdGl0bGVMYWJlbDogTGFiZWw8TGFiZWxDb25maWc+O1xuICBwcml2YXRlIHRodW1ibmFpbDogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz47XG5cbiAgcHJpdmF0ZSB0aHVtYm5haWxJbWFnZUxvYWRlcjogSW1hZ2VMb2FkZXI7XG5cbiAgcHJpdmF0ZSB0aW1lRm9ybWF0OiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBhcHBsaWVkTWFya2VyQ3NzQ2xhc3Nlczogc3RyaW5nW10gPSBbXTtcbiAgcHJpdmF0ZSBwbGF5ZXI6IFBsYXllckFQSTtcbiAgcHJpdmF0ZSB1aU1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU2Vla0JhckxhYmVsQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy50aW1lTGFiZWwgPSBuZXcgTGFiZWwoeyBjc3NDbGFzc2VzOiBbJ3NlZWtiYXItbGFiZWwtdGltZSddIH0pO1xuICAgIHRoaXMudGl0bGVMYWJlbCA9IG5ldyBMYWJlbCh7IGNzc0NsYXNzZXM6IFsnc2Vla2Jhci1sYWJlbC10aXRsZSddIH0pO1xuICAgIHRoaXMudGh1bWJuYWlsID0gbmV3IENvbXBvbmVudCh7IGNzc0NsYXNzZXM6IFsnc2Vla2Jhci10aHVtYm5haWwnXSwgcm9sZTogJ2ltZycgfSk7XG4gICAgdGhpcy50aHVtYm5haWxJbWFnZUxvYWRlciA9IG5ldyBJbWFnZUxvYWRlcigpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1zZWVrYmFyLWxhYmVsJyxcbiAgICAgIGNvbXBvbmVudHM6IFtuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHRoaXMudGh1bWJuYWlsLFxuICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgY29tcG9uZW50czogW3RoaXMudGl0bGVMYWJlbCwgdGhpcy50aW1lTGFiZWxdLFxuICAgICAgICAgICAgY3NzQ2xhc3M6ICdzZWVrYmFyLWxhYmVsLW1ldGFkYXRhJyxcbiAgICAgICAgICB9KV0sXG4gICAgICAgIGNzc0NsYXNzOiAnc2Vla2Jhci1sYWJlbC1pbm5lcicsXG4gICAgICB9KV0sXG4gICAgICBoaWRkZW46IHRydWUsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMucGxheWVyID0gcGxheWVyO1xuICAgIHRoaXMudWlNYW5hZ2VyID0gdWltYW5hZ2VyO1xuICAgIHVpbWFuYWdlci5vblNlZWtQcmV2aWV3LnN1YnNjcmliZVJhdGVMaW1pdGVkKHRoaXMuaGFuZGxlU2Vla1ByZXZpZXcsIDEwMCk7XG5cbiAgICBsZXQgaW5pdCA9ICgpID0+IHtcbiAgICAgIC8vIFNldCB0aW1lIGZvcm1hdCBkZXBlbmRpbmcgb24gc291cmNlIGR1cmF0aW9uXG4gICAgICB0aGlzLnRpbWVGb3JtYXQgPSBNYXRoLmFicyhwbGF5ZXIuaXNMaXZlKCkgPyBwbGF5ZXIuZ2V0TWF4VGltZVNoaWZ0KCkgOiBwbGF5ZXIuZ2V0RHVyYXRpb24oKSkgPj0gMzYwMCA/XG4gICAgICAgIFN0cmluZ1V0aWxzLkZPUk1BVF9ISE1NU1MgOiBTdHJpbmdVdGlscy5GT1JNQVRfTU1TUztcbiAgICAgIC8vIFNldCBpbml0aWFsIHN0YXRlIG9mIHRpdGxlIGFuZCB0aHVtYm5haWwgdG8gaGFuZGxlIHNvdXJjZUxvYWRlZCB3aGVuIHN3aXRjaGluZyB0byBhIGxpdmUtc3RyZWFtXG4gICAgICB0aGlzLnNldFRpdGxlVGV4dChudWxsKTtcbiAgICAgIHRoaXMuc2V0VGh1bWJuYWlsKG51bGwpO1xuICAgIH07XG5cbiAgICB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUoaW5pdCk7XG4gICAgaW5pdCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVTZWVrUHJldmlldyA9IChzZW5kZXI6IFNlZWtCYXIsIGFyZ3M6IFNlZWtQcmV2aWV3RXZlbnRBcmdzKSA9PiB7XG4gICAgaWYgKHRoaXMucGxheWVyLmlzTGl2ZSgpKSB7XG4gICAgICBsZXQgbWF4VGltZVNoaWZ0ID0gdGhpcy5wbGF5ZXIuZ2V0TWF4VGltZVNoaWZ0KCk7XG4gICAgICBsZXQgdGltZVNoaWZ0UHJldmlldyA9IG1heFRpbWVTaGlmdCAtIG1heFRpbWVTaGlmdCAqIChhcmdzLnBvc2l0aW9uIC8gMTAwKTtcblxuICAgICAgdGhpcy5zZXRUaW1lKHRpbWVTaGlmdFByZXZpZXcpO1xuXG4gICAgICAvLyBJbiBjYXNlIG9mIGEgbGl2ZSBzdHJlYW0gdGhlIHBsYXllciBleHBlY3RzIHRoZSB0aW1lIHBhc3NlZCBpbnRvIHRoZSBnZXRUaHVtYm5haWwgYXMgYSB3YWxsQ2xvY2tUaW1lIGFuZCBub3RcbiAgICAgIC8vIGFzIGEgcmVsYXRpdmUgdGltZVNoaWZ0IHZhbHVlLlxuICAgICAgY29uc3QgY29udmVydFRpbWVTaGlmdFByZXZpZXdUb1dhbGxDbG9ja1RpbWUgPSAodGFyZ2V0VGltZVNoaWZ0OiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGltZVNoaWZ0ID0gdGhpcy5wbGF5ZXIuZ2V0VGltZVNoaWZ0KCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gdGhpcy5wbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKTtcblxuICAgICAgICBjb25zdCB3YWxsQ2xvY2tUaW1lT2ZMaXZlRWRnZSA9IGN1cnJlbnRUaW1lIC0gY3VycmVudFRpbWVTaGlmdDtcbiAgICAgICAgcmV0dXJuIHdhbGxDbG9ja1RpbWVPZkxpdmVFZGdlICsgdGFyZ2V0VGltZVNoaWZ0O1xuICAgICAgfTtcblxuICAgICAgY29uc3Qgd2FsbENsb2NrVGltZSA9IGNvbnZlcnRUaW1lU2hpZnRQcmV2aWV3VG9XYWxsQ2xvY2tUaW1lKHRpbWVTaGlmdFByZXZpZXcpO1xuICAgICAgdGhpcy5zZXRUaHVtYm5haWwodGhpcy5wbGF5ZXIuZ2V0VGh1bWJuYWlsKHdhbGxDbG9ja1RpbWUpKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdGltZSA9IHRoaXMucGxheWVyLmdldER1cmF0aW9uKCkgKiAoYXJncy5wb3NpdGlvbiAvIDEwMCk7XG4gICAgICB0aGlzLnNldFRpbWUodGltZSk7XG5cbiAgICAgIGNvbnN0IHNlZWthYmxlUmFuZ2VTdGFydCA9IFBsYXllclV0aWxzLmdldFNlZWthYmxlUmFuZ2VTdGFydCh0aGlzLnBsYXllciwgMCk7XG4gICAgICBjb25zdCBhYnNvbHV0ZVNlZWtUYXJnZXQgPSB0aW1lICsgc2Vla2FibGVSYW5nZVN0YXJ0O1xuICAgICAgdGhpcy5zZXRUaHVtYm5haWwodGhpcy5wbGF5ZXIuZ2V0VGh1bWJuYWlsKGFic29sdXRlU2Vla1RhcmdldCkpO1xuICAgIH1cblxuICAgIGlmIChhcmdzLm1hcmtlcikge1xuICAgICAgdGhpcy5zZXRUaXRsZVRleHQoYXJncy5tYXJrZXIubWFya2VyLnRpdGxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRUaXRsZVRleHQobnVsbCk7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIENTUyBjbGFzc2VzIGZyb20gcHJldmlvdXMgbWFya2VyXG4gICAgaWYgKHRoaXMuYXBwbGllZE1hcmtlckNzc0NsYXNzZXMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3ModGhpcy5hcHBsaWVkTWFya2VyQ3NzQ2xhc3Nlcy5qb2luKCcgJykpO1xuICAgICAgdGhpcy5hcHBsaWVkTWFya2VyQ3NzQ2xhc3NlcyA9IFtdO1xuICAgIH1cblxuICAgIC8vIEFkZCBDU1MgY2xhc3NlcyBvZiBjdXJyZW50IG1hcmtlclxuICAgIGlmIChhcmdzLm1hcmtlcikge1xuICAgICAgY29uc3QgY3NzQ2xhc3NlcyA9IChhcmdzLm1hcmtlci5tYXJrZXIuY3NzQ2xhc3NlcyB8fCBbXSkubWFwKGNzc0NsYXNzID0+IHRoaXMucHJlZml4Q3NzKGNzc0NsYXNzKSk7XG4gICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hZGRDbGFzcyhjc3NDbGFzc2VzLmpvaW4oJyAnKSk7XG4gICAgICB0aGlzLmFwcGxpZWRNYXJrZXJDc3NDbGFzc2VzID0gY3NzQ2xhc3NlcztcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHMgYXJiaXRyYXJ5IHRleHQgb24gdGhlIGxhYmVsLlxuICAgKiBAcGFyYW0gdGV4dCB0aGUgdGV4dCB0byBzaG93IG9uIHRoZSBsYWJlbFxuICAgKi9cbiAgc2V0VGV4dCh0ZXh0OiBzdHJpbmcpIHtcbiAgICB0aGlzLnRpbWVMYWJlbC5zZXRUZXh0KHRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgYSB0aW1lIHRvIGJlIGRpc3BsYXllZCBvbiB0aGUgbGFiZWwuXG4gICAqIEBwYXJhbSBzZWNvbmRzIHRoZSB0aW1lIGluIHNlY29uZHMgdG8gZGlzcGxheSBvbiB0aGUgbGFiZWxcbiAgICovXG4gIHNldFRpbWUoc2Vjb25kczogbnVtYmVyKSB7XG4gICAgdGhpcy5zZXRUZXh0KFN0cmluZ1V0aWxzLnNlY29uZHNUb1RpbWUoc2Vjb25kcywgdGhpcy50aW1lRm9ybWF0KSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgdGV4dCBvbiB0aGUgdGl0bGUgbGFiZWwuXG4gICAqIEBwYXJhbSB0ZXh0IHRoZSB0ZXh0IHRvIHNob3cgb24gdGhlIGxhYmVsXG4gICAqL1xuICBzZXRUaXRsZVRleHQodGV4dCA9ICcnKSB7XG4gICAgdGhpcy50aXRsZUxhYmVsLnNldFRleHQodGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBvciByZW1vdmVzIGEgdGh1bWJuYWlsIG9uIHRoZSBsYWJlbC5cbiAgICogQHBhcmFtIHRodW1ibmFpbCB0aGUgdGh1bWJuYWlsIHRvIGRpc3BsYXkgb24gdGhlIGxhYmVsIG9yIG51bGwgdG8gcmVtb3ZlIGEgZGlzcGxheWVkIHRodW1ibmFpbFxuICAgKi9cbiAgc2V0VGh1bWJuYWlsKHRodW1ibmFpbDogVGh1bWJuYWlsID0gbnVsbCkge1xuICAgIGxldCB0aHVtYm5haWxFbGVtZW50ID0gdGhpcy50aHVtYm5haWwuZ2V0RG9tRWxlbWVudCgpO1xuXG4gICAgaWYgKHRodW1ibmFpbCA9PSBudWxsKSB7XG4gICAgICB0aHVtYm5haWxFbGVtZW50LmNzcyh7XG4gICAgICAgICdiYWNrZ3JvdW5kLWltYWdlJzogbnVsbCxcbiAgICAgICAgJ2Rpc3BsYXknOiBudWxsLFxuICAgICAgICAnd2lkdGgnOiBudWxsLFxuICAgICAgICAnaGVpZ2h0JzogbnVsbCxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIFdlIHVzZSB0aGUgdGh1bWJuYWlsIGltYWdlIGxvYWRlciB0byBtYWtlIHN1cmUgdGhlIHRodW1ibmFpbCBpcyBsb2FkZWQgYW5kIGl0J3Mgc2l6ZSBpcyBrbm93biBiZWZvcmUgYmUgY2FuXG4gICAgICAvLyBjYWxjdWxhdGUgdGhlIENTUyBwcm9wZXJ0aWVzIGFuZCBzZXQgdGhlbSBvbiB0aGUgZWxlbWVudC5cbiAgICAgIHRoaXMudGh1bWJuYWlsSW1hZ2VMb2FkZXIubG9hZCh0aHVtYm5haWwudXJsLCAodXJsLCB3aWR0aCwgaGVpZ2h0KSA9PiB7XG4gICAgICAgIC8vIGNhbiBiZSBjaGVja2VkIGxpa2UgdGhhdCBiZWNhdXNlIHgveS93L2ggYXJlIGVpdGhlciBhbGwgcHJlc2VudCBvciBub25lXG4gICAgICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9tZWRpYS1mcmFncy8jbmFtaW5nLXNwYWNlXG4gICAgICAgIGlmICh0aHVtYm5haWwueCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGh1bWJuYWlsRWxlbWVudC5jc3ModGhpcy50aHVtYm5haWxDc3NTcHJpdGUodGh1bWJuYWlsLCB3aWR0aCwgaGVpZ2h0KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGh1bWJuYWlsRWxlbWVudC5jc3ModGhpcy50aHVtYm5haWxDc3NTaW5nbGVJbWFnZSh0aHVtYm5haWwsIHdpZHRoLCBoZWlnaHQpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB0aHVtYm5haWxDc3NTcHJpdGUodGh1bWJuYWlsOiBUaHVtYm5haWwsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogQ3NzUHJvcGVydGllcyB7XG4gICAgbGV0IHRodW1ibmFpbENvdW50WCA9IHdpZHRoIC8gdGh1bWJuYWlsLndpZHRoO1xuICAgIGxldCB0aHVtYm5haWxDb3VudFkgPSBoZWlnaHQgLyB0aHVtYm5haWwuaGVpZ2h0O1xuXG4gICAgbGV0IHRodW1ibmFpbEluZGV4WCA9IHRodW1ibmFpbC54IC8gdGh1bWJuYWlsLndpZHRoO1xuICAgIGxldCB0aHVtYm5haWxJbmRleFkgPSB0aHVtYm5haWwueSAvIHRodW1ibmFpbC5oZWlnaHQ7XG5cbiAgICBsZXQgc2l6ZVggPSAxMDAgKiB0aHVtYm5haWxDb3VudFg7XG4gICAgbGV0IHNpemVZID0gMTAwICogdGh1bWJuYWlsQ291bnRZO1xuXG4gICAgbGV0IG9mZnNldFggPSAxMDAgKiB0aHVtYm5haWxJbmRleFg7XG4gICAgbGV0IG9mZnNldFkgPSAxMDAgKiB0aHVtYm5haWxJbmRleFk7XG5cbiAgICBsZXQgYXNwZWN0UmF0aW8gPSAxIC8gdGh1bWJuYWlsLndpZHRoICogdGh1bWJuYWlsLmhlaWdodDtcblxuICAgIC8vIFRoZSB0aHVtYm5haWwgc2l6ZSBpcyBzZXQgYnkgc2V0dGluZyB0aGUgQ1NTICd3aWR0aCcgYW5kICdwYWRkaW5nLWJvdHRvbScgcHJvcGVydGllcy4gJ3BhZGRpbmctYm90dG9tJyBpc1xuICAgIC8vIHVzZWQgYmVjYXVzZSBpdCBpcyByZWxhdGl2ZSB0byB0aGUgd2lkdGggYW5kIGNhbiBiZSB1c2VkIHRvIHNldCB0aGUgYXNwZWN0IHJhdGlvIG9mIHRoZSB0aHVtYm5haWwuXG4gICAgLy8gQSBkZWZhdWx0IHZhbHVlIGZvciB3aWR0aCBpcyBzZXQgaW4gdGhlIHN0eWxlc2hlZXQgYW5kIGNhbiBiZSBvdmVyd3JpdHRlbiBmcm9tIHRoZXJlIG9yIGFueXdoZXJlIGVsc2UuXG4gICAgcmV0dXJuIHtcbiAgICAgICdkaXNwbGF5JzogJ2luaGVyaXQnLFxuICAgICAgJ2JhY2tncm91bmQtaW1hZ2UnOiBgdXJsKCR7dGh1bWJuYWlsLnVybH0pYCxcbiAgICAgICdwYWRkaW5nLWJvdHRvbSc6IGAkezEwMCAqIGFzcGVjdFJhdGlvfSVgLFxuICAgICAgJ2JhY2tncm91bmQtc2l6ZSc6IGAke3NpemVYfSUgJHtzaXplWX0lYCxcbiAgICAgICdiYWNrZ3JvdW5kLXBvc2l0aW9uJzogYC0ke29mZnNldFh9JSAtJHtvZmZzZXRZfSVgLFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIHRodW1ibmFpbENzc1NpbmdsZUltYWdlKHRodW1ibmFpbDogVGh1bWJuYWlsLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IENzc1Byb3BlcnRpZXMge1xuICAgIGxldCBhc3BlY3RSYXRpbyA9IDEgLyB3aWR0aCAqIGhlaWdodDtcblxuICAgIHJldHVybiB7XG4gICAgICAnZGlzcGxheSc6ICdpbmhlcml0JyxcbiAgICAgICdiYWNrZ3JvdW5kLWltYWdlJzogYHVybCgke3RodW1ibmFpbC51cmx9KWAsXG4gICAgICAncGFkZGluZy1ib3R0b20nOiBgJHsxMDAgKiBhc3BlY3RSYXRpb30lYCxcbiAgICAgICdiYWNrZ3JvdW5kLXNpemUnOiBgMTAwJSAxMDAlYCxcbiAgICAgICdiYWNrZ3JvdW5kLXBvc2l0aW9uJzogYDAgMGAsXG4gICAgfTtcbiAgfVxuXG4gIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgc3VwZXIucmVsZWFzZSgpO1xuXG4gICAgdGhpcy51aU1hbmFnZXIub25TZWVrUHJldmlldy51bnN1YnNjcmliZSh0aGlzLmhhbmRsZVNlZWtQcmV2aWV3KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTGlzdFNlbGVjdG9yLCBMaXN0U2VsZWN0b3JDb25maWcgfSBmcm9tICcuL2xpc3RzZWxlY3Rvcic7XG5pbXBvcnQgeyBET00gfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBVSUluc3RhbmNlTWFuYWdlciB9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBVSUNvbnRhaW5lciB9IGZyb20gJy4vdWljb250YWluZXInO1xuaW1wb3J0IHsgUGxheWVyVXRpbHMgfSBmcm9tICcuLi9wbGF5ZXJ1dGlscyc7XG5pbXBvcnQgeyBWaWV3TW9kZSB9IGZyb20gJy4vY29tcG9uZW50JztcblxuY29uc3QgRG9jdW1lbnREcm9wZG93bkNsb3NlZEV2ZW50cyA9IFtcbiAgJ21vdXNlbW92ZScsXG4gICdtb3VzZWVudGVyJyxcbiAgJ21vdXNlbGVhdmUnLFxuICAndG91Y2hzdGFydCcsXG4gICd0b3VjaG1vdmUnLFxuICAndG91Y2hlbmQnLFxuICAncG9pbnRlcm1vdmUnLFxuICAnY2xpY2snLFxuICAna2V5ZG93bicsXG4gICdrZXlwcmVzcycsXG4gICdrZXl1cCcsXG4gICdibHVyJyxcbl07XG5cbmNvbnN0IFNlbGVjdERyb3Bkb3duQ2xvc2VkRXZlbnRzID0gW1xuICAnY2hhbmdlJyxcbiAgJ2tleXVwJyxcbiAgJ21vdXNldXAnLFxuXTtcblxuY29uc3QgRHJvcGRvd25PcGVuZWRFdmVudHM6IFtzdHJpbmcsIChldmVudDogRXZlbnQpID0+IGJvb2xlYW5dW10gPSBbXG4gIFsnY2xpY2snLCAoKSA9PiB0cnVlXSxcbiAgWydrZXlkb3duJywgKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiBbJyAnLCAnQXJyb3dVcCcsICdBcnJvd0Rvd24nXS5pbmNsdWRlcyhldmVudC5rZXkpXSxcbiAgWydtb3VzZWRvd24nLCAoKSA9PiB0cnVlXSxcbl07XG5cbmNvbnN0IFRpbWVvdXQgPSAxMDA7XG5cbi8qKlxuICogQSBzaW1wbGUgc2VsZWN0IGJveCBwcm92aWRpbmcgdGhlIHBvc3NpYmlsaXR5IHRvIHNlbGVjdCBhIHNpbmdsZSBpdGVtIG91dCBvZiBhIGxpc3Qgb2YgYXZhaWxhYmxlIGl0ZW1zLlxuICpcbiAqIERPTSBleGFtcGxlOlxuICogPGNvZGU+XG4gKiAgICAgPHNlbGVjdCBjbGFzcz0ndWktc2VsZWN0Ym94Jz5cbiAqICAgICAgICAgPG9wdGlvbiB2YWx1ZT0na2V5Jz5sYWJlbDwvb3B0aW9uPlxuICogICAgICAgICAuLi5cbiAqICAgICA8L3NlbGVjdD5cbiAqIDwvY29kZT5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29tcG9uZW50c1xuICovXG5cbmV4cG9ydCBjbGFzcyBTZWxlY3RCb3ggZXh0ZW5kcyBMaXN0U2VsZWN0b3I8TGlzdFNlbGVjdG9yQ29uZmlnPiB7XG4gIHByaXZhdGUgc2VsZWN0RWxlbWVudDogRE9NIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIGRyb3Bkb3duQ2xvc2VMaXN0ZW5lclRpbWVvdXRJZCA9IDA7XG4gIHByaXZhdGUgcmVtb3ZlRHJvcGRvd25DbG9zZUxpc3RlbmVycyA9ICgpID0+IHt9O1xuICBwcml2YXRlIHVpQ29udGFpbmVyOiBVSUNvbnRhaW5lciB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSByZW1vdmVEcm9wZG93bk9wZW5lZExpc3RlbmVycyA9ICgpID0+IHt9O1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogTGlzdFNlbGVjdG9yQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1zZWxlY3Rib3gnLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0b0RvbUVsZW1lbnQoKTogRE9NIHtcbiAgICB0aGlzLnNlbGVjdEVsZW1lbnQgPSBuZXcgRE9NKCdzZWxlY3QnLCB7XG4gICAgICAnaWQnOiB0aGlzLmNvbmZpZy5pZCxcbiAgICAgICdjbGFzcyc6IHRoaXMuZ2V0Q3NzQ2xhc3NlcygpLFxuICAgICAgJ2FyaWEtbGFiZWwnOiBpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24odGhpcy5jb25maWcuYXJpYUxhYmVsKSxcbiAgICB9LCB0aGlzKTtcblxuICAgIHRoaXMub25EaXNhYmxlZC5zdWJzY3JpYmUodGhpcy5jbG9zZURyb3Bkb3duKTtcbiAgICB0aGlzLm9uSGlkZS5zdWJzY3JpYmUodGhpcy5jbG9zZURyb3Bkb3duKTtcbiAgICB0aGlzLmFkZERyb3Bkb3duT3BlbmVkTGlzdGVuZXJzKCk7XG4gICAgdGhpcy51cGRhdGVEb21JdGVtcygpO1xuXG4gICAgdGhpcy5zZWxlY3RFbGVtZW50Lm9uKCdjaGFuZ2UnLCB0aGlzLm9uQ2hhbmdlKTtcblxuICAgIHJldHVybiB0aGlzLnNlbGVjdEVsZW1lbnQ7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuICAgIHRoaXMudWlDb250YWluZXIgPSB1aW1hbmFnZXIuZ2V0VUkoKTtcbiAgICB0aGlzLnVpQ29udGFpbmVyPy5vblBsYXllclN0YXRlQ2hhbmdlKCkuc3Vic2NyaWJlKHRoaXMub25QbGF5ZXJTdGF0ZUNoYW5nZSk7XG4gIH1cblxuICBwcml2YXRlIHJlYWRvbmx5IG9uQ2hhbmdlID0gKCkgPT4ge1xuICAgIGxldCB2YWx1ZSA9IHRoaXMuc2VsZWN0RWxlbWVudC52YWwoKTtcbiAgICB0aGlzLm9uSXRlbVNlbGVjdGVkRXZlbnQodmFsdWUsIGZhbHNlKTtcbiAgfTtcblxuICBwcml2YXRlIGdldFNlbGVjdEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0RWxlbWVudD8uZ2V0KCk/LlswXTtcbiAgfVxuXG4gIHByb3RlY3RlZCB1cGRhdGVEb21JdGVtcyhzZWxlY3RlZFZhbHVlOiBzdHJpbmcgPSBudWxsKSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0RWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRGVsZXRlIGFsbCBjaGlsZHJlblxuICAgIHRoaXMuc2VsZWN0RWxlbWVudC5lbXB0eSgpO1xuXG4gICAgLy8gQWRkIHVwZGF0ZWQgY2hpbGRyZW5cbiAgICBmb3IgKGxldCBpdGVtIG9mIHRoaXMuaXRlbXMpIHtcbiAgICAgIGxldCBvcHRpb25FbGVtZW50ID0gbmV3IERPTSgnb3B0aW9uJywge1xuICAgICAgICAndmFsdWUnOiBTdHJpbmcoaXRlbS5rZXkpLFxuICAgICAgfSkuaHRtbChpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24oaXRlbS5sYWJlbCkpO1xuXG4gICAgICBpZiAoaXRlbS5rZXkgPT09IFN0cmluZyhzZWxlY3RlZFZhbHVlKSkgeyAvLyBjb252ZXJ0IHNlbGVjdGVkVmFsdWUgdG8gc3RyaW5nIHRvIGNhdGNoICdudWxsJy9udWxsIGNhc2VcbiAgICAgICAgb3B0aW9uRWxlbWVudC5hdHRyKCdzZWxlY3RlZCcsICdzZWxlY3RlZCcpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNlbGVjdEVsZW1lbnQuYXBwZW5kKG9wdGlvbkVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBvbkl0ZW1BZGRlZEV2ZW50KHZhbHVlOiBzdHJpbmcpIHtcbiAgICBzdXBlci5vbkl0ZW1BZGRlZEV2ZW50KHZhbHVlKTtcbiAgICB0aGlzLnVwZGF0ZURvbUl0ZW1zKHRoaXMuc2VsZWN0ZWRJdGVtKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkl0ZW1SZW1vdmVkRXZlbnQodmFsdWU6IHN0cmluZykge1xuICAgIHN1cGVyLm9uSXRlbVJlbW92ZWRFdmVudCh2YWx1ZSk7XG4gICAgdGhpcy51cGRhdGVEb21JdGVtcyh0aGlzLnNlbGVjdGVkSXRlbSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25JdGVtU2VsZWN0ZWRFdmVudCh2YWx1ZTogc3RyaW5nLCB1cGRhdGVEb21JdGVtczogYm9vbGVhbiA9IHRydWUpIHtcbiAgICBzdXBlci5vbkl0ZW1TZWxlY3RlZEV2ZW50KHZhbHVlKTtcbiAgICBpZiAodXBkYXRlRG9tSXRlbXMpIHtcbiAgICAgIHRoaXMudXBkYXRlRG9tSXRlbXModmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZWFkb25seSBjbG9zZURyb3Bkb3duID0gKCkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdCA9IHRoaXMuZ2V0U2VsZWN0RWxlbWVudCgpO1xuXG4gICAgaWYgKHNlbGVjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2VsZWN0LmJsdXIoKTtcbiAgfTtcblxuICBwcml2YXRlIHJlYWRvbmx5IG9uUGxheWVyU3RhdGVDaGFuZ2UgPSAoXzogVUlDb250YWluZXIsIHN0YXRlOiBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZSkgPT4ge1xuICAgIGlmIChbUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuSWRsZSwgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuRmluaXNoZWRdLmluY2x1ZGVzKHN0YXRlKSkge1xuICAgICAgdGhpcy5jbG9zZURyb3Bkb3duKCk7XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgb25Ecm9wZG93bk9wZW5lZCA9ICgpID0+IHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5kcm9wZG93bkNsb3NlTGlzdGVuZXJUaW1lb3V0SWQpO1xuXG4gICAgdGhpcy5kcm9wZG93bkNsb3NlTGlzdGVuZXJUaW1lb3V0SWQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB0aGlzLmFkZERyb3Bkb3duQ2xvc2VMaXN0ZW5lcnMoKSwgVGltZW91dCk7XG4gICAgdGhpcy5vblZpZXdNb2RlQ2hhbmdlZEV2ZW50KFZpZXdNb2RlLlBlcnNpc3RlbnQpO1xuICB9O1xuXG4gIHByaXZhdGUgb25Ecm9wZG93bkNsb3NlZCA9ICgpID0+IHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5kcm9wZG93bkNsb3NlTGlzdGVuZXJUaW1lb3V0SWQpO1xuXG4gICAgdGhpcy5yZW1vdmVEcm9wZG93bkNsb3NlTGlzdGVuZXJzKCk7XG4gICAgdGhpcy5vblZpZXdNb2RlQ2hhbmdlZEV2ZW50KFZpZXdNb2RlLlRlbXBvcmFyeSk7XG4gIH07XG5cbiAgcHJpdmF0ZSBhZGREcm9wZG93bkNsb3NlTGlzdGVuZXJzKCkge1xuICAgIHRoaXMucmVtb3ZlRHJvcGRvd25DbG9zZUxpc3RlbmVycygpO1xuXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuZHJvcGRvd25DbG9zZUxpc3RlbmVyVGltZW91dElkKTtcblxuICAgIERvY3VtZW50RHJvcGRvd25DbG9zZWRFdmVudHMuZm9yRWFjaChldmVudCA9PiBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCB0aGlzLm9uRHJvcGRvd25DbG9zZWQsIHRydWUpKTtcbiAgICBTZWxlY3REcm9wZG93bkNsb3NlZEV2ZW50cy5mb3JFYWNoKGV2ZW50ID0+IHRoaXMuc2VsZWN0RWxlbWVudC5vbihldmVudCwgdGhpcy5vbkRyb3Bkb3duQ2xvc2VkLCB0cnVlKSk7XG5cbiAgICB0aGlzLnJlbW92ZURyb3Bkb3duQ2xvc2VMaXN0ZW5lcnMgPSAoKSA9PiB7XG4gICAgICBEb2N1bWVudERyb3Bkb3duQ2xvc2VkRXZlbnRzLmZvckVhY2goZXZlbnQgPT4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgdGhpcy5vbkRyb3Bkb3duQ2xvc2VkLCB0cnVlKSk7XG4gICAgICBTZWxlY3REcm9wZG93bkNsb3NlZEV2ZW50cy5mb3JFYWNoKGV2ZW50ID0+IHRoaXMuc2VsZWN0RWxlbWVudC5vZmYoZXZlbnQsIHRoaXMub25Ecm9wZG93bkNsb3NlZCwgdHJ1ZSkpO1xuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGFkZERyb3Bkb3duT3BlbmVkTGlzdGVuZXJzKCkge1xuICAgIGNvbnN0IHJlbW92ZUxpc3RlbmVyRnVuY3Rpb25zOiAoKCkgPT4gdm9pZClbXSA9IFtdO1xuXG4gICAgdGhpcy5yZW1vdmVEcm9wZG93bk9wZW5lZExpc3RlbmVycygpO1xuXG4gICAgZm9yIChjb25zdCBbZXZlbnQsIGZpbHRlcl0gb2YgRHJvcGRvd25PcGVuZWRFdmVudHMpIHtcbiAgICAgIGNvbnN0IGxpc3RlbmVyID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgICBpZiAoZmlsdGVyKGV2ZW50KSkge1xuICAgICAgICAgIHRoaXMub25Ecm9wZG93bk9wZW5lZCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZW1vdmVMaXN0ZW5lckZ1bmN0aW9ucy5wdXNoKCgpID0+IHRoaXMuc2VsZWN0RWxlbWVudC5vZmYoZXZlbnQsIGxpc3RlbmVyLCB0cnVlKSk7XG4gICAgICB0aGlzLnNlbGVjdEVsZW1lbnQub24oZXZlbnQsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlbW92ZURyb3Bkb3duT3BlbmVkTGlzdGVuZXJzID0gKCkgPT4ge1xuICAgICAgZm9yIChjb25zdCByZW1vdmUgb2YgcmVtb3ZlTGlzdGVuZXJGdW5jdGlvbnMpIHtcbiAgICAgICAgcmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHJlbGVhc2UoKSB7XG4gICAgc3VwZXIucmVsZWFzZSgpO1xuXG4gICAgdGhpcy5yZW1vdmVEcm9wZG93bkNsb3NlTGlzdGVuZXJzKCk7XG4gICAgdGhpcy5yZW1vdmVEcm9wZG93bk9wZW5lZExpc3RlbmVycygpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmRyb3Bkb3duQ2xvc2VMaXN0ZW5lclRpbWVvdXRJZCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbnRhaW5lciwgQ29udGFpbmVyQ29uZmlnIH0gZnJvbSAnLi9jb250YWluZXInO1xuaW1wb3J0IHsgU2VsZWN0Qm94IH0gZnJvbSAnLi9zZWxlY3Rib3gnO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgVGltZW91dCB9IGZyb20gJy4uL3RpbWVvdXQnO1xuaW1wb3J0IHsgRXZlbnQsIEV2ZW50RGlzcGF0Y2hlciwgTm9BcmdzIH0gZnJvbSAnLi4vZXZlbnRkaXNwYXRjaGVyJztcbmltcG9ydCB7IFNldHRpbmdzUGFuZWxQYWdlIH0gZnJvbSAnLi9zZXR0aW5nc3BhbmVscGFnZSc7XG5pbXBvcnQgeyBTZXR0aW5nc1BhbmVsSXRlbSB9IGZyb20gJy4vc2V0dGluZ3NwYW5lbGl0ZW0nO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IENvbXBvbmVudCwgQ29tcG9uZW50Q29uZmlnIH0gZnJvbSAnLi9jb21wb25lbnQnO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIGZvciBhIHtAbGluayBTZXR0aW5nc1BhbmVsfS5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29uZmlnc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFNldHRpbmdzUGFuZWxDb25maWcgZXh0ZW5kcyBDb250YWluZXJDb25maWcge1xuICAvKipcbiAgICogVGhlIGRlbGF5IGluIG1pbGxpc2Vjb25kcyBhZnRlciB3aGljaCB0aGUgc2V0dGluZ3MgcGFuZWwgd2lsbCBiZSBoaWRkZW4gd2hlbiB0aGVyZSBpcyBubyB1c2VyIGludGVyYWN0aW9uLlxuICAgKiBTZXQgdG8gLTEgdG8gZGlzYWJsZSBhdXRvbWF0aWMgaGlkaW5nLlxuICAgKiBEZWZhdWx0OiAzIHNlY29uZHMgKDMwMDApXG4gICAqL1xuICBoaWRlRGVsYXk/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEZsYWcgdG8gc3BlY2lmeSBpZiB0aGVyZSBzaG91bGQgYmUgYW4gYW5pbWF0aW9uIHdoZW4gc3dpdGNoaW5nIFNldHRpbmdzUGFuZWxQYWdlcy5cbiAgICogRGVmYXVsdDogdHJ1ZVxuICAgKi9cbiAgcGFnZVRyYW5zaXRpb25BbmltYXRpb24/OiBib29sZWFuO1xufVxuXG5lbnVtIE5hdmlnYXRpb25EaXJlY3Rpb24ge1xuICBGb3J3YXJkcyxcbiAgQmFja3dhcmRzLFxufVxuXG4vKipcbiAqIEEgcGFuZWwgY29udGFpbmluZyBhIGxpc3Qgb2Yge0BsaW5rIFNldHRpbmdzUGFuZWxQYWdlIGl0ZW1zfS5cbiAqXG4gKiBUbyBjb25maWd1cmUgcGFnZXMganVzdCBwYXNzIHRoZW0gaW4gdGhlIGNvbXBvbmVudHMgYXJyYXkuXG4gKlxuICogRXhhbXBsZTpcbiAqICBsZXQgc2V0dGluZ3NQYW5lbCA9IG5ldyBTZXR0aW5nc1BhbmVsKHtcbiAqICAgIGhpZGRlbjogdHJ1ZSxcbiAqICB9KTtcbiAqXG4gKiAgbGV0IHNldHRpbmdzUGFuZWxQYWdlID0gbmV3IFNldHRpbmdzUGFuZWxQYWdlKHtcbiAqICAgIGNvbXBvbmVudHM6IFvigKZdXG4gKiAgfSk7XG4gKlxuICogIGxldCBzZWNvbmRTZXR0aW5nc1BhbmVsUGFnZSA9IG5ldyBTZXR0aW5nc1BhbmVsUGFnZSh7XG4gKiAgICBjb21wb25lbnRzOiBb4oCmXVxuICogIH0pO1xuICpcbiAqICBzZXR0aW5nc1BhbmVsLmFkZENvbXBvbmVudChzZXR0aW5nc1BhbmVsUGFnZSk7XG4gKiAgc2V0dGluZ3NQYW5lbC5hZGRDb21wb25lbnQoc2Vjb25kU2V0dGluZ3NQYW5lbFBhZ2UpO1xuICpcbiAqIEZvciBhbiBleGFtcGxlIGhvdyB0byBuYXZpZ2F0ZSBiZXR3ZWVuIHBhZ2VzIEBzZWUgU2V0dGluZ3NQYW5lbFBhZ2VOYXZpZ2F0b3JCdXR0b25cbiAqXG4gKiBAY2F0ZWdvcnkgQ29tcG9uZW50c1xuICovXG5leHBvcnQgY2xhc3MgU2V0dGluZ3NQYW5lbCBleHRlbmRzIENvbnRhaW5lcjxTZXR0aW5nc1BhbmVsQ29uZmlnPiB7XG5cbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ0xBU1NfQUNUSVZFX1BBR0UgPSAnYWN0aXZlJztcblxuICAvLyBuYXZpZ2F0aW9uIGhhbmRsaW5nXG4gIHByaXZhdGUgYWN0aXZlUGFnZTogU2V0dGluZ3NQYW5lbFBhZ2U7XG4gIHByaXZhdGUgbmF2aWdhdGlvblN0YWNrOiBTZXR0aW5nc1BhbmVsUGFnZVtdID0gW107XG5cbiAgcHJpdmF0ZSBzZXR0aW5nc1BhbmVsRXZlbnRzID0ge1xuICAgIG9uU2V0dGluZ3NTdGF0ZUNoYW5nZWQ6IG5ldyBFdmVudERpc3BhdGNoZXI8U2V0dGluZ3NQYW5lbCwgTm9BcmdzPigpLFxuICB9O1xuXG4gIHByaXZhdGUgaGlkZVRpbWVvdXQ6IFRpbWVvdXQ7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTZXR0aW5nc1BhbmVsQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktc2V0dGluZ3MtcGFuZWwnLFxuICAgICAgaGlkZURlbGF5OiAzMDAwLFxuICAgICAgcGFnZVRyYW5zaXRpb25BbmltYXRpb246IHRydWUsXG4gICAgfSBhcyBTZXR0aW5nc1BhbmVsQ29uZmlnLCB0aGlzLmNvbmZpZyk7XG5cbiAgICB0aGlzLmFjdGl2ZVBhZ2UgPSB0aGlzLmdldFJvb3RQYWdlKCk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbGV0IGNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG5cbiAgICB1aW1hbmFnZXIub25Db250cm9sc0hpZGUuc3Vic2NyaWJlKCgpID0+IHRoaXMuaGlkZUhvdmVyZWRTZWxlY3RCb3hlcygpKTtcbiAgICB1aW1hbmFnZXIub25Db21wb25lbnRWaWV3TW9kZUNoYW5nZWQuc3Vic2NyaWJlKChfLCB7IG1vZGUgfSkgPT4gdGhpcy50cmFja0NvbXBvbmVudFZpZXdNb2RlKG1vZGUpKTtcblxuICAgIGlmIChjb25maWcuaGlkZURlbGF5ID4gLTEpIHtcbiAgICAgIHRoaXMuaGlkZVRpbWVvdXQgPSBuZXcgVGltZW91dChjb25maWcuaGlkZURlbGF5LCAoKSA9PiB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB0aGlzLmhpZGVIb3ZlcmVkU2VsZWN0Qm94ZXMoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkub24oJ21vdXNlZW50ZXInLCAoKSA9PiB7XG4gICAgICAgIC8vIE9uIG1vdXNlIGVudGVyIGNsZWFyIHRoZSB0aW1lb3V0XG4gICAgICAgIHRoaXMuaGlkZVRpbWVvdXQuY2xlYXIoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkub24oJ21vdXNlbGVhdmUnLCAoKSA9PiB7XG4gICAgICAgIC8vIE9uIG1vdXNlIGxlYXZlIGFjdGl2YXRlIHRoZSB0aW1lb3V0XG4gICAgICAgIHRoaXMuaGlkZVRpbWVvdXQucmVzZXQoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkub24oJ2ZvY3VzaW4nLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuaGlkZVRpbWVvdXQuY2xlYXIoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkub24oJ2ZvY3Vzb3V0JywgKCkgPT4ge1xuICAgICAgICB0aGlzLmhpZGVUaW1lb3V0LnJlc2V0KCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLm9uSGlkZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgaWYgKGNvbmZpZy5oaWRlRGVsYXkgPiAtMSkge1xuICAgICAgICAvLyBDbGVhciB0aW1lb3V0IHdoZW4gaGlkZGVuIGZyb20gb3V0c2lkZVxuICAgICAgICB0aGlzLmhpZGVUaW1lb3V0LmNsZWFyKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNpbmNlIHdlIGRvbid0IHJlc2V0IHRoZSBhY3R1YWwgbmF2aWdhdGlvbiBoZXJlIHdlIG5lZWQgdG8gc2ltdWxhdGUgYSBvbkluYWN0aXZlIGV2ZW50IGluIGNhc2Ugc29tZSBwYW5lbFxuICAgICAgLy8gbmVlZHMgdG8gZG8gc29tZXRoaW5nIHdoZW4gdGhleSBiZWNvbWUgaW52aXNpYmxlIC8gaW5hY3RpdmUuXG4gICAgICB0aGlzLmFjdGl2ZVBhZ2Uub25JbmFjdGl2ZUV2ZW50KCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uU2hvdy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgLy8gUmVzZXQgbmF2aWdhdGlvbiB3aGVuIHRlIHBhbmVsIGdldHMgdmlzaWJsZSB0byBhdm9pZCBhIHdlaXJkIGFuaW1hdGlvbiB3aGVuIGhpZGluZ1xuICAgICAgdGhpcy5yZXNldE5hdmlnYXRpb24odHJ1ZSk7XG4gICAgICAvLyBTaW5jZSB3ZSBkb24ndCBuZWVkIHRvIG5hdmlnYXRlIHRvIHRoZSByb290IHBhZ2UgYWdhaW4gd2UgbmVlZCB0byBmaXJlIHRoZSBvbkFjdGl2ZSBldmVudCB3aGVuIHRoZSBzZXR0aW5nc1xuICAgICAgLy8gcGFuZWwgZ2V0cyB2aXNpYmxlLlxuICAgICAgdGhpcy5hY3RpdmVQYWdlLm9uQWN0aXZlRXZlbnQoKTtcblxuICAgICAgaWYgKGNvbmZpZy5oaWRlRGVsYXkgPiAtMSkge1xuICAgICAgICAvLyBBY3RpdmF0ZSB0aW1lb3V0IHdoZW4gc2hvd25cbiAgICAgICAgdGhpcy5oaWRlVGltZW91dC5zdGFydCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gcGFzcyBldmVudCBmcm9tIHJvb3QgcGFnZSB0aHJvdWdoXG4gICAgdGhpcy5nZXRSb290UGFnZSgpLm9uU2V0dGluZ3NTdGF0ZUNoYW5nZWQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMub25TZXR0aW5nc1N0YXRlQ2hhbmdlZEV2ZW50KCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnVwZGF0ZUFjdGl2ZVBhZ2VDbGFzcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgYWN0aXZlIC8gdmlzaWJsZSBwYWdlXG4gICAqIEByZXR1cm4ge1NldHRpbmdzUGFuZWxQYWdlfVxuICAgKi9cbiAgZ2V0QWN0aXZlUGFnZSgpOiBTZXR0aW5nc1BhbmVsUGFnZSB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlUGFnZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZVxuICAgKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIHNldEFjdGl2ZVBhZ2V9IGluc3RlYWRcbiAgICogQHBhcmFtIGluZGV4XG4gICAqL1xuICBzZXRBY3RpdmVQYWdlSW5kZXgoaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuc2V0QWN0aXZlUGFnZSh0aGlzLmdldFBhZ2VzKClbaW5kZXhdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIHRoZSBwYXNzZWQgcGFnZSB0byB0aGUgbmF2aWdhdGlvbiBzdGFjayBhbmQgbWFrZXMgaXQgdmlzaWJsZS5cbiAgICogVXNlIHtAbGluayBwb3BTZXR0aW5nc1BhbmVsUGFnZX0gdG8gbmF2aWdhdGUgYmFja3dhcmRzLlxuICAgKlxuICAgKiBSZXN1bHRzIGluIG5vLW9wIGlmIHRoZSB0YXJnZXQgcGFnZSBpcyB0aGUgY3VycmVudCBwYWdlLlxuICAgKiBAcGFyYW0gdGFyZ2V0UGFnZVxuICAgKi9cbiAgc2V0QWN0aXZlUGFnZSh0YXJnZXRQYWdlOiBTZXR0aW5nc1BhbmVsUGFnZSk6IHZvaWQge1xuICAgIGlmICh0YXJnZXRQYWdlID09PSB0aGlzLmdldEFjdGl2ZVBhZ2UoKSkge1xuICAgICAgY29uc29sZS53YXJuKCdQYWdlIGlzIGFscmVhZHkgdGhlIGN1cnJlbnQgb25lIC4uLiBza2lwcGluZyBuYXZpZ2F0aW9uJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5uYXZpZ2F0ZVRvUGFnZShcbiAgICAgIHRhcmdldFBhZ2UsXG4gICAgICB0aGlzLmdldEFjdGl2ZVBhZ2UoKSxcbiAgICAgIE5hdmlnYXRpb25EaXJlY3Rpb24uRm9yd2FyZHMsXG4gICAgICAhKHRoaXMuY29uZmlnIGFzIFNldHRpbmdzUGFuZWxDb25maWcpLnBhZ2VUcmFuc2l0aW9uQW5pbWF0aW9uLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBuYXZpZ2F0aW9uIHN0YWNrIGJ5IG5hdmlnYXRpbmcgYmFjayB0byB0aGUgcm9vdCBwYWdlIGFuZCBkaXNwbGF5aW5nIGl0LlxuICAgKi9cbiAgcG9wVG9Sb290U2V0dGluZ3NQYW5lbFBhZ2UoKTogdm9pZCB7XG4gICAgdGhpcy5yZXNldE5hdmlnYXRpb24oKHRoaXMuY29uZmlnIGFzIFNldHRpbmdzUGFuZWxDb25maWcpLnBhZ2VUcmFuc2l0aW9uQW5pbWF0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHRoZSBjdXJyZW50IHBhZ2UgZnJvbSB0aGUgbmF2aWdhdGlvbiBzdGFjayBhbmQgbWFrZXMgdGhlIHByZXZpb3VzIG9uZSB2aXNpYmxlLlxuICAgKiBSZXN1bHRzIGluIGEgbm8tb3AgaWYgd2UgYXJlIGFscmVhZHkgb24gdGhlIHJvb3QgcGFnZS5cbiAgICovXG4gIHBvcFNldHRpbmdzUGFuZWxQYWdlKCkge1xuICAgIGlmICh0aGlzLm5hdmlnYXRpb25TdGFjay5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnNvbGUud2FybignQWxyZWFkeSBvbiB0aGUgcm9vdCBwYWdlIC4uLiBza2lwcGluZyBuYXZpZ2F0aW9uJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHRhcmdldFBhZ2UgPSB0aGlzLm5hdmlnYXRpb25TdGFja1t0aGlzLm5hdmlnYXRpb25TdGFjay5sZW5ndGggLSAyXTtcbiAgICAvLyBUaGUgcm9vdCBwYXJ0IGlzbid0IHBhcnQgb2YgdGhlIG5hdmlnYXRpb24gc3RhY2sgc28gaGFuZGxlIGl0IGV4cGxpY2l0bHkgaGVyZVxuICAgIGlmICghdGFyZ2V0UGFnZSkge1xuICAgICAgdGFyZ2V0UGFnZSA9IHRoaXMuZ2V0Um9vdFBhZ2UoKTtcbiAgICB9XG5cbiAgICB0aGlzLm5hdmlnYXRlVG9QYWdlKFxuICAgICAgdGFyZ2V0UGFnZSxcbiAgICAgIHRoaXMuYWN0aXZlUGFnZSxcbiAgICAgIE5hdmlnYXRpb25EaXJlY3Rpb24uQmFja3dhcmRzLFxuICAgICAgISh0aGlzLmNvbmZpZyBhcyBTZXR0aW5nc1BhbmVsQ29uZmlnKS5wYWdlVHJhbnNpdGlvbkFuaW1hdGlvbixcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGVyZSBhcmUgYWN0aXZlIHNldHRpbmdzIHdpdGhpbiB0aGUgcm9vdCBwYWdlIG9mIHRoZSBzZXR0aW5ncyBwYW5lbC5cbiAgICogQW4gYWN0aXZlIHNldHRpbmcgaXMgYSBzZXR0aW5nIHRoYXQgaXMgdmlzaWJsZSBhbmQgZW5hYmxlZCwgd2hpY2ggdGhlIHVzZXIgY2FuIGludGVyYWN0IHdpdGguXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZXJlIGFyZSBhY3RpdmUgc2V0dGluZ3MsIGZhbHNlIGlmIHRoZSBwYW5lbCBpcyBmdW5jdGlvbmFsbHkgZW1wdHkgdG8gYSB1c2VyXG4gICAqL1xuICByb290UGFnZUhhc0FjdGl2ZVNldHRpbmdzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmdldFJvb3RQYWdlKCkuaGFzQWN0aXZlU2V0dGluZ3MoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYWxsIGNvbmZpZ3VyZWQgcGFnZXNcbiAgICogQHJldHVybnMge1NldHRpbmdzUGFuZWxQYWdlW119XG4gICAqL1xuICBnZXRQYWdlcygpOiBTZXR0aW5nc1BhbmVsUGFnZVtdIHtcbiAgICByZXR1cm4gPFNldHRpbmdzUGFuZWxQYWdlW10+dGhpcy5jb25maWcuY29tcG9uZW50cy5maWx0ZXIoY29tcG9uZW50ID0+IGNvbXBvbmVudCBpbnN0YW5jZW9mIFNldHRpbmdzUGFuZWxQYWdlKTtcbiAgfVxuXG4gIGdldCBvblNldHRpbmdzU3RhdGVDaGFuZ2VkKCk6IEV2ZW50PFNldHRpbmdzUGFuZWwsIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLnNldHRpbmdzUGFuZWxFdmVudHMub25TZXR0aW5nc1N0YXRlQ2hhbmdlZC5nZXRFdmVudCgpO1xuICB9XG5cbiAgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBzdXBlci5yZWxlYXNlKCk7XG4gICAgaWYgKHRoaXMuaGlkZVRpbWVvdXQpIHtcbiAgICAgIHRoaXMuaGlkZVRpbWVvdXQuY2xlYXIoKTtcbiAgICB9XG4gIH1cblxuICAvLyBTdXBwb3J0IGFkZGluZyBzZXR0aW5nc1BhbmVsUGFnZXMgYWZ0ZXIgaW5pdGlhbGl6YXRpb25cbiAgYWRkQ29tcG9uZW50KGNvbXBvbmVudDogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4pIHtcbiAgICBpZiAodGhpcy5nZXRQYWdlcygpLmxlbmd0aCA9PT0gMCAmJiBjb21wb25lbnQgaW5zdGFuY2VvZiBTZXR0aW5nc1BhbmVsUGFnZSkge1xuICAgICAgdGhpcy5hY3RpdmVQYWdlID0gY29tcG9uZW50O1xuICAgIH1cbiAgICBzdXBlci5hZGRDb21wb25lbnQoY29tcG9uZW50KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzdXNwZW5kSGlkZVRpbWVvdXQoKSB7XG4gICAgdGhpcy5oaWRlVGltZW91dC5zdXNwZW5kKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVzdW1lSGlkZVRpbWVvdXQoKSB7XG4gICAgdGhpcy5oaWRlVGltZW91dC5yZXN1bWUodHJ1ZSk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUFjdGl2ZVBhZ2VDbGFzcygpOiB2b2lkIHtcbiAgICB0aGlzLmdldFBhZ2VzKCkuZm9yRWFjaCgocGFnZTogU2V0dGluZ3NQYW5lbFBhZ2UpID0+IHtcbiAgICAgIGlmIChwYWdlID09PSB0aGlzLmFjdGl2ZVBhZ2UpIHtcbiAgICAgICAgcGFnZS5nZXREb21FbGVtZW50KCkuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoU2V0dGluZ3NQYW5lbC5DTEFTU19BQ1RJVkVfUEFHRSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnZS5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoU2V0dGluZ3NQYW5lbC5DTEFTU19BQ1RJVkVfUEFHRSkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSByZXNldE5hdmlnYXRpb24ocmVzZXROYXZpZ2F0aW9uT25TaG93OiBib29sZWFuKTogdm9pZCB7XG4gICAgY29uc3Qgc291cmNlUGFnZSA9IHRoaXMuZ2V0QWN0aXZlUGFnZSgpO1xuICAgIGNvbnN0IHJvb3RQYWdlID0gdGhpcy5nZXRSb290UGFnZSgpO1xuICAgIGlmIChzb3VyY2VQYWdlKSB7XG4gICAgICAvLyBTaW5jZSB0aGUgb25JbmFjdGl2ZUV2ZW50IHdhcyBhbHJlYWR5IGZpcmVkIGluIHRoZSBvbkhpZGUgd2UgbmVlZCB0byBzdXBwcmVzcyBpdCBoZXJlXG4gICAgICBpZiAoIXJlc2V0TmF2aWdhdGlvbk9uU2hvdykge1xuICAgICAgICBzb3VyY2VQYWdlLm9uSW5hY3RpdmVFdmVudCgpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm5hdmlnYXRpb25TdGFjayA9IFtdO1xuICAgIHRoaXMuYW5pbWF0ZU5hdmlnYXRpb24ocm9vdFBhZ2UsIHNvdXJjZVBhZ2UsIHJlc2V0TmF2aWdhdGlvbk9uU2hvdyk7XG4gICAgdGhpcy5hY3RpdmVQYWdlID0gcm9vdFBhZ2U7XG4gICAgdGhpcy51cGRhdGVBY3RpdmVQYWdlQ2xhc3MoKTtcbiAgfVxuXG4gIHByaXZhdGUgbmF2aWdhdGVUb1BhZ2UoXG4gICAgdGFyZ2V0UGFnZTogU2V0dGluZ3NQYW5lbFBhZ2UsXG4gICAgc291cmNlUGFnZTogU2V0dGluZ3NQYW5lbFBhZ2UsXG4gICAgZGlyZWN0aW9uOiBOYXZpZ2F0aW9uRGlyZWN0aW9uLFxuICAgIHNraXBBbmltYXRpb246IGJvb2xlYW4sXG4gICk6IHZvaWQge1xuICAgIHRoaXMuYWN0aXZlUGFnZSA9IHRhcmdldFBhZ2U7XG5cbiAgICBpZiAoZGlyZWN0aW9uID09PSBOYXZpZ2F0aW9uRGlyZWN0aW9uLkZvcndhcmRzKSB7XG4gICAgICB0aGlzLm5hdmlnYXRpb25TdGFjay5wdXNoKHRhcmdldFBhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5hdmlnYXRpb25TdGFjay5wb3AoKTtcbiAgICB9XG5cbiAgICB0aGlzLmFuaW1hdGVOYXZpZ2F0aW9uKHRhcmdldFBhZ2UsIHNvdXJjZVBhZ2UsIHNraXBBbmltYXRpb24pO1xuXG4gICAgdGhpcy51cGRhdGVBY3RpdmVQYWdlQ2xhc3MoKTtcbiAgICB0YXJnZXRQYWdlLm9uQWN0aXZlRXZlbnQoKTtcbiAgICBzb3VyY2VQYWdlLm9uSW5hY3RpdmVFdmVudCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB0YXJnZXRQYWdlXG4gICAqIEBwYXJhbSBzb3VyY2VQYWdlXG4gICAqIEBwYXJhbSBza2lwQW5pbWF0aW9uIFRoaXMgaXMganVzdCBhbiBpbnRlcm5hbCBmbGFnIGlmIHdlIHdhbnQgdG8gaGF2ZSBhbiBhbmltYXRpb24uIEl0IGlzIHNldCB0cnVlIHdoZW4gd2UgcmVzZXRcbiAgICogdGhlIG5hdmlnYXRpb24gd2l0aGluIHRoZSBvblNob3cgY2FsbGJhY2sgb2YgdGhlIHNldHRpbmdzUGFuZWwuIEluIHRoaXMgY2FzZSB3ZSBkb24ndCB3YW50IGFuIGFjdHVhbCBhbmltYXRpb24gYnV0XG4gICAqIHRoZSByZWNhbGN1bGF0aW9uIG9mIHRoZSBkaW1lbnNpb24gb2YgdGhlIHNldHRpbmdzUGFuZWwuXG4gICAqIFRoaXMgaXMgaW5kZXBlbmRlbnQgb2YgdGhlIHBhZ2VUcmFuc2l0aW9uQW5pbWF0aW9uIGZsYWcuXG4gICAqL1xuICBwcml2YXRlIGFuaW1hdGVOYXZpZ2F0aW9uKHRhcmdldFBhZ2U6IFNldHRpbmdzUGFuZWxQYWdlLCBzb3VyY2VQYWdlOiBTZXR0aW5nc1BhbmVsUGFnZSwgc2tpcEFuaW1hdGlvbjogYm9vbGVhbikge1xuICAgIGlmICghKHRoaXMuY29uZmlnIGFzIFNldHRpbmdzUGFuZWxDb25maWcpLnBhZ2VUcmFuc2l0aW9uQW5pbWF0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc2V0dGluZ3NQYW5lbERvbUVsZW1lbnQgPSB0aGlzLmdldERvbUVsZW1lbnQoKTtcbiAgICBjb25zdCBzZXR0aW5nc1BhbmVsSFRNTEVsZW1lbnQgPSB0aGlzLmdldERvbUVsZW1lbnQoKS5nZXQoMCk7XG5cbiAgICAvLyBnZXQgY3VycmVudCBkaW1lbnNpb25cbiAgICBjb25zdCBzZXR0aW5nc1BhbmVsV2lkdGggPSBzZXR0aW5nc1BhbmVsSFRNTEVsZW1lbnQuc2Nyb2xsV2lkdGg7XG4gICAgY29uc3Qgc2V0dGluZ3NQYW5lbEhlaWdodCA9IHNldHRpbmdzUGFuZWxIVE1MRWxlbWVudC5zY3JvbGxIZWlnaHQ7XG5cbiAgICAvLyBjYWxjdWxhdGUgdGFyZ2V0IHNpemUgb2YgdGhlIHNldHRpbmdzIHBhbmVsXG4gICAgc291cmNlUGFnZS5nZXREb21FbGVtZW50KCkuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5jc3MoeyB3aWR0aDogJycsIGhlaWdodDogJycgfSk7IC8vIGxldCBjc3MgYXV0byBzZXR0aW5ncyBraWNrIGluIGFnYWluXG5cbiAgICBjb25zdCB0YXJnZXRQYWdlSHRtbEVsZW1lbnQgPSB0YXJnZXRQYWdlLmdldERvbUVsZW1lbnQoKS5nZXQoMCk7XG4gICAgLy8gY2xvbmUgdGhlIHRhcmdldFBhZ2UgRE9NIGVsZW1lbnQgc28gdGhhdCB3ZSBjYW4gY2FsY3VsYXRlIHRoZSB3aWR0aCAvIGhlaWdodCBob3cgdGhleSB3aWxsIGJlIGFmdGVyXG4gICAgLy8gc3dpdGNoaW5nIHRoZSBwYWdlLiBXZSBhcmUgdXNpbmcgYSBjbG9uZSB0byBwcmV2ZW50IChtb3N0bHkgc3R5bGluZykgc2lkZS1lZmZlY3RzIG9uIHRoZSByZWFsIERPTSBlbGVtZW50XG4gICAgY29uc3QgY2xvbmUgPSB0YXJnZXRQYWdlSHRtbEVsZW1lbnQuY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxFbGVtZW50O1xuICAgIC8vIGFwcGVuZCB0byBwYXJlbnQgc28gd2UgZ2V0IHRoZSAncmVhbCcgc2l6ZVxuICAgIGNvbnN0IGNvbnRhaW5lcldyYXBwZXIgPSB0YXJnZXRQYWdlSHRtbEVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICBjb250YWluZXJXcmFwcGVyLmFwcGVuZENoaWxkKGNsb25lKTtcbiAgICAvLyBzZXQgY2xvbmUgdmlzaWJsZVxuICAgIGNsb25lLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG4gICAgLy8gY29sbGVjdCB0YXJnZXQgZGltZW5zaW9uXG4gICAgY29uc3QgdGFyZ2V0U2V0dGluZ3NQYW5lbFdpZHRoID0gc2V0dGluZ3NQYW5lbEhUTUxFbGVtZW50LnNjcm9sbFdpZHRoO1xuICAgIGNvbnN0IHRhcmdldFNldHRpbmdzUGFuZWxIZWlnaHQgPSBzZXR0aW5nc1BhbmVsSFRNTEVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuXG4gICAgLy8gcmVtb3ZlIGNsb25lIGZyb20gdGhlIERPTVxuICAgIGNsb25lLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoY2xvbmUpOyAvLyAucmVtb3ZlKCkgaXMgbm90IHdvcmtpbmcgaW4gSUVcbiAgICBzb3VyY2VQYWdlLmdldERvbUVsZW1lbnQoKS5jc3MoJ2Rpc3BsYXknLCAnJyk7XG5cbiAgICAvLyBzZXQgdGhlIHZhbHVlcyBiYWNrIHRvIHRoZSBjdXJyZW50IG9uZXMgdGhhdCB0aGUgYnJvd3NlciBhbmltYXRlcyBpdCAoYnJvd3NlcnMgZG9uJ3QgYW5pbWF0ZSAnYXV0bycgdmFsdWVzKVxuICAgIHNldHRpbmdzUGFuZWxEb21FbGVtZW50LmNzcyh7XG4gICAgICB3aWR0aDogc2V0dGluZ3NQYW5lbFdpZHRoICsgJ3B4JyxcbiAgICAgIGhlaWdodDogc2V0dGluZ3NQYW5lbEhlaWdodCArICdweCcsXG4gICAgfSk7XG5cbiAgICBpZiAoIXNraXBBbmltYXRpb24pIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gZm9yY2UgdGhlIGJyb3dzZXIgdG8gcmVmbG93IGJldHdlZW4gc2V0dGluZyB0aGUgd2lkdGggYW5kIGhlaWdodCB0aGF0IHdlIGFjdHVhbGx5IGdldCBhIGFuaW1hdGlvblxuICAgICAgdGhpcy5mb3JjZUJyb3dzZXJSZWZsb3coKTtcbiAgICB9XG5cbiAgICAvLyBzZXQgdGhlIHZhbHVlcyB0byB0aGUgdGFyZ2V0IGRpbWVuc2lvblxuICAgIHNldHRpbmdzUGFuZWxEb21FbGVtZW50LmNzcyh7XG4gICAgICB3aWR0aDogdGFyZ2V0U2V0dGluZ3NQYW5lbFdpZHRoICsgJ3B4JyxcbiAgICAgIGhlaWdodDogdGFyZ2V0U2V0dGluZ3NQYW5lbEhlaWdodCArICdweCcsXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGZvcmNlQnJvd3NlclJlZmxvdygpOiB2b2lkIHtcbiAgICAvLyBGb3JjZSB0aGUgYnJvd3NlciB0byByZWZsb3cgdGhlIGxheW91dFxuICAgIC8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3BhdWxpcmlzaC81ZDUyZmIwODFiMzU3MGM4MWUzYVxuICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmdldCgwKS5vZmZzZXRMZWZ0O1xuICB9XG5cbiAgLyoqXG4gICAqIFdvcmthcm91bmQgZm9yIElFLCBGaXJlZm94IGFuZCBTYWZhcmlcbiAgICogd2hlbiB0aGUgc2V0dGluZ3MgcGFuZWwgZmFkZXMgb3V0IHdoaWxlIGFuIGl0ZW0gb2YgYSBzZWxlY3QgYm94IGlzIHN0aWxsIGhvdmVyZWQsIHRoZSBzZWxlY3QgYm94IHdpbGwgbm90IGZhZGUgb3V0XG4gICAqIHdoaWxlIHRoZSBzZXR0aW5ncyBwYW5lbCBkb2VzLiBUaGlzIHdvdWxkIGxlYXZlIGEgZmxvYXRpbmcgc2VsZWN0IGJveCwgd2hpY2ggaXMganVzdCB3ZWlyZFxuICAgKi9cbiAgcHJpdmF0ZSBoaWRlSG92ZXJlZFNlbGVjdEJveGVzKCk6IHZvaWQge1xuICAgIHRoaXMuZ2V0Q29tcHV0ZWRJdGVtcygpXG4gICAgICAubWFwKGl0ZW0gPT4gaXRlbVsnc2V0dGluZyddKVxuICAgICAgLmZpbHRlcihjb21wb25lbnQgPT4gY29tcG9uZW50IGluc3RhbmNlb2YgU2VsZWN0Qm94KVxuICAgICAgLmZvckVhY2goKHNlbGVjdEJveDogU2VsZWN0Qm94KSA9PiBzZWxlY3RCb3guY2xvc2VEcm9wZG93bigpKTtcbiAgfVxuXG4gIC8vIGNvbGxlY3QgYWxsIGl0ZW1zIGZyb20gYWxsIHBhZ2VzIChzZWUgaGlkZUhvdmVyZWRTZWxlY3RCb3hlcylcbiAgcHJpdmF0ZSBnZXRDb21wdXRlZEl0ZW1zKCk6IFNldHRpbmdzUGFuZWxJdGVtW10ge1xuICAgIGNvbnN0IGFsbEl0ZW1zOiBTZXR0aW5nc1BhbmVsSXRlbVtdID0gW107XG4gICAgZm9yIChsZXQgcGFnZSBvZiB0aGlzLmdldFBhZ2VzKCkpIHtcbiAgICAgIGFsbEl0ZW1zLnB1c2goLi4ucGFnZS5nZXRJdGVtcygpKTtcbiAgICB9XG4gICAgcmV0dXJuIGFsbEl0ZW1zO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRSb290UGFnZSgpOiBTZXR0aW5nc1BhbmVsUGFnZSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UGFnZXMoKVswXTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvblNldHRpbmdzU3RhdGVDaGFuZ2VkRXZlbnQoKSB7XG4gICAgdGhpcy5zZXR0aW5nc1BhbmVsRXZlbnRzLm9uU2V0dGluZ3NTdGF0ZUNoYW5nZWQuZGlzcGF0Y2godGhpcyk7XG4gIH1cbn1cbiIsImltcG9ydCB7Q29udGFpbmVyLCBDb250YWluZXJDb25maWd9IGZyb20gJy4vY29udGFpbmVyJztcbmltcG9ydCB7Q29tcG9uZW50LCBDb21wb25lbnRDb25maWd9IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCB7RXZlbnQsIEV2ZW50RGlzcGF0Y2hlciwgTm9BcmdzfSBmcm9tICcuLi9ldmVudGRpc3BhdGNoZXInO1xuaW1wb3J0IHsgTGFiZWwsIExhYmVsQ29uZmlnIH0gZnJvbSAnLi9sYWJlbCc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHtTZWxlY3RCb3h9IGZyb20gJy4vc2VsZWN0Ym94JztcbmltcG9ydCB7TGlzdEJveH0gZnJvbSAnLi9saXN0Ym94JztcbmltcG9ydCB7VmlkZW9RdWFsaXR5U2VsZWN0Qm94fSBmcm9tICcuL3ZpZGVvcXVhbGl0eXNlbGVjdGJveCc7XG5pbXBvcnQge0F1ZGlvUXVhbGl0eVNlbGVjdEJveH0gZnJvbSAnLi9hdWRpb3F1YWxpdHlzZWxlY3Rib3gnO1xuaW1wb3J0IHtQbGF5YmFja1NwZWVkU2VsZWN0Qm94fSBmcm9tICcuL3BsYXliYWNrc3BlZWRzZWxlY3Rib3gnO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IExvY2FsaXphYmxlVGV4dCB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBbiBpdGVtIGZvciBhIHtAbGluayBTZXR0aW5nc1BhbmVsUGFnZX0sXG4gKiBDb250YWluaW5nIGFuIG9wdGlvbmFsIHtAbGluayBMYWJlbH0gYW5kIGEgY29tcG9uZW50IHRoYXQgY29uZmlndXJlcyBhIHNldHRpbmcuXG4gKiBJZiB0aGUgY29tcG9uZW50cyBpcyBhIHtAbGluayBTZWxlY3RCb3h9IGl0IHdpbGwgaGFuZGxlIHRoZSBsb2dpYyBvZiBkaXNwbGF5aW5nIGl0IG9yIG5vdFxuICpcbiAqIEBjYXRlZ29yeSBDb21wb25lbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXR0aW5nc1BhbmVsSXRlbSBleHRlbmRzIENvbnRhaW5lcjxDb250YWluZXJDb25maWc+IHtcblxuICBwcml2YXRlIGxhYmVsOiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPjtcbiAgcHJpdmF0ZSBzZXR0aW5nOiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPjtcblxuICBwcml2YXRlIHNldHRpbmdzUGFuZWxJdGVtRXZlbnRzID0ge1xuICAgIG9uQWN0aXZlQ2hhbmdlZDogbmV3IEV2ZW50RGlzcGF0Y2hlcjxTZXR0aW5nc1BhbmVsSXRlbSwgTm9BcmdzPigpLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKGxhYmVsOiBMb2NhbGl6YWJsZVRleHQgfCBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPiwgc2V0dGluZzogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4sIGNvbmZpZzogQ29udGFpbmVyQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5zZXR0aW5nID0gc2V0dGluZztcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktc2V0dGluZ3MtcGFuZWwtaXRlbScsXG4gICAgICByb2xlOiAnbWVudWl0ZW0nLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcblxuICAgIGlmIChsYWJlbCAhPT0gbnVsbCkge1xuICAgICAgaWYgKGxhYmVsIGluc3RhbmNlb2YgQ29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGFiZWwgPSBuZXcgTGFiZWwoeyB0ZXh0OiBsYWJlbCwgZm9yOiB0aGlzLnNldHRpbmcuZ2V0Q29uZmlnKCkuaWQgfSBhcyBMYWJlbENvbmZpZyk7XG4gICAgICB9XG4gICAgICB0aGlzLmFkZENvbXBvbmVudCh0aGlzLmxhYmVsKTtcbiAgICB9XG5cbiAgICB0aGlzLmFkZENvbXBvbmVudCh0aGlzLnNldHRpbmcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc2V0dGluZyBpbnN0YW5jZW9mIFNlbGVjdEJveCB8fCB0aGlzLnNldHRpbmcgaW5zdGFuY2VvZiBMaXN0Qm94KSB7XG4gICAgICBsZXQgaGFuZGxlQ29uZmlnSXRlbUNoYW5nZWQgPSAoKSA9PiB7XG4gICAgICAgIGlmICghKHRoaXMuc2V0dGluZyBpbnN0YW5jZW9mIFNlbGVjdEJveCkgJiYgISh0aGlzLnNldHRpbmcgaW5zdGFuY2VvZiBMaXN0Qm94KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgbWluaW11bSBudW1iZXIgb2YgaXRlbXMgdGhhdCBtdXN0IGJlIGF2YWlsYWJsZSBmb3IgdGhlIHNldHRpbmcgdG8gYmUgZGlzcGxheWVkXG4gICAgICAgIC8vIEJ5IGRlZmF1bHQsIGF0IGxlYXN0IHR3byBpdGVtcyBtdXN0IGJlIGF2YWlsYWJsZSwgZWxzZSBhIHNlbGVjdGlvbiBpcyBub3QgcG9zc2libGVcbiAgICAgICAgbGV0IG1pbkl0ZW1zVG9EaXNwbGF5ID0gMjtcbiAgICAgICAgLy8gQXVkaW8vdmlkZW8gcXVhbGl0eSBzZWxlY3QgYm94ZXMgY29udGFpbiBhbiBhZGRpdGlvbmFsICdhdXRvJyBtb2RlLCB3aGljaCBpbiBjb21iaW5hdGlvbiB3aXRoIGEgc2luZ2xlXG4gICAgICAgIC8vIGF2YWlsYWJsZSBxdWFsaXR5IGFsc28gZG9lcyBub3QgbWFrZSBzZW5zZVxuICAgICAgICBpZiAoKHRoaXMuc2V0dGluZyBpbnN0YW5jZW9mIFZpZGVvUXVhbGl0eVNlbGVjdEJveCAmJiB0aGlzLnNldHRpbmcuaGFzQXV0b0l0ZW0oKSlcbiAgICAgICAgICB8fCB0aGlzLnNldHRpbmcgaW5zdGFuY2VvZiBBdWRpb1F1YWxpdHlTZWxlY3RCb3gpIHtcbiAgICAgICAgICBtaW5JdGVtc1RvRGlzcGxheSA9IDM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zZXR0aW5nLml0ZW1Db3VudCgpIDwgbWluSXRlbXNUb0Rpc3BsYXkpIHtcbiAgICAgICAgICAvLyBIaWRlIHRoZSBzZXR0aW5nIGlmIG5vIG1lYW5pbmdmdWwgY2hvaWNlIGlzIGF2YWlsYWJsZVxuICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2V0dGluZyBpbnN0YW5jZW9mIFBsYXliYWNrU3BlZWRTZWxlY3RCb3hcbiAgICAgICAgICAmJiAhdWltYW5hZ2VyLmdldENvbmZpZygpLnBsYXliYWNrU3BlZWRTZWxlY3Rpb25FbmFibGVkKSB7XG4gICAgICAgICAgLy8gSGlkZSB0aGUgUGxheWJhY2tTcGVlZFNlbGVjdEJveCBpZiBkaXNhYmxlZCBpbiBjb25maWdcbiAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFZpc2liaWxpdHkgbWlnaHQgaGF2ZSBjaGFuZ2VkIGFuZCB0aGVyZWZvcmUgdGhlIGFjdGl2ZSBzdGF0ZSBtaWdodCBoYXZlIGNoYW5nZWQgc28gd2UgZmlyZSB0aGUgZXZlbnRcbiAgICAgICAgLy8gVE9ETyBmaXJlIG9ubHkgd2hlbiBzdGF0ZSBoYXMgcmVhbGx5IGNoYW5nZWQgKGUuZy4gY2hlY2sgaWYgdmlzaWJpbGl0eSBoYXMgcmVhbGx5IGNoYW5nZWQpXG4gICAgICAgIHRoaXMub25BY3RpdmVDaGFuZ2VkRXZlbnQoKTtcblxuICAgICAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hdHRyKCdhcmlhLWhhc3BvcHVwJywgJ3RydWUnKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuc2V0dGluZy5vbkl0ZW1BZGRlZC5zdWJzY3JpYmUoaGFuZGxlQ29uZmlnSXRlbUNoYW5nZWQpO1xuICAgICAgdGhpcy5zZXR0aW5nLm9uSXRlbVJlbW92ZWQuc3Vic2NyaWJlKGhhbmRsZUNvbmZpZ0l0ZW1DaGFuZ2VkKTtcblxuICAgICAgLy8gSW5pdGlhbGl6ZSBoaWRkZW4gc3RhdGVcbiAgICAgIGhhbmRsZUNvbmZpZ0l0ZW1DaGFuZ2VkKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIHNldHRpbmdzIHBhbmVsIGl0ZW0gaXMgYWN0aXZlLCBpLmUuIHZpc2libGUgYW5kIGVuYWJsZWQgYW5kIGEgdXNlciBjYW4gaW50ZXJhY3Qgd2l0aCBpdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIHBhbmVsIGlzIGFjdGl2ZSwgZWxzZSBmYWxzZVxuICAgKi9cbiAgaXNBY3RpdmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXNTaG93bigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uQWN0aXZlQ2hhbmdlZEV2ZW50KCkge1xuICAgIHRoaXMuc2V0dGluZ3NQYW5lbEl0ZW1FdmVudHMub25BY3RpdmVDaGFuZ2VkLmRpc3BhdGNoKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgJ2FjdGl2ZScgc3RhdGUgb2YgdGhpcyBpdGVtIGNoYW5nZXMuXG4gICAqIEBzZWUgI2lzQWN0aXZlXG4gICAqIEByZXR1cm5zIHtFdmVudDxTZXR0aW5nc1BhbmVsSXRlbSwgTm9BcmdzPn1cbiAgICovXG4gIGdldCBvbkFjdGl2ZUNoYW5nZWQoKTogRXZlbnQ8U2V0dGluZ3NQYW5lbEl0ZW0sIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLnNldHRpbmdzUGFuZWxJdGVtRXZlbnRzLm9uQWN0aXZlQ2hhbmdlZC5nZXRFdmVudCgpO1xuICB9XG59XG4iLCJpbXBvcnQge0NvbnRhaW5lciwgQ29udGFpbmVyQ29uZmlnfSBmcm9tICcuL2NvbnRhaW5lcic7XG5pbXBvcnQge1NldHRpbmdzUGFuZWxJdGVtfSBmcm9tICcuL3NldHRpbmdzcGFuZWxpdGVtJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge0V2ZW50LCBFdmVudERpc3BhdGNoZXIsIE5vQXJnc30gZnJvbSAnLi4vZXZlbnRkaXNwYXRjaGVyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBCcm93c2VyVXRpbHMgfSBmcm9tICcuLi9icm93c2VydXRpbHMnO1xuXG4vKipcbiAqIEEgcGFuZWwgY29udGFpbmluZyBhIGxpc3Qgb2Yge0BsaW5rIFNldHRpbmdzUGFuZWxJdGVtIGl0ZW1zfSB0aGF0IHJlcHJlc2VudCBsYWJlbGxlZCBzZXR0aW5ncy5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29tcG9uZW50c1xuICovXG5leHBvcnQgY2xhc3MgU2V0dGluZ3NQYW5lbFBhZ2UgZXh0ZW5kcyBDb250YWluZXI8Q29udGFpbmVyQ29uZmlnPiB7XG5cbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ0xBU1NfTEFTVCA9ICdsYXN0JztcblxuICBwcml2YXRlIHNldHRpbmdzUGFuZWxQYWdlRXZlbnRzID0ge1xuICAgIG9uU2V0dGluZ3NTdGF0ZUNoYW5nZWQ6IG5ldyBFdmVudERpc3BhdGNoZXI8U2V0dGluZ3NQYW5lbFBhZ2UsIE5vQXJncz4oKSxcbiAgICBvbkFjdGl2ZTogbmV3IEV2ZW50RGlzcGF0Y2hlcjxTZXR0aW5nc1BhbmVsUGFnZSwgTm9BcmdzPigpLFxuICAgIG9uSW5hY3RpdmU6IG5ldyBFdmVudERpc3BhdGNoZXI8U2V0dGluZ3NQYW5lbFBhZ2UsIE5vQXJncz4oKSxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbnRhaW5lckNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWc8Q29udGFpbmVyQ29uZmlnPihjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktc2V0dGluZ3MtcGFuZWwtcGFnZScsXG4gICAgICByb2xlOiAnbWVudScsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIC8vIEZpcmUgZXZlbnQgd2hlbiB0aGUgc3RhdGUgb2YgYSBzZXR0aW5ncy1pdGVtIGhhcyBjaGFuZ2VkXG4gICAgbGV0IHNldHRpbmdzU3RhdGVDaGFuZ2VkSGFuZGxlciA9ICgpID0+IHtcbiAgICAgIHRoaXMub25TZXR0aW5nc1N0YXRlQ2hhbmdlZEV2ZW50KCk7XG5cbiAgICAgIC8vIEF0dGFjaCBtYXJrZXIgY2xhc3MgdG8gbGFzdCB2aXNpYmxlIGl0ZW1cbiAgICAgIGxldCBsYXN0U2hvd25JdGVtID0gbnVsbDtcbiAgICAgIGZvciAobGV0IGNvbXBvbmVudCBvZiB0aGlzLmdldEl0ZW1zKCkpIHtcbiAgICAgICAgY29tcG9uZW50LmdldERvbUVsZW1lbnQoKS5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeENzcyhTZXR0aW5nc1BhbmVsUGFnZS5DTEFTU19MQVNUKSk7XG4gICAgICAgIGlmIChjb21wb25lbnQuaXNTaG93bigpKSB7XG4gICAgICAgICAgbGFzdFNob3duSXRlbSA9IGNvbXBvbmVudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxhc3RTaG93bkl0ZW0pIHtcbiAgICAgICAgbGFzdFNob3duSXRlbS5nZXREb21FbGVtZW50KCkuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoU2V0dGluZ3NQYW5lbFBhZ2UuQ0xBU1NfTEFTVCkpO1xuICAgICAgfVxuICAgIH07XG4gICAgZm9yIChsZXQgY29tcG9uZW50IG9mIHRoaXMuZ2V0SXRlbXMoKSkge1xuICAgICAgY29tcG9uZW50Lm9uQWN0aXZlQ2hhbmdlZC5zdWJzY3JpYmUoc2V0dGluZ3NTdGF0ZUNoYW5nZWRIYW5kbGVyKTtcbiAgICB9XG4gIH1cblxuICBoYXNBY3RpdmVTZXR0aW5ncygpOiBib29sZWFuIHtcbiAgICBmb3IgKGxldCBjb21wb25lbnQgb2YgdGhpcy5nZXRJdGVtcygpKSB7XG4gICAgICBpZiAoY29tcG9uZW50LmlzQWN0aXZlKCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZ2V0SXRlbXMoKTogU2V0dGluZ3NQYW5lbEl0ZW1bXSB7XG4gICAgcmV0dXJuIDxTZXR0aW5nc1BhbmVsSXRlbVtdPnRoaXMuY29uZmlnLmNvbXBvbmVudHMuZmlsdGVyKGNvbXBvbmVudCA9PiBjb21wb25lbnQgaW5zdGFuY2VvZiBTZXR0aW5nc1BhbmVsSXRlbSk7XG4gIH1cblxuICBvblNldHRpbmdzU3RhdGVDaGFuZ2VkRXZlbnQoKSB7XG4gICAgdGhpcy5zZXR0aW5nc1BhbmVsUGFnZUV2ZW50cy5vblNldHRpbmdzU3RhdGVDaGFuZ2VkLmRpc3BhdGNoKHRoaXMpO1xuICB9XG5cbiAgZ2V0IG9uU2V0dGluZ3NTdGF0ZUNoYW5nZWQoKTogRXZlbnQ8U2V0dGluZ3NQYW5lbFBhZ2UsIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLnNldHRpbmdzUGFuZWxQYWdlRXZlbnRzLm9uU2V0dGluZ3NTdGF0ZUNoYW5nZWQuZ2V0RXZlbnQoKTtcbiAgfVxuXG4gIG9uQWN0aXZlRXZlbnQoKSB7XG4gICAgY29uc3QgYWN0aXZlSXRlbXMgPSB0aGlzLmdldEl0ZW1zKCkuZmlsdGVyKChpdGVtKSA9PiBpdGVtLmlzQWN0aXZlKCkpO1xuXG4gICAgdGhpcy5zZXR0aW5nc1BhbmVsUGFnZUV2ZW50cy5vbkFjdGl2ZS5kaXNwYXRjaCh0aGlzKTtcbiAgICAvLyBEaXNhYmxlIGZvY3VzIGZvciBpT1MgYW5kIGlQYWRPUyAxMy4gVGhleSBvcGVuIHNlbGVjdCBib3hlcyBhdXRvbWF0aWNhbGx5IG9uIGZvY3VzIGFuZCB3ZSB3YW50IHRvIGF2b2lkIHRoYXQuXG4gICAgaWYgKGFjdGl2ZUl0ZW1zLmxlbmd0aCA+IDAgJiYgIUJyb3dzZXJVdGlscy5pc0lPUyAmJiAhKEJyb3dzZXJVdGlscy5pc01hY0ludGVsICYmIEJyb3dzZXJVdGlscy5pc1RvdWNoU3VwcG9ydGVkKSkge1xuICAgICAgYWN0aXZlSXRlbXNbMF0uZ2V0RG9tRWxlbWVudCgpLmZvY3VzVG9GaXJzdElucHV0KCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IG9uQWN0aXZlKCk6IEV2ZW50PFNldHRpbmdzUGFuZWxQYWdlLCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5zZXR0aW5nc1BhbmVsUGFnZUV2ZW50cy5vbkFjdGl2ZS5nZXRFdmVudCgpO1xuICB9XG5cbiAgb25JbmFjdGl2ZUV2ZW50KCkge1xuICAgIHRoaXMuc2V0dGluZ3NQYW5lbFBhZ2VFdmVudHMub25JbmFjdGl2ZS5kaXNwYXRjaCh0aGlzKTtcbiAgfVxuXG4gIGdldCBvbkluYWN0aXZlKCk6IEV2ZW50PFNldHRpbmdzUGFuZWxQYWdlLCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5zZXR0aW5nc1BhbmVsUGFnZUV2ZW50cy5vbkluYWN0aXZlLmdldEV2ZW50KCk7XG4gIH1cbn1cbiIsImltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge1NldHRpbmdzUGFuZWxQYWdlTmF2aWdhdG9yQnV0dG9uLCBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckNvbmZpZ30gZnJvbSAnLi9zZXR0aW5nc3BhbmVscGFnZW5hdmlnYXRvcmJ1dHRvbic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuXG4vKipcbiAqIEBjYXRlZ29yeSBCdXR0b25zXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXR0aW5nc1BhbmVsUGFnZUJhY2tCdXR0b24gZXh0ZW5kcyBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckJ1dHRvbiB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXNldHRpbmdzcGFuZWxwYWdlYmFja2J1dHRvbicsXG4gICAgICB0ZXh0OiAnYmFjaycsXG4gICAgfSBhcyBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckNvbmZpZywgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMub25DbGljay5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5wb3BQYWdlKCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7QnV0dG9uLCBCdXR0b25Db25maWd9IGZyb20gJy4vYnV0dG9uJztcbmltcG9ydCB7U2V0dGluZ3NQYW5lbH0gZnJvbSAnLi9zZXR0aW5nc3BhbmVsJztcbmltcG9ydCB7U2V0dGluZ3NQYW5lbFBhZ2V9IGZyb20gJy4vc2V0dGluZ3NwYW5lbHBhZ2UnO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IFVJSW5zdGFuY2VNYW5hZ2VyIH0gZnJvbSAnLi4vdWltYW5hZ2VyJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgYSB7QGxpbmsgU2V0dGluZ3NQYW5lbFBhZ2VOYXZpZ2F0b3JCdXR0b259XG4gKlxuICogQGNhdGVnb3J5IENvbmZpZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckNvbmZpZyBleHRlbmRzIEJ1dHRvbkNvbmZpZyB7XG4gIC8qKlxuICAgKiBDb250YWluZXIgYFNldHRpbmdzUGFuZWxgIHdoZXJlIHRoZSBuYXZpZ2F0aW9uIHRha2VzIHBsYWNlXG4gICAqL1xuICBjb250YWluZXI6IFNldHRpbmdzUGFuZWw7XG4gIC8qKlxuICAgKiBQYWdlIHdoZXJlIHRoZSBidXR0b24gc2hvdWxkIG5hdmlnYXRlIHRvXG4gICAqIElmIGVtcHR5IGl0IHdpbGwgbmF2aWdhdGUgdG8gdGhlIHJvb3QgcGFnZSAobm90IGludGVuZGVkIHRvIHVzZSBhcyBuYXZpZ2F0ZSBiYWNrIGJlaGF2aW9yKVxuICAgKi9cbiAgdGFyZ2V0UGFnZT86IFNldHRpbmdzUGFuZWxQYWdlO1xuXG4gIC8qKlxuICAgKiBXQ0FHMjAgc3RhbmRhcmQ6IEVzdGFibGlzaGVzIHJlbGF0aW9uc2hpcHMgYmV0d2VlbiBvYmplY3RzIGFuZCB0aGVpciBsYWJlbChzKVxuICAgKi9cbiAgYXJpYUxhYmVsbGVkQnk/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQ2FuIGJlIHVzZWQgdG8gbmF2aWdhdGUgYmV0d2VlbiBTZXR0aW5nc1BhbmVsUGFnZXNcbiAqXG4gKiBFeGFtcGxlOlxuICogIGxldCBzZXR0aW5nUGFuZWxOYXZpZ2F0aW9uQnV0dG9uID0gbmV3IFNldHRpbmdzUGFuZWxQYWdlTmF2aWdhdG9yQnV0dG9uKHtcbiAqICAgIGNvbnRhaW5lcjogc2V0dGluZ3NQYW5lbCxcbiAqICAgIHRhcmdldFBhZ2U6IHNldHRpbmdzUGFuZWxQYWdlLFxuICogIH0pO1xuICpcbiAqICBzZXR0aW5nc1BhbmVsUGFnZS5hZGRDb21wb25lbnQoc2V0dGluZ1BhbmVsTmF2aWdhdGlvbkJ1dHRvbik7XG4gKlxuICogRG9uJ3QgZm9yZ2V0IHRvIGFkZCB0aGUgc2V0dGluZ1BhbmVsTmF2aWdhdGlvbkJ1dHRvbiB0byB0aGUgc2V0dGluZ3NQYW5lbFBhZ2UuXG4gKlxuICogQGNhdGVnb3J5IEJ1dHRvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIFNldHRpbmdzUGFuZWxQYWdlTmF2aWdhdG9yQnV0dG9uIGV4dGVuZHMgQnV0dG9uPFNldHRpbmdzUGFuZWxQYWdlTmF2aWdhdG9yQ29uZmlnPiB7XG4gIHByaXZhdGUgcmVhZG9ubHkgY29udGFpbmVyOiBTZXR0aW5nc1BhbmVsO1xuICBwcml2YXRlIHJlYWRvbmx5IHRhcmdldFBhZ2U/OiBTZXR0aW5nc1BhbmVsUGFnZTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFNldHRpbmdzUGFuZWxQYWdlTmF2aWdhdG9yQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7fSBhcyBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckNvbmZpZywgdGhpcy5jb25maWcpO1xuXG4gICAgdGhpcy5jb250YWluZXIgPSAodGhpcy5jb25maWcgYXMgU2V0dGluZ3NQYW5lbFBhZ2VOYXZpZ2F0b3JDb25maWcpLmNvbnRhaW5lcjtcbiAgICB0aGlzLnRhcmdldFBhZ2UgPSAodGhpcy5jb25maWcgYXMgU2V0dGluZ3NQYW5lbFBhZ2VOYXZpZ2F0b3JDb25maWcpLnRhcmdldFBhZ2U7XG4gIH1cblxuICAvKipcbiAgICogbmF2aWdhdGUgb25lIGxldmVsIGJhY2tcbiAgICovXG4gIHBvcFBhZ2UoKSB7XG4gICAgdGhpcy5jb250YWluZXIucG9wU2V0dGluZ3NQYW5lbFBhZ2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBuYXZpZ2F0ZSB0byB0aGUgdGFyZ2V0IHBhZ2VcbiAgICovXG4gIHB1c2hUYXJnZXRQYWdlKCkge1xuICAgIHRoaXMuY29udGFpbmVyLnNldEFjdGl2ZVBhZ2UodGhpcy50YXJnZXRQYWdlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7U2V0dGluZ3NQYW5lbFBhZ2VOYXZpZ2F0b3JCdXR0b24sIFNldHRpbmdzUGFuZWxQYWdlTmF2aWdhdG9yQ29uZmlnfSBmcm9tICcuL3NldHRpbmdzcGFuZWxwYWdlbmF2aWdhdG9yYnV0dG9uJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEBjYXRlZ29yeSBCdXR0b25zXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXR0aW5nc1BhbmVsUGFnZU9wZW5CdXR0b24gZXh0ZW5kcyBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckJ1dHRvbiB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU2V0dGluZ3NQYW5lbFBhZ2VOYXZpZ2F0b3JDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1zZXR0aW5nc3BhbmVscGFnZW9wZW5idXR0b24nLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ29wZW4nKSxcbiAgICAgIHJvbGU6ICdtZW51aXRlbScsXG4gICAgfSBhcyBTZXR0aW5nc1BhbmVsUGFnZU5hdmlnYXRvckNvbmZpZywgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmF0dHIoJ2FyaWEtaGFzcG9wdXAnLCAndHJ1ZScpO1xuICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmF0dHIoJ2FyaWEtb3ducycsIHRoaXMuY29uZmlnLnRhcmdldFBhZ2UuZ2V0Q29uZmlnKCkuaWQpO1xuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLnB1c2hUYXJnZXRQYWdlKCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7VG9nZ2xlQnV0dG9uLCBUb2dnbGVCdXR0b25Db25maWd9IGZyb20gJy4vdG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7U2V0dGluZ3NQYW5lbH0gZnJvbSAnLi9zZXR0aW5nc3BhbmVsJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge0NvbXBvbmVudCwgQ29tcG9uZW50Q29uZmlnfSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQge0FycmF5VXRpbHN9IGZyb20gJy4uL2FycmF5dXRpbHMnO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIHRoZSB7QGxpbmsgU2V0dGluZ3NUb2dnbGVCdXR0b259LlxuICpcbiAqIEBjYXRlZ29yeSBDb25maWdzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2V0dGluZ3NUb2dnbGVCdXR0b25Db25maWcgZXh0ZW5kcyBUb2dnbGVCdXR0b25Db25maWcge1xuICAvKipcbiAgICogVGhlIHNldHRpbmdzIHBhbmVsIHdob3NlIHZpc2liaWxpdHkgdGhlIGJ1dHRvbiBzaG91bGQgdG9nZ2xlLlxuICAgKi9cbiAgc2V0dGluZ3NQYW5lbDogU2V0dGluZ3NQYW5lbDtcblxuICAvKipcbiAgICogRGVjaWRlcyBpZiB0aGUgYnV0dG9uIHNob3VsZCBiZSBhdXRvbWF0aWNhbGx5IGhpZGRlbiB3aGVuIHRoZSBzZXR0aW5ncyBwYW5lbCBkb2VzIG5vdCBjb250YWluIGFueSBhY3RpdmUgc2V0dGluZ3MuXG4gICAqIERlZmF1bHQ6IHRydWVcbiAgICovXG4gIGF1dG9IaWRlV2hlbk5vQWN0aXZlU2V0dGluZ3M/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEEgYnV0dG9uIHRoYXQgdG9nZ2xlcyB2aXNpYmlsaXR5IG9mIGEgc2V0dGluZ3MgcGFuZWwuXG4gKlxuICogQGNhdGVnb3J5IEJ1dHRvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIFNldHRpbmdzVG9nZ2xlQnV0dG9uIGV4dGVuZHMgVG9nZ2xlQnV0dG9uPFNldHRpbmdzVG9nZ2xlQnV0dG9uQ29uZmlnPiB7XG5cbiAgcHJpdmF0ZSB2aXNpYmxlU2V0dGluZ3NQYW5lbHM6IFNldHRpbmdzUGFuZWxbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU2V0dGluZ3NUb2dnbGVCdXR0b25Db25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgaWYgKCFjb25maWcuc2V0dGluZ3NQYW5lbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBTZXR0aW5nc1BhbmVsIGlzIG1pc3NpbmcnKTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXNldHRpbmdzdG9nZ2xlYnV0dG9uJyxcbiAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncycpLFxuICAgICAgc2V0dGluZ3NQYW5lbDogbnVsbCxcbiAgICAgIGF1dG9IaWRlV2hlbk5vQWN0aXZlU2V0dGluZ3M6IHRydWUsXG4gICAgICByb2xlOiAncG9wLXVwIGJ1dHRvbicsXG4gICAgfSwgPFNldHRpbmdzVG9nZ2xlQnV0dG9uQ29uZmlnPnRoaXMuY29uZmlnKTtcblxuICAgIC8qKlxuICAgICAqIFdDQUcyMCBzdGFuZGFyZCBkZWZpbmVzIHdoaWNoIHBvcHVwIG1lbnUgKGVsZW1lbnQgaWQpIGlzIG93bmVkIGJ5IHRoZSBidXR0b25cbiAgICAgKi9cbiAgICB0aGlzLmdldERvbUVsZW1lbnQoKS5hdHRyKCdhcmlhLW93bnMnLCBjb25maWcuc2V0dGluZ3NQYW5lbC5nZXRBY3RpdmVQYWdlKCkuZ2V0Q29uZmlnKCkuaWQpO1xuXG4gICAgLyoqXG4gICAgICogV0NBRzIwIHN0YW5kYXJkIGRlZmluZXMgdGhhdCBhIGJ1dHRvbiBoYXMgYSBwb3B1cCBtZW51IGJvdW5kIHRvIGl0XG4gICAgICovXG4gICAgdGhpcy5nZXREb21FbGVtZW50KCkuYXR0cignYXJpYS1oYXNwb3B1cCcsICd0cnVlJyk7XG5cbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICBsZXQgY29uZmlnID0gdGhpcy5nZXRDb25maWcoKTtcbiAgICBsZXQgc2V0dGluZ3NQYW5lbCA9IGNvbmZpZy5zZXR0aW5nc1BhbmVsO1xuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAvLyBvbmx5IGhpZGUgb3RoZXIgYFNldHRpbmdzUGFuZWxgcyBpZiBhIG5ldyBvbmUgd2lsbCBiZSBvcGVuZWRcbiAgICAgIGlmICghc2V0dGluZ3NQYW5lbC5pc1Nob3duKCkpIHtcbiAgICAgICAgLy8gSGlkZSBhbGwgb3BlbiBTZXR0aW5nc1BhbmVscyBiZWZvcmUgb3BlbmluZyB0aGlzIGJ1dHRvbidzIHBhbmVsXG4gICAgICAgIC8vIChXZSBuZWVkIHRvIGl0ZXJhdGUgYSBjb3B5IGJlY2F1c2UgaGlkaW5nIHRoZW0gd2lsbCBhdXRvbWF0aWNhbGx5IHJlbW92ZSB0aGVtc2VsdmVzIGZyb20gdGhlIGFycmF5XG4gICAgICAgIC8vIGR1ZSB0byB0aGUgc3Vic2NyaWJlT25jZSBhYm92ZSlcbiAgICAgICAgdGhpcy52aXNpYmxlU2V0dGluZ3NQYW5lbHMuc2xpY2UoKS5mb3JFYWNoKHNldHRpbmdzUGFuZWwgPT4gc2V0dGluZ3NQYW5lbC5oaWRlKCkpO1xuICAgICAgfVxuICAgICAgc2V0dGluZ3NQYW5lbC50b2dnbGVIaWRkZW4oKTtcbiAgICB9KTtcbiAgICBzZXR0aW5nc1BhbmVsLm9uU2hvdy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgLy8gU2V0IHRvZ2dsZSBzdGF0dXMgdG8gb24gd2hlbiB0aGUgc2V0dGluZ3MgcGFuZWwgc2hvd3NcbiAgICAgIHRoaXMub24oKTtcbiAgICB9KTtcbiAgICBzZXR0aW5nc1BhbmVsLm9uSGlkZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgLy8gU2V0IHRvZ2dsZSBzdGF0dXMgdG8gb2ZmIHdoZW4gdGhlIHNldHRpbmdzIHBhbmVsIGhpZGVzXG4gICAgICB0aGlzLm9mZigpO1xuICAgIH0pO1xuXG4gICAgLy8gRW5zdXJlIHRoYXQgb25seSBvbmUgYFNldHRpbmdQYW5lbGAgaXMgdmlzaWJsZSBhdCBvbmNlXG4gICAgLy8gS2VlcCB0cmFjayBvZiBzaG93biBTZXR0aW5nc1BhbmVsc1xuICAgIHVpbWFuYWdlci5vbkNvbXBvbmVudFNob3cuc3Vic2NyaWJlKChzZW5kZXI6IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+KSA9PiB7XG4gICAgICBpZiAoc2VuZGVyIGluc3RhbmNlb2YgU2V0dGluZ3NQYW5lbCkge1xuICAgICAgICB0aGlzLnZpc2libGVTZXR0aW5nc1BhbmVscy5wdXNoKHNlbmRlcik7XG4gICAgICAgIHNlbmRlci5vbkhpZGUuc3Vic2NyaWJlT25jZSgoKSA9PiBBcnJheVV0aWxzLnJlbW92ZSh0aGlzLnZpc2libGVTZXR0aW5nc1BhbmVscywgc2VuZGVyKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBIYW5kbGUgYXV0b21hdGljIGhpZGluZyBvZiB0aGUgYnV0dG9uIGlmIHRoZXJlIGFyZSBubyBzZXR0aW5ncyBmb3IgdGhlIHVzZXIgdG8gaW50ZXJhY3Qgd2l0aFxuICAgIGlmIChjb25maWcuYXV0b0hpZGVXaGVuTm9BY3RpdmVTZXR0aW5ncykge1xuICAgICAgLy8gU2V0dXAgaGFuZGxlciB0byBzaG93L2hpZGUgYnV0dG9uIHdoZW4gdGhlIHNldHRpbmdzIGNoYW5nZVxuICAgICAgbGV0IHNldHRpbmdzUGFuZWxJdGVtc0NoYW5nZWRIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICBpZiAoc2V0dGluZ3NQYW5lbC5yb290UGFnZUhhc0FjdGl2ZVNldHRpbmdzKCkpIHtcbiAgICAgICAgICBpZiAodGhpcy5pc0hpZGRlbigpKSB7XG4gICAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRoaXMuaXNTaG93bigpKSB7XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICAvLyBXaXJlIHRoZSBoYW5kbGVyIHRvIHRoZSBldmVudFxuICAgICAgc2V0dGluZ3NQYW5lbC5vblNldHRpbmdzU3RhdGVDaGFuZ2VkLnN1YnNjcmliZShzZXR0aW5nc1BhbmVsSXRlbXNDaGFuZ2VkSGFuZGxlcik7XG4gICAgICAvLyBDYWxsIGhhbmRsZXIgZm9yIGZpcnN0IGluaXQgYXQgc3RhcnR1cFxuICAgICAgc2V0dGluZ3NQYW5lbEl0ZW1zQ2hhbmdlZEhhbmRsZXIoKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7Q29tcG9uZW50LCBDb21wb25lbnRDb25maWd9IGZyb20gJy4vY29tcG9uZW50JztcblxuLyoqXG4gKiBBIGR1bW15IGNvbXBvbmVudCB0aGF0IGp1c3QgcmVzZXJ2ZXMgc29tZSBzcGFjZSBhbmQgZG9lcyBub3RoaW5nIGVsc2UuXG4gKlxuICogQGNhdGVnb3J5IENvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGNsYXNzIFNwYWNlciBleHRlbmRzIENvbXBvbmVudDxDb21wb25lbnRDb25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbXBvbmVudENvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktc3BhY2VyJyxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuXG4gIHByb3RlY3RlZCBvblNob3dFdmVudCgpOiB2b2lkIHtcbiAgICAvLyBkaXNhYmxlIGV2ZW50IGZpcmluZyBieSBvdmVyd3JpdGluZyBhbmQgbm90IGNhbGxpbmcgc3VwZXJcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkhpZGVFdmVudCgpOiB2b2lkIHtcbiAgICAvLyBkaXNhYmxlIGV2ZW50IGZpcmluZyBieSBvdmVyd3JpdGluZyBhbmQgbm90IGNhbGxpbmcgc3VwZXJcbiAgfVxuXG4gIHByb3RlY3RlZCBvbkhvdmVyQ2hhbmdlZEV2ZW50KGhvdmVyZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAvLyBkaXNhYmxlIGV2ZW50IGZpcmluZyBieSBvdmVyd3JpdGluZyBhbmQgbm90IGNhbGxpbmcgc3VwZXJcbiAgfVxufSIsImltcG9ydCB7TGlzdEJveH0gZnJvbSAnLi9saXN0Ym94JztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge1N1YnRpdGxlU3dpdGNoSGFuZGxlcn0gZnJvbSAnLi4vc3VidGl0bGV1dGlscyc7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuXG4vKipcbiAqIEEgZWxlbWVudCB0aGF0IGlzIHNpbWlsYXIgdG8gYSBzZWxlY3QgYm94IHdoZXJlIHRoZSB1c2VyIGNhbiBzZWxlY3QgYSBzdWJ0aXRsZVxuICpcbiAqIEBjYXRlZ29yeSBDb21wb25lbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBTdWJ0aXRsZUxpc3RCb3ggZXh0ZW5kcyBMaXN0Qm94IHtcblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbmV3IFN1YnRpdGxlU3dpdGNoSGFuZGxlcihwbGF5ZXIsIHRoaXMsIHVpbWFuYWdlcik7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbnRhaW5lciwgQ29udGFpbmVyQ29uZmlnIH0gZnJvbSAnLi9jb250YWluZXInO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgTGFiZWwsIExhYmVsQ29uZmlnIH0gZnJvbSAnLi9sYWJlbCc7XG5pbXBvcnQgeyBDb21wb25lbnRDb25maWcsIENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCB7IENvbnRyb2xCYXIgfSBmcm9tICcuL2NvbnRyb2xiYXInO1xuaW1wb3J0IHsgRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnLi4vZXZlbnRkaXNwYXRjaGVyJztcbmltcG9ydCB7IERPTSwgU2l6ZSB9IGZyb20gJy4uL2RvbSc7XG5pbXBvcnQgeyBQbGF5ZXJBUEksIFN1YnRpdGxlQ3VlRXZlbnQgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcbmltcG9ydCB7IFZ0dFV0aWxzIH0gZnJvbSAnLi4vdnR0dXRpbHMnO1xuaW1wb3J0IHsgVlRUUHJvcGVydGllcyB9IGZyb20gJ2JpdG1vdmluLXBsYXllci90eXBlcy9zdWJ0aXRsZXMvdnR0L0FQSSc7XG5cbmludGVyZmFjZSBTdWJ0aXRsZUNyb3BEZXRlY3Rpb25SZXN1bHQge1xuICB0b3A6IGJvb2xlYW47XG4gIHJpZ2h0OiBib29sZWFuO1xuICBib3R0b206IGJvb2xlYW47XG4gIGxlZnQ6IGJvb2xlYW47XG59XG5cbi8qKlxuICogT3ZlcmxheXMgdGhlIHBsYXllciB0byBkaXNwbGF5IHN1YnRpdGxlcy5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29tcG9uZW50c1xuICovXG5leHBvcnQgY2xhc3MgU3VidGl0bGVPdmVybGF5IGV4dGVuZHMgQ29udGFpbmVyPENvbnRhaW5lckNvbmZpZz4ge1xuXG4gIHByaXZhdGUgc3VidGl0bGVNYW5hZ2VyOiBBY3RpdmVTdWJ0aXRsZU1hbmFnZXI7XG4gIHByaXZhdGUgcHJldmlld1N1YnRpdGxlQWN0aXZlOiBib29sZWFuO1xuICBwcml2YXRlIHByZXZpZXdTdWJ0aXRsZTogU3VidGl0bGVMYWJlbDtcblxuICBwcml2YXRlIHByZXByb2Nlc3NMYWJlbEV2ZW50Q2FsbGJhY2sgPSBuZXcgRXZlbnREaXNwYXRjaGVyPFN1YnRpdGxlQ3VlRXZlbnQsIFN1YnRpdGxlTGFiZWw+KCk7XG4gIHByaXZhdGUgc3VidGl0bGVDb250YWluZXJNYW5hZ2VyOiBTdWJ0aXRsZVJlZ2lvbkNvbnRhaW5lck1hbmFnZXI7XG5cbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ0xBU1NfQ09OVFJPTEJBUl9WSVNJQkxFID0gJ2NvbnRyb2xiYXItdmlzaWJsZSc7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENMQVNTX0NFQV82MDggPSAnY2VhNjA4JztcblxuICAvLyBUaGUgbnVtYmVyIG9mIHJvd3MgaW4gYSBjZWE2MDggZ3JpZFxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDRUE2MDhfTlVNX1JPV1MgPSAxNTtcbiAgLy8gVGhlIG51bWJlciBvZiBjb2x1bW5zIGluIGEgY2VhNjA4IGdyaWRcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ0VBNjA4X05VTV9DT0xVTU5TID0gMzI7XG4gIC8vIFRoZSBvZmZzZXQgaW4gcGVyY2VudCBmb3Igb25lIHJvdyAod2hpY2ggaXMgYWxzbyB0aGUgaGVpZ2h0IG9mIGEgcm93KVxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDRUE2MDhfUk9XX09GRlNFVCA9IDEwMCAvIFN1YnRpdGxlT3ZlcmxheS5DRUE2MDhfTlVNX1JPV1M7XG4gIC8vIFRoZSBvZmZzZXQgaW4gcGVyY2VudCBmb3Igb25lIGNvbHVtbiAod2hpY2ggaXMgYWxzbyB0aGUgd2lkdGggb2YgYSBjb2x1bW4pXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENFQTYwOF9DT0xVTU5fT0ZGU0VUID0gMTAwIC8gU3VidGl0bGVPdmVybGF5LkNFQTYwOF9OVU1fQ09MVU1OUztcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbnRhaW5lckNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMucHJldmlld1N1YnRpdGxlQWN0aXZlID0gZmFsc2U7XG4gICAgdGhpcy5wcmV2aWV3U3VidGl0bGUgPSBuZXcgU3VidGl0bGVMYWJlbCh7IHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdzdWJ0aXRsZS5leGFtcGxlJykgfSk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXN1YnRpdGxlLW92ZXJsYXknLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICBsZXQgc3VidGl0bGVNYW5hZ2VyID0gbmV3IEFjdGl2ZVN1YnRpdGxlTWFuYWdlcigpO1xuICAgIHRoaXMuc3VidGl0bGVNYW5hZ2VyID0gc3VidGl0bGVNYW5hZ2VyO1xuXG4gICAgdGhpcy5zdWJ0aXRsZUNvbnRhaW5lck1hbmFnZXIgPSBuZXcgU3VidGl0bGVSZWdpb25Db250YWluZXJNYW5hZ2VyKHRoaXMpO1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkN1ZUVudGVyLCAoZXZlbnQ6IFN1YnRpdGxlQ3VlRXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IGxhYmVsID0gdGhpcy5nZW5lcmF0ZUxhYmVsKGV2ZW50KTtcbiAgICAgIHN1YnRpdGxlTWFuYWdlci5jdWVFbnRlcihldmVudCwgbGFiZWwpO1xuXG4gICAgICB0aGlzLnByZXByb2Nlc3NMYWJlbEV2ZW50Q2FsbGJhY2suZGlzcGF0Y2goZXZlbnQsIGxhYmVsKTtcblxuICAgICAgaWYgKHRoaXMucHJldmlld1N1YnRpdGxlQWN0aXZlKSB7XG4gICAgICAgIHRoaXMuc3VidGl0bGVDb250YWluZXJNYW5hZ2VyLnJlbW92ZUxhYmVsKHRoaXMucHJldmlld1N1YnRpdGxlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zaG93KCk7XG5cbiAgICAgIHRoaXMuc3VidGl0bGVDb250YWluZXJNYW5hZ2VyLmFkZExhYmVsKGxhYmVsLCB0aGlzLmdldERvbUVsZW1lbnQoKS5zaXplKCkpO1xuICAgICAgdGhpcy51cGRhdGVDb21wb25lbnRzKCk7XG5cbiAgICAgIGlmICh1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZm9yY2VTdWJ0aXRsZXNJbnRvVmlld0NvbnRhaW5lcikge1xuICAgICAgICB0aGlzLmhhbmRsZVN1YnRpdGxlQ3JvcHBpbmcobGFiZWwpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkN1ZVVwZGF0ZSwgKGV2ZW50OiBTdWJ0aXRsZUN1ZUV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBsYWJlbCA9IHRoaXMuZ2VuZXJhdGVMYWJlbChldmVudCk7XG4gICAgICBjb25zdCBsYWJlbFRvUmVwbGFjZSA9IHN1YnRpdGxlTWFuYWdlci5jdWVVcGRhdGUoZXZlbnQsIGxhYmVsKTtcblxuICAgICAgdGhpcy5wcmVwcm9jZXNzTGFiZWxFdmVudENhbGxiYWNrLmRpc3BhdGNoKGV2ZW50LCBsYWJlbCk7XG5cbiAgICAgIGlmIChsYWJlbFRvUmVwbGFjZSkge1xuICAgICAgICB0aGlzLnN1YnRpdGxlQ29udGFpbmVyTWFuYWdlci5yZXBsYWNlTGFiZWwobGFiZWxUb1JlcGxhY2UsIGxhYmVsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHVpbWFuYWdlci5nZXRDb25maWcoKS5mb3JjZVN1YnRpdGxlc0ludG9WaWV3Q29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlU3VidGl0bGVDcm9wcGluZyhsYWJlbCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQ3VlRXhpdCwgKGV2ZW50OiBTdWJ0aXRsZUN1ZUV2ZW50KSA9PiB7XG4gICAgICBsZXQgbGFiZWxUb1JlbW92ZSA9IHN1YnRpdGxlTWFuYWdlci5jdWVFeGl0KGV2ZW50KTtcblxuICAgICAgaWYgKGxhYmVsVG9SZW1vdmUpIHtcbiAgICAgICAgdGhpcy5zdWJ0aXRsZUNvbnRhaW5lck1hbmFnZXIucmVtb3ZlTGFiZWwobGFiZWxUb1JlbW92ZSk7XG4gICAgICAgIHRoaXMudXBkYXRlQ29tcG9uZW50cygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXN1YnRpdGxlTWFuYWdlci5oYXNDdWVzKSB7XG4gICAgICAgIGlmICghdGhpcy5wcmV2aWV3U3VidGl0bGVBY3RpdmUpIHtcbiAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnN1YnRpdGxlQ29udGFpbmVyTWFuYWdlci5hZGRMYWJlbCh0aGlzLnByZXZpZXdTdWJ0aXRsZSk7XG4gICAgICAgICAgdGhpcy51cGRhdGVDb21wb25lbnRzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGxldCBzdWJ0aXRsZUNsZWFySGFuZGxlciA9ICgpID0+IHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgdGhpcy5zdWJ0aXRsZUNvbnRhaW5lck1hbmFnZXIuY2xlYXIoKTtcbiAgICAgIHN1YnRpdGxlTWFuYWdlci5jbGVhcigpO1xuICAgICAgdGhpcy5yZW1vdmVDb21wb25lbnRzKCk7XG4gICAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudHMoKTtcbiAgICB9O1xuXG4gICAgY29uc3QgY2xlYXJJbmFjdGl2ZUN1ZXMgPSAoKSA9PiB7XG4gICAgICBjb25zdCByZW1vdmVkQWN0aXZlQ3VlcyA9IHN1YnRpdGxlTWFuYWdlci5jbGVhckluYWN0aXZlQ3VlcyhwbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKSk7XG4gICAgICByZW1vdmVkQWN0aXZlQ3Vlcy5mb3JFYWNoKHRvUmVtb3ZlID0+IHtcbiAgICAgICAgdGhpcy5zdWJ0aXRsZUNvbnRhaW5lck1hbmFnZXIucmVtb3ZlTGFiZWwodG9SZW1vdmUubGFiZWwpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BdWRpb0NoYW5nZWQsIHN1YnRpdGxlQ2xlYXJIYW5kbGVyKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU3VidGl0bGVEaXNhYmxlZCwgc3VidGl0bGVDbGVhckhhbmRsZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TZWVrZWQsIGNsZWFySW5hY3RpdmVDdWVzKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVGltZVNoaWZ0ZWQsIGNsZWFySW5hY3RpdmVDdWVzKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGxheWJhY2tGaW5pc2hlZCwgc3VidGl0bGVDbGVhckhhbmRsZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VVbmxvYWRlZCwgc3VidGl0bGVDbGVhckhhbmRsZXIpO1xuXG4gICAgdWltYW5hZ2VyLm9uQ29tcG9uZW50U2hvdy5zdWJzY3JpYmUoKGNvbXBvbmVudDogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4pID0+IHtcbiAgICAgIGlmIChjb21wb25lbnQgaW5zdGFuY2VvZiBDb250cm9sQmFyKSB7XG4gICAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKFN1YnRpdGxlT3ZlcmxheS5DTEFTU19DT05UUk9MQkFSX1ZJU0lCTEUpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1aW1hbmFnZXIub25Db21wb25lbnRIaWRlLnN1YnNjcmliZSgoY29tcG9uZW50OiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPikgPT4ge1xuICAgICAgaWYgKGNvbXBvbmVudCBpbnN0YW5jZW9mIENvbnRyb2xCYXIpIHtcbiAgICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoU3VidGl0bGVPdmVybGF5LkNMQVNTX0NPTlRST0xCQVJfVklTSUJMRSkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5jb25maWd1cmVDZWE2MDhDYXB0aW9ucyhwbGF5ZXIsIHVpbWFuYWdlcik7XG4gICAgLy8gSW5pdFxuICAgIHN1YnRpdGxlQ2xlYXJIYW5kbGVyKCk7XG4gIH1cblxuICBkZXRlY3RDcm9wcGVkU3VidGl0bGVMYWJlbChcbiAgICBsYWJlbEVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICApOiBTdWJ0aXRsZUNyb3BEZXRlY3Rpb25SZXN1bHQge1xuICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuZ2V0RG9tRWxlbWVudCgpLmdldCgwKTtcblxuICAgIGNvbnN0IGNoaWxkUmVjdCA9IGxhYmVsRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCBwYXJlbnRSZWN0ID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogY2hpbGRSZWN0LnRvcCA8IHBhcmVudFJlY3QudG9wLFxuICAgICAgcmlnaHQ6IGNoaWxkUmVjdC5yaWdodCA+IHBhcmVudFJlY3QucmlnaHQsXG4gICAgICBib3R0b206IGNoaWxkUmVjdC5ib3R0b20gPiBwYXJlbnRSZWN0LmJvdHRvbSxcbiAgICAgIGxlZnQ6IGNoaWxkUmVjdC5sZWZ0IDwgcGFyZW50UmVjdC5sZWZ0LFxuICAgIH07XG4gIH1cblxuICBoYW5kbGVTdWJ0aXRsZUNyb3BwaW5nKGxhYmVsOiBTdWJ0aXRsZUxhYmVsKSB7XG4gICAgY29uc3QgbGFiZWxEb21FbGVtZW50ID0gbGFiZWwuZ2V0RG9tRWxlbWVudCgpO1xuICAgIGNvbnN0IGNyb3BEZXRlY3Rpb24gPSB0aGlzLmRldGVjdENyb3BwZWRTdWJ0aXRsZUxhYmVsKFxuICAgICAgbGFiZWxEb21FbGVtZW50LmdldCgwKSxcbiAgICApO1xuXG4gICAgaWYgKGNyb3BEZXRlY3Rpb24udG9wKSB7XG4gICAgICBsYWJlbERvbUVsZW1lbnQuY3NzKCd0b3AnLCAnMCcpO1xuICAgICAgbGFiZWxEb21FbGVtZW50LnJlbW92ZUNzcygnYm90dG9tJyk7XG4gICAgfVxuXG4gICAgaWYgKGNyb3BEZXRlY3Rpb24ucmlnaHQpIHtcbiAgICAgIGxhYmVsRG9tRWxlbWVudC5jc3MoJ3JpZ2h0JywgJzAnKTtcbiAgICAgIGxhYmVsRG9tRWxlbWVudC5yZW1vdmVDc3MoJ2xlZnQnKTtcbiAgICB9XG5cbiAgICBpZiAoY3JvcERldGVjdGlvbi5ib3R0b20pIHtcbiAgICAgIGxhYmVsRG9tRWxlbWVudC5jc3MoJ2JvdHRvbScsICcwJyk7XG4gICAgICBsYWJlbERvbUVsZW1lbnQucmVtb3ZlQ3NzKCd0b3AnKTtcbiAgICB9XG5cbiAgICBpZiAoY3JvcERldGVjdGlvbi5sZWZ0KSB7XG4gICAgICBsYWJlbERvbUVsZW1lbnQuY3NzKCdsZWZ0JywgJzAnKTtcbiAgICAgIGxhYmVsRG9tRWxlbWVudC5yZW1vdmVDc3MoJ3JpZ2h0Jyk7XG4gICAgfVxuICB9XG5cbiAgZ2VuZXJhdGVMYWJlbChldmVudDogU3VidGl0bGVDdWVFdmVudCk6IFN1YnRpdGxlTGFiZWwge1xuICAgIC8vIFNhbml0aXplIGN1ZSBkYXRhIChtdXN0IGJlIGRvbmUgYmVmb3JlIHRoZSBjdWUgSUQgaXMgZ2VuZXJhdGVkIGluIHN1YnRpdGxlTWFuYWdlci5jdWVFbnRlciAvIHVwZGF0ZSlcbiAgICBpZiAoZXZlbnQucG9zaXRpb24pIHtcbiAgICAgIC8vIFNvbWV0aW1lcyB0aGUgcG9zaXRpb25zIGFyZSB1bmRlZmluZWQsIHdlIGFzc3VtZSB0aGVtIHRvIGJlIHplcm9cbiAgICAgIGV2ZW50LnBvc2l0aW9uLnJvdyA9IGV2ZW50LnBvc2l0aW9uLnJvdyB8fCAwO1xuICAgICAgZXZlbnQucG9zaXRpb24uY29sdW1uID0gZXZlbnQucG9zaXRpb24uY29sdW1uIHx8IDA7XG4gICAgfVxuXG4gICAgY29uc3QgbGFiZWwgPSBuZXcgU3VidGl0bGVMYWJlbCh7XG4gICAgICAvLyBQcmVmZXIgdGhlIEhUTUwgc3VidGl0bGUgdGV4dCBpZiBzZXQsIGVsc2UgdHJ5IGdlbmVyYXRpbmcgYSBpbWFnZSB0YWcgYXMgc3RyaW5nIGZyb20gdGhlIGltYWdlIGF0dHJpYnV0ZSxcbiAgICAgIC8vIGVsc2UgdXNlIHRoZSBwbGFpbiB0ZXh0XG4gICAgICB0ZXh0OiBldmVudC5odG1sIHx8IEFjdGl2ZVN1YnRpdGxlTWFuYWdlci5nZW5lcmF0ZUltYWdlVGFnVGV4dChldmVudC5pbWFnZSkgfHwgZXZlbnQudGV4dCxcbiAgICAgIHZ0dDogZXZlbnQudnR0LFxuICAgICAgcmVnaW9uOiBldmVudC5yZWdpb24sXG4gICAgICByZWdpb25TdHlsZTogZXZlbnQucmVnaW9uU3R5bGUsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbGFiZWw7XG4gIH1cblxuICBjb25maWd1cmVDZWE2MDhDYXB0aW9ucyhwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIC8vIFRoZSBjYWxjdWxhdGVkIGZvbnQgc2l6ZVxuICAgIGxldCBmb250U2l6ZSA9IDA7XG4gICAgLy8gVGhlIHJlcXVpcmVkIGxldHRlciBzcGFjaW5nIHNwcmVhZCB0aGUgdGV4dCBjaGFyYWN0ZXJzIGV2ZW5seSBhY3Jvc3MgdGhlIGdyaWRcbiAgICBsZXQgZm9udExldHRlclNwYWNpbmcgPSAwO1xuICAgIC8vIEZsYWcgdGVsbGluZyBpZiBhIGZvbnQgc2l6ZSBjYWxjdWxhdGlvbiBpcyByZXF1aXJlZCBvZiBpZiB0aGUgY3VycmVudCB2YWx1ZXMgYXJlIHZhbGlkXG4gICAgbGV0IGZvbnRTaXplQ2FsY3VsYXRpb25SZXF1aXJlZCA9IHRydWU7XG4gICAgLy8gRmxhZyB0ZWxsaW5nIGlmIHRoZSBDRUEtNjA4IG1vZGUgaXMgZW5hYmxlZFxuICAgIGxldCBlbmFibGVkID0gZmFsc2U7XG5cbiAgICBjb25zdCB1cGRhdGVDRUE2MDhGb250U2l6ZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGR1bW15TGFiZWwgPSBuZXcgU3VidGl0bGVMYWJlbCh7IHRleHQ6ICdYJyB9KTtcbiAgICAgIGR1bW15TGFiZWwuZ2V0RG9tRWxlbWVudCgpLmNzcyh7XG4gICAgICAgIC8vIEJ5IHVzaW5nIGEgbGFyZ2UgZm9udCBzaXplIHdlIGRvIG5vdCBuZWVkIHRvIHVzZSBtdWx0aXBsZSBsZXR0ZXJzIGFuZCBjYW4gZ2V0IHN0aWxsIGFuXG4gICAgICAgIC8vIGFjY3VyYXRlIG1lYXN1cmVtZW50IGV2ZW4gdGhvdWdoIHRoZSByZXR1cm5lZCBzaXplIGlzIGFuIGludGVnZXIgdmFsdWVcbiAgICAgICAgJ2ZvbnQtc2l6ZSc6ICcyMDBweCcsXG4gICAgICAgICdsaW5lLWhlaWdodCc6ICcyMDBweCcsXG4gICAgICAgICd2aXNpYmlsaXR5JzogJ2hpZGRlbicsXG4gICAgICB9KTtcbiAgICAgIHRoaXMuYWRkQ29tcG9uZW50KGR1bW15TGFiZWwpO1xuICAgICAgdGhpcy51cGRhdGVDb21wb25lbnRzKCk7XG4gICAgICB0aGlzLnNob3coKTtcblxuICAgICAgY29uc3QgZHVtbXlMYWJlbENoYXJXaWR0aCA9IGR1bW15TGFiZWwuZ2V0RG9tRWxlbWVudCgpLndpZHRoKCk7XG4gICAgICBjb25zdCBkdW1teUxhYmVsQ2hhckhlaWdodCA9IGR1bW15TGFiZWwuZ2V0RG9tRWxlbWVudCgpLmhlaWdodCgpO1xuICAgICAgY29uc3QgZm9udFNpemVSYXRpbyA9IGR1bW15TGFiZWxDaGFyV2lkdGggLyBkdW1teUxhYmVsQ2hhckhlaWdodDtcblxuICAgICAgdGhpcy5yZW1vdmVDb21wb25lbnQoZHVtbXlMYWJlbCk7XG4gICAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudHMoKTtcbiAgICAgIGlmICghdGhpcy5zdWJ0aXRsZU1hbmFnZXIuaGFzQ3Vlcykge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2Ugc3VidHJhY3QgMXB4IGhlcmUgdG8gYXZvaWQgbGluZSBicmVha3MgYXQgdGhlIHJpZ2h0IGJvcmRlciBvZiB0aGUgc3VidGl0bGUgb3ZlcmxheSB0aGF0IGNhbiBoYXBwZW5cbiAgICAgIC8vIHdoZW4gdGV4dHMgY29udGFpbiB3aGl0ZXNwYWNlcy4gSXQncyBwcm9iYWJseSBzb21lIGtpbmQgb2YgcGl4ZWwgcm91bmRpbmcgaXNzdWUgaW4gdGhlIGJyb3dzZXInc1xuICAgICAgLy8gbGF5b3V0aW5nLCBidXQgdGhlIGFjdHVhbCByZWFzb24gY291bGQgbm90IGJlIGRldGVybWluZWQuIEFpbWluZyBmb3IgYSB0YXJnZXQgd2lkdGggLSAxcHggd291bGQgd29yayBpblxuICAgICAgLy8gbW9zdCBicm93c2VycywgYnV0IFNhZmFyaSBoYXMgYSBcInF1YW50aXplZFwiIGZvbnQgc2l6ZSByZW5kZXJpbmcgd2l0aCBodWdlIHN0ZXBzIGluIGJldHdlZW4gc28gd2UgbmVlZFxuICAgICAgLy8gdG8gc3VidHJhY3Qgc29tZSBtb3JlIHBpeGVscyB0byBhdm9pZCBsaW5lIGJyZWFrcyB0aGVyZSBhcyB3ZWxsLlxuICAgICAgY29uc3Qgc3VidGl0bGVPdmVybGF5V2lkdGggPSB0aGlzLmdldERvbUVsZW1lbnQoKS53aWR0aCgpIC0gMTA7XG4gICAgICBjb25zdCBzdWJ0aXRsZU92ZXJsYXlIZWlnaHQgPSB0aGlzLmdldERvbUVsZW1lbnQoKS5oZWlnaHQoKTtcblxuICAgICAgLy8gVGhlIHNpemUgcmF0aW8gb2YgdGhlIGxldHRlciBncmlkXG4gICAgICBjb25zdCBmb250R3JpZFNpemVSYXRpbyA9IChkdW1teUxhYmVsQ2hhcldpZHRoICogU3VidGl0bGVPdmVybGF5LkNFQTYwOF9OVU1fQ09MVU1OUykgL1xuICAgICAgICAoZHVtbXlMYWJlbENoYXJIZWlnaHQgKiBTdWJ0aXRsZU92ZXJsYXkuQ0VBNjA4X05VTV9ST1dTKTtcbiAgICAgIC8vIFRoZSBzaXplIHJhdGlvIG9mIHRoZSBhdmFpbGFibGUgc3BhY2UgZm9yIHRoZSBncmlkXG4gICAgICBjb25zdCBzdWJ0aXRsZU92ZXJsYXlTaXplUmF0aW8gPSBzdWJ0aXRsZU92ZXJsYXlXaWR0aCAvIHN1YnRpdGxlT3ZlcmxheUhlaWdodDtcblxuICAgICAgaWYgKHN1YnRpdGxlT3ZlcmxheVNpemVSYXRpbyA+IGZvbnRHcmlkU2l6ZVJhdGlvKSB7XG4gICAgICAgIC8vIFdoZW4gdGhlIGF2YWlsYWJsZSBzcGFjZSBpcyB3aWRlciB0aGFuIHRoZSB0ZXh0IGdyaWQsIHRoZSBmb250IHNpemUgaXMgc2ltcGx5XG4gICAgICAgIC8vIGRldGVybWluZWQgYnkgdGhlIGhlaWdodCBvZiB0aGUgYXZhaWxhYmxlIHNwYWNlLlxuICAgICAgICBmb250U2l6ZSA9IHN1YnRpdGxlT3ZlcmxheUhlaWdodCAvIFN1YnRpdGxlT3ZlcmxheS5DRUE2MDhfTlVNX1JPV1M7XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBhZGRpdGlvbmFsIGxldHRlciBzcGFjaW5nIHJlcXVpcmVkIHRvIGV2ZW5seSBzcHJlYWQgdGhlIHRleHQgYWNyb3NzIHRoZSBncmlkJ3Mgd2lkdGhcbiAgICAgICAgY29uc3QgZ3JpZFNsb3RXaWR0aCA9IHN1YnRpdGxlT3ZlcmxheVdpZHRoIC8gU3VidGl0bGVPdmVybGF5LkNFQTYwOF9OVU1fQ09MVU1OUztcbiAgICAgICAgY29uc3QgZm9udENoYXJXaWR0aCA9IGZvbnRTaXplICogZm9udFNpemVSYXRpbztcbiAgICAgICAgZm9udExldHRlclNwYWNpbmcgPSBncmlkU2xvdFdpZHRoIC0gZm9udENoYXJXaWR0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFdoZW4gdGhlIGF2YWlsYWJsZSBzcGFjZSBpcyBub3Qgd2lkZSBlbm91Z2gsIHRleHRzIHdvdWxkIHZlcnRpY2FsbHkgb3ZlcmxhcCBpZiB3ZSB0YWtlXG4gICAgICAgIC8vIHRoZSBoZWlnaHQgYXMgYSBiYXNlIGZvciB0aGUgZm9udCBzaXplLCBzbyB3ZSBuZWVkIHRvIGxpbWl0IHRoZSBoZWlnaHQuIFdlIGRvIHRoYXRcbiAgICAgICAgLy8gYnkgZGV0ZXJtaW5pbmcgdGhlIGZvbnQgc2l6ZSBieSB0aGUgd2lkdGggb2YgdGhlIGF2YWlsYWJsZSBzcGFjZS5cbiAgICAgICAgZm9udFNpemUgPSBzdWJ0aXRsZU92ZXJsYXlXaWR0aCAvIFN1YnRpdGxlT3ZlcmxheS5DRUE2MDhfTlVNX0NPTFVNTlMgLyBmb250U2l6ZVJhdGlvO1xuICAgICAgICBmb250TGV0dGVyU3BhY2luZyA9IDA7XG4gICAgICB9XG5cbiAgICAgIC8vIFVwZGF0ZSBmb250LXNpemUgb2YgYWxsIGFjdGl2ZSBzdWJ0aXRsZSBsYWJlbHNcbiAgICAgIGZvciAobGV0IGxhYmVsIG9mIHRoaXMuZ2V0Q29tcG9uZW50cygpKSB7XG4gICAgICAgIGlmIChsYWJlbCBpbnN0YW5jZW9mIFN1YnRpdGxlTGFiZWwpIHtcbiAgICAgICAgICBsYWJlbC5nZXREb21FbGVtZW50KCkuY3NzKHtcbiAgICAgICAgICAgICdmb250LXNpemUnOiBgJHtmb250U2l6ZX1weGAsXG4gICAgICAgICAgICAnbGV0dGVyLXNwYWNpbmcnOiBgJHtmb250TGV0dGVyU3BhY2luZ31weGAsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXllclJlc2l6ZWQsICgpID0+IHtcbiAgICAgIGlmIChlbmFibGVkKSB7XG4gICAgICAgIHVwZGF0ZUNFQTYwOEZvbnRTaXplKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb250U2l6ZUNhbGN1bGF0aW9uUmVxdWlyZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5wcmVwcm9jZXNzTGFiZWxFdmVudENhbGxiYWNrLnN1YnNjcmliZSgoZXZlbnQ6IFN1YnRpdGxlQ3VlRXZlbnQsIGxhYmVsOiBTdWJ0aXRsZUxhYmVsKSA9PiB7XG4gICAgICBjb25zdCBpc0NFQTYwOCA9IGV2ZW50LnBvc2l0aW9uICE9IG51bGw7XG4gICAgICBpZiAoIWlzQ0VBNjA4KSB7XG4gICAgICAgIC8vIFNraXAgYWxsIG5vbi1DRUE2MDggY3Vlc1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghZW5hYmxlZCkge1xuICAgICAgICBlbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoU3VidGl0bGVPdmVybGF5LkNMQVNTX0NFQV82MDgpKTtcblxuICAgICAgICAvLyBXZSBjb25kaXRpb25hbGx5IHVwZGF0ZSB0aGUgZm9udCBzaXplIGJ5IHRoaXMgZmxhZyBoZXJlIHRvIGF2b2lkIHVwZGF0aW5nIGV2ZXJ5IHRpbWUgYSBzdWJ0aXRsZVxuICAgICAgICAvLyBpcyBhZGRlZCBpbnRvIGFuIGVtcHR5IG92ZXJsYXkuIEJlY2F1c2Ugd2UgcmVzZXQgdGhlIG92ZXJsYXkgd2hlbiBhbGwgc3VidGl0bGVzIGFyZSBnb25lLCB0aGlzXG4gICAgICAgIC8vIHdvdWxkIHRyaWdnZXIgYW4gdW5uZWNlc3NhcnkgdXBkYXRlIGV2ZXJ5IHRpbWUsIGJ1dCBpdCdzIG9ubHkgcmVxdWlyZWQgdW5kZXIgY2VydGFpbiBjb25kaXRpb25zLFxuICAgICAgICAvLyBlLmcuIGFmdGVyIHRoZSBwbGF5ZXIgc2l6ZSBoYXMgY2hhbmdlZC5cbiAgICAgICAgaWYgKGZvbnRTaXplQ2FsY3VsYXRpb25SZXF1aXJlZCkge1xuICAgICAgICAgIHVwZGF0ZUNFQTYwOEZvbnRTaXplKCk7XG4gICAgICAgICAgZm9udFNpemVDYWxjdWxhdGlvblJlcXVpcmVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGFiZWwuZ2V0RG9tRWxlbWVudCgpLmNzcyh7XG4gICAgICAgICdsZWZ0JzogYCR7ZXZlbnQucG9zaXRpb24uY29sdW1uICogU3VidGl0bGVPdmVybGF5LkNFQTYwOF9DT0xVTU5fT0ZGU0VUfSVgLFxuICAgICAgICAndG9wJzogYCR7ZXZlbnQucG9zaXRpb24ucm93ICogU3VidGl0bGVPdmVybGF5LkNFQTYwOF9ST1dfT0ZGU0VUfSVgLFxuICAgICAgICAnZm9udC1zaXplJzogYCR7Zm9udFNpemV9cHhgLFxuICAgICAgICAnbGV0dGVyLXNwYWNpbmcnOiBgJHtmb250TGV0dGVyU3BhY2luZ31weGAsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc2V0ID0gKCkgPT4ge1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoU3VidGl0bGVPdmVybGF5LkNMQVNTX0NFQV82MDgpKTtcbiAgICAgIGVuYWJsZWQgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkN1ZUV4aXQsICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5zdWJ0aXRsZU1hbmFnZXIuaGFzQ3Vlcykge1xuICAgICAgICAvLyBEaXNhYmxlIENFQS02MDggbW9kZSB3aGVuIGFsbCBzdWJ0aXRsZXMgYXJlIGdvbmUgKHRvIGFsbG93IGNvcnJlY3QgZm9ybWF0dGluZyBhbmRcbiAgICAgICAgLy8gZGlzcGxheSBvZiBvdGhlciB0eXBlcyBvZiBzdWJ0aXRsZXMsIGUuZy4gdGhlIGZvcm1hdHRpbmcgcHJldmlldyBzdWJ0aXRsZSlcbiAgICAgICAgcmVzZXQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VVbmxvYWRlZCwgcmVzZXQpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TdWJ0aXRsZUVuYWJsZWQsIHJlc2V0KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU3VidGl0bGVEaXNhYmxlZCwgcmVzZXQpO1xuICB9XG5cbiAgZW5hYmxlUHJldmlld1N1YnRpdGxlTGFiZWwoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLnN1YnRpdGxlTWFuYWdlci5oYXNDdWVzKSB7XG4gICAgICB0aGlzLnByZXZpZXdTdWJ0aXRsZUFjdGl2ZSA9IHRydWU7XG4gICAgICB0aGlzLnN1YnRpdGxlQ29udGFpbmVyTWFuYWdlci5hZGRMYWJlbCh0aGlzLnByZXZpZXdTdWJ0aXRsZSk7XG4gICAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudHMoKTtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZVByZXZpZXdTdWJ0aXRsZUxhYmVsKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnByZXZpZXdTdWJ0aXRsZUFjdGl2ZSkge1xuICAgICAgdGhpcy5wcmV2aWV3U3VidGl0bGVBY3RpdmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuc3VidGl0bGVDb250YWluZXJNYW5hZ2VyLnJlbW92ZUxhYmVsKHRoaXMucHJldmlld1N1YnRpdGxlKTtcbiAgICAgIHRoaXMudXBkYXRlQ29tcG9uZW50cygpO1xuICAgIH1cbiAgfVxufVxuXG5pbnRlcmZhY2UgQWN0aXZlU3VidGl0bGVDdWUge1xuICBldmVudDogU3VidGl0bGVDdWVFdmVudDtcbiAgbGFiZWw6IFN1YnRpdGxlTGFiZWw7XG59XG5cbmludGVyZmFjZSBBY3RpdmVTdWJ0aXRsZUN1ZU1hcCB7XG4gIFtpZDogc3RyaW5nXTogQWN0aXZlU3VidGl0bGVDdWVbXTtcbn1cblxuaW50ZXJmYWNlIFN1YnRpdGxlTGFiZWxDb25maWcgZXh0ZW5kcyBMYWJlbENvbmZpZyB7XG4gIHZ0dD86IFZUVFByb3BlcnRpZXM7XG4gIHJlZ2lvbj86IHN0cmluZztcbiAgcmVnaW9uU3R5bGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBTdWJ0aXRsZUxhYmVsIGV4dGVuZHMgTGFiZWw8U3VidGl0bGVMYWJlbENvbmZpZz4ge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU3VidGl0bGVMYWJlbENvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktc3VidGl0bGUtbGFiZWwnLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGdldCB2dHQoKTogVlRUUHJvcGVydGllcyB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLnZ0dDtcbiAgfVxuXG4gIGdldCByZWdpb24oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcucmVnaW9uO1xuICB9XG5cbiAgZ2V0IHJlZ2lvblN0eWxlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLnJlZ2lvblN0eWxlO1xuICB9XG59XG5cbmNsYXNzIEFjdGl2ZVN1YnRpdGxlTWFuYWdlciB7XG5cbiAgcHJpdmF0ZSBhY3RpdmVTdWJ0aXRsZUN1ZU1hcDogQWN0aXZlU3VidGl0bGVDdWVNYXA7XG4gIHByaXZhdGUgYWN0aXZlU3VidGl0bGVDdWVDb3VudDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYWN0aXZlU3VidGl0bGVDdWVNYXAgPSB7fTtcbiAgICB0aGlzLmFjdGl2ZVN1YnRpdGxlQ3VlQ291bnQgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgYSB1bmlxdWUgSUQgZm9yIGEgc3VidGl0bGUgY3VlLCB3aGljaCBpcyBuZWVkZWQgdG8gYXNzb2NpYXRlIGFuIEN1ZUVudGVyIHdpdGggaXRzIEN1ZUV4aXRcbiAgICogZXZlbnQgc28gd2UgY2FuIHJlbW92ZSB0aGUgY29ycmVjdCBzdWJ0aXRsZSBpbiBDdWVFeGl0IHdoZW4gbXVsdGlwbGUgc3VidGl0bGVzIGFyZSBhY3RpdmUgYXQgdGhlIHNhbWUgdGltZS5cbiAgICogVGhlIHN0YXJ0IHRpbWUgcGx1cyB0aGUgdGV4dCBzaG91bGQgbWFrZSBhIHVuaXF1ZSBpZGVudGlmaWVyLCBhbmQgaW4gdGhlIG9ubHkgY2FzZSB3aGVyZSBhIGNvbGxpc2lvblxuICAgKiBjYW4gaGFwcGVuLCB0d28gc2ltaWxhciB0ZXh0cyB3aWxsIGJlIGRpc3BsYXllZCBhdCBhIHNpbWlsYXIgdGltZSBhbmQgYSBzaW1pbGFyIHBvc2l0aW9uIChvciB3aXRob3V0IHBvc2l0aW9uKS5cbiAgICogVGhlIHN0YXJ0IHRpbWUgc2hvdWxkIGFsd2F5cyBiZSBrbm93biwgYmVjYXVzZSBpdCBpcyByZXF1aXJlZCB0byBzY2hlZHVsZSB0aGUgQ3VlRW50ZXIgZXZlbnQuIFRoZSBlbmQgdGltZVxuICAgKiBtdXN0IG5vdCBuZWNlc3NhcmlseSBiZSBrbm93biBhbmQgdGhlcmVmb3JlIGNhbm5vdCBiZSB1c2VkIGZvciB0aGUgSUQuXG4gICAqIEBwYXJhbSBldmVudFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBjYWxjdWxhdGVJZChldmVudDogU3VidGl0bGVDdWVFdmVudCk6IHN0cmluZyB7XG4gICAgbGV0IGlkID0gZXZlbnQuc3RhcnQgKyAnLScgKyBldmVudC50ZXh0O1xuXG4gICAgaWYgKGV2ZW50LnBvc2l0aW9uKSB7XG4gICAgICBpZCArPSAnLScgKyBldmVudC5wb3NpdGlvbi5yb3cgKyAnLScgKyBldmVudC5wb3NpdGlvbi5jb2x1bW47XG4gICAgfVxuXG4gICAgcmV0dXJuIGlkO1xuICB9XG5cbiAgY3VlRW50ZXIoZXZlbnQ6IFN1YnRpdGxlQ3VlRXZlbnQsIGxhYmVsOiBTdWJ0aXRsZUxhYmVsKTogdm9pZCB7XG4gICAgdGhpcy5hZGRDdWVUb01hcChldmVudCwgbGFiZWwpO1xuICB9XG5cbiAgY3VlVXBkYXRlKGV2ZW50OiBTdWJ0aXRsZUN1ZUV2ZW50LCBsYWJlbDogU3VidGl0bGVMYWJlbCk6IFN1YnRpdGxlTGFiZWwgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IGxhYmVsVG9SZXBsYWNlID0gdGhpcy5wb3BDdWVGcm9tTWFwKGV2ZW50KTtcblxuICAgIGlmIChsYWJlbFRvUmVwbGFjZSkge1xuICAgICAgdGhpcy5hZGRDdWVUb01hcChldmVudCwgbGFiZWwpO1xuICAgICAgcmV0dXJuIGxhYmVsVG9SZXBsYWNlO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBwcml2YXRlIGFkZEN1ZVRvTWFwKGV2ZW50OiBTdWJ0aXRsZUN1ZUV2ZW50LCBsYWJlbDogU3VidGl0bGVMYWJlbCk6IHZvaWQge1xuICAgIGxldCBpZCA9IEFjdGl2ZVN1YnRpdGxlTWFuYWdlci5jYWxjdWxhdGVJZChldmVudCk7XG5cbiAgICAvLyBDcmVhdGUgYXJyYXkgZm9yIGlkIGlmIGl0IGRvZXMgbm90IGV4aXN0XG4gICAgdGhpcy5hY3RpdmVTdWJ0aXRsZUN1ZU1hcFtpZF0gPSB0aGlzLmFjdGl2ZVN1YnRpdGxlQ3VlTWFwW2lkXSB8fCBbXTtcblxuICAgIC8vIEFkZCBjdWVcbiAgICB0aGlzLmFjdGl2ZVN1YnRpdGxlQ3VlTWFwW2lkXS5wdXNoKHsgZXZlbnQsIGxhYmVsIH0pO1xuICAgIHRoaXMuYWN0aXZlU3VidGl0bGVDdWVDb3VudCsrO1xuICB9XG5cbiAgcHJpdmF0ZSBwb3BDdWVGcm9tTWFwKGV2ZW50OiBTdWJ0aXRsZUN1ZUV2ZW50KTogU3VidGl0bGVMYWJlbCB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGlkID0gQWN0aXZlU3VidGl0bGVNYW5hZ2VyLmNhbGN1bGF0ZUlkKGV2ZW50KTtcbiAgICBsZXQgYWN0aXZlU3VidGl0bGVDdWVzID0gdGhpcy5hY3RpdmVTdWJ0aXRsZUN1ZU1hcFtpZF07XG5cbiAgICBpZiAoYWN0aXZlU3VidGl0bGVDdWVzICYmIGFjdGl2ZVN1YnRpdGxlQ3Vlcy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBSZW1vdmUgY3VlXG4gICAgICAvKiBXZSBhcHBseSB0aGUgRklGTyBhcHByb2FjaCBoZXJlIGFuZCByZW1vdmUgdGhlIG9sZGVzdCBjdWUgZnJvbSB0aGUgYXNzb2NpYXRlZCBpZC4gV2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgY3Vlc1xuICAgICAgICogd2l0aCB0aGUgc2FtZSBpZCwgdGhlcmUgaXMgbm8gd2F5IHRvIGtub3cgd2hpY2ggb25lIG9mIHRoZSBjdWVzIGlzIHRvIGJlIGRlbGV0ZWQsIHNvIHdlIGp1c3QgaG9wZSB0aGF0IEZJRk9cbiAgICAgICAqIHdvcmtzIGZpbmUuIFRoZW9yZXRpY2FsbHkgaXQgY2FuIGhhcHBlbiB0aGF0IHR3byBjdWVzIHdpdGggY29sbGlkaW5nIGlkcyBhcmUgcmVtb3ZlZCBhdCBkaWZmZXJlbnQgdGltZXMsIGluXG4gICAgICAgKiB0aGUgd3Jvbmcgb3JkZXIuIFRoaXMgcmFyZSBjYXNlIGhhcyB5ZXQgdG8gYmUgb2JzZXJ2ZWQuIElmIGl0IGV2ZXIgZ2V0cyBhbiBpc3N1ZSwgd2UgY2FuIHRha2UgdGhlIHVuc3RhYmxlXG4gICAgICAgKiBjdWUgZW5kIHRpbWUgKHdoaWNoIGNhbiBjaGFuZ2UgYmV0d2VlbiBDdWVFbnRlciBhbmQgQ3VlRXhpdCBJTiBDdWVVcGRhdGUpIGFuZCB1c2UgaXQgYXMgYW5cbiAgICAgICAqIGFkZGl0aW9uYWwgaGludCB0byB0cnkgYW5kIHJlbW92ZSB0aGUgY29ycmVjdCBvbmUgb2YgdGhlIGNvbGxpZGluZyBjdWVzLlxuICAgICAgICovXG4gICAgICBsZXQgYWN0aXZlU3VidGl0bGVDdWUgPSBhY3RpdmVTdWJ0aXRsZUN1ZXMuc2hpZnQoKTtcbiAgICAgIHRoaXMuYWN0aXZlU3VidGl0bGVDdWVDb3VudC0tO1xuXG4gICAgICByZXR1cm4gYWN0aXZlU3VidGl0bGVDdWUubGFiZWw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYWxsIGFjdGl2ZSBjdWVzIHdoaWNoIGRvbid0IGVuY2xvc2UgdGhlIGdpdmVuIHRpbWVcbiAgICogQHBhcmFtIHRpbWUgdGhlIHRpbWUgZm9yIHdoaWNoIHN1YnRpdGxlcyBzaG91bGQgcmVtYWluXG4gICAqL1xuICBwdWJsaWMgY2xlYXJJbmFjdGl2ZUN1ZXModGltZTogbnVtYmVyKTogQWN0aXZlU3VidGl0bGVDdWVbXSB7XG4gICAgY29uc3QgcmVtb3ZlZEN1ZXM6IEFjdGl2ZVN1YnRpdGxlQ3VlW10gPSBbXTtcbiAgICBPYmplY3Qua2V5cyh0aGlzLmFjdGl2ZVN1YnRpdGxlQ3VlTWFwKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBjb25zdCBhY3RpdmVDdWVzID0gdGhpcy5hY3RpdmVTdWJ0aXRsZUN1ZU1hcFtrZXldO1xuICAgICAgYWN0aXZlQ3Vlcy5mb3JFYWNoKGN1ZSA9PiB7XG4gICAgICAgIGlmICh0aW1lIDwgY3VlLmV2ZW50LnN0YXJ0IHx8IHRpbWUgPiBjdWUuZXZlbnQuZW5kKSB7XG4gICAgICAgICAgdGhpcy5wb3BDdWVGcm9tTWFwKGN1ZS5ldmVudCk7XG4gICAgICAgICAgcmVtb3ZlZEN1ZXMucHVzaChjdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVtb3ZlZEN1ZXM7XG4gIH1cblxuICBzdGF0aWMgZ2VuZXJhdGVJbWFnZVRhZ1RleHQoaW1hZ2VEYXRhOiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIGlmICghaW1hZ2VEYXRhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaW1nVGFnID0gbmV3IERPTSgnaW1nJywge1xuICAgICAgc3JjOiBpbWFnZURhdGEsXG4gICAgfSk7XG4gICAgaW1nVGFnLmNzcygnd2lkdGgnLCAnMTAwJScpO1xuICAgIHJldHVybiBpbWdUYWcuZ2V0KDApLm91dGVySFRNTDsgLy8gcmV0dXJuIHRoZSBodG1sIGFzIHN0cmluZ1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxhYmVsIGFzc29jaWF0ZWQgd2l0aCBhbiBhbHJlYWR5IGFkZGVkIGN1ZS5cbiAgICogQHBhcmFtIGV2ZW50XG4gICAqIEByZXR1cm4ge1N1YnRpdGxlTGFiZWx9XG4gICAqL1xuICBnZXRDdWVzKGV2ZW50OiBTdWJ0aXRsZUN1ZUV2ZW50KTogU3VidGl0bGVMYWJlbFtdIHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaWQgPSBBY3RpdmVTdWJ0aXRsZU1hbmFnZXIuY2FsY3VsYXRlSWQoZXZlbnQpO1xuICAgIGxldCBhY3RpdmVTdWJ0aXRsZUN1ZXMgPSB0aGlzLmFjdGl2ZVN1YnRpdGxlQ3VlTWFwW2lkXTtcbiAgICBpZiAoYWN0aXZlU3VidGl0bGVDdWVzICYmIGFjdGl2ZVN1YnRpdGxlQ3Vlcy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gYWN0aXZlU3VidGl0bGVDdWVzLm1hcCgoY3VlKSA9PiBjdWUubGFiZWwpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHRoZSBzdWJ0aXRsZSBjdWUgZnJvbSB0aGUgbWFuYWdlciBhbmQgcmV0dXJucyB0aGUgbGFiZWwgdGhhdCBzaG91bGQgYmUgcmVtb3ZlZCBmcm9tIHRoZSBzdWJ0aXRsZSBvdmVybGF5LFxuICAgKiBvciBudWxsIGlmIHRoZXJlIGlzIG5vIGFzc29jaWF0ZWQgbGFiZWwgZXhpc3RpbmcgKGUuZy4gYmVjYXVzZSBhbGwgbGFiZWxzIGhhdmUgYmVlbiB7QGxpbmsgI2NsZWFyIGNsZWFyZWR9LlxuICAgKiBAcGFyYW0gZXZlbnRcbiAgICogQHJldHVybiB7U3VidGl0bGVMYWJlbHxudWxsfVxuICAgKi9cbiAgY3VlRXhpdChldmVudDogU3VidGl0bGVDdWVFdmVudCk6IFN1YnRpdGxlTGFiZWwge1xuICAgIHJldHVybiB0aGlzLnBvcEN1ZUZyb21NYXAoZXZlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBhY3RpdmUgc3VidGl0bGUgY3Vlcy5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGN1ZUNvdW50KCk6IG51bWJlciB7XG4gICAgLy8gV2UgZXhwbGljaXRseSBjb3VudCB0aGUgY3VlcyB0byBzYXZlIGFuIEFycmF5LnJlZHVjZSBvbiBldmVyeSBjdWVDb3VudCBjYWxsICh3aGljaCBjYW4gaGFwcGVuIGZyZXF1ZW50bHkpXG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlU3VidGl0bGVDdWVDb3VudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlcmUgYXJlIGFjdGl2ZSBzdWJ0aXRsZSBjdWVzLCBlbHNlIGZhbHNlLlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGhhc0N1ZXMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY3VlQ291bnQgPiAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYWxsIHN1YnRpdGxlIGN1ZXMgZnJvbSB0aGUgbWFuYWdlci5cbiAgICovXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuYWN0aXZlU3VidGl0bGVDdWVNYXAgPSB7fTtcbiAgICB0aGlzLmFjdGl2ZVN1YnRpdGxlQ3VlQ291bnQgPSAwO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdWJ0aXRsZVJlZ2lvbkNvbnRhaW5lck1hbmFnZXIge1xuICBwcml2YXRlIHN1YnRpdGxlUmVnaW9uQ29udGFpbmVyczogeyBbcmVnaW9uTmFtZTogc3RyaW5nXTogU3VidGl0bGVSZWdpb25Db250YWluZXIgfSA9IHt9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0gc3VidGl0bGVPdmVybGF5IFJlZmVyZW5jZSB0byB0aGUgc3VidGl0bGUgb3ZlcmxheSBmb3IgYWRkaW5nIGFuZCByZW1vdmluZyB0aGUgY29udGFpbmVycy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc3VidGl0bGVPdmVybGF5OiBTdWJ0aXRsZU92ZXJsYXkpIHtcbiAgICB0aGlzLnN1YnRpdGxlT3ZlcmxheSA9IHN1YnRpdGxlT3ZlcmxheTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UmVnaW9uKGxhYmVsOiBTdWJ0aXRsZUxhYmVsKTogeyByZWdpb25Db250YWluZXJJZDogc3RyaW5nLCByZWdpb25OYW1lOiBzdHJpbmcgfSB7XG4gICAgaWYgKGxhYmVsLnZ0dCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVnaW9uQ29udGFpbmVySWQ6IGxhYmVsLnZ0dC5yZWdpb24gJiYgbGFiZWwudnR0LnJlZ2lvbi5pZCA/IGxhYmVsLnZ0dC5yZWdpb24uaWQgOiAndnR0JyxcbiAgICAgICAgcmVnaW9uTmFtZTogJ3Z0dCcsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICByZWdpb25Db250YWluZXJJZDogbGFiZWwucmVnaW9uIHx8ICdkZWZhdWx0JyxcbiAgICAgIHJlZ2lvbk5hbWU6IGxhYmVsLnJlZ2lvbiB8fCAnZGVmYXVsdCcsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuZCB3cmFwcyBhIHN1YnRpdGxlIGxhYmVsIGludG8gYSBjb250YWluZXIgZGl2IGJhc2VkIG9uIHRoZSBzdWJ0aXRsZSByZWdpb24uXG4gICAqIElmIHRoZSBzdWJ0aXRsZSBoYXMgcG9zaXRpb25pbmcgaW5mb3JtYXRpb24gaXQgaXMgYWRkZWQgdG8gdGhlIGNvbnRhaW5lci5cbiAgICogQHBhcmFtIGxhYmVsIFRoZSBzdWJ0aXRsZSBsYWJlbCB0byB3cmFwXG4gICAqL1xuICBhZGRMYWJlbChsYWJlbDogU3VidGl0bGVMYWJlbCwgb3ZlcmxheVNpemU/OiBTaXplKTogdm9pZCB7XG4gICAgY29uc3QgeyByZWdpb25Db250YWluZXJJZCwgcmVnaW9uTmFtZSB9ID0gdGhpcy5nZXRSZWdpb24obGFiZWwpO1xuICAgIGNvbnN0IGNzc0NsYXNzZXMgPSBbYHN1YnRpdGxlLXBvc2l0aW9uLSR7cmVnaW9uTmFtZX1gXTtcblxuICAgIGlmIChsYWJlbC52dHQgJiYgbGFiZWwudnR0LnJlZ2lvbikge1xuICAgICAgY3NzQ2xhc3Nlcy5wdXNoKGB2dHQtcmVnaW9uLSR7bGFiZWwudnR0LnJlZ2lvbi5pZH1gKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc3VidGl0bGVSZWdpb25Db250YWluZXJzW3JlZ2lvbkNvbnRhaW5lcklkXSkge1xuICAgICAgY29uc3QgcmVnaW9uQ29udGFpbmVyID0gbmV3IFN1YnRpdGxlUmVnaW9uQ29udGFpbmVyKHtcbiAgICAgICAgY3NzQ2xhc3NlcyxcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnN1YnRpdGxlUmVnaW9uQ29udGFpbmVyc1tyZWdpb25Db250YWluZXJJZF0gPSByZWdpb25Db250YWluZXI7XG5cbiAgICAgIGlmIChsYWJlbC5yZWdpb25TdHlsZSkge1xuICAgICAgICByZWdpb25Db250YWluZXIuZ2V0RG9tRWxlbWVudCgpLmF0dHIoJ3N0eWxlJywgbGFiZWwucmVnaW9uU3R5bGUpO1xuICAgICAgfSBlbHNlIGlmIChsYWJlbC52dHQgJiYgIWxhYmVsLnZ0dC5yZWdpb24pIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoZXJlIGlzIG5vIHJlZ2lvbiBwcmVzZW50IHRvIHdyYXAgdGhlIEN1ZSBCb3gsIHRoZSBDdWUgYm94IGJlY29tZXMgdGhlXG4gICAgICAgICAqIHJlZ2lvbiBpdHNlbGYuIFRoZXJlZm9yZSB0aGUgcG9zaXRpb25pbmcgdmFsdWVzIGhhdmUgdG8gY29tZSBmcm9tIHRoZSBib3guXG4gICAgICAgICAqL1xuICAgICAgICByZWdpb25Db250YWluZXIuZ2V0RG9tRWxlbWVudCgpLmNzcygncG9zaXRpb24nLCAnc3RhdGljJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBnZXREb21FbGVtZW50IG5lZWRzIHRvIGJlIGNhbGxlZCBhdCBsZWFzdCBvbmNlIHRvIGVuc3VyZSB0aGUgY29tcG9uZW50IGV4aXN0c1xuICAgICAgICByZWdpb25Db250YWluZXIuZ2V0RG9tRWxlbWVudCgpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGNvbnN0IHJlZ2lvbkNvbnRhaW5lcklkIGluIHRoaXMuc3VidGl0bGVSZWdpb25Db250YWluZXJzKSB7XG4gICAgICAgIHRoaXMuc3VidGl0bGVPdmVybGF5LmFkZENvbXBvbmVudCh0aGlzLnN1YnRpdGxlUmVnaW9uQ29udGFpbmVyc1tyZWdpb25Db250YWluZXJJZF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc3VidGl0bGVSZWdpb25Db250YWluZXJzW3JlZ2lvbkNvbnRhaW5lcklkXS5hZGRMYWJlbChsYWJlbCwgb3ZlcmxheVNpemUpO1xuICB9XG5cbiAgcmVwbGFjZUxhYmVsKHByZXZpb3VzTGFiZWw6IFN1YnRpdGxlTGFiZWwsIG5ld0xhYmVsOiBTdWJ0aXRsZUxhYmVsKTogdm9pZCB7XG4gICAgY29uc3QgeyByZWdpb25Db250YWluZXJJZCB9ID0gdGhpcy5nZXRSZWdpb24ocHJldmlvdXNMYWJlbCk7XG5cbiAgICB0aGlzLnN1YnRpdGxlUmVnaW9uQ29udGFpbmVyc1tyZWdpb25Db250YWluZXJJZF0ucmVtb3ZlTGFiZWwocHJldmlvdXNMYWJlbCk7XG4gICAgdGhpcy5zdWJ0aXRsZVJlZ2lvbkNvbnRhaW5lcnNbcmVnaW9uQ29udGFpbmVySWRdLmFkZExhYmVsKG5ld0xhYmVsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgc3VidGl0bGUgbGFiZWwgZnJvbSBhIGNvbnRhaW5lci5cbiAgICovXG4gIHJlbW92ZUxhYmVsKGxhYmVsOiBTdWJ0aXRsZUxhYmVsKTogdm9pZCB7XG4gICAgbGV0IHJlZ2lvbkNvbnRhaW5lcklkO1xuXG4gICAgaWYgKGxhYmVsLnZ0dCkge1xuICAgICAgcmVnaW9uQ29udGFpbmVySWQgPSBsYWJlbC52dHQucmVnaW9uICYmIGxhYmVsLnZ0dC5yZWdpb24uaWQgPyBsYWJlbC52dHQucmVnaW9uLmlkIDogJ3Z0dCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZ2lvbkNvbnRhaW5lcklkID0gbGFiZWwucmVnaW9uIHx8ICdkZWZhdWx0JztcbiAgICB9XG5cbiAgICB0aGlzLnN1YnRpdGxlUmVnaW9uQ29udGFpbmVyc1tyZWdpb25Db250YWluZXJJZF0ucmVtb3ZlTGFiZWwobGFiZWwpO1xuXG4gICAgLy8gUmVtb3ZlIGNvbnRhaW5lciBpZiBubyBtb3JlIGxhYmVscyBhcmUgZGlzcGxheWVkXG4gICAgaWYgKHRoaXMuc3VidGl0bGVSZWdpb25Db250YWluZXJzW3JlZ2lvbkNvbnRhaW5lcklkXS5pc0VtcHR5KCkpIHtcbiAgICAgIHRoaXMuc3VidGl0bGVPdmVybGF5LnJlbW92ZUNvbXBvbmVudCh0aGlzLnN1YnRpdGxlUmVnaW9uQ29udGFpbmVyc1tyZWdpb25Db250YWluZXJJZF0pO1xuICAgICAgZGVsZXRlIHRoaXMuc3VidGl0bGVSZWdpb25Db250YWluZXJzW3JlZ2lvbkNvbnRhaW5lcklkXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgc3VidGl0bGUgY29udGFpbmVycy5cbiAgICovXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIGZvciAoY29uc3QgcmVnaW9uTmFtZSBpbiB0aGlzLnN1YnRpdGxlUmVnaW9uQ29udGFpbmVycykge1xuICAgICAgdGhpcy5zdWJ0aXRsZU92ZXJsYXkucmVtb3ZlQ29tcG9uZW50KHRoaXMuc3VidGl0bGVSZWdpb25Db250YWluZXJzW3JlZ2lvbk5hbWVdKTtcbiAgICB9XG5cbiAgICB0aGlzLnN1YnRpdGxlUmVnaW9uQ29udGFpbmVycyA9IHt9O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdWJ0aXRsZVJlZ2lvbkNvbnRhaW5lciBleHRlbmRzIENvbnRhaW5lcjxDb250YWluZXJDb25maWc+IHtcbiAgcHJpdmF0ZSBsYWJlbENvdW50ID0gMDtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbnRhaW5lckNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAnc3VidGl0bGUtcmVnaW9uLWNvbnRhaW5lcicsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgYWRkTGFiZWwobGFiZWxUb0FkZDogU3VidGl0bGVMYWJlbCwgb3ZlcmxheVNpemU/OiBTaXplKSB7XG4gICAgdGhpcy5sYWJlbENvdW50Kys7XG5cbiAgICBpZiAobGFiZWxUb0FkZC52dHQpIHtcbiAgICAgIGlmIChsYWJlbFRvQWRkLnZ0dC5yZWdpb24gJiYgb3ZlcmxheVNpemUpIHtcbiAgICAgICAgVnR0VXRpbHMuc2V0VnR0UmVnaW9uU3R5bGVzKHRoaXMsIGxhYmVsVG9BZGQudnR0LnJlZ2lvbiwgb3ZlcmxheVNpemUpO1xuICAgICAgfVxuXG4gICAgICBWdHRVdGlscy5zZXRWdHRDdWVCb3hTdHlsZXMobGFiZWxUb0FkZCwgb3ZlcmxheVNpemUpO1xuICAgIH1cblxuICAgIHRoaXMuYWRkQ29tcG9uZW50KGxhYmVsVG9BZGQpO1xuICAgIHRoaXMudXBkYXRlQ29tcG9uZW50cygpO1xuICB9XG5cbiAgcmVtb3ZlTGFiZWwobGFiZWxUb1JlbW92ZTogU3VidGl0bGVMYWJlbCk6IHZvaWQge1xuICAgIHRoaXMubGFiZWxDb3VudC0tO1xuICAgIHRoaXMucmVtb3ZlQ29tcG9uZW50KGxhYmVsVG9SZW1vdmUpO1xuICAgIHRoaXMudXBkYXRlQ29tcG9uZW50cygpO1xuICB9XG5cbiAgcHVibGljIGlzRW1wdHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubGFiZWxDb3VudCA9PT0gMDtcbiAgfVxufVxuIiwiaW1wb3J0IHtTZWxlY3RCb3h9IGZyb20gJy4vc2VsZWN0Ym94JztcbmltcG9ydCB7TGlzdFNlbGVjdG9yQ29uZmlnfSBmcm9tICcuL2xpc3RzZWxlY3Rvcic7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHtTdWJ0aXRsZVN3aXRjaEhhbmRsZXJ9IGZyb20gJy4uL3N1YnRpdGxldXRpbHMnO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBzZWxlY3QgYm94IHByb3ZpZGluZyBhIHNlbGVjdGlvbiBiZXR3ZWVuIGF2YWlsYWJsZSBzdWJ0aXRsZSBhbmQgY2FwdGlvbiB0cmFja3MuXG4gKlxuICogQGNhdGVnb3J5IENvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGNsYXNzIFN1YnRpdGxlU2VsZWN0Qm94IGV4dGVuZHMgU2VsZWN0Qm94IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IExpc3RTZWxlY3RvckNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzZXM6IFsndWktc3VidGl0bGVzZWxlY3Rib3gnXSxcbiAgICAgIGFyaWFMYWJlbDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3N1YnRpdGxlLnNlbGVjdCcpLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICBuZXcgU3VidGl0bGVTd2l0Y2hIYW5kbGVyKHBsYXllciwgdGhpcywgdWltYW5hZ2VyKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94LCBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcgfSBmcm9tICcuL3N1YnRpdGxlc2V0dGluZ3NlbGVjdGJveCc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi8uLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi8uLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBzZWxlY3QgYm94IHByb3ZpZGluZyBhIHNlbGVjdGlvbiBvZiBkaWZmZXJlbnQgYmFja2dyb3VuZCBjb2xvcnMuXG4gKlxuICogQGNhdGVnb3J5IENvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGNsYXNzIEJhY2tncm91bmRDb2xvclNlbGVjdEJveCBleHRlbmRzIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3NlczogWyd1aS1zdWJ0aXRsZXNldHRpbmdzYmFja2dyb3VuZGNvbG9yc2VsZWN0Ym94J10sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMuYWRkSXRlbShudWxsLCBpMThuLmdldExvY2FsaXplcignZGVmYXVsdCcpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ3doaXRlJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy53aGl0ZScpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ2JsYWNrJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy5ibGFjaycpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ3JlZCcsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMucmVkJykpO1xuICAgIHRoaXMuYWRkSXRlbSgnZ3JlZW4nLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLmdyZWVuJykpO1xuICAgIHRoaXMuYWRkSXRlbSgnYmx1ZScsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMuYmx1ZScpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ2N5YW4nLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLmN5YW4nKSk7XG4gICAgdGhpcy5hZGRJdGVtKCd5ZWxsb3cnLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLnllbGxvdycpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ21hZ2VudGEnLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLm1hZ2VudGEnKSk7XG5cbiAgICBsZXQgc2V0Q29sb3JBbmRPcGFjaXR5ID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmJhY2tncm91bmRDb2xvci5pc1NldCgpICYmIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmJhY2tncm91bmRPcGFjaXR5LmlzU2V0KCkpIHtcbiAgICAgICAgdGhpcy50b2dnbGVPdmVybGF5Q2xhc3MoXG4gICAgICAgICAgJ2JnY29sb3ItJyArIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmJhY2tncm91bmRDb2xvci52YWx1ZSArIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmJhY2tncm91bmRPcGFjaXR5LnZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudG9nZ2xlT3ZlcmxheUNsYXNzKG51bGwpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLm9uSXRlbVNlbGVjdGVkLnN1YnNjcmliZSgoc2VuZGVyLCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuYmFja2dyb3VuZENvbG9yLnZhbHVlID0ga2V5O1xuICAgIH0pO1xuXG4gICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuYmFja2dyb3VuZENvbG9yLm9uQ2hhbmdlZC5zdWJzY3JpYmUoKHNlbmRlciwgcHJvcGVydHkpID0+IHtcbiAgICAgIC8vIENvbG9yIGFuZCBvcGFjaXR5IGdvIHRvZ2V0aGVyLCBzbyB3ZSBuZWVkIHRvLi4uXG4gICAgICBpZiAoIXRoaXMuc2V0dGluZ3NNYW5hZ2VyLmJhY2tncm91bmRDb2xvci5pc1NldCgpKSB7XG4gICAgICAgIC8vIC4uLiBjbGVhciB0aGUgb3BhY2l0eSB3aGVuIHRoZSBjb2xvciBpcyBub3Qgc2V0XG4gICAgICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmJhY2tncm91bmRPcGFjaXR5LmNsZWFyKCk7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kT3BhY2l0eS5pc1NldCgpKSB7XG4gICAgICAgIC8vIC4uLiBzZXQgYW4gb3BhY2l0eSB3aGVuIHRoZSBjb2xvciBpcyBzZXRcbiAgICAgICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuYmFja2dyb3VuZE9wYWNpdHkudmFsdWUgPSAnMTAwJztcbiAgICAgIH1cbiAgICAgIHRoaXMuc2VsZWN0SXRlbShwcm9wZXJ0eS52YWx1ZSk7XG4gICAgICBzZXRDb2xvckFuZE9wYWNpdHkoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmJhY2tncm91bmRPcGFjaXR5Lm9uQ2hhbmdlZC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgc2V0Q29sb3JBbmRPcGFjaXR5KCk7XG4gICAgfSk7XG5cbiAgICAvLyBMb2FkIGluaXRpYWwgdmFsdWVcbiAgICBpZiAodGhpcy5zZXR0aW5nc01hbmFnZXIuYmFja2dyb3VuZENvbG9yLmlzU2V0KCkpIHtcbiAgICAgIHRoaXMuc2VsZWN0SXRlbSh0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kQ29sb3IudmFsdWUpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94LCBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcgfSBmcm9tICcuL3N1YnRpdGxlc2V0dGluZ3NlbGVjdGJveCc7XG5pbXBvcnQge1VJSW5zdGFuY2VNYW5hZ2VyfSBmcm9tICcuLi8uLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi8uLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQSBzZWxlY3QgYm94IHByb3ZpZGluZyBhIHNlbGVjdGlvbiBvZiBkaWZmZXJlbnQgYmFja2dyb3VuZCBvcGFjaXR5LlxuICpcbiAqIEBjYXRlZ29yeSBDb21wb25lbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBCYWNrZ3JvdW5kT3BhY2l0eVNlbGVjdEJveCBleHRlbmRzIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3NlczogWyd1aS1zdWJ0aXRsZXNldHRpbmdzYmFja2dyb3VuZG9wYWNpdHlzZWxlY3Rib3gnXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5hZGRJdGVtKG51bGwsIGkxOG4uZ2V0TG9jYWxpemVyKCdkZWZhdWx0JykpO1xuICAgIHRoaXMuYWRkSXRlbSgnMTAwJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiAxMDAgfSkpO1xuICAgIHRoaXMuYWRkSXRlbSgnNzUnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDc1IH0pKTtcbiAgICB0aGlzLmFkZEl0ZW0oJzUwJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiA1MCB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCcyNScsIGkxOG4uZ2V0TG9jYWxpemVyKCdwZXJjZW50JywgeyB2YWx1ZTogMjUgfSkpO1xuICAgIHRoaXMuYWRkSXRlbSgnMCcsIGkxOG4uZ2V0TG9jYWxpemVyKCdwZXJjZW50JywgeyB2YWx1ZTogMCB9KSk7XG5cbiAgICB0aGlzLm9uSXRlbVNlbGVjdGVkLnN1YnNjcmliZSgoc2VuZGVyLCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuYmFja2dyb3VuZE9wYWNpdHkudmFsdWUgPSBrZXk7XG5cbiAgICAgIC8vIENvbG9yIGFuZCBvcGFjaXR5IGdvIHRvZ2V0aGVyLCBzbyB3ZSBuZWVkIHRvLi4uXG4gICAgICBpZiAoIXRoaXMuc2V0dGluZ3NNYW5hZ2VyLmJhY2tncm91bmRPcGFjaXR5LmlzU2V0KCkpIHtcbiAgICAgICAgLy8gLi4uIGNsZWFyIHRoZSBjb2xvciB3aGVuIHRoZSBvcGFjaXR5IGlzIG5vdCBzZXRcbiAgICAgICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuYmFja2dyb3VuZENvbG9yLmNsZWFyKCk7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kQ29sb3IuaXNTZXQoKSkge1xuICAgICAgICAvLyAuLi4gc2V0IGEgY29sb3Igd2hlbiB0aGUgb3BhY2l0eSBpcyBzZXRcbiAgICAgICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuYmFja2dyb3VuZENvbG9yLnZhbHVlID0gJ2JsYWNrJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFVwZGF0ZSBzZWxlY3RlZCBpdGVtIHdoZW4gdmFsdWUgaXMgc2V0IGZyb20gc29tZXdoZXJlIGVsc2VcbiAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kT3BhY2l0eS5vbkNoYW5nZWQuc3Vic2NyaWJlKChzZW5kZXIsIHByb3BlcnR5KSA9PiB7XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0ocHJvcGVydHkudmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLy8gTG9hZCBpbml0aWFsIHZhbHVlXG4gICAgaWYgKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmJhY2tncm91bmRPcGFjaXR5LmlzU2V0KCkpIHtcbiAgICAgIHRoaXMuc2VsZWN0SXRlbSh0aGlzLnNldHRpbmdzTWFuYWdlci5iYWNrZ3JvdW5kT3BhY2l0eS52YWx1ZSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3gsIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveENvbmZpZyB9IGZyb20gJy4vc3VidGl0bGVzZXR0aW5nc2VsZWN0Ym94JztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uLy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uLy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIHNlbGVjdCBib3ggcHJvdmlkaW5nIGEgc2VsZWN0aW9uIG9mIGRpZmZlcmVudCBjaGFyYWN0ZXIgZWRnZS5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29tcG9uZW50c1xuICovXG5leHBvcnQgY2xhc3MgQ2hhcmFjdGVyRWRnZVNlbGVjdEJveCBleHRlbmRzIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3NlczogWyd1aS1zdWJ0aXRsZXNldHRpbmdzY2hhcmFjdGVyZWRnZXNlbGVjdGJveCddLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICB0aGlzLmFkZEl0ZW0obnVsbCwgaTE4bi5nZXRMb2NhbGl6ZXIoJ2RlZmF1bHQnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdyYWlzZWQnLCBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2UucmFpc2VkJykpO1xuICAgIHRoaXMuYWRkSXRlbSgnZGVwcmVzc2VkJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy5jaGFyYWN0ZXJFZGdlLmRlcHJlc3NlZCcpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ3VuaWZvcm0nLCBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2UudW5pZm9ybScpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ2Ryb3BzaGFkb3dlZCcsIGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZS5kcm9wc2hhZG93ZWQnKSk7XG5cbiAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5jaGFyYWN0ZXJFZGdlLm9uQ2hhbmdlZC5zdWJzY3JpYmUoKHNlbmRlciwgcHJvcGVydHkpID0+IHtcbiAgICAgIGlmIChwcm9wZXJ0eS5pc1NldCgpKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlT3ZlcmxheUNsYXNzKCdjaGFyYWN0ZXJlZGdlLScgKyBwcm9wZXJ0eS52YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRvZ2dsZU92ZXJsYXlDbGFzcyhudWxsKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2VsZWN0IHRoZSBpdGVtIGluIGNhc2UgdGhlIHByb3BlcnR5IHdhcyBzZXQgZnJvbSBvdXRzaWRlXG4gICAgICB0aGlzLnNlbGVjdEl0ZW0ocHJvcGVydHkudmFsdWUpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vbkl0ZW1TZWxlY3RlZC5zdWJzY3JpYmUoKHNlbmRlciwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmNoYXJhY3RlckVkZ2UudmFsdWUgPSBrZXk7XG4gICAgfSk7XG5cbiAgICAvLyBMb2FkIGluaXRpYWwgdmFsdWVcbiAgICBpZiAodGhpcy5zZXR0aW5nc01hbmFnZXIuY2hhcmFjdGVyRWRnZS5pc1NldCgpKSB7XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0odGhpcy5zZXR0aW5nc01hbmFnZXIuY2hhcmFjdGVyRWRnZS52YWx1ZSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3gsIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveENvbmZpZyB9IGZyb20gJy4vc3VidGl0bGVzZXR0aW5nc2VsZWN0Ym94JztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uLy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uLy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIHNlbGVjdCBib3ggcHJvdmlkaW5nIGEgc2VsZWN0aW9uIG9mIGRpZmZlcmVudCBmb250IGNvbG9ycy5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29tcG9uZW50c1xuICovXG5leHBvcnQgY2xhc3MgRm9udENvbG9yU2VsZWN0Qm94IGV4dGVuZHMgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveENvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzc2VzOiBbJ3VpLXN1YnRpdGxlc2V0dGluZ3Nmb250Y29sb3JzZWxlY3Rib3gnXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5hZGRJdGVtKG51bGwsIGkxOG4uZ2V0TG9jYWxpemVyKCdkZWZhdWx0JykpO1xuICAgIHRoaXMuYWRkSXRlbSgnd2hpdGUnLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLndoaXRlJykpO1xuICAgIHRoaXMuYWRkSXRlbSgnYmxhY2snLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLmJsYWNrJykpO1xuICAgIHRoaXMuYWRkSXRlbSgncmVkJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy5yZWQnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdncmVlbicsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMuZ3JlZW4nKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdibHVlJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy5ibHVlJykpO1xuICAgIHRoaXMuYWRkSXRlbSgnY3lhbicsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMuY3lhbicpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ3llbGxvdycsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMueWVsbG93JykpO1xuICAgIHRoaXMuYWRkSXRlbSgnbWFnZW50YScsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMubWFnZW50YScpKTtcblxuICAgIGxldCBzZXRDb2xvckFuZE9wYWNpdHkgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udENvbG9yLmlzU2V0KCkgJiYgdGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udE9wYWNpdHkuaXNTZXQoKSkge1xuICAgICAgICB0aGlzLnRvZ2dsZU92ZXJsYXlDbGFzcyhcbiAgICAgICAgICAnZm9udGNvbG9yLScgKyB0aGlzLnNldHRpbmdzTWFuYWdlci5mb250Q29sb3IudmFsdWUgKyB0aGlzLnNldHRpbmdzTWFuYWdlci5mb250T3BhY2l0eS52YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRvZ2dsZU92ZXJsYXlDbGFzcyhudWxsKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5vbkl0ZW1TZWxlY3RlZC5zdWJzY3JpYmUoKHNlbmRlciwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRDb2xvci52YWx1ZSA9IGtleTtcbiAgICB9KTtcblxuICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRDb2xvci5vbkNoYW5nZWQuc3Vic2NyaWJlKChzZW5kZXIsIHByb3BlcnR5KSA9PiB7XG4gICAgICAvLyBDb2xvciBhbmQgb3BhY2l0eSBnbyB0b2dldGhlciwgc28gd2UgbmVlZCB0by4uLlxuICAgICAgaWYgKCF0aGlzLnNldHRpbmdzTWFuYWdlci5mb250Q29sb3IuaXNTZXQoKSkge1xuICAgICAgICAvLyAuLi4gY2xlYXIgdGhlIG9wYWNpdHkgd2hlbiB0aGUgY29sb3IgaXMgbm90IHNldFxuICAgICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5mb250T3BhY2l0eS5jbGVhcigpO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udE9wYWNpdHkuaXNTZXQoKSkge1xuICAgICAgICAvLyAuLi4gc2V0IGFuIG9wYWNpdHkgd2hlbiB0aGUgY29sb3IgaXMgc2V0XG4gICAgICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRPcGFjaXR5LnZhbHVlID0gJzEwMCc7XG4gICAgICB9XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0ocHJvcGVydHkudmFsdWUpO1xuICAgICAgc2V0Q29sb3JBbmRPcGFjaXR5KCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5mb250T3BhY2l0eS5vbkNoYW5nZWQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHNldENvbG9yQW5kT3BhY2l0eSgpO1xuICAgIH0pO1xuXG4gICAgLy8gTG9hZCBpbml0aWFsIHZhbHVlXG4gICAgaWYgKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRDb2xvci5pc1NldCgpKSB7XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0odGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udENvbG9yLnZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCwgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnIH0gZnJvbSAnLi9zdWJ0aXRsZXNldHRpbmdzZWxlY3Rib3gnO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEEgc2VsZWN0IGJveCBwcm92aWRpbmcgYSBzZWxlY3Rpb24gb2YgZGlmZmVyZW50IGZvbnQgZmFtaWx5LlxuICpcbiAqIEBjYXRlZ29yeSBDb21wb25lbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBGb250RmFtaWx5U2VsZWN0Qm94IGV4dGVuZHMgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveENvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzc2VzOiBbJ3VpLXN1YnRpdGxlc2V0dGluZ3Nmb250ZmFtaWx5c2VsZWN0Ym94J10sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMuYWRkSXRlbShudWxsLCBpMThuLmdldExvY2FsaXplcignZGVmYXVsdCcpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ21vbm9zcGFjZWRzZXJpZicsIGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkubW9ub3NwYWNlZHNlcmlmJykpO1xuICAgIHRoaXMuYWRkSXRlbSgncHJvcG9ydGlvbmFsc2VyaWYnLCBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LnByb3BvcnRpb25hbHNlcmlmJykpO1xuICAgIHRoaXMuYWRkSXRlbSgnbW9ub3NwYWNlZHNhbnNzZXJpZicsIGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkubW9ub3NwYWNlZHNhbnNzZXJpZicpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ3Byb3BvcnRpb25hbHNhbnNzZXJpZicsIGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkucHJvcG9ydGlvbmFsc2Fuc3NlcmlmJykpO1xuICAgIHRoaXMuYWRkSXRlbSgnY2FzdWFsJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5jYXN1YWwnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCdjdXJzaXZlJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5jdXJzaXZlJykpO1xuICAgIHRoaXMuYWRkSXRlbSgnc21hbGxjYXBpdGFsJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5zbWFsbGNhcGl0YWwnKSk7XG5cbiAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5mb250RmFtaWx5Lm9uQ2hhbmdlZC5zdWJzY3JpYmUoKHNlbmRlciwgcHJvcGVydHkpID0+IHtcbiAgICAgIGlmIChwcm9wZXJ0eS5pc1NldCgpKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlT3ZlcmxheUNsYXNzKCdmb250ZmFtaWx5LScgKyBwcm9wZXJ0eS52YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRvZ2dsZU92ZXJsYXlDbGFzcyhudWxsKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2VsZWN0IHRoZSBpdGVtIGluIGNhc2UgdGhlIHByb3BlcnR5IHdhcyBzZXQgZnJvbSBvdXRzaWRlXG4gICAgICB0aGlzLnNlbGVjdEl0ZW0ocHJvcGVydHkudmFsdWUpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vbkl0ZW1TZWxlY3RlZC5zdWJzY3JpYmUoKHNlbmRlciwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRGYW1pbHkudmFsdWUgPSBrZXk7XG4gICAgfSk7XG5cbiAgICAvLyBMb2FkIGluaXRpYWwgdmFsdWVcbiAgICBpZiAodGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udEZhbWlseS5pc1NldCgpKSB7XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0odGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udEZhbWlseS52YWx1ZSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3gsIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveENvbmZpZyB9IGZyb20gJy4vc3VidGl0bGVzZXR0aW5nc2VsZWN0Ym94JztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uLy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uLy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIHNlbGVjdCBib3ggcHJvdmlkaW5nIGEgc2VsZWN0aW9uIG9mIGRpZmZlcmVudCBmb250IGNvbG9ycy5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29tcG9uZW50c1xuICovXG5leHBvcnQgY2xhc3MgRm9udE9wYWNpdHlTZWxlY3RCb3ggZXh0ZW5kcyBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3gge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzZXM6IFsndWktc3VidGl0bGVzZXR0aW5nc2ZvbnRvcGFjaXR5c2VsZWN0Ym94J10sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMuYWRkSXRlbShudWxsLCBpMThuLmdldExvY2FsaXplcignZGVmYXVsdCcpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJzEwMCcsIGkxOG4uZ2V0TG9jYWxpemVyKCdwZXJjZW50JywgeyB2YWx1ZTogMTAwIH0pKTtcbiAgICB0aGlzLmFkZEl0ZW0oJzc1JywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiA3NSB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCc1MCcsIGkxOG4uZ2V0TG9jYWxpemVyKCdwZXJjZW50JywgeyB2YWx1ZTogNTAgfSkpO1xuICAgIHRoaXMuYWRkSXRlbSgnMjUnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDI1IH0pKTtcblxuICAgIHRoaXMub25JdGVtU2VsZWN0ZWQuc3Vic2NyaWJlKChzZW5kZXIsIGtleTogc3RyaW5nKSA9PiB7XG4gICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5mb250T3BhY2l0eS52YWx1ZSA9IGtleTtcblxuICAgICAgLy8gQ29sb3IgYW5kIG9wYWNpdHkgZ28gdG9nZXRoZXIsIHNvIHdlIG5lZWQgdG8uLi5cbiAgICAgIGlmICghdGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udE9wYWNpdHkuaXNTZXQoKSkge1xuICAgICAgICAvLyAuLi4gY2xlYXIgdGhlIGNvbG9yIHdoZW4gdGhlIG9wYWNpdHkgaXMgbm90IHNldFxuICAgICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5mb250Q29sb3IuY2xlYXIoKTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRDb2xvci5pc1NldCgpKSB7XG4gICAgICAgIC8vIC4uLiBzZXQgYSBjb2xvciB3aGVuIHRoZSBvcGFjaXR5IGlzIHNldFxuICAgICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5mb250Q29sb3IudmFsdWUgPSAnd2hpdGUnO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gVXBkYXRlIHNlbGVjdGVkIGl0ZW0gd2hlbiB2YWx1ZSBpcyBzZXQgZnJvbSBzb21ld2hlcmUgZWxzZVxuICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRPcGFjaXR5Lm9uQ2hhbmdlZC5zdWJzY3JpYmUoKHNlbmRlciwgcHJvcGVydHkpID0+IHtcbiAgICAgIHRoaXMuc2VsZWN0SXRlbShwcm9wZXJ0eS52YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvLyBMb2FkIGluaXRpYWwgdmFsdWVcbiAgICBpZiAodGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udE9wYWNpdHkuaXNTZXQoKSkge1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRPcGFjaXR5LnZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCwgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnIH0gZnJvbSAnLi9zdWJ0aXRsZXNldHRpbmdzZWxlY3Rib3gnO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEEgc2VsZWN0IGJveCBwcm92aWRpbmcgYSBzZWxlY3Rpb24gb2YgZGlmZmVyZW50IGZvbnQgY29sb3JzLlxuICpcbiAqIEBjYXRlZ29yeSBDb21wb25lbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBGb250U2l6ZVNlbGVjdEJveCBleHRlbmRzIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3NlczogWyd1aS1zdWJ0aXRsZXNldHRpbmdzZm9udHNpemVzZWxlY3Rib3gnXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgdGhpcy5hZGRJdGVtKG51bGwsIGkxOG4uZ2V0TG9jYWxpemVyKCdkZWZhdWx0JykpO1xuICAgIHRoaXMuYWRkSXRlbSgnNTAnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDUwIH0pKTtcbiAgICB0aGlzLmFkZEl0ZW0oJzc1JywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiA3NSB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCcxMDAnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDEwMCB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCcxNTAnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDE1MCB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCcyMDAnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDIwMCB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCczMDAnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDMwMCB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCc0MDAnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDQwMCB9KSk7XG5cbiAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5mb250U2l6ZS5vbkNoYW5nZWQuc3Vic2NyaWJlKChzZW5kZXIsIHByb3BlcnR5KSA9PiB7XG4gICAgICBpZiAocHJvcGVydHkuaXNTZXQoKSkge1xuICAgICAgICB0aGlzLnRvZ2dsZU92ZXJsYXlDbGFzcygnZm9udHNpemUtJyArIHByb3BlcnR5LnZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudG9nZ2xlT3ZlcmxheUNsYXNzKG51bGwpO1xuICAgICAgfVxuXG4gICAgICAvLyBTZWxlY3QgdGhlIGl0ZW0gaW4gY2FzZSB0aGUgcHJvcGVydHkgd2FzIHNldCBmcm9tIG91dHNpZGVcbiAgICAgIHRoaXMuc2VsZWN0SXRlbShwcm9wZXJ0eS52YWx1ZSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uSXRlbVNlbGVjdGVkLnN1YnNjcmliZSgoc2VuZGVyLCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgdGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udFNpemUudmFsdWUgPSBrZXk7XG4gICAgfSk7XG5cbiAgICAvLyBMb2FkIGluaXRpYWwgdmFsdWVcbiAgICBpZiAodGhpcy5zZXR0aW5nc01hbmFnZXIuZm9udFNpemUuaXNTZXQoKSkge1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLmZvbnRTaXplLnZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7U3VidGl0bGVPdmVybGF5fSBmcm9tICcuLi9zdWJ0aXRsZW92ZXJsYXknO1xuaW1wb3J0IHtMaXN0U2VsZWN0b3JDb25maWd9IGZyb20gJy4uL2xpc3RzZWxlY3Rvcic7XG5pbXBvcnQge1NlbGVjdEJveH0gZnJvbSAnLi4vc2VsZWN0Ym94JztcbmltcG9ydCB7U3VidGl0bGVTZXR0aW5nc01hbmFnZXJ9IGZyb20gJy4vc3VidGl0bGVzZXR0aW5nc21hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IFVJSW5zdGFuY2VNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vdWltYW5hZ2VyJztcblxuLyoqXG4gKiBAY2F0ZWdvcnkgQ29uZmlnc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveENvbmZpZyBleHRlbmRzIExpc3RTZWxlY3RvckNvbmZpZyB7XG4gIG92ZXJsYXk6IFN1YnRpdGxlT3ZlcmxheTtcbn1cblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgc3VidGl0bGVzIHNldHRpbmdzIHNlbGVjdCBib3hcbiAqXG4gKiBAY2F0ZWdvcnkgQ29tcG9uZW50c1xuICoqL1xuZXhwb3J0IGNsYXNzIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCBleHRlbmRzIFNlbGVjdEJveCB7XG5cbiAgcHJvdGVjdGVkIHNldHRpbmdzTWFuYWdlcj86IFN1YnRpdGxlU2V0dGluZ3NNYW5hZ2VyO1xuICBwcm90ZWN0ZWQgb3ZlcmxheTogU3VidGl0bGVPdmVybGF5O1xuICBwcml2YXRlIGN1cnJlbnRDc3NDbGFzczogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMub3ZlcmxheSA9IGNvbmZpZy5vdmVybGF5O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBwcmV2aW91c2x5IHNldCBjbGFzcyBhbmQgYWRkcyB0aGUgcGFzc2VkIGluIGNsYXNzLlxuICAgKiBAcGFyYW0gY3NzQ2xhc3MgVGhlIG5ldyBjbGFzcyB0byByZXBsYWNlIHRoZSBwcmV2aW91cyBjbGFzcyB3aXRoIG9yIG51bGwgdG8ganVzdCByZW1vdmUgdGhlIHByZXZpb3VzIGNsYXNzXG4gICAqL1xuICBwcm90ZWN0ZWQgdG9nZ2xlT3ZlcmxheUNsYXNzKGNzc0NsYXNzOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAvLyBSZW1vdmUgcHJldmlvdXMgY2xhc3MgaWYgZXhpc3RpbmdcbiAgICBpZiAodGhpcy5jdXJyZW50Q3NzQ2xhc3MpIHtcbiAgICAgIHRoaXMub3ZlcmxheS5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3ModGhpcy5jdXJyZW50Q3NzQ2xhc3MpO1xuICAgICAgdGhpcy5jdXJyZW50Q3NzQ2xhc3MgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIEFkZCBuZXcgY2xhc3MgaWYgc3BlY2lmaWVkLiBJZiB0aGUgbmV3IGNsYXNzIGlzIG51bGwsIHdlIGRvbid0IGFkZCBhbnl0aGluZy5cbiAgICBpZiAoY3NzQ2xhc3MpIHtcbiAgICAgIHRoaXMuY3VycmVudENzc0NsYXNzID0gdGhpcy5wcmVmaXhDc3MoY3NzQ2xhc3MpO1xuICAgICAgdGhpcy5vdmVybGF5LmdldERvbUVsZW1lbnQoKS5hZGRDbGFzcyh0aGlzLmN1cnJlbnRDc3NDbGFzcyk7XG4gICAgfVxuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgICB0aGlzLnNldHRpbmdzTWFuYWdlciA9IHVpbWFuYWdlci5nZXRTdWJ0aXRsZVNldHRpbmdzTWFuYWdlcigpO1xuICB9XG59XG4iLCJpbXBvcnQge0xhYmVsQ29uZmlnfSBmcm9tICcuLi9sYWJlbCc7XG5pbXBvcnQge0NvbnRhaW5lciwgQ29udGFpbmVyQ29uZmlnfSBmcm9tICcuLi9jb250YWluZXInO1xuaW1wb3J0IHtET019IGZyb20gJy4uLy4uL2RvbSc7XG5pbXBvcnQge1NldHRpbmdzUGFuZWxQYWdlT3BlbkJ1dHRvbn0gZnJvbSAnLi4vc2V0dGluZ3NwYW5lbHBhZ2VvcGVuYnV0dG9uJztcbmltcG9ydCB7IExvY2FsaXphYmxlVGV4dCwgaTE4biB9IGZyb20gJy4uLy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBAY2F0ZWdvcnkgQ29uZmlnc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFN1YnRpdGxlU2V0dGluZ3NMYWJlbENvbmZpZyBleHRlbmRzIExhYmVsQ29uZmlnIHtcbiAgb3BlbmVyOiBTZXR0aW5nc1BhbmVsUGFnZU9wZW5CdXR0b247XG59XG5cbi8qKlxuICogQGNhdGVnb3J5IENvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGNsYXNzIFN1YnRpdGxlU2V0dGluZ3NMYWJlbCBleHRlbmRzIENvbnRhaW5lcjxDb250YWluZXJDb25maWc+IHtcblxuICBwcml2YXRlIG9wZW5lcjogU2V0dGluZ3NQYW5lbFBhZ2VPcGVuQnV0dG9uO1xuXG4gIHByaXZhdGUgdGV4dDogTG9jYWxpemFibGVUZXh0O1xuXG4gIHByaXZhdGUgZm9yOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTdWJ0aXRsZVNldHRpbmdzTGFiZWxDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5vcGVuZXIgPSBjb25maWcub3BlbmVyO1xuICAgIHRoaXMudGV4dCA9IGNvbmZpZy50ZXh0O1xuICAgIHRoaXMuZm9yID0gY29uZmlnLmZvcjtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyg8Q29udGFpbmVyQ29uZmlnPmNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1sYWJlbCcsXG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIHRoaXMub3BlbmVyLFxuICAgICAgXSxcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdG9Eb21FbGVtZW50KCk6IERPTSB7XG4gICAgbGV0IGxhYmVsRWxlbWVudCA9IG5ldyBET00oJ2xhYmVsJywge1xuICAgICAgJ2lkJzogdGhpcy5jb25maWcuaWQsXG4gICAgICAnY2xhc3MnOiB0aGlzLmdldENzc0NsYXNzZXMoKSxcbiAgICAgICdmb3InOiB0aGlzLmZvcixcbiAgICB9LCB0aGlzKS5hcHBlbmQoXG4gICAgICBuZXcgRE9NKCdzcGFuJywge30pLmh0bWwoaTE4bi5wZXJmb3JtTG9jYWxpemF0aW9uKHRoaXMudGV4dCkpLFxuICAgICAgdGhpcy5vcGVuZXIuZ2V0RG9tRWxlbWVudCgpLFxuICAgICk7XG5cbiAgICByZXR1cm4gbGFiZWxFbGVtZW50O1xuICB9XG59XG4iLCJpbXBvcnQgeyBTdG9yYWdlVXRpbHMgfSBmcm9tICcuLi8uLi9zdG9yYWdldXRpbHMnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBDb21wb25lbnRDb25maWcgfSBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IHsgRXZlbnREaXNwYXRjaGVyLCBFdmVudCB9IGZyb20gJy4uLy4uL2V2ZW50ZGlzcGF0Y2hlcic7XG5cbmludGVyZmFjZSBTdWJ0aXRsZVNldHRpbmdzIHtcbiAgZm9udENvbG9yPzogc3RyaW5nO1xuICBmb250T3BhY2l0eT86IHN0cmluZztcbiAgZm9udEZhbWlseT86IHN0cmluZztcbiAgZm9udFNpemU/OiBzdHJpbmc7XG4gIGNoYXJhY3RlckVkZ2U/OiBzdHJpbmc7XG4gIGJhY2tncm91bmRDb2xvcj86IHN0cmluZztcbiAgYmFja2dyb3VuZE9wYWNpdHk/OiBzdHJpbmc7XG4gIHdpbmRvd0NvbG9yPzogc3RyaW5nO1xuICB3aW5kb3dPcGFjaXR5Pzogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgUHJvcGVydGllcyB7XG4gIFtuYW1lOiBzdHJpbmddOiBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8c3RyaW5nPjtcbn1cblxuLyoqXG4gKiBAY2F0ZWdvcnkgVXRpbHNcbiAqL1xuZXhwb3J0IGNsYXNzIFN1YnRpdGxlU2V0dGluZ3NNYW5hZ2VyIHtcbiAgcHJpdmF0ZSB1c2VyU2V0dGluZ3M6IFN1YnRpdGxlU2V0dGluZ3M7XG4gIHByaXZhdGUgbG9jYWxTdG9yYWdlS2V5OiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBfcHJvcGVydGllczogUHJvcGVydGllcyA9IHtcbiAgICBmb250Q29sb3I6IG5ldyBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8c3RyaW5nPih0aGlzKSxcbiAgICBmb250T3BhY2l0eTogbmV3IFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxzdHJpbmc+KHRoaXMpLFxuICAgIGZvbnRGYW1pbHk6IG5ldyBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8c3RyaW5nPih0aGlzKSxcbiAgICBmb250U2l6ZTogbmV3IFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxzdHJpbmc+KHRoaXMpLFxuICAgIGNoYXJhY3RlckVkZ2U6IG5ldyBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8c3RyaW5nPih0aGlzKSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IG5ldyBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8c3RyaW5nPih0aGlzKSxcbiAgICBiYWNrZ3JvdW5kT3BhY2l0eTogbmV3IFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxzdHJpbmc+KHRoaXMpLFxuICAgIHdpbmRvd0NvbG9yOiBuZXcgU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PHN0cmluZz4odGhpcyksXG4gICAgd2luZG93T3BhY2l0eTogbmV3IFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxzdHJpbmc+KHRoaXMpLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudXNlclNldHRpbmdzID0ge307XG4gICAgdGhpcy5sb2NhbFN0b3JhZ2VLZXkgPVxuICAgICAgRHVtbXlDb21wb25lbnQuaW5zdGFuY2UoKS5wcmVmaXhDc3MoJ3N1YnRpdGxlc2V0dGluZ3MnKTtcbiAgfVxuXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBwcm9wZXJ0eU5hbWUgaW4gdGhpcy5fcHJvcGVydGllcykge1xuICAgICAgdGhpcy5fcHJvcGVydGllc1twcm9wZXJ0eU5hbWVdLmNsZWFyKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldCBmb250Q29sb3IoKTogU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLl9wcm9wZXJ0aWVzLmZvbnRDb2xvcjtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZm9udE9wYWNpdHkoKTogU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLl9wcm9wZXJ0aWVzLmZvbnRPcGFjaXR5O1xuICB9XG5cbiAgcHVibGljIGdldCBmb250RmFtaWx5KCk6IFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5fcHJvcGVydGllcy5mb250RmFtaWx5O1xuICB9XG5cbiAgcHVibGljIGdldCBmb250U2l6ZSgpOiBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb3BlcnRpZXMuZm9udFNpemU7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGNoYXJhY3RlckVkZ2UoKTogU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLl9wcm9wZXJ0aWVzLmNoYXJhY3RlckVkZ2U7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGJhY2tncm91bmRDb2xvcigpOiBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb3BlcnRpZXMuYmFja2dyb3VuZENvbG9yO1xuICB9XG5cbiAgcHVibGljIGdldCBiYWNrZ3JvdW5kT3BhY2l0eSgpOiBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb3BlcnRpZXMuYmFja2dyb3VuZE9wYWNpdHk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHdpbmRvd0NvbG9yKCk6IFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5fcHJvcGVydGllcy53aW5kb3dDb2xvcjtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgd2luZG93T3BhY2l0eSgpOiBTdWJ0aXRsZVNldHRpbmdzUHJvcGVydHk8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb3BlcnRpZXMud2luZG93T3BhY2l0eTtcbiAgfVxuXG4gIHB1YmxpYyBpbml0aWFsaXplKCkge1xuICAgIGZvciAobGV0IHByb3BlcnR5TmFtZSBpbiB0aGlzLl9wcm9wZXJ0aWVzKSB7XG4gICAgICB0aGlzLl9wcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV0ub25DaGFuZ2VkLnN1YnNjcmliZSgoc2VuZGVyLCBwcm9wZXJ0eSkgPT4ge1xuICAgICAgICBpZiAocHJvcGVydHkuaXNTZXQoKSkge1xuICAgICAgICAgICg8YW55PnRoaXMudXNlclNldHRpbmdzKVtwcm9wZXJ0eU5hbWVdID0gcHJvcGVydHkudmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gRGVsZXRlIHRoZSBwcm9wZXJ0eSBmcm9tIHRoZSBzZXR0aW5ncyBvYmplY3QgaWYgdW5zZXQgdG8gYXZvaWQgc2VyaWFsaXphdGlvbiBvZiBudWxsIHZhbHVlc1xuICAgICAgICAgIGRlbGV0ZSAoPGFueT50aGlzLnVzZXJTZXR0aW5ncylbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNhdmUgdGhlIHNldHRpbmdzIG9iamVjdCB3aGVuIGEgcHJvcGVydHkgaGFzIGNoYW5nZWRcbiAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmxvYWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTYXZlcyB0aGUgc2V0dGluZ3MgdG8gbG9jYWwgc3RvcmFnZS5cbiAgICovXG4gIHB1YmxpYyBzYXZlKCk6IHZvaWQge1xuICAgIFN0b3JhZ2VVdGlscy5zZXRPYmplY3QodGhpcy5sb2NhbFN0b3JhZ2VLZXksIHRoaXMudXNlclNldHRpbmdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkcyB0aGUgc2V0dGluZ3MgZnJvbSBsb2NhbCBzdG9yYWdlXG4gICAqL1xuICBwdWJsaWMgbG9hZCgpOiB2b2lkIHtcbiAgICB0aGlzLnVzZXJTZXR0aW5ncyA9XG4gICAgICBTdG9yYWdlVXRpbHMuZ2V0T2JqZWN0PFN1YnRpdGxlU2V0dGluZ3M+KHRoaXMubG9jYWxTdG9yYWdlS2V5KSB8fCB7fTtcblxuICAgIC8vIEFwcGx5IHRoZSBsb2FkZWQgc2V0dGluZ3NcbiAgICBmb3IgKGxldCBwcm9wZXJ0eSBpbiB0aGlzLnVzZXJTZXR0aW5ncykge1xuICAgICAgdGhpcy5fcHJvcGVydGllc1twcm9wZXJ0eV0udmFsdWUgPSAoPGFueT50aGlzLnVzZXJTZXR0aW5ncylbcHJvcGVydHldO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEEgZHVtbXkgY29tcG9uZW50IHdob3NlIHNvbGUgcHVycG9zZSBpcyB0byBleHBvc2UgdGhlIHtAbGluayAjcHJlZml4Q3NzfSBtZXRob2QgdG8gdGhlXG4gKiB7QGxpbmsgU3VidGl0bGVTZXR0aW5nc01hbmFnZXJ9LlxuICovXG5jbGFzcyBEdW1teUNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudDxDb21wb25lbnRDb25maWc+IHtcbiAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBEdW1teUNvbXBvbmVudDtcblxuICBwdWJsaWMgc3RhdGljIGluc3RhbmNlKCk6IER1bW15Q29tcG9uZW50IHtcbiAgICBpZiAoIUR1bW15Q29tcG9uZW50Ll9pbnN0YW5jZSkge1xuICAgICAgRHVtbXlDb21wb25lbnQuX2luc3RhbmNlID0gbmV3IER1bW15Q29tcG9uZW50KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIER1bW15Q29tcG9uZW50Ll9pbnN0YW5jZTtcbiAgfVxuXG4gIHB1YmxpYyBwcmVmaXhDc3MoY3NzQ2xhc3NPcklkOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBzdXBlci5wcmVmaXhDc3MoY3NzQ2xhc3NPcklkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PFQ+IHtcbiAgcHJpdmF0ZSBfbWFuYWdlcjogU3VidGl0bGVTZXR0aW5nc01hbmFnZXI7XG4gIHByaXZhdGUgX29uQ2hhbmdlZDogRXZlbnREaXNwYXRjaGVyPFxuICAgIFN1YnRpdGxlU2V0dGluZ3NNYW5hZ2VyLFxuICAgIFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxUPlxuICA+O1xuICBwcml2YXRlIF92YWx1ZTogVDtcblxuICBjb25zdHJ1Y3RvcihtYW5hZ2VyOiBTdWJ0aXRsZVNldHRpbmdzTWFuYWdlcikge1xuICAgIHRoaXMuX21hbmFnZXIgPSBtYW5hZ2VyO1xuICAgIHRoaXMuX29uQ2hhbmdlZCA9IG5ldyBFdmVudERpc3BhdGNoZXI8XG4gICAgICBTdWJ0aXRsZVNldHRpbmdzTWFuYWdlcixcbiAgICAgIFN1YnRpdGxlU2V0dGluZ3NQcm9wZXJ0eTxUPlxuICAgID4oKTtcbiAgfVxuXG4gIHB1YmxpYyBpc1NldCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUgIT0gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBjbGVhcigpOiB2b2lkIHtcbiAgICB0aGlzLl92YWx1ZSA9IG51bGw7XG4gICAgdGhpcy5vbkNoYW5nZWRFdmVudChudWxsKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgdmFsdWUoKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgcHVibGljIHNldCB2YWx1ZSh2YWx1ZTogVCkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlID09PSAnbnVsbCcpIHtcbiAgICAgIHZhbHVlID0gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMub25DaGFuZ2VkRXZlbnQodmFsdWUpO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uQ2hhbmdlZEV2ZW50KHZhbHVlOiBUKSB7XG4gICAgdGhpcy5fb25DaGFuZ2VkLmRpc3BhdGNoKHRoaXMuX21hbmFnZXIsIHRoaXMpO1xuICB9XG5cbiAgcHVibGljIGdldCBvbkNoYW5nZWQoKTogRXZlbnQ8XG4gICAgU3VidGl0bGVTZXR0aW5nc01hbmFnZXIsXG4gICAgU3VidGl0bGVTZXR0aW5nc1Byb3BlcnR5PFQ+XG4gID4ge1xuICAgIHJldHVybiB0aGlzLl9vbkNoYW5nZWQuZ2V0RXZlbnQoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtTZXR0aW5nc1BhbmVsUGFnZX0gZnJvbSAnLi4vc2V0dGluZ3NwYW5lbHBhZ2UnO1xuaW1wb3J0IHtTZXR0aW5nc1BhbmVsfSBmcm9tICcuLi9zZXR0aW5nc3BhbmVsJztcbmltcG9ydCB7U3VidGl0bGVPdmVybGF5fSBmcm9tICcuLi9zdWJ0aXRsZW92ZXJsYXknO1xuaW1wb3J0IHtDb250YWluZXJDb25maWd9IGZyb20gJy4uL2NvbnRhaW5lcic7XG5pbXBvcnQge1N1YnRpdGxlU2V0dGluZ3NNYW5hZ2VyfSBmcm9tICcuL3N1YnRpdGxlc2V0dGluZ3NtYW5hZ2VyJztcbmltcG9ydCB7Q29tcG9uZW50LCBDb21wb25lbnRDb25maWd9IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQge0ZvbnRTaXplU2VsZWN0Qm94fSBmcm9tICcuL2ZvbnRzaXplc2VsZWN0Ym94JztcbmltcG9ydCB7Rm9udEZhbWlseVNlbGVjdEJveH0gZnJvbSAnLi9mb250ZmFtaWx5c2VsZWN0Ym94JztcbmltcG9ydCB7Rm9udENvbG9yU2VsZWN0Qm94fSBmcm9tICcuL2ZvbnRjb2xvcnNlbGVjdGJveCc7XG5pbXBvcnQge0ZvbnRPcGFjaXR5U2VsZWN0Qm94fSBmcm9tICcuL2ZvbnRvcGFjaXR5c2VsZWN0Ym94JztcbmltcG9ydCB7Q2hhcmFjdGVyRWRnZVNlbGVjdEJveH0gZnJvbSAnLi9jaGFyYWN0ZXJlZGdlc2VsZWN0Ym94JztcbmltcG9ydCB7QmFja2dyb3VuZENvbG9yU2VsZWN0Qm94fSBmcm9tICcuL2JhY2tncm91bmRjb2xvcnNlbGVjdGJveCc7XG5pbXBvcnQge0JhY2tncm91bmRPcGFjaXR5U2VsZWN0Qm94fSBmcm9tICcuL2JhY2tncm91bmRvcGFjaXR5c2VsZWN0Ym94JztcbmltcG9ydCB7V2luZG93Q29sb3JTZWxlY3RCb3h9IGZyb20gJy4vd2luZG93Y29sb3JzZWxlY3Rib3gnO1xuaW1wb3J0IHtXaW5kb3dPcGFjaXR5U2VsZWN0Qm94fSBmcm9tICcuL3dpbmRvd29wYWNpdHlzZWxlY3Rib3gnO1xuaW1wb3J0IHtTdWJ0aXRsZVNldHRpbmdzUmVzZXRCdXR0b259IGZyb20gJy4vc3VidGl0bGVzZXR0aW5nc3Jlc2V0YnV0dG9uJztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uLy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge1NldHRpbmdzUGFuZWxQYWdlQmFja0J1dHRvbn0gZnJvbSAnLi4vc2V0dGluZ3NwYW5lbHBhZ2ViYWNrYnV0dG9uJztcbmltcG9ydCB7U2V0dGluZ3NQYW5lbEl0ZW19IGZyb20gJy4uL3NldHRpbmdzcGFuZWxpdGVtJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEBjYXRlZ29yeSBDb25maWdzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3VidGl0bGVTZXR0aW5nc1BhbmVsUGFnZUNvbmZpZyBleHRlbmRzIENvbnRhaW5lckNvbmZpZyB7XG4gIHNldHRpbmdzUGFuZWw6IFNldHRpbmdzUGFuZWw7XG4gIG92ZXJsYXk6IFN1YnRpdGxlT3ZlcmxheTtcbn1cblxuLyoqXG4gKiBAY2F0ZWdvcnkgQ29tcG9uZW50c1xuICovXG5leHBvcnQgY2xhc3MgU3VidGl0bGVTZXR0aW5nc1BhbmVsUGFnZSBleHRlbmRzIFNldHRpbmdzUGFuZWxQYWdlIHtcblxuICBwcml2YXRlIHJlYWRvbmx5IG92ZXJsYXk6IFN1YnRpdGxlT3ZlcmxheTtcbiAgcHJpdmF0ZSByZWFkb25seSBzZXR0aW5nc1BhbmVsOiBTZXR0aW5nc1BhbmVsO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU3VidGl0bGVTZXR0aW5nc1BhbmVsUGFnZUNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICB0aGlzLm92ZXJsYXkgPSBjb25maWcub3ZlcmxheTtcbiAgICB0aGlzLnNldHRpbmdzUGFuZWwgPSBjb25maWcuc2V0dGluZ3NQYW5lbDtcblxuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY29tcG9uZW50czogPENvbXBvbmVudDxDb21wb25lbnRDb25maWc+W10+W1xuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250LnNpemUnKSwgbmV3IEZvbnRTaXplU2VsZWN0Qm94KHtcbiAgICAgICAgICBvdmVybGF5OiB0aGlzLm92ZXJsYXksXG4gICAgICAgIH0pKSxcbiAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHknKSwgbmV3IEZvbnRGYW1pbHlTZWxlY3RCb3goe1xuICAgICAgICAgIG92ZXJsYXk6IHRoaXMub3ZlcmxheSxcbiAgICAgICAgfSkpLFxuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250LmNvbG9yJyksIG5ldyBGb250Q29sb3JTZWxlY3RCb3goe1xuICAgICAgICAgIG92ZXJsYXk6IHRoaXMub3ZlcmxheSxcbiAgICAgICAgfSkpLFxuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250Lm9wYWNpdHknKSwgbmV3IEZvbnRPcGFjaXR5U2VsZWN0Qm94KHtcbiAgICAgICAgICBvdmVybGF5OiB0aGlzLm92ZXJsYXksXG4gICAgICAgIH0pKSxcbiAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZScpLCBuZXcgQ2hhcmFjdGVyRWRnZVNlbGVjdEJveCh7XG4gICAgICAgICAgb3ZlcmxheTogdGhpcy5vdmVybGF5LFxuICAgICAgICB9KSksXG4gICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbShpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzLmJhY2tncm91bmQuY29sb3InKSwgbmV3IEJhY2tncm91bmRDb2xvclNlbGVjdEJveCh7XG4gICAgICAgICAgb3ZlcmxheTogdGhpcy5vdmVybGF5LFxuICAgICAgICB9KSksXG4gICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbShpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzLmJhY2tncm91bmQub3BhY2l0eScpLCBuZXcgQmFja2dyb3VuZE9wYWNpdHlTZWxlY3RCb3goe1xuICAgICAgICAgIG92ZXJsYXk6IHRoaXMub3ZlcmxheSxcbiAgICAgICAgfSkpLFxuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnN1YnRpdGxlcy53aW5kb3cuY29sb3InKSwgbmV3IFdpbmRvd0NvbG9yU2VsZWN0Qm94KHtcbiAgICAgICAgICBvdmVybGF5OiB0aGlzLm92ZXJsYXksXG4gICAgICAgIH0pKSxcbiAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMud2luZG93Lm9wYWNpdHknKSwgbmV3IFdpbmRvd09wYWNpdHlTZWxlY3RCb3goe1xuICAgICAgICAgIG92ZXJsYXk6IHRoaXMub3ZlcmxheSxcbiAgICAgICAgfSkpLFxuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0obmV3IFNldHRpbmdzUGFuZWxQYWdlQmFja0J1dHRvbih7XG4gICAgICAgICAgY29udGFpbmVyOiB0aGlzLnNldHRpbmdzUGFuZWwsXG4gICAgICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ2JhY2snKSxcbiAgICAgICAgfSksIG5ldyBTdWJ0aXRsZVNldHRpbmdzUmVzZXRCdXR0b24oe30pLCB7XG4gICAgICAgICAgcm9sZTogJ21lbnViYXInLFxuICAgICAgICB9KSxcbiAgICAgIF0sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMub25BY3RpdmUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMub3ZlcmxheS5lbmFibGVQcmV2aWV3U3VidGl0bGVMYWJlbCgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vbkluYWN0aXZlLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLm92ZXJsYXkucmVtb3ZlUHJldmlld1N1YnRpdGxlTGFiZWwoKTtcbiAgICB9KTtcbiAgfVxufSIsImltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uLy4uL3VpbWFuYWdlcic7XG5pbXBvcnQge1N1YnRpdGxlU2V0dGluZ3NNYW5hZ2VyfSBmcm9tICcuL3N1YnRpdGxlc2V0dGluZ3NtYW5hZ2VyJztcbmltcG9ydCB7QnV0dG9uLCBCdXR0b25Db25maWd9IGZyb20gJy4uL2J1dHRvbic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uLy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIGJ1dHRvbiB0aGF0IHJlc2V0cyBhbGwgc3VidGl0bGUgc2V0dGluZ3MgdG8gdGhlaXIgZGVmYXVsdHMuXG4gKlxuICogQGNhdGVnb3J5IEJ1dHRvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIFN1YnRpdGxlU2V0dGluZ3NSZXNldEJ1dHRvbiBleHRlbmRzIEJ1dHRvbjxCdXR0b25Db25maWc+IHtcblxuICBwcml2YXRlIHNldHRpbmdzTWFuYWdlcjogU3VidGl0bGVTZXR0aW5nc01hbmFnZXI7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBCdXR0b25Db25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS1zdWJ0aXRsZXNldHRpbmdzcmVzZXRidXR0b24nLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3Jlc2V0JyksXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcbiAgICB0aGlzLnNldHRpbmdzTWFuYWdlciA9IHVpbWFuYWdlci5nZXRTdWJ0aXRsZVNldHRpbmdzTWFuYWdlcigpO1xuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci5yZXNldCgpO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3gsIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveENvbmZpZyB9IGZyb20gJy4vc3VidGl0bGVzZXR0aW5nc2VsZWN0Ym94JztcbmltcG9ydCB7VUlJbnN0YW5jZU1hbmFnZXJ9IGZyb20gJy4uLy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uLy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIHNlbGVjdCBib3ggcHJvdmlkaW5nIGEgc2VsZWN0aW9uIG9mIGRpZmZlcmVudCBiYWNrZ3JvdW5kIGNvbG9ycy5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29tcG9uZW50c1xuICovXG5leHBvcnQgY2xhc3MgV2luZG93Q29sb3JTZWxlY3RCb3ggZXh0ZW5kcyBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3gge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzZXM6IFsndWktc3VidGl0bGVzZXR0aW5nc3dpbmRvd2NvbG9yc2VsZWN0Ym94J10sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIHRoaXMuYWRkSXRlbShudWxsLCBpMThuLmdldExvY2FsaXplcignZGVmYXVsdCcpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ3doaXRlJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy53aGl0ZScpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ2JsYWNrJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2NvbG9ycy5ibGFjaycpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ3JlZCcsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMucmVkJykpO1xuICAgIHRoaXMuYWRkSXRlbSgnZ3JlZW4nLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLmdyZWVuJykpO1xuICAgIHRoaXMuYWRkSXRlbSgnYmx1ZScsIGkxOG4uZ2V0TG9jYWxpemVyKCdjb2xvcnMuYmx1ZScpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ2N5YW4nLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLmN5YW4nKSk7XG4gICAgdGhpcy5hZGRJdGVtKCd5ZWxsb3cnLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLnllbGxvdycpKTtcbiAgICB0aGlzLmFkZEl0ZW0oJ21hZ2VudGEnLCBpMThuLmdldExvY2FsaXplcignY29sb3JzLm1hZ2VudGEnKSk7XG5cblxuXG4gICAgbGV0IHNldENvbG9yQW5kT3BhY2l0eSA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dDb2xvci5pc1NldCgpICYmIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLndpbmRvd09wYWNpdHkuaXNTZXQoKSkge1xuICAgICAgICB0aGlzLnRvZ2dsZU92ZXJsYXlDbGFzcyhcbiAgICAgICAgICAnd2luZG93Y29sb3ItJyArIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLndpbmRvd0NvbG9yLnZhbHVlICsgdGhpcy5zZXR0aW5nc01hbmFnZXIud2luZG93T3BhY2l0eS52YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRvZ2dsZU92ZXJsYXlDbGFzcyhudWxsKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5vbkl0ZW1TZWxlY3RlZC5zdWJzY3JpYmUoKHNlbmRlciwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLndpbmRvd0NvbG9yLnZhbHVlID0ga2V5O1xuICAgIH0pO1xuXG4gICAgdGhpcy5zZXR0aW5nc01hbmFnZXIud2luZG93Q29sb3Iub25DaGFuZ2VkLnN1YnNjcmliZSgoc2VuZGVyLCBwcm9wZXJ0eSkgPT4ge1xuICAgICAgLy8gQ29sb3IgYW5kIG9wYWNpdHkgZ28gdG9nZXRoZXIsIHNvIHdlIG5lZWQgdG8uLi5cbiAgICAgIGlmICghdGhpcy5zZXR0aW5nc01hbmFnZXIud2luZG93Q29sb3IuaXNTZXQoKSkge1xuICAgICAgICAvLyAuLi4gY2xlYXIgdGhlIG9wYWNpdHkgd2hlbiB0aGUgY29sb3IgaXMgbm90IHNldFxuICAgICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dPcGFjaXR5LmNsZWFyKCk7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dPcGFjaXR5LmlzU2V0KCkpIHtcbiAgICAgICAgLy8gLi4uIHNldCBhbiBvcGFjaXR5IHdoZW4gdGhlIGNvbG9yIGlzIHNldFxuICAgICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dPcGFjaXR5LnZhbHVlID0gJzEwMCc7XG4gICAgICB9XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0ocHJvcGVydHkudmFsdWUpO1xuICAgICAgc2V0Q29sb3JBbmRPcGFjaXR5KCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dPcGFjaXR5Lm9uQ2hhbmdlZC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgc2V0Q29sb3JBbmRPcGFjaXR5KCk7XG4gICAgfSk7XG5cbiAgICAvLyBMb2FkIGluaXRpYWwgdmFsdWVcbiAgICBpZiAodGhpcy5zZXR0aW5nc01hbmFnZXIud2luZG93Q29sb3IuaXNTZXQoKSkge1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKHRoaXMuc2V0dGluZ3NNYW5hZ2VyLndpbmRvd0NvbG9yLnZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCwgU3VidGl0bGVTZXR0aW5nU2VsZWN0Qm94Q29uZmlnIH0gZnJvbSAnLi9zdWJ0aXRsZXNldHRpbmdzZWxlY3Rib3gnO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEEgc2VsZWN0IGJveCBwcm92aWRpbmcgYSBzZWxlY3Rpb24gb2YgZGlmZmVyZW50IGJhY2tncm91bmQgb3BhY2l0eS5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29tcG9uZW50c1xuICovXG5leHBvcnQgY2xhc3MgV2luZG93T3BhY2l0eVNlbGVjdEJveCBleHRlbmRzIFN1YnRpdGxlU2V0dGluZ1NlbGVjdEJveCB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3hDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3NlczogWyd1aS1zdWJ0aXRsZXNldHRpbmdzd2luZG93b3BhY2l0eXNlbGVjdGJveCddLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICB0aGlzLmFkZEl0ZW0obnVsbCwgaTE4bi5nZXRMb2NhbGl6ZXIoJ2RlZmF1bHQnKSk7XG4gICAgdGhpcy5hZGRJdGVtKCcxMDAnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDEwMCB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCc3NScsIGkxOG4uZ2V0TG9jYWxpemVyKCdwZXJjZW50JywgeyB2YWx1ZTogNzUgfSkpO1xuICAgIHRoaXMuYWRkSXRlbSgnNTAnLCBpMThuLmdldExvY2FsaXplcigncGVyY2VudCcsIHsgdmFsdWU6IDUwIH0pKTtcbiAgICB0aGlzLmFkZEl0ZW0oJzI1JywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiAyNSB9KSk7XG4gICAgdGhpcy5hZGRJdGVtKCcwJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ3BlcmNlbnQnLCB7IHZhbHVlOiAwIH0pKTtcblxuICAgIHRoaXMub25JdGVtU2VsZWN0ZWQuc3Vic2NyaWJlKChzZW5kZXIsIGtleTogc3RyaW5nKSA9PiB7XG4gICAgICB0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dPcGFjaXR5LnZhbHVlID0ga2V5O1xuXG4gICAgICAvLyBDb2xvciBhbmQgb3BhY2l0eSBnbyB0b2dldGhlciwgc28gd2UgbmVlZCB0by4uLlxuICAgICAgaWYgKCF0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dPcGFjaXR5LmlzU2V0KCkpIHtcbiAgICAgICAgLy8gLi4uIGNsZWFyIHRoZSBjb2xvciB3aGVuIHRoZSBvcGFjaXR5IGlzIG5vdCBzZXRcbiAgICAgICAgdGhpcy5zZXR0aW5nc01hbmFnZXIud2luZG93Q29sb3IuY2xlYXIoKTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuc2V0dGluZ3NNYW5hZ2VyLndpbmRvd0NvbG9yLmlzU2V0KCkpIHtcbiAgICAgICAgLy8gLi4uIHNldCBhIGNvbG9yIHdoZW4gdGhlIG9wYWNpdHkgaXMgc2V0XG4gICAgICAgIHRoaXMuc2V0dGluZ3NNYW5hZ2VyLndpbmRvd0NvbG9yLnZhbHVlID0gJ2JsYWNrJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFVwZGF0ZSBzZWxlY3RlZCBpdGVtIHdoZW4gdmFsdWUgaXMgc2V0IGZyb20gc29tZXdoZXJlIGVsc2VcbiAgICB0aGlzLnNldHRpbmdzTWFuYWdlci53aW5kb3dPcGFjaXR5Lm9uQ2hhbmdlZC5zdWJzY3JpYmUoKHNlbmRlciwgcHJvcGVydHkpID0+IHtcbiAgICAgIHRoaXMuc2VsZWN0SXRlbShwcm9wZXJ0eS52YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvLyBMb2FkIGluaXRpYWwgdmFsdWVcbiAgICBpZiAodGhpcy5zZXR0aW5nc01hbmFnZXIud2luZG93T3BhY2l0eS5pc1NldCgpKSB7XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0odGhpcy5zZXR0aW5nc01hbmFnZXIud2luZG93T3BhY2l0eS52YWx1ZSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgRE9NIH0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7IENvbXBvbmVudENvbmZpZyB9IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCB7IFRpbWVsaW5lTWFya2VyIH0gZnJvbSAnLi4vdWljb25maWcnO1xuaW1wb3J0IHsgU2Vla0Jhck1hcmtlciB9IGZyb20gJy4vc2Vla2Jhcic7XG5pbXBvcnQgeyBQbGF5ZXJVdGlscyB9IGZyb20gJy4uL3BsYXllcnV0aWxzJztcbmltcG9ydCB7IFRpbWVvdXQgfSBmcm9tICcuLi90aW1lb3V0JztcblxuLyoqXG4gKiBAY2F0ZWdvcnkgQ29uZmlnc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIE1hcmtlcnNDb25maWcgZXh0ZW5kcyBDb21wb25lbnRDb25maWcge1xuICAvKipcbiAgICogVXNlZCBmb3Igc2Vla0JhciBtYXJrZXIgc25hcHBpbmcgcmFuZ2UgcGVyY2VudGFnZVxuICAgKi9cbiAgc25hcHBpbmdSYW5nZT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIFRpbWVsaW5lTWFya2Vyc0hhbmRsZXIge1xuICBwcml2YXRlIG1hcmtlcnNDb250YWluZXI6IERPTTtcbiAgcHJpdmF0ZSB0aW1lbGluZU1hcmtlcnM6IFNlZWtCYXJNYXJrZXJbXTtcbiAgcHJpdmF0ZSBwbGF5ZXI6IFBsYXllckFQSTtcbiAgcHJpdmF0ZSB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyO1xuICBwcml2YXRlIHBhdXNlZFRpbWVzaGlmdFVwZGF0ZXI6IFRpbWVvdXQ7XG4gIHByaXZhdGUgZ2V0U2Vla0JhcldpZHRoOiAoKSA9PiBudW1iZXI7XG4gIHByb3RlY3RlZCBjb25maWc6IE1hcmtlcnNDb25maWc7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBNYXJrZXJzQ29uZmlnLCBnZXRTZWVrQmFyV2lkdGg6ICgpID0+IG51bWJlciwgbWFya2Vyc0NvbnRhaW5lcjogRE9NKSB7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5nZXRTZWVrQmFyV2lkdGggPSBnZXRTZWVrQmFyV2lkdGg7XG4gICAgdGhpcy5tYXJrZXJzQ29udGFpbmVyID0gbWFya2Vyc0NvbnRhaW5lcjtcbiAgICB0aGlzLnRpbWVsaW5lTWFya2VycyA9IFtdO1xuICB9XG5cbiAgcHVibGljIGluaXRpYWxpemUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpIHtcbiAgICB0aGlzLnBsYXllciA9IHBsYXllcjtcbiAgICB0aGlzLnVpbWFuYWdlciA9IHVpbWFuYWdlcjtcbiAgICB0aGlzLmNvbmZpZ3VyZU1hcmtlcnMoKTtcbiAgfVxuXG4gIHByaXZhdGUgY29uZmlndXJlTWFya2VycygpOiB2b2lkIHtcbiAgICAvLyBSZW1vdmUgbWFya2VycyB3aGVuIHVubG9hZGVkXG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VVbmxvYWRlZCwgKCkgPT4gdGhpcy5jbGVhck1hcmtlcnMoKSk7XG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BZEJyZWFrU3RhcnRlZCwgKCkgPT4gdGhpcy5jbGVhck1hcmtlcnMoKSk7XG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BZEJyZWFrRmluaXNoZWQsICgpID0+IHRoaXMudXBkYXRlTWFya2VycygpKTtcbiAgICAvLyBVcGRhdGUgbWFya2VycyB3aGVuIHRoZSBzaXplIG9mIHRoZSBzZWVrYmFyIGNoYW5nZXNcbiAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXllclJlc2l6ZWQsICgpID0+IHRoaXMudXBkYXRlTWFya2Vyc0RPTSgpKTtcblxuICAgIHRoaXMucGxheWVyLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU291cmNlTG9hZGVkLCAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5wbGF5ZXIuaXNMaXZlKCkpIHtcbiAgICAgICAgLy8gVXBkYXRlIG1hcmtlciBwb3NpdGlvbiBhcyB0aW1lc2hpZnQgcmFuZ2UgY2hhbmdlc1xuICAgICAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlRpbWVDaGFuZ2VkLCAoKSA9PiB0aGlzLnVwZGF0ZU1hcmtlcnMoKSk7XG4gICAgICAgIC8vIFVwZGF0ZSBtYXJrZXIgcG9zdGlvbiB3aGVuIHBhdXNlZCBhcyB0aW1lc2hpZnQgcmFuZ2UgY2hhbmdlc1xuICAgICAgICB0aGlzLmNvbmZpZ3VyZUxpdmVQYXVzZWRUaW1lc2hpZnRVcGRhdGVyKCgpID0+IHRoaXMudXBkYXRlTWFya2VycygpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnVpbWFuYWdlci5nZXRDb25maWcoKS5ldmVudHMub25VcGRhdGVkLnN1YnNjcmliZSgoKSA9PiB0aGlzLnVwZGF0ZU1hcmtlcnMoKSk7XG4gICAgdGhpcy51aW1hbmFnZXIub25SZWxlYXNlLnN1YnNjcmliZSgoKSA9PiB0aGlzLnVpbWFuYWdlci5nZXRDb25maWcoKS5ldmVudHMub25VcGRhdGVkLnVuc3Vic2NyaWJlKCgpID0+IHRoaXMudXBkYXRlTWFya2VycygpKSk7XG5cbiAgICAvLyBJbml0IG1hcmtlcnMgYXQgc3RhcnR1cFxuICAgIHRoaXMudXBkYXRlTWFya2VycygpO1xuICB9XG5cbiAgcHVibGljIGdldE1hcmtlckF0UG9zaXRpb24ocGVyY2VudGFnZTogbnVtYmVyKTogU2Vla0Jhck1hcmtlciB8IG51bGwge1xuICAgIGNvbnN0IHNuYXBwaW5nUmFuZ2UgPSB0aGlzLmNvbmZpZy5zbmFwcGluZ1JhbmdlO1xuXG4gICAgY29uc3QgbWF0Y2hpbmdNYXJrZXIgPSB0aGlzLnRpbWVsaW5lTWFya2Vycy5maW5kKG1hcmtlciA9PiB7XG4gICAgICBjb25zdCBoYXNEdXJhdGlvbiA9IG1hcmtlci5kdXJhdGlvbiA+IDA7XG4gICAgICAvLyBIYW5kbGUgaW50ZXJ2YWwgbWFya2Vyc1xuICAgICAgY29uc3QgaW50ZXJ2YWxNYXJrZXJNYXRjaCA9XG4gICAgICAgIGhhc0R1cmF0aW9uICYmXG4gICAgICAgIHBlcmNlbnRhZ2UgPj0gbWFya2VyLnBvc2l0aW9uIC0gc25hcHBpbmdSYW5nZSAmJlxuICAgICAgICBwZXJjZW50YWdlIDw9IG1hcmtlci5wb3NpdGlvbiArIG1hcmtlci5kdXJhdGlvbiArIHNuYXBwaW5nUmFuZ2U7XG5cbiAgICAgIC8vIEhhbmRsZSBwb3NpdGlvbiBtYXJrZXJzXG4gICAgICBjb25zdCBwb3NpdGlvbk1hcmtlck1hdGNoID1cbiAgICAgICAgcGVyY2VudGFnZSA+PSBtYXJrZXIucG9zaXRpb24gLSBzbmFwcGluZ1JhbmdlICYmXG4gICAgICAgIHBlcmNlbnRhZ2UgPD0gbWFya2VyLnBvc2l0aW9uICsgc25hcHBpbmdSYW5nZTtcblxuICAgICAgcmV0dXJuIGludGVydmFsTWFya2VyTWF0Y2ggfHwgcG9zaXRpb25NYXJrZXJNYXRjaDtcbiAgICB9KTtcblxuICAgIHJldHVybiBtYXRjaGluZ01hcmtlciB8fCBudWxsO1xuICB9XG5cbiAgcHJpdmF0ZSBjbGVhck1hcmtlcnMoKTogdm9pZCB7XG4gICAgdGhpcy50aW1lbGluZU1hcmtlcnMgPSBbXTtcbiAgICB0aGlzLm1hcmtlcnNDb250YWluZXIuZW1wdHkoKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlTWFya2VyRnJvbUNvbmZpZyhtYXJrZXI6IFRpbWVsaW5lTWFya2VyKTogdm9pZCB7XG4gICAgdGhpcy51aW1hbmFnZXIuZ2V0Q29uZmlnKCkubWV0YWRhdGEubWFya2VycyA9IHRoaXMudWltYW5hZ2VyLmdldENvbmZpZygpLm1ldGFkYXRhLm1hcmtlcnMuZmlsdGVyKF9tYXJrZXIgPT4gbWFya2VyICE9PSBfbWFya2VyKTtcbiAgfVxuXG4gIHByaXZhdGUgZmlsdGVyUmVtb3ZlZE1hcmtlcnMoKTogdm9pZCB7XG4gICAgdGhpcy50aW1lbGluZU1hcmtlcnMgPSB0aGlzLnRpbWVsaW5lTWFya2Vycy5maWx0ZXIoc2Vla2Jhck1hcmtlciA9PiB7XG4gICAgICBjb25zdCBtYXRjaGluZ01hcmtlciA9IHRoaXMudWltYW5hZ2VyLmdldENvbmZpZygpLm1ldGFkYXRhLm1hcmtlcnMuZmluZChfbWFya2VyID0+IHNlZWtiYXJNYXJrZXIubWFya2VyID09PSBfbWFya2VyKTtcbiAgICAgIGlmICghbWF0Y2hpbmdNYXJrZXIpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVNYXJrZXJGcm9tRE9NKHNlZWtiYXJNYXJrZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoaW5nTWFya2VyO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVNYXJrZXJGcm9tRE9NKG1hcmtlcjogU2Vla0Jhck1hcmtlcik6IHZvaWQge1xuICAgIGlmIChtYXJrZXIuZWxlbWVudCkge1xuICAgICAgbWFya2VyLmVsZW1lbnQucmVtb3ZlKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVNYXJrZXJzKCk6IHZvaWQge1xuICAgIGlmICghc2hvdWxkUHJvY2Vzc01hcmtlcnModGhpcy5wbGF5ZXIsIHRoaXMudWltYW5hZ2VyKSkge1xuICAgICAgdGhpcy5jbGVhck1hcmtlcnMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmZpbHRlclJlbW92ZWRNYXJrZXJzKCk7XG5cbiAgICB0aGlzLnVpbWFuYWdlci5nZXRDb25maWcoKS5tZXRhZGF0YS5tYXJrZXJzLmZvckVhY2gobWFya2VyID0+IHtcbiAgICAgIGNvbnN0IHsgbWFya2VyUG9zaXRpb24sIG1hcmtlckR1cmF0aW9uIH0gPSBnZXRNYXJrZXJQb3NpdGlvbnModGhpcy5wbGF5ZXIsIG1hcmtlcik7XG5cbiAgICAgIGlmIChzaG91bGRSZW1vdmVNYXJrZXIobWFya2VyUG9zaXRpb24sIG1hcmtlckR1cmF0aW9uKSkge1xuICAgICAgICB0aGlzLnJlbW92ZU1hcmtlckZyb21Db25maWcobWFya2VyKTtcbiAgICAgIH0gZWxzZSBpZiAobWFya2VyUG9zaXRpb24gPD0gMTAwKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoaW5nTWFya2VyID0gdGhpcy50aW1lbGluZU1hcmtlcnMuZmluZChzZWVrYmFyTWFya2VyID0+IHNlZWtiYXJNYXJrZXIubWFya2VyID09PSBtYXJrZXIpO1xuXG4gICAgICAgIGlmIChtYXRjaGluZ01hcmtlcikge1xuICAgICAgICAgIG1hdGNoaW5nTWFya2VyLnBvc2l0aW9uID0gbWFya2VyUG9zaXRpb247XG4gICAgICAgICAgbWF0Y2hpbmdNYXJrZXIuZHVyYXRpb24gPSBtYXJrZXJEdXJhdGlvbjtcblxuICAgICAgICAgIHRoaXMudXBkYXRlTWFya2VyRE9NKG1hdGNoaW5nTWFya2VyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBuZXdNYXJrZXI6IFNlZWtCYXJNYXJrZXIgPSB7IG1hcmtlciwgcG9zaXRpb246IG1hcmtlclBvc2l0aW9uLCBkdXJhdGlvbjogbWFya2VyRHVyYXRpb24gfTtcbiAgICAgICAgICB0aGlzLnRpbWVsaW5lTWFya2Vycy5wdXNoKG5ld01hcmtlcik7XG5cbiAgICAgICAgICB0aGlzLmNyZWF0ZU1hcmtlckRPTShuZXdNYXJrZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldE1hcmtlckNzc1Byb3BlcnRpZXMobWFya2VyOiBTZWVrQmFyTWFya2VyKTogeyBbcHJvcGVydHlOYW1lOiBzdHJpbmddOiBzdHJpbmcgfSB7XG4gICAgY29uc3Qgc2Vla0JhcldpZHRoUHggPSB0aGlzLmdldFNlZWtCYXJXaWR0aCgpO1xuXG4gICAgY29uc3QgcG9zaXRpb25JblB4ID0gKHNlZWtCYXJXaWR0aFB4IC8gMTAwKSAqIChtYXJrZXIucG9zaXRpb24gPCAwID8gMCA6IG1hcmtlci5wb3NpdGlvbik7XG4gICAgY29uc3QgY3NzUHJvcGVydGllczogeyBbcHJvcGVydHlOYW1lOiBzdHJpbmddOiBzdHJpbmcgfSA9IHtcbiAgICAgICd0cmFuc2Zvcm0nOiBgdHJhbnNsYXRlWCgke3Bvc2l0aW9uSW5QeH1weClgLFxuICAgIH07XG5cbiAgICBpZiAobWFya2VyLmR1cmF0aW9uID4gMCkge1xuICAgICAgY29uc3QgbWFya2VyV2lkdGhQeCA9IE1hdGgucm91bmQoc2Vla0JhcldpZHRoUHggLyAxMDAgKiBtYXJrZXIuZHVyYXRpb24pO1xuICAgICAgY3NzUHJvcGVydGllc1snd2lkdGgnXSA9IGAke21hcmtlcldpZHRoUHh9cHhgO1xuICAgIH1cblxuICAgIHJldHVybiBjc3NQcm9wZXJ0aWVzO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVNYXJrZXJET00obWFya2VyOiBTZWVrQmFyTWFya2VyKTogdm9pZCB7XG4gICAgbWFya2VyLmVsZW1lbnQuY3NzKHRoaXMuZ2V0TWFya2VyQ3NzUHJvcGVydGllcyhtYXJrZXIpKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlTWFya2VyRE9NKG1hcmtlcjogU2Vla0Jhck1hcmtlcik6IHZvaWQge1xuICAgIGNvbnN0IG1hcmtlckNsYXNzZXMgPSBbJ3NlZWtiYXItbWFya2VyJ10uY29uY2F0KG1hcmtlci5tYXJrZXIuY3NzQ2xhc3NlcyB8fCBbXSlcbiAgICAgIC5tYXAoY3NzQ2xhc3MgPT4gdGhpcy5wcmVmaXhDc3MoY3NzQ2xhc3MpKTtcblxuICAgIGNvbnN0IG1hcmtlckVsZW1lbnQgPSBuZXcgRE9NKCdkaXYnLCB7XG4gICAgICAnY2xhc3MnOiBtYXJrZXJDbGFzc2VzLmpvaW4oJyAnKSxcbiAgICAgICdkYXRhLW1hcmtlci10aW1lJzogU3RyaW5nKG1hcmtlci5tYXJrZXIudGltZSksXG4gICAgICAnZGF0YS1tYXJrZXItdGl0bGUnOiBTdHJpbmcobWFya2VyLm1hcmtlci50aXRsZSksXG4gICAgfSkuY3NzKHRoaXMuZ2V0TWFya2VyQ3NzUHJvcGVydGllcyhtYXJrZXIpKTtcblxuICAgIGlmIChtYXJrZXIubWFya2VyLmltYWdlVXJsKSB7XG4gICAgICBjb25zdCByZW1vdmVJbWFnZSA9ICgpID0+IHtcbiAgICAgICAgaW1hZ2VFbGVtZW50LnJlbW92ZSgpO1xuICAgICAgfTtcblxuICAgICAgY29uc3QgaW1hZ2VFbGVtZW50ID0gbmV3IERPTSgnaW1nJywge1xuICAgICAgICAnY2xhc3MnOiB0aGlzLnByZWZpeENzcygnc2Vla2Jhci1tYXJrZXItaW1hZ2UnKSxcbiAgICAgICAgJ3NyYyc6IG1hcmtlci5tYXJrZXIuaW1hZ2VVcmwsXG4gICAgICB9KS5vbignZXJyb3InLCByZW1vdmVJbWFnZSk7XG5cbiAgICAgIG1hcmtlckVsZW1lbnQuYXBwZW5kKGltYWdlRWxlbWVudCk7XG4gICAgfVxuXG4gICAgbWFya2VyLmVsZW1lbnQgPSBtYXJrZXJFbGVtZW50O1xuICAgIHRoaXMubWFya2Vyc0NvbnRhaW5lci5hcHBlbmQobWFya2VyRWxlbWVudCk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZU1hcmtlcnNET00oKTogdm9pZCB7XG4gICAgdGhpcy50aW1lbGluZU1hcmtlcnMuZm9yRWFjaChtYXJrZXIgPT4ge1xuICAgICAgaWYgKG1hcmtlci5lbGVtZW50KSB7XG4gICAgICAgIHRoaXMudXBkYXRlTWFya2VyRE9NKG1hcmtlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNyZWF0ZU1hcmtlckRPTShtYXJrZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBjb25maWd1cmVMaXZlUGF1c2VkVGltZXNoaWZ0VXBkYXRlcihcbiAgICBoYW5kbGVyOiAoKSA9PiB2b2lkLFxuICApOiB2b2lkIHtcbiAgICAvLyBSZWd1bGFybHkgdXBkYXRlIHRoZSBtYXJrZXIgcG9zaXRpb24gd2hpbGUgdGhlIHRpbWVvdXQgaXMgYWN0aXZlXG4gICAgdGhpcy5wYXVzZWRUaW1lc2hpZnRVcGRhdGVyID0gbmV3IFRpbWVvdXQoMTAwMCwgaGFuZGxlciwgdHJ1ZSk7XG5cbiAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBhdXNlZCwgKCkgPT4ge1xuICAgICAgaWYgKHRoaXMucGxheWVyLmlzTGl2ZSgpICYmIHRoaXMucGxheWVyLmdldE1heFRpbWVTaGlmdCgpIDwgMCkge1xuICAgICAgICB0aGlzLnBhdXNlZFRpbWVzaGlmdFVwZGF0ZXIuc3RhcnQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFN0b3AgdXBkYXRlciB3aGVuIHBsYXliYWNrIGNvbnRpbnVlcyAobm8gbWF0dGVyIGlmIHRoZSB1cGRhdGVyIHdhcyBzdGFydGVkIGJlZm9yZSlcbiAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXksICgpID0+IHRoaXMucGF1c2VkVGltZXNoaWZ0VXBkYXRlci5jbGVhcigpKTtcbiAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkRlc3Ryb3ksICgpID0+IHRoaXMucGF1c2VkVGltZXNoaWZ0VXBkYXRlci5jbGVhcigpKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBwcmVmaXhDc3MoY3NzQ2xhc3NPcklkOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5jc3NQcmVmaXggKyAnLScgKyBjc3NDbGFzc09ySWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0TWFya2VyUG9zaXRpb25zKHBsYXllcjogUGxheWVyQVBJLCBtYXJrZXI6IFRpbWVsaW5lTWFya2VyKSB7XG4gIGNvbnN0IGR1cmF0aW9uID0gZ2V0RHVyYXRpb24ocGxheWVyKTtcblxuICBjb25zdCBtYXJrZXJQb3NpdGlvbiA9IDEwMCAvIGR1cmF0aW9uICogZ2V0TWFya2VyVGltZShtYXJrZXIsIHBsYXllciwgZHVyYXRpb24pOyAvLyBjb252ZXJ0IGFic29sdXRlIHRpbWUgdG8gcGVyY2VudGFnZVxuICBsZXQgbWFya2VyRHVyYXRpb24gPSAxMDAgLyBkdXJhdGlvbiAqIG1hcmtlci5kdXJhdGlvbjtcblxuICBpZiAobWFya2VyUG9zaXRpb24gPCAwICYmICFpc05hTihtYXJrZXJEdXJhdGlvbikpIHtcbiAgICAvLyBTaHJpbmsgbWFya2VyIGR1cmF0aW9uIGZvciBvbiBsaXZlIHN0cmVhbXMgYXMgdGhleSByZWFjaCBlbmRcbiAgICBtYXJrZXJEdXJhdGlvbiA9IG1hcmtlckR1cmF0aW9uICsgbWFya2VyUG9zaXRpb247XG4gIH1cblxuICBpZiAoMTAwIC0gbWFya2VyUG9zaXRpb24gPCBtYXJrZXJEdXJhdGlvbikge1xuICAgIC8vIFNocmluayBtYXJrZXIgaWYgaXQgb3ZlcmZsb3dzIHRpbWVsaW5lXG4gICAgbWFya2VyRHVyYXRpb24gPSAxMDAgLSBtYXJrZXJQb3NpdGlvbjtcbiAgfVxuXG4gIHJldHVybiB7IG1hcmtlckR1cmF0aW9uLCBtYXJrZXJQb3NpdGlvbiB9O1xufVxuXG5mdW5jdGlvbiBnZXRNYXJrZXJUaW1lKG1hcmtlcjogVGltZWxpbmVNYXJrZXIsIHBsYXllcjogUGxheWVyQVBJLCBkdXJhdGlvbjogbnVtYmVyKTogbnVtYmVyIHtcbiAgaWYgKCFwbGF5ZXIuaXNMaXZlKCkpIHtcbiAgICByZXR1cm4gbWFya2VyLnRpbWU7XG4gIH1cblxuICByZXR1cm4gZHVyYXRpb24gLSAoUGxheWVyVXRpbHMuZ2V0U2Vla2FibGVSYW5nZVJlc3BlY3RpbmdMaXZlKHBsYXllcikuZW5kIC0gbWFya2VyLnRpbWUpO1xufVxuXG5mdW5jdGlvbiBnZXREdXJhdGlvbihwbGF5ZXI6IFBsYXllckFQSSk6IG51bWJlciB7XG4gIGlmICghcGxheWVyLmlzTGl2ZSgpKSB7XG4gICAgcmV0dXJuIHBsYXllci5nZXREdXJhdGlvbigpO1xuICB9XG4gIGNvbnN0IHsgc3RhcnQsIGVuZCB9ID0gUGxheWVyVXRpbHMuZ2V0U2Vla2FibGVSYW5nZVJlc3BlY3RpbmdMaXZlKHBsYXllcik7XG5cbiAgcmV0dXJuIGVuZCAtIHN0YXJ0O1xufVxuXG5mdW5jdGlvbiBzaG91bGRSZW1vdmVNYXJrZXIobWFya2VyUG9zaXRpb246IG51bWJlciwgbWFya2VyRHVyYXRpb246IG51bWJlcik6IGJvb2xlYW4ge1xuICByZXR1cm4gKG1hcmtlckR1cmF0aW9uIDwgMCB8fCBpc05hTihtYXJrZXJEdXJhdGlvbikpICYmIG1hcmtlclBvc2l0aW9uIDwgMDtcbn1cblxuZnVuY3Rpb24gc2hvdWxkUHJvY2Vzc01hcmtlcnMocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiBib29sZWFuIHtcbiAgLy8gRG9uJ3QgZ2VuZXJhdGUgdGltZWxpbmUgbWFya2VycyBpZiB3ZSBkb24ndCB5ZXQgaGF2ZSBhIGR1cmF0aW9uXG4gIC8vIFRoZSBkdXJhdGlvbiBjaGVjayBpcyBmb3IgYnVnZ3kgcGxhdGZvcm1zIHdoZXJlIHRoZSBkdXJhdGlvbiBpcyBub3QgYXZhaWxhYmxlIGluc3RhbnRseSAoQ2hyb21lIG9uIEFuZHJvaWQgNC4zKVxuICBjb25zdCB2YWxpZFRvUHJvY2VzcyA9IHBsYXllci5nZXREdXJhdGlvbigpICE9PSBJbmZpbml0eSB8fCBwbGF5ZXIuaXNMaXZlKCk7XG4gIGNvbnN0IGhhc01hcmtlcnMgPSB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkubWV0YWRhdGEubWFya2Vycy5sZW5ndGggPiAwO1xuXG4gIHJldHVybiB2YWxpZFRvUHJvY2VzcyAmJiBoYXNNYXJrZXJzO1xufVxuIiwiaW1wb3J0IHtDb250YWluZXIsIENvbnRhaW5lckNvbmZpZ30gZnJvbSAnLi9jb250YWluZXInO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7TWV0YWRhdGFMYWJlbCwgTWV0YWRhdGFMYWJlbENvbnRlbnR9IGZyb20gJy4vbWV0YWRhdGFsYWJlbCc7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIGZvciBhIHtAbGluayBUaXRsZUJhcn0uXG4gKlxuICogQGNhdGVnb3J5IENvbmZpZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUaXRsZUJhckNvbmZpZyBleHRlbmRzIENvbnRhaW5lckNvbmZpZyB7XG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgaWYgdGhlIHRpdGxlIGJhciBzaG91bGQgc3RheSBoaWRkZW4gd2hlbiBubyBtZXRhZGF0YSBsYWJlbCBjb250YWlucyBhbnkgdGV4dC4gRG9lcyBub3QgbWFrZSBhIGxvdFxuICAgKiBvZiBzZW5zZSBpZiB0aGUgdGl0bGUgYmFyIGNvbnRhaW5zIG90aGVyIGNvbXBvbmVudHMgdGhhbiBqdXN0IE1ldGFkYXRhTGFiZWxzIChsaWtlIGluIHRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24pLlxuICAgKiBEZWZhdWx0OiBmYWxzZVxuICAgKi9cbiAga2VlcEhpZGRlbldpdGhvdXRNZXRhZGF0YT86IGJvb2xlYW47XG59XG5cbi8qKlxuICogRGlzcGxheXMgYSB0aXRsZSBiYXIgY29udGFpbmluZyBhIGxhYmVsIHdpdGggdGhlIHRpdGxlIG9mIHRoZSB2aWRlby5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29tcG9uZW50c1xuICovXG5leHBvcnQgY2xhc3MgVGl0bGVCYXIgZXh0ZW5kcyBDb250YWluZXI8VGl0bGVCYXJDb25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFRpdGxlQmFyQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS10aXRsZWJhcicsXG4gICAgICBoaWRkZW46IHRydWUsXG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIG5ldyBNZXRhZGF0YUxhYmVsKHsgY29udGVudDogTWV0YWRhdGFMYWJlbENvbnRlbnQuVGl0bGUgfSksXG4gICAgICAgIG5ldyBNZXRhZGF0YUxhYmVsKHsgY29udGVudDogTWV0YWRhdGFMYWJlbENvbnRlbnQuRGVzY3JpcHRpb24gfSksXG4gICAgICBdLFxuICAgICAga2VlcEhpZGRlbldpdGhvdXRNZXRhZGF0YTogZmFsc2UsXG4gICAgfSwgPFRpdGxlQmFyQ29uZmlnPnRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICBsZXQgY29uZmlnID0gdGhpcy5nZXRDb25maWcoKTtcbiAgICBsZXQgc2hvdWxkQmVTaG93biA9ICF0aGlzLmlzSGlkZGVuKCk7XG4gICAgbGV0IGhhc01ldGFkYXRhVGV4dCA9IHRydWU7IC8vIEZsYWcgdG8gdHJhY2sgaWYgYW55IG1ldGFkYXRhIGxhYmVsIGNvbnRhaW5zIHRleHRcblxuICAgIGxldCBjaGVja01ldGFkYXRhVGV4dEFuZFVwZGF0ZVZpc2liaWxpdHkgPSAoKSA9PiB7XG4gICAgICBoYXNNZXRhZGF0YVRleHQgPSBmYWxzZTtcblxuICAgICAgLy8gSXRlcmF0ZSB0aHJvdWdoIG1ldGFkYXRhIGxhYmVscyBhbmQgY2hlY2sgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZW0gY29udGFpbnMgdGV4dFxuICAgICAgZm9yIChsZXQgY29tcG9uZW50IG9mIHRoaXMuZ2V0Q29tcG9uZW50cygpKSB7XG4gICAgICAgIGlmIChjb21wb25lbnQgaW5zdGFuY2VvZiBNZXRhZGF0YUxhYmVsKSB7XG4gICAgICAgICAgaWYgKCFjb21wb25lbnQuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICBoYXNNZXRhZGF0YVRleHQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzU2hvd24oKSkge1xuICAgICAgICAvLyBIaWRlIGEgdmlzaWJsZSB0aXRsZWJhciBpZiBpdCBkb2VzIG5vdCBjb250YWluIGFueSB0ZXh0IGFuZCB0aGUgaGlkZGVuIGZsYWcgaXMgc2V0XG4gICAgICAgIGlmIChjb25maWcua2VlcEhpZGRlbldpdGhvdXRNZXRhZGF0YSAmJiAhaGFzTWV0YWRhdGFUZXh0KSB7XG4gICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc2hvdWxkQmVTaG93bikge1xuICAgICAgICAvLyBTaG93IGEgaGlkZGVuIHRpdGxlYmFyIGlmIGl0IHNob3VsZCBhY3R1YWxseSBiZSBzaG93blxuICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gTGlzdGVuIHRvIHRleHQgY2hhbmdlIGV2ZW50cyB0byB1cGRhdGUgdGhlIGhhc01ldGFkYXRhVGV4dCBmbGFnIHdoZW4gdGhlIG1ldGFkYXRhIGR5bmFtaWNhbGx5IGNoYW5nZXNcbiAgICBmb3IgKGxldCBjb21wb25lbnQgb2YgdGhpcy5nZXRDb21wb25lbnRzKCkpIHtcbiAgICAgIGlmIChjb21wb25lbnQgaW5zdGFuY2VvZiBNZXRhZGF0YUxhYmVsKSB7XG4gICAgICAgIGNvbXBvbmVudC5vblRleHRDaGFuZ2VkLnN1YnNjcmliZShjaGVja01ldGFkYXRhVGV4dEFuZFVwZGF0ZVZpc2liaWxpdHkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHVpbWFuYWdlci5vbkNvbnRyb2xzU2hvdy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgc2hvdWxkQmVTaG93biA9IHRydWU7XG4gICAgICBpZiAoIShjb25maWcua2VlcEhpZGRlbldpdGhvdXRNZXRhZGF0YSAmJiAhaGFzTWV0YWRhdGFUZXh0KSkge1xuICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1aW1hbmFnZXIub25Db250cm9sc0hpZGUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHNob3VsZEJlU2hvd24gPSBmYWxzZTtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0pO1xuXG4gICAgLy8gaW5pdFxuICAgIGNoZWNrTWV0YWRhdGFUZXh0QW5kVXBkYXRlVmlzaWJpbGl0eSgpO1xuICB9XG59IiwiaW1wb3J0IHtCdXR0b24sIEJ1dHRvbkNvbmZpZ30gZnJvbSAnLi9idXR0b24nO1xuaW1wb3J0IHtOb0FyZ3MsIEV2ZW50RGlzcGF0Y2hlciwgRXZlbnR9IGZyb20gJy4uL2V2ZW50ZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBVSUluc3RhbmNlTWFuYWdlciB9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgTG9jYWxpemFibGVUZXh0IH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIGZvciBhIHRvZ2dsZSBidXR0b24gY29tcG9uZW50LlxuICpcbiAqIEBjYXRlZ29yeSBDb25maWdzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVG9nZ2xlQnV0dG9uQ29uZmlnIGV4dGVuZHMgQnV0dG9uQ29uZmlnIHtcbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3MgdGhhdCBtYXJrcyB0aGUgb24tc3RhdGUgb2YgdGhlIGJ1dHRvbi5cbiAgICovXG4gIG9uQ2xhc3M/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIHRoYXQgbWFya3MgdGhlIG9mZi1zdGF0ZSBvZiB0aGUgYnV0dG9uLlxuICAgKi9cbiAgb2ZmQ2xhc3M/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBXQ0FHMjAgc3RhbmRhcmQgZm9yIGRlZmluaW5nIGluZm8gYWJvdXQgdGhlIGNvbXBvbmVudCAodXN1YWxseSB0aGUgbmFtZSlcbiAgICpcbiAgICogSXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIGBvbkFyaWFMYWJlbGAgYW5kIGBvZmZBcmlhTGFiZWxgIGZvciB0b2dnbGUgYnV0dG9uc1xuICAgKiBhcyB0aGUgY29tcG9uZW50IGNhbiB0aGVuIHVwZGF0ZSB0aGVtIGFzIHRoZSBidXR0b24gaXMgdXNlZC5cbiAgICpcbiAgICogSWYgYm90aCBgYXJpYUxhYmVsYCBhbmQgYG9uQXJpYUxhYmVsYCBhcmUgc2V0LCBgb25BcmlhTGFiZWxgIGlzIHVzZWQuXG4gICAqL1xuICBhcmlhTGFiZWw/OiBMb2NhbGl6YWJsZVRleHQ7XG4gIC8qKlxuICAgKiBUaGUgYXJpYSBsYWJlbCB0aGF0IG1hcmtzIHRoZSBvbi1zdGF0ZSBvZiB0aGUgYnV0dG9uLlxuICAgKi9cbiAgb25BcmlhTGFiZWw/OiBMb2NhbGl6YWJsZVRleHQ7XG4gIC8qKlxuICAgKiBUaGUgYXJpYSBsYWJlbCB0aGF0IG1hcmtzIHRoZSBvZmYtc3RhdGUgb2YgdGhlIGJ1dHRvbi5cbiAgICovXG4gIG9mZkFyaWFMYWJlbD86IExvY2FsaXphYmxlVGV4dDtcbiAgLyoqXG4gICAqIFRoZSB0ZXh0IGFzIHN0cmluZyBvciBhcyBsb2NhbGl6ZSBjYWxsYmFjayBvbiB0aGUgYnV0dG9uLlxuICAgKi9cbiAgdGV4dD86IExvY2FsaXphYmxlVGV4dDtcbn1cblxuLyoqXG4gKiBBIGJ1dHRvbiB0aGF0IGNhbiBiZSB0b2dnbGVkIGJldHdlZW4gJ29uJyBhbmQgJ29mZicgc3RhdGVzLlxuICpcbiAqIEBjYXRlZ29yeSBDb21wb25lbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBUb2dnbGVCdXR0b248Q29uZmlnIGV4dGVuZHMgVG9nZ2xlQnV0dG9uQ29uZmlnPiBleHRlbmRzIEJ1dHRvbjxDb25maWc+IHtcblxuICBwcml2YXRlIG9uU3RhdGU6IGJvb2xlYW47XG5cbiAgcHJpdmF0ZSB0b2dnbGVCdXR0b25FdmVudHMgPSB7XG4gICAgb25Ub2dnbGU6IG5ldyBFdmVudERpc3BhdGNoZXI8VG9nZ2xlQnV0dG9uPENvbmZpZz4sIE5vQXJncz4oKSxcbiAgICBvblRvZ2dsZU9uOiBuZXcgRXZlbnREaXNwYXRjaGVyPFRvZ2dsZUJ1dHRvbjxDb25maWc+LCBOb0FyZ3M+KCksXG4gICAgb25Ub2dnbGVPZmY6IG5ldyBFdmVudERpc3BhdGNoZXI8VG9nZ2xlQnV0dG9uPENvbmZpZz4sIE5vQXJncz4oKSxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICBjb25zdCBkZWZhdWx0Q29uZmlnOiBUb2dnbGVCdXR0b25Db25maWcgPSB7XG4gICAgICBjc3NDbGFzczogJ3VpLXRvZ2dsZWJ1dHRvbicsXG4gICAgICBvbkNsYXNzOiAnb24nLFxuICAgICAgb2ZmQ2xhc3M6ICdvZmYnLFxuICAgIH07XG5cbiAgICBpZiAoY29uZmlnLm9uQXJpYUxhYmVsKSB7XG4gICAgICBjb25maWcuYXJpYUxhYmVsID0gY29uZmlnLm9uQXJpYUxhYmVsO1xuICAgIH1cblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIGRlZmF1bHRDb25maWcgYXMgQ29uZmlnLCB0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG4gICAgdGhpcy5nZXREb21FbGVtZW50KCkuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoY29uZmlnLm9mZkNsYXNzKSk7XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgYnV0dG9uIHRvIHRoZSAnb24nIHN0YXRlLlxuICAgKi9cbiAgb24oKSB7XG4gICAgaWYgKHRoaXMuaXNPZmYoKSkge1xuICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5nZXRDb25maWcoKTtcblxuICAgICAgdGhpcy5vblN0YXRlID0gdHJ1ZTtcbiAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4Q3NzKGNvbmZpZy5vZmZDbGFzcykpO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoY29uZmlnLm9uQ2xhc3MpKTtcblxuICAgICAgdGhpcy5vblRvZ2dsZUV2ZW50KCk7XG4gICAgICB0aGlzLm9uVG9nZ2xlT25FdmVudCgpO1xuXG4gICAgICB0aGlzLnNldEFyaWFBdHRyKCdwcmVzc2VkJywgJ3RydWUnKTtcblxuICAgICAgaWYgKHRoaXMuY29uZmlnLm9uQXJpYUxhYmVsKSB7XG4gICAgICAgIHRoaXMuc2V0QXJpYUxhYmVsKHRoaXMuY29uZmlnLm9uQXJpYUxhYmVsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgYnV0dG9uIHRvIHRoZSAnb2ZmJyBzdGF0ZS5cbiAgICovXG4gIG9mZigpIHtcbiAgICBpZiAodGhpcy5pc09uKCkpIHtcbiAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG5cbiAgICAgIHRoaXMub25TdGF0ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5nZXREb21FbGVtZW50KCkucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoY29uZmlnLm9uQ2xhc3MpKTtcbiAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKGNvbmZpZy5vZmZDbGFzcykpO1xuXG4gICAgICB0aGlzLm9uVG9nZ2xlRXZlbnQoKTtcbiAgICAgIHRoaXMub25Ub2dnbGVPZmZFdmVudCgpO1xuXG4gICAgICB0aGlzLnNldEFyaWFBdHRyKCdwcmVzc2VkJywgJ2ZhbHNlJyk7XG5cbiAgICAgIGlmICh0aGlzLmNvbmZpZy5vZmZBcmlhTGFiZWwpIHtcbiAgICAgICAgdGhpcy5zZXRBcmlhTGFiZWwodGhpcy5jb25maWcub2ZmQXJpYUxhYmVsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlIHRoZSBidXR0b24gJ29uJyBpZiBpdCBpcyAnb2ZmJywgb3IgJ29mZicgaWYgaXQgaXMgJ29uJy5cbiAgICovXG4gIHRvZ2dsZSgpIHtcbiAgICBpZiAodGhpcy5pc09uKCkpIHtcbiAgICAgIHRoaXMub2ZmKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub24oKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSB0b2dnbGUgYnV0dG9uIGlzIGluIHRoZSAnb24nIHN0YXRlLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBidXR0b24gaXMgJ29uJywgZmFsc2UgaWYgJ29mZidcbiAgICovXG4gIGlzT24oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMub25TdGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIHRvZ2dsZSBidXR0b24gaXMgaW4gdGhlICdvZmYnIHN0YXRlLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBidXR0b24gaXMgJ29mZicsIGZhbHNlIGlmICdvbidcbiAgICovXG4gIGlzT2ZmKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5pc09uKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25DbGlja0V2ZW50KCkge1xuICAgIHN1cGVyLm9uQ2xpY2tFdmVudCgpO1xuXG4gICAgLy8gRmlyZSB0aGUgdG9nZ2xlIGV2ZW50IHRvZ2V0aGVyIHdpdGggdGhlIGNsaWNrIGV2ZW50XG4gICAgLy8gKHRoZXkgYXJlIHRlY2huaWNhbGx5IHRoZSBzYW1lLCBvbmx5IHRoZSBzZW1hbnRpY3MgYXJlIGRpZmZlcmVudClcbiAgICB0aGlzLm9uVG9nZ2xlRXZlbnQoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvblRvZ2dsZUV2ZW50KCkge1xuICAgIHRoaXMudG9nZ2xlQnV0dG9uRXZlbnRzLm9uVG9nZ2xlLmRpc3BhdGNoKHRoaXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uVG9nZ2xlT25FdmVudCgpIHtcbiAgICB0aGlzLnRvZ2dsZUJ1dHRvbkV2ZW50cy5vblRvZ2dsZU9uLmRpc3BhdGNoKHRoaXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uVG9nZ2xlT2ZmRXZlbnQoKSB7XG4gICAgdGhpcy50b2dnbGVCdXR0b25FdmVudHMub25Ub2dnbGVPZmYuZGlzcGF0Y2godGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgZXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIHRoZSBidXR0b24gaXMgdG9nZ2xlZC5cbiAgICogQHJldHVybnMge0V2ZW50PFRvZ2dsZUJ1dHRvbjxDb25maWc+LCBOb0FyZ3M+fVxuICAgKi9cbiAgZ2V0IG9uVG9nZ2xlKCk6IEV2ZW50PFRvZ2dsZUJ1dHRvbjxDb25maWc+LCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy50b2dnbGVCdXR0b25FdmVudHMub25Ub2dnbGUuZ2V0RXZlbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIGJ1dHRvbiBpcyB0b2dnbGVkICdvbicuXG4gICAqIEByZXR1cm5zIHtFdmVudDxUb2dnbGVCdXR0b248Q29uZmlnPiwgTm9BcmdzPn1cbiAgICovXG4gIGdldCBvblRvZ2dsZU9uKCk6IEV2ZW50PFRvZ2dsZUJ1dHRvbjxDb25maWc+LCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy50b2dnbGVCdXR0b25FdmVudHMub25Ub2dnbGVPbi5nZXRFdmVudCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgYnV0dG9uIGlzIHRvZ2dsZWQgJ29mZicuXG4gICAqIEByZXR1cm5zIHtFdmVudDxUb2dnbGVCdXR0b248Q29uZmlnPiwgTm9BcmdzPn1cbiAgICovXG4gIGdldCBvblRvZ2dsZU9mZigpOiBFdmVudDxUb2dnbGVCdXR0b248Q29uZmlnPiwgTm9BcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMudG9nZ2xlQnV0dG9uRXZlbnRzLm9uVG9nZ2xlT2ZmLmdldEV2ZW50KCk7XG4gIH1cbn0iLCJpbXBvcnQge0NvbXBvbmVudCwgQ29tcG9uZW50Q29uZmlnfSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQge0RPTX0gZnJvbSAnLi4vZG9tJztcblxuLyoqXG4gKiBBbmltYXRlZCBhbmFsb2cgVFYgc3RhdGljIG5vaXNlLlxuICpcbiAqIEBjYXRlZ29yeSBDb21wb25lbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBUdk5vaXNlQ2FudmFzIGV4dGVuZHMgQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4ge1xuXG4gIHByaXZhdGUgY2FudmFzOiBET007XG5cbiAgcHJpdmF0ZSBjYW52YXNFbGVtZW50OiBIVE1MQ2FudmFzRWxlbWVudDtcbiAgcHJpdmF0ZSBjYW52YXNDb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XG4gIHByaXZhdGUgY2FudmFzV2lkdGggPSAxNjA7XG4gIHByaXZhdGUgY2FudmFzSGVpZ2h0ID0gOTA7XG4gIHByaXZhdGUgaW50ZXJmZXJlbmNlSGVpZ2h0ID0gNTA7XG4gIHByaXZhdGUgbGFzdEZyYW1lVXBkYXRlOiBudW1iZXIgPSAwO1xuICBwcml2YXRlIGZyYW1lSW50ZXJ2YWw6IG51bWJlciA9IDYwO1xuICBwcml2YXRlIHVzZUFuaW1hdGlvbkZyYW1lOiBib29sZWFuID0gISF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICBwcml2YXRlIG5vaXNlQW5pbWF0aW9uV2luZG93UG9zOiBudW1iZXI7XG4gIHByaXZhdGUgZnJhbWVVcGRhdGVIYW5kbGVySWQ6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbXBvbmVudENvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktdHZub2lzZWNhbnZhcycsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRvRG9tRWxlbWVudCgpOiBET00ge1xuICAgIHJldHVybiB0aGlzLmNhbnZhcyA9IG5ldyBET00oJ2NhbnZhcycsIHsgJ2NsYXNzJzogdGhpcy5nZXRDc3NDbGFzc2VzKCkgfSwgdGhpcyk7XG4gIH1cblxuICBzdGFydCgpOiB2b2lkIHtcbiAgICB0aGlzLmNhbnZhc0VsZW1lbnQgPSA8SFRNTENhbnZhc0VsZW1lbnQ+dGhpcy5jYW52YXMuZ2V0KDApO1xuICAgIHRoaXMuY2FudmFzQ29udGV4dCA9IHRoaXMuY2FudmFzRWxlbWVudC5nZXRDb250ZXh0KCcyZCcpO1xuICAgIHRoaXMubm9pc2VBbmltYXRpb25XaW5kb3dQb3MgPSAtdGhpcy5jYW52YXNIZWlnaHQ7XG4gICAgdGhpcy5sYXN0RnJhbWVVcGRhdGUgPSAwO1xuXG4gICAgdGhpcy5jYW52YXNFbGVtZW50LndpZHRoID0gdGhpcy5jYW52YXNXaWR0aDtcbiAgICB0aGlzLmNhbnZhc0VsZW1lbnQuaGVpZ2h0ID0gdGhpcy5jYW52YXNIZWlnaHQ7XG5cbiAgICB0aGlzLnJlbmRlckZyYW1lKCk7XG4gIH1cblxuICBzdG9wKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnVzZUFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmZyYW1lVXBkYXRlSGFuZGxlcklkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZnJhbWVVcGRhdGVIYW5kbGVySWQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyRnJhbWUoKTogdm9pZCB7XG4gICAgLy8gVGhpcyBjb2RlIGhhcyBiZWVuIGNvcGllZCBmcm9tIHRoZSBwbGF5ZXIgY29udHJvbHMuanMgYW5kIHNpbXBsaWZpZWRcblxuICAgIGlmICh0aGlzLmxhc3RGcmFtZVVwZGF0ZSArIHRoaXMuZnJhbWVJbnRlcnZhbCA+IG5ldyBEYXRlKCkuZ2V0VGltZSgpKSB7XG4gICAgICAvLyBJdCdzIHRvbyBlYXJseSB0byByZW5kZXIgdGhlIG5leHQgZnJhbWVcbiAgICAgIHRoaXMuc2NoZWR1bGVOZXh0UmVuZGVyKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGN1cnJlbnRQaXhlbE9mZnNldDtcbiAgICBsZXQgY2FudmFzV2lkdGggPSB0aGlzLmNhbnZhc1dpZHRoO1xuICAgIGxldCBjYW52YXNIZWlnaHQgPSB0aGlzLmNhbnZhc0hlaWdodDtcblxuICAgIC8vIENyZWF0ZSB0ZXh0dXJlXG4gICAgbGV0IG5vaXNlSW1hZ2UgPSB0aGlzLmNhbnZhc0NvbnRleHQuY3JlYXRlSW1hZ2VEYXRhKGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQpO1xuXG4gICAgLy8gRmlsbCB0ZXh0dXJlIHdpdGggbm9pc2VcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGNhbnZhc0hlaWdodDsgeSsrKSB7XG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGNhbnZhc1dpZHRoOyB4KyspIHtcbiAgICAgICAgY3VycmVudFBpeGVsT2Zmc2V0ID0gKGNhbnZhc1dpZHRoICogeSAqIDQpICsgeCAqIDQ7XG4gICAgICAgIG5vaXNlSW1hZ2UuZGF0YVtjdXJyZW50UGl4ZWxPZmZzZXRdID0gTWF0aC5yYW5kb20oKSAqIDI1NTtcbiAgICAgICAgaWYgKHkgPCB0aGlzLm5vaXNlQW5pbWF0aW9uV2luZG93UG9zIHx8IHkgPiB0aGlzLm5vaXNlQW5pbWF0aW9uV2luZG93UG9zICsgdGhpcy5pbnRlcmZlcmVuY2VIZWlnaHQpIHtcbiAgICAgICAgICBub2lzZUltYWdlLmRhdGFbY3VycmVudFBpeGVsT2Zmc2V0XSAqPSAwLjg1O1xuICAgICAgICB9XG4gICAgICAgIG5vaXNlSW1hZ2UuZGF0YVtjdXJyZW50UGl4ZWxPZmZzZXQgKyAxXSA9IG5vaXNlSW1hZ2UuZGF0YVtjdXJyZW50UGl4ZWxPZmZzZXRdO1xuICAgICAgICBub2lzZUltYWdlLmRhdGFbY3VycmVudFBpeGVsT2Zmc2V0ICsgMl0gPSBub2lzZUltYWdlLmRhdGFbY3VycmVudFBpeGVsT2Zmc2V0XTtcbiAgICAgICAgbm9pc2VJbWFnZS5kYXRhW2N1cnJlbnRQaXhlbE9mZnNldCArIDNdID0gNTA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUHV0IHRleHR1cmUgb250byBjYW52YXNcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQucHV0SW1hZ2VEYXRhKG5vaXNlSW1hZ2UsIDAsIDApO1xuXG4gICAgdGhpcy5sYXN0RnJhbWVVcGRhdGUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICB0aGlzLm5vaXNlQW5pbWF0aW9uV2luZG93UG9zICs9IDc7XG4gICAgaWYgKHRoaXMubm9pc2VBbmltYXRpb25XaW5kb3dQb3MgPiBjYW52YXNIZWlnaHQpIHtcbiAgICAgIHRoaXMubm9pc2VBbmltYXRpb25XaW5kb3dQb3MgPSAtY2FudmFzSGVpZ2h0O1xuICAgIH1cblxuICAgIHRoaXMuc2NoZWR1bGVOZXh0UmVuZGVyKCk7XG4gIH1cblxuICBwcml2YXRlIHNjaGVkdWxlTmV4dFJlbmRlcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy51c2VBbmltYXRpb25GcmFtZSkge1xuICAgICAgdGhpcy5mcmFtZVVwZGF0ZUhhbmRsZXJJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5yZW5kZXJGcmFtZS5iaW5kKHRoaXMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mcmFtZVVwZGF0ZUhhbmRsZXJJZCA9IHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMucmVuZGVyRnJhbWUuYmluZCh0aGlzKSwgdGhpcy5mcmFtZUludGVydmFsKTtcbiAgICB9XG4gIH1cbn0iLCJpbXBvcnQgeyBDb250YWluZXIsIENvbnRhaW5lckNvbmZpZyB9IGZyb20gJy4vY29udGFpbmVyJztcbmltcG9ydCB7IFVJSW5zdGFuY2VNYW5hZ2VyIH0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IERPTSwgSFRNTEVsZW1lbnRXaXRoQ29tcG9uZW50IH0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7IFRpbWVvdXQgfSBmcm9tICcuLi90aW1lb3V0JztcbmltcG9ydCB7IFBsYXllclV0aWxzIH0gZnJvbSAnLi4vcGxheWVydXRpbHMnO1xuaW1wb3J0IHsgQ2FuY2VsRXZlbnRBcmdzLCBFdmVudCBhcyBVaUV2ZW50LCBFdmVudERpc3BhdGNoZXIgfSBmcm9tICcuLi9ldmVudGRpc3BhdGNoZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJLCBQbGF5ZXJSZXNpemVkRXZlbnQgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcbmltcG9ydCB7IEJ1dHRvbiwgQnV0dG9uQ29uZmlnIH0gZnJvbSAnLi9idXR0b24nO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIGZvciBhIHtAbGluayBVSUNvbnRhaW5lcn0uXG4gKlxuICogQGNhdGVnb3J5IENvbmZpZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVSUNvbnRhaW5lckNvbmZpZyBleHRlbmRzIENvbnRhaW5lckNvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgZGVsYXkgaW4gbWlsbGlzZWNvbmRzIGFmdGVyIHdoaWNoIHRoZSBjb250cm9sIGJhciB3aWxsIGJlIGhpZGRlbiB3aGVuIHRoZXJlIGlzIG5vIHVzZXIgaW50ZXJhY3Rpb24uXG4gICAqIFNldCB0byAtMSBmb3IgdGhlIFVJIHRvIGJlIGFsd2F5cyBzaG93bi5cbiAgICogRGVmYXVsdDogNSBzZWNvbmRzICg1MDAwKVxuICAgKi9cbiAgaGlkZURlbGF5PzogbnVtYmVyO1xuICAvKipcbiAgICogQW4gYXJyYXkgb2YgcGxheWVyIHN0YXRlcyBpbiB3aGljaCB0aGUgVUkgd2lsbCBub3QgYmUgaGlkZGVuLCBubyBtYXR0ZXIgd2hhdCB0aGUge0BsaW5rIGhpZGVEZWxheX0gaXMuXG4gICAqL1xuICBoaWRlUGxheWVyU3RhdGVFeGNlcHRpb25zPzogUGxheWVyVXRpbHMuUGxheWVyU3RhdGVbXTtcbiAgLyoqXG4gICAqIFRoZSBIVE1MIGVsZW1lbnQgb24gd2hpY2ggdXNlciBpbnRlcmFjdGlvbiBldmVudHMgKGUuZy4gbW91c2UgYW5kIHRvdWNoIGV2ZW50cykgd2lsbCBiZSB0cmFja2VkIHRvIGRldGVjdFxuICAgKiBpbnRlcmFjdGlvbiB3aXRoIHRoZSBVSS4gVGhlc2UgYmFzaWNhbGx5IHRyaWdnZXIgc2hvd2luZyBhbmQgaGlkaW5nIG9mIHRoZSBVSS5cbiAgICogRGVmYXVsdDogdGhlIFVJIGNvbnRhaW5lciBpdHNlbGZcbiAgICovXG4gIHVzZXJJbnRlcmFjdGlvbkV2ZW50U291cmNlPzogSFRNTEVsZW1lbnQ7XG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgd2hldGhlciB0aGUgVUkgc2hvdWxkIGJlIGhpZGRlbiBpbW1lZGlhdGx5IGlmIHRoZSBtb3VzZSBsZWF2ZXMgdGhlIHVzZXJJbnRlcmFjdGlvbkV2ZW50U291cmNlLlxuICAgKiBJZiBmYWxzZSBvciBub3Qgc2V0IGl0IHdpbGwgd2FpdCBmb3IgdGhlIGhpZGVEZWxheS5cbiAgICogRGVmYXVsdDogZmFsc2VcbiAgICovXG4gIGhpZGVJbW1lZGlhdGVseU9uTW91c2VMZWF2ZT86IGJvb2xlYW47XG59XG5cbi8qKlxuICogVGhlIGJhc2UgY29udGFpbmVyIHRoYXQgY29udGFpbnMgYWxsIG9mIHRoZSBVSS4gVGhlIFVJQ29udGFpbmVyIGlzIHBhc3NlZCB0byB0aGUge0BsaW5rIFVJTWFuYWdlcn0gdG8gYnVpbGQgYW5kXG4gKiBzZXR1cCB0aGUgVUkuXG4gKlxuICogQGNhdGVnb3J5IENvbnRhaW5lcnNcbiAqL1xuZXhwb3J0IGNsYXNzIFVJQ29udGFpbmVyIGV4dGVuZHMgQ29udGFpbmVyPFVJQ29udGFpbmVyQ29uZmlnPiB7XG5cbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgU1RBVEVfUFJFRklYID0gJ3BsYXllci1zdGF0ZS0nO1xuXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEZVTExTQ1JFRU4gPSAnZnVsbHNjcmVlbic7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEJVRkZFUklORyA9ICdidWZmZXJpbmcnO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBSRU1PVEVfQ09OVFJPTCA9ICdyZW1vdGUtY29udHJvbCc7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENPTlRST0xTX1NIT1dOID0gJ2NvbnRyb2xzLXNob3duJztcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ09OVFJPTFNfSElEREVOID0gJ2NvbnRyb2xzLWhpZGRlbic7XG5cbiAgcHJpdmF0ZSB1aUhpZGVUaW1lb3V0OiBUaW1lb3V0O1xuICBwcml2YXRlIHBsYXllclN0YXRlQ2hhbmdlOiBFdmVudERpc3BhdGNoZXI8VUlDb250YWluZXIsIFBsYXllclV0aWxzLlBsYXllclN0YXRlPjtcblxuICBwcml2YXRlIHVzZXJJbnRlcmFjdGlvbkV2ZW50U291cmNlOiBET007XG4gIHByaXZhdGUgdXNlckludGVyYWN0aW9uRXZlbnRzOiB7IG5hbWU6IHN0cmluZywgaGFuZGxlcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdCB9W107XG4gIHByaXZhdGUgaGlkaW5nUHJldmVudGVkOiAoKSA9PiBib29sZWFuO1xuXG4gIHB1YmxpYyBoaWRlVWk6ICgpID0+IHZvaWQgPSAoKSA9PiB7fTtcbiAgcHVibGljIHNob3dVaTogKCkgPT4gdm9pZCA9ICgpID0+IHt9O1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogVUlDb250YWluZXJDb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywgPFVJQ29udGFpbmVyQ29uZmlnPntcbiAgICAgIGNzc0NsYXNzOiAndWktdWljb250YWluZXInLFxuICAgICAgcm9sZTogJ3JlZ2lvbicsXG4gICAgICBhcmlhTGFiZWw6IGkxOG4uZ2V0TG9jYWxpemVyKCdwbGF5ZXInKSxcbiAgICAgIGhpZGVEZWxheTogNTAwMCxcbiAgICAgIGhpZGVJbW1lZGlhdGVseU9uTW91c2VMZWF2ZTogZmFsc2UsXG4gICAgfSwgdGhpcy5jb25maWcpO1xuXG4gICAgdGhpcy5wbGF5ZXJTdGF0ZUNoYW5nZSA9IG5ldyBFdmVudERpc3BhdGNoZXI8VUlDb250YWluZXIsIFBsYXllclV0aWxzLlBsYXllclN0YXRlPigpO1xuICAgIHRoaXMuaGlkaW5nUHJldmVudGVkID0gKCkgPT4gZmFsc2U7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuXG4gICAgaWYgKGNvbmZpZy51c2VySW50ZXJhY3Rpb25FdmVudFNvdXJjZSkge1xuICAgICAgdGhpcy51c2VySW50ZXJhY3Rpb25FdmVudFNvdXJjZSA9IG5ldyBET00oY29uZmlnLnVzZXJJbnRlcmFjdGlvbkV2ZW50U291cmNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51c2VySW50ZXJhY3Rpb25FdmVudFNvdXJjZSA9IHRoaXMuZ2V0RG9tRWxlbWVudCgpO1xuICAgIH1cblxuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICB0aGlzLmNvbmZpZ3VyZVVJU2hvd0hpZGUocGxheWVyLCB1aW1hbmFnZXIpO1xuICAgIHRoaXMuY29uZmlndXJlUGxheWVyU3RhdGVzKHBsYXllciwgdWltYW5hZ2VyKTtcbiAgfVxuXG4gIHByaXZhdGUgY29uZmlndXJlVUlTaG93SGlkZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIGxldCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuXG4gICAgaWYgKGNvbmZpZy5oaWRlRGVsYXkgPT09IC0xKSB7XG4gICAgICB1aW1hbmFnZXIub25Db25maWd1cmVkLnN1YnNjcmliZSgoKSA9PiB1aW1hbmFnZXIub25Db250cm9sc1Nob3cuZGlzcGF0Y2godGhpcykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBpc1VpU2hvd24gPSBmYWxzZTtcbiAgICBsZXQgaXNTZWVraW5nID0gZmFsc2U7XG4gICAgbGV0IGlzRmlyc3RUb3VjaCA9IHRydWU7XG4gICAgbGV0IHBsYXllclN0YXRlOiBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZTtcblxuICAgIHRoaXMuaGlkaW5nUHJldmVudGVkID0gKCk6IGJvb2xlYW4gPT4ge1xuICAgICAgcmV0dXJuIGNvbmZpZy5oaWRlUGxheWVyU3RhdGVFeGNlcHRpb25zICYmIGNvbmZpZy5oaWRlUGxheWVyU3RhdGVFeGNlcHRpb25zLmluZGV4T2YocGxheWVyU3RhdGUpID4gLTE7XG4gICAgfTtcblxuICAgIHRoaXMuc2hvd1VpID0gKCkgPT4ge1xuICAgICAgaWYgKCFpc1VpU2hvd24pIHtcbiAgICAgICAgLy8gTGV0IHN1YnNjcmliZXJzIGtub3cgdGhhdCB0aGV5IHNob3VsZCByZXZlYWwgdGhlbXNlbHZlc1xuICAgICAgICB1aW1hbmFnZXIub25Db250cm9sc1Nob3cuZGlzcGF0Y2godGhpcyk7XG4gICAgICAgIGlzVWlTaG93biA9IHRydWU7XG4gICAgICB9XG4gICAgICAvLyBEb24ndCB0cmlnZ2VyIHRpbWVvdXQgd2hpbGUgc2Vla2luZyAoaXQgd2lsbCBiZSB0cmlnZ2VyZWQgb25jZSB0aGUgc2VlayBpcyBmaW5pc2hlZCkgb3IgY2FzdGluZ1xuICAgICAgaWYgKCFpc1NlZWtpbmcgJiYgIXBsYXllci5pc0Nhc3RpbmcoKSAmJiAhdGhpcy5oaWRpbmdQcmV2ZW50ZWQoKSkge1xuICAgICAgICB0aGlzLnVpSGlkZVRpbWVvdXQuc3RhcnQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5oaWRlVWkgPSAoKSA9PiB7XG4gICAgICAvLyBIaWRlIHRoZSBVSSBvbmx5IGlmIGl0IGlzIHNob3duLCBhbmQgaWYgbm90IGNhc3RpbmdcbiAgICAgIGlmIChpc1VpU2hvd24gJiYgIXBsYXllci5pc0Nhc3RpbmcoKSkge1xuICAgICAgICAvLyBJc3N1ZSBhIHByZXZpZXcgZXZlbnQgdG8gY2hlY2sgaWYgd2UgYXJlIGdvb2QgdG8gaGlkZSB0aGUgY29udHJvbHNcbiAgICAgICAgbGV0IHByZXZpZXdIaWRlRXZlbnRBcmdzID0gPENhbmNlbEV2ZW50QXJncz57fTtcbiAgICAgICAgdWltYW5hZ2VyLm9uUHJldmlld0NvbnRyb2xzSGlkZS5kaXNwYXRjaCh0aGlzLCBwcmV2aWV3SGlkZUV2ZW50QXJncyk7XG5cbiAgICAgICAgaWYgKCFwcmV2aWV3SGlkZUV2ZW50QXJncy5jYW5jZWwpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgcHJldmlldyB3YXNuJ3QgY2FuY2VsZWQsIGxldCBzdWJzY3JpYmVycyBrbm93IHRoYXQgdGhleSBzaG91bGQgbm93IGhpZGUgdGhlbXNlbHZlc1xuICAgICAgICAgIHVpbWFuYWdlci5vbkNvbnRyb2xzSGlkZS5kaXNwYXRjaCh0aGlzKTtcbiAgICAgICAgICBpc1VpU2hvd24gPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJZiB0aGUgaGlkZSBwcmV2aWV3IHdhcyBjYW5jZWxlZCwgY29udGludWUgdG8gc2hvdyBVSVxuICAgICAgICAgIHRoaXMuc2hvd1VpKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gVGltZW91dCB0byBkZWZlciBVSSBoaWRpbmcgYnkgdGhlIGNvbmZpZ3VyZWQgZGVsYXkgdGltZVxuICAgIHRoaXMudWlIaWRlVGltZW91dCA9IG5ldyBUaW1lb3V0KGNvbmZpZy5oaWRlRGVsYXksIHRoaXMuaGlkZVVpKTtcblxuICAgIHRoaXMudXNlckludGVyYWN0aW9uRXZlbnRzID0gW3tcbiAgICAgIC8vIE9uIHRvdWNoIGRpc3BsYXlzLCB0aGUgZmlyc3QgdG91Y2ggcmV2ZWFscyB0aGUgVUlcbiAgICAgIG5hbWU6ICd0b3VjaGVuZCcsXG4gICAgICBoYW5kbGVyOiAoZSkgPT4ge1xuICAgICAgICBjb25zdCBzaG91bGRQcmV2ZW50RGVmYXVsdCA9ICgoZTogRXZlbnQpOiBCb29sZWFuID0+IHtcbiAgICAgICAgICBjb25zdCBmaW5kQnV0dG9uQ29tcG9uZW50ID0gKChlbGVtZW50OiBIVE1MRWxlbWVudFdpdGhDb21wb25lbnQpOiBCdXR0b248QnV0dG9uQ29uZmlnPiB8IG51bGwgPT4ge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICFlbGVtZW50XG4gICAgICAgICAgICAgICAgICB8fCBlbGVtZW50ID09PSB0aGlzLnVzZXJJbnRlcmFjdGlvbkV2ZW50U291cmNlLmdldCgwKVxuICAgICAgICAgICAgICAgICAgfHwgZWxlbWVudC5jb21wb25lbnQgaW5zdGFuY2VvZiBVSUNvbnRhaW5lclxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5jb21wb25lbnQgJiYgZWxlbWVudC5jb21wb25lbnQgaW5zdGFuY2VvZiBCdXR0b24pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuY29tcG9uZW50O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZpbmRCdXR0b25Db21wb25lbnQoZWxlbWVudC5wYXJlbnRFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGNvbnN0IGJ1dHRvbkNvbXBvbmVudCA9IGZpbmRCdXR0b25Db21wb25lbnQoZS50YXJnZXQgYXMgSFRNTEVsZW1lbnRXaXRoQ29tcG9uZW50KTtcbiAgICAgICAgICByZXR1cm4gIShidXR0b25Db21wb25lbnQgJiYgYnV0dG9uQ29tcG9uZW50LmdldENvbmZpZygpLmFjY2VwdHNUb3VjaFdpdGhVaUhpZGRlbik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghaXNVaVNob3duKSB7XG4gICAgICAgICAgLy8gT25seSBpZiB0aGUgVUkgaXMgaGlkZGVuLCB3ZSBwcmV2ZW50IG90aGVyIGFjdGlvbnMgKGV4Y2VwdCBmb3IgdGhlIGZpcnN0IHRvdWNoKSBhbmQgcmV2ZWFsIHRoZSBVSVxuICAgICAgICAgIC8vIGluc3RlYWQuIFRoZSBmaXJzdCB0b3VjaCBpcyBub3QgcHJldmVudGVkIHRvIGxldCBvdGhlciBsaXN0ZW5lcnMgcmVjZWl2ZSB0aGUgZXZlbnQgYW5kIHRyaWdnZXIgYW5cbiAgICAgICAgICAvLyBpbml0aWFsIGFjdGlvbiwgZS5nLiB0aGUgaHVnZSBwbGF5YmFjayBidXR0b24gY2FuIGRpcmVjdGx5IHN0YXJ0IHBsYXliYWNrIGluc3RlYWQgb2YgcmVxdWlyaW5nIGEgZG91YmxlXG4gICAgICAgICAgLy8gdGFwIHdoaWNoIDEuIHJldmVhbHMgdGhlIFVJIGFuZCAyLiBzdGFydHMgcGxheWJhY2suXG4gICAgICAgICAgaWYgKGlzRmlyc3RUb3VjaCAmJiAhcGxheWVyLmlzUGxheWluZygpKSB7XG4gICAgICAgICAgICBpc0ZpcnN0VG91Y2ggPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gT24gdG91Y2ggaW5wdXQgZGV2aWNlcywgdGhlIGZpcnN0IHRvdWNoIGlzIGV4cGVjdGVkIHRvIGRpc3BsYXkgdGhlIFVJIGNvbnRyb2xzIGFuZCBub3QgYmUgcHJvcGFnYXRlZCB0b1xuICAgICAgICAgICAgLy8gb3RoZXIgY29tcG9uZW50cy5cbiAgICAgICAgICAgIC8vIFdoZW4gYnV0dG9ucyBhcmUgYWx3YXlzIHZpc2libGUgdGhpcyBjYXVzZXMgVVggcHJvYmxlbXMsIGFzIHRoZSBmaXJzdCB0b3VjaCBpcyBub3QgcmVjb2duaXplZC5cbiAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIGNhc2UgZm9yIHRoZSB7QGxpbmsgQWRTa2lwQnV0dG9ufSBhbmQge0BsaW5rIEFkQ2xpY2tPdmVybGF5fS5cbiAgICAgICAgICAgIC8vIFRvIHByZXZlbnQgVVggaXNzdWVzIHdoZXJlIHRoZSBidXR0b25zIG5lZWQgdG8gYmUgdG91Y2hlZCB0d2ljZSwgd2UgZG8gbm90IHByZXZlbnQgdGhlIGZpcnN0IHRvdWNoIGV2ZW50LlxuICAgICAgICAgICAgaWYgKHNob3VsZFByZXZlbnREZWZhdWx0KGUpKSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5zaG93VWkoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LCB7XG4gICAgICAvLyBXaGVuIHRoZSBtb3VzZSBlbnRlcnMsIHdlIHNob3cgdGhlIFVJXG4gICAgICBuYW1lOiAnbW91c2VlbnRlcicsXG4gICAgICBoYW5kbGVyOiAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2hvd1VpKCk7XG4gICAgICB9LFxuICAgIH0sIHtcbiAgICAgIC8vIFdoZW4gdGhlIG1vdXNlIG1vdmVzIHdpdGhpbiwgd2Ugc2hvdyB0aGUgVUlcbiAgICAgIG5hbWU6ICdtb3VzZW1vdmUnLFxuICAgICAgaGFuZGxlcjogKCkgPT4ge1xuICAgICAgICB0aGlzLnNob3dVaSgpO1xuICAgICAgfSxcbiAgICB9LCB7XG4gICAgICBuYW1lOiAnZm9jdXNpbicsXG4gICAgICBoYW5kbGVyOiAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2hvd1VpKCk7XG4gICAgICB9LFxuICAgIH0sIHtcbiAgICAgIG5hbWU6ICdrZXlkb3duJyxcbiAgICAgIGhhbmRsZXI6ICgpID0+IHtcbiAgICAgICAgdGhpcy5zaG93VWkoKTtcbiAgICAgIH0sXG4gICAgfSwge1xuICAgICAgLy8gV2hlbiB0aGUgbW91c2UgbGVhdmVzLCB3ZSBjYW4gcHJlcGFyZSB0byBoaWRlIHRoZSBVSSwgZXhjZXB0IGEgc2VlayBpcyBnb2luZyBvblxuICAgICAgbmFtZTogJ21vdXNlbGVhdmUnLFxuICAgICAgaGFuZGxlcjogKCkgPT4ge1xuICAgICAgICAvLyBXaGVuIGEgc2VlayBpcyBnb2luZyBvbiwgdGhlIHNlZWsgc2NydWIgcG9pbnRlciBtYXkgZXhpdCB0aGUgVUkgYXJlYSB3aGlsZSBzdGlsbCBzZWVraW5nLCBhbmQgd2UgZG8gbm90XG4gICAgICAgIC8vIGhpZGUgdGhlIFVJIGluIHN1Y2ggY2FzZXNcbiAgICAgICAgaWYgKCFpc1NlZWtpbmcgJiYgIXRoaXMuaGlkaW5nUHJldmVudGVkKCkpIHtcbiAgICAgICAgICBpZiAodGhpcy5jb25maWcuaGlkZUltbWVkaWF0ZWx5T25Nb3VzZUxlYXZlKSB7XG4gICAgICAgICAgICB0aGlzLmhpZGVVaSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVpSGlkZVRpbWVvdXQuc3RhcnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfV07XG5cbiAgICB0aGlzLnVzZXJJbnRlcmFjdGlvbkV2ZW50cy5mb3JFYWNoKChldmVudCkgPT4gdGhpcy51c2VySW50ZXJhY3Rpb25FdmVudFNvdXJjZS5vbihldmVudC5uYW1lLCBldmVudC5oYW5kbGVyKSk7XG5cbiAgICB1aW1hbmFnZXIub25TZWVrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLnVpSGlkZVRpbWVvdXQuY2xlYXIoKTsgLy8gRG9uJ3QgaGlkZSBVSSB3aGlsZSBhIHNlZWsgaXMgaW4gcHJvZ3Jlc3NcbiAgICAgIGlzU2Vla2luZyA9IHRydWU7XG4gICAgfSk7XG4gICAgdWltYW5hZ2VyLm9uU2Vla2VkLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBpc1NlZWtpbmcgPSBmYWxzZTtcbiAgICAgIGlmICghdGhpcy5oaWRpbmdQcmV2ZW50ZWQoKSkge1xuICAgICAgICB0aGlzLnVpSGlkZVRpbWVvdXQuc3RhcnQoKTsgLy8gUmUtZW5hYmxlIFVJIGhpZGUgdGltZW91dCBhZnRlciBhIHNlZWtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1aW1hbmFnZXIub25Db21wb25lbnRWaWV3TW9kZUNoYW5nZWQuc3Vic2NyaWJlKChfLCB7IG1vZGUgfSkgPT4gdGhpcy50cmFja0NvbXBvbmVudFZpZXdNb2RlKG1vZGUpKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQ2FzdFN0YXJ0ZWQsICgpID0+IHtcbiAgICAgIHRoaXMuc2hvd1VpKCk7IC8vIFNob3cgVUkgd2hlbiBhIENhc3Qgc2Vzc2lvbiBoYXMgc3RhcnRlZCAoVUkgd2lsbCB0aGVuIHN0YXkgcGVybWFuZW50bHkgb24gZHVyaW5nIHRoZSBzZXNzaW9uKVxuICAgIH0pO1xuICAgIHRoaXMucGxheWVyU3RhdGVDaGFuZ2Uuc3Vic2NyaWJlKChfLCBzdGF0ZSkgPT4ge1xuICAgICAgcGxheWVyU3RhdGUgPSBzdGF0ZTtcbiAgICAgIGlmICh0aGlzLmhpZGluZ1ByZXZlbnRlZCgpKSB7XG4gICAgICAgIC8vIEVudGVyaW5nIGEgcGxheWVyIHN0YXRlIHRoYXQgcHJldmVudHMgaGlkaW5nIGFuZCBmb3JjZXMgdGhlIGNvbnRyb2xzIHRvIGJlIHNob3duXG4gICAgICAgIHRoaXMudWlIaWRlVGltZW91dC5jbGVhcigpO1xuICAgICAgICB0aGlzLnNob3dVaSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRW50ZXJpbmcgYSBwbGF5ZXIgc3RhdGUgdGhhdCBhbGxvd3MgaGlkaW5nXG4gICAgICAgIHRoaXMudWlIaWRlVGltZW91dC5zdGFydCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBjb25maWd1cmVQbGF5ZXJTdGF0ZXMocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBsZXQgY29udGFpbmVyID0gdGhpcy5nZXREb21FbGVtZW50KCk7XG5cbiAgICAvLyBDb252ZXJ0IHBsYXllciBzdGF0ZXMgaW50byBDU1MgY2xhc3MgbmFtZXNcbiAgICBsZXQgc3RhdGVDbGFzc05hbWVzID0gPGFueT5bXTtcbiAgICBmb3IgKGxldCBzdGF0ZSBpbiBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZSkge1xuICAgICAgaWYgKGlzTmFOKE51bWJlcihzdGF0ZSkpKSB7XG4gICAgICAgIGxldCBlbnVtTmFtZSA9IFBsYXllclV0aWxzLlBsYXllclN0YXRlWzxhbnk+UGxheWVyVXRpbHMuUGxheWVyU3RhdGVbc3RhdGVdXTtcbiAgICAgICAgc3RhdGVDbGFzc05hbWVzW1BsYXllclV0aWxzLlBsYXllclN0YXRlW3N0YXRlXV0gPVxuICAgICAgICAgIHRoaXMucHJlZml4Q3NzKFVJQ29udGFpbmVyLlNUQVRFX1BSRUZJWCArIGVudW1OYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCByZW1vdmVTdGF0ZXMgPSAoKSA9PiB7XG4gICAgICBjb250YWluZXIucmVtb3ZlQ2xhc3Moc3RhdGVDbGFzc05hbWVzW1BsYXllclV0aWxzLlBsYXllclN0YXRlLklkbGVdKTtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDbGFzcyhzdGF0ZUNsYXNzTmFtZXNbUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUHJlcGFyZWRdKTtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDbGFzcyhzdGF0ZUNsYXNzTmFtZXNbUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUGxheWluZ10pO1xuICAgICAgY29udGFpbmVyLnJlbW92ZUNsYXNzKHN0YXRlQ2xhc3NOYW1lc1tQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5QYXVzZWRdKTtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDbGFzcyhzdGF0ZUNsYXNzTmFtZXNbUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuRmluaXNoZWRdKTtcbiAgICB9O1xuXG4gICAgY29uc3QgdXBkYXRlU3RhdGUgPSAoc3RhdGU6IFBsYXllclV0aWxzLlBsYXllclN0YXRlKSA9PiB7XG4gICAgICByZW1vdmVTdGF0ZXMoKTtcbiAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyhzdGF0ZUNsYXNzTmFtZXNbc3RhdGVdKTtcbiAgICAgIHRoaXMucGxheWVyU3RhdGVDaGFuZ2UuZGlzcGF0Y2godGhpcywgc3RhdGUpO1xuICAgIH07XG5cbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU291cmNlTG9hZGVkLCAoKSA9PiB7XG4gICAgICB1cGRhdGVTdGF0ZShQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5QcmVwYXJlZCk7XG4gICAgfSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXksICgpID0+IHtcbiAgICAgIHVwZGF0ZVN0YXRlKFBsYXllclV0aWxzLlBsYXllclN0YXRlLlBsYXlpbmcpO1xuICAgIH0pO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5aW5nLCAoKSA9PiB7XG4gICAgICB1cGRhdGVTdGF0ZShQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5QbGF5aW5nKTtcbiAgICB9KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuUGF1c2VkLCAoKSA9PiB7XG4gICAgICB1cGRhdGVTdGF0ZShQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5QYXVzZWQpO1xuICAgIH0pO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5YmFja0ZpbmlzaGVkLCAoKSA9PiB7XG4gICAgICB1cGRhdGVTdGF0ZShQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5GaW5pc2hlZCk7XG4gICAgfSk7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZVVubG9hZGVkLCAoKSA9PiB7XG4gICAgICB1cGRhdGVTdGF0ZShQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5JZGxlKTtcbiAgICB9KTtcbiAgICB1aW1hbmFnZXIuZ2V0Q29uZmlnKCkuZXZlbnRzLm9uVXBkYXRlZC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdXBkYXRlU3RhdGUoUGxheWVyVXRpbHMuZ2V0U3RhdGUocGxheWVyKSk7XG4gICAgfSk7XG5cbiAgICAvLyBGdWxsc2NyZWVuIG1hcmtlciBjbGFzc1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5WaWV3TW9kZUNoYW5nZWQsICgpID0+IHtcbiAgICAgIGlmIChwbGF5ZXIuZ2V0Vmlld01vZGUoKSA9PT0gcGxheWVyLmV4cG9ydHMuVmlld01vZGUuRnVsbHNjcmVlbikge1xuICAgICAgICBjb250YWluZXIuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoVUlDb250YWluZXIuRlVMTFNDUkVFTikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4Q3NzKFVJQ29udGFpbmVyLkZVTExTQ1JFRU4pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBJbml0IGZ1bGxzY3JlZW4gc3RhdGVcbiAgICBpZiAocGxheWVyLmdldFZpZXdNb2RlKCkgPT09IHBsYXllci5leHBvcnRzLlZpZXdNb2RlLkZ1bGxzY3JlZW4pIHtcbiAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLnByZWZpeENzcyhVSUNvbnRhaW5lci5GVUxMU0NSRUVOKSk7XG4gICAgfVxuXG4gICAgLy8gQnVmZmVyaW5nIG1hcmtlciBjbGFzc1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TdGFsbFN0YXJ0ZWQsICgpID0+IHtcbiAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLnByZWZpeENzcyhVSUNvbnRhaW5lci5CVUZGRVJJTkcpKTtcbiAgICB9KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU3RhbGxFbmRlZCwgKCkgPT4ge1xuICAgICAgY29udGFpbmVyLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4Q3NzKFVJQ29udGFpbmVyLkJVRkZFUklORykpO1xuICAgIH0pO1xuICAgIC8vIEluaXQgYnVmZmVyaW5nIHN0YXRlXG4gICAgaWYgKHBsYXllci5pc1N0YWxsZWQoKSkge1xuICAgICAgY29udGFpbmVyLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKFVJQ29udGFpbmVyLkJVRkZFUklORykpO1xuICAgIH1cblxuICAgIC8vIFJlbW90ZUNvbnRyb2wgbWFya2VyIGNsYXNzXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkNhc3RTdGFydGVkLCAoKSA9PiB7XG4gICAgICBjb250YWluZXIuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoVUlDb250YWluZXIuUkVNT1RFX0NPTlRST0wpKTtcbiAgICB9KTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQ2FzdFN0b3BwZWQsICgpID0+IHtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeENzcyhVSUNvbnRhaW5lci5SRU1PVEVfQ09OVFJPTCkpO1xuICAgIH0pO1xuICAgIC8vIEluaXQgUmVtb3RlQ29udHJvbCBzdGF0ZVxuICAgIGlmIChwbGF5ZXIuaXNDYXN0aW5nKCkpIHtcbiAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLnByZWZpeENzcyhVSUNvbnRhaW5lci5SRU1PVEVfQ09OVFJPTCkpO1xuICAgIH1cblxuICAgIC8vIENvbnRyb2xzIHZpc2liaWxpdHkgbWFya2VyIGNsYXNzXG4gICAgdWltYW5hZ2VyLm9uQ29udHJvbHNTaG93LnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBjb250YWluZXIucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoVUlDb250YWluZXIuQ09OVFJPTFNfSElEREVOKSk7XG4gICAgICBjb250YWluZXIuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoVUlDb250YWluZXIuQ09OVFJPTFNfU0hPV04pKTtcbiAgICB9KTtcbiAgICB1aW1hbmFnZXIub25Db250cm9sc0hpZGUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeENzcyhVSUNvbnRhaW5lci5DT05UUk9MU19TSE9XTikpO1xuICAgICAgY29udGFpbmVyLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKFVJQ29udGFpbmVyLkNPTlRST0xTX0hJRERFTikpO1xuICAgIH0pO1xuXG4gICAgLy8gTGF5b3V0IHNpemUgY2xhc3Nlc1xuICAgIGxldCB1cGRhdGVMYXlvdXRTaXplQ2xhc3NlcyA9ICh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgPT4ge1xuICAgICAgY29udGFpbmVyLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4Q3NzKCdsYXlvdXQtbWF4LXdpZHRoLTQwMCcpKTtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeENzcygnbGF5b3V0LW1heC13aWR0aC02MDAnKSk7XG4gICAgICBjb250YWluZXIucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXhDc3MoJ2xheW91dC1tYXgtd2lkdGgtODAwJykpO1xuICAgICAgY29udGFpbmVyLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4Q3NzKCdsYXlvdXQtbWF4LXdpZHRoLTEyMDAnKSk7XG5cbiAgICAgIGlmICh3aWR0aCA8PSA0MDApIHtcbiAgICAgICAgY29udGFpbmVyLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKCdsYXlvdXQtbWF4LXdpZHRoLTQwMCcpKTtcbiAgICAgIH0gZWxzZSBpZiAod2lkdGggPD0gNjAwKSB7XG4gICAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLnByZWZpeENzcygnbGF5b3V0LW1heC13aWR0aC02MDAnKSk7XG4gICAgICB9IGVsc2UgaWYgKHdpZHRoIDw9IDgwMCkge1xuICAgICAgICBjb250YWluZXIuYWRkQ2xhc3ModGhpcy5wcmVmaXhDc3MoJ2xheW91dC1tYXgtd2lkdGgtODAwJykpO1xuICAgICAgfSBlbHNlIGlmICh3aWR0aCA8PSAxMjAwKSB7XG4gICAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLnByZWZpeENzcygnbGF5b3V0LW1heC13aWR0aC0xMjAwJykpO1xuICAgICAgfVxuICAgIH07XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXllclJlc2l6ZWQsIChlOiBQbGF5ZXJSZXNpemVkRXZlbnQpID0+IHtcbiAgICAgIC8vIENvbnZlcnQgc3RyaW5ncyAod2l0aCBcInB4XCIgc3VmZml4KSB0byBpbnRzXG4gICAgICBsZXQgd2lkdGggPSBNYXRoLnJvdW5kKE51bWJlcihlLndpZHRoLnN1YnN0cmluZygwLCBlLndpZHRoLmxlbmd0aCAtIDIpKSk7XG4gICAgICBsZXQgaGVpZ2h0ID0gTWF0aC5yb3VuZChOdW1iZXIoZS5oZWlnaHQuc3Vic3RyaW5nKDAsIGUuaGVpZ2h0Lmxlbmd0aCAtIDIpKSk7XG5cbiAgICAgIHVwZGF0ZUxheW91dFNpemVDbGFzc2VzKHdpZHRoLCBoZWlnaHQpO1xuICAgIH0pO1xuICAgIC8vIEluaXQgbGF5b3V0IHN0YXRlXG4gICAgdXBkYXRlTGF5b3V0U2l6ZUNsYXNzZXMobmV3IERPTShwbGF5ZXIuZ2V0Q29udGFpbmVyKCkpLndpZHRoKCksIG5ldyBET00ocGxheWVyLmdldENvbnRhaW5lcigpKS5oZWlnaHQoKSk7XG4gIH1cblxuICByZWxlYXNlKCk6IHZvaWQge1xuICAgIC8vIEV4cGxpY2l0bHkgdW5zdWJzY3JpYmUgdXNlciBpbnRlcmFjdGlvbiBldmVudCBoYW5kbGVycyBiZWNhdXNlIHRoZXkgY291bGQgYmUgYXR0YWNoZWQgdG8gYW4gZXh0ZXJuYWwgZWxlbWVudFxuICAgIC8vIHRoYXQgaXNuJ3Qgb3duZWQgYnkgdGhlIFVJIGFuZCB0aGVyZWZvcmUgbm90IHJlbW92ZWQgb24gcmVsZWFzZS5cbiAgICBpZiAodGhpcy51c2VySW50ZXJhY3Rpb25FdmVudHMpIHtcbiAgICAgIHRoaXMudXNlckludGVyYWN0aW9uRXZlbnRzLmZvckVhY2goKGV2ZW50KSA9PiB0aGlzLnVzZXJJbnRlcmFjdGlvbkV2ZW50U291cmNlLm9mZihldmVudC5uYW1lLCBldmVudC5oYW5kbGVyKSk7XG4gICAgfVxuXG4gICAgc3VwZXIucmVsZWFzZSgpO1xuXG4gICAgaWYgKHRoaXMudWlIaWRlVGltZW91dCkge1xuICAgICAgdGhpcy51aUhpZGVUaW1lb3V0LmNsZWFyKCk7XG4gICAgfVxuICB9XG5cbiAgb25QbGF5ZXJTdGF0ZUNoYW5nZSgpOiBVaUV2ZW50PFVJQ29udGFpbmVyLCBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZT4ge1xuICAgIHJldHVybiB0aGlzLnBsYXllclN0YXRlQ2hhbmdlLmdldEV2ZW50KCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3VzcGVuZEhpZGVUaW1lb3V0KCkge1xuICAgIHRoaXMudWlIaWRlVGltZW91dC5zdXNwZW5kKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVzdW1lSGlkZVRpbWVvdXQoKSB7XG4gICAgdGhpcy51aUhpZGVUaW1lb3V0LnJlc3VtZSghdGhpcy5oaWRpbmdQcmV2ZW50ZWQoKSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdG9Eb21FbGVtZW50KCk6IERPTSB7XG4gICAgbGV0IGNvbnRhaW5lciA9IHN1cGVyLnRvRG9tRWxlbWVudCgpO1xuXG4gICAgLy8gRGV0ZWN0IGZsZXhib3ggc3VwcG9ydCAobm90IHN1cHBvcnRlZCBpbiBJRTkpXG4gICAgaWYgKGRvY3VtZW50ICYmIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJykuc3R5bGUuZmxleCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLnByZWZpeENzcygnZmxleGJveCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGFpbmVyLmFkZENsYXNzKHRoaXMucHJlZml4Q3NzKCduby1mbGV4Ym94JykpO1xuICAgIH1cblxuICAgIHJldHVybiBjb250YWluZXI7XG4gIH1cbn1cbiIsImltcG9ydCB7U2VsZWN0Qm94fSBmcm9tICcuL3NlbGVjdGJveCc7XG5pbXBvcnQge0xpc3RTZWxlY3RvckNvbmZpZ30gZnJvbSAnLi9saXN0c2VsZWN0b3InO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEEgc2VsZWN0IGJveCBwcm92aWRpbmcgYSBzZWxlY3Rpb24gYmV0d2VlbiAnYXV0bycgYW5kIHRoZSBhdmFpbGFibGUgdmlkZW8gcXVhbGl0aWVzLlxuICpcbiAqIEBjYXRlZ29yeSBDb21wb25lbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBWaWRlb1F1YWxpdHlTZWxlY3RCb3ggZXh0ZW5kcyBTZWxlY3RCb3gge1xuXG4gIHByaXZhdGUgaGFzQXV0bzogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IExpc3RTZWxlY3RvckNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzZXM6IFsndWktdmlkZW9xdWFsaXR5c2VsZWN0Ym94J10sXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBzZWxlY3RDdXJyZW50VmlkZW9RdWFsaXR5ID0gKCkgPT4ge1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKHBsYXllci5nZXRWaWRlb1F1YWxpdHkoKS5pZCk7XG4gICAgfTtcblxuICAgIGxldCB1cGRhdGVWaWRlb1F1YWxpdGllcyA9ICgpID0+IHtcbiAgICAgIGxldCB2aWRlb1F1YWxpdGllcyA9IHBsYXllci5nZXRBdmFpbGFibGVWaWRlb1F1YWxpdGllcygpO1xuXG4gICAgICB0aGlzLmNsZWFySXRlbXMoKTtcblxuICAgICAgLy8gUHJvZ3Jlc3NpdmUgc3RyZWFtcyBkbyBub3Qgc3VwcG9ydCBhdXRvbWF0aWMgcXVhbGl0eSBzZWxlY3Rpb25cbiAgICAgIHRoaXMuaGFzQXV0byA9IHBsYXllci5nZXRTdHJlYW1UeXBlKCkgIT09ICdwcm9ncmVzc2l2ZSc7XG5cbiAgICAgIGlmICh0aGlzLmhhc0F1dG8pIHtcbiAgICAgICAgLy8gQWRkIGVudHJ5IGZvciBhdXRvbWF0aWMgcXVhbGl0eSBzd2l0Y2hpbmcgKGRlZmF1bHQgc2V0dGluZylcbiAgICAgICAgdGhpcy5hZGRJdGVtKCdhdXRvJywgaTE4bi5nZXRMb2NhbGl6ZXIoJ2F1dG8nKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCB2aWRlbyBxdWFsaXRpZXNcbiAgICAgIGZvciAobGV0IHZpZGVvUXVhbGl0eSBvZiB2aWRlb1F1YWxpdGllcykge1xuICAgICAgICB0aGlzLmFkZEl0ZW0odmlkZW9RdWFsaXR5LmlkLCB2aWRlb1F1YWxpdHkubGFiZWwpO1xuICAgICAgfVxuXG4gICAgICAvLyBTZWxlY3QgaW5pdGlhbCBxdWFsaXR5XG4gICAgICBzZWxlY3RDdXJyZW50VmlkZW9RdWFsaXR5KCk7XG4gICAgfTtcblxuICAgIHRoaXMub25JdGVtU2VsZWN0ZWQuc3Vic2NyaWJlKChzZW5kZXI6IFZpZGVvUXVhbGl0eVNlbGVjdEJveCwgdmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgcGxheWVyLnNldFZpZGVvUXVhbGl0eSh2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvLyBVcGRhdGUgcXVhbGl0aWVzIHdoZW4gc291cmNlIGdvZXMgYXdheVxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VVbmxvYWRlZCwgdXBkYXRlVmlkZW9RdWFsaXRpZXMpO1xuICAgIC8vIFVwZGF0ZSBxdWFsaXRpZXMgd2hlbiB0aGUgcGVyaW9kIHdpdGhpbiBhIHNvdXJjZSBjaGFuZ2VzXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBlcmlvZFN3aXRjaGVkLCB1cGRhdGVWaWRlb1F1YWxpdGllcyk7XG4gICAgLy8gVXBkYXRlIHF1YWxpdHkgc2VsZWN0aW9uIHdoZW4gcXVhbGl0eSBpcyBjaGFuZ2VkIChmcm9tIG91dHNpZGUpXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlZpZGVvUXVhbGl0eUNoYW5nZWQsIHNlbGVjdEN1cnJlbnRWaWRlb1F1YWxpdHkpO1xuXG4gICAgaWYgKChwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudCBhcyBhbnkpLlZpZGVvUXVhbGl0eUFkZGVkKSB7XG4gICAgICAvLyBVcGRhdGUgcXVhbGl0aWVzIHdoZW4gdGhlaXIgYXZhaWxhYmlsaXR5IGNoYW5nZWRcbiAgICAgIC8vIFRPRE86IHJlbW92ZSBhbnkgY2FzdCBhZnRlciBuZXh0IHBsYXllciByZWxlYXNlXG4gICAgICBwbGF5ZXIub24oKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50IGFzIGFueSkuVmlkZW9RdWFsaXR5QWRkZWQsIHVwZGF0ZVZpZGVvUXVhbGl0aWVzKTtcbiAgICAgIHBsYXllci5vbigocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQgYXMgYW55KS5WaWRlb1F1YWxpdHlSZW1vdmVkLCB1cGRhdGVWaWRlb1F1YWxpdGllcyk7XG4gICAgfVxuXG4gICAgdWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKHVwZGF0ZVZpZGVvUXVhbGl0aWVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNlbGVjdCBib3ggY29udGFpbnMgYW4gJ2F1dG8nIGl0ZW0gZm9yIGF1dG9tYXRpYyBxdWFsaXR5IHNlbGVjdGlvbiBtb2RlLlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaGFzQXV0b0l0ZW0oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaGFzQXV0bztcbiAgfVxufSIsImltcG9ydCB7Q29udGFpbmVyLCBDb250YWluZXJDb25maWd9IGZyb20gJy4vY29udGFpbmVyJztcbmltcG9ydCB7Vm9sdW1lU2xpZGVyfSBmcm9tICcuL3ZvbHVtZXNsaWRlcic7XG5pbXBvcnQge1ZvbHVtZVRvZ2dsZUJ1dHRvbn0gZnJvbSAnLi92b2x1bWV0b2dnbGVidXR0b24nO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7VGltZW91dH0gZnJvbSAnLi4vdGltZW91dCc7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIGZvciBhIHtAbGluayBWb2x1bWVDb250cm9sQnV0dG9ufS5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29uZmlnc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFZvbHVtZUNvbnRyb2xCdXR0b25Db25maWcgZXh0ZW5kcyBDb250YWluZXJDb25maWcge1xuICAvKipcbiAgICogVGhlIGRlbGF5IGFmdGVyIHdoaWNoIHRoZSB2b2x1bWUgc2xpZGVyIHdpbGwgYmUgaGlkZGVuIHdoZW4gdGhlcmUgaXMgbm8gdXNlciBpbnRlcmFjdGlvbi5cbiAgICogQ2FyZSBtdXN0IGJlIHRha2VuIHRoYXQgdGhlIGRlbGF5IGlzIGxvbmcgZW5vdWdoIHNvIHVzZXJzIGNhbiByZWFjaCB0aGUgc2xpZGVyIGZyb20gdGhlIHRvZ2dsZSBidXR0b24sIGUuZy4gYnlcbiAgICogbW91c2UgbW92ZW1lbnQuIElmIHRoZSBkZWxheSBpcyB0b28gc2hvcnQsIHRoZSBzbGlkZXJzIGRpc2FwcGVhcnMgYmVmb3JlIHRoZSBtb3VzZSBwb2ludGVyIGhhcyByZWFjaGVkIGl0IGFuZFxuICAgKiB0aGUgdXNlciBpcyBub3QgYWJsZSB0byB1c2UgaXQuXG4gICAqIERlZmF1bHQ6IDUwMG1zXG4gICAqL1xuICBoaWRlRGVsYXk/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgaWYgdGhlIHZvbHVtZSBzbGlkZXIgc2hvdWxkIGJlIHZlcnRpY2FsbHkgb3IgaG9yaXpvbnRhbGx5IGFsaWduZWQuXG4gICAqIERlZmF1bHQ6IHRydWVcbiAgICovXG4gIHZlcnRpY2FsPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBBIGNvbXBvc2l0ZSB2b2x1bWUgY29udHJvbCB0aGF0IGNvbnNpc3RzIG9mIGFuZCBpbnRlcm5hbGx5IG1hbmFnZXMgYSB2b2x1bWUgY29udHJvbCBidXR0b24gdGhhdCBjYW4gYmUgdXNlZFxuICogZm9yIG11dGluZywgYW5kIGEgKGRlcGVuZGluZyBvbiB0aGUgQ1NTIHN0eWxlLCBlLmcuIHNsaWRlLW91dCkgdm9sdW1lIGNvbnRyb2wgYmFyLlxuICpcbiAqIEBjYXRlZ29yeSBCdXR0b25zXG4gKi9cbmV4cG9ydCBjbGFzcyBWb2x1bWVDb250cm9sQnV0dG9uIGV4dGVuZHMgQ29udGFpbmVyPFZvbHVtZUNvbnRyb2xCdXR0b25Db25maWc+IHtcblxuICBwcml2YXRlIHZvbHVtZVRvZ2dsZUJ1dHRvbjogVm9sdW1lVG9nZ2xlQnV0dG9uO1xuICBwcml2YXRlIHZvbHVtZVNsaWRlcjogVm9sdW1lU2xpZGVyO1xuXG4gIHByaXZhdGUgdm9sdW1lU2xpZGVySGlkZVRpbWVvdXQ6IFRpbWVvdXQ7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBWb2x1bWVDb250cm9sQnV0dG9uQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgdGhpcy52b2x1bWVUb2dnbGVCdXR0b24gPSBuZXcgVm9sdW1lVG9nZ2xlQnV0dG9uKCk7XG4gICAgdGhpcy52b2x1bWVTbGlkZXIgPSBuZXcgVm9sdW1lU2xpZGVyKHtcbiAgICAgIHZlcnRpY2FsOiBjb25maWcudmVydGljYWwgIT0gbnVsbCA/IGNvbmZpZy52ZXJ0aWNhbCA6IHRydWUsXG4gICAgICBoaWRkZW46IHRydWUsXG4gICAgfSk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMubWVyZ2VDb25maWcoY29uZmlnLCB7XG4gICAgICBjc3NDbGFzczogJ3VpLXZvbHVtZWNvbnRyb2xidXR0b24nLFxuICAgICAgY29tcG9uZW50czogW3RoaXMudm9sdW1lVG9nZ2xlQnV0dG9uLCB0aGlzLnZvbHVtZVNsaWRlcl0sXG4gICAgICBoaWRlRGVsYXk6IDUwMCxcbiAgICB9LCA8Vm9sdW1lQ29udHJvbEJ1dHRvbkNvbmZpZz50aGlzLmNvbmZpZyk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIpO1xuXG4gICAgbGV0IHZvbHVtZVRvZ2dsZUJ1dHRvbiA9IHRoaXMuZ2V0Vm9sdW1lVG9nZ2xlQnV0dG9uKCk7XG4gICAgbGV0IHZvbHVtZVNsaWRlciA9IHRoaXMuZ2V0Vm9sdW1lU2xpZGVyKCk7XG5cbiAgICB0aGlzLnZvbHVtZVNsaWRlckhpZGVUaW1lb3V0ID0gbmV3IFRpbWVvdXQodGhpcy5nZXRDb25maWcoKS5oaWRlRGVsYXksICgpID0+IHtcbiAgICAgIHZvbHVtZVNsaWRlci5oaWRlKCk7XG4gICAgfSk7XG5cbiAgICAvKlxuICAgICAqIFZvbHVtZSBTbGlkZXIgdmlzaWJpbGl0eSBoYW5kbGluZ1xuICAgICAqXG4gICAgICogVGhlIHZvbHVtZSBzbGlkZXIgc2hhbGwgYmUgdmlzaWJsZSB3aGlsZSB0aGUgdXNlciBob3ZlcnMgdGhlIG11dGUgdG9nZ2xlIGJ1dHRvbiwgd2hpbGUgdGhlIHVzZXIgaG92ZXJzIHRoZVxuICAgICAqIHZvbHVtZSBzbGlkZXIsIGFuZCB3aGlsZSB0aGUgdXNlciBzbGlkZXMgdGhlIHZvbHVtZSBzbGlkZXIuIElmIG5vbmUgb2YgdGhlc2Ugc2l0dWF0aW9ucyBhcmUgdHJ1ZSwgdGhlIHNsaWRlclxuICAgICAqIHNoYWxsIGRpc2FwcGVhci5cbiAgICAgKi9cbiAgICBsZXQgdm9sdW1lU2xpZGVySG92ZXJlZCA9IGZhbHNlO1xuICAgIHZvbHVtZVRvZ2dsZUJ1dHRvbi5nZXREb21FbGVtZW50KCkub24oJ21vdXNlZW50ZXInLCAoKSA9PiB7XG4gICAgICAvLyBTaG93IHZvbHVtZSBzbGlkZXIgd2hlbiBtb3VzZSBlbnRlcnMgdGhlIGJ1dHRvbiBhcmVhXG4gICAgICBpZiAodm9sdW1lU2xpZGVyLmlzSGlkZGVuKCkpIHtcbiAgICAgICAgdm9sdW1lU2xpZGVyLnNob3coKTtcbiAgICAgIH1cbiAgICAgIC8vIEF2b2lkIGhpZGluZyBvZiB0aGUgc2xpZGVyIHdoZW4gYnV0dG9uIGlzIGhvdmVyZWRcbiAgICAgIHRoaXMudm9sdW1lU2xpZGVySGlkZVRpbWVvdXQuY2xlYXIoKTtcbiAgICB9KTtcbiAgICB2b2x1bWVUb2dnbGVCdXR0b24uZ2V0RG9tRWxlbWVudCgpLm9uKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xuICAgICAgLy8gSGlkZSBzbGlkZXIgZGVsYXllZCB3aGVuIGJ1dHRvbiBpcyBsZWZ0XG4gICAgICB0aGlzLnZvbHVtZVNsaWRlckhpZGVUaW1lb3V0LnJlc2V0KCk7XG4gICAgfSk7XG4gICAgdm9sdW1lU2xpZGVyLmdldERvbUVsZW1lbnQoKS5vbignbW91c2VlbnRlcicsICgpID0+IHtcbiAgICAgIC8vIFdoZW4gdGhlIHNsaWRlciBpcyBlbnRlcmVkLCBjYW5jZWwgdGhlIGhpZGUgdGltZW91dCBhY3RpdmF0ZWQgYnkgbGVhdmluZyB0aGUgYnV0dG9uXG4gICAgICB0aGlzLnZvbHVtZVNsaWRlckhpZGVUaW1lb3V0LmNsZWFyKCk7XG4gICAgICB2b2x1bWVTbGlkZXJIb3ZlcmVkID0gdHJ1ZTtcbiAgICB9KTtcbiAgICB2b2x1bWVTbGlkZXIuZ2V0RG9tRWxlbWVudCgpLm9uKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xuICAgICAgLy8gV2hlbiBtb3VzZSBsZWF2ZXMgdGhlIHNsaWRlciwgb25seSBoaWRlIGl0IGlmIHRoZXJlIGlzIG5vIHNsaWRlIG9wZXJhdGlvbiBpbiBwcm9ncmVzc1xuICAgICAgaWYgKHZvbHVtZVNsaWRlci5pc1NlZWtpbmcoKSkge1xuICAgICAgICB0aGlzLnZvbHVtZVNsaWRlckhpZGVUaW1lb3V0LmNsZWFyKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnZvbHVtZVNsaWRlckhpZGVUaW1lb3V0LnJlc2V0KCk7XG4gICAgICB9XG4gICAgICB2b2x1bWVTbGlkZXJIb3ZlcmVkID0gZmFsc2U7XG4gICAgfSk7XG4gICAgdm9sdW1lU2xpZGVyLm9uU2Vla2VkLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAvLyBXaGVuIGEgc2xpZGUgb3BlcmF0aW9uIGlzIGRvbmUgYW5kIHRoZSBzbGlkZXIgbm90IGhvdmVyZWQgKG1vdXNlIG91dHNpZGUgc2xpZGVyKSwgaGlkZSBzbGlkZXIgZGVsYXllZFxuICAgICAgaWYgKCF2b2x1bWVTbGlkZXJIb3ZlcmVkKSB7XG4gICAgICAgIHRoaXMudm9sdW1lU2xpZGVySGlkZVRpbWVvdXQucmVzZXQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgc3VwZXIucmVsZWFzZSgpO1xuICAgIHRoaXMudm9sdW1lU2xpZGVySGlkZVRpbWVvdXQuY2xlYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGludGVybmFsbHkgbWFuYWdlZCB2b2x1bWUgdG9nZ2xlIGJ1dHRvbi5cbiAgICogQHJldHVybnMge1ZvbHVtZVRvZ2dsZUJ1dHRvbn1cbiAgICovXG4gIGdldFZvbHVtZVRvZ2dsZUJ1dHRvbigpOiBWb2x1bWVUb2dnbGVCdXR0b24ge1xuICAgIHJldHVybiB0aGlzLnZvbHVtZVRvZ2dsZUJ1dHRvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGludGVybmFsbHkgbWFuYWdlZCB2b2x1bWUgc2lsZGVyLlxuICAgKiBAcmV0dXJucyB7Vm9sdW1lU2xpZGVyfVxuICAgKi9cbiAgZ2V0Vm9sdW1lU2xpZGVyKCk6IFZvbHVtZVNsaWRlciB7XG4gICAgcmV0dXJuIHRoaXMudm9sdW1lU2xpZGVyO1xuICB9XG59IiwiaW1wb3J0IHsgU2Vla0JhciwgU2Vla0JhckNvbmZpZywgU2Vla1ByZXZpZXdFdmVudEFyZ3MgfSBmcm9tICcuL3NlZWtiYXInO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuLi91aW1hbmFnZXInO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IFZvbHVtZVRyYW5zaXRpb24gfSBmcm9tICcuLi92b2x1bWVjb250cm9sbGVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIHRoZSB7QGxpbmsgVm9sdW1lU2xpZGVyfSBjb21wb25lbnQuXG4gKlxuICogQGNhdGVnb3J5IENvbmZpZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBWb2x1bWVTbGlkZXJDb25maWcgZXh0ZW5kcyBTZWVrQmFyQ29uZmlnIHtcbiAgLyoqXG4gICAqIFNwZWNpZmllcyBpZiB0aGUgdm9sdW1lIHNsaWRlciBzaG91bGQgYmUgYXV0b21hdGljYWxseSBoaWRkZW4gd2hlbiB2b2x1bWUgY29udHJvbCBpcyBwcm9oaWJpdGVkIGJ5IHRoZVxuICAgKiBicm93c2VyIG9yIHBsYXRmb3JtLiBUaGlzIGN1cnJlbnRseSBvbmx5IGFwcGxpZXMgdG8gaU9TLlxuICAgKiBEZWZhdWx0OiB0cnVlXG4gICAqL1xuICBoaWRlSWZWb2x1bWVDb250cm9sUHJvaGliaXRlZD86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQSBzaW1wbGUgdm9sdW1lIHNsaWRlciBjb21wb25lbnQgdG8gYWRqdXN0IHRoZSBwbGF5ZXIncyB2b2x1bWUgc2V0dGluZy5cbiAqXG4gKiBAY2F0ZWdvcnkgQ29tcG9uZW50c1xuICovXG5leHBvcnQgY2xhc3MgVm9sdW1lU2xpZGVyIGV4dGVuZHMgU2Vla0JhciB7XG4gIHByaXZhdGUgdm9sdW1lVHJhbnNpdGlvbjogVm9sdW1lVHJhbnNpdGlvbjtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFZvbHVtZVNsaWRlckNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIDxWb2x1bWVTbGlkZXJDb25maWc+e1xuICAgICAgY3NzQ2xhc3M6ICd1aS12b2x1bWVzbGlkZXInLFxuICAgICAgaGlkZUlmVm9sdW1lQ29udHJvbFByb2hpYml0ZWQ6IHRydWUsXG4gICAgICBhcmlhTGFiZWw6IGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5hdWRpby52b2x1bWUnKSxcbiAgICAgIHRhYkluZGV4OiAwLFxuICAgIH0sIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0Vm9sdW1lQXJpYVNsaWRlclZhbHVlcyh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5nZXREb21FbGVtZW50KCkuYXR0cignYXJpYS12YWx1ZW5vdycsIE1hdGguY2VpbCh2YWx1ZSkudG9TdHJpbmcoKSk7XG4gICAgdGhpcy5nZXREb21FbGVtZW50KCkuYXR0cignYXJpYS12YWx1ZXRleHQnLCBgJHtpMThuLnBlcmZvcm1Mb2NhbGl6YXRpb24oaTE4bi5nZXRMb2NhbGl6ZXIoJ3NlZWtCYXIudmFsdWUnKSl9OiAke01hdGguY2VpbCh2YWx1ZSl9YCk7XG4gIH1cblxuICBjb25maWd1cmUocGxheWVyOiBQbGF5ZXJBUEksIHVpbWFuYWdlcjogVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICBzdXBlci5jb25maWd1cmUocGxheWVyLCB1aW1hbmFnZXIsIGZhbHNlKTtcblxuICAgIHRoaXMuc2V0QXJpYVNsaWRlck1pbk1heCgnMCcsICcxMDAnKTtcblxuICAgIGxldCBjb25maWcgPSA8Vm9sdW1lU2xpZGVyQ29uZmlnPnRoaXMuZ2V0Q29uZmlnKCk7XG5cbiAgICBjb25zdCB2b2x1bWVDb250cm9sbGVyID0gdWltYW5hZ2VyLmdldENvbmZpZygpLnZvbHVtZUNvbnRyb2xsZXI7XG5cbiAgICBpZiAoY29uZmlnLmhpZGVJZlZvbHVtZUNvbnRyb2xQcm9oaWJpdGVkICYmICF0aGlzLmRldGVjdFZvbHVtZUNvbnRyb2xBdmFpbGFiaWxpdHkoKSkge1xuICAgICAgdGhpcy5oaWRlKCk7XG5cbiAgICAgIC8vIFdlIGNhbiBqdXN0IHJldHVybiBmcm9tIGhlcmUsIGJlY2F1c2UgdGhlIHVzZXIgd2lsbCBuZXZlciBpbnRlcmFjdCB3aXRoIHRoZSBjb250cm9sIGFuZCBhbnkgY29uZmlndXJlZFxuICAgICAgLy8gZnVuY3Rpb25hbGl0eSB3b3VsZCBvbmx5IGVhdCByZXNvdXJjZXMgZm9yIG5vIHJlYXNvbi5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2b2x1bWVDb250cm9sbGVyLm9uQ2hhbmdlZC5zdWJzY3JpYmUoKF8sIGFyZ3MpID0+IHtcbiAgICAgIGlmIChhcmdzLm11dGVkKSB7XG4gICAgICAgIHRoaXMuc2V0Vm9sdW1lQXJpYVNsaWRlclZhbHVlcygwKTtcbiAgICAgICAgdGhpcy5zZXRQbGF5YmFja1Bvc2l0aW9uKDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRQbGF5YmFja1Bvc2l0aW9uKGFyZ3Mudm9sdW1lKTtcbiAgICAgICAgdGhpcy5zZXRWb2x1bWVBcmlhU2xpZGVyVmFsdWVzKGFyZ3Mudm9sdW1lKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMub25TZWVrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLnZvbHVtZVRyYW5zaXRpb24gPSB2b2x1bWVDb250cm9sbGVyLnN0YXJ0VHJhbnNpdGlvbigpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vblNlZWtQcmV2aWV3LnN1YnNjcmliZVJhdGVMaW1pdGVkKHRoaXMudXBkYXRlVm9sdW1lV2hpbGVTY3J1YmJpbmcsIDUwKTtcbiAgICB0aGlzLm9uU2Vla2VkLnN1YnNjcmliZSgoc2VuZGVyLCBwZXJjZW50YWdlKSA9PiB7XG4gICAgICBpZiAodGhpcy52b2x1bWVUcmFuc2l0aW9uKSB7XG4gICAgICAgIHRoaXMudm9sdW1lVHJhbnNpdGlvbi5maW5pc2gocGVyY2VudGFnZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBVcGRhdGUgdGhlIHZvbHVtZSBzbGlkZXIgbWFya2VyIHdoZW4gdGhlIHBsYXllciByZXNpemVkLCBhIHNvdXJjZSBpcyBsb2FkZWQsXG4gICAgLy8gb3IgdGhlIFVJIGlzIGNvbmZpZ3VyZWQuIENoZWNrIHRoZSBzZWVrYmFyIGZvciBhIGRldGFpbGVkIGRlc2NyaXB0aW9uLlxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5ZXJSZXNpemVkLCAoKSA9PiB7XG4gICAgICB0aGlzLnJlZnJlc2hQbGF5YmFja1Bvc2l0aW9uKCk7XG4gICAgfSk7XG4gICAgdWltYW5hZ2VyLm9uQ29uZmlndXJlZC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5yZWZyZXNoUGxheWJhY2tQb3NpdGlvbigpO1xuICAgIH0pO1xuXG4gICAgdWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMucmVmcmVzaFBsYXliYWNrUG9zaXRpb24oKTtcbiAgICB9KTtcblxuICAgIHVpbWFuYWdlci5vbkNvbXBvbmVudFNob3cuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMucmVmcmVzaFBsYXliYWNrUG9zaXRpb24oKTtcbiAgICB9KTtcbiAgICB1aW1hbmFnZXIub25Db21wb25lbnRIaWRlLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLnJlZnJlc2hQbGF5YmFja1Bvc2l0aW9uKCk7XG4gICAgfSk7XG5cbiAgICAvLyBJbml0IHZvbHVtZSBiYXJcbiAgICB2b2x1bWVDb250cm9sbGVyLm9uQ2hhbmdlZEV2ZW50KCk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVZvbHVtZVdoaWxlU2NydWJiaW5nID0gKHNlbmRlcjogVm9sdW1lU2xpZGVyLCBhcmdzOiBTZWVrUHJldmlld0V2ZW50QXJncykgPT4ge1xuICAgIGlmIChhcmdzLnNjcnViYmluZyAmJiB0aGlzLnZvbHVtZVRyYW5zaXRpb24pIHtcbiAgICAgIHRoaXMudm9sdW1lVHJhbnNpdGlvbi51cGRhdGUoYXJncy5wb3NpdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgZGV0ZWN0Vm9sdW1lQ29udHJvbEF2YWlsYWJpbGl0eSgpOiBib29sZWFuIHtcbiAgICAvKlxuICAgICAqIFwiT24gaU9TIGRldmljZXMsIHRoZSBhdWRpbyBsZXZlbCBpcyBhbHdheXMgdW5kZXIgdGhlIHVzZXLigJlzIHBoeXNpY2FsIGNvbnRyb2wuIFRoZSB2b2x1bWUgcHJvcGVydHkgaXMgbm90XG4gICAgICogc2V0dGFibGUgaW4gSmF2YVNjcmlwdC4gUmVhZGluZyB0aGUgdm9sdW1lIHByb3BlcnR5IGFsd2F5cyByZXR1cm5zIDEuXCJcbiAgICAgKiBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFyeS9jb250ZW50L2RvY3VtZW50YXRpb24vQXVkaW9WaWRlby9Db25jZXB0dWFsL1VzaW5nX0hUTUw1X0F1ZGlvX1ZpZGVvL0RldmljZS1TcGVjaWZpY0NvbnNpZGVyYXRpb25zL0RldmljZS1TcGVjaWZpY0NvbnNpZGVyYXRpb25zLmh0bWxcbiAgICAgKi9cbiAgICAvLyBhcyBtdXRlZCBhdXRvcGxheSBnZXRzIHBhdXNlZCBhcyBzb29uIGFzIHdlIHVubXV0ZSBpdCwgd2UgbWF5IG5vdCB0b3VjaCB0aGUgdm9sdW1lIG9mIHRoZSBhY3R1YWwgcGxheWVyIHNvIHdlXG4gICAgLy8gcHJvYmUgYSBkdW1teSBhdWRpbyBlbGVtZW50XG4gICAgY29uc3QgZHVtbXlWaWRlb0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuICAgIC8vIHRyeSBzZXR0aW5nIHRoZSB2b2x1bWUgdG8gMC43IGFuZCBpZiBpdCdzIHN0aWxsIDEgd2UgYXJlIG9uIGEgdm9sdW1lIGNvbnRyb2wgcmVzdHJpY3RlZCBkZXZpY2VcbiAgICBkdW1teVZpZGVvRWxlbWVudC52b2x1bWUgPSAwLjc7XG4gICAgcmV0dXJuIGR1bW15VmlkZW9FbGVtZW50LnZvbHVtZSAhPT0gMTtcbiAgfVxuXG4gIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgc3VwZXIucmVsZWFzZSgpO1xuXG4gICAgdGhpcy5vblNlZWtQcmV2aWV3LnVuc3Vic2NyaWJlKHRoaXMudXBkYXRlVm9sdW1lV2hpbGVTY3J1YmJpbmcpO1xuICB9XG59XG4iLCJpbXBvcnQge1RvZ2dsZUJ1dHRvbiwgVG9nZ2xlQnV0dG9uQ29uZmlnfSBmcm9tICcuL3RvZ2dsZWJ1dHRvbic7XG5pbXBvcnQgeyBVSUluc3RhbmNlTWFuYWdlciB9IGZyb20gJy4uL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIGJ1dHRvbiB0aGF0IHRvZ2dsZXMgYXVkaW8gbXV0aW5nLlxuICpcbiAqIEBjYXRlZ29yeSBCdXR0b25zXG4gKi9cbmV4cG9ydCBjbGFzcyBWb2x1bWVUb2dnbGVCdXR0b24gZXh0ZW5kcyBUb2dnbGVCdXR0b248VG9nZ2xlQnV0dG9uQ29uZmlnPiB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBUb2dnbGVCdXR0b25Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG5cbiAgICBjb25zdCBkZWZhdWx0Q29uZmlnOiBUb2dnbGVCdXR0b25Db25maWcgPSB7XG4gICAgICBjc3NDbGFzczogJ3VpLXZvbHVtZXRvZ2dsZWJ1dHRvbicsXG4gICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3MuYXVkaW8ubXV0ZScpLFxuICAgICAgb25DbGFzczogJ211dGVkJyxcbiAgICAgIG9mZkNsYXNzOiAndW5tdXRlZCcsXG4gICAgICBhcmlhTGFiZWw6IGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5hdWRpby5tdXRlJyksXG4gICAgfTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIGRlZmF1bHRDb25maWcsIHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShwbGF5ZXI6IFBsYXllckFQSSwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcik6IHZvaWQge1xuICAgIHN1cGVyLmNvbmZpZ3VyZShwbGF5ZXIsIHVpbWFuYWdlcik7XG5cbiAgICBjb25zdCB2b2x1bWVDb250cm9sbGVyID0gdWltYW5hZ2VyLmdldENvbmZpZygpLnZvbHVtZUNvbnRyb2xsZXI7XG5cbiAgICB2b2x1bWVDb250cm9sbGVyLm9uQ2hhbmdlZC5zdWJzY3JpYmUoKF8sIGFyZ3MpID0+IHtcbiAgICAgIGlmIChhcmdzLm11dGVkKSB7XG4gICAgICAgIHRoaXMub24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub2ZmKCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHZvbHVtZUxldmVsVGVucyA9IE1hdGguY2VpbChhcmdzLnZvbHVtZSAvIDEwKTtcbiAgICAgIHRoaXMuZ2V0RG9tRWxlbWVudCgpLmRhdGEodGhpcy5wcmVmaXhDc3MoJ3ZvbHVtZS1sZXZlbC10ZW5zJyksIFN0cmluZyh2b2x1bWVMZXZlbFRlbnMpKTtcbiAgICB9KTtcblxuICAgIHRoaXMub25DbGljay5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdm9sdW1lQ29udHJvbGxlci50b2dnbGVNdXRlZCgpO1xuICAgIH0pO1xuXG4gICAgLy8gU3RhcnR1cCBpbml0XG4gICAgdm9sdW1lQ29udHJvbGxlci5vbkNoYW5nZWRFdmVudCgpO1xuICB9XG59IiwiaW1wb3J0IHtUb2dnbGVCdXR0b24sIFRvZ2dsZUJ1dHRvbkNvbmZpZ30gZnJvbSAnLi90b2dnbGVidXR0b24nO1xuaW1wb3J0IHtVSUluc3RhbmNlTWFuYWdlcn0gZnJvbSAnLi4vdWltYW5hZ2VyJztcbmltcG9ydCB7IFBsYXllckFQSSwgUGxheWVyRXZlbnRCYXNlLCBXYXJuaW5nRXZlbnQgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9pMThuJztcblxuLyoqXG4gKiBBIGJ1dHRvbiB0aGF0IHRvZ2dsZXMgdGhlIHZpZGVvIHZpZXcgYmV0d2VlbiBub3JtYWwvbW9ubyBhbmQgVlIvc3RlcmVvLlxuICpcbiAqIEBjYXRlZ29yeSBCdXR0b25zXG4gKi9cbmV4cG9ydCBjbGFzcyBWUlRvZ2dsZUJ1dHRvbiBleHRlbmRzIFRvZ2dsZUJ1dHRvbjxUb2dnbGVCdXR0b25Db25maWc+IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFRvZ2dsZUJ1dHRvbkNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnKTtcblxuICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZyhjb25maWcsIHtcbiAgICAgIGNzc0NsYXNzOiAndWktdnJ0b2dnbGVidXR0b24nLFxuICAgICAgdGV4dDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3ZyJyksXG4gICAgfSwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgY29uZmlndXJlKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgc3VwZXIuY29uZmlndXJlKHBsYXllciwgdWltYW5hZ2VyKTtcblxuICAgIGxldCBpc1ZSQ29uZmlndXJlZCA9ICgpID0+IHtcbiAgICAgIC8vIFZSIGF2YWlsYWJpbGl0eSBjYW5ub3QgYmUgY2hlY2tlZCB0aHJvdWdoIGdldFZSU3RhdHVzKCkgYmVjYXVzZSBpdCBpcyBhc3luY2hyb25vdXNseSBwb3B1bGF0ZWQgYW5kIG5vdFxuICAgICAgLy8gYXZhaWxhYmxlIGF0IFVJIGluaXRpYWxpemF0aW9uLiBBcyBhbiBhbHRlcm5hdGl2ZSwgd2UgY2hlY2sgdGhlIFZSIHNldHRpbmdzIGluIHRoZSBjb25maWcuXG4gICAgICAvLyBUT0RPIHVzZSBnZXRWUlN0YXR1cygpIHRocm91Z2ggaXNWUlN0ZXJlb0F2YWlsYWJsZSgpIG9uY2UgdGhlIHBsYXllciBoYXMgYmVlbiByZXdyaXR0ZW4gYW5kIHRoZSBzdGF0dXMgaXNcbiAgICAgIC8vIGF2YWlsYWJsZSBpbiBSZWFkeVxuICAgICAgY29uc3Qgc291cmNlID0gcGxheWVyLmdldFNvdXJjZSgpO1xuICAgICAgcmV0dXJuIHNvdXJjZSAmJiBCb29sZWFuKHNvdXJjZS52cik7XG4gICAgfTtcblxuICAgIGxldCBpc1ZSU3RlcmVvQXZhaWxhYmxlID0gKCkgPT4ge1xuICAgICAgY29uc3Qgc291cmNlID0gcGxheWVyLmdldFNvdXJjZSgpO1xuICAgICAgcmV0dXJuIHBsYXllci52ciAmJiBCb29sZWFuKHNvdXJjZS52cik7XG4gICAgfTtcblxuICAgIGxldCB2clN0YXRlSGFuZGxlciA9IChldjogUGxheWVyRXZlbnRCYXNlKSA9PiB7XG4gICAgICBpZiAoZXYudHlwZSA9PT0gcGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuV2FybmluZ1xuICAgICAgICAmJiAoZXYgYXMgV2FybmluZ0V2ZW50KS5jb2RlICE9PSBwbGF5ZXIuZXhwb3J0cy5XYXJuaW5nQ29kZS5WUl9SRU5ERVJJTkdfRVJST1IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNWUkNvbmZpZ3VyZWQoKSAmJiBpc1ZSU3RlcmVvQXZhaWxhYmxlKCkpIHtcbiAgICAgICAgdGhpcy5zaG93KCk7IC8vIHNob3cgYnV0dG9uIGluIGNhc2UgaXQgaXMgaGlkZGVuXG5cbiAgICAgICAgaWYgKHBsYXllci52ciAmJiBwbGF5ZXIudnIuZ2V0U3RlcmVvKCkpIHtcbiAgICAgICAgICB0aGlzLm9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5vZmYoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5oaWRlKCk7IC8vIGhpZGUgYnV0dG9uIGlmIG5vIHN0ZXJlbyBtb2RlIGF2YWlsYWJsZVxuICAgICAgfVxuICAgIH07XG5cbiAgICBsZXQgdnJCdXR0b25WaXNpYmlsaXR5SGFuZGxlciA9ICgpID0+IHtcbiAgICAgIGlmIChpc1ZSQ29uZmlndXJlZCgpKSB7XG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5WUlN0ZXJlb0NoYW5nZWQsIHZyU3RhdGVIYW5kbGVyKTtcbiAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuV2FybmluZywgdnJTdGF0ZUhhbmRsZXIpO1xuICAgIC8vIEhpZGUgYnV0dG9uIHdoZW4gVlIgc291cmNlIGdvZXMgYXdheVxuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VVbmxvYWRlZCwgdnJCdXR0b25WaXNpYmlsaXR5SGFuZGxlcik7XG4gICAgdWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKHZyQnV0dG9uVmlzaWJpbGl0eUhhbmRsZXIpO1xuXG4gICAgdGhpcy5vbkNsaWNrLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBpZiAoIWlzVlJTdGVyZW9BdmFpbGFibGUoKSkge1xuICAgICAgICBpZiAoY29uc29sZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdObyBWUiBjb250ZW50Jyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwbGF5ZXIudnIgJiYgcGxheWVyLnZyLmdldFN0ZXJlbygpKSB7XG4gICAgICAgICAgcGxheWVyLnZyLnNldFN0ZXJlbyhmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGxheWVyLnZyLnNldFN0ZXJlbyh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gU2V0IHN0YXJ0dXAgdmlzaWJpbGl0eVxuICAgIHZyQnV0dG9uVmlzaWJpbGl0eUhhbmRsZXIoKTtcbiAgfVxufSIsImltcG9ydCB7Q2xpY2tPdmVybGF5LCBDbGlja092ZXJsYXlDb25maWd9IGZyb20gJy4vY2xpY2tvdmVybGF5JztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIGEge0BsaW5rIENsaWNrT3ZlcmxheX0uXG4gKlxuICogQGNhdGVnb3J5IENvbmZpZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBXYXRlcm1hcmtDb25maWcgZXh0ZW5kcyBDbGlja092ZXJsYXlDb25maWcge1xuICAvLyBub3RoaW5nIHlldFxufVxuXG4vKipcbiAqIEEgd2F0ZXJtYXJrIG92ZXJsYXkgd2l0aCBhIGNsaWNrYWJsZSBsb2dvLlxuICpcbiAqIEBjYXRlZ29yeSBDb21wb25lbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBXYXRlcm1hcmsgZXh0ZW5kcyBDbGlja092ZXJsYXkge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogV2F0ZXJtYXJrQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcpO1xuXG4gICAgLyogdGhpcy5jb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnKGNvbmZpZywge1xuICAgICAgY3NzQ2xhc3M6ICd1aS13YXRlcm1hcmsnLFxuICAgICAgdXJsOiAnaHR0cDovL2JpdG1vdmluLmNvbScsXG4gICAgICByb2xlOiAnbGluaycsXG4gICAgICB0ZXh0OiAnbG9nbycsXG4gICAgICBhcmlhTGFiZWw6IGkxOG4uZ2V0TG9jYWxpemVyKCd3YXRlcm1hcmtMaW5rJyksXG4gICAgfSwgPFdhdGVybWFya0NvbmZpZz50aGlzLmNvbmZpZyk7ICovXG4gIH1cbn1cbiIsImltcG9ydCB7VlJUb2dnbGVCdXR0b259IGZyb20gJy4vY29tcG9uZW50cy92cnRvZ2dsZWJ1dHRvbic7XG5pbXBvcnQge1NldHRpbmdzVG9nZ2xlQnV0dG9ufSBmcm9tICcuL2NvbXBvbmVudHMvc2V0dGluZ3N0b2dnbGVidXR0b24nO1xuaW1wb3J0IHtWb2x1bWVTbGlkZXJ9IGZyb20gJy4vY29tcG9uZW50cy92b2x1bWVzbGlkZXInO1xuaW1wb3J0IHtQbGF5YmFja1RpbWVMYWJlbCwgUGxheWJhY2tUaW1lTGFiZWxNb2RlfSBmcm9tICcuL2NvbXBvbmVudHMvcGxheWJhY2t0aW1lbGFiZWwnO1xuaW1wb3J0IHtBaXJQbGF5VG9nZ2xlQnV0dG9ufSBmcm9tICcuL2NvbXBvbmVudHMvYWlycGxheXRvZ2dsZWJ1dHRvbic7XG5pbXBvcnQge0Vycm9yTWVzc2FnZU92ZXJsYXl9IGZyb20gJy4vY29tcG9uZW50cy9lcnJvcm1lc3NhZ2VvdmVybGF5JztcbmltcG9ydCB7Q29udHJvbEJhcn0gZnJvbSAnLi9jb21wb25lbnRzL2NvbnRyb2xiYXInO1xuaW1wb3J0IHtDYXN0VG9nZ2xlQnV0dG9ufSBmcm9tICcuL2NvbXBvbmVudHMvY2FzdHRvZ2dsZWJ1dHRvbic7XG5pbXBvcnQge0Z1bGxzY3JlZW5Ub2dnbGVCdXR0b259IGZyb20gJy4vY29tcG9uZW50cy9mdWxsc2NyZWVudG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7UmVjb21tZW5kYXRpb25PdmVybGF5fSBmcm9tICcuL2NvbXBvbmVudHMvcmVjb21tZW5kYXRpb25vdmVybGF5JztcbmltcG9ydCB7UGxheWJhY2tTcGVlZFNlbGVjdEJveH0gZnJvbSAnLi9jb21wb25lbnRzL3BsYXliYWNrc3BlZWRzZWxlY3Rib3gnO1xuaW1wb3J0IHtBdWRpb1F1YWxpdHlTZWxlY3RCb3h9IGZyb20gJy4vY29tcG9uZW50cy9hdWRpb3F1YWxpdHlzZWxlY3Rib3gnO1xuaW1wb3J0IHtDYXN0U3RhdHVzT3ZlcmxheX0gZnJvbSAnLi9jb21wb25lbnRzL2Nhc3RzdGF0dXNvdmVybGF5JztcbmltcG9ydCB7VUlDb250YWluZXJ9IGZyb20gJy4vY29tcG9uZW50cy91aWNvbnRhaW5lcic7XG5pbXBvcnQge1dhdGVybWFya30gZnJvbSAnLi9jb21wb25lbnRzL3dhdGVybWFyayc7XG5pbXBvcnQge1N1YnRpdGxlT3ZlcmxheX0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlb3ZlcmxheSc7XG5pbXBvcnQge1NldHRpbmdzUGFuZWx9IGZyb20gJy4vY29tcG9uZW50cy9zZXR0aW5nc3BhbmVsJztcbmltcG9ydCB7U2Vla0JhckxhYmVsfSBmcm9tICcuL2NvbXBvbmVudHMvc2Vla2JhcmxhYmVsJztcbmltcG9ydCB7UGxheWJhY2tUb2dnbGVPdmVybGF5fSBmcm9tICcuL2NvbXBvbmVudHMvcGxheWJhY2t0b2dnbGVvdmVybGF5JztcbmltcG9ydCB7UGljdHVyZUluUGljdHVyZVRvZ2dsZUJ1dHRvbn0gZnJvbSAnLi9jb21wb25lbnRzL3BpY3R1cmVpbnBpY3R1cmV0b2dnbGVidXR0b24nO1xuaW1wb3J0IHtTcGFjZXJ9IGZyb20gJy4vY29tcG9uZW50cy9zcGFjZXInO1xuaW1wb3J0IHtDb250YWluZXJ9IGZyb20gJy4vY29tcG9uZW50cy9jb250YWluZXInO1xuaW1wb3J0IHtWb2x1bWVUb2dnbGVCdXR0b259IGZyb20gJy4vY29tcG9uZW50cy92b2x1bWV0b2dnbGVidXR0b24nO1xuaW1wb3J0IHtQbGF5YmFja1RvZ2dsZUJ1dHRvbn0gZnJvbSAnLi9jb21wb25lbnRzL3BsYXliYWNrdG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7U2Vla0Jhcn0gZnJvbSAnLi9jb21wb25lbnRzL3NlZWtiYXInO1xuaW1wb3J0IHtWaWRlb1F1YWxpdHlTZWxlY3RCb3h9IGZyb20gJy4vY29tcG9uZW50cy92aWRlb3F1YWxpdHlzZWxlY3Rib3gnO1xuaW1wb3J0IHtVSUNvbmRpdGlvbkNvbnRleHQsIFVJTWFuYWdlcn0gZnJvbSAnLi91aW1hbmFnZXInO1xuaW1wb3J0IHtUaXRsZUJhcn0gZnJvbSAnLi9jb21wb25lbnRzL3RpdGxlYmFyJztcbmltcG9ydCB7QnVmZmVyaW5nT3ZlcmxheX0gZnJvbSAnLi9jb21wb25lbnRzL2J1ZmZlcmluZ292ZXJsYXknO1xuaW1wb3J0IHtTdWJ0aXRsZUxpc3RCb3h9IGZyb20gJy4vY29tcG9uZW50cy9zdWJ0aXRsZWxpc3Rib3gnO1xuaW1wb3J0IHtBdWRpb1RyYWNrTGlzdEJveH0gZnJvbSAnLi9jb21wb25lbnRzL2F1ZGlvdHJhY2tsaXN0Ym94JztcbmltcG9ydCB7U2V0dGluZ3NQYW5lbEl0ZW19IGZyb20gJy4vY29tcG9uZW50cy9zZXR0aW5nc3BhbmVsaXRlbSc7XG5pbXBvcnQge1NldHRpbmdzUGFuZWxQYWdlfSBmcm9tICcuL2NvbXBvbmVudHMvc2V0dGluZ3NwYW5lbHBhZ2UnO1xuaW1wb3J0IHsgVUlGYWN0b3J5IH0gZnJvbSAnLi91aWZhY3RvcnknO1xuaW1wb3J0IHsgVUlDb25maWcgfSBmcm9tICcuL3VpY29uZmlnJztcbmltcG9ydCB7IFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBRdWlja1NlZWtCdXR0b24gfSBmcm9tICcuL21haW4nO1xuXG5leHBvcnQgbmFtZXNwYWNlIERlbW9GYWN0b3J5IHtcblxuICBleHBvcnQgZnVuY3Rpb24gYnVpbGREZW1vV2l0aFNlcGFyYXRlQXVkaW9TdWJ0aXRsZXNCdXR0b25zKHBsYXllcjogUGxheWVyQVBJLCBjb25maWc6IFVJQ29uZmlnID0ge30pOiBVSU1hbmFnZXIge1xuICAgIC8vIHNob3cgc21hbGxTY3JlZW4gVUkgb25seSBvbiBtb2JpbGUvaGFuZGhlbGQgZGV2aWNlc1xuICAgIGxldCBzbWFsbFNjcmVlblN3aXRjaFdpZHRoID0gNjAwO1xuXG4gICAgcmV0dXJuIG5ldyBVSU1hbmFnZXIocGxheWVyLCBbe1xuICAgICAgdWk6IFVJRmFjdG9yeS5tb2Rlcm5TbWFsbFNjcmVlbkFkc1VJKCksXG4gICAgICBjb25kaXRpb246IChjb250ZXh0OiBVSUNvbmRpdGlvbkNvbnRleHQpID0+IHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQuaXNNb2JpbGUgJiYgY29udGV4dC5kb2N1bWVudFdpZHRoIDwgc21hbGxTY3JlZW5Td2l0Y2hXaWR0aFxuICAgICAgICAgICYmIGNvbnRleHQuaXNBZCAmJiBjb250ZXh0LmFkUmVxdWlyZXNVaTtcbiAgICAgIH0sXG4gICAgfSwge1xuICAgICAgdWk6IFVJRmFjdG9yeS5tb2Rlcm5BZHNVSSgpLFxuICAgICAgY29uZGl0aW9uOiAoY29udGV4dDogVUlDb25kaXRpb25Db250ZXh0KSA9PiB7XG4gICAgICAgIHJldHVybiBjb250ZXh0LmlzQWQgJiYgY29udGV4dC5hZFJlcXVpcmVzVWk7XG4gICAgICB9LFxuICAgIH0sIHtcbiAgICAgIHVpOiBVSUZhY3RvcnkubW9kZXJuU21hbGxTY3JlZW5VSSh7IHJhZGlvTW9kZUF2YWlsYWJsZTogZmFsc2UgfSksXG4gICAgICBjb25kaXRpb246IChjb250ZXh0OiBVSUNvbmRpdGlvbkNvbnRleHQpID0+IHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQuaXNNb2JpbGUgJiYgY29udGV4dC5kb2N1bWVudFdpZHRoIDwgc21hbGxTY3JlZW5Td2l0Y2hXaWR0aDtcbiAgICAgIH0sXG4gICAgfSwge1xuICAgICAgdWk6IG1vZGVyblVJV2l0aFNlcGFyYXRlQXVkaW9TdWJ0aXRsZXNCdXR0b25zKCksXG4gICAgfV0sIGNvbmZpZyk7XG4gIH1cblxuICBmdW5jdGlvbiBtb2Rlcm5VSVdpdGhTZXBhcmF0ZUF1ZGlvU3VidGl0bGVzQnV0dG9ucygpIHtcbiAgICBsZXQgc3VidGl0bGVPdmVybGF5ID0gbmV3IFN1YnRpdGxlT3ZlcmxheSgpO1xuXG4gICAgbGV0IHNldHRpbmdzUGFuZWwgPSBuZXcgU2V0dGluZ3NQYW5lbCh7XG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsUGFnZSh7XG4gICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKCdWaWRlbyBRdWFsaXR5JywgbmV3IFZpZGVvUXVhbGl0eVNlbGVjdEJveCgpKSxcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbSgnU3BlZWQnLCBuZXcgUGxheWJhY2tTcGVlZFNlbGVjdEJveCgpKSxcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbSgnQXVkaW8gUXVhbGl0eScsIG5ldyBBdWRpb1F1YWxpdHlTZWxlY3RCb3goKSksXG4gICAgICAgICAgXSxcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgICAgaGlkZGVuOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgbGV0IHN1YnRpdGxlTGlzdEJveCA9IG5ldyBTdWJ0aXRsZUxpc3RCb3goKTtcbiAgICBsZXQgc3VidGl0bGVTZXR0aW5nc1BhbmVsID0gbmV3IFNldHRpbmdzUGFuZWwoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbFBhZ2Uoe1xuICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbShudWxsLCBzdWJ0aXRsZUxpc3RCb3gpLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICAgIGhpZGRlbjogdHJ1ZSxcbiAgICB9KTtcblxuICAgIGxldCBhdWRpb1RyYWNrTGlzdEJveCA9IG5ldyBBdWRpb1RyYWNrTGlzdEJveCgpO1xuICAgIGxldCBhdWRpb1RyYWNrU2V0dGluZ3NQYW5lbCA9IG5ldyBTZXR0aW5nc1BhbmVsKHtcbiAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxQYWdlKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0obnVsbCwgYXVkaW9UcmFja0xpc3RCb3gpLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICAgIGhpZGRlbjogdHJ1ZSxcbiAgICB9KTtcblxuICAgIGxldCBjb250cm9sQmFyID0gbmV3IENvbnRyb2xCYXIoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBhdWRpb1RyYWNrU2V0dGluZ3NQYW5lbCxcbiAgICAgICAgc3VidGl0bGVTZXR0aW5nc1BhbmVsLFxuICAgICAgICBzZXR0aW5nc1BhbmVsLFxuICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICBuZXcgUGxheWJhY2tUaW1lTGFiZWwoeyB0aW1lTGFiZWxNb2RlOiBQbGF5YmFja1RpbWVMYWJlbE1vZGUuQ3VycmVudFRpbWUsIGhpZGVJbkxpdmVQbGF5YmFjazogdHJ1ZSB9KSxcbiAgICAgICAgICAgIG5ldyBTZWVrQmFyKHsgbGFiZWw6IG5ldyBTZWVrQmFyTGFiZWwoKSB9KSxcbiAgICAgICAgICAgIG5ldyBQbGF5YmFja1RpbWVMYWJlbCh7IHRpbWVMYWJlbE1vZGU6IFBsYXliYWNrVGltZUxhYmVsTW9kZS5Ub3RhbFRpbWUsIGNzc0NsYXNzZXM6IFsndGV4dC1yaWdodCddIH0pLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgY3NzQ2xhc3NlczogWydjb250cm9sYmFyLXRvcCddLFxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgbmV3IFBsYXliYWNrVG9nZ2xlQnV0dG9uKCksXG4gICAgICAgICAgICBuZXcgUXVpY2tTZWVrQnV0dG9uKHsgc2Vla1NlY29uZHM6IC0xMCB9KSxcbiAgICAgICAgICAgIG5ldyBRdWlja1NlZWtCdXR0b24oeyBzZWVrU2Vjb25kczogMTAgfSksXG4gICAgICAgICAgICBuZXcgVm9sdW1lVG9nZ2xlQnV0dG9uKCksXG4gICAgICAgICAgICBuZXcgVm9sdW1lU2xpZGVyKCksXG4gICAgICAgICAgICBuZXcgU3BhY2VyKCksXG4gICAgICAgICAgICBuZXcgUGljdHVyZUluUGljdHVyZVRvZ2dsZUJ1dHRvbigpLFxuICAgICAgICAgICAgbmV3IEFpclBsYXlUb2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgIG5ldyBDYXN0VG9nZ2xlQnV0dG9uKCksXG4gICAgICAgICAgICBuZXcgVlJUb2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nc1RvZ2dsZUJ1dHRvbih7XG4gICAgICAgICAgICAgIHNldHRpbmdzUGFuZWw6IGF1ZGlvVHJhY2tTZXR0aW5nc1BhbmVsLFxuICAgICAgICAgICAgICBjc3NDbGFzczogJ3VpLWF1ZGlvdHJhY2tzZXR0aW5nc3RvZ2dsZWJ1dHRvbicsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nc1RvZ2dsZUJ1dHRvbih7XG4gICAgICAgICAgICAgIHNldHRpbmdzUGFuZWw6IHN1YnRpdGxlU2V0dGluZ3NQYW5lbCxcbiAgICAgICAgICAgICAgY3NzQ2xhc3M6ICd1aS1zdWJ0aXRsZXNldHRpbmdzdG9nZ2xlYnV0dG9uJyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IFNldHRpbmdzVG9nZ2xlQnV0dG9uKHsgc2V0dGluZ3NQYW5lbDogc2V0dGluZ3NQYW5lbCB9KSxcbiAgICAgICAgICAgIG5ldyBGdWxsc2NyZWVuVG9nZ2xlQnV0dG9uKCksXG4gICAgICAgICAgXSxcbiAgICAgICAgICBjc3NDbGFzc2VzOiBbJ2NvbnRyb2xiYXItYm90dG9tJ10sXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIHJldHVybiBuZXcgVUlDb250YWluZXIoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBzdWJ0aXRsZU92ZXJsYXksXG4gICAgICAgIG5ldyBCdWZmZXJpbmdPdmVybGF5KCksXG4gICAgICAgIG5ldyBQbGF5YmFja1RvZ2dsZU92ZXJsYXkoKSxcbiAgICAgICAgbmV3IENhc3RTdGF0dXNPdmVybGF5KCksXG4gICAgICAgIGNvbnRyb2xCYXIsXG4gICAgICAgIG5ldyBUaXRsZUJhcigpLFxuICAgICAgICBuZXcgUmVjb21tZW5kYXRpb25PdmVybGF5KCksXG4gICAgICAgIG5ldyBFcnJvck1lc3NhZ2VPdmVybGF5KCksXG4gICAgICBdLFxuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIENvbXBvbmVudENvbmZpZyB9IGZyb20gJy4vY29tcG9uZW50cy9jb21wb25lbnQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE9mZnNldCB7XG4gIGxlZnQ6IG51bWJlcjtcbiAgdG9wOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2l6ZSB7XG4gIHdpZHRoOiBudW1iZXI7XG4gIGhlaWdodDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENzc1Byb3BlcnRpZXMge1xuICBbcHJvcGVydHlOYW1lOiBzdHJpbmddOiBzdHJpbmc7XG59XG5cbi8qKlxuICogRXh0ZW5kcyB0aGUge0BsaW5rIEhUTUxFbGVtZW50fSBpbnRlcmZhY2Ugd2l0aCBhIGNvbXBvbmVudCBhdHRyaWJ1dGUgdG8gc3RvcmUgdGhlIGFzc29jaWF0ZWQgY29tcG9uZW50LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEhUTUxFbGVtZW50V2l0aENvbXBvbmVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29tcG9uZW50PzogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz47XG59XG5cbi8qKlxuICogU2ltcGxlIERPTSBtYW5pcHVsYXRpb24gYW5kIERPTSBlbGVtZW50IGV2ZW50IGhhbmRsaW5nIG1vZGVsZWQgYWZ0ZXIgalF1ZXJ5IChhcyByZXBsYWNlbWVudCBmb3IgalF1ZXJ5KS5cbiAqXG4gKiBMaWtlIGpRdWVyeSwgRE9NIG9wZXJhdGVzIG9uIHNpbmdsZSBlbGVtZW50cyBhbmQgbGlzdHMgb2YgZWxlbWVudHMuIEZvciBleGFtcGxlOiBjcmVhdGluZyBhbiBlbGVtZW50IHJldHVybnMgYSBET01cbiAqIGluc3RhbmNlIHdpdGggYSBzaW5nbGUgZWxlbWVudCwgc2VsZWN0aW5nIGVsZW1lbnRzIHJldHVybnMgYSBET00gaW5zdGFuY2Ugd2l0aCB6ZXJvLCBvbmUsIG9yIG1hbnkgZWxlbWVudHMuIFNpbWlsYXJcbiAqIHRvIGpRdWVyeSwgc2V0dGVycyB1c3VhbGx5IGFmZmVjdCBhbGwgZWxlbWVudHMsIHdoaWxlIGdldHRlcnMgb3BlcmF0ZSBvbiBvbmx5IHRoZSBmaXJzdCBlbGVtZW50LlxuICogQWxzbyBzaW1pbGFyIHRvIGpRdWVyeSwgbW9zdCBtZXRob2RzIChleGNlcHQgZ2V0dGVycykgcmV0dXJuIHRoZSBET00gaW5zdGFuY2UgZmFjaWxpdGF0aW5nIGVhc3kgY2hhaW5pbmcgb2YgbWV0aG9kXG4gKiBjYWxscy5cbiAqXG4gKiBCdWlsdCB3aXRoIHRoZSBoZWxwIG9mOiBodHRwOi8veW91bWlnaHRub3RuZWVkanF1ZXJ5LmNvbS9cbiAqL1xuZXhwb3J0IGNsYXNzIERPTSB7XG5cbiAgcHJpdmF0ZSBkb2N1bWVudDogRG9jdW1lbnQ7XG5cbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIGVsZW1lbnRzIHRoYXQgdGhlIGluc3RhbmNlIHdyYXBzLiBUYWtlIGNhcmUgdGhhdCBub3QgYWxsIG1ldGhvZHMgY2FuIG9wZXJhdGUgb24gdGhlIHdob2xlIGxpc3QsXG4gICAqIGdldHRlcnMgdXN1YWxseSBqdXN0IHdvcmsgb24gdGhlIGZpcnN0IGVsZW1lbnQuXG4gICAqL1xuICBwcml2YXRlIGVsZW1lbnRzOiBIVE1MRWxlbWVudFdpdGhDb21wb25lbnRbXTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIERPTSBlbGVtZW50LlxuICAgKiBAcGFyYW0gdGFnTmFtZSB0aGUgdGFnIG5hbWUgb2YgdGhlIERPTSBlbGVtZW50XG4gICAqIEBwYXJhbSBhdHRyaWJ1dGVzIGEgbGlzdCBvZiBhdHRyaWJ1dGVzIG9mIHRoZSBlbGVtZW50XG4gICAqIEBwYXJhbSBjb21wb25lbnQgdGhlIHtAbGluayBDb21wb25lbnR9IHRoZSBET00gZWxlbWVudCBpcyBhc3NvY2lhdGVkIHdpdGhcbiAgICovXG4gIGNvbnN0cnVjdG9yKHRhZ05hbWU6IHN0cmluZywgYXR0cmlidXRlczoge1tuYW1lOiBzdHJpbmddOiBzdHJpbmd9LCBjb21wb25lbnQ/OiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPik7XG4gIC8qKlxuICAgKiBTZWxlY3RzIGFsbCBlbGVtZW50cyBmcm9tIHRoZSBET00gdGhhdCBtYXRjaCB0aGUgc3BlY2lmaWVkIHNlbGVjdG9yLlxuICAgKiBAcGFyYW0gc2VsZWN0b3IgdGhlIHNlbGVjdG9yIHRvIG1hdGNoIERPTSBlbGVtZW50cyB3aXRoXG4gICAqL1xuICBjb25zdHJ1Y3RvcihzZWxlY3Rvcjogc3RyaW5nKTtcbiAgLyoqXG4gICAqIFdyYXBzIGEgcGxhaW4gSFRNTEVsZW1lbnQgd2l0aCBhIERPTSBpbnN0YW5jZS5cbiAgICogQHBhcmFtIGVsZW1lbnQgdGhlIEhUTUxFbGVtZW50IHRvIHdyYXAgd2l0aCBET01cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTtcbiAgLyoqXG4gICAqIFdyYXBzIGEgbGlzdCBvZiBwbGFpbiBIVE1MRWxlbWVudHMgd2l0aCBhIERPTSBpbnN0YW5jZS5cbiAgICogQHBhcmFtIGVsZW1lbnRzIHRoZSBIVE1MRWxlbWVudHMgdG8gd3JhcCB3aXRoIERPTVxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudHM6IEhUTUxFbGVtZW50W10pO1xuICAvKipcbiAgICogV3JhcHMgdGhlIGRvY3VtZW50IHdpdGggYSBET00gaW5zdGFuY2UuIFVzZWZ1bCB0byBhdHRhY2ggZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBkb2N1bWVudC5cbiAgICogQHBhcmFtIGRvY3VtZW50IHRoZSBkb2N1bWVudCB0byB3cmFwXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihkb2N1bWVudDogRG9jdW1lbnQpO1xuICBjb25zdHJ1Y3RvcihcbiAgICAgIHNvbWV0aGluZzogc3RyaW5nIHwgSFRNTEVsZW1lbnQgfCBIVE1MRWxlbWVudFtdIHwgRG9jdW1lbnQsXG4gICAgICBhdHRyaWJ1dGVzPzoge1tuYW1lOiBzdHJpbmddOiBzdHJpbmd9LFxuICAgICAgY29tcG9uZW50PzogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4sXG4gICkge1xuICAgIHRoaXMuZG9jdW1lbnQgPSBkb2N1bWVudDsgLy8gU2V0IHRoZSBnbG9iYWwgZG9jdW1lbnQgdG8gdGhlIGxvY2FsIGRvY3VtZW50IGZpZWxkXG5cbiAgICBpZiAoc29tZXRoaW5nIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIGlmIChzb21ldGhpbmcubGVuZ3RoID4gMCAmJiBzb21ldGhpbmdbMF0gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICBsZXQgZWxlbWVudHMgPSBzb21ldGhpbmcgYXMgSFRNTEVsZW1lbnRXaXRoQ29tcG9uZW50W107XG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoc29tZXRoaW5nIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgIGxldCBlbGVtZW50ID0gc29tZXRoaW5nIGFzIEhUTUxFbGVtZW50V2l0aENvbXBvbmVudDtcbiAgICAgIHRoaXMuZWxlbWVudHMgPSBbZWxlbWVudF07XG4gICAgfVxuICAgIGVsc2UgaWYgKHNvbWV0aGluZyBpbnN0YW5jZW9mIERvY3VtZW50KSB7XG4gICAgICAvLyBXaGVuIGEgZG9jdW1lbnQgaXMgcGFzc2VkIGluLCB3ZSBkbyBub3QgZG8gYW55dGhpbmcgd2l0aCBpdCwgYnV0IGJ5IHNldHRpbmcgdGhpcy5lbGVtZW50cyB0byBudWxsXG4gICAgICAvLyB3ZSBnaXZlIHRoZSBldmVudCBoYW5kbGluZyBtZXRob2QgYSBtZWFucyB0byBkZXRlY3QgaWYgdGhlIGV2ZW50cyBzaG91bGQgYmUgcmVnaXN0ZXJlZCBvbiB0aGUgZG9jdW1lbnRcbiAgICAgIC8vIGluc3RlYWQgb2YgZWxlbWVudHMuXG4gICAgICB0aGlzLmVsZW1lbnRzID0gbnVsbDtcbiAgICB9XG4gICAgZWxzZSBpZiAoYXR0cmlidXRlcykge1xuICAgICAgbGV0IHRhZ05hbWUgPSBzb21ldGhpbmc7XG4gICAgICBsZXQgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSkgYXMgSFRNTEVsZW1lbnRXaXRoQ29tcG9uZW50O1xuXG4gICAgICBmb3IgKGxldCBhdHRyaWJ1dGVOYW1lIGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgbGV0IGF0dHJpYnV0ZVZhbHVlID0gYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXTtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZVZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICBlbGVtZW50LmNvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbGVtZW50cyA9IFtlbGVtZW50XTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBsZXQgc2VsZWN0b3IgPSBzb21ldGhpbmc7XG4gICAgICB0aGlzLmVsZW1lbnRzID0gdGhpcy5maW5kQ2hpbGRFbGVtZW50cyhzZWxlY3RvcikgYXMgSFRNTEVsZW1lbnRXaXRoQ29tcG9uZW50W107XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBlbGVtZW50cyB0aGF0IHRoaXMgRE9NIGluc3RhbmNlIGN1cnJlbnRseSBob2xkcy5cbiAgICogQHJldHVybnMge251bWJlcn0gdGhlIG51bWJlciBvZiBlbGVtZW50c1xuICAgKi9cbiAgZ2V0IGxlbmd0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzID8gdGhpcy5lbGVtZW50cy5sZW5ndGggOiAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIEhUTUwgZWxlbWVudHMgdGhhdCB0aGlzIERPTSBpbnN0YW5jZSBjdXJyZW50bHkgaG9sZHMuXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudFtdfSB0aGUgcmF3IEhUTUwgZWxlbWVudHNcbiAgICovXG4gIGdldCgpOiBIVE1MRWxlbWVudFdpdGhDb21wb25lbnRbXTtcbiAgLyoqXG4gICAqIEdldHMgYW4gSFRNTCBlbGVtZW50IGZyb20gdGhlIGxpc3QgZWxlbWVudHMgdGhhdCB0aGlzIERPTSBpbnN0YW5jZSBjdXJyZW50bHkgaG9sZHMuXG4gICAqIEBwYXJhbSBpbmRleCBUaGUgemVyby1iYXNlZCBpbmRleCBpbnRvIHRoZSBlbGVtZW50IGxpc3QuIENhbiBiZSBuZWdhdGl2ZSB0byByZXR1cm4gYW4gZWxlbWVudCBmcm9tIHRoZSBlbmQsXG4gICAqICAgIGUuZy4gLTEgcmV0dXJucyB0aGUgbGFzdCBlbGVtZW50LlxuICAgKi9cbiAgZ2V0KGluZGV4OiBudW1iZXIpOiBIVE1MRWxlbWVudFdpdGhDb21wb25lbnQ7XG4gIGdldChpbmRleD86IG51bWJlcik6IEhUTUxFbGVtZW50V2l0aENvbXBvbmVudCB8IEhUTUxFbGVtZW50V2l0aENvbXBvbmVudFtdIHtcbiAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHM7XG4gICAgfSBlbHNlIGlmICghdGhpcy5lbGVtZW50cyB8fCBpbmRleCA+PSB0aGlzLmVsZW1lbnRzLmxlbmd0aCB8fCBpbmRleCA8IC10aGlzLmVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9IGVsc2UgaWYgKGluZGV4IDwgMCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHNbdGhpcy5lbGVtZW50cy5sZW5ndGggLSBpbmRleF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRzW2luZGV4XTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQSBzaG9ydGN1dCBtZXRob2QgZm9yIGl0ZXJhdGluZyBhbGwgZWxlbWVudHMuIFNob3J0cyB0aGlzLmVsZW1lbnRzLmZvckVhY2goLi4uKSB0byB0aGlzLmZvckVhY2goLi4uKS5cbiAgICogQHBhcmFtIGhhbmRsZXIgdGhlIGhhbmRsZXIgdG8gZXhlY3V0ZSBhbiBvcGVyYXRpb24gb24gYW4gZWxlbWVudFxuICAgKi9cbiAgcHJpdmF0ZSBmb3JFYWNoKGhhbmRsZXI6IChlbGVtZW50OiBIVE1MRWxlbWVudCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5lbGVtZW50cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgIGhhbmRsZXIoZWxlbWVudCk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGZpbmRDaGlsZEVsZW1lbnRzT2ZFbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgRG9jdW1lbnQsIHNlbGVjdG9yOiBzdHJpbmcpOiBIVE1MRWxlbWVudFtdIHtcbiAgICBsZXQgY2hpbGRFbGVtZW50cyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG5cbiAgICAvLyBDb252ZXJ0IE5vZGVMaXN0IHRvIEFycmF5XG4gICAgLy8gaHR0cHM6Ly90b2RkbW90dG8uY29tL2EtY29tcHJlaGVuc2l2ZS1kaXZlLWludG8tbm9kZWxpc3RzLWFycmF5cy1jb252ZXJ0aW5nLW5vZGVsaXN0cy1hbmQtdW5kZXJzdGFuZGluZy10aGUtZG9tL1xuICAgIHJldHVybiBbXS5zbGljZS5jYWxsKGNoaWxkRWxlbWVudHMpO1xuICB9XG5cbiAgcHJpdmF0ZSBmaW5kQ2hpbGRFbGVtZW50cyhzZWxlY3Rvcjogc3RyaW5nKTogSFRNTEVsZW1lbnRbXSB7XG4gICAgbGV0IGFsbENoaWxkRWxlbWVudHMgPSA8SFRNTEVsZW1lbnRbXT5bXTtcblxuICAgIGlmICh0aGlzLmVsZW1lbnRzKSB7XG4gICAgICB0aGlzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgYWxsQ2hpbGRFbGVtZW50cyA9IGFsbENoaWxkRWxlbWVudHMuY29uY2F0KHRoaXMuZmluZENoaWxkRWxlbWVudHNPZkVsZW1lbnQoZWxlbWVudCwgc2VsZWN0b3IpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbmRDaGlsZEVsZW1lbnRzT2ZFbGVtZW50KGRvY3VtZW50LCBzZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFsbENoaWxkRWxlbWVudHM7XG4gIH1cblxuICAvKipcbiAgICogRmluZHMgYWxsIGNoaWxkIGVsZW1lbnRzIG9mIGFsbCBlbGVtZW50cyBtYXRjaGluZyB0aGUgc3VwcGxpZWQgc2VsZWN0b3IuXG4gICAqIEBwYXJhbSBzZWxlY3RvciB0aGUgc2VsZWN0b3IgdG8gbWF0Y2ggd2l0aCBjaGlsZCBlbGVtZW50c1xuICAgKiBAcmV0dXJucyB7RE9NfSBhIG5ldyBET00gaW5zdGFuY2UgcmVwcmVzZW50aW5nIGFsbCBtYXRjaGVkIGNoaWxkcmVuXG4gICAqL1xuICBmaW5kKHNlbGVjdG9yOiBzdHJpbmcpOiBET00ge1xuICAgIGxldCBhbGxDaGlsZEVsZW1lbnRzID0gdGhpcy5maW5kQ2hpbGRFbGVtZW50cyhzZWxlY3RvcikgYXMgSFRNTEVsZW1lbnRXaXRoQ29tcG9uZW50W107XG4gICAgcmV0dXJuIG5ldyBET00oYWxsQ2hpbGRFbGVtZW50cyk7XG4gIH1cblxuICAvKipcbiAgICogRm9jdXNlcyB0byB0aGUgZmlyc3QgaW5wdXQgZWxlbWVudFxuICAgKi9cbiAgZm9jdXNUb0ZpcnN0SW5wdXQoKSB7XG4gICAgY29uc3QgaW5wdXRFbGVtZW50cyA9IHRoaXMuZmluZENoaWxkRWxlbWVudHMoJ2J1dHRvbiwgW2hyZWZdLCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgW3RhYmluZGV4XTpub3QoW3RhYmluZGV4PVwiLTFcIl0pJyk7XG5cbiAgICBpZiAoaW5wdXRFbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICBpbnB1dEVsZW1lbnRzWzBdLmZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZvY3VzZXMgdG8gdGhlIGZpcnN0IGlucHV0IGVsZW1lbnRcbiAgICovXG4gIHNjcm9sbFRvKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgdGhpcy5lbGVtZW50c1swXS5zY3JvbGxUbyh4LCB5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIG9mIHRoZSBpbm5lciBIVE1MIGNvbnRlbnQgb2YgdGhlIGZpcnN0IGVsZW1lbnQuXG4gICAqL1xuICBodG1sKCk6IHN0cmluZztcbiAgLyoqXG4gICAqIFNldHMgdGhlIGlubmVyIEhUTUwgY29udGVudCBvZiBhbGwgZWxlbWVudHMuXG4gICAqIEBwYXJhbSBjb250ZW50IGEgc3RyaW5nIG9mIHBsYWluIHRleHQgb3IgSFRNTCBtYXJrdXBcbiAgICovXG4gIGh0bWwoY29udGVudDogc3RyaW5nKTogRE9NO1xuICBodG1sKGNvbnRlbnQ/OiBzdHJpbmcpOiBzdHJpbmcgfCBET00ge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0SHRtbChjb250ZW50KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRIdG1sKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRIdG1sKCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzWzBdLmlubmVySFRNTDtcbiAgfVxuXG4gIHByaXZhdGUgc2V0SHRtbChjb250ZW50OiBzdHJpbmcpOiBET00ge1xuICAgIGlmIChjb250ZW50ID09PSB1bmRlZmluZWQgfHwgY29udGVudCA9PSBudWxsKSB7XG4gICAgICAvLyBTZXQgdG8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIGlubmVySFRNTCBnZXR0aW5nIHNldCB0byAndW5kZWZpbmVkJyAoYWxsIGJyb3dzZXJzKSBvciAnbnVsbCcgKElFOSlcbiAgICAgIGNvbnRlbnQgPSAnJztcbiAgICB9XG5cbiAgICB0aGlzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gY29udGVudDtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyB0aGUgaW5uZXIgSFRNTCBvZiBhbGwgZWxlbWVudHMgKGRlbGV0ZXMgYWxsIGNoaWxkcmVuKS5cbiAgICogQHJldHVybnMge0RPTX1cbiAgICovXG4gIGVtcHR5KCk6IERPTSB7XG4gICAgdGhpcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICBlbGVtZW50LmlubmVySFRNTCA9ICcnO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIGZpcnN0IGZvcm0gZWxlbWVudCwgZS5nLiB0aGUgc2VsZWN0ZWQgdmFsdWUgb2YgYSBzZWxlY3QgYm94IG9yIHRoZSB0ZXh0IGlmIGFuXG4gICAqIGlucHV0IGZpZWxkLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgdmFsdWUgb2YgYSBmb3JtIGVsZW1lbnRcbiAgICovXG4gIHZhbCgpOiBzdHJpbmcge1xuICAgIGxldCBlbGVtZW50ID0gdGhpcy5lbGVtZW50c1swXTtcblxuICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgSFRNTFNlbGVjdEVsZW1lbnQgfHwgZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50LnZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIFRPRE8gYWRkIHN1cHBvcnQgZm9yIG1pc3NpbmcgZm9ybSBlbGVtZW50c1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGB2YWwoKSBub3Qgc3VwcG9ydGVkIGZvciAke3R5cGVvZiBlbGVtZW50fWApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiBhbiBhdHRyaWJ1dGUgb24gdGhlIGZpcnN0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSBhdHRyaWJ1dGVcbiAgICovXG4gIGF0dHIoYXR0cmlidXRlOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsO1xuICAvKipcbiAgICogU2V0cyBhbiBhdHRyaWJ1dGUgb24gYWxsIGVsZW1lbnRzLlxuICAgKiBAcGFyYW0gYXR0cmlidXRlIHRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGVcbiAgICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlXG4gICAqL1xuICBhdHRyKGF0dHJpYnV0ZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogRE9NO1xuICBhdHRyKGF0dHJpYnV0ZTogc3RyaW5nLCB2YWx1ZT86IHN0cmluZyk6IHN0cmluZyB8IG51bGwgfCBET00ge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0QXR0cihhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRBdHRyKGF0dHJpYnV0ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIGF0dHJpYnV0ZSBvZiB0aGUgZWxlbWVudC5cbiAgICogQHBhcmFtIGF0dHJpYnV0ZVxuICAgKi9cbiAgcmVtb3ZlQXR0cihhdHRyaWJ1dGU6IHN0cmluZykge1xuICAgIHRoaXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0QXR0cihhdHRyaWJ1dGU6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzWzBdLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRBdHRyKGF0dHJpYnV0ZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogRE9NIHtcbiAgICB0aGlzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIGEgZGF0YSBlbGVtZW50IG9uIHRoZSBmaXJzdCBlbGVtZW50LlxuICAgKiBAcGFyYW0gZGF0YUF0dHJpYnV0ZSB0aGUgbmFtZSBvZiB0aGUgZGF0YSBhdHRyaWJ1dGUgd2l0aG91dCB0aGUgJ2RhdGEtJyBwcmVmaXhcbiAgICovXG4gIGRhdGEoZGF0YUF0dHJpYnV0ZTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbDtcbiAgLyoqXG4gICAqIFNldHMgYSBkYXRhIGF0dHJpYnV0ZSBvbiBhbGwgZWxlbWVudHMuXG4gICAqIEBwYXJhbSBkYXRhQXR0cmlidXRlIHRoZSBuYW1lIG9mIHRoZSBkYXRhIGF0dHJpYnV0ZSB3aXRob3V0IHRoZSAnZGF0YS0nIHByZWZpeFxuICAgKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIG9mIHRoZSBkYXRhIGF0dHJpYnV0ZVxuICAgKi9cbiAgZGF0YShkYXRhQXR0cmlidXRlOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBET007XG4gIGRhdGEoZGF0YUF0dHJpYnV0ZTogc3RyaW5nLCB2YWx1ZT86IHN0cmluZyk6IHN0cmluZyB8IG51bGwgfCBET00ge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0RGF0YShkYXRhQXR0cmlidXRlLCB2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0RGF0YShkYXRhQXR0cmlidXRlKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldERhdGEoZGF0YUF0dHJpYnV0ZTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHNbMF0uZ2V0QXR0cmlidXRlKCdkYXRhLScgKyBkYXRhQXR0cmlidXRlKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0RGF0YShkYXRhQXR0cmlidXRlOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBET00ge1xuICAgIHRoaXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtJyArIGRhdGFBdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBlbmRzIG9uZSBvciBtb3JlIERPTSBlbGVtZW50cyBhcyBjaGlsZHJlbiB0byBhbGwgZWxlbWVudHMuXG4gICAqIEBwYXJhbSBjaGlsZEVsZW1lbnRzIHRoZSBjaHJpbGQgZWxlbWVudHMgdG8gYXBwZW5kXG4gICAqIEByZXR1cm5zIHtET019XG4gICAqL1xuICBhcHBlbmQoLi4uY2hpbGRFbGVtZW50czogRE9NW10pOiBET00ge1xuICAgIHRoaXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgY2hpbGRFbGVtZW50cy5mb3JFYWNoKChjaGlsZEVsZW1lbnQpID0+IHtcbiAgICAgICAgY2hpbGRFbGVtZW50LmVsZW1lbnRzLmZvckVhY2goKF8sIGluZGV4KSA9PiB7XG4gICAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZEVsZW1lbnQuZWxlbWVudHNbaW5kZXhdKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBlbGVtZW50cyBmcm9tIHRoZSBET00uXG4gICAqL1xuICByZW1vdmUoKTogdm9pZCB7XG4gICAgdGhpcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICBsZXQgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgb2Zmc2V0IG9mIHRoZSBmaXJzdCBlbGVtZW50IGZyb20gdGhlIGRvY3VtZW50J3MgdG9wIGxlZnQgY29ybmVyLlxuICAgKiBAcmV0dXJucyB7T2Zmc2V0fVxuICAgKi9cbiAgb2Zmc2V0KCk6IE9mZnNldCB7XG4gICAgbGV0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnRzWzBdO1xuICAgIGxldCBlbGVtZW50UmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgbGV0IGh0bWxSZWN0ID0gZG9jdW1lbnQuYm9keS5wYXJlbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgLy8gVmlydHVhbCB2aWV3cG9ydCBzY3JvbGwgaGFuZGxpbmcgKGUuZy4gcGluY2ggem9vbWVkIHZpZXdwb3J0cyBpbiBtb2JpbGUgYnJvd3NlcnMgb3IgZGVza3RvcCBDaHJvbWUvRWRnZSlcbiAgICAvLyAnbm9ybWFsJyB6b29tcyBhbmQgdmlydHVhbCB2aWV3cG9ydCB6b29tcyAoYWthIGxheW91dCB2aWV3cG9ydCkgcmVzdWx0IGluIGRpZmZlcmVudFxuICAgIC8vIGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgcmVzdWx0czpcbiAgICAvLyAgLSB3aXRoIG5vcm1hbCBzY3JvbGxzLCB0aGUgY2xpZW50UmVjdCBkZWNyZWFzZXMgd2l0aCBhbiBpbmNyZWFzZSBpbiBzY3JvbGwoVG9wfExlZnQpL3BhZ2UoWHxZKU9mZnNldFxuICAgIC8vICAtIHdpdGggcGluY2ggem9vbSBzY3JvbGxzLCB0aGUgY2xpZW50UmVjdCBzdGF5cyB0aGUgc2FtZSB3aGlsZSBzY3JvbGwvcGFnZU9mZnNldCBjaGFuZ2VzXG4gICAgLy8gVGhpcyBtZWFucywgdGhhdCB0aGUgY29tYmluYXRpb24gb2YgY2xpZW50UmVjdCArIHNjcm9sbC9wYWdlT2Zmc2V0IGRvZXMgbm90IHdvcmsgdG8gY2FsY3VsYXRlIHRoZSBvZmZzZXRcbiAgICAvLyBmcm9tIHRoZSBkb2N1bWVudCdzIHVwcGVyIGxlZnQgb3JpZ2luIHdoZW4gcGluY2ggem9vbSBpcyB1c2VkLlxuICAgIC8vIFRvIHdvcmsgYXJvdW5kIHRoaXMgaXNzdWUsIHdlIGRvIG5vdCB1c2Ugc2Nyb2xsL3BhZ2VPZmZzZXQgYnV0IGdldCB0aGUgY2xpZW50UmVjdCBvZiB0aGUgaHRtbCBlbGVtZW50IGFuZFxuICAgIC8vIHN1YnRyYWN0IGl0IGZyb20gdGhlIGVsZW1lbnQncyByZWN0LCB3aGljaCBhbHdheXMgcmVzdWx0cyBpbiB0aGUgb2Zmc2V0IGZyb20gdGhlIGRvY3VtZW50IG9yaWdpbi5cbiAgICAvLyBOT1RFOiB0aGUgY3VycmVudCB3YXkgb2Ygb2Zmc2V0IGNhbGN1bGF0aW9uIHdhcyBpbXBsZW1lbnRlZCBzcGVjaWZpY2FsbHkgdG8gdHJhY2sgZXZlbnQgcG9zaXRpb25zIG9uIHRoZVxuICAgIC8vIHNlZWsgYmFyLCBhbmQgaXQgbWlnaHQgYnJlYWsgY29tcGF0aWJpbGl0eSB3aXRoIGpRdWVyeSdzIG9mZnNldCgpIG1ldGhvZC4gSWYgdGhpcyBldmVyIHR1cm5zIG91dCB0byBiZSBhXG4gICAgLy8gcHJvYmxlbSwgdGhpcyBtZXRob2Qgc2hvdWxkIGJlIHJldmVydGVkIHRvIHRoZSBvbGQgdmVyc2lvbiBhbmQgdGhlIG9mZnNldCBjYWxjdWxhdGlvbiBtb3ZlZCB0byB0aGUgc2VlayBiYXIuXG5cbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBlbGVtZW50UmVjdC50b3AgLSBodG1sUmVjdC50b3AsXG4gICAgICBsZWZ0OiBlbGVtZW50UmVjdC5sZWZ0IC0gaHRtbFJlY3QubGVmdCxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHdpZHRoIG9mIHRoZSBmaXJzdCBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSB0aGUgd2lkdGggb2YgdGhlIGZpcnN0IGVsZW1lbnRcbiAgICovXG4gIHdpZHRoKCk6IG51bWJlciB7XG4gICAgLy8gVE9ETyBjaGVjayBpZiB0aGlzIGlzIHRoZSBzYW1lIGFzIGpRdWVyeSdzIHdpZHRoKCkgKHByb2JhYmx5IG5vdClcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50c1swXS5vZmZzZXRXaWR0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBoZWlnaHQgb2YgdGhlIGZpcnN0IGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IHRoZSBoZWlnaHQgb2YgdGhlIGZpcnN0IGVsZW1lbnRcbiAgICovXG4gIGhlaWdodCgpOiBudW1iZXIge1xuICAgIC8vIFRPRE8gY2hlY2sgaWYgdGhpcyBpcyB0aGUgc2FtZSBhcyBqUXVlcnkncyBoZWlnaHQoKSAocHJvYmFibHkgbm90KVxuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzWzBdLm9mZnNldEhlaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzaXplIG9mIHRoZSBmaXJzdCBlbGVtZW50LlxuICAgKiBAcmV0dXJuIHtTaXplfSB0aGUgc2l6ZSBvZiB0aGUgZmlyc3QgZWxlbWVudFxuICAgKi9cbiAgc2l6ZSgpOiBTaXplIHtcbiAgICByZXR1cm4geyB3aWR0aDogdGhpcy53aWR0aCgpLCBoZWlnaHQ6IHRoaXMuaGVpZ2h0KCkgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdHRhY2hlcyBhbiBldmVudCBoYW5kbGVyIHRvIG9uZSBvciBtb3JlIGV2ZW50cyBvbiBhbGwgZWxlbWVudHMuXG4gICAqIEBwYXJhbSBldmVudE5hbWUgdGhlIGV2ZW50IG5hbWUgKG9yIG11bHRpcGxlIG5hbWVzIHNlcGFyYXRlZCBieSBzcGFjZSkgdG8gbGlzdGVuIHRvXG4gICAqIEBwYXJhbSBldmVudEhhbmRsZXIgdGhlIGV2ZW50IGhhbmRsZXIgdG8gY2FsbCB3aGVuIHRoZSBldmVudCBmaXJlc1xuICAgKiBAcGFyYW0gb3B0aW9ucyB0aGUgb3B0aW9ucyBmb3IgdGhpcyBldmVudCBoYW5kbGVyXG4gICAqIEByZXR1cm5zIHtET019XG4gICAqL1xuICBvbihldmVudE5hbWU6IHN0cmluZywgZXZlbnRIYW5kbGVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0LCBvcHRpb25zPzogYm9vbGVhbiB8IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zKTogRE9NIHtcbiAgICBsZXQgZXZlbnRzID0gZXZlbnROYW1lLnNwbGl0KCcgJyk7XG5cbiAgICBldmVudHMuZm9yRWFjaCgoZXZlbnQpID0+IHtcbiAgICAgIGlmICh0aGlzLmVsZW1lbnRzID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBldmVudEhhbmRsZXIsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZXZlbnRIYW5kbGVyLCBvcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFuIGV2ZW50IGhhbmRsZXIgZnJvbSBvbmUgb3IgbW9yZSBldmVudHMgb24gYWxsIGVsZW1lbnRzLlxuICAgKiBAcGFyYW0gZXZlbnROYW1lIHRoZSBldmVudCBuYW1lIChvciBtdWx0aXBsZSBuYW1lcyBzZXBhcmF0ZWQgYnkgc3BhY2UpIHRvIHJlbW92ZSB0aGUgaGFuZGxlciBmcm9tXG4gICAqIEBwYXJhbSBldmVudEhhbmRsZXIgdGhlIGV2ZW50IGhhbmRsZXIgdG8gcmVtb3ZlXG4gICAqIEBwYXJhbSBvcHRpb25zIHRoZSBvcHRpb25zIGZvciB0aGlzIGV2ZW50IGhhbmRsZXJcbiAgICogQHJldHVybnMge0RPTX1cbiAgICovXG4gIG9mZihldmVudE5hbWU6IHN0cmluZywgZXZlbnRIYW5kbGVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0LCBvcHRpb25zPzogYm9vbGVhbiB8IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zKTogRE9NIHtcbiAgICBsZXQgZXZlbnRzID0gZXZlbnROYW1lLnNwbGl0KCcgJyk7XG5cbiAgICBldmVudHMuZm9yRWFjaCgoZXZlbnQpID0+IHtcbiAgICAgIGlmICh0aGlzLmVsZW1lbnRzID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBldmVudEhhbmRsZXIsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgZXZlbnRIYW5kbGVyLCBvcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIHRoZSBzcGVjaWZpZWQgY2xhc3MoZXMpIHRvIGFsbCBlbGVtZW50cy5cbiAgICogQHBhcmFtIGNsYXNzTmFtZSB0aGUgY2xhc3MoZXMpIHRvIGFkZCwgbXVsdGlwbGUgY2xhc3NlcyBzZXBhcmF0ZWQgYnkgc3BhY2VcbiAgICogQHJldHVybnMge0RPTX1cbiAgICovXG4gIGFkZENsYXNzKGNsYXNzTmFtZTogc3RyaW5nKTogRE9NIHtcbiAgICB0aGlzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xuICAgICAgICBjb25zdCBjbGFzc05hbWVzID0gY2xhc3NOYW1lLnNwbGl0KCcgJylcbiAgICAgICAgICAuZmlsdGVyKGNsYXNzTmFtZSA9PiBjbGFzc05hbWUubGVuZ3RoID4gMCk7XG5cbiAgICAgICAgaWYgKGNsYXNzTmFtZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCguLi5jbGFzc05hbWVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lICs9ICcgJyArIGNsYXNzTmFtZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZWQgdGhlIHNwZWNpZmllZCBjbGFzcyhlcykgZnJvbSBhbGwgZWxlbWVudHMuXG4gICAqIEBwYXJhbSBjbGFzc05hbWUgdGhlIGNsYXNzKGVzKSB0byByZW1vdmUsIG11bHRpcGxlIGNsYXNzZXMgc2VwYXJhdGVkIGJ5IHNwYWNlXG4gICAqIEByZXR1cm5zIHtET019XG4gICAqL1xuICByZW1vdmVDbGFzcyhjbGFzc05hbWU6IHN0cmluZyk6IERPTSB7XG4gICAgdGhpcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgICAgY29uc3QgY2xhc3NOYW1lcyA9IGNsYXNzTmFtZS5zcGxpdCgnICcpXG4gICAgICAgICAgLmZpbHRlcihjbGFzc05hbWUgPT4gY2xhc3NOYW1lLmxlbmd0aCA+IDApO1xuXG4gICAgICAgIGlmIChjbGFzc05hbWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoLi4uY2xhc3NOYW1lcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UoXG4gICAgICAgICAgbmV3IFJlZ0V4cCgnKF58XFxcXGIpJyArIGNsYXNzTmFtZS5zcGxpdCgnICcpLmpvaW4oJ3wnKSArICcoXFxcXGJ8JCknLCAnZ2knKSwgJyAnKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhbnkgb2YgdGhlIGVsZW1lbnRzIGhhcyB0aGUgc3BlY2lmaWVkIGNsYXNzLlxuICAgKiBAcGFyYW0gY2xhc3NOYW1lIHRoZSBjbGFzcyBuYW1lIHRvIGNoZWNrXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIG9uZSBvZiB0aGUgZWxlbWVudHMgaGFzIHRoZSBjbGFzcyBhdHRhY2hlZCwgZWxzZSBpZiBubyBlbGVtZW50IGhhcyBpdCBhdHRhY2hlZFxuICAgKi9cbiAgaGFzQ2xhc3MoY2xhc3NOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBsZXQgaGFzQ2xhc3MgPSBmYWxzZTtcblxuICAgIHRoaXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XG4gICAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSB7XG4gICAgICAgICAgLy8gU2luY2Ugd2UgYXJlIGluc2lkZSBhIGhhbmRsZXIsIHdlIGNhbid0IGp1c3QgJ3JldHVybiB0cnVlJy4gSW5zdGVhZCwgd2Ugc2F2ZSBpdCB0byBhIHZhcmlhYmxlXG4gICAgICAgICAgLy8gYW5kIHJldHVybiBpdCBhdCB0aGUgZW5kIG9mIHRoZSBmdW5jdGlvbiBib2R5LlxuICAgICAgICAgIGhhc0NsYXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChuZXcgUmVnRXhwKCcoXnwgKScgKyBjbGFzc05hbWUgKyAnKCB8JCknLCAnZ2knKS50ZXN0KGVsZW1lbnQuY2xhc3NOYW1lKSkge1xuICAgICAgICAgIC8vIFNlZSBjb21tZW50IGFib3ZlXG4gICAgICAgICAgaGFzQ2xhc3MgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gaGFzQ2xhc3M7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgYSBDU1MgcHJvcGVydHkgb2YgdGhlIGZpcnN0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgdGhlIG5hbWUgb2YgdGhlIENTUyBwcm9wZXJ0eSB0byByZXRyaWV2ZSB0aGUgdmFsdWUgb2ZcbiAgICovXG4gIGNzcyhwcm9wZXJ0eU5hbWU6IHN0cmluZyk6IHN0cmluZyB8IG51bGw7XG4gIC8qKlxuICAgKiBTZXRzIHRoZSB2YWx1ZSBvZiBhIENTUyBwcm9wZXJ0eSBvbiBhbGwgZWxlbWVudHMuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgdGhlIG5hbWUgb2YgdGhlIENTUyBwcm9wZXJ0eSB0byBzZXQgdGhlIHZhbHVlIGZvclxuICAgKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIHRvIHNldCBmb3IgdGhlIGdpdmVuIENTUyBwcm9wZXJ0eVxuICAgKi9cbiAgY3NzKHByb3BlcnR5TmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogRE9NO1xuICAvKipcbiAgICogU2V0cyBhIGNvbGxlY3Rpb24gb2YgQ1NTIHByb3BlcnRpZXMgYW5kIHRoZWlyIHZhbHVlcyBvbiBhbGwgZWxlbWVudHMuXG4gICAqIEBwYXJhbSBwcm9wZXJ0eVZhbHVlQ29sbGVjdGlvbiBhbiBvYmplY3QgY29udGFpbmluZyBwYWlycyBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgdGhlaXIgdmFsdWVzXG4gICAqL1xuICBjc3MocHJvcGVydHlWYWx1ZUNvbGxlY3Rpb246IENzc1Byb3BlcnRpZXMpOiBET007XG4gIGNzcyhwcm9wZXJ0eU5hbWVPckNvbGxlY3Rpb246IHN0cmluZyB8IENzc1Byb3BlcnRpZXMsIHZhbHVlPzogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB8IERPTSB7XG4gICAgaWYgKHR5cGVvZiBwcm9wZXJ0eU5hbWVPckNvbGxlY3Rpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICBsZXQgcHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lT3JDb2xsZWN0aW9uO1xuXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRDc3MocHJvcGVydHlOYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3NzKHByb3BlcnR5TmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgbGV0IHByb3BlcnR5VmFsdWVDb2xsZWN0aW9uID0gcHJvcGVydHlOYW1lT3JDb2xsZWN0aW9uO1xuICAgICAgcmV0dXJuIHRoaXMuc2V0Q3NzQ29sbGVjdGlvbihwcm9wZXJ0eVZhbHVlQ29sbGVjdGlvbik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYW4gaW5saW5lIENTUyBwcm9wZXJ0eSBpZiBpdCBleGlzdHNcbiAgICogQHBhcmFtIHByb3BlcnR5TmFtZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byByZW1vdmVcbiAgICogQHBhcmFtIGVsZW1lbnRJbmRleCBpbmRleCBvZiB0aGUgZWxlbWVudCB3aG9zZSBDU1MgcHJvcGVydHkgc2hvdWxkIGdldCByZW1vdmVkXG4gICAqL1xuICByZW1vdmVDc3MocHJvcGVydHlOYW1lOiBzdHJpbmcsIGVsZW1lbnRJbmRleCA9IDApOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzW2VsZW1lbnRJbmRleF0uc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcGVydHlOYW1lKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q3NzKHByb3BlcnR5TmFtZTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUodGhpcy5lbGVtZW50c1swXSlbPGFueT5wcm9wZXJ0eU5hbWVdO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRDc3MocHJvcGVydHlOYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBET00ge1xuICAgIHRoaXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgLy8gPGFueT4gY2FzdCB0byByZXNvbHZlIFRTNzAxNTogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzY2MjcxMTQvMzcwMjUyXG4gICAgICBlbGVtZW50LnN0eWxlWzxhbnk+cHJvcGVydHlOYW1lXSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRDc3NDb2xsZWN0aW9uKHJ1bGVWYWx1ZUNvbGxlY3Rpb246IHtbcnVsZU5hbWU6IHN0cmluZ106IHN0cmluZ30pOiBET00ge1xuICAgIHRoaXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzQ0OTA1NzMvMzcwMjUyXG4gICAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHJ1bGVWYWx1ZUNvbGxlY3Rpb24pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiIsImltcG9ydCB7RXJyb3JNZXNzYWdlTWFwLCBFcnJvck1lc3NhZ2VUcmFuc2xhdG9yfSBmcm9tICcuL2NvbXBvbmVudHMvZXJyb3JtZXNzYWdlb3ZlcmxheSc7XG5pbXBvcnQgeyBFcnJvckV2ZW50IH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IE1vYmlsZVYzUGxheWVyRXJyb3JFdmVudCwgTW9iaWxlVjNTb3VyY2VFcnJvckV2ZW50IH0gZnJvbSAnLi9tb2JpbGV2M3BsYXllcmFwaSc7XG5cbi8qKlxuICogQGNhdGVnb3J5IFV0aWxzXG4gKi9cbmV4cG9ydCBuYW1lc3BhY2UgRXJyb3JVdGlscyB7XG5cbiAgZXhwb3J0IGNvbnN0IGRlZmF1bHRFcnJvck1lc3NhZ2VzOiBFcnJvck1lc3NhZ2VNYXAgPSB7XG4gICAgMTAwMDogJ0Vycm9yIGlzIHVua25vd24nLFxuICAgIDEwMDE6ICdUaGUgcGxheWVyIEFQSSBpcyBub3QgYXZhaWxhYmxlIGFmdGVyIGEgY2FsbCB0byBQbGF5ZXJBUEkuZGVzdHJveS4nLFxuICAgIDExMDA6ICdHZW5lcmFsIHNldHVwIGVycm9yJyxcbiAgICAxMTAxOiAnVGhlcmUgd2FzIGFuIGVycm9yIHdoZW4gaW5zZXJ0aW5nIHRoZSBIVE1MIHZpZGVvIGVsZW1lbnQnLFxuICAgIDExMDI6ICdObyBjb25maWd1cmF0aW9uIHdhcyBwcm92aWRlZCcsXG4gICAgMTEwMzogJ1RoZSBsaWNlbnNlIGlzIG5vdCB2YWxpZCcsXG4gICAgMTEwNDogJ1RoZSB0aGUgZG9tYWluLWxvY2tlZCBwbGF5ZXIgaXMgbm90IGF1dGhvcml6ZWQgdG8gcGxheWJhY2sgb24gdGhpcyBkb21haW4nLFxuICAgIDExMDU6ICdUaGUgZG9tYWluIGlzIG5vdCBhbGxvd2xpc3RlZCcsXG4gICAgMTEwNjogJ1RoZSBsaWNlbnNlIHNlcnZlciBVUkwgaXMgaW52YWxpZCcsXG4gICAgMTEwNzogJ1RoZSBpbXByZXNzaW9uIHNlcnZlciBVUkwgaXMgaW52YWxpZCcsXG4gICAgMTEwODogJ0NvdWxkIG5vdCBpbml0aWFsaXplIGEgcmVuZGVyaW5nIGVuZ2luZScsXG4gICAgMTEwOTogJ1RoZSB1c2VkIGZsYXNoIHZlcnNpb24gZG9lcyBub3Qgc3VwcG9ydCBwbGF5YmFjaycsXG4gICAgMTExMDogJ05hdGl2ZSBGbGFzaCBpcyBub3QgYXV0aG9yaXplZCBieSBhIHZhbGlkIEFkb2JlIHRva2VuJyxcbiAgICAxMTExOiAnRmxhc2ggZG9lc25cXCd0IGhhdmUgc3VmZmljaWVudCByZXNvdXJjZXMnLFxuICAgIDExMTI6ICdGbGFzaCBjb250YWluZXIgQVBJIG5vdCBhdmFpbGFibGUnLFxuICAgIDExMTM6ICdQcm90b2NvbCBub3Qgc3VwcG9ydGVkLiBUaGlzIHNpdGUgaGFzIGJlZW4gbG9hZGVkIHVzaW5nIFwiZmlsZVwiIHByb3RvY29sLCBidXQgdW5mb3J0dW5hdGVseSB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSBsb2FkIHRoZSBwYWdlIHVzaW5nIGEgd2ViIHNlcnZlciAodXNpbmcgaHR0cCBvciBodHRwcyknLFxuICAgIDEyMDA6ICdHZW5lcmFsIHNvdXJjZSBlcnJvcicsXG4gICAgMTIwMTogJ05vIHZhbGlkIHNvdXJjZSB3YXMgcHJvdmlkZWQnLFxuICAgIDEyMDI6ICdUaGUgZG93bmxvYWRlZCBtYW5pZmVzdCBpcyBpbnZhbGlkJyxcbiAgICAxMjAzOiAnVGhlcmUgd2FzIG5vIHRlY2hub2xvZ3kgZGV0ZWN0ZWQgdG8gcGxheWJhY2sgdGhlIHByb3ZpZGVkIHNvdXJjZScsXG4gICAgMTIwNDogJ1RoZSBzdHJlYW0gdHlwZSBpcyBub3Qgc3VwcG9ydGVkJyxcbiAgICAxMjA1OiAnVGhlIGZvcmNlZCB0ZWNobm9sb2d5IGlzIG5vdCBzdXBwb3J0ZWQnLFxuICAgIDEyMDY6ICdObyBzdHJlYW0gZm91bmQgZm9yIHN1cHBvcnRlZCB0ZWNobm9sb2dpZXMuJyxcbiAgICAxMjA3OiAnVGhlIGRvd25sb2FkZWQgc2VnbWVudCBpcyBlbXB0eScsXG4gICAgMTIwODogJ1RoZSBtYW5pZmVzdCBjb3VsZCBub3QgYmUgbG9hZGVkJyxcbiAgICAxMjA5OiAnUHJvZ3Jlc3NpdmUgc3RyZWFtIHR5cGUgbm90IHN1cHBvcnRlZCBvciB0aGUgc3RyZWFtIGhhcyBhbiBlcnJvcicsXG4gICAgMTIxMDogJ0hMUyBzdHJlYW0gaGFzIGFuIGVycm9yJyxcbiAgICAxMjExOiAnVGhlIGVuY3J5cHRpb24gbWV0aG9kIGlzIG5vdCBzdXBwb3J0ZWQnLFxuICAgIDEzMDA6ICdHZW5lcmFsIHBsYXliYWNrIGVycm9yJyxcbiAgICAxMzAxOiAnVmlkZW8gZGVjb2RlciBvciBkZW11eGVyIGhhZCBhbiBlcnJvciB3aXRoIHRoZSBjb250ZW50JyxcbiAgICAxMzAyOiAnR2VuZXJhbCBlcnJvciBpZiBGbGFzaCByZW5kZXJlciBoYXMgYW4gZXJyb3InLFxuICAgIDEzMDM6ICdGbGFzaCBkb2VzblxcJ3QgaGF2ZSBzdWZmaWNpZW50IHJlc291cmNlcycsXG4gICAgMTMwNDogJ1RoZSB0cmFuc211eGVyIGNvdWxkIG5vdCBiZSBpbml0aWFsaXplZCcsXG4gICAgMTQwMDogJ05ldHdvcmsgZXJyb3Igd2hpbGUgZG93bmxvYWRpbmcnLFxuICAgIDE0MDE6ICdUaGUgbWFuaWZlc3QgZG93bmxvYWQgdGltZWQgb3V0JyxcbiAgICAxNDAyOiAnVGhlIHNlZ21lbnQgZG93bmxvYWQgdGltZWQgb3V0JyxcbiAgICAxNDAzOiAnVGhlIHByb2dyZXNzaXZlIHN0cmVhbSBkb3dubG9hZCB0aW1lZCBvdXQnLFxuICAgIDE0MDQ6ICdUaGUgQ2VydGlmaWNhdGUgY291bGQgbm90IGJlIGxvYWRlZCcsXG4gICAgMjAwMDogJ0dlbmVyYWwgRFJNIGVycm9yJyxcbiAgICAyMDAxOiAnUmVxdWlyZWQgRFJNIGNvbmZpZ3VyYXRpb24gaXMgbWlzc2luZycsXG4gICAgMjAwMjogJ1RoZSBsaWNlbnNpbmcgc2VydmVyIFVSTCBpcyBtaXNzaW5nJyxcbiAgICAyMDAzOiAnTGljZW5zZSByZXF1ZXN0IGZhaWxlZCcsXG4gICAgMjAwNDogJ0tleSBvciBLZXlJZCBpcyBtaXNzaW5nJyxcbiAgICAyMDA1OiAnS2V5IHNpemUgaXMgbm90IHN1cHBvcnRlZCcsXG4gICAgMjAwNjogJ1VuYWJsZSB0byBpbnN0YW50aWF0ZSBhIGtleSBzeXN0ZW0gc3VwcG9ydGluZyB0aGUgcmVxdWlyZWQgY29tYmluYXRpb25zJyxcbiAgICAyMDA3OiAnVW5hYmxlIHRvIGNyZWF0ZSBvciBpbml0aWFsaXplIGtleSBzZXNzaW9uJyxcbiAgICAyMDA4OiAnVGhlIE1lZGlhS2V5IG9iamVjdCBjb3VsZCBub3QgYmUgY3JlYXRlZC9pbml0aWFsaXplZCcsXG4gICAgMjAwOTogJ0tleSBlcnJvcicsXG4gICAgMjAxMDogJ1RoZSBrZXkgc3lzdGVtIGlzIG5vdCBzdXBwb3J0ZWQnLFxuICAgIDIwMTE6ICdUaGUgY2VydGlmaWNhdGUgaXMgbm90IHZhbGlkJyxcbiAgICAyMDEyOiAnSW52YWxpZCBoZWFkZXIga2V5L3ZhbHVlIHBhaXIgZm9yIFBsYXlSZWFkeSBsaWNlbnNlIHJlcXVlc3QnLFxuICAgIDIwMTM6ICdDb250ZW50IGNhbm5vdCBiZSBwbGF5ZWQgYmFjayBiZWNhdXNlIHRoZSBvdXRwdXQgaXMgcmVzdHJpY3RlZCBvbiB0aGlzIG1hY2hpbmUnLFxuICAgIDIwMTQ6ICdEUk0gZXJyb3IgZm9yIHRoZSBGbGFzaCByZW5kZXJlcicsXG4gICAgMjEwMDogJ0dlbmVyYWwgVlIgZXJyb3InLFxuICAgIDIxMDE6ICdQbGF5ZXIgdGVjaG5vbG9neSBub3QgY29tcGF0aWJsZSB3aXRoIFZSIHBsYXliYWNrJyxcbiAgICAzMDAwOiAnR2VuZXJhbCBtb2R1bGUgZXJyb3InLFxuICAgIDMwMDE6ICdUaGUgZGVmaW5pdGlvbiBvZiB0aGUgbW9kdWxlIGlzIGludmFsaWQgKGUuZy4gaW5jb21wbGV0ZSkuJyxcbiAgICAzMDAyOiAnVGhlIG1vZHVsZSBkZWZpbml0aW9uIHNwZWNpZmllcyBkZXBlbmRlbmNpZXMgYnV0IHRoZSBtb2R1bGUgaXMgbm90IHByb3ZpZGVkIHZpYSBhIGZ1bmN0aW9uIGZvciBkZWZlcnJlZCBsb2FkaW5nLicsXG4gICAgMzAwMzogJ0EgbW9kdWxlIGNhbm5vdCBiZSBsb2FkZWQgYmVjYXVzZSBpdCBoYXMgbm90IGJlZW4gYWRkZWQgdG8gdGhlIHBsYXllciBjb3JlLicsXG4gICAgMzAwNDogJ0EgbW9kdWxlIGNhbm5vdCBiZSBsb2FkZWQgYmVjYXVzZSBvbmUgb3IgbW9yZSBkZXBlbmRlbmNpZXMgYXJlIG1pc3NpbmcuJyxcbiAgICAzMTAwOiAnQW4gQWR2ZXJ0aXNpbmcgbW9kdWxlIGVycm9yIGhhcyBvY2N1cnJlZC4gUmVmZXIgdG8gdGhlIGF0dGFjaGVkIEFkdmVydGlzaW5nRXJyb3IuJyxcbiAgfTtcblxuICBleHBvcnQgY29uc3QgZGVmYXVsdE1vYmlsZVYzRXJyb3JNZXNzYWdlVHJhbnNsYXRvciA9IChlcnJvcjogTW9iaWxlVjNQbGF5ZXJFcnJvckV2ZW50IHwgTW9iaWxlVjNTb3VyY2VFcnJvckV2ZW50KSA9PiB7XG4gICAgcmV0dXJuIGVycm9yLm1lc3NhZ2U7XG4gIH07XG5cbiAgZXhwb3J0IGNvbnN0IGRlZmF1bHRXZWJFcnJvck1lc3NhZ2VUcmFuc2xhdG9yOiBFcnJvck1lc3NhZ2VUcmFuc2xhdG9yID0gKGVycm9yOiBFcnJvckV2ZW50KSA9PiB7XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gRXJyb3JVdGlscy5kZWZhdWx0RXJyb3JNZXNzYWdlc1tlcnJvci5jb2RlXTtcblxuICAgIGlmIChlcnJvck1lc3NhZ2UpIHtcbiAgICAgIC8vIFVzZSB0aGUgZXJyb3IgbWVzc2FnZSB0ZXh0IGlmIHRoZXJlIGlzIG9uZVxuICAgICAgcmV0dXJuIGAke2Vycm9yTWVzc2FnZX1cXG4oJHtlcnJvci5uYW1lfSlgOyAvLyBkZWZhdWx0IGVycm9yIG1lc3NhZ2Ugc3R5bGVcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRmFsbGJhY2sgdG8gZXJyb3IgY29kZS9uYW1lIGlmIG5vIG1lc3NhZ2UgaXMgZGVmaW5lZFxuICAgICAgcmV0dXJuIGAke2Vycm9yLmNvZGV9ICR7ZXJyb3IubmFtZX1gO1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCB7QXJyYXlVdGlsc30gZnJvbSAnLi9hcnJheXV0aWxzJztcbmltcG9ydCB7IFRpbWVvdXQgfSBmcm9tICcuL3RpbWVvdXQnO1xuLyoqXG4gKiBGdW5jdGlvbiBpbnRlcmZhY2UgZm9yIGV2ZW50IGxpc3RlbmVycyBvbiB0aGUge0BsaW5rIEV2ZW50RGlzcGF0Y2hlcn0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRXZlbnRMaXN0ZW5lcjxTZW5kZXIsIEFyZ3M+IHtcbiAgKHNlbmRlcjogU2VuZGVyLCBhcmdzOiBBcmdzKTogdm9pZDtcbn1cblxuLyoqXG4gKiBFbXB0eSB0eXBlIGZvciBjcmVhdGluZyB7QGxpbmsgRXZlbnREaXNwYXRjaGVyIGV2ZW50IGRpc3BhdGNoZXJzfSB0aGF0IGRvIG5vdCBjYXJyeSBhbnkgYXJndW1lbnRzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5vQXJncyB7XG59XG5cbi8qKlxuICogRXZlbnQgYXJncyBmb3IgYW4gZXZlbnQgdGhhdCBjYW4gYmUgY2FuY2VsZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2FuY2VsRXZlbnRBcmdzIGV4dGVuZHMgTm9BcmdzIHtcbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyBhIGZsYWcgd2hldGhlciB0aGUgZXZlbnQgc2hvdWxkIGJlIGNhbmNlbGVkLlxuICAgKi9cbiAgY2FuY2VsPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBQdWJsaWMgaW50ZXJmYWNlIHRoYXQgcmVwcmVzZW50cyBhbiBldmVudC4gQ2FuIGJlIHVzZWQgdG8gc3Vic2NyaWJlIHRvIGFuZCB1bnN1YnNjcmliZSBmcm9tIGV2ZW50cy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFdmVudDxTZW5kZXIsIEFyZ3M+IHtcbiAgLyoqXG4gICAqIFN1YnNjcmliZXMgYW4gZXZlbnQgbGlzdGVuZXIgdG8gdGhpcyBldmVudCBkaXNwYXRjaGVyLlxuICAgKiBAcGFyYW0gbGlzdGVuZXIgdGhlIGxpc3RlbmVyIHRvIGFkZFxuICAgKi9cbiAgc3Vic2NyaWJlKGxpc3RlbmVyOiBFdmVudExpc3RlbmVyPFNlbmRlciwgQXJncz4pOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmVzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIHRoaXMgZXZlbnQgZGlzcGF0Y2hlciB0aGF0IGlzIG9ubHkgY2FsbGVkIG9uY2UuXG4gICAqIEBwYXJhbSBsaXN0ZW5lciB0aGUgbGlzdGVuZXIgdG8gYWRkXG4gICAqL1xuICBzdWJzY3JpYmVPbmNlKGxpc3RlbmVyOiBFdmVudExpc3RlbmVyPFNlbmRlciwgQXJncz4pOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmVzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIHRoaXMgZXZlbnQgZGlzcGF0Y2hlciB0aGF0IHdpbGwgYmUgY2FsbGVkIGF0IGEgbGltaXRlZCByYXRlIHdpdGggYSBtaW5pbXVtXG4gICAqIGludGVydmFsIG9mIHRoZSBzcGVjaWZpZWQgbWlsbGlzZWNvbmRzLlxuICAgKiBAcGFyYW0gbGlzdGVuZXIgdGhlIGxpc3RlbmVyIHRvIGFkZFxuICAgKiBAcGFyYW0gcmF0ZU1zIHRoZSByYXRlIGluIG1pbGxpc2Vjb25kcyB0byB3aGljaCBjYWxsaW5nIG9mIHRoZSBsaXN0ZW5lcnMgc2hvdWxkIGJlIGxpbWl0ZWRcbiAgICovXG4gIHN1YnNjcmliZVJhdGVMaW1pdGVkKGxpc3RlbmVyOiBFdmVudExpc3RlbmVyPFNlbmRlciwgQXJncz4sIHJhdGVNczogbnVtYmVyKTogdm9pZDtcblxuICAvKipcbiAgICogVW5zdWJzY3JpYmVzIGEgc3Vic2NyaWJlZCBldmVudCBsaXN0ZW5lciBmcm9tIHRoaXMgZGlzcGF0Y2hlci5cbiAgICogQHBhcmFtIGxpc3RlbmVyIHRoZSBsaXN0ZW5lciB0byByZW1vdmVcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGxpc3RlbmVyIHdhcyBzdWNjZXNzZnVsbHkgdW5zdWJzY3JpYmVkLCBmYWxzZSBpZiBpdCBpc24ndCBzdWJzY3JpYmVkIG9uIHRoaXNcbiAgICogICBkaXNwYXRjaGVyXG4gICAqL1xuICB1bnN1YnNjcmliZShsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcjxTZW5kZXIsIEFyZ3M+KTogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBFdmVudCBkaXNwYXRjaGVyIHRvIHN1YnNjcmliZSBhbmQgdHJpZ2dlciBldmVudHMuIEVhY2ggZXZlbnQgc2hvdWxkIGhhdmUgaXRzIG93biBkaXNwYXRjaGVyLlxuICovXG5leHBvcnQgY2xhc3MgRXZlbnREaXNwYXRjaGVyPFNlbmRlciwgQXJncz4gaW1wbGVtZW50cyBFdmVudDxTZW5kZXIsIEFyZ3M+IHtcblxuICBwcml2YXRlIGxpc3RlbmVyczogRXZlbnRMaXN0ZW5lcldyYXBwZXI8U2VuZGVyLCBBcmdzPltdID0gW107XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICAvKipcbiAgICoge0Bpbmhlcml0RG9jfVxuICAgKi9cbiAgc3Vic2NyaWJlKGxpc3RlbmVyOiBFdmVudExpc3RlbmVyPFNlbmRlciwgQXJncz4pIHtcbiAgICB0aGlzLmxpc3RlbmVycy5wdXNoKG5ldyBFdmVudExpc3RlbmVyV3JhcHBlcihsaXN0ZW5lcikpO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAaW5oZXJpdERvY31cbiAgICovXG4gIHN1YnNjcmliZU9uY2UobGlzdGVuZXI6IEV2ZW50TGlzdGVuZXI8U2VuZGVyLCBBcmdzPikge1xuICAgIHRoaXMubGlzdGVuZXJzLnB1c2gobmV3IEV2ZW50TGlzdGVuZXJXcmFwcGVyKGxpc3RlbmVyLCB0cnVlKSk7XG4gIH1cblxuICAvKipcbiAgICoge0Bpbmhlcml0RG9jfVxuICAgKi9cbiAgc3Vic2NyaWJlUmF0ZUxpbWl0ZWQobGlzdGVuZXI6IEV2ZW50TGlzdGVuZXI8U2VuZGVyLCBBcmdzPiwgcmF0ZU1zOiBudW1iZXIpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5wdXNoKG5ldyBSYXRlTGltaXRlZEV2ZW50TGlzdGVuZXJXcmFwcGVyKGxpc3RlbmVyLCByYXRlTXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGluaGVyaXREb2N9XG4gICAqL1xuICB1bnN1YnNjcmliZShsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcjxTZW5kZXIsIEFyZ3M+KTogYm9vbGVhbiB7XG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGxpc3RlbmVycywgY29tcGFyZSB3aXRoIHBhcmFtZXRlciwgYW5kIHJlbW92ZSBpZiBmb3VuZFxuICAgIC8vIE5PVEU6IEluIGNhc2Ugd2UgZXZlciByZW1vdmUgYWxsIG1hdGNoaW5nIGxpc3RlbmVycyBpbnN0ZWFkIG9mIGp1c3QgdGhlIGZpcnN0LCB3ZSBuZWVkIHRvIHJldmVyc2UtaXRlcmF0ZSBoZXJlXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHN1YnNjcmliZWRMaXN0ZW5lciA9IHRoaXMubGlzdGVuZXJzW2ldO1xuICAgICAgaWYgKHN1YnNjcmliZWRMaXN0ZW5lci5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgc3Vic2NyaWJlZExpc3RlbmVyLmNsZWFyKCk7XG4gICAgICAgIEFycmF5VXRpbHMucmVtb3ZlKHRoaXMubGlzdGVuZXJzLCBzdWJzY3JpYmVkTGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgbGlzdGVuZXJzIGZyb20gdGhpcyBkaXNwYXRjaGVyLlxuICAgKi9cbiAgdW5zdWJzY3JpYmVBbGwoKTogdm9pZCB7XG4gICAgLy8gSW4gY2FzZSBvZiBSYXRlTGltaXRlZEV2ZW50TGlzdGVuZXJXcmFwcGVyIHdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIHRpbWVvdXQgY2FsbGJhY2sgd29uJ3QgYmUgY2FsbGVkXG4gICAgZm9yIChsZXQgbGlzdGVuZXIgb2YgdGhpcy5saXN0ZW5lcnMpIHtcbiAgICAgIGxpc3RlbmVyLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGV2ZW50IHRvIGFsbCBzdWJzY3JpYmVkIGxpc3RlbmVycy5cbiAgICogQHBhcmFtIHNlbmRlciB0aGUgc291cmNlIG9mIHRoZSBldmVudFxuICAgKiBAcGFyYW0gYXJncyB0aGUgYXJndW1lbnRzIGZvciB0aGUgZXZlbnRcbiAgICovXG4gIGRpc3BhdGNoKHNlbmRlcjogU2VuZGVyLCBhcmdzOiBBcmdzID0gbnVsbCkge1xuICAgIGxldCBsaXN0ZW5lcnNUb1JlbW92ZSA9IFtdO1xuXG4gICAgLy8gQ2FsbCBldmVyeSBsaXN0ZW5lclxuICAgIC8vIFdlIGl0ZXJhdGUgb3ZlciBhIGNvcHkgb2YgdGhlIGFycmF5IG9mIGxpc3RlbmVycyB0byBhdm9pZCB0aGUgY2FzZSB3aGVyZSBldmVudHMgYXJlIG5vdCBmaXJlZCBvbiBsaXN0ZW5lcnMgd2hlblxuICAgIC8vIGxpc3RlbmVycyBhcmUgdW5zdWJzY3JpYmVkIGZyb20gd2l0aGluIHRoZSBldmVudCBoYW5kbGVycyBkdXJpbmcgYSBkaXNwYXRjaCAoYmVjYXVzZSB0aGUgaW5kaWNlcyBjaGFuZ2UgYW5kXG4gICAgLy8gbGlzdGVuZXJzIGFyZSBzaGlmdGVkIHdpdGhpbiB0aGUgYXJyYXkpLlxuICAgIC8vIFRoaXMgbWVhbnMgdGhhdCBsaXN0ZW5lciB4KzEgd2lsbCBzdGlsbCBiZSBjYWxsZWQgaWYgdW5zdWJzY3JpYmVkIGZyb20gd2l0aGluIHRoZSBoYW5kbGVyIG9mIGxpc3RlbmVyIHgsIGFzIHdlbGxcbiAgICAvLyBhcyBsaXN0ZW5lciB5KzEgd2lsbCBub3QgYmUgY2FsbGVkIHdoZW4gc3Vic2NyaWJlZCBmcm9tIHdpdGhpbiB0aGUgaGFuZGxlciBvZiBsaXN0ZW5lciB5LlxuICAgIC8vIEFycmF5LnNsaWNlKDApIGlzIHRoZSBmYXN0ZXN0IGFycmF5IGNvcHkgbWV0aG9kIGFjY29yZGluZyB0bzogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIxNTE0MjU0LzM3MDI1MlxuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzLnNsaWNlKDApO1xuICAgIGZvciAobGV0IGxpc3RlbmVyIG9mIGxpc3RlbmVycykge1xuICAgICAgbGlzdGVuZXIuZmlyZShzZW5kZXIsIGFyZ3MpO1xuXG4gICAgICBpZiAobGlzdGVuZXIuaXNPbmNlKCkpIHtcbiAgICAgICAgbGlzdGVuZXJzVG9SZW1vdmUucHVzaChsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIG9uZS10aW1lIGxpc3RlbmVyXG4gICAgZm9yIChsZXQgbGlzdGVuZXJUb1JlbW92ZSBvZiBsaXN0ZW5lcnNUb1JlbW92ZSkge1xuICAgICAgQXJyYXlVdGlscy5yZW1vdmUodGhpcy5saXN0ZW5lcnMsIGxpc3RlbmVyVG9SZW1vdmUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBldmVudCB0aGF0IHRoaXMgZGlzcGF0Y2hlciBtYW5hZ2VzIGFuZCBvbiB3aGljaCBsaXN0ZW5lcnMgY2FuIHN1YnNjcmliZSBhbmQgdW5zdWJzY3JpYmUgZXZlbnQgaGFuZGxlcnMuXG4gICAqIEByZXR1cm5zIHtFdmVudH1cbiAgICovXG4gIGdldEV2ZW50KCk6IEV2ZW50PFNlbmRlciwgQXJncz4ge1xuICAgIC8vIEZvciBub3csIGp1c3QgY2FzdCB0aGUgZXZlbnQgZGlzcGF0Y2hlciB0byB0aGUgZXZlbnQgaW50ZXJmYWNlLiBBdCBzb21lIHBvaW50IGluIHRoZSBmdXR1cmUgd2hlbiB0aGVcbiAgICAvLyBjb2RlYmFzZSBncm93cywgaXQgbWlnaHQgbWFrZSBzZW5zZSB0byBzcGxpdCB0aGUgZGlzcGF0Y2hlciBpbnRvIHNlcGFyYXRlIGRpc3BhdGNoZXIgYW5kIGV2ZW50IGNsYXNzZXMuXG4gICAgcmV0dXJuIDxFdmVudDxTZW5kZXIsIEFyZ3M+PnRoaXM7XG4gIH1cbn1cblxuLyoqXG4gKiBBIGJhc2ljIGV2ZW50IGxpc3RlbmVyIHdyYXBwZXIgdG8gbWFuYWdlIGxpc3RlbmVycyB3aXRoaW4gdGhlIHtAbGluayBFdmVudERpc3BhdGNoZXJ9LiBUaGlzIGlzIGEgJ3ByaXZhdGUnIGNsYXNzXG4gKiBmb3IgaW50ZXJuYWwgZGlzcGF0Y2hlciB1c2UgYW5kIGl0IGlzIHRoZXJlZm9yZSBub3QgZXhwb3J0ZWQuXG4gKi9cbmNsYXNzIEV2ZW50TGlzdGVuZXJXcmFwcGVyPFNlbmRlciwgQXJncz4ge1xuXG4gIHByaXZhdGUgZXZlbnRMaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcjxTZW5kZXIsIEFyZ3M+O1xuICBwcml2YXRlIG9uY2U6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IobGlzdGVuZXI6IEV2ZW50TGlzdGVuZXI8U2VuZGVyLCBBcmdzPiwgb25jZTogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgdGhpcy5ldmVudExpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgdGhpcy5vbmNlID0gb25jZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB3cmFwcGVkIGV2ZW50IGxpc3RlbmVyLlxuICAgKiBAcmV0dXJucyB7RXZlbnRMaXN0ZW5lcjxTZW5kZXIsIEFyZ3M+fVxuICAgKi9cbiAgZ2V0IGxpc3RlbmVyKCk6IEV2ZW50TGlzdGVuZXI8U2VuZGVyLCBBcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRMaXN0ZW5lcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB0aGUgd3JhcHBlZCBldmVudCBsaXN0ZW5lciB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHMuXG4gICAqIEBwYXJhbSBzZW5kZXJcbiAgICogQHBhcmFtIGFyZ3NcbiAgICovXG4gIGZpcmUoc2VuZGVyOiBTZW5kZXIsIGFyZ3M6IEFyZ3MpIHtcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXIoc2VuZGVyLCBhcmdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhpcyBsaXN0ZW5lciBpcyBzY2hlZHVsZWQgdG8gYmUgY2FsbGVkIG9ubHkgb25jZS5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IG9uY2UgaWYgdHJ1ZVxuICAgKi9cbiAgaXNPbmNlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm9uY2U7XG4gIH1cblxuICBjbGVhcigpOiB2b2lkIHtcbiAgfVxufVxuXG5pbnRlcmZhY2UgRXZlbnRBdHRyaWJ1dGVzPFNlbmRlciwgQXJncz4ge1xuICBzZW5kZXI6IFNlbmRlcjtcbiAgYXJnczogQXJncztcbn1cblxuLyoqXG4gKiBFeHRlbmRzIHRoZSBiYXNpYyB7QGxpbmsgRXZlbnRMaXN0ZW5lcldyYXBwZXJ9IHdpdGggcmF0ZS1saW1pdGluZyBmdW5jdGlvbmFsaXR5LlxuICovXG5jbGFzcyBSYXRlTGltaXRlZEV2ZW50TGlzdGVuZXJXcmFwcGVyPFNlbmRlciwgQXJncz4gZXh0ZW5kcyBFdmVudExpc3RlbmVyV3JhcHBlcjxTZW5kZXIsIEFyZ3M+IHtcblxuICBwcml2YXRlIHJlYWRvbmx5IHJhdGVNczogbnVtYmVyO1xuICBwcml2YXRlIHJlYWRvbmx5IHJhdGVMaW1pdGluZ0V2ZW50TGlzdGVuZXI6IEV2ZW50TGlzdGVuZXI8U2VuZGVyLCBBcmdzPjtcblxuICAvLyBzYXZlIGxhc3Qgc2VlbiBldmVudCBhdHRyaWJ1dGVzXG4gIHByaXZhdGUgbGFzdFNlZW5FdmVudDogRXZlbnRBdHRyaWJ1dGVzPFNlbmRlciwgQXJncz47XG5cbiAgcHJpdmF0ZSByYXRlTGltaXRUaW1vdXQ6IFRpbWVvdXQ7XG5cbiAgY29uc3RydWN0b3IobGlzdGVuZXI6IEV2ZW50TGlzdGVuZXI8U2VuZGVyLCBBcmdzPiwgcmF0ZU1zOiBudW1iZXIpIHtcbiAgICBzdXBlcihsaXN0ZW5lcik7IC8vIHNldHMgdGhlIGV2ZW50IGxpc3RlbmVyIHNpbmtcblxuICAgIHRoaXMucmF0ZU1zID0gcmF0ZU1zO1xuXG4gICAgLy8gc3RhcnRpbmcgbGltaXRpbmcgdGhlIGV2ZW50cyB0byB0aGUgZ2l2ZW4gdmFsdWVcbiAgICBjb25zdCBzdGFydFJhdGVMaW1pdGluZyA9ICgpID0+IHtcbiAgICAgIHRoaXMucmF0ZUxpbWl0VGltb3V0LnN0YXJ0KCk7XG4gICAgfTtcblxuICAgIC8vIHRpbW91dCBmb3IgbGltaXRpbmcgdGhlIGV2ZW50c1xuICAgIHRoaXMucmF0ZUxpbWl0VGltb3V0ID0gbmV3IFRpbWVvdXQodGhpcy5yYXRlTXMsICgpID0+IHtcbiAgICAgIGlmICh0aGlzLmxhc3RTZWVuRXZlbnQpIHtcbiAgICAgICAgdGhpcy5maXJlU3VwZXIodGhpcy5sYXN0U2VlbkV2ZW50LnNlbmRlciwgdGhpcy5sYXN0U2VlbkV2ZW50LmFyZ3MpO1xuICAgICAgICBzdGFydFJhdGVMaW1pdGluZygpOyAvLyBzdGFydCByYXRlTGltaXRpbmcgYWdhaW4gdG8ga2VlcCByYXRlIGxpbWl0IGFjdGl2ZSBldmVuIGFmdGVyIGZpcmluZyB0aGUgbGFzdCBzZWVuIGV2ZW50XG4gICAgICAgIHRoaXMubGFzdFNlZW5FdmVudCA9IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBJbiBjYXNlIHRoZSBldmVudHMgc3RvcHBpbmcgZHVyaW5nIHRoZSByYXRlTGltaXRpbmcgd2UgbmVlZCB0byB0cmFjayB0aGUgbGFzdCBzZWVuIG9uZSBhbmQgZGVsZWdhdGUgYWZ0ZXIgdGhlXG4gICAgLy8gcmF0ZSBsaW1pdGluZyBpcyBmaW5pc2hlZC4gVGhpcyBwcmV2ZW50cyBtaXNzaW5nIHRoZSBsYXN0IHVwZGF0ZSBkdWUgdG8gdGhlIHJhdGUgbGltaXQuXG4gICAgdGhpcy5yYXRlTGltaXRpbmdFdmVudExpc3RlbmVyID0gKHNlbmRlcjogU2VuZGVyLCBhcmdzOiBBcmdzKSA9PiB7XG4gICAgICAvLyBvbmx5IGZpcmUgZXZlbnRzIGlmIHRoZSByYXRlTGltaXRpbmcgaXMgbm90IHJ1bm5pbmdcbiAgICAgIGlmICh0aGlzLnNob3VsZEZpcmVFdmVudCgpKSB7XG4gICAgICAgIHRoaXMuZmlyZVN1cGVyKHNlbmRlciwgYXJncyk7XG4gICAgICAgIHN0YXJ0UmF0ZUxpbWl0aW5nKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sYXN0U2VlbkV2ZW50ID0ge1xuICAgICAgICBzZW5kZXI6IHNlbmRlcixcbiAgICAgICAgYXJnczogYXJncyxcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgc2hvdWxkRmlyZUV2ZW50KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5yYXRlTGltaXRUaW1vdXQuaXNBY3RpdmUoKTtcbiAgfVxuXG4gIHByaXZhdGUgZmlyZVN1cGVyKHNlbmRlcjogU2VuZGVyLCBhcmdzOiBBcmdzKSB7XG4gICAgLy8gRmlyZSB0aGUgYWN0dWFsIGV4dGVybmFsIGV2ZW50IGxpc3RlbmVyXG4gICAgc3VwZXIuZmlyZShzZW5kZXIsIGFyZ3MpO1xuICB9XG5cbiAgZmlyZShzZW5kZXI6IFNlbmRlciwgYXJnczogQXJncykge1xuICAgIC8vIEZpcmUgdGhlIGludGVybmFsIHJhdGUtbGltaXRpbmcgbGlzdGVuZXIgaW5zdGVhZCBvZiB0aGUgZXh0ZXJuYWwgZXZlbnQgbGlzdGVuZXJcbiAgICB0aGlzLnJhdGVMaW1pdGluZ0V2ZW50TGlzdGVuZXIoc2VuZGVyLCBhcmdzKTtcbiAgfVxuXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIHN1cGVyLmNsZWFyKCk7XG4gICAgdGhpcy5yYXRlTGltaXRUaW1vdXQuY2xlYXIoKTtcbiAgfVxufVxuIiwiY29uc3QgRm9jdXNWaXNpYmxlQ3NzQ2xhc3NOYW1lID0gJ3t7UFJFRklYfX0tZm9jdXMtdmlzaWJsZSc7XG5cbmV4cG9ydCBjbGFzcyBGb2N1c1Zpc2liaWxpdHlUcmFja2VyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBldmVudEhhbmRsZXJNYXA6IHsgW2V2ZW50TmFtZTogc3RyaW5nXTogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdCB9O1xuICBwcml2YXRlIGxhc3RJbnRlcmFjdGlvbldhc0tleWJvYXJkOiBib29sZWFuID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJpdG1vdmluVWlQcmVmaXg6IHN0cmluZykge1xuICAgIHRoaXMuZXZlbnRIYW5kbGVyTWFwID0ge1xuICAgICAgbW91c2Vkb3duOiB0aGlzLm9uTW91c2VPclBvaW50ZXJPclRvdWNoLFxuICAgICAgcG9pbnRlcmRvd246IHRoaXMub25Nb3VzZU9yUG9pbnRlck9yVG91Y2gsXG4gICAgICB0b3VjaHN0YXJ0OiB0aGlzLm9uTW91c2VPclBvaW50ZXJPclRvdWNoLFxuICAgICAga2V5ZG93bjogdGhpcy5vbktleURvd24sXG4gICAgICBmb2N1czogdGhpcy5vbkZvY3VzLFxuICAgICAgYmx1cjogdGhpcy5vbkJsdXIsXG4gICAgfTtcbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIHByaXZhdGUgb25LZXlEb3duID0gKGU6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICBpZiAoZS5tZXRhS2V5IHx8IGUuYWx0S2V5IHx8IGUuY3RybEtleSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMubGFzdEludGVyYWN0aW9uV2FzS2V5Ym9hcmQgPSB0cnVlO1xuICB9O1xuXG4gIHByaXZhdGUgb25Nb3VzZU9yUG9pbnRlck9yVG91Y2ggPSAoKSA9PiAodGhpcy5sYXN0SW50ZXJhY3Rpb25XYXNLZXlib2FyZCA9IGZhbHNlKTtcblxuICBwcml2YXRlIG9uRm9jdXMgPSAoeyB0YXJnZXQ6IGVsZW1lbnQgfTogRm9jdXNFdmVudCkgPT4ge1xuICAgIGlmIChcbiAgICAgIHRoaXMubGFzdEludGVyYWN0aW9uV2FzS2V5Ym9hcmQgJiZcbiAgICAgIGlzSHRtbEVsZW1lbnQoZWxlbWVudCkgJiZcbiAgICAgIGlzQml0bW92aW5VaShlbGVtZW50LCB0aGlzLmJpdG1vdmluVWlQcmVmaXgpICYmXG4gICAgICAhZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoRm9jdXNWaXNpYmxlQ3NzQ2xhc3NOYW1lKVxuICAgICkge1xuICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKEZvY3VzVmlzaWJsZUNzc0NsYXNzTmFtZSk7XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgb25CbHVyID0gKHsgdGFyZ2V0OiBlbGVtZW50IH06IEZvY3VzRXZlbnQpID0+IHtcbiAgICBpZiAoaXNIdG1sRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKEZvY3VzVmlzaWJsZUNzc0NsYXNzTmFtZSk7XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgcmVnaXN0ZXJFdmVudExpc3RlbmVycygpOiB2b2lkIHtcbiAgICBmb3IgKGNvbnN0IGV2ZW50IGluIHRoaXMuZXZlbnRIYW5kbGVyTWFwKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCB0aGlzLmV2ZW50SGFuZGxlck1hcFtldmVudF0sIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdW5yZWdpc3RlckV2ZW50TGlzdGVuZXJzKCk6IHZvaWQge1xuICAgIGZvciAoY29uc3QgZXZlbnQgaW4gdGhpcy5ldmVudEhhbmRsZXJNYXApIHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIHRoaXMuZXZlbnRIYW5kbGVyTWFwW2V2ZW50XSwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgdGhpcy51bnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0JpdG1vdmluVWkoZWxlbWVudDogRWxlbWVudCwgYml0bW92aW5VaVByZWZpeDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBlbGVtZW50LmlkLmluZGV4T2YoYml0bW92aW5VaVByZWZpeCkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGlzSHRtbEVsZW1lbnQoZWxlbWVudDogdW5rbm93bik6IGVsZW1lbnQgaXMgSFRNTEVsZW1lbnQgJiB7IGNsYXNzTGlzdDogRE9NVG9rZW5MaXN0IH0ge1xuICByZXR1cm4gKFxuICAgIGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiBlbGVtZW50LmNsYXNzTGlzdCBpbnN0YW5jZW9mIERPTVRva2VuTGlzdFxuICApO1xufVxuIiwiaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbi8qKlxuICogVGhlIEdyb3VwIFBsYXliYWNrIEFQSSBvZmZlcnMgY29udHJvbCBvdmVyIHN5bmNocm9uaXplZCBwbGF5YmFjayBvZiBhIGdyb3VwIG9mIGNsaWVudHMsIGUuZy4gZm9yIEFwcGxlIFNoYXJlUGxheVxuICogc2Vzc2lvbnMuXG5cbiAqIE5vdGU6IFRoZSBBUEkgY3VycmVudGx5IG9ubHkgY292ZXJzIHRoZSBpbW1lZGlhdGUgbmVlZHMgb2YgdGhlIGlPUyBTREsgaW4gY29tYmluYXRpb24gd2l0aCBvdXIgVUkgd2hpY2ggaXMgcmVnYXJkaW5nXG4gKiB0ZW1wb3JhcmlseSBzdXNwZW5kaW5nIHN5bmNocm9uaXphdGlvbiBvZiB0aGUgcGxheWVyIGZyb20gdGhlIGdyb3VwLiBCdXQgaXQgaXMgb3BlbiB0byBiZSBleHRlbmRlZCBhcyBuZWVkZWQgaW4gdGhlXG4gKiBmdXR1cmUuXG4gKi9cblxuLyoqXG4gKiBSZWFzb24gZm9yIHN1c3BlbmRpbmcgdGhlIHN5bmNocm9uaXphdGlvbiB3aXRoIHRoZSBncm91cC5cbiAqL1xuZXhwb3J0IGVudW0gR3JvdXBQbGF5YmFja1N1c3BlbnNpb25SZWFzb24ge1xuICBVc2VySXNTY3J1YmJpbmcgPSAndXNlcklzU2NydWJiaW5nJyxcbn1cblxuLyoqXG4gKiBBIHJlcHJlc2VudGF0aW9uIG9mIGEgdGVtcG9yYXJ5IGJyZWFrIGluIHBhcnRpY2lwYXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR3JvdXBQbGF5YmFja1N1c3BlbnNpb24ge1xuICAvKipcbiAgICogVGhlIHJlYXNvbiBmb3IgdGhlIHN1c3BlbnNpb24uXG4gICAqL1xuICByZWFzb246IEdyb3VwUGxheWJhY2tTdXNwZW5zaW9uUmVhc29uO1xuXG4gIC8qKlxuICAgKiBBIHVuaXF1ZSBpZGVudGlmaWVyLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcbn1cblxuLyoqXG4gKiBPcHRpb25zIHRvIGJlIGNvbnNpZGVyZWQgdXBvbiBlbmRpbmcgYSBzdXNwZW5zaW9uLlxuICovXG5pbnRlcmZhY2UgRW5kR3JvdXBQbGF5YmFja1N1c3BlbnNpb25PcHRpb25zIHtcbiAgLyoqXG4gICAqIEEgcHJvcG9zZWQgdGltZSBmb3IgdGhlIGdyb3VwIHRvIHNlZWsgdG8uXG4gICAqL1xuICBwcm9wb3NlZFBsYXliYWNrVGltZT86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBHcm91cCBQbGF5YmFjayBBUEkgb2ZmZXJpbmcgY29udHJvbCBvdmVyIHRoZSBwbGF5ZXIncyBwYXJ0aWNpcGF0aW9uIGluIHN5bmNocm9uaXplZCBwbGF5YmFjayBvZiBhIGdyb3VwIG9mIGNsaWVudHMuXG4gKiBGb3IgZXhhbXBsZSwgYW4gQXBwbGUgU2hhcmVQbGF5IHNlc3Npb24uXG4gKi9cbmludGVyZmFjZSBHcm91cFBsYXliYWNrQVBJIHtcbiAgLyoqXG4gICAqIEJlZ2lucyBhIG5ldyBzdXNwZW5zaW9uLlxuICAgKlxuICAgKiBUZW1wb3JhcmlseSBzdXNwZW5kcyB0aGUgbG9jYWwgcGxheWVyJ3Mgc3luY2hyb25pemF0aW9uIHdpdGggdGhlIGdyb3VwLiBXaGlsZSBzdXNwZW5kZWQsIGFueSBsb2NhbCBwbGF5YmFjayBjb250cm9sXG4gICAqIGFjdGlvbiAoZS5nLiBwbGF5LCBwYXVzZSwgc2Vlaykgd2lsbCBub3QgYmUgZm9yd2FyZGVkIHRvIHRoZSBncm91cCBhbmQgYW55IGFjdGlvbiBvcmlnaW5hdGluZyBmcm9tIGFub3RoZXIgZ3JvdXBcbiAgICogcGFydGljaXBhbnQgd2lsbCBub3QgYmUgcGVyZm9ybWVkIG9uIHRoZSBsb2NhbCBwbGF5ZXIuXG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqIEl0IGlzIHBvc3NpYmxlIGZvciBtdWx0aXBsZSBzdXNwZW5zaW9ucyB0byBleGlzdCBleGlzdCBzaW11bHRhbmVvdXNseSB3aXRoIGRpZmZlcmVudCBzdXNwZW5zaW9uIHJlYXNvbnMuIFRoZSBwbGF5ZXJcbiAgICogd2lsbCByZS1zeW5jaHJvbml6ZSB3aXRoIHRoZSBncm91cCBvbmNlIGFsbCBleGlzdGluZyBzdXNwZW5zaW9ucyBoYXZlIGVuZGVkLlxuICAgKlxuICAgKiBAcGFyYW0gcmVhc29uIC0gVGhlIHJlYXNvbiBmb3IgdGhlIHN1c3BlbnNpb24uXG4gICAqIEByZXR1cm5zIEEgc3VzcGVuc2lvbiBvYmplY3QuXG4gICAqL1xuICBiZWdpblN1c3BlbnNpb24ocmVhc29uOiBHcm91cFBsYXliYWNrU3VzcGVuc2lvblJlYXNvbik6IEdyb3VwUGxheWJhY2tTdXNwZW5zaW9uO1xuXG4gIC8qKlxuICAgKiBFbmRzIHRoZSBnaXZlbiBzdXNwZW5zaW9uLlxuICAgKlxuICAgKiBAcGFyYW0gc3VzcGVuc2lvbiAtIFRoZSBzdXNwZW5zaW9uIHRvIGJlIGVuZGVkLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsLiBPcHRpb25zIHRvIGJlIGNvbnNpZGVyZWQgd2hlbiBlbmRpbmcgdGhlIHN1c3BlbnNpb24sIGUuZy4gYSBwcm9wb3NlZCBzZWVrIHRpbWUgZm9yIHRoZSBncm91cC5cbiAgICovXG4gIGVuZFN1c3BlbnNpb24oc3VzcGVuc2lvbjogR3JvdXBQbGF5YmFja1N1c3BlbnNpb24sIG9wdGlvbnM/OiBFbmRHcm91cFBsYXliYWNrU3VzcGVuc2lvbk9wdGlvbnMpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBwbGF5ZXIgaXMgY3VycmVudGx5IHBhcnRpY2lwYXRpbmcgaW4gYSBncm91cCBwbGF5YmFjayBzZXNzaW9uLlxuICAgKi9cbiAgaGFzSm9pbmVkKCk6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHBsYXllciBpcyBjdXJyZW50bHkgc3VzcGVuZGluZyBzeW5jaHJvbml6YXRpb24gd2l0aCB0aGUgZ3JvdXAuXG4gICAqIENhbiBvbmx5IHJldHVybiB0cnVlIGlmIGBoYXNKb2luZWQoKWAgYWxzbyBpcyB0cnVlLlxuICAgKi9cbiAgaXNTdXNwZW5kZWQoKTogYm9vbGVhbjtcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIEV4dGVuZGVkUGxheWVyQVBJIGV4dGVuZHMgUGxheWVyQVBJIHtcbiAgLyoqXG4gICAqIEdyb3VwIFBsYXliYWNrIEFQSVxuICAgKlxuICAgKiBAcmVtYXJrc1xuICAgKiBUaGlzIEFQSSBpcyBvcHRpb25hbCBhcyBub3QgZXZlcnkgcGxhdGZvcm0gc3VwcG9ydHMgZ3JvdXAgcGxheWJhY2suXG4gICAqL1xuICBncm91cFBsYXliYWNrPzogR3JvdXBQbGF5YmFja0FQSTtcbn1cbiIsImV4cG9ydCBuYW1lc3BhY2UgR3VpZCB7XG5cbiAgbGV0IGd1aWQgPSAxO1xuXG4gIGV4cG9ydCBmdW5jdGlvbiBuZXh0KCkge1xuICAgIHJldHVybiBndWlkKys7XG4gIH1cbn1cbiIsImltcG9ydCB7RE9NfSBmcm9tICcuL2RvbSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW1hZ2VMb2FkZWRDYWxsYmFjayB7XG4gICh1cmw6IHN0cmluZywgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgSW1hZ2VMb2FkZXJTdGF0ZSB7XG4gIHVybDogc3RyaW5nO1xuICBpbWFnZTogRE9NO1xuICBsb2FkZWRDYWxsYmFjazogSW1hZ2VMb2FkZWRDYWxsYmFjaztcbiAgbG9hZGVkOiBib29sZWFuO1xuICB3aWR0aDogbnVtYmVyO1xuICBoZWlnaHQ6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBUcmFja3MgdGhlIGxvYWRpbmcgc3RhdGUgb2YgaW1hZ2VzLlxuICovXG5leHBvcnQgY2xhc3MgSW1hZ2VMb2FkZXIge1xuXG4gIHByaXZhdGUgc3RhdGU6IHsgW3VybDogc3RyaW5nXTogSW1hZ2VMb2FkZXJTdGF0ZTsgfSA9IHt9O1xuXG4gIC8qKlxuICAgKiBMb2FkcyBhbiBpbWFnZSBhbmQgY2FsbCB0aGUgY2FsbGJhY2sgb25jZSB0aGUgaW1hZ2UgaXMgbG9hZGVkLiBJZiB0aGUgaW1hZ2UgaXMgYWxyZWFkeSBsb2FkZWQsIHRoZSBjYWxsYmFja1xuICAgKiBpcyBjYWxsZWQgaW1tZWRpYXRlbHksIGVsc2UgaXQgaXMgY2FsbGVkIG9uY2UgbG9hZGluZyBoYXMgZmluaXNoZWQuIENhbGxpbmcgdGhpcyBtZXRob2QgbXVsdGlwbGUgdGltZXMgZm9yIHRoZVxuICAgKiBzYW1lIGltYWdlIHdoaWxlIGl0IGlzIGxvYWRpbmcgY2FsbHMgb25seSBsZXQgY2FsbGJhY2sgcGFzc2VkIGludG8gdGhlIGxhc3QgY2FsbC5cbiAgICogQHBhcmFtIHVybCBUaGUgdXJsIHRvIHRoZSBpbWFnZSB0byBsb2FkXG4gICAqIEBwYXJhbSBsb2FkZWRDYWxsYmFjayBUaGUgY2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgaW1hZ2UgaXMgbG9hZGVkXG4gICAqL1xuICBsb2FkKHVybDogc3RyaW5nLCBsb2FkZWRDYWxsYmFjazogSW1hZ2VMb2FkZWRDYWxsYmFjayk6IHZvaWQge1xuICAgIGlmICghdGhpcy5zdGF0ZVt1cmxdKSB7XG4gICAgICAvLyBXaGVuIHRoZSBpbWFnZSB3YXMgbmV2ZXIgYXR0ZW1wdGVkIHRvIGJlIGxvYWRlZCBiZWZvcmUsIHdlIGNyZWF0ZSBhIHN0YXRlIGFuZCBzdG9yZSBpdCBpbiB0aGUgc3RhdGUgbWFwXG4gICAgICAvLyBmb3IgbGF0ZXIgdXNlIHdoZW4gdGhlIHNhbWUgaW1hZ2UgaXMgcmVxdWVzdGVkIHRvIGJlIGxvYWRlZCBhZ2Fpbi5cbiAgICAgIGxldCBzdGF0ZTogSW1hZ2VMb2FkZXJTdGF0ZSA9IHtcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIGltYWdlOiBuZXcgRE9NKCdpbWcnLCB7fSksXG4gICAgICAgIGxvYWRlZENhbGxiYWNrOiBsb2FkZWRDYWxsYmFjayxcbiAgICAgICAgbG9hZGVkOiBmYWxzZSxcbiAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgIGhlaWdodDogMCxcbiAgICAgIH07XG4gICAgICB0aGlzLnN0YXRlW3VybF0gPSBzdGF0ZTtcblxuICAgICAgLy8gTGlzdGVuIHRvIHRoZSBsb2FkIGV2ZW50LCB1cGRhdGUgdGhlIHN0YXRlIGFuZCBjYWxsIHRoZSBjYWxsYmFjayBvbmNlIHRoZSBpbWFnZSBpcyBsb2FkZWRcbiAgICAgIHN0YXRlLmltYWdlLm9uKCdsb2FkJywgKGUpID0+IHtcbiAgICAgICAgc3RhdGUubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgc3RhdGUud2lkdGggPSAoPEhUTUxJbWFnZUVsZW1lbnQ+c3RhdGUuaW1hZ2UuZ2V0KDApKS53aWR0aDtcbiAgICAgICAgc3RhdGUuaGVpZ2h0ID0gKDxIVE1MSW1hZ2VFbGVtZW50PnN0YXRlLmltYWdlLmdldCgwKSkuaGVpZ2h0O1xuXG4gICAgICAgIHRoaXMuY2FsbExvYWRlZENhbGxiYWNrKHN0YXRlKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBTZXQgdGhlIGltYWdlIFVSTCB0byBzdGFydCB0aGUgbG9hZGluZ1xuICAgICAgc3RhdGUuaW1hZ2UuYXR0cignc3JjJywgc3RhdGUudXJsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gV2UgaGF2ZSBhIHN0YXRlIGZvciB0aGUgcmVxdWVzdGVkIGltYWdlLCBzbyBpdCBpcyBlaXRoZXIgYWxyZWFkeSBsb2FkZWQgb3IgY3VycmVudGx5IGxvYWRpbmdcbiAgICAgIGxldCBzdGF0ZSA9IHRoaXMuc3RhdGVbdXJsXTtcblxuICAgICAgLy8gV2Ugb3ZlcndyaXRlIHRoZSBjYWxsYmFjayB0byBtYWtlIHN1cmUgdGhhdCBvbmx5IHRoZSBjYWxsYmFjayBvZiB0aGUgbGF0ZXN0IGNhbGwgZ2V0cyBleGVjdXRlZC5cbiAgICAgIC8vIEVhcmxpZXIgY2FsbGJhY2tzIGJlY29tZSBpbnZhbGlkIG9uY2UgYSBuZXcgbG9hZCBjYWxsIGFycml2ZXMsIGFuZCB0aGV5IGFyZSBub3QgY2FsbGVkIGFzIGxvbmcgYXMgdGhlIGltYWdlXG4gICAgICAvLyBpcyBub3QgbG9hZGVkLlxuICAgICAgc3RhdGUubG9hZGVkQ2FsbGJhY2sgPSBsb2FkZWRDYWxsYmFjaztcblxuICAgICAgLy8gV2hlbiB0aGUgaW1hZ2UgaXMgYWxyZWFkeSBsb2FkZWQsIHdlIGRpcmVjdGx5IGV4ZWN1dGUgdGhlIGNhbGxiYWNrIGluc3RlYWQgb2Ygd2FpdGluZyBmb3IgdGhlIGxvYWQgZXZlbnRcbiAgICAgIGlmIChzdGF0ZS5sb2FkZWQpIHtcbiAgICAgICAgdGhpcy5jYWxsTG9hZGVkQ2FsbGJhY2soc3RhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2FsbExvYWRlZENhbGxiYWNrKHN0YXRlOiBJbWFnZUxvYWRlclN0YXRlKTogdm9pZCB7XG4gICAgc3RhdGUubG9hZGVkQ2FsbGJhY2soc3RhdGUudXJsLCBzdGF0ZS53aWR0aCwgc3RhdGUuaGVpZ2h0KTtcbiAgfVxufVxuIiwiaW1wb3J0IHZvY2FidWxhcnlEZSBmcm9tICcuL2xhbmd1YWdlcy9kZS5qc29uJztcbmltcG9ydCB2b2NhYnVsYXJ5RW4gZnJvbSAnLi9sYW5ndWFnZXMvZW4uanNvbic7XG5pbXBvcnQgdm9jYWJ1bGFyeUVzIGZyb20gJy4vbGFuZ3VhZ2VzL2VzLmpzb24nO1xuaW1wb3J0IHZvY2FidWxhcnlObCBmcm9tICcuL2xhbmd1YWdlcy9ubC5qc29uJztcblxuaW1wb3J0IHsgTG9jYWxpemF0aW9uQ29uZmlnIH0gZnJvbSAnLi4vdWltYW5hZ2VyLmpzJztcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRWb2NhYnVsYXJpZXM6IFZvY2FidWxhcmllcyA9IHtcbiAgJ2VuJzogdm9jYWJ1bGFyeUVuLFxuICAnZGUnOiB2b2NhYnVsYXJ5RGUsXG4gICdlcyc6IHZvY2FidWxhcnlFcyxcbiAgJ25sJzogdm9jYWJ1bGFyeU5sLFxufTtcblxuY29uc3QgZGVmYXVsdExvY2FsaXphdGlvbkNvbmZpZzogTG9jYWxpemF0aW9uQ29uZmlnID0ge1xuICBsYW5ndWFnZTogJ2VuJyxcbiAgdm9jYWJ1bGFyaWVzOiBkZWZhdWx0Vm9jYWJ1bGFyaWVzLFxufTtcblxuLyoqXG4gKiBAY2F0ZWdvcnkgTG9jYWxpemF0aW9uXG4gKi9cbmV4cG9ydCB0eXBlIExvY2FsaXplciA9ICgpID0+IHN0cmluZztcbi8qKlxuICogQGNhdGVnb3J5IExvY2FsaXphdGlvblxuICovXG5leHBvcnQgdHlwZSBMb2NhbGl6YWJsZVRleHQgPSBzdHJpbmcgfCBMb2NhbGl6ZXI7XG5cbi8qKlxuICogQGNhdGVnb3J5IExvY2FsaXphdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFZvY2FidWxhcnkge1xuICAnc2V0dGluZ3MudmlkZW8ucXVhbGl0eSc6IHN0cmluZztcbiAgJ3NldHRpbmdzLmF1ZGlvLnF1YWxpdHknOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5hdWRpby50cmFjayc6IHN0cmluZztcbiAgJ3NldHRpbmdzLmF1ZGlvLm11dGUnOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5hdWRpby52b2x1bWUnOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5zdWJ0aXRsZXMnOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5jb2xvcic6IHN0cmluZztcbiAgJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250Lm9wYWNpdHknOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5zdWJ0aXRsZXMuYmFja2dyb3VuZC5jb2xvcic6IHN0cmluZztcbiAgJ3NldHRpbmdzLnN1YnRpdGxlcy5iYWNrZ3JvdW5kLm9wYWNpdHknOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5zaXplJzogc3RyaW5nO1xuICAnc2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2UnOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZS5yYWlzZWQnOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZS5kZXByZXNzZWQnOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZS51bmlmb3JtJzogc3RyaW5nO1xuICAnc2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2UuZHJvcHNoYWRvd2VkJzogc3RyaW5nO1xuICAnc2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5Jzogc3RyaW5nO1xuICAnc2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5Lm1vbm9zcGFjZWRzZXJpZic6IHN0cmluZztcbiAgJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5wcm9wb3J0aW9uYWxzZXJpZic6IHN0cmluZztcbiAgJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5tb25vc3BhY2Vkc2Fuc3NlcmlmJzogc3RyaW5nO1xuICAnc2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LnByb3BvcnRpb25hbHNhbnNzZXJpZic6IHN0cmluZztcbiAgJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5jYXN1YWwnOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkuY3Vyc2l2ZSc6IHN0cmluZztcbiAgJ3NldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5zbWFsbGNhcGl0YWwnOiBzdHJpbmc7XG4gICdzZXR0aW5ncy5zdWJ0aXRsZXMud2luZG93LmNvbG9yJzogc3RyaW5nO1xuICAnc2V0dGluZ3Muc3VidGl0bGVzLndpbmRvdy5vcGFjaXR5Jzogc3RyaW5nO1xuICAncGxheSc6IHN0cmluZztcbiAgJ3NldHRpbmdzLnRpbWUuaG91cnMnOiBzdHJpbmc7XG4gICdzZXR0aW5ncy50aW1lLm1pbnV0ZXMnOiBzdHJpbmc7XG4gICdzZXR0aW5ncy50aW1lLnNlY29uZHMnOiBzdHJpbmc7XG4gICdjb2xvcnMud2hpdGUnOiBzdHJpbmc7XG4gICdjb2xvcnMuYmxhY2snOiBzdHJpbmc7XG4gICdjb2xvcnMucmVkJzogc3RyaW5nO1xuICAnY29sb3JzLmdyZWVuJzogc3RyaW5nO1xuICAnY29sb3JzLmJsdWUnOiBzdHJpbmc7XG4gICdjb2xvcnMuY3lhbic6IHN0cmluZztcbiAgJ2NvbG9ycy55ZWxsb3cnOiBzdHJpbmc7XG4gICdjb2xvcnMubWFnZW50YSc6IHN0cmluZztcbiAgJ3BlcmNlbnQnOiBzdHJpbmc7XG4gICdzZXR0aW5ncyc6IHN0cmluZztcbiAgJ2Fkcy5yZW1haW5pbmdUaW1lJzogc3RyaW5nO1xuICAncGljdHVyZUluUGljdHVyZSc6IHN0cmluZztcbiAgJ2FwcGxlQWlycGxheSc6IHN0cmluZztcbiAgJ2dvb2dsZUNhc3QnOiBzdHJpbmc7XG4gICd2cic6IHN0cmluZztcbiAgJ29mZic6IHN0cmluZztcbiAgJ2F1dG8nOiBzdHJpbmc7XG4gICdiYWNrJzogc3RyaW5nO1xuICAncmVzZXQnOiBzdHJpbmc7XG4gICdyZXBsYXknOiBzdHJpbmc7XG4gICdub3JtYWwnOiBzdHJpbmc7XG4gICdkZWZhdWx0Jzogc3RyaW5nO1xuICAnb3Blbic6IHN0cmluZztcbiAgJ2Nsb3NlJzogc3RyaW5nO1xuICAnZnVsbHNjcmVlbic6IHN0cmluZztcbiAgJ3NwZWVkJzogc3RyaW5nO1xuICAncGxheVBhdXNlJzogc3RyaW5nO1xuICAnbGl2ZSc6IHN0cmluZztcbiAgJ3N1YnRpdGxlLmV4YW1wbGUnOiBzdHJpbmc7XG4gICdzdWJ0aXRsZS5zZWxlY3QnOiBzdHJpbmc7XG4gICdwbGF5aW5nT24nOiBzdHJpbmc7XG4gICdjb25uZWN0aW5nVG8nOiBzdHJpbmc7XG4gICd3YXRlcm1hcmtMaW5rJzogc3RyaW5nO1xuICAnY29udHJvbEJhcic6IHN0cmluZztcbiAgJ3BsYXllcic6IHN0cmluZztcbiAgJ3NlZWtCYXInOiBzdHJpbmc7XG4gICdzZWVrQmFyLnZhbHVlJzogc3RyaW5nO1xuICAnc2Vla0Jhci50aW1lc2hpZnQnOiBzdHJpbmc7XG4gICdzZWVrQmFyLmR1cmF0aW9uVGV4dCc6IHN0cmluZztcbiAgJ2Vjb01vZGUnOiBzdHJpbmc7XG4gICdlY29Nb2RlLnRpdGxlJzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBjYXRlZ29yeSBMb2NhbGl6YXRpb25cbiAqL1xuZXhwb3J0IHR5cGUgQ3VzdG9tVm9jYWJ1bGFyeTxWPiA9IFYgJiBQYXJ0aWFsPFZvY2FidWxhcnk+O1xuXG4vKipcbiAqIEBjYXRlZ29yeSBMb2NhbGl6YXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBWb2NhYnVsYXJpZXMge1xuICBba2V5OiBzdHJpbmddOiBDdXN0b21Wb2NhYnVsYXJ5PFJlY29yZDxzdHJpbmcsIHN0cmluZz4+O1xufVxuXG4vKipcbiAqIEBjYXRlZ29yeSBMb2NhbGl6YXRpb25cbiAqL1xuZXhwb3J0IGNsYXNzIEkxOG4ge1xuICBwcml2YXRlIGxhbmd1YWdlOiBzdHJpbmc7XG4gIHByaXZhdGUgdm9jYWJ1bGFyeTogQ3VzdG9tVm9jYWJ1bGFyeTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PjtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IExvY2FsaXphdGlvbkNvbmZpZykge1xuICAgIHRoaXMuc2V0Q29uZmlnKGNvbmZpZyk7XG4gIH1cblxuICBwdWJsaWMgc2V0Q29uZmlnKGNvbmZpZzogTG9jYWxpemF0aW9uQ29uZmlnKSB7XG4gICAgY29uc3QgbWVyZ2VkQ29uZmlnID0geyAuLi5kZWZhdWx0TG9jYWxpemF0aW9uQ29uZmlnLCAuLi5jb25maWcgfTtcbiAgICBjb25zdCBkZXRlY3RCcm93c2VyTGFuZ3VhZ2UgPSBtZXJnZWRDb25maWcubGFuZ3VhZ2UgPT09ICdhdXRvJztcbiAgICBjb25zdCB2b2NhYnVsYXJpZXMgPSB0aGlzLm1lcmdlVm9jYWJ1bGFyaWVzV2l0aERlZmF1bHRWb2NhYnVsYXJpZXMobWVyZ2VkQ29uZmlnLnZvY2FidWxhcmllcyk7XG4gICAgdGhpcy5pbml0aWFsaXplTGFuZ3VhZ2UobWVyZ2VkQ29uZmlnLmxhbmd1YWdlLCBkZXRlY3RCcm93c2VyTGFuZ3VhZ2UsIHZvY2FidWxhcmllcyk7XG4gICAgdGhpcy5pbml0aWFsaXplVm9jYWJ1bGFyeSh2b2NhYnVsYXJpZXMpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgY29udGFpbnNMYW5ndWFnZSh2b2NhYnVsYXJpZXM6IFZvY2FidWxhcmllcywgbGFuZ3VhZ2U6IHN0cmluZykge1xuICAgIHJldHVybiB2b2NhYnVsYXJpZXMuaGFzT3duUHJvcGVydHkobGFuZ3VhZ2UpO1xuICB9XG5cbiAgcHJpdmF0ZSBtZXJnZVZvY2FidWxhcmllc1dpdGhEZWZhdWx0Vm9jYWJ1bGFyaWVzKHZvY2FidWxhcmllczogVm9jYWJ1bGFyaWVzID0ge30pIHtcbiAgICBjb25zdCByYXdWb2NhYnVsYXJpZXM6IFZvY2FidWxhcmllcyA9IHsgLi4uZGVmYXVsdFZvY2FidWxhcmllcywgLi4udm9jYWJ1bGFyaWVzIH07XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHJhd1ZvY2FidWxhcmllcykucmVkdWNlKChtZXJnZWRWb2NhYnVsYXJpZXMsIGxhbmd1YWdlKSA9PiB7XG4gICAgICBsZXQgdm9jYWJ1bGFyeSA9IHJhd1ZvY2FidWxhcmllc1tsYW5ndWFnZV07XG4gICAgICBpZiAoSTE4bi5jb250YWluc0xhbmd1YWdlKGRlZmF1bHRWb2NhYnVsYXJpZXMsIGxhbmd1YWdlKSAmJiBJMThuLmNvbnRhaW5zTGFuZ3VhZ2Uodm9jYWJ1bGFyaWVzLCBsYW5ndWFnZSkpIHtcbiAgICAgICAgdm9jYWJ1bGFyeSA9IHsgLi4uZGVmYXVsdFZvY2FidWxhcmllc1tsYW5ndWFnZV0sIC4uLnZvY2FidWxhcmllc1tsYW5ndWFnZV0gfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IC4uLm1lcmdlZFZvY2FidWxhcmllcywgW2xhbmd1YWdlXTogdm9jYWJ1bGFyeSB9O1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdGlhbGl6ZUxhbmd1YWdlKFxuICAgIGxhbmd1YWdlOiBzdHJpbmcsXG4gICAgYnJvd3Nlckxhbmd1YWdlRGV0ZWN0aW9uRW5hYmxlZDogYm9vbGVhbixcbiAgICB2b2NhYnVsYXJpZXM6IFZvY2FidWxhcmllcyxcbiAgKSB7XG4gICAgaWYgKGJyb3dzZXJMYW5ndWFnZURldGVjdGlvbkVuYWJsZWQpIHtcbiAgICAgIGNvbnN0IHVzZXJMYW5ndWFnZSA9IHdpbmRvdy5uYXZpZ2F0b3IubGFuZ3VhZ2U7XG5cbiAgICAgIGlmIChJMThuLmNvbnRhaW5zTGFuZ3VhZ2Uodm9jYWJ1bGFyaWVzLCB1c2VyTGFuZ3VhZ2UpKSB7XG4gICAgICAgIHRoaXMubGFuZ3VhZ2UgPSB1c2VyTGFuZ3VhZ2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNob3J0ZW5lZFVzZXJMYW5ndWFnZSA9IHVzZXJMYW5ndWFnZS5zbGljZSgwLCAyKTtcbiAgICAgIGlmIChJMThuLmNvbnRhaW5zTGFuZ3VhZ2Uodm9jYWJ1bGFyaWVzLCBzaG9ydGVuZWRVc2VyTGFuZ3VhZ2UpKSB7XG4gICAgICAgIHRoaXMubGFuZ3VhZ2UgPSBzaG9ydGVuZWRVc2VyTGFuZ3VhZ2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxhbmd1YWdlID0gbGFuZ3VhZ2U7XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemVWb2NhYnVsYXJ5KHZvY2FidWxhcmllczogVm9jYWJ1bGFyaWVzKSB7XG4gICAgdGhpcy52b2NhYnVsYXJ5ID0gWydlbicsIHRoaXMubGFuZ3VhZ2VdXG4gICAgICAucmVkdWNlKCh2b2NhYiwgbGFuZykgPT4gKHsgLi4udm9jYWIsIC4uLih2b2NhYnVsYXJpZXNbbGFuZ10gfHwge30pIH0pLCB7fSk7XG4gIH1cblxuICBwcml2YXRlIHJlcGxhY2VWYXJpYWJsZVdpdGhQbGFjZWhvbGRlcklmRXhpc3RzKHRleHQ6IHN0cmluZywgY29uZmlnOiBhbnkpIHtcbiAgICBjb25zdCBtYXRjaGVzID0gdGV4dC5tYXRjaChuZXcgUmVnRXhwKCd7W2EtekEtWjAtOV0rfScsICdnJykpO1xuICAgIGlmIChtYXRjaGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoZXNcbiAgICAgIC5tYXAoKG06IHN0cmluZykgPT4gKHsgbWF0Y2g6IG0sIGtleTogbS5zbGljZSgxLCAtMSkgfSkpXG4gICAgICAucmVkdWNlKChzdHIsIHsga2V5LCBtYXRjaCB9KSA9PiBjb25maWcuaGFzT3duUHJvcGVydHkoa2V5KSA/IHN0ci5yZXBsYWNlKG1hdGNoLCBjb25maWdba2V5XSkgOiBzdHIsIHRleHQpO1xuICB9XG5cbiAgcHVibGljIGdldExvY2FsaXplcjxWIGV4dGVuZHMgQ3VzdG9tVm9jYWJ1bGFyeTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PiA9IEN1c3RvbVZvY2FidWxhcnk8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4+KFxuICAgIGtleToga2V5b2YgVixcbiAgICBjb25maWc/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBudW1iZXI+LFxuICApOiBMb2NhbGl6ZXIge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoa2V5ID09IG51bGwpIHsgLy8gYmVjYXVzZSBzb21ldGltZXMgd2UgY2FsbCB0b0RvbUVsZW1lbnQoKSB3aXRob3V0IGNvbmZpZ3VyaW5nIHRoZSBjb21wb25lbnQgb3Igc2V0dGluZyB0ZXh0Li4uXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBsZXQgdm9jYWJ1bGFyeVN0cmluZyA9IHRoaXMudm9jYWJ1bGFyeVtrZXkgYXMgc3RyaW5nXTtcblxuICAgICAgaWYgKHZvY2FidWxhcnlTdHJpbmcgPT0gbnVsbCkge1xuICAgICAgICB2b2NhYnVsYXJ5U3RyaW5nID0ga2V5IGFzIHN0cmluZztcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgIHZvY2FidWxhcnlTdHJpbmcgPSB0aGlzLnJlcGxhY2VWYXJpYWJsZVdpdGhQbGFjZWhvbGRlcklmRXhpc3RzKHZvY2FidWxhcnlTdHJpbmcsIGNvbmZpZyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2b2NhYnVsYXJ5U3RyaW5nO1xuICAgIH07XG4gIH1cblxuICBwdWJsaWMgcGVyZm9ybUxvY2FsaXphdGlvbih0ZXh0OiBMb2NhbGl6YWJsZVRleHQpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRleHQgPT09ICdmdW5jdGlvbicgPyB0ZXh0KCkgOiB0ZXh0O1xuICB9XG59XG5cbi8qKlxuICogQGNhdGVnb3J5IExvY2FsaXphdGlvblxuICovXG5leHBvcnQgY29uc3QgaTE4biA9IG5ldyBJMThuKGRlZmF1bHRMb2NhbGl6YXRpb25Db25maWcpO1xuIiwibW9kdWxlLmV4cG9ydHM9e1xuICBcInNldHRpbmdzLnZpZGVvLnF1YWxpdHlcIjogXCJWaWRlb3F1YWxpdMOkdFwiLFxuICBcInNldHRpbmdzLmF1ZGlvLnF1YWxpdHlcIjogXCJBdWRpb3F1YWxpdMOkdFwiLFxuICBcInNldHRpbmdzLmF1ZGlvLnRyYWNrXCI6IFwiQXVkaW9zcHVyXCIsXG4gIFwic3BlZWRcIjogXCJHZXNjaHdpbmRpZ2tlaXRcIixcbiAgXCJwbGF5XCI6IFwiQWJzcGllbGVuXCIsXG4gIFwicGF1c2VcIjogXCJQYXVzZVwiLFxuICBcInBsYXlQYXVzZVwiOiBcIkFic3BpZWxlbi9QYXVzZVwiLFxuICBcIm9wZW5cIjogXCLDtmZmbmVuXCIsXG4gIFwiY2xvc2VcIjogXCJTY2hsaWXDn2VuXCIsXG4gIFwic2V0dGluZ3MuYXVkaW8ubXV0ZVwiOiBcIlN0dW1tc2NoYWx0dW5nXCIsXG4gIFwic2V0dGluZ3MuYXVkaW8udm9sdW1lXCI6IFwiTGF1dHN0w6Rya2VcIixcbiAgXCJwaWN0dXJlSW5QaWN0dXJlXCI6IFwiQmlsZCBpbSBCaWxkXCIsXG4gIFwiYXBwbGVBaXJwbGF5XCI6IFwiQXBwbGUgQWlyUGxheVwiLFxuICBcImdvb2dsZUNhc3RcIjogXCJHb29nbGUgQ2FzdFwiLFxuICBcInZyXCI6IFwiVlJcIixcbiAgXCJzZXR0aW5nc1wiOiBcIkVpbnN0ZWxsdW5nZW5cIixcbiAgXCJmdWxsc2NyZWVuXCI6IFwiVm9sbGJpbGRcIixcbiAgXCJvZmZcIjogXCJhdXNcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXNcIjogXCJVbnRlcnRpdGVsXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuc2l6ZVwiOiBcIkdyw7bDn2VcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHlcIjogXCJTY2hyaWZ0YXJ0XCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuY29sb3JcIjogXCJGYXJiZVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250Lm9wYWNpdHlcIjogXCJEZWNra3JhZnRcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZVwiOiBcIlLDpG5kZXJcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuYmFja2dyb3VuZC5jb2xvclwiOiBcIkhpbnRlcmdydW5kZmFyYmVcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuYmFja2dyb3VuZC5vcGFjaXR5XCI6IFwiSGludGVyZ3J1bmRkZWNra3JhZnRcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMud2luZG93LmNvbG9yXCI6IFwiSGludGVyZ3J1bmRmYXJiZVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy53aW5kb3cub3BhY2l0eVwiOiBcIkhpbnRlcmdydW5kZGVja2tyYWZ0XCIsXG4gIFwic2V0dGluZ3MudGltZS5ob3Vyc1wiOiBcIlN0dW5kZW5cIixcbiAgXCJzZXR0aW5ncy50aW1lLm1pbnV0ZXNcIjogXCJNaW51dGVuXCIsXG4gIFwic2V0dGluZ3MudGltZS5zZWNvbmRzXCI6IFwiU2VrdW5kZW5cIixcbiAgXCJiYWNrXCI6IFwiWnVyw7xja1wiLFxuICBcInJlc2V0XCI6IFwiWnVyw7xja3NldHplblwiLFxuICBcInJlcGxheVwiOiBcIldpZWRlcmhvbGVuXCIsXG4gIFwiYWRzLnJlbWFpbmluZ1RpbWVcIjogXCJEaWVzZSBBbnplaWdlIGVuZGV0IGluIHtyZW1haW5pbmdUaW1lfSBTZWt1bmRlblwiLFxuICBcImRlZmF1bHRcIjogXCJzdGFuZGFyZFwiLFxuICBcImNvbG9ycy53aGl0ZVwiOiBcIndlacOfXCIsXG4gIFwiY29sb3JzLmJsYWNrXCI6IFwic2Nod2FyelwiLFxuICBcImNvbG9ycy5yZWRcIjogXCJyb3RcIixcbiAgXCJjb2xvcnMuZ3JlZW5cIjogXCJncsO8blwiLFxuICBcImNvbG9ycy5ibHVlXCI6IFwiYmxhdVwiLFxuICBcImNvbG9ycy55ZWxsb3dcIjogXCJnZWxiXCIsXG4gIFwic3VidGl0bGUuZXhhbXBsZVwiOiBcIkJlaXNwaWVsIFVudGVydGl0ZWxcIixcbiAgXCJzdWJ0aXRsZS5zZWxlY3RcIjogXCJVbnRlcnRpdGVsIGF1c3fDpGhsZW5cIixcbiAgXCJwbGF5aW5nT25cIjogXCJTcGllbHQgYXVmIDxzdHJvbmc+e2Nhc3REZXZpY2VOYW1lfTwvc3Ryb25nPlwiLFxuICBcImNvbm5lY3RpbmdUb1wiOiBcIlZlcmJpbmR1bmcgbWl0IDxzdHJvbmc+e2Nhc3REZXZpY2VOYW1lfTwvc3Ryb25nPiB3aXJkIGhlcmdlc3RlbGx0Li4uXCIsXG4gIFwid2F0ZXJtYXJrTGlua1wiOiBcIkxpbmsgenVtIEhvbWVwYWdlXCIsXG4gIFwiY29udHJvbEJhclwiOiBcIlZpZGVvcGxheWVyIEtvbnRyb2xsZW5cIixcbiAgXCJwbGF5ZXJcIjogXCJWaWRlbyBwbGF5ZXJcIixcbiAgXCJzZWVrQmFyXCI6IFwiVmlkZW8tVGltZWxpbmVcIixcbiAgXCJzZWVrQmFyLnZhbHVlXCI6IFwiV2VydFwiLFxuICBcInNlZWtCYXIudGltZXNoaWZ0XCI6IFwiVGltZXNoaWZ0XCIsXG4gIFwic2Vla0Jhci5kdXJhdGlvblRleHRcIjogXCJhdXNcIixcbiAgXCJxdWlja3NlZWsuZm9yd2FyZFwiOiBcIlZvclwiLFxuICBcInF1aWNrc2Vlay5yZXdpbmRcIjogXCJadXLDvGNrXCIsXG4gIFwiZWNvTW9kZVwiOiBcImVjb01vZGVcIixcbiAgXCJlY29Nb2RlLnRpdGxlXCI6XCJFY28gTW9kZVwiXG59XG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwic2V0dGluZ3MudmlkZW8ucXVhbGl0eVwiOiBcIlZpZGVvIFF1YWxpdHlcIixcbiAgXCJzZXR0aW5ncy5hdWRpby5xdWFsaXR5XCI6IFwiQXVkaW8gUXVhbGl0eVwiLFxuICBcInNldHRpbmdzLmF1ZGlvLnRyYWNrXCI6IFwiQXVkaW8gVHJhY2tcIixcbiAgXCJzZXR0aW5ncy5hdWRpby5tdXRlXCIgOiBcIk11dGVcIixcbiAgXCJzZXR0aW5ncy5hdWRpby52b2x1bWVcIiA6IFwiVm9sdW1lXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLndpbmRvdy5jb2xvclwiIDogXCJXaW5kb3cgY29sb3JcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMud2luZG93Lm9wYWNpdHlcIiA6IFwiV2luZG93IG9wYWNpdHlcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXNcIiA6IFwiU3VidGl0bGVzXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuY29sb3JcIiA6IFwiRm9udCBjb2xvclwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250Lm9wYWNpdHlcIiA6IFwiRm9udCBvcGFjaXR5XCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmJhY2tncm91bmQuY29sb3JcIiA6IFwiQmFja2dyb3VuZCBjb2xvclwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5iYWNrZ3JvdW5kLm9wYWNpdHlcIjogXCJCYWNrZ3JvdW5kIG9wYWNpdHlcIixcbiAgXCJjb2xvcnMud2hpdGVcIjogXCJ3aGl0ZVwiLFxuICBcImNvbG9ycy5ibGFja1wiOiBcImJsYWNrXCIsXG4gIFwiY29sb3JzLnJlZFwiOiBcInJlZFwiLFxuICBcImNvbG9ycy5ncmVlblwiOiBcImdyZWVuXCIsXG4gIFwiY29sb3JzLmJsdWVcIjogXCJibHVlXCIsXG4gIFwiY29sb3JzLmN5YW5cIjogXCJjeWFuXCIsXG4gIFwiY29sb3JzLnllbGxvd1wiOiBcInllbGxvd1wiLFxuICBcImNvbG9ycy5tYWdlbnRhXCI6IFwibWFnZW50YVwiLFxuICBcInBlcmNlbnRcIjogXCJ7dmFsdWV9JVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LnNpemVcIjogXCJGb250IHNpemVcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZVwiOiBcIkNoYXJhY3RlciBlZGdlXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2UucmFpc2VkXCI6IFwicmFpc2VkXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2UuZGVwcmVzc2VkXCI6IFwiZGVwcmVzc2VkXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2UudW5pZm9ybVwiOiBcInVuaWZvcm1cIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZS5kcm9wc2hhZG93ZWRcIjogXCJkcm9wIHNoYWRvd2VkXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5XCI6IFwiRm9udCBmYW1pbHlcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkubW9ub3NwYWNlZHNlcmlmXCI6IFwibW9ub3NwYWNlZCBzZXJpZlwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5wcm9wb3J0aW9uYWxzZXJpZlwiOiBcInByb3BvcnRpb25hbCBzZXJpZlwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5tb25vc3BhY2Vkc2Fuc3NlcmlmXCI6IFwibW9ub3NwYWNlZCBzYW5zIHNlcmlmXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LnByb3BvcnRpb25hbHNhbnNzZXJpZlwiOiBcInByb3BvcnRpb25hbCBzYW5zIHNlcmlmXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LmNhc3VhbFwiOiBcImNhc3VhbFwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5jdXJzaXZlXCI6IFwiY3Vyc2l2ZVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5zbWFsbGNhcGl0YWxcIjogXCJzbWFsbCBjYXBpdGFsXCIsXG4gIFwic2V0dGluZ3MudGltZS5ob3Vyc1wiOiBcIkhvdXJzXCIsXG4gIFwic2V0dGluZ3MudGltZS5taW51dGVzXCI6IFwiTWludXRlc1wiLFxuICBcInNldHRpbmdzLnRpbWUuc2Vjb25kc1wiOiBcIlNlY29uZHNcIixcbiAgXCJhZHMucmVtYWluaW5nVGltZVwiOiBcIlRoaXMgYWQgd2lsbCBlbmQgaW4ge3JlbWFpbmluZ1RpbWV9IHNlY29uZHMuXCIsXG4gIFwic2V0dGluZ3NcIjogXCJTZXR0aW5nc1wiLFxuICBcImZ1bGxzY3JlZW5cIiA6IFwiRnVsbHNjcmVlblwiLFxuICBcInNwZWVkXCI6IFwiU3BlZWRcIixcbiAgXCJwbGF5UGF1c2VcIiA6IFwiUGxheS9QYXVzZVwiLFxuICBcInBsYXlcIjogXCJQbGF5XCIsXG4gIFwicGF1c2VcIjogXCJQYXVzZVwiLFxuICBcIm9wZW5cIjogXCJvcGVuXCIsXG4gIFwiY2xvc2VcIjogXCJDbG9zZVwiLFxuICBcInBpY3R1cmVJblBpY3R1cmVcIjogXCJQaWN0dXJlLWluLVBpY3R1cmVcIixcbiAgXCJhcHBsZUFpcnBsYXlcIiA6IFwiQXBwbGUgQWlyUGxheVwiLFxuICBcImdvb2dsZUNhc3RcIjogXCJHb29nbGUgQ2FzdFwiLFxuICBcInZyXCIgOiBcIlZSXCIsXG4gIFwib2ZmXCI6IFwib2ZmXCIsXG4gIFwiYXV0b1wiOiBcImF1dG9cIixcbiAgXCJlY29Nb2RlXCI6IFwiZWNvTW9kZVwiLFxuICBcImVjb01vZGUudGl0bGVcIjpcIkVjbyBNb2RlXCIsXG4gIFwiYmFja1wiIDogXCJCYWNrXCIsXG4gIFwicmVzZXRcIjogXCJSZXNldFwiLFxuICBcInJlcGxheVwiOiBcIlJlcGxheVwiLFxuICBcIm5vcm1hbFwiOiBcIm5vcm1hbFwiLFxuICBcImRlZmF1bHRcIjogXCJkZWZhdWx0XCIsXG4gIFwibGl2ZVwiOiBcIkxpdmVcIixcbiAgXCJzdWJ0aXRsZS5leGFtcGxlXCI6IFwiZXhhbXBsZSBzdWJ0aXRsZVwiLFxuICBcInN1YnRpdGxlLnNlbGVjdFwiOiBcIlNlbGVjdCBzdWJ0aXRsZVwiLFxuICBcInBsYXlpbmdPblwiOiBcIlBsYXlpbmcgb24gPHN0cm9uZz57Y2FzdERldmljZU5hbWV9PC9zdHJvbmc+XCIsXG4gIFwiY29ubmVjdGluZ1RvXCI6IFwiQ29ubmVjdGluZyB0byA8c3Ryb25nPntjYXN0RGV2aWNlTmFtZX08L3N0cm9uZz4uLi5cIixcbiAgXCJ3YXRlcm1hcmtMaW5rXCI6IFwiTGluayB0byBIb21lcGFnZVwiLFxuICBcImNvbnRyb2xCYXJcIjogXCJWaWRlbyBwbGF5ZXIgY29udHJvbHNcIixcbiAgXCJwbGF5ZXJcIjogXCJWaWRlbyBwbGF5ZXJcIixcbiAgXCJzZWVrQmFyXCI6IFwiVmlkZW8gdGltZWxpbmVcIixcbiAgXCJzZWVrQmFyLnZhbHVlXCI6IFwiVmFsdWVcIixcbiAgXCJzZWVrQmFyLnRpbWVzaGlmdFwiOiBcIlRpbWVzaGlmdFwiLFxuICBcInNlZWtCYXIuZHVyYXRpb25UZXh0XCI6IFwib3V0IG9mXCIsXG4gIFwicXVpY2tzZWVrLmZvcndhcmRcIjogXCJGYXN0IEZvcndhcmRcIixcbiAgXCJxdWlja3NlZWsucmV3aW5kXCI6IFwiUmV3aW5kXCJcbn1cbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJzZXR0aW5ncy52aWRlby5xdWFsaXR5XCI6IFwiQ2FsaWRhZCBkZSBWaWRlb1wiLFxuICBcInNldHRpbmdzLmF1ZGlvLnF1YWxpdHlcIjogXCJDYWxpZGFkIGRlIEF1ZGlvXCIsXG4gIFwic2V0dGluZ3MuYXVkaW8udHJhY2tcIjogXCJQaXN0YSBkZSBBdWRpb1wiLFxuICBcInNldHRpbmdzLmF1ZGlvLm11dGVcIiA6IFwiU2lsZW5jaW9cIixcbiAgXCJzZXR0aW5ncy5hdWRpby52b2x1bWVcIiA6IFwiVm9sdW1lblwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy53aW5kb3cuY29sb3JcIiA6IFwiY29sb3IgZGUgVmVudGFuYVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy53aW5kb3cub3BhY2l0eVwiIDogXCJvcGFjaWRhZCBkZSBWZW50YW5hXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzXCIgOiBcIlN1YnTDrXR1bG9zXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuY29sb3JcIiA6IFwiY29sb3IgZGUgRnVlbnRlXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQub3BhY2l0eVwiIDogXCJvcGFjaWRhZCBkZSBGdWVudGVcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuYmFja2dyb3VuZC5jb2xvclwiIDogXCJjb2xvciBkZSBGb25kb1wiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5iYWNrZ3JvdW5kLm9wYWNpdHlcIjogXCJvcGFjaWRhZCBkZSBGb25kb1wiLFxuICBcImNvbG9ycy53aGl0ZVwiOiBcImJsYW5jb1wiLFxuICBcImNvbG9ycy5ibGFja1wiOiBcIm5lZ3JvXCIsXG4gIFwiY29sb3JzLnJlZFwiOiBcInJvam9cIixcbiAgXCJjb2xvcnMuZ3JlZW5cIjogXCJ2ZXJkZVwiLFxuICBcImNvbG9ycy5ibHVlXCI6IFwiYXp1bFwiLFxuICBcImNvbG9ycy5jeWFuXCI6IFwiY2lhblwiLFxuICBcImNvbG9ycy55ZWxsb3dcIjogXCJhbWFyaWxsb1wiLFxuICBcImNvbG9ycy5tYWdlbnRhXCI6IFwibWFnZW50YVwiLFxuICBcInBlcmNlbnRcIjogXCJ7dmFsdWV9JVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LnNpemVcIjogXCJ0YW1hw7FvIGRlIEZ1ZW50ZVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5jaGFyYWN0ZXJFZGdlXCI6IFwiYm9yZGUgZGVsIENhcmFjdGVyXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2UucmFpc2VkXCI6IFwiYWx6YWRvXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2UuZGVwcmVzc2VkXCI6IFwiZGlzY3JldG9cIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZS51bmlmb3JtXCI6IFwidW5pZm9ybWVcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZS5kcm9wc2hhZG93ZWRcIjogXCJzb21icmVhZG9cIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHlcIjogXCJ0aXBvIGRlIEZ1ZW50ZVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5tb25vc3BhY2Vkc2VyaWZcIjogXCJtb25vc3BhY2VkIHNlcmlmXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LnByb3BvcnRpb25hbHNlcmlmXCI6IFwicHJvcG9ydGlvbmFsIHNlcmlmXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5Lm1vbm9zcGFjZWRzYW5zc2VyaWZcIjogXCJtb25vc3BhY2VkIHNhbnMgc2VyaWZcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkucHJvcG9ydGlvbmFsc2Fuc3NlcmlmXCI6IFwicHJvcG9ydGlvbmFsIHNhbnMgc2VyaWZcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkuY2FzdWFsXCI6IFwiY2FzdWFsXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LmN1cnNpdmVcIjogXCJjdXJzaXZhXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LnNtYWxsY2FwaXRhbFwiOiBcInNtYWxsIGNhcGl0YWxcIixcbiAgXCJzZXR0aW5ncy50aW1lLmhvdXJzXCI6IFwiSG9yYXNcIixcbiAgXCJzZXR0aW5ncy50aW1lLm1pbnV0ZXNcIjogXCJNaW51dG9zXCIsXG4gIFwic2V0dGluZ3MudGltZS5zZWNvbmRzXCI6IFwiU2VndW5kb3NcIixcbiAgXCJhZHMucmVtYWluaW5nVGltZVwiOiBcIkVzdGUgYW51bmNpbyBhY2FiYXLDoSBlbiB7cmVtYWluaW5nVGltZX0gc2VndW5kb3MuXCIsXG4gIFwic2V0dGluZ3NcIjogXCJDb25maWd1cmFjacOzblwiLFxuICBcImZ1bGxzY3JlZW5cIiA6IFwiUGFudGFsbGEgQ29tcGxldGFcIixcbiAgXCJzcGVlZFwiOiBcIlZlbG9jaWRhZFwiLFxuICBcInBsYXlQYXVzZVwiIDogXCJSZXByb2R1Y2lyL1BhdXNhXCIsXG4gIFwicGxheVwiOiBcIlJlcHJvZHVjaXJcIixcbiAgXCJwYXVzZVwiOiBcIlBhdXNhXCIsXG4gIFwib3BlblwiOiBcIkFicmlyXCIsXG4gIFwiY2xvc2VcIjogXCJDZXJyYXJcIixcbiAgXCJwaWN0dXJlSW5QaWN0dXJlXCI6IFwiSW1hZ2VuIGVuIEltYWdlblwiLFxuICBcImFwcGxlQWlycGxheVwiIDogXCJBcHBsZSBBaXJQbGF5XCIsXG4gIFwiZ29vZ2xlQ2FzdFwiOiBcIkdvb2dsZSBDYXN0XCIsXG4gIFwidnJcIiA6IFwiVlJcIixcbiAgXCJvZmZcIjogXCJvZmZcIixcbiAgXCJhdXRvXCI6IFwiYXV0b1wiLFxuICBcImVjb01vZGVcIjogXCJlY29Nb2RlXCIsXG4gIFwiZWNvTW9kZS50aXRsZVwiOiBcIkVjbyBNb2RlXCIsXG4gIFwiYmFja1wiIDogXCJBdHLDoXNcIixcbiAgXCJyZXNldFwiOiBcIlJlaW5pY2lhclwiLFxuICBcInJlcGxheVwiOiBcIlJlYm9iaW5hclwiLFxuICBcIm5vcm1hbFwiOiBcIm5vcm1hbFwiLFxuICBcImRlZmF1bHRcIjogXCJwcmVkZXRlcm1pbmFkb1wiLFxuICBcImxpdmVcIjogXCJEaXJlY3RvXCIsXG4gIFwic3VidGl0bGUuZXhhbXBsZVwiOiBcIkVqZW1wbG8gZGUgU3VidMOtdHVsb1wiLFxuICBcInN1YnRpdGxlLnNlbGVjdFwiOiBcIlNlbGVjY2lvbmFyIHN1YnTDrXR1bG9cIixcbiAgXCJwbGF5aW5nT25cIjogXCJSZXByb2R1Y2llbmRvIGVuIDxzdHJvbmc+e2Nhc3REZXZpY2VOYW1lfTwvc3Ryb25nPlwiLFxuICBcImNvbm5lY3RpbmdUb1wiOiBcIkNvbmVjdGFuZG8gYSA8c3Ryb25nPntjYXN0RGV2aWNlTmFtZX08L3N0cm9uZz4uLi5cIixcbiAgXCJ3YXRlcm1hcmtMaW5rXCI6IFwiRW5sYWNlIGFsIGluaWNpb1wiLFxuICBcImNvbnRyb2xCYXJcIjogXCJDb250cm9sZXMgZGVsIFJlcHJvZHVjdG9yXCIsXG4gIFwicGxheWVyXCI6IFwiUmVwcm9kdWN0b3IgZGUgVmlkZW9cIixcbiAgXCJzZWVrQmFyXCI6IFwiTMOtbmVhIGRlIFRpZW1wb1wiLFxuICBcInNlZWtCYXIudmFsdWVcIjogXCJwb3NpY2nDs25cIixcbiAgXCJzZWVrQmFyLnRpbWVzaGlmdFwiOiBcImNhbWJpbyBkZSBwb3NpY2nDs25cIixcbiAgXCJzZWVrQmFyLmR1cmF0aW9uVGV4dFwiOiBcImRlXCIsXG4gIFwicXVpY2tzZWVrLmZvcndhcmRcIjogXCJBZGVsYW50YXJcIixcbiAgXCJxdWlja3NlZWsucmV3aW5kXCI6IFwiUmVib2JpbmFyXCJcbn0iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwic2V0dGluZ3MudmlkZW8ucXVhbGl0eVwiOiBcIlZpZGVva3dhbGl0ZWl0XCIsXG4gIFwic2V0dGluZ3MuYXVkaW8ucXVhbGl0eVwiOiBcIkF1ZGlva3dhbGl0ZWl0XCIsXG4gIFwic2V0dGluZ3MuYXVkaW8udHJhY2tcIjogXCJBdWRpb3Nwb29yXCIsXG4gIFwic2V0dGluZ3MuYXVkaW8ubXV0ZVwiOiBcIkRlbXBlblwiLFxuICBcInNldHRpbmdzLmF1ZGlvLnZvbHVtZVwiOiBcIlZvbHVtZVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy53aW5kb3cuY29sb3JcIjogXCJWZW5zdGVya2xldXJcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMud2luZG93Lm9wYWNpdHlcIjogXCJWZW5zdGVyIGRvb3J6aWNodGlnaGVpZFwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlc1wiOiBcIk9uZGVydGl0ZWxpbmdcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5jb2xvclwiOiBcIkxldHRlcnR5cGUga2xldXJcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5vcGFjaXR5XCI6IFwiTGV0dGVydHlwZSBkb29yemljaHRpZ2hlaWRcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuYmFja2dyb3VuZC5jb2xvclwiOiBcIkFjaHRlcmdyb25ka2xldXJcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuYmFja2dyb3VuZC5vcGFjaXR5XCI6IFwiQWNodGVyZ3JvbmQgZG9vcnppY2h0aWdoZWlkXCIsXG4gIFwiY29sb3JzLndoaXRlXCI6IFwid2l0XCIsXG4gIFwiY29sb3JzLmJsYWNrXCI6IFwiendhcnRcIixcbiAgXCJjb2xvcnMucmVkXCI6IFwicm9vZFwiLFxuICBcImNvbG9ycy5ncmVlblwiOiBcImdyb2VuXCIsXG4gIFwiY29sb3JzLmJsdWVcIjogXCJibGF1d1wiLFxuICBcImNvbG9ycy5jeWFuXCI6IFwiY3lhYW5cIixcbiAgXCJjb2xvcnMueWVsbG93XCI6IFwiZ2VlbFwiLFxuICBcImNvbG9ycy5tYWdlbnRhXCI6IFwibWFnZW50YVwiLFxuICBcInBlcmNlbnRcIjogXCJ7dmFsdWV9JVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LnNpemVcIjogXCJMZXR0ZXJ0eXBlIGdyb290dGVcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZVwiOiBcIkxldHRlcnR5cGUgcmFuZFwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5jaGFyYWN0ZXJFZGdlLnJhaXNlZFwiOiBcInZlcmhvb2dkXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmNoYXJhY3RlckVkZ2UuZGVwcmVzc2VkXCI6IFwidmVybGFhZ2RcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuY2hhcmFjdGVyRWRnZS51bmlmb3JtXCI6IFwidW5pZm9ybVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5jaGFyYWN0ZXJFZGdlLmRyb3BzaGFkb3dlZFwiOiBcInNjaGFkdXdcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHlcIjogXCJTdGFuZGFhcmQgbGV0dGVydHlwZVwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5tb25vc3BhY2Vkc2VyaWZcIjogXCJtb25vc3BhY2Ugc2VyaWZcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkucHJvcG9ydGlvbmFsc2VyaWZcIjogXCJwcm9wb3J0aW9uZWVsIHNlcmlmXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5Lm1vbm9zcGFjZWRzYW5zc2VyaWZcIjogXCJtb25vc3BhY2Ugc2Fucy1zZXJpZlwiLFxuICBcInNldHRpbmdzLnN1YnRpdGxlcy5mb250LmZhbWlseS5wcm9wb3J0aW9uYWxzYW5zc2VyaWZcIjogXCJwcm9wb3J0aW9uZWVsIHNhbnMtc2VyaWZcIixcbiAgXCJzZXR0aW5ncy5zdWJ0aXRsZXMuZm9udC5mYW1pbHkuY2FzdWFsXCI6IFwiY2FzdWFsXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LmN1cnNpdmVcIjogXCJjdXJzaWVmXCIsXG4gIFwic2V0dGluZ3Muc3VidGl0bGVzLmZvbnQuZmFtaWx5LnNtYWxsY2FwaXRhbFwiOiBcImtsZWluZSBob29mZGxldHRlcnNcIixcbiAgXCJzZXR0aW5ncy50aW1lLmhvdXJzXCI6IFwiVXJlblwiLFxuICBcInNldHRpbmdzLnRpbWUubWludXRlc1wiOiBcIk1pbnV0ZW5cIixcbiAgXCJzZXR0aW5ncy50aW1lLnNlY29uZHNcIjogXCJTZWNvbmRlblwiLFxuICBcImFkcy5yZW1haW5pbmdUaW1lXCI6IFwiRGV6ZSBhZHZlcnRlbnRpZSBlaW5kaWd0IGluIHtyZW1haW5pbmdUaW1lfSBzZWNvbmRlbi5cIixcbiAgXCJzZXR0aW5nc1wiOiBcIkluc3RlbGxpbmdlblwiLFxuICBcImZ1bGxzY3JlZW5cIjogXCJWb2xsZWRpZyBzY2hlcm1cIixcbiAgXCJzcGVlZFwiOiBcIlNuZWxoZWlkXCIsXG4gIFwicGxheVBhdXNlXCI6IFwiQWZzcGVsZW4vUGF1emVyZW5cIixcbiAgXCJwbGF5XCI6IFwiQWZzcGVsZW5cIixcbiAgXCJwYXVzZVwiOiBcIlBhdXplcmVuXCIsXG4gIFwib3BlblwiOiBcIk9wZW5lblwiLFxuICBcImNsb3NlXCI6IFwiU2x1aXRlblwiLFxuICBcInBpY3R1cmVJblBpY3R1cmVcIjogXCJQaWN0dXJlLWluLVBpY3R1cmVcIixcbiAgXCJhcHBsZUFpcnBsYXlcIjogXCJBcHBsZSBBaXJQbGF5XCIsXG4gIFwiZ29vZ2xlQ2FzdFwiOiBcIkdvb2dsZSBDYXN0XCIsXG4gIFwidnJcIjogXCJWUlwiLFxuICBcIm9mZlwiOiBcInVpdFwiLFxuICBcImF1dG9cIjogXCJhdXRvbWF0aXNjaFwiLFxuICBcImVjb01vZGVcIjogXCJFY28tbW9kdXNcIixcbiAgXCJlY29Nb2RlLnRpdGxlXCI6IFwiRWNvLW1vZHVzXCIsXG4gIFwiYmFja1wiOiBcIlRlcnVnXCIsXG4gIFwicmVzZXRcIjogXCJSZXNldFwiLFxuICBcInJlcGxheVwiOiBcIk9wbmlldXcgYWZzcGVsZW5cIixcbiAgXCJub3JtYWxcIjogXCJub3JtYWFsXCIsXG4gIFwiZGVmYXVsdFwiOiBcInN0YW5kYWFyZFwiLFxuICBcImxpdmVcIjogXCJMaXZlXCIsXG4gIFwic3VidGl0bGUuZXhhbXBsZVwiOiBcInZvb3JiZWVsZCBvbmRlcnRpdGVsaW5nXCIsXG4gIFwic3VidGl0bGUuc2VsZWN0XCI6IFwiU2VsZWN0ZWVyIG9uZGVydGl0ZWxpbmdcIixcbiAgXCJwbGF5aW5nT25cIjogXCJTcGVlbHQgYWYgb3AgPHN0cm9uZz57Y2FzdERldmljZU5hbWV9PC9zdHJvbmc+XCIsXG4gIFwiY29ubmVjdGluZ1RvXCI6IFwiVmVyYmluZGVuIG1ldCA8c3Ryb25nPntjYXN0RGV2aWNlTmFtZX08L3N0cm9uZz4uLi5cIixcbiAgXCJ3YXRlcm1hcmtMaW5rXCI6IFwiTGluayBuYWFyIGhvbWVwYWdlXCIsXG4gIFwiY29udHJvbEJhclwiOiBcIlZpZGVvc3BlbGVyIGJlZGllbmluZ1wiLFxuICBcInBsYXllclwiOiBcIlZpZGVvc3BlbGVyXCIsXG4gIFwic2Vla0JhclwiOiBcIlZpZGVvIHRpamRsaWpuXCIsXG4gIFwic2Vla0Jhci52YWx1ZVwiOiBcIldhYXJkZVwiLFxuICBcInNlZWtCYXIudGltZXNoaWZ0XCI6IFwiVGlqZHZlcnNjaHVpdmluZ1wiLFxuICBcInNlZWtCYXIuZHVyYXRpb25UZXh0XCI6IFwidmFuXCIsXG4gIFwicXVpY2tzZWVrLmZvcndhcmRcIjogXCJWb29ydWl0c3BvZWxlblwiLFxuICBcInF1aWNrc2Vlay5yZXdpbmRcIjogXCJUZXJ1Z3Nwb2VsZW5cIlxufSIsImV4cG9ydCBjb25zdCB2ZXJzaW9uOiBzdHJpbmcgPSAne3tWRVJTSU9OfX0nO1xuLy8gTWFuYWdlbWVudFxuZXhwb3J0ICogZnJvbSAnLi91aW1hbmFnZXInO1xuZXhwb3J0ICogZnJvbSAnLi91aWNvbmZpZyc7XG4vLyBGYWN0b3JpZXNcbmV4cG9ydCB7IFVJRmFjdG9yeSB9IGZyb20gJy4vdWlmYWN0b3J5JztcbmV4cG9ydCB7IERlbW9GYWN0b3J5IH0gZnJvbSAnLi9kZW1vZmFjdG9yeSc7XG4vLyBVdGlsc1xuZXhwb3J0IHsgQXJyYXlVdGlscyB9IGZyb20gJy4vYXJyYXl1dGlscyc7XG5leHBvcnQgeyBTdHJpbmdVdGlscyB9IGZyb20gJy4vc3RyaW5ndXRpbHMnO1xuZXhwb3J0IHsgUGxheWVyVXRpbHMgfSBmcm9tICcuL3BsYXllcnV0aWxzJztcbmV4cG9ydCB7IFVJVXRpbHMgfSBmcm9tICcuL3VpdXRpbHMnO1xuZXhwb3J0IHsgQnJvd3NlclV0aWxzIH0gZnJvbSAnLi9icm93c2VydXRpbHMnO1xuZXhwb3J0IHsgU3RvcmFnZVV0aWxzIH0gZnJvbSAnLi9zdG9yYWdldXRpbHMnO1xuZXhwb3J0IHsgRXJyb3JVdGlscyB9IGZyb20gJy4vZXJyb3J1dGlscyc7XG4vLyBMb2NhbGl6YXRpb25cbmV4cG9ydCB7IGkxOG4sIEkxOG4sIFZvY2FidWxhcnksIFZvY2FidWxhcmllcywgQ3VzdG9tVm9jYWJ1bGFyeSwgTG9jYWxpemFibGVUZXh0LCBMb2NhbGl6ZXIgfSBmcm9tICcuL2xvY2FsaXphdGlvbi9pMThuJztcbi8vIFNwYXRpYWwgTmF2aWdhdGlvblxuZXhwb3J0IHsgU3BhdGlhbE5hdmlnYXRpb24gfSBmcm9tICcuL3NwYXRpYWxuYXZpZ2F0aW9uL3NwYXRpYWxuYXZpZ2F0aW9uJztcbmV4cG9ydCB7IE5hdmlnYXRpb25Hcm91cCB9IGZyb20gJy4vc3BhdGlhbG5hdmlnYXRpb24vbmF2aWdhdGlvbmdyb3VwJztcbmV4cG9ydCB7IFJvb3ROYXZpZ2F0aW9uR3JvdXAgfSBmcm9tICcuL3NwYXRpYWxuYXZpZ2F0aW9uL3Jvb3RuYXZpZ2F0aW9uZ3JvdXAnO1xuZXhwb3J0IHtcbiAgTGlzdE5hdmlnYXRpb25Hcm91cCxcbiAgTGlzdE9yaWVudGF0aW9uLFxufSBmcm9tICcuL3NwYXRpYWxuYXZpZ2F0aW9uL0xpc3ROYXZpZ2F0aW9uR3JvdXAnO1xuLy8gQ29tcG9uZW50c1xuZXhwb3J0IHsgQnV0dG9uLCBCdXR0b25Db25maWcgfSBmcm9tICcuL2NvbXBvbmVudHMvYnV0dG9uJztcbmV4cG9ydCB7IENvbnRyb2xCYXIsIENvbnRyb2xCYXJDb25maWcgfSBmcm9tICcuL2NvbXBvbmVudHMvY29udHJvbGJhcic7XG5leHBvcnQgeyBGdWxsc2NyZWVuVG9nZ2xlQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL2Z1bGxzY3JlZW50b2dnbGVidXR0b24nO1xuZXhwb3J0IHsgSHVnZVBsYXliYWNrVG9nZ2xlQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL2h1Z2VwbGF5YmFja3RvZ2dsZWJ1dHRvbic7XG5leHBvcnQgeyBQbGF5YmFja1RpbWVMYWJlbCwgUGxheWJhY2tUaW1lTGFiZWxDb25maWcsIFBsYXliYWNrVGltZUxhYmVsTW9kZSB9IGZyb20gJy4vY29tcG9uZW50cy9wbGF5YmFja3RpbWVsYWJlbCc7XG5leHBvcnQgeyBQbGF5YmFja1RvZ2dsZUJ1dHRvbiwgUGxheWJhY2tUb2dnbGVCdXR0b25Db25maWcgfSBmcm9tICcuL2NvbXBvbmVudHMvcGxheWJhY2t0b2dnbGVidXR0b24nO1xuZXhwb3J0IHsgU2Vla0JhciwgU2Vla0JhckNvbmZpZywgU2Vla1ByZXZpZXdFdmVudEFyZ3MsIFNlZWtCYXJNYXJrZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvc2Vla2Jhcic7XG5leHBvcnQgeyBTZWxlY3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvc2VsZWN0Ym94JztcbmV4cG9ydCB7IEl0ZW1TZWxlY3Rpb25MaXN0IH0gZnJvbSAnLi9jb21wb25lbnRzL2l0ZW1zZWxlY3Rpb25saXN0JztcbmV4cG9ydCB7IFNldHRpbmdzUGFuZWwsIFNldHRpbmdzUGFuZWxDb25maWcgfSBmcm9tICcuL2NvbXBvbmVudHMvc2V0dGluZ3NwYW5lbCc7XG5leHBvcnQgeyBTZXR0aW5nc1RvZ2dsZUJ1dHRvbiwgU2V0dGluZ3NUb2dnbGVCdXR0b25Db25maWcgfSBmcm9tICcuL2NvbXBvbmVudHMvc2V0dGluZ3N0b2dnbGVidXR0b24nO1xuZXhwb3J0IHsgVG9nZ2xlQnV0dG9uLCBUb2dnbGVCdXR0b25Db25maWcgfSBmcm9tICcuL2NvbXBvbmVudHMvdG9nZ2xlYnV0dG9uJztcbmV4cG9ydCB7IFZpZGVvUXVhbGl0eVNlbGVjdEJveCB9IGZyb20gJy4vY29tcG9uZW50cy92aWRlb3F1YWxpdHlzZWxlY3Rib3gnO1xuZXhwb3J0IHsgVm9sdW1lVG9nZ2xlQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL3ZvbHVtZXRvZ2dsZWJ1dHRvbic7XG5leHBvcnQgeyBWUlRvZ2dsZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy92cnRvZ2dsZWJ1dHRvbic7XG5leHBvcnQgeyBXYXRlcm1hcmssIFdhdGVybWFya0NvbmZpZyB9IGZyb20gJy4vY29tcG9uZW50cy93YXRlcm1hcmsnO1xuZXhwb3J0IHsgVUlDb250YWluZXIsIFVJQ29udGFpbmVyQ29uZmlnIH0gZnJvbSAnLi9jb21wb25lbnRzL3VpY29udGFpbmVyJztcbmV4cG9ydCB7IENvbnRhaW5lciwgQ29udGFpbmVyQ29uZmlnIH0gZnJvbSAnLi9jb21wb25lbnRzL2NvbnRhaW5lcic7XG5leHBvcnQgeyBMYWJlbCwgTGFiZWxDb25maWcgfSBmcm9tICcuL2NvbXBvbmVudHMvbGFiZWwnO1xuZXhwb3J0IHsgQXVkaW9RdWFsaXR5U2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL2F1ZGlvcXVhbGl0eXNlbGVjdGJveCc7XG5leHBvcnQgeyBBdWRpb1RyYWNrU2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL2F1ZGlvdHJhY2tzZWxlY3Rib3gnO1xuZXhwb3J0IHsgQ2FzdFN0YXR1c092ZXJsYXkgfSBmcm9tICcuL2NvbXBvbmVudHMvY2FzdHN0YXR1c292ZXJsYXknO1xuZXhwb3J0IHsgQ2FzdFRvZ2dsZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9jYXN0dG9nZ2xlYnV0dG9uJztcbmV4cG9ydCB7IENvbXBvbmVudCwgQ29tcG9uZW50Q29uZmlnLCBDb21wb25lbnRIb3ZlckNoYW5nZWRFdmVudEFyZ3MgfSBmcm9tICcuL2NvbXBvbmVudHMvY29tcG9uZW50JztcbmV4cG9ydCB7IEVycm9yTWVzc2FnZU92ZXJsYXksIEVycm9yTWVzc2FnZU92ZXJsYXlDb25maWcsIEVycm9yTWVzc2FnZVRyYW5zbGF0b3IsIEVycm9yTWVzc2FnZU1hcCB9IGZyb20gJy4vY29tcG9uZW50cy9lcnJvcm1lc3NhZ2VvdmVybGF5JztcbmV4cG9ydCB7IFJlY29tbWVuZGF0aW9uT3ZlcmxheSB9IGZyb20gJy4vY29tcG9uZW50cy9yZWNvbW1lbmRhdGlvbm92ZXJsYXknO1xuZXhwb3J0IHsgU2Vla0JhckxhYmVsLCBTZWVrQmFyTGFiZWxDb25maWcgfSBmcm9tICcuL2NvbXBvbmVudHMvc2Vla2JhcmxhYmVsJztcbmV4cG9ydCB7IFN1YnRpdGxlT3ZlcmxheSB9IGZyb20gJy4vY29tcG9uZW50cy9zdWJ0aXRsZW92ZXJsYXknO1xuZXhwb3J0IHsgU3VidGl0bGVTZWxlY3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvc3VidGl0bGVzZWxlY3Rib3gnO1xuZXhwb3J0IHsgVGl0bGVCYXIsIFRpdGxlQmFyQ29uZmlnIH0gZnJvbSAnLi9jb21wb25lbnRzL3RpdGxlYmFyJztcbmV4cG9ydCB7IFZvbHVtZUNvbnRyb2xCdXR0b24sIFZvbHVtZUNvbnRyb2xCdXR0b25Db25maWcgfSBmcm9tICcuL2NvbXBvbmVudHMvdm9sdW1lY29udHJvbGJ1dHRvbic7XG5leHBvcnQgeyBDbGlja092ZXJsYXksIENsaWNrT3ZlcmxheUNvbmZpZyB9IGZyb20gJy4vY29tcG9uZW50cy9jbGlja292ZXJsYXknO1xuZXhwb3J0IHsgQWRTa2lwQnV0dG9uLCBBZFNraXBCdXR0b25Db25maWcgfSBmcm9tICcuL2NvbXBvbmVudHMvYWRza2lwYnV0dG9uJztcbmV4cG9ydCB7IEFkTWVzc2FnZUxhYmVsIH0gZnJvbSAnLi9jb21wb25lbnRzL2FkbWVzc2FnZWxhYmVsJztcbmV4cG9ydCB7IEFkQ2xpY2tPdmVybGF5IH0gZnJvbSAnLi9jb21wb25lbnRzL2FkY2xpY2tvdmVybGF5JztcbmV4cG9ydCB7IFBsYXliYWNrU3BlZWRTZWxlY3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvcGxheWJhY2tzcGVlZHNlbGVjdGJveCc7XG5leHBvcnQgeyBIdWdlUmVwbGF5QnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL2h1Z2VyZXBsYXlidXR0b24nO1xuZXhwb3J0IHsgQnVmZmVyaW5nT3ZlcmxheSwgQnVmZmVyaW5nT3ZlcmxheUNvbmZpZyB9IGZyb20gJy4vY29tcG9uZW50cy9idWZmZXJpbmdvdmVybGF5JztcbmV4cG9ydCB7IENhc3RVSUNvbnRhaW5lciB9IGZyb20gJy4vY29tcG9uZW50cy9jYXN0dWljb250YWluZXInO1xuZXhwb3J0IHsgUGxheWJhY2tUb2dnbGVPdmVybGF5LCBQbGF5YmFja1RvZ2dsZU92ZXJsYXlDb25maWcgfSBmcm9tICcuL2NvbXBvbmVudHMvcGxheWJhY2t0b2dnbGVvdmVybGF5JztcbmV4cG9ydCB7IENsb3NlQnV0dG9uLCBDbG9zZUJ1dHRvbkNvbmZpZyB9IGZyb20gJy4vY29tcG9uZW50cy9jbG9zZWJ1dHRvbic7XG5leHBvcnQgeyBNZXRhZGF0YUxhYmVsLCBNZXRhZGF0YUxhYmVsQ29udGVudCwgTWV0YWRhdGFMYWJlbENvbmZpZyB9IGZyb20gJy4vY29tcG9uZW50cy9tZXRhZGF0YWxhYmVsJztcbmV4cG9ydCB7IEFpclBsYXlUb2dnbGVCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvYWlycGxheXRvZ2dsZWJ1dHRvbic7XG5leHBvcnQgeyBWb2x1bWVTbGlkZXIsIFZvbHVtZVNsaWRlckNvbmZpZyB9IGZyb20gJy4vY29tcG9uZW50cy92b2x1bWVzbGlkZXInO1xuZXhwb3J0IHsgUGljdHVyZUluUGljdHVyZVRvZ2dsZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9waWN0dXJlaW5waWN0dXJldG9nZ2xlYnV0dG9uJztcbmV4cG9ydCB7IFNwYWNlciB9IGZyb20gJy4vY29tcG9uZW50cy9zcGFjZXInO1xuZXhwb3J0IHsgQmFja2dyb3VuZENvbG9yU2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3MvYmFja2dyb3VuZGNvbG9yc2VsZWN0Ym94JztcbmV4cG9ydCB7IEJhY2tncm91bmRPcGFjaXR5U2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3MvYmFja2dyb3VuZG9wYWNpdHlzZWxlY3Rib3gnO1xuZXhwb3J0IHsgQ2hhcmFjdGVyRWRnZVNlbGVjdEJveCB9IGZyb20gJy4vY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL2NoYXJhY3RlcmVkZ2VzZWxlY3Rib3gnO1xuZXhwb3J0IHsgRm9udENvbG9yU2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3MvZm9udGNvbG9yc2VsZWN0Ym94JztcbmV4cG9ydCB7IEZvbnRGYW1pbHlTZWxlY3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvc3VidGl0bGVzZXR0aW5ncy9mb250ZmFtaWx5c2VsZWN0Ym94JztcbmV4cG9ydCB7IEZvbnRPcGFjaXR5U2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3MvZm9udG9wYWNpdHlzZWxlY3Rib3gnO1xuZXhwb3J0IHsgRm9udFNpemVTZWxlY3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvc3VidGl0bGVzZXR0aW5ncy9mb250c2l6ZXNlbGVjdGJveCc7XG5leHBvcnQgeyBTdWJ0aXRsZVNldHRpbmdTZWxlY3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvc3VidGl0bGVzZXR0aW5ncy9zdWJ0aXRsZXNldHRpbmdzZWxlY3Rib3gnO1xuZXhwb3J0IHsgU3VidGl0bGVTZXR0aW5nc0xhYmVsIH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3Mvc3VidGl0bGVzZXR0aW5nc2xhYmVsJztcbmV4cG9ydCB7IFdpbmRvd0NvbG9yU2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3Mvd2luZG93Y29sb3JzZWxlY3Rib3gnO1xuZXhwb3J0IHsgV2luZG93T3BhY2l0eVNlbGVjdEJveCB9IGZyb20gJy4vY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL3dpbmRvd29wYWNpdHlzZWxlY3Rib3gnO1xuZXhwb3J0IHsgU3VidGl0bGVTZXR0aW5nc1Jlc2V0QnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3Mvc3VidGl0bGVzZXR0aW5nc3Jlc2V0YnV0dG9uJztcbmV4cG9ydCB7IExpc3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvbGlzdGJveCc7XG5leHBvcnQgeyBTdWJ0aXRsZUxpc3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvc3VidGl0bGVsaXN0Ym94JztcbmV4cG9ydCB7IEF1ZGlvVHJhY2tMaXN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL2F1ZGlvdHJhY2tsaXN0Ym94JztcbmV4cG9ydCB7IFNldHRpbmdzUGFuZWxQYWdlIH0gZnJvbSAnLi9jb21wb25lbnRzL3NldHRpbmdzcGFuZWxwYWdlJztcbmV4cG9ydCB7IFNldHRpbmdzUGFuZWxQYWdlQmFja0J1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9zZXR0aW5nc3BhbmVscGFnZWJhY2tidXR0b24nO1xuZXhwb3J0IHsgU2V0dGluZ3NQYW5lbFBhZ2VPcGVuQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL3NldHRpbmdzcGFuZWxwYWdlb3BlbmJ1dHRvbic7XG5leHBvcnQgeyBTdWJ0aXRsZVNldHRpbmdzUGFuZWxQYWdlLCBTdWJ0aXRsZVNldHRpbmdzUGFuZWxQYWdlQ29uZmlnIH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlc2V0dGluZ3Mvc3VidGl0bGVzZXR0aW5nc3BhbmVscGFnZSc7XG5leHBvcnQgeyBTZXR0aW5nc1BhbmVsSXRlbSB9IGZyb20gJy4vY29tcG9uZW50cy9zZXR0aW5nc3BhbmVsaXRlbSc7XG5leHBvcnQgeyBSZXBsYXlCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvcmVwbGF5YnV0dG9uJztcbmV4cG9ydCB7IFF1aWNrU2Vla0J1dHRvbiwgUXVpY2tTZWVrQnV0dG9uQ29uZmlnIH0gZnJvbSAnLi9jb21wb25lbnRzL3F1aWNrc2Vla2J1dHRvbic7XG5leHBvcnQgeyBMaXN0U2VsZWN0b3IsIExpc3RTZWxlY3RvckNvbmZpZywgTGlzdEl0ZW0sIExpc3RJdGVtRmlsdGVyLCBMaXN0SXRlbUxhYmVsVHJhbnNsYXRvciB9IGZyb20gJy4vY29tcG9uZW50cy9saXN0c2VsZWN0b3InO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIGlzUmFkaW9Nb2RlQWN0aXZlOiBib29sZWFuIHwgbnVsbDtcbiAgICBpc1JhZGlvTW9kZUF2YWlsYWJsZTogYm9vbGVhbiB8IG51bGw7XG4gICAgaXNRdWFudGVlY0Rpc3BsYXllZDogIGJvb2xlYW4gfCBudWxsO1xuICB9XG59XG5cbmNvbnN0IHN0YXRlID0ge1xuICBpc1JhZGlvTW9kZUFjdGl2ZTogbnVsbCBhcyBib29sZWFuIHwgbnVsbCxcbiAgaXNSYWRpb01vZGVBdmFpbGFibGU6IG51bGwgYXMgYm9vbGVhbiB8IG51bGwsXG4gIGlzUXVhbnRlZWNEaXNwbGF5ZWQ6IG51bGwgYXMgYm9vbGVhbiB8IG51bGwsXG59O1xuXG5pZiAodHlwZW9mIHdpbmRvdy5pc1JhZGlvTW9kZUFjdGl2ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2lzUmFkaW9Nb2RlQWN0aXZlJywge1xuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiBzdGF0ZS5pc1JhZGlvTW9kZUFjdGl2ZTtcbiAgICB9LFxuICAgIHNldCh2YWx1ZSkge1xuICAgICAgc3RhdGUuaXNSYWRpb01vZGVBY3RpdmUgPSB2YWx1ZTtcbiAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdpc1JhZGlvTW9kZUFjdGl2ZUNoYW5nZScsIHtcbiAgICAgICAgZGV0YWlsOiB2YWx1ZSxcbiAgICAgIH0pO1xuICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIH0sXG4gIH0pO1xufVxuXG5pZiAodHlwZW9mIHdpbmRvdy5pc1JhZGlvTW9kZUF2YWlsYWJsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2lzUmFkaW9Nb2RlQXZhaWxhYmxlJywge1xuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiBzdGF0ZS5pc1JhZGlvTW9kZUF2YWlsYWJsZTtcbiAgICB9LFxuICAgIHNldCh2YWx1ZSkge1xuICAgICAgc3RhdGUuaXNSYWRpb01vZGVBdmFpbGFibGUgPSB2YWx1ZTtcbiAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdpc1JhZGlvTW9kZUF2YWlsYWJsZUNoYW5nZScsIHtcbiAgICAgICAgZGV0YWlsOiB2YWx1ZSxcbiAgICAgIH0pO1xuICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIH0sXG4gIH0pO1xufVxuXG5pZiAodHlwZW9mIHdpbmRvdy5pc1F1YW50ZWVjRGlzcGxheWVkID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnaXNRdWFudGVlY0Rpc3BsYXllZCcsIHtcbiAgICBnZXQoKSB7XG4gICAgICByZXR1cm4gc3RhdGUuaXNRdWFudGVlY0Rpc3BsYXllZDtcbiAgICB9LFxuICAgIHNldCh2YWx1ZSkge1xuICAgICAgc3RhdGUuaXNRdWFudGVlY0Rpc3BsYXllZCA9IHZhbHVlO1xuICAgICAgY29uc3QgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ2lzUXVhbnRlZWNEaXNwbGF5ZWRDaGFuZ2UnLCB7XG4gICAgICAgIGRldGFpbDogdmFsdWUsXG4gICAgICB9KTtcbiAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB9LFxuICB9KTtcbn1cblxuLy8gT2JqZWN0LmFzc2lnbiBwb2x5ZmlsbCBmb3IgRVM1L0lFOVxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZGUvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2Fzc2lnblxuaWYgKHR5cGVvZiBPYmplY3QuYXNzaWduICE9PSAnZnVuY3Rpb24nKSB7XG4gIE9iamVjdC5hc3NpZ24gPSBmdW5jdGlvbiAodGFyZ2V0OiBhbnkpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaWYgKHRhcmdldCA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTtcbiAgICB9XG5cbiAgICB0YXJnZXQgPSBPYmplY3QodGFyZ2V0KTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDE7IGluZGV4IDwgYXJndW1lbnRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgbGV0IHNvdXJjZSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICBpZiAoc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xufVxuIiwiaW1wb3J0IHsgUGxheWVyQVBJLCBQbGF5ZXJFdmVudCwgUGxheWVyRXZlbnRCYXNlLCBQbGF5ZXJFdmVudENhbGxiYWNrIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IFdyYXBwZWRQbGF5ZXIgfSBmcm9tICcuL3VpbWFuYWdlcic7XG5cbmV4cG9ydCBlbnVtIE1vYmlsZVYzUGxheWVyRXZlbnQge1xuICBTb3VyY2VFcnJvciA9ICdzb3VyY2VlcnJvcicsXG4gIFBsYXllckVycm9yID0gJ3BsYXllcmVycm9yJyxcbiAgUGxheWxpc3RUcmFuc2l0aW9uID0gJ3BsYXlsaXN0dHJhbnNpdGlvbicsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9iaWxlVjNQbGF5ZXJFcnJvckV2ZW50IGV4dGVuZHMgUGxheWVyRXZlbnRCYXNlIHtcbiAgY29kZTogbnVtYmVyO1xuICBtZXNzYWdlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9iaWxlVjNTb3VyY2VFcnJvckV2ZW50IGV4dGVuZHMgUGxheWVyRXZlbnRCYXNlIHtcbiAgY29kZTogbnVtYmVyO1xuICBtZXNzYWdlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIE1vYmlsZVYzUGxheWVyRXZlbnRUeXBlID0gUGxheWVyRXZlbnQgfCBNb2JpbGVWM1BsYXllckV2ZW50O1xuXG5leHBvcnQgaW50ZXJmYWNlIE1vYmlsZVYzUGxheWVyQVBJIGV4dGVuZHMgUGxheWVyQVBJIHtcbiAgb24oZXZlbnRUeXBlOiBNb2JpbGVWM1BsYXllckV2ZW50VHlwZSwgY2FsbGJhY2s6IFBsYXllckV2ZW50Q2FsbGJhY2spOiB2b2lkO1xuICBleHBvcnRzOiBQbGF5ZXJBUElbJ2V4cG9ydHMnXSAmIHsgUGxheWVyRXZlbnQ6IE1vYmlsZVYzUGxheWVyRXZlbnRUeXBlIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc01vYmlsZVYzUGxheWVyQVBJKHBsYXllcjogV3JhcHBlZFBsYXllciB8IFBsYXllckFQSSB8IE1vYmlsZVYzUGxheWVyQVBJKTogcGxheWVyIGlzIE1vYmlsZVYzUGxheWVyQVBJIHtcbiAgZm9yIChjb25zdCBrZXkgaW4gTW9iaWxlVjNQbGF5ZXJFdmVudCkge1xuICAgIGlmIChNb2JpbGVWM1BsYXllckV2ZW50Lmhhc093blByb3BlcnR5KGtleSkgJiYgIXBsYXllci5leHBvcnRzLlBsYXllckV2ZW50Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbiIsImltcG9ydCB7RXZlbnQsIEV2ZW50RGlzcGF0Y2hlciwgTm9BcmdzfSBmcm9tICcuL2V2ZW50ZGlzcGF0Y2hlcic7XG5pbXBvcnQge0Jyb3dzZXJVdGlsc30gZnJvbSAnLi9icm93c2VydXRpbHMnO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEksIFRpbWVSYW5nZSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5cbi8qKlxuICogQGNhdGVnb3J5IFV0aWxzXG4gKi9cbmV4cG9ydCBuYW1lc3BhY2UgUGxheWVyVXRpbHMge1xuXG4gIGV4cG9ydCBlbnVtIFBsYXllclN0YXRlIHtcbiAgICBJZGxlLFxuICAgIFByZXBhcmVkLFxuICAgIFBsYXlpbmcsXG4gICAgUGF1c2VkLFxuICAgIEZpbmlzaGVkLFxuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGlzVGltZVNoaWZ0QXZhaWxhYmxlKHBsYXllcjogUGxheWVyQVBJKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHBsYXllci5pc0xpdmUoKSAmJiBwbGF5ZXIuZ2V0TWF4VGltZVNoaWZ0KCkgIT09IDA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gZ2V0U3RhdGUocGxheWVyOiBQbGF5ZXJBUEkpOiBQbGF5ZXJTdGF0ZSB7XG4gICAgaWYgKHBsYXllci5oYXNFbmRlZCgpKSB7XG4gICAgICByZXR1cm4gUGxheWVyU3RhdGUuRmluaXNoZWQ7XG4gICAgfSBlbHNlIGlmIChwbGF5ZXIuaXNQbGF5aW5nKCkpIHtcbiAgICAgIHJldHVybiBQbGF5ZXJTdGF0ZS5QbGF5aW5nO1xuICAgIH0gZWxzZSBpZiAocGxheWVyLmlzUGF1c2VkKCkpIHtcbiAgICAgIHJldHVybiBQbGF5ZXJTdGF0ZS5QYXVzZWQ7XG4gICAgfSBlbHNlIGlmIChwbGF5ZXIuZ2V0U291cmNlKCkgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFBsYXllclN0YXRlLlByZXBhcmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUGxheWVyU3RhdGUuSWRsZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudFRpbWUgLSBzZWVrYWJsZVJhbmdlLnN0YXJ0LiBUaGlzIGVuc3VyZXMgYSB1c2VyLWZyaWVuZGx5IGN1cnJlbnRUaW1lIGFmdGVyIGEgbGl2ZSBzdHJlYW1cbiAgICogdHJhbnNpdGlvbmVkIHRvIFZvRC5cbiAgICogQHBhcmFtIHBsYXllclxuICAgKi9cbiAgZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbnRUaW1lUmVsYXRpdmVUb1NlZWthYmxlUmFuZ2UocGxheWVyOiBQbGF5ZXJBUEkpOiBudW1iZXIge1xuICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gcGxheWVyLmdldEN1cnJlbnRUaW1lKCk7XG4gICAgaWYgKHBsYXllci5pc0xpdmUoKSkge1xuICAgICAgcmV0dXJuIGN1cnJlbnRUaW1lO1xuICAgIH1cblxuICAgIGNvbnN0IHNlZWthYmxlUmFuZ2VTdGFydCA9IFBsYXllclV0aWxzLmdldFNlZWthYmxlUmFuZ2VTdGFydChwbGF5ZXIsIDApO1xuICAgIHJldHVybiBjdXJyZW50VGltZSAtIHNlZWthYmxlUmFuZ2VTdGFydDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzdGFydCB2YWx1ZSBvZiB0aGUgc2Vla2FibGUgcmFuZ2Ugb3IgdGhlIGRlZmF1bHRWYWx1ZSBpZiBubyBzZWVrYWJsZVJhbmdlIGlzIHByZXNlbnQuXG4gICAqIEZvciBub3cgdGhpcyBoYXBwZW5zIG9ubHkgaW4gY29tYmluYXRpb24gd2l0aCBNb2JpbGUgU0RLcy5cbiAgICpcbiAgICogVE9ETzogcmVtb3ZlIHRoaXMgZnVuY3Rpb24gaW4gbmV4dCBtYWpvciByZWxlYXNlXG4gICAqXG4gICAqIEBwYXJhbSBwbGF5ZXJcbiAgICogQHBhcmFtIGRlZmF1bHRWYWx1ZVxuICAgKi9cbiAgZXhwb3J0IGZ1bmN0aW9uIGdldFNlZWthYmxlUmFuZ2VTdGFydChwbGF5ZXI6IFBsYXllckFQSSwgZGVmYXVsdFZhbHVlOiBudW1iZXIgPSAwKSB7XG4gICAgcmV0dXJuIHBsYXllci5nZXRTZWVrYWJsZVJhbmdlKCkgJiYgcGxheWVyLmdldFNlZWthYmxlUmFuZ2UoKS5zdGFydCB8fCBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyBwbGF5ZXIgc2Vla2FibGUgdGltZSByYW5nZSBmb3IgbGl2ZS5cbiAgICogQXMgdGhlIHBsYXllciByZXR1cm5zIGB7IHN0YXJ0OiAtMSwgZW5kOiAtMSB9YCBmb3IgbGl2ZSBzdHJlYW1zIHdlIG5lZWQgdG8gY2FsY3VsYXRlIHRoZSBgc2Vla2FibGVSYW5nZWAgYmFzZWQgb24gYG1heFRpbWVzaGlmdGAuXG4gICAqXG4gICAqIEBwYXJhbSBwbGF5ZXJcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRTZWVrYWJsZVJhbmdlUmVzcGVjdGluZ0xpdmUocGxheWVyOiBQbGF5ZXJBUEkpOiBUaW1lUmFuZ2Uge1xuICAgIGlmICghcGxheWVyLmlzTGl2ZSgpKSB7XG4gICAgICByZXR1cm4gcGxheWVyLmdldFNlZWthYmxlUmFuZ2UoKTtcbiAgICB9XG5cbiAgICBjb25zdCBjdXJyZW50VGltZXNoaWZ0ID0gLXBsYXllci5nZXRUaW1lU2hpZnQoKTtcbiAgICBjb25zdCBtYXhUaW1lc2hpZnQgPSAtcGxheWVyLmdldE1heFRpbWVTaGlmdCgpO1xuICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gcGxheWVyLmdldEN1cnJlbnRUaW1lKCk7XG5cbiAgICBjb25zdCBlbmQgPSBjdXJyZW50VGltZSArIChjdXJyZW50VGltZXNoaWZ0KTtcbiAgICBjb25zdCBzdGFydCA9IGN1cnJlbnRUaW1lIC0gKG1heFRpbWVzaGlmdCAtIGN1cnJlbnRUaW1lc2hpZnQpO1xuXG4gICAgcmV0dXJuIHsgc3RhcnQsIGVuZCB9O1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBUaW1lU2hpZnRBdmFpbGFiaWxpdHlDaGFuZ2VkQXJncyBleHRlbmRzIE5vQXJncyB7XG4gICAgdGltZVNoaWZ0QXZhaWxhYmxlOiBib29sZWFuO1xuICB9XG5cbiAgZXhwb3J0IGNsYXNzIFRpbWVTaGlmdEF2YWlsYWJpbGl0eURldGVjdG9yIHtcblxuICAgIHByaXZhdGUgcGxheWVyOiBQbGF5ZXJBUEk7XG4gICAgcHJpdmF0ZSB0aW1lU2hpZnRBdmFpbGFibGU6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSB0aW1lU2hpZnRBdmFpbGFiaWxpdHlDaGFuZ2VkRXZlbnQgPSBuZXcgRXZlbnREaXNwYXRjaGVyPFBsYXllckFQSSwgVGltZVNoaWZ0QXZhaWxhYmlsaXR5Q2hhbmdlZEFyZ3M+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihwbGF5ZXI6IFBsYXllckFQSSkge1xuICAgICAgdGhpcy5wbGF5ZXIgPSBwbGF5ZXI7XG4gICAgICB0aGlzLnRpbWVTaGlmdEF2YWlsYWJsZSA9IHVuZGVmaW5lZDtcblxuICAgICAgbGV0IHRpbWVTaGlmdERldGVjdG9yID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmRldGVjdCgpO1xuICAgICAgfTtcbiAgICAgIC8vIFRyeSB0byBkZXRlY3QgdGltZXNoaWZ0IGF2YWlsYWJpbGl0eSB3aGVuIHNvdXJjZSBpcyBsb2FkZWQsIHdoaWNoIHdvcmtzIGZvciBEQVNIIHN0cmVhbXNcbiAgICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VMb2FkZWQsIHRpbWVTaGlmdERldGVjdG9yKTtcbiAgICAgIC8vIFdpdGggSExTL05hdGl2ZVBsYXllciBzdHJlYW1zLCBnZXRNYXhUaW1lU2hpZnQgY2FuIGJlIDAgYmVmb3JlIHRoZSBidWZmZXIgZmlsbHMsIHNvIHdlIG5lZWQgdG8gYWRkaXRpb25hbGx5XG4gICAgICAvLyBjaGVjayB0aW1lc2hpZnQgYXZhaWxhYmlsaXR5IGluIFRpbWVDaGFuZ2VkXG4gICAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVGltZUNoYW5nZWQsIHRpbWVTaGlmdERldGVjdG9yKTtcbiAgICB9XG5cbiAgICBkZXRlY3QoKTogdm9pZCB7XG4gICAgICBpZiAodGhpcy5wbGF5ZXIuaXNMaXZlKCkpIHtcbiAgICAgICAgbGV0IHRpbWVTaGlmdEF2YWlsYWJsZU5vdyA9IFBsYXllclV0aWxzLmlzVGltZVNoaWZ0QXZhaWxhYmxlKHRoaXMucGxheWVyKTtcblxuICAgICAgICAvLyBXaGVuIHRoZSBhdmFpbGFiaWxpdHkgY2hhbmdlcywgd2UgZmlyZSB0aGUgZXZlbnRcbiAgICAgICAgaWYgKHRpbWVTaGlmdEF2YWlsYWJsZU5vdyAhPT0gdGhpcy50aW1lU2hpZnRBdmFpbGFibGUpIHtcbiAgICAgICAgICB0aGlzLnRpbWVTaGlmdEF2YWlsYWJpbGl0eUNoYW5nZWRFdmVudC5kaXNwYXRjaCh0aGlzLnBsYXllciwgeyB0aW1lU2hpZnRBdmFpbGFibGU6IHRpbWVTaGlmdEF2YWlsYWJsZU5vdyB9KTtcbiAgICAgICAgICB0aGlzLnRpbWVTaGlmdEF2YWlsYWJsZSA9IHRpbWVTaGlmdEF2YWlsYWJsZU5vdztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGdldCBvblRpbWVTaGlmdEF2YWlsYWJpbGl0eUNoYW5nZWQoKTogRXZlbnQ8UGxheWVyQVBJLCBUaW1lU2hpZnRBdmFpbGFiaWxpdHlDaGFuZ2VkQXJncz4ge1xuICAgICAgcmV0dXJuIHRoaXMudGltZVNoaWZ0QXZhaWxhYmlsaXR5Q2hhbmdlZEV2ZW50LmdldEV2ZW50KCk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBMaXZlU3RyZWFtRGV0ZWN0b3JFdmVudEFyZ3MgZXh0ZW5kcyBOb0FyZ3Mge1xuICAgIGxpdmU6IGJvb2xlYW47XG4gIH1cblxuICAvKipcbiAgICogRGV0ZWN0cyBjaGFuZ2VzIG9mIHRoZSBzdHJlYW0gdHlwZSwgaS5lLiBjaGFuZ2VzIG9mIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHBsYXllciNpc0xpdmUgbWV0aG9kLlxuICAgKiBOb3JtYWxseSwgYSBzdHJlYW0gY2Fubm90IGNoYW5nZSBpdHMgdHlwZSBkdXJpbmcgcGxheWJhY2ssIGl0J3MgZWl0aGVyIFZPRCBvciBsaXZlLiBEdWUgdG8gYnVncyBvbiBzb21lXG4gICAqIHBsYXRmb3JtcyBvciBicm93c2VycywgaXQgY2FuIHN0aWxsIGNoYW5nZS4gSXQgaXMgdGhlcmVmb3JlIHVucmVsaWFibGUgdG8ganVzdCBjaGVjayAjaXNMaXZlIGFuZCB0aGlzIGRldGVjdG9yXG4gICAqIHNob3VsZCBiZSB1c2VkIGFzIGEgd29ya2Fyb3VuZCBpbnN0ZWFkLlxuICAgKlxuICAgKiBBZGRpdGlvbmFsbHkgc3RhcnRpbmcgd2l0aCBwbGF5ZXIgdjguMTkuMCB3ZSBoYXZlIHRoZSB1c2UtY2FzZSB0aGF0IGEgbGl2ZSBzdHJlYW0gY2hhbmdlcyBpbnRvIGEgdm9kLlxuICAgKiBUaGUgRHVyYXRpb25DaGFuZ2VkIGV2ZW50IGluZGljYXRlcyB0aGlzIHN3aXRjaC5cbiAgICpcbiAgICogS25vd24gY2FzZXM6XG4gICAqXG4gICAqIC0gSExTIFZPRCBvbiBBbmRyb2lkIDQuM1xuICAgKiBWaWRlbyBkdXJhdGlvbiBpcyBpbml0aWFsbHkgJ0luZmluaXR5JyBhbmQgb25seSBnZXRzIGF2YWlsYWJsZSBhZnRlciBwbGF5YmFjayBzdGFydHMsIHNvIHN0cmVhbXMgYXJlIHdyb25nbHlcbiAgICogcmVwb3J0ZWQgYXMgJ2xpdmUnIGJlZm9yZSBwbGF5YmFjayAodGhlIGxpdmUtY2hlY2sgaW4gdGhlIHBsYXllciBjaGVja3MgZm9yIGluZmluaXRlIGR1cmF0aW9uKS5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgc2luY2UgVUkgdjMuOS4wIGluIGNvbWJpbmF0aW9uIHdpdGggcGxheWVyIHY4LjE5LjAgdXNlIFBsYXllckV2ZW50LkR1cmF0aW9uQ2hhbmdlZCBpbnN0ZWFkXG4gICAqXG4gICAqIFRPRE86IHJlbW92ZSB0aGlzIGNsYXNzIGluIG5leHQgbWFqb3IgcmVsZWFzZVxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIExpdmVTdHJlYW1EZXRlY3RvciB7XG5cbiAgICBwcml2YXRlIHBsYXllcjogUGxheWVyQVBJO1xuICAgIHByaXZhdGUgbGl2ZTogYm9vbGVhbjtcbiAgICBwcml2YXRlIGxpdmVDaGFuZ2VkRXZlbnQgPSBuZXcgRXZlbnREaXNwYXRjaGVyPFBsYXllckFQSSwgTGl2ZVN0cmVhbURldGVjdG9yRXZlbnRBcmdzPigpO1xuICAgIHByaXZhdGUgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcjtcblxuICAgIGNvbnN0cnVjdG9yKHBsYXllcjogUGxheWVyQVBJLCB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyKSB7XG4gICAgICB0aGlzLnBsYXllciA9IHBsYXllcjtcbiAgICAgIHRoaXMudWltYW5hZ2VyID0gdWltYW5hZ2VyO1xuICAgICAgdGhpcy5saXZlID0gdW5kZWZpbmVkO1xuXG4gICAgICBsZXQgbGl2ZURldGVjdG9yID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmRldGVjdCgpO1xuICAgICAgfTtcbiAgICAgIHRoaXMudWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKGxpdmVEZXRlY3Rvcik7XG4gICAgICAvLyBSZS1ldmFsdWF0ZSB3aGVuIHBsYXliYWNrIHN0YXJ0c1xuICAgICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXksIGxpdmVEZXRlY3Rvcik7XG5cbiAgICAgIC8vIEhMUyBsaXZlIGRldGVjdGlvbiB3b3JrYXJvdW5kIGZvciBBbmRyb2lkOlxuICAgICAgLy8gQWxzbyByZS1ldmFsdWF0ZSBkdXJpbmcgcGxheWJhY2ssIGJlY2F1c2UgdGhhdCBpcyB3aGVuIHRoZSBsaXZlIGZsYWcgbWlnaHQgY2hhbmdlLlxuICAgICAgLy8gKERvaW5nIGl0IG9ubHkgaW4gQW5kcm9pZCBDaHJvbWUgc2F2ZXMgdW5uZWNlc3Nhcnkgb3ZlcmhlYWQgb24gb3RoZXIgcGxhdGZvcm1zKVxuICAgICAgaWYgKEJyb3dzZXJVdGlscy5pc0FuZHJvaWQgJiYgQnJvd3NlclV0aWxzLmlzQ2hyb21lKSB7XG4gICAgICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5UaW1lQ2hhbmdlZCwgbGl2ZURldGVjdG9yKTtcbiAgICAgIH1cblxuICAgICAgLy8gRHVyYXRpb25DaGFuZ2VkIGV2ZW50IHdhcyBpbnRyb2R1Y2VkIHdpdGggcGxheWVyIHY4LjE5LjBcbiAgICAgIGlmIChwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5EdXJhdGlvbkNoYW5nZWQpIHtcbiAgICAgICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkR1cmF0aW9uQ2hhbmdlZCwgbGl2ZURldGVjdG9yKTtcbiAgICAgIH1cblxuICAgICAgLy8gQWQgdmlkZW8ncyBpc0xpdmUoKSBtaWdodCBiZSBkaWZmZXJlbnQgdGhhbiB0aGUgYWN0dWFsIHZpZGVvJ3MgaXNMaXZlKCkuXG4gICAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQWRCcmVha1N0YXJ0ZWQsIGxpdmVEZXRlY3Rvcik7XG4gICAgICBwbGF5ZXIub24ocGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQWRCcmVha0ZpbmlzaGVkLCBsaXZlRGV0ZWN0b3IpO1xuICAgIH1cblxuICAgIGRldGVjdCgpOiB2b2lkIHtcbiAgICAgIGxldCBsaXZlTm93ID0gdGhpcy5wbGF5ZXIuaXNMaXZlKCk7XG5cbiAgICAgIC8vIENvbXBhcmUgY3VycmVudCB0byBwcmV2aW91cyBsaXZlIHN0YXRlIGZsYWcgYW5kIGZpcmUgZXZlbnQgd2hlbiBpdCBjaGFuZ2VzLiBTaW5jZSB3ZSBpbml0aWFsaXplIHRoZSBmbGFnXG4gICAgICAvLyB3aXRoIHVuZGVmaW5lZCwgdGhlcmUgaXMgYWx3YXlzIGF0IGxlYXN0IGFuIGluaXRpYWwgZXZlbnQgZmlyZWQgdGhhdCB0ZWxscyBsaXN0ZW5lcnMgdGhlIGxpdmUgc3RhdGUuXG4gICAgICBpZiAobGl2ZU5vdyAhPT0gdGhpcy5saXZlKSB7XG4gICAgICAgIHRoaXMubGl2ZUNoYW5nZWRFdmVudC5kaXNwYXRjaCh0aGlzLnBsYXllciwgeyBsaXZlOiBsaXZlTm93IH0pO1xuICAgICAgICB0aGlzLmxpdmUgPSBsaXZlTm93O1xuICAgICAgfVxuICAgIH1cblxuICAgIGdldCBvbkxpdmVDaGFuZ2VkKCk6IEV2ZW50PFBsYXllckFQSSwgTGl2ZVN0cmVhbURldGVjdG9yRXZlbnRBcmdzPiB7XG4gICAgICByZXR1cm4gdGhpcy5saXZlQ2hhbmdlZEV2ZW50LmdldEV2ZW50KCk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGNsYW1wVmFsdWVUb1JhbmdlKHZhbHVlOiBudW1iZXIsIGJvdW5kYXJ5MTogbnVtYmVyLCBib3VuZGFyeTI6IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3QgbG93ZXJCb3VuZGFyeSA9IE1hdGgubWluKGJvdW5kYXJ5MSwgYm91bmRhcnkyKTtcbiAgICBjb25zdCB1cHBlckJvdW5kYXJ5ID0gTWF0aC5tYXgoYm91bmRhcnkxLCBib3VuZGFyeTIpO1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh2YWx1ZSwgbG93ZXJCb3VuZGFyeSksIHVwcGVyQm91bmRhcnkpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOYXZpZ2F0aW9uR3JvdXAgfSBmcm9tICcuL25hdmlnYXRpb25ncm91cCc7XG5pbXBvcnQgeyBBY3Rpb24sIERpcmVjdGlvbiB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSAnLi4vY29tcG9uZW50cy9jb250YWluZXInO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9jb21wb25lbnQnO1xuXG5leHBvcnQgZW51bSBMaXN0T3JpZW50YXRpb24ge1xuICBIb3Jpem9udGFsID0gJ2hvcml6b250YWwnLFxuICBWZXJ0aWNhbCA9ICd2ZXJ0aWNhbCcsXG59XG5cbi8qKlxuICogQGNhdGVnb3J5IENvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGNsYXNzIExpc3ROYXZpZ2F0aW9uR3JvdXAgZXh0ZW5kcyBOYXZpZ2F0aW9uR3JvdXAge1xuICBwcml2YXRlIHJlYWRvbmx5IGxpc3ROYXZpZ2F0aW9uRGlyZWN0aW9uczogRGlyZWN0aW9uW107XG5cbiAgY29uc3RydWN0b3Iob3JpZW50YXRpb246IExpc3RPcmllbnRhdGlvbiwgY29udGFpbmVyOiBDb250YWluZXI8dW5rbm93bj4sIC4uLmNvbXBvbmVudHM6IENvbXBvbmVudDx1bmtub3duPltdKSB7XG4gICAgc3VwZXIoY29udGFpbmVyLCAuLi5jb21wb25lbnRzKTtcblxuICAgIHN3aXRjaCAob3JpZW50YXRpb24pIHtcbiAgICAgIGNhc2UgTGlzdE9yaWVudGF0aW9uLlZlcnRpY2FsOlxuICAgICAgICB0aGlzLmxpc3ROYXZpZ2F0aW9uRGlyZWN0aW9ucyA9IFtEaXJlY3Rpb24uVVAsIERpcmVjdGlvbi5ET1dOXTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgTGlzdE9yaWVudGF0aW9uLkhvcml6b250YWw6XG4gICAgICAgIHRoaXMubGlzdE5hdmlnYXRpb25EaXJlY3Rpb25zID0gW0RpcmVjdGlvbi5MRUZULCBEaXJlY3Rpb24uUklHSFRdO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgaGFuZGxlQWN0aW9uKGFjdGlvbjogQWN0aW9uKTogdm9pZCB7XG4gICAgc3VwZXIuaGFuZGxlQWN0aW9uKGFjdGlvbik7XG5cbiAgICBpZiAoYWN0aW9uID09PSBBY3Rpb24uU0VMRUNUKSB7XG4gICAgICAvLyBjbG9zZSB0aGUgY29udGFpbmVyIHdoZW4gYSBsaXN0IGVudHJ5IGlzIHNlbGVjdGVkXG4gICAgICB0aGlzLmhhbmRsZUFjdGlvbihBY3Rpb24uQkFDSyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGhhbmRsZU5hdmlnYXRpb24oZGlyZWN0aW9uOiBEaXJlY3Rpb24pOiB2b2lkIHtcbiAgICBzdXBlci5oYW5kbGVOYXZpZ2F0aW9uKGRpcmVjdGlvbik7XG5cbiAgICBpZiAoIXRoaXMubGlzdE5hdmlnYXRpb25EaXJlY3Rpb25zLmluY2x1ZGVzKGRpcmVjdGlvbikpIHtcbiAgICAgIC8vIGNsb3NlIHRoZSBjb250YWluZXIgb24gbmF2aWdhdGlvbiBpbnB1dHMgdGhhdCBkb24ndCBhbGlnblxuICAgICAgLy8gd2l0aCB0aGUgb3JpZW50YXRpb24gb2YgdGhlIGxpc3RcbiAgICAgIHRoaXMuaGFuZGxlQWN0aW9uKEFjdGlvbi5CQUNLKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvY29tcG9uZW50JztcbmltcG9ydCB7IENvbnRhaW5lciB9IGZyb20gJy4uL2NvbXBvbmVudHMvY29udGFpbmVyJztcbmltcG9ydCB7IGlzQ29tcG9uZW50LCBpc0NvbnRhaW5lciwgaXNMaXN0Qm94IH0gZnJvbSAnLi90eXBlZ3VhcmRzJztcblxuLyoqXG4gKiBSZWN1cnNpdmVseSByZXNvbHZlcyBhIGNvbnRhaW5lciBhbmQgdGhlIGNvbXBvbmVudHMgY29udGFpbmVkIHdpdGhpbiB0aGVtLCBidWlsZGluZyBhIGZsYXQgbGlzdCBvZiBjb21wb25lbnRzLlxuICpcbiAqIEBwYXJhbSBjb250YWluZXIgVGhlIGNvbnRhaW5lciB0byBnZXQgdGhlIGNvbnRhaW5lZCBjb21wb25lbnRzIGZyb21cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUFsbENvbXBvbmVudHMoY29udGFpbmVyOiBDb250YWluZXI8dW5rbm93bj4pOiBDb21wb25lbnQ8dW5rbm93bj5bXSB7XG4gIGNvbnN0IGNoaWxkQ29tcG9uZW50czogQ29tcG9uZW50PHVua25vd24+W10gPSBbXTtcblxuICBjb250YWluZXIuZ2V0Q29tcG9uZW50cygpLmZvckVhY2goY29udGFpbmVyT3JDb21wb25lbnQgPT4ge1xuICAgIGlmIChpc0NvbnRhaW5lcihjb250YWluZXJPckNvbXBvbmVudCkpIHtcbiAgICAgIGNoaWxkQ29tcG9uZW50cy5wdXNoKC4uLnJlc29sdmVBbGxDb21wb25lbnRzKGNvbnRhaW5lck9yQ29tcG9uZW50KSk7XG4gICAgfSBlbHNlIGlmIChpc0NvbXBvbmVudChjb250YWluZXJPckNvbXBvbmVudCkpIHtcbiAgICAgIGNoaWxkQ29tcG9uZW50cy5wdXNoKGNvbnRhaW5lck9yQ29tcG9uZW50KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjaGlsZENvbXBvbmVudHM7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgSFRNTCBlbGVtZW50cyBhc3NvY2lhdGVkIHRvIHRoZSBwcm92aWRlZCBjb21wb25lbnQuXG4gKlxuICogQHBhcmFtIGNvbXBvbmVudCBUaGUgY29tcG9uZW50IHRvIGdldCB0aGUgSFRNTCBlbGVtZW50cyBmcm9tXG4gKi9cbmZ1bmN0aW9uIHRvSHRtbEVsZW1lbnQoY29tcG9uZW50OiBDb21wb25lbnQ8dW5rbm93bj4pOiBIVE1MRWxlbWVudFtdIHtcbiAgaWYgKGlzTGlzdEJveChjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIFtdLnNsaWNlLmNhbGwoY29tcG9uZW50LmdldERvbUVsZW1lbnQoKS5nZXQoKVswXS5jaGlsZHJlbik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudC5nZXREb21FbGVtZW50KCkuZ2V0KCkuc2xpY2UoMCwgMSk7XG4gIH1cbn1cblxuLyoqXG4gKiBUYWtlcyB0aGUgcHJvdmlkZWQgbGlzdCBvZiBjb21wb25lbnRzIGFuZCBmbGF0LW1hcHMgdGhlbSB0byBhIGxpc3Qgb2YgdGhlaXIgcmVzcGVjdGl2ZSBIVE1MIGVsZW1lbnRzLiBJbiBjYXNlIGFcbiAqIHByb3ZpZGVkIGNvbXBvbmVudCBpcyBhIGNvbnRhaW5lciwgdGhlIGNoaWxkcmVuIG9mIHRoYXQgY29udGFpbmVyIHdpbGwgYmUgcmVzb2x2ZWQgcmVjdXJzaXZlbHkuIElnbm9yZXMgY29tcG9uZW50c1xuICogdGhhdCBhcmUgaGlkZGVuLlxuICpcbiAqIEBwYXJhbSBjb21wb25lbnRzIFRoZSBjb21wb25lbnRzIHRvIG1hcCB0byBIVE1MIGVsZW1lbnRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRIdG1sRWxlbWVudHNGcm9tQ29tcG9uZW50cyhjb21wb25lbnRzOiBDb21wb25lbnQ8dW5rbm93bj5bXSk6IEhUTUxFbGVtZW50W10ge1xuICBjb25zdCBodG1sRWxlbWVudHM6IEhUTUxFbGVtZW50W10gPSBbXTtcblxuICBjb21wb25lbnRzXG4gICAgLmZpbHRlcihjb21wb25lbnQgPT4gIWNvbXBvbmVudC5pc0hpZGRlbigpKVxuICAgIC5mb3JFYWNoKGNvbXBvbmVudCA9PiB7XG4gICAgICBjb25zdCBlbGVtZW50c1RvQ29uc2lkZXIgPSBjb21wb25lbnQgaW5zdGFuY2VvZiBDb250YWluZXIgPyByZXNvbHZlQWxsQ29tcG9uZW50cyhjb21wb25lbnQpIDogW2NvbXBvbmVudF07XG5cbiAgICAgIGVsZW1lbnRzVG9Db25zaWRlci5mb3JFYWNoKGNvbXBvbmVudCA9PiB7XG4gICAgICAgIGh0bWxFbGVtZW50cy5wdXNoKC4uLnRvSHRtbEVsZW1lbnQoY29tcG9uZW50KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICByZXR1cm4gaHRtbEVsZW1lbnRzO1xufVxuIiwiaW1wb3J0IHsgQWN0aW9uLCBEaXJlY3Rpb24sIEtleU1hcCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgQnJvd3NlclV0aWxzIH0gZnJvbSAnLi4vYnJvd3NlcnV0aWxzJztcblxuY29uc3QgVGl6ZW5LZXlNYXAgPSB7XG4gIGlzQXBwbGljYWJsZTogKCkgPT4gQnJvd3NlclV0aWxzLmlzVGl6ZW4sXG4gIGtleUNvZGVzOiB7XG4gICAgLy8gRC1wYWQgVXBcbiAgICAzODogRGlyZWN0aW9uLlVQLFxuICAgIC8vIEQtcGFkIERvd25cbiAgICA0MDogRGlyZWN0aW9uLkRPV04sXG4gICAgLy8gRC1wYWQgTGVmdFxuICAgIDM3OiBEaXJlY3Rpb24uTEVGVCxcbiAgICAvLyBELXBhZCBSaWdodFxuICAgIDM5OiBEaXJlY3Rpb24uUklHSFQsXG4gICAgLy8gRC1wYWQgT0tcbiAgICAxMzogQWN0aW9uLlNFTEVDVCxcbiAgICAvLyBCYWNrXG4gICAgMTAwMDk6IEFjdGlvbi5CQUNLLFxuICB9LFxufTtcblxuY29uc3QgV2ViT3NLZXlNYXAgPSB7XG4gIGlzQXBwbGljYWJsZTogKCkgPT4gQnJvd3NlclV0aWxzLmlzV2ViT3MsXG4gIGtleUNvZGVzOiB7XG4gICAgLy8gRC1wYWQgVXBcbiAgICAzODogRGlyZWN0aW9uLlVQLFxuICAgIC8vIEQtcGFkIERvd25cbiAgICA0MDogRGlyZWN0aW9uLkRPV04sXG4gICAgLy8gRC1wYWQgTGVmdFxuICAgIDM3OiBEaXJlY3Rpb24uTEVGVCxcbiAgICAvLyBELXBhZCBSaWdodFxuICAgIDM5OiBEaXJlY3Rpb24uUklHSFQsXG4gICAgLy8gRC1wYWQgT0tcbiAgICAxMzogQWN0aW9uLlNFTEVDVCxcbiAgICAvLyBCYWNrXG4gICAgNDYxOiBBY3Rpb24uQkFDSyxcbiAgfSxcbn07XG5cbmNvbnN0IFBsYXlTdGF0aW9uS2V5TWFwID0ge1xuICBpc0FwcGxpY2FibGU6ICgpID0+IEJyb3dzZXJVdGlscy5pc1BsYXlTdGF0aW9uLFxuICBrZXlDb2Rlczoge1xuICAgIC8vIEQtcGFkIFVwXG4gICAgMzg6IERpcmVjdGlvbi5VUCxcbiAgICAvLyBELXBhZCBEb3duXG4gICAgNDA6IERpcmVjdGlvbi5ET1dOLFxuICAgIC8vIEQtcGFkIExlZnRcbiAgICAzNzogRGlyZWN0aW9uLkxFRlQsXG4gICAgLy8gRC1wYWQgUmlnaHRcbiAgICAzOTogRGlyZWN0aW9uLlJJR0hULFxuICAgIC8vIENyb3NzXG4gICAgMTM6IEFjdGlvbi5TRUxFQ1QsXG4gICAgLy8gQ2lyY2xlXG4gICAgMjc6IEFjdGlvbi5CQUNLLFxuICB9LFxufTtcblxuY29uc3QgQW5kcm9pZEtleU1hcCA9IHtcbiAgaXNBcHBsaWNhYmxlOiAoKSA9PiBCcm93c2VyVXRpbHMuaXNBbmRyb2lkLFxuICBrZXlDb2Rlczoge1xuICAgIC8vIEQtcGFkIFVwXG4gICAgMTk6IERpcmVjdGlvbi5VUCxcbiAgICAvLyBELXBhZCBEb3duXG4gICAgMjA6IERpcmVjdGlvbi5ET1dOLFxuICAgIC8vIEQtcGFkIExlZnRcbiAgICAyMTogRGlyZWN0aW9uLkxFRlQsXG4gICAgLy8gRC1wYWQgUmlnaHRcbiAgICAyMjogRGlyZWN0aW9uLlJJR0hULFxuICAgIC8vIEQtcGFkIENlbnRlclxuICAgIDIzOiBBY3Rpb24uU0VMRUNULFxuICAgIC8vIEVudGVyXG4gICAgNjY6IEFjdGlvbi5TRUxFQ1QsXG4gICAgLy8gQmFja1xuICAgIDQ6IEFjdGlvbi5CQUNLLFxuICB9LFxufTtcblxuY29uc3QgSGlzZW5zZUtleU1hcCA9IHtcbiAgaXNBcHBsaWNhYmxlOiAoKSA9PiBCcm93c2VyVXRpbHMuaXNIaXNlbnNlLFxuICBrZXlDb2Rlczoge1xuICAgIC8vIEQtcGFkIFVwXG4gICAgMzg6IERpcmVjdGlvbi5VUCxcbiAgICAvLyBELXBhZCBEb3duXG4gICAgNDA6IERpcmVjdGlvbi5ET1dOLFxuICAgIC8vIEQtcGFkIExlZnRcbiAgICAzNzogRGlyZWN0aW9uLkxFRlQsXG4gICAgLy8gRC1wYWQgUmlnaHRcbiAgICAzOTogRGlyZWN0aW9uLlJJR0hULFxuICAgIC8vIE9LXG4gICAgMTM6IEFjdGlvbi5TRUxFQ1QsXG4gICAgLy8gQmFja1xuICAgIDg6IEFjdGlvbi5CQUNLLFxuICB9LFxufTtcblxuLy8gRGVmYXVsdCBrZXkgbWFwIHVzZWQgb24gZGVza3RvcHNcbmNvbnN0IERlZmF1bHRLZXlNYXAgPSB7XG4gIC8vIEFycm93IFVwXG4gIDM4OiBEaXJlY3Rpb24uVVAsXG4gIC8vIEFycm93IERvd25cbiAgNDA6IERpcmVjdGlvbi5ET1dOLFxuICAvLyBBcnJvdyBMZWZ0XG4gIDM3OiBEaXJlY3Rpb24uTEVGVCxcbiAgLy8gQXJyb3cgUmlnaHRcbiAgMzk6IERpcmVjdGlvbi5SSUdIVCxcbiAgLy8gRW50ZXJcbiAgMTM6IEFjdGlvbi5TRUxFQ1QsXG4gIC8vIEVzY2FwZVxuICAyNzogQWN0aW9uLkJBQ0ssXG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG1hdGNoaW5nIGtleSBtYXAgZm9yIHRoZSBjdXJyZW50IHBsYXRmb3JtLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0S2V5TWFwRm9yUGxhdGZvcm0oKTogS2V5TWFwIHtcbiAgY29uc3QgYXBwbGljYWJsZUtleU1hcCA9IFtcbiAgICBXZWJPc0tleU1hcCxcbiAgICBUaXplbktleU1hcCxcbiAgICBQbGF5U3RhdGlvbktleU1hcCxcbiAgICBIaXNlbnNlS2V5TWFwLFxuICAgIEFuZHJvaWRLZXlNYXAsXG4gIF0uZmluZChrZXlNYXAgPT4ga2V5TWFwLmlzQXBwbGljYWJsZSgpKTtcblxuICBpZiAoYXBwbGljYWJsZUtleU1hcCkge1xuICAgIHJldHVybiBhcHBsaWNhYmxlS2V5TWFwLmtleUNvZGVzO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBEZWZhdWx0S2V5TWFwO1xuICB9XG59XG4iLCJpbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tICcuL3R5cGVzJztcblxuaW50ZXJmYWNlIFZlY3RvciB7XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHZlY3Rvci5cbiAqXG4gKiBAcGFyYW0gdmVjdG9yIFRoZSB2ZWN0b3IgdG8gY2FsY3VsYXRlIHRoZSBsZW5ndGggb2ZcbiAqL1xuZnVuY3Rpb24gbGVuZ3RoKHZlY3RvcjogVmVjdG9yKTogbnVtYmVyIHtcbiAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyh2ZWN0b3IueCwgMikgKyBNYXRoLnBvdyh2ZWN0b3IueSwgMikpO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZXMgdGhlIGdpdmVuIHZlY3Rvci5cbiAqXG4gKiBAcGFyYW0gdmVjdG9yIFRoZSB2ZWN0b3IgdG8gbm9ybWFsaXplXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZSh2ZWN0b3I6IFZlY3Rvcik6IFZlY3RvciB7XG4gIGNvbnN0IGxlbiA9IGxlbmd0aCh2ZWN0b3IpO1xuXG4gIHJldHVybiB7XG4gICAgeDogdmVjdG9yLnggLyBsZW4sXG4gICAgeTogdmVjdG9yLnkgLyBsZW4sXG4gIH07XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3QgYmV0d2VlbiAyIHZlY3RvcnMuXG4gKlxuICogQHBhcmFtIGEgVGhlIGZpcnN0IHZlY3RvclxuICogQHBhcmFtIGIgVGhlIHNlY29uZCB2ZWN0b3JcbiAqL1xuZnVuY3Rpb24gZG90UHJvZHVjdChhOiBWZWN0b3IsIGI6IFZlY3Rvcik6IG51bWJlciB7XG4gIHJldHVybiBhLnggKiBiLnggKyBhLnkgKiBiLnk7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgMiBwb2ludHMgcG9pbnRlZCB0byBieSB0aGUgcHJvdmlkZWQgdmVjdG9ycy5cbiAqXG4gKiBAcGFyYW0gYSBUaGUgZmlyc3QgdmVjdG9yXG4gKiBAcGFyYW0gYiBUaGUgc2Vjb25kIHZlY3RvclxuICovXG5mdW5jdGlvbiBkaXN0YW5jZShhOiBWZWN0b3IsIGI6IFZlY3Rvcik6IG51bWJlciB7XG4gIHJldHVybiBsZW5ndGgoe1xuICAgIHg6IGIueCAtIGEueCxcbiAgICB5OiBiLnkgLSBhLnksXG4gIH0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSB2ZWN0b3IgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgY2VudGVyIG9mIHRoZSBwcm92aWRlZCBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIGdldCB0aGUgY2VudGVyIG9mXG4gKi9cbmZ1bmN0aW9uIGdldEVsZW1lbnRWZWN0b3IoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBWZWN0b3Ige1xuICBjb25zdCBib3VuZGluZ1JlY3QgPSBnZXRCb3VuZGluZ1JlY3RGcm9tRWxlbWVudChlbGVtZW50KTtcblxuICByZXR1cm4ge1xuICAgIHg6IGJvdW5kaW5nUmVjdC54ICsgYm91bmRpbmdSZWN0LndpZHRoIC8gMixcbiAgICB5OiBib3VuZGluZ1JlY3QueSArIGJvdW5kaW5nUmVjdC5oZWlnaHQgLyAyLFxuICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGFuZ2xlIGluIGRlZ3JlZXMgYmV0d2VlbiB0aGUgdW5pdCB2ZWN0b3IgcG9pbnRpbmcgaW4gdGhlIGdpdmVuIHtEaXJlY3Rpb259IGFuZCB0aGUgdW5pdCB2ZWN0b3IgdGhhdFxuICogcG9pbnRzIGZyb20gdGhlIGN1cnJlbnQgZWxlbWVudCB0byBhbm90aGVyIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIGEgVGhlIHZlY3RvciBvZiB0aGUgY3VycmVudCBlbGVtZW50XG4gKiBAcGFyYW0gYiBUaGUgdmVjdG9yIG9mIHRoZSBvdGhlciBlbGVtZW50XG4gKiBAcGFyYW0gZGlyZWN0aW9uIFRoZSBkaXJlY3Rpb24gdG8gbW92ZSBhbG9uZ1xuICovXG5mdW5jdGlvbiBjYWxjdWxhdGVBbmdsZShhOiBWZWN0b3IsIGI6IFZlY3RvciwgZGlyZWN0aW9uOiBEaXJlY3Rpb24pOiBudW1iZXIge1xuICBjb25zdCBkaXJlY3Rpb25WZWN0b3IgPSB7XG4gICAgeDogKGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLkxFRlQgPyAtMSA6IGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLlJJR0hUID8gMSA6IDApLFxuICAgIHk6IChkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5VUCA/IC0xIDogZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uRE9XTiA/IDEgOiAwKSxcbiAgfTtcblxuICBjb25zdCBlbGVtZW50VmVjdG9yID0gbm9ybWFsaXplKHtcbiAgICB4OiBiLnggLSBhLngsXG4gICAgeTogYi55IC0gYS55LFxuICB9KTtcblxuICBjb25zdCBhbmdsZUNvcyA9IGRvdFByb2R1Y3QoZGlyZWN0aW9uVmVjdG9yLCBlbGVtZW50VmVjdG9yKSAvIChsZW5ndGgoZGlyZWN0aW9uVmVjdG9yKSAqIGxlbmd0aChlbGVtZW50VmVjdG9yKSk7XG5cbiAgcmV0dXJuIE1hdGguYWNvcyhhbmdsZUNvcykgKiAxODAgLyBNYXRoLlBJO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGNsb3Nlc3QgZWxlbWVudCB0byB0aGUgY3VycmVudCBlbGVtZW50IHdoZW4gdHJ5aW5nIHRvIG5hdmlnYXRlIGluIHRoZSBwcm92aWRlZCBkaXJlY3Rpb24uIFJldHVybnNcbiAqIHVuZGVmaW5lZCwgaWYgdGhlcmUgaXMgbm90IGVsZW1lbnQgaW4gdGhlIGdpdmVuIGRpcmVjdGlvbi5cbiAqXG4gKiBAcGFyYW0gYWN0aXZlRWxlbWVudCBUaGUgY3VycmVudGx5IHNlbGVjdGVkIGVsZW1lbnRcbiAqIEBwYXJhbSBlbGVtZW50cyBUaGUgbGlzdCBvZiBhbGwgZWxlbWVudHMgdGhhdCBjYW4gYmUgbmF2aWdhdGVkIHRvXG4gKiBAcGFyYW0gZGlyZWN0aW9uIFRoZSBkaXJlY3Rpb24gaW4gd2hpY2ggdG8gbmF2aWdhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnRJbkRpcmVjdGlvbihcbiAgYWN0aXZlRWxlbWVudDogSFRNTEVsZW1lbnQsXG4gIGVsZW1lbnRzOiBIVE1MRWxlbWVudFtdLFxuICBkaXJlY3Rpb246IERpcmVjdGlvbixcbik6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkIHtcbiAgaWYgKCFhY3RpdmVFbGVtZW50KSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gIGNvbnN0IGN1dG9mZkFuZ2xlID0gNDU7XG4gIGNvbnN0IGFjdGl2ZUVsZW1WZWN0b3IgPSBnZXRFbGVtZW50VmVjdG9yKGFjdGl2ZUVsZW1lbnQpO1xuXG4gIHJldHVybiBlbGVtZW50c1xuICAgIC8vIGRvbid0IHRha2UgdGhlIGN1cnJlbnQgZWxlbWVudCBpbnRvIGFjY291bnRcbiAgICAuZmlsdGVyKGVsZW0gPT4gZWxlbSAhPT0gYWN0aXZlRWxlbWVudClcbiAgICAvLyBnZXQgdGhlIGFuZ2xlIGJldHdlZW4sIGFuZCBkaXN0YW5jZSB0byBhbnkgb3RoZXIgZWxlbWVudCBmcm9tIHRoZSBjdXJyZW50IGVsZW1lbnRcbiAgICAubWFwKGVsZW1lbnQgPT4ge1xuICAgICAgY29uc3QgZWxlbWVudFZlY3RvciA9IGdldEVsZW1lbnRWZWN0b3IoZWxlbWVudCk7XG4gICAgICBjb25zdCBkaXN0ID0gZGlzdGFuY2UoYWN0aXZlRWxlbVZlY3RvciwgZWxlbWVudFZlY3Rvcik7XG4gICAgICBjb25zdCBhbmdsZSA9IGNhbGN1bGF0ZUFuZ2xlKGFjdGl2ZUVsZW1WZWN0b3IsIGVsZW1lbnRWZWN0b3IsIGRpcmVjdGlvbik7XG5cbiAgICAgIHJldHVybiB7IGFuZ2xlLCBkaXN0LCBlbGVtZW50IH07XG4gICAgfSlcbiAgICAvLyBmaWx0ZXIgb3V0IGFueSBlbGVtZW50cyB0aGF0IGRvbid0IGFsaWduIHdpdGggdGhlIGRpcmVjdGlvbiB3ZSdyZSB0cnlpbmcgdG8gbW92ZSBpblxuICAgIC5maWx0ZXIoKHsgYW5nbGUgfSkgPT4gYW5nbGUgPD0gY3V0b2ZmQW5nbGUpXG4gICAgLy8gc29ydCB0aGUgcmVzdWx0aW5nIGVsZW1lbnRzIGJhc2VkIG9uIHRoZWlyIGRpc3RhbmNlIHRvIHRoZSBjdXJyZW50IGVsZW1lbnQgaW4gYXNjZW5kaW5nIG9yZGVyXG4gICAgLnNvcnQoKHsgYW5nbGU6IGFuZ2xlQSwgZGlzdDogZGlzdEEgfSwgeyBhbmdsZTogYW5nbGVCLCBkaXN0OiBkaXN0QiB9KSA9PiAoYW5nbGVBIC0gYW5nbGVCKSArIChkaXN0QSAtIGRpc3RCKSlcbiAgICAvLyByZXR1cm4gdGhlIGVsZW1lbnQgY2xvc2VzdCB0byB0aGUgY3VycmVudCBlbGVtZW50XG4gICAgLnNoaWZ0KCk/LmVsZW1lbnQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBET01SZWN0IGxpa2Ugb2JqZWN0IGNvbnRhaW5pbmcgaG9yaXpvbnRhbCBYIGFuZCB2ZXJ0aWNhbCBZIGNvb3JkaW5hdGVzIGZyb20gYW5kIEhUTUxFbGVtZW50LlxuICogSGFuZGxlcyB1c2UtY2FzZXMgZm9yIGdldEJvdW5kaW5nQ2xpZW50UmVjdCB3aGVuIHRoZSByZXR1cm4gdHlwZSBjYW4gYmUgZWl0aGVyXG4gKiBhIENsaWVudFJlY3Qgb3IgRE9NUmVjdCBvYmplY3QgdHlwZS5cbiAqXG4gKiBAcGFyYW0gZWxlbWVudCBUaGUgY3VycmVudGx5IHNlbGVjdGVkIGVsZW1lbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJvdW5kaW5nUmVjdEZyb21FbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gIGNvbnN0IGJvdW5kaW5nUmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgaWYgKHR5cGVvZiBib3VuZGluZ1JlY3QueCAhPT0gJ251bWJlcicgJiYgdHlwZW9mIGJvdW5kaW5nUmVjdC55ICE9PSAnbnVtYmVyJykge1xuICAgIGJvdW5kaW5nUmVjdC54ID0gYm91bmRpbmdSZWN0LmxlZnQ7XG4gICAgYm91bmRpbmdSZWN0LnkgPSBib3VuZGluZ1JlY3QudG9wO1xuICB9XG5cbiAgcmV0dXJuIGJvdW5kaW5nUmVjdDtcbn1cblxuIiwiaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSAnLi4vY29tcG9uZW50cy9jb250YWluZXInO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9jb21wb25lbnQnO1xuaW1wb3J0IHsgZ2V0RWxlbWVudEluRGlyZWN0aW9uIH0gZnJvbSAnLi9uYXZpZ2F0aW9uYWxnb3JpdGhtJztcbmltcG9ydCB7IGdldEh0bWxFbGVtZW50c0Zyb21Db21wb25lbnRzIH0gZnJvbSAnLi9nZXRodG1sZWxlbWVudHNmcm9tY29tcG9uZW50cyc7XG5pbXBvcnQgeyBOb2RlRXZlbnRTdWJzY3JpYmVyIH0gZnJvbSAnLi9ub2RlZXZlbnRzdWJzY3JpYmVyJztcbmltcG9ydCB7IGlzU2V0dGluZ3NQYW5lbCB9IGZyb20gJy4vdHlwZWd1YXJkcyc7XG5pbXBvcnQgeyBBY3Rpb24sIEFjdGlvbkNhbGxiYWNrLCBDYWxsYmFjaywgRGlyZWN0aW9uLCBOYXZpZ2F0aW9uQ2FsbGJhY2sgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBVc2VkIGFzIHBhcnQgb2Ygc3BhdGlhbCBuYXZpZ2F0aW9uLiBHcm91cHMgdG9nZXRoZXIgZGlmZmVyZW50IGNvbXBvbmVudHMgdG8gd2hpY2ggeW91IGNhbiBuYXZpZ2F0ZSB0bywgaW4gYSBzaW5nbGVcbiAqIG5hdmlnYXRpb24gZ3JvdXAuXG4gKlxuICogUmVzcG9uc2libGUgZm9yIGZpbmRpbmcgZWxlbWVudHMgaW4gZGlyZWN0aW9uIG9uIG5hdmlnYXRpb24gYW5kIGZvciB0cmFja2luZyBhY3RpdmUgZWxlbWVudCBpbnNpZGUgdGhlIGdyb3VwLlxuICogVHJpZ2dlcnMgYmx1ciBhbmQgZm9jdXMgb24gZWxlbWVudCB3aGVuIGFjdGl2ZSBlbGVtZW50IGlzIGNoYW5nZWQsIGFzIHdlbGwgYXMgY2xpY2sgb24gZWxlbWVudCBvbiBgQWN0aW9uLlNFTEVDVGAuXG4gKiBXaWxsIGNhbGwgYGhpZGVVaSgpYCBvbiBwYXNzZWQgaW4gY29udGFpbmVyIGlmIGBBY3Rpb24uQkFDS2AgaXMgY2FsbGVkLlxuICpcbiAqIEBjYXRlZ29yeSBDb21wb25lbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBOYXZpZ2F0aW9uR3JvdXAge1xuICBwcml2YXRlIGFjdGl2ZUVsZW1lbnQ/OiBIVE1MRWxlbWVudDtcbiAgcHJpdmF0ZSBhY3RpdmVFbGVtZW50QmVmb3JlRGlzYWJsZT86IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIHJlYWRvbmx5IGNvbXBvbmVudHM6IENvbXBvbmVudDx1bmtub3duPltdO1xuICBwcml2YXRlIHJlbW92ZUVsZW1lbnRIb3ZlckV2ZW50TGlzdGVuZXJzID0gKCkgPT4ge307XG4gIHByaXZhdGUgcmVhZG9ubHkgZXZlbnRTdWJzY3JpYmVyOiBOb2RlRXZlbnRTdWJzY3JpYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBjb250YWluZXI6IENvbnRhaW5lcjx1bmtub3duPiwgLi4uY29tcG9uZW50czogQ29tcG9uZW50PHVua25vd24+W10pIHtcbiAgICB0aGlzLmNvbXBvbmVudHMgPSBjb21wb25lbnRzO1xuICAgIHRoaXMuZXZlbnRTdWJzY3JpYmVyID0gbmV3IE5vZGVFdmVudFN1YnNjcmliZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiBvdmVyd3JpdHRlbiwgYWxsb3dzIHRvIGltcGxlbWVudCBjdXN0b20gbmF2aWdhdGlvbiBiZWhhdmlvci4gUGVyIGRlZmF1bHQsIHRoZSBpbnRlcm5hbCBoYW5kbGVyIHdpbGwgc3RpbGwgYmVcbiAgICogZXhlY3V0ZWQuIFRvIHByZXZlbnQgZXhlY3V0aW9uIG9mIHRoZSBkZWZhdWx0IG5hdmlnYXRpb24gaGFuZGxlciwgY2FsbCBgcHJldmVudERlZmF1bHQoKWA7XG4gICAqXG4gICAqIEBwYXJhbSBkaXJlY3Rpb24ge0RpcmVjdGlvbn0gVGhlIGRpcmVjdGlvbiB0byBtb3ZlIGFsb25nXG4gICAqIEBwYXJhbSB0YXJnZXQge0hUTUxFbGVtZW50fSBUaGUgdGFyZ2V0IGVsZW1lbnQgZm9yIHRoZSBldmVudFxuICAgKiBAcGFyYW0gcHJldmVudERlZmF1bHQgeygpID0+IHZvaWR9IEEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIHdpbGwgcHJldmVudCB0aGUgZXhlY3V0aW9uIG9mIHRoZSBkZWZhdWx0IGhhbmRsZXJcbiAgICovXG4gIHB1YmxpYyBvbk5hdmlnYXRpb24/OiBOYXZpZ2F0aW9uQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIElmIG92ZXJ3cml0dGVuLCBhbGxvd3MgdG8gaW1wbGVtZW50IGN1c3RvbSBhY3Rpb24gYmVoYXZpb3IuIFBlciBkZWZhdWx0LCB0aGUgaW50ZXJuYWwgaGFuZGxlciB3aWxsIHN0aWxsIGJlXG4gICAqIGV4ZWN1dGVkLiBUbyBwcmV2ZW50IGV4ZWN1dGlvbiBvZiB0aGUgZGVmYXVsdCBhY3Rpb24gaGFuZGxlciwgY2FsbCBgcHJldmVudERlZmF1bHQoKWA7XG4gICAqXG4gICAqIEBwYXJhbSBhY3Rpb24ge0FjdGlvbn0gVGhlIGFjdGlvbiB0aGF0IHdhcyBjYWxsZWRcbiAgICogQHBhcmFtIHRhcmdldCB7SFRNTEVsZW1lbnR9IFRoZSB0YXJnZXQgZWxlbWVudCB0aGF0IGFjdGlvbiB3YXMgY2FsbGVkIG9uXG4gICAqIEBwYXJhbSBwcmV2ZW50RGVmYXVsdCB7KCkgPT4gdm9pZH0gQSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgd2lsbCBwcmV2ZW50IHRoZSBleGVjdXRpb24gb2YgdGhlIGRlZmF1bHQgaGFuZGxlclxuICAgKi9cbiAgcHVibGljIG9uQWN0aW9uPzogQWN0aW9uQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFjdGl2ZSBIVE1MRWxlbWVudC5cbiAgICovXG4gIHB1YmxpYyBnZXRBY3RpdmVFbGVtZW50KCk6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmVFbGVtZW50O1xuICB9XG5cbiAgcHJpdmF0ZSBmb2N1c0VsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICB0aGlzLmJsdXJBY3RpdmVFbGVtZW50KCk7XG4gICAgdGhpcy5hY3RpdmVFbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLmFjdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgfVxuXG4gIHByaXZhdGUgYmx1ckFjdGl2ZUVsZW1lbnQoKTogdm9pZCB7XG4gICAgdGhpcy5hY3RpdmVFbGVtZW50Py5ibHVyKCk7XG4gIH1cblxuICBwcml2YXRlIGZvY3VzRmlyc3RFbGVtZW50KCk6IHZvaWQge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBnZXRIdG1sRWxlbWVudHNGcm9tQ29tcG9uZW50cyh0aGlzLmNvbXBvbmVudHMpWzBdO1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICB0aGlzLmZvY3VzRWxlbWVudChlbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgZGVmYXVsdE5hdmlnYXRpb25IYW5kbGVyKGRpcmVjdGlvbjogRGlyZWN0aW9uKTogdm9pZCB7XG4gICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9IGdldEVsZW1lbnRJbkRpcmVjdGlvbihcbiAgICAgIHRoaXMuYWN0aXZlRWxlbWVudCxcbiAgICAgIGdldEh0bWxFbGVtZW50c0Zyb21Db21wb25lbnRzKHRoaXMuY29tcG9uZW50cyksXG4gICAgICBkaXJlY3Rpb24sXG4gICAgKTtcblxuICAgIGlmICh0YXJnZXRFbGVtZW50KSB7XG4gICAgICB0aGlzLmZvY3VzRWxlbWVudCh0YXJnZXRFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgZGVmYXVsdEFjdGlvbkhhbmRsZXIoYWN0aW9uOiBBY3Rpb24pOiB2b2lkIHtcbiAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgY2FzZShBY3Rpb24uU0VMRUNUKTpcbiAgICAgICAgdGhpcy5hY3RpdmVFbGVtZW50LmNsaWNrKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZShBY3Rpb24uQkFDSyk6XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmhpZGUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVJbnB1dDxUPihkYXRhOiBULCBkZWZhdWx0SGFuZGxlcjogKGRhdGE6IFQpID0+IHZvaWQsIHVzZXJIYW5kbGVyPzogQ2FsbGJhY2s8VD4pOiB2b2lkIHtcbiAgICBsZXQgaGFuZGxlRGVmYXVsdCA9IHRydWU7XG4gICAgY29uc3QgcHJldmVudERlZmF1bHQgPSAoKSA9PiAoaGFuZGxlRGVmYXVsdCA9IGZhbHNlKTtcblxuICAgIHVzZXJIYW5kbGVyPy4oZGF0YSwgdGhpcy5hY3RpdmVFbGVtZW50LCBwcmV2ZW50RGVmYXVsdCk7XG5cbiAgICBpZiAoaGFuZGxlRGVmYXVsdCkge1xuICAgICAgZGVmYXVsdEhhbmRsZXIuY2FsbCh0aGlzLCBkYXRhKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBhIG5hdmlnYXRpb24gZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSBkaXJlY3Rpb24gVGhlIGRpcmVjdGlvbiBvZiB0aGUgbmF2aWdhdGlvbiBldmVudFxuICAgKi9cbiAgcHVibGljIGhhbmRsZU5hdmlnYXRpb24oZGlyZWN0aW9uOiBEaXJlY3Rpb24pOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuYWN0aXZlRWxlbWVudCkge1xuICAgICAgLy8gSWYgd2UgZG8gbm90IGhhdmUgYW4gYWN0aXZlIGVsZW1lbnQsIHRoZSBhY3RpdmUgZWxlbWVudCBoYXMgYmVlbiBkaXNhYmxlZCBieSBhIG1vdXNlbGVhdmVcbiAgICAgIC8vIGV2ZW50LiBXZSBzaG91bGQgY29udGludWUgdGhlIG5hdmlnYXRpb24gYXQgdGhlIGV4YWN0IHBsYWNlIHdoZXJlIHdlIGxlZnQgb2ZmLlxuICAgICAgaWYgKHRoaXMuYWN0aXZlRWxlbWVudEJlZm9yZURpc2FibGUpIHtcbiAgICAgICAgdGhpcy5mb2N1c0VsZW1lbnQodGhpcy5hY3RpdmVFbGVtZW50QmVmb3JlRGlzYWJsZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmZvY3VzRmlyc3RFbGVtZW50KCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuaGFuZGxlSW5wdXQoZGlyZWN0aW9uLCB0aGlzLmRlZmF1bHROYXZpZ2F0aW9uSGFuZGxlciwgdGhpcy5vbk5hdmlnYXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgYW4gYWN0aW9uIGV2ZW50LlxuICAgKlxuICAgKiBAcGFyYW0gYWN0aW9uIFRoZSBhY3Rpb24gb2YgdGhlIGV2ZW50XG4gICAqL1xuICBwdWJsaWMgaGFuZGxlQWN0aW9uKGFjdGlvbjogQWN0aW9uKTogdm9pZCB7XG4gICAgdGhpcy5oYW5kbGVJbnB1dChhY3Rpb24sIHRoaXMuZGVmYXVsdEFjdGlvbkhhbmRsZXIsIHRoaXMub25BY3Rpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc2FibGUgbmF2aWdhdGlvbiBncm91cFxuICAgKlxuICAgKiBDYWxsIGJsdXIgb24gYWN0aXZlIGVsZW1lbnQsIHNldCBhcyB1bmRlZmluZWQsIGFuZCB0cmFjayBpdCBhcyBlbGVtZW50IGJlZm9yZSBkaXNhYmxlLlxuICAgKi9cbiAgcHVibGljIGRpc2FibGUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuYWN0aXZlRWxlbWVudCkge1xuICAgICAgdGhpcy5hY3RpdmVFbGVtZW50QmVmb3JlRGlzYWJsZSA9IHRoaXMuYWN0aXZlRWxlbWVudDtcbiAgICAgIHRoaXMuYmx1ckFjdGl2ZUVsZW1lbnQoKTtcbiAgICAgIHRoaXMuYWN0aXZlRWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRW5hYmxlIG5hdmlnYXRpb24gZ3JvdXBcbiAgICpcbiAgICogU2V0cyBhY3RpdmUgZWxlbWVudCB0byBlaXRoZXIgZWxlbWVudCB0aGF0IHdhcyBhY3RpdmUgYmVmb3JlIGRpc2FibGUsIG9yIGZpcnN0IGVsZW1lbnQgb2YgdHJhY2tlZCBlbGVtZW50cy5cbiAgICogSWYgaXQgaXMgc2V0dGluZ3MgcGFuZWwsIGl0IHdpbGwgYWx3YXlzIGZvY3VzIGZpcnN0IGVsZW1lbnQgaW4gdGhlIGxpc3QuXG4gICAqL1xuICBwdWJsaWMgZW5hYmxlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmFjdGl2ZUVsZW1lbnRCZWZvcmVEaXNhYmxlICYmICFpc1NldHRpbmdzUGFuZWwodGhpcy5jb250YWluZXIpKSB7XG4gICAgICB0aGlzLmZvY3VzRWxlbWVudCh0aGlzLmFjdGl2ZUVsZW1lbnRCZWZvcmVEaXNhYmxlKTtcbiAgICAgIHRoaXMuYWN0aXZlRWxlbWVudEJlZm9yZURpc2FibGUgPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZm9jdXNGaXJzdEVsZW1lbnQoKTtcbiAgICB9XG5cbiAgICB0aGlzLnRyYWNrRWxlbWVudEhvdmVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBsaXN0ZW5lciBmb3IgYG1vdXNlZW50ZXJgIG9uIHRyYWNrZWQgZWxlbWVudHMgdG8gZW5zdXJlIHRyYWNraW5nIG9mIGFjdGl2ZSBlbGVtZW50IHdpbGwgd29yayB0b2dldGhlclxuICAgKiBpbiBjb21iaW5hdGlvbiBvZiB1c2luZyBtb3VzZSBhbmQga2V5IGV2ZW50cy5cbiAgICovXG4gIHByaXZhdGUgdHJhY2tFbGVtZW50SG92ZXIoKTogdm9pZCB7XG4gICAgdGhpcy5yZW1vdmVFbGVtZW50SG92ZXJFdmVudExpc3RlbmVycygpO1xuXG4gICAgY29uc3QgcmVtb3ZlRXZlbnRMaXN0ZW5lckZ1bmN0aW9ucyA9IGdldEh0bWxFbGVtZW50c0Zyb21Db21wb25lbnRzKHRoaXMuY29tcG9uZW50cykubWFwKGh0bWxFbGVtID0+IHtcbiAgICAgIGNvbnN0IGVudGVyTGlzdGVuZXIgPSB0aGlzLmZvY3VzRWxlbWVudC5iaW5kKHRoaXMsIGh0bWxFbGVtKTtcbiAgICAgIGNvbnN0IGV4aXRMaXN0ZW5lciA9ICgpID0+IHRoaXMuZGlzYWJsZSgpO1xuXG4gICAgICB0aGlzLmV2ZW50U3Vic2NyaWJlci5vbihodG1sRWxlbSwgJ21vdXNlZW50ZXInLCBlbnRlckxpc3RlbmVyKTtcbiAgICAgIHRoaXMuZXZlbnRTdWJzY3JpYmVyLm9uKGh0bWxFbGVtLCAnbW91c2VsZWF2ZScsIGV4aXRMaXN0ZW5lcik7XG5cbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHRoaXMuZXZlbnRTdWJzY3JpYmVyLm9mZihodG1sRWxlbSwgJ21vdXNlZW50ZXInLCBlbnRlckxpc3RlbmVyKTtcbiAgICAgICAgdGhpcy5ldmVudFN1YnNjcmliZXIub2ZmKGh0bWxFbGVtLCAnbW91c2VsZWF2ZScsIGV4aXRMaXN0ZW5lcik7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgdGhpcy5yZW1vdmVFbGVtZW50SG92ZXJFdmVudExpc3RlbmVycyA9ICgpID0+IHJlbW92ZUV2ZW50TGlzdGVuZXJGdW5jdGlvbnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwb3NlIG9mIG5hdmlnYXRpb24gZ3JvdXBcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIHRoaXMuZXZlbnRTdWJzY3JpYmVyLnJlbGVhc2UoKTtcbiAgICB0aGlzLmFjdGl2ZUVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jb21wb25lbnRzLnNwbGljZSgwLCB0aGlzLmNvbXBvbmVudHMubGVuZ3RoKTtcbiAgICB0aGlzLnJlbW92ZUVsZW1lbnRIb3ZlckV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cbn1cbiIsInR5cGUgTGlzdGVuZXJzID0gKFtOb2RlLCBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0LCBib29sZWFuIHwgQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnNdKVtdO1xuXG4vKipcbiAqIEFsbG93cyB0byBzdWJzY3JpYmUgdG8gTm9kZSBldmVudHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBOb2RlRXZlbnRTdWJzY3JpYmVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBhdHRhY2hlZExpc3RlbmVyczogTWFwPGtleW9mIEhUTUxFbGVtZW50RXZlbnRNYXAsIExpc3RlbmVycz47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5hdHRhY2hlZExpc3RlbmVycyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RXZlbnRMaXN0ZW5lcnNPZlR5cGUodHlwZToga2V5b2YgSFRNTEVsZW1lbnRFdmVudE1hcCk6IExpc3RlbmVycyB7XG4gICAgaWYgKCF0aGlzLmF0dGFjaGVkTGlzdGVuZXJzLmhhcyh0eXBlKSkge1xuICAgICAgdGhpcy5hdHRhY2hlZExpc3RlbmVycy5zZXQodHlwZSwgW10pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmF0dGFjaGVkTGlzdGVuZXJzLmdldCh0eXBlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIHRoZSBnaXZlbiBldmVudCBsaXN0ZW5lciB0byB0aGUgbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIG5vZGUgVGhlIG5vZGUgdG8gcmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lciBmcm9tXG4gICAqIEBwYXJhbSB0eXBlIFRoZSBldmVudCB0byBsaXN0ZW4gdG9cbiAgICogQHBhcmFtIGxpc3RlbmVyIFRoZSBsaXN0ZW5lciB0byByZW1vdmVcbiAgICogQHBhcmFtIG9wdGlvbnMgVGhlIGV2ZW50IGxpc3RlbmVyIG9wdGlvbnNcbiAgICovXG4gIHB1YmxpYyBvbihcbiAgICBub2RlOiBOb2RlLFxuICAgIHR5cGU6IGtleW9mIEhUTUxFbGVtZW50RXZlbnRNYXAsXG4gICAgbGlzdGVuZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3QsXG4gICAgb3B0aW9ucz86IGJvb2xlYW4gfCBBZGRFdmVudExpc3RlbmVyT3B0aW9ucyxcbiAgKTogdm9pZCB7XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgICB0aGlzLmdldEV2ZW50TGlzdGVuZXJzT2ZUeXBlKHR5cGUpLnB1c2goW25vZGUsIGxpc3RlbmVyLCBvcHRpb25zXSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgZ2l2ZW4gZXZlbnQgbGlzdGVuZXIgZnJvbSB0aGUgbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIG5vZGUgVGhlIG5vZGUgdG8gYXR0YWNoIHRoZSBldmVudCBsaXN0ZW5lciB0b1xuICAgKiBAcGFyYW0gdHlwZSBUaGUgZXZlbnQgdG8gbGlzdGVuIHRvXG4gICAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgbGlzdGVuZXIgdG8gYWRkXG4gICAqIEBwYXJhbSBvcHRpb25zIFRoZSBldmVudCBsaXN0ZW5lciBvcHRpb25zXG4gICAqL1xuICBwdWJsaWMgb2ZmKFxuICAgIG5vZGU6IE5vZGUsXG4gICAgdHlwZToga2V5b2YgSFRNTEVsZW1lbnRFdmVudE1hcCxcbiAgICBsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdCxcbiAgICBvcHRpb25zPzogYm9vbGVhbiB8IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zLFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBsaXN0ZW5lcnNPZlR5cGUgPSB0aGlzLmdldEV2ZW50TGlzdGVuZXJzT2ZUeXBlKHR5cGUpO1xuICAgIGNvbnN0IGxpc3RlbmVySW5kZXggPSBsaXN0ZW5lcnNPZlR5cGUuZmluZEluZGV4KChbb3RoZXJOb2RlLCBvdGhlckxpc3RlbmVyLCBvdGhlck9wdGlvbnNdKSA9PiB7XG4gICAgICByZXR1cm4gb3RoZXJOb2RlID09PSBub2RlICYmIG90aGVyTGlzdGVuZXIgPT09IGxpc3RlbmVyICYmIG90aGVyT3B0aW9ucyA9PT0gb3B0aW9ucztcbiAgICB9KTtcblxuICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG5cbiAgICBpZiAobGlzdGVuZXJJbmRleCA+IC0xKSB7XG4gICAgICBsaXN0ZW5lcnNPZlR5cGUuc3BsaWNlKGxpc3RlbmVySW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBhdHRhY2hlZCBldmVudCBsaXN0ZW5lcnMuXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLmF0dGFjaGVkTGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyc09mVHlwZSwgdHlwZSkgPT4ge1xuICAgICAgbGlzdGVuZXJzT2ZUeXBlLmZvckVhY2goKFtlbGVtZW50LCBsaXN0ZW5lciwgb3B0aW9uc10pID0+IHtcbiAgICAgICAgdGhpcy5vZmYoZWxlbWVudCwgdHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5hdHRhY2hlZExpc3RlbmVycy5jbGVhcigpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOYXZpZ2F0aW9uR3JvdXAgfSBmcm9tICcuL25hdmlnYXRpb25ncm91cCc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBVSUNvbnRhaW5lciB9IGZyb20gJy4uL2NvbXBvbmVudHMvdWljb250YWluZXInO1xuaW1wb3J0IHsgQWN0aW9uLCBEaXJlY3Rpb24gfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBFeHRlbmRzIE5hdmlnYXRpb25Hcm91cCBhbmQgcHJvdmlkZXMgYWRkaXRpb25hbCBsb2dpYyBmb3IgaGlkaW5nIGFuZCBzaG93aW5nIHRoZSBVSSBvbiB0aGUgcm9vdCBjb250YWluZXIuXG4gKlxuICogQGNhdGVnb3J5IENvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGNsYXNzIFJvb3ROYXZpZ2F0aW9uR3JvdXAgZXh0ZW5kcyBOYXZpZ2F0aW9uR3JvdXAge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgY29udGFpbmVyOiBVSUNvbnRhaW5lciwgLi4uZWxlbWVudHM6IENvbXBvbmVudDx1bmtub3duPltdKSB7XG4gICAgc3VwZXIoY29udGFpbmVyLCAuLi5lbGVtZW50cyk7XG4gIH1cblxuICBwdWJsaWMgaGFuZGxlQWN0aW9uKGFjdGlvbjogQWN0aW9uKSB7XG4gICAgdGhpcy5jb250YWluZXIuc2hvd1VpKCk7XG5cbiAgICBzdXBlci5oYW5kbGVBY3Rpb24oYWN0aW9uKTtcbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVOYXZpZ2F0aW9uKGRpcmVjdGlvbjogRGlyZWN0aW9uKSB7XG4gICAgdGhpcy5jb250YWluZXIuc2hvd1VpKCk7XG5cbiAgICBzdXBlci5oYW5kbGVOYXZpZ2F0aW9uKGRpcmVjdGlvbik7XG4gIH1cblxuICBwcm90ZWN0ZWQgZGVmYXVsdEFjdGlvbkhhbmRsZXIoYWN0aW9uOiBBY3Rpb24pOiB2b2lkIHtcbiAgICBpZiAoYWN0aW9uID09PSBBY3Rpb24uQkFDSykge1xuICAgICAgdGhpcy5jb250YWluZXIuaGlkZVVpKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1cGVyLmRlZmF1bHRBY3Rpb25IYW5kbGVyKGFjdGlvbik7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgc3VwZXIucmVsZWFzZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBSb290TmF2aWdhdGlvbkdyb3VwIH0gZnJvbSAnLi9yb290bmF2aWdhdGlvbmdyb3VwJztcbmltcG9ydCB7IE5vZGVFdmVudFN1YnNjcmliZXIgfSBmcm9tICcuL25vZGVldmVudHN1YnNjcmliZXInO1xuaW1wb3J0IHsgQWN0aW9uLCBEaXJlY3Rpb24gfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7Z2V0Qm91bmRpbmdSZWN0RnJvbUVsZW1lbnR9IGZyb20gJy4vbmF2aWdhdGlvbmFsZ29yaXRobSc7XG5cbmNvbnN0IERlZmF1bHRTY3J1YlNwZWVkUGVyY2VudGFnZSA9IDAuMDA1O1xuY29uc3QgU2NydWJTcGVlZENsZWFySW50ZXJ2YWwgPSAxMDA7XG5jb25zdCBTY3J1YlNwZWVkTXVsdGlwbGllciA9IDEuMTtcblxuLyoqXG4gKiBIYW5kbGVzIFNwYXRpYWwgTmF2aWdhdGlvbiBpbnRlcmFjdGlvbiB3aXRoIHRoZSBzZWVrIGJhci4gRW5zdXJlcywgdGhhdCBzZWVrIG9wZXJhdGlvbnMgY2FuIGJlIGV4ZWN1dGVkIGFuZCB0aGF0IHRoZVxuICogc2NydWJiaW5nIHRvb2x0aXAgaXMgc2hvd24gYXMgaWYgdGhlIHVzZXIgc2NydWJiZWQgdXNpbmcgdGhlIG1vdXNlL3RvdWNoc2NyZWVuLlxuICovXG5leHBvcnQgY2xhc3MgU2Vla0JhckhhbmRsZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IGN1cnNvclBvc2l0aW9uID0geyB4OiAwLCB5OiAwfTtcbiAgcHJpdmF0ZSByZWFkb25seSBldmVudFN1YnNjcmliZXI6IE5vZGVFdmVudFN1YnNjcmliZXI7XG4gIHByaXZhdGUgaXNTY3J1YmJpbmcgPSBmYWxzZTtcbiAgcHJpdmF0ZSBzY3J1YlNwZWVkUmVzZXRUaW1lb3V0OiBudW1iZXI7XG4gIHByaXZhdGUgc2NydWJTcGVlZFBlcmNlbnRhZ2UgPSBEZWZhdWx0U2NydWJTcGVlZFBlcmNlbnRhZ2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSByb290TmF2aWdhdGlvbkdyb3VwOiBSb290TmF2aWdhdGlvbkdyb3VwKSB7XG4gICAgdGhpcy5yb290TmF2aWdhdGlvbkdyb3VwLm9uQWN0aW9uID0gdGhpcy5vbkFjdGlvbjtcbiAgICB0aGlzLmV2ZW50U3Vic2NyaWJlciA9IG5ldyBOb2RlRXZlbnRTdWJzY3JpYmVyKCk7XG4gICAgdGhpcy5yb290TmF2aWdhdGlvbkdyb3VwLm9uTmF2aWdhdGlvbiA9IHRoaXMub25OYXZpZ2F0aW9uO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVTY3J1YlNwZWVkUGVyY2VudGFnZSgpOiB2b2lkIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5zY3J1YlNwZWVkUmVzZXRUaW1lb3V0KTtcbiAgICB0aGlzLnNjcnViU3BlZWRQZXJjZW50YWdlICo9IFNjcnViU3BlZWRNdWx0aXBsaWVyO1xuICAgIHRoaXMuc2NydWJTcGVlZFJlc2V0VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KFxuICAgICAgKCkgPT4gdGhpcy5zY3J1YlNwZWVkUGVyY2VudGFnZSA9IERlZmF1bHRTY3J1YlNwZWVkUGVyY2VudGFnZSwgU2NydWJTcGVlZENsZWFySW50ZXJ2YWwsXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0SW5jcmVtZW50KGRpcmVjdGlvbjogRGlyZWN0aW9uLCBzZWVrQmFyV3JhcHBlcjogSFRNTEVsZW1lbnQpOiBudW1iZXIge1xuICAgIHRoaXMudXBkYXRlU2NydWJTcGVlZFBlcmNlbnRhZ2UoKTtcblxuICAgIGNvbnN0IHNlZWtCYXJXaWR0aCA9IHNlZWtCYXJXcmFwcGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuICAgIGNvbnN0IGluY3JlbWVudCA9IHNlZWtCYXJXaWR0aCAqIHRoaXMuc2NydWJTcGVlZFBlcmNlbnRhZ2U7XG5cbiAgICByZXR1cm4gZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uUklHSFQgPyBpbmNyZW1lbnQgOiAtaW5jcmVtZW50O1xuICB9XG5cbiAgcHJpdmF0ZSByZXNldEN1cnNvclBvc2l0aW9uKCk6IHZvaWQge1xuICAgIHRoaXMuY3Vyc29yUG9zaXRpb24ueCA9IDA7XG4gICAgdGhpcy5jdXJzb3JQb3NpdGlvbi55ID0gMDtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlQ3Vyc29yUG9zaXRpb24oZGlyZWN0aW9uOiBEaXJlY3Rpb24sIHNlZWtCYXJXcmFwcGVyOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgIHRoaXMuY3Vyc29yUG9zaXRpb24ueCArPSB0aGlzLmdldEluY3JlbWVudChkaXJlY3Rpb24sIHNlZWtCYXJXcmFwcGVyKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdGlhbGl6ZUN1cnNvclBvc2l0aW9uKHNlZWtCYXJXcmFwcGVyOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgIGNvbnN0IHBsYXliYWNrUG9zaXRpb25NYXJrZXIgPSBnZXRQbGF5YmFja1Bvc2l0aW9uTWFya2VyKHNlZWtCYXJXcmFwcGVyKTtcbiAgICBjb25zdCByZWN0ID0gZ2V0Qm91bmRpbmdSZWN0RnJvbUVsZW1lbnQocGxheWJhY2tQb3NpdGlvbk1hcmtlcik7XG5cblxuICAgIGNvbnN0IHN0YXJ0WCA9IHJlY3QueCArIChyZWN0LndpZHRoIC8gMik7XG4gICAgY29uc3Qgc3RhcnRZID0gcmVjdC55O1xuXG4gICAgdGhpcy5jdXJzb3JQb3NpdGlvbi54ID0gc3RhcnRYO1xuICAgIHRoaXMuY3Vyc29yUG9zaXRpb24ueSA9IHN0YXJ0WTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdGlhbGl6ZU9yVXBkYXRlQ3Vyc29yUG9zaXRpb24oc2Vla0JhcldyYXBwZXI6IEhUTUxFbGVtZW50LCBkaXJlY3Rpb246IERpcmVjdGlvbik6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzU2NydWJiaW5nKSB7XG4gICAgICB0aGlzLnVwZGF0ZUN1cnNvclBvc2l0aW9uKGRpcmVjdGlvbiwgc2Vla0JhcldyYXBwZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmluaXRpYWxpemVDdXJzb3JQb3NpdGlvbihzZWVrQmFyV3JhcHBlcik7XG4gICAgfVxuXG4gICAgdGhpcy5pc1NjcnViYmluZyA9IHRydWU7XG4gIH1cblxuICBwcml2YXRlIGdldEN1cnNvclBvc2l0aW9uTW91c2VFdmVudEluaXQoKTogTW91c2VFdmVudEluaXQge1xuICAgIHJldHVybiB7XG4gICAgICBjbGllbnRYOiB0aGlzLmN1cnNvclBvc2l0aW9uLngsXG4gICAgICBjbGllbnRZOiB0aGlzLmN1cnNvclBvc2l0aW9uLnksXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgZGlzcGF0Y2hNb3VzZU1vdmVFdmVudChzZWVrQmFyOiBFbGVtZW50KTogdm9pZCB7XG4gICAgc2Vla0Jhci5kaXNwYXRjaEV2ZW50KG5ldyBNb3VzZUV2ZW50KCdtb3VzZW1vdmUnLCB0aGlzLmdldEN1cnNvclBvc2l0aW9uTW91c2VFdmVudEluaXQoKSkpO1xuICB9XG5cbiAgcHJpdmF0ZSByZWFkb25seSBvbk5hdmlnYXRpb24gPSAoZGlyZWN0aW9uOiBEaXJlY3Rpb24sIHRhcmdldDogSFRNTEVsZW1lbnQsIHByZXZlbnREZWZhdWx0OiAoKSA9PiB2b2lkKTogdm9pZCA9PiB7XG4gICAgaWYgKCFpc1NlZWtCYXJXcmFwcGVyKHRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uVVAgfHwgZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uRE9XTikge1xuICAgICAgdGhpcy5zdG9wU2Vla2luZyhnZXRTZWVrQmFyKHRhcmdldCkpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5pbml0aWFsaXplT3JVcGRhdGVDdXJzb3JQb3NpdGlvbih0YXJnZXQsIGRpcmVjdGlvbik7XG4gICAgdGhpcy5kaXNwYXRjaE1vdXNlTW92ZUV2ZW50KGdldFNlZWtCYXIodGFyZ2V0KSk7XG5cbiAgICBwcmV2ZW50RGVmYXVsdCgpO1xuICB9O1xuXG4gIHByaXZhdGUgZGlzcGF0Y2hNb3VzZUNsaWNrRXZlbnQoc2Vla0JhcjogRWxlbWVudCk6IHZvaWQge1xuICAgIGNvbnN0IG1vdXNlRG93bkhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICBjb25zdCBtb3VzZUV2ZW50SW5pdCA9IHRoaXMuZ2V0Q3Vyc29yUG9zaXRpb25Nb3VzZUV2ZW50SW5pdCgpO1xuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBNb3VzZUV2ZW50KCdtb3VzZXVwJywgbW91c2VFdmVudEluaXQpKTtcbiAgICAgIHRoaXMuZXZlbnRTdWJzY3JpYmVyLm9mZihzZWVrQmFyLCAnbW91c2Vkb3duJywgbW91c2VEb3duSGFuZGxlcik7XG4gICAgICB0aGlzLnN0b3BTZWVraW5nKHNlZWtCYXIpO1xuICAgIH07XG5cbiAgICB0aGlzLmV2ZW50U3Vic2NyaWJlci5vbihzZWVrQmFyLCAnbW91c2Vkb3duJywgbW91c2VEb3duSGFuZGxlcik7XG4gICAgc2Vla0Jhci5kaXNwYXRjaEV2ZW50KG5ldyBNb3VzZUV2ZW50KCdtb3VzZWRvd24nKSk7XG4gIH1cblxuICBwcml2YXRlIHN0b3BTZWVraW5nKHNlZWtCYXI6IEVsZW1lbnQpOiB2b2lkIHtcbiAgICB0aGlzLnJlc2V0Q3Vyc29yUG9zaXRpb24oKTtcbiAgICB0aGlzLmlzU2NydWJiaW5nID0gZmFsc2U7XG4gICAgdGhpcy5kaXNwYXRjaE1vdXNlTGVhdmVFdmVudChzZWVrQmFyKTtcbiAgfVxuXG4gIHByaXZhdGUgZGlzcGF0Y2hNb3VzZUxlYXZlRXZlbnQoc2Vla0JhcjogRWxlbWVudCk6IHZvaWQge1xuICAgIHNlZWtCYXIuZGlzcGF0Y2hFdmVudChuZXcgTW91c2VFdmVudCgnbW91c2VsZWF2ZScpKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVhZG9ubHkgb25BY3Rpb24gPSAoYWN0aW9uOiBBY3Rpb24sIHRhcmdldDogSFRNTEVsZW1lbnQsIHByZXZlbnREZWZhdWx0OiAoKSA9PiB2b2lkKTogdm9pZCA9PiB7XG4gICAgaWYgKCFpc1NlZWtCYXJXcmFwcGVyKHRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzZWVrQmFyID0gZ2V0U2Vla0Jhcih0YXJnZXQpO1xuXG4gICAgaWYgKGFjdGlvbiA9PT0gQWN0aW9uLlNFTEVDVCAmJiB0aGlzLmlzU2NydWJiaW5nKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoTW91c2VDbGlja0V2ZW50KHNlZWtCYXIpO1xuICAgICAgcHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gQWN0aW9uLkJBQ0spIHtcbiAgICAgIHRoaXMuc3RvcFNlZWtpbmcoc2Vla0Jhcik7XG4gICAgICBwcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogUmVsZWFzZXMgdGhlIFNlZWtCcmFIYW5kbGVyLCBtYWtpbmcgc3VyZSBhbGwgZXZlbnQgc3Vic2NyaWJlcnMgYXJlIHJlbW92ZWQuXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLmV2ZW50U3Vic2NyaWJlci5yZWxlYXNlKCk7XG4gICAgdGhpcy5yb290TmF2aWdhdGlvbkdyb3VwLm9uQWN0aW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucm9vdE5hdmlnYXRpb25Hcm91cC5vbk5hdmlnYXRpb24gPSB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTZWVrQmFyV3JhcHBlcihlbGVtZW50OiBIVE1MRWxlbWVudCk6IGJvb2xlYW4ge1xuICByZXR1cm4gQXJyYXkuZnJvbShlbGVtZW50LmNsYXNzTGlzdCkuZmluZEluZGV4KGNsYXNzTmFtZSA9PiAvLXVpLXNlZWtiYXIkLy50ZXN0KGNsYXNzTmFtZSkpID4gLTE7XG59XG5cbmZ1bmN0aW9uIGdldFNlZWtCYXIoc2Vla0JhcldyYXBwZXI6IEhUTUxFbGVtZW50KTogRWxlbWVudCB7XG4gIHJldHVybiBzZWVrQmFyV3JhcHBlci5jaGlsZHJlbi5pdGVtKDApO1xufVxuXG5mdW5jdGlvbiBnZXRQbGF5YmFja1Bvc2l0aW9uTWFya2VyKHNlZWtCYXJXcmFwcGVyOiBIVE1MRWxlbWVudCk6IEhUTUxFbGVtZW50IHtcbiAgcmV0dXJuIHNlZWtCYXJXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJ1tjbGFzcyo9XCJzZWVrYmFyLXBsYXliYWNrcG9zaXRpb24tbWFya2VyXCJdJyk7XG59XG4iLCJpbXBvcnQgeyBOYXZpZ2F0aW9uR3JvdXAgfSBmcm9tICcuL25hdmlnYXRpb25ncm91cCc7XG5pbXBvcnQgeyBSb290TmF2aWdhdGlvbkdyb3VwIH0gZnJvbSAnLi9yb290bmF2aWdhdGlvbmdyb3VwJztcbmltcG9ydCB7IE5vZGVFdmVudFN1YnNjcmliZXIgfSBmcm9tICcuL25vZGVldmVudHN1YnNjcmliZXInO1xuaW1wb3J0IHsgU2Vla0JhckhhbmRsZXIgfSBmcm9tICcuL3NlZWtiYXJoYW5kbGVyJztcbmltcG9ydCB7IGdldEtleU1hcEZvclBsYXRmb3JtIH0gZnJvbSAnLi9rZXltYXAnO1xuaW1wb3J0IHsgQWN0aW9uLCBEaXJlY3Rpb24sIEtleU1hcCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgaXNBY3Rpb24sIGlzRGlyZWN0aW9uIH0gZnJvbSAnLi90eXBlZ3VhcmRzJztcblxuLyoqXG4gKiBTcGF0aWFsTmF2aWdhdGlvbiBrZWVwcyB0cmFjayBvZiBhbGwgbmF2aWdhdGlvbiBncm91cHMsIGFuZCB1cGRhdGVzIHRoZSBhY3RpdmUgbmF2aWdhdGlvbiBncm91cCB3aGVuIHZpc2liaWxpdHlcbiAqIGNoYW5nZXMgb24gZ3JvdXAgY29udGFpbmVyLlxuICpcbiAqIEl0IGxpc3RlbnMgdG8ga2V5IGV2ZW50cywgYW5kIHRyaWdnZXJzIGVpdGhlciBoYW5kbGVOYXZpZ2F0aW9uIG9yIGhhbmRsZUFjdGlvbiBvbiB0aGUgYWN0aXZlIGdyb3VwLlxuICogU2Vla0JhckhhbmRsZXIgd2lsbCBnZXQgaW5zdGFudGlhdGVkIHdpdGggcm9vdCBuYXZpZ2F0aW9uIGdyb3VwIGFuZCBkaXNwb3NlZCBvbiByZWxlYXNlIG9mIHRoZSBzcGF0aWFsIG5hdmlnYXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBTcGF0aWFsTmF2aWdhdGlvbiB7XG4gIHByaXZhdGUgdW5zdWJzY3JpYmVWaXNpYmlsaXR5Q2hhbmdlc0ZuczogKCgpID0+IHZvaWQpW107XG4gIHByaXZhdGUgcmVhZG9ubHkgbmF2aWdhdGlvbkdyb3VwczogTmF2aWdhdGlvbkdyb3VwW10gPSBbXTtcbiAgcHJpdmF0ZSByZWFkb25seSBhY3RpdmVOYXZpZ2F0aW9uR3JvdXBzOiBOYXZpZ2F0aW9uR3JvdXBbXTtcbiAgcHJpdmF0ZSByZWFkb25seSBldmVudFN1YnNjcmliZXI6IE5vZGVFdmVudFN1YnNjcmliZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgc2Vla0JhckhhbmRsZXI6IFNlZWtCYXJIYW5kbGVyO1xuICBwcml2YXRlIHJlYWRvbmx5IGtleU1hcDogS2V5TWFwO1xuXG4gIGNvbnN0cnVjdG9yKHJvb3ROYXZpZ2F0aW9uR3JvdXA6IFJvb3ROYXZpZ2F0aW9uR3JvdXAsIC4uLm5hdmlnYXRpb25Hcm91cHM6IE5hdmlnYXRpb25Hcm91cFtdKSB7XG4gICAgdGhpcy5zZWVrQmFySGFuZGxlciA9IG5ldyBTZWVrQmFySGFuZGxlcihyb290TmF2aWdhdGlvbkdyb3VwKTtcblxuICAgIHRoaXMuYWN0aXZlTmF2aWdhdGlvbkdyb3VwcyA9IFtdO1xuICAgIHRoaXMudW5zdWJzY3JpYmVWaXNpYmlsaXR5Q2hhbmdlc0ZucyA9IFtdO1xuICAgIHRoaXMuZXZlbnRTdWJzY3JpYmVyID0gbmV3IE5vZGVFdmVudFN1YnNjcmliZXIoKTtcbiAgICB0aGlzLm5hdmlnYXRpb25Hcm91cHMgPSBbcm9vdE5hdmlnYXRpb25Hcm91cCwgLi4ubmF2aWdhdGlvbkdyb3Vwc107XG4gICAgdGhpcy5rZXlNYXAgPSBnZXRLZXlNYXBGb3JQbGF0Zm9ybSgpO1xuXG4gICAgdGhpcy5zdWJzY3JpYmVUb05hdmlnYXRpb25Hcm91cFZpc2liaWxpdHlDaGFuZ2VzKCk7XG4gICAgdGhpcy5hdHRhY2hLZXlFdmVudEhhbmRsZXIoKTtcbiAgICB0aGlzLmVuYWJsZURlZmF1bHROYXZpZ2F0aW9uR3JvdXAoKTtcbiAgfVxuXG4gIHByaXZhdGUgYXR0YWNoS2V5RXZlbnRIYW5kbGVyKCk6IHZvaWQge1xuICAgIHRoaXMuZXZlbnRTdWJzY3JpYmVyLm9uKGRvY3VtZW50LCAna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RXZlbnQsIHRydWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBvblNob3cgPSAoZ3JvdXA6IE5hdmlnYXRpb25Hcm91cCk6IHZvaWQgPT4ge1xuICAgIHRoaXMuYWN0aXZlTmF2aWdhdGlvbkdyb3Vwcy5wdXNoKGdyb3VwKTtcbiAgICB0aGlzLnVwZGF0ZUVuYWJsZWROYXZpZ2F0aW9uR3JvdXAoKTtcbiAgfTtcblxuICBwcml2YXRlIG9uSGlkZSA9IChncm91cDogTmF2aWdhdGlvbkdyb3VwKTogdm9pZCA9PiB7XG4gICAgY29uc3QgZ3JvdXBJbmRleCA9IHRoaXMuYWN0aXZlTmF2aWdhdGlvbkdyb3Vwcy5maW5kSW5kZXgob3RoZXIgPT4gb3RoZXIgPT09IGdyb3VwKTtcblxuICAgIGlmIChncm91cEluZGV4ID4gLTEpIHtcbiAgICAgIGdyb3VwLmRpc2FibGUoKTtcbiAgICAgIHRoaXMuYWN0aXZlTmF2aWdhdGlvbkdyb3Vwcy5zcGxpY2UoZ3JvdXBJbmRleCwgMSk7XG4gICAgICB0aGlzLnVwZGF0ZUVuYWJsZWROYXZpZ2F0aW9uR3JvdXAoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZXMgdG8gb25IaWRlIGFuZCBvblNob3cgb24gYWxsIG5hdmlnYXRpb24gZ3JvdXBzIGNvbnRhaW5lcnMgYXMgU3BhdGlhbCBuYXZpZ2F0aW9uIHRyYWNrcyBhY3RpdmUgbmF2aWdhdGlvblxuICAgKiBncm91cCBiYXNlZCBvbiB0aGVpciBjb250YWluZXIgdmlzaWJpbGl0eS5cbiAgICovXG4gIHByaXZhdGUgc3Vic2NyaWJlVG9OYXZpZ2F0aW9uR3JvdXBWaXNpYmlsaXR5Q2hhbmdlcygpOiB2b2lkIHtcbiAgICB0aGlzLm5hdmlnYXRpb25Hcm91cHMuZm9yRWFjaChncm91cCA9PiB7XG4gICAgICBjb25zdCBvblNob3dIYW5kbGVyID0gKCkgPT4gdGhpcy5vblNob3coZ3JvdXApO1xuICAgICAgY29uc3Qgb25IaWRlSGFuZGxlciA9ICgpID0+IHRoaXMub25IaWRlKGdyb3VwKTtcblxuICAgICAgZ3JvdXAuY29udGFpbmVyLm9uU2hvdy5zdWJzY3JpYmUob25TaG93SGFuZGxlcik7XG4gICAgICBncm91cC5jb250YWluZXIub25IaWRlLnN1YnNjcmliZShvbkhpZGVIYW5kbGVyKTtcblxuICAgICAgdGhpcy51bnN1YnNjcmliZVZpc2liaWxpdHlDaGFuZ2VzRm5zLnB1c2goXG4gICAgICAgICgpID0+IGdyb3VwLmNvbnRhaW5lci5vblNob3cudW5zdWJzY3JpYmUob25TaG93SGFuZGxlciksXG4gICAgICAgICgpID0+IGdyb3VwLmNvbnRhaW5lci5vbkhpZGUudW5zdWJzY3JpYmUob25IaWRlSGFuZGxlciksXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSB1bnN1YnNjcmliZUZyb21OYXZpZ2F0aW9uR3JvdXBWaXNpYmlsaXR5Q2hhbmdlcygpOiB2b2lkIHtcbiAgICB0aGlzLnVuc3Vic2NyaWJlVmlzaWJpbGl0eUNoYW5nZXNGbnMuZm9yRWFjaCh1bnN1YiA9PiB1bnN1YigpKTtcbiAgICB0aGlzLnVuc3Vic2NyaWJlVmlzaWJpbGl0eUNoYW5nZXNGbnMgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJdCB3aWxsIGVuYWJsZSBncm91cCBvZiB3aGljaCBjb250YWluZXIgaXMgY3VycmVudGx5IHNob3duXG4gICAqIElmIHRoZXJlIGFyZSBubyBncm91cHMgd2l0aCBjb250YWluZXJzIHRoYXQgYXJlIGN1cnJlbnRseSB2aXNpYmxlLCBpdCB3aWxsIGVuYWJsZSByb290IG5hdmlnYXRpb24gZ3JvdXBcbiAgICovXG4gIHByaXZhdGUgZW5hYmxlRGVmYXVsdE5hdmlnYXRpb25Hcm91cCgpOiB2b2lkIHtcbiAgICBjb25zdCBpc1Nob3duID0gKGdyb3VwOiBOYXZpZ2F0aW9uR3JvdXApID0+IGdyb3VwLmNvbnRhaW5lci5pc1Nob3duKCk7XG4gICAgY29uc3QgZ3JvdXBUb0VuYWJsZSA9IHRoaXMubmF2aWdhdGlvbkdyb3Vwcy5maW5kKGlzU2hvd24pID8/IHRoaXMubmF2aWdhdGlvbkdyb3Vwc1swXTtcblxuICAgIGlmIChncm91cFRvRW5hYmxlKSB7XG4gICAgICB0aGlzLmFjdGl2ZU5hdmlnYXRpb25Hcm91cHMucHVzaChncm91cFRvRW5hYmxlKTtcbiAgICAgIHRoaXMudXBkYXRlRW5hYmxlZE5hdmlnYXRpb25Hcm91cCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNhYmxlcyBuYXZpZ2F0aW9uIGdyb3VwcyB0aGF0IGFyZSBubyBsb25nZXIgYWN0aXZlIGFuZCBjYWxscyBlbmFibGUgb24gbGFzdCBwdXNoZWQgbmF2aWdhdGlvbiBncm91cFxuICAgKi9cbiAgcHJpdmF0ZSB1cGRhdGVFbmFibGVkTmF2aWdhdGlvbkdyb3VwKCk6IHZvaWQge1xuICAgIHRoaXMuYWN0aXZlTmF2aWdhdGlvbkdyb3Vwcy5mb3JFYWNoKChncm91cCwgaWR4KSA9PiB7XG4gICAgICBpZiAoaWR4IDwgdGhpcy5hY3RpdmVOYXZpZ2F0aW9uR3JvdXBzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgZ3JvdXAuZGlzYWJsZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ3JvdXAuZW5hYmxlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBjdXJyZW50bHkgYWN0aXZlIG5hdmlnYXRpb24gZ3JvdXBcbiAgICovXG4gIHB1YmxpYyBnZXRBY3RpdmVOYXZpZ2F0aW9uR3JvdXAoKTogTmF2aWdhdGlvbkdyb3VwIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmVOYXZpZ2F0aW9uR3JvdXBzW3RoaXMuYWN0aXZlTmF2aWdhdGlvbkdyb3Vwcy5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYga2V5Ym9hcmQgZXZlbnQga2V5Y29kZSBpcyB0cmFja2VkIGVpdGhlciBhcyBEaXJlY3Rpb24gb3IgQWN0aW9uIGFuZCBjYWxscyBhcHByb3ByaWF0ZSBoYW5kbGVyIG9uIGFjdGl2ZVxuICAgKiBuYXZpZ2F0aW9uIGdyb3VwXG4gICAqXG4gICAqIEBwYXJhbSBlIHtLZXlib2FyZEV2ZW50fVxuICAgKi9cbiAgcHJpdmF0ZSBoYW5kbGVLZXlFdmVudCA9IChlOiBLZXlib2FyZEV2ZW50KTogdm9pZCA9PiB7XG4gICAgY29uc3QgZXZlbnQ6IERpcmVjdGlvbiB8IEFjdGlvbiB8IHVuZGVmaW5lZCA9IHRoaXMua2V5TWFwW2dldEtleUNvZGUoZSldO1xuXG4gICAgY29uc3QgYWN0aXZlID0gdGhpcy5nZXRBY3RpdmVOYXZpZ2F0aW9uR3JvdXAoKTtcbiAgICBpZiAoIWFjdGl2ZSB8fCAhYWN0aXZlLmNvbnRhaW5lciB8fCBhY3RpdmUuY29udGFpbmVyLmlzSGlkZGVuKCkgfHwgYWN0aXZlLmNvbnRhaW5lci5pc0Rpc2FibGVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXJlY3Rpb24oZXZlbnQpKSB7XG4gICAgICBhY3RpdmUuaGFuZGxlTmF2aWdhdGlvbihldmVudCk7XG5cbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICAgIGlmIChpc0FjdGlvbihldmVudCkpIHtcbiAgICAgIGFjdGl2ZS5oYW5kbGVBY3Rpb24oZXZlbnQpO1xuXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRGlzcG9zZSBvZiBTcGF0aWFsTmF2aWdhdGlvblxuICAgKlxuICAgKiBSZW1vdmUgYWxsIGV2ZW50IGhhbmRsZXJzLCByZWxlYXNlIHNlZWtiYXIgaGFuZGxlciBhbmQgcmVsZWFzZSBhbGwgbmF2aWdhdGlvbiBncm91cHMuXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLnVuc3Vic2NyaWJlRnJvbU5hdmlnYXRpb25Hcm91cFZpc2liaWxpdHlDaGFuZ2VzKCk7XG4gICAgdGhpcy5ldmVudFN1YnNjcmliZXIucmVsZWFzZSgpO1xuICAgIHRoaXMubmF2aWdhdGlvbkdyb3Vwcy5mb3JFYWNoKGdyb3VwID0+IGdyb3VwLnJlbGVhc2UoKSk7XG4gICAgdGhpcy5zZWVrQmFySGFuZGxlci5yZWxlYXNlKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0S2V5Q29kZShldmVudDogS2V5Ym9hcmRFdmVudCk6IG51bWJlciB7XG4gIHJldHVybiBldmVudC5rZXlDb2RlO1xufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9jb21wb25lbnQnO1xuaW1wb3J0IHsgU2V0dGluZ3NQYW5lbCB9IGZyb20gJy4uL2NvbXBvbmVudHMvc2V0dGluZ3NwYW5lbCc7XG5pbXBvcnQgeyBDb250YWluZXIgfSBmcm9tICcuLi9jb21wb25lbnRzL2NvbnRhaW5lcic7XG5pbXBvcnQgeyBMaXN0Qm94IH0gZnJvbSAnLi4vY29tcG9uZW50cy9saXN0Ym94JztcbmltcG9ydCB7IEFjdGlvbiwgRGlyZWN0aW9uIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NldHRpbmdzUGFuZWwoY29tcG9uZW50OiBDb21wb25lbnQ8dW5rbm93bj4pOiBjb21wb25lbnQgaXMgU2V0dGluZ3NQYW5lbCB7XG4gIHJldHVybiBjb21wb25lbnQgaW5zdGFuY2VvZiBTZXR0aW5nc1BhbmVsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb21wb25lbnQob2JqOiB1bmtub3duKTogb2JqIGlzIENvbXBvbmVudDx1bmtub3duPiB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgb2JqICE9PSB1bmRlZmluZWQgJiYgb2JqIGluc3RhbmNlb2YgQ29tcG9uZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb250YWluZXIob2JqOiB1bmtub3duKTogb2JqIGlzIENvbnRhaW5lcjx1bmtub3duPiB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgb2JqICE9PSB1bmRlZmluZWQgJiYgb2JqIGluc3RhbmNlb2YgQ29udGFpbmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNMaXN0Qm94KG9iajogdW5rbm93bik6IG9iaiBpcyBMaXN0Qm94IHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIExpc3RCb3g7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RpcmVjdGlvbihkaXJlY3Rpb246IHVua25vd24pOiBkaXJlY3Rpb24gaXMgRGlyZWN0aW9uIHtcbiAgcmV0dXJuIHR5cGVvZiBkaXJlY3Rpb24gPT09ICdzdHJpbmcnICYmIE9iamVjdC52YWx1ZXM8c3RyaW5nPihEaXJlY3Rpb24pLmluY2x1ZGVzKGRpcmVjdGlvbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0FjdGlvbihhY3Rpb246IHVua25vd24pOiBhY3Rpb24gaXMgQWN0aW9uIHtcbiAgcmV0dXJuIHR5cGVvZiBhY3Rpb24gPT09ICdzdHJpbmcnICYmIE9iamVjdC52YWx1ZXM8c3RyaW5nPihBY3Rpb24pLmluY2x1ZGVzKGFjdGlvbik7XG59XG4iLCJleHBvcnQgdHlwZSBDYWxsYmFjazxUPiA9IChkYXRhOiBULCB0YXJnZXQ6IEhUTUxFbGVtZW50LCBwcmV2ZW50RGVmYXVsdDogKCkgPT4gdm9pZCkgPT4gdm9pZDtcbmV4cG9ydCB0eXBlIE5hdmlnYXRpb25DYWxsYmFjayA9IENhbGxiYWNrPERpcmVjdGlvbj47XG5leHBvcnQgdHlwZSBBY3Rpb25DYWxsYmFjayA9IENhbGxiYWNrPEFjdGlvbj47XG5leHBvcnQgdHlwZSBLZXlNYXAgPSB7XG4gIFtrZXlDb2RlOiBudW1iZXJdOiBBY3Rpb24gfCBEaXJlY3Rpb247XG59O1xuXG5leHBvcnQgZW51bSBEaXJlY3Rpb24ge1xuICBVUCA9ICd1cCcsXG4gIERPV04gPSAnZG93bicsXG4gIExFRlQgPSAnbGVmdCcsXG4gIFJJR0hUID0gJ3JpZ2h0Jyxcbn1cblxuZXhwb3J0IGVudW0gQWN0aW9uIHtcbiAgU0VMRUNUID0gJ3NlbGVjdCcsXG4gIEJBQ0sgPSAnYmFjaycsXG59XG4iLCJpbXBvcnQgeyBVSUNvbmZpZyB9IGZyb20gJy4vdWljb25maWcnO1xuXG4vKipcbiAqIEBjYXRlZ29yeSBVdGlsc1xuICovXG5leHBvcnQgbmFtZXNwYWNlIFN0b3JhZ2VVdGlscyB7XG4gbGV0IGRpc2FibGVTdG9yYWdlQXBpOiBib29sZWFuO1xuXG4gIGV4cG9ydCBmdW5jdGlvbiBzZXRTdG9yYWdlQXBpRGlzYWJsZWQodWlDb25maWc6IFVJQ29uZmlnKSB7XG4gICAgZGlzYWJsZVN0b3JhZ2VBcGkgPSB1aUNvbmZpZy5kaXNhYmxlU3RvcmFnZUFwaTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZFVzZUxvY2FsU3RvcmFnZSgpOiBib29sZWFuIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgIWRpc2FibGVTdG9yYWdlQXBpICYmXG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UgJiZcbiAgICAgICAgdHlwZW9mIGxvY2FsU3RvcmFnZS5nZXRJdGVtID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgIHR5cGVvZiBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN0b3JlcyBhIHN0cmluZyBpdGVtIGludG8gbG9jYWxTdG9yYWdlLlxuICAgKiBAcGFyYW0ga2V5IHRoZSBpdGVtJ3Mga2V5XG4gICAqIEBwYXJhbSBkYXRhIHRoZSBpdGVtJ3MgZGF0YVxuICAgKi9cbiAgZXhwb3J0IGZ1bmN0aW9uIHNldEl0ZW0oa2V5OiBzdHJpbmcsIGRhdGE6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmIChzaG91bGRVc2VMb2NhbFN0b3JhZ2UoKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoYEZhaWxlZCB0byBzZXQgc3RvcmFnZSBpdGVtICR7a2V5fWAsIGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGFuIGl0ZW0ncyBzdHJpbmcgdmFsdWUgZnJvbSB0aGUgbG9jYWxTdG9yYWdlLlxuICAgKiBAcGFyYW0ga2V5IHRoZSBrZXkgdG8gbG9vayB1cCBpdHMgYXNzb2NpYXRlZCB2YWx1ZVxuICAgKiBAcmV0dXJuIHtzdHJpbmcgfCBudWxsfSBSZXR1cm5zIHRoZSBzdHJpbmcgaWYgZm91bmQsIG51bGwgaWYgdGhlcmUgaXMgbm8gZGF0YSBzdG9yZWQgZm9yIHRoZSBrZXlcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRJdGVtKGtleTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgaWYgKHNob3VsZFVzZUxvY2FsU3RvcmFnZSgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoYEZhaWxlZCB0byBnZXQgc3RvcmFnZSBpdGVtICR7a2V5fWAsIGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3JlcyBhbiBvYmplY3QgaW50byBsb2NhbFN0b3JhZ2UuIFRoZSBvYmplY3Qgd2lsbCBiZSBzZXJpYWxpemVkIHRvIEpTT04uIFRoZSBmb2xsb3dpbmcgdHlwZXMgYXJlIHN1cHBvcnRlZFxuICAgKiBpbiBhZGRpdGlvbiB0byB0aGUgZGVmYXVsdCB0eXBlczpcbiAgICogIC0gQ29sb3JVdGlscy5Db2xvclxuICAgKlxuICAgKiBAcGFyYW0ga2V5IHRoZSBrZXkgdG8gc3RvcmUgdGhlIGRhdGEgdG9cbiAgICogQHBhcmFtIGRhdGEgdGhlIG9iamVjdCB0byBzdG9yZVxuICAgKi9cbiAgZXhwb3J0IGZ1bmN0aW9uIHNldE9iamVjdDxUPihrZXk6IHN0cmluZywgZGF0YTogVCk6IHZvaWQge1xuICAgIGxldCBqc29uID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgc2V0SXRlbShrZXksIGpzb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYW4gb2JqZWN0IGZvciB0aGUgZ2l2ZW4ga2V5IGZyb20gbG9jYWxTdG9yYWdlLiBUaGUgb2JqZWN0IHdpbGwgYmUgZGVzZXJpYWxpemVkIGZyb20gSlNPTi4gQmVzaWRlIHRoZVxuICAgKiBkZWZhdWx0IHR5cGVzLCB0aGUgZm9sbG93aW5nIHR5cGVzIGFyZSBzdXBwb3J0ZWQ6XG4gICAqICAtIENvbG9yVXRpbHMuQ29sb3JcbiAgICpcbiAgICogQHBhcmFtIGtleSB0aGUga2V5IHRvIGxvb2sgdXAgaXRzIGFzc29jaWF0ZWQgb2JqZWN0XG4gICAqIEByZXR1cm4ge2FueX0gUmV0dXJucyB0aGUgb2JqZWN0IGlmIGZvdW5kLCBudWxsIG90aGVyd2lzZVxuICAgKi9cbiAgZXhwb3J0IGZ1bmN0aW9uIGdldE9iamVjdDxUPihrZXk6IHN0cmluZyk6IFQgfCBudWxsIHtcbiAgICBsZXQganNvbiA9IGdldEl0ZW0oa2V5KTtcblxuICAgIGlmIChqc29uKSB7XG4gICAgICBsZXQgb2JqZWN0ID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICAgIHJldHVybiA8VD5vYmplY3Q7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4iLCJpbXBvcnQgeyBBZCwgTGluZWFyQWQsIFBsYXllckFQSSB9IGZyb20gJ2JpdG1vdmluLXBsYXllcic7XG5pbXBvcnQgeyBpMThuIH0gZnJvbSAnLi9sb2NhbGl6YXRpb24vaTE4bic7XG5cbi8qKlxuICogQGNhdGVnb3J5IFV0aWxzXG4gKi9cbmV4cG9ydCBuYW1lc3BhY2UgU3RyaW5nVXRpbHMge1xuXG4gIGV4cG9ydCBsZXQgRk9STUFUX0hITU1TUzogc3RyaW5nID0gJ2hoOm1tOnNzJztcbiAgZXhwb3J0IGxldCBGT1JNQVRfTU1TUzogc3RyaW5nID0gJ21tOnNzJztcblxuICAvKipcbiAgICogRm9ybWF0cyBhIG51bWJlciBvZiBzZWNvbmRzIGludG8gYSB0aW1lIHN0cmluZyB3aXRoIHRoZSBwYXR0ZXJuIGhoOm1tOnNzLlxuICAgKlxuICAgKiBAcGFyYW0gdG90YWxTZWNvbmRzIHRoZSB0b3RhbCBudW1iZXIgb2Ygc2Vjb25kcyB0byBmb3JtYXQgdG8gc3RyaW5nXG4gICAqIEBwYXJhbSBmb3JtYXQgdGhlIHRpbWUgZm9ybWF0IHRvIG91dHB1dCAoZGVmYXVsdDogaGg6bW06c3MpXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBmb3JtYXR0ZWQgdGltZSBzdHJpbmdcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBzZWNvbmRzVG9UaW1lKHRvdGFsU2Vjb25kczogbnVtYmVyLCBmb3JtYXQ6IHN0cmluZyA9IEZPUk1BVF9ISE1NU1MpOiBzdHJpbmcge1xuICAgIGxldCBpc05lZ2F0aXZlID0gdG90YWxTZWNvbmRzIDwgMDtcblxuICAgIGlmIChpc05lZ2F0aXZlKSB7XG4gICAgICAvLyBJZiB0aGUgdGltZSBpcyBuZWdhdGl2ZSwgd2UgbWFrZSBpdCBwb3NpdGl2ZSBmb3IgdGhlIGNhbGN1bGF0aW9uIGJlbG93XG4gICAgICAvLyAoZWxzZSB3ZSdkIGdldCBhbGwgbmVnYXRpdmUgbnVtYmVycykgYW5kIHJlYXR0YWNoIHRoZSBuZWdhdGl2ZSBzaWduIGxhdGVyLlxuICAgICAgdG90YWxTZWNvbmRzID0gLXRvdGFsU2Vjb25kcztcbiAgICB9XG5cbiAgICAvLyBTcGxpdCBpbnRvIHNlcGFyYXRlIHRpbWUgcGFydHNcbiAgICBsZXQgaG91cnMgPSBNYXRoLmZsb29yKHRvdGFsU2Vjb25kcyAvIDM2MDApO1xuICAgIGxldCBtaW51dGVzID0gTWF0aC5mbG9vcih0b3RhbFNlY29uZHMgLyA2MCkgLSBob3VycyAqIDYwO1xuICAgIGxldCBzZWNvbmRzID0gTWF0aC5mbG9vcih0b3RhbFNlY29uZHMpICUgNjA7XG5cbiAgICByZXR1cm4gKGlzTmVnYXRpdmUgPyAnLScgOiAnJykgKyBmb3JtYXRcbiAgICAgICAgLnJlcGxhY2UoJ2hoJywgbGVmdFBhZFdpdGhaZXJvcyhob3VycywgMikpXG4gICAgICAgIC5yZXBsYWNlKCdtbScsIGxlZnRQYWRXaXRoWmVyb3MobWludXRlcywgMikpXG4gICAgICAgIC5yZXBsYWNlKCdzcycsIGxlZnRQYWRXaXRoWmVyb3Moc2Vjb25kcywgMikpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHNlY29uZHNUb1RleHQodG90YWxTZWNvbmRzOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IGlzTmVnYXRpdmUgPSB0b3RhbFNlY29uZHMgPCAwO1xuXG4gICAgaWYgKGlzTmVnYXRpdmUpIHtcbiAgICAgIC8vIElmIHRoZSB0aW1lIGlzIG5lZ2F0aXZlLCB3ZSBtYWtlIGl0IHBvc2l0aXZlIGZvciB0aGUgY2FsY3VsYXRpb24gYmVsb3dcbiAgICAgIC8vIChlbHNlIHdlJ2QgZ2V0IGFsbCBuZWdhdGl2ZSBudW1iZXJzKSBhbmQgcmVhdHRhY2ggdGhlIG5lZ2F0aXZlIHNpZ24gbGF0ZXIuXG4gICAgICB0b3RhbFNlY29uZHMgPSAtdG90YWxTZWNvbmRzO1xuICAgIH1cblxuICAgIC8vIFNwbGl0IGludG8gc2VwYXJhdGUgdGltZSBwYXJ0c1xuICAgIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcih0b3RhbFNlY29uZHMgLyAzNjAwKTtcbiAgICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcih0b3RhbFNlY29uZHMgLyA2MCkgLSBob3VycyAqIDYwO1xuICAgIGNvbnN0IHNlY29uZHMgPSBNYXRoLmZsb29yKHRvdGFsU2Vjb25kcykgJSA2MDtcblxuICAgIHJldHVybiAoaXNOZWdhdGl2ZSA/ICctJyA6ICcnKSArXG4gICAgKGhvdXJzICE9PSAwID8gYCR7bGVmdFBhZFdpdGhaZXJvcyhob3VycywgMil9ICR7aTE4bi5wZXJmb3JtTG9jYWxpemF0aW9uKGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy50aW1lLmhvdXJzJykpfSBgIDogJycpICtcbiAgICAobWludXRlcyAhPT0gMCA/IGAke2xlZnRQYWRXaXRoWmVyb3MobWludXRlcywgMil9ICR7aTE4bi5wZXJmb3JtTG9jYWxpemF0aW9uKGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy50aW1lLm1pbnV0ZXMnKSl9IGAgOiAnJykgK1xuICAgIGAke2xlZnRQYWRXaXRoWmVyb3Moc2Vjb25kcywgMil9ICR7aTE4bi5wZXJmb3JtTG9jYWxpemF0aW9uKGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy50aW1lLnNlY29uZHMnKSl9YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIG51bWJlciB0byBhIHN0cmluZyBhbmQgbGVmdC1wYWRzIGl0IHdpdGggemVyb3MgdG8gdGhlIHNwZWNpZmllZCBsZW5ndGguXG4gICAqIEV4YW1wbGU6IGxlZnRQYWRXaXRoWmVyb3MoMTIzLCA1KSA9PiAnMDAxMjMnXG4gICAqXG4gICAqIEBwYXJhbSBudW0gdGhlIG51bWJlciB0byBjb252ZXJ0IHRvIHN0cmluZyBhbmQgcGFkIHdpdGggemVyb3NcbiAgICogQHBhcmFtIGxlbmd0aCB0aGUgZGVzaXJlZCBsZW5ndGggb2YgdGhlIHBhZGRlZCBzdHJpbmdcbiAgICogQHJldHVybnMge3N0cmluZ30gdGhlIHBhZGRlZCBudW1iZXIgYXMgc3RyaW5nXG4gICAqL1xuICBmdW5jdGlvbiBsZWZ0UGFkV2l0aFplcm9zKG51bTogbnVtYmVyIHwgc3RyaW5nLCBsZW5ndGg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgbGV0IHRleHQgPSBudW0gKyAnJztcbiAgICBsZXQgcGFkZGluZyA9ICcwMDAwMDAwMDAwJy5zdWJzdHIoMCwgbGVuZ3RoIC0gdGV4dC5sZW5ndGgpO1xuICAgIHJldHVybiBwYWRkaW5nICsgdGV4dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaWxscyBvdXQgcGxhY2Vob2xkZXJzIGluIGFuIGFkIG1lc3NhZ2UuXG4gICAqXG4gICAqIEhhcyB0aGUgcGxhY2Vob2xkZXJzICd7cmVtYWluaW5nVGltZVtmb3JtYXRTdHJpbmddfScsICd7cGxheWVkVGltZVtmb3JtYXRTdHJpbmddfScsXG4gICAqICd7YWREdXJhdGlvbltmb3JtYXRTdHJpbmddfScgYW5kIHthZEJyZWFrUmVtYWluaW5nVGltZVtmb3JtYXRTdHJpbmddfSwgd2hpY2ggYXJlIHJlcGxhY2VkIGJ5IHRoZSByZW1haW5pbmcgdGltZSB1bnRpbCB0aGUgYWQgY2FuIGJlIHNraXBwZWQsIHRoZSBjdXJyZW50XG4gICAqIHRpbWUgb3IgdGhlIGFkIGR1cmF0aW9uLiBUaGUgZm9ybWF0IHN0cmluZyBpcyBvcHRpb25hbC4gSWYgbm90IHNwZWNpZmllZCwgdGhlIHBsYWNlaG9sZGVyIGlzIHJlcGxhY2VkIGJ5IHRoZSB0aW1lXG4gICAqIGluIHNlY29uZHMuIElmIHNwZWNpZmllZCwgaXQgbXVzdCBiZSBvZiB0aGUgZm9sbG93aW5nIGZvcm1hdDpcbiAgICogLSAlZCAtIEluc2VydHMgdGhlIHRpbWUgYXMgYW4gaW50ZWdlci5cbiAgICogLSAlME5kIC0gSW5zZXJ0cyB0aGUgdGltZSBhcyBhbiBpbnRlZ2VyIHdpdGggbGVhZGluZyB6ZXJvZXMsIGlmIHRoZSBsZW5ndGggb2YgdGhlIHRpbWUgc3RyaW5nIGlzIHNtYWxsZXIgdGhhbiBOLlxuICAgKiAtICVmIC0gSW5zZXJ0cyB0aGUgdGltZSBhcyBhIGZsb2F0LlxuICAgKiAtICUwTmYgLSBJbnNlcnRzIHRoZSB0aW1lIGFzIGEgZmxvYXQgd2l0aCBsZWFkaW5nIHplcm9lcy5cbiAgICogLSAlLk1mIC0gSW5zZXJ0cyB0aGUgdGltZSBhcyBhIGZsb2F0IHdpdGggTSBkZWNpbWFsIHBsYWNlcy4gQ2FuIGJlIGNvbWJpbmVkIHdpdGggJTBOZiwgZS5nLiAlMDQuMmYgKHRoZSB0aW1lXG4gICAqIDEwLjEyMyB3b3VsZCBiZSBwcmludGVkIGFzIDAwMTAuMTIpLlxuICAgKiAtICVoaDptbTpzc1xuICAgKiAtICVtbTpzc1xuICAgKlxuICAgKiBFeGFtcGxlczpcbiAgICogLSB7IHRleHQ6ICdBZDoge3JlbWFpbmluZ1RpbWUlbW06c3N9IHNlY3MnIH1cbiAgICogQW4gaW5wdXQgdmFsdWUgb2YgMTAwIHdvdWxkIGJlIGRpc3BsYXllZCBhczogJ0FkOiAwMTo0MCBzZWNzJ1xuICAgKiAtIHsgdGV4dDogJ0FkOiB7cmVtYWluaW5nVGltZSVmfSBzZWNzJyB9XG4gICAqIEFuIGlucHV0IHZhbHVlIG9mIDEwMCB3b3VsZCBiZSBkaXNwbGF5ZWQgYXM6ICdBZDogMTAwLjAgc2VjcydcbiAgICogLSB7IHRleHQ6ICdBZGJyZWFrOiB7YWRCcmVha1JlbWFpbmluZ1RpbWUlZn0gc2VjcycgfVxuICAgKiBBZGJyZWFrIHdpdGggMiBhZHMgZWFjaCA1MCBzZWNvbmRzIHdvdWxkIGJlIGRpc3BsYXllZCBhczogJ0FkOiAxMDAuMCBzZWNzJ1xuICAgKlxuICAgKiBAcGFyYW0gYWRNZXNzYWdlIGFuIGFkIG1lc3NhZ2Ugd2l0aCBvcHRpb25hbCBwbGFjZWhvbGRlcnMgdG8gZmlsbFxuICAgKiBAcGFyYW0gc2tpcE9mZnNldCBpZiBzcGVjaWZpZWQsIHtyZW1haW5pbmdUaW1lfSB3aWxsIGJlIGZpbGxlZCB3aXRoIHRoZSByZW1haW5pbmcgdGltZSB1bnRpbCB0aGUgYWQgY2FuIGJlIHNraXBwZWRcbiAgICogQHBhcmFtIHBsYXllciB0aGUgcGxheWVyIHRvIGdldCB0aGUgdGltZSBkYXRhIGZyb21cbiAgICogQHJldHVybnMge3N0cmluZ30gdGhlIGFkIG1lc3NhZ2Ugd2l0aCBmaWxsZWQgcGxhY2Vob2xkZXJzXG4gICAqL1xuICBleHBvcnQgZnVuY3Rpb24gcmVwbGFjZUFkTWVzc2FnZVBsYWNlaG9sZGVycyhhZE1lc3NhZ2U6IHN0cmluZywgc2tpcE9mZnNldDogbnVtYmVyLCBwbGF5ZXI6IFBsYXllckFQSSkge1xuICAgIGxldCBhZE1lc3NhZ2VQbGFjZWhvbGRlclJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICdcXFxceyhyZW1haW5pbmdUaW1lfHBsYXllZFRpbWV8YWREdXJhdGlvbnxhZEJyZWFrUmVtYWluaW5nVGltZSkofXwlKCgwWzEtOV1cXFxcZCooXFxcXC5cXFxcZCsoZHxmKXxkfGYpfFxcXFwuXFxcXGQrZnxkfGYpfGhoOm1tOnNzfG1tOnNzKX0pJyxcbiAgICAgICdnJyxcbiAgICApO1xuXG4gICAgcmV0dXJuIGFkTWVzc2FnZS5yZXBsYWNlKGFkTWVzc2FnZVBsYWNlaG9sZGVyUmVnZXgsIChmb3JtYXRTdHJpbmcpID0+IHtcbiAgICAgIGxldCB0aW1lID0gMDtcbiAgICAgIGlmIChmb3JtYXRTdHJpbmcuaW5kZXhPZigncmVtYWluaW5nVGltZScpID4gLTEpIHtcbiAgICAgICAgaWYgKHNraXBPZmZzZXQpIHtcbiAgICAgICAgICB0aW1lID0gTWF0aC5jZWlsKHNraXBPZmZzZXQgLSBwbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGltZSA9IHBsYXllci5nZXREdXJhdGlvbigpIC0gcGxheWVyLmdldEN1cnJlbnRUaW1lKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZm9ybWF0U3RyaW5nLmluZGV4T2YoJ3BsYXllZFRpbWUnKSA+IC0xKSB7XG4gICAgICAgIHRpbWUgPSBwbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKTtcbiAgICAgIH0gZWxzZSBpZiAoZm9ybWF0U3RyaW5nLmluZGV4T2YoJ2FkRHVyYXRpb24nKSA+IC0xKSB7XG4gICAgICAgIHRpbWUgPSBwbGF5ZXIuZ2V0RHVyYXRpb24oKTtcbiAgICAgIH0gZWxzZSBpZiAoZm9ybWF0U3RyaW5nLmluZGV4T2YoJ2FkQnJlYWtSZW1haW5pbmdUaW1lJykgPiAtMSkgeyAvLyBUbyBkaXNwbGF5IHRoZSByZW1haW5pbmcgdGltZSBpbiB0aGUgYWQgYnJlYWsgYXMgb3Bwb3NlZCB0byBpbiB0aGUgYWRcbiAgICAgICAgdGltZSA9IDA7XG5cbiAgICAgICAgLy8gY29tcHV0ZSBsaXN0IG9mIGFkcyBhbmQgY2FsY3VsYXRlIGR1cmF0aW9uIG9mIHJlbWFpbmluZyBhZHMgYmFzZWQgb24gaW5kZXggb2YgYWN0aXZlIGFkXG4gICAgICAgIGlmIChwbGF5ZXIuYWRzLmlzTGluZWFyQWRBY3RpdmUoKSkge1xuICAgICAgICAgIGNvbnN0IGlzQWN0aXZlQWQgPSAoYWQ6IEFkKSA9PiBwbGF5ZXIuYWRzLmdldEFjdGl2ZUFkKCkuaWQgPT09IGFkLmlkO1xuICAgICAgICAgIGNvbnN0IGluZGV4T2ZBY3RpdmVBZCA9IHBsYXllci5hZHMuZ2V0QWN0aXZlQWRCcmVhaygpLmFkcy5maW5kSW5kZXgoaXNBY3RpdmVBZCk7XG4gICAgICAgICAgY29uc3QgZHVyYXRpb24gPSBwbGF5ZXIuYWRzLmdldEFjdGl2ZUFkQnJlYWsoKS5hZHNcbiAgICAgICAgICAuc2xpY2UoaW5kZXhPZkFjdGl2ZUFkKVxuICAgICAgICAgIC5yZWR1Y2UoKHRvdGFsLCBhZCkgPT4gdG90YWwgKyAoYWQuaXNMaW5lYXIgPyAoYWQgYXMgTGluZWFyQWQpLmR1cmF0aW9uIDogMCksIDApO1xuXG4gICAgICAgICAgLy8gQW5kIHJlbWFuaW5nIGFkcyBkdXJhdGlvbiBtaW51cyB0aW1lIHBsYXllZFxuICAgICAgICAgIHRpbWUgPSBkdXJhdGlvbiAtIHBsYXllci5nZXRDdXJyZW50VGltZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmb3JtYXROdW1iZXIoTWF0aC5yb3VuZCh0aW1lKSwgZm9ybWF0U3RyaW5nKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdE51bWJlcih0aW1lOiBudW1iZXIsIGZvcm1hdDogc3RyaW5nKSB7XG4gICAgbGV0IGZvcm1hdFN0cmluZ1ZhbGlkYXRpb25SZWdleCA9IC8lKCgwWzEtOV1cXGQqKFxcLlxcZCsoZHxmKXxkfGYpfFxcLlxcZCtmfGR8Zil8aGg6bW06c3N8bW06c3MpLztcbiAgICBsZXQgbGVhZGluZ1plcm9lc1JlZ2V4ID0gLyglMFsxLTldXFxkKikoPz0oXFwuXFxkK2Z8ZnxkKSkvO1xuICAgIGxldCBkZWNpbWFsUGxhY2VzUmVnZXggPSAvXFwuXFxkKig/PWYpLztcblxuICAgIGlmICghZm9ybWF0U3RyaW5nVmFsaWRhdGlvblJlZ2V4LnRlc3QoZm9ybWF0KSkge1xuICAgICAgLy8gSWYgdGhlIGZvcm1hdCBpcyBpbnZhbGlkLCB3ZSBzZXQgYSBkZWZhdWx0IGZhbGxiYWNrIGZvcm1hdFxuICAgICAgZm9ybWF0ID0gJyVkJztcbiAgICB9XG5cbiAgICAvLyBEZXRlcm1pbmUgdGhlIG51bWJlciBvZiBsZWFkaW5nIHplcm9zXG4gICAgbGV0IGxlYWRpbmdaZXJvZXMgPSAwO1xuICAgIGxldCBsZWFkaW5nWmVyb2VzTWF0Y2hlcyA9IGZvcm1hdC5tYXRjaChsZWFkaW5nWmVyb2VzUmVnZXgpO1xuICAgIGlmIChsZWFkaW5nWmVyb2VzTWF0Y2hlcykge1xuICAgICAgbGVhZGluZ1plcm9lcyA9IHBhcnNlSW50KGxlYWRpbmdaZXJvZXNNYXRjaGVzWzBdLnN1YnN0cmluZygyKSk7XG4gICAgfVxuXG4gICAgLy8gRGV0ZXJtaW5lIHRoZSBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXNcbiAgICBsZXQgbnVtRGVjaW1hbFBsYWNlcyA9IG51bGw7XG4gICAgbGV0IGRlY2ltYWxQbGFjZXNNYXRjaGVzID0gZm9ybWF0Lm1hdGNoKGRlY2ltYWxQbGFjZXNSZWdleCk7XG4gICAgaWYgKGRlY2ltYWxQbGFjZXNNYXRjaGVzICYmICFpc05hTihwYXJzZUludChkZWNpbWFsUGxhY2VzTWF0Y2hlc1swXS5zdWJzdHJpbmcoMSkpKSkge1xuICAgICAgbnVtRGVjaW1hbFBsYWNlcyA9IHBhcnNlSW50KGRlY2ltYWxQbGFjZXNNYXRjaGVzWzBdLnN1YnN0cmluZygxKSk7XG4gICAgICBpZiAobnVtRGVjaW1hbFBsYWNlcyA+IDIwKSB7XG4gICAgICAgIG51bURlY2ltYWxQbGFjZXMgPSAyMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGbG9hdCBmb3JtYXRcbiAgICBpZiAoZm9ybWF0LmluZGV4T2YoJ2YnKSA+IC0xKSB7XG4gICAgICBsZXQgdGltZVN0cmluZyA9ICcnO1xuXG4gICAgICBpZiAobnVtRGVjaW1hbFBsYWNlcyAhPT0gbnVsbCkge1xuICAgICAgICAvLyBBcHBseSBmaXhlZCBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXNcbiAgICAgICAgdGltZVN0cmluZyA9IHRpbWUudG9GaXhlZChudW1EZWNpbWFsUGxhY2VzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpbWVTdHJpbmcgPSAnJyArIHRpbWU7XG4gICAgICB9XG5cbiAgICAgIC8vIEFwcGx5IGxlYWRpbmcgemVyb3NcbiAgICAgIGlmICh0aW1lU3RyaW5nLmluZGV4T2YoJy4nKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiBsZWZ0UGFkV2l0aFplcm9zKHRpbWVTdHJpbmcsIHRpbWVTdHJpbmcubGVuZ3RoICsgKGxlYWRpbmdaZXJvZXMgLSB0aW1lU3RyaW5nLmluZGV4T2YoJy4nKSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxlZnRQYWRXaXRoWmVyb3ModGltZVN0cmluZywgbGVhZGluZ1plcm9lcyk7XG4gICAgICB9XG5cbiAgICB9XG4gICAgLy8gVGltZSBmb3JtYXRcbiAgICBlbHNlIGlmIChmb3JtYXQuaW5kZXhPZignOicpID4gLTEpIHtcbiAgICAgIGxldCB0b3RhbFNlY29uZHMgPSBNYXRoLmNlaWwodGltZSk7XG5cbiAgICAgIC8vIGhoOm1tOnNzIGZvcm1hdFxuICAgICAgaWYgKGZvcm1hdC5pbmRleE9mKCdoaCcpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHNlY29uZHNUb1RpbWUodG90YWxTZWNvbmRzKTtcbiAgICAgIH1cbiAgICAgIC8vIG1tOnNzIGZvcm1hdFxuICAgICAgZWxzZSB7XG4gICAgICAgIGxldCBtaW51dGVzID0gTWF0aC5mbG9vcih0b3RhbFNlY29uZHMgLyA2MCk7XG4gICAgICAgIGxldCBzZWNvbmRzID0gdG90YWxTZWNvbmRzICUgNjA7XG5cbiAgICAgICAgcmV0dXJuIGxlZnRQYWRXaXRoWmVyb3MobWludXRlcywgMikgKyAnOicgKyBsZWZ0UGFkV2l0aFplcm9zKHNlY29uZHMsIDIpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBJbnRlZ2VyIGZvcm1hdFxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIGxlZnRQYWRXaXRoWmVyb3MoTWF0aC5jZWlsKHRpbWUpLCBsZWFkaW5nWmVyb2VzKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IExpc3RJdGVtLCBMaXN0U2VsZWN0b3IsIExpc3RTZWxlY3RvckNvbmZpZyB9IGZyb20gJy4vY29tcG9uZW50cy9saXN0c2VsZWN0b3InO1xuaW1wb3J0IHsgVUlJbnN0YW5jZU1hbmFnZXIgfSBmcm9tICcuL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEksIFN1YnRpdGxlRXZlbnQsIFN1YnRpdGxlVHJhY2sgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJy4vbG9jYWxpemF0aW9uL2kxOG4nO1xuXG4vKipcbiAqIEhlbHBlciBjbGFzcyB0byBoYW5kbGUgYWxsIHN1YnRpdGxlIHJlbGF0ZWQgZXZlbnRzXG4gKlxuICogVGhpcyBjbGFzcyBsaXN0ZW5zIHRvIHBsYXllciBldmVudHMgYXMgd2VsbCBhcyB0aGUgYExpc3RTZWxlY3RvcmAgZXZlbnQgaWYgc2VsZWN0aW9uIGNoYW5nZWRcbiAqXG4gKiBAY2F0ZWdvcnkgVXRpbHNcbiAqL1xuZXhwb3J0IGNsYXNzIFN1YnRpdGxlU3dpdGNoSGFuZGxlciB7XG5cbiAgcHJpdmF0ZSBzdGF0aWMgU1VCVElUTEVTX09GRl9LRVk6IHN0cmluZyA9ICdudWxsJztcblxuICBwcml2YXRlIHBsYXllcjogUGxheWVyQVBJO1xuICBwcml2YXRlIGxpc3RFbGVtZW50OiBMaXN0U2VsZWN0b3I8TGlzdFNlbGVjdG9yQ29uZmlnPjtcbiAgcHJpdmF0ZSB1aW1hbmFnZXI6IFVJSW5zdGFuY2VNYW5hZ2VyO1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllcjogUGxheWVyQVBJLCBlbGVtZW50OiBMaXN0U2VsZWN0b3I8TGlzdFNlbGVjdG9yQ29uZmlnPiwgdWltYW5hZ2VyOiBVSUluc3RhbmNlTWFuYWdlcikge1xuICAgIHRoaXMucGxheWVyID0gcGxheWVyO1xuICAgIHRoaXMubGlzdEVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMudWltYW5hZ2VyID0gdWltYW5hZ2VyO1xuXG4gICAgdGhpcy5iaW5kU2VsZWN0aW9uRXZlbnQoKTtcbiAgICB0aGlzLmJpbmRQbGF5ZXJFdmVudHMoKTtcbiAgICB0aGlzLnJlZnJlc2hTdWJ0aXRsZXMoKTtcbiAgfVxuXG4gIHByaXZhdGUgYmluZFNlbGVjdGlvbkV2ZW50KCk6IHZvaWQge1xuICAgIHRoaXMubGlzdEVsZW1lbnQub25JdGVtU2VsZWN0ZWQuc3Vic2NyaWJlKChfLCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICAvLyBUT0RPIGFkZCBzdXBwb3J0IGZvciBtdWx0aXBsZSBjb25jdXJyZW50IHN1YnRpdGxlIHNlbGVjdGlvbnNcbiAgICAgIGlmICh2YWx1ZSA9PT0gU3VidGl0bGVTd2l0Y2hIYW5kbGVyLlNVQlRJVExFU19PRkZfS0VZKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTdWJ0aXRsZSA9IHRoaXMucGxheWVyLnN1YnRpdGxlcy5saXN0KCkuZmlsdGVyKChzdWJ0aXRsZSkgPT4gc3VidGl0bGUuZW5hYmxlZCkucG9wKCk7XG4gICAgICAgIGlmIChjdXJyZW50U3VidGl0bGUpIHtcbiAgICAgICAgICB0aGlzLnBsYXllci5zdWJ0aXRsZXMuZGlzYWJsZShjdXJyZW50U3VidGl0bGUuaWQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBsYXllci5zdWJ0aXRsZXMuZW5hYmxlKHZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgYmluZFBsYXllckV2ZW50cygpOiB2b2lkIHtcbiAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlN1YnRpdGxlQWRkZWQsIHRoaXMuYWRkU3VidGl0bGUpO1xuICAgIHRoaXMucGxheWVyLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuU3VidGl0bGVFbmFibGVkLCB0aGlzLnNlbGVjdEN1cnJlbnRTdWJ0aXRsZSk7XG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TdWJ0aXRsZURpc2FibGVkLCB0aGlzLnNlbGVjdEN1cnJlbnRTdWJ0aXRsZSk7XG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5TdWJ0aXRsZVJlbW92ZWQsIHRoaXMucmVtb3ZlU3VidGl0bGUpO1xuICAgIC8vIFVwZGF0ZSBzdWJ0aXRsZXMgd2hlbiBzb3VyY2UgZ29lcyBhd2F5XG4gICAgdGhpcy5wbGF5ZXIub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VVbmxvYWRlZCwgdGhpcy5jbGVhclN1YnRpdGxlcyk7XG4gICAgLy8gVXBkYXRlIHN1YnRpdGxlcyB3aGVuIHRoZSBwZXJpb2Qgd2l0aGluIGEgc291cmNlIGNoYW5nZXNcbiAgICB0aGlzLnBsYXllci5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBlcmlvZFN3aXRjaGVkLCB0aGlzLnJlZnJlc2hTdWJ0aXRsZXMpO1xuICAgIHRoaXMudWltYW5hZ2VyLmdldENvbmZpZygpLmV2ZW50cy5vblVwZGF0ZWQuc3Vic2NyaWJlKHRoaXMucmVmcmVzaFN1YnRpdGxlcyk7XG4gIH1cblxuICBwcml2YXRlIGFkZFN1YnRpdGxlID0gKGV2ZW50OiBTdWJ0aXRsZUV2ZW50KSA9PiB7XG4gICAgY29uc3Qgc3VidGl0bGUgPSBldmVudC5zdWJ0aXRsZTtcbiAgICBpZiAoIXRoaXMubGlzdEVsZW1lbnQuaGFzSXRlbShzdWJ0aXRsZS5pZCkpIHtcbiAgICAgIHRoaXMubGlzdEVsZW1lbnQuYWRkSXRlbShzdWJ0aXRsZS5pZCwgc3VidGl0bGUubGFiZWwpO1xuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIHJlbW92ZVN1YnRpdGxlID0gKGV2ZW50OiBTdWJ0aXRsZUV2ZW50KSA9PiB7XG4gICAgY29uc3Qgc3VidGl0bGUgPSBldmVudC5zdWJ0aXRsZTtcbiAgICBpZiAodGhpcy5saXN0RWxlbWVudC5oYXNJdGVtKHN1YnRpdGxlLmlkKSkge1xuICAgICAgdGhpcy5saXN0RWxlbWVudC5yZW1vdmVJdGVtKHN1YnRpdGxlLmlkKTtcbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSBzZWxlY3RDdXJyZW50U3VidGl0bGUgPSAoKSA9PiB7XG4gICAgaWYgKCF0aGlzLnBsYXllci5zdWJ0aXRsZXMpIHtcbiAgICAgIC8vIFN1YnRpdGxlcyBBUEkgbm90IGF2YWlsYWJsZSAoeWV0KVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBjdXJyZW50U3VidGl0bGUgPSB0aGlzLnBsYXllci5zdWJ0aXRsZXMubGlzdCgpLmZpbHRlcigoc3VidGl0bGUpID0+IHN1YnRpdGxlLmVuYWJsZWQpLnBvcCgpO1xuICAgIHRoaXMubGlzdEVsZW1lbnQuc2VsZWN0SXRlbShjdXJyZW50U3VidGl0bGUgPyBjdXJyZW50U3VidGl0bGUuaWQgOiBTdWJ0aXRsZVN3aXRjaEhhbmRsZXIuU1VCVElUTEVTX09GRl9LRVkpO1xuICB9O1xuXG4gIHByaXZhdGUgY2xlYXJTdWJ0aXRsZXMgPSAoKSA9PiB7XG4gICAgdGhpcy5saXN0RWxlbWVudC5jbGVhckl0ZW1zKCk7XG4gIH1cblxuICBwcml2YXRlIHJlZnJlc2hTdWJ0aXRsZXMgPSAoKSA9PiB7XG4gICAgaWYgKCF0aGlzLnBsYXllci5zdWJ0aXRsZXMpIHtcbiAgICAgIC8vIFN1YnRpdGxlcyBBUEkgbm90IGF2YWlsYWJsZSAoeWV0KVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG9mZkxpc3RJdGVtOiBMaXN0SXRlbSA9IHtcbiAgICAgIGtleTogU3VidGl0bGVTd2l0Y2hIYW5kbGVyLlNVQlRJVExFU19PRkZfS0VZLFxuICAgICAgbGFiZWw6IGkxOG4uZ2V0TG9jYWxpemVyKCdvZmYnKSxcbiAgICB9O1xuXG4gICAgY29uc3Qgc3VidGl0bGVzID0gdGhpcy5wbGF5ZXIuc3VidGl0bGVzLmxpc3QoKTtcbiAgICBjb25zdCBzdWJ0aXRsZVRvTGlzdEl0ZW0gPSAoc3VidGl0bGU6IFN1YnRpdGxlVHJhY2spOiBMaXN0SXRlbSA9PiB7XG4gICAgICByZXR1cm4geyBrZXk6IHN1YnRpdGxlLmlkLCBsYWJlbDogc3VidGl0bGUubGFiZWwgfTtcbiAgICB9O1xuXG4gICAgdGhpcy5saXN0RWxlbWVudC5zeW5jaHJvbml6ZUl0ZW1zKFtcbiAgICAgIG9mZkxpc3RJdGVtLCAuLi5zdWJ0aXRsZXMubWFwKHN1YnRpdGxlVG9MaXN0SXRlbSksXG4gICAgXSk7XG4gICAgdGhpcy5zZWxlY3RDdXJyZW50U3VidGl0bGUoKTtcbiAgfTtcbn1cbiIsIi8vIFRPRE8gY2hhbmdlIHRvIGludGVybmFsIChub3QgZXhwb3J0ZWQpIGNsYXNzLCBob3cgdG8gdXNlIGluIG90aGVyIGZpbGVzP1xuLyoqXG4gKiBFeGVjdXRlcyBhIGNhbGxiYWNrIGFmdGVyIGEgc3BlY2lmaWVkIGFtb3VudCBvZiB0aW1lLCBvcHRpb25hbGx5IHJlcGVhdGVkbHkgdW50aWwgc3RvcHBlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFRpbWVvdXQge1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgZGVsYXk6IG51bWJlcjtcbiAgcHJpdmF0ZSByZWFkb25seSBjYWxsYmFjazogKCkgPT4gdm9pZDtcbiAgcHJpdmF0ZSByZWFkb25seSByZXBlYXQ6IGJvb2xlYW47XG4gIC8vIFRoZXJlJ3MgdHdvIHNldFRpbWVvdXQgZGVjbGFyYXRpb25zLCBvbmUgb24gV2luZG93IHdoaWNoIHJldHVybnMgdHlwZSBcIm51bWJlclwiIGFuZCBvbmUgaW4gTm9kZUpTIHdoaWNoIHJldHVybnNcbiAgLy8gdHlwZSBcIlRpbWVyXCIuIEZvciB1bmtub3duIHJlYXNvbnMgYnVpbGRzIG9uIEplbmtpbnMgZmFpbCBkdWUgdG8gYSB0eXBlIG1pc21hdGNoIHdoZW4gd2UgdXNlIHR5cGUgXCJudW1iZXJcIiBoZXJlLFxuICAvLyBhbHRob3VnaCBpdCB3b3JrcyBvbiBvdGhlciBwbGF0Zm9ybXMgKGUuZy4gV2luZG93cywgQ29kZXNoaXApLlxuICAvLyBUbyB3b3JrIGFyb3VuZCB0aGUgaXNzdWUgd2UgdXNlIHR5cGUgXCJhbnlcIi4gVGhlIHR5cGUgZG9lcyBub3QgbWF0dGVyIGFueXdheSBiZWNhdXNlIHdlJ3JlIG5vdCB3b3JraW5nIHdpdGhcbiAgLy8gdGhpcyB2YWx1ZSBleGNlcHQgcHJvdmlkaW5nIGl0IHRvIGNsZWFyVGltZW91dC5cbiAgcHJpdmF0ZSB0aW1lb3V0T3JJbnRlcnZhbElkOiBhbnk7XG4gIHByaXZhdGUgYWN0aXZlOiBib29sZWFuO1xuICBwcml2YXRlIHN1c3BlbmRlZDogYm9vbGVhbjtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyB0aW1lb3V0IGNhbGxiYWNrIGhhbmRsZXIuXG4gICAqIEBwYXJhbSBkZWxheSB0aGUgZGVsYXkgaW4gbWlsbGlzZWNvbmRzIGFmdGVyIHdoaWNoIHRoZSBjYWxsYmFjayBzaG91bGQgYmUgZXhlY3V0ZWRcbiAgICogQHBhcmFtIGNhbGxiYWNrIHRoZSBjYWxsYmFjayB0byBleGVjdXRlIGFmdGVyIHRoZSBkZWxheSB0aW1lXG4gICAqIEBwYXJhbSByZXBlYXQgaWYgdHJ1ZSwgY2FsbCB0aGUgY2FsbGJhY2sgcmVwZWF0ZWRseSBpbiBkZWxheSBpbnRlcnZhbHNcbiAgICovXG4gIGNvbnN0cnVjdG9yKGRlbGF5OiBudW1iZXIsIGNhbGxiYWNrOiAoKSA9PiB2b2lkLCByZXBlYXQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgIHRoaXMuZGVsYXkgPSBkZWxheTtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5yZXBlYXQgPSByZXBlYXQ7XG4gICAgdGhpcy50aW1lb3V0T3JJbnRlcnZhbElkID0gMDtcbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMuc3VzcGVuZGVkID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIHRoZSB0aW1lb3V0IGFuZCBjYWxscyB0aGUgY2FsbGJhY2sgd2hlbiB0aGUgdGltZW91dCBkZWxheSBoYXMgcGFzc2VkLiBIYXMgbm8gZWZmZWN0IHdoZW4gdGhlIHRpbWVvdXQgaXNcbiAgICogc3VzcGVuZGVkLlxuICAgKiBAcmV0dXJucyB7VGltZW91dH0gdGhlIGN1cnJlbnQgdGltZW91dCAoc28gdGhlIHN0YXJ0IGNhbGwgY2FuIGJlIGNoYWluZWQgdG8gdGhlIGNvbnN0cnVjdG9yKVxuICAgKi9cbiAgc3RhcnQoKTogdGhpcyB7XG4gICAgdGhpcy5yZXNldCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyB0aGUgdGltZW91dC4gVGhlIGNhbGxiYWNrIHdpbGwgbm90IGJlIGNhbGxlZCBpZiBjbGVhciBpcyBjYWxsZWQgZHVyaW5nIHRoZSB0aW1lb3V0LlxuICAgKi9cbiAgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5jbGVhckludGVybmFsKCk7XG4gIH1cblxuICAvKipcbiAgICogU3VzcGVuZHMgdGhlIHRpbWVvdXQuIFRoZSBjYWxsYmFjayB3aWxsIG5vdCBiZSBjYWxsZWQgYW5kIGNhbGxzIHRvIGBzdGFydGAgYW5kIGByZXNldGAgd2lsbCBiZSBpZ25vcmVkIHVudGlsIHRoZVxuICAgKiB0aW1lb3V0IGlzIHJlc3VtZWQuXG4gICAqL1xuICBzdXNwZW5kKCkge1xuICAgIHRoaXMuc3VzcGVuZGVkID0gdHJ1ZTtcbiAgICB0aGlzLmNsZWFySW50ZXJuYWwoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc3VtZXMgdGhlIHRpbWVvdXQuXG4gICAqIEBwYXJhbSByZXNldCB3aGV0aGVyIHRvIHJlc2V0IHRoZSB0aW1lb3V0IGFmdGVyIHJlc3VtaW5nXG4gICAqL1xuICByZXN1bWUocmVzZXQ6IGJvb2xlYW4pIHtcbiAgICB0aGlzLnN1c3BlbmRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKHJlc2V0KSB7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBwYXNzZWQgdGltZW91dCBkZWxheSB0byB6ZXJvLiBDYW4gYmUgdXNlZCB0byBkZWZlciB0aGUgY2FsbGluZyBvZiB0aGUgY2FsbGJhY2suIEhhcyBubyBlZmZlY3QgaWYgdGhlXG4gICAqIHRpbWVvdXQgaXMgc3VzcGVuZGVkLlxuICAgKi9cbiAgcmVzZXQoKTogdm9pZCB7XG4gICAgdGhpcy5jbGVhckludGVybmFsKCk7XG5cbiAgICBpZiAodGhpcy5zdXNwZW5kZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZXBlYXQpIHtcbiAgICAgIHRoaXMudGltZW91dE9ySW50ZXJ2YWxJZCA9IHNldEludGVydmFsKHRoaXMuY2FsbGJhY2ssIHRoaXMuZGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRpbWVvdXRPckludGVydmFsSWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jYWxsYmFjaygpO1xuICAgICAgfSwgdGhpcy5kZWxheSk7XG4gICAgfVxuICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgfVxuXG4gIGlzQWN0aXZlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZTtcbiAgfVxuXG4gIHByaXZhdGUgY2xlYXJJbnRlcm5hbCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5yZXBlYXQpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lb3V0T3JJbnRlcnZhbElkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dE9ySW50ZXJ2YWxJZCk7XG4gICAgfVxuICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gIH1cbn0iLCJpbXBvcnQgeyBHb0JhY2tCdXR0b24gfSBmcm9tICcuLy4uL2N1c3RvbS90cy9jb21wb25lbnRzL2dvYmFja2J1dHRvbic7XG5pbXBvcnQgeyBSZXNldEJ1dHRvbiB9IGZyb20gJy4vLi4vY3VzdG9tL3RzL2NvbXBvbmVudHMvcmVzZXRidXR0b24nO1xuaW1wb3J0IHsgUmFkaW9Nb2RlVG9nZ2xlQnV0dG9uIH0gZnJvbSAnLi8uLi9jdXN0b20vdHMvY29tcG9uZW50cy9yYWRpb21vZGUvcmFkaW9tb2RldG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7IFF1YW50ZWVjQ29uc3VtcHRpb25zIH0gZnJvbSAnLi8uLi9jdXN0b20vdHMvY29tcG9uZW50cy9xdWFudGVlY2NvbnN1bXB0aW9ucyc7XG5cbmltcG9ydCB7IFBsYXliYWNrSnVtcENvbnRyb2xzT3ZlcmxheSB9IGZyb20gJy4uL2N1c3RvbS90cy9jb21wb25lbnRzL3BsYXliYWNranVtcG92ZXJsYXknO1xuaW1wb3J0IHsgU3VidGl0bGVPdmVybGF5IH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlb3ZlcmxheSc7XG5pbXBvcnQgeyBTZXR0aW5nc1BhbmVsUGFnZSB9IGZyb20gJy4vY29tcG9uZW50cy9zZXR0aW5nc3BhbmVscGFnZSc7XG5pbXBvcnQgeyBTZXR0aW5nc1BhbmVsSXRlbSB9IGZyb20gJy4vY29tcG9uZW50cy9zZXR0aW5nc3BhbmVsaXRlbSc7XG5pbXBvcnQgeyBWaWRlb1F1YWxpdHlTZWxlY3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvdmlkZW9xdWFsaXR5c2VsZWN0Ym94JztcbmltcG9ydCB7IFBsYXliYWNrU3BlZWRTZWxlY3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvcGxheWJhY2tzcGVlZHNlbGVjdGJveCc7XG5pbXBvcnQgeyBBdWRpb1RyYWNrU2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL2F1ZGlvdHJhY2tzZWxlY3Rib3gnO1xuaW1wb3J0IHsgQXVkaW9RdWFsaXR5U2VsZWN0Qm94IH0gZnJvbSAnLi9jb21wb25lbnRzL2F1ZGlvcXVhbGl0eXNlbGVjdGJveCc7XG5pbXBvcnQgeyBTZXR0aW5nc1BhbmVsIH0gZnJvbSAnLi9jb21wb25lbnRzL3NldHRpbmdzcGFuZWwnO1xuaW1wb3J0IHsgU3VidGl0bGVTZXR0aW5nc1BhbmVsUGFnZSB9IGZyb20gJy4vY29tcG9uZW50cy9zdWJ0aXRsZXNldHRpbmdzL3N1YnRpdGxlc2V0dGluZ3NwYW5lbHBhZ2UnO1xuaW1wb3J0IHsgU2V0dGluZ3NQYW5lbFBhZ2VPcGVuQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL3NldHRpbmdzcGFuZWxwYWdlb3BlbmJ1dHRvbic7XG5pbXBvcnQgeyBTdWJ0aXRsZVNldHRpbmdzTGFiZWwgfSBmcm9tICcuL2NvbXBvbmVudHMvc3VidGl0bGVzZXR0aW5ncy9zdWJ0aXRsZXNldHRpbmdzbGFiZWwnO1xuaW1wb3J0IHsgU3VidGl0bGVTZWxlY3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvc3VidGl0bGVzZWxlY3Rib3gnO1xuaW1wb3J0IHsgQ29udHJvbEJhciB9IGZyb20gJy4vY29tcG9uZW50cy9jb250cm9sYmFyJztcbmltcG9ydCB7IENvbnRhaW5lciwgQ29udGFpbmVyQ29uZmlnIH0gZnJvbSAnLi9jb21wb25lbnRzL2NvbnRhaW5lcic7XG5pbXBvcnQgeyBQbGF5YmFja1RpbWVMYWJlbCwgUGxheWJhY2tUaW1lTGFiZWxNb2RlIH0gZnJvbSAnLi9jb21wb25lbnRzL3BsYXliYWNrdGltZWxhYmVsJztcbmltcG9ydCB7IFNlZWtCYXIgfSBmcm9tICcuL2NvbXBvbmVudHMvc2Vla2Jhcic7XG5pbXBvcnQgeyBTZWVrQmFyTGFiZWwgfSBmcm9tICcuL2NvbXBvbmVudHMvc2Vla2JhcmxhYmVsJztcbmltcG9ydCB7IFBsYXliYWNrVG9nZ2xlQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL3BsYXliYWNrdG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7IFZvbHVtZVRvZ2dsZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy92b2x1bWV0b2dnbGVidXR0b24nO1xuaW1wb3J0IHsgVm9sdW1lU2xpZGVyIH0gZnJvbSAnLi9jb21wb25lbnRzL3ZvbHVtZXNsaWRlcic7XG5pbXBvcnQgeyBTcGFjZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvc3BhY2VyJztcbmltcG9ydCB7IFBpY3R1cmVJblBpY3R1cmVUb2dnbGVCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvcGljdHVyZWlucGljdHVyZXRvZ2dsZWJ1dHRvbic7XG5pbXBvcnQgeyBBaXJQbGF5VG9nZ2xlQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL2FpcnBsYXl0b2dnbGVidXR0b24nO1xuaW1wb3J0IHsgQ2FzdFRvZ2dsZUJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9jYXN0dG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7IFZSVG9nZ2xlQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL3ZydG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7IFNldHRpbmdzVG9nZ2xlQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL3NldHRpbmdzdG9nZ2xlYnV0dG9uJztcbmltcG9ydCB7IEZ1bGxzY3JlZW5Ub2dnbGVCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvZnVsbHNjcmVlbnRvZ2dsZWJ1dHRvbic7XG5pbXBvcnQgeyBVSUNvbnRhaW5lciB9IGZyb20gJy4vY29tcG9uZW50cy91aWNvbnRhaW5lcic7XG5pbXBvcnQgeyBCdWZmZXJpbmdPdmVybGF5IH0gZnJvbSAnLi9jb21wb25lbnRzL2J1ZmZlcmluZ292ZXJsYXknO1xuaW1wb3J0IHsgUGxheWJhY2tUb2dnbGVPdmVybGF5IH0gZnJvbSAnLi9jb21wb25lbnRzL3BsYXliYWNrdG9nZ2xlb3ZlcmxheSc7XG5pbXBvcnQgeyBDYXN0U3RhdHVzT3ZlcmxheSB9IGZyb20gJy4vY29tcG9uZW50cy9jYXN0c3RhdHVzb3ZlcmxheSc7XG5pbXBvcnQgeyBUaXRsZUJhciB9IGZyb20gJy4vY29tcG9uZW50cy90aXRsZWJhcic7XG5pbXBvcnQgeyBSZWNvbW1lbmRhdGlvbk92ZXJsYXkgfSBmcm9tICcuL2NvbXBvbmVudHMvcmVjb21tZW5kYXRpb25vdmVybGF5JztcbmltcG9ydCB7IFdhdGVybWFyayB9IGZyb20gJy4vY29tcG9uZW50cy93YXRlcm1hcmsnO1xuaW1wb3J0IHsgRXJyb3JNZXNzYWdlT3ZlcmxheSB9IGZyb20gJy4vY29tcG9uZW50cy9lcnJvcm1lc3NhZ2VvdmVybGF5JztcbmltcG9ydCB7IEFkQ2xpY2tPdmVybGF5IH0gZnJvbSAnLi9jb21wb25lbnRzL2FkY2xpY2tvdmVybGF5JztcbmltcG9ydCB7IEFkTWVzc2FnZUxhYmVsIH0gZnJvbSAnLi9jb21wb25lbnRzL2FkbWVzc2FnZWxhYmVsJztcbmltcG9ydCB7IEFkU2tpcEJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9hZHNraXBidXR0b24nO1xuaW1wb3J0IHsgQ2xvc2VCdXR0b24gfSBmcm9tICcuL2NvbXBvbmVudHMvY2xvc2VidXR0b24nO1xuXG5pbXBvcnQge1xuICBNZXRhZGF0YUxhYmVsLFxuICBNZXRhZGF0YUxhYmVsQ29udGVudCxcbn0gZnJvbSAnLi9jb21wb25lbnRzL21ldGFkYXRhbGFiZWwnO1xuaW1wb3J0IHsgUGxheWVyVXRpbHMgfSBmcm9tICcuL3BsYXllcnV0aWxzJztcbmltcG9ydCB7IExhYmVsIH0gZnJvbSAnLi9jb21wb25lbnRzL2xhYmVsJztcbmltcG9ydCB7IENhc3RVSUNvbnRhaW5lciB9IGZyb20gJy4vY29tcG9uZW50cy9jYXN0dWljb250YWluZXInO1xuaW1wb3J0IHsgVUlDb25kaXRpb25Db250ZXh0LCBVSU1hbmFnZXIgfSBmcm9tICcuL3VpbWFuYWdlcic7XG5pbXBvcnQgeyBVSUNvbmZpZyB9IGZyb20gJy4vdWljb25maWcnO1xuaW1wb3J0IHsgUGxheWVyQVBJIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuL2xvY2FsaXphdGlvbi9pMThuJztcbmltcG9ydCB7IFN1YnRpdGxlTGlzdEJveCB9IGZyb20gJy4vY29tcG9uZW50cy9zdWJ0aXRsZWxpc3Rib3gnO1xuaW1wb3J0IHsgQXVkaW9UcmFja0xpc3RCb3ggfSBmcm9tICcuL2NvbXBvbmVudHMvYXVkaW90cmFja2xpc3Rib3gnO1xuaW1wb3J0IHsgU3BhdGlhbE5hdmlnYXRpb24gfSBmcm9tICcuL3NwYXRpYWxuYXZpZ2F0aW9uL3NwYXRpYWxuYXZpZ2F0aW9uJztcbmltcG9ydCB7IFJvb3ROYXZpZ2F0aW9uR3JvdXAgfSBmcm9tICcuL3NwYXRpYWxuYXZpZ2F0aW9uL3Jvb3RuYXZpZ2F0aW9uZ3JvdXAnO1xuaW1wb3J0IHsgTGlzdE5hdmlnYXRpb25Hcm91cCwgTGlzdE9yaWVudGF0aW9uIH0gZnJvbSAnLi9zcGF0aWFsbmF2aWdhdGlvbi9MaXN0TmF2aWdhdGlvbkdyb3VwJztcbmltcG9ydCB7IEVjb01vZGVDb250YWluZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvZWNvbW9kZWNvbnRhaW5lcic7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgYml0bW92aW46IGFueTtcbiAgfVxufVxuXG5sZXQgdWlNYW5hZ2VyOiBVSU1hbmFnZXI7XG5sZXQgcGxheWVyQXBpOiBQbGF5ZXJBUEk7XG5sZXQgdWlDb25maWc6IFVJQ29uZmlnO1xuXG5leHBvcnQgbmFtZXNwYWNlIFVJRmFjdG9yeSB7XG4gIGV4cG9ydCBmdW5jdGlvbiBidWlsZERlZmF1bHRVSShwbGF5ZXI6IFBsYXllckFQSSwgY29uZmlnOiBVSUNvbmZpZyA9IHt9KTogVUlNYW5hZ2VyIHtcbiAgICByZXR1cm4gVUlGYWN0b3J5LmJ1aWxkTW9kZXJuVUkocGxheWVyLCBjb25maWcpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkRGVmYXVsdFNtYWxsU2NyZWVuVUkoXG4gICAgcGxheWVyOiBQbGF5ZXJBUEksXG4gICAgY29uZmlnOiBVSUNvbmZpZyA9IHt9LFxuICApOiBVSU1hbmFnZXIge1xuICAgIHVpQ29uZmlnID0gY29uZmlnO1xuICAgIHBsYXllckFwaSA9IHBsYXllcjtcbiAgICB1aU1hbmFnZXIgPSBVSUZhY3RvcnkuYnVpbGRNb2Rlcm5TbWFsbFNjcmVlblVJKHBsYXllciwgY29uZmlnKTtcbiAgICByZXR1cm4gdWlNYW5hZ2VyO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkRGVmYXVsdENhc3RSZWNlaXZlclVJKFxuICAgIHBsYXllcjogUGxheWVyQVBJLFxuICAgIGNvbmZpZzogVUlDb25maWcgPSB7fSxcbiAgKTogVUlNYW5hZ2VyIHtcbiAgICByZXR1cm4gVUlGYWN0b3J5LmJ1aWxkTW9kZXJuQ2FzdFJlY2VpdmVyVUkocGxheWVyLCBjb25maWcpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkRGVmYXVsdFR2VUkoXG4gICAgcGxheWVyOiBQbGF5ZXJBUEksXG4gICAgY29uZmlnOiBVSUNvbmZpZyA9IHt9LFxuICApOiBVSU1hbmFnZXIge1xuICAgIHJldHVybiBVSUZhY3RvcnkuYnVpbGRNb2Rlcm5UdlVJKHBsYXllciwgY29uZmlnKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBtb2Rlcm5VSSh7IGVjb01vZGUsIHJhZGlvTW9kZUF2YWlsYWJsZSB9OiBVSUNvbmZpZykge1xuICAgIGxldCBzdWJ0aXRsZU92ZXJsYXkgPSBuZXcgU3VidGl0bGVPdmVybGF5KCk7XG5cbiAgICBsZXQgbWFpblNldHRpbmdzUGFuZWxQYWdlOiBTZXR0aW5nc1BhbmVsUGFnZTtcblxuICAgIGNvbnN0IGNvbXBvbmVudHM6IENvbnRhaW5lcjxDb250YWluZXJDb25maWc+W10gPSBbXG4gICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnZpZGVvLnF1YWxpdHknKSwgbmV3IFZpZGVvUXVhbGl0eVNlbGVjdEJveCgpKSxcbiAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbShpMThuLmdldExvY2FsaXplcignc3BlZWQnKSwgbmV3IFBsYXliYWNrU3BlZWRTZWxlY3RCb3goKSksXG4gICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLmF1ZGlvLnRyYWNrJyksIG5ldyBBdWRpb1RyYWNrU2VsZWN0Qm94KCkpLFxuICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5hdWRpby5xdWFsaXR5JyksIG5ldyBBdWRpb1F1YWxpdHlTZWxlY3RCb3goKSksXG4gICAgXTtcblxuICAgIGlmIChlY29Nb2RlKSB7XG4gICAgICBjb25zdCBlY29Nb2RlQ29udGFpbmVyID0gbmV3IEVjb01vZGVDb250YWluZXIoKTtcblxuICAgICAgZWNvTW9kZUNvbnRhaW5lci5zZXRPblRvZ2dsZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlLWNhbGN1bGF0ZSB0aGUgaGVpZ2h0IG9mIHRoZSBzZXR0aW5ncyBwYW5lbCB3aGVuIGFkZGluZy9yZW1vdmluZyBlbGVtZW50c1xuICAgICAgICBzZXR0aW5nc1BhbmVsLmdldERvbUVsZW1lbnQoKS5jc3MoeyB3aWR0aDogJycsIGhlaWdodDogJycgfSk7XG4gICAgICB9KTtcblxuICAgICAgY29tcG9uZW50cy51bnNoaWZ0KGVjb01vZGVDb250YWluZXIpO1xuICAgIH1cblxuICAgIG1haW5TZXR0aW5nc1BhbmVsUGFnZSA9IG5ldyBTZXR0aW5nc1BhbmVsUGFnZSh7XG4gICAgICBjb21wb25lbnRzLFxuICAgIH0pO1xuXG4gICAgbGV0IHNldHRpbmdzUGFuZWwgPSBuZXcgU2V0dGluZ3NQYW5lbCh7XG4gICAgICBjb21wb25lbnRzOiBbbWFpblNldHRpbmdzUGFuZWxQYWdlXSxcbiAgICAgIGhpZGRlbjogdHJ1ZSxcbiAgICB9KTtcblxuICAgIGxldCBzdWJ0aXRsZVNldHRpbmdzUGFuZWxQYWdlID0gbmV3IFN1YnRpdGxlU2V0dGluZ3NQYW5lbFBhZ2Uoe1xuICAgICAgc2V0dGluZ3NQYW5lbDogc2V0dGluZ3NQYW5lbCxcbiAgICAgIG92ZXJsYXk6IHN1YnRpdGxlT3ZlcmxheSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHN1YnRpdGxlU2VsZWN0Qm94ID0gbmV3IFN1YnRpdGxlU2VsZWN0Qm94KCk7XG5cbiAgICBsZXQgc3VidGl0bGVTZXR0aW5nc09wZW5CdXR0b24gPSBuZXcgU2V0dGluZ3NQYW5lbFBhZ2VPcGVuQnV0dG9uKHtcbiAgICAgIHRhcmdldFBhZ2U6IHN1YnRpdGxlU2V0dGluZ3NQYW5lbFBhZ2UsXG4gICAgICBjb250YWluZXI6IHNldHRpbmdzUGFuZWwsXG4gICAgICBhcmlhTGFiZWw6IGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMnKSxcbiAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdvcGVuJyksXG4gICAgfSk7XG5cbiAgICBtYWluU2V0dGluZ3NQYW5lbFBhZ2UuYWRkQ29tcG9uZW50KFxuICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKFxuICAgICAgICBuZXcgU3VidGl0bGVTZXR0aW5nc0xhYmVsKHtcbiAgICAgICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzJyksXG4gICAgICAgICAgb3BlbmVyOiBzdWJ0aXRsZVNldHRpbmdzT3BlbkJ1dHRvbixcbiAgICAgICAgfSksXG4gICAgICAgIHN1YnRpdGxlU2VsZWN0Qm94LFxuICAgICAgICB7XG4gICAgICAgICAgcm9sZTogJ21lbnViYXInLFxuICAgICAgICB9LFxuICAgICAgKSxcbiAgICApO1xuXG4gICAgc2V0dGluZ3NQYW5lbC5hZGRDb21wb25lbnQoc3VidGl0bGVTZXR0aW5nc1BhbmVsUGFnZSk7XG5cbiAgICBsZXQgY29udGFpbmVyQ29tcG9uZW50cyA9IFtcbiAgICAgIG5ldyBQbGF5YmFja1RvZ2dsZUJ1dHRvbigpLFxuICAgICAgbmV3IFZvbHVtZVRvZ2dsZUJ1dHRvbigpLFxuICAgICAgbmV3IFZvbHVtZVNsaWRlcigpLFxuICAgICAgbmV3IFNwYWNlcigpLFxuICAgICAgbmV3IFBpY3R1cmVJblBpY3R1cmVUb2dnbGVCdXR0b24oKSxcbiAgICAgIG5ldyBBaXJQbGF5VG9nZ2xlQnV0dG9uKCksXG4gICAgICBuZXcgQ2FzdFRvZ2dsZUJ1dHRvbigpLFxuICAgICAgbmV3IFZSVG9nZ2xlQnV0dG9uKCksXG4gICAgICBuZXcgUXVhbnRlZWNDb25zdW1wdGlvbnMoKSxcbiAgICAgIG5ldyBTZXR0aW5nc1RvZ2dsZUJ1dHRvbih7IHNldHRpbmdzUGFuZWw6IHNldHRpbmdzUGFuZWwgfSksXG4gICAgICBuZXcgRnVsbHNjcmVlblRvZ2dsZUJ1dHRvbigpLFxuICAgIF07XG5cbiAgICBpZiAocmFkaW9Nb2RlQXZhaWxhYmxlKSB7XG4gICAgICBjb250YWluZXJDb21wb25lbnRzLnNwbGljZShcbiAgICAgICAgNyxcbiAgICAgICAgMCxcbiAgICAgICAgbmV3IFJhZGlvTW9kZVRvZ2dsZUJ1dHRvbih7IGFjdGl2ZTogZmFsc2UgfSksXG4gICAgICApO1xuICAgIH1cblxuICAgIGxldCBjb250cm9sQmFyID0gbmV3IENvbnRyb2xCYXIoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBzZXR0aW5nc1BhbmVsLFxuICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICBuZXcgUGxheWJhY2tUaW1lTGFiZWwoe1xuICAgICAgICAgICAgICB0aW1lTGFiZWxNb2RlOiBQbGF5YmFja1RpbWVMYWJlbE1vZGUuQ3VycmVudFRpbWUsXG4gICAgICAgICAgICAgIGhpZGVJbkxpdmVQbGF5YmFjazogdHJ1ZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IFNlZWtCYXIoeyBsYWJlbDogbmV3IFNlZWtCYXJMYWJlbCgpIH0pLFxuICAgICAgICAgICAgbmV3IFBsYXliYWNrVGltZUxhYmVsKHtcbiAgICAgICAgICAgICAgdGltZUxhYmVsTW9kZTogUGxheWJhY2tUaW1lTGFiZWxNb2RlLlRvdGFsVGltZSxcbiAgICAgICAgICAgICAgY3NzQ2xhc3NlczogWyd0ZXh0LXJpZ2h0J10sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIGNzc0NsYXNzZXM6IFsnY29udHJvbGJhci10b3AnXSxcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgIGNvbXBvbmVudHM6IGNvbnRhaW5lckNvbXBvbmVudHMsXG4gICAgICAgICAgY3NzQ2xhc3NlczogWydjb250cm9sYmFyLWJvdHRvbSddLFxuICAgICAgICB9KSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmV3IFVJQ29udGFpbmVyKHtcbiAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgc3VidGl0bGVPdmVybGF5LFxuICAgICAgICBuZXcgQnVmZmVyaW5nT3ZlcmxheSgpLFxuICAgICAgICBuZXcgUGxheWJhY2tUb2dnbGVPdmVybGF5KCksXG4gICAgICAgIG5ldyBQbGF5YmFja0p1bXBDb250cm9sc092ZXJsYXkoKSxcbiAgICAgICAgbmV3IENhc3RTdGF0dXNPdmVybGF5KCksXG4gICAgICAgIGNvbnRyb2xCYXIsXG4gICAgICAgIG5ldyBUaXRsZUJhcigpLFxuICAgICAgICBuZXcgUmVjb21tZW5kYXRpb25PdmVybGF5KCksXG4gICAgICAgIG5ldyBFcnJvck1lc3NhZ2VPdmVybGF5KCksXG4gICAgICBdLFxuICAgICAgaGlkZURlbGF5OiAyMDAwLFxuICAgICAgaGlkZVBsYXllclN0YXRlRXhjZXB0aW9uczogW1xuICAgICAgICBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5QcmVwYXJlZCxcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUGF1c2VkLFxuICAgICAgICBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5GaW5pc2hlZCxcbiAgICAgIF0sXG4gICAgfSk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gbW9kZXJuQWRzVUkoKSB7XG4gICAgcmV0dXJuIG5ldyBVSUNvbnRhaW5lcih7XG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIG5ldyBCdWZmZXJpbmdPdmVybGF5KCksXG4gICAgICAgIG5ldyBBZENsaWNrT3ZlcmxheSgpLFxuICAgICAgICBuZXcgUGxheWJhY2tUb2dnbGVPdmVybGF5KCksXG4gICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgIGNvbXBvbmVudHM6IFtuZXcgQWRNZXNzYWdlTGFiZWwoeyB0ZXh0OiBpMThuLmdldExvY2FsaXplcignYWRzLnJlbWFpbmluZ1RpbWUnKSB9KSwgbmV3IEFkU2tpcEJ1dHRvbigpXSxcbiAgICAgICAgICBjc3NDbGFzczogJ3VpLWFkcy1zdGF0dXMnLFxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IENvbnRyb2xCYXIoe1xuICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgICAgbmV3IFBsYXliYWNrVG9nZ2xlQnV0dG9uKCksXG4gICAgICAgICAgICAgICAgbmV3IFZvbHVtZVRvZ2dsZUJ1dHRvbigpLFxuICAgICAgICAgICAgICAgIG5ldyBWb2x1bWVTbGlkZXIoKSxcbiAgICAgICAgICAgICAgICBuZXcgU3BhY2VyKCksXG4gICAgICAgICAgICAgICAgbmV3IEZ1bGxzY3JlZW5Ub2dnbGVCdXR0b24oKSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgY3NzQ2xhc3NlczogWydjb250cm9sYmFyLWJvdHRvbSddLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgXSxcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgICAgY3NzQ2xhc3NlczogWyd1aS1za2luLWFkcyddLFxuICAgICAgaGlkZURlbGF5OiAyMDAwLFxuICAgICAgaGlkZVBsYXllclN0YXRlRXhjZXB0aW9uczogW1xuICAgICAgICBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5QcmVwYXJlZCxcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUGF1c2VkLFxuICAgICAgICBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5GaW5pc2hlZCxcbiAgICAgIF0sXG4gICAgfSk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gbW9kZXJuU21hbGxTY3JlZW5VSSh7XG4gICAgcmFkaW9Nb2RlQXZhaWxhYmxlLFxuICB9OiB7XG4gICAgcmFkaW9Nb2RlQXZhaWxhYmxlOiBib29sZWFuO1xuICB9KSB7XG4gICAgbGV0IHN1YnRpdGxlT3ZlcmxheSA9IG5ldyBTdWJ0aXRsZU92ZXJsYXkoKTtcblxuICAgIGxldCBtYWluU2V0dGluZ3NQYW5lbFBhZ2UgPSBuZXcgU2V0dGluZ3NQYW5lbFBhZ2Uoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oXG4gICAgICAgICAgaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLnZpZGVvLnF1YWxpdHknKSxcbiAgICAgICAgICBuZXcgVmlkZW9RdWFsaXR5U2VsZWN0Qm94KCksXG4gICAgICAgICksXG4gICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsSXRlbShcbiAgICAgICAgICBpMThuLmdldExvY2FsaXplcignc3BlZWQnKSxcbiAgICAgICAgICBuZXcgUGxheWJhY2tTcGVlZFNlbGVjdEJveCgpLFxuICAgICAgICApLFxuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oXG4gICAgICAgICAgaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLmF1ZGlvLnRyYWNrJyksXG4gICAgICAgICAgbmV3IEF1ZGlvVHJhY2tTZWxlY3RCb3goKSxcbiAgICAgICAgKSxcbiAgICAgICAgbmV3IFNldHRpbmdzUGFuZWxJdGVtKFxuICAgICAgICAgIGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5hdWRpby5xdWFsaXR5JyksXG4gICAgICAgICAgbmV3IEF1ZGlvUXVhbGl0eVNlbGVjdEJveCgpLFxuICAgICAgICApLFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIGxldCBzZXR0aW5nc1BhbmVsID0gbmV3IFNldHRpbmdzUGFuZWwoe1xuICAgICAgY29tcG9uZW50czogW21haW5TZXR0aW5nc1BhbmVsUGFnZV0sXG4gICAgICBoaWRkZW46IHRydWUsXG4gICAgICBwYWdlVHJhbnNpdGlvbkFuaW1hdGlvbjogZmFsc2UsXG4gICAgICBoaWRlRGVsYXk6IC0xLFxuICAgIH0pO1xuXG4gICAgbGV0IHN1YnRpdGxlU2V0dGluZ3NQYW5lbFBhZ2UgPSBuZXcgU3VidGl0bGVTZXR0aW5nc1BhbmVsUGFnZSh7XG4gICAgICBzZXR0aW5nc1BhbmVsOiBzZXR0aW5nc1BhbmVsLFxuICAgICAgb3ZlcmxheTogc3VidGl0bGVPdmVybGF5LFxuICAgIH0pO1xuXG4gICAgbGV0IHN1YnRpdGxlU2V0dGluZ3NPcGVuQnV0dG9uID0gbmV3IFNldHRpbmdzUGFuZWxQYWdlT3BlbkJ1dHRvbih7XG4gICAgICB0YXJnZXRQYWdlOiBzdWJ0aXRsZVNldHRpbmdzUGFuZWxQYWdlLFxuICAgICAgY29udGFpbmVyOiBzZXR0aW5nc1BhbmVsLFxuICAgICAgYXJpYUxhYmVsOiBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3Muc3VidGl0bGVzJyksXG4gICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcignb3BlbicpLFxuICAgIH0pO1xuXG4gICAgY29uc3Qgc3VidGl0bGVTZWxlY3RCb3ggPSBuZXcgU3VidGl0bGVTZWxlY3RCb3goKTtcblxuICAgIG1haW5TZXR0aW5nc1BhbmVsUGFnZS5hZGRDb21wb25lbnQoXG4gICAgICBuZXcgU2V0dGluZ3NQYW5lbEl0ZW0oXG4gICAgICAgIG5ldyBTdWJ0aXRsZVNldHRpbmdzTGFiZWwoe1xuICAgICAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMnKSxcbiAgICAgICAgICBvcGVuZXI6IHN1YnRpdGxlU2V0dGluZ3NPcGVuQnV0dG9uLFxuICAgICAgICB9KSxcbiAgICAgICAgc3VidGl0bGVTZWxlY3RCb3gsXG4gICAgICAgIHtcbiAgICAgICAgICByb2xlOiAnbWVudWJhcicsXG4gICAgICAgIH0sXG4gICAgICApLFxuICAgICk7XG5cbiAgICBzZXR0aW5nc1BhbmVsLmFkZENvbXBvbmVudChzdWJ0aXRsZVNldHRpbmdzUGFuZWxQYWdlKTtcblxuICAgIHNldHRpbmdzUGFuZWwuYWRkQ29tcG9uZW50KG5ldyBDbG9zZUJ1dHRvbih7IHRhcmdldDogc2V0dGluZ3NQYW5lbCB9KSk7XG4gICAgc3VidGl0bGVTZXR0aW5nc1BhbmVsUGFnZS5hZGRDb21wb25lbnQoXG4gICAgICBuZXcgQ2xvc2VCdXR0b24oeyB0YXJnZXQ6IHNldHRpbmdzUGFuZWwgfSksXG4gICAgKTtcblxuICAgIGxldCBjb250cm9sQmFyID0gbmV3IENvbnRyb2xCYXIoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICBuZXcgUGxheWJhY2tUaW1lTGFiZWwoe1xuICAgICAgICAgICAgICB0aW1lTGFiZWxNb2RlOiBQbGF5YmFja1RpbWVMYWJlbE1vZGUuQ3VycmVudFRpbWUsXG4gICAgICAgICAgICAgIGhpZGVJbkxpdmVQbGF5YmFjazogdHJ1ZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IFNlZWtCYXIoeyBsYWJlbDogbmV3IFNlZWtCYXJMYWJlbCgpIH0pLFxuICAgICAgICAgICAgbmV3IFBsYXliYWNrVGltZUxhYmVsKHtcbiAgICAgICAgICAgICAgdGltZUxhYmVsTW9kZTogUGxheWJhY2tUaW1lTGFiZWxNb2RlLlRvdGFsVGltZSxcbiAgICAgICAgICAgICAgY3NzQ2xhc3NlczogWyd0ZXh0LXJpZ2h0J10sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBGdWxsc2NyZWVuVG9nZ2xlQnV0dG9uKHtcbiAgICAgICAgICAgICAgY3NzQ2xhc3NlczogWydjb250cm9sYmFyLWZ1bGxzY3JlZW4tdG9nZ2xlLWJ1dHRvbiddLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgXSxcbiAgICAgICAgICBjc3NDbGFzc2VzOiBbJ2NvbnRyb2xiYXItdG9wJ10sXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIGxldCB0aXRsZUJhckNvbXBvbmVudHMgPSBbXTtcbiAgICBjb25zdCBpc0Jyb3dzZXIgPSAhd2luZG93LmJpdG1vdmluLmN1c3RvbU1lc3NhZ2VIYW5kbGVyO1xuXG4gICAgaWYgKCFpc0Jyb3dzZXIpIHtcbiAgICAgIHRpdGxlQmFyQ29tcG9uZW50cy5wdXNoKG5ldyBHb0JhY2tCdXR0b24oKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpdGxlQmFyQ29tcG9uZW50cy5wdXNoKG5ldyBRdWFudGVlY0NvbnN1bXB0aW9ucygpKTtcbiAgICB9XG5cbiAgICB0aXRsZUJhckNvbXBvbmVudHMgPSBbXG4gICAgICAuLi50aXRsZUJhckNvbXBvbmVudHMsXG4gICAgICBuZXcgTWV0YWRhdGFMYWJlbCh7IGNvbnRlbnQ6IE1ldGFkYXRhTGFiZWxDb250ZW50LlRpdGxlIH0pLFxuICAgICAgbmV3IENhc3RUb2dnbGVCdXR0b24oKSxcbiAgICAgIG5ldyBWUlRvZ2dsZUJ1dHRvbigpLFxuICAgICAgbmV3IFBpY3R1cmVJblBpY3R1cmVUb2dnbGVCdXR0b24oKSxcbiAgICAgIG5ldyBBaXJQbGF5VG9nZ2xlQnV0dG9uKCksXG4gICAgICBuZXcgU2V0dGluZ3NUb2dnbGVCdXR0b24oeyBzZXR0aW5nc1BhbmVsOiBzZXR0aW5nc1BhbmVsIH0pLFxuICAgIF07XG5cbiAgICBpZiAocmFkaW9Nb2RlQXZhaWxhYmxlKSB7XG4gICAgICB0aXRsZUJhckNvbXBvbmVudHMuc3BsaWNlKFxuICAgICAgICAhaXNCcm93c2VyID8gNSA6IDQsXG4gICAgICAgIDAsXG4gICAgICAgIG5ldyBSYWRpb01vZGVUb2dnbGVCdXR0b24oeyBhY3RpdmU6IGZhbHNlIH0pLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFVJQ29udGFpbmVyKHtcbiAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgc3VidGl0bGVPdmVybGF5LFxuICAgICAgICBuZXcgQnVmZmVyaW5nT3ZlcmxheSgpLFxuICAgICAgICBuZXcgQ2FzdFN0YXR1c092ZXJsYXkoKSxcbiAgICAgICAgbmV3IFBsYXliYWNrVG9nZ2xlT3ZlcmxheSgpLFxuICAgICAgICBuZXcgUGxheWJhY2tKdW1wQ29udHJvbHNPdmVybGF5KCksXG4gICAgICAgIG5ldyBSZWNvbW1lbmRhdGlvbk92ZXJsYXkoKSxcbiAgICAgICAgY29udHJvbEJhcixcbiAgICAgICAgbmV3IFRpdGxlQmFyKHtcbiAgICAgICAgICBjb21wb25lbnRzOiB0aXRsZUJhckNvbXBvbmVudHMsXG4gICAgICAgIH0pLFxuICAgICAgICBzZXR0aW5nc1BhbmVsLFxuICAgICAgICBuZXcgRXJyb3JNZXNzYWdlT3ZlcmxheSgpLFxuICAgICAgXSxcbiAgICAgIGNzc0NsYXNzZXM6IFsndWktc2tpbi1zbWFsbHNjcmVlbiddLFxuICAgICAgaGlkZURlbGF5OiAyMDAwLFxuICAgICAgaGlkZVBsYXllclN0YXRlRXhjZXB0aW9uczogW1xuICAgICAgICBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5QcmVwYXJlZCxcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUGF1c2VkLFxuICAgICAgICBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5GaW5pc2hlZCxcbiAgICAgIF0sXG4gICAgfSk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gbW9kZXJuU21hbGxTY3JlZW5BZHNVSSgpIHtcbiAgICByZXR1cm4gbmV3IFVJQ29udGFpbmVyKHtcbiAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgbmV3IEJ1ZmZlcmluZ092ZXJsYXkoKSxcbiAgICAgICAgbmV3IEFkQ2xpY2tPdmVybGF5KCksXG4gICAgICAgIG5ldyBQbGF5YmFja1RvZ2dsZU92ZXJsYXkoKSxcbiAgICAgICAgbmV3IFRpdGxlQmFyKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAvLyBkdW1teSBsYWJlbCB3aXRoIG5vIGNvbnRlbnQgdG8gbW92ZSBidXR0b25zIHRvIHRoZSByaWdodFxuICAgICAgICAgICAgbmV3IExhYmVsKHsgY3NzQ2xhc3M6ICdsYWJlbC1tZXRhZGF0YS10aXRsZScgfSksXG4gICAgICAgICAgICBuZXcgRnVsbHNjcmVlblRvZ2dsZUJ1dHRvbigpLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbbmV3IEFkTWVzc2FnZUxhYmVsKHsgdGV4dDogJ0FkOiB7cmVtYWluaW5nVGltZX0gc2VjcycgfSksIG5ldyBBZFNraXBCdXR0b24oKV0sXG4gICAgICAgICAgY3NzQ2xhc3M6ICd1aS1hZHMtc3RhdHVzJyxcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgICAgY3NzQ2xhc3NlczogWyd1aS1za2luLWFkcycsICd1aS1za2luLXNtYWxsc2NyZWVuJ10sXG4gICAgICBoaWRlRGVsYXk6IDIwMDAsXG4gICAgICBoaWRlUGxheWVyU3RhdGVFeGNlcHRpb25zOiBbXG4gICAgICAgIFBsYXllclV0aWxzLlBsYXllclN0YXRlLlByZXBhcmVkLFxuICAgICAgICBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5QYXVzZWQsXG4gICAgICAgIFBsYXllclV0aWxzLlBsYXllclN0YXRlLkZpbmlzaGVkLFxuICAgICAgXSxcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBtb2Rlcm5DYXN0UmVjZWl2ZXJVSSgpIHtcbiAgICBsZXQgY29udHJvbEJhciA9IG5ldyBDb250cm9sQmFyKHtcbiAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgbmV3IFBsYXliYWNrVGltZUxhYmVsKHtcbiAgICAgICAgICAgICAgdGltZUxhYmVsTW9kZTogUGxheWJhY2tUaW1lTGFiZWxNb2RlLkN1cnJlbnRUaW1lLFxuICAgICAgICAgICAgICBoaWRlSW5MaXZlUGxheWJhY2s6IHRydWUsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBTZWVrQmFyKHsgc21vb3RoUGxheWJhY2tQb3NpdGlvblVwZGF0ZUludGVydmFsTXM6IC0xIH0pLFxuICAgICAgICAgICAgbmV3IFBsYXliYWNrVGltZUxhYmVsKHtcbiAgICAgICAgICAgICAgdGltZUxhYmVsTW9kZTogUGxheWJhY2tUaW1lTGFiZWxNb2RlLlRvdGFsVGltZSxcbiAgICAgICAgICAgICAgY3NzQ2xhc3NlczogWyd0ZXh0LXJpZ2h0J10sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIGNzc0NsYXNzZXM6IFsnY29udHJvbGJhci10b3AnXSxcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5ldyBDYXN0VUlDb250YWluZXIoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBuZXcgU3VidGl0bGVPdmVybGF5KCksXG4gICAgICAgIG5ldyBCdWZmZXJpbmdPdmVybGF5KCksXG4gICAgICAgIG5ldyBQbGF5YmFja1RvZ2dsZU92ZXJsYXkoKSxcbiAgICAgICAgY29udHJvbEJhcixcbiAgICAgICAgbmV3IFRpdGxlQmFyKHsga2VlcEhpZGRlbldpdGhvdXRNZXRhZGF0YTogdHJ1ZSB9KSxcbiAgICAgICAgbmV3IEVycm9yTWVzc2FnZU92ZXJsYXkoKSxcbiAgICAgIF0sXG4gICAgICBjc3NDbGFzc2VzOiBbJ3VpLXNraW4tY2FzdC1yZWNlaXZlciddLFxuICAgICAgaGlkZURlbGF5OiAyMDAwLFxuICAgICAgaGlkZVBsYXllclN0YXRlRXhjZXB0aW9uczogW1xuICAgICAgICBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5QcmVwYXJlZCxcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUGF1c2VkLFxuICAgICAgICBQbGF5ZXJVdGlscy5QbGF5ZXJTdGF0ZS5GaW5pc2hlZCxcbiAgICAgIF0sXG4gICAgfSk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gYnVpbGRNb2Rlcm5VSShcbiAgICBwbGF5ZXI6IFBsYXllckFQSSxcbiAgICBjb25maWc6IFVJQ29uZmlnID0ge30sXG4gICk6IFVJTWFuYWdlciB7XG4gICAgLy8gc2hvdyBzbWFsbFNjcmVlbiBVSSBvbmx5IG9uIG1vYmlsZS9oYW5kaGVsZCBkZXZpY2VzXG4gICAgbGV0IHNtYWxsU2NyZWVuU3dpdGNoV2lkdGggPSA2MDA7XG5cbiAgICByZXR1cm4gbmV3IFVJTWFuYWdlcihcbiAgICAgIHBsYXllcixcbiAgICAgIFtcbiAgICAgICAge1xuICAgICAgICAgIHVpOiBtb2Rlcm5SYWRpb01vZGVVSSgpLFxuICAgICAgICAgIGNvbmRpdGlvbjogKGNvbnRleHQ6IFVJQ29uZGl0aW9uQ29udGV4dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICFjb250ZXh0LmlzQWQgJiYgIWNvbnRleHQuYWRSZXF1aXJlc1VpICYmIGNvbnRleHQuaXNSYWRpb01vZGVBY3RpdmU7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHVpOiBtb2Rlcm5TbWFsbFNjcmVlbkFkc1VJKCksXG4gICAgICAgICAgY29uZGl0aW9uOiAoY29udGV4dDogVUlDb25kaXRpb25Db250ZXh0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICBjb250ZXh0LmlzTW9iaWxlICYmIGNvbnRleHQuZG9jdW1lbnRXaWR0aCA8IHNtYWxsU2NyZWVuU3dpdGNoV2lkdGggJiYgY29udGV4dC5pc0FkICYmIGNvbnRleHQuYWRSZXF1aXJlc1VpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB1aTogbW9kZXJuQWRzVUkoKSxcbiAgICAgICAgICBjb25kaXRpb246IChjb250ZXh0OiBVSUNvbmRpdGlvbkNvbnRleHQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmlzQWQgJiYgY29udGV4dC5hZFJlcXVpcmVzVWk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHVpOiBtb2Rlcm5TbWFsbFNjcmVlblVJKHsgcmFkaW9Nb2RlQXZhaWxhYmxlOiB0cnVlIH0pLFxuICAgICAgICAgIGNvbmRpdGlvbjogKGNvbnRleHQ6IFVJQ29uZGl0aW9uQ29udGV4dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgIWNvbnRleHQuaXNBZCAmJlxuICAgICAgICAgICAgICAhY29udGV4dC5hZFJlcXVpcmVzVWkgJiZcbiAgICAgICAgICAgICAgY29udGV4dC5pc01vYmlsZSAmJlxuICAgICAgICAgICAgICBjb250ZXh0LmRvY3VtZW50V2lkdGggPCBzbWFsbFNjcmVlblN3aXRjaFdpZHRoICYmXG4gICAgICAgICAgICAgICFjb250ZXh0LmlzUmFkaW9Nb2RlQWN0aXZlICYmXG4gICAgICAgICAgICAgIGNvbnRleHQuaXNSYWRpb01vZGVBdmFpbGFibGVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHVpOiBtb2Rlcm5TbWFsbFNjcmVlblVJKHsgcmFkaW9Nb2RlQXZhaWxhYmxlOiBmYWxzZSB9KSxcbiAgICAgICAgICBjb25kaXRpb246IChjb250ZXh0OiBVSUNvbmRpdGlvbkNvbnRleHQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICFjb250ZXh0LmlzQWQgJiZcbiAgICAgICAgICAgICAgIWNvbnRleHQuYWRSZXF1aXJlc1VpICYmXG4gICAgICAgICAgICAgIGNvbnRleHQuaXNNb2JpbGUgJiZcbiAgICAgICAgICAgICAgY29udGV4dC5kb2N1bWVudFdpZHRoIDwgc21hbGxTY3JlZW5Td2l0Y2hXaWR0aCAmJlxuICAgICAgICAgICAgICAhY29udGV4dC5pc1JhZGlvTW9kZUFjdGl2ZSAmJlxuICAgICAgICAgICAgICAhY29udGV4dC5pc1JhZGlvTW9kZUF2YWlsYWJsZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdWk6IG1vZGVyblVJKHsgLi4uY29uZmlnLCByYWRpb01vZGVBdmFpbGFibGU6IHRydWUgfSksXG4gICAgICAgICAgY29uZGl0aW9uOiAoY29udGV4dDogVUlDb25kaXRpb25Db250ZXh0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gIWNvbnRleHQuaXNBZCAmJiAhY29udGV4dC5hZFJlcXVpcmVzVWkgJiYgIWNvbnRleHQuaXNSYWRpb01vZGVBY3RpdmUgJiYgY29udGV4dC5pc1JhZGlvTW9kZUF2YWlsYWJsZTtcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdWk6IG1vZGVyblVJKHsgLi4uY29uZmlnLCByYWRpb01vZGVBdmFpbGFibGU6IGZhbHNlIH0pLFxuICAgICAgICAgIGNvbmRpdGlvbjogKGNvbnRleHQ6IFVJQ29uZGl0aW9uQ29udGV4dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICFjb250ZXh0LmlzQWQgJiYgIWNvbnRleHQuYWRSZXF1aXJlc1VpICYmICFjb250ZXh0LmlzUmFkaW9Nb2RlQWN0aXZlICYmICFjb250ZXh0LmlzUmFkaW9Nb2RlQXZhaWxhYmxlO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgY29uZmlnLFxuICAgICk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gYnVpbGRNb2Rlcm5TbWFsbFNjcmVlblVJKHBsYXllcjogUGxheWVyQVBJLCBjb25maWc6IFVJQ29uZmlnID0ge30pOiBVSU1hbmFnZXIge1xuICAgIHJldHVybiBuZXcgVUlNYW5hZ2VyKFxuICAgICAgcGxheWVyLFxuICAgICAgW1xuICAgICAgICB7XG4gICAgICAgICAgdWk6IG1vZGVyblJhZGlvTW9kZVVJKCksXG4gICAgICAgICAgY29uZGl0aW9uOiAoY29udGV4dDogVUlDb25kaXRpb25Db250ZXh0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gIWNvbnRleHQuaXNBZCAmJiAhY29udGV4dC5hZFJlcXVpcmVzVWkgJiYgY29udGV4dC5pc1JhZGlvTW9kZUFjdGl2ZTtcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdWk6IG1vZGVyblNtYWxsU2NyZWVuQWRzVUkoKSxcbiAgICAgICAgICBjb25kaXRpb246IChjb250ZXh0OiBVSUNvbmRpdGlvbkNvbnRleHQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmlzQWQgJiYgY29udGV4dC5hZFJlcXVpcmVzVWk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHVpOiBtb2Rlcm5TbWFsbFNjcmVlblVJKHsgcmFkaW9Nb2RlQXZhaWxhYmxlOiB0cnVlIH0pLFxuICAgICAgICAgIGNvbmRpdGlvbjogKGNvbnRleHQ6IFVJQ29uZGl0aW9uQ29udGV4dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICFjb250ZXh0LmlzQWQgJiYgIWNvbnRleHQuYWRSZXF1aXJlc1VpICYmICFjb250ZXh0LmlzUmFkaW9Nb2RlQWN0aXZlICYmIGNvbnRleHQuaXNSYWRpb01vZGVBdmFpbGFibGU7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHVpOiBtb2Rlcm5TbWFsbFNjcmVlblVJKHsgcmFkaW9Nb2RlQXZhaWxhYmxlOiBmYWxzZSB9KSxcbiAgICAgICAgICBjb25kaXRpb246IChjb250ZXh0OiBVSUNvbmRpdGlvbkNvbnRleHQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAhY29udGV4dC5pc0FkICYmICFjb250ZXh0LmFkUmVxdWlyZXNVaSAmJiAhY29udGV4dC5pc1JhZGlvTW9kZUFjdGl2ZSAmJiAhY29udGV4dC5pc1JhZGlvTW9kZUF2YWlsYWJsZTtcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIGNvbmZpZyxcbiAgICApO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTW9kZXJuQ2FzdFJlY2VpdmVyVUkoXG4gICAgcGxheWVyOiBQbGF5ZXJBUEksXG4gICAgY29uZmlnOiBVSUNvbmZpZyA9IHt9LFxuICApOiBVSU1hbmFnZXIge1xuICAgIHJldHVybiBuZXcgVUlNYW5hZ2VyKHBsYXllciwgbW9kZXJuQ2FzdFJlY2VpdmVyVUkoKSwgY29uZmlnKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBidWlsZE1vZGVyblR2VUkocGxheWVyOiBQbGF5ZXJBUEksIGNvbmZpZzogVUlDb25maWcgPSB7fSk6IFVJTWFuYWdlciB7XG4gICAgcmV0dXJuIG5ldyBVSU1hbmFnZXIoXG4gICAgICBwbGF5ZXIsXG4gICAgICBbXG4gICAgICAgIHtcbiAgICAgICAgICAuLi5tb2Rlcm5UdlVJKCksXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgY29uZmlnLFxuICAgICk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gbW9kZXJuVHZVSSgpIHtcbiAgICBjb25zdCBzdWJ0aXRsZUxpc3RCb3ggPSBuZXcgU3VidGl0bGVMaXN0Qm94KCk7XG4gICAgY29uc3Qgc3VidGl0bGVMaXN0UGFuZWwgPSBuZXcgU2V0dGluZ3NQYW5lbCh7XG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIG5ldyBTZXR0aW5nc1BhbmVsUGFnZSh7XG4gICAgICAgICAgY29tcG9uZW50czogW25ldyBTZXR0aW5nc1BhbmVsSXRlbShudWxsLCBzdWJ0aXRsZUxpc3RCb3gpXSxcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgICAgaGlkZGVuOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgY29uc3QgYXVkaW9UcmFja0xpc3RCb3ggPSBuZXcgQXVkaW9UcmFja0xpc3RCb3goKTtcbiAgICBjb25zdCBhdWRpb1RyYWNrTGlzdFBhbmVsID0gbmV3IFNldHRpbmdzUGFuZWwoe1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICBuZXcgU2V0dGluZ3NQYW5lbFBhZ2Uoe1xuICAgICAgICAgIGNvbXBvbmVudHM6IFtuZXcgU2V0dGluZ3NQYW5lbEl0ZW0obnVsbCwgYXVkaW9UcmFja0xpc3RCb3gpXSxcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgICAgaGlkZGVuOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgY29uc3Qgc2Vla0JhciA9IG5ldyBTZWVrQmFyKHsgbGFiZWw6IG5ldyBTZWVrQmFyTGFiZWwoKSB9KTtcbiAgICBjb25zdCBwbGF5YmFja1RvZ2dsZU92ZXJsYXkgPSBuZXcgUGxheWJhY2tUb2dnbGVPdmVybGF5KCk7XG4gICAgY29uc3Qgc3VidGl0bGVUb2dnbGVCdXR0b24gPSBuZXcgU2V0dGluZ3NUb2dnbGVCdXR0b24oe1xuICAgICAgc2V0dGluZ3NQYW5lbDogc3VidGl0bGVMaXN0UGFuZWwsXG4gICAgICBhdXRvSGlkZVdoZW5Ob0FjdGl2ZVNldHRpbmdzOiB0cnVlLFxuICAgICAgY3NzQ2xhc3M6ICd1aS1zdWJ0aXRsZXNldHRpbmdzdG9nZ2xlYnV0dG9uJyxcbiAgICAgIHRleHQ6IGkxOG4uZ2V0TG9jYWxpemVyKCdzZXR0aW5ncy5zdWJ0aXRsZXMnKSxcbiAgICB9KTtcbiAgICBjb25zdCBhdWRpb1RvZ2dsZUJ1dHRvbiA9IG5ldyBTZXR0aW5nc1RvZ2dsZUJ1dHRvbih7XG4gICAgICBzZXR0aW5nc1BhbmVsOiBhdWRpb1RyYWNrTGlzdFBhbmVsLFxuICAgICAgYXV0b0hpZGVXaGVuTm9BY3RpdmVTZXR0aW5nczogdHJ1ZSxcbiAgICAgIGNzc0NsYXNzOiAndWktYXVkaW90cmFja3NldHRpbmdzdG9nZ2xlYnV0dG9uJyxcbiAgICAgIGFyaWFMYWJlbDogaTE4bi5nZXRMb2NhbGl6ZXIoJ3NldHRpbmdzLmF1ZGlvLnRyYWNrJyksXG4gICAgICB0ZXh0OiBpMThuLmdldExvY2FsaXplcignc2V0dGluZ3MuYXVkaW8udHJhY2snKSxcbiAgICB9KTtcbiAgICBjb25zdCB1aUNvbnRhaW5lciA9IG5ldyBVSUNvbnRhaW5lcih7XG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIG5ldyBTdWJ0aXRsZU92ZXJsYXkoKSxcbiAgICAgICAgbmV3IEJ1ZmZlcmluZ092ZXJsYXkoKSxcbiAgICAgICAgcGxheWJhY2tUb2dnbGVPdmVybGF5LFxuICAgICAgICBuZXcgQ29udHJvbEJhcih7XG4gICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAgICBuZXcgUGxheWJhY2tUaW1lTGFiZWwoe1xuICAgICAgICAgICAgICAgICAgdGltZUxhYmVsTW9kZTogUGxheWJhY2tUaW1lTGFiZWxNb2RlLkN1cnJlbnRUaW1lLFxuICAgICAgICAgICAgICAgICAgaGlkZUluTGl2ZVBsYXliYWNrOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHNlZWtCYXIsXG4gICAgICAgICAgICAgICAgbmV3IFBsYXliYWNrVGltZUxhYmVsKHtcbiAgICAgICAgICAgICAgICAgIHRpbWVMYWJlbE1vZGU6IFBsYXliYWNrVGltZUxhYmVsTW9kZS5SZW1haW5pbmdUaW1lLFxuICAgICAgICAgICAgICAgICAgY3NzQ2xhc3NlczogWyd0ZXh0LXJpZ2h0J10sXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIGNzc0NsYXNzZXM6IFsnY29udHJvbGJhci10b3AnXSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgVGl0bGVCYXIoe1xuICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgICAgbmV3IE1ldGFkYXRhTGFiZWwoeyBjb250ZW50OiBNZXRhZGF0YUxhYmVsQ29udGVudC5UaXRsZSB9KSxcbiAgICAgICAgICAgICAgICBzdWJ0aXRsZVRvZ2dsZUJ1dHRvbixcbiAgICAgICAgICAgICAgICBhdWRpb1RvZ2dsZUJ1dHRvbixcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgY3NzQ2xhc3NlczogWyd1aS10aXRsZWJhci10b3AnXSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAgICBuZXcgTWV0YWRhdGFMYWJlbCh7XG4gICAgICAgICAgICAgICAgICBjb250ZW50OiBNZXRhZGF0YUxhYmVsQ29udGVudC5EZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBzdWJ0aXRsZUxpc3RQYW5lbCxcbiAgICAgICAgICAgICAgICBhdWRpb1RyYWNrTGlzdFBhbmVsLFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBjc3NDbGFzc2VzOiBbJ3VpLXRpdGxlYmFyLWJvdHRvbSddLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgXSxcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBSZWNvbW1lbmRhdGlvbk92ZXJsYXkoKSxcbiAgICAgICAgbmV3IEVycm9yTWVzc2FnZU92ZXJsYXkoKSxcbiAgICAgIF0sXG4gICAgICBjc3NDbGFzc2VzOiBbJ3VpLXNraW4tdHYnXSxcbiAgICAgIGhpZGVEZWxheTogMjAwMCxcbiAgICAgIGhpZGVQbGF5ZXJTdGF0ZUV4Y2VwdGlvbnM6IFtcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuUHJlcGFyZWQsXG4gICAgICAgIFBsYXllclV0aWxzLlBsYXllclN0YXRlLlBhdXNlZCxcbiAgICAgICAgUGxheWVyVXRpbHMuUGxheWVyU3RhdGUuRmluaXNoZWQsXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgY29uc3Qgc3BhdGlhbE5hdmlnYXRpb24gPSBuZXcgU3BhdGlhbE5hdmlnYXRpb24oXG4gICAgICBuZXcgUm9vdE5hdmlnYXRpb25Hcm91cChcbiAgICAgICAgdWlDb250YWluZXIsXG4gICAgICAgIHBsYXliYWNrVG9nZ2xlT3ZlcmxheSxcbiAgICAgICAgc2Vla0JhcixcbiAgICAgICAgYXVkaW9Ub2dnbGVCdXR0b24sXG4gICAgICAgIHN1YnRpdGxlVG9nZ2xlQnV0dG9uLFxuICAgICAgKSxcbiAgICAgIG5ldyBMaXN0TmF2aWdhdGlvbkdyb3VwKFxuICAgICAgICBMaXN0T3JpZW50YXRpb24uVmVydGljYWwsXG4gICAgICAgIHN1YnRpdGxlTGlzdFBhbmVsLFxuICAgICAgICBzdWJ0aXRsZUxpc3RCb3gsXG4gICAgICApLFxuICAgICAgbmV3IExpc3ROYXZpZ2F0aW9uR3JvdXAoXG4gICAgICAgIExpc3RPcmllbnRhdGlvbi5WZXJ0aWNhbCxcbiAgICAgICAgYXVkaW9UcmFja0xpc3RQYW5lbCxcbiAgICAgICAgYXVkaW9UcmFja0xpc3RCb3gsXG4gICAgICApLFxuICAgICk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdWk6IHVpQ29udGFpbmVyLFxuICAgICAgc3BhdGlhbE5hdmlnYXRpb246IHNwYXRpYWxOYXZpZ2F0aW9uLFxuICAgIH07XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gbW9kZXJuUmFkaW9Nb2RlVUkoKSB7XG4gICAgcmV0dXJuIG5ldyBVSUNvbnRhaW5lcih7XG4gICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgIG5ldyBDb250cm9sQmFyKHtcbiAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICAgIG5ldyBQbGF5YmFja1RvZ2dsZUJ1dHRvbigpLFxuICAgICAgICAgICAgICAgIG5ldyBTZWVrQmFyKHsgbGFiZWw6IG5ldyBTZWVrQmFyTGFiZWwoKSB9KSxcbiAgICAgICAgICAgICAgICBuZXcgUmFkaW9Nb2RlVG9nZ2xlQnV0dG9uKHsgYWN0aXZlOiB0cnVlIH0pLFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBjc3NDbGFzc2VzOiBbJ2NvbnRyb2xiYXItdG9wJ10sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICBdLFxuICAgICAgICB9KSxcbiAgICAgIF0sXG4gICAgICBjc3NDbGFzc2VzOiBbJ3VpLXNraW4tcmFkaW8nXSxcbiAgICAgIGhpZGVEZWxheTogLTEsXG4gICAgfSk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gYnVpbGRNb2Rlcm5SYWRpb01vZGVVSShcbiAgICBwbGF5ZXI6IFBsYXllckFQSSxcbiAgICBjb25maWc6IFVJQ29uZmlnID0ge30sXG4gICk6IFVJTWFuYWdlciB7XG4gICAgcmV0dXJuIG5ldyBVSU1hbmFnZXIoXG4gICAgICBwbGF5ZXIsXG4gICAgICBbXG4gICAgICAgIHtcbiAgICAgICAgICB1aTogbW9kZXJuUmFkaW9Nb2RlVUkoKSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBjb25maWcsXG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtVSUNvbnRhaW5lcn0gZnJvbSAnLi9jb21wb25lbnRzL3VpY29udGFpbmVyJztcbmltcG9ydCB7RE9NfSBmcm9tICcuL2RvbSc7XG5pbXBvcnQgeyBDb21wb25lbnQsIENvbXBvbmVudENvbmZpZywgVmlld01vZGVDaGFuZ2VkRXZlbnRBcmdzIH0gZnJvbSAnLi9jb21wb25lbnRzL2NvbXBvbmVudCc7XG5pbXBvcnQge0NvbnRhaW5lcn0gZnJvbSAnLi9jb21wb25lbnRzL2NvbnRhaW5lcic7XG5pbXBvcnQgeyBTZWVrQmFyLCBTZWVrQmFyTWFya2VyIH0gZnJvbSAnLi9jb21wb25lbnRzL3NlZWtiYXInO1xuaW1wb3J0IHtOb0FyZ3MsIEV2ZW50RGlzcGF0Y2hlciwgQ2FuY2VsRXZlbnRBcmdzfSBmcm9tICcuL2V2ZW50ZGlzcGF0Y2hlcic7XG5pbXBvcnQge1VJVXRpbHN9IGZyb20gJy4vdWl1dGlscyc7XG5pbXBvcnQge0FycmF5VXRpbHN9IGZyb20gJy4vYXJyYXl1dGlscyc7XG5pbXBvcnQge0Jyb3dzZXJVdGlsc30gZnJvbSAnLi9icm93c2VydXRpbHMnO1xuaW1wb3J0IHsgVGltZWxpbmVNYXJrZXIsIFVJQ29uZmlnIH0gZnJvbSAnLi91aWNvbmZpZyc7XG5pbXBvcnQgeyBQbGF5ZXJBUEksIFBsYXllckV2ZW50Q2FsbGJhY2ssIFBsYXllckV2ZW50QmFzZSwgUGxheWVyRXZlbnQsIEFkRXZlbnQsIExpbmVhckFkIH0gZnJvbSAnYml0bW92aW4tcGxheWVyJztcbmltcG9ydCB7IFZvbHVtZUNvbnRyb2xsZXIgfSBmcm9tICcuL3ZvbHVtZWNvbnRyb2xsZXInO1xuaW1wb3J0IHsgaTE4biwgQ3VzdG9tVm9jYWJ1bGFyeSwgVm9jYWJ1bGFyaWVzIH0gZnJvbSAnLi9sb2NhbGl6YXRpb24vaTE4bic7XG5pbXBvcnQgeyBGb2N1c1Zpc2liaWxpdHlUcmFja2VyIH0gZnJvbSAnLi9mb2N1c3Zpc2liaWxpdHl0cmFja2VyJztcbmltcG9ydCB7IGlzTW9iaWxlVjNQbGF5ZXJBUEksIE1vYmlsZVYzUGxheWVyQVBJLCBNb2JpbGVWM1BsYXllckV2ZW50IH0gZnJvbSAnLi9tb2JpbGV2M3BsYXllcmFwaSc7XG5pbXBvcnQgeyBTcGF0aWFsTmF2aWdhdGlvbiB9IGZyb20gJy4vc3BhdGlhbG5hdmlnYXRpb24vc3BhdGlhbG5hdmlnYXRpb24nO1xuaW1wb3J0IHsgU3VidGl0bGVTZXR0aW5nc01hbmFnZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvc3VidGl0bGVzZXR0aW5ncy9zdWJ0aXRsZXNldHRpbmdzbWFuYWdlcic7XG5pbXBvcnQgeyBTdG9yYWdlVXRpbHMgfSBmcm9tICcuL3N0b3JhZ2V1dGlscyc7XG5cbi8qKlxuICogQGNhdGVnb3J5IENvbmZpZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMb2NhbGl6YXRpb25Db25maWcge1xuICAvKipcbiAgICogU2V0cyB0aGUgZGVzaXJlZCBsYW5ndWFnZSwgYW5kIGZhbGxzIGJhY2sgdG8gJ2VuJyBpZiB0aGVyZSBpcyBubyB2b2NhYnVsYXJ5IGZvciB0aGUgZGVzaXJlZCBsYW5ndWFnZS4gU2V0dGluZyBpdFxuICAgKiB0byBcImF1dG9cIiB3aWxsIGVuYWJsZSBsYW5ndWFnZSBkZXRlY3Rpb24gZnJvbSB0aGUgYnJvd3NlcidzIGxvY2FsZS5cbiAgICovXG4gIGxhbmd1YWdlPzogJ2F1dG8nIHwgJ2VuJyB8ICdkZScgfCBzdHJpbmc7XG4gIC8qKlxuICAgKiBBIG1hcCBvZiBgbGFuZ3VhZ2VgIHRvIHtAbGluayBDdXN0b21Wb2NhYnVsYXJ5fSBkZWZpbml0aW9ucy4gQ2FuIGJlIHVzZWQgdG8gb3ZlcndyaXRlIGRlZmF1bHQgdHJhbnNsYXRpb25zIGFuZCBhZGRcbiAgICogY3VzdG9tIHN0cmluZ3Mgb3IgYWRkaXRpb25hbCBsYW5ndWFnZXMuXG4gICAqL1xuICB2b2NhYnVsYXJpZXM/OiBWb2NhYnVsYXJpZXM7XG59XG5cbi8qKlxuICogQGNhdGVnb3J5IENvbmZpZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbnRlcm5hbFVJQ29uZmlnIGV4dGVuZHMgVUlDb25maWcge1xuICBldmVudHM6IHtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBjb25maWd1cmF0aW9uIGhhcyBiZWVuIHVwZGF0ZWQvY2hhbmdlZC5cbiAgICAgKi9cbiAgICBvblVwZGF0ZWQ6IEV2ZW50RGlzcGF0Y2hlcjxVSU1hbmFnZXIsIHZvaWQ+O1xuICB9O1xuICB2b2x1bWVDb250cm9sbGVyOiBWb2x1bWVDb250cm9sbGVyO1xufVxuXG4vKipcbiAqIFRoZSBjb250ZXh0IHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gYSB7QGxpbmsgVUlDb25kaXRpb25SZXNvbHZlcn0gdG8gZGV0ZXJtaW5lIGlmIGl0J3MgY29uZGl0aW9ucyBmdWxmaWwgdGhlIGNvbnRleHQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVUlDb25kaXRpb25Db250ZXh0IHtcbiAgLyoqXG4gICAqIFRlbGxzIGlmIHRoZSBwbGF5ZXIgaXMgbG9hZGluZyBvciBwbGF5aW5nIGFuIGFkLlxuICAgKi9cbiAgaXNBZDogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFRlbGxzIGlmIHRoZSBjdXJyZW50IGFkIHJlcXVpcmVzIGFuIGV4dGVybmFsIFVJLCBpZiB7QGxpbmsgI2lzQWR9IGlzIHRydWUuXG4gICAqL1xuICBhZFJlcXVpcmVzVWk6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBUZWxscyBpZiB0aGUgcGxheWVyIGlzIGN1cnJlbnRseSBpbiBmdWxsc2NyZWVuIG1vZGUuXG4gICAqL1xuICBpc0Z1bGxzY3JlZW46IGJvb2xlYW47XG4gIC8qKlxuICAgKiBUZWxscyBpZiB0aGUgVUkgaXMgcnVubmluZyBpbiBhIG1vYmlsZSBicm93c2VyLlxuICAgKi9cbiAgaXNNb2JpbGU6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBUZWxscyBpZiB0aGUgcGxheWVyIGlzIGluIHBsYXlpbmcgb3IgcGF1c2VkIHN0YXRlLlxuICAgKi9cbiAgaXNQbGF5aW5nOiBib29sZWFuO1xuICAvKipcbiAgICogVGhlIHdpZHRoIG9mIHRoZSBwbGF5ZXIvVUkgZWxlbWVudC5cbiAgICovXG4gIHdpZHRoOiBudW1iZXI7XG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIGRvY3VtZW50IHdoZXJlIHRoZSBwbGF5ZXIvVUkgaXMgZW1iZWRkZWQgaW4uXG4gICAqL1xuICBkb2N1bWVudFdpZHRoOiBudW1iZXI7XG4gIC8qKlxuICAgKiBUZWxscyBpZiB0aGUgcmFkaW8gbW9kZSBpcyBhY3RpdmF0ZWQgb3Igbm90XG4gICAqL1xuICBpc1JhZGlvTW9kZUFjdGl2ZTogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFRlbGxzIGlmIHRoZSByYWRpbyBtb2RlIGlzIGF2YWlsYWJsZSBvciBub3RcbiAgICovXG4gIGlzUmFkaW9Nb2RlQXZhaWxhYmxlOiBib29sZWFuO1xufVxuXG4vKipcbiAqIFJlc29sdmVzIHRoZSBjb25kaXRpb25zIG9mIGl0cyBhc3NvY2lhdGVkIFVJIGluIGEge0BsaW5rIFVJVmFyaWFudH0gdXBvbiBhIHtAbGluayBVSUNvbmRpdGlvbkNvbnRleHR9IGFuZCBkZWNpZGVzXG4gKiBpZiB0aGUgVUkgc2hvdWxkIGJlIGRpc3BsYXllZC4gSWYgaXQgcmV0dXJucyB0cnVlLCB0aGUgVUkgaXMgYSBjYW5kaWRhdGUgZm9yIGRpc3BsYXk7IGlmIGl0IHJldHVybnMgZmFsc2UsIGl0IHdpbGxcbiAqIG5vdCBiZSBkaXNwbGF5ZWQgaW4gdGhlIGdpdmVuIGNvbnRleHQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVUlDb25kaXRpb25SZXNvbHZlciB7XG4gIChjb250ZXh0OiBVSUNvbmRpdGlvbkNvbnRleHQpOiBib29sZWFuO1xufVxuXG4vKipcbiAqIEFzc29jaWF0ZXMgYSBVSSBpbnN0YW5jZSB3aXRoIGFuIG9wdGlvbmFsIHtAbGluayBVSUNvbmRpdGlvblJlc29sdmVyfSB0aGF0IGRldGVybWluZXMgaWYgdGhlIFVJIHNob3VsZCBiZSBkaXNwbGF5ZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVUlWYXJpYW50IHtcbiAgdWk6IFVJQ29udGFpbmVyO1xuICBjb25kaXRpb24/OiBVSUNvbmRpdGlvblJlc29sdmVyO1xuICBzcGF0aWFsTmF2aWdhdGlvbj86IFNwYXRpYWxOYXZpZ2F0aW9uO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjdGl2ZVVpQ2hhbmdlZEFyZ3MgZXh0ZW5kcyBOb0FyZ3Mge1xuICAvKipcbiAgICogVGhlIHByZXZpb3VzbHkgYWN0aXZlIHtAbGluayBVSUluc3RhbmNlTWFuYWdlcn0gcHJpb3IgdG8gdGhlIHtAbGluayBVSU1hbmFnZXJ9IHN3aXRjaGluZyB0byBhIGRpZmZlcmVudCBVSSB2YXJpYW50LlxuICAgKi9cbiAgcHJldmlvdXNVaTogVUlJbnN0YW5jZU1hbmFnZXI7XG4gIC8qKlxuICAgKiBUaGUgY3VycmVudGx5IGFjdGl2ZSB7QGxpbmsgVUlJbnN0YW5jZU1hbmFnZXJ9LlxuICAgKi9cbiAgY3VycmVudFVpOiBVSUluc3RhbmNlTWFuYWdlcjtcbn1cblxuZXhwb3J0IGNsYXNzIFVJTWFuYWdlciB7XG5cbiAgcHJpdmF0ZSBwbGF5ZXI6IFBsYXllckFQSTtcbiAgcHJpdmF0ZSB1aUNvbnRhaW5lckVsZW1lbnQ6IERPTTtcbiAgcHJpdmF0ZSB1aVZhcmlhbnRzOiBVSVZhcmlhbnRbXTtcbiAgcHJpdmF0ZSB1aUluc3RhbmNlTWFuYWdlcnM6IEludGVybmFsVUlJbnN0YW5jZU1hbmFnZXJbXTtcbiAgcHJpdmF0ZSBjdXJyZW50VWk6IEludGVybmFsVUlJbnN0YW5jZU1hbmFnZXI7XG4gIHByaXZhdGUgY29uZmlnOiBJbnRlcm5hbFVJQ29uZmlnOyAvLyBDb25qdW5jdGlvbiBvZiBwcm92aWRlZCB1aUNvbmZpZyBhbmQgc291cmNlQ29uZmlnIGZyb20gdGhlIHBsYXllclxuICBwcml2YXRlIG1hbmFnZXJQbGF5ZXJXcmFwcGVyOiBQbGF5ZXJXcmFwcGVyO1xuICBwcml2YXRlIGZvY3VzVmlzaWJpbGl0eVRyYWNrZXI6IEZvY3VzVmlzaWJpbGl0eVRyYWNrZXI7XG4gIHByaXZhdGUgaXNSYWRpb01vZGVBY3RpdmU6IGJvb2xlYW47XG4gIHByaXZhdGUgaXNSYWRpb01vZGVBdmFpbGFibGU6IGJvb2xlYW47XG4gIHByaXZhdGUgc3VidGl0bGVTZXR0aW5nc01hbmFnZXI6IFN1YnRpdGxlU2V0dGluZ3NNYW5hZ2VyO1xuXG4gIHByaXZhdGUgZXZlbnRzID0ge1xuICAgIG9uVWlWYXJpYW50UmVzb2x2ZTogbmV3IEV2ZW50RGlzcGF0Y2hlcjxVSU1hbmFnZXIsIFVJQ29uZGl0aW9uQ29udGV4dD4oKSxcbiAgICBvbkFjdGl2ZVVpQ2hhbmdlZDogbmV3IEV2ZW50RGlzcGF0Y2hlcjxVSU1hbmFnZXIsIEFjdGl2ZVVpQ2hhbmdlZEFyZ3M+KCksXG4gIH07XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBVSSBtYW5hZ2VyIHdpdGggYSBzaW5nbGUgVUkgdmFyaWFudCB0aGF0IHdpbGwgYmUgcGVybWFuZW50bHkgc2hvd24uXG4gICAqIEBwYXJhbSBwbGF5ZXIgdGhlIGFzc29jaWF0ZWQgcGxheWVyIG9mIHRoaXMgVUlcbiAgICogQHBhcmFtIHVpIHRoZSBVSSB0byBhZGQgdG8gdGhlIHBsYXllclxuICAgKiBAcGFyYW0gdWljb25maWcgb3B0aW9uYWwgVUkgY29uZmlndXJhdGlvblxuICAgKi9cbiAgY29uc3RydWN0b3IocGxheWVyOiBQbGF5ZXJBUEksIHVpOiBVSUNvbnRhaW5lciwgdWljb25maWc/OiBVSUNvbmZpZyk7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgVUkgbWFuYWdlciB3aXRoIGEgbGlzdCBvZiBVSSB2YXJpYW50cyB0aGF0IHdpbGwgYmUgZHluYW1pY2FsbHkgc2VsZWN0ZWQgYW5kIHN3aXRjaGVkIGFjY29yZGluZyB0b1xuICAgKiB0aGUgY29udGV4dCBvZiB0aGUgVUkuXG4gICAqXG4gICAqIEV2ZXJ5IHRpbWUgdGhlIFVJIGNvbnRleHQgY2hhbmdlcywgdGhlIGNvbmRpdGlvbnMgb2YgdGhlIFVJIHZhcmlhbnRzIHdpbGwgYmUgc2VxdWVudGlhbGx5IHJlc29sdmVkIGFuZCB0aGUgZmlyc3RcbiAgICogVUksIHdob3NlIGNvbmRpdGlvbiBldmFsdWF0ZXMgdG8gdHJ1ZSwgd2lsbCBiZSBzZWxlY3RlZCBhbmQgZGlzcGxheWVkLiBUaGUgbGFzdCB2YXJpYW50IGluIHRoZSBsaXN0IG1pZ2h0IG9taXQgdGhlXG4gICAqIGNvbmRpdGlvbiByZXNvbHZlciBhbmQgd2lsbCBiZSBzZWxlY3RlZCBhcyBkZWZhdWx0L2ZhbGxiYWNrIFVJIHdoZW4gYWxsIG90aGVyIGNvbmRpdGlvbnMgZmFpbC4gSWYgdGhlcmUgaXMgbm9cbiAgICogZmFsbGJhY2sgVUkgYW5kIGFsbCBjb25kaXRpb25zIGZhaWwsIG5vIFVJIHdpbGwgYmUgZGlzcGxheWVkLlxuICAgKlxuICAgKiBAcGFyYW0gcGxheWVyIHRoZSBhc3NvY2lhdGVkIHBsYXllciBvZiB0aGlzIFVJXG4gICAqIEBwYXJhbSB1aVZhcmlhbnRzIGEgbGlzdCBvZiBVSSB2YXJpYW50cyB0aGF0IHdpbGwgYmUgZHluYW1pY2FsbHkgc3dpdGNoZWRcbiAgICogQHBhcmFtIHVpY29uZmlnIG9wdGlvbmFsIFVJIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIGNvbnN0cnVjdG9yKHBsYXllcjogUGxheWVyQVBJLCB1aVZhcmlhbnRzOiBVSVZhcmlhbnRbXSwgdWljb25maWc/OiBVSUNvbmZpZyk7XG4gIGNvbnN0cnVjdG9yKHBsYXllcjogUGxheWVyQVBJLCBwbGF5ZXJVaU9yVWlWYXJpYW50czogVUlDb250YWluZXIgfCBVSVZhcmlhbnRbXSwgdWljb25maWc6IFVJQ29uZmlnID0ge30pIHtcbiAgICB0aGlzLmlzUmFkaW9Nb2RlQWN0aXZlID0gd2luZG93LmlzUmFkaW9Nb2RlQWN0aXZlO1xuICAgIHRoaXMuaXNSYWRpb01vZGVBdmFpbGFibGUgPSB3aW5kb3cuaXNSYWRpb01vZGVBdmFpbGFibGU7XG5cbiAgICBpZiAocGxheWVyVWlPclVpVmFyaWFudHMgaW5zdGFuY2VvZiBVSUNvbnRhaW5lcikge1xuICAgICAgLy8gU2luZ2xlLVVJIGNvbnN0cnVjdG9yIGhhcyBiZWVuIGNhbGxlZCwgdHJhbnNmb3JtIGFyZ3VtZW50cyB0byBVSVZhcmlhbnRbXSBzaWduYXR1cmVcbiAgICAgIGxldCBwbGF5ZXJVaSA9IDxVSUNvbnRhaW5lcj5wbGF5ZXJVaU9yVWlWYXJpYW50cztcbiAgICAgIGxldCB1aVZhcmlhbnRzID0gW107XG5cbiAgICAgIC8vIEFkZCB0aGUgZGVmYXVsdCBwbGF5ZXIgVUlcbiAgICAgIHVpVmFyaWFudHMucHVzaCh7IHVpOiBwbGF5ZXJVaSB9KTtcblxuICAgICAgdGhpcy51aVZhcmlhbnRzID0gdWlWYXJpYW50cztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRGVmYXVsdCBjb25zdHJ1Y3RvciAoVUlWYXJpYW50W10pIGhhcyBiZWVuIGNhbGxlZFxuICAgICAgdGhpcy51aVZhcmlhbnRzID0gPFVJVmFyaWFudFtdPnBsYXllclVpT3JVaVZhcmlhbnRzO1xuICAgIH1cblxuICAgIHRoaXMuc3VidGl0bGVTZXR0aW5nc01hbmFnZXIgPSBuZXcgU3VidGl0bGVTZXR0aW5nc01hbmFnZXIoKTtcbiAgICB0aGlzLnBsYXllciA9IHBsYXllcjtcbiAgICB0aGlzLm1hbmFnZXJQbGF5ZXJXcmFwcGVyID0gbmV3IFBsYXllcldyYXBwZXIocGxheWVyKTtcblxuICAgIC8vIGVuc3VyZSB0aGF0IGF0IGxlYXN0IHRoZSBtZXRhZGF0YSBvYmplY3QgZG9lcyBleGlzdCBpbiB0aGUgdWljb25maWdcbiAgICB1aWNvbmZpZy5tZXRhZGF0YSA9IHVpY29uZmlnLm1ldGFkYXRhID8gdWljb25maWcubWV0YWRhdGEgOiB7fTtcblxuICAgIHRoaXMuY29uZmlnID0ge1xuICAgICAgcGxheWJhY2tTcGVlZFNlbGVjdGlvbkVuYWJsZWQ6IHRydWUsIC8vIFN3aXRjaCBvbiBzcGVlZCBzZWxlY3RvciBieSBkZWZhdWx0XG4gICAgICBhdXRvVWlWYXJpYW50UmVzb2x2ZTogdHJ1ZSwgLy8gU3dpdGNoIG9uIGF1dG8gVUkgcmVzb2x2aW5nIGJ5IGRlZmF1bHRcbiAgICAgIGRpc2FibGVBdXRvSGlkZVdoZW5Ib3ZlcmVkOiBmYWxzZSwgLy8gRGlzYWJsZSBhdXRvIGhpZGUgd2hlbiBVSSBpcyBob3ZlcmVkXG4gICAgICBlbmFibGVTZWVrUHJldmlldzogdHJ1ZSxcbiAgICAgIC4uLnVpY29uZmlnLFxuICAgICAgZXZlbnRzOiB7XG4gICAgICAgIG9uVXBkYXRlZDogbmV3IEV2ZW50RGlzcGF0Y2hlcjxVSU1hbmFnZXIsIHZvaWQ+KCksXG4gICAgICB9LFxuICAgICAgdm9sdW1lQ29udHJvbGxlcjogbmV3IFZvbHVtZUNvbnRyb2xsZXIoXG4gICAgICAgIHRoaXMubWFuYWdlclBsYXllcldyYXBwZXIuZ2V0UGxheWVyKCksXG4gICAgICApLFxuICAgIH07XG4gICAgdHJ5IHtcbiAgICAgIC8vIE1vYmlsZVxuICAgICAgaWYgKHdpbmRvdy5iaXRtb3Zpbi5jdXN0b21NZXNzYWdlSGFuZGxlcikge1xuICAgICAgICB3aW5kb3cuYml0bW92aW4uY3VzdG9tTWVzc2FnZUhhbmRsZXIub24oXG4gICAgICAgICAgJ2dsb2JhbFJhZGlvTW9kZUNoYW5nZWQnLFxuICAgICAgICAgIChkYXRhOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgYWN0aXZhdGVkLCBhdmFpbGFibGUgfSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICAgICAgICB0aGlzLmlzUmFkaW9Nb2RlQWN0aXZlID0gYWN0aXZhdGVkO1xuICAgICAgICAgICAgdGhpcy5pc1JhZGlvTW9kZUF2YWlsYWJsZSA9IGF2YWlsYWJsZTtcblxuICAgICAgICAgICAgdGhpcy5yZXNvbHZlVWlWYXJpYW50KHtcbiAgICAgICAgICAgICAgaXNSYWRpb01vZGVBY3RpdmU6IGFjdGl2YXRlZCxcbiAgICAgICAgICAgICAgaXNSYWRpb01vZGVBdmFpbGFibGU6IGF2YWlsYWJsZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICAvLyBXZWJcblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2lzUmFkaW9Nb2RlQWN0aXZlQ2hhbmdlJywgdGhpcy5oYW5kbGVJc1JhZGlvTW9kZUFjdGl2ZUNoYW5nZSk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaXNSYWRpb01vZGVBdmFpbGFibGVDaGFuZ2UnLCB0aGlzLmhhbmRsZUlzUmFkaW9Nb2RlQXZhaWxhYmxlQ2hhbmdlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge31cblxuICAgIC8qKlxuICAgICAqIEdhdGhlcnMgY29uZmlndXJhdGlvbiBkYXRhIGZyb20gdGhlIFVJIGNvbmZpZyBhbmQgcGxheWVyIHNvdXJjZSBjb25maWcgYW5kIGNyZWF0ZXMgYSBtZXJnZWQgVUkgY29uZmlnXG4gICAgICogdGhhdCBpcyB1c2VkIHRocm91Z2hvdXQgdGhlIFVJIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZUNvbmZpZyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHBsYXllclNvdXJjZUNvbmZpZyA9IHBsYXllci5nZXRTb3VyY2UoKSB8fCB7fTtcbiAgICAgIHRoaXMuY29uZmlnLm1ldGFkYXRhID0gSlNPTi5wYXJzZShcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkodWljb25maWcubWV0YWRhdGEgfHwge30pLFxuICAgICAgKTtcblxuICAgICAgLy8gRXh0cmFjdCB0aGUgVUktcmVsYXRlZCBjb25maWcgcHJvcGVydGllcyBmcm9tIHRoZSBzb3VyY2UgY29uZmlnXG4gICAgICBjb25zdCBwbGF5ZXJTb3VyY2VVaUNvbmZpZzogVUlDb25maWcgPSB7XG4gICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgLy8gVE9ETyBtb3ZlIG1ldGFkYXRhIGludG8gc291cmNlLm1ldGFkYXRhIG5hbWVzcGFjZSBpbiBwbGF5ZXIgdjhcbiAgICAgICAgICB0aXRsZTogcGxheWVyU291cmNlQ29uZmlnLnRpdGxlLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBwbGF5ZXJTb3VyY2VDb25maWcuZGVzY3JpcHRpb24sXG4gICAgICAgICAgbWFya2VyczogKHBsYXllclNvdXJjZUNvbmZpZyBhcyBhbnkpLm1hcmtlcnMsXG4gICAgICAgIH0sXG4gICAgICAgIHJlY29tbWVuZGF0aW9uczogKHBsYXllclNvdXJjZUNvbmZpZyBhcyBhbnkpLnJlY29tbWVuZGF0aW9ucyxcbiAgICAgIH07XG5cbiAgICAgIC8vIFBsYXllciBzb3VyY2UgY29uZmlnIHRha2VzIHByZWNlZGVuY2Ugb3ZlciB0aGUgVUkgY29uZmlnLCBiZWNhdXNlIHRoZSBjb25maWcgaW4gdGhlIHNvdXJjZSBpcyBhdHRhY2hlZFxuICAgICAgLy8gdG8gYSBzb3VyY2Ugd2hpY2ggY2hhbmdlcyB3aXRoIGV2ZXJ5IHBsYXllci5sb2FkLCB3aGVyZWFzIHRoZSBVSSBjb25maWcgc3RheXMgdGhlIHNhbWUgZm9yIHRoZSB3aG9sZVxuICAgICAgLy8gbGlmZXRpbWUgb2YgdGhlIHBsYXllciBpbnN0YW5jZS5cbiAgICAgIHRoaXMuY29uZmlnLm1ldGFkYXRhLnRpdGxlID1cbiAgICAgICAgcGxheWVyU291cmNlVWlDb25maWcubWV0YWRhdGEudGl0bGUgfHwgdWljb25maWcubWV0YWRhdGEudGl0bGU7XG4gICAgICB0aGlzLmNvbmZpZy5tZXRhZGF0YS5kZXNjcmlwdGlvbiA9XG4gICAgICAgIHBsYXllclNvdXJjZVVpQ29uZmlnLm1ldGFkYXRhLmRlc2NyaXB0aW9uIHx8XG4gICAgICAgIHVpY29uZmlnLm1ldGFkYXRhLmRlc2NyaXB0aW9uO1xuICAgICAgdGhpcy5jb25maWcubWV0YWRhdGEubWFya2VycyA9XG4gICAgICAgIHBsYXllclNvdXJjZVVpQ29uZmlnLm1ldGFkYXRhLm1hcmtlcnMgfHxcbiAgICAgICAgdWljb25maWcubWV0YWRhdGEubWFya2VycyB8fFxuICAgICAgICBbXTtcbiAgICAgIHRoaXMuY29uZmlnLnJlY29tbWVuZGF0aW9ucyA9XG4gICAgICAgIHBsYXllclNvdXJjZVVpQ29uZmlnLnJlY29tbWVuZGF0aW9ucyB8fCB1aWNvbmZpZy5yZWNvbW1lbmRhdGlvbnMgfHwgW107XG4gICAgICB0aGlzLmNvbmZpZy5tZXRhZGF0YS50aXRsZSA9IHBsYXllclNvdXJjZVVpQ29uZmlnLm1ldGFkYXRhLnRpdGxlIHx8IHVpY29uZmlnLm1ldGFkYXRhLnRpdGxlO1xuICAgICAgdGhpcy5jb25maWcubWV0YWRhdGEuZGVzY3JpcHRpb24gPSBwbGF5ZXJTb3VyY2VVaUNvbmZpZy5tZXRhZGF0YS5kZXNjcmlwdGlvbiB8fCB1aWNvbmZpZy5tZXRhZGF0YS5kZXNjcmlwdGlvbjtcbiAgICAgIHRoaXMuY29uZmlnLm1ldGFkYXRhLm1hcmtlcnMgPSBwbGF5ZXJTb3VyY2VVaUNvbmZpZy5tZXRhZGF0YS5tYXJrZXJzIHx8IHVpY29uZmlnLm1ldGFkYXRhLm1hcmtlcnMgfHwgW107XG4gICAgICB0aGlzLmNvbmZpZy5yZWNvbW1lbmRhdGlvbnMgPSBwbGF5ZXJTb3VyY2VVaUNvbmZpZy5yZWNvbW1lbmRhdGlvbnMgfHwgdWljb25maWcucmVjb21tZW5kYXRpb25zIHx8IFtdO1xuXG4gICAgICBTdG9yYWdlVXRpbHMuc2V0U3RvcmFnZUFwaURpc2FibGVkKHVpY29uZmlnKTtcbiAgICB9O1xuXG4gICAgdXBkYXRlQ29uZmlnKCk7XG4gICAgdGhpcy5zdWJ0aXRsZVNldHRpbmdzTWFuYWdlci5pbml0aWFsaXplKCk7XG5cbiAgICAvLyBVcGRhdGUgdGhlIHNvdXJjZSBjb25maWd1cmF0aW9uIHdoZW4gYSBuZXcgc291cmNlIGlzIGxvYWRlZCBhbmQgZGlzcGF0Y2ggb25VcGRhdGVkXG4gICAgY29uc3QgdXBkYXRlU291cmNlID0gKCkgPT4ge1xuICAgICAgdXBkYXRlQ29uZmlnKCk7XG4gICAgICB0aGlzLmNvbmZpZy5ldmVudHMub25VcGRhdGVkLmRpc3BhdGNoKHRoaXMpO1xuICAgIH07XG5cbiAgICBjb25zdCB3cmFwcGVkUGxheWVyID0gdGhpcy5tYW5hZ2VyUGxheWVyV3JhcHBlci5nZXRQbGF5ZXIoKTtcblxuICAgIHdyYXBwZWRQbGF5ZXIub24oXG4gICAgICB0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZUxvYWRlZCxcbiAgICAgIHVwZGF0ZVNvdXJjZSxcbiAgICApO1xuXG4gICAgLy8gVGhlIFBsYXlsaXN0VHJhbnNpdGlvbiBldmVudCBpcyBvbmx5IGF2YWlsYWJsZSBvbiBNb2JpbGUgdjMgZm9yIG5vdy5cbiAgICAvLyBUaGlzIGV2ZW50IGlzIGZpcmVkIHdoZW4gYSBuZXcgc291cmNlIGJlY29tZXMgYWN0aXZlIGluIHRoZSBwbGF5ZXIuXG4gICAgaWYgKGlzTW9iaWxlVjNQbGF5ZXJBUEkod3JhcHBlZFBsYXllcikpIHtcbiAgICAgIHdyYXBwZWRQbGF5ZXIub24oTW9iaWxlVjNQbGF5ZXJFdmVudC5QbGF5bGlzdFRyYW5zaXRpb24sIHVwZGF0ZVNvdXJjZSk7XG4gICAgfVxuXG4gICAgaWYgKHVpY29uZmlnLmNvbnRhaW5lcikge1xuICAgICAgLy8gVW5mb3J0dW5hdGVseSBcInVpQ29udGFpbmVyRWxlbWVudCA9IG5ldyBET00oY29uZmlnLmNvbnRhaW5lcilcIiB3aWxsIG5vdCBhY2NlcHQgdGhlIGNvbnRhaW5lciB3aXRoXG4gICAgICAvLyBzdHJpbmd8SFRNTEVsZW1lbnQgdHlwZSBkaXJlY3RseSwgYWx0aG91Z2ggaXQgYWNjZXB0cyBib3RoIHR5cGVzLCBzbyB3ZSBuZWVkIHRvIHNwaXQgdGhlc2UgdHdvIGNhc2VzIHVwIGhlcmUuXG4gICAgICAvLyBUT0RPIGNoZWNrIGluIHVwY29taW5nIFRTIHZlcnNpb25zIGlmIHRoZSBjb250YWluZXIgY2FuIGJlIHBhc3NlZCBpbiBkaXJlY3RseSwgb3IgZml4IHRoZSBjb25zdHJ1Y3RvclxuICAgICAgdGhpcy51aUNvbnRhaW5lckVsZW1lbnQgPVxuICAgICAgICB1aWNvbmZpZy5jb250YWluZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudFxuICAgICAgICAgID8gbmV3IERPTSh1aWNvbmZpZy5jb250YWluZXIpXG4gICAgICAgICAgOiBuZXcgRE9NKHVpY29uZmlnLmNvbnRhaW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudWlDb250YWluZXJFbGVtZW50ID0gbmV3IERPTShwbGF5ZXIuZ2V0Q29udGFpbmVyKCkpO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBVSSBpbnN0YW5jZSBtYW5hZ2VycyBmb3IgdGhlIFVJIHZhcmlhbnRzXG4gICAgLy8gVGhlIGluc3RhbmNlIG1hbmFnZXJzIG1hcCB0byB0aGUgY29ycmVzcG9uZGluZyBVSSB2YXJpYW50cyBieSB0aGVpciBhcnJheSBpbmRleFxuICAgIHRoaXMudWlJbnN0YW5jZU1hbmFnZXJzID0gW107XG4gICAgbGV0IHVpVmFyaWFudHNXaXRob3V0Q29uZGl0aW9uID0gW107XG4gICAgZm9yIChsZXQgdWlWYXJpYW50IG9mIHRoaXMudWlWYXJpYW50cykge1xuICAgICAgaWYgKHVpVmFyaWFudC5jb25kaXRpb24gPT0gbnVsbCkge1xuICAgICAgICAvLyBDb2xsZWN0IHZhcmlhbnRzIHdpdGhvdXQgY29uZGl0aW9ucyBmb3IgZXJyb3IgY2hlY2tpbmdcbiAgICAgICAgdWlWYXJpYW50c1dpdGhvdXRDb25kaXRpb24ucHVzaCh1aVZhcmlhbnQpO1xuICAgICAgfVxuICAgICAgLy8gQ3JlYXRlIHRoZSBpbnN0YW5jZSBtYW5hZ2VyIGZvciBhIFVJIHZhcmlhbnRcbiAgICAgIHRoaXMudWlJbnN0YW5jZU1hbmFnZXJzLnB1c2gobmV3IEludGVybmFsVUlJbnN0YW5jZU1hbmFnZXIoXG4gICAgICAgIHBsYXllcixcbiAgICAgICAgdWlWYXJpYW50LnVpLFxuICAgICAgICB0aGlzLmNvbmZpZyxcbiAgICAgICAgdGhpcy5zdWJ0aXRsZVNldHRpbmdzTWFuYWdlcixcbiAgICAgICAgdWlWYXJpYW50LnNwYXRpYWxOYXZpZ2F0aW9uLFxuICAgICAgKSk7XG4gICAgfVxuICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZXJlIGlzIG9ubHkgb25lIFVJIHZhcmlhbnQgd2l0aG91dCBhIGNvbmRpdGlvblxuICAgIC8vIEl0IGRvZXMgbm90IG1ha2Ugc2Vuc2UgdG8gaGF2ZSBtdWx0aXBsZSB2YXJpYW50cyB3aXRob3V0IGNvbmRpdGlvbiwgYmVjYXVzZSBvbmx5IHRoZSBmaXJzdCBvbmUgaW4gdGhlIGxpc3RcbiAgICAvLyAodGhlIG9uZSB3aXRoIHRoZSBsb3dlc3QgaW5kZXgpIHdpbGwgZXZlciBiZSBzZWxlY3RlZC5cbiAgICBpZiAodWlWYXJpYW50c1dpdGhvdXRDb25kaXRpb24ubGVuZ3RoID4gMSkge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICdUb28gbWFueSBVSXMgd2l0aG91dCBhIGNvbmRpdGlvbjogWW91IGNhbm5vdCBoYXZlIG1vcmUgdGhhbiBvbmUgZGVmYXVsdCBVSScsXG4gICAgICApO1xuICAgIH1cbiAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgZGVmYXVsdCBVSSB2YXJpYW50LCBpZiBkZWZpbmVkLCBpcyBhdCB0aGUgZW5kIG9mIHRoZSBsaXN0IChsYXN0IGluZGV4KVxuICAgIC8vIElmIGl0IGNvbWVzIGVhcmxpZXIsIHRoZSB2YXJpYW50cyB3aXRoIGNvbmRpdGlvbnMgdGhhdCBjb21lIGFmdGVyd2FyZHMgd2lsbCBuZXZlciBiZSBzZWxlY3RlZCBiZWNhdXNlIHRoZVxuICAgIC8vIGRlZmF1bHQgdmFyaWFudCB3aXRob3V0IGEgY29uZGl0aW9uIGFsd2F5cyBldmFsdWF0ZXMgdG8gJ3RydWUnXG4gICAgaWYgKFxuICAgICAgdWlWYXJpYW50c1dpdGhvdXRDb25kaXRpb24ubGVuZ3RoID4gMCAmJlxuICAgICAgdWlWYXJpYW50c1dpdGhvdXRDb25kaXRpb25bMF0gIT09XG4gICAgICAgIHRoaXMudWlWYXJpYW50c1t0aGlzLnVpVmFyaWFudHMubGVuZ3RoIC0gMV1cbiAgICApIHtcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAnSW52YWxpZCBVSSB2YXJpYW50IG9yZGVyOiB0aGUgZGVmYXVsdCBVSSAod2l0aG91dCBjb25kaXRpb24pIG11c3QgYmUgYXQgdGhlIGVuZCBvZiB0aGUgbGlzdCcsXG4gICAgICApO1xuICAgIH1cblxuICAgIGxldCBhZFN0YXJ0ZWRFdmVudDogQWRFdmVudCA9IG51bGw7IC8vIGtlZXAgdGhlIGV2ZW50IHN0b3JlZCBoZXJlIGR1cmluZyBhZCBwbGF5YmFja1xuXG4gICAgLy8gRHluYW1pY2FsbHkgc2VsZWN0IGEgVUkgdmFyaWFudCB0aGF0IG1hdGNoZXMgdGhlIGN1cnJlbnQgVUkgY29uZGl0aW9uLlxuICAgIGxldCByZXNvbHZlVWlWYXJpYW50ID0gKGV2ZW50OiBQbGF5ZXJFdmVudEJhc2UpID0+IHtcbiAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBBZFN0YXJ0ZWQgZXZlbnQgZGF0YSBpcyBwZXJzaXN0ZWQgdGhyb3VnaCBhZCBwbGF5YmFjayBpbiBjYXNlIG90aGVyIGV2ZW50cyBoYXBwZW5cbiAgICAgIC8vIGluIHRoZSBtZWFudGltZSwgZS5nLiBwbGF5ZXIgcmVzaXplLiBXZSBuZWVkIHRvIHN0b3JlIHRoaXMgZGF0YSBiZWNhdXNlIHRoZXJlIGlzIG5vIG90aGVyIHdheSB0byBmaW5kIG91dFxuICAgICAgLy8gYWQgZGV0YWlscyB3aGlsZSBhbiBhZCBpcyBwbGF5aW5nIChpbiB2OC4wIGF0IGxlYXN0OyBmcm9tIHY4LjEgdGhlcmUgd2lsbCBiZSBhZHMuZ2V0QWN0aXZlQWQoKSkuXG4gICAgICAvLyBFeGlzdGluZyBldmVudCBkYXRhIHNpZ25hbHMgdGhhdCBhbiBhZCBpcyBjdXJyZW50bHkgYWN0aXZlIChpbnN0ZWFkIG9mIGFkcy5pc0xpbmVhckFkQWN0aXZlKCkpLlxuICAgICAgaWYgKGV2ZW50ICE9IG51bGwpIHtcbiAgICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICAgICAgLy8gVGhlIGFkcyBVSSBpcyBzaG93biB1cG9uIHRoZSBmaXJzdCBBZFN0YXJ0ZWQgZXZlbnQuIFN1YnNlcXVlbnQgQWRTdGFydGVkIGV2ZW50cyB3aXRoaW4gYW4gYWQgYnJlYWtcbiAgICAgICAgICAvLyB3aWxsIG5vdCBjaGFuZ2UgdGhlIGNvbmRpdGlvbiBjb250ZXh0IGFuZCB0aHVzIG5vdCBsZWFkIHRvIHVuZGVzaXJlZCBVSSB2YXJpYW50IHJlc29sdmluZy5cbiAgICAgICAgICAvLyBUaGUgYWRzIFVJIGlzIHNob3duIHVwb24gQWRTdGFydGVkIGluc3RlYWQgb2YgQWRCcmVha1N0YXJ0ZWQgYmVjYXVzZSB0aGVyZSBjYW4gYmUgYSBsb2FkaW5nIGRlbGF5XG4gICAgICAgICAgLy8gYmV0d2VlbiB0aGVzZSB0d28gZXZlbnRzIGluIHRoZSBwbGF5ZXIsIGFuZCB0aGUgQWRCcmVha1N0YXJ0ZWQgZXZlbnQgZG9lcyBub3QgY2FycnkgYW55IG1ldGFkYXRhIHRvXG4gICAgICAgICAgLy8gaW5pdGlhbGl6ZSB0aGUgYWRzIFVJLCBzbyBpdCB3b3VsZCBiZSByZW5kZXJlZCBpbiBhbiB1bmluaXRpYWxpemVkIHN0YXRlIGZvciBhIGNlcnRhaW4gYW1vdW50IG9mIHRpbWUuXG4gICAgICAgICAgLy8gVE9ETyBzaG93IGFkcyBVSSB1cG9uIEFkQnJlYWtTdGFydGVkIGFuZCBkaXNwbGF5IGxvYWRpbmcgb3ZlcmxheSBiZXR3ZWVuIEFkQnJlYWtTdGFydGVkIGFuZCBmaXJzdCBBZFN0YXJ0ZWRcbiAgICAgICAgICAvLyBUT0RPIGRpc3BsYXkgbG9hZGluZyBvdmVybGF5IGJldHdlZW4gQWRGaW5pc2hlZCBhbmQgbmV4dCBBZFN0YXJ0ZWRcbiAgICAgICAgICBjYXNlIHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkU3RhcnRlZDpcbiAgICAgICAgICAgIGFkU3RhcnRlZEV2ZW50ID0gZXZlbnQgYXMgQWRFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIC8vIFRoZSBhZHMgVUkgaXMgaGlkZGVuIG9ubHkgd2hlbiB0aGUgYWQgYnJlYWsgaXMgZmluaXNoZWQsIGkuZS4gbm90IG9uIEFkRmluaXNoZWQgZXZlbnRzLiBUaGlzIHdheSB3ZSBrZWVwXG4gICAgICAgICAgLy8gdGhlIGFkcyBVSSB2YXJpYW50IGFjdGl2ZSB0aHJvdWdob3V0IGFuIGFkIGJyZWFrLCBhcyByZWFjdGluZyB0byBBZEZpbmlzaGVkIHdvdWxkIGxlYWQgdG8gdW5kZXNpcmVkIFVJXG4gICAgICAgICAgLy8gdmFyaWFudCBzd2l0Y2hpbmcgYmV0d2VlbiB0d28gYWRzIGluIGFuIGFkIGJyZWFrLCBlLmcuIGFkcyBVSSAtPiBBZEZpbmlzaGVkIC0+IGNvbnRlbnQgVUkgLT5cbiAgICAgICAgICAvLyBBZFN0YXJ0ZWQgLT4gYWRzIFVJLlxuICAgICAgICAgIGNhc2UgcGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQWRCcmVha0ZpbmlzaGVkOlxuICAgICAgICAgICAgYWRTdGFydGVkRXZlbnQgPSBudWxsO1xuICAgICAgICAgICAgLy8gV2hlbiBzd2l0Y2hpbmcgdG8gYSB2YXJpYW50IGZvciB0aGUgZmlyc3QgdGltZSwgYSBjb25maWcuZXZlbnRzLm9uVXBkYXRlZCBldmVudCBpcyBmaXJlZCB0byB0cmlnZ2VyIGEgVUlcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBvZiB0aGUgbmV3IHZhcmlhbnQsIGJlY2F1c2UgbW9zdCBjb21wb25lbnRzIHN1YnNjcmliZSB0byB0aGlzIGV2ZW50IHRvIHVwZGF0ZSB0aGVtc2VsdmVzLiBXaGVuXG4gICAgICAgICAgICAvLyBzd2l0Y2hpbmcgdG8gdGhlIGFkcyBVSSBvbiB0aGUgZmlyc3QgQWRTdGFydGVkLCBhbGwgVUkgdmFyaWFudHMgdXBkYXRlIHRoZW1zZWx2ZXMgd2l0aCB0aGUgYWQgZGF0YSwgc29cbiAgICAgICAgICAgIC8vIHdoZW4gc3dpdGNoaW5nIGJhY2sgdG8gdGhlIFwibm9ybWFsXCIgVUkgaXQgd2lsbCBjYXJyeSBwcm9wZXJ0aWVzIG9mIHRoZSBhZCBpbnN0ZWFkIG9mIHRoZSBtYWluIGNvbnRlbnQuXG4gICAgICAgICAgICAvLyBXZSB0aHVzIGZpcmUgdGhpcyBldmVudCBoZXJlIHRvIGZvcmNlIGFuIFVJIHVwZGF0ZSB3aXRoIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBtYWluIGNvbnRlbnQuIFRoaXMgaXNcbiAgICAgICAgICAgIC8vIGJhc2ljYWxseSBhIGhhY2sgYmVjYXVzZSB0aGUgY29uZmlnLmV2ZW50cy5vblVwZGF0ZWQgZXZlbnQgaXMgYWJ1c2VkIGluIG1hbnkgcGxhY2VzIGFuZCBub3QganVzdCB1c2VkXG4gICAgICAgICAgICAvLyBmb3IgY29uZmlnIHVwZGF0ZXMgKGUuZy4gYWRkaW5nIGEgbWFya2VyIHRvIHRoZSBzZWVrYmFyKS5cbiAgICAgICAgICAgIC8vIFRPRE8gaW50cm9kdWNlIGFuIGV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgcGxheWJhY2sgY29udGVudCBpcyB1cGRhdGVkLCBhIHN3aXRjaCB0by9mcm9tIGFkc1xuICAgICAgICAgICAgdGhpcy5jb25maWcuZXZlbnRzLm9uVXBkYXRlZC5kaXNwYXRjaCh0aGlzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIC8vIFdoZW4gYSBuZXcgc291cmNlIGlzIGxvYWRlZCBkdXJpbmcgYWQgcGxheWJhY2ssIHRoZXJlIHdpbGwgYmUgbm8gQWQoQnJlYWspRmluaXNoZWQgZXZlbnRcbiAgICAgICAgICBjYXNlIHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZUxvYWRlZDpcbiAgICAgICAgICBjYXNlIHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZVVubG9hZGVkOlxuICAgICAgICAgICAgYWRTdGFydGVkRXZlbnQgPSBudWxsO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRGV0ZWN0IGlmIGFuIGFkIGhhcyBzdGFydGVkXG4gICAgICBsZXQgaXNBZCA9IGFkU3RhcnRlZEV2ZW50ICE9IG51bGw7XG4gICAgICBsZXQgYWRSZXF1aXJlc1VpID0gZmFsc2U7XG4gICAgICBpZiAoaXNBZCkge1xuICAgICAgICBsZXQgYWQgPSBhZFN0YXJ0ZWRFdmVudC5hZDtcbiAgICAgICAgLy8gZm9yIG5vdyBvbmx5IGxpbmVhciBhZHMgY2FuIHJlcXVlc3QgYSBVSVxuICAgICAgICBpZiAoYWQuaXNMaW5lYXIpIHtcbiAgICAgICAgICBsZXQgbGluZWFyQWQgPSBhZCBhcyBMaW5lYXJBZDtcbiAgICAgICAgICBhZFJlcXVpcmVzVWkgPVxuICAgICAgICAgICAgKGxpbmVhckFkLnVpQ29uZmlnICYmIGxpbmVhckFkLnVpQ29uZmlnLnJlcXVlc3RzVWkpIHx8IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhZFJlcXVpcmVzVWkpIHtcbiAgICAgICAgLy8gd2UgZGlzcGF0Y2ggb25VcGRhdGVkIGV2ZW50IGJlY2F1c2UgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGFkQnJlYWtzIGZvciBzYW1lIHBvc2l0aW9uXG4gICAgICAgIC8vIGBQbGF5YCBhbmQgYFBsYXlpbmdgIGV2ZW50cyB3aWxsIG5vdCBiZSBkaXNwYXRjaGVkIHdoaWNoIHdpbGwgY2F1c2UgYFBsYXliYWNrQnV0dG9uYCBzdGF0ZVxuICAgICAgICAvLyB0byBiZSBvdXQgb2Ygc3luY1xuICAgICAgICB0aGlzLmNvbmZpZy5ldmVudHMub25VcGRhdGVkLmRpc3BhdGNoKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlc29sdmVVaVZhcmlhbnQoXG4gICAgICAgIHtcbiAgICAgICAgICBpc0FkOiBpc0FkLFxuICAgICAgICAgIGFkUmVxdWlyZXNVaTogYWRSZXF1aXJlc1VpLFxuICAgICAgICAgIGlzUmFkaW9Nb2RlQWN0aXZlOiB0aGlzLmlzUmFkaW9Nb2RlQWN0aXZlLFxuICAgICAgICAgIGlzUmFkaW9Nb2RlQXZhaWxhYmxlOiB0aGlzLmlzUmFkaW9Nb2RlQXZhaWxhYmxlLFxuICAgICAgICB9LFxuICAgICAgICAoY29udGV4dCkgPT4ge1xuICAgICAgICAgIC8vIElmIHRoaXMgaXMgYW4gYWQgVUksIHdlIG5lZWQgdG8gcmVsYXkgdGhlIHNhdmVkIE9OX0FEX1NUQVJURUQgZXZlbnQgZGF0YSBzbyBhZCBjb21wb25lbnRzIGNhbiBjb25maWd1cmVcbiAgICAgICAgICAvLyB0aGVtc2VsdmVzIGZvciB0aGUgY3VycmVudCBhZC5cbiAgICAgICAgICBpZiAoY29udGV4dC5pc0FkKSB7XG4gICAgICAgICAgICAvKiBSZWxheSB0aGUgT05fQURfU1RBUlRFRCBldmVudCB0byB0aGUgYWRzIFVJXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQmVjYXVzZSB0aGUgYWRzIFVJIGlzIGluaXRpYWxpemVkIGluIHRoZSBPTl9BRF9TVEFSVEVEIGhhbmRsZXIsIGkuZS4gd2hlbiB0aGUgT05fQURfU1RBUlRFRCBldmVudCBoYXNcbiAgICAgICAgICAgICAqIGFscmVhZHkgYmVlbiBmaXJlZCwgY29tcG9uZW50cyBpbiB0aGUgYWRzIFVJIHRoYXQgbGlzdGVuIGZvciB0aGUgT05fQURfU1RBUlRFRCBldmVudCBuZXZlciByZWNlaXZlIGl0LlxuICAgICAgICAgICAgICogU2luY2UgdGhpcyBjYW4gYnJlYWsgZnVuY3Rpb25hbGl0eSBvZiBjb21wb25lbnRzIHRoYXQgcmVseSBvbiB0aGlzIGV2ZW50LCB3ZSByZWxheSB0aGUgZXZlbnQgdG8gdGhlXG4gICAgICAgICAgICAgKiBhZHMgVUkgY29tcG9uZW50cyB3aXRoIHRoZSBmb2xsb3dpbmcgY2FsbC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50VWlcbiAgICAgICAgICAgICAgLmdldFdyYXBwZWRQbGF5ZXIoKVxuICAgICAgICAgICAgICAuZmlyZUV2ZW50SW5VSShcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LkFkU3RhcnRlZCxcbiAgICAgICAgICAgICAgICBhZFN0YXJ0ZWRFdmVudCxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH07XG5cbiAgICAvLyBMaXN0ZW4gdG8gdGhlIGZvbGxvd2luZyBldmVudHMgdG8gdHJpZ2dlciBVSSB2YXJpYW50IHJlc29sdXRpb25cbiAgICBpZiAodGhpcy5jb25maWcuYXV0b1VpVmFyaWFudFJlc29sdmUpIHtcbiAgICAgIHRoaXMubWFuYWdlclBsYXllcldyYXBwZXJcbiAgICAgICAgLmdldFBsYXllcigpXG4gICAgICAgIC5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZUxvYWRlZCwgcmVzb2x2ZVVpVmFyaWFudCk7XG4gICAgICB0aGlzLm1hbmFnZXJQbGF5ZXJXcmFwcGVyXG4gICAgICAgIC5nZXRQbGF5ZXIoKVxuICAgICAgICAub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5Tb3VyY2VVbmxvYWRlZCwgcmVzb2x2ZVVpVmFyaWFudCk7XG4gICAgICB0aGlzLm1hbmFnZXJQbGF5ZXJXcmFwcGVyXG4gICAgICAgIC5nZXRQbGF5ZXIoKVxuICAgICAgICAub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5QbGF5LCByZXNvbHZlVWlWYXJpYW50KTtcbiAgICAgIHRoaXMubWFuYWdlclBsYXllcldyYXBwZXJcbiAgICAgICAgLmdldFBsYXllcigpXG4gICAgICAgIC5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBhdXNlZCwgcmVzb2x2ZVVpVmFyaWFudCk7XG4gICAgICB0aGlzLm1hbmFnZXJQbGF5ZXJXcmFwcGVyXG4gICAgICAgIC5nZXRQbGF5ZXIoKVxuICAgICAgICAub24odGhpcy5wbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5BZFN0YXJ0ZWQsIHJlc29sdmVVaVZhcmlhbnQpO1xuICAgICAgdGhpcy5tYW5hZ2VyUGxheWVyV3JhcHBlclxuICAgICAgICAuZ2V0UGxheWVyKClcbiAgICAgICAgLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuQWRCcmVha0ZpbmlzaGVkLCByZXNvbHZlVWlWYXJpYW50KTtcbiAgICAgIHRoaXMubWFuYWdlclBsYXllcldyYXBwZXJcbiAgICAgICAgLmdldFBsYXllcigpXG4gICAgICAgIC5vbih0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlBsYXllclJlc2l6ZWQsIHJlc29sdmVVaVZhcmlhbnQpO1xuICAgICAgdGhpcy5tYW5hZ2VyUGxheWVyV3JhcHBlclxuICAgICAgICAuZ2V0UGxheWVyKClcbiAgICAgICAgLm9uKHRoaXMucGxheWVyLmV4cG9ydHMuUGxheWVyRXZlbnQuVmlld01vZGVDaGFuZ2VkLCByZXNvbHZlVWlWYXJpYW50KTtcbiAgICB9XG5cbiAgICB0aGlzLmZvY3VzVmlzaWJpbGl0eVRyYWNrZXIgPSBuZXcgRm9jdXNWaXNpYmlsaXR5VHJhY2tlcigne3tQUkVGSVh9fScpO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgVUlcbiAgICByZXNvbHZlVWlWYXJpYW50KG51bGwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4cG9zZXMgaTE4bi5nZXRMb2NhbGl6ZXIoKSBmdW5jdGlvblxuICAgKiBAcmV0dXJucyB7STE4bkFwaS5nZXRMb2NhbGl6ZXIoKX1cbiAgICovXG4gIHN0YXRpYyBsb2NhbGl6ZTxWIGV4dGVuZHMgQ3VzdG9tVm9jYWJ1bGFyeTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+Pj4oa2V5OiBrZXlvZiBWKSB7XG4gICAgcmV0dXJuIGkxOG4uZ2V0TG9jYWxpemVyKGtleSk7XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZSBjb25maWd1cmF0aW9uIHRvIHN1cHBvcnQgQ3VzdG9tIFVJIGxhbmd1YWdlc1xuICAgKiBkZWZhdWx0IGxhbmd1YWdlOiAnZW4nXG4gICAqL1xuICBzdGF0aWMgc2V0TG9jYWxpemF0aW9uQ29uZmlnKGxvY2FsaXphdGlvbkNvbmZpZzogTG9jYWxpemF0aW9uQ29uZmlnKSB7XG4gICAgaTE4bi5zZXRDb25maWcobG9jYWxpemF0aW9uQ29uZmlnKTtcbiAgfVxuXG4gIGhhbmRsZUlzUmFkaW9Nb2RlQWN0aXZlQ2hhbmdlID0gKFxuICAgIGV2ZW50OiBDdXN0b21FdmVudDxib29sZWFuIHwgbnVsbD4sXG4gICkgPT4ge1xuICAgIHRoaXMuaXNSYWRpb01vZGVBY3RpdmUgPSBldmVudC5kZXRhaWw7XG4gIH07XG5cbiAgaGFuZGxlSXNSYWRpb01vZGVBdmFpbGFibGVDaGFuZ2UgPSAoXG4gICAgZXZlbnQ6IEN1c3RvbUV2ZW50PGJvb2xlYW4gfCBudWxsPixcbiAgKSA9PiB7XG4gICAgdGhpcy5pc1JhZGlvTW9kZUF2YWlsYWJsZSA9IGV2ZW50LmRldGFpbDtcbiAgfTtcbiAgZ2V0U3VidGl0bGVTZXR0aW5nc01hbmFnZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3VidGl0bGVTZXR0aW5nc01hbmFnZXI7XG4gIH1cblxuICBnZXRDb25maWcoKTogVUlDb25maWcge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBsaXN0IG9mIFVJIHZhcmlhbnRzIGFzIHBhc3NlZCBpbnRvIHRoZSBjb25zdHJ1Y3RvciBvZiB7QGxpbmsgVUlNYW5hZ2VyfS5cbiAgICogQHJldHVybnMge1VJVmFyaWFudFtdfSB0aGUgbGlzdCBvZiBhdmFpbGFibGUgVUkgdmFyaWFudHNcbiAgICovXG4gIGdldFVpVmFyaWFudHMoKTogVUlWYXJpYW50W10ge1xuICAgIHJldHVybiB0aGlzLnVpVmFyaWFudHM7XG4gIH1cblxuICAvKipcbiAgICogU3dpdGNoZXMgdG8gYSBVSSB2YXJpYW50IGZyb20gdGhlIGxpc3QgcmV0dXJuZWQgYnkge0BsaW5rIGdldFVpVmFyaWFudHN9LlxuICAgKiBAcGFyYW0ge1VJVmFyaWFudH0gdWlWYXJpYW50IHRoZSBVSSB2YXJpYW50IHRvIHN3aXRjaCB0b1xuICAgKiBAcGFyYW0geygpID0+IHZvaWR9IG9uU2hvdyBhIGNhbGxiYWNrIHRoYXQgaXMgZXhlY3V0ZWQganVzdCBiZWZvcmUgdGhlIG5ldyBVSSB2YXJpYW50IGlzIHNob3duXG4gICAqL1xuICBzd2l0Y2hUb1VpVmFyaWFudCh1aVZhcmlhbnQ6IFVJVmFyaWFudCwgb25TaG93PzogKCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIGxldCB1aVZhcmlhbnRJbmRleCA9IHRoaXMudWlWYXJpYW50cy5pbmRleE9mKHVpVmFyaWFudCk7XG5cbiAgICBjb25zdCBwcmV2aW91c1VpID0gdGhpcy5jdXJyZW50VWk7XG4gICAgY29uc3QgbmV4dFVpOiBJbnRlcm5hbFVJSW5zdGFuY2VNYW5hZ2VyID0gdGhpcy51aUluc3RhbmNlTWFuYWdlcnNbdWlWYXJpYW50SW5kZXhdO1xuICAgIC8vIERldGVybWluZSBpZiB0aGUgVUkgdmFyaWFudCBpcyBjaGFuZ2luZ1xuICAgIC8vIE9ubHkgaWYgdGhlIFVJIHZhcmlhbnQgaXMgY2hhbmdpbmcsIHdlIG5lZWQgdG8gZG8gc29tZSBzdHVmZi4gRWxzZSB3ZSBqdXN0IGxlYXZlIGV2ZXJ5dGhpbmcgYXMtaXMuXG4gICAgaWYgKG5leHRVaSA9PT0gdGhpcy5jdXJyZW50VWkpIHtcbiAgICAgIHJldHVybjtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdzd2l0Y2hlZCBmcm9tICcsIHRoaXMuY3VycmVudFVpID8gdGhpcy5jdXJyZW50VWkuZ2V0VUkoKSA6ICdub25lJyxcbiAgICAgIC8vICAgJyB0byAnLCBuZXh0VWkgPyBuZXh0VWkuZ2V0VUkoKSA6ICdub25lJyk7XG4gICAgfVxuXG4gICAgLy8gSGlkZSB0aGUgY3VycmVudGx5IGFjdGl2ZSBVSSB2YXJpYW50XG4gICAgaWYgKHRoaXMuY3VycmVudFVpKSB7XG4gICAgICB0aGlzLmN1cnJlbnRVaS5nZXRVSSgpLmhpZGUoKTtcbiAgICB9XG5cbiAgICAvLyBBc3NpZ24gdGhlIG5ldyBVSSB2YXJpYW50IGFzIGN1cnJlbnQgVUlcbiAgICB0aGlzLmN1cnJlbnRVaSA9IG5leHRVaTtcblxuICAgIC8vIFdoZW4gd2Ugc3dpdGNoIHRvIGEgZGlmZmVyZW50IFVJIGluc3RhbmNlLCB0aGVyZSdzIHNvbWUgYWRkaXRpb25hbCBzdHVmZiB0byBtYW5hZ2UuIElmIHdlIGRvIG5vdCBzd2l0Y2hcbiAgICAvLyB0byBhbiBpbnN0YW5jZSwgd2UncmUgZG9uZSBoZXJlLlxuICAgIGlmICh0aGlzLmN1cnJlbnRVaSA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIEFkZCB0aGUgVUkgdG8gdGhlIERPTSAoYW5kIGNvbmZpZ3VyZSBpdCkgdGhlIGZpcnN0IHRpbWUgaXQgaXMgc2VsZWN0ZWRcbiAgICBpZiAoIXRoaXMuY3VycmVudFVpLmlzQ29uZmlndXJlZCgpKSB7XG4gICAgICB0aGlzLmFkZFVpKHRoaXMuY3VycmVudFVpKTtcbiAgICAgIC8vIGVuc3VyZSB0aGF0IHRoZSBpbnRlcm5hbCBzdGF0ZSBpcyByZWFkeSBmb3IgdGhlIHVwY29taW5nIHNob3cgY2FsbFxuICAgICAgaWYgKCF0aGlzLmN1cnJlbnRVaS5nZXRVSSgpLmlzSGlkZGVuKCkpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VWkuZ2V0VUkoKS5oaWRlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvblNob3cpIHtcbiAgICAgIG9uU2hvdygpO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnRVaS5nZXRVSSgpLnNob3coKTtcbiAgICB0aGlzLmV2ZW50cy5vbkFjdGl2ZVVpQ2hhbmdlZC5kaXNwYXRjaCh0aGlzLCB7IHByZXZpb3VzVWksIGN1cnJlbnRVaTogbmV4dFVpIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyaWdnZXJzIGEgVUkgdmFyaWFudCBzd2l0Y2ggYXMgdHJpZ2dlcmVkIGJ5IGV2ZW50cyB3aGVuIGF1dG9tYXRpYyBzd2l0Y2hpbmcgaXMgZW5hYmxlZC4gSXQgYWxsb3dzIHRvIG92ZXJ3cml0ZVxuICAgKiBwcm9wZXJ0aWVzIG9mIHRoZSB7QGxpbmsgVUlDb25kaXRpb25Db250ZXh0fS5cbiAgICogQHBhcmFtIHtQYXJ0aWFsPFVJQ29uZGl0aW9uQ29udGV4dD59IGNvbnRleHQgYW4gb3B0aW9uYWwgc2V0IG9mIHByb3BlcnRpZXMgdGhhdCBvdmVyd3JpdGUgcHJvcGVydGllcyBvZiB0aGVcbiAgICogICBhdXRvbWF0aWNhbGx5IGRldGVybWluZWQgY29udGV4dFxuICAgKiBAcGFyYW0geyhjb250ZXh0OiBVSUNvbmRpdGlvbkNvbnRleHQpID0+IHZvaWR9IG9uU2hvdyBhIGNhbGxiYWNrIHRoYXQgaXMgZXhlY3V0ZWQganVzdCBiZWZvcmUgdGhlIG5ldyBVSSB2YXJpYW50XG4gICAqICAgaXMgc2hvd24gKGlmIGEgc3dpdGNoIGlzIGhhcHBlbmluZylcbiAgICovXG4gIHJlc29sdmVVaVZhcmlhbnQoY29udGV4dDogUGFydGlhbDxVSUNvbmRpdGlvbkNvbnRleHQ+ID0ge30sIG9uU2hvdz86IChjb250ZXh0OiBVSUNvbmRpdGlvbkNvbnRleHQpID0+IHZvaWQpOiB2b2lkIHtcbiAgICAvLyBEZXRlcm1pbmUgdGhlIGN1cnJlbnQgY29udGV4dCBmb3Igd2hpY2ggdGhlIFVJIHZhcmlhbnQgd2lsbCBiZSByZXNvbHZlZFxuICAgIGNvbnN0IGRlZmF1bHRDb250ZXh0OiBVSUNvbmRpdGlvbkNvbnRleHQgPSB7XG4gICAgICBpc0FkOiBmYWxzZSxcbiAgICAgIGFkUmVxdWlyZXNVaTogZmFsc2UsXG4gICAgICBpc0Z1bGxzY3JlZW46IHRoaXMucGxheWVyLmdldFZpZXdNb2RlKCkgPT09IHRoaXMucGxheWVyLmV4cG9ydHMuVmlld01vZGUuRnVsbHNjcmVlbixcbiAgICAgIGlzTW9iaWxlOiBCcm93c2VyVXRpbHMuaXNNb2JpbGUsXG4gICAgICBpc1BsYXlpbmc6IHRoaXMucGxheWVyLmlzUGxheWluZygpLFxuICAgICAgd2lkdGg6IHRoaXMudWlDb250YWluZXJFbGVtZW50LndpZHRoKCksXG4gICAgICBkb2N1bWVudFdpZHRoOiBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoLFxuICAgICAgaXNSYWRpb01vZGVBY3RpdmU6IGZhbHNlLFxuICAgICAgaXNSYWRpb01vZGVBdmFpbGFibGU6IGZhbHNlLFxuICAgIH07XG5cbiAgICAvLyBPdmVyd3JpdGUgcHJvcGVydGllcyBvZiB0aGUgZGVmYXVsdCBjb250ZXh0IHdpdGggcGFzc2VkIGluIGNvbnRleHQgcHJvcGVydGllc1xuICAgIGNvbnN0IHN3aXRjaGluZ0NvbnRleHQgPSB7IC4uLmRlZmF1bHRDb250ZXh0LCAuLi5jb250ZXh0IH07XG5cbiAgICAvLyBGaXJlIHRoZSBldmVudCBhbmQgYWxsb3cgbW9kaWZpY2F0aW9uIG9mIHRoZSBjb250ZXh0IGJlZm9yZSBpdCBpcyB1c2VkIHRvIHJlc29sdmUgdGhlIFVJIHZhcmlhbnRcbiAgICB0aGlzLmV2ZW50cy5vblVpVmFyaWFudFJlc29sdmUuZGlzcGF0Y2godGhpcywgc3dpdGNoaW5nQ29udGV4dCk7XG5cbiAgICBsZXQgbmV4dFVpVmFyaWFudDogVUlWYXJpYW50ID0gbnVsbDtcblxuICAgIC8vIFNlbGVjdCBuZXcgVUkgdmFyaWFudFxuICAgIC8vIElmIG5vIHZhcmlhbnQgY29uZGl0aW9uIGlzIGZ1bGZpbGxlZCwgd2Ugc3dpdGNoIHRvICpubyogVUlcbiAgICBmb3IgKGxldCB1aVZhcmlhbnQgb2YgdGhpcy51aVZhcmlhbnRzKSB7XG4gICAgICBjb25zdCBtYXRjaGVzQ29uZGl0aW9uID0gdWlWYXJpYW50LmNvbmRpdGlvbiA9PSBudWxsIHx8IHVpVmFyaWFudC5jb25kaXRpb24oc3dpdGNoaW5nQ29udGV4dCkgPT09IHRydWU7XG4gICAgICBpZiAobmV4dFVpVmFyaWFudCA9PSBudWxsICYmIG1hdGNoZXNDb25kaXRpb24pIHtcbiAgICAgICAgbmV4dFVpVmFyaWFudCA9IHVpVmFyaWFudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGhpZGUgYWxsIFVJcyBiZXNpZGVzIHRoZSBvbmUgd2hpY2ggc2hvdWxkIGJlIGFjdGl2ZVxuICAgICAgICB1aVZhcmlhbnQudWkuaGlkZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc3dpdGNoVG9VaVZhcmlhbnQobmV4dFVpVmFyaWFudCwgKCkgPT4ge1xuICAgICAgaWYgKG9uU2hvdykge1xuICAgICAgICBvblNob3coc3dpdGNoaW5nQ29udGV4dCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGFkZFVpKHVpOiBJbnRlcm5hbFVJSW5zdGFuY2VNYW5hZ2VyKTogdm9pZCB7XG4gICAgbGV0IGRvbSA9IHVpLmdldFVJKCkuZ2V0RG9tRWxlbWVudCgpO1xuICAgIGxldCBwbGF5ZXIgPSB1aS5nZXRXcmFwcGVkUGxheWVyKCk7XG5cbiAgICB1aS5jb25maWd1cmVDb250cm9scygpO1xuICAgIC8qIEFwcGVuZCB0aGUgVUkgRE9NIGFmdGVyIGNvbmZpZ3VyYXRpb24gdG8gYXZvaWQgQ1NTIHRyYW5zaXRpb25zIGF0IGluaXRpYWxpemF0aW9uXG4gICAgICogRXhhbXBsZTogQ29tcG9uZW50cyBhcmUgaGlkZGVuIGR1cmluZyBjb25maWd1cmF0aW9uIGFuZCB0aGVzZSBoaWRlcyBtYXkgdHJpZ2dlciBDU1MgdHJhbnNpdGlvbnMgdGhhdCBhcmVcbiAgICAgKiB1bmRlc2lyYWJsZSBhdCB0aGlzIHRpbWUuICovXG4gICAgdGhpcy51aUNvbnRhaW5lckVsZW1lbnQuYXBwZW5kKGRvbSk7XG5cbiAgICAvLyBXaGVuIHRoZSBVSSBpcyBsb2FkZWQgYWZ0ZXIgYSBzb3VyY2Ugd2FzIGxvYWRlZCwgd2UgbmVlZCB0byB0ZWxsIHRoZSBjb21wb25lbnRzIHRvIGluaXRpYWxpemUgdGhlbXNlbHZlc1xuICAgIGlmIChwbGF5ZXIuZ2V0U291cmNlKCkpIHtcbiAgICAgIHRoaXMuY29uZmlnLmV2ZW50cy5vblVwZGF0ZWQuZGlzcGF0Y2godGhpcyk7XG5cbiAgICB9XG5cbiAgICAvLyBGaXJlIG9uQ29uZmlndXJlZCBhZnRlciBVSSBET00gZWxlbWVudHMgYXJlIHN1Y2Nlc3NmdWxseSBhZGRlZC4gV2hlbiBmaXJlZCBpbW1lZGlhdGVseSwgdGhlIERPTSBlbGVtZW50c1xuICAgIC8vIG1pZ2h0IG5vdCBiZSBmdWxseSBjb25maWd1cmVkIGFuZCBlLmcuIGRvIG5vdCBoYXZlIGEgc2l6ZS5cbiAgICAvLyBodHRwczovL3N3aXplYy5jb20vYmxvZy9ob3ctdG8tcHJvcGVybHktd2FpdC1mb3ItZG9tLWVsZW1lbnRzLXRvLXNob3ctdXAtaW4tbW9kZXJuLWJyb3dzZXJzL3N3aXplYy82NjYzXG4gICAgaWYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7IHVpLm9uQ29uZmlndXJlZC5kaXNwYXRjaCh1aS5nZXRVSSgpKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElFOSBmYWxsYmFja1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7IHVpLm9uQ29uZmlndXJlZC5kaXNwYXRjaCh1aS5nZXRVSSgpKTsgfSwgMCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZWxlYXNlVWkodWk6IEludGVybmFsVUlJbnN0YW5jZU1hbmFnZXIpOiB2b2lkIHtcbiAgICB1aS5yZWxlYXNlQ29udHJvbHMoKTtcblxuICAgIGNvbnN0IHVpQ29udGFpbmVyID0gdWkuZ2V0VUkoKTtcbiAgICBpZiAodWlDb250YWluZXIuaGFzRG9tRWxlbWVudCgpKSB7XG4gICAgICB1aUNvbnRhaW5lci5nZXREb21FbGVtZW50KCkucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgdWkuY2xlYXJFdmVudEhhbmRsZXJzKCk7XG4gIH1cblxuICByZWxlYXNlKCk6IHZvaWQge1xuICAgIGZvciAobGV0IHVpSW5zdGFuY2VNYW5hZ2VyIG9mIHRoaXMudWlJbnN0YW5jZU1hbmFnZXJzKSB7XG4gICAgICB0aGlzLnJlbGVhc2VVaSh1aUluc3RhbmNlTWFuYWdlcik7XG4gICAgfVxuICAgIHRoaXMubWFuYWdlclBsYXllcldyYXBwZXIuY2xlYXJFdmVudEhhbmRsZXJzKCk7XG4gICAgdGhpcy5mb2N1c1Zpc2liaWxpdHlUcmFja2VyLnJlbGVhc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyBqdXN0IGJlZm9yZSBVSSB2YXJpYW50cyBhcmUgYWJvdXQgdG8gYmUgcmVzb2x2ZWQgYW5kIHRoZSBVSSB2YXJpYW50IGlzIHBvc3NpYmx5IHN3aXRjaGVkLiBJdCBpcyBmaXJlZCB3aGVuXG4gICAqIHRoZSBzd2l0Y2ggaXMgdHJpZ2dlcmVkIGZyb20gYW4gYXV0b21hdGljIHN3aXRjaCBhbmQgd2hlbiBjYWxsaW5nIHtAbGluayByZXNvbHZlVWlWYXJpYW50fS5cbiAgICogQ2FuIGJlIHVzZWQgdG8gbW9kaWZ5IHRoZSB7QGxpbmsgVUlDb25kaXRpb25Db250ZXh0fSBiZWZvcmUgcmVzb2x2aW5nIGlzIGRvbmUuXG4gICAqIEByZXR1cm5zIHtFdmVudERpc3BhdGNoZXI8VUlNYW5hZ2VyLCBVSUNvbmRpdGlvbkNvbnRleHQ+fVxuICAgKi9cbiAgZ2V0IG9uVWlWYXJpYW50UmVzb2x2ZSgpOiBFdmVudERpc3BhdGNoZXI8VUlNYW5hZ2VyLCBVSUNvbmRpdGlvbkNvbnRleHQ+IHtcbiAgICByZXR1cm4gdGhpcy5ldmVudHMub25VaVZhcmlhbnRSZXNvbHZlO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIGFmdGVyIHRoZSBVSU1hbmFnZXIgaGFzIHN3aXRjaGVkIHRvIGEgZGlmZmVyZW50IFVJIHZhcmlhbnQuXG4gICAqIEByZXR1cm5zIHtFdmVudERpc3BhdGNoZXI8VUlNYW5hZ2VyLCBBY3RpdmVVaUNoYW5nZWRBcmdzPn1cbiAgICovXG4gIGdldCBvbkFjdGl2ZVVpQ2hhbmdlZCgpOiBFdmVudERpc3BhdGNoZXI8VUlNYW5hZ2VyLCBBY3RpdmVVaUNoYW5nZWRBcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRzLm9uQWN0aXZlVWlDaGFuZ2VkO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IGFjdGl2ZSB7QGxpbmsgVUlJbnN0YW5jZU1hbmFnZXJ9LlxuICAgKi9cbiAgZ2V0IGFjdGl2ZVVpKCk6IFVJSW5zdGFuY2VNYW5hZ2VyIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50VWk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbGlzdCBvZiBhbGwgYWRkZWQgbWFya2VycyBpbiB1bmRlZmluZWQgb3JkZXIuXG4gICAqL1xuICBnZXRUaW1lbGluZU1hcmtlcnMoKTogVGltZWxpbmVNYXJrZXJbXSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLm1ldGFkYXRhLm1hcmtlcnM7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIG1hcmtlciB0byB0aGUgdGltZWxpbmUuIERvZXMgbm90IGNoZWNrIGZvciBkdXBsaWNhdGVzL292ZXJsYXBzIGF0IHRoZSBgdGltZWAuXG4gICAqL1xuICBhZGRUaW1lbGluZU1hcmtlcih0aW1lbGluZU1hcmtlcjogVGltZWxpbmVNYXJrZXIpOiB2b2lkIHtcbiAgICB0aGlzLmNvbmZpZy5tZXRhZGF0YS5tYXJrZXJzLnB1c2godGltZWxpbmVNYXJrZXIpO1xuICAgIHRoaXMuY29uZmlnLmV2ZW50cy5vblVwZGF0ZWQuZGlzcGF0Y2godGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIG1hcmtlciBmcm9tIHRoZSB0aW1lbGluZSAoYnkgcmVmZXJlbmNlKSBhbmQgcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG1hcmtlciBoYXNcbiAgICogYmVlbiBwYXJ0IG9mIHRoZSB0aW1lbGluZSBhbmQgc3VjY2Vzc2Z1bGx5IHJlbW92ZWQsIG9yIGBmYWxzZWAgaWYgdGhlIG1hcmtlciBjb3VsZCBub3RcbiAgICogYmUgZm91bmQgYW5kIHRodXMgbm90IHJlbW92ZWQuXG4gICAqL1xuICByZW1vdmVUaW1lbGluZU1hcmtlcih0aW1lbGluZU1hcmtlcjogVGltZWxpbmVNYXJrZXIpOiBib29sZWFuIHtcbiAgICBpZiAoQXJyYXlVdGlscy5yZW1vdmUodGhpcy5jb25maWcubWV0YWRhdGEubWFya2VycywgdGltZWxpbmVNYXJrZXIpID09PSB0aW1lbGluZU1hcmtlcikge1xuICAgICAgdGhpcy5jb25maWcuZXZlbnRzLm9uVXBkYXRlZC5kaXNwYXRjaCh0aGlzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lzUmFkaW9Nb2RlQWN0aXZlQ2hhbmdlJywgdGhpcy5oYW5kbGVJc1JhZGlvTW9kZUFjdGl2ZUNoYW5nZSk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lzUmFkaW9Nb2RlQXZhaWxhYmxlQ2hhbmdlJywgdGhpcy5oYW5kbGVJc1JhZGlvTW9kZUF2YWlsYWJsZUNoYW5nZSk7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZWVrUHJldmlld0FyZ3MgZXh0ZW5kcyBOb0FyZ3Mge1xuICAvKipcbiAgICogVGhlIHRpbWVsaW5lIHBvc2l0aW9uIGluIHBlcmNlbnQgd2hlcmUgdGhlIGV2ZW50IG9yaWdpbmF0ZXMgZnJvbS5cbiAgICovXG4gIHBvc2l0aW9uOiBudW1iZXI7XG4gIC8qKlxuICAgKiBUaGUgdGltZWxpbmUgbWFya2VyIGFzc29jaWF0ZWQgd2l0aCB0aGUgY3VycmVudCBwb3NpdGlvbiwgaWYgZXhpc3RpbmcuXG4gICAqL1xuICBtYXJrZXI/OiBTZWVrQmFyTWFya2VyO1xufVxuXG4vKipcbiAqIEVuY2Fwc3VsYXRlcyBmdW5jdGlvbmFsaXR5IHRvIG1hbmFnZSBhIFVJIGluc3RhbmNlLiBVc2VkIGJ5IHRoZSB7QGxpbmsgVUlNYW5hZ2VyfSB0byBtYW5hZ2UgbXVsdGlwbGUgVUkgaW5zdGFuY2VzLlxuICovXG5leHBvcnQgY2xhc3MgVUlJbnN0YW5jZU1hbmFnZXIge1xuICBwcml2YXRlIHBsYXllcldyYXBwZXI6IFBsYXllcldyYXBwZXI7XG4gIHByaXZhdGUgdWk6IFVJQ29udGFpbmVyO1xuICBwcml2YXRlIGNvbmZpZzogSW50ZXJuYWxVSUNvbmZpZztcbiAgcHJpdmF0ZSBzdWJ0aXRsZVNldHRpbmdzTWFuYWdlcjogU3VidGl0bGVTZXR0aW5nc01hbmFnZXI7XG4gIHByb3RlY3RlZCBzcGF0aWFsTmF2aWdhdGlvbj86IFNwYXRpYWxOYXZpZ2F0aW9uO1xuXG4gIHByaXZhdGUgZXZlbnRzID0ge1xuICAgIG9uQ29uZmlndXJlZDogbmV3IEV2ZW50RGlzcGF0Y2hlcjxVSUNvbnRhaW5lciwgTm9BcmdzPigpLFxuICAgIG9uU2VlazogbmV3IEV2ZW50RGlzcGF0Y2hlcjxTZWVrQmFyLCBOb0FyZ3M+KCksXG4gICAgb25TZWVrUHJldmlldzogbmV3IEV2ZW50RGlzcGF0Y2hlcjxTZWVrQmFyLCBTZWVrUHJldmlld0FyZ3M+KCksXG4gICAgb25TZWVrZWQ6IG5ldyBFdmVudERpc3BhdGNoZXI8U2Vla0JhciwgTm9BcmdzPigpLFxuICAgIG9uQ29tcG9uZW50U2hvdzogbmV3IEV2ZW50RGlzcGF0Y2hlcjxDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPiwgTm9BcmdzPigpLFxuICAgIG9uQ29tcG9uZW50SGlkZTogbmV3IEV2ZW50RGlzcGF0Y2hlcjxDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPiwgTm9BcmdzPigpLFxuICAgIG9uQ29tcG9uZW50Vmlld01vZGVDaGFuZ2VkOiBuZXcgRXZlbnREaXNwYXRjaGVyPENvbXBvbmVudDxDb21wb25lbnRDb25maWc+LCBWaWV3TW9kZUNoYW5nZWRFdmVudEFyZ3M+KCksXG4gICAgb25Db250cm9sc1Nob3c6IG5ldyBFdmVudERpc3BhdGNoZXI8VUlDb250YWluZXIsIE5vQXJncz4oKSxcbiAgICBvblByZXZpZXdDb250cm9sc0hpZGU6IG5ldyBFdmVudERpc3BhdGNoZXI8VUlDb250YWluZXIsIENhbmNlbEV2ZW50QXJncz4oKSxcbiAgICBvbkNvbnRyb2xzSGlkZTogbmV3IEV2ZW50RGlzcGF0Y2hlcjxVSUNvbnRhaW5lciwgTm9BcmdzPigpLFxuICAgIG9uUmVsZWFzZTogbmV3IEV2ZW50RGlzcGF0Y2hlcjxVSUNvbnRhaW5lciwgTm9BcmdzPigpLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllcjogUGxheWVyQVBJLCB1aTogVUlDb250YWluZXIsIGNvbmZpZzogSW50ZXJuYWxVSUNvbmZpZywgc3VidGl0bGVTZXR0aW5nc01hbmFnZXI6IFN1YnRpdGxlU2V0dGluZ3NNYW5hZ2VyLCBzcGF0aWFsTmF2aWdhdGlvbj86IFNwYXRpYWxOYXZpZ2F0aW9uKSB7XG4gICAgdGhpcy5wbGF5ZXJXcmFwcGVyID0gbmV3IFBsYXllcldyYXBwZXIocGxheWVyKTtcbiAgICB0aGlzLnVpID0gdWk7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5zdWJ0aXRsZVNldHRpbmdzTWFuYWdlciA9IHN1YnRpdGxlU2V0dGluZ3NNYW5hZ2VyO1xuICAgIHRoaXMuc3BhdGlhbE5hdmlnYXRpb24gPSBzcGF0aWFsTmF2aWdhdGlvbjtcbiAgfVxuXG4gIGdldFN1YnRpdGxlU2V0dGluZ3NNYW5hZ2VyKCkge1xuICAgIHJldHVybiB0aGlzLnN1YnRpdGxlU2V0dGluZ3NNYW5hZ2VyO1xuICB9XG5cbiAgZ2V0Q29uZmlnKCk6IEludGVybmFsVUlDb25maWcge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZztcbiAgfVxuXG4gIGdldFVJKCk6IFVJQ29udGFpbmVyIHtcbiAgICByZXR1cm4gdGhpcy51aTtcbiAgfVxuXG4gIGdldFBsYXllcigpOiBQbGF5ZXJBUEkge1xuICAgIHJldHVybiB0aGlzLnBsYXllcldyYXBwZXIuZ2V0UGxheWVyKCk7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiB0aGUgVUkgaXMgZnVsbHkgY29uZmlndXJlZCBhbmQgYWRkZWQgdG8gdGhlIERPTS5cbiAgICogQHJldHVybnMge0V2ZW50RGlzcGF0Y2hlcn1cbiAgICovXG4gIGdldCBvbkNvbmZpZ3VyZWQoKTogRXZlbnREaXNwYXRjaGVyPFVJQ29udGFpbmVyLCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5ldmVudHMub25Db25maWd1cmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHdoZW4gYSBzZWVrIHN0YXJ0cy5cbiAgICogQHJldHVybnMge0V2ZW50RGlzcGF0Y2hlcn1cbiAgICovXG4gIGdldCBvblNlZWsoKTogRXZlbnREaXNwYXRjaGVyPFNlZWtCYXIsIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLmV2ZW50cy5vblNlZWs7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiB0aGUgc2VlayB0aW1lbGluZSBpcyBzY3J1YmJlZC5cbiAgICogQHJldHVybnMge0V2ZW50RGlzcGF0Y2hlcn1cbiAgICovXG4gIGdldCBvblNlZWtQcmV2aWV3KCk6IEV2ZW50RGlzcGF0Y2hlcjxTZWVrQmFyLCBTZWVrUHJldmlld0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5ldmVudHMub25TZWVrUHJldmlldztcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB3aGVuIGEgc2VlayBpcyBmaW5pc2hlZC5cbiAgICogQHJldHVybnMge0V2ZW50RGlzcGF0Y2hlcn1cbiAgICovXG4gIGdldCBvblNlZWtlZCgpOiBFdmVudERpc3BhdGNoZXI8U2Vla0JhciwgTm9BcmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRzLm9uU2Vla2VkO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHdoZW4gYSBjb21wb25lbnQgaXMgc2hvd2luZy5cbiAgICogQHJldHVybnMge0V2ZW50RGlzcGF0Y2hlcn1cbiAgICovXG4gIGdldCBvbkNvbXBvbmVudFNob3coKTogRXZlbnREaXNwYXRjaGVyPENvbXBvbmVudDxDb21wb25lbnRDb25maWc+LCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5ldmVudHMub25Db21wb25lbnRTaG93O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHdoZW4gYSBjb21wb25lbnQgaXMgaGlkaW5nLlxuICAgKiBAcmV0dXJucyB7RXZlbnREaXNwYXRjaGVyfVxuICAgKi9cbiAgZ2V0IG9uQ29tcG9uZW50SGlkZSgpOiBFdmVudERpc3BhdGNoZXI8Q29tcG9uZW50PENvbXBvbmVudENvbmZpZz4sIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLmV2ZW50cy5vbkNvbXBvbmVudEhpZGU7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiB0aGUgVUkgY29udHJvbHMgYXJlIHNob3dpbmcuXG4gICAqIEByZXR1cm5zIHtFdmVudERpc3BhdGNoZXJ9XG4gICAqL1xuICBnZXQgb25Db250cm9sc1Nob3coKTogRXZlbnREaXNwYXRjaGVyPFVJQ29udGFpbmVyLCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5ldmVudHMub25Db250cm9sc1Nob3c7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgYmVmb3JlIHRoZSBVSSBjb250cm9scyBhcmUgaGlkaW5nIHRvIGNoZWNrIGlmIHRoZXkgYXJlIGFsbG93ZWQgdG8gaGlkZS5cbiAgICogQHJldHVybnMge0V2ZW50RGlzcGF0Y2hlcn1cbiAgICovXG4gIGdldCBvblByZXZpZXdDb250cm9sc0hpZGUoKTogRXZlbnREaXNwYXRjaGVyPFVJQ29udGFpbmVyLCBDYW5jZWxFdmVudEFyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5ldmVudHMub25QcmV2aWV3Q29udHJvbHNIaWRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHdoZW4gdGhlIFVJIGNvbnRyb2xzIGFyZSBoaWRpbmcuXG4gICAqIEByZXR1cm5zIHtFdmVudERpc3BhdGNoZXJ9XG4gICAqL1xuICBnZXQgb25Db250cm9sc0hpZGUoKTogRXZlbnREaXNwYXRjaGVyPFVJQ29udGFpbmVyLCBOb0FyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5ldmVudHMub25Db250cm9sc0hpZGU7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiB0aGUgVUkgY29udHJvbHMgYXJlIHJlbGVhc2VkLlxuICAgKiBAcmV0dXJucyB7RXZlbnREaXNwYXRjaGVyfVxuICAgKi9cbiAgZ2V0IG9uUmVsZWFzZSgpOiBFdmVudERpc3BhdGNoZXI8VUlDb250YWluZXIsIE5vQXJncz4ge1xuICAgIHJldHVybiB0aGlzLmV2ZW50cy5vblJlbGVhc2U7XG4gIH1cblxuICBnZXQgb25Db21wb25lbnRWaWV3TW9kZUNoYW5nZWQoKTogRXZlbnREaXNwYXRjaGVyPENvbXBvbmVudDxDb21wb25lbnRDb25maWc+LCBWaWV3TW9kZUNoYW5nZWRFdmVudEFyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5ldmVudHMub25Db21wb25lbnRWaWV3TW9kZUNoYW5nZWQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgY2xlYXJFdmVudEhhbmRsZXJzKCk6IHZvaWQge1xuICAgIHRoaXMucGxheWVyV3JhcHBlci5jbGVhckV2ZW50SGFuZGxlcnMoKTtcblxuICAgIGxldCBldmVudHMgPSA8YW55PnRoaXMuZXZlbnRzOyAvLyBhdm9pZCBUUzcwMTdcbiAgICBmb3IgKGxldCBldmVudCBpbiBldmVudHMpIHtcbiAgICAgIGxldCBkaXNwYXRjaGVyID0gPEV2ZW50RGlzcGF0Y2hlcjxPYmplY3QsIE9iamVjdD4+ZXZlbnRzW2V2ZW50XTtcbiAgICAgIGRpc3BhdGNoZXIudW5zdWJzY3JpYmVBbGwoKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBFeHRlbmRzIHRoZSB7QGxpbmsgVUlJbnN0YW5jZU1hbmFnZXJ9IGZvciBpbnRlcm5hbCB1c2UgaW4gdGhlIHtAbGluayBVSU1hbmFnZXJ9IGFuZCBwcm92aWRlcyBhY2Nlc3MgdG8gZnVuY3Rpb25hbGl0eVxuICogdGhhdCBjb21wb25lbnRzIHJlY2VpdmluZyBhIHJlZmVyZW5jZSB0byB0aGUge0BsaW5rIFVJSW5zdGFuY2VNYW5hZ2VyfSBzaG91bGQgbm90IGhhdmUgYWNjZXNzIHRvLlxuICovXG5jbGFzcyBJbnRlcm5hbFVJSW5zdGFuY2VNYW5hZ2VyIGV4dGVuZHMgVUlJbnN0YW5jZU1hbmFnZXIge1xuXG4gIHByaXZhdGUgY29uZmlndXJlZDogYm9vbGVhbjtcbiAgcHJpdmF0ZSByZWxlYXNlZDogYm9vbGVhbjtcblxuICBnZXRXcmFwcGVkUGxheWVyKCk6IFdyYXBwZWRQbGF5ZXIge1xuICAgIC8vIFRPRE8gZmluZCBhIG5vbi1oYWNreSB3YXkgdG8gcHJvdmlkZSB0aGUgV3JhcHBlZFBsYXllciB0byB0aGUgVUlNYW5hZ2VyIHdpdGhvdXQgZXhwb3J0aW5nIGl0XG4gICAgLy8gZ2V0UGxheWVyKCkgYWN0dWFsbHkgcmV0dXJucyB0aGUgV3JhcHBlZFBsYXllciBidXQgaXRzIHJldHVybiB0eXBlIGlzIHNldCB0byBQbGF5ZXIgc28gdGhlIFdyYXBwZWRQbGF5ZXIgZG9lc1xuICAgIC8vIG5vdCBuZWVkIHRvIGJlIGV4cG9ydGVkXG4gICAgcmV0dXJuIDxXcmFwcGVkUGxheWVyPnRoaXMuZ2V0UGxheWVyKCk7XG4gIH1cblxuICBjb25maWd1cmVDb250cm9scygpOiB2b2lkIHtcbiAgICB0aGlzLmNvbmZpZ3VyZUNvbnRyb2xzVHJlZSh0aGlzLmdldFVJKCkpO1xuICAgIHRoaXMuY29uZmlndXJlZCA9IHRydWU7XG4gIH1cblxuICBpc0NvbmZpZ3VyZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlndXJlZDtcbiAgfVxuXG4gIHByaXZhdGUgY29uZmlndXJlQ29udHJvbHNUcmVlKGNvbXBvbmVudDogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4pIHtcbiAgICBsZXQgY29uZmlndXJlZENvbXBvbmVudHM6IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+W10gPSBbXTtcblxuICAgIFVJVXRpbHMudHJhdmVyc2VUcmVlKGNvbXBvbmVudCwgKGNvbXBvbmVudCkgPT4ge1xuICAgICAgLy8gRmlyc3QsIGNoZWNrIGlmIHdlIGhhdmUgYWxyZWFkeSBjb25maWd1cmVkIGEgY29tcG9uZW50LCBhbmQgdGhyb3cgYW4gZXJyb3IgaWYgd2UgZGlkLiBNdWx0aXBsZSBjb25maWd1cmF0aW9uXG4gICAgICAvLyBvZiB0aGUgc2FtZSBjb21wb25lbnQgbGVhZHMgdG8gdW5leHBlY3RlZCBVSSBiZWhhdmlvci4gQWxzbywgYSBjb21wb25lbnQgdGhhdCBpcyBpbiB0aGUgVUkgdHJlZSBtdWx0aXBsZVxuICAgICAgLy8gdGltZXMgaGludHMgYXQgYSB3cm9uZyBVSSBzdHJ1Y3R1cmUuXG4gICAgICAvLyBXZSBjb3VsZCBqdXN0IHNraXAgY29uZmlndXJhdGlvbiBpbiBzdWNoIGEgY2FzZSBhbmQgbm90IHRocm93IGFuIGV4Y2VwdGlvbiwgYnV0IGVuZm9yY2luZyBhIGNsZWFuIFVJIHRyZWVcbiAgICAgIC8vIHNlZW1zIGxpa2UgdGhlIGJldHRlciBjaG9pY2UuXG4gICAgICBmb3IgKGxldCBjb25maWd1cmVkQ29tcG9uZW50IG9mIGNvbmZpZ3VyZWRDb21wb25lbnRzKSB7XG4gICAgICAgIGlmIChjb25maWd1cmVkQ29tcG9uZW50ID09PSBjb21wb25lbnQpIHtcbiAgICAgICAgICAvLyBXcml0ZSB0aGUgY29tcG9uZW50IHRvIHRoZSBjb25zb2xlIHRvIHNpbXBsaWZ5IGlkZW50aWZpY2F0aW9uIG9mIHRoZSBjdWxwcml0XG4gICAgICAgICAgLy8gKGUuZy4gYnkgaW5zcGVjdGluZyB0aGUgY29uZmlnKVxuICAgICAgICAgIGlmIChjb25zb2xlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdDaXJjdWxhciByZWZlcmVuY2UgaW4gVUkgdHJlZScsIGNvbXBvbmVudCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQWRkaXRpb25hbGx5IHRocm93IGFuIGVycm9yLCBiZWNhdXNlIHRoaXMgY2FzZSBtdXN0IG5vdCBoYXBwZW4gYW5kIGxlYWRzIHRvIHVuZXhwZWN0ZWQgVUkgYmVoYXZpb3IuXG4gICAgICAgICAgdGhyb3cgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBpbiBVSSB0cmVlOiAnICsgY29tcG9uZW50LmNvbnN0cnVjdG9yLm5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbXBvbmVudC5pbml0aWFsaXplKCk7XG4gICAgICBjb21wb25lbnQuY29uZmlndXJlKHRoaXMuZ2V0UGxheWVyKCksIHRoaXMpO1xuICAgICAgY29uZmlndXJlZENvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgcmVsZWFzZUNvbnRyb2xzKCk6IHZvaWQge1xuICAgIC8vIERvIG5vdCBjYWxsIHJlbGVhc2UgbWV0aG9kcyBpZiB0aGUgY29tcG9uZW50cyBoYXZlIG5ldmVyIGJlZW4gY29uZmlndXJlZDsgdGhpcyBjYW4gcmVzdWx0IGluIGV4Y2VwdGlvbnNcbiAgICBpZiAodGhpcy5jb25maWd1cmVkKSB7XG4gICAgICB0aGlzLm9uUmVsZWFzZS5kaXNwYXRjaCh0aGlzLmdldFVJKCkpO1xuICAgICAgdGhpcy5yZWxlYXNlQ29udHJvbHNUcmVlKHRoaXMuZ2V0VUkoKSk7XG4gICAgICB0aGlzLmNvbmZpZ3VyZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5zcGF0aWFsTmF2aWdhdGlvbj8ucmVsZWFzZSgpO1xuICAgIHRoaXMucmVsZWFzZWQgPSB0cnVlO1xuICB9XG5cbiAgaXNSZWxlYXNlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5yZWxlYXNlZDtcbiAgfVxuXG4gIHByaXZhdGUgcmVsZWFzZUNvbnRyb2xzVHJlZShjb21wb25lbnQ6IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+KSB7XG4gICAgY29tcG9uZW50LnJlbGVhc2UoKTtcblxuICAgIGlmIChjb21wb25lbnQgaW5zdGFuY2VvZiBDb250YWluZXIpIHtcbiAgICAgIGZvciAobGV0IGNoaWxkQ29tcG9uZW50IG9mIGNvbXBvbmVudC5nZXRDb21wb25lbnRzKCkpIHtcbiAgICAgICAgdGhpcy5yZWxlYXNlQ29udHJvbHNUcmVlKGNoaWxkQ29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjbGVhckV2ZW50SGFuZGxlcnMoKTogdm9pZCB7XG4gICAgc3VwZXIuY2xlYXJFdmVudEhhbmRsZXJzKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBFeHRlbmRlZCBpbnRlcmZhY2Ugb2YgdGhlIHtAbGluayBQbGF5ZXJ9IGZvciB1c2UgaW4gdGhlIFVJLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFdyYXBwZWRQbGF5ZXIgZXh0ZW5kcyBQbGF5ZXJBUEkge1xuICAvKipcbiAgICogRmlyZXMgYW4gZXZlbnQgb24gdGhlIHBsYXllciB0aGF0IHRhcmdldHMgYWxsIGhhbmRsZXJzIGluIHRoZSBVSSBidXQgbmV2ZXIgZW50ZXJzIHRoZSByZWFsIHBsYXllci5cbiAgICogQHBhcmFtIGV2ZW50IHRoZSBldmVudCB0byBmaXJlXG4gICAqIEBwYXJhbSBkYXRhIGRhdGEgdG8gc2VuZCB3aXRoIHRoZSBldmVudFxuICAgKi9cbiAgZmlyZUV2ZW50SW5VSShldmVudDogUGxheWVyRXZlbnQsIGRhdGE6IHt9KTogdm9pZDtcbn1cblxuLyoqXG4gKiBXcmFwcyB0aGUgcGxheWVyIHRvIHRyYWNrIGV2ZW50IGhhbmRsZXJzIGFuZCBwcm92aWRlIGEgc2ltcGxlIG1ldGhvZCB0byByZW1vdmUgYWxsIHJlZ2lzdGVyZWQgZXZlbnRcbiAqIGhhbmRsZXJzIGZyb20gdGhlIHBsYXllci5cbiAqXG4gKiBAY2F0ZWdvcnkgVXRpbHNcbiAqL1xuZXhwb3J0IGNsYXNzIFBsYXllcldyYXBwZXIge1xuXG4gIHByaXZhdGUgcGxheWVyOiBQbGF5ZXJBUEk7XG4gIHByaXZhdGUgd3JhcHBlcjogV3JhcHBlZFBsYXllcjtcblxuICBwcml2YXRlIGV2ZW50SGFuZGxlcnM6IHsgW2V2ZW50VHlwZTogc3RyaW5nXTogUGxheWVyRXZlbnRDYWxsYmFja1tdOyB9ID0ge307XG5cbiAgY29uc3RydWN0b3IocGxheWVyOiBQbGF5ZXJBUEkpIHtcbiAgICB0aGlzLnBsYXllciA9IHBsYXllcjtcblxuICAgIC8vIENvbGxlY3QgYWxsIG1lbWJlcnMgb2YgdGhlIHBsYXllciAocHVibGljIEFQSSBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzIG9mIHRoZSBwbGF5ZXIpXG4gICAgY29uc3Qgb2JqZWN0UHJvdG9Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT2JqZWN0LmdldFByb3RvdHlwZU9mKHt9KSk7XG4gICAgY29uc3QgbmFtZXNUb0lnbm9yZSA9IFsnY29uc3RydWN0b3InLCAuLi5vYmplY3RQcm90b1Byb3BlcnR5TmFtZXNdO1xuICAgIGNvbnN0IG1lbWJlcnMgPSBnZXRBbGxQcm9wZXJ0eU5hbWVzKHBsYXllcikuZmlsdGVyKG5hbWUgPT4gbmFtZXNUb0lnbm9yZS5pbmRleE9mKG5hbWUpID09PSAtMSk7XG4gICAgLy8gU3BsaXQgdGhlIG1lbWJlcnMgaW50byBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzXG4gICAgbGV0IG1ldGhvZHMgPSA8YW55W10+W107XG4gICAgbGV0IHByb3BlcnRpZXMgPSA8YW55W10+W107XG5cbiAgICBmb3IgKGxldCBtZW1iZXIgb2YgbWVtYmVycykge1xuICAgICAgaWYgKHR5cGVvZiAoPGFueT5wbGF5ZXIpW21lbWJlcl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgbWV0aG9kcy5wdXNoKG1lbWJlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9wZXJ0aWVzLnB1c2gobWVtYmVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgd3JhcHBlciBvYmplY3RcbiAgICBsZXQgd3JhcHBlciA9IDxhbnk+e307XG5cbiAgICAvLyBBZGQgZnVuY3Rpb24gd3JhcHBlcnMgZm9yIGFsbCBBUEkgbWV0aG9kcyB0aGF0IGRvIG5vdGhpbmcgYnV0IGNhbGxpbmcgdGhlIGJhc2UgbWV0aG9kIG9uIHRoZSBwbGF5ZXJcbiAgICBmb3IgKGxldCBtZXRob2Qgb2YgbWV0aG9kcykge1xuICAgICAgd3JhcHBlclttZXRob2RdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdjYWxsZWQgJyArIG1lbWJlcik7IC8vIHRyYWNrIG1ldGhvZCBjYWxscyBvbiB0aGUgcGxheWVyXG4gICAgICAgIHJldHVybiAoPGFueT5wbGF5ZXIpW21ldGhvZF0uYXBwbHkocGxheWVyLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBBZGQgYWxsIHB1YmxpYyBwcm9wZXJ0aWVzIG9mIHRoZSBwbGF5ZXIgdG8gdGhlIHdyYXBwZXJcbiAgICBmb3IgKGxldCBwcm9wZXJ0eSBvZiBwcm9wZXJ0aWVzKSB7XG4gICAgICAvLyBHZXQgYW4gZXZlbnR1YWxseSBleGlzdGluZyBwcm9wZXJ0eSBkZXNjcmlwdG9yIHRvIGRpZmZlcmVudGlhdGUgYmV0d2VlbiBwbGFpbiBwcm9wZXJ0aWVzIGFuZCBwcm9wZXJ0aWVzIHdpdGhcbiAgICAgIC8vIGdldHRlcnMvc2V0dGVycy5cbiAgICAgIGNvbnN0IHByb3BlcnR5RGVzY3JpcHRvciA9ICgodGFyZ2V0OiBQbGF5ZXJBUEkpID0+IHtcbiAgICAgICAgd2hpbGUgKHRhcmdldCkge1xuICAgICAgICAgIGNvbnN0IHByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgICAgICAgaWYgKHByb3BlcnR5RGVzY3JpcHRvcikge1xuICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5RGVzY3JpcHRvcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIFByb3BlcnR5RGVzY3JpcHRvciBleGlzdHMgb24gYSBjaGlsZCBwcm90b3R5cGUgaW4gY2FzZSB3ZSBoYXZlIGFuIGluaGVyaXRhbmNlIG9mIHRoZSBwbGF5ZXJcbiAgICAgICAgICB0YXJnZXQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfSkocGxheWVyKTtcblxuICAgICAgLy8gSWYgdGhlIHByb3BlcnR5IGhhcyBnZXR0ZXJzL3NldHRlcnMsIHdyYXAgdGhlbSBhY2NvcmRpbmdseS4uLlxuICAgICAgaWYgKHByb3BlcnR5RGVzY3JpcHRvciAmJiAocHJvcGVydHlEZXNjcmlwdG9yLmdldCB8fCBwcm9wZXJ0eURlc2NyaXB0b3Iuc2V0KSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod3JhcHBlciwgcHJvcGVydHksIHtcbiAgICAgICAgICBnZXQ6ICgpID0+IHByb3BlcnR5RGVzY3JpcHRvci5nZXQuY2FsbChwbGF5ZXIpLFxuICAgICAgICAgIHNldDogKHZhbHVlOiBhbnkpID0+IHByb3BlcnR5RGVzY3JpcHRvci5zZXQuY2FsbChwbGF5ZXIsIHZhbHVlKSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyAuLi4gZWxzZSBqdXN0IHRyYW5zZmVyIHRoZSBwcm9wZXJ0eSB0byB0aGUgd3JhcHBlclxuICAgICAgZWxzZSB7XG4gICAgICAgIHdyYXBwZXJbcHJvcGVydHldID0gKDxhbnk+cGxheWVyKVtwcm9wZXJ0eV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRXhwbGljaXRseSBhZGQgYSB3cmFwcGVyIG1ldGhvZCBmb3IgJ29uJyB0aGF0IGFkZHMgYWRkZWQgZXZlbnQgaGFuZGxlcnMgdG8gdGhlIGV2ZW50IGxpc3RcbiAgICB3cmFwcGVyLm9uID0gKGV2ZW50VHlwZTogUGxheWVyRXZlbnQsIGNhbGxiYWNrOiBQbGF5ZXJFdmVudENhbGxiYWNrKSA9PiB7XG4gICAgICBwbGF5ZXIub24oZXZlbnRUeXBlLCBjYWxsYmFjayk7XG5cbiAgICAgIGlmICghdGhpcy5ldmVudEhhbmRsZXJzW2V2ZW50VHlwZV0pIHtcbiAgICAgICAgdGhpcy5ldmVudEhhbmRsZXJzW2V2ZW50VHlwZV0gPSBbXTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5ldmVudEhhbmRsZXJzW2V2ZW50VHlwZV0ucHVzaChjYWxsYmFjayk7XG5cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH07XG5cbiAgICAvLyBFeHBsaWNpdGx5IGFkZCBhIHdyYXBwZXIgbWV0aG9kIGZvciAnb2ZmJyB0aGF0IHJlbW92ZXMgcmVtb3ZlZCBldmVudCBoYW5kbGVycyBmcm9tIHRoZSBldmVudCBsaXN0XG4gICAgd3JhcHBlci5vZmYgPSAoZXZlbnRUeXBlOiBQbGF5ZXJFdmVudCwgY2FsbGJhY2s6IFBsYXllckV2ZW50Q2FsbGJhY2spID0+IHtcbiAgICAgIHBsYXllci5vZmYoZXZlbnRUeXBlLCBjYWxsYmFjayk7XG5cbiAgICAgIGlmICh0aGlzLmV2ZW50SGFuZGxlcnNbZXZlbnRUeXBlXSkge1xuICAgICAgICBBcnJheVV0aWxzLnJlbW92ZSh0aGlzLmV2ZW50SGFuZGxlcnNbZXZlbnRUeXBlXSwgY2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9O1xuXG4gICAgd3JhcHBlci5maXJlRXZlbnRJblVJID0gKGV2ZW50OiBQbGF5ZXJFdmVudCwgZGF0YToge30pID0+IHtcbiAgICAgIGlmICh0aGlzLmV2ZW50SGFuZGxlcnNbZXZlbnRdKSB7IC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBoYW5kbGVycyBmb3IgdGhpcyBldmVudCByZWdpc3RlcmVkXG4gICAgICAgIC8vIEV4dGVuZCB0aGUgZGF0YSBvYmplY3Qgd2l0aCBkZWZhdWx0IHZhbHVlcyB0byBjb252ZXJ0IGl0IHRvIGEge0BsaW5rIFBsYXllckV2ZW50QmFzZX0gb2JqZWN0LlxuICAgICAgICBsZXQgcGxheWVyRXZlbnREYXRhID0gPFBsYXllckV2ZW50QmFzZT5PYmplY3QuYXNzaWduKHt9LCB7XG4gICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICAgIHR5cGU6IGV2ZW50LFxuICAgICAgICAgIC8vIEFkZCBhIG1hcmtlciBwcm9wZXJ0eSBzbyB0aGUgVUkgY2FuIGRldGVjdCBVSS1pbnRlcm5hbCBwbGF5ZXIgZXZlbnRzXG4gICAgICAgICAgdWlTb3VyY2VkOiB0cnVlLFxuICAgICAgICB9LCBkYXRhKTtcblxuICAgICAgICAvLyBFeGVjdXRlIHRoZSByZWdpc3RlcmVkIGNhbGxiYWNrc1xuICAgICAgICBmb3IgKGxldCBjYWxsYmFjayBvZiB0aGlzLmV2ZW50SGFuZGxlcnNbZXZlbnRdKSB7XG4gICAgICAgICAgY2FsbGJhY2socGxheWVyRXZlbnREYXRhKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLndyYXBwZXIgPSA8V3JhcHBlZFBsYXllcj53cmFwcGVyO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSB3cmFwcGVkIHBsYXllciBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBvbiBwbGFjZSBvZiB0aGUgbm9ybWFsIHBsYXllciBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtXcmFwcGVkUGxheWVyfSBhIHdyYXBwZWQgcGxheWVyXG4gICAqL1xuICBnZXRQbGF5ZXIoKTogV3JhcHBlZFBsYXllciB7XG4gICAgcmV0dXJuIHRoaXMud3JhcHBlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhcnMgYWxsIHJlZ2lzdGVyZWQgZXZlbnQgaGFuZGxlcnMgZnJvbSB0aGUgcGxheWVyIHRoYXQgd2VyZSBhZGRlZCB0aHJvdWdoIHRoZSB3cmFwcGVkIHBsYXllci5cbiAgICovXG4gIGNsZWFyRXZlbnRIYW5kbGVycygpOiB2b2lkIHtcbiAgICB0cnkge1xuICAgICAgLy8gQ2FsbCB0aGUgcGxheWVyIEFQSSB0byBjaGVjayBpZiB0aGUgaW5zdGFuY2UgaXMgc3RpbGwgdmFsaWQgb3IgYWxyZWFkeSBkZXN0cm95ZWQuXG4gICAgICAvLyBUaGlzIGNhbiBiZSBhbnkgY2FsbCB0aHJvd2luZyB0aGUgUGxheWVyQVBJTm90QXZhaWxhYmxlRXJyb3Igd2hlbiB0aGUgcGxheWVyIGluc3RhbmNlIGlzIGRlc3Ryb3llZC5cbiAgICAgIHRoaXMucGxheWVyLmdldFNvdXJjZSgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiB0aGlzLnBsYXllci5leHBvcnRzLlBsYXllckFQSU5vdEF2YWlsYWJsZUVycm9yKSB7XG4gICAgICAgIC8vIFdlIGhhdmUgZGV0ZWN0ZWQgdGhhdCB0aGUgcGxheWVyIGluc3RhbmNlIGlzIGFscmVhZHkgZGVzdHJveWVkLCBzbyB3ZSBjbGVhciB0aGUgZXZlbnQgaGFuZGxlcnMgdG8gYXZvaWRcbiAgICAgICAgLy8gZXZlbnQgaGFuZGxlciB1bnN1YnNjcmlwdGlvbiBhdHRlbXB0cyAod2hpY2ggd291bGQgcmVzdWx0IGluIFBsYXllckFQSU5vdEF2YWlsYWJsZUVycm9yIGVycm9ycykuXG4gICAgICAgIHRoaXMuZXZlbnRIYW5kbGVycyA9IHt9O1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAobGV0IGV2ZW50VHlwZSBpbiB0aGlzLmV2ZW50SGFuZGxlcnMpIHtcbiAgICAgIGZvciAobGV0IGNhbGxiYWNrIG9mIHRoaXMuZXZlbnRIYW5kbGVyc1tldmVudFR5cGVdKSB7XG4gICAgICAgIHRoaXMucGxheWVyLm9mZihldmVudFR5cGUgYXMgUGxheWVyRXZlbnQsIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QWxsUHJvcGVydHlOYW1lcyh0YXJnZXQ6IE9iamVjdCk6IHN0cmluZ1tdIHtcbiAgbGV0IG5hbWVzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIHdoaWxlICh0YXJnZXQpIHtcbiAgICBjb25zdCBuZXdOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCkuZmlsdGVyKG5hbWUgPT4gbmFtZXMuaW5kZXhPZihuYW1lKSA9PT0gLTEpO1xuICAgIG5hbWVzID0gbmFtZXMuY29uY2F0KG5ld05hbWVzKTtcbiAgICAvLyBnbyB1cCBwcm90b3R5cGUgY2hhaW5cbiAgICB0YXJnZXQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KTtcbiAgfVxuXG4gIHJldHVybiBuYW1lcztcbn1cbiIsImltcG9ydCB7Q29tcG9uZW50LCBDb21wb25lbnRDb25maWd9IGZyb20gJy4vY29tcG9uZW50cy9jb21wb25lbnQnO1xuaW1wb3J0IHtDb250YWluZXJ9IGZyb20gJy4vY29tcG9uZW50cy9jb250YWluZXInO1xuXG4vKipcbiAqIEBjYXRlZ29yeSBVdGlsc1xuICovXG5leHBvcnQgbmFtZXNwYWNlIFVJVXRpbHMge1xuICBleHBvcnQgaW50ZXJmYWNlIFRyZWVUcmF2ZXJzYWxDYWxsYmFjayB7XG4gICAgKGNvbXBvbmVudDogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4sIHBhcmVudD86IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+KTogdm9pZDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiB0cmF2ZXJzZVRyZWUoY29tcG9uZW50OiBDb21wb25lbnQ8Q29tcG9uZW50Q29uZmlnPiwgdmlzaXQ6IFRyZWVUcmF2ZXJzYWxDYWxsYmFjayk6IHZvaWQge1xuICAgIGxldCByZWN1cnNpdmVUcmVlV2Fsa2VyID0gKGNvbXBvbmVudDogQ29tcG9uZW50PENvbXBvbmVudENvbmZpZz4sIHBhcmVudD86IENvbXBvbmVudDxDb21wb25lbnRDb25maWc+KSA9PiB7XG4gICAgICB2aXNpdChjb21wb25lbnQsIHBhcmVudCk7XG5cbiAgICAgIC8vIElmIHRoZSBjdXJyZW50IGNvbXBvbmVudCBpcyBhIGNvbnRhaW5lciwgdmlzaXQgaXQncyBjaGlsZHJlblxuICAgICAgaWYgKGNvbXBvbmVudCBpbnN0YW5jZW9mIENvbnRhaW5lcikge1xuICAgICAgICBmb3IgKGxldCBjaGlsZENvbXBvbmVudCBvZiBjb21wb25lbnQuZ2V0Q29tcG9uZW50cygpKSB7XG4gICAgICAgICAgcmVjdXJzaXZlVHJlZVdhbGtlcihjaGlsZENvbXBvbmVudCwgY29tcG9uZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBXYWxrIGFuZCBjb25maWd1cmUgdGhlIGNvbXBvbmVudCB0cmVlXG4gICAgcmVjdXJzaXZlVHJlZVdhbGtlcihjb21wb25lbnQpO1xuICB9XG5cbiAgLy8gRnJvbTogaHR0cHM6Ly9naXRodWIuY29tL25mcmllbmQvdHMta2V5Y29kZS1lbnVtL2Jsb2IvbWFzdGVyL0tleS5lbnVtLnRzXG4gIGV4cG9ydCBlbnVtIEtleUNvZGUge1xuICAgIExlZnRBcnJvdyA9IDM3LFxuICAgIFVwQXJyb3cgPSAzOCxcbiAgICBSaWdodEFycm93ID0gMzksXG4gICAgRG93bkFycm93ID0gNDAsXG4gICAgU3BhY2UgPSAzMixcbiAgICBFbmQgPSAzNSxcbiAgICBIb21lID0gMzYsXG4gIH1cbn1cbiIsImltcG9ydCB7IEV2ZW50LCBFdmVudERpc3BhdGNoZXIgfSBmcm9tICcuL2V2ZW50ZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBQbGF5ZXJBUEkgfSBmcm9tICdiaXRtb3Zpbi1wbGF5ZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIFZvbHVtZVNldHRpbmdDaGFuZ2VkQXJncyB7XG4gIHZvbHVtZTogbnVtYmVyO1xuICBtdXRlZDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBDYW4gYmUgdXNlZCB0byBjZW50cmFsbHkgbWFuYWdlIGFuZCBjb250cm9sIHRoZSB2b2x1bWUgYW5kIG11dGUgc3RhdGUgb2YgdGhlIHBsYXllciBmcm9tIG11bHRpcGxlIGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBWb2x1bWVDb250cm9sbGVyIHtcblxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBpc3N1ZXJOYW1lID0gJ3VpLXZvbHVtZWNvbnRyb2xsZXInO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgZXZlbnRzID0ge1xuICAgIG9uQ2hhbmdlZDogbmV3IEV2ZW50RGlzcGF0Y2hlcjxWb2x1bWVDb250cm9sbGVyLCBWb2x1bWVTZXR0aW5nQ2hhbmdlZEFyZ3M+KCksXG4gIH07XG5cbiAgcHJpdmF0ZSBzdG9yZWRWb2x1bWU6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHBsYXllcjogUGxheWVyQVBJKSB7XG4gICAgdGhpcy5zdG9yZVZvbHVtZSgpO1xuXG4gICAgY29uc3QgaGFuZGxlciA9ICgpID0+IHtcbiAgICAgIHRoaXMub25DaGFuZ2VkRXZlbnQoKTtcbiAgICB9O1xuXG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlNvdXJjZUxvYWRlZCwgaGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlZvbHVtZUNoYW5nZWQsIGhhbmRsZXIpO1xuICAgIHBsYXllci5vbihwbGF5ZXIuZXhwb3J0cy5QbGF5ZXJFdmVudC5NdXRlZCwgaGFuZGxlcik7XG4gICAgcGxheWVyLm9uKHBsYXllci5leHBvcnRzLlBsYXllckV2ZW50LlVubXV0ZWQsIGhhbmRsZXIpO1xuICB9XG5cbiAgc2V0Vm9sdW1lKHZvbHVtZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5wbGF5ZXIuc2V0Vm9sdW1lKHZvbHVtZSwgVm9sdW1lQ29udHJvbGxlci5pc3N1ZXJOYW1lKTtcbiAgfVxuXG4gIGdldFZvbHVtZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnBsYXllci5nZXRWb2x1bWUoKTtcbiAgfVxuXG4gIHNldE11dGVkKG11dGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKG11dGVkKSB7XG4gICAgICB0aGlzLnBsYXllci5tdXRlKFZvbHVtZUNvbnRyb2xsZXIuaXNzdWVyTmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGxheWVyLnVubXV0ZShWb2x1bWVDb250cm9sbGVyLmlzc3Vlck5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIHRvZ2dsZU11dGVkKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzTXV0ZWQoKSB8fCB0aGlzLmdldFZvbHVtZSgpID09PSAwKSB7XG4gICAgICAvLyBVbm11dGluZyBmcm9tIHRoZSBtdXRlIG9yIHplcm8tdm9sdW1lIHN0YXRlIHJlY2FsbHMgdGhlIHByZXZpb3VzbHkgc2F2ZWQgdm9sdW1lIHNldHRpbmcuIFNldHRpbmcgdGhlXG4gICAgICAvLyB2b2x1bWUgYXV0b21hdGljYWxseSB1bm11dGVzIHRoZSBwbGF5ZXIgaW4gdjcuXG4gICAgICB0aGlzLnJlY2FsbFZvbHVtZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldE11dGVkKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIGlzTXV0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucGxheWVyLmlzTXV0ZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9yZXMgKHNhdmVzKSB0aGUgY3VycmVudCB2b2x1bWUgc28gaXQgY2FuIGxhdGVyIGJlIHJlc3RvcmVkIHdpdGgge0BsaW5rIHJlY2FsbFZvbHVtZX0uXG4gICAqL1xuICBzdG9yZVZvbHVtZSgpOiB2b2lkIHtcbiAgICB0aGlzLnN0b3JlZFZvbHVtZSA9IHRoaXMuZ2V0Vm9sdW1lKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVjYWxscyAoc2V0cykgdGhlIHZvbHVtZSBwcmV2aW91c2x5IHN0b3JlZCB3aXRoIHtAbGluayBzdG9yZVZvbHVtZX0uXG4gICAqL1xuICByZWNhbGxWb2x1bWUoKTogdm9pZCB7XG4gICAgdGhpcy5zZXRNdXRlZCh0aGlzLnN0b3JlZFZvbHVtZSA9PT0gMCk7XG4gICAgdGhpcy5zZXRWb2x1bWUodGhpcy5zdG9yZWRWb2x1bWUpO1xuICB9XG5cbiAgc3RhcnRUcmFuc2l0aW9uKCk6IFZvbHVtZVRyYW5zaXRpb24ge1xuICAgIHJldHVybiBuZXcgVm9sdW1lVHJhbnNpdGlvbih0aGlzKTtcbiAgfVxuXG4gIG9uQ2hhbmdlZEV2ZW50KCkge1xuICAgIGNvbnN0IHBsYXllck11dGVkID0gdGhpcy5pc011dGVkKCk7XG4gICAgY29uc3QgcGxheWVyVm9sdW1lID0gdGhpcy5nZXRWb2x1bWUoKTtcblxuICAgIGNvbnN0IHVpTXV0ZWQgPSBwbGF5ZXJNdXRlZCB8fCBwbGF5ZXJWb2x1bWUgPT09IDA7XG4gICAgY29uc3QgdWlWb2x1bWUgPSBwbGF5ZXJNdXRlZCA/IDAgOiBwbGF5ZXJWb2x1bWU7XG5cbiAgICB0aGlzLnN0b3JlVm9sdW1lKCk7XG5cbiAgICB0aGlzLmV2ZW50cy5vbkNoYW5nZWQuZGlzcGF0Y2godGhpcywgeyB2b2x1bWU6IHVpVm9sdW1lLCBtdXRlZDogdWlNdXRlZCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIHZvbHVtZSBzZXR0aW5ncyBoYXZlIGNoYW5nZWQuXG4gICAqL1xuICBnZXQgb25DaGFuZ2VkKCk6IEV2ZW50PFZvbHVtZUNvbnRyb2xsZXIsIFZvbHVtZVNldHRpbmdDaGFuZ2VkQXJncz4ge1xuICAgIHJldHVybiB0aGlzLmV2ZW50cy5vbkNoYW5nZWQuZ2V0RXZlbnQoKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVm9sdW1lVHJhbnNpdGlvbiB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb250cm9sbGVyOiBWb2x1bWVDb250cm9sbGVyKSB7XG4gICAgLy8gU3RvcmUgdGhlIHZvbHVtZSBhdCB0aGUgYmVnaW5uaW5nIG9mIGEgdm9sdW1lIGNoYW5nZSBzbyB3ZSBjYW4gcmVjYWxsIGl0IGxhdGVyIGluIGNhc2Ugd2Ugc2V0IHRoZSB2b2x1bWUgdG9cbiAgICAvLyB6ZXJvIGFuZCBhY3R1YWxseSBtdXRlIHRoZSBwbGF5ZXIuXG4gICAgY29udHJvbGxlci5zdG9yZVZvbHVtZSgpO1xuICB9XG5cbiAgdXBkYXRlKHZvbHVtZTogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8gVXBkYXRlIHRoZSB2b2x1bWUgd2hpbGUgdHJhbnNpdGlvbmluZyBzbyB0aGUgdXNlciBoYXMgYSBcImxpdmUgcHJldmlld1wiIG9mIHRoZSBkZXNpcmVkIHRhcmdldCB2b2x1bWVcbiAgICB0aGlzLmNvbnRyb2xsZXIuc2V0TXV0ZWQoZmFsc2UpO1xuICAgIHRoaXMuY29udHJvbGxlci5zZXRWb2x1bWUodm9sdW1lKTtcbiAgfVxuXG4gIGZpbmlzaCh2b2x1bWU6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh2b2x1bWUgPT09IDApIHtcbiAgICAgIC8vIFdoZW4gdGhlIHZvbHVtZSBpcyB6ZXJvIHdlIGVzc2VudGlhbGx5IG11dGUgdGhlIHZvbHVtZSBzbyB3ZSByZWNhbGwgdGhlIHZvbHVtZSBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgdGhlXG4gICAgICAvLyB0cmFuc2l0aW9uIGFuZCBtdXRlIHRoZSBwbGF5ZXIgaW5zdGVhZC4gUmVjYWxsaW5nIGlzIG5lY2Vzc2FyeSB0byByZXR1cm4gdG8gdGhlIGFjdHVhbCBhdWRpbyB2b2x1bWVcbiAgICAgIC8vIHdoZW4gdW5tdXRpbmcuXG4gICAgICAvLyBXZSBtdXN0IGZpcnN0IHJlY2FsbCB0aGUgdm9sdW1lIGFuZCB0aGVuIG11dGUsIGJlY2F1c2UgcmVjYWxsaW5nIHNldHMgdGhlIHZvbHVtZSBvbiB0aGUgcGxheWVyXG4gICAgICAvLyBhbmQgc2V0dGluZyBhIHBsYXllciB2b2x1bWUgPiAwIHVubXV0ZXMgdGhlIHBsYXllciBpbiB2Ny5cbiAgICAgIHRoaXMuY29udHJvbGxlci5yZWNhbGxWb2x1bWUoKTtcbiAgICAgIHRoaXMuY29udHJvbGxlci5zZXRNdXRlZCh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb250cm9sbGVyLnNldE11dGVkKGZhbHNlKTtcbiAgICAgIHRoaXMuY29udHJvbGxlci5zZXRWb2x1bWUodm9sdW1lKTtcbiAgICAgIHRoaXMuY29udHJvbGxlci5zdG9yZVZvbHVtZSgpO1xuICAgIH1cbiAgfVxufSIsImltcG9ydCB7IFN1YnRpdGxlUmVnaW9uQ29udGFpbmVyLCBTdWJ0aXRsZUxhYmVsIH0gZnJvbSAnLi9jb21wb25lbnRzL3N1YnRpdGxlb3ZlcmxheSc7XG5pbXBvcnQgeyBWVFRQcm9wZXJ0aWVzLCBWVFRSZWdpb25Qcm9wZXJ0aWVzIH0gZnJvbSAnYml0bW92aW4tcGxheWVyL3R5cGVzL3N1YnRpdGxlcy92dHQvQVBJJztcbmltcG9ydCB7IERPTSwgU2l6ZSB9IGZyb20gJy4vZG9tJztcblxuLy8gT3VyIGRlZmF1bHQgaGVpZ2h0IG9mIGEgbGluZVxuY29uc3QgbGluZUhlaWdodCA9IDI4O1xuXG4vLyBEZWZhdWx0IHJlbGF0aXZlIGxpbmUgaGVpZ2h0XG5jb25zdCBsaW5lSGVpZ2h0UGVyY2VudCA9IDU7XG5sZXQgbGluZUNvdW50OiBudW1iZXIgPSAxO1xuXG5jb25zdCBkZWZhdWx0TGluZU51bWJlciA9IDIxOyAvLyBPdXIgZGVmYXVsdCBhbW91bnQgb2YgbGluZXNcblxuZW51bSBEaXJlY3Rpb24ge1xuICBUb3AgPSAndG9wJyxcbiAgQm90dG9tID0gJ2JvdHRvbScsXG4gIExlZnQgPSAnbGVmdCcsXG4gIFJpZ2h0ID0gJ3JpZ2h0Jyxcbn1cblxuZW51bSBWdHRWZXJ0aWNhbFdyaXRpbmcge1xuICBHcm93aW5nUmlnaHQgPSAnbHInLFxuICBHcm93aW5nTGVmdCA9ICdybCcsXG59XG5cbnR5cGUgVmVydGljYWxXcml0aW5nRGlyZWN0aW9uID0gRGlyZWN0aW9uLkxlZnQgfCBEaXJlY3Rpb24uUmlnaHQ7XG5cbmNvbnN0IERpcmVjdGlvblBhaXIgPSBuZXcgTWFwPERpcmVjdGlvbiwgRGlyZWN0aW9uPihbXG4gIFtEaXJlY3Rpb24uVG9wLCBEaXJlY3Rpb24uQm90dG9tXSxcbiAgW0RpcmVjdGlvbi5Cb3R0b20sIERpcmVjdGlvbi5Ub3BdLFxuICBbRGlyZWN0aW9uLkxlZnQsIERpcmVjdGlvbi5SaWdodF0sXG4gIFtEaXJlY3Rpb24uUmlnaHQsIERpcmVjdGlvbi5MZWZ0XSxcbl0pO1xuXG4vKipcbiAqIFNldHMgdGhlIGRlZmF1bHQgc3RhbmRhcmRpemVkIHN0eWxlcyBmb3IgdGhlIEN1ZSBCb3hcbiAqIGh0dHBzOi8vdzMub3JnL1RSL3dlYnZ0dDEvI2FwcGx5aW5nLWNzcy1wcm9wZXJ0aWVzXG4gKi9cbmNvbnN0IHNldERlZmF1bHRWdHRTdHlsZXMgPSAoY3VlQ29udGFpbmVyRG9tOiBET00sIHZ0dDogVlRUUHJvcGVydGllcykgPT4ge1xuICBpZiAodnR0LnJlZ2lvbikge1xuICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoJ3Bvc2l0aW9uJywgJ3JlbGF0aXZlJyk7XG4gICAgY3VlQ29udGFpbmVyRG9tLmNzcygndW5pY29kZS1iaWRpJywgJ3BsYWludGV4dCcpO1xuICB9IGVsc2Uge1xuICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJyk7XG4gICAgY3VlQ29udGFpbmVyRG9tLmNzcygnb3ZlcmZsb3ctd3JhcCcsICdicmVhay13b3JkJyk7XG4gICAgY3VlQ29udGFpbmVyRG9tLmNzcygnb3ZlcmZsb3cnLCAnaGlkZGVuJyk7XG4gICAgY3VlQ29udGFpbmVyRG9tLmNzcygnZmxleC1mbG93JywgJ2NvbHVtbicpO1xuICB9XG4gIGN1ZUNvbnRhaW5lckRvbS5jc3MoJ2Rpc3BsYXknLCAnaW5saW5lLWZsZXgnKTtcbn07XG5cbi8qKlxuICogQWxpZ24gdGhlIEN1ZSBCb3gncyBsaW5lXG4gKiBodHRwczovL3czLm9yZy9UUi93ZWJ2dHQxLyN3ZWJ2dHQtY3VlLWxpbmUtYWxpZ25tZW50XG4gKi9cbmNvbnN0IHNldFZ0dExpbmVBbGlnbiA9IChcbiAgY3VlQ29udGFpbmVyRG9tOiBET00sXG4gIHsgbGluZUFsaWduIH06IFZUVFByb3BlcnRpZXMsXG4gIGRpcmVjdGlvbjogRGlyZWN0aW9uLFxuICByZWxhdGl2ZUN1ZUJveFBvc2l0aW9uOiBudW1iZXIpID0+IHtcbiAgc3dpdGNoIChsaW5lQWxpZ24pIHtcbiAgICBjYXNlICdjZW50ZXInOlxuICAgICAgc2V0Q3NzRm9yQ2VudGVyTGluZUFsaWduKFxuICAgICAgICBjdWVDb250YWluZXJEb20sIGRpcmVjdGlvbiwgcmVsYXRpdmVDdWVCb3hQb3NpdGlvbik7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdlbmQnOlxuICAgICAgc2V0Q3NzRm9yRW5kTGluZUFsaWduKFxuICAgICAgICBjdWVDb250YWluZXJEb20sIGRpcmVjdGlvbiwgcmVsYXRpdmVDdWVCb3hQb3NpdGlvbik7XG4gIH1cbn07XG5cbi8qKlxuICogRGVmaW5lcyB0aGUgbGluZSBwb3NpdGlvbmluZyBvZiB0aGUgQ3VlIEJveFxuICogaHR0cHM6Ly93My5vcmcvVFIvd2VidnR0MS8jd2VidnR0LWN1ZS1saW5lXG4gKi9cbmNvbnN0IHNldFZ0dExpbmUgPSAoXG4gIGN1ZUNvbnRhaW5lckRvbTogRE9NLFxuICB2dHQ6IFZUVFByb3BlcnRpZXMsXG4gIGRpcmVjdGlvbjogRGlyZWN0aW9uLFxuICBzdWJ0aXRsZU92ZXJMYXlTaXplOiBTaXplLFxuKSA9PiB7XG4gIGNvbnN0IG92ZXJsYXlSZWZlcmVuY2VFZGdlID0gRGlyZWN0aW9uUGFpci5nZXQoZGlyZWN0aW9uKTtcbiAgaWYgKHZ0dC5saW5lID09PSAnYXV0bycgJiYgdnR0LnZlcnRpY2FsKSB7XG4gICAgY3VlQ29udGFpbmVyRG9tLmNzcyhvdmVybGF5UmVmZXJlbmNlRWRnZSwgJzAnKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHZ0dC5saW5lID09PSAnYXV0bycgJiYgIXZ0dC52ZXJ0aWNhbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCByZWxhdGl2ZUxpbmVQb3NpdGlvbiA9IHBhcnNlRmxvYXQodnR0LmxpbmUgYXMgc3RyaW5nKTtcblxuICBpZiAodnR0LnNuYXBUb0xpbmVzKSB7XG4gICAgbGV0IHRhcmdldExpbmUgPSBOdW1iZXIodnR0LmxpbmUpO1xuICAgIGlmICh0YXJnZXRMaW5lIDwgMCkge1xuICAgICAgdGFyZ2V0TGluZSA9IGRlZmF1bHRMaW5lTnVtYmVyICsgdGFyZ2V0TGluZTtcbiAgICB9XG5cbiAgICBjb25zdCBsaW5lSGVpZ2h0ID0gc3VidGl0bGVPdmVyTGF5U2l6ZS5oZWlnaHQgLyBkZWZhdWx0TGluZU51bWJlcjtcbiAgICBjb25zdCBhYnNvbHV0ZUxpbmVQb3NpdGlvbiA9IGxpbmVIZWlnaHQgKiB0YXJnZXRMaW5lO1xuICAgIHJlbGF0aXZlTGluZVBvc2l0aW9uID0gKDEwMCAqIGFic29sdXRlTGluZVBvc2l0aW9uKSAvIHN1YnRpdGxlT3ZlckxheVNpemUuaGVpZ2h0O1xuICB9XG5cbiAgaWYgKHZ0dC5saW5lQWxpZ24gIT09ICdlbmQnKVxuICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoXG4gICAgICBvdmVybGF5UmVmZXJlbmNlRWRnZSwgYCR7cmVsYXRpdmVMaW5lUG9zaXRpb259JWApO1xuICBzZXRWdHRMaW5lQWxpZ24oY3VlQ29udGFpbmVyRG9tLCB2dHQsIGRpcmVjdGlvbiwgcmVsYXRpdmVMaW5lUG9zaXRpb24pO1xufTtcblxuLyoqXG4gKiBEZWZpbmVzIHRoZSB3cml0aW5nIGRpcmVjdGlvbiBvZiB0aGUgQ3VlIEJveFxuICogaHR0cHM6Ly93My5vcmcvVFIvd2VidnR0MS8jd2VidnR0LWN1ZS13cml0aW5nLWRpcmVjdGlvblxuICovXG5jb25zdCBzZXRWdHRXcml0aW5nRGlyZWN0aW9uQW5kQ3VlQm94UG9zaXRpb25pbmcgPSAoXG4gIGN1ZUNvbnRhaW5lckRvbTogRE9NLCB2dHQ6IFZUVFByb3BlcnRpZXMsXG4gIHN1YnRpdGxlT3ZlcmxheVNpemU6IFNpemUsXG4pID0+IHtcbiAgc3dpdGNoICh2dHQudmVydGljYWwpIHtcbiAgY2FzZSAnJzpcbiAgICBjdWVDb250YWluZXJEb20uY3NzKCd3cml0aW5nLW1vZGUnLCAnaG9yaXpvbnRhbC10YicpO1xuICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoRGlyZWN0aW9uLkJvdHRvbSwgJzAnKTtcbiAgICBzZXRWdHRMaW5lKGN1ZUNvbnRhaW5lckRvbSwgdnR0LCBEaXJlY3Rpb24uQm90dG9tLCBzdWJ0aXRsZU92ZXJsYXlTaXplKTtcbiAgICBicmVhaztcbiAgY2FzZSBWdHRWZXJ0aWNhbFdyaXRpbmcuR3Jvd2luZ1JpZ2h0OlxuICAgIHNldEN1ZUJveFBvc2l0aW9uRm9yVmVydGljYWxXcml0aW5nKFxuICAgICAgY3VlQ29udGFpbmVyRG9tLCBEaXJlY3Rpb24uUmlnaHQsIHZ0dCwgc3VidGl0bGVPdmVybGF5U2l6ZSk7XG4gICAgYnJlYWs7XG4gIGNhc2UgVnR0VmVydGljYWxXcml0aW5nLkdyb3dpbmdMZWZ0OlxuICAgIHNldEN1ZUJveFBvc2l0aW9uRm9yVmVydGljYWxXcml0aW5nKFxuICAgICAgY3VlQ29udGFpbmVyRG9tLCBEaXJlY3Rpb24uTGVmdCwgdnR0LCBzdWJ0aXRsZU92ZXJsYXlTaXplKTtcbiAgICBicmVhaztcbiAgfVxufTtcblxuY29uc3Qgc2V0Q3VlQm94UG9zaXRpb25Gb3JWZXJ0aWNhbFdyaXRpbmcgPSAoXG4gIGN1ZUNvbnRhaW5lckRvbTogRE9NLFxuICBkaXJlY3Rpb246IFZlcnRpY2FsV3JpdGluZ0RpcmVjdGlvbixcbiAgdnR0OiBWVFRQcm9wZXJ0aWVzLFxuICBzdWJ0aXRsZU92ZXJsYXlTaXplOiBTaXplLFxuKSA9PiB7XG4gICAgY29uc3Qgd3JpdGluZ01vZGUgPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5SaWdodCA/XG4gICAgICAndmVydGljYWwtbHInIDogJ3ZlcnRpY2FsLXJsJztcblxuICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoJ3dyaXRpbmctbW9kZScsIHdyaXRpbmdNb2RlKTtcbiAgICBjdWVDb250YWluZXJEb20uY3NzKERpcmVjdGlvbi5Ub3AsICcwJyk7XG4gICAgc2V0VnR0TGluZShjdWVDb250YWluZXJEb20sIHZ0dCwgZGlyZWN0aW9uLCBzdWJ0aXRsZU92ZXJsYXlTaXplKTtcbn07XG5cbi8qKlxuICogRGVmaW5lcyB0aGUgQ3VlIHBvc2l0aW9uIGFsaWdubWVudFxuICogaHR0cHM6Ly93My5vcmcvVFIvd2VidnR0MS8jd2VidnR0LWN1ZS1wb3NpdGlvbi1hbGlnbm1lbnRcbiAqL1xuY29uc3Qgc2V0VnR0UG9zaXRpb25BbGlnbiA9IChjdWVDb250YWluZXJEb206IERPTSwgdnR0OiBWVFRQcm9wZXJ0aWVzLCBkaXJlY3Rpb246IERpcmVjdGlvbikgPT4ge1xuICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvd2VidnR0MS8jd2VidnR0LWN1ZS1wb3NpdGlvblxuICBpZiAodnR0LnBvc2l0aW9uID09PSAnYXV0bycpIHtcbiAgICBjdWVDb250YWluZXJEb20uY3NzKGRpcmVjdGlvbiwgJzAnKTtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKHZ0dC5wb3NpdGlvbkFsaWduKSB7XG4gICAgICBjYXNlICdsaW5lLWxlZnQnOlxuICAgICAgICBjdWVDb250YWluZXJEb20uY3NzKGRpcmVjdGlvbiwgYCR7dnR0LnBvc2l0aW9ufSVgKTtcbiAgICAgICAgY3VlQ29udGFpbmVyRG9tLmNzcyhEaXJlY3Rpb25QYWlyLmdldChkaXJlY3Rpb24pLCAnYXV0bycpO1xuICAgICAgICBjdWVDb250YWluZXJEb20uY3NzKCdqdXN0aWZ5LWNvbnRlbnQnLCAnZmxleC1zdGFydCcpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoZGlyZWN0aW9uLCBgJHt2dHQucG9zaXRpb24gLSB2dHQuc2l6ZSAvIDJ9JWApO1xuICAgICAgICBjdWVDb250YWluZXJEb20uY3NzKERpcmVjdGlvblBhaXIuZ2V0KGRpcmVjdGlvbiksICdhdXRvJyk7XG4gICAgICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoJ2p1c3RpZnktY29udGVudCcsICdjZW50ZXInKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdsaW5lLXJpZ2h0JzpcbiAgICAgICAgY3VlQ29udGFpbmVyRG9tLmNzcyhkaXJlY3Rpb24sICdhdXRvJyk7XG4gICAgICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoRGlyZWN0aW9uUGFpci5nZXQoZGlyZWN0aW9uKSwgYCR7MTAwIC0gdnR0LnBvc2l0aW9ufSVgKTtcbiAgICAgICAgY3VlQ29udGFpbmVyRG9tLmNzcygnanVzdGlmeS1jb250ZW50JywgJ2ZsZXgtZW5kJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgY3VlQ29udGFpbmVyRG9tLmNzcyhkaXJlY3Rpb24sIGAke3Z0dC5wb3NpdGlvbn0lYCk7XG4gICAgICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoJ2p1c3RpZnktY29udGVudCcsICdmbGV4LXN0YXJ0Jyk7XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCBjb3VudExpbmVzID0gKGlubmVySHRtbDogc3RyaW5nKSA9PlxuICBpbm5lckh0bWwuc3BsaXQoJzxiciAvPicpLmxlbmd0aDtcblxuY29uc3Qgc2V0Q3NzRm9yQ2VudGVyTGluZUFsaWduID0gKFxuICBjdWVDb250YWluZXJEb206IERPTSxcbiAgZGlyZWN0aW9uOiBEaXJlY3Rpb24sXG4gIHJlbGF0aXZlQ3VlQm94UG9zaXRpb246IG51bWJlcikgPT4ge1xuICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgIGNhc2UgRGlyZWN0aW9uLkJvdHRvbTpcbiAgICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGVZKC01MCUpJyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIERpcmVjdGlvbi5MZWZ0OlxuICAgICAgY3VlQ29udGFpbmVyRG9tLmNzcygndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZVgoNTAlKScpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBEaXJlY3Rpb24uUmlnaHQ6XG4gICAgICBjdWVDb250YWluZXJEb20uY3NzKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlWCgtNTAlKScpO1xuICAgICAgYnJlYWs7XG4gIH1cbn07XG5cbmNvbnN0IHNldENzc0ZvckVuZExpbmVBbGlnbiA9IChcbiAgY3VlQ29udGFpbmVyRG9tOiBET00sXG4gIGRpcmVjdGlvbjogRGlyZWN0aW9uLFxuICBvZmZzZXQ6IG51bWJlcikgPT4ge1xuICAgICAgY29uc3Qgb3Bvc2l0ZVRvT3ZlcmxheVJlZmVyZW5jZUVkZ2UgPSBkaXJlY3Rpb247XG4gICAgICBjdWVDb250YWluZXJEb20uY3NzKG9wb3NpdGVUb092ZXJsYXlSZWZlcmVuY2VFZGdlLCBgJHsxMDAgLSBvZmZzZXR9JWApO1xufTtcblxuLyoqXG4gKiBAY2F0ZWdvcnkgVXRpbHNcbiAqL1xuZXhwb3J0IG5hbWVzcGFjZSBWdHRVdGlscyB7XG4gIGV4cG9ydCBjb25zdCBzZXRWdHRDdWVCb3hTdHlsZXMgPSAoXG4gICAgY3VlQ29udGFpbmVyOiBTdWJ0aXRsZUxhYmVsLFxuICAgIHN1YnRpdGxlT3ZlcmxheVNpemU6IFNpemUsXG4gICkgPT4ge1xuICAgIGNvbnN0IHZ0dCA9IGN1ZUNvbnRhaW5lci52dHQ7XG4gICAgY29uc3QgY3VlQ29udGFpbmVyRG9tID0gY3VlQ29udGFpbmVyLmdldERvbUVsZW1lbnQoKTtcblxuXG4gICAgc2V0RGVmYXVsdFZ0dFN0eWxlcyhjdWVDb250YWluZXJEb20sIHZ0dCk7XG5cbiAgICBsaW5lQ291bnQgPSBjb3VudExpbmVzKGN1ZUNvbnRhaW5lci5nZXRUZXh0KCkpO1xuICAgIHNldFZ0dFdyaXRpbmdEaXJlY3Rpb25BbmRDdWVCb3hQb3NpdGlvbmluZyhjdWVDb250YWluZXJEb20sIHZ0dCwgc3VidGl0bGVPdmVybGF5U2l6ZSk7XG5cbiAgICAvLyBodHRwczovL3czLm9yZy9UUi93ZWJ2dHQxLyN3ZWJ2dHQtY3VlLXRleHQtYWxpZ25tZW50XG4gICAgY29uc3QgdGV4dEFsaWduID0gdnR0LmFsaWduID09PSAnbWlkZGxlJyA/ICdjZW50ZXInIDogdnR0LmFsaWduO1xuICAgIGN1ZUNvbnRhaW5lckRvbS5jc3MoJ3RleHQtYWxpZ24nLCB0ZXh0QWxpZ24pO1xuXG4gICAgLy8gaHR0cHM6Ly93My5vcmcvVFIvd2VidnR0MS8jd2VidnR0LWN1ZS1zaXplXG4gICAgY29uc3QgY29udGFpbmVyU2l6ZSA9IHZ0dC5zaXplO1xuICAgIGlmICh2dHQudmVydGljYWwgPT09ICcnKSB7XG4gICAgICBjdWVDb250YWluZXJEb20uY3NzKCd3aWR0aCcsIGAke2NvbnRhaW5lclNpemV9JWApO1xuICAgICAgc2V0VnR0UG9zaXRpb25BbGlnbihjdWVDb250YWluZXJEb20sIHZ0dCwgRGlyZWN0aW9uLkxlZnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdWVDb250YWluZXJEb20uY3NzKCdoZWlnaHQnLCBgJHtjb250YWluZXJTaXplfSVgKTtcbiAgICAgIHNldFZ0dFBvc2l0aW9uQWxpZ24oY3VlQ29udGFpbmVyRG9tLCB2dHQsIERpcmVjdGlvbi5Ub3ApO1xuICAgIH1cbiAgfTtcblxuICAvKiogaHR0cHM6Ly93d3cudzMub3JnL1RSL3dlYnZ0dDEvI3JlZ2lvbnNcbiAgICogIGh0dHBzOi8vd3d3LnNwZWVjaHBhZC5jb20vY2FwdGlvbnMvd2VidnR0I3RvY18xNlxuICAgKi9cbiAgZXhwb3J0IGNvbnN0IHNldFZ0dFJlZ2lvblN0eWxlcyA9IChcbiAgICByZWdpb25Db250YWluZXI6IFN1YnRpdGxlUmVnaW9uQ29udGFpbmVyLFxuICAgIHJlZ2lvbjogVlRUUmVnaW9uUHJvcGVydGllcyxcbiAgICBvdmVybGF5U2l6ZTogU2l6ZSxcbiAgKSA9PiB7XG4gICAgY29uc3QgcmVnaW9uQ29udGFpbmVyRG9tID0gcmVnaW9uQ29udGFpbmVyLmdldERvbUVsZW1lbnQoKTtcbiAgICBjb25zdCByZWdpb25Qb3NpdGlvblggPSBvdmVybGF5U2l6ZS53aWR0aCAqIHJlZ2lvbi52aWV3cG9ydEFuY2hvclggLyAxMDAgLSAoKG92ZXJsYXlTaXplLndpZHRoICogcmVnaW9uLndpZHRoIC8gMTAwKSAqIHJlZ2lvbi5yZWdpb25BbmNob3JYIC8gMTAwKTtcbiAgICBjb25zdCByZWdpb25Qb3NpdGlvblkgPSBvdmVybGF5U2l6ZS5oZWlnaHQgKiByZWdpb24udmlld3BvcnRBbmNob3JZIC8gMTAwIC0gKChyZWdpb24ubGluZXMgKiBsaW5lSGVpZ2h0KSAqIHJlZ2lvbi5yZWdpb25BbmNob3JZIC8gMTAwKTtcbiAgICByZWdpb25Db250YWluZXJEb20uY3NzKCdwb3NpdGlvbicsICdhYnNvbHV0ZScpO1xuICAgIHJlZ2lvbkNvbnRhaW5lckRvbS5jc3MoJ292ZXJmbG93JywgJ2hpZGRlbicpO1xuICAgIHJlZ2lvbkNvbnRhaW5lckRvbS5jc3MoJ3dpZHRoJywgYCR7cmVnaW9uLndpZHRofSVgKTtcbiAgICByZWdpb25Db250YWluZXJEb20uY3NzKERpcmVjdGlvbi5MZWZ0LCBgJHtyZWdpb25Qb3NpdGlvblh9cHhgKTtcbiAgICByZWdpb25Db250YWluZXJEb20uY3NzKERpcmVjdGlvbi5SaWdodCwgJ3Vuc2V0Jyk7XG4gICAgcmVnaW9uQ29udGFpbmVyRG9tLmNzcyhEaXJlY3Rpb24uVG9wLCBgJHtyZWdpb25Qb3NpdGlvbll9cHhgKTtcbiAgICByZWdpb25Db250YWluZXJEb20uY3NzKERpcmVjdGlvbi5Cb3R0b20sICd1bnNldCcpO1xuICAgIHJlZ2lvbkNvbnRhaW5lckRvbS5jc3MoJ2hlaWdodCcsIGAke3JlZ2lvbi5saW5lcyAqIGxpbmVIZWlnaHR9cHhgKTtcbiAgfTtcbn1cbiJdfQ==
